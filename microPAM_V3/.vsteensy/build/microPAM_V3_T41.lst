
.vsteensy/build/microPAM_V3_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
600024d4 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00017a10 l    d  .fini	00000000 .fini
00017a14 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20009ac0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60023c08 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
600018ec l     F .text.code	00000024 flexspi2_command
60001910 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
0000afbc l     F .text.itcm	000000a0 endpoint0_receive
0000b05c l     F .text.itcm	0000007c schedule_transfer
0000b0d8 l     F .text.itcm	00000034 run_callbacks
0000b10c l     F .text.itcm	0000001c usb_endpoint_config
0000b128 l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
20010baf l     O .bss	00000008 endpoint0_buffer
20010168 l     O .bss	00000004 endpoint0_notify_mask
2000c1c0 l     O .bss	00000008 endpoint0_setupdata
2001016c l     O .bss	00000004 endpointN_notify_mask
20010bb9 l     O .bss	00000008 reply_buffer
20010bd3 l     O .bss	00000001 sof_usage
20010bdb l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
200102a8 l     O .bss	00000004 s_hotCount
200102ac l     O .bss	00000004 s_hotTemp
200102b0 l     O .bss	00000004 s_hot_ROOM
200102b4 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001e54 l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 analog.c
20010bae l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20010204 l     O .bss	00000000 object.0
600024c0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00000190 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00000670 l     F .text.itcm	000000f0 _GLOBAL__sub_I_storage
2000c1cc l     O .bss	00000004 guard variable for loop::status
2000fc40 l     O .bss	00000004 loop::t0
20010998 l     O .bss	00000002 loop::mxb
2001099a l     O .bss	00000002 loop::status
2000fc44 l     O .bss	00000004 loop::loopCount
20007ee4 l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Acq.cpp
000008e4 l     F .text.itcm	000000ac acq_isr()
20200000 l     O .bss.dma	00001000 i2s_buffer
00000c40 l     F .text.itcm	00000024 _GLOBAL__sub_I_procCount
2000f3dc l     O .bss	00000008 dma
00000000 l    df *ABS*	00000000 Filing.cpp
0000275a l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
0000277a l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000279e l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
2000c1d0 l     O .bss	00001800 diskBuffer
2000dbdc l     O .bss	00001800 tempBuffer0
00002ffc l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
2000d9d0 l     O .bss	00000200 fileHeader
20010a72 l     O .bss	00000050 dirName
2000f7f4 l     O .bss	00000200 wav_hdr
20010ac2 l     O .bss	00000050 fileName
2000fc3c l     O .bss	00000004 checkEndOfFile(short)::dta
20010b16 l     O .bss	00000050 timeStamp()::date_time
20008e34 l     O .data	00000004 newFolder(int)::d0
00000000 l    df *ABS*	00000000 RTC.cpp
00003712 l     F .text.itcm	00000026 Print::println(char const*) [clone .isra.0]
00003a60 l     F .text.itcm	0000000c _GLOBAL__sub_I__Z7initRTChh
20007f4b l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 usb_desc.c
20009411 l     O .data	00000012 device_descriptor
60002722 l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000c8e l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000cb4 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000cf0 l     F .text.itcm	0000003c dbgPrint(unsigned short)
000010e0 l     F .text.itcm	00000064 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
0000158e l     F .text.itcm	0000002e MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]
000016f8 l     F .text.itcm	0000009c MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]
00001a60 l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001db8 l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001dca l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00001de0 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00001e04 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001e08 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001e1c l     F .text.itcm	00000038 menuGetLine()
00001e54 l     F .text.itcm	0000001c menuGetInt32(long*) [clone .isra.0]
00001e70 l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
20010978 l     O .bss	00000020 store
20010b66 l     O .bss	00000028 menuGetLine()::buffer
20007f0c l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Queue.cpp
70000000 l     O .bss.extram	00018000 data_buffer
2000dbd4 l     O .bss	00000004 queue_busy
2000f5e4 l     O .bss	00000004 head
2000f5e8 l     O .bss	00000004 tail
00000000 l    df *ABS*	00000000 Compress.cpp
2000f3e4 l     O .bss	00000200 dout
2000f5f4 l     O .bss	00000200 outData
2000f9f4 l     O .bss	00000200 tempData
2000fc48 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
00003370 l     F .text.itcm	00000024 Print::print(char const*) [clone .isra.0]
20007ed8 l     O .data	00000004 regs
20007edc l     O .data	00000008 chmap
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 RV-3028-C7.cpp
00003e10 l     F .text.itcm	0000000a RV3028::setTime(unsigned char*, unsigned char) [clone .part.0]
00004040 l     F .text.itcm	00000030 RV3028::setBackupSwitchoverMode(unsigned char) [clone .part.0]
20010b8e l     O .bss	00000020 RV3028::stringTimeStamp()::timeStamp
00000000 l    df *ABS*	00000000 MTP.cpp
000040be l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
000040d4 l     F .text.itcm	00000078 MTPD::write(char const*, int) [clone .part.0]
00004b26 l     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
2000fc4c l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
2000fc50 l     O .bss	00000004 MTPD::write(char const*, int)::dst
200079e8 l     O .data	00000010 propertyList
200079f8 l     O .data	00000028 supported_op
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
200078bc l     O .data	0000012c lookupTable
20007a20 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00006934 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000072f4 l     F .text.itcm	00000030 FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00008348 l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00009408 l     F .text.itcm	0000002c sdIrs()
00009434 l     F .text.itcm	00000020 gpioMux(unsigned char)
00009454 l     F .text.itcm	00000018 isBusyCommandComplete()
0000946c l     F .text.itcm	00000010 isBusyCommandInhibit()
0000947c l     F .text.itcm	00000014 isBusyDat()
00009490 l     F .text.itcm	0000000c isBusyDMA()
0000949c l     F .text.itcm	00000014 isBusyFifoRead()
000094b0 l     F .text.itcm	00000014 isBusyFifoWrite()
000094c4 l     F .text.itcm	00000018 isBusyTransferComplete()
000094dc l     F .text.itcm	000000a4 setSdclk(unsigned long)
000095e4 l     F .text.itcm	00000024 waitTimeout(bool (*)())
00009608 l     F .text.itcm	0000003c yieldTimeout(bool (*)())
00009654 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
00009684 l     F .text.itcm	000000d4 initSDHC()
00009774 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
000097dc l     F .text.itcm	00000020 statusCMD13()
000097fc l     F .text.itcm	00000010 isBusyCMD13()
00009810 l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00009868 l     F .text.itcm	00000030 waitDmaStatus()
00009898 l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00009b90 l     F .text.itcm	0000005c waitTransferComplete()
00009df8 l     F .text.itcm	0000008c cardCMD6(unsigned long, unsigned char*)
20010a4e l     O .bss	00000001 m_initDone
2000dbd0 l     O .bss	00000004 m_sdClkKhz
20010a4f l     O .bss	00000001 m_version2
2000dbd8 l     O .bss	00000004 m_errorLine
20010a50 l     O .bss	00000001 m_highCapacity
20010a51 l     O .bss	00000001 m_transferActive
20010a52 l     O .bss	00000010 m_cid
20010a62 l     O .bss	00000010 m_csd
2000f5ec l     O .bss	00000004 m_ocr
2000f5f0 l     O .bss	00000004 m_rca
2000fbf4 l     O .bss	00000004 m_busyFcn
20010b12 l     O .bss	00000001 m_dmaBusy
2000fbf8 l     O .bss	00000004 m_irqstat
20009410 l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
0000a338 l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000a6a0 l     F .text.itcm	00000060 rx_queue_transfer
20201000 l     O .bss.dma	00001000 rx_buffer
0000a700 l     F .text.itcm	000000ac rx_event
0000a7ac l     F .text.itcm	0000008c usb_serial_flush_callback
20202000 l     O .bss.dma	00002000 txbuffer
20010290 l     O .bss	00000004 rx_available
200109a4 l     O .bss	00000010 rx_count
20010bc1 l     O .bss	00000001 rx_head
200109b4 l     O .bss	00000010 rx_index
20010bc3 l     O .bss	00000009 rx_list
200109c4 l     O .bss	00000002 rx_packet_size
20010bd1 l     O .bss	00000001 rx_tail
2000bf40 l     O .bss	00000100 rx_transfer
20010bd4 l     O .bss	00000001 transmit_previous_timeout
20010a48 l     O .bss	00000002 tx_available
20010bd5 l     O .bss	00000001 tx_head
20010bd7 l     O .bss	00000001 tx_noautoflush
20010a4a l     O .bss	00000002 tx_packet_size
2000c0c0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000bd18 l     F .text.itcm	00000058 flash_wait
20010bb8 l     O .bss	00000001 initialized
200109c8 l     O .bss	0000007e sector_index
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000c3b0 l     F .text.itcm	00000010 txEvent_event
0000c3c0 l     F .text.itcm	0000003c rx_event
0000c3fc l     F .text.itcm	00000060 rx_queue_transfer
20010bc2 l     O .bss	00000001 rx_head
20010bcc l     O .bss	00000005 rx_list
20010294 l     O .bss	00000014 rx_list_transfer_len
200109c6 l     O .bss	00000002 rx_packet_size
20010bd2 l     O .bss	00000001 rx_tail
2000c040 l     O .bss	00000080 rx_transfer
20010bd6 l     O .bss	00000001 tx_head
20010a4c l     O .bss	00000002 tx_packet_size
2000c140 l     O .bss	00000080 tx_transfer
20204000 l     O .bss.dma	00000800 rx_buffer
20204800 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20010b15 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000c9c2 l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-realloc.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
00000000 l    df *ABS*	00000000 libc_a-strtol.o
0000e76c l     F .text.itcm	00000144 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000e8cc l     F .text.itcm	00000018 stdio_exit_handler
0000e8e4 l     F .text.itcm	00000040 cleanup_stdio
0000e924 l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-sscanf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strlcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcmp.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
0000f9b0 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfscanf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-sccl.o
00000000 l    df *ABS*	00000000 libc_a-stpncpy.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
00014538 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-strtoul.o
0001534c l     F .text.itcm	00000140 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-strtoll.o
00015490 l     F .text.itcm	0000016c _strtoll_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-strtoull.o
00015600 l     F .text.itcm	0000019c _strtoull_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-mbrtowc.o
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-iswspace.o
00000000 l    df *ABS*	00000000 libc_a-iswspace_l.o
00000000 l    df *ABS*	00000000 libc_a-jp2uc.o
00015888 l     F .text.itcm	00000134 __jp2uc
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiscanf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
00015cb8 l     F .text.itcm	00000076 __sprint_r.part.0
00016cbc l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-ungetc.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-categories.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
000179d8 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
000179e0 l     F .text.itcm	00000008 ___init_veneer
000179e8 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
000179f0 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
000179f8 l     F .text.itcm	00000008 __usb_init_veneer
00017a00 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00017a08 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
60002428 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002430 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002438 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
60002440 l     F .text.code	00000008 __sm_set_pool_veneer
60002448 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002450 l     F .text.code	00000008 __set_arm_clock_veneer
60002458 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002460 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
60002468 l     F .text.code	00000008 __main_veneer
60002470 l     F .text.code	00000008 __delay_veneer
60002478 l     F .text.code	00000008 __memset_veneer
60002480 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
60002488 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
60002490 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
60002498 l     F .text.code	00000008 ____libc_init_array_veneer
600024a0 l     F .text.code	00000008 ___ZN7TwoWire8setClockEm_veneer
600024a8 l     F .text.code	00000008 __usb_init_serialnumber_veneer
600024b0 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
600024b8 l     F .text.code	00000008 __pwm_init_veneer
00007324  w    F .text.itcm	00000026 FatPartition::cacheSync()
600024d4 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
00005abc g     F .text.itcm	000000a8 toUpcase(unsigned short)
0000109a g     F .text.itcm	0000002c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00002634 g     F .text.itcm	00000060 pushData(unsigned long*)
0000aa54 g     F .text.itcm	00000014 usb_serial_available
00010c0c g     F .text.itcm	00000062 __any_on
000175c8 g     F .text.itcm	00000024 _isatty_r
0000f41c g     F .text.itcm	000000ba strcpy
00007e8c g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
60001940 g     F .text.code	00000002 startup_default_late_hook
0000f034 g     F .text.itcm	0000002c _lseek_r
00009930 g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c730  w    F .text.itcm	00000074 yield
00008d74  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20010224 g     O .bss	00000060 proc_stat
20010974 g     O .bss	00000004 usb_timer1_callback
00004254 g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
000042ac g     F .text.itcm	00000014 MTPD::write32(unsigned long)
00007ce8 g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
0000ca9e g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
20010790 g     O .bss	000001b8 storage
60002634 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200109a2 g     O .bss	00000002 proc
60001a58 g     F .text.code	00000274 configure_external_ram
000039ac g     F .text.itcm	0000005c rtcXferTime()
00008cde  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
20008bb4 g     O .data	00000140 Wire1
000011c4 g     F .text.itcm	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
000093c8  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00017908 g     F .text.itcm	0000005a .hidden __floatdidf
000084c4 g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
2001021c g     O .bss	00000004 procCount
000081f4 g     F .text.itcm	00000118 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
2000fbfc g     O .bss	00000004 FsDateTime::callback
2000fde8 g     O .bss	00000001 __lock___atexit_recursive_mutex
000157f4 g     F .text.itcm	0000004c _wcrtomb_r
6000165c g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
000085e8 g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
000091b0 g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000ca38 g     F .text.itcm	0000001a Print::println()
000057d0 g     F .text.itcm	00000098 TwoWire::isr()
200004a8 g     O .data	00000070 vtable for DedicatedSpiCard
20010220 g     O .bss	00000004 procMiss
0000ec1c g     F .text.itcm	00000020 __sseek
0000e9f8 g     F .text.itcm	0000003c __sinit
00005fa8 g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
00010c8c g     F .text.itcm	000000a4 fcvtbuf
000174ec g     F .text.itcm	000000b0 __swbuf_r
00004172 g     F .text.itcm	0000001e MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000d4f4 g     F .text.itcm	0000000c __malloc_unlock
0000368a g     F .text.itcm	0000004c i2c_class::read(unsigned char, unsigned char)
200093e8 g     O .data	00000004 t_4
2000fc34 g     O .bss	00000004 FsVolume::m_cwv
00003644 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
00002604 g     F .text.itcm	00000008 getStore()
0000790c g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
2000c1c8 g     O .bss	00000004 SerNum
20010b14 g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
00008cd2  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600023d0 g     F .text.code	0000004c analog_init
0000e760 g     F .text.itcm	0000000c _strtod_r
000015bc g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
0000ec44 g     F .text.itcm	0000004a _vdprintf_r
00009002 g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
0000bd70 g     F .text.itcm	00000044 eeprom_initialize
00002f1c g     F .text.itcm	000000e0 saveData(short)
20010a46 g     O .bss	00000002 shift
20008a60 g     O .data	00000004 F_CPU_ACTUAL
00015c04 g     F .text.itcm	000000b4 _sfread_r
0000ed70 g     F .text.itcm	000000f8 memmove
20010954 g     O .bss	00000004 t_1
000015ea g     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
200101f8 g     O .bss	00000004 max_stat
0000ea94 g     F .text.itcm	00000088 snprintf
0000a2b8 g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
000101fc g     F .text.itcm	0000004c _Balloc
00000c7a  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
00017a1c g       .ARM.exidx	00000000 __exidx_end
00008106 g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
20010b13 g     O .bss	00000001 EventResponder::runningFromYield
0000a4ae g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
00008bc8 g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000c1a4 g     F .text.itcm	00000060 tempmonGetTemp
0000c0e4 g     F .text.itcm	0000001e smalloc_verify_pool
20008e38 g     O .data	00000004 __atexit_recursive_mutex
0000f0dc g     F .text.itcm	0000000c __errno
00002034 g     F .text.itcm	0000009c saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
2000fc0c g     O .bss	00000004 EventResponder::firstInterrupt
0000b7b0 g     F .text.itcm	00000028 usb_transfer_status
00004402 g     F .text.itcm	00000050 MTPD::GetObjectHandles(unsigned long, unsigned long)
00003f10 g     F .text.itcm	00000082 RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)
0000c136 g     F .text.itcm	0000006a sm_set_pool
00002a64 g     F .text.itcm	00000014 newFolder(int)
2000fc14 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
00003a30 g     F .text.itcm	00000030 rtcGetTimestamp()
2000ff60 g     O .bss	00000004 __stdio_exit_handler
000004b8  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
000068d0 g     F .text.itcm	00000018 ExFatPartition::rootLength()
00017964 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
000028dc g     F .text.itcm	00000014 headerUpdate(long)
0000c934  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0001759c g     F .text.itcm	0000002c _fstat_r
2000743c g     O .data	00000370 digital_pin_to_info_PGM
20010170 g     O .bss	00000004 errno
0000a4b8 g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00006654 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
6000256c  w    O .text.progmem	00000050 TwoWire::i2c3_hardware
0000ebd8 g     F .text.itcm	00000004 __seofread
00017a18 g       .text.itcm	00000000 _etext
00008904 g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
20009ac0 g       .bss	00000000 _sbss
0000958c g     F .text.itcm	0000000c SdioCard::errorData() const
00000d76 g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
00003956 g     F .text.itcm	0000000e rtc_set_datetime(datetime_t*)
00004202 g     F .text.itcm	00000016 MTPD::write16(unsigned short)
00001858 g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
00009bec g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
000067f0 g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
00003cbe g     F .text.itcm	0000007c RV3028::set24Hour()
6000272c g       *ABS*	00000000 _stextload
00000258 g     F .text.itcm	00000220 loop
0000c2a8 g     F .text.itcm	00000072 flexpwm_init
0000be34 g     F .text.itcm	000000dc eepromemu_flash_write
60001942 g     F .text.code	00000004 startup_debug_reset
0000b6c4 g     F .text.itcm	00000040 usb_config_rx
0000461c g     F .text.itcm	0000010c MTPD::GetStorageInfo(unsigned long)
00003ac8 g     F .text.itcm	0000001a RV3028::isPM()
00005d78 g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000a0f0 g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
00003a6c g     F .text.itcm	00000002 RV3028::RV3028()
000055d8 g     F .text.itcm	000000e4 TwoWire::endTransmission(unsigned char)
000036d6 g     F .text.itcm	0000003c i2c_class::write(unsigned char, unsigned char, unsigned char)
2000fc08 g     O .bss	00000004 EventResponder::lastInterrupt
00003ae4 g     F .text.itcm	00000130 RV3028::stringTimeStamp()
00008a68 g     F .text.itcm	0000002a FsBaseFile::close()
000053a2 g     F .text.itcm	00000048 SPIClass::end()
0000a56c g     F .text.itcm	00000134 memcpy
00010020 g     F .text.itcm	000001b0 __hexnan
0000161c g     F .text.itcm	000000dc MTPStorage_SD::removeFile(unsigned long, char*)
00009278 g     F .text.itcm	00000032 SharedSpiCard::writeStop()
00005904 g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
0000149a g     F .text.itcm	000000f4 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00002024 g     F .text.itcm	00000008 storeConfig(unsigned short*, int)
20009ac0 g     O .data	00000000 .hidden __TMC_END__
00006734 g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
00001358 g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
000075ce g     F .text.itcm	00000026 FatFile::peek()
000020d0 g     F .text.itcm	00000048 menu1(short)
20010200 g     O .bss	00000004 nbuf
00010d30 g     F .text.itcm	00001b44 _svfprintf_r
00017890 g     F .text.itcm	00000022 .hidden __floatsidf
2001094c g     O .bss	00000004 systick_millis_count
00006dd4 g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000c594 g     F .text.itcm	00000030 usb_mtp_available
00000478 g     F .text.itcm	00000040 setup1()
000055a4 g     F .text.itcm	00000034 TwoWire::wait_idle()
00004d64 g     F .text.itcm	000005e6 MTPD::loop()
0000cc6c g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20010bd9 g     O .bss	00000001 usb_configuration
00008cc8  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000c102 g     F .text.itcm	00000034 sm_align_pool
0000a31c g     F .text.itcm	0000001c SdioCard::syncDevice()
00009d04 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000d0  w    F .text.itcm	00000050 StreamFile<FsBaseFile, unsigned long long>::available()
000075f4 g     F .text.itcm	0000003e FatFile::readDirCache(bool)
00010b4c g     F .text.itcm	00000062 __ratio
00008d82 g     F .text.itcm	0000007e SharedSpiCard::sectorCount()
60002634  w    O .text.progmem	00000018 usb_string_manufacturer_name
200093e4 g     O .data	00000004 t_3
6000260c g     O .text.progmem	00000008 usb_string_mtp
0000cf68 g     F .text.itcm	00000010 malloc
00000248 g     F .text.itcm	00000010 reboot()
00003644 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
600025bc  w    O .text.progmem	00000050 TwoWire::i2c1_hardware
20000540  w    O .data	00000024 vtable for FsFile
0000bc96  w    F .text.itcm	0000000a _fstat
00015858 g     F .text.itcm	00000006 iswspace
2000ff64 g     O .bss	00000200 acqBuffer
000053f6  w    F .text.itcm	0000001e TwoWire::read()
00014480 g     F .text.itcm	00000040 __assert_func
00004d30 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
00002b60 g     F .text.itcm	000000a0 getAlarmTime(unsigned long)
20000328 g     O .data	000000c8 __mprec_tens
600017b4 g     F .text.code	000000e4 usb_init
00008a92 g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
20010788 g     O .bss	00000004 sessionID_
00002c14 g     F .text.itcm	000000a0 do_hibernate(unsigned long)
00008cce  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000c64  w    F .text.itcm	00000016 MTPStorage_SD::addFilesystem(SdFs&, char const*)
2000fe24 g     O .bss	00000004 __malloc_top_pad
0000bcd4 g     F .text.itcm	00000044 rtc_set
00015bc8 g     F .text.itcm	0000003a __ssrefill_r
20010950 g     O .bss	00000004 systick_safe_read
00005490 g     F .text.itcm	00000114 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00006e68 g     F .text.itcm	000000ca ExFatFile::truncate()
20008e40 g     O .data	00000000 .hidden __dso_handle
0000bf10 g     F .text.itcm	000000b4 eepromemu_flash_erase_sector
00017870 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
000143fc g     F .text.itcm	00000008 _localeconv_r
200093dc g     O .data	00000004 sd_str
0001579c g     F .text.itcm	00000004 _strtoull_r
0000a45a g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00016d3c g     F .text.itcm	000002f4 __sfvwrite_r
00010450 g     F .text.itcm	0000005c __i2b
20000000 g       .data	00000000 _sdata
0000c45c g     F .text.itcm	000000a4 usb_mtp_configure
200093f0 g     O .data	00000004 t_on
600026b9 g     O .text.progmem	00000069 usb_config_descriptor_480
0000cc9c g     F .text.itcm	000002c8 .hidden __udivmoddi4
00004554 g     F .text.itcm	000000c8 MTPD::getObjectPropValue(unsigned long, unsigned long)
000175ec g     F .text.itcm	00000000 .hidden __aeabi_drsub
0000a4a8 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
0000734a g     F .text.itcm	00000036 FatFile::addCluster()
0000f08c g     F .text.itcm	00000024 _sbrk_r
00009758 g     F .text.itcm	0000001c SdioCard::type() const
000041a4 g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
6000193c g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
0000aac8 g     F .text.itcm	0000001e usb_serial_getchar
00000d5e  w    F .text.itcm	00000018 FsVolume::clusterCount() const
20010964 g     O .bss	00000008 usb_cdc_line_coding
0000c204 g     F .text.itcm	00000040 digitalWrite
00007ee4  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
2000fc10 g     O .bss	00000004 EventResponder::lastYield
00005d52 g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000f060 g     F .text.itcm	0000002c _read_r
00000cca  w    F .text.itcm	00000024 Print::write(char const*)
20010960 g     O .bss	00000004 termon
00000082  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
00008d6c  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
000140c4 g     F .text.itcm	000000c6 _fclose_r
20010174 g     O .bss	00000010 extmem_smalloc_pool
2000fe1c g     O .bss	00000004 __malloc_max_sbrked_mem
000090f8 g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c244 g     F .text.itcm	00000064 pinMode
000013d2 g     F .text.itcm	00000028 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000ee0  w    F .text.itcm	0000001c FsFile::FsFile()
0000cb30 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
000178b4 g     F .text.itcm	00000042 .hidden __extendsfdf2
00012874 g     F .text.itcm	00001850 __ssvfscanf_r
0000c8f8  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000e98  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
000175f8 g     F .text.itcm	00000276 .hidden __adddf3
60001690 g     F .text.code	00000050 TwoWire::setSDA(unsigned char)
20008cf4 g     O .data	00000140 Wire2
00004524 g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
00004190 g     F .text.itcm	00000012 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60024000 g     O .text.csf	00000c00 hab_csf
00004218 g     F .text.itcm	0000003a MTPD::writestring(char const*)
0000814c g     F .text.itcm	000000a8 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
000109b4 g     F .text.itcm	000000c2 __b2d
000033fc g     F .text.itcm	000001a4 adc_init()
00017a14 g       .ARM.exidx	00000000 __exidx_start
70018000 g       .bss.extram	00000000 _extram_end
000008d8  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200093e0 g     O .data	00000004 t_2
0000c8d4  w    F .text.itcm	00000008 Print::print(unsigned char)
0000bca0  w    F .text.itcm	00000004 _isatty
2000fc04 g     O .bss	00000004 EventResponder::firstYield
00000ed2 g     F .text.itcm	0000000c MTPStorage_SD::write(char const*, unsigned long)
00005998 g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001fe  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000d518 g     F .text.itcm	000003d8 _realloc_r
0000f0e8 g     F .text.itcm	00000048 __libc_init_array
0000b820 g     F .text.itcm	00000248 dtostrf
000053ea  w    F .text.itcm	0000000c TwoWire::available()
0000649e g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00009598 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
200006c0 g     O .data	00000100 __hexdig
00006c1e g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
0000148e g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
00003aba g     F .text.itcm	0000000e RV3028::is12Hour()
00001a1c g     F .text.itcm	00000042 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
00017220 g     F .text.itcm	00000066 _fputwc_r
00003668 g     F .text.itcm	00000022 i2c_class::exist(unsigned char)
20000300 g     O .data	00000028 __mprec_bigtens
00010300 g     F .text.itcm	000000b0 __s2b
0000907a  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000bcaa  w    F .text.itcm	00000004 abort
000056bc g     F .text.itcm	00000114 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000c91c  w    F .text.itcm	00000004 usb_serial_class::clear()
00017870 g     F .text.itcm	0000001e .hidden __floatunsidf
0000bc60  w    F .text.itcm	0000002c _sbrk
6001a148 g       *ABS*	00000000 _sdataload
000107b8 g     F .text.itcm	00000042 __mcmp
000017a2 g     F .text.itcm	000000b6 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
20008e3c g     O .data	00000004 __brkval
20010bd8 g     O .bss	00000001 usb_cdc_line_rtsdtr
6000241c g     F .text.code	00000000 _init
0000a838 g     F .text.itcm	00000002 usb_serial_reset
000073f0 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
00003a6e g     F .text.itcm	0000004c RV3028::readRegister(unsigned char)
0000bfc4 g     F .text.itcm	00000104 eeprom_write_byte
00000fb8  w    F .text.itcm	0000004e mSD_Base::sd_rmdir(unsigned long, char*)
00017998 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
60002650 g     O .text.progmem	00000069 usb_config_descriptor_12
20000564 g     O .data	00000024 vtable for TwoWire
0000d8f0 g     F .text.itcm	00000e70 _strtod_l
0000ffe8 g     F .text.itcm	00000036 __match
20010c00 g       .bss	00000000 _ebss
000099ac g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000042c0 g     F .text.itcm	00000118 MTPD::WriteDescriptor()
00003e1a g     F .text.itcm	000000ae RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
200093d4 g     O .data	00000004 propertyListNum
600016e0 g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
0000006e  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000103b0 g     F .text.itcm	00000040 __hi0bits
00005d06 g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001ea8 g     F .text.code	00000074 CrashReportClass::clear()
00005874 g     F .text.itcm	0000000c lpi2c3_isr()
00006cce g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20205080 g       .bss.dma	00000000 _heap_start
000043d8 g     F .text.itcm	0000002a MTPD::WriteStorageIDs()
2000fdec g     O .bss	00000001 __lock___malloc_recursive_mutex
00004070 g     F .text.itcm	0000004e RV3028::begin(TwoWire&, bool, bool, bool)
00001b98 g     F .text.itcm	000001d8 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
000068e8 g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
6000251c  w    O .text.progmem	00000050 TwoWire::i2c4_hardware
000008d8  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
2000fe28 g     O .bss	00000138 __sf
20008a58 g     O .data	00000004 CrashReport
200102bc g     O .bss	000004cc sdx
00008f78 g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
0000052c g     F .text.itcm	00000144 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
20009ae0 g     O .bss	00000020 endpoint0_transfer_data
0000715a g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
00005a6e g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000cc5c g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000c350 g     F .text.itcm	00000060 pwm_init
000175f8 g     F .text.itcm	00000276 .hidden __aeabi_dadd
20010184 g     O .bss	00000050 file
00004a98 g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
20009423 g     O .data	00000001 usb_mtp_status
60024c00 g       .text.csf	00000000 __text_csf_end
60001ccc g     F .text.code	0000005c usb_pll_start
00010608 g     F .text.itcm	000000c0 __pow5mult
000076d2 g     F .text.itcm	0000004c FatFile::rmdir()
2000049c g     O .data	0000000c vtable for CrashReportClass
000178f8 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00005880 g     F .text.itcm	0000000c lpi2c4_isr()
00008084 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
200101d4 g     O .bss	00000004 haveStore
00009406  w    F .text.itcm	00000002 SdioCard::end()
20009ac0 g     O .bss	00000020 endpoint0_transfer_ack
2001096c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b770 g     F .text.itcm	00000024 usb_transmit
00000d2c  w    F .text.itcm	00000014 Print::println(char const*)
0000c7e0 g     F .text.itcm	00000020 systick_isr
0000f13c g     F .text.itcm	00000002 __retarget_lock_release_recursive
00003940 g     F .text.itcm	00000016 rtc_get_datetime(datetime_t*)
000041cc g     F .text.itcm	00000020 MTPD::write(char const*, int)
20008a64 g     O .data	00000010 Serial
200101d8 g     O .bss	00000020 logBuffer
0000202c g     F .text.itcm	00000008 loadConfig(unsigned short*, int)
00003d8e g     F .text.itcm	00000028 RV3028::updateTime()
0000c93c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00008b68 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
6000193c  w    F .text.code	00000002 startup_early_hook
00006988 g     F .text.itcm	00000094 ExFatFile::addCluster()
00008edc g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
0000aa10 g     F .text.itcm	00000044 usb_serial_peekchar
0000ea34 g     F .text.itcm	0000000c __sfp_lock_acquire
0000f4e0 g     F .text.itcm	00000000 memchr
00007fb4 g     F .text.itcm	000000d0 FatPartition::fatPut(unsigned long, unsigned long)
0000ad6c g     F .text.itcm	00000250 set_arm_clock
20010948 g     O .bss	00000004 systick_cycle_count
200093fa g     O .data	00000016 usb_string_serial_number_default
0000f7a4 g     F .text.itcm	0000020c _free_r
000091e6 g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
000173b4 g     F .text.itcm	00000060 category
000092aa g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
00009c90 g     F .text.itcm	00000074 SdioCard::readStop()
00000d92  w    F .text.itcm	00000060 FsVolume::rename(char const*, char const*)
00008cd6  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000f004 g     F .text.itcm	0000000c __locale_mb_cur_max
00015840 g     F .text.itcm	00000016 _wcsrtombs_r
2000fc58 g     O .bss	00000190 __atexit0
0000193e g     F .text.itcm	000000de MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000c92c  w    F .text.itcm	00000004 usb_serial_class::flush()
00015b48 g     F .text.itcm	00000080 _sungetc_r
000175f4 g     F .text.itcm	0000027a .hidden __aeabi_dsub
00003c14 g     F .text.itcm	0000003a RV3028::writeRegister(unsigned char, unsigned char)
200093b8 g     O .data	00000004 __malloc_sbrk_base
0000c924  w    F .text.itcm	00000004 usb_serial_class::read()
000155fc g     F .text.itcm	00000004 _strtoll_r
000089b0 g     F .text.itcm	000000b8 FatFile::remove()
000178f8 g     F .text.itcm	0000006a .hidden __floatundidf
00000ee0  w    F .text.itcm	0000001c FsFile::FsFile()
0000bca4  w    F .text.itcm	00000006 _lseek
000035dc g     F .text.itcm	00000068 adcStatus()
000106c8 g     F .text.itcm	000000f0 __lshift
00004026 g     F .text.itcm	0000001a RV3028::disableTrickleCharge()
00002cb4 g     F .text.itcm	00000268 storeData(short)
00007ab2 g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000b744 g     F .text.itcm	0000002c usb_prepare_transfer
00008cda  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000bae0 g     F .text.itcm	00000180 unused_interrupt_vector
00015a48 g     F .text.itcm	00000100 __ssprint_r
60001d28 g     F .text.code	0000012c tempmon_init
20010970 g     O .bss	00000004 usb_timer0_callback
000083f8 g     F .text.itcm	000000cc FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000ecac g     F .text.itcm	00000062 _vasnprintf_r
00002c00 g     F .text.itcm	00000014 powerDown()
0000f67c g     F .text.itcm	00000088 __register_exitproc
00008d04 g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
000063d8 g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000bdb4 g     F .text.itcm	00000064 eeprom_read_byte
0000eed0 g     F .text.itcm	00000044 strlcpy
0000ef14 g     F .text.itcm	0000008a strncmp
00008366 g     F .text.itcm	00000092 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00006d16 g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
00003ee0 g     F .text.itcm	00000030 RV3028::waitforEEPROM()
0000aa68 g     F .text.itcm	00000060 usb_serial_flush_input
200093d0 g     O .data	00000004 fsamp
0000678e g     F .text.itcm	00000060 ExFatPartition::freeClusterCount()
00001260 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000f54  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
000104ac g     F .text.itcm	0000015c __multiply
0000260c g     F .text.itcm	0000001c getDataCount()
0000ac74 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000efa0 g     F .text.itcm	00000064 strncpy
2000fdf4 g     O .bss	00000028 __malloc_current_mallinfo
00000af0 g     F .text.itcm	00000084 i2s_setup()
000033f4 g     F .text.itcm	00000008 adcStart()
00010a78 g     F .text.itcm	000000d4 __d2b
000092f8 g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
000093fe  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001898 g     F .text.code	00000054 _reboot_Teensyduino_
00009644  w    F .text.itcm	0000000e SdioCard::~SdioCard()
6000193e g     F .text.code	00000002 startup_default_middle_hook
00000c7e  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00000b74 g     F .text.itcm	000000a4 dma_setup()
0000d500 g     F .text.itcm	00000018 realloc
00008e00 g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000903c g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
00009d8c g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
0001548c g     F .text.itcm	00000004 _strtoul_r
00003394 g     F .text.itcm	00000024 usbPowerInit()
0000c5c4 g     F .text.itcm	000000c4 usb_mtp_send
0000b21c g     F .text.itcm	000004a8 usb_isr
0000e8b4 g     F .text.itcm	0000000c __cxa_atexit
00005df8 g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
0000f010 g     F .text.itcm	00000024 _close_r
0000938e  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00017890 g     F .text.itcm	00000022 .hidden __aeabi_i2d
000090b6 g     F .text.itcm	0000002a SharedSpiCard::readStop()
00005a20 g     F .text.itcm	0000004e FsCache::sync()
0000ed10 g     F .text.itcm	00000060 memcmp
20000518  w    O .data	00000028 vtable for usb_serial_class
0000a4da g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
0000f134 g     F .text.itcm	00000002 __retarget_lock_close_recursive
0000486a g     F .text.itcm	000000e6 MTPD::GetObject(unsigned long)
0000a522 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
200102b8 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000eb5c g     F .text.itcm	00000058 sscanf
000170a8 g     F .text.itcm	000000cc __swsetup_r
0000cf64  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00006aa8 g     F .text.itcm	00000056 ExFatFile::rmdir()
00004728 g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000d40  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00002808 g     F .text.itcm	000000d4 headerInit(long, long, long, int)
00009082 g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
00010bb0 g     F .text.itcm	0000005c __copybits
00004acc g     F .text.itcm	00000016 MTPD::read16()
00000c8a g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
20008fb0 g     O .data	00000408 __malloc_av_
2000fc54 g     O .bss	00000004 __atexit
00003900 g     F .text.itcm	00000040 rtcSetup(unsigned char, unsigned char)
0000ebb4 g     F .text.itcm	00000022 __sread
0000acd8 g     F .text.itcm	00000094 usb_serial_flush_output
0000be18 g     F .text.itcm	0000001c eeprom_read_block
0000d4e8 g     F .text.itcm	0000000c __malloc_lock
00005bf4 g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20010284 g     O .bss	0000000c rtc
20009800 g     O .data	000002c0 _VectorsRam
0000a4e2 g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00008f4c g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
000142bc g     F .text.itcm	00000054 _fflush_r
000144c0 g     F .text.itcm	00000078 _calloc_r
00004a34 g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
00002950 g     F .text.itcm	000000b8 makeHeader(long*)
00000f14  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
00008680 g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
200093ec g     O .data	00000004 t_acq
20010bdc g     O .bss	00000001 yield_active_check_flags
00006bdc g     F .text.itcm	00000042 ExFatFile::sync()
0000f138 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
20010bda g     O .bss	00000001 usb_high_speed
00007b56 g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
00009a88 g     F .text.itcm	00000040 SdioCard::isBusy()
000041ec g     F .text.itcm	00000016 MTPD::write8(unsigned char)
0000a528 g     F .text.itcm	00000000 memset
0000c942 g     F .text.itcm	00000010 main
2000fe20 g     O .bss	00000004 __malloc_max_total_mem
000064d8 g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000f130 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20205000 g     O .bss.dma	00000069 usb_descriptor_buffer
00000218 g     F .text.itcm	00000030 resetUSB()
00009328 g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
00006f34 g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
2000043c g     O .data	00000060 vtable for MTPStorage_SD
00004b5c g     F .text.itcm	000000e0 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000ee68 g     F .text.itcm	00000066 strlcat
0000ec3c g     F .text.itcm	00000008 __sclose
0000c688 g     F .text.itcm	00000054 usb_init_serialnumber
0000e8b0 g     F .text.itcm	00000004 _strtol_r
600024d4 g       .text.code	00000000 __init_array_end
00014660 g     F .text.itcm	00000cec _dtoa_r
0000cf88 g     F .text.itcm	00000560 _malloc_r
00008ce2 g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
00010c70 g     F .text.itcm	0000001a __ascii_wctomb
00017908 g     F .text.itcm	0000005a .hidden __aeabi_l2d
2000fc38 g     O .bss	00000004 FatVolume::m_cwv
0000c8cc  w    F .text.itcm	00000008 Print::print(char const*)
00017030 g     F .text.itcm	00000076 __submore
200005f8  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c980 g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
0000534c g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
6626a9ad g       *ABS*	00000000 __rtc_localtime
0000ba68 g     F .text.itcm	0000004c micros
00004268 g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
00006b00 g     F .text.itcm	000000dc ExFatFile::syncDir()
0000588c g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
0000f704 g     F .text.itcm	000000a0 _malloc_trim_r
00017288 g     F .text.itcm	00000106 _wcsnrtombs_l
6000264c g     O .text.progmem	00000004 string0
0000aae8 g     F .text.itcm	0000018c usb_serial_write
60001940  w    F .text.code	00000002 startup_late_hook
0000b1bc g     F .text.itcm	00000034 usb_start_sof_interrupts
00000df2  w    F .text.itcm	00000050 FsBaseFile::available() const
00009372 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
00003c4e g     F .text.itcm	00000070 RV3028::set12Hour()
0000c928  w    F .text.itcm	00000004 usb_serial_class::available()
0000f148 g     F .text.itcm	000002dc strcmp
00004af6 g     F .text.itcm	00000030 MTPD::readstring(char*)
0000787c g     F .text.itcm	00000080 FatFile::sync()
00003f92 g     F .text.itcm	00000094 RV3028::readConfigEEPROM_RAMmirror(unsigned char)
20000000 g     O .data	00000300 endpoint_queue_head
00006962  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60002614  w    O .text.progmem	00000020 usb_string_product_name
0000414c g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000bab4 g     F .text.itcm	0000002a delay
00017998 g     F .text.itcm	00000040 .hidden __fixunsdfdi
2001099e g     O .bss	00000002 dma_channel_allocated_mask
00000e76 g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
00000eb0  w    F .text.itcm	00000022 FsBaseFile::seekSet(unsigned long long)
00017a10 g     F .fini	00000000 _fini
000033d8 g     F .text.itcm	00000014 acqPower(int)
000027b0  w    F .text.itcm	00000014 FsBaseFile::sync()
0000542c g     F .text.itcm	00000026 TwoWire::write(unsigned char)
00008eac g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
20010958 g     O .bss	00000004 t_off
000064ac g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000eb1c g     F .text.itcm	00000040 sprintf
0000ca70 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000ca26 g     F .text.itcm	00000012 Print::print(long)
000078fc g     F .text.itcm	00000010 FatFile::close()
0000c1a0 g     F .text.itcm	00000004 Panic_Temp_isr
00017964 g     F .text.itcm	00000030 .hidden __fixdfdi
00000990 g     F .text.itcm	00000160 setAudioFrequency(int)
00002628 g     F .text.itcm	0000000c queue_isBusy()
200093d8 g     O .data	00000004 sd
000079b8 g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
00017390 g     F .text.itcm	00000024 _wcsnrtombs_r
000095e0  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000b8  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000f0b0 g     F .text.itcm	0000002c _write_r
00015860 g     F .text.itcm	00000028 iswspace_l
00009ac8 g     F .text.itcm	000000c8 SdioCard::erase(unsigned long, unsigned long)
200093f8 g     O .data	00000002 again
0000302c g     F .text.itcm	000000b4 filing_init()
0000c500 g     F .text.itcm	00000094 usb_mtp_recv
0000f670 g     F .text.itcm	0000000c nanf
2001078c g     O .bss	00000004 setup_ready
200093cc g     O .data	00000004 _impure_ptr
00005f7e g     F .text.itcm	0000002a ExFatFile::peek()
0001418c g     F .text.itcm	00000130 __sflush_r
20000418  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
000157a0 g     F .text.itcm	00000054 _mbrtowc_r
0000c6dc  w    F .text.itcm	00000054 EventResponder::runFromYield()
20008a74 g     O .data	00000140 Wire
00008c9c g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000ea4c g     F .text.itcm	00000046 _fwalk_sglue
00009580 g     F .text.itcm	0000000c SdioCard::errorCode() const
000079aa g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001f4  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
600024c0 g       .text.code	00000000 __preinit_array_end
60001f1c g     F .text.code	000004a4 CrashReportClass::printTo(Print&) const
000026e8 g     F .text.itcm	00000072 dateTime(unsigned short*, unsigned short*, unsigned char*)
00002ae4 g     F .text.itcm	0000007c newFileName(char*)
00003a6c g     F .text.itcm	00000002 RV3028::RV3028()
00000efc  w    F .text.itcm	00000018 FsFile::~FsFile()
00006620 g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00008e5e g     F .text.itcm	00000026 SharedSpiCard::spiStart()
00001794 g     F .text.itcm	0000000e MTPStorage_SD::DeleteObject(unsigned long)
000101d0 g     F .text.itcm	0000002a __ascii_mbtowc
00010950 g     F .text.itcm	00000064 __ulp
0000b1f0 g     F .text.itcm	0000002c usb_stop_sof_interrupts
0000c8dc  w    F .text.itcm	00000008 Print::print(unsigned long, int)
00005414  w    F .text.itcm	00000016 TwoWire::peek()
0000542a  w    F .text.itcm	00000002 TwoWire::flush()
00000760 g     F .text.itcm	00000178 setup
20007824 g     O .data	00000078 usb_descriptor_list
0000980c g     F .text.itcm	00000004 SdioCard::status()
0000106c g     F .text.itcm	0000002e MTPStorage_SD::ResetIndex()
000041b4 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00000e64  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
000033ec g     F .text.itcm	00000008 adcReset()
00000e42  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000f660 g     F .text.itcm	00000010 nan
00007448 g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00004950 g     F .text.itcm	000000e4 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
0000740e g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
2000fc00 g     O .bss	00000004 ExFatVolume::m_cwv
20068000 g       .text.csf	00000000 _estack
00008cc4 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c89c g     F .text.itcm	00000030 DMAChannel::release()
00003dcc g     F .text.itcm	00000044 RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)
00002118 g     F .text.itcm	0000011c loadParameters()
0000ac8c g     F .text.itcm	0000004c usb_serial_write_buffer_free
000033b8 g     F .text.itcm	00000020 usbPowerSetup()
00014398 g     F .text.itcm	00000064 stpncpy
60001714 g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
200093c0 g     O .data	0000000c __sglue
0000a83c g     F .text.itcm	00000100 usb_serial_configure
00005452 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
0000ca54  w    F .text.itcm	0000001c _write
20009ac0 g       .data	00000000 _edata
000066fa g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
20010bb7 g     O .bss	00000001 external_psram_size
00004454 g     F .text.itcm	000000d0 MTPD::GetObjectInfo(unsigned long)
000095e0  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00005b64 g     F .text.itcm	00000048 FsName::get16()
00008d6c  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
0000914c g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00008cf2 g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
00005ca4 g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
00007380 g     F .text.itcm	00000070 FatFile::addDirCluster()
00017174 g     F .text.itcm	000000aa __fputwc
0000c930  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00005868 g     F .text.itcm	0000000c lpi2c1_isr()
00007eba g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000c18 g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000b7d8 g     F .text.itcm	00000046 ultoa
00004ab6 g     F .text.itcm	00000016 MTPD::read8()
6000176c g     F .text.code	00000048 TwoWire::begin()
2001099c g     O .bss	00000002 dgain
00008af2 g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
00001144 g     F .text.itcm	0000003e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000ebdc g     F .text.itcm	0000003e __swrite
0000c7a4 g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
00002520 g     F .text.itcm	000000e4 menu(short)
200093bc g     O .data	00000004 __malloc_trim_threshold
0000c920  w    F .text.itcm	00000004 usb_serial_class::peek()
0000e8c0 g     F .text.itcm	0000000a fcvtf
00009402  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00008e84 g     F .text.itcm	00000028 SharedSpiCard::spiStop()
00003964 g     F .text.itcm	00000024 rtcSetDate(int, int, int)
00001182 g     F .text.itcm	00000042 MTPStorage_SD::GetNextObjectHandle(unsigned long)
00015a20 g     F .text.itcm	00000028 fiprintf
00015d30 g     F .text.itcm	00000f8c _vfiprintf_r
00003988 g     F .text.itcm	00000024 rtcSetTime(int, int, int)
0000a348  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
20009b00 g     O .bss	00002440 mtpd
000107fc g     F .text.itcm	00000154 __mdiff
00002694 g     F .text.itcm	00000054 pullData(unsigned long*)
000095d0 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
000013fa g     F .text.itcm	00000094 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
000066ba g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00003ec8 g     F .text.itcm	00000016 RV3028::setUNIX(unsigned long)
00007204 g     F .text.itcm	000000ec FatFile::getName8(char*, unsigned int)
00002a08 g     F .text.itcm	0000005c checkEndOfFile(short)
20008938 g     O .data	00000120 _impure_data
00006088 g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
000028f0 g     F .text.itcm	00000060 writeHeader(char*)
000159bc g     F .text.itcm	00000064 _jp2uc_l
00001e8c g     F .text.itcm	00000198 menu3()
0000ea40 g     F .text.itcm	0000000c __sfp_lock_release
200101fc g     O .bss	00000004 mtp_txEventCount
0000c8e4  w    F .text.itcm	00000014 Print::println(unsigned long, int)
000027c4 g     F .text.itcm	00000044 timeStamp()
00009c90 g     F .text.itcm	00000074 SdioCard::writeStop()
00014310 g     F .text.itcm	00000088 __sccl
00008f44 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
00005d3e g     F .text.itcm	00000014 ExFatFile::close()
20000824 g     O .data	00000101 _ctype_
0000bc8c  w    F .text.itcm	00000004 _read
600024c0 g       .text.code	00000000 __init_array_start
0000cf64  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00001008 g     F .text.itcm	00000064 MTPStorage_SD::OpenIndex()
600023c0 g     F .text.code	0000000e CrashReportClass::operator bool()
00004ae2 g     F .text.itcm	00000014 MTPD::read32()
20008a5c g     O .data	00000004 F_BUS_ACTUAL
0000c31a g     F .text.itcm	00000036 quadtimer_init
20010164 g     O .bss	00000004 disk_count
00003738 g     F .text.itcm	000000fc time2date(unsigned long, datetime_t*)
0000830c g     F .text.itcm	0000003c FatVolume::chdir(char const*)
00003834 g     F .text.itcm	000000cc date2time(datetime_t*)
0000c954 g     F .text.itcm	0000002c Stream::timedRead()
00017414 g     F .text.itcm	000000d8 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000c800 g     F .text.itcm	0000009c DMAChannel::begin(bool)
00008d6e  w    F .text.itcm	00000006 SharedSpiCard::end()
0000f580 g     F .text.itcm	000000dc strlen
0000741a g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
00007632 g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
0000fa54 g     F .text.itcm	00000594 __gethex
60002614 g     O .text.progmem	00000020 usb_string_product_name_default
000035a0 g     F .text.itcm	0000003c setAGain(signed char)
0000ec90 g     F .text.itcm	0000001c vdprintf
00003d3a g     F .text.itcm	00000054 RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)
00009a28 g     F .text.itcm	00000060 SdioCard::sectorCount()
000077e0 g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
00003db6 g     F .text.itcm	00000016 RV3028::getUNIX()
6000193e  w    F .text.code	00000002 startup_middle_hook
20000588 g     O .data	00000070 vtable for SdioCard
000178b4 g     F .text.itcm	00000042 .hidden __aeabi_f2d
00001216 g     F .text.itcm	00000048 MTPStorage_SD::close()
000072f0 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001946 g     F .text.code	00000112 configure_cache
0000c0c8 g     F .text.itcm	0000001c eeprom_write_block
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
000093fa  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
000012c0 g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
00009072  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
00002a78 g     F .text.itcm	0000006c newDirectory(char*)
0000a1a4 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00002234 g     F .text.itcm	000002ec menu2()
0000a44c g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
000030e0 g     F .text.itcm	00000290 compress(void*)
00007140  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00000c86 g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
000175f4 g     F .text.itcm	0000027a .hidden __subdf3
600024c0 g       .text.code	00000000 __preinit_array_start
0000b794 g     F .text.itcm	0000001c usb_receive
00006580 g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001e0  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
00001200 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
2001095c g     O .bss	00000004 t_rep
000103f0 g     F .text.itcm	00000060 __lo0bits
00006694 g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
200093f4 g     O .data	00000004 tempDatai
0000771e g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00024c00 g       *ABS*	00000000 _flashimagelen
000090e0 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000cc60 g     F .text.itcm	0000000a __aeabi_atexit
00000efc  w    F .text.itcm	00000018 FsFile::~FsFile()
0000bcb0 g     F .text.itcm	00000024 rtc_get
00006a1c g     F .text.itcm	0000008c ExFatFile::remove()
00014408 g     F .text.itcm	00000078 frexp
70000000 g       .bss.extram	00000000 _extram_start
0000c7dc g     F .text.itcm	00000004 pendablesrvreq_isr
00003a08 g     F .text.itcm	00000028 rtcSync()
00004c3c g     F .text.itcm	000000f4 MTPD::SendObject()
200109a0 g     O .bss	00000002 monitor
00001d70 g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20008e44 g     O .data	0000016c __global_locale
00009e84 g     F .text.itcm	0000026c SdioCard::begin(SdioConfig)
0000a93c g     F .text.itcm	000000d4 usb_serial_read
2000fdf0 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000ca8a g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000b704 g     F .text.itcm	00000040 usb_config_tx
0000bc90  w    F .text.itcm	00000006 _close
00007ef6 g     F .text.itcm	000000be FatPartition::fatGet(unsigned long, unsigned long*)
0000cf78 g     F .text.itcm	00000010 free
00005bac g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
000010c6 g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
0001025c g     F .text.itcm	000000a4 __multadd
00010248 g     F .text.itcm	00000012 _Bfree
00007182 g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
200093fa  w    O .data	00000016 usb_string_serial_number
0000a210 g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
000095b4 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	; (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x20009ac0
60001428:	.word	0x20010c00

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	6000193c <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	; (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	; (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	; (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	; (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	; (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	; (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	; (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	; (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	; 0xe000e000
60001484:	mov.w	r2, #15728640	; 0xf00000
60001488:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	; (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	; 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	; (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	; 0x80
6000149e:	ldr	r2, [pc, #348]	; (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	; (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	; 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	; 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	; (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	; 0x70000
600014dc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	; 0x7f
600014e6:	orr.w	r3, r3, #64	; 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	; 0x24
600014ee:	bic.w	r3, r3, #127	; 0x7f
600014f2:	orr.w	r3, r3, #64	; 0x40
600014f6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	; (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001502:	bl	60001946 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	; (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	; (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	; (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001524:	orr.w	r3, r3, #16777216	; 0x1000000
60001528:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	; (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	; (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001ccc <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	; (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	60002450 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	; 0x6c
60001558:	orr.w	r3, r3, #12288	; 0x3000
6000155c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	; (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	; 0x50000
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	; (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	; 0x2e15
60001584:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	; 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	; (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	; 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001a58 <configure_external_ram>
	analog_init();
6000159c:	bl	600023d0 <analog_init>
	pwm_init();
600015a0:	bl	600024b8 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001d28 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	6000193e <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	600017b4 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	60001942 <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	60001940 <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	60002498 <____libc_init_array_veneer>
	main();
600015ca:	bl	60002468 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x00017a18
600015dc:	.word	0x6000272c
600015e0:	.word	0x00000000
600015e4:	.word	0x20009ac0
600015e8:	.word	0x6001a148
600015ec:	.word	0x20000000
600015f0:	.word	0x20009800
600015f4:	.word	0x0000bae1
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000c7dd
6000160c:	.word	0x0000c7e1
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x20010948
6000161c:	.word	0x08f0d180
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x2001094c
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	; (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	; (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	; (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	; 0xaa0000
60001642:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	; (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165c:	ldr	r3, [r0, #20]
6000165e:	ldr	r2, [pc, #40]	; (60001688 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001660:	add.w	r0, r3, r1, lsl #4
60001664:	add.w	r1, r3, r1, lsl #4
{
60001668:	push	{r4, r5, lr}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	ldrb	r4, [r0, #8]
6000166c:	ldr	r5, [pc, #28]	; (6000168c <TwoWire::configSDApin(unsigned char)+0x30>)
6000166e:	add.w	r2, r2, r4, lsl #4
60001672:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001674:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001676:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001678:	ldr	r0, [r0, #12]
6000167a:	str	r0, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000167c:	ldr	r3, [r1, #16]
6000167e:	cbz	r3, 60001684 <TwoWire::configSDApin(unsigned char)+0x28>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001680:	ldr	r2, [r1, #20]
60001682:	str	r2, [r3, #0]
	}
}
60001684:	pop	{r4, r5, pc}
60001686:	nop
60001688:	.word	0x2000743c
6000168c:	.word	0x0001f861

60001690 <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001690:	push	{r3, r4, r5, lr}
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001692:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001694:	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001696:	ldrb	r2, [r0, #24]
60001698:	add.w	r2, r3, r2, lsl #4
6000169c:	ldrb	r2, [r2, #8]
6000169e:	cmp	r2, r1
600016a0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016a2:	ldrb	r0, [r3, #8]
		if (sda_pin == 255) return;
600016a4:	cmp	r0, #255	; 0xff
600016a6:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (sda_pin == pin) break;
600016a8:	cmp	r1, r0
600016aa:	beq.n	600016d8 <TwoWire::setSDA(unsigned char)+0x48>
		if (sda_pin == 255) return;
600016ac:	ldrb	r1, [r3, #24]
600016ae:	cmp	r1, #255	; 0xff
600016b0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016b2:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b4:	ldr	r1, [r3, #0]
		configSDApin(newindex);
600016b6:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b8:	ldr	r3, [r3, #4]
600016ba:	ldr	r1, [r1, #0]
600016bc:	tst	r1, r3
600016be:	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x44>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c0:	ldr	r3, [pc, #24]	; (600016dc <TwoWire::setSDA(unsigned char)+0x4c>)
		configSDApin(newindex);
600016c2:	mov	r1, r5
600016c4:	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c6:	add.w	r3, r3, r2, lsl #4
600016ca:	movs	r2, #5
600016cc:	ldr	r3, [r3, #4]
600016ce:	str	r2, [r3, #0]
		configSDApin(newindex);
600016d0:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016d4:	strb	r5, [r4, #24]
}
600016d6:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
600016d8:	movs	r5, #0
600016da:	b.n	600016b4 <TwoWire::setSDA(unsigned char)+0x24>
600016dc:	.word	0x2000743c

600016e0 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e0:	ldr	r3, [r0, #20]
600016e2:	ldr	r2, [pc, #40]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e4:	add.w	r0, r3, r1, lsl #4
600016e8:	add.w	r1, r3, r1, lsl #4
{
600016ec:	push	{r4, r5, lr}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016ee:	ldrb.w	r4, [r0, #40]	; 0x28
600016f2:	ldr	r5, [pc, #28]	; (60001710 <TwoWire::configSCLpin(unsigned char)+0x30>)
600016f4:	add.w	r2, r2, r4, lsl #4
600016f8:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fa:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fe:	ldr	r0, [r0, #44]	; 0x2c
60001700:	str	r0, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001702:	ldr	r3, [r1, #48]	; 0x30
60001704:	cbz	r3, 6000170a <TwoWire::configSCLpin(unsigned char)+0x2a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001706:	ldr	r2, [r1, #52]	; 0x34
60001708:	str	r2, [r3, #0]
	}
}
6000170a:	pop	{r4, r5, pc}
6000170c:	.word	0x2000743c
60001710:	.word	0x0001f861

60001714 <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001714:	push	{r3, r4, r5, lr}
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001716:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001718:	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000171a:	ldrb	r2, [r0, #25]
6000171c:	add.w	r2, r3, r2, lsl #4
60001720:	ldrb.w	r2, [r2, #40]	; 0x28
60001724:	cmp	r2, r1
60001726:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001728:	ldrb.w	r0, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
6000172c:	cmp	r0, #255	; 0xff
6000172e:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (scl_pin == pin) break;
60001730:	cmp	r1, r0
60001732:	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == 255) return;
60001734:	ldrb.w	r1, [r3, #56]	; 0x38
60001738:	cmp	r1, #255	; 0xff
6000173a:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000173c:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173e:	ldr	r1, [r3, #0]
		configSCLpin(newindex);
60001740:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001742:	ldr	r3, [r3, #4]
60001744:	ldr	r1, [r1, #0]
60001746:	tst	r1, r3
60001748:	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4a>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174a:	ldr	r3, [pc, #28]	; (60001768 <TwoWire::setSCL(unsigned char)+0x54>)
		configSCLpin(newindex);
6000174c:	mov	r1, r5
6000174e:	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001750:	add.w	r3, r3, r2, lsl #4
60001754:	movs	r2, #5
60001756:	ldr	r3, [r3, #4]
60001758:	str	r2, [r3, #0]
		configSCLpin(newindex);
6000175a:	bl	600016e0 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175e:	strb	r5, [r4, #25]
}
60001760:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
60001762:	movs	r5, #0
60001764:	b.n	6000173e <TwoWire::setSCL(unsigned char)+0x2a>
60001766:	nop
60001768:	.word	0x2000743c

6000176c <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	ldr	r2, [pc, #60]	; (600017ac <TwoWire::begin()+0x40>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176e:	ldr	r1, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001770:	ldr	r3, [r2, #56]	; 0x38
60001772:	bic.w	r3, r3, #16515072	; 0xfc0000
60001776:	orr.w	r3, r3, #262144	; 0x40000
{
6000177a:	push	{r4, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000177c:	str	r3, [r2, #56]	; 0x38
{
6000177e:	mov	r4, r0
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001780:	ldr	r2, [r1, #0]
60001782:	ldr	r1, [r1, #4]
60001784:	ldr	r3, [r2, #0]
60001786:	orrs	r3, r1
	setClock(100000);
60001788:	ldr	r1, [pc, #36]	; (600017b0 <TwoWire::begin()+0x44>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
6000178c:	movs	r2, #2
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
6000178e:	ldr	r3, [r0, #16]
	port->MCR = LPI2C_MCR_RST;
60001790:	str	r2, [r3, #16]
	setClock(100000);
60001792:	bl	600024a0 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
60001796:	ldrb	r1, [r4, #24]
60001798:	mov	r0, r4
6000179a:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
6000179e:	ldrb	r1, [r4, #25]
600017a0:	mov	r0, r4
}
600017a2:	ldmia.w	sp!, {r4, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017a6:	b.w	600016e0 <TwoWire::configSCLpin(unsigned char)>
600017aa:	nop
600017ac:	.word	0x400fc000
600017b0:	.word	0x000186a0

600017b4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017b4:	ldr	r3, [pc, #192]	; (60001878 <usb_init+0xc4>)
600017b6:	movw	r2, #3937	; 0xf61
{
600017ba:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017bc:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600017c0:	bl	600024a8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c4:	ldr	r2, [pc, #180]	; (6000187c <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017c6:	ldr	r1, [pc, #184]	; (60001880 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c8:	ldr.w	r3, [r2, #128]	; 0x80
600017cc:	orr.w	r3, r3, #3
600017d0:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
600017d4:	movw	r2, #1028	; 0x404
600017d8:	ldr	r3, [pc, #168]	; (60001884 <usb_init+0xd0>)
600017da:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017de:	ldr	r2, [pc, #168]	; (60001888 <usb_init+0xd4>)
600017e0:	ldr	r0, [r2, #0]
600017e2:	tst	r0, r1
600017e4:	bne.n	600017ee <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600017e6:	ldr.w	r1, [r3, #424]	; 0x1a8
600017ea:	lsls	r4, r1, #30
600017ec:	beq.n	60001824 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600017ee:	mov.w	r1, #2147483648	; 0x80000000
600017f2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017f4:	ldr.w	r2, [r3, #320]	; 0x140
600017f8:	orr.w	r2, r2, #2
600017fc:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001800:	ldr	r2, [pc, #128]	; (60001884 <usb_init+0xd0>)
60001802:	ldr.w	r3, [r2, #320]	; 0x140
60001806:	lsls	r0, r3, #30
60001808:	bmi.n	60001802 <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000180a:	mov.w	r3, #3758153728	; 0xe000e000
6000180e:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001812:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001814:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001818:	mov.w	r2, #2147483648	; 0x80000000
6000181c:	ldr	r3, [pc, #104]	; (60001888 <usb_init+0xd4>)
6000181e:	str	r2, [r3, #56]	; 0x38
		delay(25);
60001820:	bl	60002470 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001824:	ldr	r3, [pc, #96]	; (60001888 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
60001826:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001828:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000182c:	ldr	r4, [pc, #84]	; (60001884 <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000182e:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001830:	mov.w	r2, #768	; 0x300
	USBPHY1_PWD = 0;
60001834:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001836:	movs	r3, #10
60001838:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000183c:	ldr	r3, [pc, #76]	; (6000188c <usb_init+0xd8>)
6000183e:	mov	r0, r3
60001840:	bl	60002478 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001844:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001848:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000184c:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000184e:	mov.w	r2, #4194304	; 0x400000
60001852:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001854:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001858:	ldr	r2, [pc, #52]	; (60001890 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000185a:	str.w	r3, [r4, #328]	; 0x148
6000185e:	ldr	r3, [pc, #52]	; (60001894 <usb_init+0xe0>)
60001860:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001864:	mov.w	r3, #3758153728	; 0xe000e000
60001868:	mov.w	r2, #131072	; 0x20000
6000186c:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001870:	movs	r3, #1
60001872:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001876:	pop	{r4, pc}
60001878:	.word	0x400d8000
6000187c:	.word	0x400fc000
60001880:	.word	0x001e1c00
60001884:	.word	0x402e0000
60001888:	.word	0x400d9000
6000188c:	.word	0x20000000
60001890:	.word	0x0000b21d
60001894:	.word	0x20009800

60001898 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001898:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000189a:	ldr	r3, [pc, #60]	; (600018d8 <_reboot_Teensyduino_+0x40>)
6000189c:	ldr	r3, [r3, #96]	; 0x60
6000189e:	lsls	r3, r3, #30
600018a0:	bmi.n	600018a4 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600018a2:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600018a4:	cpsid	i
		USB1_USBCMD = 0;
600018a6:	ldr	r3, [pc, #52]	; (600018dc <_reboot_Teensyduino_+0x44>)
600018a8:	movs	r2, #0
600018aa:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
600018ae:	sub.w	r3, r3, #2310144	; 0x234000
600018b2:	ldr	r2, [pc, #44]	; (600018e0 <_reboot_Teensyduino_+0x48>)
600018b4:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600018b6:	sub.w	r3, r3, #534773760	; 0x1fe00000
600018ba:	sub.w	r3, r3, #700416	; 0xab000
600018be:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600018c0:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
600018c4:	ldr	r0, [pc, #28]	; (600018e4 <_reboot_Teensyduino_+0x4c>)
600018c6:	ldr	r3, [pc, #32]	; (600018e8 <_reboot_Teensyduino_+0x50>)
600018c8:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600018ca:	mov.w	r3, #2097152	; 0x200000
600018ce:	ldr	r3, [r3, #28]
600018d0:	ldr	r3, [r3, #8]
600018d2:	blx	r3
600018d4:	b.n	600018a4 <_reboot_Teensyduino_+0xc>
600018d6:	nop
600018d8:	.word	0x401f4400
600018dc:	.word	0x402e0000
600018e0:	.word	0x00200003
600018e4:	.word	0x20208000
600018e8:	.word	0xeb120000

600018ec <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
600018ec:	ldr	r3, [pc, #28]	; (6000190c <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ee:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
600018f2:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018f6:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018fa:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018fe:	ldr	r2, [r3, #20]
60001900:	lsls	r2, r2, #31
60001902:	bpl.n	600018fe <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	movs	r2, #1
60001906:	str	r2, [r3, #20]
}
60001908:	bx	lr
6000190a:	nop
6000190c:	.word	0x402a4000

60001910 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
60001910:	ldr	r3, [pc, #32]	; (60001934 <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001912:	ldr	r2, [pc, #36]	; (60001938 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
60001914:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001918:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000191c:	movs	r2, #1
6000191e:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001922:	ldr	r2, [r3, #20]
60001924:	lsls	r2, r2, #31
60001926:	bpl.n	60001922 <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
60001928:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000192c:	movs	r2, #33	; 0x21
}
6000192e:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001930:	str	r2, [r3, #20]
}
60001932:	bx	lr
60001934:	.word	0x402a4000
60001938:	.word	0x00030004

6000193c <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
6000193c:	bx	lr

6000193e <startup_default_middle_hook>:
6000193e:	bx	lr

60001940 <startup_default_late_hook>:
60001940:	bx	lr

60001942 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001942:	nop
60001944:	bx	lr

60001946 <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
60001946:	mov.w	r3, #3758153728	; 0xe000e000
6000194a:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000194c:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
6000194e:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001952:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001956:	ldr	r2, [pc, #184]	; (60001a10 <configure_cache+0xca>)
60001958:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000195c:	movs	r2, #17
6000195e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001962:	ldr	r2, [pc, #176]	; (60001a14 <configure_cache+0xce>)
60001964:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001968:	movs	r2, #18
6000196a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000196e:	ldr	r2, [pc, #168]	; (60001a18 <configure_cache+0xd2>)
60001970:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001974:	ldr	r2, [pc, #164]	; (60001a1c <configure_cache+0xd6>)
60001976:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000197a:	ldr	r2, [pc, #164]	; (60001a20 <configure_cache+0xda>)
6000197c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001980:	ldr	r2, [pc, #160]	; (60001a24 <configure_cache+0xde>)
60001982:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001986:	ldr	r2, [pc, #160]	; (60001a28 <configure_cache+0xe2>)
60001988:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000198c:	ldr	r2, [pc, #156]	; (60001a2c <configure_cache+0xe6>)
6000198e:	orr.w	r2, r2, #21
60001992:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001996:	ldr	r2, [pc, #152]	; (60001a30 <configure_cache+0xea>)
60001998:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000199c:	add.w	r2, r2, #270532608	; 0x10200000
600019a0:	adds	r2, #13
600019a2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600019a6:	ldr	r2, [pc, #140]	; (60001a34 <configure_cache+0xee>)
600019a8:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600019ac:	ldr	r2, [pc, #136]	; (60001a38 <configure_cache+0xf2>)
600019ae:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600019b2:	ldr	r2, [pc, #136]	; (60001a3c <configure_cache+0xf6>)
600019b4:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600019b8:	ldr	r2, [pc, #132]	; (60001a40 <configure_cache+0xfa>)
600019ba:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600019be:	ldr	r2, [pc, #132]	; (60001a44 <configure_cache+0xfe>)
600019c0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600019c4:	ldr	r2, [pc, #128]	; (60001a48 <configure_cache+0x102>)
600019c6:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600019ca:	ldr	r2, [pc, #128]	; (60001a4c <configure_cache+0x106>)
600019cc:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600019d0:	ldr	r2, [pc, #124]	; (60001a50 <configure_cache+0x10a>)
600019d2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600019d6:	ldr	r2, [pc, #124]	; (60001a54 <configure_cache+0x10e>)
600019d8:	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600019dc:	nop
	asm("nop");
600019de:	nop
	asm("nop");
600019e0:	nop
	asm("nop");
600019e2:	nop
	asm("nop");
600019e4:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600019e6:	movs	r2, #1
600019e8:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600019ec:	dsb	sy
	asm("isb");
600019f0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600019f4:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600019f8:	dsb	sy
	asm("isb");
600019fc:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a00:	ldr.w	r2, [r3, #3348]	; 0xd14
60001a04:	orr.w	r2, r2, #196608	; 0x30000
60001a08:	str.w	r2, [r3, #3348]	; 0xd14
}
60001a0c:	bx	lr
60001a0e:	nop
60001a10:	.word	0x1000003f
60001a14:	.word	0x07080025
60001a18:	.word	0x00100009
60001a1c:	.word	0x00200013
60001a20:	.word	0x07020021
60001a24:	.word	0x20000014
60001a28:	.word	0x13080025
60001a2c:	.word	0x20010c00
60001a30:	.word	0x10000009
60001a34:	.word	0x130b0027
60001a38:	.word	0x40000017
60001a3c:	.word	0x13100033
60001a40:	.word	0x60000018
60001a44:	.word	0x070b002f
60001a48:	.word	0x70000019
60001a4c:	.word	0x130b002f
60001a50:	.word	0x8000001a
60001a54:	.word	0x130b003b

60001a58 <configure_external_ram>:
{
60001a58:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a5a:	ldr	r3, [pc, #536]	; (60001c74 <configure_external_ram+0x21c>)
60001a5c:	ldr	r2, [pc, #536]	; (60001c78 <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a5e:	ldr	r1, [pc, #540]	; (60001c7c <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a60:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a64:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a68:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a6c:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a70:	ldr	r4, [pc, #524]	; (60001c80 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a72:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a76:	add.w	r2, r2, #28672	; 0x7000
60001a7a:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a7e:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a82:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a86:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001a8a:	movs	r2, #24
60001a8c:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001a8e:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001a90:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001a92:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001a94:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001a96:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001a9a:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a9e:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001aa2:	movs	r2, #1
60001aa4:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001aa8:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001aac:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001ab0:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001ab4:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001ab8:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001abc:	ldr	r2, [pc, #452]	; (60001c84 <configure_external_ram+0x22c>)
60001abe:	ldr	r3, [r2, #24]
60001ac0:	bic.w	r3, r3, #3758096384	; 0xe0000000
60001ac4:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001ac8:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001acc:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001ad0:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001ad2:	ldr.w	r3, [r2, #132]	; 0x84
60001ad6:	orr.w	r3, r3, #12
60001ada:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001ade:	ldr	r3, [pc, #424]	; (60001c88 <configure_external_ram+0x230>)
60001ae0:	ldr	r2, [r3, #0]
60001ae2:	orr.w	r2, r2, #2
60001ae6:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ae8:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001aea:	ldr	r2, [pc, #416]	; (60001c8c <configure_external_ram+0x234>)
60001aec:	bic.w	r1, r1, #30848	; 0x7880
60001af0:	bic.w	r1, r1, #115	; 0x73
60001af4:	lsls	r1, r1, #16
60001af6:	lsrs	r1, r1, #16
60001af8:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001afa:	ldr	r1, [pc, #404]	; (60001c90 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001afc:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001afe:	mov.w	r2, #4294967295
60001b02:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b04:	add.w	r2, r2, #16187392	; 0xf70000
60001b08:	ldr	r0, [r1, #8]
60001b0a:	add.w	r2, r2, #14336	; 0x3800
60001b0e:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b10:	ldr	r0, [pc, #384]	; (60001c94 <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001b12:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b16:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001b18:	ldr	r2, [r3, #12]
60001b1a:	bic.w	r2, r2, #120	; 0x78
60001b1e:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b20:	ldr	r2, [r3, #32]
60001b22:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b24:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b26:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b28:	ldr	r2, [r3, #32]
60001b2a:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b2c:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b30:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b32:	ldr	r0, [pc, #356]	; (60001c98 <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b34:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001b36:	ldr	r2, [pc, #356]	; (60001c9c <configure_external_ram+0x244>)
60001b38:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001b3a:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001b3c:	ldr.w	r2, [r1, #184]	; 0xb8
60001b40:	bic.w	r2, r2, #63	; 0x3f
60001b44:	orr.w	r2, r2, #1
60001b48:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b4c:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001b50:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b52:	bic.w	r2, r2, #63	; 0x3f
60001b56:	orr.w	r2, r2, #1
60001b5a:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b5e:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001b62:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b64:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b66:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b68:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001b6c:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b6e:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b70:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b74:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b76:	ldr	r0, [pc, #296]	; (60001ca0 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b78:	bic.w	r2, r2, #2
60001b7c:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b7e:	ldr	r2, [pc, #292]	; (60001ca4 <configure_external_ram+0x24c>)
60001b80:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b82:	movs	r2, #2
60001b84:	str	r2, [r3, #28]
60001b86:	ldr	r2, [pc, #288]	; (60001ca8 <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b88:	str.w	r1, [r2], #4
60001b8c:	cmp	r2, r0
60001b8e:	bne.n	60001b88 <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001b90:	ldr	r2, [r3, #0]
60001b92:	orr.w	r2, r2, #1
60001b96:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b98:	ldr	r3, [pc, #236]	; (60001c88 <configure_external_ram+0x230>)
60001b9a:	ldr	r4, [r3, #0]
60001b9c:	ands.w	r4, r4, #1
60001ba0:	bne.n	60001b9a <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ba2:	ldr	r2, [pc, #256]	; (60001ca4 <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ba4:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001ba6:	mov	r1, r4
60001ba8:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001baa:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bac:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bb0:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bb2:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001bb6:	movw	r2, #1126	; 0x466
60001bba:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001bbe:	movw	r2, #1177	; 0x499
60001bc2:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001bc6:	ldr	r2, [pc, #228]	; (60001cac <configure_external_ram+0x254>)
60001bc8:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001bcc:	movw	r2, #9217	; 0x2401
60001bd0:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001bd4:	movw	r2, #1077	; 0x435
60001bd8:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001bdc:	ldr	r2, [pc, #208]	; (60001cb0 <configure_external_ram+0x258>)
60001bde:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001be2:	ldr	r2, [pc, #208]	; (60001cb4 <configure_external_ram+0x25c>)
60001be4:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001be8:	ldr	r2, [pc, #204]	; (60001cb8 <configure_external_ram+0x260>)
60001bea:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001bee:	movw	r2, #8705	; 0x2201
60001bf2:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001bf6:	bl	600018ec <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001bfa:	movs	r0, #1
60001bfc:	bl	600018ec <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001c00:	mov	r0, r6
60001c02:	bl	600018ec <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001c06:	mov	r0, r4
60001c08:	bl	60001910 <flexspi2_psram_id>
60001c0c:	movw	r3, #23821	; 0x5d0d
60001c10:	mov	r5, r0
60001c12:	cmp	r0, r3
60001c14:	bne.n	60001c66 <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001c16:	movs	r0, #4
60001c18:	bl	600018ec <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001c1c:	mov.w	r1, #8388608	; 0x800000
60001c20:	mov	r0, r4
60001c22:	bl	600018ec <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001c26:	movs	r0, #1
60001c28:	bl	600018ec <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001c2c:	mov	r0, r6
60001c2e:	bl	600018ec <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c32:	mov	r0, r1
60001c34:	bl	60001910 <flexspi2_psram_id>
60001c38:	cmp	r0, r5
60001c3a:	bne.n	60001c62 <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001c3c:	movs	r0, #4
60001c3e:	bl	600018ec <flexspi2_command>
			external_psram_size = 16;
60001c42:	movs	r0, #16
			external_psram_size * 0x100000 -
60001c44:	ldr	r1, [pc, #116]	; (60001cbc <configure_external_ram+0x264>)
			external_psram_size = 16;
60001c46:	ldr	r3, [pc, #120]	; (60001cc0 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001c48:	ldr	r2, [pc, #120]	; (60001cc4 <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001c4a:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c4c:	movs	r3, #0
			external_psram_size * 0x100000 -
60001c4e:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c50:	str	r3, [sp, #0]
60001c52:	movs	r3, #1
60001c54:	add.w	r2, r2, r0, lsl #20
60001c58:	ldr	r0, [pc, #108]	; (60001cc8 <configure_external_ram+0x270>)
60001c5a:	bl	60002440 <__sm_set_pool_veneer>
}
60001c5e:	add	sp, #8
60001c60:	pop	{r4, r5, r6, pc}
60001c62:	movs	r0, #8
60001c64:	b.n	60001c44 <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c66:	movs	r2, #16
60001c68:	ldr	r0, [pc, #92]	; (60001cc8 <configure_external_ram+0x270>)
}
60001c6a:	add	sp, #8
60001c6c:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c70:	b.w	60002478 <__memset_veneer>
60001c74:	.word	0x401f8000
60001c78:	.word	0x0001b0f9
60001c7c:	.word	0x000110f9
60001c80:	.word	0x7cf0ff00
60001c84:	.word	0x400fc000
60001c88:	.word	0x402a4000
60001c8c:	.word	0xffff0012
60001c90:	.word	0x402a8000
60001c94:	.word	0x80000040
60001c98:	.word	0x00020063
60001c9c:	.word	0x830f00ff
60001ca0:	.word	0x402a4300
60001ca4:	.word	0x5af05af0
60001ca8:	.word	0x402a4200
60001cac:	.word	0x3018049f
60001cb0:	.word	0x0a1806eb
60001cb4:	.word	0x26013206
60001cb8:	.word	0x0a180638
60001cbc:	.word	0x70018000
60001cc0:	.word	0x20010bb7
60001cc4:	.word	0x70000000
60001cc8:	.word	0x20010174

60001ccc <usb_pll_start>:
{
60001ccc:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cce:	ldr	r3, [pc, #84]	; (60001d24 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cd0:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cd2:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001cd6:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cda:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cde:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ce2:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ce6:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001ce8:	tst.w	r2, #2
60001cec:	beq.n	60001cf6 <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cee:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cf0:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cf2:	str	r7, [r3, #24]
			continue;
60001cf4:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cf6:	tst.w	r2, #8192	; 0x2000
60001cfa:	bne.n	60001d00 <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cfc:	str	r5, [r3, #20]
			continue;
60001cfe:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001d00:	tst.w	r2, #4096	; 0x1000
60001d04:	bne.n	60001d0a <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d06:	str	r4, [r3, #20]
			continue;
60001d08:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001d0a:	cmp	r2, #0
60001d0c:	bge.n	60001ce6 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001d0e:	tst.w	r2, #65536	; 0x10000
60001d12:	beq.n	60001d18 <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d14:	str	r1, [r3, #24]
			continue;
60001d16:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001d18:	lsls	r2, r2, #25
60001d1a:	bmi.n	60001d20 <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d1c:	str	r0, [r3, #20]
			continue;
60001d1e:	b.n	60001ce6 <usb_pll_start+0x1a>
}
60001d20:	pop	{r4, r5, r6, r7, pc}
60001d22:	nop
60001d24:	.word	0x400d8000

60001d28 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d28:	ldr	r2, [pc, #248]	; (60001e24 <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d2a:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d2e:	ldr	r0, [pc, #248]	; (60001e28 <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d30:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	vldr	s10, [pc, #244]	; 60001e2c <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d38:	bic.w	r3, r3, #1
{
60001d3c:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d3e:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d42:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d44:	ldr	r4, [pc, #232]	; (60001e30 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d46:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d4a:	ldr	r3, [pc, #232]	; (60001e34 <tempmon_init+0x10c>)
60001d4c:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d50:	uxtb	r1, r3
60001d52:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d54:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d58:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d5c:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d5e:	vcvt.f32.s32	s14, s15
60001d62:	ldr	r1, [pc, #212]	; (60001e38 <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d64:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d68:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d6a:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d6e:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d76:	ldr	r3, [pc, #196]	; (60001e3c <tempmon_init+0x114>)
60001d78:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d7c:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d80:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d84:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d8c:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d90:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d94:	vdiv.f32	s11, s10, s12
60001d98:	vadd.f32	s11, s11, s13
60001d9c:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001da0:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da4:	vldr	s11, [pc, #152]	; 60001e40 <tempmon_init+0x118>
60001da8:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001dac:	orr.w	r3, r3, r1, lsl #20
60001db0:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db4:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db8:	ldr	r3, [pc, #136]	; (60001e44 <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dba:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dbe:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dc2:	vdiv.f32	s11, s14, s12
60001dc6:	vadd.f32	s14, s11, s13
60001dca:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dce:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dd2:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dd6:	and.w	r3, r3, r0, lsl #16
60001dda:	orrs	r3, r1
60001ddc:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001de0:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001de4:	vadd.f32	s15, s14, s13
60001de8:	vcvt.u32.f32	s15, s15
60001dec:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001df0:	ubfx	r3, r3, #0, #12
60001df4:	orrs	r3, r1
60001df6:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dfa:	ldr.w	r3, [r2, #128]	; 0x80
60001dfe:	orr.w	r3, r3, #2
60001e02:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e06:	movs	r2, #0
60001e08:	ldr	r3, [pc, #60]	; (60001e48 <tempmon_init+0x120>)
60001e0a:	strb.w	r2, [r3, #64]	; 0x40
60001e0e:	ldr	r3, [pc, #60]	; (60001e4c <tempmon_init+0x124>)
60001e10:	ldr	r2, [pc, #60]	; (60001e50 <tempmon_init+0x128>)
60001e12:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e16:	mov.w	r3, #3758153728	; 0xe000e000
60001e1a:	movs	r2, #1
60001e1c:	str.w	r2, [r3, #264]	; 0x108
}
60001e20:	pop	{r4, pc}
60001e22:	nop
60001e24:	.word	0x400d8100
60001e28:	.word	0x200102ac
60001e2c:	.word	0x42aa0000
60001e30:	.word	0x200102a8
60001e34:	.word	0x401f4400
60001e38:	.word	0x200102b0
60001e3c:	.word	0x200102b4
60001e40:	.word	0x42b40000
60001e44:	.word	0x0fff0000
60001e48:	.word	0xe000e400
60001e4c:	.word	0x20009800
60001e50:	.word	0x0000c1a1

60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001e54:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e56:	ldr	r4, [pc, #64]	; (60001e98 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001e58:	ldr.w	r3, [r4, #128]	; 0x80
60001e5c:	cmp	r3, #11
60001e5e:	bne.n	60001e92 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001e60:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001e64:	ldr	r2, [pc, #52]	; (60001e9c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e66:	ldr	r6, [pc, #56]	; (60001ea0 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001e68:	ldr	r5, [pc, #56]	; (60001ea4 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001e6a:	ldr	r1, [r2, #0]
60001e6c:	adds	r2, #4
60001e6e:	eors	r3, r1
60001e70:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e72:	and.w	r0, r3, #1
60001e76:	subs	r1, #1
60001e78:	mul.w	r0, r6, r0
60001e7c:	eor.w	r3, r0, r3, lsr #1
60001e80:	bne.n	60001e72 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001e82:	cmp	r2, r5
60001e84:	bne.n	60001e6a <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001e86:	ldr.w	r0, [r4, #168]	; 0xa8
60001e8a:	subs	r3, r0, r3
60001e8c:	negs	r0, r3
60001e8e:	adcs	r0, r3
	return 1;
}
60001e90:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001e92:	movs	r0, #0
60001e94:	b.n	60001e90 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001e96:	nop
60001e98:	.word	0x2027ff00
60001e9c:	.word	0x2027ff80
60001ea0:	.word	0xedb88320
60001ea4:	.word	0x2027ffa8

60001ea8 <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001ea8:	ldr	r2, [pc, #96]	; (60001f0c <CrashReportClass::clear()+0x64>)
60001eaa:	movs	r3, #0
{
60001eac:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001eae:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001eb2:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001eb6:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001eba:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001ebe:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001ec2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001ec6:	mov.w	r4, #3758153728	; 0xe000e000
60001eca:	adds	r2, #128	; 0x80
60001ecc:	str.w	r2, [r4, #3952]	; 0xf70
60001ed0:	adds	r2, #32
60001ed2:	str.w	r2, [r4, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001ed6:	dsb	sy
	asm("isb");
60001eda:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ede:	ldr	r2, [pc, #48]	; (60001f10 <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ee0:	ldr	r6, [pc, #48]	; (60001f14 <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee2:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee4:	ldr	r5, [pc, #48]	; (60001f18 <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee6:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee8:	movs	r1, #28
	SRC_GPR5 = 0;
60001eea:	str	r3, [r2, #48]	; 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001eec:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001eee:	str.w	r3, [r6, #4032]	; 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ef2:	bl	60002438 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001ef6:	str.w	r0, [r6, #4060]	; 0xfdc
	asm("dsb");
60001efa:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001efe:	str.w	r5, [r4, #3944]	; 0xf68
	asm("dsb");
60001f02:	dsb	sy
	asm("isb");
60001f06:	isb	sy
}
60001f0a:	pop	{r4, r5, r6, pc}
60001f0c:	.word	0x2027ff00
60001f10:	.word	0x400f8000
60001f14:	.word	0x2027f000
60001f18:	.word	0x2027ffc0

60001f1c <CrashReportClass::printTo(Print&) const>:
{
60001f1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001f20:	mov	r4, r1
  if (isvalid(info)) {
60001f22:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001f26:	cmp	r0, #0
60001f28:	beq.w	600022cc <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001f2c:	ldr	r6, [pc, #692]	; (600021e4 <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001f2e:	mov	r0, r4
60001f30:	ldr	r1, [pc, #692]	; (600021e8 <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001f32:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001f36:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f3a:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f3e:	ldr	r1, [pc, #684]	; (600021ec <CrashReportClass::printTo(Print&) const+0x2d0>)
60001f40:	mov	r0, r4
    info->time /= 60;
60001f42:	udiv	r9, r7, r8
    info->time /= 60;
60001f46:	udiv	r5, r9, r8
60001f4a:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f4e:	bl	60002480 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001f52:	movs	r3, #24
    p.print(hh);
60001f54:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001f56:	udiv	r1, r5, r3
60001f5a:	mls	r1, r3, r1, r5
    p.print(hh);
60001f5e:	uxtb	r1, r1
60001f60:	bl	60002460 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f64:	ldr	r1, [pc, #648]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f66:	mov	r0, r4
60001f68:	bl	60002480 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001f6c:	mls	r1, r8, r5, r9
    p.print(mm);
60001f70:	mov	r0, r4
60001f72:	uxtb	r1, r1
60001f74:	bl	60002460 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f78:	ldr	r1, [pc, #628]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f7a:	mov	r0, r4
60001f7c:	bl	60002480 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f80:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001f84:	mov	r0, r4
60001f86:	uxtb	r1, r1
60001f88:	bl	60002460 <___ZN5Print5printEh_veneer>
60001f8c:	mov	r0, r4
60001f8e:	bl	60002488 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001f92:	ldr	r1, [pc, #608]	; (600021f4 <CrashReportClass::printTo(Print&) const+0x2d8>)
60001f94:	mov	r0, r4
60001f96:	bl	60002480 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001f9a:	movs	r2, #16
60001f9c:	ldr.w	r1, [r6, #152]	; 0x98
60001fa0:	mov	r0, r4
60001fa2:	bl	60002448 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
60001fa6:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
60001faa:	cmp	r5, #0
60001fac:	beq.n	6000205c <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60001fae:	ldr	r1, [pc, #584]	; (600021f8 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001fb0:	mov	r0, r4
60001fb2:	bl	60002480 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
60001fb6:	movs	r2, #16
60001fb8:	ldr.w	r1, [r6, #136]	; 0x88
60001fbc:	mov	r0, r4
60001fbe:	bl	60002448 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60001fc2:	lsls	r2, r5, #31
60001fc4:	bpl.w	6000216c <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001fc8:	ldr	r1, [pc, #560]	; (600021fc <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001fca:	mov	r0, r4
60001fcc:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001fd0:	lsls	r2, r5, #24
60001fd2:	bpl.n	60002028 <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001fd4:	ldr	r1, [pc, #552]	; (60002200 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001fd6:	mov	r0, r4
60001fd8:	bl	60002480 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60001fdc:	movs	r2, #16
60001fde:	ldr.w	r1, [r6, #144]	; 0x90
60001fe2:	mov	r0, r4
60001fe4:	bl	600024b0 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
60001fe8:	ldr.w	r2, [r6, #144]	; 0x90
60001fec:	cmp	r2, #31
60001fee:	bhi.w	6000218e <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001ff2:	ldr	r1, [pc, #528]	; (60002204 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001ff4:	mov	r0, r4
60001ff6:	bl	60002480 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001ffa:	movs	r2, #16
60001ffc:	ldr.w	r1, [r6, #152]	; 0x98
60002000:	mov	r0, r4
60002002:	bl	600024b0 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60002006:	ldr	r1, [pc, #512]	; (60002208 <CrashReportClass::printTo(Print&) const+0x2ec>)
60002008:	mov	r0, r4
6000200a:	bl	60002480 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
6000200e:	ldr.w	r1, [r6, #152]	; 0x98
60002012:	movs	r2, #16
60002014:	mov	r0, r4
60002016:	bl	600024b0 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
6000201a:	ldr	r1, [pc, #496]	; (6000220c <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000201c:	mov	r0, r4
6000201e:	bl	60002480 <___ZN5Print5printEPKc_veneer>
        p.println();
60002022:	mov	r0, r4
60002024:	bl	60002488 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60002028:	lsls	r3, r5, #23
6000202a:	bpl.w	600021a2 <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
6000202e:	ldr	r1, [pc, #480]	; (60002210 <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60002030:	mov	r0, r4
60002032:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002036:	lsls	r7, r5, #16
60002038:	bpl.n	6000204e <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
6000203a:	ldr	r1, [pc, #472]	; (60002214 <CrashReportClass::printTo(Print&) const+0x2f8>)
6000203c:	mov	r0, r4
6000203e:	bl	60002480 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
60002042:	movs	r2, #16
60002044:	ldr.w	r1, [r6, #148]	; 0x94
60002048:	mov	r0, r4
6000204a:	bl	60002448 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
6000204e:	lsls	r0, r5, #15
60002050:	bpl.w	600021cc <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60002054:	ldr	r1, [pc, #448]	; (60002218 <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
60002056:	mov	r0, r4
60002058:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
6000205c:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60002060:	cbz	r5, 60002084 <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
60002062:	ldr	r1, [pc, #440]	; (6000221c <CrashReportClass::printTo(Print&) const+0x300>)
60002064:	mov	r0, r4
60002066:	bl	60002480 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
6000206a:	movs	r2, #16
6000206c:	ldr.w	r1, [r6, #140]	; 0x8c
60002070:	mov	r0, r4
60002072:	bl	60002448 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60002076:	lsls	r0, r5, #30
60002078:	bpl.w	600022c2 <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
6000207c:	ldr	r1, [pc, #416]	; (60002220 <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
6000207e:	mov	r0, r4
60002080:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
60002084:	ldr	r1, [pc, #412]	; (60002224 <CrashReportClass::printTo(Print&) const+0x308>)
60002086:	mov	r0, r4
60002088:	bl	60002480 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
6000208c:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60002090:	movs	r1, #2
60002092:	mov	r0, r4
60002094:	vcvt.f64.f32	d0, s0
60002098:	bl	60002428 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
6000209c:	ldr	r1, [pc, #392]	; (60002228 <CrashReportClass::printTo(Print&) const+0x30c>)
6000209e:	mov	r0, r4
600020a0:	bl	60002480 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
600020a4:	ldr	r1, [pc, #388]	; (6000222c <CrashReportClass::printTo(Print&) const+0x310>)
600020a6:	mov	r0, r4
600020a8:	bl	60002480 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
600020ac:	ldr	r3, [pc, #384]	; (60002230 <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600020ae:	ldr	r1, [pc, #388]	; (60002234 <CrashReportClass::printTo(Print&) const+0x318>)
600020b0:	movs	r2, #10
600020b2:	ldr	r0, [r3, #0]
600020b4:	movs	r3, #0
600020b6:	udiv	r1, r0, r1
600020ba:	mov	r0, r4
600020bc:	bl	60002490 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
600020c0:	ldr	r1, [pc, #372]	; (60002238 <CrashReportClass::printTo(Print&) const+0x31c>)
600020c2:	mov	r0, r4
600020c4:	bl	60002480 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
600020c8:	ldr	r3, [pc, #368]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
600020ca:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600020cc:	lsls	r2, r5, #30
600020ce:	bpl.n	600020e2 <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
600020d0:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020d2:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
600020d4:	ldr	r3, [pc, #360]	; (60002240 <CrashReportClass::printTo(Print&) const+0x324>)
600020d6:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
600020d8:	ite	eq
600020da:	ldreq	r1, [pc, #360]	; (60002244 <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020dc:	ldrne	r1, [pc, #360]	; (60002248 <CrashReportClass::printTo(Print&) const+0x32c>)
600020de:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600020e2:	lsls	r7, r5, #29
600020e4:	bpl.n	600020ee <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
600020e6:	ldr	r1, [pc, #356]	; (6000224c <CrashReportClass::printTo(Print&) const+0x330>)
600020e8:	mov	r0, r4
600020ea:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600020ee:	lsls	r6, r5, #28
600020f0:	bpl.n	600020fa <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
600020f2:	ldr	r1, [pc, #348]	; (60002250 <CrashReportClass::printTo(Print&) const+0x334>)
600020f4:	mov	r0, r4
600020f6:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
600020fa:	lsls	r0, r5, #27
600020fc:	bpl.n	60002106 <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
600020fe:	ldr	r1, [pc, #340]	; (60002254 <CrashReportClass::printTo(Print&) const+0x338>)
60002100:	mov	r0, r4
60002102:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60002106:	lsls	r1, r5, #26
60002108:	bpl.n	60002112 <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
6000210a:	ldr	r1, [pc, #332]	; (60002258 <CrashReportClass::printTo(Print&) const+0x33c>)
6000210c:	mov	r0, r4
6000210e:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60002112:	lsls	r2, r5, #25
60002114:	bpl.n	6000211e <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
60002116:	ldr	r1, [pc, #324]	; (6000225c <CrashReportClass::printTo(Print&) const+0x340>)
60002118:	mov	r0, r4
6000211a:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000211e:	lsls	r3, r5, #24
60002120:	bpl.n	6000212a <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
60002122:	ldr	r1, [pc, #316]	; (60002260 <CrashReportClass::printTo(Print&) const+0x344>)
60002124:	mov	r0, r4
60002126:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000212a:	ands.w	r5, r5, #256	; 0x100
6000212e:	beq.w	600022fe <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
60002132:	ldr	r1, [pc, #304]	; (60002264 <CrashReportClass::printTo(Print&) const+0x348>)
60002134:	mov	r0, r4
60002136:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
6000213a:	ldr	r2, [pc, #256]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
6000213c:	ldr	r1, [pc, #296]	; (60002268 <CrashReportClass::printTo(Print&) const+0x34c>)
6000213e:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002140:	ldr	r3, [r2, #8]
60002142:	bic.w	r3, r3, #256	; 0x100
60002146:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60002148:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
6000214c:	ldr	r1, [pc, #284]	; (6000226c <CrashReportClass::printTo(Print&) const+0x350>)
6000214e:	mov	r0, r4
60002150:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60002154:	ldr	r3, [pc, #280]	; (60002270 <CrashReportClass::printTo(Print&) const+0x354>)
60002156:	movs	r2, #7
60002158:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
6000215a:	ldr	r2, [pc, #280]	; (60002274 <CrashReportClass::printTo(Print&) const+0x358>)
6000215c:	ldr	r3, [r2, #56]	; 0x38
6000215e:	orr.w	r3, r3, #64	; 0x40
60002162:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60002164:	dsb	sy
	  while (1) asm ("wfi");
60002168:	wfi
6000216a:	b.n	60002168 <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
6000216c:	lsls	r3, r5, #30
6000216e:	bpl.n	60002174 <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
60002170:	ldr	r1, [pc, #260]	; (60002278 <CrashReportClass::printTo(Print&) const+0x35c>)
60002172:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002174:	lsls	r7, r5, #28
60002176:	bpl.n	6000217c <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60002178:	ldr	r1, [pc, #256]	; (6000227c <CrashReportClass::printTo(Print&) const+0x360>)
6000217a:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000217c:	lsls	r0, r5, #27
6000217e:	bpl.n	60002184 <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
60002180:	ldr	r1, [pc, #252]	; (60002280 <CrashReportClass::printTo(Print&) const+0x364>)
60002182:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002184:	lsls	r1, r5, #26
60002186:	bpl.w	60001fd0 <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
6000218a:	ldr	r1, [pc, #248]	; (60002284 <CrashReportClass::printTo(Print&) const+0x368>)
6000218c:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000218e:	ldr	r3, [pc, #248]	; (60002288 <CrashReportClass::printTo(Print&) const+0x36c>)
60002190:	cmp	r2, r3
60002192:	bcc.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
60002196:	adds	r3, #32
60002198:	cmp	r2, r3
6000219a:	bcs.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000219e:	ldr	r1, [pc, #236]	; (6000228c <CrashReportClass::printTo(Print&) const+0x370>)
600021a0:	b.n	6000201c <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
600021a2:	lsls	r7, r5, #22
600021a4:	bpl.n	600021aa <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
600021a6:	ldr	r1, [pc, #232]	; (60002290 <CrashReportClass::printTo(Print&) const+0x374>)
600021a8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
600021aa:	lsls	r0, r5, #21
600021ac:	bpl.n	600021b2 <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
600021ae:	ldr	r1, [pc, #228]	; (60002294 <CrashReportClass::printTo(Print&) const+0x378>)
600021b0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
600021b2:	lsls	r1, r5, #20
600021b4:	bpl.n	600021ba <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
600021b6:	ldr	r1, [pc, #224]	; (60002298 <CrashReportClass::printTo(Print&) const+0x37c>)
600021b8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
600021ba:	lsls	r2, r5, #19
600021bc:	bpl.n	600021c2 <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600021be:	ldr	r1, [pc, #220]	; (6000229c <CrashReportClass::printTo(Print&) const+0x380>)
600021c0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
600021c2:	lsls	r3, r5, #18
600021c4:	bpl.w	60002036 <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
600021c8:	ldr	r1, [pc, #212]	; (600022a0 <CrashReportClass::printTo(Print&) const+0x384>)
600021ca:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600021cc:	lsls	r1, r5, #14
600021ce:	bpl.n	600021d4 <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600021d0:	ldr	r1, [pc, #208]	; (600022a4 <CrashReportClass::printTo(Print&) const+0x388>)
600021d2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600021d4:	lsls	r2, r5, #13
600021d6:	bpl.n	600021dc <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600021d8:	ldr	r1, [pc, #204]	; (600022a8 <CrashReportClass::printTo(Print&) const+0x38c>)
600021da:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600021dc:	lsls	r3, r5, #12
600021de:	bpl.n	600022b0 <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
600021e0:	ldr	r1, [pc, #200]	; (600022ac <CrashReportClass::printTo(Print&) const+0x390>)
600021e2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
600021e4:	.word	0x2027ff00
600021e8:	.word	0x200080f1
600021ec:	.word	0x200080fe
600021f0:	.word	0x20008627
600021f4:	.word	0x20008125
600021f8:	.word	0x2000814a
600021fc:	.word	0x20008153
60002200:	.word	0x20008219
60002204:	.word	0x2000823b
60002208:	.word	0x2000825a
6000220c:	.word	0x20008299
60002210:	.word	0x200082f9
60002214:	.word	0x20008432
60002218:	.word	0x20008454
6000221c:	.word	0x20008530
60002220:	.word	0x20008539
60002224:	.word	0x2000857c
60002228:	.word	0x2000859f
6000222c:	.word	0x200085a5
60002230:	.word	0x20008a60
60002234:	.word	0x000f4240
60002238:	.word	0x200085c3
6000223c:	.word	0x400f8000
60002240:	.word	0x0bad00f1
60002244:	.word	0x20008720
60002248:	.word	0x20008769
6000224c:	.word	0x200087aa
60002250:	.word	0x200087d2
60002254:	.word	0x200087fd
60002258:	.word	0x20008824
6000225c:	.word	0x2000884e
60002260:	.word	0x20008870
60002264:	.word	0x20008892
60002268:	.word	0x200088bc
6000226c:	.word	0x200088de
60002270:	.word	0x400ac000
60002274:	.word	0x400d4000
60002278:	.word	0x2000817c
6000227c:	.word	0x2000819e
60002280:	.word	0x200081c8
60002284:	.word	0x200081ee
60002288:	.word	0x20010c00
6000228c:	.word	0x200082b7
60002290:	.word	0x2000831a
60002294:	.word	0x20008347
60002298:	.word	0x2000838c
6000229c:	.word	0x200083cc
600022a0:	.word	0x20008400
600022a4:	.word	0x20008478
600022a8:	.word	0x200084ab
600022ac:	.word	0x200084d4
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600022b0:	lsls	r7, r5, #7
600022b2:	bpl.n	600022b8 <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600022b4:	ldr	r1, [pc, #204]	; (60002384 <CrashReportClass::printTo(Print&) const+0x468>)
600022b6:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600022b8:	lsls	r5, r5, #6
600022ba:	bpl.w	6000205c <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
600022be:	ldr	r1, [pc, #200]	; (60002388 <CrashReportClass::printTo(Print&) const+0x46c>)
600022c0:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
600022c2:	lsls	r1, r5, #1
600022c4:	bpl.w	60002084 <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
600022c8:	ldr	r1, [pc, #192]	; (6000238c <CrashReportClass::printTo(Print&) const+0x470>)
600022ca:	b.n	6000207e <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
600022cc:	ldr	r1, [pc, #192]	; (60002390 <CrashReportClass::printTo(Print&) const+0x474>)
600022ce:	mov	r0, r4
600022d0:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
600022d4:	ldr	r1, [pc, #188]	; (60002394 <CrashReportClass::printTo(Print&) const+0x478>)
600022d6:	mov	r0, r4
600022d8:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
600022dc:	ldr	r1, [pc, #184]	; (60002398 <CrashReportClass::printTo(Print&) const+0x47c>)
600022de:	mov	r0, r4
600022e0:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
600022e4:	ldr	r1, [pc, #180]	; (6000239c <CrashReportClass::printTo(Print&) const+0x480>)
600022e6:	mov	r0, r4
600022e8:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
600022ec:	ldr	r1, [pc, #176]	; (600023a0 <CrashReportClass::printTo(Print&) const+0x484>)
600022ee:	mov	r0, r4
600022f0:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
600022f4:	ldr	r1, [pc, #172]	; (600023a4 <CrashReportClass::printTo(Print&) const+0x488>)
600022f6:	mov	r0, r4
600022f8:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
600022fc:	b.n	600020c8 <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
600022fe:	ldr	r7, [pc, #168]	; (600023a8 <CrashReportClass::printTo(Print&) const+0x48c>)
60002300:	ldr.w	r3, [r7, #192]	; 0xc0
60002304:	cbz	r3, 60002378 <CrashReportClass::printTo(Print&) const+0x45c>
60002306:	ldr.w	r6, [r7, #220]	; 0xdc
6000230a:	movs	r1, #28
6000230c:	ldr	r0, [pc, #156]	; (600023ac <CrashReportClass::printTo(Print&) const+0x490>)
6000230e:	bl	60002438 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60002312:	cmp	r6, r0
60002314:	bne.n	60002378 <CrashReportClass::printTo(Print&) const+0x45c>
        p.print("  Breadcrumb #");
60002316:	ldr.w	r8, [pc, #160]	; 600023b8 <CrashReportClass::printTo(Print&) const+0x49c>
        p.print(" was ");
6000231a:	ldr.w	r9, [pc, #160]	; 600023bc <CrashReportClass::printTo(Print&) const+0x4a0>
6000231e:	ldr.w	sl, [pc, #140]	; 600023ac <CrashReportClass::printTo(Print&) const+0x490>
      if (bc->bitmask & (1 << i)) {
60002322:	movs	r3, #1
60002324:	ldr.w	r2, [r7, #192]	; 0xc0
60002328:	mov	r6, r5
6000232a:	lsls	r3, r5
6000232c:	adds	r5, #1
6000232e:	tst	r3, r2
60002330:	beq.n	60002374 <CrashReportClass::printTo(Print&) const+0x458>
        p.print("  Breadcrumb #");
60002332:	mov	r1, r8
60002334:	mov	r0, r4
60002336:	bl	60002480 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
6000233a:	mov	r1, r5
6000233c:	add.w	r6, sl, r6, lsl #2
60002340:	mov	r0, r4
60002342:	bl	60002430 <___ZN5Print5printEl_veneer>
        p.print(" was ");
60002346:	mov	r1, r9
60002348:	mov	r0, r4
6000234a:	bl	60002480 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000234e:	movs	r3, #0
60002350:	movs	r2, #10
60002352:	ldr	r1, [r6, #4]
60002354:	mov	r0, r4
60002356:	bl	60002490 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
6000235a:	ldr	r1, [pc, #84]	; (600023b0 <CrashReportClass::printTo(Print&) const+0x494>)
6000235c:	mov	r0, r4
6000235e:	bl	60002480 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
60002362:	ldr	r1, [r6, #4]
60002364:	movs	r2, #16
60002366:	mov	r0, r4
60002368:	bl	600024b0 <___ZN5Print5printEmi_veneer>
        p.println(")");
6000236c:	ldr	r1, [pc, #68]	; (600023b4 <CrashReportClass::printTo(Print&) const+0x498>)
6000236e:	mov	r0, r4
60002370:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
60002374:	cmp	r5, #6
60002376:	bne.n	60002322 <CrashReportClass::printTo(Print&) const+0x406>
  clear();
60002378:	bl	60001ea8 <CrashReportClass::clear()>
}
6000237c:	movs	r0, #1
6000237e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60002382:	nop
60002384:	.word	0x200084eb
60002388:	.word	0x20008514
6000238c:	.word	0x20008560
60002390:	.word	0x200085c8
60002394:	.word	0x200085e0
60002398:	.word	0x20008629
6000239c:	.word	0x20008673
600023a0:	.word	0x20008698
600023a4:	.word	0x200086e0
600023a8:	.word	0x2027ff00
600023ac:	.word	0x2027ffc0
600023b0:	.word	0x20008930
600023b4:	.word	0x200086de
600023b8:	.word	0x20008921
600023bc:	.word	0x20008599

600023c0 <CrashReportClass::operator bool()>:
{
600023c0:	push	{r3, lr}
	if (isvalid(info)) return true;
600023c2:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
600023c6:	subs	r0, #0
600023c8:	it	ne
600023ca:	movne	r0, #1
600023cc:	pop	{r3, pc}
600023ce:	nop

600023d0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600023d0:	ldr	r3, [pc, #60]	; (60002410 <analog_init+0x40>)
600023d2:	ldr	r2, [r3, #108]	; 0x6c
600023d4:	orr.w	r2, r2, #196608	; 0x30000
600023d8:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600023da:	ldr	r2, [r3, #108]	; 0x6c
600023dc:	orr.w	r2, r2, #768	; 0x300
600023e0:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600023e2:	sub.w	r3, r3, #229376	; 0x38000
600023e6:	movw	r2, #1591	; 0x637
600023ea:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600023ec:	movs	r2, #160	; 0xa0
600023ee:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600023f0:	ldr	r2, [r3, #72]	; 0x48
600023f2:	lsls	r2, r2, #24
600023f4:	bmi.n	600023f0 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600023f6:	ldr	r2, [pc, #28]	; (60002414 <analog_init+0x44>)
600023f8:	movw	r3, #1591	; 0x637
600023fc:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600023fe:	movs	r3, #160	; 0xa0
60002400:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002402:	ldr	r3, [r2, #72]	; 0x48
60002404:	ands.w	r3, r3, #128	; 0x80
60002408:	bne.n	60002402 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000240a:	ldr	r2, [pc, #12]	; (60002418 <analog_init+0x48>)
6000240c:	strb	r3, [r2, #0]
}
6000240e:	bx	lr
60002410:	.word	0x400fc000
60002414:	.word	0x400c8000
60002418:	.word	0x20010bae

6000241c <_init>:
6000241c:	push	{r3, r4, r5, r6, r7, lr}
6000241e:	nop
60002420:	pop	{r3, r4, r5, r6, r7}
60002422:	pop	{r3}
60002424:	mov	lr, r3
60002426:	bx	lr

60002428 <___ZN5Print10printFloatEdh_veneer>:
60002428:	ldr.w	pc, [pc]	; 6000242c <___ZN5Print10printFloatEdh_veneer+0x4>
6000242c:	.word	0x0000cb31

60002430 <___ZN5Print5printEl_veneer>:
60002430:	ldr.w	pc, [pc]	; 60002434 <___ZN5Print5printEl_veneer+0x4>
60002434:	.word	0x0000ca27

60002438 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
60002438:	ldr.w	pc, [pc]	; 6000243c <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
6000243c:	.word	0x0000c8f9

60002440 <__sm_set_pool_veneer>:
60002440:	ldr.w	pc, [pc]	; 60002444 <__sm_set_pool_veneer+0x4>
60002444:	.word	0x0000c137

60002448 <___ZN5Print7printlnEmi_veneer>:
60002448:	ldr.w	pc, [pc]	; 6000244c <___ZN5Print7printlnEmi_veneer+0x4>
6000244c:	.word	0x0000c8e5

60002450 <__set_arm_clock_veneer>:
60002450:	ldr.w	pc, [pc]	; 60002454 <__set_arm_clock_veneer+0x4>
60002454:	.word	0x0000ad6d

60002458 <___ZN5Print7printlnEPKc_veneer>:
60002458:	ldr.w	pc, [pc]	; 6000245c <___ZN5Print7printlnEPKc_veneer+0x4>
6000245c:	.word	0x00000d2d

60002460 <___ZN5Print5printEh_veneer>:
60002460:	ldr.w	pc, [pc]	; 60002464 <___ZN5Print5printEh_veneer+0x4>
60002464:	.word	0x0000c8d5

60002468 <__main_veneer>:
60002468:	ldr.w	pc, [pc]	; 6000246c <__main_veneer+0x4>
6000246c:	.word	0x0000c943

60002470 <__delay_veneer>:
60002470:	ldr.w	pc, [pc]	; 60002474 <__delay_veneer+0x4>
60002474:	.word	0x0000bab5

60002478 <__memset_veneer>:
60002478:	ldr.w	pc, [pc]	; 6000247c <__memset_veneer+0x4>
6000247c:	.word	0x0000a529

60002480 <___ZN5Print5printEPKc_veneer>:
60002480:	ldr.w	pc, [pc]	; 60002484 <___ZN5Print5printEPKc_veneer+0x4>
60002484:	.word	0x0000c8cd

60002488 <___ZN5Print7printlnEv_veneer>:
60002488:	ldr.w	pc, [pc]	; 6000248c <___ZN5Print7printlnEv_veneer+0x4>
6000248c:	.word	0x0000ca39

60002490 <___ZN5Print11printNumberEmhh_veneer>:
60002490:	ldr.w	pc, [pc]	; 60002494 <___ZN5Print11printNumberEmhh_veneer+0x4>
60002494:	.word	0x0000ca8b

60002498 <____libc_init_array_veneer>:
60002498:	ldr.w	pc, [pc]	; 6000249c <____libc_init_array_veneer+0x4>
6000249c:	.word	0x0000f0e9

600024a0 <___ZN7TwoWire8setClockEm_veneer>:
600024a0:	ldr.w	pc, [pc]	; 600024a4 <___ZN7TwoWire8setClockEm_veneer+0x4>
600024a4:	.word	0x0000588d

600024a8 <__usb_init_serialnumber_veneer>:
600024a8:	ldr.w	pc, [pc]	; 600024ac <__usb_init_serialnumber_veneer+0x4>
600024ac:	.word	0x0000c689

600024b0 <___ZN5Print5printEmi_veneer>:
600024b0:	ldr.w	pc, [pc]	; 600024b4 <___ZN5Print5printEmi_veneer+0x4>
600024b4:	.word	0x0000c8dd

600024b8 <__pwm_init_veneer>:
600024b8:	ldr.w	pc, [pc]	; 600024bc <__pwm_init_veneer+0x4>
600024bc:	.word	0x0000c351

600024c0 <__frame_dummy_init_array_entry>:
600024c0:	E...q...A..../..
600024d0:	a:..

Disassembly of section .text.progmem:

600024d4 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024d4:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024d8:	ldr	r3, [pc, #60]	; (60002518 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024da:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024de:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024e2:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024e6:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024e8:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024ec:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600024f0:	ldr	r2, [r3, #112]	; 0x70
600024f2:	bic.w	r2, r2, #4096	; 0x1000
600024f6:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600024f8:	ldr	r2, [r3, #112]	; 0x70
600024fa:	cmp	r2, #0
600024fc:	bge.n	600024f8 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600024fe:	ldr.w	r2, [r3, #368]	; 0x170
60002502:	bic.w	r2, r2, #8388608	; 0x800000
60002506:	bic.w	r2, r2, #32768	; 0x8000
6000250a:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
6000250e:	ldr	r2, [r3, #112]	; 0x70
60002510:	bic.w	r2, r2, #65536	; 0x10000
60002514:	str	r2, [r3, #112]	; 0x70
  }
60002516:	bx	lr
60002518:	.word	0x400d8000

6000251c <TwoWire::i2c4_hardware>:
6000251c:	...@............
6000252c:	...@............
	...
60002544:	...........@....
60002554:	................
60002564:	.....X..

6000256c <TwoWire::i2c3_hardware>:
6000256c:	p..@............
6000257c:	...@....,.......
6000258c:	...@............
6000259c:	...@....-.......
600025ac:	...@........uX..

600025bc <TwoWire::i2c1_hardware>:
600025bc:	p..@............
600025cc:	...@............
	...
600025e4:	...........@....
600025f4:	................
60002604:	....iX..

6000260c <usb_string_mtp>:
6000260c:	..M.T.P.

60002614 <usb_string_product_name_default>:
60002614:	 .T.e.e.n.s.y. .
60002624:	M.T.P. .D.i.s.k.

60002634 <usb_string_manufacturer_name_default>:
60002634:	..T.e.e.n.s.y.d.
60002644:	u.i.n.o.

6000264c <string0>:
6000264c:	....

60002650 <usb_config_descriptor_12>:
60002650:	..i.....2.......
60002660:	...........$....
60002670:	$....$...$......
60002680:	................
60002690:	.@......@.......
600026a0:	........@......@
600026b0:	...... ..

600026b9 <usb_config_descriptor_480>:
600026b9:	..i.....2.......
600026c9:	...........$....
600026d9:	$....$...$......
600026e9:	................
600026f9:	................
60002709:	................
60002719:	...... ..

60002722 <qualifier_descriptor>:
60002722:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}

uint16_t checkDiskSpace(void)
{   if((diskSize>0) && ((diskSpace=sd->freeClusterCount()) > MIN_SPACE)) return 1;
    return 0;
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	bx	lr
      38:	.word	0x20009ac0
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      3c:	.word	0x20009ac0
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
		buf[j] = buf[i];
      56:	b.w	20 <register_tm_clones>
		buf[i] = t;
      5a:	nop
      5c:	.word	0x00000000
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      60:	.word	0x20010204
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
      64:	.word	0x60024c00

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
      6e:	ldr	r3, [r0, #72]	; 0x48
      70:	cbz	r3, 78 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      72:	mov	r0, r3
      74:	b.w	787c <FatFile::sync()>
      78:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      7a:	cbz	r0, 80 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      7c:	b.w	6bdc <ExFatFile::sync()>
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    BaseFile::sync();
  }
      80:	bx	lr

00000082 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      82:	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      84:	push	{r0, r1, r2, lr}
      86:	cbz	r3, 9e <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      88:	movs	r2, #1
      8a:	add.w	r1, sp, #7
      8e:	mov	r0, r3
      90:	bl	7448 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      94:	cmp	r0, #1
      96:	bne.n	a2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      98:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      9c:	b.n	a6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      9e:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      a0:	cbnz	r0, ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      a2:	mov.w	r0, #4294967295
  }
      a6:	add	sp, #12
      a8:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      ac:	movs	r2, #1
      ae:	add.w	r1, sp, #7
      b2:	bl	5df8 <ExFatFile::read(void*, unsigned int)>
      b6:	b.n	94 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000b8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
      b8:	ldr	r3, [r0, #72]	; 0x48
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      bc:	mov	r0, r3
      be:	b.w	75ce <FatFile::peek()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      c6:	b.w	5f7e <ExFatFile::peek()>
  }
      ca:	mov.w	r0, #4294967295
      ce:	bx	lr

000000d0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      d0:	ldr	r3, [r0, #72]	; 0x48
  int available() {
      d2:	push	{r4, lr}
      d4:	cbz	r3, ee <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      d6:	ldrb	r0, [r3, #0]
      d8:	ands.w	r0, r0, #8
      dc:	ittt	ne
      de:	ldrne	r0, [r3, #28]
      e0:	ldrne	r3, [r3, #20]
      e2:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
      e4:	cmp	r0, #0
      e6:	it	lt
      e8:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
      ec:	pop	{r4, pc}
      ee:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
      f0:	cmp	r0, #0
      f2:	beq.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      f4:	ldrb.w	r3, [r0, #49]	; 0x31
      f8:	ands.w	r3, r3, #8
      fc:	beq.n	11c <StreamFile<FsBaseFile, unsigned long long>::available()+0x4c>
      fe:	ldrd	r1, r3, [r0, #16]
     102:	ldrd	r2, r4, [r0]
     106:	subs	r0, r1, r2
     108:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     10c:	cmp.w	r0, #2147483648	; 0x80000000
     110:	sbcs.w	r3, r3, #0
     114:	it	cs
     116:	mvncs.w	r0, #2147483648	; 0x80000000
     11a:	b.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     11c:	mov	r0, r3
     11e:	b.n	10c <StreamFile<FsBaseFile, unsigned long long>::available()+0x3c>

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	c730 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	; (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	; 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	; (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	; (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	; (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x20010bd9
     154:	.word	0x20010bd8
     158:	.word	0x2001094c
     15c:	.word	0x2001096c

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r0, r1, r4, lr}
     16a:	mov	r4, r0
     16c:	cbz	r1, 188 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     16e:	mov	r0, r1
     170:	str	r1, [sp, #4]
     172:	bl	f580 <strlen>
     176:	ldr	r3, [r4, #0]
     178:	mov	r2, r0
     17a:	ldr	r1, [sp, #4]
     17c:	ldr	r3, [r3, #4]
     17e:	mov	r0, r4
     180:	add	sp, #8
     182:	ldmia.w	sp!, {r4, lr}
     186:	bx	r3
     188:	add	sp, #8
     18a:	pop	{r4, pc}

0000018c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     18c:	b.w	168 <Print::write(char const*) [clone .isra.0]>

00000190 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     190:	push	{r4, lr}
     192:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     194:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r4, lr}
     19e:	b.w	ca38 <Print::println()>
	...

000001a4 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     1a4:	push	{r3, r4, r5, lr}
     1a6:	ldr	r3, [pc, #48]	; (1d8 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
     1a8:	mov	r4, r0
class StreamFile : public stream_t, public BaseFile {
     1aa:	ldr	r5, [pc, #48]	; (1dc <MTPStorage_SD::~MTPStorage_SD()+0x38>)
     1ac:	str	r3, [r0, #0]
  ~FsBaseFile() {close();}
     1ae:	add.w	r0, r0, #344	; 0x158
     1b2:	str.w	r5, [r0, #-16]
     1b6:	bl	8a68 <FsBaseFile::close()>
     1ba:	add.w	r0, r4, #264	; 0x108
     1be:	str.w	r5, [r4, #248]	; 0xf8
     1c2:	bl	8a68 <FsBaseFile::close()>
     1c6:	add.w	r0, r4, #184	; 0xb8
     1ca:	str.w	r5, [r4, #168]	; 0xa8
     1ce:	bl	8a68 <FsBaseFile::close()>
     1d2:	mov	r0, r4
     1d4:	pop	{r3, r4, r5, pc}
     1d6:	nop
     1d8:	.word	0x20000444
     1dc:	.word	0x20000420

000001e0 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     1e0:	ldr	r3, [r0, #56]	; 0x38
     1e2:	cbz	r3, 1ea <FsBaseFile::write(void const*, unsigned int)+0xa>
     1e4:	mov	r0, r3
     1e6:	b.w	7ce8 <FatFile::write(void const*, unsigned int)>
     1ea:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1ec:	cbz	r0, 1f2 <FsBaseFile::write(void const*, unsigned int)+0x12>
     1ee:	b.w	6f34 <ExFatFile::write(void const*, unsigned int)>
  }
     1f2:	bx	lr

000001f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1f4:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1f6:	adds	r0, #16
     1f8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     1fc:	pop	{r3, pc}

000001fe <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1fe:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     200:	movs	r2, #1
     202:	strb.w	r1, [sp, #7]
     206:	add.w	r1, sp, #7
     20a:	adds	r0, #16
     20c:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     210:	add	sp, #12
     212:	ldr.w	pc, [sp], #4
	...

00000218 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     218:	ldr	r3, [pc, #36]	; (240 <resetUSB()+0x28>)
     21a:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     21c:	movs	r0, #100	; 0x64
  {
     21e:	push	{r4, lr}
    while(!Serial) mtpd.loop();
     220:	ldr	r4, [pc, #32]	; (244 <resetUSB()+0x2c>)
    USB1_USBCMD = 0;  // disconnect USB
     222:	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     226:	bl	bab4 <delay>
    usb_init();
     22a:	bl	179f8 <__usb_init_veneer>
    while(!Serial) mtpd.loop();
     22e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     232:	cbz	r0, 236 <resetUSB()+0x1e>
  }
     234:	pop	{r4, pc}
    while(!Serial) mtpd.loop();
     236:	mov	r0, r4
     238:	bl	4d64 <MTPD::loop()>
     23c:	b.n	22e <resetUSB()+0x16>
     23e:	nop
     240:	.word	0x402e0000
     244:	.word	0x20009b00

00000248 <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     248:	mov.w	r3, #3758153728	; 0xe000e000
     24c:	ldr	r2, [pc, #4]	; (254 <reboot()+0xc>)
     24e:	str.w	r2, [r3, #3340]	; 0xd0c
     252:	bx	lr
     254:	.word	0x05fa0004

00000258 <loop>:
{
     258:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     25c:	ldr	r6, [pc, #428]	; (40c <loop+0x1b4>)
{
     25e:	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     260:	ldr	r5, [pc, #428]	; (410 <loop+0x1b8>)
  loopCount++;
     262:	ldr	r3, [r6, #0]
     264:	ldr	r4, [pc, #428]	; (414 <loop+0x1bc>)
     266:	adds	r3, #1
     268:	str	r3, [r6, #0]
  nb = getDataCount();
     26a:	bl	260c <getDataCount()>
  if(nb>mxb) mxb=nb;
     26e:	ldrh	r3, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     270:	ldr	r2, [pc, #420]	; (418 <loop+0x1c0>)
  if(nb>mxb) mxb=nb;
     272:	cmp	r3, r0
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     274:	ldr	r3, [r2, #0]
  if(nb>mxb) mxb=nb;
     276:	it	cc
     278:	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     27a:	tst.w	r3, #1
     27e:	bne.n	294 <loop+0x3c>
     280:	ldr	r3, [pc, #408]	; (41c <loop+0x1c4>)
     282:	ldr	r3, [r3, #0]
     284:	cmp	r3, #1
     286:	mov.w	r3, #4294967295
     28a:	it	ne
     28c:	movne	r3, #0
     28e:	strh	r3, [r4, #0]
     290:	movs	r3, #1
     292:	str	r3, [r2, #0]
  status=menu(status);
     294:	ldrh	r0, [r4, #0]
     296:	sxth	r0, r0
     298:	bl	2520 <menu(short)>
     29c:	strh	r0, [r4, #0]
    if(status<0)
     29e:	ldrh	r3, [r4, #0]
     2a0:	lsls	r3, r3, #16
     2a2:	bpl.n	2aa <loop+0x52>
    { mtpd.loop();
     2a4:	ldr	r0, [pc, #376]	; (420 <loop+0x1c8>)
     2a6:	bl	4d64 <MTPD::loop()>
      if(status>0) digitalWriteFast(13,HIGH);    
     2aa:	ldrh	r3, [r4, #0]
     2ac:	sxth	r3, r3
     2ae:	cmp	r3, #0
     2b0:	ble.n	2ba <loop+0x62>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     2b2:	ldr	r3, [pc, #368]	; (424 <loop+0x1cc>)
     2b4:	movs	r2, #8
     2b6:	str.w	r2, [r3, #132]	; 0x84
      status=saveData(status);  
     2ba:	ldrh	r0, [r4, #0]
     2bc:	sxth	r0, r0
     2be:	bl	2f1c <saveData(short)>
     2c2:	strh	r0, [r4, #0]
      if(status>0) digitalWriteFast(13,LOW);
     2c4:	ldrh	r3, [r4, #0]
     2c6:	sxth	r3, r3
     2c8:	cmp	r3, #0
     2ca:	ble.n	2d4 <loop+0x7c>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     2cc:	ldr	r3, [pc, #340]	; (424 <loop+0x1cc>)
     2ce:	movs	r2, #8
     2d0:	str.w	r2, [r3, #136]	; 0x88
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     2d4:	ldr	r3, [pc, #336]	; (428 <loop+0x1d0>)
  if((t1=millis())>(t0+1000))
     2d6:	ldr	r7, [pc, #340]	; (42c <loop+0x1d4>)
     2d8:	ldr	r3, [r3, #0]
     2da:	str	r3, [sp, #28]
     2dc:	ldr	r3, [r7, #0]
     2de:	ldr	r2, [sp, #28]
     2e0:	add.w	r3, r3, #1000	; 0x3e8
     2e4:	cmp	r3, r2
     2e6:	bcs.n	3cc <loop+0x174>
    if(monitor)
     2e8:	ldr	r3, [pc, #324]	; (430 <loop+0x1d8>)
     2ea:	ldr.w	sl, [pc, #384]	; 46c <loop+0x214>
     2ee:	ldrsh.w	r3, [r3]
     2f2:	ldr.w	r9, [pc, #380]	; 470 <loop+0x218>
     2f6:	ldr.w	r8, [pc, #380]	; 474 <loop+0x21c>
     2fa:	cmp	r3, #0
     2fc:	beq.n	3b6 <loop+0x15e>
      rtc_get_datetime(&t);
     2fe:	add	r0, sp, #32
     300:	bl	3940 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     304:	ldrsb.w	r3, [sp, #36]	; 0x24
     308:	ldrsh.w	r2, [sp, #32]
     30c:	str	r3, [sp, #16]
     30e:	ldrsb.w	r3, [sp, #39]	; 0x27
     312:	ldr	r1, [pc, #288]	; (434 <loop+0x1dc>)
     314:	str	r3, [sp, #12]
     316:	ldrsb.w	r3, [sp, #38]	; 0x26
     31a:	ldr	r0, [pc, #284]	; (438 <loop+0x1e0>)
     31c:	str	r3, [sp, #8]
     31e:	ldrsb.w	r3, [sp, #37]	; 0x25
     322:	str	r3, [sp, #4]
     324:	ldrsb.w	r3, [sp, #35]	; 0x23
     328:	str	r3, [sp, #0]
     32a:	ldrsb.w	r3, [sp, #34]	; 0x22
     32e:	bl	ca70 <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     332:	ldr	r1, [pc, #264]	; (43c <loop+0x1e4>)
     334:	ldr	r0, [pc, #256]	; (438 <loop+0x1e0>)
     336:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     33a:	ldr	r1, [r6, #0]
     33c:	ldr	r0, [pc, #248]	; (438 <loop+0x1e0>)
     33e:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     342:	ldr	r1, [pc, #252]	; (440 <loop+0x1e8>)
     344:	ldr	r0, [pc, #240]	; (438 <loop+0x1e0>)
     346:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     34a:	ldr.w	r1, [sl]
     34e:	ldr	r0, [pc, #232]	; (438 <loop+0x1e0>)
     350:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     354:	ldr	r1, [pc, #232]	; (440 <loop+0x1e8>)
     356:	ldr	r0, [pc, #224]	; (438 <loop+0x1e0>)
     358:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     35c:	ldr.w	r1, [r9]
     360:	ldr	r0, [pc, #212]	; (438 <loop+0x1e0>)
     362:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     366:	ldr	r1, [pc, #216]	; (440 <loop+0x1e8>)
     368:	ldr	r0, [pc, #204]	; (438 <loop+0x1e0>)
     36a:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     36e:	ldrh	r2, [r5, #0]
     370:	ldr	r1, [pc, #208]	; (444 <loop+0x1ec>)
     372:	ldr	r0, [pc, #196]	; (438 <loop+0x1e0>)
     374:	bl	ca70 <Print::printf(char const*, ...)>
     378:	ldr	r1, [pc, #204]	; (448 <loop+0x1f0>)
     37a:	ldr	r0, [pc, #188]	; (438 <loop+0x1e0>)
     37c:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("  ; ");
     380:	ldr.w	r1, [r8]
     384:	ldr	r0, [pc, #176]	; (438 <loop+0x1e0>)
     386:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     38a:	ldr	r1, [pc, #192]	; (44c <loop+0x1f4>)
     38c:	ldr	r0, [pc, #168]	; (438 <loop+0x1e0>)
     38e:	bl	18c <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     392:	ldr	r3, [pc, #188]	; (450 <loop+0x1f8>)
     394:	ldrh	r4, [r3, #0]
     396:	sxth	r4, r4
     398:	cbnz	r4, 3d2 <loop+0x17a>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     39a:	ldr	r3, [pc, #184]	; (454 <loop+0x1fc>)
     39c:	ldr	r1, [pc, #184]	; (458 <loop+0x200>)
     39e:	ldr.w	fp, [pc, #152]	; 438 <loop+0x1e0>
     3a2:	ldr.w	r2, [r3, r4, lsl #2]
     3a6:	adds	r4, #1
     3a8:	mov	r0, fp
     3aa:	bl	ca70 <Print::printf(char const*, ...)>
     3ae:	cmp	r4, #8
     3b0:	ldr	r1, [pc, #164]	; (458 <loop+0x200>)
     3b2:	ldr	r3, [pc, #160]	; (454 <loop+0x1fc>)
     3b4:	bne.n	3a2 <loop+0x14a>
    loopCount=0;
     3b6:	movs	r3, #0
     3b8:	str	r3, [r6, #0]
    procCount=0;
     3ba:	str.w	r3, [sl]
    procMiss=0;
     3be:	str.w	r3, [r9]
    mxb=0;
     3c2:	strh	r3, [r5, #0]
    disk_count=0;
     3c4:	str.w	r3, [r8]
    t0=t1;
     3c8:	ldr	r3, [sp, #28]
     3ca:	str	r3, [r7, #0]
}
     3cc:	add	sp, #44	; 0x2c
     3ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3d2:	ldr.w	fp, [pc, #148]	; 468 <loop+0x210>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3d6:	movs	r4, #0
     3d8:	ldr	r1, [pc, #128]	; (45c <loop+0x204>)
     3da:	ldr	r3, [pc, #92]	; (438 <loop+0x1e0>)
     3dc:	adds	r4, #1
     3de:	mov	r0, r3
     3e0:	ldr.w	r2, [fp], #4
     3e4:	bl	ca70 <Print::printf(char const*, ...)>
     3e8:	cmp	r4, #24
     3ea:	ldr	r3, [pc, #76]	; (438 <loop+0x1e0>)
     3ec:	ldr	r1, [pc, #108]	; (45c <loop+0x204>)
     3ee:	bne.n	3dc <loop+0x184>
        Serial.printf("%2d",max_stat);
     3f0:	ldr	r4, [pc, #108]	; (460 <loop+0x208>)
     3f2:	mov	r0, r3
     3f4:	ldr	r1, [pc, #108]	; (464 <loop+0x20c>)
     3f6:	ldr	r2, [r4, #0]
     3f8:	bl	ca70 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     3fc:	movs	r2, #96	; 0x60
     3fe:	movs	r1, #0
     400:	ldr	r0, [pc, #100]	; (468 <loop+0x210>)
     402:	bl	a528 <memset>
        max_stat=0;        
     406:	movs	r3, #0
     408:	str	r3, [r4, #0]
     40a:	b.n	3b6 <loop+0x15e>
     40c:	.word	0x2000fc44
     410:	.word	0x20010998
     414:	.word	0x2001099a
     418:	.word	0x2000c1cc
     41c:	.word	0x20010960
     420:	.word	0x20009b00
     424:	.word	0x42004000
     428:	.word	0x2001094c
     42c:	.word	0x2000fc40
     430:	.word	0x200109a0
     434:	.word	0x2000803b
     438:	.word	0x20008a64
     43c:	.word	0x2000805c
     440:	.word	0x20008065
     444:	.word	0x20008060
     448:	.word	0x20008064
     44c:	.word	0x20008067
     450:	.word	0x200109a2
     454:	.word	0x200101d8
     458:	.word	0x2000806c
     45c:	.word	0x20008071
     460:	.word	0x200101f8
     464:	.word	0x20008076
     468:	.word	0x20010224
     46c:	.word	0x2001021c
     470:	.word	0x20010220
     474:	.word	0x20010164

00000478 <setup1()>:
{ 
     478:	push	{r4, lr}
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     47a:	ldr	r4, [pc, #44]	; (4a8 <setup1()+0x30>)
  Serial.println("Setup1");
     47c:	ldr	r1, [pc, #44]	; (4ac <setup1()+0x34>)
     47e:	ldr	r0, [pc, #48]	; (4b0 <setup1()+0x38>)
     480:	bl	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     484:	ldr	r3, [r4, #0]
     486:	cbz	r3, 4a0 <setup1()+0x28>
  i2s_setup();
     488:	bl	af0 <i2s_setup()>
  dma_setup();
     48c:	bl	b74 <dma_setup()>
  adc_init();
     490:	bl	33fc <adc_init()>
  Serial.println("Setup1 done");
     494:	ldr	r1, [pc, #28]	; (4b4 <setup1()+0x3c>)
     496:	ldr	r0, [pc, #24]	; (4b0 <setup1()+0x38>)
}
     498:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     49c:	b.w	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4a0:	movs	r0, #1
     4a2:	bl	bab4 <delay>
     4a6:	b.n	484 <setup1()+0xc>
     4a8:	.word	0x2001078c
     4ac:	.word	0x20007e50
     4b0:	.word	0x20008a64
     4b4:	.word	0x20007e57

000004b8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     4b8:	push	{r4, r5, r6, lr}
     4ba:	mov	r5, r0
     4bc:	ldr.w	r0, [r0, #1164]	; 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4c0:	cbnz	r0, 4e6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     4c2:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     4c4:	ldr.w	r0, [r5, #1152]	; 0x480
     4c8:	cbz	r0, 51c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     4ca:	bl	814c <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     4ce:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     4d0:	cbz	r6, 4e2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
     4d2:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     4d6:	cbz	r0, 4fc <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
     4d8:	ldr	r3, [r0, #0]
     4da:	movs	r1, #0
     4dc:	ldr	r3, [r3, #68]	; 0x44
     4de:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     4e0:	cbz	r0, 4fc <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
     4e2:	mov	r0, r4
     4e4:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4e6:	ldr	r3, [r0, #0]
     4e8:	ldr	r3, [r3, #60]	; 0x3c
     4ea:	blx	r3
     4ec:	cmp	r0, #0
     4ee:	beq.n	4c2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     4f0:	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     4f4:	cbnz	r0, 500 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     4f6:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
     4fa:	cbnz	r0, 50c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     4fc:	movs	r4, #0
     4fe:	b.n	4e2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     500:	ldr	r3, [r0, #0]
     502:	ldr	r3, [r3, #64]	; 0x40
     504:	blx	r3
     506:	cmp	r0, #0
     508:	bne.n	4c2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     50a:	b.n	4f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
     50c:	ldr	r3, [r0, #0]
     50e:	movs	r1, #1
     510:	ldr	r3, [r3, #68]	; 0x44
     512:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     514:	mov	r6, r0
     516:	cmp	r0, #0
     518:	bne.n	4c4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     51a:	b.n	4fc <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     51c:	ldr.w	r0, [r5, #1156]	; 0x484
     520:	cmp	r0, #0
     522:	beq.n	4ce <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     524:	bl	678e <ExFatPartition::freeClusterCount()>
     528:	b.n	4ce <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

0000052c <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     52c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spiConfigBackupPin = 255;
     530:	ldr	r4, [pc, #276]	; (648 <storage_configure()+0x11c>)
     532:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
     534:	movs	r1, #0
     536:	ldr	r6, [pc, #276]	; (64c <storage_configure()+0x120>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     538:	add.w	r5, r4, #1168	; 0x490
    spiConfigBackupPin = 255;
     53c:	strb.w	r3, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     540:	strb.w	r1, [r4, #1224]	; 0x4c8
     544:	mov	r0, r5
     546:	bl	9e84 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     54a:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     54c:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     550:	bl	9580 <SdioCard::errorCode() const>
     554:	cmp	r0, #0
     556:	bne.n	5fa <storage_configure()+0xce>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     558:	movs	r3, #1
     55a:	ldr.w	r1, [r4, #1164]	; 0x48c
     55e:	mov	r0, r4
     560:	mov	r2, r3
     562:	bl	8bc8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     566:	cmp	r0, #0
     568:	beq.n	5fa <storage_configure()+0xce>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     56a:	ldr	r3, [pc, #228]	; (650 <storage_configure()+0x124>)
     56c:	ldr	r2, [r3, #4]
     56e:	cmp	r2, #19
     570:	ble.n	616 <storage_configure()+0xea>
    return m_fVol ? m_fVol->clusterCount() :
     572:	ldr.w	r3, [r4, #1152]	; 0x480
     576:	cmp	r3, #0
     578:	beq.n	62a <storage_configure()+0xfe>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     57a:	ldr	r5, [r3, #28]
     57c:	subs	r5, #1
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     57e:	ldr	r0, [pc, #200]	; (648 <storage_configure()+0x11c>)
     580:	bl	4b8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     584:	ldr.w	r3, [r4, #1152]	; 0x480
     588:	mov	r7, r0
     58a:	cmp	r3, #0
     58c:	beq.n	638 <storage_configure()+0x10c>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     58e:	ldrb	r3, [r3, #6]
     590:	mov.w	r4, #512	; 0x200
     594:	lsls	r4, r3
     596:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     598:	ldr	r3, [r6, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     59a:	mov.w	r8, #10
     59e:	movs	r6, #0
     5a0:	movs	r2, #0
     5a2:	str	r3, [sp, #0]
     5a4:	movs	r3, #254	; 0xfe
     5a6:	ldr	r1, [pc, #172]	; (654 <storage_configure()+0x128>)
     5a8:	ldr	r0, [pc, #172]	; (658 <storage_configure()+0x12c>)
     5aa:	bl	ca70 <Print::printf(char const*, ...)>
            Serial.print("; total clusters: "); Serial.print(totalSize); 
     5ae:	ldr	r1, [pc, #172]	; (65c <storage_configure()+0x130>)
     5b0:	ldr	r0, [pc, #164]	; (658 <storage_configure()+0x12c>)
     5b2:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5b6:	mov	r2, r5
     5b8:	mov	r3, r6
     5ba:	ldr	r0, [pc, #156]	; (658 <storage_configure()+0x12c>)
     5bc:	strd	r8, r6, [sp]
     5c0:	bl	ca9e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" free clusters: "); Serial.print(freeSize);
     5c4:	ldr	r1, [pc, #152]	; (660 <storage_configure()+0x134>)
     5c6:	ldr	r0, [pc, #144]	; (658 <storage_configure()+0x12c>)
     5c8:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5cc:	mov	r2, r7
     5ce:	mov	r3, r6
     5d0:	ldr	r0, [pc, #132]	; (658 <storage_configure()+0x12c>)
     5d2:	strd	r8, r6, [sp]
     5d6:	bl	ca9e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5da:	ldr	r1, [pc, #136]	; (664 <storage_configure()+0x138>)
     5dc:	ldr	r0, [pc, #120]	; (658 <storage_configure()+0x12c>)
     5de:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5e2:	lsr.w	r1, r4, r8
     5e6:	ldr	r0, [pc, #112]	; (658 <storage_configure()+0x12c>)
     5e8:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     5ec:	ldr	r1, [pc, #120]	; (668 <storage_configure()+0x13c>)
     5ee:	ldr	r0, [pc, #104]	; (658 <storage_configure()+0x12c>)
        }
      }
  }
     5f0:	add	sp, #8
     5f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5f6:	b.w	190 <Print::println(char const*) [clone .isra.0]>
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     5fa:	ldr	r3, [r6, #0]
     5fc:	movs	r2, #0
     5fe:	ldr	r1, [pc, #108]	; (66c <storage_configure()+0x140>)
     600:	str	r3, [sp, #0]
     602:	movs	r3, #254	; 0xfe
     604:	ldr	r0, [pc, #80]	; (658 <storage_configure()+0x12c>)
     606:	bl	ca70 <Print::printf(char const*, ...)>
     60a:	ldr	r0, [pc, #76]	; (658 <storage_configure()+0x12c>)
  }
     60c:	add	sp, #8
     60e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     612:	b.w	ca38 <Print::println()>
          sd_name[fsCount] = name;
     616:	add.w	r1, r3, r2, lsl #2
     61a:	ldr	r0, [r6, #0]
     61c:	str	r0, [r1, #8]
          sdx[fsCount++] = &fs;
     61e:	adds	r1, r2, #1
     620:	str	r1, [r3, #4]
     622:	add.w	r3, r3, r2, lsl #2
     626:	str	r4, [r3, #88]	; 0x58
     628:	b.n	572 <storage_configure()+0x46>
     62a:	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     62e:	cmp	r5, #0
     630:	beq.n	57e <storage_configure()+0x52>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     632:	ldr.w	r5, [r5, #1072]	; 0x430
     636:	b.n	57e <storage_configure()+0x52>
     638:	ldr.w	r4, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     63c:	cmp	r4, #0
     63e:	beq.n	598 <storage_configure()+0x6c>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     640:	ldr.w	r4, [r4, #1084]	; 0x43c
     644:	b.n	598 <storage_configure()+0x6c>
     646:	nop
     648:	.word	0x200102bc
     64c:	.word	0x200093dc
     650:	.word	0x20010790
     654:	.word	0x20007c54
     658:	.word	0x20008a64
     65c:	.word	0x20007c6b
     660:	.word	0x20007c7e
     664:	.word	0x20007c8f
     668:	.word	0x20007c9e
     66c:	.word	0x20007c29

00000670 <_GLOBAL__sub_I_storage>:
  }
     670:	push	{r3, r4, r5, lr}
        fsCount = 0;
     672:	ldr	r5, [pc, #192]	; (734 <_GLOBAL__sub_I_storage+0xc4>)
     674:	movs	r4, #0
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     676:	ldr	r3, [pc, #192]	; (738 <_GLOBAL__sub_I_storage+0xc8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     678:	mov.w	r2, #1000	; 0x3e8
  MTPStorage_SD storage;
     67c:	ldr	r1, [pc, #188]	; (73c <_GLOBAL__sub_I_storage+0xcc>)
     67e:	mov	r0, r5
     680:	str	r3, [r5, #0]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     682:	ldr	r3, [pc, #188]	; (740 <_GLOBAL__sub_I_storage+0xd0>)
     684:	str.w	r2, [r5, #176]	; 0xb0
     688:	str.w	r3, [r5, #168]	; 0xa8
     68c:	str.w	r3, [r5, #248]	; 0xf8
     690:	str.w	r3, [r5, #328]	; 0x148
     694:	mvn.w	r3, #1
        fsCount = 0;
     698:	str	r4, [r5, #4]
	constexpr Print() : write_error(0) {}
     69a:	str.w	r4, [r5, #172]	; 0xac
     69e:	strb.w	r4, [r5, #180]	; 0xb4
     6a2:	strb.w	r4, [r5, #260]	; 0x104
     6a6:	strb.w	r4, [r5, #340]	; 0x154
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6aa:	str.w	r4, [r5, #416]	; 0x1a0
     6ae:	strh.w	r4, [r5, #428]	; 0x1ac
     6b2:	strd	r4, r2, [r5, #252]	; 0xfc
     6b6:	strd	r4, r2, [r5, #332]	; 0x14c
     6ba:	ldr	r2, [pc, #136]	; (744 <_GLOBAL__sub_I_storage+0xd4>)
     6bc:	strd	r3, r4, [r5, #420]	; 0x1a4
  FsBaseFile() {}
     6c0:	strd	r4, r4, [r5, #240]	; 0xf0
     6c4:	strd	r4, r4, [r5, #320]	; 0x140
     6c8:	strd	r4, r4, [r5, #400]	; 0x190
     6cc:	strd	r4, r4, [r5, #408]	; 0x198
     6d0:	bl	cc60 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     6d4:	ldr	r3, [pc, #112]	; (748 <_GLOBAL__sub_I_storage+0xd8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     6d6:	ldr	r1, [pc, #116]	; (74c <_GLOBAL__sub_I_storage+0xdc>)
  SdFs sdx[nsd];
     6d8:	mov	r0, r4
     6da:	str	r5, [r3, #0]
     6dc:	add.w	r3, r3, #8192	; 0x2000
     6e0:	ldr	r2, [pc, #96]	; (744 <_GLOBAL__sub_I_storage+0xd4>)
     6e2:	str.w	r4, [r3, #1056]	; 0x420
     6e6:	strb.w	r4, [r3, #1060]	; 0x424
     6ea:	str.w	r4, [r3, #1064]	; 0x428
  FsVolume() {}
     6ee:	ldr	r3, [pc, #96]	; (750 <_GLOBAL__sub_I_storage+0xe0>)
     6f0:	str.w	r1, [r3, #1168]	; 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     6f4:	ldr	r1, [pc, #92]	; (754 <_GLOBAL__sub_I_storage+0xe4>)
     6f6:	str.w	r4, [r3, #1152]	; 0x480
     6fa:	str.w	r1, [r3, #1188]	; 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     6fe:	movs	r1, #7
     700:	str.w	r4, [r3, #1156]	; 0x484
     704:	str.w	r1, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     708:	movs	r1, #41	; 0x29
class SdBase : public Vol {
     70a:	str.w	r4, [r3, #1164]	; 0x48c
     70e:	strb.w	r1, [r3, #1197]	; 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     712:	ldr	r1, [pc, #68]	; (758 <_GLOBAL__sub_I_storage+0xe8>)
  SdioConfig() {}
     714:	strh.w	r4, [r3, #1176]	; 0x498
     718:	str.w	r1, [r3, #1180]	; 0x49c
  SharedSpiCard() {}
     71c:	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     720:	strb.w	r4, [r3, #1208]	; 0x4b8
     724:	strb.w	r4, [r3, #1224]	; 0x4c8
     728:	ldr	r1, [pc, #48]	; (75c <_GLOBAL__sub_I_storage+0xec>)
  }
     72a:	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     72e:	b.w	cc60 <__aeabi_atexit>
     732:	nop
     734:	.word	0x20010790
     738:	.word	0x20000444
     73c:	.word	0x000001a5
     740:	.word	0x20000548
     744:	.word	0x20008e40
     748:	.word	0x20009b00
     74c:	.word	0x20000590
     750:	.word	0x200102bc
     754:	.word	0x003d0900
     758:	.word	0x200004b0
     75c:	.word	0x0000006d

00000760 <setup>:
{
     760:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     762:	ldr	r5, [pc, #304]	; (894 <setup+0x134>)
     764:	sub	sp, #28
    set_arm_clock(48'000'000);
     766:	ldr	r0, [pc, #304]	; (898 <setup+0x138>)
				if (elapsed > 750) break;
     768:	movw	r7, #750	; 0x2ee
     76c:	bl	ad6c <set_arm_clock>
			if (usb_configuration) {
     770:	ldr	r6, [pc, #296]	; (89c <setup+0x13c>)
		uint32_t millis_begin = systick_millis_count;
     772:	ldr	r4, [r5, #0]
		while (!(*this)) {
     774:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     778:	cbz	r0, 7a0 <setup+0x40>
  uint16_t *params=loadParameters();
     77a:	bl	2118 <loadParameters()>
  if(params[0]==1)
     77e:	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     780:	mov	r4, r0
  if(params[0]==1)
     782:	cmp	r3, #1
     784:	beq.n	7b8 <setup+0x58>
    while(millis()<10'000) if(Serial) { termon=1; break;}
     786:	movw	r6, #9999	; 0x270f
     78a:	ldr	r3, [r5, #0]
     78c:	cmp	r3, r6
     78e:	bhi.n	7cc <setup+0x6c>
     790:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     794:	cmp	r0, #0
     796:	beq.n	78a <setup+0x2a>
     798:	ldr	r3, [pc, #260]	; (8a0 <setup+0x140>)
     79a:	movs	r2, #1
     79c:	str	r2, [r3, #0]
     79e:	b.n	7cc <setup+0x6c>
			uint32_t elapsed = systick_millis_count - millis_begin;
     7a0:	ldr	r3, [r5, #0]
			if (usb_configuration) {
     7a2:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     7a4:	subs	r3, r3, r4
			if (usb_configuration) {
     7a6:	cbz	r2, 7b4 <setup+0x54>
				if (elapsed > 2000) break;
     7a8:	cmp.w	r3, #2000	; 0x7d0
				if (elapsed > 750) break;
     7ac:	bhi.n	77a <setup+0x1a>
			yield();
     7ae:	bl	c730 <yield>
     7b2:	b.n	774 <setup+0x14>
				if (elapsed > 750) break;
     7b4:	cmp	r3, r7
     7b6:	b.n	7ac <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     7b8:	ldr	r3, [pc, #232]	; (8a4 <setup+0x144>)
     7ba:	ldr	r2, [pc, #236]	; (8a8 <setup+0x148>)
     7bc:	ldr	r3, [r3, #0]
     7be:	ldr	r2, [r2, #0]
     7c0:	cmp	r3, r2
     7c2:	ldr	r2, [pc, #220]	; (8a0 <setup+0x140>)
     7c4:	ite	hi
     7c6:	movhi	r3, #0
     7c8:	movls	r3, #1
     7ca:	str	r3, [r2, #0]
  Serial.println(version);
     7cc:	ldr	r1, [pc, #220]	; (8ac <setup+0x14c>)
     7ce:	ldr	r0, [pc, #224]	; (8b0 <setup+0x150>)
     7d0:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.print("params[0] = "); Serial.println(params[0]);
     7d4:	ldr	r1, [pc, #220]	; (8b4 <setup+0x154>)
     7d6:	ldr	r0, [pc, #216]	; (8b0 <setup+0x150>)
     7d8:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     7dc:	ldrh	r1, [r4, #0]
     7de:	ldr	r0, [pc, #208]	; (8b0 <setup+0x150>)
     7e0:	bl	ca26 <Print::print(long)>
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     7e4:	ldr	r0, [pc, #200]	; (8b0 <setup+0x150>)
     7e6:	bl	ca38 <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     7ea:	ldr	r0, [pc, #204]	; (8b8 <setup+0x158>)
     7ec:	bl	17a08 <___ZN16CrashReportClasscvbEv_veneer>
     7f0:	cbz	r0, 7fa <setup+0x9a>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     7f2:	ldr	r1, [pc, #188]	; (8b0 <setup+0x150>)
     7f4:	ldr	r0, [pc, #192]	; (8b8 <setup+0x158>)
     7f6:	bl	179f0 <___ZNK16CrashReportClass7printToER5Print_veneer>
  usbPowerSetup();
     7fa:	bl	33b8 <usbPowerSetup()>
  storage_configure();
     7fe:	bl	52c <storage_configure()>
  Serial.println("rtcSetup");
     802:	ldr	r1, [pc, #184]	; (8bc <setup+0x15c>)
     804:	ldr	r0, [pc, #168]	; (8b0 <setup+0x150>)
     806:	bl	190 <Print::println(char const*) [clone .isra.0]>
  rtcSetup();
     80a:	movs	r1, #19
     80c:	movs	r0, #18
     80e:	bl	3900 <rtcSetup(unsigned char, unsigned char)>
  rtcSync();
     812:	bl	3a08 <rtcSync()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     816:	add	r0, sp, #16
     818:	bl	3940 <rtc_get_datetime(datetime_t*)>
     81c:	cbnz	r0, 826 <setup+0xc6>
     81e:	ldr	r1, [pc, #160]	; (8c0 <setup+0x160>)
     820:	ldr	r0, [pc, #140]	; (8b0 <setup+0x150>)
     822:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     826:	ldrsb.w	r3, [sp, #23]
  setup_ready=1;
     82a:	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     82c:	ldrsh.w	r2, [sp, #16]
     830:	str	r3, [sp, #12]
     832:	ldrsb.w	r3, [sp, #22]
     836:	ldr	r1, [pc, #140]	; (8c4 <setup+0x164>)
     838:	str	r3, [sp, #8]
     83a:	ldrsb.w	r3, [sp, #21]
     83e:	ldr	r0, [pc, #112]	; (8b0 <setup+0x150>)
     840:	str	r3, [sp, #4]
     842:	ldrsb.w	r3, [sp, #19]
     846:	str	r3, [sp, #0]
     848:	ldrsb.w	r3, [sp, #18]
     84c:	bl	ca70 <Print::printf(char const*, ...)>
  Serial.println();
     850:	ldr	r0, [pc, #92]	; (8b0 <setup+0x150>)
     852:	bl	ca38 <Print::println()>
  Serial.print("RV3028: ");
     856:	ldr	r1, [pc, #112]	; (8c8 <setup+0x168>)
     858:	ldr	r0, [pc, #84]	; (8b0 <setup+0x150>)
     85a:	bl	18c <Print::print(char const*) [clone .isra.0]>
  Serial.println(rtcGetTimestamp());
     85e:	bl	3a30 <rtcGetTimestamp()>
     862:	mov	r1, r0
     864:	ldr	r0, [pc, #72]	; (8b0 <setup+0x150>)
     866:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.println("filing_init");
     86a:	ldr	r1, [pc, #96]	; (8cc <setup+0x16c>)
     86c:	ldr	r0, [pc, #64]	; (8b0 <setup+0x150>)
     86e:	bl	190 <Print::println(char const*) [clone .isra.0]>
  filing_init();
     872:	bl	302c <filing_init()>
  setup_ready=1;
     876:	ldr	r3, [pc, #88]	; (8d0 <setup+0x170>)
  Serial.println("Setup done");
     878:	ldr	r1, [pc, #88]	; (8d4 <setup+0x174>)
     87a:	ldr	r0, [pc, #52]	; (8b0 <setup+0x150>)
  setup_ready=1;
     87c:	str	r4, [r3, #0]
  Serial.println("Setup done");
     87e:	bl	190 <Print::println(char const*) [clone .isra.0]>
    setup1();
     882:	bl	478 <setup1()>
    pinMode(13,OUTPUT);
     886:	mov	r1, r4
     888:	movs	r0, #13
     88a:	bl	c244 <pinMode>
}
     88e:	add	sp, #28
     890:	pop	{r4, r5, r6, r7, pc}
     892:	nop
     894:	.word	0x2001094c
     898:	.word	0x02dc6c00
     89c:	.word	0x20010bd9
     8a0:	.word	0x20010960
     8a4:	.word	0x2001095c
     8a8:	.word	0x200093f0
     8ac:	.word	0x20007ee4
     8b0:	.word	0x20008a64
     8b4:	.word	0x2000807a
     8b8:	.word	0x20008a58
     8bc:	.word	0x20008087
     8c0:	.word	0x20008090
     8c4:	.word	0x200080a5
     8c8:	.word	0x200080cc
     8cc:	.word	0x200080d5
     8d0:	.word	0x2001078c
     8d4:	.word	0x200080e1

000008d8 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     8d8:	push	{r4, lr}
     8da:	mov	r4, r0
		release();
     8dc:	bl	c89c <DMAChannel::release()>
	}
     8e0:	mov	r0, r4
     8e2:	pop	{r4, pc}

000008e4 <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     8e4:	push	{r3, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     8e6:	ldr	r3, [pc, #140]	; (974 <acq_isr()+0x90>)
     8e8:	ldr	r2, [r3, #0]
     8ea:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     8ec:	ldrb	r2, [r3, #4]
     8ee:	ldr	r3, [pc, #136]	; (978 <acq_isr()+0x94>)
     8f0:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     8f2:	ldr	r2, [pc, #136]	; (97c <acq_isr()+0x98>)
    }
    else
    {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
     8f4:	sub.w	r3, r2, #2048	; 0x800
     8f8:	cmp	r1, r2
     8fa:	it	cc
     8fc:	movcc	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     8fe:	mov	r1, r3
	asm("dsb");
     900:	dsb	sy
     904:	add.w	r0, r3, #32
	uint32_t end_addr = (uint32_t)addr + size;
     908:	add.w	r2, r3, #2048	; 0x800
     90c:	cmp	r2, r0
     90e:	ite	cc
     910:	movcc	r2, #1
     912:	movcs	r2, #64	; 0x40
		SCB_CACHE_DCIMVAC = location;
     914:	mov.w	r0, #3758153728	; 0xe000e000
     918:	add.w	r2, r3, r2, lsl #5
     91c:	str.w	r1, [r0, #3932]	; 0xf5c
		location += 32;
     920:	adds	r1, #32
	} while (location < end_addr);
     922:	cmp	r1, r2
     924:	bne.n	91c <acq_isr()+0x38>
	asm("dsb");
     926:	dsb	sy
	asm("isb");
     92a:	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>SHIFT;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     92e:	ldr	r1, [pc, #80]	; (980 <acq_isr()+0x9c>)
     930:	ldr	r2, [r1, #0]
     932:	adds	r2, #1
     934:	str	r2, [r1, #0]
     936:	movs	r2, #0
     938:	ldr	r1, [pc, #72]	; (984 <acq_isr()+0xa0>)
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>SHIFT;   
     93a:	ldr.w	r0, [r3, r2, lsl #2]
     93e:	adds	r2, #4
     940:	cmp.w	r2, #512	; 0x200
     944:	str.w	r0, [r1], #4
     948:	bne.n	93a <acq_isr()+0x56>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     94a:	ldr	r2, [pc, #60]	; (988 <acq_isr()+0xa4>)
     94c:	ldrh	r3, [r2, #0]
     94e:	sxth	r3, r3
     950:	cbnz	r3, 964 <acq_isr()+0x80>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     952:	ldr	r0, [pc, #48]	; (984 <acq_isr()+0xa0>)
     954:	bl	2634 <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     958:	cbnz	r0, 962 <acq_isr()+0x7e>
     95a:	ldr	r2, [pc, #48]	; (98c <acq_isr()+0xa8>)
     95c:	ldr	r3, [r2, #0]
     95e:	adds	r3, #1
     960:	str	r3, [r2, #0]
  }
     962:	pop	{r3, pc}
  else if(proc==1)
     964:	ldrh	r3, [r2, #0]
     966:	sxth	r3, r3
     968:	cmp	r3, #1
     96a:	bne.n	962 <acq_isr()+0x7e>
   if(!compress((void *)acqBuffer)) procMiss++;
     96c:	ldr	r0, [pc, #20]	; (984 <acq_isr()+0xa0>)
     96e:	bl	30e0 <compress(void*)>
     972:	b.n	958 <acq_isr()+0x74>
     974:	.word	0x2000f3dc
     978:	.word	0x400e8000
     97c:	.word	0x20200800
     980:	.word	0x2001021c
     984:	.word	0x2000ff64
     988:	.word	0x200109a2
     98c:	.word	0x20010220

00000990 <setAudioFrequency(int)>:
  {
     990:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     994:	ldr.w	r9, [pc, #332]	; ae4 <setAudioFrequency(int)+0x154>
     998:	movs	r2, #5
     99a:	mov	r5, r0
     99c:	ldr	r1, [pc, #312]	; (ad8 <setAudioFrequency(int)+0x148>)
     99e:	ldr.w	r3, [r9]
     9a2:	mov	r0, r9
     9a4:	ldr	r3, [r3, #4]
     9a6:	vpush	{d8}
     9aa:	sub	sp, #12
     9ac:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     9ae:	mov.w	r1, #256	; 0x100
     9b2:	mov	r0, r9
     9b4:	bl	ca26 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     9b8:	mov	r0, r9
     9ba:	bl	ca38 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     9be:	movs	r3, #26
     9c0:	lsls	r1, r5, #8
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9c2:	ldr	r0, [pc, #280]	; (adc <setAudioFrequency(int)+0x14c>)
    {   n0++;
     9c4:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9c6:	mov	r2, r1
        n1=0;
     9c8:	movs	r4, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9ca:	mul.w	ip, r0, r3
        {   n1++; 
     9ce:	mov	r6, r4
     9d0:	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9d2:	sdiv	r8, ip, r2
     9d6:	add.w	r7, r8, #1
        } while ((n2>64) && (n1<=8));
     9da:	cmp	r7, #64	; 0x40
     9dc:	ble.n	9ea <setAudioFrequency(int)+0x5a>
     9de:	cmp	r4, #9
     9e0:	add	r2, r1
     9e2:	bne.n	9ce <setAudioFrequency(int)+0x3e>
    } while ((n2>64 && n0<54));
     9e4:	cmp	r3, #54	; 0x36
     9e6:	bne.n	9c4 <setAudioFrequency(int)+0x34>
     9e8:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9ea:	mov	r2, r5
     9ec:	ldr	r1, [pc, #240]	; (ae0 <setAudioFrequency(int)+0x150>)
     9ee:	ldr	r0, [pc, #244]	; (ae4 <setAudioFrequency(int)+0x154>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     9f0:	and.w	r8, r8, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     9f4:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9f6:	strd	r4, r7, [sp]
     9fa:	bl	ca70 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     9fe:	vmov	s15, r5
							  return write((const uint8_t *)str, strlen(str)); }
     a02:	ldr.w	r3, [r9]
     a06:	movs	r2, #3
     a08:	vcvt.f64.s32	d7, s15
     a0c:	ldr	r1, [pc, #216]	; (ae8 <setAudioFrequency(int)+0x158>)
     a0e:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a10:	and.w	r6, r6, #448	; 0x1c0
     a14:	ldr	r0, [pc, #204]	; (ae4 <setAudioFrequency(int)+0x154>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a16:	vldr	d6, [pc, #168]	; ac0 <setAudioFrequency(int)+0x130>
     a1a:	vmul.f64	d7, d7, d6
     a1e:	vmov	s13, r4
     a22:	vcvt.f64.s32	d6, s13
     a26:	vmul.f64	d7, d7, d6
     a2a:	vmov	s13, r7
     a2e:	vcvt.f64.s32	d6, s13
     a32:	vmul.f64	d7, d7, d6
     a36:	vldr	d6, [pc, #144]	; ac8 <setAudioFrequency(int)+0x138>
     a3a:	vdiv.f64	d8, d7, d6
     a3e:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a40:	movs	r1, #2
     a42:	ldr	r0, [pc, #160]	; (ae4 <setAudioFrequency(int)+0x154>)
     a44:	vmov.f64	d0, d8
     a48:	bl	cb30 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     a4c:	ldr	r0, [pc, #148]	; (ae4 <setAudioFrequency(int)+0x154>)
     a4e:	bl	ca38 <Print::println()>
    int c0 = C;
     a52:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     a56:	movw	r2, #10000	; 0x2710
    int c0 = C;
     a5a:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     a5e:	mul.w	r3, r2, r0
     a62:	vmov	s14, r3
     a66:	vldr	d6, [pc, #104]	; ad0 <setAudioFrequency(int)+0x140>
     a6a:	vcvt.f64.s32	d7, s14
     a6e:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     a72:	vcvt.s32.f64	s15, d7
     a76:	vmov	r1, s15
     a7a:	bl	179d8 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a7e:	ldr	r2, [pc, #108]	; (aec <setAudioFrequency(int)+0x15c>)
     a80:	ldr	r3, [r2, #28]
     a82:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     a86:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a8a:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a8c:	ldr	r3, [r2, #40]	; 0x28
     a8e:	bic.w	r3, r3, #510	; 0x1fe
     a92:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     a96:	orr.w	r3, r3, r8
     a9a:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a9c:	str	r3, [r2, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     a9e:	sub.w	r2, r2, #327680	; 0x50000
     aa2:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     aa4:	bic.w	r3, r3, #524288	; 0x80000
     aa8:	bic.w	r3, r3, #7
     aac:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     ab0:	str	r3, [r2, #4]
  }
     ab2:	add	sp, #12
     ab4:	vpop	{d8}
     ab8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     abc:	nop.w
     ac0:	.word	0x00000000
     ac4:	.word	0x40700000
     ac8:	.word	0x00000000
     acc:	.word	0x4176e360
     ad0:	.word	0x00000000
     ad4:	.word	0x40c38800
     ad8:	.word	0x20007c02
     adc:	.word	0x016e3600
     ae0:	.word	0x20007c08
     ae4:	.word	0x20008a64
     ae8:	.word	0x20007c25
     aec:	.word	0x400fc000

00000af0 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     af0:	ldr	r2, [pc, #100]	; (b58 <i2s_setup()+0x68>)
     af2:	ldr	r3, [r2, #124]	; 0x7c
  {
     af4:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     af6:	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     afa:	ldr	r4, [pc, #96]	; (b5c <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     afc:	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     afe:	ldr.w	r3, [r4, #136]	; 0x88
     b02:	cmp	r3, #0
     b04:	blt.n	b56 <i2s_setup()+0x66>
    int fs = fsamp;
     b06:	ldr	r3, [pc, #88]	; (b60 <i2s_setup()+0x70>)
     b08:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     b0a:	bl	990 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     b0e:	ldr	r3, [pc, #84]	; (b64 <i2s_setup()+0x74>)
     b10:	movs	r2, #3
     b12:	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     b16:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     b1a:	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     b1e:	str.w	r2, [r3, #380]	; 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     b22:	movs	r2, #2
     b24:	str.w	r2, [r3, #1428]	; 0x594
    I2S1_RMR = 0;
     b28:	movs	r3, #0
     b2a:	str.w	r3, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     b2e:	movs	r3, #4
     b30:	str.w	r3, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     b34:	mov.w	r3, #83886080	; 0x5000000
     b38:	str.w	r3, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     b3c:	mov.w	r3, #65536	; 0x10000
     b40:	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     b44:	ldr	r3, [pc, #32]	; (b68 <i2s_setup()+0x78>)
     b46:	str.w	r3, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     b4a:	ldr	r3, [pc, #32]	; (b6c <i2s_setup()+0x7c>)
     b4c:	str.w	r3, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     b50:	ldr	r3, [pc, #28]	; (b70 <i2s_setup()+0x80>)
     b52:	str.w	r3, [r4, #136]	; 0x88
  }
     b56:	pop	{r4, pc}
     b58:	.word	0x400fc000
     b5c:	.word	0x40384000
     b60:	.word	0x200093d0
     b64:	.word	0x401f8000
     b68:	.word	0x0003001b
     b6c:	.word	0x1f1f1f00
     b70:	.word	0x92000001

00000b74 <dma_setup()>:
  {
     b74:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     b76:	ldr	r4, [pc, #128]	; (bf8 <dma_setup()+0x84>)
     b78:	movs	r1, #1
     b7a:	mov	r0, r4
     b7c:	bl	c800 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b80:	ldr	r3, [r4, #0]
     b82:	ldr	r2, [pc, #120]	; (bfc <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b84:	ldr	r1, [pc, #120]	; (c00 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b86:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b88:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     b8a:	ldr	r0, [pc, #120]	; (c04 <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     b8c:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     b8e:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     b90:	ldr	r0, [pc, #116]	; (c08 <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b92:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b96:	mov.w	r2, #1024	; 0x400
    dma.TCD->SLAST = 0;
     b9a:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b9c:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     b9e:	sub.w	r2, r2, #5120	; 0x1400
    dma.TCD->SLAST = 0;
     ba2:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     ba4:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     ba6:	ldrh	r2, [r3, #22]
     ba8:	uxth	r2, r2
     baa:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     bac:	movs	r2, #6
     bae:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     bb0:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bb2:	ldr	r2, [pc, #88]	; (c0c <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     bb4:	lsls	r3, r3, #2
     bb6:	add.w	r3, r3, #1073741824	; 0x40000000
     bba:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     bbe:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bc0:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     bc2:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     bc4:	ldr	r2, [pc, #72]	; (c10 <dma_setup()+0x9c>)
     bc6:	add.w	r1, r3, #16
     bca:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bce:	asrs	r2, r3, #5
     bd0:	and.w	r0, r3, #31
     bd4:	movs	r1, #1
     bd6:	add.w	r2, r2, #939538432	; 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bda:	add.w	r3, r3, #3758096384	; 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bde:	lsls	r1, r0
     be0:	adds	r2, #64	; 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     be2:	add.w	r3, r3, #58368	; 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     be6:	lsls	r2, r2, #2
     be8:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bea:	movs	r2, #96	; 0x60
     bec:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     bee:	ldr	r3, [pc, #36]	; (c14 <dma_setup()+0xa0>)
     bf0:	ldrb	r2, [r4, #4]
     bf2:	strb	r2, [r3, #27]
  }
     bf4:	pop	{r4, pc}
     bf6:	nop
     bf8:	.word	0x2000f3dc
     bfc:	.word	0x403840a0
     c00:	.word	0x02020000
     c04:	.word	0x20200000
     c08:	.word	0x000008e5
     c0c:	.word	0x80000013
     c10:	.word	0x20009800
     c14:	.word	0x400e8000

00000c18 <acqModifyFrequency(unsigned long)>:
  {
     c18:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     c1a:	ldr	r4, [pc, #32]	; (c3c <acqModifyFrequency(unsigned long)+0x24>)
     c1c:	ldr.w	r3, [r4, #136]	; 0x88
     c20:	bic.w	r3, r3, #2415919104	; 0x90000000
     c24:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     c28:	bl	990 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     c2c:	ldr.w	r3, [r4, #136]	; 0x88
     c30:	orr.w	r3, r3, #2415919104	; 0x90000000
     c34:	str.w	r3, [r4, #136]	; 0x88
  }
     c38:	pop	{r4, pc}
     c3a:	nop
     c3c:	.word	0x40384000

00000c40 <_GLOBAL__sub_I_procCount>:
		begin();
     c40:	ldr	r0, [pc, #20]	; (c58 <_GLOBAL__sub_I_procCount+0x18>)
     c42:	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     c44:	push	{r3, lr}
     c46:	bl	c800 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     c4a:	ldr	r2, [pc, #16]	; (c5c <_GLOBAL__sub_I_procCount+0x1c>)
     c4c:	ldr	r1, [pc, #16]	; (c60 <_GLOBAL__sub_I_procCount+0x20>)
     c4e:	ldr	r0, [pc, #8]	; (c58 <_GLOBAL__sub_I_procCount+0x18>)
}
     c50:	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     c54:	b.w	cc60 <__aeabi_atexit>
     c58:	.word	0x2000f3dc
     c5c:	.word	0x20008e40
     c60:	.word	0x000008d9

00000c64 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c64:	ldr	r3, [r0, #4]
     c66:	cmp	r3, #19
{ 
public:
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c68:	push	{r4, lr}
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c6a:	bgt.n	c78 <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x14>
          sd_name[fsCount] = name;
     c6c:	add.w	r4, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
     c70:	adds	r3, #1
          sd_name[fsCount] = name;
     c72:	str	r2, [r4, #8]
          sdx[fsCount++] = &fs;
     c74:	str	r3, [r0, #4]
     c76:	str	r1, [r4, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c78:	pop	{r4, pc}

00000c7a <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
     c7a:	ldr	r0, [r0, #4]
     c7c:	bx	lr

00000c7e <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
     c7e:	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
     c82:	ldr	r0, [r1, #8]
     c84:	bx	lr

00000c86 <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
     c86:	movs	r0, #0
     c88:	bx	lr

00000c8a <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
     c8a:	movs	r0, #1
     c8c:	bx	lr

00000c8e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     c8e:	push	{r4}
    *name = 0;
     c90:	movs	r4, #0
     c92:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     c94:	ldr	r3, [r0, #56]	; 0x38
     c96:	cbz	r3, ca2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
     c98:	mov	r0, r3
  }
     c9a:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     c9e:	b.w	72f0 <FatFile::getName(char*, unsigned int)>
     ca2:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     ca4:	cbz	r0, cae <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     ca6:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     caa:	b.w	5bf4 <ExFatFile::getName8(char*, unsigned int)>
     cae:	ldr.w	r4, [sp], #4
     cb2:	bx	lr

00000cb4 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cb4:	push	{r4, lr}
     cb6:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     cb8:	movs	r3, #0
     cba:	movs	r2, #10
     cbc:	bl	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cc0:	mov	r0, r4
     cc2:	ldmia.w	sp!, {r4, lr}
     cc6:	b.w	ca38 <Print::println()>

00000cca <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cca:	push	{r0, r1, r4, lr}
     ccc:	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
     cce:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cd0:	cbz	r1, cea <Print::write(char const*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     cd2:	str	r1, [sp, #4]
     cd4:	bl	f580 <strlen>
     cd8:	ldr	r3, [r4, #0]
     cda:	mov	r2, r0
     cdc:	ldr	r1, [sp, #4]
     cde:	mov	r0, r4
     ce0:	ldr	r3, [r3, #4]
     ce2:	add	sp, #8
     ce4:	ldmia.w	sp!, {r4, lr}
     ce8:	bx	r3
     cea:	add	sp, #8
     cec:	pop	{r4, pc}
	...

00000cf0 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
     cf0:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     cf2:	ldr	r4, [pc, #44]	; (d20 <dbgPrint(unsigned short)+0x30>)
     cf4:	mov	r5, r0
     cf6:	ldr	r1, [pc, #44]	; (d24 <dbgPrint(unsigned short)+0x34>)
     cf8:	mov	r0, r4
     cfa:	bl	cca <Print::write(char const*)>
     cfe:	ldr	r1, [pc, #40]	; (d28 <dbgPrint(unsigned short)+0x38>)
     d00:	mov	r0, r4
     d02:	bl	cca <Print::write(char const*)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     d06:	movs	r0, #46	; 0x2e
     d08:	bl	ac74 <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     d0c:	mov	r1, r5
     d0e:	mov	r0, r4
     d10:	bl	ca26 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     d14:	mov	r0, r4
  }
     d16:	ldmia.w	sp!, {r3, r4, r5, lr}
     d1a:	b.w	ca38 <Print::println()>
     d1e:	nop
     d20:	.word	0x20008a64
     d24:	.word	0x20007f34
     d28:	.word	0x20007f3f

00000d2c <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
     d2c:	push	{r3, r4, r5, lr}
     d2e:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
     d30:	bl	cca <Print::write(char const*)>
     d34:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
     d36:	mov	r0, r5
     d38:	bl	ca38 <Print::println()>
     d3c:	add	r0, r4
     d3e:	pop	{r3, r4, r5, pc}

00000d40 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     d40:	ldr.w	r3, [r0, #1152]	; 0x480
     d44:	cbz	r3, d52 <FsVolume::bytesPerCluster() const+0x12>
     d46:	ldrb	r3, [r3, #6]
     d48:	mov.w	r0, #512	; 0x200
     d4c:	lsls	r0, r3
     d4e:	uxth	r0, r0
     d50:	bx	lr
     d52:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     d56:	cbz	r0, d5c <FsVolume::bytesPerCluster() const+0x1c>
     d58:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
     d5c:	bx	lr

00000d5e <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     d5e:	ldr.w	r3, [r0, #1152]	; 0x480
     d62:	cbz	r3, d6a <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     d64:	ldr	r0, [r3, #28]
     d66:	subs	r0, #1
     d68:	bx	lr
     d6a:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     d6e:	cbz	r0, d74 <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     d70:	ldr.w	r0, [r0, #1072]	; 0x430
  }
     d74:	bx	lr

00000d76 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
     d76:	add.w	r1, r0, r1, lsl #2
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
     d7a:	push	{r3, r4, r5, lr}
     d7c:	ldr	r5, [r1, #88]	; 0x58
     d7e:	mov	r0, r5
     d80:	bl	d5e <FsVolume::clusterCount() const>
     d84:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
     d86:	mov	r0, r5
     d88:	bl	d40 <FsVolume::bytesPerCluster() const>
     d8c:	umull	r0, r1, r4, r0
     d90:	pop	{r3, r4, r5, pc}

00000d92 <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     d92:	ldr.w	r3, [r0, #1152]	; 0x480
  bool rename(const char *oldPath, const char *newPath) {
     d96:	push	{r4, r5, lr}
     d98:	mov	r5, r1
     d9a:	sub	sp, #68	; 0x44
     d9c:	mov	r4, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     d9e:	cbz	r3, dc4 <FsVolume::rename(char const*, char const*)+0x32>
  FatFile() {}
     da0:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     da2:	add.w	r1, r3, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     da6:	add	r0, sp, #8
     da8:	mov	r3, r2
     daa:	str	r2, [sp, #8]
     dac:	mov	r2, r5
     dae:	str	r1, [sp, #4]
     db0:	bl	790c <FatFile::open(FatFile*, char const*, int)>
     db4:	ldr	r1, [sp, #4]
     db6:	cbz	r0, dc0 <FsVolume::rename(char const*, char const*)+0x2e>
     db8:	mov	r2, r4
     dba:	add	r0, sp, #8
     dbc:	bl	7b56 <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     dc0:	add	sp, #68	; 0x44
     dc2:	pop	{r4, r5, pc}
     dc4:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     dc8:	cmp	r0, #0
     dca:	beq.n	dc0 <FsVolume::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     dcc:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     dd0:	mov	r2, r5
     dd2:	add	r0, sp, #8
  ExFatFile() {}
     dd4:	str	r3, [sp, #56]	; 0x38
     dd6:	str	r1, [sp, #4]
     dd8:	bl	63d8 <ExFatFile::open(ExFatFile*, char const*, int)>
     ddc:	ldr	r1, [sp, #4]
     dde:	cbnz	r0, de4 <FsVolume::rename(char const*, char const*)+0x52>
     de0:	movs	r0, #0
     de2:	b.n	dc0 <FsVolume::rename(char const*, char const*)+0x2e>
     de4:	mov	r2, r4
     de6:	add	r0, sp, #8
     de8:	bl	6dd4 <ExFatFile::rename(ExFatFile*, char const*)>
     dec:	cmp	r0, #0
     dee:	beq.n	de0 <FsVolume::rename(char const*, char const*)+0x4e>
     df0:	b.n	dc0 <FsVolume::rename(char const*, char const*)+0x2e>

00000df2 <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     df2:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
     df4:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     df6:	cbz	r3, e10 <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
     df8:	ldrb	r0, [r3, #0]
     dfa:	ands.w	r0, r0, #8
     dfe:	ittt	ne
     e00:	ldrne	r0, [r3, #28]
     e02:	ldrne	r3, [r3, #20]
     e04:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
     e06:	cmp	r0, #0
     e08:	it	lt
     e0a:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
     e0e:	pop	{r4, pc}
     e10:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->available() : 0;
     e12:	cmp	r0, #0
     e14:	beq.n	e0e <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e16:	ldrb.w	r3, [r0, #49]	; 0x31
     e1a:	ands.w	r3, r3, #8
     e1e:	beq.n	e3e <FsBaseFile::available() const+0x4c>
     e20:	ldrd	r1, r3, [r0, #16]
     e24:	ldrd	r2, r4, [r0]
     e28:	subs	r0, r1, r2
     e2a:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     e2e:	cmp.w	r0, #2147483648	; 0x80000000
     e32:	sbcs.w	r3, r3, #0
     e36:	it	cs
     e38:	mvncs.w	r0, #2147483648	; 0x80000000
     e3c:	b.n	e0e <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e3e:	mov	r0, r3
     e40:	b.n	e2e <FsBaseFile::available() const+0x3c>

00000e42 <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     e42:	ldr	r3, [r0, #56]	; 0x38
     e44:	cbz	r3, e54 <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     e46:	ldrb	r3, [r3, #0]
     e48:	tst.w	r3, #112	; 0x70
           m_xFile ? m_xFile->isDir() : false;
     e4c:	ite	ne
     e4e:	movne	r0, #1
     e50:	moveq	r0, #0
  }
     e52:	bx	lr
     e54:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->isDir() : false;
     e56:	cmp	r0, #0
     e58:	beq.n	e52 <FsBaseFile::isDir() const+0x10>
     e5a:	ldrb.w	r3, [r0, #49]	; 0x31
     e5e:	tst.w	r3, #80	; 0x50
     e62:	b.n	e4c <FsBaseFile::isDir() const+0xa>

00000e64 <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     e64:	ldr	r3, [r0, #56]	; 0x38
     e66:	cbnz	r3, e72 <FsBaseFile::isOpen() const+0xe>
     e68:	ldr	r0, [r0, #60]	; 0x3c
     e6a:	subs	r0, #0
     e6c:	it	ne
     e6e:	movne	r0, #1
     e70:	bx	lr
     e72:	movs	r0, #1
     e74:	bx	lr

00000e76 <MTPStorage_SD::CloseIndex()>:
  {
     e76:	push	{r3, r4, r5, lr}
    if(index_.isOpen()) {index_.close();}
     e78:	add.w	r5, r0, #184	; 0xb8
  {
     e7c:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
     e7e:	mov	r0, r5
     e80:	bl	e64 <FsBaseFile::isOpen() const>
     e84:	cbz	r0, e8c <MTPStorage_SD::CloseIndex()+0x16>
     e86:	mov	r0, r5
     e88:	bl	8a68 <FsBaseFile::close()>
    index_generated = false;
     e8c:	movs	r3, #0
     e8e:	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
     e92:	str.w	r3, [r4, #424]	; 0x1a8
  }
     e96:	pop	{r3, r4, r5, pc}

00000e98 <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     e98:	ldr	r3, [r0, #56]	; 0x38
     e9a:	cbz	r3, ea2 <FsBaseFile::read(void*, unsigned int)+0xa>
     e9c:	mov	r0, r3
     e9e:	b.w	7448 <FatFile::read(void*, unsigned int)>
     ea2:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     ea4:	cbz	r0, eaa <FsBaseFile::read(void*, unsigned int)+0x12>
     ea6:	b.w	5df8 <ExFatFile::read(void*, unsigned int)>
  }
     eaa:	mov.w	r0, #4294967295
     eae:	bx	lr

00000eb0 <FsBaseFile::seekSet(unsigned long long)>:
  bool seekSet(uint64_t pos) {
     eb0:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     eb2:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
     eb4:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     eb6:	cbz	r5, ec2 <FsBaseFile::seekSet(unsigned long long)+0x12>
     eb8:	cbnz	r3, ecc <FsBaseFile::seekSet(unsigned long long)+0x1c>
     eba:	mov	r0, r5
  }
     ebc:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ebe:	b.w	7632 <FatFile::seekSet(unsigned long)>
     ec2:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
     ec4:	cbz	r0, ecc <FsBaseFile::seekSet(unsigned long long)+0x1c>
  }
     ec6:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     ec8:	b.w	5fa8 <ExFatFile::seekSet(unsigned long long)>
  }
     ecc:	movs	r0, #0
     ece:	pop	{r4, r5}
     ed0:	bx	lr

00000ed2 <MTPStorage_SD::write(char const*, unsigned long)>:
  {
     ed2:	push	{r3, lr}
      size_t ret = file_.write(data,bytes);
     ed4:	add.w	r0, r0, #264	; 0x108
     ed8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     edc:	pop	{r3, pc}
	...

00000ee0 <FsFile::FsFile()>:
     ee0:	movs	r2, #0
     ee2:	mov.w	r1, #1000	; 0x3e8
     ee6:	strb	r2, [r0, #12]
     ee8:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     eec:	strd	r2, r2, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     ef0:	ldr	r2, [pc, #4]	; (ef8 <FsFile::FsFile()+0x18>)
     ef2:	str	r2, [r0, #0]
     ef4:	bx	lr
     ef6:	nop
     ef8:	.word	0x20000548

00000efc <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     efc:	ldr	r3, [pc, #16]	; (f10 <FsFile::~FsFile()+0x14>)
     efe:	push	{r4, lr}
     f00:	mov	r4, r0
     f02:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     f06:	bl	8a68 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f0a:	mov	r0, r4
     f0c:	pop	{r4, pc}
     f0e:	nop
     f10:	.word	0x20000420

00000f14 <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     f14:	add.w	r1, r0, r1, lsl #2
     f18:	ldr	r3, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     f1a:	ldr.w	r1, [r3, #1152]	; 0x480
     f1e:	push	{lr}
     f20:	sub	sp, #60	; 0x3c
     f22:	cbz	r1, f3a <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     f24:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     f26:	add.w	r1, r1, #1096	; 0x448
     f2a:	mov	r0, sp
     f2c:	str	r3, [sp, #0]
     f2e:	movs	r3, #1
     f30:	bl	7ab2 <FatFile::mkdir(FatFile*, char const*, bool)>
     f34:	add	sp, #60	; 0x3c
     f36:	ldr.w	pc, [sp], #4
     f3a:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f3e:	cmp	r0, #0
     f40:	beq.n	f34 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     f42:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
     f44:	movs	r3, #1
     f46:	add.w	r1, r0, #1096	; 0x448
     f4a:	mov	r0, sp
     f4c:	bl	6d16 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f50:	b.n	f34 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000f54 <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     f54:	push	{r4, r5, lr}
     f56:	mov	r4, r0
     f58:	sub	sp, #68	; 0x44
     f5a:	mov	r5, r1
     f5c:	ldr	r0, [pc, #84]	; (fb4 <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     f5e:	mov	r1, r2
     f60:	str	r2, [sp, #4]
     f62:	bl	d2c <Print::println(char const*)>
    return m_fVol ? m_fVol->remove(path) :
     f66:	ldr	r2, [sp, #4]
     f68:	add.w	r1, r4, r5, lsl #2
     f6c:	ldr	r3, [r1, #84]	; 0x54
     f6e:	ldr.w	r1, [r3, #1152]	; 0x480
     f72:	cbz	r1, f8c <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
     f74:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f76:	add	r0, sp, #8
     f78:	str	r3, [sp, #8]
     f7a:	movs	r3, #1
     f7c:	bl	79aa <FatFile::open(FatVolume*, char const*, int)>
     f80:	cbz	r0, f88 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f82:	add	r0, sp, #8
     f84:	bl	89b0 <FatFile::remove()>
     f88:	add	sp, #68	; 0x44
     f8a:	pop	{r4, r5, pc}
     f8c:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
     f90:	cmp	r0, #0
     f92:	beq.n	f88 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f94:	str	r1, [sp, #56]	; 0x38
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f96:	movs	r3, #1
     f98:	mov	r1, r0
     f9a:	add	r0, sp, #8
     f9c:	bl	649e <ExFatFile::open(ExFatVolume*, char const*, int)>
     fa0:	cbnz	r0, fa6 <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
     fa2:	movs	r0, #0
     fa4:	b.n	f88 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fa6:	add	r0, sp, #8
     fa8:	bl	6a1c <ExFatFile::remove()>
     fac:	cmp	r0, #0
     fae:	beq.n	fa2 <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     fb0:	b.n	f88 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fb2:	nop
     fb4:	.word	0x20008a64

00000fb8 <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
     fb8:	add.w	r1, r0, r1, lsl #2
     fbc:	ldr	r3, [r1, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
     fbe:	ldr.w	r1, [r3, #1152]	; 0x480
     fc2:	push	{lr}
     fc4:	sub	sp, #60	; 0x3c
     fc6:	cbz	r1, fe0 <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
     fc8:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fca:	mov	r0, sp
     fcc:	str	r3, [sp, #0]
     fce:	bl	79aa <FatFile::open(FatVolume*, char const*, int)>
     fd2:	cbz	r0, fda <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     fd4:	mov	r0, sp
     fd6:	bl	76d2 <FatFile::rmdir()>
     fda:	add	sp, #60	; 0x3c
     fdc:	ldr.w	pc, [sp], #4
     fe0:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
     fe4:	cmp	r0, #0
     fe6:	beq.n	fda <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fe8:	mov	r3, r1
     fea:	str	r1, [sp, #48]	; 0x30
     fec:	mov	r1, r0
     fee:	mov	r0, sp
     ff0:	bl	649e <ExFatFile::open(ExFatVolume*, char const*, int)>
     ff4:	cbnz	r0, ffa <mSD_Base::sd_rmdir(unsigned long, char*)+0x42>
     ff6:	movs	r0, #0
     ff8:	b.n	fda <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     ffa:	mov	r0, sp
     ffc:	bl	6aa8 <ExFatFile::rmdir()>
    1000:	cmp	r0, #0
    1002:	beq.n	ff6 <mSD_Base::sd_rmdir(unsigned long, char*)+0x3e>
    1004:	b.n	fda <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
	...

00001008 <MTPStorage_SD::OpenIndex()>:
  { 
    1008:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
    100a:	add.w	r5, r0, #184	; 0xb8
  { 
    100e:	sub	sp, #84	; 0x54
    1010:	mov	r4, r0
    if(index_.isOpen()) return; // only once
    1012:	mov	r0, r5
    1014:	bl	e64 <FsBaseFile::isOpen() const>
    1018:	cbnz	r0, 105a <MTPStorage_SD::OpenIndex()+0x52>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    101a:	ldr	r2, [pc, #68]	; (1060 <MTPStorage_SD::OpenIndex()+0x58>)
    101c:	movw	r3, #514	; 0x202
    1020:	ldr	r1, [r4, #88]	; 0x58
    1022:	mov	r0, sp
    1024:	bl	8c9c <FsVolume::open(char const*, int)>
class Print
    1028:	ldr	r3, [sp, #4]
    102a:	add	r1, sp, #16
    102c:	mov	r0, r5
    102e:	str.w	r3, [r4, #172]	; 0xac
class Stream : public Print
    1032:	ldr	r3, [sp, #8]
    1034:	str.w	r3, [r4, #176]	; 0xb0
    1038:	ldrb.w	r3, [sp, #12]
    103c:	strb.w	r3, [r4, #180]	; 0xb4
    1040:	bl	8a92 <FsBaseFile::operator=(FsBaseFile const&)>
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    1044:	mov	r0, sp
    1046:	bl	efc <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    104a:	mov	r0, r5
    104c:	bl	e64 <FsBaseFile::isOpen() const>
    1050:	cbnz	r0, 105a <MTPStorage_SD::OpenIndex()+0x52>
    1052:	ldr	r1, [pc, #16]	; (1064 <MTPStorage_SD::OpenIndex()+0x5c>)
    1054:	ldr	r0, [pc, #16]	; (1068 <MTPStorage_SD::OpenIndex()+0x60>)
    1056:	bl	d2c <Print::println(char const*)>
  }
    105a:	add	sp, #84	; 0x54
    105c:	pop	{r4, r5, pc}
    105e:	nop
    1060:	.word	0x20007f5d
    1064:	.word	0x20007f6b
    1068:	.word	0x20008a64

0000106c <MTPStorage_SD::ResetIndex()>:
  void MTPStorage_SD::ResetIndex() {
    106c:	push	{r4, lr}
    106e:	mov	r4, r0
    if(!index_.isOpen()) return;
    1070:	adds	r0, #184	; 0xb8
    1072:	bl	e64 <FsBaseFile::isOpen() const>
    1076:	cbz	r0, 1098 <MTPStorage_SD::ResetIndex()+0x2c>
    CloseIndex();
    1078:	ldr	r3, [r4, #0]
    107a:	mov	r0, r4
    107c:	ldr	r3, [r3, #64]	; 0x40
    107e:	blx	r3
    all_scanned_ = false;
    1080:	movs	r3, #0
    OpenIndex();
    1082:	mov	r0, r4
    all_scanned_ = false;
    1084:	strb.w	r3, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    1088:	mvn.w	r3, #1
    108c:	str.w	r3, [r4, #420]	; 0x1a4
  }
    1090:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    1094:	b.w	1008 <MTPStorage_SD::OpenIndex()>
  }
    1098:	pop	{r4, pc}

0000109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    109a:	push	{r0, r1, r4, r5, r6, lr}
    109c:	mov	r4, r0
    109e:	mov	r5, r1
    index_.seekSet((sizeof(r) * i));
    10a0:	mov.w	r6, #272	; 0x110
  { OpenIndex();
    10a4:	str	r2, [sp, #4]
    index_.seekSet((sizeof(r) * i));
    10a6:	adds	r4, #184	; 0xb8
  { OpenIndex();
    10a8:	bl	1008 <MTPStorage_SD::OpenIndex()>
    index_.seekSet((sizeof(r) * i));
    10ac:	mul.w	r2, r6, r5
    10b0:	movs	r3, #0
    10b2:	mov	r0, r4
    10b4:	bl	eb0 <FsBaseFile::seekSet(unsigned long long)>
    index_.write((char*)&r, sizeof(r));
    10b8:	mov	r2, r6
    10ba:	ldr	r1, [sp, #4]
    10bc:	mov	r0, r4
    10be:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
    10c2:	add	sp, #8
    10c4:	pop	{r4, r5, r6, pc}

000010c6 <MTPStorage_SD::AppendIndexRecord(Record const&)>:
  { uint32_t new_record = index_entries_++;
    10c6:	push	{r4, lr}
    10c8:	ldr.w	r4, [r0, #424]	; 0x1a8
    10cc:	mov	r2, r1
    10ce:	adds	r1, r4, #1
    10d0:	str.w	r1, [r0, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    10d4:	mov	r1, r4
    10d6:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    10da:	mov	r0, r4
    10dc:	pop	{r4, pc}
	...

000010e0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
    index_generated = true;
    10e0:	movs	r3, #1
    sd_remove(0,indexFile);
    10e2:	ldr	r2, [pc, #88]	; (113c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    10e4:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    10e6:	push	{r4, r5, r6, r7, lr}
    10e8:	mov	r4, r0
    index_generated = true;
    10ea:	strb.w	r3, [r0, #428]	; 0x1ac
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    10ee:	sub	sp, #276	; 0x114
    sd_remove(0,indexFile);
    10f0:	adds	r0, #4
    10f2:	bl	f54 <mSD_Base::sd_remove(unsigned long, char const*)>
    index_entries_ = 0;
    10f6:	movs	r5, #0
    num_storage = sd_getFSCount();
    10f8:	ldr	r3, [r4, #4]
      r.parent = 0xFFFFFFFFUL; // 
    10fa:	mov.w	r6, #4294967295
      strcpy(r.name, "/");
    10fe:	ldr	r7, [pc, #64]	; (1140 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x60>)
    num_storage = sd_getFSCount();
    1100:	str.w	r3, [r4, #408]	; 0x198
    index_entries_ = 0;
    1104:	str.w	r5, [r4, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    1108:	ldr.w	r3, [r4, #408]	; 0x198
    110c:	cmp	r5, r3
    110e:	blt.n	1114 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x34>
  }
    1110:	add	sp, #276	; 0x114
    1112:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    1114:	movs	r3, #0
      strcpy(r.name, "/");
    1116:	mov	r1, r7
    1118:	add	r0, sp, #16
      r.store = ii; // 
    111a:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    111e:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    1120:	adds	r5, #1
      r.sibling = 0;
    1122:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    1126:	movs	r3, #1
    1128:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    112c:	bl	f41c <strcpy>
      AppendIndexRecord(r);
    1130:	mov	r1, sp
    1132:	mov	r0, r4
    1134:	bl	10c6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    1138:	b.n	1108 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x28>
    113a:	nop
    113c:	.word	0x20007f5d
    1140:	.word	0x20007beb

00001144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    1144:	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    1146:	mov.w	r7, #272	; 0x110
  {
    114a:	mov	r4, r1
    114c:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    114e:	movs	r1, #0
    1150:	mov	r2, r7
  {
    1152:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    1154:	bl	a528 <memset>
    if (i > index_entries_) 
    1158:	ldr.w	r3, [r4, #424]	; 0x1a8
    115c:	cmp	r3, r6
    115e:	bcc.n	117e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3a>
    OpenIndex();
    1160:	mov	r0, r4
    index_.seekSet(sizeof(ret) * i);
    1162:	adds	r4, #184	; 0xb8
    OpenIndex();
    1164:	bl	1008 <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    1168:	mul.w	r2, r7, r6
    116c:	movs	r3, #0
    116e:	mov	r0, r4
    1170:	bl	eb0 <FsBaseFile::seekSet(unsigned long long)>
    index_.read((char *)&ret, sizeof(ret));
    1174:	mov	r2, r7
    1176:	mov	r1, r5
    1178:	mov	r0, r4
    117a:	bl	e98 <FsBaseFile::read(void*, unsigned int)>
  }
    117e:	mov	r0, r5
    1180:	pop	{r3, r4, r5, r6, r7, pc}

00001182 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    1182:	push	{r4, r5, lr}
    1184:	mov	r4, r0
    1186:	sub	sp, #276	; 0x114
    { if (next_ == 0) return 0;
    1188:	ldr.w	r5, [r4, #432]	; 0x1b0
    118c:	cbz	r5, 11ac <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>
      Record r = ReadIndexRecord(ret);
    118e:	mov	r2, r5
    1190:	mov	r1, r4
    1192:	mov	r0, sp
    1194:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    1198:	ldrb.w	r3, [r4, #436]	; 0x1b4
    119c:	cbz	r3, 11b2 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    119e:	ldr	r3, [sp, #8]
        if (next_ >= index_entries_) next_ = 0;
    11a0:	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    11a4:	ldrb.w	r3, [sp, #16]
    11a8:	cmp	r3, #0
    11aa:	beq.n	1188 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
  }
    11ac:	mov	r0, r5
    11ae:	add	sp, #276	; 0x114
    11b0:	pop	{r4, r5, pc}
      { next_++;
    11b2:	ldr.w	r1, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    11b6:	ldr.w	r2, [r4, #424]	; 0x1a8
      { next_++;
    11ba:	adds	r1, #1
        if (next_ >= index_entries_) next_ = 0;
    11bc:	cmp	r1, r2
    11be:	it	cc
    11c0:	movcc	r3, r1
    11c2:	b.n	11a0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1e>

000011c4 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:
  {
    11c4:	push	{r4, r5, lr}
    11c6:	sub	sp, #276	; 0x114
    11c8:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    11ca:	mov	r2, r1
    11cc:	mov	r1, r0
    11ce:	mov	r0, sp
  {
    11d0:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    11d2:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    11d6:	add	r1, sp, #16
    11d8:	mov	r0, r5
    11da:	bl	f41c <strcpy>
    *parent = r.parent;
    11de:	ldr	r3, [sp, #288]	; 0x120
    11e0:	ldr	r2, [sp, #0]
    11e2:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    11e4:	ldrb.w	r3, [sp, #12]
    11e8:	cbnz	r3, 11fa <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    11ea:	ldr	r3, [sp, #4]
    11ec:	str	r3, [r4, #0]
    *store = r.store;
    11ee:	ldrh.w	r2, [sp, #14]
    11f2:	ldr	r3, [sp, #292]	; 0x124
    11f4:	strh	r2, [r3, #0]
  }
    11f6:	add	sp, #276	; 0x114
    11f8:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    11fa:	mov.w	r3, #4294967295
    11fe:	b.n	11ec <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x28>

00001200 <MTPStorage_SD::GetSize(unsigned long)>:
  {
    1200:	push	{lr}
    1202:	sub	sp, #276	; 0x114
    1204:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    1206:	mov	r1, r0
    1208:	mov	r0, sp
    120a:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    120e:	ldr	r0, [sp, #4]
    1210:	add	sp, #276	; 0x114
    1212:	ldr.w	pc, [sp], #4

00001216 <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    1216:	ldr.w	r3, [r0, #320]	; 0x140
  {
    121a:	push	{r4, r5, lr}
    121c:	mov	r4, r0
    121e:	sub	sp, #276	; 0x114
    1220:	cbz	r3, 1252 <MTPStorage_SD::close()+0x3c>
    1222:	ldr	r5, [r3, #28]
    file_.close();
    1224:	add.w	r0, r4, #264	; 0x108
    1228:	bl	8a68 <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    122c:	ldr.w	r2, [r4, #420]	; 0x1a4
    1230:	mov	r1, r4
    1232:	mov	r0, sp
    1234:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    WriteIndexRecord(open_file_, r);
    1238:	mov	r2, sp
    123a:	ldr.w	r1, [r4, #420]	; 0x1a4
    123e:	mov	r0, r4
    uint32_t size = (uint32_t) file_.size();
    1240:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    1242:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    1246:	mvn.w	r3, #1
    124a:	str.w	r3, [r4, #420]	; 0x1a4
  }
    124e:	add	sp, #276	; 0x114
    1250:	pop	{r4, r5, pc}
    1252:	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    1256:	cmp	r5, #0
    1258:	beq.n	1224 <MTPStorage_SD::close()+0xe>
  uint64_t fileSize() const {return m_validLength;}
    125a:	ldr	r5, [r5, #16]
    125c:	b.n	1224 <MTPStorage_SD::close()+0xe>
	...

00001260 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    1260:	push	{r4, r5, r6, lr}
    1262:	sub	sp, #272	; 0x110
    1264:	mov	r6, r0
    1266:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    1268:	mov	r2, r1
    126a:	mov	r1, r0
    126c:	mov	r0, sp
  {
    126e:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    1270:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    1274:	ldr	r1, [sp, #0]
    1276:	adds	r3, r1, #1
    1278:	bne.n	128a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    127a:	ldr	r1, [pc, #64]	; (12bc <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    127c:	mov	r0, r4
    127e:	bl	f41c <strcpy>
      return tmp.store;
    1282:	ldrh.w	r0, [sp, #14]
  }
    1286:	add	sp, #272	; 0x110
    1288:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    128a:	mov	r3, r5
    128c:	mov	r2, r4
    128e:	mov	r0, r6
    1290:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    1294:	mov	r0, r4
    1296:	bl	f580 <strlen>
    129a:	add	r0, r4
    129c:	ldrb.w	r3, [r0, #-1]
    12a0:	cmp	r3, #47	; 0x2f
    12a2:	beq.n	12ae <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    12a4:	mov	r2, r5
    12a6:	ldr	r1, [pc, #20]	; (12bc <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    12a8:	mov	r0, r4
    12aa:	bl	ee68 <strlcat>
      strlcat(out, tmp.name,len);
    12ae:	mov	r2, r5
    12b0:	add	r1, sp, #16
    12b2:	mov	r0, r4
    12b4:	bl	ee68 <strlcat>
    12b8:	b.n	1282 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    12ba:	nop
    12bc:	.word	0x20007beb

000012c0 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    12c0:	push	{r4, r5, r6, r7, lr}
    12c2:	subw	sp, sp, #1044	; 0x414
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    12c6:	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    12ca:	mov	r4, r0
    12cc:	mov	r5, r1
    12ce:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    12d0:	mov	r2, sp
    12d2:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    12d6:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    12d8:	mov	r6, r0
    Serial.println(oldName);
    12da:	ldr	r0, [pc, #120]	; (1354 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    12dc:	bl	d2c <Print::println(char const*)>
    Record p1 = ReadIndexRecord(handle);
    12e0:	mov	r2, r5
    12e2:	mov	r1, r4
    12e4:	add	r0, sp, #768	; 0x300
    12e6:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    12ea:	mov.w	r2, #256	; 0x100
    12ee:	add	r1, sp, #784	; 0x310
    12f0:	add	r0, sp, #512	; 0x200
    12f2:	bl	eed0 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    12f6:	mov.w	r2, #256	; 0x100
    12fa:	mov	r1, r7
    12fc:	add	r0, sp, #784	; 0x310
    12fe:	bl	eed0 <strlcpy>
    WriteIndexRecord(handle, p1);
    1302:	add	r2, sp, #768	; 0x300
    1304:	mov	r1, r5
    1306:	mov	r0, r4
    1308:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    130c:	mov.w	r3, #256	; 0x100
    1310:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1312:	add.w	r6, r4, r6, lsl #2
    1316:	add.w	r2, sp, r3
    131a:	mov	r0, r4
    131c:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    1320:	add	r1, sp, #256	; 0x100
    1322:	ldr	r0, [pc, #48]	; (1354 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    1324:	bl	d2c <Print::println(char const*)>
    1328:	ldr	r0, [r6, #88]	; 0x58
    132a:	add	r2, sp, #256	; 0x100
    132c:	mov	r1, sp
    132e:	bl	d92 <FsVolume::rename(char const*, char const*)>
    if (sd_rename(store,oldName,newName)) return true;
    1332:	mov	r6, r0
    1334:	cbnz	r0, 134c <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    1336:	mov.w	r2, #256	; 0x100
    133a:	add	r1, sp, #512	; 0x200
    133c:	add	r0, sp, #784	; 0x310
    133e:	bl	eed0 <strlcpy>
    WriteIndexRecord(handle, p1);
    1342:	add	r2, sp, #768	; 0x300
    1344:	mov	r1, r5
    1346:	mov	r0, r4
    1348:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    134c:	mov	r0, r6
    134e:	addw	sp, sp, #1044	; 0x414
    1352:	pop	{r4, r5, r6, r7, pc}
    1354:	.word	0x20008a64

00001358 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    1358:	ldr.w	r3, [r0, #420]	; 0x1a4
    135c:	cmp	r3, r1
  {
    135e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1362:	mov	r4, r0
    1364:	sub	sp, #336	; 0x150
    1366:	mov	r6, r1
    1368:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    136a:	bne.n	1374 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    136c:	ldr.w	r3, [r0, #416]	; 0x1a0
    1370:	cmp	r3, r2
    1372:	beq.n	13cc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    1374:	add.w	r8, r4, #264	; 0x108
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    1378:	mov.w	r3, #256	; 0x100
    137c:	add	r2, sp, #80	; 0x50
    137e:	mov	r1, r6
    1380:	mov	r0, r4
    1382:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1386:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    1388:	mov	r0, r8
    138a:	bl	e64 <FsBaseFile::isOpen() const>
    138e:	cbz	r0, 1396 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    1390:	mov	r0, r8
    1392:	bl	8a68 <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    1396:	add.w	r7, r4, r7, lsl #2
    139a:	add	r2, sp, #80	; 0x50
    139c:	mov	r3, r5
    139e:	mov	r0, sp
    13a0:	ldr	r1, [r7, #88]	; 0x58
    13a2:	bl	8c9c <FsVolume::open(char const*, int)>
    13a6:	ldr	r3, [sp, #4]
    13a8:	add	r1, sp, #16
    13aa:	mov	r0, r8
    13ac:	str.w	r3, [r4, #252]	; 0xfc
    13b0:	ldr	r3, [sp, #8]
    13b2:	str.w	r3, [r4, #256]	; 0x100
    13b6:	ldrb.w	r3, [sp, #12]
    13ba:	strb.w	r3, [r4, #260]	; 0x104
    13be:	bl	8a92 <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    13c2:	mov	r0, sp
    13c4:	bl	efc <FsFile::~FsFile()>
    mode_ = mode;
    13c8:	strd	r5, r6, [r4, #416]	; 0x1a0
  }
    13cc:	add	sp, #336	; 0x150
    13ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000013d2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    13d2:	push	{r4, r5, r6, lr}
    13d4:	mov	r4, r0
    13d6:	mov	r6, r2
    13d8:	mov	r5, r3
    OpenFileByIndex(handle);
    13da:	movs	r2, #0
    file_.seekSet(pos);
    13dc:	add.w	r4, r4, #264	; 0x108
    OpenFileByIndex(handle);
    13e0:	bl	1358 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    file_.seekSet(pos);
    13e4:	mov	r2, r6
    13e6:	movs	r3, #0
    13e8:	mov	r0, r4
    13ea:	bl	eb0 <FsBaseFile::seekSet(unsigned long long)>
    file_.read(out,bytes);
    13ee:	ldr	r2, [sp, #16]
    13f0:	mov	r1, r5
    13f2:	mov	r0, r4
    13f4:	bl	e98 <FsBaseFile::read(void*, unsigned int)>
  }
    13f8:	pop	{r4, r5, r6, pc}

000013fa <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    13fa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    13fe:	cmp.w	r2, #4294967295
    1402:	ite	ne
    1404:	movne	r8, r2
    1406:	moveq	r8, r1
  {
    1408:	sub.w	sp, sp, #800	; 0x320
    140c:	mov	r4, r0
    140e:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    1410:	mov	r2, r8
    1412:	mov	r1, r0
    1414:	add	r0, sp, #256	; 0x100
  {
    1416:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    1418:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    141c:	mov.w	r2, #256	; 0x100
    1420:	ldr	r1, [sp, #824]	; 0x338
    1422:	add	r0, sp, #544	; 0x220
    1424:	bl	eed0 <strlcpy>
    r.store = p.store;
    1428:	ldrh.w	r3, [sp, #270]	; 0x10e
    ret = p.child = AppendIndexRecord(r);
    142c:	add	r1, sp, #528	; 0x210
    142e:	mov	r0, r4
    r.store = p.store;
    1430:	strh.w	r3, [sp, #542]	; 0x21e
    r.child = 0;
    1434:	movs	r3, #0
    r.parent = parent;
    1436:	str.w	r8, [sp, #528]	; 0x210
    r.child = 0;
    143a:	str	r3, [sp, #532]	; 0x214
    r.sibling = p.child;
    143c:	ldr	r3, [sp, #260]	; 0x104
    r.isdir = folder;
    143e:	strb.w	r7, [sp, #540]	; 0x21c
    r.sibling = p.child;
    1442:	str	r3, [sp, #536]	; 0x218
    r.scanned = 1;
    1444:	movs	r3, #1
    1446:	strb.w	r3, [sp, #541]	; 0x21d
    ret = p.child = AppendIndexRecord(r);
    144a:	bl	10c6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    144e:	add	r2, sp, #256	; 0x100
    ret = p.child = AppendIndexRecord(r);
    1450:	mov	r5, r0
    1452:	str	r0, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    1454:	mov	r1, r8
    1456:	mov	r0, r4
    1458:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    145c:	cbz	r7, 1480 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x86>
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    145e:	mov	r2, sp
    1460:	mov	r1, r5
    1462:	mov.w	r3, #256	; 0x100
    1466:	mov	r0, r4
    1468:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_mkdir(store,filename);
    146c:	mov	r2, sp
    146e:	mov	r1, r6
    1470:	adds	r0, r4, #4
    1472:	bl	f14 <mSD_Base::sd_mkdir(unsigned long, char*)>
  }
    1476:	mov	r0, r5
    1478:	add.w	sp, sp, #800	; 0x320
    147c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    1480:	movw	r2, #514	; 0x202
    1484:	mov	r1, r5
    1486:	mov	r0, r4
    1488:	bl	1358 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    148c:	b.n	1476 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x7c>

0000148e <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    148e:	ldrb.w	r3, [r0, #428]	; 0x1ac
    1492:	cbnz	r3, 1498 <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    1494:	b.w	10e0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    1498:	bx	lr

0000149a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    149a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    149e:	cmp.w	r2, #4294967295
    14a2:	ite	ne
    14a4:	movne	r6, r2
    14a6:	moveq	r6, r1
    14a8:	sub.w	sp, sp, #548	; 0x224
    Record record = ReadIndexRecord(i);
    14ac:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    14ae:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    14b0:	mov	r2, r6
    14b2:	mov	r0, sp
    14b4:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    14b8:	ldrb.w	r3, [sp, #12]
    14bc:	cmp	r3, #0
    14be:	beq.n	1586 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
    14c0:	ldrb.w	r5, [sp, #13]
    14c4:	cmp	r5, #0
    14c6:	bne.n	1586 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
      if (!file_.isOpen()) return;
    14c8:	add.w	r7, r4, #264	; 0x108
      OpenFileByIndex(i);
    14cc:	mov	r0, r4
    14ce:	mov	r2, r5
    14d0:	mov	r1, r6
    14d2:	bl	1358 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    14d6:	mov	r0, r7
    14d8:	bl	e64 <FsBaseFile::isOpen() const>
    14dc:	cmp	r0, #0
    14de:	beq.n	1586 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    14e0:	mov	r8, r5
    FsFile tmpFile;
    14e2:	add	r0, sp, #272	; 0x110
    14e4:	add.w	r9, r4, #344	; 0x158
    14e8:	bl	ee0 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    14ec:	movs	r2, #0
    14ee:	mov	r1, r7
    14f0:	add	r0, sp, #288	; 0x120
    14f2:	bl	8b68 <FsBaseFile::openNext(FsBaseFile*, int)>
    14f6:	ldr	r3, [sp, #276]	; 0x114
    14f8:	add	r1, sp, #288	; 0x120
    14fa:	mov	r0, r9
    14fc:	str.w	r3, [r4, #332]	; 0x14c
    1500:	ldr	r3, [sp, #280]	; 0x118
    1502:	str.w	r3, [r4, #336]	; 0x150
    1506:	ldrb.w	r3, [sp, #284]	; 0x11c
    150a:	strb.w	r3, [r4, #340]	; 0x154
    150e:	bl	8a92 <FsBaseFile::operator=(FsBaseFile const&)>
        child_=file_.openNextFile();
    1512:	add	r0, sp, #272	; 0x110
    1514:	bl	efc <FsFile::~FsFile()>
        if(!child_.isOpen()) break;
    1518:	mov	r0, r9
    151a:	bl	e64 <FsBaseFile::isOpen() const>
    151e:	cbz	r0, 1574 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xda>
        r.store = record.store;
    1520:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    1524:	mov	r0, r9
        r.parent = i;
    1526:	str	r6, [sp, #272]	; 0x110
        r.store = record.store;
    1528:	strh.w	r3, [sp, #286]	; 0x11e
        r.sibling = sibling;
    152c:	str	r5, [sp, #280]	; 0x118
    152e:	bl	e42 <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    1532:	strb.w	r0, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1536:	cbnz	r0, 1570 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    return m_fFile ? m_fFile->fileSize() :
    1538:	ldr.w	r3, [r4, #400]	; 0x190
    153c:	cbz	r3, 1564 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xca>
    153e:	ldr	r3, [r3, #28]
        child_.getName(r.name,MAX_FILENAME_LEN);
    1540:	mov.w	r2, #256	; 0x100
    1544:	add	r1, sp, #288	; 0x120
    1546:	mov	r0, r9
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1548:	str	r3, [sp, #276]	; 0x114
        r.scanned = false;
    154a:	strb.w	r8, [sp, #285]	; 0x11d
        child_.getName(r.name,MAX_FILENAME_LEN);
    154e:	bl	c8e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        sibling = AppendIndexRecord(r);
    1552:	add	r1, sp, #272	; 0x110
    1554:	mov	r0, r4
    1556:	bl	10c6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    155a:	mov	r5, r0
        child_.close();
    155c:	mov	r0, r9
    155e:	bl	8a68 <FsBaseFile::close()>
      }
    1562:	b.n	14e2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    1564:	ldr.w	r3, [r4, #404]	; 0x194
           m_xFile ? m_xFile->fileSize() : 0;
    1568:	cmp	r3, #0
    156a:	beq.n	1540 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
    156c:	ldr	r3, [r3, #16]
    156e:	b.n	1540 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1570:	movs	r3, #0
    1572:	b.n	1540 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
      record.scanned = true;
    1574:	movs	r3, #1
      WriteIndexRecord(i, record);
    1576:	mov	r2, sp
    1578:	mov	r1, r6
    157a:	mov	r0, r4
      record.scanned = true;
    157c:	strb.w	r3, [sp, #13]
      record.child = sibling;
    1580:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    1582:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1586:	add.w	sp, sp, #548	; 0x224
    158a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000158e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    158e:	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    1590:	cmp.w	r2, #4294967295
    1594:	it	eq
    1596:	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    1598:	sub	sp, #280	; 0x118
    159a:	mov	r4, r0
      ScanDir(store, parent);
    159c:	str	r2, [sp, #4]
    159e:	bl	149a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    15a2:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    15a4:	ldr	r2, [sp, #4]
    15a6:	mov	r1, r4
    15a8:	add	r0, sp, #8
      follow_sibling_ = true;
    15aa:	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    15ae:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    15b2:	ldr	r3, [sp, #12]
    15b4:	str.w	r3, [r4, #432]	; 0x1b0
  }
    15b8:	add	sp, #280	; 0x118
    15ba:	pop	{r4, pc}

000015bc <MTPStorage_SD::ScanAll(unsigned long)>:
  { if (all_scanned_) return;
    15bc:	push	{r4, r5, r6, lr}
    15be:	ldrb.w	r4, [r0, #429]	; 0x1ad
    15c2:	mov	r5, r0
    15c4:	mov	r6, r1
    15c6:	cbnz	r4, 15da <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    15c8:	movs	r3, #1
    15ca:	strb.w	r3, [r0, #429]	; 0x1ad
    GenerateIndex(store);
    15ce:	bl	148e <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    15d2:	ldr.w	r3, [r5, #424]	; 0x1a8
    15d6:	cmp	r4, r3
    15d8:	bcc.n	15dc <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    15da:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    15dc:	mov	r2, r4
    15de:	mov	r1, r6
    15e0:	mov	r0, r5
    15e2:	adds	r4, #1
    15e4:	bl	149a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    15e8:	b.n	15d2 <MTPStorage_SD::ScanAll(unsigned long)+0x16>

000015ea <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { 
    15ea:	push	{r4, r5, r6, lr}
    15ec:	mov	r5, r2
    15ee:	mov	r4, r0
    15f0:	mov	r6, r1
    GenerateIndex(store);
    15f2:	bl	148e <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    15f6:	cbz	r5, 1606 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1c>
    15f8:	mov	r2, r5
    15fa:	mov	r1, r6
    15fc:	mov	r0, r4
  }
    15fe:	ldmia.w	sp!, {r4, r5, r6, lr}
    1602:	b.w	158e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
      ScanAll(store);
    1606:	mov	r1, r6
    1608:	mov	r0, r4
    160a:	bl	15bc <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    160e:	movs	r3, #1
      follow_sibling_ = false;
    1610:	strb.w	r5, [r4, #436]	; 0x1b4
      next_ = 1;
    1614:	str.w	r3, [r4, #432]	; 0x1b0
  }
    1618:	pop	{r4, r5, r6, pc}
	...

0000161c <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    161c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1620:	mov	r4, r1
    1622:	sub.w	sp, sp, #764	; 0x2fc
    1626:	add.w	r1, r0, r1, lsl #2
    162a:	mov	r6, r0
  FsFile f1=sd_open(store,file,0);
    162c:	adds	r7, r0, #4
    162e:	movs	r3, #0
    1630:	add	r0, sp, #8
    1632:	ldr	r1, [r1, #88]	; 0x58
{ 
    1634:	mov	r5, r2
    1636:	bl	8c9c <FsVolume::open(char const*, int)>
    163a:	add	r0, sp, #24
    163c:	bl	e42 <FsBaseFile::isDir() const>
  if(f1.isDirectory())
    1640:	cmp	r0, #0
    1642:	beq.n	16e6 <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    1644:	ldr.w	r9, [pc, #172]	; 16f4 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd8>
    FsFile f2;
    1648:	add	r0, sp, #88	; 0x58
    164a:	bl	ee0 <FsFile::FsFile()>
    FsFile tmpFile;
    164e:	add	r0, sp, #168	; 0xa8
    1650:	bl	ee0 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1654:	movs	r2, #0
    1656:	add	r1, sp, #24
    1658:	add	r0, sp, #184	; 0xb8
    165a:	bl	8b68 <FsBaseFile::openNext(FsBaseFile*, int)>
    165e:	ldr	r3, [sp, #172]	; 0xac
class StreamFile : public stream_t, public BaseFile {
    1660:	add	r1, sp, #184	; 0xb8
    1662:	add	r0, sp, #104	; 0x68
    1664:	str	r3, [sp, #92]	; 0x5c
    1666:	ldr	r3, [sp, #176]	; 0xb0
    1668:	str	r3, [sp, #96]	; 0x60
    166a:	ldrb.w	r3, [sp, #180]	; 0xb4
    166e:	strb.w	r3, [sp, #100]	; 0x64
    1672:	bl	8a92 <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    1676:	add	r0, sp, #104	; 0x68
    1678:	bl	e64 <FsBaseFile::isOpen() const>
    167c:	mov	r8, r0
    while(f2=f1.openNextFile())
    167e:	add	r0, sp, #168	; 0xa8
    1680:	bl	efc <FsFile::~FsFile()>
    1684:	cmp.w	r8, #0
    1688:	bne.n	16a8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x8c>
    sd_rmdir(store,file);
    168a:	mov	r2, r5
    168c:	mov	r1, r4
    168e:	mov	r0, r7
    1690:	bl	fb8 <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    1694:	add	r0, sp, #88	; 0x58
    1696:	bl	efc <FsFile::~FsFile()>
}
    169a:	add	r0, sp, #8
    169c:	bl	efc <FsFile::~FsFile()>
    16a0:	add.w	sp, sp, #764	; 0x2fc
    16a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    16a8:	add.w	r8, sp, #504	; 0x1f8
    16ac:	mov.w	r2, #256	; 0x100
    16b0:	add	r0, sp, #104	; 0x68
    16b2:	mov	r1, r8
    16b4:	bl	c8e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    16b8:	mov	r2, r9
    16ba:	mov.w	r1, #256	; 0x100
    16be:	mov	r3, r5
    16c0:	add	r0, sp, #248	; 0xf8
    16c2:	str.w	r8, [sp]
    16c6:	bl	ea94 <snprintf>
    return BaseFile::isDir();
    16ca:	add	r0, sp, #104	; 0x68
    16cc:	bl	e42 <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    16d0:	add	r2, sp, #248	; 0xf8
    16d2:	mov	r1, r4
    16d4:	cbz	r0, 16de <MTPStorage_SD::removeFile(unsigned long, char*)+0xc2>
    16d6:	mov	r0, r6
    16d8:	bl	161c <MTPStorage_SD::removeFile(unsigned long, char*)>
    16dc:	b.n	164e <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    16de:	mov	r0, r7
    16e0:	bl	f54 <mSD_Base::sd_remove(unsigned long, char const*)>
    16e4:	b.n	164e <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    sd_remove(store,file);
    16e6:	mov	r2, r5
    16e8:	mov	r1, r4
    16ea:	mov	r0, r7
    16ec:	bl	f54 <mSD_Base::sd_remove(unsigned long, char const*)>
    16f0:	b.n	169a <MTPStorage_SD::removeFile(unsigned long, char*)+0x7e>
    16f2:	nop
    16f4:	.word	0x20007f57

000016f8 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    16f8:	push	{r4, r5, r6, r7, lr}
    16fa:	subw	sp, sp, #1348	; 0x544
    16fe:	mov	r4, r0
    1700:	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    1702:	mov.w	r3, #256	; 0x100
    1706:	add	r2, sp, #272	; 0x110
    1708:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    170c:	mov	r2, r5
    170e:	mov	r1, r4
    1710:	add	r0, sp, #528	; 0x210
    1712:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    1716:	add	r2, sp, #272	; 0x110
    1718:	ldrh.w	r1, [sp, #542]	; 0x21e
    171c:	mov	r0, r4
    171e:	bl	161c <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    1722:	movs	r3, #0
    WriteIndexRecord(object, r);
    1724:	add	r2, sp, #528	; 0x210
    1726:	mov	r1, r5
    1728:	mov	r0, r4
    r.name[0]=0;
    172a:	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    172e:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    1732:	ldr	r2, [sp, #528]	; 0x210
    1734:	mov	r1, r4
    1736:	add	r0, sp, #800	; 0x320
    1738:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    173c:	ldr	r6, [sp, #804]	; 0x324
    173e:	cmp	r5, r6
    1740:	bne.n	1756 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      t.child = r.sibling;
    1742:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    1744:	add	r2, sp, #800	; 0x320
    1746:	ldr	r1, [sp, #528]	; 0x210
      t.child = r.sibling;
    1748:	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(is, x);
    174a:	mov	r0, r4
    174c:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1750:	addw	sp, sp, #1348	; 0x544
    1754:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    1756:	mov	r2, r6
    1758:	mov	r1, r4
    175a:	add.w	r0, sp, #1072	; 0x430
    175e:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1762:	ldr.w	r7, [sp, #1080]	; 0x438
    1766:	cmp	r5, r7
    1768:	bne.n	1778 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x80>
      x.sibling = r.sibling;
    176a:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(is, x);
    176c:	add.w	r2, sp, #1072	; 0x430
    1770:	mov	r1, r6
      x.sibling = r.sibling;
    1772:	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    1776:	b.n	174a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x52>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1778:	mov	r2, r7
    177a:	mov	r1, r4
    177c:	mov	r0, sp
    177e:	mov	r6, r7
    1780:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1784:	mov.w	r2, #272	; 0x110
    1788:	mov	r1, sp
    178a:	add.w	r0, sp, #1072	; 0x430
    178e:	bl	a56c <memcpy>
    1792:	b.n	1762 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x6a>

00001794 <MTPStorage_SD::DeleteObject(unsigned long)>:
  {
    1794:	push	{r3, lr}
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    1796:	adds	r3, r1, #1
    1798:	beq.n	179e <MTPStorage_SD::DeleteObject(unsigned long)+0xa>
    179a:	bl	16f8 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    179e:	movs	r0, #1
    17a0:	pop	{r3, pc}

000017a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    17a2:	push	{r4, r5, r6, lr}
    17a4:	add.w	r1, r0, r1, lsl #2
    17a8:	sub.w	sp, sp, #2208	; 0x8a0
    17ac:	mov	r5, r0
    17ae:	mov	r6, r3
    17b0:	ldr	r1, [r1, #84]	; 0x54
    17b2:	movs	r3, #0
    17b4:	mov	r0, sp
    17b6:	bl	8c9c <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,FILE_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    17ba:	add	r0, sp, #16
    17bc:	bl	e64 <FsBaseFile::isOpen() const>
    17c0:	mov	r4, r0
    17c2:	cbnz	r0, 17da <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    17c4:	movw	r0, #669	; 0x29d
    17c8:	bl	cf0 <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    17cc:	mov	r0, sp
    17ce:	bl	efc <FsFile::~FsFile()>
    17d2:	mov	r0, r4
    17d4:	add.w	sp, sp, #2208	; 0x8a0
    17d8:	pop	{r4, r5, r6, pc}
    17da:	add.w	r5, r5, r6, lsl #2
    17de:	movw	r3, #514	; 0x202
    17e2:	ldr.w	r2, [sp, #2224]	; 0x8b0
    17e6:	add	r0, sp, #80	; 0x50
    17e8:	ldr	r1, [r5, #84]	; 0x54
    17ea:	bl	8c9c <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    17ee:	add	r0, sp, #96	; 0x60
    17f0:	bl	e64 <FsBaseFile::isOpen() const>
    17f4:	mov	r4, r0
    17f6:	cbnz	r0, 180e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c>
    17f8:	add	r0, sp, #16
    17fa:	bl	8a68 <FsBaseFile::close()>
    17fe:	mov.w	r0, #672	; 0x2a0
    1802:	bl	cf0 <dbgPrint(unsigned short)>
}
    1806:	add	r0, sp, #80	; 0x50
    1808:	bl	efc <FsFile::~FsFile()>
    180c:	b.n	17cc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    180e:	mov.w	r5, #4294967295
    return BaseFile::available();
    1812:	add	r0, sp, #16
    1814:	bl	df2 <FsBaseFile::available() const>
  while(f1.available()>0)
    1818:	cmp	r0, #0
    181a:	ble.n	183c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    nd=f1.read(buffer,nbuf);
    181c:	mov.w	r2, #2048	; 0x800
    1820:	add	r1, sp, #160	; 0xa0
    1822:	add	r0, sp, #16
    1824:	bl	e98 <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    1828:	subs	r5, r0, #0
    182a:	blt.n	183c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    f2.write(buffer,nd);
    182c:	mov	r2, r5
    182e:	add	r1, sp, #160	; 0xa0
    1830:	add	r0, sp, #96	; 0x60
    1832:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    1836:	cmp.w	r5, #2048	; 0x800
    183a:	bge.n	1812 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x70>
  f1.close();
    183c:	add	r0, sp, #16
    183e:	bl	8a68 <FsBaseFile::close()>
  f2.close();
    1842:	add	r0, sp, #96	; 0x60
    1844:	bl	8a68 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    1848:	cmp	r5, #0
    184a:	bge.n	1806 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>
    184c:	mov.w	r0, #684	; 0x2ac
    1850:	movs	r4, #0
    1852:	bl	cf0 <dbgPrint(unsigned short)>
    1856:	b.n	1806 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>

00001858 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    1858:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    185c:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    1860:	cmp.w	r3, #4294967295
    1864:	ite	ne
    1866:	movne	r8, r3
    1868:	moveq	r8, r2
  { 
    186a:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    186c:	mov	r2, r1
  { 
    186e:	mov	r7, r1
    Record p1 = ReadIndexRecord(handle);
    1870:	mov	r1, r0
    1872:	add	r0, sp, #520	; 0x208
    1874:	add	r6, sp, #536	; 0x218
    1876:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    187a:	mov	r2, r8
    187c:	mov	r1, r4
    187e:	add	r0, sp, #792	; 0x318
    1880:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    1884:	ldrb.w	r5, [sp, #532]	; 0x214
    1888:	cbz	r5, 18ce <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    188a:	ldrh.w	r1, [sp, #534]	; 0x216
    188e:	mov	r2, r7
    1890:	mov	r0, r4
    1892:	adds	r1, #1
    1894:	bl	149a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1898:	ldrb.w	r3, [sp, #532]	; 0x214
    189c:	ldr	r2, [r4, #0]
    189e:	mov	r0, r4
    18a0:	subs	r3, #0
    18a2:	str	r6, [sp, #0]
    18a4:	ldrh.w	r1, [sp, #806]	; 0x326
    18a8:	ldr	r5, [r2, #44]	; 0x2c
    18aa:	it	ne
    18ac:	movne	r3, #1
    18ae:	mov	r2, r8
    18b0:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    18b2:	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    18b4:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    18b6:	ldrh.w	r2, [sp, #806]	; 0x326
    18ba:	ldr	r6, [r3, #84]	; 0x54
    18bc:	mov	r1, r7
    18be:	mov	r3, r0
    18c0:	mov	r0, r4
    18c2:	blx	r6
  }
    18c4:	mov	r0, r5
    18c6:	add.w	sp, sp, #1336	; 0x538
    18ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    18ce:	mov.w	r2, #256	; 0x100
    18d2:	mov	r1, r6
    18d4:	add.w	r0, sp, #1080	; 0x438
    18d8:	bl	eed0 <strlcpy>
      r.store = p2.store;
    18dc:	ldrh.w	r3, [sp, #806]	; 0x326
      newHandle = p2.child = AppendIndexRecord(r);
    18e0:	add.w	r1, sp, #1064	; 0x428
    18e4:	mov	r0, r4
      r.store = p2.store;
    18e6:	strh.w	r3, [sp, #1078]	; 0x436
      r.sibling = p2.child;
    18ea:	ldr	r3, [sp, #796]	; 0x31c
      r.child = 0;
    18ec:	str.w	r5, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
    18f0:	str.w	r3, [sp, #1072]	; 0x430
      r.isdir = 0;
    18f4:	strh.w	r5, [sp, #1076]	; 0x434
      r.parent = newParent;
    18f8:	str.w	r8, [sp, #1064]	; 0x428
      newHandle = p2.child = AppendIndexRecord(r);
    18fc:	bl	10c6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    1900:	add	r2, sp, #792	; 0x318
      newHandle = p2.child = AppendIndexRecord(r);
    1902:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    1904:	mov	r1, r8
      newHandle = p2.child = AppendIndexRecord(r);
    1906:	str	r0, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    1908:	mov	r0, r4
    190a:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    190e:	add	r2, sp, #8
    1910:	mov	r1, r7
    1912:	mov.w	r3, #256	; 0x100
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1916:	add	r7, sp, #264	; 0x108
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1918:	mov	r0, r4
    191a:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    191e:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1920:	mov	r2, r7
    1922:	mov	r1, r5
    1924:	mov.w	r3, #256	; 0x100
    1928:	mov	r0, r4
    192a:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    192e:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1930:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1932:	mov	r1, r6
    1934:	adds	r0, r4, #4
    1936:	str	r7, [sp, #0]
    1938:	bl	17a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    193c:	b.n	18c4 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

0000193e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    193e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1942:	subw	sp, sp, #1612	; 0x64c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    1946:	cmp.w	r3, #4294967295
    194a:	ite	ne
    194c:	movne	r7, r3
    194e:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    1950:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    1952:	mov	r2, r1
    1954:	mov	r1, r0
    1956:	add	r0, sp, #520	; 0x208
    1958:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    195c:	mov	r2, r7
    195e:	mov	r1, r4
    1960:	add	r0, sp, #792	; 0x318
  Record p1=ReadIndexRecord(handle);
    1962:	ldrh.w	r8, [sp, #534]	; 0x216
  uint32_t iy= 0;
    1966:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    1968:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    196c:	ldr	r6, [sp, #524]	; 0x20c
  while(ix)
    196e:	cbnz	r6, 1986 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    1970:	mov	r0, r4
    1972:	add	r2, sp, #792	; 0x318
    1974:	mov	r1, r7
  p2.child=iy;
    1976:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    1978:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    197c:	movs	r0, #1
    197e:	addw	sp, sp, #1612	; 0x64c
    1982:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Record px = ReadIndexRecord(ix) ;
    1986:	mov	r2, r6
    1988:	mov	r1, r4
    198a:	add.w	r0, sp, #1064	; 0x428
    198e:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    1992:	mov.w	r2, #272	; 0x110
    1996:	add.w	r1, sp, #1064	; 0x428
    199a:	add.w	r0, sp, #1336	; 0x538
    199e:	bl	a56c <memcpy>
    py.store = p2.store;
    19a2:	ldrh.w	r3, [sp, #806]	; 0x326
    iy = AppendIndexRecord(py);
    19a6:	add.w	r1, sp, #1336	; 0x538
    19aa:	mov	r0, r4
    py.store = p2.store;
    19ac:	strh.w	r3, [sp, #1350]	; 0x546
    py.sibling = iy;
    19b0:	str.w	r5, [sp, #1344]	; 0x540
    py.parent = newHandle;
    19b4:	str.w	r7, [sp, #1336]	; 0x538
    iy = AppendIndexRecord(py);
    19b8:	bl	10c6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    19bc:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    19be:	mov.w	r3, #256	; 0x100
    19c2:	add	r2, sp, #8
    19c4:	mov	r1, r6
    19c6:	mov	r0, r4
    19c8:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    19cc:	add	r2, sp, #264	; 0x108
    19ce:	mov.w	r3, #256	; 0x100
    19d2:	mov	r1, r5
    19d4:	mov	r0, r4
    19d6:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    19da:	ldrb.w	r1, [sp, #1348]	; 0x544
      sd_mkdir(py.store,newfilename);
    19de:	adds	r0, r4, #4
    19e0:	ldrh.w	r3, [sp, #1350]	; 0x546
    if(py.isdir) 
    19e4:	add	r2, sp, #264	; 0x108
    19e6:	cbz	r1, 1a10 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd2>
      sd_mkdir(py.store,newfilename);
    19e8:	mov	r1, r3
    19ea:	bl	f14 <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    19ee:	mov	r2, r6
    19f0:	mov	r1, r8
    19f2:	mov	r0, r4
    19f4:	bl	149a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    19f8:	ldr	r3, [r4, #0]
    19fa:	ldrh.w	r2, [sp, #806]	; 0x326
    19fe:	mov	r1, r6
    1a00:	ldr.w	r9, [r3, #84]	; 0x54
    1a04:	mov	r0, r4
    1a06:	mov	r3, r5
    1a08:	blx	r9
    ix = px.sibling;
    1a0a:	ldr.w	r6, [sp, #1072]	; 0x430
    1a0e:	b.n	196e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    1a10:	str	r2, [sp, #0]
    1a12:	mov	r1, r8
    1a14:	add	r2, sp, #8
    1a16:	bl	17a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1a1a:	b.n	1a0a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xcc>

00001a1c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    1a1c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1a20:	ldr.w	r8, [sp, #32]
    1a24:	mov	r6, r1
    1a26:	mov	r7, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1a28:	mov	r1, r3
    1a2a:	mov	r2, r8
    1a2c:	str	r3, [sp, #4]
{ // old and new are directory paths
    1a2e:	mov	r5, r0
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1a30:	bl	f14 <mSD_Base::sd_mkdir(unsigned long, char*)>
    1a34:	ldr	r3, [sp, #4]
    1a36:	mov	r4, r0
    1a38:	cbz	r0, 1a4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x32>
    1a3a:	mov	r2, r7
    1a3c:	mov	r1, r6
    1a3e:	mov	r0, r5
    1a40:	str.w	r8, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1a44:	add	sp, #8
    1a46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1a4a:	b.w	1a60 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1a4e:	movw	r0, #694	; 0x2b6
    1a52:	bl	cf0 <dbgPrint(unsigned short)>
}
    1a56:	mov	r0, r4
    1a58:	add	sp, #8
    1a5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00001a60 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1a60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a64:	mov	r6, r1
    1a66:	sub.w	sp, sp, #680	; 0x2a8
    1a6a:	add.w	r1, r0, r1, lsl #2
    1a6e:	mov	r5, r0
    1a70:	mov	r8, r3
    1a72:	add	r0, sp, #8
    1a74:	movs	r3, #0
    1a76:	ldr	r1, [r1, #84]	; 0x54
    1a78:	mov	r7, r2
    1a7a:	bl	8c9c <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1a7e:	add	r0, sp, #24
    1a80:	bl	e64 <FsBaseFile::isOpen() const>
    1a84:	mov	r4, r0
    1a86:	cmp	r0, #0
    1a88:	beq.n	1b3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xde>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1a8a:	ldr	r4, [pc, #264]	; (1b94 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>)
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1a8c:	mov.w	r2, #256	; 0x100
    1a90:	mov	r1, r7
    1a92:	add	r0, sp, #168	; 0xa8
    1a94:	bl	eed0 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1a98:	add	r0, sp, #168	; 0xa8
    1a9a:	bl	f580 <strlen>
    1a9e:	add	r3, sp, #168	; 0xa8
    1aa0:	add	r0, r3
    1aa2:	ldrb.w	r3, [r0, #-1]
    1aa6:	cmp	r3, #47	; 0x2f
    1aa8:	beq.n	1ab6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1aaa:	mov.w	r2, #256	; 0x100
    1aae:	mov	r1, r4
    1ab0:	add	r0, sp, #168	; 0xa8
    1ab2:	bl	ee68 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1ab6:	mov.w	r2, #256	; 0x100
    1aba:	ldr	r1, [sp, #704]	; 0x2c0
    1abc:	add	r0, sp, #424	; 0x1a8
    1abe:	bl	eed0 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1ac2:	add	r0, sp, #424	; 0x1a8
    1ac4:	bl	f580 <strlen>
    1ac8:	add	r3, sp, #424	; 0x1a8
    1aca:	add	r0, r3
    1acc:	ldrb.w	r3, [r0, #-1]
    1ad0:	cmp	r3, #47	; 0x2f
    1ad2:	beq.n	1ae0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1ad4:	mov.w	r2, #256	; 0x100
    1ad8:	mov	r1, r4
    1ada:	add	r0, sp, #424	; 0x1a8
    1adc:	bl	ee68 <strlcat>
    FsFile tmpFile;
    1ae0:	add	r0, sp, #88	; 0x58
    1ae2:	bl	ee0 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1ae6:	movs	r2, #0
    1ae8:	add	r1, sp, #24
    1aea:	add	r0, sp, #104	; 0x68
    1aec:	bl	8b68 <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1af0:	add	r0, sp, #104	; 0x68
    1af2:	bl	e64 <FsBaseFile::isOpen() const>
    1af6:	cmp	r0, #0
    1af8:	beq.n	1b7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11e>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1afa:	mov.w	r2, #256	; 0x100
    1afe:	add	r1, sp, #168	; 0xa8
    1b00:	add	r0, sp, #104	; 0x68
    1b02:	bl	c8e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1b06:	mov.w	r2, #256	; 0x100
    1b0a:	add	r1, sp, #424	; 0x1a8
    1b0c:	add	r0, sp, #104	; 0x68
    1b0e:	bl	c8e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1b12:	add	r0, sp, #104	; 0x68
    1b14:	bl	e42 <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1b18:	add	r3, sp, #424	; 0x1a8
    1b1a:	add	r2, sp, #168	; 0xa8
    1b1c:	mov	r1, r6
    1b1e:	str	r3, [sp, #0]
    1b20:	mov	r3, r8
        if(f2.isDirectory())
    1b22:	cbz	r0, 1b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1b24:	mov	r0, r5
    1b26:	bl	1a1c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1b2a:	cbnz	r0, 1b76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1b2c:	movw	r0, #717	; 0x2cd
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1b30:	bl	cf0 <dbgPrint(unsigned short)>
    }
    1b34:	add	r0, sp, #88	; 0x58
    1b36:	movs	r4, #0
    1b38:	bl	efc <FsFile::~FsFile()>
    1b3c:	b.n	1b46 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1b3e:	movw	r0, #697	; 0x2b9
    1b42:	bl	cf0 <dbgPrint(unsigned short)>
}
    1b46:	add	r0, sp, #8
    1b48:	bl	efc <FsFile::~FsFile()>
    1b4c:	mov	r0, r4
    1b4e:	add.w	sp, sp, #680	; 0x2a8
    1b52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1b56:	mov	r0, r5
    1b58:	bl	17a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1b5c:	cbnz	r0, 1b64 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x104>
    1b5e:	movw	r0, #721	; 0x2d1
    1b62:	b.n	1b30 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1b64:	add	r2, sp, #168	; 0xa8
    1b66:	mov	r1, r6
    1b68:	mov	r0, r5
    1b6a:	bl	f54 <mSD_Base::sd_remove(unsigned long, char const*)>
    1b6e:	cbnz	r0, 1b76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1b70:	movw	r0, #722	; 0x2d2
    1b74:	b.n	1b30 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1b76:	add	r0, sp, #88	; 0x58
    1b78:	bl	efc <FsFile::~FsFile()>
    1b7c:	b.n	1a8c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    1b7e:	add	r0, sp, #88	; 0x58
    1b80:	bl	efc <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1b84:	mov	r2, r7
    1b86:	mov	r1, r6
    1b88:	mov	r0, r5
    1b8a:	bl	fb8 <mSD_Base::sd_rmdir(unsigned long, char*)>
    1b8e:	mov	r4, r0
    1b90:	b.n	1b46 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
    1b92:	nop
    1b94:	.word	0x20007beb

00001b98 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1b98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b9c:	subw	sp, sp, #2700	; 0xa8c
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1ba0:	cmp.w	r3, #4294967295
    1ba4:	ite	ne
    1ba6:	movne	r7, r3
    1ba8:	moveq	r7, r2
  { 
    1baa:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1bac:	mov	r2, r1
  { 
    1bae:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1bb0:	mov	r1, r0
    1bb2:	add	r0, sp, #792	; 0x318
    1bb4:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1bb8:	mov	r2, r7
    1bba:	mov	r1, r4
    1bbc:	add.w	r0, sp, #1064	; 0x428
    1bc0:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1bc4:	ldr	r2, [sp, #792]	; 0x318
    1bc6:	mov	r1, r4
    1bc8:	add.w	r0, sp, #1336	; 0x538
    1bcc:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1bd0:	ldrb.w	r3, [sp, #804]	; 0x324
    1bd4:	cbz	r3, 1bf2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1bd6:	ldrb.w	r3, [sp, #805]	; 0x325
    1bda:	cbnz	r3, 1bf2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1bdc:	mov	r2, r5
    1bde:	ldrh.w	r1, [sp, #806]	; 0x326
    1be2:	mov	r0, r4
    1be4:	bl	149a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1be8:	add	r2, sp, #792	; 0x318
    1bea:	mov	r1, r5
    1bec:	mov	r0, r4
    1bee:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1bf2:	mov.w	r2, #272	; 0x110
    1bf6:	add	r1, sp, #792	; 0x318
    1bf8:	add.w	r0, sp, #1608	; 0x648
    1bfc:	bl	a56c <memcpy>
    Record p2o = p2;
    1c00:	mov.w	r2, #272	; 0x110
    1c04:	add.w	r1, sp, #1064	; 0x428
    1c08:	add.w	r0, sp, #1880	; 0x758
    1c0c:	bl	a56c <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1c10:	mov.w	r3, #256	; 0x100
    1c14:	add	r2, sp, #280	; 0x118
    1c16:	mov	r1, r5
    1c18:	mov	r0, r4
    1c1a:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1c1e:	ldr.w	r8, [sp, #1340]	; 0x53c
    1c22:	cmp	r8, r5
    1c24:	bne.n	1c9c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x104>
        p3.child = p1.sibling;
    1c26:	ldr	r3, [sp, #800]	; 0x320
    uint32_t jx=-1;
    1c28:	mov.w	r8, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1c2c:	add.w	r2, sp, #1336	; 0x538
    1c30:	ldr	r1, [sp, #792]	; 0x318
    1c32:	mov	r0, r4
        p3.child = p1.sibling;
    1c34:	str.w	r3, [sp, #1340]	; 0x53c
        WriteIndexRecord(p1.parent, p3);    
    1c38:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1c3c:	ldrh.w	r3, [sp, #1078]	; 0x436
      WriteIndexRecord(handle, p1);
    1c40:	add	r2, sp, #792	; 0x318
    1c42:	mov	r1, r5
    1c44:	mov	r0, r4
      p1.store = p2.store;
    1c46:	strh.w	r3, [sp, #806]	; 0x326
      p1.sibling = p2.child;
    1c4a:	ldr.w	r3, [sp, #1068]	; 0x42c
      p1.parent = newParent;
    1c4e:	str	r7, [sp, #792]	; 0x318
      p1.sibling = p2.child;
    1c50:	str	r3, [sp, #800]	; 0x320
      p2.child = handle;
    1c52:	str.w	r5, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    1c56:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1c5a:	add.w	r2, sp, #1064	; 0x428
    1c5e:	mov	r1, r7
    1c60:	mov	r0, r4
    1c62:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1c66:	mov.w	r3, #256	; 0x100
    1c6a:	mov	r1, r5
    1c6c:	add	r2, sp, #536	; 0x218
    1c6e:	mov	r0, r4
    1c70:	bl	1260 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1c74:	ldrh.w	r1, [sp, #1622]	; 0x656
    1c78:	ldrh.w	r3, [sp, #1894]	; 0x766
    1c7c:	cmp	r1, r3
    1c7e:	bne.n	1d2c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x194>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1c80:	add.w	r3, r4, r1, lsl #2
    1c84:	add	r2, sp, #536	; 0x218
    1c86:	add	r1, sp, #280	; 0x118
    1c88:	ldr	r0, [r3, #88]	; 0x58
    1c8a:	bl	d92 <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1c8e:	cbz	r0, 1cfc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x164>
    1c90:	movs	r6, #1
  }
    1c92:	mov	r0, r6
    1c94:	addw	sp, sp, #2700	; 0xa8c
    1c98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        px = ReadIndexRecord(jx); 
    1c9c:	mov	r2, r8
    1c9e:	mov	r1, r4
    1ca0:	add	r0, sp, #8
    1ca2:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1ca6:	mov.w	r2, #272	; 0x110
    1caa:	add	r1, sp, #8
    1cac:	addw	r0, sp, #2424	; 0x978
    1cb0:	bl	a56c <memcpy>
        pxo = px;
    1cb4:	mov.w	r2, #272	; 0x110
    1cb8:	addw	r1, sp, #2424	; 0x978
    1cbc:	addw	r0, sp, #2152	; 0x868
    1cc0:	bl	a56c <memcpy>
        while(handle != px.sibling)
    1cc4:	ldr.w	r6, [sp, #2432]	; 0x980
    1cc8:	cmp	r6, r5
    1cca:	bne.n	1ce0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x148>
        px.sibling = p1.sibling;
    1ccc:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(jx, px);
    1cce:	addw	r2, sp, #2424	; 0x978
    1cd2:	mov	r1, r8
    1cd4:	mov	r0, r4
        px.sibling = p1.sibling;
    1cd6:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    1cda:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1cde:	b.n	1c3c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1ce0:	mov	r2, r6
    1ce2:	mov	r1, r4
    1ce4:	add	r0, sp, #8
    1ce6:	mov	r8, r6
    1ce8:	bl	1144 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1cec:	mov.w	r2, #272	; 0x110
    1cf0:	add	r1, sp, #8
    1cf2:	addw	r0, sp, #2424	; 0x978
    1cf6:	bl	a56c <memcpy>
          pxo = px;
    1cfa:	b.n	1cb4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x11c>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1cfc:	movw	r0, #558	; 0x22e
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1d00:	bl	cf0 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1d04:	addw	r2, sp, #2152	; 0x868
    1d08:	mov	r1, r8
    1d0a:	mov	r0, r4
    1d0c:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1d10:	add.w	r2, sp, #1608	; 0x648
    1d14:	mov	r1, r5
    1d16:	mov	r0, r4
    1d18:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1d1c:	add.w	r2, sp, #1880	; 0x758
    1d20:	mov	r1, r7
    1d22:	mov	r0, r4
    return false;
    1d24:	movs	r6, #0
    WriteIndexRecord(newParent,p2o);      
    1d26:	bl	109a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1d2a:	b.n	1c92 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    else if(!p1o.isdir)
    1d2c:	ldrb.w	r2, [sp, #1620]	; 0x654
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1d30:	add.w	r9, r4, #4
    else if(!p1o.isdir)
    1d34:	cbnz	r2, 1d5a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1d36:	add	r2, sp, #536	; 0x218
    1d38:	mov	r0, r9
    1d3a:	str	r2, [sp, #0]
    1d3c:	add	r2, sp, #280	; 0x118
    1d3e:	bl	17a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1d42:	mov	r6, r0
    1d44:	cbz	r0, 1d54 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1bc>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1d46:	add	r2, sp, #280	; 0x118
    1d48:	ldrh.w	r1, [sp, #1894]	; 0x766
    1d4c:	mov	r0, r9
    1d4e:	bl	f54 <mSD_Base::sd_remove(unsigned long, char const*)>
    1d52:	b.n	1c92 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    1d54:	movw	r0, #562	; 0x232
    1d58:	b.n	1d00 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1d5a:	add	r2, sp, #536	; 0x218
    1d5c:	mov	r0, r9
    1d5e:	str	r2, [sp, #0]
    1d60:	add	r2, sp, #280	; 0x118
    1d62:	bl	1a1c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1d66:	cmp	r0, #0
    1d68:	bne.n	1c90 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf8>
    1d6a:	movw	r0, #566	; 0x236
    1d6e:	b.n	1d00 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>

00001d70 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1d70:	push	{r4, r5, r6, lr}
    1d72:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1d76:	ldr	r4, [pc, #60]	; (1db4 <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1d78:	ldr	r0, [r5, #88]	; 0x58
    1d7a:	bl	d5e <FsVolume::clusterCount() const>
    1d7e:	mov	r1, r0
    1d80:	mov	r0, r4
    1d82:	bl	cb4 <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1d86:	ldr	r0, [r5, #88]	; 0x58
    1d88:	bl	4b8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1d8c:	mov	r1, r0
    1d8e:	mov	r0, r4
    1d90:	bl	cb4 <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1d94:	ldr	r6, [r5, #88]	; 0x58
    1d96:	mov	r0, r6
    1d98:	bl	d5e <FsVolume::clusterCount() const>
    1d9c:	mov	r4, r0
    1d9e:	mov	r0, r6
    1da0:	bl	4b8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1da4:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1da6:	ldr	r0, [r5, #88]	; 0x58
    1da8:	bl	d40 <FsVolume::bytesPerCluster() const>
    1dac:	umull	r0, r1, r4, r0
    1db0:	pop	{r4, r5, r6, pc}
    1db2:	nop
    1db4:	.word	0x20008a64

00001db8 <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1db8:	push	{r4, lr}
    1dba:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1dbc:	bl	ca26 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1dc0:	mov	r0, r4
    1dc2:	ldmia.w	sp!, {r4, lr}
    1dc6:	b.w	ca38 <Print::println()>

00001dca <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1dca:	push	{r4, lr}
    1dcc:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1dce:	movs	r3, #0
    1dd0:	movs	r2, #10
    1dd2:	bl	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1dd6:	mov	r0, r4
    1dd8:	ldmia.w	sp!, {r4, lr}
    1ddc:	b.w	ca38 <Print::println()>

00001de0 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1de0:	push	{r0, r1, r4, lr}
    1de2:	mov	r4, r0
    1de4:	cbz	r1, 1e00 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    1de6:	mov	r0, r1
    1de8:	str	r1, [sp, #4]
    1dea:	bl	f580 <strlen>
    1dee:	ldr	r3, [r4, #0]
    1df0:	mov	r2, r0
    1df2:	ldr	r1, [sp, #4]
    1df4:	ldr	r3, [r3, #4]
    1df6:	mov	r0, r4
    1df8:	add	sp, #8
    1dfa:	ldmia.w	sp!, {r4, lr}
    1dfe:	bx	r3
    1e00:	add	sp, #8
    1e02:	pop	{r4, pc}

00001e04 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1e04:	b.w	1de0 <Print::write(char const*) [clone .isra.0]>

00001e08 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1e08:	push	{r4, lr}
    1e0a:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1e0c:	bl	1de0 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1e10:	mov	r0, r4
    1e12:	ldmia.w	sp!, {r4, lr}
    1e16:	b.w	ca38 <Print::println()>
	...

00001e1c <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    1e1c:	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    1e1e:	bl	aa54 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1e22:	cmp	r0, #0
    1e24:	beq.n	1e1e <menuGetLine()+0x2>
  Serial.setTimeout(5000);
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1e26:	ldr	r4, [pc, #36]	; (1e4c <menuGetLine()+0x30>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    1e28:	movw	r3, #5000	; 0x1388
    1e2c:	ldr	r5, [pc, #32]	; (1e50 <menuGetLine()+0x34>)
    1e2e:	movs	r1, #13
    1e30:	mov	r2, r4
    1e32:	str	r3, [r5, #8]
    1e34:	mov	r0, r5
    1e36:	movs	r3, #40	; 0x28
    1e38:	bl	c980 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1e3c:	movs	r3, #0
  Serial.println(buffer);
    1e3e:	mov	r1, r4
  buffer[count]=0;
    1e40:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1e42:	mov	r0, r5
    1e44:	bl	1e08 <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1e48:	mov	r0, r4
    1e4a:	pop	{r3, r4, r5, pc}
    1e4c:	.word	0x20010b66
    1e50:	.word	0x20008a64

00001e54 <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1e54:	push	{r0, r1, r4, lr}
    1e56:	mov	r4, r0
{ char *buffer=menuGetLine();
    1e58:	bl	1e1c <menuGetLine()>
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1e5c:	add	r2, sp, #4
    1e5e:	ldr	r1, [pc, #12]	; (1e6c <menuGetInt32(long*) [clone .isra.0]+0x18>)
    1e60:	bl	eb5c <sscanf>
    1e64:	ldr	r3, [sp, #4]
    1e66:	str	r3, [r4, #0]
  return 1;
}
    1e68:	add	sp, #8
    1e6a:	pop	{r4, pc}
    1e6c:	.word	0x20008059

00001e70 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1e70:	push	{r0, r1, r4, lr}
    1e72:	mov	r4, r0
{ char *buffer=menuGetLine();
    1e74:	bl	1e1c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1e78:	add	r2, sp, #4
    1e7a:	ldr	r1, [pc, #12]	; (1e88 <menuGetInt16(short*) [clone .isra.0]+0x18>)
    1e7c:	bl	eb5c <sscanf>
    1e80:	ldr	r3, [sp, #4]
    1e82:	strh	r3, [r4, #0]
}
    1e84:	add	sp, #8
    1e86:	pop	{r4, pc}
    1e88:	.word	0x20008059

00001e8c <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    1e8c:	push	{r4, lr}
    1e8e:	sub	sp, #32
    1e90:	bl	aa54 <usb_serial_available>

    while(!Serial.available()) ;
    1e94:	cmp	r0, #0
    1e96:	beq.n	1e90 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1e98:	bl	aac8 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1e9c:	uxtb	r0, r0
    if(ch=='d') // set date
    1e9e:	cmp	r0, #100	; 0x64
    1ea0:	bne.n	1ece <menu3()+0x42>
{ char *buffer=menuGetLine();
    1ea2:	bl	1e1c <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1ea6:	add	r3, sp, #28
    1ea8:	add	r2, sp, #20
    1eaa:	ldr	r1, [pc, #324]	; (1ff0 <menu3()+0x164>)
    1eac:	str	r3, [sp, #8]
    1eae:	add.w	r3, sp, #19
    1eb2:	str	r3, [sp, #4]
    1eb4:	add	r3, sp, #24
    1eb6:	str	r3, [sp, #0]
    1eb8:	add.w	r3, sp, #18
    1ebc:	bl	eb5c <sscanf>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    1ec0:	ldr	r0, [sp, #20]
    1ec2:	ldrd	r1, r2, [sp, #24]
    1ec6:	bl	3964 <rtcSetDate(int, int, int)>
    }
    else if(ch=='4')
    { 
      menuGetInt16((int16_t *)&t_4);
    }
}
    1eca:	add	sp, #32
    1ecc:	pop	{r4, pc}
    else if(ch=='t') // set time
    1ece:	cmp	r0, #52	; 0x34
    1ed0:	bhi.n	1ee6 <menu3()+0x5a>
    1ed2:	cmp	r0, #48	; 0x30
    1ed4:	bls.n	1eca <menu3()+0x3e>
    1ed6:	subs	r0, #50	; 0x32
    1ed8:	cmp	r0, #2
    1eda:	bhi.w	1fe0 <menu3()+0x154>
    1ede:	tbb	[pc, r0]
    1ee2:	.short	0x8381
    1ee4:	.byte	0x85
    1ee5:	.byte	0x00
    1ee6:	subs	r0, #97	; 0x61
    1ee8:	uxtb	r3, r0
    1eea:	cmp	r3, #22
    1eec:	bhi.n	1eca <menu3()+0x3e>
    1eee:	cmp	r0, #22
    1ef0:	bhi.n	1eca <menu3()+0x3e>
    1ef2:	add	r3, pc, #4	; (adr r3, 1ef8 <menu3()+0x6c>)
    1ef4:	ldr.w	pc, [r3, r0, lsl #2]
    1ef8:	.word	0x00001f7f
    1efc:	.word	0x00001ecb
    1f00:	.word	0x00001fbb
    1f04:	.word	0x00001ecb
    1f08:	.word	0x00001ecb
    1f0c:	.word	0x00001f93
    1f10:	.word	0x00001fc7
    1f14:	.word	0x00001ecb
    1f18:	.word	0x00001ecb
    1f1c:	.word	0x00001ecb
    1f20:	.word	0x00001ecb
    1f24:	.word	0x00001ecb
    1f28:	.word	0x00001ecb
    1f2c:	.word	0x00001ecb
    1f30:	.word	0x00001f8b
    1f34:	.word	0x00001ecb
    1f38:	.word	0x00001ecb
    1f3c:	.word	0x00001f8f
    1f40:	.word	0x00001fa7
    1f44:	.word	0x00001f55
    1f48:	.word	0x00001ecb
    1f4c:	.word	0x00001ecb
    1f50:	.word	0x00001fdd
{ char *buffer=menuGetLine();
    1f54:	bl	1e1c <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1f58:	add	r3, sp, #28
    1f5a:	add	r2, sp, #20
    1f5c:	ldr	r1, [pc, #144]	; (1ff0 <menu3()+0x164>)
    1f5e:	str	r3, [sp, #8]
    1f60:	add.w	r3, sp, #19
    1f64:	str	r3, [sp, #4]
    1f66:	add	r3, sp, #24
    1f68:	str	r3, [sp, #0]
    1f6a:	add.w	r3, sp, #18
    1f6e:	bl	eb5c <sscanf>
      rtcSetTime(hour,minutes,seconds);
    1f72:	ldr	r0, [sp, #20]
    1f74:	ldrd	r1, r2, [sp, #24]
    1f78:	bl	3988 <rtcSetTime(int, int, int)>
    1f7c:	b.n	1eca <menu3()+0x3e>
      menuGetInt32((int32_t *)&t_acq);
    1f7e:	ldr	r0, [pc, #116]	; (1ff4 <menu3()+0x168>)
}
    1f80:	add	sp, #32
    1f82:	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_on);
    1f86:	b.w	1e54 <menuGetInt32(long*) [clone .isra.0]>
    1f8a:	ldr	r0, [pc, #108]	; (1ff8 <menu3()+0x16c>)
    1f8c:	b.n	1f80 <menu3()+0xf4>
      menuGetInt32((int32_t *)&t_rep);
    1f8e:	ldr	r0, [pc, #108]	; (1ffc <menu3()+0x170>)
    1f90:	b.n	1f80 <menu3()+0xf4>
      menuGetInt32((int32_t *)&fsamp);
    1f92:	ldr	r4, [pc, #108]	; (2000 <menu3()+0x174>)
    1f94:	mov	r0, r4
    1f96:	bl	1e54 <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    1f9a:	ldr	r0, [r4, #0]
}
    1f9c:	add	sp, #32
    1f9e:	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    1fa2:	b.w	c18 <acqModifyFrequency(unsigned long)>
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    1fa6:	ldr	r4, [pc, #92]	; (2004 <menu3()+0x178>)
    1fa8:	mov	r0, r4
    1faa:	bl	1e70 <menuGetInt16(short*) [clone .isra.0]>
    1fae:	ldrh	r3, [r4, #0]
    1fb0:	lsls	r3, r3, #16
    1fb2:	bpl.n	1eca <menu3()+0x3e>
    1fb4:	movs	r3, #0
    1fb6:	strh	r3, [r4, #0]
    1fb8:	b.n	1eca <menu3()+0x3e>
      menuGetInt16((int16_t *)&proc);
    1fba:	ldr	r0, [pc, #76]	; (2008 <menu3()+0x17c>)
}
    1fbc:	add	sp, #32
    1fbe:	ldmia.w	sp!, {r4, lr}
      menuGetInt16((int16_t *)&t_4);
    1fc2:	b.w	1e70 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt16((int16_t *)&again);
    1fc6:	ldr	r4, [pc, #68]	; (200c <menu3()+0x180>)
    1fc8:	mov	r0, r4
    1fca:	bl	1e70 <menuGetInt16(short*) [clone .isra.0]>
      setAGain(again);
    1fce:	ldrh	r0, [r4, #0]
    1fd0:	sxtb	r0, r0
}
    1fd2:	add	sp, #32
    1fd4:	ldmia.w	sp!, {r4, lr}
      setAGain(again);
    1fd8:	b.w	35a0 <setAGain(signed char)>
      menuGetInt16((int16_t *)&store[0]);
    1fdc:	ldr	r0, [pc, #48]	; (2010 <menu3()+0x184>)
    1fde:	b.n	1fbc <menu3()+0x130>
      menuGetInt16((int16_t *)&t_1);
    1fe0:	ldr	r0, [pc, #48]	; (2014 <menu3()+0x188>)
    1fe2:	b.n	1fbc <menu3()+0x130>
      menuGetInt16((int16_t *)&t_2);
    1fe4:	ldr	r0, [pc, #48]	; (2018 <menu3()+0x18c>)
    1fe6:	b.n	1fbc <menu3()+0x130>
      menuGetInt16((int16_t *)&t_3);
    1fe8:	ldr	r0, [pc, #48]	; (201c <menu3()+0x190>)
    1fea:	b.n	1fbc <menu3()+0x130>
      menuGetInt16((int16_t *)&t_4);
    1fec:	ldr	r0, [pc, #48]	; (2020 <menu3()+0x194>)
    1fee:	b.n	1fbc <menu3()+0x130>
    1ff0:	.word	0x20007e45
    1ff4:	.word	0x200093ec
    1ff8:	.word	0x200093f0
    1ffc:	.word	0x2001095c
    2000:	.word	0x200093d0
    2004:	.word	0x20010a46
    2008:	.word	0x200109a2
    200c:	.word	0x200093f8
    2010:	.word	0x20010978
    2014:	.word	0x20010954
    2018:	.word	0x200093e0
    201c:	.word	0x200093e4
    2020:	.word	0x200093e8

00002024 <storeConfig(unsigned short*, int)>:

/******************** Parameter ******************************/
void storeConfig(uint16_t *store, int ns)
{ 
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    2024:	lsls	r2, r1, #1
    2026:	movs	r1, #0
    2028:	b.w	c0c8 <eeprom_write_block>

0000202c <loadConfig(unsigned short*, int)>:
}

void loadConfig(uint16_t *store, int ns)
{
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    202c:	lsls	r2, r1, #1
    202e:	movs	r1, #0
    2030:	b.w	be18 <eeprom_read_block>

00002034 <saveParameters()>:
}

void saveParameters(void)
{
  store[1]  = t_acq;
    2034:	ldr	r3, [pc, #96]	; (2098 <saveParameters()+0x64>)
  store[6]  = shift;
  store[7]  = t_1;
  store[8]  = t_2;
  store[9]  = t_3;
  store[10] = t_4;
  store[11] = fsamp/1000;
    2036:	mov.w	r2, #1000	; 0x3e8
  store[1]  = t_acq;
    203a:	ldr	r0, [pc, #96]	; (209c <saveParameters()+0x68>)
  store[12] = again;
  store[13] = dgain;
  store[14] = 0;
  store[15] = 0;

  storeConfig(store, 16);
    203c:	movs	r1, #16
  store[1]  = t_acq;
    203e:	ldr	r3, [r3, #0]
    2040:	strh	r3, [r0, #2]
  store[2]  = t_on;
    2042:	ldr	r3, [pc, #92]	; (20a0 <saveParameters()+0x6c>)
    2044:	ldr	r3, [r3, #0]
    2046:	strh	r3, [r0, #4]
  store[3]  = t_off;
    2048:	ldr	r3, [pc, #88]	; (20a4 <saveParameters()+0x70>)
    204a:	ldr	r3, [r3, #0]
    204c:	strh	r3, [r0, #6]
  store[4]  = t_rep;
    204e:	ldr	r3, [pc, #88]	; (20a8 <saveParameters()+0x74>)
    2050:	ldr	r3, [r3, #0]
    2052:	strh	r3, [r0, #8]
  store[5]  = proc;
    2054:	ldr	r3, [pc, #84]	; (20ac <saveParameters()+0x78>)
    2056:	ldrh	r3, [r3, #0]
    2058:	strh	r3, [r0, #10]
  store[6]  = shift;
    205a:	ldr	r3, [pc, #84]	; (20b0 <saveParameters()+0x7c>)
    205c:	ldrh	r3, [r3, #0]
    205e:	strh	r3, [r0, #12]
  store[7]  = t_1;
    2060:	ldr	r3, [pc, #80]	; (20b4 <saveParameters()+0x80>)
    2062:	ldr	r3, [r3, #0]
    2064:	strh	r3, [r0, #14]
  store[8]  = t_2;
    2066:	ldr	r3, [pc, #80]	; (20b8 <saveParameters()+0x84>)
    2068:	ldr	r3, [r3, #0]
    206a:	strh	r3, [r0, #16]
  store[9]  = t_3;
    206c:	ldr	r3, [pc, #76]	; (20bc <saveParameters()+0x88>)
    206e:	ldr	r3, [r3, #0]
    2070:	strh	r3, [r0, #18]
  store[10] = t_4;
    2072:	ldr	r3, [pc, #76]	; (20c0 <saveParameters()+0x8c>)
    2074:	ldr	r3, [r3, #0]
    2076:	strh	r3, [r0, #20]
  store[11] = fsamp/1000;
    2078:	ldr	r3, [pc, #72]	; (20c4 <saveParameters()+0x90>)
    207a:	ldr	r3, [r3, #0]
    207c:	sdiv	r3, r3, r2
    2080:	strh	r3, [r0, #22]
  store[12] = again;
    2082:	ldr	r3, [pc, #68]	; (20c8 <saveParameters()+0x94>)
    2084:	ldrh	r3, [r3, #0]
    2086:	strh	r3, [r0, #24]
  store[13] = dgain;
    2088:	ldr	r3, [pc, #64]	; (20cc <saveParameters()+0x98>)
    208a:	ldrh	r3, [r3, #0]
    208c:	strh	r3, [r0, #26]
  store[14] = 0;
    208e:	movs	r3, #0
    2090:	strh	r3, [r0, #28]
  store[15] = 0;
    2092:	strh	r3, [r0, #30]
  storeConfig(store, 16);
    2094:	b.w	2024 <storeConfig(unsigned short*, int)>
    2098:	.word	0x200093ec
    209c:	.word	0x20010978
    20a0:	.word	0x200093f0
    20a4:	.word	0x20010958
    20a8:	.word	0x2001095c
    20ac:	.word	0x200109a2
    20b0:	.word	0x20010a46
    20b4:	.word	0x20010954
    20b8:	.word	0x200093e0
    20bc:	.word	0x200093e4
    20c0:	.word	0x200093e8
    20c4:	.word	0x200093d0
    20c8:	.word	0x200093f8
    20cc:	.word	0x2001099c

000020d0 <menu1(short)>:
{   // have ':'
    20d0:	push	{r4, lr}
    20d2:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    20d4:	bl	aa54 <usb_serial_available>
    while(!Serial.available()) ;
    20d8:	cmp	r0, #0
    20da:	beq.n	20d4 <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    20dc:	bl	aac8 <usb_serial_getchar>
    ch=Serial.read();
    20e0:	uxtb	r3, r0
    if(ch=='w') 
    20e2:	cmp	r3, #119	; 0x77
    20e4:	bne.n	20f6 <menu1(short)+0x26>
    { Serial.println("Save parameters");
    20e6:	ldr	r1, [pc, #36]	; (210c <menu1(short)+0x3c>)
    20e8:	ldr	r0, [pc, #36]	; (2110 <menu1(short)+0x40>)
    20ea:	bl	1e08 <Print::println(char const*) [clone .isra.0]>
      saveParameters();
    20ee:	bl	2034 <saveParameters()>
}
    20f2:	mov	r0, r4
    20f4:	pop	{r4, pc}
    else if(ch=='m') // control monitor (needed for gui)
    20f6:	cmp	r3, #109	; 0x6d
    20f8:	bne.n	2102 <menu1(short)+0x32>
      menuGetInt16((int16_t *)&monitor);
    20fa:	ldr	r0, [pc, #24]	; (2114 <menu1(short)+0x44>)
    20fc:	bl	1e70 <menuGetInt16(short*) [clone .isra.0]>
    2100:	b.n	20f2 <menu1(short)+0x22>
    else if(ch=='c') // transfer internal rtc to external rtc
    2102:	cmp	r3, #99	; 0x63
    2104:	bne.n	20f2 <menu1(short)+0x22>
    { rtcXferTime();
    2106:	bl	39ac <rtcXferTime()>
    210a:	b.n	20f2 <menu1(short)+0x22>
    210c:	.word	0x20007d00
    2110:	.word	0x20008a64
    2114:	.word	0x200109a0

00002118 <loadParameters()>:
}

uint16_t *loadParameters(void)
{
    2118:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  loadConfig(store,16);
    211c:	ldr	r4, [pc, #216]	; (21f8 <loadParameters()+0xe0>)
    211e:	movs	r1, #16
    2120:	ldr.w	sl, [pc, #256]	; 2224 <loadParameters()+0x10c>
    2124:	mov	r0, r4
    2126:	ldr.w	r8, [pc, #256]	; 2228 <loadParameters()+0x110>
    212a:	bl	202c <loadConfig(unsigned short*, int)>
  if(store[0]==1)
    212e:	ldrh	r3, [r4, #0]
    2130:	ldr.w	lr, [pc, #248]	; 222c <loadParameters()+0x114>
    2134:	cmp	r3, #1
    2136:	ldr.w	ip, [pc, #248]	; 2230 <loadParameters()+0x118>
    213a:	ldr	r7, [pc, #192]	; (21fc <loadParameters()+0xe4>)
    213c:	ldr	r2, [pc, #192]	; (2200 <loadParameters()+0xe8>)
    213e:	ldr	r6, [pc, #196]	; (2204 <loadParameters()+0xec>)
    2140:	ldr	r5, [pc, #196]	; (2208 <loadParameters()+0xf0>)
    2142:	ldr	r0, [pc, #200]	; (220c <loadParameters()+0xf4>)
    2144:	ldr	r1, [pc, #200]	; (2210 <loadParameters()+0xf8>)
    2146:	bne.n	21a2 <loadParameters()+0x8a>
  {
    t_acq   = store[1];
    2148:	ldrh	r3, [r4, #2]
    t_on    = store[2];
    214a:	ldrh.w	r9, [r4, #4]
    t_acq   = store[1];
    214e:	str.w	r3, [sl]
    t_on    = store[2];
    2152:	ldr	r3, [pc, #192]	; (2214 <loadParameters()+0xfc>)
    2154:	str.w	r9, [r3]
    t_off   = store[3];
    2158:	ldrh	r3, [r4, #6]
    215a:	str.w	r3, [r8]
    t_rep   = store[4];
    215e:	ldrh	r3, [r4, #8]
    2160:	str.w	r3, [lr]
    proc    = store[5];
    2164:	ldrsh.w	r3, [r4, #10]
    2168:	strh.w	r3, [ip]
    shift   = store[6];
    216c:	ldrsh.w	r3, [r4, #12]
    2170:	strh	r3, [r7, #0]
    t_1     = store[7];
    2172:	ldrh	r3, [r4, #14]
    2174:	str	r3, [r2, #0]
    t_2     = store[8];
    t_3     = store[9];
    t_4     = store[10];
    fsamp   = store[11]*1000;
    2176:	mov.w	r2, #1000	; 0x3e8
    t_2     = store[8];
    217a:	ldrh	r3, [r4, #16]
    217c:	str	r3, [r6, #0]
    t_3     = store[9];
    217e:	ldrh	r3, [r4, #18]
    2180:	str	r3, [r5, #0]
    t_4     = store[10];
    2182:	ldrh	r3, [r4, #20]
    2184:	str	r3, [r0, #0]
    fsamp   = store[11]*1000;
    2186:	ldrh	r3, [r4, #22]
    2188:	muls	r3, r2
    again   = store[12];
    218a:	ldrsh.w	r2, [r4, #24]
    fsamp   = store[11]*1000;
    218e:	str	r3, [r1, #0]
    again   = store[12];
    2190:	ldr	r3, [pc, #132]	; (2218 <loadParameters()+0x100>)
    2192:	strh	r2, [r3, #0]
    dgain   = store[13];
    2194:	ldrsh.w	r2, [r4, #26]
    2198:	ldr	r3, [pc, #128]	; (221c <loadParameters()+0x104>)
    219a:	strh	r2, [r3, #0]
    store[13] = dgain    = DGAIN;
    store[14] = 0;
    store[15] = 0; 
  }
  return store;
}
    219c:	ldr	r0, [pc, #88]	; (21f8 <loadParameters()+0xe0>)
    219e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    store[0]  = 0;
    21a2:	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    21a4:	mov.w	r9, #20
    21a8:	str.w	r9, [sl]
    store[3]  = t_off    = T_OFF;
    21ac:	str.w	r3, [r8]
    store[4]  = t_rep    = T_REP;
    21b0:	str.w	r3, [lr]
    store[5]  = proc     = PROC_MODE;
    21b4:	strh.w	r3, [ip]
    store[6]  = shift    = SHIFT;
    21b8:	strh	r3, [r7, #0]
    store[7]  = t_1      = T_1;
    21ba:	str	r3, [r2, #0]
    store[8]  = t_2      = T_2;
    21bc:	movs	r2, #12
    store[0]  = 0;
    21be:	strh	r3, [r4, #0]
    store[8]  = t_2      = T_2;
    21c0:	str	r2, [r6, #0]
    21c2:	strh	r2, [r4, #16]
    store[9]  = t_3      = T_3;
    21c4:	str	r2, [r5, #0]
    21c6:	strh	r2, [r4, #18]
    store[10] = t_4      = T_4;
    21c8:	movs	r2, #24
    store[1]  = t_acq    = T_ACQ;
    21ca:	strh.w	r9, [r4, #2]
    store[10] = t_4      = T_4;
    21ce:	str	r2, [r0, #0]
    21d0:	strh	r2, [r4, #20]
    store[11] = (fsamp   = FSAMP)/1000; 
    21d2:	ldr	r2, [pc, #76]	; (2220 <loadParameters()+0x108>)
    store[3]  = t_off    = T_OFF;
    21d4:	strh	r3, [r4, #6]
    store[11] = (fsamp   = FSAMP)/1000; 
    21d6:	str	r2, [r1, #0]
    21d8:	movs	r2, #192	; 0xc0
    store[12] = again    = AGAIN;
    21da:	ldr	r1, [pc, #60]	; (2218 <loadParameters()+0x100>)
    store[11] = (fsamp   = FSAMP)/1000; 
    21dc:	strh	r2, [r4, #22]
    store[12] = again    = AGAIN;
    21de:	movs	r2, #10
    store[4]  = t_rep    = T_REP;
    21e0:	strh	r3, [r4, #8]
    store[12] = again    = AGAIN;
    21e2:	strh	r2, [r1, #0]
    21e4:	strh	r2, [r4, #24]
    store[13] = dgain    = DGAIN;
    21e6:	ldr	r2, [pc, #52]	; (221c <loadParameters()+0x104>)
    store[5]  = proc     = PROC_MODE;
    21e8:	strh	r3, [r4, #10]
    store[6]  = shift    = SHIFT;
    21ea:	strh	r3, [r4, #12]
    store[7]  = t_1      = T_1;
    21ec:	strh	r3, [r4, #14]
    store[13] = dgain    = DGAIN;
    21ee:	strh	r3, [r2, #0]
    21f0:	strh	r3, [r4, #26]
    store[14] = 0;
    21f2:	strh	r3, [r4, #28]
    store[15] = 0; 
    21f4:	strh	r3, [r4, #30]
    21f6:	b.n	219c <loadParameters()+0x84>
    21f8:	.word	0x20010978
    21fc:	.word	0x20010a46
    2200:	.word	0x20010954
    2204:	.word	0x200093e0
    2208:	.word	0x200093e4
    220c:	.word	0x200093e8
    2210:	.word	0x200093d0
    2214:	.word	0x200093f0
    2218:	.word	0x200093f8
    221c:	.word	0x2001099c
    2220:	.word	0x0002ee00
    2224:	.word	0x200093ec
    2228:	.word	0x20010958
    222c:	.word	0x2001095c
    2230:	.word	0x200109a2

00002234 <menu2()>:
{   // have '?'
    2234:	push	{r4, lr}
    2236:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    2238:	bl	aa54 <usb_serial_available>
    while(!Serial.available()) ;
    223c:	cmp	r0, #0
    223e:	beq.n	2238 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2240:	bl	aac8 <usb_serial_getchar>
    ch=Serial.read();
    2244:	uxtb	r0, r0
    if(ch=='p') // get parameters
    2246:	cmp	r0, #112	; 0x70
    2248:	bne.w	2366 <menu2()+0x132>
      Serial.println();
    224c:	ldr	r0, [pc, #588]	; (249c <menu2()+0x268>)
    224e:	bl	ca38 <Print::println()>
      Serial.println(version);
    2252:	ldr	r1, [pc, #588]	; (24a0 <menu2()+0x26c>)
    2254:	ldr	r0, [pc, #580]	; (249c <menu2()+0x268>)
    2256:	bl	1e08 <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    225a:	add	r0, sp, #24
    225c:	bl	3940 <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    2260:	ldrsb.w	r3, [sp, #28]
    2264:	ldrsh.w	r2, [sp, #24]
    2268:	str	r3, [sp, #16]
    226a:	ldrsb.w	r3, [sp, #31]
    226e:	ldr	r1, [pc, #564]	; (24a4 <menu2()+0x270>)
    2270:	str	r3, [sp, #12]
    2272:	ldrsb.w	r3, [sp, #30]
    2276:	ldr	r0, [pc, #548]	; (249c <menu2()+0x268>)
    2278:	str	r3, [sp, #8]
    227a:	ldrsb.w	r3, [sp, #29]
    227e:	str	r3, [sp, #4]
    2280:	ldrsb.w	r3, [sp, #27]
    2284:	str	r3, [sp, #0]
    2286:	ldrsb.w	r3, [sp, #26]
    228a:	bl	ca70 <Print::printf(char const*, ...)>
      Serial.println(rtcGetTimestamp());
    228e:	bl	3a30 <rtcGetTimestamp()>
    2292:	mov	r1, r0
    2294:	ldr	r0, [pc, #516]	; (249c <menu2()+0x268>)
    2296:	bl	1e08 <Print::println(char const*) [clone .isra.0]>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    229a:	ldr	r1, [pc, #524]	; (24a8 <menu2()+0x274>)
    229c:	ldr	r0, [pc, #508]	; (249c <menu2()+0x268>)
    229e:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    22a2:	ldr	r3, [pc, #520]	; (24ac <menu2()+0x278>)
    22a4:	ldr	r0, [pc, #500]	; (249c <menu2()+0x268>)
    22a6:	ldr	r1, [r3, #0]
    22a8:	bl	1dca <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    22ac:	ldr	r1, [pc, #512]	; (24b0 <menu2()+0x27c>)
    22ae:	ldr	r0, [pc, #492]	; (249c <menu2()+0x268>)
    22b0:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    22b4:	ldr	r3, [pc, #508]	; (24b4 <menu2()+0x280>)
    22b6:	ldr	r0, [pc, #484]	; (249c <menu2()+0x268>)
    22b8:	ldr	r1, [r3, #0]
    22ba:	bl	1dca <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    22be:	ldr	r1, [pc, #504]	; (24b8 <menu2()+0x284>)
    22c0:	ldr	r0, [pc, #472]	; (249c <menu2()+0x268>)
    22c2:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    22c6:	ldr	r3, [pc, #500]	; (24bc <menu2()+0x288>)
    22c8:	ldr	r0, [pc, #464]	; (249c <menu2()+0x268>)
    22ca:	ldr	r1, [r3, #0]
    22cc:	bl	1dca <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    22d0:	ldr	r1, [pc, #492]	; (24c0 <menu2()+0x28c>)
    22d2:	ldr	r0, [pc, #456]	; (249c <menu2()+0x268>)
    22d4:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    22d8:	ldr	r3, [pc, #488]	; (24c4 <menu2()+0x290>)
	size_t println(long n)				{ return print(n) + println(); }
    22da:	ldr	r0, [pc, #448]	; (249c <menu2()+0x268>)
    22dc:	ldr	r1, [r3, #0]
    22de:	bl	ca26 <Print::print(long)>
    22e2:	ldr	r0, [pc, #440]	; (249c <menu2()+0x268>)
    22e4:	bl	ca38 <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    22e8:	ldr	r1, [pc, #476]	; (24c8 <menu2()+0x294>)
    22ea:	ldr	r0, [pc, #432]	; (249c <menu2()+0x268>)
    22ec:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    22f0:	ldr	r3, [pc, #472]	; (24cc <menu2()+0x298>)
    22f2:	ldr	r0, [pc, #424]	; (249c <menu2()+0x268>)
    22f4:	ldrh	r1, [r3, #0]
    22f6:	sxth	r1, r1
    22f8:	bl	1db8 <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    22fc:	ldr	r1, [pc, #464]	; (24d0 <menu2()+0x29c>)
    22fe:	ldr	r0, [pc, #412]	; (249c <menu2()+0x268>)
    2300:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    2304:	ldr	r3, [pc, #460]	; (24d4 <menu2()+0x2a0>)
    2306:	ldr	r0, [pc, #404]	; (249c <menu2()+0x268>)
    2308:	ldrh	r1, [r3, #0]
    230a:	sxth	r1, r1
    230c:	bl	1db8 <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    2310:	ldr	r1, [pc, #452]	; (24d8 <menu2()+0x2a4>)
    2312:	ldr	r0, [pc, #392]	; (249c <menu2()+0x268>)
    2314:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    2318:	ldr	r3, [pc, #448]	; (24dc <menu2()+0x2a8>)
    231a:	ldr	r0, [pc, #384]	; (249c <menu2()+0x268>)
    231c:	ldrh	r1, [r3, #0]
    231e:	sxth	r1, r1
    2320:	bl	1db8 <Print::println(int) [clone .isra.0]>
      Serial.print("t_1   (1) = "); Serial.println(t_1);
    2324:	ldr	r1, [pc, #440]	; (24e0 <menu2()+0x2ac>)
    2326:	ldr	r0, [pc, #372]	; (249c <menu2()+0x268>)
    2328:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    232c:	ldr	r3, [pc, #436]	; (24e4 <menu2()+0x2b0>)
    232e:	ldr	r0, [pc, #364]	; (249c <menu2()+0x268>)
    2330:	ldr	r1, [r3, #0]
    2332:	bl	1dca <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_2   (2) = "); Serial.println(t_2);
    2336:	ldr	r1, [pc, #432]	; (24e8 <menu2()+0x2b4>)
    2338:	ldr	r0, [pc, #352]	; (249c <menu2()+0x268>)
    233a:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    233e:	ldr	r3, [pc, #428]	; (24ec <menu2()+0x2b8>)
    2340:	ldr	r0, [pc, #344]	; (249c <menu2()+0x268>)
    2342:	ldr	r1, [r3, #0]
    2344:	bl	1dca <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_3   (3) = "); Serial.println(t_3);
    2348:	ldr	r1, [pc, #420]	; (24f0 <menu2()+0x2bc>)
    234a:	ldr	r0, [pc, #336]	; (249c <menu2()+0x268>)
    234c:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    2350:	ldr	r3, [pc, #416]	; (24f4 <menu2()+0x2c0>)
    2352:	ldr	r0, [pc, #328]	; (249c <menu2()+0x268>)
    2354:	ldr	r1, [r3, #0]
    2356:	bl	1dca <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_4   (4) = "); Serial.println(t_4);
    235a:	ldr	r1, [pc, #412]	; (24f8 <menu2()+0x2c4>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    235c:	ldr	r0, [pc, #316]	; (249c <menu2()+0x268>)
    235e:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    2362:	ldr	r3, [pc, #408]	; (24fc <menu2()+0x2c8>)
    2364:	b.n	23f0 <menu2()+0x1bc>
    else if(ch=='d') // get date
    2366:	cmp	r0, #52	; 0x34
    2368:	bhi.n	239c <menu2()+0x168>
    236a:	cmp	r0, #48	; 0x30
    236c:	bls.n	23a4 <menu2()+0x170>
    236e:	subs	r0, #50	; 0x32
    2370:	cmp	r0, #2
    2372:	bhi.n	245a <menu2()+0x226>
    2374:	tbb	[pc, r0]
    2378:	.short	0x7d77
    237a:	.byte	0x83
    237b:	.byte	0x00
    237c:	cmp	r0, #22
    237e:	bhi.n	23a4 <menu2()+0x170>
    2380:	tbb	[pc, r0]
    2384:	.word	0x165f1031
    2388:	.word	0x10654710
    238c:	.word	0x10101010
    2390:	.word	0x103b1010
    2394:	.word	0x25544110
    2398:	.short	0x1010
    239a:	.byte	0x7f
    239b:	.byte	0x00
    239c:	subs	r0, #97	; 0x61
    239e:	uxtb	r3, r0
    23a0:	cmp	r3, #22
    23a2:	bls.n	237c <menu2()+0x148>
        virtual int available() { return usb_serial_available(); }
    23a4:	bl	aa54 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    23a8:	cmp	r0, #0
    23aa:	bne.n	2494 <menu2()+0x260>
}
    23ac:	add	sp, #32
    23ae:	pop	{r4, pc}
      rtc_get_datetime(&t);
    23b0:	add	r0, sp, #24
    23b2:	bl	3940 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    23b6:	ldrsb.w	r3, [sp, #27]
    23ba:	ldrsh.w	r2, [sp, #24]
    23be:	str	r3, [sp, #0]
    23c0:	ldr	r1, [pc, #316]	; (2500 <menu2()+0x2cc>)
    23c2:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    23c6:	ldr	r0, [pc, #212]	; (249c <menu2()+0x268>)
    23c8:	bl	ca70 <Print::printf(char const*, ...)>
    23cc:	b.n	23a4 <menu2()+0x170>
      rtc_get_datetime(&t);
    23ce:	add	r0, sp, #24
    23d0:	bl	3940 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    23d4:	ldrsb.w	r3, [sp, #31]
    23d8:	ldrsb.w	r2, [sp, #29]
    23dc:	str	r3, [sp, #0]
    23de:	ldr	r1, [pc, #292]	; (2504 <menu2()+0x2d0>)
    23e0:	ldrsb.w	r3, [sp, #30]
    23e4:	b.n	23c6 <menu2()+0x192>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    23e6:	ldr	r1, [pc, #192]	; (24a8 <menu2()+0x274>)
    23e8:	ldr	r0, [pc, #176]	; (249c <menu2()+0x268>)
    23ea:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    23ee:	ldr	r3, [pc, #188]	; (24ac <menu2()+0x278>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    23f0:	ldr	r1, [r3, #0]
    23f2:	ldr	r0, [pc, #168]	; (249c <menu2()+0x268>)
    23f4:	bl	1dca <Print::println(unsigned long) [clone .isra.0]>
    23f8:	b.n	23a4 <menu2()+0x170>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    23fa:	ldr	r1, [pc, #268]	; (2508 <menu2()+0x2d4>)
    23fc:	ldr	r0, [pc, #156]	; (249c <menu2()+0x268>)
    23fe:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    2402:	ldr	r3, [pc, #176]	; (24b4 <menu2()+0x280>)
    2404:	b.n	23f0 <menu2()+0x1bc>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    2406:	ldr	r1, [pc, #176]	; (24b8 <menu2()+0x284>)
    2408:	ldr	r0, [pc, #144]	; (249c <menu2()+0x268>)
    240a:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    240e:	ldr	r3, [pc, #172]	; (24bc <menu2()+0x288>)
    2410:	b.n	23f0 <menu2()+0x1bc>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    2412:	ldr	r1, [pc, #172]	; (24c0 <menu2()+0x28c>)
    2414:	ldr	r0, [pc, #132]	; (249c <menu2()+0x268>)
    2416:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    241a:	ldr	r3, [pc, #168]	; (24c4 <menu2()+0x290>)
    241c:	ldr	r0, [pc, #124]	; (249c <menu2()+0x268>)
    241e:	ldr	r1, [r3, #0]
    2420:	bl	ca26 <Print::print(long)>
    2424:	ldr	r0, [pc, #116]	; (249c <menu2()+0x268>)
    2426:	bl	ca38 <Print::println()>
    242a:	b.n	23a4 <menu2()+0x170>
      Serial.print("shift (s) = "); Serial.println(shift);
    242c:	ldr	r1, [pc, #152]	; (24c8 <menu2()+0x294>)
    242e:	ldr	r0, [pc, #108]	; (249c <menu2()+0x268>)
    2430:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    2434:	ldr	r3, [pc, #148]	; (24cc <menu2()+0x298>)
      Serial.print("again (g) = "); Serial.println(again);
    2436:	ldrh	r1, [r3, #0]
    2438:	sxth	r1, r1
      Serial.print("params[0]  = "); Serial.println(params[0]);
    243a:	ldr	r0, [pc, #96]	; (249c <menu2()+0x268>)
    243c:	bl	1db8 <Print::println(int) [clone .isra.0]>
    2440:	b.n	23a4 <menu2()+0x170>
      Serial.print("proc  (c) = "); Serial.println(proc);
    2442:	ldr	r1, [pc, #140]	; (24d0 <menu2()+0x29c>)
    2444:	ldr	r0, [pc, #84]	; (249c <menu2()+0x268>)
    2446:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    244a:	ldr	r3, [pc, #136]	; (24d4 <menu2()+0x2a0>)
    244c:	b.n	2436 <menu2()+0x202>
      Serial.print("again (g) = "); Serial.println(again);
    244e:	ldr	r1, [pc, #136]	; (24d8 <menu2()+0x2a4>)
    2450:	ldr	r0, [pc, #72]	; (249c <menu2()+0x268>)
    2452:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    2456:	ldr	r3, [pc, #132]	; (24dc <menu2()+0x2a8>)
    2458:	b.n	2436 <menu2()+0x202>
      Serial.print("t_1  (1) = "); Serial.println(t_1);
    245a:	ldr	r1, [pc, #176]	; (250c <menu2()+0x2d8>)
    245c:	ldr	r0, [pc, #60]	; (249c <menu2()+0x268>)
    245e:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    2462:	ldr	r3, [pc, #128]	; (24e4 <menu2()+0x2b0>)
    2464:	b.n	23f0 <menu2()+0x1bc>
      Serial.print("t_2  (2) = "); Serial.println(t_2);
    2466:	ldr	r1, [pc, #168]	; (2510 <menu2()+0x2dc>)
    2468:	ldr	r0, [pc, #48]	; (249c <menu2()+0x268>)
    246a:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    246e:	ldr	r3, [pc, #124]	; (24ec <menu2()+0x2b8>)
    2470:	b.n	23f0 <menu2()+0x1bc>
      Serial.print("t_3  (3) = "); Serial.println(t_3);
    2472:	ldr	r1, [pc, #160]	; (2514 <menu2()+0x2e0>)
    2474:	ldr	r0, [pc, #36]	; (249c <menu2()+0x268>)
    2476:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    247a:	ldr	r3, [pc, #120]	; (24f4 <menu2()+0x2c0>)
    247c:	b.n	23f0 <menu2()+0x1bc>
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    247e:	ldr	r1, [pc, #152]	; (2518 <menu2()+0x2e4>)
    2480:	b.n	235c <menu2()+0x128>
    { uint16_t *params=loadParameters();
    2482:	bl	2118 <loadParameters()>
    2486:	mov	r4, r0
      Serial.print("params[0]  = "); Serial.println(params[0]);
    2488:	ldr	r1, [pc, #144]	; (251c <menu2()+0x2e8>)
    248a:	ldr	r0, [pc, #16]	; (249c <menu2()+0x268>)
    248c:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    2490:	ldrh	r1, [r4, #0]
    2492:	b.n	243a <menu2()+0x206>
        virtual int read() { return usb_serial_getchar(); }
    2494:	bl	aac8 <usb_serial_getchar>
    2498:	b.n	23a4 <menu2()+0x170>
    249a:	nop
    249c:	.word	0x20008a64
    24a0:	.word	0x20007f0c
    24a4:	.word	0x20007d10
    24a8:	.word	0x20007d36
    24ac:	.word	0x200093ec
    24b0:	.word	0x20007d43
    24b4:	.word	0x200093f0
    24b8:	.word	0x20007d50
    24bc:	.word	0x2001095c
    24c0:	.word	0x20007d5d
    24c4:	.word	0x200093d0
    24c8:	.word	0x20007d6a
    24cc:	.word	0x20010a46
    24d0:	.word	0x20007d77
    24d4:	.word	0x200109a2
    24d8:	.word	0x20007d84
    24dc:	.word	0x200093f8
    24e0:	.word	0x20007d91
    24e4:	.word	0x20010954
    24e8:	.word	0x20007d9e
    24ec:	.word	0x200093e0
    24f0:	.word	0x20007dab
    24f4:	.word	0x200093e4
    24f8:	.word	0x20007db8
    24fc:	.word	0x200093e8
    2500:	.word	0x20007dc5
    2504:	.word	0x20007ddf
    2508:	.word	0x20007dfa
    250c:	.word	0x20007e07
    2510:	.word	0x20007e13
    2514:	.word	0x20007e1f
    2518:	.word	0x20007e2b
    251c:	.word	0x20007e37

00002520 <menu(short)>:
{
    2520:	push	{r3, r4, r5, lr}
    2522:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    2524:	bl	aa54 <usb_serial_available>
  if(Serial.available())
    2528:	cmp	r0, #0
    252a:	beq.n	25e8 <menu(short)+0xc8>
        virtual int read() { return usb_serial_getchar(); }
    252c:	bl	aac8 <usb_serial_getchar>
    char ch=Serial.read();
    2530:	uxtb	r1, r0
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    2532:	cmp	r1, #115	; 0x73
    2534:	bne.n	2548 <menu(short)+0x28>
    2536:	movs	r4, #0
    2538:	ldr	r1, [pc, #176]	; (25ec <menu(short)+0xcc>)
    253a:	ldr	r0, [pc, #180]	; (25f0 <menu(short)+0xd0>)
    253c:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    2540:	bl	35dc <adcStatus()>
	size_t print(char c)				{ return write((uint8_t)c); }
    2544:	ldr	r5, [pc, #168]	; (25f0 <menu(short)+0xd0>)
    2546:	b.n	25e0 <menu(short)+0xc0>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    2548:	cmp	r1, #101	; 0x65
    254a:	beq.n	25a4 <menu(short)+0x84>
    254c:	bhi.n	257a <menu(short)+0x5a>
    254e:	cmp	r1, #63	; 0x3f
    2550:	beq.n	25c6 <menu(short)+0xa6>
    2552:	bhi.n	2570 <menu(short)+0x50>
    2554:	cmp	r1, #33	; 0x21
    2556:	beq.n	25cc <menu(short)+0xac>
    2558:	cmp	r1, #58	; 0x3a
    255a:	beq.n	25bc <menu(short)+0x9c>
    255c:	ldr	r5, [pc, #144]	; (25f0 <menu(short)+0xd0>)
    255e:	ldr	r3, [r5, #0]
    2560:	mov	r0, r5
    2562:	ldr	r3, [r3, #0]
    2564:	blx	r3
    else {Serial.print(ch); Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    2566:	ldr	r1, [pc, #140]	; (25f4 <menu(short)+0xd4>)
    2568:	mov	r0, r5
    256a:	bl	1e08 <Print::println(char const*) [clone .isra.0]>
    256e:	b.n	2544 <menu(short)+0x24>
    2570:	cmp	r1, #98	; 0x62
    2572:	bne.n	255c <menu(short)+0x3c>
    else if(ch=='b') {reboot();}
    2574:	bl	248 <reboot()>
    2578:	b.n	2544 <menu(short)+0x24>
    257a:	cmp	r1, #114	; 0x72
    257c:	beq.n	25b0 <menu(short)+0x90>
    257e:	cmp	r1, #120	; 0x78
    2580:	beq.n	25b6 <menu(short)+0x96>
    2582:	cmp	r1, #109	; 0x6d
    2584:	bne.n	255c <menu(short)+0x3c>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    2586:	ldr	r5, [pc, #112]	; (25f8 <menu(short)+0xd8>)
    2588:	ldr	r1, [pc, #112]	; (25fc <menu(short)+0xdc>)
    258a:	ldrh	r3, [r5, #0]
    258c:	ldr	r0, [pc, #96]	; (25f0 <menu(short)+0xd0>)
    258e:	rsb	r3, r3, #1
    2592:	strh	r3, [r5, #0]
    2594:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2598:	ldrsh.w	r1, [r5]
    259c:	ldr	r0, [pc, #80]	; (25f0 <menu(short)+0xd0>)
    259e:	bl	ca26 <Print::print(long)>
    25a2:	b.n	2544 <menu(short)+0x24>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    25a4:	ldr	r1, [pc, #88]	; (2600 <menu(short)+0xe0>)
    25a6:	movs	r4, #5
    25a8:	ldr	r0, [pc, #68]	; (25f0 <menu(short)+0xd0>)
    25aa:	bl	1e04 <Print::print(char const*) [clone .isra.0]>
    25ae:	b.n	2544 <menu(short)+0x24>
    else if(ch=='r') {resetUSB();}
    25b0:	bl	218 <resetUSB()>
    25b4:	b.n	2544 <menu(short)+0x24>
    else if(ch=='x') {powerDown();}
    25b6:	bl	2c00 <powerDown()>
    25ba:	b.n	2544 <menu(short)+0x24>
    else if(ch==':') status=menu1(status); 
    25bc:	mov	r0, r4
    25be:	bl	20d0 <menu1(short)>
    25c2:	mov	r4, r0
    25c4:	b.n	2544 <menu(short)+0x24>
    else if(ch=='?') menu2(); 
    25c6:	bl	2234 <menu2()>
    25ca:	b.n	2544 <menu(short)+0x24>
    else if(ch=='!') menu3(); 
    25cc:	bl	1e8c <menu3()>
    25d0:	b.n	2544 <menu(short)+0x24>
    25d2:	bl	aac8 <usb_serial_getchar>
	size_t print(char c)				{ return write((uint8_t)c); }
    25d6:	ldr	r3, [r5, #0]
    25d8:	uxtb	r1, r0
    25da:	ldr	r0, [pc, #20]	; (25f0 <menu(short)+0xd0>)
    25dc:	ldr	r3, [r3, #0]
    25de:	blx	r3
        virtual int available() { return usb_serial_available(); }
    25e0:	bl	aa54 <usb_serial_available>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    25e4:	cmp	r0, #0
    25e6:	bne.n	25d2 <menu(short)+0xb2>
}
    25e8:	mov	r0, r4
    25ea:	pop	{r3, r4, r5, pc}
    25ec:	.word	0x20007ca5
    25f0:	.word	0x20008a64
    25f4:	.word	0x20007cbf
    25f8:	.word	0x200109a0
    25fc:	.word	0x20007cb4
    2600:	.word	0x20007cad

00002604 <getStore()>:

uint16_t *getStore(void) {return store;}
    2604:	ldr	r0, [pc, #0]	; (2608 <getStore()+0x4>)
    2606:	bx	lr
    2608:	.word	0x20010978

0000260c <getDataCount()>:
  volatile static int queue_busy=0;
  EXTMEM static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    260c:	ldr	r3, [pc, #16]	; (2620 <getDataCount()+0x14>)
    260e:	ldr	r0, [r3, #0]
    2610:	ldr	r3, [pc, #16]	; (2624 <getDataCount()+0x18>)
    2612:	ldr	r3, [r3, #0]
    2614:	subs	r0, r0, r3
    2616:	it	mi
    2618:	addmi	r0, #192	; 0xc0
    261a:	uxth	r0, r0
    261c:	bx	lr
    261e:	nop
    2620:	.word	0x2000f5e8
    2624:	.word	0x2000f5e4

00002628 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    2628:	ldr	r3, [pc, #4]	; (2630 <queue_isBusy()+0x8>)
    262a:	ldr	r0, [r3, #0]
    262c:	bx	lr
    262e:	nop
    2630:	.word	0x2000dbd4

00002634 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    2634:	push	{r3, r4, r5, r6, r7, lr}
//    while(queue_busy); 
    queue_busy=1;
    2636:	movs	r4, #1
    2638:	ldr	r5, [pc, #72]	; (2684 <pushData(unsigned long*)+0x50>)
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    263a:	ldr	r6, [pc, #76]	; (2688 <pushData(unsigned long*)+0x54>)
    263c:	movs	r7, #192	; 0xc0
    queue_busy=1;
    263e:	str	r4, [r5, #0]
  {
    2640:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2642:	ldr	r3, [r6, #0]
    2644:	ldr	r2, [pc, #68]	; (268c <pushData(unsigned long*)+0x58>)
    2646:	add	r3, r4
    2648:	ldr	r2, [r2, #0]
    264a:	sdiv	r0, r3, r7
    264e:	mls	r3, r7, r0, r3
    2652:	cmp	r3, r2
    2654:	bne.n	265c <pushData(unsigned long*)+0x28>
    2656:	movs	r0, #0
    2658:	str	r0, [r5, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    265a:	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    265c:	ldr	r3, [pc, #48]	; (2690 <pushData(unsigned long*)+0x5c>)
    265e:	mov.w	r2, #512	; 0x200
    2662:	ldr	r0, [r6, #0]
    2664:	add.w	r0, r3, r0, lsl #9
    2668:	bl	a56c <memcpy>
    tail = (tail+1)%MAXBUF;
    266c:	ldr	r3, [r6, #0]
    return 1; // signal success.
    266e:	mov	r0, r4
    tail = (tail+1)%MAXBUF;
    2670:	adds	r3, #1
    2672:	sdiv	r2, r3, r7
    2676:	mls	r3, r7, r2, r3
    267a:	str	r3, [r6, #0]
    queue_busy=0;
    267c:	movs	r3, #0
    267e:	str	r3, [r5, #0]
    return 1; // signal success.
    2680:	b.n	265a <pushData(unsigned long*)+0x26>
    2682:	nop
    2684:	.word	0x2000dbd4
    2688:	.word	0x2000f5e8
    268c:	.word	0x2000f5e4
    2690:	.word	0x70000000

00002694 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    2694:	push	{r4, r5, r6, lr}
//    while(queue_busy); 
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    2696:	ldr	r3, [pc, #64]	; (26d8 <pullData(unsigned long*)+0x44>)
    queue_busy=1;
    2698:	movs	r4, #1
    269a:	ldr	r6, [pc, #64]	; (26dc <pullData(unsigned long*)+0x48>)
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    269c:	ldr	r5, [pc, #64]	; (26e0 <pullData(unsigned long*)+0x4c>)
    queue_busy=1;
    269e:	str	r4, [r6, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    26a0:	ldr	r2, [r5, #0]
    26a2:	ldr	r3, [r3, #0]
    26a4:	cmp	r2, r3
    26a6:	bne.n	26ae <pullData(unsigned long*)+0x1a>
    26a8:	movs	r0, #0
    26aa:	str	r0, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    head = (head+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    26ac:	pop	{r4, r5, r6, pc}
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    26ae:	ldr	r3, [pc, #52]	; (26e4 <pullData(unsigned long*)+0x50>)
    26b0:	mov.w	r2, #512	; 0x200
    26b4:	ldr	r1, [r5, #0]
    26b6:	add.w	r1, r3, r1, lsl #9
    26ba:	bl	a56c <memcpy>
    head = (head+1)%MAXBUF;
    26be:	ldr	r3, [r5, #0]
    26c0:	movs	r2, #192	; 0xc0
    return 1; // signal success.
    26c2:	mov	r0, r4
    head = (head+1)%MAXBUF;
    26c4:	adds	r3, #1
    26c6:	sdiv	r1, r3, r2
    26ca:	mls	r3, r2, r1, r3
    26ce:	str	r3, [r5, #0]
    queue_busy=0;
    26d0:	movs	r3, #0
    26d2:	str	r3, [r6, #0]
    return 1; // signal success.
    26d4:	b.n	26ac <pullData(unsigned long*)+0x18>
    26d6:	nop
    26d8:	.word	0x2000f5e8
    26dc:	.word	0x2000dbd4
    26e0:	.word	0x2000f5e4
    26e4:	.word	0x70000000

000026e8 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
{
    26e8:	push	{r0, r1, r4, r5, r6, lr}
    26ea:	mov	r6, r0
    rtc_get_datetime(&t);
    26ec:	mov	r0, sp
{
    26ee:	mov	r5, r2
    26f0:	mov	r4, r1
    rtc_get_datetime(&t);
    26f2:	bl	3940 <rtc_get_datetime(datetime_t*)>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    26f6:	ldrh.w	r2, [sp]
    *date = FS_DATE(t.year,t.month,t.day);
    26fa:	ldrsb.w	r3, [sp, #3]
    26fe:	subw	r2, r2, #1980	; 0x7bc
    2702:	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    2704:	cmp	r2, #127	; 0x7f
    2706:	bhi.n	2752 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2708:	ldrb.w	r1, [sp, #2]
  return year > 127 || month > 12 || day > 31 ? 0 :
    270c:	cmp	r1, #12
    270e:	bhi.n	2752 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2710:	uxtb	r3, r3
    2712:	cmp	r3, #31
    2714:	bhi.n	2752 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
         year << 9 | month << 5 | day;
    2716:	orr.w	r3, r3, r1, lsl #5
    271a:	orr.w	r3, r3, r2, lsl #9
    271e:	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    2720:	ldrb.w	r1, [sp, #5]
    2724:	ldrsb.w	r2, [sp, #7]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    2728:	cmp	r1, #23
    *date = FS_DATE(t.year,t.month,t.day);
    272a:	strh	r3, [r6, #0]
    272c:	bhi.n	2756 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    *time = FS_TIME(t.hour,t.min,t.sec);
    272e:	ldrb.w	r3, [sp, #6]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    2732:	cmp	r3, #59	; 0x3b
    2734:	bhi.n	2756 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    2736:	uxtb	r2, r2
    2738:	cmp	r2, #59	; 0x3b
    273a:	bhi.n	2756 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
         hour << 11 | minute << 5 | second >> 1;
    273c:	lsls	r3, r3, #5
    273e:	orr.w	r3, r3, r1, lsl #11
    2742:	orr.w	r3, r3, r2, lsr #1
    2746:	uxth	r3, r3
    2748:	strh	r3, [r4, #0]
    *ms10 = 0;
    274a:	movs	r3, #0
    274c:	strb	r3, [r5, #0]
}
    274e:	add	sp, #8
    2750:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    2752:	movs	r3, #0
    2754:	b.n	2720 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
         hour << 11 | minute << 5 | second >> 1;
    2756:	movs	r3, #0
    2758:	b.n	2748 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x60>

0000275a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    275a:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    275c:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    275e:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2760:	cbz	r5, 276c <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    2762:	cbnz	r3, 2776 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
    2764:	mov	r0, r5
  }
    2766:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2768:	b.w	7632 <FatFile::seekSet(unsigned long)>
    276c:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
    276e:	cbz	r0, 2776 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    2770:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    2772:	b.w	5fa8 <ExFatFile::seekSet(unsigned long long)>
  }
    2776:	pop	{r4, r5}
    2778:	bx	lr

0000277a <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    277a:	push	{r0, r1, r4, lr}
    277c:	mov	r4, r0
    277e:	cbz	r1, 279a <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    2780:	mov	r0, r1
    2782:	str	r1, [sp, #4]
    2784:	bl	f580 <strlen>
    2788:	ldr	r3, [r4, #0]
    278a:	mov	r2, r0
    278c:	ldr	r1, [sp, #4]
    278e:	ldr	r3, [r3, #4]
    2790:	mov	r0, r4
    2792:	add	sp, #8
    2794:	ldmia.w	sp!, {r4, lr}
    2798:	bx	r3
    279a:	add	sp, #8
    279c:	pop	{r4, pc}

0000279e <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    279e:	push	{r4, lr}
    27a0:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    27a2:	bl	277a <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    27a6:	mov	r0, r4
    27a8:	ldmia.w	sp!, {r4, lr}
    27ac:	b.w	ca38 <Print::println()>

000027b0 <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() :
    27b0:	ldr	r3, [r0, #56]	; 0x38
    27b2:	cbz	r3, 27ba <FsBaseFile::sync()+0xa>
    27b4:	mov	r0, r3
    27b6:	b.w	787c <FatFile::sync()>
    27ba:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->sync() : false;
    27bc:	cbz	r0, 27c2 <FsBaseFile::sync()+0x12>
    27be:	b.w	6bdc <ExFatFile::sync()>
  }
    27c2:	bx	lr

000027c4 <timeStamp()>:
{
    27c4:	push	{r4, lr}
    27c6:	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    27c8:	ldr	r4, [pc, #52]	; (2800 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    27ca:	add	r0, sp, #16
    27cc:	bl	3940 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    27d0:	ldrsb.w	r3, [sp, #23]
    27d4:	ldrsh.w	r2, [sp, #16]
    27d8:	mov	r0, r4
    27da:	str	r3, [sp, #12]
    27dc:	ldrsb.w	r3, [sp, #22]
    27e0:	ldr	r1, [pc, #32]	; (2804 <timeStamp()+0x40>)
    27e2:	str	r3, [sp, #8]
    27e4:	ldrsb.w	r3, [sp, #21]
    27e8:	str	r3, [sp, #4]
    27ea:	ldrsb.w	r3, [sp, #19]
    27ee:	str	r3, [sp, #0]
    27f0:	ldrsb.w	r3, [sp, #18]
    27f4:	bl	eb1c <sprintf>
}
    27f8:	mov	r0, r4
    27fa:	add	sp, #24
    27fc:	pop	{r4, pc}
    27fe:	nop
    2800:	.word	0x20010b16
    2804:	.word	0x20007b05

00002808 <headerInit(long, long, long, int)>:
{
    2808:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  memcpy(wav_hdr.rId,"RIFF",4);
    280a:	ldr	r4, [pc, #184]	; (28c4 <headerInit(long, long, long, int)+0xbc>)
  int nbytes=nbits/8;
    280c:	cmp	r2, #0
    280e:	str	r3, [sp, #4]
    2810:	mov	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    2812:	ldr	r3, [pc, #180]	; (28c8 <headerInit(long, long, long, int)+0xc0>)
  int nbytes=nbits/8;
    2814:	it	lt
    2816:	addlt	r5, r2, #7
  wav_hdr.nSamplesPerSec=fsamp;
    2818:	str	r0, [r4, #24]
  wav_hdr.nChannels=nchan;
    281a:	uxth	r6, r1
  memcpy(wav_hdr.rId,"RIFF",4);
    281c:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    281e:	sub.w	r3, r3, #15728640	; 0xf00000
  int nbytes=nbits/8;
    2822:	asrs	r5, r5, #3
  wav_hdr.nBitsPerSamples=nbits;
    2824:	strh	r2, [r4, #34]	; 0x22
  memcpy(wav_hdr.wId,"WAVE",4);
    2826:	subw	r3, r3, #2043	; 0x7fb
  wav_hdr.nChannels=nchan;
    282a:	strh	r6, [r4, #22]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    282c:	muls	r0, r5
  memcpy(wav_hdr.wId,"WAVE",4);
    282e:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    2830:	add.w	r3, r3, #3674210304	; 0xdb000000
  wav_hdr.nBlockAlign=nchan*nbytes;
    2834:	smulbb	r5, r5, r6
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2838:	muls	r1, r0
  memcpy(wav_hdr.fId,"fmt ",4);
    283a:	add.w	r3, r3, #1974272	; 0x1e2000
  strcpy(&wav_hdr.info[0], MAGIC);
    283e:	add.w	r0, r4, #44	; 0x2c
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2842:	str	r1, [r4, #28]
  memcpy(wav_hdr.fId,"fmt ",4);
    2844:	addw	r3, r3, #3087	; 0xc0f
  strcpy(&wav_hdr.info[0], MAGIC);
    2848:	ldr	r1, [pc, #128]	; (28cc <headerInit(long, long, long, int)+0xc4>)
  wav_hdr.nBlockAlign=nchan*nbytes;
    284a:	strh	r5, [r4, #32]
  memcpy(wav_hdr.fId,"fmt ",4);
    284c:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    284e:	add.w	r3, r3, #1090519040	; 0x41000000
    2852:	subw	r3, r3, #3074	; 0xc02
    2856:	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    285a:	add.w	r3, r3, #218107136	; 0xd000d00
    285e:	add.w	r3, r3, #15859712	; 0xf20000
    2862:	adds	r3, #5
    2864:	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    2866:	mov.w	r3, #504	; 0x1f8
    286a:	str	r3, [r4, #4]
  wav_hdr.fLen = 0x10;
    286c:	movs	r3, #16
    286e:	str	r3, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
    2870:	mov.w	r3, #460	; 0x1cc
    2874:	str	r3, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    2876:	movs	r3, #0
    2878:	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    287c:	movs	r3, #1
    287e:	strh	r3, [r4, #20]
  strcpy(&wav_hdr.info[0], MAGIC);
    2880:	bl	f41c <strcpy>
  strcpy(&wav_hdr.info[4], timeStamp());
    2884:	bl	27c4 <timeStamp()>
    2888:	mov	r1, r0
    288a:	add.w	r0, r4, #48	; 0x30
    288e:	bl	f41c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    2892:	ldr	r2, [sp, #4]
    2894:	ldr	r1, [pc, #56]	; (28d0 <headerInit(long, long, long, int)+0xc8>)
    2896:	add.w	r0, r4, #64	; 0x40
    289a:	bl	eb1c <sprintf>
  memcpy(&wav_hdr.info[30], getStore(),16*2);
    289e:	adds	r4, #74	; 0x4a
    28a0:	bl	2604 <getStore()>
    28a4:	add.w	r3, r0, #32
    28a8:	ldr.w	r2, [r0], #4
    28ac:	cmp	r0, r3
    28ae:	str.w	r2, [r4], #4
    28b2:	bne.n	28a8 <headerInit(long, long, long, int)+0xa0>
  strcpy(&wav_hdr.info[62]," end");
    28b4:	ldr	r1, [pc, #28]	; (28d4 <headerInit(long, long, long, int)+0xcc>)
    28b6:	ldr	r0, [pc, #32]	; (28d8 <headerInit(long, long, long, int)+0xd0>)
    28b8:	bl	f41c <strcpy>
}
    28bc:	ldr	r0, [pc, #4]	; (28c4 <headerInit(long, long, long, int)+0xbc>)
    28be:	add	sp, #12
    28c0:	pop	{r4, r5, r6, r7, pc}
    28c2:	nop
    28c4:	.word	0x2000f7f4
    28c8:	.word	0x46464952
    28cc:	.word	0x20007af4
    28d0:	.word	0x20007af9
    28d4:	.word	0x20007afe
    28d8:	.word	0x2000f85e

000028dc <headerUpdate(long)>:
  wav_hdr.dLen = nbytes;
    28dc:	ldr	r3, [pc, #12]	; (28ec <headerUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    28de:	ldr	r2, [r3, #4]
  wav_hdr.dLen = nbytes;
    28e0:	str.w	r0, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    28e4:	add	r2, r0
}
    28e6:	mov	r0, r3
  wav_hdr.rLen += wav_hdr.dLen;
    28e8:	str	r2, [r3, #4]
}
    28ea:	bx	lr
    28ec:	.word	0x2000f7f4

000028f0 <writeHeader(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    28f0:	ldr	r3, [pc, #76]	; (2940 <writeHeader(char*)+0x50>)
    28f2:	ldr	r2, [r3, #72]	; 0x48
{ 
    28f4:	push	{r4, r5, r6, lr}
    28f6:	mov	r6, r0
    28f8:	cbz	r2, 292e <writeHeader(char*)+0x3e>
    28fa:	ldr	r4, [r2, #20]
    28fc:	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    28fe:	mov	r2, r4
    2900:	mov	r3, r5
    2902:	ldr	r1, [pc, #64]	; (2944 <writeHeader(char*)+0x54>)
    2904:	ldr	r0, [pc, #64]	; (2948 <writeHeader(char*)+0x58>)
    2906:	bl	ca70 <Print::printf(char const*, ...)>
  file.seekSet(0);
    290a:	movs	r3, #0
    290c:	movs	r2, #0
    290e:	ldr	r0, [pc, #60]	; (294c <writeHeader(char*)+0x5c>)
    2910:	bl	275a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write(wav_hdr,512);
    2914:	mov.w	r2, #512	; 0x200
    2918:	mov	r1, r6
    291a:	ldr	r0, [pc, #48]	; (294c <writeHeader(char*)+0x5c>)
    291c:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  file.seekSet(fpos);
    2920:	mov	r2, r4
    2922:	mov	r3, r5
    2924:	ldr	r0, [pc, #36]	; (294c <writeHeader(char*)+0x5c>)
}
    2926:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    292a:	b.w	275a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    292e:	ldr	r3, [r3, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    2930:	cbz	r3, 2938 <writeHeader(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    2932:	ldrd	r4, r5, [r3]
    2936:	b.n	28fe <writeHeader(char*)+0xe>
    2938:	mov	r4, r3
    293a:	mov	r5, r3
    293c:	b.n	28fe <writeHeader(char*)+0xe>
    293e:	nop
    2940:	.word	0x20010184
    2944:	.word	0x20007bc5
    2948:	.word	0x20008a64
    294c:	.word	0x20010194

00002950 <makeHeader(long*)>:
{
    2950:	push	{r4, lr}
    2952:	sub	sp, #32
    2954:	mov	r4, r0
    rtc_get_datetime(&t);
    2956:	add	r0, sp, #24
    2958:	bl	3940 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    295c:	ldrsb.w	r3, [sp, #31]
    2960:	ldr	r2, [pc, #120]	; (29dc <makeHeader(long*)+0x8c>)
    2962:	mov	r0, r4
    2964:	str	r3, [sp, #16]
    2966:	ldrsb.w	r3, [sp, #30]
    296a:	ldr	r1, [pc, #116]	; (29e0 <makeHeader(long*)+0x90>)
    296c:	str	r3, [sp, #12]
    296e:	ldrsb.w	r3, [sp, #29]
    2972:	str	r3, [sp, #8]
    2974:	ldrsb.w	r3, [sp, #27]
    2978:	str	r3, [sp, #4]
    297a:	ldrsb.w	r3, [sp, #26]
    297e:	str	r3, [sp, #0]
    2980:	ldrsh.w	r3, [sp, #24]
    2984:	bl	eb1c <sprintf>
    header[5] = 20;          // SW version
    2988:	movs	r3, #20
    header[8] = NCHAN_ACQ;
    298a:	movs	r0, #1
    header[5] = 20;          // SW version
    298c:	str	r3, [r4, #20]
    header[6] = SerNum;      // serial number
    298e:	ldr	r3, [pc, #84]	; (29e4 <makeHeader(long*)+0x94>)
    header[8] = NCHAN_ACQ;
    2990:	str	r0, [r4, #32]
    header[6] = SerNum;      // serial number
    2992:	ldr	r3, [r3, #0]
    2994:	str	r3, [r4, #24]
    header[7] = fsamp;
    2996:	ldr	r3, [pc, #80]	; (29e8 <makeHeader(long*)+0x98>)
    2998:	ldr	r3, [r3, #0]
    299a:	str	r3, [r4, #28]
    header[9] = t_acq;
    299c:	ldr	r3, [pc, #76]	; (29ec <makeHeader(long*)+0x9c>)
    299e:	ldr	r3, [r3, #0]
    29a0:	str	r3, [r4, #36]	; 0x24
    header[10] = t_on;
    29a2:	ldr	r3, [pc, #76]	; (29f0 <makeHeader(long*)+0xa0>)
    29a4:	ldr	r3, [r3, #0]
    29a6:	str	r3, [r4, #40]	; 0x28
    header[11] = t_rep;
    29a8:	ldr	r3, [pc, #72]	; (29f4 <makeHeader(long*)+0xa4>)
    29aa:	ldr	r3, [r3, #0]
    29ac:	str	r3, [r4, #44]	; 0x2c
    header[12] = proc;
    29ae:	ldr	r3, [pc, #72]	; (29f8 <makeHeader(long*)+0xa8>)
    29b0:	ldrh	r3, [r3, #0]
    29b2:	sxth	r3, r3
    29b4:	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    29b6:	ldr	r3, [pc, #68]	; (29fc <makeHeader(long*)+0xac>)
    29b8:	ldrh	r3, [r3, #0]
    29ba:	sxth	r3, r3
    29bc:	str	r3, [r4, #52]	; 0x34
    header[14] = again;
    29be:	ldr	r3, [pc, #64]	; (2a00 <makeHeader(long*)+0xb0>)
    29c0:	ldrh	r3, [r3, #0]
    29c2:	sxth	r3, r3
    29c4:	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    29c6:	ldr	r3, [pc, #60]	; (2a04 <makeHeader(long*)+0xb4>)
    29c8:	ldrh	r3, [r3, #0]
    29ca:	sxth	r3, r3
    29cc:	str	r3, [r4, #60]	; 0x3c
    header[127]=0x55555555;
    29ce:	mov.w	r3, #1431655765	; 0x55555555
    29d2:	str.w	r3, [r4, #508]	; 0x1fc
}
    29d6:	add	sp, #32
    29d8:	pop	{r4, pc}
    29da:	nop
    29dc:	.word	0x20007af4
    29e0:	.word	0x20007b03
    29e4:	.word	0x2000c1c8
    29e8:	.word	0x200093d0
    29ec:	.word	0x200093ec
    29f0:	.word	0x200093f0
    29f4:	.word	0x2001095c
    29f8:	.word	0x200109a2
    29fc:	.word	0x20010a46
    2a00:	.word	0x200093f8
    2a04:	.word	0x2001099c

00002a08 <checkEndOfFile(short)>:
  if(state==RUNNING)
    2a08:	cmp	r0, #2
{ 
    2a0a:	push	{r4, lr}
    2a0c:	mov	r4, r0
  if(state==RUNNING)
    2a0e:	bne.n	2a38 <checkEndOfFile(short)+0x30>
    uint32_t tt = rtc_get();
    2a10:	bl	bcb0 <rtc_get>
    uint32_t dt1 = tt % t_acq;
    2a14:	ldr	r3, [pc, #60]	; (2a54 <checkEndOfFile(short)+0x4c>)
    2a16:	ldr	r2, [r3, #0]
    2a18:	udiv	r3, r0, r2
    2a1c:	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2a20:	ldr	r2, [pc, #52]	; (2a58 <checkEndOfFile(short)+0x50>)
    2a22:	ldr	r1, [r2, #0]
    dta = dt1;
    2a24:	str	r3, [r2, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2a26:	cmp	r3, r1
    2a28:	bcs.n	2a38 <checkEndOfFile(short)+0x30>
    if(t_rep>t_on)                      // and if foreseen  check for hibernation
    2a2a:	ldr	r3, [pc, #48]	; (2a5c <checkEndOfFile(short)+0x54>)
    2a2c:	ldr	r2, [pc, #48]	; (2a60 <checkEndOfFile(short)+0x58>)
    2a2e:	ldr	r4, [r3, #0]
    2a30:	ldr	r1, [r2, #0]
    2a32:	cmp	r4, r1
    2a34:	bhi.n	2a3c <checkEndOfFile(short)+0x34>
    2a36:	movs	r4, #3
}
    2a38:	mov	r0, r4
    2a3a:	pop	{r4, pc}
      uint32_t dt2 = (tt % t_rep);
    2a3c:	ldr	r3, [r3, #0]
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2a3e:	ldr	r4, [r2, #0]
      uint32_t dt2 = (tt % t_rep);
    2a40:	udiv	r2, r0, r3
    2a44:	mls	r0, r3, r2, r0
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2a48:	cmp	r0, r4
    2a4a:	ite	cc
    2a4c:	movcc	r4, #3
    2a4e:	movcs	r4, #4
    2a50:	b.n	2a38 <checkEndOfFile(short)+0x30>
    2a52:	nop
    2a54:	.word	0x200093ec
    2a58:	.word	0x2000fc3c
    2a5c:	.word	0x2001095c
    2a60:	.word	0x200093f0

00002a64 <newFolder(int)>:

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    2a64:	ldr	r3, [pc, #12]	; (2a74 <newFolder(int)+0x10>)
    2a66:	ldr	r2, [r3, #0]
    2a68:	cmp	r2, r0
  d0=d;
    2a6a:	itte	ne
    2a6c:	strne	r0, [r3, #0]
  return 1;
    2a6e:	movne	r0, #1
  if(d==d0) return 0; // same day
    2a70:	moveq	r0, #0
}
    2a72:	bx	lr
    2a74:	.word	0x20008e34

00002a78 <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    2a78:	push	{r4, lr}
    2a7a:	sub	sp, #24
    2a7c:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2a7e:	add	r0, sp, #16
    2a80:	bl	3940 <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    2a84:	ldrsb.w	r1, [sp, #21]
    2a88:	mov	r0, r1
    2a8a:	bl	2a64 <newFolder(int)>
    2a8e:	cbz	r0, 2aca <newDirectory(char*)+0x52>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    2a90:	ldrsb.w	r3, [sp, #19]
    2a94:	mov	r0, r4
    2a96:	ldr	r2, [pc, #56]	; (2ad0 <newDirectory(char*)+0x58>)
    2a98:	str	r3, [sp, #8]
    2a9a:	ldrsb.w	r3, [sp, #18]
    2a9e:	str	r1, [sp, #12]
    2aa0:	str	r3, [sp, #4]
    2aa2:	ldrsh.w	r3, [sp, #16]
    2aa6:	ldr	r1, [pc, #44]	; (2ad4 <newDirectory(char*)+0x5c>)
    2aa8:	str	r3, [sp, #0]
    2aaa:	ldr	r3, [pc, #44]	; (2ad8 <newDirectory(char*)+0x60>)
    2aac:	ldr	r3, [r3, #0]
    2aae:	bl	eb1c <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
    2ab2:	ldr	r0, [pc, #40]	; (2adc <newDirectory(char*)+0x64>)
    2ab4:	bl	ca38 <Print::println()>
	size_t print(const char s[])			{ return write(s); }
    2ab8:	ldr	r1, [pc, #36]	; (2ae0 <newDirectory(char*)+0x68>)
    2aba:	ldr	r0, [pc, #32]	; (2adc <newDirectory(char*)+0x64>)
    2abc:	bl	277a <Print::write(char const*) [clone .isra.0]>
    2ac0:	ldr	r0, [pc, #24]	; (2adc <newDirectory(char*)+0x64>)
    2ac2:	mov	r1, r4
    2ac4:	bl	277a <Print::write(char const*) [clone .isra.0]>
          return 1;   // have new directory
    2ac8:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    2aca:	add	sp, #24
    2acc:	pop	{r4, pc}
    2ace:	nop
    2ad0:	.word	0x20007bd0
    2ad4:	.word	0x20007bd2
    2ad8:	.word	0x2000c1c8
    2adc:	.word	0x20008a64
    2ae0:	.word	0x2000805d

00002ae4 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    2ae4:	push	{r4, r5, r6, r7, lr}
    2ae6:	sub	sp, #36	; 0x24
    2ae8:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2aea:	add	r0, sp, #24
    2aec:	bl	3940 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    2af0:	ldr	r3, [pc, #84]	; (2b48 <newFileName(char*)+0x64>)
    2af2:	ldrsb.w	r7, [sp, #31]
    2af6:	ldrh	r2, [r3, #0]
    2af8:	ldrsb.w	r6, [sp, #30]
    2afc:	ldrsb.w	r5, [sp, #29]
    2b00:	sxth	r2, r2
    2b02:	ldrsb.w	r0, [sp, #27]
    2b06:	ldrsb.w	r1, [sp, #26]
    2b0a:	ldrsh.w	r3, [sp, #24]
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2b0e:	str	r1, [sp, #0]
    2b10:	strd	r6, r7, [sp, #12]
    2b14:	strd	r0, r5, [sp, #4]
    if(proc==0)
    2b18:	cbnz	r2, 2b40 <newFileName(char*)+0x5c>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2b1a:	ldr	r2, [pc, #48]	; (2b4c <newFileName(char*)+0x68>)
    2b1c:	ldr	r1, [pc, #48]	; (2b50 <newFileName(char*)+0x6c>)
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2b1e:	mov	r0, r4
    2b20:	bl	eb1c <sprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    2b24:	ldr	r0, [pc, #44]	; (2b54 <newFileName(char*)+0x70>)
    2b26:	bl	ca38 <Print::println()>
    2b2a:	ldr	r1, [pc, #44]	; (2b58 <newFileName(char*)+0x74>)
    2b2c:	ldr	r0, [pc, #36]	; (2b54 <newFileName(char*)+0x70>)
    2b2e:	bl	277a <Print::write(char const*) [clone .isra.0]>
    2b32:	mov	r1, r4
    2b34:	ldr	r0, [pc, #28]	; (2b54 <newFileName(char*)+0x70>)
    2b36:	bl	277a <Print::write(char const*) [clone .isra.0]>
    return 1;
}
    2b3a:	movs	r0, #1
    2b3c:	add	sp, #36	; 0x24
    2b3e:	pop	{r4, r5, r6, r7, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2b40:	ldr	r2, [pc, #8]	; (2b4c <newFileName(char*)+0x68>)
    2b42:	ldr	r1, [pc, #24]	; (2b5c <newFileName(char*)+0x78>)
    2b44:	b.n	2b1e <newFileName(char*)+0x3a>
    2b46:	nop
    2b48:	.word	0x200109a2
    2b4c:	.word	0x20007b5d
    2b50:	.word	0x20007b5f
    2b54:	.word	0x20008a64
    2b58:	.word	0x2000805d
    2b5c:	.word	0x20007b7f

00002b60 <getAlarmTime(unsigned long)>:
{   // estimate the wakup-time in seconds 
    // input: actual time
    // output: next wakup time
    //
    uint32_t dd = secs/(24*3600); // days
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    2b60:	ldr	r2, [pc, #132]	; (2be8 <getAlarmTime(unsigned long)+0x88>)
    2b62:	udiv	r3, r0, r2
    2b66:	mls	r3, r2, r3, r0
    2b6a:	mov.w	r2, #3600	; 0xe10
    2b6e:	udiv	r3, r3, r2

    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2b72:	ldr	r2, [pc, #120]	; (2bec <getAlarmTime(unsigned long)+0x8c>)
    2b74:	ldr	r1, [r2, #0]
    2b76:	cmp	r1, r3
{   // estimate the wakup-time in seconds 
    2b78:	push	{r4, r5, r6, lr}
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2b7a:	bhi.n	2b84 <getAlarmTime(unsigned long)+0x24>
    2b7c:	ldr	r1, [pc, #112]	; (2bf0 <getAlarmTime(unsigned long)+0x90>)
    2b7e:	ldr	r1, [r1, #0]
    2b80:	cmp	r1, r3
    2b82:	bhi.n	2bac <getAlarmTime(unsigned long)+0x4c>
    2b84:	ldr	r5, [pc, #108]	; (2bf4 <getAlarmTime(unsigned long)+0x94>)
    2b86:	ldr	r1, [r5, #0]
    2b88:	cmp	r1, r3
    2b8a:	bhi.n	2b94 <getAlarmTime(unsigned long)+0x34>
    2b8c:	ldr	r1, [pc, #104]	; (2bf8 <getAlarmTime(unsigned long)+0x98>)
    2b8e:	ldr	r1, [r1, #0]
    2b90:	cmp	r1, r3
    2b92:	bhi.n	2bac <getAlarmTime(unsigned long)+0x4c>
    {
      secs = ((secs/t_rep)+1)*t_rep;
    }
    else if (hh<t_1)  // from mid-night to t_1
    2b94:	ldr	r6, [r2, #0]
    uint32_t dd = secs/(24*3600); // days
    2b96:	ldr	r1, [pc, #80]	; (2be8 <getAlarmTime(unsigned long)+0x88>)
    else if (hh<t_1)  // from mid-night to t_1
    2b98:	cmp	r6, r3
    uint32_t dd = secs/(24*3600); // days
    2b9a:	udiv	r4, r0, r1
    else if (hh<t_1)  // from mid-night to t_1
    2b9e:	bhi.n	2bbc <getAlarmTime(unsigned long)+0x5c>
    {
      secs = dd*(24*3600) + t_1*3600;
    }
    else if (hh>=t_2) // between the two recording periods
    2ba0:	ldr	r6, [pc, #76]	; (2bf0 <getAlarmTime(unsigned long)+0x90>)
    2ba2:	ldr	r6, [r6, #0]
    2ba4:	cmp	r6, r3
    2ba6:	bhi.n	2bca <getAlarmTime(unsigned long)+0x6a>
    {
      secs = dd*(24*3600) + t_3*3600;
    2ba8:	ldr	r0, [r5, #0]
    2baa:	b.n	2bbe <getAlarmTime(unsigned long)+0x5e>
      secs = ((secs/t_rep)+1)*t_rep;
    2bac:	ldr	r2, [pc, #76]	; (2bfc <getAlarmTime(unsigned long)+0x9c>)
    2bae:	ldr	r3, [r2, #0]
    2bb0:	udiv	r3, r0, r3
    2bb4:	ldr	r0, [r2, #0]
    2bb6:	mla	r0, r3, r0, r0
    {
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;

    }
    return secs;
}
    2bba:	pop	{r4, r5, r6, pc}
      secs = dd*(24*3600) + t_1*3600;
    2bbc:	ldr	r0, [r2, #0]
      secs = dd*(24*3600) + t_3*3600;
    2bbe:	mov.w	r3, #3600	; 0xe10
    2bc2:	muls	r0, r3
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2bc4:	mla	r0, r1, r4, r0
    2bc8:	b.n	2bba <getAlarmTime(unsigned long)+0x5a>
    else if (hh>=t_4) // after the second recording period (goes into next day)
    2bca:	ldr	r5, [pc, #44]	; (2bf8 <getAlarmTime(unsigned long)+0x98>)
    2bcc:	ldr	r6, [r5, #0]
    2bce:	cmp	r6, r3
    2bd0:	bhi.n	2bba <getAlarmTime(unsigned long)+0x5a>
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2bd2:	ldr	r0, [r2, #0]
    2bd4:	ldr	r3, [r5, #0]
    2bd6:	subs	r0, r0, r3
    2bd8:	mov.w	r3, #3600	; 0xe10
    2bdc:	muls	r0, r3
    2bde:	add.w	r0, r0, #86016	; 0x15000
    2be2:	add.w	r0, r0, #384	; 0x180
    2be6:	b.n	2bc4 <getAlarmTime(unsigned long)+0x64>
    2be8:	.word	0x00015180
    2bec:	.word	0x20010954
    2bf0:	.word	0x200093e0
    2bf4:	.word	0x200093e4
    2bf8:	.word	0x200093e8
    2bfc:	.word	0x2001095c

00002c00 <powerDown()>:

void powerDown(void)
{
  SNVS_LPCR |= (1 << 6); // turn off power
    2c00:	ldr	r2, [pc, #12]	; (2c10 <powerDown()+0x10>)
    2c02:	ldr	r3, [r2, #56]	; 0x38
    2c04:	orr.w	r3, r3, #64	; 0x40
    2c08:	str	r3, [r2, #56]	; 0x38
  while (1) asm("wfi");      
    2c0a:	wfi
    2c0c:	b.n	2c0a <powerDown()+0xa>
    2c0e:	nop
    2c10:	.word	0x400d4000

00002c14 <do_hibernate(unsigned long)>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(uint32_t t_rep)
{
    uint32_t tmp = SNVS_LPCR;   // save control register
    2c14:	ldr	r3, [pc, #144]	; (2ca8 <do_hibernate(unsigned long)+0x94>)
{
    2c16:	push	{r0, r1, r4, r5, r6, lr}
    uint32_t tmp = SNVS_LPCR;   // save control register
    2c18:	ldr	r6, [r3, #56]	; 0x38

    SNVS_LPSR |= 1;
    2c1a:	ldr	r2, [r3, #76]	; 0x4c
    2c1c:	orr.w	r2, r2, #1
    2c20:	str	r2, [r3, #76]	; 0x4c
    asm volatile("DSB");
    2c22:	dsb	sy

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2c26:	ldr	r2, [r3, #56]	; 0x38
    2c28:	bic.w	r2, r2, #2
    2c2c:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2c2e:	ldr	r2, [r3, #56]	; 0x38
    2c30:	ands.w	r2, r2, #2
    2c34:	bne.n	2c2e <do_hibernate(unsigned long)+0x1a>

    // clear alarm value
    SNVS_LPTAR = 0;
    2c36:	str	r2, [r3, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    2c38:	ldr	r2, [r3, #88]	; 0x58
    2c3a:	cmp	r2, #0
    2c3c:	bne.n	2c38 <do_hibernate(unsigned long)+0x24>

    __disable_irq();
    2c3e:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    2c40:	ldr	r5, [pc, #100]	; (2ca8 <do_hibernate(unsigned long)+0x94>)
    2c42:	ldr	r2, [r5, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    2c44:	ldr	r4, [r5, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    2c46:	ldr	r1, [r5, #84]	; 0x54
    2c48:	ldr	r3, [r5, #80]	; 0x50
    2c4a:	cmp	r1, r4
    2c4c:	bne.n	2c42 <do_hibernate(unsigned long)+0x2e>
    2c4e:	subs	r3, r3, r2
    2c50:	it	ne
    2c52:	movne	r3, #1
    2c54:	cmp	r3, #0
    2c56:	bne.n	2c42 <do_hibernate(unsigned long)+0x2e>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2c58:	lsrs	r4, r4, #15
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2c5a:	ldr	r0, [pc, #80]	; (2cac <do_hibernate(unsigned long)+0x98>)
    2c5c:	str	r3, [sp, #4]
    2c5e:	orr.w	r4, r4, r2, lsl #17
    2c62:	movs	r2, #10
    2c64:	mov	r1, r4
    2c66:	bl	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(const char s[])			{ return write(s); }
    2c6a:	ldr	r1, [pc, #68]	; (2cb0 <do_hibernate(unsigned long)+0x9c>)
    2c6c:	ldr	r0, [pc, #60]	; (2cac <do_hibernate(unsigned long)+0x98>)
    2c6e:	bl	277a <Print::write(char const*) [clone .isra.0]>

    //set alarm
    Serial.print(secs); Serial.print(" ");
    secs = getAlarmTime(secs);
    2c72:	mov	r0, r4
    2c74:	bl	2b60 <getAlarmTime(unsigned long)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2c78:	ldr	r3, [sp, #4]
    2c7a:	mov	r1, r0
    2c7c:	mov	r4, r0
    2c7e:	movs	r2, #10
    2c80:	ldr	r0, [pc, #40]	; (2cac <do_hibernate(unsigned long)+0x98>)
    2c82:	bl	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    2c86:	ldr	r0, [pc, #36]	; (2cac <do_hibernate(unsigned long)+0x98>)
    2c88:	bl	ca38 <Print::println()>
    Serial.println(secs);

    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
    2c8c:	ldr	r3, [pc, #24]	; (2ca8 <do_hibernate(unsigned long)+0x94>)
    SNVS_LPTAR = secs;
    2c8e:	str	r4, [r5, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    2c90:	ldr	r2, [r3, #88]	; 0x58
    2c92:	cmp	r2, r4
    2c94:	bne.n	2c90 <do_hibernate(unsigned long)+0x7c>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    2c96:	orr.w	r6, r6, #2
    2c9a:	str	r6, [r3, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    2c9c:	ldr	r2, [r3, #56]	; 0x38
    2c9e:	lsls	r2, r2, #30
    2ca0:	bpl.n	2c9c <do_hibernate(unsigned long)+0x88>

    __enable_irq();
    2ca2:	cpsie	i
  
    //
    powerDown(); 
    2ca4:	bl	2c00 <powerDown()>
    2ca8:	.word	0x400d4000
    2cac:	.word	0x20008a64
    2cb0:	.word	0x20008065

00002cb4 <storeData(short)>:
{
    2cb4:	push	{r4, r5, lr}
    if(status==CLOSED) // file closed: should open
    2cb6:	mov	r4, r0
{
    2cb8:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    2cba:	cmp	r0, #0
    2cbc:	bne.w	2dc6 <storeData(short)+0x112>
        if(newDirectory(dirName))
    2cc0:	ldr	r0, [pc, #516]	; (2ec8 <storeData(short)+0x214>)
    2cc2:	bl	2a78 <newDirectory(char*)>
    2cc6:	cmp	r0, #0
    2cc8:	beq.n	2d64 <storeData(short)+0xb0>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    2cca:	ldr	r5, [pc, #512]	; (2ecc <storeData(short)+0x218>)
    2ccc:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    2cce:	ldr.w	r1, [r3, #1152]	; 0x480
    2cd2:	cbz	r1, 2d02 <storeData(short)+0x4e>
    return tmp.open(this, path, O_RDONLY);
    2cd4:	mov	r3, r4
    2cd6:	ldr	r2, [pc, #496]	; (2ec8 <storeData(short)+0x214>)
    2cd8:	mov	r0, sp
    2cda:	str	r4, [sp, #0]
    2cdc:	bl	79aa <FatFile::open(FatVolume*, char const*, int)>
    2ce0:	cbnz	r0, 2d40 <storeData(short)+0x8c>
    2ce2:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    2ce4:	ldr.w	r1, [r3, #1152]	; 0x480
    2ce8:	cbnz	r1, 2d1a <storeData(short)+0x66>
    2cea:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    2cee:	cbz	r0, 2d2e <storeData(short)+0x7a>
  ExFatFile() {}
    2cf0:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    2cf2:	movs	r3, #1
    2cf4:	add.w	r1, r0, #1096	; 0x448
    2cf8:	ldr	r2, [pc, #460]	; (2ec8 <storeData(short)+0x214>)
    2cfa:	mov	r0, sp
    2cfc:	bl	6d16 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2d00:	b.n	2d2c <storeData(short)+0x78>
    2d02:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    2d06:	cmp	r0, #0
    2d08:	beq.n	2ce2 <storeData(short)+0x2e>
    return tmp.open(this, path, O_RDONLY);
    2d0a:	mov	r3, r1
    2d0c:	str	r1, [sp, #48]	; 0x30
    2d0e:	ldr	r2, [pc, #440]	; (2ec8 <storeData(short)+0x214>)
    2d10:	mov	r1, r0
    2d12:	mov	r0, sp
    2d14:	bl	649e <ExFatFile::open(ExFatVolume*, char const*, int)>
    2d18:	b.n	2ce0 <storeData(short)+0x2c>
    2d1a:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    2d1c:	ldr	r2, [pc, #424]	; (2ec8 <storeData(short)+0x214>)
    2d1e:	add.w	r1, r1, #1096	; 0x448
    2d22:	mov	r0, sp
    2d24:	str	r3, [sp, #0]
    2d26:	movs	r3, #1
    2d28:	bl	7ab2 <FatFile::mkdir(FatFile*, char const*, bool)>
    2d2c:	cbnz	r0, 2d40 <storeData(short)+0x8c>
    2d2e:	ldr	r1, [pc, #416]	; (2ed0 <storeData(short)+0x21c>)
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    2d30:	ldr	r0, [pc, #416]	; (2ed4 <storeData(short)+0x220>)
    2d32:	bl	279e <Print::println(char const*) [clone .isra.0]>
        {  return STOPPED; // if file open fails: don't do anything
    2d36:	mov.w	r4, #4294967295
}
    2d3a:	mov	r0, r4
    2d3c:	add	sp, #84	; 0x54
    2d3e:	pop	{r4, r5, pc}
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    2d40:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    2d42:	ldr.w	r0, [r3, #1152]	; 0x480
    2d46:	cbz	r0, 2d54 <storeData(short)+0xa0>
    2d48:	ldr	r1, [pc, #380]	; (2ec8 <storeData(short)+0x214>)
    2d4a:	bl	830c <FatVolume::chdir(char const*)>
    2d4e:	cbnz	r0, 2d64 <storeData(short)+0xb0>
    2d50:	ldr	r1, [pc, #388]	; (2ed8 <storeData(short)+0x224>)
    2d52:	b.n	2d30 <storeData(short)+0x7c>
    2d54:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    2d58:	cmp	r0, #0
    2d5a:	beq.n	2d50 <storeData(short)+0x9c>
    2d5c:	ldr	r1, [pc, #360]	; (2ec8 <storeData(short)+0x214>)
    2d5e:	bl	68e8 <ExFatVolume::chdir(char const*)>
    2d62:	b.n	2d4e <storeData(short)+0x9a>
        if(newFileName(fileName))
    2d64:	ldr	r0, [pc, #372]	; (2edc <storeData(short)+0x228>)
    2d66:	bl	2ae4 <newFileName(char*)>
    2d6a:	cmp	r0, #0
    2d6c:	beq.n	2d36 <storeData(short)+0x82>
            file = sd->open(fileName, FILE_WRITE); 
    2d6e:	ldr	r1, [pc, #348]	; (2ecc <storeData(short)+0x218>)
    2d70:	movw	r3, #16898	; 0x4202
    2d74:	ldr	r2, [pc, #356]	; (2edc <storeData(short)+0x228>)
    2d76:	mov	r0, sp
    2d78:	ldr	r1, [r1, #0]
    2d7a:	bl	8c9c <FsVolume::open(char const*, int)>
class Print
    2d7e:	ldr	r4, [pc, #352]	; (2ee0 <storeData(short)+0x22c>)
    2d80:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    2d82:	add	r1, sp, #16
    2d84:	add.w	r0, r4, #16
    2d88:	str	r3, [r4, #4]
class Stream : public Print
    2d8a:	ldr	r3, [sp, #8]
    2d8c:	str	r3, [r4, #8]
    2d8e:	ldrb.w	r3, [sp, #12]
    2d92:	strb	r3, [r4, #12]
    2d94:	bl	8a92 <FsBaseFile::operator=(FsBaseFile const&)>
    2d98:	mov	r0, sp
    2d9a:	bl	efc <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    2d9e:	ldr	r3, [r4, #72]	; 0x48
    2da0:	cbz	r3, 2dbc <storeData(short)+0x108>
    {   nbuf=0;
    2da2:	ldr	r3, [pc, #320]	; (2ee4 <storeData(short)+0x230>)
    2da4:	movs	r2, #0
    2da6:	str	r2, [r3, #0]
        if(proc==0)
    2da8:	ldr	r3, [pc, #316]	; (2ee8 <storeData(short)+0x234>)
    2daa:	ldrh	r3, [r3, #0]
    2dac:	sxth	r3, r3
    2dae:	cmp	r3, #0
    2db0:	beq.n	2e20 <storeData(short)+0x16c>
          makeHeader(fileHeader);
    2db2:	ldr	r0, [pc, #312]	; (2eec <storeData(short)+0x238>)
    2db4:	bl	2950 <makeHeader(long*)>
          hdr=(char *)fileHeader;
    2db8:	ldr	r1, [pc, #304]	; (2eec <storeData(short)+0x238>)
    2dba:	b.n	2e32 <storeData(short)+0x17e>
    2dbc:	ldr	r3, [r4, #76]	; 0x4c
    2dbe:	cmp	r3, #0
    2dc0:	bne.n	2da2 <storeData(short)+0xee>
            {   Serial.println("Failing open file");
    2dc2:	ldr	r1, [pc, #300]	; (2ef0 <storeData(short)+0x23c>)
    2dc4:	b.n	2d30 <storeData(short)+0x7c>
    if(status==OPENED) // file is open: write first record (header)
    2dc6:	cmp	r0, #1
    2dc8:	beq.n	2da2 <storeData(short)+0xee>
    if(status==RUNNING) // file is open and header written: store data records
    2dca:	cmp	r0, #2
    2dcc:	beq.n	2e42 <storeData(short)+0x18e>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    2dce:	subs	r3, r4, #3
    2dd0:	uxth	r3, r3
    2dd2:	cmp	r3, #2
    2dd4:	bhi.n	2d3a <storeData(short)+0x86>
    2dd6:	ldr	r3, [pc, #264]	; (2ee0 <storeData(short)+0x22c>)
    2dd8:	ldr	r2, [r3, #72]	; 0x48
    2dda:	cbnz	r2, 2de0 <storeData(short)+0x12c>
    2ddc:	ldr	r3, [r3, #76]	; 0x4c
    2dde:	cbz	r3, 2e00 <storeData(short)+0x14c>
        {   if(proc==0)
    2de0:	ldr	r3, [pc, #260]	; (2ee8 <storeData(short)+0x234>)
    2de2:	ldrh	r3, [r3, #0]
    2de4:	sxth	r3, r3
    2de6:	cbnz	r3, 2dfa <storeData(short)+0x146>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    2de8:	ldr	r3, [pc, #248]	; (2ee4 <storeData(short)+0x230>)
    2dea:	mov.w	r0, #6144	; 0x1800
    2dee:	ldr	r3, [r3, #0]
    2df0:	muls	r0, r3
    2df2:	bl	28dc <headerUpdate(long)>
              writeHeader(hdr);
    2df6:	bl	28f0 <writeHeader(char*)>
            file.close();
    2dfa:	ldr	r0, [pc, #248]	; (2ef4 <storeData(short)+0x240>)
    2dfc:	bl	8a68 <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    2e00:	cmp	r4, #4
    2e02:	bne.n	2eb4 <storeData(short)+0x200>
        { if( t_rep > t_on) 
    2e04:	ldr	r4, [pc, #240]	; (2ef8 <storeData(short)+0x244>)
    2e06:	ldr	r3, [pc, #244]	; (2efc <storeData(short)+0x248>)
    2e08:	ldr	r2, [r4, #0]
    2e0a:	ldr	r3, [r3, #0]
    2e0c:	cmp	r2, r3
    2e0e:	bls.n	2ec2 <storeData(short)+0x20e>
            adcReset();
    2e10:	bl	33ec <adcReset()>
            acqPower(LOW);
    2e14:	movs	r0, #0
    2e16:	bl	33d8 <acqPower(int)>
            do_hibernate(t_rep);
    2e1a:	ldr	r0, [r4, #0]
    2e1c:	bl	2c14 <do_hibernate(unsigned long)>
          hdr = headerInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    2e20:	ldr	r3, [pc, #220]	; (2f00 <storeData(short)+0x24c>)
    2e22:	movs	r1, #1
    2e24:	movs	r2, #32
    2e26:	ldr	r0, [r3, #0]
    2e28:	ldr	r3, [pc, #216]	; (2f04 <storeData(short)+0x250>)
    2e2a:	ldr	r3, [r3, #0]
    2e2c:	bl	2808 <headerInit(long, long, long, int)>
    2e30:	mov	r1, r0
        if((nd=file.write(hdr,512)) < 512) 
    2e32:	mov.w	r2, #512	; 0x200
    2e36:	ldr	r0, [pc, #188]	; (2ef4 <storeData(short)+0x240>)
    2e38:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    2e3c:	cmp.w	r0, #512	; 0x200
    2e40:	blt.n	2eb0 <storeData(short)+0x1fc>
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    2e42:	mov.w	r2, #6144	; 0x1800
    2e46:	ldr	r1, [pc, #192]	; (2f08 <storeData(short)+0x254>)
    2e48:	ldr	r0, [pc, #168]	; (2ef4 <storeData(short)+0x240>)
    2e4a:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    2e4e:	cmp.w	r0, #6144	; 0x1800
    2e52:	mov	r4, r0
    2e54:	ldr	r5, [pc, #140]	; (2ee4 <storeData(short)+0x230>)
    2e56:	bcs.n	2ea6 <storeData(short)+0x1f2>
	size_t print(const char s[])			{ return write(s); }
    2e58:	ldr	r1, [pc, #176]	; (2f0c <storeData(short)+0x258>)
    2e5a:	ldr	r0, [pc, #120]	; (2ed4 <storeData(short)+0x220>)
    2e5c:	bl	277a <Print::write(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2e60:	movs	r3, #0
    2e62:	movs	r2, #10
    2e64:	mov	r1, r4
    2e66:	ldr	r0, [pc, #108]	; (2ed4 <storeData(short)+0x220>)
          status=DOCLOSE; 
    2e68:	movs	r4, #3
    2e6a:	bl	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(const char s[])			{ return write(s); }
    2e6e:	ldr	r1, [pc, #160]	; (2f10 <storeData(short)+0x25c>)
    2e70:	ldr	r0, [pc, #96]	; (2ed4 <storeData(short)+0x220>)
    2e72:	bl	277a <Print::write(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2e76:	movs	r1, #2
    2e78:	ldr	r0, [pc, #88]	; (2ed4 <storeData(short)+0x220>)
    2e7a:	bl	ca26 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    2e7e:	ldr	r0, [pc, #84]	; (2ed4 <storeData(short)+0x220>)
    2e80:	bl	ca38 <Print::println()>
        disk_count++;
    2e84:	ldr	r2, [pc, #140]	; (2f14 <storeData(short)+0x260>)
    2e86:	ldr	r3, [r2, #0]
    2e88:	adds	r3, #1
    2e8a:	str	r3, [r2, #0]
    2e8c:	mov.w	r2, #1000	; 0x3e8
    2e90:	ldr	r3, [r5, #0]
    2e92:	udiv	r1, r3, r2
    2e96:	mls	r3, r2, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    2e9a:	cmp	r3, #0
    2e9c:	bne.n	2dce <storeData(short)+0x11a>
    BaseFile::sync();
    2e9e:	ldr	r0, [pc, #84]	; (2ef4 <storeData(short)+0x240>)
    2ea0:	bl	27b0 <FsBaseFile::sync()>
  }
    2ea4:	b.n	2dce <storeData(short)+0x11a>
          nbuf++;
    2ea6:	ldr	r3, [r5, #0]
    2ea8:	movs	r4, #2
    2eaa:	adds	r3, #1
    2eac:	str	r3, [r5, #0]
    2eae:	b.n	2e84 <storeData(short)+0x1d0>
        { status = DOCLOSE;
    2eb0:	movs	r4, #3
    2eb2:	b.n	2dce <storeData(short)+0x11a>
        else if(status==DOCLOSE)
    2eb4:	cmp	r4, #3
    2eb6:	beq.n	2ec2 <storeData(short)+0x20e>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2eb8:	ldr	r3, [pc, #92]	; (2f18 <storeData(short)+0x264>)
    2eba:	movs	r2, #8
    2ebc:	str.w	r2, [r3, #136]	; 0x88
    2ec0:	b.n	2d36 <storeData(short)+0x82>
            status = CLOSED;   // do not hibernate
    2ec2:	movs	r4, #0
    2ec4:	b.n	2d3a <storeData(short)+0x86>
    2ec6:	nop
    2ec8:	.word	0x20010a72
    2ecc:	.word	0x200093d8
    2ed0:	.word	0x20007eac
    2ed4:	.word	0x20008a64
    2ed8:	.word	0x20007eb8
    2edc:	.word	0x20010ac2
    2ee0:	.word	0x20010184
    2ee4:	.word	0x20010200
    2ee8:	.word	0x200109a2
    2eec:	.word	0x2000d9d0
    2ef0:	.word	0x20007ec4
    2ef4:	.word	0x20010194
    2ef8:	.word	0x2001095c
    2efc:	.word	0x200093f0
    2f00:	.word	0x200093d0
    2f04:	.word	0x2000c1c8
    2f08:	.word	0x2000c1d0
    2f0c:	.word	0x20007ed6
    2f10:	.word	0x20008065
    2f14:	.word	0x20010164
    2f18:	.word	0x42004000

00002f1c <saveData(short)>:
    if(status==STOPPED) 
    2f1c:	adds	r3, r0, #1
{
    2f1e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f22:	mov	r4, r0
    if(status==STOPPED) 
    2f24:	bne.n	2f4e <saveData(short)+0x32>
    { while(queue_isBusy()) {;} //wait if acq writes to queue
    2f26:	bl	2628 <queue_isBusy()>
    2f2a:	mov	r5, r0
    2f2c:	cmp	r0, #0
    2f2e:	bne.n	2f26 <saveData(short)+0xa>
      pullData((uint32_t*)tempBuffer0);
    2f30:	ldr	r0, [pc, #180]	; (2fe8 <saveData(short)+0xcc>)
    2f32:	bl	2694 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    2f36:	ldr	r3, [pc, #176]	; (2fe8 <saveData(short)+0xcc>)
    2f38:	ldr	r2, [pc, #176]	; (2fec <saveData(short)+0xd0>)
    2f3a:	ldr.w	r1, [r3], #4
    2f3e:	str.w	r1, [r2, r5, lsl #2]
    2f42:	adds	r5, #1
    2f44:	cmp	r5, #8
    2f46:	bne.n	2f3a <saveData(short)+0x1e>
}
    2f48:	mov	r0, r4
    2f4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(status<CLOSED) return status; // we are stopped: don't do anything
    2f4e:	cmp	r0, #0
    2f50:	blt.n	2f48 <saveData(short)+0x2c>
    status=checkEndOfFile(status);
    2f52:	bl	2a08 <checkEndOfFile(short)>
    2f56:	mov	r4, r0
    if(getDataCount() >= NDBL)
    2f58:	bl	260c <getDataCount()>
    2f5c:	cmp	r0, #11
    2f5e:	bls.n	2f48 <saveData(short)+0x2c>
      if(proc==0)
    2f60:	ldr	r3, [pc, #140]	; (2ff0 <saveData(short)+0xd4>)
    2f62:	ldrh	r5, [r3, #0]
    2f64:	sxth	r5, r5
    2f66:	cbnz	r5, 2fb4 <saveData(short)+0x98>
    2f68:	ldr	r7, [pc, #124]	; (2fe8 <saveData(short)+0xcc>)
    2f6a:	mov	r8, r7
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    2f6c:	bl	2628 <queue_isBusy()>
    2f70:	mov	r6, r0
    2f72:	cmp	r0, #0
    2f74:	bne.n	2f6c <saveData(short)+0x50>
        for(int ii=0; ii<NDBL; ii++)
    2f76:	adds	r5, #1
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    2f78:	mov	r0, r8
    2f7a:	bl	2694 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    2f7e:	add.w	r8, r8, #512	; 0x200
    2f82:	cmp	r5, #12
    2f84:	bne.n	2f6c <saveData(short)+0x50>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    2f86:	ldr	r3, [pc, #100]	; (2fec <saveData(short)+0xd0>)
    2f88:	ldr.w	r2, [r7], #4
    2f8c:	str.w	r2, [r3, r6, lsl #2]
    2f90:	adds	r6, #1
    2f92:	cmp	r6, #8
    2f94:	bne.n	2f88 <saveData(short)+0x6c>
          { diskBuffer[ii]=tempBuffer0[ii];
    2f96:	mov.w	r2, #6144	; 0x1800
    2f9a:	ldr	r1, [pc, #76]	; (2fe8 <saveData(short)+0xcc>)
    2f9c:	ldr	r0, [pc, #84]	; (2ff4 <saveData(short)+0xd8>)
    2f9e:	bl	a56c <memcpy>
      if(haveStore)
    2fa2:	ldr	r3, [pc, #84]	; (2ff8 <saveData(short)+0xdc>)
    2fa4:	ldr	r3, [r3, #0]
    2fa6:	cmp	r3, #0
    2fa8:	beq.n	2f48 <saveData(short)+0x2c>
        status=storeData(status);
    2faa:	mov	r0, r4
}
    2fac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status=storeData(status);
    2fb0:	b.w	2cb4 <storeData(short)>
    2fb4:	ldr	r6, [pc, #60]	; (2ff4 <saveData(short)+0xd8>)
        for(int ii=0; ii<NDBL; ii++)
    2fb6:	movs	r7, #0
      if(proc==0)
    2fb8:	mov	r8, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    2fba:	bl	2628 <queue_isBusy()>
    2fbe:	mov	r5, r0
    2fc0:	cmp	r0, #0
    2fc2:	bne.n	2fba <saveData(short)+0x9e>
        for(int ii=0; ii<NDBL; ii++)
    2fc4:	adds	r7, #1
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    2fc6:	mov	r0, r8
    2fc8:	bl	2694 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    2fcc:	add.w	r8, r8, #512	; 0x200
    2fd0:	cmp	r7, #12
    2fd2:	bne.n	2fba <saveData(short)+0x9e>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    2fd4:	ldr	r3, [pc, #20]	; (2fec <saveData(short)+0xd0>)
    2fd6:	ldr.w	r2, [r6], #4
    2fda:	str.w	r2, [r3, r5, lsl #2]
    2fde:	adds	r5, #1
    2fe0:	cmp	r5, #8
    2fe2:	bne.n	2fd6 <saveData(short)+0xba>
    2fe4:	b.n	2fa2 <saveData(short)+0x86>
    2fe6:	nop
    2fe8:	.word	0x2000dbdc
    2fec:	.word	0x200101d8
    2ff0:	.word	0x200109a2
    2ff4:	.word	0x2000c1d0
    2ff8:	.word	0x200101d4

00002ffc <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    2ffc:	ldr	r0, [pc, #28]	; (301c <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2ffe:	movs	r3, #0
    3000:	mov.w	r2, #1000	; 0x3e8
FsFile file;
    3004:	ldr	r1, [pc, #24]	; (3020 <_GLOBAL__sub_I_t_acq+0x24>)
    3006:	strb	r3, [r0, #12]
    3008:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    300c:	strd	r3, r3, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3010:	ldr	r3, [pc, #16]	; (3024 <_GLOBAL__sub_I_t_acq+0x28>)
    3012:	ldr	r2, [pc, #20]	; (3028 <_GLOBAL__sub_I_t_acq+0x2c>)
    3014:	str	r3, [r0, #0]
    3016:	b.w	cc60 <__aeabi_atexit>
    301a:	nop
    301c:	.word	0x20010184
    3020:	.word	0x00000efd
    3024:	.word	0x20000548
    3028:	.word	0x20008e40

0000302c <filing_init()>:
{
    302c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3030:	ldr	r3, [pc, #132]	; (30b8 <filing_init()+0x8c>)
  FsDateTime::callback = dateTime;
    3032:	movs	r4, #5
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3034:	ldr	r2, [pc, #132]	; (30bc <filing_init()+0x90>)
    3036:	ldr.w	r3, [r3, #544]	; 0x220
    if (sd->begin(SD_CONFIG)) 
    303a:	ldr.w	r9, [pc, #156]	; 30d8 <filing_init()+0xac>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    303e:	bic.w	r3, r3, #4278190080	; 0xff000000
    { Serial.println("still trying..."); 
    3042:	ldr.w	r8, [pc, #152]	; 30dc <filing_init()+0xb0>
    3046:	ldr	r7, [pc, #120]	; (30c0 <filing_init()+0x94>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3048:	str	r3, [r2, #0]
  FsDateTime::callback = dateTime;
    304a:	ldr	r3, [pc, #120]	; (30c4 <filing_init()+0x98>)
    304c:	ldr	r2, [pc, #120]	; (30c8 <filing_init()+0x9c>)
    304e:	str	r2, [r3, #0]
    if (sd->begin(SD_CONFIG)) 
    3050:	ldr.w	r5, [r9]
    spiConfigBackupPin = 255;
    3054:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
    3056:	movs	r1, #0
    3058:	add.w	r6, r5, #1168	; 0x490
    spiConfigBackupPin = 255;
    305c:	strb.w	r3, [r5, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
    3060:	strb.w	r1, [r5, #1224]	; 0x4c8
    3064:	mov	r0, r6
    3066:	bl	9e84 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    306a:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    306c:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    3070:	bl	9580 <SdioCard::errorCode() const>
    3074:	cbnz	r0, 3098 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    3076:	movs	r3, #1
    3078:	ldr.w	r1, [r5, #1164]	; 0x48c
    307c:	mov	r0, r5
    307e:	mov	r2, r3
    3080:	bl	8bc8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    3084:	cbz	r0, 3098 <filing_init()+0x6c>
    { Serial.println("card initialized.");
    3086:	ldr	r0, [pc, #56]	; (30c0 <filing_init()+0x94>)
    3088:	ldr	r1, [pc, #64]	; (30cc <filing_init()+0xa0>)
    308a:	bl	279e <Print::println(char const*) [clone .isra.0]>
      haveStore=1;
    308e:	movs	r0, #1
    3090:	ldr	r3, [pc, #60]	; (30d0 <filing_init()+0xa4>)
    3092:	str	r0, [r3, #0]
}
    3094:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    { Serial.println("still trying..."); 
    3098:	mov	r1, r8
    309a:	mov	r0, r7
    309c:	bl	279e <Print::println(char const*) [clone .isra.0]>
      delay(100);
    30a0:	movs	r0, #100	; 0x64
    30a2:	bl	bab4 <delay>
  for(int ii=0; ii<5;ii++)
    30a6:	subs	r4, #1
    30a8:	bne.n	3050 <filing_init()+0x24>
  Serial.println("Card failed, or not present");
    30aa:	ldr	r0, [pc, #20]	; (30c0 <filing_init()+0x94>)
    30ac:	ldr	r1, [pc, #36]	; (30d4 <filing_init()+0xa8>)
    30ae:	bl	279e <Print::println(char const*) [clone .isra.0]>
  return 0;
    30b2:	mov	r0, r4
    30b4:	b.n	3094 <filing_init()+0x68>
    30b6:	nop
    30b8:	.word	0x401f4400
    30bc:	.word	0x2000c1c8
    30c0:	.word	0x20008a64
    30c4:	.word	0x2000fbfc
    30c8:	.word	0x000026e9
    30cc:	.word	0x20007b1f
    30d0:	.word	0x200101d4
    30d4:	.word	0x20007b41
    30d8:	.word	0x200093d8
    30dc:	.word	0x20007b31

000030e0 <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    30e0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30e4:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    30e6:	bl	bcb0 <rtc_get>
    30ea:	str	r0, [sp, #4]
  uint32_t t1;
  t1 = micros();
    30ec:	bl	ba68 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    30f0:	ldr	r3, [pc, #604]	; (3350 <compress(void*)+0x270>)
  t1 = micros();
    30f2:	mov	sl, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    30f4:	movs	r2, #0
    30f6:	ldr	r3, [r3, #0]
    30f8:	ldr.w	r1, [r4, r2, lsl #2]
    30fc:	str.w	r1, [r3, r2, lsl #2]
    3100:	adds	r2, #1
    3102:	cmp	r2, #128	; 0x80
    3104:	bne.n	30f8 <compress(void*)+0x18>
    3106:	subs	r4, #4
    3108:	add.w	r0, r3, #508	; 0x1fc
    310c:	mov	r2, r3
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    310e:	ldr.w	r1, [r2, #4]!
    3112:	ldr.w	r5, [r4, #4]!
    3116:	cmp	r0, r2
    3118:	sub.w	r1, r1, r5
    311c:	str	r1, [r2, #0]
    311e:	bne.n	310e <compress(void*)+0x2e>

  // find maximum in filtered data 
  int32_t mx = 0;
    3120:	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    3122:	ldr.w	r1, [r3, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    3126:	cmp	r1, #0
    3128:	it	lt
    312a:	neglt	r1, r1
    312c:	cmp	r2, r1
    312e:	it	lt
    3130:	movlt	r2, r1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    3132:	cmp	r0, r3
    3134:	bne.n	3122 <compress(void*)+0x42>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    3136:	movs	r4, #2
    3138:	movs	r1, #1
    313a:	subs	r3, r4, #1
    313c:	lsl.w	r3, r1, r3
    3140:	cmp	r3, r2
    3142:	bgt.n	314a <compress(void*)+0x6a>
    3144:	adds	r4, #1
    3146:	cmp	r4, #24
    3148:	bne.n	313a <compress(void*)+0x5a>
  // compression factor (32/nb)

  // keep statistics
  proc_stat[nb-1]++;
    314a:	ldr	r2, [pc, #520]	; (3354 <compress(void*)+0x274>)
    314c:	subs	r1, r4, #1
    314e:	ldr.w	r8, [pc, #536]	; 3368 <compress(void*)+0x288>
    3152:	ldr.w	r3, [r2, r1, lsl #2]
    3156:	mov	fp, r8
    3158:	adds	r3, #1
    315a:	str.w	r3, [r2, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    315e:	ldr	r3, [pc, #504]	; (3358 <compress(void*)+0x278>)
    3160:	ldr	r2, [r3, #0]
    3162:	cmp	r4, r2

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    3164:	mov	r2, r8
  if((uint32_t)nb>max_stat) max_stat=nb;
    3166:	it	hi
    3168:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    316a:	movs	r3, #1
    316c:	lsl.w	r0, r3, r4
    3170:	subs	r0, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    3172:	ldr.w	r1, [r2, #4]!
    3176:	adds	r3, #1
    3178:	ands	r1, r0
    317a:	cmp	r3, #128	; 0x80
    317c:	str	r1, [r2, #0]
    317e:	bne.n	3172 <compress(void*)+0x92>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    3180:	ldr	r5, [pc, #472]	; (335c <compress(void*)+0x27c>)
    3182:	mov.w	r2, #512	; 0x200
    3186:	movs	r1, #0
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    3188:	mov.w	r9, r4, lsl #2
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    318c:	mov	r0, r5
    318e:	bl	a528 <memset>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
    3192:	mov.w	r2, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
    3196:	ldr	r3, [sp, #4]
  int ndat = NH + NCHAN_ACQ + ncmp;
    3198:	add.w	r7, r9, #7
  *iptr++ = 0xA5A5A5A5;
    319c:	str	r2, [r5, #0]
  ndat= ((ndat>>1) + 1)<<1;
    319e:	add.w	r6, r9, #8
  *iptr++ = nb | shift<<16;
    31a2:	ldr	r2, [pc, #444]	; (3360 <compress(void*)+0x280>)
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    31a4:	movs	r1, #7
  *iptr++ = nb | shift<<16;
    31a6:	ldrh	r2, [r2, #0]
  *iptr++ = t1;
    31a8:	strd	r3, sl, [r5, #8]
  *iptr++ = nb | shift<<16;
    31ac:	orr.w	r2, r4, r2, lsl #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
    31b0:	ldr.w	r3, [fp]
  *iptr++ = nb | shift<<16;
    31b4:	str	r2, [r5, #4]
  *iptr++ = NCHAN_ACQ;
    31b6:	movs	r2, #1
  outData[kk++] = tempData[0]; tempData[0] = 0;
    31b8:	str	r3, [r5, #24]
    31ba:	movs	r3, #0
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    31bc:	add.w	r0, r9, r2
  *iptr++ = NCHAN_ACQ;
    31c0:	str	r2, [r5, #16]
  #endif

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    31c2:	mov	ip, r3
  outData[kk++] = tempData[0]; tempData[0] = 0;
    31c4:	str.w	r3, [fp]
  int nx = MBIT;
    31c8:	movs	r3, #32
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    31ca:	str	r0, [r5, #20]
  {   nx -= nb;
    31cc:	sub.w	lr, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    31d0:	ldr.w	sl, [r5, r1, lsl #2]
    31d4:	ldr.w	r2, [r8], #4
      if(nx > 0)
    31d8:	cmp.w	lr, #0
    31dc:	ble.n	3226 <compress(void*)+0x146>
      {   outData[kk] |= (tempData[ii] << nx);
    31de:	lsl.w	r2, r2, lr
    31e2:	mov	r3, lr
    31e4:	orr.w	r2, r2, sl
    31e8:	str.w	r2, [r5, r1, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    31ec:	add.w	ip, ip, #1
    31f0:	cmp.w	ip, #128	; 0x80
    31f4:	bne.n	31cc <compress(void*)+0xec>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    31f6:	ldr.w	r8, [pc, #372]	; 336c <compress(void*)+0x28c>
    31fa:	ldr.w	r4, [r8]
    31fe:	add.w	r9, r4, r6
    3202:	cmp.w	r9, #128	; 0x80
    3206:	bgt.n	3256 <compress(void*)+0x176>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3208:	ldr	r0, [pc, #344]	; (3364 <compress(void*)+0x284>)
    320a:	lsls	r2, r6, #2
    320c:	ldr	r1, [pc, #332]	; (335c <compress(void*)+0x27c>)
    320e:	add.w	r0, r0, r4, lsl #2
    3212:	bl	a56c <memcpy>
    3216:	str.w	r9, [r8]
  int ret=1;
    321a:	mov.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    321e:	mov	r0, r9
    3220:	add	sp, #12
    3222:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    3226:	add.w	r9, r1, #1
      else if(nx==0) 
    322a:	bne.n	323a <compress(void*)+0x15a>
      {   outData[kk++] |= tempData[ii];
    322c:	orr.w	r2, sl, r2
          nx=MBIT;
    3230:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    3232:	str.w	r2, [r5, r1, lsl #2]
    3236:	mov	r1, r9
    3238:	b.n	31ec <compress(void*)+0x10c>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    323a:	subs	r3, r4, r3
    323c:	lsr.w	r3, r2, r3
    3240:	orr.w	r3, r3, sl
    3244:	str.w	r3, [r5, r1, lsl #2]
          nx += MBIT;
    3248:	add.w	r3, lr, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    324c:	mov	r1, r9
          outData[kk] = (tempData[ii] << nx);
    324e:	lsls	r2, r3
    3250:	str.w	r2, [r5, r9, lsl #2]
    3254:	b.n	31ec <compress(void*)+0x10c>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    3256:	cmp	r4, #122	; 0x7a
    3258:	ble.n	32a4 <compress(void*)+0x1c4>
    325a:	movs	r2, #0
    325c:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    325e:	ldr	r1, [pc, #260]	; (3364 <compress(void*)+0x284>)
    3260:	mov	r0, r2
    3262:	cmp	r3, #127	; 0x7f
    3264:	bls.n	329a <compress(void*)+0x1ba>
    3266:	cmp	r4, #128	; 0x80
    3268:	rsb	r3, r4, #128	; 0x80
    326c:	it	gt
    326e:	movgt	r3, #0
    3270:	add	r3, r4
    3272:	cbz	r2, 3278 <compress(void*)+0x198>
    3274:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    3278:	ldr	r0, [pc, #232]	; (3364 <compress(void*)+0x284>)
    327a:	bl	2634 <pushData(unsigned long*)>
    327e:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3282:	mov.w	r2, r6, lsl #2
    3286:	ldr	r1, [pc, #212]	; (335c <compress(void*)+0x27c>)
    3288:	ldr	r0, [pc, #216]	; (3364 <compress(void*)+0x284>)
      if(!pushData(dout)) ret = 0;
    328a:	it	ne
    328c:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3290:	bl	a56c <memcpy>
    3294:	str.w	r6, [r8]
    3298:	b.n	321e <compress(void*)+0x13e>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    329a:	str.w	r0, [r1, r3, lsl #2]
    329e:	movs	r2, #1
    32a0:	adds	r3, #1
    32a2:	b.n	3262 <compress(void*)+0x182>
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    32a4:	rsb	r3, r4, #122	; 0x7a
    32a8:	ldr	r1, [pc, #176]	; (335c <compress(void*)+0x27c>)
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    32aa:	ldr	r2, [pc, #184]	; (3364 <compress(void*)+0x284>)
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    32ac:	orr.w	r3, r3, r0, lsl #16
    32b0:	mov	r0, r1
    32b2:	str	r3, [r5, #20]
    32b4:	mov	r3, r4
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    32b6:	ldr.w	ip, [r0], #4
    32ba:	str.w	ip, [r2, r3, lsl #2]
    32be:	adds	r3, #1
    32c0:	cmp	r3, #128	; 0x80
    32c2:	bne.n	32b6 <compress(void*)+0x1d6>
      if(!pushData(dout)) ret = 0;
    32c4:	ldr	r0, [pc, #156]	; (3364 <compress(void*)+0x284>)
    32c6:	rsb	sl, r4, #128	; 0x80
    32ca:	str	r1, [sp, #4]
    32cc:	str.w	r3, [r8]
    32d0:	bl	2634 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    32d4:	ldr	r3, [r5, #20]
      nr=ndat0-ii; // for header
    32d6:	sub.w	r7, r7, sl
      if(!pushData(dout)) ret = 0;
    32da:	subs.w	r9, r0, #0
    32de:	mov	fp, sl
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    32e0:	mov.w	r3, r3, lsr #16
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    32e4:	mov.w	r0, #7
      if(!pushData(dout)) ret = 0;
    32e8:	it	ne
    32ea:	movne.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    32ee:	ldr	r1, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    32f0:	lsls	r3, r3, #16
    32f2:	orrs	r3, r7
    32f4:	ldr	r7, [pc, #108]	; (3364 <compress(void*)+0x284>)
    32f6:	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    32f8:	mov	r2, r7
    32fa:	movs	r3, #0
    32fc:	str.w	r3, [r8]
    3300:	subs	r0, #1
    3302:	bne.n	3332 <compress(void*)+0x252>
    3304:	cbz	r3, 330c <compress(void*)+0x22c>
    3306:	movs	r3, #6
    3308:	str.w	r3, [r8]
    330c:	ldr.w	r1, [r8]
    3310:	movs	r3, #0
    3312:	add.w	r2, r2, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    3316:	cmp	sl, r6
    3318:	blt.n	333e <compress(void*)+0x25e>
    331a:	subs	r4, #128	; 0x80
    331c:	add	r4, r6
    331e:	cmp	r6, fp
    3320:	it	lt
    3322:	movlt	r4, #0
    3324:	add	r4, r1
    3326:	cmp	r3, #0
    3328:	beq.w	321e <compress(void*)+0x13e>
    332c:	str.w	r4, [r8]
  return ret;
    3330:	b.n	321e <compress(void*)+0x13e>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3332:	ldr.w	r3, [r1], #4
    3336:	str.w	r3, [r7], #4
    333a:	movs	r3, #1
    333c:	b.n	3300 <compress(void*)+0x220>
      while (ii < ndat) dout[nout++] = outData[ii++];
    333e:	ldr.w	r3, [r5, sl, lsl #2]
    3342:	add.w	sl, sl, #1
    3346:	str.w	r3, [r2], #4
    334a:	movs	r3, #1
    334c:	b.n	3316 <compress(void*)+0x236>
    334e:	nop
    3350:	.word	0x200093f4
    3354:	.word	0x20010224
    3358:	.word	0x200101f8
    335c:	.word	0x2000f5f4
    3360:	.word	0x20010a46
    3364:	.word	0x2000f3e4
    3368:	.word	0x2000f9f4
    336c:	.word	0x2000fc48

00003370 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    3370:	push	{r0, r1, r4, lr}
    3372:	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    3374:	cbz	r1, 3390 <Print::print(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    3376:	mov	r0, r1
    3378:	str	r1, [sp, #4]
    337a:	bl	f580 <strlen>
    337e:	ldr	r3, [r4, #0]
    3380:	mov	r2, r0
    3382:	ldr	r1, [sp, #4]
    3384:	ldr	r3, [r3, #4]
    3386:	mov	r0, r4
	size_t print(const char s[])			{ return write(s); }
    3388:	add	sp, #8
    338a:	ldmia.w	sp!, {r4, lr}
							  return write((const uint8_t *)str, strlen(str)); }
    338e:	bx	r3
	size_t print(const char s[])			{ return write(s); }
    3390:	add	sp, #8
    3392:	pop	{r4, pc}

00003394 <usbPowerInit()>:
    static const uint8_t i2c_addr[2]= {I2C_ADDRESS1, I2C_ADDRESS2};
    static const uint8_t regs[4]={0x3C, 0x41, 0x46, 0x4B};

    void usbPowerInit()
    {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    3394:	ldr	r3, [pc, #24]	; (33b0 <usbPowerInit()+0x1c>)
    3396:	movs	r2, #5
    3398:	str.w	r2, [r3, #180]	; 0xb4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    339c:	movs	r2, #8
    339e:	str.w	r2, [r3, #676]	; 0x2a4

      GPIO8_GDIR |= 1<<26;
    33a2:	ldr	r2, [pc, #16]	; (33b4 <usbPowerInit()+0x20>)
    33a4:	ldr	r3, [r2, #4]
    33a6:	orr.w	r3, r3, #67108864	; 0x4000000
    33aa:	str	r3, [r2, #4]
    }
    33ac:	bx	lr
    33ae:	nop
    33b0:	.word	0x401f8000
    33b4:	.word	0x42008000

000033b8 <usbPowerSetup()>:
    {
      GPIO8_DR_CLEAR = 1<<26;
    }

    void usbPowerSetup(void)
    {
    33b8:	push	{r3, lr}
      #if USB_POWER==1
        usbPowerInit();
    33ba:	bl	3394 <usbPowerInit()>
      GPIO8_DR_SET = 1<<26;
    33be:	ldr	r3, [pc, #20]	; (33d4 <usbPowerSetup()+0x1c>)
    33c0:	mov.w	r2, #67108864	; 0x4000000
        usbPowerOn();
        delay(1000);
    33c4:	mov.w	r0, #1000	; 0x3e8
      GPIO8_DR_SET = 1<<26;
    33c8:	str.w	r2, [r3, #132]	; 0x84
      #endif
    }
    33cc:	ldmia.w	sp!, {r3, lr}
        delay(1000);
    33d0:	b.w	bab4 <delay>
    33d4:	.word	0x42008000

000033d8 <acqPower(int)>:

    void acqPower(int flag)
    {   
        #if defined(ADC_EN)
            digitalWrite(ADC_EN,flag);
    33d8:	uxtb	r1, r0
    33da:	movs	r0, #33	; 0x21
    {   
    33dc:	push	{r3, lr}
            digitalWrite(ADC_EN,flag);
    33de:	bl	c204 <digitalWrite>
            delay(100);
    33e2:	movs	r0, #100	; 0x64
        #else
            (void) flag;
        #endif
    }
    33e4:	ldmia.w	sp!, {r3, lr}
            delay(100);
    33e8:	b.w	bab4 <delay>

000033ec <adcReset()>:

    void adcReset(void) 
    { digitalWrite(ADC_SHDNZ,LOW); 
    33ec:	movs	r1, #0
    33ee:	movs	r0, #32
    33f0:	b.w	c204 <digitalWrite>

000033f4 <adcStart()>:
    }
    void adcStart(void) 
    { digitalWrite(ADC_SHDNZ,HIGH); 
    33f4:	movs	r1, #1
    33f6:	movs	r0, #32
    33f8:	b.w	c204 <digitalWrite>

000033fc <adc_init()>:
    }


    void adc_init(void)
    {
    33fc:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        #if defined(ADC_EN)
            pinMode(ADC_EN,OUTPUT);
    3400:	movs	r1, #1
    3402:	movs	r0, #33	; 0x21
    3404:	bl	c244 <pinMode>
        #endif
        acqPower(HIGH);
    3408:	movs	r0, #1
    340a:	bl	33d8 <acqPower(int)>

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
    340e:	movs	r1, #1
    3410:	movs	r0, #32
    3412:	bl	c244 <pinMode>
        adcReset();
    3416:	bl	33ec <adcReset()>
        delay(100);
    341a:	movs	r0, #100	; 0x64
    341c:	bl	bab4 <delay>
        adcStart();
    3420:	bl	33f4 <adcStart()>

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&mWire,100'000); 
    3424:	ldr	r2, [pc, #332]	; (3574 <adc_init()+0x178>)
    3426:	ldr	r1, [pc, #336]	; (3578 <adc_init()+0x17c>)
    3428:	add	r0, sp, #4
    342a:	bl	3644 <i2c_class::i2c_class(TwoWire*, unsigned long)>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
    342e:	movs	r1, #76	; 0x4c
    3430:	add	r0, sp, #4
    3432:	bl	3668 <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
    3436:	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
    3438:	cmp	r0, #0
    343a:	beq.w	356e <adc_init()+0x172>
                Serial.printf("found %x\n",i2c_addr[ii]);
    343e:	ldr	r1, [pc, #316]	; (357c <adc_init()+0x180>)
            else
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    3440:	ldr	r0, [pc, #316]	; (3580 <adc_init()+0x184>)

            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep

            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    3442:	movs	r4, #11
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    3444:	bl	ca70 <Print::printf(char const*, ...)>
            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
    3448:	movs	r3, #129	; 0x81
    344a:	movs	r2, #2
    344c:	movs	r1, #76	; 0x4c
    344e:	add	r0, sp, #4
    3450:	ldr	r5, [pc, #304]	; (3584 <adc_init()+0x188>)
    3452:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
    3456:	movs	r3, #48	; 0x30
    3458:	movs	r2, #7
    345a:	movs	r1, #76	; 0x4c
    345c:	add	r0, sp, #4
    345e:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    3462:	movs	r3, #0
    3464:	movs	r2, #8
    3466:	movs	r1, #76	; 0x4c
    3468:	add	r0, sp, #4
    346a:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            for(int jj=0;jj<4;jj++)
            {
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    346e:	mov	r2, r4
            for(int jj=0;jj<4;jj++)
    3470:	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    3472:	ldrb.w	r3, [r5], #1
    3476:	movs	r1, #76	; 0x4c
            for(int jj=0;jj<4;jj++)
    3478:	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    347a:	add	r0, sp, #4
    347c:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
    3480:	cmp	r4, #15
    3482:	bne.n	346e <adc_init()+0x72>
            }

            //i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	//Enable Input Ch-1 to Ch-8 by I2C write into P0_R115 
            i2c.write(i2c_addr[ii],0x73,0x30);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    3484:	movs	r3, #48	; 0x30
    3486:	movs	r2, #115	; 0x73
    3488:	movs	r1, #76	; 0x4c
    348a:	add	r0, sp, #4
    348c:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
            i2c.write(i2c_addr[ii],0x74,0x20);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    3490:	movs	r3, #32
    3492:	movs	r2, #116	; 0x74
    3494:	movs	r1, #76	; 0x4c
    3496:	add	r0, sp, #4
    3498:	ldr	r6, [pc, #236]	; (3588 <adc_init()+0x18c>)
    349a:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    349e:	movs	r3, #224	; 0xe0
    34a0:	movs	r2, #117	; 0x75
    34a2:	movs	r1, #76	; 0x4c
    34a4:	add	r0, sp, #4

            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2

            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V

            for(int jj=0; jj<4; jj++)
    34a6:	movs	r5, #0
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    34a8:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            {   
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    34ac:	ldr.w	r8, [pc, #236]	; 359c <adc_init()+0x1a0>
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    34b0:	movs	r3, #37	; 0x25
    34b2:	movs	r2, #107	; 0x6b
    34b4:	movs	r1, #76	; 0x4c
    34b6:	add	r0, sp, #4
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    34b8:	ldr	r7, [pc, #208]	; (358c <adc_init()+0x190>)
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    34ba:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
    34be:	movs	r3, #96	; 0x60
    34c0:	movs	r2, #59	; 0x3b
    34c2:	movs	r1, #76	; 0x4c
    34c4:	add	r0, sp, #4
    34c6:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    34ca:	ldrb.w	r4, [r6], #1
    34ce:	movs	r3, #136	; 0x88
    34d0:	movs	r1, #76	; 0x4c
    34d2:	add	r0, sp, #4
    34d4:	mov	r2, r4
            for(int jj=0; jj<4; jj++)
    34d6:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    34d8:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    34dc:	ldrh.w	r3, [r8]
    34e0:	adds	r2, r4, #1
    34e2:	movs	r1, #76	; 0x4c
    34e4:	uxtb	r3, r3
    34e6:	add	r0, sp, #4
    34e8:	uxtb	r2, r2
    34ea:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    34ee:	ldrh	r3, [r7, #0]
    34f0:	adds	r2, r4, #2
    34f2:	movs	r1, #76	; 0x4c
    34f4:	subs	r3, #55	; 0x37
    34f6:	add	r0, sp, #4
    34f8:	uxtb	r2, r2
    34fa:	uxtb	r3, r3
    34fc:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
    3500:	adds	r2, r4, #3
    3502:	movs	r3, #128	; 0x80
    3504:	movs	r1, #76	; 0x4c
    3506:	uxtb	r2, r2
    3508:	add	r0, sp, #4
    350a:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
    350e:	adds	r2, r4, #4
    3510:	movs	r3, #0
    3512:	movs	r1, #76	; 0x4c
    3514:	uxtb	r2, r2
    3516:	add	r0, sp, #4
    3518:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    351c:	cmp	r5, #4
    351e:	bne.n	34ca <adc_init()+0xce>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
    3520:	ldr	r1, [pc, #108]	; (3590 <adc_init()+0x194>)
    3522:	ldr	r0, [pc, #92]	; (3580 <adc_init()+0x184>)
    3524:	bl	3370 <Print::print(char const*) [clone .isra.0]>
    3528:	movs	r2, #21
    352a:	movs	r1, #76	; 0x4c
    352c:	add	r0, sp, #4
    352e:	bl	368a <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3532:	movs	r3, #0
    3534:	mov	r1, r0
    3536:	movs	r2, #16
    3538:	ldr	r0, [pc, #68]	; (3580 <adc_init()+0x184>)
    353a:	bl	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    353e:	ldr	r0, [pc, #64]	; (3580 <adc_init()+0x184>)
    3540:	bl	ca38 <Print::println()>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
    3544:	ldr	r1, [pc, #76]	; (3594 <adc_init()+0x198>)
    3546:	ldr	r0, [pc, #56]	; (3580 <adc_init()+0x184>)
    3548:	bl	3370 <Print::print(char const*) [clone .isra.0]>
    354c:	movs	r2, #118	; 0x76
    354e:	movs	r1, #76	; 0x4c
    3550:	add	r0, sp, #4
    3552:	bl	368a <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3556:	movs	r3, #0
    3558:	mov	r1, r0
    355a:	movs	r2, #16
    355c:	ldr	r0, [pc, #32]	; (3580 <adc_init()+0x184>)
    355e:	bl	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    3562:	ldr	r0, [pc, #28]	; (3580 <adc_init()+0x184>)
    3564:	bl	ca38 <Print::println()>
            
        }
    }
    3568:	add	sp, #8
    356a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    356e:	ldr	r1, [pc, #40]	; (3598 <adc_init()+0x19c>)
    3570:	b.n	3440 <adc_init()+0x44>
    3572:	nop
    3574:	.word	0x000186a0
    3578:	.word	0x20008bb4
    357c:	.word	0x20007e63
    3580:	.word	0x20008a64
    3584:	.word	0x20007edc
    3588:	.word	0x20007ed8
    358c:	.word	0x2001099c
    3590:	.word	0x20007e9d
    3594:	.word	0x20007ea5
    3598:	.word	0x20007e6d
    359c:	.word	0x200093f8

000035a0 <setAGain(signed char)>:

    void setAGain(int8_t again)
    {
    35a0:	push	{r0, r1, r4, r5, r6, lr}
    35a2:	mov	r4, r0
    35a4:	ldr	r6, [pc, #40]	; (35d0 <setAGain(signed char)+0x30>)
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
            for(int jj=0; jj<4; jj++)
    35a6:	movs	r5, #0
        i2c_class i2c(&mWire,100'000);
    35a8:	ldr	r2, [pc, #40]	; (35d4 <setAGain(signed char)+0x34>)
            {
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    35aa:	uxtb	r4, r4
        i2c_class i2c(&mWire,100'000);
    35ac:	ldr	r1, [pc, #40]	; (35d8 <setAGain(signed char)+0x38>)
    35ae:	add	r0, sp, #4
    35b0:	bl	3644 <i2c_class::i2c_class(TwoWire*, unsigned long)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    35b4:	ldrb.w	r2, [r6], #1
            for(int jj=0; jj<4; jj++)
    35b8:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    35ba:	mov	r3, r4
    35bc:	movs	r1, #76	; 0x4c
    35be:	adds	r2, #1
    35c0:	add	r0, sp, #4
    35c2:	uxtb	r2, r2
    35c4:	bl	36d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    35c8:	cmp	r5, #4
    35ca:	bne.n	35b4 <setAGain(signed char)+0x14>
            }
    }
    35cc:	add	sp, #8
    35ce:	pop	{r4, r5, r6, pc}
    35d0:	.word	0x20007ed8
    35d4:	.word	0x000186a0
    35d8:	.word	0x20008bb4

000035dc <adcStatus()>:
    void adcStatus(void)
    {
    35dc:	push	{r0, r1, r4, lr}
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    35de:	ldr	r4, [pc, #80]	; (3630 <adcStatus()+0x54>)
        i2c_class i2c(&mWire,100'000);
    35e0:	add	r0, sp, #4
    35e2:	ldr	r2, [pc, #80]	; (3634 <adcStatus()+0x58>)
    35e4:	ldr	r1, [pc, #80]	; (3638 <adcStatus()+0x5c>)
    35e6:	bl	3644 <i2c_class::i2c_class(TwoWire*, unsigned long)>
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    35ea:	mov	r0, r4
    35ec:	ldr	r1, [pc, #76]	; (363c <adcStatus()+0x60>)
    35ee:	bl	3370 <Print::print(char const*) [clone .isra.0]>
    35f2:	movs	r2, #21
    35f4:	movs	r1, #76	; 0x4c
    35f6:	add	r0, sp, #4
    35f8:	bl	368a <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    35fc:	movs	r3, #0
    35fe:	mov	r1, r0
    3600:	movs	r2, #16
    3602:	mov	r0, r4
    3604:	bl	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            Serial.print("\n0x76: "); Serial.print(i2c.read(i2c_addr[ii],0x76),HEX);
    3608:	mov	r0, r4
    360a:	ldr	r1, [pc, #52]	; (3640 <adcStatus()+0x64>)
    360c:	bl	3370 <Print::print(char const*) [clone .isra.0]>
    3610:	movs	r2, #118	; 0x76
    3612:	movs	r1, #76	; 0x4c
    3614:	add	r0, sp, #4
    3616:	bl	368a <i2c_class::read(unsigned char, unsigned char)>
    361a:	movs	r3, #0
    361c:	mov	r1, r0
    361e:	movs	r2, #16
    3620:	mov	r0, r4
    3622:	bl	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        }
        Serial.println();
    3626:	mov	r0, r4
    3628:	bl	ca38 <Print::println()>
    }
    362c:	add	sp, #8
    362e:	pop	{r4, pc}
    3630:	.word	0x20008a64
    3634:	.word	0x000186a0
    3638:	.word	0x20008bb4
    363c:	.word	0x20007e9c
    3640:	.word	0x20007ea4

00003644 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    3644:	push	{r0, r1, r2, r4, r5, lr}
    3646:	mov	r4, r1
    {   this->wire = wire;
    3648:	str	r1, [r0, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    364a:	mov	r5, r0
        wire->begin();
    364c:	mov	r0, r1
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    364e:	str	r2, [sp, #4]
        wire->begin();
    3650:	bl	179e8 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    3654:	movs	r0, #100	; 0x64
    3656:	bl	bab4 <delay>
        wire->setClock(speed);
    365a:	mov	r0, r4
    365c:	ldr	r1, [sp, #4]
    365e:	bl	588c <TwoWire::setClock(unsigned long)>
    }
    3662:	mov	r0, r5
    3664:	add	sp, #12
    3666:	pop	{r4, r5, pc}

00003668 <i2c_class::exist(unsigned char)>:
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    3668:	push	{r3, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    366a:	lsls	r1, r1, #1
        wire->beginTransmission(addr);
    366c:	ldr	r3, [r0, #0]
    366e:	strb.w	r1, [r3, #165]	; 0xa5
		transmitting = 1;
    3672:	movs	r1, #1
    3674:	strb.w	r1, [r3, #304]	; 0x130
		txBufferLength = 1;
    3678:	strb.w	r1, [r3, #303]	; 0x12f
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    367c:	ldr	r0, [r0, #0]
    367e:	bl	55d8 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    3682:	clz	r0, r0
    3686:	lsrs	r0, r0, #5
    3688:	pop	{r3, pc}

0000368a <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    368a:	push	{r4, r5, r6, lr}
        unsigned int val;
        wire->beginTransmission(addr);
    368c:	ldr	r3, [r0, #0]
		transmitting = 1;
    368e:	movs	r6, #1
    { 
    3690:	mov	r5, r1
		txBuffer[0] = (address << 1);
    3692:	lsls	r1, r1, #1
		transmitting = 1;
    3694:	strb.w	r6, [r3, #304]	; 0x130
    3698:	mov	r4, r0
		txBuffer[0] = (address << 1);
    369a:	strb.w	r1, [r3, #165]	; 0xa5
        wire->write(reg);
    369e:	mov	r1, r2
		txBufferLength = 1;
    36a0:	strb.w	r6, [r3, #303]	; 0x12f
    36a4:	ldr	r0, [r0, #0]
    36a6:	ldr	r3, [r0, #0]
    36a8:	ldr	r3, [r3, #0]
    36aa:	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    36ac:	movs	r1, #0
    36ae:	ldr	r0, [r4, #0]
    36b0:	bl	55d8 <TwoWire::endTransmission(unsigned char)>
    36b4:	cbz	r0, 36ba <i2c_class::read(unsigned char, unsigned char)+0x30>
    36b6:	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    36b8:	pop	{r4, r5, r6, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    36ba:	mov	r3, r6
    36bc:	mov	r2, r6
    36be:	mov	r1, r5
    36c0:	ldr	r0, [r4, #0]
    36c2:	bl	56bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    36c6:	cmp	r0, #0
    36c8:	beq.n	36b6 <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    36ca:	ldr	r0, [r4, #0]
    36cc:	ldr	r3, [r0, #0]
    36ce:	ldr	r3, [r3, #20]
    36d0:	blx	r3
        return val;
    36d2:	uxtb	r0, r0
    36d4:	b.n	36b8 <i2c_class::read(unsigned char, unsigned char)+0x2e>

000036d6 <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    36d6:	push	{r4, r5, r6, lr}
    36d8:	mov	r4, r0
		transmitting = 1;
    36da:	movs	r5, #1
    36dc:	mov	r6, r3
        wire->beginTransmission(addr);
    36de:	ldr	r3, [r0, #0]
		txBuffer[0] = (address << 1);
    36e0:	lsls	r0, r1, #1
        wire->write(reg);
    36e2:	mov	r1, r2
		transmitting = 1;
    36e4:	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    36e8:	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    36ec:	strb.w	r0, [r3, #165]	; 0xa5
    36f0:	ldr	r0, [r4, #0]
    36f2:	ldr	r3, [r0, #0]
    36f4:	ldr	r3, [r3, #0]
    36f6:	blx	r3
        wire->write(val);
    36f8:	ldr	r0, [r4, #0]
    36fa:	mov	r1, r6
    36fc:	ldr	r3, [r0, #0]
    36fe:	ldr	r3, [r3, #0]
    3700:	blx	r3
		return endTransmission(1);
    3702:	mov	r1, r5
    3704:	ldr	r0, [r4, #0]
    3706:	bl	55d8 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    370a:	clz	r0, r0
    370e:	lsrs	r0, r0, #5
    3710:	pop	{r4, r5, r6, pc}

00003712 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    3712:	push	{r0, r1, r4, lr}
    3714:	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    3716:	cbz	r1, 372c <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    3718:	mov	r0, r1
    371a:	str	r1, [sp, #4]
    371c:	bl	f580 <strlen>
    3720:	ldr	r3, [r4, #0]
    3722:	mov	r2, r0
    3724:	ldr	r1, [sp, #4]
    3726:	ldr	r3, [r3, #4]
    3728:	mov	r0, r4
    372a:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    372c:	mov	r0, r4
    372e:	add	sp, #8
    3730:	ldmia.w	sp!, {r4, lr}
    3734:	b.w	ca38 <Print::println()>

00003738 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
    3738:	push	{r4, r5, r6, r7, lr}

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    373a:	movs	r4, #60	; 0x3c

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    373c:	movw	lr, #365	; 0x16d
    3740:	movs	r6, #100	; 0x64
    3742:	mov.w	ip, #400	; 0x190
    tm->sec  = time % 60; time /= 60; // now it is minutes
    3746:	udiv	r2, r0, r4
    tm->min  = time % 60; time /= 60; // now it is hours
    374a:	udiv	r3, r2, r4
    tm->sec  = time % 60; time /= 60; // now it is minutes
    374e:	mls	r0, r4, r2, r0
    tm->min  = time % 60; time /= 60; // now it is hours
    3752:	mls	r2, r4, r3, r2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    3756:	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    3758:	movs	r0, #24
    tm->min  = time % 60; time /= 60; // now it is hours
    375a:	strb	r2, [r1, #6]
    tm->hour = time % 24; time /= 24; // now it is days
    375c:	udiv	r2, r3, r0
    3760:	mls	r3, r0, r2, r3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3764:	adds	r0, r2, #4
    tm->hour = time % 24; time /= 24; // now it is days
    3766:	strb	r3, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3768:	movs	r3, #7
    376a:	udiv	r3, r0, r3
    376e:	rsb	r3, r3, r3, lsl #3
    3772:	subs	r0, r0, r3
    3774:	strb	r0, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3776:	movs	r0, #0
    days = 0;
    3778:	mov	r4, r0
    377a:	uxtb	r3, r0
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    377c:	addw	r3, r3, #1970	; 0x7b2
    3780:	ands.w	r7, r3, #3
    3784:	bne.n	3808 <time2date(unsigned long, datetime_t*)+0xd0>
    3786:	sdiv	r5, r3, r6
    378a:	mls	r5, r6, r5, r3
    378e:	cmp	r5, #0
    3790:	bne.n	380e <time2date(unsigned long, datetime_t*)+0xd6>
    3792:	sdiv	r5, r3, ip
    3796:	mls	r5, ip, r5, r3
    379a:	cmp	r5, #0
    379c:	ite	ne
    379e:	movne	r5, lr
    37a0:	moveq.w	r5, #366	; 0x16e
    37a4:	add	r4, r5
    37a6:	adds	r0, #1
    37a8:	cmp	r2, r4
    37aa:	bcs.n	377a <time2date(unsigned long, datetime_t*)+0x42>
    37ac:	movs	r0, #100	; 0x64
      year++;
    }
    tm->year = year+YEAR0;
    37ae:	strh	r3, [r1, #0]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    37b0:	udiv	r6, r3, r0
    37b4:	mls	r6, r0, r6, r3
    37b8:	mov.w	r0, #400	; 0x190
    37bc:	udiv	r5, r3, r0
    37c0:	mls	r3, r0, r5, r3
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    37c4:	cbnz	r7, 3814 <time2date(unsigned long, datetime_t*)+0xdc>
    37c6:	cbnz	r6, 381a <time2date(unsigned long, datetime_t*)+0xe2>
    37c8:	cmp	r3, #0
    37ca:	movw	r0, #365	; 0x16d
    37ce:	it	eq
    37d0:	moveq.w	r0, #366	; 0x16e
    time  -= days; // now it is days in this year, starting at 0
    37d4:	subs	r2, r2, r4
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    37d6:	ldr.w	ip, [pc, #88]	; 3830 <time2date(unsigned long, datetime_t*)+0xf8>
    time  -= days; // now it is days in this year, starting at 0
    37da:	add	r2, r0
    37dc:	movs	r0, #0
      if (month==1) { // february
    37de:	cmp	r0, #1
    37e0:	uxtb	r5, r0
    37e2:	bne.n	3820 <time2date(unsigned long, datetime_t*)+0xe8>
        if (LEAP_YEAR(year)) {
    37e4:	cbnz	r7, 3826 <time2date(unsigned long, datetime_t*)+0xee>
    37e6:	cbnz	r6, 382a <time2date(unsigned long, datetime_t*)+0xf2>
          monthLength=29;
    37e8:	cmp	r3, #0
    37ea:	ite	ne
    37ec:	movne	r4, #28
    37ee:	moveq	r4, #29
      }
      
      if (time >= monthLength) {
    37f0:	cmp	r4, r2
    37f2:	bhi.n	37fe <time2date(unsigned long, datetime_t*)+0xc6>
    for (month=0; month<12; month++) {
    37f4:	adds	r0, #1
        time -= monthLength;
    37f6:	subs	r2, r2, r4
    for (month=0; month<12; month++) {
    37f8:	cmp	r0, #12
    37fa:	bne.n	37de <time2date(unsigned long, datetime_t*)+0xa6>
    37fc:	mov	r5, r0
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    37fe:	adds	r5, #1
    tm->day = time + 1;     // day of month
    3800:	adds	r2, #1
    tm->month = month + 1;  // jan is month 1  
    3802:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
    3804:	strb	r2, [r1, #3]
  }
    3806:	pop	{r4, r5, r6, r7, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3808:	movw	r5, #365	; 0x16d
    380c:	b.n	37a4 <time2date(unsigned long, datetime_t*)+0x6c>
    380e:	mov.w	r5, #366	; 0x16e
    3812:	b.n	37a4 <time2date(unsigned long, datetime_t*)+0x6c>
    days -= LEAP_YEAR(year) ? 366 : 365;
    3814:	movw	r0, #365	; 0x16d
    3818:	b.n	37d4 <time2date(unsigned long, datetime_t*)+0x9c>
    381a:	mov.w	r0, #366	; 0x16e
    381e:	b.n	37d4 <time2date(unsigned long, datetime_t*)+0x9c>
        monthLength = monthDays[month];
    3820:	ldrb.w	r4, [r0, ip]
    3824:	b.n	37f0 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=28;
    3826:	movs	r4, #28
    3828:	b.n	37f0 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=29;
    382a:	movs	r4, #29
    382c:	b.n	37f0 <time2date(unsigned long, datetime_t*)+0xb8>
    382e:	nop
    3830:	.word	0x20007f4b

00003834 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    3834:	ldrh	r3, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
    3836:	movw	r1, #1970	; 0x7b2
    seconds= year*(SECS_PER_DAY * 365);
    383a:	ldr	r2, [pc, #184]	; (38f4 <date2time(datetime_t*)+0xc0>)
    year=tm->year-YEAR0;
    383c:	adds	r3, #78	; 0x4e
    383e:	uxtb	r3, r3
  {
    3840:	push	{r4, r5, r6, r7, lr}
    seconds= year*(SECS_PER_DAY * 365);
    3842:	muls	r2, r3
    for (ii = 0; ii < year; ii++) {
    3844:	movs	r5, #100	; 0x64
    3846:	mov.w	r6, #400	; 0x190
    384a:	subw	r4, r1, #1970	; 0x7b2
    384e:	cmp	r3, r4
    3850:	bgt.n	38ac <date2time(datetime_t*)+0x78>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3852:	addw	r3, r3, #1970	; 0x7b2
    3856:	movs	r1, #100	; 0x64
    for (ii = 1; ii < tm->month; ii++) {
    3858:	ldrsb.w	r7, [r0, #2]
    385c:	ldr	r6, [pc, #152]	; (38f8 <date2time(datetime_t*)+0xc4>)
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    385e:	ldr.w	ip, [pc, #156]	; 38fc <date2time(datetime_t*)+0xc8>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3862:	udiv	r4, r3, r1
    3866:	mls	r4, r1, r4, r3
    386a:	mov.w	r1, #400	; 0x190
    386e:	udiv	r5, r3, r1
    3872:	mls	r5, r1, r5, r3
    for (ii = 1; ii < tm->month; ii++) {
    3876:	movs	r1, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3878:	and.w	r3, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    387c:	cmp	r7, r1
    387e:	bgt.n	38d0 <date2time(datetime_t*)+0x9c>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    3880:	ldrsb.w	r3, [r0, #6]
    seconds+= tm->sec;
    3884:	mov.w	r4, #3600	; 0xe10
    seconds+= tm->hour * SECS_PER_HOUR;
    3888:	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    388c:	rsb	r3, r3, r3, lsl #4
    3890:	lsls	r3, r3, #2
    seconds+= tm->sec;
    3892:	mla	r3, r4, r1, r3
    3896:	ldrsb.w	r1, [r0, #7]
    389a:	add	r3, r1
    seconds+= (tm->day-1) * SECS_PER_DAY;
    389c:	ldrsb.w	r1, [r0, #3]
    seconds+= tm->sec;
    38a0:	ldr	r0, [pc, #88]	; (38fc <date2time(datetime_t*)+0xc8>)
    seconds+= (tm->day-1) * SECS_PER_DAY;
    38a2:	subs	r1, #1
    seconds+= tm->sec;
    38a4:	mla	r0, r0, r1, r3
    return seconds; 
  }
    38a8:	add	r0, r2
    38aa:	pop	{r4, r5, r6, r7, pc}
      if (LEAP_YEAR(ii)) {
    38ac:	lsls	r4, r1, #30
    38ae:	bne.n	38cc <date2time(datetime_t*)+0x98>
    38b0:	sdiv	r4, r1, r5
    38b4:	mls	r4, r5, r4, r1
    38b8:	cbnz	r4, 38c4 <date2time(datetime_t*)+0x90>
    38ba:	sdiv	r4, r1, r6
    38be:	mls	r4, r6, r4, r1
    38c2:	cbnz	r4, 38cc <date2time(datetime_t*)+0x98>
        seconds += SECS_PER_DAY;   // add extra days for leap years
    38c4:	add.w	r2, r2, #86016	; 0x15000
    38c8:	add.w	r2, r2, #384	; 0x180
    for (ii = 0; ii < year; ii++) {
    38cc:	adds	r1, #1
    38ce:	b.n	384a <date2time(datetime_t*)+0x16>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    38d0:	cmp	r1, #2
    38d2:	bne.n	38e8 <date2time(datetime_t*)+0xb4>
    38d4:	cbnz	r3, 38e8 <date2time(datetime_t*)+0xb4>
    38d6:	cbnz	r4, 38da <date2time(datetime_t*)+0xa6>
    38d8:	cbnz	r5, 38e8 <date2time(datetime_t*)+0xb4>
        seconds += SECS_PER_DAY * 29;
    38da:	add.w	r2, r2, #2490368	; 0x260000
    38de:	add.w	r2, r2, #15232	; 0x3b80
    for (ii = 1; ii < tm->month; ii++) {
    38e2:	adds	r1, #1
    38e4:	adds	r6, #1
    38e6:	b.n	387c <date2time(datetime_t*)+0x48>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    38e8:	ldrb.w	lr, [r6]
    38ec:	mla	r2, ip, lr, r2
    38f0:	b.n	38e2 <date2time(datetime_t*)+0xae>
    38f2:	nop
    38f4:	.word	0x01e13380
    38f8:	.word	0x20007f4b
    38fc:	.word	0x00015180

00003900 <rtcSetup(unsigned char, unsigned char)>:

  #include "RV-3028-C7.h"
  RV3028 rtc;

  int16_t rtcSetup(uint8_t sda, uint8_t scl)
  {
    3900:	push	{r0, r1, r2, lr}
    Wire.begin();
    3902:	ldr	r0, [pc, #40]	; (392c <rtcSetup(unsigned char, unsigned char)+0x2c>)
    3904:	bl	179e8 <___ZN7TwoWire5beginEv_veneer>
    if (rtc.begin() == false) {
    3908:	movs	r3, #1
    390a:	ldr	r1, [pc, #32]	; (392c <rtcSetup(unsigned char, unsigned char)+0x2c>)
    390c:	mov	r2, r3
    390e:	ldr	r0, [pc, #32]	; (3930 <rtcSetup(unsigned char, unsigned char)+0x30>)
    3910:	str	r3, [sp, #0]
    3912:	bl	4070 <RV3028::begin(TwoWire&, bool, bool, bool)>
    3916:	cbnz	r0, 3928 <rtcSetup(unsigned char, unsigned char)+0x28>
    Serial.println("RTC offline!");
    3918:	ldr	r1, [pc, #24]	; (3934 <rtcSetup(unsigned char, unsigned char)+0x34>)
    }
    else
    {
      Serial.println("RTC online!");
    391a:	ldr	r0, [pc, #28]	; (3938 <rtcSetup(unsigned char, unsigned char)+0x38>)
    391c:	bl	3712 <Print::println(char const*) [clone .isra.0]>
    }

    return 1;
  }
    3920:	movs	r0, #1
    3922:	add	sp, #12
    3924:	ldr.w	pc, [sp], #4
      Serial.println("RTC online!");
    3928:	ldr	r1, [pc, #16]	; (393c <rtcSetup(unsigned char, unsigned char)+0x3c>)
    392a:	b.n	391a <rtcSetup(unsigned char, unsigned char)+0x1a>
    392c:	.word	0x20008a74
    3930:	.word	0x20010284
    3934:	.word	0x20007e83
    3938:	.word	0x20008a64
    393c:	.word	0x20007e90

00003940 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    3940:	push	{r0, r1, r2, lr}
    3942:	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    3944:	bl	bcb0 <rtc_get>
    3948:	ldr	r1, [sp, #4]
    394a:	bl	3738 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    394e:	movs	r0, #1
    3950:	add	sp, #12
    3952:	ldr.w	pc, [sp], #4

00003956 <rtc_set_datetime(datetime_t*)>:

  bool rtc_set_datetime(datetime_t *t)
  {
    3956:	push	{r3, lr}
    rtc_set(date2time(t));
    3958:	bl	3834 <date2time(datetime_t*)>
    395c:	bl	bcd4 <rtc_set>
    return 1;
  }
    3960:	movs	r0, #1
    3962:	pop	{r3, pc}

00003964 <rtcSetDate(int, int, int)>:

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    3964:	push	{r0, r1, r4, r5, r6, lr}
    3966:	mov	r5, r1
    3968:	mov	r4, r2
    396a:	mov	r6, r0
    rtc_get_datetime(&t);
    396c:	mov	r0, sp
    396e:	bl	3940 <rtc_get_datetime(datetime_t*)>
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
    3972:	mov	r0, sp
    t.year=year;
    3974:	strh.w	r6, [sp]
    t.month=month;
    3978:	strb.w	r5, [sp, #2]
    t.day=day;
    397c:	strb.w	r4, [sp, #3]
    rtc_set_datetime(&t);
    3980:	bl	3956 <rtc_set_datetime(datetime_t*)>
  }
    3984:	add	sp, #8
    3986:	pop	{r4, r5, r6, pc}

00003988 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    3988:	push	{r0, r1, r4, r5, r6, lr}
    398a:	mov	r5, r1
    398c:	mov	r4, r2
    398e:	mov	r6, r0
    rtc_get_datetime(&t);
    3990:	mov	r0, sp
    3992:	bl	3940 <rtc_get_datetime(datetime_t*)>
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
    3996:	mov	r0, sp
    t.hour=hour;
    3998:	strb.w	r6, [sp, #5]
    t.min=minutes;
    399c:	strb.w	r5, [sp, #6]
    t.sec=seconds;
    39a0:	strb.w	r4, [sp, #7]
    rtc_set_datetime(&t);
    39a4:	bl	3956 <rtc_set_datetime(datetime_t*)>
  }
    39a8:	add	sp, #8
    39aa:	pop	{r4, r5, r6, pc}

000039ac <rtcXferTime()>:

  void rtcXferTime(void)
  {
    39ac:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    rtc.setUNIX(rtc_get());
    39ae:	bl	bcb0 <rtc_get>
    39b2:	mov	r1, r0
    39b4:	ldr	r0, [pc, #68]	; (39fc <rtcXferTime()+0x50>)
    39b6:	bl	3ec8 <RV3028::setUNIX(unsigned long)>
    datetime_t t;
    rtc_get_datetime(&t);
    39ba:	add	r0, sp, #16
    39bc:	bl	3940 <rtc_get_datetime(datetime_t*)>
    if (rtc.setTime(t.sec, t.min, t.hour, t.day, t.day, t.month, t.year) == false) 
    39c0:	ldrh.w	r2, [sp, #16]
    39c4:	ldrb.w	r3, [sp, #19]
    39c8:	str	r2, [sp, #12]
    39ca:	ldrb.w	r2, [sp, #18]
    39ce:	str	r3, [sp, #0]
    39d0:	ldrb.w	r1, [sp, #23]
    39d4:	ldr	r0, [pc, #36]	; (39fc <rtcXferTime()+0x50>)
    39d6:	strd	r3, r2, [sp, #4]
    39da:	ldrb.w	r3, [sp, #21]
    39de:	ldrb.w	r2, [sp, #22]
    39e2:	bl	3e1a <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
    39e6:	cbnz	r0, 39f6 <rtcXferTime()+0x4a>
    {
          Serial.println("Something went wrong setting the time");
    39e8:	ldr	r1, [pc, #20]	; (3a00 <rtcXferTime()+0x54>)
    39ea:	ldr	r0, [pc, #24]	; (3a04 <rtcXferTime()+0x58>)
    }
  }
    39ec:	add	sp, #28
    39ee:	ldr.w	lr, [sp], #4
          Serial.println("Something went wrong setting the time");
    39f2:	b.w	3712 <Print::println(char const*) [clone .isra.0]>
  }
    39f6:	add	sp, #28
    39f8:	ldr.w	pc, [sp], #4
    39fc:	.word	0x20010284
    3a00:	.word	0x20007b9f
    3a04:	.word	0x20008a64

00003a08 <rtcSync()>:
  void rtcSync(void)
  {
    3a08:	push	{r4, lr}
    uint32_t to;
    to=rtc_get();
    3a0a:	bl	bcb0 <rtc_get>
    3a0e:	mov	r4, r0
    if (to<rtc.getUNIX()) rtc_set(rtc.getUNIX());
    3a10:	ldr	r0, [pc, #24]	; (3a2c <rtcSync()+0x24>)
    3a12:	bl	3db6 <RV3028::getUNIX()>
    3a16:	cmp	r0, r4
    3a18:	bls.n	3a28 <rtcSync()+0x20>
    3a1a:	ldr	r0, [pc, #16]	; (3a2c <rtcSync()+0x24>)
    3a1c:	bl	3db6 <RV3028::getUNIX()>
  }
    3a20:	ldmia.w	sp!, {r4, lr}
    if (to<rtc.getUNIX()) rtc_set(rtc.getUNIX());
    3a24:	b.w	bcd4 <rtc_set>
  }
    3a28:	pop	{r4, pc}
    3a2a:	nop
    3a2c:	.word	0x20010284

00003a30 <rtcGetTimestamp()>:

  char * rtcGetTimestamp(void)
  { 
    3a30:	push	{r4, lr}
    //PRINT TIME
    if (rtc.updateTime() == false) //Updates the time variables from RTC
    3a32:	ldr	r0, [pc, #32]	; (3a54 <rtcGetTimestamp()+0x24>)
    3a34:	bl	3d8e <RV3028::updateTime()>
    3a38:	mov	r4, r0
    3a3a:	cbz	r0, 3a46 <rtcGetTimestamp()+0x16>
    {
      Serial.println("RTC failed to update");
      return 0;
    } else {
      return rtc.stringTimeStamp();
    3a3c:	ldr	r0, [pc, #20]	; (3a54 <rtcGetTimestamp()+0x24>)
    }
  }
    3a3e:	ldmia.w	sp!, {r4, lr}
      return rtc.stringTimeStamp();
    3a42:	b.w	3ae4 <RV3028::stringTimeStamp()>
      Serial.println("RTC failed to update");
    3a46:	ldr	r1, [pc, #16]	; (3a58 <rtcGetTimestamp()+0x28>)
    3a48:	ldr	r0, [pc, #16]	; (3a5c <rtcGetTimestamp()+0x2c>)
    3a4a:	bl	3712 <Print::println(char const*) [clone .isra.0]>
  }
    3a4e:	mov	r0, r4
    3a50:	pop	{r4, pc}
    3a52:	nop
    3a54:	.word	0x20010284
    3a58:	.word	0x20007bed
    3a5c:	.word	0x20008a64

00003a60 <_GLOBAL__sub_I__Z7initRTChh>:
  RV3028 rtc;
    3a60:	ldr	r0, [pc, #4]	; (3a68 <_GLOBAL__sub_I__Z7initRTChh+0x8>)
    3a62:	b.w	3a6c <RV3028::RV3028()>
    3a66:	nop
    3a68:	.word	0x20010284

00003a6c <RV3028::RV3028()>:
#define BUILD_SECOND ((BUILD_SECOND_0 * 10) + BUILD_SECOND_1)

RV3028::RV3028(void)
{

}
    3a6c:	bx	lr

00003a6e <RV3028::readRegister(unsigned char)>:
{
	return ((val / 10) * 0x10) + (val % 10);
}

uint8_t RV3028::readRegister(uint8_t addr)
{
    3a6e:	push	{r3, r4, r5, lr}
		txBuffer[0] = (address << 1);
    3a70:	movs	r2, #164	; 0xa4
	_i2cPort->beginTransmission(RV3028_ADDR);
    3a72:	ldr	r3, [r0, #8]
		transmitting = 1;
    3a74:	movs	r5, #1
{
    3a76:	mov	r4, r0
		txBuffer[0] = (address << 1);
    3a78:	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    3a7c:	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    3a80:	strb.w	r5, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    3a84:	ldr	r0, [r0, #8]
    3a86:	ldr	r3, [r0, #0]
    3a88:	ldr	r3, [r3, #0]
    3a8a:	blx	r3
		return endTransmission(1);
    3a8c:	mov	r1, r5
    3a8e:	ldr	r0, [r4, #8]
    3a90:	bl	55d8 <TwoWire::endTransmission(unsigned char)>
		return requestFrom(address, quantity, (uint8_t)1);
    3a94:	mov	r3, r5
    3a96:	mov	r2, r5
    3a98:	movs	r1, #82	; 0x52
    3a9a:	ldr	r0, [r4, #8]
    3a9c:	bl	56bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	_i2cPort->endTransmission();

	_i2cPort->requestFrom(RV3028_ADDR, (uint8_t)1);
	if (_i2cPort->available()) {
    3aa0:	ldr	r0, [r4, #8]
    3aa2:	ldr	r3, [r0, #0]
    3aa4:	ldr	r3, [r3, #16]
    3aa6:	blx	r3
    3aa8:	cbz	r0, 3ab6 <RV3028::readRegister(unsigned char)+0x48>
		return _i2cPort->read();
    3aaa:	ldr	r0, [r4, #8]
    3aac:	ldr	r3, [r0, #0]
    3aae:	ldr	r3, [r3, #20]
    3ab0:	blx	r3
    3ab2:	uxtb	r0, r0
	}
	else {
		return (0xFF); //Error
	}
}
    3ab4:	pop	{r3, r4, r5, pc}
		return (0xFF); //Error
    3ab6:	movs	r0, #255	; 0xff
    3ab8:	b.n	3ab4 <RV3028::readRegister(unsigned char)+0x46>

00003aba <RV3028::is12Hour()>:
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    3aba:	movs	r1, #16
{
    3abc:	push	{r3, lr}
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    3abe:	bl	3a6e <RV3028::readRegister(unsigned char)>
}
    3ac2:	ubfx	r0, r0, #1, #1
    3ac6:	pop	{r3, pc}

00003ac8 <RV3028::isPM()>:
{
    3ac8:	push	{r3, r4, r5, lr}
    3aca:	mov	r5, r0
	uint8_t hourRegister = readRegister(RV3028_HOURS);
    3acc:	movs	r1, #2
    3ace:	bl	3a6e <RV3028::readRegister(unsigned char)>
    3ad2:	mov	r4, r0
	if (is12Hour() && (hourRegister & (1 << HOURS_AM_PM)))
    3ad4:	mov	r0, r5
    3ad6:	bl	3aba <RV3028::is12Hour()>
    3ada:	cbz	r0, 3ae0 <RV3028::isPM()+0x18>
    3adc:	ubfx	r0, r4, #5, #1
}
    3ae0:	pop	{r3, r4, r5, pc}
	...

00003ae4 <RV3028::stringTimeStamp()>:
{
    3ae4:	push	{r4, r5, r6, r7, lr}
    3ae6:	sub	sp, #28
    3ae8:	mov	r4, r0
	if (is12Hour() == true)
    3aea:	bl	3aba <RV3028::is12Hour()>
    3aee:	cmp	r0, #0
    3af0:	beq.n	3b88 <RV3028::stringTimeStamp()+0xa4>
		if (isPM()) half = 'P';
    3af2:	mov	r0, r4
    3af4:	bl	3ac8 <RV3028::isPM()>
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3af8:	ldrb	r3, [r4, #5]
    3afa:	ldrb	r2, [r4, #6]
		if (isPM()) half = 'P';
    3afc:	cmp	r0, #0
	return ((val / 0x10) * 10) + (val % 0x10);
    3afe:	mov.w	r6, r3, lsr #4
    3b02:	and.w	r3, r3, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3b06:	ldrb	r1, [r4, #4]
		if (isPM()) half = 'P';
    3b08:	it	eq
    3b0a:	moveq	r7, #65	; 0x41
	return ((val / 0x10) * 10) + (val % 0x10);
    3b0c:	add.w	r6, r6, r6, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3b10:	ldrb	r0, [r4, #2]
    3b12:	ldrb	r5, [r4, #1]
		if (isPM()) half = 'P';
    3b14:	it	ne
    3b16:	movne	r7, #80	; 0x50
	return ((val / 0x10) * 10) + (val % 0x10);
    3b18:	add.w	r3, r3, r6, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3b1c:	ldrb	r4, [r4, #0]
	return ((val / 0x10) * 10) + (val % 0x10);
    3b1e:	lsrs	r6, r2, #4
    3b20:	and.w	r2, r2, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3b24:	uxtb	r3, r3
    3b26:	str	r7, [sp, #16]
	return ((val / 0x10) * 10) + (val % 0x10);
    3b28:	add.w	r6, r6, r6, lsl #2
    3b2c:	add.w	r2, r2, r6, lsl #1
    3b30:	lsrs	r6, r4, #4
    3b32:	and.w	r4, r4, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3b36:	uxtb	r2, r2
	return ((val / 0x10) * 10) + (val % 0x10);
    3b38:	add.w	r6, r6, r6, lsl #2
    3b3c:	add.w	r4, r4, r6, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3b40:	uxtb	r4, r4
    3b42:	str	r4, [sp, #12]
	return ((val / 0x10) * 10) + (val % 0x10);
    3b44:	lsrs	r4, r5, #4
    3b46:	and.w	r5, r5, #15
    3b4a:	add.w	r4, r4, r4, lsl #2
    3b4e:	add.w	r5, r5, r4, lsl #1
    3b52:	lsrs	r4, r0, #4
    3b54:	and.w	r0, r0, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3b58:	uxtb	r5, r5
	return ((val / 0x10) * 10) + (val % 0x10);
    3b5a:	add.w	r4, r4, r4, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3b5e:	str	r5, [sp, #8]
	return ((val / 0x10) * 10) + (val % 0x10);
    3b60:	add.w	r0, r0, r4, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3b64:	uxtb	r0, r0
    3b66:	str	r0, [sp, #4]
	return ((val / 0x10) * 10) + (val % 0x10);
    3b68:	lsrs	r0, r1, #4
    3b6a:	and.w	r1, r1, #15
    3b6e:	add.w	r0, r0, r0, lsl #2
    3b72:	add.w	r1, r1, r0, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3b76:	ldr	r0, [pc, #144]	; (3c08 <RV3028::stringTimeStamp()+0x124>)
    3b78:	uxtb	r1, r1
    3b7a:	str	r1, [sp, #0]
    3b7c:	ldr	r1, [pc, #140]	; (3c0c <RV3028::stringTimeStamp()+0x128>)
    3b7e:	bl	eb1c <sprintf>
}
    3b82:	ldr	r0, [pc, #132]	; (3c08 <RV3028::stringTimeStamp()+0x124>)
    3b84:	add	sp, #28
    3b86:	pop	{r4, r5, r6, r7, pc}
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3b88:	ldrb	r3, [r4, #5]
    3b8a:	ldrb	r2, [r4, #6]
	return ((val / 0x10) * 10) + (val % 0x10);
    3b8c:	lsrs	r6, r3, #4
    3b8e:	and.w	r3, r3, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3b92:	ldrb	r1, [r4, #4]
	return ((val / 0x10) * 10) + (val % 0x10);
    3b94:	add.w	r6, r6, r6, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3b98:	ldrb	r0, [r4, #2]
    3b9a:	ldrb	r5, [r4, #1]
	return ((val / 0x10) * 10) + (val % 0x10);
    3b9c:	add.w	r3, r3, r6, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3ba0:	ldrb	r4, [r4, #0]
	return ((val / 0x10) * 10) + (val % 0x10);
    3ba2:	lsrs	r6, r2, #4
    3ba4:	and.w	r2, r2, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3ba8:	uxtb	r3, r3
	return ((val / 0x10) * 10) + (val % 0x10);
    3baa:	add.w	r6, r6, r6, lsl #2
    3bae:	add.w	r2, r2, r6, lsl #1
    3bb2:	lsrs	r6, r4, #4
    3bb4:	and.w	r4, r4, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3bb8:	uxtb	r2, r2
	return ((val / 0x10) * 10) + (val % 0x10);
    3bba:	add.w	r6, r6, r6, lsl #2
    3bbe:	add.w	r4, r4, r6, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3bc2:	uxtb	r4, r4
    3bc4:	str	r4, [sp, #12]
	return ((val / 0x10) * 10) + (val % 0x10);
    3bc6:	lsrs	r4, r5, #4
    3bc8:	and.w	r5, r5, #15
    3bcc:	add.w	r4, r4, r4, lsl #2
    3bd0:	add.w	r5, r5, r4, lsl #1
    3bd4:	lsrs	r4, r0, #4
    3bd6:	and.w	r0, r0, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3bda:	uxtb	r5, r5
	return ((val / 0x10) * 10) + (val % 0x10);
    3bdc:	add.w	r4, r4, r4, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3be0:	str	r5, [sp, #8]
	return ((val / 0x10) * 10) + (val % 0x10);
    3be2:	add.w	r0, r0, r4, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3be6:	uxtb	r0, r0
    3be8:	str	r0, [sp, #4]
	return ((val / 0x10) * 10) + (val % 0x10);
    3bea:	lsrs	r0, r1, #4
    3bec:	and.w	r1, r1, #15
    3bf0:	add.w	r0, r0, r0, lsl #2
    3bf4:	add.w	r1, r1, r0, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3bf8:	ldr	r0, [pc, #12]	; (3c08 <RV3028::stringTimeStamp()+0x124>)
    3bfa:	uxtb	r1, r1
    3bfc:	str	r1, [sp, #0]
    3bfe:	ldr	r1, [pc, #16]	; (3c10 <RV3028::stringTimeStamp()+0x12c>)
    3c00:	bl	eb1c <sprintf>
    3c04:	b.n	3b82 <RV3028::stringTimeStamp()+0x9e>
    3c06:	nop
    3c08:	.word	0x20010b8e
    3c0c:	.word	0x20007fde
    3c10:	.word	0x2000800e

00003c14 <RV3028::writeRegister(unsigned char, unsigned char)>:

bool RV3028::writeRegister(uint8_t addr, uint8_t val)
{
    3c14:	push	{r4, r5, r6, lr}
	_i2cPort->beginTransmission(RV3028_ADDR);
    3c16:	ldr	r3, [r0, #8]
		transmitting = 1;
    3c18:	movs	r5, #1
{
    3c1a:	mov	r6, r2
		txBuffer[0] = (address << 1);
    3c1c:	movs	r2, #164	; 0xa4
    3c1e:	mov	r4, r0
		transmitting = 1;
    3c20:	strb.w	r5, [r3, #304]	; 0x130
		txBuffer[0] = (address << 1);
    3c24:	strb.w	r2, [r3, #165]	; 0xa5
		txBufferLength = 1;
    3c28:	strb.w	r5, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    3c2c:	ldr	r0, [r0, #8]
    3c2e:	ldr	r3, [r0, #0]
    3c30:	ldr	r3, [r3, #0]
    3c32:	blx	r3
	_i2cPort->write(val);
    3c34:	ldr	r0, [r4, #8]
    3c36:	mov	r1, r6
    3c38:	ldr	r3, [r0, #0]
    3c3a:	ldr	r3, [r3, #0]
    3c3c:	blx	r3
		return endTransmission(1);
    3c3e:	mov	r1, r5
    3c40:	ldr	r0, [r4, #8]
    3c42:	bl	55d8 <TwoWire::endTransmission(unsigned char)>
	if (_i2cPort->endTransmission() != 0)
		return (false); //Error: Sensor did not ack
	return(true);
}
    3c46:	clz	r0, r0
    3c4a:	lsrs	r0, r0, #5
    3c4c:	pop	{r4, r5, r6, pc}

00003c4e <RV3028::set12Hour()>:
{
    3c4e:	push	{r4, r5, r6, lr}
    3c50:	mov	r5, r0
	if (is12Hour() == false)
    3c52:	bl	3aba <RV3028::is12Hour()>
    3c56:	mov	r6, r0
    3c58:	cbnz	r0, 3cbc <RV3028::set12Hour()+0x6e>
		uint8_t hour = BCDtoDEC(readRegister(RV3028_HOURS)); //Get the current hour in the RTC
    3c5a:	movs	r1, #2
    3c5c:	mov	r0, r5
    3c5e:	bl	3a6e <RV3028::readRegister(unsigned char)>
	return ((val / 0x10) * 10) + (val % 0x10);
    3c62:	and.w	r4, r0, #15
    3c66:	lsrs	r3, r0, #4
		uint8_t setting = readRegister(RV3028_CTRL2);
    3c68:	movs	r1, #16
    3c6a:	mov	r0, r5
	return ((val / 0x10) * 10) + (val % 0x10);
    3c6c:	add.w	r3, r3, r3, lsl #2
    3c70:	add.w	r4, r4, r3, lsl #1
		uint8_t setting = readRegister(RV3028_CTRL2);
    3c74:	bl	3a6e <RV3028::readRegister(unsigned char)>
		setting |= (1 << CTRL2_12_24);
    3c78:	orr.w	r0, r0, #2
	return ((val / 0x10) * 10) + (val % 0x10);
    3c7c:	uxtb	r4, r4
		writeRegister(RV3028_CTRL2, setting);
    3c7e:	movs	r1, #16
    3c80:	uxtb	r2, r0
    3c82:	mov	r0, r5
    3c84:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
		if (hour == 0)
    3c88:	cbz	r4, 3c98 <RV3028::set12Hour()+0x4a>
		else if (hour == 12)
    3c8a:	cmp	r4, #12
    3c8c:	beq.n	3c94 <RV3028::set12Hour()+0x46>
		else if (hour > 12)
    3c8e:	bls.n	3c9a <RV3028::set12Hour()+0x4c>
			hour -= 12;
    3c90:	subs	r4, #12
    3c92:	uxtb	r4, r4
			pm = true;
    3c94:	movs	r6, #1
    3c96:	b.n	3c9a <RV3028::set12Hour()+0x4c>
			hour += 12;
    3c98:	movs	r4, #12
	return ((val / 10) * 0x10) + (val % 10);
    3c9a:	movs	r2, #10
    3c9c:	udiv	r3, r4, r2
    3ca0:	mls	r2, r2, r3, r4
    3ca4:	add.w	r2, r2, r3, lsl #4
    3ca8:	uxtb	r2, r2
		if (pm == true) hour |= (1 << HOURS_AM_PM); //Set AM/PM bit if needed
    3caa:	cbz	r6, 3cb0 <RV3028::set12Hour()+0x62>
    3cac:	orr.w	r2, r2, #32
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    3cb0:	mov	r0, r5
    3cb2:	movs	r1, #2
}
    3cb4:	ldmia.w	sp!, {r4, r5, r6, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    3cb8:	b.w	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
}
    3cbc:	pop	{r4, r5, r6, pc}

00003cbe <RV3028::set24Hour()>:
{
    3cbe:	push	{r4, r5, r6, lr}
    3cc0:	mov	r5, r0
	if (is12Hour() == true)
    3cc2:	bl	3aba <RV3028::is12Hour()>
    3cc6:	mov	r6, r0
    3cc8:	cbz	r0, 3d38 <RV3028::set24Hour()+0x7a>
		uint8_t hour = readRegister(RV3028_HOURS); //Get the current 12 hour formatted time in BCD
    3cca:	movs	r1, #2
    3ccc:	mov	r0, r5
    3cce:	bl	3a6e <RV3028::readRegister(unsigned char)>
		if (hour & (1 << HOURS_AM_PM)) //Is the AM/PM bit set?
    3cd2:	ands.w	r3, r0, #32
		uint8_t hour = readRegister(RV3028_HOURS); //Get the current 12 hour formatted time in BCD
    3cd6:	mov	r4, r0
		uint8_t setting = readRegister(RV3028_CTRL2);
    3cd8:	mov.w	r1, #16
			hour &= ~(1 << HOURS_AM_PM); //Clear the bit
    3cdc:	it	ne
    3cde:	andne.w	r4, r0, #223	; 0xdf
		uint8_t setting = readRegister(RV3028_CTRL2);
    3ce2:	mov	r0, r5
		bool pm = false;
    3ce4:	it	eq
    3ce6:	moveq	r6, r3
		uint8_t setting = readRegister(RV3028_CTRL2);
    3ce8:	bl	3a6e <RV3028::readRegister(unsigned char)>
		writeRegister(RV3028_CTRL2, setting);
    3cec:	movs	r1, #16
    3cee:	and.w	r2, r0, #253	; 0xfd
    3cf2:	mov	r0, r5
    3cf4:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
	return ((val / 0x10) * 10) + (val % 0x10);
    3cf8:	and.w	r2, r4, #15
    3cfc:	lsrs	r3, r4, #4
    3cfe:	add.w	r3, r3, r3, lsl #2
    3d02:	add.w	r2, r2, r3, lsl #1
    3d06:	uxtb	r2, r2
		if (pm == true) hour += 12; //2PM becomes 14
    3d08:	cbz	r6, 3d0e <RV3028::set24Hour()+0x50>
    3d0a:	adds	r2, #12
    3d0c:	uxtb	r2, r2
		if (hour == 12) hour = 0; //12AM stays 12, but should really be 0
    3d0e:	cmp	r2, #12
    3d10:	beq.n	3d34 <RV3028::set24Hour()+0x76>
		if (hour == 24) hour = 12; //12PM becomes 24, but should really be 12
    3d12:	cmp	r2, #24
    3d14:	it	eq
    3d16:	moveq	r2, #12
	return ((val / 10) * 0x10) + (val % 10);
    3d18:	movs	r1, #10
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    3d1a:	mov	r0, r5
	return ((val / 10) * 0x10) + (val % 10);
    3d1c:	udiv	r3, r2, r1
    3d20:	mls	r2, r1, r3, r2
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    3d24:	movs	r1, #2
	return ((val / 10) * 0x10) + (val % 10);
    3d26:	add.w	r2, r2, r3, lsl #4
}
    3d2a:	ldmia.w	sp!, {r4, r5, r6, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    3d2e:	uxtb	r2, r2
    3d30:	b.w	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
		if (hour == 12) hour = 0; //12AM stays 12, but should really be 0
    3d34:	movs	r2, #0
    3d36:	b.n	3d18 <RV3028::set24Hour()+0x5a>
}
    3d38:	pop	{r4, r5, r6, pc}

00003d3a <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>:

bool RV3028::readMultipleRegisters(uint8_t addr, uint8_t * dest, uint8_t len)
{
    3d3a:	push	{r3, r4, r5, r6, r7, lr}
		transmitting = 1;
    3d3c:	movs	r7, #1
    3d3e:	mov	r4, r2
    3d40:	mov	r6, r3
		txBuffer[0] = (address << 1);
    3d42:	movs	r2, #164	; 0xa4
	_i2cPort->beginTransmission(RV3028_ADDR);
    3d44:	ldr	r3, [r0, #8]
{
    3d46:	mov	r5, r0
    3d48:	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    3d4c:	strb.w	r7, [r3, #304]	; 0x130
		txBufferLength = 1;
    3d50:	strb.w	r7, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    3d54:	ldr	r0, [r0, #8]
    3d56:	ldr	r3, [r0, #0]
    3d58:	ldr	r3, [r3, #0]
    3d5a:	blx	r3
		return endTransmission(1);
    3d5c:	mov	r1, r7
    3d5e:	ldr	r0, [r5, #8]
    3d60:	bl	55d8 <TwoWire::endTransmission(unsigned char)>
	if (_i2cPort->endTransmission() != 0)
    3d64:	cbnz	r0, 3d8a <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x50>
		return requestFrom(address, quantity, (uint8_t)1);
    3d66:	mov	r2, r6
    3d68:	add	r6, r4
    3d6a:	mov	r3, r7
    3d6c:	movs	r1, #82	; 0x52
    3d6e:	ldr	r0, [r5, #8]
    3d70:	bl	56bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return (false); //Error: Sensor did not ack

	_i2cPort->requestFrom(RV3028_ADDR, len);
	for (uint8_t i = 0; i < len; i++)
    3d74:	cmp	r6, r4
    3d76:	bne.n	3d7c <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x42>
    3d78:	movs	r0, #1
	{
		dest[i] = _i2cPort->read();
	}

	return(true);
}
    3d7a:	pop	{r3, r4, r5, r6, r7, pc}
		dest[i] = _i2cPort->read();
    3d7c:	ldr	r0, [r5, #8]
    3d7e:	ldr	r3, [r0, #0]
    3d80:	ldr	r3, [r3, #20]
    3d82:	blx	r3
    3d84:	strb.w	r0, [r4], #1
	for (uint8_t i = 0; i < len; i++)
    3d88:	b.n	3d74 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x3a>
		return (false); //Error: Sensor did not ack
    3d8a:	movs	r0, #0
    3d8c:	b.n	3d7a <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x40>

00003d8e <RV3028::updateTime()>:
{
    3d8e:	push	{r3, r4, r5, lr}
	if (readMultipleRegisters(RV3028_SECONDS, _time, TIME_ARRAY_LENGTH) == false)
    3d90:	mov	r2, r0
    3d92:	movs	r3, #7
    3d94:	movs	r1, #0
{
    3d96:	mov	r4, r0
	if (readMultipleRegisters(RV3028_SECONDS, _time, TIME_ARRAY_LENGTH) == false)
    3d98:	bl	3d3a <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>
    3d9c:	mov	r5, r0
    3d9e:	cbz	r0, 3db2 <RV3028::updateTime()+0x24>
	if (is12Hour()) _time[TIME_HOURS] &= ~(1 << HOURS_AM_PM); //Remove this bit from value
    3da0:	mov	r0, r4
    3da2:	bl	3aba <RV3028::is12Hour()>
    3da6:	cbz	r0, 3db2 <RV3028::updateTime()+0x24>
    3da8:	ldrb	r3, [r4, #2]
	return true;
    3daa:	mov	r5, r0
	if (is12Hour()) _time[TIME_HOURS] &= ~(1 << HOURS_AM_PM); //Remove this bit from value
    3dac:	bic.w	r3, r3, #32
    3db0:	strb	r3, [r4, #2]
}
    3db2:	mov	r0, r5
    3db4:	pop	{r3, r4, r5, pc}

00003db6 <RV3028::getUNIX()>:
	readMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    3db6:	movs	r3, #4
{
    3db8:	push	{r0, r1, r2, lr}
	readMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    3dba:	movs	r1, #27
    3dbc:	add.w	r2, sp, r3
    3dc0:	bl	3d3a <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>
}
    3dc4:	ldr	r0, [sp, #4]
    3dc6:	add	sp, #12
    3dc8:	ldr.w	pc, [sp], #4

00003dcc <RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)>:

bool RV3028::writeMultipleRegisters(uint8_t addr, uint8_t * values, uint8_t len)
{
    3dcc:	push	{r4, r5, r6, lr}
    3dce:	mov	r4, r2
    3dd0:	mov	r5, r3
		txBuffer[0] = (address << 1);
    3dd2:	movs	r2, #164	; 0xa4
	_i2cPort->beginTransmission(RV3028_ADDR);
    3dd4:	ldr	r3, [r0, #8]
{
    3dd6:	mov	r6, r0
    3dd8:	add	r5, r4
    3dda:	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    3dde:	movs	r2, #1
    3de0:	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    3de4:	strb.w	r2, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    3de8:	ldr	r0, [r0, #8]
    3dea:	ldr	r3, [r0, #0]
    3dec:	ldr	r3, [r3, #0]
    3dee:	blx	r3
	for (uint8_t i = 0; i < len; i++)
    3df0:	cmp	r4, r5
	{
		_i2cPort->write(values[i]);
    3df2:	ldr	r0, [r6, #8]
	for (uint8_t i = 0; i < len; i++)
    3df4:	bne.n	3e04 <RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x38>
		return endTransmission(1);
    3df6:	movs	r1, #1
    3df8:	bl	55d8 <TwoWire::endTransmission(unsigned char)>
	}

	if (_i2cPort->endTransmission() != 0)
		return (false); //Error: Sensor did not ack
	return(true);
}
    3dfc:	clz	r0, r0
    3e00:	lsrs	r0, r0, #5
    3e02:	pop	{r4, r5, r6, pc}
		_i2cPort->write(values[i]);
    3e04:	ldr	r3, [r0, #0]
    3e06:	ldrb.w	r1, [r4], #1
    3e0a:	ldr	r3, [r3, #0]
    3e0c:	blx	r3
	for (uint8_t i = 0; i < len; i++)
    3e0e:	b.n	3df0 <RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x24>

00003e10 <RV3028::setTime(unsigned char*, unsigned char) [clone .part.0]>:
bool RV3028::setTime(uint8_t * time, uint8_t len)
    3e10:	mov	r2, r1
	return writeMultipleRegisters(RV3028_SECONDS, time, len);
    3e12:	movs	r3, #7
    3e14:	movs	r1, #0
    3e16:	b.w	3dcc <RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)>

00003e1a <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
{
    3e1a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((val / 10) * 0x10) + (val % 10);
    3e1e:	movs	r5, #10
{
    3e20:	ldrb.w	r8, [sp, #24]
    3e24:	ldrb.w	lr, [sp, #28]
    3e28:	mov	r4, r0
    3e2a:	ldrb.w	ip, [sp, #32]
    3e2e:	ldrh.w	r6, [sp, #36]	; 0x24
	return ((val / 10) * 0x10) + (val % 10);
    3e32:	udiv	r7, r1, r5
    3e36:	mls	r1, r5, r7, r1
    3e3a:	add.w	r1, r1, r7, lsl #4
	_time[TIME_SECONDS] = DECtoBCD(sec);
    3e3e:	strb	r1, [r0, #0]
	return ((val / 10) * 0x10) + (val % 10);
    3e40:	udiv	r1, r2, r5
    3e44:	mls	r2, r5, r1, r2
    3e48:	add.w	r7, r2, r1, lsl #4
    3e4c:	udiv	r2, r3, r5
	_time[TIME_MINUTES] = DECtoBCD(min);
    3e50:	strb	r7, [r0, #1]
	return ((val / 10) * 0x10) + (val % 10);
    3e52:	mls	r7, r5, r2, r3
    3e56:	udiv	r3, r8, r5
    3e5a:	mls	r1, r5, r3, r8
    3e5e:	add.w	r7, r7, r2, lsl #4
    3e62:	add.w	r1, r1, r3, lsl #4
	_time[TIME_HOURS] = DECtoBCD(hour);
    3e66:	strb	r7, [r0, #2]
	return ((val / 10) * 0x10) + (val % 10);
    3e68:	udiv	r3, lr, r5
    3e6c:	mls	r2, r5, r3, lr
	_time[TIME_WEEKDAY] = DECtoBCD(weekday);
    3e70:	strb	r1, [r0, #3]
	return ((val / 10) * 0x10) + (val % 10);
    3e72:	add.w	r2, r2, r3, lsl #4
	_time[TIME_DATE] = DECtoBCD(date);
    3e76:	strb	r2, [r0, #4]
	return ((val / 10) * 0x10) + (val % 10);
    3e78:	udiv	r2, ip, r5
    3e7c:	mls	r3, r5, r2, ip
    3e80:	add.w	r3, r3, r2, lsl #4
	_time[TIME_MONTH] = DECtoBCD(month);
    3e84:	strb	r3, [r0, #5]
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    3e86:	add.w	r3, r6, #48	; 0x30
    3e8a:	uxtb	r3, r3
	return ((val / 10) * 0x10) + (val % 10);
    3e8c:	udiv	r2, r3, r5
    3e90:	mls	r3, r5, r2, r3
    3e94:	add.w	r3, r3, r2, lsl #4
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    3e98:	strb	r3, [r0, #6]
	if (is12Hour())
    3e9a:	bl	3aba <RV3028::is12Hour()>
    3e9e:	cbnz	r0, 3eac <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x92>
	if (len != TIME_ARRAY_LENGTH)
    3ea0:	mov	r1, r4
    3ea2:	mov	r0, r4
}
    3ea4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3ea8:	b.w	3e10 <RV3028::setTime(unsigned char*, unsigned char) [clone .part.0]>
		set24Hour();
    3eac:	mov	r0, r4
    3eae:	bl	3cbe <RV3028::set24Hour()>
	if (len != TIME_ARRAY_LENGTH)
    3eb2:	mov	r1, r4
    3eb4:	mov	r0, r4
    3eb6:	bl	3e10 <RV3028::setTime(unsigned char*, unsigned char) [clone .part.0]>
    3eba:	mov	r5, r0
		set12Hour();
    3ebc:	mov	r0, r4
    3ebe:	bl	3c4e <RV3028::set12Hour()>
}
    3ec2:	mov	r0, r5
    3ec4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003ec8 <RV3028::setUNIX(unsigned long)>:
	return writeMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    3ec8:	movs	r3, #4
{
    3eca:	push	{r0, r1, r2, lr}
	unix_reg[0] = value;
    3ecc:	str	r1, [sp, #4]
	return writeMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    3ece:	add.w	r2, sp, r3
    3ed2:	movs	r1, #27
    3ed4:	bl	3dcc <RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)>
}
    3ed8:	add	sp, #12
    3eda:	ldr.w	pc, [sp], #4
	...

00003ee0 <RV3028::waitforEEPROM()>:
	return eepromdata;
}

//True if success, false if timeout occured
bool RV3028::waitforEEPROM()
{
    3ee0:	push	{r4, r5, r6, lr}
	return systick_millis_count;
    3ee2:	ldr	r5, [pc, #40]	; (3f0c <RV3028::waitforEEPROM()+0x2c>)
    3ee4:	mov	r6, r0
    3ee6:	ldr	r4, [r5, #0]
	unsigned long timeout = millis() + 500;
    3ee8:	add.w	r4, r4, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    3eec:	movs	r1, #14
    3eee:	mov	r0, r6
    3ef0:	bl	3a6e <RV3028::readRegister(unsigned char)>
    3ef4:	lsls	r3, r0, #24
    3ef6:	bpl.n	3efe <RV3028::waitforEEPROM()+0x1e>
    3ef8:	ldr	r3, [r5, #0]
    3efa:	cmp	r4, r3
    3efc:	bhi.n	3eec <RV3028::waitforEEPROM()+0xc>
    3efe:	ldr	r0, [r5, #0]

	return millis() < timeout;
}
    3f00:	cmp	r4, r0
    3f02:	ite	ls
    3f04:	movls	r0, #0
    3f06:	movhi	r0, #1
    3f08:	pop	{r4, r5, r6, pc}
    3f0a:	nop
    3f0c:	.word	0x2001094c

00003f10 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>:
{
    3f10:	push	{r3, r4, r5, r6, r7, lr}
    3f12:	mov	r4, r0
    3f14:	mov	r7, r2
    3f16:	mov	r6, r1
	bool success = waitforEEPROM();
    3f18:	bl	3ee0 <RV3028::waitforEEPROM()>
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    3f1c:	movs	r1, #15
	bool success = waitforEEPROM();
    3f1e:	mov	r5, r0
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    3f20:	mov	r0, r4
    3f22:	bl	3a6e <RV3028::readRegister(unsigned char)>
	ctrl1 |= 1 << CTRL1_EERD;
    3f26:	orr.w	r0, r0, #8
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    3f2a:	movs	r1, #15
    3f2c:	uxtb	r2, r0
    3f2e:	mov	r0, r4
    3f30:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
    3f34:	cmp	r0, #0
	writeRegister(eepromaddr, val);
    3f36:	mov	r2, r7
    3f38:	mov	r1, r6
    3f3a:	mov	r0, r4
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    3f3c:	it	eq
    3f3e:	moveq	r5, #0
	writeRegister(eepromaddr, val);
    3f40:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_First);
    3f44:	movs	r2, #0
    3f46:	movs	r1, #39	; 0x27
    3f48:	mov	r0, r4
    3f4a:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_Update);
    3f4e:	movs	r2, #17
    3f50:	movs	r1, #39	; 0x27
    3f52:	mov	r0, r4
    3f54:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!waitforEEPROM()) success = false;
    3f58:	mov	r0, r4
    3f5a:	bl	3ee0 <RV3028::waitforEEPROM()>
    3f5e:	cmp	r0, #0
	ctrl1 = readRegister(RV3028_CTRL1);
    3f60:	mov.w	r1, #15
    3f64:	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    3f66:	it	eq
    3f68:	moveq	r5, #0
	ctrl1 = readRegister(RV3028_CTRL1);
    3f6a:	bl	3a6e <RV3028::readRegister(unsigned char)>
	if (ctrl1 == 0x00)success = false;
    3f6e:	subs	r2, r0, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    3f70:	mov.w	r1, #15
    3f74:	mov	r0, r4
    3f76:	and.w	r2, r2, #247	; 0xf7
	if (ctrl1 == 0x00)success = false;
    3f7a:	it	eq
    3f7c:	moveq	r5, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    3f7e:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!waitforEEPROM()) success = false;
    3f82:	mov	r0, r4
    3f84:	bl	3ee0 <RV3028::waitforEEPROM()>
    3f88:	cmp	r0, #0
}
    3f8a:	ite	ne
    3f8c:	movne	r0, r5
    3f8e:	moveq	r0, #0
    3f90:	pop	{r3, r4, r5, r6, r7, pc}

00003f92 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>:
{
    3f92:	push	{r4, r5, r6, lr}
    3f94:	mov	r4, r0
    3f96:	mov	r6, r1
	bool success = waitforEEPROM();
    3f98:	bl	3ee0 <RV3028::waitforEEPROM()>
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    3f9c:	movs	r1, #15
	bool success = waitforEEPROM();
    3f9e:	mov	r5, r0
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    3fa0:	mov	r0, r4
    3fa2:	bl	3a6e <RV3028::readRegister(unsigned char)>
	ctrl1 |= 1 << CTRL1_EERD;
    3fa6:	orr.w	r0, r0, #8
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    3faa:	movs	r1, #15
    3fac:	uxtb	r2, r0
    3fae:	mov	r0, r4
    3fb0:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
    3fb4:	cmp	r0, #0
	writeRegister(RV3028_EEPROM_ADDR, eepromaddr);
    3fb6:	mov	r2, r6
    3fb8:	mov.w	r1, #37	; 0x25
    3fbc:	mov	r0, r4
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    3fbe:	it	eq
    3fc0:	moveq	r5, #0
	writeRegister(RV3028_EEPROM_ADDR, eepromaddr);
    3fc2:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_First);
    3fc6:	movs	r2, #0
    3fc8:	movs	r1, #39	; 0x27
    3fca:	mov	r0, r4
    3fcc:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_ReadSingle);
    3fd0:	movs	r2, #34	; 0x22
    3fd2:	movs	r1, #39	; 0x27
    3fd4:	mov	r0, r4
    3fd6:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!waitforEEPROM()) success = false;
    3fda:	mov	r0, r4
    3fdc:	bl	3ee0 <RV3028::waitforEEPROM()>
    3fe0:	cmp	r0, #0
	uint8_t eepromdata = readRegister(RV3028_EEPROM_DATA);
    3fe2:	mov.w	r1, #38	; 0x26
    3fe6:	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    3fe8:	it	eq
    3fea:	moveq	r5, #0
	uint8_t eepromdata = readRegister(RV3028_EEPROM_DATA);
    3fec:	bl	3a6e <RV3028::readRegister(unsigned char)>
    3ff0:	mov	r6, r0
	if (!waitforEEPROM()) success = false;
    3ff2:	mov	r0, r4
    3ff4:	bl	3ee0 <RV3028::waitforEEPROM()>
    3ff8:	cmp	r0, #0
	ctrl1 = readRegister(RV3028_CTRL1);
    3ffa:	mov.w	r1, #15
    3ffe:	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    4000:	it	eq
    4002:	moveq	r5, #0
	ctrl1 = readRegister(RV3028_CTRL1);
    4004:	bl	3a6e <RV3028::readRegister(unsigned char)>
	if (ctrl1 == 0x00)success = false;
    4008:	subs	r2, r0, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    400a:	mov.w	r1, #15
    400e:	mov	r0, r4
	if (ctrl1 == 0x00)success = false;
    4010:	it	eq
    4012:	moveq	r5, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    4014:	and.w	r2, r2, #247	; 0xf7
    4018:	bl	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!success) return 0xFF;
    401c:	cmp	r5, #0
}
    401e:	ite	ne
    4020:	movne	r0, r6
    4022:	moveq	r0, #255	; 0xff
    4024:	pop	{r4, r5, r6, pc}

00004026 <RV3028::disableTrickleCharge()>:
{
    4026:	push	{r4, lr}
    4028:	mov	r4, r0
	uint8_t EEPROMBackup = readConfigEEPROM_RAMmirror(EEPROM_Backup_Register);
    402a:	movs	r1, #55	; 0x37
    402c:	bl	3f92 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>
	writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup);
    4030:	movs	r1, #55	; 0x37
    4032:	and.w	r2, r0, #223	; 0xdf
    4036:	mov	r0, r4
}
    4038:	ldmia.w	sp!, {r4, lr}
	writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup);
    403c:	b.w	3f10 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>

00004040 <RV3028::setBackupSwitchoverMode(unsigned char) [clone .part.0]>:
bool RV3028::setBackupSwitchoverMode(uint8_t val)
    4040:	push	{r4, r5, r6, lr}
    4042:	mov	r6, r1
	uint8_t EEPROMBackup = readConfigEEPROM_RAMmirror(EEPROM_Backup_Register);
    4044:	movs	r1, #55	; 0x37
bool RV3028::setBackupSwitchoverMode(uint8_t val)
    4046:	mov	r5, r0
	uint8_t EEPROMBackup = readConfigEEPROM_RAMmirror(EEPROM_Backup_Register);
    4048:	bl	3f92 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>
    404c:	bic.w	r2, r0, #12
    4050:	mov	r4, r0
	if (!writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup)) success = false;
    4052:	mov	r0, r5
    4054:	orr.w	r1, r2, r6, lsl #2
    4058:	uxtb	r2, r1
    405a:	movs	r1, #55	; 0x37
    405c:	orr.w	r2, r2, #16
    4060:	bl	3f10 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>
    4064:	cbz	r0, 406e <RV3028::setBackupSwitchoverMode(unsigned char) [clone .part.0]+0x2e>
	if (EEPROMBackup == 0xFF) success = false;
    4066:	subs.w	r0, r4, #255	; 0xff
    406a:	it	ne
    406c:	movne	r0, #1
}
    406e:	pop	{r4, r5, r6, pc}

00004070 <RV3028::begin(TwoWire&, bool, bool, bool)>:
{
    4070:	push	{r3, r4, r5, r6, r7, lr}
    4072:	mov	r6, r2
    4074:	mov	r4, r0
	_i2cPort = &wirePort;
    4076:	str	r1, [r0, #8]
	delay(1);
    4078:	movs	r0, #1
{
    407a:	mov	r5, r3
    407c:	ldrb.w	r7, [sp, #24]
	delay(1);
    4080:	bl	bab4 <delay>
	if (set_24Hour) { set24Hour(); delay(1); }
    4084:	cbz	r6, 4092 <RV3028::begin(TwoWire&, bool, bool, bool)+0x22>
    4086:	mov	r0, r4
    4088:	bl	3cbe <RV3028::set24Hour()>
    408c:	movs	r0, #1
    408e:	bl	bab4 <delay>
	if (disable_TrickleCharge) { disableTrickleCharge(); delay(1); }
    4092:	cbz	r5, 40a0 <RV3028::begin(TwoWire&, bool, bool, bool)+0x30>
    4094:	mov	r0, r4
    4096:	bl	4026 <RV3028::disableTrickleCharge()>
    409a:	movs	r0, #1
    409c:	bl	bab4 <delay>
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    40a0:	cbnz	r7, 40b0 <RV3028::begin(TwoWire&, bool, bool, bool)+0x40>
    40a2:	mov	r0, r4
    40a4:	movs	r2, #0
    40a6:	movs	r1, #14
}
    40a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    40ac:	b.w	3c14 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (val > 3)return false;
    40b0:	movs	r1, #3
    40b2:	mov	r0, r4
    40b4:	bl	4040 <RV3028::setBackupSwitchoverMode(unsigned char) [clone .part.0]>
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    40b8:	cmp	r0, #0
    40ba:	bne.n	40a2 <RV3028::begin(TwoWire&, bool, bool, bool)+0x32>
}
    40bc:	pop	{r3, r4, r5, r6, r7, pc}

000040be <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    40be:	push	{r3, r4, r5, lr}
    40c0:	mov	r4, r0
    40c2:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    40c4:	movs	r2, #60	; 0x3c
    40c6:	mov	r1, r5
    40c8:	mov	r0, r4
    40ca:	bl	c5c4 <usb_mtp_send>
    40ce:	cmp	r0, #0
    40d0:	ble.n	40c4 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    40d2:	pop	{r3, r4, r5, pc}

000040d4 <MTPD::write(char const*, int) [clone .part.0]>:
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    40d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    40d8:	mov	r7, r1
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    40da:	add.w	r1, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    40de:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    40e0:	ldr.w	r3, [r1, #1064]	; 0x428
    40e4:	cbnz	r3, 40ee <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    40e6:	add.w	r2, r0, #544	; 0x220
    40ea:	ldr	r4, [pc, #92]	; (4148 <MTPD::write(char const*, int) [clone .part.0]+0x74>)
    40ec:	str	r2, [r4, #0]
        write_length_ += len;
    40ee:	add	r3, r6
        
        const char * src=data;
        //
        int pos = 0; // into data
    40f0:	mov.w	r8, #0
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    40f4:	add.w	r9, r0, #1056	; 0x420
    40f8:	ldr.w	sl, [pc, #76]	; 4148 <MTPD::write(char const*, int) [clone .part.0]+0x74>
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    40fc:	add.w	r4, r0, #544	; 0x220
        write_length_ += len;
    4100:	str.w	r3, [r1, #1064]	; 0x428
        while(pos<len)
    4104:	cmp	r6, r8
    4106:	bgt.n	410c <MTPD::write(char const*, int) [clone .part.0]+0x38>
            dst=tx_data_buffer;
          }
        }
      }
    }
    4108:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    410c:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    4110:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    4114:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    4116:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    411a:	mov	r0, r3
    411c:	cmp	r5, r2
    411e:	it	ge
    4120:	movge	r5, r2
    4122:	mov	r2, r5
          pos += to_copy;
    4124:	add	r8, r5
          memcpy(dst,src,to_copy);
    4126:	bl	a56c <memcpy>
    412a:	mov	r3, r0
          src += to_copy;
    412c:	add	r7, r5
          dst += to_copy;
    412e:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4130:	cmp	r9, r3
          dst += to_copy;
    4132:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4136:	bne.n	4104 <MTPD::write(char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4138:	mov.w	r1, #512	; 0x200
    413c:	mov	r0, r4
    413e:	bl	40be <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    4142:	str.w	r4, [sl]
    4146:	b.n	4104 <MTPD::write(char const*, int) [clone .part.0]+0x30>
    4148:	.word	0x2000fc50

0000414c <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    414c:	push	{r4, r5, r6, lr}
    414e:	mov	r5, r0
    storage_->StartGetObjectHandles(store, parent);
    4150:	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    4152:	subs	r4, r1, #1
    int num = 0;
    4154:	movs	r6, #0
    storage_->StartGetObjectHandles(store, parent);
    4156:	ldr	r3, [r0, #0]
    4158:	mov	r1, r4
    415a:	ldr	r3, [r3, #28]
    415c:	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    415e:	ldr	r0, [r5, #0]
    4160:	mov	r1, r4
    4162:	ldr	r3, [r0, #0]
    4164:	ldr	r3, [r3, #32]
    4166:	blx	r3
    4168:	cbnz	r0, 416e <MTPD::GetNumObjects(unsigned long, unsigned long)+0x22>
  }
    416a:	mov	r0, r6
    416c:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    416e:	adds	r6, #1
    4170:	b.n	415e <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>

00004172 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    4172:	ldr	r0, [r0, #0]
    4174:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    4176:	push	{r4, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    4178:	ldr	r4, [r0, #0]
    417a:	ldr	r4, [r4, #76]	; 0x4c
    417c:	blx	r4
    }
    417e:	movw	r2, #8193	; 0x2001
    4182:	movw	r3, #8197	; 0x2005
    4186:	cmp	r0, #0
    4188:	ite	ne
    418a:	movne	r0, r2
    418c:	moveq	r0, r3
    418e:	pop	{r4, pc}

00004190 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    4190:	ldr	r0, [r0, #0]
    4192:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    4194:	push	{r4}
      return storage_->copy(handle,store1,newHandle);
    4196:	ldr	r4, [r0, #0]
    4198:	ldr	r4, [r4, #80]	; 0x50
    419a:	mov	ip, r4
    }
    419c:	ldr.w	r4, [sp], #4
      return storage_->copy(handle,store1,newHandle);
    41a0:	bx	ip
	...

000041a4 <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    41a4:	ldr	r3, [pc, #8]	; (41b0 <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    41a6:	ldr	r0, [r0, #0]
      sessionID_ = id;
    41a8:	str	r1, [r3, #0]
      storage_->ResetIndex();
    41aa:	ldr	r3, [r0, #0]
    41ac:	ldr	r3, [r3, #68]	; 0x44
    41ae:	bx	r3
    41b0:	.word	0x20010788

000041b4 <MTPD::pull_packet(unsigned char*)>:
    {
    41b4:	push	{r4, lr}
    41b6:	mov	r4, r1
      while(!usb_mtp_available());
    41b8:	bl	c594 <usb_mtp_available>
    41bc:	cmp	r0, #0
    41be:	beq.n	41b8 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    41c0:	mov	r0, r4
    41c2:	movs	r1, #60	; 0x3c
    }
    41c4:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    41c8:	b.w	c500 <usb_mtp_recv>

000041cc <MTPD::write(char const*, int)>:
    { if (write_get_length_) 
    41cc:	add.w	r3, r0, #8192	; 0x2000
    41d0:	push	{r4, r5}
    41d2:	ldrb.w	r5, [r3, #1060]	; 0x424
    41d6:	cbz	r5, 41e6 <MTPD::write(char const*, int)+0x1a>
        write_length_ += len;
    41d8:	ldr.w	r1, [r3, #1064]	; 0x428
    41dc:	add	r1, r2
    }
    41de:	pop	{r4, r5}
        write_length_ += len;
    41e0:	str.w	r1, [r3, #1064]	; 0x428
    }
    41e4:	bx	lr
    41e6:	pop	{r4, r5}
    41e8:	b.w	40d4 <MTPD::write(char const*, int) [clone .part.0]>

000041ec <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
    41ec:	push	{r0, r1, r2, lr}
    41ee:	movs	r2, #1
    41f0:	strb.w	r1, [sp, #7]
    41f4:	add.w	r1, sp, #7
    41f8:	bl	41cc <MTPD::write(char const*, int)>
    41fc:	add	sp, #12
    41fe:	ldr.w	pc, [sp], #4

00004202 <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
    4202:	push	{r0, r1, r2, lr}
    4204:	movs	r2, #2
    4206:	strh.w	r1, [sp, #6]
    420a:	add.w	r1, sp, #6
    420e:	bl	41cc <MTPD::write(char const*, int)>
    4212:	add	sp, #12
    4214:	ldr.w	pc, [sp], #4

00004218 <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    4218:	push	{r3, r4, r5, lr}
    421a:	mov	r4, r1
    if (*str) 
    421c:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    421e:	mov	r5, r0
    if (*str) 
    4220:	cbz	r1, 424a <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    4222:	mov	r0, r4
    4224:	subs	r4, #1
    4226:	bl	f580 <strlen>
    422a:	adds	r0, #1
    422c:	uxtb	r1, r0
    422e:	mov	r0, r5
    4230:	bl	41ec <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4234:	ldrb.w	r1, [r4, #1]!
    4238:	mov	r0, r5
    423a:	cbnz	r1, 4244 <MTPD::writestring(char const*)+0x2c>
  }
    423c:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4240:	b.w	4202 <MTPD::write16(unsigned short)>
    4244:	bl	4202 <MTPD::write16(unsigned short)>
    4248:	b.n	4234 <MTPD::writestring(char const*)+0x1c>
  }
    424a:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    424e:	b.w	41ec <MTPD::write8(unsigned char)>
	...

00004254 <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    4254:	movw	r3, #54274	; 0xd402
    4258:	cmp	r1, r3
    425a:	bne.n	4262 <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    425c:	ldr	r1, [pc, #4]	; (4264 <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    425e:	b.w	4218 <MTPD::writestring(char const*)>
  }
    4262:	bx	lr
    4264:	.word	0x20007fb9

00004268 <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    4268:	movw	r3, #54274	; 0xd402
    426c:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    426e:	push	{r4, lr}
    4270:	mov	r4, r0
    switch (prop) {
    4272:	bne.n	42a6 <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    4274:	bl	4202 <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    4278:	mov	r0, r4
    427a:	movw	r1, #65535	; 0xffff
    427e:	bl	4202 <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    4282:	mov	r0, r4
    4284:	movs	r1, #0
    4286:	bl	41ec <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    428a:	mov	r0, r4
    428c:	ldr	r1, [pc, #24]	; (42a8 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    428e:	bl	4218 <MTPD::writestring(char const*)>
    4292:	mov	r0, r4
    4294:	ldr	r1, [pc, #16]	; (42a8 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    4296:	bl	4218 <MTPD::writestring(char const*)>
        write8(0);       // no form
    429a:	mov	r0, r4
    429c:	movs	r1, #0
  }
    429e:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    42a2:	b.w	41ec <MTPD::write8(unsigned char)>
  }
    42a6:	pop	{r4, pc}
    42a8:	.word	0x20007fb9

000042ac <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
    42ac:	push	{r0, r1, r2, lr}
    42ae:	movs	r2, #4
    42b0:	str	r1, [sp, #4]
    42b2:	add.w	r1, sp, r2
    42b6:	bl	41cc <MTPD::write(char const*, int)>
    42ba:	add	sp, #12
    42bc:	ldr.w	pc, [sp], #4

000042c0 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    42c0:	push	{r4, r5, r6, lr}
    42c2:	mov	r4, r0
    42c4:	sub	sp, #24
    write16(100);  // MTP version
    42c6:	movs	r1, #100	; 0x64
    42c8:	ldr	r6, [pc, #240]	; (43bc <MTPD::WriteDescriptor()+0xfc>)
    42ca:	bl	4202 <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    42ce:	movs	r1, #6
    42d0:	mov	r0, r4
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    42d2:	movs	r5, #0
    write32(6);    // MTP extension
    42d4:	bl	42ac <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    42d8:	movs	r1, #100	; 0x64
    42da:	mov	r0, r4
    42dc:	bl	4202 <MTPD::write16(unsigned short)>
    writestring("microsoft.com: 1.0;");
    42e0:	ldr	r1, [pc, #220]	; (43c0 <MTPD::WriteDescriptor()+0x100>)
    42e2:	mov	r0, r4
    42e4:	bl	4218 <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    42e8:	movs	r1, #0
    42ea:	mov	r0, r4
    42ec:	bl	4202 <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    42f0:	movs	r1, #20
    42f2:	mov	r0, r4
    42f4:	bl	42ac <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    42f8:	adds	r5, #1
    42fa:	ldrh.w	r1, [r6], #2
    42fe:	mov	r0, r4
    4300:	bl	4202 <MTPD::write16(unsigned short)>
    4304:	cmp	r5, #20
    4306:	bne.n	42f8 <MTPD::WriteDescriptor()+0x38>
    write32(supported_event_num);      
    4308:	movs	r1, #4
    430a:	mov	r0, r4
    430c:	bl	42ac <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    4310:	movw	r1, #16388	; 0x4004
    4314:	mov	r0, r4
    4316:	bl	4202 <MTPD::write16(unsigned short)>
    431a:	movw	r1, #16389	; 0x4005
    431e:	mov	r0, r4
    4320:	bl	4202 <MTPD::write16(unsigned short)>
    4324:	movw	r1, #16395	; 0x400b
    4328:	mov	r0, r4
    432a:	bl	4202 <MTPD::write16(unsigned short)>
    432e:	movw	r1, #16396	; 0x400c
    4332:	mov	r0, r4
    4334:	bl	4202 <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    4338:	movs	r1, #1
    433a:	mov	r0, r4
    433c:	bl	42ac <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    4340:	movw	r1, #54274	; 0xd402
    4344:	mov	r0, r4
    4346:	bl	4202 <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    434a:	movs	r1, #0
    434c:	mov	r0, r4
    434e:	bl	42ac <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    4352:	movs	r1, #2
    4354:	mov	r0, r4
    4356:	bl	42ac <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    435a:	mov.w	r1, #12288	; 0x3000
    435e:	mov	r0, r4
    4360:	bl	4202 <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    4364:	movw	r1, #12289	; 0x3001
    4368:	mov	r0, r4
    436a:	bl	4202 <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    436e:	ldr	r1, [pc, #84]	; (43c4 <MTPD::WriteDescriptor()+0x104>)
    4370:	mov	r0, r4
    4372:	bl	4218 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    4376:	ldr	r1, [pc, #80]	; (43c8 <MTPD::WriteDescriptor()+0x108>)
    4378:	mov	r0, r4
    437a:	bl	4218 <MTPD::writestring(char const*)>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    437e:	vldr	s0, [pc, #76]	; 43cc <MTPD::WriteDescriptor()+0x10c>
    4382:	add	r2, sp, #4
    4384:	movs	r1, #2
    4386:	movs	r0, #3
    4388:	bl	b820 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    438c:	mov	r2, r5
    438e:	ldr	r1, [pc, #64]	; (43d0 <MTPD::WriteDescriptor()+0x110>)
    4390:	add	r0, sp, #4
    4392:	bl	ee68 <strlcat>
    writestring( buf );    
    4396:	add	r1, sp, #4
    4398:	mov	r0, r4
    439a:	bl	4218 <MTPD::writestring(char const*)>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    439e:	ldr	r1, [pc, #52]	; (43d4 <MTPD::WriteDescriptor()+0x114>)
    43a0:	add	r2, sp, #4
    writestring( buf );    
    43a2:	movs	r3, #10
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    43a4:	ldrh.w	r0, [r1, #2]!
    43a8:	subs	r3, #1
    43aa:	strb.w	r0, [r2], #1
    43ae:	bne.n	43a4 <MTPD::WriteDescriptor()+0xe4>
    writestring(buf);    
    43b0:	add	r1, sp, #4
    43b2:	mov	r0, r4
    43b4:	bl	4218 <MTPD::writestring(char const*)>
  }
    43b8:	add	sp, #24
    43ba:	pop	{r4, r5, r6, pc}
    43bc:	.word	0x200079f8
    43c0:	.word	0x20007f95
    43c4:	.word	0x20007fa9
    43c8:	.word	0x20007fb9
    43cc:	.word	0x3fcb851f
    43d0:	.word	0x20007fae
    43d4:	.word	0x200093fa

000043d8 <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    43d8:	push	{r4, r5, r6, lr}
    43da:	mov	r4, r0
    uint32_t num=storage_->get_FSCount();
    43dc:	ldr	r0, [r0, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    43de:	movs	r6, #0
    uint32_t num=storage_->get_FSCount();
    43e0:	ldr	r3, [r0, #0]
    43e2:	ldr	r3, [r3, #4]
    43e4:	blx	r3
    write32(num); // number of storages (disks)
    43e6:	mov	r1, r0
    uint32_t num=storage_->get_FSCount();
    43e8:	mov	r5, r0
    write32(num); // number of storages (disks)
    43ea:	mov	r0, r4
    43ec:	bl	42ac <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    43f0:	cmp	r6, r5
    43f2:	bne.n	43f6 <MTPD::WriteStorageIDs()+0x1e>
  }
    43f4:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    43f6:	adds	r6, #1
    43f8:	mov	r0, r4
    43fa:	mov	r1, r6
    43fc:	bl	42ac <MTPD::write32(unsigned long)>
    4400:	b.n	43f0 <MTPD::WriteStorageIDs()+0x18>

00004402 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    4402:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    4404:	add.w	r7, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    4408:	mov	r4, r0
    440a:	mov	r6, r2
    if (write_get_length_) {
    440c:	ldrb.w	r3, [r7, #1060]	; 0x424
    4410:	cbz	r3, 4420 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    4412:	bl	414c <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    4416:	adds	r0, #1
      write_length_ *= 4;
    4418:	lsls	r0, r0, #2
    441a:	str.w	r0, [r7, #1064]	; 0x428
  }
    441e:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    4420:	subs	r5, r1, #1
      write32(GetNumObjects(storage, parent));
    4422:	bl	414c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    4426:	mov	r1, r0
    4428:	mov	r0, r4
    442a:	bl	42ac <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    442e:	ldr	r0, [r4, #0]
    4430:	mov	r2, r6
    4432:	mov	r1, r5
    4434:	ldr	r3, [r0, #0]
    4436:	ldr	r3, [r3, #28]
    4438:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    443a:	ldr	r0, [r4, #0]
    443c:	mov	r1, r5
    443e:	ldr	r3, [r0, #0]
    4440:	ldr	r3, [r3, #32]
    4442:	blx	r3
    4444:	mov	r1, r0
    4446:	cmp	r0, #0
    4448:	beq.n	441e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    444a:	mov	r0, r4
    444c:	bl	42ac <MTPD::write32(unsigned long)>
    4450:	b.n	443a <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
	...

00004454 <MTPD::GetObjectInfo(unsigned long)>:
  {
    4454:	push	{r4, r5, r6, r7, lr}
    4456:	mov	r4, r0
    4458:	sub	sp, #284	; 0x11c
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    445a:	ldr	r0, [r0, #0]
    445c:	add.w	r6, sp, #14
    4460:	add	r5, sp, #20
    4462:	ldr	r3, [r0, #0]
    4464:	add	r2, sp, #24
    4466:	str	r6, [sp, #4]
    4468:	str	r5, [sp, #0]
    446a:	ldr	r7, [r3, #36]	; 0x24
    446c:	add	r3, sp, #16
    446e:	blx	r7
    uint32_t storage = Store2Storage(store);
    4470:	ldrh.w	r1, [sp, #14]
    write32(storage); // storage
    4474:	mov	r0, r4
    4476:	adds	r1, #1
    4478:	bl	42ac <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    447c:	ldr	r3, [sp, #16]
    447e:	movw	r1, #12289	; 0x3001
    4482:	mov	r0, r4
    4484:	adds	r3, #1
    4486:	it	ne
    4488:	movne	r1, #0
    448a:	bl	4202 <MTPD::write16(unsigned short)>
    write16(0);  // protection
    448e:	mov	r0, r4
    4490:	movs	r1, #0
    4492:	bl	4202 <MTPD::write16(unsigned short)>
    write32(size); // size
    4496:	ldr	r1, [sp, #16]
    4498:	mov	r0, r4
    449a:	bl	42ac <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    449e:	mov	r0, r4
    44a0:	movs	r1, #0
    44a2:	bl	4202 <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    44a6:	mov	r0, r4
    44a8:	movs	r1, #0
    44aa:	bl	42ac <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    44ae:	mov	r0, r4
    44b0:	movs	r1, #0
    44b2:	bl	42ac <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    44b6:	mov	r0, r4
    44b8:	movs	r1, #0
    44ba:	bl	42ac <MTPD::write32(unsigned long)>
    write32(0); // pix width
    44be:	mov	r0, r4
    44c0:	movs	r1, #0
    44c2:	bl	42ac <MTPD::write32(unsigned long)>
    write32(0); // pix height
    44c6:	mov	r0, r4
    44c8:	movs	r1, #0
    44ca:	bl	42ac <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    44ce:	mov	r0, r4
    44d0:	movs	r1, #0
    44d2:	bl	42ac <MTPD::write32(unsigned long)>
    write32(parent); // parent
    44d6:	ldr	r1, [sp, #20]
    44d8:	mov	r0, r4
    44da:	bl	42ac <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    44de:	ldr	r1, [sp, #16]
    44e0:	mov	r0, r4
    44e2:	adds	r3, r1, #1
    44e4:	negs	r1, r3
    44e6:	adcs	r1, r3
    44e8:	bl	4202 <MTPD::write16(unsigned short)>
    write32(0); // association description
    44ec:	mov	r0, r4
    44ee:	movs	r1, #0
    44f0:	bl	42ac <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    44f4:	mov	r0, r4
    44f6:	movs	r1, #0
    44f8:	bl	42ac <MTPD::write32(unsigned long)>
    writestring(filename);
    44fc:	add	r1, sp, #24
    44fe:	mov	r0, r4
    4500:	bl	4218 <MTPD::writestring(char const*)>
    writestring("");  // date created
    4504:	mov	r0, r4
    4506:	ldr	r1, [pc, #24]	; (4520 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    4508:	bl	4218 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    450c:	mov	r0, r4
    450e:	ldr	r1, [pc, #16]	; (4520 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    4510:	bl	4218 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    4514:	ldr	r1, [pc, #8]	; (4520 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    4516:	mov	r0, r4
    4518:	bl	4218 <MTPD::writestring(char const*)>
  }
    451c:	add	sp, #284	; 0x11c
    451e:	pop	{r4, r5, r6, r7, pc}
    4520:	.word	0x20007c24

00004524 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    4524:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    4526:	ldr	r6, [pc, #36]	; (454c <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4528:	movs	r4, #0
    452a:	ldr	r7, [pc, #36]	; (4550 <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    452c:	mov	r5, r0
      write32(propertyListNum);
    452e:	ldr	r1, [r6, #0]
    4530:	bl	42ac <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4534:	ldr	r3, [r6, #0]
    4536:	cmp	r3, r4
    4538:	bhi.n	453c <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    453a:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    453c:	ldrh.w	r1, [r7], #2
    4540:	mov	r0, r5
    4542:	adds	r4, #1
    4544:	bl	4202 <MTPD::write16(unsigned short)>
    4548:	b.n	4534 <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    454a:	nop
    454c:	.word	0x200093d4
    4550:	.word	0x200079e8

00004554 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    4554:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4558:	mov	r4, r0
    455a:	sub	sp, #284	; 0x11c
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    455c:	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    455e:	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    4560:	add.w	r8, sp, #14
    4564:	add	r6, sp, #20
    4566:	ldr	r3, [r0, #0]
    4568:	add	r2, sp, #24
    456a:	str.w	r8, [sp, #4]
    { char name[MAX_FILENAME_LEN];
    456e:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    4570:	str	r6, [sp, #0]
    4572:	ldr.w	r9, [r3, #36]	; 0x24
    4576:	add	r3, sp, #16
    4578:	blx	r9
      switch(p2)
    457a:	movw	r2, #56331	; 0xdc0b
      uint32_t storage = Store2Storage(store);
    457e:	ldrh.w	r3, [sp, #14]
      switch(p2)
    4582:	cmp	r5, r2
      dir = size == 0xFFFFFFFFUL;
    4584:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
    4586:	add.w	r8, r3, #1
      switch(p2)
    458a:	bhi.n	45ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x58>
    458c:	cmp.w	r5, #56320	; 0xdc00
    4590:	bls.n	45bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    4592:	sub.w	r5, r5, #56320	; 0xdc00
    4596:	subs	r5, #1
    4598:	cmp	r5, #10
    459a:	bhi.n	45bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    459c:	tbb	[pc, r5]
    45a0:	.word	0x37201611
    45a4:	.word	0x27220e0e
    45a8:	.short	0x0e27
    45aa:	.byte	0x29
    45ab:	.byte	0x00
    45ac:	movw	r3, #56385	; 0xdc41
    45b0:	cmp	r5, r3
    45b2:	beq.n	45fc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa8>
    45b4:	movw	r3, #56388	; 0xdc44
    45b8:	cmp	r5, r3
    45ba:	beq.n	45e4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90>
    }
    45bc:	add	sp, #284	; 0x11c
    45be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(storage);
    45c2:	mov	r1, r8
          write32(0);
    45c4:	mov	r0, r4
    45c6:	bl	42ac <MTPD::write32(unsigned long)>
    }
    45ca:	b.n	45bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          write16(dir?0x3001:0x3000);
    45cc:	adds	r1, #1
    45ce:	movw	r1, #12289	; 0x3001
    45d2:	it	ne
    45d4:	movne.w	r1, #12288	; 0x3000
          write16(0);
    45d8:	mov	r0, r4
    45da:	bl	4202 <MTPD::write16(unsigned short)>
          break;
    45de:	b.n	45bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          write16(0);
    45e0:	movs	r1, #0
    45e2:	b.n	45d8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
          writestring(name);
    45e4:	add	r1, sp, #24
          writestring("");
    45e6:	mov	r0, r4
    45e8:	bl	4218 <MTPD::writestring(char const*)>
          break;
    45ec:	b.n	45bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          writestring("");
    45ee:	ldr	r1, [pc, #40]	; (4618 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc4>)
    45f0:	b.n	45e6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x92>
          write32((store==parent)? 0: parent);
    45f2:	ldr	r1, [r6, #0]
    45f4:	cmp	r3, r1
    45f6:	it	eq
    45f8:	moveq	r1, #0
    45fa:	b.n	45c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70>
          write32(p1);
    45fc:	mov	r1, r7
    45fe:	mov	r0, r4
    4600:	bl	42ac <MTPD::write32(unsigned long)>
          write32(parent);
    4604:	ldr	r1, [r6, #0]
    4606:	mov	r0, r4
    4608:	bl	42ac <MTPD::write32(unsigned long)>
          write32(storage);
    460c:	mov	r1, r8
    460e:	mov	r0, r4
    4610:	bl	42ac <MTPD::write32(unsigned long)>
          write32(0);
    4614:	movs	r1, #0
    4616:	b.n	45c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70>
    4618:	.word	0x20007c24

0000461c <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    461c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4620:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4622:	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    4624:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    4626:	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4628:	ldr	r3, [r0, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    462a:	mov.w	fp, #0
    462e:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    4630:	ldr	r6, [pc, #228]	; (4718 <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    4632:	ldr	r3, [r3, #20]
    4634:	blx	r3
    4636:	cmp	r0, #0
    4638:	mov	r0, r4
    463a:	ite	ne
    463c:	movne	r1, #1
    463e:	moveq	r1, #4
    4640:	bl	4202 <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    4644:	ldr	r0, [r4, #0]
    4646:	mov	r1, r7
    4648:	ldr	r3, [r0, #0]
    464a:	ldr	r3, [r3, #24]
    464c:	blx	r3
    464e:	adds	r0, #1
    4650:	uxth	r1, r0
    4652:	mov	r0, r4
    4654:	bl	4202 <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    4658:	mov	r0, r4
    465a:	movs	r1, #0
    465c:	bl	4202 <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    4660:	ldr	r0, [r4, #0]
    4662:	mov	r1, r7
    4664:	ldr	r3, [r0, #0]
    4666:	ldr	r3, [r3, #12]
    4668:	blx	r3
    466a:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    466c:	ldr	r0, [r4, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    466e:	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    4670:	mov	r1, r7
    4672:	ldr	r3, [r0, #0]
    4674:	ldr	r3, [r3, #16]
    4676:	blx	r3
    4678:	ldr	r3, [r6, #0]
    467a:	mov	r9, r0
    467c:	mov	sl, r1
    467e:	ldr	r3, [r3, #4]
    4680:	movs	r2, #5
    4682:	ldr	r1, [pc, #152]	; (471c <MTPD::GetStorageInfo(unsigned long)+0x100>)
    4684:	mov	r0, r6
    4686:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    4688:	movs	r3, #10
    468a:	mov	r2, r5
    468c:	mov	r0, r6
    468e:	strd	r3, fp, [sp]
    4692:	mov	r3, r8
    4694:	bl	ca9e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    4698:	mov	r0, r6
    469a:	bl	ca38 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    469e:	ldr	r3, [r6, #0]
    46a0:	ldr	r1, [pc, #124]	; (4720 <MTPD::GetStorageInfo(unsigned long)+0x104>)
    46a2:	movs	r2, #5
    46a4:	ldr	r3, [r3, #4]
    46a6:	mov	r0, r6
    46a8:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    46aa:	movs	r3, #10
    46ac:	mov	r2, r9
    46ae:	mov	r0, r6
    46b0:	str	r3, [sp, #0]
    46b2:	mov	r3, sl
    46b4:	str.w	fp, [sp, #4]
    46b8:	bl	ca9e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    46bc:	mov	r0, r6
    46be:	bl	ca38 <Print::println()>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    46c2:	movs	r2, #8
    46c4:	mov	r0, r4
    46c6:	add.w	r1, sp, r2
    46ca:	strd	r5, r8, [sp, #8]
    46ce:	bl	41cc <MTPD::write(char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    46d2:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    46d6:	mov.w	r2, #8
    46da:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    46dc:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    46e0:	add.w	r1, sp, r2
    46e4:	strd	r5, r3, [sp, #8]
    46e8:	bl	41cc <MTPD::write(char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    46ec:	mov	r0, r4
    46ee:	mov.w	r1, #4294967295
    46f2:	bl	42ac <MTPD::write32(unsigned long)>
    const char *name = storage_->get_FSName(store);
    46f6:	ldr	r0, [r4, #0]
    46f8:	mov	r1, r7
    46fa:	ldr	r3, [r0, #0]
    46fc:	ldr	r3, [r3, #8]
    46fe:	blx	r3
    4700:	mov	r1, r0
    writestring(name);  // storage descriptor
    4702:	mov	r0, r4
    4704:	bl	4218 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    4708:	ldr	r1, [pc, #24]	; (4724 <MTPD::GetStorageInfo(unsigned long)+0x108>)
    470a:	mov	r0, r4
  }
    470c:	add	sp, #20
    470e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    4712:	b.w	4218 <MTPD::writestring(char const*)>
    4716:	nop
    4718:	.word	0x20008a64
    471c:	.word	0x20007f89
    4720:	.word	0x20007f8f
    4724:	.word	0x20007c24

00004728 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    4728:	movw	r2, #56331	; 0xdc0b
    472c:	cmp	r1, r2
    {
    472e:	push	{r0, r1, r4, r6, r7, lr}
    4730:	mov	r4, r0
      switch(p1)
    4732:	bhi.n	4754 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    4734:	cmp.w	r1, #56320	; 0xdc00
    4738:	bls.n	4764 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    473a:	sub.w	r3, r1, #56320	; 0xdc00
    473e:	subs	r3, #1
    4740:	cmp	r3, #10
    4742:	bhi.n	4764 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    4744:	tbb	[pc, r3]
    4748:	.word	0x413e2210
    474c:	.word	0x69570e0e
    4750:	.short	0x0e75
    4752:	.byte	0x78
    4753:	.byte	0x00
    4754:	movw	r2, #56385	; 0xdc41
    4758:	cmp	r1, r2
    475a:	beq.n	483e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    475c:	movw	r2, #56388	; 0xdc44
    4760:	cmp	r1, r2
    4762:	beq.n	4820 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    4764:	add	sp, #8
    4766:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    4768:	movw	r1, #56321	; 0xdc01
          write16(0xDC0B);
    476c:	mov	r0, r4
    476e:	bl	4202 <MTPD::write16(unsigned short)>
          write16(6);
    4772:	mov	r0, r4
    4774:	movs	r1, #6
    4776:	bl	4202 <MTPD::write16(unsigned short)>
          write8(0); //get
    477a:	mov	r0, r4
    477c:	movs	r1, #0
    477e:	bl	41ec <MTPD::write8(unsigned char)>
          write32(0);
    4782:	movs	r1, #0
    4784:	mov	r0, r4
    4786:	bl	42ac <MTPD::write32(unsigned long)>
          write32(0);
    478a:	b.n	47ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    478c:	movw	r1, #56322	; 0xdc02
          write16(0xDC03);
    4790:	mov	r0, r4
    4792:	bl	4202 <MTPD::write16(unsigned short)>
          write16(0x004);
    4796:	movs	r1, #4
    4798:	mov	r0, r4
    479a:	bl	4202 <MTPD::write16(unsigned short)>
          write8(0); //get
    479e:	movs	r1, #0
    47a0:	mov	r0, r4
    47a2:	bl	41ec <MTPD::write8(unsigned char)>
          write16(0);
    47a6:	movs	r1, #0
    47a8:	mov	r0, r4
    47aa:	bl	4202 <MTPD::write16(unsigned short)>
          write32(0);
    47ae:	mov	r0, r4
    47b0:	movs	r1, #0
    47b2:	bl	42ac <MTPD::write32(unsigned long)>
          write8(0);
    47b6:	movs	r1, #0
    47b8:	mov	r0, r4
    }
    47ba:	add	sp, #8
    47bc:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    47c0:	b.w	41ec <MTPD::write8(unsigned char)>
          write16(0xDC03);
    47c4:	movw	r1, #56323	; 0xdc03
    47c8:	b.n	4790 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    47ca:	movw	r1, #56324	; 0xdc04
    47ce:	bl	4202 <MTPD::write16(unsigned short)>
          write16(0x008);
    47d2:	movs	r1, #8
    47d4:	mov	r0, r4
    47d6:	bl	4202 <MTPD::write16(unsigned short)>
          write8(0); //get
    47da:	movs	r1, #0
    47dc:	mov	r0, r4
    47de:	bl	41ec <MTPD::write8(unsigned char)>
          write64(0);
    47e2:	movs	r2, #0
    47e4:	movs	r3, #0
    47e6:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    47ea:	movs	r2, #8
    47ec:	mov	r1, sp
    47ee:	mov	r0, r4
    47f0:	bl	41cc <MTPD::write(char const*, int)>
          write32(0);
    47f4:	b.n	47ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    47f6:	movw	r1, #56327	; 0xdc07
    47fa:	bl	4202 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    47fe:	movw	r1, #65535	; 0xffff
    4802:	mov	r0, r4
    4804:	bl	4202 <MTPD::write16(unsigned short)>
          write8(1); //get/set
    4808:	movs	r1, #1
          write8(0); //get
    480a:	mov	r0, r4
    480c:	bl	41ec <MTPD::write8(unsigned char)>
          write8(0);
    4810:	movs	r1, #0
    4812:	mov	r0, r4
    4814:	bl	41ec <MTPD::write8(unsigned char)>
    4818:	b.n	47ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    481a:	movw	r1, #56328	; 0xdc08
          write16(0xDC09);
    481e:	mov	r0, r4
          write16(0xDC44);
    4820:	bl	4202 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    4824:	movw	r1, #65535	; 0xffff
    4828:	mov	r0, r4
    482a:	bl	4202 <MTPD::write16(unsigned short)>
          write8(0); //get
    482e:	movs	r1, #0
    4830:	b.n	480a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    4832:	movw	r1, #56329	; 0xdc09
    4836:	b.n	481e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    4838:	movw	r1, #56331	; 0xdc0b
    483c:	b.n	476c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    483e:	bl	4202 <MTPD::write16(unsigned short)>
          write16(0x0A);
    4842:	movs	r1, #10
    4844:	mov	r0, r4
    4846:	movs	r6, #0
    4848:	bl	4202 <MTPD::write16(unsigned short)>
          write8(0); //get
    484c:	movs	r7, #0
    484e:	movs	r1, #0
    4850:	mov	r0, r4
    4852:	bl	41ec <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    4856:	movs	r2, #8
    4858:	mov	r1, sp
    485a:	mov	r0, r4
    485c:	strd	r6, r7, [sp]
    4860:	bl	41cc <MTPD::write(char const*, int)>
          write64(0);
    4864:	strd	r6, r7, [sp]
    4868:	b.n	47ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

0000486a <MTPD::GetObject(unsigned long)>:

    void MTPD::GetObject(uint32_t object_id) 
    {
    486a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    486e:	mov	r6, r0
      uint32_t size = storage_->GetSize(object_id);
    4870:	ldr	r0, [r0, #0]
    4872:	ldr	r3, [r0, #0]

      if (write_get_length_) {
    4874:	add.w	r5, r6, #8192	; 0x2000
    {
    4878:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    487c:	ldr	r3, [r3, #40]	; 0x28
    {
    487e:	sub	sp, #20
    4880:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    4884:	blx	r3
      if (write_get_length_) {
    4886:	ldrb.w	r4, [r5, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    488a:	mov	r8, r0
      if (write_get_length_) {
    488c:	cbz	r4, 48a2 <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    488e:	ldr.w	r3, [r5, #1064]	; 0x428
    4892:	add	r3, r0
    4894:	str.w	r3, [r5, #1064]	; 0x428
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    4898:	add	sp, #20
    489a:	vpop	{d8}
    489e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    48a2:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    48a6:	movs	r7, #12
    48a8:	add.w	fp, r6, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    48ac:	add.w	sl, r6, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    48b0:	str.w	r3, [r5, #1056]	; 0x420
        uint32_t pos = 0; // into data
    48b4:	str	r4, [sp, #12]
        while(pos<size)
    48b6:	ldr	r3, [sp, #12]
    48b8:	cmp	r3, r8
    48ba:	bcc.n	48d6 <MTPD::GetObject(unsigned long)+0x6c>
        if(len>0)
    48bc:	cmp	r7, #0
    48be:	beq.n	4898 <MTPD::GetObject(unsigned long)+0x2e>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    48c0:	mov.w	r1, #512	; 0x200
    48c4:	add.w	r0, r6, #544	; 0x220
    }
    48c8:	add	sp, #20
    48ca:	vpop	{d8}
    48ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    48d2:	b.w	40be <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
          if(disk_pos==DISK_BUFFER_SIZE)
    48d6:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    48da:	ldr	r2, [sp, #12]
          if(disk_pos==DISK_BUFFER_SIZE)
    48dc:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    48e0:	sub.w	r9, r8, r2
          if(disk_pos==DISK_BUFFER_SIZE)
    48e4:	bne.n	4908 <MTPD::GetObject(unsigned long)+0x9e>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    48e6:	ldr	r0, [r6, #0]
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    48e8:	cmp.w	r9, #8192	; 0x2000
    48ec:	it	cc
    48ee:	movcc	r3, r9
    48f0:	vmov	r1, s16
    48f4:	ldr	r2, [r0, #0]
    48f6:	str	r3, [sp, #0]
    48f8:	ldr	r3, [r2, #48]	; 0x30
    48fa:	ldr	r2, [sp, #12]
    48fc:	mov	r4, r3
    48fe:	mov	r3, fp
    4900:	blx	r4
            disk_pos=0;
    4902:	movs	r3, #0
    4904:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    4908:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    490c:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4910:	add.w	r0, sl, r7
    4914:	cmp	r9, r3
    4916:	it	cs
    4918:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    491a:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    491e:	add	r1, fp
    4920:	cmp	r9, r3
    4922:	it	cs
    4924:	movcs	r9, r3
    4926:	mov	r2, r9
          len += to_copy;
    4928:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    492a:	bl	a56c <memcpy>
          disk_pos += to_copy;
    492e:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    4932:	cmp.w	r7, #512	; 0x200
          disk_pos += to_copy;
    4936:	add	r3, r9
    4938:	str.w	r3, [r5, #1056]	; 0x420
          pos += to_copy;
    493c:	ldr	r3, [sp, #12]
    493e:	add	r3, r9
    4940:	str	r3, [sp, #12]
          if(len==MTP_TX_SIZE)
    4942:	bne.n	48b6 <MTPD::GetObject(unsigned long)+0x4c>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4944:	mov	r1, r7
    4946:	mov	r0, sl
            len=0;
    4948:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    494a:	bl	40be <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    494e:	b.n	48b6 <MTPD::GetObject(unsigned long)+0x4c>

00004950 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    4950:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4954:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    4956:	ldr	r0, [r0, #0]
    {
    4958:	mov	r4, r3
    495a:	mov	r6, r2
      uint32_t size = storage_->GetSize(object_id);
    495c:	ldr	r3, [r0, #0]

      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
    495e:	add.w	r5, r8, #8192	; 0x2000
    {
    4962:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    4966:	ldr	r3, [r3, #40]	; 0x28
    {
    4968:	sub	sp, #20
    496a:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    496e:	blx	r3
      size -= offset;
    4970:	subs	r0, r0, r6
      if(NumBytes == 0xffffffff) NumBytes=size;
    4972:	cmp.w	r4, #4294967295
    4976:	it	eq
    4978:	moveq	r4, r0
      if (NumBytes<size) size=NumBytes;
    497a:	cmp	r4, r0
    497c:	mov	r3, r4
    497e:	it	cs
    4980:	movcs	r3, r0
    4982:	str	r3, [sp, #8]
      if (write_get_length_) {
    4984:	ldrb.w	r3, [r5, #1060]	; 0x424
    4988:	str	r3, [sp, #12]
    498a:	cbz	r3, 49a4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x54>
        write_length_ += size;
    498c:	ldr.w	r3, [r5, #1064]	; 0x428
    4990:	ldr	r2, [sp, #8]
    4992:	add	r3, r2
    4994:	str.w	r3, [r5, #1064]	; 0x428
            len=0;
          }
        }
      }
      return size;
    }
    4998:	ldr	r0, [sp, #8]
    499a:	add	sp, #20
    499c:	vpop	{d8}
    49a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    49a4:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    49a8:	movs	r7, #12
    49aa:	add.w	fp, r8, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    49ae:	add.w	sl, r8, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    49b2:	str.w	r3, [r5, #1056]	; 0x420
        while(pos<size)
    49b6:	ldr	r3, [sp, #8]
    49b8:	cmp	r3, r6
    49ba:	bls.n	4998 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x48>
          if(disk_pos==DISK_BUFFER_SIZE)
    49bc:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    49c0:	ldr	r2, [sp, #8]
          if(disk_pos==DISK_BUFFER_SIZE)
    49c2:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    49c6:	sub.w	r9, r2, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    49ca:	bne.n	49f0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa0>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    49cc:	ldr.w	r0, [r8]
    49d0:	cmp.w	r9, #8192	; 0x2000
    49d4:	it	cc
    49d6:	movcc	r3, r9
    49d8:	vmov	r1, s16
    49dc:	ldr	r2, [r0, #0]
    49de:	str	r3, [sp, #0]
    49e0:	ldr	r3, [r2, #48]	; 0x30
    49e2:	mov	r2, r6
    49e4:	mov	r4, r3
    49e6:	mov	r3, fp
    49e8:	blx	r4
            disk_pos=0;
    49ea:	ldr	r3, [sp, #12]
    49ec:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    49f0:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    49f4:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    49f8:	add.w	r0, sl, r7
    49fc:	cmp	r9, r3
    49fe:	it	cs
    4a00:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4a02:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4a06:	add	r1, fp
    4a08:	cmp	r9, r3
    4a0a:	it	cs
    4a0c:	movcs	r9, r3
    4a0e:	mov	r2, r9
          len += to_copy;
    4a10:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4a12:	bl	a56c <memcpy>
          disk_pos += to_copy;
    4a16:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    4a1a:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    4a1e:	add	r6, r9
          disk_pos += to_copy;
    4a20:	add	r3, r9
    4a22:	str.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    4a26:	bne.n	49b6 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4a28:	mov	r1, r7
    4a2a:	mov	r0, sl
            len=0;
    4a2c:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4a2e:	bl	40be <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4a32:	b.n	49b6 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>

00004a34 <MTPD::read(char*, unsigned long)>:
      printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    4a34:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a38:	mov	r8, r0
    4a3a:	mov	r5, r1
      static int index=0;
      if(!size) 
    4a3c:	mov	r4, r2
    4a3e:	ldr.w	fp, [pc, #84]	; 4a94 <MTPD::read(char*, unsigned long)+0x60>
    4a42:	cbz	r2, 4a8a <MTPD::read(char*, unsigned long)+0x56>

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    4a44:	add.w	r9, r0, #32
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
          index=0;
    4a48:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    4a4c:	ldr.w	r6, [fp]
    4a50:	rsb	r7, r6, #512	; 0x200
    4a54:	cmp	r7, r4
    4a56:	it	cs
    4a58:	movcs	r7, r4
        if (data) {
    4a5a:	cbz	r5, 4a6a <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    4a5c:	mov	r0, r5
          data += to_copy;
    4a5e:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    4a60:	mov	r2, r7
    4a62:	add.w	r1, r9, r6
    4a66:	bl	a56c <memcpy>
        index += to_copy;
    4a6a:	add	r6, r7
        size -= to_copy;
    4a6c:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    4a6e:	cmp.w	r6, #512	; 0x200
        index += to_copy;
    4a72:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    4a76:	bne.n	4a84 <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    4a78:	mov	r1, r9
    4a7a:	mov	r0, r8
    4a7c:	bl	41b4 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4a80:	str.w	sl, [fp]
      while (size) {
    4a84:	cmp	r4, #0
    4a86:	bne.n	4a4c <MTPD::read(char*, unsigned long)+0x18>
    4a88:	b.n	4a8e <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    4a8a:	str.w	r2, [fp]
        }
      }
    }
    4a8e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a92:	nop
    4a94:	.word	0x2000fc4c

00004a98 <MTPD::ReadMTPHeader()>:
  {
    4a98:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    4a9a:	movs	r2, #12
    4a9c:	add	r1, sp, #4
    4a9e:	bl	4a34 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    4aa2:	ldrh.w	r3, [sp, #8]
    4aa6:	cmp	r3, #2
      return header.len - 12;
    4aa8:	itet	eq
    4aaa:	ldreq	r0, [sp, #4]
      return 0;
    4aac:	movne	r0, #0
      return header.len - 12;
    4aae:	subeq	r0, #12
  }
    4ab0:	add	sp, #20
    4ab2:	ldr.w	pc, [sp], #4

00004ab6 <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    4ab6:	push	{r0, r1, r2, lr}
    4ab8:	movs	r2, #1
    4aba:	add.w	r1, sp, #7
    4abe:	bl	4a34 <MTPD::read(char*, unsigned long)>
    4ac2:	ldrb.w	r0, [sp, #7]
    4ac6:	add	sp, #12
    4ac8:	ldr.w	pc, [sp], #4

00004acc <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4acc:	push	{r0, r1, r2, lr}
    4ace:	movs	r2, #2
    4ad0:	add.w	r1, sp, #6
    4ad4:	bl	4a34 <MTPD::read(char*, unsigned long)>
    4ad8:	ldrh.w	r0, [sp, #6]
    4adc:	add	sp, #12
    4ade:	ldr.w	pc, [sp], #4

00004ae2 <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4ae2:	push	{r0, r1, r2, lr}
    4ae4:	movs	r2, #4
    4ae6:	add.w	r1, sp, r2
    4aea:	bl	4a34 <MTPD::read(char*, unsigned long)>
    4aee:	ldr	r0, [sp, #4]
    4af0:	add	sp, #12
    4af2:	ldr.w	pc, [sp], #4

00004af6 <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    4af6:	push	{r4, r5, r6, lr}
    4af8:	mov	r5, r1
    4afa:	mov	r6, r0
    int len = read8();
    4afc:	bl	4ab6 <MTPD::read8()>
    if (!buffer) {
    4b00:	cbz	r5, 4b0a <MTPD::readstring(char*)+0x14>
    4b02:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    4b04:	cmp	r5, r4
    4b06:	bne.n	4b1a <MTPD::readstring(char*)+0x24>
  }
    4b08:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    4b0a:	sxth	r2, r0
    4b0c:	mov	r1, r5
    4b0e:	mov	r0, r6
    4b10:	lsls	r2, r2, #1
  }
    4b12:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    4b16:	b.w	4a34 <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    4b1a:	mov	r0, r6
    4b1c:	bl	4acc <MTPD::read16()>
    4b20:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    4b24:	b.n	4b04 <MTPD::readstring(char*)+0xe>

00004b26 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    4b26:	push	{r4, r5, lr}
    4b28:	mov	r4, r0
    4b2a:	sub	sp, #260	; 0x104
    4b2c:	mov	r5, r1
      //printContainer(); 
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
    4b2e:	bl	4a98 <MTPD::ReadMTPHeader()>
        readstring(filename);
    4b32:	mov	r1, sp
    4b34:	mov	r0, r4
    4b36:	bl	4af6 <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    4b3a:	ldr	r0, [r4, #0]
    4b3c:	mov	r2, sp
    4b3e:	mov	r1, r5
    4b40:	ldr	r3, [r0, #0]
    4b42:	ldr	r3, [r3, #72]	; 0x48
    4b44:	blx	r3
      }
      else
        return 0x2005;
    }
    4b46:	movw	r2, #8193	; 0x2001
    4b4a:	movw	r3, #8197	; 0x2005
    4b4e:	cmp	r0, #0
    4b50:	ite	ne
    4b52:	movne	r0, r2
    4b54:	moveq	r0, r3
    4b56:	add	sp, #260	; 0x104
    4b58:	pop	{r4, r5, pc}
	...

00004b5c <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4b5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b60:	mov	r4, r0
    4b62:	sub	sp, #268	; 0x10c
    4b64:	mov	r6, r1
      pull_packet(rx_data_buffer);
    4b66:	add.w	r1, r0, #32
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4b6a:	mov	r7, r2
      pull_packet(rx_data_buffer);
    4b6c:	bl	41b4 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4b70:	movs	r2, #0
    4b72:	ldr	r3, [pc, #196]	; (4c38 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xdc>)
      int len=ReadMTPHeader();
    4b74:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4b76:	add.w	r9, sp, #8
        index=0;
    4b7a:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    4b7c:	bl	4a98 <MTPD::ReadMTPHeader()>
    4b80:	mov	r5, r0
      read32(); len -=4; // storage
    4b82:	mov	r0, r4
    4b84:	bl	4ae2 <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    4b88:	mov	r0, r4
    4b8a:	bl	4acc <MTPD::read16()>
    4b8e:	movw	r3, #12289	; 0x3001
      read32(); len -=4; // sequence number
    4b92:	subs	r5, #52	; 0x34
      uint32_t store = Storage2Store(storage);
    4b94:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    4b96:	subs	r3, r0, r3
      read16(); len -=2; // protection
    4b98:	mov	r0, r4
      bool dir = (read16() == 0x3001); len -=2; // format
    4b9a:	rsbs	r8, r3, #0
    4b9e:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    4ba2:	bl	4acc <MTPD::read16()>
      read32(); len -=4; // size
    4ba6:	mov	r0, r4
    4ba8:	bl	4ae2 <MTPD::read32()>
      read16(); len -=2; // thumb format
    4bac:	mov	r0, r4
    4bae:	bl	4acc <MTPD::read16()>
      read32(); len -=4; // thumb size
    4bb2:	mov	r0, r4
    4bb4:	bl	4ae2 <MTPD::read32()>
      read32(); len -=4; // thumb width
    4bb8:	mov	r0, r4
    4bba:	bl	4ae2 <MTPD::read32()>
      read32(); len -=4; // thumb height
    4bbe:	mov	r0, r4
    4bc0:	bl	4ae2 <MTPD::read32()>
      read32(); len -=4; // pix width
    4bc4:	mov	r0, r4
    4bc6:	bl	4ae2 <MTPD::read32()>
      read32(); len -=4; // pix height
    4bca:	mov	r0, r4
    4bcc:	bl	4ae2 <MTPD::read32()>
      read32(); len -=4; // bit depth
    4bd0:	mov	r0, r4
    4bd2:	bl	4ae2 <MTPD::read32()>
      read32(); len -=4; // parent
    4bd6:	mov	r0, r4
    4bd8:	bl	4ae2 <MTPD::read32()>
      read16(); len -=2; // association type
    4bdc:	mov	r0, r4
    4bde:	bl	4acc <MTPD::read16()>
      read32(); len -=4; // association description
    4be2:	mov	r0, r4
    4be4:	bl	4ae2 <MTPD::read32()>
      read32(); len -=4; // sequence number
    4be8:	mov	r0, r4
    4bea:	bl	4ae2 <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4bee:	mov	r1, r9
    4bf0:	mov	r0, r4
    4bf2:	bl	4af6 <MTPD::readstring(char*)>
    4bf6:	mov	r0, r9
    4bf8:	bl	f580 <strlen>
    4bfc:	adds	r0, #1
    4bfe:	sub.w	r5, r5, r0, lsl #1
    4c02:	subs	r5, #1
      while(len>=4) { read32(); len-=4;}
    4c04:	cmp	r5, #3
    4c06:	bgt.n	4c22 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xc6>
      while(len) {read8(); len--;}
    4c08:	cbnz	r5, 4c2c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd0>
      return storage_->Create(store, parent, dir, filename);
    4c0a:	ldr	r0, [r4, #0]
    4c0c:	mov	r2, r7
    4c0e:	mov	r1, r6
    4c10:	ldr	r3, [r0, #0]
    4c12:	str.w	r9, [sp]
    4c16:	ldr	r4, [r3, #44]	; 0x2c
    4c18:	mov	r3, r8
    4c1a:	blx	r4
    }
    4c1c:	add	sp, #268	; 0x10c
    4c1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      while(len>=4) { read32(); len-=4;}
    4c22:	mov	r0, r4
    4c24:	subs	r5, #4
    4c26:	bl	4ae2 <MTPD::read32()>
    4c2a:	b.n	4c04 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xa8>
      while(len) {read8(); len--;}
    4c2c:	mov	r0, r4
    4c2e:	subs	r5, #1
    4c30:	bl	4ab6 <MTPD::read8()>
    4c34:	b.n	4c08 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
    4c36:	nop
    4c38:	.word	0x2000fc4c

00004c3c <MTPD::SendObject()>:
    { 
    4c3c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    4c40:	add.w	r9, r0, #32
    { 
    4c44:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    4c46:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    4c4a:	mov	r1, r9
      disk_pos=0;
    4c4c:	add.w	r6, r4, #8192	; 0x2000
      pull_packet(rx_data_buffer);
    4c50:	bl	41b4 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4c54:	ldr	r3, [pc, #212]	; (4d2c <MTPD::SendObject()+0xf0>)
    4c56:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    4c58:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4c5a:	add.w	fp, r4, #1056	; 0x420
        index=0;
    4c5e:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4c60:	bl	4a98 <MTPD::ReadMTPHeader()>
      disk_pos=0;
    4c64:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    4c66:	mov	r7, r0
      disk_pos=0;
    4c68:	str.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    4c6c:	cmp	r7, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4c6e:	ldr.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    4c72:	bgt.n	4c88 <MTPD::SendObject()+0x4c>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    4c74:	ldr	r0, [r4, #0]
    4c76:	ldr	r2, [r0, #0]
      if(disk_pos)
    4c78:	cmp	r3, #0
    4c7a:	bne.n	4d16 <MTPD::SendObject()+0xda>
      storage_->close();
    4c7c:	ldr	r0, [r4, #0]
    4c7e:	ldr	r3, [r0, #0]
    4c80:	ldr	r3, [r3, #56]	; 0x38
    4c82:	blx	r3
      return true;
    4c84:	movs	r0, #1
    4c86:	b.n	4cd0 <MTPD::SendObject()+0x94>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    4c88:	rsb	r8, sl, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4c8c:	rsb	r5, r3, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4c90:	add.w	r0, fp, r3
    4c94:	add.w	r1, r9, sl
    4c98:	cmp	r8, r7
    4c9a:	it	cs
    4c9c:	movcs	r8, r7
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4c9e:	cmp	r5, r8
    4ca0:	it	cs
    4ca2:	movcs	r5, r8
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4ca4:	mov	r2, r5
    4ca6:	bl	a56c <memcpy>
        disk_pos += to_copy;
    4caa:	ldr.w	r2, [r6, #1056]	; 0x420
        len -= to_copy;
    4cae:	subs	r3, r7, r5
        disk_pos += to_copy;
    4cb0:	add	r2, r5
        len -= to_copy;
    4cb2:	str	r3, [sp, #4]
        if(disk_pos==DISK_BUFFER_SIZE)
    4cb4:	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    4cb8:	str.w	r2, [r6, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    4cbc:	bne.n	4d02 <MTPD::SendObject()+0xc6>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    4cbe:	ldr	r0, [r4, #0]
    4cc0:	mov	r1, fp
    4cc2:	ldr	r3, [r0, #0]
    4cc4:	ldr	r3, [r3, #52]	; 0x34
    4cc6:	blx	r3
    4cc8:	cmp.w	r0, #8192	; 0x2000
    4ccc:	bcs.n	4cd6 <MTPD::SendObject()+0x9a>
    4cce:	movs	r0, #0
    }
    4cd0:	add	sp, #12
    4cd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    4cd6:	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4cd8:	subs.w	r2, r8, r5
          disk_pos =0;
    4cdc:	str.w	r3, [r6, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4ce0:	beq.n	4d02 <MTPD::SendObject()+0xc6>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    4ce2:	add.w	r1, sl, r5
    4ce6:	mov	r0, fp
    4ce8:	str	r2, [sp, #4]
    4cea:	add	r1, r9
    4cec:	bl	a56c <memcpy>
            disk_pos += bytes;
    4cf0:	ldr.w	r3, [r6, #1056]	; 0x420
    4cf4:	ldr	r2, [sp, #4]
    4cf6:	add	r3, r2
    4cf8:	str.w	r3, [r6, #1056]	; 0x420
            len -= bytes;
    4cfc:	sub.w	r3, r7, r8
    4d00:	str	r3, [sp, #4]
        if(len>0)  // we have still data to be transfered
    4d02:	ldr	r3, [sp, #4]
    4d04:	cbz	r3, 4d12 <MTPD::SendObject()+0xd6>
          index=0;
    4d06:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    4d0a:	mov	r1, r9
    4d0c:	mov	r0, r4
    4d0e:	bl	41b4 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4d12:	ldr	r7, [sp, #4]
    4d14:	b.n	4c6c <MTPD::SendObject()+0x30>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    4d16:	ldr	r5, [r2, #52]	; 0x34
    4d18:	add.w	r1, r4, #1056	; 0x420
    4d1c:	mov	r2, r3
    4d1e:	blx	r5
    4d20:	ldr.w	r3, [r6, #1056]	; 0x420
    4d24:	cmp	r0, r3
    4d26:	bcs.n	4c7c <MTPD::SendObject()+0x40>
    4d28:	b.n	4cce <MTPD::SendObject()+0x92>
    4d2a:	nop
    4d2c:	.word	0x2000fc4c

00004d30 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    4d30:	push	{r4, r5, r6, lr}
    4d32:	mov	r5, r1
    4d34:	add.w	r1, r0, #32
    4d38:	mov	r6, r2
    4d3a:	mov	r4, r0
    4d3c:	bl	41b4 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4d40:	ldr	r3, [pc, #28]	; (4d60 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    4d42:	movs	r2, #0
    4d44:	str	r2, [r3, #0]
      if(p2==0xDC07)
    4d46:	movw	r3, #56327	; 0xdc07
    4d4a:	cmp	r6, r3
    4d4c:	bne.n	4d5a <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    4d4e:	mov	r1, r5
    4d50:	mov	r0, r4
    }
    4d52:	ldmia.w	sp!, {r4, r5, r6, lr}
    4d56:	b.w	4b26 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    4d5a:	movw	r0, #8197	; 0x2005
    4d5e:	pop	{r4, r5, r6, pc}
    4d60:	.word	0x2000fc4c

00004d64 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    4d64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d68:	sub	sp, #60	; 0x3c
    4d6a:	mov	r4, r0
    4d6c:	bl	c594 <usb_mtp_available>
    4d70:	cmp	r0, #0
    4d72:	beq.w	51cc <MTPD::loop()+0x468>
      if(fetch_packet(rx_data_buffer))
    4d76:	add.w	fp, r4, #32
      return usb_mtp_recv(data_buffer,60);
    4d7a:	movs	r1, #60	; 0x3c
    4d7c:	mov	r0, fp
    4d7e:	bl	c500 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    4d82:	cmp	r0, #0
    4d84:	beq.w	51cc <MTPD::loop()+0x468>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4d88:	ldr	r3, [r4, #40]	; 0x28
    4d8a:	ldr	r1, [pc, #756]	; (5080 <MTPD::loop()+0x31c>)
    4d8c:	str	r3, [sp, #4]
    4d8e:	ldrh	r3, [r4, #36]	; 0x24
    4d90:	ldr	r0, [pc, #752]	; (5084 <MTPD::loop()+0x320>)
    4d92:	str	r3, [sp, #0]
    4d94:	ldr	r3, [r4, #32]
    4d96:	ldrh	r2, [r4, #38]	; 0x26
    4d98:	bl	ca70 <Print::printf(char const*, ...)>
    4d9c:	ldr	r3, [r4, #32]
    4d9e:	cmp	r3, #12
    4da0:	bls.n	4dac <MTPD::loop()+0x48>
    4da2:	ldr	r2, [r4, #44]	; 0x2c
    4da4:	ldr	r1, [pc, #736]	; (5088 <MTPD::loop()+0x324>)
    4da6:	ldr	r0, [pc, #732]	; (5084 <MTPD::loop()+0x320>)
    4da8:	bl	ca70 <Print::printf(char const*, ...)>
    4dac:	ldr	r3, [r4, #32]
    4dae:	cmp	r3, #16
    4db0:	bls.n	4dbc <MTPD::loop()+0x58>
    4db2:	ldr	r2, [r4, #48]	; 0x30
    4db4:	ldr	r1, [pc, #720]	; (5088 <MTPD::loop()+0x324>)
    4db6:	ldr	r0, [pc, #716]	; (5084 <MTPD::loop()+0x320>)
    4db8:	bl	ca70 <Print::printf(char const*, ...)>
    4dbc:	ldr	r3, [r4, #32]
    4dbe:	cmp	r3, #20
    4dc0:	bls.n	4dcc <MTPD::loop()+0x68>
    4dc2:	ldr	r2, [r4, #52]	; 0x34
    4dc4:	ldr	r1, [pc, #704]	; (5088 <MTPD::loop()+0x324>)
    4dc6:	ldr	r0, [pc, #700]	; (5084 <MTPD::loop()+0x320>)
    4dc8:	bl	ca70 <Print::printf(char const*, ...)>
    4dcc:	ldr	r1, [pc, #700]	; (508c <MTPD::loop()+0x328>)
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    4dce:	add.w	r5, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4dd2:	ldr	r0, [pc, #688]	; (5084 <MTPD::loop()+0x320>)

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    4dd4:	movw	r7, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4dd8:	bl	ca70 <Print::printf(char const*, ...)>
        int p1 = CONTAINER->params[0];
    4ddc:	ldr	r3, [r4, #44]	; 0x2c
        int id = CONTAINER->transaction_id;
    4dde:	ldr	r1, [r4, #40]	; 0x28
        int typ= CONTAINER->type;
    4de0:	ldrh	r0, [r4, #36]	; 0x24
        int p1 = CONTAINER->params[0];
    4de2:	mov	r6, r3
        int op = CONTAINER->op;
    4de4:	ldrh	r2, [r4, #38]	; 0x26
        int len= CONTAINER->len;
    4de6:	ldr.w	r9, [r4, #32]
        int p1 = CONTAINER->params[0];
    4dea:	str	r3, [sp, #12]
        int id = CONTAINER->transaction_id;
    4dec:	str	r1, [sp, #16]
        int p3 = CONTAINER->params[2];
    4dee:	ldrd	r8, r3, [r4, #48]	; 0x30
        TID=id;
    4df2:	str.w	r1, [r5, #1068]	; 0x42c
        if(typ==2) return_code=0x2005; // we should only get cmds
    4df6:	movw	r1, #8197	; 0x2005
    4dfa:	cmp	r0, #2
    4dfc:	it	eq
    4dfe:	moveq	r7, r1

        switch (op)
    4e00:	movw	r0, #4123	; 0x101b
    4e04:	cmp	r2, r0
    4e06:	bhi.n	4e90 <MTPD::loop()+0x12c>
    4e08:	cmp.w	r2, #4096	; 0x1000
    4e0c:	bhi.n	4e14 <MTPD::loop()+0xb0>
    4e0e:	movw	r7, #8197	; 0x2005
    4e12:	b.n	4f0e <MTPD::loop()+0x1aa>
    4e14:	sub.w	r2, r2, #4096	; 0x1000
    4e18:	subs	r2, #1
    4e1a:	cmp	r2, #26
    4e1c:	bhi.n	4e0e <MTPD::loop()+0xaa>
    4e1e:	add	r1, pc, #4	; (adr r1, 4e24 <MTPD::loop()+0xc0>)
    4e20:	ldr.w	pc, [r1, r2, lsl #2]
    4e24:	.word	0x00004eb3
    4e28:	.word	0x00004f07
    4e2c:	.word	0x000051c7
    4e30:	.word	0x00004f3d
    4e34:	.word	0x00004f81
    4e38:	.word	0x00004fcb
    4e3c:	.word	0x00004fe1
    4e40:	.word	0x00005037
    4e44:	.word	0x00005091
    4e48:	.word	0x00004e0f
    4e4c:	.word	0x000050db
    4e50:	.word	0x000050f9
    4e54:	.word	0x0000510d
    4e58:	.word	0x00004e0f
    4e5c:	.word	0x00004e0f
    4e60:	.word	0x00004e0f
    4e64:	.word	0x00004e0f
    4e68:	.word	0x00004e0f
    4e6c:	.word	0x00004e0f
    4e70:	.word	0x00005123
    4e74:	.word	0x0000516d
    4e78:	.word	0x00004e0f
    4e7c:	.word	0x00004e0f
    4e80:	.word	0x00004e0f
    4e84:	.word	0x000051b7
    4e88:	.word	0x000051d3
    4e8c:	.word	0x000051fd
    4e90:	add.w	r3, r2, #26496	; 0x6780
    4e94:	adds	r3, #127	; 0x7f
    4e96:	uxth	r3, r3
    4e98:	cmp	r3, #3
    4e9a:	bhi.n	4e0e <MTPD::loop()+0xaa>
    4e9c:	sub.w	r2, r2, #38912	; 0x9800
    4ea0:	subs	r2, #2
    4ea2:	cmp	r2, #2
    4ea4:	bhi.w	5250 <MTPD::loop()+0x4ec>
    4ea8:	tbh	[pc, r2, lsl #1]
    4eac:	.word	0x021e01f7
    4eb0:	.short	0x0245
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    4eb2:	movs	r6, #0
    4eb4:	movs	r3, #1
    4eb6:	mov	r0, r4
    4eb8:	strb.w	r3, [r5, #1060]	; 0x424
    4ebc:	str.w	r6, [r5, #1064]	; 0x428
    4ec0:	bl	42c0 <MTPD::WriteDescriptor()>
    4ec4:	ldr.w	r3, [r5, #1064]	; 0x428
    4ec8:	mov	r0, r4
    4eca:	movs	r2, #12
    4ecc:	adds	r3, #12
    4ece:	add	r1, sp, #24
    4ed0:	str	r3, [sp, #24]
    4ed2:	movs	r3, #2
    4ed4:	strh.w	r3, [sp, #28]
    4ed8:	ldrh	r3, [r4, #38]	; 0x26
    4eda:	strh.w	r3, [sp, #30]
    4ede:	ldr	r3, [r4, #40]	; 0x28
    4ee0:	str.w	r6, [r5, #1064]	; 0x428
    4ee4:	strb.w	r6, [r5, #1060]	; 0x424
    4ee8:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4eea:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    4eee:	mov	r0, r4
    4ef0:	bl	42c0 <MTPD::WriteDescriptor()>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    4ef4:	ldr	r1, [sp, #24]
    4ef6:	ubfx	r1, r1, #0, #9
    4efa:	cbz	r1, 4f0e <MTPD::loop()+0x1aa>
    4efc:	add.w	r0, r4, #544	; 0x220
    4f00:	bl	40be <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    4f04:	b.n	4f0e <MTPD::loop()+0x1aa>
            openSession(p1);
    4f06:	mov	r1, r6
    4f08:	mov	r0, r4
    4f0a:	bl	41a4 <MTPD::openSession(unsigned long)>
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    4f0e:	movs	r3, #3
            CONTAINER->len=len;
    4f10:	str.w	r9, [r4, #32]
            CONTAINER->op=return_code;
    4f14:	strh	r7, [r4, #38]	; 0x26
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    4f16:	mov	r1, fp
            CONTAINER->type=3;
    4f18:	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4f1a:	mov	r2, r9
            CONTAINER->transaction_id=id;
    4f1c:	ldr	r3, [sp, #16]
    4f1e:	str	r3, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
    4f20:	ldr	r3, [sp, #12]
    4f22:	str	r3, [r4, #44]	; 0x2c
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4f24:	add.w	r4, r4, #544	; 0x220
    4f28:	mov	r0, r4
    4f2a:	bl	a56c <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4f2e:	mov	r1, r9
    4f30:	mov	r0, r4
        }
      }
    }
    4f32:	add	sp, #60	; 0x3c
    4f34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4f38:	b.w	40be <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    4f3c:	movs	r6, #0
    4f3e:	movs	r3, #1
    4f40:	mov	r0, r4
    4f42:	strb.w	r3, [r5, #1060]	; 0x424
    4f46:	str.w	r6, [r5, #1064]	; 0x428
    4f4a:	bl	43d8 <MTPD::WriteStorageIDs()>
    4f4e:	ldr.w	r3, [r5, #1064]	; 0x428
    4f52:	mov	r0, r4
    4f54:	movs	r2, #12
    4f56:	adds	r3, #12
    4f58:	add	r1, sp, #24
    4f5a:	str	r3, [sp, #24]
    4f5c:	movs	r3, #2
    4f5e:	strh.w	r3, [sp, #28]
    4f62:	ldrh	r3, [r4, #38]	; 0x26
    4f64:	strh.w	r3, [sp, #30]
    4f68:	ldr	r3, [r4, #40]	; 0x28
    4f6a:	str.w	r6, [r5, #1064]	; 0x428
    4f6e:	strb.w	r6, [r5, #1060]	; 0x424
    4f72:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4f74:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    4f78:	mov	r0, r4
    4f7a:	bl	43d8 <MTPD::WriteStorageIDs()>
    4f7e:	b.n	4ef4 <MTPD::loop()+0x190>
            TRANSMIT(GetStorageInfo(p1));
    4f80:	mov.w	r8, #0
    4f84:	movs	r3, #1
    4f86:	mov	r1, r6
    4f88:	mov	r0, r4
    4f8a:	strb.w	r3, [r5, #1060]	; 0x424
    4f8e:	str.w	r8, [r5, #1064]	; 0x428
    4f92:	bl	461c <MTPD::GetStorageInfo(unsigned long)>
    4f96:	ldr.w	r3, [r5, #1064]	; 0x428
    4f9a:	add	r1, sp, #24
    4f9c:	mov	r0, r4
    4f9e:	adds	r3, #12
    4fa0:	movs	r2, #12
    4fa2:	str	r3, [sp, #24]
    4fa4:	movs	r3, #2
    4fa6:	strh.w	r3, [sp, #28]
    4faa:	ldrh	r3, [r4, #38]	; 0x26
    4fac:	strh.w	r3, [sp, #30]
    4fb0:	ldr	r3, [r4, #40]	; 0x28
    4fb2:	str.w	r8, [r5, #1064]	; 0x428
    4fb6:	strb.w	r8, [r5, #1060]	; 0x424
    4fba:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4fbc:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    4fc0:	mov	r1, r6
    4fc2:	mov	r0, r4
    4fc4:	bl	461c <MTPD::GetStorageInfo(unsigned long)>
    4fc8:	b.n	4ef4 <MTPD::loop()+0x190>
            if (p2) 
    4fca:	cmp.w	r8, #0
    4fce:	bne.w	5344 <MTPD::loop()+0x5e0>
                p1 = GetNumObjects(p1, p3);
    4fd2:	mov	r2, r3
    4fd4:	mov	r1, r6
    4fd6:	mov	r0, r4
    4fd8:	bl	414c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    4fdc:	str	r0, [sp, #12]
    4fde:	b.n	4f0e <MTPD::loop()+0x1aa>
            if (p2) 
    4fe0:	cmp.w	r8, #0
    4fe4:	bne.w	5344 <MTPD::loop()+0x5e0>
              TRANSMIT(GetObjectHandles(p1, p3));
    4fe8:	movs	r2, #1
    4fea:	mov	r1, r6
    4fec:	mov	r0, r4
    4fee:	str.w	r8, [r5, #1064]	; 0x428
    4ff2:	strb.w	r2, [r5, #1060]	; 0x424
    4ff6:	mov	r2, r3
    4ff8:	str	r3, [sp, #20]
    4ffa:	bl	4402 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4ffe:	ldr.w	r2, [r5, #1064]	; 0x428
    5002:	add	r1, sp, #24
    5004:	mov	r0, r4
    5006:	adds	r2, #12
    5008:	str	r2, [sp, #24]
    500a:	movs	r2, #2
    500c:	strh.w	r2, [sp, #28]
    5010:	ldrh	r2, [r4, #38]	; 0x26
    5012:	strh.w	r2, [sp, #30]
    5016:	ldr	r2, [r4, #40]	; 0x28
    5018:	str.w	r8, [r5, #1064]	; 0x428
    501c:	str	r2, [sp, #32]
    501e:	movs	r2, #12
    5020:	strb.w	r8, [r5, #1060]	; 0x424
    { if (write_get_length_) 
    5024:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    5028:	ldr	r3, [sp, #20]
    502a:	mov	r1, r6
    502c:	mov	r0, r4
    502e:	mov	r2, r3
    5030:	bl	4402 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    5034:	b.n	4ef4 <MTPD::loop()+0x190>
            TRANSMIT(GetObjectInfo(p1));
    5036:	mov.w	r8, #0
    503a:	movs	r3, #1
    503c:	mov	r1, r6
    503e:	mov	r0, r4
    5040:	strb.w	r3, [r5, #1060]	; 0x424
    5044:	str.w	r8, [r5, #1064]	; 0x428
    5048:	bl	4454 <MTPD::GetObjectInfo(unsigned long)>
    504c:	ldr.w	r3, [r5, #1064]	; 0x428
    5050:	add	r1, sp, #24
    5052:	mov	r0, r4
    5054:	adds	r3, #12
    5056:	movs	r2, #12
    5058:	str	r3, [sp, #24]
    505a:	movs	r3, #2
    505c:	strh.w	r3, [sp, #28]
    5060:	ldrh	r3, [r4, #38]	; 0x26
    5062:	strh.w	r3, [sp, #30]
    5066:	ldr	r3, [r4, #40]	; 0x28
    5068:	str.w	r8, [r5, #1064]	; 0x428
    506c:	strb.w	r8, [r5, #1060]	; 0x424
    5070:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5072:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    5076:	mov	r1, r6
    5078:	mov	r0, r4
    507a:	bl	4454 <MTPD::GetObjectInfo(unsigned long)>
    507e:	b.n	4ef4 <MTPD::loop()+0x190>
    5080:	.word	0x20007fc0
    5084:	.word	0x20008a64
    5088:	.word	0x20007fce
    508c:	.word	0x20007c22
            TRANSMIT(GetObject(p1));
    5090:	mov.w	r8, #0
    5094:	movs	r3, #1
    5096:	mov	r1, r6
    5098:	mov	r0, r4
    509a:	strb.w	r3, [r5, #1060]	; 0x424
    509e:	str.w	r8, [r5, #1064]	; 0x428
    50a2:	bl	486a <MTPD::GetObject(unsigned long)>
    50a6:	ldr.w	r3, [r5, #1064]	; 0x428
    50aa:	add	r1, sp, #24
    50ac:	mov	r0, r4
    50ae:	adds	r3, #12
    50b0:	movs	r2, #12
    50b2:	str	r3, [sp, #24]
    50b4:	movs	r3, #2
    50b6:	strh.w	r3, [sp, #28]
    50ba:	ldrh	r3, [r4, #38]	; 0x26
    50bc:	strh.w	r3, [sp, #30]
    50c0:	ldr	r3, [r4, #40]	; 0x28
    50c2:	str.w	r8, [r5, #1064]	; 0x428
    50c6:	strb.w	r8, [r5, #1060]	; 0x424
    50ca:	str	r3, [sp, #32]
    { if (write_get_length_) 
    50cc:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    50d0:	mov	r1, r6
    50d2:	mov	r0, r4
    50d4:	bl	486a <MTPD::GetObject(unsigned long)>
    50d8:	b.n	4ef4 <MTPD::loop()+0x190>
              if (p2) {
    50da:	cmp.w	r8, #0
    50de:	bne.w	5344 <MTPD::loop()+0x5e0>
                if (!storage_->DeleteObject(p1)) {
    50e2:	ldr	r0, [r4, #0]
    50e4:	mov	r1, r6
    50e6:	ldr	r3, [r0, #0]
    50e8:	ldr	r3, [r3, #60]	; 0x3c
    50ea:	blx	r3
                  return_code = 0x2012; // partial deletion
    50ec:	movw	r3, #8210	; 0x2012
    50f0:	cmp	r0, #0
    50f2:	it	eq
    50f4:	moveq	r7, r3
    50f6:	b.n	4f0e <MTPD::loop()+0x1aa>
              p3 = SendObjectInfo(p1, // storage
    50f8:	mov	r2, r8
    50fa:	mov	r1, r6
    50fc:	mov	r0, r4
              len = 12 + 3 * 4;
    50fe:	mov.w	r9, #24
              p3 = SendObjectInfo(p1, // storage
    5102:	bl	4b5c <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    5106:	strd	r8, r0, [r4, #48]	; 0x30
              break;
    510a:	b.n	4f0e <MTPD::loop()+0x1aa>
              if(!SendObject()) return_code = 0x2005;
    510c:	mov	r0, r4
    510e:	mov.w	r9, #12
    5112:	bl	4c3c <MTPD::SendObject()>
    5116:	movw	r3, #8197	; 0x2005
    511a:	cmp	r0, #0
    511c:	it	eq
    511e:	moveq	r7, r3
    5120:	b.n	4f0e <MTPD::loop()+0x1aa>
              TRANSMIT(GetDevicePropDesc(p1));
    5122:	mov.w	r8, #0
    5126:	movs	r3, #1
    5128:	mov	r1, r6
    512a:	mov	r0, r4
    512c:	strb.w	r3, [r5, #1060]	; 0x424
    5130:	str.w	r8, [r5, #1064]	; 0x428
    5134:	bl	4268 <MTPD::GetDevicePropDesc(unsigned long)>
    5138:	ldr.w	r3, [r5, #1064]	; 0x428
    513c:	add	r1, sp, #24
    513e:	mov	r0, r4
    5140:	adds	r3, #12
    5142:	movs	r2, #12
    5144:	str	r3, [sp, #24]
    5146:	movs	r3, #2
    5148:	strh.w	r3, [sp, #28]
    514c:	ldrh	r3, [r4, #38]	; 0x26
    514e:	strh.w	r3, [sp, #30]
    5152:	ldr	r3, [r4, #40]	; 0x28
    5154:	str.w	r8, [r5, #1064]	; 0x428
    5158:	strb.w	r8, [r5, #1060]	; 0x424
    515c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    515e:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    5162:	mov	r1, r6
    5164:	mov	r0, r4
    5166:	bl	4268 <MTPD::GetDevicePropDesc(unsigned long)>
    516a:	b.n	4ef4 <MTPD::loop()+0x190>
              TRANSMIT(GetDevicePropValue(p1));
    516c:	mov.w	r8, #0
    5170:	movs	r3, #1
    5172:	mov	r1, r6
    5174:	mov	r0, r4
    5176:	strb.w	r3, [r5, #1060]	; 0x424
    517a:	str.w	r8, [r5, #1064]	; 0x428
    517e:	bl	4254 <MTPD::GetDevicePropValue(unsigned long)>
    5182:	ldr.w	r3, [r5, #1064]	; 0x428
    5186:	add	r1, sp, #24
    5188:	mov	r0, r4
    518a:	adds	r3, #12
    518c:	movs	r2, #12
    518e:	str	r3, [sp, #24]
    5190:	movs	r3, #2
    5192:	strh.w	r3, [sp, #28]
    5196:	ldrh	r3, [r4, #38]	; 0x26
    5198:	strh.w	r3, [sp, #30]
    519c:	ldr	r3, [r4, #40]	; 0x28
    519e:	str.w	r8, [r5, #1064]	; 0x428
    51a2:	strb.w	r8, [r5, #1060]	; 0x424
    51a6:	str	r3, [sp, #32]
    { if (write_get_length_) 
    51a8:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    51ac:	mov	r1, r6
    51ae:	mov	r0, r4
    51b0:	bl	4254 <MTPD::GetDevicePropValue(unsigned long)>
    51b4:	b.n	4ef4 <MTPD::loop()+0x190>
              return_code = moveObject(p1,p2,p3);
    51b6:	mov	r2, r8
    51b8:	mov	r1, r6
    51ba:	mov	r0, r4
              len = 12;
    51bc:	mov.w	r9, #12
              return_code = moveObject(p1,p2,p3);
    51c0:	bl	4172 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    51c4:	mov	r7, r0
        if(return_code)
    51c6:	cmp	r7, #0
    51c8:	bne.w	4f0e <MTPD::loop()+0x1aa>
    }
    51cc:	add	sp, #60	; 0x3c
    51ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    51d2:	mov	r2, r8
    51d4:	mov	r1, r6
    51d6:	mov	r0, r4
              if(!return_code) 
    51d8:	movw	r7, #8197	; 0x2005
              return_code = copyObject(p1,p2,p3);
    51dc:	bl	4190 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    51e0:	cmp	r0, #0
    51e2:	itete	eq
    51e4:	moveq	r3, r6
    51e6:	movne	r3, r0
    51e8:	moveq.w	r9, #12
    51ec:	movne.w	r9, #16
    51f0:	str	r3, [sp, #12]
    51f2:	movw	r3, #8193	; 0x2001
    51f6:	it	ne
    51f8:	movne	r7, r3
    51fa:	b.n	4f0e <MTPD::loop()+0x1aa>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    51fc:	mov.w	sl, #0
    5200:	movs	r2, #1
    5202:	mov	r1, r6
    5204:	mov	r0, r4
    5206:	strb.w	r2, [r5, #1060]	; 0x424
    520a:	mov	r2, r8
    520c:	str.w	sl, [r5, #1064]	; 0x428
    5210:	str	r3, [sp, #20]
    5212:	bl	4950 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    5216:	ldr.w	r2, [r5, #1064]	; 0x428
    521a:	add	r1, sp, #24
    521c:	adds	r2, #12
    521e:	str	r2, [sp, #24]
    5220:	movs	r2, #2
    5222:	strh.w	r2, [sp, #28]
    5226:	ldrh	r2, [r4, #38]	; 0x26
    5228:	strh.w	r2, [sp, #30]
    522c:	ldr	r2, [r4, #40]	; 0x28
    522e:	str.w	sl, [r5, #1064]	; 0x428
    5232:	strb.w	sl, [r5, #1060]	; 0x424
    5236:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    523a:	mov	r0, r4
    523c:	movs	r2, #32
    523e:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    5242:	ldr	r3, [sp, #20]
    5244:	mov	r2, r8
    5246:	mov	r1, r6
    5248:	mov	r0, r4
    524a:	bl	4950 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    524e:	b.n	4ef4 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropsSupported(p1));
    5250:	mov.w	r8, #0
    5254:	movs	r3, #1
    5256:	mov	r1, r6
    5258:	mov	r0, r4
    525a:	strb.w	r3, [r5, #1060]	; 0x424
    525e:	str.w	r8, [r5, #1064]	; 0x428
    5262:	bl	4524 <MTPD::getObjectPropsSupported(unsigned long)>
    5266:	ldr.w	r3, [r5, #1064]	; 0x428
    526a:	add	r1, sp, #24
    526c:	mov	r0, r4
    526e:	adds	r3, #12
    5270:	movs	r2, #12
    5272:	str	r3, [sp, #24]
    5274:	movs	r3, #2
    5276:	strh.w	r3, [sp, #28]
    527a:	ldrh	r3, [r4, #38]	; 0x26
    527c:	strh.w	r3, [sp, #30]
    5280:	ldr	r3, [r4, #40]	; 0x28
    5282:	str.w	r8, [r5, #1064]	; 0x428
    5286:	strb.w	r8, [r5, #1060]	; 0x424
    528a:	str	r3, [sp, #32]
    { if (write_get_length_) 
    528c:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    5290:	mov	r1, r6
    5292:	mov	r0, r4
    5294:	bl	4524 <MTPD::getObjectPropsSupported(unsigned long)>
    5298:	b.n	4ef4 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropDesc(p1,p2));
    529a:	mov.w	sl, #0
    529e:	movs	r3, #1
    52a0:	mov	r2, r8
    52a2:	mov	r1, r6
    52a4:	mov	r0, r4
    52a6:	strb.w	r3, [r5, #1060]	; 0x424
    52aa:	str.w	sl, [r5, #1064]	; 0x428
    52ae:	bl	4728 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    52b2:	ldr.w	r3, [r5, #1064]	; 0x428
    52b6:	add	r1, sp, #24
    52b8:	mov	r0, r4
    52ba:	adds	r3, #12
    52bc:	movs	r2, #12
    52be:	str	r3, [sp, #24]
    52c0:	movs	r3, #2
    52c2:	strh.w	r3, [sp, #28]
    52c6:	ldrh	r3, [r4, #38]	; 0x26
    52c8:	strh.w	r3, [sp, #30]
    52cc:	ldr	r3, [r4, #40]	; 0x28
    52ce:	str.w	sl, [r5, #1064]	; 0x428
    52d2:	strb.w	sl, [r5, #1060]	; 0x424
    52d6:	str	r3, [sp, #32]
    { if (write_get_length_) 
    52d8:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    52dc:	mov	r2, r8
    52de:	mov	r1, r6
    52e0:	mov	r0, r4
    52e2:	bl	4728 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    52e6:	b.n	4ef4 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropValue(p1,p2));
    52e8:	mov.w	sl, #0
    52ec:	movs	r3, #1
    52ee:	mov	r2, r8
    52f0:	mov	r1, r6
    52f2:	mov	r0, r4
    52f4:	strb.w	r3, [r5, #1060]	; 0x424
    52f8:	str.w	sl, [r5, #1064]	; 0x428
    52fc:	bl	4554 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    5300:	ldr.w	r3, [r5, #1064]	; 0x428
    5304:	add	r1, sp, #24
    5306:	mov	r0, r4
    5308:	adds	r3, #12
    530a:	movs	r2, #12
    530c:	str	r3, [sp, #24]
    530e:	movs	r3, #2
    5310:	strh.w	r3, [sp, #28]
    5314:	ldrh	r3, [r4, #38]	; 0x26
    5316:	strh.w	r3, [sp, #30]
    531a:	ldr	r3, [r4, #40]	; 0x28
    531c:	str.w	sl, [r5, #1064]	; 0x428
    5320:	strb.w	sl, [r5, #1060]	; 0x424
    5324:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5326:	bl	40d4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    532a:	mov	r2, r8
    532c:	mov	r1, r6
    532e:	mov	r0, r4
    5330:	bl	4554 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    5334:	b.n	4ef4 <MTPD::loop()+0x190>
              return_code = setObjectPropValue(p1,p2);
    5336:	mov	r2, r8
    5338:	mov	r1, r6
    533a:	mov	r0, r4
    533c:	bl	4d30 <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    5340:	mov	r7, r0
              break;
    5342:	b.n	51c6 <MTPD::loop()+0x462>
                return_code = 0x2014; // spec by format unsupported
    5344:	movw	r7, #8212	; 0x2014
    5348:	b.n	4f0e <MTPD::loop()+0x1aa>
    534a:	nop

0000534c <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    534c:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    534e:	cbz	r3, 5386 <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    5350:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    5352:	movw	r5, #513	; 0x201
    5356:	str	r5, [r4, #16]
    5358:	mov	r4, r3

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    535a:	cbz	r1, 5388 <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    535c:	ldrb.w	r5, [r1], #1
    5360:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    5362:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    5364:	str	r5, [r6, #100]	; 0x64
    5366:	ldr	r5, [r0, #0]
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    5368:	ldr	r6, [r5, #112]	; 0x70
    536a:	lsls	r6, r6, #30
    536c:	bmi.n	5378 <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    536e:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    5370:	cbz	r2, 5376 <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    5372:	strb.w	r5, [r2], #1
				count_read--;
    5376:	subs	r4, #1
    5378:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    537a:	ldr	r5, [r5, #20]
    537c:	lsls	r5, r5, #31
    537e:	bpl.n	5366 <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    5380:	cmp	r3, #0
    5382:	bne.n	535a <SPIClass::transfer(void const*, void*, unsigned int)+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    5384:	cbnz	r4, 538e <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    5386:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    5388:	ldrb.w	r5, [r0, #60]	; 0x3c
    538c:	b.n	5360 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    538e:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    5390:	ldr	r1, [r3, #112]	; 0x70
    5392:	lsls	r1, r1, #30
    5394:	bmi.n	5384 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    5396:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    5398:	cbz	r2, 539e <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    539a:	strb.w	r3, [r2], #1
			count_read--;
    539e:	subs	r4, #1
    53a0:	b.n	5384 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

000053a2 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    53a2:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    53a4:	ldr	r2, [r3, #0]
    53a6:	ldr	r1, [r2, #0]
    53a8:	ldr	r2, [r3, #4]
    53aa:	tst	r1, r2
void SPIClass::end() {
    53ac:	push	{r4, lr}
    53ae:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    53b0:	beq.n	53e8 <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    53b2:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    53b4:	movs	r1, #0
    53b6:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    53b8:	movs	r1, #5
    53ba:	ldrb	r2, [r0, #16]
    53bc:	add	r3, r2
    53be:	ldrb	r0, [r3, #16]
    53c0:	bl	c244 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    53c4:	ldrb	r2, [r4, #17]
    53c6:	ldr	r3, [r4, #4]
    53c8:	movs	r1, #5
    53ca:	add	r3, r2
    53cc:	ldrb.w	r0, [r3, #36]	; 0x24
    53d0:	bl	c244 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    53d4:	ldr	r3, [r4, #4]
    53d6:	ldrb	r2, [r4, #18]
    53d8:	movs	r1, #5
    53da:	add	r3, r2
	}
}
    53dc:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    53e0:	ldrb.w	r0, [r3, #56]	; 0x38
    53e4:	b.w	c244 <pinMode>
}
    53e8:	pop	{r4, pc}

000053ea <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    53ea:	ldrb.w	r2, [r0, #163]	; 0xa3
    53ee:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    53f2:	subs	r0, r2, r0
    53f4:	bx	lr

000053f6 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    53f6:	ldrb.w	r3, [r0, #162]	; 0xa2
    53fa:	ldrb.w	r2, [r0, #163]	; 0xa3
    53fe:	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    5400:	itttt	hi
    5402:	addhi	r2, r3, #1
    5404:	strbhi.w	r2, [r0, #162]	; 0xa2
    5408:	addhi	r0, r0, r3
    540a:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    540c:	it	ls
    540e:	movls.w	r0, #4294967295
	}
    5412:	bx	lr

00005414 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    5414:	ldrb.w	r3, [r0, #162]	; 0xa2
    5418:	ldrb.w	r2, [r0, #163]	; 0xa3
    541c:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    541e:	itte	hi
    5420:	addhi	r0, r0, r3
    5422:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    5424:	movls.w	r0, #4294967295
	}
    5428:	bx	lr

0000542a <TwoWire::flush()>:
	virtual void flush(void) {
	}
    542a:	bx	lr

0000542c <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    542c:	ldrh.w	r3, [r0, #304]	; 0x130
    5430:	cbz	r3, 543e <TwoWire::write(unsigned char)+0x12>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    5432:	ldrb.w	r3, [r0, #303]	; 0x12f
    5436:	cmp	r3, #136	; 0x88
    5438:	bls.n	5442 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    543a:	movs	r3, #1
    543c:	str	r3, [r0, #4]
			return 0;
    543e:	movs	r0, #0
    5440:	bx	lr
		txBuffer[txBufferLength++] = data;
    5442:	adds	r2, r3, #1
    5444:	strb.w	r2, [r0, #303]	; 0x12f
    5448:	add	r0, r3
    544a:	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    544e:	movs	r0, #1
    5450:	bx	lr

00005452 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    5452:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    5454:	ldrh.w	r3, [r0, #304]	; 0x130
{
    5458:	mov	r5, r0
    545a:	mov	r4, r2
	if (transmitting || slave_mode) {
    545c:	cbz	r3, 548a <TwoWire::write(unsigned char const*, unsigned int)+0x38>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    545e:	ldrb.w	r3, [r0, #303]	; 0x12f
    5462:	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    5466:	cmp	r4, r2
    5468:	ittt	hi
    546a:	movhi	r0, #1
    546c:	movhi	r4, r2
    546e:	strhi	r0, [r5, #4]
		memcpy(txBuffer + txBufferLength, data, quantity);
    5470:	add.w	r0, r5, #165	; 0xa5
    5474:	mov	r2, r4
    5476:	add	r0, r3
    5478:	bl	a56c <memcpy>
		txBufferLength += quantity;
    547c:	ldrb.w	r3, [r5, #303]	; 0x12f
    5480:	add	r3, r4
    5482:	strb.w	r3, [r5, #303]	; 0x12f
}
    5486:	mov	r0, r4
    5488:	pop	{r3, r4, r5, pc}
	return 0;
    548a:	mov	r4, r3
    548c:	b.n	5486 <TwoWire::write(unsigned char const*, unsigned int)+0x34>
	...

00005490 <TwoWire::force_clock()>:
{
    5490:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    5494:	ldr	r1, [r0, #20]
{
    5496:	mov	r2, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    5498:	ldrb	r3, [r0, #24]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    549a:	mov.w	lr, #21
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    549e:	ldr	r4, [pc, #244]	; (5594 <TwoWire::force_clock()+0x104>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    54a0:	add.w	r3, r1, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    54a4:	ldr.w	r8, [pc, #244]	; 559c <TwoWire::force_clock()+0x10c>
    54a8:	ldrb	r0, [r3, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    54aa:	ldrb	r3, [r2, #25]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    54ac:	lsls	r6, r0, #4
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    54ae:	add.w	r3, r1, r3, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    54b2:	add.w	r0, r4, r0, lsl #4
	*portSetRegister(sda_pin) = sda_mask;
    54b6:	ldr	r6, [r4, r6]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    54b8:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    54bc:	ldr.w	ip, [r0, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    54c0:	ldr.w	r9, [r0, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    54c4:	lsls	r7, r3, #4
    54c6:	add.w	r3, r4, r3, lsl #4
    54ca:	ldr	r5, [r3, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    54cc:	str.w	lr, [r9]
	*portSetRegister(sda_pin) = sda_mask;
    54d0:	str.w	ip, [r6, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    54d4:	ldr	r0, [r6, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    54d6:	ldr	r3, [r3, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    54d8:	orr.w	r0, r0, ip
	*portConfigRegister(scl_pin) = 5 | 0x10;
    54dc:	str	r3, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    54de:	str	r0, [r6, #4]
	*portSetRegister(scl_pin) = scl_mask;
    54e0:	ldr	r0, [r4, r7]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    54e2:	str.w	lr, [r3]
	*portSetRegister(scl_pin) = scl_mask;
    54e6:	str.w	r5, [r0, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    54ea:	ldr	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    54ec:	ldr	r4, [pc, #168]	; (5598 <TwoWire::force_clock()+0x108>)
    54ee:	orrs	r3, r5
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    54f0:	ldr.w	lr, [pc, #172]	; 55a0 <TwoWire::force_clock()+0x110>
    54f4:	str	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    54f6:	ldr	r7, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    54f8:	ldr.w	r3, [lr]
    54fc:	udiv	r3, r3, r8
    5500:	mov.w	r8, #10
    5504:	mul.w	r3, r8, r3
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    5508:	ldr.w	r8, [r4, #4]
    550c:	sub.w	r8, r8, r7
    5510:	cmp	r3, r8
    5512:	bhi.n	5508 <TwoWire::force_clock()+0x78>
    5514:	movs	r3, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    5516:	ldr	r7, [pc, #128]	; (5598 <TwoWire::force_clock()+0x108>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5518:	ldr.w	sl, [pc, #128]	; 559c <TwoWire::force_clock()+0x10c>
		if ((*portInputRegister(sda_pin) & sda_mask)
    551c:	ldr	r4, [r6, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    551e:	tst.w	r4, ip
    5522:	beq.n	552a <TwoWire::force_clock()+0x9a>
    5524:	ldr	r4, [r0, #8]
    5526:	tst	r4, r5
    5528:	bne.n	558e <TwoWire::force_clock()+0xfe>
		*portClearRegister(scl_pin) = scl_mask;
    552a:	str.w	r5, [r0, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    552e:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5532:	ldr.w	r4, [lr]
    5536:	udiv	r4, r4, sl
    553a:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    553e:	ldr.w	r8, [r7, #4]
    5542:	sub.w	r8, r8, fp
    5546:	cmp	r4, r8
    5548:	bhi.n	553e <TwoWire::force_clock()+0xae>
		*portSetRegister(scl_pin) = scl_mask;
    554a:	str.w	r5, [r0, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    554e:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5552:	ldr.w	r4, [lr]
    5556:	udiv	r4, r4, sl
    555a:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    555e:	ldr.w	r8, [r7, #4]
    5562:	sub.w	r8, r8, fp
    5566:	cmp	r4, r8
    5568:	bhi.n	555e <TwoWire::force_clock()+0xce>
	for (int i=0; i < 9; i++) {
    556a:	subs	r3, #1
    556c:	bne.n	551c <TwoWire::force_clock()+0x8c>
	bool ret = false;
    556e:	mov	r0, r3
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    5570:	ldrb	r3, [r2, #24]
    5572:	add.w	r3, r1, r3, lsl #4
    5576:	ldr	r3, [r3, #12]
    5578:	str.w	r3, [r9]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    557c:	ldrb	r3, [r2, #25]
    557e:	ldr	r2, [sp, #4]
    5580:	add.w	r1, r1, r3, lsl #4
    5584:	ldr	r3, [r1, #44]	; 0x2c
    5586:	str	r3, [r2, #0]
}
    5588:	add	sp, #12
    558a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    558e:	movs	r0, #1
    5590:	b.n	5570 <TwoWire::force_clock()+0xe0>
    5592:	nop
    5594:	.word	0x2000743c
    5598:	.word	0xe0001000
    559c:	.word	0x000f4240
    55a0:	.word	0x20008a60

000055a4 <TwoWire::wait_idle()>:
	return systick_millis_count;
    55a4:	ldr	r2, [pc, #44]	; (55d4 <TwoWire::wait_idle()+0x30>)
{
    55a6:	push	{r4, lr}
    55a8:	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    55aa:	ldr	r4, [r0, #16]
		uint32_t status = port->MSR; // pg 2899 & 2892
    55ac:	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    55ae:	tst.w	r3, #33554432	; 0x2000000
    55b2:	bne.n	55be <TwoWire::wait_idle()+0x1a>
	port->MSR = 0x00007F00; // clear all prior flags
    55b4:	mov.w	r3, #32512	; 0x7f00
	return true;
    55b8:	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    55ba:	str	r3, [r4, #20]
}
    55bc:	pop	{r4, pc}
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    55be:	lsls	r3, r3, #7
    55c0:	bmi.n	55b4 <TwoWire::wait_idle()+0x10>
    55c2:	ldr	r3, [r2, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    55c4:	subs	r3, r3, r1
		if (timeout > 16) {
    55c6:	cmp	r3, #16
    55c8:	bls.n	55ac <TwoWire::wait_idle()+0x8>
			if (force_clock()) break;
    55ca:	bl	5490 <TwoWire::force_clock()>
    55ce:	cmp	r0, #0
    55d0:	bne.n	55b4 <TwoWire::wait_idle()+0x10>
    55d2:	b.n	55bc <TwoWire::wait_idle()+0x18>
    55d4:	.word	0x2001094c

000055d8 <TwoWire::endTransmission(unsigned char)>:
{
    55d8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tx_len = txBufferLength;
    55dc:	ldrb.w	r8, [r0, #303]	; 0x12f
{
    55e0:	mov	r7, r0
    55e2:	mov	r5, r1
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    55e4:	ldr	r4, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    55e6:	cmp.w	r8, #0
    55ea:	beq.n	564a <TwoWire::endTransmission(unsigned char)+0x72>
	if (!wait_idle()) return 4;
    55ec:	bl	55a4 <TwoWire::wait_idle()>
    55f0:	cbz	r0, 564a <TwoWire::endTransmission(unsigned char)+0x72>
    55f2:	ldr.w	r9, [pc, #196]	; 56b8 <TwoWire::endTransmission(unsigned char)+0xe0>
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    55f6:	movs	r6, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    55f8:	mov.w	fp, #512	; 0x200
    55fc:	ldr.w	sl, [r9]
		if (tx_index <= tx_len) {
    5600:	cmp	r6, r8
    5602:	bhi.n	563c <TwoWire::endTransmission(unsigned char)+0x64>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    5604:	ldr	r3, [r4, #92]	; 0x5c
    5606:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    560a:	cmp	r3, #3
    560c:	bhi.n	563c <TwoWire::endTransmission(unsigned char)+0x64>
				if (tx_index == 0) {
    560e:	cbnz	r6, 5622 <TwoWire::endTransmission(unsigned char)+0x4a>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    5610:	ldrb.w	r2, [r7, #165]	; 0xa5
    5614:	orr.w	r2, r2, #1024	; 0x400
    5618:	str	r2, [r4, #96]	; 0x60
					tx_index = 1;
    561a:	movs	r2, #1
				fifo_used++;
    561c:	adds	r3, #1
    561e:	mov	r6, r2
    5620:	b.n	560a <TwoWire::endTransmission(unsigned char)+0x32>
				} else if (tx_index < tx_len) {
    5622:	cmp	r6, r8
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    5624:	add.w	r2, r6, #1
				} else if (tx_index < tx_len) {
    5628:	bcs.n	5634 <TwoWire::endTransmission(unsigned char)+0x5c>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    562a:	add	r6, r7
    562c:	ldrb.w	r1, [r6, #165]	; 0xa5
    5630:	str	r1, [r4, #96]	; 0x60
    5632:	b.n	561c <TwoWire::endTransmission(unsigned char)+0x44>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5634:	cbz	r5, 563a <TwoWire::endTransmission(unsigned char)+0x62>
    5636:	str.w	fp, [r4, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    563a:	mov	r6, r2
		uint32_t status = port->MSR; // pg 2884 & 2891
    563c:	ldr	r3, [r4, #20]
		if (status & LPI2C_MSR_ALF) {
    563e:	lsls	r2, r3, #20
    5640:	bpl.n	564e <TwoWire::endTransmission(unsigned char)+0x76>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5642:	ldr	r3, [r4, #16]
    5644:	orr.w	r3, r3, #768	; 0x300
    5648:	str	r3, [r4, #16]
	if (!tx_len) return 4; // no address for transmit
    564a:	movs	r5, #4
    564c:	b.n	565c <TwoWire::endTransmission(unsigned char)+0x84>
		if (status & LPI2C_MSR_FEF) {
    564e:	lsls	r0, r3, #19
    5650:	bpl.n	5662 <TwoWire::endTransmission(unsigned char)+0x8a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5652:	ldr	r3, [r4, #16]
			return 5; // FIFO error
    5654:	movs	r5, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5656:	orr.w	r3, r3, #768	; 0x300
    565a:	str	r3, [r4, #16]
}
    565c:	mov	r0, r5
    565e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (status & LPI2C_MSR_NDF) {
    5662:	lsls	r1, r3, #21
    5664:	bpl.n	5678 <TwoWire::endTransmission(unsigned char)+0xa0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5666:	ldr	r3, [r4, #16]
			return 2; // NACK (assume address, TODO: how to tell address from data)
    5668:	movs	r5, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    566a:	orr.w	r3, r3, #768	; 0x300
    566e:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    5670:	mov.w	r3, #512	; 0x200
    5674:	str	r3, [r4, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    5676:	b.n	565c <TwoWire::endTransmission(unsigned char)+0x84>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    5678:	lsls	r2, r3, #18
    567a:	bmi.n	5688 <TwoWire::endTransmission(unsigned char)+0xb0>
    567c:	ldr.w	r2, [r9]
    5680:	sub.w	r2, r2, sl
    5684:	cmp	r2, #50	; 0x32
    5686:	bls.n	5698 <TwoWire::endTransmission(unsigned char)+0xc0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5688:	ldr	r3, [r4, #16]
    568a:	orr.w	r3, r3, #768	; 0x300
    568e:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    5690:	mov.w	r3, #512	; 0x200
    5694:	str	r3, [r4, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    5696:	b.n	564a <TwoWire::endTransmission(unsigned char)+0x72>
		if (tx_index > tx_len) {
    5698:	cmp	r6, r8
    569a:	bls.n	56ac <TwoWire::endTransmission(unsigned char)+0xd4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    569c:	ldr	r2, [r4, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    569e:	ands.w	r2, r2, #7
    56a2:	bne.n	56ac <TwoWire::endTransmission(unsigned char)+0xd4>
    56a4:	lsls	r3, r3, #22
    56a6:	bmi.n	56b2 <TwoWire::endTransmission(unsigned char)+0xda>
    56a8:	cmp	r5, #0
    56aa:	beq.n	565c <TwoWire::endTransmission(unsigned char)+0x84>
		yield();
    56ac:	bl	c730 <yield>
	}
    56b0:	b.n	5600 <TwoWire::endTransmission(unsigned char)+0x28>
				return 0;
    56b2:	mov	r5, r2
    56b4:	b.n	565c <TwoWire::endTransmission(unsigned char)+0x84>
    56b6:	nop
    56b8:	.word	0x2001094c

000056bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    56bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56c0:	mov	r7, r0
    56c2:	mov	r6, r1
    56c4:	mov	r9, r2
    56c6:	mov	r8, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    56c8:	ldr	r5, [r0, #16]
	if (!wait_idle()) return 4;
    56ca:	bl	55a4 <TwoWire::wait_idle()>
    56ce:	cmp	r0, #0
    56d0:	beq.n	57c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10c>
	address = (address & 0x7F) << 1;
    56d2:	lsls	r6, r6, #1
	if (length < 1) length = 1;
    56d4:	cmp.w	r9, #1
    56d8:	ldr.w	sl, [pc, #240]	; 57cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
	rxBufferIndex = 0;
    56dc:	mov.w	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    56e0:	uxtb	r6, r6
    56e2:	it	cc
    56e4:	movcc.w	r9, #1
    56e8:	ldr.w	fp, [sl]
    56ec:	orr.w	r6, r6, #1024	; 0x400
	rxBufferIndex = 0;
    56f0:	strh.w	r4, [r7, #162]	; 0xa2
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    56f4:	orr.w	r6, r6, #1
		if (tx_state < 3) {
    56f8:	cmp	r4, #2
    56fa:	bhi.n	571a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    56fc:	ldr	r3, [r5, #92]	; 0x5c
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    56fe:	add.w	r2, r9, #4294967295
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5702:	mov.w	r1, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    5706:	and.w	r3, r3, #7
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    570a:	orr.w	r2, r2, #256	; 0x100
    570e:	add	r3, r4
			while (tx_fifo < 4 && tx_state < 3) {
    5710:	subs	r0, r3, r4
    5712:	cmp	r0, #3
    5714:	bhi.n	571a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
    5716:	cmp	r4, #3
    5718:	bne.n	5748 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x8c>
		if (rxBufferLength < sizeof(rxBuffer)) {
    571a:	ldrb.w	r3, [r7, #163]	; 0xa3
    571e:	cmp	r3, #135	; 0x87
    5720:	bls.n	5762 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    5722:	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    5724:	lsls	r1, r3, #20
    5726:	bpl.n	5784 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5728:	ldr	r3, [r5, #16]
    572a:	orr.w	r3, r3, #768	; 0x300
    572e:	str	r3, [r5, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    5730:	ldr	r3, [r5, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    5732:	tst.w	r3, #458752	; 0x70000
    5736:	beq.n	5740 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x84>
    5738:	ldr	r3, [r5, #16]
    573a:	orr.w	r3, r3, #512	; 0x200
    573e:	str	r3, [r5, #16]
	return rxBufferLength;
    5740:	ldrb.w	r0, [r7, #163]	; 0xa3
}
    5744:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (tx_state == 0) {
    5748:	cbnz	r4, 5750 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x94>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    574a:	str	r6, [r5, #96]	; 0x60
				tx_state++;
    574c:	adds	r4, #1
				tx_fifo--;
    574e:	b.n	5710 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x54>
				} else if (tx_state == 1) {
    5750:	cmp	r4, #1
    5752:	bne.n	5758 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    5754:	str	r2, [r5, #96]	; 0x60
    5756:	b.n	574c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5758:	cmp.w	r8, #0
    575c:	beq.n	574c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
    575e:	str	r1, [r5, #96]	; 0x60
    5760:	b.n	574c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    5762:	ldr	r2, [r5, #92]	; 0x5c
    5764:	ubfx	r2, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    5768:	cmp	r2, #0
    576a:	beq.n	5722 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
    576c:	ldrb.w	r3, [r7, #163]	; 0xa3
    5770:	cmp	r3, #135	; 0x87
    5772:	bhi.n	5722 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
				rxBuffer[rxBufferLength++] = port->MRDR;
    5774:	ldr	r1, [r5, #112]	; 0x70
    5776:	adds	r0, r3, #1
    5778:	add	r3, r7
				rx_fifo--;
    577a:	subs	r2, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    577c:	strb.w	r0, [r7, #163]	; 0xa3
    5780:	strb	r1, [r3, #26]
				rx_fifo--;
    5782:	b.n	5768 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xac>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    5784:	tst.w	r3, #9216	; 0x2400
    5788:	bne.n	5796 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
    578a:	ldr.w	r2, [sl]
    578e:	sub.w	r2, r2, fp
    5792:	cmp	r2, #50	; 0x32
    5794:	bls.n	57a6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5796:	ldr	r3, [r5, #16]
    5798:	orr.w	r3, r3, #768	; 0x300
    579c:	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    579e:	mov.w	r3, #512	; 0x200
    57a2:	str	r3, [r5, #96]	; 0x60
			break;
    57a4:	b.n	5730 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		if (rxBufferLength >= length && tx_state >= 3) {
    57a6:	ldrb.w	r2, [r7, #163]	; 0xa3
    57aa:	cmp	r2, r9
    57ac:	bcc.n	57c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    57ae:	cmp	r4, #2
    57b0:	bls.n	57c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			uint32_t tx_fifo = port->MFSR & 0x07;
    57b2:	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    57b4:	lsls	r2, r2, #29
    57b6:	bne.n	57c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    57b8:	lsls	r3, r3, #22
    57ba:	bmi.n	5730 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
    57bc:	cmp.w	r8, #0
    57c0:	beq.n	5730 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		yield();
    57c2:	bl	c730 <yield>
	}
    57c6:	b.n	56f8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3c>
	if (!wait_idle()) return 4;
    57c8:	movs	r0, #4
    57ca:	b.n	5744 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    57cc:	.word	0x2001094c

000057d0 <TwoWire::isr()>:
{
    57d0:	push	{r4, r5, r6, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    57d2:	ldr	r6, [r0, #16]
{
    57d4:	mov	r4, r0
	uint32_t status = port->SSR;
    57d6:	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    57da:	ands.w	r3, r5, #3840	; 0xf00
    57de:	beq.n	57e4 <TwoWire::isr()+0x14>
    57e0:	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    57e4:	lsls	r0, r5, #30
    57e6:	bpl.n	5808 <TwoWire::isr()+0x38>
		int rx = port->SRDR;
    57e8:	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    57ec:	lsls	r1, r2, #16
			rxBufferIndex = 0;
    57ee:	itt	mi
    57f0:	movmi	r3, #0
    57f2:	strhmi.w	r3, [r4, #162]	; 0xa2
		if (rxBufferLength < BUFFER_LENGTH) {
    57f6:	ldrb.w	r3, [r4, #163]	; 0xa3
    57fa:	cmp	r3, #135	; 0x87
			rxBuffer[rxBufferLength++] = rx & 255;
    57fc:	itttt	ls
    57fe:	addls	r1, r3, #1
    5800:	addls	r3, r3, r4
    5802:	strbls.w	r1, [r4, #163]	; 0xa3
    5806:	strbls	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    5808:	lsls	r2, r5, #31
    580a:	bpl.n	5846 <TwoWire::isr()+0x76>
		if (!transmitting) {
    580c:	ldrb.w	r3, [r4, #304]	; 0x130
    5810:	cbnz	r3, 5826 <TwoWire::isr()+0x56>
			if (user_onRequest != nullptr) {
    5812:	ldr.w	r3, [r4, #312]	; 0x138
    5816:	cbz	r3, 581a <TwoWire::isr()+0x4a>
				(*user_onRequest)();
    5818:	blx	r3
			txBufferIndex = 0;
    581a:	movs	r3, #0
    581c:	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    5820:	movs	r3, #1
    5822:	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    5826:	ldrb.w	r3, [r4, #302]	; 0x12e
    582a:	ldrb.w	r2, [r4, #303]	; 0x12f
    582e:	cmp	r2, r3
			port->STDR = txBuffer[txBufferIndex++];
    5830:	ittet	hi
    5832:	addhi	r2, r3, #1
    5834:	addhi	r3, r3, r4
			port->STDR = 0;
    5836:	movls	r3, #0
			port->STDR = txBuffer[txBufferIndex++];
    5838:	strbhi.w	r2, [r4, #302]	; 0x12e
    583c:	it	hi
    583e:	ldrbhi.w	r3, [r3, #165]	; 0xa5
			port->STDR = 0;
    5842:	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    5846:	lsls	r3, r5, #22
    5848:	bpl.n	5866 <TwoWire::isr()+0x96>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    584a:	ldrb.w	r0, [r4, #163]	; 0xa3
    584e:	cbz	r0, 5858 <TwoWire::isr()+0x88>
    5850:	ldr.w	r3, [r4, #316]	; 0x13c
    5854:	cbz	r3, 5858 <TwoWire::isr()+0x88>
			(*user_onReceive)(rxBufferLength);
    5856:	blx	r3
		rxBufferIndex = 0;
    5858:	movs	r3, #0
    585a:	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    585e:	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    5862:	strb.w	r3, [r4, #304]	; 0x130
}
    5866:	pop	{r4, r5, r6, pc}

00005868 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    5868:	ldr	r0, [pc, #4]	; (5870 <lpi2c1_isr()+0x8>)
    586a:	b.w	57d0 <TwoWire::isr()>
    586e:	nop
    5870:	.word	0x20008a74

00005874 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    5874:	ldr	r0, [pc, #4]	; (587c <lpi2c3_isr()+0x8>)
    5876:	b.w	57d0 <TwoWire::isr()>
    587a:	nop
    587c:	.word	0x20008bb4

00005880 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    5880:	ldr	r0, [pc, #4]	; (5888 <lpi2c4_isr()+0x8>)
    5882:	b.w	57d0 <TwoWire::isr()>
    5886:	nop
    5888:	.word	0x20008cf4

0000588c <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    588c:	ldr	r3, [r0, #16]
	port->MCR = 0;
    588e:	movs	r2, #0
	if (frequency < 400000) {
    5890:	ldr	r0, [pc, #76]	; (58e0 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    5892:	str	r2, [r3, #16]
	if (frequency < 400000) {
    5894:	cmp	r1, r0
    5896:	bhi.n	58be <TwoWire::setClock(unsigned long)+0x32>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    5898:	ldr	r2, [pc, #72]	; (58e4 <TwoWire::setClock(unsigned long)+0x58>)
    589a:	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    589c:	movs	r2, #1
    589e:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    58a0:	ldr	r2, [pc, #68]	; (58e8 <TwoWire::setClock(unsigned long)+0x5c>)
    58a2:	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    58a4:	mov.w	r2, #180224	; 0x2c000
    58a8:	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    58aa:	ldr	r2, [r3, #72]	; 0x48
    58ac:	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    58ae:	movs	r2, #0
    58b0:	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    58b2:	mov.w	r2, #65537	; 0x10001
    58b6:	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    58b8:	movs	r2, #1
    58ba:	str	r2, [r3, #16]
}
    58bc:	bx	lr
	} else if (frequency < 1000000) {
    58be:	ldr	r0, [pc, #44]	; (58ec <TwoWire::setClock(unsigned long)+0x60>)
    58c0:	cmp	r1, r0
    58c2:	ldr	r1, [pc, #44]	; (58f0 <TwoWire::setClock(unsigned long)+0x64>)
    58c4:	bhi.n	58d4 <TwoWire::setClock(unsigned long)+0x48>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    58c6:	ldr	r0, [pc, #44]	; (58f4 <TwoWire::setClock(unsigned long)+0x68>)
    58c8:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    58ca:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    58cc:	ldr	r2, [pc, #40]	; (58f8 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    58ce:	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    58d0:	str	r1, [r3, #44]	; 0x2c
    58d2:	b.n	58aa <TwoWire::setClock(unsigned long)+0x1e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    58d4:	ldr	r0, [pc, #36]	; (58fc <TwoWire::setClock(unsigned long)+0x70>)
    58d6:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    58d8:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    58da:	ldr	r2, [pc, #36]	; (5900 <TwoWire::setClock(unsigned long)+0x74>)
    58dc:	b.n	58ce <TwoWire::setClock(unsigned long)+0x42>
    58de:	nop
    58e0:	.word	0x00061a7f
    58e4:	.word	0x1928373b
    58e8:	.word	0x05050bb8
    58ec:	.word	0x000f423f
    58f0:	.word	0x00057f00
    58f4:	.word	0x0c121a1c
    58f8:	.word	0x02020e10
    58fc:	.word	0x0407090a
    5900:	.word	0x01010960

00005904 <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    5904:	mov	r3, r0
    size_t n = end - str;
    5906:	subs	r0, r2, r1
    if (cp < 0X80) {
    5908:	cmp	r3, #127	; 0x7f
    590a:	bhi.n	5918 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    590c:	cmp	r0, #0
    590e:	beq.n	5994 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    5910:	mov	r0, r1
    5912:	strb.w	r3, [r0], #1
    5916:	bx	lr
    } else if (cp < 0X800) {
    5918:	cmp.w	r3, #2048	; 0x800
    591c:	bcs.n	593a <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    591e:	cmp	r0, #1
    5920:	bls.n	5992 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5922:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5924:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5928:	mov	r0, r1
    592a:	orn	r2, r2, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    592e:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5932:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5936:	strb	r3, [r1, #1]
    5938:	bx	lr
    } else if (cp < 0X10000) {
    593a:	cmp.w	r3, #65536	; 0x10000
    593e:	bcs.n	5964 <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    5940:	cmp	r0, #2
    5942:	bls.n	5992 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    5944:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5946:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    5948:	orn	r2, r2, #31
    594c:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    594e:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5952:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5956:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    595a:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    595e:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5960:	strb	r3, [r1, #2]
    5962:	bx	lr
       if (n < 4) goto fail;
    5964:	cmp	r0, #3
    5966:	bls.n	5992 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    5968:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    596a:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    596c:	orn	r2, r2, #15
    5970:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    5972:	ubfx	r2, r3, #12, #6
    5976:	orn	r2, r2, #127	; 0x7f
    597a:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    597c:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5980:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5984:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5988:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    598c:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    598e:	strb	r3, [r1, #3]
    5990:	bx	lr
    return nullptr;
    5992:	movs	r0, #0
  }
    5994:	bx	lr
	...

00005998 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    5998:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    599a:	push	{r4, r5, lr}
    599c:	mov	r5, r0
    if (str >= end) {
    599e:	bcs.n	5a16 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    uint8_t ch = str[0];
    59a0:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    59a2:	ldrsb.w	r0, [r0]
    59a6:	cmp	r0, #0
    59a8:	blt.n	59b0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      return str + 1;
    59aa:	adds	r0, r5, #1
      *rtn = ch;
    59ac:	str	r3, [r2, #0]
  }
    59ae:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    59b0:	and.w	r0, r3, #224	; 0xe0
    59b4:	cmp	r0, #192	; 0xc0
    59b6:	bne.n	59f6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    59b8:	and.w	r3, r3, #31
      n = 2;
    59bc:	movs	r4, #2
    if ((str + n) > end) {
    59be:	adds	r0, r5, r4
    59c0:	cmp	r0, r1
    59c2:	bhi.n	5a16 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    59c4:	adds	r5, #1
      ch = str[i];
    59c6:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    59ca:	and.w	r4, r1, #192	; 0xc0
    59ce:	cmp	r4, #128	; 0x80
    59d0:	bne.n	5a16 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    59d2:	and.w	r1, r1, #63	; 0x3f
    for (size_t i = 1; i < n; i++) {
    59d6:	cmp	r5, r0
      cp |= ch & 0X3F;
    59d8:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    59dc:	bne.n	59c6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    59de:	sub.w	r4, r3, #128	; 0x80
    59e2:	ldr	r1, [pc, #56]	; (5a1c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    59e4:	cmp	r4, r1
    59e6:	bhi.n	5a16 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    59e8:	sub.w	r1, r3, #55296	; 0xd800
    59ec:	cmp.w	r1, #2048	; 0x800
    59f0:	bcc.n	5a16 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    59f2:	str	r3, [r2, #0]
    return str + n;
    59f4:	b.n	59ae <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    59f6:	and.w	r0, r3, #240	; 0xf0
    59fa:	cmp	r0, #224	; 0xe0
    59fc:	bne.n	5a06 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    59fe:	and.w	r3, r3, #15
      n = 3;
    5a02:	movs	r4, #3
    5a04:	b.n	59be <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    5a06:	and.w	r0, r3, #248	; 0xf8
    5a0a:	cmp	r0, #240	; 0xf0
    5a0c:	bne.n	5a16 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    5a0e:	and.w	r3, r3, #7
      n = 4;
    5a12:	movs	r4, #4
    5a14:	b.n	59be <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    5a16:	movs	r0, #0
    5a18:	b.n	59ae <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    5a1a:	nop
    5a1c:	.word	0x0010ff7f

00005a20 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    5a20:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    5a22:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    5a24:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    5a26:	lsls	r2, r3, #31
    5a28:	bpl.n	5a6a <FsCache::sync()+0x4a>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    5a2a:	ldr	r0, [r0, #4]
    5a2c:	add.w	r2, r4, #16
    5a30:	ldr	r1, [r4, #12]
    5a32:	ldr	r3, [r0, #0]
    5a34:	str	r2, [sp, #4]
    5a36:	ldr	r3, [r3, #36]	; 0x24
    5a38:	blx	r3
    5a3a:	ldr	r2, [sp, #4]
    5a3c:	mov	r5, r0
    5a3e:	cbnz	r0, 5a48 <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    5a40:	movs	r5, #0
}
    5a42:	mov	r0, r5
    5a44:	add	sp, #8
    5a46:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5a48:	ldrb	r3, [r4, #0]
    5a4a:	lsls	r3, r3, #30
    5a4c:	bmi.n	5a58 <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    5a4e:	ldrb	r3, [r4, #0]
    5a50:	bic.w	r3, r3, #1
    5a54:	strb	r3, [r4, #0]
    5a56:	b.n	5a42 <FsCache::sync()+0x22>
      uint32_t sector = m_sector + m_mirrorOffset;
    5a58:	adds	r0, r4, #4
    5a5a:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    5a5c:	ldr	r3, [r0, #0]
    5a5e:	add	r1, r6
    5a60:	ldr	r3, [r3, #36]	; 0x24
    5a62:	blx	r3
    5a64:	cmp	r0, #0
    5a66:	bne.n	5a4e <FsCache::sync()+0x2e>
    5a68:	b.n	5a40 <FsCache::sync()+0x20>
  return true;
    5a6a:	movs	r5, #1
    5a6c:	b.n	5a42 <FsCache::sync()+0x22>

00005a6e <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    5a6e:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    5a70:	push	{r4, r5, r6, lr}
    5a72:	mov	r4, r0
    5a74:	mov	r6, r1
    5a76:	mov	r5, r2
  if (!m_blockDev) {
    5a78:	cbnz	r3, 5a7e <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    5a7a:	movs	r0, #0
}
    5a7c:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    5a7e:	ldr	r3, [r0, #12]
    5a80:	cmp	r3, r1
    5a82:	beq.n	5a96 <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    5a84:	bl	5a20 <FsCache::sync()>
    5a88:	cmp	r0, #0
    5a8a:	beq.n	5a7a <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    5a8c:	lsls	r3, r5, #29
    5a8e:	bpl.n	5aa6 <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    5a90:	movs	r3, #0
    m_sector = sector;
    5a92:	str	r6, [r4, #12]
    m_status = 0;
    5a94:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    5a96:	ldrb	r3, [r4, #0]
    5a98:	and.w	r5, r5, #3
    5a9c:	mov	r0, r4
    5a9e:	orrs	r3, r5
    5aa0:	strb.w	r3, [r0], #16
  return m_buffer;
    5aa4:	b.n	5a7c <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    5aa6:	ldr	r0, [r4, #4]
    5aa8:	add.w	r2, r4, #16
    5aac:	mov	r1, r6
    5aae:	ldr	r3, [r0, #0]
    5ab0:	ldr	r3, [r3, #16]
    5ab2:	blx	r3
    5ab4:	cmp	r0, #0
    5ab6:	bne.n	5a90 <FsCache::prepare(unsigned long, unsigned char)+0x22>
    5ab8:	b.n	5a7a <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

00005abc <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    5abc:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    5abe:	push	{r4, r5, lr}
  if (chr < 127) {
    5ac0:	bhi.n	5b12 <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    5ac2:	sub.w	r3, r0, #97	; 0x61
    5ac6:	cmp	r3, #25
    5ac8:	ite	hi
    5aca:	movhi	r3, #0
    5acc:	movls	r3, #1
    5ace:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    5ad2:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    5ad4:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    5ad6:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    5ada:	ldrh.w	r5, [r1, r2, lsl #2]
    5ade:	cmp	r5, r0
    mid = left + (right - left)/2;
    5ae0:	ite	hi
    5ae2:	movhi	r4, r2
    5ae4:	movls	r3, r2
  while (right - left > 1) {
    5ae6:	subs	r2, r4, r3
    5ae8:	cmp	r2, #1
    5aea:	bhi.n	5ad6 <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    5aec:	uxth	r2, r3
    5aee:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    5af2:	cmp	r0, r3
    5af4:	bcc.n	5b52 <toUpcase(unsigned short)+0x96>
    5af6:	add.w	r1, r1, r2, lsl #2
    5afa:	subs	r3, r0, r3
    5afc:	ldrb	r2, [r1, #3]
    5afe:	cmp	r3, r2
    5b00:	bge.n	5b52 <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    5b02:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    5b06:	cmp	r2, #1
    5b08:	bne.n	5b1a <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    5b0a:	and.w	r3, r3, #1
    5b0e:	subs	r3, r0, r3
    5b10:	b.n	5ad2 <toUpcase(unsigned short)+0x16>
  size_t right = size;
    5b12:	movs	r4, #53	; 0x35
  size_t left = 0;
    5b14:	movs	r3, #0
    5b16:	ldr	r1, [pc, #68]	; (5b5c <toUpcase(unsigned short)+0xa0>)
    5b18:	b.n	5ae6 <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    5b1a:	cbz	r2, 5b24 <toUpcase(unsigned short)+0x68>
    5b1c:	uxth	r2, r2
    5b1e:	add	r2, r0
    5b20:	uxth	r0, r2
    5b22:	b.n	5ad4 <toUpcase(unsigned short)+0x18>
    5b24:	movw	r2, #58272	; 0xe3a0
    5b28:	b.n	5b1e <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    5b2a:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    5b2e:	ldrh.w	r5, [r1, r2, lsl #2]
    5b32:	cmp	r5, r0
    mid = left + (right - left)/2;
    5b34:	ite	hi
    5b36:	movhi	r4, r2
    5b38:	movls	r3, r2
  while (right - left > 1) {
    5b3a:	subs	r2, r4, r3
    5b3c:	cmp	r2, #1
    5b3e:	bhi.n	5b2a <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    5b40:	uxth	r3, r3
    5b42:	ldrh.w	r2, [r1, r3, lsl #2]
    5b46:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    5b48:	itt	eq
    5b4a:	addeq.w	r1, r1, r3, lsl #2
    5b4e:	ldrheq	r0, [r1, #2]
    5b50:	b.n	5ad4 <toUpcase(unsigned short)+0x18>
    5b52:	movs	r4, #75	; 0x4b
    5b54:	movs	r3, #0
    5b56:	ldr	r1, [pc, #8]	; (5b60 <toUpcase(unsigned short)+0xa4>)
    5b58:	b.n	5b3a <toUpcase(unsigned short)+0x7e>
    5b5a:	nop
    5b5c:	.word	0x20007a20
    5b60:	.word	0x200078bc

00005b64 <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    5b64:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    5b66:	push	{r0, r1, r4, lr}
    5b68:	mov	r4, r0
  if (ls) {
    5b6a:	cbz	r3, 5b76 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    5b6c:	movs	r2, #0
    5b6e:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    5b70:	mov	r0, r3
    5b72:	add	sp, #8
    5b74:	pop	{r4, pc}
  } else if (next >= end) {
    5b76:	ldrd	r0, r1, [r0, #4]
    5b7a:	cmp	r0, r1
    5b7c:	bcs.n	5b70 <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    5b7e:	add	r2, sp, #4
    5b80:	bl	5998 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    5b84:	cbnz	r0, 5b8c <FsName::get16()+0x28>
  return 0XFFFF;
    5b86:	movw	r3, #65535	; 0xffff
    5b8a:	b.n	5b70 <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    5b8c:	ldr	r2, [sp, #4]
    next = ptr;
    5b8e:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    5b90:	cmp.w	r2, #65536	; 0x10000
      rtn = cp;
    5b94:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    5b96:	bcc.n	5b70 <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    5b98:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5b9c:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    5b9e:	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5ba2:	sub.w	r2, r2, #10304	; 0x2840
      ls = FsUtf::lowSurrogate(cp);
    5ba6:	strh	r3, [r4, #12]
    5ba8:	uxth	r3, r2
    5baa:	b.n	5b70 <FsName::get16()+0xc>

00005bac <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    5bac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bb0:	mov	r6, r2
    5bb2:	mov	r5, r1
    5bb4:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    5bb8:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5bba:	ldrh.w	r4, [r5, #2]!
    5bbe:	cbnz	r3, 5bd2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    5bc0:	ldrd	r2, r3, [r6, #4]
    5bc4:	cmp	r2, r3
    5bc6:	bne.n	5bd2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
      return u == 0;
    5bc8:	clz	r0, r4
    5bcc:	lsrs	r0, r0, #5
}
    5bce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    5bd2:	mov	r0, r6
    5bd4:	bl	5b64 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    5bd8:	bl	5abc <toUpcase(unsigned short)>
    5bdc:	mov	r7, r0
    5bde:	mov	r0, r4
    5be0:	bl	5abc <toUpcase(unsigned short)>
    5be4:	cmp	r7, r0
    5be6:	bne.n	5bf0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    5be8:	cmp	r5, r8
    5bea:	bne.n	5bb8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    5bec:	movs	r0, #1
    5bee:	b.n	5bce <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    5bf0:	movs	r0, #0
    5bf2:	b.n	5bce <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

00005bf4 <ExFatFile::getName8(char*, unsigned int)>:
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    5bf4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    5bf8:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    5bfc:	mov	sl, r0
    5bfe:	mov	r8, r1
  if (!isOpen()) {
    5c00:	cmp	r3, #0
    5c02:	beq.n	5c96 <ExFatFile::getName8(char*, unsigned int)+0xa2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5c04:	subs	r2, #1
  char* str = name;
    5c06:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5c08:	mov.w	r9, #2
  uint16_t hs = 0;
    5c0c:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5c0e:	adds	r7, r1, r2
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5c10:	ldrb.w	r3, [sl, #48]	; 0x30
    5c14:	cmp	r3, r9
    5c16:	bcc.n	5c80 <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    5c18:	movs	r2, #0
    5c1a:	mov	r1, r9
    5c1c:	mov	r0, sl
    5c1e:	bl	5d06 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    5c22:	cbz	r0, 5c96 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5c24:	ldrb	r3, [r0, #0]
    5c26:	cmp	r3, #193	; 0xc1
    5c28:	bne.n	5c96 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5c2a:	mov	r6, r0
    5c2c:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5c30:	ldr	r3, [pc, #108]	; (5ca0 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    5c32:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    5c36:	cbz	r5, 5c70 <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    5c38:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    5c3c:	uxth	r2, r2
    5c3e:	cmp.w	r2, #1024	; 0x400
    5c42:	bcs.n	5c96 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5c44:	and.w	r5, r3, r5, lsl #10
    5c48:	ubfx	r0, r0, #0, #10
    5c4c:	orrs	r0, r5
    5c4e:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5c52:	mov	r1, r4
    5c54:	mov	r2, r7
    5c56:	bl	5904 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    5c5a:	mov	r4, r0
    5c5c:	cbz	r0, 5c96 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5c5e:	movs	r5, #0
    5c60:	ldr	r3, [pc, #60]	; (5ca0 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    for (uint8_t in = 0; in < 15; in++) {
    5c62:	cmp	fp, r6
    5c64:	bne.n	5c32 <ExFatFile::getName8(char*, unsigned int)+0x3e>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5c66:	add.w	r9, r9, #1
    5c6a:	uxtb.w	r9, r9
    5c6e:	b.n	5c10 <ExFatFile::getName8(char*, unsigned int)+0x1c>
    return 0XD800 <= c && c <= 0XDFFF;
    5c70:	add.w	r2, r0, #10240	; 0x2800
    5c74:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    5c76:	cmp.w	r2, #2048	; 0x800
    5c7a:	bcc.n	5c8c <ExFatFile::getName8(char*, unsigned int)+0x98>
        if (c == 0) {
    5c7c:	cmp	r0, #0
    5c7e:	bne.n	5c52 <ExFatFile::getName8(char*, unsigned int)+0x5e>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    5c80:	movs	r3, #0
  return str - name;
    5c82:	sub.w	r0, r4, r8
  *str = '\0';
    5c86:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    5c88:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    5c8c:	cmp.w	r2, #1024	; 0x400
    5c90:	bcs.n	5c96 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5c92:	mov	r5, r0
    5c94:	b.n	5c62 <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    5c96:	movs	r0, #0
    5c98:	strb.w	r0, [r8]
  return 0;
    5c9c:	b.n	5c88 <ExFatFile::getName8(char*, unsigned int)+0x94>
    5c9e:	nop
    5ca0:	.word	0x000ffc00

00005ca4 <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    5ca4:	movs	r0, #0
    next = begin;
    5ca6:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    5ca8:	push	{r4, r5, r6, lr}
    5caa:	mov	r4, r1
  uint16_t hash = 0;
    5cac:	mov	r6, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    5cae:	movw	r5, #65535	; 0xffff
    5cb2:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    5cb4:	strh	r0, [r1, #12]
    return !ls && next == end;
    5cb6:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    5cb8:	str	r0, [r4, #16]
    5cba:	cbnz	r3, 5cf8 <ExFatFile::hashName(ExName_t*)+0x54>
    5cbc:	ldrd	r2, r3, [r4, #4]
    5cc0:	cmp	r2, r3
    5cc2:	bne.n	5cf8 <ExFatFile::hashName(ExName_t*)+0x54>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    5cc4:	subs	r0, #1
  fname->nameHash = hash;
    5cc6:	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    5cc8:	cmp	r0, #254	; 0xfe
    5cca:	ite	hi
    5ccc:	movhi	r0, #0
    5cce:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    5cd0:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    5cd2:	bl	5abc <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5cd6:	lsls	r3, r6, #15
    5cd8:	orr.w	r3, r3, r6, lsr #1
    5cdc:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5ce0:	lsrs	r0, r0, #8
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5ce2:	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5ce4:	ubfx	r3, r3, #1, #15
    5ce8:	orr.w	r3, r3, r2, lsl #15
    5cec:	uxtah	r3, r0, r3
    fname->nameLength++;
    5cf0:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5cf2:	uxth	r6, r3
    fname->nameLength++;
    5cf4:	adds	r0, #1
    5cf6:	b.n	5cb6 <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    5cf8:	mov	r0, r4
    5cfa:	bl	5b64 <FsName::get16()>
    if (u == 0XFFFF) {
    5cfe:	cmp	r0, r5
    5d00:	bne.n	5cd2 <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    5d02:	movs	r0, #0
    5d04:	b.n	5cd0 <ExFatFile::hashName(ExName_t*)+0x2c>

00005d06 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5d06:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    5d08:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5d0c:	sub	sp, #20
    5d0e:	mov	r4, r0
    5d10:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    5d12:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5d14:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    5d16:	ldmia.w	r3, {r0, r1, r2}
    5d1a:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    5d1e:	lsls	r2, r7, #5
    5d20:	mov	r1, r5
    5d22:	ldr	r0, [r4, #32]
    5d24:	bl	66ba <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5d28:	cmp	r0, #1
    5d2a:	bne.n	5d3a <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    5d2c:	mov	r2, r6
    5d2e:	mov	r1, r5
    5d30:	ldr	r0, [r4, #32]
    5d32:	bl	6620 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    5d36:	add	sp, #20
    5d38:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    5d3a:	movs	r0, #0
    5d3c:	b.n	5d36 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

00005d3e <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    5d3e:	push	{r4, lr}
    5d40:	mov	r4, r0
  bool rtn = sync();
    5d42:	bl	6bdc <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    5d46:	movs	r3, #0
    5d48:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    5d4c:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    5d50:	pop	{r4, pc}

00005d52 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5d52:	push	{r3, r4, r5, lr}
    5d54:	mov	r5, r1
  if (isOpen()) {
    5d56:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5d5a:	mov	r4, r0
  if (isOpen()) {
    5d5c:	cbnz	r1, 5d74 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    5d5e:	movs	r2, #56	; 0x38
    5d60:	bl	a528 <memset>
  m_attributes = FILE_ATTR_ROOT;
    5d64:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    5d66:	movs	r0, #1
  m_vol = vol;
    5d68:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    5d6a:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    5d6e:	strb.w	r0, [r4, #51]	; 0x33
  return true;

 fail:
  return false;
}
    5d72:	pop	{r3, r4, r5, pc}
  return false;
    5d74:	movs	r0, #0
    5d76:	b.n	5d72 <ExFatFile::openRoot(ExFatVolume*)+0x20>

00005d78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    5d78:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    5d7a:	mov	r5, r1
    5d7c:	ldrb.w	r4, [r1], #1
    5d80:	cmp	r4, #32
    5d82:	beq.n	5d7a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    5d84:	ldr	r7, [pc, #108]	; (5df4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    5d86:	str	r5, [r2, #0]
  fname->end = path;
    5d88:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    5d8a:	mov	r6, r5
    5d8c:	ldrb.w	r4, [r6], #1
    5d90:	cbz	r4, 5d96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5d92:	cmp	r4, #47	; 0x2f
    5d94:	bne.n	5dae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    5d96:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    5d98:	ldrb.w	r1, [r5], #1
    5d9c:	cmp	r1, #32
    5d9e:	beq.n	5d96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5da0:	cmp	r1, #47	; 0x2f
    5da2:	beq.n	5d96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    5da4:	str	r4, [r3, #0]
  return hashName(fname);
    5da6:	mov	r1, r2

 fail:
  return false;
}
    5da8:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    5daa:	b.w	5ca4 <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    5dae:	cmp	r4, #60	; 0x3c
    5db0:	bhi.n	5dd8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    5db2:	cmp	r4, #33	; 0x21
    5db4:	bhi.n	5dc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    5db6:	subs	r1, r4, #1
    5db8:	cmp	r1, #30
    5dba:	bls.n	5dd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    if (c != '.' && c != ' ') {
    5dbc:	cmp	r4, #32
    5dbe:	bne.n	5de4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
                            ExName_t* fname, const char** ptr) {
    5dc0:	mov	r5, r6
    5dc2:	b.n	5d8a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    5dc4:	sub.w	r1, r4, #34	; 0x22
    5dc8:	uxtb	r1, r1
    5dca:	lsr.w	r1, r7, r1
    5dce:	lsls	r1, r1, #31
    5dd0:	bpl.n	5dee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
}
    5dd2:	movs	r0, #0
    5dd4:	pop	{r4, r5, r6, r7}
    5dd6:	bx	lr
    5dd8:	cmp	r4, #92	; 0x5c
    5dda:	beq.n	5dd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    5ddc:	bhi.n	5de8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    5dde:	subs	r4, #62	; 0x3e
    5de0:	cmp	r4, #1
    5de2:	bls.n	5dd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
      fname->end = path;
    5de4:	str	r6, [r2, #8]
    5de6:	b.n	5dc0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5de8:	cmp	r4, #124	; 0x7c
    5dea:	beq.n	5dd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    5dec:	b.n	5de4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    if (c != '.' && c != ' ') {
    5dee:	cmp	r4, #46	; 0x2e
    5df0:	b.n	5dbe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    5df2:	nop
    5df4:	.word	0x05002101

00005df8 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    5df8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dfc:	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    5e00:	ldrb.w	r3, [r0, #51]	; 0x33
    5e04:	sub	sp, #12
    5e06:	mov	r4, r0
    5e08:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    5e0a:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    5e0c:	mov	r6, r2
  if (!isReadable()) {
    5e0e:	bpl.n	5ed8 <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5e10:	lsls	r0, r3, #25
    5e12:	bmi.n	5e1c <ExFatFile::read(void*, unsigned int)+0x24>
    5e14:	ldrb.w	r3, [r4, #49]	; 0x31
    5e18:	lsls	r1, r3, #28
    5e1a:	bpl.n	5e34 <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    5e1c:	ldrd	r2, r3, [r4]
    5e20:	ldrd	r1, r0, [r4, #16]
    5e24:	adds	r5, r6, r2
    5e26:	adc.w	r3, r3, #0
    5e2a:	cmp	r1, r5
    5e2c:	sbcs.w	r3, r0, r3
    5e30:	bcs.n	5e34 <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    5e32:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e34:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5e38:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e3a:	vmov	s16, r3
    5e3e:	b.n	5f24 <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5e40:	ldr	r0, [r4, #32]
    5e42:	ldrd	r3, r2, [r4]
    5e46:	ldr.w	r7, [r0, #1080]	; 0x438
    5e4a:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5e4c:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    5e50:	cbnz	r7, 5e66 <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    5e52:	orrs	r3, r2
    5e54:	bne.n	5eb0 <ExFatFile::read(void*, unsigned int)+0xb8>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5e56:	ldrb.w	r3, [r4, #49]	; 0x31
    5e5a:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5e5c:	ite	mi
    5e5e:	ldrmi.w	r3, [r0, #1076]	; 0x434
    5e62:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    5e64:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    5e66:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5e6a:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5e6c:	ldr	r2, [r4, #24]
    5e6e:	ldrb.w	r1, [fp, #1093]	; 0x445
    5e72:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    5e74:	ldr.w	r2, [fp, #1068]	; 0x42c
    5e78:	lsls	r5, r1
    5e7a:	add.w	r5, r5, r7, lsr #9
    5e7e:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    5e80:	cmp.w	sl, #0
    5e84:	bne.n	5eea <ExFatFile::read(void*, unsigned int)+0xf2>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5e86:	cmp.w	r8, #512	; 0x200
    5e8a:	bcc.n	5eea <ExFatFile::read(void*, unsigned int)+0xf2>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5e8c:	ldr.w	r2, [fp, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5e90:	cmp	r5, r2
    5e92:	beq.n	5eea <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5e94:	cmp.w	r8, #1024	; 0x400
    5e98:	bcs.n	5f38 <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    5e9a:	ldr.w	r0, [fp, #532]	; 0x214
    5e9e:	mov	r2, r9
    5ea0:	mov	r1, r5
    5ea2:	ldr	r3, [r0, #0]
    5ea4:	ldr	r3, [r3, #16]
    5ea6:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5ea8:	cbz	r0, 5ed8 <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    5eaa:	mov.w	r7, #512	; 0x200
    5eae:	b.n	5f10 <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    5eb0:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    5eb4:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    5eb6:	lsls	r3, r3, #25
    5eb8:	bpl.n	5ec0 <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    5eba:	adds	r1, #1
    5ebc:	str	r1, [r4, #24]
    5ebe:	b.n	5e66 <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5ec0:	vmov	r2, s16
    5ec4:	bl	6654 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    5ec8:	cmp	r0, #0
    5eca:	blt.n	5ed8 <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    5ecc:	bne.n	5e66 <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    5ece:	ldrb.w	r3, [r4, #49]	; 0x31
    5ed2:	tst.w	r3, #80	; 0x50
    5ed6:	bne.n	5f2a <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    5ed8:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    5edc:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    5ee0:	orr.w	r3, r3, #2
    5ee4:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    5ee8:	b.n	5f2e <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    5eea:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    5eee:	movs	r2, #0
    5ef0:	mov	r1, r5
    5ef2:	add.w	r0, fp, #528	; 0x210
    5ef6:	cmp	r7, r8
    5ef8:	it	cs
    5efa:	movcs	r7, r8
    5efc:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5f00:	cmp	r0, #0
    5f02:	beq.n	5ed8 <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    5f04:	add.w	r1, r0, sl
    5f08:	mov	r2, r7
    5f0a:	mov	r0, r9
    5f0c:	bl	a56c <memcpy>
    dst += n;
    5f10:	add	r9, r7
    toRead -= n;
    5f12:	sub.w	r8, r8, r7
    m_curPosition += n;
    5f16:	ldrd	r3, r2, [r4]
    5f1a:	adds	r3, r3, r7
    5f1c:	adc.w	r2, r2, #0
    5f20:	strd	r3, r2, [r4]
  while (toRead) {
    5f24:	cmp.w	r8, #0
    5f28:	bne.n	5e40 <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    5f2a:	sub.w	r0, r6, r8
}
    5f2e:	add	sp, #12
    5f30:	vpop	{d8}
    5f34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5f38:	movs	r3, #1
    5f3a:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5f3c:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5f40:	subs	r3, r3, r0
    5f42:	cmp	r3, r1
    5f44:	it	cs
    5f46:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    5f48:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    5f4a:	mov.w	r7, r3, lsl #9
    5f4e:	bls.n	5f66 <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    5f50:	ldr.w	r0, [fp, #532]	; 0x214
    5f54:	mov	r1, r5
    5f56:	ldr	r2, [r0, #0]
    5f58:	ldr.w	fp, [r2, #20]
    5f5c:	mov	r2, r9
    5f5e:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5f60:	cmp	r0, #0
    5f62:	bne.n	5f10 <ExFatFile::read(void*, unsigned int)+0x118>
    5f64:	b.n	5ed8 <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    5f66:	adds	r1, r5, r3
    5f68:	cmp	r2, r1
    5f6a:	bcs.n	5f50 <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    5f6c:	add.w	r0, fp, #528	; 0x210
    5f70:	str	r3, [sp, #4]
    5f72:	bl	5a20 <FsCache::sync()>
    5f76:	ldr	r3, [sp, #4]
    5f78:	cmp	r0, #0
    5f7a:	bne.n	5f50 <ExFatFile::read(void*, unsigned int)+0x158>
    5f7c:	b.n	5ed8 <ExFatFile::read(void*, unsigned int)+0xe0>

00005f7e <ExFatFile::peek()>:
int ExFatFile::peek() {
    5f7e:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5f80:	movs	r2, #1
    5f82:	add.w	r1, sp, #7
    5f86:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    5f88:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    5f8a:	ldrd	r6, r7, [r0]
    5f8e:	bl	5df8 <ExFatFile::read(void*, unsigned int)>
    5f92:	cmp	r0, #1
  m_curCluster = curCluster;
    5f94:	str	r5, [r4, #24]
    5f96:	ite	eq
    5f98:	ldrbeq.w	r0, [sp, #7]
    5f9c:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    5fa0:	strd	r6, r7, [r4]
}
    5fa4:	add	sp, #12
    5fa6:	pop	{r4, r5, r6, r7, pc}

00005fa8 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    5fa8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    5fac:	ldrb.w	ip, [r0, #49]	; 0x31
    5fb0:	mov	r4, r0
    5fb2:	mov	r6, r2
    5fb4:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5fb6:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    5fba:	cmp.w	ip, #0
    5fbe:	beq.n	6078 <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5fc0:	ldrd	r0, r3, [r0]
    5fc4:	cmp	r3, r7
    5fc6:	it	eq
    5fc8:	cmpeq	r0, r2
    5fca:	beq.n	5fda <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    5fcc:	orrs.w	r2, r6, r7
    5fd0:	bne.n	5fde <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    5fd2:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    5fd4:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    5fd6:	strd	r6, r7, [r4]
    return true;
    5fda:	movs	r0, #1
    5fdc:	b.n	607e <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    5fde:	tst.w	ip, #8
    5fe2:	beq.n	5fee <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    5fe4:	ldrd	r1, r2, [r4, #16]
    5fe8:	cmp	r1, r6
    5fea:	sbcs	r2, r7
    5fec:	bcc.n	6078 <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    5fee:	ldr.w	lr, [r4, #32]
    5ff2:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5ff4:	ldrb.w	r1, [lr, #1093]	; 0x445
    5ff8:	adc.w	sl, r7, #4294967295
    5ffc:	adds	r1, #9
    5ffe:	uxtb	r1, r1
    6000:	rsb	r9, r1, #32
    6004:	sub.w	r2, r1, #32
    6008:	lsrs	r5, r1
    600a:	lsl.w	r9, sl, r9
    600e:	lsr.w	r2, sl, r2
    6012:	sub.w	sl, r1, #32
    6016:	orr.w	r5, r5, r9
    601a:	rsb	r9, r1, #32
    601e:	orrs	r5, r2
  if (isContiguous()) {
    6020:	ldrb.w	r2, [r4, #51]	; 0x33
    6024:	tst.w	r2, #64	; 0x40
    6028:	beq.n	6030 <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    602a:	ldr	r3, [r4, #28]
    602c:	add	r3, r5
    602e:	b.n	5fd4 <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    6030:	adds.w	fp, r0, #4294967295
    6034:	adc.w	r2, r3, #4294967295
    6038:	lsr.w	r1, fp, r1
    603c:	lsl.w	r9, r2, r9
    6040:	lsr.w	r2, r2, sl
    6044:	orr.w	r1, r1, r9
    6048:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    604a:	cmp	r5, r1
    604c:	bcc.n	6052 <ExFatFile::seekSet(unsigned long long)+0xaa>
    604e:	orrs	r3, r0
    6050:	bne.n	6082 <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    6052:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    6056:	ite	ne
    6058:	ldrne.w	r3, [lr, #1076]	; 0x434
    605c:	ldreq	r3, [r4, #28]
    605e:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6060:	add.w	r9, r4, #24
  while (nNew--) {
    6064:	cmp	r5, #0
    6066:	beq.n	5fd6 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6068:	mov	r2, r9
    606a:	ldr	r1, [r4, #24]
    606c:	ldr	r0, [r4, #32]
    606e:	subs	r5, #1
    6070:	bl	6654 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    6074:	cmp	r0, #0
    6076:	bgt.n	6064 <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    6078:	movs	r0, #0
  m_curCluster = tmp;
    607a:	str.w	r8, [r4, #24]
}
    607e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    6082:	subs	r5, r5, r1
    6084:	b.n	6060 <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

00006088 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    6088:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    608c:	mov	sl, r3
    608e:	ldrb.w	r3, [r0, #49]	; 0x31
    6092:	sub	sp, #52	; 0x34
    6094:	mov	r4, r0
    6096:	mov	r6, r1
    6098:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    609a:	cmp	r3, #0
    609c:	bne.n	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    609e:	ldrb.w	r3, [r1, #49]	; 0x31
    60a2:	tst.w	r3, #80	; 0x50
    60a6:	beq.n	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    60a8:	and.w	r9, sl, #3
    60ac:	cmp.w	r9, #3
    60b0:	beq.n	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    60b2:	add.w	r9, r9, #1
    60b6:	and.w	r3, sl, #8
    60ba:	orr.w	r9, r9, r3
  if (fname) {
    60be:	cmp	r2, #0
    60c0:	beq.n	6134 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    60c2:	ldr	r7, [r2, #16]
    60c4:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    60c6:	movs	r2, #0
    60c8:	mov	r0, r1
    60ca:	adds	r7, #14
    60cc:	udiv	r7, r7, r3
    60d0:	adds	r7, #2
    60d2:	movs	r3, #0
    60d4:	uxtb	r7, r7
    60d6:	bl	5fa8 <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    60da:	mov.w	fp, #0
    60de:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    60e0:	movs	r2, #32
    60e2:	add	r1, sp, #16
    60e4:	mov	r0, r6
    60e6:	bl	5df8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    60ea:	cmp	r0, #0
    60ec:	beq.w	6276 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    60f0:	cmp	r0, #32
    60f2:	bne.n	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    60f4:	ldrsb.w	r1, [sp, #16]
    60f8:	ldrb.w	r2, [sp, #16]
    60fc:	cmp	r1, #0
    60fe:	blt.n	613e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    6100:	cmp.w	fp, #0
    6104:	bne.n	6112 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    6106:	ldr	r1, [r6, #0]
    6108:	sub.w	r3, r1, #32
    610c:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    610e:	ldr	r3, [r6, #24]
    6110:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    6112:	cmp	fp, r7
        freeCount++;
    6114:	itt	cc
    6116:	addcc.w	r3, fp, #1
    611a:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    611e:	cbnz	r2, 6138 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    6120:	cmp	r5, #0
    6122:	bne.w	6276 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    6126:	mov.w	r8, #0
    612a:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    612e:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    6132:	b.n	620a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    6134:	movs	r7, #3
    6136:	b.n	60da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    6138:	movs	r0, #0
    613a:	mov	r8, r0
    613c:	b.n	60e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    613e:	cmp.w	r8, #0
    6142:	bne.n	6194 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    6144:	cmp	fp, r7
    6146:	it	cc
    6148:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    614c:	cmp	r2, #133	; 0x85
    614e:	bne.n	6138 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    6150:	movs	r2, #56	; 0x38
    6152:	mov	r1, r8
    6154:	mov	r0, r4
    6156:	bl	a528 <memset>
      m_setCount = dirFile->setCount;
    615a:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    615e:	ldrb.w	r1, [sp, #20]
      inSet = true;
    6162:	movs	r0, #1
      m_setCount = dirFile->setCount;
    6164:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    6168:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    616c:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    616e:	it	pl
    6170:	orrpl.w	r2, r2, #8
    6174:	strb.w	r2, [r4, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    6178:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    617a:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    617c:	ldr	r2, [r6, #24]
    617e:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    6180:	ldr	r2, [r6, #0]
    6182:	subs	r2, #32
    6184:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6186:	ldrb.w	r2, [r6, #51]	; 0x33
    618a:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    618e:	strb.w	r2, [r4, #44]	; 0x2c
    6192:	b.n	613a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    6194:	cmp	r2, #192	; 0xc0
    6196:	bne.n	623a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    6198:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    619c:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    61a0:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    61a2:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    61a6:	it	mi
    61a8:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    61ac:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    61b0:	it	mi
    61b2:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    61b6:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    61b8:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    61bc:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    61be:	strd	r0, r1, [r4, #8]
      if (!fname) {
    61c2:	cbnz	r5, 6212 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    61c4:	tst.w	sl, #2048	; 0x800
    61c8:	bne.n	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    61ca:	tst.w	sl, #17408	; 0x4400
    61ce:	bne.n	61d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    61d0:	ldrb.w	r3, [r4, #51]	; 0x33
    61d4:	lsls	r0, r3, #30
    61d6:	bpl.n	61e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    61d8:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    61dc:	lsls	r1, r3, #27
    61de:	bmi.n	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    61e0:	lsls	r2, r3, #31
    61e2:	bmi.n	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    61e4:	tst.w	sl, #1024	; 0x400
    61e8:	beq.n	6264 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    61ea:	ldrb.w	r3, [r4, #51]	; 0x33
    61ee:	lsls	r3, r3, #30
    61f0:	bpl.n	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    61f2:	movs	r2, #0
    61f4:	movs	r3, #0
    61f6:	mov	r0, r4
    61f8:	bl	5fa8 <ExFatFile::seekSet(unsigned long long)>
    61fc:	cmp	r0, #0
    61fe:	beq.n	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    6200:	mov	r0, r4
    6202:	bl	6e68 <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    6206:	cmp	r0, #0
    6208:	beq.n	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    620a:	mov	r0, r8
    620c:	add	sp, #52	; 0x34
    620e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    6212:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    6214:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    6218:	ldr	r1, [r5, #16]
    next = begin;
    621a:	str	r2, [r5, #4]
    621c:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    6220:	strh	r3, [r5, #12]
    6222:	cmp	r1, r2
    6224:	bne.n	6138 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    6226:	ldrh	r0, [r5, #20]
    6228:	ldrh.w	r2, [sp, #20]
    622c:	sub.w	ip, r0, r2
    6230:	rsbs	r0, ip, #0
    6234:	adc.w	r0, r0, ip
    6238:	b.n	613a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    623a:	cmp	r2, #193	; 0xc1
    623c:	bne.w	6138 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    6240:	mov	r2, r5
    6242:	add	r1, sp, #16
    6244:	mov	r0, r4
    6246:	bl	5bac <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    624a:	cmp	r0, #0
    624c:	beq.w	613a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    6250:	ldrh	r2, [r5, #12]
    6252:	cmp	r2, #0
    6254:	bne.w	613a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    6258:	ldrd	r1, r2, [r5, #4]
    625c:	cmp	r1, r2
    625e:	bne.w	613a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    6262:	b.n	61c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    6264:	tst.w	sl, #16384	; 0x4000
    6268:	beq.n	620a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    626a:	mov	r0, r4
    626c:	ldrd	r2, r3, [r4, #16]
    6270:	bl	5fa8 <ExFatFile::seekSet(unsigned long long)>
    6274:	b.n	6206 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    6276:	tst.w	sl, #512	; 0x200
    627a:	beq.w	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    627e:	tst.w	r9, #2
    6282:	beq.w	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    6286:	cmp	r5, #0
    6288:	beq.w	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    628c:	cmp	fp, r7
    628e:	bcc.n	62de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    6290:	movs	r2, #56	; 0x38
    6292:	movs	r1, #0
    6294:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6296:	ldrb.w	r8, [r6, #51]	; 0x33
    629a:	bl	a528 <memset>
  ExFatVolume* volume() const {return m_vol;}
    629e:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    62a0:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    62a4:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    62a8:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    62aa:	movs	r3, #8
  m_dirPos = freePos;
    62ac:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    62b0:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    62b4:	strb.w	r3, [r4, #49]	; 0x31
    ls = 0;  // lowSurrogate
    62b8:	mov.w	r8, #0
  m_dirPos = freePos;
    62bc:	ldr	r3, [sp, #0]
    62be:	str	r3, [r4, #36]	; 0x24
    62c0:	ldr	r3, [sp, #4]
    62c2:	str	r3, [r4, #40]	; 0x28
    next = begin;
    62c4:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    62c6:	strh.w	r8, [r5, #12]
    next = begin;
    62ca:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    62cc:	uxtb.w	fp, r8
    62d0:	cmp	r7, fp
    62d2:	bhi.n	6322 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    62d4:	mov	r0, r4
    62d6:	bl	6bdc <ExFatFile::sync()>
    62da:	mov	r8, r0
    62dc:	b.n	620a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    62de:	movs	r2, #32
    62e0:	add	r1, sp, #16
    62e2:	mov	r0, r6
    62e4:	bl	5df8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    62e8:	cbnz	r0, 6300 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    62ea:	mov	r0, r6
      curCluster = dir->m_curCluster;
    62ec:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    62f0:	bl	6c1e <ExFatFile::addDirCluster()>
    62f4:	cmp	r0, #0
    62f6:	beq.w	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    62fa:	str.w	r8, [r6, #24]
      continue;
    62fe:	b.n	628c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    6300:	cmp	r0, #32
    6302:	bne.w	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    6306:	cmp.w	fp, #0
    630a:	bne.n	6318 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    630c:	ldr	r2, [r6, #0]
    630e:	sub.w	r3, r2, #32
    6312:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    6314:	ldr	r3, [r6, #24]
    6316:	str	r3, [sp, #0]
    freeCount++;
    6318:	add.w	r3, fp, #1
    631c:	uxtb.w	fp, r3
    6320:	b.n	628c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    6322:	movs	r2, #1
    6324:	mov	r1, fp
    6326:	mov	r0, r4
    6328:	bl	5d06 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    632c:	mov	r6, r0
    632e:	cmp	r0, #0
    6330:	beq.w	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    6334:	ldrsb.w	r2, [r0]
    6338:	cmp	r2, #0
    633a:	blt.w	6126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    633e:	movs	r2, #32
    6340:	movs	r1, #0
    6342:	bl	a528 <memset>
    if (i == 0) {
    6346:	cmp.w	fp, #0
    634a:	bne.n	638e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
      dirFile->type = EXFAT_TYPE_FILE;
    634c:	movs	r3, #133	; 0x85
    634e:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    6350:	ldr	r3, [pc, #128]	; (63d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    6352:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    6356:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    635a:	ldr	r3, [r3, #0]
    635c:	cbz	r3, 6382 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fa>
        FsDateTime::callback(&date, &time, &ms10);
    635e:	add.w	r2, sp, #11
    6362:	add.w	r1, sp, #14
    6366:	add	r0, sp, #12
    6368:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    636a:	ldrh.w	r3, [sp, #12]
    636e:	strh	r3, [r6, #10]
    6370:	ldrh.w	r3, [sp, #14]
    6374:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    6376:	ldrb.w	r3, [sp, #11]
    637a:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    637c:	add.w	r8, r8, #1
    6380:	b.n	62cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    6382:	movw	r3, #22561	; 0x5821
    6386:	strh	r3, [r6, #10]
    6388:	strh	r3, [r6, #14]
    638a:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    638c:	b.n	637c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    } else if (i == 1) {
    638e:	cmp.w	fp, #1
    6392:	bne.n	63ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x326>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    6394:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    6398:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    639a:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    639e:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    63a0:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    63a4:	ldr	r3, [r5, #16]
    63a6:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    63a8:	ldrh	r3, [r5, #20]
    63aa:	strh	r3, [r6, #4]
}
    63ac:	b.n	637c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      dirName->type = EXFAT_TYPE_NAME;
    63ae:	movs	r3, #193	; 0xc1
    63b0:	add.w	fp, r6, #30
    63b4:	strb	r3, [r6, #0]
    return !ls && next == end;
    63b6:	ldrh	r2, [r5, #12]
    63b8:	cbnz	r2, 63c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33a>
    63ba:	ldrd	r1, r2, [r5, #4]
    63be:	cmp	r1, r2
    63c0:	beq.n	637c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
        uint16_t u = fname->get16();
    63c2:	mov	r0, r5
    63c4:	bl	5b64 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    63c8:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    63cc:	cmp	fp, r6
    63ce:	bne.n	63b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
    63d0:	b.n	637c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    63d2:	nop
    63d4:	.word	0x2000fbfc

000063d8 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    63d8:	push	{r4, r5, r6, r7, lr}
    63da:	mov	r7, r3
    63dc:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    63de:	movs	r3, #0
    63e0:	mov	r5, r0
    63e2:	mov	r4, r1
    63e4:	str	r2, [sp, #4]
    63e6:	str	r3, [sp, #80]	; 0x50
class FsName {
    63e8:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    63ec:	ldrb.w	r3, [r0, #49]	; 0x31
    63f0:	cbz	r3, 63f8 <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    63f2:	movs	r0, #0
}
    63f4:	add	sp, #92	; 0x5c
    63f6:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    63f8:	ldrb.w	r1, [r1, #49]	; 0x31
    63fc:	tst.w	r1, #80	; 0x50
    6400:	beq.n	63f2 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    6402:	ldrb	r1, [r2, #0]
    6404:	cmp	r1, #47	; 0x2f
    6406:	bne.n	6442 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    6408:	mov	r0, r2
    while (isDirSeparator(*path)) {
    640a:	ldrb.w	r1, [r2], #1
    640e:	cmp	r1, #47	; 0x2f
    6410:	beq.n	6424 <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    6412:	cbz	r3, 6416 <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    6414:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    6416:	ldr	r4, [r4, #32]
    if (*path == 0) {
    6418:	cbnz	r1, 6428 <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    641a:	mov	r1, r4
    641c:	mov	r0, r5
    641e:	bl	5d52 <ExFatFile::openRoot(ExFatVolume*)>
    6422:	b.n	63f4 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    6424:	movs	r3, #1
    6426:	b.n	6408 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    6428:	movs	r2, #56	; 0x38
    642a:	movs	r1, #0
    642c:	add	r0, sp, #32
    642e:	bl	a528 <memset>
  m_attributes = FILE_ATTR_ROOT;
    6432:	movs	r3, #64	; 0x40
  m_vol = vol;
    6434:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    6436:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    6438:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    643c:	movs	r3, #1
    643e:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    6442:	add	r3, sp, #4
    6444:	add	r2, sp, #8
    6446:	ldr	r1, [sp, #4]
    6448:	mov	r0, r5
    644a:	bl	5d78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    644e:	cmp	r0, #0
    6450:	beq.n	63f2 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    6452:	ldr	r3, [sp, #4]
    6454:	ldrb	r3, [r3, #0]
    6456:	cbz	r3, 6490 <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    6458:	movs	r3, #0
    645a:	add	r2, sp, #8
    645c:	mov	r1, r4
    645e:	mov	r0, r5
    6460:	bl	6088 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6464:	cmp	r0, #0
    6466:	beq.n	63f2 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    6468:	add	r6, sp, #32
    646a:	mov	r2, r5
    646c:	add.w	ip, r5, #48	; 0x30
    6470:	mov	r4, r6
    6472:	ldr	r0, [r2, #0]
    6474:	adds	r2, #8
    6476:	ldr.w	r1, [r2, #-4]
    647a:	mov	r3, r6
    647c:	cmp	r2, ip
    647e:	stmia	r3!, {r0, r1}
    6480:	mov	r6, r3
    6482:	bne.n	6472 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    6484:	ldr	r0, [r2, #0]
    6486:	str	r0, [r3, #0]
    close();
    6488:	mov	r0, r5
    648a:	bl	5d3e <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    648e:	b.n	6442 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    6490:	mov	r3, r7
    6492:	add	r2, sp, #8
    6494:	mov	r1, r4
    6496:	mov	r0, r5
    6498:	bl	6088 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    649c:	b.n	63f4 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

0000649e <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    649e:	cbz	r1, 64a8 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    64a0:	add.w	r1, r1, #1096	; 0x448
    64a4:	b.w	63d8 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    64a8:	mov	r0, r1
    64aa:	bx	lr

000064ac <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    64ac:	mov	r3, r2
    64ae:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    64b0:	ldrb.w	r2, [r0, #49]	; 0x31
    64b4:	cbnz	r2, 64d0 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    64b6:	ldrb.w	r2, [r1, #49]	; 0x31
    64ba:	tst.w	r2, #80	; 0x50
    64be:	beq.n	64d0 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    64c0:	ldr	r2, [r1, #0]
    64c2:	ands.w	r2, r2, #31
    64c6:	bne.n	64d0 <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    64c8:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    64cc:	b.w	6088 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    64d0:	movs	r0, #0
    64d2:	ldr.w	r4, [sp], #4
    64d6:	bx	lr

000064d8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    64d8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64dc:	mov	r7, r0
    64de:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    64e0:	mov	sl, r1
    64e2:	cbz	r1, 6518 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    64e4:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    64e6:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    64ea:	movs	r4, #1
    start = 0;
    64ec:	cmp	r3, r5
    64ee:	it	ls
    64f0:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    64f2:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    64f6:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    64fa:	mov	r8, r5
  uint32_t endAlloc = start;
    64fc:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    64fe:	lsls	r4, r3
    6500:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    6502:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    6506:	movs	r2, #0
    6508:	mov	r0, r7
    650a:	add.w	r1, r1, r6, lsr #12
    650e:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6512:	cbnz	r0, 6546 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    6514:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6518:	ldr.w	r5, [r0, #1056]	; 0x420
    651c:	b.n	64e6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    651e:	mov	r8, r6
        if (endAlloc == start) {
    6520:	cmp	r5, r6
    6522:	beq.n	657c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    6524:	ldr.w	r2, [r7, #1072]	; 0x430
    6528:	cmp	r2, r6
    652a:	bls.n	6570 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    652c:	lsls	r4, r4, #1
    652e:	ands.w	r4, r4, #255	; 0xff
    6532:	bne.n	654a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    6534:	add.w	r3, r9, #1
    6538:	movs	r4, #1
    i = 0;
    653a:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    653e:	cmp.w	r3, #512	; 0x200
    6542:	bcs.n	6502 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    6544:	mov	r9, r3
        if (!(mask & cache[i])) {
    6546:	ldrb.w	r3, [r0, r9]
    654a:	tst	r3, r4
        endAlloc++;
    654c:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    6550:	bne.n	651e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    6552:	sub.w	r2, r6, r8
    6556:	cmp	r2, fp
    6558:	bne.n	6520 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    655a:	cmp.w	sl, #0
    655e:	bne.n	656a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    6560:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    6564:	it	eq
    6566:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    656a:	add.w	r0, r8, #2
    656e:	b.n	6514 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    6570:	mov.w	r8, #0
          i = sectorSize;
    6574:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    6578:	mov	r6, r8
    657a:	b.n	6534 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    657c:	movs	r0, #1
    657e:	b.n	6514 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

00006580 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    6580:	subs	r1, #2
                                  uint32_t count, bool value) {
    6582:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6586:	mov	r5, r0
    6588:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    658a:	ldr.w	r0, [r0, #1072]	; 0x430
    658e:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    6590:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    6592:	cmp	r3, r0
    6594:	bhi.n	6616 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6596:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    659a:	cbz	r7, 660c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    659c:	cmp	r1, r2
    659e:	bhi.n	65ae <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    65a0:	cmp	r3, r2
    65a2:	bls.n	65ae <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    65a4:	cmp	r3, r0
    65a6:	it	cs
    65a8:	movcs	r3, #0
    65aa:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    65ae:	and.w	r3, r1, #7
    65b2:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    65b6:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    65ba:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    65be:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    65c2:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    65c6:	add.w	r8, r3, r1, lsr #12
    65ca:	movs	r2, #1
    65cc:	mov	r1, r8
    65ce:	mov	r0, r5
    65d0:	add	r8, r2
    65d2:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    65d6:	cbz	r0, 6616 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    65d8:	adds	r3, r0, r4
    65da:	mov	r1, r9
    65dc:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    65e0:	ldrb	r2, [r3, #0]
    65e2:	tst	r2, r1
    65e4:	ite	ne
    65e6:	movne	r4, #1
    65e8:	moveq	r4, #0
    65ea:	cmp	r4, r7
    65ec:	beq.n	6616 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    65ee:	eors	r2, r1
        if (--count == 0) {
    65f0:	subs	r6, #1
        cache[i] ^= mask;
    65f2:	strb	r2, [r3, #0]
        if (--count == 0) {
    65f4:	beq.n	661c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    65f6:	lsls	r1, r1, #1
    65f8:	ands.w	r1, r1, #255	; 0xff
    65fc:	bne.n	65e0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    65fe:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    6600:	mov	r4, r1
    6602:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    6604:	cmp	r0, r3
      mask = 1;
    6606:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    6608:	bne.n	65e0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    660a:	b.n	65ca <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    660c:	cmp	r1, r2
      m_bitmapStart = start;
    660e:	it	cc
    6610:	strcc.w	r1, [r5, #1056]	; 0x420
    6614:	b.n	65ae <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    6616:	movs	r0, #0
}
    6618:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    661c:	movs	r0, #1
    661e:	b.n	6618 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

00006620 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6620:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    6622:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6626:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    6628:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    662a:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    662e:	ldrb.w	r5, [r0, #565]	; 0x235
    6632:	ands	r1, r3
    6634:	ldr	r3, [r4, #0]
    6636:	subs	r3, #2
    6638:	lsls	r3, r5
    663a:	add.w	r3, r3, r1, lsr #9
    663e:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    6642:	add	r1, r3
    6644:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    6648:	cbz	r0, 6652 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    664a:	ldr	r3, [r4, #4]
    664c:	ubfx	r3, r3, #0, #9
    6650:	add	r0, r3
}
    6652:	pop	{r3, r4, r5, pc}

00006654 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6654:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6656:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    665a:	mov	r4, r1
    665c:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    665e:	adds	r3, #1
    6660:	cmp	r3, r1
    6662:	bcs.n	666a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    6664:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    6668:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    666a:	ldr.w	r1, [r0, #1060]	; 0x424
    666e:	movs	r2, #0
    6670:	add.w	r0, r0, #528	; 0x210
    6674:	add.w	r1, r1, r4, lsr #7
    6678:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    667c:	cmp	r0, #0
    667e:	beq.n	6664 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6680:	lsls	r4, r4, #2
    6682:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    6686:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    6688:	adds	r2, r3, #1
  return 1;
    668a:	itet	ne
    668c:	movne	r0, #1
    return 0;
    668e:	moveq	r0, #0
  *value = next;
    6690:	strne	r3, [r5, #0]
  return 1;
    6692:	b.n	6668 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

00006694 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6694:	push	{r0, r1, r2, r4, r5, lr}
    6696:	mov	r5, r0
  uint32_t n = 0;
    6698:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    669a:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    669c:	add	r2, sp, #4
    669e:	ldr	r1, [sp, #4]
    66a0:	mov	r0, r5
    66a2:	bl	6654 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    66a6:	cmp	r0, #0
    66a8:	blt.n	66b6 <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    66aa:	add.w	r4, r4, #1
  } while (status);
    66ae:	bne.n	669c <ExFatPartition::chainSize(unsigned long)+0x8>
}
    66b0:	mov	r0, r4
    66b2:	add	sp, #12
    66b4:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    66b6:	movs	r4, #0
    66b8:	b.n	66b0 <ExFatPartition::chainSize(unsigned long)+0x1c>

000066ba <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    66ba:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    66bc:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    66be:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    66c0:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    66c4:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    66c6:	ands	r4, r3
    66c8:	add	r4, r2
  pos->position += offset;
    66ca:	add	r2, r3
    66cc:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    66ce:	ldrb.w	r3, [r0, #1093]	; 0x445
    66d2:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    66d4:	uxtb	r3, r3
    66d6:	lsrs	r4, r3
  while (tmp--) {
    66d8:	cbnz	r4, 66de <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    66da:	movs	r0, #1
    66dc:	b.n	66f8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    66de:	ldrb	r3, [r5, #8]
      pos->cluster++;
    66e0:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    66e2:	cbz	r3, 66ec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    66e4:	adds	r1, #1
    66e6:	str	r1, [r5, #0]
    66e8:	subs	r4, #1
    66ea:	b.n	66d8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    66ec:	mov	r2, r5
    66ee:	mov	r0, r6
    66f0:	bl	6654 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    66f4:	cmp	r0, #1
    66f6:	beq.n	66e8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    66f8:	pop	{r4, r5, r6, pc}

000066fa <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    66fa:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    66fc:	push	{r3, r4, r5, lr}
    66fe:	mov	r4, r1
    6700:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6702:	bhi.n	6708 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    6704:	movs	r0, #0
}
    6706:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6708:	ldr.w	r3, [r0, #1072]	; 0x430
    670c:	adds	r3, #1
    670e:	cmp	r3, r1
    6710:	bcc.n	6704 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6712:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    6716:	movs	r2, #1
    6718:	add.w	r0, r0, #528	; 0x210
    671c:	add.w	r1, r1, r4, lsr #7
    6720:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6724:	cmp	r0, #0
    6726:	beq.n	6704 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    6728:	lsls	r4, r4, #2
    672a:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    672e:	str	r5, [r0, r4]
  return true;
    6730:	movs	r0, #1
    6732:	b.n	6706 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

00006734 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    6734:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6738:	mov	r7, r0
    673a:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    673c:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    673e:	add	r2, sp, #4
    6740:	mov	r1, r4
    6742:	mov	r0, r7
    6744:	bl	6654 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    6748:	subs	r6, r0, #0
    674a:	bge.n	6756 <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    674c:	movs	r5, #0
}
    674e:	mov	r0, r5
    6750:	add	sp, #8
    6752:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    6756:	movs	r2, #0
    6758:	mov	r1, r4
    675a:	mov	r0, r7
    675c:	bl	66fa <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6760:	mov	r5, r0
    6762:	cmp	r0, #0
    6764:	beq.n	674c <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    6766:	adds	r2, r4, #1
    6768:	cbz	r6, 6770 <ExFatPartition::freeChain(unsigned long)+0x3c>
    676a:	ldr	r3, [sp, #4]
    676c:	cmp	r3, r2
    676e:	beq.n	6786 <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6770:	movs	r3, #0
    6772:	sub.w	r2, r2, r8
    6776:	mov	r1, r8
    6778:	mov	r0, r7
    677a:	bl	6580 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    677e:	cmp	r0, #0
    6780:	beq.n	674c <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    6782:	ldr.w	r8, [sp, #4]
    cluster = next;
    6786:	ldr	r4, [sp, #4]
  } while (status);
    6788:	cmp	r6, #0
    678a:	bne.n	673e <ExFatPartition::freeChain(unsigned long)+0xa>
    678c:	b.n	674e <ExFatPartition::freeChain(unsigned long)+0x1a>

0000678e <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    678e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    6792:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    6794:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    6796:	ldr.w	r7, [r0, #1068]	; 0x42c
    679a:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    679e:	mov	r5, r4
    67a0:	mov	r1, r7
    67a2:	movs	r2, #0
    67a4:	mov	r0, r8
    67a6:	adds	r7, #1
    67a8:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    67ac:	cbz	r0, 67ca <ExFatPartition::freeClusterCount()+0x3c>
    67ae:	subs	r0, #1
    67b0:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    67b4:	ldrb.w	r1, [r0, #1]!
    67b8:	cmp	r1, #255	; 0xff
    67ba:	bne.n	67ce <ExFatPartition::freeClusterCount()+0x40>
        usedCount+= 8;
    67bc:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    67be:	adds	r5, #8
      if (nc >= m_clusterCount) {
    67c0:	ldr.w	r3, [r6, #1072]	; 0x430
    67c4:	cmp	r3, r5
    67c6:	bhi.n	67e8 <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    67c8:	subs	r0, r3, r4
      }
    }
  }
}
    67ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    67ce:	cmp	r1, #0
    67d0:	beq.n	67be <ExFatPartition::freeClusterCount()+0x30>
    67d2:	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    67d4:	movs	r3, #1
          if ((mask & cache[i])) {
    67d6:	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    67d8:	mov.w	r3, r3, lsl #1
            usedCount++;
    67dc:	it	ne
    67de:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    67e0:	subs	r2, #1
    67e2:	uxtb	r3, r3
    67e4:	bne.n	67d6 <ExFatPartition::freeClusterCount()+0x48>
    67e6:	b.n	67be <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    67e8:	cmp	r5, ip
    67ea:	bne.n	67b4 <ExFatPartition::freeClusterCount()+0x26>
    67ec:	b.n	67a0 <ExFatPartition::freeClusterCount()+0x12>
	...

000067f0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    67f0:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    67f2:	mov.w	r3, #4294967295
    67f6:	mov	r6, r2
    67f8:	add.w	r7, r0, #528	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    67fc:	movs	r2, #0
  m_blockDev = dev;
    67fe:	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6802:	mov	r4, r0
    m_blockDev = blockDev;
    6804:	str	r1, [r0, #4]
    6806:	str.w	r1, [r0, #532]	; 0x214
    680a:	mov	r1, r2
  m_fatType = 0;
    680c:	strb.w	r2, [r0, #1092]	; 0x444
    m_status = 0;
    6810:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    6812:	str	r3, [r0, #12]
    m_status = 0;
    6814:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6818:	str.w	r3, [r0, #540]	; 0x21c
    681c:	mov	r0, r7
    681e:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    6822:	cmp	r6, #4
    6824:	mov	r5, r0
    6826:	bls.n	682c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    6828:	movs	r0, #0
}
    682a:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    682c:	cmp	r0, #0
    682e:	beq.n	6828 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    6830:	cbz	r6, 6860 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x70>
    mp = &mbr->part[part - 1];
    6832:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    6834:	add.w	r3, r0, r3, lsl #4
    6838:	ldrb.w	r2, [r3, #446]	; 0x1be
    683c:	ands.w	r2, r2, #127	; 0x7f
    6840:	bne.n	6828 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    6842:	ldrb.w	r3, [r3, #450]	; 0x1c2
    6846:	cmp	r3, #0
    6848:	beq.n	6828 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    684a:	add.w	r6, r0, r6, lsl #4
    684e:	mov	r0, r7
    6850:	ldr.w	r6, [r6, #438]	; 0x1b6
    6854:	mov	r1, r6
    6856:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    685a:	mov	r5, r0
    685c:	cmp	r0, #0
    685e:	beq.n	6828 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    6860:	ldr	r1, [pc, #104]	; (68cc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    6862:	movs	r2, #5
    6864:	adds	r0, r5, #3
    6866:	bl	ef14 <strncmp>
    686a:	mov	r1, r0
    686c:	cmp	r0, #0
    686e:	bne.n	6828 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    6870:	ldrb.w	r3, [r5, #108]	; 0x6c
    6874:	cmp	r3, #9
    6876:	bne.n	6828 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6878:	ldr	r3, [r5, #80]	; 0x50
    687a:	add	r3, r6
    687c:	str.w	r3, [r4, #1060]	; 0x424
    6880:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    6882:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    6886:	ldr	r3, [r5, #88]	; 0x58
    6888:	add	r3, r6
    688a:	str.w	r3, [r4, #1068]	; 0x42c
    688e:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    6890:	str.w	r3, [r4, #1072]	; 0x430
    6894:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    6896:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    689a:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    689e:	movs	r5, #1
  m_bitmapStart = 0;
    68a0:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    68a4:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    68a6:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    68aa:	adds	r3, #9
  bitmapFind(0, 1);
    68ac:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    68ae:	lsl.w	r3, r5, r3
    68b2:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    68b6:	subs	r3, #1
    68b8:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    68bc:	bl	64d8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    68c0:	movs	r3, #64	; 0x40
  return true;
    68c2:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    68c4:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    68c8:	b.n	682a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    68ca:	nop
    68cc:	.word	0x20007f83

000068d0 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    68d0:	push	{r4, lr}
    68d2:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    68d4:	ldr.w	r1, [r0, #1076]	; 0x434
    68d8:	bl	6694 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    68dc:	ldrb.w	r3, [r4, #1093]	; 0x445
    68e0:	adds	r3, #9
  return nc << bytesPerClusterShift();
    68e2:	uxtb	r3, r3
}
    68e4:	lsls	r0, r3
    68e6:	pop	{r4, pc}

000068e8 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    68e8:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    68ea:	add.w	r4, r0, #1096	; 0x448
    68ee:	sub	sp, #56	; 0x38
    68f0:	movs	r3, #0
    68f2:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    68f4:	mov	r0, sp
    68f6:	mov	r1, r4
    68f8:	str	r3, [sp, #48]	; 0x30
    68fa:	bl	63d8 <ExFatFile::open(ExFatFile*, char const*, int)>
    68fe:	mov	r5, r0
    6900:	cbz	r0, 692a <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    6902:	ldrb.w	r3, [sp, #49]	; 0x31
    6906:	ands.w	r3, r3, #80	; 0x50
    690a:	beq.n	6930 <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    690c:	mov	r2, sp
    690e:	mov	r3, r4
    6910:	add	r6, sp, #48	; 0x30
    6912:	mov	r4, r2
    6914:	adds	r3, #8
    6916:	ldmia	r4!, {r0, r1}
    6918:	cmp	r4, r6
    691a:	str.w	r0, [r3, #-8]
    691e:	str.w	r1, [r3, #-4]
    6922:	mov	r2, r4
    6924:	bne.n	6912 <ExFatVolume::chdir(char const*)+0x2a>
    6926:	ldr	r0, [r4, #0]
    6928:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    692a:	mov	r0, r5
    692c:	add	sp, #56	; 0x38
    692e:	pop	{r4, r5, r6, pc}
  return false;
    6930:	mov	r5, r3
    6932:	b.n	692a <ExFatVolume::chdir(char const*)+0x42>

00006934 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    6934:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6936:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6938:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    693a:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    693c:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    693e:	orr.w	r2, r2, r1, lsr #1
    6942:	ldrb	r1, [r0, r3]
    6944:	uxtah	r2, r1, r2
    6948:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    694a:	bne.n	695e <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    694c:	cmp	r4, #133	; 0x85
    694e:	ite	ne
    6950:	movne	r2, #1
    6952:	moveq	r2, #3
    6954:	add	r3, r2
    6956:	cmp	r3, #31
    6958:	bls.n	693a <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    695a:	mov	r0, r1
    695c:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    695e:	movs	r2, #1
    6960:	b.n	6954 <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

00006962 <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    6962:	push	{r4, lr}
    6964:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6966:	bl	5a20 <FsCache::sync()>
    696a:	cbz	r0, 6984 <ExFatPartition::cacheSync()+0x22>
    696c:	add.w	r0, r4, #528	; 0x210
    6970:	bl	5a20 <FsCache::sync()>
    6974:	cbz	r0, 6984 <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6976:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    697a:	ldr	r3, [r0, #0]
  }
    697c:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6980:	ldr	r3, [r3, #32]
    6982:	bx	r3
  }
    6984:	movs	r0, #0
    6986:	pop	{r4, pc}

00006988 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    6988:	push	{r3, r4, r5, r6, r7, lr}
    698a:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    698c:	ldr	r0, [r0, #32]
    698e:	ldr	r1, [r4, #24]
    6990:	cbz	r1, 6994 <ExFatFile::addCluster()+0xc>
    6992:	adds	r1, #1
    6994:	movs	r2, #1
    6996:	bl	64d8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    699a:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    699c:	mov	r5, r0
  if (find < 2) {
    699e:	bhi.n	69a6 <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    69a0:	movs	r6, #0
}
    69a2:	mov	r0, r6
    69a4:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    69a6:	movs	r3, #1
    69a8:	mov	r1, r0
    69aa:	ldr	r0, [r4, #32]
    69ac:	mov	r2, r3
    69ae:	bl	6580 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    69b2:	mov	r6, r0
    69b4:	cmp	r0, #0
    69b6:	beq.n	69a0 <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    69b8:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    69ba:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    69be:	cbnz	r2, 69cc <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    69c0:	orr.w	r3, r3, #64	; 0x40
    69c4:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    69c8:	str	r5, [r4, #24]
  return true;
    69ca:	b.n	69a2 <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    69cc:	lsls	r1, r3, #25
    69ce:	bmi.n	69f4 <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    69d0:	mov.w	r2, #4294967295
    69d4:	mov	r1, r5
    69d6:	ldr	r0, [r4, #32]
    69d8:	bl	66fa <ExFatPartition::fatPut(unsigned long, unsigned long)>
    69dc:	cmp	r0, #0
    69de:	beq.n	69a0 <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    69e0:	ldr	r1, [r4, #24]
    69e2:	cmp	r1, #0
    69e4:	beq.n	69c8 <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    69e6:	mov	r2, r5
    69e8:	ldr	r0, [r4, #32]
    69ea:	bl	66fa <ExFatPartition::fatPut(unsigned long, unsigned long)>
    69ee:	cmp	r0, #0
    69f0:	bne.n	69c8 <ExFatFile::addCluster()+0x40>
    69f2:	b.n	69a0 <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    69f4:	adds	r2, #1
    69f6:	cmp	r2, r5
    69f8:	beq.n	69c8 <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    69fa:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    69fe:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6a00:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6a04:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    6a06:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6a08:	cmp	r3, r1
    6a0a:	bls.n	69d0 <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    6a0c:	adds	r7, r1, #1
    6a0e:	mov	r2, r7
    6a10:	bl	66fa <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6a14:	cmp	r0, #0
    6a16:	beq.n	69a0 <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6a18:	mov	r1, r7
    6a1a:	b.n	6a04 <ExFatFile::addCluster()+0x7c>

00006a1c <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6a1c:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6a1e:	ldrb.w	r3, [r0, #51]	; 0x33
    6a22:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    6a24:	lsls	r2, r3, #30
    6a26:	bmi.n	6a2c <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    6a28:	movs	r0, #0
}
    6a2a:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    6a2c:	ldr	r1, [r0, #28]
    6a2e:	cbnz	r1, 6a66 <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    6a30:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    6a32:	movs	r2, #1
    6a34:	uxtb	r1, r5
    6a36:	mov	r0, r4
    6a38:	bl	5d06 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6a3c:	cmp	r0, #0
    6a3e:	beq.n	6a28 <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    6a40:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6a42:	adds	r5, #1
    cache[0] &= 0x7F;
    6a44:	and.w	r3, r3, #127	; 0x7f
    6a48:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6a4a:	uxtb	r3, r5
    6a4c:	ldrb.w	r2, [r4, #48]	; 0x30
    6a50:	cmp	r2, r3
    6a52:	bcs.n	6a32 <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    6a54:	movs	r3, #0
  return m_vol->cacheSync();
    6a56:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    6a58:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    6a5c:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    6a60:	bl	6962 <ExFatPartition::cacheSync()>
    6a64:	b.n	6a2a <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    6a66:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6a68:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    6a6a:	bpl.n	6aa2 <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6a6c:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6a70:	ldrd	r2, r5, [r4, #8]
    6a74:	adds	r3, #9
    6a76:	subs	r2, #1
    6a78:	uxtb	r3, r3
    6a7a:	adc.w	r5, r5, #4294967295
    6a7e:	rsb	r7, r3, #32
    6a82:	sub.w	r6, r3, #32
    6a86:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6a88:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6a8a:	lsl.w	r7, r5, r7
    6a8e:	lsr.w	r6, r5, r6
    6a92:	orrs	r2, r7
    6a94:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6a96:	adds	r2, #1
    6a98:	bl	6580 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    6a9c:	cmp	r0, #0
    6a9e:	bne.n	6a30 <ExFatFile::remove()+0x14>
    6aa0:	b.n	6a28 <ExFatFile::remove()+0xc>
    6aa2:	bl	6734 <ExFatPartition::freeChain(unsigned long)>
    6aa6:	b.n	6a9c <ExFatFile::remove()+0x80>

00006aa8 <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    6aa8:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    6aaa:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    6aae:	sub	sp, #32
    6ab0:	mov	r4, r0
  if (!isSubDir()) {
    6ab2:	lsls	r3, r3, #27
    6ab4:	bmi.n	6abc <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    6ab6:	movs	r0, #0
}
    6ab8:	add	sp, #32
    6aba:	pop	{r4, pc}
    seekSet(0);
    6abc:	movs	r2, #0
    6abe:	movs	r3, #0
    6ac0:	bl	5fa8 <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    6ac4:	movs	r2, #32
    6ac6:	mov	r1, sp
    6ac8:	mov	r0, r4
    6aca:	bl	5df8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6ace:	cbz	r0, 6ae4 <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    6ad0:	cmp	r0, #32
    6ad2:	bne.n	6ab6 <ExFatFile::rmdir()+0xe>
    6ad4:	ldrsb.w	r2, [sp]
    6ad8:	ldrb.w	r3, [sp]
    6adc:	cmp	r2, #0
    6ade:	blt.n	6ab6 <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    6ae0:	cmp	r3, #0
    6ae2:	bne.n	6ac4 <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    6ae4:	movs	r3, #8
  return remove();
    6ae6:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    6ae8:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    6aec:	ldrb.w	r3, [r4, #51]	; 0x33
    6af0:	orr.w	r3, r3, #2
    6af4:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    6af8:	bl	6a1c <ExFatFile::remove()>
    6afc:	b.n	6ab8 <ExFatFile::rmdir()+0x10>
	...

00006b00 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    6b00:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6b04:	movs	r7, #0
    6b06:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    6b08:	ldr.w	r8, [pc, #204]	; 6bd8 <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    6b0c:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6b0e:	movs	r2, #0
    6b10:	uxtb	r1, r7
    6b12:	mov	r0, r4
    6b14:	bl	5d06 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6b18:	mov	r5, r0
    6b1a:	cmp	r0, #0
    6b1c:	beq.n	6b9a <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    6b1e:	ldrb	r3, [r0, #0]
    6b20:	cmp	r3, #192	; 0xc0
    6b22:	beq.n	6bae <ExFatFile::syncDir()+0xae>
    6b24:	cmp	r3, #193	; 0xc1
    6b26:	beq.n	6b6c <ExFatFile::syncDir()+0x6c>
    6b28:	cmp	r3, #133	; 0x85
    6b2a:	bne.n	6b9a <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6b2c:	ldrb.w	r3, [r4, #49]	; 0x31
    6b30:	and.w	r3, r3, #55	; 0x37
    6b34:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    6b36:	ldr.w	r3, [r8]
    6b3a:	cbz	r3, 6b5e <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    6b3c:	add.w	r2, sp, #3
    6b40:	add.w	r1, sp, #6
    6b44:	add	r0, sp, #4
    6b46:	blx	r3
          df->modifyTimeMs = ms10;
    6b48:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    6b4c:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    6b50:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    6b52:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    6b56:	strh	r2, [r5, #12]
    6b58:	strh	r3, [r5, #14]
    6b5a:	strh	r2, [r5, #16]
    6b5c:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    6b5e:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6b60:	ldrb.w	r3, [r2, #528]	; 0x210
    6b64:	orr.w	r3, r3, #1
    6b68:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6b6c:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    6b6e:	mov	r1, r6
    6b70:	mov	r0, r5
    6b72:	bl	6934 <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6b76:	ldrb.w	r2, [r4, #48]	; 0x30
    6b7a:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    6b7c:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6b7e:	cmp	r2, r3
    6b80:	bcs.n	6b0e <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    6b82:	movs	r2, #1
    6b84:	add.w	r1, r4, #36	; 0x24
    6b88:	ldr	r0, [r4, #32]
    6b8a:	bl	6620 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6b8e:	cbz	r0, 6b9a <ExFatFile::syncDir()+0x9a>
    6b90:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    6b92:	ldr	r0, [r4, #32]
    6b94:	bl	6962 <ExFatPartition::cacheSync()>
    6b98:	cbnz	r0, 6ba8 <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    6b9a:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    6b9e:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6ba0:	orr.w	r3, r3, #1
    6ba4:	strb.w	r3, [r4, #50]	; 0x32
}
    6ba8:	add	sp, #8
    6baa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    6bae:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6bb2:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    6bb4:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6bb6:	ite	mi
    6bb8:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    6bbc:	andpl.w	r3, r3, #253	; 0xfd
    6bc0:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    6bc2:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    6bc6:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    6bca:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    6bcc:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    6bce:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    6bd2:	strd	r2, r3, [r0, #24]
    6bd6:	b.n	6b5e <ExFatFile::syncDir()+0x5e>
    6bd8:	.word	0x2000fbfc

00006bdc <ExFatFile::sync()>:
bool ExFatFile::sync() {
    6bdc:	push	{r4, lr}
  if (!isOpen()) {
    6bde:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    6be2:	mov	r4, r0
  if (!isOpen()) {
    6be4:	cbnz	r3, 6bea <ExFatFile::sync()+0xe>
    return true;
    6be6:	movs	r0, #1
}
    6be8:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6bea:	ldrsb.w	r2, [r0, #51]	; 0x33
    6bee:	ldrb.w	r3, [r0, #51]	; 0x33
    6bf2:	cmp	r2, #0
    6bf4:	bge.n	6c06 <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6bf6:	and.w	r3, r3, #127	; 0x7f
    6bfa:	strb.w	r3, [r0, #51]	; 0x33
}
    6bfe:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    6c02:	b.w	6b00 <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    6c06:	ldr	r0, [r0, #32]
    6c08:	bl	6962 <ExFatPartition::cacheSync()>
    6c0c:	cmp	r0, #0
    6c0e:	bne.n	6be6 <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    6c10:	ldrb.w	r3, [r4, #50]	; 0x32
    6c14:	orr.w	r3, r3, #1
    6c18:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6c1c:	b.n	6be8 <ExFatFile::sync()+0xc>

00006c1e <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6c1e:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6c20:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    6c24:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6c26:	lsls	r2, r3, #25
    6c28:	bpl.n	6caa <ExFatFile::addDirCluster()+0x8c>
    6c2a:	ldr	r0, [r0, #32]
    6c2c:	bl	68d0 <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6c30:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    6c32:	ldr.w	r3, [r3, #1084]	; 0x43c
    6c36:	add	r0, r3
  if (dl >= 0X4000000) {
    6c38:	cmp.w	r0, #67108864	; 0x4000000
    6c3c:	bcs.n	6cca <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    6c3e:	mov	r0, r4
    6c40:	bl	6988 <ExFatFile::addCluster()>
    6c44:	cmp	r0, #0
    6c46:	beq.n	6cca <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    6c48:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6c4a:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    6c4c:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6c4e:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    6c50:	ldrb.w	r2, [r3, #1093]	; 0x445
    6c54:	subs	r5, #2
    6c56:	ldr.w	r3, [r3, #1068]	; 0x42c
    6c5a:	lsls	r5, r2
    6c5c:	add	r5, r3
    6c5e:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6c60:	ldrb.w	r3, [r0, #1093]	; 0x445
    6c64:	lsl.w	r3, r7, r3
    6c68:	cmp	r6, r3
    6c6a:	bcc.n	6cae <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    6c6c:	ldrb.w	r3, [r4, #49]	; 0x31
    6c70:	lsls	r3, r3, #25
    6c72:	bmi.n	6ca0 <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6c74:	ldrb.w	r3, [r4, #51]	; 0x33
    6c78:	orn	r3, r3, #127	; 0x7f
    6c7c:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    6c80:	ldr.w	r2, [r0, #1084]	; 0x43c
    6c84:	ldrd	r3, r1, [r4, #8]
    6c88:	adds	r3, r3, r2
    6c8a:	adc.w	r1, r1, #0
    6c8e:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    6c92:	ldrd	r3, r1, [r4, #16]
    6c96:	adds	r3, r3, r2
    6c98:	adc.w	r1, r1, #0
    6c9c:	strd	r3, r1, [r4, #16]
  return sync();
    6ca0:	mov	r0, r4
}
    6ca2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    6ca6:	b.w	6bdc <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6caa:	ldr	r0, [r0, #8]
    6cac:	b.n	6c30 <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    6cae:	movs	r2, #5
    6cb0:	adds	r1, r5, r6
    6cb2:	add.w	r0, r0, #528	; 0x210
    6cb6:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6cba:	cbz	r0, 6cca <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    6cbc:	mov.w	r2, #512	; 0x200
    6cc0:	movs	r1, #0
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6cc2:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    6cc4:	bl	a528 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6cc8:	b.n	6c5e <ExFatFile::addDirCluster()+0x40>
}
    6cca:	movs	r0, #0
    6ccc:	pop	{r3, r4, r5, r6, r7, pc}

00006cce <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6cce:	push	{r4, lr}
  if (!parent->isDir()) {
    6cd0:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6cd4:	mov	r4, r0
  if (!parent->isDir()) {
    6cd6:	tst.w	r3, #80	; 0x50
    6cda:	beq.n	6d12 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6cdc:	movw	r3, #2562	; 0xa02
    6ce0:	bl	6088 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6ce4:	cbz	r0, 6d12 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    6ce6:	movs	r3, #16
  if (!addDirCluster()) {
    6ce8:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    6cea:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    6cee:	bl	6c1e <ExFatFile::addDirCluster()>
    6cf2:	cbz	r0, 6d12 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    6cf4:	ldr	r3, [r4, #24]
    6cf6:	mov	r0, r4
    6cf8:	movs	r2, #0
    6cfa:	str	r3, [r4, #28]
    6cfc:	movs	r3, #0
    6cfe:	bl	5fa8 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6d02:	movs	r3, #193	; 0xc1
  return sync();
    6d04:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6d06:	strb.w	r3, [r4, #51]	; 0x33
}
    6d0a:	ldmia.w	sp!, {r4, lr}
  return sync();
    6d0e:	b.w	6bdc <ExFatFile::sync()>
}
    6d12:	movs	r0, #0
    6d14:	pop	{r4, pc}

00006d16 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    6d16:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d1a:	mov	r8, r3
    6d1c:	sub	sp, #88	; 0x58
    6d1e:	movs	r3, #0
    6d20:	mov	r5, r0
    6d22:	mov	r4, r1
    6d24:	str	r2, [sp, #4]
    6d26:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    6d2a:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    6d2c:	ldrb.w	r3, [r0, #49]	; 0x31
    6d30:	cbz	r3, 6d3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    6d32:	movs	r0, #0
}
    6d34:	add	sp, #88	; 0x58
    6d36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    6d3a:	ldrb.w	r3, [r1, #49]	; 0x31
    6d3e:	tst.w	r3, #80	; 0x50
    6d42:	beq.n	6d32 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    6d44:	ldrb	r3, [r2, #0]
    6d46:	cmp	r3, #47	; 0x2f
    6d48:	bne.n	6d60 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    6d4a:	ldr	r2, [sp, #4]
    6d4c:	ldrb	r3, [r2, #0]
    6d4e:	cmp	r3, #47	; 0x2f
    6d50:	beq.n	6dac <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    6d52:	ldr	r1, [r4, #32]
    6d54:	add	r0, sp, #32
    6d56:	bl	5d52 <ExFatFile::openRoot(ExFatVolume*)>
    6d5a:	cmp	r0, #0
    6d5c:	beq.n	6d32 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    6d5e:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    6d60:	add	r3, sp, #4
    6d62:	add	r2, sp, #8
    6d64:	ldr	r1, [sp, #4]
    6d66:	mov	r0, r5
    6d68:	bl	5d78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6d6c:	cmp	r0, #0
    6d6e:	beq.n	6d32 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    6d70:	ldr	r3, [sp, #4]
    6d72:	ldrb	r3, [r3, #0]
    6d74:	cbz	r3, 6dc8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6d76:	movs	r3, #0
    6d78:	add	r2, sp, #8
    6d7a:	mov	r1, r4
    6d7c:	mov	r0, r5
    6d7e:	bl	6088 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6d82:	cbz	r0, 6db2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    6d84:	add	r6, sp, #32
    6d86:	mov	r2, r5
    6d88:	add.w	r3, r5, #48	; 0x30
    6d8c:	mov	r4, r6
    6d8e:	ldr	r0, [r2, #0]
    6d90:	adds	r2, #8
    6d92:	ldr.w	r1, [r2, #-4]
    6d96:	mov	r7, r6
    6d98:	cmp	r2, r3
    6d9a:	stmia	r7!, {r0, r1}
    6d9c:	mov	r6, r7
    6d9e:	bne.n	6d8e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    6da0:	ldr	r0, [r2, #0]
    6da2:	str	r0, [r7, #0]
    close();
    6da4:	mov	r0, r5
    6da6:	bl	5d3e <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    6daa:	b.n	6d60 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    6dac:	adds	r2, #1
    6dae:	str	r2, [sp, #4]
    6db0:	b.n	6d4a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    6db2:	cmp.w	r8, #0
    6db6:	beq.n	6d32 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    6db8:	add	r2, sp, #8
    6dba:	mov	r1, r4
    6dbc:	mov	r0, r5
    6dbe:	bl	6cce <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6dc2:	cmp	r0, #0
    6dc4:	bne.n	6d84 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    6dc6:	b.n	6d32 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    6dc8:	add	r2, sp, #8
    6dca:	mov	r1, r4
    6dcc:	mov	r0, r5
    6dce:	bl	6cce <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6dd2:	b.n	6d34 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

00006dd4 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    6dd4:	push	{r4, r5, r6, r7, lr}
    6dd6:	mov	r4, r0
    6dd8:	sub	sp, #116	; 0x74
    6dda:	movs	r0, #0
    6ddc:	str	r0, [sp, #48]	; 0x30
    6dde:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    6de0:	ldrb.w	r0, [r4, #49]	; 0x31
    6de4:	tst.w	r0, #24
    6de8:	bne.n	6df0 <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    6dea:	movs	r0, #0
}
    6dec:	add	sp, #116	; 0x74
    6dee:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    6df0:	ldr	r0, [r4, #32]
    6df2:	ldr	r3, [r1, #32]
    6df4:	cmp	r0, r3
    6df6:	bne.n	6dea <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6df8:	movw	r3, #2561	; 0xa01
    6dfc:	mov	r0, sp
    6dfe:	bl	63d8 <ExFatFile::open(ExFatFile*, char const*, int)>
    6e02:	cmp	r0, #0
    6e04:	beq.n	6dea <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    6e06:	add	r2, sp, #56	; 0x38
    6e08:	mov	r3, r4
    6e0a:	add.w	r7, r4, #48	; 0x30
    6e0e:	mov	r6, r2
    6e10:	ldr	r0, [r3, #0]
    6e12:	adds	r3, #8
    6e14:	ldr.w	r1, [r3, #-4]
    6e18:	mov	r5, r2
    6e1a:	cmp	r3, r7
    6e1c:	stmia	r5!, {r0, r1}
    6e1e:	mov	r2, r5
    6e20:	bne.n	6e10 <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    6e22:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    6e24:	add	r2, sp, #36	; 0x24
    6e26:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    6e2a:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    6e2c:	ldmia	r2, {r0, r1, r2}
    6e2e:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    6e32:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    6e36:	mov	r0, r4
  m_setCount = file.m_setCount;
    6e38:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6e3c:	ldrb.w	r3, [r4, #51]	; 0x33
    6e40:	orn	r3, r3, #127	; 0x7f
    6e44:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    6e48:	bl	6bdc <ExFatFile::sync()>
    6e4c:	cmp	r0, #0
    6e4e:	beq.n	6dea <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    6e50:	movs	r3, #0
  return oldFile.remove();
    6e52:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    6e54:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    6e56:	movs	r3, #2
    6e58:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    6e5c:	movs	r3, #8
    6e5e:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    6e62:	bl	6a1c <ExFatFile::remove()>
    6e66:	b.n	6dec <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00006e68 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    6e68:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6e6a:	ldrb.w	r2, [r0, #51]	; 0x33
    6e6e:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6e70:	lsls	r3, r2, #30
    6e72:	bmi.n	6e7a <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    6e74:	movs	r0, #0
}
    6e76:	add	sp, #12
    6e78:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    6e7a:	ldr	r3, [r0, #28]
    6e7c:	cmp	r3, #0
    6e7e:	beq.n	6f2e <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    6e80:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    6e84:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    6e86:	beq.n	6ef8 <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6e88:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6e8a:	ldrb.w	r5, [r0, #1093]	; 0x445
    6e8e:	ldrd	r2, r6, [r4, #8]
    6e92:	adds	r5, #9
    6e94:	subs	r2, #1
    6e96:	uxtb	r5, r5
    6e98:	adc.w	r6, r6, #4294967295
    6e9c:	rsb	ip, r5, #32
    6ea0:	sub.w	r7, r5, #32
    6ea4:	lsrs	r2, r5
    6ea6:	lsl.w	ip, r6, ip
    6eaa:	lsr.w	r7, r6, r7
    6eae:	orr.w	r2, r2, ip
    6eb2:	orrs	r2, r7
    6eb4:	adds	r2, #1
    if (m_curCluster) {
    6eb6:	cbz	r1, 6ee4 <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    6eb8:	subs	r3, #1
      toFree = m_curCluster + 1;
    6eba:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    6ebc:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    6ebe:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    6ec0:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6ec2:	cbnz	r2, 6eea <ExFatFile::truncate()+0x82>
  return sync();
    6ec4:	mov	r0, r4
  m_dataLength = m_curPosition;
    6ec6:	ldrd	r2, r3, [r4]
    6eca:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    6ece:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6ed2:	ldrb.w	r3, [r4, #51]	; 0x33
    6ed6:	orn	r3, r3, #127	; 0x7f
    6eda:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    6ede:	bl	6bdc <ExFatFile::sync()>
    6ee2:	b.n	6e76 <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    6ee4:	str	r3, [sp, #4]
      m_firstCluster = 0;
    6ee6:	str	r1, [r4, #28]
    6ee8:	b.n	6ec2 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6eea:	movs	r3, #0
    6eec:	ldr	r1, [sp, #4]
    6eee:	bl	6580 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    6ef2:	cmp	r0, #0
    6ef4:	bne.n	6ec4 <ExFatFile::truncate()+0x5c>
    6ef6:	b.n	6e74 <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    6ef8:	cbz	r1, 6f28 <ExFatFile::truncate()+0xc0>
      toFree = 0;
    6efa:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6efc:	add	r2, sp, #4
    6efe:	ldr	r0, [r0, #32]
    6f00:	bl	6654 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    6f04:	cmp	r0, #0
    6f06:	blt.n	6e74 <ExFatFile::truncate()+0xc>
      if (fg) {
    6f08:	beq.n	6f1a <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    6f0a:	mov.w	r2, #4294967295
    6f0e:	ldr	r1, [r4, #24]
    6f10:	ldr	r0, [r4, #32]
    6f12:	bl	66fa <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6f16:	cmp	r0, #0
    6f18:	beq.n	6e74 <ExFatFile::truncate()+0xc>
    if (toFree) {
    6f1a:	ldr	r1, [sp, #4]
    6f1c:	cmp	r1, #0
    6f1e:	beq.n	6ec4 <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    6f20:	ldr	r0, [r4, #32]
    6f22:	bl	6734 <ExFatPartition::freeChain(unsigned long)>
    6f26:	b.n	6ef2 <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    6f28:	str	r3, [sp, #4]
      m_firstCluster = 0;
    6f2a:	str	r1, [r0, #28]
    6f2c:	b.n	6f1a <ExFatFile::truncate()+0xb2>
      return true;
    6f2e:	movs	r0, #1
    6f30:	b.n	6e76 <ExFatFile::truncate()+0xe>
	...

00006f34 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6f34:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f38:	ldrb.w	r3, [r0, #51]	; 0x33
    6f3c:	mov	r8, r1
    6f3e:	mov	r4, r0
    6f40:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    6f42:	lsls	r1, r3, #30
    6f44:	bpl.n	6f84 <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6f46:	lsls	r2, r3, #28
    6f48:	bmi.n	6f78 <ExFatFile::write(void const*, unsigned int)+0x44>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    6f4a:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6f4c:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6f50:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6f54:	ldrd	r5, r3, [r4]
  while (toWrite) {
    6f58:	cbnz	r7, 6f96 <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    6f5a:	ldrd	r1, r2, [r4, #8]
    6f5e:	cmp	r1, r5
    6f60:	sbcs	r2, r3
    6f62:	bcs.w	7128 <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    6f66:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6f6a:	ldrb.w	r3, [r4, #51]	; 0x33
    6f6e:	orn	r3, r3, #127	; 0x7f
    6f72:	strb.w	r3, [r4, #51]	; 0x33
    6f76:	b.n	7132 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    6f78:	ldrd	r2, r3, [r0, #16]
    6f7c:	bl	5fa8 <ExFatFile::seekSet(unsigned long long)>
    6f80:	cmp	r0, #0
    6f82:	bne.n	6f4a <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6f84:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    6f88:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    6f8c:	orr.w	r3, r3, #1
    6f90:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    6f94:	b.n	7132 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6f96:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    6f98:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6f9a:	ldr.w	r3, [r0, #1080]	; 0x438
    6f9e:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6fa0:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    6fa4:	cbnz	r5, 6ff0 <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    6fa6:	cmp	r1, #0
    6fa8:	beq.n	7056 <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    6faa:	ldrb.w	r3, [r4, #51]	; 0x33
    6fae:	lsls	r3, r3, #25
    6fb0:	bpl.n	7048 <ExFatFile::write(void const*, unsigned int)+0x114>
    6fb2:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    6fb6:	ldrd	r3, r2, [r4, #8]
    6fba:	adds	r0, #9
    6fbc:	subs	r3, #1
    6fbe:	uxtb	r0, r0
    6fc0:	adc.w	r2, r2, #4294967295
    6fc4:	rsb	lr, r0, #32
    6fc8:	sub.w	ip, r0, #32
    6fcc:	lsrs	r3, r0
    6fce:	lsl.w	lr, r2, lr
    6fd2:	lsr.w	ip, r2, ip
    6fd6:	ldr	r2, [r4, #28]
    6fd8:	orr.w	r3, r3, lr
    6fdc:	orr.w	r3, r3, ip
    6fe0:	add	r3, r2
          if (m_curCluster < lc) {
    6fe2:	cmp	r3, r1
    6fe4:	bhi.n	7042 <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    6fe6:	mov	r0, r4
    6fe8:	bl	6988 <ExFatFile::addCluster()>
    6fec:	cmp	r0, #0
    6fee:	beq.n	6f84 <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    6ff0:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6ff4:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    6ff6:	ldr	r1, [r4, #24]
    6ff8:	ldrb.w	r2, [ip, #1093]	; 0x445
    6ffc:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    6ffe:	ldr.w	r0, [ip, #1068]	; 0x42c
    7002:	lsls	r1, r2
    7004:	add.w	r1, r1, r5, lsr #9
    7008:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    700a:	cbnz	r6, 706e <ExFatFile::write(void const*, unsigned int)+0x13a>
    700c:	cmp.w	r7, #512	; 0x200
    7010:	bcc.n	706e <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    7012:	cmp.w	r7, #1024	; 0x400
    7016:	ldr.w	lr, [ip, #540]	; 0x21c
    701a:	ldr.w	r0, [ip, #532]	; 0x214
    701e:	bcs.n	70f6 <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    7020:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    7022:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    7024:	ittt	eq
    7026:	moveq.w	r3, #4294967295
    m_status = 0;
    702a:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    702e:	streq.w	r3, [ip, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    7032:	ldr	r3, [r0, #0]
    7034:	ldr	r3, [r3, #36]	; 0x24
    7036:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    7038:	cmp	r0, #0
    703a:	beq.n	6f84 <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    703c:	mov.w	r5, #512	; 0x200
    7040:	b.n	70c2 <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    7042:	adds	r1, #1
    7044:	str	r1, [r4, #24]
        if (fg == 0) {
    7046:	b.n	6ff0 <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7048:	mov	r2, sl
    704a:	bl	6654 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    704e:	cmp	r0, #0
    7050:	blt.n	6f84 <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    7052:	beq.n	6fe6 <ExFatFile::write(void const*, unsigned int)+0xb2>
    7054:	b.n	6ff0 <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    7056:	ldr	r3, [r4, #28]
    7058:	cbnz	r3, 706a <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    705a:	mov	r0, r4
    705c:	bl	6988 <ExFatFile::addCluster()>
    7060:	cmp	r0, #0
    7062:	beq.n	6f84 <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    7064:	ldr	r3, [r4, #24]
    7066:	str	r3, [r4, #28]
    7068:	b.n	6ff0 <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    706a:	str	r3, [r4, #24]
    706c:	b.n	6ff0 <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    706e:	rsb	r5, r6, #512	; 0x200
    7072:	cmp	r5, r7
    7074:	it	cs
    7076:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    7078:	cmp	r6, #0
    707a:	bne.n	70f2 <ExFatFile::write(void const*, unsigned int)+0x1be>
    707c:	ldr	r3, [r4, #20]
    707e:	ldr	r0, [r4, #0]
    7080:	str	r3, [sp, #4]
    7082:	ldr	r3, [r4, #16]
    7084:	ldr	r2, [r4, #4]
    7086:	cmp	r0, r3
    7088:	ldr	r3, [sp, #4]
    708a:	sbcs.w	r3, r2, r3
    708e:	bcc.n	70f2 <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7090:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    7092:	add.w	r0, ip, #528	; 0x210
    7096:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    709a:	cmp	r0, #0
    709c:	beq.w	6f84 <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    70a0:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    70a2:	add	r6, r5
      memcpy(dst, src, n);
    70a4:	mov	r2, r5
    70a6:	mov	r1, r8
    70a8:	bl	a56c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    70ac:	cmp.w	r6, #512	; 0x200
    70b0:	ldr	r0, [r4, #32]
    70b2:	bne.n	70c2 <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() {return m_dataCache.sync();}
    70b4:	add.w	r0, r0, #528	; 0x210
    70b8:	bl	5a20 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    70bc:	cmp	r0, #0
    70be:	beq.w	6f84 <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    70c2:	add	r8, r5
    toWrite -= n;
    70c4:	subs	r7, r7, r5
    m_curPosition += n;
    70c6:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    70ca:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    70ce:	adds	r3, r5, r3
    70d0:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    70d4:	cmp	r0, r3
    70d6:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    70d8:	itt	cc
    70da:	ldrbcc.w	r1, [r4, #51]	; 0x33
    70de:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    70e2:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    70e6:	itt	cc
    70e8:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    70ec:	strdcc	r3, r2, [r4, #16]
    70f0:	b.n	6f54 <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    70f2:	movs	r2, #1
    70f4:	b.n	7092 <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    70f6:	lsl.w	r2, fp, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    70fa:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    70fc:	lsrs	r2, r7, #9
    70fe:	cmp	r3, r2
    7100:	it	cs
    7102:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    7104:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    7106:	mov.w	r5, r3, lsl #9
    710a:	bhi.n	711e <ExFatFile::write(void const*, unsigned int)+0x1ea>
    710c:	adds	r2, r1, r3
    710e:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    7110:	ittt	hi
    7112:	movhi.w	r2, #4294967295
    m_status = 0;
    7116:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    711a:	strhi.w	r2, [ip, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    711e:	ldr	r2, [r0, #0]
    7120:	ldr	r6, [r2, #40]	; 0x28
    7122:	mov	r2, r8
    7124:	blx	r6
    7126:	b.n	70bc <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    7128:	ldr	r3, [pc, #16]	; (713c <ExFatFile::write(void const*, unsigned int)+0x208>)
    712a:	ldr	r3, [r3, #0]
    712c:	cmp	r3, #0
    712e:	bne.w	6f6a <ExFatFile::write(void const*, unsigned int)+0x36>
}
    7132:	mov	r0, r9
    7134:	add	sp, #12
    7136:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    713a:	nop
    713c:	.word	0x2000fbfc

00007140 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    7140:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    7142:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    7144:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    7146:	bl	7632 <FatFile::seekSet(unsigned long)>
    714a:	cbz	r0, 7158 <FatFile::cacheDir(unsigned short)+0x18>
    714c:	mov	r0, r4
    714e:	movs	r1, #0
  }
    7150:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    7154:	b.w	75f4 <FatFile::readDirCache(bool)>
  }
    7158:	pop	{r4, pc}

0000715a <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    715a:	cmp	r2, #4
    715c:	bhi.n	7168 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    715e:	add.w	r2, r1, r2, lsl #1
    7162:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    7166:	bx	lr
  } else if (i < 11) {
    7168:	cmp	r2, #10
    716a:	bhi.n	7174 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    716c:	add.w	r2, r1, r2, lsl #1
    7170:	ldrh	r0, [r2, #4]
    7172:	bx	lr
  } else if (i < 13) {
    7174:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    7176:	itte	ls
    7178:	addls.w	r2, r1, r2, lsl #1
    717c:	ldrhls	r0, [r2, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    717e:	movhi	r0, #0
}
    7180:	bx	lr

00007182 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    7182:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    7184:	ldrb	r4, [r0, #0]
    7186:	mov	r5, r1
    7188:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    718a:	cbz	r4, 71fc <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    718c:	ands.w	r4, r4, #96	; 0x60
    7190:	beq.n	71a2 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    7192:	cmp	r2, #1
    7194:	bls.n	71fc <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    7196:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    7198:	movs	r0, #1
    name[0] = '/';
    719a:	strb	r3, [r1, #0]
    name[1] = '\0';
    719c:	movs	r3, #0
    719e:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    71a0:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    71a2:	mov	r1, r4
    71a4:	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    71a8:	cbz	r0, 71fc <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    71aa:	mov	r6, r0
    71ac:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    71ae:	movs	r2, #8
    if (i == 8) {
    71b0:	cmp	r1, #8
      if (*ptr == ' ') {
    71b2:	ldrb	r3, [r6, #0]
    if (i == 8) {
    71b4:	bne.n	71ce <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    71b6:	cmp	r3, #32
    71b8:	beq.n	71f4 <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    71ba:	movs	r2, #16
      c = '.';
    71bc:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    71be:	mov	ip, r4
    71c0:	adds	r4, #1
    71c2:	cmp	r4, r7
    71c4:	bcs.n	71fc <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    71c6:	uxtb	r4, r4
    71c8:	strb.w	r3, [r5, ip]
    71cc:	b.n	71ee <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    71ce:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    71d2:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    71d4:	cmp.w	ip, #25
    71d8:	bhi.n	71ea <FatFile::getSFN(char*, unsigned int)+0x68>
    71da:	ldrb.w	ip, [r0, #12]
    71de:	tst.w	r2, ip
    71e2:	beq.n	71be <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    71e4:	adds	r3, #32
    71e6:	uxtb	r3, r3
    71e8:	b.n	71be <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    71ea:	cmp	r3, #32
    71ec:	bne.n	71be <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    71ee:	adds	r1, #1
    71f0:	cmp	r1, #12
    71f2:	bne.n	71b0 <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    71f4:	movs	r3, #0
    71f6:	mov	r0, r4
    71f8:	strb	r3, [r5, r4]
  return j;
    71fa:	b.n	71a0 <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    71fc:	movs	r0, #0
    71fe:	strb	r0, [r5, #0]
  return 0;
    7200:	b.n	71a0 <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

00007204 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    7204:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    7208:	movs	r5, #0
    720a:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    720c:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    720e:	mov	r6, r0
    7210:	mov	r8, r1
    7212:	mov	r7, r2
    7214:	str	r5, [sp, #4]
  if (!isOpen()) {
    7216:	cbz	r3, 7232 <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    7218:	ldrb	r3, [r0, #3]
    721a:	cbnz	r3, 7226 <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    721c:	bl	7182 <FatFile::getSFN(char*, unsigned int)>
}
    7220:	add	sp, #44	; 0x2c
    7222:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    7226:	mov	r1, r0
    7228:	add	r0, sp, #4
    722a:	bl	741a <FatFile::openCluster(FatFile*)>
    722e:	cmp	r0, #0
    7230:	bne.n	72de <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    7232:	movs	r0, #0
    7234:	strb.w	r0, [r8]
  return 0;
    7238:	b.n	7220 <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    723a:	ldrh	r1, [r6, #4]
    723c:	add	r0, sp, #4
    723e:	sub.w	r1, r1, r9
    7242:	uxth	r1, r1
    7244:	bl	7140 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7248:	mov	sl, r0
    724a:	cmp	r0, #0
    724c:	beq.n	7232 <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    724e:	ldrb	r3, [r0, #11]
    7250:	cmp	r3, #15
    7252:	bne.n	7232 <FatFile::getName8(char*, unsigned int)+0x2e>
    7254:	ldrb	r3, [r0, #0]
    7256:	and.w	r3, r3, #31
    725a:	cmp	fp, r3
    725c:	bne.n	7232 <FatFile::getName8(char*, unsigned int)+0x2e>
    725e:	mov.w	fp, #0
      uint16_t c = getLfnChar(ldir, i);
    7262:	uxtb.w	r2, fp
    7266:	mov	r1, sl
    7268:	mov	r0, r6
    726a:	bl	715a <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    726e:	cbz	r5, 72ba <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    7270:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    7274:	uxth	r2, r2
    7276:	cmp.w	r2, #1024	; 0x400
    727a:	bcs.n	7232 <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    727c:	ldr	r3, [pc, #108]	; (72ec <FatFile::getName8(char*, unsigned int)+0xe8>)
    727e:	ubfx	r0, r0, #0, #10
    7282:	and.w	r5, r3, r5, lsl #10
    7286:	orrs	r0, r5
    7288:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    728c:	mov	r1, r4
    728e:	mov	r2, r7
    7290:	bl	5904 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    7294:	mov	r4, r0
    7296:	cmp	r0, #0
    7298:	beq.n	7232 <FatFile::getName8(char*, unsigned int)+0x2e>
    729a:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    729c:	add.w	fp, fp, #1
    72a0:	cmp.w	fp, #13
    72a4:	bne.n	7262 <FatFile::getName8(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    72a6:	add.w	r9, r9, #1
    72aa:	uxth.w	r9, r9
    72ae:	uxtb.w	fp, r9
    72b2:	ldrb	r3, [r6, #3]
    72b4:	cmp	r3, fp
    72b6:	bcs.n	723a <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    72b8:	b.n	72ca <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    72ba:	add.w	r2, r0, #10240	; 0x2800
    72be:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    72c0:	cmp.w	r2, #2048	; 0x800
    72c4:	bcc.n	72d4 <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    72c6:	cmp	r0, #0
    72c8:	bne.n	728c <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    72ca:	movs	r3, #0
  return str - name;
    72cc:	sub.w	r0, r4, r8
  *str = '\0';
    72d0:	strb	r3, [r4, #0]
  return str - name;
    72d2:	b.n	7220 <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    72d4:	cmp.w	r2, #1024	; 0x400
    72d8:	bcs.n	7232 <FatFile::getName8(char*, unsigned int)+0x2e>
    72da:	mov	r5, r0
    72dc:	b.n	729c <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    72de:	subs	r7, #1
  char* str = name;
    72e0:	mov	r4, r8
    72e2:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    72e6:	add	r7, r8
    72e8:	b.n	72ae <FatFile::getName8(char*, unsigned int)+0xaa>
    72ea:	nop
    72ec:	.word	0x000ffc00

000072f0 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    72f0:	b.w	7204 <FatFile::getName8(char*, unsigned int)>

000072f4 <FatFile::openRoot(FatVolume*) [clone .part.0]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    72f4:	push	{r3, r4, r5, lr}
    72f6:	mov	r5, r1
    72f8:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    72fa:	movs	r2, #36	; 0x24
    72fc:	movs	r1, #0
    72fe:	bl	a528 <memset>

  m_vol = vol;
    7302:	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartSector;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
    7304:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    7306:	cmp	r3, #16
    7308:	beq.n	7312 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1e>
    730a:	cmp	r3, #32
    730c:	beq.n	731c <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    730e:	cmp	r3, #12
    7310:	bne.n	7320 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x2c>
    7312:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    7314:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7316:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    7318:	strb	r0, [r4, #2]
  return true;

 fail:
  return false;
}
    731a:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    731c:	movs	r3, #64	; 0x40
    731e:	b.n	7314 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x20>
    7320:	movs	r0, #0
    7322:	b.n	731a <FatFile::openRoot(FatVolume*) [clone .part.0]+0x26>

00007324 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    7324:	push	{r4, lr}
    7326:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7328:	adds	r0, #40	; 0x28
    732a:	bl	5a20 <FsCache::sync()>
    732e:	cbz	r0, 7346 <FatPartition::cacheSync()+0x22>
    7330:	add.w	r0, r4, #568	; 0x238
    7334:	bl	5a20 <FsCache::sync()>
    7338:	cbz	r0, 7346 <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    733a:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    733c:	ldr	r3, [r0, #0]
  }
    733e:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    7342:	ldr	r3, [r3, #32]
    7344:	bx	r3
  }
    7346:	movs	r0, #0
    7348:	pop	{r4, pc}

0000734a <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    734a:	mov	r2, r0
bool FatFile::addCluster() {
    734c:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    734e:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    7352:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    7354:	ldr	r0, [r0, #8]
    7356:	mov	r1, r5
    7358:	bl	8084 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    735c:	cbz	r0, 7370 <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    735e:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    7360:	cbnz	r5, 7372 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7362:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7366:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7368:	ldrb	r3, [r4, #2]
    736a:	orn	r3, r3, #127	; 0x7f
    736e:	strb	r3, [r4, #2]
}
    7370:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    7372:	adds	r5, #1
    7374:	ldr	r2, [r4, #16]
    7376:	cmp	r2, r5
    7378:	beq.n	7368 <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    737a:	bic.w	r3, r3, #64	; 0x40
    737e:	b.n	7366 <FatFile::addCluster()+0x1c>

00007380 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    7380:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    7382:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    7384:	mov	r4, r0
  if (isRootFixed()) {
    7386:	ands.w	r5, r5, #32
    738a:	beq.n	7392 <FatFile::addDirCluster()+0x12>
  return false;
    738c:	movs	r6, #0
}
    738e:	mov	r0, r6
    7390:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    7392:	ldr	r2, [r0, #20]
    7394:	ldr	r3, [pc, #84]	; (73ec <FatFile::addDirCluster()+0x6c>)
    7396:	cmp	r2, r3
    7398:	bcs.n	738c <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    739a:	bl	734a <FatFile::addCluster()>
    739e:	mov	r6, r0
    73a0:	cmp	r0, #0
    73a2:	beq.n	738c <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    73a4:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    73a6:	ldr	r3, [r4, #16]
    73a8:	ldrb	r1, [r2, #6]
    73aa:	subs	r3, #2
    73ac:	ldr	r7, [r2, #20]
    73ae:	lsls	r3, r1
    73b0:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    73b2:	ldr	r0, [r4, #8]
    73b4:	uxtb	r1, r5
    73b6:	ldrb	r3, [r0, #4]
    73b8:	cmp	r3, r1
    73ba:	bhi.n	73ce <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    73bc:	ldrb	r2, [r0, #6]
    73be:	mov.w	r3, #512	; 0x200
    73c2:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    73c4:	ldr	r2, [r4, #20]
    73c6:	uxtah	r3, r2, r3
    73ca:	str	r3, [r4, #20]
  return true;
    73cc:	b.n	738e <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    73ce:	movs	r2, #5
    73d0:	add	r1, r7
    73d2:	adds	r0, #40	; 0x28
    if (!pc) {
    73d4:	adds	r5, #1
    73d6:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
    73da:	cmp	r0, #0
    73dc:	beq.n	738c <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    73de:	mov.w	r2, #512	; 0x200
    73e2:	movs	r1, #0
    73e4:	bl	a528 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    73e8:	b.n	73b2 <FatFile::addDirCluster()+0x32>
    73ea:	nop
    73ec:	.word	0x001ffe00

000073f0 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    73f0:	push	{r4, lr}
    73f2:	mov	r4, r0
    73f4:	ldr	r0, [r0, #8]
    73f6:	mov	r2, r1
    73f8:	adds	r0, #40	; 0x28
    73fa:	ldr	r1, [r4, #24]
    73fc:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7400:	cbz	r0, 740c <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    7402:	ldrh	r3, [r4, #4]
    7404:	and.w	r3, r3, #15
    7408:	add.w	r0, r0, r3, lsl #5
}
    740c:	pop	{r4, pc}

0000740e <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    740e:	ldrb	r3, [r0, #0]
    7410:	cbnz	r3, 7416 <FatFile::openRoot(FatVolume*)+0x8>
    7412:	b.w	72f4 <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    7416:	movs	r0, #0
    7418:	bx	lr

0000741a <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    741a:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    741c:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    741e:	mov	r4, r0
    7420:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    7422:	cbnz	r3, 742e <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    7424:	ldr	r1, [r1, #8]
}
    7426:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    742a:	b.w	740e <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    742e:	movs	r2, #36	; 0x24
    7430:	movs	r1, #0
    7432:	bl	a528 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    7436:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    7438:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    743a:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    743c:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    743e:	ldr	r3, [r5, #8]
    7440:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    7442:	ldr	r3, [r5, #12]
    7444:	str	r3, [r4, #32]
}
    7446:	pop	{r3, r4, r5, pc}

00007448 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    7448:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    744c:	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    7450:	ldrb	r3, [r0, #2]
    7452:	mov	r4, r0
    7454:	sub	sp, #12
    7456:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    7458:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    745a:	mov	r5, r2
  if (!isReadable()) {
    745c:	bpl.n	7542 <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    745e:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    7460:	lsls	r1, r3, #28
    7462:	bpl.n	748c <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    7464:	ldr	r3, [r4, #28]
    7466:	ldr	r2, [r4, #20]
    7468:	subs	r3, r3, r2
    746a:	cmp	r5, r3
    746c:	it	cs
    746e:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7470:	add.w	r3, r4, #16
  toRead = nbyte;
    7474:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    7476:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    747a:	vmov	s16, r3
  while (toRead) {
    747e:	cbnz	r6, 749e <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    7480:	subs	r0, r5, r6

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    7482:	add	sp, #12
    7484:	vpop	{d8}
    7488:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    748c:	lsls	r2, r3, #26
    748e:	bpl.n	7470 <FatFile::read(void*, unsigned int)+0x28>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    7490:	ldr	r3, [r4, #8]
    7492:	ldrh	r2, [r3, #10]
    7494:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    7496:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    749a:	uxth	r3, r3
    749c:	b.n	746a <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    749e:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    74a0:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    74a2:	lsls	r3, r2, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    74a4:	ldr	r0, [r4, #8]
    74a6:	ubfx	fp, r7, #0, #9
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    74aa:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    74ae:	bpl.n	74e8 <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart()
    74b0:	ldr	r2, [r0, #32]
    74b2:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    74b4:	ldr.w	sl, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    74b8:	cmp.w	fp, #0
    74bc:	bne.n	7550 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    74be:	cmp.w	r6, #512	; 0x200
    74c2:	bcc.n	7550 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    74c4:	ldr.w	r2, [sl, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    74c8:	cmp	r1, r2
    74ca:	beq.n	7550 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    74cc:	cmp.w	r6, #1024	; 0x400
    74d0:	bcs.n	7580 <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    74d2:	ldr.w	r0, [sl, #44]	; 0x2c
    74d6:	mov	r2, r8
    74d8:	ldr	r3, [r0, #0]
    74da:	ldr	r3, [r3, #16]
    74dc:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    74de:	cmp	r0, #0
    74e0:	beq.n	7542 <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    74e2:	mov.w	r7, #512	; 0x200
    74e6:	b.n	7574 <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    74e8:	ldrb.w	r9, [r0, #5]
    74ec:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    74f0:	cmp.w	fp, #0
    74f4:	bne.n	7508 <FatFile::read(void*, unsigned int)+0xc0>
    74f6:	cmp.w	r9, #0
    74fa:	bne.n	7508 <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    74fc:	cbnz	r7, 751a <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    74fe:	lsls	r2, r2, #25
    return m_rootDirStart;
    7500:	ite	mi
    7502:	ldrmi	r2, [r0, #32]
    7504:	ldrpl	r2, [r4, #32]
    7506:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7508:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    750a:	ldr	r1, [r4, #16]
    750c:	ldrb	r0, [r2, #6]
    750e:	subs	r1, #2
    7510:	ldr	r2, [r2, #20]
    7512:	lsls	r1, r0
    7514:	add	r1, r2
    7516:	add	r1, r9
    7518:	b.n	74b4 <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    751a:	lsls	r3, r2, #28
          m_curCluster++;
    751c:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    751e:	bpl.n	752c <FatFile::read(void*, unsigned int)+0xe4>
    7520:	ldrb	r2, [r4, #2]
    7522:	lsls	r7, r2, #25
    7524:	bpl.n	752c <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    7526:	adds	r1, #1
    7528:	str	r1, [r4, #16]
    752a:	b.n	7508 <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    752c:	vmov	r2, s16
    7530:	bl	7ef6 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7534:	cmp	r0, #0
    7536:	blt.n	7542 <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    7538:	bne.n	7508 <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    753a:	ldrb	r3, [r4, #0]
    753c:	tst.w	r3, #112	; 0x70
    7540:	bne.n	7480 <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    7542:	ldrb	r3, [r4, #1]
  return -1;
    7544:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    7548:	orr.w	r3, r3, #2
    754c:	strb	r3, [r4, #1]
  return -1;
    754e:	b.n	7482 <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    7550:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    7554:	movs	r2, #0
    7556:	add.w	r0, sl, #40	; 0x28
    755a:	cmp	r7, r6
    755c:	it	cs
    755e:	movcs	r7, r6
    7560:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7564:	cmp	r0, #0
    7566:	beq.n	7542 <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    7568:	add.w	r1, r0, fp
    756c:	mov	r2, r7
    756e:	mov	r0, r8
    7570:	bl	a56c <memcpy>
    m_curPosition += n;
    7574:	ldr	r3, [r4, #20]
    dst += n;
    7576:	add	r8, r7
    toRead -= n;
    7578:	subs	r6, r6, r7
    m_curPosition += n;
    757a:	add	r3, r7
    757c:	str	r3, [r4, #20]
    toRead -= n;
    757e:	b.n	747e <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    7580:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    7582:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    7584:	lsls	r0, r0, #26
    7586:	bmi.n	7596 <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    7588:	ldrb.w	r0, [sl, #4]
    758c:	sub.w	r0, r0, r9
    7590:	cmp	r3, r0
    7592:	it	cs
    7594:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    7596:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    7598:	mov.w	r7, r3, lsl #9
    759c:	bls.n	75b2 <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    759e:	ldr.w	r0, [sl, #44]	; 0x2c
    75a2:	ldr	r2, [r0, #0]
    75a4:	ldr.w	sl, [r2, #20]
    75a8:	mov	r2, r8
    75aa:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    75ac:	cmp	r0, #0
    75ae:	bne.n	7574 <FatFile::read(void*, unsigned int)+0x12c>
    75b0:	b.n	7542 <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    75b2:	adds	r0, r1, r3
    75b4:	cmp	r2, r0
    75b6:	bcs.n	759e <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    75b8:	add.w	r0, sl, #40	; 0x28
    75bc:	strd	r1, r3, [sp]
    75c0:	bl	5a20 <FsCache::sync()>
    75c4:	ldrd	r1, r3, [sp]
    75c8:	cmp	r0, #0
    75ca:	bne.n	759e <FatFile::read(void*, unsigned int)+0x156>
    75cc:	b.n	7542 <FatFile::read(void*, unsigned int)+0xfa>

000075ce <FatFile::peek()>:
int FatFile::peek() {
    75ce:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    75d0:	movs	r2, #1
    75d2:	add.w	r1, sp, #7
    75d6:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    75d8:	ldrd	r5, r6, [r0, #16]
    75dc:	bl	7448 <FatFile::read(void*, unsigned int)>
    75e0:	cmp	r0, #1
    75e2:	ite	eq
    75e4:	ldrbeq.w	r0, [sp, #7]
    75e8:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    75ec:	strd	r5, r6, [r4, #16]
}
    75f0:	add	sp, #8
    75f2:	pop	{r4, r5, r6, pc}

000075f4 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    75f4:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    75f6:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    75fa:	push	{r0, r1, r2, r4, r5, lr}
    75fc:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    75fe:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    7602:	beq.n	7606 <FatFile::readDirCache(bool)+0x12>
    7604:	cbnz	r1, 762e <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    7606:	movs	r2, #1
    7608:	add.w	r1, sp, #7
    760c:	mov	r0, r4
    760e:	bl	7448 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    7612:	sxtb	r0, r0
    7614:	cmp	r0, #1
    7616:	beq.n	761e <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    7618:	movs	r0, #0
}
    761a:	add	sp, #12
    761c:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    761e:	ldr	r3, [r4, #20]
    7620:	adds	r3, #31
    return m_buffer;
    7622:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    7624:	str	r3, [r4, #20]
    7626:	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7628:	add.w	r0, r0, r5, lsl #5
    762c:	b.n	761a <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    762e:	adds	r3, #32
    7630:	b.n	7622 <FatFile::readDirCache(bool)+0x2e>

00007632 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    7632:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7636:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    7638:	ldrb	r1, [r0, #0]
    763a:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    763c:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    763e:	cbz	r1, 7662 <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    7640:	ldr	r0, [r0, #20]
    7642:	cmp	r0, r5
    7644:	beq.n	7654 <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    7646:	cbnz	r5, 7658 <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    7648:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    764a:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    764c:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    764e:	bic.w	r3, r3, #32
    7652:	strb	r3, [r4, #2]
    return true;
    7654:	movs	r0, #1
    7656:	b.n	7666 <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    7658:	lsls	r3, r1, #28
    765a:	bpl.n	766a <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    765c:	ldr	r3, [r4, #28]
    765e:	cmp	r3, r5
    7660:	bcs.n	767a <FatFile::seekSet(unsigned long)+0x48>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    7662:	movs	r0, #0
  m_curCluster = tmp;
    7664:	str	r7, [r4, #16]
}
    7666:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    766a:	lsls	r6, r1, #26
    766c:	bpl.n	767a <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    766e:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    7670:	ldrh	r3, [r3, #10]
    7672:	cmp.w	r5, r3, lsl #5
    7676:	bhi.n	7662 <FatFile::seekSet(unsigned long)+0x30>
    7678:	b.n	764a <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    767a:	ldr.w	ip, [r4, #8]
    767e:	subs	r6, r5, #1
  if (isContiguous()) {
    7680:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    7682:	ldrb.w	r3, [ip, #6]
    7686:	lsls	r2, r2, #25
    7688:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    768c:	uxtb	r3, r3
    768e:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    7692:	bpl.n	769c <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    7694:	ldr	r3, [r4, #32]
    7696:	add	r3, r6
    7698:	str	r3, [r4, #16]
    goto done;
    769a:	b.n	764a <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    769c:	subs	r2, r0, #1
    769e:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    76a2:	cmp	r6, r3
    76a4:	bcc.n	76a8 <FatFile::seekSet(unsigned long)+0x76>
    76a6:	cbnz	r0, 76ce <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    76a8:	lsls	r3, r1, #25
    return m_rootDirStart;
    76aa:	ite	mi
    76ac:	ldrmi.w	r3, [ip, #32]
    76b0:	ldrpl	r3, [r4, #32]
    76b2:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    76b4:	add.w	r8, r4, #16
  while (nNew--) {
    76b8:	cmp	r6, #0
    76ba:	beq.n	764a <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    76bc:	mov	r2, r8
    76be:	ldr	r1, [r4, #16]
    76c0:	ldr	r0, [r4, #8]
    76c2:	subs	r6, #1
    76c4:	bl	7ef6 <FatPartition::fatGet(unsigned long, unsigned long*)>
    76c8:	cmp	r0, #0
    76ca:	bgt.n	76b8 <FatFile::seekSet(unsigned long)+0x86>
    76cc:	b.n	7662 <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    76ce:	subs	r6, r6, r3
    76d0:	b.n	76b4 <FatFile::seekSet(unsigned long)+0x82>

000076d2 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    76d2:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    76d4:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    76d6:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    76d8:	lsls	r2, r3, #27
    76da:	bpl.n	76f0 <FatFile::rmdir()+0x1e>
    seekSet(0);
    76dc:	movs	r1, #0
    76de:	bl	7632 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    76e2:	movs	r1, #1
    76e4:	mov	r0, r4
    76e6:	bl	75f4 <FatFile::readDirCache(bool)>
    if (!dir) {
    76ea:	cbnz	r0, 76f4 <FatFile::rmdir()+0x22>
      if (!getError()) {
    76ec:	ldrb	r3, [r4, #1]
    76ee:	cbz	r3, 7708 <FatFile::rmdir()+0x36>
}
    76f0:	movs	r0, #0
    76f2:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    76f4:	ldrb	r3, [r0, #0]
    76f6:	cbz	r3, 7708 <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    76f8:	cmp	r3, #229	; 0xe5
    76fa:	beq.n	76e2 <FatFile::rmdir()+0x10>
    76fc:	cmp	r3, #46	; 0x2e
    76fe:	beq.n	76e2 <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    7700:	ldrb	r3, [r0, #11]
    7702:	lsls	r3, r3, #28
    7704:	bmi.n	76e2 <FatFile::rmdir()+0x10>
    7706:	b.n	76f0 <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    7708:	movs	r3, #8
  return remove();
    770a:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    770c:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    770e:	ldrb	r3, [r4, #2]
    7710:	orr.w	r3, r3, #2
    7714:	strb	r3, [r4, #2]
}
    7716:	ldmia.w	sp!, {r4, lr}
  return remove();
    771a:	b.w	89b0 <FatFile::remove()>

0000771e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    771e:	push	{r3, r4, r5, r6, r7, lr}
    7720:	mov	r7, r1
    7722:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    7724:	movs	r1, #0
    7726:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    7728:	mov	r4, r0
    772a:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    772c:	bl	a528 <memset>
  m_vol = dirFile->m_vol;
    7730:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    7732:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    7734:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    7736:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    773a:	str	r3, [r4, #12]
    773c:	add.w	r3, r0, #56	; 0x38
  m_vol = dirFile->m_vol;
    7740:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    7742:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7746:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    7748:	lsls	r1, r2, #28
    774a:	bmi.n	77c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    774c:	and.w	r2, r2, #23
    7750:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    7752:	ldrb	r1, [r3, #11]
    7754:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    7758:	itt	eq
    775a:	orreq.w	r2, r2, #8
    775e:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    7760:	ldrb.w	r2, [sp, #24]
    7764:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    7766:	and.w	r2, r5, #3
    776a:	cmp	r2, #1
    776c:	beq.n	77b2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    776e:	cmp	r2, #2
    7770:	beq.n	77b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    7772:	cbnz	r2, 77c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    7774:	lsls	r2, r5, #21
    7776:	bmi.n	77c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    7778:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    777a:	lsls	r7, r2, #30
    777c:	bpl.n	7788 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    777e:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    7780:	lsls	r6, r1, #27
    7782:	bmi.n	77c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    7784:	lsls	r1, r1, #31
    7786:	bmi.n	77c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7788:	and.w	r1, r5, #8
    778c:	orrs	r2, r1
    778e:	strb	r2, [r4, #2]
    return m_sector;
    7790:	ldr	r2, [r0, #52]	; 0x34
                 | getLe16(dir->firstClusterLow);
    7792:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    7794:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7796:	ldrh	r2, [r3, #20]
    7798:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    779c:	lsls	r2, r5, #21
    779e:	bpl.n	77ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    77a0:	cbnz	r1, 77ba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    77a2:	ldrb	r3, [r4, #2]
    77a4:	orn	r3, r3, #127	; 0x7f
    77a8:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    77aa:	lsls	r3, r5, #17
    77ac:	bmi.n	77d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    77ae:	movs	r0, #1
}
    77b0:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    77b2:	movs	r2, #2
    77b4:	b.n	777a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    77b6:	movs	r2, #3
    77b8:	b.n	777a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    77ba:	bl	8106 <FatPartition::freeChain(unsigned long)>
    77be:	cmp	r0, #0
    77c0:	bne.n	77a2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    77c2:	movs	r0, #0
    77c4:	strb	r0, [r4, #0]
  m_flags = 0;
    77c6:	strb	r0, [r4, #2]
  return false;
    77c8:	b.n	77b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    77ca:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    77cc:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    77ce:	str	r3, [r4, #28]
    77d0:	b.n	77aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    77d2:	ldr	r1, [r4, #28]
    77d4:	mov	r0, r4
    77d6:	bl	7632 <FatFile::seekSet(unsigned long)>
    77da:	cmp	r0, #0
    77dc:	bne.n	77ae <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    77de:	b.n	77c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

000077e0 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    77e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    77e4:	mov	r3, r2
  bool isOpen() const {return m_attributes;}
    77e6:	ldrb	r2, [r0, #0]
    77e8:	sub	sp, #20
    77ea:	mov	r7, r0
    77ec:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    77ee:	cmp	r2, #0
    77f0:	bne.n	7878 <FatFile::openNext(FatFile*, int)+0x98>
    77f2:	ldrb	r2, [r1, #0]
    77f4:	tst.w	r2, #112	; 0x70
    77f8:	beq.n	7878 <FatFile::openNext(FatFile*, int)+0x98>
    77fa:	ldr	r4, [r1, #20]
    77fc:	ands.w	r4, r4, #31
    7800:	bne.n	7878 <FatFile::openNext(FatFile*, int)+0x98>
    7802:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    7804:	movs	r1, #0
    7806:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    7808:	ldr.w	r8, [r6, #20]
    780c:	str	r3, [sp, #12]
    780e:	bl	75f4 <FatFile::readDirCache(bool)>
    if (!dir) {
    7812:	cbz	r0, 7878 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    7814:	ldrb	r1, [r0, #0]
    7816:	cbz	r1, 7878 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    7818:	cmp	r1, #46	; 0x2e
    781a:	ldr	r3, [sp, #12]
    781c:	beq.n	7862 <FatFile::openNext(FatFile*, int)+0x82>
    781e:	cmp	r1, #229	; 0xe5
    7820:	beq.n	7862 <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7822:	ldrb	r2, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    7824:	ands.w	ip, r2, #8
    7828:	bne.n	7866 <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    782a:	cbz	r4, 784e <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    782c:	subs	r1, r0, #1
    782e:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7832:	mov.w	r2, ip, lsl #7
    7836:	ldrb.w	r0, [r1, #1]!
    783a:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    783e:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7840:	uxtab	r2, r0, r2
    7844:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    7848:	bne.n	7832 <FatFile::openNext(FatFile*, int)+0x52>
    784a:	cmp	r9, ip
    784c:	bne.n	7878 <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    784e:	ubfx	r2, r8, #5, #16
    7852:	mov	r1, r6
    7854:	mov	r0, r7
    7856:	str	r4, [sp, #0]
    7858:	bl	771e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    785c:	add	sp, #20
    785e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    7862:	movs	r4, #0
    7864:	b.n	7804 <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isLongName(dir)) {
    7866:	cmp	r2, #15
    7868:	bne.n	7862 <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    786a:	lsls	r2, r1, #25
    786c:	bpl.n	7804 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    786e:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    7872:	ldrb.w	r9, [r0, #13]
    7876:	b.n	7804 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    7878:	movs	r0, #0
    787a:	b.n	785c <FatFile::openNext(FatFile*, int)+0x7c>

0000787c <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    787c:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    787e:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    7880:	mov	r4, r0
  if (!isOpen()) {
    7882:	cmp	r3, #0
    7884:	beq.n	78f2 <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7886:	ldrsb.w	r3, [r0, #2]
    788a:	cmp	r3, #0
    788c:	bge.n	78e6 <FatFile::sync()+0x6a>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    788e:	movs	r1, #1
    7890:	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7894:	mov	r5, r0
    7896:	cbnz	r0, 78a6 <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7898:	ldrb	r3, [r4, #1]
  return false;
    789a:	movs	r0, #0
  m_error |= WRITE_ERROR;
    789c:	orr.w	r3, r3, #1
    78a0:	strb	r3, [r4, #1]
}
    78a2:	add	sp, #12
    78a4:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    78a6:	ldrb	r3, [r0, #0]
    78a8:	cmp	r3, #229	; 0xe5
    78aa:	beq.n	7898 <FatFile::sync()+0x1c>
    if (isFile()) {
    78ac:	ldrb	r3, [r4, #0]
    78ae:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    78b0:	itt	mi
    78b2:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    78b4:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    78b6:	ldr	r3, [r4, #32]
    78b8:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    78ba:	lsrs	r3, r3, #16
    78bc:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    78be:	ldr	r3, [pc, #56]	; (78f8 <FatFile::sync()+0x7c>)
    78c0:	ldr	r3, [r3, #0]
    78c2:	cbz	r3, 78de <FatFile::sync()+0x62>
      FsDateTime::callback(&date, &time, &ms10);
    78c4:	add.w	r2, sp, #3
    78c8:	add.w	r1, sp, #6
    78cc:	add	r0, sp, #4
    78ce:	blx	r3
      setLe16(dir->modifyDate, date);
    78d0:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    78d4:	strh	r3, [r5, #24]
    78d6:	strh	r3, [r5, #18]
    78d8:	ldrh.w	r3, [sp, #6]
    78dc:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    78de:	ldrb	r3, [r4, #2]
    78e0:	and.w	r3, r3, #127	; 0x7f
    78e4:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    78e6:	ldr	r0, [r4, #8]
    78e8:	bl	7324 <FatPartition::cacheSync()>
    78ec:	cmp	r0, #0
    78ee:	beq.n	7898 <FatFile::sync()+0x1c>
    78f0:	b.n	78a2 <FatFile::sync()+0x26>
    return true;
    78f2:	movs	r0, #1
    78f4:	b.n	78a2 <FatFile::sync()+0x26>
    78f6:	nop
    78f8:	.word	0x2000fbfc

000078fc <FatFile::close()>:
bool FatFile::close() {
    78fc:	push	{r4, lr}
    78fe:	mov	r4, r0
  bool rtn = sync();
    7900:	bl	787c <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7904:	movs	r3, #0
    7906:	strb	r3, [r4, #0]
  m_flags = 0;
    7908:	strb	r3, [r4, #2]
}
    790a:	pop	{r4, pc}

0000790c <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    790c:	push	{r4, r5, r6, r7, lr}
    790e:	mov	r7, r3
    7910:	sub	sp, #84	; 0x54
  FatFile() {}
    7912:	movs	r3, #0
    7914:	mov	r6, r0
    7916:	mov	r4, r1
    7918:	str	r2, [sp, #4]
    791a:	str	r3, [sp, #8]
    791c:	strh.w	r3, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    7920:	ldrb	r3, [r0, #0]
    7922:	cbz	r3, 792a <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    7924:	movs	r0, #0
}
    7926:	add	sp, #84	; 0x54
    7928:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    792a:	ldrb	r3, [r1, #0]
    792c:	tst.w	r3, #112	; 0x70
    7930:	beq.n	7924 <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    7932:	ldrb	r3, [r2, #0]
    7934:	cmp	r3, #47	; 0x2f
    7936:	bne.n	795e <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    7938:	ldr	r2, [sp, #4]
    793a:	ldrb	r3, [r2, #0]
    793c:	cmp	r3, #47	; 0x2f
    793e:	beq.n	794c <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    7940:	ldr	r1, [r4, #8]
    if (*path == 0) {
    7942:	cbnz	r3, 7952 <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    7944:	mov	r0, r6
    7946:	bl	740e <FatFile::openRoot(FatVolume*)>
    794a:	b.n	7926 <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    794c:	adds	r2, #1
    794e:	str	r2, [sp, #4]
    7950:	b.n	7938 <FatFile::open(FatFile*, char const*, int)+0x2c>
  if (isOpen()) {
    7952:	add	r0, sp, #8
    7954:	bl	72f4 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7958:	cmp	r0, #0
    795a:	beq.n	7924 <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    795c:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    795e:	add	r3, sp, #4
    7960:	add	r2, sp, #44	; 0x2c
    7962:	ldr	r1, [sp, #4]
    7964:	mov	r0, r6
    7966:	bl	8904 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    796a:	cmp	r0, #0
    796c:	beq.n	7924 <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    796e:	ldr	r3, [sp, #4]
    7970:	ldrb	r3, [r3, #0]
    7972:	cbz	r3, 799c <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7974:	movs	r3, #0
    7976:	add	r2, sp, #44	; 0x2c
    7978:	mov	r1, r4
    797a:	mov	r0, r6
    797c:	bl	8680 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7980:	cmp	r0, #0
    7982:	beq.n	7924 <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    7984:	mov	r5, r6
    7986:	add	r4, sp, #8
    7988:	ldmia	r5!, {r0, r1, r2, r3}
    798a:	stmia	r4!, {r0, r1, r2, r3}
    798c:	ldmia	r5!, {r0, r1, r2, r3}
    798e:	stmia	r4!, {r0, r1, r2, r3}
    7990:	ldr	r3, [r5, #0]
    close();
    7992:	mov	r0, r6
    tmpDir = *this;
    7994:	str	r3, [r4, #0]
    close();
    7996:	bl	78fc <FatFile::close()>
  while (1) {
    799a:	b.n	795c <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    799c:	mov	r3, r7
    799e:	add	r2, sp, #44	; 0x2c
    79a0:	mov	r1, r4
    79a2:	mov	r0, r6
    79a4:	bl	8680 <FatFile::open(FatFile*, FatLfn_t*, int)>
    79a8:	b.n	7926 <FatFile::open(FatFile*, char const*, int)+0x1a>

000079aa <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    79aa:	cbz	r1, 79b4 <FatFile::open(FatVolume*, char const*, int)+0xa>
    79ac:	add.w	r1, r1, #1096	; 0x448
    79b0:	b.w	790c <FatFile::open(FatFile*, char const*, int)>
}
    79b4:	mov	r0, r1
    79b6:	bx	lr

000079b8 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    79b8:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    79ba:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    79bc:	sub	sp, #36	; 0x24
    79be:	mov	r4, r0
    79c0:	mov	r6, r1
  if (!parent->isDir()) {
    79c2:	tst.w	r3, #112	; 0x70
    79c6:	bne.n	79ce <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    79c8:	movs	r0, #0
}
    79ca:	add	sp, #36	; 0x24
    79cc:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    79ce:	movw	r3, #2562	; 0xa02
    79d2:	bl	8680 <FatFile::open(FatFile*, FatLfn_t*, int)>
    79d6:	cmp	r0, #0
    79d8:	beq.n	79c8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    79da:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    79dc:	movs	r5, #16
  if (!addDirCluster()) {
    79de:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    79e0:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    79e2:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    79e4:	bl	7380 <FatFile::addDirCluster()>
    79e8:	cmp	r0, #0
    79ea:	beq.n	79c8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    79ec:	ldr	r3, [r4, #16]
    seekSet(0);
    79ee:	movs	r1, #0
    79f0:	mov	r0, r4
    79f2:	str	r3, [r4, #32]
    79f4:	bl	7632 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    79f8:	mov	r0, r4
    79fa:	bl	787c <FatFile::sync()>
    79fe:	cmp	r0, #0
    7a00:	beq.n	79c8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7a02:	mov	r1, r7
    7a04:	mov	r0, r4
    7a06:	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7a0a:	cmp	r0, #0
    7a0c:	beq.n	79c8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    7a0e:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7a10:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    7a12:	mov	r3, r0
    7a14:	add.w	ip, r0, #32
    7a18:	mov	r5, r2
    7a1a:	ldr	r0, [r3, #0]
    7a1c:	adds	r3, #8
    7a1e:	ldr.w	r1, [r3, #-4]
    7a22:	mov	r7, r2
    7a24:	cmp	r3, ip
    7a26:	stmia	r7!, {r0, r1}
    7a28:	mov	r2, r7
    7a2a:	bne.n	7a1a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    7a2c:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    7a30:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7a32:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    7a34:	movs	r2, #1
    dot.name[i] = ' ';
    7a36:	str.w	r3, [sp, #1]
    7a3a:	adds	r0, #40	; 0x28
    7a3c:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7a40:	subs	r1, #2
    7a42:	strh.w	r3, [sp, #9]
    7a46:	ldrb.w	r3, [r0, #-34]
    7a4a:	lsls	r1, r3
    7a4c:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    7a50:	add	r1, r3
    7a52:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7a56:	mov	r3, r0
    7a58:	cmp	r0, #0
    7a5a:	beq.n	79c8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    7a5c:	movs	r2, #46	; 0x2e
    7a5e:	mov	ip, r5
    7a60:	mov	r7, r0
    7a62:	add.w	lr, sp, #32
    7a66:	strb.w	r2, [sp]
    7a6a:	mov	r2, ip
    7a6c:	adds	r7, #8
    7a6e:	ldmia	r2!, {r0, r1}
    7a70:	cmp	r2, lr
    7a72:	str.w	r0, [r7, #-8]
    7a76:	str.w	r1, [r7, #-4]
    7a7a:	mov	ip, r2
    7a7c:	bne.n	7a6a <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    7a7e:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    7a80:	adds	r3, #32
  dot.name[1] = '.';
    7a82:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7a86:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    7a88:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7a8a:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7a8c:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    7a90:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7a92:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    7a96:	mov	r5, r2
    7a98:	adds	r3, #8
    7a9a:	ldmia	r5!, {r0, r1}
    7a9c:	cmp	r5, r6
    7a9e:	str.w	r0, [r3, #-8]
    7aa2:	str.w	r1, [r3, #-4]
    7aa6:	mov	r2, r5
    7aa8:	bne.n	7a96 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    7aaa:	ldr	r0, [r4, #8]
    7aac:	bl	7324 <FatPartition::cacheSync()>
    7ab0:	b.n	79ca <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

00007ab2 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7ab2:	push	{r4, r5, r6, r7, lr}
    7ab4:	mov	r7, r3
    7ab6:	sub	sp, #84	; 0x54
    7ab8:	movs	r3, #0
    7aba:	mov	r6, r0
    7abc:	mov	r4, r1
    7abe:	str	r2, [sp, #4]
    7ac0:	strh.w	r3, [sp, #20]
  FatFile() {}
    7ac4:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    7ac6:	ldrb	r3, [r0, #0]
    7ac8:	cbz	r3, 7ad0 <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    7aca:	movs	r0, #0
}
    7acc:	add	sp, #84	; 0x54
    7ace:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    7ad0:	ldrb	r3, [r1, #0]
    7ad2:	tst.w	r3, #112	; 0x70
    7ad6:	beq.n	7aca <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    7ad8:	ldrb	r3, [r2, #0]
    7ada:	cmp	r3, #47	; 0x2f
    7adc:	bne.n	7af4 <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    7ade:	ldr	r2, [sp, #4]
    7ae0:	ldrb	r3, [r2, #0]
    7ae2:	cmp	r3, #47	; 0x2f
    7ae4:	beq.n	7b30 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
  if (isOpen()) {
    7ae6:	ldr	r1, [r4, #8]
    7ae8:	add	r0, sp, #44	; 0x2c
    7aea:	bl	72f4 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7aee:	cmp	r0, #0
    7af0:	beq.n	7aca <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    7af2:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    7af4:	add	r3, sp, #4
    7af6:	add	r2, sp, #8
    7af8:	ldr	r1, [sp, #4]
    7afa:	mov	r0, r6
    7afc:	bl	8904 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7b00:	cmp	r0, #0
    7b02:	beq.n	7aca <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    7b04:	ldr	r3, [sp, #4]
    7b06:	ldrb	r3, [r3, #0]
    7b08:	cbz	r3, 7b4a <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    7b0a:	movs	r3, #0
    7b0c:	add	r2, sp, #8
    7b0e:	mov	r1, r4
    7b10:	mov	r0, r6
    7b12:	bl	8680 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7b16:	cbz	r0, 7b36 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    7b18:	mov	r5, r6
    7b1a:	add	r4, sp, #44	; 0x2c
    7b1c:	ldmia	r5!, {r0, r1, r2, r3}
    7b1e:	stmia	r4!, {r0, r1, r2, r3}
    7b20:	ldmia	r5!, {r0, r1, r2, r3}
    7b22:	stmia	r4!, {r0, r1, r2, r3}
    7b24:	ldr	r3, [r5, #0]
    close();
    7b26:	mov	r0, r6
    tmpDir = *this;
    7b28:	str	r3, [r4, #0]
    close();
    7b2a:	bl	78fc <FatFile::close()>
  while (1) {
    7b2e:	b.n	7af2 <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    7b30:	adds	r2, #1
    7b32:	str	r2, [sp, #4]
    7b34:	b.n	7ade <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    7b36:	cmp	r7, #0
    7b38:	beq.n	7aca <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    7b3a:	add	r2, sp, #8
    7b3c:	mov	r1, r4
    7b3e:	mov	r0, r6
    7b40:	bl	79b8 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7b44:	cmp	r0, #0
    7b46:	bne.n	7b18 <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    7b48:	b.n	7aca <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    7b4a:	add	r2, sp, #8
    7b4c:	mov	r1, r4
    7b4e:	mov	r0, r6
    7b50:	bl	79b8 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7b54:	b.n	7acc <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

00007b56 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7b56:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    7b5a:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7b5c:	sub	sp, #108	; 0x6c
    7b5e:	mov.w	r9, #0
    7b62:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    7b64:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7b68:	mov	r7, r1
    7b6a:	mov	r8, r2
    7b6c:	str.w	r9, [sp, #32]
    7b70:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    7b74:	bne.n	7b7e <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    7b76:	movs	r0, #0
}
    7b78:	add	sp, #108	; 0x6c
    7b7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    7b7e:	ldr	r2, [r0, #8]
    7b80:	ldr	r3, [r1, #8]
    7b82:	cmp	r2, r3
    7b84:	bne.n	7b76 <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    7b86:	mov	r6, r4
  sync();
    7b88:	bl	787c <FatFile::sync()>
  oldFile = *this;
    7b8c:	add	r5, sp, #68	; 0x44
    7b8e:	ldmia	r6!, {r0, r1, r2, r3}
    7b90:	stmia	r5!, {r0, r1, r2, r3}
    7b92:	ldmia	r6!, {r0, r1, r2, r3}
    7b94:	stmia	r5!, {r0, r1, r2, r3}
    7b96:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7b98:	mov	r1, r9
    7b9a:	mov	r0, r4
  oldFile = *this;
    7b9c:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7b9e:	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7ba2:	cmp	r0, #0
    7ba4:	beq.n	7b76 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    7ba6:	mov	r2, sp
    7ba8:	mov	r3, r0
    7baa:	add.w	ip, r0, #32
    7bae:	mov	r5, r2
    7bb0:	ldr	r0, [r3, #0]
    7bb2:	adds	r3, #8
    7bb4:	ldr.w	r1, [r3, #-4]
    7bb8:	mov	r6, r2
    7bba:	cmp	r3, ip
    7bbc:	stmia	r6!, {r0, r1}
    7bbe:	mov	r2, r6
    7bc0:	bne.n	7bb0 <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    7bc2:	ldrb	r3, [r4, #0]
    7bc4:	add	r6, sp, #32
    7bc6:	ands.w	r3, r3, #8
    7bca:	beq.n	7be2 <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7bcc:	movw	r3, #2561	; 0xa01
    7bd0:	mov	r2, r8
    7bd2:	mov	r1, r7
    7bd4:	mov	r0, r6
    7bd6:	bl	790c <FatFile::open(FatFile*, char const*, int)>
    7bda:	cmp	r0, #0
    7bdc:	beq.n	7b76 <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    7bde:	movs	r7, #0
    7be0:	b.n	7bf2 <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    7be2:	mov	r2, r8
    7be4:	mov	r1, r7
    7be6:	mov	r0, r6
    7be8:	bl	7ab2 <FatFile::mkdir(FatFile*, char const*, bool)>
    7bec:	cmp	r0, #0
    7bee:	beq.n	7b76 <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    7bf0:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    7bf2:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7bf4:	movs	r1, #1
    7bf6:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    7bf8:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    7bfa:	ldrh.w	r3, [sp, #36]	; 0x24
    7bfe:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    7c00:	ldrb.w	r3, [sp, #35]	; 0x23
    7c04:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    7c06:	ldr	r3, [sp, #44]	; 0x2c
    7c08:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    7c0a:	movs	r3, #0
    7c0c:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    7c10:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7c14:	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7c18:	cmp	r0, #0
    7c1a:	beq.n	7b76 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    7c1c:	add.w	r3, sp, #13
    7c20:	add.w	r2, r0, #13
    7c24:	add.w	r1, sp, #29
    7c28:	ldr.w	ip, [r3], #4
    7c2c:	cmp	r3, r1
    7c2e:	str.w	ip, [r2], #4
    7c32:	bne.n	7c28 <FatFile::rename(FatFile*, char const*)+0xd2>
    7c34:	ldrh	r1, [r3, #0]
    7c36:	strh	r1, [r2, #0]
    7c38:	ldrb	r3, [r3, #2]
    7c3a:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    7c3c:	ldrb.w	r3, [sp, #11]
    7c40:	strb	r3, [r0, #11]
  if (dirCluster) {
    7c42:	cmp	r7, #0
    7c44:	beq.n	7cc2 <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    7c46:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7c48:	subs	r3, r7, #2
    7c4a:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    7c4c:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7c4e:	ldr.w	r1, [r0, #-20]
    7c52:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    7c54:	movs	r2, #0
    7c56:	add	r1, r3
    7c58:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7c5c:	cmp	r0, #0
    7c5e:	beq.n	7b76 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    7c60:	add.w	r2, r0, #32
    7c64:	mov	lr, r5
    7c66:	add.w	r3, r0, #64	; 0x40
    7c6a:	ldr	r0, [r2, #0]
    7c6c:	adds	r2, #8
    7c6e:	ldr.w	r1, [r2, #-4]
    7c72:	mov	ip, lr
    7c74:	cmp	r2, r3
    7c76:	stmia.w	ip!, {r0, r1}
    7c7a:	mov	lr, ip
    7c7c:	bne.n	7c6a <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    7c7e:	mov	r1, r7
    7c80:	ldr	r0, [r4, #8]
    7c82:	bl	8106 <FatPartition::freeChain(unsigned long)>
    7c86:	cmp	r0, #0
    7c88:	beq.w	7b76 <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    7c8c:	ldr	r0, [r4, #8]
    7c8e:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7c90:	ldr	r1, [r4, #32]
    7c92:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    7c94:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7c96:	subs	r1, #2
    7c98:	lsls	r1, r3
    7c9a:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    7c9e:	add	r1, r3
    7ca0:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7ca4:	cmp	r0, #0
    7ca6:	beq.w	7b76 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    7caa:	add.w	r3, r0, #32
    7cae:	mov	r2, r5
    7cb0:	adds	r3, #8
    7cb2:	ldmia	r2!, {r0, r1}
    7cb4:	cmp	r2, r6
    7cb6:	str.w	r0, [r3, #-8]
    7cba:	str.w	r1, [r3, #-4]
    7cbe:	mov	r5, r2
    7cc0:	bne.n	7cae <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    7cc2:	movs	r3, #0
  if (!oldFile.remove()) {
    7cc4:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    7cc6:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    7cc8:	movs	r3, #2
    7cca:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    7cce:	movs	r3, #8
    7cd0:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    7cd4:	bl	89b0 <FatFile::remove()>
    7cd8:	cmp	r0, #0
    7cda:	beq.w	7b76 <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    7cde:	ldr	r0, [r4, #8]
    7ce0:	bl	7324 <FatPartition::cacheSync()>
    7ce4:	b.n	7b78 <FatFile::rename(FatFile*, char const*)+0x22>
	...

00007ce8 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    7ce8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7cec:	ldrb	r3, [r0, #2]
    7cee:	mov	r4, r0
    7cf0:	mov	r9, r1
    7cf2:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    7cf4:	lsls	r5, r3, #30
    7cf6:	bpl.n	7d2e <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7cf8:	lsls	r1, r3, #28
    7cfa:	bmi.n	7d24 <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    7cfc:	ldr	r3, [r4, #20]
    7cfe:	adds	r3, r3, r7
    7d00:	bcs.n	7d2e <FatFile::write(void const*, unsigned int)+0x46>
    7d02:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7d04:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    7d08:	ldr	r3, [r4, #20]
  while (nToWrite) {
    7d0a:	cmp.w	r8, #0
    7d0e:	bne.n	7d3a <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    7d10:	ldr	r2, [r4, #28]
    7d12:	cmp	r2, r3
    7d14:	bcs.w	7e76 <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    7d18:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7d1a:	ldrb	r3, [r4, #2]
    7d1c:	orn	r3, r3, #127	; 0x7f
    7d20:	strb	r3, [r4, #2]
    7d22:	b.n	7e80 <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    7d24:	ldr	r1, [r0, #28]
    7d26:	bl	7632 <FatFile::seekSet(unsigned long)>
    7d2a:	cmp	r0, #0
    7d2c:	bne.n	7cfc <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7d2e:	ldrb	r3, [r4, #1]
  return 0;
    7d30:	movs	r7, #0
  m_error |= WRITE_ERROR;
    7d32:	orr.w	r3, r3, #1
    7d36:	strb	r3, [r4, #1]
  return 0;
    7d38:	b.n	7e80 <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    7d3a:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    7d3c:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    7d40:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    7d42:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    7d44:	ands.w	r6, r6, r3, lsr #9
    7d48:	bne.n	7d60 <FatFile::write(void const*, unsigned int)+0x78>
    7d4a:	cbnz	r5, 7d60 <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    7d4c:	cmp	r1, #0
    7d4e:	beq.n	7dc8 <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    7d50:	ldrb	r2, [r4, #2]
    7d52:	lsls	r2, r2, #25
    7d54:	bpl.n	7db0 <FatFile::write(void const*, unsigned int)+0xc8>
    7d56:	ldr	r2, [r4, #28]
    7d58:	cmp	r2, r3
    7d5a:	bls.n	7db0 <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    7d5c:	adds	r1, #1
    7d5e:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    7d60:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7d64:	ldr	r1, [r4, #16]
    7d66:	ldrb.w	r3, [ip, #6]
    7d6a:	subs	r1, #2
    7d6c:	lsls	r1, r3
    7d6e:	ldr.w	r3, [ip, #20]
    7d72:	add	r1, r3
                      + sectorOfCluster;
    7d74:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    7d76:	cmp	r5, #0
    7d78:	bne.n	7de0 <FatFile::write(void const*, unsigned int)+0xf8>
    7d7a:	cmp.w	r8, #512	; 0x200
    7d7e:	bcc.n	7de0 <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    7d80:	cmp.w	r8, #1024	; 0x400
    7d84:	ldr.w	r2, [ip, #52]	; 0x34
    7d88:	ldr.w	r0, [ip, #44]	; 0x2c
    7d8c:	bcs.n	7e40 <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    7d8e:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    7d90:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    7d92:	ittt	eq
    7d94:	moveq.w	r3, #4294967295
    m_status = 0;
    7d98:	strbeq.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7d9c:	streq.w	r3, [ip, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    7da0:	ldr	r3, [r0, #0]
    7da2:	ldr	r3, [r3, #36]	; 0x24
    7da4:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    7da6:	cmp	r0, #0
    7da8:	beq.n	7d2e <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    7daa:	mov.w	r6, #512	; 0x200
    7dae:	b.n	7e2a <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7db0:	mov	r2, sl
    7db2:	bl	7ef6 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7db6:	cmp	r0, #0
    7db8:	blt.n	7d2e <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    7dba:	bne.n	7d60 <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    7dbc:	mov	r0, r4
    7dbe:	bl	734a <FatFile::addCluster()>
    7dc2:	cmp	r0, #0
    7dc4:	bne.n	7d60 <FatFile::write(void const*, unsigned int)+0x78>
    7dc6:	b.n	7d2e <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    7dc8:	ldr	r3, [r4, #32]
    7dca:	cbnz	r3, 7ddc <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    7dcc:	mov	r0, r4
    7dce:	bl	734a <FatFile::addCluster()>
    7dd2:	cmp	r0, #0
    7dd4:	beq.n	7d2e <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    7dd6:	ldr	r3, [r4, #16]
    7dd8:	str	r3, [r4, #32]
    7dda:	b.n	7d60 <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    7ddc:	str	r3, [r4, #16]
    7dde:	b.n	7d60 <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    7de0:	rsb	r6, r5, #512	; 0x200
    7de4:	cmp	r6, r8
    7de6:	it	cs
    7de8:	movcs	r6, r8
      if (sectorOffset == 0 &&
    7dea:	cbnz	r5, 7e38 <FatFile::write(void const*, unsigned int)+0x150>
    7dec:	ldr	r2, [r4, #20]
    7dee:	ldr	r3, [r4, #28]
    7df0:	cmp	r2, r3
    7df2:	bcs.n	7e3c <FatFile::write(void const*, unsigned int)+0x154>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    7df4:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7df6:	tst.w	r3, #32
    7dfa:	ite	eq
    7dfc:	moveq	r2, #1
    7dfe:	movne	r2, #5
    return m_cache.prepare(sector, options);
    7e00:	add.w	r0, ip, #40	; 0x28
    7e04:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7e08:	cmp	r0, #0
    7e0a:	beq.n	7d2e <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    7e0c:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7e0e:	add	r5, r6
      memcpy(dst, src, n);
    7e10:	mov	r2, r6
    7e12:	mov	r1, r9
    7e14:	bl	a56c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7e18:	cmp.w	r5, #512	; 0x200
    7e1c:	ldr	r0, [r4, #8]
    7e1e:	bne.n	7e2a <FatFile::write(void const*, unsigned int)+0x142>
    return m_cache.sync();
    7e20:	adds	r0, #40	; 0x28
    7e22:	bl	5a20 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    7e26:	cmp	r0, #0
    7e28:	beq.n	7d2e <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    7e2a:	ldr	r3, [r4, #20]
    src += n;
    7e2c:	add	r9, r6
    nToWrite -= n;
    7e2e:	sub.w	r8, r8, r6
    m_curPosition += n;
    7e32:	add	r3, r6
    7e34:	str	r3, [r4, #20]
    nToWrite -= n;
    7e36:	b.n	7d08 <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7e38:	movs	r2, #1
    7e3a:	b.n	7e00 <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7e3c:	movs	r2, #5
    7e3e:	b.n	7e00 <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    7e40:	ldrb.w	r3, [ip, #4]
    7e44:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    7e46:	mov.w	r6, r8, lsr #9
    7e4a:	cmp	r3, r6
    7e4c:	it	cs
    7e4e:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    7e50:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    7e52:	mov.w	r6, r3, lsl #9
    7e56:	bhi.n	7e6c <FatFile::write(void const*, unsigned int)+0x184>
    7e58:	add.w	lr, r1, r3
    7e5c:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    7e5e:	ittt	hi
    7e60:	movhi.w	r2, #4294967295
    m_status = 0;
    7e64:	strbhi.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7e68:	strhi.w	r2, [ip, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    7e6c:	ldr	r2, [r0, #0]
    7e6e:	ldr	r5, [r2, #40]	; 0x28
    7e70:	mov	r2, r9
    7e72:	blx	r5
    7e74:	b.n	7e26 <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    7e76:	ldr	r3, [pc, #16]	; (7e88 <FatFile::write(void const*, unsigned int)+0x1a0>)
    7e78:	ldr	r3, [r3, #0]
    7e7a:	cmp	r3, #0
    7e7c:	bne.w	7d1a <FatFile::write(void const*, unsigned int)+0x32>
}
    7e80:	mov	r0, r7
    7e82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e86:	nop
    7e88:	.word	0x2000fbfc

00007e8c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    7e8c:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    7e8e:	cmp.w	r3, #256	; 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    7e92:	push	{r4, r5, lr}
    7e94:	mov	r4, r3
    7e96:	it	cs
    7e98:	movcs.w	r4, #256	; 0x100
  uint16_t *e = p + n;
    7e9c:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    7ea0:	cmp	r1, r5
    7ea2:	bcc.n	7eaa <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7ea4:	subs	r3, r3, r4
    7ea6:	str	r3, [r2, #0]
}
    7ea8:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    7eaa:	ldrh.w	r0, [r1], #2
    7eae:	cmp	r0, #0
    7eb0:	bne.n	7ea0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    7eb2:	ldr	r0, [r2, #4]
    7eb4:	adds	r0, #1
    7eb6:	str	r0, [r2, #4]
    7eb8:	b.n	7ea0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

00007eba <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    7eba:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    7ebc:	cmp	r3, #128	; 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    7ebe:	push	{r4, r5, lr}
    7ec0:	mov	r4, r3
    7ec2:	it	cs
    7ec4:	movcs	r4, #128	; 0x80
  uint32_t *e = p + n;
    7ec6:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    7eca:	cmp	r1, r5
    7ecc:	bcc.n	7ed4 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7ece:	subs	r3, r3, r4
    7ed0:	str	r3, [r2, #0]
}
    7ed2:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    7ed4:	ldr.w	r0, [r1], #4
    7ed8:	cmp	r0, #0
    7eda:	bne.n	7eca <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    7edc:	ldr	r0, [r2, #4]
    7ede:	adds	r0, #1
    7ee0:	str	r0, [r2, #4]
    7ee2:	b.n	7eca <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

00007ee4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7ee4:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    7ee6:	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7eea:	cmp	r3, #2
    7eec:	it	eq
    7eee:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    7ef2:	b.w	5a6e <FsCache::prepare(unsigned long, unsigned char)>

00007ef6 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7ef6:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7ef8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7efc:	mov	r6, r0
    7efe:	mov	r4, r1
    7f00:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7f02:	bhi.n	7f0c <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    7f04:	mov.w	r0, #4294967295
}
    7f08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7f0c:	ldr	r3, [r0, #28]
    7f0e:	cmp	r3, r1
    7f10:	bcc.n	7f04 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    7f12:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7f14:	cmp	r3, #32
    7f16:	bne.n	7f3e <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7f18:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7f1a:	movs	r2, #0
    7f1c:	add.w	r1, r1, r4, lsr #7
    7f20:	bl	7ee4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7f24:	cmp	r0, #0
    7f26:	beq.n	7f04 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7f28:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    7f2a:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    7f2e:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    7f30:	ldr	r2, [r6, #28]
    7f32:	cmp	r2, r3
  return 1;
    7f34:	itet	cs
    7f36:	movcs	r0, #1
    return 0;
    7f38:	movcc	r0, #0
  *value = next;
    7f3a:	strcs	r3, [r7, #0]
  return 1;
    7f3c:	b.n	7f08 <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    7f3e:	cmp	r3, #16
    7f40:	bne.n	7f5e <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7f42:	ubfx	r1, r1, #8, #8
    7f46:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7f48:	movs	r2, #0
    7f4a:	add	r1, r3
    7f4c:	bl	7ee4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7f50:	cmp	r0, #0
    7f52:	beq.n	7f04 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7f54:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    7f56:	and.w	r4, r4, #510	; 0x1fe
    7f5a:	ldrh	r3, [r0, r4]
    7f5c:	b.n	7f30 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    7f5e:	cmp	r3, #12
    7f60:	bne.n	7f04 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    7f62:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7f66:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7f68:	movs	r2, #0
    index += index >> 1;
    7f6a:	uxtah	r8, r8, r1
    7f6e:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7f72:	ubfx	r8, r8, #9, #7
    7f76:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7f78:	mov	r1, r8
    7f7a:	bl	7ee4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7f7e:	cmp	r0, #0
    7f80:	beq.n	7f04 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    7f82:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    7f86:	ldrb	r5, [r0, r3]
    index++;
    7f88:	adds	r3, #1
    if (index == m_bytesPerSector) {
    7f8a:	cmp.w	r3, #512	; 0x200
    7f8e:	bne.n	7fa2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    7f90:	movs	r2, #0
    7f92:	add.w	r1, r8, #1
    7f96:	mov	r0, r6
    7f98:	bl	7ee4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7f9c:	cmp	r0, #0
    7f9e:	beq.n	7f04 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    7fa0:	movs	r3, #0
    tmp |= pc[index] << 8;
    7fa2:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7fa4:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    7fa6:	orr.w	r3, r5, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7faa:	ite	mi
    7fac:	lsrmi	r3, r3, #4
    7fae:	ubfxpl	r3, r3, #0, #12
    7fb2:	b.n	7f30 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

00007fb4 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7fb4:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7fb6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fba:	mov	r8, r0
    7fbc:	mov	r4, r1
    7fbe:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7fc0:	bhi.n	7fc8 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    7fc2:	movs	r0, #0
}
    7fc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7fc8:	ldr	r3, [r0, #28]
    7fca:	cmp	r3, r1
    7fcc:	bcc.n	7fc2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    7fce:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7fd0:	cmp	r3, #32
    7fd2:	bne.n	7ff0 <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7fd4:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7fd6:	movs	r2, #1
    7fd8:	add.w	r1, r1, r4, lsr #7
    7fdc:	bl	7ee4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7fe0:	cmp	r0, #0
    7fe2:	beq.n	7fc2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7fe4:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    7fe6:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    7fea:	str	r5, [r0, r4]
    return true;
    7fec:	movs	r0, #1
    7fee:	b.n	7fc4 <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    7ff0:	cmp	r3, #16
    7ff2:	bne.n	8010 <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7ff4:	ubfx	r1, r1, #8, #8
    7ff8:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7ffa:	movs	r2, #1
    7ffc:	add	r1, r3
    7ffe:	bl	7ee4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    8002:	cmp	r0, #0
    8004:	beq.n	7fc2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    8006:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    8008:	and.w	r4, r4, #510	; 0x1fe
    800c:	strh	r5, [r0, r4]
    return true;
    800e:	b.n	7fec <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    8010:	cmp	r3, #12
    8012:	bne.n	7fc2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    8014:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    8018:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    801a:	movs	r2, #1
    index += index >> 1;
    801c:	uxtah	r7, r7, r1
    8020:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    8022:	ubfx	r7, r7, #9, #7
    8026:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    8028:	mov	r1, r7
    802a:	bl	7ee4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    802e:	cmp	r0, #0
    8030:	beq.n	7fc2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    if (cluster & 1) {
    8032:	ands.w	r4, r4, #1
    index &= m_sectorMask;
    8036:	ubfx	r3, r6, #0, #9
      tmp = (pc[index] & 0XF) | tmp << 4;
    803a:	itt	ne
    803c:	lslne	r2, r5, #4
    803e:	ldrbne	r1, [r0, r3]
    8040:	add.w	r6, r0, r3
    index++;
    8044:	add.w	r3, r3, #1
      tmp = (pc[index] & 0XF) | tmp << 4;
    8048:	ittet	ne
    804a:	andne.w	r2, r2, #240	; 0xf0
    804e:	andne.w	r1, r1, #15
    uint8_t tmp = value;
    8052:	uxtbeq	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    8054:	orrne	r2, r1
    if (index == m_bytesPerSector) {
    8056:	cmp.w	r3, #512	; 0x200
    pc[index] = tmp;
    805a:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    805c:	bne.n	806e <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    805e:	movs	r2, #1
    8060:	mov	r0, r8
    8062:	adds	r1, r7, r2
    8064:	bl	7ee4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    8068:	cmp	r0, #0
    806a:	beq.n	7fc2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    806c:	movs	r3, #0
    tmp = value >> 4;
    806e:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    8072:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    8074:	cbnz	r4, 8080 <FatPartition::fatPut(unsigned long, unsigned long)+0xcc>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    8076:	ldrb	r3, [r0, r3]
    8078:	bic.w	r3, r3, #15
    807c:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    8080:	strb	r5, [r2, #0]
    8082:	b.n	7fec <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

00008084 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    8084:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    8088:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    808a:	mov	r5, r0
    808c:	mov	r6, r1
    808e:	mov	r8, r2
  if (m_allocSearchStart < current) {
    8090:	cmp	r4, r1
    8092:	bcc.n	8098 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    8094:	movs	r7, #1
    8096:	b.n	809c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    8098:	mov	r4, r1
    setStart = false;
    809a:	movs	r7, #0
    find++;
    809c:	adds	r4, #1
    if (find > m_lastCluster) {
    809e:	ldr	r3, [r5, #28]
    80a0:	cmp	r3, r4
    80a2:	bcs.n	80aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    80a4:	cbnz	r7, 80d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    80a6:	ldr	r4, [r5, #12]
    80a8:	b.n	8094 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    80aa:	cmp	r6, r4
    80ac:	beq.n	80d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    80ae:	add	r2, sp, #4
    80b0:	mov	r1, r4
    80b2:	mov	r0, r5
    80b4:	bl	7ef6 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    80b8:	cmp	r0, #0
    80ba:	blt.n	80d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    80bc:	beq.n	809c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    80be:	ldr	r3, [sp, #4]
    80c0:	cmp	r3, #0
    80c2:	bne.n	809c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    80c4:	cbz	r7, 80c8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    80c6:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    80c8:	mvn.w	r2, #4026531840	; 0xf0000000
    80cc:	mov	r1, r4
    80ce:	mov	r0, r5
    80d0:	bl	7fb4 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    80d4:	mov	r7, r0
    80d6:	cbnz	r0, 80e2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    80d8:	movs	r7, #0
}
    80da:	mov	r0, r7
    80dc:	add	sp, #8
    80de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    80e2:	cbnz	r6, 80f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
    if (m_freeClusterCount >= 0) {
    80e4:	ldr	r3, [r5, #36]	; 0x24
    80e6:	cmp	r3, #0
    80e8:	bge.n	8100 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
  *next = find;
    80ea:	str.w	r4, [r8]
  return true;
    80ee:	b.n	80da <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    80f0:	mov	r2, r4
    80f2:	mov	r1, r6
    80f4:	mov	r0, r5
    80f6:	bl	7fb4 <FatPartition::fatPut(unsigned long, unsigned long)>
    80fa:	cmp	r0, #0
    80fc:	bne.n	80e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    80fe:	b.n	80d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      m_freeClusterCount += change;
    8100:	subs	r3, #1
    8102:	str	r3, [r5, #36]	; 0x24
    8104:	b.n	80ea <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>

00008106 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    8106:	push	{r0, r1, r4, r5, r6, lr}
    8108:	mov	r5, r0
    810a:	mov	r4, r1
    fg = fatGet(cluster, &next);
    810c:	add	r2, sp, #4
    810e:	mov	r1, r4
    8110:	mov	r0, r5
    8112:	bl	7ef6 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    8116:	subs	r6, r0, #0
    8118:	blt.n	8146 <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    811a:	movs	r2, #0
    811c:	mov	r1, r4
    811e:	mov	r0, r5
    8120:	bl	7fb4 <FatPartition::fatPut(unsigned long, unsigned long)>
    8124:	cbz	r0, 8146 <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    8126:	ldr	r3, [r5, #36]	; 0x24
    8128:	cmp	r3, #0
      m_freeClusterCount += change;
    812a:	itt	ge
    812c:	addge	r3, #1
    812e:	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    8130:	ldr	r3, [r5, #12]
    8132:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    8134:	itt	hi
    8136:	addhi.w	r4, r4, #4294967295
    813a:	strhi	r4, [r5, #12]
    cluster = next;
    813c:	ldr	r4, [sp, #4]
  } while (fg);
    813e:	cmp	r6, #0
    8140:	bne.n	810c <FatPartition::freeChain(unsigned long)+0x6>
}
    8142:	add	sp, #8
    8144:	pop	{r4, r5, r6, pc}
  return false;
    8146:	movs	r0, #0
    8148:	b.n	8142 <FatPartition::freeChain(unsigned long)+0x3c>
	...

0000814c <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    814c:	push	{r4, r5, r6, r7, lr}
    814e:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    8150:	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    8152:	sub	sp, #28
  if (m_freeClusterCount >= 0) {
    8154:	cmp	r0, #0
    8156:	bge.n	81ca <FatPartition::freeClusterCount()+0x7e>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    8158:	ldrb	r3, [r4, #7]
    815a:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    815c:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    815e:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    8160:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    8164:	beq.n	81ce <FatPartition::freeClusterCount()+0x82>
    return m_status & CACHE_STATUS_DIRTY;
    8166:	ldrb.w	r2, [r4, #568]	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    816a:	ldr	r3, [r4, #16]
    if (isDirty() && !sync()) {
    816c:	lsls	r2, r2, #31
  state.clusters_to_do = m_lastCluster + 1;
    816e:	strd	r6, r5, [sp, #16]
    8172:	bmi.n	81d2 <FatPartition::freeClusterCount()+0x86>
    m_status = 0;
    8174:	movs	r2, #0
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    8176:	ldrb	r5, [r4, #7]
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    8178:	ldr	r0, [r4, #0]
    817a:	add	r6, sp, #16
    817c:	strb.w	r2, [r4, #568]	; 0x238
  if (fatType() == FAT_TYPE_FAT32) {
    8180:	cmp	r5, #32
    m_sector = 0XFFFFFFFF;
    8182:	mov.w	r2, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    8186:	ldr	r1, [r4, #24]
    8188:	ldr	r5, [r0, #0]
    818a:	str.w	r2, [r4, #580]	; 0x244
    return m_buffer;
    818e:	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
    8192:	bne.n	81e4 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    8194:	str	r6, [sp, #4]
    8196:	ldr	r6, [pc, #84]	; (81ec <FatPartition::freeClusterCount()+0xa0>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    8198:	str	r6, [sp, #0]
    819a:	ldr	r5, [r5, #24]
    819c:	blx	r5
    819e:	cbz	r0, 81b4 <FatPartition::freeClusterCount()+0x68>
  }

  setFreeClusterCount(state.free_count);
    81a0:	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    81a2:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
    81a4:	b.n	81ca <FatPartition::freeClusterCount()+0x7e>
      int8_t fg = fatGet(i, &c);
    81a6:	add	r2, sp, #16
    81a8:	mov	r1, r7
    81aa:	mov	r0, r4
    81ac:	bl	7ef6 <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    81b0:	cmp	r0, #0
    81b2:	bge.n	81ba <FatPartition::freeClusterCount()+0x6e>
  if (buf == nullptr) return -1;
    81b4:	mov.w	r0, #4294967295
    81b8:	b.n	81ca <FatPartition::freeClusterCount()+0x7e>
      if (fg && c == 0) {
    81ba:	beq.n	81c2 <FatPartition::freeClusterCount()+0x76>
    81bc:	ldr	r3, [sp, #16]
    81be:	cbnz	r3, 81c2 <FatPartition::freeClusterCount()+0x76>
        free++;
    81c0:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    81c2:	adds	r7, #1
    81c4:	cmp	r7, r6
    81c6:	bcc.n	81a6 <FatPartition::freeClusterCount()+0x5a>
    return free;
    81c8:	mov	r0, r5
}
    81ca:	add	sp, #28
    81cc:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    81ce:	movs	r7, #2
    81d0:	b.n	81c4 <FatPartition::freeClusterCount()+0x78>
    if (isDirty() && !sync()) {
    81d2:	add.w	r0, r4, #568	; 0x238
    81d6:	str	r3, [sp, #12]
    81d8:	bl	5a20 <FsCache::sync()>
    81dc:	ldr	r3, [sp, #12]
    81de:	cmp	r0, #0
    81e0:	bne.n	8174 <FatPartition::freeClusterCount()+0x28>
    81e2:	b.n	81b4 <FatPartition::freeClusterCount()+0x68>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    81e4:	str	r6, [sp, #4]
    81e6:	ldr	r6, [pc, #8]	; (81f0 <FatPartition::freeClusterCount()+0xa4>)
    81e8:	b.n	8198 <FatPartition::freeClusterCount()+0x4c>
    81ea:	nop
    81ec:	.word	0x00007ebb
    81f0:	.word	0x00007e8d

000081f4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    81f4:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    81f6:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    81f8:	mov	r4, r0
  m_blockDev = dev;
    81fa:	str	r1, [r0, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    81fc:	mov	r5, r2
  m_fatType = 0;
    81fe:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    8200:	movs	r0, #1
  m_cache.init(dev);
    8202:	add.w	r6, r4, #40	; 0x28
    m_blockDev = blockDev;
    8206:	str	r1, [r4, #44]	; 0x2c
  m_allocSearchStart = 1;
    8208:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    820a:	mov.w	r0, #4294967295
    m_status = 0;
    820e:	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8212:	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    8214:	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    8218:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    821c:	str.w	r0, [r4, #580]	; 0x244
  if (part) {
    8220:	cbz	r2, 8256 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    8222:	cmp	r2, #4
    8224:	bls.n	822a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    8226:	movs	r0, #0
}
    8228:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    822a:	add.w	r5, r5, #268435456	; 0x10000000
    return m_cache.prepare(sector, options);
    822e:	mov	r2, r3
    8230:	mov	r1, r3
    8232:	mov	r0, r6
    8234:	subs	r5, #1
    8236:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
    823a:	add.w	r3, r0, #446	; 0x1be
    823e:	lsls	r2, r5, #4
    8240:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    8244:	cmp	r0, #0
    8246:	beq.n	8226 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    8248:	ldrb	r1, [r5, #4]
    824a:	cmp	r1, #0
    824c:	beq.n	8226 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    824e:	ldrb	r3, [r3, r2]
    8250:	lsls	r3, r3, #25
    8252:	bne.n	8226 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    8254:	ldr	r5, [r5, #8]
    8256:	movs	r2, #0
    8258:	mov	r1, r5
    825a:	mov	r0, r6
    825c:	bl	5a6e <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    8260:	cmp	r0, #0
    8262:	beq.n	8226 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    8264:	ldrh.w	r3, [r0, #11]
    8268:	cmp.w	r3, #512	; 0x200
    826c:	bne.n	8226 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    826e:	ldrb	r3, [r0, #16]
    8270:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    8272:	subs	r3, #1
    8274:	cmp	r3, #1
    8276:	bhi.n	8226 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    8278:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    827a:	movs	r6, #9
    827c:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    827e:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    8280:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    8282:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8284:	movs	r3, #1
    8286:	cmp	r1, r3
    8288:	bne.n	82f2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfe>
    828a:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    828c:	ldrh	r3, [r0, #22]
    828e:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    8290:	cbnz	r3, 8296 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    8292:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    8294:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    8296:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    8298:	ldrh.w	r1, [r0, #17]
    829c:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    829e:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    82a0:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    82a2:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    82a4:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    82a6:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    82a8:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    82ac:	mla	r3, r6, r7, r3
    82b0:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    82b2:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    82b6:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    82ba:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    82bc:	cbnz	r1, 82c0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xcc>
  return *reinterpret_cast<const uint32_t*>(src);
    82be:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    82c0:	subs	r5, r5, r3
    82c2:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    82c4:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    82c6:	adds	r3, r5, #1
    82c8:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    82ca:	mov.w	r3, #4294967295
    82ce:	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    82d0:	movw	r3, #4084	; 0xff4
    82d4:	cmp	r5, r3
    82d6:	bls.n	8304 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
  } else if (clusterCount < 65525) {
    82d8:	movw	r3, #65524	; 0xfff4
    82dc:	cmp	r5, r3
    82de:	bls.n	8308 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    82e0:	ldr	r3, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    82e2:	str	r3, [r4, #32]
    82e4:	movs	r3, #32
  return true;
    82e6:	movs	r0, #1
    m_fatType = 12;
    82e8:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    82ea:	str	r6, [r4, #48]	; 0x30
    82ec:	str.w	r6, [r4, #576]	; 0x240
  return true;
    82f0:	b.n	8228 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    if (tmp == 0) {
    82f2:	subs	r6, #1
    82f4:	bne.n	82fa <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x106>
    82f6:	strb	r2, [r4, #6]
    82f8:	b.n	8226 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    m_sectorsPerClusterShift++;
    82fa:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    82fc:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    82fe:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8300:	uxtb	r3, r3
    8302:	b.n	8286 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x92>
    8304:	movs	r3, #12
    8306:	b.n	82e6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>
    8308:	movs	r3, #16
    830a:	b.n	82e6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>

0000830c <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    830c:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    830e:	add.w	r4, r0, #1096	; 0x448
    8312:	sub	sp, #40	; 0x28
  FatFile() {}
    8314:	movs	r3, #0
    8316:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    8318:	add	r0, sp, #4
    831a:	mov	r1, r4
    831c:	str	r3, [sp, #4]
    831e:	bl	790c <FatFile::open(FatFile*, char const*, int)>
    8322:	mov	r6, r0
    8324:	cbz	r0, 8342 <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    8326:	ldrb.w	r3, [sp, #4]
    832a:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    832e:	itett	ne
    8330:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    8332:	moveq	r6, r3
  m_vwd = dir;
    8334:	ldmiane	r5!, {r0, r1, r2, r3}
    8336:	stmiane	r4!, {r0, r1, r2, r3}
    8338:	itttt	ne
    833a:	ldmiane	r5!, {r0, r1, r2, r3}
    833c:	stmiane	r4!, {r0, r1, r2, r3}
    833e:	ldrne	r3, [r5, #0]
    8340:	strne	r3, [r4, #0]
}
    8342:	mov	r0, r6
    8344:	add	sp, #40	; 0x28
    8346:	pop	{r4, r5, r6, pc}

00008348 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    8348:	subs	r1, r0, #1
    834a:	add.w	r3, r0, #10
    uint8_t sum = 0;
    834e:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8350:	lsls	r2, r0, #7
    8352:	orr.w	r2, r2, r0, lsr #1
    8356:	ldrb.w	r0, [r1, #1]!
    835a:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    835e:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8360:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    8362:	bne.n	8350 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    8364:	bx	lr

00008366 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8366:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    836a:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    836c:	sub	sp, #52	; 0x34
    836e:	mov	r6, r2
    8370:	mov	r7, r0
    8372:	mov	r9, r1
    8374:	mov	r8, r3
  FatFile dir = *this;
    8376:	add	r4, sp, #12
    8378:	ldmia	r5!, {r0, r1, r2, r3}
    837a:	stmia	r4!, {r0, r1, r2, r3}
    837c:	ldmia	r5!, {r0, r1, r2, r3}
    837e:	stmia	r4!, {r0, r1, r2, r3}
    8380:	ldr	r3, [r5, #0]
    8382:	str	r3, [r4, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8384:	movs	r4, #1
    next = begin;
    8386:	ldr	r3, [r6, #0]
    8388:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    838a:	movs	r3, #0
    838c:	strh	r3, [r6, #12]
    838e:	cmp	r4, r8
    8390:	bls.n	8396 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    8392:	movs	r0, #1
    8394:	b.n	83a8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8396:	sub.w	r1, r9, r4
    839a:	add	r0, sp, #12
    839c:	uxth	r1, r1
    839e:	bl	7140 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    83a2:	mov	sl, r0
    83a4:	cbnz	r0, 83ae <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>

 fail:
  return false;
    83a6:	movs	r0, #0
}
    83a8:	add	sp, #52	; 0x34
    83aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83ae:	movs	r5, #0
      uint16_t u = getLfnChar(ldir, i);
    83b0:	uxtb	r2, r5
    83b2:	mov	r1, sl
    83b4:	mov	r0, r7
    83b6:	bl	715a <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    83ba:	ldrh	r3, [r6, #12]
    83bc:	mov	fp, r0
    83be:	cbnz	r3, 83d0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
    83c0:	ldrd	r2, r3, [r6, #4]
    83c4:	cmp	r2, r3
    83c6:	bne.n	83d0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
        return u == 0;
    83c8:	clz	r0, r0
    83cc:	lsrs	r0, r0, #5
    83ce:	b.n	83a8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    83d0:	mov	r0, r6
    83d2:	bl	5b64 <FsName::get16()>
    83d6:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    83d8:	mov	r0, fp
    83da:	bl	5abc <toUpcase(unsigned short)>
    83de:	ldr	r3, [sp, #4]
    83e0:	mov	fp, r0
    83e2:	mov	r0, r3
    83e4:	bl	5abc <toUpcase(unsigned short)>
    83e8:	cmp	fp, r0
    83ea:	bne.n	83a6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    83ec:	adds	r5, #1
    83ee:	cmp	r5, #13
    83f0:	bne.n	83b0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4a>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    83f2:	adds	r4, #1
    83f4:	uxtb	r4, r4
    83f6:	b.n	838e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

000083f8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    83f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    83fc:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    83fe:	sub	sp, #52	; 0x34
    8400:	mov	r4, r2
    8402:	mov	r9, r1
    8404:	mov	r7, r3
  FatFile dir = *this;
    8406:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8408:	mov.w	sl, #15
  FatFile dir = *this;
    840c:	ldmia	r5!, {r0, r1, r2, r3}
    840e:	stmia	r6!, {r0, r1, r2, r3}
    8410:	ldmia	r5!, {r0, r1, r2, r3}
    8412:	stmia	r6!, {r0, r1, r2, r3}
    8414:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    8416:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    841a:	movs	r5, #1
  FatFile dir = *this;
    841c:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    841e:	bl	8348 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    8422:	movs	r6, #0
    next = begin;
    8424:	ldr	r3, [r4, #0]
    8426:	mov	r8, r0
    8428:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    842a:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    842c:	cmp	r5, r7
    842e:	bls.n	8438 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    8430:	movs	r0, #1

 fail:
  return false;
}
    8432:	add	sp, #52	; 0x34
    8434:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8438:	sub.w	r1, r9, r5
    843c:	add	r0, sp, #12
    843e:	uxth	r1, r1
    8440:	bl	7140 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    8444:	cmp	r0, #0
    8446:	beq.n	8432 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    8448:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    844a:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    844c:	mov.w	r1, #0
    8450:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    8454:	ldrb.w	r3, [r2, #40]	; 0x28
    8458:	orr.w	r3, r3, #1
    845c:	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8460:	ite	eq
    8462:	orreq.w	r3, r5, #64	; 0x40
    8466:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8468:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    846c:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    846e:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    8470:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8474:	strh	r1, [r0, #26]
    return !ls && next == end;
    8476:	ldrh	r0, [r4, #12]
    8478:	cbnz	r0, 84a6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
    847a:	ldrd	r2, r3, [r4, #4]
    847e:	cmp	r2, r3
    8480:	bne.n	84a6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
        cp = fc++ ? 0XFFFF : 0;
    8482:	cbz	r6, 84b2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
    8484:	adds	r6, #1
    8486:	movw	r0, #65535	; 0xffff
    848a:	uxtb	r6, r6
  if (i < 5) {
    848c:	cmp	r1, #4
    848e:	uxtb	r3, r1
    8490:	bhi.n	84b6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbe>
    8492:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    8496:	adds	r1, #1
    8498:	add.w	fp, fp, #2
    849c:	cmp	r1, #13
    849e:	bne.n	8476 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    84a0:	adds	r5, #1
    84a2:	uxtb	r5, r5
    84a4:	b.n	842c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    84a6:	mov	r0, r4
    84a8:	str	r1, [sp, #4]
    84aa:	bl	5b64 <FsName::get16()>
    84ae:	ldr	r1, [sp, #4]
    84b0:	b.n	848c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
    84b2:	movs	r6, #1
    84b4:	b.n	848c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    84b6:	cmp	r3, #10
    84b8:	ite	ls
    84ba:	strhls.w	r0, [fp, #3]
    84be:	strhhi.w	r0, [fp, #5]
}
    84c2:	b.n	8496 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9e>

000084c4 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    84c4:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    84c6:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    84ca:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    84ce:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    84d2:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    84d4:	mov	r5, r0
    fname->sfn[k] = ' ';
    84d6:	str.w	r1, [r0, #22]
    84da:	str	r1, [r2, #4]
    84dc:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    84e0:	ldrb	r0, [r3, #0]
    84e2:	subs	r0, #46	; 0x2e
    84e4:	it	ne
    84e6:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    84e8:	mov	r7, r3
    84ea:	ldrb.w	r2, [r3], #1
    84ee:	cmp	r2, #46	; 0x2e
    84f0:	beq.n	84e8 <FatFile::makeSFN(FatLfn_t*)+0x24>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    84f2:	subs	r3, r6, #1
    84f4:	cmp	r3, r7
    84f6:	mov	lr, r3
    84f8:	bls.n	8502 <FatFile::makeSFN(FatLfn_t*)+0x3e>
    84fa:	ldrb.w	r2, [r3], #-1
    84fe:	cmp	r2, #46	; 0x2e
    8500:	bne.n	84f4 <FatFile::makeSFN(FatLfn_t*)+0x30>
    8502:	movs	r2, #0
    8504:	mov.w	ip, #7
    8508:	mov.w	r9, #8
    850c:	mov	r1, r2
    850e:	mov	r8, r2
    8510:	b.n	8528 <FatFile::makeSFN(FatLfn_t*)+0x64>

  for (; ptr < end; ptr++) {
    c = *ptr;
    8512:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    8514:	cmp	r3, #46	; 0x2e
    8516:	bne.n	8544 <FatFile::makeSFN(FatLfn_t*)+0x80>
    8518:	cmp	lr, r7
    851a:	bne.n	8560 <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;  // Max index for full 8.3 name.
    851c:	mov.w	ip, #10
      i = 8;    // Place for extension.
    8520:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    8522:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    8526:	adds	r7, #1
    8528:	cmp	r7, r6
    852a:	bcc.n	8512 <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    852c:	ldrb	r3, [r5, #22]
    852e:	cmp	r3, #32
    8530:	beq.n	85e4 <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    8532:	cmp	r0, #0
    8534:	beq.n	85d0 <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    8536:	tst.w	r8, r2
    853a:	it	ne
    853c:	movne	r2, #2
    853e:	strb	r2, [r5, #21]
  }
  return true;

 fail:
  return false;
}
    8540:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    8544:	cmp	r3, #34	; 0x22
    8546:	beq.n	8560 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    8548:	cmp	r3, #124	; 0x7c
    854a:	beq.n	8560 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    854c:	sub.w	r4, r3, #91	; 0x5b
    8550:	cmp	r4, #2
    8552:	bls.n	8560 <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    8554:	sub.w	r4, r3, #42	; 0x2a
    8558:	cmp	r4, #5
    855a:	bhi.n	856a <FatFile::makeSFN(FatLfn_t*)+0xa6>
    855c:	cmp	r3, #45	; 0x2d
    855e:	beq.n	8586 <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    8560:	cmp	r1, ip
    8562:	bhi.n	858a <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    8564:	movs	r0, #0
        c = '_';
    8566:	movs	r3, #95	; 0x5f
    8568:	b.n	85ac <FatFile::makeSFN(FatLfn_t*)+0xe8>
    856a:	sub.w	r4, r3, #58	; 0x3a
    856e:	cmp	r4, #5
    8570:	bls.n	857a <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    8572:	sub.w	r4, r3, #33	; 0x21
    8576:	cmp	r4, #93	; 0x5d
    8578:	bls.n	8586 <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    857a:	and.w	r3, r3, #192	; 0xc0
    857e:	cmp	r3, #128	; 0x80
    8580:	bne.n	8560 <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    8582:	movs	r0, #0
    8584:	b.n	8526 <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    8586:	cmp	r1, ip
    8588:	bls.n	859a <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    858a:	cmp.w	ip, #10
    858e:	beq.n	85cc <FatFile::makeSFN(FatLfn_t*)+0x108>
    8590:	cmp	lr, r7
    8592:	bcc.n	85cc <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    8594:	add.w	r7, lr, #4294967295
        continue;
    8598:	b.n	8582 <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    859a:	sub.w	r4, r3, #97	; 0x61
    859e:	cmp	r4, #25
    85a0:	bhi.n	85be <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    85a2:	subs	r3, #32
        lc |= bit;
    85a4:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    85a8:	uxtb	r3, r3
        lc |= bit;
    85aa:	uxtb	r2, r2
      fname->sfn[i++] = c;
    85ac:	adds	r4, r1, #1
    85ae:	add	r1, r5
    85b0:	uxtb	r4, r4
    85b2:	strb	r3, [r1, #22]
      if (i < 7) {
    85b4:	cmp	r4, #6
    85b6:	bhi.n	85ba <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    85b8:	strb	r4, [r5, #20]
    85ba:	mov	r1, r4
    85bc:	b.n	8526 <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    85be:	sub.w	r4, r3, #65	; 0x41
    85c2:	cmp	r4, #25
        uc |= bit;
    85c4:	it	ls
    85c6:	orrls.w	r8, r9, r8
    85ca:	b.n	85ac <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    85cc:	movs	r0, #0
    85ce:	b.n	852c <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    85d0:	ldrb	r3, [r5, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    85d2:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    85d4:	movs	r1, #126	; 0x7e
    85d6:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    85d8:	strb	r2, [r5, #21]
  return true;
    85da:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    85dc:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    85de:	movs	r1, #49	; 0x31
    85e0:	strb	r1, [r3, #23]
    85e2:	b.n	8540 <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    85e4:	movs	r0, #0
    85e6:	b.n	8540 <FatFile::makeSFN(FatLfn_t*)+0x7c>

000085e8 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    85e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    85ec:	mov	r7, r0
    85ee:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    85f0:	ldrb	r6, [r1, #20]
    85f2:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    85f4:	mov.w	sl, #0
    85f8:	ldr.w	r8, [pc, #128]	; 867c <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    85fc:	add.w	r9, r1, #22
    8600:	ldr.w	r3, [r8]
    8604:	cmp	r6, #3
    hex += millis();
    8606:	add	r3, sl
    8608:	it	cs
    860a:	movcs	r6, #3
    860c:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8610:	adds	r3, r6, #4
    8612:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    8614:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8618:	adds	r1, r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    861a:	subs	r3, #1
      hex >>= 4;
    861c:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8620:	cmp	r2, #9
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8622:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8624:	ite	ls
    8626:	addls	r2, #48	; 0x30
    8628:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    862a:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    862c:	strb	r2, [r1, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    862e:	bne.n	8614 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    8630:	adds	r3, r5, r6
    8632:	movs	r2, #126	; 0x7e
    seekSet(0);
    8634:	movs	r1, #0
    8636:	mov	r0, r7
    8638:	strb	r2, [r3, #22]
    863a:	bl	7632 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    863e:	movs	r1, #1
    8640:	mov	r0, r7
    8642:	bl	75f4 <FatFile::readDirCache(bool)>
      if (!dir) {
    8646:	mov	r1, r0
    8648:	cbnz	r0, 8656 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    864a:	ldrb	r0, [r7, #1]
    864c:	clz	r0, r0
    8650:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    8652:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    8656:	ldrb	r3, [r0, #0]
    8658:	cbz	r3, 8678 <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    865a:	ldrb	r3, [r0, #11]
    865c:	lsls	r3, r3, #28
    865e:	bmi.n	863e <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    8660:	movs	r2, #11
    8662:	mov	r0, r9
    8664:	bl	ed10 <memcmp>
    8668:	cmp	r0, #0
    866a:	bne.n	863e <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    866c:	subs	r0, r4, #1
    866e:	ands.w	r4, r0, #255	; 0xff
    8672:	bne.n	8600 <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    8674:	mov	r0, r4
 fail:
    8676:	b.n	8652 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    8678:	movs	r0, #1
    867a:	b.n	8652 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    867c:	.word	0x2001094c

00008680 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8680:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8684:	vpush	{d8}
    8688:	sub	sp, #44	; 0x2c
    868a:	mov	r5, r1
    868c:	mov	r7, r2
    868e:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    8690:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8692:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    8694:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    8696:	ldrb	r3, [r1, #0]
    8698:	tst.w	r3, #112	; 0x70
    869c:	bne.n	86aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

 fail:
  return false;
    869e:	movs	r0, #0
}
    86a0:	add	sp, #44	; 0x2c
    86a2:	vpop	{d8}
    86a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    86aa:	ldr	r3, [sp, #28]
    86ac:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    86ae:	cmp	r3, #0
    86b0:	bne.n	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12)/13;
    86b2:	ldr	r3, [r2, #16]
    86b4:	movs	r2, #13
    seekSet(0);
    86b6:	movs	r1, #0
    86b8:	mov	r0, r5
    86ba:	adds	r3, #12
  uint8_t checksum = 0;
    86bc:	mov.w	sl, #0
  nameOrd = (fname->len + 12)/13;
    86c0:	udiv	r3, r3, r2
    86c4:	uxtb	r3, r3
  uint8_t order = 0;
    86c6:	mov	r8, sl
  uint8_t freeFound = 0;
    86c8:	mov	r4, sl
  bool fnameFound = false;
    86ca:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    86cc:	str	r3, [sp, #24]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    86ce:	ldrb	r3, [r7, #21]
    86d0:	lsls	r2, r3, #30
    86d2:	itett	ne
    86d4:	ldrne	r3, [sp, #24]
    86d6:	moveq	r3, #1
    86d8:	addne.w	r9, r3, #1
    86dc:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    86e0:	mov	r9, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    86e2:	str	r3, [sp, #8]
    86e4:	bl	7632 <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    86e8:	add.w	r3, r7, #22
  uint16_t freeIndex = 0;
    86ec:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    86f0:	vmov	s16, r3
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    86f4:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    86f6:	movs	r1, #0
    86f8:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    86fa:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    86fe:	bl	75f4 <FatFile::readDirCache(bool)>
    if (!dir) {
    8702:	cmp	r0, #0
    8704:	bne.n	87ca <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (dirFile->getError()) {
    8706:	ldrb	r3, [r5, #1]
    8708:	cmp	r3, #0
    870a:	bne.n	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    870c:	ldr	r3, [sp, #16]
    870e:	lsls	r2, r3, #22
    8710:	bpl.n	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    8712:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8716:	subs	r3, #1
    8718:	cmp	r3, #1
    871a:	bhi.n	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    871c:	ldr	r3, [sp, #12]
    871e:	cmp	r4, #0
    8720:	it	eq
    8722:	moveq	r3, r6
    8724:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    8726:	ldr	r3, [sp, #8]
    8728:	cmp	r4, r3
    872a:	bcc.w	88ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x22e>
  if (fnameFound) {
    872e:	cmp.w	fp, #0
    8732:	bne.w	88e4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x264>
  lfnOrd = freeNeed - 1;
    8736:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8738:	mov	r2, r7
    873a:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    873c:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    873e:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    8740:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    8744:	uxtab	r6, r3, r6
    8748:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    874a:	mov	r3, fp
    874c:	mov	r1, r6
    874e:	bl	83f8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8752:	cmp	r0, #0
    8754:	beq.n	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    8756:	mov	r1, r6
    8758:	mov	r0, r5
    875a:	bl	7140 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    875e:	mov	r4, r0
    8760:	cmp	r0, #0
    8762:	beq.n	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    8764:	movs	r2, #32
    8766:	movs	r1, #0
    8768:	bl	a528 <memset>
  memcpy(dir->name, fname->sfn, 11);
    876c:	ldr.w	r3, [r7, #22]
    8770:	str	r3, [r4, #0]
    8772:	ldr.w	r3, [r7, #26]
    8776:	str	r3, [r4, #4]
    8778:	ldrh	r3, [r7, #30]
    877a:	strh	r3, [r4, #8]
    877c:	ldrb.w	r3, [r7, #32]
    8780:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    8782:	ldrb	r3, [r7, #21]
    8784:	and.w	r3, r3, #24
    8788:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    878a:	ldr	r3, [pc, #372]	; (8900 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    878c:	ldr	r3, [r3, #0]
    878e:	cmp	r3, #0
    8790:	beq.w	88f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x274>
    FsDateTime::callback(&date, &time, &ms10);
    8794:	add.w	r2, sp, #35	; 0x23
    8798:	add.w	r1, sp, #38	; 0x26
    879c:	add	r0, sp, #36	; 0x24
    879e:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    87a0:	ldrh.w	r3, [sp, #36]	; 0x24
    87a4:	strh	r3, [r4, #16]
    87a6:	ldrh.w	r3, [sp, #38]	; 0x26
    87aa:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    87ac:	ldrb.w	r3, [sp, #35]	; 0x23
    87b0:	strb	r3, [r4, #13]
    87b2:	ldr	r3, [sp, #20]
    87b4:	ldr	r2, [sp, #20]
    87b6:	ldrb.w	r3, [r3, #40]	; 0x28
    87ba:	orr.w	r3, r3, #1
    87be:	strb.w	r3, [r2, #40]	; 0x28
  }
    87c2:	b.n	889c <FatFile::open(FatFile*, FatLfn_t*, int)+0x21c>
        fnameFound = true;
    87c4:	mov.w	fp, #1
    87c8:	b.n	86f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    87ca:	ldrb	r2, [r0, #0]
    87cc:	cmp	r2, #229	; 0xe5
    87ce:	beq.n	87d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x152>
    87d0:	cbnz	r2, 87f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    87d2:	ldr	r3, [sp, #12]
    87d4:	cmp	r4, #0
    87d6:	it	eq
    87d8:	moveq	r3, r6
    87da:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    87dc:	ldr	r3, [sp, #8]
    87de:	cmp	r4, r3
        freeFound++;
    87e0:	itt	cc
    87e2:	addcc	r4, #1
    87e4:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    87e6:	cmp	r2, #0
    87e8:	beq.n	870c <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    87ea:	cmp	r2, #229	; 0xe5
    87ec:	bne.n	87fc <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
      lfnOrd = 0;
    87ee:	mov.w	r9, #0
    87f2:	b.n	86f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    87f4:	ldr	r3, [sp, #8]
    87f6:	cmp	r4, r3
    87f8:	it	cc
    87fa:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    87fc:	cmp	r2, #46	; 0x2e
    87fe:	beq.n	87ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    8800:	ldrb	r1, [r0, #11]
    } else if (isLongName(dir)) {
    8802:	cmp	r1, #15
    8804:	bne.n	885a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1da>
      if (!lfnOrd) {
    8806:	cmp.w	r9, #0
    880a:	bne.n	8846 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
        order = ldir->order & 0X1F;
    880c:	and.w	r8, r2, #31
        if (order != nameOrd ||
    8810:	ldr	r3, [sp, #24]
    8812:	cmp	r3, r8
    8814:	bne.w	86f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    8818:	ands.w	r9, r2, #64	; 0x40
    881c:	beq.w	86f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    8820:	ldrb.w	sl, [r0, #13]
    8824:	mov	r9, r3
      if (order == 1) {
    8826:	cmp.w	r8, #1
    882a:	bne.w	86f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    882e:	adds	r1, r6, #1
    8830:	mov	r3, r9
    8832:	mov	r2, r7
    8834:	mov	r0, r5
    8836:	uxth	r1, r1
    8838:	bl	8366 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    883c:	cmp	r0, #0
    883e:	it	eq
    8840:	moveq.w	r9, #0
    8844:	b.n	86f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    8846:	add.w	r8, r8, #4294967295
    884a:	uxtb.w	r8, r8
    884e:	cmp	r2, r8
    8850:	bne.n	87ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    8852:	ldrb	r2, [r0, #13]
    8854:	cmp	r2, sl
    8856:	beq.n	8826 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a6>
    8858:	b.n	87ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    } else if (isFileOrSubdir(dir)) {
    885a:	lsls	r3, r1, #28
    885c:	bmi.n	87ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
      if (lfnOrd) {
    885e:	cmp.w	r9, #0
    8862:	beq.n	887a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1fa>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    8864:	cmp.w	r8, #1
    8868:	bne.w	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    886c:	bl	8348 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    8870:	cmp	r0, sl
    8872:	bne.w	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    8876:	mov	fp, r9
    8878:	b.n	8894 <FatFile::open(FatFile*, FatLfn_t*, int)+0x214>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    887a:	movs	r2, #11
    887c:	vmov	r1, s16
    8880:	bl	ed10 <memcmp>
    8884:	cmp	r0, #0
    8886:	bne.w	86f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    888a:	ldrb.w	fp, [r7, #21]
    888e:	ands.w	fp, fp, #1
    8892:	bne.n	87c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x144>
  if (oflag & O_EXCL) {
    8894:	ldr	r3, [sp, #16]
    8896:	lsls	r1, r3, #20
    8898:	bmi.w	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    889c:	ldr	r3, [sp, #16]
    889e:	mov	r2, r6
    88a0:	mov	r1, r5
    88a2:	ldr	r0, [sp, #28]
    88a4:	str.w	fp, [sp]
    88a8:	bl	771e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    88ac:	b.n	86a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    88ae:	movs	r1, #0
    88b0:	mov	r0, r5
    88b2:	bl	75f4 <FatFile::readDirCache(bool)>
    if (!dir) {
    88b6:	cbnz	r0, 88de <FatFile::open(FatFile*, FatLfn_t*, int)+0x25e>
      if (dirFile->getError()) {
    88b8:	ldrb	r3, [r5, #1]
    88ba:	cmp	r3, #0
    88bc:	bne.w	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    88c0:	mov	r0, r5
    88c2:	bl	7380 <FatFile::addDirCluster()>
    88c6:	cmp	r0, #0
    88c8:	beq.w	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    88cc:	ldr	r3, [sp, #20]
    88ce:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    88d0:	add.w	r3, r4, r3, lsl #4
    88d4:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    88d6:	ldr	r3, [sp, #8]
    88d8:	cmp	r3, r4
    88da:	bhi.n	88c0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x240>
    88dc:	b.n	872e <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    88de:	adds	r4, #1
    88e0:	uxtb	r4, r4
    88e2:	b.n	8726 <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    88e4:	mov	r1, r7
    88e6:	mov	r0, r5
    88e8:	bl	85e8 <FatFile::makeUniqueSfn(FatLfn_t*)>
    88ec:	cmp	r0, #0
    88ee:	bne.w	8736 <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    88f2:	b.n	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    88f4:	movw	r3, #22561	; 0x5821
    88f8:	strh	r3, [r4, #16]
    88fa:	strh	r3, [r4, #24]
    88fc:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    88fe:	b.n	87b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    8900:	.word	0x2000fbfc

00008904 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8904:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8906:	mov	r4, r2
    8908:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    890a:	mov	r0, r1
    890c:	ldrb.w	r3, [r1], #1
    8910:	cmp	r3, #32
    8912:	beq.n	890a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    8914:	movs	r5, #0
    8916:	ldr	r7, [pc, #148]	; (89ac <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
    path++;
  }
  fname->begin = path;
    8918:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    891a:	ldrb	r3, [r0, #0]
    891c:	cbnz	r3, 896c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    891e:	ldr	r3, [r4, #16]
    8920:	subs	r3, #1
    8922:	cmp	r3, #254	; 0xfe
    8924:	bhi.n	894e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8926:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    8928:	ldrb.w	r3, [r0], #1
    892c:	cmp	r3, #32
    892e:	beq.n	8926 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    8930:	cmp	r3, #47	; 0x2f
    8932:	beq.n	8926 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    8934:	mov	r0, r4
  *ptr = path;
    8936:	str	r2, [r6, #0]

 fail:
  return false;
}
    8938:	add	sp, #12
    893a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    893e:	b.w	84c4 <FatFile::makeSFN(FatLfn_t*)>
    8942:	subs	r1, #34	; 0x22
    8944:	uxtb	r1, r1
    8946:	lsr.w	r1, r7, r1
    894a:	lsls	r2, r1, #31
    894c:	bpl.n	89a6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
}
    894e:	movs	r0, #0
    8950:	add	sp, #12
    8952:	pop	{r4, r5, r6, r7, pc}
    8954:	cmp	r1, #92	; 0x5c
    8956:	beq.n	894e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8958:	bhi.n	8966 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x62>
    895a:	subs	r1, #62	; 0x3e
    895c:	cmp	r1, #1
    895e:	bls.n	894e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
      fname->len = len;
    8960:	str	r5, [r4, #16]
      fname->end = path;
    8962:	str	r0, [r4, #8]
    8964:	b.n	891a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8966:	cmp	r1, #124	; 0x7c
    8968:	beq.n	894e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    896a:	b.n	8960 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
  while (*path && !isDirSeparator(*path)) {
    896c:	cmp	r3, #47	; 0x2f
    896e:	beq.n	891e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8970:	add	r2, sp, #4
    8972:	adds	r1, r0, #4
    8974:	bl	5998 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8978:	cmp	r0, #0
    897a:	beq.n	894e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    len += cp <= 0XFFFF ? 1 : 2;
    897c:	ldr	r3, [sp, #4]
    897e:	cmp.w	r3, #65536	; 0x10000
    8982:	ite	cc
    8984:	movcc	r2, #1
    8986:	movcs	r2, #2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8988:	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    898a:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    898c:	bhi.n	8960 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    898e:	cmp	r3, #60	; 0x3c
    8990:	uxtb	r1, r3
    8992:	bhi.n	8954 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    8994:	cmp	r1, #33	; 0x21
    8996:	bhi.n	8942 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    8998:	cmp	r1, #31
    899a:	bls.n	894e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    if (cp != '.' && cp != ' ') {
    899c:	cmp	r3, #46	; 0x2e
    899e:	beq.n	891a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    89a0:	cmp	r3, #32
    89a2:	beq.n	891a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    89a4:	b.n	8960 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    89a6:	cmp	r3, #46	; 0x2e
    89a8:	b.n	89a2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9e>
    89aa:	nop
    89ac:	.word	0x05002101

000089b0 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    89b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    89b4:	movs	r3, #0
    89b6:	sub	sp, #40	; 0x28
    89b8:	mov	r4, r0
    89ba:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    89bc:	ldrb	r3, [r0, #2]
    89be:	lsls	r2, r3, #30
    89c0:	bmi.n	89ca <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    89c2:	movs	r0, #0
}
    89c4:	add	sp, #40	; 0x28
    89c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    89ca:	ldr	r1, [r0, #32]
    89cc:	cmp	r1, #0
    89ce:	bne.n	8a5c <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    89d0:	movs	r1, #1
    89d2:	mov	r0, r4
    89d4:	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    89d8:	mov	r5, r0
    89da:	cmp	r0, #0
    89dc:	beq.n	89c2 <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    89de:	bl	8348 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    89e2:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    89e4:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    89e6:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    89e8:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    89ea:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    89ec:	ldr	r0, [r4, #8]
  m_flags = 0;
    89ee:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    89f0:	bl	7324 <FatPartition::cacheSync()>
    89f4:	cmp	r0, #0
    89f6:	beq.n	89c2 <FatFile::remove()+0x12>
  if (!isLFN()) {
    89f8:	ldrb	r3, [r4, #3]
    89fa:	cmp	r3, #0
    89fc:	beq.n	89c4 <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    89fe:	mov	r1, r4
    8a00:	add	r0, sp, #4
    8a02:	bl	741a <FatFile::openCluster(FatFile*)>
    8a06:	cmp	r0, #0
    8a08:	beq.n	89c2 <FatFile::remove()+0x12>
    8a0a:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8a0c:	uxtb.w	r8, r5
    8a10:	ldrb	r3, [r4, #3]
    8a12:	cmp	r3, r8
    8a14:	bcc.n	89c2 <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    8a16:	ldrh	r1, [r4, #4]
    8a18:	add	r0, sp, #4
    8a1a:	subs	r1, r1, r5
    8a1c:	uxth	r1, r1
    8a1e:	bl	7140 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    8a22:	cmp	r0, #0
    8a24:	beq.n	89c2 <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8a26:	ldrb	r3, [r0, #11]
    8a28:	cmp	r3, #15
    8a2a:	bne.n	89c2 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    8a2c:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8a2e:	and.w	r3, r2, #31
    8a32:	cmp	r3, r8
    8a34:	bne.n	89c2 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    8a36:	ldrb	r3, [r0, #13]
    8a38:	cmp	r3, r6
    8a3a:	bne.n	89c2 <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    8a3c:	strb	r7, [r0, #0]
    if (last) {
    8a3e:	adds	r5, #1
    m_vol->cacheDirty();
    8a40:	ldr	r1, [r4, #8]
    if (last) {
    8a42:	uxth	r5, r5
    8a44:	ldrb.w	r3, [r1, #40]	; 0x28
    8a48:	orr.w	r3, r3, #1
    8a4c:	strb.w	r3, [r1, #40]	; 0x28
    8a50:	lsls	r3, r2, #25
    8a52:	bpl.n	8a0c <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    8a54:	ldr	r0, [r4, #8]
    8a56:	bl	7324 <FatPartition::cacheSync()>
    8a5a:	b.n	89c4 <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8a5c:	ldr	r0, [r0, #8]
    8a5e:	bl	8106 <FatPartition::freeChain(unsigned long)>
    8a62:	cmp	r0, #0
    8a64:	bne.n	89d0 <FatFile::remove()+0x20>
    8a66:	b.n	89c2 <FatFile::remove()+0x12>

00008a68 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    8a68:	push	{r4, lr}
    8a6a:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8a6c:	ldr	r0, [r0, #56]	; 0x38
    8a6e:	cbz	r0, 8a7c <FsBaseFile::close()+0x14>
    8a70:	bl	78fc <FatFile::close()>
    8a74:	cbz	r0, 8a7c <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    8a76:	movs	r3, #0
    8a78:	str	r3, [r4, #56]	; 0x38
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
}
    8a7a:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    8a7c:	ldr	r0, [r4, #60]	; 0x3c
    8a7e:	cbnz	r0, 8a84 <FsBaseFile::close()+0x1c>
  return false;
    8a80:	movs	r0, #0
    8a82:	b.n	8a7a <FsBaseFile::close()+0x12>
  if (m_xFile && m_xFile->close()) {
    8a84:	bl	5d3e <ExFatFile::close()>
    8a88:	cmp	r0, #0
    8a8a:	beq.n	8a80 <FsBaseFile::close()+0x18>
    m_xFile = nullptr;
    8a8c:	movs	r3, #0
    8a8e:	str	r3, [r4, #60]	; 0x3c
    return true;
    8a90:	b.n	8a7a <FsBaseFile::close()+0x12>

00008a92 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    8a92:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    8a94:	push	{r4, r5, r6, lr}
    8a96:	mov	r6, r0
    8a98:	mov	r5, r1
  if (this == &from) return *this;
    8a9a:	beq.n	8ac4 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    8a9c:	bl	8a68 <FsBaseFile::close()>
  if (from.m_fFile) {
    8aa0:	ldr	r4, [r5, #56]	; 0x38
    8aa2:	cbz	r4, 8ac8 <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8aa4:	mov	r1, r6
    8aa6:	movs	r0, #36	; 0x24
    8aa8:	bl	8cc4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    8aac:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    8aae:	mov	r4, r0
    8ab0:	strh	r3, [r0, #0]
    8ab2:	strb	r3, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8ab4:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    8ab6:	ldr	r5, [r5, #56]	; 0x38
    8ab8:	ldmia	r5!, {r0, r1, r2, r3}
    8aba:	stmia	r4!, {r0, r1, r2, r3}
    8abc:	ldmia	r5!, {r0, r1, r2, r3}
    8abe:	stmia	r4!, {r0, r1, r2, r3}
    8ac0:	ldr	r3, [r5, #0]
    8ac2:	str	r3, [r4, #0]
}
    8ac4:	mov	r0, r6
    8ac6:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    8ac8:	ldr	r3, [r5, #60]	; 0x3c
    8aca:	cmp	r3, #0
    8acc:	beq.n	8ac4 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    8ace:	mov	r1, r6
    8ad0:	movs	r0, #56	; 0x38
    8ad2:	bl	8cc4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    8ad6:	strb.w	r4, [r0, #49]	; 0x31
    8ada:	strh	r4, [r0, #50]	; 0x32
    8adc:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    8ade:	ldr	r3, [r5, #60]	; 0x3c
    8ae0:	add.w	r2, r3, #52	; 0x34
    8ae4:	ldr.w	r1, [r3], #4
    8ae8:	cmp	r3, r2
    8aea:	str.w	r1, [r0], #4
    8aee:	bne.n	8ae4 <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    8af0:	b.n	8ac4 <FsBaseFile::operator=(FsBaseFile const&)+0x32>

00008af2 <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    8af2:	push	{r0, r1, r4, r5, r6, lr}
    8af4:	mov	r4, r0
  if (!vol) {
    8af6:	mov	r5, r1
    8af8:	cbnz	r1, 8b00 <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    8afa:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8afc:	add	sp, #8
    8afe:	pop	{r4, r5, r6, pc}
    8b00:	strd	r2, r3, [sp]
  close();
    8b04:	bl	8a68 <FsBaseFile::close()>
  if (vol->m_fVol) {
    8b08:	ldr.w	r6, [r5, #1152]	; 0x480
    8b0c:	ldrd	r2, r3, [sp]
    8b10:	cbz	r6, 8b38 <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    8b12:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    8b14:	mov	r1, r4
    8b16:	movs	r0, #36	; 0x24
    8b18:	bl	8cc4 <operator new(unsigned int, unsigned long*)>
    8b1c:	strh	r6, [r0, #0]
    8b1e:	strb	r6, [r0, #2]
    8b20:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    8b22:	ldr.w	r1, [r5, #1152]	; 0x480
    8b26:	ldrd	r2, r3, [sp]
    8b2a:	bl	79aa <FatFile::open(FatVolume*, char const*, int)>
    8b2e:	cbz	r0, 8b34 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    8b30:	movs	r0, #1
    8b32:	b.n	8afc <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    8b34:	str	r0, [r4, #56]	; 0x38
    8b36:	b.n	8afc <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    8b38:	ldr.w	r1, [r5, #1156]	; 0x484
    8b3c:	strd	r2, r3, [sp]
    8b40:	cmp	r1, #0
    8b42:	beq.n	8afa <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    8b44:	mov	r1, r4
    8b46:	movs	r0, #56	; 0x38
    8b48:	bl	8cc4 <operator new(unsigned int, unsigned long*)>
    8b4c:	strb.w	r6, [r0, #49]	; 0x31
    8b50:	strh	r6, [r0, #50]	; 0x32
    8b52:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    8b54:	ldr.w	r1, [r5, #1156]	; 0x484
    8b58:	ldrd	r2, r3, [sp]
    8b5c:	bl	649e <ExFatFile::open(ExFatVolume*, char const*, int)>
    8b60:	cmp	r0, #0
    8b62:	bne.n	8b30 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    8b64:	str	r0, [r4, #60]	; 0x3c
    8b66:	b.n	8afc <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

00008b68 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    8b68:	push	{r0, r1, r4, r5, r6, lr}
    8b6a:	mov	r5, r1
    8b6c:	str	r2, [sp, #4]
    8b6e:	mov	r4, r0
  close();
    8b70:	bl	8a68 <FsBaseFile::close()>
  if (dir->m_fFile) {
    8b74:	ldr	r6, [r5, #56]	; 0x38
    8b76:	ldr	r2, [sp, #4]
    8b78:	cbz	r6, 8b9e <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8b7a:	mov	r1, r4
    8b7c:	movs	r0, #36	; 0x24
    8b7e:	bl	8cc4 <operator new(unsigned int, unsigned long*)>
    8b82:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8b84:	ldr	r2, [sp, #4]
    8b86:	strh	r1, [r0, #0]
    8b88:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8b8a:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8b8c:	ldr	r1, [r5, #56]	; 0x38
    8b8e:	bl	77e0 <FatFile::openNext(FatFile*, int)>
    8b92:	cbz	r0, 8b9a <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    8b94:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8b96:	add	sp, #8
    8b98:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    8b9a:	str	r0, [r4, #56]	; 0x38
    8b9c:	b.n	8b96 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    8b9e:	ldr	r0, [r5, #60]	; 0x3c
    8ba0:	str	r2, [sp, #4]
    8ba2:	cmp	r0, #0
    8ba4:	beq.n	8b96 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    8ba6:	mov	r1, r4
    8ba8:	movs	r0, #56	; 0x38
    8baa:	bl	8cc4 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8bae:	ldr	r2, [sp, #4]
    8bb0:	strb.w	r6, [r0, #49]	; 0x31
    8bb4:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    8bb6:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8bb8:	ldr	r1, [r5, #60]	; 0x3c
    8bba:	bl	64ac <ExFatFile::openNext(ExFatFile*, int)>
    8bbe:	cmp	r0, #0
    8bc0:	bne.n	8b94 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    8bc2:	str	r0, [r4, #60]	; 0x3c
    8bc4:	b.n	8b96 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

00008bc8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8bc8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    8bcc:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8bce:	mov	r4, r0
    8bd0:	mov	r6, r3
  m_blockDev = blockDev;
    8bd2:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    8bd6:	str.w	r7, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    8bda:	mov	r1, r0
    8bdc:	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8be0:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    8be2:	bl	8cc4 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    8be6:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    8be8:	strb.w	r7, [r0, #1092]	; 0x444
    8bec:	mov	r5, r0
    8bee:	strb.w	r7, [r0, #1145]	; 0x479
    8bf2:	strh.w	r7, [r0, #1146]	; 0x47a
    8bf6:	str.w	r0, [r4, #1156]	; 0x484
    8bfa:	ldr.w	r1, [r4, #1160]	; 0x488
    8bfe:	ldr.w	r8, [pc, #152]	; 8c98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    8c02:	bl	67f0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    8c06:	cbz	r0, 8c38 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8c08:	add.w	r7, r5, #1096	; 0x448
    8c0c:	mov	r0, r7
    8c0e:	bl	5d3e <ExFatFile::close()>
    return m_vwd.openRoot(this);
    8c12:	mov	r1, r5
    8c14:	mov	r0, r7
    8c16:	bl	5d52 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    8c1a:	cbz	r0, 8c38 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
    if (setCwv || !m_cwv) {
    8c1c:	ldr	r3, [pc, #112]	; (8c90 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    8c1e:	ldr	r2, [r3, #0]
    8c20:	cbnz	r2, 8c24 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    8c22:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    8c24:	cmp.w	r9, #0
    8c28:	bne.n	8c30 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    8c2a:	ldr.w	r3, [r8]
    8c2e:	cbnz	r3, 8c34 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    m_cwv = this;
    8c30:	str.w	r4, [r8]
  }
  return true;
    8c34:	movs	r0, #1
    8c36:	b.n	8c8a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
  m_xVol = nullptr;
    8c38:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    8c3a:	mov	r1, r4
    8c3c:	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    8c40:	str.w	r7, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    8c44:	bl	8cc4 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    8c48:	movs	r3, #2
    8c4a:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    8c4c:	mov	r2, r6
    8c4e:	strb	r3, [r0, #8]
    8c50:	mov	r5, r0
    8c52:	strh.w	r7, [r0, #1096]	; 0x448
    8c56:	strb.w	r7, [r0, #1098]	; 0x44a
    8c5a:	str.w	r0, [r4, #1152]	; 0x480
    8c5e:	ldr.w	r1, [r4, #1160]	; 0x488
    8c62:	bl	81f4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    8c66:	cbz	r0, 8c80 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8c68:	add.w	r6, r5, #1096	; 0x448
    8c6c:	mov	r0, r6
    8c6e:	bl	78fc <FatFile::close()>
    return m_vwd.openRoot(this);
    8c72:	mov	r1, r5
    8c74:	mov	r0, r6
    8c76:	bl	740e <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    8c7a:	cbz	r0, 8c80 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
    if (setCwv || !m_cwv) {
    8c7c:	ldr	r3, [pc, #20]	; (8c94 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    8c7e:	b.n	8c1e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    8c80:	movs	r0, #0
    8c82:	str.w	r0, [r8]
  m_fVol = nullptr;
    8c86:	str.w	r0, [r4, #1152]	; 0x480
}
    8c8a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8c8e:	nop
    8c90:	.word	0x2000fc00
    8c94:	.word	0x2000fc38
    8c98:	.word	0x2000fc34

00008c9c <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    8c9c:	push	{r3, r4, r5, lr}
    8c9e:	mov	r4, r0
    8ca0:	mov.w	r5, #1000	; 0x3e8
    8ca4:	movs	r0, #0
    8ca6:	strd	r0, r5, [r4, #4]
    8caa:	strb	r0, [r4, #12]
    8cac:	ldr	r5, [pc, #16]	; (8cc0 <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    8cae:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    8cb2:	mov	r0, r4
    8cb4:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    8cb8:	bl	8af2 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    8cbc:	mov	r0, r4
    8cbe:	pop	{r3, r4, r5, pc}
    8cc0:	.word	0x20000548

00008cc4 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    8cc4:	mov	r0, r1
    8cc6:	bx	lr

00008cc8 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    8cc8:	mov.w	r0, #4294967295
    8ccc:	bx	lr

00008cce <SharedSpiCard::errorCode() const>:
  }
    8cce:	ldrb	r0, [r0, #17]
    8cd0:	bx	lr

00008cd2 <SharedSpiCard::errorData() const>:
  }
    8cd2:	ldrb	r0, [r0, #20]
    8cd4:	bx	lr

00008cd6 <SharedSpiCard::type() const>:
  }
    8cd6:	ldrb	r0, [r0, #21]
    8cd8:	bx	lr

00008cda <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    8cda:	movs	r0, #1
    8cdc:	bx	lr

00008cde <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    8cde:	ldrb	r0, [r0, #28]
    8ce0:	bx	lr

00008ce2 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    8ce2:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    8ce4:	push	{r4}
  return readSectors(sector, dst, 1);
    8ce6:	ldr	r4, [r3, #20]
    8ce8:	movs	r3, #1
    8cea:	mov	ip, r4
}
    8cec:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    8cf0:	bx	ip

00008cf2 <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8cf2:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    8cf4:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8cf6:	mov	r4, r0
    8cf8:	mov	r5, r1
  if (!syncDevice()) {
    8cfa:	ldr	r3, [r3, #32]
    8cfc:	blx	r3
    8cfe:	cbz	r0, 8d02 <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    8d00:	strb	r5, [r4, #28]
  return true;
}
    8d02:	pop	{r3, r4, r5, pc}

00008d04 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8d04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8d08:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8d0a:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8d0c:	mov	r4, r0
    8d0e:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8d10:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8d12:	mov	r6, r2
    8d14:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8d18:	bne.n	8d20 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    8d1a:	ldr	r3, [r0, #24]
    8d1c:	cmp	r3, r1
    8d1e:	beq.n	8d34 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    8d20:	ldr	r3, [r4, #0]
    8d22:	mov	r1, r5
    8d24:	mov	r0, r4
    8d26:	ldr	r3, [r3, #96]	; 0x60
    8d28:	blx	r3
    8d2a:	cbnz	r0, 8d32 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    8d2c:	movs	r0, #0
}
    8d2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8d32:	str	r5, [r4, #24]
    8d34:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8d38:	cmp	r5, r8
    8d3a:	bne.n	8d54 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    8d3c:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8d3e:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8d40:	add	r3, r6
    8d42:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8d44:	cmp	r0, #0
    8d46:	bne.n	8d2e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    8d48:	ldr	r3, [r4, #0]
    8d4a:	mov	r0, r4
    8d4c:	ldr	r3, [r3, #100]	; 0x64
}
    8d4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    8d52:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    8d54:	mov	r1, r9
    8d56:	mov	r0, r5
    8d58:	blx	r7
    if (!writeData(src)) {
    8d5a:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    8d5c:	mov	r1, r0
    if (!writeData(src)) {
    8d5e:	mov	r0, r4
    8d60:	ldr	r3, [r3, #92]	; 0x5c
    8d62:	adds	r5, #1
    8d64:	blx	r3
    8d66:	cmp	r0, #0
    8d68:	bne.n	8d38 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    8d6a:	b.n	8d2c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

00008d6c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8d6c:	bx	lr

00008d6e <SharedSpiCard::end()>:
    m_spiDriver.end();
    8d6e:	adds	r0, #4
    8d70:	b.w	a4a8 <SdSpiArduinoDriver::end()>

00008d74 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8d74:	push	{r4, lr}
    8d76:	mov	r4, r0
    8d78:	movs	r1, #32
    8d7a:	bl	cc5c <operator delete(void*, unsigned int)>
    8d7e:	mov	r0, r4
    8d80:	pop	{r4, pc}

00008d82 <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    8d82:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8d84:	ldr	r3, [r0, #0]
    8d86:	mov	r1, sp
    8d88:	ldr	r3, [r3, #76]	; 0x4c
    8d8a:	blx	r3
    8d8c:	cbz	r0, 8dd4 <SharedSpiCard::sectorCount()+0x52>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8d8e:	ldrb.w	r3, [sp]
    8d92:	ands.w	r3, r3, #192	; 0xc0
    8d96:	bne.n	8dda <SharedSpiCard::sectorCount()+0x58>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8d98:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8d9c:	ldrb.w	r0, [sp, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8da0:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8da4:	ldrb.w	r2, [sp, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8da8:	lsls	r0, r0, #2
    8daa:	orr.w	r0, r0, r3, lsl #10
    8dae:	ldrb.w	r3, [sp, #8]
    8db2:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8db6:	ldrb.w	r3, [sp, #9]
    8dba:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8dbe:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    8dc0:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8dc2:	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8dc6:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8dca:	and.w	r2, r2, #15
    8dce:	add	r3, r2
    8dd0:	subs	r3, #7
    8dd2:	lsls	r0, r3
}
    8dd4:	add	sp, #20
    8dd6:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    8dda:	cmp	r3, #64	; 0x40
    8ddc:	bne.n	8dfc <SharedSpiCard::sectorCount()+0x7a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8dde:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8de2:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8de6:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8de8:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8dec:	add.w	r0, r0, r3, lsl #16
    8df0:	ldrb.w	r3, [sp, #8]
    8df4:	add.w	r0, r0, r3, lsl #8
    8df8:	lsls	r0, r0, #10
    8dfa:	b.n	8dd4 <SharedSpiCard::sectorCount()+0x52>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8dfc:	movs	r0, #0
    8dfe:	b.n	8dd4 <SharedSpiCard::sectorCount()+0x52>

00008e00 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    8e00:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e04:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8e06:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8e08:	mov	r4, r0
    8e0a:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8e0c:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    8e0e:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8e10:	bne.n	8e18 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    8e12:	ldr	r3, [r0, #24]
    8e14:	cmp	r3, r1
    8e16:	beq.n	8e2c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    8e18:	ldr	r3, [r4, #0]
    8e1a:	mov	r1, r5
    8e1c:	mov	r0, r4
    8e1e:	ldr	r3, [r3, #96]	; 0x60
    8e20:	blx	r3
    8e22:	cbnz	r0, 8e2a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  return false;
    8e24:	movs	r0, #0
}
    8e26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    8e2a:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8e2c:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    8e2e:	cmp	r6, r5
    8e30:	add.w	r1, r7, r5, lsl #9
    8e34:	bne.n	8e4e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    8e36:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8e38:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8e3a:	add	r3, r6
    8e3c:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8e3e:	cmp	r0, #0
    8e40:	bne.n	8e26 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    8e42:	ldr	r3, [r4, #0]
    8e44:	mov	r0, r4
    8e46:	ldr	r3, [r3, #100]	; 0x64
}
    8e48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    8e4c:	bx	r3
    if (!writeData(src)) {
    8e4e:	ldr	r3, [r4, #0]
    8e50:	mov	r0, r4
    8e52:	ldr	r3, [r3, #92]	; 0x5c
    8e54:	blx	r3
    8e56:	cmp	r0, #0
    8e58:	beq.n	8e24 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    8e5a:	adds	r5, #1
    8e5c:	b.n	8e2e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

00008e5e <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    8e5e:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    8e60:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    8e62:	mov	r4, r0
  if (!m_spiActive) {
    8e64:	cbnz	r6, 8e82 <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    8e66:	adds	r5, r0, #4
    8e68:	mov	r0, r5
    8e6a:	bl	a44c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    8e6e:	mov	r1, r6
    8e70:	ldrb	r0, [r4, #16]
    8e72:	bl	a522 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8e76:	movs	r1, #255	; 0xff
    8e78:	mov	r0, r5
    8e7a:	bl	a4da <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    8e7e:	movs	r3, #1
    8e80:	strb	r3, [r4, #18]
}
    8e82:	pop	{r4, r5, r6, pc}

00008e84 <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    8e84:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    8e86:	push	{r0, r1, r4, lr}
    8e88:	mov	r4, r0
  if (m_spiActive) {
    8e8a:	cbz	r3, 8ea8 <SharedSpiCard::spiStop()+0x24>
    sdCsWrite(m_csPin, true);
    8e8c:	movs	r1, #1
    8e8e:	ldrb	r0, [r0, #16]
    8e90:	bl	a522 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8e94:	adds	r0, r4, #4
    8e96:	movs	r1, #255	; 0xff
    8e98:	str	r0, [sp, #4]
    8e9a:	bl	a4da <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8e9e:	ldr	r0, [sp, #4]
    8ea0:	bl	a45a <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8ea4:	movs	r3, #0
    8ea6:	strb	r3, [r4, #18]
}
    8ea8:	add	sp, #8
    8eaa:	pop	{r4, pc}

00008eac <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    8eac:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    8eae:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    8eb0:	mov	r4, r0
  if (m_state == READ_STATE) {
    8eb2:	cmp	r3, #1
    8eb4:	beq.n	8ed8 <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    8eb6:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    8eb8:	cbnz	r6, 8ebe <SharedSpiCard::isBusy()+0x12>
    spiStart();
    8eba:	bl	8e5e <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    8ebe:	adds	r0, r4, #4
    8ec0:	bl	a4ae <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    8ec4:	subs.w	r5, r0, #255	; 0xff
    8ec8:	it	ne
    8eca:	movne	r5, #1
  if (!spiActive) {
    8ecc:	cbnz	r6, 8ed4 <SharedSpiCard::isBusy()+0x28>
    spiStop();
    8ece:	mov	r0, r4
    8ed0:	bl	8e84 <SharedSpiCard::spiStop()>
}
    8ed4:	mov	r0, r5
    8ed6:	pop	{r4, r5, r6, pc}
    return false;
    8ed8:	movs	r5, #0
    8eda:	b.n	8ed4 <SharedSpiCard::isBusy()+0x28>

00008edc <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    8edc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8ede:	ldr	r7, [pc, #96]	; (8f40 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    8ee0:	mov	r4, r0
    8ee2:	adds	r6, r0, #4
    8ee4:	ldr	r5, [r7, #0]
    m_endTime = ms + millis16();
    8ee6:	add.w	r5, r5, #300	; 0x12c
    8eea:	uxth	r5, r5
    8eec:	mov	r0, r6
    8eee:	strd	r1, r2, [sp]
    8ef2:	bl	a4ae <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    8ef6:	cmp	r0, #255	; 0xff
    8ef8:	strb	r0, [r4, #20]
    8efa:	ldrd	r1, r2, [sp]
    8efe:	beq.n	8f20 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    8f00:	cmp	r0, #254	; 0xfe
    8f02:	bne.n	8f36 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    8f04:	mov	r0, r6
    8f06:	bl	a4b8 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    8f0a:	strb	r0, [r4, #20]
    8f0c:	cbnz	r0, 8f3a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    8f0e:	mov	r0, r6
    8f10:	bl	a4ae <SdSpiArduinoDriver::receive()>
    8f14:	mov	r0, r6
    8f16:	bl	a4ae <SdSpiArduinoDriver::receive()>
  return true;
    8f1a:	movs	r0, #1
}
    8f1c:	add	sp, #12
    8f1e:	pop	{r4, r5, r6, r7, pc}
    8f20:	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    8f22:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    8f24:	lsls	r3, r3, #16
    8f26:	bpl.n	8eec <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    8f28:	movs	r3, #29
  spiStop();
    8f2a:	mov	r0, r4
    m_errorCode = code;
    8f2c:	strb	r3, [r4, #17]
    8f2e:	bl	8e84 <SharedSpiCard::spiStop()>
  return false;
    8f32:	movs	r0, #0
    8f34:	b.n	8f1c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    8f36:	movs	r3, #24
    8f38:	b.n	8f2a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    8f3a:	movs	r3, #37	; 0x25
    8f3c:	b.n	8f2a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    8f3e:	nop
    8f40:	.word	0x2001094c

00008f44 <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    8f44:	mov.w	r2, #512	; 0x200
    8f48:	b.w	8edc <SharedSpiCard::readData(unsigned char*, unsigned int)>

00008f4c <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    8f4c:	push	{r4, r5, r6, lr}
    8f4e:	ldr	r6, [pc, #36]	; (8f74 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    8f50:	adds	r5, r0, #4
    8f52:	ldr	r3, [r6, #0]
    m_endTime = ms + millis16();
    8f54:	add	r1, r3
    8f56:	uxth	r4, r1
    8f58:	mov	r0, r5
    8f5a:	bl	a4ae <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8f5e:	cmp	r0, #255	; 0xff
    8f60:	bne.n	8f66 <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    8f62:	movs	r0, #1
}
    8f64:	pop	{r4, r5, r6, pc}
    8f66:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    8f68:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8f6a:	lsls	r3, r3, #16
    8f6c:	bpl.n	8f58 <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    8f6e:	movs	r0, #0
    8f70:	b.n	8f64 <SharedSpiCard::waitReady(unsigned short)+0x18>
    8f72:	nop
    8f74:	.word	0x2001094c

00008f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    8f78:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8f7a:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    8f7e:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8f80:	mov	r4, r0
    8f82:	str	r2, [sp, #4]
    8f84:	mov	r5, r1
  if (!syncDevice()) {
    8f86:	blx	r3
    8f88:	cmp	r0, #0
    8f8a:	beq.n	8ffe <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    8f8c:	ldrb	r3, [r4, #18]
    8f8e:	cbnz	r3, 8f96 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    8f90:	mov	r0, r4
    8f92:	bl	8e5e <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    8f96:	cmp	r5, #12
    8f98:	bne.n	8fec <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    8f9a:	adds	r6, r4, #4
    8f9c:	movs	r7, #3
    spiSend(pa[i]);
    8f9e:	add.w	r8, sp, #4
    8fa2:	orr.w	r1, r5, #64	; 0x40
    8fa6:	mov	r0, r6
    8fa8:	bl	a4da <SdSpiArduinoDriver::send(unsigned char)>
    8fac:	ldrb.w	r1, [r8, r7]
    8fb0:	mov	r0, r6
    8fb2:	bl	a4da <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    8fb6:	subs	r7, #1
    8fb8:	bcs.n	8fac <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    8fba:	cmp	r5, #0
    8fbc:	mov	r0, r6
    return m_spiDriver.receive();
    8fbe:	mov.w	r5, #10
    m_spiDriver.send(data);
    8fc2:	ite	eq
    8fc4:	moveq	r1, #149	; 0x95
    8fc6:	movne	r1, #135	; 0x87
    8fc8:	bl	a4da <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8fcc:	mov	r0, r6
    8fce:	bl	a4ae <SdSpiArduinoDriver::receive()>
    8fd2:	mov	r0, r6
    8fd4:	bl	a4ae <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    8fd8:	lsls	r3, r0, #24
    m_status = spiReceive();
    8fda:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    8fdc:	bpl.n	8fe6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    8fde:	subs	r5, #1
    8fe0:	uxth	r5, r5
    8fe2:	cmp	r5, #0
    8fe4:	bne.n	8fd2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    8fe6:	add	sp, #8
    8fe8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    8fec:	mov.w	r1, #300	; 0x12c
    8ff0:	mov	r0, r4
    8ff2:	bl	8f4c <SharedSpiCard::waitReady(unsigned short)>
    8ff6:	cmp	r0, #0
    8ff8:	bne.n	8f9a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    8ffa:	cmp	r5, #0
    8ffc:	beq.n	8f9a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    8ffe:	movs	r0, #255	; 0xff
    9000:	b.n	8fe6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

00009002 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    9002:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    9004:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    9006:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    9008:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    900a:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    900c:	bl	8f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9010:	cbz	r0, 9020 <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    9012:	movs	r3, #18
  spiStop();
    9014:	mov	r0, r4
    9016:	strb	r3, [r4, #17]
    9018:	bl	8e84 <SharedSpiCard::spiStop()>
  return false;
    901c:	movs	r0, #0
}
    901e:	pop	{r3, r4, r5, r6, r7, pc}
    9020:	adds	r6, r5, #4
    return m_spiDriver.receive();
    9022:	adds	r7, r4, #4
    9024:	mov	r0, r7
    9026:	bl	a4ae <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    902a:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    902e:	cmp	r6, r5
    9030:	bne.n	9024 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    9032:	mov	r0, r4
    9034:	bl	8e84 <SharedSpiCard::spiStop()>
    9038:	movs	r0, #1
    903a:	b.n	901e <SharedSpiCard::readOCR(unsigned long*)+0x1c>

0000903c <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    903c:	push	{r3, r4, r5, lr}
    903e:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    9040:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    9042:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    9044:	bl	8f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9048:	cbz	r0, 9058 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    904a:	movs	r3, #27
    904c:	strb	r3, [r4, #17]
  spiStop();
    904e:	mov	r0, r4
  return false;
    9050:	movs	r5, #0
  spiStop();
    9052:	bl	8e84 <SharedSpiCard::spiStop()>
  return false;
    9056:	b.n	906e <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    9058:	mov	r1, r5
    905a:	movs	r2, #16
    905c:	mov	r0, r4
    905e:	bl	8edc <SharedSpiCard::readData(unsigned char*, unsigned int)>
    9062:	mov	r5, r0
    9064:	cmp	r0, #0
    9066:	beq.n	904e <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    9068:	mov	r0, r4
    906a:	bl	8e84 <SharedSpiCard::spiStop()>
}
    906e:	mov	r0, r5
    9070:	pop	{r3, r4, r5, pc}

00009072 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    9072:	mov	r2, r1
    return readRegister(CMD9, csd);
    9074:	movs	r1, #9
    9076:	b.w	903c <SharedSpiCard::readRegister(unsigned char, void*)>

0000907a <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    907a:	mov	r2, r1
    return readRegister(CMD10, cid);
    907c:	movs	r1, #10
    907e:	b.w	903c <SharedSpiCard::readRegister(unsigned char, void*)>

00009082 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    9082:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    9084:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    9086:	mov	r5, r1
    9088:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    908a:	ldr	r3, [r3, #88]	; 0x58
    908c:	blx	r3
    908e:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    9090:	mov.w	r1, #18
    9094:	mov	r0, r4
    sector <<= 9;
    9096:	it	ne
    9098:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    909a:	mov	r2, r5
    909c:	bl	8f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    90a0:	cbz	r0, 90b0 <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    90a2:	movs	r3, #12
  spiStop();
    90a4:	mov	r0, r4
    90a6:	strb	r3, [r4, #17]
    90a8:	bl	8e84 <SharedSpiCard::spiStop()>
  return false;
    90ac:	movs	r0, #0
}
    90ae:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    90b0:	movs	r0, #1
    90b2:	strb	r0, [r4, #19]
  return true;
    90b4:	b.n	90ae <SharedSpiCard::readStart(unsigned long)+0x2c>

000090b6 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    90b6:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    90b8:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    90ba:	movs	r1, #12
bool SharedSpiCard::readStop() {
    90bc:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    90be:	mov	r2, r4
  m_state = IDLE_STATE;
    90c0:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    90c2:	bl	8f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    90c6:	cbz	r0, 90d6 <SharedSpiCard::readStop()+0x20>
    90c8:	movs	r3, #9
  spiStop();
    90ca:	mov	r0, r5
    90cc:	strb	r3, [r5, #17]
    90ce:	bl	8e84 <SharedSpiCard::spiStop()>
  return false;
    90d2:	mov	r0, r4
}
    90d4:	pop	{r3, r4, r5, pc}
  spiStop();
    90d6:	mov	r0, r5
    90d8:	bl	8e84 <SharedSpiCard::spiStop()>
  return true;
    90dc:	movs	r0, #1
    90de:	b.n	90d4 <SharedSpiCard::readStop()+0x1e>

000090e0 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    90e0:	ldrb	r2, [r0, #19]
    90e2:	cmp	r2, #2
    90e4:	bne.n	90ec <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    90e6:	ldr	r3, [r0, #0]
    90e8:	ldr	r3, [r3, #100]	; 0x64
    90ea:	bx	r3
  if (m_state == READ_STATE) {
    90ec:	cmp	r2, #1
    90ee:	bne.n	90f4 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    90f0:	b.w	90b6 <SharedSpiCard::readStop()>
}
    90f4:	movs	r0, #1
    90f6:	bx	lr

000090f8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    90f8:	push	{r3, r4, r5, r6, r7, lr}
    90fa:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    90fc:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    90fe:	mov	r4, r0
    9100:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    9102:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    9104:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    9106:	bne.n	910e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    9108:	ldr	r3, [r0, #24]
    910a:	cmp	r3, r1
    910c:	beq.n	911e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    910e:	mov	r1, r5
    9110:	mov	r0, r4
    9112:	bl	9082 <SharedSpiCard::readStart(unsigned long)>
    9116:	cbnz	r0, 911c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    9118:	movs	r0, #0
}
    911a:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    911c:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    911e:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    9120:	cmp	r5, r6
    9122:	add.w	r1, r7, r5, lsl #9
    9126:	bne.n	913e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    9128:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    912a:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    912c:	add	r3, r5
    912e:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    9130:	cmp	r0, #0
    9132:	bne.n	911a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    9134:	mov	r0, r4
}
    9136:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    913a:	b.w	90b6 <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    913e:	mov	r0, r4
    9140:	bl	8f44 <SharedSpiCard::readData(unsigned char*)>
    9144:	cmp	r0, #0
    9146:	beq.n	9118 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    9148:	adds	r5, #1
    914a:	b.n	9120 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

0000914c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    914c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9150:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    9152:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    9154:	mov	r4, r0
    9156:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    9158:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    915a:	mov	r7, r2
    915c:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    9160:	bne.n	9168 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    9162:	ldr	r3, [r0, #24]
    9164:	cmp	r3, r1
    9166:	beq.n	917a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    9168:	mov	r1, r5
    916a:	mov	r0, r4
    916c:	bl	9082 <SharedSpiCard::readStart(unsigned long)>
    9170:	cbnz	r0, 9178 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    9172:	movs	r0, #0
}
    9174:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    9178:	str	r5, [r4, #24]
    917a:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    917e:	cmp	r5, r8
    9180:	bne.n	9198 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    9182:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    9184:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    9186:	add	r3, r6
    9188:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    918a:	cmp	r0, #0
    918c:	bne.n	9174 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    918e:	mov	r0, r4
}
    9190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    9194:	b.w	90b6 <SharedSpiCard::readStop()>
    if (readData(dst)) {
    9198:	mov	r1, r7
    919a:	mov	r0, r4
    919c:	bl	8f44 <SharedSpiCard::readData(unsigned char*)>
    91a0:	cmp	r0, #0
    91a2:	beq.n	9172 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    91a4:	mov	r0, r5
    91a6:	mov	r2, sl
    91a8:	mov	r1, r7
    91aa:	adds	r5, #1
    91ac:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    91ae:	b.n	917e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

000091b0 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    91b0:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    91b2:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    91b4:	mov	r5, r1
    91b6:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    91b8:	ldr	r3, [r3, #88]	; 0x58
    91ba:	blx	r3
    91bc:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    91be:	mov.w	r1, #25
    91c2:	mov	r0, r4
    sector <<= 9;
    91c4:	it	ne
    91c6:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    91c8:	mov	r2, r5
    91ca:	bl	8f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    91ce:	cbz	r0, 91de <SharedSpiCard::writeStart(unsigned long)+0x2e>
    91d0:	movs	r3, #14
  spiStop();
    91d2:	mov	r0, r4
    91d4:	strb	r3, [r4, #17]
    91d6:	bl	8e84 <SharedSpiCard::spiStop()>
  return false;
    91da:	movs	r0, #0
}
    91dc:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    91de:	movs	r3, #2
  return true;
    91e0:	movs	r0, #1
  m_state = WRITE_STATE;
    91e2:	strb	r3, [r4, #19]
  return true;
    91e4:	b.n	91dc <SharedSpiCard::writeStart(unsigned long)+0x2c>

000091e6 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    91e6:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    91e8:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    91ea:	mov	r6, r1
  if (!readCSD(&csd)) {
    91ec:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    91ee:	mov	r4, r0
  if (!readCSD(&csd)) {
    91f0:	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    91f2:	mov	r5, r2
  if (!readCSD(&csd)) {
    91f4:	blx	r3
    91f6:	cbz	r0, 921a <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
  if (!csd.v1.erase_blk_en) {
    91f8:	ldrb.w	r3, [sp, #10]
    91fc:	lsls	r2, r3, #25
    91fe:	bmi.n	9224 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    9200:	and.w	r3, r3, #63	; 0x3f
    9204:	ldrb.w	r2, [sp, #11]
    9208:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    920a:	orr.w	r3, r3, r2, lsr #7
    920e:	adds	r2, r5, #1
    9210:	orrs	r2, r6
    9212:	tst	r3, r2
    9214:	beq.n	9224 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    9216:	movs	r3, #39	; 0x27
    9218:	strb	r3, [r4, #17]
  spiStop();
    921a:	mov	r0, r4
  return false;
    921c:	movs	r5, #0
  spiStop();
    921e:	bl	8e84 <SharedSpiCard::spiStop()>
  return false;
    9222:	b.n	9272 <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    9224:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    9226:	movs	r1, #32
    9228:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    922a:	cmp	r3, #3
    firstSector <<= 9;
    922c:	itt	ne
    922e:	lslne	r6, r6, #9
    lastSector <<= 9;
    9230:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    9232:	mov	r2, r6
    9234:	bl	8f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    9238:	cbz	r0, 923e <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    923a:	movs	r3, #38	; 0x26
    923c:	b.n	9218 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
      || cardCommand(CMD33, lastSector)
    923e:	mov	r2, r5
    9240:	movs	r1, #33	; 0x21
    9242:	mov	r0, r4
    9244:	bl	8f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9248:	mov	r2, r0
    924a:	cmp	r0, #0
    924c:	bne.n	923a <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      || cardCommand(CMD38, 0)) {
    924e:	movs	r1, #38	; 0x26
    9250:	mov	r0, r4
    9252:	bl	8f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9256:	cmp	r0, #0
    9258:	bne.n	923a <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    925a:	movw	r1, #10000	; 0x2710
    925e:	mov	r0, r4
    9260:	bl	8f4c <SharedSpiCard::waitReady(unsigned short)>
    9264:	mov	r5, r0
    9266:	cbnz	r0, 926c <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    9268:	movs	r3, #40	; 0x28
    926a:	b.n	9218 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    926c:	mov	r0, r4
    926e:	bl	8e84 <SharedSpiCard::spiStop()>
}
    9272:	mov	r0, r5
    9274:	add	sp, #16
    9276:	pop	{r4, r5, r6, pc}

00009278 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    9278:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    927a:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    927e:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    9280:	bl	8f4c <SharedSpiCard::waitReady(unsigned short)>
    9284:	mov	r5, r0
    9286:	cbnz	r0, 9296 <SharedSpiCard::writeStop()+0x1e>
    9288:	movs	r3, #30
  spiStop();
    928a:	mov	r0, r4
    928c:	strb	r3, [r4, #17]
    928e:	bl	8e84 <SharedSpiCard::spiStop()>
}
    9292:	mov	r0, r5
    9294:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    9296:	movs	r1, #253	; 0xfd
    9298:	adds	r0, r4, #4
    929a:	bl	a4da <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    929e:	mov	r0, r4
    92a0:	bl	8e84 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    92a4:	movs	r3, #0
    92a6:	strb	r3, [r4, #19]
  return true;
    92a8:	b.n	9292 <SharedSpiCard::writeStop()+0x1a>

000092aa <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    92aa:	push	{r0, r1, r2, r4, r5, lr}
    92ac:	mov	r5, r2
    92ae:	mov	r4, r0
    92b0:	adds	r0, #4
    92b2:	str	r0, [sp, #4]
    92b4:	bl	a4da <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    92b8:	mov.w	r2, #512	; 0x200
    92bc:	mov	r1, r5
    92be:	ldr	r0, [sp, #4]
    92c0:	bl	a4e2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    92c4:	movs	r1, #255	; 0xff
    92c6:	ldr	r0, [sp, #4]
    92c8:	bl	a4da <SdSpiArduinoDriver::send(unsigned char)>
    92cc:	movs	r1, #255	; 0xff
    92ce:	ldr	r0, [sp, #4]
    92d0:	bl	a4da <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    92d4:	ldr	r0, [sp, #4]
    92d6:	bl	a4ae <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    92da:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    92dc:	and.w	r0, r0, #31
    92e0:	cmp	r0, #5
    92e2:	beq.n	92f4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    92e4:	movs	r3, #32
  spiStop();
    92e6:	mov	r0, r4
    92e8:	strb	r3, [r4, #17]
    92ea:	bl	8e84 <SharedSpiCard::spiStop()>
  return false;
    92ee:	movs	r0, #0
}
    92f0:	add	sp, #12
    92f2:	pop	{r4, r5, pc}
  return true;
    92f4:	movs	r0, #1
    92f6:	b.n	92f0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

000092f8 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    92f8:	push	{r0, r1, r4, lr}
    92fa:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    92fc:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    9300:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    9302:	bl	8f4c <SharedSpiCard::waitReady(unsigned short)>
    9306:	ldr	r2, [sp, #4]
    9308:	cbnz	r0, 9318 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    930a:	movs	r3, #36	; 0x24
    930c:	strb	r3, [r4, #17]
  spiStop();
    930e:	mov	r0, r4
    9310:	bl	8e84 <SharedSpiCard::spiStop()>
  return false;
    9314:	movs	r0, #0
    9316:	b.n	9324 <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    9318:	movs	r1, #252	; 0xfc
    931a:	mov	r0, r4
    931c:	bl	92aa <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    9320:	cmp	r0, #0
    9322:	beq.n	930e <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    9324:	add	sp, #8
    9326:	pop	{r4, pc}

00009328 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    9328:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    932a:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    932c:	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    932e:	mov	r5, r1
    9330:	mov	r4, r0
    9332:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    9334:	blx	r3
    9336:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    9338:	mov.w	r1, #24
    933c:	mov	r0, r4
    sector <<= 9;
    933e:	it	ne
    9340:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    9342:	mov	r2, r5
    9344:	bl	8f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9348:	cbz	r0, 9358 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    934a:	movs	r3, #13
    934c:	strb	r3, [r4, #17]
  spiStop();
    934e:	mov	r0, r4
  return false;
    9350:	movs	r5, #0
  spiStop();
    9352:	bl	8e84 <SharedSpiCard::spiStop()>
  return false;
    9356:	b.n	936e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    9358:	mov	r2, r6
    935a:	movs	r1, #254	; 0xfe
    935c:	mov	r0, r4
    935e:	bl	92aa <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    9362:	mov	r5, r0
    9364:	cmp	r0, #0
    9366:	beq.n	934e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    9368:	mov	r0, r4
    936a:	bl	8e84 <SharedSpiCard::spiStop()>
}
    936e:	mov	r0, r5
    9370:	pop	{r4, r5, r6, pc}

00009372 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    9372:	push	{r4}
  if (m_dedicatedSpi) {
    9374:	ldrb	r4, [r0, #28]
    9376:	cbz	r4, 9386 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    9378:	ldr	r3, [r0, #0]
    937a:	ldr	r4, [r3, #40]	; 0x28
    937c:	movs	r3, #1
    937e:	mov	ip, r4
}
    9380:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    9384:	bx	ip
}
    9386:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    938a:	b.w	9328 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000938e <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    938e:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9392:	ldr	r5, [sp, #32]
    9394:	mov	r6, r0
    9396:	mov	r4, r1
    9398:	mov	r7, r2
    939a:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    939e:	cmp	r4, r8
    93a0:	bne.n	93a8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    93a2:	movs	r0, #1
  }
    93a4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    93a8:	ldr	r3, [r6, #0]
    93aa:	mov	r2, r7
    93ac:	mov	r1, r4
    93ae:	mov	r0, r6
    93b0:	ldr	r3, [r3, #16]
    93b2:	add.w	r9, r4, #1
    93b6:	blx	r3
    93b8:	cmp	r0, #0
    93ba:	beq.n	93a4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    93bc:	mov	r0, r4
    93be:	ldr	r2, [sp, #36]	; 0x24
    93c0:	mov	r1, r7
    93c2:	mov	r4, r9
    93c4:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    93c6:	b.n	939e <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

000093c8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    93c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93cc:	mov	r5, r0
    93ce:	mov	r4, r1
    93d0:	mov	r7, r3
    93d2:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    93d4:	cmp	r4, r6
    93d6:	bne.n	93dc <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    93d8:	movs	r0, #1
    93da:	b.n	93f6 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    93dc:	ldr	r3, [r5, #0]
    93de:	mov	r0, r4
    93e0:	ldr	r1, [sp, #24]
    93e2:	ldr.w	r8, [r3, #36]	; 0x24
    93e6:	blx	r7
    93e8:	mov	r1, r4
    93ea:	mov	r2, r0
    93ec:	mov	r0, r5
    93ee:	adds	r4, #1
    93f0:	blx	r8
    93f2:	cmp	r0, #0
    93f4:	bne.n	93d4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    93f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000093fa <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    93fa:	movs	r0, #0
    93fc:	bx	lr

000093fe <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    93fe:	movs	r0, #0
    9400:	bx	lr

00009402 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    9402:	movs	r0, #0
    9404:	bx	lr

00009406 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    9406:	bx	lr

00009408 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    9408:	ldr	r3, [pc, #28]	; (9428 <sdIrs()+0x20>)
    940a:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    940c:	ldr	r2, [pc, #28]	; (942c <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    940e:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    9410:	ldr	r0, [r3, #48]	; 0x30
    9412:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    9414:	ldr	r2, [r2, #0]
    9416:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    9418:	ldr	r2, [r3, #72]	; 0x48
    941a:	bic.w	r2, r2, #129	; 0x81
    941e:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    9420:	ldr	r3, [pc, #12]	; (9430 <sdIrs()+0x28>)
    9422:	strb	r1, [r3, #0]
}
    9424:	bx	lr
    9426:	nop
    9428:	.word	0x402c0000
    942c:	.word	0x2000fbf8
    9430:	.word	0x20010b12

00009434 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9434:	ldr	r3, [pc, #24]	; (9450 <gpioMux(unsigned char)+0x1c>)
    9436:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    943a:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    943e:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9442:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9446:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    944a:	str.w	r0, [r3, #456]	; 0x1c8
}
    944e:	bx	lr
    9450:	.word	0x401f8000

00009454 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    9454:	ldr	r3, [pc, #12]	; (9464 <isBusyCommandComplete()+0x10>)
    9456:	ldr	r0, [pc, #16]	; (9468 <isBusyCommandComplete()+0x14>)
    9458:	ldr	r3, [r3, #48]	; 0x30
    945a:	ands	r0, r3
}
    945c:	clz	r0, r0
    9460:	lsrs	r0, r0, #5
    9462:	bx	lr
    9464:	.word	0x402c0000
    9468:	.word	0x000f0001

0000946c <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    946c:	ldr	r3, [pc, #8]	; (9478 <isBusyCommandInhibit()+0xc>)
    946e:	ldr	r0, [r3, #36]	; 0x24
}
    9470:	and.w	r0, r0, #1
    9474:	bx	lr
    9476:	nop
    9478:	.word	0x402c0000

0000947c <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    947c:	ldr	r3, [pc, #12]	; (948c <isBusyDat()+0x10>)
    947e:	ldr	r0, [r3, #36]	; 0x24
    9480:	eor.w	r0, r0, #16777216	; 0x1000000
}
    9484:	ubfx	r0, r0, #24, #1
    9488:	bx	lr
    948a:	nop
    948c:	.word	0x402c0000

00009490 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    9490:	ldr	r3, [pc, #4]	; (9498 <isBusyDMA()+0x8>)
    9492:	ldrb	r0, [r3, #0]
}
    9494:	bx	lr
    9496:	nop
    9498:	.word	0x20010b12

0000949c <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    949c:	ldr	r3, [pc, #12]	; (94ac <isBusyFifoRead()+0x10>)
    949e:	ldr	r0, [r3, #36]	; 0x24
    94a0:	eor.w	r0, r0, #2048	; 0x800
}
    94a4:	ubfx	r0, r0, #11, #1
    94a8:	bx	lr
    94aa:	nop
    94ac:	.word	0x402c0000

000094b0 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    94b0:	ldr	r3, [pc, #12]	; (94c0 <isBusyFifoWrite()+0x10>)
    94b2:	ldr	r0, [r3, #36]	; 0x24
    94b4:	eor.w	r0, r0, #1024	; 0x400
}
    94b8:	ubfx	r0, r0, #10, #1
    94bc:	bx	lr
    94be:	nop
    94c0:	.word	0x402c0000

000094c4 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    94c4:	ldr	r3, [pc, #12]	; (94d4 <isBusyTransferComplete()+0x10>)
    94c6:	ldr	r0, [pc, #16]	; (94d8 <isBusyTransferComplete()+0x14>)
    94c8:	ldr	r3, [r3, #48]	; 0x30
    94ca:	ands	r0, r3
}
    94cc:	clz	r0, r0
    94d0:	lsrs	r0, r0, #5
    94d2:	bx	lr
    94d4:	.word	0x402c0000
    94d8:	.word	0x117f0002

000094dc <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    94dc:	mov.w	r3, #1000	; 0x3e8
    94e0:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    94e2:	ldr	r3, [pc, #140]	; (9570 <setSdclk(unsigned long)+0x94>)
    94e4:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    94e6:	sub.w	r3, r3, #147456	; 0x24000
    94ea:	ldr.w	r1, [r3, #256]	; 0x100
    94ee:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    94f0:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    94f4:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    94f8:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    94fa:	udiv	r1, r1, r3
    94fe:	ldr	r3, [pc, #116]	; (9574 <setSdclk(unsigned long)+0x98>)
    9500:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    9504:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    9506:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    950a:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    950c:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    950e:	lsls	r4, r2, #4
    9510:	udiv	r4, r3, r4
    9514:	cmp	r4, r0
    9516:	bls.n	951c <setSdclk(unsigned long)+0x40>
    9518:	subs	r1, #1
    951a:	bne.n	9522 <setSdclk(unsigned long)+0x46>
    951c:	mov	r4, r2
    951e:	movs	r1, #1
    9520:	b.n	952a <setSdclk(unsigned long)+0x4e>
    sdclkfs <<= 1;
    9522:	lsls	r2, r2, #1
    9524:	b.n	950e <setSdclk(unsigned long)+0x32>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    9526:	adds	r1, #1
    9528:	mov	r4, r5
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    952a:	udiv	r5, r3, r4
    952e:	cmp	r5, r0
    9530:	bls.n	953a <setSdclk(unsigned long)+0x5e>
    9532:	cmp	r1, #16
    9534:	add.w	r5, r2, r4
    9538:	bne.n	9526 <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    953a:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    953e:	subs	r1, #1
  sdclkfs >>= 1;
    9540:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    9542:	muls	r4, r0
    9544:	ldr	r0, [pc, #48]	; (9578 <setSdclk(unsigned long)+0x9c>)
    9546:	udiv	r3, r3, r4
    954a:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    954c:	ldr	r0, [pc, #44]	; (957c <setSdclk(unsigned long)+0xa0>)
    954e:	ldr	r3, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    9550:	bic.w	r3, r3, #1044480	; 0xff000
    9554:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    9558:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    955c:	orr.w	r3, r3, r2, lsl #8
    9560:	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    9564:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    9566:	ldr	r3, [r0, #36]	; 0x24
    9568:	lsls	r3, r3, #28
    956a:	bpl.n	9566 <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    956c:	pop	{r4, r5, pc}
    956e:	nop
    9570:	.word	0x400fc000
    9574:	.word	0x5e69ec00
    9578:	.word	0x2000dbd0
    957c:	.word	0x402c0000

00009580 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    9580:	ldr	r3, [pc, #4]	; (9588 <SdioCard::errorCode() const+0x8>)
    9582:	ldrb	r0, [r3, #0]
    9584:	bx	lr
    9586:	nop
    9588:	.word	0x20009410

0000958c <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    958c:	ldr	r3, [pc, #4]	; (9594 <SdioCard::errorData() const+0x8>)
    958e:	ldr	r0, [r3, #0]
}
    9590:	bx	lr
    9592:	nop
    9594:	.word	0x2000fbf8

00009598 <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    9598:	ldr	r3, [pc, #20]	; (95b0 <SdioCard::readCID(CID*)+0x18>)
    959a:	add.w	r2, r3, #16
    959e:	ldr.w	r0, [r3], #4
    95a2:	cmp	r3, r2
    95a4:	str.w	r0, [r1], #4
    95a8:	bne.n	959e <SdioCard::readCID(CID*)+0x6>
  return true;
}
    95aa:	movs	r0, #1
    95ac:	bx	lr
    95ae:	nop
    95b0:	.word	0x20010a52

000095b4 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    95b4:	ldr	r3, [pc, #20]	; (95cc <SdioCard::readCSD(csd_t*)+0x18>)
    95b6:	add.w	r2, r3, #16
    95ba:	ldr.w	r0, [r3], #4
    95be:	cmp	r3, r2
    95c0:	str.w	r0, [r1], #4
    95c4:	bne.n	95ba <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    95c6:	movs	r0, #1
    95c8:	bx	lr
    95ca:	nop
    95cc:	.word	0x20010a62

000095d0 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    95d0:	ldr	r3, [pc, #8]	; (95dc <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    95d2:	movs	r0, #1
  *ocr = m_ocr;
    95d4:	ldr	r3, [r3, #0]
    95d6:	str	r3, [r1, #0]
}
    95d8:	bx	lr
    95da:	nop
    95dc:	.word	0x2000f5ec

000095e0 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    95e0:	bx	lr
	...

000095e4 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    95e4:	push	{r3, r4, r5, r6, r7, lr}
    95e6:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    95e8:	ldr	r7, [pc, #24]	; (9604 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    95ea:	bl	ba68 <micros>
    95ee:	mov	r6, r0
  while (fcn()) {
    95f0:	blx	r5
    95f2:	mov	r4, r0
    95f4:	cbz	r0, 9600 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    95f6:	bl	ba68 <micros>
    95fa:	subs	r0, r0, r6
    95fc:	cmp	r0, r7
    95fe:	bls.n	95f0 <waitTimeout(bool (*)())+0xc>
}
    9600:	mov	r0, r4
    9602:	pop	{r3, r4, r5, r6, r7, pc}
    9604:	.word	0x000f4240

00009608 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    9608:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    960c:	ldr	r7, [pc, #44]	; (963c <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    960e:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9610:	ldr.w	r8, [pc, #44]	; 9640 <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    9614:	str	r0, [r7, #0]
  uint32_t m = micros();
    9616:	bl	ba68 <micros>
    961a:	mov	r6, r0
  while (fcn()) {
    961c:	blx	r5
    961e:	mov	r4, r0
    9620:	cbnz	r0, 962c <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    9622:	movs	r3, #0
}
    9624:	mov	r0, r4
      m_busyFcn = 0;
    9626:	str	r3, [r7, #0]
}
    9628:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    962c:	bl	ba68 <micros>
    9630:	subs	r0, r0, r6
    9632:	cmp	r0, r8
    9634:	bhi.n	9622 <yieldTimeout(bool (*)())+0x1a>
    yield();
    9636:	bl	c730 <yield>
    963a:	b.n	961c <yieldTimeout(bool (*)())+0x14>
    963c:	.word	0x2000fbf4
    9640:	.word	0x000f4240

00009644 <SdioCard::~SdioCard()>:
    9644:	push	{r4, lr}
    9646:	mov	r4, r0
    9648:	movs	r1, #12
    964a:	bl	cc5c <operator delete(void*, unsigned int)>
    964e:	mov	r0, r4
    9650:	pop	{r4, pc}
	...

00009654 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    9654:	push	{r3, lr}
    gpioMux(0);
    9656:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9658:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    965c:	bl	9434 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9660:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9664:	ldr	r3, [pc, #24]	; (9680 <enableGPIO(bool) [clone .part.0]+0x2c>)
    9666:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    966a:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    966e:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9672:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    9676:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    967a:	str.w	r2, [r3, #952]	; 0x3b8
}
    967e:	pop	{r3, pc}
    9680:	.word	0x401f8000

00009684 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9684:	ldr	r3, [pc, #184]	; (9740 <initSDHC()+0xbc>)
    gpioMux(5);
    9686:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9688:	ldr.w	r2, [r3, #256]	; 0x100
    968c:	orr.w	r2, r2, #128	; 0x80
static void initSDHC() {
    9690:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9692:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9696:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    969a:	ldr	r4, [pc, #168]	; (9744 <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    969c:	bic.w	r2, r2, #63	; 0x3f
    96a0:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    96a4:	ldr.w	r2, [r3, #256]	; 0x100
    96a8:	orr.w	r2, r2, #24
    96ac:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    96b0:	ldr.w	r2, [r3, #256]	; 0x100
    96b4:	bic.w	r2, r2, #128	; 0x80
    96b8:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    96bc:	add.w	r3, r3, #147456	; 0x24000
    96c0:	ldr.w	r2, [r3, #128]	; 0x80
    96c4:	orr.w	r2, r2, #12
    96c8:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    96cc:	ldr	r2, [r3, #36]	; 0x24
    96ce:	bic.w	r2, r2, #14336	; 0x3800
    96d2:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    96d4:	ldr	r2, [r3, #28]
    96d6:	orr.w	r2, r2, #65536	; 0x10000
    96da:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    96dc:	ldr	r2, [r3, #36]	; 0x24
    96de:	orr.w	r2, r2, #2048	; 0x800
    96e2:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    96e4:	bl	9434 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    96e8:	ldr	r3, [r4, #72]	; 0x48
    96ea:	orr.w	r3, r3, #2147483648	; 0x80000000
    96ee:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    96f0:	ldr	r3, [r4, #44]	; 0x2c
    96f2:	orr.w	r3, r3, #16777216	; 0x1000000
    96f6:	orr.w	r3, r3, #32768	; 0x8000
    96fa:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    96fc:	ldr	r3, [r4, #44]	; 0x2c
    96fe:	lsls	r2, r3, #7
    9700:	bmi.n	96fc <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    9702:	mov.w	r0, #400	; 0x190
    9706:	bl	94dc <setSdclk(unsigned long)>
  if (enable) {
    970a:	bl	9654 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    970e:	ldr	r3, [pc, #56]	; (9748 <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    9710:	ldr	r2, [pc, #56]	; (974c <initSDHC()+0xc8>)
    9712:	str	r3, [r4, #52]	; 0x34
    9714:	ldr	r3, [pc, #56]	; (9750 <initSDHC()+0xcc>)
    9716:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    971a:	ldr	r3, [pc, #56]	; (9754 <initSDHC()+0xd0>)
    971c:	movs	r2, #96	; 0x60
    971e:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    9722:	mov.w	r3, #3758153728	; 0xe000e000
    9726:	mov.w	r2, #16384	; 0x4000
    972a:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    972e:	ldr	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9730:	ldr	r2, [pc, #16]	; (9744 <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    9732:	orr.w	r3, r3, #134217728	; 0x8000000
    9736:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9738:	ldr	r3, [r2, #44]	; 0x2c
    973a:	lsls	r3, r3, #4
    973c:	bmi.n	9738 <initSDHC()+0xb4>
}
    973e:	pop	{r4, pc}
    9740:	.word	0x400d8000
    9744:	.word	0x402c0000
    9748:	.word	0x117f000b
    974c:	.word	0x00009409
    9750:	.word	0x20009800
    9754:	.word	0xe000e400

00009758 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    9758:	ldr	r3, [pc, #16]	; (976c <SdioCard::type() const+0x14>)
    975a:	ldrb	r3, [r3, #0]
    975c:	cbz	r3, 9768 <SdioCard::type() const+0x10>
    975e:	ldr	r3, [pc, #16]	; (9770 <SdioCard::type() const+0x18>)
    9760:	ldrb	r0, [r3, #0]
    9762:	adds	r0, #2
    9764:	uxtb	r0, r0
    9766:	bx	lr
    9768:	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    976a:	bx	lr
    976c:	.word	0x20010a4f
    9770:	.word	0x20010a50

00009774 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    9774:	push	{r3, r4, r5, lr}
    9776:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    9778:	ldr	r0, [pc, #80]	; (97cc <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    977a:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    977c:	bl	95e4 <waitTimeout(bool (*)())>
    9780:	cbnz	r0, 97c2 <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    9782:	ldr	r3, [pc, #76]	; (97d0 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    9784:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    9786:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    9788:	bpl.n	979a <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    978a:	ldr	r2, [r3, #72]	; 0x48
    978c:	bic.w	r2, r2, #255	; 0xff
    9790:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    9792:	uxtb	r2, r4
    9794:	ldr	r1, [r3, #72]	; 0x48
    9796:	orrs	r2, r1
    9798:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    979a:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    979e:	ldr	r5, [pc, #48]	; (97d0 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    97a0:	ldr	r0, [pc, #48]	; (97d4 <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    97a2:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    97a4:	bl	95e4 <waitTimeout(bool (*)())>
    97a8:	cbnz	r0, 97c2 <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    97aa:	ldr	r2, [r5, #48]	; 0x30
    97ac:	ldr	r3, [pc, #40]	; (97d8 <cardCommand(unsigned long, unsigned long)+0x64>)
    97ae:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    97b0:	ldr	r2, [r3, #0]
    97b2:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    97b4:	ldr	r2, [r3, #0]
    97b6:	lsls	r2, r2, #31
    97b8:	bpl.n	97c2 <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    97ba:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    97bc:	tst.w	r3, #983040	; 0xf0000
    97c0:	beq.n	97c6 <cardCommand(unsigned long, unsigned long)+0x52>
    97c2:	movs	r0, #0
}
    97c4:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    97c6:	movs	r0, #1
    97c8:	b.n	97c4 <cardCommand(unsigned long, unsigned long)+0x50>
    97ca:	nop
    97cc:	.word	0x0000946d
    97d0:	.word	0x402c0000
    97d4:	.word	0x00009455
    97d8:	.word	0x2000fbf8

000097dc <statusCMD13()>:
static uint32_t statusCMD13() {
    97dc:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    97de:	ldr	r3, [pc, #16]	; (97f0 <statusCMD13()+0x14>)
    97e0:	ldr	r0, [pc, #16]	; (97f4 <statusCMD13()+0x18>)
    97e2:	ldr	r1, [r3, #0]
    97e4:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    97e8:	cbz	r0, 97ee <statusCMD13()+0x12>
    97ea:	ldr	r3, [pc, #12]	; (97f8 <statusCMD13()+0x1c>)
    97ec:	ldr	r0, [r3, #16]
}
    97ee:	pop	{r3, pc}
    97f0:	.word	0x2000f5f0
    97f4:	.word	0x0d1a0000
    97f8:	.word	0x402c0000

000097fc <isBusyCMD13()>:
static bool isBusyCMD13() {
    97fc:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    97fe:	bl	97dc <statusCMD13()>
    9802:	eor.w	r0, r0, #256	; 0x100
}
    9806:	ubfx	r0, r0, #8, #1
    980a:	pop	{r3, pc}

0000980c <SdioCard::status()>:
  return statusCMD13();
    980c:	b.w	97dc <statusCMD13()>

00009810 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    9810:	ldr	r3, [pc, #76]	; (9860 <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    9812:	push	{r4, r5, lr}
    9814:	mov	r4, r1
    9816:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    9818:	ldr	r1, [r3, #0]
    981a:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    981e:	cbz	r0, 985c <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    9820:	ldr	r3, [pc, #64]	; (9864 <readReg16(unsigned long, void*)+0x54>)
    9822:	add.w	r5, r4, #15
    9826:	ldr	r2, [r3, #16]
    9828:	str	r2, [sp, #0]
    982a:	ldr	r2, [r3, #20]
    982c:	str	r2, [sp, #4]
    982e:	ldr	r2, [r3, #24]
    9830:	str	r2, [sp, #8]
    9832:	ldr	r3, [r3, #28]
    9834:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    9836:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9838:	bic.w	r2, r3, #3
    983c:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    9840:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9842:	adds	r2, #16
    9844:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    9846:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9848:	add	r2, sp
    984a:	ldr.w	r2, [r2, #-16]
    984e:	lsr.w	r2, r2, r1
    9852:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    9856:	bne.n	9838 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    9858:	movs	r3, #0
    985a:	strb	r3, [r4, #15]
}
    985c:	add	sp, #20
    985e:	pop	{r4, r5, pc}
    9860:	.word	0x2000f5f0
    9864:	.word	0x402c0000

00009868 <waitDmaStatus()>:
static bool waitDmaStatus() {
    9868:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    986a:	ldr	r0, [pc, #32]	; (988c <waitDmaStatus()+0x24>)
    986c:	bl	9608 <yieldTimeout(bool (*)())>
    9870:	cbnz	r0, 9888 <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9872:	ldr	r3, [pc, #28]	; (9890 <waitDmaStatus()+0x28>)
    9874:	ldr	r2, [r3, #0]
    9876:	lsls	r2, r2, #30
    9878:	bpl.n	9886 <waitDmaStatus()+0x1e>
    987a:	ldr	r2, [r3, #0]
    987c:	ldr	r3, [pc, #20]	; (9894 <waitDmaStatus()+0x2c>)
    987e:	tst	r2, r3
    9880:	ite	eq
    9882:	moveq	r0, #1
    9884:	movne	r0, #0
}
    9886:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9888:	movs	r0, #0
    988a:	b.n	9886 <waitDmaStatus()+0x1e>
    988c:	.word	0x00009491
    9890:	.word	0x2000fbf8
    9894:	.word	0x117f0000

00009898 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    9898:	push	{r3, r4, r5, r6, r7, lr}
    989a:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    989c:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    989e:	mov	r7, r0
    98a0:	mov	r4, r1
    98a2:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    98a4:	bne.n	98a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    98a6:	cbnz	r5, 98ba <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    98a8:	ldr	r3, [pc, #96]	; (990c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    98aa:	movs	r2, #37	; 0x25
    98ac:	strb	r2, [r3, #0]
  m_errorLine = line;
    98ae:	movw	r2, #501	; 0x1f5
    98b2:	ldr	r3, [pc, #92]	; (9910 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    98b4:	str	r2, [r3, #0]
}
    98b6:	movs	r0, #0
    98b8:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    98ba:	ldr	r0, [pc, #88]	; (9914 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    98bc:	bl	9608 <yieldTimeout(bool (*)())>
    98c0:	cbz	r0, 98d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    98c2:	ldr	r3, [pc, #72]	; (990c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    98c4:	movs	r2, #10
    98c6:	strb	r2, [r3, #0]
  m_errorLine = line;
    98c8:	mov.w	r2, #504	; 0x1f8
    98cc:	ldr	r3, [pc, #64]	; (9910 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    98ce:	b.n	98b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    98d0:	ldr	r3, [pc, #68]	; (9918 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    98d2:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    98d4:	ldr	r1, [pc, #68]	; (991c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    98d6:	strb	r2, [r3, #0]
  m_irqstat = 0;
    98d8:	ldr	r3, [pc, #68]	; (9920 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    98da:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    98dc:	ldr	r3, [pc, #68]	; (9924 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    98de:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    98e0:	and.w	r3, r3, r5, lsl #16
    98e4:	orr.w	r3, r3, #512	; 0x200
    98e8:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    98ea:	ldr	r3, [pc, #60]	; (9928 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    98ec:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    98ee:	ldr	r3, [pc, #60]	; (992c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    98f0:	ldrb	r3, [r3, #0]
    98f2:	cbnz	r3, 98f6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    98f4:	lsls	r4, r4, #9
    98f6:	mov	r1, r4
    98f8:	mov	r0, r7
    98fa:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    98fe:	cmp	r0, #0
    9900:	beq.n	98b6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    9902:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    9906:	b.w	9868 <waitDmaStatus()>
    990a:	nop
    990c:	.word	0x20009410
    9910:	.word	0x2000dbd8
    9914:	.word	0x000097fd
    9918:	.word	0x20010b12
    991c:	.word	0x402c0000
    9920:	.word	0x2000fbf8
    9924:	.word	0x1fff0000
    9928:	.word	0x117f0002
    992c:	.word	0x20010a50

00009930 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9930:	push	{r3, r4, r5, r6, r7, lr}
    9932:	mov	r7, r0
  bool useDma() {return m_options & DMA_SDIO;}
    9934:	ldrb	r0, [r0, #8]
    9936:	mov	r4, r1
    9938:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    993a:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    993c:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    993e:	bmi.n	995e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    9940:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    9942:	cmp	r4, r6
    9944:	beq.n	9968 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    9946:	ldr	r3, [r7, #0]
    9948:	mov	r2, r5
    994a:	mov	r1, r4
    994c:	mov	r0, r7
    994e:	ldr	r3, [r3, #16]
    9950:	adds	r4, #1
    9952:	add.w	r5, r5, #512	; 0x200
    9956:	blx	r3
    9958:	cmp	r0, #0
    995a:	bne.n	9942 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    995c:	b.n	997a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    995e:	lsls	r0, r2, #30
    9960:	beq.n	9986 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    9962:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9964:	cmp	r4, r6
    9966:	bne.n	996c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    9968:	movs	r0, #1
    996a:	b.n	997c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    996c:	ldr	r3, [r7, #0]
    996e:	mov	r2, r5
    9970:	mov	r1, r4
    9972:	mov	r0, r7
    9974:	ldr	r3, [r3, #16]
    9976:	blx	r3
    9978:	cbnz	r0, 997e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    997a:	movs	r0, #0
}
    997c:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    997e:	adds	r4, #1
    9980:	add.w	r5, r5, #512	; 0x200
    9984:	b.n	9964 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    9986:	ldr	r0, [pc, #24]	; (99a0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    9988:	bl	9898 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    998c:	cmp	r0, #0
    998e:	bne.n	9968 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    9990:	ldr	r3, [pc, #16]	; (99a4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    9992:	movs	r2, #12
    9994:	strb	r2, [r3, #0]
  m_errorLine = line;
    9996:	movw	r2, #929	; 0x3a1
    999a:	ldr	r3, [pc, #12]	; (99a8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    999c:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    999e:	b.n	997c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    99a0:	.word	0x123a0037
    99a4:	.word	0x20009410
    99a8:	.word	0x2000dbd8

000099ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    99ac:	push	{r3, r4, r5, r6, r7, lr}
    99ae:	mov	r7, r0
    99b0:	ldrb	r0, [r0, #8]
    99b2:	mov	r4, r1
    99b4:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    99b6:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    99b8:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    99ba:	bmi.n	99da <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    99bc:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    99be:	cmp	r4, r6
    99c0:	beq.n	99e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    99c2:	ldr	r3, [r7, #0]
    99c4:	mov	r2, r5
    99c6:	mov	r1, r4
    99c8:	mov	r0, r7
    99ca:	ldr	r3, [r3, #36]	; 0x24
    99cc:	adds	r4, #1
    99ce:	add.w	r5, r5, #512	; 0x200
    99d2:	blx	r3
    99d4:	cmp	r0, #0
    99d6:	bne.n	99be <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    99d8:	b.n	99f6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    99da:	lsls	r0, r2, #30
    99dc:	beq.n	9a02 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    99de:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    99e0:	cmp	r4, r6
    99e2:	bne.n	99e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    99e4:	movs	r0, #1
    99e6:	b.n	99f8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    99e8:	ldr	r3, [r7, #0]
    99ea:	mov	r2, r5
    99ec:	mov	r1, r4
    99ee:	mov	r0, r7
    99f0:	ldr	r3, [r3, #36]	; 0x24
    99f2:	blx	r3
    99f4:	cbnz	r0, 99fa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    99f6:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    99f8:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    99fa:	adds	r4, #1
    99fc:	add.w	r5, r5, #512	; 0x200
    9a00:	b.n	99e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    9a02:	ldr	r0, [pc, #24]	; (9a1c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    9a04:	bl	9898 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9a08:	cmp	r0, #0
    9a0a:	bne.n	99e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    9a0c:	ldr	r3, [pc, #16]	; (9a20 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    9a0e:	movs	r2, #14
    9a10:	strb	r2, [r3, #0]
  m_errorLine = line;
    9a12:	movw	r2, #1085	; 0x43d
    9a16:	ldr	r3, [pc, #12]	; (9a24 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    9a18:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    9a1a:	b.n	99f8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    9a1c:	.word	0x193a0027
    9a20:	.word	0x20009410
    9a24:	.word	0x2000dbd8

00009a28 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    9a28:	ldr	r2, [pc, #88]	; (9a84 <SdioCard::sectorCount()+0x5c>)
    9a2a:	ldrb	r3, [r2, #0]
    9a2c:	ands.w	r3, r3, #192	; 0xc0
    9a30:	bne.n	9a64 <SdioCard::sectorCount()+0x3c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9a32:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9a34:	ldrb	r0, [r2, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9a36:	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    9a3a:	ldrb	r1, [r2, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9a3c:	lsls	r0, r0, #2
    9a3e:	orr.w	r0, r0, r3, lsl #10
    9a42:	ldrb	r3, [r2, #8]
    9a44:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9a48:	ldrb	r3, [r2, #9]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9a4a:	ldrb	r2, [r2, #5]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9a4c:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9a50:	adds	r0, #1
    9a52:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    9a56:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9a58:	orr.w	r3, r3, r1, lsr #7
    9a5c:	add	r3, r2
    9a5e:	subs	r3, #7
    9a60:	lsls	r0, r3
    9a62:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    9a64:	cmp	r3, #64	; 0x40
    9a66:	bne.n	9a80 <SdioCard::sectorCount()+0x58>
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9a68:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9a6a:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9a6c:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9a6e:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9a72:	add.w	r0, r0, r3, lsl #16
    9a76:	ldrb	r3, [r2, #8]
    9a78:	add.w	r0, r0, r3, lsl #8
    9a7c:	lsls	r0, r0, #10
    9a7e:	bx	lr
  } else {
    return 0;
    9a80:	movs	r0, #0
}
    9a82:	bx	lr
    9a84:	.word	0x20010a62

00009a88 <SdioCard::isBusy()>:
    9a88:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    9a8a:	lsls	r3, r3, #31
    9a8c:	bpl.n	9aa0 <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    9a8e:	ldr	r3, [pc, #40]	; (9ab8 <SdioCard::isBusy()+0x30>)
    9a90:	ldr	r3, [r3, #0]
    9a92:	cbz	r3, 9a96 <SdioCard::isBusy()+0xe>
    9a94:	bx	r3
    9a96:	ldr	r3, [pc, #36]	; (9abc <SdioCard::isBusy()+0x34>)
    9a98:	ldrb	r0, [r3, #0]
    9a9a:	cbz	r0, 9ab6 <SdioCard::isBusy()+0x2e>
    9a9c:	b.w	97fc <isBusyCMD13()>
    if (m_transferActive) {
    9aa0:	ldr	r3, [pc, #28]	; (9ac0 <SdioCard::isBusy()+0x38>)
    9aa2:	ldrb	r3, [r3, #0]
    9aa4:	cbz	r3, 9aaa <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    9aa6:	b.w	94c4 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9aaa:	ldr	r3, [pc, #24]	; (9ac4 <SdioCard::isBusy()+0x3c>)
    9aac:	ldr	r0, [r3, #36]	; 0x24
    9aae:	eor.w	r0, r0, #16777216	; 0x1000000
    9ab2:	ubfx	r0, r0, #24, #1
}
    9ab6:	bx	lr
    9ab8:	.word	0x2000fbf4
    9abc:	.word	0x20010a4e
    9ac0:	.word	0x20010a51
    9ac4:	.word	0x402c0000

00009ac8 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9ac8:	push	{r3, r4, r5, lr}
    9aca:	mov	r5, r2
  if (!m_csd.v1.erase_blk_en) {
    9acc:	ldr	r2, [pc, #160]	; (9b70 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    9ace:	ldrb	r3, [r2, #10]
    9ad0:	ands.w	r4, r3, #64	; 0x40
    9ad4:	bne.n	9afc <SdioCard::erase(unsigned long, unsigned long)+0x34>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    9ad6:	and.w	r3, r3, #63	; 0x3f
    9ada:	ldrb	r2, [r2, #11]
    9adc:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9ade:	orr.w	r3, r3, r2, lsr #7
    9ae2:	adds	r2, r5, #1
    9ae4:	orrs	r2, r1
    9ae6:	tst	r3, r2
    9ae8:	beq.n	9afc <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    9aea:	ldr	r3, [pc, #136]	; (9b74 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9aec:	movs	r2, #39	; 0x27
    9aee:	strb	r2, [r3, #0]
  m_errorLine = line;
    9af0:	movw	r2, #770	; 0x302
    9af4:	ldr	r3, [pc, #128]	; (9b78 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9af6:	str	r2, [r3, #0]
}
    9af8:	mov	r0, r4
    9afa:	pop	{r3, r4, r5, pc}
  if (!m_highCapacity) {
    9afc:	ldr	r3, [pc, #124]	; (9b7c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    9afe:	ldrb	r3, [r3, #0]
    9b00:	cbnz	r3, 9b06 <SdioCard::erase(unsigned long, unsigned long)+0x3e>
    firstSector <<= 9;
    9b02:	lsls	r1, r1, #9
    lastSector <<= 9;
    9b04:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    9b06:	ldr	r0, [pc, #120]	; (9b80 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    9b08:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9b0c:	mov	r4, r0
    9b0e:	cbnz	r0, 9b1e <SdioCard::erase(unsigned long, unsigned long)+0x56>
  m_errorCode = code;
    9b10:	ldr	r3, [pc, #96]	; (9b74 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9b12:	movs	r2, #15
    9b14:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b16:	movw	r2, #778	; 0x30a
    9b1a:	ldr	r3, [pc, #92]	; (9b78 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9b1c:	b.n	9af6 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9b1e:	mov	r1, r5
    9b20:	ldr	r0, [pc, #96]	; (9b84 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    9b22:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9b26:	mov	r4, r0
    9b28:	cbnz	r0, 9b38 <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    9b2a:	ldr	r3, [pc, #72]	; (9b74 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9b2c:	movs	r2, #16
    9b2e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b30:	movw	r2, #781	; 0x30d
    9b34:	ldr	r3, [pc, #64]	; (9b78 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9b36:	b.n	9af6 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    9b38:	movs	r1, #0
    9b3a:	ldr	r0, [pc, #76]	; (9b88 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    9b3c:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9b40:	mov	r4, r0
    9b42:	cbnz	r0, 9b52 <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    9b44:	ldr	r3, [pc, #44]	; (9b74 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9b46:	movs	r2, #17
    9b48:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b4a:	mov.w	r2, #784	; 0x310
    9b4e:	ldr	r3, [pc, #40]	; (9b78 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9b50:	b.n	9af6 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (waitTimeout(isBusyCMD13)) {
    9b52:	ldr	r0, [pc, #56]	; (9b8c <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    9b54:	bl	95e4 <waitTimeout(bool (*)())>
    9b58:	cmp	r0, #0
    9b5a:	beq.n	9af8 <SdioCard::erase(unsigned long, unsigned long)+0x30>
  m_errorCode = code;
    9b5c:	ldr	r3, [pc, #20]	; (9b74 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9b5e:	movs	r2, #40	; 0x28
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9b60:	movs	r4, #0
  m_errorCode = code;
    9b62:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b64:	movw	r2, #787	; 0x313
    9b68:	ldr	r3, [pc, #12]	; (9b78 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9b6a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9b6c:	b.n	9af8 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    9b6e:	nop
    9b70:	.word	0x20010a62
    9b74:	.word	0x20009410
    9b78:	.word	0x2000dbd8
    9b7c:	.word	0x20010a50
    9b80:	.word	0x201a0000
    9b84:	.word	0x211a0000
    9b88:	.word	0x261b0000
    9b8c:	.word	0x000097fd

00009b90 <waitTransferComplete()>:
static bool waitTransferComplete() {
    9b90:	push	{r4, lr}
  if (!m_transferActive) {
    9b92:	ldr	r4, [pc, #60]	; (9bd0 <waitTransferComplete()+0x40>)
    9b94:	ldrb	r3, [r4, #0]
    9b96:	cbnz	r3, 9b9c <waitTransferComplete()+0xc>
    return true;
    9b98:	movs	r0, #1
}
    9b9a:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    9b9c:	ldr	r0, [pc, #52]	; (9bd4 <waitTransferComplete()+0x44>)
    9b9e:	bl	95e4 <waitTimeout(bool (*)())>
  m_transferActive = false;
    9ba2:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    9ba4:	ldr	r2, [pc, #48]	; (9bd8 <waitTransferComplete()+0x48>)
  m_transferActive = false;
    9ba6:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    9ba8:	ldr	r1, [r2, #48]	; 0x30
    9baa:	ldr	r3, [pc, #48]	; (9bdc <waitTransferComplete()+0x4c>)
    9bac:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9bae:	ldr	r1, [r3, #0]
    9bb0:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    9bb2:	cbnz	r0, 9bbc <waitTransferComplete()+0x2c>
    9bb4:	ldr	r2, [r3, #0]
    9bb6:	ldr	r3, [pc, #40]	; (9be0 <waitTransferComplete()+0x50>)
    9bb8:	tst	r2, r3
    9bba:	beq.n	9b98 <waitTransferComplete()+0x8>
  m_errorCode = code;
    9bbc:	ldr	r3, [pc, #36]	; (9be4 <waitTransferComplete()+0x54>)
    9bbe:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    9bc0:	movs	r0, #0
  m_errorCode = code;
    9bc2:	strb	r2, [r3, #0]
  m_errorLine = line;
    9bc4:	movw	r2, #634	; 0x27a
    9bc8:	ldr	r3, [pc, #28]	; (9be8 <waitTransferComplete()+0x58>)
    9bca:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    9bcc:	b.n	9b9a <waitTransferComplete()+0xa>
    9bce:	nop
    9bd0:	.word	0x20010a51
    9bd4:	.word	0x000094c5
    9bd8:	.word	0x402c0000
    9bdc:	.word	0x2000fbf8
    9be0:	.word	0x117f0000
    9be4:	.word	0x20009410
    9be8:	.word	0x2000dbd8

00009bec <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9bec:	push	{r4, r5, r6, r7, lr}
    9bee:	ldrb	r5, [r0, #8]
    9bf0:	sub.w	sp, sp, #516	; 0x204
    9bf4:	mov	r4, r0
    9bf6:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9bf8:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9bfc:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9bfe:	beq.n	9c38 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    9c00:	lsls	r3, r2, #30
    9c02:	beq.n	9c12 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    9c04:	mov	r1, r6
      ptr = aligned;
    9c06:	mov	r6, sp
      memcpy(aligned, src, 512);
    9c08:	mov.w	r2, #512	; 0x200
    9c0c:	mov	r0, sp
    9c0e:	bl	a56c <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9c12:	movs	r3, #1
    9c14:	mov	r2, r6
    9c16:	mov	r1, r7
    9c18:	ldr	r0, [pc, #104]	; (9c84 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    9c1a:	bl	9898 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9c1e:	mov	r5, r0
    9c20:	cbnz	r0, 9c30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    9c22:	ldr	r3, [pc, #100]	; (9c88 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    9c24:	movs	r2, #13
    9c26:	strb	r2, [r3, #0]
  m_errorLine = line;
    9c28:	movw	r2, #1041	; 0x411
    9c2c:	ldr	r3, [pc, #92]	; (9c8c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    9c2e:	str	r2, [r3, #0]
}
    9c30:	mov	r0, r5
    9c32:	add.w	sp, sp, #516	; 0x204
    9c36:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    9c38:	bl	9b90 <waitTransferComplete()>
    9c3c:	cmp	r0, #0
    9c3e:	beq.n	9c30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9c40:	ldrb	r3, [r4, #9]
    9c42:	cmp	r3, #2
    9c44:	bne.n	9c4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    9c46:	ldr	r3, [r4, #4]
    9c48:	cmp	r3, r7
    9c4a:	beq.n	9c6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    9c4c:	ldr	r3, [r4, #0]
    9c4e:	mov	r0, r4
    9c50:	ldr	r3, [r3, #32]
    9c52:	blx	r3
    9c54:	cmp	r0, #0
    9c56:	beq.n	9c30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    9c58:	ldr	r3, [r4, #0]
    9c5a:	mov	r1, r7
    9c5c:	mov	r0, r4
    9c5e:	ldr	r3, [r3, #96]	; 0x60
    9c60:	blx	r3
    9c62:	cmp	r0, #0
    9c64:	beq.n	9c30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    9c66:	movs	r3, #2
      m_curSector = sector;
    9c68:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    9c6a:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    9c6c:	ldr	r3, [r4, #0]
    9c6e:	mov	r1, r6
    9c70:	mov	r0, r4
    9c72:	ldr	r3, [r3, #92]	; 0x5c
    9c74:	blx	r3
    9c76:	cmp	r0, #0
    9c78:	beq.n	9c30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    9c7a:	ldr	r3, [r4, #4]
  return true;
    9c7c:	mov	r5, r0
    m_curSector++;
    9c7e:	adds	r3, #1
    9c80:	str	r3, [r4, #4]
    9c82:	b.n	9c30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    9c84:	.word	0x183a0001
    9c88:	.word	0x20009410
    9c8c:	.word	0x2000dbd8

00009c90 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    9c90:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9c92:	ldr	r4, [pc, #92]	; (9cf0 <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9c94:	movs	r1, #0
    9c96:	ldr	r0, [pc, #92]	; (9cf4 <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9c98:	ldr	r3, [r4, #40]	; 0x28
    9c9a:	bic.w	r3, r3, #65536	; 0x10000
    9c9e:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9ca0:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9ca4:	mov	r5, r0
    9ca6:	cbnz	r0, 9cba <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    9ca8:	ldr	r3, [pc, #76]	; (9cf8 <SdioCard::readStop()+0x68>)
    9caa:	movs	r2, #9
    9cac:	strb	r2, [r3, #0]
  m_errorLine = line;
    9cae:	movw	r2, #573	; 0x23d
    9cb2:	ldr	r3, [pc, #72]	; (9cfc <SdioCard::readStop()+0x6c>)
    9cb4:	str	r2, [r3, #0]
}
    9cb6:	mov	r0, r5
    9cb8:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    9cba:	ldr	r0, [pc, #68]	; (9d00 <SdioCard::readStop()+0x70>)
    9cbc:	bl	9608 <yieldTimeout(bool (*)())>
    9cc0:	cbz	r0, 9cd4 <SdioCard::readStop()+0x44>
  m_errorCode = code;
    9cc2:	ldr	r3, [pc, #52]	; (9cf8 <SdioCard::readStop()+0x68>)
    9cc4:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9cc6:	movs	r5, #0
  m_errorCode = code;
    9cc8:	strb	r2, [r3, #0]
  m_errorLine = line;
    9cca:	mov.w	r2, #576	; 0x240
    9cce:	ldr	r3, [pc, #44]	; (9cfc <SdioCard::readStop()+0x6c>)
    9cd0:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    9cd2:	b.n	9cb6 <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9cd4:	ldr	r3, [r4, #36]	; 0x24
    9cd6:	lsls	r3, r3, #30
    9cd8:	bpl.n	9cb6 <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    9cda:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9cdc:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9cde:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9ce0:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9ce4:	orr.w	r2, r2, #67108864	; 0x4000000
    9ce8:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    9cea:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    9cec:	str	r3, [r4, #40]	; 0x28
    9cee:	b.n	9cb6 <SdioCard::readStop()+0x26>
    9cf0:	.word	0x402c0000
    9cf4:	.word	0x0cdb0000
    9cf8:	.word	0x20009410
    9cfc:	.word	0x2000dbd8
    9d00:	.word	0x0000947d

00009d04 <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    9d04:	push	{r4, r5, r6, lr}
    9d06:	mov	r4, r1
  if (!waitTransferComplete()) {
    9d08:	bl	9b90 <waitTransferComplete()>
    9d0c:	mov	r5, r0
    9d0e:	cbz	r0, 9d48 <SdioCard::writeData(unsigned char const*)+0x44>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    9d10:	ldr	r3, [pc, #100]	; (9d78 <SdioCard::writeData(unsigned char const*)+0x74>)
    9d12:	ldr	r2, [r3, #36]	; 0x24
    9d14:	lsls	r2, r2, #23
    9d16:	bmi.n	9d28 <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9d18:	ldr	r2, [r3, #40]	; 0x28
    9d1a:	bic.w	r2, r2, #65536	; 0x10000
    9d1e:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9d20:	ldr	r2, [r3, #40]	; 0x28
    9d22:	orr.w	r2, r2, #131072	; 0x20000
    9d26:	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9d28:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    9d2a:	ldr	r0, [pc, #80]	; (9d7c <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9d2c:	orr.w	r2, r2, #65536	; 0x10000
    9d30:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    9d32:	bl	95e4 <waitTimeout(bool (*)())>
    9d36:	cbz	r0, 9d4c <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    9d38:	ldr	r3, [pc, #68]	; (9d80 <SdioCard::writeData(unsigned char const*)+0x7c>)
    9d3a:	movs	r2, #33	; 0x21
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    9d3c:	movs	r5, #0
  m_errorCode = code;
    9d3e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9d40:	mov.w	r2, #1016	; 0x3f8
    9d44:	ldr	r3, [pc, #60]	; (9d84 <SdioCard::writeData(unsigned char const*)+0x80>)
    9d46:	str	r2, [r3, #0]
}
    9d48:	mov	r0, r5
    9d4a:	pop	{r4, r5, r6, pc}
    9d4c:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    9d50:	ldr	r2, [pc, #36]	; (9d78 <SdioCard::writeData(unsigned char const*)+0x74>)
    9d52:	ldr	r3, [r2, #36]	; 0x24
    9d54:	lsls	r3, r3, #21
    9d56:	bpl.n	9d52 <SdioCard::writeData(unsigned char const*)+0x4e>
    9d58:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9d5a:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    9d5e:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9d62:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    9d64:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9d66:	bne.n	9d5e <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    9d68:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9d6a:	cmp	r4, r1
    9d6c:	bne.n	9d52 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    9d6e:	ldr	r3, [pc, #24]	; (9d88 <SdioCard::writeData(unsigned char const*)+0x84>)
    9d70:	movs	r2, #1
    9d72:	strb	r2, [r3, #0]
  return true;
    9d74:	b.n	9d48 <SdioCard::writeData(unsigned char const*)+0x44>
    9d76:	nop
    9d78:	.word	0x402c0000
    9d7c:	.word	0x000094b1
    9d80:	.word	0x20009410
    9d84:	.word	0x2000dbd8
    9d88:	.word	0x20010a51

00009d8c <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9d8c:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9d8e:	ldr	r0, [pc, #80]	; (9de0 <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    9d90:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9d92:	bl	9608 <yieldTimeout(bool (*)())>
    9d96:	cbz	r0, 9daa <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    9d98:	ldr	r3, [pc, #72]	; (9de4 <SdioCard::writeStart(unsigned long)+0x58>)
    9d9a:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9d9c:	movs	r0, #0
  m_errorCode = code;
    9d9e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9da0:	movw	r2, #1099	; 0x44b
    9da4:	ldr	r3, [pc, #64]	; (9de8 <SdioCard::writeStart(unsigned long)+0x5c>)
    9da6:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    9da8:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9daa:	ldr	r3, [pc, #64]	; (9dec <SdioCard::writeStart(unsigned long)+0x60>)
    9dac:	ldr	r2, [r3, #40]	; 0x28
    9dae:	bic.w	r2, r2, #65536	; 0x10000
    9db2:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9db4:	mov.w	r2, #512	; 0x200
    9db8:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9dba:	ldr	r3, [pc, #52]	; (9df0 <SdioCard::writeStart(unsigned long)+0x64>)
    9dbc:	ldrb	r3, [r3, #0]
    9dbe:	cbnz	r3, 9dc2 <SdioCard::writeStart(unsigned long)+0x36>
    9dc0:	lsls	r4, r4, #9
    9dc2:	mov	r1, r4
    9dc4:	ldr	r0, [pc, #44]	; (9df4 <SdioCard::writeStart(unsigned long)+0x68>)
    9dc6:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9dca:	cmp	r0, #0
    9dcc:	bne.n	9da8 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    9dce:	ldr	r3, [pc, #20]	; (9de4 <SdioCard::writeStart(unsigned long)+0x58>)
    9dd0:	movs	r2, #14
    9dd2:	strb	r2, [r3, #0]
  m_errorLine = line;
    9dd4:	movw	r2, #1111	; 0x457
    9dd8:	ldr	r3, [pc, #12]	; (9de8 <SdioCard::writeStart(unsigned long)+0x5c>)
    9dda:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    9ddc:	b.n	9da8 <SdioCard::writeStart(unsigned long)+0x1c>
    9dde:	nop
    9de0:	.word	0x000097fd
    9de4:	.word	0x20009410
    9de8:	.word	0x2000dbd8
    9dec:	.word	0x402c0000
    9df0:	.word	0x20010a50
    9df4:	.word	0x193a0020

00009df8 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9df8:	push	{r3, r4, r5, lr}
    9dfa:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    9dfc:	ldr	r0, [pc, #96]	; (9e60 <cardCMD6(unsigned long, unsigned char*)+0x68>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9dfe:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    9e00:	bl	95e4 <waitTimeout(bool (*)())>
    9e04:	cbz	r0, 9e18 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    9e06:	ldr	r3, [pc, #92]	; (9e64 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9e08:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9e0a:	movs	r0, #0
  m_errorCode = code;
    9e0c:	strb	r2, [r3, #0]
  m_errorLine = line;
    9e0e:	mov.w	r2, #408	; 0x198
    9e12:	ldr	r3, [pc, #84]	; (9e68 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9e14:	str	r2, [r3, #0]
}
    9e16:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    9e18:	ldr	r3, [pc, #80]	; (9e6c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    9e1a:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9e1c:	mov	r1, r4
  m_dmaBusy = true;
    9e1e:	strb	r2, [r3, #0]
  m_irqstat = 0;
    9e20:	ldr	r3, [pc, #76]	; (9e70 <cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9e22:	ldr	r2, [pc, #80]	; (9e74 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    9e24:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    9e26:	ldr	r3, [pc, #80]	; (9e78 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9e28:	ldr	r0, [pc, #80]	; (9e7c <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR  = (uint32_t)status;
    9e2a:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9e2c:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9e2e:	ldr	r2, [pc, #80]	; (9e80 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    9e30:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9e32:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9e36:	cbnz	r0, 9e48 <cardCMD6(unsigned long, unsigned char*)+0x50>
  m_errorCode = code;
    9e38:	ldr	r3, [pc, #40]	; (9e64 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9e3a:	movs	r2, #4
    9e3c:	strb	r2, [r3, #0]
  m_errorLine = line;
    9e3e:	movw	r2, #415	; 0x19f
    9e42:	ldr	r3, [pc, #36]	; (9e68 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9e44:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    9e46:	b.n	9e16 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    9e48:	bl	9868 <waitDmaStatus()>
    9e4c:	cmp	r0, #0
    9e4e:	bne.n	9e16 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    9e50:	ldr	r3, [pc, #16]	; (9e64 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9e52:	movs	r2, #37	; 0x25
    9e54:	strb	r2, [r3, #0]
  m_errorLine = line;
    9e56:	mov.w	r2, #418	; 0x1a2
    9e5a:	ldr	r3, [pc, #12]	; (9e68 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9e5c:	b.n	9e44 <cardCMD6(unsigned long, unsigned char*)+0x4c>
    9e5e:	nop
    9e60:	.word	0x000097fd
    9e64:	.word	0x20009410
    9e68:	.word	0x2000dbd8
    9e6c:	.word	0x20010b12
    9e70:	.word	0x2000fbf8
    9e74:	.word	0x00010040
    9e78:	.word	0x402c0000
    9e7c:	.word	0x063a0011
    9e80:	.word	0x117f0002

00009e84 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    9e84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    9e88:	movs	r4, #0
  m_initDone = false;
    9e8a:	ldr	r7, [pc, #524]	; (a098 <SdioCard::begin(SdioConfig)+0x214>)
  m_errorCode = SD_CARD_ERROR_NONE;
    9e8c:	ldr	r5, [pc, #524]	; (a09c <SdioCard::begin(SdioConfig)+0x218>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    9e8e:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    9e90:	ldr.w	r8, [pc, #584]	; a0dc <SdioCard::begin(SdioConfig)+0x258>
  m_version2 = false;
    9e94:	ldr	r6, [pc, #520]	; (a0a0 <SdioCard::begin(SdioConfig)+0x21c>)
  m_sdioConfig = sdioConfig;
    9e96:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    9e98:	strb	r4, [r0, #9]
  m_initDone = false;
    9e9a:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    9e9c:	strb	r4, [r5, #0]
  m_highCapacity = false;
    9e9e:	strb.w	r4, [r8]
  m_version2 = false;
    9ea2:	strb	r4, [r6, #0]
  initSDHC();
    9ea4:	bl	9684 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    9ea8:	mov	r1, r4
    9eaa:	mov	r0, r4
    9eac:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9eb0:	mov	r4, r0
    9eb2:	cbnz	r0, 9ec8 <SdioCard::begin(SdioConfig)+0x44>
  m_errorCode = code;
    9eb4:	movs	r3, #1
  m_errorLine = line;
    9eb6:	movw	r2, #654	; 0x28e
  m_errorCode = code;
    9eba:	strb	r3, [r5, #0]
  m_errorLine = line;
    9ebc:	ldr	r3, [pc, #484]	; (a0a4 <SdioCard::begin(SdioConfig)+0x220>)
    9ebe:	str	r2, [r3, #0]
}
    9ec0:	mov	r0, r4
    9ec2:	add	sp, #68	; 0x44
    9ec4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ec8:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9eca:	ldr.w	r9, [pc, #532]	; a0e0 <SdioCard::begin(SdioConfig)+0x25c>
    9ece:	mov.w	r1, #426	; 0x1aa
    9ed2:	mov	r0, r9
    9ed4:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9ed8:	cbz	r0, 9efc <SdioCard::begin(SdioConfig)+0x78>
      if (SDHC_CMDRSP0 != 0X1AA) {
    9eda:	ldr	r3, [pc, #460]	; (a0a8 <SdioCard::begin(SdioConfig)+0x224>)
    9edc:	ldr	r3, [r3, #16]
    9ede:	cmp.w	r3, #426	; 0x1aa
    9ee2:	beq.n	9ef4 <SdioCard::begin(SdioConfig)+0x70>
  m_errorCode = code;
    9ee4:	movs	r3, #6
  m_errorLine = line;
    9ee6:	mov.w	r2, #660	; 0x294
  m_errorCode = code;
    9eea:	strb	r3, [r5, #0]
  m_errorLine = line;
    9eec:	ldr	r3, [pc, #436]	; (a0a4 <SdioCard::begin(SdioConfig)+0x220>)
    return sdError(SD_CARD_ERROR_ACMD6);
    9eee:	movs	r4, #0
  m_errorLine = line;
    9ef0:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    9ef2:	b.n	9ec0 <SdioCard::begin(SdioConfig)+0x3c>
      m_version2 = true;
    9ef4:	movs	r3, #1
    9ef6:	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9ef8:	ldr	r6, [pc, #432]	; (a0ac <SdioCard::begin(SdioConfig)+0x228>)
    9efa:	b.n	9f1c <SdioCard::begin(SdioConfig)+0x98>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9efc:	subs	r4, #1
    9efe:	bne.n	9ece <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
    9f00:	ldrb	r3, [r6, #0]
    9f02:	cmp	r3, #0
    9f04:	bne.n	9ef8 <SdioCard::begin(SdioConfig)+0x74>
    initSDHC();
    9f06:	bl	9684 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    9f0a:	mov	r1, r4
    9f0c:	mov	r0, r4
    9f0e:	bl	9774 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9f12:	ldrb	r3, [r6, #0]
    9f14:	cmp	r3, #0
    9f16:	bne.n	9ef8 <SdioCard::begin(SdioConfig)+0x74>
    9f18:	mov.w	r6, #3145728	; 0x300000
  int m = micros();
    9f1c:	bl	ba68 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9f20:	ldr.w	r9, [pc, #428]	; a0d0 <SdioCard::begin(SdioConfig)+0x24c>
  int m = micros();
    9f24:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9f26:	ldr.w	sl, [pc, #444]	; a0e4 <SdioCard::begin(SdioConfig)+0x260>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9f2a:	ldr.w	fp, [pc, #444]	; a0e8 <SdioCard::begin(SdioConfig)+0x264>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9f2e:	movs	r1, #0
    9f30:	mov	r0, r9
    9f32:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9f36:	cbnz	r0, 9f44 <SdioCard::begin(SdioConfig)+0xc0>
  m_errorCode = code;
    9f38:	movs	r3, #23
  m_errorLine = line;
    9f3a:	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    9f3e:	strb	r3, [r5, #0]
  m_errorLine = line;
    9f40:	ldr	r3, [pc, #352]	; (a0a4 <SdioCard::begin(SdioConfig)+0x220>)
    9f42:	b.n	9eee <SdioCard::begin(SdioConfig)+0x6a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9f44:	mov	r1, r6
    9f46:	mov	r0, sl
    9f48:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9f4c:	cmp	r0, #0
    9f4e:	beq.n	9f38 <SdioCard::begin(SdioConfig)+0xb4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    9f50:	bl	ba68 <micros>
    9f54:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9f56:	cmp	r0, fp
    9f58:	bhi.n	9f38 <SdioCard::begin(SdioConfig)+0xb4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9f5a:	ldr	r3, [pc, #332]	; (a0a8 <SdioCard::begin(SdioConfig)+0x224>)
    9f5c:	ldr	r2, [r3, #16]
    9f5e:	cmp	r2, #0
    9f60:	bge.n	9f2e <SdioCard::begin(SdioConfig)+0xaa>
  m_ocr = SDHC_CMDRSP0;
    9f62:	ldr	r1, [r3, #16]
    9f64:	ldr	r2, [pc, #328]	; (a0b0 <SdioCard::begin(SdioConfig)+0x22c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9f66:	ldr	r0, [pc, #332]	; (a0b4 <SdioCard::begin(SdioConfig)+0x230>)
  m_ocr = SDHC_CMDRSP0;
    9f68:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9f6a:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    9f6c:	ldr	r3, [r3, #16]
    9f6e:	lsls	r2, r3, #1
    m_highCapacity = true;
    9f70:	itt	mi
    9f72:	movmi	r3, #1
    9f74:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9f78:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9f7c:	mov	r4, r0
    9f7e:	cbnz	r0, 9f8c <SdioCard::begin(SdioConfig)+0x108>
  m_errorCode = code;
    9f80:	movs	r3, #2
  m_errorLine = line;
    9f82:	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    9f86:	strb	r3, [r5, #0]
  m_errorLine = line;
    9f88:	ldr	r3, [pc, #280]	; (a0a4 <SdioCard::begin(SdioConfig)+0x220>)
    9f8a:	b.n	9ebe <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    9f8c:	movs	r1, #0
    9f8e:	ldr	r0, [pc, #296]	; (a0b8 <SdioCard::begin(SdioConfig)+0x234>)
    9f90:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9f94:	mov	r4, r0
    9f96:	cbnz	r0, 9fa4 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    9f98:	movs	r3, #3
  m_errorLine = line;
    9f9a:	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    9f9e:	strb	r3, [r5, #0]
  m_errorLine = line;
    9fa0:	ldr	r3, [pc, #256]	; (a0a4 <SdioCard::begin(SdioConfig)+0x220>)
    9fa2:	b.n	9ebe <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9fa4:	ldr	r6, [pc, #256]	; (a0a8 <SdioCard::begin(SdioConfig)+0x224>)
    9fa6:	ldr.w	r8, [pc, #324]	; a0ec <SdioCard::begin(SdioConfig)+0x268>
    9faa:	ldr	r3, [r6, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9fac:	ldr	r1, [pc, #268]	; (a0bc <SdioCard::begin(SdioConfig)+0x238>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9fae:	lsrs	r3, r3, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9fb0:	ldr	r0, [pc, #268]	; (a0c0 <SdioCard::begin(SdioConfig)+0x23c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9fb2:	lsls	r3, r3, #16
    9fb4:	str.w	r3, [r8]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9fb8:	bl	9810 <readReg16(unsigned long, void*)>
    9fbc:	mov	r4, r0
    9fbe:	cbnz	r0, 9fcc <SdioCard::begin(SdioConfig)+0x148>
  m_errorCode = code;
    9fc0:	movs	r3, #7
  m_errorLine = line;
    9fc2:	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    9fc6:	strb	r3, [r5, #0]
  m_errorLine = line;
    9fc8:	ldr	r3, [pc, #216]	; (a0a4 <SdioCard::begin(SdioConfig)+0x220>)
    9fca:	b.n	9ebe <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9fcc:	ldr	r1, [pc, #244]	; (a0c4 <SdioCard::begin(SdioConfig)+0x240>)
    9fce:	ldr	r0, [pc, #248]	; (a0c8 <SdioCard::begin(SdioConfig)+0x244>)
    9fd0:	bl	9810 <readReg16(unsigned long, void*)>
    9fd4:	mov	r4, r0
    9fd6:	cbnz	r0, 9fe4 <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
    9fd8:	movs	r3, #8
  m_errorLine = line;
    9fda:	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    9fde:	strb	r3, [r5, #0]
  m_errorLine = line;
    9fe0:	ldr	r3, [pc, #192]	; (a0a4 <SdioCard::begin(SdioConfig)+0x220>)
    9fe2:	b.n	9ebe <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9fe4:	ldr.w	r1, [r8]
    9fe8:	ldr	r0, [pc, #224]	; (a0cc <SdioCard::begin(SdioConfig)+0x248>)
    9fea:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    9fee:	mov	r4, r0
    9ff0:	cbnz	r0, 9ffe <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    9ff2:	movs	r3, #5
  m_errorLine = line;
    9ff4:	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    9ff8:	strb	r3, [r5, #0]
  m_errorLine = line;
    9ffa:	ldr	r3, [pc, #168]	; (a0a4 <SdioCard::begin(SdioConfig)+0x220>)
    9ffc:	b.n	9ebe <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9ffe:	ldr.w	r1, [r8]
    a002:	ldr	r0, [pc, #204]	; (a0d0 <SdioCard::begin(SdioConfig)+0x24c>)
    a004:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    a008:	cbz	r0, a052 <SdioCard::begin(SdioConfig)+0x1ce>
    a00a:	movs	r1, #2
    a00c:	ldr	r0, [pc, #196]	; (a0d4 <SdioCard::begin(SdioConfig)+0x250>)
    a00e:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    a012:	mov	r4, r0
    a014:	cbz	r0, a052 <SdioCard::begin(SdioConfig)+0x1ce>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a016:	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    a018:	mov	r1, sp
    a01a:	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a01e:	bic.w	r3, r3, #6
    a022:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    a024:	ldr	r3, [r6, #40]	; 0x28
    a026:	orr.w	r3, r3, #2
    a02a:	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    a02c:	mov.w	r3, #1048592	; 0x100010
    a030:	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    a032:	bl	9df8 <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    a036:	cbnz	r0, a05e <SdioCard::begin(SdioConfig)+0x1da>
  kHzSdClk = 25000;
    a038:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    a03c:	movs	r0, #5
    a03e:	bl	9434 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    a042:	mov	r0, r2
    a044:	bl	94dc <setSdclk(unsigned long)>
  if (enable) {
    a048:	bl	9654 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    a04c:	movs	r3, #1
    a04e:	strb	r3, [r7, #0]
  return true;
    a050:	b.n	9ec0 <SdioCard::begin(SdioConfig)+0x3c>
  m_errorCode = code;
    a052:	movs	r3, #20
  m_errorLine = line;
    a054:	movw	r2, #707	; 0x2c3
  m_errorCode = code;
    a058:	strb	r3, [r5, #0]
  m_errorLine = line;
    a05a:	ldr	r3, [pc, #72]	; (a0a4 <SdioCard::begin(SdioConfig)+0x220>)
    a05c:	b.n	9eee <SdioCard::begin(SdioConfig)+0x6a>
  if (highSpeedModeAsk && highspeedModeSupported) {
    a05e:	ldrb.w	r3, [sp, #13]
    a062:	lsls	r3, r3, #30
    a064:	bpl.n	a038 <SdioCard::begin(SdioConfig)+0x1b4>
    uint32_t m_errorLine_before = m_errorLine;
    a066:	ldr	r6, [pc, #60]	; (a0a4 <SdioCard::begin(SdioConfig)+0x220>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    a068:	mov	r1, sp
    a06a:	ldr	r0, [pc, #108]	; (a0d8 <SdioCard::begin(SdioConfig)+0x254>)
    uint8_t err_code_before = m_errorCode;
    a06c:	ldrb.w	r9, [r5]
    uint32_t m_errorLine_before = m_errorLine;
    a070:	ldr.w	r8, [r6]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    a074:	bl	9df8 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    a078:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    a07c:	cbz	r0, a086 <SdioCard::begin(SdioConfig)+0x202>
    a07e:	and.w	r3, r3, #15
    a082:	cmp	r3, #1
    a084:	beq.n	a090 <SdioCard::begin(SdioConfig)+0x20c>
      m_errorCode = err_code_before;
    a086:	strb.w	r9, [r5]
      m_errorLine = m_errorLine_before;
    a08a:	str.w	r8, [r6]
    a08e:	b.n	a038 <SdioCard::begin(SdioConfig)+0x1b4>
      kHzSdClk = 50000;
    a090:	movw	r2, #50000	; 0xc350
    a094:	b.n	a03c <SdioCard::begin(SdioConfig)+0x1b8>
    a096:	nop
    a098:	.word	0x20010a4e
    a09c:	.word	0x20009410
    a0a0:	.word	0x20010a4f
    a0a4:	.word	0x2000dbd8
    a0a8:	.word	0x402c0000
    a0ac:	.word	0x40300000
    a0b0:	.word	0x2000f5ec
    a0b4:	.word	0x02090000
    a0b8:	.word	0x031a0000
    a0bc:	.word	0x20010a62
    a0c0:	.word	0x09090000
    a0c4:	.word	0x20010a52
    a0c8:	.word	0x0a090000
    a0cc:	.word	0x071b0000
    a0d0:	.word	0x371a0000
    a0d4:	.word	0x061a0000
    a0d8:	.word	0x80fffff1
    a0dc:	.word	0x20010a50
    a0e0:	.word	0x081a0000
    a0e4:	.word	0x29020000
    a0e8:	.word	0x000f4240
    a0ec:	.word	0x2000f5f0

0000a0f0 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    a0f0:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    a0f2:	ldr	r3, [pc, #148]	; (a188 <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    a0f4:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    a0f6:	ldr	r2, [r3, #36]	; 0x24
    a0f8:	lsls	r0, r2, #22
    a0fa:	bmi.n	a118 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a0fc:	ldr	r2, [r3, #40]	; 0x28
    a0fe:	bic.w	r2, r2, #65536	; 0x10000
    a102:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    a104:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    a106:	ldr	r2, [r3, #40]	; 0x28
    a108:	orr.w	r2, r2, #131072	; 0x20000
    a10c:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a10e:	ldr	r2, [r3, #40]	; 0x28
    a110:	orr.w	r2, r2, #65536	; 0x10000
    a114:	str	r2, [r3, #40]	; 0x28
    interrupts();
    a116:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    a118:	ldr	r0, [pc, #112]	; (a18c <SdioCard::readData(unsigned char*)+0x9c>)
    a11a:	bl	95e4 <waitTimeout(bool (*)())>
    a11e:	cbz	r0, a132 <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    a120:	ldr	r3, [pc, #108]	; (a190 <SdioCard::readData(unsigned char*)+0xa0>)
    a122:	movs	r2, #26
    a124:	strb	r2, [r3, #0]
  m_errorLine = line;
    a126:	movw	r2, #854	; 0x356
    a12a:	ldr	r3, [pc, #104]	; (a194 <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    a12c:	movs	r0, #0
  m_errorLine = line;
    a12e:	str	r2, [r3, #0]
}
    a130:	pop	{r3, r4, r5, pc}
    a132:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    a136:	ldr	r5, [pc, #80]	; (a188 <SdioCard::readData(unsigned char*)+0x98>)
    a138:	ldr	r3, [r5, #36]	; 0x24
    a13a:	lsls	r1, r3, #20
    a13c:	bpl.n	a138 <SdioCard::readData(unsigned char*)+0x48>
    a13e:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a140:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    a144:	ldr	r0, [r5, #32]
    a146:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a14a:	cmp	r3, r1
    a14c:	bne.n	a144 <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    a14e:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    a150:	cmp	r4, r2
    a152:	bne.n	a138 <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    a154:	ldr	r0, [pc, #64]	; (a198 <SdioCard::readData(unsigned char*)+0xa8>)
    a156:	bl	95e4 <waitTimeout(bool (*)())>
    a15a:	cbz	r0, a16a <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    a15c:	ldr	r3, [pc, #48]	; (a190 <SdioCard::readData(unsigned char*)+0xa0>)
    a15e:	movs	r2, #29
    a160:	strb	r2, [r3, #0]
  m_errorLine = line;
    a162:	movw	r2, #865	; 0x361
    a166:	ldr	r3, [pc, #44]	; (a194 <SdioCard::readData(unsigned char*)+0xa4>)
    a168:	b.n	a12c <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    a16a:	ldr	r2, [r5, #48]	; 0x30
    a16c:	ldr	r3, [pc, #44]	; (a19c <SdioCard::readData(unsigned char*)+0xac>)
    a16e:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a170:	ldr	r2, [r3, #0]
    a172:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a174:	ldr	r2, [r3, #0]
    a176:	lsls	r2, r2, #30
    a178:	bpl.n	a130 <SdioCard::readData(unsigned char*)+0x40>
    a17a:	ldr	r2, [r3, #0]
    a17c:	ldr	r3, [pc, #32]	; (a1a0 <SdioCard::readData(unsigned char*)+0xb0>)
    a17e:	tst	r2, r3
    a180:	ite	eq
    a182:	moveq	r0, #1
    a184:	movne	r0, #0
    a186:	b.n	a130 <SdioCard::readData(unsigned char*)+0x40>
    a188:	.word	0x402c0000
    a18c:	.word	0x0000949d
    a190:	.word	0x20009410
    a194:	.word	0x2000dbd8
    a198:	.word	0x000094c5
    a19c:	.word	0x2000fbf8
    a1a0:	.word	0x117f0000

0000a1a4 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    a1a4:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    a1a6:	ldr	r0, [pc, #80]	; (a1f8 <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    a1a8:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    a1aa:	bl	9608 <yieldTimeout(bool (*)())>
    a1ae:	cbz	r0, a1c2 <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    a1b0:	ldr	r3, [pc, #72]	; (a1fc <SdioCard::readStart(unsigned long)+0x58>)
    a1b2:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    a1b4:	movs	r0, #0
  m_errorCode = code;
    a1b6:	strb	r2, [r3, #0]
  m_errorLine = line;
    a1b8:	movw	r2, #945	; 0x3b1
    a1bc:	ldr	r3, [pc, #64]	; (a200 <SdioCard::readStart(unsigned long)+0x5c>)
    a1be:	str	r2, [r3, #0]
}
    a1c0:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a1c2:	ldr	r3, [pc, #64]	; (a204 <SdioCard::readStart(unsigned long)+0x60>)
    a1c4:	ldr	r2, [r3, #40]	; 0x28
    a1c6:	orr.w	r2, r2, #65536	; 0x10000
    a1ca:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    a1cc:	mov.w	r2, #512	; 0x200
    a1d0:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a1d2:	ldr	r3, [pc, #52]	; (a208 <SdioCard::readStart(unsigned long)+0x64>)
    a1d4:	ldrb	r3, [r3, #0]
    a1d6:	cbnz	r3, a1da <SdioCard::readStart(unsigned long)+0x36>
    a1d8:	lsls	r4, r4, #9
    a1da:	mov	r1, r4
    a1dc:	ldr	r0, [pc, #44]	; (a20c <SdioCard::readStart(unsigned long)+0x68>)
    a1de:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    a1e2:	cmp	r0, #0
    a1e4:	bne.n	a1c0 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    a1e6:	ldr	r3, [pc, #20]	; (a1fc <SdioCard::readStart(unsigned long)+0x58>)
    a1e8:	movs	r2, #12
    a1ea:	strb	r2, [r3, #0]
  m_errorLine = line;
    a1ec:	movw	r2, #957	; 0x3bd
    a1f0:	ldr	r3, [pc, #12]	; (a200 <SdioCard::readStart(unsigned long)+0x5c>)
    a1f2:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    a1f4:	b.n	a1c0 <SdioCard::readStart(unsigned long)+0x1c>
    a1f6:	nop
    a1f8:	.word	0x000097fd
    a1fc:	.word	0x20009410
    a200:	.word	0x2000dbd8
    a204:	.word	0x402c0000
    a208:	.word	0x20010a50
    a20c:	.word	0x123a0030

0000a210 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    a210:	push	{r4, r5, r6, r7, lr}
    a212:	ldrb	r5, [r0, #8]
    a214:	sub.w	sp, sp, #516	; 0x204
    a218:	mov	r4, r0
    a21a:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    a21c:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    a220:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    a222:	beq.n	a264 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    a224:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    a226:	ldr	r0, [pc, #132]	; (a2ac <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    a228:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    a22c:	ite	eq
    a22e:	moveq	r4, r2
    a230:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    a232:	mov	r2, r4
    a234:	bl	9898 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a238:	mov	r5, r0
    a23a:	cbnz	r0, a252 <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    a23c:	ldr	r3, [pc, #112]	; (a2b0 <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    a23e:	movs	r2, #11
    a240:	strb	r2, [r3, #0]
  m_errorLine = line;
    a242:	mov.w	r2, #884	; 0x374
    a246:	ldr	r3, [pc, #108]	; (a2b4 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    a248:	str	r2, [r3, #0]
}
    a24a:	mov	r0, r5
    a24c:	add.w	sp, sp, #516	; 0x204
    a250:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    a252:	cmp	r4, r6
    a254:	beq.n	a24a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    a256:	mov.w	r2, #512	; 0x200
    a25a:	mov	r1, sp
    a25c:	mov	r0, r6
    a25e:	bl	a56c <memcpy>
    a262:	b.n	a24a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    a264:	bl	9b90 <waitTransferComplete()>
    a268:	cmp	r0, #0
    a26a:	beq.n	a24a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    a26c:	ldrb	r3, [r4, #9]
    a26e:	cmp	r3, #1
    a270:	bne.n	a278 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    a272:	ldr	r3, [r4, #4]
    a274:	cmp	r3, r7
    a276:	beq.n	a296 <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    a278:	ldr	r3, [r4, #0]
    a27a:	mov	r0, r4
    a27c:	ldr	r3, [r3, #32]
    a27e:	blx	r3
    a280:	cmp	r0, #0
    a282:	beq.n	a24a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    a284:	mov	r1, r7
    a286:	mov	r0, r4
    a288:	bl	a1a4 <SdioCard::readStart(unsigned long)>
    a28c:	cmp	r0, #0
    a28e:	beq.n	a24a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    a290:	movs	r3, #1
      m_curSector = sector;
    a292:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    a294:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    a296:	mov	r1, r6
    a298:	mov	r0, r4
    a29a:	bl	a0f0 <SdioCard::readData(unsigned char*)>
    a29e:	cmp	r0, #0
    a2a0:	beq.n	a24a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    a2a2:	ldr	r3, [r4, #4]
  return true;
    a2a4:	mov	r5, r0
    m_curSector++;
    a2a6:	adds	r3, #1
    a2a8:	str	r3, [r4, #4]
    a2aa:	b.n	a24a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    a2ac:	.word	0x113a0011
    a2b0:	.word	0x20009410
    a2b4:	.word	0x2000dbd8

0000a2b8 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    a2b8:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a2ba:	ldr	r2, [pc, #76]	; (a308 <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    a2bc:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    a2be:	mov	r6, r1
  m_curState = IDLE_STATE;
    a2c0:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a2c2:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a2c4:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a2c6:	ldr	r0, [pc, #68]	; (a30c <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a2c8:	bic.w	r3, r3, #65536	; 0x10000
    a2cc:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a2ce:	bl	9774 <cardCommand(unsigned long, unsigned long)>
    a2d2:	mov	r4, r0
    a2d4:	cbnz	r0, a2e8 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    a2d6:	ldr	r3, [pc, #56]	; (a310 <SdioCard::stopTransmission(bool)+0x58>)
    a2d8:	movs	r2, #9
    a2da:	strb	r2, [r3, #0]
  m_errorLine = line;
    a2dc:	movw	r2, #979	; 0x3d3
    a2e0:	ldr	r3, [pc, #48]	; (a314 <SdioCard::stopTransmission(bool)+0x5c>)
    a2e2:	str	r2, [r3, #0]
}
    a2e4:	mov	r0, r4
    a2e6:	pop	{r4, r5, r6, pc}
  if (blocking) {
    a2e8:	cmp	r6, #0
    a2ea:	beq.n	a2e4 <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    a2ec:	ldr	r0, [pc, #40]	; (a318 <SdioCard::stopTransmission(bool)+0x60>)
    a2ee:	bl	9608 <yieldTimeout(bool (*)())>
    a2f2:	cmp	r0, #0
    a2f4:	beq.n	a2e4 <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    a2f6:	ldr	r3, [pc, #24]	; (a310 <SdioCard::stopTransmission(bool)+0x58>)
    a2f8:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    a2fa:	mov	r4, r5
  m_errorCode = code;
    a2fc:	strb	r2, [r3, #0]
  m_errorLine = line;
    a2fe:	movw	r2, #983	; 0x3d7
    a302:	ldr	r3, [pc, #16]	; (a314 <SdioCard::stopTransmission(bool)+0x5c>)
    a304:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    a306:	b.n	a2e4 <SdioCard::stopTransmission(bool)+0x2c>
    a308:	.word	0x402c0000
    a30c:	.word	0x0cdb0000
    a310:	.word	0x20009410
    a314:	.word	0x2000dbd8
    a318:	.word	0x0000947d

0000a31c <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    a31c:	push	{r4, lr}
    a31e:	mov	r4, r0
  if (!waitTransferComplete()) {
    a320:	bl	9b90 <waitTransferComplete()>
    a324:	cbz	r0, a336 <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    a326:	ldrb	r3, [r4, #9]
    a328:	cbz	r3, a336 <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    a32a:	mov	r0, r4
    a32c:	movs	r1, #1
}
    a32e:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    a332:	b.w	a2b8 <SdioCard::stopTransmission(bool)>
}
    a336:	pop	{r4, pc}

0000a338 <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    a338:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a33a:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a33c:	tst.w	r3, #2031616	; 0x1f0000
    a340:	beq.n	a33a <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    a342:	ldr	r0, [r0, #116]	; 0x74
	}
    a344:	uxtb	r0, r0
    a346:	bx	lr

0000a348 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    a348:	push	{r0, r1, r2, r4, r5, lr}
    a34a:	add	r3, sp, #8
    a34c:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    a350:	ldrb	r2, [r0, #19]
    a352:	mov	r3, r1
    a354:	cmp	r2, #0
    a356:	beq.n	a3cc <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    a358:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    a35a:	ldrb	r2, [r0, #19]
    a35c:	lsls	r1, r2, #31
    a35e:	bpl.n	a372 <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    a360:	mov.w	r4, #3758153728	; 0xe000e000
    a364:	ldr	r5, [r0, #20]
    a366:	ldr.w	r1, [r4, #384]	; 0x180
    a36a:	ands	r1, r5
    a36c:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    a36e:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    a372:	lsls	r5, r2, #30
    a374:	bpl.n	a388 <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    a376:	mov.w	r4, #3758153728	; 0xe000e000
    a37a:	ldr	r5, [r0, #24]
    a37c:	ldr.w	r1, [r4, #388]	; 0x184
    a380:	ands	r1, r5
    a382:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    a384:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    a388:	lsls	r4, r2, #29
    a38a:	bpl.n	a39e <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    a38c:	mov.w	r4, #3758153728	; 0xe000e000
    a390:	ldr	r5, [r0, #28]
    a392:	ldr.w	r1, [r4, #392]	; 0x188
    a396:	ands	r1, r5
    a398:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    a39a:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    a39e:	lsls	r1, r2, #28
    a3a0:	bpl.n	a3b4 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    a3a2:	mov.w	r4, #3758153728	; 0xe000e000
    a3a6:	ldr	r5, [r0, #32]
    a3a8:	ldr.w	r1, [r4, #396]	; 0x18c
    a3ac:	ands	r1, r5
    a3ae:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    a3b0:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    a3b4:	lsls	r2, r2, #27
    a3b6:	bpl.n	a3ca <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    a3b8:	mov.w	r1, #3758153728	; 0xe000e000
    a3bc:	ldr	r4, [r0, #36]	; 0x24
    a3be:	ldr.w	r2, [r1, #400]	; 0x190
    a3c2:	ands	r2, r4
    a3c4:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    a3c6:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    a3ca:	cpsie	i
		if (settings.clock() != _clock) {
    a3cc:	ldr	r2, [r0, #8]
    a3ce:	cmp	r3, r2
    a3d0:	beq.n	a420 <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    a3d2:	ldr	r2, [pc, #112]	; (a444 <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    a3d4:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    a3d6:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a3d8:	ldr	r1, [pc, #108]	; (a448 <SPIClass::beginTransaction(SPISettings)+0x100>)
    a3da:	ubfx	r4, r2, #4, #2
    a3de:	ubfx	r2, r2, #26, #3
    a3e2:	ldr.w	r4, [r1, r4, lsl #2]
    a3e6:	adds	r2, #1
    a3e8:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    a3ec:	cbz	r3, a43a <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    a3ee:	cmp	r3, r1
    a3f0:	bhi.n	a40a <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    a3f2:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    a3f6:	udiv	r1, r1, r2
    a3fa:	cmp	r3, r1
    a3fc:	bcs.n	a400 <SPIClass::beginTransaction(SPISettings)+0xb8>
    a3fe:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    a400:	cmp.w	r2, #258	; 0x102
    a404:	bcs.n	a40e <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    a406:	cmp	r2, #2
    a408:	bhi.n	a412 <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    a40a:	movs	r3, #0
    a40c:	b.n	a414 <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    a40e:	movw	r2, #257	; 0x101
				div = d-2;
    a412:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    a414:	lsrs	r1, r3, #1
    a416:	lsls	r2, r1, #16
    a418:	orr.w	r2, r2, r1, lsl #8
    a41c:	orrs	r3, r2
    a41e:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a420:	ldr	r3, [r0, #0]
		port().CR = 0;
    a422:	movs	r2, #0
    a424:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    a426:	movs	r2, #3
    a428:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    a42a:	ldr	r2, [r0, #12]
    a42c:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    a42e:	ldr	r2, [sp, #4]
    a430:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    a432:	movs	r2, #1
    a434:	str	r2, [r3, #16]
	}
    a436:	add	sp, #12
    a438:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    a43a:	cmp	r4, r2
    a43c:	bcc.n	a414 <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a43e:	mov	r2, r1
    a440:	b.n	a3fe <SPIClass::beginTransaction(SPISettings)+0xb6>
    a442:	nop
    a444:	.word	0x400fc000
    a448:	.word	0x200005f8

0000a44c <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    a44c:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    a450:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    a452:	ldr	r0, [r0, #0]
    a454:	bl	a348 <SPIClass::beginTransaction(SPISettings)>
}
    a458:	pop	{r3, pc}

0000a45a <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    a45a:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    a45c:	ldrb	r2, [r3, #19]
    a45e:	cbz	r2, a4a6 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    a460:	lsls	r0, r2, #31
    a462:	bpl.n	a46e <SdSpiArduinoDriver::deactivate()+0x14>
    a464:	ldr	r0, [r3, #40]	; 0x28
    a466:	mov.w	r1, #3758153728	; 0xe000e000
    a46a:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    a46e:	lsls	r1, r2, #30
    a470:	bpl.n	a47c <SdSpiArduinoDriver::deactivate()+0x22>
    a472:	ldr	r0, [r3, #44]	; 0x2c
    a474:	mov.w	r1, #3758153728	; 0xe000e000
    a478:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    a47c:	lsls	r0, r2, #29
    a47e:	bpl.n	a48a <SdSpiArduinoDriver::deactivate()+0x30>
    a480:	ldr	r0, [r3, #48]	; 0x30
    a482:	mov.w	r1, #3758153728	; 0xe000e000
    a486:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    a48a:	lsls	r1, r2, #28
    a48c:	bpl.n	a498 <SdSpiArduinoDriver::deactivate()+0x3e>
    a48e:	ldr	r0, [r3, #52]	; 0x34
    a490:	mov.w	r1, #3758153728	; 0xe000e000
    a494:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    a498:	lsls	r2, r2, #27
    a49a:	bpl.n	a4a6 <SdSpiArduinoDriver::deactivate()+0x4c>
    a49c:	ldr	r2, [r3, #56]	; 0x38
    a49e:	mov.w	r3, #3758153728	; 0xe000e000
    a4a2:	str.w	r2, [r3, #272]	; 0x110
}
    a4a6:	bx	lr

0000a4a8 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    a4a8:	ldr	r0, [r0, #0]
    a4aa:	b.w	53a2 <SPIClass::end()>

0000a4ae <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    a4ae:	ldr	r3, [r0, #0]
    a4b0:	movs	r1, #255	; 0xff
    a4b2:	ldr	r0, [r3, #0]
    a4b4:	b.w	a338 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a4b8 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a4b8:	push	{r0, r1, r2, r4, r5, lr}
    a4ba:	mov	r4, r1
    a4bc:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    a4be:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a4c0:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    a4c2:	mov	r0, r4
    a4c4:	bl	a528 <memset>
		transfer(buf, buf, count);
    a4c8:	ldr	r0, [r5, #0]
    a4ca:	ldr	r3, [sp, #4]
    a4cc:	mov	r2, r4
    a4ce:	mov	r1, r4
    a4d0:	bl	534c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    a4d4:	movs	r0, #0
    a4d6:	add	sp, #12
    a4d8:	pop	{r4, r5, pc}

0000a4da <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    a4da:	ldr	r3, [r0, #0]
    a4dc:	ldr	r0, [r3, #0]
    a4de:	b.w	a338 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a4e2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    a4e2:	subs	r3, r2, #1
    a4e4:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    a4e8:	push	{r4, r5, r6, lr}
    a4ea:	mov	r6, r0
    a4ec:	sub.w	sp, sp, #512	; 0x200
    a4f0:	mov	r4, r1
    a4f2:	mov	r5, r2
  if (0 < count && count <= 512) {
    a4f4:	bcc.n	a50a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    a4f6:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    a4f8:	cmp	r4, r5
    a4fa:	beq.n	a51c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    a4fc:	ldr	r3, [r6, #0]
    a4fe:	ldrb.w	r1, [r4], #1
    a502:	ldr	r0, [r3, #0]
    a504:	bl	a338 <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    a508:	b.n	a4f8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    a50a:	mov	r0, sp
    a50c:	bl	a56c <memcpy>
    a510:	mov	r2, sp
    a512:	mov	r3, r5
    a514:	ldr	r0, [r6, #0]
    a516:	mov	r1, r2
    a518:	bl	534c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    a51c:	add.w	sp, sp, #512	; 0x200
    a520:	pop	{r4, r5, r6, pc}

0000a522 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    a522:	b.w	c204 <digitalWrite>
	...

0000a528 <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    a528:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    a52a:	cbz	r2, a568 <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    a52c:	cmp	r2, #16
    blt     .L_bytewise
    a52e:	blt.n	a560 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    a530:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    a534:	cbz	r3, a544 <memset+0x1c>
    rsb     r3, #8
    a536:	rsb	r3, r3, #8
    subs    r2, r3
    a53a:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    a53c:	subs	r3, #1
    strb    r1, [r0], #1
    a53e:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    a542:	bgt.n	a53c <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    a544:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    a546:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    a54a:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    a54e:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    a550:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    a552:	subs	r3, #1
    strd    r1, r12, [r0], #8
    a554:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    a558:	bgt.n	a552 <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    a55a:	ands.w	r2, r2, #7
    beq     .L_done
    a55e:	beq.n	a568 <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    a560:	subs	r2, #1
    strb    r1, [r0], #1
    a562:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    a566:	bgt.n	a560 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    a568:	pop	{r0, pc}
    a56a:	nop

0000a56c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a56c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a56e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a572:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a576:	bne.n	a654 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a578:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a57a:	bcc.n	a600 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a57c:	ldr.w	r3, [r1], #4
    a580:	str.w	r3, [r0], #4
    a584:	ldr.w	r3, [r1], #4
    a588:	str.w	r3, [r0], #4
    a58c:	ldr.w	r3, [r1], #4
    a590:	str.w	r3, [r0], #4
    a594:	ldr.w	r3, [r1], #4
    a598:	str.w	r3, [r0], #4
    a59c:	ldr.w	r3, [r1], #4
    a5a0:	str.w	r3, [r0], #4
    a5a4:	ldr.w	r3, [r1], #4
    a5a8:	str.w	r3, [r0], #4
    a5ac:	ldr.w	r3, [r1], #4
    a5b0:	str.w	r3, [r0], #4
    a5b4:	ldr.w	r3, [r1], #4
    a5b8:	str.w	r3, [r0], #4
    a5bc:	ldr.w	r3, [r1], #4
    a5c0:	str.w	r3, [r0], #4
    a5c4:	ldr.w	r3, [r1], #4
    a5c8:	str.w	r3, [r0], #4
    a5cc:	ldr.w	r3, [r1], #4
    a5d0:	str.w	r3, [r0], #4
    a5d4:	ldr.w	r3, [r1], #4
    a5d8:	str.w	r3, [r0], #4
    a5dc:	ldr.w	r3, [r1], #4
    a5e0:	str.w	r3, [r0], #4
    a5e4:	ldr.w	r3, [r1], #4
    a5e8:	str.w	r3, [r0], #4
    a5ec:	ldr.w	r3, [r1], #4
    a5f0:	str.w	r3, [r0], #4
    a5f4:	ldr.w	r3, [r1], #4
    a5f8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a5fc:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a5fe:	bcs.n	a57c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a600:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a602:	bcc.n	a628 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a604:	ldr.w	r3, [r1], #4
    a608:	str.w	r3, [r0], #4
    a60c:	ldr.w	r3, [r1], #4
    a610:	str.w	r3, [r0], #4
    a614:	ldr.w	r3, [r1], #4
    a618:	str.w	r3, [r0], #4
    a61c:	ldr.w	r3, [r1], #4
    a620:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a624:	subs	r2, #16
	bhs	.Lmid_block_loop
    a626:	bcs.n	a604 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a628:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a62a:	bcc.n	a638 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a62c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a630:	str.w	r3, [r0], #4
	subs	r2, #4
    a634:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a636:	bcs.n	a62c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a638:	adds	r2, #4
	beq	.Ldone
    a63a:	beq.n	a64e <memcpy+0xe2>

	lsls	r2, r2, #31
    a63c:	lsls	r2, r2, #31
	itt ne
    a63e:	itt	ne
	ldrbne  r3, [r1], #1
    a640:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a644:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a648:	bcc.n	a64e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a64a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a64c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a64e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a650:	bx	lr
    a652:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a654:	cmp	r2, #8
	blo	.Lbyte_copy
    a656:	bcc.n	a680 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a658:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a65a:	beq.n	a578 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a65c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a660:	beq.n	a578 <memcpy+0xc>

	rsb	r3, #4
    a662:	rsb	r3, r3, #4
	subs	r2, r3
    a666:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a668:	lsls	r3, r3, #31
	itt ne
    a66a:	itt	ne
	ldrbne  r3, [r1], #1
    a66c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a670:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a674:	bcc.n	a578 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a676:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a67a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a67e:	b.n	a578 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a680:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a682:	bcc.n	a638 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a684:	subs	r2, #1
	ldrb    r3, [r1], #1
    a686:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a68a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a68e:	bcs.n	a684 <memcpy+0x118>

	ldrb	r3, [r1]
    a690:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a692:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a694:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a696:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a698:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a69a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a69c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a69e:	bx	lr

0000a6a0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a6a0:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a6a2:	ldr	r4, [pc, #80]	; (a6f4 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a6a4:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a6a8:	ldr	r5, [pc, #76]	; (a6f8 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a6aa:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a6ae:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a6b2:	ldr	r7, [pc, #72]	; (a6fc <rx_queue_transfer+0x5c>)
    a6b4:	add.w	r5, r5, r0, lsl #5
{
    a6b8:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a6ba:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a6be:	mov	r1, r4
    a6c0:	ldrh	r2, [r7, #0]
    a6c2:	mov	r0, r5
    a6c4:	bl	b744 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a6c8:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a6ca:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    a6cc:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a6d0:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    a6d4:	adds	r4, #32
	} while (location < end_addr);
    a6d6:	cmp	r3, r4
    a6d8:	bhi.n	a6d0 <rx_queue_transfer+0x30>
	asm("dsb");
    a6da:	dsb	sy
	asm("isb");
    a6de:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a6e2:	movs	r0, #3
    a6e4:	mov	r1, r5
    a6e6:	bl	b794 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a6ea:	mov.w	r3, #131072	; 0x20000
    a6ee:	str.w	r3, [r6, #268]	; 0x10c
}
    a6f2:	pop	{r3, r4, r5, r6, r7, pc}
    a6f4:	.word	0x20201000
    a6f8:	.word	0x2000bf40
    a6fc:	.word	0x200109c4

0000a700 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a700:	ldr	r3, [r0, #4]
    a702:	ldr	r2, [pc, #136]	; (a78c <rx_event+0x8c>)
    a704:	ubfx	r3, r3, #16, #15
{
    a708:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a70c:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    a70e:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a710:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a712:	cmp	r4, #0
    a714:	ble.n	a75e <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    a716:	ldr	r2, [pc, #120]	; (a790 <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    a718:	uxth.w	sl, r4
		if (head != rx_tail) {
    a71c:	ldr	r0, [pc, #116]	; (a794 <rx_event+0x94>)
		uint32_t head = rx_head;
    a71e:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    a720:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a722:	uxtb	r3, r1
		if (head != rx_tail) {
    a724:	ldr.w	r8, [pc, #128]	; a7a8 <rx_event+0xa8>
    a728:	cmp	r1, r0
    a72a:	ldr	r7, [pc, #108]	; (a798 <rx_event+0x98>)
    a72c:	ldr	r1, [pc, #108]	; (a79c <rx_event+0x9c>)
    a72e:	beq.n	a768 <rx_event+0x68>
			uint32_t ii = rx_list[head];
    a730:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    a734:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a738:	rsb	r0, r6, #512	; 0x200
    a73c:	cmp	r4, r0
    a73e:	bhi.n	a768 <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a740:	ldr	r3, [pc, #92]	; (a7a0 <rx_event+0xa0>)
    a742:	add.w	r0, r6, r9, lsl #9
    a746:	mov	r2, r4
				rx_count[ii] = count + len;
    a748:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a74a:	add.w	r1, r3, r5, lsl #9
    a74e:	add	r0, r3
    a750:	bl	a56c <memcpy>
				rx_available += len;
    a754:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    a756:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    a75a:	add	r3, r4
    a75c:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    a75e:	mov	r0, r5
	}
}
    a760:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    a764:	b.w	a6a0 <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    a768:	adds	r3, #1
		rx_index[i] = 0;
    a76a:	movs	r6, #0
    a76c:	ldr	r0, [pc, #52]	; (a7a4 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    a76e:	cmp	r3, #9
		rx_count[i] = len;
    a770:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    a774:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a778:	it	cs
    a77a:	movcs	r3, r6
		rx_list[head] = i;
    a77c:	strb	r5, [r1, r3]
		rx_head = head;
    a77e:	uxtb	r3, r3
    a780:	strb	r3, [r2, #0]
		rx_available += len;
    a782:	ldr	r3, [r7, #0]
    a784:	add	r4, r3
    a786:	str	r4, [r7, #0]
}
    a788:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a78c:	.word	0x200109c4
    a790:	.word	0x20010bc1
    a794:	.word	0x20010bd1
    a798:	.word	0x20010290
    a79c:	.word	0x20010bc3
    a7a0:	.word	0x20201000
    a7a4:	.word	0x200109b4
    a7a8:	.word	0x200109a4

0000a7ac <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a7ac:	ldr	r3, [pc, #112]	; (a820 <usb_serial_flush_callback+0x74>)
{
    a7ae:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    a7b2:	ldrb	r2, [r3, #0]
    a7b4:	and.w	r3, r2, #255	; 0xff
    a7b8:	cbnz	r2, a81a <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    a7ba:	ldr	r2, [pc, #104]	; (a824 <usb_serial_flush_callback+0x78>)
    a7bc:	ldrb	r2, [r2, #0]
    a7be:	cbz	r2, a81a <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    a7c0:	ldr	r7, [pc, #100]	; (a828 <usb_serial_flush_callback+0x7c>)
    a7c2:	ldrh	r5, [r7, #0]
    a7c4:	cbz	r5, a81a <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a7c6:	ldr	r6, [pc, #100]	; (a82c <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a7c8:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a7cc:	ldr	r1, [pc, #96]	; (a830 <usb_serial_flush_callback+0x84>)
    a7ce:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a7d0:	ldr	r4, [pc, #96]	; (a834 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    a7d2:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a7d6:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a7da:	mov	r2, r5
    a7dc:	mov	r0, r8
    a7de:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a7e0:	add	r5, r4
    a7e2:	bl	b744 <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    a7e6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a7ea:	mov.w	r3, #3758153728	; 0xe000e000
    a7ee:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a7f2:	adds	r4, #32
	} while (location < end_addr);
    a7f4:	cmp	r5, r4
    a7f6:	bhi.n	a7ee <usb_serial_flush_callback+0x42>
	asm("dsb");
    a7f8:	dsb	sy
	asm("isb");
    a7fc:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a800:	movs	r0, #3
    a802:	mov	r1, r8
    a804:	bl	b770 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a808:	ldrb	r3, [r6, #0]
    a80a:	movs	r2, #0
    a80c:	adds	r3, #1
	tx_available = 0;
    a80e:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    a810:	uxtb	r3, r3
    a812:	cmp	r3, #3
    a814:	ite	ls
    a816:	strbls	r3, [r6, #0]
    a818:	strbhi	r2, [r6, #0]
}
    a81a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a81e:	nop
    a820:	.word	0x20010bd7
    a824:	.word	0x20010bd9
    a828:	.word	0x20010a48
    a82c:	.word	0x20010bd5
    a830:	.word	0x2000c0c0
    a834:	.word	0x20202000

0000a838 <usb_serial_reset>:
}
    a838:	bx	lr
	...

0000a83c <usb_serial_configure>:
	if (usb_high_speed) {
    a83c:	ldr	r3, [pc, #180]	; (a8f4 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a83e:	movs	r2, #128	; 0x80
    a840:	movs	r1, #0
    a842:	ldr	r0, [pc, #180]	; (a8f8 <usb_serial_configure+0xbc>)
{
    a844:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a846:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a848:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a84a:	ldr	r5, [pc, #176]	; (a8fc <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    a84c:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    a84e:	ldr	r6, [pc, #176]	; (a900 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    a850:	ite	eq
    a852:	moveq	r3, #64	; 0x40
    a854:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a858:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a85a:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a85c:	bl	a528 <memset>
	tx_head = 0;
    a860:	ldr	r3, [pc, #160]	; (a904 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a862:	mov.w	r2, #256	; 0x100
    a866:	mov	r1, r4
    a868:	ldr	r0, [pc, #156]	; (a908 <usb_serial_configure+0xcc>)
	tx_head = 0;
    a86a:	strb	r4, [r3, #0]
	tx_available = 0;
    a86c:	ldr	r3, [pc, #156]	; (a90c <usb_serial_configure+0xd0>)
    a86e:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a870:	bl	a528 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a874:	movs	r2, #16
    a876:	mov	r1, r4
    a878:	ldr	r0, [pc, #148]	; (a910 <usb_serial_configure+0xd4>)
    a87a:	bl	a528 <memset>
	memset(rx_index, 0, sizeof(rx_index));
    a87e:	movs	r2, #16
    a880:	mov	r1, r4
    a882:	ldr	r0, [pc, #144]	; (a914 <usb_serial_configure+0xd8>)
    a884:	bl	a528 <memset>
	rx_head = 0;
    a888:	ldr	r3, [pc, #140]	; (a918 <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a88a:	mov	r2, r4
    a88c:	movs	r1, #16
	rx_head = 0;
    a88e:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a890:	movs	r0, #2
	rx_tail = 0;
    a892:	ldr	r3, [pc, #136]	; (a91c <usb_serial_configure+0xe0>)
    a894:	strb	r4, [r3, #0]
	rx_available = 0;
    a896:	ldr	r3, [pc, #136]	; (a920 <usb_serial_configure+0xe4>)
    a898:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a89a:	mov	r3, r4
    a89c:	bl	b704 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a8a0:	ldr	r3, [pc, #128]	; (a924 <usb_serial_configure+0xe8>)
    a8a2:	mov	r2, r4
    a8a4:	ldrh	r1, [r6, #0]
    a8a6:	movs	r0, #3
    a8a8:	bl	b6c4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a8ac:	mov	r3, r4
    a8ae:	movs	r2, #1
    a8b0:	ldrh	r1, [r5, #0]
    a8b2:	movs	r0, #3
    a8b4:	bl	b704 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a8b8:	mov	r0, r4
    a8ba:	adds	r4, #1
    a8bc:	bl	a6a0 <rx_queue_transfer>
    a8c0:	cmp	r4, #8
    a8c2:	bne.n	a8b8 <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    a8c4:	ldr	r3, [pc, #96]	; (a928 <usb_serial_configure+0xec>)
    a8c6:	ldr	r2, [pc, #100]	; (a92c <usb_serial_configure+0xf0>)
    a8c8:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    a8ca:	movs	r2, #0
    a8cc:	ldr	r3, [pc, #96]	; (a930 <usb_serial_configure+0xf4>)
    a8ce:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a8d2:	movs	r2, #74	; 0x4a
    a8d4:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a8d8:	ldr.w	r2, [r3, #328]	; 0x148
    a8dc:	orr.w	r2, r2, #16777216	; 0x1000000
    a8e0:	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    a8e4:	ldr	r3, [pc, #76]	; (a934 <usb_serial_configure+0xf8>)
    a8e6:	cbz	r3, a8f2 <usb_serial_configure+0xb6>
    a8e8:	ldr	r2, [pc, #76]	; (a938 <usb_serial_configure+0xfc>)
    a8ea:	ldrb	r3, [r2, #0]
    a8ec:	orr.w	r3, r3, #1
    a8f0:	strb	r3, [r2, #0]
}
    a8f2:	pop	{r4, r5, r6, pc}
    a8f4:	.word	0x20010bda
    a8f8:	.word	0x2000c0c0
    a8fc:	.word	0x20010a4a
    a900:	.word	0x200109c4
    a904:	.word	0x20010bd5
    a908:	.word	0x2000bf40
    a90c:	.word	0x20010a48
    a910:	.word	0x200109a4
    a914:	.word	0x200109b4
    a918:	.word	0x20010bc1
    a91c:	.word	0x20010bd1
    a920:	.word	0x20010290
    a924:	.word	0x0000a701
    a928:	.word	0x20010970
    a92c:	.word	0x0000a7ad
    a930:	.word	0x402e0000
    a934:	.word	0x00000000
    a938:	.word	0x20010bdc

0000a93c <usb_serial_read>:
{
    a93c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a940:	mov.w	r3, #3758153728	; 0xe000e000
    a944:	mov.w	r2, #131072	; 0x20000
{
    a948:	mov	r7, r0
    a94a:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a94c:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    a950:	movs	r5, #0
	uint32_t tail = rx_tail;
    a952:	ldr	r3, [pc, #160]	; (a9f4 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a954:	ldr.w	fp, [pc, #176]	; aa08 <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    a958:	ldrb	r4, [r3, #0]
    a95a:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    a95c:	cmp	r5, r8
    a95e:	bcs.n	a968 <usb_serial_read+0x2c>
    a960:	ldr	r3, [pc, #148]	; (a9f8 <usb_serial_read+0xbc>)
    a962:	ldrb	r2, [r3, #0]
    a964:	cmp	r2, r4
    a966:	bne.n	a97c <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a968:	mov.w	r3, #3758153728	; 0xe000e000
    a96c:	mov.w	r2, #131072	; 0x20000
}
    a970:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a972:	str.w	r2, [r3, #268]	; 0x10c
}
    a976:	add	sp, #12
    a978:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    a97c:	adds	r4, #1
		uint32_t i = rx_list[tail];
    a97e:	ldr	r3, [pc, #124]	; (a9fc <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a980:	ldr	r0, [pc, #124]	; (aa00 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a982:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    a986:	cmp	r4, #9
    a988:	ldr.w	sl, [pc, #128]	; aa0c <usb_serial_read+0xd0>
    a98c:	it	cs
    a98e:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a990:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a994:	ldrh.w	r1, [fp, r9, lsl #1]
    a998:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a99c:	ldr	r0, [pc, #100]	; (aa04 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a99e:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a9a0:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    a9a4:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a9a6:	add	r1, r0
		if (avail > len) {
    a9a8:	bcs.n	a9d0 <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a9aa:	mov	r0, r7
    a9ac:	str	r2, [sp, #4]
    a9ae:	bl	a56c <memcpy>
			rx_available -= len;
    a9b2:	ldr.w	r1, [sl]
			rx_index[i] += len;
    a9b6:	ldr	r2, [sp, #4]
			rx_available -= len;
    a9b8:	sub.w	r1, r1, r8
    a9bc:	add	r1, r5
    a9be:	mov	r5, r8
    a9c0:	str.w	r1, [sl]
			rx_index[i] += len;
    a9c4:	ldrh.w	r1, [fp, r9, lsl #1]
    a9c8:	add	r2, r1
    a9ca:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    a9ce:	b.n	a95c <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a9d0:	mov	r2, r6
    a9d2:	mov	r0, r7
    a9d4:	bl	a56c <memcpy>
			rx_available -= avail;
    a9d8:	ldr.w	r2, [sl]
			rx_tail = tail;
    a9dc:	ldr	r3, [pc, #20]	; (a9f4 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    a9de:	mov	r0, r9
			rx_available -= avail;
    a9e0:	subs	r2, r2, r6
			p += avail;
    a9e2:	add	r7, r6
			count += avail;
    a9e4:	add	r5, r6
			rx_available -= avail;
    a9e6:	str.w	r2, [sl]
			rx_tail = tail;
    a9ea:	uxtb	r2, r4
    a9ec:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    a9ee:	bl	a6a0 <rx_queue_transfer>
    a9f2:	b.n	a95c <usb_serial_read+0x20>
    a9f4:	.word	0x20010bd1
    a9f8:	.word	0x20010bc1
    a9fc:	.word	0x20010bc3
    aa00:	.word	0x200109a4
    aa04:	.word	0x20201000
    aa08:	.word	0x200109b4
    aa0c:	.word	0x20010290

0000aa10 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    aa10:	ldr	r3, [pc, #44]	; (aa40 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    aa12:	ldr	r1, [pc, #48]	; (aa44 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    aa14:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    aa16:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    aa18:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    aa1a:	cmp	r2, r1
    aa1c:	beq.n	aa3a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    aa1e:	adds	r3, #1
	uint32_t i = rx_list[tail];
    aa20:	ldr	r2, [pc, #36]	; (aa48 <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    aa22:	cmp	r3, #9
    aa24:	it	cs
    aa26:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    aa28:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    aa2a:	ldr	r3, [pc, #32]	; (aa4c <usb_serial_peekchar+0x3c>)
    aa2c:	ldrh.w	r1, [r3, r2, lsl #1]
    aa30:	ldr	r3, [pc, #28]	; (aa50 <usb_serial_peekchar+0x40>)
    aa32:	add.w	r3, r3, r2, lsl #9
    aa36:	ldrb	r0, [r3, r1]
    aa38:	bx	lr
	if (tail == rx_head) return -1;
    aa3a:	mov.w	r0, #4294967295
}
    aa3e:	bx	lr
    aa40:	.word	0x20010bd1
    aa44:	.word	0x20010bc1
    aa48:	.word	0x20010bc3
    aa4c:	.word	0x200109b4
    aa50:	.word	0x20201000

0000aa54 <usb_serial_available>:
	uint32_t n = rx_available;
    aa54:	ldr	r3, [pc, #12]	; (aa64 <usb_serial_available+0x10>)
{
    aa56:	push	{r4, lr}
	uint32_t n = rx_available;
    aa58:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    aa5a:	cbnz	r4, aa60 <usb_serial_available+0xc>
    aa5c:	bl	c730 <yield>
}
    aa60:	mov	r0, r4
    aa62:	pop	{r4, pc}
    aa64:	.word	0x20010290

0000aa68 <usb_serial_flush_input>:
{
    aa68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    aa6c:	ldr	r5, [pc, #64]	; (aab0 <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    aa6e:	ldr	r7, [pc, #68]	; (aab4 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    aa70:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    aa72:	ldr.w	r8, [pc, #80]	; aac4 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    aa76:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    aa78:	ldr	r6, [pc, #60]	; (aab8 <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    aa7a:	ldrb	r3, [r7, #0]
    aa7c:	cmp	r3, r4
    aa7e:	bne.n	aa84 <usb_serial_flush_input+0x1c>
}
    aa80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    aa84:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    aa86:	ldr	r2, [pc, #52]	; (aabc <usb_serial_flush_input+0x54>)
    aa88:	ldr	r1, [pc, #52]	; (aac0 <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    aa8a:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    aa8c:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    aa8e:	it	cs
    aa90:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    aa92:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    aa96:	ldrh.w	r2, [r2, r0, lsl #1]
    aa9a:	ldrh.w	r1, [r1, r0, lsl #1]
    aa9e:	subs	r2, r2, r1
    aaa0:	subs	r3, r3, r2
    aaa2:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    aaa4:	bl	a6a0 <rx_queue_transfer>
		rx_tail = tail;
    aaa8:	uxtb	r3, r4
    aaaa:	strb	r3, [r5, #0]
    aaac:	b.n	aa7a <usb_serial_flush_input+0x12>
    aaae:	nop
    aab0:	.word	0x20010bd1
    aab4:	.word	0x20010bc1
    aab8:	.word	0x20010290
    aabc:	.word	0x200109a4
    aac0:	.word	0x200109b4
    aac4:	.word	0x20010bc3

0000aac8 <usb_serial_getchar>:
{
    aac8:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    aaca:	movs	r1, #1
    aacc:	add.w	r0, sp, #7
    aad0:	bl	a93c <usb_serial_read>
    aad4:	cbz	r0, aae0 <usb_serial_getchar+0x18>
    aad6:	ldrb.w	r0, [sp, #7]
}
    aada:	add	sp, #12
    aadc:	ldr.w	pc, [sp], #4
	return -1;
    aae0:	mov.w	r0, #4294967295
    aae4:	b.n	aada <usb_serial_getchar+0x12>
	...

0000aae8 <usb_serial_write>:
	if (!usb_configuration) return 0;
    aae8:	ldr	r3, [pc, #356]	; (ac50 <usb_serial_write+0x168>)
{
    aaea:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    aaee:	ldrb	r3, [r3, #0]
{
    aaf0:	mov	r6, r0
    aaf2:	mov	r5, r1
	if (!usb_configuration) return 0;
    aaf4:	and.w	r4, r3, #255	; 0xff
    aaf8:	cmp	r3, #0
    aafa:	beq.w	ac0e <usb_serial_write+0x126>
	uint32_t sent=0;
    aafe:	movs	r4, #0
		tx_noautoflush = 1;
    ab00:	ldr.w	fp, [pc, #360]	; ac6c <usb_serial_write+0x184>
	while (size > 0) {
    ab04:	cmp	r5, #0
    ab06:	beq.w	ac0e <usb_serial_write+0x126>
		tx_noautoflush = 1;
    ab0a:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    ab0c:	ldr.w	r9, [pc, #352]	; ac70 <usb_serial_write+0x188>
		while (!tx_available) {
    ab10:	ldr	r7, [pc, #320]	; (ac54 <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    ab12:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    ab16:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    ab1a:	ldr	r3, [pc, #316]	; (ac58 <usb_serial_write+0x170>)
    ab1c:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    ab20:	movs	r3, #0
		int waiting=0;
    ab22:	mov	r8, r3
		while (!tx_available) {
    ab24:	ldrh	r1, [r7, #0]
    ab26:	cbnz	r1, ab46 <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    ab28:	mov	r0, sl
    ab2a:	strd	r3, r1, [sp]
    ab2e:	bl	b7b0 <usb_transfer_status>
			if (!(status & 0x80)) {
    ab32:	ands.w	r0, r0, #128	; 0x80
    ab36:	ldr	r2, [pc, #292]	; (ac5c <usb_serial_write+0x174>)
    ab38:	ldrd	r3, r1, [sp]
    ab3c:	bne.n	abea <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    ab3e:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    ab42:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    ab44:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ab46:	ldrh.w	r8, [r7]
    ab4a:	ldrb.w	r3, [r9]
    ab4e:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    ab52:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ab54:	mov.w	r2, r3, lsl #11
    ab58:	add.w	r0, r0, r3, lsl #11
    ab5c:	ldr	r3, [pc, #256]	; (ac60 <usb_serial_write+0x178>)
    ab5e:	str	r2, [sp, #0]
    ab60:	add	r0, r3
		if (size >= tx_available) {
    ab62:	bhi.n	ac30 <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    ab64:	mov	r2, r8
    ab66:	mov	r1, r6
    ab68:	bl	a56c <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ab6c:	ldr	r2, [sp, #0]
    ab6e:	ldr	r3, [pc, #240]	; (ac60 <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ab70:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ab72:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ab74:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ab76:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ab78:	mov.w	r2, #2048	; 0x800
    ab7c:	mov	r1, r8
    ab7e:	bl	b744 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ab82:	mov	r1, r8
	asm("dsb");
    ab84:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    ab88:	add.w	r2, r8, #2048	; 0x800
    ab8c:	add.w	r3, r8, #32
    ab90:	cmp	r3, r2
    ab92:	ite	hi
    ab94:	movhi	r3, #1
    ab96:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    ab98:	mov.w	r2, #3758153728	; 0xe000e000
    ab9c:	add.w	r3, r8, r3, lsl #5
    aba0:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    aba4:	adds	r1, #32
	} while (location < end_addr);
    aba6:	cmp	r1, r3
    aba8:	bne.n	aba0 <usb_serial_write+0xb8>
	asm("dsb");
    abaa:	dsb	sy
	asm("isb");
    abae:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    abb2:	movs	r0, #3
    abb4:	mov	r1, sl
    abb6:	bl	b770 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    abba:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    abbe:	ldr	r2, [pc, #164]	; (ac64 <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    abc0:	adds	r3, #1
    abc2:	uxtb	r3, r3
    abc4:	cmp	r3, #3
    abc6:	it	hi
    abc8:	movhi	r3, #0
    abca:	strb.w	r3, [r9]
			size -= tx_available;
    abce:	ldrh	r3, [r7, #0]
    abd0:	subs	r5, r5, r3
			sent += tx_available;
    abd2:	add	r4, r3
			data += tx_available;
    abd4:	add	r6, r3
			tx_available = 0;
    abd6:	movs	r3, #0
    abd8:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    abda:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    abde:	dsb	sy
		tx_noautoflush = 0;
    abe2:	movs	r3, #0
    abe4:	strb.w	r3, [fp]
    abe8:	b.n	ab04 <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    abea:	dsb	sy
			tx_noautoflush = 0;
    abee:	strb.w	r1, [fp]
			if (!waiting) {
    abf2:	cmp.w	r8, #0
    abf6:	bne.n	abfc <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    abf8:	ldr	r3, [pc, #108]	; (ac68 <usb_serial_write+0x180>)
    abfa:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    abfc:	ldrb	r1, [r2, #0]
    abfe:	cbnz	r1, ac0e <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    ac00:	ldr	r1, [pc, #100]	; (ac68 <usb_serial_write+0x180>)
    ac02:	ldr	r1, [r1, #0]
    ac04:	subs	r1, r1, r3
    ac06:	cmp	r1, #120	; 0x78
    ac08:	bls.n	ac16 <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    ac0a:	movs	r3, #1
    ac0c:	strb	r3, [r2, #0]
}
    ac0e:	mov	r0, r4
    ac10:	add	sp, #12
    ac12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    ac16:	ldr	r1, [pc, #56]	; (ac50 <usb_serial_write+0x168>)
    ac18:	ldrb	r1, [r1, #0]
    ac1a:	cmp	r1, #0
    ac1c:	beq.n	ac0e <usb_serial_write+0x126>
			tx_noautoflush = 1;
    ac1e:	mov.w	r8, #1
    ac22:	str	r3, [sp, #0]
			yield();
    ac24:	bl	c730 <yield>
			tx_noautoflush = 1;
    ac28:	ldr	r3, [sp, #0]
    ac2a:	strb.w	r8, [fp]
    ac2e:	b.n	ab24 <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    ac30:	mov	r2, r5
    ac32:	mov	r1, r6
    ac34:	bl	a56c <memcpy>
			tx_available -= size;
    ac38:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    ac3c:	ldr	r3, [pc, #36]	; (ac64 <usb_serial_write+0x17c>)
    ac3e:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    ac42:	add	r4, r5
			tx_available -= size;
    ac44:	strh.w	r8, [r7]
			size = 0;
    ac48:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    ac4a:	str.w	r2, [r3, #132]	; 0x84
}
    ac4e:	b.n	abde <usb_serial_write+0xf6>
    ac50:	.word	0x20010bd9
    ac54:	.word	0x20010a48
    ac58:	.word	0x2000c0c0
    ac5c:	.word	0x20010bd4
    ac60:	.word	0x20202000
    ac64:	.word	0x402e0000
    ac68:	.word	0x2001094c
    ac6c:	.word	0x20010bd7
    ac70:	.word	0x20010bd5

0000ac74 <usb_serial_putchar>:
{
    ac74:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    ac76:	movs	r1, #1
{
    ac78:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    ac7c:	add.w	r0, sp, #7
    ac80:	bl	aae8 <usb_serial_write>
}
    ac84:	add	sp, #12
    ac86:	ldr.w	pc, [sp], #4
	...

0000ac8c <usb_serial_write_buffer_free>:
{
    ac8c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    ac90:	movs	r4, #0
	tx_noautoflush = 1;
    ac92:	ldr	r7, [pc, #56]	; (accc <usb_serial_write_buffer_free+0x40>)
    ac94:	movs	r3, #1
    ac96:	ldr	r6, [pc, #56]	; (acd0 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    ac98:	mov	r5, r4
		if (i == tx_head) continue;
    ac9a:	ldr.w	r8, [pc, #56]	; acd4 <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    ac9e:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    aca0:	ldrb.w	r3, [r8]
    aca4:	cmp	r3, r4
    aca6:	beq.n	acb6 <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    aca8:	mov	r0, r6
    acaa:	bl	b7b0 <usb_transfer_status>
    acae:	lsls	r3, r0, #24
    acb0:	it	pl
    acb2:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    acb6:	adds	r4, #1
    acb8:	adds	r6, #32
    acba:	cmp	r4, #4
    acbc:	bne.n	aca0 <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    acbe:	dsb	sy
	tx_noautoflush = 0;
    acc2:	movs	r3, #0
}
    acc4:	mov	r0, r5
	tx_noautoflush = 0;
    acc6:	strb	r3, [r7, #0]
}
    acc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    accc:	.word	0x20010bd7
    acd0:	.word	0x2000c0c0
    acd4:	.word	0x20010bd5

0000acd8 <usb_serial_flush_output>:
{
    acd8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    acdc:	ldr	r3, [pc, #116]	; (ad54 <usb_serial_flush_output+0x7c>)
    acde:	ldrb	r3, [r3, #0]
    ace0:	cbz	r3, ad50 <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    ace2:	ldr.w	r8, [pc, #132]	; ad68 <usb_serial_flush_output+0x90>
    ace6:	ldrh.w	r5, [r8]
    acea:	cbz	r5, ad50 <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    acec:	ldr	r7, [pc, #104]	; (ad58 <usb_serial_flush_output+0x80>)
    acee:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    acf0:	ldr	r6, [pc, #104]	; (ad5c <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    acf2:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    acf6:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    acf8:	ldr	r2, [pc, #100]	; (ad60 <usb_serial_flush_output+0x88>)
    acfa:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    acfc:	ldr	r4, [pc, #100]	; (ad64 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    acfe:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    ad02:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ad04:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    ad08:	movs	r3, #0
    ad0a:	mov	r0, r9
    ad0c:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    ad0e:	add	r5, r4
    ad10:	bl	b744 <usb_prepare_transfer>
	asm("dsb");
    ad14:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ad18:	mov.w	r3, #3758153728	; 0xe000e000
    ad1c:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    ad20:	adds	r4, #32
	} while (location < end_addr);
    ad22:	cmp	r5, r4
    ad24:	bhi.n	ad1c <usb_serial_flush_output+0x44>
	asm("dsb");
    ad26:	dsb	sy
	asm("isb");
    ad2a:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ad2e:	movs	r0, #3
    ad30:	mov	r1, r9
    ad32:	bl	b770 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ad36:	ldrb	r3, [r6, #0]
    ad38:	movs	r2, #0
    ad3a:	adds	r3, #1
	tx_available = 0;
    ad3c:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    ad40:	uxtb	r3, r3
    ad42:	cmp	r3, #3
    ad44:	ite	ls
    ad46:	strbls	r3, [r6, #0]
    ad48:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    ad4a:	dsb	sy
	tx_noautoflush = 0;
    ad4e:	strb	r2, [r7, #0]
}
    ad50:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ad54:	.word	0x20010bd9
    ad58:	.word	0x20010bd7
    ad5c:	.word	0x20010bd5
    ad60:	.word	0x2000c0c0
    ad64:	.word	0x20202000
    ad68:	.word	0x20010a48

0000ad6c <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    ad6c:	ldr	r3, [pc, #512]	; (af70 <set_arm_clock+0x204>)
{
    ad6e:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    ad70:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    ad72:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    ad74:	sub.w	r3, r3, #507904	; 0x7c000
    ad78:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    ad7a:	ldr	r3, [pc, #504]	; (af74 <set_arm_clock+0x208>)
    ad7c:	cmp	r0, r3
    ad7e:	bls.w	af40 <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    ad82:	ldr	r3, [pc, #500]	; (af78 <set_arm_clock+0x20c>)
    ad84:	cmp	r0, r3
    ad86:	bls.w	af52 <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    ad8a:	ldr	r2, [pc, #496]	; (af7c <set_arm_clock+0x210>)
    ad8c:	subs	r3, r0, r3
    ad8e:	udiv	r3, r3, r2
    ad92:	movs	r2, #25
    ad94:	muls	r3, r2
    ad96:	movw	r2, #1575	; 0x627
    ad9a:	addw	r3, r3, #1250	; 0x4e2
    ad9e:	cmp	r3, r2
    ada0:	it	cs
    ada2:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ada4:	ldr	r6, [pc, #456]	; (af70 <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ada6:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    adaa:	ldr.w	r2, [r6, #128]	; 0x80
    adae:	orr.w	r2, r2, #192	; 0xc0
    adb2:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    adb6:	movs	r2, #25
    adb8:	udiv	r2, r3, r2
    adbc:	and.w	r3, r4, #31
    adc0:	cmp	r3, r2
    adc2:	bcs.n	add4 <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    adc4:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    adc8:	ldr	r3, [pc, #436]	; (af80 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    adca:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    adcc:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    adce:	ldr	r6, [r3, #0]
    add0:	cmp	r6, #0
    add2:	bge.n	adce <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    add4:	ands.w	r3, r1, #33554432	; 0x2000000
    add8:	bne.n	ae2c <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    adda:	ldr	r6, [pc, #424]	; (af84 <set_arm_clock+0x218>)
    addc:	ldr	r7, [pc, #424]	; (af88 <set_arm_clock+0x21c>)
    adde:	ldr	r6, [r6, #16]
    ade0:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    ade2:	cmp	r6, r7
    ade4:	itee	eq
    ade6:	moveq	r6, #3
    ade8:	movne	r6, #0
    adea:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    adec:	lsls	r7, r6, #27
    adee:	eor.w	r6, r1, r6, lsl #27
    adf2:	tst.w	r6, #939524096	; 0x38000000
    adf6:	beq.n	ae02 <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    adf8:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    adfc:	ldr	r6, [pc, #368]	; (af70 <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    adfe:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    ae00:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    ae02:	lsls	r6, r3, #12
    ae04:	eor.w	r3, r5, r3, lsl #12
    ae08:	tst.w	r3, #12288	; 0x3000
    ae0c:	beq.n	ae1e <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    ae0e:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    ae12:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    ae14:	ldr	r5, [pc, #344]	; (af70 <set_arm_clock+0x204>)
    ae16:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    ae18:	ldr	r3, [r5, #72]	; 0x48
    ae1a:	lsls	r6, r3, #28
    ae1c:	bmi.n	ae18 <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    ae1e:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    ae22:	ldr	r3, [pc, #332]	; (af70 <set_arm_clock+0x204>)
    ae24:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ae26:	ldr	r5, [r3, #72]	; 0x48
    ae28:	lsls	r5, r5, #26
    ae2a:	bmi.n	ae26 <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    ae2c:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ae2e:	ldr	r7, [pc, #348]	; (af8c <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    ae30:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    ae32:	mul.w	r3, r6, r5
    ae36:	muls	r3, r0
    ae38:	cmp	r3, r7
    ae3a:	bls.w	af58 <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ae3e:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    ae42:	ldr	r0, [pc, #332]	; (af90 <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ae44:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    ae48:	cmp	r3, r0
    ae4a:	ldr	r0, [pc, #328]	; (af94 <set_arm_clock+0x228>)
    ae4c:	bhi.w	af6c <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ae50:	udiv	r3, r3, r0
    ae54:	cmp	r3, #54	; 0x36
    ae56:	it	cc
    ae58:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ae5a:	ldr	r7, [pc, #296]	; (af84 <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    ae5c:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ae5e:	ldr.w	lr, [pc, #344]	; afb8 <set_arm_clock+0x24c>
    ae62:	ldr.w	ip, [r7]
    ae66:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ae6a:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    ae6e:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ae72:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ae76:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    ae78:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ae7c:	beq.n	ae92 <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    ae7e:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    ae82:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    ae86:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    ae8a:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    ae8c:	ldr	r3, [r7, #0]
    ae8e:	cmp	r3, #0
    ae90:	bge.n	ae8c <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    ae92:	ldr	r3, [pc, #220]	; (af70 <set_arm_clock+0x204>)
    ae94:	subs	r5, #1
    ae96:	ldr	r7, [r3, #16]
    ae98:	and.w	r7, r7, #7
    ae9c:	cmp	r7, r5
    ae9e:	beq.n	aea8 <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    aea0:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    aea2:	ldr	r5, [r3, #72]	; 0x48
    aea4:	lsls	r7, r5, #15
    aea6:	bmi.n	aea2 <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aea8:	subs	r3, r6, #1
    aeaa:	lsls	r5, r3, #10
    aeac:	eor.w	r3, r1, r3, lsl #10
    aeb0:	tst.w	r3, #7168	; 0x1c00
    aeb4:	beq.n	aeca <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    aeb6:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    aeba:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    aebe:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    aec0:	ldr	r3, [pc, #172]	; (af70 <set_arm_clock+0x204>)
    aec2:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    aec4:	ldr	r5, [r3, #72]	; 0x48
    aec6:	lsls	r5, r5, #30
    aec8:	bmi.n	aec4 <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aeca:	ldr	r3, [pc, #204]	; (af98 <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    aecc:	ldr	r5, [pc, #204]	; (af9c <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aece:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    aed0:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aed2:	itet	ls
    aed4:	ldrls	r5, [pc, #200]	; (afa0 <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    aed6:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aed8:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    aedc:	subs	r6, r3, #1
    aede:	lsls	r5, r6, #8
    aee0:	eor.w	r6, r1, r6, lsl #8
    aee4:	tst.w	r6, #768	; 0x300
    aee8:	ldr	r6, [pc, #132]	; (af70 <set_arm_clock+0x204>)
    aeea:	beq.n	aef8 <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    aeec:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    aef0:	and.w	r5, r5, #768	; 0x300
    aef4:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    aef6:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    aef8:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    aefa:	ldr	r5, [pc, #116]	; (af70 <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    aefc:	bic.w	r1, r1, #33554432	; 0x2000000
    af00:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    af02:	ldr	r1, [r5, #72]	; 0x48
    af04:	lsls	r1, r1, #26
    af06:	bmi.n	af02 <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    af08:	ldr	r1, [pc, #152]	; (afa4 <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    af0a:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    af0e:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    af10:	ldr	r1, [pc, #148]	; (afa8 <set_arm_clock+0x23c>)
    af12:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    af14:	mov.w	r3, #4294967295
    af18:	ldr	r1, [pc, #144]	; (afac <set_arm_clock+0x240>)
    af1a:	udiv	r1, r0, r1
    af1e:	udiv	r3, r3, r1
    af22:	ldr	r1, [pc, #140]	; (afb0 <set_arm_clock+0x244>)
    af24:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    af26:	and.w	r3, r4, #31
    af2a:	cmp	r2, r3
    af2c:	bcs.n	af3e <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    af2e:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    af32:	ldr	r3, [pc, #76]	; (af80 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    af34:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    af36:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    af38:	ldr	r2, [r3, #0]
    af3a:	cmp	r2, #0
    af3c:	bge.n	af38 <set_arm_clock+0x1cc>
	}

	return frequency;
}
    af3e:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    af40:	ldr	r6, [pc, #112]	; (afb4 <set_arm_clock+0x248>)
    af42:	movw	r3, #1150	; 0x47e
    af46:	movw	r2, #950	; 0x3b6
    af4a:	cmp	r0, r6
    af4c:	it	ls
    af4e:	movls	r3, r2
    af50:	b.n	ada4 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    af52:	movw	r3, #1250	; 0x4e2
    af56:	b.n	ada4 <set_arm_clock+0x38>
		if (div_arm < 8) {
    af58:	cmp	r5, #8
    af5a:	beq.n	af60 <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    af5c:	adds	r5, #1
    af5e:	b.n	ae32 <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    af60:	cmp	r6, #4
    af62:	bhi.w	ae3e <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    af66:	adds	r6, #1
				div_arm = 1;
    af68:	movs	r5, #1
    af6a:	b.n	ae32 <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    af6c:	movs	r3, #108	; 0x6c
    af6e:	b.n	ae5a <set_arm_clock+0xee>
    af70:	.word	0x400fc000
    af74:	.word	0x1f78a400
    af78:	.word	0x23c34600
    af7c:	.word	0x01ab3f00
    af80:	.word	0x40080000
    af84:	.word	0x400d8000
    af88:	.word	0x80003040
    af8c:	.word	0x269fb1ff
    af90:	.word	0x4df67eff
    af94:	.word	0x00b71b00
    af98:	.word	0x08f0d17f
    af9c:	.word	0x2cb4177f
    afa0:	.word	0x08f0d180
    afa4:	.word	0x20008a60
    afa8:	.word	0x20008a5c
    afac:	.word	0x000f4240
    afb0:	.word	0x200102b8
    afb4:	.word	0x016e3600
    afb8:	.word	0x8001307f

0000afbc <endpoint0_receive>:
{
    afbc:	push	{r4, r5, lr}
    afbe:	ldr	r4, [pc, #136]	; (b048 <endpoint0_receive+0x8c>)
	if (len > 0) {
    afc0:	cbz	r1, b004 <endpoint0_receive+0x48>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    afc2:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    afc4:	ldr	r3, [pc, #132]	; (b04c <endpoint0_receive+0x90>)
    afc6:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    afc8:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    afcc:	str	r0, [r3, #8]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    afce:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    afd0:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    afd2:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    afd6:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    afd8:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    afda:	add.w	r1, r0, #8192	; 0x2000
    afde:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    afe0:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    afe4:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    afe8:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    afea:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    afec:	movs	r3, #0
    afee:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    aff0:	ldr	r3, [pc, #92]	; (b050 <endpoint0_receive+0x94>)
    aff2:	ldr.w	r1, [r3, #432]	; 0x1b0
    aff6:	orrs	r1, r5
    aff8:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    affc:	ldr.w	r1, [r3, #432]	; 0x1b0
    b000:	cmp	r1, #0
    b002:	bne.n	affc <endpoint0_receive+0x40>
	endpoint0_transfer_ack.next = 1;
    b004:	ldr	r3, [pc, #76]	; (b054 <endpoint0_receive+0x98>)
    b006:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b008:	cmp	r2, #0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b00a:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    b00e:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b010:	movw	r1, #32896	; 0x8080
    b014:	it	eq
    b016:	moveq	r1, #128	; 0x80
    b018:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    b01a:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    b01c:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    b020:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b022:	mov.w	r1, #65537	; 0x10001
    b026:	ldr	r3, [pc, #40]	; (b050 <endpoint0_receive+0x94>)
    b028:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b02c:	ldr.w	r1, [r3, #432]	; 0x1b0
    b030:	orr.w	r1, r1, #65536	; 0x10000
    b034:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b038:	ldr	r1, [pc, #28]	; (b058 <endpoint0_receive+0x9c>)
    b03a:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    b03c:	ldr.w	r2, [r3, #432]	; 0x1b0
    b040:	cmp	r2, #0
    b042:	bne.n	b03c <endpoint0_receive+0x80>
}
    b044:	pop	{r4, r5, pc}
    b046:	nop
    b048:	.word	0x20000000
    b04c:	.word	0x20009ae0
    b050:	.word	0x402e0000
    b054:	.word	0x20009ac0
    b058:	.word	0x20010168

0000b05c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    b05c:	ldr	r3, [r0, #56]	; 0x38
{
    b05e:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    b060:	cbz	r3, b06a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    b062:	ldr	r3, [r2, #4]
    b064:	orr.w	r3, r3, #32768	; 0x8000
    b068:	str	r3, [r2, #4]
	}
	__disable_irq();
    b06a:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    b06c:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    b06e:	ldr	r3, [pc, #96]	; (b0d0 <schedule_transfer+0x74>)
    b070:	cbz	r4, b0bc <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    b072:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    b074:	ldr.w	r4, [r3, #432]	; 0x1b0
    b078:	tst	r4, r1
    b07a:	bne.n	b0b6 <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    b07c:	ldr	r6, [pc, #84]	; (b0d4 <schedule_transfer+0x78>)
    b07e:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    b080:	ldr.w	r4, [r3, #320]	; 0x140
    b084:	orr.w	r4, r4, #16384	; 0x4000
    b088:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    b08c:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    b090:	ldr.w	r5, [r3, #320]	; 0x140
    b094:	lsls	r5, r5, #17
    b096:	bmi.n	b0a2 <schedule_transfer+0x46>
    b098:	ldr	r5, [r6, #4]
    b09a:	subs	r5, r5, r7
    b09c:	cmp.w	r5, #2400	; 0x960
    b0a0:	bcc.n	b080 <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    b0a2:	ands	r4, r1
    b0a4:	bne.n	b0b6 <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    b0a6:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    b0aa:	ldr	r4, [pc, #36]	; (b0d0 <schedule_transfer+0x74>)
    b0ac:	ldr.w	r3, [r4, #432]	; 0x1b0
    b0b0:	orrs	r3, r1
    b0b2:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    b0b6:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    b0b8:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    b0ba:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    b0bc:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    b0c0:	ldr.w	r4, [r3, #432]	; 0x1b0
    b0c4:	orrs	r1, r4
    b0c6:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    b0ca:	str	r2, [r0, #48]	; 0x30
    b0cc:	b.n	b0b6 <schedule_transfer+0x5a>
    b0ce:	nop
    b0d0:	.word	0x402e0000
    b0d4:	.word	0xe0001000

0000b0d8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    b0d8:	push	{r4, r5, r6, lr}
    b0da:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    b0dc:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    b0de:	cbz	r0, b0f0 <run_callbacks+0x18>
    b0e0:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    b0e2:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    b0e4:	ldr	r3, [r2, #4]
    b0e6:	ands.w	r3, r3, #128	; 0x80
    b0ea:	beq.n	b0f2 <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    b0ec:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    b0ee:	cbnz	r5, b100 <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    b0f0:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    b0f2:	ldr	r2, [r2, #0]
		count++;
    b0f4:	adds	r5, #1
		if ((uint32_t)t == 1) {
    b0f6:	cmp	r2, #1
    b0f8:	bne.n	b0e4 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    b0fa:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    b0fe:	b.n	b0ee <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    b100:	ldr	r6, [r0, #0]
		count--;
    b102:	subs	r5, #1
		ep->callback_function(first);
    b104:	ldr	r3, [r4, #56]	; 0x38
    b106:	blx	r3
		first = next;
    b108:	mov	r0, r6
    b10a:	b.n	b0ee <run_callbacks+0x16>

0000b10c <usb_endpoint_config>:
{
    b10c:	push	{r4, r5, r6, lr}
    b10e:	mov	r4, r0
    b110:	mov	r6, r1
    b112:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    b114:	movs	r1, #0
    b116:	movs	r2, #60	; 0x3c
    b118:	adds	r0, #4
    b11a:	bl	a528 <memset>
	qh->next = 1; // Terminate bit = 1
    b11e:	movs	r3, #1
	qh->config = config;
    b120:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    b122:	str	r3, [r4, #8]
	qh->callback_function = callback;
    b124:	str	r5, [r4, #56]	; 0x38
}
    b126:	pop	{r4, r5, r6, pc}

0000b128 <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    b128:	ldr	r2, [pc, #124]	; (b1a8 <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    b12a:	push	{r4, lr}
	if (len > 0) {
    b12c:	cbz	r1, b172 <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b12e:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    b130:	ldr	r3, [pc, #120]	; (b1ac <endpoint0_transmit.constprop.0+0x84>)
    b132:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b134:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b138:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    b13a:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b13c:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b13e:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    b142:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b144:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b146:	add.w	r1, r0, #8192	; 0x2000
    b14a:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b14c:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b150:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b154:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b156:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    b158:	movs	r3, #0
    b15a:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    b15c:	ldr	r3, [pc, #80]	; (b1b0 <endpoint0_transmit.constprop.0+0x88>)
    b15e:	ldr.w	r1, [r3, #432]	; 0x1b0
    b162:	orr.w	r1, r1, #65536	; 0x10000
    b166:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    b16a:	ldr.w	r1, [r3, #432]	; 0x1b0
    b16e:	cmp	r1, #0
    b170:	bne.n	b16a <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    b172:	ldr	r3, [pc, #64]	; (b1b4 <endpoint0_transmit.constprop.0+0x8c>)
    b174:	movs	r1, #1
    b176:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b178:	movs	r1, #128	; 0x80
    b17a:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    b17c:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    b17e:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    b182:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b184:	mov.w	r2, #65537	; 0x10001
    b188:	ldr	r3, [pc, #36]	; (b1b0 <endpoint0_transmit.constprop.0+0x88>)
    b18a:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    b18e:	ldr.w	r2, [r3, #432]	; 0x1b0
    b192:	orr.w	r2, r2, #1
    b196:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    b19a:	ldr	r2, [pc, #28]	; (b1b8 <endpoint0_transmit.constprop.0+0x90>)
    b19c:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    b19e:	ldr.w	r2, [r3, #432]	; 0x1b0
    b1a2:	cmp	r2, #0
    b1a4:	bne.n	b19e <endpoint0_transmit.constprop.0+0x76>
}
    b1a6:	pop	{r4, pc}
    b1a8:	.word	0x20000000
    b1ac:	.word	0x20009ae0
    b1b0:	.word	0x402e0000
    b1b4:	.word	0x20009ac0
    b1b8:	.word	0x20010168

0000b1bc <usb_start_sof_interrupts>:
	__disable_irq();
    b1bc:	cpsid	i
	sof_usage |= (1 << interface);
    b1be:	ldr	r2, [pc, #40]	; (b1e8 <usb_start_sof_interrupts+0x2c>)
    b1c0:	movs	r3, #1
    b1c2:	lsl.w	r0, r3, r0
    b1c6:	ldrb	r3, [r2, #0]
    b1c8:	orrs	r0, r3
    b1ca:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    b1cc:	ldr	r2, [pc, #28]	; (b1ec <usb_start_sof_interrupts+0x30>)
    b1ce:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    b1d2:	lsls	r1, r3, #24
    b1d4:	bmi.n	b1e2 <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b1d6:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b1d8:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b1da:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b1de:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    b1e2:	cpsie	i
}
    b1e4:	bx	lr
    b1e6:	nop
    b1e8:	.word	0x20010bd3
    b1ec:	.word	0x402e0000

0000b1f0 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    b1f0:	movs	r3, #1
    b1f2:	ldr	r2, [pc, #32]	; (b214 <usb_stop_sof_interrupts+0x24>)
    b1f4:	lsl.w	r0, r3, r0
    b1f8:	ldrb	r3, [r2, #0]
    b1fa:	bic.w	r0, r3, r0
    b1fe:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    b200:	cbnz	r0, b210 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    b202:	ldr	r2, [pc, #20]	; (b218 <usb_stop_sof_interrupts+0x28>)
    b204:	ldr.w	r3, [r2, #328]	; 0x148
    b208:	bic.w	r3, r3, #128	; 0x80
    b20c:	str.w	r3, [r2, #328]	; 0x148
}
    b210:	bx	lr
    b212:	nop
    b214:	.word	0x20010bd3
    b218:	.word	0x402e0000

0000b21c <usb_isr>:
{
    b21c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    b220:	ldr	r4, [pc, #676]	; (b4c8 <usb_isr+0x2ac>)
    b222:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    b226:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    b228:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    b22c:	bmi.n	b294 <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    b22e:	lsls	r1, r6, #25
    b230:	bmi.w	b65a <usb_isr+0x43e>
	if (status & USB_USBSTS_TI0) {
    b234:	lsls	r4, r6, #7
    b236:	bpl.n	b240 <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    b238:	ldr	r3, [pc, #656]	; (b4cc <usb_isr+0x2b0>)
    b23a:	ldr	r3, [r3, #0]
    b23c:	cbz	r3, b240 <usb_isr+0x24>
    b23e:	blx	r3
	if (status & USB_USBSTS_TI1) {
    b240:	lsls	r0, r6, #6
    b242:	bpl.n	b24c <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    b244:	ldr	r3, [pc, #648]	; (b4d0 <usb_isr+0x2b4>)
    b246:	ldr	r3, [r3, #0]
    b248:	cbz	r3, b24c <usb_isr+0x30>
    b24a:	blx	r3
	if (status & USB_USBSTS_PCI) {
    b24c:	lsls	r1, r6, #29
    b24e:	bpl.n	b262 <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    b250:	ldr	r3, [pc, #628]	; (b4c8 <usb_isr+0x2ac>)
    b252:	ldr	r2, [pc, #640]	; (b4d4 <usb_isr+0x2b8>)
    b254:	ldr.w	r3, [r3, #388]	; 0x184
    b258:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    b25c:	it	ne
    b25e:	movne	r3, #1
			usb_high_speed = 0;
    b260:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b262:	ldr	r3, [pc, #612]	; (b4c8 <usb_isr+0x2ac>)
    b264:	ldr.w	r3, [r3, #328]	; 0x148
    b268:	lsls	r2, r3, #24
    b26a:	bpl.w	b68a <usb_isr+0x46e>
    b26e:	lsls	r3, r6, #24
    b270:	bpl.w	b68a <usb_isr+0x46e>
		if (usb_reboot_timer) {
    b274:	ldr	r2, [pc, #608]	; (b4d8 <usb_isr+0x2bc>)
    b276:	ldrb	r3, [r2, #0]
    b278:	cmp	r3, #0
    b27a:	beq.w	b68a <usb_isr+0x46e>
			if (--usb_reboot_timer == 0) {
    b27e:	subs	r3, #1
    b280:	uxtb	r3, r3
    b282:	strb	r3, [r2, #0]
    b284:	cmp	r3, #0
    b286:	bne.w	b68a <usb_isr+0x46e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    b28a:	movs	r0, #3
    b28c:	bl	b1f0 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    b290:	bl	17a00 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    b294:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b298:	ldr	r7, [pc, #576]	; (b4dc <usb_isr+0x2c0>)
		while (setupstatus) {
    b29a:	cmp	r3, #0
    b29c:	bne.n	b326 <usb_isr+0x10a>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    b29e:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    b2a2:	cmp	r5, #0
    b2a4:	beq.n	b22e <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    b2a6:	ldr	r2, [pc, #568]	; (b4e0 <usb_isr+0x2c4>)
			USB1_ENDPTCOMPLETE = completestatus;
    b2a8:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    b2ac:	ldr	r1, [r2, #0]
    b2ae:	tst	r5, r1
    b2b0:	beq.n	b2e8 <usb_isr+0xcc>
				endpoint0_notify_mask = 0;
    b2b2:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b2b4:	movw	r1, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    b2b8:	ldr	r2, [pc, #552]	; (b4e4 <usb_isr+0x2c8>)
    b2ba:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b2bc:	ldrh	r2, [r2, #0]
    b2be:	cmp	r2, r1
    b2c0:	bne.w	b61c <usb_isr+0x400>
    b2c4:	uxth	r3, r3
    b2c6:	cbnz	r3, b2e8 <usb_isr+0xcc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b2c8:	ldr	r2, [pc, #540]	; (b4e8 <usb_isr+0x2cc>)
    b2ca:	ldr	r3, [pc, #544]	; (b4ec <usb_isr+0x2d0>)
    b2cc:	ldr	r0, [r2, #0]
    b2ce:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    b2d0:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b2d2:	ldrb	r2, [r2, #6]
    b2d4:	str	r0, [r3, #0]
    b2d6:	strh	r1, [r3, #4]
    b2d8:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    b2da:	bne.n	b2e8 <usb_isr+0xcc>
			usb_start_sof_interrupts(NUM_INTERFACE);
    b2dc:	movs	r0, #3
    b2de:	bl	b1bc <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b2e2:	ldr	r3, [pc, #500]	; (b4d8 <usb_isr+0x2bc>)
    b2e4:	movs	r2, #80	; 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b2e6:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    b2e8:	ldr	r3, [pc, #516]	; (b4f0 <usb_isr+0x2d4>)
    b2ea:	ldr	r3, [r3, #0]
			if (completestatus) {
    b2ec:	ands	r5, r3
    b2ee:	beq.n	b22e <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    b2f0:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b2f2:	ldr.w	r8, [pc, #512]	; b4f4 <usb_isr+0x2d8>
					tx &= ~(1<<p);
    b2f6:	mov.w	r9, #1
				while (tx) {
    b2fa:	cmp	r4, #0
    b2fc:	bne.w	b63e <usb_isr+0x422>
				uint32_t rx = completestatus & 0xffff;
    b300:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    b302:	ldr	r7, [pc, #496]	; (b4f4 <usb_isr+0x2d8>)
					rx &= ~(1<<p);
    b304:	mov.w	r8, #1
				while(rx) {
    b308:	cmp	r5, #0
    b30a:	beq.n	b22e <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    b30c:	rbit	r4, r5
    b310:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    b314:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    b318:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    b31c:	bl	b0d8 <run_callbacks>
					rx &= ~(1<<p);
    b320:	bic.w	r5, r5, r4
    b324:	b.n	b308 <usb_isr+0xec>
			USB1_ENDPTSETUPSTAT = setupstatus;
    b326:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    b32a:	ldr	r3, [pc, #456]	; (b4f4 <usb_isr+0x2d8>)
				s.word2 = endpoint_queue_head[0].setup1;
    b32c:	ldrd	r5, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b330:	ldr.w	r2, [r4, #320]	; 0x140
    b334:	orr.w	r2, r2, #8192	; 0x2000
    b338:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    b33c:	ldr.w	r2, [r4, #320]	; 0x140
    b340:	lsls	r2, r2, #18
    b342:	bpl.n	b330 <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    b344:	ldr.w	r2, [r4, #320]	; 0x140
    b348:	bic.w	r2, r2, #8192	; 0x2000
    b34c:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b350:	mov.w	r2, #65537	; 0x10001
    b354:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    b358:	ldr.w	r2, [r4, #436]	; 0x1b4
    b35c:	ands.w	r8, r2, #65537	; 0x10001
    b360:	bne.n	b358 <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    b362:	uxth	r1, r5
    b364:	ldr	r2, [pc, #376]	; (b4e0 <usb_isr+0x2c4>)
	switch (setup.wRequestAndType) {
    b366:	cmp.w	r1, #2176	; 0x880
			endpoint0_notify_mask = 0;
    b36a:	str.w	r8, [r2]
	switch (setup.wRequestAndType) {
    b36e:	beq.w	b4aa <usb_isr+0x28e>
    b372:	bhi.n	b40a <usb_isr+0x1ee>
    b374:	movw	r2, #770	; 0x302
    b378:	cmp	r1, r2
    b37a:	beq.w	b54e <usb_isr+0x332>
    b37e:	bhi.n	b39e <usb_isr+0x182>
    b380:	cmp	r1, #130	; 0x82
    b382:	beq.w	b518 <usb_isr+0x2fc>
    b386:	cmp.w	r1, #258	; 0x102
    b38a:	beq.w	b574 <usb_isr+0x358>
    b38e:	cmp	r1, #128	; 0x80
    b390:	beq.w	b4ba <usb_isr+0x29e>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b394:	mov.w	r3, #65537	; 0x10001
    b398:	str.w	r3, [r4, #448]	; 0x1c0
    b39c:	b.n	b4a4 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    b39e:	cmp.w	r1, #1280	; 0x500
    b3a2:	beq.n	b48e <usb_isr+0x272>
    b3a4:	sub.w	r1, r1, #1664	; 0x680
    b3a8:	cmp	r1, #1
    b3aa:	bhi.n	b394 <usb_isr+0x178>
    b3ac:	ldr	r2, [pc, #328]	; (b4f8 <usb_isr+0x2dc>)
    b3ae:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b3b2:	uxth.w	ip, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b3b6:	ldr	r1, [r2, #4]
    b3b8:	cmp	r1, #0
    b3ba:	beq.n	b394 <usb_isr+0x178>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b3bc:	ldrh.w	lr, [r2]
    b3c0:	mov	r0, r5
    b3c2:	cmp	lr, r5
    b3c4:	bne.w	b5e4 <usb_isr+0x3c8>
    b3c8:	ldrh.w	lr, [r2, #2]
    b3cc:	cmp	lr, ip
    b3ce:	bne.w	b5e4 <usb_isr+0x3c8>
				if ((setup.wValue >> 8) == 3) {
    b3d2:	lsrs	r5, r5, #8
				if (datalen > setup.wLength) datalen = setup.wLength;
    b3d4:	mov.w	r8, r3, lsr #16
    b3d8:	ldr	r3, [pc, #288]	; (b4fc <usb_isr+0x2e0>)
				if ((setup.wValue >> 8) == 3) {
    b3da:	cmp	r5, #3
					datalen = *(list->addr);
    b3dc:	ite	eq
    b3de:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    b3e0:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b3e2:	cmp	r8, r2
    b3e4:	it	cs
    b3e6:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    b3e8:	cmp.w	r0, #512	; 0x200
    b3ec:	bne.w	b596 <usb_isr+0x37a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    b3f0:	ldr	r2, [pc, #224]	; (b4d4 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b3f2:	ldr	r1, [pc, #268]	; (b500 <usb_isr+0x2e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    b3f4:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b3f6:	mov	r2, r8
    b3f8:	ldr	r0, [pc, #264]	; (b504 <usb_isr+0x2e8>)
    b3fa:	cmp	r5, #0
    b3fc:	it	ne
    b3fe:	movne	r1, r0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b400:	mov	r0, r3
    b402:	bl	a56c <memcpy>
    b406:	mov	r3, r0
    b408:	b.n	b5b8 <usb_isr+0x39c>
	switch (setup.wRequestAndType) {
    b40a:	movw	r2, #8993	; 0x2321
    b40e:	cmp	r1, r2
    b410:	beq.n	b454 <usb_isr+0x238>
    b412:	bhi.n	b460 <usb_isr+0x244>
    b414:	movw	r2, #8225	; 0x2021
    b418:	cmp	r1, r2
    b41a:	beq.w	b602 <usb_isr+0x3e6>
    b41e:	movw	r2, #8737	; 0x2221
    b422:	cmp	r1, r2
    b424:	beq.w	b5e8 <usb_isr+0x3cc>
    b428:	cmp.w	r1, #2304	; 0x900
    b42c:	bne.n	b394 <usb_isr+0x178>
		usb_configuration = setup.wValue;
    b42e:	ldr	r3, [pc, #216]	; (b508 <usb_isr+0x2ec>)
    b430:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b434:	mov.w	r2, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    b438:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b43a:	ldr	r3, [pc, #208]	; (b50c <usb_isr+0x2f0>)
    b43c:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b440:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b444:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    b448:	str.w	r3, [r4, #468]	; 0x1d4
		usb_serial_configure();
    b44c:	bl	a83c <usb_serial_configure>
		usb_mtp_configure();
    b450:	bl	c45c <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    b454:	movs	r2, #0
    b456:	mov	r1, r2
    b458:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b45a:	bl	afbc <endpoint0_receive>
			return;
    b45e:	b.n	b4a4 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    b460:	movw	r2, #25633	; 0x6421
    b464:	cmp	r1, r2
    b466:	beq.w	b616 <usb_isr+0x3fa>
    b46a:	movw	r2, #26529	; 0x67a1
    b46e:	cmp	r1, r2
    b470:	bne.n	b394 <usb_isr+0x178>
		if (setup.wLength >= 4) {
    b472:	cmp.w	r3, #262144	; 0x40000
    b476:	bcc.n	b394 <usb_isr+0x178>
			endpoint0_buffer[2] = usb_mtp_status;
    b478:	ldr	r3, [pc, #148]	; (b510 <usb_isr+0x2f4>)
			endpoint0_buffer[0] = 4;
    b47a:	movs	r1, #4
    b47c:	ldr	r0, [pc, #104]	; (b4e8 <usb_isr+0x2cc>)
			endpoint0_buffer[2] = usb_mtp_status;
    b47e:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    b480:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    b482:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    b484:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    b486:	strb.w	r8, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    b48a:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    b48c:	b.n	b4b4 <usb_isr+0x298>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b48e:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    b490:	mov	r2, r8
    b492:	mov	r1, r8
    b494:	mov	r0, r8
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b496:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    b498:	bl	afbc <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b49c:	orr.w	r5, r5, #16777216	; 0x1000000
    b4a0:	str.w	r5, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b4a4:	ldr.w	r3, [r4, #428]	; 0x1ac
    b4a8:	b.n	b29a <usb_isr+0x7e>
		reply_buffer[0] = usb_configuration;
    b4aa:	ldr	r3, [pc, #92]	; (b508 <usb_isr+0x2ec>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b4ac:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    b4ae:	ldr	r0, [pc, #100]	; (b514 <usb_isr+0x2f8>)
    b4b0:	ldrb	r3, [r3, #0]
    b4b2:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b4b4:	bl	b128 <endpoint0_transmit.constprop.0>
				return;
    b4b8:	b.n	b4a4 <usb_isr+0x288>
		reply_buffer[0] = 0;
    b4ba:	ldr	r0, [pc, #88]	; (b514 <usb_isr+0x2f8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    b4bc:	movs	r1, #2
		reply_buffer[0] = 0;
    b4be:	strb.w	r8, [r0]
		reply_buffer[1] = 0;
    b4c2:	strb.w	r8, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    b4c6:	b.n	b4b4 <usb_isr+0x298>
    b4c8:	.word	0x402e0000
    b4cc:	.word	0x20010970
    b4d0:	.word	0x20010974
    b4d4:	.word	0x20010bda
    b4d8:	.word	0x20010bdb
    b4dc:	.word	0x402e01c0
    b4e0:	.word	0x20010168
    b4e4:	.word	0x2000c1c0
    b4e8:	.word	0x20010baf
    b4ec:	.word	0x20010964
    b4f0:	.word	0x2001016c
    b4f4:	.word	0x20000000
    b4f8:	.word	0x20007824
    b4fc:	.word	0x20205000
    b500:	.word	0x60002650
    b504:	.word	0x600026b9
    b508:	.word	0x20010bd9
    b50c:	.word	0x00cc0002
    b510:	.word	0x20009423
    b514:	.word	0x20010bb9
		endpoint = setup.wIndex & 0x7F;
    b518:	uxth	r0, r3
		if (endpoint > 7) break;
    b51a:	ands.w	r3, r3, #120	; 0x78
    b51e:	bne.w	b394 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b522:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b526:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b528:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    b52c:	ldr	r2, [pc, #352]	; (b690 <usb_isr+0x474>)
    b52e:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    b530:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b532:	bpl.n	b548 <usb_isr+0x32c>
    b534:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    b538:	it	ne
    b53a:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    b53c:	mov.w	r1, #2
    b540:	ldr	r0, [pc, #332]	; (b690 <usb_isr+0x474>)
			reply_buffer[0] = 1;
    b542:	it	ne
    b544:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b546:	b.n	b4b4 <usb_isr+0x298>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b548:	tst.w	r1, #1
    b54c:	b.n	b538 <usb_isr+0x31c>
		if (endpoint > 7) break;
    b54e:	tst.w	r3, #120	; 0x78
    b552:	uxth	r2, r3
    b554:	bne.w	b394 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b558:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    b55c:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b560:	ldr.w	r2, [r7, r3, lsl #2]
    b564:	ite	ne
    b566:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b56a:	orreq.w	r2, r2, #1
    b56e:	str.w	r2, [r7, r3, lsl #2]
    b572:	b.n	b454 <usb_isr+0x238>
		if (endpoint > 7) break;
    b574:	tst.w	r3, #120	; 0x78
    b578:	uxth	r2, r3
    b57a:	bne.w	b394 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b57e:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    b582:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b586:	ldr.w	r2, [r7, r3, lsl #2]
    b58a:	ite	ne
    b58c:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b590:	biceq.w	r2, r2, #1
    b594:	b.n	b56e <usb_isr+0x352>
				} else if (setup.wValue == 0x700) {
    b596:	cmp.w	r0, #1792	; 0x700
    b59a:	bne.n	b5e0 <usb_isr+0x3c4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b59c:	ldr	r2, [pc, #244]	; (b694 <usb_isr+0x478>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b59e:	ldr	r0, [pc, #248]	; (b698 <usb_isr+0x47c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    b5a0:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b5a2:	mov	r2, r8
    b5a4:	ldr	r1, [pc, #244]	; (b69c <usb_isr+0x480>)
    b5a6:	cmp	r5, #0
    b5a8:	it	ne
    b5aa:	movne	r1, r0
    b5ac:	mov	r0, r3
    b5ae:	bl	a56c <memcpy>
					usb_descriptor_buffer[1] = 7;
    b5b2:	movs	r2, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    b5b4:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    b5b6:	strb	r2, [r0, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b5b8:	bic.w	r5, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b5bc:	add.w	r0, r3, r8
	asm("dsb");
    b5c0:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b5c4:	mov.w	r3, #3758153728	; 0xe000e000
    b5c8:	str.w	r5, [r3, #3952]	; 0xf70
		location += 32;
    b5cc:	adds	r5, #32
	} while (location < end_addr);
    b5ce:	cmp	r0, r5
    b5d0:	bhi.n	b5c8 <usb_isr+0x3ac>
	asm("dsb");
    b5d2:	dsb	sy
	asm("isb");
    b5d6:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b5da:	ldr	r0, [pc, #196]	; (b6a0 <usb_isr+0x484>)
    b5dc:	mov	r1, r8
    b5de:	b.n	b4b4 <usb_isr+0x298>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b5e0:	mov	r2, r8
    b5e2:	b.n	b400 <usb_isr+0x1e4>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b5e4:	adds	r2, #12
    b5e6:	b.n	b3b6 <usb_isr+0x19a>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b5e8:	uxth	r3, r3
    b5ea:	cmp	r3, #0
    b5ec:	bne.w	b454 <usb_isr+0x238>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b5f0:	ldr	r3, [pc, #176]	; (b6a4 <usb_isr+0x488>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b5f2:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b5f6:	ldr	r2, [r3, #0]
    b5f8:	ldr	r3, [pc, #172]	; (b6a8 <usb_isr+0x48c>)
    b5fa:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b5fc:	ldr	r3, [pc, #172]	; (b6ac <usb_isr+0x490>)
    b5fe:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    b600:	b.n	b454 <usb_isr+0x238>
		if (setup.wLength != 7) break;
    b602:	lsrs	r1, r3, #16
    b604:	cmp	r1, #7
		if (setup.wLength == 6) {
    b606:	bne.w	b394 <usb_isr+0x178>
			endpoint0_setupdata.bothwords = setupdata;
    b60a:	ldr	r2, [pc, #164]	; (b6b0 <usb_isr+0x494>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b60c:	ldr	r0, [pc, #164]	; (b6b4 <usb_isr+0x498>)
			endpoint0_setupdata.bothwords = setupdata;
    b60e:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b612:	movs	r2, #1
    b614:	b.n	b45a <usb_isr+0x23e>
		if (setup.wLength == 6) {
    b616:	lsrs	r1, r3, #16
    b618:	cmp	r1, #6
    b61a:	b.n	b606 <usb_isr+0x3ea>
	if (setup.wRequestAndType == 0x6421) {
    b61c:	movw	r3, #25633	; 0x6421
    b620:	cmp	r2, r3
    b622:	bne.w	b2e8 <usb_isr+0xcc>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    b626:	ldr	r3, [pc, #140]	; (b6b4 <usb_isr+0x498>)
    b628:	ldrb	r2, [r3, #0]
    b62a:	cmp	r2, #1
    b62c:	bne.w	b2e8 <usb_isr+0xcc>
    b630:	ldrb	r3, [r3, #1]
    b632:	cmp	r3, #64	; 0x40
    b634:	bne.w	b2e8 <usb_isr+0xcc>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b638:	ldr	r3, [pc, #124]	; (b6b8 <usb_isr+0x49c>)
    b63a:	movs	r2, #25
    b63c:	b.n	b2e6 <usb_isr+0xca>
					int p=__builtin_ctz(tx);
    b63e:	rbit	r7, r4
    b642:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b646:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    b64a:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b64e:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    b650:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b654:	bl	b0d8 <run_callbacks>
					tx &= ~(1<<p);
    b658:	b.n	b2fa <usb_isr+0xde>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b65a:	ldr	r3, [pc, #96]	; (b6bc <usb_isr+0x4a0>)
    b65c:	ldr.w	r2, [r3, #428]	; 0x1ac
    b660:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b664:	ldr.w	r2, [r3, #444]	; 0x1bc
    b668:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b66c:	ldr.w	r4, [r3, #432]	; 0x1b0
    b670:	cmp	r4, #0
    b672:	bne.n	b66c <usb_isr+0x450>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b674:	mov.w	r2, #4294967295
    b678:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b67c:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    b680:	bl	a838 <usb_serial_reset>
		endpointN_notify_mask = 0;
    b684:	ldr	r3, [pc, #56]	; (b6c0 <usb_isr+0x4a4>)
    b686:	str	r4, [r3, #0]
    b688:	b.n	b234 <usb_isr+0x18>
}
    b68a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b68e:	nop
    b690:	.word	0x20010bb9
    b694:	.word	0x20010bda
    b698:	.word	0x60002650
    b69c:	.word	0x600026b9
    b6a0:	.word	0x20205000
    b6a4:	.word	0x2001094c
    b6a8:	.word	0x2001096c
    b6ac:	.word	0x20010bd8
    b6b0:	.word	0x2000c1c0
    b6b4:	.word	0x20010baf
    b6b8:	.word	0x20009423
    b6bc:	.word	0x402e0000
    b6c0:	.word	0x2001016c

0000b6c4 <usb_config_rx>:
{
    b6c4:	push	{r4, r5, r6, lr}
    b6c6:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b6c8:	subs	r3, r0, #2
{
    b6ca:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b6cc:	cmp	r3, #3
    b6ce:	bhi.n	b6f8 <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b6d0:	clz	r4, r2
    b6d4:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b6d6:	ldr	r0, [pc, #36]	; (b6fc <usb_config_rx+0x38>)
    b6d8:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b6da:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b6dc:	add.w	r0, r0, r5, lsl #7
    b6e0:	orr.w	r1, r1, r4, lsl #29
    b6e4:	bl	b10c <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    b6e8:	cbz	r6, b6f8 <usb_config_rx+0x34>
    b6ea:	ldr	r2, [pc, #20]	; (b700 <usb_config_rx+0x3c>)
    b6ec:	movs	r3, #1
    b6ee:	lsl.w	r0, r3, r5
    b6f2:	ldr	r3, [r2, #0]
    b6f4:	orrs	r0, r3
    b6f6:	str	r0, [r2, #0]
}
    b6f8:	pop	{r4, r5, r6, pc}
    b6fa:	nop
    b6fc:	.word	0x20000000
    b700:	.word	0x2001016c

0000b704 <usb_config_tx>:
{
    b704:	push	{r4, r5, r6, lr}
    b706:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b708:	subs	r3, r0, #2
{
    b70a:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b70c:	cmp	r3, #3
    b70e:	bhi.n	b73a <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b710:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b714:	ldr	r0, [pc, #36]	; (b73c <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b716:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b718:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b71a:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b71c:	add.w	r0, r0, r4, lsl #7
    b720:	orr.w	r1, r1, r5, lsl #29
    b724:	adds	r0, #64	; 0x40
    b726:	bl	b10c <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b72a:	cbz	r6, b73a <usb_config_tx+0x36>
    b72c:	ldr	r2, [pc, #16]	; (b740 <usb_config_tx+0x3c>)
    b72e:	adds	r4, #16
    b730:	movs	r3, #1
    b732:	ldr	r1, [r2, #0]
    b734:	lsls	r3, r4
    b736:	orrs	r3, r1
    b738:	str	r3, [r2, #0]
}
    b73a:	pop	{r4, r5, r6, pc}
    b73c:	.word	0x20000000
    b740:	.word	0x2001016c

0000b744 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b744:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    b746:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    b748:	orr.w	r2, r2, #128	; 0x80
    b74c:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    b74e:	add.w	r2, r1, #4096	; 0x1000
    b752:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    b754:	add.w	r2, r1, #8192	; 0x2000
{
    b758:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    b75a:	str	r2, [r0, #16]
	transfer->next = 1;
    b75c:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    b75e:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    b762:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    b766:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    b768:	str	r2, [r0, #20]
	transfer->callback_param = param;
    b76a:	strd	r1, r3, [r0, #24]
}
    b76e:	pop	{r4, pc}

0000b770 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b770:	subs	r3, r0, #2
{
    b772:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b774:	cmp	r3, #3
    b776:	bhi.n	b78e <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b778:	ldr	r3, [pc, #20]	; (b790 <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    b77a:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b77e:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    b782:	movs	r3, #1
    b784:	adds	r0, #64	; 0x40
    b786:	lsl.w	r1, r3, r1
    b78a:	b.w	b05c <schedule_transfer>
}
    b78e:	bx	lr
    b790:	.word	0x20000000

0000b794 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b794:	subs	r3, r0, #2
{
    b796:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b798:	cmp	r3, #3
    b79a:	bhi.n	b7aa <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b79c:	movs	r1, #1
    b79e:	ldr	r3, [pc, #12]	; (b7ac <usb_receive+0x18>)
    b7a0:	lsls	r1, r0
    b7a2:	add.w	r0, r3, r0, lsl #7
    b7a6:	b.w	b05c <schedule_transfer>
}
    b7aa:	bx	lr
    b7ac:	.word	0x20000000

0000b7b0 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    b7b0:	ldr	r2, [pc, #32]	; (b7d4 <usb_transfer_status+0x24>)
{
    b7b2:	mov	r1, r0
	cmd = USB1_USBCMD;
    b7b4:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    b7b8:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    b7ba:	orr.w	r3, r3, #16384	; 0x4000
    b7be:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    b7c2:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    b7c4:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    b7c8:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    b7ca:	tst.w	r3, #16384	; 0x4000
    b7ce:	beq.n	b7b8 <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    b7d0:	bx	lr
    b7d2:	nop
    b7d4:	.word	0x402e0000

0000b7d8 <ultoa>:
{
    b7d8:	push	{r4, r5, r6, lr}
	int i=0, j;
    b7da:	movs	r4, #0
		digit = val % radix;
    b7dc:	udiv	r5, r0, r2
    b7e0:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b7e4:	uxtb	r3, r6
    b7e6:	cmp	r6, #9
    b7e8:	ite	ls
    b7ea:	addls	r3, #48	; 0x30
    b7ec:	addhi	r3, #55	; 0x37
		if (val == 0) break;
    b7ee:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b7f0:	uxtb	r3, r3
    b7f2:	strb	r3, [r1, r4]
		if (val == 0) break;
    b7f4:	bhi.n	b7fc <ultoa+0x24>
		i++;
    b7f6:	adds	r4, #1
		val /= radix;
    b7f8:	mov	r0, r5
		digit = val % radix;
    b7fa:	b.n	b7dc <ultoa+0x4>
	buf[i + 1] = 0;
    b7fc:	adds	r3, r1, r4
    b7fe:	movs	r2, #0
    b800:	subs	r0, r1, #1
    b802:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    b804:	subs	r5, r4, r2
    b806:	cmp	r2, r5
    b808:	blt.n	b80e <ultoa+0x36>
}
    b80a:	mov	r0, r1
    b80c:	pop	{r4, r5, r6, pc}
		t = buf[j];
    b80e:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    b812:	adds	r2, #1
		buf[j] = buf[i];
    b814:	ldrb	r6, [r3, #0]
    b816:	strb	r6, [r0, #0]
		buf[i] = t;
    b818:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    b81c:	b.n	b804 <ultoa+0x2c>
	...

0000b820 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    b820:	vcmp.f32	s0, s0
{
    b824:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    b828:	vmrs	APSR_nzcv, fpscr
	int awidth = abs(width);
    b82c:	eor.w	r5, r0, r0, asr #31
{
    b830:	mov	r7, r0
    b832:	mov	r6, r1
    b834:	mov	r4, r2
	int awidth = abs(width);
    b836:	sub.w	r5, r5, r0, asr #31
{
    b83a:	vpush	{d8}
    b83e:	vmov.f32	s16, s0
    b842:	sub	sp, #20
	if (isnanf(val)) {
    b844:	bvc.n	b8a4 <dtostrf+0x84>
		int ndigs = (val<0) ? 4 : 3;
    b846:	vcmpe.f32	s0, #0.0
    b84a:	vmrs	APSR_nzcv, fpscr
    b84e:	ite	mi
    b850:	movmi	r3, #4
    b852:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b854:	cmp	r3, r5
    b856:	ite	lt
    b858:	sublt	r5, r5, r3
    b85a:	movge	r5, #0
		if (width<0) {
    b85c:	cmp	r0, #0
    b85e:	bge.n	b86e <dtostrf+0x4e>
			while (awidth) {
				*buf++ = ' ';
    b860:	mov	r2, r5
    b862:	mov	r0, r4
    b864:	add	r4, r5
    b866:	movs	r5, #0
    b868:	movs	r1, #32
    b86a:	bl	a528 <memset>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b86e:	vmov	r3, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b872:	movs	r2, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b874:	cmp	r3, #0
    b876:	itt	lt
    b878:	movlt	r3, #45	; 0x2d
    b87a:	strblt.w	r3, [r4], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b87e:	movs	r3, #65	; 0x41
    b880:	strb	r2, [r4, #0]
    b882:	strb	r3, [r4, #1]
    b884:	adds	r3, r4, #3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
			*buf++ = ' ';
    b886:	mov	r0, r3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b888:	strb	r2, [r4, #2]
			*buf++ = ' ';
    b88a:	movs	r1, #32
    b88c:	mov	r2, r5
    b88e:	bl	a528 <memset>
			awidth--;
		}
		*buf = 0;
    b892:	movs	r2, #0
			*buf++ = ' ';
    b894:	mov	r3, r0
    b896:	add	r0, r5
		*buf = 0;
    b898:	strb	r2, [r3, r5]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    b89a:	add	sp, #20
    b89c:	vpop	{d8}
    b8a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (isinff(val)) {
    b8a4:	vabs.f32	s15, s0
    b8a8:	vldr	s14, [pc, #432]	; ba5c <dtostrf+0x23c>
    b8ac:	vcmp.f32	s15, s14
    b8b0:	vmrs	APSR_nzcv, fpscr
    b8b4:	ble.n	b8fc <dtostrf+0xdc>
		int ndigs = (val<0) ? 4 : 3;
    b8b6:	vcmpe.f32	s0, #0.0
    b8ba:	vmrs	APSR_nzcv, fpscr
    b8be:	ite	mi
    b8c0:	movmi	r3, #4
    b8c2:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b8c4:	cmp	r3, r5
    b8c6:	ite	lt
    b8c8:	sublt	r5, r5, r3
    b8ca:	movge	r5, #0
		if (width<0) {
    b8cc:	cmp	r0, #0
    b8ce:	bge.n	b8de <dtostrf+0xbe>
				*buf++ = ' ';
    b8d0:	mov	r2, r5
    b8d2:	mov	r0, r4
    b8d4:	add	r4, r5
    b8d6:	movs	r5, #0
    b8d8:	movs	r1, #32
    b8da:	bl	a528 <memset>
		if (val<0) *buf++ = '-';
    b8de:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b8e2:	movs	r2, #70	; 0x46
		if (val<0) *buf++ = '-';
    b8e4:	vmrs	APSR_nzcv, fpscr
    b8e8:	itt	mi
    b8ea:	movmi	r3, #45	; 0x2d
    b8ec:	strbmi.w	r3, [r4], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b8f0:	movs	r3, #73	; 0x49
    b8f2:	strb	r3, [r4, #0]
    b8f4:	movs	r3, #78	; 0x4e
    b8f6:	strb	r3, [r4, #1]
    b8f8:	adds	r3, r4, #3
    b8fa:	b.n	b886 <dtostrf+0x66>
	s = fcvtf(val, precision, &decpt, &sign);
    b8fc:	add	r2, sp, #8
    b8fe:	add	r1, sp, #4
    b900:	mov	r0, r6
    b902:	bl	e8c0 <fcvtf>
	if (precision == 0 && decpt == 0) {
    b906:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    b908:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    b90a:	orrs.w	r2, r6, r3
    b90e:	bne.n	b9ae <dtostrf+0x18e>
		s = (*s < '5') ? "0" : "1";
    b910:	ldrb	r1, [r0, #0]
    b912:	ldr	r3, [pc, #332]	; (ba60 <dtostrf+0x240>)
    b914:	ldr	r2, [pc, #332]	; (ba64 <dtostrf+0x244>)
    b916:	cmp	r1, #52	; 0x34
    b918:	ite	ls
    b91a:	movls	r8, r2
    b91c:	movhi	r8, r3
		decpt++;
    b91e:	movs	r3, #1
    b920:	str	r3, [sp, #4]
	reqd = strlen(s);
    b922:	mov	r0, r8
    b924:	bl	f580 <strlen>
	if (reqd > decpt) reqd++;
    b928:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    b92a:	mov	r5, r0
	if (reqd > decpt) reqd++;
    b92c:	cmp	r3, r0
    b92e:	it	lt
    b930:	addlt	r5, r0, #1
	if (decpt == 0) reqd++;
    b932:	cmp	r3, #0
    b934:	bne.n	b9be <dtostrf+0x19e>
    b936:	adds	r5, #1
	if (sign) reqd++;
    b938:	ldr.w	fp, [sp, #8]
    b93c:	cmp.w	fp, #0
    b940:	beq.n	b944 <dtostrf+0x124>
    b942:	adds	r5, #1
	pad = width - reqd;
    b944:	sub.w	sl, r7, r5
	e = p + reqd;
    b948:	add.w	r9, r4, r5
	if (pad > 0) {
    b94c:	cmp.w	sl, #0
    b950:	ble.n	ba06 <dtostrf+0x1e6>
		while (pad-- > 0) *p++ = ' ';
    b952:	mov	r2, sl
    b954:	movs	r1, #32
    b956:	mov	r0, r4
		e += pad;
    b958:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    b95a:	bl	a528 <memset>
    b95e:	add.w	r2, r4, sl
	if (sign) *p++ = '-';
    b962:	cmp.w	fp, #0
    b966:	beq.n	b96e <dtostrf+0x14e>
    b968:	movs	r3, #45	; 0x2d
    b96a:	strb.w	r3, [r2], #1
	if (decpt == 0 && precision > 0) {
    b96e:	ldr	r1, [sp, #4]
    b970:	cmp	r1, #0
    b972:	bne.n	ba0a <dtostrf+0x1ea>
    b974:	cbz	r6, b984 <dtostrf+0x164>
		*p++ = '0';
    b976:	mov	r3, r2
    b978:	movs	r1, #48	; 0x30
    b97a:	strb.w	r1, [r3], #2
		*p++ = '.';
    b97e:	movs	r1, #46	; 0x2e
    b980:	strb	r1, [r2, #1]
    b982:	mov	r2, r3
		if (--decpt == 0) *p++ = '.';
    b984:	movs	r0, #46	; 0x2e
	while (p < e) {
    b986:	cmp	r9, r2
		*p++ = *s++;
    b988:	mov	r3, r2
	while (p < e) {
    b98a:	bhi.n	ba40 <dtostrf+0x220>
	if (width < 0) {
    b98c:	cmp	r7, #0
    b98e:	bge.n	b9a6 <dtostrf+0x186>
		pad = (reqd + width) * -1;
    b990:	adds	r0, r5, r7
		while (pad-- > 0) *p++ = ' ';
    b992:	movs	r1, #32
		pad = (reqd + width) * -1;
    b994:	negs	r5, r0
		while (pad-- > 0) *p++ = ' ';
    b996:	mov	r0, r3
    b998:	bic.w	r5, r5, r5, asr #31
    b99c:	mov	r2, r5
    b99e:	bl	a528 <memset>
    b9a2:	mov	r3, r0
    b9a4:	add	r3, r5
	*p = 0;
    b9a6:	movs	r2, #0
	return buf;
    b9a8:	mov	r0, r4
	*p = 0;
    b9aa:	strb	r2, [r3, #0]
	return buf;
    b9ac:	b.n	b89a <dtostrf+0x7a>
	if (-decpt  > (int)precision) {
    b9ae:	negs	r3, r3
    b9b0:	cmp	r6, r3
		decpt = -precision;
    b9b2:	ittt	lt
    b9b4:	neglt	r3, r6
		s = "0";
    b9b6:	ldrlt.w	r8, [pc, #172]	; ba64 <dtostrf+0x244>
		decpt = -precision;
    b9ba:	strlt	r3, [sp, #4]
    b9bc:	b.n	b922 <dtostrf+0x102>
	if (decpt < 0 && precision > 0) {
    b9be:	bge.n	b938 <dtostrf+0x118>
    b9c0:	cmp	r6, #0
    b9c2:	beq.n	b938 <dtostrf+0x118>
		if (strlen(s) > precision + decpt) {
    b9c4:	add	r3, r6
		reqd = precision + 2;
    b9c6:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    b9c8:	cmp	r0, r3
    b9ca:	bls.n	b938 <dtostrf+0x118>
				val *= 10.0f;
    b9cc:	vmov.f32	s15, #36	; 0x41200000  10.0
    b9d0:	mov	r3, r6
    b9d2:	b.n	b9da <dtostrf+0x1ba>
    b9d4:	vmul.f32	s16, s16, s15
				newPrecision--;
    b9d8:	subs	r3, #1
			while (newPrecision > 0) {
    b9da:	cmp	r3, #0
    b9dc:	bgt.n	b9d4 <dtostrf+0x1b4>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b9de:	cmp	r6, #0
    b9e0:	add	r2, sp, #8
    b9e2:	add	r1, sp, #12
    b9e4:	vmov.f32	s0, s16
    b9e8:	ite	ge
    b9ea:	subge	r0, r6, r6
    b9ec:	movlt	r0, r6
    b9ee:	bl	e8c0 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b9f2:	ldr	r3, [sp, #4]
    b9f4:	ldr	r2, [sp, #12]
    b9f6:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b9f8:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b9fa:	subs	r2, r2, r3
    b9fc:	cmp	r2, r1
    b9fe:	itt	eq
    ba00:	addeq	r3, #1
    ba02:	streq	r3, [sp, #4]
    ba04:	b.n	b938 <dtostrf+0x118>
    ba06:	mov	r2, r4
    ba08:	b.n	b962 <dtostrf+0x142>
	else if (decpt < 0 && precision > 0) {
    ba0a:	bge.n	b984 <dtostrf+0x164>
    ba0c:	cmp	r6, #0
    ba0e:	beq.n	b984 <dtostrf+0x164>
		*p++ = '0';
    ba10:	mov	r3, r2
		*p++ = '.';
    ba12:	movs	r0, #46	; 0x2e
		*p++ = '0';
    ba14:	mov.w	ip, #48	; 0x30
		while ( decpt < 0 ) {
    ba18:	movs	r6, #0
		*p++ = '0';
    ba1a:	strb.w	ip, [r3], #2
		*p++ = '.';
    ba1e:	strb	r0, [r2, #1]
		while ( decpt < 0 ) {
    ba20:	rsb	r0, r1, #2
    ba24:	add	r2, r0
		*p++ = '.';
    ba26:	mov	r0, r3
		while ( decpt < 0 ) {
    ba28:	cmp	r0, r2
    ba2a:	bne.n	ba38 <dtostrf+0x218>
    ba2c:	subs	r2, r3, r1
    ba2e:	cmp	r6, #0
    ba30:	beq.n	b984 <dtostrf+0x164>
    ba32:	movs	r3, #0
    ba34:	str	r3, [sp, #4]
    ba36:	b.n	b984 <dtostrf+0x164>
			*p++ = '0';
    ba38:	movs	r6, #1
    ba3a:	strb.w	ip, [r0], #1
    ba3e:	b.n	ba28 <dtostrf+0x208>
		*p++ = *s++;
    ba40:	ldrb.w	r1, [r8], #1
    ba44:	strb.w	r1, [r3], #1
		if (p == e) break;
    ba48:	cmp	r9, r3
    ba4a:	beq.n	b98c <dtostrf+0x16c>
		if (--decpt == 0) *p++ = '.';
    ba4c:	ldr	r1, [sp, #4]
    ba4e:	subs	r1, #1
    ba50:	str	r1, [sp, #4]
    ba52:	cbnz	r1, ba58 <dtostrf+0x238>
    ba54:	adds	r3, r2, #2
    ba56:	strb	r0, [r2, #1]
			*p++ = '0';
    ba58:	mov	r2, r3
    ba5a:	b.n	b986 <dtostrf+0x166>
    ba5c:	.word	0x7f7fffff
    ba60:	.word	0x20007e55
    ba64:	.word	0x20007fb7

0000ba68 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    ba68:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ba6a:	ldr	r3, [pc, #52]	; (baa0 <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ba6c:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ba6e:	ldr	r6, [pc, #52]	; (baa4 <micros+0x3c>)
		scc = systick_cycle_count;
    ba70:	ldr	r5, [pc, #52]	; (baa8 <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ba72:	ldrex	r2, [r3]
		smc = systick_millis_count;
    ba76:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    ba78:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ba7a:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    ba7e:	cmp	r2, #0
    ba80:	bne.n	ba72 <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ba82:	ldr	r3, [pc, #40]	; (baac <micros+0x44>)
    ba84:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ba86:	ldr	r2, [pc, #40]	; (bab0 <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    ba88:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ba8a:	ldr	r2, [r2, #0]
    ba8c:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    ba90:	mov.w	r3, #1000	; 0x3e8
    ba94:	muls	r0, r3
	return usec;
}
    ba96:	cmp	r2, r3
    ba98:	ite	ls
    ba9a:	addls	r0, r0, r2
    ba9c:	addhi	r0, r0, r3
    ba9e:	pop	{r4, r5, r6, pc}
    baa0:	.word	0x20010950
    baa4:	.word	0x2001094c
    baa8:	.word	0x20010948
    baac:	.word	0xe0001000
    bab0:	.word	0x200102b8

0000bab4 <delay>:
{
    bab4:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    bab6:	mov	r4, r0
    bab8:	cbz	r0, badc <delay+0x28>
	start = micros();
    baba:	bl	ba68 <micros>
    babe:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    bac0:	bl	ba68 <micros>
    bac4:	subs	r0, r0, r5
    bac6:	cmp.w	r0, #1000	; 0x3e8
    baca:	bcs.n	bad2 <delay+0x1e>
		yield();
    bacc:	bl	c730 <yield>
		while ((micros() - start) >= 1000) {
    bad0:	b.n	bac0 <delay+0xc>
			if (--msec == 0) return;
    bad2:	subs	r4, #1
    bad4:	beq.n	badc <delay+0x28>
			start += 1000;
    bad6:	add.w	r5, r5, #1000	; 0x3e8
    bada:	b.n	bac0 <delay+0xc>
}
    badc:	pop	{r3, r4, r5, pc}
	...

0000bae0 <unused_interrupt_vector>:
	__disable_irq();
    bae0:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    bae2:	mrs	r3, IPSR
	info->ipsr = ipsr;
    bae6:	ldr	r4, [pc, #316]	; (bc24 <unused_interrupt_vector+0x144>)
    bae8:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    baec:	tst.w	lr, #4
    baf0:	ite	eq
    baf2:	mrseq	r2, MSP
    baf6:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    bafa:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    bafe:	ldr	r7, [pc, #296]	; (bc28 <unused_interrupt_vector+0x148>)
	while (p < end) {
    bb00:	ldr	r6, [pc, #296]	; (bc2c <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    bb02:	ldr.w	r1, [r3, #3368]	; 0xd28
    bb06:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    bb0a:	ldr.w	r1, [r3, #3372]	; 0xd2c
    bb0e:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    bb12:	ldr.w	r1, [r3, #3380]	; 0xd34
    bb16:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    bb1a:	ldr.w	r3, [r3, #3384]	; 0xd38
    bb1e:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    bb22:	ldr	r3, [r2, #24]
    bb24:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    bb28:	ldr	r3, [r2, #28]
    bb2a:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    bb2e:	bl	c1a4 <tempmonGetTemp>
    bb32:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    bb36:	bl	bcb0 <rtc_get>
	info->len = sizeof(*info) / 4;
    bb3a:	movs	r3, #11
	p = (uint32_t *)info;
    bb3c:	ldr	r2, [pc, #240]	; (bc30 <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    bb3e:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    bb42:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    bb46:	mov	r0, r2
	crc = 0xFFFFFFFF;
    bb48:	mov.w	r3, #4294967295
		crc ^= *p++;
    bb4c:	ldr	r1, [r2, #0]
    bb4e:	movs	r5, #32
    bb50:	adds	r2, #4
    bb52:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    bb54:	and.w	r1, r3, #1
    bb58:	subs	r5, #1
    bb5a:	mul.w	r1, r7, r1
    bb5e:	eor.w	r3, r1, r3, lsr #1
    bb62:	bne.n	bb54 <unused_interrupt_vector+0x74>
	while (p < end) {
    bb64:	cmp	r2, r6
    bb66:	bne.n	bb4c <unused_interrupt_vector+0x6c>
	info->crc = crc;
    bb68:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    bb6c:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    bb70:	mov.w	r3, #3758153728	; 0xe000e000
    bb74:	ldr	r2, [pc, #188]	; (bc34 <unused_interrupt_vector+0x154>)
    bb76:	str.w	r0, [r3, #3952]	; 0xf70
    bb7a:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    bb7e:	dsb	sy
	asm("isb");
    bb82:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    bb86:	ldr	r2, [pc, #176]	; (bc38 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    bb88:	ldr	r4, [pc, #176]	; (bc3c <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    bb8a:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    bb8c:	ldr	r0, [pc, #176]	; (bc40 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    bb8e:	orr.w	r3, r3, #12288	; 0x3000
    bb92:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    bb94:	movs	r3, #2
    bb96:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    bb98:	ldr	r3, [r2, #28]
    bb9a:	bic.w	r3, r3, #127	; 0x7f
    bb9e:	orr.w	r3, r3, #64	; 0x40
    bba2:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    bba4:	ldr	r3, [pc, #156]	; (bc44 <unused_interrupt_vector+0x164>)
    bba6:	ldr	r3, [r3, #0]
    bba8:	cmp	r3, r0
    bbaa:	bls.n	bbb0 <unused_interrupt_vector+0xd0>
    bbac:	bl	ad6c <set_arm_clock>
	PIT_MCR = 0;
    bbb0:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    bbb2:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    bbb4:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    bbb8:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    bbba:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    bbbe:	ldr	r3, [pc, #136]	; (bc48 <unused_interrupt_vector+0x168>)
    bbc0:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    bbc4:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    bbc8:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    bbcc:	ldr	r4, [pc, #108]	; (bc3c <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    bbce:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    bbd2:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    bbd6:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    bbda:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    bbde:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    bbe2:	ldr.w	r3, [r4, #268]	; 0x10c
    bbe6:	cbz	r3, bbf2 <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    bbe8:	adds	r5, #1
			PIT_TFLG0 = 1;
    bbea:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    bbee:	cmp	r5, #79	; 0x4f
    bbf0:	bhi.n	bbf8 <unused_interrupt_vector+0x118>
		usb_isr();
    bbf2:	bl	b21c <usb_isr>
		if (PIT_TFLG0) {
    bbf6:	b.n	bbe2 <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    bbf8:	ldr	r3, [pc, #80]	; (bc4c <unused_interrupt_vector+0x16c>)
    bbfa:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    bbfc:	ldr	r1, [pc, #80]	; (bc50 <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    bbfe:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    bc02:	mov.w	r2, #2147483648	; 0x80000000
    bc06:	ldr	r3, [pc, #76]	; (bc54 <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    bc08:	ldr	r0, [pc, #76]	; (bc58 <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    bc0a:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    bc0c:	ldr	r2, [pc, #44]	; (bc3c <unused_interrupt_vector+0x15c>)
    bc0e:	ldr.w	r3, [r2, #268]	; 0x10c
    bc12:	cbz	r3, bc20 <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    bc14:	mov.w	r3, #3758153728	; 0xe000e000
    bc18:	ldr	r2, [pc, #64]	; (bc5c <unused_interrupt_vector+0x17c>)
    bc1a:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    bc1e:	b.n	bc1e <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    bc20:	str	r0, [r1, #48]	; 0x30
    bc22:	b.n	bc0e <unused_interrupt_vector+0x12e>
    bc24:	.word	0x2027ff00
    bc28:	.word	0xedb88320
    bc2c:	.word	0x2027ffa8
    bc30:	.word	0x2027ff80
    bc34:	.word	0x2027ffa0
    bc38:	.word	0x400fc000
    bc3c:	.word	0x40084000
    bc40:	.word	0x0bcd3d80
    bc44:	.word	0x20008a60
    bc48:	.word	0x00249f00
    bc4c:	.word	0x402e0000
    bc50:	.word	0x400f8000
    bc54:	.word	0x400d9000
    bc58:	.word	0x0bad00f1
    bc5c:	.word	0x05fa0004

0000bc60 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    bc60:	ldr	r2, [pc, #32]	; (bc84 <_sbrk+0x24>)
{
    bc62:	push	{r3, lr}
    bc64:	mov	r3, r0
        char *prev = __brkval;
    bc66:	ldr	r0, [r2, #0]
        if (incr != 0) {
    bc68:	cbz	r3, bc7e <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    bc6a:	add	r3, r0
    bc6c:	ldr	r1, [pc, #24]	; (bc88 <_sbrk+0x28>)
    bc6e:	cmp	r3, r1
    bc70:	bls.n	bc80 <_sbrk+0x20>
                        errno = ENOMEM;
    bc72:	bl	f0dc <__errno>
    bc76:	movs	r3, #12
    bc78:	str	r3, [r0, #0]
                        return (void *)-1;
    bc7a:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    bc7e:	pop	{r3, pc}
                __brkval = prev + incr;
    bc80:	str	r3, [r2, #0]
    bc82:	b.n	bc7e <_sbrk+0x1e>
    bc84:	.word	0x20008e3c
    bc88:	.word	0x20280000

0000bc8c <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    bc8c:	movs	r0, #0
    bc8e:	bx	lr

0000bc90 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    bc90:	mov.w	r0, #4294967295
    bc94:	bx	lr

0000bc96 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    bc96:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    bc9a:	movs	r0, #0
	st->st_mode = S_IFCHR;
    bc9c:	str	r3, [r1, #4]
}
    bc9e:	bx	lr

0000bca0 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    bca0:	movs	r0, #1
    bca2:	bx	lr

0000bca4 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    bca4:	mov.w	r0, #4294967295
    bca8:	bx	lr

0000bcaa <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    bcaa:	wfi
    bcac:	b.n	bcaa <abort>
	...

0000bcb0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    bcb0:	ldr	r2, [pc, #28]	; (bcd0 <rtc_get+0x20>)
    bcb2:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    bcb4:	ldr	r3, [r2, #40]	; 0x28
{
    bcb6:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    bcb8:	mov	r4, r3
    bcba:	mov	r1, r0
    bcbc:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    bcbe:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    bcc0:	cmp	r4, r3
    bcc2:	bne.n	bcb8 <rtc_get+0x8>
    bcc4:	cmp	r1, r0
    bcc6:	bne.n	bcb8 <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    bcc8:	lsrs	r3, r3, #15
}
    bcca:	orr.w	r0, r3, r0, lsl #17
    bcce:	pop	{r4, pc}
    bcd0:	.word	0x400d4000

0000bcd4 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    bcd4:	ldr	r3, [pc, #60]	; (bd14 <rtc_set+0x40>)
    bcd6:	ldr	r2, [r3, #8]
    bcd8:	bic.w	r2, r2, #65537	; 0x10001
    bcdc:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    bcde:	ldr	r2, [r3, #8]
    bce0:	lsls	r2, r2, #31
    bce2:	bmi.n	bcde <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    bce4:	ldr	r2, [r3, #56]	; 0x38
    bce6:	bic.w	r2, r2, #1
    bcea:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    bcec:	ldr	r3, [pc, #36]	; (bd14 <rtc_set+0x40>)
    bcee:	ldr	r2, [r3, #56]	; 0x38
    bcf0:	lsls	r1, r2, #31
    bcf2:	bmi.n	bcee <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    bcf4:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    bcf6:	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    bcf8:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    bcfa:	str	r0, [r3, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    bcfc:	ldr	r2, [r3, #56]	; 0x38
    bcfe:	orr.w	r2, r2, #1
    bd02:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    bd04:	ldr	r2, [r3, #56]	; 0x38
    bd06:	lsls	r2, r2, #31
    bd08:	bpl.n	bd04 <rtc_set+0x30>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    bd0a:	ldr	r2, [r3, #8]
    bd0c:	orr.w	r2, r2, #65537	; 0x10001
    bd10:	str	r2, [r3, #8]
}
    bd12:	bx	lr
    bd14:	.word	0x400d4000

0000bd18 <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bd18:	ldr	r3, [pc, #68]	; (bd60 <flash_wait+0x48>)
	FLEXSPI_LUT61 = 0;
    bd1a:	movs	r1, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bd1c:	ldr	r2, [pc, #68]	; (bd64 <flash_wait+0x4c>)
{
    bd1e:	push	{r4, r5, lr}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bd20:	str.w	r2, [r3, #752]	; 0x2f0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    bd24:	movs	r2, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    bd26:	ldr	r5, [pc, #64]	; (bd68 <flash_wait+0x50>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    bd28:	ldr	r4, [pc, #64]	; (bd6c <flash_wait+0x54>)
	FLEXSPI_LUT61 = 0;
    bd2a:	str.w	r1, [r3, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    bd2e:	str.w	r2, [r3, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    bd32:	str.w	r1, [r3, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    bd36:	str.w	r5, [r3, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bd3a:	str.w	r2, [r3, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    bd3e:	ldr	r0, [r3, #20]
    bd40:	lsls	r0, r0, #31
    bd42:	bpl.n	bd3e <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bd44:	str	r2, [r3, #20]
	} while (status & 1);
    bd46:	ldrb	r0, [r4, #0]
    bd48:	lsls	r0, r0, #31
    bd4a:	bmi.n	bd2e <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    bd4c:	ldr	r2, [r3, #0]
    bd4e:	orr.w	r2, r2, #1
    bd52:	str	r2, [r3, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    bd54:	ldr	r2, [pc, #8]	; (bd60 <flash_wait+0x48>)
    bd56:	ldr	r3, [r2, #0]
    bd58:	lsls	r3, r3, #31
    bd5a:	bmi.n	bd56 <flash_wait+0x3e>
	__enable_irq();
    bd5c:	cpsie	i
}
    bd5e:	pop	{r4, r5, pc}
    bd60:	.word	0x402a8000
    bd64:	.word	0x24010405
    bd68:	.word	0x000f0001
    bd6c:	.word	0x402a8100

0000bd70 <eeprom_initialize>:
{
    bd70:	push	{r4, r5, lr}
    bd72:	ldr	r3, [pc, #52]	; (bda8 <eeprom_initialize+0x38>)
			if (*p++ == 0xFFFF) break;
    bd74:	movw	r5, #65535	; 0xffff
    bd78:	ldr	r4, [pc, #48]	; (bdac <eeprom_initialize+0x3c>)
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bd7a:	sub.w	r1, r3, #4096	; 0x1000
		uint16_t index = 0;
    bd7e:	movs	r2, #0
			if (*p++ == 0xFFFF) break;
    bd80:	ldrh	r0, [r1, #0]
    bd82:	adds	r1, #2
    bd84:	cmp	r0, r5
    bd86:	beq.n	bd90 <eeprom_initialize+0x20>
			index++;
    bd88:	adds	r2, #1
		} while (p < end);
    bd8a:	cmp	r1, r3
			index++;
    bd8c:	uxth	r2, r2
		} while (p < end);
    bd8e:	bcc.n	bd80 <eeprom_initialize+0x10>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    bd90:	add.w	r3, r3, #4096	; 0x1000
		sector_index[sector] = index;
    bd94:	strh.w	r2, [r4], #2
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    bd98:	cmp.w	r3, #1619001344	; 0x60800000
    bd9c:	bne.n	bd7a <eeprom_initialize+0xa>
	initialized = 1;
    bd9e:	ldr	r3, [pc, #16]	; (bdb0 <eeprom_initialize+0x40>)
    bda0:	movs	r2, #1
    bda2:	strb	r2, [r3, #0]
}
    bda4:	pop	{r4, r5, pc}
    bda6:	nop
    bda8:	.word	0x607c1000
    bdac:	.word	0x200109c8
    bdb0:	.word	0x20010bb8

0000bdb4 <eeprom_read_byte>:
{
    bdb4:	push	{r3, r4, r5, lr}
	if (addr > E2END) return 0xFF;
    bdb6:	movw	r3, #4283	; 0x10bb
{
    bdba:	mov	r4, r0
	if (addr > E2END) return 0xFF;
    bdbc:	cmp	r0, r3
    bdbe:	bhi.n	be0c <eeprom_read_byte+0x58>
	if (!initialized) eeprom_initialize();
    bdc0:	ldr	r3, [pc, #76]	; (be10 <eeprom_read_byte+0x5c>)
    bdc2:	ldrb	r3, [r3, #0]
    bdc4:	cbnz	r3, bdca <eeprom_read_byte+0x16>
    bdc6:	bl	bd70 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS;
    bdca:	lsrs	r2, r4, #2
    bdcc:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    bdce:	ldr	r0, [pc, #68]	; (be14 <eeprom_read_byte+0x60>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bdd0:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS;
    bdd4:	udiv	r3, r2, r3
    bdd8:	rsb	r1, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bddc:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS;
    bde0:	subs	r2, r2, r1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bde2:	add.w	r1, r2, #393216	; 0x60000
	end = p + sector_index[sector];
    bde6:	ldrh.w	r2, [r0, r2, lsl #1]
	uint8_t data=0xFF;
    bdea:	movs	r0, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bdec:	add.w	r1, r1, #1984	; 0x7c0
	end = p + sector_index[sector];
    bdf0:	lsls	r2, r2, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bdf2:	lsls	r3, r1, #12
	end = p + sector_index[sector];
    bdf4:	add.w	r2, r2, r1, lsl #12
	while (p < end) {
    bdf8:	cmp	r3, r2
    bdfa:	bcc.n	bdfe <eeprom_read_byte+0x4a>
}
    bdfc:	pop	{r3, r4, r5, pc}
		uint32_t val = *p++;
    bdfe:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    be02:	uxtb	r5, r1
    be04:	cmp	r5, r4
    be06:	it	eq
    be08:	lsreq	r0, r1, #8
    be0a:	b.n	bdf8 <eeprom_read_byte+0x44>
	if (addr > E2END) return 0xFF;
    be0c:	movs	r0, #255	; 0xff
    be0e:	b.n	bdfc <eeprom_read_byte+0x48>
    be10:	.word	0x20010bb8
    be14:	.word	0x200109c8

0000be18 <eeprom_read_block>:
{
    be18:	push	{r4, r5, r6, lr}
    be1a:	mov	r4, r0
    be1c:	adds	r5, r1, r2
    be1e:	mov	r0, r1
	while (len--) {
    be20:	cmp	r0, r5
    be22:	bne.n	be26 <eeprom_read_block+0xe>
}
    be24:	pop	{r4, r5, r6, pc}
		*dest++ = eeprom_read_byte(p++);
    be26:	adds	r6, r0, #1
    be28:	bl	bdb4 <eeprom_read_byte>
    be2c:	strb.w	r0, [r4], #1
    be30:	mov	r0, r6
    be32:	b.n	be20 <eeprom_read_block+0x8>

0000be34 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    be34:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be38:	mov	r5, r1
    be3a:	mov	r4, r2
	__disable_irq();
    be3c:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    be3e:	ldr	r3, [pc, #192]	; (bf00 <eepromemu_flash_write+0xcc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    be40:	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    be44:	ldr	r2, [pc, #188]	; (bf04 <eepromemu_flash_write+0xd0>)
    be46:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    be48:	movs	r2, #2
    be4a:	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    be4c:	movs	r2, #0
    be4e:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    be52:	str.w	r1, [r3, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    be56:	adds	r1, r0, r4
	FLEXSPI_LUT61 = 0;
    be58:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    be5c:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    be60:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    be64:	mov.w	r2, #983040	; 0xf0000
    be68:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    be6c:	movs	r2, #1
    be6e:	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    be72:	bic.w	r2, r0, #31
	asm("dsb");
    be76:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    be7a:	mov.w	r6, #3758153728	; 0xe000e000
    be7e:	str.w	r2, [r6, #3932]	; 0xf5c
		location += 32;
    be82:	adds	r2, #32
	} while (location < end_addr);
    be84:	cmp	r1, r2
    be86:	bhi.n	be7e <eepromemu_flash_write+0x4a>
	asm("dsb");
    be88:	dsb	sy
	asm("isb");
    be8c:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    be90:	ldr	r2, [r3, #20]
    be92:	lsls	r6, r2, #31
    be94:	bpl.n	be90 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    be96:	movs	r2, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    be98:	ldr	r1, [pc, #108]	; (bf08 <eepromemu_flash_write+0xd4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    be9a:	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    be9e:	ldr	r7, [pc, #96]	; (bf00 <eepromemu_flash_write+0xcc>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bea0:	str	r2, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    bea2:	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    bea6:	movw	r1, #8705	; 0x2201
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    beaa:	ldr.w	r8, [pc, #96]	; bf0c <eepromemu_flash_write+0xd8>
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    beae:	str.w	r1, [r3, #756]	; 0x2f4
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    beb2:	uxth	r1, r4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    beb4:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    beb8:	orr.w	r1, r1, #983040	; 0xf0000
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    bebc:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bec0:	str.w	r1, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bec4:	str.w	r2, [r3, #176]	; 0xb0
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    bec8:	ldr	r3, [r7, #20]
    beca:	lsls	r2, r3, #31
    becc:	bpl.n	beda <eepromemu_flash_write+0xa6>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    bece:	movs	r3, #65	; 0x41
    bed0:	str	r3, [r7, #20]
	flash_wait();
}
    bed2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	flash_wait();
    bed6:	b.w	bd18 <flash_wait>
		if (n & FLEXSPI_INTR_IPTXWE) {
    beda:	lsls	r1, r3, #25
    bedc:	bpl.n	bec8 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    bede:	cmp	r4, #8
    bee0:	bhi.n	befa <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    bee2:	cbz	r4, bef4 <eepromemu_flash_write+0xc0>
    bee4:	mov	r6, r4
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    bee6:	mov	r1, r5
				len -= wrlen;
    bee8:	subs	r4, r4, r6
				src += wrlen;
    beea:	add	r5, r6
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    beec:	mov	r2, r6
    beee:	mov	r0, r8
    bef0:	bl	a56c <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    bef4:	movs	r3, #64	; 0x40
    bef6:	str	r3, [r7, #20]
    bef8:	b.n	bec8 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    befa:	movs	r6, #8
    befc:	b.n	bee6 <eepromemu_flash_write+0xb2>
    befe:	nop
    bf00:	.word	0x402a8000
    bf04:	.word	0x5af05af0
    bf08:	.word	0x08180432
    bf0c:	.word	0x402a8180

0000bf10 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    bf10:	push	{r4}
	__disable_irq();
    bf12:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bf14:	ldr	r3, [pc, #156]	; (bfb4 <eepromemu_flash_erase_sector+0xa4>)
    bf16:	ldr	r2, [pc, #160]	; (bfb8 <eepromemu_flash_erase_sector+0xa8>)
    bf18:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    bf1a:	movs	r2, #2
    bf1c:	str	r2, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bf1e:	movw	r2, #1030	; 0x406
    bf22:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    bf26:	movs	r2, #0
    bf28:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    bf2c:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    bf30:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    bf34:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bf38:	mov.w	r2, #983040	; 0xf0000
    bf3c:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bf40:	movs	r2, #1
    bf42:	str.w	r2, [r3, #176]	; 0xb0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    bf46:	bic.w	r2, r0, #4080	; 0xff0
    bf4a:	bic.w	r2, r2, #15
	asm("dsb");
    bf4e:	dsb	sy
    bf52:	add.w	r4, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
    bf56:	add.w	r1, r2, #4096	; 0x1000
    bf5a:	cmp	r1, r4
    bf5c:	ite	cc
    bf5e:	movcc	r1, #1
    bf60:	movcs	r1, #128	; 0x80
		SCB_CACHE_DCIMVAC = location;
    bf62:	mov.w	r4, #3758153728	; 0xe000e000
    bf66:	add.w	r1, r2, r1, lsl #5
    bf6a:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    bf6e:	adds	r2, #32
	} while (location < end_addr);
    bf70:	cmp	r2, r1
    bf72:	bne.n	bf6a <eepromemu_flash_erase_sector+0x5a>
	asm("dsb");
    bf74:	dsb	sy
	asm("isb");
    bf78:	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bf7c:	ldr	r2, [r3, #20]
    bf7e:	lsls	r1, r2, #31
    bf80:	bpl.n	bf7c <eepromemu_flash_erase_sector+0x6c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bf82:	movs	r1, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    bf84:	ldr	r2, [pc, #52]	; (bfbc <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bf86:	str	r1, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    bf88:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    bf8c:	ldr	r2, [pc, #48]	; (bfc0 <eepromemu_flash_erase_sector+0xb0>)
    bf8e:	ands	r2, r0
    bf90:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bf94:	mov.w	r2, #983040	; 0xf0000
    bf98:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bf9c:	str.w	r1, [r3, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bfa0:	ldr	r3, [pc, #16]	; (bfb4 <eepromemu_flash_erase_sector+0xa4>)
    bfa2:	ldr	r2, [r3, #20]
    bfa4:	lsls	r2, r2, #31
    bfa6:	bpl.n	bfa2 <eepromemu_flash_erase_sector+0x92>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bfa8:	movs	r2, #1
	flash_wait();
}
    bfaa:	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bfae:	str	r2, [r3, #20]
	flash_wait();
    bfb0:	b.w	bd18 <flash_wait>
    bfb4:	.word	0x402a8000
    bfb8:	.word	0x5af05af0
    bfbc:	.word	0x08180420
    bfc0:	.word	0x00fff000

0000bfc4 <eeprom_write_byte>:
	if (addr > E2END) return;
    bfc4:	movw	r3, #4283	; 0x10bb
    bfc8:	cmp	r0, r3
{
    bfca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bfce:	mov	r4, r0
    bfd0:	sub	sp, #264	; 0x108
    bfd2:	mov	r9, r1
	if (addr > E2END) return;
    bfd4:	bhi.n	c036 <eeprom_write_byte+0x72>
	if (!initialized) eeprom_initialize();
    bfd6:	ldr	r3, [pc, #232]	; (c0c0 <eeprom_write_byte+0xfc>)
    bfd8:	ldrb	r3, [r3, #0]
    bfda:	cbnz	r3, bfe0 <eeprom_write_byte+0x1c>
    bfdc:	bl	bd70 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS; 
    bfe0:	lsrs	r6, r4, #2
    bfe2:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    bfe4:	ldr	r7, [pc, #220]	; (c0c4 <eeprom_write_byte+0x100>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bfe6:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS; 
    bfea:	udiv	r3, r6, r3
    bfee:	rsb	r2, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bff2:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    bff6:	subs	r6, r6, r2
	uint8_t olddata=0xFF;
    bff8:	movs	r2, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bffa:	add.w	r5, r6, #393216	; 0x60000
	end = p + sector_index[sector];
    bffe:	ldrh.w	sl, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c002:	add.w	r5, r5, #1984	; 0x7c0
    c006:	lsls	r5, r5, #12
    c008:	mov	r8, r5
	end = p + sector_index[sector];
    c00a:	add.w	r0, r5, sl, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c00e:	mov	r3, r5
	while (p < end) {
    c010:	cmp	r3, r0
    c012:	bcc.n	c03c <eeprom_write_byte+0x78>
	if (data == olddata) return;
    c014:	cmp	r2, r9
    c016:	beq.n	c036 <eeprom_write_byte+0x72>
	if (sector_index[sector] < 2048) {
    c018:	cmp.w	sl, #2048	; 0x800
    c01c:	bcs.n	c04c <eeprom_write_byte+0x88>
		uint16_t newdata = offset | (data << 8);
    c01e:	orr.w	r4, r4, r9, lsl #8
		sector_index[sector] = sector_index[sector] + 1;
    c022:	add.w	sl, sl, #1
		eepromemu_flash_write(end, &newdata, 2);
    c026:	movs	r2, #2
    c028:	add	r1, sp, #8
		uint16_t newdata = offset | (data << 8);
    c02a:	strh.w	r4, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    c02e:	bl	be34 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    c032:	strh.w	sl, [r7, r6, lsl #1]
}
    c036:	add	sp, #264	; 0x108
    c038:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t val = *p++;
    c03c:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    c040:	uxtb.w	ip, r1
    c044:	cmp	ip, r4
    c046:	it	eq
    c048:	lsreq	r2, r1, #8
    c04a:	b.n	c010 <eeprom_write_byte+0x4c>
		memset(buf, 0xFF, sizeof(buf));
    c04c:	mov.w	r2, #256	; 0x100
    c050:	movs	r1, #255	; 0xff
    c052:	add	r0, sp, #8
    c054:	bl	a528 <memset>
		while (p < end) {
    c058:	cmn.w	r5, #4096	; 0x1000
    c05c:	movw	r3, #2049	; 0x801
    c060:	it	cs
    c062:	movcs	r3, #1
    c064:	add.w	r3, r5, r3, lsl #1
    c068:	mov	r1, r5
    c06a:	adds	r5, #2
    c06c:	cmp	r5, r3
    c06e:	bne.n	c0b2 <eeprom_write_byte+0xee>
		buf[offset] = data;
    c070:	add	r3, sp, #8
		for (i=0; i < 256; i++) {
    c072:	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    c074:	mov	r0, r8
		buf[offset] = data;
    c076:	strb.w	r9, [r3, r4]
		eepromemu_flash_erase_sector(p);
    c07a:	add	r4, sp, #8
		index = 0;
    c07c:	mov	r9, r5
		eepromemu_flash_erase_sector(p);
    c07e:	bl	bf10 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    c082:	ldrb.w	r3, [r4], #1
    c086:	cmp	r3, #255	; 0xff
    c088:	beq.n	c0a4 <eeprom_write_byte+0xe0>
				uint16_t newval = i | (buf[i] << 8);
    c08a:	orr.w	r3, r5, r3, lsl #8
				eepromemu_flash_write(p + index, &newval, 2);
    c08e:	movs	r2, #2
    c090:	add.w	r0, r8, r9, lsl #1
				index = index + 1;
    c094:	add.w	r9, r9, #1
				eepromemu_flash_write(p + index, &newval, 2);
    c098:	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    c09c:	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    c0a0:	bl	be34 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    c0a4:	adds	r5, #1
    c0a6:	cmp.w	r5, #256	; 0x100
    c0aa:	bne.n	c082 <eeprom_write_byte+0xbe>
		sector_index[sector] = index;
    c0ac:	strh.w	r9, [r7, r6, lsl #1]
    c0b0:	b.n	c036 <eeprom_write_byte+0x72>
			uint16_t val = *p++;
    c0b2:	ldrh	r2, [r1, #0]
			buf[val & 255] = val >> 8;
    c0b4:	add	r0, sp, #8
    c0b6:	ldrb	r1, [r1, #0]
    c0b8:	lsrs	r2, r2, #8
    c0ba:	strb	r2, [r0, r1]
    c0bc:	b.n	c068 <eeprom_write_byte+0xa4>
    c0be:	nop
    c0c0:	.word	0x20010bb8
    c0c4:	.word	0x200109c8

0000c0c8 <eeprom_write_block>:
{
    c0c8:	push	{r4, r5, r6, lr}
    c0ca:	mov	r4, r0
    c0cc:	mov	r0, r1
	while (len--) {
    c0ce:	adds	r5, r4, r2
    c0d0:	cmp	r4, r5
    c0d2:	bne.n	c0d6 <eeprom_write_block+0xe>
}
    c0d4:	pop	{r4, r5, r6, pc}
		eeprom_write_byte(p++, *src++);
    c0d6:	adds	r6, r0, #1
    c0d8:	ldrb.w	r1, [r4], #1
    c0dc:	bl	bfc4 <eeprom_write_byte>
    c0e0:	mov	r0, r6
    c0e2:	b.n	c0d0 <eeprom_write_block+0x8>

0000c0e4 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    c0e4:	ldr	r3, [r0, #0]
    c0e6:	cbz	r3, c0fe <smalloc_verify_pool+0x1a>
    c0e8:	ldr	r0, [r0, #4]
    c0ea:	cbz	r0, c100 <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    c0ec:	movs	r3, #12
    c0ee:	udiv	r2, r0, r3
    c0f2:	mls	r0, r3, r2, r0
    c0f6:	clz	r0, r0
    c0fa:	lsrs	r0, r0, #5
    c0fc:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    c0fe:	mov	r0, r3
	return 1;
}
    c100:	bx	lr

0000c102 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    c102:	push	{r4, lr}
    c104:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    c106:	bl	c0e4 <smalloc_verify_pool>
    c10a:	mov	r4, r0
    c10c:	cbz	r0, c114 <sm_align_pool+0x12>
    c10e:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    c110:	mov	r0, r4
    c112:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    c114:	ldr	r3, [r1, #4]
    c116:	movs	r0, #12
    c118:	udiv	r2, r3, r0
    c11c:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    c120:	cbz	r2, c126 <sm_align_pool+0x24>
    c122:	subs	r3, r3, r2
    c124:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    c126:	ldr	r3, [r1, #4]
    c128:	cmp	r3, #240	; 0xf0
    c12a:	bhi.n	c10e <sm_align_pool+0xc>
		errno = ENOSPC;
    c12c:	bl	f0dc <__errno>
    c130:	movs	r3, #28
    c132:	str	r3, [r0, #0]
		return 0;
    c134:	b.n	c110 <sm_align_pool+0xe>

0000c136 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    c136:	push	{r4, r5, r6, lr}
    c138:	mov	r6, r3
	if (!spool) {
    c13a:	mov	r4, r0
    c13c:	cbnz	r0, c14c <sm_set_pool+0x16>
		errno = EINVAL;
    c13e:	bl	f0dc <__errno>
		return 0;
    c142:	mov	r5, r4
		errno = EINVAL;
    c144:	movs	r3, #22
    c146:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    c148:	mov	r0, r5
    c14a:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    c14c:	cbz	r1, c150 <sm_set_pool+0x1a>
    c14e:	cbnz	r2, c180 <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    c150:	mov	r0, r4
    c152:	bl	c0e4 <smalloc_verify_pool>
    c156:	mov	r5, r0
    c158:	cbz	r0, c176 <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    c15a:	ldr	r3, [r4, #8]
    c15c:	cbz	r3, c168 <sm_set_pool+0x32>
    c15e:	ldr	r2, [r4, #4]
    c160:	movs	r1, #0
    c162:	ldr	r0, [r4, #0]
    c164:	bl	a528 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    c168:	movs	r2, #16
    c16a:	movs	r1, #0
    c16c:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    c16e:	bl	a528 <memset>
	return 1;
    c172:	movs	r5, #1
    c174:	b.n	c148 <sm_set_pool+0x12>
		errno = EINVAL;
    c176:	bl	f0dc <__errno>
    c17a:	movs	r3, #22
    c17c:	str	r3, [r0, #0]
		return 0;
    c17e:	b.n	c148 <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    c180:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    c182:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    c186:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    c188:	bl	c102 <sm_align_pool>
    c18c:	mov	r5, r0
    c18e:	cmp	r0, #0
    c190:	beq.n	c148 <sm_set_pool+0x12>
	if (do_zero) {
    c192:	cmp	r6, #0
    c194:	beq.n	c172 <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    c196:	ldr	r2, [r4, #4]
    c198:	movs	r1, #0
    c19a:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    c19c:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    c19e:	b.n	c16e <sm_set_pool+0x38>

0000c1a0 <Panic_Temp_isr>:
  unused_interrupt_vector();
    c1a0:	b.w	bae0 <unused_interrupt_vector>

0000c1a4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    c1a4:	ldr	r3, [pc, #72]	; (c1f0 <tempmonGetTemp+0x4c>)
    c1a6:	ldr.w	r2, [r3, #128]	; 0x80
    c1aa:	lsls	r2, r2, #29
    c1ac:	bpl.n	c1a6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c1ae:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c1b2:	ldr	r2, [pc, #64]	; (c1f4 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c1b4:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c1b8:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c1bc:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c1c0:	ldr	r3, [pc, #52]	; (c1f8 <tempmonGetTemp+0x54>)
    c1c2:	vcvt.f32.u32	s0, s0
    c1c6:	vldr	s14, [r3]
    c1ca:	vcvt.f32.s32	s15, s15
    c1ce:	ldr	r3, [pc, #44]	; (c1fc <tempmonGetTemp+0x58>)
    c1d0:	vcvt.f32.u32	s14, s14
    c1d4:	vsub.f32	s15, s15, s14
    c1d8:	vldr	s14, [r3]
    c1dc:	ldr	r3, [pc, #32]	; (c200 <tempmonGetTemp+0x5c>)
    c1de:	vmul.f32	s15, s15, s14
    c1e2:	vldr	s13, [r3]
    c1e6:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    c1ea:	vsub.f32	s0, s0, s14
    c1ee:	bx	lr
    c1f0:	.word	0x400d8100
    c1f4:	.word	0x200102ac
    c1f8:	.word	0x200102a8
    c1fc:	.word	0x200102b0
    c200:	.word	0x200102b4

0000c204 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    c204:	cmp	r0, #54	; 0x36
{
    c206:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    c208:	bhi.n	c222 <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    c20a:	lsls	r2, r0, #4
    c20c:	ldr	r3, [pc, #40]	; (c238 <digitalWrite+0x34>)
    c20e:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    c212:	ldr	r3, [r3, r2]
	mask = p->mask;
    c214:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    c216:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    c218:	tst	r4, r2
    c21a:	beq.n	c22a <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    c21c:	cbz	r1, c224 <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    c21e:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    c222:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    c224:	str.w	r2, [r3, #136]	; 0x88
    c228:	b.n	c222 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c22a:	ldr	r3, [r0, #8]
		if (val) {
    c22c:	cbz	r1, c234 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c22e:	ldr	r2, [pc, #12]	; (c23c <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    c230:	str	r2, [r3, #0]
    c232:	b.n	c222 <digitalWrite+0x1e>
    c234:	ldr	r2, [pc, #8]	; (c240 <digitalWrite+0x3c>)
    c236:	b.n	c230 <digitalWrite+0x2c>
    c238:	.word	0x2000743c
    c23c:	.word	0x0001f038
    c240:	.word	0x00013038

0000c244 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    c244:	cmp	r0, #54	; 0x36
{
    c246:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    c248:	bhi.n	c27a <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    c24a:	ldr	r3, [pc, #76]	; (c298 <pinMode+0x54>)
    c24c:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    c24e:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    c250:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    c252:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    c256:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    c258:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    c25c:	beq.n	c262 <pinMode+0x1e>
    c25e:	cmp	r1, #4
    c260:	bne.n	c27c <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    c262:	orrs	r4, r5
		if (mode == OUTPUT) {
    c264:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    c266:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    c268:	bne.n	c26e <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    c26a:	movs	r2, #56	; 0x38
    c26c:	b.n	c272 <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    c26e:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    c272:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    c274:	movs	r2, #21
    c276:	ldr	r3, [r0, #4]
    c278:	str	r2, [r3, #0]
}
    c27a:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    c27c:	bic.w	r4, r4, r5
    c280:	str	r4, [r2, #4]
		if (mode == INPUT) {
    c282:	cmp	r1, #0
    c284:	beq.n	c26a <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    c286:	cmp	r1, #2
    c288:	bne.n	c28e <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c28a:	ldr	r2, [pc, #16]	; (c29c <pinMode+0x58>)
    c28c:	b.n	c272 <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    c28e:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    c290:	ite	eq
    c292:	ldreq	r2, [pc, #12]	; (c2a0 <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    c294:	ldrne	r2, [pc, #12]	; (c2a4 <pinMode+0x60>)
    c296:	b.n	c272 <pinMode+0x2e>
    c298:	.word	0x2000743c
    c29c:	.word	0x0001f038
    c2a0:	.word	0x00013038
    c2a4:	.word	0x00010038

0000c2a8 <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c2a8:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    c2ac:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c2ae:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    c2b2:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c2b4:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    c2b6:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    c2ba:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c2be:	ldrh.w	r3, [r0, #392]	; 0x188
    c2c2:	uxth	r3, r3
{
    c2c4:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c2c6:	orr.w	r3, r3, #240	; 0xf0
    c2ca:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c2cc:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c2d0:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c2d4:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c2d8:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c2dc:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    c2e0:	adds	r2, #1
    c2e2:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c2e4:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c2e6:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    c2e8:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c2ea:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c2ec:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    c2ee:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c2f0:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    c2f2:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    c2f4:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    c2f6:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    c2f8:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    c2fa:	bne.n	c2dc <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c2fc:	ldrh.w	r3, [r0, #392]	; 0x188
    c300:	uxth	r3, r3
    c302:	orr.w	r3, r3, #15
    c306:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c30a:	ldrh.w	r3, [r0, #392]	; 0x188
    c30e:	uxth	r3, r3
    c310:	orr.w	r3, r3, #3840	; 0xf00
    c314:	strh.w	r3, [r0, #392]	; 0x188
}
    c318:	pop	{r4, r5, r6, r7, pc}

0000c31a <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c31a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c31c:	mov.w	ip, #15
{
    c320:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    c322:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c324:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c328:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c32c:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    c330:	add.w	r3, r0, r2, lsl #5
    c334:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    c336:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c338:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    c33a:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    c33c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c33e:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c342:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c344:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c346:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    c348:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c34a:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    c34c:	bne.n	c330 <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    c34e:	pop	{r4, r5, r6, r7, pc}

0000c350 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c350:	ldr	r2, [pc, #84]	; (c3a8 <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    c352:	ldr	r0, [pc, #88]	; (c3ac <pwm_init+0x5c>)
{
    c354:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c356:	ldr	r3, [r2, #120]	; 0x78
    c358:	orr.w	r3, r3, #16711680	; 0xff0000
    c35c:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c35e:	ldr.w	r3, [r2, #128]	; 0x80
    c362:	orr.w	r3, r3, #4227858432	; 0xfc000000
    c366:	orr.w	r3, r3, #196608	; 0x30000
    c36a:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    c36e:	bl	c2a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    c372:	add.w	r0, r0, #16384	; 0x4000
    c376:	bl	c2a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    c37a:	add.w	r0, r0, #16384	; 0x4000
    c37e:	bl	c2a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    c382:	add.w	r0, r0, #16384	; 0x4000
    c386:	bl	c2a8 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    c38a:	sub.w	r0, r0, #2146304	; 0x20c000
    c38e:	bl	c31a <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    c392:	add.w	r0, r0, #16384	; 0x4000
    c396:	bl	c31a <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    c39a:	add.w	r0, r0, #16384	; 0x4000
}
    c39e:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    c3a2:	b.w	c31a <quadtimer_init>
    c3a6:	nop
    c3a8:	.word	0x400fc000
    c3ac:	.word	0x403dc000

0000c3b0 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    c3b0:	ldr	r2, [pc, #8]	; (c3bc <txEvent_event+0xc>)
    c3b2:	ldr	r3, [r2, #0]
    c3b4:	adds	r3, #1
    c3b6:	str	r3, [r2, #0]
    c3b8:	bx	lr
    c3ba:	nop
    c3bc:	.word	0x200101fc

0000c3c0 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    c3c0:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    c3c2:	ldr	r4, [pc, #40]	; (c3ec <rx_event+0x2c>)
	int i = t->callback_param;
    c3c4:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    c3c6:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    c3c8:	ldr	r2, [pc, #36]	; (c3f0 <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    c3ca:	adds	r3, #1
    c3cc:	cmp	r3, #5
    c3ce:	it	cs
    c3d0:	movcs	r3, #0
	rx_list[head] = i;
    c3d2:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    c3d4:	ldr	r1, [r0, #4]
    c3d6:	ldr	r2, [pc, #28]	; (c3f4 <rx_event+0x34>)
    c3d8:	ubfx	r1, r1, #16, #15
    c3dc:	ldrh	r2, [r2, #0]
    c3de:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    c3e0:	ldr	r1, [pc, #20]	; (c3f8 <rx_event+0x38>)
    c3e2:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    c3e6:	uxtb	r3, r3
    c3e8:	strb	r3, [r4, #0]
}
    c3ea:	pop	{r4, pc}
    c3ec:	.word	0x20010bc2
    c3f0:	.word	0x20010bcc
    c3f4:	.word	0x200109c6
    c3f8:	.word	0x20010294

0000c3fc <rx_queue_transfer>:
{
    c3fc:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c3fe:	ldr	r1, [pc, #80]	; (c450 <rx_queue_transfer+0x54>)
{
    c400:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    c402:	ldr	r7, [pc, #80]	; (c454 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c404:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    c408:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c40a:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    c40c:	add	r0, r1
	asm("dsb");
    c40e:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    c412:	mov.w	r4, #3758153728	; 0xe000e000
    c416:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    c41a:	adds	r2, #32
	} while (location < end_addr);
    c41c:	cmp	r0, r2
    c41e:	bhi.n	c416 <rx_queue_transfer+0x1a>
	asm("dsb");
    c420:	dsb	sy
	asm("isb");
    c424:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c428:	ldr	r5, [pc, #44]	; (c458 <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c42a:	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c42e:	ldrh	r2, [r7, #0]
    c430:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c434:	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c438:	mov	r0, r5
    c43a:	bl	b744 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c43e:	mov	r1, r5
    c440:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c442:	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c446:	bl	b794 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    c44a:	str.w	r6, [r4, #268]	; 0x10c
}
    c44e:	pop	{r3, r4, r5, r6, r7, pc}
    c450:	.word	0x20204000
    c454:	.word	0x200109c6
    c458:	.word	0x2000c040

0000c45c <usb_mtp_configure>:
	if (usb_high_speed) {
    c45c:	ldr	r3, [pc, #120]	; (c4d8 <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c45e:	movs	r2, #128	; 0x80
    c460:	movs	r1, #0
    c462:	ldr	r0, [pc, #120]	; (c4dc <usb_mtp_configure+0x80>)
{
    c464:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    c466:	ldrb	r3, [r3, #0]
	tx_head = 0;
    c468:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    c46a:	ldr	r6, [pc, #116]	; (c4e0 <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    c46c:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    c46e:	ldr	r3, [pc, #116]	; (c4e4 <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    c470:	ite	eq
    c472:	moveq	r5, #64	; 0x40
    c474:	movne.w	r5, #512	; 0x200
		tx_packet_size = MTP_TX_SIZE_480;
    c478:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    c47a:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c47c:	bl	a528 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c480:	movs	r2, #128	; 0x80
    c482:	movs	r1, #0
    c484:	ldr	r0, [pc, #96]	; (c4e8 <usb_mtp_configure+0x8c>)
    c486:	bl	a528 <memset>
	tx_head = 0;
    c48a:	ldr	r3, [pc, #96]	; (c4ec <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c48c:	mov	r2, r4
    c48e:	mov	r1, r5
	tx_head = 0;
    c490:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c492:	movs	r0, #4
	rx_head = 0;
    c494:	ldr	r3, [pc, #88]	; (c4f0 <usb_mtp_configure+0x94>)
    c496:	strb	r4, [r3, #0]
	rx_tail = 0;
    c498:	ldr	r3, [pc, #88]	; (c4f4 <usb_mtp_configure+0x98>)
    c49a:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c49c:	mov	r3, r4
    c49e:	bl	b704 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    c4a2:	mov	r2, r4
    c4a4:	ldrh	r1, [r6, #0]
    c4a6:	movs	r0, #4
    c4a8:	ldr	r3, [pc, #76]	; (c4f8 <usb_mtp_configure+0x9c>)
    c4aa:	bl	b6c4 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    c4ae:	mov	r2, r4
    c4b0:	ldr	r3, [pc, #72]	; (c4fc <usb_mtp_configure+0xa0>)
    c4b2:	movs	r1, #32
    c4b4:	movs	r0, #5
    c4b6:	bl	b704 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c4ba:	mov	r0, r4
    c4bc:	bl	c3fc <rx_queue_transfer>
    c4c0:	movs	r0, #1
    c4c2:	bl	c3fc <rx_queue_transfer>
    c4c6:	movs	r0, #2
    c4c8:	bl	c3fc <rx_queue_transfer>
    c4cc:	movs	r0, #3
}
    c4ce:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c4d2:	b.w	c3fc <rx_queue_transfer>
    c4d6:	nop
    c4d8:	.word	0x20010bda
    c4dc:	.word	0x2000c140
    c4e0:	.word	0x200109c6
    c4e4:	.word	0x20010a4c
    c4e8:	.word	0x2000c040
    c4ec:	.word	0x20010bd6
    c4f0:	.word	0x20010bc2
    c4f4:	.word	0x20010bd2
    c4f8:	.word	0x0000c3c1
    c4fc:	.word	0x0000c3b1

0000c500 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    c500:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t wait_begin_at = systick_millis_count;
    c504:	ldr	r7, [pc, #112]	; (c578 <usb_mtp_recv+0x78>)
{
    c506:	mov	r5, r1
	uint32_t tail = rx_tail;
    c508:	ldr	r6, [pc, #112]	; (c57c <usb_mtp_recv+0x7c>)
	uint32_t wait_begin_at = systick_millis_count;
    c50a:	ldr.w	r8, [r7]
	uint32_t tail = rx_tail;
    c50e:	ldrb	r3, [r6, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c510:	ldr.w	r9, [pc, #120]	; c58c <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    c514:	uxtb	r4, r3
		if (tail != rx_head) break;
    c516:	ldr.w	sl, [pc, #120]	; c590 <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c51a:	ldrb.w	r3, [r9]
    c51e:	cbz	r3, c56c <usb_mtp_recv+0x6c>
		if (tail != rx_head) break;
    c520:	ldrb.w	r3, [sl]
    c524:	cmp	r4, r3
    c526:	bne.n	c53c <usb_mtp_recv+0x3c>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    c528:	ldr	r3, [r7, #0]
    c52a:	str	r0, [sp, #4]
    c52c:	sub.w	r3, r3, r8
    c530:	cmp	r3, r5
    c532:	bcs.n	c572 <usb_mtp_recv+0x72>
			return 0;
		}
		yield();
    c534:	bl	c730 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c538:	ldr	r0, [sp, #4]
    c53a:	b.n	c51a <usb_mtp_recv+0x1a>
	}
	if (++tail > RX_NUM) tail = 0;
    c53c:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    c53e:	ldr	r2, [pc, #64]	; (c580 <usb_mtp_recv+0x80>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    c540:	ldr	r1, [pc, #64]	; (c584 <usb_mtp_recv+0x84>)
	if (++tail > RX_NUM) tail = 0;
    c542:	cmp	r3, #5
    c544:	it	cs
    c546:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    c548:	ldrb	r5, [r2, r3]
	int len = rx_list_transfer_len[tail];
    c54a:	ldr	r2, [pc, #60]	; (c588 <usb_mtp_recv+0x88>)
	memcpy(buffer,  rx_item_buffer, len);
    c54c:	add.w	r1, r1, r5, lsl #9
	int len = rx_list_transfer_len[tail];
    c550:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    c554:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    c556:	mov	r2, r4
	rx_tail = tail;
    c558:	strb	r3, [r6, #0]
	memcpy(buffer,  rx_item_buffer, len);
    c55a:	bl	a56c <memcpy>
	rx_queue_transfer(i);
    c55e:	mov	r0, r5
    c560:	bl	c3fc <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    c564:	mov	r0, r4
    c566:	add	sp, #8
    c568:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c56c:	mov.w	r4, #4294967295
    c570:	b.n	c564 <usb_mtp_recv+0x64>
			return 0;
    c572:	movs	r4, #0
    c574:	b.n	c564 <usb_mtp_recv+0x64>
    c576:	nop
    c578:	.word	0x2001094c
    c57c:	.word	0x20010bd2
    c580:	.word	0x20010bcc
    c584:	.word	0x20204000
    c588:	.word	0x20010294
    c58c:	.word	0x20010bd9
    c590:	.word	0x20010bc2

0000c594 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    c594:	ldr	r3, [pc, #28]	; (c5b4 <usb_mtp_available+0x20>)
    c596:	ldrb	r3, [r3, #0]
    c598:	and.w	r0, r3, #255	; 0xff
    c59c:	cbz	r3, c5b2 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    c59e:	ldr	r3, [pc, #24]	; (c5b8 <usb_mtp_available+0x24>)
    c5a0:	ldrb	r2, [r3, #0]
    c5a2:	ldr	r3, [pc, #24]	; (c5bc <usb_mtp_available+0x28>)
    c5a4:	ldrb	r3, [r3, #0]
    c5a6:	cmp	r2, r3
    c5a8:	beq.n	c5b0 <usb_mtp_available+0x1c>
    c5aa:	ldr	r3, [pc, #20]	; (c5c0 <usb_mtp_available+0x2c>)
    c5ac:	ldrh	r0, [r3, #0]
    c5ae:	bx	lr
	if (!usb_configuration) return 0;
    c5b0:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    c5b2:	bx	lr
    c5b4:	.word	0x20010bd9
    c5b8:	.word	0x20010bc2
    c5bc:	.word	0x20010bd2
    c5c0:	.word	0x200109c6

0000c5c4 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    c5c4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    c5c8:	ldr	r6, [pc, #164]	; (c670 <usb_mtp_send+0xac>)
{
    c5ca:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    c5cc:	ldr	r7, [pc, #164]	; (c674 <usb_mtp_send+0xb0>)
{
    c5ce:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    c5d0:	ldrb	r3, [r6, #0]
{
    c5d2:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    c5d4:	ldr.w	r9, [pc, #168]	; c680 <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    c5d8:	add.w	r7, r7, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c5dc:	ldr.w	fp, [pc, #164]	; c684 <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    c5e0:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    c5e4:	ldrb.w	r3, [fp]
    c5e8:	cmp	r3, #0
    c5ea:	beq.n	c664 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    c5ec:	mov	r0, r7
    c5ee:	bl	b7b0 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    c5f2:	lsls	r3, r0, #24
    c5f4:	bpl.n	c608 <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c5f6:	ldr.w	r3, [r9]
    c5fa:	sub.w	r3, r3, sl
    c5fe:	cmp	r3, r5
    c600:	bhi.n	c66a <usb_mtp_send+0xa6>
		yield();
    c602:	bl	c730 <yield>
	while (1) {
    c606:	b.n	c5e4 <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c608:	ldrb	r3, [r6, #0]
	memcpy(txdata, buffer, len);
    c60a:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c60c:	ldr	r5, [pc, #104]	; (c678 <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    c60e:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c610:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    c614:	mov	r0, r5
    c616:	bl	a56c <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    c61a:	ldr	r2, [pc, #96]	; (c67c <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c61c:	mov	r3, r5
    c61e:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c620:	add	r2, r5
	asm("dsb");
    c622:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c626:	mov.w	r1, #3758153728	; 0xe000e000
    c62a:	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    c62e:	adds	r3, #32
	} while (location < end_addr);
    c630:	cmp	r2, r3
    c632:	bhi.n	c62a <usb_mtp_send+0x66>
	asm("dsb");
    c634:	dsb	sy
	asm("isb");
    c638:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    c63c:	movs	r3, #0
    c63e:	mov	r2, r4
    c640:	mov	r1, r5
    c642:	mov	r0, r7
    c644:	bl	b744 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    c648:	movs	r0, #4
    c64a:	mov	r1, r7
    c64c:	bl	b770 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c650:	ldrb	r3, [r6, #0]
	return len;
    c652:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    c654:	adds	r3, #1
    c656:	uxtb	r3, r3
    c658:	cmp	r3, #3
    c65a:	it	hi
    c65c:	movhi	r3, #0
    c65e:	strb	r3, [r6, #0]
}
    c660:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c664:	mov.w	r0, #4294967295
    c668:	b.n	c660 <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c66a:	movs	r0, #0
    c66c:	b.n	c660 <usb_mtp_send+0x9c>
    c66e:	nop
    c670:	.word	0x20010bd6
    c674:	.word	0x2000c140
    c678:	.word	0x20204800
    c67c:	.word	0x20010a4c
    c680:	.word	0x2001094c
    c684:	.word	0x20010bd9

0000c688 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c688:	ldr	r3, [pc, #68]	; (c6d0 <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    c68a:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c68c:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    c690:	ldr	r3, [pc, #64]	; (c6d4 <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c692:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    c696:	cmp	r0, r3
{
    c698:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    c69a:	it	cc
    c69c:	movcc	r3, #10
{
    c69e:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    c6a0:	it	cc
    c6a2:	mulcc	r0, r3
	ultoa(num, buf, 10);
    c6a4:	add	r1, sp, #4
    c6a6:	bl	b7d8 <ultoa>
	for (i=0; i<10; i++) {
    c6aa:	ldr	r0, [pc, #44]	; (c6d8 <usb_init_serialnumber+0x50>)
    c6ac:	add	r2, sp, #4
    c6ae:	movs	r1, #0
    c6b0:	mov	r5, r0
		char c = buf[i];
    c6b2:	ldrb.w	r4, [r2], #1
		if (!c) break;
    c6b6:	mov	r3, r1
	for (i=0; i<10; i++) {
    c6b8:	adds	r1, #1
		if (!c) break;
    c6ba:	cbz	r4, c6c6 <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    c6bc:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    c6be:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    c6c2:	bne.n	c6b2 <usb_init_serialnumber+0x2a>
    c6c4:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c6c6:	adds	r3, #1
    c6c8:	lsls	r3, r3, #1
    c6ca:	strb	r3, [r5, #0]
}
    c6cc:	add	sp, #20
    c6ce:	pop	{r4, r5, pc}
    c6d0:	.word	0x401f4400
    c6d4:	.word	0x00989680
    c6d8:	.word	0x200093fa

0000c6dc <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    c6dc:	ldr	r1, [pc, #68]	; (c724 <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    c6de:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    c6e0:	ldr	r3, [r1, #0]
    c6e2:	cbz	r3, c6f8 <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c6e4:	mrs	r3, IPSR
		if (ipsr != 0) return;
    c6e8:	cbnz	r3, c6f8 <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c6ea:	mrs	r2, PRIMASK
		__disable_irq();
    c6ee:	cpsid	i
		EventResponder *first = firstYield;
    c6f0:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    c6f2:	cbnz	r0, c6fa <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c6f4:	cbnz	r2, c6f8 <EventResponder::runFromYield()+0x1c>
    c6f6:	cpsie	i
	}
    c6f8:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    c6fa:	ldr	r4, [pc, #44]	; (c728 <EventResponder::runFromYield()+0x4c>)
    c6fc:	ldrb	r5, [r4, #0]
    c6fe:	cmp	r5, #0
    c700:	bne.n	c6f4 <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    c702:	movs	r3, #1
    c704:	strb	r3, [r4, #0]
		firstYield = first->_next;
    c706:	ldr	r3, [r0, #20]
    c708:	str	r3, [r1, #0]
		if (firstYield) {
    c70a:	cbz	r3, c71e <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    c70c:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c70e:	cbnz	r2, c712 <EventResponder::runFromYield()+0x36>
    c710:	cpsie	i
		first->_triggered = false;
    c712:	movs	r5, #0
		(*(first->_function))(*first);
    c714:	ldr	r3, [r0, #8]
		first->_triggered = false;
    c716:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c718:	blx	r3
		runningFromYield = false;
    c71a:	strb	r5, [r4, #0]
    c71c:	b.n	c6f8 <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    c71e:	ldr	r1, [pc, #12]	; (c72c <EventResponder::runFromYield()+0x50>)
    c720:	str	r3, [r1, #0]
    c722:	b.n	c70e <EventResponder::runFromYield()+0x32>
    c724:	.word	0x2000fc04
    c728:	.word	0x20010b13
    c72c:	.word	0x2000fc10

0000c730 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    c730:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    c734:	ldr	r3, [pc, #92]	; (c794 <yield+0x64>)
    c736:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    c738:	cbz	r4, c762 <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    c73a:	ldr	r5, [pc, #92]	; (c798 <yield+0x68>)
    c73c:	ldrb	r3, [r5, #0]
    c73e:	cbnz	r3, c762 <yield+0x32>
	running = 1;
    c740:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c742:	lsls	r1, r4, #31
	running = 1;
    c744:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c746:	bpl.n	c752 <yield+0x22>
    c748:	bl	aa54 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c74c:	cbz	r0, c752 <yield+0x22>
    c74e:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c752:	lsls	r2, r4, #30
    c754:	bmi.n	c788 <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    c756:	movs	r3, #0
    c758:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    c75a:	lsls	r3, r4, #29
    c75c:	bpl.n	c762 <yield+0x32>
		EventResponder::runFromYield();
    c75e:	bl	c6dc <EventResponder::runFromYield()>
	}
};
    c762:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    c766:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c76a:	ldr	r3, [r7, #0]
    c76c:	mov	r0, r7
    c76e:	ldr	r3, [r3, #16]
    c770:	blx	r3
    c772:	cbz	r0, c77a <yield+0x4a>
    c774:	ldr	r3, [r7, #20]
    c776:	ldr	r3, [r3, #8]
    c778:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c77a:	adds	r6, #1
    c77c:	ldrb.w	r2, [r8]
    c780:	uxtb	r3, r6
    c782:	cmp	r2, r3
    c784:	bhi.n	c766 <yield+0x36>
    c786:	b.n	c756 <yield+0x26>
    c788:	movs	r6, #0
    c78a:	ldr.w	r8, [pc, #16]	; c79c <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    c78e:	ldr.w	r9, [pc, #16]	; c7a0 <yield+0x70>
    c792:	b.n	c77c <yield+0x4c>
    c794:	.word	0x20010bdc
    c798:	.word	0x20010b15
    c79c:	.word	0x20010b14
    c7a0:	.word	0x2000fc14

0000c7a4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    c7a4:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c7a6:	ldr	r5, [pc, #44]	; (c7d4 <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    c7a8:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    c7aa:	ldr	r6, [pc, #44]	; (c7d8 <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c7ac:	mrs	r2, PRIMASK
		__disable_irq();
    c7b0:	cpsid	i
		EventResponder *first = firstInterrupt;
    c7b2:	ldr	r0, [r5, #0]
		if (first) {
    c7b4:	cbz	r0, c7ce <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    c7b6:	ldr	r3, [r0, #20]
    c7b8:	str	r3, [r5, #0]
			if (firstInterrupt) {
    c7ba:	cbz	r3, c7ca <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    c7bc:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    c7be:	cbnz	r2, c7c2 <EventResponder::runFromInterrupt()+0x1e>
    c7c0:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    c7c2:	ldr	r3, [r0, #8]
			first->_triggered = false;
    c7c4:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    c7c6:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    c7c8:	b.n	c7ac <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    c7ca:	str	r3, [r6, #0]
    c7cc:	b.n	c7be <EventResponder::runFromInterrupt()+0x1a>
    c7ce:	cbnz	r2, c7d2 <EventResponder::runFromInterrupt()+0x2e>
    c7d0:	cpsie	i
}
    c7d2:	pop	{r4, r5, r6, pc}
    c7d4:	.word	0x2000fc0c
    c7d8:	.word	0x2000fc08

0000c7dc <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c7dc:	b.w	c7a4 <EventResponder::runFromInterrupt()>

0000c7e0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c7e0:	ldr	r3, [pc, #16]	; (c7f4 <systick_isr+0x14>)
    c7e2:	ldr	r2, [r3, #4]
    c7e4:	ldr	r3, [pc, #16]	; (c7f8 <systick_isr+0x18>)
    c7e6:	str	r2, [r3, #0]
	systick_millis_count++;
    c7e8:	ldr	r2, [pc, #16]	; (c7fc <systick_isr+0x1c>)
    c7ea:	ldr	r3, [r2, #0]
    c7ec:	adds	r3, #1
    c7ee:	str	r3, [r2, #0]
}
    c7f0:	bx	lr
    c7f2:	nop
    c7f4:	.word	0xe0001000
    c7f8:	.word	0x20010948
    c7fc:	.word	0x2001094c

0000c800 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c800:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    c802:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c804:	ldr	r4, [pc, #136]	; (c890 <DMAChannel::begin(bool)+0x90>)
    c806:	cbnz	r1, c82c <DMAChannel::begin(bool)+0x2c>
    c808:	ldr	r1, [r0, #0]
    c80a:	cbz	r1, c82c <DMAChannel::begin(bool)+0x2c>
    c80c:	ldrb	r3, [r0, #4]
    c80e:	cmp	r3, #15
    c810:	bhi.n	c82c <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    c812:	ldrh	r2, [r4, #0]
    c814:	asrs	r2, r3
    c816:	lsls	r2, r2, #31
    c818:	bpl.n	c82c <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c81a:	add.w	r3, r3, #33554432	; 0x2000000
    c81e:	add.w	r3, r3, #29824	; 0x7480
    c822:	cmp.w	r1, r3, lsl #5
    c826:	bne.n	c82c <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    c828:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c82a:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c82c:	ldrh	r1, [r4, #0]
    c82e:	movs	r3, #0
    c830:	asr.w	r2, r1, r3
    c834:	ands.w	r2, r2, #1
    c838:	bne.n	c880 <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    c83a:	movs	r5, #1
    c83c:	lsls	r5, r3
    c83e:	orrs	r1, r5
    c840:	strh	r1, [r4, #0]
			__enable_irq();
    c842:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c844:	ldr	r5, [pc, #76]	; (c894 <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    c846:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c848:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    c84c:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c84e:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c850:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c854:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c858:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c85a:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c85c:	movw	r5, #1154	; 0x482
    c860:	ldr	r1, [pc, #52]	; (c898 <DMAChannel::begin(bool)+0x98>)
    c862:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    c864:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    c866:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    c868:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    c86a:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c86c:	str	r3, [r0, #0]
	*p++ = 0;
    c86e:	strd	r2, r2, [r3]
	*p++ = 0;
    c872:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c876:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c87a:	strd	r2, r2, [r3, #24]
    c87e:	b.n	c82a <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    c880:	adds	r3, #1
    c882:	cmp	r3, #16
    c884:	bne.n	c830 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    c886:	cpsie	i
			TCD = (TCD_t *)0;
    c888:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c88a:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c88c:	str	r2, [r0, #0]
			return; // no more channels available
    c88e:	b.n	c82a <DMAChannel::begin(bool)+0x2a>
    c890:	.word	0x2001099e
    c894:	.word	0x400fc000
    c898:	.word	0x400e8000

0000c89c <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c89c:	ldrb	r3, [r0, #4]
    c89e:	cmp	r3, #15
    c8a0:	bhi.n	c8c2 <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    c8a2:	ldr	r2, [pc, #32]	; (c8c4 <DMAChannel::release()+0x28>)
    c8a4:	strb	r3, [r2, #26]
	__disable_irq();
    c8a6:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c8a8:	ldr	r1, [pc, #28]	; (c8c8 <DMAChannel::release()+0x2c>)
    c8aa:	movs	r2, #1
    c8ac:	ldrb	r3, [r0, #4]
    c8ae:	lsls	r2, r3
    c8b0:	ldrh	r3, [r1, #0]
    c8b2:	bic.w	r3, r3, r2
    c8b6:	strh	r3, [r1, #0]
	__enable_irq();
    c8b8:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c8ba:	movs	r3, #16
    c8bc:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    c8be:	movs	r3, #0
    c8c0:	str	r3, [r0, #0]
}
    c8c2:	bx	lr
    c8c4:	.word	0x400e8000
    c8c8:	.word	0x2001099e

0000c8cc <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    c8cc:	push	{r3, lr}
    c8ce:	bl	cca <Print::write(char const*)>
    c8d2:	pop	{r3, pc}

0000c8d4 <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    c8d4:	movs	r3, #0
    c8d6:	movs	r2, #10
    c8d8:	b.w	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c8dc <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    c8dc:	movs	r3, #0
    c8de:	uxtb	r2, r2
    c8e0:	b.w	ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c8e4 <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    c8e4:	push	{r3, r4, r5, lr}
    c8e6:	mov	r5, r0
    c8e8:	bl	c8dc <Print::print(unsigned long, int)>
    c8ec:	mov	r4, r0
    c8ee:	mov	r0, r5
    c8f0:	bl	ca38 <Print::println()>
    c8f4:	add	r0, r4
    c8f6:	pop	{r3, r4, r5, pc}

0000c8f8 <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    c8f8:	movs	r2, #0
    c8fa:	movs	r3, #1
    c8fc:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    c8fe:	push	{r4, lr}
		while (len > 0) {
    c900:	cmp	r1, #0
    c902:	sub.w	r4, r0, r1
    c906:	bgt.n	c910 <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    c908:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    c90a:	orr.w	r0, r3, r2, lsl #16
    c90e:	pop	{r4, pc}
			a += *p++;
    c910:	ldrh	r4, [r4, #0]
			len -= 2;
    c912:	subs	r1, #2
			a += *p++;
    c914:	uxtah	r3, r3, r4
			b += a;
    c918:	add	r2, r3
			len -= 2;
    c91a:	b.n	c900 <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000c91c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c91c:	b.w	aa68 <usb_serial_flush_input>

0000c920 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c920:	b.w	aa10 <usb_serial_peekchar>

0000c924 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c924:	b.w	aac8 <usb_serial_getchar>

0000c928 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c928:	b.w	aa54 <usb_serial_available>

0000c92c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c92c:	b.w	acd8 <usb_serial_flush_output>

0000c930 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c930:	b.w	ac8c <usb_serial_write_buffer_free>

0000c934 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c934:	mov	r0, r1
    c936:	mov	r1, r2
    c938:	b.w	aae8 <usb_serial_write>

0000c93c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c93c:	mov	r0, r1
    c93e:	b.w	ac74 <usb_serial_putchar>

0000c942 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c942:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c944:	bl	760 <setup>
	while (1) {
		loop();
    c948:	bl	258 <loop>
		yield();
    c94c:	bl	c730 <yield>
	while (1) {
    c950:	b.n	c948 <main+0x6>
	...

0000c954 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    c954:	push	{r4, r5, r6, lr}
    c956:	ldr	r5, [pc, #36]	; (c97c <Stream::timedRead()+0x28>)
    c958:	mov	r4, r0
    c95a:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    c95c:	ldr	r3, [r4, #0]
    c95e:	mov	r0, r4
    c960:	ldr	r3, [r3, #20]
    c962:	blx	r3
    if (c >= 0) return c;
    c964:	cmp	r0, #0
    c966:	bge.n	c97a <Stream::timedRead()+0x26>
    yield();
    c968:	bl	c730 <yield>
    c96c:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c96e:	ldr	r2, [r4, #8]
    c970:	subs	r3, r3, r6
    c972:	cmp	r3, r2
    c974:	bcc.n	c95c <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    c976:	mov.w	r0, #4294967295
}
    c97a:	pop	{r4, r5, r6, pc}
    c97c:	.word	0x2001094c

0000c980 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    c980:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c984:	mov	r6, r0
    c986:	mov	r7, r1
    c988:	mov	r4, r3
	if (buffer == nullptr) return 0;
    c98a:	mov	r5, r2
    c98c:	cbz	r2, c9be <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    c98e:	cbz	r3, c9b0 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    c990:	add.w	r8, r3, #4294967295
	size_t index = 0;
    c994:	movs	r4, #0
	while (index < length) {
    c996:	cmp	r4, r8
    c998:	bcs.n	c9ac <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    c99a:	mov	r0, r6
    c99c:	bl	c954 <Stream::timedRead()>
		if (c == terminator) break;
    c9a0:	cmp	r7, r0
    c9a2:	beq.n	c9ac <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    c9a4:	cmp	r0, #0
    c9a6:	bge.n	c9b6 <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    c9a8:	movs	r3, #1
    c9aa:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    c9ac:	movs	r3, #0
    c9ae:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    c9b0:	mov	r0, r4
    c9b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    c9b6:	adds	r4, #1
		*buffer++ = (char)c;
    c9b8:	strb.w	r0, [r5], #1
		index++;
    c9bc:	b.n	c996 <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    c9be:	mov	r4, r2
    c9c0:	b.n	c9b0 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000c9c2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c9c2:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c9c4:	push	{r4, r5, r6, r7, lr}
		base = 10;
    c9c6:	it	eq
    c9c8:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c9ca:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    c9cc:	cbnz	r1, c9fa <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    c9ce:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    c9d0:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    c9d2:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c9d6:	cbz	r3, c9e8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    c9d8:	subs	r3, r4, #1
		buf[i] = '-';
    c9da:	add	r2, sp, #40	; 0x28
		i--;
    c9dc:	uxtb	r4, r3
		buf[i] = '-';
    c9de:	uxtab	r3, r2, r3
    c9e2:	movs	r2, #45	; 0x2d
    c9e4:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c9e8:	ldr	r3, [r0, #0]
    c9ea:	add	r1, sp, #4
    c9ec:	rsb	r2, r4, #34	; 0x22
    c9f0:	ldr	r3, [r3, #4]
    c9f2:	add	r1, r4
    c9f4:	blx	r3
}
    c9f6:	add	sp, #44	; 0x2c
    c9f8:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    c9fa:	movs	r4, #33	; 0x21
			digit = n % base;
    c9fc:	udiv	r6, r1, r2
    ca00:	mls	r7, r2, r6, r1
    ca04:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ca06:	cmp	r7, #9
    ca08:	add.w	r7, r4, #40	; 0x28
    ca0c:	ite	ls
    ca0e:	addls	r5, #48	; 0x30
    ca10:	addhi	r5, #55	; 0x37
    ca12:	add	r7, sp
			if (n == 0) break;
    ca14:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ca16:	uxtb	r5, r5
    ca18:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    ca1c:	bhi.n	c9d6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    ca1e:	subs	r4, #1
			n /= base;
    ca20:	mov	r1, r6
			i--;
    ca22:	uxtb	r4, r4
			digit = n % base;
    ca24:	b.n	c9fc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000ca26 <Print::print(long)>:
	if (n < 0) {
    ca26:	cmp	r1, #0
		n = -n;
    ca28:	mov.w	r2, #10
    ca2c:	itte	lt
    ca2e:	neglt	r1, r1
		sign = '-';
    ca30:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    ca32:	movge	r3, #0
	if (base == 0) {
    ca34:	b.w	c9c2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000ca38 <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    ca38:	movw	r3, #2573	; 0xa0d
{
    ca3c:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    ca3e:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    ca42:	movs	r2, #2
    ca44:	ldr	r3, [r0, #0]
    ca46:	add	r1, sp, #4
    ca48:	ldr	r3, [r3, #4]
    ca4a:	blx	r3
}
    ca4c:	add	sp, #12
    ca4e:	ldr.w	pc, [sp], #4
	...

0000ca54 <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    ca54:	ldr	r3, [pc, #20]	; (ca6c <_write+0x18>)
    ca56:	cmp	r0, #2
    ca58:	it	hi
    ca5a:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    ca5c:	ldr	r0, [r3, #0]
{
    ca5e:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    ca60:	ldr	r4, [r0, #4]
    ca62:	mov	r0, r3
    ca64:	mov	r3, r4
}
    ca66:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    ca6a:	bx	r3
    ca6c:	.word	0x20008a64

0000ca70 <Print::printf(char const*, ...)>:
{
    ca70:	push	{r1, r2, r3}
    ca72:	push	{r0, r1, lr}
    ca74:	add	r2, sp, #12
    ca76:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    ca7a:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    ca7c:	bl	ec90 <vdprintf>
}
    ca80:	add	sp, #8
    ca82:	ldr.w	lr, [sp], #4
    ca86:	add	sp, #12
    ca88:	bx	lr

0000ca8a <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    ca8a:	push	{r4, r5}
	if (base == 0) {
    ca8c:	cbnz	r2, ca98 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    ca8e:	ldr	r3, [r0, #0]
    ca90:	uxtb	r1, r1
    ca92:	ldr	r3, [r3, #0]
}
    ca94:	pop	{r4, r5}
		return write((uint8_t)n);
    ca96:	bx	r3
}
    ca98:	pop	{r4, r5}
    ca9a:	b.w	c9c2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000ca9e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    ca9e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    caa2:	sub	sp, #72	; 0x48
    caa4:	mov	r8, r0
    caa6:	mov	r7, r2
    caa8:	mov	r6, r3
    caaa:	ldrb.w	r9, [sp, #104]	; 0x68
    caae:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    cab2:	cmp.w	r9, #1
    cab6:	bls.n	cb2a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    cab8:	orrs.w	r3, r2, r6
    cabc:	bne.n	caf4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    cabe:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    cac0:	movs	r5, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    cac2:	strb.w	r3, [sp, #69]	; 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    cac6:	cmp.w	sl, #0
    caca:	beq.n	cadc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    cacc:	subs	r3, r5, #1
		buf[i] = '-';
    cace:	add	r2, sp, #72	; 0x48
		i--;
    cad0:	uxtb	r5, r3
		buf[i] = '-';
    cad2:	uxtab	r3, r2, r3
    cad6:	movs	r2, #45	; 0x2d
    cad8:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    cadc:	ldr.w	r3, [r8]
    cae0:	add	r1, sp, #4
    cae2:	rsb	r2, r5, #66	; 0x42
    cae6:	mov	r0, r8
    cae8:	ldr	r3, [r3, #4]
    caea:	add	r1, r5
    caec:	blx	r3
}
    caee:	add	sp, #72	; 0x48
    caf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    caf4:	movs	r5, #65	; 0x41
			digit = n % base;
    caf6:	mov	r1, r6
    caf8:	mov	r2, r9
    cafa:	movs	r3, #0
    cafc:	mov	r0, r7
    cafe:	bl	cc6c <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cb02:	add.w	r3, r5, #72	; 0x48
			digit = n % base;
    cb06:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cb08:	add	r3, sp
    cb0a:	cmp	r4, #9
    cb0c:	ite	ls
    cb0e:	addls	r4, #48	; 0x30
    cb10:	addhi	r4, #55	; 0x37
			if (n == 0) break;
    cb12:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cb14:	uxtb	r4, r4
			if (n == 0) break;
    cb16:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cb1a:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    cb1e:	bcc.n	cac6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    cb20:	subs	r5, #1
			n /= base;
    cb22:	mov	r7, r0
    cb24:	mov	r6, r1
			i--;
    cb26:	uxtb	r5, r5
			digit = n % base;
    cb28:	b.n	caf6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    cb2a:	movs	r0, #0
    cb2c:	b.n	caee <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
	...

0000cb30 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    cb30:	vcmp.f64	d0, d0
{
    cb34:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    cb36:	vmrs	APSR_nzcv, fpscr
{
    cb3a:	mov	r6, r0
    cb3c:	mov	r5, r1
    cb3e:	vpush	{d8-d9}
    cb42:	sub	sp, #28
	if (isnan(number)) return print("nan");
    cb44:	bvc.n	cb58 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    cb46:	ldr	r1, [pc, #264]	; (cc50 <Print::printFloat(double, unsigned char)+0x120>)
    cb48:	bl	cca <Print::write(char const*)>
    cb4c:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    cb4e:	mov	r0, r4
    cb50:	add	sp, #28
    cb52:	vpop	{d8-d9}
    cb56:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    cb58:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    cb5c:	vldr	d6, [pc, #208]	; cc30 <Print::printFloat(double, unsigned char)+0x100>
    cb60:	vcmp.f64	d7, d6
    cb64:	vmrs	APSR_nzcv, fpscr
    cb68:	ble.n	cb6e <Print::printFloat(double, unsigned char)+0x3e>
    cb6a:	ldr	r1, [pc, #232]	; (cc54 <Print::printFloat(double, unsigned char)+0x124>)
    cb6c:	b.n	cb48 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    cb6e:	vldr	d7, [pc, #200]	; cc38 <Print::printFloat(double, unsigned char)+0x108>
    cb72:	vcmpe.f64	d0, d7
    cb76:	vmrs	APSR_nzcv, fpscr
    cb7a:	ble.n	cb82 <Print::printFloat(double, unsigned char)+0x52>
    cb7c:	ldr	r1, [pc, #216]	; (cc58 <Print::printFloat(double, unsigned char)+0x128>)
    cb7e:	mov	r0, r6
    cb80:	b.n	cb48 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    cb82:	vldr	d7, [pc, #188]	; cc40 <Print::printFloat(double, unsigned char)+0x110>
    cb86:	vcmpe.f64	d0, d7
    cb8a:	vmrs	APSR_nzcv, fpscr
    cb8e:	bmi.n	cb7c <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    cb90:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    cb94:	movs	r2, #0
	double rounding = 0.5;
    cb96:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    cb9a:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    cb9e:	vldr	d6, [pc, #168]	; cc48 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    cba2:	itte	mi
    cba4:	vnegmi.f64	d0, d0
		sign = 1;
    cba8:	movmi	r3, #1
	uint8_t sign=0;
    cbaa:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    cbac:	uxtb	r1, r2
    cbae:	cmp	r5, r1
    cbb0:	bhi.n	cc00 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    cbb2:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    cbb6:	movs	r2, #10
    cbb8:	mov	r0, r6
    cbba:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    cbbe:	vmov	r1, s18
    cbc2:	bl	c9c2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    cbc6:	mov	r4, r0
	if (digits > 0) {
    cbc8:	cmp	r5, #0
    cbca:	beq.n	cb4e <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    cbcc:	vcvt.f64.u32	d0, s18
    cbd0:	cmp	r5, #15
    cbd2:	add	r0, sp, #8
			remainder *= 10.0;
    cbd4:	vmov.f64	d6, #36	; 0x41200000  10.0
    cbd8:	it	cs
    cbda:	movcs	r5, #15
		buf[0] = '.';
    cbdc:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    cbde:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    cbe2:	mov	r1, r0
    cbe4:	mov	r2, r5
    cbe6:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    cbea:	subs	r2, #1
    cbec:	uxtb	r2, r2
    cbee:	cmp	r2, #255	; 0xff
    cbf0:	bne.n	cc08 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    cbf2:	adds	r5, #1
    cbf4:	ldr	r3, [r6, #0]
    cbf6:	mov	r0, r6
    cbf8:	ldr	r3, [r3, #4]
    cbfa:	uxtb	r2, r5
    cbfc:	blx	r3
    cbfe:	b.n	cb4e <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    cc00:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    cc04:	adds	r2, #1
    cc06:	b.n	cbac <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    cc08:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    cc0c:	vcvt.u32.f64	s15, d0
    cc10:	vstr	s15, [sp, #4]
    cc14:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    cc18:	vmov	s15, r3
			buf[count++] = '0' + n;
    cc1c:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    cc20:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    cc24:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    cc28:	vsub.f64	d0, d0, d7
    cc2c:	b.n	cbea <Print::printFloat(double, unsigned char)+0xba>
    cc2e:	nop
    cc30:	.word	0xffffffff
    cc34:	.word	0x7fefffff
    cc38:	.word	0xe0000000
    cc3c:	.word	0x41efffff
    cc40:	.word	0xe0000000
    cc44:	.word	0xc1efffff
    cc48:	.word	0xa0000000
    cc4c:	.word	0x3fb99999
    cc50:	.word	0x20007fd2
    cc54:	.word	0x20007fd6
    cc58:	.word	0x20007fda

0000cc5c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    cc5c:	b.w	cf78 <free>

0000cc60 <__aeabi_atexit>:
    cc60:	mov	r3, r0
    cc62:	mov	r0, r1
    cc64:	mov	r1, r3
    cc66:	b.w	e8b4 <__cxa_atexit>
    cc6a:	nop

0000cc6c <__aeabi_uldivmod>:
    cc6c:	cbnz	r3, cc84 <__aeabi_uldivmod+0x18>
    cc6e:	cbnz	r2, cc84 <__aeabi_uldivmod+0x18>
    cc70:	cmp	r1, #0
    cc72:	it	eq
    cc74:	cmpeq	r0, #0
    cc76:	itt	ne
    cc78:	movne.w	r1, #4294967295
    cc7c:	movne.w	r0, #4294967295
    cc80:	b.w	cf64 <__aeabi_idiv0>
    cc84:	sub.w	ip, sp, #8
    cc88:	strd	ip, lr, [sp, #-16]!
    cc8c:	bl	cc9c <__udivmoddi4>
    cc90:	ldr.w	lr, [sp, #4]
    cc94:	ldrd	r2, r3, [sp, #8]
    cc98:	add	sp, #16
    cc9a:	bx	lr

0000cc9c <__udivmoddi4>:
    cc9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cca0:	ldr	r6, [sp, #32]
    cca2:	mov	r5, r1
    cca4:	mov	r4, r0
    cca6:	mov	r7, r1
    cca8:	cmp	r3, #0
    ccaa:	bne.n	cd42 <__udivmoddi4+0xa6>
    ccac:	cmp	r2, r1
    ccae:	mov	ip, r2
    ccb0:	bls.n	cd7e <__udivmoddi4+0xe2>
    ccb2:	clz	r3, r2
    ccb6:	cbz	r3, ccca <__udivmoddi4+0x2e>
    ccb8:	lsl.w	ip, r2, r3
    ccbc:	rsb	r2, r3, #32
    ccc0:	lsls	r7, r3
    ccc2:	lsr.w	r2, r0, r2
    ccc6:	orrs	r7, r2
    ccc8:	lsls	r4, r3
    ccca:	mov.w	lr, ip, lsr #16
    ccce:	uxth.w	r5, ip
    ccd2:	udiv	r1, r7, lr
    ccd6:	lsrs	r2, r4, #16
    ccd8:	mls	r7, lr, r1, r7
    ccdc:	orr.w	r2, r2, r7, lsl #16
    cce0:	mul.w	r0, r1, r5
    cce4:	cmp	r0, r2
    cce6:	bls.n	ccfe <__udivmoddi4+0x62>
    cce8:	adds.w	r2, ip, r2
    ccec:	add.w	r7, r1, #4294967295
    ccf0:	bcs.w	cf2c <__udivmoddi4+0x290>
    ccf4:	cmp	r0, r2
    ccf6:	bls.w	cf2c <__udivmoddi4+0x290>
    ccfa:	subs	r1, #2
    ccfc:	add	r2, ip
    ccfe:	subs	r2, r2, r0
    cd00:	uxth	r4, r4
    cd02:	udiv	r0, r2, lr
    cd06:	mls	r2, lr, r0, r2
    cd0a:	orr.w	r4, r4, r2, lsl #16
    cd0e:	mul.w	r5, r0, r5
    cd12:	cmp	r5, r4
    cd14:	bls.n	cd2c <__udivmoddi4+0x90>
    cd16:	adds.w	r4, ip, r4
    cd1a:	add.w	r2, r0, #4294967295
    cd1e:	bcs.w	cf30 <__udivmoddi4+0x294>
    cd22:	cmp	r5, r4
    cd24:	bls.w	cf30 <__udivmoddi4+0x294>
    cd28:	add	r4, ip
    cd2a:	subs	r0, #2
    cd2c:	orr.w	r0, r0, r1, lsl #16
    cd30:	subs	r4, r4, r5
    cd32:	movs	r1, #0
    cd34:	cbz	r6, cd3e <__udivmoddi4+0xa2>
    cd36:	lsrs	r4, r3
    cd38:	movs	r3, #0
    cd3a:	strd	r4, r3, [r6]
    cd3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd42:	cmp	r3, r1
    cd44:	bls.n	cd58 <__udivmoddi4+0xbc>
    cd46:	cmp	r6, #0
    cd48:	beq.w	cf26 <__udivmoddi4+0x28a>
    cd4c:	movs	r1, #0
    cd4e:	strd	r0, r5, [r6]
    cd52:	mov	r0, r1
    cd54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd58:	clz	r1, r3
    cd5c:	cmp	r1, #0
    cd5e:	bne.n	cdf4 <__udivmoddi4+0x158>
    cd60:	cmp	r3, r5
    cd62:	bcc.n	cd6a <__udivmoddi4+0xce>
    cd64:	cmp	r2, r0
    cd66:	bhi.w	cf5a <__udivmoddi4+0x2be>
    cd6a:	subs	r4, r0, r2
    cd6c:	sbc.w	r2, r5, r3
    cd70:	movs	r0, #1
    cd72:	mov	r7, r2
    cd74:	cmp	r6, #0
    cd76:	beq.n	cd3e <__udivmoddi4+0xa2>
    cd78:	strd	r4, r7, [r6]
    cd7c:	b.n	cd3e <__udivmoddi4+0xa2>
    cd7e:	cbnz	r2, cd82 <__udivmoddi4+0xe6>
    cd80:	udf	#255	; 0xff
    cd82:	clz	r3, r2
    cd86:	cmp	r3, #0
    cd88:	bne.w	ceac <__udivmoddi4+0x210>
    cd8c:	subs	r2, r1, r2
    cd8e:	mov.w	r7, ip, lsr #16
    cd92:	uxth.w	lr, ip
    cd96:	movs	r1, #1
    cd98:	udiv	r5, r2, r7
    cd9c:	mls	r0, r7, r5, r2
    cda0:	lsrs	r2, r4, #16
    cda2:	orr.w	r2, r2, r0, lsl #16
    cda6:	mul.w	r0, lr, r5
    cdaa:	cmp	r0, r2
    cdac:	bls.n	cdc0 <__udivmoddi4+0x124>
    cdae:	adds.w	r2, ip, r2
    cdb2:	add.w	r8, r5, #4294967295
    cdb6:	bcs.n	cdbe <__udivmoddi4+0x122>
    cdb8:	cmp	r0, r2
    cdba:	bhi.w	cf54 <__udivmoddi4+0x2b8>
    cdbe:	mov	r5, r8
    cdc0:	subs	r2, r2, r0
    cdc2:	uxth	r4, r4
    cdc4:	udiv	r0, r2, r7
    cdc8:	mls	r2, r7, r0, r2
    cdcc:	orr.w	r4, r4, r2, lsl #16
    cdd0:	mul.w	lr, lr, r0
    cdd4:	cmp	lr, r4
    cdd6:	bls.n	cdea <__udivmoddi4+0x14e>
    cdd8:	adds.w	r4, ip, r4
    cddc:	add.w	r2, r0, #4294967295
    cde0:	bcs.n	cde8 <__udivmoddi4+0x14c>
    cde2:	cmp	lr, r4
    cde4:	bhi.w	cf5e <__udivmoddi4+0x2c2>
    cde8:	mov	r0, r2
    cdea:	sub.w	r4, r4, lr
    cdee:	orr.w	r0, r0, r5, lsl #16
    cdf2:	b.n	cd34 <__udivmoddi4+0x98>
    cdf4:	rsb	r7, r1, #32
    cdf8:	lsls	r3, r1
    cdfa:	lsr.w	ip, r2, r7
    cdfe:	orr.w	ip, ip, r3
    ce02:	lsl.w	r4, r5, r1
    ce06:	lsr.w	r3, r0, r7
    ce0a:	lsrs	r5, r7
    ce0c:	mov.w	r9, ip, lsr #16
    ce10:	orrs	r3, r4
    ce12:	udiv	r8, r5, r9
    ce16:	uxth.w	lr, ip
    ce1a:	mls	r5, r9, r8, r5
    ce1e:	lsrs	r4, r3, #16
    ce20:	orr.w	r4, r4, r5, lsl #16
    ce24:	mul.w	r5, r8, lr
    ce28:	cmp	r5, r4
    ce2a:	lsl.w	r2, r2, r1
    ce2e:	lsl.w	r0, r0, r1
    ce32:	bls.n	ce4c <__udivmoddi4+0x1b0>
    ce34:	adds.w	r4, ip, r4
    ce38:	add.w	sl, r8, #4294967295
    ce3c:	bcs.w	cf50 <__udivmoddi4+0x2b4>
    ce40:	cmp	r5, r4
    ce42:	bls.w	cf50 <__udivmoddi4+0x2b4>
    ce46:	sub.w	r8, r8, #2
    ce4a:	add	r4, ip
    ce4c:	subs	r4, r4, r5
    ce4e:	uxth	r5, r3
    ce50:	udiv	r3, r4, r9
    ce54:	mls	r4, r9, r3, r4
    ce58:	orr.w	r4, r5, r4, lsl #16
    ce5c:	mul.w	lr, r3, lr
    ce60:	cmp	lr, r4
    ce62:	bls.n	ce76 <__udivmoddi4+0x1da>
    ce64:	adds.w	r4, ip, r4
    ce68:	add.w	r5, r3, #4294967295
    ce6c:	bcs.n	cf48 <__udivmoddi4+0x2ac>
    ce6e:	cmp	lr, r4
    ce70:	bls.n	cf48 <__udivmoddi4+0x2ac>
    ce72:	subs	r3, #2
    ce74:	add	r4, ip
    ce76:	orr.w	r3, r3, r8, lsl #16
    ce7a:	umull	r9, r5, r3, r2
    ce7e:	sub.w	r4, r4, lr
    ce82:	cmp	r4, r5
    ce84:	mov	r8, r9
    ce86:	mov	lr, r5
    ce88:	bcc.n	cf38 <__udivmoddi4+0x29c>
    ce8a:	beq.n	cf34 <__udivmoddi4+0x298>
    ce8c:	cbz	r6, cea4 <__udivmoddi4+0x208>
    ce8e:	subs.w	r2, r0, r8
    ce92:	sbc.w	r4, r4, lr
    ce96:	lsl.w	r7, r4, r7
    ce9a:	lsrs	r2, r1
    ce9c:	lsrs	r4, r1
    ce9e:	orrs	r7, r2
    cea0:	strd	r7, r4, [r6]
    cea4:	mov	r0, r3
    cea6:	movs	r1, #0
    cea8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ceac:	rsb	r1, r3, #32
    ceb0:	lsl.w	ip, r2, r3
    ceb4:	lsr.w	r2, r0, r1
    ceb8:	lsr.w	r1, r5, r1
    cebc:	lsls	r5, r3
    cebe:	orrs	r2, r5
    cec0:	mov.w	r7, ip, lsr #16
    cec4:	uxth.w	lr, ip
    cec8:	udiv	r0, r1, r7
    cecc:	mls	r5, r7, r0, r1
    ced0:	lsrs	r1, r2, #16
    ced2:	orr.w	r1, r1, r5, lsl #16
    ced6:	mul.w	r5, r0, lr
    ceda:	cmp	r5, r1
    cedc:	lsl.w	r4, r4, r3
    cee0:	bls.n	cef4 <__udivmoddi4+0x258>
    cee2:	adds.w	r1, ip, r1
    cee6:	add.w	r8, r0, #4294967295
    ceea:	bcs.n	cf4c <__udivmoddi4+0x2b0>
    ceec:	cmp	r5, r1
    ceee:	bls.n	cf4c <__udivmoddi4+0x2b0>
    cef0:	subs	r0, #2
    cef2:	add	r1, ip
    cef4:	subs	r1, r1, r5
    cef6:	uxth	r2, r2
    cef8:	udiv	r5, r1, r7
    cefc:	mls	r1, r7, r5, r1
    cf00:	orr.w	r2, r2, r1, lsl #16
    cf04:	mul.w	r1, r5, lr
    cf08:	cmp	r1, r2
    cf0a:	bls.n	cf1e <__udivmoddi4+0x282>
    cf0c:	adds.w	r2, ip, r2
    cf10:	add.w	r8, r5, #4294967295
    cf14:	bcs.n	cf44 <__udivmoddi4+0x2a8>
    cf16:	cmp	r1, r2
    cf18:	bls.n	cf44 <__udivmoddi4+0x2a8>
    cf1a:	subs	r5, #2
    cf1c:	add	r2, ip
    cf1e:	subs	r2, r2, r1
    cf20:	orr.w	r1, r5, r0, lsl #16
    cf24:	b.n	cd98 <__udivmoddi4+0xfc>
    cf26:	mov	r1, r6
    cf28:	mov	r0, r6
    cf2a:	b.n	cd3e <__udivmoddi4+0xa2>
    cf2c:	mov	r1, r7
    cf2e:	b.n	ccfe <__udivmoddi4+0x62>
    cf30:	mov	r0, r2
    cf32:	b.n	cd2c <__udivmoddi4+0x90>
    cf34:	cmp	r0, r9
    cf36:	bcs.n	ce8c <__udivmoddi4+0x1f0>
    cf38:	subs.w	r8, r9, r2
    cf3c:	sbc.w	lr, r5, ip
    cf40:	subs	r3, #1
    cf42:	b.n	ce8c <__udivmoddi4+0x1f0>
    cf44:	mov	r5, r8
    cf46:	b.n	cf1e <__udivmoddi4+0x282>
    cf48:	mov	r3, r5
    cf4a:	b.n	ce76 <__udivmoddi4+0x1da>
    cf4c:	mov	r0, r8
    cf4e:	b.n	cef4 <__udivmoddi4+0x258>
    cf50:	mov	r8, sl
    cf52:	b.n	ce4c <__udivmoddi4+0x1b0>
    cf54:	subs	r5, #2
    cf56:	add	r2, ip
    cf58:	b.n	cdc0 <__udivmoddi4+0x124>
    cf5a:	mov	r0, r1
    cf5c:	b.n	cd74 <__udivmoddi4+0xd8>
    cf5e:	add	r4, ip
    cf60:	subs	r0, #2
    cf62:	b.n	cdea <__udivmoddi4+0x14e>

0000cf64 <__aeabi_idiv0>:
    cf64:	bx	lr
    cf66:	nop

0000cf68 <malloc>:
    cf68:	ldr	r3, [pc, #8]	; (cf74 <malloc+0xc>)
    cf6a:	mov	r1, r0
    cf6c:	ldr	r0, [r3, #0]
    cf6e:	b.w	cf88 <_malloc_r>
    cf72:	nop
    cf74:	.word	0x200093cc

0000cf78 <free>:
    cf78:	ldr	r3, [pc, #8]	; (cf84 <free+0xc>)
    cf7a:	mov	r1, r0
    cf7c:	ldr	r0, [r3, #0]
    cf7e:	b.w	f7a4 <_free_r>
    cf82:	nop
    cf84:	.word	0x200093cc

0000cf88 <_malloc_r>:
    cf88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf8c:	add.w	r6, r1, #11
    cf90:	cmp	r6, #22
    cf92:	sub	sp, #12
    cf94:	mov	r4, r0
    cf96:	bhi.n	cfe2 <_malloc_r+0x5a>
    cf98:	cmp	r1, #16
    cf9a:	bhi.w	d112 <_malloc_r+0x18a>
    cf9e:	bl	d4e8 <__malloc_lock>
    cfa2:	movs	r6, #16
    cfa4:	movs	r2, #24
    cfa6:	movs	r0, #2
    cfa8:	ldr	r7, [pc, #724]	; (d280 <_malloc_r+0x2f8>)
    cfaa:	add	r2, r7
    cfac:	sub.w	r1, r2, #8
    cfb0:	ldr	r3, [r2, #4]
    cfb2:	cmp	r3, r1
    cfb4:	beq.w	d12c <_malloc_r+0x1a4>
    cfb8:	ldr	r2, [r3, #4]
    cfba:	ldr	r1, [r3, #12]
    cfbc:	bic.w	r2, r2, #3
    cfc0:	add	r2, r3
    cfc2:	ldr	r5, [r3, #8]
    cfc4:	str	r1, [r5, #12]
    cfc6:	str	r5, [r1, #8]
    cfc8:	ldr	r1, [r2, #4]
    cfca:	orr.w	r1, r1, #1
    cfce:	mov	r0, r4
    cfd0:	str	r1, [r2, #4]
    cfd2:	add.w	r5, r3, #8
    cfd6:	bl	d4f4 <__malloc_unlock>
    cfda:	mov	r0, r5
    cfdc:	add	sp, #12
    cfde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfe2:	bics.w	r6, r6, #7
    cfe6:	bmi.w	d112 <_malloc_r+0x18a>
    cfea:	cmp	r1, r6
    cfec:	bhi.w	d112 <_malloc_r+0x18a>
    cff0:	bl	d4e8 <__malloc_lock>
    cff4:	cmp.w	r6, #504	; 0x1f8
    cff8:	bcc.w	d330 <_malloc_r+0x3a8>
    cffc:	lsrs	r3, r6, #9
    cffe:	beq.w	d120 <_malloc_r+0x198>
    d002:	cmp	r3, #4
    d004:	bhi.w	d2e6 <_malloc_r+0x35e>
    d008:	lsrs	r3, r6, #6
    d00a:	add.w	r0, r3, #57	; 0x39
    d00e:	add.w	ip, r3, #56	; 0x38
    d012:	lsls	r3, r0, #3
    d014:	ldr	r7, [pc, #616]	; (d280 <_malloc_r+0x2f8>)
    d016:	add	r3, r7
    d018:	sub.w	r5, r3, #8
    d01c:	ldr	r3, [r3, #4]
    d01e:	cmp	r5, r3
    d020:	bne.n	d030 <_malloc_r+0xa8>
    d022:	b.n	d03e <_malloc_r+0xb6>
    d024:	cmp	r1, #0
    d026:	bge.w	d278 <_malloc_r+0x2f0>
    d02a:	ldr	r3, [r3, #12]
    d02c:	cmp	r5, r3
    d02e:	beq.n	d03e <_malloc_r+0xb6>
    d030:	ldr	r2, [r3, #4]
    d032:	bic.w	r2, r2, #3
    d036:	subs	r1, r2, r6
    d038:	cmp	r1, #15
    d03a:	ble.n	d024 <_malloc_r+0x9c>
    d03c:	mov	r0, ip
    d03e:	ldr	r5, [r7, #16]
    d040:	ldr.w	ip, [pc, #592]	; d294 <_malloc_r+0x30c>
    d044:	cmp	r5, ip
    d046:	beq.n	d142 <_malloc_r+0x1ba>
    d048:	ldr	r2, [r5, #4]
    d04a:	bic.w	r2, r2, #3
    d04e:	subs	r3, r2, r6
    d050:	cmp	r3, #15
    d052:	bgt.w	d34c <_malloc_r+0x3c4>
    d056:	cmp	r3, #0
    d058:	strd	ip, ip, [r7, #16]
    d05c:	bge.w	d338 <_malloc_r+0x3b0>
    d060:	cmp.w	r2, #512	; 0x200
    d064:	bcs.w	d29c <_malloc_r+0x314>
    d068:	lsrs	r3, r2, #3
    d06a:	ldr	r1, [r7, #4]
    d06c:	adds	r3, #1
    d06e:	mov.w	lr, r2, lsr #5
    d072:	movs	r2, #1
    d074:	lsl.w	r2, r2, lr
    d078:	orrs	r2, r1
    d07a:	ldr.w	lr, [r7, r3, lsl #3]
    d07e:	str.w	lr, [r5, #8]
    d082:	add.w	r1, r7, r3, lsl #3
    d086:	subs	r1, #8
    d088:	str	r1, [r5, #12]
    d08a:	str	r2, [r7, #4]
    d08c:	str.w	r5, [r7, r3, lsl #3]
    d090:	str.w	r5, [lr, #12]
    d094:	asrs	r3, r0, #2
    d096:	movs	r1, #1
    d098:	lsls	r1, r3
    d09a:	cmp	r1, r2
    d09c:	bhi.n	d14e <_malloc_r+0x1c6>
    d09e:	tst	r1, r2
    d0a0:	bne.n	d0b0 <_malloc_r+0x128>
    d0a2:	bic.w	r0, r0, #3
    d0a6:	lsls	r1, r1, #1
    d0a8:	tst	r1, r2
    d0aa:	add.w	r0, r0, #4
    d0ae:	beq.n	d0a6 <_malloc_r+0x11e>
    d0b0:	add.w	r9, r7, r0, lsl #3
    d0b4:	mov	r5, r9
    d0b6:	mov	lr, r0
    d0b8:	ldr.w	r8, [r5, #12]
    d0bc:	cmp	r5, r8
    d0be:	bne.n	d0d2 <_malloc_r+0x14a>
    d0c0:	b.n	d2fe <_malloc_r+0x376>
    d0c2:	cmp	r3, #0
    d0c4:	bge.w	d310 <_malloc_r+0x388>
    d0c8:	ldr.w	r8, [r8, #12]
    d0cc:	cmp	r5, r8
    d0ce:	beq.w	d2fe <_malloc_r+0x376>
    d0d2:	ldr.w	r2, [r8, #4]
    d0d6:	bic.w	r2, r2, #3
    d0da:	subs	r3, r2, r6
    d0dc:	cmp	r3, #15
    d0de:	ble.n	d0c2 <_malloc_r+0x13a>
    d0e0:	mov	r0, r4
    d0e2:	ldrd	r5, r4, [r8, #8]
    d0e6:	add.w	r1, r8, r6
    d0ea:	orr.w	r6, r6, #1
    d0ee:	str.w	r6, [r8, #4]
    d0f2:	str	r4, [r5, #12]
    d0f4:	str	r5, [r4, #8]
    d0f6:	orr.w	r4, r3, #1
    d0fa:	strd	r1, r1, [r7, #16]
    d0fe:	strd	ip, ip, [r1, #8]
    d102:	str	r4, [r1, #4]
    d104:	str.w	r3, [r8, r2]
    d108:	bl	d4f4 <__malloc_unlock>
    d10c:	add.w	r5, r8, #8
    d110:	b.n	d118 <_malloc_r+0x190>
    d112:	movs	r3, #12
    d114:	str	r3, [r4, #0]
    d116:	movs	r5, #0
    d118:	mov	r0, r5
    d11a:	add	sp, #12
    d11c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d120:	mov.w	r3, #512	; 0x200
    d124:	movs	r0, #64	; 0x40
    d126:	mov.w	ip, #63	; 0x3f
    d12a:	b.n	d014 <_malloc_r+0x8c>
    d12c:	ldr	r3, [r2, #12]
    d12e:	cmp	r2, r3
    d130:	it	eq
    d132:	addeq	r0, #2
    d134:	bne.w	cfb8 <_malloc_r+0x30>
    d138:	ldr	r5, [r7, #16]
    d13a:	ldr.w	ip, [pc, #344]	; d294 <_malloc_r+0x30c>
    d13e:	cmp	r5, ip
    d140:	bne.n	d048 <_malloc_r+0xc0>
    d142:	ldr	r2, [r7, #4]
    d144:	asrs	r3, r0, #2
    d146:	movs	r1, #1
    d148:	lsls	r1, r3
    d14a:	cmp	r1, r2
    d14c:	bls.n	d09e <_malloc_r+0x116>
    d14e:	ldr	r5, [r7, #8]
    d150:	ldr	r3, [r5, #4]
    d152:	bic.w	r9, r3, #3
    d156:	cmp	r6, r9
    d158:	bhi.n	d162 <_malloc_r+0x1da>
    d15a:	sub.w	r3, r9, r6
    d15e:	cmp	r3, #15
    d160:	bgt.n	d258 <_malloc_r+0x2d0>
    d162:	ldr.w	fp, [pc, #308]	; d298 <_malloc_r+0x310>
    d166:	ldr	r3, [pc, #284]	; (d284 <_malloc_r+0x2fc>)
    d168:	ldr.w	r2, [fp]
    d16c:	ldr	r3, [r3, #0]
    d16e:	adds	r2, #1
    d170:	add	r3, r6
    d172:	add.w	sl, r5, r9
    d176:	beq.w	d3e0 <_malloc_r+0x458>
    d17a:	add.w	r3, r3, #4096	; 0x1000
    d17e:	adds	r3, #15
    d180:	bic.w	r8, r3, #4080	; 0xff0
    d184:	bic.w	r8, r8, #15
    d188:	mov	r1, r8
    d18a:	mov	r0, r4
    d18c:	bl	f08c <_sbrk_r>
    d190:	adds	r1, r0, #1
    d192:	mov	r2, r0
    d194:	beq.w	d37e <_malloc_r+0x3f6>
    d198:	cmp	sl, r0
    d19a:	bhi.w	d37a <_malloc_r+0x3f2>
    d19e:	ldr	r3, [pc, #232]	; (d288 <_malloc_r+0x300>)
    d1a0:	ldr	r1, [r3, #0]
    d1a2:	add	r1, r8
    d1a4:	str	r1, [r3, #0]
    d1a6:	mov	r0, r1
    d1a8:	beq.w	d448 <_malloc_r+0x4c0>
    d1ac:	ldr.w	r1, [fp]
    d1b0:	str	r3, [sp, #4]
    d1b2:	adds	r1, #1
    d1b4:	ittet	ne
    d1b6:	subne.w	r1, r2, sl
    d1ba:	addne	r1, r1, r0
    d1bc:	streq.w	r2, [fp]
    d1c0:	strne	r1, [r3, #0]
    d1c2:	ands.w	fp, r2, #7
    d1c6:	beq.w	d3f8 <_malloc_r+0x470>
    d1ca:	rsb	r1, fp, #8
    d1ce:	add	r2, r1
    d1d0:	rsb	r1, fp, #4096	; 0x1000
    d1d4:	add	r8, r2
    d1d6:	adds	r1, #8
    d1d8:	sub.w	r1, r1, r8
    d1dc:	ubfx	sl, r1, #0, #12
    d1e0:	mov	r1, sl
    d1e2:	mov	r0, r4
    d1e4:	str	r2, [sp, #0]
    d1e6:	bl	f08c <_sbrk_r>
    d1ea:	adds	r2, r0, #1
    d1ec:	ldrd	r2, r3, [sp]
    d1f0:	beq.w	d492 <_malloc_r+0x50a>
    d1f4:	subs	r0, r0, r2
    d1f6:	add.w	r8, r0, sl
    d1fa:	ldr	r1, [r3, #0]
    d1fc:	str	r2, [r7, #8]
    d1fe:	orr.w	r0, r8, #1
    d202:	add	r1, sl
    d204:	cmp	r5, r7
    d206:	str	r0, [r2, #4]
    d208:	str	r1, [r3, #0]
    d20a:	beq.w	d460 <_malloc_r+0x4d8>
    d20e:	cmp.w	r9, #15
    d212:	bls.w	d464 <_malloc_r+0x4dc>
    d216:	ldr	r0, [r5, #4]
    d218:	sub.w	ip, r9, #12
    d21c:	bic.w	ip, ip, #7
    d220:	and.w	r0, r0, #1
    d224:	orr.w	r0, r0, ip
    d228:	str	r0, [r5, #4]
    d22a:	mov.w	lr, #5
    d22e:	add.w	r0, r5, ip
    d232:	cmp.w	ip, #15
    d236:	strd	lr, lr, [r0, #4]
    d23a:	bhi.w	d4a2 <_malloc_r+0x51a>
    d23e:	ldr	r0, [r2, #4]
    d240:	mov	r5, r2
    d242:	ldr	r3, [pc, #72]	; (d28c <_malloc_r+0x304>)
    d244:	ldr	r2, [r3, #0]
    d246:	cmp	r2, r1
    d248:	it	cc
    d24a:	strcc	r1, [r3, #0]
    d24c:	ldr	r3, [pc, #64]	; (d290 <_malloc_r+0x308>)
    d24e:	ldr	r2, [r3, #0]
    d250:	cmp	r2, r1
    d252:	it	cc
    d254:	strcc	r1, [r3, #0]
    d256:	b.n	d382 <_malloc_r+0x3fa>
    d258:	adds	r2, r5, r6
    d25a:	orr.w	r3, r3, #1
    d25e:	orr.w	r6, r6, #1
    d262:	str	r6, [r5, #4]
    d264:	mov	r0, r4
    d266:	str	r2, [r7, #8]
    d268:	str	r3, [r2, #4]
    d26a:	bl	d4f4 <__malloc_unlock>
    d26e:	adds	r5, #8
    d270:	mov	r0, r5
    d272:	add	sp, #12
    d274:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d278:	ldr	r1, [r3, #12]
    d27a:	add	r2, r3
    d27c:	b.n	cfc2 <_malloc_r+0x3a>
    d27e:	nop
    d280:	.word	0x20008fb0
    d284:	.word	0x2000fe24
    d288:	.word	0x2000fdf4
    d28c:	.word	0x2000fe1c
    d290:	.word	0x2000fe20
    d294:	.word	0x20008fb8
    d298:	.word	0x200093b8
    d29c:	cmp.w	r2, #2560	; 0xa00
    d2a0:	mov.w	r3, r2, lsr #9
    d2a4:	bcc.n	d36e <_malloc_r+0x3e6>
    d2a6:	cmp	r3, #20
    d2a8:	bhi.w	d41a <_malloc_r+0x492>
    d2ac:	add.w	r1, r3, #92	; 0x5c
    d2b0:	lsls	r1, r1, #3
    d2b2:	adds	r3, #91	; 0x5b
    d2b4:	add.w	lr, r7, r1
    d2b8:	ldr	r1, [r7, r1]
    d2ba:	sub.w	lr, lr, #8
    d2be:	cmp	lr, r1
    d2c0:	beq.w	d3e6 <_malloc_r+0x45e>
    d2c4:	ldr	r3, [r1, #4]
    d2c6:	bic.w	r3, r3, #3
    d2ca:	cmp	r3, r2
    d2cc:	bls.n	d2d4 <_malloc_r+0x34c>
    d2ce:	ldr	r1, [r1, #8]
    d2d0:	cmp	lr, r1
    d2d2:	bne.n	d2c4 <_malloc_r+0x33c>
    d2d4:	ldr.w	lr, [r1, #12]
    d2d8:	ldr	r2, [r7, #4]
    d2da:	strd	r1, lr, [r5, #8]
    d2de:	str.w	r5, [lr, #8]
    d2e2:	str	r5, [r1, #12]
    d2e4:	b.n	d094 <_malloc_r+0x10c>
    d2e6:	cmp	r3, #20
    d2e8:	bls.n	d39e <_malloc_r+0x416>
    d2ea:	cmp	r3, #84	; 0x54
    d2ec:	bhi.w	d42a <_malloc_r+0x4a2>
    d2f0:	lsrs	r3, r6, #12
    d2f2:	add.w	r0, r3, #111	; 0x6f
    d2f6:	add.w	ip, r3, #110	; 0x6e
    d2fa:	lsls	r3, r0, #3
    d2fc:	b.n	d014 <_malloc_r+0x8c>
    d2fe:	add.w	lr, lr, #1
    d302:	tst.w	lr, #3
    d306:	add.w	r5, r5, #8
    d30a:	bne.w	d0b8 <_malloc_r+0x130>
    d30e:	b.n	d3b4 <_malloc_r+0x42c>
    d310:	add	r2, r8
    d312:	mov	r5, r8
    d314:	ldr	r3, [r2, #4]
    d316:	ldr.w	r1, [r8, #12]
    d31a:	orr.w	r3, r3, #1
    d31e:	str	r3, [r2, #4]
    d320:	ldr.w	r3, [r5, #8]!
    d324:	mov	r0, r4
    d326:	str	r1, [r3, #12]
    d328:	str	r3, [r1, #8]
    d32a:	bl	d4f4 <__malloc_unlock>
    d32e:	b.n	d118 <_malloc_r+0x190>
    d330:	lsrs	r0, r6, #3
    d332:	add.w	r2, r6, #8
    d336:	b.n	cfa8 <_malloc_r+0x20>
    d338:	add	r2, r5
    d33a:	mov	r0, r4
    d33c:	ldr	r3, [r2, #4]
    d33e:	orr.w	r3, r3, #1
    d342:	str	r3, [r2, #4]
    d344:	adds	r5, #8
    d346:	bl	d4f4 <__malloc_unlock>
    d34a:	b.n	d118 <_malloc_r+0x190>
    d34c:	adds	r1, r5, r6
    d34e:	mov	r0, r4
    d350:	orr.w	r6, r6, #1
    d354:	orr.w	r4, r3, #1
    d358:	str	r6, [r5, #4]
    d35a:	strd	r1, r1, [r7, #16]
    d35e:	strd	ip, ip, [r1, #8]
    d362:	str	r4, [r1, #4]
    d364:	str	r3, [r5, r2]
    d366:	bl	d4f4 <__malloc_unlock>
    d36a:	adds	r5, #8
    d36c:	b.n	d118 <_malloc_r+0x190>
    d36e:	lsrs	r3, r2, #6
    d370:	add.w	r1, r3, #57	; 0x39
    d374:	lsls	r1, r1, #3
    d376:	adds	r3, #56	; 0x38
    d378:	b.n	d2b4 <_malloc_r+0x32c>
    d37a:	cmp	r5, r7
    d37c:	beq.n	d43e <_malloc_r+0x4b6>
    d37e:	ldr	r5, [r7, #8]
    d380:	ldr	r0, [r5, #4]
    d382:	bic.w	r8, r0, #3
    d386:	cmp	r6, r8
    d388:	sub.w	r3, r8, r6
    d38c:	bhi.n	d394 <_malloc_r+0x40c>
    d38e:	cmp	r3, #15
    d390:	bgt.w	d258 <_malloc_r+0x2d0>
    d394:	mov	r0, r4
    d396:	bl	d4f4 <__malloc_unlock>
    d39a:	movs	r5, #0
    d39c:	b.n	d118 <_malloc_r+0x190>
    d39e:	add.w	r0, r3, #92	; 0x5c
    d3a2:	add.w	ip, r3, #91	; 0x5b
    d3a6:	lsls	r3, r0, #3
    d3a8:	b.n	d014 <_malloc_r+0x8c>
    d3aa:	ldr.w	r3, [r9], #-8
    d3ae:	cmp	r3, r9
    d3b0:	bne.w	d4e0 <_malloc_r+0x558>
    d3b4:	tst.w	r0, #3
    d3b8:	add.w	r0, r0, #4294967295
    d3bc:	bne.n	d3aa <_malloc_r+0x422>
    d3be:	ldr	r3, [r7, #4]
    d3c0:	bic.w	r3, r3, r1
    d3c4:	str	r3, [r7, #4]
    d3c6:	lsls	r1, r1, #1
    d3c8:	cmp	r1, r3
    d3ca:	bhi.w	d14e <_malloc_r+0x1c6>
    d3ce:	cbnz	r1, d3d8 <_malloc_r+0x450>
    d3d0:	b.n	d14e <_malloc_r+0x1c6>
    d3d2:	lsls	r1, r1, #1
    d3d4:	add.w	lr, lr, #4
    d3d8:	tst	r1, r3
    d3da:	beq.n	d3d2 <_malloc_r+0x44a>
    d3dc:	mov	r0, lr
    d3de:	b.n	d0b0 <_malloc_r+0x128>
    d3e0:	add.w	r8, r3, #16
    d3e4:	b.n	d188 <_malloc_r+0x200>
    d3e6:	asrs	r2, r3, #2
    d3e8:	mov.w	r8, #1
    d3ec:	ldr	r3, [r7, #4]
    d3ee:	lsl.w	r2, r8, r2
    d3f2:	orrs	r2, r3
    d3f4:	str	r2, [r7, #4]
    d3f6:	b.n	d2da <_malloc_r+0x352>
    d3f8:	add.w	r1, r2, r8
    d3fc:	negs	r1, r1
    d3fe:	ubfx	sl, r1, #0, #12
    d402:	mov	r1, sl
    d404:	mov	r0, r4
    d406:	str	r2, [sp, #0]
    d408:	bl	f08c <_sbrk_r>
    d40c:	adds	r3, r0, #1
    d40e:	ldrd	r2, r3, [sp]
    d412:	bne.w	d1f4 <_malloc_r+0x26c>
    d416:	mov	sl, fp
    d418:	b.n	d1fa <_malloc_r+0x272>
    d41a:	cmp	r3, #84	; 0x54
    d41c:	bhi.n	d46a <_malloc_r+0x4e2>
    d41e:	lsrs	r3, r2, #12
    d420:	add.w	r1, r3, #111	; 0x6f
    d424:	lsls	r1, r1, #3
    d426:	adds	r3, #110	; 0x6e
    d428:	b.n	d2b4 <_malloc_r+0x32c>
    d42a:	cmp.w	r3, #340	; 0x154
    d42e:	bhi.n	d47c <_malloc_r+0x4f4>
    d430:	lsrs	r3, r6, #15
    d432:	add.w	r0, r3, #120	; 0x78
    d436:	add.w	ip, r3, #119	; 0x77
    d43a:	lsls	r3, r0, #3
    d43c:	b.n	d014 <_malloc_r+0x8c>
    d43e:	ldr	r3, [pc, #164]	; (d4e4 <_malloc_r+0x55c>)
    d440:	ldr	r0, [r3, #0]
    d442:	add	r0, r8
    d444:	str	r0, [r3, #0]
    d446:	b.n	d1ac <_malloc_r+0x224>
    d448:	ubfx	ip, sl, #0, #12
    d44c:	cmp.w	ip, #0
    d450:	bne.w	d1ac <_malloc_r+0x224>
    d454:	ldr	r5, [r7, #8]
    d456:	add	r8, r9
    d458:	orr.w	r0, r8, #1
    d45c:	str	r0, [r5, #4]
    d45e:	b.n	d242 <_malloc_r+0x2ba>
    d460:	mov	r5, r2
    d462:	b.n	d242 <_malloc_r+0x2ba>
    d464:	movs	r3, #1
    d466:	str	r3, [r2, #4]
    d468:	b.n	d394 <_malloc_r+0x40c>
    d46a:	cmp.w	r3, #340	; 0x154
    d46e:	bhi.n	d4b8 <_malloc_r+0x530>
    d470:	lsrs	r3, r2, #15
    d472:	add.w	r1, r3, #120	; 0x78
    d476:	lsls	r1, r1, #3
    d478:	adds	r3, #119	; 0x77
    d47a:	b.n	d2b4 <_malloc_r+0x32c>
    d47c:	movw	r2, #1364	; 0x554
    d480:	cmp	r3, r2
    d482:	bhi.n	d4cc <_malloc_r+0x544>
    d484:	lsrs	r3, r6, #18
    d486:	add.w	r0, r3, #125	; 0x7d
    d48a:	add.w	ip, r3, #124	; 0x7c
    d48e:	lsls	r3, r0, #3
    d490:	b.n	d014 <_malloc_r+0x8c>
    d492:	sub.w	fp, fp, #8
    d496:	add	r8, fp
    d498:	sub.w	r8, r8, r2
    d49c:	mov.w	sl, #0
    d4a0:	b.n	d1fa <_malloc_r+0x272>
    d4a2:	add.w	r1, r5, #8
    d4a6:	mov	r0, r4
    d4a8:	str	r3, [sp, #0]
    d4aa:	bl	f7a4 <_free_r>
    d4ae:	ldr	r5, [r7, #8]
    d4b0:	ldr	r3, [sp, #0]
    d4b2:	ldr	r0, [r5, #4]
    d4b4:	ldr	r1, [r3, #0]
    d4b6:	b.n	d242 <_malloc_r+0x2ba>
    d4b8:	movw	r1, #1364	; 0x554
    d4bc:	cmp	r3, r1
    d4be:	bhi.n	d4d8 <_malloc_r+0x550>
    d4c0:	lsrs	r3, r2, #18
    d4c2:	add.w	r1, r3, #125	; 0x7d
    d4c6:	lsls	r1, r1, #3
    d4c8:	adds	r3, #124	; 0x7c
    d4ca:	b.n	d2b4 <_malloc_r+0x32c>
    d4cc:	mov.w	r3, #1016	; 0x3f8
    d4d0:	movs	r0, #127	; 0x7f
    d4d2:	mov.w	ip, #126	; 0x7e
    d4d6:	b.n	d014 <_malloc_r+0x8c>
    d4d8:	mov.w	r1, #1016	; 0x3f8
    d4dc:	movs	r3, #126	; 0x7e
    d4de:	b.n	d2b4 <_malloc_r+0x32c>
    d4e0:	ldr	r3, [r7, #4]
    d4e2:	b.n	d3c6 <_malloc_r+0x43e>
    d4e4:	.word	0x2000fdf4

0000d4e8 <__malloc_lock>:
    d4e8:	ldr	r0, [pc, #4]	; (d4f0 <__malloc_lock+0x8>)
    d4ea:	b.w	f138 <__retarget_lock_acquire_recursive>
    d4ee:	nop
    d4f0:	.word	0x2000fdec

0000d4f4 <__malloc_unlock>:
    d4f4:	ldr	r0, [pc, #4]	; (d4fc <__malloc_unlock+0x8>)
    d4f6:	b.w	f13c <__retarget_lock_release_recursive>
    d4fa:	nop
    d4fc:	.word	0x2000fdec

0000d500 <realloc>:
    d500:	push	{r4}
    d502:	ldr	r4, [pc, #16]	; (d514 <realloc+0x14>)
    d504:	mov	r3, r0
    d506:	mov	r2, r1
    d508:	ldr	r0, [r4, #0]
    d50a:	ldr.w	r4, [sp], #4
    d50e:	mov	r1, r3
    d510:	b.w	d518 <_realloc_r>
    d514:	.word	0x200093cc

0000d518 <_realloc_r>:
    d518:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d51c:	mov	r7, r2
    d51e:	cmp	r1, #0
    d520:	beq.w	d654 <_realloc_r+0x13c>
    d524:	mov	r4, r1
    d526:	add.w	r5, r7, #11
    d52a:	mov	r8, r0
    d52c:	bl	d4e8 <__malloc_lock>
    d530:	cmp	r5, #22
    d532:	ldr.w	r1, [r4, #-4]
    d536:	bhi.n	d5f0 <_realloc_r+0xd8>
    d538:	movs	r5, #16
    d53a:	mov	r2, r5
    d53c:	cmp	r7, r5
    d53e:	bhi.n	d5fa <_realloc_r+0xe2>
    d540:	bic.w	r6, r1, #3
    d544:	cmp	r6, r2
    d546:	sub.w	r9, r4, #8
    d54a:	bge.n	d612 <_realloc_r+0xfa>
    d54c:	ldr	r3, [pc, #752]	; (d840 <_realloc_r+0x328>)
    d54e:	ldr.w	ip, [r3, #8]
    d552:	add.w	r0, r9, r6
    d556:	cmp	ip, r0
    d558:	beq.w	d68a <_realloc_r+0x172>
    d55c:	ldr.w	ip, [r0, #4]
    d560:	bic.w	r3, ip, #1
    d564:	add	r3, r0
    d566:	ldr	r3, [r3, #4]
    d568:	lsls	r3, r3, #31
    d56a:	bmi.n	d63e <_realloc_r+0x126>
    d56c:	bic.w	ip, ip, #3
    d570:	add.w	r3, r6, ip
    d574:	cmp	r3, r2
    d576:	bge.n	d608 <_realloc_r+0xf0>
    d578:	lsls	r3, r1, #31
    d57a:	bmi.n	d59e <_realloc_r+0x86>
    d57c:	ldr.w	r3, [r4, #-8]
    d580:	sub.w	sl, r9, r3
    d584:	ldr.w	r3, [sl, #4]
    d588:	bic.w	r1, r3, #3
    d58c:	add	ip, r1
    d58e:	add	ip, r6
    d590:	cmp	ip, r2
    d592:	bge.w	d7b8 <_realloc_r+0x2a0>
    d596:	adds	r3, r6, r1
    d598:	cmp	r3, r2
    d59a:	bge.w	d76e <_realloc_r+0x256>
    d59e:	mov	r1, r7
    d5a0:	mov	r0, r8
    d5a2:	bl	cf88 <_malloc_r>
    d5a6:	mov	r7, r0
    d5a8:	cbz	r0, d5e4 <_realloc_r+0xcc>
    d5aa:	ldr.w	r3, [r4, #-4]
    d5ae:	bic.w	r3, r3, #1
    d5b2:	add	r3, r9
    d5b4:	sub.w	r2, r0, #8
    d5b8:	cmp	r3, r2
    d5ba:	beq.w	d762 <_realloc_r+0x24a>
    d5be:	subs	r2, r6, #4
    d5c0:	cmp	r2, #36	; 0x24
    d5c2:	bhi.w	d7b0 <_realloc_r+0x298>
    d5c6:	cmp	r2, #19
    d5c8:	bhi.w	d724 <_realloc_r+0x20c>
    d5cc:	mov	r3, r0
    d5ce:	mov	r2, r4
    d5d0:	ldr	r1, [r2, #0]
    d5d2:	str	r1, [r3, #0]
    d5d4:	ldr	r1, [r2, #4]
    d5d6:	str	r1, [r3, #4]
    d5d8:	ldr	r2, [r2, #8]
    d5da:	str	r2, [r3, #8]
    d5dc:	mov	r1, r4
    d5de:	mov	r0, r8
    d5e0:	bl	f7a4 <_free_r>
    d5e4:	mov	r0, r8
    d5e6:	bl	d4f4 <__malloc_unlock>
    d5ea:	mov	r0, r7
    d5ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5f0:	bic.w	r5, r5, #7
    d5f4:	cmp	r5, #0
    d5f6:	mov	r2, r5
    d5f8:	bge.n	d53c <_realloc_r+0x24>
    d5fa:	movs	r3, #12
    d5fc:	str.w	r3, [r8]
    d600:	movs	r7, #0
    d602:	mov	r0, r7
    d604:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d608:	mov	r6, r3
    d60a:	ldrd	r2, r3, [r0, #8]
    d60e:	str	r3, [r2, #12]
    d610:	str	r2, [r3, #8]
    d612:	subs	r3, r6, r5
    d614:	cmp	r3, #15
    d616:	bhi.n	d65e <_realloc_r+0x146>
    d618:	ldr.w	r3, [r9, #4]
    d61c:	and.w	r3, r3, #1
    d620:	orrs	r3, r6
    d622:	add	r6, r9
    d624:	str.w	r3, [r9, #4]
    d628:	ldr	r3, [r6, #4]
    d62a:	orr.w	r3, r3, #1
    d62e:	str	r3, [r6, #4]
    d630:	mov	r0, r8
    d632:	mov	r7, r4
    d634:	bl	d4f4 <__malloc_unlock>
    d638:	mov	r0, r7
    d63a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d63e:	lsls	r1, r1, #31
    d640:	bmi.n	d59e <_realloc_r+0x86>
    d642:	ldr.w	r3, [r4, #-8]
    d646:	sub.w	sl, r9, r3
    d64a:	ldr.w	r1, [sl, #4]
    d64e:	bic.w	r1, r1, #3
    d652:	b.n	d596 <_realloc_r+0x7e>
    d654:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d658:	mov	r1, r2
    d65a:	b.w	cf88 <_malloc_r>
    d65e:	ldr.w	r2, [r9, #4]
    d662:	add.w	r1, r9, r5
    d666:	and.w	r2, r2, #1
    d66a:	add	r6, r9
    d66c:	orr.w	r3, r3, #1
    d670:	orrs	r2, r5
    d672:	str.w	r2, [r9, #4]
    d676:	str	r3, [r1, #4]
    d678:	ldr	r3, [r6, #4]
    d67a:	orr.w	r3, r3, #1
    d67e:	adds	r1, #8
    d680:	str	r3, [r6, #4]
    d682:	mov	r0, r8
    d684:	bl	f7a4 <_free_r>
    d688:	b.n	d630 <_realloc_r+0x118>
    d68a:	ldr.w	r0, [ip, #4]
    d68e:	bic.w	fp, r0, #3
    d692:	add.w	ip, r6, fp
    d696:	add.w	r0, r5, #16
    d69a:	cmp	ip, r0
    d69c:	bge.n	d73a <_realloc_r+0x222>
    d69e:	lsls	r1, r1, #31
    d6a0:	bmi.w	d59e <_realloc_r+0x86>
    d6a4:	ldr.w	r1, [r4, #-8]
    d6a8:	sub.w	sl, r9, r1
    d6ac:	ldr.w	r1, [sl, #4]
    d6b0:	bic.w	r1, r1, #3
    d6b4:	add	fp, r1
    d6b6:	add	fp, r6
    d6b8:	cmp	r0, fp
    d6ba:	bgt.w	d596 <_realloc_r+0x7e>
    d6be:	mov	r7, sl
    d6c0:	ldr.w	r1, [sl, #12]
    d6c4:	ldr.w	r0, [r7, #8]!
    d6c8:	subs	r2, r6, #4
    d6ca:	cmp	r2, #36	; 0x24
    d6cc:	str	r1, [r0, #12]
    d6ce:	str	r0, [r1, #8]
    d6d0:	bhi.w	d88a <_realloc_r+0x372>
    d6d4:	cmp	r2, #19
    d6d6:	bls.w	d886 <_realloc_r+0x36e>
    d6da:	ldr	r1, [r4, #0]
    d6dc:	str.w	r1, [sl, #8]
    d6e0:	ldr	r1, [r4, #4]
    d6e2:	str.w	r1, [sl, #12]
    d6e6:	cmp	r2, #27
    d6e8:	bhi.w	d8aa <_realloc_r+0x392>
    d6ec:	adds	r4, #8
    d6ee:	add.w	r2, sl, #16
    d6f2:	ldr	r1, [r4, #0]
    d6f4:	str	r1, [r2, #0]
    d6f6:	ldr	r1, [r4, #4]
    d6f8:	str	r1, [r2, #4]
    d6fa:	ldr	r1, [r4, #8]
    d6fc:	str	r1, [r2, #8]
    d6fe:	add.w	r1, sl, r5
    d702:	sub.w	r2, fp, r5
    d706:	orr.w	r2, r2, #1
    d70a:	str	r1, [r3, #8]
    d70c:	str	r2, [r1, #4]
    d70e:	ldr.w	r3, [sl, #4]
    d712:	and.w	r3, r3, #1
    d716:	orrs	r3, r5
    d718:	mov	r0, r8
    d71a:	str.w	r3, [sl, #4]
    d71e:	bl	d4f4 <__malloc_unlock>
    d722:	b.n	d602 <_realloc_r+0xea>
    d724:	ldr	r3, [r4, #0]
    d726:	str	r3, [r0, #0]
    d728:	ldr	r3, [r4, #4]
    d72a:	str	r3, [r0, #4]
    d72c:	cmp	r2, #27
    d72e:	bhi.n	d802 <_realloc_r+0x2ea>
    d730:	add.w	r2, r4, #8
    d734:	add.w	r3, r0, #8
    d738:	b.n	d5d0 <_realloc_r+0xb8>
    d73a:	add.w	r2, r9, r5
    d73e:	str	r2, [r3, #8]
    d740:	sub.w	r3, ip, r5
    d744:	orr.w	r3, r3, #1
    d748:	str	r3, [r2, #4]
    d74a:	ldr.w	r3, [r4, #-4]
    d74e:	and.w	r3, r3, #1
    d752:	orrs	r3, r5
    d754:	mov	r0, r8
    d756:	str.w	r3, [r4, #-4]
    d75a:	bl	d4f4 <__malloc_unlock>
    d75e:	mov	r7, r4
    d760:	b.n	d602 <_realloc_r+0xea>
    d762:	ldr.w	r3, [r0, #-4]
    d766:	bic.w	r3, r3, #3
    d76a:	add	r6, r3
    d76c:	b.n	d612 <_realloc_r+0xfa>
    d76e:	mov	r7, sl
    d770:	ldr.w	r1, [sl, #12]
    d774:	ldr.w	r0, [r7, #8]!
    d778:	subs	r2, r6, #4
    d77a:	cmp	r2, #36	; 0x24
    d77c:	str	r1, [r0, #12]
    d77e:	str	r0, [r1, #8]
    d780:	bhi.n	d81c <_realloc_r+0x304>
    d782:	cmp	r2, #19
    d784:	bls.n	d818 <_realloc_r+0x300>
    d786:	ldr	r1, [r4, #0]
    d788:	str.w	r1, [sl, #8]
    d78c:	ldr	r1, [r4, #4]
    d78e:	str.w	r1, [sl, #12]
    d792:	cmp	r2, #27
    d794:	bhi.n	d844 <_realloc_r+0x32c>
    d796:	adds	r4, #8
    d798:	add.w	r2, sl, #16
    d79c:	mov	r6, r3
    d79e:	ldr	r3, [r4, #0]
    d7a0:	str	r3, [r2, #0]
    d7a2:	ldr	r3, [r4, #4]
    d7a4:	str	r3, [r2, #4]
    d7a6:	ldr	r3, [r4, #8]
    d7a8:	str	r3, [r2, #8]
    d7aa:	mov	r9, sl
    d7ac:	mov	r4, r7
    d7ae:	b.n	d612 <_realloc_r+0xfa>
    d7b0:	mov	r1, r4
    d7b2:	bl	ed70 <memmove>
    d7b6:	b.n	d5dc <_realloc_r+0xc4>
    d7b8:	ldrd	r1, r3, [r0, #8]
    d7bc:	mov	r7, sl
    d7be:	str	r3, [r1, #12]
    d7c0:	str	r1, [r3, #8]
    d7c2:	ldr.w	r1, [r7, #8]!
    d7c6:	ldr.w	r3, [sl, #12]
    d7ca:	str	r3, [r1, #12]
    d7cc:	subs	r2, r6, #4
    d7ce:	cmp	r2, #36	; 0x24
    d7d0:	str	r1, [r3, #8]
    d7d2:	bhi.n	d830 <_realloc_r+0x318>
    d7d4:	cmp	r2, #19
    d7d6:	bls.n	d82c <_realloc_r+0x314>
    d7d8:	ldr	r3, [r4, #0]
    d7da:	str.w	r3, [sl, #8]
    d7de:	ldr	r3, [r4, #4]
    d7e0:	str.w	r3, [sl, #12]
    d7e4:	cmp	r2, #27
    d7e6:	bhi.n	d86e <_realloc_r+0x356>
    d7e8:	adds	r4, #8
    d7ea:	add.w	r3, sl, #16
    d7ee:	ldr	r2, [r4, #0]
    d7f0:	str	r2, [r3, #0]
    d7f2:	ldr	r2, [r4, #4]
    d7f4:	str	r2, [r3, #4]
    d7f6:	ldr	r2, [r4, #8]
    d7f8:	str	r2, [r3, #8]
    d7fa:	mov	r6, ip
    d7fc:	mov	r9, sl
    d7fe:	mov	r4, r7
    d800:	b.n	d612 <_realloc_r+0xfa>
    d802:	ldr	r3, [r4, #8]
    d804:	str	r3, [r0, #8]
    d806:	ldr	r3, [r4, #12]
    d808:	str	r3, [r0, #12]
    d80a:	cmp	r2, #36	; 0x24
    d80c:	beq.n	d85c <_realloc_r+0x344>
    d80e:	add.w	r2, r4, #16
    d812:	add.w	r3, r0, #16
    d816:	b.n	d5d0 <_realloc_r+0xb8>
    d818:	mov	r2, r7
    d81a:	b.n	d79c <_realloc_r+0x284>
    d81c:	mov	r1, r4
    d81e:	mov	r0, r7
    d820:	mov	r6, r3
    d822:	mov	r9, sl
    d824:	bl	ed70 <memmove>
    d828:	mov	r4, r7
    d82a:	b.n	d612 <_realloc_r+0xfa>
    d82c:	mov	r3, r7
    d82e:	b.n	d7ee <_realloc_r+0x2d6>
    d830:	mov	r1, r4
    d832:	mov	r0, r7
    d834:	mov	r6, ip
    d836:	mov	r9, sl
    d838:	bl	ed70 <memmove>
    d83c:	mov	r4, r7
    d83e:	b.n	d612 <_realloc_r+0xfa>
    d840:	.word	0x20008fb0
    d844:	ldr	r1, [r4, #8]
    d846:	str.w	r1, [sl, #16]
    d84a:	ldr	r1, [r4, #12]
    d84c:	str.w	r1, [sl, #20]
    d850:	cmp	r2, #36	; 0x24
    d852:	beq.n	d896 <_realloc_r+0x37e>
    d854:	adds	r4, #16
    d856:	add.w	r2, sl, #24
    d85a:	b.n	d79c <_realloc_r+0x284>
    d85c:	ldr	r3, [r4, #16]
    d85e:	str	r3, [r0, #16]
    d860:	ldr	r1, [r4, #20]
    d862:	str	r1, [r0, #20]
    d864:	add.w	r2, r4, #24
    d868:	add.w	r3, r0, #24
    d86c:	b.n	d5d0 <_realloc_r+0xb8>
    d86e:	ldr	r3, [r4, #8]
    d870:	str.w	r3, [sl, #16]
    d874:	ldr	r3, [r4, #12]
    d876:	str.w	r3, [sl, #20]
    d87a:	cmp	r2, #36	; 0x24
    d87c:	beq.n	d8c2 <_realloc_r+0x3aa>
    d87e:	adds	r4, #16
    d880:	add.w	r3, sl, #24
    d884:	b.n	d7ee <_realloc_r+0x2d6>
    d886:	mov	r2, r7
    d888:	b.n	d6f2 <_realloc_r+0x1da>
    d88a:	mov	r1, r4
    d88c:	mov	r0, r7
    d88e:	bl	ed70 <memmove>
    d892:	ldr	r3, [pc, #88]	; (d8ec <_realloc_r+0x3d4>)
    d894:	b.n	d6fe <_realloc_r+0x1e6>
    d896:	ldr	r2, [r4, #16]
    d898:	str.w	r2, [sl, #24]
    d89c:	ldr	r2, [r4, #20]
    d89e:	str.w	r2, [sl, #28]
    d8a2:	adds	r4, #24
    d8a4:	add.w	r2, sl, #32
    d8a8:	b.n	d79c <_realloc_r+0x284>
    d8aa:	ldr	r1, [r4, #8]
    d8ac:	str.w	r1, [sl, #16]
    d8b0:	ldr	r1, [r4, #12]
    d8b2:	str.w	r1, [sl, #20]
    d8b6:	cmp	r2, #36	; 0x24
    d8b8:	beq.n	d8d6 <_realloc_r+0x3be>
    d8ba:	adds	r4, #16
    d8bc:	add.w	r2, sl, #24
    d8c0:	b.n	d6f2 <_realloc_r+0x1da>
    d8c2:	ldr	r3, [r4, #16]
    d8c4:	str.w	r3, [sl, #24]
    d8c8:	ldr	r3, [r4, #20]
    d8ca:	str.w	r3, [sl, #28]
    d8ce:	adds	r4, #24
    d8d0:	add.w	r3, sl, #32
    d8d4:	b.n	d7ee <_realloc_r+0x2d6>
    d8d6:	ldr	r2, [r4, #16]
    d8d8:	str.w	r2, [sl, #24]
    d8dc:	ldr	r2, [r4, #20]
    d8de:	str.w	r2, [sl, #28]
    d8e2:	adds	r4, #24
    d8e4:	add.w	r2, sl, #32
    d8e8:	b.n	d6f2 <_realloc_r+0x1da>
    d8ea:	nop
    d8ec:	.word	0x20008fb0

0000d8f0 <_strtod_l>:
    d8f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8f4:	vpush	{d8-d15}
    d8f8:	sub	sp, #92	; 0x5c
    d8fa:	mov	sl, r1
    d8fc:	movs	r1, #0
    d8fe:	str	r2, [sp, #28]
    d900:	str	r1, [sp, #72]	; 0x48
    d902:	movs	r2, #0
    d904:	movs	r1, #0
    d906:	strd	r1, r2, [sp, #16]
    d90a:	mov	r8, r0
    d90c:	mov	r1, sl
    d90e:	str	r1, [sp, #68]	; 0x44
    d910:	mov	r7, r1
    d912:	ldrb.w	r2, [r1], #1
    d916:	cmp	r2, #45	; 0x2d
    d918:	bhi.n	d9d8 <_strtod_l+0xe8>
    d91a:	add	r0, pc, #4	; (adr r0, d920 <_strtod_l+0x30>)
    d91c:	ldr.w	pc, [r0, r2, lsl #2]
    d920:	.word	0x0000dac1
    d924:	.word	0x0000d9d9
    d928:	.word	0x0000d9d9
    d92c:	.word	0x0000d9d9
    d930:	.word	0x0000d9d9
    d934:	.word	0x0000d9d9
    d938:	.word	0x0000d9d9
    d93c:	.word	0x0000d9d9
    d940:	.word	0x0000d9d9
    d944:	.word	0x0000d90f
    d948:	.word	0x0000d90f
    d94c:	.word	0x0000d90f
    d950:	.word	0x0000d90f
    d954:	.word	0x0000d90f
    d958:	.word	0x0000d9d9
    d95c:	.word	0x0000d9d9
    d960:	.word	0x0000d9d9
    d964:	.word	0x0000d9d9
    d968:	.word	0x0000d9d9
    d96c:	.word	0x0000d9d9
    d970:	.word	0x0000d9d9
    d974:	.word	0x0000d9d9
    d978:	.word	0x0000d9d9
    d97c:	.word	0x0000d9d9
    d980:	.word	0x0000d9d9
    d984:	.word	0x0000d9d9
    d988:	.word	0x0000d9d9
    d98c:	.word	0x0000d9d9
    d990:	.word	0x0000d9d9
    d994:	.word	0x0000d9d9
    d998:	.word	0x0000d9d9
    d99c:	.word	0x0000d9d9
    d9a0:	.word	0x0000d90f
    d9a4:	.word	0x0000d9d9
    d9a8:	.word	0x0000d9d9
    d9ac:	.word	0x0000d9d9
    d9b0:	.word	0x0000d9d9
    d9b4:	.word	0x0000d9d9
    d9b8:	.word	0x0000d9d9
    d9bc:	.word	0x0000d9d9
    d9c0:	.word	0x0000d9d9
    d9c4:	.word	0x0000d9d9
    d9c8:	.word	0x0000d9d9
    d9cc:	.word	0x0000e0fb
    d9d0:	.word	0x0000d9d9
    d9d4:	.word	0x0000e0e7
    d9d8:	movs	r1, #0
    d9da:	str	r1, [sp, #36]	; 0x24
    d9dc:	cmp	r2, #48	; 0x30
    d9de:	beq.n	dadc <_strtod_l+0x1ec>
    d9e0:	movs	r3, #0
    d9e2:	str	r3, [sp, #32]
    d9e4:	cmp	r2, #47	; 0x2f
    d9e6:	mov	r4, r2
    d9e8:	bls.w	e386 <_strtod_l+0xa96>
    d9ec:	mov.w	r9, #0
    d9f0:	mov	r0, r7
    d9f2:	mov	r6, r9
    d9f4:	mov	r5, r9
    d9f6:	b.n	da1e <_strtod_l+0x12e>
    d9f8:	adds	r0, #1
    d9fa:	cmp	r5, #8
    d9fc:	str	r0, [sp, #68]	; 0x44
    d9fe:	it	gt
    da00:	addgt.w	r9, r9, r9, lsl #2
    da04:	ldrb	r4, [r0, #0]
    da06:	itte	gt
    da08:	addgt.w	r2, r2, r9, lsl #1
    da0c:	subgt.w	r9, r2, #48	; 0x30
    da10:	suble.w	r6, r3, #48	; 0x30
    da14:	cmp	r4, #47	; 0x2f
    da16:	add.w	r5, r5, #1
    da1a:	mov	r2, r4
    da1c:	ble.n	dafe <_strtod_l+0x20e>
    da1e:	add.w	r3, r6, r6, lsl #2
    da22:	cmp	r4, #57	; 0x39
    da24:	add.w	r3, r2, r3, lsl #1
    da28:	ble.n	d9f8 <_strtod_l+0x108>
    da2a:	ldr	r1, [pc, #636]	; (dca8 <_strtod_l+0x3b8>)
    da2c:	movs	r2, #1
    da2e:	bl	ef14 <strncmp>
    da32:	cmp	r0, #0
    da34:	bne.n	daa6 <_strtod_l+0x1b6>
    da36:	ldr	r3, [sp, #68]	; 0x44
    da38:	mov	r2, r3
    da3a:	adds	r3, #1
    da3c:	str	r3, [sp, #68]	; 0x44
    da3e:	ldrb	r4, [r2, #1]
    da40:	cmp	r5, #0
    da42:	bne.w	e4cc <_strtod_l+0xbdc>
    da46:	cmp	r4, #48	; 0x30
    da48:	bne.w	e494 <_strtod_l+0xba4>
    da4c:	rsb	r2, r3, #1
    da50:	adds	r0, r3, r2
    da52:	adds	r3, #1
    da54:	str	r3, [sp, #68]	; 0x44
    da56:	ldrb	r4, [r3, #0]
    da58:	cmp	r4, #48	; 0x30
    da5a:	beq.n	da50 <_strtod_l+0x160>
    da5c:	sub.w	r3, r4, #49	; 0x31
    da60:	cmp	r3, #8
    da62:	bhi.w	e068 <_strtod_l+0x778>
    da66:	ldr	r7, [sp, #68]	; 0x44
    da68:	adds	r3, r0, #1
    da6a:	sub.w	fp, r4, #48	; 0x30
    da6e:	str	r3, [sp, #44]	; 0x2c
    da70:	movs	r5, #1
    da72:	mov	ip, r7
    da74:	mov.w	lr, #0
    da78:	add.w	r6, r6, r6, lsl #2
    da7c:	add.w	r6, fp, r6, lsl #1
    da80:	movs	r0, #0
    da82:	add.w	r3, ip, #1
    da86:	str	r3, [sp, #68]	; 0x44
    da88:	ldrb.w	r4, [ip, #1]
    da8c:	sub.w	r1, r4, #48	; 0x30
    da90:	cmp	r1, #9
    da92:	bhi.w	e00c <_strtod_l+0x71c>
    da96:	adds	r0, #1
    da98:	mov	fp, r1
    da9a:	cmp	r1, #0
    da9c:	bne.w	e33e <_strtod_l+0xa4e>
    daa0:	ldr.w	ip, [sp, #68]	; 0x44
    daa4:	b.n	da82 <_strtod_l+0x192>
    daa6:	movs	r0, #0
    daa8:	cmp	r4, #101	; 0x65
    daaa:	mov	lr, r5
    daac:	str	r0, [sp, #44]	; 0x2c
    daae:	mov	ip, r0
    dab0:	beq.n	dab6 <_strtod_l+0x1c6>
    dab2:	cmp	r4, #69	; 0x45
    dab4:	bne.n	db18 <_strtod_l+0x228>
    dab6:	cmp	r5, #0
    dab8:	bne.n	db92 <_strtod_l+0x2a2>
    daba:	ldr	r3, [sp, #32]
    dabc:	orrs	r3, r0
    dabe:	bne.n	db90 <_strtod_l+0x2a0>
    dac0:	ldr	r3, [sp, #28]
    dac2:	vldr	d8, [pc, #476]	; dca0 <_strtod_l+0x3b0>
    dac6:	cbz	r3, dace <_strtod_l+0x1de>
    dac8:	ldr	r3, [sp, #28]
    daca:	str.w	sl, [r3]
    dace:	vmov.f64	d0, d8
    dad2:	add	sp, #92	; 0x5c
    dad4:	vpop	{d8-d15}
    dad8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dadc:	ldrb	r2, [r7, #1]
    dade:	and.w	r2, r2, #223	; 0xdf
    dae2:	cmp	r2, #88	; 0x58
    dae4:	beq.w	e300 <_strtod_l+0xa10>
    dae8:	adds	r7, #1
    daea:	str	r7, [sp, #68]	; 0x44
    daec:	ldrb	r2, [r7, #0]
    daee:	cmp	r2, #48	; 0x30
    daf0:	beq.n	dae8 <_strtod_l+0x1f8>
    daf2:	cmp	r2, #0
    daf4:	beq.w	dc66 <_strtod_l+0x376>
    daf8:	movs	r3, #1
    dafa:	str	r3, [sp, #32]
    dafc:	b.n	d9e4 <_strtod_l+0xf4>
    dafe:	ldr	r1, [pc, #424]	; (dca8 <_strtod_l+0x3b8>)
    db00:	movs	r2, #1
    db02:	bl	ef14 <strncmp>
    db06:	cmp	r0, #0
    db08:	beq.w	dc8c <_strtod_l+0x39c>
    db0c:	mov	lr, r5
    db0e:	mov.w	ip, #0
    db12:	str.w	ip, [sp, #44]	; 0x2c
    db16:	mov	r0, ip
    db18:	mov.w	fp, #0
    db1c:	cmp	r5, #0
    db1e:	beq.n	dc1e <_strtod_l+0x32e>
    db20:	vmov	s15, r6
    db24:	ldr	r3, [sp, #44]	; 0x2c
    db26:	vcvt.f64.u32	d7, s15
    db2a:	sub.w	r3, fp, r3
    db2e:	cmp.w	lr, #0
    db32:	it	eq
    db34:	moveq	lr, r5
    db36:	cmp	r5, #16
    db38:	str	r3, [sp, #40]	; 0x28
    db3a:	mov	r3, r5
    db3c:	it	ge
    db3e:	movge	r3, #16
    db40:	cmp	r5, #9
    db42:	vstr	d7, [sp, #16]
    db46:	ble.n	db62 <_strtod_l+0x272>
    db48:	ldr	r2, [pc, #352]	; (dcac <_strtod_l+0x3bc>)
    db4a:	add.w	r2, r2, r3, lsl #3
    db4e:	vldr	d5, [r2, #-72]	; 0xffffffb8
    db52:	vmov	s13, r9
    db56:	vcvt.f64.u32	d6, s13
    db5a:	vfma.f64	d6, d7, d5
    db5e:	vstr	d6, [sp, #16]
    db62:	cmp	r5, #15
    db64:	bgt.w	dcb8 <_strtod_l+0x3c8>
    db68:	ldr	r2, [sp, #40]	; 0x28
    db6a:	cmp	r2, #0
    db6c:	beq.w	e338 <_strtod_l+0xa48>
    db70:	ldr	r2, [sp, #40]	; 0x28
    db72:	ble.w	e1ee <_strtod_l+0x8fe>
    db76:	cmp	r2, #22
    db78:	ble.w	e4ac <_strtod_l+0xbbc>
    db7c:	ldr	r1, [sp, #40]	; 0x28
    db7e:	rsb	r2, r5, #37	; 0x25
    db82:	cmp	r2, r1
    db84:	bge.w	e4d4 <_strtod_l+0xbe4>
    db88:	ldr	r2, [sp, #40]	; 0x28
    db8a:	subs	r3, r5, r3
    db8c:	add	r3, r2
    db8e:	b.n	dcc4 <_strtod_l+0x3d4>
    db90:	movs	r5, #0
    db92:	ldr.w	sl, [sp, #68]	; 0x44
    db96:	add.w	r3, sl, #1
    db9a:	str	r3, [sp, #68]	; 0x44
    db9c:	ldrb.w	r4, [sl, #1]
    dba0:	cmp	r4, #43	; 0x2b
    dba2:	beq.w	e062 <_strtod_l+0x772>
    dba6:	cmp	r4, #45	; 0x2d
    dba8:	beq.w	df9a <_strtod_l+0x6aa>
    dbac:	movs	r3, #0
    dbae:	str	r3, [sp, #40]	; 0x28
    dbb0:	sub.w	r3, r4, #48	; 0x30
    dbb4:	cmp	r3, #9
    dbb6:	bhi.w	df90 <_strtod_l+0x6a0>
    dbba:	cmp	r4, #48	; 0x30
    dbbc:	bne.n	dbca <_strtod_l+0x2da>
    dbbe:	ldr	r3, [sp, #68]	; 0x44
    dbc0:	adds	r3, #1
    dbc2:	str	r3, [sp, #68]	; 0x44
    dbc4:	ldrb	r4, [r3, #0]
    dbc6:	cmp	r4, #48	; 0x30
    dbc8:	beq.n	dbc0 <_strtod_l+0x2d0>
    dbca:	sub.w	r3, r4, #49	; 0x31
    dbce:	cmp	r3, #8
    dbd0:	bhi.n	db18 <_strtod_l+0x228>
    dbd2:	ldr	r2, [sp, #68]	; 0x44
    dbd4:	str	r2, [sp, #48]	; 0x30
    dbd6:	adds	r3, r2, #1
    dbd8:	str	r3, [sp, #68]	; 0x44
    dbda:	sub.w	fp, r4, #48	; 0x30
    dbde:	ldrb	r4, [r2, #1]
    dbe0:	cmp	r4, #47	; 0x2f
    dbe2:	bgt.n	dbf4 <_strtod_l+0x304>
    dbe4:	b.n	e3a4 <_strtod_l+0xab4>
    dbe6:	adds	r3, #1
    dbe8:	str	r3, [sp, #68]	; 0x44
    dbea:	ldrb	r4, [r1, #1]
    dbec:	cmp	r4, #47	; 0x2f
    dbee:	sub.w	fp, r2, #48	; 0x30
    dbf2:	ble.n	dc02 <_strtod_l+0x312>
    dbf4:	add.w	r2, fp, fp, lsl #2
    dbf8:	cmp	r4, #57	; 0x39
    dbfa:	mov	r1, r3
    dbfc:	add.w	r2, r4, r2, lsl #1
    dc00:	ble.n	dbe6 <_strtod_l+0x2f6>
    dc02:	ldr	r2, [sp, #48]	; 0x30
    dc04:	subs	r3, r3, r2
    dc06:	cmp	r3, #8
    dc08:	ble.w	e3a4 <_strtod_l+0xab4>
    dc0c:	movw	fp, #19999	; 0x4e1f
    dc10:	ldr	r3, [sp, #40]	; 0x28
    dc12:	cmp	r3, #0
    dc14:	beq.n	db1c <_strtod_l+0x22c>
    dc16:	rsb	fp, fp, #0
    dc1a:	cmp	r5, #0
    dc1c:	bne.n	db20 <_strtod_l+0x230>
    dc1e:	ldr	r3, [sp, #32]
    dc20:	orrs	r3, r0
    dc22:	bne.n	dc66 <_strtod_l+0x376>
    dc24:	cmp.w	ip, #0
    dc28:	bne.w	dac0 <_strtod_l+0x1d0>
    dc2c:	cmp	r4, #105	; 0x69
    dc2e:	beq.w	e3d0 <_strtod_l+0xae0>
    dc32:	bgt.w	e21c <_strtod_l+0x92c>
    dc36:	cmp	r4, #73	; 0x49
    dc38:	beq.w	e3d0 <_strtod_l+0xae0>
    dc3c:	cmp	r4, #78	; 0x4e
    dc3e:	bne.w	dac0 <_strtod_l+0x1d0>
    dc42:	ldr	r1, [pc, #108]	; (dcb0 <_strtod_l+0x3c0>)
    dc44:	add	r0, sp, #68	; 0x44
    dc46:	bl	ffe8 <__match>
    dc4a:	cmp	r0, #0
    dc4c:	beq.w	dac0 <_strtod_l+0x1d0>
    dc50:	ldr	r3, [sp, #68]	; 0x44
    dc52:	ldrb	r3, [r3, #0]
    dc54:	cmp	r3, #40	; 0x28
    dc56:	beq.w	e63e <_strtod_l+0xd4e>
    dc5a:	ldr	r0, [pc, #88]	; (dcb4 <_strtod_l+0x3c4>)
    dc5c:	bl	f660 <nan>
    dc60:	vmov.f64	d8, d0
    dc64:	b.n	dc6a <_strtod_l+0x37a>
    dc66:	vldr	d8, [pc, #56]	; dca0 <_strtod_l+0x3b0>
    dc6a:	ldr	r2, [sp, #28]
    dc6c:	cbz	r2, dc72 <_strtod_l+0x382>
    dc6e:	ldr	r3, [sp, #68]	; 0x44
    dc70:	str	r3, [r2, #0]
    dc72:	ldr	r3, [sp, #36]	; 0x24
    dc74:	cmp	r3, #0
    dc76:	beq.w	dace <_strtod_l+0x1de>
    dc7a:	vneg.f64	d8, d8
    dc7e:	vmov.f64	d0, d8
    dc82:	add	sp, #92	; 0x5c
    dc84:	vpop	{d8-d15}
    dc88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc8c:	ldr	r3, [sp, #68]	; 0x44
    dc8e:	str	r0, [sp, #44]	; 0x2c
    dc90:	adds	r2, r3, #1
    dc92:	str	r2, [sp, #68]	; 0x44
    dc94:	ldrb	r4, [r3, #1]
    dc96:	mov	lr, r5
    dc98:	b.n	da8c <_strtod_l+0x19c>
    dc9a:	nop
    dc9c:	nop.w
	...
    dca8:	.word	0x200009a8
    dcac:	.word	0x20000328
    dcb0:	.word	0x200009b8
    dcb4:	.word	0x20000614
    dcb8:	ldr	r2, [sp, #40]	; 0x28
    dcba:	subs	r3, r5, r3
    dcbc:	add	r3, r2
    dcbe:	cmp	r3, #0
    dcc0:	ble.w	e224 <_strtod_l+0x934>
    dcc4:	ands.w	r1, r3, #15
    dcc8:	beq.n	dce0 <_strtod_l+0x3f0>
    dcca:	ldr	r2, [pc, #780]	; (dfd8 <_strtod_l+0x6e8>)
    dccc:	add.w	r2, r2, r1, lsl #3
    dcd0:	vldr	d6, [sp, #16]
    dcd4:	vldr	d7, [r2]
    dcd8:	vmul.f64	d7, d7, d6
    dcdc:	vstr	d7, [sp, #16]
    dce0:	bics.w	r2, r3, #15
    dce4:	bne.w	e158 <_strtod_l+0x868>
    dce8:	movs	r3, #0
    dcea:	str	r3, [sp, #32]
    dcec:	str	r6, [sp, #0]
    dcee:	mov	r3, r5
    dcf0:	mov	r2, lr
    dcf2:	mov	r1, r7
    dcf4:	mov	r0, r8
    dcf6:	bl	10300 <__s2b>
    dcfa:	mov	r9, r0
    dcfc:	cmp	r0, #0
    dcfe:	beq.w	e2c4 <_strtod_l+0x9d4>
    dd02:	ldr	r3, [sp, #44]	; 0x2c
    dd04:	sub.w	fp, r3, fp
    dd08:	ldr	r3, [sp, #40]	; 0x28
    dd0a:	vldr	d14, [pc, #676]	; dfb0 <_strtod_l+0x6c0>
    dd0e:	cmp	r3, #0
    dd10:	vldr	d12, [pc, #676]	; dfb8 <_strtod_l+0x6c8>
    dd14:	vldr	d13, [pc, #680]	; dfc0 <_strtod_l+0x6d0>
    dd18:	vldr	d11, [pc, #684]	; dfc8 <_strtod_l+0x6d8>
    dd1c:	ite	lt
    dd1e:	movlt	r2, fp
    dd20:	movge	r2, #0
    dd22:	mov.w	sl, #0
    dd26:	bic.w	r3, r3, r3, asr #31
    dd2a:	str	r2, [sp, #44]	; 0x2c
    dd2c:	str	r3, [sp, #48]	; 0x30
    dd2e:	mov	r4, sl
    dd30:	ldr.w	r1, [r9, #4]
    dd34:	mov	r0, r8
    dd36:	bl	101fc <_Balloc>
    dd3a:	mov	r6, r0
    dd3c:	cmp	r0, #0
    dd3e:	beq.w	df5e <_strtod_l+0x66e>
    dd42:	ldr.w	r2, [r9, #16]
    dd46:	vldr	d8, [sp, #16]
    dd4a:	adds	r2, #2
    dd4c:	lsls	r2, r2, #2
    dd4e:	add.w	r1, r9, #12
    dd52:	adds	r0, #12
    dd54:	bl	a56c <memcpy>
    dd58:	vmov.f64	d0, d8
    dd5c:	add	r2, sp, #80	; 0x50
    dd5e:	add	r1, sp, #76	; 0x4c
    dd60:	mov	r0, r8
    dd62:	bl	10a78 <__d2b>
    dd66:	str	r0, [sp, #72]	; 0x48
    dd68:	cmp	r0, #0
    dd6a:	beq.w	df36 <_strtod_l+0x646>
    dd6e:	movs	r1, #1
    dd70:	mov	r0, r8
    dd72:	bl	10450 <__i2b>
    dd76:	mov	r4, r0
    dd78:	cmp	r0, #0
    dd7a:	beq.w	df5e <_strtod_l+0x66e>
    dd7e:	ldr	r2, [sp, #76]	; 0x4c
    dd80:	cmp	r2, #0
    dd82:	blt.w	df42 <_strtod_l+0x652>
    dd86:	ldr	r3, [sp, #44]	; 0x2c
    dd88:	ldr	r7, [sp, #48]	; 0x30
    dd8a:	add.w	fp, r2, r3
    dd8e:	ldr	r3, [sp, #32]
    dd90:	ldr	r5, [sp, #80]	; 0x50
    dd92:	subs	r2, r2, r3
    dd94:	add	r2, r5
    dd96:	ldr	r3, [pc, #580]	; (dfdc <_strtod_l+0x6ec>)
    dd98:	subs	r2, #1
    dd9a:	cmp	r2, r3
    dd9c:	rsb	r5, r5, #54	; 0x36
    dda0:	bge.w	ded4 <_strtod_l+0x5e4>
    dda4:	subs	r1, r3, r2
    dda6:	cmp	r1, #31
    dda8:	sub.w	r5, r5, r1
    ddac:	bgt.w	df76 <_strtod_l+0x686>
    ddb0:	movs	r2, #1
    ddb2:	lsl.w	r3, r2, r1
    ddb6:	str	r3, [sp, #52]	; 0x34
    ddb8:	movs	r3, #0
    ddba:	str	r3, [sp, #56]	; 0x38
    ddbc:	add	r7, r5
    ddbe:	ldr	r3, [sp, #32]
    ddc0:	add	r5, fp
    ddc2:	cmp	fp, r5
    ddc4:	mov	r2, fp
    ddc6:	add	r7, r3
    ddc8:	it	ge
    ddca:	movge	r2, r5
    ddcc:	cmp	r2, r7
    ddce:	it	ge
    ddd0:	movge	r2, r7
    ddd2:	cmp	r2, #0
    ddd4:	ble.n	ddde <_strtod_l+0x4ee>
    ddd6:	subs	r5, r5, r2
    ddd8:	subs	r7, r7, r2
    ddda:	sub.w	fp, fp, r2
    ddde:	ldr	r3, [sp, #44]	; 0x2c
    dde0:	cmp	r3, #0
    dde2:	bgt.w	def6 <_strtod_l+0x606>
    dde6:	cmp	r5, #0
    dde8:	bgt.w	df24 <_strtod_l+0x634>
    ddec:	ldr	r3, [sp, #40]	; 0x28
    ddee:	cmp	r3, #0
    ddf0:	bgt.w	df62 <_strtod_l+0x672>
    ddf4:	cmp	r7, #0
    ddf6:	bgt.w	df4c <_strtod_l+0x65c>
    ddfa:	cmp.w	fp, #0
    ddfe:	ble.n	de12 <_strtod_l+0x522>
    de00:	mov	r1, r4
    de02:	mov	r2, fp
    de04:	mov	r0, r8
    de06:	bl	106c8 <__lshift>
    de0a:	mov	r4, r0
    de0c:	cmp	r0, #0
    de0e:	beq.w	df5e <_strtod_l+0x66e>
    de12:	ldr	r1, [sp, #72]	; 0x48
    de14:	mov	r2, r6
    de16:	mov	r0, r8
    de18:	bl	107fc <__mdiff>
    de1c:	mov	sl, r0
    de1e:	cmp	r0, #0
    de20:	beq.w	df5e <_strtod_l+0x66e>
    de24:	movs	r3, #0
    de26:	ldr	r5, [r0, #12]
    de28:	str	r3, [r0, #12]
    de2a:	mov	r1, r4
    de2c:	bl	107b8 <__mcmp>
    de30:	cmp	r0, #0
    de32:	blt.w	e5c4 <_strtod_l+0xcd4>
    de36:	beq.w	e4fc <_strtod_l+0xc0c>
    de3a:	mov	r1, r4
    de3c:	mov	r0, sl
    de3e:	bl	10b4c <__ratio>
    de42:	vmov.f64	d7, #0	; 0x40000000  2.0
    de46:	vcmpe.f64	d0, d7
    de4a:	vmrs	APSR_nzcv, fpscr
    de4e:	bhi.n	dede <_strtod_l+0x5ee>
    de50:	cmp	r5, #0
    de52:	beq.w	dfec <_strtod_l+0x6fc>
    de56:	vmov.f64	d9, #112	; 0x3f800000  1.0
    de5a:	ldr	r0, [sp, #20]
    de5c:	ldr	r3, [pc, #384]	; (dfe0 <_strtod_l+0x6f0>)
    de5e:	movs	r2, #0
    de60:	ldr	r1, [pc, #384]	; (dfe4 <_strtod_l+0x6f4>)
    de62:	ldr.w	ip, [pc, #388]	; dfe8 <_strtod_l+0x6f8>
    de66:	and.w	r7, r0, r1
    de6a:	cmp	r7, ip
    de6c:	beq.w	e018 <_strtod_l+0x728>
    de70:	ldr	r1, [sp, #32]
    de72:	cbz	r1, de8c <_strtod_l+0x59c>
    de74:	cmp.w	r7, #111149056	; 0x6a00000
    de78:	bhi.n	de8c <_strtod_l+0x59c>
    de7a:	vcmpe.f64	d9, d11
    de7e:	vmrs	APSR_nzcv, fpscr
    de82:	bls.w	e132 <_strtod_l+0x842>
    de86:	add.w	r1, r3, #112197632	; 0x6b00000
    de8a:	subs	r3, r1, r7
    de8c:	vmov.f64	d0, d8
    de90:	vmov	d10, r2, r3
    de94:	bl	10950 <__ulp>
    de98:	vfma.f64	d8, d10, d0
    de9c:	vstr	d8, [sp, #16]
    dea0:	vmov	r3, s17
    dea4:	ldr	r2, [sp, #32]
    dea6:	cbnz	r2, deb2 <_strtod_l+0x5c2>
    dea8:	ldr	r2, [pc, #312]	; (dfe4 <_strtod_l+0x6f4>)
    deaa:	ands	r2, r3
    deac:	cmp	r7, r2
    deae:	beq.w	e07a <_strtod_l+0x78a>
    deb2:	ldr	r1, [sp, #72]	; 0x48
    deb4:	mov	r0, r8
    deb6:	bl	10248 <_Bfree>
    deba:	mov	r1, r6
    debc:	mov	r0, r8
    debe:	bl	10248 <_Bfree>
    dec2:	mov	r1, r4
    dec4:	mov	r0, r8
    dec6:	bl	10248 <_Bfree>
    deca:	mov	r1, sl
    decc:	mov	r0, r8
    dece:	bl	10248 <_Bfree>
    ded2:	b.n	dd30 <_strtod_l+0x440>
    ded4:	movs	r3, #1
    ded6:	movs	r1, #0
    ded8:	strd	r3, r1, [sp, #52]	; 0x34
    dedc:	b.n	ddbc <_strtod_l+0x4cc>
    dede:	vmov.f64	d9, #96	; 0x3f000000  0.5
    dee2:	vmul.f64	d9, d0, d9
    dee6:	cmp	r5, #0
    dee8:	bne.n	dfaa <_strtod_l+0x6ba>
    deea:	vneg.f64	d7, d9
    deee:	ldr	r0, [sp, #20]
    def0:	vmov	r2, r3, d7
    def4:	b.n	de60 <_strtod_l+0x570>
    def6:	mov	r1, r4
    def8:	mov	r2, r3
    defa:	mov	r0, r8
    defc:	bl	10608 <__pow5mult>
    df00:	mov	r4, r0
    df02:	cbz	r0, df5e <_strtod_l+0x66e>
    df04:	mov	r1, r0
    df06:	ldr	r2, [sp, #72]	; 0x48
    df08:	mov	r0, r8
    df0a:	bl	104ac <__multiply>
    df0e:	cbz	r0, df5e <_strtod_l+0x66e>
    df10:	str	r0, [sp, #60]	; 0x3c
    df12:	ldr	r1, [sp, #72]	; 0x48
    df14:	mov	r0, r8
    df16:	bl	10248 <_Bfree>
    df1a:	ldr	r2, [sp, #60]	; 0x3c
    df1c:	str	r2, [sp, #72]	; 0x48
    df1e:	cmp	r5, #0
    df20:	ble.w	ddec <_strtod_l+0x4fc>
    df24:	ldr	r1, [sp, #72]	; 0x48
    df26:	mov	r2, r5
    df28:	mov	r0, r8
    df2a:	bl	106c8 <__lshift>
    df2e:	str	r0, [sp, #72]	; 0x48
    df30:	cmp	r0, #0
    df32:	bne.w	ddec <_strtod_l+0x4fc>
    df36:	movs	r3, #34	; 0x22
    df38:	vldr	d8, [pc, #148]	; dfd0 <_strtod_l+0x6e0>
    df3c:	str.w	r3, [r8]
    df40:	b.n	e0bc <_strtod_l+0x7cc>
    df42:	ldr	r3, [sp, #48]	; 0x30
    df44:	ldr.w	fp, [sp, #44]	; 0x2c
    df48:	subs	r7, r3, r2
    df4a:	b.n	dd8e <_strtod_l+0x49e>
    df4c:	mov	r1, r6
    df4e:	mov	r2, r7
    df50:	mov	r0, r8
    df52:	bl	106c8 <__lshift>
    df56:	mov	r6, r0
    df58:	cmp	r0, #0
    df5a:	bne.w	ddfa <_strtod_l+0x50a>
    df5e:	ldr	r0, [sp, #72]	; 0x48
    df60:	b.n	df36 <_strtod_l+0x646>
    df62:	mov	r1, r6
    df64:	ldr	r2, [sp, #48]	; 0x30
    df66:	mov	r0, r8
    df68:	bl	10608 <__pow5mult>
    df6c:	mov	r6, r0
    df6e:	cmp	r0, #0
    df70:	bne.w	ddf4 <_strtod_l+0x504>
    df74:	b.n	df5e <_strtod_l+0x66e>
    df76:	rsb	r2, r2, #4278190080	; 0xff000000
    df7a:	add.w	r2, r2, #16711680	; 0xff0000
    df7e:	add.w	r2, r2, #64256	; 0xfb00
    df82:	movs	r1, #1
    df84:	adds	r2, #226	; 0xe2
    df86:	lsl.w	r3, r1, r2
    df8a:	strd	r1, r3, [sp, #52]	; 0x34
    df8e:	b.n	ddbc <_strtod_l+0x4cc>
    df90:	str.w	sl, [sp, #68]	; 0x44
    df94:	mov.w	fp, #0
    df98:	b.n	db1c <_strtod_l+0x22c>
    df9a:	movs	r3, #1
    df9c:	str	r3, [sp, #40]	; 0x28
    df9e:	add.w	r3, sl, #2
    dfa2:	str	r3, [sp, #68]	; 0x44
    dfa4:	ldrb.w	r4, [sl, #2]
    dfa8:	b.n	dbb0 <_strtod_l+0x2c0>
    dfaa:	vmov.f64	d7, d9
    dfae:	b.n	deee <_strtod_l+0x5fe>
    dfb0:	.word	0x94a03595
    dfb4:	.word	0x3fcfffff
    dfb8:	.word	0x94a03595
    dfbc:	.word	0x3fdfffff
    dfc0:	.word	0x35afe535
    dfc4:	.word	0x3fe00000
    dfc8:	.word	0xffc00000
    dfcc:	.word	0x41dfffff
    dfd0:	.word	0x00000000
    dfd4:	.word	0x7ff00000
    dfd8:	.word	0x20000328
    dfdc:	.word	0xfffffc02
    dfe0:	.word	0x3ff00000
    dfe4:	.word	0x7ff00000
    dfe8:	.word	0x7fe00000
    dfec:	ldrd	r1, r2, [sp, #16]
    dff0:	cmp	r1, #0
    dff2:	beq.w	e100 <_strtod_l+0x810>
    dff6:	ldrd	r1, r2, [sp, #16]
    dffa:	cmp	r1, #1
    dffc:	beq.w	e3b0 <_strtod_l+0xac0>
    e000:	mov	r0, r2
    e002:	ldr	r3, [pc, #732]	; (e2e0 <_strtod_l+0x9f0>)
    e004:	vmov.f64	d9, #112	; 0x3f800000  1.0
    e008:	movs	r2, #0
    e00a:	b.n	de60 <_strtod_l+0x570>
    e00c:	cmp	r4, #101	; 0x65
    e00e:	mov.w	ip, #1
    e012:	beq.w	db92 <_strtod_l+0x2a2>
    e016:	b.n	dab2 <_strtod_l+0x1c2>
    e018:	vmov	d10, r2, r3
    e01c:	sub.w	r3, r0, #55574528	; 0x3500000
    e020:	str	r3, [sp, #20]
    e022:	vldr	d15, [sp, #16]
    e026:	vmov.f64	d0, d15
    e02a:	bl	10950 <__ulp>
    e02e:	ldr	r1, [pc, #692]	; (e2e4 <_strtod_l+0x9f4>)
    e030:	vfma.f64	d15, d10, d0
    e034:	vmov	r3, s31
    e038:	ldr	r2, [pc, #684]	; (e2e8 <_strtod_l+0x9f8>)
    e03a:	ands	r1, r3
    e03c:	cmp	r1, r2
    e03e:	vstr	d15, [sp, #16]
    e042:	bls.n	e12a <_strtod_l+0x83a>
    e044:	ldr	r3, [pc, #676]	; (e2ec <_strtod_l+0x9fc>)
    e046:	vmov	r2, s17
    e04a:	cmp	r2, r3
    e04c:	bne.n	e056 <_strtod_l+0x766>
    e04e:	vmov	r3, s16
    e052:	adds	r3, #1
    e054:	beq.n	df5e <_strtod_l+0x66e>
    e056:	ldr	r2, [pc, #660]	; (e2ec <_strtod_l+0x9fc>)
    e058:	mov.w	r3, #4294967295
    e05c:	strd	r3, r2, [sp, #16]
    e060:	b.n	deb2 <_strtod_l+0x5c2>
    e062:	movs	r3, #0
    e064:	str	r3, [sp, #40]	; 0x28
    e066:	b.n	df9e <_strtod_l+0x6ae>
    e068:	cmp	r4, #101	; 0x65
    e06a:	beq.w	e20e <_strtod_l+0x91e>
    e06e:	cmp	r4, #69	; 0x45
    e070:	beq.w	e20e <_strtod_l+0x91e>
    e074:	mov.w	ip, #1
    e078:	b.n	dc1e <_strtod_l+0x32e>
    e07a:	vmov	r0, r1, d9
    e07e:	str	r3, [sp, #52]	; 0x34
    e080:	bl	17964 <__aeabi_d2lz>
    e084:	bl	17908 <__aeabi_l2d>
    e088:	ldr	r3, [sp, #16]
    e08a:	orrs	r5, r3
    e08c:	ldr	r3, [sp, #52]	; 0x34
    e08e:	vmov	d7, r0, r1
    e092:	ubfx	r3, r3, #0, #20
    e096:	orrs	r5, r3
    e098:	vsub.f64	d9, d9, d7
    e09c:	beq.w	e1e0 <_strtod_l+0x8f0>
    e0a0:	vcmpe.f64	d9, d12
    e0a4:	vmrs	APSR_nzcv, fpscr
    e0a8:	bmi.n	e0b6 <_strtod_l+0x7c6>
    e0aa:	vcmpe.f64	d9, d13
    e0ae:	vmrs	APSR_nzcv, fpscr
    e0b2:	ble.w	deb2 <_strtod_l+0x5c2>
    e0b6:	vldr	d8, [sp, #16]
    e0ba:	ldr	r0, [sp, #72]	; 0x48
    e0bc:	mov	r1, r0
    e0be:	mov	r0, r8
    e0c0:	bl	10248 <_Bfree>
    e0c4:	mov	r1, r6
    e0c6:	mov	r0, r8
    e0c8:	bl	10248 <_Bfree>
    e0cc:	mov	r1, r4
    e0ce:	mov	r0, r8
    e0d0:	bl	10248 <_Bfree>
    e0d4:	mov	r1, r9
    e0d6:	mov	r0, r8
    e0d8:	bl	10248 <_Bfree>
    e0dc:	mov	r1, sl
    e0de:	mov	r0, r8
    e0e0:	bl	10248 <_Bfree>
    e0e4:	b.n	dc6a <_strtod_l+0x37a>
    e0e6:	movs	r2, #1
    e0e8:	str	r2, [sp, #36]	; 0x24
    e0ea:	adds	r1, r7, #1
    e0ec:	str	r1, [sp, #68]	; 0x44
    e0ee:	ldrb	r2, [r7, #1]
    e0f0:	cmp	r2, #0
    e0f2:	beq.w	dac0 <_strtod_l+0x1d0>
    e0f6:	mov	r7, r1
    e0f8:	b.n	d9dc <_strtod_l+0xec>
    e0fa:	movs	r2, #0
    e0fc:	str	r2, [sp, #36]	; 0x24
    e0fe:	b.n	e0ea <_strtod_l+0x7fa>
    e100:	ubfx	r3, r2, #0, #20
    e104:	mov	r0, r2
    e106:	cmp	r3, #0
    e108:	bne.w	e002 <_strtod_l+0x712>
    e10c:	vmov.f64	d7, #112	; 0x3f800000  1.0
    e110:	vcmpe.f64	d0, d7
    e114:	vmrs	APSR_nzcv, fpscr
    e118:	bmi.w	e4c2 <_strtod_l+0xbd2>
    e11c:	vmov.f64	d9, #96	; 0x3f000000  0.5
    e120:	vmul.f64	d9, d0, d9
    e124:	vneg.f64	d7, d9
    e128:	b.n	def0 <_strtod_l+0x600>
    e12a:	add.w	r3, r3, #55574528	; 0x3500000
    e12e:	str	r3, [sp, #20]
    e130:	b.n	dea4 <_strtod_l+0x5b4>
    e132:	vcvt.u32.f64	s18, d9
    e136:	vmov	r3, s18
    e13a:	cmp	r3, #1
    e13c:	it	cc
    e13e:	movcc	r3, #1
    e140:	vmov	s18, r3
    e144:	vcvt.f64.u32	d9, s18
    e148:	cmp	r5, #0
    e14a:	bne.w	e3ca <_strtod_l+0xada>
    e14e:	vneg.f64	d7, d9
    e152:	vmov	r2, r3, d7
    e156:	b.n	de86 <_strtod_l+0x596>
    e158:	cmp.w	r2, #308	; 0x134
    e15c:	bgt.w	e2c4 <_strtod_l+0x9d4>
    e160:	cmp	r2, #16
    e162:	mov.w	r3, r2, asr #4
    e166:	ble.w	e676 <_strtod_l+0xd86>
    e16a:	ldr	r4, [pc, #388]	; (e2f0 <_strtod_l+0xa00>)
    e16c:	vldr	d7, [sp, #16]
    e170:	movs	r0, #0
    e172:	mov	r2, r4
    e174:	mov	r1, r0
    e176:	tst.w	r3, #1
    e17a:	add.w	r1, r1, #1
    e17e:	mov.w	r3, r3, asr #1
    e182:	beq.n	e18e <_strtod_l+0x89e>
    e184:	vldr	d6, [r2]
    e188:	movs	r0, #1
    e18a:	vmul.f64	d7, d7, d6
    e18e:	cmp	r3, #1
    e190:	add.w	r2, r2, #8
    e194:	bne.n	e176 <_strtod_l+0x886>
    e196:	cbz	r0, e19c <_strtod_l+0x8ac>
    e198:	vstr	d7, [sp, #16]
    e19c:	ldr	r3, [sp, #20]
    e19e:	sub.w	r3, r3, #55574528	; 0x3500000
    e1a2:	str	r3, [sp, #20]
    e1a4:	add.w	r4, r4, r1, lsl #3
    e1a8:	vldr	d6, [sp, #16]
    e1ac:	vldr	d7, [r4]
    e1b0:	ldr	r3, [pc, #304]	; (e2e4 <_strtod_l+0x9f4>)
    e1b2:	vmul.f64	d7, d7, d6
    e1b6:	vmov	r2, s15
    e1ba:	ldr	r1, [pc, #312]	; (e2f4 <_strtod_l+0xa04>)
    e1bc:	ands	r3, r2
    e1be:	cmp	r3, r1
    e1c0:	vstr	d7, [sp, #16]
    e1c4:	bhi.n	e2c4 <_strtod_l+0x9d4>
    e1c6:	sub.w	r1, r1, #1048576	; 0x100000
    e1ca:	cmp	r3, r1
    e1cc:	bls.w	e57c <_strtod_l+0xc8c>
    e1d0:	ldr	r4, [pc, #280]	; (e2ec <_strtod_l+0x9fc>)
    e1d2:	mov.w	r3, #4294967295
    e1d6:	strd	r3, r4, [sp, #16]
    e1da:	movs	r3, #0
    e1dc:	str	r3, [sp, #32]
    e1de:	b.n	dcec <_strtod_l+0x3fc>
    e1e0:	vcmpe.f64	d9, d14
    e1e4:	vmrs	APSR_nzcv, fpscr
    e1e8:	bpl.w	deb2 <_strtod_l+0x5c2>
    e1ec:	b.n	e0b6 <_strtod_l+0x7c6>
    e1ee:	adds	r2, #22
    e1f0:	blt.w	dcb8 <_strtod_l+0x3c8>
    e1f4:	ldr	r3, [sp, #44]	; 0x2c
    e1f6:	sub.w	fp, r3, fp
    e1fa:	ldr	r3, [pc, #252]	; (e2f8 <_strtod_l+0xa08>)
    e1fc:	add.w	r3, r3, fp, lsl #3
    e200:	vldr	d7, [r3]
    e204:	vldr	d6, [sp, #16]
    e208:	vdiv.f64	d8, d6, d7
    e20c:	b.n	dc6a <_strtod_l+0x37a>
    e20e:	mov.w	lr, #0
    e212:	str.w	lr, [sp, #44]	; 0x2c
    e216:	mov.w	ip, #1
    e21a:	b.n	daba <_strtod_l+0x1ca>
    e21c:	cmp	r4, #110	; 0x6e
    e21e:	beq.w	dc42 <_strtod_l+0x352>
    e222:	b.n	dac0 <_strtod_l+0x1d0>
    e224:	beq.w	dce8 <_strtod_l+0x3f8>
    e228:	negs	r3, r3
    e22a:	ands.w	r1, r3, #15
    e22e:	beq.n	e246 <_strtod_l+0x956>
    e230:	ldr	r2, [pc, #196]	; (e2f8 <_strtod_l+0xa08>)
    e232:	add.w	r2, r2, r1, lsl #3
    e236:	vldr	d6, [sp, #16]
    e23a:	vldr	d7, [r2]
    e23e:	vdiv.f64	d7, d6, d7
    e242:	vstr	d7, [sp, #16]
    e246:	asrs	r3, r3, #4
    e248:	beq.w	dce8 <_strtod_l+0x3f8>
    e24c:	cmp	r3, #31
    e24e:	bgt.n	e2b8 <_strtod_l+0x9c8>
    e250:	ands.w	r2, r3, #16
    e254:	it	ne
    e256:	movne	r2, #106	; 0x6a
    e258:	vldr	d7, [sp, #16]
    e25c:	str	r2, [sp, #32]
    e25e:	ldr	r2, [pc, #156]	; (e2fc <_strtod_l+0xa0c>)
    e260:	movs	r1, #0
    e262:	lsls	r0, r3, #31
    e264:	bpl.n	e270 <_strtod_l+0x980>
    e266:	vldr	d6, [r2]
    e26a:	movs	r1, #1
    e26c:	vmul.f64	d7, d7, d6
    e270:	asrs	r3, r3, #1
    e272:	add.w	r2, r2, #8
    e276:	bne.n	e262 <_strtod_l+0x972>
    e278:	cbz	r1, e27e <_strtod_l+0x98e>
    e27a:	vstr	d7, [sp, #16]
    e27e:	ldr	r3, [sp, #32]
    e280:	cbz	r3, e2a8 <_strtod_l+0x9b8>
    e282:	ldrd	r0, r1, [sp, #16]
    e286:	ubfx	r2, r1, #20, #11
    e28a:	rsb	r3, r2, #107	; 0x6b
    e28e:	cmp	r3, #0
    e290:	ble.n	e2a8 <_strtod_l+0x9b8>
    e292:	cmp	r3, #31
    e294:	ble.w	e6f6 <_strtod_l+0xe06>
    e298:	movs	r0, #0
    e29a:	cmp	r3, #52	; 0x34
    e29c:	str	r0, [sp, #16]
    e29e:	ble.w	e722 <_strtod_l+0xe32>
    e2a2:	mov.w	r3, #57671680	; 0x3700000
    e2a6:	str	r3, [sp, #20]
    e2a8:	vldr	d7, [sp, #16]
    e2ac:	vcmp.f64	d7, #0.0
    e2b0:	vmrs	APSR_nzcv, fpscr
    e2b4:	bne.w	dcec <_strtod_l+0x3fc>
    e2b8:	movs	r3, #34	; 0x22
    e2ba:	vldr	d8, [pc, #20]	; e2d0 <_strtod_l+0x9e0>
    e2be:	str.w	r3, [r8]
    e2c2:	b.n	dc6a <_strtod_l+0x37a>
    e2c4:	movs	r3, #34	; 0x22
    e2c6:	vldr	d8, [pc, #16]	; e2d8 <_strtod_l+0x9e8>
    e2ca:	str.w	r3, [r8]
    e2ce:	b.n	dc6a <_strtod_l+0x37a>
	...
    e2dc:	.word	0x7ff00000
    e2e0:	.word	0xbff00000
    e2e4:	.word	0x7ff00000
    e2e8:	.word	0x7c9fffff
    e2ec:	.word	0x7fefffff
    e2f0:	.word	0x20000300
    e2f4:	.word	0x7ca00000
    e2f8:	.word	0x20000328
    e2fc:	.word	0x200003f0
    e300:	str	r3, [sp, #8]
    e302:	ldr	r3, [sp, #36]	; 0x24
    e304:	str	r3, [sp, #4]
    e306:	add	r3, sp, #72	; 0x48
    e308:	str	r3, [sp, #0]
    e30a:	ldr	r2, [pc, #668]	; (e5a8 <_strtod_l+0xcb8>)
    e30c:	add	r3, sp, #76	; 0x4c
    e30e:	add	r1, sp, #68	; 0x44
    e310:	mov	r0, r8
    e312:	bl	fa54 <__gethex>
    e316:	ands.w	r5, r0, #15
    e31a:	mov	r4, r0
    e31c:	beq.w	dc66 <_strtod_l+0x376>
    e320:	cmp	r5, #6
    e322:	bne.n	e40e <_strtod_l+0xb1e>
    e324:	ldr	r3, [sp, #28]
    e326:	vldr	d8, [pc, #616]	; e590 <_strtod_l+0xca0>
    e32a:	adds	r7, #1
    e32c:	cmp	r3, #0
    e32e:	beq.w	dace <_strtod_l+0x1de>
    e332:	str	r7, [r3, #0]
    e334:	b.w	dace <_strtod_l+0x1de>
    e338:	vldr	d8, [sp, #16]
    e33c:	b.n	dc6a <_strtod_l+0x37a>
    e33e:	ldr	r3, [sp, #44]	; 0x2c
    e340:	ldr.w	ip, [sp, #68]	; 0x44
    e344:	add	r3, r0
    e346:	str	r3, [sp, #44]	; 0x2c
    e348:	cmp	r0, #1
    e34a:	add.w	r3, r5, #1
    e34e:	mov	r2, r3
    e350:	beq.n	e37c <_strtod_l+0xa8c>
    e352:	add	r0, r5
    e354:	subs	r4, r0, #1
    e356:	b.n	e360 <_strtod_l+0xa70>
    e358:	lsls	r6, r0, #1
    e35a:	cmp	r4, r3
    e35c:	beq.n	e37a <_strtod_l+0xa8a>
    e35e:	adds	r3, #1
    e360:	mov	r2, r5
    e362:	cmp	r2, #8
    e364:	mov	r5, r3
    e366:	add.w	r0, r6, r6, lsl #2
    e36a:	bls.n	e358 <_strtod_l+0xa68>
    e36c:	cmp	r3, #16
    e36e:	itt	le
    e370:	addle.w	r9, r9, r9, lsl #2
    e374:	movle.w	r9, r9, lsl #1
    e378:	b.n	e35a <_strtod_l+0xa6a>
    e37a:	adds	r2, #2
    e37c:	cmp	r5, #8
    e37e:	bgt.n	e3fa <_strtod_l+0xb0a>
    e380:	mov	r5, r2
    e382:	b.w	da78 <_strtod_l+0x188>
    e386:	ldr	r1, [pc, #548]	; (e5ac <_strtod_l+0xcbc>)
    e388:	movs	r2, #1
    e38a:	mov	r0, r7
    e38c:	bl	ef14 <strncmp>
    e390:	cmp	r0, #0
    e392:	beq.w	e49a <_strtod_l+0xbaa>
    e396:	mov.w	lr, #0
    e39a:	mov	r9, lr
    e39c:	mov	r6, lr
    e39e:	mov	r5, lr
    e3a0:	b.w	db0e <_strtod_l+0x21e>
    e3a4:	movw	r3, #19999	; 0x4e1f
    e3a8:	cmp	fp, r3
    e3aa:	it	ge
    e3ac:	movge	fp, r3
    e3ae:	b.n	dc10 <_strtod_l+0x320>
    e3b0:	ldrd	r2, r3, [sp, #16]
    e3b4:	mov	r0, r3
    e3b6:	cmp	r3, #0
    e3b8:	bne.w	e002 <_strtod_l+0x712>
    e3bc:	movs	r3, #34	; 0x22
    e3be:	vldr	d8, [pc, #464]	; e590 <_strtod_l+0xca0>
    e3c2:	ldr	r0, [sp, #72]	; 0x48
    e3c4:	str.w	r3, [r8]
    e3c8:	b.n	e0bc <_strtod_l+0x7cc>
    e3ca:	vmov.f64	d7, d9
    e3ce:	b.n	e152 <_strtod_l+0x862>
    e3d0:	ldr	r1, [pc, #476]	; (e5b0 <_strtod_l+0xcc0>)
    e3d2:	add	r0, sp, #68	; 0x44
    e3d4:	bl	ffe8 <__match>
    e3d8:	cmp	r0, #0
    e3da:	beq.w	dac0 <_strtod_l+0x1d0>
    e3de:	ldr	r3, [sp, #68]	; 0x44
    e3e0:	ldr	r1, [pc, #464]	; (e5b4 <_strtod_l+0xcc4>)
    e3e2:	subs	r3, #1
    e3e4:	add	r0, sp, #68	; 0x44
    e3e6:	str	r3, [sp, #68]	; 0x44
    e3e8:	bl	ffe8 <__match>
    e3ec:	cbnz	r0, e3f4 <_strtod_l+0xb04>
    e3ee:	ldr	r3, [sp, #68]	; 0x44
    e3f0:	adds	r3, #1
    e3f2:	str	r3, [sp, #68]	; 0x44
    e3f4:	vldr	d8, [pc, #416]	; e598 <_strtod_l+0xca8>
    e3f8:	b.n	dc6a <_strtod_l+0x37a>
    e3fa:	cmp	r2, #16
    e3fc:	itt	le
    e3fe:	addle.w	r9, r9, r9, lsl #2
    e402:	addle.w	r9, r1, r9, lsl #1
    e406:	mov	r5, r2
    e408:	movs	r0, #0
    e40a:	b.w	da82 <_strtod_l+0x192>
    e40e:	ldr	r2, [sp, #72]	; 0x48
    e410:	cbz	r2, e422 <_strtod_l+0xb32>
    e412:	movs	r1, #53	; 0x35
    e414:	add	r0, sp, #80	; 0x50
    e416:	bl	10bb0 <__copybits>
    e41a:	ldr	r1, [sp, #72]	; 0x48
    e41c:	mov	r0, r8
    e41e:	bl	10248 <_Bfree>
    e422:	subs	r5, #1
    e424:	ldr	r3, [sp, #76]	; 0x4c
    e426:	cmp	r5, #4
    e428:	bhi.w	e74a <_strtod_l+0xe5a>
    e42c:	tbb	[pc, r5]
    e430:	.word	0x1f2a2d03
    e434:	.byte	0x03
    e435:	.byte	0x00
    e436:	ldr	r2, [sp, #80]	; 0x50
    e438:	str	r2, [sp, #16]
    e43a:	addw	r2, r3, #1075	; 0x433
    e43e:	ldr	r3, [sp, #84]	; 0x54
    e440:	bic.w	r3, r3, #1048576	; 0x100000
    e444:	orr.w	r3, r3, r2, lsl #20
    e448:	str	r3, [sp, #20]
    e44a:	lsls	r5, r4, #23
    e44c:	bpl.n	e454 <_strtod_l+0xb64>
    e44e:	orr.w	r3, r3, #2147483648	; 0x80000000
    e452:	str	r3, [sp, #20]
    e454:	ldr	r2, [pc, #352]	; (e5b8 <_strtod_l+0xcc8>)
    e456:	ands	r2, r3
    e458:	vldr	d8, [sp, #16]
    e45c:	cmp	r2, #0
    e45e:	bne.w	dc6a <_strtod_l+0x37a>
    e462:	bl	f0dc <__errno>
    e466:	movs	r3, #34	; 0x22
    e468:	str	r3, [r0, #0]
    e46a:	b.w	dc6a <_strtod_l+0x37a>
    e46e:	mov.w	r3, #4294967295
    e472:	mvn.w	r6, #2147483648	; 0x80000000
    e476:	strd	r3, r6, [sp, #16]
    e47a:	lsls	r3, r4, #23
    e47c:	bpl.w	e338 <_strtod_l+0xa48>
    e480:	ldr	r3, [sp, #20]
    e482:	b.n	e44e <_strtod_l+0xb5e>
    e484:	ldr	r3, [pc, #304]	; (e5b8 <_strtod_l+0xcc8>)
    e486:	str	r3, [sp, #20]
    e488:	b.n	e47a <_strtod_l+0xb8a>
    e48a:	ldr	r3, [sp, #80]	; 0x50
    e48c:	str	r3, [sp, #16]
    e48e:	ldr	r3, [sp, #84]	; 0x54
    e490:	str	r3, [sp, #20]
    e492:	b.n	e44a <_strtod_l+0xb5a>
    e494:	movs	r0, #0
    e496:	b.w	da5c <_strtod_l+0x16c>
    e49a:	ldr	r3, [sp, #68]	; 0x44
    e49c:	mov	r2, r3
    e49e:	adds	r3, #1
    e4a0:	str	r3, [sp, #68]	; 0x44
    e4a2:	ldrb	r4, [r2, #1]
    e4a4:	mov	r6, r0
    e4a6:	mov	r9, r0
    e4a8:	b.w	da46 <_strtod_l+0x156>
    e4ac:	ldr	r3, [pc, #268]	; (e5bc <_strtod_l+0xccc>)
    e4ae:	add.w	r3, r3, r2, lsl #3
    e4b2:	vldr	d8, [r3]
    e4b6:	vldr	d7, [sp, #16]
    e4ba:	vmul.f64	d8, d8, d7
    e4be:	b.w	dc6a <_strtod_l+0x37a>
    e4c2:	vmov.f64	d7, #224	; 0xbf000000 -0.5
    e4c6:	vmov.f64	d9, #96	; 0x3f000000  0.5
    e4ca:	b.n	def0 <_strtod_l+0x600>
    e4cc:	mov	lr, r5
    e4ce:	str	r0, [sp, #44]	; 0x2c
    e4d0:	b.w	da8c <_strtod_l+0x19c>
    e4d4:	ldr	r3, [pc, #228]	; (e5bc <_strtod_l+0xccc>)
    e4d6:	rsb	r5, r5, #15
    e4da:	subs	r2, r1, r5
    e4dc:	add.w	r5, r3, r5, lsl #3
    e4e0:	add.w	r3, r3, r2, lsl #3
    e4e4:	vldr	d8, [r5]
    e4e8:	vldr	d7, [r3]
    e4ec:	vldr	d6, [sp, #16]
    e4f0:	vmul.f64	d8, d8, d6
    e4f4:	vmul.f64	d8, d8, d7
    e4f8:	b.w	dc6a <_strtod_l+0x37a>
    e4fc:	cmp	r5, #0
    e4fe:	beq.w	e62c <_strtod_l+0xd3c>
    e502:	ldrd	fp, ip, [sp, #16]
    e506:	ldr	r3, [pc, #184]	; (e5c0 <_strtod_l+0xcd0>)
    e508:	ubfx	r1, ip, #0, #20
    e50c:	cmp	r1, r3
    e50e:	mov	r2, ip
    e510:	beq.w	e6b8 <_strtod_l+0xdc8>
    e514:	ldr	r3, [sp, #56]	; 0x38
    e516:	cmp	r3, #0
    e518:	beq.w	e666 <_strtod_l+0xd76>
    e51c:	ldrd	r1, r2, [sp, #16]
    e520:	tst	r3, r2
    e522:	mov	r7, r2
    e524:	beq.n	e55c <_strtod_l+0xc6c>
    e526:	vmov.f64	d0, d8
    e52a:	cmp	r5, #0
    e52c:	beq.w	e67c <_strtod_l+0xd8c>
    e530:	bl	10950 <__ulp>
    e534:	ldr	r3, [sp, #32]
    e536:	cbz	r3, e558 <_strtod_l+0xc68>
    e538:	ubfx	r3, r7, #20, #11
    e53c:	rsb	r3, r3, #107	; 0x6b
    e540:	cmp	r3, #0
    e542:	ble.n	e558 <_strtod_l+0xc68>
    e544:	lsls	r3, r3, #20
    e546:	add.w	r1, r3, #1069547520	; 0x3fc00000
    e54a:	movs	r0, #0
    e54c:	add.w	r1, r1, #3145728	; 0x300000
    e550:	vmov	d7, r0, r1
    e554:	vmul.f64	d0, d0, d7
    e558:	vadd.f64	d8, d8, d0
    e55c:	ldr	r3, [sp, #32]
    e55e:	cbz	r3, e578 <_strtod_l+0xc88>
    e560:	vldr	d7, [pc, #60]	; e5a0 <_strtod_l+0xcb0>
    e564:	ldr	r3, [pc, #80]	; (e5b8 <_strtod_l+0xcc8>)
    e566:	vmul.f64	d8, d8, d7
    e56a:	vmov	r2, s17
    e56e:	ands	r3, r2
    e570:	cbnz	r3, e578 <_strtod_l+0xc88>
    e572:	movs	r3, #34	; 0x22
    e574:	str.w	r3, [r8]
    e578:	ldr	r0, [sp, #72]	; 0x48
    e57a:	b.n	e0bc <_strtod_l+0x7cc>
    e57c:	add.w	r3, r2, #55574528	; 0x3500000
    e580:	str	r3, [sp, #20]
    e582:	movs	r3, #0
    e584:	str	r3, [sp, #32]
    e586:	b.w	dcec <_strtod_l+0x3fc>
    e58a:	nop
    e58c:	nop.w
	...
    e59c:	.word	0x7ff00000
    e5a0:	.word	0x00000000
    e5a4:	.word	0x39500000
    e5a8:	.word	0x200077ac
    e5ac:	.word	0x200009a8
    e5b0:	.word	0x200009ac
    e5b4:	.word	0x200009b0
    e5b8:	.word	0x7ff00000
    e5bc:	.word	0x20000328
    e5c0:	.word	0x000fffff
    e5c4:	ldrd	r1, r2, [sp, #16]
    e5c8:	orrs	r5, r1
    e5ca:	bne.n	e55c <_strtod_l+0xc6c>
    e5cc:	ubfx	r3, r2, #0, #20
    e5d0:	mov	r7, r2
    e5d2:	cmp	r3, #0
    e5d4:	bne.n	e55c <_strtod_l+0xc6c>
    e5d6:	bic.w	r3, r2, #2147483648	; 0x80000000
    e5da:	lsrs	r3, r3, #20
    e5dc:	lsls	r3, r3, #20
    e5de:	cmp.w	r3, #112197632	; 0x6b00000
    e5e2:	bls.n	e55c <_strtod_l+0xc6c>
    e5e4:	ldr.w	r3, [sl, #20]
    e5e8:	cbnz	r3, e5f2 <_strtod_l+0xd02>
    e5ea:	ldr.w	r3, [sl, #16]
    e5ee:	cmp	r3, #1
    e5f0:	ble.n	e55c <_strtod_l+0xc6c>
    e5f2:	mov	r1, sl
    e5f4:	movs	r2, #1
    e5f6:	mov	r0, r8
    e5f8:	bl	106c8 <__lshift>
    e5fc:	mov	r1, r4
    e5fe:	mov	sl, r0
    e600:	bl	107b8 <__mcmp>
    e604:	cmp	r0, #0
    e606:	ble.n	e55c <_strtod_l+0xc6c>
    e608:	ldr	r3, [sp, #32]
    e60a:	cmp	r3, #0
    e60c:	bne.n	e70c <_strtod_l+0xe1c>
    e60e:	ldr	r3, [pc, #320]	; (e750 <_strtod_l+0xe60>)
    e610:	ands	r3, r7
    e612:	sub.w	r3, r3, #1048576	; 0x100000
    e616:	mvn.w	r3, r3, lsr #20
    e61a:	mvn.w	r3, r3, lsl #20
    e61e:	str	r3, [sp, #20]
    e620:	mov.w	r3, #4294967295
    e624:	str	r3, [sp, #16]
    e626:	vldr	d8, [sp, #16]
    e62a:	b.n	e55c <_strtod_l+0xc6c>
    e62c:	ldrd	r1, r2, [sp, #16]
    e630:	ubfx	r3, r2, #0, #20
    e634:	orrs	r3, r1
    e636:	mov	r7, r2
    e638:	bne.w	e514 <_strtod_l+0xc24>
    e63c:	b.n	e608 <_strtod_l+0xd18>
    e63e:	ldr	r1, [pc, #276]	; (e754 <_strtod_l+0xe64>)
    e640:	add	r0, sp, #68	; 0x44
    e642:	add	r2, sp, #80	; 0x50
    e644:	bl	10020 <__hexnan>
    e648:	cmp	r0, #5
    e64a:	bne.w	dc5a <_strtod_l+0x36a>
    e64e:	ldr	r3, [sp, #84]	; 0x54
    e650:	orr.w	r3, r3, #2139095040	; 0x7f800000
    e654:	orr.w	r3, r3, #7340032	; 0x700000
    e658:	str	r3, [sp, #20]
    e65a:	ldr	r3, [sp, #80]	; 0x50
    e65c:	str	r3, [sp, #16]
    e65e:	vldr	d8, [sp, #16]
    e662:	b.w	dc6a <_strtod_l+0x37a>
    e666:	ldrd	r0, r1, [sp, #16]
    e66a:	ldr	r3, [sp, #52]	; 0x34
    e66c:	tst	r3, r0
    e66e:	beq.w	e55c <_strtod_l+0xc6c>
    e672:	mov	r7, r1
    e674:	b.n	e526 <_strtod_l+0xc36>
    e676:	ldr	r4, [pc, #224]	; (e758 <_strtod_l+0xe68>)
    e678:	movs	r1, #0
    e67a:	b.n	e19c <_strtod_l+0x8ac>
    e67c:	bl	10950 <__ulp>
    e680:	ldr	r3, [sp, #32]
    e682:	cmp	r3, #0
    e684:	beq.n	e732 <_strtod_l+0xe42>
    e686:	ubfx	r3, r7, #20, #11
    e68a:	rsb	r3, r3, #107	; 0x6b
    e68e:	cmp	r3, #0
    e690:	ble.n	e6a6 <_strtod_l+0xdb6>
    e692:	lsls	r3, r3, #20
    e694:	add.w	r1, r3, #1069547520	; 0x3fc00000
    e698:	add.w	r1, r1, #3145728	; 0x300000
    e69c:	mov	r0, r5
    e69e:	vmov	d7, r0, r1
    e6a2:	vmul.f64	d0, d0, d7
    e6a6:	vsub.f64	d8, d8, d0
    e6aa:	vcmp.f64	d8, #0.0
    e6ae:	vmrs	APSR_nzcv, fpscr
    e6b2:	bne.w	e560 <_strtod_l+0xc70>
    e6b6:	b.n	e3bc <_strtod_l+0xacc>
    e6b8:	ldr	r3, [sp, #32]
    e6ba:	ldr	r1, [sp, #16]
    e6bc:	cbz	r3, e706 <_strtod_l+0xe16>
    e6be:	ldr	r3, [pc, #144]	; (e750 <_strtod_l+0xe60>)
    e6c0:	ands	r3, r2
    e6c2:	cmp.w	r3, #111149056	; 0x6a00000
    e6c6:	bhi.n	e706 <_strtod_l+0xe16>
    e6c8:	lsrs	r3, r3, #20
    e6ca:	rsb	r3, r3, #107	; 0x6b
    e6ce:	mov.w	r0, #4294967295
    e6d2:	lsl.w	r3, r0, r3
    e6d6:	cmp	r1, r3
    e6d8:	bne.w	e514 <_strtod_l+0xc24>
    e6dc:	ldr	r3, [pc, #124]	; (e75c <_strtod_l+0xe6c>)
    e6de:	cmp	r2, r3
    e6e0:	beq.n	e744 <_strtod_l+0xe54>
    e6e2:	ldr	r3, [pc, #108]	; (e750 <_strtod_l+0xe60>)
    e6e4:	ands	r3, r2
    e6e6:	add.w	r3, r3, #1048576	; 0x100000
    e6ea:	str	r3, [sp, #20]
    e6ec:	movs	r3, #0
    e6ee:	str	r3, [sp, #16]
    e6f0:	vldr	d8, [sp, #16]
    e6f4:	b.n	e55c <_strtod_l+0xc6c>
    e6f6:	mov.w	r2, #4294967295
    e6fa:	lsl.w	r3, r2, r3
    e6fe:	ldr	r2, [sp, #16]
    e700:	ands	r2, r3
    e702:	str	r2, [sp, #16]
    e704:	b.n	e2a8 <_strtod_l+0x9b8>
    e706:	mov.w	r3, #4294967295
    e70a:	b.n	e6d6 <_strtod_l+0xde6>
    e70c:	ldr	r3, [pc, #64]	; (e750 <_strtod_l+0xe60>)
    e70e:	ands	r3, r7
    e710:	cmp.w	r3, #112197632	; 0x6b00000
    e714:	bgt.w	e612 <_strtod_l+0xd22>
    e718:	cmp.w	r3, #57671680	; 0x3700000
    e71c:	bgt.w	e560 <_strtod_l+0xc70>
    e720:	b.n	e3bc <_strtod_l+0xacc>
    e722:	rsb	r2, r2, #75	; 0x4b
    e726:	mov.w	r3, #4294967295
    e72a:	lsls	r3, r2
    e72c:	ands	r3, r1
    e72e:	str	r3, [sp, #20]
    e730:	b.n	e2a8 <_strtod_l+0x9b8>
    e732:	vsub.f64	d8, d8, d0
    e736:	vcmp.f64	d8, #0.0
    e73a:	vmrs	APSR_nzcv, fpscr
    e73e:	bne.w	e578 <_strtod_l+0xc88>
    e742:	b.n	e3bc <_strtod_l+0xacc>
    e744:	adds	r1, #1
    e746:	bne.n	e6e2 <_strtod_l+0xdf2>
    e748:	b.n	df5e <_strtod_l+0x66e>
    e74a:	movs	r3, #0
    e74c:	b.n	e44a <_strtod_l+0xb5a>
    e74e:	nop
    e750:	.word	0x7ff00000
    e754:	.word	0x200077c0
    e758:	.word	0x20000300
    e75c:	.word	0x7fefffff

0000e760 <_strtod_r>:
    e760:	ldr	r3, [pc, #4]	; (e768 <_strtod_r+0x8>)
    e762:	b.w	d8f0 <_strtod_l>
    e766:	nop
    e768:	.word	0x20008e44

0000e76c <_strtol_l.constprop.0>:
    e76c:	cmp	r3, #1
    e76e:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e772:	beq.n	e7f6 <_strtol_l.constprop.0+0x8a>
    e774:	cmp	r3, #36	; 0x24
    e776:	mov	r8, r3
    e778:	bhi.n	e7f6 <_strtol_l.constprop.0+0x8a>
    e77a:	ldr	r5, [pc, #304]	; (e8ac <_strtol_l.constprop.0+0x140>)
    e77c:	mov	lr, r1
    e77e:	mov	r6, lr
    e780:	ldrb.w	fp, [lr], #1
    e784:	ldrb.w	r4, [r5, fp]
    e788:	ands.w	r4, r4, #8
    e78c:	bne.n	e77e <_strtol_l.constprop.0+0x12>
    e78e:	cmp.w	fp, #45	; 0x2d
    e792:	beq.n	e87a <_strtol_l.constprop.0+0x10e>
    e794:	cmp.w	fp, #43	; 0x2b
    e798:	it	eq
    e79a:	ldrbeq.w	fp, [lr]
    e79e:	mvn.w	r9, #2147483648	; 0x80000000
    e7a2:	it	eq
    e7a4:	addeq.w	lr, r6, #2
    e7a8:	cmp	r3, #0
    e7aa:	beq.n	e832 <_strtol_l.constprop.0+0xc6>
    e7ac:	cmp	r3, #16
    e7ae:	beq.n	e860 <_strtol_l.constprop.0+0xf4>
    e7b0:	udiv	r7, r9, r8
    e7b4:	movs	r5, #0
    e7b6:	mov	r6, r5
    e7b8:	mls	sl, r8, r7, r9
    e7bc:	b.n	e7ca <_strtol_l.constprop.0+0x5e>
    e7be:	beq.n	e828 <_strtol_l.constprop.0+0xbc>
    e7c0:	mla	r6, r8, r6, ip
    e7c4:	movs	r5, #1
    e7c6:	ldrb.w	fp, [lr], #1
    e7ca:	sub.w	ip, fp, #48	; 0x30
    e7ce:	cmp.w	ip, #9
    e7d2:	bls.n	e7e2 <_strtol_l.constprop.0+0x76>
    e7d4:	sub.w	ip, fp, #65	; 0x41
    e7d8:	cmp.w	ip, #25
    e7dc:	bhi.n	e804 <_strtol_l.constprop.0+0x98>
    e7de:	sub.w	ip, fp, #55	; 0x37
    e7e2:	cmp	r3, ip
    e7e4:	ble.n	e816 <_strtol_l.constprop.0+0xaa>
    e7e6:	cmp.w	r5, #4294967295
    e7ea:	beq.n	e7c6 <_strtol_l.constprop.0+0x5a>
    e7ec:	cmp	r7, r6
    e7ee:	bcs.n	e7be <_strtol_l.constprop.0+0x52>
    e7f0:	mov.w	r5, #4294967295
    e7f4:	b.n	e7c6 <_strtol_l.constprop.0+0x5a>
    e7f6:	bl	f0dc <__errno>
    e7fa:	movs	r3, #22
    e7fc:	str	r3, [r0, #0]
    e7fe:	movs	r0, #0
    e800:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e804:	sub.w	ip, fp, #97	; 0x61
    e808:	cmp.w	ip, #25
    e80c:	bhi.n	e816 <_strtol_l.constprop.0+0xaa>
    e80e:	sub.w	ip, fp, #87	; 0x57
    e812:	cmp	r3, ip
    e814:	bgt.n	e7e6 <_strtol_l.constprop.0+0x7a>
    e816:	adds	r3, r5, #1
    e818:	beq.n	e86a <_strtol_l.constprop.0+0xfe>
    e81a:	cbnz	r4, e840 <_strtol_l.constprop.0+0xd4>
    e81c:	cbz	r2, e822 <_strtol_l.constprop.0+0xb6>
    e81e:	cbnz	r5, e88a <_strtol_l.constprop.0+0x11e>
    e820:	str	r1, [r2, #0]
    e822:	mov	r0, r6
    e824:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e828:	cmp	sl, ip
    e82a:	bge.n	e7c0 <_strtol_l.constprop.0+0x54>
    e82c:	mov.w	r5, #4294967295
    e830:	b.n	e7c6 <_strtol_l.constprop.0+0x5a>
    e832:	cmp.w	fp, #48	; 0x30
    e836:	beq.n	e844 <_strtol_l.constprop.0+0xd8>
    e838:	mov.w	r8, #10
    e83c:	mov	r3, r8
    e83e:	b.n	e7b0 <_strtol_l.constprop.0+0x44>
    e840:	negs	r6, r6
    e842:	b.n	e81c <_strtol_l.constprop.0+0xb0>
    e844:	ldrb.w	r3, [lr]
    e848:	and.w	r3, r3, #223	; 0xdf
    e84c:	cmp	r3, #88	; 0x58
    e84e:	bne.n	e894 <_strtol_l.constprop.0+0x128>
    e850:	mov.w	r8, #16
    e854:	ldrb.w	fp, [lr, #1]
    e858:	mov	r3, r8
    e85a:	add.w	lr, lr, #2
    e85e:	b.n	e7b0 <_strtol_l.constprop.0+0x44>
    e860:	cmp.w	fp, #48	; 0x30
    e864:	beq.n	e89c <_strtol_l.constprop.0+0x130>
    e866:	mov	r8, r3
    e868:	b.n	e7b0 <_strtol_l.constprop.0+0x44>
    e86a:	movs	r3, #34	; 0x22
    e86c:	str	r3, [r0, #0]
    e86e:	cbz	r2, e88e <_strtol_l.constprop.0+0x122>
    e870:	add.w	r1, lr, #4294967295
    e874:	mov	r6, r9
    e876:	str	r1, [r2, #0]
    e878:	b.n	e822 <_strtol_l.constprop.0+0xb6>
    e87a:	ldrb.w	fp, [lr]
    e87e:	mov.w	r9, #2147483648	; 0x80000000
    e882:	add.w	lr, r6, #2
    e886:	movs	r4, #1
    e888:	b.n	e7a8 <_strtol_l.constprop.0+0x3c>
    e88a:	mov	r9, r6
    e88c:	b.n	e870 <_strtol_l.constprop.0+0x104>
    e88e:	mov	r6, r9
    e890:	mov	r0, r6
    e892:	b.n	e824 <_strtol_l.constprop.0+0xb8>
    e894:	mov.w	r8, #8
    e898:	mov	r3, r8
    e89a:	b.n	e7b0 <_strtol_l.constprop.0+0x44>
    e89c:	ldrb.w	r5, [lr]
    e8a0:	and.w	r5, r5, #223	; 0xdf
    e8a4:	cmp	r5, #88	; 0x58
    e8a6:	beq.n	e850 <_strtol_l.constprop.0+0xe4>
    e8a8:	mov	r8, r3
    e8aa:	b.n	e7b0 <_strtol_l.constprop.0+0x44>
    e8ac:	.word	0x20000825

0000e8b0 <_strtol_r>:
    e8b0:	b.w	e76c <_strtol_l.constprop.0>

0000e8b4 <__cxa_atexit>:
    e8b4:	mov	r3, r2
    e8b6:	mov	r2, r1
    e8b8:	mov	r1, r0
    e8ba:	movs	r0, #2
    e8bc:	b.w	f67c <__register_exitproc>

0000e8c0 <fcvtf>:
    e8c0:	vcvt.f64.f32	d0, s0
    e8c4:	movs	r3, #0
    e8c6:	b.w	10c8c <fcvtbuf>
    e8ca:	nop

0000e8cc <stdio_exit_handler>:
    e8cc:	ldr	r2, [pc, #8]	; (e8d8 <stdio_exit_handler+0xc>)
    e8ce:	ldr	r1, [pc, #12]	; (e8dc <stdio_exit_handler+0x10>)
    e8d0:	ldr	r0, [pc, #12]	; (e8e0 <stdio_exit_handler+0x14>)
    e8d2:	b.w	ea4c <_fwalk_sglue>
    e8d6:	nop
    e8d8:	.word	0x200093c0
    e8dc:	.word	0x000140c5
    e8e0:	.word	0x20008938

0000e8e4 <cleanup_stdio>:
    e8e4:	ldr	r3, [pc, #48]	; (e918 <cleanup_stdio+0x34>)
    e8e6:	ldr	r1, [r0, #4]
    e8e8:	cmp	r1, r3
    e8ea:	push	{r4, lr}
    e8ec:	mov	r4, r0
    e8ee:	beq.n	e8f4 <cleanup_stdio+0x10>
    e8f0:	bl	140c4 <_fclose_r>
    e8f4:	ldr	r1, [r4, #8]
    e8f6:	ldr	r3, [pc, #36]	; (e91c <cleanup_stdio+0x38>)
    e8f8:	cmp	r1, r3
    e8fa:	beq.n	e902 <cleanup_stdio+0x1e>
    e8fc:	mov	r0, r4
    e8fe:	bl	140c4 <_fclose_r>
    e902:	ldr	r1, [r4, #12]
    e904:	ldr	r3, [pc, #24]	; (e920 <cleanup_stdio+0x3c>)
    e906:	cmp	r1, r3
    e908:	beq.n	e914 <cleanup_stdio+0x30>
    e90a:	mov	r0, r4
    e90c:	ldmia.w	sp!, {r4, lr}
    e910:	b.w	140c4 <_fclose_r>
    e914:	pop	{r4, pc}
    e916:	nop
    e918:	.word	0x2000fe28
    e91c:	.word	0x2000fe90
    e920:	.word	0x2000fef8

0000e924 <global_stdio_init.part.0>:
    e924:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e928:	ldr	r4, [pc, #168]	; (e9d4 <global_stdio_init.part.0+0xb0>)
    e92a:	ldr	r3, [pc, #172]	; (e9d8 <global_stdio_init.part.0+0xb4>)
    e92c:	ldr	r0, [pc, #172]	; (e9dc <global_stdio_init.part.0+0xb8>)
    e92e:	ldr.w	r9, [pc, #192]	; e9f0 <global_stdio_init.part.0+0xcc>
    e932:	ldr.w	r8, [pc, #192]	; e9f4 <global_stdio_init.part.0+0xd0>
    e936:	ldr	r7, [pc, #168]	; (e9e0 <global_stdio_init.part.0+0xbc>)
    e938:	str	r0, [r3, #0]
    e93a:	movs	r5, #0
    e93c:	movs	r3, #4
    e93e:	movs	r2, #8
    e940:	mov	r1, r5
    e942:	add.w	r0, r4, #92	; 0x5c
    e946:	ldr	r6, [pc, #156]	; (e9e4 <global_stdio_init.part.0+0xc0>)
    e948:	str	r5, [r4, #100]	; 0x64
    e94a:	strd	r5, r3, [r4, #8]
    e94e:	strd	r5, r5, [r4]
    e952:	strd	r5, r5, [r4, #16]
    e956:	str	r5, [r4, #24]
    e958:	bl	a528 <memset>
    e95c:	ldr	r3, [pc, #136]	; (e9e8 <global_stdio_init.part.0+0xc4>)
    e95e:	str	r3, [r4, #116]	; 0x74
    e960:	movs	r2, #8
    e962:	mov	r1, r5
    e964:	add.w	r0, r4, #196	; 0xc4
    e968:	strd	r4, r9, [r4, #28]
    e96c:	strd	r8, r7, [r4, #36]	; 0x24
    e970:	strd	r5, r5, [r4, #104]	; 0x68
    e974:	strd	r5, r5, [r4, #120]	; 0x78
    e978:	str.w	r5, [r4, #204]	; 0xcc
    e97c:	str	r5, [r4, #112]	; 0x70
    e97e:	str.w	r5, [r4, #128]	; 0x80
    e982:	str	r6, [r4, #44]	; 0x2c
    e984:	bl	a528 <memset>
    e988:	ldr	r3, [pc, #96]	; (e9ec <global_stdio_init.part.0+0xc8>)
    e98a:	str.w	r3, [r4, #220]	; 0xdc
    e98e:	mov	r1, r5
    e990:	add.w	r3, r4, #104	; 0x68
    e994:	movs	r2, #8
    e996:	add.w	r0, r4, #300	; 0x12c
    e99a:	str.w	r3, [r4, #132]	; 0x84
    e99e:	strd	r9, r8, [r4, #136]	; 0x88
    e9a2:	strd	r7, r6, [r4, #144]	; 0x90
    e9a6:	strd	r5, r5, [r4, #208]	; 0xd0
    e9aa:	strd	r5, r5, [r4, #224]	; 0xe0
    e9ae:	str.w	r5, [r4, #308]	; 0x134
    e9b2:	str.w	r5, [r4, #216]	; 0xd8
    e9b6:	str.w	r5, [r4, #232]	; 0xe8
    e9ba:	bl	a528 <memset>
    e9be:	add.w	r3, r4, #208	; 0xd0
    e9c2:	strd	r9, r8, [r4, #240]	; 0xf0
    e9c6:	strd	r7, r6, [r4, #248]	; 0xf8
    e9ca:	str.w	r3, [r4, #236]	; 0xec
    e9ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e9d2:	nop
    e9d4:	.word	0x2000fe28
    e9d8:	.word	0x2000ff60
    e9dc:	.word	0x0000e8cd
    e9e0:	.word	0x0000ec1d
    e9e4:	.word	0x0000ec3d
    e9e8:	.word	0x00010009
    e9ec:	.word	0x00020012
    e9f0:	.word	0x0000ebb5
    e9f4:	.word	0x0000ebdd

0000e9f8 <__sinit>:
    e9f8:	push	{r4, lr}
    e9fa:	mov	r4, r0
    e9fc:	ldr	r0, [pc, #40]	; (ea28 <__sinit+0x30>)
    e9fe:	bl	f138 <__retarget_lock_acquire_recursive>
    ea02:	ldr	r3, [r4, #52]	; 0x34
    ea04:	cbnz	r3, ea10 <__sinit+0x18>
    ea06:	ldr	r3, [pc, #36]	; (ea2c <__sinit+0x34>)
    ea08:	ldr	r2, [pc, #36]	; (ea30 <__sinit+0x38>)
    ea0a:	ldr	r3, [r3, #0]
    ea0c:	str	r2, [r4, #52]	; 0x34
    ea0e:	cbz	r3, ea1a <__sinit+0x22>
    ea10:	ldmia.w	sp!, {r4, lr}
    ea14:	ldr	r0, [pc, #16]	; (ea28 <__sinit+0x30>)
    ea16:	b.w	f13c <__retarget_lock_release_recursive>
    ea1a:	bl	e924 <global_stdio_init.part.0>
    ea1e:	ldmia.w	sp!, {r4, lr}
    ea22:	ldr	r0, [pc, #4]	; (ea28 <__sinit+0x30>)
    ea24:	b.w	f13c <__retarget_lock_release_recursive>
    ea28:	.word	0x2000fdf0
    ea2c:	.word	0x2000ff60
    ea30:	.word	0x0000e8e5

0000ea34 <__sfp_lock_acquire>:
    ea34:	ldr	r0, [pc, #4]	; (ea3c <__sfp_lock_acquire+0x8>)
    ea36:	b.w	f138 <__retarget_lock_acquire_recursive>
    ea3a:	nop
    ea3c:	.word	0x2000fdf0

0000ea40 <__sfp_lock_release>:
    ea40:	ldr	r0, [pc, #4]	; (ea48 <__sfp_lock_release+0x8>)
    ea42:	b.w	f13c <__retarget_lock_release_recursive>
    ea46:	nop
    ea48:	.word	0x2000fdf0

0000ea4c <_fwalk_sglue>:
    ea4c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ea50:	mov	r8, r0
    ea52:	mov	r7, r1
    ea54:	mov	r6, r2
    ea56:	mov.w	r9, #0
    ea5a:	ldrd	r5, r4, [r6, #4]
    ea5e:	subs	r5, #1
    ea60:	bmi.n	ea86 <_fwalk_sglue+0x3a>
    ea62:	ldrh	r3, [r4, #12]
    ea64:	cmp	r3, #1
    ea66:	add.w	r5, r5, #4294967295
    ea6a:	bls.n	ea7e <_fwalk_sglue+0x32>
    ea6c:	ldrsh.w	r3, [r4, #14]
    ea70:	adds	r3, #1
    ea72:	mov	r1, r4
    ea74:	beq.n	ea7e <_fwalk_sglue+0x32>
    ea76:	mov	r0, r8
    ea78:	blx	r7
    ea7a:	orr.w	r9, r9, r0
    ea7e:	adds	r3, r5, #1
    ea80:	add.w	r4, r4, #104	; 0x68
    ea84:	bne.n	ea62 <_fwalk_sglue+0x16>
    ea86:	ldr	r6, [r6, #0]
    ea88:	cmp	r6, #0
    ea8a:	bne.n	ea5a <_fwalk_sglue+0xe>
    ea8c:	mov	r0, r9
    ea8e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ea92:	nop

0000ea94 <snprintf>:
    ea94:	push	{r2, r3}
    ea96:	push	{r4, lr}
    ea98:	ldr	r3, [pc, #124]	; (eb18 <snprintf+0x84>)
    ea9a:	cmp	r1, #0
    ea9c:	ldr	r4, [r3, #0]
    ea9e:	sub	sp, #112	; 0x70
    eaa0:	blt.n	eb0e <snprintf+0x7a>
    eaa2:	mov.w	r3, #520	; 0x208
    eaa6:	strh.w	r3, [sp, #20]
    eaaa:	str	r0, [sp, #8]
    eaac:	str	r0, [sp, #24]
    eaae:	add	r3, sp, #124	; 0x7c
    eab0:	beq.n	eae4 <snprintf+0x50>
    eab2:	subs	r1, #1
    eab4:	movw	r2, #65535	; 0xffff
    eab8:	str	r1, [sp, #16]
    eaba:	str	r1, [sp, #28]
    eabc:	strh.w	r2, [sp, #22]
    eac0:	add	r1, sp, #8
    eac2:	ldr	r2, [sp, #120]	; 0x78
    eac4:	str	r3, [sp, #4]
    eac6:	mov	r0, r4
    eac8:	bl	10d30 <_svfprintf_r>
    eacc:	adds	r2, r0, #1
    eace:	bge.n	ead4 <snprintf+0x40>
    ead0:	movs	r3, #139	; 0x8b
    ead2:	str	r3, [r4, #0]
    ead4:	ldr	r3, [sp, #8]
    ead6:	movs	r2, #0
    ead8:	strb	r2, [r3, #0]
    eada:	add	sp, #112	; 0x70
    eadc:	ldmia.w	sp!, {r4, lr}
    eae0:	add	sp, #8
    eae2:	bx	lr
    eae4:	movw	r2, #65535	; 0xffff
    eae8:	str	r1, [sp, #16]
    eaea:	str	r1, [sp, #28]
    eaec:	strh.w	r2, [sp, #22]
    eaf0:	add	r1, sp, #8
    eaf2:	ldr	r2, [sp, #120]	; 0x78
    eaf4:	str	r3, [sp, #4]
    eaf6:	mov	r0, r4
    eaf8:	bl	10d30 <_svfprintf_r>
    eafc:	adds	r3, r0, #1
    eafe:	bge.n	eb04 <snprintf+0x70>
    eb00:	movs	r3, #139	; 0x8b
    eb02:	str	r3, [r4, #0]
    eb04:	add	sp, #112	; 0x70
    eb06:	ldmia.w	sp!, {r4, lr}
    eb0a:	add	sp, #8
    eb0c:	bx	lr
    eb0e:	movs	r3, #139	; 0x8b
    eb10:	str	r3, [r4, #0]
    eb12:	mov.w	r0, #4294967295
    eb16:	b.n	eb04 <snprintf+0x70>
    eb18:	.word	0x200093cc

0000eb1c <sprintf>:
    eb1c:	push	{r1, r2, r3}
    eb1e:	push	{r4, lr}
    eb20:	sub	sp, #116	; 0x74
    eb22:	mvn.w	r1, #2147483648	; 0x80000000
    eb26:	add	r3, sp, #124	; 0x7c
    eb28:	strd	r0, r1, [sp, #24]
    eb2c:	str	r1, [sp, #16]
    eb2e:	ldr	r1, [pc, #36]	; (eb54 <sprintf+0x38>)
    eb30:	ldr.w	r2, [r3], #4
    eb34:	str	r0, [sp, #8]
    eb36:	ldr	r4, [pc, #32]	; (eb58 <sprintf+0x3c>)
    eb38:	ldr	r0, [r1, #0]
    eb3a:	str	r3, [sp, #4]
    eb3c:	add	r1, sp, #8
    eb3e:	str	r4, [sp, #20]
    eb40:	bl	10d30 <_svfprintf_r>
    eb44:	ldr	r3, [sp, #8]
    eb46:	movs	r2, #0
    eb48:	strb	r2, [r3, #0]
    eb4a:	add	sp, #116	; 0x74
    eb4c:	ldmia.w	sp!, {r4, lr}
    eb50:	add	sp, #12
    eb52:	bx	lr
    eb54:	.word	0x200093cc
    eb58:	.word	0xffff0208

0000eb5c <sscanf>:
    eb5c:	push	{r1, r2, r3}
    eb5e:	push	{r4, lr}
    eb60:	sub	sp, #124	; 0x7c
    eb62:	add	r4, sp, #132	; 0x84
    eb64:	mov.w	r1, #516	; 0x204
    eb68:	ldr.w	r2, [r4], #4
    eb6c:	str	r2, [sp, #4]
    eb6e:	strh.w	r1, [sp, #28]
    eb72:	str	r0, [sp, #16]
    eb74:	str	r0, [sp, #32]
    eb76:	bl	f580 <strlen>
    eb7a:	str	r0, [sp, #20]
    eb7c:	str	r0, [sp, #36]	; 0x24
    eb7e:	ldr	r0, [pc, #44]	; (ebac <sscanf+0x50>)
    eb80:	ldr	r1, [pc, #44]	; (ebb0 <sscanf+0x54>)
    eb82:	str	r1, [sp, #48]	; 0x30
    eb84:	movs	r3, #0
    eb86:	movw	ip, #65535	; 0xffff
    eb8a:	str	r3, [sp, #64]	; 0x40
    eb8c:	str	r3, [sp, #84]	; 0x54
    eb8e:	ldr	r2, [sp, #4]
    eb90:	ldr	r0, [r0, #0]
    eb92:	strh.w	ip, [sp, #30]
    eb96:	mov	r3, r4
    eb98:	add	r1, sp, #16
    eb9a:	str	r4, [sp, #12]
    eb9c:	bl	12874 <__ssvfscanf_r>
    eba0:	add	sp, #124	; 0x7c
    eba2:	ldmia.w	sp!, {r4, lr}
    eba6:	add	sp, #12
    eba8:	bx	lr
    ebaa:	nop
    ebac:	.word	0x200093cc
    ebb0:	.word	0x0000ebd9

0000ebb4 <__sread>:
    ebb4:	push	{r4, lr}
    ebb6:	mov	r4, r1
    ebb8:	ldrsh.w	r1, [r1, #14]
    ebbc:	bl	f060 <_read_r>
    ebc0:	cmp	r0, #0
    ebc2:	blt.n	ebcc <__sread+0x18>
    ebc4:	ldr	r3, [r4, #80]	; 0x50
    ebc6:	add	r3, r0
    ebc8:	str	r3, [r4, #80]	; 0x50
    ebca:	pop	{r4, pc}
    ebcc:	ldrh	r3, [r4, #12]
    ebce:	bic.w	r3, r3, #4096	; 0x1000
    ebd2:	strh	r3, [r4, #12]
    ebd4:	pop	{r4, pc}
    ebd6:	nop

0000ebd8 <__seofread>:
    ebd8:	movs	r0, #0
    ebda:	bx	lr

0000ebdc <__swrite>:
    ebdc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ebe0:	mov	r4, r1
    ebe2:	ldrsh.w	r1, [r1, #12]
    ebe6:	mov	r7, r3
    ebe8:	lsls	r3, r1, #23
    ebea:	mov	r5, r0
    ebec:	mov	r6, r2
    ebee:	bmi.n	ec08 <__swrite+0x2c>
    ebf0:	bic.w	r1, r1, #4096	; 0x1000
    ebf4:	strh	r1, [r4, #12]
    ebf6:	mov	r3, r7
    ebf8:	ldrsh.w	r1, [r4, #14]
    ebfc:	mov	r2, r6
    ebfe:	mov	r0, r5
    ec00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ec04:	b.w	f0b0 <_write_r>
    ec08:	ldrsh.w	r1, [r4, #14]
    ec0c:	movs	r3, #2
    ec0e:	movs	r2, #0
    ec10:	bl	f034 <_lseek_r>
    ec14:	ldrsh.w	r1, [r4, #12]
    ec18:	b.n	ebf0 <__swrite+0x14>
    ec1a:	nop

0000ec1c <__sseek>:
    ec1c:	push	{r4, lr}
    ec1e:	mov	r4, r1
    ec20:	ldrsh.w	r1, [r1, #14]
    ec24:	bl	f034 <_lseek_r>
    ec28:	ldrh	r3, [r4, #12]
    ec2a:	adds	r2, r0, #1
    ec2c:	itee	eq
    ec2e:	biceq.w	r3, r3, #4096	; 0x1000
    ec32:	orrne.w	r3, r3, #4096	; 0x1000
    ec36:	strne	r0, [r4, #80]	; 0x50
    ec38:	strh	r3, [r4, #12]
    ec3a:	pop	{r4, pc}

0000ec3c <__sclose>:
    ec3c:	ldrsh.w	r1, [r1, #14]
    ec40:	b.w	f010 <_close_r>

0000ec44 <_vdprintf_r>:
    ec44:	push	{r4, r5, r6, r7, lr}
    ec46:	sub.w	sp, sp, #532	; 0x214
    ec4a:	add	r7, sp, #16
    ec4c:	str	r3, [sp, #0]
    ec4e:	mov	r3, r2
    ec50:	mov.w	r2, #512	; 0x200
    ec54:	mov	r6, r1
    ec56:	str	r2, [sp, #12]
    ec58:	mov	r1, r7
    ec5a:	add	r2, sp, #12
    ec5c:	mov	r5, r0
    ec5e:	bl	ecac <_vasnprintf_r>
    ec62:	cbz	r0, ec88 <_vdprintf_r+0x44>
    ec64:	mov	r4, r0
    ec66:	mov	r2, r0
    ec68:	ldr	r3, [sp, #12]
    ec6a:	mov	r1, r6
    ec6c:	mov	r0, r5
    ec6e:	bl	f0b0 <_write_r>
    ec72:	cmp	r4, r7
    ec74:	str	r0, [sp, #12]
    ec76:	beq.n	ec82 <_vdprintf_r+0x3e>
    ec78:	mov	r0, r5
    ec7a:	mov	r1, r4
    ec7c:	bl	f7a4 <_free_r>
    ec80:	ldr	r0, [sp, #12]
    ec82:	add.w	sp, sp, #532	; 0x214
    ec86:	pop	{r4, r5, r6, r7, pc}
    ec88:	mov.w	r0, #4294967295
    ec8c:	b.n	ec82 <_vdprintf_r+0x3e>
    ec8e:	nop

0000ec90 <vdprintf>:
    ec90:	push	{r4}
    ec92:	ldr	r4, [pc, #20]	; (eca8 <vdprintf+0x18>)
    ec94:	mov	ip, r0
    ec96:	mov	r3, r2
    ec98:	ldr	r0, [r4, #0]
    ec9a:	ldr.w	r4, [sp], #4
    ec9e:	mov	r2, r1
    eca0:	mov	r1, ip
    eca2:	b.w	ec44 <_vdprintf_r>
    eca6:	nop
    eca8:	.word	0x200093cc

0000ecac <_vasnprintf_r>:
    ecac:	push	{r4, r5, lr}
    ecae:	ldr	r4, [r2, #0]
    ecb0:	mov	r5, r2
    ecb2:	sub	sp, #108	; 0x6c
    ecb4:	mov	r2, r3
    ecb6:	cbz	r1, ecbc <_vasnprintf_r+0x10>
    ecb8:	cmp	r4, #0
    ecba:	bne.n	ecf0 <_vasnprintf_r+0x44>
    ecbc:	movs	r1, #0
    ecbe:	mov.w	r3, #648	; 0x288
    ecc2:	strh.w	r3, [sp, #12]
    ecc6:	str	r1, [sp, #0]
    ecc8:	str	r1, [sp, #16]
    ecca:	movw	r3, #65535	; 0xffff
    ecce:	str	r1, [sp, #8]
    ecd0:	str	r1, [sp, #20]
    ecd2:	strh.w	r3, [sp, #14]
    ecd6:	mov	r1, sp
    ecd8:	ldr	r3, [sp, #120]	; 0x78
    ecda:	bl	10d30 <_svfprintf_r>
    ecde:	cmp	r0, #0
    ece0:	blt.n	ed0a <_vasnprintf_r+0x5e>
    ece2:	ldr	r3, [sp, #0]
    ece4:	str	r0, [r5, #0]
    ece6:	movs	r2, #0
    ece8:	strb	r2, [r3, #0]
    ecea:	ldr	r0, [sp, #16]
    ecec:	add	sp, #108	; 0x6c
    ecee:	pop	{r4, r5, pc}
    ecf0:	mov.w	r3, #1544	; 0x608
    ecf4:	str	r1, [sp, #0]
    ecf6:	str	r1, [sp, #16]
    ecf8:	strh.w	r3, [sp, #12]
    ecfc:	mov	r1, r4
    ecfe:	bge.n	ecca <_vasnprintf_r+0x1e>
    ed00:	movs	r3, #139	; 0x8b
    ed02:	str	r3, [r0, #0]
    ed04:	movs	r0, #0
    ed06:	add	sp, #108	; 0x6c
    ed08:	pop	{r4, r5, pc}
    ed0a:	movs	r0, #0
    ed0c:	b.n	ecec <_vasnprintf_r+0x40>
    ed0e:	nop

0000ed10 <memcmp>:
    ed10:	cmp	r2, #3
    ed12:	push	{r4, r5, r6, lr}
    ed14:	bls.n	ed40 <memcmp+0x30>
    ed16:	orr.w	r3, r0, r1
    ed1a:	lsls	r3, r3, #30
    ed1c:	bne.n	ed64 <memcmp+0x54>
    ed1e:	mov	r4, r0
    ed20:	mov	r3, r1
    ed22:	mov	r1, r3
    ed24:	mov	r0, r4
    ed26:	ldr	r6, [r1, #0]
    ed28:	ldr	r5, [r0, #0]
    ed2a:	cmp	r5, r6
    ed2c:	add.w	r4, r4, #4
    ed30:	add.w	r3, r3, #4
    ed34:	bne.n	ed64 <memcmp+0x54>
    ed36:	subs	r2, #4
    ed38:	cmp	r2, #3
    ed3a:	mov	r0, r4
    ed3c:	mov	r1, r3
    ed3e:	bhi.n	ed22 <memcmp+0x12>
    ed40:	subs	r4, r2, #1
    ed42:	cbz	r2, ed6c <memcmp+0x5c>
    ed44:	subs	r2, r0, #1
    ed46:	subs	r1, #1
    ed48:	b.n	ed4e <memcmp+0x3e>
    ed4a:	adds	r3, r0, r3
    ed4c:	beq.n	ed68 <memcmp+0x58>
    ed4e:	ldrb.w	lr, [r2, #1]!
    ed52:	ldrb.w	ip, [r1, #1]!
    ed56:	cmp	lr, ip
    ed58:	sub.w	r3, r4, r2
    ed5c:	beq.n	ed4a <memcmp+0x3a>
    ed5e:	sub.w	r0, lr, ip
    ed62:	pop	{r4, r5, r6, pc}
    ed64:	subs	r4, r2, #1
    ed66:	b.n	ed44 <memcmp+0x34>
    ed68:	mov	r0, r3
    ed6a:	pop	{r4, r5, r6, pc}
    ed6c:	mov	r0, r2
    ed6e:	pop	{r4, r5, r6, pc}

0000ed70 <memmove>:
    ed70:	cmp	r0, r1
    ed72:	bls.n	ed90 <memmove+0x20>
    ed74:	adds	r3, r1, r2
    ed76:	cmp	r3, r0
    ed78:	bls.n	ed90 <memmove+0x20>
    ed7a:	add.w	ip, r0, r2
    ed7e:	cbz	r2, edb0 <memmove+0x40>
    ed80:	mov	r2, ip
    ed82:	ldrb.w	ip, [r3, #-1]!
    ed86:	strb.w	ip, [r2, #-1]!
    ed8a:	cmp	r1, r3
    ed8c:	bne.n	ed82 <memmove+0x12>
    ed8e:	bx	lr
    ed90:	cmp	r2, #15
    ed92:	bhi.n	edb2 <memmove+0x42>
    ed94:	mov	r3, r0
    ed96:	add.w	ip, r2, #4294967295
    ed9a:	cbz	r2, edb0 <memmove+0x40>
    ed9c:	add.w	ip, ip, #1
    eda0:	subs	r3, #1
    eda2:	add	ip, r1
    eda4:	ldrb.w	r2, [r1], #1
    eda8:	strb.w	r2, [r3, #1]!
    edac:	cmp	r1, ip
    edae:	bne.n	eda4 <memmove+0x34>
    edb0:	bx	lr
    edb2:	orr.w	r3, r0, r1
    edb6:	lsls	r3, r3, #30
    edb8:	bne.n	ee5c <memmove+0xec>
    edba:	sub.w	r3, r2, #16
    edbe:	push	{r4, r5, r6, lr}
    edc0:	add.w	ip, r1, #32
    edc4:	bic.w	r5, r3, #15
    edc8:	add.w	lr, r1, #16
    edcc:	add.w	r4, r0, #16
    edd0:	add	ip, r5
    edd2:	lsrs	r3, r3, #4
    edd4:	ldr.w	r5, [lr, #-16]
    edd8:	str.w	r5, [r4, #-16]
    eddc:	ldr.w	r5, [lr, #-12]
    ede0:	str.w	r5, [r4, #-12]
    ede4:	ldr.w	r5, [lr, #-8]
    ede8:	str.w	r5, [r4, #-8]
    edec:	ldr.w	r5, [lr, #-4]
    edf0:	str.w	r5, [r4, #-4]
    edf4:	add.w	lr, lr, #16
    edf8:	cmp	lr, ip
    edfa:	add.w	r4, r4, #16
    edfe:	bne.n	edd4 <memmove+0x64>
    ee00:	adds	r3, #1
    ee02:	tst.w	r2, #12
    ee06:	add.w	r1, r1, r3, lsl #4
    ee0a:	and.w	r4, r2, #15
    ee0e:	add.w	r3, r0, r3, lsl #4
    ee12:	beq.n	ee64 <memmove+0xf4>
    ee14:	subs	r4, #4
    ee16:	bic.w	r6, r4, #3
    ee1a:	mov.w	ip, r4, lsr #2
    ee1e:	add	r6, r3
    ee20:	subs	r4, r3, #4
    ee22:	mov	lr, r1
    ee24:	ldr.w	r5, [lr], #4
    ee28:	str.w	r5, [r4, #4]!
    ee2c:	cmp	r4, r6
    ee2e:	bne.n	ee24 <memmove+0xb4>
    ee30:	add.w	r4, ip, #1
    ee34:	and.w	r2, r2, #3
    ee38:	add.w	r3, r3, r4, lsl #2
    ee3c:	add.w	r1, r1, r4, lsl #2
    ee40:	add.w	ip, r2, #4294967295
    ee44:	cbz	r2, ee5a <memmove+0xea>
    ee46:	add.w	ip, ip, #1
    ee4a:	subs	r3, #1
    ee4c:	add	ip, r1
    ee4e:	ldrb.w	r2, [r1], #1
    ee52:	strb.w	r2, [r3, #1]!
    ee56:	cmp	r1, ip
    ee58:	bne.n	ee4e <memmove+0xde>
    ee5a:	pop	{r4, r5, r6, pc}
    ee5c:	add.w	ip, r2, #4294967295
    ee60:	mov	r3, r0
    ee62:	b.n	ed9c <memmove+0x2c>
    ee64:	mov	r2, r4
    ee66:	b.n	ee40 <memmove+0xd0>

0000ee68 <strlcat>:
    ee68:	push	{r4, r5, r6, lr}
    ee6a:	cbz	r2, eec0 <strlcat+0x58>
    ee6c:	mov	r3, r0
    ee6e:	adds	r5, r2, r0
    ee70:	b.n	ee78 <strlcat+0x10>
    ee72:	cmp	r5, r3
    ee74:	mov	ip, r3
    ee76:	beq.n	ee84 <strlcat+0x1c>
    ee78:	mov	ip, r3
    ee7a:	adds	r3, #1
    ee7c:	ldrb.w	r4, [ip]
    ee80:	cmp	r4, #0
    ee82:	bne.n	ee72 <strlcat+0xa>
    ee84:	sub.w	r6, ip, r0
    ee88:	subs	r2, r2, r6
    ee8a:	subs	r5, r2, #1
    ee8c:	cbz	r2, eec2 <strlcat+0x5a>
    ee8e:	ldrb	r4, [r1, #0]
    ee90:	mov	r3, r1
    ee92:	cbnz	r4, eea4 <strlcat+0x3c>
    ee94:	b.n	eeb6 <strlcat+0x4e>
    ee96:	strb.w	r4, [r2], #1
    ee9a:	subs	r5, #1
    ee9c:	mov	ip, r2
    ee9e:	ldrb	r4, [r3, #1]
    eea0:	adds	r3, #1
    eea2:	cbz	r4, eeb2 <strlcat+0x4a>
    eea4:	mov	r2, ip
    eea6:	cmp	r5, #0
    eea8:	bne.n	ee96 <strlcat+0x2e>
    eeaa:	ldrb	r2, [r3, #1]
    eeac:	adds	r3, #1
    eeae:	cmp	r2, #0
    eeb0:	bne.n	ee9e <strlcat+0x36>
    eeb2:	subs	r3, r3, r1
    eeb4:	add	r6, r3
    eeb6:	movs	r3, #0
    eeb8:	strb.w	r3, [ip]
    eebc:	mov	r0, r6
    eebe:	pop	{r4, r5, r6, pc}
    eec0:	mov	r6, r2
    eec2:	mov	r0, r1
    eec4:	bl	f580 <strlen>
    eec8:	add	r6, r0
    eeca:	mov	r0, r6
    eecc:	pop	{r4, r5, r6, pc}
    eece:	nop

0000eed0 <strlcpy>:
    eed0:	cbz	r2, ef04 <strlcpy+0x34>
    eed2:	add.w	ip, r0, r2
    eed6:	push	{lr}
    eed8:	mov	r3, r1
    eeda:	add.w	lr, ip, #4294967295
    eede:	b.n	eeea <strlcpy+0x1a>
    eee0:	ldrb.w	r2, [r3], #1
    eee4:	strb.w	r2, [r0], #1
    eee8:	cbz	r2, eefc <strlcpy+0x2c>
    eeea:	cmp	lr, r0
    eeec:	bne.n	eee0 <strlcpy+0x10>
    eeee:	movs	r2, #0
    eef0:	strb.w	r2, [ip, #-1]
    eef4:	ldrb.w	r2, [r3], #1
    eef8:	cmp	r2, #0
    eefa:	bne.n	eef4 <strlcpy+0x24>
    eefc:	subs	r1, r3, r1
    eefe:	subs	r0, r1, #1
    ef00:	ldr.w	pc, [sp], #4
    ef04:	mov	r3, r1
    ef06:	ldrb.w	r2, [r3], #1
    ef0a:	cmp	r2, #0
    ef0c:	bne.n	ef06 <strlcpy+0x36>
    ef0e:	subs	r1, r3, r1
    ef10:	subs	r0, r1, #1
    ef12:	bx	lr

0000ef14 <strncmp>:
    ef14:	cmp	r2, #0
    ef16:	beq.n	ef96 <strncmp+0x82>
    ef18:	orr.w	r3, r0, r1
    ef1c:	lsls	r3, r3, #30
    ef1e:	push	{r4, r5, lr}
    ef20:	mov	ip, r0
    ef22:	bne.n	ef84 <strncmp+0x70>
    ef24:	cmp	r2, #3
    ef26:	bls.n	ef84 <strncmp+0x70>
    ef28:	mov	r3, r1
    ef2a:	b.n	ef3e <strncmp+0x2a>
    ef2c:	subs	r2, #4
    ef2e:	mov	ip, r0
    ef30:	mov	r1, r3
    ef32:	beq.n	ef80 <strncmp+0x6c>
    ef34:	tst.w	lr, #2155905152	; 0x80808080
    ef38:	bne.n	ef80 <strncmp+0x6c>
    ef3a:	cmp	r2, #3
    ef3c:	bls.n	ef84 <strncmp+0x70>
    ef3e:	ldr	r4, [r0, #0]
    ef40:	mov	r1, r3
    ef42:	ldr.w	r5, [r3], #4
    ef46:	sub.w	lr, r4, #16843009	; 0x1010101
    ef4a:	cmp	r4, r5
    ef4c:	mov	ip, r0
    ef4e:	bic.w	lr, lr, r4
    ef52:	add.w	r0, r0, #4
    ef56:	beq.n	ef2c <strncmp+0x18>
    ef58:	ldrb.w	r0, [ip]
    ef5c:	ldrb	r4, [r1, #0]
    ef5e:	cmp	r0, r4
    ef60:	bne.n	ef9a <strncmp+0x86>
    ef62:	mov	lr, ip
    ef64:	cbz	r0, ef82 <strncmp+0x6e>
    ef66:	ldrb.w	r0, [lr, #1]!
    ef6a:	ldrb.w	r4, [r1, #1]!
    ef6e:	sub.w	r3, r2, lr
    ef72:	cmp	r0, r4
    ef74:	add.w	r3, r3, #4294967295
    ef78:	bne.n	ef9a <strncmp+0x86>
    ef7a:	adds.w	r3, ip, r3
    ef7e:	bne.n	ef64 <strncmp+0x50>
    ef80:	movs	r0, #0
    ef82:	pop	{r4, r5, pc}
    ef84:	ldrb.w	r0, [ip]
    ef88:	ldrb	r4, [r1, #0]
    ef8a:	cmp	r4, r0
    ef8c:	bne.n	ef9a <strncmp+0x86>
    ef8e:	cmp	r2, #1
    ef90:	beq.n	ef80 <strncmp+0x6c>
    ef92:	mov	lr, ip
    ef94:	b.n	ef64 <strncmp+0x50>
    ef96:	mov	r0, r2
    ef98:	bx	lr
    ef9a:	subs	r0, r0, r4
    ef9c:	pop	{r4, r5, pc}
    ef9e:	nop

0000efa0 <strncpy>:
    efa0:	orr.w	r3, r0, r1
    efa4:	lsls	r3, r3, #30
    efa6:	push	{r4, r5, lr}
    efa8:	bne.n	efae <strncpy+0xe>
    efaa:	cmp	r2, #3
    efac:	bhi.n	efce <strncpy+0x2e>
    efae:	mov	ip, r0
    efb0:	add.w	lr, r1, #4294967295
    efb4:	b.n	efc6 <strncpy+0x26>
    efb6:	ldrb.w	r1, [lr, #1]!
    efba:	strb.w	r1, [r3], #1
    efbe:	subs	r4, r2, #1
    efc0:	cbz	r1, eff4 <strncpy+0x54>
    efc2:	mov	ip, r3
    efc4:	mov	r2, r4
    efc6:	mov	r3, ip
    efc8:	cmp	r2, #0
    efca:	bne.n	efb6 <strncpy+0x16>
    efcc:	pop	{r4, r5, pc}
    efce:	mov	r3, r1
    efd0:	mov	ip, r0
    efd2:	mov	r1, r3
    efd4:	ldr.w	r5, [r3], #4
    efd8:	sub.w	r4, r5, #16843009	; 0x1010101
    efdc:	bic.w	r4, r4, r5
    efe0:	tst.w	r4, #2155905152	; 0x80808080
    efe4:	bne.n	efb0 <strncpy+0x10>
    efe6:	subs	r2, #4
    efe8:	cmp	r2, #3
    efea:	str.w	r5, [ip], #4
    efee:	mov	r1, r3
    eff0:	bhi.n	efd2 <strncpy+0x32>
    eff2:	b.n	efb0 <strncpy+0x10>
    eff4:	add	ip, r2
    eff6:	cmp	r4, #0
    eff8:	beq.n	efcc <strncpy+0x2c>
    effa:	strb.w	r1, [r3], #1
    effe:	cmp	r3, ip
    f000:	bne.n	effa <strncpy+0x5a>
    f002:	pop	{r4, r5, pc}

0000f004 <__locale_mb_cur_max>:
    f004:	ldr	r3, [pc, #4]	; (f00c <__locale_mb_cur_max+0x8>)
    f006:	ldrb.w	r0, [r3, #296]	; 0x128
    f00a:	bx	lr
    f00c:	.word	0x20008e44

0000f010 <_close_r>:
    f010:	push	{r3, r4, r5, lr}
    f012:	ldr	r5, [pc, #28]	; (f030 <_close_r+0x20>)
    f014:	movs	r2, #0
    f016:	mov	r4, r0
    f018:	mov	r0, r1
    f01a:	str	r2, [r5, #0]
    f01c:	bl	bc90 <_close>
    f020:	adds	r3, r0, #1
    f022:	beq.n	f026 <_close_r+0x16>
    f024:	pop	{r3, r4, r5, pc}
    f026:	ldr	r3, [r5, #0]
    f028:	cmp	r3, #0
    f02a:	beq.n	f024 <_close_r+0x14>
    f02c:	str	r3, [r4, #0]
    f02e:	pop	{r3, r4, r5, pc}
    f030:	.word	0x20010170

0000f034 <_lseek_r>:
    f034:	push	{r3, r4, r5, lr}
    f036:	mov	r4, r1
    f038:	ldr	r5, [pc, #32]	; (f05c <_lseek_r+0x28>)
    f03a:	mov	ip, r0
    f03c:	mov	r1, r2
    f03e:	mov	r0, r4
    f040:	mov	r2, r3
    f042:	movs	r3, #0
    f044:	str	r3, [r5, #0]
    f046:	mov	r4, ip
    f048:	bl	bca4 <_lseek>
    f04c:	adds	r3, r0, #1
    f04e:	beq.n	f052 <_lseek_r+0x1e>
    f050:	pop	{r3, r4, r5, pc}
    f052:	ldr	r3, [r5, #0]
    f054:	cmp	r3, #0
    f056:	beq.n	f050 <_lseek_r+0x1c>
    f058:	str	r3, [r4, #0]
    f05a:	pop	{r3, r4, r5, pc}
    f05c:	.word	0x20010170

0000f060 <_read_r>:
    f060:	push	{r3, r4, r5, lr}
    f062:	mov	r4, r1
    f064:	ldr	r5, [pc, #32]	; (f088 <_read_r+0x28>)
    f066:	mov	ip, r0
    f068:	mov	r1, r2
    f06a:	mov	r0, r4
    f06c:	mov	r2, r3
    f06e:	movs	r3, #0
    f070:	str	r3, [r5, #0]
    f072:	mov	r4, ip
    f074:	bl	bc8c <_read>
    f078:	adds	r3, r0, #1
    f07a:	beq.n	f07e <_read_r+0x1e>
    f07c:	pop	{r3, r4, r5, pc}
    f07e:	ldr	r3, [r5, #0]
    f080:	cmp	r3, #0
    f082:	beq.n	f07c <_read_r+0x1c>
    f084:	str	r3, [r4, #0]
    f086:	pop	{r3, r4, r5, pc}
    f088:	.word	0x20010170

0000f08c <_sbrk_r>:
    f08c:	push	{r3, r4, r5, lr}
    f08e:	ldr	r5, [pc, #28]	; (f0ac <_sbrk_r+0x20>)
    f090:	movs	r2, #0
    f092:	mov	r4, r0
    f094:	mov	r0, r1
    f096:	str	r2, [r5, #0]
    f098:	bl	bc60 <_sbrk>
    f09c:	adds	r3, r0, #1
    f09e:	beq.n	f0a2 <_sbrk_r+0x16>
    f0a0:	pop	{r3, r4, r5, pc}
    f0a2:	ldr	r3, [r5, #0]
    f0a4:	cmp	r3, #0
    f0a6:	beq.n	f0a0 <_sbrk_r+0x14>
    f0a8:	str	r3, [r4, #0]
    f0aa:	pop	{r3, r4, r5, pc}
    f0ac:	.word	0x20010170

0000f0b0 <_write_r>:
    f0b0:	push	{r3, r4, r5, lr}
    f0b2:	mov	r4, r1
    f0b4:	ldr	r5, [pc, #32]	; (f0d8 <_write_r+0x28>)
    f0b6:	mov	ip, r0
    f0b8:	mov	r1, r2
    f0ba:	mov	r0, r4
    f0bc:	mov	r2, r3
    f0be:	movs	r3, #0
    f0c0:	str	r3, [r5, #0]
    f0c2:	mov	r4, ip
    f0c4:	bl	ca54 <_write>
    f0c8:	adds	r3, r0, #1
    f0ca:	beq.n	f0ce <_write_r+0x1e>
    f0cc:	pop	{r3, r4, r5, pc}
    f0ce:	ldr	r3, [r5, #0]
    f0d0:	cmp	r3, #0
    f0d2:	beq.n	f0cc <_write_r+0x1c>
    f0d4:	str	r3, [r4, #0]
    f0d6:	pop	{r3, r4, r5, pc}
    f0d8:	.word	0x20010170

0000f0dc <__errno>:
    f0dc:	ldr	r3, [pc, #4]	; (f0e4 <__errno+0x8>)
    f0de:	ldr	r0, [r3, #0]
    f0e0:	bx	lr
    f0e2:	nop
    f0e4:	.word	0x200093cc

0000f0e8 <__libc_init_array>:
    f0e8:	push	{r4, r5, r6, lr}
    f0ea:	ldr	r6, [pc, #52]	; (f120 <__libc_init_array+0x38>)
    f0ec:	ldr	r5, [pc, #52]	; (f124 <__libc_init_array+0x3c>)
    f0ee:	subs	r6, r6, r5
    f0f0:	asrs	r6, r6, #2
    f0f2:	beq.n	f102 <__libc_init_array+0x1a>
    f0f4:	movs	r4, #0
    f0f6:	ldr.w	r3, [r5], #4
    f0fa:	adds	r4, #1
    f0fc:	blx	r3
    f0fe:	cmp	r6, r4
    f100:	bne.n	f0f6 <__libc_init_array+0xe>
    f102:	ldr	r6, [pc, #36]	; (f128 <__libc_init_array+0x40>)
    f104:	ldr	r5, [pc, #36]	; (f12c <__libc_init_array+0x44>)
    f106:	subs	r6, r6, r5
    f108:	bl	179e0 <___init_veneer>
    f10c:	asrs	r6, r6, #2
    f10e:	beq.n	f11e <__libc_init_array+0x36>
    f110:	movs	r4, #0
    f112:	ldr.w	r3, [r5], #4
    f116:	adds	r4, #1
    f118:	blx	r3
    f11a:	cmp	r6, r4
    f11c:	bne.n	f112 <__libc_init_array+0x2a>
    f11e:	pop	{r4, r5, r6, pc}
    f120:	.word	0x600024c0
    f124:	.word	0x600024c0
    f128:	.word	0x600024d4
    f12c:	.word	0x600024c0

0000f130 <__retarget_lock_init_recursive>:
    f130:	bx	lr
    f132:	nop

0000f134 <__retarget_lock_close_recursive>:
    f134:	bx	lr
    f136:	nop

0000f138 <__retarget_lock_acquire_recursive>:
    f138:	bx	lr
    f13a:	nop

0000f13c <__retarget_lock_release_recursive>:
    f13c:	bx	lr
    f13e:	nop
    f140:	sub.w	r0, r2, r3
    f144:	bx	lr
    f146:	nop

0000f148 <strcmp>:
    f148:	ldrb	r2, [r0, #0]
    f14a:	ldrb	r3, [r1, #0]
    f14c:	cmp	r2, #1
    f14e:	it	cs
    f150:	cmpcs	r2, r3
    f152:	bne.n	f140 <__retarget_lock_release_recursive+0x4>
    f154:	strd	r4, r5, [sp, #-16]!
    f158:	orr.w	r4, r0, r1
    f15c:	strd	r6, r7, [sp, #8]
    f160:	mvn.w	ip, #0
    f164:	mov.w	r2, r4, lsl #29
    f168:	cbz	r2, f1b0 <strcmp+0x68>
    f16a:	eor.w	r4, r0, r1
    f16e:	tst.w	r4, #7
    f172:	bne.n	f24a <strcmp+0x102>
    f174:	and.w	r4, r0, #7
    f178:	bic.w	r0, r0, #7
    f17c:	and.w	r5, r4, #3
    f180:	bic.w	r1, r1, #7
    f184:	mov.w	r5, r5, lsl #3
    f188:	ldrd	r2, r3, [r0], #16
    f18c:	tst.w	r4, #4
    f190:	ldrd	r6, r7, [r1], #16
    f194:	lsl.w	r4, ip, r5
    f198:	orn	r2, r2, r4
    f19c:	orn	r6, r6, r4
    f1a0:	beq.n	f1b8 <strcmp+0x70>
    f1a2:	orn	r3, r3, r4
    f1a6:	mov	r2, ip
    f1a8:	orn	r7, r7, r4
    f1ac:	mov	r6, ip
    f1ae:	b.n	f1b8 <strcmp+0x70>
    f1b0:	ldrd	r2, r3, [r0], #16
    f1b4:	ldrd	r6, r7, [r1], #16
    f1b8:	uadd8	r5, r2, ip
    f1bc:	eor.w	r4, r2, r6
    f1c0:	sel	r4, r4, ip
    f1c4:	cbnz	r4, f222 <strcmp+0xda>
    f1c6:	uadd8	r5, r3, ip
    f1ca:	eor.w	r5, r3, r7
    f1ce:	sel	r5, r5, ip
    f1d2:	cbnz	r5, f1fa <strcmp+0xb2>
    f1d4:	ldrd	r2, r3, [r0, #-8]
    f1d8:	ldrd	r6, r7, [r1, #-8]
    f1dc:	uadd8	r5, r2, ip
    f1e0:	eor.w	r4, r2, r6
    f1e4:	sel	r4, r4, ip
    f1e8:	uadd8	r5, r3, ip
    f1ec:	eor.w	r5, r3, r7
    f1f0:	sel	r5, r5, ip
    f1f4:	orrs	r5, r4
    f1f6:	beq.n	f1b0 <strcmp+0x68>
    f1f8:	cbnz	r4, f222 <strcmp+0xda>
    f1fa:	rev	r5, r5
    f1fc:	clz	r4, r5
    f200:	bic.w	r4, r4, #7
    f204:	lsr.w	r1, r7, r4
    f208:	ldrd	r6, r7, [sp, #8]
    f20c:	lsr.w	r3, r3, r4
    f210:	and.w	r0, r3, #255	; 0xff
    f214:	and.w	r1, r1, #255	; 0xff
    f218:	ldrd	r4, r5, [sp], #16
    f21c:	sub.w	r0, r0, r1
    f220:	bx	lr
    f222:	rev	r4, r4
    f224:	clz	r4, r4
    f228:	bic.w	r4, r4, #7
    f22c:	lsr.w	r1, r6, r4
    f230:	ldrd	r6, r7, [sp, #8]
    f234:	lsr.w	r2, r2, r4
    f238:	and.w	r0, r2, #255	; 0xff
    f23c:	and.w	r1, r1, #255	; 0xff
    f240:	ldrd	r4, r5, [sp], #16
    f244:	sub.w	r0, r0, r1
    f248:	bx	lr
    f24a:	tst.w	r4, #3
    f24e:	bne.n	f2ca <strcmp+0x182>
    f250:	ands.w	r4, r0, #3
    f254:	bne.n	f2a8 <strcmp+0x160>
    f256:	ldr.w	r2, [r0], #8
    f25a:	ldr.w	r3, [r1], #8
    f25e:	uadd8	r5, r2, ip
    f262:	eor.w	r5, r2, r3
    f266:	sel	r5, r5, ip
    f26a:	cbnz	r5, f284 <strcmp+0x13c>
    f26c:	ldr.w	r2, [r0, #-4]
    f270:	ldr.w	r3, [r1, #-4]
    f274:	uadd8	r5, r2, ip
    f278:	eor.w	r5, r2, r3
    f27c:	sel	r5, r5, ip
    f280:	cmp	r5, #0
    f282:	beq.n	f256 <strcmp+0x10e>
    f284:	rev	r5, r5
    f286:	clz	r4, r5
    f28a:	bic.w	r4, r4, #7
    f28e:	lsr.w	r1, r3, r4
    f292:	lsr.w	r2, r2, r4
    f296:	and.w	r0, r2, #255	; 0xff
    f29a:	and.w	r1, r1, #255	; 0xff
    f29e:	ldrd	r4, r5, [sp], #16
    f2a2:	sub.w	r0, r0, r1
    f2a6:	bx	lr
    f2a8:	mov.w	r4, r4, lsl #3
    f2ac:	bic.w	r0, r0, #3
    f2b0:	ldr.w	r2, [r0], #8
    f2b4:	bic.w	r1, r1, #3
    f2b8:	ldr.w	r3, [r1], #8
    f2bc:	lsl.w	r4, ip, r4
    f2c0:	orn	r2, r2, r4
    f2c4:	orn	r3, r3, r4
    f2c8:	b.n	f25e <strcmp+0x116>
    f2ca:	ands.w	r4, r0, #3
    f2ce:	beq.n	f306 <strcmp+0x1be>
    f2d0:	sub.w	r1, r1, r4
    f2d4:	bic.w	r0, r0, #3
    f2d8:	lsls	r4, r4, #31
    f2da:	ldr.w	r2, [r0], #4
    f2de:	beq.n	f2ee <strcmp+0x1a6>
    f2e0:	bcs.n	f302 <strcmp+0x1ba>
    f2e2:	ldrb	r3, [r1, #2]
    f2e4:	uxtb.w	r4, r2, ror #16
    f2e8:	subs	r4, r4, r3
    f2ea:	bne.n	f2fa <strcmp+0x1b2>
    f2ec:	cbz	r3, f2fa <strcmp+0x1b2>
    f2ee:	ldrb	r3, [r1, #3]
    f2f0:	uxtb.w	r4, r2, ror #24
    f2f4:	subs	r4, r4, r3
    f2f6:	bne.n	f2fa <strcmp+0x1b2>
    f2f8:	cbnz	r3, f302 <strcmp+0x1ba>
    f2fa:	mov	r0, r4
    f2fc:	ldr.w	r4, [sp], #16
    f300:	bx	lr
    f302:	add.w	r1, r1, #4
    f306:	ldr.w	r2, [r0], #4
    f30a:	lsls	r4, r1, #31
    f30c:	bic.w	r1, r1, #3
    f310:	ldr.w	r3, [r1], #4
    f314:	bhi.n	f3a8 <strcmp+0x260>
    f316:	bcs.n	f362 <strcmp+0x21a>
    f318:	bic.w	r4, r2, #4278190080	; 0xff000000
    f31c:	uadd8	r5, r2, ip
    f320:	eors.w	r5, r4, r3, lsr #8
    f324:	sel	r5, r5, ip
    f328:	bne.n	f340 <strcmp+0x1f8>
    f32a:	cbnz	r5, f346 <strcmp+0x1fe>
    f32c:	ldr.w	r3, [r1], #4
    f330:	eor.w	r4, r4, r2
    f334:	cmp.w	r4, r3, lsl #24
    f338:	bne.n	f358 <strcmp+0x210>
    f33a:	ldr.w	r2, [r0], #4
    f33e:	b.n	f318 <strcmp+0x1d0>
    f340:	mov.w	r3, r3, lsr #8
    f344:	b.n	f3f2 <strcmp+0x2aa>
    f346:	bics.w	r5, r5, #4278190080	; 0xff000000
    f34a:	bne.n	f3e8 <strcmp+0x2a0>
    f34c:	ldrb	r0, [r1, #0]
    f34e:	ldrd	r4, r5, [sp], #16
    f352:	rsb	r0, r0, #0
    f356:	bx	lr
    f358:	mov.w	r2, r2, lsr #24
    f35c:	and.w	r3, r3, #255	; 0xff
    f360:	b.n	f3f2 <strcmp+0x2aa>
    f362:	and.w	r4, r2, ip, lsr #16
    f366:	uadd8	r5, r2, ip
    f36a:	eors.w	r5, r4, r3, lsr #16
    f36e:	sel	r5, r5, ip
    f372:	bne.n	f38a <strcmp+0x242>
    f374:	cbnz	r5, f390 <strcmp+0x248>
    f376:	ldr.w	r3, [r1], #4
    f37a:	eor.w	r4, r4, r2
    f37e:	cmp.w	r4, r3, lsl #16
    f382:	bne.n	f39e <strcmp+0x256>
    f384:	ldr.w	r2, [r0], #4
    f388:	b.n	f362 <strcmp+0x21a>
    f38a:	mov.w	r3, r3, lsr #16
    f38e:	b.n	f3f2 <strcmp+0x2aa>
    f390:	ands.w	r5, r5, ip, lsr #16
    f394:	bne.n	f3e8 <strcmp+0x2a0>
    f396:	ldrh	r3, [r1, #0]
    f398:	mov.w	r2, r2, lsr #16
    f39c:	b.n	f3f2 <strcmp+0x2aa>
    f39e:	mov.w	r2, r2, lsr #16
    f3a2:	and.w	r3, r3, ip, lsr #16
    f3a6:	b.n	f3f2 <strcmp+0x2aa>
    f3a8:	and.w	r4, r2, #255	; 0xff
    f3ac:	uadd8	r5, r2, ip
    f3b0:	eors.w	r5, r4, r3, lsr #24
    f3b4:	sel	r5, r5, ip
    f3b8:	bne.n	f3d0 <strcmp+0x288>
    f3ba:	cbnz	r5, f3d6 <strcmp+0x28e>
    f3bc:	ldr.w	r3, [r1], #4
    f3c0:	eor.w	r4, r4, r2
    f3c4:	cmp.w	r4, r3, lsl #8
    f3c8:	bne.n	f3de <strcmp+0x296>
    f3ca:	ldr.w	r2, [r0], #4
    f3ce:	b.n	f3a8 <strcmp+0x260>
    f3d0:	mov.w	r3, r3, lsr #24
    f3d4:	b.n	f3f2 <strcmp+0x2aa>
    f3d6:	tst.w	r5, #255	; 0xff
    f3da:	bne.n	f3e8 <strcmp+0x2a0>
    f3dc:	ldr	r3, [r1, #0]
    f3de:	mov.w	r2, r2, lsr #8
    f3e2:	bic.w	r3, r3, #4278190080	; 0xff000000
    f3e6:	b.n	f3f2 <strcmp+0x2aa>
    f3e8:	mov.w	r0, #0
    f3ec:	ldrd	r4, r5, [sp], #16
    f3f0:	bx	lr
    f3f2:	rev	r2, r2
    f3f4:	rev	r3, r3
    f3f6:	uadd8	r4, r2, ip
    f3fa:	eor.w	r4, r2, r3
    f3fe:	sel	r5, r4, ip
    f402:	clz	r4, r5
    f406:	lsl.w	r2, r2, r4
    f40a:	lsl.w	r3, r3, r4
    f40e:	mov.w	r0, r2, lsr #24
    f412:	ldrd	r4, r5, [sp], #16
    f416:	sub.w	r0, r0, r3, lsr #24
    f41a:	bx	lr

0000f41c <strcpy>:
    f41c:	eor.w	r2, r0, r1
    f420:	mov	ip, r0
    f422:	tst.w	r2, #3
    f426:	bne.n	f4c8 <strcpy+0xac>
    f428:	tst.w	r1, #3
    f42c:	bne.n	f494 <strcpy+0x78>
    f42e:	str.w	r4, [sp, #-4]!
    f432:	tst.w	r1, #4
    f436:	ldr.w	r3, [r1], #4
    f43a:	beq.n	f454 <strcpy+0x38>
    f43c:	sub.w	r2, r3, #16843009	; 0x1010101
    f440:	bics	r2, r3
    f442:	tst.w	r2, #2155905152	; 0x80808080
    f446:	itt	eq
    f448:	streq.w	r3, [ip], #4
    f44c:	ldreq.w	r3, [r1], #4
    f450:	bne.n	f480 <strcpy+0x64>
    f452:	nop
    f454:	ldr.w	r4, [r1], #4
    f458:	sub.w	r2, r3, #16843009	; 0x1010101
    f45c:	bics	r2, r3
    f45e:	tst.w	r2, #2155905152	; 0x80808080
    f462:	sub.w	r2, r4, #16843009	; 0x1010101
    f466:	bne.n	f480 <strcpy+0x64>
    f468:	str.w	r3, [ip], #4
    f46c:	bics	r2, r4
    f46e:	tst.w	r2, #2155905152	; 0x80808080
    f472:	itt	eq
    f474:	ldreq.w	r3, [r1], #4
    f478:	streq.w	r4, [ip], #4
    f47c:	beq.n	f454 <strcpy+0x38>
    f47e:	mov	r3, r4
    f480:	strb.w	r3, [ip], #1
    f484:	tst.w	r3, #255	; 0xff
    f488:	mov.w	r3, r3, ror #8
    f48c:	bne.n	f480 <strcpy+0x64>
    f48e:	ldr.w	r4, [sp], #4
    f492:	bx	lr
    f494:	tst.w	r1, #1
    f498:	beq.n	f4a8 <strcpy+0x8c>
    f49a:	ldrb.w	r2, [r1], #1
    f49e:	strb.w	r2, [ip], #1
    f4a2:	cmp	r2, #0
    f4a4:	it	eq
    f4a6:	bxeq	lr
    f4a8:	tst.w	r1, #2
    f4ac:	beq.n	f42e <strcpy+0x12>
    f4ae:	ldrh.w	r2, [r1], #2
    f4b2:	tst.w	r2, #255	; 0xff
    f4b6:	itet	ne
    f4b8:	strhne.w	r2, [ip], #2
    f4bc:	strbeq.w	r2, [ip]
    f4c0:	tstne.w	r2, #65280	; 0xff00
    f4c4:	bne.n	f42e <strcpy+0x12>
    f4c6:	bx	lr
    f4c8:	ldrb.w	r2, [r1], #1
    f4cc:	strb.w	r2, [ip], #1
    f4d0:	cmp	r2, #0
    f4d2:	bne.n	f4c8 <strcpy+0xac>
    f4d4:	bx	lr
    f4d6:	nop
	...

0000f4e0 <memchr>:
    f4e0:	and.w	r1, r1, #255	; 0xff
    f4e4:	cmp	r2, #16
    f4e6:	blt.n	f540 <memchr+0x60>
    f4e8:	tst.w	r0, #7
    f4ec:	beq.n	f500 <memchr+0x20>
    f4ee:	ldrb.w	r3, [r0], #1
    f4f2:	subs	r2, #1
    f4f4:	cmp	r3, r1
    f4f6:	beq.n	f554 <memchr+0x74>
    f4f8:	tst.w	r0, #7
    f4fc:	cbz	r2, f550 <memchr+0x70>
    f4fe:	bne.n	f4ee <memchr+0xe>
    f500:	push	{r4, r5, r6, r7}
    f502:	orr.w	r1, r1, r1, lsl #8
    f506:	orr.w	r1, r1, r1, lsl #16
    f50a:	bic.w	r4, r2, #7
    f50e:	mvns.w	r7, #0
    f512:	movs	r3, #0
    f514:	ldrd	r5, r6, [r0], #8
    f518:	subs	r4, #8
    f51a:	eor.w	r5, r5, r1
    f51e:	eor.w	r6, r6, r1
    f522:	uadd8	r5, r5, r7
    f526:	sel	r5, r3, r7
    f52a:	uadd8	r6, r6, r7
    f52e:	sel	r6, r5, r7
    f532:	cbnz	r6, f558 <memchr+0x78>
    f534:	bne.n	f514 <memchr+0x34>
    f536:	pop	{r4, r5, r6, r7}
    f538:	and.w	r1, r1, #255	; 0xff
    f53c:	and.w	r2, r2, #7
    f540:	cbz	r2, f550 <memchr+0x70>
    f542:	ldrb.w	r3, [r0], #1
    f546:	subs	r2, #1
    f548:	eor.w	r3, r3, r1
    f54c:	cbz	r3, f554 <memchr+0x74>
    f54e:	bne.n	f542 <memchr+0x62>
    f550:	movs	r0, #0
    f552:	bx	lr
    f554:	subs	r0, #1
    f556:	bx	lr
    f558:	cmp	r5, #0
    f55a:	itte	eq
    f55c:	moveq	r5, r6
    f55e:	subeq	r0, #3
    f560:	subne	r0, #7
    f562:	tst.w	r5, #1
    f566:	bne.n	f578 <memchr+0x98>
    f568:	adds	r0, #1
    f56a:	tst.w	r5, #256	; 0x100
    f56e:	ittt	eq
    f570:	addeq	r0, #1
    f572:	tsteq.w	r5, #98304	; 0x18000
    f576:	addeq	r0, #1
    f578:	pop	{r4, r5, r6, r7}
    f57a:	subs	r0, #1
    f57c:	bx	lr
    f57e:	nop

0000f580 <strlen>:
    f580:	pld	[r0]
    f584:	strd	r4, r5, [sp, #-8]!
    f588:	bic.w	r1, r0, #7
    f58c:	mvn.w	ip, #0
    f590:	ands.w	r4, r0, #7
    f594:	pld	[r1, #32]
    f598:	bne.w	f62e <strlen+0xae>
    f59c:	mov.w	r4, #0
    f5a0:	mvn.w	r0, #7
    f5a4:	ldrd	r2, r3, [r1]
    f5a8:	pld	[r1, #64]	; 0x40
    f5ac:	add.w	r0, r0, #8
    f5b0:	uadd8	r2, r2, ip
    f5b4:	sel	r2, r4, ip
    f5b8:	uadd8	r3, r3, ip
    f5bc:	sel	r3, r2, ip
    f5c0:	cbnz	r3, f616 <strlen+0x96>
    f5c2:	ldrd	r2, r3, [r1, #8]
    f5c6:	uadd8	r2, r2, ip
    f5ca:	add.w	r0, r0, #8
    f5ce:	sel	r2, r4, ip
    f5d2:	uadd8	r3, r3, ip
    f5d6:	sel	r3, r2, ip
    f5da:	cbnz	r3, f616 <strlen+0x96>
    f5dc:	ldrd	r2, r3, [r1, #16]
    f5e0:	uadd8	r2, r2, ip
    f5e4:	add.w	r0, r0, #8
    f5e8:	sel	r2, r4, ip
    f5ec:	uadd8	r3, r3, ip
    f5f0:	sel	r3, r2, ip
    f5f4:	cbnz	r3, f616 <strlen+0x96>
    f5f6:	ldrd	r2, r3, [r1, #24]
    f5fa:	add.w	r1, r1, #32
    f5fe:	uadd8	r2, r2, ip
    f602:	add.w	r0, r0, #8
    f606:	sel	r2, r4, ip
    f60a:	uadd8	r3, r3, ip
    f60e:	sel	r3, r2, ip
    f612:	cmp	r3, #0
    f614:	beq.n	f5a4 <strlen+0x24>
    f616:	cmp	r2, #0
    f618:	itt	eq
    f61a:	addeq	r0, #4
    f61c:	moveq	r2, r3
    f61e:	rev	r2, r2
    f620:	clz	r2, r2
    f624:	ldrd	r4, r5, [sp], #8
    f628:	add.w	r0, r0, r2, lsr #3
    f62c:	bx	lr
    f62e:	ldrd	r2, r3, [r1]
    f632:	and.w	r5, r4, #3
    f636:	rsb	r0, r4, #0
    f63a:	mov.w	r5, r5, lsl #3
    f63e:	tst.w	r4, #4
    f642:	pld	[r1, #64]	; 0x40
    f646:	lsl.w	r5, ip, r5
    f64a:	orn	r2, r2, r5
    f64e:	itt	ne
    f650:	ornne	r3, r3, r5
    f654:	movne	r2, ip
    f656:	mov.w	r4, #0
    f65a:	b.n	f5b0 <strlen+0x30>
    f65c:	movs	r0, r0
	...

0000f660 <nan>:
    f660:	vldr	d0, [pc, #4]	; f668 <nan+0x8>
    f664:	bx	lr
    f666:	nop
    f668:	.word	0x00000000
    f66c:	.word	0x7ff80000

0000f670 <nanf>:
    f670:	vldr	s0, [pc, #4]	; f678 <nanf+0x8>
    f674:	bx	lr
    f676:	nop
    f678:	.word	0x7fc00000

0000f67c <__register_exitproc>:
    f67c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f680:	ldr.w	sl, [pc, #124]	; f700 <__register_exitproc+0x84>
    f684:	mov	r6, r0
    f686:	ldr.w	r0, [sl]
    f68a:	mov	r8, r3
    f68c:	mov	r7, r1
    f68e:	mov	r9, r2
    f690:	bl	f138 <__retarget_lock_acquire_recursive>
    f694:	ldr	r3, [pc, #96]	; (f6f8 <__register_exitproc+0x7c>)
    f696:	ldr	r4, [r3, #0]
    f698:	cbz	r4, f6e4 <__register_exitproc+0x68>
    f69a:	ldr	r5, [r4, #4]
    f69c:	cmp	r5, #31
    f69e:	bgt.n	f6ea <__register_exitproc+0x6e>
    f6a0:	cbnz	r6, f6ba <__register_exitproc+0x3e>
    f6a2:	adds	r3, r5, #1
    f6a4:	adds	r5, #2
    f6a6:	ldr.w	r0, [sl]
    f6aa:	str	r3, [r4, #4]
    f6ac:	str.w	r7, [r4, r5, lsl #2]
    f6b0:	bl	f13c <__retarget_lock_release_recursive>
    f6b4:	movs	r0, #0
    f6b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f6ba:	add.w	r1, r4, r5, lsl #2
    f6be:	movs	r3, #1
    f6c0:	str.w	r9, [r1, #136]	; 0x88
    f6c4:	ldr.w	r2, [r4, #392]	; 0x188
    f6c8:	lsls	r3, r5
    f6ca:	orrs	r2, r3
    f6cc:	cmp	r6, #2
    f6ce:	str.w	r2, [r4, #392]	; 0x188
    f6d2:	str.w	r8, [r1, #264]	; 0x108
    f6d6:	bne.n	f6a2 <__register_exitproc+0x26>
    f6d8:	ldr.w	r2, [r4, #396]	; 0x18c
    f6dc:	orrs	r2, r3
    f6de:	str.w	r2, [r4, #396]	; 0x18c
    f6e2:	b.n	f6a2 <__register_exitproc+0x26>
    f6e4:	ldr	r4, [pc, #20]	; (f6fc <__register_exitproc+0x80>)
    f6e6:	str	r4, [r3, #0]
    f6e8:	b.n	f69a <__register_exitproc+0x1e>
    f6ea:	ldr.w	r0, [sl]
    f6ee:	bl	f13c <__retarget_lock_release_recursive>
    f6f2:	mov.w	r0, #4294967295
    f6f6:	b.n	f6b6 <__register_exitproc+0x3a>
    f6f8:	.word	0x2000fc54
    f6fc:	.word	0x2000fc58
    f700:	.word	0x20008e38

0000f704 <_malloc_trim_r>:
    f704:	push	{r3, r4, r5, r6, r7, lr}
    f706:	ldr	r7, [pc, #144]	; (f798 <_malloc_trim_r+0x94>)
    f708:	mov	r4, r1
    f70a:	mov	r6, r0
    f70c:	bl	d4e8 <__malloc_lock>
    f710:	ldr	r3, [r7, #8]
    f712:	ldr	r5, [r3, #4]
    f714:	rsb	r1, r4, #4064	; 0xfe0
    f718:	adds	r1, #15
    f71a:	bic.w	r5, r5, #3
    f71e:	adds	r3, r1, r5
    f720:	bic.w	r3, r3, #4080	; 0xff0
    f724:	bic.w	r3, r3, #15
    f728:	sub.w	r4, r3, #4096	; 0x1000
    f72c:	cmp.w	r4, #4096	; 0x1000
    f730:	blt.n	f742 <_malloc_trim_r+0x3e>
    f732:	movs	r1, #0
    f734:	mov	r0, r6
    f736:	bl	f08c <_sbrk_r>
    f73a:	ldr	r3, [r7, #8]
    f73c:	add	r3, r5
    f73e:	cmp	r0, r3
    f740:	beq.n	f74c <_malloc_trim_r+0x48>
    f742:	mov	r0, r6
    f744:	bl	d4f4 <__malloc_unlock>
    f748:	movs	r0, #0
    f74a:	pop	{r3, r4, r5, r6, r7, pc}
    f74c:	negs	r1, r4
    f74e:	mov	r0, r6
    f750:	bl	f08c <_sbrk_r>
    f754:	adds	r0, #1
    f756:	beq.n	f774 <_malloc_trim_r+0x70>
    f758:	ldr	r2, [pc, #64]	; (f79c <_malloc_trim_r+0x98>)
    f75a:	ldr	r3, [r7, #8]
    f75c:	subs	r5, r5, r4
    f75e:	orr.w	r5, r5, #1
    f762:	str	r5, [r3, #4]
    f764:	ldr	r3, [r2, #0]
    f766:	mov	r0, r6
    f768:	subs	r3, r3, r4
    f76a:	str	r3, [r2, #0]
    f76c:	bl	d4f4 <__malloc_unlock>
    f770:	movs	r0, #1
    f772:	pop	{r3, r4, r5, r6, r7, pc}
    f774:	movs	r1, #0
    f776:	mov	r0, r6
    f778:	bl	f08c <_sbrk_r>
    f77c:	ldr	r2, [r7, #8]
    f77e:	subs	r3, r0, r2
    f780:	cmp	r3, #15
    f782:	ble.n	f742 <_malloc_trim_r+0x3e>
    f784:	orr.w	r3, r3, #1
    f788:	str	r3, [r2, #4]
    f78a:	ldr	r3, [pc, #20]	; (f7a0 <_malloc_trim_r+0x9c>)
    f78c:	ldr	r1, [pc, #12]	; (f79c <_malloc_trim_r+0x98>)
    f78e:	ldr	r3, [r3, #0]
    f790:	subs	r0, r0, r3
    f792:	str	r0, [r1, #0]
    f794:	b.n	f742 <_malloc_trim_r+0x3e>
    f796:	nop
    f798:	.word	0x20008fb0
    f79c:	.word	0x2000fdf4
    f7a0:	.word	0x200093b8

0000f7a4 <_free_r>:
    f7a4:	cmp	r1, #0
    f7a6:	beq.n	f86c <_free_r+0xc8>
    f7a8:	push	{r3, r4, r5, r6, r7, lr}
    f7aa:	mov	r4, r1
    f7ac:	mov	r6, r0
    f7ae:	bl	d4e8 <__malloc_lock>
    f7b2:	ldr.w	r2, [r4, #-4]
    f7b6:	ldr	r7, [pc, #492]	; (f9a4 <_free_r+0x200>)
    f7b8:	sub.w	r5, r4, #8
    f7bc:	bic.w	r1, r2, #1
    f7c0:	add.w	ip, r5, r1
    f7c4:	ldr	r0, [r7, #8]
    f7c6:	ldr.w	r3, [ip, #4]
    f7ca:	cmp	r0, ip
    f7cc:	bic.w	r3, r3, #3
    f7d0:	beq.w	f8ea <_free_r+0x146>
    f7d4:	lsls	r2, r2, #31
    f7d6:	str.w	r3, [ip, #4]
    f7da:	bmi.n	f842 <_free_r+0x9e>
    f7dc:	ldr.w	r2, [r4, #-8]
    f7e0:	subs	r5, r5, r2
    f7e2:	add	r1, r2
    f7e4:	ldr	r2, [r5, #8]
    f7e6:	add.w	r0, r7, #8
    f7ea:	cmp	r2, r0
    f7ec:	beq.n	f8c4 <_free_r+0x120>
    f7ee:	add.w	r4, ip, r3
    f7f2:	ldr.w	lr, [r4, #4]
    f7f6:	ldr	r4, [r5, #12]
    f7f8:	str	r4, [r2, #12]
    f7fa:	tst.w	lr, #1
    f7fe:	str	r2, [r4, #8]
    f800:	beq.w	f932 <_free_r+0x18e>
    f804:	orr.w	r3, r1, #1
    f808:	str	r3, [r5, #4]
    f80a:	str.w	r1, [ip]
    f80e:	cmp.w	r1, #512	; 0x200
    f812:	bcs.n	f880 <_free_r+0xdc>
    f814:	ldr	r0, [r7, #4]
    f816:	lsrs	r3, r1, #3
    f818:	movs	r2, #1
    f81a:	lsrs	r1, r1, #5
    f81c:	adds	r3, #1
    f81e:	lsls	r2, r1
    f820:	orrs	r2, r0
    f822:	ldr.w	r1, [r7, r3, lsl #3]
    f826:	str	r2, [r7, #4]
    f828:	add.w	r2, r7, r3, lsl #3
    f82c:	subs	r2, #8
    f82e:	strd	r1, r2, [r5, #8]
    f832:	str.w	r5, [r7, r3, lsl #3]
    f836:	str	r5, [r1, #12]
    f838:	mov	r0, r6
    f83a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f83e:	b.w	d4f4 <__malloc_unlock>
    f842:	add.w	r2, ip, r3
    f846:	ldr	r2, [r2, #4]
    f848:	lsls	r0, r2, #31
    f84a:	bmi.n	f86e <_free_r+0xca>
    f84c:	add	r1, r3
    f84e:	add.w	r0, r7, #8
    f852:	ldr.w	r3, [ip, #8]
    f856:	cmp	r3, r0
    f858:	beq.n	f942 <_free_r+0x19e>
    f85a:	ldr.w	r2, [ip, #12]
    f85e:	str	r2, [r3, #12]
    f860:	str	r3, [r2, #8]
    f862:	orr.w	r3, r1, #1
    f866:	str	r3, [r5, #4]
    f868:	str	r1, [r5, r1]
    f86a:	b.n	f80e <_free_r+0x6a>
    f86c:	bx	lr
    f86e:	orr.w	r3, r1, #1
    f872:	cmp.w	r1, #512	; 0x200
    f876:	str.w	r3, [r4, #-4]
    f87a:	str.w	r1, [ip]
    f87e:	bcc.n	f814 <_free_r+0x70>
    f880:	cmp.w	r1, #2560	; 0xa00
    f884:	mov.w	r3, r1, lsr #9
    f888:	bcs.n	f91c <_free_r+0x178>
    f88a:	lsrs	r3, r1, #6
    f88c:	add.w	r0, r3, #57	; 0x39
    f890:	add.w	r2, r3, #56	; 0x38
    f894:	lsls	r3, r0, #3
    f896:	adds	r0, r7, r3
    f898:	ldr	r3, [r7, r3]
    f89a:	subs	r0, #8
    f89c:	cmp	r0, r3
    f89e:	beq.n	f954 <_free_r+0x1b0>
    f8a0:	ldr	r2, [r3, #4]
    f8a2:	bic.w	r2, r2, #3
    f8a6:	cmp	r2, r1
    f8a8:	bls.n	f8b0 <_free_r+0x10c>
    f8aa:	ldr	r3, [r3, #8]
    f8ac:	cmp	r0, r3
    f8ae:	bne.n	f8a0 <_free_r+0xfc>
    f8b0:	ldr	r0, [r3, #12]
    f8b2:	strd	r3, r0, [r5, #8]
    f8b6:	str	r5, [r0, #8]
    f8b8:	str	r5, [r3, #12]
    f8ba:	mov	r0, r6
    f8bc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f8c0:	b.w	d4f4 <__malloc_unlock>
    f8c4:	add.w	r2, ip, r3
    f8c8:	ldr	r2, [r2, #4]
    f8ca:	lsls	r2, r2, #31
    f8cc:	bmi.n	f996 <_free_r+0x1f2>
    f8ce:	add	r3, r1
    f8d0:	ldrd	r1, r2, [ip, #8]
    f8d4:	str	r2, [r1, #12]
    f8d6:	str	r1, [r2, #8]
    f8d8:	orr.w	r2, r3, #1
    f8dc:	str	r2, [r5, #4]
    f8de:	mov	r0, r6
    f8e0:	str	r3, [r5, r3]
    f8e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f8e6:	b.w	d4f4 <__malloc_unlock>
    f8ea:	add	r3, r1
    f8ec:	lsls	r1, r2, #31
    f8ee:	bmi.n	f900 <_free_r+0x15c>
    f8f0:	ldr.w	r2, [r4, #-8]
    f8f4:	subs	r5, r5, r2
    f8f6:	add	r3, r2
    f8f8:	ldrd	r1, r2, [r5, #8]
    f8fc:	str	r2, [r1, #12]
    f8fe:	str	r1, [r2, #8]
    f900:	orr.w	r2, r3, #1
    f904:	str	r2, [r5, #4]
    f906:	ldr	r2, [pc, #160]	; (f9a8 <_free_r+0x204>)
    f908:	str	r5, [r7, #8]
    f90a:	ldr	r2, [r2, #0]
    f90c:	cmp	r2, r3
    f90e:	bhi.n	f838 <_free_r+0x94>
    f910:	ldr	r3, [pc, #152]	; (f9ac <_free_r+0x208>)
    f912:	mov	r0, r6
    f914:	ldr	r1, [r3, #0]
    f916:	bl	f704 <_malloc_trim_r>
    f91a:	b.n	f838 <_free_r+0x94>
    f91c:	cmp	r3, #20
    f91e:	bls.n	f936 <_free_r+0x192>
    f920:	cmp	r3, #84	; 0x54
    f922:	bhi.n	f964 <_free_r+0x1c0>
    f924:	lsrs	r3, r1, #12
    f926:	add.w	r0, r3, #111	; 0x6f
    f92a:	add.w	r2, r3, #110	; 0x6e
    f92e:	lsls	r3, r0, #3
    f930:	b.n	f896 <_free_r+0xf2>
    f932:	add	r1, r3
    f934:	b.n	f852 <_free_r+0xae>
    f936:	add.w	r0, r3, #92	; 0x5c
    f93a:	add.w	r2, r3, #91	; 0x5b
    f93e:	lsls	r3, r0, #3
    f940:	b.n	f896 <_free_r+0xf2>
    f942:	orr.w	r3, r1, #1
    f946:	strd	r5, r5, [r7, #16]
    f94a:	strd	r0, r0, [r5, #8]
    f94e:	str	r3, [r5, #4]
    f950:	str	r1, [r5, r1]
    f952:	b.n	f838 <_free_r+0x94>
    f954:	ldr	r1, [r7, #4]
    f956:	asrs	r2, r2, #2
    f958:	movs	r4, #1
    f95a:	lsl.w	r2, r4, r2
    f95e:	orrs	r2, r1
    f960:	str	r2, [r7, #4]
    f962:	b.n	f8b2 <_free_r+0x10e>
    f964:	cmp.w	r3, #340	; 0x154
    f968:	bhi.n	f978 <_free_r+0x1d4>
    f96a:	lsrs	r3, r1, #15
    f96c:	add.w	r0, r3, #120	; 0x78
    f970:	add.w	r2, r3, #119	; 0x77
    f974:	lsls	r3, r0, #3
    f976:	b.n	f896 <_free_r+0xf2>
    f978:	movw	r2, #1364	; 0x554
    f97c:	cmp	r3, r2
    f97e:	bhi.n	f98e <_free_r+0x1ea>
    f980:	lsrs	r3, r1, #18
    f982:	add.w	r0, r3, #125	; 0x7d
    f986:	add.w	r2, r3, #124	; 0x7c
    f98a:	lsls	r3, r0, #3
    f98c:	b.n	f896 <_free_r+0xf2>
    f98e:	mov.w	r3, #1016	; 0x3f8
    f992:	movs	r2, #126	; 0x7e
    f994:	b.n	f896 <_free_r+0xf2>
    f996:	orr.w	r3, r1, #1
    f99a:	str	r3, [r5, #4]
    f99c:	str.w	r1, [ip]
    f9a0:	b.n	f838 <_free_r+0x94>
    f9a2:	nop
    f9a4:	.word	0x20008fb0
    f9a8:	.word	0x200093bc
    f9ac:	.word	0x2000fe24

0000f9b0 <rshift>:
    f9b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9b4:	ldr	r4, [r0, #16]
    f9b6:	cmp.w	r4, r1, asr #5
    f9ba:	ble.n	fa1c <rshift+0x6c>
    f9bc:	add.w	lr, r0, #20
    f9c0:	asrs	r6, r1, #5
    f9c2:	ands.w	ip, r1, #31
    f9c6:	add.w	r5, lr, r4, lsl #2
    f9ca:	add.w	r3, lr, r6, lsl #2
    f9ce:	beq.n	fa28 <rshift+0x78>
    f9d0:	ldr.w	r1, [lr, r6, lsl #2]
    f9d4:	adds	r3, #4
    f9d6:	cmp	r5, r3
    f9d8:	lsr.w	r1, r1, ip
    f9dc:	rsb	r8, ip, #32
    f9e0:	bls.n	fa14 <rshift+0x64>
    f9e2:	mov	r7, lr
    f9e4:	ldr	r2, [r3, #0]
    f9e6:	lsl.w	r2, r2, r8
    f9ea:	orrs	r2, r1
    f9ec:	str.w	r2, [r7], #4
    f9f0:	ldr.w	r1, [r3], #4
    f9f4:	cmp	r5, r3
    f9f6:	lsr.w	r1, r1, ip
    f9fa:	bhi.n	f9e4 <rshift+0x34>
    f9fc:	subs	r3, r4, r6
    f9fe:	lsls	r3, r3, #2
    fa00:	subs	r3, #5
    fa02:	lsrs	r3, r3, #2
    fa04:	adds	r3, #1
    fa06:	add.w	r4, lr, r3, lsl #2
    fa0a:	str.w	r1, [lr, r3, lsl #2]
    fa0e:	cbz	r1, fa44 <rshift+0x94>
    fa10:	adds	r4, #4
    fa12:	b.n	fa44 <rshift+0x94>
    fa14:	str	r1, [r0, #20]
    fa16:	mov	r4, lr
    fa18:	cmp	r1, #0
    fa1a:	bne.n	fa10 <rshift+0x60>
    fa1c:	movs	r3, #0
    fa1e:	str	r3, [r0, #16]
    fa20:	movs	r3, #0
    fa22:	str	r3, [r0, #20]
    fa24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa28:	cmp	r5, r3
    fa2a:	it	hi
    fa2c:	addhi.w	r2, r0, #16
    fa30:	bls.n	fa1c <rshift+0x6c>
    fa32:	ldr.w	r1, [r3], #4
    fa36:	str.w	r1, [r2, #4]!
    fa3a:	cmp	r5, r3
    fa3c:	bhi.n	fa32 <rshift+0x82>
    fa3e:	subs	r4, r4, r6
    fa40:	add.w	r4, lr, r4, lsl #2
    fa44:	sub.w	r3, r4, lr
    fa48:	asrs	r3, r3, #2
    fa4a:	cmp	r4, lr
    fa4c:	str	r3, [r0, #16]
    fa4e:	beq.n	fa20 <rshift+0x70>
    fa50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fa54 <__gethex>:
    fa54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa58:	vpush	{d8}
    fa5c:	ldr	r4, [r1, #0]
    fa5e:	mov	fp, r1
    fa60:	ldrb	r1, [r4, #2]
    fa62:	sub	sp, #20
    fa64:	cmp	r1, #48	; 0x30
    fa66:	vmov	s16, r0
    fa6a:	mov	sl, r2
    fa6c:	str	r3, [sp, #8]
    fa6e:	bne.w	fe0e <__gethex+0x3ba>
    fa72:	mvn.w	r0, #1
    fa76:	subs	r0, r0, r4
    fa78:	adds	r2, r4, #3
    fa7a:	adds	r3, r0, r2
    fa7c:	mov	r4, r2
    fa7e:	ldrb.w	r1, [r2], #1
    fa82:	cmp	r1, #48	; 0x30
    fa84:	beq.n	fa7a <__gethex+0x26>
    fa86:	ldr.w	r8, [pc, #768]	; fd88 <__gethex+0x334>
    fa8a:	ldrb.w	r2, [r8, r1]
    fa8e:	cmp	r2, #0
    fa90:	beq.w	fc5e <__gethex+0x20a>
    fa94:	ldrb	r2, [r4, #0]
    fa96:	movs	r7, #0
    fa98:	ldrb.w	r2, [r8, r2]
    fa9c:	mov	r5, r7
    fa9e:	mov	r6, r4
    faa0:	cbz	r2, faae <__gethex+0x5a>
    faa2:	ldrb.w	r2, [r6, #1]!
    faa6:	ldrb.w	r2, [r8, r2]
    faaa:	cmp	r2, #0
    faac:	bne.n	faa2 <__gethex+0x4e>
    faae:	ldr	r1, [pc, #724]	; (fd84 <__gethex+0x330>)
    fab0:	str	r3, [sp, #4]
    fab2:	movs	r2, #1
    fab4:	mov	r0, r6
    fab6:	bl	ef14 <strncmp>
    faba:	ldr	r3, [sp, #4]
    fabc:	mov	r9, r0
    fabe:	cmp	r0, #0
    fac0:	beq.n	fb5e <__gethex+0x10a>
    fac2:	cmp	r5, #0
    fac4:	bne.n	fb64 <__gethex+0x110>
    fac6:	ldrb	r2, [r6, #0]
    fac8:	mov	r9, r5
    faca:	and.w	r2, r2, #223	; 0xdf
    face:	cmp	r2, #80	; 0x50
    fad0:	mov	r5, r6
    fad2:	beq.n	fb76 <__gethex+0x122>
    fad4:	str.w	r6, [fp]
    fad8:	cmp	r7, #0
    fada:	bne.n	fbb0 <__gethex+0x15c>
    fadc:	subs	r3, r5, r4
    fade:	subs	r3, #1
    fae0:	cmp	r3, #7
    fae2:	mov	r1, r7
    fae4:	ble.n	faf0 <__gethex+0x9c>
    fae6:	asrs	r3, r3, #1
    fae8:	cmp	r3, #7
    faea:	add.w	r1, r1, #1
    faee:	bgt.n	fae6 <__gethex+0x92>
    faf0:	vmov	r0, s16
    faf4:	bl	101fc <_Balloc>
    faf8:	mov	fp, r0
    fafa:	cmp	r0, #0
    fafc:	beq.w	ffcc <__gethex+0x578>
    fb00:	add.w	r6, r0, #20
    fb04:	cmp	r4, r5
    fb06:	str	r6, [sp, #4]
    fb08:	bcs.w	feb0 <__gethex+0x45c>
    fb0c:	movs	r7, #0
    fb0e:	str.w	r9, [sp, #12]
    fb12:	ldr	r1, [pc, #624]	; (fd84 <__gethex+0x330>)
    fb14:	mov	r9, r4
    fb16:	mov	r4, r7
    fb18:	b.n	fb34 <__gethex+0xe0>
    fb1a:	cmp	r7, #32
    fb1c:	beq.n	fb52 <__gethex+0xfe>
    fb1e:	mov	r0, r7
    fb20:	adds	r7, #4
    fb22:	ldrb	r2, [r5, #0]
    fb24:	ldrb.w	r2, [r8, r2]
    fb28:	and.w	r2, r2, #15
    fb2c:	lsls	r2, r0
    fb2e:	orrs	r4, r2
    fb30:	cmp	r5, r9
    fb32:	beq.n	fbc4 <__gethex+0x170>
    fb34:	ldrb.w	r2, [r5, #-1]!
    fb38:	cmp	r2, #46	; 0x2e
    fb3a:	bne.n	fb1a <__gethex+0xc6>
    fb3c:	cmp	r5, r9
    fb3e:	bcc.n	fb1a <__gethex+0xc6>
    fb40:	movs	r2, #1
    fb42:	mov	r0, r5
    fb44:	bl	ef14 <strncmp>
    fb48:	ldr	r1, [pc, #568]	; (fd84 <__gethex+0x330>)
    fb4a:	cmp	r0, #0
    fb4c:	beq.n	fb30 <__gethex+0xdc>
    fb4e:	cmp	r7, #32
    fb50:	bne.n	fb1e <__gethex+0xca>
    fb52:	movs	r0, #0
    fb54:	str.w	r4, [r6], #4
    fb58:	movs	r7, #4
    fb5a:	mov	r4, r0
    fb5c:	b.n	fb22 <__gethex+0xce>
    fb5e:	cmp	r5, #0
    fb60:	beq.w	fde8 <__gethex+0x394>
    fb64:	ldrb	r2, [r6, #0]
    fb66:	and.w	r2, r2, #223	; 0xdf
    fb6a:	subs	r5, r5, r6
    fb6c:	cmp	r2, #80	; 0x50
    fb6e:	mov.w	r9, r5, lsl #2
    fb72:	mov	r5, r6
    fb74:	bne.n	fad4 <__gethex+0x80>
    fb76:	ldrb	r2, [r5, #1]
    fb78:	cmp	r2, #43	; 0x2b
    fb7a:	beq.w	fdc8 <__gethex+0x374>
    fb7e:	cmp	r2, #45	; 0x2d
    fb80:	beq.w	fcce <__gethex+0x27a>
    fb84:	adds	r6, r5, #1
    fb86:	movs	r0, #0
    fb88:	ldrb.w	r1, [r8, r2]
    fb8c:	subs	r2, r1, #1
    fb8e:	cmp	r2, #24
    fb90:	bhi.w	fcca <__gethex+0x276>
    fb94:	ldrb	r2, [r6, #1]
    fb96:	ldrb.w	r2, [r8, r2]
    fb9a:	subs	r1, #16
    fb9c:	adds	r6, #1
    fb9e:	cmp	r2, #0
    fba0:	bne.n	fc58 <__gethex+0x204>
    fba2:	cbz	r0, fba6 <__gethex+0x152>
    fba4:	negs	r1, r1
    fba6:	add	r9, r1
    fba8:	str.w	r6, [fp]
    fbac:	cmp	r7, #0
    fbae:	beq.n	fadc <__gethex+0x88>
    fbb0:	cmp	r3, #0
    fbb2:	ite	ne
    fbb4:	movne	r5, #0
    fbb6:	moveq	r5, #6
    fbb8:	mov	r0, r5
    fbba:	add	sp, #20
    fbbc:	vpop	{d8}
    fbc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fbc4:	ldr.w	r9, [sp, #12]
    fbc8:	mov	r3, r4
    fbca:	str.w	r3, [r6], #4
    fbce:	mov	r0, r3
    fbd0:	ldr	r3, [sp, #4]
    fbd2:	subs	r6, r6, r3
    fbd4:	asrs	r6, r6, #2
    fbd6:	str.w	r6, [fp, #16]
    fbda:	bl	103b0 <__hi0bits>
    fbde:	lsls	r6, r6, #5
    fbe0:	ldr.w	r4, [sl]
    fbe4:	subs	r0, r6, r0
    fbe6:	cmp	r0, r4
    fbe8:	bgt.n	fcd6 <__gethex+0x282>
    fbea:	blt.w	fdcc <__gethex+0x378>
    fbee:	movs	r7, #0
    fbf0:	ldr.w	r3, [sl, #8]
    fbf4:	cmp	r3, r9
    fbf6:	blt.w	fe9c <__gethex+0x448>
    fbfa:	ldr.w	r3, [sl, #4]
    fbfe:	cmp	r3, r9
    fc00:	ble.n	fc98 <__gethex+0x244>
    fc02:	sub.w	r9, r3, r9
    fc06:	cmp	r4, r9
    fc08:	bgt.w	fd10 <__gethex+0x2bc>
    fc0c:	ldr.w	r2, [sl, #12]
    fc10:	cmp	r2, #2
    fc12:	beq.w	fee0 <__gethex+0x48c>
    fc16:	cmp	r2, #3
    fc18:	beq.w	ff1e <__gethex+0x4ca>
    fc1c:	cmp	r2, #1
    fc1e:	beq.w	ff00 <__gethex+0x4ac>
    fc22:	vmov	r0, s16
    fc26:	mov	r1, fp
    fc28:	bl	10248 <_Bfree>
    fc2c:	movs	r5, #80	; 0x50
    fc2e:	ldr	r2, [sp, #64]	; 0x40
    fc30:	movs	r3, #0
    fc32:	mov	r0, r5
    fc34:	str	r3, [r2, #0]
    fc36:	add	sp, #20
    fc38:	vpop	{d8}
    fc3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc40:	add.w	r1, r1, r1, lsl #2
    fc44:	add.w	r2, r2, r1, lsl #1
    fc48:	sub.w	r1, r2, #16
    fc4c:	ldrb.w	r2, [r6, #1]!
    fc50:	ldrb.w	r2, [r8, r2]
    fc54:	cmp	r2, #0
    fc56:	beq.n	fba2 <__gethex+0x14e>
    fc58:	cmp	r2, #25
    fc5a:	ble.n	fc40 <__gethex+0x1ec>
    fc5c:	b.n	fba2 <__gethex+0x14e>
    fc5e:	ldr	r1, [pc, #292]	; (fd84 <__gethex+0x330>)
    fc60:	str	r3, [sp, #4]
    fc62:	movs	r2, #1
    fc64:	mov	r0, r4
    fc66:	bl	ef14 <strncmp>
    fc6a:	ldr	r3, [sp, #4]
    fc6c:	cmp	r0, #0
    fc6e:	bne.n	fd4c <__gethex+0x2f8>
    fc70:	ldrb	r1, [r4, #1]
    fc72:	ldrb.w	r2, [r8, r1]
    fc76:	adds	r5, r4, #1
    fc78:	cmp	r2, #0
    fc7a:	beq.n	fd50 <__gethex+0x2fc>
    fc7c:	cmp	r1, #48	; 0x30
    fc7e:	mov	r4, r5
    fc80:	bne.n	fc8e <__gethex+0x23a>
    fc82:	ldrb.w	r3, [r4, #1]!
    fc86:	cmp	r3, #48	; 0x30
    fc88:	beq.n	fc82 <__gethex+0x22e>
    fc8a:	ldrb.w	r2, [r8, r3]
    fc8e:	clz	r7, r2
    fc92:	lsrs	r7, r7, #5
    fc94:	movs	r3, #1
    fc96:	b.n	fa9e <__gethex+0x4a>
    fc98:	movs	r5, #1
    fc9a:	cbz	r7, fcb2 <__gethex+0x25e>
    fc9c:	ldr.w	r3, [sl, #12]
    fca0:	cmp	r3, #2
    fca2:	beq.n	fd60 <__gethex+0x30c>
    fca4:	cmp	r3, #3
    fca6:	beq.n	fd68 <__gethex+0x314>
    fca8:	cmp	r3, #1
    fcaa:	beq.w	fdb6 <__gethex+0x362>
    fcae:	orr.w	r5, r5, #16
    fcb2:	ldr	r3, [sp, #64]	; 0x40
    fcb4:	str.w	fp, [r3]
    fcb8:	ldr	r3, [sp, #8]
    fcba:	mov	r0, r5
    fcbc:	str.w	r9, [r3]
    fcc0:	add	sp, #20
    fcc2:	vpop	{d8}
    fcc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcca:	mov	r6, r5
    fccc:	b.n	fad4 <__gethex+0x80>
    fcce:	movs	r0, #1
    fcd0:	ldrb	r2, [r5, #2]
    fcd2:	adds	r6, r5, #2
    fcd4:	b.n	fb88 <__gethex+0x134>
    fcd6:	subs	r6, r0, r4
    fcd8:	mov	r1, r6
    fcda:	mov	r0, fp
    fcdc:	bl	10c0c <__any_on>
    fce0:	mov	r7, r0
    fce2:	cbz	r0, fd04 <__gethex+0x2b0>
    fce4:	subs	r2, r6, #1
    fce6:	asrs	r3, r2, #5
    fce8:	ldr	r1, [sp, #4]
    fcea:	movs	r7, #1
    fcec:	ldr.w	r1, [r1, r3, lsl #2]
    fcf0:	and.w	r3, r2, #31
    fcf4:	lsl.w	r3, r7, r3
    fcf8:	tst	r3, r1
    fcfa:	beq.n	fd04 <__gethex+0x2b0>
    fcfc:	cmp	r2, r7
    fcfe:	bgt.w	fec6 <__gethex+0x472>
    fd02:	movs	r7, #2
    fd04:	mov	r1, r6
    fd06:	mov	r0, fp
    fd08:	add	r9, r6
    fd0a:	bl	f9b0 <rshift>
    fd0e:	b.n	fbf0 <__gethex+0x19c>
    fd10:	add.w	r5, r9, #4294967295
    fd14:	cmp	r7, #0
    fd16:	bne.w	feb6 <__gethex+0x462>
    fd1a:	cmp	r5, #0
    fd1c:	bne.w	feba <__gethex+0x466>
    fd20:	asrs	r3, r5, #5
    fd22:	ldr	r2, [sp, #4]
    fd24:	and.w	r5, r5, #31
    fd28:	ldr.w	r2, [r2, r3, lsl #2]
    fd2c:	movs	r3, #1
    fd2e:	lsls	r3, r5
    fd30:	tst	r3, r2
    fd32:	mov	r1, r9
    fd34:	mov	r0, fp
    fd36:	it	ne
    fd38:	orrne.w	r7, r7, #2
    fd3c:	sub.w	r4, r4, r9
    fd40:	bl	f9b0 <rshift>
    fd44:	movs	r5, #2
    fd46:	ldr.w	r9, [sl, #4]
    fd4a:	b.n	fc9a <__gethex+0x246>
    fd4c:	ldrb	r1, [r4, #0]
    fd4e:	mov	r5, r4
    fd50:	and.w	r1, r1, #223	; 0xdf
    fd54:	cmp	r1, #80	; 0x50
    fd56:	beq.w	fed8 <__gethex+0x484>
    fd5a:	str.w	r5, [fp]
    fd5e:	b.n	fbb0 <__gethex+0x15c>
    fd60:	ldr	r3, [sp, #68]	; 0x44
    fd62:	rsb	r3, r3, #1
    fd66:	str	r3, [sp, #68]	; 0x44
    fd68:	ldr	r3, [sp, #68]	; 0x44
    fd6a:	cmp	r3, #0
    fd6c:	beq.n	fcae <__gethex+0x25a>
    fd6e:	ldr.w	r7, [fp, #16]
    fd72:	ldr.w	r8, [sp, #4]
    fd76:	lsls	r2, r7, #2
    fd78:	mov	r3, r8
    fd7a:	str	r2, [sp, #4]
    fd7c:	add.w	r0, r8, r7, lsl #2
    fd80:	movs	r1, #0
    fd82:	b.n	fd94 <__gethex+0x340>
    fd84:	.word	0x200009a8
    fd88:	.word	0x200006c0
    fd8c:	cmp	r0, r3
    fd8e:	str.w	r1, [r3, #-4]
    fd92:	bls.n	fe14 <__gethex+0x3c0>
    fd94:	mov	r6, r3
    fd96:	ldr.w	r2, [r3], #4
    fd9a:	cmp.w	r2, #4294967295
    fd9e:	beq.n	fd8c <__gethex+0x338>
    fda0:	adds	r2, #1
    fda2:	cmp	r5, #2
    fda4:	str	r2, [r6, #0]
    fda6:	beq.w	ff28 <__gethex+0x4d4>
    fdaa:	ands.w	r4, r4, #31
    fdae:	bne.w	ff80 <__gethex+0x52c>
    fdb2:	movs	r5, #33	; 0x21
    fdb4:	b.n	fcb2 <__gethex+0x25e>
    fdb6:	lsls	r2, r7, #30
    fdb8:	bpl.w	fcae <__gethex+0x25a>
    fdbc:	ldr	r3, [sp, #4]
    fdbe:	ldr	r3, [r3, #0]
    fdc0:	orrs	r7, r3
    fdc2:	lsls	r3, r7, #31
    fdc4:	bmi.n	fd6e <__gethex+0x31a>
    fdc6:	b.n	fcae <__gethex+0x25a>
    fdc8:	movs	r0, #0
    fdca:	b.n	fcd0 <__gethex+0x27c>
    fdcc:	subs	r2, r4, r0
    fdce:	mov	r1, fp
    fdd0:	vmov	r0, s16
    fdd4:	sub.w	r9, r9, r2
    fdd8:	bl	106c8 <__lshift>
    fddc:	add.w	r3, r0, #20
    fde0:	mov	fp, r0
    fde2:	str	r3, [sp, #4]
    fde4:	movs	r7, #0
    fde6:	b.n	fbf0 <__gethex+0x19c>
    fde8:	ldrb	r2, [r6, #1]
    fdea:	ldrb.w	r0, [r8, r2]
    fdee:	adds	r1, r6, #1
    fdf0:	cmp	r0, #0
    fdf2:	beq.w	ff36 <__gethex+0x4e2>
    fdf6:	mov	r5, r1
    fdf8:	ldrb.w	r2, [r1, #1]!
    fdfc:	ldrb.w	r0, [r8, r2]
    fe00:	cmp	r0, #0
    fe02:	bne.n	fdf6 <__gethex+0x3a2>
    fe04:	subs	r5, r6, r5
    fe06:	mov.w	r9, r5, lsl #2
    fe0a:	mov	r6, r1
    fe0c:	b.n	faca <__gethex+0x76>
    fe0e:	adds	r4, #2
    fe10:	movs	r3, #0
    fe12:	b.n	fa86 <__gethex+0x32>
    fe14:	ldr.w	r3, [fp, #8]
    fe18:	cmp	r7, r3
    fe1a:	bge.w	ff3a <__gethex+0x4e6>
    fe1e:	mov	r3, r7
    fe20:	add.w	r2, fp, r3, lsl #2
    fe24:	movs	r1, #1
    fe26:	adds	r3, #1
    fe28:	cmp	r5, #2
    fe2a:	str.w	r3, [fp, #16]
    fe2e:	str	r1, [r2, #20]
    fe30:	beq.n	ff28 <__gethex+0x4d4>
    fe32:	cmp	r7, r3
    fe34:	bge.n	fdaa <__gethex+0x356>
    fe36:	cmp	r3, #0
    fe38:	ble.w	ff72 <__gethex+0x51e>
    fe3c:	ldr.w	r2, [fp, #20]
    fe40:	add.w	r3, r8, r3, lsl #2
    fe44:	add.w	r0, fp, #24
    fe48:	cmp	r3, r0
    fe4a:	mov.w	r2, r2, lsr #1
    fe4e:	bls.w	ffb4 <__gethex+0x560>
    fe52:	mov	r4, r8
    fe54:	ldr	r1, [r0, #0]
    fe56:	orr.w	r2, r2, r1, lsl #31
    fe5a:	str.w	r2, [r4], #4
    fe5e:	ldr.w	r2, [r0], #4
    fe62:	cmp	r3, r0
    fe64:	mov.w	r2, r2, lsr #1
    fe68:	bhi.n	fe54 <__gethex+0x400>
    fe6a:	sub.w	r3, r3, fp
    fe6e:	subs	r3, #25
    fe70:	lsrs	r3, r3, #2
    fe72:	adds	r3, #1
    fe74:	str.w	r2, [r8, r3, lsl #2]
    fe78:	add.w	r3, r8, r3, lsl #2
    fe7c:	cmp	r2, #0
    fe7e:	bne.w	ffbc <__gethex+0x568>
    fe82:	sub.w	r2, r3, r8
    fe86:	asrs	r2, r2, #2
    fe88:	cmp	r3, r8
    fe8a:	str.w	r2, [fp, #16]
    fe8e:	beq.n	ff78 <__gethex+0x524>
    fe90:	ldr.w	r3, [sl, #8]
    fe94:	add.w	r9, r9, #1
    fe98:	cmp	r3, r9
    fe9a:	bge.n	fdb2 <__gethex+0x35e>
    fe9c:	vmov	r0, s16
    fea0:	mov	r1, fp
    fea2:	bl	10248 <_Bfree>
    fea6:	ldr	r2, [sp, #64]	; 0x40
    fea8:	movs	r3, #0
    feaa:	str	r3, [r2, #0]
    feac:	movs	r5, #163	; 0xa3
    feae:	b.n	fbb8 <__gethex+0x164>
    feb0:	ldr	r6, [sp, #4]
    feb2:	movs	r3, #0
    feb4:	b.n	fbca <__gethex+0x176>
    feb6:	movs	r7, #1
    feb8:	b.n	fd20 <__gethex+0x2cc>
    feba:	mov	r1, r5
    febc:	mov	r0, fp
    febe:	bl	10c0c <__any_on>
    fec2:	mov	r7, r0
    fec4:	b.n	fd20 <__gethex+0x2cc>
    fec6:	subs	r1, r6, #2
    fec8:	mov	r0, fp
    feca:	bl	10c0c <__any_on>
    fece:	cmp	r0, #0
    fed0:	beq.w	fd02 <__gethex+0x2ae>
    fed4:	movs	r7, #3
    fed6:	b.n	fd04 <__gethex+0x2b0>
    fed8:	mov.w	r9, #0
    fedc:	movs	r7, #1
    fede:	b.n	fb76 <__gethex+0x122>
    fee0:	ldr	r2, [sp, #68]	; 0x44
    fee2:	cmp	r2, #0
    fee4:	bne.w	fc22 <__gethex+0x1ce>
    fee8:	ldr	r1, [sp, #8]
    feea:	str	r3, [r1, #0]
    feec:	ldr	r3, [sp, #4]
    feee:	movs	r2, #1
    fef0:	str.w	r2, [fp, #16]
    fef4:	str	r2, [r3, #0]
    fef6:	ldr	r3, [sp, #64]	; 0x40
    fef8:	movs	r5, #98	; 0x62
    fefa:	str.w	fp, [r3]
    fefe:	b.n	fbb8 <__gethex+0x164>
    ff00:	cmp	r4, r9
    ff02:	bne.w	fc22 <__gethex+0x1ce>
    ff06:	cmp	r4, #1
    ff08:	beq.n	fee8 <__gethex+0x494>
    ff0a:	subs	r1, r4, #1
    ff0c:	mov	r0, fp
    ff0e:	bl	10c0c <__any_on>
    ff12:	cmp	r0, #0
    ff14:	beq.w	fc22 <__gethex+0x1ce>
    ff18:	ldr.w	r3, [sl, #4]
    ff1c:	b.n	fee8 <__gethex+0x494>
    ff1e:	ldr	r2, [sp, #68]	; 0x44
    ff20:	cmp	r2, #0
    ff22:	beq.w	fc22 <__gethex+0x1ce>
    ff26:	b.n	fee8 <__gethex+0x494>
    ff28:	ldr.w	r3, [sl]
    ff2c:	subs	r3, #1
    ff2e:	cmp	r3, r4
    ff30:	beq.n	ff9c <__gethex+0x548>
    ff32:	movs	r5, #34	; 0x22
    ff34:	b.n	fcb2 <__gethex+0x25e>
    ff36:	mov	r6, r1
    ff38:	b.n	faca <__gethex+0x76>
    ff3a:	ldr.w	r1, [fp, #4]
    ff3e:	vmov	r0, s16
    ff42:	adds	r1, #1
    ff44:	bl	101fc <_Balloc>
    ff48:	mov	r6, r0
    ff4a:	cbz	r0, ffc0 <__gethex+0x56c>
    ff4c:	ldr.w	r3, [fp, #16]
    ff50:	adds	r3, #2
    ff52:	lsls	r2, r3, #2
    ff54:	add.w	r1, fp, #12
    ff58:	adds	r0, #12
    ff5a:	bl	a56c <memcpy>
    ff5e:	mov	r1, fp
    ff60:	vmov	r0, s16
    ff64:	bl	10248 <_Bfree>
    ff68:	add.w	r8, r6, #20
    ff6c:	ldr	r3, [r6, #16]
    ff6e:	mov	fp, r6
    ff70:	b.n	fe20 <__gethex+0x3cc>
    ff72:	movs	r3, #0
    ff74:	str.w	r3, [fp, #16]
    ff78:	movs	r3, #0
    ff7a:	str.w	r3, [fp, #20]
    ff7e:	b.n	fe90 <__gethex+0x43c>
    ff80:	ldr	r3, [sp, #4]
    ff82:	add	r3, r8
    ff84:	rsb	r4, r4, #32
    ff88:	ldr.w	r0, [r3, #-4]
    ff8c:	bl	103b0 <__hi0bits>
    ff90:	cmp	r0, r4
    ff92:	bge.w	fdb2 <__gethex+0x35e>
    ff96:	ldr.w	r3, [fp, #16]
    ff9a:	b.n	fe36 <__gethex+0x3e2>
    ff9c:	asrs	r3, r4, #5
    ff9e:	and.w	r4, r4, #31
    ffa2:	ldr.w	r2, [r8, r3, lsl #2]
    ffa6:	movs	r3, #1
    ffa8:	lsls	r3, r4
    ffaa:	tst	r3, r2
    ffac:	ite	eq
    ffae:	moveq	r5, #34	; 0x22
    ffb0:	movne	r5, #33	; 0x21
    ffb2:	b.n	fcb2 <__gethex+0x25e>
    ffb4:	str.w	r2, [r8]
    ffb8:	mov	r3, r8
    ffba:	cbz	r2, ffd8 <__gethex+0x584>
    ffbc:	adds	r3, #4
    ffbe:	b.n	fe82 <__gethex+0x42e>
    ffc0:	ldr	r3, [pc, #28]	; (ffe0 <__gethex+0x58c>)
    ffc2:	ldr	r0, [pc, #32]	; (ffe4 <__gethex+0x590>)
    ffc4:	mov	r2, r6
    ffc6:	movs	r1, #132	; 0x84
    ffc8:	bl	14480 <__assert_func>
    ffcc:	ldr	r3, [pc, #16]	; (ffe0 <__gethex+0x58c>)
    ffce:	ldr	r0, [pc, #20]	; (ffe4 <__gethex+0x590>)
    ffd0:	mov	r2, fp
    ffd2:	movs	r1, #228	; 0xe4
    ffd4:	bl	14480 <__assert_func>
    ffd8:	str.w	r2, [fp, #16]
    ffdc:	b.n	ff78 <__gethex+0x524>
    ffde:	nop
    ffe0:	.word	0x20000648
    ffe4:	.word	0x2000065c

0000ffe8 <__match>:
    ffe8:	push	{r4}
    ffea:	ldr	r4, [r0, #0]
    ffec:	b.n	10002 <__match+0x1a>
    ffee:	ldrb.w	r3, [r4, #1]!
    fff2:	sub.w	ip, r3, #65	; 0x41
    fff6:	cmp.w	ip, #25
    fffa:	it	ls
    fffc:	addls	r3, #32
    fffe:	cmp	r3, r2
   10000:	bne.n	10016 <__match+0x2e>
   10002:	ldrb.w	r2, [r1], #1
   10006:	cmp	r2, #0
   10008:	bne.n	ffee <__match+0x6>
   1000a:	adds	r4, #1
   1000c:	str	r4, [r0, #0]
   1000e:	movs	r0, #1
   10010:	ldr.w	r4, [sp], #4
   10014:	bx	lr
   10016:	movs	r0, #0
   10018:	ldr.w	r4, [sp], #4
   1001c:	bx	lr
   1001e:	nop

00010020 <__hexnan>:
   10020:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10024:	ldr	r1, [r1, #0]
   10026:	sub	sp, #20
   10028:	asrs	r3, r1, #5
   1002a:	ands.w	r1, r1, #31
   1002e:	str	r0, [sp, #8]
   10030:	add.w	r3, r2, r3, lsl #2
   10034:	str	r1, [sp, #12]
   10036:	bne.w	10158 <__hexnan+0x138>
   1003a:	subs	r5, r3, #4
   1003c:	str	r3, [sp, #4]
   1003e:	ldr	r3, [sp, #8]
   10040:	ldr	r1, [sp, #4]
   10042:	ldr	r4, [r3, #0]
   10044:	movs	r3, #0
   10046:	str.w	r3, [r1, #-4]
   1004a:	ldrb	r1, [r4, #1]
   1004c:	adds	r4, #1
   1004e:	cmp	r1, #0
   10050:	beq.w	10184 <__hexnan+0x164>
   10054:	ldr.w	r9, [pc, #372]	; 101cc <__hexnan+0x1ac>
   10058:	mov	r8, r5
   1005a:	mov	ip, r5
   1005c:	mov	sl, r3
   1005e:	mov	r6, r3
   10060:	b.n	10080 <__hexnan+0x60>
   10062:	cmp	r1, #32
   10064:	bhi.w	10180 <__hexnan+0x160>
   10068:	cmp	r6, sl
   1006a:	ble.n	1007a <__hexnan+0x5a>
   1006c:	cmp	ip, r8
   1006e:	bcs.n	10074 <__hexnan+0x54>
   10070:	cmp	r3, #7
   10072:	ble.n	1012c <__hexnan+0x10c>
   10074:	cmp	r2, ip
   10076:	bcc.n	1011c <__hexnan+0xfc>
   10078:	movs	r3, #8
   1007a:	ldrb.w	r1, [r4, #1]!
   1007e:	cbz	r1, 100aa <__hexnan+0x8a>
   10080:	ldrb.w	r0, [r9, r1]
   10084:	cmp	r0, #0
   10086:	beq.n	10062 <__hexnan+0x42>
   10088:	adds	r3, #1
   1008a:	cmp	r3, #8
   1008c:	add.w	r6, r6, #1
   10090:	bgt.n	10108 <__hexnan+0xe8>
   10092:	ldr.w	r1, [ip]
   10096:	lsls	r1, r1, #4
   10098:	and.w	r0, r0, #15
   1009c:	orrs	r0, r1
   1009e:	str.w	r0, [ip]
   100a2:	ldrb.w	r1, [r4, #1]!
   100a6:	cmp	r1, #0
   100a8:	bne.n	10080 <__hexnan+0x60>
   100aa:	cmp	r6, #0
   100ac:	beq.n	10184 <__hexnan+0x164>
   100ae:	cmp	ip, r8
   100b0:	bcs.n	100b6 <__hexnan+0x96>
   100b2:	cmp	r3, #7
   100b4:	ble.n	101a0 <__hexnan+0x180>
   100b6:	cmp	r2, ip
   100b8:	bcs.n	10160 <__hexnan+0x140>
   100ba:	subs	r1, r2, #4
   100bc:	mov	r3, ip
   100be:	ldr.w	r0, [r3], #4
   100c2:	str.w	r0, [r1, #4]!
   100c6:	cmp	r3, r5
   100c8:	bls.n	100be <__hexnan+0x9e>
   100ca:	sub.w	r3, r5, ip
   100ce:	bic.w	r3, r3, #3
   100d2:	adds	r1, r5, #1
   100d4:	adds	r3, #4
   100d6:	add.w	ip, ip, #1
   100da:	cmp	r1, ip
   100dc:	it	cc
   100de:	movcc	r3, #4
   100e0:	add	r3, r2
   100e2:	movs	r1, #0
   100e4:	str.w	r1, [r3], #4
   100e8:	cmp	r3, r5
   100ea:	bls.n	100e4 <__hexnan+0xc4>
   100ec:	ldr	r3, [sp, #4]
   100ee:	ldr.w	r3, [r3, #-4]
   100f2:	cbnz	r3, 10100 <__hexnan+0xe0>
   100f4:	cmp	r2, r5
   100f6:	beq.n	1018c <__hexnan+0x16c>
   100f8:	ldr.w	r3, [r5, #-4]!
   100fc:	cmp	r3, #0
   100fe:	beq.n	100f4 <__hexnan+0xd4>
   10100:	movs	r0, #5
   10102:	add	sp, #20
   10104:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10108:	cmp	r2, ip
   1010a:	bcs.n	1007a <__hexnan+0x5a>
   1010c:	movs	r3, #0
   1010e:	str.w	r3, [ip, #-4]
   10112:	mov	r1, r3
   10114:	sub.w	ip, ip, #4
   10118:	movs	r3, #1
   1011a:	b.n	10098 <__hexnan+0x78>
   1011c:	movs	r3, #0
   1011e:	sub.w	r8, ip, #4
   10122:	str.w	r3, [ip, #-4]
   10126:	mov	sl, r6
   10128:	mov	ip, r8
   1012a:	b.n	1007a <__hexnan+0x5a>
   1012c:	rsb	r1, r3, #8
   10130:	ldr.w	r3, [ip]
   10134:	lsls	r1, r1, #2
   10136:	rsb	lr, r1, #32
   1013a:	mov	r0, ip
   1013c:	mov	fp, r3
   1013e:	ldr	r7, [r0, #4]
   10140:	lsl.w	r3, r7, lr
   10144:	orr.w	r3, r3, fp
   10148:	lsr.w	fp, r7, r1
   1014c:	str	r3, [r0, #0]
   1014e:	str.w	fp, [r0, #4]!
   10152:	cmp	r0, r8
   10154:	bcc.n	1013e <__hexnan+0x11e>
   10156:	b.n	10074 <__hexnan+0x54>
   10158:	adds	r1, r3, #4
   1015a:	str	r1, [sp, #4]
   1015c:	mov	r5, r3
   1015e:	b.n	1003e <__hexnan+0x1e>
   10160:	ldr	r3, [sp, #12]
   10162:	cmp	r3, #0
   10164:	beq.n	100ec <__hexnan+0xcc>
   10166:	ldr	r3, [sp, #12]
   10168:	ldr	r0, [sp, #4]
   1016a:	rsb	r1, r3, #32
   1016e:	mov.w	r3, #4294967295
   10172:	lsrs	r3, r1
   10174:	ldr.w	r1, [r0, #-4]
   10178:	ands	r3, r1
   1017a:	str.w	r3, [r0, #-4]
   1017e:	b.n	100f2 <__hexnan+0xd2>
   10180:	cmp	r1, #41	; 0x29
   10182:	beq.n	10198 <__hexnan+0x178>
   10184:	movs	r0, #4
   10186:	add	sp, #20
   10188:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1018c:	movs	r3, #1
   1018e:	movs	r0, #5
   10190:	str	r3, [r5, #0]
   10192:	add	sp, #20
   10194:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10198:	ldr	r1, [sp, #8]
   1019a:	adds	r4, #1
   1019c:	str	r4, [r1, #0]
   1019e:	b.n	100aa <__hexnan+0x8a>
   101a0:	ldr.w	r1, [ip]
   101a4:	rsb	r3, r3, #8
   101a8:	lsls	r3, r3, #2
   101aa:	rsb	r7, r3, #32
   101ae:	mov	r4, ip
   101b0:	mov	r0, r1
   101b2:	ldr	r6, [r4, #4]
   101b4:	lsl.w	r1, r6, r7
   101b8:	orrs	r1, r0
   101ba:	lsr.w	r0, r6, r3
   101be:	str	r1, [r4, #0]
   101c0:	str.w	r0, [r4, #4]!
   101c4:	cmp	r4, r8
   101c6:	bcc.n	101b2 <__hexnan+0x192>
   101c8:	b.n	100b6 <__hexnan+0x96>
   101ca:	nop
   101cc:	.word	0x200006c0

000101d0 <__ascii_mbtowc>:
   101d0:	sub	sp, #8
   101d2:	cbz	r1, 101e8 <__ascii_mbtowc+0x18>
   101d4:	cbz	r2, 101ee <__ascii_mbtowc+0x1e>
   101d6:	cbz	r3, 101f4 <__ascii_mbtowc+0x24>
   101d8:	ldrb	r3, [r2, #0]
   101da:	str	r3, [r1, #0]
   101dc:	ldrb	r2, [r2, #0]
   101de:	subs	r0, r2, #0
   101e0:	it	ne
   101e2:	movne	r0, #1
   101e4:	add	sp, #8
   101e6:	bx	lr
   101e8:	add	r1, sp, #4
   101ea:	cmp	r2, #0
   101ec:	bne.n	101d6 <__ascii_mbtowc+0x6>
   101ee:	mov	r0, r2
   101f0:	add	sp, #8
   101f2:	bx	lr
   101f4:	mvn.w	r0, #1
   101f8:	b.n	101e4 <__ascii_mbtowc+0x14>
   101fa:	nop

000101fc <_Balloc>:
   101fc:	ldr	r3, [r0, #68]	; 0x44
   101fe:	push	{r4, r5, r6, lr}
   10200:	mov	r5, r0
   10202:	mov	r4, r1
   10204:	cbz	r3, 1021a <_Balloc+0x1e>
   10206:	ldr.w	r0, [r3, r4, lsl #2]
   1020a:	cbz	r0, 1022e <_Balloc+0x32>
   1020c:	ldr	r2, [r0, #0]
   1020e:	str.w	r2, [r3, r4, lsl #2]
   10212:	movs	r3, #0
   10214:	strd	r3, r3, [r0, #12]
   10218:	pop	{r4, r5, r6, pc}
   1021a:	movs	r2, #33	; 0x21
   1021c:	movs	r1, #4
   1021e:	bl	144c0 <_calloc_r>
   10222:	mov	r3, r0
   10224:	str	r0, [r5, #68]	; 0x44
   10226:	cmp	r0, #0
   10228:	bne.n	10206 <_Balloc+0xa>
   1022a:	movs	r0, #0
   1022c:	pop	{r4, r5, r6, pc}
   1022e:	movs	r1, #1
   10230:	lsl.w	r6, r1, r4
   10234:	adds	r2, r6, #5
   10236:	lsls	r2, r2, #2
   10238:	mov	r0, r5
   1023a:	bl	144c0 <_calloc_r>
   1023e:	cmp	r0, #0
   10240:	beq.n	1022a <_Balloc+0x2e>
   10242:	strd	r4, r6, [r0, #4]
   10246:	b.n	10212 <_Balloc+0x16>

00010248 <_Bfree>:
   10248:	cbz	r1, 10258 <_Bfree+0x10>
   1024a:	ldr	r3, [r0, #68]	; 0x44
   1024c:	ldr	r2, [r1, #4]
   1024e:	ldr.w	r0, [r3, r2, lsl #2]
   10252:	str	r0, [r1, #0]
   10254:	str.w	r1, [r3, r2, lsl #2]
   10258:	bx	lr
   1025a:	nop

0001025c <__multadd>:
   1025c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10260:	ldr	r6, [r1, #16]
   10262:	mov	r8, r0
   10264:	mov	r7, r1
   10266:	mov	r5, r3
   10268:	add.w	lr, r1, #20
   1026c:	movs	r0, #0
   1026e:	ldr.w	r1, [lr]
   10272:	uxth	r4, r1
   10274:	mla	r3, r2, r4, r5
   10278:	lsrs	r1, r1, #16
   1027a:	mov.w	ip, r3, lsr #16
   1027e:	mla	ip, r2, r1, ip
   10282:	adds	r0, #1
   10284:	uxth	r4, r3
   10286:	add.w	r4, r4, ip, lsl #16
   1028a:	cmp	r6, r0
   1028c:	str.w	r4, [lr], #4
   10290:	mov.w	r5, ip, lsr #16
   10294:	bgt.n	1026e <__multadd+0x12>
   10296:	cbz	r5, 102a8 <__multadd+0x4c>
   10298:	ldr	r3, [r7, #8]
   1029a:	cmp	r3, r6
   1029c:	ble.n	102ae <__multadd+0x52>
   1029e:	add.w	r3, r7, r6, lsl #2
   102a2:	adds	r6, #1
   102a4:	str	r5, [r3, #20]
   102a6:	str	r6, [r7, #16]
   102a8:	mov	r0, r7
   102aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102ae:	ldr	r1, [r7, #4]
   102b0:	mov	r0, r8
   102b2:	adds	r1, #1
   102b4:	bl	101fc <_Balloc>
   102b8:	mov	r4, r0
   102ba:	cbz	r0, 102ea <__multadd+0x8e>
   102bc:	ldr	r2, [r7, #16]
   102be:	adds	r2, #2
   102c0:	add.w	r1, r7, #12
   102c4:	lsls	r2, r2, #2
   102c6:	adds	r0, #12
   102c8:	bl	a56c <memcpy>
   102cc:	ldr.w	r3, [r8, #68]	; 0x44
   102d0:	ldr	r2, [r7, #4]
   102d2:	ldr.w	r1, [r3, r2, lsl #2]
   102d6:	str	r1, [r7, #0]
   102d8:	str.w	r7, [r3, r2, lsl #2]
   102dc:	mov	r7, r4
   102de:	add.w	r3, r7, r6, lsl #2
   102e2:	adds	r6, #1
   102e4:	str	r5, [r3, #20]
   102e6:	str	r6, [r7, #16]
   102e8:	b.n	102a8 <__multadd+0x4c>
   102ea:	ldr	r3, [pc, #12]	; (102f8 <__multadd+0x9c>)
   102ec:	ldr	r0, [pc, #12]	; (102fc <__multadd+0xa0>)
   102ee:	mov	r2, r4
   102f0:	movs	r1, #186	; 0xba
   102f2:	bl	14480 <__assert_func>
   102f6:	nop
   102f8:	.word	0x20000648
   102fc:	.word	0x200007c0

00010300 <__s2b>:
   10300:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10304:	mov	r7, r2
   10306:	ldr	r2, [pc, #156]	; (103a4 <__s2b+0xa4>)
   10308:	mov	r6, r3
   1030a:	adds	r3, #8
   1030c:	mov	r4, r1
   1030e:	cmp	r6, #9
   10310:	smull	r1, r2, r2, r3
   10314:	mov.w	r3, r3, asr #31
   10318:	mov	r5, r0
   1031a:	rsb	r3, r3, r2, asr #1
   1031e:	ble.n	10394 <__s2b+0x94>
   10320:	mov.w	ip, #1
   10324:	movs	r1, #0
   10326:	mov.w	ip, ip, lsl #1
   1032a:	cmp	r3, ip
   1032c:	add.w	r1, r1, #1
   10330:	bgt.n	10326 <__s2b+0x26>
   10332:	mov	r0, r5
   10334:	bl	101fc <_Balloc>
   10338:	mov	r1, r0
   1033a:	cbz	r0, 10398 <__s2b+0x98>
   1033c:	ldr	r3, [sp, #32]
   1033e:	str	r3, [r0, #20]
   10340:	cmp	r7, #9
   10342:	mov.w	r3, #1
   10346:	str	r3, [r0, #16]
   10348:	bgt.n	10370 <__s2b+0x70>
   1034a:	adds	r4, #10
   1034c:	movs	r7, #9
   1034e:	cmp	r6, r7
   10350:	ble.n	1036a <__s2b+0x6a>
   10352:	subs	r2, r6, r7
   10354:	adds	r6, r4, r2
   10356:	ldrb.w	r3, [r4], #1
   1035a:	movs	r2, #10
   1035c:	subs	r3, #48	; 0x30
   1035e:	mov	r0, r5
   10360:	bl	1025c <__multadd>
   10364:	cmp	r6, r4
   10366:	mov	r1, r0
   10368:	bne.n	10356 <__s2b+0x56>
   1036a:	mov	r0, r1
   1036c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10370:	add.w	r9, r4, #9
   10374:	mov	r8, r9
   10376:	add	r4, r7
   10378:	ldrb.w	r3, [r8], #1
   1037c:	movs	r2, #10
   1037e:	subs	r3, #48	; 0x30
   10380:	mov	r0, r5
   10382:	bl	1025c <__multadd>
   10386:	cmp	r8, r4
   10388:	mov	r1, r0
   1038a:	bne.n	10378 <__s2b+0x78>
   1038c:	sub.w	r4, r7, #8
   10390:	add	r4, r9
   10392:	b.n	1034e <__s2b+0x4e>
   10394:	movs	r1, #0
   10396:	b.n	10332 <__s2b+0x32>
   10398:	mov	r2, r1
   1039a:	ldr	r3, [pc, #12]	; (103a8 <__s2b+0xa8>)
   1039c:	ldr	r0, [pc, #12]	; (103ac <__s2b+0xac>)
   1039e:	movs	r1, #211	; 0xd3
   103a0:	bl	14480 <__assert_func>
   103a4:	.word	0x38e38e39
   103a8:	.word	0x20000648
   103ac:	.word	0x200007c0

000103b0 <__hi0bits>:
   103b0:	lsrs	r3, r0, #16
   103b2:	lsls	r3, r3, #16
   103b4:	cbnz	r3, 103ec <__hi0bits+0x3c>
   103b6:	lsls	r0, r0, #16
   103b8:	movs	r3, #16
   103ba:	tst.w	r0, #4278190080	; 0xff000000
   103be:	itt	eq
   103c0:	lsleq	r0, r0, #8
   103c2:	addeq	r3, #8
   103c4:	tst.w	r0, #4026531840	; 0xf0000000
   103c8:	itt	eq
   103ca:	lsleq	r0, r0, #4
   103cc:	addeq	r3, #4
   103ce:	tst.w	r0, #3221225472	; 0xc0000000
   103d2:	itt	eq
   103d4:	lsleq	r0, r0, #2
   103d6:	addeq	r3, #2
   103d8:	cmp	r0, #0
   103da:	blt.n	103e8 <__hi0bits+0x38>
   103dc:	tst.w	r0, #1073741824	; 0x40000000
   103e0:	add.w	r3, r3, #1
   103e4:	it	eq
   103e6:	moveq	r3, #32
   103e8:	mov	r0, r3
   103ea:	bx	lr
   103ec:	movs	r3, #0
   103ee:	b.n	103ba <__hi0bits+0xa>

000103f0 <__lo0bits>:
   103f0:	ldr	r3, [r0, #0]
   103f2:	ands.w	r2, r3, #7
   103f6:	beq.n	1040a <__lo0bits+0x1a>
   103f8:	lsls	r1, r3, #31
   103fa:	bmi.n	1043c <__lo0bits+0x4c>
   103fc:	lsls	r2, r3, #30
   103fe:	bpl.n	10446 <__lo0bits+0x56>
   10400:	lsrs	r3, r3, #1
   10402:	str	r3, [r0, #0]
   10404:	movs	r2, #1
   10406:	mov	r0, r2
   10408:	bx	lr
   1040a:	uxth	r1, r3
   1040c:	cbnz	r1, 10412 <__lo0bits+0x22>
   1040e:	lsrs	r3, r3, #16
   10410:	movs	r2, #16
   10412:	uxtb	r1, r3
   10414:	cbnz	r1, 1041a <__lo0bits+0x2a>
   10416:	adds	r2, #8
   10418:	lsrs	r3, r3, #8
   1041a:	lsls	r1, r3, #28
   1041c:	itt	eq
   1041e:	lsreq	r3, r3, #4
   10420:	addeq	r2, #4
   10422:	lsls	r1, r3, #30
   10424:	itt	eq
   10426:	lsreq	r3, r3, #2
   10428:	addeq	r2, #2
   1042a:	lsls	r1, r3, #31
   1042c:	bmi.n	10436 <__lo0bits+0x46>
   1042e:	lsrs	r3, r3, #1
   10430:	add.w	r2, r2, #1
   10434:	beq.n	10442 <__lo0bits+0x52>
   10436:	str	r3, [r0, #0]
   10438:	mov	r0, r2
   1043a:	bx	lr
   1043c:	movs	r2, #0
   1043e:	mov	r0, r2
   10440:	bx	lr
   10442:	movs	r2, #32
   10444:	b.n	10406 <__lo0bits+0x16>
   10446:	lsrs	r3, r3, #2
   10448:	movs	r2, #2
   1044a:	str	r3, [r0, #0]
   1044c:	mov	r0, r2
   1044e:	bx	lr

00010450 <__i2b>:
   10450:	push	{r3, r4, r5, lr}
   10452:	ldr	r3, [r0, #68]	; 0x44
   10454:	mov	r4, r0
   10456:	mov	r5, r1
   10458:	cbz	r3, 1046e <__i2b+0x1e>
   1045a:	ldr	r0, [r3, #4]
   1045c:	cbz	r0, 1048c <__i2b+0x3c>
   1045e:	ldr	r2, [r0, #0]
   10460:	str	r2, [r3, #4]
   10462:	movs	r2, #0
   10464:	movs	r3, #1
   10466:	strd	r3, r5, [r0, #16]
   1046a:	str	r2, [r0, #12]
   1046c:	pop	{r3, r4, r5, pc}
   1046e:	movs	r2, #33	; 0x21
   10470:	movs	r1, #4
   10472:	bl	144c0 <_calloc_r>
   10476:	mov	r3, r0
   10478:	str	r0, [r4, #68]	; 0x44
   1047a:	cmp	r0, #0
   1047c:	bne.n	1045a <__i2b+0xa>
   1047e:	ldr	r3, [pc, #36]	; (104a4 <__i2b+0x54>)
   10480:	ldr	r0, [pc, #36]	; (104a8 <__i2b+0x58>)
   10482:	movs	r2, #0
   10484:	movw	r1, #325	; 0x145
   10488:	bl	14480 <__assert_func>
   1048c:	movs	r2, #28
   1048e:	movs	r1, #1
   10490:	mov	r0, r4
   10492:	bl	144c0 <_calloc_r>
   10496:	cmp	r0, #0
   10498:	beq.n	1047e <__i2b+0x2e>
   1049a:	movs	r2, #1
   1049c:	movs	r3, #2
   1049e:	strd	r2, r3, [r0, #4]
   104a2:	b.n	10462 <__i2b+0x12>
   104a4:	.word	0x20000648
   104a8:	.word	0x200007c0

000104ac <__multiply>:
   104ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104b0:	ldr	r6, [r1, #16]
   104b2:	ldr	r5, [r2, #16]
   104b4:	cmp	r6, r5
   104b6:	sub	sp, #20
   104b8:	mov	r8, r1
   104ba:	mov	r4, r2
   104bc:	blt.n	104ca <__multiply+0x1e>
   104be:	mov	r2, r5
   104c0:	mov	r3, r4
   104c2:	mov	r5, r6
   104c4:	mov	r4, r1
   104c6:	mov	r6, r2
   104c8:	mov	r8, r3
   104ca:	ldr	r3, [r4, #8]
   104cc:	ldr	r1, [r4, #4]
   104ce:	adds	r7, r5, r6
   104d0:	cmp	r3, r7
   104d2:	it	lt
   104d4:	addlt	r1, #1
   104d6:	bl	101fc <_Balloc>
   104da:	str	r0, [sp, #4]
   104dc:	cmp	r0, #0
   104de:	beq.w	105f0 <__multiply+0x144>
   104e2:	ldr	r3, [sp, #4]
   104e4:	add.w	r9, r3, #20
   104e8:	add.w	sl, r9, r7, lsl #2
   104ec:	cmp	r9, sl
   104ee:	bcs.n	104fc <__multiply+0x50>
   104f0:	mov	r3, r9
   104f2:	movs	r2, #0
   104f4:	str.w	r2, [r3], #4
   104f8:	cmp	sl, r3
   104fa:	bhi.n	104f4 <__multiply+0x48>
   104fc:	add.w	r8, r8, #20
   10500:	add.w	fp, r8, r6, lsl #2
   10504:	add.w	r3, r4, #20
   10508:	cmp	r8, fp
   1050a:	mov	r2, r3
   1050c:	add.w	r5, r3, r5, lsl #2
   10510:	bcs.n	105d2 <__multiply+0x126>
   10512:	subs	r3, r5, r4
   10514:	subs	r3, #21
   10516:	bic.w	r3, r3, #3
   1051a:	adds	r3, #4
   1051c:	adds	r4, #21
   1051e:	cmp	r5, r4
   10520:	it	cc
   10522:	movcc	r3, #4
   10524:	strd	sl, r7, [sp, #8]
   10528:	mov	ip, r5
   1052a:	mov	r7, r3
   1052c:	mov	sl, r2
   1052e:	b.n	1053c <__multiply+0x90>
   10530:	lsrs	r1, r1, #16
   10532:	bne.n	10588 <__multiply+0xdc>
   10534:	cmp	fp, r8
   10536:	add.w	r9, r9, #4
   1053a:	bls.n	105ce <__multiply+0x122>
   1053c:	ldr.w	r1, [r8], #4
   10540:	uxth	r5, r1
   10542:	cmp	r5, #0
   10544:	beq.n	10530 <__multiply+0x84>
   10546:	mov	r6, sl
   10548:	mov	r4, r9
   1054a:	movs	r3, #0
   1054c:	ldr.w	r1, [r6], #4
   10550:	ldr	r2, [r4, #0]
   10552:	uxth.w	lr, r1
   10556:	uxth	r0, r2
   10558:	lsrs	r1, r1, #16
   1055a:	mla	r0, r5, lr, r0
   1055e:	lsrs	r2, r2, #16
   10560:	add	r3, r0
   10562:	mla	r2, r5, r1, r2
   10566:	add.w	r2, r2, r3, lsr #16
   1056a:	uxth	r3, r3
   1056c:	orr.w	r3, r3, r2, lsl #16
   10570:	cmp	ip, r6
   10572:	str.w	r3, [r4], #4
   10576:	mov.w	r3, r2, lsr #16
   1057a:	bhi.n	1054c <__multiply+0xa0>
   1057c:	str.w	r3, [r9, r7]
   10580:	ldr.w	r1, [r8, #-4]
   10584:	lsrs	r1, r1, #16
   10586:	beq.n	10534 <__multiply+0x88>
   10588:	ldr.w	r3, [r9]
   1058c:	mov	r0, sl
   1058e:	mov	r2, r3
   10590:	mov	r4, r9
   10592:	movs	r6, #0
   10594:	ldrh	r5, [r0, #0]
   10596:	lsrs	r2, r2, #16
   10598:	mla	r2, r1, r5, r2
   1059c:	add	r6, r2
   1059e:	uxth	r3, r3
   105a0:	orr.w	r3, r3, r6, lsl #16
   105a4:	str.w	r3, [r4], #4
   105a8:	ldr.w	r5, [r0], #4
   105ac:	ldr	r2, [r4, #0]
   105ae:	lsrs	r5, r5, #16
   105b0:	uxth	r3, r2
   105b2:	mla	r3, r1, r5, r3
   105b6:	add.w	r3, r3, r6, lsr #16
   105ba:	cmp	ip, r0
   105bc:	mov.w	r6, r3, lsr #16
   105c0:	bhi.n	10594 <__multiply+0xe8>
   105c2:	cmp	fp, r8
   105c4:	str.w	r3, [r9, r7]
   105c8:	add.w	r9, r9, #4
   105cc:	bhi.n	1053c <__multiply+0x90>
   105ce:	ldrd	sl, r7, [sp, #8]
   105d2:	cmp	r7, #0
   105d4:	bgt.n	105dc <__multiply+0x130>
   105d6:	b.n	105e4 <__multiply+0x138>
   105d8:	subs	r7, #1
   105da:	beq.n	105e4 <__multiply+0x138>
   105dc:	ldr.w	r3, [sl, #-4]!
   105e0:	cmp	r3, #0
   105e2:	beq.n	105d8 <__multiply+0x12c>
   105e4:	ldr	r3, [sp, #4]
   105e6:	mov	r0, r3
   105e8:	str	r7, [r3, #16]
   105ea:	add	sp, #20
   105ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105f0:	ldr	r3, [pc, #12]	; (10600 <__multiply+0x154>)
   105f2:	ldr	r0, [pc, #16]	; (10604 <__multiply+0x158>)
   105f4:	ldr	r2, [sp, #4]
   105f6:	mov.w	r1, #354	; 0x162
   105fa:	bl	14480 <__assert_func>
   105fe:	nop
   10600:	.word	0x20000648
   10604:	.word	0x200007c0

00010608 <__pow5mult>:
   10608:	ands.w	r3, r2, #3
   1060c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10610:	mov	r4, r2
   10612:	mov	r6, r0
   10614:	bne.n	1067c <__pow5mult+0x74>
   10616:	mov	r5, r1
   10618:	asrs	r4, r4, #2
   1061a:	beq.n	1065e <__pow5mult+0x56>
   1061c:	ldr.w	r8, [r6, #64]	; 0x40
   10620:	cmp.w	r8, #0
   10624:	beq.n	1068e <__pow5mult+0x86>
   10626:	lsls	r3, r4, #31
   10628:	mov.w	r7, #0
   1062c:	bmi.n	1063e <__pow5mult+0x36>
   1062e:	asrs	r4, r4, #1
   10630:	beq.n	1065e <__pow5mult+0x56>
   10632:	ldr.w	r0, [r8]
   10636:	cbz	r0, 10664 <__pow5mult+0x5c>
   10638:	mov	r8, r0
   1063a:	lsls	r3, r4, #31
   1063c:	bpl.n	1062e <__pow5mult+0x26>
   1063e:	mov	r2, r8
   10640:	mov	r1, r5
   10642:	mov	r0, r6
   10644:	bl	104ac <__multiply>
   10648:	cbz	r5, 10678 <__pow5mult+0x70>
   1064a:	ldr	r1, [r5, #4]
   1064c:	ldr	r3, [r6, #68]	; 0x44
   1064e:	asrs	r4, r4, #1
   10650:	ldr.w	r2, [r3, r1, lsl #2]
   10654:	str	r2, [r5, #0]
   10656:	str.w	r5, [r3, r1, lsl #2]
   1065a:	mov	r5, r0
   1065c:	bne.n	10632 <__pow5mult+0x2a>
   1065e:	mov	r0, r5
   10660:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10664:	mov	r2, r8
   10666:	mov	r1, r8
   10668:	mov	r0, r6
   1066a:	bl	104ac <__multiply>
   1066e:	str.w	r0, [r8]
   10672:	str	r7, [r0, #0]
   10674:	mov	r8, r0
   10676:	b.n	1063a <__pow5mult+0x32>
   10678:	mov	r5, r0
   1067a:	b.n	1062e <__pow5mult+0x26>
   1067c:	subs	r3, #1
   1067e:	ldr	r2, [pc, #60]	; (106bc <__pow5mult+0xb4>)
   10680:	ldr.w	r2, [r2, r3, lsl #2]
   10684:	movs	r3, #0
   10686:	bl	1025c <__multadd>
   1068a:	mov	r5, r0
   1068c:	b.n	10618 <__pow5mult+0x10>
   1068e:	movs	r1, #1
   10690:	mov	r0, r6
   10692:	bl	101fc <_Balloc>
   10696:	mov	r8, r0
   10698:	cbz	r0, 106ac <__pow5mult+0xa4>
   1069a:	movs	r3, #1
   1069c:	movw	r2, #625	; 0x271
   106a0:	strd	r3, r2, [r0, #16]
   106a4:	movs	r3, #0
   106a6:	str	r0, [r6, #64]	; 0x40
   106a8:	str	r3, [r0, #0]
   106aa:	b.n	10626 <__pow5mult+0x1e>
   106ac:	ldr	r3, [pc, #16]	; (106c0 <__pow5mult+0xb8>)
   106ae:	ldr	r0, [pc, #20]	; (106c4 <__pow5mult+0xbc>)
   106b0:	mov	r2, r8
   106b2:	movw	r1, #325	; 0x145
   106b6:	bl	14480 <__assert_func>
   106ba:	nop
   106bc:	.word	0x200077d4
   106c0:	.word	0x20000648
   106c4:	.word	0x200007c0

000106c8 <__lshift>:
   106c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   106cc:	mov	r5, r1
   106ce:	mov	r4, r2
   106d0:	ldr	r7, [r5, #16]
   106d2:	ldr	r3, [r5, #8]
   106d4:	ldr	r1, [r1, #4]
   106d6:	add.w	r7, r7, r2, asr #5
   106da:	adds	r6, r7, #1
   106dc:	cmp	r6, r3
   106de:	mov	r8, r0
   106e0:	mov.w	r9, r2, asr #5
   106e4:	ble.n	106f0 <__lshift+0x28>
   106e6:	lsls	r3, r3, #1
   106e8:	cmp	r6, r3
   106ea:	add.w	r1, r1, #1
   106ee:	bgt.n	106e6 <__lshift+0x1e>
   106f0:	mov	r0, r8
   106f2:	bl	101fc <_Balloc>
   106f6:	mov	ip, r0
   106f8:	cmp	r0, #0
   106fa:	beq.n	107a2 <__lshift+0xda>
   106fc:	cmp.w	r9, #0
   10700:	add.w	r2, r0, #20
   10704:	ble.n	10724 <__lshift+0x5c>
   10706:	add.w	r1, r9, #5
   1070a:	mov.w	lr, r1, lsl #2
   1070e:	mov	r3, r2
   10710:	add.w	r1, r0, r1, lsl #2
   10714:	movs	r0, #0
   10716:	str.w	r0, [r3], #4
   1071a:	cmp	r3, r1
   1071c:	bne.n	10716 <__lshift+0x4e>
   1071e:	sub.w	r3, lr, #20
   10722:	add	r2, r3
   10724:	ldr	r1, [r5, #16]
   10726:	add.w	r3, r5, #20
   1072a:	ands.w	lr, r4, #31
   1072e:	add.w	r1, r3, r1, lsl #2
   10732:	beq.n	10792 <__lshift+0xca>
   10734:	rsb	r9, lr, #32
   10738:	mov	r0, r2
   1073a:	mov.w	sl, #0
   1073e:	ldr	r4, [r3, #0]
   10740:	lsl.w	r4, r4, lr
   10744:	orr.w	r4, r4, sl
   10748:	str.w	r4, [r0], #4
   1074c:	ldr.w	r4, [r3], #4
   10750:	cmp	r1, r3
   10752:	lsr.w	sl, r4, r9
   10756:	bhi.n	1073e <__lshift+0x76>
   10758:	subs	r3, r1, r5
   1075a:	subs	r3, #21
   1075c:	bic.w	r3, r3, #3
   10760:	adds	r3, #4
   10762:	add.w	r0, r5, #21
   10766:	cmp	r1, r0
   10768:	it	cc
   1076a:	movcc	r3, #4
   1076c:	cmp.w	sl, #0
   10770:	it	ne
   10772:	movne	r7, r6
   10774:	str.w	sl, [r2, r3]
   10778:	ldr.w	r3, [r8, #68]	; 0x44
   1077c:	ldr	r2, [r5, #4]
   1077e:	str.w	r7, [ip, #16]
   10782:	ldr.w	r1, [r3, r2, lsl #2]
   10786:	str	r1, [r5, #0]
   10788:	mov	r0, ip
   1078a:	str.w	r5, [r3, r2, lsl #2]
   1078e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10792:	subs	r2, #4
   10794:	ldr.w	r0, [r3], #4
   10798:	str.w	r0, [r2, #4]!
   1079c:	cmp	r1, r3
   1079e:	bhi.n	10794 <__lshift+0xcc>
   107a0:	b.n	10778 <__lshift+0xb0>
   107a2:	ldr	r3, [pc, #12]	; (107b0 <__lshift+0xe8>)
   107a4:	ldr	r0, [pc, #12]	; (107b4 <__lshift+0xec>)
   107a6:	mov	r2, ip
   107a8:	mov.w	r1, #478	; 0x1de
   107ac:	bl	14480 <__assert_func>
   107b0:	.word	0x20000648
   107b4:	.word	0x200007c0

000107b8 <__mcmp>:
   107b8:	ldr	r3, [r1, #16]
   107ba:	mov	ip, r0
   107bc:	ldr	r0, [r0, #16]
   107be:	subs	r0, r0, r3
   107c0:	bne.n	107f0 <__mcmp+0x38>
   107c2:	add.w	ip, ip, #20
   107c6:	adds	r1, #20
   107c8:	add.w	r2, ip, r3, lsl #2
   107cc:	push	{r4}
   107ce:	add.w	r3, r1, r3, lsl #2
   107d2:	b.n	107d8 <__mcmp+0x20>
   107d4:	cmp	ip, r2
   107d6:	bcs.n	107ea <__mcmp+0x32>
   107d8:	ldr.w	r4, [r2, #-4]!
   107dc:	ldr.w	r1, [r3, #-4]!
   107e0:	cmp	r4, r1
   107e2:	beq.n	107d4 <__mcmp+0x1c>
   107e4:	bcs.n	107f2 <__mcmp+0x3a>
   107e6:	mov.w	r0, #4294967295
   107ea:	ldr.w	r4, [sp], #4
   107ee:	bx	lr
   107f0:	bx	lr
   107f2:	movs	r0, #1
   107f4:	ldr.w	r4, [sp], #4
   107f8:	bx	lr
   107fa:	nop

000107fc <__mdiff>:
   107fc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10800:	ldr	r7, [r1, #16]
   10802:	ldr	r3, [r2, #16]
   10804:	subs	r7, r7, r3
   10806:	cmp	r7, #0
   10808:	mov	r6, r1
   1080a:	mov	r8, r2
   1080c:	bne.n	1090e <__mdiff+0x112>
   1080e:	add.w	r5, r1, #20
   10812:	adds	r2, #20
   10814:	add.w	r2, r2, r3, lsl #2
   10818:	add.w	r3, r5, r3, lsl #2
   1081c:	b.n	10822 <__mdiff+0x26>
   1081e:	cmp	r5, r3
   10820:	bcs.n	10914 <__mdiff+0x118>
   10822:	ldr.w	r1, [r3, #-4]!
   10826:	ldr.w	r4, [r2, #-4]!
   1082a:	cmp	r1, r4
   1082c:	beq.n	1081e <__mdiff+0x22>
   1082e:	bcc.n	10904 <__mdiff+0x108>
   10830:	ldr	r1, [r6, #4]
   10832:	bl	101fc <_Balloc>
   10836:	mov	r9, r0
   10838:	cmp	r0, #0
   1083a:	beq.n	1092c <__mdiff+0x130>
   1083c:	ldr	r5, [r6, #16]
   1083e:	ldr.w	r2, [r8, #16]
   10842:	str	r7, [r0, #12]
   10844:	add.w	lr, r8, #20
   10848:	add.w	r0, r6, #20
   1084c:	add.w	sl, r9, #20
   10850:	add.w	r1, r6, #16
   10854:	add.w	r2, lr, r2, lsl #2
   10858:	add.w	r7, r0, r5, lsl #2
   1085c:	mov	r6, sl
   1085e:	mov.w	ip, #0
   10862:	ldr.w	r4, [lr], #4
   10866:	ldr.w	fp, [r1, #4]!
   1086a:	uxth	r3, r4
   1086c:	uxtah	ip, ip, fp
   10870:	sub.w	r3, ip, r3
   10874:	mov.w	ip, r4, lsr #16
   10878:	rsb	ip, ip, fp, lsr #16
   1087c:	add.w	ip, ip, r3, asr #16
   10880:	uxth	r3, r3
   10882:	orr.w	r3, r3, ip, lsl #16
   10886:	cmp	r2, lr
   10888:	str.w	r3, [r6], #4
   1088c:	mov.w	ip, ip, asr #16
   10890:	bhi.n	10862 <__mdiff+0x66>
   10892:	sub.w	r1, r2, r8
   10896:	subs	r1, #21
   10898:	add.w	r8, r8, #21
   1089c:	cmp	r2, r8
   1089e:	bic.w	r4, r1, #3
   108a2:	add.w	r4, r4, #4
   108a6:	it	cc
   108a8:	movcc	r4, #4
   108aa:	add	r0, r4
   108ac:	bic.w	r2, r1, #3
   108b0:	it	cc
   108b2:	movcc	r2, #0
   108b4:	cmp	r7, r0
   108b6:	add	r2, sl
   108b8:	add	r4, sl
   108ba:	bls.n	108ee <__mdiff+0xf2>
   108bc:	mov	r6, r4
   108be:	mov	r1, r0
   108c0:	ldr.w	r3, [r1], #4
   108c4:	uxtah	ip, ip, r3
   108c8:	mov.w	r2, ip, asr #16
   108cc:	add.w	r2, r2, r3, lsr #16
   108d0:	uxth.w	ip, ip
   108d4:	orr.w	r3, ip, r2, lsl #16
   108d8:	cmp	r7, r1
   108da:	str.w	r3, [r6], #4
   108de:	mov.w	ip, r2, asr #16
   108e2:	bhi.n	108c0 <__mdiff+0xc4>
   108e4:	subs	r7, #1
   108e6:	subs	r7, r7, r0
   108e8:	bic.w	r7, r7, #3
   108ec:	adds	r2, r4, r7
   108ee:	cbnz	r3, 108fa <__mdiff+0xfe>
   108f0:	ldr.w	r3, [r2, #-4]!
   108f4:	subs	r5, #1
   108f6:	cmp	r3, #0
   108f8:	beq.n	108f0 <__mdiff+0xf4>
   108fa:	str.w	r5, [r9, #16]
   108fe:	mov	r0, r9
   10900:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10904:	mov	r3, r6
   10906:	movs	r7, #1
   10908:	mov	r6, r8
   1090a:	mov	r8, r3
   1090c:	b.n	10830 <__mdiff+0x34>
   1090e:	blt.n	10904 <__mdiff+0x108>
   10910:	movs	r7, #0
   10912:	b.n	10830 <__mdiff+0x34>
   10914:	movs	r1, #0
   10916:	bl	101fc <_Balloc>
   1091a:	mov	r9, r0
   1091c:	cbz	r0, 1093a <__mdiff+0x13e>
   1091e:	movs	r2, #1
   10920:	movs	r3, #0
   10922:	strd	r2, r3, [r9, #16]
   10926:	mov	r0, r9
   10928:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1092c:	ldr	r3, [pc, #24]	; (10948 <__mdiff+0x14c>)
   1092e:	ldr	r0, [pc, #28]	; (1094c <__mdiff+0x150>)
   10930:	mov	r2, r9
   10932:	movw	r1, #581	; 0x245
   10936:	bl	14480 <__assert_func>
   1093a:	ldr	r3, [pc, #12]	; (10948 <__mdiff+0x14c>)
   1093c:	ldr	r0, [pc, #12]	; (1094c <__mdiff+0x150>)
   1093e:	mov	r2, r9
   10940:	movw	r1, #567	; 0x237
   10944:	bl	14480 <__assert_func>
   10948:	.word	0x20000648
   1094c:	.word	0x200007c0

00010950 <__ulp>:
   10950:	sub	sp, #8
   10952:	vstr	d0, [sp]
   10956:	ldr	r3, [pc, #88]	; (109b0 <__ulp+0x60>)
   10958:	ldr	r2, [sp, #4]
   1095a:	ands	r3, r2
   1095c:	sub.w	r3, r3, #54525952	; 0x3400000
   10960:	cmp	r3, #0
   10962:	ble.n	10972 <__ulp+0x22>
   10964:	movs	r2, #0
   10966:	mov	r1, r3
   10968:	mov	r0, r2
   1096a:	vmov	d0, r0, r1
   1096e:	add	sp, #8
   10970:	bx	lr
   10972:	negs	r3, r3
   10974:	cmp.w	r3, #20971520	; 0x1400000
   10978:	mov.w	r2, r3, asr #20
   1097c:	bge.n	10992 <__ulp+0x42>
   1097e:	mov.w	r3, #524288	; 0x80000
   10982:	asrs	r3, r2
   10984:	movs	r2, #0
   10986:	mov	r1, r3
   10988:	mov	r0, r2
   1098a:	vmov	d0, r0, r1
   1098e:	add	sp, #8
   10990:	bx	lr
   10992:	sub.w	r3, r2, #20
   10996:	cmp	r3, #30
   10998:	itte	le
   1099a:	movle.w	r2, #2147483648	; 0x80000000
   1099e:	lsrle	r2, r3
   109a0:	movgt	r2, #1
   109a2:	movs	r3, #0
   109a4:	mov	r1, r3
   109a6:	mov	r0, r2
   109a8:	vmov	d0, r0, r1
   109ac:	add	sp, #8
   109ae:	bx	lr
   109b0:	.word	0x7ff00000

000109b4 <__b2d>:
   109b4:	push	{r3, r4, r5, r6, r7, lr}
   109b6:	ldr	r4, [r0, #16]
   109b8:	add.w	r6, r0, #20
   109bc:	add.w	r4, r6, r4, lsl #2
   109c0:	subs	r7, r4, #4
   109c2:	ldr.w	r5, [r4, #-4]
   109c6:	mov	r0, r5
   109c8:	bl	103b0 <__hi0bits>
   109cc:	rsb	r3, r0, #32
   109d0:	cmp	r0, #10
   109d2:	str	r3, [r1, #0]
   109d4:	ble.n	10a0e <__b2d+0x5a>
   109d6:	cmp	r6, r7
   109d8:	bcs.n	109f2 <__b2d+0x3e>
   109da:	subs	r0, #11
   109dc:	ldr.w	r1, [r4, #-8]
   109e0:	bne.n	10a40 <__b2d+0x8c>
   109e2:	orr.w	r3, r5, #1069547520	; 0x3fc00000
   109e6:	orr.w	r3, r3, #3145728	; 0x300000
   109ea:	mov	r2, r1
   109ec:	vmov	d0, r2, r3
   109f0:	pop	{r3, r4, r5, r6, r7, pc}
   109f2:	subs.w	r1, r0, #11
   109f6:	beq.n	109e2 <__b2d+0x2e>
   109f8:	lsl.w	r1, r5, r1
   109fc:	orr.w	r3, r1, #1069547520	; 0x3fc00000
   10a00:	movs	r1, #0
   10a02:	orr.w	r3, r3, #3145728	; 0x300000
   10a06:	mov	r2, r1
   10a08:	vmov	d0, r2, r3
   10a0c:	pop	{r3, r4, r5, r6, r7, pc}
   10a0e:	rsb	ip, r0, #11
   10a12:	lsr.w	r1, r5, ip
   10a16:	cmp	r6, r7
   10a18:	orr.w	r3, r1, #1069547520	; 0x3fc00000
   10a1c:	it	cc
   10a1e:	ldrcc.w	r1, [r4, #-8]
   10a22:	add.w	r0, r0, #21
   10a26:	ite	cc
   10a28:	lsrcc.w	r1, r1, ip
   10a2c:	movcs	r1, #0
   10a2e:	lsl.w	r0, r5, r0
   10a32:	orrs	r1, r0
   10a34:	orr.w	r3, r3, #3145728	; 0x300000
   10a38:	mov	r2, r1
   10a3a:	vmov	d0, r2, r3
   10a3e:	pop	{r3, r4, r5, r6, r7, pc}
   10a40:	rsb	ip, r0, #32
   10a44:	lsls	r5, r0
   10a46:	lsr.w	r3, r1, ip
   10a4a:	orr.w	r7, r5, r3
   10a4e:	sub.w	r5, r4, #8
   10a52:	cmp	r6, r5
   10a54:	lsl.w	r1, r1, r0
   10a58:	itt	cc
   10a5a:	ldrcc.w	r0, [r4, #-12]
   10a5e:	lsrcc.w	r0, r0, ip
   10a62:	orr.w	r3, r7, #1069547520	; 0x3fc00000
   10a66:	it	cc
   10a68:	orrcc	r1, r0
   10a6a:	orr.w	r3, r3, #3145728	; 0x300000
   10a6e:	mov	r2, r1
   10a70:	vmov	d0, r2, r3
   10a74:	pop	{r3, r4, r5, r6, r7, pc}
   10a76:	nop

00010a78 <__d2b>:
   10a78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10a7c:	mov	r8, r1
   10a7e:	sub	sp, #12
   10a80:	movs	r1, #1
   10a82:	vmov	r6, r7, d0
   10a86:	mov	r5, r2
   10a88:	bl	101fc <_Balloc>
   10a8c:	mov	r4, r0
   10a8e:	cmp	r0, #0
   10a90:	beq.n	10b36 <__d2b+0xbe>
   10a92:	ubfx	r9, r7, #20, #11
   10a96:	ubfx	r3, r7, #0, #20
   10a9a:	cmp.w	r9, #0
   10a9e:	beq.n	10aa4 <__d2b+0x2c>
   10aa0:	orr.w	r3, r3, #1048576	; 0x100000
   10aa4:	cmp	r6, #0
   10aa6:	str	r3, [sp, #4]
   10aa8:	bne.n	10adc <__d2b+0x64>
   10aaa:	add	r0, sp, #4
   10aac:	bl	103f0 <__lo0bits>
   10ab0:	ldr	r2, [sp, #4]
   10ab2:	str	r2, [r4, #20]
   10ab4:	movs	r2, #1
   10ab6:	add.w	r3, r0, #32
   10aba:	str	r2, [r4, #16]
   10abc:	cmp.w	r9, #0
   10ac0:	beq.n	10b0e <__d2b+0x96>
   10ac2:	subw	r9, r9, #1075	; 0x433
   10ac6:	add.w	r2, r9, r3
   10aca:	mov	r0, r4
   10acc:	rsb	r3, r3, #53	; 0x35
   10ad0:	str.w	r2, [r8]
   10ad4:	str	r3, [r5, #0]
   10ad6:	add	sp, #12
   10ad8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10adc:	mov	r0, sp
   10ade:	str	r6, [sp, #0]
   10ae0:	bl	103f0 <__lo0bits>
   10ae4:	mov	r3, r0
   10ae6:	cbz	r0, 10b2e <__d2b+0xb6>
   10ae8:	ldrd	r0, r2, [sp]
   10aec:	rsb	r1, r3, #32
   10af0:	lsl.w	r1, r2, r1
   10af4:	orrs	r1, r0
   10af6:	lsrs	r2, r3
   10af8:	str	r1, [r4, #20]
   10afa:	str	r2, [sp, #4]
   10afc:	cmp	r2, #0
   10afe:	str	r2, [r4, #24]
   10b00:	ite	ne
   10b02:	movne	r2, #2
   10b04:	moveq	r2, #1
   10b06:	str	r2, [r4, #16]
   10b08:	cmp.w	r9, #0
   10b0c:	bne.n	10ac2 <__d2b+0x4a>
   10b0e:	subw	r3, r3, #1074	; 0x432
   10b12:	str.w	r3, [r8]
   10b16:	add.w	r3, r4, r2, lsl #2
   10b1a:	ldr	r0, [r3, #16]
   10b1c:	bl	103b0 <__hi0bits>
   10b20:	rsb	r3, r0, r2, lsl #5
   10b24:	mov	r0, r4
   10b26:	str	r3, [r5, #0]
   10b28:	add	sp, #12
   10b2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10b2e:	ldr	r2, [sp, #0]
   10b30:	str	r2, [r4, #20]
   10b32:	ldr	r2, [sp, #4]
   10b34:	b.n	10afc <__d2b+0x84>
   10b36:	ldr	r3, [pc, #12]	; (10b44 <__d2b+0xcc>)
   10b38:	ldr	r0, [pc, #12]	; (10b48 <__d2b+0xd0>)
   10b3a:	mov	r2, r4
   10b3c:	movw	r1, #783	; 0x30f
   10b40:	bl	14480 <__assert_func>
   10b44:	.word	0x20000648
   10b48:	.word	0x200007c0

00010b4c <__ratio>:
   10b4c:	push	{r4, r5, r6, r7, lr}
   10b4e:	sub	sp, #12
   10b50:	mov	r6, r1
   10b52:	mov	r1, sp
   10b54:	mov	r7, r0
   10b56:	bl	109b4 <__b2d>
   10b5a:	add	r1, sp, #4
   10b5c:	mov	r0, r6
   10b5e:	vmov	r4, r5, d0
   10b62:	vmov.f64	d7, d0
   10b66:	bl	109b4 <__b2d>
   10b6a:	ldr	r3, [r6, #16]
   10b6c:	ldr	r2, [r7, #16]
   10b6e:	subs	r2, r2, r3
   10b70:	ldrd	r3, r1, [sp]
   10b74:	subs	r3, r3, r1
   10b76:	add.w	r3, r3, r2, lsl #5
   10b7a:	cmp	r3, #0
   10b7c:	ble.n	10b92 <__ratio+0x46>
   10b7e:	vmov	r2, s15
   10b82:	add.w	r5, r2, r3, lsl #20
   10b86:	vmov	d7, r4, r5
   10b8a:	vdiv.f64	d0, d7, d0
   10b8e:	add	sp, #12
   10b90:	pop	{r4, r5, r6, r7, pc}
   10b92:	vmov	r2, s1
   10b96:	vmov	r0, r1, d0
   10b9a:	rsb	r3, r3, r3, lsl #12
   10b9e:	add.w	r1, r2, r3, lsl #20
   10ba2:	vmov	d0, r0, r1
   10ba6:	vdiv.f64	d0, d7, d0
   10baa:	add	sp, #12
   10bac:	pop	{r4, r5, r6, r7, pc}
   10bae:	nop

00010bb0 <__copybits>:
   10bb0:	subs	r1, #1
   10bb2:	asrs	r1, r1, #5
   10bb4:	add.w	ip, r1, #1
   10bb8:	ldr	r1, [r2, #16]
   10bba:	add.w	r3, r2, #20
   10bbe:	add.w	r1, r3, r1, lsl #2
   10bc2:	cmp	r3, r1
   10bc4:	add.w	ip, r0, ip, lsl #2
   10bc8:	bcs.n	10bfa <__copybits+0x4a>
   10bca:	push	{r4, lr}
   10bcc:	sub.w	lr, r0, #4
   10bd0:	ldr.w	r4, [r3], #4
   10bd4:	str.w	r4, [lr, #4]!
   10bd8:	cmp	r1, r3
   10bda:	bhi.n	10bd0 <__copybits+0x20>
   10bdc:	subs	r2, r1, r2
   10bde:	sub.w	r3, r2, #21
   10be2:	bic.w	r3, r3, #3
   10be6:	adds	r3, #4
   10be8:	add	r0, r3
   10bea:	cmp	ip, r0
   10bec:	bls.n	10bf8 <__copybits+0x48>
   10bee:	movs	r3, #0
   10bf0:	str.w	r3, [r0], #4
   10bf4:	cmp	ip, r0
   10bf6:	bhi.n	10bf0 <__copybits+0x40>
   10bf8:	pop	{r4, pc}
   10bfa:	cmp	ip, r0
   10bfc:	bls.n	10c0a <__copybits+0x5a>
   10bfe:	movs	r3, #0
   10c00:	str.w	r3, [r0], #4
   10c04:	cmp	ip, r0
   10c06:	bhi.n	10c00 <__copybits+0x50>
   10c08:	bx	lr
   10c0a:	bx	lr

00010c0c <__any_on>:
   10c0c:	ldr	r3, [r0, #16]
   10c0e:	asrs	r2, r1, #5
   10c10:	cmp	r3, r2
   10c12:	add.w	r0, r0, #20
   10c16:	bge.n	10c2c <__any_on+0x20>
   10c18:	add.w	r3, r0, r3, lsl #2
   10c1c:	b.n	10c24 <__any_on+0x18>
   10c1e:	ldr.w	r2, [r3, #-4]!
   10c22:	cbnz	r2, 10c56 <__any_on+0x4a>
   10c24:	cmp	r3, r0
   10c26:	bhi.n	10c1e <__any_on+0x12>
   10c28:	movs	r0, #0
   10c2a:	bx	lr
   10c2c:	ble.n	10c50 <__any_on+0x44>
   10c2e:	ands.w	r1, r1, #31
   10c32:	beq.n	10c50 <__any_on+0x44>
   10c34:	push	{r4}
   10c36:	ldr.w	r4, [r0, r2, lsl #2]
   10c3a:	add.w	r3, r0, r2, lsl #2
   10c3e:	lsr.w	r2, r4, r1
   10c42:	lsls	r2, r1
   10c44:	cmp	r4, r2
   10c46:	beq.n	10c62 <__any_on+0x56>
   10c48:	movs	r0, #1
   10c4a:	ldr.w	r4, [sp], #4
   10c4e:	bx	lr
   10c50:	add.w	r3, r0, r2, lsl #2
   10c54:	b.n	10c24 <__any_on+0x18>
   10c56:	movs	r0, #1
   10c58:	bx	lr
   10c5a:	ldr.w	r2, [r3, #-4]!
   10c5e:	cmp	r2, #0
   10c60:	bne.n	10c48 <__any_on+0x3c>
   10c62:	cmp	r3, r0
   10c64:	bhi.n	10c5a <__any_on+0x4e>
   10c66:	movs	r0, #0
   10c68:	ldr.w	r4, [sp], #4
   10c6c:	bx	lr
   10c6e:	nop

00010c70 <__ascii_wctomb>:
   10c70:	cbz	r1, 10c86 <__ascii_wctomb+0x16>
   10c72:	cmp	r2, #255	; 0xff
   10c74:	bhi.n	10c7c <__ascii_wctomb+0xc>
   10c76:	strb	r2, [r1, #0]
   10c78:	movs	r0, #1
   10c7a:	bx	lr
   10c7c:	movs	r3, #138	; 0x8a
   10c7e:	str	r3, [r0, #0]
   10c80:	mov.w	r0, #4294967295
   10c84:	bx	lr
   10c86:	mov	r0, r1
   10c88:	bx	lr
   10c8a:	nop

00010c8c <fcvtbuf>:
   10c8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10c90:	mov	r6, r1
   10c92:	ldr	r1, [pc, #152]	; (10d2c <fcvtbuf+0xa0>)
   10c94:	sub	sp, #28
   10c96:	ldr	r7, [r1, #0]
   10c98:	mov	r4, r0
   10c9a:	mov	r8, r2
   10c9c:	mov	r5, r3
   10c9e:	cbz	r3, 10cf6 <fcvtbuf+0x6a>
   10ca0:	add	r2, sp, #20
   10ca2:	mov	r3, r6
   10ca4:	str	r2, [sp, #4]
   10ca6:	movs	r1, #3
   10ca8:	mov	r2, r4
   10caa:	str.w	r8, [sp]
   10cae:	mov	r0, r7
   10cb0:	bl	14660 <_dtoa_r>
   10cb4:	ldr	r3, [sp, #20]
   10cb6:	ldr	r2, [r6, #0]
   10cb8:	cmp	r0, r3
   10cba:	mov	ip, r0
   10cbc:	rsb	r2, r2, #0
   10cc0:	mov	r1, r5
   10cc2:	bcs.n	10cd8 <fcvtbuf+0x4c>
   10cc4:	subs	r0, r2, r0
   10cc6:	ldrb.w	r3, [ip], #1
   10cca:	strb.w	r3, [r1], #1
   10cce:	ldr	r3, [sp, #20]
   10cd0:	cmp	r3, ip
   10cd2:	add.w	r2, r0, ip
   10cd6:	bhi.n	10cc6 <fcvtbuf+0x3a>
   10cd8:	cmp	r4, r2
   10cda:	ble.n	10d26 <fcvtbuf+0x9a>
   10cdc:	subs	r2, r4, r2
   10cde:	add	r2, r1
   10ce0:	movs	r3, #48	; 0x30
   10ce2:	strb.w	r3, [r1], #1
   10ce6:	cmp	r1, r2
   10ce8:	bne.n	10ce2 <fcvtbuf+0x56>
   10cea:	movs	r3, #0
   10cec:	strb	r3, [r2, #0]
   10cee:	mov	r0, r5
   10cf0:	add	sp, #28
   10cf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10cf6:	ldr	r2, [r7, #72]	; 0x48
   10cf8:	add.w	r3, r0, #35	; 0x23
   10cfc:	cmp	r2, r3
   10cfe:	ble.n	10d04 <fcvtbuf+0x78>
   10d00:	ldr	r5, [r7, #76]	; 0x4c
   10d02:	b.n	10ca0 <fcvtbuf+0x14>
   10d04:	add.w	r9, r0, #36	; 0x24
   10d08:	ldr	r1, [r7, #76]	; 0x4c
   10d0a:	mov	r2, r9
   10d0c:	mov	r0, r7
   10d0e:	vstr	d0, [sp, #8]
   10d12:	bl	d518 <_realloc_r>
   10d16:	mov	r5, r0
   10d18:	cmp	r0, #0
   10d1a:	beq.n	10cee <fcvtbuf+0x62>
   10d1c:	strd	r9, r0, [r7, #72]	; 0x48
   10d20:	vldr	d0, [sp, #8]
   10d24:	b.n	10ca0 <fcvtbuf+0x14>
   10d26:	mov	r2, r1
   10d28:	b.n	10cea <fcvtbuf+0x5e>
   10d2a:	nop
   10d2c:	.word	0x200093cc

00010d30 <_svfprintf_r>:
   10d30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d34:	vpush	{d8-d11}
   10d38:	sub	sp, #324	; 0x144
   10d3a:	mov	r4, r1
   10d3c:	vmov	s22, r1
   10d40:	mov	r8, r2
   10d42:	str	r3, [sp, #32]
   10d44:	mov	fp, r0
   10d46:	bl	143fc <_localeconv_r>
   10d4a:	ldr	r3, [r0, #0]
   10d4c:	str	r3, [sp, #72]	; 0x48
   10d4e:	mov	r0, r3
   10d50:	bl	f580 <strlen>
   10d54:	add	r7, sp, #128	; 0x80
   10d56:	str	r0, [sp, #64]	; 0x40
   10d58:	movs	r2, #8
   10d5a:	movs	r1, #0
   10d5c:	mov	r0, r7
   10d5e:	bl	a528 <memset>
   10d62:	ldrh	r3, [r4, #12]
   10d64:	lsls	r3, r3, #24
   10d66:	bpl.n	10d70 <_svfprintf_r+0x40>
   10d68:	ldr	r3, [r4, #16]
   10d6a:	cmp	r3, #0
   10d6c:	beq.w	11c1a <_svfprintf_r+0xeea>
   10d70:	movs	r3, #0
   10d72:	vldr	d8, [pc, #524]	; 10f80 <_svfprintf_r+0x250>
   10d76:	vldr	d9, [pc, #528]	; 10f88 <_svfprintf_r+0x258>
   10d7a:	strd	r3, r3, [sp, #148]	; 0x94
   10d7e:	strd	r3, r3, [sp, #76]	; 0x4c
   10d82:	strd	r3, r3, [sp, #84]	; 0x54
   10d86:	add	r2, sp, #156	; 0x9c
   10d88:	str	r3, [sp, #56]	; 0x38
   10d8a:	str	r2, [sp, #144]	; 0x90
   10d8c:	mov	sl, r2
   10d8e:	str	r3, [sp, #68]	; 0x44
   10d90:	str	r3, [sp, #16]
   10d92:	mov	r4, r8
   10d94:	mov	r9, r4
   10d96:	ldr	r3, [pc, #504]	; (10f90 <_svfprintf_r+0x260>)
   10d98:	ldr.w	r5, [r3, #228]	; 0xe4
   10d9c:	bl	f004 <__locale_mb_cur_max>
   10da0:	mov	r2, r9
   10da2:	mov	r3, r0
   10da4:	add	r1, sp, #112	; 0x70
   10da6:	str	r7, [sp, #0]
   10da8:	mov	r0, fp
   10daa:	blx	r5
   10dac:	cmp	r0, #0
   10dae:	beq.w	10f12 <_svfprintf_r+0x1e2>
   10db2:	blt.w	10f02 <_svfprintf_r+0x1d2>
   10db6:	ldr	r2, [sp, #112]	; 0x70
   10db8:	cmp	r2, #37	; 0x25
   10dba:	mov	r3, r0
   10dbc:	beq.n	10dc2 <_svfprintf_r+0x92>
   10dbe:	add	r9, r3
   10dc0:	b.n	10d96 <_svfprintf_r+0x66>
   10dc2:	subs.w	r5, r9, r4
   10dc6:	mov	r6, r0
   10dc8:	bne.w	10f1a <_svfprintf_r+0x1ea>
   10dcc:	movs	r3, #0
   10dce:	mov.w	r2, #4294967295
   10dd2:	strb.w	r3, [sp, #103]	; 0x67
   10dd6:	mov	r8, r3
   10dd8:	str	r3, [sp, #24]
   10dda:	add.w	r9, r9, #1
   10dde:	ldrb.w	r3, [r9]
   10de2:	str	r2, [sp, #12]
   10de4:	movs	r5, #43	; 0x2b
   10de6:	movs	r6, #32
   10de8:	add.w	r9, r9, #1
   10dec:	sub.w	r2, r3, #32
   10df0:	cmp	r2, #90	; 0x5a
   10df2:	bhi.w	10f94 <_svfprintf_r+0x264>
   10df6:	tbh	[pc, r2, lsl #1]
   10dfa:	.short	0x02e8
   10dfc:	.word	0x00cd00cd
   10e00:	.word	0x00cd02e3
   10e04:	.word	0x00cd00cd
   10e08:	.word	0x00cd006a
   10e0c:	.word	0x020500cd
   10e10:	.word	0x00cd0284
   10e14:	.word	0x02c90210
   10e18:	.word	0x02bd00cd
   10e1c:	.word	0x005b005b
   10e20:	.word	0x005b005b
   10e24:	.word	0x005b005b
   10e28:	.word	0x005b005b
   10e2c:	.word	0x00cd005b
   10e30:	.word	0x00cd00cd
   10e34:	.word	0x00cd00cd
   10e38:	.word	0x00cd00cd
   10e3c:	.word	0x00cd0153
   10e40:	.word	0x021a0183
   10e44:	.word	0x01530153
   10e48:	.word	0x00cd0153
   10e4c:	.word	0x00cd00cd
   10e50:	.word	0x021500cd
   10e54:	.word	0x00cd00cd
   10e58:	.word	0x00cd0296
   10e5c:	.word	0x00cd00cd
   10e60:	.word	0x00cd01ab
   10e64:	.word	0x00cd02aa
   10e68:	.word	0x06e300cd
   10e6c:	.word	0x00cd00cd
   10e70:	.word	0x00cd00cd
   10e74:	.word	0x00cd00cd
   10e78:	.word	0x00cd00cd
   10e7c:	.word	0x00cd0153
   10e80:	.word	0x01de0183
   10e84:	.word	0x01530153
   10e88:	.word	0x02770153
   10e8c:	.word	0x007f01de
   10e90:	.word	0x028900cd
   10e94:	.word	0x025f00cd
   10e98:	.word	0x022f06e0
   10e9c:	.word	0x00cd007f
   10ea0:	.word	0x007c01ab
   10ea4:	.word	0x00cd06b8
   10ea8:	.word	0x06bd00cd
   10eac:	.word	0x007c00cd
   10eb0:	sub.w	r2, r3, #48	; 0x30
   10eb4:	movs	r1, #0
   10eb6:	ldrb.w	r3, [r9], #1
   10eba:	add.w	r1, r1, r1, lsl #2
   10ebe:	add.w	r1, r2, r1, lsl #1
   10ec2:	sub.w	r2, r3, #48	; 0x30
   10ec6:	cmp	r2, #9
   10ec8:	bls.n	10eb6 <_svfprintf_r+0x186>
   10eca:	str	r1, [sp, #24]
   10ecc:	b.n	10dec <_svfprintf_r+0xbc>
   10ece:	mov	r0, fp
   10ed0:	bl	143fc <_localeconv_r>
   10ed4:	ldr	r3, [r0, #4]
   10ed6:	str	r3, [sp, #84]	; 0x54
   10ed8:	mov	r0, r3
   10eda:	bl	f580 <strlen>
   10ede:	str	r0, [sp, #88]	; 0x58
   10ee0:	mov	r0, fp
   10ee2:	bl	143fc <_localeconv_r>
   10ee6:	ldr	r3, [r0, #8]
   10ee8:	str	r3, [sp, #76]	; 0x4c
   10eea:	ldr	r3, [sp, #88]	; 0x58
   10eec:	cmp	r3, #0
   10eee:	bne.w	11b4c <_svfprintf_r+0xe1c>
   10ef2:	ldrb.w	r3, [r9]
   10ef6:	b.n	10de8 <_svfprintf_r+0xb8>
   10ef8:	ldrb.w	r3, [r9]
   10efc:	orr.w	r8, r8, #32
   10f00:	b.n	10de8 <_svfprintf_r+0xb8>
   10f02:	movs	r2, #8
   10f04:	movs	r1, #0
   10f06:	mov	r0, r7
   10f08:	bl	a528 <memset>
   10f0c:	movs	r3, #1
   10f0e:	add	r9, r3
   10f10:	b.n	10d96 <_svfprintf_r+0x66>
   10f12:	subs.w	r5, r9, r4
   10f16:	mov	r6, r0
   10f18:	beq.n	10f3e <_svfprintf_r+0x20e>
   10f1a:	ldr	r3, [sp, #152]	; 0x98
   10f1c:	add	r3, r5
   10f1e:	str	r3, [sp, #152]	; 0x98
   10f20:	ldr	r3, [sp, #148]	; 0x94
   10f22:	adds	r3, #1
   10f24:	cmp	r3, #7
   10f26:	strd	r4, r5, [sl]
   10f2a:	str	r3, [sp, #148]	; 0x94
   10f2c:	bgt.n	10f68 <_svfprintf_r+0x238>
   10f2e:	add.w	sl, sl, #8
   10f32:	ldr	r3, [sp, #16]
   10f34:	add	r3, r5
   10f36:	str	r3, [sp, #16]
   10f38:	cmp	r6, #0
   10f3a:	bne.w	10dcc <_svfprintf_r+0x9c>
   10f3e:	ldr	r3, [sp, #152]	; 0x98
   10f40:	cmp	r3, #0
   10f42:	bne.w	1235c <_svfprintf_r+0x162c>
   10f46:	vmov	r3, s22
   10f4a:	ldrsh.w	r3, [r3, #12]
   10f4e:	tst.w	r3, #64	; 0x40
   10f52:	ldr	r3, [sp, #16]
   10f54:	it	ne
   10f56:	movne.w	r3, #4294967295
   10f5a:	str	r3, [sp, #16]
   10f5c:	ldr	r0, [sp, #16]
   10f5e:	add	sp, #324	; 0x144
   10f60:	vpop	{d8-d11}
   10f64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f68:	vmov	r1, s22
   10f6c:	add	r2, sp, #144	; 0x90
   10f6e:	mov	r0, fp
   10f70:	bl	15a48 <__ssprint_r>
   10f74:	cmp	r0, #0
   10f76:	bne.n	10f46 <_svfprintf_r+0x216>
   10f78:	add.w	sl, sp, #156	; 0x9c
   10f7c:	b.n	10f32 <_svfprintf_r+0x202>
   10f7e:	nop
	...
   10f88:	.word	0xffffffff
   10f8c:	.word	0x7fefffff
   10f90:	.word	0x20008e44
   10f94:	str	r3, [sp, #44]	; 0x2c
   10f96:	cmp	r3, #0
   10f98:	beq.n	10f3e <_svfprintf_r+0x20e>
   10f9a:	movs	r1, #0
   10f9c:	strd	r1, r1, [sp, #48]	; 0x30
   10fa0:	strb.w	r3, [sp, #220]	; 0xdc
   10fa4:	movs	r3, #1
   10fa6:	strb.w	r1, [sp, #103]	; 0x67
   10faa:	str	r3, [sp, #8]
   10fac:	str	r1, [sp, #28]
   10fae:	str	r3, [sp, #20]
   10fb0:	str	r1, [sp, #12]
   10fb2:	str	r1, [sp, #60]	; 0x3c
   10fb4:	add	r4, sp, #220	; 0xdc
   10fb6:	ands.w	r3, r8, #2
   10fba:	str	r3, [sp, #36]	; 0x24
   10fbc:	beq.n	10fc4 <_svfprintf_r+0x294>
   10fbe:	ldr	r3, [sp, #8]
   10fc0:	adds	r3, #2
   10fc2:	str	r3, [sp, #8]
   10fc4:	ands.w	r3, r8, #132	; 0x84
   10fc8:	str	r3, [sp, #40]	; 0x28
   10fca:	bne.n	10fd8 <_svfprintf_r+0x2a8>
   10fcc:	ldr	r3, [sp, #24]
   10fce:	ldr	r2, [sp, #8]
   10fd0:	subs	r5, r3, r2
   10fd2:	cmp	r5, #0
   10fd4:	bgt.w	116aa <_svfprintf_r+0x97a>
   10fd8:	ldr	r2, [sp, #152]	; 0x98
   10fda:	cbz	r1, 11000 <_svfprintf_r+0x2d0>
   10fdc:	ldr	r1, [sp, #148]	; 0x94
   10fde:	add.w	r0, sp, #103	; 0x67
   10fe2:	adds	r1, #1
   10fe4:	adds	r2, #1
   10fe6:	str.w	r0, [sl]
   10fea:	cmp	r1, #7
   10fec:	mov.w	r0, #1
   10ff0:	str	r2, [sp, #152]	; 0x98
   10ff2:	str	r1, [sp, #148]	; 0x94
   10ff4:	str.w	r0, [sl, #4]
   10ff8:	bgt.w	11740 <_svfprintf_r+0xa10>
   10ffc:	add.w	sl, sl, #8
   11000:	ldr	r3, [sp, #36]	; 0x24
   11002:	cbz	r3, 11026 <_svfprintf_r+0x2f6>
   11004:	ldr	r3, [sp, #148]	; 0x94
   11006:	add	r1, sp, #104	; 0x68
   11008:	adds	r3, #1
   1100a:	adds	r2, #2
   1100c:	str.w	r1, [sl]
   11010:	cmp	r3, #7
   11012:	mov.w	r1, #2
   11016:	str	r2, [sp, #152]	; 0x98
   11018:	str	r3, [sp, #148]	; 0x94
   1101a:	str.w	r1, [sl, #4]
   1101e:	bgt.w	11768 <_svfprintf_r+0xa38>
   11022:	add.w	sl, sl, #8
   11026:	ldr	r3, [sp, #40]	; 0x28
   11028:	cmp	r3, #128	; 0x80
   1102a:	beq.w	11506 <_svfprintf_r+0x7d6>
   1102e:	ldr	r3, [sp, #12]
   11030:	ldr	r1, [sp, #20]
   11032:	subs	r5, r3, r1
   11034:	cmp	r5, #0
   11036:	bgt.w	11584 <_svfprintf_r+0x854>
   1103a:	tst.w	r8, #256	; 0x100
   1103e:	bne.w	1145c <_svfprintf_r+0x72c>
   11042:	ldr	r3, [sp, #20]
   11044:	str.w	r3, [sl, #4]
   11048:	add	r2, r3
   1104a:	ldr	r3, [sp, #148]	; 0x94
   1104c:	str.w	r4, [sl]
   11050:	adds	r3, #1
   11052:	cmp	r3, #7
   11054:	str	r2, [sp, #152]	; 0x98
   11056:	str	r3, [sp, #148]	; 0x94
   11058:	bgt.w	11692 <_svfprintf_r+0x962>
   1105c:	add.w	sl, sl, #8
   11060:	tst.w	r8, #4
   11064:	beq.n	11072 <_svfprintf_r+0x342>
   11066:	ldr	r3, [sp, #24]
   11068:	ldr	r1, [sp, #8]
   1106a:	subs	r4, r3, r1
   1106c:	cmp	r4, #0
   1106e:	bgt.w	11782 <_svfprintf_r+0xa52>
   11072:	ldr	r3, [sp, #16]
   11074:	ldr	r1, [sp, #24]
   11076:	ldr	r0, [sp, #8]
   11078:	cmp	r1, r0
   1107a:	ite	ge
   1107c:	addge	r3, r3, r1
   1107e:	addlt	r3, r3, r0
   11080:	str	r3, [sp, #16]
   11082:	cmp	r2, #0
   11084:	bne.w	115e8 <_svfprintf_r+0x8b8>
   11088:	movs	r3, #0
   1108a:	str	r3, [sp, #148]	; 0x94
   1108c:	ldr	r3, [sp, #28]
   1108e:	cbz	r3, 11098 <_svfprintf_r+0x368>
   11090:	ldr	r1, [sp, #28]
   11092:	mov	r0, fp
   11094:	bl	f7a4 <_free_r>
   11098:	add.w	sl, sp, #156	; 0x9c
   1109c:	mov	r4, r9
   1109e:	b.n	10d94 <_svfprintf_r+0x64>
   110a0:	str	r3, [sp, #44]	; 0x2c
   110a2:	ldr	r3, [sp, #32]
   110a4:	adds	r3, #7
   110a6:	bic.w	r3, r3, #7
   110aa:	vldmia	r3!, {d8}
   110ae:	vabs.f64	d7, d8
   110b2:	vcmp.f64	d7, d9
   110b6:	vmrs	APSR_nzcv, fpscr
   110ba:	str	r3, [sp, #32]
   110bc:	ble.w	11a92 <_svfprintf_r+0xd62>
   110c0:	vcmpe.f64	d8, #0.0
   110c4:	vmrs	APSR_nzcv, fpscr
   110c8:	bmi.w	1217e <_svfprintf_r+0x144e>
   110cc:	ldrb.w	r1, [sp, #103]	; 0x67
   110d0:	ldr	r4, [pc, #684]	; (11380 <_svfprintf_r+0x650>)
   110d2:	ldr	r3, [pc, #688]	; (11384 <_svfprintf_r+0x654>)
   110d4:	bic.w	r8, r8, #128	; 0x80
   110d8:	ldr	r2, [sp, #44]	; 0x2c
   110da:	cmp	r2, #71	; 0x47
   110dc:	it	gt
   110de:	movgt	r4, r3
   110e0:	movs	r3, #0
   110e2:	strd	r3, r3, [sp, #48]	; 0x30
   110e6:	movs	r2, #3
   110e8:	str	r3, [sp, #28]
   110ea:	str	r2, [sp, #8]
   110ec:	str	r2, [sp, #20]
   110ee:	str	r3, [sp, #12]
   110f0:	str	r3, [sp, #60]	; 0x3c
   110f2:	cmp	r1, #0
   110f4:	beq.w	10fb6 <_svfprintf_r+0x286>
   110f8:	ldr	r3, [sp, #8]
   110fa:	adds	r3, #1
   110fc:	str	r3, [sp, #8]
   110fe:	b.n	10fb6 <_svfprintf_r+0x286>
   11100:	cmp	r3, #67	; 0x43
   11102:	str	r3, [sp, #44]	; 0x2c
   11104:	beq.n	1110e <_svfprintf_r+0x3de>
   11106:	tst.w	r8, #16
   1110a:	beq.w	11bc8 <_svfprintf_r+0xe98>
   1110e:	ldr	r5, [sp, #32]
   11110:	movs	r2, #8
   11112:	movs	r1, #0
   11114:	add	r0, sp, #136	; 0x88
   11116:	add	r4, sp, #220	; 0xdc
   11118:	bl	a528 <memset>
   1111c:	add	r3, sp, #136	; 0x88
   1111e:	ldr.w	r2, [r5], #4
   11122:	mov	r1, r4
   11124:	mov	r0, fp
   11126:	bl	157f4 <_wcrtomb_r>
   1112a:	mov	r3, r0
   1112c:	adds	r3, #1
   1112e:	str	r0, [sp, #20]
   11130:	beq.w	12710 <_svfprintf_r+0x19e0>
   11134:	ldr	r3, [sp, #20]
   11136:	str	r5, [sp, #32]
   11138:	bic.w	r3, r3, r3, asr #31
   1113c:	str	r3, [sp, #8]
   1113e:	movs	r1, #0
   11140:	strd	r1, r1, [sp, #48]	; 0x30
   11144:	strb.w	r1, [sp, #103]	; 0x67
   11148:	str	r1, [sp, #28]
   1114a:	str	r1, [sp, #12]
   1114c:	str	r1, [sp, #60]	; 0x3c
   1114e:	b.n	10fb6 <_svfprintf_r+0x286>
   11150:	str	r3, [sp, #44]	; 0x2c
   11152:	ldr	r3, [sp, #32]
   11154:	mov	r2, r3
   11156:	movs	r3, #0
   11158:	strb.w	r3, [sp, #103]	; 0x67
   1115c:	mov	r3, r2
   1115e:	ldr.w	r4, [r3], #4
   11162:	str	r3, [sp, #32]
   11164:	cmp	r4, #0
   11166:	beq.w	11bfa <_svfprintf_r+0xeca>
   1116a:	ldr	r3, [sp, #44]	; 0x2c
   1116c:	cmp	r3, #83	; 0x53
   1116e:	beq.w	11f4a <_svfprintf_r+0x121a>
   11172:	ands.w	r3, r8, #16
   11176:	str	r3, [sp, #48]	; 0x30
   11178:	bne.w	11f4a <_svfprintf_r+0x121a>
   1117c:	ldr	r3, [sp, #12]
   1117e:	adds	r5, r3, #1
   11180:	beq.w	1234e <_svfprintf_r+0x161e>
   11184:	ldr	r1, [sp, #48]	; 0x30
   11186:	mov	r2, r3
   11188:	mov	r0, r4
   1118a:	bl	f4e0 <memchr>
   1118e:	str	r0, [sp, #28]
   11190:	cmp	r0, #0
   11192:	beq.w	127e6 <_svfprintf_r+0x1ab6>
   11196:	ldr	r3, [sp, #28]
   11198:	subs	r2, r3, r4
   1119a:	str	r2, [sp, #20]
   1119c:	ldr	r3, [sp, #48]	; 0x30
   1119e:	str	r3, [sp, #12]
   111a0:	bic.w	r2, r2, r2, asr #31
   111a4:	str	r3, [sp, #60]	; 0x3c
   111a6:	str	r3, [sp, #52]	; 0x34
   111a8:	str	r3, [sp, #28]
   111aa:	movs	r3, #115	; 0x73
   111ac:	ldrb.w	r1, [sp, #103]	; 0x67
   111b0:	str	r2, [sp, #8]
   111b2:	str	r3, [sp, #44]	; 0x2c
   111b4:	b.n	110f2 <_svfprintf_r+0x3c2>
   111b6:	tst.w	r8, #32
   111ba:	str	r3, [sp, #44]	; 0x2c
   111bc:	ldr	r3, [sp, #32]
   111be:	beq.n	1123c <_svfprintf_r+0x50c>
   111c0:	adds	r3, #7
   111c2:	bic.w	r3, r3, #7
   111c6:	mov	r2, r3
   111c8:	mov	r1, r2
   111ca:	ldr	r3, [r3, #4]
   111cc:	ldr.w	r2, [r1], #8
   111d0:	str	r1, [sp, #32]
   111d2:	mov	r1, r3
   111d4:	cmp	r3, #0
   111d6:	blt.w	119f2 <_svfprintf_r+0xcc2>
   111da:	ldr	r3, [sp, #12]
   111dc:	adds	r3, #1
   111de:	beq.w	1171e <_svfprintf_r+0x9ee>
   111e2:	bic.w	r0, r8, #128	; 0x80
   111e6:	orrs.w	r3, r2, r1
   111ea:	str	r0, [sp, #8]
   111ec:	bne.w	11722 <_svfprintf_r+0x9f2>
   111f0:	ldr	r3, [sp, #12]
   111f2:	cmp	r3, #0
   111f4:	bne.w	1172c <_svfprintf_r+0x9fc>
   111f8:	mov	r8, r0
   111fa:	movs	r3, #0
   111fc:	str	r3, [sp, #12]
   111fe:	str	r3, [sp, #20]
   11200:	add	r4, sp, #320	; 0x140
   11202:	b.n	11412 <_svfprintf_r+0x6e2>
   11204:	ldr	r3, [sp, #32]
   11206:	ldr.w	r2, [r3], #4
   1120a:	str	r2, [sp, #24]
   1120c:	cmp	r2, #0
   1120e:	bge.w	11a44 <_svfprintf_r+0xd14>
   11212:	ldr	r2, [sp, #24]
   11214:	str	r3, [sp, #32]
   11216:	negs	r2, r2
   11218:	str	r2, [sp, #24]
   1121a:	ldrb.w	r3, [r9]
   1121e:	orr.w	r8, r8, #4
   11222:	b.n	10de8 <_svfprintf_r+0xb8>
   11224:	ldrb.w	r3, [r9]
   11228:	orr.w	r8, r8, #8
   1122c:	b.n	10de8 <_svfprintf_r+0xb8>
   1122e:	orr.w	r8, r8, #16
   11232:	tst.w	r8, #32
   11236:	str	r3, [sp, #44]	; 0x2c
   11238:	ldr	r3, [sp, #32]
   1123a:	bne.n	111c0 <_svfprintf_r+0x490>
   1123c:	tst.w	r8, #16
   11240:	bne.w	11a5a <_svfprintf_r+0xd2a>
   11244:	tst.w	r8, #64	; 0x40
   11248:	beq.w	11a52 <_svfprintf_r+0xd22>
   1124c:	ldrsh.w	r2, [r3], #4
   11250:	str	r3, [sp, #32]
   11252:	asrs	r1, r2, #31
   11254:	mov	r3, r1
   11256:	b.n	111d4 <_svfprintf_r+0x4a4>
   11258:	ldr	r3, [sp, #32]
   1125a:	orr.w	r2, r8, #2
   1125e:	str	r2, [sp, #8]
   11260:	ldr.w	r2, [r3], #4
   11264:	str	r3, [sp, #32]
   11266:	movw	r3, #30768	; 0x7830
   1126a:	strh.w	r3, [sp, #104]	; 0x68
   1126e:	movs	r0, #120	; 0x78
   11270:	ldr	r3, [pc, #276]	; (11388 <_svfprintf_r+0x658>)
   11272:	str	r3, [sp, #68]	; 0x44
   11274:	movs	r1, #0
   11276:	movs	r3, #2
   11278:	str	r0, [sp, #44]	; 0x2c
   1127a:	movs	r0, #0
   1127c:	ldr	r4, [sp, #12]
   1127e:	strb.w	r0, [sp, #103]	; 0x67
   11282:	adds	r0, r4, #1
   11284:	beq.w	113e2 <_svfprintf_r+0x6b2>
   11288:	ldr	r0, [sp, #8]
   1128a:	bic.w	r8, r0, #128	; 0x80
   1128e:	orrs.w	r0, r2, r1
   11292:	bne.w	113de <_svfprintf_r+0x6ae>
   11296:	cmp	r4, #0
   11298:	bne.w	11ff8 <_svfprintf_r+0x12c8>
   1129c:	cmp	r3, #0
   1129e:	bne.n	111fa <_svfprintf_r+0x4ca>
   112a0:	ldr	r3, [sp, #8]
   112a2:	ands.w	r3, r3, #1
   112a6:	str	r3, [sp, #20]
   112a8:	beq.w	11a4e <_svfprintf_r+0xd1e>
   112ac:	movs	r3, #48	; 0x30
   112ae:	strb.w	r3, [sp, #319]	; 0x13f
   112b2:	addw	r4, sp, #319	; 0x13f
   112b6:	b.n	11412 <_svfprintf_r+0x6e2>
   112b8:	tst.w	r8, #32
   112bc:	bne.w	11a68 <_svfprintf_r+0xd38>
   112c0:	tst.w	r8, #16
   112c4:	bne.w	12006 <_svfprintf_r+0x12d6>
   112c8:	tst.w	r8, #64	; 0x40
   112cc:	bne.w	121fe <_svfprintf_r+0x14ce>
   112d0:	tst.w	r8, #512	; 0x200
   112d4:	beq.w	12006 <_svfprintf_r+0x12d6>
   112d8:	ldr	r3, [sp, #32]
   112da:	ldr	r1, [sp, #16]
   112dc:	ldr.w	r2, [r3], #4
   112e0:	str	r3, [sp, #32]
   112e2:	strb	r1, [r2, #0]
   112e4:	mov	r4, r9
   112e6:	b.n	10d94 <_svfprintf_r+0x64>
   112e8:	ldrb.w	r3, [r9]
   112ec:	cmp	r3, #104	; 0x68
   112ee:	ittte	eq
   112f0:	ldrbeq.w	r3, [r9, #1]
   112f4:	orreq.w	r8, r8, #512	; 0x200
   112f8:	addeq.w	r9, r9, #1
   112fc:	orrne.w	r8, r8, #64	; 0x40
   11300:	b.n	10de8 <_svfprintf_r+0xb8>
   11302:	ldrb.w	r3, [r9]
   11306:	strb.w	r5, [sp, #103]	; 0x67
   1130a:	b.n	10de8 <_svfprintf_r+0xb8>
   1130c:	ldrb.w	r3, [r9]
   11310:	cmp	r3, #108	; 0x6c
   11312:	ittte	eq
   11314:	ldrbeq.w	r3, [r9, #1]
   11318:	orreq.w	r8, r8, #32
   1131c:	addeq.w	r9, r9, #1
   11320:	orrne.w	r8, r8, #16
   11324:	b.n	10de8 <_svfprintf_r+0xb8>
   11326:	str	r3, [sp, #44]	; 0x2c
   11328:	orr.w	r8, r8, #16
   1132c:	ands.w	r1, r8, #32
   11330:	beq.w	119d6 <_svfprintf_r+0xca6>
   11334:	ldr	r3, [sp, #32]
   11336:	adds	r3, #7
   11338:	bic.w	r3, r3, #7
   1133c:	ldr	r1, [r3, #4]
   1133e:	ldr.w	r2, [r3], #8
   11342:	str	r3, [sp, #32]
   11344:	bic.w	r3, r8, #1024	; 0x400
   11348:	str	r3, [sp, #8]
   1134a:	movs	r3, #0
   1134c:	b.n	1127a <_svfprintf_r+0x54a>
   1134e:	str	r3, [sp, #44]	; 0x2c
   11350:	orr.w	r3, r8, #16
   11354:	str	r3, [sp, #8]
   11356:	ldr	r3, [sp, #8]
   11358:	ands.w	r1, r3, #32
   1135c:	beq.w	119b2 <_svfprintf_r+0xc82>
   11360:	ldr	r3, [sp, #32]
   11362:	adds	r3, #7
   11364:	bic.w	r3, r3, #7
   11368:	ldr	r1, [r3, #4]
   1136a:	ldr.w	r2, [r3], #8
   1136e:	str	r3, [sp, #32]
   11370:	movs	r3, #1
   11372:	b.n	1127a <_svfprintf_r+0x54a>
   11374:	ldrb.w	r3, [r9]
   11378:	orr.w	r8, r8, #128	; 0x80
   1137c:	b.n	10de8 <_svfprintf_r+0xb8>
   1137e:	nop
   11380:	.word	0x200009bc
   11384:	.word	0x200009c0
   11388:	.word	0x200009cc
   1138c:	mov	r1, r9
   1138e:	ldrb.w	r3, [r1], #1
   11392:	cmp	r3, #42	; 0x2a
   11394:	beq.w	1282a <_svfprintf_r+0x1afa>
   11398:	sub.w	r2, r3, #48	; 0x30
   1139c:	cmp	r2, #9
   1139e:	mov	r9, r1
   113a0:	it	ls
   113a2:	movls	r1, #0
   113a4:	bhi.w	12630 <_svfprintf_r+0x1900>
   113a8:	ldrb.w	r3, [r9], #1
   113ac:	add.w	r1, r1, r1, lsl #2
   113b0:	add.w	r1, r2, r1, lsl #1
   113b4:	sub.w	r2, r3, #48	; 0x30
   113b8:	cmp	r2, #9
   113ba:	bls.n	113a8 <_svfprintf_r+0x678>
   113bc:	str	r1, [sp, #12]
   113be:	b.n	10dec <_svfprintf_r+0xbc>
   113c0:	ldrb.w	r3, [r9]
   113c4:	orr.w	r8, r8, #1
   113c8:	b.n	10de8 <_svfprintf_r+0xb8>
   113ca:	ldrb.w	r3, [sp, #103]	; 0x67
   113ce:	cmp	r3, #0
   113d0:	bne.w	10ef2 <_svfprintf_r+0x1c2>
   113d4:	ldrb.w	r3, [r9]
   113d8:	strb.w	r6, [sp, #103]	; 0x67
   113dc:	b.n	10de8 <_svfprintf_r+0xb8>
   113de:	str.w	r8, [sp, #8]
   113e2:	cmp	r3, #1
   113e4:	beq.w	11722 <_svfprintf_r+0x9f2>
   113e8:	cmp	r3, #2
   113ea:	add	r4, sp, #320	; 0x140
   113ec:	bne.n	11430 <_svfprintf_r+0x700>
   113ee:	ldr	r0, [sp, #68]	; 0x44
   113f0:	and.w	r3, r2, #15
   113f4:	lsrs	r2, r2, #4
   113f6:	ldrb	r3, [r0, r3]
   113f8:	strb.w	r3, [r4, #-1]!
   113fc:	orr.w	r2, r2, r1, lsl #28
   11400:	lsrs	r1, r1, #4
   11402:	orrs.w	r3, r2, r1
   11406:	bne.n	113f0 <_svfprintf_r+0x6c0>
   11408:	add	r3, sp, #320	; 0x140
   1140a:	subs	r3, r3, r4
   1140c:	ldr.w	r8, [sp, #8]
   11410:	str	r3, [sp, #20]
   11412:	ldr	r2, [sp, #20]
   11414:	ldr	r0, [sp, #12]
   11416:	ldrb.w	r1, [sp, #103]	; 0x67
   1141a:	cmp	r2, r0
   1141c:	mov.w	r3, #0
   11420:	it	lt
   11422:	movlt	r2, r0
   11424:	strd	r3, r3, [sp, #48]	; 0x30
   11428:	str	r3, [sp, #28]
   1142a:	str	r2, [sp, #8]
   1142c:	str	r3, [sp, #60]	; 0x3c
   1142e:	b.n	110f2 <_svfprintf_r+0x3c2>
   11430:	and.w	r3, r2, #7
   11434:	lsrs	r2, r2, #3
   11436:	orr.w	r2, r2, r1, lsl #29
   1143a:	lsrs	r1, r1, #3
   1143c:	adds	r3, #48	; 0x30
   1143e:	orrs.w	r5, r2, r1
   11442:	mov	r0, r4
   11444:	strb.w	r3, [r4, #-1]!
   11448:	bne.n	11430 <_svfprintf_r+0x700>
   1144a:	ldr	r2, [sp, #8]
   1144c:	lsls	r1, r2, #31
   1144e:	bmi.w	118ec <_svfprintf_r+0xbbc>
   11452:	add	r3, sp, #320	; 0x140
   11454:	subs	r3, r3, r4
   11456:	mov	r8, r2
   11458:	str	r3, [sp, #20]
   1145a:	b.n	11412 <_svfprintf_r+0x6e2>
   1145c:	ldr	r3, [sp, #44]	; 0x2c
   1145e:	cmp	r3, #101	; 0x65
   11460:	ble.w	1160c <_svfprintf_r+0x8dc>
   11464:	vcmp.f64	d8, #0.0
   11468:	vmrs	APSR_nzcv, fpscr
   1146c:	bne.w	117f2 <_svfprintf_r+0xac2>
   11470:	ldr	r3, [sp, #148]	; 0x94
   11472:	ldr	r1, [pc, #744]	; (1175c <_svfprintf_r+0xa2c>)
   11474:	str.w	r1, [sl]
   11478:	adds	r3, #1
   1147a:	adds	r2, #1
   1147c:	movs	r1, #1
   1147e:	cmp	r3, #7
   11480:	str	r2, [sp, #152]	; 0x98
   11482:	str	r3, [sp, #148]	; 0x94
   11484:	str.w	r1, [sl, #4]
   11488:	bgt.w	11f2e <_svfprintf_r+0x11fe>
   1148c:	add.w	sl, sl, #8
   11490:	ldr	r3, [sp, #108]	; 0x6c
   11492:	ldr	r1, [sp, #56]	; 0x38
   11494:	cmp	r3, r1
   11496:	bge.w	11a3a <_svfprintf_r+0xd0a>
   1149a:	ldr	r3, [sp, #64]	; 0x40
   1149c:	ldr	r1, [sp, #72]	; 0x48
   1149e:	add	r2, r3
   114a0:	strd	r1, r3, [sl]
   114a4:	ldr	r3, [sp, #148]	; 0x94
   114a6:	str	r2, [sp, #152]	; 0x98
   114a8:	adds	r3, #1
   114aa:	cmp	r3, #7
   114ac:	str	r3, [sp, #148]	; 0x94
   114ae:	bgt.w	11be0 <_svfprintf_r+0xeb0>
   114b2:	add.w	sl, sl, #8
   114b6:	ldr	r3, [sp, #56]	; 0x38
   114b8:	subs	r4, r3, #1
   114ba:	cmp	r4, #0
   114bc:	ble.w	11060 <_svfprintf_r+0x330>
   114c0:	cmp	r4, #16
   114c2:	ldr	r3, [sp, #148]	; 0x94
   114c4:	ble.w	11fa4 <_svfprintf_r+0x1274>
   114c8:	vmov	r6, s22
   114cc:	movs	r5, #16
   114ce:	b.n	114dc <_svfprintf_r+0x7ac>
   114d0:	add.w	sl, sl, #8
   114d4:	subs	r4, #16
   114d6:	cmp	r4, #16
   114d8:	ble.w	11fa4 <_svfprintf_r+0x1274>
   114dc:	adds	r3, #1
   114de:	ldr	r1, [pc, #640]	; (11760 <_svfprintf_r+0xa30>)
   114e0:	adds	r2, #16
   114e2:	cmp	r3, #7
   114e4:	strd	r1, r5, [sl]
   114e8:	strd	r3, r2, [sp, #148]	; 0x94
   114ec:	ble.n	114d0 <_svfprintf_r+0x7a0>
   114ee:	add	r2, sp, #144	; 0x90
   114f0:	mov	r1, r6
   114f2:	mov	r0, fp
   114f4:	bl	15a48 <__ssprint_r>
   114f8:	cmp	r0, #0
   114fa:	bne.n	115fa <_svfprintf_r+0x8ca>
   114fc:	ldrd	r3, r2, [sp, #148]	; 0x94
   11500:	add.w	sl, sp, #156	; 0x9c
   11504:	b.n	114d4 <_svfprintf_r+0x7a4>
   11506:	ldr	r3, [sp, #24]
   11508:	ldr	r1, [sp, #8]
   1150a:	subs	r5, r3, r1
   1150c:	cmp	r5, #0
   1150e:	ble.w	1102e <_svfprintf_r+0x2fe>
   11512:	cmp	r5, #16
   11514:	ldr	r3, [sp, #148]	; 0x94
   11516:	ble.n	1155c <_svfprintf_r+0x82c>
   11518:	str	r4, [sp, #36]	; 0x24
   1151a:	movs	r6, #16
   1151c:	vmov	r4, s22
   11520:	b.n	1152c <_svfprintf_r+0x7fc>
   11522:	subs	r5, #16
   11524:	cmp	r5, #16
   11526:	add.w	sl, sl, #8
   1152a:	ble.n	1155a <_svfprintf_r+0x82a>
   1152c:	adds	r3, #1
   1152e:	ldr	r1, [pc, #560]	; (11760 <_svfprintf_r+0xa30>)
   11530:	adds	r2, #16
   11532:	cmp	r3, #7
   11534:	strd	r1, r6, [sl]
   11538:	strd	r3, r2, [sp, #148]	; 0x94
   1153c:	ble.n	11522 <_svfprintf_r+0x7f2>
   1153e:	add	r2, sp, #144	; 0x90
   11540:	mov	r1, r4
   11542:	mov	r0, fp
   11544:	add.w	sl, sp, #156	; 0x9c
   11548:	bl	15a48 <__ssprint_r>
   1154c:	cmp	r0, #0
   1154e:	bne.n	115fa <_svfprintf_r+0x8ca>
   11550:	subs	r5, #16
   11552:	cmp	r5, #16
   11554:	ldrd	r3, r2, [sp, #148]	; 0x94
   11558:	bgt.n	1152c <_svfprintf_r+0x7fc>
   1155a:	ldr	r4, [sp, #36]	; 0x24
   1155c:	ldr	r1, [pc, #512]	; (11760 <_svfprintf_r+0xa30>)
   1155e:	str.w	r5, [sl, #4]
   11562:	adds	r3, #1
   11564:	add	r2, r5
   11566:	cmp	r3, #7
   11568:	strd	r3, r2, [sp, #148]	; 0x94
   1156c:	str.w	r1, [sl]
   11570:	bgt.w	11fc0 <_svfprintf_r+0x1290>
   11574:	ldr	r3, [sp, #12]
   11576:	ldr	r1, [sp, #20]
   11578:	subs	r5, r3, r1
   1157a:	cmp	r5, #0
   1157c:	add.w	sl, sl, #8
   11580:	ble.w	1103a <_svfprintf_r+0x30a>
   11584:	cmp	r5, #16
   11586:	ldr	r3, [sp, #148]	; 0x94
   11588:	ble.n	115ca <_svfprintf_r+0x89a>
   1158a:	mov	r1, sl
   1158c:	movs	r6, #16
   1158e:	vmov	sl, s22
   11592:	b.n	1159e <_svfprintf_r+0x86e>
   11594:	subs	r5, #16
   11596:	cmp	r5, #16
   11598:	add.w	r1, r1, #8
   1159c:	ble.n	115c8 <_svfprintf_r+0x898>
   1159e:	adds	r3, #1
   115a0:	ldr	r0, [pc, #444]	; (11760 <_svfprintf_r+0xa30>)
   115a2:	adds	r2, #16
   115a4:	cmp	r3, #7
   115a6:	strd	r0, r6, [r1]
   115aa:	strd	r3, r2, [sp, #148]	; 0x94
   115ae:	ble.n	11594 <_svfprintf_r+0x864>
   115b0:	add	r2, sp, #144	; 0x90
   115b2:	mov	r1, sl
   115b4:	mov	r0, fp
   115b6:	bl	15a48 <__ssprint_r>
   115ba:	cbnz	r0, 115fa <_svfprintf_r+0x8ca>
   115bc:	subs	r5, #16
   115be:	cmp	r5, #16
   115c0:	ldrd	r3, r2, [sp, #148]	; 0x94
   115c4:	add	r1, sp, #156	; 0x9c
   115c6:	bgt.n	1159e <_svfprintf_r+0x86e>
   115c8:	mov	sl, r1
   115ca:	adds	r3, #1
   115cc:	ldr	r1, [pc, #400]	; (11760 <_svfprintf_r+0xa30>)
   115ce:	str.w	r5, [sl, #4]
   115d2:	add	r2, r5
   115d4:	cmp	r3, #7
   115d6:	strd	r3, r2, [sp, #148]	; 0x94
   115da:	str.w	r1, [sl]
   115de:	bgt.w	11996 <_svfprintf_r+0xc66>
   115e2:	add.w	sl, sl, #8
   115e6:	b.n	1103a <_svfprintf_r+0x30a>
   115e8:	vmov	r1, s22
   115ec:	add	r2, sp, #144	; 0x90
   115ee:	mov	r0, fp
   115f0:	bl	15a48 <__ssprint_r>
   115f4:	cmp	r0, #0
   115f6:	beq.w	11088 <_svfprintf_r+0x358>
   115fa:	ldr	r3, [sp, #28]
   115fc:	cmp	r3, #0
   115fe:	beq.w	10f46 <_svfprintf_r+0x216>
   11602:	ldr	r1, [sp, #28]
   11604:	mov	r0, fp
   11606:	bl	f7a4 <_free_r>
   1160a:	b.n	10f46 <_svfprintf_r+0x216>
   1160c:	ldr	r3, [sp, #56]	; 0x38
   1160e:	cmp	r3, #1
   11610:	ble.w	11908 <_svfprintf_r+0xbd8>
   11614:	ldr	r3, [sp, #148]	; 0x94
   11616:	str.w	r4, [sl]
   1161a:	adds	r3, #1
   1161c:	adds	r2, #1
   1161e:	movs	r1, #1
   11620:	cmp	r3, #7
   11622:	str	r2, [sp, #152]	; 0x98
   11624:	str	r3, [sp, #148]	; 0x94
   11626:	str.w	r1, [sl, #4]
   1162a:	bgt.w	11a1e <_svfprintf_r+0xcee>
   1162e:	add.w	sl, sl, #8
   11632:	ldr	r1, [sp, #64]	; 0x40
   11634:	ldr	r0, [sp, #72]	; 0x48
   11636:	adds	r3, #1
   11638:	add	r2, r1
   1163a:	cmp	r3, #7
   1163c:	strd	r0, r1, [sl]
   11640:	strd	r3, r2, [sp, #148]	; 0x94
   11644:	bgt.w	11a02 <_svfprintf_r+0xcd2>
   11648:	add.w	sl, sl, #8
   1164c:	vcmp.f64	d8, #0.0
   11650:	vmrs	APSR_nzcv, fpscr
   11654:	beq.w	11946 <_svfprintf_r+0xc16>
   11658:	ldr	r1, [sp, #56]	; 0x38
   1165a:	adds	r3, #1
   1165c:	subs	r1, #1
   1165e:	adds	r4, #1
   11660:	add	r2, r1
   11662:	cmp	r3, #7
   11664:	str.w	r4, [sl]
   11668:	str	r3, [sp, #148]	; 0x94
   1166a:	str.w	r1, [sl, #4]
   1166e:	str	r2, [sp, #152]	; 0x98
   11670:	bgt.w	1192a <_svfprintf_r+0xbfa>
   11674:	add.w	sl, sl, #8
   11678:	ldr	r1, [sp, #80]	; 0x50
   1167a:	str.w	r1, [sl, #4]
   1167e:	adds	r3, #1
   11680:	add	r2, r1
   11682:	cmp	r3, #7
   11684:	add	r1, sp, #120	; 0x78
   11686:	strd	r3, r2, [sp, #148]	; 0x94
   1168a:	str.w	r1, [sl]
   1168e:	ble.w	1105c <_svfprintf_r+0x32c>
   11692:	vmov	r1, s22
   11696:	add	r2, sp, #144	; 0x90
   11698:	mov	r0, fp
   1169a:	bl	15a48 <__ssprint_r>
   1169e:	cmp	r0, #0
   116a0:	bne.n	115fa <_svfprintf_r+0x8ca>
   116a2:	ldr	r2, [sp, #152]	; 0x98
   116a4:	add.w	sl, sp, #156	; 0x9c
   116a8:	b.n	11060 <_svfprintf_r+0x330>
   116aa:	cmp	r5, #16
   116ac:	ldrd	r1, r2, [sp, #148]	; 0x94
   116b0:	ldr	r6, [pc, #176]	; (11764 <_svfprintf_r+0xa34>)
   116b2:	ble.n	116fe <_svfprintf_r+0x9ce>
   116b4:	str	r4, [sp, #92]	; 0x5c
   116b6:	movs	r3, #16
   116b8:	vmov	r4, s22
   116bc:	mov	r0, r1
   116be:	b.n	116ca <_svfprintf_r+0x99a>
   116c0:	subs	r5, #16
   116c2:	cmp	r5, #16
   116c4:	add.w	sl, sl, #8
   116c8:	ble.n	116fa <_svfprintf_r+0x9ca>
   116ca:	adds	r0, #1
   116cc:	adds	r2, #16
   116ce:	cmp	r0, #7
   116d0:	strd	r6, r3, [sl]
   116d4:	strd	r0, r2, [sp, #148]	; 0x94
   116d8:	ble.n	116c0 <_svfprintf_r+0x990>
   116da:	add	r2, sp, #144	; 0x90
   116dc:	mov	r1, r4
   116de:	mov	r0, fp
   116e0:	add.w	sl, sp, #156	; 0x9c
   116e4:	bl	15a48 <__ssprint_r>
   116e8:	cmp	r0, #0
   116ea:	bne.n	115fa <_svfprintf_r+0x8ca>
   116ec:	subs	r5, #16
   116ee:	cmp	r5, #16
   116f0:	ldrd	r0, r2, [sp, #148]	; 0x94
   116f4:	mov.w	r3, #16
   116f8:	bgt.n	116ca <_svfprintf_r+0x99a>
   116fa:	ldr	r4, [sp, #92]	; 0x5c
   116fc:	mov	r1, r0
   116fe:	adds	r1, #1
   11700:	add	r2, r5
   11702:	cmp	r1, #7
   11704:	strd	r1, r2, [sp, #148]	; 0x94
   11708:	str.w	r6, [sl]
   1170c:	str.w	r5, [sl, #4]
   11710:	bgt.w	11e8e <_svfprintf_r+0x115e>
   11714:	ldrb.w	r1, [sp, #103]	; 0x67
   11718:	add.w	sl, sl, #8
   1171c:	b.n	10fda <_svfprintf_r+0x2aa>
   1171e:	str.w	r8, [sp, #8]
   11722:	cmp	r2, #10
   11724:	sbcs.w	r3, r1, #0
   11728:	bcs.w	11db6 <_svfprintf_r+0x1086>
   1172c:	adds	r2, #48	; 0x30
   1172e:	movs	r3, #1
   11730:	ldr.w	r8, [sp, #8]
   11734:	strb.w	r2, [sp, #319]	; 0x13f
   11738:	str	r3, [sp, #20]
   1173a:	addw	r4, sp, #319	; 0x13f
   1173e:	b.n	11412 <_svfprintf_r+0x6e2>
   11740:	vmov	r1, s22
   11744:	add	r2, sp, #144	; 0x90
   11746:	mov	r0, fp
   11748:	bl	15a48 <__ssprint_r>
   1174c:	cmp	r0, #0
   1174e:	bne.w	115fa <_svfprintf_r+0x8ca>
   11752:	ldr	r2, [sp, #152]	; 0x98
   11754:	add.w	sl, sp, #156	; 0x9c
   11758:	b.n	11000 <_svfprintf_r+0x2d0>
   1175a:	nop
   1175c:	.word	0x200009fc
   11760:	.word	0x2000789c
   11764:	.word	0x20002478
   11768:	vmov	r1, s22
   1176c:	add	r2, sp, #144	; 0x90
   1176e:	mov	r0, fp
   11770:	bl	15a48 <__ssprint_r>
   11774:	cmp	r0, #0
   11776:	bne.w	115fa <_svfprintf_r+0x8ca>
   1177a:	ldr	r2, [sp, #152]	; 0x98
   1177c:	add.w	sl, sp, #156	; 0x9c
   11780:	b.n	11026 <_svfprintf_r+0x2f6>
   11782:	cmp	r4, #16
   11784:	ldr	r3, [sp, #148]	; 0x94
   11786:	ldr	r6, [pc, #760]	; (11a80 <_svfprintf_r+0xd50>)
   11788:	ble.n	117ca <_svfprintf_r+0xa9a>
   1178a:	vmov	r8, s22
   1178e:	movs	r5, #16
   11790:	b.n	1179c <_svfprintf_r+0xa6c>
   11792:	subs	r4, #16
   11794:	cmp	r4, #16
   11796:	add.w	sl, sl, #8
   1179a:	ble.n	117ca <_svfprintf_r+0xa9a>
   1179c:	adds	r3, #1
   1179e:	adds	r2, #16
   117a0:	cmp	r3, #7
   117a2:	strd	r6, r5, [sl]
   117a6:	strd	r3, r2, [sp, #148]	; 0x94
   117aa:	ble.n	11792 <_svfprintf_r+0xa62>
   117ac:	add	r2, sp, #144	; 0x90
   117ae:	mov	r1, r8
   117b0:	mov	r0, fp
   117b2:	add.w	sl, sp, #156	; 0x9c
   117b6:	bl	15a48 <__ssprint_r>
   117ba:	cmp	r0, #0
   117bc:	bne.w	115fa <_svfprintf_r+0x8ca>
   117c0:	subs	r4, #16
   117c2:	cmp	r4, #16
   117c4:	ldrd	r3, r2, [sp, #148]	; 0x94
   117c8:	bgt.n	1179c <_svfprintf_r+0xa6c>
   117ca:	adds	r3, #1
   117cc:	add	r2, r4
   117ce:	cmp	r3, #7
   117d0:	strd	r6, r4, [sl]
   117d4:	strd	r3, r2, [sp, #148]	; 0x94
   117d8:	ble.w	11072 <_svfprintf_r+0x342>
   117dc:	vmov	r1, s22
   117e0:	add	r2, sp, #144	; 0x90
   117e2:	mov	r0, fp
   117e4:	bl	15a48 <__ssprint_r>
   117e8:	cmp	r0, #0
   117ea:	bne.w	115fa <_svfprintf_r+0x8ca>
   117ee:	ldr	r2, [sp, #152]	; 0x98
   117f0:	b.n	11072 <_svfprintf_r+0x342>
   117f2:	ldr	r1, [sp, #108]	; 0x6c
   117f4:	cmp	r1, #0
   117f6:	ble.w	11eae <_svfprintf_r+0x117e>
   117fa:	ldr	r6, [sp, #48]	; 0x30
   117fc:	ldr	r3, [sp, #56]	; 0x38
   117fe:	cmp	r6, r3
   11800:	it	ge
   11802:	movge	r6, r3
   11804:	cmp	r6, #0
   11806:	ble.n	11820 <_svfprintf_r+0xaf0>
   11808:	ldr	r3, [sp, #148]	; 0x94
   1180a:	adds	r3, #1
   1180c:	add	r2, r6
   1180e:	cmp	r3, #7
   11810:	strd	r4, r6, [sl]
   11814:	str	r2, [sp, #152]	; 0x98
   11816:	str	r3, [sp, #148]	; 0x94
   11818:	bgt.w	1252e <_svfprintf_r+0x17fe>
   1181c:	add.w	sl, sl, #8
   11820:	ldr	r5, [sp, #48]	; 0x30
   11822:	cmp	r6, #0
   11824:	it	ge
   11826:	subge	r5, r5, r6
   11828:	cmp	r5, #0
   1182a:	bgt.w	11c34 <_svfprintf_r+0xf04>
   1182e:	ldr	r3, [sp, #48]	; 0x30
   11830:	tst.w	r8, #1024	; 0x400
   11834:	add	r3, r4
   11836:	str	r3, [sp, #20]
   11838:	bne.w	11c7a <_svfprintf_r+0xf4a>
   1183c:	ldr	r3, [sp, #108]	; 0x6c
   1183e:	ldr	r1, [sp, #56]	; 0x38
   11840:	cmp	r3, r1
   11842:	blt.n	1184c <_svfprintf_r+0xb1c>
   11844:	tst.w	r8, #1
   11848:	beq.w	121ea <_svfprintf_r+0x14ba>
   1184c:	ldr	r1, [sp, #64]	; 0x40
   1184e:	ldr	r0, [sp, #72]	; 0x48
   11850:	add	r2, r1
   11852:	strd	r0, r1, [sl]
   11856:	ldr	r1, [sp, #148]	; 0x94
   11858:	str	r2, [sp, #152]	; 0x98
   1185a:	adds	r1, #1
   1185c:	cmp	r1, #7
   1185e:	str	r1, [sp, #148]	; 0x94
   11860:	bgt.w	125ae <_svfprintf_r+0x187e>
   11864:	add.w	sl, sl, #8
   11868:	ldr	r1, [sp, #56]	; 0x38
   1186a:	adds	r5, r4, r1
   1186c:	subs	r4, r1, r3
   1186e:	ldr	r3, [sp, #20]
   11870:	subs	r5, r5, r3
   11872:	cmp	r5, r4
   11874:	it	ge
   11876:	movge	r5, r4
   11878:	cmp	r5, #0
   1187a:	ble.n	11898 <_svfprintf_r+0xb68>
   1187c:	str.w	r3, [sl]
   11880:	ldr	r3, [sp, #148]	; 0x94
   11882:	str.w	r5, [sl, #4]
   11886:	adds	r3, #1
   11888:	add	r2, r5
   1188a:	cmp	r3, #7
   1188c:	str	r2, [sp, #152]	; 0x98
   1188e:	str	r3, [sp, #148]	; 0x94
   11890:	bgt.w	1260a <_svfprintf_r+0x18da>
   11894:	add.w	sl, sl, #8
   11898:	cmp	r5, #0
   1189a:	it	ge
   1189c:	subge	r4, r4, r5
   1189e:	cmp	r4, #0
   118a0:	ble.w	11060 <_svfprintf_r+0x330>
   118a4:	cmp	r4, #16
   118a6:	ldr	r3, [sp, #148]	; 0x94
   118a8:	ble.w	11fa4 <_svfprintf_r+0x1274>
   118ac:	vmov	r6, s22
   118b0:	movs	r5, #16
   118b2:	b.n	118c0 <_svfprintf_r+0xb90>
   118b4:	add.w	sl, sl, #8
   118b8:	subs	r4, #16
   118ba:	cmp	r4, #16
   118bc:	ble.w	11fa4 <_svfprintf_r+0x1274>
   118c0:	adds	r3, #1
   118c2:	ldr	r1, [pc, #448]	; (11a84 <_svfprintf_r+0xd54>)
   118c4:	adds	r2, #16
   118c6:	cmp	r3, #7
   118c8:	strd	r1, r5, [sl]
   118cc:	strd	r3, r2, [sp, #148]	; 0x94
   118d0:	ble.n	118b4 <_svfprintf_r+0xb84>
   118d2:	add	r2, sp, #144	; 0x90
   118d4:	mov	r1, r6
   118d6:	mov	r0, fp
   118d8:	bl	15a48 <__ssprint_r>
   118dc:	cmp	r0, #0
   118de:	bne.w	115fa <_svfprintf_r+0x8ca>
   118e2:	ldrd	r3, r2, [sp, #148]	; 0x94
   118e6:	add.w	sl, sp, #156	; 0x9c
   118ea:	b.n	118b8 <_svfprintf_r+0xb88>
   118ec:	cmp	r3, #48	; 0x30
   118ee:	beq.w	11408 <_svfprintf_r+0x6d8>
   118f2:	movs	r3, #48	; 0x30
   118f4:	subs	r0, #2
   118f6:	strb.w	r3, [r4, #-1]
   118fa:	add	r3, sp, #320	; 0x140
   118fc:	subs	r3, r3, r0
   118fe:	ldr.w	r8, [sp, #8]
   11902:	str	r3, [sp, #20]
   11904:	mov	r4, r0
   11906:	b.n	11412 <_svfprintf_r+0x6e2>
   11908:	tst.w	r8, #1
   1190c:	bne.w	11614 <_svfprintf_r+0x8e4>
   11910:	ldr	r3, [sp, #148]	; 0x94
   11912:	str.w	r4, [sl]
   11916:	adds	r3, #1
   11918:	adds	r2, #1
   1191a:	movs	r1, #1
   1191c:	cmp	r3, #7
   1191e:	str	r2, [sp, #152]	; 0x98
   11920:	str	r3, [sp, #148]	; 0x94
   11922:	str.w	r1, [sl, #4]
   11926:	ble.w	11674 <_svfprintf_r+0x944>
   1192a:	vmov	r1, s22
   1192e:	add	r2, sp, #144	; 0x90
   11930:	mov	r0, fp
   11932:	bl	15a48 <__ssprint_r>
   11936:	cmp	r0, #0
   11938:	bne.w	115fa <_svfprintf_r+0x8ca>
   1193c:	ldrd	r3, r2, [sp, #148]	; 0x94
   11940:	add.w	sl, sp, #156	; 0x9c
   11944:	b.n	11678 <_svfprintf_r+0x948>
   11946:	ldr	r1, [sp, #56]	; 0x38
   11948:	subs	r4, r1, #1
   1194a:	cmp	r4, #0
   1194c:	ble.w	11678 <_svfprintf_r+0x948>
   11950:	cmp	r4, #16
   11952:	ble.w	12018 <_svfprintf_r+0x12e8>
   11956:	vmov	r6, s22
   1195a:	movs	r5, #16
   1195c:	b.n	1196a <_svfprintf_r+0xc3a>
   1195e:	add.w	sl, sl, #8
   11962:	subs	r4, #16
   11964:	cmp	r4, #16
   11966:	ble.w	12018 <_svfprintf_r+0x12e8>
   1196a:	adds	r3, #1
   1196c:	ldr	r1, [pc, #276]	; (11a84 <_svfprintf_r+0xd54>)
   1196e:	adds	r2, #16
   11970:	cmp	r3, #7
   11972:	strd	r1, r5, [sl]
   11976:	strd	r3, r2, [sp, #148]	; 0x94
   1197a:	ble.n	1195e <_svfprintf_r+0xc2e>
   1197c:	add	r2, sp, #144	; 0x90
   1197e:	mov	r1, r6
   11980:	mov	r0, fp
   11982:	bl	15a48 <__ssprint_r>
   11986:	cmp	r0, #0
   11988:	bne.w	115fa <_svfprintf_r+0x8ca>
   1198c:	ldrd	r3, r2, [sp, #148]	; 0x94
   11990:	add.w	sl, sp, #156	; 0x9c
   11994:	b.n	11962 <_svfprintf_r+0xc32>
   11996:	vmov	r1, s22
   1199a:	add	r2, sp, #144	; 0x90
   1199c:	mov	r0, fp
   1199e:	bl	15a48 <__ssprint_r>
   119a2:	cmp	r0, #0
   119a4:	bne.w	115fa <_svfprintf_r+0x8ca>
   119a8:	ldr	r2, [sp, #152]	; 0x98
   119aa:	add.w	sl, sp, #156	; 0x9c
   119ae:	b.w	1103a <_svfprintf_r+0x30a>
   119b2:	ldr	r3, [sp, #8]
   119b4:	ands.w	r3, r3, #16
   119b8:	bne.w	11b3e <_svfprintf_r+0xe0e>
   119bc:	ldr	r2, [sp, #8]
   119be:	ands.w	r2, r2, #64	; 0x40
   119c2:	beq.w	120ba <_svfprintf_r+0x138a>
   119c6:	ldr	r0, [sp, #32]
   119c8:	ldr.w	r2, [r0], #4
   119cc:	str	r0, [sp, #32]
   119ce:	mov	r1, r3
   119d0:	uxth	r2, r2
   119d2:	movs	r3, #1
   119d4:	b.n	1127a <_svfprintf_r+0x54a>
   119d6:	ands.w	r3, r8, #16
   119da:	bne.n	11a88 <_svfprintf_r+0xd58>
   119dc:	ands.w	r2, r8, #64	; 0x40
   119e0:	beq.w	1209e <_svfprintf_r+0x136e>
   119e4:	ldr	r0, [sp, #32]
   119e6:	ldr.w	r2, [r0], #4
   119ea:	str	r0, [sp, #32]
   119ec:	mov	r1, r3
   119ee:	uxth	r2, r2
   119f0:	b.n	11344 <_svfprintf_r+0x614>
   119f2:	negs	r2, r2
   119f4:	sbc.w	r1, r1, r1, lsl #1
   119f8:	str.w	r8, [sp, #8]
   119fc:	movs	r0, #45	; 0x2d
   119fe:	movs	r3, #1
   11a00:	b.n	1127c <_svfprintf_r+0x54c>
   11a02:	vmov	r1, s22
   11a06:	add	r2, sp, #144	; 0x90
   11a08:	mov	r0, fp
   11a0a:	bl	15a48 <__ssprint_r>
   11a0e:	cmp	r0, #0
   11a10:	bne.w	115fa <_svfprintf_r+0x8ca>
   11a14:	ldrd	r3, r2, [sp, #148]	; 0x94
   11a18:	add.w	sl, sp, #156	; 0x9c
   11a1c:	b.n	1164c <_svfprintf_r+0x91c>
   11a1e:	vmov	r1, s22
   11a22:	add	r2, sp, #144	; 0x90
   11a24:	mov	r0, fp
   11a26:	bl	15a48 <__ssprint_r>
   11a2a:	cmp	r0, #0
   11a2c:	bne.w	115fa <_svfprintf_r+0x8ca>
   11a30:	ldrd	r3, r2, [sp, #148]	; 0x94
   11a34:	add.w	sl, sp, #156	; 0x9c
   11a38:	b.n	11632 <_svfprintf_r+0x902>
   11a3a:	tst.w	r8, #1
   11a3e:	beq.w	11060 <_svfprintf_r+0x330>
   11a42:	b.n	1149a <_svfprintf_r+0x76a>
   11a44:	str	r3, [sp, #32]
   11a46:	ldrb.w	r3, [r9]
   11a4a:	b.w	10de8 <_svfprintf_r+0xb8>
   11a4e:	add	r4, sp, #320	; 0x140
   11a50:	b.n	11412 <_svfprintf_r+0x6e2>
   11a52:	tst.w	r8, #512	; 0x200
   11a56:	bne.w	12210 <_svfprintf_r+0x14e0>
   11a5a:	ldr.w	r2, [r3], #4
   11a5e:	str	r3, [sp, #32]
   11a60:	asrs	r1, r2, #31
   11a62:	mov	r3, r1
   11a64:	b.w	111d4 <_svfprintf_r+0x4a4>
   11a68:	ldr	r3, [sp, #32]
   11a6a:	ldr	r0, [sp, #16]
   11a6c:	ldr.w	r1, [r3], #4
   11a70:	str	r3, [sp, #32]
   11a72:	asrs	r2, r0, #31
   11a74:	strd	r0, r2, [r1]
   11a78:	mov	r4, r9
   11a7a:	b.w	10d94 <_svfprintf_r+0x64>
   11a7e:	nop
   11a80:	.word	0x20002478
   11a84:	.word	0x2000789c
   11a88:	ldr	r3, [sp, #32]
   11a8a:	ldr.w	r2, [r3], #4
   11a8e:	str	r3, [sp, #32]
   11a90:	b.n	11344 <_svfprintf_r+0x614>
   11a92:	vcmp.f64	d8, d8
   11a96:	vmrs	APSR_nzcv, fpscr
   11a9a:	bvs.w	127c6 <_svfprintf_r+0x1a96>
   11a9e:	ldr	r3, [sp, #44]	; 0x2c
   11aa0:	cmp	r3, #97	; 0x61
   11aa2:	beq.w	1254a <_svfprintf_r+0x181a>
   11aa6:	cmp	r3, #65	; 0x41
   11aa8:	beq.w	1262c <_svfprintf_r+0x18fc>
   11aac:	ldr	r3, [sp, #12]
   11aae:	adds	r3, #1
   11ab0:	ldr	r3, [sp, #44]	; 0x2c
   11ab2:	bic.w	r5, r3, #32
   11ab6:	beq.w	123ba <_svfprintf_r+0x168a>
   11aba:	cmp	r5, #71	; 0x47
   11abc:	bne.n	11ac8 <_svfprintf_r+0xd98>
   11abe:	ldr	r3, [sp, #12]
   11ac0:	cmp	r3, #0
   11ac2:	it	eq
   11ac4:	moveq	r3, #1
   11ac6:	str	r3, [sp, #12]
   11ac8:	vmov	r3, s17
   11acc:	cmp	r3, #0
   11ace:	orr.w	r2, r8, #256	; 0x100
   11ad2:	mov	r6, r8
   11ad4:	blt.w	12708 <_svfprintf_r+0x19d8>
   11ad8:	vmov.f64	d10, d8
   11adc:	movs	r3, #0
   11ade:	mov	r8, r2
   11ae0:	str	r3, [sp, #36]	; 0x24
   11ae2:	str	r3, [sp, #28]
   11ae4:	ldr	r3, [sp, #44]	; 0x2c
   11ae6:	subs	r3, #65	; 0x41
   11ae8:	cmp	r3, #37	; 0x25
   11aea:	bhi.w	1221e <_svfprintf_r+0x14ee>
   11aee:	tbh	[pc, r3, lsl #1]
   11af2:	.short	0x046f
   11af4:	.word	0x03960396
   11af8:	.word	0x04680396
   11afc:	.word	0x0396046c
   11b00:	.word	0x03960396
   11b04:	.word	0x03960396
   11b08:	.word	0x03960396
   11b0c:	.word	0x03960396
   11b10:	.word	0x03960396
   11b14:	.word	0x03960396
   11b18:	.word	0x03960396
   11b1c:	.word	0x03960396
   11b20:	.word	0x03960396
   11b24:	.word	0x03960396
   11b28:	.word	0x03960396
   11b2c:	.word	0x03960396
   11b30:	.word	0x03960396
   11b34:	.word	0x03960396
   11b38:	.word	0x04680396
   11b3c:	.short	0x046c
   11b3e:	ldr	r3, [sp, #32]
   11b40:	ldr.w	r2, [r3], #4
   11b44:	str	r3, [sp, #32]
   11b46:	movs	r3, #1
   11b48:	b.w	1127a <_svfprintf_r+0x54a>
   11b4c:	ldr	r3, [sp, #76]	; 0x4c
   11b4e:	cmp	r3, #0
   11b50:	beq.w	10ef2 <_svfprintf_r+0x1c2>
   11b54:	ldr	r3, [sp, #76]	; 0x4c
   11b56:	ldrb	r3, [r3, #0]
   11b58:	cmp	r3, #0
   11b5a:	beq.w	10ef2 <_svfprintf_r+0x1c2>
   11b5e:	ldrb.w	r3, [r9]
   11b62:	orr.w	r8, r8, #1024	; 0x400
   11b66:	b.w	10de8 <_svfprintf_r+0xb8>
   11b6a:	str	r3, [sp, #44]	; 0x2c
   11b6c:	str.w	r8, [sp, #8]
   11b70:	b.w	11356 <_svfprintf_r+0x626>
   11b74:	str	r3, [sp, #44]	; 0x2c
   11b76:	ldr	r3, [pc, #616]	; (11de0 <_svfprintf_r+0x10b0>)
   11b78:	str	r3, [sp, #68]	; 0x44
   11b7a:	ands.w	r1, r8, #32
   11b7e:	beq.w	11d8c <_svfprintf_r+0x105c>
   11b82:	ldr	r3, [sp, #32]
   11b84:	adds	r3, #7
   11b86:	bic.w	r3, r3, #7
   11b8a:	ldr	r1, [r3, #4]
   11b8c:	ldr.w	r2, [r3], #8
   11b90:	str	r3, [sp, #32]
   11b92:	tst.w	r8, #1
   11b96:	beq.n	11bae <_svfprintf_r+0xe7e>
   11b98:	orrs.w	r3, r2, r1
   11b9c:	beq.n	11bae <_svfprintf_r+0xe7e>
   11b9e:	ldr	r3, [sp, #44]	; 0x2c
   11ba0:	strb.w	r3, [sp, #105]	; 0x69
   11ba4:	movs	r3, #48	; 0x30
   11ba6:	orr.w	r8, r8, #2
   11baa:	strb.w	r3, [sp, #104]	; 0x68
   11bae:	bic.w	r3, r8, #1024	; 0x400
   11bb2:	str	r3, [sp, #8]
   11bb4:	movs	r3, #2
   11bb6:	b.w	1127a <_svfprintf_r+0x54a>
   11bba:	str	r3, [sp, #44]	; 0x2c
   11bbc:	b.w	1132c <_svfprintf_r+0x5fc>
   11bc0:	str	r3, [sp, #44]	; 0x2c
   11bc2:	ldr	r3, [pc, #544]	; (11de4 <_svfprintf_r+0x10b4>)
   11bc4:	str	r3, [sp, #68]	; 0x44
   11bc6:	b.n	11b7a <_svfprintf_r+0xe4a>
   11bc8:	ldr	r3, [sp, #32]
   11bca:	movs	r1, #1
   11bcc:	ldr.w	r2, [r3], #4
   11bd0:	str	r1, [sp, #8]
   11bd2:	strb.w	r2, [sp, #220]	; 0xdc
   11bd6:	str	r3, [sp, #32]
   11bd8:	str	r1, [sp, #20]
   11bda:	add	r4, sp, #220	; 0xdc
   11bdc:	b.w	1113e <_svfprintf_r+0x40e>
   11be0:	vmov	r1, s22
   11be4:	add	r2, sp, #144	; 0x90
   11be6:	mov	r0, fp
   11be8:	bl	15a48 <__ssprint_r>
   11bec:	cmp	r0, #0
   11bee:	bne.w	115fa <_svfprintf_r+0x8ca>
   11bf2:	ldr	r2, [sp, #152]	; 0x98
   11bf4:	add.w	sl, sp, #156	; 0x9c
   11bf8:	b.n	114b6 <_svfprintf_r+0x786>
   11bfa:	ldr	r3, [sp, #12]
   11bfc:	str	r4, [sp, #28]
   11bfe:	cmp	r3, #6
   11c00:	mov	r2, r4
   11c02:	it	cs
   11c04:	movcs	r3, #6
   11c06:	str	r4, [sp, #12]
   11c08:	mov	r1, r4
   11c0a:	strd	r2, r2, [sp, #48]	; 0x30
   11c0e:	ldr	r4, [pc, #472]	; (11de8 <_svfprintf_r+0x10b8>)
   11c10:	str	r3, [sp, #8]
   11c12:	str	r3, [sp, #20]
   11c14:	str	r2, [sp, #60]	; 0x3c
   11c16:	b.w	110f2 <_svfprintf_r+0x3c2>
   11c1a:	movs	r1, #64	; 0x40
   11c1c:	mov	r0, fp
   11c1e:	bl	cf88 <_malloc_r>
   11c22:	str	r0, [r4, #0]
   11c24:	str	r0, [r4, #16]
   11c26:	cmp	r0, #0
   11c28:	beq.w	1284a <_svfprintf_r+0x1b1a>
   11c2c:	movs	r3, #64	; 0x40
   11c2e:	str	r3, [r4, #20]
   11c30:	b.w	10d70 <_svfprintf_r+0x40>
   11c34:	cmp	r5, #16
   11c36:	ldr	r3, [sp, #148]	; 0x94
   11c38:	ble.w	120f6 <_svfprintf_r+0x13c6>
   11c3c:	mov	r1, sl
   11c3e:	movs	r6, #16
   11c40:	vmov	sl, s22
   11c44:	b.n	11c50 <_svfprintf_r+0xf20>
   11c46:	adds	r1, #8
   11c48:	subs	r5, #16
   11c4a:	cmp	r5, #16
   11c4c:	ble.w	120f4 <_svfprintf_r+0x13c4>
   11c50:	adds	r3, #1
   11c52:	ldr	r0, [pc, #408]	; (11dec <_svfprintf_r+0x10bc>)
   11c54:	adds	r2, #16
   11c56:	cmp	r3, #7
   11c58:	strd	r0, r6, [r1]
   11c5c:	strd	r3, r2, [sp, #148]	; 0x94
   11c60:	ble.n	11c46 <_svfprintf_r+0xf16>
   11c62:	add	r2, sp, #144	; 0x90
   11c64:	mov	r1, sl
   11c66:	mov	r0, fp
   11c68:	bl	15a48 <__ssprint_r>
   11c6c:	cmp	r0, #0
   11c6e:	bne.w	115fa <_svfprintf_r+0x8ca>
   11c72:	ldrd	r3, r2, [sp, #148]	; 0x94
   11c76:	add	r1, sp, #156	; 0x9c
   11c78:	b.n	11c48 <_svfprintf_r+0xf18>
   11c7a:	ldr	r3, [sp, #56]	; 0x38
   11c7c:	str.w	r9, [sp, #36]	; 0x24
   11c80:	adds	r3, r4, r3
   11c82:	str	r3, [sp, #12]
   11c84:	ldr	r3, [sp, #52]	; 0x34
   11c86:	str.w	r8, [sp, #40]	; 0x28
   11c8a:	ldr	r6, [sp, #76]	; 0x4c
   11c8c:	ldr	r5, [sp, #20]
   11c8e:	ldr.w	r9, [sp, #88]	; 0x58
   11c92:	ldr.w	r8, [sp, #60]	; 0x3c
   11c96:	str	r4, [sp, #44]	; 0x2c
   11c98:	vmov	r1, s22
   11c9c:	mov	r0, sl
   11c9e:	cmp	r3, #0
   11ca0:	beq.n	11d0c <_svfprintf_r+0xfdc>
   11ca2:	cmp.w	r8, #0
   11ca6:	bne.n	11d14 <_svfprintf_r+0xfe4>
   11ca8:	ldr	r3, [sp, #52]	; 0x34
   11caa:	subs	r3, #1
   11cac:	subs	r6, #1
   11cae:	str	r3, [sp, #52]	; 0x34
   11cb0:	ldr	r3, [sp, #84]	; 0x54
   11cb2:	strd	r3, r9, [r0]
   11cb6:	ldr	r3, [sp, #148]	; 0x94
   11cb8:	adds	r3, #1
   11cba:	add	r2, r9
   11cbc:	cmp	r3, #7
   11cbe:	str	r2, [sp, #152]	; 0x98
   11cc0:	str	r3, [sp, #148]	; 0x94
   11cc2:	bgt.n	11d9e <_svfprintf_r+0x106e>
   11cc4:	adds	r0, #8
   11cc6:	ldr	r3, [sp, #12]
   11cc8:	ldrb.w	ip, [r6]
   11ccc:	subs	r3, r3, r5
   11cce:	cmp	r3, ip
   11cd0:	it	ge
   11cd2:	movge	r3, ip
   11cd4:	cmp	r3, #0
   11cd6:	mov	sl, r3
   11cd8:	ble.n	11cf4 <_svfprintf_r+0xfc4>
   11cda:	ldr	r4, [sp, #148]	; 0x94
   11cdc:	adds	r4, #1
   11cde:	add	r2, r3
   11ce0:	cmp	r4, #7
   11ce2:	strd	r5, r3, [r0]
   11ce6:	str	r2, [sp, #152]	; 0x98
   11ce8:	str	r4, [sp, #148]	; 0x94
   11cea:	bgt.w	11fdc <_svfprintf_r+0x12ac>
   11cee:	ldrb.w	ip, [r6]
   11cf2:	adds	r0, #8
   11cf4:	cmp.w	sl, #0
   11cf8:	ite	ge
   11cfa:	subge.w	r4, ip, sl
   11cfe:	movlt	r4, ip
   11d00:	cmp	r4, #0
   11d02:	bgt.n	11d1a <_svfprintf_r+0xfea>
   11d04:	add	r5, ip
   11d06:	ldr	r3, [sp, #52]	; 0x34
   11d08:	cmp	r3, #0
   11d0a:	bne.n	11ca2 <_svfprintf_r+0xf72>
   11d0c:	cmp.w	r8, #0
   11d10:	beq.w	1246c <_svfprintf_r+0x173c>
   11d14:	add.w	r8, r8, #4294967295
   11d18:	b.n	11cb0 <_svfprintf_r+0xf80>
   11d1a:	cmp	r4, #16
   11d1c:	ldr.w	ip, [sp, #148]	; 0x94
   11d20:	ble.n	11d6c <_svfprintf_r+0x103c>
   11d22:	str	r5, [sp, #20]
   11d24:	mov.w	sl, #16
   11d28:	mov	r3, ip
   11d2a:	mov	r5, r1
   11d2c:	b.n	11d38 <_svfprintf_r+0x1008>
   11d2e:	subs	r4, #16
   11d30:	cmp	r4, #16
   11d32:	add.w	r0, r0, #8
   11d36:	ble.n	11d66 <_svfprintf_r+0x1036>
   11d38:	adds	r3, #1
   11d3a:	ldr	r1, [pc, #176]	; (11dec <_svfprintf_r+0x10bc>)
   11d3c:	adds	r2, #16
   11d3e:	cmp	r3, #7
   11d40:	strd	r1, sl, [r0]
   11d44:	strd	r3, r2, [sp, #148]	; 0x94
   11d48:	ble.n	11d2e <_svfprintf_r+0xffe>
   11d4a:	add	r2, sp, #144	; 0x90
   11d4c:	mov	r1, r5
   11d4e:	mov	r0, fp
   11d50:	bl	15a48 <__ssprint_r>
   11d54:	cmp	r0, #0
   11d56:	bne.w	115fa <_svfprintf_r+0x8ca>
   11d5a:	subs	r4, #16
   11d5c:	cmp	r4, #16
   11d5e:	ldrd	r3, r2, [sp, #148]	; 0x94
   11d62:	add	r0, sp, #156	; 0x9c
   11d64:	bgt.n	11d38 <_svfprintf_r+0x1008>
   11d66:	mov	r1, r5
   11d68:	ldr	r5, [sp, #20]
   11d6a:	mov	ip, r3
   11d6c:	add.w	r3, ip, #1
   11d70:	add	r2, r4
   11d72:	str	r4, [r0, #4]
   11d74:	cmp	r3, #7
   11d76:	ldr	r4, [pc, #116]	; (11dec <_svfprintf_r+0x10bc>)
   11d78:	str	r4, [r0, #0]
   11d7a:	strd	r3, r2, [sp, #148]	; 0x94
   11d7e:	bgt.w	1250e <_svfprintf_r+0x17de>
   11d82:	ldrb.w	ip, [r6]
   11d86:	adds	r0, #8
   11d88:	add	r5, ip
   11d8a:	b.n	11d06 <_svfprintf_r+0xfd6>
   11d8c:	ands.w	r3, r8, #16
   11d90:	beq.w	11f18 <_svfprintf_r+0x11e8>
   11d94:	ldr	r3, [sp, #32]
   11d96:	ldr.w	r2, [r3], #4
   11d9a:	str	r3, [sp, #32]
   11d9c:	b.n	11b92 <_svfprintf_r+0xe62>
   11d9e:	add	r2, sp, #144	; 0x90
   11da0:	mov	r0, fp
   11da2:	str	r1, [sp, #20]
   11da4:	bl	15a48 <__ssprint_r>
   11da8:	cmp	r0, #0
   11daa:	bne.w	115fa <_svfprintf_r+0x8ca>
   11dae:	ldr	r2, [sp, #152]	; 0x98
   11db0:	ldr	r1, [sp, #20]
   11db2:	add	r0, sp, #156	; 0x9c
   11db4:	b.n	11cc6 <_svfprintf_r+0xf96>
   11db6:	ldr	r0, [sp, #8]
   11db8:	str.w	sl, [sp, #28]
   11dbc:	add	r4, sp, #320	; 0x140
   11dbe:	and.w	r0, r0, #1024	; 0x400
   11dc2:	movs	r5, #0
   11dc4:	vmov	s20, fp
   11dc8:	ldr	r3, [pc, #36]	; (11df0 <_svfprintf_r+0x10c0>)
   11dca:	ldr.w	sl, [sp, #76]	; 0x4c
   11dce:	str.w	r9, [sp, #20]
   11dd2:	mov	fp, r4
   11dd4:	mov.w	r8, #5
   11dd8:	mov	ip, r5
   11dda:	mov	r4, r0
   11ddc:	b.n	11e00 <_svfprintf_r+0x10d0>
   11dde:	nop
   11de0:	.word	0x200009cc
   11de4:	.word	0x200009e0
   11de8:	.word	0x200009f4
   11dec:	.word	0x2000789c
   11df0:	.word	0xcccccccd
   11df4:	cmp	r2, #10
   11df6:	sbcs.w	r1, r1, #0
   11dfa:	bcc.n	11e6a <_svfprintf_r+0x113a>
   11dfc:	mov	r2, r9
   11dfe:	mov	r1, r6
   11e00:	adds	r0, r2, r1
   11e02:	adc.w	r0, r0, #0
   11e06:	umull	r5, r6, r3, r0
   11e0a:	bic.w	r5, r6, #3
   11e0e:	add.w	r5, r5, r6, lsr #2
   11e12:	subs	r0, r0, r5
   11e14:	subs	r5, r2, r0
   11e16:	mov.w	r6, #3435973836	; 0xcccccccc
   11e1a:	sbc.w	lr, r1, #0
   11e1e:	mul.w	r6, r6, r5
   11e22:	umull	r9, r5, r5, r3
   11e26:	mla	r6, r3, lr, r6
   11e2a:	and.w	lr, r9, #1
   11e2e:	add	r6, r5
   11e30:	umull	r5, lr, lr, r8
   11e34:	adds	r5, r5, r0
   11e36:	mov.w	r9, r9, lsr #1
   11e3a:	adds	r5, #48	; 0x30
   11e3c:	strb.w	r5, [fp, #-1]
   11e40:	orr.w	r9, r9, r6, lsl #31
   11e44:	add.w	ip, ip, #1
   11e48:	add.w	fp, fp, #4294967295
   11e4c:	lsrs	r6, r6, #1
   11e4e:	cmp	r4, #0
   11e50:	beq.n	11df4 <_svfprintf_r+0x10c4>
   11e52:	ldrb.w	r0, [sl]
   11e56:	cmp	ip, r0
   11e58:	bne.n	11df4 <_svfprintf_r+0x10c4>
   11e5a:	cmp.w	ip, #255	; 0xff
   11e5e:	beq.n	11df4 <_svfprintf_r+0x10c4>
   11e60:	cmp	r2, #10
   11e62:	sbcs.w	r1, r1, #0
   11e66:	bcs.w	12188 <_svfprintf_r+0x1458>
   11e6a:	mov	r4, fp
   11e6c:	add	r3, sp, #320	; 0x140
   11e6e:	subs	r3, r3, r4
   11e70:	ldr.w	r9, [sp, #20]
   11e74:	str.w	sl, [sp, #76]	; 0x4c
   11e78:	vmov	fp, s20
   11e7c:	ldr.w	sl, [sp, #28]
   11e80:	ldr.w	r8, [sp, #8]
   11e84:	str.w	ip, [sp, #56]	; 0x38
   11e88:	str	r3, [sp, #20]
   11e8a:	b.w	11412 <_svfprintf_r+0x6e2>
   11e8e:	vmov	r1, s22
   11e92:	add	r2, sp, #144	; 0x90
   11e94:	mov	r0, fp
   11e96:	bl	15a48 <__ssprint_r>
   11e9a:	cmp	r0, #0
   11e9c:	bne.w	115fa <_svfprintf_r+0x8ca>
   11ea0:	ldrb.w	r1, [sp, #103]	; 0x67
   11ea4:	ldr	r2, [sp, #152]	; 0x98
   11ea6:	add.w	sl, sp, #156	; 0x9c
   11eaa:	b.w	10fda <_svfprintf_r+0x2aa>
   11eae:	ldr	r3, [sp, #148]	; 0x94
   11eb0:	ldr	r0, [pc, #760]	; (121ac <_svfprintf_r+0x147c>)
   11eb2:	str.w	r0, [sl]
   11eb6:	adds	r3, #1
   11eb8:	adds	r2, #1
   11eba:	movs	r0, #1
   11ebc:	cmp	r3, #7
   11ebe:	str	r2, [sp, #152]	; 0x98
   11ec0:	str	r3, [sp, #148]	; 0x94
   11ec2:	str.w	r0, [sl, #4]
   11ec6:	bgt.w	121b8 <_svfprintf_r+0x1488>
   11eca:	add.w	sl, sl, #8
   11ece:	cmp	r1, #0
   11ed0:	bne.w	12032 <_svfprintf_r+0x1302>
   11ed4:	ldr	r1, [sp, #56]	; 0x38
   11ed6:	and.w	r3, r8, #1
   11eda:	orrs	r3, r1
   11edc:	beq.w	11060 <_svfprintf_r+0x330>
   11ee0:	ldr	r3, [sp, #64]	; 0x40
   11ee2:	ldr	r1, [sp, #72]	; 0x48
   11ee4:	add	r2, r3
   11ee6:	strd	r1, r3, [sl]
   11eea:	ldr	r3, [sp, #148]	; 0x94
   11eec:	str	r2, [sp, #152]	; 0x98
   11eee:	adds	r3, #1
   11ef0:	cmp	r3, #7
   11ef2:	str	r3, [sp, #148]	; 0x94
   11ef4:	bgt.w	1239c <_svfprintf_r+0x166c>
   11ef8:	add.w	sl, sl, #8
   11efc:	ldr	r1, [sp, #56]	; 0x38
   11efe:	str.w	r4, [sl]
   11f02:	adds	r3, #1
   11f04:	add	r2, r1
   11f06:	cmp	r3, #7
   11f08:	strd	r3, r2, [sp, #148]	; 0x94
   11f0c:	str.w	r1, [sl, #4]
   11f10:	ble.w	1105c <_svfprintf_r+0x32c>
   11f14:	b.w	11692 <_svfprintf_r+0x962>
   11f18:	ands.w	r2, r8, #64	; 0x40
   11f1c:	beq.w	120da <_svfprintf_r+0x13aa>
   11f20:	ldr	r0, [sp, #32]
   11f22:	ldr.w	r2, [r0], #4
   11f26:	str	r0, [sp, #32]
   11f28:	mov	r1, r3
   11f2a:	uxth	r2, r2
   11f2c:	b.n	11b92 <_svfprintf_r+0xe62>
   11f2e:	vmov	r1, s22
   11f32:	add	r2, sp, #144	; 0x90
   11f34:	mov	r0, fp
   11f36:	bl	15a48 <__ssprint_r>
   11f3a:	cmp	r0, #0
   11f3c:	bne.w	115fa <_svfprintf_r+0x8ca>
   11f40:	ldr	r2, [sp, #152]	; 0x98
   11f42:	add.w	sl, sp, #156	; 0x9c
   11f46:	b.w	11490 <_svfprintf_r+0x760>
   11f4a:	add	r6, sp, #136	; 0x88
   11f4c:	movs	r2, #8
   11f4e:	movs	r1, #0
   11f50:	mov	r0, r6
   11f52:	str	r4, [sp, #116]	; 0x74
   11f54:	bl	a528 <memset>
   11f58:	ldr	r3, [sp, #12]
   11f5a:	adds	r2, r3, #1
   11f5c:	beq.w	12116 <_svfprintf_r+0x13e6>
   11f60:	movs	r5, #0
   11f62:	str.w	r9, [sp, #8]
   11f66:	str.w	r8, [sp, #28]
   11f6a:	mov	r9, r3
   11f6c:	mov	r8, r5
   11f6e:	b.n	11f8a <_svfprintf_r+0x125a>
   11f70:	add	r1, sp, #220	; 0xdc
   11f72:	mov	r0, fp
   11f74:	bl	157f4 <_wcrtomb_r>
   11f78:	adds	r3, r0, #1
   11f7a:	add	r0, r8
   11f7c:	beq.w	12710 <_svfprintf_r+0x19e0>
   11f80:	cmp	r0, r9
   11f82:	bgt.n	11f96 <_svfprintf_r+0x1266>
   11f84:	beq.w	127b8 <_svfprintf_r+0x1a88>
   11f88:	mov	r8, r0
   11f8a:	ldr	r2, [sp, #116]	; 0x74
   11f8c:	ldr	r2, [r2, r5]
   11f8e:	mov	r3, r6
   11f90:	adds	r5, #4
   11f92:	cmp	r2, #0
   11f94:	bne.n	11f70 <_svfprintf_r+0x1240>
   11f96:	str.w	r8, [sp, #20]
   11f9a:	ldr.w	r9, [sp, #8]
   11f9e:	ldr.w	r8, [sp, #28]
   11fa2:	b.n	12130 <_svfprintf_r+0x1400>
   11fa4:	adds	r3, #1
   11fa6:	ldr	r1, [pc, #520]	; (121b0 <_svfprintf_r+0x1480>)
   11fa8:	str.w	r4, [sl, #4]
   11fac:	add	r2, r4
   11fae:	cmp	r3, #7
   11fb0:	str.w	r1, [sl]
   11fb4:	strd	r3, r2, [sp, #148]	; 0x94
   11fb8:	ble.w	1105c <_svfprintf_r+0x32c>
   11fbc:	b.w	11692 <_svfprintf_r+0x962>
   11fc0:	vmov	r1, s22
   11fc4:	add	r2, sp, #144	; 0x90
   11fc6:	mov	r0, fp
   11fc8:	bl	15a48 <__ssprint_r>
   11fcc:	cmp	r0, #0
   11fce:	bne.w	115fa <_svfprintf_r+0x8ca>
   11fd2:	ldr	r2, [sp, #152]	; 0x98
   11fd4:	add.w	sl, sp, #156	; 0x9c
   11fd8:	b.w	1102e <_svfprintf_r+0x2fe>
   11fdc:	add	r2, sp, #144	; 0x90
   11fde:	mov	r0, fp
   11fe0:	str	r1, [sp, #20]
   11fe2:	bl	15a48 <__ssprint_r>
   11fe6:	cmp	r0, #0
   11fe8:	bne.w	115fa <_svfprintf_r+0x8ca>
   11fec:	ldrb.w	ip, [r6]
   11ff0:	ldr	r2, [sp, #152]	; 0x98
   11ff2:	ldr	r1, [sp, #20]
   11ff4:	add	r0, sp, #156	; 0x9c
   11ff6:	b.n	11cf4 <_svfprintf_r+0xfc4>
   11ff8:	cmp	r3, #1
   11ffa:	str.w	r8, [sp, #8]
   11ffe:	bne.w	113e8 <_svfprintf_r+0x6b8>
   12002:	b.w	1172c <_svfprintf_r+0x9fc>
   12006:	ldr	r3, [sp, #32]
   12008:	ldr	r1, [sp, #16]
   1200a:	ldr.w	r2, [r3], #4
   1200e:	mov	r4, r9
   12010:	str	r1, [r2, #0]
   12012:	str	r3, [sp, #32]
   12014:	b.w	10d94 <_svfprintf_r+0x64>
   12018:	adds	r3, #1
   1201a:	ldr	r1, [pc, #404]	; (121b0 <_svfprintf_r+0x1480>)
   1201c:	str.w	r4, [sl, #4]
   12020:	add	r2, r4
   12022:	cmp	r3, #7
   12024:	strd	r3, r2, [sp, #148]	; 0x94
   12028:	str.w	r1, [sl]
   1202c:	ble.w	11674 <_svfprintf_r+0x944>
   12030:	b.n	1192a <_svfprintf_r+0xbfa>
   12032:	ldr	r3, [sp, #64]	; 0x40
   12034:	ldr	r0, [sp, #72]	; 0x48
   12036:	add	r2, r3
   12038:	strd	r0, r3, [sl]
   1203c:	ldr	r3, [sp, #148]	; 0x94
   1203e:	str	r2, [sp, #152]	; 0x98
   12040:	adds	r3, #1
   12042:	cmp	r3, #7
   12044:	str	r3, [sp, #148]	; 0x94
   12046:	bgt.w	1239c <_svfprintf_r+0x166c>
   1204a:	add.w	sl, sl, #8
   1204e:	cmp	r1, #0
   12050:	bge.w	11efc <_svfprintf_r+0x11cc>
   12054:	negs	r5, r1
   12056:	adds	r1, #16
   12058:	bge.w	1267a <_svfprintf_r+0x194a>
   1205c:	vmov	r1, s22
   12060:	movs	r6, #16
   12062:	b.n	12070 <_svfprintf_r+0x1340>
   12064:	add.w	sl, sl, #8
   12068:	subs	r5, #16
   1206a:	cmp	r5, #16
   1206c:	ble.w	1267a <_svfprintf_r+0x194a>
   12070:	adds	r3, #1
   12072:	ldr	r0, [pc, #316]	; (121b0 <_svfprintf_r+0x1480>)
   12074:	adds	r2, #16
   12076:	cmp	r3, #7
   12078:	strd	r0, r6, [sl]
   1207c:	strd	r3, r2, [sp, #148]	; 0x94
   12080:	ble.n	12064 <_svfprintf_r+0x1334>
   12082:	add	r2, sp, #144	; 0x90
   12084:	mov	r0, fp
   12086:	str	r1, [sp, #12]
   12088:	bl	15a48 <__ssprint_r>
   1208c:	cmp	r0, #0
   1208e:	bne.w	115fa <_svfprintf_r+0x8ca>
   12092:	ldrd	r3, r2, [sp, #148]	; 0x94
   12096:	ldr	r1, [sp, #12]
   12098:	add.w	sl, sp, #156	; 0x9c
   1209c:	b.n	12068 <_svfprintf_r+0x1338>
   1209e:	ldr	r3, [sp, #32]
   120a0:	ands.w	r1, r8, #512	; 0x200
   120a4:	itte	ne
   120a6:	movne	r1, r2
   120a8:	ldrne.w	r2, [r3], #4
   120ac:	ldreq.w	r2, [r3], #4
   120b0:	str	r3, [sp, #32]
   120b2:	it	ne
   120b4:	uxtbne	r2, r2
   120b6:	b.w	11344 <_svfprintf_r+0x614>
   120ba:	ldr	r3, [sp, #8]
   120bc:	ands.w	r1, r3, #512	; 0x200
   120c0:	ldr	r3, [sp, #32]
   120c2:	itte	ne
   120c4:	movne	r1, r2
   120c6:	ldrne.w	r2, [r3], #4
   120ca:	ldreq.w	r2, [r3], #4
   120ce:	str	r3, [sp, #32]
   120d0:	it	ne
   120d2:	uxtbne	r2, r2
   120d4:	movs	r3, #1
   120d6:	b.w	1127a <_svfprintf_r+0x54a>
   120da:	ldr	r3, [sp, #32]
   120dc:	ands.w	r1, r8, #512	; 0x200
   120e0:	itte	ne
   120e2:	movne	r1, r2
   120e4:	ldrne.w	r2, [r3], #4
   120e8:	ldreq.w	r2, [r3], #4
   120ec:	str	r3, [sp, #32]
   120ee:	it	ne
   120f0:	uxtbne	r2, r2
   120f2:	b.n	11b92 <_svfprintf_r+0xe62>
   120f4:	mov	sl, r1
   120f6:	adds	r3, #1
   120f8:	ldr	r1, [pc, #180]	; (121b0 <_svfprintf_r+0x1480>)
   120fa:	str.w	r5, [sl, #4]
   120fe:	add	r2, r5
   12100:	cmp	r3, #7
   12102:	strd	r3, r2, [sp, #148]	; 0x94
   12106:	str.w	r1, [sl]
   1210a:	bgt.w	12380 <_svfprintf_r+0x1650>
   1210e:	add.w	sl, sl, #8
   12112:	b.w	1182e <_svfprintf_r+0xafe>
   12116:	movs	r3, #0
   12118:	mov	r1, r3
   1211a:	str	r6, [sp, #0]
   1211c:	add	r2, sp, #116	; 0x74
   1211e:	mov	r0, fp
   12120:	bl	15840 <_wcsrtombs_r>
   12124:	mov	r3, r0
   12126:	adds	r3, #1
   12128:	str	r0, [sp, #20]
   1212a:	beq.w	12710 <_svfprintf_r+0x19e0>
   1212e:	str	r4, [sp, #116]	; 0x74
   12130:	ldr	r3, [sp, #20]
   12132:	cmp	r3, #0
   12134:	beq.n	121d4 <_svfprintf_r+0x14a4>
   12136:	cmp	r3, #99	; 0x63
   12138:	bgt.w	1236c <_svfprintf_r+0x163c>
   1213c:	movs	r3, #0
   1213e:	str	r3, [sp, #28]
   12140:	add	r4, sp, #220	; 0xdc
   12142:	movs	r2, #8
   12144:	movs	r1, #0
   12146:	mov	r0, r6
   12148:	bl	a528 <memset>
   1214c:	ldr	r5, [sp, #20]
   1214e:	str	r6, [sp, #0]
   12150:	mov	r3, r5
   12152:	add	r2, sp, #116	; 0x74
   12154:	mov	r1, r4
   12156:	mov	r0, fp
   12158:	bl	15840 <_wcsrtombs_r>
   1215c:	cmp	r5, r0
   1215e:	bne.w	1285a <_svfprintf_r+0x1b2a>
   12162:	ldr	r2, [sp, #20]
   12164:	movs	r3, #0
   12166:	strb	r3, [r4, r2]
   12168:	bic.w	r2, r2, r2, asr #31
   1216c:	strd	r3, r3, [sp, #48]	; 0x30
   12170:	ldrb.w	r1, [sp, #103]	; 0x67
   12174:	str	r3, [sp, #12]
   12176:	str	r2, [sp, #8]
   12178:	str	r3, [sp, #60]	; 0x3c
   1217a:	b.w	110f2 <_svfprintf_r+0x3c2>
   1217e:	movs	r1, #45	; 0x2d
   12180:	strb.w	r1, [sp, #103]	; 0x67
   12184:	b.w	110d0 <_svfprintf_r+0x3a0>
   12188:	ldr	r3, [sp, #88]	; 0x58
   1218a:	ldr	r1, [sp, #84]	; 0x54
   1218c:	sub.w	fp, fp, r3
   12190:	mov	r2, r3
   12192:	mov	r0, fp
   12194:	bl	efa0 <strncpy>
   12198:	ldrb.w	r2, [sl, #1]
   1219c:	ldr	r3, [pc, #20]	; (121b4 <_svfprintf_r+0x1484>)
   1219e:	cbz	r2, 121a4 <_svfprintf_r+0x1474>
   121a0:	add.w	sl, sl, #1
   121a4:	mov.w	ip, #0
   121a8:	b.n	11dfc <_svfprintf_r+0x10cc>
   121aa:	nop
   121ac:	.word	0x200009fc
   121b0:	.word	0x2000789c
   121b4:	.word	0xcccccccd
   121b8:	vmov	r1, s22
   121bc:	add	r2, sp, #144	; 0x90
   121be:	mov	r0, fp
   121c0:	bl	15a48 <__ssprint_r>
   121c4:	cmp	r0, #0
   121c6:	bne.w	115fa <_svfprintf_r+0x8ca>
   121ca:	ldr	r1, [sp, #108]	; 0x6c
   121cc:	ldr	r2, [sp, #152]	; 0x98
   121ce:	add.w	sl, sp, #156	; 0x9c
   121d2:	b.n	11ece <_svfprintf_r+0x119e>
   121d4:	ldr	r3, [sp, #20]
   121d6:	ldrb.w	r1, [sp, #103]	; 0x67
   121da:	str	r3, [sp, #60]	; 0x3c
   121dc:	strd	r3, r3, [sp, #8]
   121e0:	strd	r3, r3, [sp, #48]	; 0x30
   121e4:	str	r3, [sp, #28]
   121e6:	b.w	110f2 <_svfprintf_r+0x3c2>
   121ea:	ldr	r1, [sp, #56]	; 0x38
   121ec:	ldr	r0, [sp, #20]
   121ee:	adds	r5, r4, r1
   121f0:	subs	r5, r5, r0
   121f2:	subs	r4, r1, r3
   121f4:	cmp	r5, r4
   121f6:	it	ge
   121f8:	movge	r5, r4
   121fa:	b.w	11898 <_svfprintf_r+0xb68>
   121fe:	ldr	r3, [sp, #32]
   12200:	ldr	r1, [sp, #16]
   12202:	ldr.w	r2, [r3], #4
   12206:	str	r3, [sp, #32]
   12208:	strh	r1, [r2, #0]
   1220a:	mov	r4, r9
   1220c:	b.w	10d94 <_svfprintf_r+0x64>
   12210:	ldrsb.w	r2, [r3], #4
   12214:	str	r3, [sp, #32]
   12216:	asrs	r1, r2, #31
   12218:	mov	r3, r1
   1221a:	b.w	111d4 <_svfprintf_r+0x4a4>
   1221e:	ldr	r2, [sp, #12]
   12220:	movs	r1, #2
   12222:	add	r3, sp, #136	; 0x88
   12224:	str	r3, [sp, #4]
   12226:	add	r3, sp, #116	; 0x74
   12228:	str	r3, [sp, #0]
   1222a:	mov	r0, fp
   1222c:	add	r3, sp, #108	; 0x6c
   1222e:	vmov.f64	d0, d10
   12232:	str	r2, [sp, #8]
   12234:	bl	14660 <_dtoa_r>
   12238:	cmp	r5, #71	; 0x47
   1223a:	ldr	r2, [sp, #8]
   1223c:	mov	r4, r0
   1223e:	beq.w	12504 <_svfprintf_r+0x17d4>
   12242:	cmp	r5, #70	; 0x46
   12244:	add	r0, r2
   12246:	bne.n	12254 <_svfprintf_r+0x1524>
   12248:	ldrb	r3, [r4, #0]
   1224a:	cmp	r3, #48	; 0x30
   1224c:	beq.w	1272e <_svfprintf_r+0x19fe>
   12250:	ldr	r2, [sp, #108]	; 0x6c
   12252:	add	r0, r2
   12254:	vcmp.f64	d10, #0.0
   12258:	vmrs	APSR_nzcv, fpscr
   1225c:	bne.w	124ec <_svfprintf_r+0x17bc>
   12260:	mov	r3, r0
   12262:	subs	r3, r3, r4
   12264:	str	r3, [sp, #56]	; 0x38
   12266:	cmp	r5, #71	; 0x47
   12268:	beq.w	1248c <_svfprintf_r+0x175c>
   1226c:	cmp	r5, #70	; 0x46
   1226e:	beq.w	125dc <_svfprintf_r+0x18ac>
   12272:	ldr	r3, [sp, #108]	; 0x6c
   12274:	str	r3, [sp, #48]	; 0x30
   12276:	ldr	r3, [sp, #48]	; 0x30
   12278:	cmp	r5, #65	; 0x41
   1227a:	add.w	r3, r3, #4294967295
   1227e:	str	r3, [sp, #108]	; 0x6c
   12280:	beq.w	1264e <_svfprintf_r+0x191e>
   12284:	ldrb.w	r2, [sp, #44]	; 0x2c
   12288:	movs	r1, #0
   1228a:	cmp	r3, #0
   1228c:	it	lt
   1228e:	ldrlt	r3, [sp, #48]	; 0x30
   12290:	strb.w	r2, [sp, #120]	; 0x78
   12294:	itte	lt
   12296:	rsblt	r3, r3, #1
   1229a:	movlt	r2, #45	; 0x2d
   1229c:	movge	r2, #43	; 0x2b
   1229e:	cmp	r3, #9
   122a0:	strb.w	r2, [sp, #121]	; 0x79
   122a4:	ble.w	1265c <_svfprintf_r+0x192c>
   122a8:	add.w	r5, sp, #143	; 0x8f
   122ac:	ldr.w	ip, [pc, #1052]	; 126cc <_svfprintf_r+0x199c>
   122b0:	mov	r2, r5
   122b2:	mov	r0, r2
   122b4:	smull	r2, r1, ip, r3
   122b8:	asrs	r2, r3, #31
   122ba:	rsb	r2, r2, r1, asr #2
   122be:	add.w	r1, r2, r2, lsl #2
   122c2:	sub.w	r1, r3, r1, lsl #1
   122c6:	adds	r1, #48	; 0x30
   122c8:	strb.w	r1, [r0, #-1]
   122cc:	mov	r1, r3
   122ce:	cmp	r1, #99	; 0x63
   122d0:	mov	r3, r2
   122d2:	add.w	r2, r0, #4294967295
   122d6:	bgt.n	122b2 <_svfprintf_r+0x1582>
   122d8:	adds	r3, #48	; 0x30
   122da:	uxtb	r1, r3
   122dc:	subs	r3, r0, #2
   122de:	cmp	r5, r3
   122e0:	strb.w	r1, [r2, #-1]
   122e4:	bls.w	127fe <_svfprintf_r+0x1ace>
   122e8:	mov	r3, r2
   122ea:	add.w	r2, sp, #122	; 0x7a
   122ee:	b.n	122f4 <_svfprintf_r+0x15c4>
   122f0:	ldrb.w	r1, [r3], #1
   122f4:	strb.w	r1, [r2], #1
   122f8:	cmp	r5, r3
   122fa:	bne.n	122f0 <_svfprintf_r+0x15c0>
   122fc:	add.w	r3, sp, #145	; 0x91
   12300:	add.w	r2, sp, #122	; 0x7a
   12304:	subs	r3, r3, r0
   12306:	add	r3, r2
   12308:	add	r2, sp, #120	; 0x78
   1230a:	subs	r3, r3, r2
   1230c:	str	r3, [sp, #80]	; 0x50
   1230e:	ldr	r3, [sp, #56]	; 0x38
   12310:	ldr	r2, [sp, #80]	; 0x50
   12312:	cmp	r3, #1
   12314:	add	r2, r3
   12316:	str	r2, [sp, #20]
   12318:	ble.w	12722 <_svfprintf_r+0x19f2>
   1231c:	ldr	r3, [sp, #20]
   1231e:	ldr	r2, [sp, #64]	; 0x40
   12320:	add	r3, r2
   12322:	str	r3, [sp, #20]
   12324:	bic.w	r3, r6, #1024	; 0x400
   12328:	ldr	r2, [sp, #20]
   1232a:	orr.w	r8, r3, #256	; 0x100
   1232e:	movs	r3, #0
   12330:	strd	r3, r3, [sp, #48]	; 0x30
   12334:	bic.w	r2, r2, r2, asr #31
   12338:	str	r3, [sp, #60]	; 0x3c
   1233a:	str	r2, [sp, #8]
   1233c:	ldr	r3, [sp, #36]	; 0x24
   1233e:	cmp	r3, #0
   12340:	bne.w	124a6 <_svfprintf_r+0x1776>
   12344:	ldrb.w	r1, [sp, #103]	; 0x67
   12348:	str	r3, [sp, #12]
   1234a:	b.w	110f2 <_svfprintf_r+0x3c2>
   1234e:	mov	r0, r4
   12350:	bl	f580 <strlen>
   12354:	mov	r2, r0
   12356:	str	r0, [sp, #20]
   12358:	b.w	1119c <_svfprintf_r+0x46c>
   1235c:	vmov	r1, s22
   12360:	add	r2, sp, #144	; 0x90
   12362:	mov	r0, fp
   12364:	bl	15a48 <__ssprint_r>
   12368:	b.w	10f46 <_svfprintf_r+0x216>
   1236c:	adds	r1, r3, #1
   1236e:	mov	r0, fp
   12370:	bl	cf88 <_malloc_r>
   12374:	mov	r4, r0
   12376:	cmp	r0, #0
   12378:	beq.w	12710 <_svfprintf_r+0x19e0>
   1237c:	str	r0, [sp, #28]
   1237e:	b.n	12142 <_svfprintf_r+0x1412>
   12380:	vmov	r1, s22
   12384:	add	r2, sp, #144	; 0x90
   12386:	mov	r0, fp
   12388:	bl	15a48 <__ssprint_r>
   1238c:	cmp	r0, #0
   1238e:	bne.w	115fa <_svfprintf_r+0x8ca>
   12392:	ldr	r2, [sp, #152]	; 0x98
   12394:	add.w	sl, sp, #156	; 0x9c
   12398:	b.w	1182e <_svfprintf_r+0xafe>
   1239c:	vmov	r1, s22
   123a0:	add	r2, sp, #144	; 0x90
   123a2:	mov	r0, fp
   123a4:	bl	15a48 <__ssprint_r>
   123a8:	cmp	r0, #0
   123aa:	bne.w	115fa <_svfprintf_r+0x8ca>
   123ae:	ldrd	r3, r2, [sp, #148]	; 0x94
   123b2:	ldr	r1, [sp, #108]	; 0x6c
   123b4:	add.w	sl, sp, #156	; 0x9c
   123b8:	b.n	1204e <_svfprintf_r+0x131e>
   123ba:	movs	r3, #6
   123bc:	str	r3, [sp, #12]
   123be:	b.w	11ac8 <_svfprintf_r+0xd98>
   123c2:	ldr	r3, [sp, #12]
   123c4:	movs	r1, #2
   123c6:	adds	r2, r3, #1
   123c8:	b.n	12222 <_svfprintf_r+0x14f2>
   123ca:	ldr	r2, [sp, #12]
   123cc:	movs	r1, #3
   123ce:	b.n	12222 <_svfprintf_r+0x14f2>
   123d0:	add	r0, sp, #108	; 0x6c
   123d2:	vmov.f64	d0, d10
   123d6:	bl	14408 <frexp>
   123da:	vmov.f64	d7, #64	; 0x3e000000  0.125
   123de:	vmul.f64	d0, d0, d7
   123e2:	vcmp.f64	d0, #0.0
   123e6:	vmrs	APSR_nzcv, fpscr
   123ea:	bne.n	123f0 <_svfprintf_r+0x16c0>
   123ec:	movs	r3, #1
   123ee:	str	r3, [sp, #108]	; 0x6c
   123f0:	ldr	r0, [pc, #716]	; (126c0 <_svfprintf_r+0x1990>)
   123f2:	ldr	r3, [sp, #12]
   123f4:	vmov.f64	d5, #48	; 0x41800000  16.0
   123f8:	subs	r3, #1
   123fa:	mov	r2, r4
   123fc:	b.n	12408 <_svfprintf_r+0x16d8>
   123fe:	vcmp.f64	d0, #0.0
   12402:	vmrs	APSR_nzcv, fpscr
   12406:	beq.n	12430 <_svfprintf_r+0x1700>
   12408:	vmul.f64	d0, d0, d5
   1240c:	vcvt.s32.f64	s15, d0
   12410:	cmp.w	r3, #4294967295
   12414:	vmov	r1, s15
   12418:	ldrb	r1, [r0, r1]
   1241a:	vcvt.f64.s32	d6, s15
   1241e:	mov	ip, r2
   12420:	vsub.f64	d0, d0, d6
   12424:	strb.w	r1, [r2], #1
   12428:	mov	r1, r3
   1242a:	add.w	r3, r3, #4294967295
   1242e:	bne.n	123fe <_svfprintf_r+0x16ce>
   12430:	vmov.f64	d6, #96	; 0x3f000000  0.5
   12434:	vcmpe.f64	d0, d6
   12438:	vmrs	APSR_nzcv, fpscr
   1243c:	bgt.w	126d0 <_svfprintf_r+0x19a0>
   12440:	vcmp.f64	d0, d6
   12444:	vmrs	APSR_nzcv, fpscr
   12448:	bne.n	12454 <_svfprintf_r+0x1724>
   1244a:	vmov	r3, s15
   1244e:	lsls	r3, r3, #31
   12450:	bmi.w	126d0 <_svfprintf_r+0x19a0>
   12454:	cmp	r1, #0
   12456:	blt.n	12466 <_svfprintf_r+0x1736>
   12458:	adds	r3, r1, #1
   1245a:	add	r3, r2
   1245c:	movs	r1, #48	; 0x30
   1245e:	strb.w	r1, [r2], #1
   12462:	cmp	r3, r2
   12464:	bne.n	1245e <_svfprintf_r+0x172e>
   12466:	subs	r3, r2, r4
   12468:	str	r3, [sp, #56]	; 0x38
   1246a:	b.n	12266 <_svfprintf_r+0x1536>
   1246c:	ldr	r4, [sp, #44]	; 0x2c
   1246e:	ldr	r3, [sp, #56]	; 0x38
   12470:	ldr.w	r9, [sp, #36]	; 0x24
   12474:	ldr.w	r8, [sp, #40]	; 0x28
   12478:	str	r6, [sp, #76]	; 0x4c
   1247a:	adds	r3, r4, r3
   1247c:	cmp	r5, r3
   1247e:	mov	r1, r5
   12480:	it	cs
   12482:	movcs	r1, r3
   12484:	mov	sl, r0
   12486:	str	r1, [sp, #20]
   12488:	b.w	1183c <_svfprintf_r+0xb0c>
   1248c:	ldr	r3, [sp, #108]	; 0x6c
   1248e:	str	r3, [sp, #48]	; 0x30
   12490:	adds	r2, r3, #3
   12492:	blt.n	1249a <_svfprintf_r+0x176a>
   12494:	ldr	r2, [sp, #12]
   12496:	cmp	r3, r2
   12498:	ble.n	124b4 <_svfprintf_r+0x1784>
   1249a:	ldr	r3, [sp, #44]	; 0x2c
   1249c:	subs	r3, #2
   1249e:	str	r3, [sp, #44]	; 0x2c
   124a0:	bic.w	r5, r3, #32
   124a4:	b.n	12276 <_svfprintf_r+0x1546>
   124a6:	movs	r1, #45	; 0x2d
   124a8:	movs	r3, #0
   124aa:	strb.w	r1, [sp, #103]	; 0x67
   124ae:	str	r3, [sp, #12]
   124b0:	b.w	110f8 <_svfprintf_r+0x3c8>
   124b4:	ldr	r3, [sp, #48]	; 0x30
   124b6:	ldr	r2, [sp, #56]	; 0x38
   124b8:	cmp	r3, r2
   124ba:	blt.w	12638 <_svfprintf_r+0x1908>
   124be:	lsls	r0, r6, #31
   124c0:	ldr	r3, [sp, #48]	; 0x30
   124c2:	bpl.w	1272a <_svfprintf_r+0x19fa>
   124c6:	ldr	r2, [sp, #64]	; 0x40
   124c8:	add	r3, r2
   124ca:	str	r3, [sp, #20]
   124cc:	lsls	r1, r6, #21
   124ce:	bpl.n	124d8 <_svfprintf_r+0x17a8>
   124d0:	ldr	r3, [sp, #48]	; 0x30
   124d2:	cmp	r3, #0
   124d4:	bgt.w	12742 <_svfprintf_r+0x1a12>
   124d8:	ldr	r3, [sp, #20]
   124da:	bic.w	r3, r3, r3, asr #31
   124de:	str	r3, [sp, #8]
   124e0:	movs	r3, #103	; 0x67
   124e2:	str	r3, [sp, #44]	; 0x2c
   124e4:	movs	r3, #0
   124e6:	str	r3, [sp, #60]	; 0x3c
   124e8:	str	r3, [sp, #52]	; 0x34
   124ea:	b.n	1233c <_svfprintf_r+0x160c>
   124ec:	ldr	r3, [sp, #136]	; 0x88
   124ee:	cmp	r3, r0
   124f0:	bcs.w	12262 <_svfprintf_r+0x1532>
   124f4:	movs	r1, #48	; 0x30
   124f6:	adds	r2, r3, #1
   124f8:	str	r2, [sp, #136]	; 0x88
   124fa:	strb	r1, [r3, #0]
   124fc:	ldr	r3, [sp, #136]	; 0x88
   124fe:	cmp	r0, r3
   12500:	bhi.n	124f6 <_svfprintf_r+0x17c6>
   12502:	b.n	12262 <_svfprintf_r+0x1532>
   12504:	lsls	r3, r6, #31
   12506:	bmi.w	12658 <_svfprintf_r+0x1928>
   1250a:	ldr	r3, [sp, #136]	; 0x88
   1250c:	b.n	12262 <_svfprintf_r+0x1532>
   1250e:	add	r2, sp, #144	; 0x90
   12510:	mov	r0, fp
   12512:	str	r1, [sp, #20]
   12514:	bl	15a48 <__ssprint_r>
   12518:	cmp	r0, #0
   1251a:	bne.w	115fa <_svfprintf_r+0x8ca>
   1251e:	ldrb.w	ip, [r6]
   12522:	ldr	r2, [sp, #152]	; 0x98
   12524:	ldr	r1, [sp, #20]
   12526:	add	r0, sp, #156	; 0x9c
   12528:	add	r5, ip
   1252a:	b.w	11d06 <_svfprintf_r+0xfd6>
   1252e:	vmov	r1, s22
   12532:	add	r2, sp, #144	; 0x90
   12534:	mov	r0, fp
   12536:	bl	15a48 <__ssprint_r>
   1253a:	cmp	r0, #0
   1253c:	bne.w	115fa <_svfprintf_r+0x8ca>
   12540:	ldr	r2, [sp, #152]	; 0x98
   12542:	add.w	sl, sp, #156	; 0x9c
   12546:	b.w	11820 <_svfprintf_r+0xaf0>
   1254a:	movs	r3, #120	; 0x78
   1254c:	strb.w	r3, [sp, #105]	; 0x69
   12550:	movs	r3, #48	; 0x30
   12552:	strb.w	r3, [sp, #104]	; 0x68
   12556:	ldr	r3, [sp, #12]
   12558:	cmp	r3, #99	; 0x63
   1255a:	orr.w	r6, r8, #2
   1255e:	bgt.w	126ae <_svfprintf_r+0x197e>
   12562:	movs	r3, #0
   12564:	str	r3, [sp, #28]
   12566:	add	r4, sp, #220	; 0xdc
   12568:	vmov	r3, s17
   1256c:	cmp	r3, #0
   1256e:	orr.w	r8, r8, #258	; 0x102
   12572:	blt.n	125cc <_svfprintf_r+0x189c>
   12574:	vmov.f64	d10, d8
   12578:	ldr	r3, [sp, #44]	; 0x2c
   1257a:	bic.w	r5, r3, #32
   1257e:	movs	r3, #0
   12580:	str	r3, [sp, #36]	; 0x24
   12582:	ldr	r3, [sp, #44]	; 0x2c
   12584:	cmp	r3, #97	; 0x61
   12586:	bne.w	11ae4 <_svfprintf_r+0xdb4>
   1258a:	vmov.f64	d0, d10
   1258e:	add	r0, sp, #108	; 0x6c
   12590:	bl	14408 <frexp>
   12594:	vmov.f64	d7, #64	; 0x3e000000  0.125
   12598:	vmul.f64	d0, d0, d7
   1259c:	vcmp.f64	d0, #0.0
   125a0:	vmrs	APSR_nzcv, fpscr
   125a4:	bne.n	125aa <_svfprintf_r+0x187a>
   125a6:	movs	r3, #1
   125a8:	str	r3, [sp, #108]	; 0x6c
   125aa:	ldr	r0, [pc, #280]	; (126c4 <_svfprintf_r+0x1994>)
   125ac:	b.n	123f2 <_svfprintf_r+0x16c2>
   125ae:	vmov	r1, s22
   125b2:	add	r2, sp, #144	; 0x90
   125b4:	mov	r0, fp
   125b6:	bl	15a48 <__ssprint_r>
   125ba:	cmp	r0, #0
   125bc:	bne.w	115fa <_svfprintf_r+0x8ca>
   125c0:	ldr	r3, [sp, #108]	; 0x6c
   125c2:	ldr	r2, [sp, #152]	; 0x98
   125c4:	add.w	sl, sp, #156	; 0x9c
   125c8:	b.w	11868 <_svfprintf_r+0xb38>
   125cc:	ldr	r3, [sp, #44]	; 0x2c
   125ce:	bic.w	r5, r3, #32
   125d2:	movs	r3, #45	; 0x2d
   125d4:	str	r3, [sp, #36]	; 0x24
   125d6:	vneg.f64	d10, d8
   125da:	b.n	12582 <_svfprintf_r+0x1852>
   125dc:	ldr	r2, [sp, #108]	; 0x6c
   125de:	str	r2, [sp, #48]	; 0x30
   125e0:	cmp	r2, #0
   125e2:	and.w	r3, r6, #1
   125e6:	ble.w	12804 <_svfprintf_r+0x1ad4>
   125ea:	ldr	r1, [sp, #12]
   125ec:	orrs	r3, r1
   125ee:	bne.w	12790 <_svfprintf_r+0x1a60>
   125f2:	ldr	r3, [sp, #48]	; 0x30
   125f4:	str	r3, [sp, #20]
   125f6:	movs	r3, #102	; 0x66
   125f8:	str	r3, [sp, #44]	; 0x2c
   125fa:	lsls	r2, r6, #21
   125fc:	bmi.w	12746 <_svfprintf_r+0x1a16>
   12600:	ldr	r3, [sp, #20]
   12602:	bic.w	r3, r3, r3, asr #31
   12606:	str	r3, [sp, #8]
   12608:	b.n	124e4 <_svfprintf_r+0x17b4>
   1260a:	vmov	r1, s22
   1260e:	add	r2, sp, #144	; 0x90
   12610:	mov	r0, fp
   12612:	bl	15a48 <__ssprint_r>
   12616:	cmp	r0, #0
   12618:	bne.w	115fa <_svfprintf_r+0x8ca>
   1261c:	ldr	r4, [sp, #108]	; 0x6c
   1261e:	ldr	r3, [sp, #56]	; 0x38
   12620:	ldr	r2, [sp, #152]	; 0x98
   12622:	subs	r4, r3, r4
   12624:	add.w	sl, sp, #156	; 0x9c
   12628:	b.w	11898 <_svfprintf_r+0xb68>
   1262c:	movs	r3, #88	; 0x58
   1262e:	b.n	1254c <_svfprintf_r+0x181c>
   12630:	movs	r2, #0
   12632:	str	r2, [sp, #12]
   12634:	b.w	10dec <_svfprintf_r+0xbc>
   12638:	ldr	r3, [sp, #56]	; 0x38
   1263a:	ldr	r2, [sp, #64]	; 0x40
   1263c:	adds	r2, r3, r2
   1263e:	ldr	r3, [sp, #48]	; 0x30
   12640:	str	r2, [sp, #20]
   12642:	cmp	r3, #0
   12644:	ble.w	1279e <_svfprintf_r+0x1a6e>
   12648:	movs	r3, #103	; 0x67
   1264a:	str	r3, [sp, #44]	; 0x2c
   1264c:	b.n	125fa <_svfprintf_r+0x18ca>
   1264e:	ldr	r2, [sp, #44]	; 0x2c
   12650:	adds	r2, #15
   12652:	uxtb	r2, r2
   12654:	movs	r1, #1
   12656:	b.n	1228a <_svfprintf_r+0x155a>
   12658:	adds	r0, r4, r2
   1265a:	b.n	12254 <_svfprintf_r+0x1524>
   1265c:	cmp	r1, #0
   1265e:	bne.w	127b2 <_svfprintf_r+0x1a82>
   12662:	movs	r2, #48	; 0x30
   12664:	strb.w	r2, [sp, #122]	; 0x7a
   12668:	add.w	r2, sp, #123	; 0x7b
   1266c:	adds	r3, #48	; 0x30
   1266e:	strb.w	r3, [r2], #1
   12672:	add	r3, sp, #120	; 0x78
   12674:	subs	r3, r2, r3
   12676:	str	r3, [sp, #80]	; 0x50
   12678:	b.n	1230e <_svfprintf_r+0x15de>
   1267a:	adds	r3, #1
   1267c:	ldr	r1, [pc, #72]	; (126c8 <_svfprintf_r+0x1998>)
   1267e:	str.w	r5, [sl, #4]
   12682:	add	r2, r5
   12684:	cmp	r3, #7
   12686:	strd	r3, r2, [sp, #148]	; 0x94
   1268a:	str.w	r1, [sl]
   1268e:	ble.w	11ef8 <_svfprintf_r+0x11c8>
   12692:	vmov	r1, s22
   12696:	add	r2, sp, #144	; 0x90
   12698:	mov	r0, fp
   1269a:	bl	15a48 <__ssprint_r>
   1269e:	cmp	r0, #0
   126a0:	bne.w	115fa <_svfprintf_r+0x8ca>
   126a4:	ldrd	r3, r2, [sp, #148]	; 0x94
   126a8:	add.w	sl, sp, #156	; 0x9c
   126ac:	b.n	11efc <_svfprintf_r+0x11cc>
   126ae:	adds	r1, r3, #1
   126b0:	mov	r0, fp
   126b2:	bl	cf88 <_malloc_r>
   126b6:	mov	r4, r0
   126b8:	cbz	r0, 12710 <_svfprintf_r+0x19e0>
   126ba:	str	r0, [sp, #28]
   126bc:	b.n	12568 <_svfprintf_r+0x1838>
   126be:	nop
   126c0:	.word	0x200009e0
   126c4:	.word	0x200009cc
   126c8:	.word	0x2000789c
   126cc:	.word	0x66666667
   126d0:	str.w	ip, [sp, #136]	; 0x88
   126d4:	ldrb.w	r1, [r2, #-1]
   126d8:	ldrb.w	ip, [r0, #15]
   126dc:	cmp	r1, ip
   126de:	mov	r3, r2
   126e0:	bne.n	126f8 <_svfprintf_r+0x19c8>
   126e2:	mov.w	lr, #48	; 0x30
   126e6:	strb.w	lr, [r3, #-1]
   126ea:	ldr	r3, [sp, #136]	; 0x88
   126ec:	subs	r1, r3, #1
   126ee:	str	r1, [sp, #136]	; 0x88
   126f0:	ldrb.w	r1, [r3, #-1]
   126f4:	cmp	ip, r1
   126f6:	beq.n	126e6 <_svfprintf_r+0x19b6>
   126f8:	cmp	r1, #57	; 0x39
   126fa:	itet	ne
   126fc:	addne	r1, #1
   126fe:	ldrbeq	r1, [r0, #10]
   12700:	uxtbne	r1, r1
   12702:	strb.w	r1, [r3, #-1]
   12706:	b.n	12466 <_svfprintf_r+0x1736>
   12708:	movs	r3, #0
   1270a:	mov	r8, r2
   1270c:	str	r3, [sp, #28]
   1270e:	b.n	125d2 <_svfprintf_r+0x18a2>
   12710:	vmov	r2, s22
   12714:	ldrsh.w	r3, [r2, #12]
   12718:	orr.w	r3, r3, #64	; 0x40
   1271c:	strh	r3, [r2, #12]
   1271e:	b.w	10f4e <_svfprintf_r+0x21e>
   12722:	lsls	r5, r6, #31
   12724:	bpl.w	12324 <_svfprintf_r+0x15f4>
   12728:	b.n	1231c <_svfprintf_r+0x15ec>
   1272a:	str	r3, [sp, #20]
   1272c:	b.n	124cc <_svfprintf_r+0x179c>
   1272e:	vcmp.f64	d10, #0.0
   12732:	vmrs	APSR_nzcv, fpscr
   12736:	beq.w	12250 <_svfprintf_r+0x1520>
   1273a:	rsb	r2, r2, #1
   1273e:	str	r2, [sp, #108]	; 0x6c
   12740:	b.n	12252 <_svfprintf_r+0x1522>
   12742:	movs	r3, #103	; 0x67
   12744:	str	r3, [sp, #44]	; 0x2c
   12746:	ldr	r1, [sp, #76]	; 0x4c
   12748:	ldrb	r3, [r1, #0]
   1274a:	cmp	r3, #255	; 0xff
   1274c:	beq.n	12842 <_svfprintf_r+0x1b12>
   1274e:	movs	r5, #0
   12750:	ldr	r2, [sp, #48]	; 0x30
   12752:	mov	r0, r5
   12754:	b.n	1275e <_svfprintf_r+0x1a2e>
   12756:	adds	r0, #1
   12758:	adds	r1, #1
   1275a:	cmp	r3, #255	; 0xff
   1275c:	beq.n	12770 <_svfprintf_r+0x1a40>
   1275e:	cmp	r3, r2
   12760:	bge.n	12770 <_svfprintf_r+0x1a40>
   12762:	subs	r2, r2, r3
   12764:	ldrb	r3, [r1, #1]
   12766:	cmp	r3, #0
   12768:	bne.n	12756 <_svfprintf_r+0x1a26>
   1276a:	ldrb	r3, [r1, #0]
   1276c:	adds	r5, #1
   1276e:	b.n	1275a <_svfprintf_r+0x1a2a>
   12770:	str	r2, [sp, #48]	; 0x30
   12772:	str	r1, [sp, #76]	; 0x4c
   12774:	str	r0, [sp, #52]	; 0x34
   12776:	str	r5, [sp, #60]	; 0x3c
   12778:	ldr	r2, [sp, #60]	; 0x3c
   1277a:	ldr	r3, [sp, #52]	; 0x34
   1277c:	ldr	r1, [sp, #88]	; 0x58
   1277e:	add	r3, r2
   12780:	ldr	r2, [sp, #20]
   12782:	mla	r3, r1, r3, r2
   12786:	str	r3, [sp, #20]
   12788:	bic.w	r3, r3, r3, asr #31
   1278c:	str	r3, [sp, #8]
   1278e:	b.n	1233c <_svfprintf_r+0x160c>
   12790:	ldr	r3, [sp, #64]	; 0x40
   12792:	adds	r3, r2, r3
   12794:	add	r1, r3
   12796:	movs	r3, #102	; 0x66
   12798:	str	r1, [sp, #20]
   1279a:	str	r3, [sp, #44]	; 0x2c
   1279c:	b.n	125fa <_svfprintf_r+0x18ca>
   1279e:	rsb	r3, r3, #1
   127a2:	add	r2, r3
   127a4:	bic.w	r3, r2, r2, asr #31
   127a8:	str	r3, [sp, #8]
   127aa:	movs	r3, #103	; 0x67
   127ac:	str	r2, [sp, #20]
   127ae:	str	r3, [sp, #44]	; 0x2c
   127b0:	b.n	124e4 <_svfprintf_r+0x17b4>
   127b2:	add.w	r2, sp, #122	; 0x7a
   127b6:	b.n	1266c <_svfprintf_r+0x193c>
   127b8:	ldr	r3, [sp, #12]
   127ba:	ldr.w	r9, [sp, #8]
   127be:	ldr.w	r8, [sp, #28]
   127c2:	str	r3, [sp, #20]
   127c4:	b.n	12130 <_svfprintf_r+0x1400>
   127c6:	vmov	r3, s17
   127ca:	cmp	r3, #0
   127cc:	ite	lt
   127ce:	movlt	r1, #45	; 0x2d
   127d0:	ldrbge.w	r1, [sp, #103]	; 0x67
   127d4:	ldr	r4, [pc, #148]	; (1286c <_svfprintf_r+0x1b3c>)
   127d6:	ldr	r3, [pc, #152]	; (12870 <_svfprintf_r+0x1b40>)
   127d8:	it	lt
   127da:	strblt.w	r1, [sp, #103]	; 0x67
   127de:	bic.w	r8, r8, #128	; 0x80
   127e2:	b.w	110d8 <_svfprintf_r+0x3a8>
   127e6:	ldr	r3, [sp, #12]
   127e8:	str	r3, [sp, #8]
   127ea:	str	r3, [sp, #20]
   127ec:	movs	r3, #115	; 0x73
   127ee:	ldrb.w	r1, [sp, #103]	; 0x67
   127f2:	str	r0, [sp, #12]
   127f4:	str	r0, [sp, #60]	; 0x3c
   127f6:	str	r0, [sp, #52]	; 0x34
   127f8:	str	r3, [sp, #44]	; 0x2c
   127fa:	b.w	110f2 <_svfprintf_r+0x3c2>
   127fe:	movs	r3, #2
   12800:	str	r3, [sp, #80]	; 0x50
   12802:	b.n	1230e <_svfprintf_r+0x15de>
   12804:	ldr	r2, [sp, #12]
   12806:	orrs	r3, r2
   12808:	bne.n	12816 <_svfprintf_r+0x1ae6>
   1280a:	movs	r3, #1
   1280c:	movs	r2, #102	; 0x66
   1280e:	str	r3, [sp, #8]
   12810:	str	r2, [sp, #44]	; 0x2c
   12812:	str	r3, [sp, #20]
   12814:	b.n	124e4 <_svfprintf_r+0x17b4>
   12816:	ldr	r3, [sp, #64]	; 0x40
   12818:	adds	r3, #1
   1281a:	add	r2, r3
   1281c:	bic.w	r3, r2, r2, asr #31
   12820:	str	r3, [sp, #8]
   12822:	movs	r3, #102	; 0x66
   12824:	str	r2, [sp, #20]
   12826:	str	r3, [sp, #44]	; 0x2c
   12828:	b.n	124e4 <_svfprintf_r+0x17b4>
   1282a:	ldr	r2, [sp, #32]
   1282c:	ldrb.w	r3, [r9, #1]
   12830:	mov	r9, r1
   12832:	ldr.w	r1, [r2], #4
   12836:	str	r2, [sp, #32]
   12838:	orr.w	r1, r1, r1, asr #31
   1283c:	str	r1, [sp, #12]
   1283e:	b.w	10de8 <_svfprintf_r+0xb8>
   12842:	movs	r3, #0
   12844:	str	r3, [sp, #60]	; 0x3c
   12846:	str	r3, [sp, #52]	; 0x34
   12848:	b.n	12778 <_svfprintf_r+0x1a48>
   1284a:	movs	r3, #12
   1284c:	str.w	r3, [fp]
   12850:	mov.w	r3, #4294967295
   12854:	str	r3, [sp, #16]
   12856:	b.w	10f5c <_svfprintf_r+0x22c>
   1285a:	vmov	r2, s22
   1285e:	ldrh	r3, [r2, #12]
   12860:	orr.w	r3, r3, #64	; 0x40
   12864:	strh	r3, [r2, #12]
   12866:	b.w	115fa <_svfprintf_r+0x8ca>
   1286a:	nop
   1286c:	.word	0x200009c4
   12870:	.word	0x200009c8

00012874 <__ssvfscanf_r>:
   12874:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12878:	vpush	{d8}
   1287c:	sub.w	sp, sp, #732	; 0x2dc
   12880:	mov	fp, r1
   12882:	ldrsh.w	r1, [r1, #12]
   12886:	add	r7, sp, #8
   12888:	lsls	r4, r1, #18
   1288a:	mov	r9, r0
   1288c:	str	r2, [r7, #76]	; 0x4c
   1288e:	str	r3, [r7, #48]	; 0x30
   12890:	bmi.n	128a6 <__ssvfscanf_r+0x32>
   12892:	ldr.w	r3, [fp, #100]	; 0x64
   12896:	orr.w	r1, r1, #8192	; 0x2000
   1289a:	bic.w	r3, r3, #8192	; 0x2000
   1289e:	strh.w	r1, [fp, #12]
   128a2:	str.w	r3, [fp, #100]	; 0x64
   128a6:	movs	r3, #0
   128a8:	mov	r4, r3
   128aa:	movs	r2, #8
   128ac:	mov	r1, r3
   128ae:	add.w	r0, r7, #88	; 0x58
   128b2:	str	r3, [r7, #44]	; 0x2c
   128b4:	mov	sl, r4
   128b6:	bl	a528 <memset>
   128ba:	str	r4, [r7, #64]	; 0x40
   128bc:	str	r4, [r7, #36]	; 0x24
   128be:	str	r4, [r7, #56]	; 0x38
   128c0:	str	r4, [r7, #68]	; 0x44
   128c2:	ldr	r3, [pc, #524]	; (12ad0 <__ssvfscanf_r+0x25c>)
   128c4:	ldr.w	r4, [r3, #228]	; 0xe4
   128c8:	bl	f004 <__locale_mb_cur_max>
   128cc:	add.w	r2, r7, #88	; 0x58
   128d0:	mov	r3, r0
   128d2:	str	r2, [sp, #0]
   128d4:	add.w	r1, r7, #84	; 0x54
   128d8:	ldr	r2, [r7, #76]	; 0x4c
   128da:	mov	r0, r9
   128dc:	blx	r4
   128de:	subs	r5, r0, #0
   128e0:	ldr	r3, [r7, #76]	; 0x4c
   128e2:	blt.n	1294c <__ssvfscanf_r+0xd8>
   128e4:	add	r3, r5
   128e6:	str	r3, [r7, #76]	; 0x4c
   128e8:	ldr	r3, [r7, #84]	; 0x54
   128ea:	mov	r6, r5
   128ec:	cmp	r3, #0
   128ee:	beq.w	12a5e <__ssvfscanf_r+0x1ea>
   128f2:	cmp	r5, #1
   128f4:	beq.n	12968 <__ssvfscanf_r+0xf4>
   128f6:	cmp	r3, #37	; 0x25
   128f8:	beq.n	1297c <__ssvfscanf_r+0x108>
   128fa:	cmp	r5, #0
   128fc:	beq.n	128c2 <__ssvfscanf_r+0x4e>
   128fe:	ldr	r3, [r7, #76]	; 0x4c
   12900:	subs	r6, r3, r6
   12902:	ldr.w	r3, [fp, #4]
   12906:	subs	r4, r6, #1
   12908:	cmp	r3, #0
   1290a:	ble.w	12a3e <__ssvfscanf_r+0x1ca>
   1290e:	ldr.w	r1, [fp]
   12912:	ldrb.w	ip, [r4, #1]
   12916:	ldrb.w	lr, [r1]
   1291a:	adds	r3, r4, #2
   1291c:	add.w	r0, sl, r3
   12920:	cmp	lr, ip
   12922:	add.w	r1, r1, #1
   12926:	sub.w	r2, r3, r6
   1292a:	add.w	r4, r4, #1
   1292e:	sub.w	r0, r0, r6
   12932:	bne.w	12a5e <__ssvfscanf_r+0x1ea>
   12936:	ldr.w	r3, [fp, #4]
   1293a:	str.w	r1, [fp]
   1293e:	subs	r3, #1
   12940:	cmp	r2, r5
   12942:	str.w	r3, [fp, #4]
   12946:	blt.n	12908 <__ssvfscanf_r+0x94>
   12948:	mov	sl, r0
   1294a:	b.n	128c2 <__ssvfscanf_r+0x4e>
   1294c:	adds	r3, #1
   1294e:	str	r3, [r7, #76]	; 0x4c
   12950:	movs	r2, #8
   12952:	movw	r3, #65533	; 0xfffd
   12956:	movs	r1, #0
   12958:	add.w	r0, r7, #88	; 0x58
   1295c:	str	r3, [r7, #84]	; 0x54
   1295e:	bl	a528 <memset>
   12962:	ldr	r3, [r7, #84]	; 0x54
   12964:	cmp	r3, #0
   12966:	beq.n	12a5e <__ssvfscanf_r+0x1ea>
   12968:	ldr	r6, [pc, #360]	; (12ad4 <__ssvfscanf_r+0x260>)
   1296a:	ldrb	r2, [r6, r3]
   1296c:	lsls	r0, r2, #28
   1296e:	bmi.w	133aa <__ssvfscanf_r+0xb36>
   12972:	cmp	r3, #37	; 0x25
   12974:	bne.w	12a84 <__ssvfscanf_r+0x210>
   12978:	movs	r5, #1
   1297a:	mov	r6, r5
   1297c:	ldr	r0, [r7, #76]	; 0x4c
   1297e:	movs	r4, #0
   12980:	ldrb	r2, [r0, #0]
   12982:	mov	r8, r4
   12984:	sub.w	r3, r2, #37	; 0x25
   12988:	adds	r1, r0, #1
   1298a:	cmp	r3, #85	; 0x55
   1298c:	bhi.n	12a5e <__ssvfscanf_r+0x1ea>
   1298e:	tbh	[pc, r3, lsl #1]
   12992:	.short	0x070a
   12994:	.word	0x00660066
   12998:	.word	0x00660066
   1299c:	.word	0x00660701
   129a0:	.word	0x00660066
   129a4:	.word	0x00660066
   129a8:	.word	0x060c060c
   129ac:	.word	0x060c060c
   129b0:	.word	0x060c060c
   129b4:	.word	0x060c060c
   129b8:	.word	0x060c060c
   129bc:	.word	0x00660066
   129c0:	.word	0x00660066
   129c4:	.word	0x00660066
   129c8:	.word	0x06180066
   129cc:	.word	0x048e0066
   129d0:	.word	0x061804c9
   129d4:	.word	0x06180618
   129d8:	.word	0x00660066
   129dc:	.word	0x00660066
   129e0:	.word	0x00660082
   129e4:	.word	0x04bf0066
   129e8:	.word	0x00660066
   129ec:	.word	0x00890066
   129f0:	.word	0x00660066
   129f4:	.word	0x00660066
   129f8:	.word	0x0066066b
   129fc:	.word	0x06dd0066
   12a00:	.word	0x00660066
   12a04:	.word	0x00660066
   12a08:	.word	0x06180066
   12a0c:	.word	0x04900066
   12a10:	.word	0x061804cb
   12a14:	.word	0x06180618
   12a18:	.word	0x06d206be
   12a1c:	.word	0x00660082
   12a20:	.word	0x06f306e7
   12a24:	.word	0x04c106ac
   12a28:	.word	0x006606da
   12a2c:	.word	0x008b0066
   12a30:	.word	0x06ca007d
   12a34:	.word	0x00660066
   12a38:	.word	0x0066066b
   12a3c:	.short	0x007d
   12a3e:	mov	r1, fp
   12a40:	mov	r0, r9
   12a42:	bl	15bc8 <__ssrefill_r>
   12a46:	cmp	r0, #0
   12a48:	beq.w	1290e <__ssvfscanf_r+0x9a>
   12a4c:	ldr	r3, [r7, #68]	; 0x44
   12a4e:	cmp	r3, #0
   12a50:	beq.w	13af8 <__ssvfscanf_r+0x1284>
   12a54:	ldrh.w	r3, [fp, #12]
   12a58:	lsls	r2, r3, #25
   12a5a:	bmi.w	13af8 <__ssvfscanf_r+0x1284>
   12a5e:	ldr	r3, [r7, #64]	; 0x40
   12a60:	cbz	r3, 12a74 <__ssvfscanf_r+0x200>
   12a62:	ldr	r3, [r7, #64]	; 0x40
   12a64:	ldr.w	r8, [r3]
   12a68:	cmp.w	r8, #0
   12a6c:	beq.n	12a74 <__ssvfscanf_r+0x200>
   12a6e:	mov	r0, r8
   12a70:	bl	cf78 <free>
   12a74:	ldr	r0, [r7, #68]	; 0x44
   12a76:	add.w	r7, r7, #724	; 0x2d4
   12a7a:	mov	sp, r7
   12a7c:	vpop	{d8}
   12a80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a84:	ldr	r3, [r7, #76]	; 0x4c
   12a86:	movs	r5, #1
   12a88:	subs	r6, r3, #1
   12a8a:	b.n	12902 <__ssvfscanf_r+0x8e>
   12a8c:	lsls	r3, r4, #28
   12a8e:	bne.n	12a5e <__ssvfscanf_r+0x1ea>
   12a90:	ldrb	r2, [r0, #1]
   12a92:	mov	r0, r1
   12a94:	b.n	12984 <__ssvfscanf_r+0x110>
   12a96:	lsls	r2, r4, #28
   12a98:	bne.n	12a5e <__ssvfscanf_r+0x1ea>
   12a9a:	ldrb	r2, [r0, #1]
   12a9c:	orr.w	r4, r4, #2
   12aa0:	mov	r0, r1
   12aa2:	b.n	12984 <__ssvfscanf_r+0x110>
   12aa4:	orr.w	r4, r4, #1
   12aa8:	str	r1, [r7, #76]	; 0x4c
   12aaa:	movs	r5, #2
   12aac:	ldr.w	r3, [fp, #4]
   12ab0:	cmp	r3, #0
   12ab2:	ble.w	132c6 <__ssvfscanf_r+0xa52>
   12ab6:	lsls	r0, r4, #25
   12ab8:	bpl.w	132da <__ssvfscanf_r+0xa66>
   12abc:	subs	r3, r5, #1
   12abe:	cmp	r3, #3
   12ac0:	bhi.w	13c9a <__ssvfscanf_r+0x1426>
   12ac4:	tbh	[pc, r3, lsl #1]
   12ac8:	.word	0x01f1027b
   12acc:	.word	0x0008014b
   12ad0:	.word	0x20008e44
   12ad4:	.word	0x20000825
   12ad8:	mov	r0, r9
   12ada:	bl	143fc <_localeconv_r>
   12ade:	ldr	r3, [r0, #0]
   12ae0:	str	r3, [r7, #32]
   12ae2:	add.w	r3, r8, #4294967295
   12ae6:	cmp.w	r3, #348	; 0x15c
   12aea:	bls.w	135a2 <__ssvfscanf_r+0xd2e>
   12aee:	mvn.w	r5, #348	; 0x15c
   12af2:	add.w	r3, r8, r5
   12af6:	str	r3, [r7, #16]
   12af8:	movw	r8, #349	; 0x15d
   12afc:	movs	r6, #0
   12afe:	add.w	r3, r7, #368	; 0x170
   12b02:	vmov	s16, r9
   12b06:	strd	r6, r6, [r7, #20]
   12b0a:	str	r6, [r7, #60]	; 0x3c
   12b0c:	str	r6, [r7, #52]	; 0x34
   12b0e:	str	r6, [r7, #28]
   12b10:	str	r6, [r7, #72]	; 0x48
   12b12:	orr.w	r4, r4, #1920	; 0x780
   12b16:	str	r3, [r7, #40]	; 0x28
   12b18:	mov	r5, r3
   12b1a:	mov	r6, r8
   12b1c:	ldr.w	r1, [fp]
   12b20:	ldrb	r2, [r1, #0]
   12b22:	sub.w	r3, r2, #43	; 0x2b
   12b26:	cmp	r3, #78	; 0x4e
   12b28:	bhi.n	12bcc <__ssvfscanf_r+0x358>
   12b2a:	tbh	[pc, r3, lsl #1]
   12b2e:	.short	0x037e
   12b30:	.word	0x037e004f
   12b34:	.word	0x004f004f
   12b38:	.word	0x00a600a3
   12b3c:	.word	0x00a600a6
   12b40:	.word	0x00a600a6
   12b44:	.word	0x00a600a6
   12b48:	.word	0x00a600a6
   12b4c:	.word	0x004f004f
   12b50:	.word	0x004f004f
   12b54:	.word	0x004f004f
   12b58:	.word	0x0374004f
   12b5c:	.word	0x030b030b
   12b60:	.word	0x039e030b
   12b64:	.word	0x004f0394
   12b68:	.word	0x0384004f
   12b6c:	.word	0x004f004f
   12b70:	.word	0x004f004f
   12b74:	.word	0x004f035d
   12b78:	.word	0x004f033a
   12b7c:	.word	0x004f004f
   12b80:	.word	0x004f0333
   12b84:	.word	0x004f004f
   12b88:	.word	0x036d031e
   12b8c:	.word	0x004f004f
   12b90:	.word	0x004f004f
   12b94:	.word	0x004f004f
   12b98:	.word	0x0374004f
   12b9c:	.word	0x030b030b
   12ba0:	.word	0x039e030b
   12ba4:	.word	0x004f0394
   12ba8:	.word	0x0384004f
   12bac:	.word	0x004f004f
   12bb0:	.word	0x004f004f
   12bb4:	.word	0x004f035d
   12bb8:	.word	0x004f033a
   12bbc:	.word	0x004f004f
   12bc0:	.word	0x004f0333
   12bc4:	.word	0x004f004f
   12bc8:	.word	0x036d031e
   12bcc:	lsls	r0, r4, #22
   12bce:	bpl.n	12cb0 <__ssvfscanf_r+0x43c>
   12bd0:	ldr	r0, [r7, #32]
   12bd2:	ldrb	r3, [r0, #0]
   12bd4:	cmp	r3, r2
   12bd6:	bne.n	12cb0 <__ssvfscanf_r+0x43c>
   12bd8:	strd	r4, r5, [r7, #8]
   12bdc:	str	r6, [r7, #4]
   12bde:	mov	r9, r0
   12be0:	vmov	r6, s16
   12be4:	mov.w	r8, #0
   12be8:	mov	r4, fp
   12bea:	b.n	12bfc <__ssvfscanf_r+0x388>
   12bec:	str	r1, [r4, #0]
   12bee:	ldrb.w	lr, [r1]
   12bf2:	ldrb.w	r0, [r9]
   12bf6:	cmp	lr, r0
   12bf8:	bne.n	12c34 <__ssvfscanf_r+0x3c0>
   12bfa:	mov	sl, fp
   12bfc:	ldrb.w	r0, [r9, #1]!
   12c00:	mov	r5, r8
   12c02:	add.w	fp, sl, #1
   12c06:	adds	r1, #1
   12c08:	add.w	r8, r8, #1
   12c0c:	cmp	r0, #0
   12c0e:	beq.w	138da <__ssvfscanf_r+0x1066>
   12c12:	ldr	r0, [r4, #4]
   12c14:	subs	r0, #1
   12c16:	cmp	r0, #0
   12c18:	str	r0, [r4, #4]
   12c1a:	bgt.n	12bec <__ssvfscanf_r+0x378>
   12c1c:	mov	r1, r4
   12c1e:	mov	r0, r6
   12c20:	bl	15bc8 <__ssrefill_r>
   12c24:	cbnz	r0, 12c34 <__ssvfscanf_r+0x3c0>
   12c26:	ldr	r1, [r4, #0]
   12c28:	ldrb.w	r0, [r9]
   12c2c:	ldrb.w	lr, [r1]
   12c30:	cmp	lr, r0
   12c32:	beq.n	12bfa <__ssvfscanf_r+0x386>
   12c34:	mov	fp, r4
   12c36:	ldr	r2, [r7, #32]
   12c38:	ldr	r4, [r7, #8]
   12c3a:	str	r5, [r7, #16]
   12c3c:	mov	r3, r5
   12c3e:	mov	r9, r6
   12c40:	ldr	r6, [r7, #72]	; 0x48
   12c42:	ldr	r5, [r7, #12]
   12c44:	str	r5, [r7, #72]	; 0x48
   12c46:	adds	r3, #1
   12c48:	mov	r5, fp
   12c4a:	add.w	r8, r2, r3
   12c4e:	mov	fp, r6
   12c50:	mov	r6, r4
   12c52:	mov	r4, r2
   12c54:	ldrb.w	r1, [r8, #-1]!
   12c58:	mov	r2, r5
   12c5a:	mov	r0, r9
   12c5c:	bl	15b48 <_sungetc_r>
   12c60:	cmp	r4, r8
   12c62:	bne.n	12c54 <__ssvfscanf_r+0x3e0>
   12c64:	ldr	r3, [r7, #16]
   12c66:	mov	r4, r6
   12c68:	sub.w	sl, sl, r3
   12c6c:	mov	r6, fp
   12c6e:	mov	fp, r5
   12c70:	ldr	r5, [r7, #72]	; 0x48
   12c72:	b.n	12cb6 <__ssvfscanf_r+0x442>
   12c74:	lsls	r0, r4, #23
   12c76:	bmi.w	1367c <__ssvfscanf_r+0xe08>
   12c7a:	ldr	r3, [r7, #72]	; 0x48
   12c7c:	ldr	r1, [r7, #60]	; 0x3c
   12c7e:	cmn	r1, r3
   12c80:	bne.n	12cb0 <__ssvfscanf_r+0x43c>
   12c82:	bic.w	r4, r4, #384	; 0x180
   12c86:	strb.w	r2, [r5], #1
   12c8a:	subs	r6, #1
   12c8c:	ldr.w	r3, [fp, #4]
   12c90:	subs	r3, #1
   12c92:	cmp	r3, #0
   12c94:	add.w	sl, sl, #1
   12c98:	str.w	r3, [fp, #4]
   12c9c:	ble.w	1337e <__ssvfscanf_r+0xb0a>
   12ca0:	ldr.w	r3, [fp]
   12ca4:	adds	r3, #1
   12ca6:	str.w	r3, [fp]
   12caa:	cmp	r6, #0
   12cac:	bne.w	12b1c <__ssvfscanf_r+0x2a8>
   12cb0:	ldr	r6, [r7, #72]	; 0x48
   12cb2:	vmov	r9, s16
   12cb6:	ldr	r3, [r7, #52]	; 0x34
   12cb8:	cmp	r3, #0
   12cba:	bne.w	13276 <__ssvfscanf_r+0xa02>
   12cbe:	ldr	r3, [r7, #60]	; 0x3c
   12cc0:	subs	r3, #1
   12cc2:	cmp	r3, #1
   12cc4:	bls.w	13cf4 <__ssvfscanf_r+0x1480>
   12cc8:	subs	r3, r6, #1
   12cca:	cmp	r3, #6
   12ccc:	bls.w	1391e <__ssvfscanf_r+0x10aa>
   12cd0:	lsls	r3, r4, #23
   12cd2:	bpl.n	12d0c <__ssvfscanf_r+0x498>
   12cd4:	lsls	r6, r4, #21
   12cd6:	bmi.w	13e44 <__ssvfscanf_r+0x15d0>
   12cda:	ldrb.w	r1, [r5, #-1]
   12cde:	cmp	r1, #101	; 0x65
   12ce0:	add.w	r3, r5, #4294967295
   12ce4:	add.w	r6, sl, #4294967295
   12ce8:	beq.n	12d00 <__ssvfscanf_r+0x48c>
   12cea:	cmp	r1, #69	; 0x45
   12cec:	beq.n	12d00 <__ssvfscanf_r+0x48c>
   12cee:	mov	r2, fp
   12cf0:	mov	r0, r9
   12cf2:	bl	15b48 <_sungetc_r>
   12cf6:	ldrb.w	r1, [r5, #-2]
   12cfa:	sub.w	r6, sl, #2
   12cfe:	subs	r3, r5, #2
   12d00:	mov	r2, fp
   12d02:	mov	r0, r9
   12d04:	mov	sl, r6
   12d06:	mov	r5, r3
   12d08:	bl	15b48 <_sungetc_r>
   12d0c:	ands.w	r2, r4, #16
   12d10:	bne.w	128c2 <__ssvfscanf_r+0x4e>
   12d14:	and.w	r3, r4, #1536	; 0x600
   12d18:	cmp.w	r3, #1024	; 0x400
   12d1c:	strb	r2, [r5, #0]
   12d1e:	beq.w	136c6 <__ssvfscanf_r+0xe52>
   12d22:	ldr	r3, [r7, #24]
   12d24:	cmp	r3, #0
   12d26:	bne.w	13b82 <__ssvfscanf_r+0x130e>
   12d2a:	mov	r0, r9
   12d2c:	ldr	r1, [r7, #40]	; 0x28
   12d2e:	movs	r2, #0
   12d30:	bl	e760 <_strtod_r>
   12d34:	lsls	r0, r4, #31
   12d36:	ldr	r3, [r7, #48]	; 0x30
   12d38:	bmi.w	138ce <__ssvfscanf_r+0x105a>
   12d3c:	lsls	r1, r4, #30
   12d3e:	bmi.w	138ce <__ssvfscanf_r+0x105a>
   12d42:	vcmp.f64	d0, d0
   12d46:	vmrs	APSR_nzcv, fpscr
   12d4a:	ldr.w	r4, [r3], #4
   12d4e:	bvs.w	13b3a <__ssvfscanf_r+0x12c6>
   12d52:	vcvt.f32.f64	s0, d0
   12d56:	str	r3, [r7, #48]	; 0x30
   12d58:	vstr	s0, [r4]
   12d5c:	b.n	134a4 <__ssvfscanf_r+0xc30>
   12d5e:	add.w	r3, r8, #4294967295
   12d62:	cmp.w	r3, #348	; 0x15c
   12d66:	bls.w	134ae <__ssvfscanf_r+0xc3a>
   12d6a:	mvn.w	r2, #348	; 0x15c
   12d6e:	add.w	r3, r8, r2
   12d72:	str	r3, [r7, #60]	; 0x3c
   12d74:	movw	r8, #349	; 0x15d
   12d78:	add.w	r3, r7, #368	; 0x170
   12d7c:	movs	r2, #0
   12d7e:	ldr	r6, [r7, #56]	; 0x38
   12d80:	str	r3, [r7, #40]	; 0x28
   12d82:	mov	r1, fp
   12d84:	orr.w	r4, r4, #3456	; 0xd80
   12d88:	mov	fp, sl
   12d8a:	mov	r5, r3
   12d8c:	mov	sl, r2
   12d8e:	ldr	r2, [r1, #0]
   12d90:	ldrb	r0, [r2, #0]
   12d92:	sub.w	r3, r0, #43	; 0x2b
   12d96:	cmp	r3, #77	; 0x4d
   12d98:	bhi.n	12e5c <__ssvfscanf_r+0x5e8>
   12d9a:	tbh	[pc, r3, lsl #1]
   12d9e:	.short	0x0282
   12da0:	.word	0x0282005f
   12da4:	.word	0x005f005f
   12da8:	.word	0x01e002cd
   12dac:	.word	0x01e001e0
   12db0:	.word	0x01e001e0
   12db4:	.word	0x01e001e0
   12db8:	.word	0x026f026f
   12dbc:	.word	0x005f005f
   12dc0:	.word	0x005f005f
   12dc4:	.word	0x005f005f
   12dc8:	.word	0x004e005f
   12dcc:	.word	0x004e004e
   12dd0:	.word	0x004e004e
   12dd4:	.word	0x005f004e
   12dd8:	.word	0x005f005f
   12ddc:	.word	0x005f005f
   12de0:	.word	0x005f005f
   12de4:	.word	0x005f005f
   12de8:	.word	0x005f005f
   12dec:	.word	0x005f005f
   12df0:	.word	0x005f005f
   12df4:	.word	0x005f005f
   12df8:	.word	0x005f0276
   12dfc:	.word	0x005f005f
   12e00:	.word	0x005f005f
   12e04:	.word	0x005f005f
   12e08:	.word	0x004e005f
   12e0c:	.word	0x004e004e
   12e10:	.word	0x004e004e
   12e14:	.word	0x005f004e
   12e18:	.word	0x005f005f
   12e1c:	.word	0x005f005f
   12e20:	.word	0x005f005f
   12e24:	.word	0x005f005f
   12e28:	.word	0x005f005f
   12e2c:	.word	0x005f005f
   12e30:	.word	0x005f005f
   12e34:	.word	0x005f005f
   12e38:	.short	0x0276
   12e3a:	cmp	r6, #10
   12e3c:	ble.n	12e5c <__ssvfscanf_r+0x5e8>
   12e3e:	bic.w	r4, r4, #2944	; 0xb80
   12e42:	ldr	r3, [r1, #4]
   12e44:	strb.w	r0, [r5], #1
   12e48:	subs	r3, #1
   12e4a:	cmp	r3, #0
   12e4c:	str	r3, [r1, #4]
   12e4e:	ble.w	1336c <__ssvfscanf_r+0xaf8>
   12e52:	adds	r2, #1
   12e54:	str	r2, [r1, #0]
   12e56:	subs.w	r8, r8, #1
   12e5a:	bne.n	12d8e <__ssvfscanf_r+0x51a>
   12e5c:	lsls	r0, r4, #23
   12e5e:	mov	r8, sl
   12e60:	str	r6, [r7, #56]	; 0x38
   12e62:	mov	sl, fp
   12e64:	mov	fp, r1
   12e66:	bpl.n	12e78 <__ssvfscanf_r+0x604>
   12e68:	ldr	r3, [r7, #40]	; 0x28
   12e6a:	cmp	r5, r3
   12e6c:	bhi.w	136b4 <__ssvfscanf_r+0xe40>
   12e70:	ldr	r3, [r7, #40]	; 0x28
   12e72:	cmp	r5, r3
   12e74:	beq.w	12a5e <__ssvfscanf_r+0x1ea>
   12e78:	ands.w	r2, r4, #16
   12e7c:	bne.n	12ea0 <__ssvfscanf_r+0x62c>
   12e7e:	ldr	r1, [r7, #40]	; 0x28
   12e80:	ldr	r3, [r7, #56]	; 0x38
   12e82:	ldr	r6, [r7, #44]	; 0x2c
   12e84:	strb	r2, [r5, #0]
   12e86:	mov	r0, r9
   12e88:	blx	r6
   12e8a:	lsls	r1, r4, #26
   12e8c:	bpl.w	136a0 <__ssvfscanf_r+0xe2c>
   12e90:	ldr	r3, [r7, #48]	; 0x30
   12e92:	ldr.w	r2, [r3], #4
   12e96:	str	r0, [r2, #0]
   12e98:	str	r3, [r7, #48]	; 0x30
   12e9a:	ldr	r3, [r7, #68]	; 0x44
   12e9c:	adds	r3, #1
   12e9e:	str	r3, [r7, #68]	; 0x44
   12ea0:	ldr	r3, [r7, #40]	; 0x28
   12ea2:	subs	r5, r5, r3
   12ea4:	add	r5, r8
   12ea6:	add	sl, r5
   12ea8:	b.n	128c2 <__ssvfscanf_r+0x4e>
   12eaa:	cmp.w	r8, #0
   12eae:	it	eq
   12eb0:	moveq.w	r8, #4294967295
   12eb4:	lsls	r0, r4, #31
   12eb6:	bpl.w	133e4 <__ssvfscanf_r+0xb70>
   12eba:	ands.w	r3, r4, #16
   12ebe:	str	r3, [r7, #52]	; 0x34
   12ec0:	bne.w	137ac <__ssvfscanf_r+0xf38>
   12ec4:	lsls	r1, r4, #24
   12ec6:	bpl.w	13b96 <__ssvfscanf_r+0x1322>
   12eca:	ldr	r4, [r7, #48]	; 0x30
   12ecc:	ldr.w	r3, [r4], #4
   12ed0:	str	r3, [r7, #60]	; 0x3c
   12ed2:	cmp	r3, #0
   12ed4:	beq.w	12a5e <__ssvfscanf_r+0x1ea>
   12ed8:	movs	r0, #128	; 0x80
   12eda:	bl	cf68 <malloc>
   12ede:	str	r0, [r7, #72]	; 0x48
   12ee0:	cmp	r0, #0
   12ee2:	beq.w	13dd6 <__ssvfscanf_r+0x1562>
   12ee6:	ldr	r3, [r7, #60]	; 0x3c
   12ee8:	ldr	r2, [r7, #72]	; 0x48
   12eea:	str	r2, [r3, #0]
   12eec:	ldr	r2, [r7, #64]	; 0x40
   12eee:	ldrh	r5, [r2, #6]
   12ef0:	ldrh	r3, [r2, #4]
   12ef2:	cmp	r5, r3
   12ef4:	bcs.w	1399c <__ssvfscanf_r+0x1128>
   12ef8:	ldr	r0, [r2, #0]
   12efa:	ldr	r3, [r7, #60]	; 0x3c
   12efc:	str.w	r3, [r0, r5, lsl #2]
   12f00:	ldr	r3, [r7, #64]	; 0x40
   12f02:	str	r4, [r7, #48]	; 0x30
   12f04:	adds	r5, #1
   12f06:	strh	r5, [r3, #6]
   12f08:	ldr	r3, [r7, #72]	; 0x48
   12f0a:	str	r3, [r7, #40]	; 0x28
   12f0c:	movs	r3, #32
   12f0e:	str	r3, [r7, #32]
   12f10:	ldr.w	r3, [fp]
   12f14:	ldr	r6, [pc, #708]	; (131dc <__ssvfscanf_r+0x968>)
   12f16:	ldrb	r3, [r3, #0]
   12f18:	ldrb	r3, [r6, r3]
   12f1a:	ands.w	r3, r3, #8
   12f1e:	bne.w	13898 <__ssvfscanf_r+0x1024>
   12f22:	ldr	r4, [r7, #36]	; 0x24
   12f24:	str	r6, [r7, #36]	; 0x24
   12f26:	mov	r5, r3
   12f28:	bl	f004 <__locale_mb_cur_max>
   12f2c:	cmp	r0, r5
   12f2e:	beq.w	12a4c <__ssvfscanf_r+0x1d8>
   12f32:	ldrd	r3, r2, [fp]
   12f36:	add.w	r0, r7, #368	; 0x170
   12f3a:	ldrb.w	r1, [r3], #1
   12f3e:	strb	r1, [r0, r5]
   12f40:	subs	r2, #1
   12f42:	cmp	r4, #3
   12f44:	strd	r3, r2, [fp]
   12f48:	add.w	r5, r5, #1
   12f4c:	add.w	r6, r7, #104	; 0x68
   12f50:	bne.n	12f58 <__ssvfscanf_r+0x6e4>
   12f52:	ldr	r3, [r6, #0]
   12f54:	cmp	r3, #4
   12f56:	beq.n	12f62 <__ssvfscanf_r+0x6ee>
   12f58:	movs	r2, #8
   12f5a:	movs	r1, #0
   12f5c:	mov	r0, r6
   12f5e:	bl	a528 <memset>
   12f62:	add.w	r2, r7, #368	; 0x170
   12f66:	ldr	r1, [r7, #72]	; 0x48
   12f68:	str	r6, [sp, #0]
   12f6a:	mov	r3, r5
   12f6c:	mov	r0, r9
   12f6e:	bl	157a0 <_mbrtowc_r>
   12f72:	adds	r2, r0, #1
   12f74:	mov	r4, r0
   12f76:	beq.w	12a4c <__ssvfscanf_r+0x1d8>
   12f7a:	cmp	r0, #0
   12f7c:	bne.w	13870 <__ssvfscanf_r+0xffc>
   12f80:	ldr	r3, [r7, #72]	; 0x48
   12f82:	str	r0, [r3, #0]
   12f84:	bl	15858 <iswspace>
   12f88:	cmp	r0, #0
   12f8a:	bne.w	13c46 <__ssvfscanf_r+0x13d2>
   12f8e:	add	sl, r5
   12f90:	add.w	r8, r8, #4294967295
   12f94:	ldr	r3, [r7, #52]	; 0x34
   12f96:	cmp	r3, #0
   12f98:	bne.w	13c02 <__ssvfscanf_r+0x138e>
   12f9c:	ldr	r3, [r7, #72]	; 0x48
   12f9e:	ldr	r2, [r7, #60]	; 0x3c
   12fa0:	adds	r3, #4
   12fa2:	str	r3, [r7, #72]	; 0x48
   12fa4:	cmp	r2, #0
   12fa6:	beq.w	13c02 <__ssvfscanf_r+0x138e>
   12faa:	ldr	r2, [r7, #40]	; 0x28
   12fac:	subs	r5, r3, r2
   12fae:	ldr	r3, [r7, #32]
   12fb0:	cmp.w	r3, r5, asr #2
   12fb4:	bls.w	13e64 <__ssvfscanf_r+0x15f0>
   12fb8:	ldr	r5, [r7, #52]	; 0x34
   12fba:	b.w	13876 <__ssvfscanf_r+0x1002>
   12fbe:	cmp.w	r8, #0
   12fc2:	it	eq
   12fc4:	moveq.w	r8, #4294967295
   12fc8:	lsls	r0, r4, #31
   12fca:	bpl.w	134c4 <__ssvfscanf_r+0xc50>
   12fce:	ands.w	r3, r4, #16
   12fd2:	str	r3, [r7, #40]	; 0x28
   12fd4:	bne.w	137be <__ssvfscanf_r+0xf4a>
   12fd8:	lsls	r1, r4, #24
   12fda:	bpl.w	13bb8 <__ssvfscanf_r+0x1344>
   12fde:	ldr	r6, [r7, #48]	; 0x30
   12fe0:	ldr.w	r3, [r6], #4
   12fe4:	str	r3, [r7, #32]
   12fe6:	cmp	r3, #0
   12fe8:	beq.w	12a5e <__ssvfscanf_r+0x1ea>
   12fec:	movs	r0, #128	; 0x80
   12fee:	bl	cf68 <malloc>
   12ff2:	mov	r4, r0
   12ff4:	cmp	r0, #0
   12ff6:	beq.w	13dd6 <__ssvfscanf_r+0x1562>
   12ffa:	ldr	r3, [r7, #32]
   12ffc:	ldr	r2, [r7, #64]	; 0x40
   12ffe:	str	r0, [r3, #0]
   13000:	ldrh	r5, [r2, #6]
   13002:	ldrh	r3, [r2, #4]
   13004:	cmp	r5, r3
   13006:	bcs.w	139c4 <__ssvfscanf_r+0x1150>
   1300a:	ldr	r0, [r2, #0]
   1300c:	ldr	r3, [r7, #32]
   1300e:	str.w	r3, [r0, r5, lsl #2]
   13012:	ldr	r3, [r7, #64]	; 0x40
   13014:	str	r6, [r7, #48]	; 0x30
   13016:	adds	r5, #1
   13018:	strh	r5, [r3, #6]
   1301a:	movs	r3, #32
   1301c:	str	r4, [r7, #28]
   1301e:	str	r3, [r7, #24]
   13020:	ldr	r6, [r7, #36]	; 0x24
   13022:	str.w	sl, [r7, #60]	; 0x3c
   13026:	movs	r5, #0
   13028:	mov	sl, r8
   1302a:	mov	r8, r4
   1302c:	bl	f004 <__locale_mb_cur_max>
   13030:	cmp	r0, r5
   13032:	beq.w	12a4c <__ssvfscanf_r+0x1d8>
   13036:	ldrd	r3, r2, [fp]
   1303a:	ldrb.w	r1, [r3], #1
   1303e:	subs	r2, #1
   13040:	add.w	r0, r7, #368	; 0x170
   13044:	strd	r3, r2, [fp]
   13048:	cmp	r6, #3
   1304a:	add.w	r3, r5, #1
   1304e:	strb	r1, [r0, r5]
   13050:	str	r3, [r7, #72]	; 0x48
   13052:	add.w	r4, r7, #96	; 0x60
   13056:	bne.n	1305e <__ssvfscanf_r+0x7ea>
   13058:	ldr	r3, [r4, #0]
   1305a:	cmp	r3, #4
   1305c:	beq.n	13068 <__ssvfscanf_r+0x7f4>
   1305e:	movs	r2, #8
   13060:	movs	r1, #0
   13062:	mov	r0, r4
   13064:	bl	a528 <memset>
   13068:	add.w	r2, r7, #368	; 0x170
   1306c:	ldr	r3, [r7, #72]	; 0x48
   1306e:	str	r4, [sp, #0]
   13070:	mov	r1, r8
   13072:	mov	r0, r9
   13074:	bl	157a0 <_mbrtowc_r>
   13078:	adds	r2, r0, #1
   1307a:	mov	r6, r0
   1307c:	beq.w	12a4c <__ssvfscanf_r+0x1d8>
   13080:	cmp	r0, #0
   13082:	bne.w	1361a <__ssvfscanf_r+0xda6>
   13086:	str.w	r0, [r8]
   1308a:	mov	r5, r0
   1308c:	add.w	r3, r7, #104	; 0x68
   13090:	movs	r2, #8
   13092:	movs	r1, #0
   13094:	mov	r0, r3
   13096:	str	r3, [r7, #52]	; 0x34
   13098:	bl	a528 <memset>
   1309c:	ldr	r1, [pc, #320]	; (131e0 <__ssvfscanf_r+0x96c>)
   1309e:	ldr	r3, [r7, #52]	; 0x34
   130a0:	ldr.w	r1, [r1, #224]	; 0xe0
   130a4:	mov	r2, r5
   130a6:	mov	r0, r9
   130a8:	mov	r5, r1
   130aa:	add.w	r1, r7, #80	; 0x50
   130ae:	blx	r5
   130b0:	cmp	r0, #1
   130b2:	beq.w	13860 <__ssvfscanf_r+0xfec>
   130b6:	movs	r2, #0
   130b8:	add.w	r3, r7, #112	; 0x70
   130bc:	ldrb	r3, [r3, r2]
   130be:	cmp	r3, #0
   130c0:	beq.w	13c06 <__ssvfscanf_r+0x1392>
   130c4:	ldr	r3, [r7, #60]	; 0x3c
   130c6:	ldr	r2, [r7, #72]	; 0x48
   130c8:	cmp	r6, #3
   130ca:	add	r3, r2
   130cc:	str	r3, [r7, #60]	; 0x3c
   130ce:	beq.w	13866 <__ssvfscanf_r+0xff2>
   130d2:	add.w	sl, sl, #4294967295
   130d6:	ldr	r3, [r7, #40]	; 0x28
   130d8:	cbnz	r3, 130f2 <__ssvfscanf_r+0x87e>
   130da:	ldr	r3, [r7, #32]
   130dc:	add.w	r8, r8, #4
   130e0:	cbz	r3, 130f2 <__ssvfscanf_r+0x87e>
   130e2:	ldr	r3, [r7, #28]
   130e4:	sub.w	r4, r8, r3
   130e8:	ldr	r3, [r7, #24]
   130ea:	cmp.w	r3, r4, asr #2
   130ee:	bls.w	138fc <__ssvfscanf_r+0x1088>
   130f2:	ldr.w	r3, [fp, #4]
   130f6:	cmp	r3, #0
   130f8:	mov.w	r5, #0
   130fc:	ble.w	1362c <__ssvfscanf_r+0xdb8>
   13100:	cmp.w	sl, #0
   13104:	bne.n	1302c <__ssvfscanf_r+0x7b8>
   13106:	ldr.w	sl, [r7, #60]	; 0x3c
   1310a:	str	r6, [r7, #36]	; 0x24
   1310c:	mov	r4, r8
   1310e:	ldr	r3, [r7, #40]	; 0x28
   13110:	cmp	r3, #0
   13112:	bne.w	128c2 <__ssvfscanf_r+0x4e>
   13116:	str	r3, [r4, #0]
   13118:	ldr	r3, [r7, #32]
   1311a:	cmp	r3, #0
   1311c:	beq.w	134a4 <__ssvfscanf_r+0xc30>
   13120:	ldr	r3, [r7, #28]
   13122:	ldr	r2, [r7, #24]
   13124:	subs	r1, r4, r3
   13126:	asrs	r3, r1, #2
   13128:	adds	r3, #1
   1312a:	cmp	r2, r3
   1312c:	bls.w	134a4 <__ssvfscanf_r+0xc30>
   13130:	ldr	r4, [r7, #32]
   13132:	adds	r1, #4
   13134:	ldr	r0, [r4, #0]
   13136:	bl	d500 <realloc>
   1313a:	cmp	r0, #0
   1313c:	beq.w	134a4 <__ssvfscanf_r+0xc30>
   13140:	str	r0, [r4, #0]
   13142:	b.n	134a4 <__ssvfscanf_r+0xc30>
   13144:	lsls	r1, r4, #20
   13146:	bpl.w	12cb0 <__ssvfscanf_r+0x43c>
   1314a:	ldr	r3, [r7, #60]	; 0x3c
   1314c:	ldr	r1, [r7, #72]	; 0x48
   1314e:	adds	r3, r3, r1
   13150:	bne.w	12cb0 <__ssvfscanf_r+0x43c>
   13154:	str	r3, [r7, #72]	; 0x48
   13156:	bic.w	r4, r4, #384	; 0x180
   1315a:	str	r3, [r7, #60]	; 0x3c
   1315c:	b.n	12c86 <__ssvfscanf_r+0x412>
   1315e:	ldr	r3, [pc, #132]	; (131e4 <__ssvfscanf_r+0x970>)
   13160:	bic.w	r4, r4, #2944	; 0xb80
   13164:	ldrsh.w	r6, [r3, r6, lsl #1]
   13168:	b.n	12e42 <__ssvfscanf_r+0x5ce>
   1316a:	and.w	r3, r4, #2432	; 0x980
   1316e:	cmp.w	r3, #256	; 0x100
   13172:	bne.w	12cb0 <__ssvfscanf_r+0x43c>
   13176:	ldr	r3, [r7, #52]	; 0x34
   13178:	cmp	r3, #1
   1317a:	bne.w	12cb0 <__ssvfscanf_r+0x43c>
   1317e:	movs	r3, #48	; 0x30
   13180:	strb.w	r3, [r5], #1
   13184:	bic.w	r4, r4, #256	; 0x100
   13188:	movs	r3, #0
   1318a:	orr.w	r4, r4, #2048	; 0x800
   1318e:	subs	r6, #1
   13190:	str	r3, [r7, #52]	; 0x34
   13192:	b.n	12c86 <__ssvfscanf_r+0x412>
   13194:	ldr	r3, [r7, #72]	; 0x48
   13196:	cmp	r3, #6
   13198:	bne.w	13c84 <__ssvfscanf_r+0x1410>
   1319c:	movs	r3, #7
   1319e:	str	r3, [r7, #72]	; 0x48
   131a0:	b.n	12c86 <__ssvfscanf_r+0x412>
   131a2:	lsls	r3, r4, #20
   131a4:	bpl.w	12cb0 <__ssvfscanf_r+0x43c>
   131a8:	and.w	r3, r4, #1280	; 0x500
   131ac:	cmp.w	r3, #1024	; 0x400
   131b0:	beq.n	131be <__ssvfscanf_r+0x94a>
   131b2:	lsls	r1, r4, #21
   131b4:	bpl.w	12cb0 <__ssvfscanf_r+0x43c>
   131b8:	ldr	r3, [r7, #52]	; 0x34
   131ba:	cmp	r3, #0
   131bc:	beq.n	1324e <__ssvfscanf_r+0x9da>
   131be:	lsls	r3, r4, #22
   131c0:	bmi.n	131cc <__ssvfscanf_r+0x958>
   131c2:	ldr	r3, [r7, #52]	; 0x34
   131c4:	ldr	r1, [r7, #28]
   131c6:	subs	r3, r3, r1
   131c8:	strd	r5, r3, [r7, #20]
   131cc:	bic.w	r4, r4, #3968	; 0xf80
   131d0:	movs	r3, #0
   131d2:	orr.w	r4, r4, #384	; 0x180
   131d6:	str	r3, [r7, #52]	; 0x34
   131d8:	b.n	12c86 <__ssvfscanf_r+0x412>
   131da:	nop
   131dc:	.word	0x20000825
   131e0:	.word	0x20008e44
   131e4:	.word	0x20002454
   131e8:	ldr	r3, [r7, #60]	; 0x3c
   131ea:	cmp	r3, #0
   131ec:	beq.w	135ee <__ssvfscanf_r+0xd7a>
   131f0:	ldr	r3, [r7, #60]	; 0x3c
   131f2:	cmp	r3, #2
   131f4:	beq.w	13958 <__ssvfscanf_r+0x10e4>
   131f8:	ldr	r3, [r7, #72]	; 0x48
   131fa:	cmp	r3, #1
   131fc:	beq.w	135e2 <__ssvfscanf_r+0xd6e>
   13200:	cmp	r3, #4
   13202:	beq.w	135e2 <__ssvfscanf_r+0xd6e>
   13206:	b.n	12cb0 <__ssvfscanf_r+0x43c>
   13208:	ldr	r3, [r7, #72]	; 0x48
   1320a:	cmp	r3, #7
   1320c:	bne.w	13c84 <__ssvfscanf_r+0x1410>
   13210:	movs	r3, #8
   13212:	str	r3, [r7, #72]	; 0x48
   13214:	b.n	12c86 <__ssvfscanf_r+0x412>
   13216:	lsls	r0, r4, #20
   13218:	bmi.w	1360e <__ssvfscanf_r+0xd9a>
   1321c:	ldr	r3, [r7, #60]	; 0x3c
   1321e:	cmp	r3, #1
   13220:	bne.w	12cb0 <__ssvfscanf_r+0x43c>
   13224:	movs	r3, #2
   13226:	str	r3, [r7, #60]	; 0x3c
   13228:	b.n	12c86 <__ssvfscanf_r+0x412>
   1322a:	lsls	r3, r4, #24
   1322c:	bpl.w	12cb0 <__ssvfscanf_r+0x43c>
   13230:	bic.w	r4, r4, #128	; 0x80
   13234:	b.n	12c86 <__ssvfscanf_r+0x412>
   13236:	ldr	r3, [r7, #72]	; 0x48
   13238:	cmp	r3, #0
   1323a:	bne.w	135d6 <__ssvfscanf_r+0xd62>
   1323e:	ldr	r3, [r7, #52]	; 0x34
   13240:	cbnz	r3, 13270 <__ssvfscanf_r+0x9fc>
   13242:	and.w	r3, r4, #1792	; 0x700
   13246:	cmp.w	r3, #1792	; 0x700
   1324a:	beq.w	13c8e <__ssvfscanf_r+0x141a>
   1324e:	ldr	r6, [r7, #72]	; 0x48
   13250:	vmov	r9, s16
   13254:	b.n	12cbe <__ssvfscanf_r+0x44a>
   13256:	lsls	r1, r4, #20
   13258:	bmi.w	135ca <__ssvfscanf_r+0xd56>
   1325c:	ldr	r3, [r7, #72]	; 0x48
   1325e:	cmp	r3, #2
   13260:	bne.w	13c84 <__ssvfscanf_r+0x1410>
   13264:	movs	r3, #3
   13266:	str	r3, [r7, #72]	; 0x48
   13268:	b.n	12c86 <__ssvfscanf_r+0x412>
   1326a:	lsls	r0, r4, #20
   1326c:	bpl.n	131a8 <__ssvfscanf_r+0x934>
   1326e:	b.n	1314a <__ssvfscanf_r+0x8d6>
   13270:	ldr	r6, [r7, #72]	; 0x48
   13272:	vmov	r9, s16
   13276:	bic.w	r4, r4, #256	; 0x100
   1327a:	b.n	12cbe <__ssvfscanf_r+0x44a>
   1327c:	ldr	r3, [pc, #564]	; (134b4 <__ssvfscanf_r+0xc40>)
   1327e:	ldrsh.w	r6, [r3, r6, lsl #1]
   13282:	cmp	r6, #8
   13284:	bgt.w	12e3e <__ssvfscanf_r+0x5ca>
   13288:	b.n	12e5c <__ssvfscanf_r+0x5e8>
   1328a:	and.w	r3, r4, #1536	; 0x600
   1328e:	cmp.w	r3, #512	; 0x200
   13292:	bne.w	12e5c <__ssvfscanf_r+0x5e8>
   13296:	bic.w	r4, r4, #512	; 0x200
   1329a:	orr.w	r4, r4, #1280	; 0x500
   1329e:	movs	r6, #16
   132a0:	b.n	12e42 <__ssvfscanf_r+0x5ce>
   132a2:	lsls	r3, r4, #24
   132a4:	bpl.w	12e5c <__ssvfscanf_r+0x5e8>
   132a8:	bic.w	r4, r4, #128	; 0x80
   132ac:	b.n	12e42 <__ssvfscanf_r+0x5ce>
   132ae:	orr.w	r4, r4, #1
   132b2:	ldr.w	r3, [fp, #4]
   132b6:	str	r1, [r7, #76]	; 0x4c
   132b8:	cmp	r3, #0
   132ba:	orr.w	r4, r4, #64	; 0x40
   132be:	mov.w	r5, #0
   132c2:	bgt.w	12ab6 <__ssvfscanf_r+0x242>
   132c6:	mov	r1, fp
   132c8:	mov	r0, r9
   132ca:	bl	15bc8 <__ssrefill_r>
   132ce:	cmp	r0, #0
   132d0:	bne.w	12a4c <__ssvfscanf_r+0x1d8>
   132d4:	lsls	r0, r4, #25
   132d6:	bmi.w	12abc <__ssvfscanf_r+0x248>
   132da:	ldr.w	r2, [fp]
   132de:	ldr	r6, [pc, #472]	; (134b8 <__ssvfscanf_r+0xc44>)
   132e0:	ldrb	r3, [r2, #0]
   132e2:	ldrb	r3, [r6, r3]
   132e4:	lsls	r1, r3, #28
   132e6:	bpl.w	12abc <__ssvfscanf_r+0x248>
   132ea:	ldr.w	r3, [fp, #4]
   132ee:	subs	r3, #1
   132f0:	cmp	r3, #0
   132f2:	add.w	sl, sl, #1
   132f6:	str.w	r3, [fp, #4]
   132fa:	add.w	r2, r2, #1
   132fe:	ble.n	13396 <__ssvfscanf_r+0xb22>
   13300:	str.w	r2, [fp]
   13304:	ldrb	r3, [r2, #0]
   13306:	ldrb	r3, [r6, r3]
   13308:	lsls	r1, r3, #28
   1330a:	bpl.w	12abc <__ssvfscanf_r+0x248>
   1330e:	b.n	132ea <__ssvfscanf_r+0xa76>
   13310:	orr.w	r4, r4, #1
   13314:	ldr	r3, [pc, #420]	; (134bc <__ssvfscanf_r+0xc48>)
   13316:	str	r3, [r7, #44]	; 0x2c
   13318:	movs	r3, #8
   1331a:	str	r1, [r7, #76]	; 0x4c
   1331c:	str	r3, [r7, #56]	; 0x38
   1331e:	movs	r5, #3
   13320:	b.w	12aac <__ssvfscanf_r+0x238>
   13324:	orr.w	r4, r4, #1
   13328:	ldr	r3, [pc, #404]	; (134c0 <__ssvfscanf_r+0xc4c>)
   1332a:	str	r3, [r7, #44]	; 0x2c
   1332c:	movs	r3, #10
   1332e:	str	r1, [r7, #76]	; 0x4c
   13330:	str	r3, [r7, #56]	; 0x38
   13332:	movs	r5, #3
   13334:	b.w	12aac <__ssvfscanf_r+0x238>
   13338:	lsls	r3, r4, #20
   1333a:	bpl.w	12e42 <__ssvfscanf_r+0x5ce>
   1333e:	cbnz	r6, 13346 <__ssvfscanf_r+0xad2>
   13340:	orr.w	r4, r4, #512	; 0x200
   13344:	movs	r6, #8
   13346:	lsls	r3, r4, #21
   13348:	bmi.w	13698 <__ssvfscanf_r+0xe24>
   1334c:	ldr	r3, [r7, #60]	; 0x3c
   1334e:	bic.w	r4, r4, #896	; 0x380
   13352:	cbz	r3, 1335c <__ssvfscanf_r+0xae8>
   13354:	subs	r3, #1
   13356:	str	r3, [r7, #60]	; 0x3c
   13358:	add.w	r8, r8, #1
   1335c:	ldr	r3, [r1, #4]
   1335e:	subs	r3, #1
   13360:	cmp	r3, #0
   13362:	add.w	sl, sl, #1
   13366:	str	r3, [r1, #4]
   13368:	bgt.w	12e52 <__ssvfscanf_r+0x5de>
   1336c:	mov	r0, r9
   1336e:	str	r1, [r7, #72]	; 0x48
   13370:	bl	15bc8 <__ssrefill_r>
   13374:	ldr	r1, [r7, #72]	; 0x48
   13376:	cmp	r0, #0
   13378:	beq.w	12e56 <__ssvfscanf_r+0x5e2>
   1337c:	b.n	12e5c <__ssvfscanf_r+0x5e8>
   1337e:	vmov	r0, s16
   13382:	mov	r1, fp
   13384:	bl	15bc8 <__ssrefill_r>
   13388:	cmp	r0, #0
   1338a:	bne.w	12cb0 <__ssvfscanf_r+0x43c>
   1338e:	cmp	r6, #0
   13390:	bne.w	12b1c <__ssvfscanf_r+0x2a8>
   13394:	b.n	12cb0 <__ssvfscanf_r+0x43c>
   13396:	mov	r1, fp
   13398:	mov	r0, r9
   1339a:	bl	15bc8 <__ssrefill_r>
   1339e:	cmp	r0, #0
   133a0:	bne.w	12a4c <__ssvfscanf_r+0x1d8>
   133a4:	ldr.w	r2, [fp]
   133a8:	b.n	132e0 <__ssvfscanf_r+0xa6c>
   133aa:	ldr.w	r2, [fp, #4]
   133ae:	b.n	133d0 <__ssvfscanf_r+0xb5c>
   133b0:	ldr.w	r3, [fp]
   133b4:	ldrb	r2, [r3, #0]
   133b6:	ldrb	r2, [r6, r2]
   133b8:	lsls	r1, r2, #28
   133ba:	add.w	r3, r3, #1
   133be:	bpl.w	128c2 <__ssvfscanf_r+0x4e>
   133c2:	ldr.w	r2, [fp, #4]
   133c6:	subs	r2, #1
   133c8:	strd	r3, r2, [fp]
   133cc:	add.w	sl, sl, #1
   133d0:	cmp	r2, #0
   133d2:	bgt.n	133b0 <__ssvfscanf_r+0xb3c>
   133d4:	mov	r1, fp
   133d6:	mov	r0, r9
   133d8:	bl	15bc8 <__ssrefill_r>
   133dc:	cmp	r0, #0
   133de:	beq.n	133b0 <__ssvfscanf_r+0xb3c>
   133e0:	b.w	128c2 <__ssvfscanf_r+0x4e>
   133e4:	lsls	r1, r4, #27
   133e6:	bmi.w	13a7c <__ssvfscanf_r+0x1208>
   133ea:	ands.w	r4, r4, #128	; 0x80
   133ee:	beq.w	13b48 <__ssvfscanf_r+0x12d4>
   133f2:	ldr	r4, [r7, #48]	; 0x30
   133f4:	ldr.w	r6, [r4], #4
   133f8:	str	r6, [r7, #72]	; 0x48
   133fa:	cmp	r6, #0
   133fc:	beq.w	12a5e <__ssvfscanf_r+0x1ea>
   13400:	movs	r0, #32
   13402:	bl	cf68 <malloc>
   13406:	mov	r5, r0
   13408:	cmp	r0, #0
   1340a:	beq.w	13cd2 <__ssvfscanf_r+0x145e>
   1340e:	ldr	r2, [r7, #64]	; 0x40
   13410:	str	r0, [r6, #0]
   13412:	ldrh	r3, [r2, #4]
   13414:	ldrh	r6, [r2, #6]
   13416:	cmp	r6, r3
   13418:	bcs.w	1396c <__ssvfscanf_r+0x10f8>
   1341c:	ldr	r0, [r2, #0]
   1341e:	ldr	r3, [r7, #72]	; 0x48
   13420:	str.w	r3, [r0, r6, lsl #2]
   13424:	ldr	r3, [r7, #64]	; 0x40
   13426:	str	r4, [r7, #48]	; 0x30
   13428:	adds	r6, #1
   1342a:	strh	r6, [r3, #6]
   1342c:	movs	r3, #32
   1342e:	str	r3, [r7, #60]	; 0x3c
   13430:	ldr.w	r2, [fp]
   13434:	ldr	r6, [pc, #128]	; (134b8 <__ssvfscanf_r+0xc44>)
   13436:	ldrb	r1, [r2, #0]
   13438:	ldrb	r1, [r6, r1]
   1343a:	lsls	r0, r1, #28
   1343c:	bmi.w	13998 <__ssvfscanf_r+0x1124>
   13440:	mov	r3, r6
   13442:	mov	r4, r5
   13444:	mov	r0, r2
   13446:	mov	r6, r5
   13448:	ldr.w	r1, [fp, #4]
   1344c:	ldr	r2, [r7, #72]	; 0x48
   1344e:	subs	r1, #1
   13450:	str.w	r1, [fp, #4]
   13454:	adds	r1, r0, #1
   13456:	str.w	r1, [fp]
   1345a:	mov	r5, r6
   1345c:	ldrb	r1, [r0, #0]
   1345e:	strb.w	r1, [r5], #1
   13462:	cbz	r2, 1346e <__ssvfscanf_r+0xbfa>
   13464:	ldr	r2, [r7, #60]	; 0x3c
   13466:	subs	r6, r5, r4
   13468:	cmp	r6, r2
   1346a:	bcs.w	13b62 <__ssvfscanf_r+0x12ee>
   1346e:	subs.w	r8, r8, #1
   13472:	beq.n	1348c <__ssvfscanf_r+0xc18>
   13474:	ldr.w	r1, [fp, #4]
   13478:	cmp	r1, #0
   1347a:	mov	r6, r5
   1347c:	ble.w	13bdc <__ssvfscanf_r+0x1368>
   13480:	ldr.w	r0, [fp]
   13484:	ldrb	r1, [r0, #0]
   13486:	ldrb	r1, [r3, r1]
   13488:	lsls	r1, r1, #28
   1348a:	bpl.n	13448 <__ssvfscanf_r+0xbd4>
   1348c:	subs	r1, r5, r4
   1348e:	add	sl, r1
   13490:	adds	r1, #1
   13492:	mov.w	r3, #0
   13496:	strb	r3, [r5, #0]
   13498:	ldr	r3, [r7, #72]	; 0x48
   1349a:	cbz	r3, 134a4 <__ssvfscanf_r+0xc30>
   1349c:	ldr	r3, [r7, #60]	; 0x3c
   1349e:	cmp	r3, r1
   134a0:	bhi.w	13bcc <__ssvfscanf_r+0x1358>
   134a4:	ldr	r3, [r7, #68]	; 0x44
   134a6:	adds	r3, #1
   134a8:	str	r3, [r7, #68]	; 0x44
   134aa:	b.w	128c2 <__ssvfscanf_r+0x4e>
   134ae:	movs	r3, #0
   134b0:	str	r3, [r7, #60]	; 0x3c
   134b2:	b.n	12d78 <__ssvfscanf_r+0x504>
   134b4:	.word	0x20002454
   134b8:	.word	0x20000825
   134bc:	.word	0x0001548d
   134c0:	.word	0x0000e8b1
   134c4:	lsls	r6, r4, #27
   134c6:	bmi.w	137cc <__ssvfscanf_r+0xf58>
   134ca:	ands.w	r4, r4, #128	; 0x80
   134ce:	beq.w	13bac <__ssvfscanf_r+0x1338>
   134d2:	ldr	r4, [r7, #48]	; 0x30
   134d4:	ldr.w	r6, [r4], #4
   134d8:	str	r6, [r7, #72]	; 0x48
   134da:	cmp	r6, #0
   134dc:	beq.w	12a5e <__ssvfscanf_r+0x1ea>
   134e0:	movs	r0, #32
   134e2:	bl	cf68 <malloc>
   134e6:	mov	r5, r0
   134e8:	cmp	r0, #0
   134ea:	beq.w	13cd2 <__ssvfscanf_r+0x145e>
   134ee:	ldr	r2, [r7, #64]	; 0x40
   134f0:	str	r0, [r6, #0]
   134f2:	ldrh	r3, [r2, #4]
   134f4:	ldrh	r6, [r2, #6]
   134f6:	cmp	r6, r3
   134f8:	bcs.w	139f0 <__ssvfscanf_r+0x117c>
   134fc:	ldr	r0, [r2, #0]
   134fe:	ldr	r3, [r7, #72]	; 0x48
   13500:	str.w	r3, [r0, r6, lsl #2]
   13504:	ldr	r3, [r7, #64]	; 0x40
   13506:	str	r4, [r7, #48]	; 0x30
   13508:	adds	r6, #1
   1350a:	strh	r6, [r3, #6]
   1350c:	movs	r4, #32
   1350e:	ldr.w	r2, [fp]
   13512:	add.w	r3, r7, #112	; 0x70
   13516:	mov	r1, r3
   13518:	ldrb	r3, [r2, #0]
   1351a:	ldrb	r3, [r1, r3]
   1351c:	cmp	r3, #0
   1351e:	beq.w	12a5e <__ssvfscanf_r+0x1ea>
   13522:	vmov	s16, r9
   13526:	ldr.w	r9, [r7, #72]	; 0x48
   1352a:	str.w	sl, [r7, #60]	; 0x3c
   1352e:	mov	r6, r5
   13530:	mov	sl, r4
   13532:	mov	r0, r2
   13534:	mov	r4, r1
   13536:	ldr.w	r1, [fp, #4]
   1353a:	adds	r3, r0, #1
   1353c:	subs	r1, #1
   1353e:	strd	r3, r1, [fp]
   13542:	mov	r1, r5
   13544:	ldrb	r0, [r0, #0]
   13546:	strb.w	r0, [r1], #1
   1354a:	cmp.w	r9, #0
   1354e:	beq.n	13556 <__ssvfscanf_r+0xce2>
   13550:	subs	r5, r1, r6
   13552:	cmp	r5, sl
   13554:	bcs.n	1364c <__ssvfscanf_r+0xdd8>
   13556:	mov	r5, r1
   13558:	subs.w	r8, r8, #1
   1355c:	beq.n	13574 <__ssvfscanf_r+0xd00>
   1355e:	ldr.w	r1, [fp, #4]
   13562:	cmp	r1, #0
   13564:	ble.w	1383c <__ssvfscanf_r+0xfc8>
   13568:	ldr.w	r0, [fp]
   1356c:	ldrb	r1, [r0, #0]
   1356e:	ldrb	r1, [r4, r1]
   13570:	cmp	r1, #0
   13572:	bne.n	13536 <__ssvfscanf_r+0xcc2>
   13574:	mov	r4, sl
   13576:	vmov	r9, s16
   1357a:	ldr.w	sl, [r7, #60]	; 0x3c
   1357e:	subs	r6, r5, r6
   13580:	beq.w	12a5e <__ssvfscanf_r+0x1ea>
   13584:	mov.w	r3, #0
   13588:	strb	r3, [r5, #0]
   1358a:	ldr	r3, [r7, #72]	; 0x48
   1358c:	cbz	r3, 13596 <__ssvfscanf_r+0xd22>
   1358e:	adds	r1, r6, #1
   13590:	cmp	r4, r1
   13592:	bhi.w	13bf0 <__ssvfscanf_r+0x137c>
   13596:	ldr	r3, [r7, #68]	; 0x44
   13598:	adds	r3, #1
   1359a:	add	sl, r6
   1359c:	str	r3, [r7, #68]	; 0x44
   1359e:	b.w	128c2 <__ssvfscanf_r+0x4e>
   135a2:	movs	r3, #0
   135a4:	str	r3, [r7, #16]
   135a6:	b.w	12afc <__ssvfscanf_r+0x288>
   135aa:	tst.w	r4, #143	; 0x8f
   135ae:	bne.w	12a5e <__ssvfscanf_r+0x1ea>
   135b2:	add.w	r8, r8, r8, lsl #2
   135b6:	add.w	r8, r2, r8, lsl #1
   135ba:	sub.w	r8, r8, #48	; 0x30
   135be:	b.w	12a90 <__ssvfscanf_r+0x21c>
   135c2:	str	r1, [r7, #76]	; 0x4c
   135c4:	movs	r5, #4
   135c6:	b.w	12aac <__ssvfscanf_r+0x238>
   135ca:	ldr	r3, [r7, #60]	; 0x3c
   135cc:	ldr	r1, [r7, #72]	; 0x48
   135ce:	adds	r3, r3, r1
   135d0:	bne.w	1325c <__ssvfscanf_r+0x9e8>
   135d4:	b.n	13154 <__ssvfscanf_r+0x8e0>
   135d6:	ldr	r3, [r7, #72]	; 0x48
   135d8:	cmp	r3, #3
   135da:	beq.n	135e2 <__ssvfscanf_r+0xd6e>
   135dc:	cmp	r3, #5
   135de:	bne.w	12cb0 <__ssvfscanf_r+0x43c>
   135e2:	ldr	r3, [r7, #72]	; 0x48
   135e4:	adds	r3, #1
   135e6:	uxtb	r3, r3
   135e8:	str	r3, [r7, #72]	; 0x48
   135ea:	b.w	12c86 <__ssvfscanf_r+0x412>
   135ee:	ldr	r3, [r7, #52]	; 0x34
   135f0:	cmp	r3, #0
   135f2:	bne.w	131f8 <__ssvfscanf_r+0x984>
   135f6:	and.w	r3, r4, #1792	; 0x700
   135fa:	cmp.w	r3, #1792	; 0x700
   135fe:	bne.w	131f8 <__ssvfscanf_r+0x984>
   13602:	movs	r3, #1
   13604:	bic.w	r4, r4, #1920	; 0x780
   13608:	str	r3, [r7, #60]	; 0x3c
   1360a:	b.w	12c86 <__ssvfscanf_r+0x412>
   1360e:	ldr	r3, [r7, #60]	; 0x3c
   13610:	ldr	r1, [r7, #72]	; 0x48
   13612:	adds	r3, r3, r1
   13614:	bne.w	1321c <__ssvfscanf_r+0x9a8>
   13618:	b.n	13154 <__ssvfscanf_r+0x8e0>
   1361a:	adds	r3, r0, #2
   1361c:	bne.w	13ed6 <__ssvfscanf_r+0x1662>
   13620:	ldr.w	r3, [fp, #4]
   13624:	ldr	r5, [r7, #72]	; 0x48
   13626:	cmp	r3, #0
   13628:	bgt.w	1302c <__ssvfscanf_r+0x7b8>
   1362c:	mov	r1, fp
   1362e:	mov	r0, r9
   13630:	bl	15bc8 <__ssrefill_r>
   13634:	cmp	r0, #0
   13636:	beq.w	13100 <__ssvfscanf_r+0x88c>
   1363a:	ldr.w	sl, [r7, #60]	; 0x3c
   1363e:	str	r6, [r7, #36]	; 0x24
   13640:	mov	r4, r8
   13642:	cmp	r5, #0
   13644:	beq.w	1310e <__ssvfscanf_r+0x89a>
   13648:	b.w	12a4c <__ssvfscanf_r+0x1d8>
   1364c:	mov.w	sl, sl, lsl #1
   13650:	mov	r0, r6
   13652:	mov	r1, sl
   13654:	bl	d500 <realloc>
   13658:	mov	r6, r0
   1365a:	cmp	r0, #0
   1365c:	beq.w	13cd2 <__ssvfscanf_r+0x145e>
   13660:	add	r5, r0
   13662:	str.w	r0, [r9]
   13666:	b.n	13558 <__ssvfscanf_r+0xce4>
   13668:	orr.w	r4, r4, #512	; 0x200
   1366c:	ldr	r3, [pc, #752]	; (13960 <__ssvfscanf_r+0x10ec>)
   1366e:	str	r3, [r7, #44]	; 0x2c
   13670:	movs	r3, #16
   13672:	str	r1, [r7, #76]	; 0x4c
   13674:	str	r3, [r7, #56]	; 0x38
   13676:	movs	r5, #3
   13678:	b.w	12aac <__ssvfscanf_r+0x238>
   1367c:	ldr	r3, [r7, #52]	; 0x34
   1367e:	adds	r3, #1
   13680:	str	r3, [r7, #52]	; 0x34
   13682:	ldr	r3, [r7, #16]
   13684:	bic.w	r4, r4, #128	; 0x80
   13688:	cmp	r3, #0
   1368a:	beq.w	12c8a <__ssvfscanf_r+0x416>
   1368e:	ldr	r3, [r7, #16]
   13690:	subs	r3, #1
   13692:	str	r3, [r7, #16]
   13694:	b.w	12c8c <__ssvfscanf_r+0x418>
   13698:	bic.w	r4, r4, #1408	; 0x580
   1369c:	b.w	12e42 <__ssvfscanf_r+0x5ce>
   136a0:	lsls	r2, r4, #28
   136a2:	bpl.w	13a34 <__ssvfscanf_r+0x11c0>
   136a6:	ldr	r3, [r7, #48]	; 0x30
   136a8:	ldr.w	r2, [r3], #4
   136ac:	str	r3, [r7, #48]	; 0x30
   136ae:	strb	r0, [r2, #0]
   136b0:	b.w	12e9a <__ssvfscanf_r+0x626>
   136b4:	ldrb.w	r1, [r5, #-1]
   136b8:	mov	r2, fp
   136ba:	mov	r0, r9
   136bc:	subs	r5, #1
   136be:	bl	15b48 <_sungetc_r>
   136c2:	b.w	12e70 <__ssvfscanf_r+0x5fc>
   136c6:	ldr	r3, [r7, #28]
   136c8:	ldr	r2, [r7, #52]	; 0x34
   136ca:	cmp	r3, r2
   136cc:	beq.w	12d2a <__ssvfscanf_r+0x4b6>
   136d0:	subs	r2, r3, r2
   136d2:	addw	r3, r7, #707	; 0x2c3
   136d6:	cmp	r5, r3
   136d8:	it	cs
   136da:	addwcs	r5, r7, #706	; 0x2c2
   136de:	ldr	r1, [pc, #644]	; (13964 <__ssvfscanf_r+0x10f0>)
   136e0:	mov	r0, r5
   136e2:	bl	eb1c <sprintf>
   136e6:	b.w	12d2a <__ssvfscanf_r+0x4b6>
   136ea:	lsls	r2, r4, #27
   136ec:	bmi.w	13952 <__ssvfscanf_r+0x10de>
   136f0:	lsls	r3, r4, #28
   136f2:	bmi.w	13a6a <__ssvfscanf_r+0x11f6>
   136f6:	lsls	r6, r4, #29
   136f8:	bpl.w	13c64 <__ssvfscanf_r+0x13f0>
   136fc:	ldr	r3, [r7, #48]	; 0x30
   136fe:	str	r1, [r7, #76]	; 0x4c
   13700:	ldr.w	r2, [r3], #4
   13704:	str	r3, [r7, #48]	; 0x30
   13706:	strh.w	sl, [r2]
   1370a:	b.w	128c2 <__ssvfscanf_r+0x4e>
   1370e:	lsls	r3, r4, #28
   13710:	bne.w	12a5e <__ssvfscanf_r+0x1ea>
   13714:	ldrb	r2, [r0, #1]
   13716:	cmp	r2, #104	; 0x68
   13718:	beq.w	13a28 <__ssvfscanf_r+0x11b4>
   1371c:	orr.w	r4, r4, #4
   13720:	mov	r0, r1
   13722:	b.w	12984 <__ssvfscanf_r+0x110>
   13726:	ldr	r3, [pc, #568]	; (13960 <__ssvfscanf_r+0x10ec>)
   13728:	str	r3, [r7, #44]	; 0x2c
   1372a:	movs	r3, #10
   1372c:	str	r1, [r7, #76]	; 0x4c
   1372e:	str	r3, [r7, #56]	; 0x38
   13730:	movs	r5, #3
   13732:	b.w	12aac <__ssvfscanf_r+0x238>
   13736:	ldr	r3, [pc, #560]	; (13968 <__ssvfscanf_r+0x10f4>)
   13738:	str	r3, [r7, #44]	; 0x2c
   1373a:	movs	r3, #0
   1373c:	str	r1, [r7, #76]	; 0x4c
   1373e:	str	r3, [r7, #56]	; 0x38
   13740:	movs	r5, #3
   13742:	b.w	12aac <__ssvfscanf_r+0x238>
   13746:	orr.w	r4, r4, #544	; 0x220
   1374a:	b.n	1366c <__ssvfscanf_r+0xdf8>
   1374c:	add.w	r0, r7, #112	; 0x70
   13750:	bl	14310 <__sccl>
   13754:	orr.w	r4, r4, #64	; 0x40
   13758:	str	r0, [r7, #76]	; 0x4c
   1375a:	movs	r5, #1
   1375c:	b.w	12aac <__ssvfscanf_r+0x238>
   13760:	lsls	r2, r4, #28
   13762:	bne.w	12a5e <__ssvfscanf_r+0x1ea>
   13766:	ldrb	r2, [r0, #1]
   13768:	cmp	r2, #108	; 0x6c
   1376a:	beq.w	13a1c <__ssvfscanf_r+0x11a8>
   1376e:	orr.w	r4, r4, #1
   13772:	mov	r0, r1
   13774:	b.w	12984 <__ssvfscanf_r+0x110>
   13778:	ands.w	r3, r4, #143	; 0x8f
   1377c:	bne.w	12a5e <__ssvfscanf_r+0x1ea>
   13780:	ldr	r2, [r7, #64]	; 0x40
   13782:	cmp	r2, #0
   13784:	beq.w	13b56 <__ssvfscanf_r+0x12e2>
   13788:	ldrb	r2, [r0, #1]
   1378a:	orr.w	r4, r4, #128	; 0x80
   1378e:	mov	r0, r1
   13790:	b.w	12984 <__ssvfscanf_r+0x110>
   13794:	orrs.w	r8, r8, r4
   13798:	bne.w	12a5e <__ssvfscanf_r+0x1ea>
   1379c:	ldrb	r2, [r0, #1]
   1379e:	movs	r4, #16
   137a0:	mov	r0, r1
   137a2:	b.w	12984 <__ssvfscanf_r+0x110>
   137a6:	str	r1, [r7, #76]	; 0x4c
   137a8:	b.w	128fa <__ssvfscanf_r+0x86>
   137ac:	movs	r3, #0
   137ae:	str	r3, [r7, #32]
   137b0:	str	r3, [r7, #40]	; 0x28
   137b2:	str	r3, [r7, #60]	; 0x3c
   137b4:	add.w	r3, r7, #84	; 0x54
   137b8:	str	r3, [r7, #72]	; 0x48
   137ba:	b.w	12f10 <__ssvfscanf_r+0x69c>
   137be:	movs	r3, #0
   137c0:	strd	r3, r3, [r7, #24]
   137c4:	str	r3, [r7, #32]
   137c6:	add.w	r4, r7, #84	; 0x54
   137ca:	b.n	13020 <__ssvfscanf_r+0x7ac>
   137cc:	ldr.w	r3, [fp]
   137d0:	add.w	r2, r7, #112	; 0x70
   137d4:	mov	r1, r2
   137d6:	ldrb	r2, [r3, #0]
   137d8:	ldrb	r2, [r1, r2]
   137da:	cmp	r2, #0
   137dc:	beq.w	12a5e <__ssvfscanf_r+0x1ea>
   137e0:	adds	r3, #1
   137e2:	str.w	r3, [fp]
   137e6:	ldr.w	r3, [fp, #4]
   137ea:	cmp.w	r8, #1
   137ee:	add.w	r3, r3, #4294967295
   137f2:	str.w	r3, [fp, #4]
   137f6:	it	ne
   137f8:	movne	r4, r1
   137fa:	bne.n	13826 <__ssvfscanf_r+0xfb2>
   137fc:	b.w	12ea6 <__ssvfscanf_r+0x632>
   13800:	ldr.w	r3, [fp]
   13804:	ldrb	r2, [r3, #0]
   13806:	ldrb	r2, [r4, r2]
   13808:	adds	r3, #1
   1380a:	cmp	r2, #0
   1380c:	beq.w	12ea6 <__ssvfscanf_r+0x632>
   13810:	str.w	r3, [fp]
   13814:	ldr.w	r3, [fp, #4]
   13818:	adds	r5, #1
   1381a:	subs	r3, #1
   1381c:	cmp	r5, r8
   1381e:	str.w	r3, [fp, #4]
   13822:	beq.w	12ea6 <__ssvfscanf_r+0x632>
   13826:	cmp	r3, #0
   13828:	bgt.n	13800 <__ssvfscanf_r+0xf8c>
   1382a:	mov	r1, fp
   1382c:	mov	r0, r9
   1382e:	bl	15bc8 <__ssrefill_r>
   13832:	cmp	r0, #0
   13834:	beq.n	13800 <__ssvfscanf_r+0xf8c>
   13836:	add	sl, r5
   13838:	b.w	128c2 <__ssvfscanf_r+0x4e>
   1383c:	vmov	r0, s16
   13840:	mov	r1, fp
   13842:	bl	15bc8 <__ssrefill_r>
   13846:	cmp	r0, #0
   13848:	beq.w	13568 <__ssvfscanf_r+0xcf4>
   1384c:	cmp	r5, r6
   1384e:	mov	r4, sl
   13850:	vmov	r9, s16
   13854:	ldr.w	sl, [r7, #60]	; 0x3c
   13858:	bne.w	1357e <__ssvfscanf_r+0xd0a>
   1385c:	b.w	12a4c <__ssvfscanf_r+0x1d8>
   13860:	ldrb.w	r2, [r7, #80]	; 0x50
   13864:	b.n	130b8 <__ssvfscanf_r+0x844>
   13866:	ldr	r3, [r4, #0]
   13868:	cmp	r3, #4
   1386a:	bne.w	130d2 <__ssvfscanf_r+0x85e>
   1386e:	b.n	130d6 <__ssvfscanf_r+0x862>
   13870:	adds	r3, r0, #2
   13872:	bne.w	13ee8 <__ssvfscanf_r+0x1674>
   13876:	ldr.w	r3, [fp, #4]
   1387a:	cmp	r3, #0
   1387c:	ble.w	13c2e <__ssvfscanf_r+0x13ba>
   13880:	ldr.w	r3, [fp]
   13884:	ldr	r2, [r7, #36]	; 0x24
   13886:	ldrb	r3, [r3, #0]
   13888:	ldrb	r3, [r2, r3]
   1388a:	lsls	r0, r3, #28
   1388c:	bmi.n	13896 <__ssvfscanf_r+0x1022>
   1388e:	cmp.w	r8, #0
   13892:	bne.w	12f28 <__ssvfscanf_r+0x6b4>
   13896:	str	r4, [r7, #36]	; 0x24
   13898:	ldr	r3, [r7, #52]	; 0x34
   1389a:	cmp	r3, #0
   1389c:	bne.w	128c2 <__ssvfscanf_r+0x4e>
   138a0:	ldr	r2, [r7, #72]	; 0x48
   138a2:	str	r3, [r2, #0]
   138a4:	ldr	r3, [r7, #60]	; 0x3c
   138a6:	cmp	r3, #0
   138a8:	beq.w	134a4 <__ssvfscanf_r+0xc30>
   138ac:	ldr	r3, [r7, #40]	; 0x28
   138ae:	subs	r1, r2, r3
   138b0:	asrs	r3, r1, #2
   138b2:	ldr	r2, [r7, #32]
   138b4:	adds	r3, #1
   138b6:	cmp	r2, r3
   138b8:	bls.w	134a4 <__ssvfscanf_r+0xc30>
   138bc:	ldr	r4, [r7, #60]	; 0x3c
   138be:	adds	r1, #4
   138c0:	ldr	r0, [r4, #0]
   138c2:	bl	d500 <realloc>
   138c6:	cmp	r0, #0
   138c8:	bne.w	13140 <__ssvfscanf_r+0x8cc>
   138cc:	b.n	134a4 <__ssvfscanf_r+0xc30>
   138ce:	ldr.w	r2, [r3], #4
   138d2:	vstr	d0, [r2]
   138d6:	str	r3, [r7, #48]	; 0x30
   138d8:	b.n	134a4 <__ssvfscanf_r+0xc30>
   138da:	ldr	r5, [r7, #12]
   138dc:	ldr	r1, [r7, #32]
   138de:	ldr	r6, [r7, #4]
   138e0:	mov	r0, r5
   138e2:	mov	r2, r8
   138e4:	mov	fp, r4
   138e6:	ldr	r4, [r7, #8]
   138e8:	bl	14398 <stpncpy>
   138ec:	ldr	r3, [r7, #52]	; 0x34
   138ee:	str	r3, [r7, #28]
   138f0:	bic.w	r4, r4, #640	; 0x280
   138f4:	subs	r6, #1
   138f6:	mov	r5, r0
   138f8:	b.w	12c8c <__ssvfscanf_r+0x418>
   138fc:	ldr	r0, [r7, #28]
   138fe:	lsls	r1, r3, #3
   13900:	mov	r5, r3
   13902:	bl	d500 <realloc>
   13906:	str	r0, [r7, #28]
   13908:	cmp	r0, #0
   1390a:	beq.w	13dd6 <__ssvfscanf_r+0x1562>
   1390e:	ldr	r2, [r7, #32]
   13910:	lsls	r3, r5, #1
   13912:	add.w	r8, r0, r4
   13916:	str	r0, [r2, #0]
   13918:	str	r3, [r7, #24]
   1391a:	b.w	130f2 <__ssvfscanf_r+0x87e>
   1391e:	cmp	r6, #2
   13920:	bls.w	13eac <__ssvfscanf_r+0x1638>
   13924:	cmp	r6, #3
   13926:	beq.w	12cd0 <__ssvfscanf_r+0x45c>
   1392a:	subs	r6, #4
   1392c:	uxtb.w	r8, r6
   13930:	mvn.w	r3, r8
   13934:	adds	r6, r5, r3
   13936:	ldrb.w	r1, [r5, #-1]!
   1393a:	mov	r2, fp
   1393c:	mov	r0, r9
   1393e:	bl	15b48 <_sungetc_r>
   13942:	cmp	r6, r5
   13944:	bne.n	13936 <__ssvfscanf_r+0x10c2>
   13946:	add.w	sl, sl, #4294967295
   1394a:	sub.w	sl, sl, r8
   1394e:	b.w	12cd0 <__ssvfscanf_r+0x45c>
   13952:	str	r1, [r7, #76]	; 0x4c
   13954:	b.w	128c2 <__ssvfscanf_r+0x4e>
   13958:	movs	r3, #3
   1395a:	str	r3, [r7, #60]	; 0x3c
   1395c:	b.w	12c86 <__ssvfscanf_r+0x412>
   13960:	.word	0x0001548d
   13964:	.word	0x2000081c
   13968:	.word	0x0000e8b1
   1396c:	movw	r2, #65526	; 0xfff6
   13970:	cmp	r3, r2
   13972:	bhi.w	13ea4 <__ssvfscanf_r+0x1630>
   13976:	ldr	r2, [r7, #64]	; 0x40
   13978:	adds	r3, #8
   1397a:	uxth	r3, r3
   1397c:	ldr	r0, [r2, #0]
   1397e:	str	r0, [r7, #60]	; 0x3c
   13980:	lsls	r1, r3, #2
   13982:	str	r3, [r7, #52]	; 0x34
   13984:	bl	d500 <realloc>
   13988:	cmp	r0, #0
   1398a:	beq.w	13e84 <__ssvfscanf_r+0x1610>
   1398e:	ldr	r2, [r7, #64]	; 0x40
   13990:	ldr	r3, [r7, #52]	; 0x34
   13992:	strh	r3, [r2, #4]
   13994:	str	r0, [r2, #0]
   13996:	b.n	1341e <__ssvfscanf_r+0xbaa>
   13998:	movs	r1, #1
   1399a:	b.n	13492 <__ssvfscanf_r+0xc1e>
   1399c:	movw	r2, #65526	; 0xfff6
   139a0:	cmp	r3, r2
   139a2:	bhi.w	13ecc <__ssvfscanf_r+0x1658>
   139a6:	adds	r3, #8
   139a8:	uxth	r6, r3
   139aa:	ldr	r3, [r7, #64]	; 0x40
   139ac:	lsls	r1, r6, #2
   139ae:	ldr	r0, [r3, #0]
   139b0:	bl	d500 <realloc>
   139b4:	ldr	r3, [r7, #64]	; 0x40
   139b6:	cmp	r0, #0
   139b8:	beq.w	13e38 <__ssvfscanf_r+0x15c4>
   139bc:	strh	r6, [r3, #4]
   139be:	str	r0, [r3, #0]
   139c0:	b.w	12efa <__ssvfscanf_r+0x686>
   139c4:	movw	r2, #65526	; 0xfff6
   139c8:	cmp	r3, r2
   139ca:	bhi.w	13ecc <__ssvfscanf_r+0x1658>
   139ce:	ldr	r2, [r7, #64]	; 0x40
   139d0:	adds	r3, #8
   139d2:	uxth	r3, r3
   139d4:	lsls	r1, r3, #2
   139d6:	ldr	r0, [r2, #0]
   139d8:	str	r3, [r7, #72]	; 0x48
   139da:	bl	d500 <realloc>
   139de:	ldr	r3, [r7, #72]	; 0x48
   139e0:	cmp	r0, #0
   139e2:	beq.w	13e36 <__ssvfscanf_r+0x15c2>
   139e6:	ldr	r2, [r7, #64]	; 0x40
   139e8:	strh	r3, [r2, #4]
   139ea:	str	r0, [r2, #0]
   139ec:	b.w	1300c <__ssvfscanf_r+0x798>
   139f0:	movw	r2, #65526	; 0xfff6
   139f4:	cmp	r3, r2
   139f6:	bhi.w	13ea4 <__ssvfscanf_r+0x1630>
   139fa:	ldr	r2, [r7, #64]	; 0x40
   139fc:	adds	r3, #8
   139fe:	uxth	r3, r3
   13a00:	ldr	r0, [r2, #0]
   13a02:	str	r0, [r7, #60]	; 0x3c
   13a04:	lsls	r1, r3, #2
   13a06:	str	r3, [r7, #52]	; 0x34
   13a08:	bl	d500 <realloc>
   13a0c:	cmp	r0, #0
   13a0e:	beq.w	13e84 <__ssvfscanf_r+0x1610>
   13a12:	ldr	r2, [r7, #64]	; 0x40
   13a14:	ldr	r3, [r7, #52]	; 0x34
   13a16:	strh	r3, [r2, #4]
   13a18:	str	r0, [r2, #0]
   13a1a:	b.n	134fe <__ssvfscanf_r+0xc8a>
   13a1c:	ldrb	r2, [r0, #2]
   13a1e:	orr.w	r4, r4, #2
   13a22:	adds	r0, #2
   13a24:	b.w	12984 <__ssvfscanf_r+0x110>
   13a28:	ldrb	r2, [r0, #2]
   13a2a:	orr.w	r4, r4, #8
   13a2e:	adds	r0, #2
   13a30:	b.w	12984 <__ssvfscanf_r+0x110>
   13a34:	lsls	r3, r4, #29
   13a36:	bmi.n	13aea <__ssvfscanf_r+0x1276>
   13a38:	ands.w	r2, r4, #1
   13a3c:	bne.w	12e90 <__ssvfscanf_r+0x61c>
   13a40:	lsls	r6, r4, #30
   13a42:	bpl.w	12e90 <__ssvfscanf_r+0x61c>
   13a46:	ldr	r3, [pc, #716]	; (13d14 <__ssvfscanf_r+0x14a0>)
   13a48:	ldr	r1, [r7, #44]	; 0x2c
   13a4a:	cmp	r1, r3
   13a4c:	mov	r0, r9
   13a4e:	ldr	r3, [r7, #56]	; 0x38
   13a50:	ldr	r1, [r7, #40]	; 0x28
   13a52:	beq.w	13ed0 <__ssvfscanf_r+0x165c>
   13a56:	bl	155fc <_strtoll_r>
   13a5a:	ldr	r3, [r7, #48]	; 0x30
   13a5c:	ldr.w	r2, [r3], #4
   13a60:	str	r3, [r7, #48]	; 0x30
   13a62:	strd	r0, r1, [r2]
   13a66:	b.w	12e9a <__ssvfscanf_r+0x626>
   13a6a:	ldr	r3, [r7, #48]	; 0x30
   13a6c:	str	r1, [r7, #76]	; 0x4c
   13a6e:	ldr.w	r2, [r3], #4
   13a72:	str	r3, [r7, #48]	; 0x30
   13a74:	strb.w	sl, [r2]
   13a78:	b.w	128c2 <__ssvfscanf_r+0x4e>
   13a7c:	ldr.w	r3, [fp]
   13a80:	ldr	r6, [pc, #660]	; (13d18 <__ssvfscanf_r+0x14a4>)
   13a82:	ldrb	r2, [r3, #0]
   13a84:	ldrb	r2, [r6, r2]
   13a86:	lsls	r2, r2, #28
   13a88:	bmi.w	128c2 <__ssvfscanf_r+0x4e>
   13a8c:	adds	r3, #1
   13a8e:	str.w	r3, [fp]
   13a92:	ldr.w	r3, [fp, #4]
   13a96:	cmp.w	r8, #1
   13a9a:	add.w	r3, r3, #4294967295
   13a9e:	str.w	r3, [fp, #4]
   13aa2:	it	eq
   13aa4:	addeq.w	sl, sl, #1
   13aa8:	beq.w	128c2 <__ssvfscanf_r+0x4e>
   13aac:	movs	r4, #1
   13aae:	b.n	13ad4 <__ssvfscanf_r+0x1260>
   13ab0:	ldr.w	r3, [fp]
   13ab4:	ldrb	r2, [r3, #0]
   13ab6:	ldrb	r2, [r6, r2]
   13ab8:	lsls	r5, r2, #28
   13aba:	add.w	r3, r3, #1
   13abe:	bmi.n	13ae4 <__ssvfscanf_r+0x1270>
   13ac0:	str.w	r3, [fp]
   13ac4:	ldr.w	r3, [fp, #4]
   13ac8:	adds	r4, #1
   13aca:	subs	r3, #1
   13acc:	cmp	r4, r8
   13ace:	str.w	r3, [fp, #4]
   13ad2:	beq.n	13ae4 <__ssvfscanf_r+0x1270>
   13ad4:	cmp	r3, #0
   13ad6:	bgt.n	13ab0 <__ssvfscanf_r+0x123c>
   13ad8:	mov	r1, fp
   13ada:	mov	r0, r9
   13adc:	bl	15bc8 <__ssrefill_r>
   13ae0:	cmp	r0, #0
   13ae2:	beq.n	13ab0 <__ssvfscanf_r+0x123c>
   13ae4:	add	sl, r4
   13ae6:	b.w	128c2 <__ssvfscanf_r+0x4e>
   13aea:	ldr	r3, [r7, #48]	; 0x30
   13aec:	ldr.w	r2, [r3], #4
   13af0:	str	r3, [r7, #48]	; 0x30
   13af2:	strh	r0, [r2, #0]
   13af4:	b.w	12e9a <__ssvfscanf_r+0x626>
   13af8:	ldr	r3, [r7, #64]	; 0x40
   13afa:	cmp	r3, #0
   13afc:	beq.w	13ddc <__ssvfscanf_r+0x1568>
   13b00:	ldr	r3, [r7, #64]	; 0x40
   13b02:	ldr.w	r8, [r3]
   13b06:	ldrh	r6, [r3, #6]
   13b08:	cbz	r6, 13b28 <__ssvfscanf_r+0x12b4>
   13b0a:	movs	r4, #0
   13b0c:	sub.w	r5, r8, #4
   13b10:	mov	r9, r4
   13b12:	ldr.w	r3, [r5, #4]!
   13b16:	ldr	r0, [r3, #0]
   13b18:	bl	cf78 <free>
   13b1c:	adds	r4, #1
   13b1e:	ldr	r3, [r5, #0]
   13b20:	cmp	r6, r4
   13b22:	str.w	r9, [r3]
   13b26:	bne.n	13b12 <__ssvfscanf_r+0x129e>
   13b28:	mov.w	r3, #4294967295
   13b2c:	str	r3, [r7, #68]	; 0x44
   13b2e:	cmp.w	r8, #0
   13b32:	bne.w	12a6e <__ssvfscanf_r+0x1fa>
   13b36:	b.w	12a74 <__ssvfscanf_r+0x200>
   13b3a:	ldr	r0, [pc, #480]	; (13d1c <__ssvfscanf_r+0x14a8>)
   13b3c:	str	r3, [r7, #48]	; 0x30
   13b3e:	bl	f670 <nanf>
   13b42:	vstr	s0, [r4]
   13b46:	b.n	134a4 <__ssvfscanf_r+0xc30>
   13b48:	ldr	r2, [r7, #48]	; 0x30
   13b4a:	str	r4, [r7, #60]	; 0x3c
   13b4c:	ldr.w	r5, [r2], #4
   13b50:	str	r2, [r7, #48]	; 0x30
   13b52:	str	r4, [r7, #72]	; 0x48
   13b54:	b.n	13430 <__ssvfscanf_r+0xbbc>
   13b56:	sub	sp, #8
   13b58:	strd	r3, r3, [sp, #8]
   13b5c:	add	r3, sp, #8
   13b5e:	str	r3, [r7, #64]	; 0x40
   13b60:	b.n	13788 <__ssvfscanf_r+0xf14>
   13b62:	str	r3, [r7, #52]	; 0x34
   13b64:	lsls	r3, r2, #1
   13b66:	mov	r0, r4
   13b68:	mov	r1, r3
   13b6a:	str	r3, [r7, #60]	; 0x3c
   13b6c:	bl	d500 <realloc>
   13b70:	mov	r4, r0
   13b72:	cmp	r0, #0
   13b74:	beq.w	13cd2 <__ssvfscanf_r+0x145e>
   13b78:	ldr	r3, [r7, #72]	; 0x48
   13b7a:	adds	r5, r0, r6
   13b7c:	str	r0, [r3, #0]
   13b7e:	ldr	r3, [r7, #52]	; 0x34
   13b80:	b.n	1346e <__ssvfscanf_r+0xbfa>
   13b82:	ldr	r5, [r7, #20]
   13b84:	mov	r1, r5
   13b86:	movs	r3, #10
   13b88:	adds	r1, #1
   13b8a:	mov	r0, r9
   13b8c:	bl	e8b0 <_strtol_r>
   13b90:	ldr	r3, [r7, #24]
   13b92:	subs	r2, r0, r3
   13b94:	b.n	136d2 <__ssvfscanf_r+0xe5e>
   13b96:	ldrd	r3, r2, [r7, #48]	; 0x30
   13b9a:	ldr.w	r1, [r3], #4
   13b9e:	str	r2, [r7, #32]
   13ba0:	str	r1, [r7, #72]	; 0x48
   13ba2:	str	r3, [r7, #48]	; 0x30
   13ba4:	str	r2, [r7, #40]	; 0x28
   13ba6:	str	r2, [r7, #60]	; 0x3c
   13ba8:	b.w	12f10 <__ssvfscanf_r+0x69c>
   13bac:	ldr	r3, [r7, #48]	; 0x30
   13bae:	str	r4, [r7, #72]	; 0x48
   13bb0:	ldr.w	r5, [r3], #4
   13bb4:	str	r3, [r7, #48]	; 0x30
   13bb6:	b.n	1350e <__ssvfscanf_r+0xc9a>
   13bb8:	ldr	r3, [r7, #48]	; 0x30
   13bba:	ldr	r2, [r7, #40]	; 0x28
   13bbc:	ldr.w	r4, [r3], #4
   13bc0:	str	r2, [r7, #24]
   13bc2:	strd	r2, r2, [r7, #28]
   13bc6:	str	r3, [r7, #48]	; 0x30
   13bc8:	b.w	13020 <__ssvfscanf_r+0x7ac>
   13bcc:	ldr	r4, [r7, #72]	; 0x48
   13bce:	ldr	r0, [r4, #0]
   13bd0:	bl	d500 <realloc>
   13bd4:	cmp	r0, #0
   13bd6:	bne.w	13140 <__ssvfscanf_r+0x8cc>
   13bda:	b.n	134a4 <__ssvfscanf_r+0xc30>
   13bdc:	mov	r1, fp
   13bde:	mov	r0, r9
   13be0:	str	r3, [r7, #52]	; 0x34
   13be2:	bl	15bc8 <__ssrefill_r>
   13be6:	ldr	r3, [r7, #52]	; 0x34
   13be8:	cmp	r0, #0
   13bea:	beq.w	13480 <__ssvfscanf_r+0xc0c>
   13bee:	b.n	1348c <__ssvfscanf_r+0xc18>
   13bf0:	ldr	r0, [r3, #0]
   13bf2:	mov	r4, r3
   13bf4:	bl	d500 <realloc>
   13bf8:	cmp	r0, #0
   13bfa:	beq.w	13596 <__ssvfscanf_r+0xd22>
   13bfe:	str	r0, [r4, #0]
   13c00:	b.n	13596 <__ssvfscanf_r+0xd22>
   13c02:	movs	r5, #0
   13c04:	b.n	13876 <__ssvfscanf_r+0x1002>
   13c06:	ldr	r5, [r7, #72]	; 0x48
   13c08:	ldr.w	sl, [r7, #60]	; 0x3c
   13c0c:	str	r6, [r7, #36]	; 0x24
   13c0e:	mov	r4, r8
   13c10:	cmp	r5, #0
   13c12:	beq.w	1310e <__ssvfscanf_r+0x89a>
   13c16:	subs	r5, #1
   13c18:	add.w	r3, r7, #368	; 0x170
   13c1c:	mov	r2, fp
   13c1e:	ldrb	r1, [r3, r5]
   13c20:	mov	r0, r9
   13c22:	bl	15b48 <_sungetc_r>
   13c26:	cmp	r5, #0
   13c28:	bne.n	13c16 <__ssvfscanf_r+0x13a2>
   13c2a:	b.w	1310e <__ssvfscanf_r+0x89a>
   13c2e:	mov	r1, fp
   13c30:	mov	r0, r9
   13c32:	bl	15bc8 <__ssrefill_r>
   13c36:	cmp	r0, #0
   13c38:	beq.w	13880 <__ssvfscanf_r+0x100c>
   13c3c:	str	r4, [r7, #36]	; 0x24
   13c3e:	cmp	r5, #0
   13c40:	bne.w	12a4c <__ssvfscanf_r+0x1d8>
   13c44:	b.n	13898 <__ssvfscanf_r+0x1024>
   13c46:	str	r4, [r7, #36]	; 0x24
   13c48:	cmp	r5, #0
   13c4a:	beq.w	13898 <__ssvfscanf_r+0x1024>
   13c4e:	subs	r5, #1
   13c50:	add.w	r3, r7, #368	; 0x170
   13c54:	mov	r2, fp
   13c56:	ldrb	r1, [r3, r5]
   13c58:	mov	r0, r9
   13c5a:	bl	15b48 <_sungetc_r>
   13c5e:	cmp	r5, #0
   13c60:	bne.n	13c4e <__ssvfscanf_r+0x13da>
   13c62:	b.n	13898 <__ssvfscanf_r+0x1024>
   13c64:	lsls	r5, r4, #31
   13c66:	bmi.n	13ce2 <__ssvfscanf_r+0x146e>
   13c68:	lsls	r4, r4, #30
   13c6a:	bpl.n	13ce2 <__ssvfscanf_r+0x146e>
   13c6c:	ldr	r3, [r7, #48]	; 0x30
   13c6e:	str	r1, [r7, #76]	; 0x4c
   13c70:	ldr.w	r2, [r3], #4
   13c74:	str	r3, [r7, #48]	; 0x30
   13c76:	mov.w	r3, sl, asr #31
   13c7a:	str.w	sl, [r2]
   13c7e:	str	r3, [r2, #4]
   13c80:	b.w	128c2 <__ssvfscanf_r+0x4e>
   13c84:	vmov	r9, s16
   13c88:	mov	r6, r3
   13c8a:	b.w	12cb6 <__ssvfscanf_r+0x442>
   13c8e:	movs	r3, #1
   13c90:	bic.w	r4, r4, #1920	; 0x780
   13c94:	str	r3, [r7, #72]	; 0x48
   13c96:	b.w	12c86 <__ssvfscanf_r+0x412>
   13c9a:	cmp.w	r8, #1
   13c9e:	it	cc
   13ca0:	movcc.w	r8, #1
   13ca4:	ands.w	r3, r4, #1
   13ca8:	bne.n	13d20 <__ssvfscanf_r+0x14ac>
   13caa:	lsls	r5, r4, #27
   13cac:	bmi.w	13f1c <__ssvfscanf_r+0x16a8>
   13cb0:	lsls	r4, r4, #24
   13cb2:	bpl.w	13f4e <__ssvfscanf_r+0x16da>
   13cb6:	ldr	r3, [r7, #48]	; 0x30
   13cb8:	ldr.w	r5, [r3], #4
   13cbc:	str	r3, [r7, #72]	; 0x48
   13cbe:	cmp	r5, #0
   13cc0:	beq.w	12a5e <__ssvfscanf_r+0x1ea>
   13cc4:	mov	r0, r8
   13cc6:	bl	cf68 <malloc>
   13cca:	mov	r3, r0
   13ccc:	cmp	r0, #0
   13cce:	bne.w	13e8a <__ssvfscanf_r+0x1616>
   13cd2:	ldr	r3, [r7, #64]	; 0x40
   13cd4:	cmp	r3, #0
   13cd6:	beq.w	13ddc <__ssvfscanf_r+0x1568>
   13cda:	ldr.w	r8, [r3]
   13cde:	ldrh	r6, [r3, #6]
   13ce0:	b.n	13b08 <__ssvfscanf_r+0x1294>
   13ce2:	ldr	r3, [r7, #48]	; 0x30
   13ce4:	str	r1, [r7, #76]	; 0x4c
   13ce6:	ldr.w	r2, [r3], #4
   13cea:	str.w	sl, [r2]
   13cee:	str	r3, [r7, #48]	; 0x30
   13cf0:	b.w	128c2 <__ssvfscanf_r+0x4e>
   13cf4:	mov	r3, r5
   13cf6:	ldr	r5, [r7, #40]	; 0x28
   13cf8:	cmp	r3, r5
   13cfa:	bls.w	12a5e <__ssvfscanf_r+0x1ea>
   13cfe:	mov	r4, r3
   13d00:	ldrb.w	r1, [r4, #-1]!
   13d04:	mov	r2, fp
   13d06:	mov	r0, r9
   13d08:	bl	15b48 <_sungetc_r>
   13d0c:	cmp	r4, r5
   13d0e:	bne.n	13d00 <__ssvfscanf_r+0x148c>
   13d10:	b.w	12a5e <__ssvfscanf_r+0x1ea>
   13d14:	.word	0x0001548d
   13d18:	.word	0x20000825
   13d1c:	.word	0x20000614
   13d20:	ands.w	r3, r4, #16
   13d24:	str	r3, [r7, #52]	; 0x34
   13d26:	beq.n	13de6 <__ssvfscanf_r+0x1572>
   13d28:	movs	r5, #0
   13d2a:	str	r5, [r7, #60]	; 0x3c
   13d2c:	str	r5, [r7, #72]	; 0x48
   13d2e:	mov	r6, r5
   13d30:	movs	r4, #0
   13d32:	mov	r3, r9
   13d34:	mov	r9, r8
   13d36:	mov	r8, r5
   13d38:	mov	r5, r4
   13d3a:	mov	r4, r3
   13d3c:	bl	f004 <__locale_mb_cur_max>
   13d40:	cmp	r0, r5
   13d42:	beq.w	12a4c <__ssvfscanf_r+0x1d8>
   13d46:	ldrd	r3, r2, [fp]
   13d4a:	ldrb.w	r1, [r3], #1
   13d4e:	subs	r2, #1
   13d50:	strd	r3, r2, [fp]
   13d54:	ldr	r2, [r7, #36]	; 0x24
   13d56:	add.w	r0, r7, #368	; 0x170
   13d5a:	cmp	r2, #3
   13d5c:	strb	r1, [r0, r5]
   13d5e:	add.w	r3, r5, #1
   13d62:	add.w	r5, r7, #104	; 0x68
   13d66:	bne.n	13d6e <__ssvfscanf_r+0x14fa>
   13d68:	ldr	r2, [r5, #0]
   13d6a:	cmp	r2, #4
   13d6c:	beq.n	13d7c <__ssvfscanf_r+0x1508>
   13d6e:	movs	r2, #8
   13d70:	movs	r1, #0
   13d72:	mov	r0, r5
   13d74:	str	r3, [r7, #40]	; 0x28
   13d76:	bl	a528 <memset>
   13d7a:	ldr	r3, [r7, #40]	; 0x28
   13d7c:	str	r5, [sp, #0]
   13d7e:	add.w	r2, r7, #368	; 0x170
   13d82:	mov	r1, r6
   13d84:	mov	r0, r4
   13d86:	str	r3, [r7, #40]	; 0x28
   13d88:	bl	157a0 <_mbrtowc_r>
   13d8c:	adds	r3, r0, #1
   13d8e:	str	r0, [r7, #36]	; 0x24
   13d90:	beq.w	12a4c <__ssvfscanf_r+0x1d8>
   13d94:	ldr	r3, [r7, #40]	; 0x28
   13d96:	cmp	r0, #0
   13d98:	bne.w	1402a <__ssvfscanf_r+0x17b6>
   13d9c:	ldr	r2, [r7, #52]	; 0x34
   13d9e:	cbnz	r2, 13da2 <__ssvfscanf_r+0x152e>
   13da0:	str	r2, [r6, #0]
   13da2:	add	sl, r3
   13da4:	add.w	r9, r9, #4294967295
   13da8:	ldr	r3, [r7, #52]	; 0x34
   13daa:	cmp	r3, #0
   13dac:	bne.w	1409a <__ssvfscanf_r+0x1826>
   13db0:	ldr	r3, [r7, #72]	; 0x48
   13db2:	cmp	r3, #0
   13db4:	beq.w	14098 <__ssvfscanf_r+0x1824>
   13db8:	ldr	r3, [r7, #60]	; 0x3c
   13dba:	subs	r5, r6, r3
   13dbc:	cmp.w	r8, r5, asr #2
   13dc0:	bhi.w	14098 <__ssvfscanf_r+0x1824>
   13dc4:	mov	r0, r3
   13dc6:	mov.w	r1, r8, lsl #3
   13dca:	bl	d500 <realloc>
   13dce:	str	r0, [r7, #60]	; 0x3c
   13dd0:	cmp	r0, #0
   13dd2:	bne.w	1408e <__ssvfscanf_r+0x181a>
   13dd6:	ldr	r3, [r7, #64]	; 0x40
   13dd8:	cmp	r3, #0
   13dda:	bne.n	13e38 <__ssvfscanf_r+0x15c4>
   13ddc:	mov.w	r3, #4294967295
   13de0:	str	r3, [r7, #68]	; 0x44
   13de2:	b.w	12a74 <__ssvfscanf_r+0x200>
   13de6:	lsls	r2, r4, #24
   13de8:	bpl.w	13f0a <__ssvfscanf_r+0x1696>
   13dec:	ldr	r4, [r7, #48]	; 0x30
   13dee:	ldr.w	r3, [r4], #4
   13df2:	str	r3, [r7, #72]	; 0x48
   13df4:	cmp	r3, #0
   13df6:	beq.w	12a5e <__ssvfscanf_r+0x1ea>
   13dfa:	movs	r0, #128	; 0x80
   13dfc:	bl	cf68 <malloc>
   13e00:	mov	r6, r0
   13e02:	cmp	r0, #0
   13e04:	beq.n	13dd6 <__ssvfscanf_r+0x1562>
   13e06:	ldr	r3, [r7, #72]	; 0x48
   13e08:	str	r0, [r3, #0]
   13e0a:	ldr	r3, [r7, #64]	; 0x40
   13e0c:	ldrh	r5, [r3, #6]
   13e0e:	ldrh	r2, [r3, #4]
   13e10:	cmp	r5, r2
   13e12:	bcc.w	13f7c <__ssvfscanf_r+0x1708>
   13e16:	movw	r1, #65526	; 0xfff6
   13e1a:	cmp	r2, r1
   13e1c:	bhi.n	13ecc <__ssvfscanf_r+0x1658>
   13e1e:	adds	r2, #8
   13e20:	uxth	r3, r2
   13e22:	ldr	r2, [r7, #64]	; 0x40
   13e24:	str	r3, [r7, #60]	; 0x3c
   13e26:	lsls	r1, r3, #2
   13e28:	ldr	r0, [r2, #0]
   13e2a:	bl	d500 <realloc>
   13e2e:	ldr	r3, [r7, #60]	; 0x3c
   13e30:	cmp	r0, #0
   13e32:	bne.w	13f92 <__ssvfscanf_r+0x171e>
   13e36:	ldr	r3, [r7, #64]	; 0x40
   13e38:	ldrh	r3, [r3, #6]
   13e3a:	ldr	r2, [r7, #64]	; 0x40
   13e3c:	mov	r6, r3
   13e3e:	ldr.w	r8, [r2]
   13e42:	b.n	13b08 <__ssvfscanf_r+0x1294>
   13e44:	mov	r3, r5
   13e46:	ldr	r5, [r7, #40]	; 0x28
   13e48:	cmp	r3, r5
   13e4a:	bls.w	12a5e <__ssvfscanf_r+0x1ea>
   13e4e:	mov	r4, r3
   13e50:	ldrb.w	r1, [r4, #-1]!
   13e54:	mov	r2, fp
   13e56:	mov	r0, r9
   13e58:	bl	15b48 <_sungetc_r>
   13e5c:	cmp	r4, r5
   13e5e:	bne.n	13e50 <__ssvfscanf_r+0x15dc>
   13e60:	b.w	12a5e <__ssvfscanf_r+0x1ea>
   13e64:	mov	r0, r2
   13e66:	lsls	r1, r3, #3
   13e68:	mov	r6, r3
   13e6a:	bl	d500 <realloc>
   13e6e:	str	r0, [r7, #40]	; 0x28
   13e70:	cmp	r0, #0
   13e72:	beq.n	13dd6 <__ssvfscanf_r+0x1562>
   13e74:	adds	r2, r0, r5
   13e76:	str	r2, [r7, #72]	; 0x48
   13e78:	ldr	r2, [r7, #60]	; 0x3c
   13e7a:	ldr	r5, [r7, #52]	; 0x34
   13e7c:	str	r0, [r2, #0]
   13e7e:	lsls	r3, r6, #1
   13e80:	str	r3, [r7, #32]
   13e82:	b.n	13876 <__ssvfscanf_r+0x1002>
   13e84:	ldr.w	r8, [r7, #60]	; 0x3c
   13e88:	b.n	13b08 <__ssvfscanf_r+0x1294>
   13e8a:	ldr	r1, [r7, #64]	; 0x40
   13e8c:	str	r0, [r5, #0]
   13e8e:	ldrh	r6, [r1, #6]
   13e90:	ldrh	r2, [r1, #4]
   13e92:	cmp	r6, r2
   13e94:	bcc.w	13fb4 <__ssvfscanf_r+0x1740>
   13e98:	movw	r1, #65526	; 0xfff6
   13e9c:	cmp	r2, r1
   13e9e:	str	r0, [r7, #48]	; 0x30
   13ea0:	bls.w	13fee <__ssvfscanf_r+0x177a>
   13ea4:	ldr	r3, [r7, #64]	; 0x40
   13ea6:	ldr.w	r8, [r3]
   13eaa:	b.n	13b08 <__ssvfscanf_r+0x1294>
   13eac:	ldr	r2, [r7, #40]	; 0x28
   13eae:	cmp	r5, r2
   13eb0:	bls.w	12a5e <__ssvfscanf_r+0x1ea>
   13eb4:	mov	r4, r5
   13eb6:	ldr	r5, [r7, #40]	; 0x28
   13eb8:	ldrb.w	r1, [r4, #-1]!
   13ebc:	mov	r2, fp
   13ebe:	mov	r0, r9
   13ec0:	bl	15b48 <_sungetc_r>
   13ec4:	cmp	r4, r5
   13ec6:	bne.n	13eb8 <__ssvfscanf_r+0x1644>
   13ec8:	b.w	12a5e <__ssvfscanf_r+0x1ea>
   13ecc:	mov	r3, r5
   13ece:	b.n	13e3a <__ssvfscanf_r+0x15c6>
   13ed0:	bl	1579c <_strtoull_r>
   13ed4:	b.n	13a5a <__ssvfscanf_r+0x11e6>
   13ed6:	ldr.w	r3, [r8]
   13eda:	mov	r5, r3
   13edc:	adds	r3, #1
   13ede:	bne.w	1308c <__ssvfscanf_r+0x818>
   13ee2:	mov	r2, r5
   13ee4:	b.w	130b8 <__ssvfscanf_r+0x844>
   13ee8:	ldr	r3, [r7, #72]	; 0x48
   13eea:	ldr	r0, [r3, #0]
   13eec:	bl	15858 <iswspace>
   13ef0:	cmp	r0, #0
   13ef2:	bne.w	13c46 <__ssvfscanf_r+0x13d2>
   13ef6:	cmp	r4, #3
   13ef8:	add	sl, r5
   13efa:	bne.w	12f90 <__ssvfscanf_r+0x71c>
   13efe:	ldr	r3, [r6, #0]
   13f00:	cmp	r3, #4
   13f02:	bne.w	12f90 <__ssvfscanf_r+0x71c>
   13f06:	b.w	12f94 <__ssvfscanf_r+0x720>
   13f0a:	ldrd	r3, r2, [r7, #48]	; 0x30
   13f0e:	ldr.w	r6, [r3], #4
   13f12:	str	r3, [r7, #48]	; 0x30
   13f14:	mov	r5, r2
   13f16:	str	r2, [r7, #60]	; 0x3c
   13f18:	str	r2, [r7, #72]	; 0x48
   13f1a:	b.n	13d30 <__ssvfscanf_r+0x14bc>
   13f1c:	mov	r4, r3
   13f1e:	ldr.w	r3, [fp, #4]
   13f22:	cmp	r8, r3
   13f24:	ble.n	13f9a <__ssvfscanf_r+0x1726>
   13f26:	ldr.w	r2, [fp]
   13f2a:	add	r2, r3
   13f2c:	str.w	r2, [fp]
   13f30:	mov	r1, fp
   13f32:	mov	r0, r9
   13f34:	add	r4, r3
   13f36:	sub.w	r8, r8, r3
   13f3a:	bl	15bc8 <__ssrefill_r>
   13f3e:	cmp	r0, #0
   13f40:	beq.n	13f1e <__ssvfscanf_r+0x16aa>
   13f42:	cmp	r4, #0
   13f44:	beq.w	12a4c <__ssvfscanf_r+0x1d8>
   13f48:	add	sl, r4
   13f4a:	b.w	128c2 <__ssvfscanf_r+0x4e>
   13f4e:	ldr	r5, [r7, #48]	; 0x30
   13f50:	mov	r3, r8
   13f52:	ldr	r1, [r5, #0]
   13f54:	str.w	fp, [sp]
   13f58:	movs	r2, #1
   13f5a:	mov	r0, r9
   13f5c:	bl	15c04 <_sfread_r>
   13f60:	mov	r4, r0
   13f62:	cmp	r0, #0
   13f64:	beq.w	12a4c <__ssvfscanf_r+0x1d8>
   13f68:	adds	r5, #4
   13f6a:	str	r5, [r7, #72]	; 0x48
   13f6c:	ldr	r3, [r7, #68]	; 0x44
   13f6e:	adds	r3, #1
   13f70:	str	r3, [r7, #68]	; 0x44
   13f72:	ldr	r3, [r7, #72]	; 0x48
   13f74:	str	r3, [r7, #48]	; 0x30
   13f76:	add	sl, r4
   13f78:	b.w	128c2 <__ssvfscanf_r+0x4e>
   13f7c:	ldr	r0, [r3, #0]
   13f7e:	ldr	r3, [r7, #72]	; 0x48
   13f80:	str.w	r3, [r0, r5, lsl #2]
   13f84:	ldr	r3, [r7, #64]	; 0x40
   13f86:	str	r4, [r7, #48]	; 0x30
   13f88:	adds	r5, #1
   13f8a:	strh	r5, [r3, #6]
   13f8c:	str	r6, [r7, #60]	; 0x3c
   13f8e:	movs	r5, #32
   13f90:	b.n	13d30 <__ssvfscanf_r+0x14bc>
   13f92:	ldr	r2, [r7, #64]	; 0x40
   13f94:	strh	r3, [r2, #4]
   13f96:	str	r0, [r2, #0]
   13f98:	b.n	13f7e <__ssvfscanf_r+0x170a>
   13f9a:	sub.w	r3, r3, r8
   13f9e:	str.w	r3, [fp, #4]
   13fa2:	ldr.w	r3, [fp]
   13fa6:	add	r4, r8
   13fa8:	add	r3, r8
   13faa:	str.w	r3, [fp]
   13fae:	add	sl, r4
   13fb0:	b.w	128c2 <__ssvfscanf_r+0x4e>
   13fb4:	ldr	r2, [r1, #0]
   13fb6:	str	r2, [r7, #60]	; 0x3c
   13fb8:	ldr	r2, [r7, #60]	; 0x3c
   13fba:	str.w	r5, [r2, r6, lsl #2]
   13fbe:	ldr	r2, [r7, #64]	; 0x40
   13fc0:	adds	r6, #1
   13fc2:	uxth	r6, r6
   13fc4:	strh	r6, [r2, #6]
   13fc6:	mov	r1, r3
   13fc8:	str.w	fp, [sp]
   13fcc:	mov	r3, r8
   13fce:	movs	r2, #1
   13fd0:	mov	r0, r9
   13fd2:	bl	15c04 <_sfread_r>
   13fd6:	mov	r4, r0
   13fd8:	cbz	r0, 14012 <__ssvfscanf_r+0x179e>
   13fda:	cmp	r8, r0
   13fdc:	bls.n	13f6c <__ssvfscanf_r+0x16f8>
   13fde:	ldr	r0, [r5, #0]
   13fe0:	mov	r1, r4
   13fe2:	bl	d500 <realloc>
   13fe6:	cmp	r0, #0
   13fe8:	beq.n	13f6c <__ssvfscanf_r+0x16f8>
   13fea:	str	r0, [r5, #0]
   13fec:	b.n	13f6c <__ssvfscanf_r+0x16f8>
   13fee:	ldr	r3, [r7, #64]	; 0x40
   13ff0:	adds	r2, #8
   13ff2:	uxth	r4, r2
   13ff4:	ldr	r2, [r3, #0]
   13ff6:	str	r2, [r7, #52]	; 0x34
   13ff8:	mov	r0, r2
   13ffa:	lsls	r1, r4, #2
   13ffc:	bl	d500 <realloc>
   14000:	ldr	r2, [r7, #52]	; 0x34
   14002:	str	r0, [r7, #60]	; 0x3c
   14004:	cmp	r0, #0
   14006:	beq.n	140c0 <__ssvfscanf_r+0x184c>
   14008:	ldr	r3, [r7, #64]	; 0x40
   1400a:	strh	r4, [r3, #4]
   1400c:	str	r0, [r3, #0]
   1400e:	ldr	r3, [r7, #48]	; 0x30
   14010:	b.n	13fb8 <__ssvfscanf_r+0x1744>
   14012:	ldr	r3, [r7, #68]	; 0x44
   14014:	ldr.w	r8, [r7, #60]	; 0x3c
   14018:	cmp	r3, #0
   1401a:	beq.w	13b08 <__ssvfscanf_r+0x1294>
   1401e:	ldrh.w	r3, [fp, #12]
   14022:	lsls	r3, r3, #25
   14024:	bpl.w	12a62 <__ssvfscanf_r+0x1ee>
   14028:	b.n	13b00 <__ssvfscanf_r+0x128c>
   1402a:	ldr	r2, [r7, #36]	; 0x24
   1402c:	adds	r2, #2
   1402e:	bne.n	1406c <__ssvfscanf_r+0x17f8>
   14030:	ldr.w	r2, [fp, #4]
   14034:	cmp	r2, #0
   14036:	mov	r5, r3
   14038:	bgt.w	13d3c <__ssvfscanf_r+0x14c8>
   1403c:	mov	r1, fp
   1403e:	mov	r0, r4
   14040:	bl	15bc8 <__ssrefill_r>
   14044:	cbnz	r0, 14080 <__ssvfscanf_r+0x180c>
   14046:	cmp.w	r9, #0
   1404a:	bne.w	13d3c <__ssvfscanf_r+0x14c8>
   1404e:	mov	r5, r8
   14050:	mov	r9, r4
   14052:	ldr	r3, [r7, #72]	; 0x48
   14054:	cbz	r3, 14060 <__ssvfscanf_r+0x17ec>
   14056:	ldr	r3, [r7, #60]	; 0x3c
   14058:	subs	r1, r6, r3
   1405a:	cmp.w	r5, r1, asr #2
   1405e:	bhi.n	140b0 <__ssvfscanf_r+0x183c>
   14060:	ldr	r3, [r7, #52]	; 0x34
   14062:	cmp	r3, #0
   14064:	bne.w	128c2 <__ssvfscanf_r+0x4e>
   14068:	b.w	134a4 <__ssvfscanf_r+0xc30>
   1406c:	add	sl, r3
   1406e:	ldr	r3, [r7, #36]	; 0x24
   14070:	cmp	r3, #3
   14072:	bne.w	13da4 <__ssvfscanf_r+0x1530>
   14076:	ldr	r3, [r5, #0]
   14078:	cmp	r3, #4
   1407a:	bne.w	13da4 <__ssvfscanf_r+0x1530>
   1407e:	b.n	13da8 <__ssvfscanf_r+0x1534>
   14080:	mov	r9, r4
   14082:	mov	r4, r5
   14084:	mov	r5, r8
   14086:	cmp	r4, #0
   14088:	beq.n	14052 <__ssvfscanf_r+0x17de>
   1408a:	b.w	12a4c <__ssvfscanf_r+0x1d8>
   1408e:	ldr	r2, [r7, #72]	; 0x48
   14090:	adds	r6, r0, r5
   14092:	str	r0, [r2, #0]
   14094:	mov.w	r8, r8, lsl #1
   14098:	adds	r6, #4
   1409a:	ldr.w	r3, [fp, #4]
   1409e:	cmp	r3, #0
   140a0:	mov.w	r5, #0
   140a4:	ble.n	1403c <__ssvfscanf_r+0x17c8>
   140a6:	cmp.w	r9, #0
   140aa:	bne.w	13d3c <__ssvfscanf_r+0x14c8>
   140ae:	b.n	1404e <__ssvfscanf_r+0x17da>
   140b0:	ldr	r4, [r7, #72]	; 0x48
   140b2:	ldr	r0, [r4, #0]
   140b4:	bl	d500 <realloc>
   140b8:	cmp	r0, #0
   140ba:	beq.n	14060 <__ssvfscanf_r+0x17ec>
   140bc:	str	r0, [r4, #0]
   140be:	b.n	14060 <__ssvfscanf_r+0x17ec>
   140c0:	mov	r8, r2
   140c2:	b.n	13b08 <__ssvfscanf_r+0x1294>

000140c4 <_fclose_r>:
   140c4:	push	{r4, r5, r6, lr}
   140c6:	cmp	r1, #0
   140c8:	beq.n	14162 <_fclose_r+0x9e>
   140ca:	mov	r6, r0
   140cc:	mov	r4, r1
   140ce:	cbz	r0, 140d6 <_fclose_r+0x12>
   140d0:	ldr	r3, [r0, #52]	; 0x34
   140d2:	cmp	r3, #0
   140d4:	beq.n	14168 <_fclose_r+0xa4>
   140d6:	ldr	r3, [r4, #100]	; 0x64
   140d8:	lsls	r0, r3, #31
   140da:	bpl.n	14146 <_fclose_r+0x82>
   140dc:	ldrsh.w	r3, [r4, #12]
   140e0:	cmp	r3, #0
   140e2:	beq.n	14162 <_fclose_r+0x9e>
   140e4:	mov	r1, r4
   140e6:	mov	r0, r6
   140e8:	bl	1418c <__sflush_r>
   140ec:	ldr	r3, [r4, #44]	; 0x2c
   140ee:	mov	r5, r0
   140f0:	cbz	r3, 14100 <_fclose_r+0x3c>
   140f2:	ldr	r1, [r4, #28]
   140f4:	mov	r0, r6
   140f6:	blx	r3
   140f8:	cmp	r0, #0
   140fa:	it	lt
   140fc:	movlt.w	r5, #4294967295
   14100:	ldrh	r3, [r4, #12]
   14102:	lsls	r2, r3, #24
   14104:	bmi.n	14180 <_fclose_r+0xbc>
   14106:	ldr	r1, [r4, #48]	; 0x30
   14108:	cbz	r1, 1411c <_fclose_r+0x58>
   1410a:	add.w	r3, r4, #64	; 0x40
   1410e:	cmp	r1, r3
   14110:	beq.n	14118 <_fclose_r+0x54>
   14112:	mov	r0, r6
   14114:	bl	f7a4 <_free_r>
   14118:	movs	r3, #0
   1411a:	str	r3, [r4, #48]	; 0x30
   1411c:	ldr	r1, [r4, #68]	; 0x44
   1411e:	cbz	r1, 1412a <_fclose_r+0x66>
   14120:	mov	r0, r6
   14122:	bl	f7a4 <_free_r>
   14126:	movs	r3, #0
   14128:	str	r3, [r4, #68]	; 0x44
   1412a:	bl	ea34 <__sfp_lock_acquire>
   1412e:	ldr	r3, [r4, #100]	; 0x64
   14130:	movs	r2, #0
   14132:	lsls	r3, r3, #31
   14134:	strh	r2, [r4, #12]
   14136:	bpl.n	14178 <_fclose_r+0xb4>
   14138:	ldr	r0, [r4, #88]	; 0x58
   1413a:	bl	f134 <__retarget_lock_close_recursive>
   1413e:	bl	ea40 <__sfp_lock_release>
   14142:	mov	r0, r5
   14144:	pop	{r4, r5, r6, pc}
   14146:	ldrh	r3, [r4, #12]
   14148:	lsls	r1, r3, #22
   1414a:	bmi.n	140e4 <_fclose_r+0x20>
   1414c:	ldr	r0, [r4, #88]	; 0x58
   1414e:	bl	f138 <__retarget_lock_acquire_recursive>
   14152:	ldrsh.w	r3, [r4, #12]
   14156:	cmp	r3, #0
   14158:	bne.n	140e4 <_fclose_r+0x20>
   1415a:	ldr	r5, [r4, #100]	; 0x64
   1415c:	ands.w	r5, r5, #1
   14160:	beq.n	1416e <_fclose_r+0xaa>
   14162:	movs	r5, #0
   14164:	mov	r0, r5
   14166:	pop	{r4, r5, r6, pc}
   14168:	bl	e9f8 <__sinit>
   1416c:	b.n	140d6 <_fclose_r+0x12>
   1416e:	ldr	r0, [r4, #88]	; 0x58
   14170:	bl	f13c <__retarget_lock_release_recursive>
   14174:	mov	r0, r5
   14176:	pop	{r4, r5, r6, pc}
   14178:	ldr	r0, [r4, #88]	; 0x58
   1417a:	bl	f13c <__retarget_lock_release_recursive>
   1417e:	b.n	14138 <_fclose_r+0x74>
   14180:	ldr	r1, [r4, #16]
   14182:	mov	r0, r6
   14184:	bl	f7a4 <_free_r>
   14188:	b.n	14106 <_fclose_r+0x42>
   1418a:	nop

0001418c <__sflush_r>:
   1418c:	ldrsh.w	r2, [r1, #12]
   14190:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14194:	mov	r4, r1
   14196:	lsls	r1, r2, #28
   14198:	mov	r8, r0
   1419a:	bmi.n	1422c <__sflush_r+0xa0>
   1419c:	ldr	r3, [r4, #4]
   1419e:	orr.w	r2, r2, #2048	; 0x800
   141a2:	cmp	r3, #0
   141a4:	strh	r2, [r4, #12]
   141a6:	ble.n	14266 <__sflush_r+0xda>
   141a8:	ldr	r5, [r4, #40]	; 0x28
   141aa:	cmp	r5, #0
   141ac:	beq.n	14260 <__sflush_r+0xd4>
   141ae:	movs	r3, #0
   141b0:	ldr.w	r6, [r8]
   141b4:	str.w	r3, [r8]
   141b8:	uxth	r3, r2
   141ba:	ands.w	r2, r2, #4096	; 0x1000
   141be:	bne.n	1426e <__sflush_r+0xe2>
   141c0:	movs	r3, #1
   141c2:	ldr	r1, [r4, #28]
   141c4:	mov	r0, r8
   141c6:	blx	r5
   141c8:	adds	r3, r0, #1
   141ca:	beq.n	1429c <__sflush_r+0x110>
   141cc:	ldrh	r3, [r4, #12]
   141ce:	ldr	r5, [r4, #40]	; 0x28
   141d0:	lsls	r7, r3, #29
   141d2:	bpl.n	141e0 <__sflush_r+0x54>
   141d4:	ldr	r3, [r4, #4]
   141d6:	subs	r0, r0, r3
   141d8:	ldr	r3, [r4, #48]	; 0x30
   141da:	cbz	r3, 141e0 <__sflush_r+0x54>
   141dc:	ldr	r3, [r4, #60]	; 0x3c
   141de:	subs	r0, r0, r3
   141e0:	ldr	r1, [r4, #28]
   141e2:	mov	r2, r0
   141e4:	movs	r3, #0
   141e6:	mov	r0, r8
   141e8:	blx	r5
   141ea:	adds	r1, r0, #1
   141ec:	bne.n	14272 <__sflush_r+0xe6>
   141ee:	ldr.w	r3, [r8]
   141f2:	cmp	r3, #0
   141f4:	beq.n	14272 <__sflush_r+0xe6>
   141f6:	cmp	r3, #29
   141f8:	beq.n	141fe <__sflush_r+0x72>
   141fa:	cmp	r3, #22
   141fc:	bne.n	142ac <__sflush_r+0x120>
   141fe:	ldrh	r3, [r4, #12]
   14200:	ldr	r2, [r4, #16]
   14202:	str	r2, [r4, #0]
   14204:	bic.w	r3, r3, #2048	; 0x800
   14208:	movs	r1, #0
   1420a:	str	r1, [r4, #4]
   1420c:	strh	r3, [r4, #12]
   1420e:	ldr	r1, [r4, #48]	; 0x30
   14210:	str.w	r6, [r8]
   14214:	cbz	r1, 14260 <__sflush_r+0xd4>
   14216:	add.w	r3, r4, #64	; 0x40
   1421a:	cmp	r1, r3
   1421c:	beq.n	14224 <__sflush_r+0x98>
   1421e:	mov	r0, r8
   14220:	bl	f7a4 <_free_r>
   14224:	movs	r0, #0
   14226:	str	r0, [r4, #48]	; 0x30
   14228:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1422c:	ldr	r6, [r4, #16]
   1422e:	cbz	r6, 14260 <__sflush_r+0xd4>
   14230:	uxth	r3, r2
   14232:	ldr	r5, [r4, #0]
   14234:	str	r6, [r4, #0]
   14236:	lsls	r2, r3, #30
   14238:	ite	eq
   1423a:	ldreq	r3, [r4, #20]
   1423c:	movne	r3, #0
   1423e:	subs	r5, r5, r6
   14240:	str	r3, [r4, #8]
   14242:	b.n	1425c <__sflush_r+0xd0>
   14244:	mov	r3, r5
   14246:	mov	r2, r6
   14248:	ldr	r1, [r4, #28]
   1424a:	ldr	r7, [r4, #36]	; 0x24
   1424c:	mov	r0, r8
   1424e:	blx	r7
   14250:	subs.w	ip, r0, #0
   14254:	sub.w	r5, r5, ip
   14258:	add	r6, ip
   1425a:	ble.n	1428c <__sflush_r+0x100>
   1425c:	cmp	r5, #0
   1425e:	bgt.n	14244 <__sflush_r+0xb8>
   14260:	movs	r0, #0
   14262:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14266:	ldr	r3, [r4, #60]	; 0x3c
   14268:	cmp	r3, #0
   1426a:	bgt.n	141a8 <__sflush_r+0x1c>
   1426c:	b.n	14260 <__sflush_r+0xd4>
   1426e:	ldr	r0, [r4, #80]	; 0x50
   14270:	b.n	141d0 <__sflush_r+0x44>
   14272:	ldrsh.w	r3, [r4, #12]
   14276:	ldr	r2, [r4, #16]
   14278:	str	r2, [r4, #0]
   1427a:	bic.w	r3, r3, #2048	; 0x800
   1427e:	strh	r3, [r4, #12]
   14280:	movs	r2, #0
   14282:	lsls	r3, r3, #19
   14284:	str	r2, [r4, #4]
   14286:	bpl.n	1420e <__sflush_r+0x82>
   14288:	str	r0, [r4, #80]	; 0x50
   1428a:	b.n	1420e <__sflush_r+0x82>
   1428c:	ldrh	r3, [r4, #12]
   1428e:	orr.w	r3, r3, #64	; 0x40
   14292:	mov.w	r0, #4294967295
   14296:	strh	r3, [r4, #12]
   14298:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1429c:	ldr.w	r3, [r8]
   142a0:	cmp	r3, #0
   142a2:	beq.n	141cc <__sflush_r+0x40>
   142a4:	cmp	r3, #29
   142a6:	beq.n	142b6 <__sflush_r+0x12a>
   142a8:	cmp	r3, #22
   142aa:	beq.n	142b6 <__sflush_r+0x12a>
   142ac:	ldrh	r3, [r4, #12]
   142ae:	orr.w	r3, r3, #64	; 0x40
   142b2:	strh	r3, [r4, #12]
   142b4:	b.n	14262 <__sflush_r+0xd6>
   142b6:	str.w	r6, [r8]
   142ba:	b.n	14260 <__sflush_r+0xd4>

000142bc <_fflush_r>:
   142bc:	push	{r3, r4, r5, lr}
   142be:	mov	r4, r1
   142c0:	mov	r5, r0
   142c2:	cbz	r0, 142c8 <_fflush_r+0xc>
   142c4:	ldr	r3, [r0, #52]	; 0x34
   142c6:	cbz	r3, 1430a <_fflush_r+0x4e>
   142c8:	ldrsh.w	r0, [r4, #12]
   142cc:	cbz	r0, 142f2 <_fflush_r+0x36>
   142ce:	ldr	r3, [r4, #100]	; 0x64
   142d0:	lsls	r3, r3, #31
   142d2:	bmi.n	142d8 <_fflush_r+0x1c>
   142d4:	lsls	r1, r0, #22
   142d6:	bpl.n	142f8 <_fflush_r+0x3c>
   142d8:	mov	r0, r5
   142da:	mov	r1, r4
   142dc:	bl	1418c <__sflush_r>
   142e0:	ldr	r3, [r4, #100]	; 0x64
   142e2:	lsls	r2, r3, #31
   142e4:	mov	r5, r0
   142e6:	bmi.n	142ee <_fflush_r+0x32>
   142e8:	ldrh	r3, [r4, #12]
   142ea:	lsls	r3, r3, #22
   142ec:	bpl.n	14300 <_fflush_r+0x44>
   142ee:	mov	r0, r5
   142f0:	pop	{r3, r4, r5, pc}
   142f2:	mov	r5, r0
   142f4:	mov	r0, r5
   142f6:	pop	{r3, r4, r5, pc}
   142f8:	ldr	r0, [r4, #88]	; 0x58
   142fa:	bl	f138 <__retarget_lock_acquire_recursive>
   142fe:	b.n	142d8 <_fflush_r+0x1c>
   14300:	ldr	r0, [r4, #88]	; 0x58
   14302:	bl	f13c <__retarget_lock_release_recursive>
   14306:	mov	r0, r5
   14308:	pop	{r3, r4, r5, pc}
   1430a:	bl	e9f8 <__sinit>
   1430e:	b.n	142c8 <_fflush_r+0xc>

00014310 <__sccl>:
   14310:	push	{r4, r5, r6, lr}
   14312:	ldrb	r4, [r1, #0]
   14314:	cmp	r4, #94	; 0x5e
   14316:	mov	lr, r0
   14318:	beq.n	14358 <__sccl+0x48>
   1431a:	movs	r2, #0
   1431c:	adds	r0, r1, #1
   1431e:	mov	ip, r2
   14320:	add.w	r3, lr, #4294967295
   14324:	add.w	r1, lr, #255	; 0xff
   14328:	strb.w	r2, [r3, #1]!
   1432c:	cmp	r3, r1
   1432e:	bne.n	14328 <__sccl+0x18>
   14330:	cbz	r4, 14354 <__sccl+0x44>
   14332:	eor.w	r1, ip, #1
   14336:	strb.w	r1, [lr, r4]
   1433a:	adds	r5, r0, #1
   1433c:	ldrb.w	r3, [r5, #-1]
   14340:	cmp	r3, #45	; 0x2d
   14342:	beq.n	14362 <__sccl+0x52>
   14344:	cmp	r3, #93	; 0x5d
   14346:	beq.n	14350 <__sccl+0x40>
   14348:	cbz	r3, 14352 <__sccl+0x42>
   1434a:	mov	r4, r3
   1434c:	mov	r0, r5
   1434e:	b.n	14336 <__sccl+0x26>
   14350:	mov	r0, r5
   14352:	pop	{r4, r5, r6, pc}
   14354:	subs	r0, #1
   14356:	pop	{r4, r5, r6, pc}
   14358:	movs	r2, #1
   1435a:	ldrb	r4, [r1, #1]
   1435c:	adds	r0, r1, #2
   1435e:	mov	ip, r2
   14360:	b.n	14320 <__sccl+0x10>
   14362:	ldrb.w	ip, [r0, #1]
   14366:	cmp.w	ip, #93	; 0x5d
   1436a:	beq.n	1434a <__sccl+0x3a>
   1436c:	cmp	r4, ip
   1436e:	bgt.n	1434a <__sccl+0x3a>
   14370:	adds	r6, r4, #1
   14372:	adds	r0, #2
   14374:	add.w	r2, lr, r6
   14378:	strb.w	r1, [r2], #1
   1437c:	sub.w	r3, r2, lr
   14380:	subs	r3, #1
   14382:	cmp	ip, r3
   14384:	bgt.n	14378 <__sccl+0x68>
   14386:	sub.w	r3, ip, r4
   1438a:	subs	r3, #1
   1438c:	cmp	r4, ip
   1438e:	it	ge
   14390:	movge	r3, #0
   14392:	adds	r5, #2
   14394:	adds	r4, r3, r6
   14396:	b.n	1433c <__sccl+0x2c>

00014398 <stpncpy>:
   14398:	orr.w	r3, r1, r0
   1439c:	lsls	r3, r3, #30
   1439e:	push	{r4, r5}
   143a0:	bne.n	143a6 <stpncpy+0xe>
   143a2:	cmp	r2, #3
   143a4:	bhi.n	143c6 <stpncpy+0x2e>
   143a6:	add.w	ip, r1, #4294967295
   143aa:	b.n	143bc <stpncpy+0x24>
   143ac:	ldrb.w	r1, [ip, #1]!
   143b0:	strb.w	r1, [r3], #1
   143b4:	subs	r4, r2, #1
   143b6:	cbz	r1, 143ea <stpncpy+0x52>
   143b8:	mov	r2, r4
   143ba:	mov	r0, r3
   143bc:	mov	r3, r0
   143be:	cmp	r2, #0
   143c0:	bne.n	143ac <stpncpy+0x14>
   143c2:	pop	{r4, r5}
   143c4:	bx	lr
   143c6:	mov	r3, r1
   143c8:	mov	r1, r3
   143ca:	ldr.w	r5, [r3], #4
   143ce:	sub.w	r4, r5, #16843009	; 0x1010101
   143d2:	bic.w	r4, r4, r5
   143d6:	tst.w	r4, #2155905152	; 0x80808080
   143da:	bne.n	143a6 <stpncpy+0xe>
   143dc:	subs	r2, #4
   143de:	cmp	r2, #3
   143e0:	str.w	r5, [r0], #4
   143e4:	mov	r1, r3
   143e6:	bhi.n	143c8 <stpncpy+0x30>
   143e8:	b.n	143a6 <stpncpy+0xe>
   143ea:	add	r2, r0
   143ec:	cmp	r4, #0
   143ee:	beq.n	143c2 <stpncpy+0x2a>
   143f0:	strb.w	r1, [r3], #1
   143f4:	cmp	r3, r2
   143f6:	bne.n	143f0 <stpncpy+0x58>
   143f8:	pop	{r4, r5}
   143fa:	bx	lr

000143fc <_localeconv_r>:
   143fc:	ldr	r0, [pc, #0]	; (14400 <_localeconv_r+0x4>)
   143fe:	bx	lr
   14400:	.word	0x20008f34
   14404:	.word	0x00000000

00014408 <frexp>:
   14408:	push	{r4, r5}
   1440a:	sub	sp, #8
   1440c:	vstr	d0, [sp]
   14410:	ldr	r2, [sp, #4]
   14412:	ldr	r4, [pc, #100]	; (14478 <frexp+0x70>)
   14414:	bic.w	r3, r2, #2147483648	; 0x80000000
   14418:	movs	r1, #0
   1441a:	cmp	r3, r4
   1441c:	str	r1, [r0, #0]
   1441e:	bgt.n	14464 <frexp+0x5c>
   14420:	ldr	r4, [sp, #0]
   14422:	orrs	r4, r3
   14424:	beq.n	14464 <frexp+0x5c>
   14426:	ldr	r4, [pc, #84]	; (1447c <frexp+0x74>)
   14428:	ands	r4, r2
   1442a:	cbnz	r4, 14442 <frexp+0x3a>
   1442c:	vldr	d7, [pc, #64]	; 14470 <frexp+0x68>
   14430:	vmul.f64	d7, d0, d7
   14434:	vstr	d7, [sp]
   14438:	ldr	r2, [sp, #4]
   1443a:	mvn.w	r1, #53	; 0x35
   1443e:	bic.w	r3, r2, #2147483648	; 0x80000000
   14442:	bic.w	r2, r2, #2139095040	; 0x7f800000
   14446:	ldrd	r4, r5, [sp]
   1444a:	bic.w	r2, r2, #7340032	; 0x700000
   1444e:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   14452:	asrs	r3, r3, #20
   14454:	orr.w	r5, r5, #2097152	; 0x200000
   14458:	subw	r3, r3, #1022	; 0x3fe
   1445c:	strd	r4, r5, [sp]
   14460:	add	r3, r1
   14462:	str	r3, [r0, #0]
   14464:	vldr	d0, [sp]
   14468:	add	sp, #8
   1446a:	pop	{r4, r5}
   1446c:	bx	lr
   1446e:	nop
   14470:	.word	0x00000000
   14474:	.word	0x43500000
   14478:	.word	0x7fefffff
   1447c:	.word	0x7ff00000

00014480 <__assert_func>:
   14480:	push	{lr}
   14482:	ldr	r4, [pc, #44]	; (144b0 <__assert_func+0x30>)
   14484:	ldr	r5, [r4, #0]
   14486:	mov	r4, r2
   14488:	ldr	r6, [r5, #12]
   1448a:	mov	r2, r3
   1448c:	sub	sp, #20
   1448e:	mov	r3, r0
   14490:	mov	r5, r1
   14492:	cbz	r4, 144a8 <__assert_func+0x28>
   14494:	ldr	r1, [pc, #28]	; (144b4 <__assert_func+0x34>)
   14496:	str	r5, [sp, #0]
   14498:	strd	r1, r4, [sp, #4]
   1449c:	mov	r0, r6
   1449e:	ldr	r1, [pc, #24]	; (144b8 <__assert_func+0x38>)
   144a0:	bl	15a20 <fiprintf>
   144a4:	bl	bcaa <abort>
   144a8:	ldr	r1, [pc, #16]	; (144bc <__assert_func+0x3c>)
   144aa:	mov	r4, r1
   144ac:	b.n	14496 <__assert_func+0x16>
   144ae:	nop
   144b0:	.word	0x200093cc
   144b4:	.word	0x20000608
   144b8:	.word	0x20000618
   144bc:	.word	0x20000614

000144c0 <_calloc_r>:
   144c0:	push	{r3, r4, r5, lr}
   144c2:	umull	r1, r4, r1, r2
   144c6:	cbnz	r4, 1452c <_calloc_r+0x6c>
   144c8:	bl	cf88 <_malloc_r>
   144cc:	mov	r5, r0
   144ce:	cbz	r0, 1450a <_calloc_r+0x4a>
   144d0:	ldr.w	r2, [r0, #-4]
   144d4:	bic.w	r2, r2, #3
   144d8:	subs	r2, #4
   144da:	cmp	r2, #36	; 0x24
   144dc:	bhi.n	1450e <_calloc_r+0x4e>
   144de:	cmp	r2, #19
   144e0:	bls.n	14518 <_calloc_r+0x58>
   144e2:	cmp	r2, #27
   144e4:	strd	r4, r4, [r0]
   144e8:	bls.n	14526 <_calloc_r+0x66>
   144ea:	cmp	r2, #36	; 0x24
   144ec:	ite	ne
   144ee:	addne.w	r2, r0, #16
   144f2:	addeq.w	r2, r0, #24
   144f6:	mov.w	r3, #0
   144fa:	strd	r4, r4, [r0, #8]
   144fe:	itt	eq
   14500:	streq	r4, [r0, #16]
   14502:	streq	r4, [r0, #20]
   14504:	strd	r3, r3, [r2]
   14508:	str	r3, [r2, #8]
   1450a:	mov	r0, r5
   1450c:	pop	{r3, r4, r5, pc}
   1450e:	mov	r1, r4
   14510:	bl	a528 <memset>
   14514:	mov	r0, r5
   14516:	pop	{r3, r4, r5, pc}
   14518:	mov	r2, r0
   1451a:	movs	r3, #0
   1451c:	strd	r3, r3, [r2]
   14520:	str	r3, [r2, #8]
   14522:	mov	r0, r5
   14524:	pop	{r3, r4, r5, pc}
   14526:	add.w	r2, r0, #8
   1452a:	b.n	1451a <_calloc_r+0x5a>
   1452c:	bl	f0dc <__errno>
   14530:	movs	r3, #12
   14532:	movs	r5, #0
   14534:	str	r3, [r0, #0]
   14536:	b.n	1450a <_calloc_r+0x4a>

00014538 <quorem>:
   14538:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1453c:	ldr	r3, [r0, #16]
   1453e:	ldr	r4, [r1, #16]
   14540:	cmp	r3, r4
   14542:	sub	sp, #12
   14544:	blt.w	14656 <quorem+0x11e>
   14548:	subs	r4, #1
   1454a:	add.w	r5, r1, #20
   1454e:	lsls	r3, r4, #2
   14550:	add.w	r8, r0, #20
   14554:	str	r3, [sp, #0]
   14556:	ldr.w	r3, [r5, r4, lsl #2]
   1455a:	ldr.w	r2, [r8, r4, lsl #2]
   1455e:	adds	r3, #1
   14560:	mov	r9, r0
   14562:	cmp	r2, r3
   14564:	add.w	r0, r8, r4, lsl #2
   14568:	add.w	r7, r5, r4, lsl #2
   1456c:	str	r0, [sp, #4]
   1456e:	udiv	r6, r2, r3
   14572:	bcc.n	145ec <quorem+0xb4>
   14574:	mov.w	ip, #0
   14578:	mov	lr, r5
   1457a:	mov	r0, r8
   1457c:	mov	sl, ip
   1457e:	mov	r3, ip
   14580:	ldr.w	fp, [lr], #4
   14584:	ldr	r2, [r0, #0]
   14586:	uxth.w	ip, fp
   1458a:	mla	r3, r6, ip, r3
   1458e:	mov.w	ip, r3, lsr #16
   14592:	mov.w	fp, fp, lsr #16
   14596:	mla	ip, r6, fp, ip
   1459a:	uxth	r3, r3
   1459c:	sub.w	r3, sl, r3
   145a0:	uxth.w	sl, ip
   145a4:	uxtah	r3, r3, r2
   145a8:	rsb	r2, sl, r2, lsr #16
   145ac:	add.w	r2, r2, r3, asr #16
   145b0:	uxth	r3, r3
   145b2:	orr.w	r3, r3, r2, lsl #16
   145b6:	cmp	r7, lr
   145b8:	str.w	r3, [r0], #4
   145bc:	mov.w	sl, r2, asr #16
   145c0:	mov.w	r3, ip, lsr #16
   145c4:	bcs.n	14580 <quorem+0x48>
   145c6:	ldr	r3, [sp, #0]
   145c8:	ldr.w	r3, [r8, r3]
   145cc:	cbnz	r3, 145ec <quorem+0xb4>
   145ce:	ldr	r3, [sp, #4]
   145d0:	subs	r3, #4
   145d2:	cmp	r8, r3
   145d4:	bcc.n	145e0 <quorem+0xa8>
   145d6:	b.n	145e8 <quorem+0xb0>
   145d8:	cmp	r8, r3
   145da:	add.w	r4, r4, #4294967295
   145de:	bcs.n	145e8 <quorem+0xb0>
   145e0:	ldr.w	r2, [r3], #-4
   145e4:	cmp	r2, #0
   145e6:	beq.n	145d8 <quorem+0xa0>
   145e8:	str.w	r4, [r9, #16]
   145ec:	mov	r0, r9
   145ee:	bl	107b8 <__mcmp>
   145f2:	cmp	r0, #0
   145f4:	blt.n	1464e <quorem+0x116>
   145f6:	adds	r6, #1
   145f8:	mov	r1, r8
   145fa:	movs	r3, #0
   145fc:	ldr.w	r0, [r5], #4
   14600:	ldr.w	ip, [r1]
   14604:	uxth	r2, r0
   14606:	subs	r2, r3, r2
   14608:	lsrs	r3, r0, #16
   1460a:	uxtah	r2, r2, ip
   1460e:	rsb	r3, r3, ip, lsr #16
   14612:	add.w	r3, r3, r2, asr #16
   14616:	uxth	r2, r2
   14618:	orr.w	r2, r2, r3, lsl #16
   1461c:	cmp	r7, r5
   1461e:	str.w	r2, [r1], #4
   14622:	mov.w	r3, r3, asr #16
   14626:	bcs.n	145fc <quorem+0xc4>
   14628:	ldr.w	r2, [r8, r4, lsl #2]
   1462c:	add.w	r3, r8, r4, lsl #2
   14630:	cbnz	r2, 1464e <quorem+0x116>
   14632:	subs	r3, #4
   14634:	cmp	r8, r3
   14636:	bcc.n	14642 <quorem+0x10a>
   14638:	b.n	1464a <quorem+0x112>
   1463a:	cmp	r8, r3
   1463c:	add.w	r4, r4, #4294967295
   14640:	bcs.n	1464a <quorem+0x112>
   14642:	ldr.w	r2, [r3], #-4
   14646:	cmp	r2, #0
   14648:	beq.n	1463a <quorem+0x102>
   1464a:	str.w	r4, [r9, #16]
   1464e:	mov	r0, r6
   14650:	add	sp, #12
   14652:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14656:	movs	r0, #0
   14658:	add	sp, #12
   1465a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1465e:	nop

00014660 <_dtoa_r>:
   14660:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14664:	vpush	{d8}
   14668:	sub	sp, #60	; 0x3c
   1466a:	vstr	d0, [sp, #8]
   1466e:	str	r1, [sp, #4]
   14670:	ldr	r1, [r0, #56]	; 0x38
   14672:	ldr	r5, [sp, #104]	; 0x68
   14674:	str	r3, [sp, #20]
   14676:	vmov	r6, r7, d0
   1467a:	mov	r4, r0
   1467c:	mov	fp, r2
   1467e:	cbz	r1, 14692 <_dtoa_r+0x32>
   14680:	ldr	r2, [r0, #60]	; 0x3c
   14682:	str	r2, [r1, #4]
   14684:	movs	r3, #1
   14686:	lsls	r3, r2
   14688:	str	r3, [r1, #8]
   1468a:	bl	10248 <_Bfree>
   1468e:	movs	r3, #0
   14690:	str	r3, [r4, #56]	; 0x38
   14692:	subs.w	r8, r7, #0
   14696:	ite	lt
   14698:	movlt	r3, #1
   1469a:	movge	r3, #0
   1469c:	str	r3, [r5, #0]
   1469e:	ldr	r3, [pc, #760]	; (14998 <_dtoa_r+0x338>)
   146a0:	itt	lt
   146a2:	biclt.w	r8, r8, #2147483648	; 0x80000000
   146a6:	strlt.w	r8, [sp, #12]
   146aa:	bics.w	r3, r3, r8
   146ae:	beq.w	147f0 <_dtoa_r+0x190>
   146b2:	vldr	d8, [sp, #8]
   146b6:	vcmp.f64	d8, #0.0
   146ba:	vmrs	APSR_nzcv, fpscr
   146be:	bne.n	146e4 <_dtoa_r+0x84>
   146c0:	ldr	r2, [sp, #20]
   146c2:	movs	r3, #1
   146c4:	str	r3, [r2, #0]
   146c6:	ldr	r3, [sp, #108]	; 0x6c
   146c8:	cmp	r3, #0
   146ca:	beq.w	14b4c <_dtoa_r+0x4ec>
   146ce:	ldr	r3, [pc, #716]	; (1499c <_dtoa_r+0x33c>)
   146d0:	ldr	r2, [sp, #108]	; 0x6c
   146d2:	str	r3, [r2, #0]
   146d4:	subs	r3, #1
   146d6:	str	r3, [sp, #0]
   146d8:	ldr	r0, [sp, #0]
   146da:	add	sp, #60	; 0x3c
   146dc:	vpop	{d8}
   146e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146e4:	add	r2, sp, #48	; 0x30
   146e6:	add	r1, sp, #52	; 0x34
   146e8:	mov	r0, r4
   146ea:	vmov.f64	d0, d8
   146ee:	bl	10a78 <__d2b>
   146f2:	movs.w	r3, r8, lsr #20
   146f6:	mov	r5, r0
   146f8:	bne.w	14820 <_dtoa_r+0x1c0>
   146fc:	ldrd	r1, r3, [sp, #48]	; 0x30
   14700:	add	r3, r1
   14702:	addw	r2, r3, #1074	; 0x432
   14706:	cmp	r2, #32
   14708:	ble.w	14d00 <_dtoa_r+0x6a0>
   1470c:	rsb	r2, r2, #64	; 0x40
   14710:	lsl.w	r8, r8, r2
   14714:	addw	r2, r3, #1042	; 0x412
   14718:	lsrs	r6, r2
   1471a:	orr.w	r2, r8, r6
   1471e:	vmov	s14, r2
   14722:	vcvt.f64.u32	d7, s14
   14726:	subs	r0, r3, #1
   14728:	vmov	r6, s15
   1472c:	vmov	r2, r3, d7
   14730:	mov.w	sl, #1
   14734:	sub.w	r3, r6, #32505856	; 0x1f00000
   14738:	vldr	d3, [pc, #580]	; 14980 <_dtoa_r+0x320>
   1473c:	vldr	d7, [pc, #584]	; 14988 <_dtoa_r+0x328>
   14740:	vldr	d5, [pc, #588]	; 14990 <_dtoa_r+0x330>
   14744:	vmov	s13, r0
   14748:	vmov	d2, r2, r3
   1474c:	vcvt.f64.s32	d4, s13
   14750:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   14754:	vsub.f64	d6, d2, d6
   14758:	vfma.f64	d7, d6, d3
   1475c:	vfma.f64	d7, d4, d5
   14760:	vcvt.s32.f64	s13, d7
   14764:	vcmpe.f64	d7, #0.0
   14768:	vmrs	APSR_nzcv, fpscr
   1476c:	vmov	r7, s13
   14770:	bpl.n	14784 <_dtoa_r+0x124>
   14772:	vcvt.f64.s32	d6, s13
   14776:	vcmp.f64	d6, d7
   1477a:	vmrs	APSR_nzcv, fpscr
   1477e:	it	ne
   14780:	addne.w	r7, r7, #4294967295
   14784:	cmp	r7, #22
   14786:	bhi.w	14a14 <_dtoa_r+0x3b4>
   1478a:	ldr	r3, [pc, #532]	; (149a0 <_dtoa_r+0x340>)
   1478c:	add.w	r3, r3, r7, lsl #3
   14790:	vldr	d7, [r3]
   14794:	vcmpe.f64	d8, d7
   14798:	vmrs	APSR_nzcv, fpscr
   1479c:	bpl.n	1484e <_dtoa_r+0x1ee>
   1479e:	subs	r1, r1, r0
   147a0:	movs	r3, #0
   147a2:	subs.w	r8, r1, #1
   147a6:	add.w	r7, r7, #4294967295
   147aa:	str	r3, [sp, #40]	; 0x28
   147ac:	bmi.w	14a22 <_dtoa_r+0x3c2>
   147b0:	movs	r3, #0
   147b2:	str	r3, [sp, #24]
   147b4:	cmp	r7, #0
   147b6:	bge.n	1485e <_dtoa_r+0x1fe>
   147b8:	ldr	r3, [sp, #24]
   147ba:	str	r7, [sp, #16]
   147bc:	subs	r3, r3, r7
   147be:	str	r3, [sp, #24]
   147c0:	negs	r3, r7
   147c2:	str	r3, [sp, #32]
   147c4:	ldr	r3, [sp, #4]
   147c6:	cmp	r3, #9
   147c8:	mov.w	r7, #0
   147cc:	bhi.n	1486c <_dtoa_r+0x20c>
   147ce:	cmp	r3, #5
   147d0:	ble.w	14d0e <_dtoa_r+0x6ae>
   147d4:	subs	r3, #4
   147d6:	str	r3, [sp, #4]
   147d8:	movs	r6, #0
   147da:	ldr	r3, [sp, #4]
   147dc:	subs	r2, r3, #2
   147de:	cmp	r2, #3
   147e0:	bhi.w	14a2e <_dtoa_r+0x3ce>
   147e4:	tbh	[pc, r2, lsl #1]
   147e8:	.word	0x03a703aa
   147ec:	.word	0x037e039d
   147f0:	ldr	r2, [sp, #20]
   147f2:	ubfx	r8, r8, #0, #20
   147f6:	movw	r3, #9999	; 0x270f
   147fa:	orrs.w	r8, r8, r6
   147fe:	str	r3, [r2, #0]
   14800:	bne.n	14840 <_dtoa_r+0x1e0>
   14802:	ldr	r3, [sp, #108]	; 0x6c
   14804:	cmp	r3, #0
   14806:	beq.w	1532c <_dtoa_r+0xccc>
   1480a:	ldr	r3, [pc, #408]	; (149a4 <_dtoa_r+0x344>)
   1480c:	str	r3, [sp, #0]
   1480e:	adds	r3, #8
   14810:	ldr	r2, [sp, #108]	; 0x6c
   14812:	ldr	r0, [sp, #0]
   14814:	str	r3, [r2, #0]
   14816:	add	sp, #60	; 0x3c
   14818:	vpop	{d8}
   1481c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14820:	vmov	r6, s17
   14824:	ubfx	r6, r6, #0, #20
   14828:	subw	r0, r3, #1023	; 0x3ff
   1482c:	vmov	r2, r3, d8
   14830:	orr.w	r3, r6, #1069547520	; 0x3fc00000
   14834:	ldr	r1, [sp, #48]	; 0x30
   14836:	mov.w	sl, #0
   1483a:	orr.w	r3, r3, #3145728	; 0x300000
   1483e:	b.n	14738 <_dtoa_r+0xd8>
   14840:	ldr	r3, [sp, #108]	; 0x6c
   14842:	cmp	r3, #0
   14844:	bne.w	14ebe <_dtoa_r+0x85e>
   14848:	ldr	r3, [pc, #348]	; (149a8 <_dtoa_r+0x348>)
   1484a:	str	r3, [sp, #0]
   1484c:	b.n	146d8 <_dtoa_r+0x78>
   1484e:	subs	r1, r1, r0
   14850:	movs	r3, #0
   14852:	subs.w	r8, r1, #1
   14856:	str	r3, [sp, #40]	; 0x28
   14858:	bmi.w	14a22 <_dtoa_r+0x3c2>
   1485c:	str	r3, [sp, #24]
   1485e:	movs	r3, #0
   14860:	str	r3, [sp, #32]
   14862:	ldr	r3, [sp, #4]
   14864:	str	r7, [sp, #16]
   14866:	cmp	r3, #9
   14868:	add	r8, r7
   1486a:	bls.n	147ce <_dtoa_r+0x16e>
   1486c:	movs	r3, #0
   1486e:	movs	r6, #1
   14870:	str	r3, [sp, #4]
   14872:	str	r6, [sp, #28]
   14874:	mov.w	r9, #4294967295
   14878:	mov	fp, r3
   1487a:	movs	r1, #0
   1487c:	str	r1, [r4, #60]	; 0x3c
   1487e:	str.w	r9, [sp, #44]	; 0x2c
   14882:	mov	r0, r4
   14884:	bl	101fc <_Balloc>
   14888:	str	r0, [sp, #0]
   1488a:	cmp	r0, #0
   1488c:	beq.w	15310 <_dtoa_r+0xcb0>
   14890:	ldr	r3, [sp, #0]
   14892:	str	r3, [r4, #56]	; 0x38
   14894:	cmp.w	r9, #14
   14898:	bhi.w	14a54 <_dtoa_r+0x3f4>
   1489c:	cmp	r6, #0
   1489e:	beq.w	14a54 <_dtoa_r+0x3f4>
   148a2:	ldr	r3, [sp, #16]
   148a4:	cmp	r3, #0
   148a6:	ble.w	15066 <_dtoa_r+0xa06>
   148aa:	ldr	r2, [pc, #244]	; (149a0 <_dtoa_r+0x340>)
   148ac:	and.w	r1, r3, #15
   148b0:	add.w	r2, r2, r1, lsl #3
   148b4:	vldr	d7, [r2]
   148b8:	asrs	r2, r3, #4
   148ba:	lsls	r3, r3, #23
   148bc:	bpl.w	14fc4 <_dtoa_r+0x964>
   148c0:	ldr	r1, [pc, #232]	; (149ac <_dtoa_r+0x34c>)
   148c2:	vldr	d6, [r1, #32]
   148c6:	and.w	r2, r2, #15
   148ca:	movs	r0, #3
   148cc:	vdiv.f64	d5, d8, d6
   148d0:	cbz	r2, 148ea <_dtoa_r+0x28a>
   148d2:	ldr	r1, [pc, #216]	; (149ac <_dtoa_r+0x34c>)
   148d4:	lsls	r6, r2, #31
   148d6:	bpl.n	148e2 <_dtoa_r+0x282>
   148d8:	vldr	d6, [r1]
   148dc:	adds	r0, #1
   148de:	vmul.f64	d7, d7, d6
   148e2:	asrs	r2, r2, #1
   148e4:	add.w	r1, r1, #8
   148e8:	bne.n	148d4 <_dtoa_r+0x274>
   148ea:	vdiv.f64	d6, d5, d7
   148ee:	ldr	r3, [sp, #40]	; 0x28
   148f0:	cbz	r3, 14902 <_dtoa_r+0x2a2>
   148f2:	vmov.f64	d7, #112	; 0x3f800000  1.0
   148f6:	vcmpe.f64	d6, d7
   148fa:	vmrs	APSR_nzcv, fpscr
   148fe:	bmi.w	1525e <_dtoa_r+0xbfe>
   14902:	vmov	s15, r0
   14906:	vcvt.f64.s32	d5, s15
   1490a:	vmov.f64	d7, #28	; 0x40e00000  7.0
   1490e:	vfma.f64	d7, d5, d6
   14912:	vmov	r2, s15
   14916:	vmov	r0, r1, d7
   1491a:	sub.w	r1, r2, #54525952	; 0x3400000
   1491e:	cmp.w	r9, #0
   14922:	beq.w	15036 <_dtoa_r+0x9d6>
   14926:	ldr	r6, [sp, #16]
   14928:	mov	r2, r9
   1492a:	ldr	r3, [sp, #28]
   1492c:	cmp	r3, #0
   1492e:	beq.w	151c0 <_dtoa_r+0xb60>
   14932:	vmov.f64	d3, #96	; 0x3f000000  0.5
   14936:	ldr	r3, [pc, #104]	; (149a0 <_dtoa_r+0x340>)
   14938:	vcvt.s32.f64	s9, d6
   1493c:	add.w	ip, r3, r2, lsl #3
   14940:	vcvt.f64.s32	d7, s9
   14944:	vsub.f64	d7, d6, d7
   14948:	vldr	d6, [ip, #-8]
   1494c:	vdiv.f64	d5, d3, d6
   14950:	vmov	d6, r0, r1
   14954:	vmov	r0, s9
   14958:	vsub.f64	d5, d5, d6
   1495c:	ldr	r1, [sp, #0]
   1495e:	vcmpe.f64	d5, d7
   14962:	adds	r0, #48	; 0x30
   14964:	vmrs	APSR_nzcv, fpscr
   14968:	strb.w	r0, [r1], #1
   1496c:	bgt.w	152c8 <_dtoa_r+0xc68>
   14970:	vmov.f64	d2, #112	; 0x3f800000  1.0
   14974:	vmov.f64	d4, #36	; 0x41200000  10.0
   14978:	mov.w	ip, #0
   1497c:	b.n	149e2 <_dtoa_r+0x382>
   1497e:	nop
   14980:	.word	0x636f4361
   14984:	.word	0x3fd287a7
   14988:	.word	0x8b60c8b3
   1498c:	.word	0x3fc68a28
   14990:	.word	0x509f79fb
   14994:	.word	0x3fd34413
   14998:	.word	0x7ff00000
   1499c:	.word	0x200009fd
   149a0:	.word	0x20000328
   149a4:	.word	0x20000928
   149a8:	.word	0x20000934
   149ac:	.word	0x20000300
   149b0:	add.w	ip, ip, #1
   149b4:	cmp	ip, r2
   149b6:	bge.n	14a54 <_dtoa_r+0x3f4>
   149b8:	vmul.f64	d7, d7, d4
   149bc:	vmul.f64	d5, d5, d4
   149c0:	vcvt.s32.f64	s13, d7
   149c4:	vmov	r3, s13
   149c8:	vcvt.f64.s32	d3, s13
   149cc:	adds	r3, #48	; 0x30
   149ce:	vsub.f64	d7, d7, d3
   149d2:	vcmpe.f64	d7, d5
   149d6:	vmrs	APSR_nzcv, fpscr
   149da:	strb.w	r3, [r1], #1
   149de:	bmi.w	152c8 <_dtoa_r+0xc68>
   149e2:	vsub.f64	d6, d2, d7
   149e6:	vcmpe.f64	d6, d5
   149ea:	vmrs	APSR_nzcv, fpscr
   149ee:	bpl.n	149b0 <_dtoa_r+0x350>
   149f0:	ldr	r2, [sp, #0]
   149f2:	str	r6, [sp, #16]
   149f4:	b.n	149fc <_dtoa_r+0x39c>
   149f6:	cmp	r2, r1
   149f8:	beq.w	1529c <_dtoa_r+0xc3c>
   149fc:	mov	r9, r1
   149fe:	ldrb.w	r3, [r1, #-1]!
   14a02:	cmp	r3, #57	; 0x39
   14a04:	beq.n	149f6 <_dtoa_r+0x396>
   14a06:	adds	r3, #1
   14a08:	uxtb	r3, r3
   14a0a:	strb	r3, [r1, #0]
   14a0c:	ldr	r3, [sp, #16]
   14a0e:	adds	r3, #1
   14a10:	str	r3, [sp, #16]
   14a12:	b.n	14cc0 <_dtoa_r+0x660>
   14a14:	subs	r1, r1, r0
   14a16:	movs	r3, #1
   14a18:	subs.w	r8, r1, #1
   14a1c:	str	r3, [sp, #40]	; 0x28
   14a1e:	bpl.w	147b0 <_dtoa_r+0x150>
   14a22:	rsb	r3, r1, #1
   14a26:	str	r3, [sp, #24]
   14a28:	mov.w	r8, #0
   14a2c:	b.n	147b4 <_dtoa_r+0x154>
   14a2e:	movs	r6, #0
   14a30:	str	r6, [r4, #60]	; 0x3c
   14a32:	mov	r1, r6
   14a34:	mov	r0, r4
   14a36:	bl	101fc <_Balloc>
   14a3a:	str	r0, [sp, #0]
   14a3c:	cmp	r0, #0
   14a3e:	beq.w	15310 <_dtoa_r+0xcb0>
   14a42:	ldr	r3, [sp, #0]
   14a44:	str	r3, [r4, #56]	; 0x38
   14a46:	mov.w	r3, #4294967295
   14a4a:	str	r3, [sp, #44]	; 0x2c
   14a4c:	mov	r9, r3
   14a4e:	movs	r3, #1
   14a50:	mov	fp, r6
   14a52:	str	r3, [sp, #28]
   14a54:	ldr	r2, [sp, #52]	; 0x34
   14a56:	cmp	r2, #0
   14a58:	blt.n	14b06 <_dtoa_r+0x4a6>
   14a5a:	ldr	r1, [sp, #16]
   14a5c:	cmp	r1, #14
   14a5e:	bgt.n	14b06 <_dtoa_r+0x4a6>
   14a60:	ldr	r3, [pc, #732]	; (14d40 <_dtoa_r+0x6e0>)
   14a62:	cmp.w	fp, #0
   14a66:	add.w	r3, r3, r1, lsl #3
   14a6a:	vldr	d6, [r3]
   14a6e:	bge.n	14a9c <_dtoa_r+0x43c>
   14a70:	cmp.w	r9, #0
   14a74:	bgt.n	14a9c <_dtoa_r+0x43c>
   14a76:	bne.w	1505e <_dtoa_r+0x9fe>
   14a7a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   14a7e:	vmul.f64	d7, d6, d7
   14a82:	vcmpe.f64	d8, d7
   14a86:	vmrs	APSR_nzcv, fpscr
   14a8a:	mov	sl, r9
   14a8c:	mov	r6, r9
   14a8e:	bhi.w	14f6c <_dtoa_r+0x90c>
   14a92:	ldr.w	r8, [sp]
   14a96:	mvn.w	fp, fp
   14a9a:	b.n	14f7e <_dtoa_r+0x91e>
   14a9c:	vdiv.f64	d7, d8, d6
   14aa0:	vcvt.s32.f64	s14, d7
   14aa4:	ldr	r1, [sp, #0]
   14aa6:	vmov	r3, s14
   14aaa:	cmp.w	r9, #1
   14aae:	add.w	r3, r3, #48	; 0x30
   14ab2:	vcvt.f64.s32	d5, s14
   14ab6:	strb.w	r3, [r1], #1
   14aba:	vfms.f64	d8, d5, d6
   14abe:	beq.w	1512a <_dtoa_r+0xaca>
   14ac2:	vmov.f64	d4, #36	; 0x41200000  10.0
   14ac6:	movs	r3, #1
   14ac8:	b.n	14aee <_dtoa_r+0x48e>
   14aca:	vdiv.f64	d7, d8, d6
   14ace:	vcvt.s32.f64	s14, d7
   14ad2:	adds	r3, #1
   14ad4:	vmov	r2, s14
   14ad8:	cmp	r3, r9
   14ada:	add.w	r2, r2, #48	; 0x30
   14ade:	vcvt.f64.s32	d5, s14
   14ae2:	strb.w	r2, [r1], #1
   14ae6:	vfms.f64	d8, d5, d6
   14aea:	beq.w	1512a <_dtoa_r+0xaca>
   14aee:	vmul.f64	d8, d8, d4
   14af2:	vcmp.f64	d8, #0.0
   14af6:	vmrs	APSR_nzcv, fpscr
   14afa:	bne.n	14aca <_dtoa_r+0x46a>
   14afc:	ldr	r3, [sp, #16]
   14afe:	adds	r3, #1
   14b00:	str	r3, [sp, #16]
   14b02:	mov	r9, r1
   14b04:	b.n	14cc0 <_dtoa_r+0x660>
   14b06:	ldr	r3, [sp, #28]
   14b08:	cbz	r3, 14b5c <_dtoa_r+0x4fc>
   14b0a:	ldr	r3, [sp, #4]
   14b0c:	cmp	r3, #1
   14b0e:	ble.w	14ffe <_dtoa_r+0x99e>
   14b12:	ldr	r3, [sp, #32]
   14b14:	add.w	sl, r9, #4294967295
   14b18:	cmp	r3, sl
   14b1a:	bge.w	14f9c <_dtoa_r+0x93c>
   14b1e:	ldr	r3, [sp, #32]
   14b20:	str.w	sl, [sp, #32]
   14b24:	sub.w	r2, sl, r3
   14b28:	add	r7, r2
   14b2a:	mov.w	sl, #0
   14b2e:	cmp.w	r9, #0
   14b32:	blt.w	15180 <_dtoa_r+0xb20>
   14b36:	ldr	r3, [sp, #24]
   14b38:	str	r3, [sp, #36]	; 0x24
   14b3a:	add	r3, r9
   14b3c:	add	r8, r9
   14b3e:	str	r3, [sp, #24]
   14b40:	movs	r1, #1
   14b42:	mov	r0, r4
   14b44:	bl	10450 <__i2b>
   14b48:	mov	r6, r0
   14b4a:	b.n	14b66 <_dtoa_r+0x506>
   14b4c:	ldr	r3, [pc, #500]	; (14d44 <_dtoa_r+0x6e4>)
   14b4e:	str	r3, [sp, #0]
   14b50:	ldr	r0, [sp, #0]
   14b52:	add	sp, #60	; 0x3c
   14b54:	vpop	{d8}
   14b58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b5c:	ldr	r3, [sp, #24]
   14b5e:	ldr.w	sl, [sp, #32]
   14b62:	ldr	r6, [sp, #28]
   14b64:	str	r3, [sp, #36]	; 0x24
   14b66:	ldr	r3, [sp, #36]	; 0x24
   14b68:	cbz	r3, 14b86 <_dtoa_r+0x526>
   14b6a:	cmp.w	r8, #0
   14b6e:	ble.n	14b86 <_dtoa_r+0x526>
   14b70:	cmp	r3, r8
   14b72:	ldr	r1, [sp, #24]
   14b74:	mov	r2, r3
   14b76:	it	ge
   14b78:	movge	r2, r8
   14b7a:	subs	r1, r1, r2
   14b7c:	subs	r3, r3, r2
   14b7e:	str	r1, [sp, #24]
   14b80:	str	r3, [sp, #36]	; 0x24
   14b82:	sub.w	r8, r8, r2
   14b86:	ldr	r3, [sp, #32]
   14b88:	cbz	r3, 14ba4 <_dtoa_r+0x544>
   14b8a:	ldr	r3, [sp, #28]
   14b8c:	cmp	r3, #0
   14b8e:	beq.w	150e0 <_dtoa_r+0xa80>
   14b92:	cmp.w	sl, #0
   14b96:	bgt.w	14fa2 <_dtoa_r+0x942>
   14b9a:	ldr	r3, [sp, #32]
   14b9c:	subs.w	r2, r3, sl
   14ba0:	bne.w	151a2 <_dtoa_r+0xb42>
   14ba4:	movs	r1, #1
   14ba6:	mov	r0, r4
   14ba8:	bl	10450 <__i2b>
   14bac:	cmp	r7, #0
   14bae:	mov	sl, r0
   14bb0:	bgt.w	14d12 <_dtoa_r+0x6b2>
   14bb4:	ldr	r3, [sp, #4]
   14bb6:	cmp	r3, #1
   14bb8:	ble.w	14eca <_dtoa_r+0x86a>
   14bbc:	movs	r3, #0
   14bbe:	str	r3, [sp, #32]
   14bc0:	movs	r0, #1
   14bc2:	cmp	r7, #0
   14bc4:	bne.w	14d2a <_dtoa_r+0x6ca>
   14bc8:	add	r0, r8
   14bca:	ands.w	r0, r0, #31
   14bce:	beq.w	14ec6 <_dtoa_r+0x866>
   14bd2:	rsb	r2, r0, #32
   14bd6:	cmp	r2, #4
   14bd8:	bgt.w	14cec <_dtoa_r+0x68c>
   14bdc:	bne.w	14fcc <_dtoa_r+0x96c>
   14be0:	ldr	r3, [sp, #24]
   14be2:	cmp	r3, #0
   14be4:	ble.n	14bf2 <_dtoa_r+0x592>
   14be6:	mov	r1, r5
   14be8:	mov	r2, r3
   14bea:	mov	r0, r4
   14bec:	bl	106c8 <__lshift>
   14bf0:	mov	r5, r0
   14bf2:	cmp.w	r8, #0
   14bf6:	ble.n	14c04 <_dtoa_r+0x5a4>
   14bf8:	mov	r1, sl
   14bfa:	mov	r2, r8
   14bfc:	mov	r0, r4
   14bfe:	bl	106c8 <__lshift>
   14c02:	mov	sl, r0
   14c04:	ldr	r3, [sp, #40]	; 0x28
   14c06:	cmp	r3, #0
   14c08:	bne.w	14e8a <_dtoa_r+0x82a>
   14c0c:	cmp.w	r9, #0
   14c10:	ble.w	14e5e <_dtoa_r+0x7fe>
   14c14:	ldr	r3, [sp, #28]
   14c16:	cmp	r3, #0
   14c18:	bne.w	14d62 <_dtoa_r+0x702>
   14c1c:	ldr	r3, [sp, #16]
   14c1e:	adds	r3, #1
   14c20:	str	r3, [sp, #16]
   14c22:	ldr.w	r8, [sp]
   14c26:	movs	r7, #1
   14c28:	b.n	14c3a <_dtoa_r+0x5da>
   14c2a:	mov	r1, r5
   14c2c:	movs	r3, #0
   14c2e:	movs	r2, #10
   14c30:	mov	r0, r4
   14c32:	bl	1025c <__multadd>
   14c36:	adds	r7, #1
   14c38:	mov	r5, r0
   14c3a:	mov	r1, sl
   14c3c:	mov	r0, r5
   14c3e:	bl	14538 <quorem>
   14c42:	cmp	r9, r7
   14c44:	add.w	r0, r0, #48	; 0x30
   14c48:	strb.w	r0, [r8], #1
   14c4c:	bgt.n	14c2a <_dtoa_r+0x5ca>
   14c4e:	cmp.w	r9, #0
   14c52:	ldr	r2, [sp, #0]
   14c54:	ite	gt
   14c56:	movgt	fp, r9
   14c58:	movle.w	fp, #1
   14c5c:	mov	r3, r0
   14c5e:	add	fp, r2
   14c60:	movs	r7, #0
   14c62:	mov	r1, r5
   14c64:	movs	r2, #1
   14c66:	mov	r0, r4
   14c68:	str	r3, [sp, #4]
   14c6a:	bl	106c8 <__lshift>
   14c6e:	mov	r1, sl
   14c70:	mov	r5, r0
   14c72:	bl	107b8 <__mcmp>
   14c76:	cmp	r0, #0
   14c78:	ble.w	14fda <_dtoa_r+0x97a>
   14c7c:	ldrb.w	r3, [fp, #-1]
   14c80:	ldr	r2, [sp, #0]
   14c82:	add.w	fp, fp, #4294967295
   14c86:	b.n	14c92 <_dtoa_r+0x632>
   14c88:	cmp	r2, fp
   14c8a:	beq.w	14ff0 <_dtoa_r+0x990>
   14c8e:	ldrb.w	r3, [fp, #-1]!
   14c92:	cmp	r3, #57	; 0x39
   14c94:	add.w	r9, fp, #1
   14c98:	beq.n	14c88 <_dtoa_r+0x628>
   14c9a:	adds	r3, #1
   14c9c:	strb.w	r3, [fp]
   14ca0:	mov	r1, sl
   14ca2:	mov	r0, r4
   14ca4:	bl	10248 <_Bfree>
   14ca8:	cbz	r6, 14cc0 <_dtoa_r+0x660>
   14caa:	cbz	r7, 14cb8 <_dtoa_r+0x658>
   14cac:	cmp	r7, r6
   14cae:	beq.n	14cb8 <_dtoa_r+0x658>
   14cb0:	mov	r1, r7
   14cb2:	mov	r0, r4
   14cb4:	bl	10248 <_Bfree>
   14cb8:	mov	r1, r6
   14cba:	mov	r0, r4
   14cbc:	bl	10248 <_Bfree>
   14cc0:	mov	r1, r5
   14cc2:	mov	r0, r4
   14cc4:	bl	10248 <_Bfree>
   14cc8:	movs	r3, #0
   14cca:	strb.w	r3, [r9]
   14cce:	ldrd	r2, r3, [sp, #16]
   14cd2:	str	r2, [r3, #0]
   14cd4:	ldr	r3, [sp, #108]	; 0x6c
   14cd6:	cmp	r3, #0
   14cd8:	beq.w	146d8 <_dtoa_r+0x78>
   14cdc:	ldr	r0, [sp, #0]
   14cde:	str.w	r9, [r3]
   14ce2:	add	sp, #60	; 0x3c
   14ce4:	vpop	{d8}
   14ce8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cec:	rsb	r0, r0, #28
   14cf0:	ldr	r3, [sp, #24]
   14cf2:	add	r3, r0
   14cf4:	str	r3, [sp, #24]
   14cf6:	ldr	r3, [sp, #36]	; 0x24
   14cf8:	add	r3, r0
   14cfa:	str	r3, [sp, #36]	; 0x24
   14cfc:	add	r8, r0
   14cfe:	b.n	14be0 <_dtoa_r+0x580>
   14d00:	rsb	r2, r2, #32
   14d04:	lsl.w	r2, r6, r2
   14d08:	vmov	s14, r2
   14d0c:	b.n	14722 <_dtoa_r+0xc2>
   14d0e:	movs	r6, #1
   14d10:	b.n	147da <_dtoa_r+0x17a>
   14d12:	mov	r1, r0
   14d14:	mov	r2, r7
   14d16:	mov	r0, r4
   14d18:	bl	10608 <__pow5mult>
   14d1c:	ldr	r3, [sp, #4]
   14d1e:	cmp	r3, #1
   14d20:	mov	sl, r0
   14d22:	ble.w	150b0 <_dtoa_r+0xa50>
   14d26:	movs	r3, #0
   14d28:	str	r3, [sp, #32]
   14d2a:	ldr.w	r2, [sl, #16]
   14d2e:	add.w	r2, sl, r2, lsl #2
   14d32:	ldr	r0, [r2, #16]
   14d34:	bl	103b0 <__hi0bits>
   14d38:	rsb	r0, r0, #32
   14d3c:	b.n	14bc8 <_dtoa_r+0x568>
   14d3e:	nop
   14d40:	.word	0x20000328
   14d44:	.word	0x200009fc
   14d48:	mov	r1, r6
   14d4a:	movs	r3, #0
   14d4c:	movs	r2, #10
   14d4e:	mov	r0, r4
   14d50:	bl	1025c <__multadd>
   14d54:	ldr	r3, [sp, #44]	; 0x2c
   14d56:	cmp	r3, #0
   14d58:	mov	r6, r0
   14d5a:	ble.w	152fa <_dtoa_r+0xc9a>
   14d5e:	str	r7, [sp, #16]
   14d60:	mov	r9, r3
   14d62:	ldr	r3, [sp, #36]	; 0x24
   14d64:	cmp	r3, #0
   14d66:	ble.n	14d74 <_dtoa_r+0x714>
   14d68:	mov	r1, r6
   14d6a:	mov	r2, r3
   14d6c:	mov	r0, r4
   14d6e:	bl	106c8 <__lshift>
   14d72:	mov	r6, r0
   14d74:	ldr	r3, [sp, #32]
   14d76:	cmp	r3, #0
   14d78:	bne.w	15152 <_dtoa_r+0xaf2>
   14d7c:	mov	r8, r6
   14d7e:	ldr	r3, [sp, #8]
   14d80:	ldr	r7, [sp, #0]
   14d82:	and.w	r2, r3, #1
   14d86:	subs	r3, r7, #1
   14d88:	add	r3, r9
   14d8a:	str	r3, [sp, #32]
   14d8c:	ldr	r3, [sp, #4]
   14d8e:	str	r2, [sp, #40]	; 0x28
   14d90:	orrs	r3, r2
   14d92:	str	r3, [sp, #36]	; 0x24
   14d94:	mov	r1, sl
   14d96:	mov	r0, r5
   14d98:	bl	14538 <quorem>
   14d9c:	mov	r1, r6
   14d9e:	mov	fp, r0
   14da0:	mov	r0, r5
   14da2:	bl	107b8 <__mcmp>
   14da6:	mov	r2, r8
   14da8:	mov	r1, sl
   14daa:	mov	r9, r0
   14dac:	mov	r0, r4
   14dae:	bl	107fc <__mdiff>
   14db2:	ldr	r2, [r0, #12]
   14db4:	mov	r1, r0
   14db6:	add.w	r3, fp, #48	; 0x30
   14dba:	cmp	r2, #0
   14dbc:	bne.n	14e44 <_dtoa_r+0x7e4>
   14dbe:	strd	r0, r3, [sp, #24]
   14dc2:	mov	r0, r5
   14dc4:	bl	107b8 <__mcmp>
   14dc8:	ldr	r1, [sp, #24]
   14dca:	str	r0, [sp, #8]
   14dcc:	mov	r0, r4
   14dce:	bl	10248 <_Bfree>
   14dd2:	ldr	r2, [sp, #8]
   14dd4:	ldr	r3, [sp, #28]
   14dd6:	cbnz	r2, 14de0 <_dtoa_r+0x780>
   14dd8:	ldr	r1, [sp, #36]	; 0x24
   14dda:	cmp	r1, #0
   14ddc:	beq.w	152dc <_dtoa_r+0xc7c>
   14de0:	cmp.w	r9, #0
   14de4:	blt.w	150ee <_dtoa_r+0xa8e>
   14de8:	ldr	r1, [sp, #4]
   14dea:	orr.w	r9, r9, r1
   14dee:	ldr	r1, [sp, #40]	; 0x28
   14df0:	orrs.w	r9, r1, r9
   14df4:	beq.w	150ee <_dtoa_r+0xa8e>
   14df8:	cmp	r2, #0
   14dfa:	bgt.w	1518a <_dtoa_r+0xb2a>
   14dfe:	ldr	r2, [sp, #32]
   14e00:	strb	r3, [r7, #0]
   14e02:	add.w	r9, r7, #1
   14e06:	cmp	r7, r2
   14e08:	mov	fp, r9
   14e0a:	beq.w	15196 <_dtoa_r+0xb36>
   14e0e:	mov	r1, r5
   14e10:	movs	r3, #0
   14e12:	movs	r2, #10
   14e14:	mov	r0, r4
   14e16:	bl	1025c <__multadd>
   14e1a:	cmp	r6, r8
   14e1c:	mov	r5, r0
   14e1e:	mov	r1, r6
   14e20:	mov.w	r3, #0
   14e24:	mov.w	r2, #10
   14e28:	mov	r0, r4
   14e2a:	beq.n	14e52 <_dtoa_r+0x7f2>
   14e2c:	bl	1025c <__multadd>
   14e30:	mov	r1, r8
   14e32:	mov	r6, r0
   14e34:	movs	r3, #0
   14e36:	movs	r2, #10
   14e38:	mov	r0, r4
   14e3a:	bl	1025c <__multadd>
   14e3e:	mov	r7, r9
   14e40:	mov	r8, r0
   14e42:	b.n	14d94 <_dtoa_r+0x734>
   14e44:	mov	r0, r4
   14e46:	str	r3, [sp, #8]
   14e48:	bl	10248 <_Bfree>
   14e4c:	ldr	r3, [sp, #8]
   14e4e:	movs	r2, #1
   14e50:	b.n	14de0 <_dtoa_r+0x780>
   14e52:	bl	1025c <__multadd>
   14e56:	mov	r7, r9
   14e58:	mov	r6, r0
   14e5a:	mov	r8, r0
   14e5c:	b.n	14d94 <_dtoa_r+0x734>
   14e5e:	ldr	r3, [sp, #4]
   14e60:	cmp	r3, #2
   14e62:	bgt.n	14f48 <_dtoa_r+0x8e8>
   14e64:	ldr	r3, [sp, #28]
   14e66:	cmp	r3, #0
   14e68:	bne.w	14d62 <_dtoa_r+0x702>
   14e6c:	ldr	r3, [sp, #16]
   14e6e:	mov	r1, sl
   14e70:	adds	r3, #1
   14e72:	mov	r0, r5
   14e74:	str	r3, [sp, #16]
   14e76:	bl	14538 <quorem>
   14e7a:	ldr.w	fp, [sp]
   14e7e:	add.w	r3, r0, #48	; 0x30
   14e82:	strb.w	r3, [fp], #1
   14e86:	movs	r7, #0
   14e88:	b.n	14c62 <_dtoa_r+0x602>
   14e8a:	mov	r1, sl
   14e8c:	mov	r0, r5
   14e8e:	bl	107b8 <__mcmp>
   14e92:	cmp	r0, #0
   14e94:	bge.w	14c0c <_dtoa_r+0x5ac>
   14e98:	mov	r1, r5
   14e9a:	movs	r3, #0
   14e9c:	movs	r2, #10
   14e9e:	mov	r0, r4
   14ea0:	bl	1025c <__multadd>
   14ea4:	ldr	r3, [sp, #16]
   14ea6:	subs	r7, r3, #1
   14ea8:	ldr	r3, [sp, #28]
   14eaa:	mov	r5, r0
   14eac:	cmp	r3, #0
   14eae:	bne.w	14d48 <_dtoa_r+0x6e8>
   14eb2:	ldr	r3, [sp, #44]	; 0x2c
   14eb4:	cmp	r3, #0
   14eb6:	ble.w	152ea <_dtoa_r+0xc8a>
   14eba:	mov	r9, r3
   14ebc:	b.n	14c22 <_dtoa_r+0x5c2>
   14ebe:	ldr	r3, [pc, #752]	; (151b0 <_dtoa_r+0xb50>)
   14ec0:	str	r3, [sp, #0]
   14ec2:	adds	r3, #3
   14ec4:	b.n	14810 <_dtoa_r+0x1b0>
   14ec6:	movs	r0, #28
   14ec8:	b.n	14cf0 <_dtoa_r+0x690>
   14eca:	ldrd	r0, r1, [sp, #8]
   14ece:	cmp	r0, #0
   14ed0:	bne.w	14bbc <_dtoa_r+0x55c>
   14ed4:	ubfx	r2, r1, #0, #20
   14ed8:	cmp	r2, #0
   14eda:	beq.w	150c6 <_dtoa_r+0xa66>
   14ede:	ldr	r3, [sp, #8]
   14ee0:	str	r3, [sp, #32]
   14ee2:	b.n	14bc0 <_dtoa_r+0x560>
   14ee4:	movs	r3, #1
   14ee6:	str	r3, [sp, #28]
   14ee8:	ldr	r3, [sp, #16]
   14eea:	add	r3, fp
   14eec:	add.w	r9, r3, #1
   14ef0:	cmp.w	r9, #1
   14ef4:	mov	ip, r9
   14ef6:	str	r3, [sp, #44]	; 0x2c
   14ef8:	it	lt
   14efa:	movlt.w	ip, #1
   14efe:	movs	r1, #0
   14f00:	cmp.w	ip, #23
   14f04:	str	r1, [r4, #60]	; 0x3c
   14f06:	ble.w	14882 <_dtoa_r+0x222>
   14f0a:	movs	r0, #1
   14f0c:	movs	r2, #4
   14f0e:	lsls	r2, r2, #1
   14f10:	add.w	r3, r2, #20
   14f14:	cmp	r3, ip
   14f16:	mov	r1, r0
   14f18:	add.w	r0, r0, #1
   14f1c:	bls.n	14f0e <_dtoa_r+0x8ae>
   14f1e:	str	r1, [r4, #60]	; 0x3c
   14f20:	b.n	14882 <_dtoa_r+0x222>
   14f22:	movs	r3, #1
   14f24:	str	r3, [sp, #28]
   14f26:	cmp.w	fp, #0
   14f2a:	ble.n	14fd2 <_dtoa_r+0x972>
   14f2c:	str.w	fp, [sp, #44]	; 0x2c
   14f30:	mov	r9, fp
   14f32:	mov	ip, fp
   14f34:	b.n	14efe <_dtoa_r+0x89e>
   14f36:	movs	r3, #0
   14f38:	str	r3, [sp, #28]
   14f3a:	b.n	14ee8 <_dtoa_r+0x888>
   14f3c:	movs	r3, #0
   14f3e:	str	r3, [sp, #28]
   14f40:	b.n	14f26 <_dtoa_r+0x8c6>
   14f42:	ldr.w	r9, [sp, #44]	; 0x2c
   14f46:	str	r7, [sp, #16]
   14f48:	cmp.w	r9, #0
   14f4c:	bne.w	14a92 <_dtoa_r+0x432>
   14f50:	mov	r1, sl
   14f52:	mov	r3, r9
   14f54:	movs	r2, #5
   14f56:	mov	r0, r4
   14f58:	bl	1025c <__multadd>
   14f5c:	mov	r1, r0
   14f5e:	mov	sl, r0
   14f60:	mov	r0, r5
   14f62:	bl	107b8 <__mcmp>
   14f66:	cmp	r0, #0
   14f68:	ble.w	14a92 <_dtoa_r+0x432>
   14f6c:	ldr	r3, [sp, #16]
   14f6e:	add.w	fp, r3, #1
   14f72:	ldr	r3, [sp, #0]
   14f74:	movs	r2, #49	; 0x31
   14f76:	mov	r8, r3
   14f78:	strb.w	r2, [r3], #1
   14f7c:	str	r3, [sp, #0]
   14f7e:	mov	r1, sl
   14f80:	mov	r0, r4
   14f82:	bl	10248 <_Bfree>
   14f86:	add.w	r3, fp, #1
   14f8a:	ldr.w	r9, [sp]
   14f8e:	str	r3, [sp, #16]
   14f90:	str.w	r8, [sp]
   14f94:	cmp	r6, #0
   14f96:	bne.w	14cb8 <_dtoa_r+0x658>
   14f9a:	b.n	14cc0 <_dtoa_r+0x660>
   14f9c:	sub.w	sl, r3, sl
   14fa0:	b.n	14b2e <_dtoa_r+0x4ce>
   14fa2:	mov	r1, r6
   14fa4:	mov	r2, sl
   14fa6:	mov	r0, r4
   14fa8:	bl	10608 <__pow5mult>
   14fac:	mov	r2, r5
   14fae:	mov	r1, r0
   14fb0:	mov	r6, r0
   14fb2:	mov	r0, r4
   14fb4:	bl	104ac <__multiply>
   14fb8:	mov	r1, r5
   14fba:	mov	r5, r0
   14fbc:	mov	r0, r4
   14fbe:	bl	10248 <_Bfree>
   14fc2:	b.n	14b9a <_dtoa_r+0x53a>
   14fc4:	movs	r0, #2
   14fc6:	vmov.f64	d5, d8
   14fca:	b.n	148d0 <_dtoa_r+0x270>
   14fcc:	rsb	r0, r0, #60	; 0x3c
   14fd0:	b.n	14cf0 <_dtoa_r+0x690>
   14fd2:	mov.w	fp, #1
   14fd6:	mov	r9, fp
   14fd8:	b.n	1487a <_dtoa_r+0x21a>
   14fda:	bne.n	14fe4 <_dtoa_r+0x984>
   14fdc:	ldr	r3, [sp, #4]
   14fde:	lsls	r3, r3, #31
   14fe0:	bmi.w	14c7c <_dtoa_r+0x61c>
   14fe4:	mov	r9, fp
   14fe6:	ldrb.w	r3, [fp, #-1]!
   14fea:	cmp	r3, #48	; 0x30
   14fec:	beq.n	14fe4 <_dtoa_r+0x984>
   14fee:	b.n	14ca0 <_dtoa_r+0x640>
   14ff0:	ldr	r3, [sp, #16]
   14ff2:	ldr	r2, [sp, #0]
   14ff4:	adds	r3, #1
   14ff6:	str	r3, [sp, #16]
   14ff8:	movs	r3, #49	; 0x31
   14ffa:	strb	r3, [r2, #0]
   14ffc:	b.n	14ca0 <_dtoa_r+0x640>
   14ffe:	cmp.w	sl, #0
   15002:	beq.w	1524c <_dtoa_r+0xbec>
   15006:	addw	r2, r2, #1075	; 0x433
   1500a:	ldr	r3, [sp, #24]
   1500c:	str	r3, [sp, #36]	; 0x24
   1500e:	add	r3, r2
   15010:	ldr.w	sl, [sp, #32]
   15014:	str	r3, [sp, #24]
   15016:	add	r8, r2
   15018:	b.n	14b40 <_dtoa_r+0x4e0>
   1501a:	vmov	s15, r0
   1501e:	vmov.f64	d5, #28	; 0x40e00000  7.0
   15022:	vcvt.f64.s32	d7, s15
   15026:	vfma.f64	d5, d6, d7
   1502a:	vmov	r2, s11
   1502e:	vmov	r0, r1, d5
   15032:	sub.w	r1, r2, #54525952	; 0x3400000
   15036:	vmov	d5, r0, r1
   1503a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   1503e:	vsub.f64	d7, d6, d7
   15042:	vcmpe.f64	d7, d5
   15046:	vmrs	APSR_nzcv, fpscr
   1504a:	bgt.w	152bc <_dtoa_r+0xc5c>
   1504e:	vneg.f64	d5, d5
   15052:	vcmpe.f64	d7, d5
   15056:	vmrs	APSR_nzcv, fpscr
   1505a:	bpl.w	14a54 <_dtoa_r+0x3f4>
   1505e:	mov.w	sl, #0
   15062:	mov	r6, sl
   15064:	b.n	14a92 <_dtoa_r+0x432>
   15066:	beq.w	15254 <_dtoa_r+0xbf4>
   1506a:	ldr	r3, [sp, #16]
   1506c:	ldr	r1, [pc, #324]	; (151b4 <_dtoa_r+0xb54>)
   1506e:	negs	r2, r3
   15070:	and.w	r0, r2, #15
   15074:	add.w	r1, r1, r0, lsl #3
   15078:	vldr	d6, [r1]
   1507c:	asrs	r2, r2, #4
   1507e:	vmul.f64	d6, d8, d6
   15082:	beq.w	1530a <_dtoa_r+0xcaa>
   15086:	vmov.f64	d7, d6
   1508a:	ldr	r1, [pc, #300]	; (151b8 <_dtoa_r+0xb58>)
   1508c:	movs	r6, #0
   1508e:	movs	r0, #2
   15090:	lsls	r3, r2, #31
   15092:	bpl.n	150a0 <_dtoa_r+0xa40>
   15094:	vldr	d5, [r1]
   15098:	adds	r0, #1
   1509a:	movs	r6, #1
   1509c:	vmul.f64	d7, d7, d5
   150a0:	asrs	r2, r2, #1
   150a2:	add.w	r1, r1, #8
   150a6:	bne.n	15090 <_dtoa_r+0xa30>
   150a8:	cmp	r6, #0
   150aa:	vseleq.f64	d6, d6, d7
   150ae:	b.n	148ee <_dtoa_r+0x28e>
   150b0:	ldr	r3, [sp, #8]
   150b2:	cmp	r3, #0
   150b4:	bne.w	14d26 <_dtoa_r+0x6c6>
   150b8:	ldrd	r0, r1, [sp, #8]
   150bc:	ubfx	r2, r1, #0, #20
   150c0:	cmp	r2, #0
   150c2:	bne.w	15334 <_dtoa_r+0xcd4>
   150c6:	ldr	r2, [pc, #244]	; (151bc <_dtoa_r+0xb5c>)
   150c8:	ands	r2, r1
   150ca:	cmp	r2, #0
   150cc:	beq.w	152c4 <_dtoa_r+0xc64>
   150d0:	ldr	r3, [sp, #24]
   150d2:	adds	r3, #1
   150d4:	str	r3, [sp, #24]
   150d6:	movs	r3, #1
   150d8:	add.w	r8, r8, #1
   150dc:	str	r3, [sp, #32]
   150de:	b.n	14bc0 <_dtoa_r+0x560>
   150e0:	mov	r1, r5
   150e2:	ldr	r2, [sp, #32]
   150e4:	mov	r0, r4
   150e6:	bl	10608 <__pow5mult>
   150ea:	mov	r5, r0
   150ec:	b.n	14ba4 <_dtoa_r+0x544>
   150ee:	cmp	r2, #0
   150f0:	ble.n	15118 <_dtoa_r+0xab8>
   150f2:	mov	r1, r5
   150f4:	movs	r2, #1
   150f6:	mov	r0, r4
   150f8:	str	r3, [sp, #4]
   150fa:	bl	106c8 <__lshift>
   150fe:	mov	r1, sl
   15100:	mov	r5, r0
   15102:	bl	107b8 <__mcmp>
   15106:	cmp	r0, #0
   15108:	ldr	r3, [sp, #4]
   1510a:	ble.w	152d0 <_dtoa_r+0xc70>
   1510e:	cmp	r3, #57	; 0x39
   15110:	beq.w	152a8 <_dtoa_r+0xc48>
   15114:	add.w	r3, fp, #49	; 0x31
   15118:	mov	r9, r7
   1511a:	strb.w	r3, [r9], #1
   1511e:	ldr	r3, [sp, #16]
   15120:	adds	r3, #1
   15122:	mov	r7, r6
   15124:	str	r3, [sp, #16]
   15126:	mov	r6, r8
   15128:	b.n	14ca0 <_dtoa_r+0x640>
   1512a:	vadd.f64	d8, d8, d8
   1512e:	vcmpe.f64	d8, d6
   15132:	vmrs	APSR_nzcv, fpscr
   15136:	bgt.n	1514e <_dtoa_r+0xaee>
   15138:	vcmp.f64	d8, d6
   1513c:	vmrs	APSR_nzcv, fpscr
   15140:	bne.w	14afc <_dtoa_r+0x49c>
   15144:	vmov	r3, s14
   15148:	lsls	r0, r3, #31
   1514a:	bpl.w	14afc <_dtoa_r+0x49c>
   1514e:	ldr	r2, [sp, #0]
   15150:	b.n	149fc <_dtoa_r+0x39c>
   15152:	ldr	r1, [r6, #4]
   15154:	mov	r0, r4
   15156:	bl	101fc <_Balloc>
   1515a:	mov	r7, r0
   1515c:	cmp	r0, #0
   1515e:	beq.w	1531e <_dtoa_r+0xcbe>
   15162:	ldr	r3, [r6, #16]
   15164:	adds	r3, #2
   15166:	lsls	r2, r3, #2
   15168:	add.w	r1, r6, #12
   1516c:	adds	r0, #12
   1516e:	bl	a56c <memcpy>
   15172:	mov	r1, r7
   15174:	movs	r2, #1
   15176:	mov	r0, r4
   15178:	bl	106c8 <__lshift>
   1517c:	mov	r8, r0
   1517e:	b.n	14d7e <_dtoa_r+0x71e>
   15180:	ldr	r3, [sp, #24]
   15182:	sub.w	r3, r3, r9
   15186:	str	r3, [sp, #36]	; 0x24
   15188:	b.n	14b40 <_dtoa_r+0x4e0>
   1518a:	cmp	r3, #57	; 0x39
   1518c:	beq.w	152a8 <_dtoa_r+0xc48>
   15190:	mov	r9, r7
   15192:	adds	r3, #1
   15194:	b.n	1511a <_dtoa_r+0xaba>
   15196:	ldr	r2, [sp, #16]
   15198:	adds	r2, #1
   1519a:	mov	r7, r6
   1519c:	str	r2, [sp, #16]
   1519e:	mov	r6, r8
   151a0:	b.n	14c62 <_dtoa_r+0x602>
   151a2:	mov	r1, r5
   151a4:	mov	r0, r4
   151a6:	bl	10608 <__pow5mult>
   151aa:	mov	r5, r0
   151ac:	b.n	14ba4 <_dtoa_r+0x544>
   151ae:	nop
   151b0:	.word	0x20000934
   151b4:	.word	0x20000328
   151b8:	.word	0x20000300
   151bc:	.word	0x7ff00000
   151c0:	ldr	r3, [pc, #376]	; (1533c <_dtoa_r+0xcdc>)
   151c2:	vcvt.s32.f64	s11, d6
   151c6:	add.w	ip, r3, r2, lsl #3
   151ca:	vldr	d3, [ip, #-8]
   151ce:	vcvt.f64.s32	d7, s11
   151d2:	vsub.f64	d7, d6, d7
   151d6:	vmov	d6, r0, r1
   151da:	vmov	r1, s11
   151de:	vmul.f64	d3, d3, d6
   151e2:	ldr	r0, [sp, #0]
   151e4:	adds	r1, #48	; 0x30
   151e6:	cmp	r2, #1
   151e8:	strb.w	r1, [r0], #1
   151ec:	beq.w	152f6 <_dtoa_r+0xc96>
   151f0:	vmov.f64	d4, #36	; 0x41200000  10.0
   151f4:	ldr	r3, [sp, #0]
   151f6:	adds	r1, r3, r2
   151f8:	vmul.f64	d7, d7, d4
   151fc:	vcvt.s32.f64	s13, d7
   15200:	vmov	r3, s13
   15204:	adds	r3, #48	; 0x30
   15206:	strb.w	r3, [r0], #1
   1520a:	cmp	r1, r0
   1520c:	vcvt.f64.s32	d5, s13
   15210:	vsub.f64	d7, d7, d5
   15214:	bne.n	151f8 <_dtoa_r+0xb98>
   15216:	vmov.f64	d6, #96	; 0x3f000000  0.5
   1521a:	vadd.f64	d5, d3, d6
   1521e:	vcmpe.f64	d5, d7
   15222:	vmrs	APSR_nzcv, fpscr
   15226:	bmi.w	149f0 <_dtoa_r+0x390>
   1522a:	vsub.f64	d6, d6, d3
   1522e:	vcmpe.f64	d6, d7
   15232:	vmrs	APSR_nzcv, fpscr
   15236:	ble.w	14a54 <_dtoa_r+0x3f4>
   1523a:	mov	r9, r1
   1523c:	subs	r1, #1
   1523e:	ldrb.w	r3, [r9, #-1]
   15242:	cmp	r3, #48	; 0x30
   15244:	beq.n	1523a <_dtoa_r+0xbda>
   15246:	adds	r3, r6, #1
   15248:	str	r3, [sp, #16]
   1524a:	b.n	14cc0 <_dtoa_r+0x660>
   1524c:	ldr	r2, [sp, #48]	; 0x30
   1524e:	rsb	r2, r2, #54	; 0x36
   15252:	b.n	1500a <_dtoa_r+0x9aa>
   15254:	movs	r0, #2
   15256:	vmov.f64	d6, d8
   1525a:	b.w	148ee <_dtoa_r+0x28e>
   1525e:	cmp.w	r9, #0
   15262:	beq.w	1501a <_dtoa_r+0x9ba>
   15266:	ldr	r2, [sp, #44]	; 0x2c
   15268:	cmp	r2, #0
   1526a:	ble.w	14a54 <_dtoa_r+0x3f4>
   1526e:	vmov.f64	d4, #36	; 0x41200000  10.0
   15272:	vmul.f64	d6, d6, d4
   15276:	adds	r0, #1
   15278:	vmov	s15, r0
   1527c:	ldr	r3, [sp, #16]
   1527e:	vcvt.f64.s32	d5, s15
   15282:	vmov.f64	d7, #28	; 0x40e00000  7.0
   15286:	vfma.f64	d7, d6, d5
   1528a:	vmov	ip, s15
   1528e:	vmov	r0, r1, d7
   15292:	subs	r6, r3, #1
   15294:	sub.w	r1, ip, #54525952	; 0x3400000
   15298:	b.w	1492a <_dtoa_r+0x2ca>
   1529c:	ldr	r3, [sp, #16]
   1529e:	adds	r3, #1
   152a0:	str	r3, [sp, #16]
   152a2:	movs	r3, #49	; 0x31
   152a4:	b.w	14a0a <_dtoa_r+0x3aa>
   152a8:	ldr	r3, [sp, #16]
   152aa:	mov	fp, r7
   152ac:	adds	r3, #1
   152ae:	str	r3, [sp, #16]
   152b0:	movs	r3, #57	; 0x39
   152b2:	mov	r7, r6
   152b4:	strb.w	r3, [fp], #1
   152b8:	mov	r6, r8
   152ba:	b.n	14c80 <_dtoa_r+0x620>
   152bc:	mov.w	sl, #0
   152c0:	mov	r6, sl
   152c2:	b.n	14f6c <_dtoa_r+0x90c>
   152c4:	str	r2, [sp, #32]
   152c6:	b.n	14bc0 <_dtoa_r+0x560>
   152c8:	adds	r3, r6, #1
   152ca:	str	r3, [sp, #16]
   152cc:	mov	r9, r1
   152ce:	b.n	14cc0 <_dtoa_r+0x660>
   152d0:	bne.w	15118 <_dtoa_r+0xab8>
   152d4:	lsls	r2, r3, #31
   152d6:	bpl.w	15118 <_dtoa_r+0xab8>
   152da:	b.n	1510e <_dtoa_r+0xaae>
   152dc:	cmp	r3, #57	; 0x39
   152de:	beq.n	152a8 <_dtoa_r+0xc48>
   152e0:	cmp.w	r9, #0
   152e4:	bgt.w	15114 <_dtoa_r+0xab4>
   152e8:	b.n	15118 <_dtoa_r+0xab8>
   152ea:	ldr	r3, [sp, #4]
   152ec:	cmp	r3, #2
   152ee:	bgt.w	14f42 <_dtoa_r+0x8e2>
   152f2:	str	r7, [sp, #16]
   152f4:	b.n	14e6c <_dtoa_r+0x80c>
   152f6:	mov	r1, r0
   152f8:	b.n	15216 <_dtoa_r+0xbb6>
   152fa:	ldr	r3, [sp, #4]
   152fc:	cmp	r3, #2
   152fe:	bgt.w	14f42 <_dtoa_r+0x8e2>
   15302:	ldr.w	r9, [sp, #44]	; 0x2c
   15306:	str	r7, [sp, #16]
   15308:	b.n	14d62 <_dtoa_r+0x702>
   1530a:	movs	r0, #2
   1530c:	b.w	148ee <_dtoa_r+0x28e>
   15310:	ldr	r3, [pc, #44]	; (15340 <_dtoa_r+0xce0>)
   15312:	ldr	r0, [pc, #48]	; (15344 <_dtoa_r+0xce4>)
   15314:	movs	r2, #0
   15316:	movw	r1, #431	; 0x1af
   1531a:	bl	14480 <__assert_func>
   1531e:	ldr	r3, [pc, #32]	; (15340 <_dtoa_r+0xce0>)
   15320:	ldr	r0, [pc, #32]	; (15344 <_dtoa_r+0xce4>)
   15322:	mov	r2, r7
   15324:	movw	r1, #751	; 0x2ef
   15328:	bl	14480 <__assert_func>
   1532c:	ldr	r3, [pc, #24]	; (15348 <_dtoa_r+0xce8>)
   1532e:	str	r3, [sp, #0]
   15330:	b.w	146d8 <_dtoa_r+0x78>
   15334:	ldr	r3, [sp, #8]
   15336:	str	r3, [sp, #32]
   15338:	b.n	14d2a <_dtoa_r+0x6ca>
   1533a:	nop
   1533c:	.word	0x20000328
   15340:	.word	0x20000648
   15344:	.word	0x20000938
   15348:	.word	0x20000928

0001534c <_strtoul_l.constprop.0>:
   1534c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15350:	mov	r7, r0
   15352:	ldr	r0, [pc, #304]	; (15484 <_strtoul_l.constprop.0+0x138>)
   15354:	mov	r6, r1
   15356:	mov	r5, r6
   15358:	ldrb.w	lr, [r6], #1
   1535c:	ldrb.w	ip, [r0, lr]
   15360:	ands.w	ip, ip, #8
   15364:	bne.n	15356 <_strtoul_l.constprop.0+0xa>
   15366:	cmp.w	lr, #45	; 0x2d
   1536a:	beq.n	15422 <_strtoul_l.constprop.0+0xd6>
   1536c:	cmp.w	lr, #43	; 0x2b
   15370:	ittte	eq
   15372:	ldrbeq.w	lr, [r6]
   15376:	moveq	r4, ip
   15378:	addeq	r6, r5, #2
   1537a:	movne	r4, ip
   1537c:	cbz	r3, 15396 <_strtoul_l.constprop.0+0x4a>
   1537e:	cmp	r3, #16
   15380:	beq.n	1542c <_strtoul_l.constprop.0+0xe0>
   15382:	mov.w	r8, #4294967295
   15386:	udiv	r8, r8, r3
   1538a:	mul.w	sl, r3, r8
   1538e:	mvn.w	sl, sl
   15392:	mov	r9, r3
   15394:	b.n	153a8 <_strtoul_l.constprop.0+0x5c>
   15396:	cmp.w	lr, #48	; 0x30
   1539a:	beq.n	15452 <_strtoul_l.constprop.0+0x106>
   1539c:	movs	r3, #10
   1539e:	ldr.w	r8, [pc, #232]	; 15488 <_strtoul_l.constprop.0+0x13c>
   153a2:	mov.w	sl, #5
   153a6:	mov	r9, r3
   153a8:	movs	r5, #0
   153aa:	mov	r0, r5
   153ac:	b.n	153ba <_strtoul_l.constprop.0+0x6e>
   153ae:	beq.n	1540a <_strtoul_l.constprop.0+0xbe>
   153b0:	mla	r0, r9, r0, ip
   153b4:	movs	r5, #1
   153b6:	ldrb.w	lr, [r6], #1
   153ba:	sub.w	ip, lr, #48	; 0x30
   153be:	cmp.w	ip, #9
   153c2:	bls.n	153d2 <_strtoul_l.constprop.0+0x86>
   153c4:	sub.w	ip, lr, #65	; 0x41
   153c8:	cmp.w	ip, #25
   153cc:	bhi.n	153e6 <_strtoul_l.constprop.0+0x9a>
   153ce:	sub.w	ip, lr, #55	; 0x37
   153d2:	cmp	r3, ip
   153d4:	ble.n	153f8 <_strtoul_l.constprop.0+0xac>
   153d6:	cmp.w	r5, #4294967295
   153da:	beq.n	153b6 <_strtoul_l.constprop.0+0x6a>
   153dc:	cmp	r0, r8
   153de:	bls.n	153ae <_strtoul_l.constprop.0+0x62>
   153e0:	mov.w	r5, #4294967295
   153e4:	b.n	153b6 <_strtoul_l.constprop.0+0x6a>
   153e6:	sub.w	ip, lr, #97	; 0x61
   153ea:	cmp.w	ip, #25
   153ee:	bhi.n	153f8 <_strtoul_l.constprop.0+0xac>
   153f0:	sub.w	ip, lr, #87	; 0x57
   153f4:	cmp	r3, ip
   153f6:	bgt.n	153d6 <_strtoul_l.constprop.0+0x8a>
   153f8:	adds	r3, r5, #1
   153fa:	beq.n	15414 <_strtoul_l.constprop.0+0xc8>
   153fc:	cbz	r4, 15400 <_strtoul_l.constprop.0+0xb4>
   153fe:	negs	r0, r0
   15400:	cbz	r2, 15406 <_strtoul_l.constprop.0+0xba>
   15402:	cbnz	r5, 1541e <_strtoul_l.constprop.0+0xd2>
   15404:	str	r1, [r2, #0]
   15406:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1540a:	cmp	ip, sl
   1540c:	ble.n	153b0 <_strtoul_l.constprop.0+0x64>
   1540e:	mov.w	r5, #4294967295
   15412:	b.n	153b6 <_strtoul_l.constprop.0+0x6a>
   15414:	movs	r3, #34	; 0x22
   15416:	str	r3, [r7, #0]
   15418:	mov	r0, r5
   1541a:	cmp	r2, #0
   1541c:	beq.n	15406 <_strtoul_l.constprop.0+0xba>
   1541e:	subs	r1, r6, #1
   15420:	b.n	15404 <_strtoul_l.constprop.0+0xb8>
   15422:	ldrb.w	lr, [r6]
   15426:	movs	r4, #1
   15428:	adds	r6, r5, #2
   1542a:	b.n	1537c <_strtoul_l.constprop.0+0x30>
   1542c:	cmp.w	lr, #48	; 0x30
   15430:	bne.n	15476 <_strtoul_l.constprop.0+0x12a>
   15432:	ldrb	r0, [r6, #0]
   15434:	and.w	r0, r0, #223	; 0xdf
   15438:	cmp	r0, #88	; 0x58
   1543a:	bne.n	1546a <_strtoul_l.constprop.0+0x11e>
   1543c:	mov.w	r9, #16
   15440:	ldrb.w	lr, [r6, #1]
   15444:	mov.w	sl, #15
   15448:	adds	r6, #2
   1544a:	mvn.w	r8, #4026531840	; 0xf0000000
   1544e:	mov	r3, r9
   15450:	b.n	153a8 <_strtoul_l.constprop.0+0x5c>
   15452:	ldrb	r3, [r6, #0]
   15454:	and.w	r3, r3, #223	; 0xdf
   15458:	cmp	r3, #88	; 0x58
   1545a:	beq.n	1543c <_strtoul_l.constprop.0+0xf0>
   1545c:	movs	r3, #8
   1545e:	mov.w	sl, #7
   15462:	mvn.w	r8, #3758096384	; 0xe0000000
   15466:	mov	r9, r3
   15468:	b.n	153a8 <_strtoul_l.constprop.0+0x5c>
   1546a:	mov	r9, r3
   1546c:	mvn.w	r8, #4026531840	; 0xf0000000
   15470:	mov.w	sl, #15
   15474:	b.n	153a8 <_strtoul_l.constprop.0+0x5c>
   15476:	mov.w	sl, #15
   1547a:	mvn.w	r8, #4026531840	; 0xf0000000
   1547e:	mov	r9, r3
   15480:	b.n	153a8 <_strtoul_l.constprop.0+0x5c>
   15482:	nop
   15484:	.word	0x20000825
   15488:	.word	0x19999999

0001548c <_strtoul_r>:
   1548c:	b.w	1534c <_strtoul_l.constprop.0>

00015490 <_strtoll_l.constprop.0>:
   15490:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15494:	sub	sp, #20
   15496:	mov	r7, r3
   15498:	ldr	r3, [pc, #348]	; (155f8 <_strtoll_l.constprop.0+0x168>)
   1549a:	str	r0, [sp, #12]
   1549c:	mov	sl, r1
   1549e:	str	r2, [sp, #0]
   154a0:	mov	r5, r1
   154a2:	mov	r2, r5
   154a4:	ldrb.w	r4, [r5], #1
   154a8:	ldrb	r6, [r3, r4]
   154aa:	ands.w	r6, r6, #8
   154ae:	bne.n	154a2 <_strtoll_l.constprop.0+0x12>
   154b0:	cmp	r4, #45	; 0x2d
   154b2:	beq.n	155a0 <_strtoll_l.constprop.0+0x110>
   154b4:	cmp	r4, #43	; 0x2b
   154b6:	ittet	eq
   154b8:	ldrbeq	r4, [r5, #0]
   154ba:	streq	r6, [sp, #8]
   154bc:	strne	r6, [sp, #8]
   154be:	addeq	r5, r2, #2
   154c0:	mov.w	r6, #4294967295
   154c4:	mvn.w	fp, #2147483648	; 0x80000000
   154c8:	cbz	r7, 154d6 <_strtoll_l.constprop.0+0x46>
   154ca:	cmp	r7, #16
   154cc:	beq.n	155ae <_strtoll_l.constprop.0+0x11e>
   154ce:	mov	r8, r7
   154d0:	mov.w	r9, r7, asr #31
   154d4:	b.n	154e2 <_strtoll_l.constprop.0+0x52>
   154d6:	cmp	r4, #48	; 0x30
   154d8:	beq.n	155c4 <_strtoll_l.constprop.0+0x134>
   154da:	mov.w	r8, #10
   154de:	mov	r9, r7
   154e0:	mov	r7, r8
   154e2:	mov	r2, r8
   154e4:	mov	r3, r9
   154e6:	mov	r0, r6
   154e8:	mov	r1, fp
   154ea:	bl	cc6c <__aeabi_uldivmod>
   154ee:	movs	r3, #0
   154f0:	str	r2, [sp, #4]
   154f2:	mov	ip, r0
   154f4:	mov	r2, r1
   154f6:	mov	r0, r3
   154f8:	mov	r1, r3
   154fa:	b.n	15520 <_strtoll_l.constprop.0+0x90>
   154fc:	cmp	r2, r1
   154fe:	it	eq
   15500:	cmpeq	ip, r0
   15502:	beq.n	15580 <_strtoll_l.constprop.0+0xf0>
   15504:	mul.w	r3, r0, r9
   15508:	mla	r3, r8, r1, r3
   1550c:	umull	r0, r1, r0, r8
   15510:	add	r3, r1
   15512:	adds.w	r0, lr, r0
   15516:	adc.w	r1, r3, lr, asr #31
   1551a:	movs	r3, #1
   1551c:	ldrb.w	r4, [r5], #1
   15520:	sub.w	lr, r4, #48	; 0x30
   15524:	cmp.w	lr, #9
   15528:	bls.n	15538 <_strtoll_l.constprop.0+0xa8>
   1552a:	sub.w	lr, r4, #65	; 0x41
   1552e:	cmp.w	lr, #25
   15532:	bhi.n	1554e <_strtoll_l.constprop.0+0xbe>
   15534:	sub.w	lr, r4, #55	; 0x37
   15538:	cmp	r7, lr
   1553a:	ble.n	15560 <_strtoll_l.constprop.0+0xd0>
   1553c:	adds	r4, r3, #1
   1553e:	beq.n	1551c <_strtoll_l.constprop.0+0x8c>
   15540:	cmp	ip, r0
   15542:	sbcs.w	r3, r2, r1
   15546:	bcs.n	154fc <_strtoll_l.constprop.0+0x6c>
   15548:	mov.w	r3, #4294967295
   1554c:	b.n	1551c <_strtoll_l.constprop.0+0x8c>
   1554e:	sub.w	lr, r4, #97	; 0x61
   15552:	cmp.w	lr, #25
   15556:	bhi.n	15560 <_strtoll_l.constprop.0+0xd0>
   15558:	sub.w	lr, r4, #87	; 0x57
   1555c:	cmp	r7, lr
   1555e:	bgt.n	1553c <_strtoll_l.constprop.0+0xac>
   15560:	adds	r2, r3, #1
   15562:	beq.n	1558c <_strtoll_l.constprop.0+0xfc>
   15564:	ldr	r2, [sp, #8]
   15566:	cbz	r2, 1556e <_strtoll_l.constprop.0+0xde>
   15568:	negs	r0, r0
   1556a:	sbc.w	r1, r1, r1, lsl #1
   1556e:	ldr	r2, [sp, #0]
   15570:	cbz	r2, 1557a <_strtoll_l.constprop.0+0xea>
   15572:	cbnz	r3, 155de <_strtoll_l.constprop.0+0x14e>
   15574:	ldr	r3, [sp, #0]
   15576:	str.w	sl, [r3]
   1557a:	add	sp, #20
   1557c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15580:	ldr	r3, [sp, #4]
   15582:	cmp	r3, lr
   15584:	bge.n	15504 <_strtoll_l.constprop.0+0x74>
   15586:	mov.w	r3, #4294967295
   1558a:	b.n	1551c <_strtoll_l.constprop.0+0x8c>
   1558c:	ldr	r2, [sp, #12]
   1558e:	movs	r3, #34	; 0x22
   15590:	str	r3, [r2, #0]
   15592:	ldr	r3, [sp, #0]
   15594:	cbz	r3, 155e4 <_strtoll_l.constprop.0+0x154>
   15596:	add.w	sl, r5, #4294967295
   1559a:	mov	r0, r6
   1559c:	mov	r1, fp
   1559e:	b.n	15574 <_strtoll_l.constprop.0+0xe4>
   155a0:	movs	r3, #1
   155a2:	ldrb	r4, [r5, #0]
   155a4:	str	r3, [sp, #8]
   155a6:	adds	r5, r2, #2
   155a8:	mov.w	fp, #2147483648	; 0x80000000
   155ac:	b.n	154c8 <_strtoll_l.constprop.0+0x38>
   155ae:	cmp	r4, #48	; 0x30
   155b0:	bne.n	155bc <_strtoll_l.constprop.0+0x12c>
   155b2:	ldrb	r3, [r5, #0]
   155b4:	and.w	r3, r3, #223	; 0xdf
   155b8:	cmp	r3, #88	; 0x58
   155ba:	beq.n	155ce <_strtoll_l.constprop.0+0x13e>
   155bc:	mov	r8, r7
   155be:	mov.w	r9, #0
   155c2:	b.n	154e2 <_strtoll_l.constprop.0+0x52>
   155c4:	ldrb	r3, [r5, #0]
   155c6:	and.w	r3, r3, #223	; 0xdf
   155ca:	cmp	r3, #88	; 0x58
   155cc:	bne.n	155ee <_strtoll_l.constprop.0+0x15e>
   155ce:	mov.w	r8, #16
   155d2:	ldrb	r4, [r5, #1]
   155d4:	mov.w	r9, #0
   155d8:	adds	r5, #2
   155da:	mov	r7, r8
   155dc:	b.n	154e2 <_strtoll_l.constprop.0+0x52>
   155de:	mov	r6, r0
   155e0:	mov	fp, r1
   155e2:	b.n	15596 <_strtoll_l.constprop.0+0x106>
   155e4:	mov	r0, r6
   155e6:	mov	r1, fp
   155e8:	add	sp, #20
   155ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155ee:	mov.w	r8, #8
   155f2:	mov	r9, r7
   155f4:	mov	r7, r8
   155f6:	b.n	154e2 <_strtoll_l.constprop.0+0x52>
   155f8:	.word	0x20000825

000155fc <_strtoll_r>:
   155fc:	b.w	15490 <_strtoll_l.constprop.0>

00015600 <_strtoull_l.constprop.0>:
   15600:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15604:	sub	sp, #20
   15606:	mov	fp, r1
   15608:	str	r2, [sp, #4]
   1560a:	ldr	r2, [pc, #392]	; (15794 <_strtoull_l.constprop.0+0x194>)
   1560c:	str	r0, [sp, #12]
   1560e:	mov	r6, r3
   15610:	mov	r5, r1
   15612:	mov	r1, r5
   15614:	ldrb.w	r4, [r5], #1
   15618:	ldrb	r3, [r2, r4]
   1561a:	ands.w	r3, r3, #8
   1561e:	bne.n	15612 <_strtoull_l.constprop.0+0x12>
   15620:	cmp	r4, #45	; 0x2d
   15622:	beq.w	1572a <_strtoull_l.constprop.0+0x12a>
   15626:	cmp	r4, #43	; 0x2b
   15628:	ittte	eq
   1562a:	ldrbeq	r4, [r5, #0]
   1562c:	streq	r3, [sp, #8]
   1562e:	addeq	r5, r1, #2
   15630:	strne	r3, [sp, #8]
   15632:	cbz	r6, 15664 <_strtoull_l.constprop.0+0x64>
   15634:	cmp	r6, #16
   15636:	beq.n	15734 <_strtoull_l.constprop.0+0x134>
   15638:	mov.w	sl, r6, asr #31
   1563c:	mov	r2, r6
   1563e:	mov	r3, sl
   15640:	mov.w	r0, #4294967295
   15644:	mov.w	r1, #4294967295
   15648:	bl	cc6c <__aeabi_uldivmod>
   1564c:	mov	r2, r6
   1564e:	mov	r7, r0
   15650:	mov	r8, r1
   15652:	mov	r3, sl
   15654:	mov.w	r0, #4294967295
   15658:	mov.w	r1, #4294967295
   1565c:	mov	r9, r6
   1565e:	bl	cc6c <__aeabi_uldivmod>
   15662:	b.n	1567a <_strtoull_l.constprop.0+0x7a>
   15664:	cmp	r4, #48	; 0x30
   15666:	beq.n	1575c <_strtoull_l.constprop.0+0x15c>
   15668:	mov.w	r9, #10
   1566c:	ldr.w	r8, [pc, #296]	; 15798 <_strtoull_l.constprop.0+0x198>
   15670:	mov	sl, r6
   15672:	movs	r2, #5
   15674:	mov.w	r7, #2576980377	; 0x99999999
   15678:	mov	r6, r9
   1567a:	mov.w	ip, #0
   1567e:	mov	r0, ip
   15680:	mov	r1, ip
   15682:	b.n	156a8 <_strtoull_l.constprop.0+0xa8>
   15684:	cmp	r1, r8
   15686:	it	eq
   15688:	cmpeq	r0, r7
   1568a:	beq.n	1570a <_strtoull_l.constprop.0+0x10a>
   1568c:	mul.w	r4, r0, sl
   15690:	mla	r1, r9, r1, r4
   15694:	umull	r0, r4, r0, r9
   15698:	add	r1, r4
   1569a:	adds	r0, r3, r0
   1569c:	adc.w	r1, r1, r3, asr #31
   156a0:	mov.w	ip, #1
   156a4:	ldrb.w	r4, [r5], #1
   156a8:	sub.w	r3, r4, #48	; 0x30
   156ac:	cmp	r3, #9
   156ae:	bls.n	156bc <_strtoull_l.constprop.0+0xbc>
   156b0:	sub.w	r3, r4, #65	; 0x41
   156b4:	cmp	r3, #25
   156b6:	bhi.n	156d4 <_strtoull_l.constprop.0+0xd4>
   156b8:	sub.w	r3, r4, #55	; 0x37
   156bc:	cmp	r6, r3
   156be:	ble.n	156e4 <_strtoull_l.constprop.0+0xe4>
   156c0:	cmp.w	ip, #4294967295
   156c4:	beq.n	156a4 <_strtoull_l.constprop.0+0xa4>
   156c6:	cmp	r7, r0
   156c8:	sbcs.w	r4, r8, r1
   156cc:	bcs.n	15684 <_strtoull_l.constprop.0+0x84>
   156ce:	mov.w	ip, #4294967295
   156d2:	b.n	156a4 <_strtoull_l.constprop.0+0xa4>
   156d4:	sub.w	r3, r4, #97	; 0x61
   156d8:	cmp	r3, #25
   156da:	bhi.n	156e4 <_strtoull_l.constprop.0+0xe4>
   156dc:	sub.w	r3, r4, #87	; 0x57
   156e0:	cmp	r6, r3
   156e2:	bgt.n	156c0 <_strtoull_l.constprop.0+0xc0>
   156e4:	cmp.w	ip, #4294967295
   156e8:	beq.n	15714 <_strtoull_l.constprop.0+0x114>
   156ea:	ldr	r3, [sp, #8]
   156ec:	cbz	r3, 156f4 <_strtoull_l.constprop.0+0xf4>
   156ee:	negs	r0, r0
   156f0:	sbc.w	r1, r1, r1, lsl #1
   156f4:	ldr	r3, [sp, #4]
   156f6:	cbz	r3, 15704 <_strtoull_l.constprop.0+0x104>
   156f8:	cmp.w	ip, #0
   156fc:	bne.n	15724 <_strtoull_l.constprop.0+0x124>
   156fe:	ldr	r3, [sp, #4]
   15700:	str.w	fp, [r3]
   15704:	add	sp, #20
   15706:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1570a:	cmp	r3, r2
   1570c:	ble.n	1568c <_strtoull_l.constprop.0+0x8c>
   1570e:	mov.w	ip, #4294967295
   15712:	b.n	156a4 <_strtoull_l.constprop.0+0xa4>
   15714:	ldr	r2, [sp, #12]
   15716:	movs	r3, #34	; 0x22
   15718:	str	r3, [r2, #0]
   1571a:	ldr	r3, [sp, #4]
   1571c:	mov	r0, ip
   1571e:	mov	r1, ip
   15720:	cmp	r3, #0
   15722:	beq.n	15704 <_strtoull_l.constprop.0+0x104>
   15724:	add.w	fp, r5, #4294967295
   15728:	b.n	156fe <_strtoull_l.constprop.0+0xfe>
   1572a:	movs	r3, #1
   1572c:	ldrb	r4, [r5, #0]
   1572e:	str	r3, [sp, #8]
   15730:	adds	r5, r1, #2
   15732:	b.n	15632 <_strtoull_l.constprop.0+0x32>
   15734:	cmp	r4, #48	; 0x30
   15736:	bne.n	15780 <_strtoull_l.constprop.0+0x180>
   15738:	ldrb	r3, [r5, #0]
   1573a:	and.w	r3, r3, #223	; 0xdf
   1573e:	cmp	r3, #88	; 0x58
   15740:	bne.n	1577a <_strtoull_l.constprop.0+0x17a>
   15742:	mov.w	r9, #16
   15746:	ldrb	r4, [r5, #1]
   15748:	movs	r2, #15
   1574a:	adds	r5, #2
   1574c:	mov.w	r7, #4294967295
   15750:	mvn.w	r8, #4026531840	; 0xf0000000
   15754:	mov.w	sl, #0
   15758:	mov	r6, r9
   1575a:	b.n	1567a <_strtoull_l.constprop.0+0x7a>
   1575c:	ldrb	r3, [r5, #0]
   1575e:	and.w	r3, r3, #223	; 0xdf
   15762:	cmp	r3, #88	; 0x58
   15764:	beq.n	15742 <_strtoull_l.constprop.0+0x142>
   15766:	mov.w	r9, #8
   1576a:	mov	sl, r6
   1576c:	movs	r2, #7
   1576e:	mov.w	r7, #4294967295
   15772:	mvn.w	r8, #3758096384	; 0xe0000000
   15776:	mov	r6, r9
   15778:	b.n	1567a <_strtoull_l.constprop.0+0x7a>
   1577a:	mov.w	sl, #0
   1577e:	b.n	1563c <_strtoull_l.constprop.0+0x3c>
   15780:	movs	r2, #15
   15782:	mov.w	r7, #4294967295
   15786:	mvn.w	r8, #4026531840	; 0xf0000000
   1578a:	mov	r9, r6
   1578c:	mov.w	sl, #0
   15790:	b.n	1567a <_strtoull_l.constprop.0+0x7a>
   15792:	nop
   15794:	.word	0x20000825
   15798:	.word	0x19999999

0001579c <_strtoull_r>:
   1579c:	b.w	15600 <_strtoull_l.constprop.0>

000157a0 <_mbrtowc_r>:
   157a0:	push	{r4, r5, r6, lr}
   157a2:	sub	sp, #8
   157a4:	mov	r4, r0
   157a6:	ldr	r5, [sp, #24]
   157a8:	cbz	r5, 157c0 <_mbrtowc_r+0x20>
   157aa:	cbz	r2, 157c8 <_mbrtowc_r+0x28>
   157ac:	ldr	r0, [pc, #60]	; (157ec <_mbrtowc_r+0x4c>)
   157ae:	str	r5, [sp, #0]
   157b0:	ldr.w	r6, [r0, #228]	; 0xe4
   157b4:	mov	r0, r4
   157b6:	blx	r6
   157b8:	adds	r3, r0, #1
   157ba:	beq.n	157de <_mbrtowc_r+0x3e>
   157bc:	add	sp, #8
   157be:	pop	{r4, r5, r6, pc}
   157c0:	add.w	r5, r0, #244	; 0xf4
   157c4:	cmp	r2, #0
   157c6:	bne.n	157ac <_mbrtowc_r+0xc>
   157c8:	ldr	r3, [pc, #32]	; (157ec <_mbrtowc_r+0x4c>)
   157ca:	str	r5, [sp, #0]
   157cc:	ldr.w	r6, [r3, #228]	; 0xe4
   157d0:	mov	r1, r2
   157d2:	movs	r3, #1
   157d4:	ldr	r2, [pc, #24]	; (157f0 <_mbrtowc_r+0x50>)
   157d6:	mov	r0, r4
   157d8:	blx	r6
   157da:	adds	r3, r0, #1
   157dc:	bne.n	157bc <_mbrtowc_r+0x1c>
   157de:	movs	r2, #0
   157e0:	movs	r3, #138	; 0x8a
   157e2:	str	r2, [r5, #0]
   157e4:	str	r3, [r4, #0]
   157e6:	add	sp, #8
   157e8:	pop	{r4, r5, r6, pc}
   157ea:	nop
   157ec:	.word	0x20008e44
   157f0:	.word	0x20000614

000157f4 <_wcrtomb_r>:
   157f4:	push	{r4, r5, r6, lr}
   157f6:	mov	r5, r0
   157f8:	sub	sp, #16
   157fa:	cbz	r3, 15814 <_wcrtomb_r+0x20>
   157fc:	mov	r4, r3
   157fe:	cbz	r1, 1581c <_wcrtomb_r+0x28>
   15800:	ldr	r3, [pc, #56]	; (1583c <_wcrtomb_r+0x48>)
   15802:	mov	r0, r5
   15804:	ldr.w	r6, [r3, #224]	; 0xe0
   15808:	mov	r3, r4
   1580a:	blx	r6
   1580c:	adds	r3, r0, #1
   1580e:	beq.n	15830 <_wcrtomb_r+0x3c>
   15810:	add	sp, #16
   15812:	pop	{r4, r5, r6, pc}
   15814:	add.w	r4, r0, #260	; 0x104
   15818:	cmp	r1, #0
   1581a:	bne.n	15800 <_wcrtomb_r+0xc>
   1581c:	ldr	r2, [pc, #28]	; (1583c <_wcrtomb_r+0x48>)
   1581e:	mov	r3, r4
   15820:	ldr.w	r6, [r2, #224]	; 0xe0
   15824:	mov	r0, r5
   15826:	mov	r2, r1
   15828:	add	r1, sp, #4
   1582a:	blx	r6
   1582c:	adds	r3, r0, #1
   1582e:	bne.n	15810 <_wcrtomb_r+0x1c>
   15830:	movs	r2, #0
   15832:	movs	r3, #138	; 0x8a
   15834:	str	r2, [r4, #0]
   15836:	str	r3, [r5, #0]
   15838:	add	sp, #16
   1583a:	pop	{r4, r5, r6, pc}
   1583c:	.word	0x20008e44

00015840 <_wcsrtombs_r>:
   15840:	push	{r4, lr}
   15842:	sub	sp, #8
   15844:	ldr	r4, [sp, #16]
   15846:	strd	r3, r4, [sp]
   1584a:	mov.w	r3, #4294967295
   1584e:	bl	17390 <_wcsnrtombs_r>
   15852:	add	sp, #8
   15854:	pop	{r4, pc}
   15856:	nop

00015858 <iswspace>:
   15858:	movs	r1, #0
   1585a:	b.w	15860 <iswspace_l>
   1585e:	nop

00015860 <iswspace_l>:
   15860:	push	{r4, lr}
   15862:	bl	159bc <_jp2uc_l>
   15866:	mov	r4, r0
   15868:	bl	173b4 <category>
   1586c:	sub.w	r3, r0, #26
   15870:	uxtb	r3, r3
   15872:	cmp	r3, #2
   15874:	bls.n	15884 <iswspace_l+0x24>
   15876:	sub.w	r0, r4, #9
   1587a:	cmp	r0, #4
   1587c:	ite	hi
   1587e:	movhi	r0, #0
   15880:	movls	r0, #1
   15882:	pop	{r4, pc}
   15884:	movs	r0, #1
   15886:	pop	{r4, pc}

00015888 <__jp2uc>:
   15888:	cmp	r1, #2
   1588a:	beq.n	158f2 <__jp2uc+0x6a>
   1588c:	cmp	r1, #3
   1588e:	ubfx	r3, r0, #8, #8
   15892:	ittte	ne
   15894:	subne.w	r2, r0, #128	; 0x80
   15898:	eorne.w	r3, r3, #128	; 0x80
   1589c:	uxtbne	r2, r2
   1589e:	uxtbeq	r2, r0
   158a0:	add.w	r1, r3, #80	; 0x50
   158a4:	uxtb	r1, r1
   158a6:	cmp	r1, #31
   158a8:	bhi.n	158b8 <__jp2uc+0x30>
   158aa:	movw	r1, #53203	; 0xcfd3
   158ae:	cmp	r0, r1
   158b0:	bls.n	15986 <__jp2uc+0xfe>
   158b2:	mov.w	r0, #4294967295
   158b6:	bx	lr
   158b8:	add.w	r1, r3, #48	; 0x30
   158bc:	uxtb	r1, r1
   158be:	cmp	r1, #36	; 0x24
   158c0:	bhi.n	158e0 <__jp2uc+0x58>
   158c2:	movw	r1, #62630	; 0xf4a6
   158c6:	cmp	r0, r1
   158c8:	bhi.n	158b2 <__jp2uc+0x2a>
   158ca:	subs	r3, #208	; 0xd0
   158cc:	rsb	r3, r3, r3, lsl #7
   158d0:	sub.w	r0, r2, #161	; 0xa1
   158d4:	add.w	r0, r0, r3, lsl #1
   158d8:	ldr	r2, [pc, #192]	; (1599c <__jp2uc+0x114>)
   158da:	ldrh.w	r0, [r2, r0, lsl #1]
   158de:	bx	lr
   158e0:	subs	r3, #161	; 0xa1
   158e2:	cmp	r3, #7
   158e4:	bhi.n	158b2 <__jp2uc+0x2a>
   158e6:	tbb	[pc, r3]
   158ea:	.short	0x3e48
   158ec:	.word	0x25292e34
   158f0:	.short	0x1921
   158f2:	uxtb	r2, r0
   158f4:	cmp	r2, #158	; 0x9e
   158f6:	ubfx	r1, r0, #8, #8
   158fa:	bls.n	15914 <__jp2uc+0x8c>
   158fc:	adds	r2, #35	; 0x23
   158fe:	uxtb	r2, r2
   15900:	movs	r3, #128	; 0x80
   15902:	cmp	r1, #159	; 0x9f
   15904:	ite	ls
   15906:	subls	r1, #112	; 0x70
   15908:	addhi	r1, #80	; 0x50
   1590a:	add.w	r3, r3, r1, lsl #1
   1590e:	and.w	r3, r3, #255	; 0xff
   15912:	b.n	158a0 <__jp2uc+0x18>
   15914:	subs	r2, #126	; 0x7e
   15916:	uxtb	r2, r2
   15918:	movs	r3, #127	; 0x7f
   1591a:	b.n	15902 <__jp2uc+0x7a>
   1591c:	cmp	r2, #192	; 0xc0
   1591e:	bhi.n	158b2 <__jp2uc+0x2a>
   15920:	ldr	r3, [pc, #124]	; (159a0 <__jp2uc+0x118>)
   15922:	sub.w	r0, r2, #161	; 0xa1
   15926:	ldrh.w	r0, [r3, r0, lsl #1]
   1592a:	bx	lr
   1592c:	cmp	r2, #241	; 0xf1
   1592e:	bhi.n	158b2 <__jp2uc+0x2a>
   15930:	ldr	r3, [pc, #112]	; (159a4 <__jp2uc+0x11c>)
   15932:	b.n	15968 <__jp2uc+0xe0>
   15934:	cmp	r2, #216	; 0xd8
   15936:	bhi.n	158b2 <__jp2uc+0x2a>
   15938:	ldr	r3, [pc, #108]	; (159a8 <__jp2uc+0x120>)
   1593a:	b.n	15968 <__jp2uc+0xe0>
   1593c:	cmp	r2, #246	; 0xf6
   1593e:	bhi.n	158b2 <__jp2uc+0x2a>
   15940:	add.w	r0, r2, #12288	; 0x3000
   15944:	bx	lr
   15946:	cmp	r2, #243	; 0xf3
   15948:	bhi.n	158b2 <__jp2uc+0x2a>
   1594a:	add.w	r0, r2, #12160	; 0x2f80
   1594e:	adds	r0, #32
   15950:	bx	lr
   15952:	ldr	r3, [pc, #88]	; (159ac <__jp2uc+0x124>)
   15954:	add	r3, r2
   15956:	ldrb.w	r3, [r3, #-161]
   1595a:	cmp	r3, #0
   1595c:	beq.n	158b2 <__jp2uc+0x2a>
   1595e:	add.w	r0, r2, #65024	; 0xfe00
   15962:	adds	r0, #96	; 0x60
   15964:	bx	lr
   15966:	ldr	r3, [pc, #72]	; (159b0 <__jp2uc+0x128>)
   15968:	sub.w	r0, r2, #161	; 0xa1
   1596c:	ldrh.w	r0, [r3, r0, lsl #1]
   15970:	cmp	r0, #0
   15972:	it	eq
   15974:	moveq.w	r0, #4294967295
   15978:	bx	lr
   1597a:	ldr	r3, [pc, #56]	; (159b4 <__jp2uc+0x12c>)
   1597c:	sub.w	r0, r2, #161	; 0xa1
   15980:	ldrh.w	r0, [r3, r0, lsl #1]
   15984:	bx	lr
   15986:	subs	r3, #176	; 0xb0
   15988:	rsb	r3, r3, r3, lsl #7
   1598c:	sub.w	r0, r2, #161	; 0xa1
   15990:	add.w	r0, r0, r3, lsl #1
   15994:	ldr	r2, [pc, #32]	; (159b8 <__jp2uc+0x130>)
   15996:	ldrh.w	r0, [r2, r0, lsl #1]
   1599a:	bx	lr
   1599c:	.word	0x200059c0
   159a0:	.word	0x20000ce8
   159a4:	.word	0x20000c44
   159a8:	.word	0x20000bd4
   159ac:	.word	0x20000b78
   159b0:	.word	0x20000abc
   159b4:	.word	0x20000a00
   159b8:	.word	0x20000d28

000159bc <_jp2uc_l>:
   159bc:	push	{r3, r4, r5, lr}
   159be:	mov	r5, r0
   159c0:	cbz	r1, 159f2 <_jp2uc_l+0x36>
   159c2:	add.w	r4, r1, #298	; 0x12a
   159c6:	ldr	r1, [pc, #72]	; (15a10 <_jp2uc_l+0x54>)
   159c8:	mov	r0, r4
   159ca:	bl	f148 <strcmp>
   159ce:	cbnz	r0, 159dc <_jp2uc_l+0x20>
   159d0:	mov	r0, r5
   159d2:	movs	r1, #1
   159d4:	ldmia.w	sp!, {r3, r4, r5, lr}
   159d8:	b.w	15888 <__jp2uc>
   159dc:	ldr	r1, [pc, #52]	; (15a14 <_jp2uc_l+0x58>)
   159de:	mov	r0, r4
   159e0:	bl	f148 <strcmp>
   159e4:	cbnz	r0, 159f6 <_jp2uc_l+0x3a>
   159e6:	mov	r0, r5
   159e8:	movs	r1, #2
   159ea:	ldmia.w	sp!, {r3, r4, r5, lr}
   159ee:	b.w	15888 <__jp2uc>
   159f2:	ldr	r4, [pc, #36]	; (15a18 <_jp2uc_l+0x5c>)
   159f4:	b.n	159c6 <_jp2uc_l+0xa>
   159f6:	ldr	r1, [pc, #36]	; (15a1c <_jp2uc_l+0x60>)
   159f8:	mov	r0, r4
   159fa:	bl	f148 <strcmp>
   159fe:	cbnz	r0, 15a0c <_jp2uc_l+0x50>
   15a00:	mov	r0, r5
   15a02:	movs	r1, #3
   15a04:	ldmia.w	sp!, {r3, r4, r5, lr}
   15a08:	b.w	15888 <__jp2uc>
   15a0c:	mov	r0, r5
   15a0e:	pop	{r3, r4, r5, pc}
   15a10:	.word	0x20000994
   15a14:	.word	0x20000998
   15a18:	.word	0x20008f6e
   15a1c:	.word	0x200009a0

00015a20 <fiprintf>:
   15a20:	push	{r1, r2, r3}
   15a22:	push	{r4, lr}
   15a24:	sub	sp, #12
   15a26:	add	r3, sp, #20
   15a28:	ldr	r4, [pc, #24]	; (15a44 <fiprintf+0x24>)
   15a2a:	ldr.w	r2, [r3], #4
   15a2e:	str	r3, [sp, #4]
   15a30:	mov	r1, r0
   15a32:	ldr	r0, [r4, #0]
   15a34:	bl	15d30 <_vfiprintf_r>
   15a38:	add	sp, #12
   15a3a:	ldmia.w	sp!, {r4, lr}
   15a3e:	add	sp, #12
   15a40:	bx	lr
   15a42:	nop
   15a44:	.word	0x200093cc

00015a48 <__ssprint_r>:
   15a48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a4c:	ldr	r3, [r2, #8]
   15a4e:	ldr	r7, [r2, #0]
   15a50:	sub	sp, #12
   15a52:	mov	sl, r2
   15a54:	cmp	r3, #0
   15a56:	beq.n	15b3a <__ssprint_r+0xf2>
   15a58:	mov	r9, r0
   15a5a:	ldr	r2, [r1, #8]
   15a5c:	ldr	r0, [r1, #0]
   15a5e:	mov	r4, r1
   15a60:	adds	r7, #8
   15a62:	b.n	15aec <__ssprint_r+0xa4>
   15a64:	ldrh	r3, [r4, #12]
   15a66:	tst.w	r3, #1152	; 0x480
   15a6a:	beq.n	15aca <__ssprint_r+0x82>
   15a6c:	ldrd	r1, r6, [r4, #16]
   15a70:	sub.w	r8, r0, r1
   15a74:	add.w	r6, r6, r6, lsl #1
   15a78:	add.w	r6, r6, r6, lsr #31
   15a7c:	add.w	r0, r8, #1
   15a80:	asrs	r6, r6, #1
   15a82:	add	r0, r5
   15a84:	cmp	r0, r6
   15a86:	mov	r2, r6
   15a88:	itt	hi
   15a8a:	movhi	r6, r0
   15a8c:	movhi	r2, r6
   15a8e:	lsls	r3, r3, #21
   15a90:	bpl.n	15b02 <__ssprint_r+0xba>
   15a92:	mov	r1, r2
   15a94:	mov	r0, r9
   15a96:	bl	cf88 <_malloc_r>
   15a9a:	str	r0, [sp, #4]
   15a9c:	cmp	r0, #0
   15a9e:	beq.n	15b16 <__ssprint_r+0xce>
   15aa0:	mov	r2, r8
   15aa2:	ldr	r1, [r4, #16]
   15aa4:	bl	a56c <memcpy>
   15aa8:	ldrh	r2, [r4, #12]
   15aaa:	ldr	r3, [sp, #4]
   15aac:	bic.w	r2, r2, #1152	; 0x480
   15ab0:	orr.w	r2, r2, #128	; 0x80
   15ab4:	strh	r2, [r4, #12]
   15ab6:	sub.w	r2, r6, r8
   15aba:	add.w	r0, r3, r8
   15abe:	str	r6, [r4, #20]
   15ac0:	str	r2, [r4, #8]
   15ac2:	str	r3, [r4, #16]
   15ac4:	str	r0, [r4, #0]
   15ac6:	mov	r6, r5
   15ac8:	mov	r8, r5
   15aca:	mov	r2, r8
   15acc:	mov	r1, fp
   15ace:	bl	ed70 <memmove>
   15ad2:	ldr.w	r3, [sl, #8]
   15ad6:	ldr	r2, [r4, #8]
   15ad8:	ldr	r0, [r4, #0]
   15ada:	subs	r2, r2, r6
   15adc:	add	r0, r8
   15ade:	subs	r3, r3, r5
   15ae0:	str	r2, [r4, #8]
   15ae2:	str	r0, [r4, #0]
   15ae4:	str.w	r3, [sl, #8]
   15ae8:	cbz	r3, 15b3a <__ssprint_r+0xf2>
   15aea:	adds	r7, #8
   15aec:	ldrd	fp, r5, [r7, #-8]
   15af0:	cmp	r5, #0
   15af2:	beq.n	15aea <__ssprint_r+0xa2>
   15af4:	cmp	r2, r5
   15af6:	mov	r6, r2
   15af8:	mov	r8, r2
   15afa:	bls.n	15a64 <__ssprint_r+0x1c>
   15afc:	mov	r6, r5
   15afe:	mov	r8, r5
   15b00:	b.n	15aca <__ssprint_r+0x82>
   15b02:	mov	r0, r9
   15b04:	bl	d518 <_realloc_r>
   15b08:	mov	r3, r0
   15b0a:	cmp	r0, #0
   15b0c:	bne.n	15ab6 <__ssprint_r+0x6e>
   15b0e:	ldr	r1, [r4, #16]
   15b10:	mov	r0, r9
   15b12:	bl	f7a4 <_free_r>
   15b16:	ldrh	r3, [r4, #12]
   15b18:	movs	r2, #12
   15b1a:	orr.w	r3, r3, #64	; 0x40
   15b1e:	str.w	r2, [r9]
   15b22:	mov.w	r0, #4294967295
   15b26:	strh	r3, [r4, #12]
   15b28:	movs	r2, #0
   15b2a:	movs	r3, #0
   15b2c:	str.w	r2, [sl, #8]
   15b30:	str.w	r3, [sl, #4]
   15b34:	add	sp, #12
   15b36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b3a:	movs	r0, #0
   15b3c:	movs	r3, #0
   15b3e:	str.w	r3, [sl, #4]
   15b42:	add	sp, #12
   15b44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015b48 <_sungetc_r>:
   15b48:	push	{r3, r4, r5, lr}
   15b4a:	adds	r3, r1, #1
   15b4c:	beq.n	15b84 <_sungetc_r+0x3c>
   15b4e:	ldrh	r3, [r2, #12]
   15b50:	mov	r4, r2
   15b52:	ldr	r2, [r2, #48]	; 0x30
   15b54:	bic.w	r3, r3, #32
   15b58:	strh	r3, [r4, #12]
   15b5a:	uxtb	r5, r1
   15b5c:	cbz	r2, 15b8a <_sungetc_r+0x42>
   15b5e:	ldr	r2, [r4, #4]
   15b60:	ldr	r3, [r4, #52]	; 0x34
   15b62:	cmp	r2, r3
   15b64:	bge.n	15b7a <_sungetc_r+0x32>
   15b66:	ldr	r3, [r4, #0]
   15b68:	subs	r2, r3, #1
   15b6a:	str	r2, [r4, #0]
   15b6c:	strb.w	r5, [r3, #-1]
   15b70:	ldr	r3, [r4, #4]
   15b72:	adds	r3, #1
   15b74:	str	r3, [r4, #4]
   15b76:	mov	r0, r5
   15b78:	pop	{r3, r4, r5, pc}
   15b7a:	mov	r1, r4
   15b7c:	bl	17030 <__submore>
   15b80:	cmp	r0, #0
   15b82:	beq.n	15b66 <_sungetc_r+0x1e>
   15b84:	mov.w	r5, #4294967295
   15b88:	b.n	15b76 <_sungetc_r+0x2e>
   15b8a:	ldr	r3, [r4, #16]
   15b8c:	ldr	r2, [r4, #0]
   15b8e:	cbz	r3, 15b9c <_sungetc_r+0x54>
   15b90:	cmp	r3, r2
   15b92:	bcs.n	15b9c <_sungetc_r+0x54>
   15b94:	ldrb.w	r3, [r2, #-1]
   15b98:	cmp	r3, r5
   15b9a:	beq.n	15bbc <_sungetc_r+0x74>
   15b9c:	ldr	r1, [r4, #4]
   15b9e:	str	r1, [r4, #60]	; 0x3c
   15ba0:	mov	r3, r4
   15ba2:	str	r2, [r4, #56]	; 0x38
   15ba4:	add.w	r1, r4, #64	; 0x40
   15ba8:	movs	r2, #3
   15baa:	str	r2, [r4, #52]	; 0x34
   15bac:	str	r1, [r4, #48]	; 0x30
   15bae:	strb.w	r5, [r3, #66]!
   15bb2:	movs	r2, #1
   15bb4:	strd	r3, r2, [r4]
   15bb8:	mov	r0, r5
   15bba:	pop	{r3, r4, r5, pc}
   15bbc:	ldr	r3, [r4, #4]
   15bbe:	subs	r2, #1
   15bc0:	adds	r3, #1
   15bc2:	strd	r2, r3, [r4]
   15bc6:	b.n	15b76 <_sungetc_r+0x2e>

00015bc8 <__ssrefill_r>:
   15bc8:	push	{r4, lr}
   15bca:	mov	r4, r1
   15bcc:	ldr	r1, [r1, #48]	; 0x30
   15bce:	cbz	r1, 15bec <__ssrefill_r+0x24>
   15bd0:	add.w	r3, r4, #64	; 0x40
   15bd4:	cmp	r1, r3
   15bd6:	beq.n	15bdc <__ssrefill_r+0x14>
   15bd8:	bl	f7a4 <_free_r>
   15bdc:	ldr	r3, [r4, #60]	; 0x3c
   15bde:	str	r3, [r4, #4]
   15be0:	movs	r0, #0
   15be2:	str	r0, [r4, #48]	; 0x30
   15be4:	cbz	r3, 15bec <__ssrefill_r+0x24>
   15be6:	ldr	r3, [r4, #56]	; 0x38
   15be8:	str	r3, [r4, #0]
   15bea:	pop	{r4, pc}
   15bec:	ldrh	r3, [r4, #12]
   15bee:	ldr	r1, [r4, #16]
   15bf0:	movs	r2, #0
   15bf2:	orr.w	r3, r3, #32
   15bf6:	strd	r1, r2, [r4]
   15bfa:	strh	r3, [r4, #12]
   15bfc:	mov.w	r0, #4294967295
   15c00:	pop	{r4, pc}
   15c02:	nop

00015c04 <_sfread_r>:
   15c04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c08:	sub	sp, #20
   15c0a:	strd	r3, r2, [sp, #8]
   15c0e:	mul.w	r3, r2, r3
   15c12:	ldr	r4, [sp, #56]	; 0x38
   15c14:	str	r3, [sp, #4]
   15c16:	cbz	r3, 15c82 <_sfread_r+0x7e>
   15c18:	ldr.w	sl, [r4, #4]
   15c1c:	ldr	r3, [sp, #4]
   15c1e:	cmp	r3, sl
   15c20:	mov	fp, r1
   15c22:	bls.n	15cb2 <_sfread_r+0xae>
   15c24:	mov	r8, r4
   15c26:	ldr	r5, [sp, #4]
   15c28:	ldr.w	r1, [r8], #64
   15c2c:	mov	r7, r0
   15c2e:	movs	r6, #0
   15c30:	mov	r2, sl
   15c32:	mov	r0, fp
   15c34:	bl	a56c <memcpy>
   15c38:	ldr	r3, [r4, #0]
   15c3a:	ldr	r2, [r4, #48]	; 0x30
   15c3c:	add	r3, sl
   15c3e:	mov	r9, r5
   15c40:	strd	r3, r6, [r4]
   15c44:	mov	r1, r2
   15c46:	mov	r0, r7
   15c48:	add	fp, sl
   15c4a:	sub.w	r5, r5, sl
   15c4e:	cbz	r2, 15c8a <_sfread_r+0x86>
   15c50:	cmp	r2, r8
   15c52:	beq.n	15c58 <_sfread_r+0x54>
   15c54:	bl	f7a4 <_free_r>
   15c58:	ldr	r3, [r4, #60]	; 0x3c
   15c5a:	str	r6, [r4, #48]	; 0x30
   15c5c:	str	r3, [r4, #4]
   15c5e:	cbz	r3, 15c8a <_sfread_r+0x86>
   15c60:	ldr	r1, [r4, #56]	; 0x38
   15c62:	str	r1, [r4, #0]
   15c64:	cmp	r3, r5
   15c66:	mov	sl, r3
   15c68:	bcc.n	15c30 <_sfread_r+0x2c>
   15c6a:	ldr	r3, [sp, #8]
   15c6c:	str	r3, [sp, #4]
   15c6e:	mov	r2, r5
   15c70:	mov	r0, fp
   15c72:	bl	a56c <memcpy>
   15c76:	ldrd	r3, r2, [r4]
   15c7a:	subs	r2, r2, r5
   15c7c:	add	r3, r5
   15c7e:	strd	r3, r2, [r4]
   15c82:	ldr	r0, [sp, #4]
   15c84:	add	sp, #20
   15c86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c8a:	ldr	r2, [sp, #4]
   15c8c:	ldr	r3, [sp, #12]
   15c8e:	add	r2, sl
   15c90:	sub.w	r2, r2, r9
   15c94:	udiv	r3, r2, r3
   15c98:	str	r3, [sp, #4]
   15c9a:	ldrh	r3, [r4, #12]
   15c9c:	ldr	r2, [r4, #16]
   15c9e:	ldr	r0, [sp, #4]
   15ca0:	orr.w	r3, r3, #32
   15ca4:	strh	r3, [r4, #12]
   15ca6:	movs	r3, #0
   15ca8:	strd	r2, r3, [r4]
   15cac:	add	sp, #20
   15cae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cb2:	ldr	r1, [r4, #0]
   15cb4:	mov	r5, r3
   15cb6:	b.n	15c6a <_sfread_r+0x66>

00015cb8 <__sprint_r.part.0>:
   15cb8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cbc:	ldr	r3, [r1, #100]	; 0x64
   15cbe:	lsls	r4, r3, #18
   15cc0:	mov	r8, r2
   15cc2:	bpl.n	15d20 <__sprint_r.part.0+0x68>
   15cc4:	ldr	r3, [r2, #8]
   15cc6:	ldr	r2, [r2, #0]
   15cc8:	cbz	r3, 15d1c <__sprint_r.part.0+0x64>
   15cca:	mov	fp, r1
   15ccc:	mov	r6, r0
   15cce:	add.w	r9, r2, #8
   15cd2:	ldrd	r5, sl, [r9, #-8]
   15cd6:	movs.w	r7, sl, lsr #2
   15cda:	beq.n	15d08 <__sprint_r.part.0+0x50>
   15cdc:	subs	r5, #4
   15cde:	movs	r4, #0
   15ce0:	b.n	15ce6 <__sprint_r.part.0+0x2e>
   15ce2:	cmp	r7, r4
   15ce4:	beq.n	15d04 <__sprint_r.part.0+0x4c>
   15ce6:	ldr.w	r1, [r5, #4]!
   15cea:	mov	r2, fp
   15cec:	mov	r0, r6
   15cee:	bl	17220 <_fputwc_r>
   15cf2:	adds	r3, r0, #1
   15cf4:	add.w	r4, r4, #1
   15cf8:	bne.n	15ce2 <__sprint_r.part.0+0x2a>
   15cfa:	movs	r3, #0
   15cfc:	strd	r3, r3, [r8, #4]
   15d00:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d04:	ldr.w	r3, [r8, #8]
   15d08:	bic.w	sl, sl, #3
   15d0c:	sub.w	r3, r3, sl
   15d10:	str.w	r3, [r8, #8]
   15d14:	add.w	r9, r9, #8
   15d18:	cmp	r3, #0
   15d1a:	bne.n	15cd2 <__sprint_r.part.0+0x1a>
   15d1c:	movs	r0, #0
   15d1e:	b.n	15cfa <__sprint_r.part.0+0x42>
   15d20:	bl	16d3c <__sfvwrite_r>
   15d24:	movs	r3, #0
   15d26:	strd	r3, r3, [r8, #4]
   15d2a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d2e:	nop

00015d30 <_vfiprintf_r>:
   15d30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d34:	vpush	{d8}
   15d38:	sub	sp, #276	; 0x114
   15d3a:	add.w	sl, sp, #80	; 0x50
   15d3e:	mov	fp, r0
   15d40:	vmov	s16, r1
   15d44:	mov	r6, r2
   15d46:	movs	r1, #0
   15d48:	movs	r2, #8
   15d4a:	mov	r0, sl
   15d4c:	mov	r4, r3
   15d4e:	str	r3, [sp, #28]
   15d50:	bl	a528 <memset>
   15d54:	cmp.w	fp, #0
   15d58:	beq.n	15d64 <_vfiprintf_r+0x34>
   15d5a:	ldr.w	r3, [fp, #52]	; 0x34
   15d5e:	cmp	r3, #0
   15d60:	beq.w	16aa4 <_vfiprintf_r+0xd74>
   15d64:	vmov	r2, s16
   15d68:	ldr	r3, [r2, #100]	; 0x64
   15d6a:	lsls	r3, r3, #31
   15d6c:	bpl.w	16796 <_vfiprintf_r+0xa66>
   15d70:	ldrsh.w	r1, [r2, #12]
   15d74:	uxth	r2, r1
   15d76:	lsls	r5, r2, #18
   15d78:	bmi.n	15d92 <_vfiprintf_r+0x62>
   15d7a:	vmov	r3, s16
   15d7e:	orr.w	r1, r1, #8192	; 0x2000
   15d82:	strh	r1, [r3, #12]
   15d84:	ldr	r3, [r3, #100]	; 0x64
   15d86:	uxth	r2, r1
   15d88:	vmov	r1, s16
   15d8c:	bic.w	r3, r3, #8192	; 0x2000
   15d90:	str	r3, [r1, #100]	; 0x64
   15d92:	lsls	r0, r2, #28
   15d94:	bpl.w	15fa2 <_vfiprintf_r+0x272>
   15d98:	vmov	r3, s16
   15d9c:	ldr	r3, [r3, #16]
   15d9e:	cmp	r3, #0
   15da0:	beq.w	15fa2 <_vfiprintf_r+0x272>
   15da4:	and.w	r3, r2, #26
   15da8:	cmp	r3, #10
   15daa:	beq.w	15fc2 <_vfiprintf_r+0x292>
   15dae:	movs	r3, #0
   15db0:	strd	r3, r3, [sp, #100]	; 0x64
   15db4:	strd	r3, r3, [sp, #52]	; 0x34
   15db8:	add	r2, sp, #108	; 0x6c
   15dba:	str	r3, [sp, #48]	; 0x30
   15dbc:	str	r2, [sp, #96]	; 0x60
   15dbe:	mov	r9, r2
   15dc0:	str	r3, [sp, #44]	; 0x2c
   15dc2:	str	r3, [sp, #20]
   15dc4:	mov	r8, r6
   15dc6:	mov	r4, r8
   15dc8:	ldr	r3, [pc, #672]	; (1606c <_vfiprintf_r+0x33c>)
   15dca:	ldr.w	r5, [r3, #228]	; 0xe4
   15dce:	bl	f004 <__locale_mb_cur_max>
   15dd2:	mov	r2, r4
   15dd4:	mov	r3, r0
   15dd6:	add	r1, sp, #72	; 0x48
   15dd8:	str.w	sl, [sp]
   15ddc:	mov	r0, fp
   15dde:	blx	r5
   15de0:	cmp	r0, #0
   15de2:	beq.w	16070 <_vfiprintf_r+0x340>
   15de6:	blt.w	1605c <_vfiprintf_r+0x32c>
   15dea:	ldr	r2, [sp, #72]	; 0x48
   15dec:	cmp	r2, #37	; 0x25
   15dee:	mov	r3, r0
   15df0:	beq.n	15df6 <_vfiprintf_r+0xc6>
   15df2:	add	r4, r3
   15df4:	b.n	15dc8 <_vfiprintf_r+0x98>
   15df6:	subs.w	r6, r4, r8
   15dfa:	mov	r5, r0
   15dfc:	bne.w	16078 <_vfiprintf_r+0x348>
   15e00:	movs	r3, #0
   15e02:	ldrb	r1, [r4, #1]
   15e04:	strb.w	r3, [sp, #67]	; 0x43
   15e08:	add.w	r8, r4, #1
   15e0c:	str	r3, [sp, #24]
   15e0e:	mov.w	r7, #4294967295
   15e12:	mov	r6, r3
   15e14:	movs	r4, #43	; 0x2b
   15e16:	add.w	r8, r8, #1
   15e1a:	sub.w	r3, r1, #32
   15e1e:	cmp	r3, #90	; 0x5a
   15e20:	bhi.w	16114 <_vfiprintf_r+0x3e4>
   15e24:	tbh	[pc, r3, lsl #1]
   15e28:	.word	0x017602b5
   15e2c:	.word	0x02b00176
   15e30:	.word	0x01760176
   15e34:	.word	0x006a0176
   15e38:	.word	0x01760176
   15e3c:	.word	0x028d027d
   15e40:	.word	0x02880176
   15e44:	.word	0x01760297
   15e48:	.word	0x005b0292
   15e4c:	.word	0x005b005b
   15e50:	.word	0x005b005b
   15e54:	.word	0x005b005b
   15e58:	.word	0x005b005b
   15e5c:	.word	0x01760176
   15e60:	.word	0x01760176
   15e64:	.word	0x01760176
   15e68:	.word	0x01760176
   15e6c:	.word	0x025c0176
   15e70:	.word	0x01760084
   15e74:	.word	0x01760176
   15e78:	.word	0x01760176
   15e7c:	.word	0x01760176
   15e80:	.word	0x01760176
   15e84:	.word	0x00e80176
   15e88:	.word	0x01760176
   15e8c:	.word	0x02330176
   15e90:	.word	0x02da0176
   15e94:	.word	0x01760176
   15e98:	.word	0x0176058b
   15e9c:	.word	0x01760176
   15ea0:	.word	0x01760176
   15ea4:	.word	0x01760176
   15ea8:	.word	0x01760176
   15eac:	.word	0x025c0176
   15eb0:	.word	0x01760086
   15eb4:	.word	0x01760176
   15eb8:	.word	0x008602cd
   15ebc:	.word	0x0176007f
   15ec0:	.word	0x017602c0
   15ec4:	.word	0x00ea02fd
   15ec8:	.word	0x007f02ed
   15ecc:	.word	0x02330176
   15ed0:	.word	0x0569007c
   15ed4:	.word	0x01760176
   15ed8:	.word	0x0176056b
   15edc:	.short	0x007c
   15ede:	sub.w	r3, r1, #48	; 0x30
   15ee2:	movs	r2, #0
   15ee4:	ldrb.w	r1, [r8], #1
   15ee8:	add.w	r2, r2, r2, lsl #2
   15eec:	add.w	r2, r3, r2, lsl #1
   15ef0:	sub.w	r3, r1, #48	; 0x30
   15ef4:	cmp	r3, #9
   15ef6:	bls.n	15ee4 <_vfiprintf_r+0x1b4>
   15ef8:	str	r2, [sp, #24]
   15efa:	b.n	15e1a <_vfiprintf_r+0xea>
   15efc:	mov	r0, fp
   15efe:	bl	143fc <_localeconv_r>
   15f02:	ldr	r3, [r0, #4]
   15f04:	str	r3, [sp, #52]	; 0x34
   15f06:	mov	r0, r3
   15f08:	bl	f580 <strlen>
   15f0c:	str	r0, [sp, #56]	; 0x38
   15f0e:	mov	r5, r0
   15f10:	mov	r0, fp
   15f12:	bl	143fc <_localeconv_r>
   15f16:	ldr	r3, [r0, #8]
   15f18:	str	r3, [sp, #44]	; 0x2c
   15f1a:	cmp	r5, #0
   15f1c:	bne.w	168cc <_vfiprintf_r+0xb9c>
   15f20:	ldrb.w	r1, [r8]
   15f24:	b.n	15e16 <_vfiprintf_r+0xe6>
   15f26:	ldrb.w	r1, [r8]
   15f2a:	orr.w	r6, r6, #32
   15f2e:	b.n	15e16 <_vfiprintf_r+0xe6>
   15f30:	orr.w	r6, r6, #16
   15f34:	lsls	r4, r6, #26
   15f36:	bpl.w	16256 <_vfiprintf_r+0x526>
   15f3a:	ldr	r3, [sp, #28]
   15f3c:	adds	r3, #7
   15f3e:	bic.w	r3, r3, #7
   15f42:	mov	r2, r3
   15f44:	ldr	r1, [r3, #4]
   15f46:	ldr.w	r3, [r2], #8
   15f4a:	str	r2, [sp, #28]
   15f4c:	mov	r2, r1
   15f4e:	cmp	r1, #0
   15f50:	blt.w	16834 <_vfiprintf_r+0xb04>
   15f54:	adds	r1, r7, #1
   15f56:	beq.w	16a9e <_vfiprintf_r+0xd6e>
   15f5a:	bic.w	r1, r6, #128	; 0x80
   15f5e:	str	r1, [sp, #12]
   15f60:	orrs.w	r1, r3, r2
   15f64:	beq.w	167e6 <_vfiprintf_r+0xab6>
   15f68:	cmp	r3, #10
   15f6a:	sbcs.w	r1, r2, #0
   15f6e:	bcs.w	169f4 <_vfiprintf_r+0xcc4>
   15f72:	adds	r3, #48	; 0x30
   15f74:	strb.w	r3, [sp, #271]	; 0x10f
   15f78:	ldr	r6, [sp, #12]
   15f7a:	movs	r3, #1
   15f7c:	str	r3, [sp, #16]
   15f7e:	addw	r4, sp, #271	; 0x10f
   15f82:	ldr	r3, [sp, #16]
   15f84:	cmp	r3, r7
   15f86:	it	lt
   15f88:	movlt	r3, r7
   15f8a:	str	r3, [sp, #12]
   15f8c:	movs	r3, #0
   15f8e:	str	r3, [sp, #32]
   15f90:	ldrb.w	r3, [sp, #67]	; 0x43
   15f94:	cmp	r3, #0
   15f96:	beq.w	16130 <_vfiprintf_r+0x400>
   15f9a:	ldr	r3, [sp, #12]
   15f9c:	adds	r3, #1
   15f9e:	str	r3, [sp, #12]
   15fa0:	b.n	16130 <_vfiprintf_r+0x400>
   15fa2:	vmov	r1, s16
   15fa6:	mov	r0, fp
   15fa8:	vmov	r5, s16
   15fac:	bl	170a8 <__swsetup_r>
   15fb0:	cmp	r0, #0
   15fb2:	bne.w	16c5a <_vfiprintf_r+0xf2a>
   15fb6:	ldrh	r2, [r5, #12]
   15fb8:	and.w	r3, r2, #26
   15fbc:	cmp	r3, #10
   15fbe:	bne.w	15dae <_vfiprintf_r+0x7e>
   15fc2:	vmov	r1, s16
   15fc6:	ldrsh.w	r3, [r1, #14]
   15fca:	cmp	r3, #0
   15fcc:	blt.w	15dae <_vfiprintf_r+0x7e>
   15fd0:	ldr	r3, [r1, #100]	; 0x64
   15fd2:	lsls	r3, r3, #31
   15fd4:	bmi.n	15fdc <_vfiprintf_r+0x2ac>
   15fd6:	lsls	r7, r2, #22
   15fd8:	bpl.w	16c00 <_vfiprintf_r+0xed0>
   15fdc:	vmov	r1, s16
   15fe0:	mov	r3, r4
   15fe2:	mov	r2, r6
   15fe4:	mov	r0, fp
   15fe6:	bl	16cbc <__sbprintf>
   15fea:	str	r0, [sp, #20]
   15fec:	ldr	r0, [sp, #20]
   15fee:	add	sp, #276	; 0x114
   15ff0:	vpop	{d8}
   15ff4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ff8:	orr.w	r6, r6, #16
   15ffc:	ands.w	r2, r6, #32
   16000:	beq.w	16270 <_vfiprintf_r+0x540>
   16004:	ldr	r3, [sp, #28]
   16006:	adds	r3, #7
   16008:	bic.w	r3, r3, #7
   1600c:	mov	r1, r3
   1600e:	ldr	r2, [r3, #4]
   16010:	ldr.w	r3, [r1], #8
   16014:	str	r1, [sp, #28]
   16016:	bic.w	r1, r6, #1024	; 0x400
   1601a:	str	r1, [sp, #12]
   1601c:	movs	r1, #0
   1601e:	movs	r0, #0
   16020:	strb.w	r0, [sp, #67]	; 0x43
   16024:	adds	r0, r7, #1
   16026:	beq.w	1644a <_vfiprintf_r+0x71a>
   1602a:	ldr	r0, [sp, #12]
   1602c:	bic.w	r6, r0, #128	; 0x80
   16030:	orrs.w	r0, r3, r2
   16034:	bne.w	16448 <_vfiprintf_r+0x718>
   16038:	cmp	r7, #0
   1603a:	bne.w	16aae <_vfiprintf_r+0xd7e>
   1603e:	cmp	r1, #0
   16040:	bne.w	167ee <_vfiprintf_r+0xabe>
   16044:	ldr	r3, [sp, #12]
   16046:	ands.w	r3, r3, #1
   1604a:	str	r3, [sp, #16]
   1604c:	beq.w	16872 <_vfiprintf_r+0xb42>
   16050:	movs	r3, #48	; 0x30
   16052:	strb.w	r3, [sp, #271]	; 0x10f
   16056:	addw	r4, sp, #271	; 0x10f
   1605a:	b.n	15f82 <_vfiprintf_r+0x252>
   1605c:	movs	r2, #8
   1605e:	movs	r1, #0
   16060:	mov	r0, sl
   16062:	bl	a528 <memset>
   16066:	movs	r3, #1
   16068:	add	r4, r3
   1606a:	b.n	15dc8 <_vfiprintf_r+0x98>
   1606c:	.word	0x20008e44
   16070:	subs.w	r6, r4, r8
   16074:	mov	r5, r0
   16076:	beq.n	160b0 <_vfiprintf_r+0x380>
   16078:	ldr	r3, [sp, #100]	; 0x64
   1607a:	ldr	r2, [sp, #104]	; 0x68
   1607c:	adds	r3, #1
   1607e:	add	r2, r6
   16080:	cmp	r3, #7
   16082:	strd	r8, r6, [r9]
   16086:	str	r2, [sp, #104]	; 0x68
   16088:	str	r3, [sp, #100]	; 0x64
   1608a:	ble.n	160c6 <_vfiprintf_r+0x396>
   1608c:	cmp	r2, #0
   1608e:	beq.w	167de <_vfiprintf_r+0xaae>
   16092:	vmov	r1, s16
   16096:	add	r2, sp, #96	; 0x60
   16098:	mov	r0, fp
   1609a:	bl	15cb8 <__sprint_r.part.0>
   1609e:	cbnz	r0, 160ea <_vfiprintf_r+0x3ba>
   160a0:	add.w	r9, sp, #108	; 0x6c
   160a4:	ldr	r3, [sp, #20]
   160a6:	add	r3, r6
   160a8:	str	r3, [sp, #20]
   160aa:	cmp	r5, #0
   160ac:	bne.w	15e00 <_vfiprintf_r+0xd0>
   160b0:	ldr	r3, [sp, #104]	; 0x68
   160b2:	cmp	r3, #0
   160b4:	bne.w	16c3a <_vfiprintf_r+0xf0a>
   160b8:	vmov	r3, s16
   160bc:	movs	r2, #0
   160be:	ldrsh.w	r3, [r3, #12]
   160c2:	str	r2, [sp, #100]	; 0x64
   160c4:	b.n	160f2 <_vfiprintf_r+0x3c2>
   160c6:	add.w	r9, r9, #8
   160ca:	b.n	160a4 <_vfiprintf_r+0x374>
   160cc:	vmov	r1, s16
   160d0:	add	r2, sp, #96	; 0x60
   160d2:	mov	r0, fp
   160d4:	bl	15cb8 <__sprint_r.part.0>
   160d8:	cmp	r0, #0
   160da:	beq.w	1622a <_vfiprintf_r+0x4fa>
   160de:	ldr	r3, [sp, #32]
   160e0:	cbz	r3, 160ea <_vfiprintf_r+0x3ba>
   160e2:	ldr	r1, [sp, #32]
   160e4:	mov	r0, fp
   160e6:	bl	f7a4 <_free_r>
   160ea:	vmov	r3, s16
   160ee:	ldrsh.w	r3, [r3, #12]
   160f2:	vmov	r2, s16
   160f6:	ldr	r2, [r2, #100]	; 0x64
   160f8:	tst.w	r2, #1
   160fc:	uxth	r2, r3
   160fe:	beq.w	16242 <_vfiprintf_r+0x512>
   16102:	lsls	r0, r2, #25
   16104:	bmi.w	16c6c <_vfiprintf_r+0xf3c>
   16108:	ldr	r0, [sp, #20]
   1610a:	add	sp, #276	; 0x114
   1610c:	vpop	{d8}
   16110:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16114:	cmp	r1, #0
   16116:	beq.n	160b0 <_vfiprintf_r+0x380>
   16118:	movs	r3, #0
   1611a:	strb.w	r3, [sp, #67]	; 0x43
   1611e:	movs	r3, #1
   16120:	strd	r3, r3, [sp, #12]
   16124:	strb.w	r1, [sp, #172]	; 0xac
   16128:	add	r4, sp, #172	; 0xac
   1612a:	movs	r3, #0
   1612c:	str	r3, [sp, #32]
   1612e:	mov	r7, r3
   16130:	ands.w	r3, r6, #2
   16134:	str	r3, [sp, #36]	; 0x24
   16136:	beq.n	1613e <_vfiprintf_r+0x40e>
   16138:	ldr	r3, [sp, #12]
   1613a:	adds	r3, #2
   1613c:	str	r3, [sp, #12]
   1613e:	ands.w	r3, r6, #132	; 0x84
   16142:	str	r3, [sp, #40]	; 0x28
   16144:	bne.n	16152 <_vfiprintf_r+0x422>
   16146:	ldr	r3, [sp, #24]
   16148:	ldr	r2, [sp, #12]
   1614a:	subs	r5, r3, r2
   1614c:	cmp	r5, #0
   1614e:	bgt.w	16648 <_vfiprintf_r+0x918>
   16152:	ldrd	r0, r3, [sp, #100]	; 0x64
   16156:	adds	r1, r0, #1
   16158:	ldrb.w	r2, [sp, #67]	; 0x43
   1615c:	cbz	r2, 16180 <_vfiprintf_r+0x450>
   1615e:	movs	r2, #1
   16160:	adds	r3, #1
   16162:	str.w	r2, [r9, #4]
   16166:	cmp	r1, #7
   16168:	add.w	r2, sp, #67	; 0x43
   1616c:	strd	r1, r3, [sp, #100]	; 0x64
   16170:	str.w	r2, [r9]
   16174:	bgt.w	1660c <_vfiprintf_r+0x8dc>
   16178:	mov	r0, r1
   1617a:	add.w	r9, r9, #8
   1617e:	adds	r1, #1
   16180:	ldr	r2, [sp, #36]	; 0x24
   16182:	cbz	r2, 161be <_vfiprintf_r+0x48e>
   16184:	add	r2, sp, #68	; 0x44
   16186:	adds	r3, #2
   16188:	str.w	r2, [r9]
   1618c:	cmp	r1, #7
   1618e:	mov.w	r2, #2
   16192:	strd	r1, r3, [sp, #100]	; 0x64
   16196:	str.w	r2, [r9, #4]
   1619a:	ble.w	1663e <_vfiprintf_r+0x90e>
   1619e:	cmp	r3, #0
   161a0:	beq.w	1682a <_vfiprintf_r+0xafa>
   161a4:	vmov	r1, s16
   161a8:	add	r2, sp, #96	; 0x60
   161aa:	mov	r0, fp
   161ac:	bl	15cb8 <__sprint_r.part.0>
   161b0:	cmp	r0, #0
   161b2:	bne.n	160de <_vfiprintf_r+0x3ae>
   161b4:	ldrd	r0, r3, [sp, #100]	; 0x64
   161b8:	add.w	r9, sp, #108	; 0x6c
   161bc:	adds	r1, r0, #1
   161be:	ldr	r2, [sp, #40]	; 0x28
   161c0:	cmp	r2, #128	; 0x80
   161c2:	beq.w	164ce <_vfiprintf_r+0x79e>
   161c6:	ldr	r2, [sp, #16]
   161c8:	subs	r5, r7, r2
   161ca:	cmp	r5, #0
   161cc:	bgt.w	1657e <_vfiprintf_r+0x84e>
   161d0:	ldr	r2, [sp, #16]
   161d2:	str.w	r4, [r9]
   161d6:	add	r3, r2
   161d8:	cmp	r1, #7
   161da:	strd	r1, r3, [sp, #100]	; 0x64
   161de:	str.w	r2, [r9, #4]
   161e2:	ble.w	164c2 <_vfiprintf_r+0x792>
   161e6:	cmp	r3, #0
   161e8:	beq.w	166d6 <_vfiprintf_r+0x9a6>
   161ec:	vmov	r1, s16
   161f0:	add	r2, sp, #96	; 0x60
   161f2:	mov	r0, fp
   161f4:	bl	15cb8 <__sprint_r.part.0>
   161f8:	cmp	r0, #0
   161fa:	bne.w	160de <_vfiprintf_r+0x3ae>
   161fe:	ldr	r3, [sp, #104]	; 0x68
   16200:	add.w	r9, sp, #108	; 0x6c
   16204:	lsls	r5, r6, #29
   16206:	bpl.n	16214 <_vfiprintf_r+0x4e4>
   16208:	ldr	r2, [sp, #24]
   1620a:	ldr	r1, [sp, #12]
   1620c:	subs	r4, r2, r1
   1620e:	cmp	r4, #0
   16210:	bgt.w	166ea <_vfiprintf_r+0x9ba>
   16214:	ldrd	r2, r1, [sp, #20]
   16218:	ldr	r0, [sp, #12]
   1621a:	cmp	r1, r0
   1621c:	ite	ge
   1621e:	addge	r2, r2, r1
   16220:	addlt	r2, r2, r0
   16222:	str	r2, [sp, #20]
   16224:	cmp	r3, #0
   16226:	bne.w	160cc <_vfiprintf_r+0x39c>
   1622a:	ldr	r1, [sp, #32]
   1622c:	movs	r3, #0
   1622e:	str	r3, [sp, #100]	; 0x64
   16230:	cmp	r1, #0
   16232:	beq.w	164c8 <_vfiprintf_r+0x798>
   16236:	mov	r0, fp
   16238:	bl	f7a4 <_free_r>
   1623c:	add.w	r9, sp, #108	; 0x6c
   16240:	b.n	15dc6 <_vfiprintf_r+0x96>
   16242:	lsls	r4, r3, #22
   16244:	bmi.w	16102 <_vfiprintf_r+0x3d2>
   16248:	vmov	r4, s16
   1624c:	ldr	r0, [r4, #88]	; 0x58
   1624e:	bl	f13c <__retarget_lock_release_recursive>
   16252:	ldrh	r2, [r4, #12]
   16254:	b.n	16102 <_vfiprintf_r+0x3d2>
   16256:	lsls	r0, r6, #27
   16258:	ldr	r2, [sp, #28]
   1625a:	bmi.w	1689c <_vfiprintf_r+0xb6c>
   1625e:	lsls	r1, r6, #25
   16260:	bpl.w	16896 <_vfiprintf_r+0xb66>
   16264:	ldrsh.w	r3, [r2], #4
   16268:	str	r2, [sp, #28]
   1626a:	asrs	r2, r3, #31
   1626c:	mov	r1, r2
   1626e:	b.n	15f4e <_vfiprintf_r+0x21e>
   16270:	ands.w	r3, r6, #16
   16274:	ldr	r1, [sp, #28]
   16276:	bne.w	1688c <_vfiprintf_r+0xb5c>
   1627a:	ands.w	r0, r6, #64	; 0x40
   1627e:	beq.w	16884 <_vfiprintf_r+0xb54>
   16282:	mov	r2, r3
   16284:	ldr.w	r3, [r1], #4
   16288:	str	r1, [sp, #28]
   1628a:	uxth	r3, r3
   1628c:	b.n	16016 <_vfiprintf_r+0x2e6>
   1628e:	ldr	r3, [sp, #28]
   16290:	mov	r2, r3
   16292:	movs	r3, #0
   16294:	strb.w	r3, [sp, #67]	; 0x43
   16298:	mov	r3, r2
   1629a:	ldr.w	r4, [r3], #4
   1629e:	str	r3, [sp, #12]
   162a0:	cmp	r4, #0
   162a2:	beq.w	16aca <_vfiprintf_r+0xd9a>
   162a6:	cmp	r1, #83	; 0x53
   162a8:	beq.w	16976 <_vfiprintf_r+0xc46>
   162ac:	ands.w	r5, r6, #16
   162b0:	bne.w	16976 <_vfiprintf_r+0xc46>
   162b4:	adds	r3, r7, #1
   162b6:	beq.w	16c20 <_vfiprintf_r+0xef0>
   162ba:	mov	r2, r7
   162bc:	mov	r1, r5
   162be:	mov	r0, r4
   162c0:	bl	f4e0 <memchr>
   162c4:	str	r0, [sp, #32]
   162c6:	cmp	r0, #0
   162c8:	beq.w	16c0a <_vfiprintf_r+0xeda>
   162cc:	subs	r3, r0, r4
   162ce:	ldr	r2, [sp, #12]
   162d0:	str	r3, [sp, #16]
   162d2:	bic.w	r3, r3, r3, asr #31
   162d6:	mov	r7, r5
   162d8:	str	r2, [sp, #28]
   162da:	str	r3, [sp, #12]
   162dc:	str	r5, [sp, #32]
   162de:	b.n	15f90 <_vfiprintf_r+0x260>
   162e0:	cmp	r1, #67	; 0x43
   162e2:	beq.n	162ea <_vfiprintf_r+0x5ba>
   162e4:	lsls	r5, r6, #27
   162e6:	bpl.w	16944 <_vfiprintf_r+0xc14>
   162ea:	ldr	r5, [sp, #28]
   162ec:	movs	r2, #8
   162ee:	movs	r1, #0
   162f0:	add	r0, sp, #88	; 0x58
   162f2:	add	r4, sp, #172	; 0xac
   162f4:	bl	a528 <memset>
   162f8:	add	r3, sp, #88	; 0x58
   162fa:	ldr.w	r2, [r5], #4
   162fe:	mov	r1, r4
   16300:	mov	r0, fp
   16302:	bl	157f4 <_wcrtomb_r>
   16306:	mov	r3, r0
   16308:	adds	r3, #1
   1630a:	str	r0, [sp, #16]
   1630c:	beq.w	16c76 <_vfiprintf_r+0xf46>
   16310:	ldr	r3, [sp, #16]
   16312:	str	r5, [sp, #28]
   16314:	bic.w	r3, r3, r3, asr #31
   16318:	str	r3, [sp, #12]
   1631a:	movs	r3, #0
   1631c:	strb.w	r3, [sp, #67]	; 0x43
   16320:	b.n	1612a <_vfiprintf_r+0x3fa>
   16322:	ldr	r3, [sp, #28]
   16324:	ldr.w	r2, [r3], #4
   16328:	str	r2, [sp, #24]
   1632a:	cmp	r2, #0
   1632c:	bge.w	16868 <_vfiprintf_r+0xb38>
   16330:	ldr	r2, [sp, #24]
   16332:	negs	r2, r2
   16334:	strd	r2, r3, [sp, #24]
   16338:	ldrb.w	r1, [r8]
   1633c:	orr.w	r6, r6, #4
   16340:	b.n	15e16 <_vfiprintf_r+0xe6>
   16342:	ldrb.w	r1, [r8]
   16346:	strb.w	r4, [sp, #67]	; 0x43
   1634a:	b.n	15e16 <_vfiprintf_r+0xe6>
   1634c:	ldrb.w	r1, [r8]
   16350:	orr.w	r6, r6, #128	; 0x80
   16354:	b.n	15e16 <_vfiprintf_r+0xe6>
   16356:	mov	r2, r8
   16358:	ldrb.w	r1, [r2], #1
   1635c:	cmp	r1, #42	; 0x2a
   1635e:	beq.w	16c8e <_vfiprintf_r+0xf5e>
   16362:	sub.w	r3, r1, #48	; 0x30
   16366:	cmp	r3, #9
   16368:	mov	r8, r2
   1636a:	mov.w	r7, #0
   1636e:	bhi.w	15e1a <_vfiprintf_r+0xea>
   16372:	ldrb.w	r1, [r8], #1
   16376:	add.w	r7, r7, r7, lsl #2
   1637a:	add.w	r7, r3, r7, lsl #1
   1637e:	sub.w	r3, r1, #48	; 0x30
   16382:	cmp	r3, #9
   16384:	bls.n	16372 <_vfiprintf_r+0x642>
   16386:	b.n	15e1a <_vfiprintf_r+0xea>
   16388:	ldrb.w	r1, [r8]
   1638c:	orr.w	r6, r6, #1
   16390:	b.n	15e16 <_vfiprintf_r+0xe6>
   16392:	ldrb.w	r3, [sp, #67]	; 0x43
   16396:	cmp	r3, #0
   16398:	bne.w	15f20 <_vfiprintf_r+0x1f0>
   1639c:	movs	r3, #32
   1639e:	ldrb.w	r1, [r8]
   163a2:	strb.w	r3, [sp, #67]	; 0x43
   163a6:	b.n	15e16 <_vfiprintf_r+0xe6>
   163a8:	ldrb.w	r1, [r8]
   163ac:	cmp	r1, #108	; 0x6c
   163ae:	ittte	eq
   163b0:	ldrbeq.w	r1, [r8, #1]
   163b4:	orreq.w	r6, r6, #32
   163b8:	addeq.w	r8, r8, #1
   163bc:	orrne.w	r6, r6, #16
   163c0:	b.n	15e16 <_vfiprintf_r+0xe6>
   163c2:	ldrb.w	r1, [r8]
   163c6:	cmp	r1, #104	; 0x68
   163c8:	ittte	eq
   163ca:	ldrbeq.w	r1, [r8, #1]
   163ce:	orreq.w	r6, r6, #512	; 0x200
   163d2:	addeq.w	r8, r8, #1
   163d6:	orrne.w	r6, r6, #64	; 0x40
   163da:	b.n	15e16 <_vfiprintf_r+0xe6>
   163dc:	orr.w	r3, r6, #16
   163e0:	str	r3, [sp, #12]
   163e2:	ldr	r3, [sp, #12]
   163e4:	ands.w	r2, r3, #32
   163e8:	beq.w	167f8 <_vfiprintf_r+0xac8>
   163ec:	ldr	r3, [sp, #28]
   163ee:	adds	r3, #7
   163f0:	bic.w	r3, r3, #7
   163f4:	mov	r1, r3
   163f6:	ldr	r2, [r3, #4]
   163f8:	ldr.w	r3, [r1], #8
   163fc:	str	r1, [sp, #28]
   163fe:	movs	r1, #1
   16400:	b.n	1601e <_vfiprintf_r+0x2ee>
   16402:	ldr	r2, [sp, #28]
   16404:	orr.w	r3, r6, #2
   16408:	str	r3, [sp, #12]
   1640a:	ldr.w	r3, [r2], #4
   1640e:	str	r2, [sp, #28]
   16410:	movw	r2, #30768	; 0x7830
   16414:	strh.w	r2, [sp, #68]	; 0x44
   16418:	ldr	r2, [pc, #736]	; (166fc <_vfiprintf_r+0x9cc>)
   1641a:	str	r2, [sp, #48]	; 0x30
   1641c:	movs	r1, #2
   1641e:	movs	r2, #0
   16420:	b.n	1601e <_vfiprintf_r+0x2ee>
   16422:	lsls	r7, r6, #26
   16424:	bmi.w	168b8 <_vfiprintf_r+0xb88>
   16428:	lsls	r5, r6, #27
   1642a:	bmi.w	16aba <_vfiprintf_r+0xd8a>
   1642e:	lsls	r4, r6, #25
   16430:	bmi.w	16bde <_vfiprintf_r+0xeae>
   16434:	lsls	r0, r6, #22
   16436:	bpl.w	16aba <_vfiprintf_r+0xd8a>
   1643a:	ldr	r3, [sp, #28]
   1643c:	ldr	r1, [sp, #20]
   1643e:	ldr.w	r2, [r3], #4
   16442:	str	r3, [sp, #28]
   16444:	strb	r1, [r2, #0]
   16446:	b.n	15dc6 <_vfiprintf_r+0x96>
   16448:	str	r6, [sp, #12]
   1644a:	cmp	r1, #1
   1644c:	beq.w	15f68 <_vfiprintf_r+0x238>
   16450:	cmp	r1, #2
   16452:	add	r4, sp, #272	; 0x110
   16454:	bne.n	1647a <_vfiprintf_r+0x74a>
   16456:	ldr	r0, [sp, #48]	; 0x30
   16458:	and.w	r1, r3, #15
   1645c:	lsrs	r3, r3, #4
   1645e:	ldrb	r1, [r0, r1]
   16460:	strb.w	r1, [r4, #-1]!
   16464:	orr.w	r3, r3, r2, lsl #28
   16468:	lsrs	r2, r2, #4
   1646a:	orrs.w	r1, r3, r2
   1646e:	bne.n	16458 <_vfiprintf_r+0x728>
   16470:	ldr	r6, [sp, #12]
   16472:	add	r3, sp, #272	; 0x110
   16474:	subs	r3, r3, r4
   16476:	str	r3, [sp, #16]
   16478:	b.n	15f82 <_vfiprintf_r+0x252>
   1647a:	and.w	r1, r3, #7
   1647e:	lsrs	r3, r3, #3
   16480:	orr.w	r3, r3, r2, lsl #29
   16484:	lsrs	r2, r2, #3
   16486:	adds	r1, #48	; 0x30
   16488:	orrs.w	r5, r3, r2
   1648c:	mov	r0, r4
   1648e:	strb.w	r1, [r4, #-1]!
   16492:	bne.n	1647a <_vfiprintf_r+0x74a>
   16494:	ldr	r6, [sp, #12]
   16496:	lsls	r3, r6, #31
   16498:	bpl.n	16472 <_vfiprintf_r+0x742>
   1649a:	cmp	r1, #48	; 0x30
   1649c:	beq.n	16470 <_vfiprintf_r+0x740>
   1649e:	movs	r3, #48	; 0x30
   164a0:	subs	r0, #2
   164a2:	strb.w	r3, [r4, #-1]
   164a6:	add	r3, sp, #272	; 0x110
   164a8:	subs	r3, r3, r0
   164aa:	ldr	r6, [sp, #12]
   164ac:	str	r3, [sp, #16]
   164ae:	mov	r4, r0
   164b0:	b.n	15f82 <_vfiprintf_r+0x252>
   164b2:	ldr	r3, [sp, #16]
   164b4:	str	r4, [sp, #108]	; 0x6c
   164b6:	movs	r2, #1
   164b8:	str	r3, [sp, #112]	; 0x70
   164ba:	str	r3, [sp, #104]	; 0x68
   164bc:	str	r2, [sp, #100]	; 0x64
   164be:	add.w	r9, sp, #108	; 0x6c
   164c2:	add.w	r9, r9, #8
   164c6:	b.n	16204 <_vfiprintf_r+0x4d4>
   164c8:	add.w	r9, sp, #108	; 0x6c
   164cc:	b.n	15dc6 <_vfiprintf_r+0x96>
   164ce:	ldr	r2, [sp, #24]
   164d0:	ldr	r5, [sp, #12]
   164d2:	subs	r5, r2, r5
   164d4:	cmp	r5, #0
   164d6:	ble.w	161c6 <_vfiprintf_r+0x496>
   164da:	cmp	r5, #16
   164dc:	ble.w	16c56 <_vfiprintf_r+0xf26>
   164e0:	str	r4, [sp, #36]	; 0x24
   164e2:	vmov	r4, s16
   164e6:	b.n	164f8 <_vfiprintf_r+0x7c8>
   164e8:	add.w	ip, r0, #2
   164ec:	add.w	r9, r9, #8
   164f0:	mov	r0, r2
   164f2:	subs	r5, #16
   164f4:	cmp	r5, #16
   164f6:	ble.n	16536 <_vfiprintf_r+0x806>
   164f8:	ldr	r1, [pc, #516]	; (16700 <_vfiprintf_r+0x9d0>)
   164fa:	str.w	r1, [r9]
   164fe:	adds	r2, r0, #1
   16500:	adds	r3, #16
   16502:	movs	r1, #16
   16504:	cmp	r2, #7
   16506:	strd	r2, r3, [sp, #100]	; 0x64
   1650a:	str.w	r1, [r9, #4]
   1650e:	ble.n	164e8 <_vfiprintf_r+0x7b8>
   16510:	add	r2, sp, #96	; 0x60
   16512:	cmp	r3, #0
   16514:	beq.n	16600 <_vfiprintf_r+0x8d0>
   16516:	mov	r1, r4
   16518:	mov	r0, fp
   1651a:	add.w	r9, sp, #108	; 0x6c
   1651e:	bl	15cb8 <__sprint_r.part.0>
   16522:	cmp	r0, #0
   16524:	bne.w	160de <_vfiprintf_r+0x3ae>
   16528:	ldrd	r0, r3, [sp, #100]	; 0x64
   1652c:	subs	r5, #16
   1652e:	cmp	r5, #16
   16530:	add.w	ip, r0, #1
   16534:	bgt.n	164f8 <_vfiprintf_r+0x7c8>
   16536:	ldr	r4, [sp, #36]	; 0x24
   16538:	ldr	r2, [pc, #452]	; (16700 <_vfiprintf_r+0x9d0>)
   1653a:	str.w	r5, [r9, #4]
   1653e:	add	r3, r5
   16540:	cmp.w	ip, #7
   16544:	strd	ip, r3, [sp, #100]	; 0x64
   16548:	str.w	r2, [r9]
   1654c:	ble.w	16878 <_vfiprintf_r+0xb48>
   16550:	cmp	r3, #0
   16552:	beq.w	16b94 <_vfiprintf_r+0xe64>
   16556:	vmov	r1, s16
   1655a:	add	r2, sp, #96	; 0x60
   1655c:	mov	r0, fp
   1655e:	bl	15cb8 <__sprint_r.part.0>
   16562:	cmp	r0, #0
   16564:	bne.w	160de <_vfiprintf_r+0x3ae>
   16568:	ldr	r2, [sp, #16]
   1656a:	ldrd	r0, r3, [sp, #100]	; 0x64
   1656e:	subs	r5, r7, r2
   16570:	cmp	r5, #0
   16572:	add.w	r1, r0, #1
   16576:	add.w	r9, sp, #108	; 0x6c
   1657a:	ble.w	161d0 <_vfiprintf_r+0x4a0>
   1657e:	cmp	r5, #16
   16580:	ble.n	165d6 <_vfiprintf_r+0x8a6>
   16582:	str	r4, [sp, #36]	; 0x24
   16584:	movs	r7, #16
   16586:	vmov	r4, s16
   1658a:	b.n	1659c <_vfiprintf_r+0x86c>
   1658c:	add.w	ip, r0, #2
   16590:	add.w	r9, r9, #8
   16594:	mov	r0, r2
   16596:	subs	r5, #16
   16598:	cmp	r5, #16
   1659a:	ble.n	165d2 <_vfiprintf_r+0x8a2>
   1659c:	adds	r2, r0, #1
   1659e:	ldr	r1, [pc, #352]	; (16700 <_vfiprintf_r+0x9d0>)
   165a0:	adds	r3, #16
   165a2:	cmp	r2, #7
   165a4:	strd	r1, r7, [r9]
   165a8:	strd	r2, r3, [sp, #100]	; 0x64
   165ac:	ble.n	1658c <_vfiprintf_r+0x85c>
   165ae:	add	r2, sp, #96	; 0x60
   165b0:	cbz	r3, 165f4 <_vfiprintf_r+0x8c4>
   165b2:	mov	r1, r4
   165b4:	mov	r0, fp
   165b6:	add.w	r9, sp, #108	; 0x6c
   165ba:	bl	15cb8 <__sprint_r.part.0>
   165be:	cmp	r0, #0
   165c0:	bne.w	160de <_vfiprintf_r+0x3ae>
   165c4:	ldrd	r0, r3, [sp, #100]	; 0x64
   165c8:	subs	r5, #16
   165ca:	cmp	r5, #16
   165cc:	add.w	ip, r0, #1
   165d0:	bgt.n	1659c <_vfiprintf_r+0x86c>
   165d2:	ldr	r4, [sp, #36]	; 0x24
   165d4:	mov	r1, ip
   165d6:	ldr	r2, [pc, #296]	; (16700 <_vfiprintf_r+0x9d0>)
   165d8:	str.w	r5, [r9, #4]
   165dc:	add	r3, r5
   165de:	cmp	r1, #7
   165e0:	strd	r1, r3, [sp, #100]	; 0x64
   165e4:	str.w	r2, [r9]
   165e8:	bgt.w	167ba <_vfiprintf_r+0xa8a>
   165ec:	add.w	r9, r9, #8
   165f0:	adds	r1, #1
   165f2:	b.n	161d0 <_vfiprintf_r+0x4a0>
   165f4:	mov.w	ip, #1
   165f8:	mov	r0, r3
   165fa:	add.w	r9, sp, #108	; 0x6c
   165fe:	b.n	16596 <_vfiprintf_r+0x866>
   16600:	mov.w	ip, #1
   16604:	mov	r0, r3
   16606:	add.w	r9, sp, #108	; 0x6c
   1660a:	b.n	164f2 <_vfiprintf_r+0x7c2>
   1660c:	cmp	r3, #0
   1660e:	beq.w	1681a <_vfiprintf_r+0xaea>
   16612:	vmov	r1, s16
   16616:	add	r2, sp, #96	; 0x60
   16618:	mov	r0, fp
   1661a:	bl	15cb8 <__sprint_r.part.0>
   1661e:	cmp	r0, #0
   16620:	bne.w	160de <_vfiprintf_r+0x3ae>
   16624:	ldrd	r0, r3, [sp, #100]	; 0x64
   16628:	add.w	r9, sp, #108	; 0x6c
   1662c:	adds	r1, r0, #1
   1662e:	b.n	16180 <_vfiprintf_r+0x450>
   16630:	movs	r3, #2
   16632:	add	r2, sp, #68	; 0x44
   16634:	str	r3, [sp, #112]	; 0x70
   16636:	str	r2, [sp, #108]	; 0x6c
   16638:	movs	r1, #1
   1663a:	add.w	r9, sp, #108	; 0x6c
   1663e:	mov	r0, r1
   16640:	add.w	r9, r9, #8
   16644:	adds	r1, r0, #1
   16646:	b.n	161be <_vfiprintf_r+0x48e>
   16648:	cmp	r5, #16
   1664a:	ble.w	16c18 <_vfiprintf_r+0xee8>
   1664e:	ldrd	r1, r3, [sp, #100]	; 0x64
   16652:	str	r4, [sp, #60]	; 0x3c
   16654:	mov	r0, r1
   16656:	vmov	r4, s16
   1665a:	b.n	1666c <_vfiprintf_r+0x93c>
   1665c:	add.w	ip, r0, #2
   16660:	add.w	r9, r9, #8
   16664:	mov	r0, r2
   16666:	subs	r5, #16
   16668:	cmp	r5, #16
   1666a:	ble.n	166a8 <_vfiprintf_r+0x978>
   1666c:	ldr	r1, [pc, #148]	; (16704 <_vfiprintf_r+0x9d4>)
   1666e:	str.w	r1, [r9]
   16672:	adds	r2, r0, #1
   16674:	adds	r3, #16
   16676:	movs	r1, #16
   16678:	cmp	r2, #7
   1667a:	strd	r2, r3, [sp, #100]	; 0x64
   1667e:	str.w	r1, [r9, #4]
   16682:	ble.n	1665c <_vfiprintf_r+0x92c>
   16684:	add	r2, sp, #96	; 0x60
   16686:	cbz	r3, 166ca <_vfiprintf_r+0x99a>
   16688:	mov	r1, r4
   1668a:	mov	r0, fp
   1668c:	add.w	r9, sp, #108	; 0x6c
   16690:	bl	15cb8 <__sprint_r.part.0>
   16694:	cmp	r0, #0
   16696:	bne.w	160de <_vfiprintf_r+0x3ae>
   1669a:	ldrd	r0, r3, [sp, #100]	; 0x64
   1669e:	subs	r5, #16
   166a0:	cmp	r5, #16
   166a2:	add.w	ip, r0, #1
   166a6:	bgt.n	1666c <_vfiprintf_r+0x93c>
   166a8:	ldr	r4, [sp, #60]	; 0x3c
   166aa:	mov	r0, ip
   166ac:	ldr	r2, [pc, #84]	; (16704 <_vfiprintf_r+0x9d4>)
   166ae:	str.w	r5, [r9, #4]
   166b2:	add	r3, r5
   166b4:	cmp	r0, #7
   166b6:	strd	r0, r3, [sp, #100]	; 0x64
   166ba:	str.w	r2, [r9]
   166be:	bgt.w	16844 <_vfiprintf_r+0xb14>
   166c2:	add.w	r9, r9, #8
   166c6:	adds	r1, r0, #1
   166c8:	b.n	16158 <_vfiprintf_r+0x428>
   166ca:	mov	r0, r3
   166cc:	mov.w	ip, #1
   166d0:	add.w	r9, sp, #108	; 0x6c
   166d4:	b.n	16666 <_vfiprintf_r+0x936>
   166d6:	lsls	r6, r6, #29
   166d8:	str	r3, [sp, #100]	; 0x64
   166da:	bpl.n	16784 <_vfiprintf_r+0xa54>
   166dc:	ldr	r2, [sp, #24]
   166de:	ldr	r1, [sp, #12]
   166e0:	subs	r4, r2, r1
   166e2:	cmp	r4, #0
   166e4:	ble.n	16784 <_vfiprintf_r+0xa54>
   166e6:	add.w	r9, sp, #108	; 0x6c
   166ea:	cmp	r4, #16
   166ec:	ble.w	16c50 <_vfiprintf_r+0xf20>
   166f0:	ldr	r1, [sp, #100]	; 0x64
   166f2:	vmov	r6, s16
   166f6:	movs	r5, #16
   166f8:	b.n	16716 <_vfiprintf_r+0x9e6>
   166fa:	nop
   166fc:	.word	0x200009cc
   16700:	.word	0x200078ac
   16704:	.word	0x20002488
   16708:	adds	r0, r1, #2
   1670a:	add.w	r9, r9, #8
   1670e:	mov	r1, r2
   16710:	subs	r4, #16
   16712:	cmp	r4, #16
   16714:	ble.n	1674c <_vfiprintf_r+0xa1c>
   16716:	adds	r2, r1, #1
   16718:	ldr	r0, [pc, #716]	; (169e8 <_vfiprintf_r+0xcb8>)
   1671a:	adds	r3, #16
   1671c:	cmp	r2, #7
   1671e:	strd	r0, r5, [r9]
   16722:	strd	r2, r3, [sp, #100]	; 0x64
   16726:	ble.n	16708 <_vfiprintf_r+0x9d8>
   16728:	add	r2, sp, #96	; 0x60
   1672a:	cbz	r3, 1677a <_vfiprintf_r+0xa4a>
   1672c:	mov	r1, r6
   1672e:	mov	r0, fp
   16730:	bl	15cb8 <__sprint_r.part.0>
   16734:	cmp	r0, #0
   16736:	bne.w	160de <_vfiprintf_r+0x3ae>
   1673a:	ldrd	r1, r3, [sp, #100]	; 0x64
   1673e:	subs	r4, #16
   16740:	cmp	r4, #16
   16742:	add.w	r0, r1, #1
   16746:	add.w	r9, sp, #108	; 0x6c
   1674a:	bgt.n	16716 <_vfiprintf_r+0x9e6>
   1674c:	ldr	r2, [pc, #664]	; (169e8 <_vfiprintf_r+0xcb8>)
   1674e:	str.w	r4, [r9, #4]
   16752:	add	r3, r4
   16754:	cmp	r0, #7
   16756:	strd	r0, r3, [sp, #100]	; 0x64
   1675a:	str.w	r2, [r9]
   1675e:	ble.w	16214 <_vfiprintf_r+0x4e4>
   16762:	cbz	r3, 16784 <_vfiprintf_r+0xa54>
   16764:	vmov	r1, s16
   16768:	add	r2, sp, #96	; 0x60
   1676a:	mov	r0, fp
   1676c:	bl	15cb8 <__sprint_r.part.0>
   16770:	cmp	r0, #0
   16772:	bne.w	160de <_vfiprintf_r+0x3ae>
   16776:	ldr	r3, [sp, #104]	; 0x68
   16778:	b.n	16214 <_vfiprintf_r+0x4e4>
   1677a:	movs	r0, #1
   1677c:	mov	r1, r3
   1677e:	add.w	r9, sp, #108	; 0x6c
   16782:	b.n	16710 <_vfiprintf_r+0x9e0>
   16784:	ldrd	r3, r2, [sp, #20]
   16788:	ldr	r1, [sp, #12]
   1678a:	cmp	r2, r1
   1678c:	ite	ge
   1678e:	addge	r3, r3, r2
   16790:	addlt	r3, r3, r1
   16792:	str	r3, [sp, #20]
   16794:	b.n	1622a <_vfiprintf_r+0x4fa>
   16796:	ldrsh.w	r1, [r2, #12]
   1679a:	lsls	r7, r1, #22
   1679c:	vmov	r3, s16
   167a0:	uxth	r2, r1
   167a2:	bmi.w	15d76 <_vfiprintf_r+0x46>
   167a6:	vmov	r5, s16
   167aa:	ldr	r0, [r3, #88]	; 0x58
   167ac:	bl	f138 <__retarget_lock_acquire_recursive>
   167b0:	ldrsh.w	r1, [r5, #12]
   167b4:	uxth	r2, r1
   167b6:	b.w	15d76 <_vfiprintf_r+0x46>
   167ba:	cmp	r3, #0
   167bc:	beq.w	164b2 <_vfiprintf_r+0x782>
   167c0:	vmov	r1, s16
   167c4:	add	r2, sp, #96	; 0x60
   167c6:	mov	r0, fp
   167c8:	bl	15cb8 <__sprint_r.part.0>
   167cc:	cmp	r0, #0
   167ce:	bne.w	160de <_vfiprintf_r+0x3ae>
   167d2:	ldr	r1, [sp, #100]	; 0x64
   167d4:	ldr	r3, [sp, #104]	; 0x68
   167d6:	adds	r1, #1
   167d8:	add.w	r9, sp, #108	; 0x6c
   167dc:	b.n	161d0 <_vfiprintf_r+0x4a0>
   167de:	str	r2, [sp, #100]	; 0x64
   167e0:	add.w	r9, sp, #108	; 0x6c
   167e4:	b.n	160a4 <_vfiprintf_r+0x374>
   167e6:	cmp	r7, #0
   167e8:	bne.w	15f72 <_vfiprintf_r+0x242>
   167ec:	ldr	r6, [sp, #12]
   167ee:	movs	r7, #0
   167f0:	str	r7, [sp, #16]
   167f2:	add	r4, sp, #272	; 0x110
   167f4:	b.w	15f82 <_vfiprintf_r+0x252>
   167f8:	ldr	r3, [sp, #12]
   167fa:	ands.w	r3, r3, #16
   167fe:	bne.n	168aa <_vfiprintf_r+0xb7a>
   16800:	ldr	r2, [sp, #12]
   16802:	ands.w	r0, r2, #64	; 0x40
   16806:	beq.w	16ae0 <_vfiprintf_r+0xdb0>
   1680a:	ldr	r1, [sp, #28]
   1680c:	mov	r2, r3
   1680e:	ldr.w	r3, [r1], #4
   16812:	str	r1, [sp, #28]
   16814:	uxth	r3, r3
   16816:	movs	r1, #1
   16818:	b.n	1601e <_vfiprintf_r+0x2ee>
   1681a:	ldr	r2, [sp, #36]	; 0x24
   1681c:	cmp	r2, #0
   1681e:	bne.n	168ea <_vfiprintf_r+0xbba>
   16820:	mov	r0, r3
   16822:	movs	r1, #1
   16824:	add.w	r9, sp, #108	; 0x6c
   16828:	b.n	161be <_vfiprintf_r+0x48e>
   1682a:	movs	r1, #1
   1682c:	mov	r0, r3
   1682e:	add.w	r9, sp, #108	; 0x6c
   16832:	b.n	161be <_vfiprintf_r+0x48e>
   16834:	negs	r3, r3
   16836:	sbc.w	r2, r2, r2, lsl #1
   1683a:	str	r6, [sp, #12]
   1683c:	movs	r0, #45	; 0x2d
   1683e:	movs	r1, #1
   16840:	b.w	16020 <_vfiprintf_r+0x2f0>
   16844:	cmp	r3, #0
   16846:	beq.w	1695a <_vfiprintf_r+0xc2a>
   1684a:	vmov	r1, s16
   1684e:	add	r2, sp, #96	; 0x60
   16850:	mov	r0, fp
   16852:	bl	15cb8 <__sprint_r.part.0>
   16856:	cmp	r0, #0
   16858:	bne.w	160de <_vfiprintf_r+0x3ae>
   1685c:	ldrd	r0, r3, [sp, #100]	; 0x64
   16860:	add.w	r9, sp, #108	; 0x6c
   16864:	adds	r1, r0, #1
   16866:	b.n	16158 <_vfiprintf_r+0x428>
   16868:	ldrb.w	r1, [r8]
   1686c:	str	r3, [sp, #28]
   1686e:	b.w	15e16 <_vfiprintf_r+0xe6>
   16872:	add	r4, sp, #272	; 0x110
   16874:	b.w	15f82 <_vfiprintf_r+0x252>
   16878:	add.w	r9, r9, #8
   1687c:	add.w	r1, ip, #1
   16880:	mov	r0, ip
   16882:	b.n	161c6 <_vfiprintf_r+0x496>
   16884:	ands.w	r2, r6, #512	; 0x200
   16888:	bne.w	16bba <_vfiprintf_r+0xe8a>
   1688c:	ldr.w	r3, [r1], #4
   16890:	str	r1, [sp, #28]
   16892:	b.w	16016 <_vfiprintf_r+0x2e6>
   16896:	lsls	r3, r6, #22
   16898:	bmi.w	16bac <_vfiprintf_r+0xe7c>
   1689c:	ldr.w	r3, [r2], #4
   168a0:	str	r2, [sp, #28]
   168a2:	asrs	r2, r3, #31
   168a4:	mov	r1, r2
   168a6:	b.w	15f4e <_vfiprintf_r+0x21e>
   168aa:	ldr	r1, [sp, #28]
   168ac:	ldr.w	r3, [r1], #4
   168b0:	str	r1, [sp, #28]
   168b2:	movs	r1, #1
   168b4:	b.w	1601e <_vfiprintf_r+0x2ee>
   168b8:	ldr	r3, [sp, #28]
   168ba:	ldr	r0, [sp, #20]
   168bc:	ldr.w	r1, [r3], #4
   168c0:	str	r3, [sp, #28]
   168c2:	asrs	r2, r0, #31
   168c4:	strd	r0, r2, [r1]
   168c8:	b.w	15dc6 <_vfiprintf_r+0x96>
   168cc:	ldr	r3, [sp, #44]	; 0x2c
   168ce:	cmp	r3, #0
   168d0:	beq.w	15f20 <_vfiprintf_r+0x1f0>
   168d4:	ldr	r3, [sp, #44]	; 0x2c
   168d6:	ldrb	r3, [r3, #0]
   168d8:	cmp	r3, #0
   168da:	beq.w	15f20 <_vfiprintf_r+0x1f0>
   168de:	ldrb.w	r1, [r8]
   168e2:	orr.w	r6, r6, #1024	; 0x400
   168e6:	b.w	15e16 <_vfiprintf_r+0xe6>
   168ea:	movs	r3, #2
   168ec:	add	r2, sp, #68	; 0x44
   168ee:	str	r3, [sp, #112]	; 0x70
   168f0:	str	r2, [sp, #108]	; 0x6c
   168f2:	movs	r0, #1
   168f4:	add.w	r9, sp, #108	; 0x6c
   168f8:	b.n	16640 <_vfiprintf_r+0x910>
   168fa:	str	r6, [sp, #12]
   168fc:	b.n	163e2 <_vfiprintf_r+0x6b2>
   168fe:	ldr	r3, [pc, #236]	; (169ec <_vfiprintf_r+0xcbc>)
   16900:	str	r3, [sp, #48]	; 0x30
   16902:	ands.w	r2, r6, #32
   16906:	beq.n	169bc <_vfiprintf_r+0xc8c>
   16908:	ldr	r3, [sp, #28]
   1690a:	adds	r3, #7
   1690c:	bic.w	r3, r3, #7
   16910:	mov	r0, r3
   16912:	ldr	r2, [r3, #4]
   16914:	ldr.w	r3, [r0], #8
   16918:	str	r0, [sp, #28]
   1691a:	lsls	r4, r6, #31
   1691c:	bpl.n	16932 <_vfiprintf_r+0xc02>
   1691e:	orrs.w	r0, r3, r2
   16922:	beq.n	16932 <_vfiprintf_r+0xc02>
   16924:	strb.w	r1, [sp, #69]	; 0x45
   16928:	movs	r1, #48	; 0x30
   1692a:	orr.w	r6, r6, #2
   1692e:	strb.w	r1, [sp, #68]	; 0x44
   16932:	bic.w	r1, r6, #1024	; 0x400
   16936:	str	r1, [sp, #12]
   16938:	movs	r1, #2
   1693a:	b.w	1601e <_vfiprintf_r+0x2ee>
   1693e:	ldr	r3, [pc, #176]	; (169f0 <_vfiprintf_r+0xcc0>)
   16940:	str	r3, [sp, #48]	; 0x30
   16942:	b.n	16902 <_vfiprintf_r+0xbd2>
   16944:	ldr	r3, [sp, #28]
   16946:	movs	r1, #1
   16948:	ldr.w	r2, [r3], #4
   1694c:	str	r1, [sp, #12]
   1694e:	strb.w	r2, [sp, #172]	; 0xac
   16952:	str	r3, [sp, #28]
   16954:	str	r1, [sp, #16]
   16956:	add	r4, sp, #172	; 0xac
   16958:	b.n	1631a <_vfiprintf_r+0x5ea>
   1695a:	ldrb.w	r2, [sp, #67]	; 0x43
   1695e:	cmp	r2, #0
   16960:	bne.w	16bc8 <_vfiprintf_r+0xe98>
   16964:	ldr	r2, [sp, #36]	; 0x24
   16966:	cmp	r2, #0
   16968:	bne.w	16630 <_vfiprintf_r+0x900>
   1696c:	mov	r0, r3
   1696e:	movs	r1, #1
   16970:	add.w	r9, sp, #108	; 0x6c
   16974:	b.n	161c6 <_vfiprintf_r+0x496>
   16976:	movs	r1, #0
   16978:	movs	r2, #8
   1697a:	add	r0, sp, #88	; 0x58
   1697c:	str	r4, [sp, #76]	; 0x4c
   1697e:	bl	a528 <memset>
   16982:	adds	r1, r7, #1
   16984:	beq.w	16b00 <_vfiprintf_r+0xdd0>
   16988:	movs	r5, #0
   1698a:	str	r4, [sp, #28]
   1698c:	mov	r4, r5
   1698e:	b.n	169aa <_vfiprintf_r+0xc7a>
   16990:	add	r1, sp, #172	; 0xac
   16992:	mov	r0, fp
   16994:	bl	157f4 <_wcrtomb_r>
   16998:	adds	r2, r0, #1
   1699a:	add	r0, r4
   1699c:	beq.w	16c76 <_vfiprintf_r+0xf46>
   169a0:	cmp	r0, r7
   169a2:	bgt.n	169b6 <_vfiprintf_r+0xc86>
   169a4:	beq.w	16c88 <_vfiprintf_r+0xf58>
   169a8:	mov	r4, r0
   169aa:	ldr	r2, [sp, #76]	; 0x4c
   169ac:	ldr	r2, [r2, r5]
   169ae:	add	r3, sp, #88	; 0x58
   169b0:	adds	r5, #4
   169b2:	cmp	r2, #0
   169b4:	bne.n	16990 <_vfiprintf_r+0xc60>
   169b6:	str	r4, [sp, #16]
   169b8:	ldr	r4, [sp, #28]
   169ba:	b.n	16b1c <_vfiprintf_r+0xdec>
   169bc:	ands.w	r3, r6, #16
   169c0:	ldr	r0, [sp, #28]
   169c2:	bne.n	169de <_vfiprintf_r+0xcae>
   169c4:	ands.w	r4, r6, #64	; 0x40
   169c8:	beq.n	169d6 <_vfiprintf_r+0xca6>
   169ca:	mov	r2, r3
   169cc:	ldr.w	r3, [r0], #4
   169d0:	str	r0, [sp, #28]
   169d2:	uxth	r3, r3
   169d4:	b.n	1691a <_vfiprintf_r+0xbea>
   169d6:	ands.w	r2, r6, #512	; 0x200
   169da:	bne.w	16ba0 <_vfiprintf_r+0xe70>
   169de:	ldr.w	r3, [r0], #4
   169e2:	str	r0, [sp, #28]
   169e4:	b.n	1691a <_vfiprintf_r+0xbea>
   169e6:	nop
   169e8:	.word	0x20002488
   169ec:	.word	0x200009cc
   169f0:	.word	0x200009e0
   169f4:	ldr	r1, [sp, #12]
   169f6:	str	r7, [sp, #16]
   169f8:	add	r4, sp, #272	; 0x110
   169fa:	mov	lr, r3
   169fc:	vmov	s17, fp
   16a00:	and.w	r6, r1, #1024	; 0x400
   16a04:	mov.w	ip, #0
   16a08:	mov	r3, r4
   16a0a:	b.n	16a1a <_vfiprintf_r+0xcea>
   16a0c:	cmp.w	lr, #10
   16a10:	sbcs.w	r2, r2, #0
   16a14:	bcc.n	16a8a <_vfiprintf_r+0xd5a>
   16a16:	mov	lr, r4
   16a18:	mov	r2, r5
   16a1a:	ldr	r1, [pc, #664]	; (16cb4 <_vfiprintf_r+0xf84>)
   16a1c:	adds.w	r0, lr, r2
   16a20:	adc.w	r0, r0, #0
   16a24:	mov	r7, r1
   16a26:	umull	r1, r4, r1, r0
   16a2a:	bic.w	r1, r4, #3
   16a2e:	add.w	r1, r1, r4, lsr #2
   16a32:	subs	r0, r0, r1
   16a34:	subs.w	r1, lr, r0
   16a38:	mov.w	r5, #3435973836	; 0xcccccccc
   16a3c:	sbc.w	r4, r2, #0
   16a40:	mul.w	r5, r5, r1
   16a44:	mla	r5, r7, r4, r5
   16a48:	umull	r4, r1, r1, r7
   16a4c:	add	r5, r1
   16a4e:	movs	r7, #5
   16a50:	and.w	r1, r4, #1
   16a54:	umull	r1, fp, r1, r7
   16a58:	adds	r1, r1, r0
   16a5a:	lsrs	r4, r4, #1
   16a5c:	adds	r1, #48	; 0x30
   16a5e:	strb.w	r1, [r3, #-1]
   16a62:	orr.w	r4, r4, r5, lsl #31
   16a66:	add.w	ip, ip, #1
   16a6a:	subs	r3, #1
   16a6c:	lsrs	r5, r5, #1
   16a6e:	cmp	r6, #0
   16a70:	beq.n	16a0c <_vfiprintf_r+0xcdc>
   16a72:	ldr	r1, [sp, #44]	; 0x2c
   16a74:	ldrb	r1, [r1, #0]
   16a76:	cmp	r1, ip
   16a78:	bne.n	16a0c <_vfiprintf_r+0xcdc>
   16a7a:	cmp.w	ip, #255	; 0xff
   16a7e:	beq.n	16a0c <_vfiprintf_r+0xcdc>
   16a80:	cmp.w	lr, #10
   16a84:	sbcs.w	r2, r2, #0
   16a88:	bcs.n	16b64 <_vfiprintf_r+0xe34>
   16a8a:	mov	r4, r3
   16a8c:	add	r3, sp, #272	; 0x110
   16a8e:	subs	r3, r3, r4
   16a90:	ldr	r7, [sp, #16]
   16a92:	ldr	r6, [sp, #12]
   16a94:	str	r3, [sp, #16]
   16a96:	vmov	fp, s17
   16a9a:	b.w	15f82 <_vfiprintf_r+0x252>
   16a9e:	str	r6, [sp, #12]
   16aa0:	b.w	15f68 <_vfiprintf_r+0x238>
   16aa4:	mov	r0, fp
   16aa6:	bl	e9f8 <__sinit>
   16aaa:	b.w	15d64 <_vfiprintf_r+0x34>
   16aae:	cmp	r1, #1
   16ab0:	str	r6, [sp, #12]
   16ab2:	bne.w	16450 <_vfiprintf_r+0x720>
   16ab6:	b.w	15f72 <_vfiprintf_r+0x242>
   16aba:	ldr	r3, [sp, #28]
   16abc:	ldr	r1, [sp, #20]
   16abe:	ldr.w	r2, [r3], #4
   16ac2:	str	r1, [r2, #0]
   16ac4:	str	r3, [sp, #28]
   16ac6:	b.w	15dc6 <_vfiprintf_r+0x96>
   16aca:	cmp	r7, #6
   16acc:	mov	r3, r7
   16ace:	ldr	r2, [sp, #12]
   16ad0:	ldr	r4, [pc, #484]	; (16cb8 <_vfiprintf_r+0xf88>)
   16ad2:	str	r2, [sp, #28]
   16ad4:	it	cs
   16ad6:	movcs	r3, #6
   16ad8:	str	r3, [sp, #16]
   16ada:	str	r3, [sp, #12]
   16adc:	b.w	1612a <_vfiprintf_r+0x3fa>
   16ae0:	ldr	r3, [sp, #12]
   16ae2:	ldr	r1, [sp, #28]
   16ae4:	ands.w	r2, r3, #512	; 0x200
   16ae8:	ite	ne
   16aea:	ldrne.w	r3, [r1], #4
   16aee:	ldreq.w	r3, [r1], #4
   16af2:	str	r1, [sp, #28]
   16af4:	itt	ne
   16af6:	movne	r2, r0
   16af8:	uxtbne	r3, r3
   16afa:	movs	r1, #1
   16afc:	b.w	1601e <_vfiprintf_r+0x2ee>
   16b00:	add	r3, sp, #88	; 0x58
   16b02:	str	r3, [sp, #0]
   16b04:	movs	r3, #0
   16b06:	mov	r1, r3
   16b08:	add	r2, sp, #76	; 0x4c
   16b0a:	mov	r0, fp
   16b0c:	bl	15840 <_wcsrtombs_r>
   16b10:	mov	r3, r0
   16b12:	adds	r3, #1
   16b14:	str	r0, [sp, #16]
   16b16:	beq.w	16c76 <_vfiprintf_r+0xf46>
   16b1a:	str	r4, [sp, #76]	; 0x4c
   16b1c:	ldr	r3, [sp, #16]
   16b1e:	cmp	r3, #0
   16b20:	beq.n	16b84 <_vfiprintf_r+0xe54>
   16b22:	cmp	r3, #99	; 0x63
   16b24:	bgt.n	16bee <_vfiprintf_r+0xebe>
   16b26:	movs	r3, #0
   16b28:	str	r3, [sp, #32]
   16b2a:	add	r4, sp, #172	; 0xac
   16b2c:	movs	r2, #8
   16b2e:	movs	r1, #0
   16b30:	add	r0, sp, #88	; 0x58
   16b32:	bl	a528 <memset>
   16b36:	ldr	r5, [sp, #16]
   16b38:	add	r3, sp, #88	; 0x58
   16b3a:	str	r3, [sp, #0]
   16b3c:	add	r2, sp, #76	; 0x4c
   16b3e:	mov	r3, r5
   16b40:	mov	r1, r4
   16b42:	mov	r0, fp
   16b44:	bl	15840 <_wcsrtombs_r>
   16b48:	cmp	r5, r0
   16b4a:	bne.w	16ca4 <_vfiprintf_r+0xf74>
   16b4e:	ldr	r3, [sp, #12]
   16b50:	ldr	r2, [sp, #16]
   16b52:	str	r3, [sp, #28]
   16b54:	movs	r3, #0
   16b56:	strb	r3, [r4, r2]
   16b58:	mov	r7, r3
   16b5a:	bic.w	r3, r2, r2, asr #31
   16b5e:	str	r3, [sp, #12]
   16b60:	b.w	15f90 <_vfiprintf_r+0x260>
   16b64:	ldr	r2, [sp, #56]	; 0x38
   16b66:	ldr	r1, [sp, #52]	; 0x34
   16b68:	subs	r3, r3, r2
   16b6a:	mov	r0, r3
   16b6c:	str	r3, [sp, #32]
   16b6e:	bl	efa0 <strncpy>
   16b72:	ldr	r1, [sp, #44]	; 0x2c
   16b74:	ldr	r3, [sp, #32]
   16b76:	ldrb	r2, [r1, #1]
   16b78:	cbz	r2, 16b7e <_vfiprintf_r+0xe4e>
   16b7a:	adds	r1, #1
   16b7c:	str	r1, [sp, #44]	; 0x2c
   16b7e:	mov.w	ip, #0
   16b82:	b.n	16a16 <_vfiprintf_r+0xce6>
   16b84:	ldr	r3, [sp, #12]
   16b86:	str	r3, [sp, #28]
   16b88:	ldr	r3, [sp, #16]
   16b8a:	str	r3, [sp, #12]
   16b8c:	mov	r7, r3
   16b8e:	str	r3, [sp, #32]
   16b90:	b.w	15f90 <_vfiprintf_r+0x260>
   16b94:	movs	r1, #1
   16b96:	mov	r0, r3
   16b98:	add.w	r9, sp, #108	; 0x6c
   16b9c:	b.w	161c6 <_vfiprintf_r+0x496>
   16ba0:	ldr.w	r3, [r0], #4
   16ba4:	str	r0, [sp, #28]
   16ba6:	mov	r2, r4
   16ba8:	uxtb	r3, r3
   16baa:	b.n	1691a <_vfiprintf_r+0xbea>
   16bac:	ldrsb.w	r3, [r2], #4
   16bb0:	str	r2, [sp, #28]
   16bb2:	asrs	r2, r3, #31
   16bb4:	mov	r1, r2
   16bb6:	b.w	15f4e <_vfiprintf_r+0x21e>
   16bba:	ldr.w	r3, [r1], #4
   16bbe:	str	r1, [sp, #28]
   16bc0:	mov	r2, r0
   16bc2:	uxtb	r3, r3
   16bc4:	b.w	16016 <_vfiprintf_r+0x2e6>
   16bc8:	movs	r3, #1
   16bca:	str	r3, [sp, #112]	; 0x70
   16bcc:	movs	r1, #1
   16bce:	add.w	r3, sp, #67	; 0x43
   16bd2:	str	r3, [sp, #108]	; 0x6c
   16bd4:	add.w	r9, sp, #108	; 0x6c
   16bd8:	mov	r3, r1
   16bda:	b.w	16178 <_vfiprintf_r+0x448>
   16bde:	ldr	r3, [sp, #28]
   16be0:	ldr	r1, [sp, #20]
   16be2:	ldr.w	r2, [r3], #4
   16be6:	str	r3, [sp, #28]
   16be8:	strh	r1, [r2, #0]
   16bea:	b.w	15dc6 <_vfiprintf_r+0x96>
   16bee:	adds	r1, r3, #1
   16bf0:	mov	r0, fp
   16bf2:	bl	cf88 <_malloc_r>
   16bf6:	mov	r4, r0
   16bf8:	cmp	r0, #0
   16bfa:	beq.n	16c76 <_vfiprintf_r+0xf46>
   16bfc:	str	r0, [sp, #32]
   16bfe:	b.n	16b2c <_vfiprintf_r+0xdfc>
   16c00:	ldr	r0, [r1, #88]	; 0x58
   16c02:	bl	f13c <__retarget_lock_release_recursive>
   16c06:	b.w	15fdc <_vfiprintf_r+0x2ac>
   16c0a:	ldr	r3, [sp, #12]
   16c0c:	str	r3, [sp, #28]
   16c0e:	strd	r7, r7, [sp, #12]
   16c12:	ldr	r7, [sp, #32]
   16c14:	b.w	15f90 <_vfiprintf_r+0x260>
   16c18:	ldr	r0, [sp, #100]	; 0x64
   16c1a:	ldr	r3, [sp, #104]	; 0x68
   16c1c:	adds	r0, #1
   16c1e:	b.n	166ac <_vfiprintf_r+0x97c>
   16c20:	ldr	r3, [sp, #12]
   16c22:	str	r3, [sp, #28]
   16c24:	mov	r0, r4
   16c26:	bl	f580 <strlen>
   16c2a:	bic.w	r3, r0, r0, asr #31
   16c2e:	mov	r7, r5
   16c30:	str	r0, [sp, #16]
   16c32:	str	r3, [sp, #12]
   16c34:	str	r5, [sp, #32]
   16c36:	b.w	15f90 <_vfiprintf_r+0x260>
   16c3a:	vmov	r1, s16
   16c3e:	add	r2, sp, #96	; 0x60
   16c40:	mov	r0, fp
   16c42:	bl	15cb8 <__sprint_r.part.0>
   16c46:	cmp	r0, #0
   16c48:	beq.w	160b8 <_vfiprintf_r+0x388>
   16c4c:	b.w	160ea <_vfiprintf_r+0x3ba>
   16c50:	ldr	r0, [sp, #100]	; 0x64
   16c52:	adds	r0, #1
   16c54:	b.n	1674c <_vfiprintf_r+0xa1c>
   16c56:	mov	ip, r1
   16c58:	b.n	16538 <_vfiprintf_r+0x808>
   16c5a:	ldr	r3, [r5, #100]	; 0x64
   16c5c:	lsls	r1, r3, #31
   16c5e:	bmi.n	16c6c <_vfiprintf_r+0xf3c>
   16c60:	ldrh	r3, [r5, #12]
   16c62:	lsls	r2, r3, #22
   16c64:	bmi.n	16c6c <_vfiprintf_r+0xf3c>
   16c66:	ldr	r0, [r5, #88]	; 0x58
   16c68:	bl	f13c <__retarget_lock_release_recursive>
   16c6c:	mov.w	r3, #4294967295
   16c70:	str	r3, [sp, #20]
   16c72:	b.w	16108 <_vfiprintf_r+0x3d8>
   16c76:	vmov	r2, s16
   16c7a:	ldrsh.w	r3, [r2, #12]
   16c7e:	orr.w	r3, r3, #64	; 0x40
   16c82:	strh	r3, [r2, #12]
   16c84:	b.w	160f2 <_vfiprintf_r+0x3c2>
   16c88:	ldr	r4, [sp, #28]
   16c8a:	str	r7, [sp, #16]
   16c8c:	b.n	16b1c <_vfiprintf_r+0xdec>
   16c8e:	ldr	r3, [sp, #28]
   16c90:	ldrb.w	r1, [r8, #1]
   16c94:	ldr.w	r7, [r3], #4
   16c98:	str	r3, [sp, #28]
   16c9a:	mov	r8, r2
   16c9c:	orr.w	r7, r7, r7, asr #31
   16ca0:	b.w	15e16 <_vfiprintf_r+0xe6>
   16ca4:	vmov	r2, s16
   16ca8:	ldrh	r3, [r2, #12]
   16caa:	orr.w	r3, r3, #64	; 0x40
   16cae:	strh	r3, [r2, #12]
   16cb0:	b.w	160de <_vfiprintf_r+0x3ae>
   16cb4:	.word	0xcccccccd
   16cb8:	.word	0x200009f4

00016cbc <__sbprintf>:
   16cbc:	push	{r4, r5, r6, lr}
   16cbe:	mov	r4, r1
   16cc0:	ldrh	r1, [r1, #12]
   16cc2:	sub.w	sp, sp, #1136	; 0x470
   16cc6:	bic.w	r1, r1, #2
   16cca:	strh.w	r1, [sp, #20]
   16cce:	ldr	r1, [r4, #100]	; 0x64
   16cd0:	str	r1, [sp, #108]	; 0x6c
   16cd2:	ldrh	r1, [r4, #14]
   16cd4:	strh.w	r1, [sp, #22]
   16cd8:	ldr	r1, [r4, #28]
   16cda:	str	r1, [sp, #36]	; 0x24
   16cdc:	ldr	r1, [r4, #36]	; 0x24
   16cde:	str	r1, [sp, #44]	; 0x2c
   16ce0:	add	r1, sp, #112	; 0x70
   16ce2:	str	r1, [sp, #8]
   16ce4:	str	r1, [sp, #24]
   16ce6:	mov.w	r1, #1024	; 0x400
   16cea:	mov	r6, r0
   16cec:	str	r1, [sp, #16]
   16cee:	str	r1, [sp, #28]
   16cf0:	add	r0, sp, #96	; 0x60
   16cf2:	movs	r1, #0
   16cf4:	strd	r3, r2, [sp]
   16cf8:	str	r1, [sp, #32]
   16cfa:	bl	f130 <__retarget_lock_init_recursive>
   16cfe:	ldrd	r3, r2, [sp]
   16d02:	add	r1, sp, #8
   16d04:	mov	r0, r6
   16d06:	bl	15d30 <_vfiprintf_r>
   16d0a:	subs	r5, r0, #0
   16d0c:	blt.n	16d1e <__sbprintf+0x62>
   16d0e:	add	r1, sp, #8
   16d10:	mov	r0, r6
   16d12:	bl	142bc <_fflush_r>
   16d16:	cmp	r0, #0
   16d18:	it	ne
   16d1a:	movne.w	r5, #4294967295
   16d1e:	ldrh.w	r3, [sp, #20]
   16d22:	lsls	r3, r3, #25
   16d24:	bpl.n	16d2e <__sbprintf+0x72>
   16d26:	ldrh	r3, [r4, #12]
   16d28:	orr.w	r3, r3, #64	; 0x40
   16d2c:	strh	r3, [r4, #12]
   16d2e:	ldr	r0, [sp, #96]	; 0x60
   16d30:	bl	f134 <__retarget_lock_close_recursive>
   16d34:	mov	r0, r5
   16d36:	add.w	sp, sp, #1136	; 0x470
   16d3a:	pop	{r4, r5, r6, pc}

00016d3c <__sfvwrite_r>:
   16d3c:	ldr	r3, [r2, #8]
   16d3e:	cmp	r3, #0
   16d40:	beq.w	16e4e <__sfvwrite_r+0x112>
   16d44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d48:	ldrsh.w	r3, [r1, #12]
   16d4c:	mov	r4, r1
   16d4e:	lsls	r1, r3, #28
   16d50:	mov	r8, r0
   16d52:	sub	sp, #12
   16d54:	mov	r7, r2
   16d56:	uxth	r0, r3
   16d58:	bpl.n	16da6 <__sfvwrite_r+0x6a>
   16d5a:	ldr	r3, [r4, #16]
   16d5c:	cbz	r3, 16da6 <__sfvwrite_r+0x6a>
   16d5e:	ands.w	r3, r0, #2
   16d62:	ldr	r5, [r7, #0]
   16d64:	beq.n	16dc2 <__sfvwrite_r+0x86>
   16d66:	mov.w	sl, #0
   16d6a:	ldr.w	fp, [pc, #704]	; 1702c <__sfvwrite_r+0x2f0>
   16d6e:	mov	r6, sl
   16d70:	mov	r9, r7
   16d72:	cmp	r6, fp
   16d74:	mov	r3, r6
   16d76:	mov	r2, sl
   16d78:	it	cs
   16d7a:	movcs	r3, fp
   16d7c:	mov	r0, r8
   16d7e:	cmp	r6, #0
   16d80:	beq.n	16e28 <__sfvwrite_r+0xec>
   16d82:	ldr	r1, [r4, #28]
   16d84:	ldr	r7, [r4, #36]	; 0x24
   16d86:	blx	r7
   16d88:	cmp	r0, #0
   16d8a:	ble.n	16e3a <__sfvwrite_r+0xfe>
   16d8c:	ldr.w	r3, [r9, #8]
   16d90:	subs	r3, r3, r0
   16d92:	add	sl, r0
   16d94:	subs	r6, r6, r0
   16d96:	str.w	r3, [r9, #8]
   16d9a:	cmp	r3, #0
   16d9c:	bne.n	16d72 <__sfvwrite_r+0x36>
   16d9e:	movs	r0, #0
   16da0:	add	sp, #12
   16da2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16da6:	mov	r1, r4
   16da8:	mov	r0, r8
   16daa:	bl	170a8 <__swsetup_r>
   16dae:	cmp	r0, #0
   16db0:	bne.w	17024 <__sfvwrite_r+0x2e8>
   16db4:	ldrsh.w	r3, [r4, #12]
   16db8:	ldr	r5, [r7, #0]
   16dba:	uxth	r0, r3
   16dbc:	ands.w	r3, r0, #2
   16dc0:	bne.n	16d66 <__sfvwrite_r+0x2a>
   16dc2:	ands.w	r9, r0, #1
   16dc6:	bne.n	16e52 <__sfvwrite_r+0x116>
   16dc8:	mov	r6, r9
   16dca:	str	r7, [sp, #0]
   16dcc:	cbz	r6, 16e20 <__sfvwrite_r+0xe4>
   16dce:	lsls	r2, r0, #22
   16dd0:	ldr.w	fp, [r4, #8]
   16dd4:	bpl.w	16ee2 <__sfvwrite_r+0x1a6>
   16dd8:	cmp	fp, r6
   16dda:	mov	r2, fp
   16ddc:	bhi.w	16f48 <__sfvwrite_r+0x20c>
   16de0:	tst.w	r0, #1152	; 0x480
   16de4:	bne.w	16f6a <__sfvwrite_r+0x22e>
   16de8:	ldr	r0, [r4, #0]
   16dea:	str	r2, [sp, #4]
   16dec:	mov	r1, r9
   16dee:	bl	ed70 <memmove>
   16df2:	ldr	r3, [r4, #8]
   16df4:	ldr	r2, [sp, #4]
   16df6:	sub.w	r1, r3, fp
   16dfa:	ldr	r3, [r4, #0]
   16dfc:	str	r1, [r4, #8]
   16dfe:	add	r3, r2
   16e00:	mov	sl, r6
   16e02:	str	r3, [r4, #0]
   16e04:	movs	r6, #0
   16e06:	ldr	r2, [sp, #0]
   16e08:	ldr	r3, [r2, #8]
   16e0a:	sub.w	r3, r3, sl
   16e0e:	add	r9, sl
   16e10:	str	r3, [r2, #8]
   16e12:	cmp	r3, #0
   16e14:	beq.n	16d9e <__sfvwrite_r+0x62>
   16e16:	ldrsh.w	r0, [r4, #12]
   16e1a:	uxth	r0, r0
   16e1c:	cmp	r6, #0
   16e1e:	bne.n	16dce <__sfvwrite_r+0x92>
   16e20:	ldrd	r9, r6, [r5]
   16e24:	adds	r5, #8
   16e26:	b.n	16dcc <__sfvwrite_r+0x90>
   16e28:	ldrd	sl, r6, [r5]
   16e2c:	adds	r5, #8
   16e2e:	b.n	16d72 <__sfvwrite_r+0x36>
   16e30:	mov	r1, r4
   16e32:	mov	r0, r8
   16e34:	bl	142bc <_fflush_r>
   16e38:	cbz	r0, 16e9e <__sfvwrite_r+0x162>
   16e3a:	ldrsh.w	r3, [r4, #12]
   16e3e:	orr.w	r3, r3, #64	; 0x40
   16e42:	mov.w	r0, #4294967295
   16e46:	strh	r3, [r4, #12]
   16e48:	add	sp, #12
   16e4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e4e:	movs	r0, #0
   16e50:	bx	lr
   16e52:	mov	r6, r3
   16e54:	mov	sl, r7
   16e56:	mov	r9, r3
   16e58:	mov	r0, r3
   16e5a:	str	r5, [sp, #0]
   16e5c:	mov	r7, r3
   16e5e:	cbz	r6, 16eba <__sfvwrite_r+0x17e>
   16e60:	cmp	r0, #0
   16e62:	beq.n	16eca <__sfvwrite_r+0x18e>
   16e64:	mov	r2, r9
   16e66:	ldrd	r1, r3, [r4, #16]
   16e6a:	ldr	r0, [r4, #0]
   16e6c:	ldr	r5, [r4, #8]
   16e6e:	cmp	r2, r6
   16e70:	it	cs
   16e72:	movcs	r2, r6
   16e74:	cmp	r0, r1
   16e76:	bls.n	16e82 <__sfvwrite_r+0x146>
   16e78:	add.w	fp, r5, r3
   16e7c:	cmp	r2, fp
   16e7e:	bgt.w	16fd0 <__sfvwrite_r+0x294>
   16e82:	cmp	r3, r2
   16e84:	bgt.n	16f50 <__sfvwrite_r+0x214>
   16e86:	ldr	r1, [r4, #28]
   16e88:	ldr	r5, [r4, #36]	; 0x24
   16e8a:	mov	r2, r7
   16e8c:	mov	r0, r8
   16e8e:	blx	r5
   16e90:	subs.w	fp, r0, #0
   16e94:	ble.n	16e3a <__sfvwrite_r+0xfe>
   16e96:	subs.w	r9, r9, fp
   16e9a:	beq.n	16e30 <__sfvwrite_r+0xf4>
   16e9c:	movs	r0, #1
   16e9e:	ldr.w	r3, [sl, #8]
   16ea2:	sub.w	r3, r3, fp
   16ea6:	add	r7, fp
   16ea8:	sub.w	r6, r6, fp
   16eac:	str.w	r3, [sl, #8]
   16eb0:	cmp	r3, #0
   16eb2:	beq.w	16d9e <__sfvwrite_r+0x62>
   16eb6:	cmp	r6, #0
   16eb8:	bne.n	16e60 <__sfvwrite_r+0x124>
   16eba:	ldr	r2, [sp, #0]
   16ebc:	ldr	r6, [r2, #4]
   16ebe:	mov	r3, r2
   16ec0:	adds	r2, #8
   16ec2:	str	r2, [sp, #0]
   16ec4:	cmp	r6, #0
   16ec6:	beq.n	16eba <__sfvwrite_r+0x17e>
   16ec8:	ldr	r7, [r3, #0]
   16eca:	mov	r2, r6
   16ecc:	movs	r1, #10
   16ece:	mov	r0, r7
   16ed0:	bl	f4e0 <memchr>
   16ed4:	cmp	r0, #0
   16ed6:	beq.w	17012 <__sfvwrite_r+0x2d6>
   16eda:	adds	r0, #1
   16edc:	sub.w	r9, r0, r7
   16ee0:	b.n	16e64 <__sfvwrite_r+0x128>
   16ee2:	ldr	r0, [r4, #0]
   16ee4:	ldr	r3, [r4, #16]
   16ee6:	cmp	r0, r3
   16ee8:	bhi.n	16f18 <__sfvwrite_r+0x1dc>
   16eea:	ldr	r2, [r4, #20]
   16eec:	cmp	r2, r6
   16eee:	bhi.n	16f18 <__sfvwrite_r+0x1dc>
   16ef0:	mvn.w	r3, #2147483648	; 0x80000000
   16ef4:	cmp	r3, r6
   16ef6:	it	cs
   16ef8:	movcs	r3, r6
   16efa:	ldr	r1, [r4, #28]
   16efc:	sdiv	r3, r3, r2
   16f00:	ldr	r7, [r4, #36]	; 0x24
   16f02:	mul.w	r3, r2, r3
   16f06:	mov	r0, r8
   16f08:	mov	r2, r9
   16f0a:	blx	r7
   16f0c:	subs.w	sl, r0, #0
   16f10:	ble.n	16e3a <__sfvwrite_r+0xfe>
   16f12:	sub.w	r6, r6, sl
   16f16:	b.n	16e06 <__sfvwrite_r+0xca>
   16f18:	cmp	fp, r6
   16f1a:	mov	sl, fp
   16f1c:	it	cs
   16f1e:	movcs	sl, r6
   16f20:	mov	r2, sl
   16f22:	mov	r1, r9
   16f24:	bl	ed70 <memmove>
   16f28:	ldr	r3, [r4, #8]
   16f2a:	ldr	r2, [r4, #0]
   16f2c:	sub.w	r3, r3, sl
   16f30:	add	r2, sl
   16f32:	str	r3, [r4, #8]
   16f34:	str	r2, [r4, #0]
   16f36:	cmp	r3, #0
   16f38:	bne.n	16f12 <__sfvwrite_r+0x1d6>
   16f3a:	mov	r1, r4
   16f3c:	mov	r0, r8
   16f3e:	bl	142bc <_fflush_r>
   16f42:	cmp	r0, #0
   16f44:	beq.n	16f12 <__sfvwrite_r+0x1d6>
   16f46:	b.n	16e3a <__sfvwrite_r+0xfe>
   16f48:	ldr	r0, [r4, #0]
   16f4a:	mov	fp, r6
   16f4c:	mov	r2, r6
   16f4e:	b.n	16dea <__sfvwrite_r+0xae>
   16f50:	mov	r1, r7
   16f52:	str	r2, [sp, #4]
   16f54:	bl	ed70 <memmove>
   16f58:	ldr	r2, [sp, #4]
   16f5a:	ldr	r3, [r4, #8]
   16f5c:	subs	r3, r3, r2
   16f5e:	str	r3, [r4, #8]
   16f60:	ldr	r3, [r4, #0]
   16f62:	add	r3, r2
   16f64:	str	r3, [r4, #0]
   16f66:	mov	fp, r2
   16f68:	b.n	16e96 <__sfvwrite_r+0x15a>
   16f6a:	ldr	r3, [r4, #0]
   16f6c:	ldr	r1, [r4, #16]
   16f6e:	sub.w	fp, r3, r1
   16f72:	ldr	r3, [r4, #20]
   16f74:	add.w	sl, r3, r3, lsl #1
   16f78:	add.w	sl, sl, sl, lsr #31
   16f7c:	add.w	r3, fp, #1
   16f80:	mov.w	sl, sl, asr #1
   16f84:	add	r3, r6
   16f86:	cmp	r3, sl
   16f88:	mov	r2, sl
   16f8a:	itt	hi
   16f8c:	movhi	sl, r3
   16f8e:	movhi	r2, sl
   16f90:	lsls	r3, r0, #21
   16f92:	bpl.n	16fee <__sfvwrite_r+0x2b2>
   16f94:	mov	r1, r2
   16f96:	mov	r0, r8
   16f98:	bl	cf88 <_malloc_r>
   16f9c:	cmp	r0, #0
   16f9e:	beq.n	17018 <__sfvwrite_r+0x2dc>
   16fa0:	mov	r2, fp
   16fa2:	ldr	r1, [r4, #16]
   16fa4:	str	r0, [sp, #4]
   16fa6:	bl	a56c <memcpy>
   16faa:	ldrh	r2, [r4, #12]
   16fac:	ldr	r3, [sp, #4]
   16fae:	bic.w	r2, r2, #1152	; 0x480
   16fb2:	orr.w	r2, r2, #128	; 0x80
   16fb6:	strh	r2, [r4, #12]
   16fb8:	add.w	r0, r3, fp
   16fbc:	str	r3, [r4, #16]
   16fbe:	sub.w	r3, sl, fp
   16fc2:	str.w	sl, [r4, #20]
   16fc6:	str	r3, [r4, #8]
   16fc8:	str	r0, [r4, #0]
   16fca:	mov	fp, r6
   16fcc:	mov	r2, r6
   16fce:	b.n	16dea <__sfvwrite_r+0xae>
   16fd0:	mov	r1, r7
   16fd2:	mov	r2, fp
   16fd4:	bl	ed70 <memmove>
   16fd8:	ldr	r3, [r4, #0]
   16fda:	add	r3, fp
   16fdc:	str	r3, [r4, #0]
   16fde:	mov	r1, r4
   16fe0:	mov	r0, r8
   16fe2:	bl	142bc <_fflush_r>
   16fe6:	cmp	r0, #0
   16fe8:	beq.w	16e96 <__sfvwrite_r+0x15a>
   16fec:	b.n	16e3a <__sfvwrite_r+0xfe>
   16fee:	mov	r0, r8
   16ff0:	bl	d518 <_realloc_r>
   16ff4:	mov	r3, r0
   16ff6:	cmp	r0, #0
   16ff8:	bne.n	16fb8 <__sfvwrite_r+0x27c>
   16ffa:	ldr	r1, [r4, #16]
   16ffc:	mov	r0, r8
   16ffe:	bl	f7a4 <_free_r>
   17002:	ldrsh.w	r3, [r4, #12]
   17006:	movs	r2, #12
   17008:	bic.w	r3, r3, #128	; 0x80
   1700c:	str.w	r2, [r8]
   17010:	b.n	16e3e <__sfvwrite_r+0x102>
   17012:	adds	r2, r6, #1
   17014:	mov	r9, r2
   17016:	b.n	16e66 <__sfvwrite_r+0x12a>
   17018:	movs	r2, #12
   1701a:	ldrsh.w	r3, [r4, #12]
   1701e:	str.w	r2, [r8]
   17022:	b.n	16e3e <__sfvwrite_r+0x102>
   17024:	mov.w	r0, #4294967295
   17028:	b.n	16da0 <__sfvwrite_r+0x64>
   1702a:	nop
   1702c:	.word	0x7ffffc00

00017030 <__submore>:
   17030:	add.w	r3, r1, #64	; 0x40
   17034:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17038:	mov	r4, r1
   1703a:	ldr	r1, [r1, #48]	; 0x30
   1703c:	cmp	r1, r3
   1703e:	beq.n	1706a <__submore+0x3a>
   17040:	ldr	r6, [r4, #52]	; 0x34
   17042:	lsls	r7, r6, #1
   17044:	mov	r2, r7
   17046:	bl	d518 <_realloc_r>
   1704a:	mov	r5, r0
   1704c:	cbz	r0, 170a0 <__submore+0x70>
   1704e:	add.w	r8, r0, r6
   17052:	mov	r1, r0
   17054:	mov	r2, r6
   17056:	mov	r0, r8
   17058:	bl	a56c <memcpy>
   1705c:	strd	r5, r7, [r4, #48]	; 0x30
   17060:	str.w	r8, [r4]
   17064:	movs	r0, #0
   17066:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1706a:	mov.w	r1, #1024	; 0x400
   1706e:	bl	cf88 <_malloc_r>
   17072:	cbz	r0, 170a0 <__submore+0x70>
   17074:	ldrb.w	r3, [r4, #66]	; 0x42
   17078:	mov.w	r2, #1024	; 0x400
   1707c:	strd	r0, r2, [r4, #48]	; 0x30
   17080:	strb.w	r3, [r0, #1023]	; 0x3ff
   17084:	ldrb.w	r3, [r4, #65]	; 0x41
   17088:	strb.w	r3, [r0, #1022]	; 0x3fe
   1708c:	ldrb.w	r2, [r4, #64]	; 0x40
   17090:	strb.w	r2, [r0, #1021]	; 0x3fd
   17094:	addw	r3, r0, #1021	; 0x3fd
   17098:	str	r3, [r4, #0]
   1709a:	movs	r0, #0
   1709c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   170a0:	mov.w	r0, #4294967295
   170a4:	b.n	17066 <__submore+0x36>
   170a6:	nop

000170a8 <__swsetup_r>:
   170a8:	push	{r3, r4, r5, lr}
   170aa:	ldr	r3, [pc, #196]	; (17170 <__swsetup_r+0xc8>)
   170ac:	ldr	r3, [r3, #0]
   170ae:	mov	r5, r0
   170b0:	mov	r4, r1
   170b2:	cbz	r3, 170ba <__swsetup_r+0x12>
   170b4:	ldr	r2, [r3, #52]	; 0x34
   170b6:	cmp	r2, #0
   170b8:	beq.n	17158 <__swsetup_r+0xb0>
   170ba:	ldrsh.w	r3, [r4, #12]
   170be:	lsls	r0, r3, #28
   170c0:	uxth	r2, r3
   170c2:	bpl.n	170fe <__swsetup_r+0x56>
   170c4:	ldr	r1, [r4, #16]
   170c6:	cbz	r1, 17114 <__swsetup_r+0x6c>
   170c8:	ands.w	r0, r2, #1
   170cc:	beq.n	170de <__swsetup_r+0x36>
   170ce:	movs	r0, #0
   170d0:	str	r0, [r4, #8]
   170d2:	ldr	r0, [r4, #20]
   170d4:	negs	r0, r0
   170d6:	str	r0, [r4, #24]
   170d8:	cbz	r1, 170ea <__swsetup_r+0x42>
   170da:	movs	r0, #0
   170dc:	pop	{r3, r4, r5, pc}
   170de:	lsls	r5, r2, #30
   170e0:	it	pl
   170e2:	ldrpl	r0, [r4, #20]
   170e4:	str	r0, [r4, #8]
   170e6:	cmp	r1, #0
   170e8:	bne.n	170da <__swsetup_r+0x32>
   170ea:	lsls	r2, r2, #24
   170ec:	it	pl
   170ee:	movpl	r0, r1
   170f0:	bpl.n	170dc <__swsetup_r+0x34>
   170f2:	orr.w	r3, r3, #64	; 0x40
   170f6:	strh	r3, [r4, #12]
   170f8:	mov.w	r0, #4294967295
   170fc:	pop	{r3, r4, r5, pc}
   170fe:	lsls	r1, r2, #27
   17100:	bpl.n	17160 <__swsetup_r+0xb8>
   17102:	lsls	r2, r2, #29
   17104:	bmi.n	17130 <__swsetup_r+0x88>
   17106:	ldr	r1, [r4, #16]
   17108:	orr.w	r3, r3, #8
   1710c:	strh	r3, [r4, #12]
   1710e:	uxth	r2, r3
   17110:	cmp	r1, #0
   17112:	bne.n	170c8 <__swsetup_r+0x20>
   17114:	and.w	r0, r2, #640	; 0x280
   17118:	cmp.w	r0, #512	; 0x200
   1711c:	beq.n	170c8 <__swsetup_r+0x20>
   1711e:	mov	r1, r4
   17120:	mov	r0, r5
   17122:	bl	17414 <__smakebuf_r>
   17126:	ldrsh.w	r3, [r4, #12]
   1712a:	ldr	r1, [r4, #16]
   1712c:	uxth	r2, r3
   1712e:	b.n	170c8 <__swsetup_r+0x20>
   17130:	ldr	r1, [r4, #48]	; 0x30
   17132:	cbz	r1, 1714a <__swsetup_r+0xa2>
   17134:	add.w	r2, r4, #64	; 0x40
   17138:	cmp	r1, r2
   1713a:	beq.n	17146 <__swsetup_r+0x9e>
   1713c:	mov	r0, r5
   1713e:	bl	f7a4 <_free_r>
   17142:	ldrsh.w	r3, [r4, #12]
   17146:	movs	r2, #0
   17148:	str	r2, [r4, #48]	; 0x30
   1714a:	ldr	r1, [r4, #16]
   1714c:	movs	r2, #0
   1714e:	strd	r1, r2, [r4]
   17152:	bic.w	r3, r3, #36	; 0x24
   17156:	b.n	17108 <__swsetup_r+0x60>
   17158:	mov	r0, r3
   1715a:	bl	e9f8 <__sinit>
   1715e:	b.n	170ba <__swsetup_r+0x12>
   17160:	movs	r2, #9
   17162:	orr.w	r3, r3, #64	; 0x40
   17166:	str	r2, [r5, #0]
   17168:	mov.w	r0, #4294967295
   1716c:	strh	r3, [r4, #12]
   1716e:	pop	{r3, r4, r5, pc}
   17170:	.word	0x200093cc

00017174 <__fputwc>:
   17174:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17178:	sub	sp, #8
   1717a:	mov	sl, r0
   1717c:	mov	r8, r1
   1717e:	mov	r4, r2
   17180:	bl	f004 <__locale_mb_cur_max>
   17184:	cmp	r0, #1
   17186:	bne.n	17190 <__fputwc+0x1c>
   17188:	add.w	r3, r8, #4294967295
   1718c:	cmp	r3, #254	; 0xfe
   1718e:	bls.n	171fe <__fputwc+0x8a>
   17190:	add.w	r9, sp, #4
   17194:	mov	r2, r8
   17196:	add.w	r3, r4, #92	; 0x5c
   1719a:	mov	r1, r9
   1719c:	mov	r0, sl
   1719e:	bl	157f4 <_wcrtomb_r>
   171a2:	adds	r2, r0, #1
   171a4:	mov	r6, r0
   171a6:	beq.n	1720e <__fputwc+0x9a>
   171a8:	cbz	r0, 171f4 <__fputwc+0x80>
   171aa:	ldrb.w	ip, [sp, #4]
   171ae:	movs	r5, #0
   171b0:	b.n	171c6 <__fputwc+0x52>
   171b2:	ldr	r3, [r4, #0]
   171b4:	adds	r2, r3, #1
   171b6:	str	r2, [r4, #0]
   171b8:	strb.w	ip, [r3]
   171bc:	adds	r5, #1
   171be:	cmp	r5, r6
   171c0:	bcs.n	171f4 <__fputwc+0x80>
   171c2:	ldrb.w	ip, [r9, #1]!
   171c6:	ldr	r3, [r4, #8]
   171c8:	subs	r3, #1
   171ca:	cmp	r3, #0
   171cc:	str	r3, [r4, #8]
   171ce:	bge.n	171b2 <__fputwc+0x3e>
   171d0:	ldr	r7, [r4, #24]
   171d2:	cmp	r3, r7
   171d4:	mov	r1, ip
   171d6:	mov	r2, r4
   171d8:	mov	r0, sl
   171da:	blt.n	171e2 <__fputwc+0x6e>
   171dc:	cmp.w	ip, #10
   171e0:	bne.n	171b2 <__fputwc+0x3e>
   171e2:	bl	174ec <__swbuf_r>
   171e6:	adds	r3, r0, #1
   171e8:	bne.n	171bc <__fputwc+0x48>
   171ea:	mov	r6, r0
   171ec:	mov	r0, r6
   171ee:	add	sp, #8
   171f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   171f4:	mov	r6, r8
   171f6:	mov	r0, r6
   171f8:	add	sp, #8
   171fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   171fe:	uxtb.w	ip, r8
   17202:	strb.w	ip, [sp, #4]
   17206:	mov	r6, r0
   17208:	add.w	r9, sp, #4
   1720c:	b.n	171ae <__fputwc+0x3a>
   1720e:	ldrh	r3, [r4, #12]
   17210:	mov	r0, r6
   17212:	orr.w	r3, r3, #64	; 0x40
   17216:	strh	r3, [r4, #12]
   17218:	add	sp, #8
   1721a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1721e:	nop

00017220 <_fputwc_r>:
   17220:	push	{r4, r5, lr}
   17222:	ldr	r3, [r2, #100]	; 0x64
   17224:	tst.w	r3, #1
   17228:	ldrsh.w	r3, [r2, #12]
   1722c:	mov	r4, r2
   1722e:	sub	sp, #12
   17230:	mov	r5, r0
   17232:	uxth	r2, r3
   17234:	bne.n	1723a <_fputwc_r+0x1a>
   17236:	lsls	r0, r3, #22
   17238:	bpl.n	17274 <_fputwc_r+0x54>
   1723a:	lsls	r0, r2, #18
   1723c:	bmi.n	1724c <_fputwc_r+0x2c>
   1723e:	ldr	r2, [r4, #100]	; 0x64
   17240:	orr.w	r3, r3, #8192	; 0x2000
   17244:	orr.w	r2, r2, #8192	; 0x2000
   17248:	strh	r3, [r4, #12]
   1724a:	str	r2, [r4, #100]	; 0x64
   1724c:	mov	r2, r4
   1724e:	mov	r0, r5
   17250:	bl	17174 <__fputwc>
   17254:	ldr	r3, [r4, #100]	; 0x64
   17256:	lsls	r2, r3, #31
   17258:	mov	r5, r0
   1725a:	bmi.n	17262 <_fputwc_r+0x42>
   1725c:	ldrh	r3, [r4, #12]
   1725e:	lsls	r3, r3, #22
   17260:	bpl.n	17268 <_fputwc_r+0x48>
   17262:	mov	r0, r5
   17264:	add	sp, #12
   17266:	pop	{r4, r5, pc}
   17268:	ldr	r0, [r4, #88]	; 0x58
   1726a:	bl	f13c <__retarget_lock_release_recursive>
   1726e:	mov	r0, r5
   17270:	add	sp, #12
   17272:	pop	{r4, r5, pc}
   17274:	ldr	r0, [r4, #88]	; 0x58
   17276:	str	r1, [sp, #4]
   17278:	bl	f138 <__retarget_lock_acquire_recursive>
   1727c:	ldrsh.w	r3, [r4, #12]
   17280:	ldr	r1, [sp, #4]
   17282:	uxth	r2, r3
   17284:	b.n	1723a <_fputwc_r+0x1a>
   17286:	nop

00017288 <_wcsnrtombs_l>:
   17288:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1728c:	sub	sp, #44	; 0x2c
   1728e:	ldrd	r8, sl, [sp, #84]	; 0x54
   17292:	ldr	r7, [sp, #80]	; 0x50
   17294:	str	r1, [sp, #12]
   17296:	mov	r9, r0
   17298:	str	r2, [sp, #20]
   1729a:	mov	r6, r3
   1729c:	cmp.w	r8, #0
   172a0:	beq.n	1735c <_wcsnrtombs_l+0xd4>
   172a2:	ldr	r3, [sp, #12]
   172a4:	cmp	r3, #0
   172a6:	beq.n	17366 <_wcsnrtombs_l+0xde>
   172a8:	ldr	r3, [sp, #20]
   172aa:	ldr	r5, [r3, #0]
   172ac:	cmp	r7, #0
   172ae:	beq.n	17386 <_wcsnrtombs_l+0xfe>
   172b0:	subs	r4, r6, #1
   172b2:	cbz	r6, 17308 <_wcsnrtombs_l+0x80>
   172b4:	ldr	r3, [sp, #12]
   172b6:	str	r3, [sp, #16]
   172b8:	subs	r5, #4
   172ba:	movs	r6, #0
   172bc:	str	r5, [sp, #4]
   172be:	b.n	172d8 <_wcsnrtombs_l+0x50>
   172c0:	ldr	r3, [sp, #12]
   172c2:	cbnz	r3, 17310 <_wcsnrtombs_l+0x88>
   172c4:	ldr	r3, [sp, #4]
   172c6:	ldr	r2, [r3, #0]
   172c8:	cmp	r2, #0
   172ca:	beq.n	17342 <_wcsnrtombs_l+0xba>
   172cc:	cmp	ip, r7
   172ce:	bcs.n	1738a <_wcsnrtombs_l+0x102>
   172d0:	subs	r4, #1
   172d2:	adds	r3, r4, #1
   172d4:	mov	r6, ip
   172d6:	beq.n	17308 <_wcsnrtombs_l+0x80>
   172d8:	ldr.w	r3, [r8]
   172dc:	str	r3, [sp, #8]
   172de:	ldr	r3, [sp, #4]
   172e0:	ldr.w	r5, [sl, #224]	; 0xe0
   172e4:	ldr.w	r2, [r3, #4]!
   172e8:	str	r3, [sp, #4]
   172ea:	add	r1, sp, #28
   172ec:	mov	r3, r8
   172ee:	mov	r0, r9
   172f0:	ldr.w	fp, [r8, #4]
   172f4:	blx	r5
   172f6:	adds	r2, r0, #1
   172f8:	beq.n	17370 <_wcsnrtombs_l+0xe8>
   172fa:	add.w	ip, r0, r6
   172fe:	cmp	ip, r7
   17300:	bls.n	172c0 <_wcsnrtombs_l+0x38>
   17302:	ldr	r3, [sp, #8]
   17304:	strd	r3, fp, [r8]
   17308:	mov	r0, r6
   1730a:	add	sp, #44	; 0x2c
   1730c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17310:	cmp	r0, #0
   17312:	ble.n	17332 <_wcsnrtombs_l+0xaa>
   17314:	ldr	r3, [sp, #16]
   17316:	ldr	r5, [sp, #4]
   17318:	add	r0, r3
   1731a:	subs	r2, r3, #1
   1731c:	add	r1, sp, #28
   1731e:	add.w	lr, r0, #4294967295
   17322:	ldrb.w	r3, [r1], #1
   17326:	strb.w	r3, [r2, #1]!
   1732a:	cmp	r2, lr
   1732c:	bne.n	17322 <_wcsnrtombs_l+0x9a>
   1732e:	str	r5, [sp, #4]
   17330:	str	r0, [sp, #16]
   17332:	ldr	r3, [sp, #20]
   17334:	ldr	r2, [r3, #0]
   17336:	adds	r2, #4
   17338:	str	r2, [r3, #0]
   1733a:	ldr	r3, [sp, #4]
   1733c:	ldr	r2, [r3, #0]
   1733e:	cmp	r2, #0
   17340:	bne.n	172cc <_wcsnrtombs_l+0x44>
   17342:	ldr	r3, [sp, #12]
   17344:	cbz	r3, 1734a <_wcsnrtombs_l+0xc2>
   17346:	ldr	r3, [sp, #20]
   17348:	str	r2, [r3, #0]
   1734a:	add.w	r6, ip, #4294967295
   1734e:	movs	r2, #0
   17350:	mov	r0, r6
   17352:	str.w	r2, [r8]
   17356:	add	sp, #44	; 0x2c
   17358:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1735c:	ldr	r3, [sp, #12]
   1735e:	add.w	r8, r0, #268	; 0x10c
   17362:	cmp	r3, #0
   17364:	bne.n	172a8 <_wcsnrtombs_l+0x20>
   17366:	ldr	r3, [sp, #20]
   17368:	mov.w	r7, #4294967295
   1736c:	ldr	r5, [r3, #0]
   1736e:	b.n	172b0 <_wcsnrtombs_l+0x28>
   17370:	mov	r6, r0
   17372:	movs	r1, #138	; 0x8a
   17374:	movs	r2, #0
   17376:	mov	r0, r6
   17378:	str.w	r1, [r9]
   1737c:	str.w	r2, [r8]
   17380:	add	sp, #44	; 0x2c
   17382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17386:	mov	r6, r7
   17388:	b.n	17308 <_wcsnrtombs_l+0x80>
   1738a:	mov	r6, ip
   1738c:	b.n	17308 <_wcsnrtombs_l+0x80>
   1738e:	nop

00017390 <_wcsnrtombs_r>:
   17390:	push	{r4, lr}
   17392:	sub	sp, #16
   17394:	ldr	r4, [pc, #20]	; (173ac <_wcsnrtombs_r+0x1c>)
   17396:	ldr	r0, [sp, #24]
   17398:	str	r0, [sp, #0]
   1739a:	ldr	r0, [sp, #28]
   1739c:	str	r0, [sp, #4]
   1739e:	ldr	r0, [pc, #16]	; (173b0 <_wcsnrtombs_r+0x20>)
   173a0:	ldr	r0, [r0, #0]
   173a2:	str	r4, [sp, #8]
   173a4:	bl	17288 <_wcsnrtombs_l>
   173a8:	add	sp, #16
   173aa:	pop	{r4, pc}
   173ac:	.word	0x20008e44
   173b0:	.word	0x200093cc

000173b4 <category>:
   173b4:	ldr	r3, [pc, #84]	; (1740c <category+0x58>)
   173b6:	cmp	r0, r3
   173b8:	bhi.n	17402 <category+0x4e>
   173ba:	push	{r4, r5, r6, lr}
   173bc:	ldr	r6, [pc, #80]	; (17410 <category+0x5c>)
   173be:	mov.w	lr, #0
   173c2:	movw	r4, #2267	; 0x8db
   173c6:	b.n	173d0 <category+0x1c>
   173c8:	add.w	lr, r2, #1
   173cc:	cmp	lr, r4
   173ce:	bgt.n	173fe <category+0x4a>
   173d0:	add.w	r2, r4, lr
   173d4:	bic.w	r3, r2, #1
   173d8:	add.w	r3, r3, r2, asr #1
   173dc:	add.w	r3, r6, r3, lsl #1
   173e0:	asrs	r2, r2, #1
   173e2:	ldrb	r1, [r3, #1]
   173e4:	ldrh	r5, [r3, #2]
   173e6:	ldrh.w	ip, [r3, #4]
   173ea:	orr.w	r1, r1, r5, lsl #8
   173ee:	add	ip, r1
   173f0:	cmp	r0, ip
   173f2:	bhi.n	173c8 <category+0x14>
   173f4:	cmp	r0, r1
   173f6:	bcs.n	17406 <category+0x52>
   173f8:	subs	r4, r2, #1
   173fa:	cmp	lr, r4
   173fc:	ble.n	173d0 <category+0x1c>
   173fe:	movs	r0, #255	; 0xff
   17400:	pop	{r4, r5, r6, pc}
   17402:	movs	r0, #255	; 0xff
   17404:	bx	lr
   17406:	ldrb	r0, [r3, #0]
   17408:	pop	{r4, r5, r6, pc}
   1740a:	nop
   1740c:	.word	0x000e01ef
   17410:	.word	0x20002498

00017414 <__smakebuf_r>:
   17414:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17418:	ldrh	r3, [r1, #12]
   1741a:	mov	r4, r1
   1741c:	lsls	r1, r3, #30
   1741e:	sub	sp, #88	; 0x58
   17420:	bpl.n	17434 <__smakebuf_r+0x20>
   17422:	add.w	r3, r4, #67	; 0x43
   17426:	movs	r2, #1
   17428:	strd	r3, r2, [r4, #16]
   1742c:	str	r3, [r4, #0]
   1742e:	add	sp, #88	; 0x58
   17430:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17434:	ldrsh.w	r1, [r4, #14]
   17438:	cmp	r1, #0
   1743a:	mov	r6, r0
   1743c:	blt.n	1748a <__smakebuf_r+0x76>
   1743e:	mov	r2, sp
   17440:	bl	1759c <_fstat_r>
   17444:	cmp	r0, #0
   17446:	blt.n	17488 <__smakebuf_r+0x74>
   17448:	ldr	r5, [sp, #4]
   1744a:	and.w	r5, r5, #61440	; 0xf000
   1744e:	sub.w	r5, r5, #8192	; 0x2000
   17452:	clz	r5, r5
   17456:	mov.w	r8, #1024	; 0x400
   1745a:	lsrs	r5, r5, #5
   1745c:	mov.w	r7, #2048	; 0x800
   17460:	mov	r1, r8
   17462:	mov	r0, r6
   17464:	bl	cf88 <_malloc_r>
   17468:	cbz	r0, 174a4 <__smakebuf_r+0x90>
   1746a:	ldrsh.w	r3, [r4, #12]
   1746e:	str.w	r8, [r4, #20]
   17472:	orr.w	r3, r3, #128	; 0x80
   17476:	str	r0, [r4, #0]
   17478:	str	r0, [r4, #16]
   1747a:	strh	r3, [r4, #12]
   1747c:	cbnz	r5, 174cc <__smakebuf_r+0xb8>
   1747e:	orrs	r3, r7
   17480:	strh	r3, [r4, #12]
   17482:	add	sp, #88	; 0x58
   17484:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17488:	ldrh	r3, [r4, #12]
   1748a:	ands.w	r5, r3, #128	; 0x80
   1748e:	beq.n	174c4 <__smakebuf_r+0xb0>
   17490:	mov.w	r8, #64	; 0x40
   17494:	movs	r5, #0
   17496:	mov	r1, r8
   17498:	mov	r0, r6
   1749a:	mov	r7, r5
   1749c:	bl	cf88 <_malloc_r>
   174a0:	cmp	r0, #0
   174a2:	bne.n	1746a <__smakebuf_r+0x56>
   174a4:	ldrsh.w	r3, [r4, #12]
   174a8:	lsls	r2, r3, #22
   174aa:	bmi.n	1742e <__smakebuf_r+0x1a>
   174ac:	bic.w	r3, r3, #3
   174b0:	add.w	r2, r4, #67	; 0x43
   174b4:	orr.w	r3, r3, #2
   174b8:	movs	r1, #1
   174ba:	strd	r2, r1, [r4, #16]
   174be:	strh	r3, [r4, #12]
   174c0:	str	r2, [r4, #0]
   174c2:	b.n	1742e <__smakebuf_r+0x1a>
   174c4:	mov.w	r8, #1024	; 0x400
   174c8:	mov	r7, r5
   174ca:	b.n	17460 <__smakebuf_r+0x4c>
   174cc:	ldrsh.w	r1, [r4, #14]
   174d0:	mov	r0, r6
   174d2:	bl	175c8 <_isatty_r>
   174d6:	cbnz	r0, 174de <__smakebuf_r+0xca>
   174d8:	ldrsh.w	r3, [r4, #12]
   174dc:	b.n	1747e <__smakebuf_r+0x6a>
   174de:	ldrh	r3, [r4, #12]
   174e0:	bic.w	r3, r3, #3
   174e4:	orr.w	r3, r3, #1
   174e8:	sxth	r3, r3
   174ea:	b.n	1747e <__smakebuf_r+0x6a>

000174ec <__swbuf_r>:
   174ec:	push	{r3, r4, r5, r6, r7, lr}
   174ee:	mov	r5, r1
   174f0:	mov	r4, r2
   174f2:	mov	r6, r0
   174f4:	cbz	r0, 174fc <__swbuf_r+0x10>
   174f6:	ldr	r3, [r0, #52]	; 0x34
   174f8:	cmp	r3, #0
   174fa:	beq.n	17596 <__swbuf_r+0xaa>
   174fc:	ldrsh.w	r2, [r4, #12]
   17500:	ldr	r3, [r4, #24]
   17502:	str	r3, [r4, #8]
   17504:	lsls	r7, r2, #28
   17506:	uxth	r0, r2
   17508:	bpl.n	17542 <__swbuf_r+0x56>
   1750a:	ldr	r3, [r4, #16]
   1750c:	cbz	r3, 17542 <__swbuf_r+0x56>
   1750e:	uxtb	r5, r5
   17510:	lsls	r1, r0, #18
   17512:	mov	r7, r5
   17514:	bpl.n	1755c <__swbuf_r+0x70>
   17516:	ldr	r2, [r4, #0]
   17518:	ldr	r1, [r4, #20]
   1751a:	subs	r3, r2, r3
   1751c:	cmp	r1, r3
   1751e:	ble.n	17574 <__swbuf_r+0x88>
   17520:	adds	r3, #1
   17522:	ldr	r1, [r4, #8]
   17524:	subs	r1, #1
   17526:	str	r1, [r4, #8]
   17528:	adds	r1, r2, #1
   1752a:	str	r1, [r4, #0]
   1752c:	strb	r5, [r2, #0]
   1752e:	ldr	r2, [r4, #20]
   17530:	cmp	r2, r3
   17532:	beq.n	17584 <__swbuf_r+0x98>
   17534:	ldrh	r3, [r4, #12]
   17536:	lsls	r3, r3, #31
   17538:	bpl.n	1753e <__swbuf_r+0x52>
   1753a:	cmp	r5, #10
   1753c:	beq.n	17584 <__swbuf_r+0x98>
   1753e:	mov	r0, r7
   17540:	pop	{r3, r4, r5, r6, r7, pc}
   17542:	mov	r1, r4
   17544:	mov	r0, r6
   17546:	bl	170a8 <__swsetup_r>
   1754a:	cbnz	r0, 17590 <__swbuf_r+0xa4>
   1754c:	ldrsh.w	r2, [r4, #12]
   17550:	ldr	r3, [r4, #16]
   17552:	uxth	r0, r2
   17554:	uxtb	r5, r5
   17556:	lsls	r1, r0, #18
   17558:	mov	r7, r5
   1755a:	bmi.n	17516 <__swbuf_r+0x2a>
   1755c:	orr.w	r2, r2, #8192	; 0x2000
   17560:	strh	r2, [r4, #12]
   17562:	ldr	r2, [r4, #100]	; 0x64
   17564:	ldr	r1, [r4, #20]
   17566:	bic.w	r2, r2, #8192	; 0x2000
   1756a:	str	r2, [r4, #100]	; 0x64
   1756c:	ldr	r2, [r4, #0]
   1756e:	subs	r3, r2, r3
   17570:	cmp	r1, r3
   17572:	bgt.n	17520 <__swbuf_r+0x34>
   17574:	mov	r1, r4
   17576:	mov	r0, r6
   17578:	bl	142bc <_fflush_r>
   1757c:	cbnz	r0, 17590 <__swbuf_r+0xa4>
   1757e:	ldr	r2, [r4, #0]
   17580:	movs	r3, #1
   17582:	b.n	17522 <__swbuf_r+0x36>
   17584:	mov	r1, r4
   17586:	mov	r0, r6
   17588:	bl	142bc <_fflush_r>
   1758c:	cmp	r0, #0
   1758e:	beq.n	1753e <__swbuf_r+0x52>
   17590:	mov.w	r7, #4294967295
   17594:	b.n	1753e <__swbuf_r+0x52>
   17596:	bl	e9f8 <__sinit>
   1759a:	b.n	174fc <__swbuf_r+0x10>

0001759c <_fstat_r>:
   1759c:	push	{r4, r5, r6, lr}
   1759e:	mov	r4, r1
   175a0:	ldr	r5, [pc, #32]	; (175c4 <_fstat_r+0x28>)
   175a2:	mov	r3, r0
   175a4:	movs	r6, #0
   175a6:	mov	r0, r4
   175a8:	mov	r1, r2
   175aa:	mov	r4, r3
   175ac:	str	r6, [r5, #0]
   175ae:	bl	bc96 <_fstat>
   175b2:	adds	r3, r0, #1
   175b4:	beq.n	175b8 <_fstat_r+0x1c>
   175b6:	pop	{r4, r5, r6, pc}
   175b8:	ldr	r3, [r5, #0]
   175ba:	cmp	r3, #0
   175bc:	beq.n	175b6 <_fstat_r+0x1a>
   175be:	str	r3, [r4, #0]
   175c0:	pop	{r4, r5, r6, pc}
   175c2:	nop
   175c4:	.word	0x20010170

000175c8 <_isatty_r>:
   175c8:	push	{r3, r4, r5, lr}
   175ca:	ldr	r5, [pc, #28]	; (175e8 <_isatty_r+0x20>)
   175cc:	movs	r2, #0
   175ce:	mov	r4, r0
   175d0:	mov	r0, r1
   175d2:	str	r2, [r5, #0]
   175d4:	bl	bca0 <_isatty>
   175d8:	adds	r3, r0, #1
   175da:	beq.n	175de <_isatty_r+0x16>
   175dc:	pop	{r3, r4, r5, pc}
   175de:	ldr	r3, [r5, #0]
   175e0:	cmp	r3, #0
   175e2:	beq.n	175dc <_isatty_r+0x14>
   175e4:	str	r3, [r4, #0]
   175e6:	pop	{r3, r4, r5, pc}
   175e8:	.word	0x20010170

000175ec <__aeabi_drsub>:
   175ec:	eor.w	r1, r1, #2147483648	; 0x80000000
   175f0:	b.n	175f8 <__adddf3>
   175f2:	nop

000175f4 <__aeabi_dsub>:
   175f4:	eor.w	r3, r3, #2147483648	; 0x80000000

000175f8 <__adddf3>:
   175f8:	push	{r4, r5, lr}
   175fa:	mov.w	r4, r1, lsl #1
   175fe:	mov.w	r5, r3, lsl #1
   17602:	teq	r4, r5
   17606:	it	eq
   17608:	teqeq	r0, r2
   1760c:	itttt	ne
   1760e:	orrsne.w	ip, r4, r0
   17612:	orrsne.w	ip, r5, r2
   17616:	mvnsne.w	ip, r4, asr #21
   1761a:	mvnsne.w	ip, r5, asr #21
   1761e:	beq.w	177e6 <__adddf3+0x1ee>
   17622:	mov.w	r4, r4, lsr #21
   17626:	rsbs	r5, r4, r5, lsr #21
   1762a:	it	lt
   1762c:	neglt	r5, r5
   1762e:	ble.n	1764a <__adddf3+0x52>
   17630:	add	r4, r5
   17632:	eor.w	r2, r0, r2
   17636:	eor.w	r3, r1, r3
   1763a:	eor.w	r0, r2, r0
   1763e:	eor.w	r1, r3, r1
   17642:	eor.w	r2, r0, r2
   17646:	eor.w	r3, r1, r3
   1764a:	cmp	r5, #54	; 0x36
   1764c:	it	hi
   1764e:	pophi	{r4, r5, pc}
   17650:	tst.w	r1, #2147483648	; 0x80000000
   17654:	mov.w	r1, r1, lsl #12
   17658:	mov.w	ip, #1048576	; 0x100000
   1765c:	orr.w	r1, ip, r1, lsr #12
   17660:	beq.n	17668 <__adddf3+0x70>
   17662:	negs	r0, r0
   17664:	sbc.w	r1, r1, r1, lsl #1
   17668:	tst.w	r3, #2147483648	; 0x80000000
   1766c:	mov.w	r3, r3, lsl #12
   17670:	orr.w	r3, ip, r3, lsr #12
   17674:	beq.n	1767c <__adddf3+0x84>
   17676:	negs	r2, r2
   17678:	sbc.w	r3, r3, r3, lsl #1
   1767c:	teq	r4, r5
   17680:	beq.w	177d2 <__adddf3+0x1da>
   17684:	sub.w	r4, r4, #1
   17688:	rsbs	lr, r5, #32
   1768c:	blt.n	176aa <__adddf3+0xb2>
   1768e:	lsl.w	ip, r2, lr
   17692:	lsr.w	r2, r2, r5
   17696:	adds	r0, r0, r2
   17698:	adc.w	r1, r1, #0
   1769c:	lsl.w	r2, r3, lr
   176a0:	adds	r0, r0, r2
   176a2:	asr.w	r3, r3, r5
   176a6:	adcs	r1, r3
   176a8:	b.n	176c8 <__adddf3+0xd0>
   176aa:	sub.w	r5, r5, #32
   176ae:	add.w	lr, lr, #32
   176b2:	cmp	r2, #1
   176b4:	lsl.w	ip, r3, lr
   176b8:	it	cs
   176ba:	orrcs.w	ip, ip, #2
   176be:	asr.w	r3, r3, r5
   176c2:	adds	r0, r0, r3
   176c4:	adcs.w	r1, r1, r3, asr #31
   176c8:	and.w	r5, r1, #2147483648	; 0x80000000
   176cc:	bpl.n	176de <__adddf3+0xe6>
   176ce:	mov.w	lr, #0
   176d2:	rsbs	ip, ip, #0
   176d6:	sbcs.w	r0, lr, r0
   176da:	sbc.w	r1, lr, r1
   176de:	cmp.w	r1, #1048576	; 0x100000
   176e2:	bcc.n	1771c <__adddf3+0x124>
   176e4:	cmp.w	r1, #2097152	; 0x200000
   176e8:	bcc.n	17704 <__adddf3+0x10c>
   176ea:	lsrs	r1, r1, #1
   176ec:	movs.w	r0, r0, rrx
   176f0:	mov.w	ip, ip, rrx
   176f4:	add.w	r4, r4, #1
   176f8:	mov.w	r2, r4, lsl #21
   176fc:	cmn.w	r2, #4194304	; 0x400000
   17700:	bcs.w	17838 <__adddf3+0x240>
   17704:	cmp.w	ip, #2147483648	; 0x80000000
   17708:	it	eq
   1770a:	movseq.w	ip, r0, lsr #1
   1770e:	adcs.w	r0, r0, #0
   17712:	adc.w	r1, r1, r4, lsl #20
   17716:	orr.w	r1, r1, r5
   1771a:	pop	{r4, r5, pc}
   1771c:	movs.w	ip, ip, lsl #1
   17720:	adcs	r0, r0
   17722:	adc.w	r1, r1, r1
   17726:	subs	r4, #1
   17728:	it	cs
   1772a:	cmpcs.w	r1, #1048576	; 0x100000
   1772e:	bcs.n	17704 <__adddf3+0x10c>
   17730:	teq	r1, #0
   17734:	itt	eq
   17736:	moveq	r1, r0
   17738:	moveq	r0, #0
   1773a:	clz	r3, r1
   1773e:	it	eq
   17740:	addeq	r3, #32
   17742:	sub.w	r3, r3, #11
   17746:	subs.w	r2, r3, #32
   1774a:	bge.n	17766 <__adddf3+0x16e>
   1774c:	adds	r2, #12
   1774e:	ble.n	17762 <__adddf3+0x16a>
   17750:	add.w	ip, r2, #20
   17754:	rsb	r2, r2, #12
   17758:	lsl.w	r0, r1, ip
   1775c:	lsr.w	r1, r1, r2
   17760:	b.n	1777c <__adddf3+0x184>
   17762:	add.w	r2, r2, #20
   17766:	it	le
   17768:	rsble	ip, r2, #32
   1776c:	lsl.w	r1, r1, r2
   17770:	lsr.w	ip, r0, ip
   17774:	itt	le
   17776:	orrle.w	r1, r1, ip
   1777a:	lslle	r0, r2
   1777c:	subs	r4, r4, r3
   1777e:	ittt	ge
   17780:	addge.w	r1, r1, r4, lsl #20
   17784:	orrge	r1, r5
   17786:	popge	{r4, r5, pc}
   17788:	mvn.w	r4, r4
   1778c:	subs	r4, #31
   1778e:	bge.n	177ca <__adddf3+0x1d2>
   17790:	adds	r4, #12
   17792:	bgt.n	177b2 <__adddf3+0x1ba>
   17794:	add.w	r4, r4, #20
   17798:	rsb	r2, r4, #32
   1779c:	lsr.w	r0, r0, r4
   177a0:	lsl.w	r3, r1, r2
   177a4:	orr.w	r0, r0, r3
   177a8:	lsr.w	r3, r1, r4
   177ac:	orr.w	r1, r5, r3
   177b0:	pop	{r4, r5, pc}
   177b2:	rsb	r4, r4, #12
   177b6:	rsb	r2, r4, #32
   177ba:	lsr.w	r0, r0, r2
   177be:	lsl.w	r3, r1, r4
   177c2:	orr.w	r0, r0, r3
   177c6:	mov	r1, r5
   177c8:	pop	{r4, r5, pc}
   177ca:	lsr.w	r0, r1, r4
   177ce:	mov	r1, r5
   177d0:	pop	{r4, r5, pc}
   177d2:	teq	r4, #0
   177d6:	eor.w	r3, r3, #1048576	; 0x100000
   177da:	itte	eq
   177dc:	eoreq.w	r1, r1, #1048576	; 0x100000
   177e0:	addeq	r4, #1
   177e2:	subne	r5, #1
   177e4:	b.n	17684 <__adddf3+0x8c>
   177e6:	mvns.w	ip, r4, asr #21
   177ea:	it	ne
   177ec:	mvnsne.w	ip, r5, asr #21
   177f0:	beq.n	17846 <__adddf3+0x24e>
   177f2:	teq	r4, r5
   177f6:	it	eq
   177f8:	teqeq	r0, r2
   177fc:	beq.n	1780a <__adddf3+0x212>
   177fe:	orrs.w	ip, r4, r0
   17802:	itt	eq
   17804:	moveq	r1, r3
   17806:	moveq	r0, r2
   17808:	pop	{r4, r5, pc}
   1780a:	teq	r1, r3
   1780e:	ittt	ne
   17810:	movne	r1, #0
   17812:	movne	r0, #0
   17814:	popne	{r4, r5, pc}
   17816:	movs.w	ip, r4, lsr #21
   1781a:	bne.n	17828 <__adddf3+0x230>
   1781c:	lsls	r0, r0, #1
   1781e:	adcs	r1, r1
   17820:	it	cs
   17822:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17826:	pop	{r4, r5, pc}
   17828:	adds.w	r4, r4, #4194304	; 0x400000
   1782c:	itt	cc
   1782e:	addcc.w	r1, r1, #1048576	; 0x100000
   17832:	popcc	{r4, r5, pc}
   17834:	and.w	r5, r1, #2147483648	; 0x80000000
   17838:	orr.w	r1, r5, #2130706432	; 0x7f000000
   1783c:	orr.w	r1, r1, #15728640	; 0xf00000
   17840:	mov.w	r0, #0
   17844:	pop	{r4, r5, pc}
   17846:	mvns.w	ip, r4, asr #21
   1784a:	itte	ne
   1784c:	movne	r1, r3
   1784e:	movne	r0, r2
   17850:	mvnseq.w	ip, r5, asr #21
   17854:	itt	ne
   17856:	movne	r3, r1
   17858:	movne	r2, r0
   1785a:	orrs.w	r4, r0, r1, lsl #12
   1785e:	itte	eq
   17860:	orrseq.w	r5, r2, r3, lsl #12
   17864:	teqeq	r1, r3
   17868:	orrne.w	r1, r1, #524288	; 0x80000
   1786c:	pop	{r4, r5, pc}
   1786e:	nop

00017870 <__aeabi_ui2d>:
   17870:	teq	r0, #0
   17874:	itt	eq
   17876:	moveq	r1, #0
   17878:	bxeq	lr
   1787a:	push	{r4, r5, lr}
   1787c:	mov.w	r4, #1024	; 0x400
   17880:	add.w	r4, r4, #50	; 0x32
   17884:	mov.w	r5, #0
   17888:	mov.w	r1, #0
   1788c:	b.n	17730 <__adddf3+0x138>
   1788e:	nop

00017890 <__aeabi_i2d>:
   17890:	teq	r0, #0
   17894:	itt	eq
   17896:	moveq	r1, #0
   17898:	bxeq	lr
   1789a:	push	{r4, r5, lr}
   1789c:	mov.w	r4, #1024	; 0x400
   178a0:	add.w	r4, r4, #50	; 0x32
   178a4:	ands.w	r5, r0, #2147483648	; 0x80000000
   178a8:	it	mi
   178aa:	negmi	r0, r0
   178ac:	mov.w	r1, #0
   178b0:	b.n	17730 <__adddf3+0x138>
   178b2:	nop

000178b4 <__aeabi_f2d>:
   178b4:	lsls	r2, r0, #1
   178b6:	mov.w	r1, r2, asr #3
   178ba:	mov.w	r1, r1, rrx
   178be:	mov.w	r0, r2, lsl #28
   178c2:	itttt	ne
   178c4:	andsne.w	r3, r2, #4278190080	; 0xff000000
   178c8:	teqne	r3, #4278190080	; 0xff000000
   178cc:	eorne.w	r1, r1, #939524096	; 0x38000000
   178d0:	bxne	lr
   178d2:	bics.w	r2, r2, #4278190080	; 0xff000000
   178d6:	it	eq
   178d8:	bxeq	lr
   178da:	teq	r3, #4278190080	; 0xff000000
   178de:	itt	eq
   178e0:	orreq.w	r1, r1, #524288	; 0x80000
   178e4:	bxeq	lr
   178e6:	push	{r4, r5, lr}
   178e8:	mov.w	r4, #896	; 0x380
   178ec:	and.w	r5, r1, #2147483648	; 0x80000000
   178f0:	bic.w	r1, r1, #2147483648	; 0x80000000
   178f4:	b.n	17730 <__adddf3+0x138>
   178f6:	nop

000178f8 <__aeabi_ul2d>:
   178f8:	orrs.w	r2, r0, r1
   178fc:	it	eq
   178fe:	bxeq	lr
   17900:	push	{r4, r5, lr}
   17902:	mov.w	r5, #0
   17906:	b.n	1791e <__aeabi_l2d+0x16>

00017908 <__aeabi_l2d>:
   17908:	orrs.w	r2, r0, r1
   1790c:	it	eq
   1790e:	bxeq	lr
   17910:	push	{r4, r5, lr}
   17912:	ands.w	r5, r1, #2147483648	; 0x80000000
   17916:	bpl.n	1791e <__aeabi_l2d+0x16>
   17918:	negs	r0, r0
   1791a:	sbc.w	r1, r1, r1, lsl #1
   1791e:	mov.w	r4, #1024	; 0x400
   17922:	add.w	r4, r4, #50	; 0x32
   17926:	movs.w	ip, r1, lsr #22
   1792a:	beq.w	176de <__adddf3+0xe6>
   1792e:	mov.w	r2, #3
   17932:	movs.w	ip, ip, lsr #3
   17936:	it	ne
   17938:	addne	r2, #3
   1793a:	movs.w	ip, ip, lsr #3
   1793e:	it	ne
   17940:	addne	r2, #3
   17942:	add.w	r2, r2, ip, lsr #3
   17946:	rsb	r3, r2, #32
   1794a:	lsl.w	ip, r0, r3
   1794e:	lsr.w	r0, r0, r2
   17952:	lsl.w	lr, r1, r3
   17956:	orr.w	r0, r0, lr
   1795a:	lsr.w	r1, r1, r2
   1795e:	add	r4, r2
   17960:	b.n	176de <__adddf3+0xe6>
   17962:	nop

00017964 <__aeabi_d2lz>:
   17964:	push	{r3, lr}
   17966:	mov	r2, r0
   17968:	mov	r3, r1
   1796a:	vmov	d7, r2, r3
   1796e:	vcmpe.f64	d7, #0.0
   17972:	vmrs	APSR_nzcv, fpscr
   17976:	bmi.n	17980 <__aeabi_d2lz+0x1c>
   17978:	ldmia.w	sp!, {r3, lr}
   1797c:	b.w	17998 <__aeabi_d2ulz>
   17980:	vneg.f64	d7, d7
   17984:	vmov	r0, r1, d7
   17988:	bl	17998 <__aeabi_d2ulz>
   1798c:	negs	r0, r0
   1798e:	sbc.w	r1, r1, r1, lsl #1
   17992:	pop	{r3, pc}
   17994:	movs	r0, r0
	...

00017998 <__aeabi_d2ulz>:
   17998:	vldr	d6, [pc, #44]	; 179c8 <__aeabi_d2ulz+0x30>
   1799c:	vmov	d7, r0, r1
   179a0:	vldr	d5, [pc, #44]	; 179d0 <__aeabi_d2ulz+0x38>
   179a4:	vmul.f64	d6, d7, d6
   179a8:	vcvt.u32.f64	s12, d6
   179ac:	vcvt.f64.u32	d4, s12
   179b0:	vfms.f64	d7, d4, d5
   179b4:	vcvt.u32.f64	s15, d7
   179b8:	vmov	r1, s12
   179bc:	vmov	r0, s15
   179c0:	bx	lr
   179c2:	nop
   179c4:	nop.w
   179c8:	.word	0x00000000
   179cc:	.word	0x3df00000
   179d0:	.word	0x00000000
   179d4:	.word	0x41f00000

000179d8 <___Z14set_audioClockilm_veneer>:
   179d8:	ldr.w	pc, [pc]	; 179dc <___Z14set_audioClockilm_veneer+0x4>
   179dc:	.word	0x600024d5

000179e0 <___init_veneer>:
   179e0:	ldr.w	pc, [pc]	; 179e4 <___init_veneer+0x4>
   179e4:	.word	0x6000241d

000179e8 <___ZN7TwoWire5beginEv_veneer>:
   179e8:	ldr.w	pc, [pc]	; 179ec <___ZN7TwoWire5beginEv_veneer+0x4>
   179ec:	.word	0x6000176d

000179f0 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   179f0:	ldr.w	pc, [pc]	; 179f4 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   179f4:	.word	0x60001f1d

000179f8 <__usb_init_veneer>:
   179f8:	ldr.w	pc, [pc]	; 179fc <__usb_init_veneer+0x4>
   179fc:	.word	0x600017b5

00017a00 <___reboot_Teensyduino__veneer>:
   17a00:	ldr.w	pc, [pc]	; 17a04 <___reboot_Teensyduino__veneer+0x4>
   17a04:	.word	0x60001899

00017a08 <___ZN16CrashReportClasscvbEv_veneer>:
   17a08:	ldr.w	pc, [pc]	; 17a0c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   17a0c:	.word	0x600023c1

Disassembly of section .fini:

00017a10 <_fini>:
   17a10:	push	{r3, r4, r5, r6, r7, lr}
   17a12:	nop


.vsteensy/build/microPAM_V3_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
600024d0 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00011ea0 l    d  .fini	00000000 .fini
00011ea4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200026c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60016c94 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
600018ec l     F .text.code	00000024 flexspi2_command
60001910 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
0000aa50 l     F .text.itcm	000000a0 endpoint0_receive
0000aaf0 l     F .text.itcm	0000007c schedule_transfer
0000ab6c l     F .text.itcm	00000034 run_callbacks
0000aba0 l     F .text.itcm	0000001c usb_endpoint_config
0000abbc l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
200155b9 l     O .bss	00000008 endpoint0_buffer
20014b9c l     O .bss	00000004 endpoint0_notify_mask
20007dc0 l     O .bss	00000008 endpoint0_setupdata
20014ba0 l     O .bss	00000004 endpointN_notify_mask
200155c3 l     O .bss	00000008 reply_buffer
200155dd l     O .bss	00000001 sof_usage
200155e5 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
20014cd0 l     O .bss	00000004 s_hotCount
20014cd4 l     O .bss	00000004 s_hotTemp
20014cd8 l     O .bss	00000004 s_hot_ROOM
20014cdc l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001e54 l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 analog.c
200155b8 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20014c38 l     O .bss	00000000 object.0
600024c0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00000190 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00000698 l     F .text.itcm	000000f0 _GLOBAL__sub_I_storage
20007dcc l     O .bss	00000004 guard variable for loop::status
20014840 l     O .bss	00000004 loop::t0
200153c0 l     O .bss	00000002 loop::mxb
200153c2 l     O .bss	00000002 loop::status
20014844 l     O .bss	00000004 loop::loopCount
2000105e l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Acq.cpp
000008e0 l     F .text.itcm	000000b8 acq_isr()
20200000 l     O .bss.dma	00001000 i2s_buffer
00000c48 l     F .text.itcm	00000024 _GLOBAL__sub_I_procCount
20013fdc l     O .bss	00000008 dma
00000000 l    df *ABS*	00000000 Filing.cpp
0000285e l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
0000287e l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00002886 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
000028aa l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
000028ae l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
20007dd0 l     O .bss	00006000 diskBuffer
2000dfdc l     O .bss	00006000 tempBuffer0
0000312c l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
2000ddd0 l     O .bss	00000200 fileHeader
2001549a l     O .bss	00000050 dirName
200143f4 l     O .bss	00000200 wav_hdr
200154ea l     O .bss	00000050 fileName
2001483c l     O .bss	00000004 checkEndOfFile(short)::dta
2001553e l     O .bss	00000050 timeStamp()::date_time
200020c4 l     O .data	00000004 newFolder(int)::d0
00000000 l    df *ABS*	00000000 usb_desc.c
200022d9 l     O .data	00000012 device_descriptor
6000271e l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000c96 l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000cbc l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000cf8 l     F .text.itcm	0000003c dbgPrint(unsigned short)
000010fc l     F .text.itcm	00000064 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
0000168c l     F .text.itcm	0000002e MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]
000017f4 l     F .text.itcm	0000009c MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]
00001b5c l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001eb4 l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001ec6 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00001edc l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00001f00 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001f04 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001f18 l     F .text.itcm	00000038 menuGetLine()
00001f50 l     F .text.itcm	0000001c menuGetInt32(long*) [clone .isra.0]
00001f6c l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
200153a0 l     O .bss	00000020 store
2001558e l     O .bss	00000028 menuGetLine()::buffer
20001086 l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Queue.cpp
70000000 l     O .bss.extram	00240000 data_buffer
2000dfd4 l     O .bss	00000004 queue_busy
200141e4 l     O .bss	00000004 head
200141e8 l     O .bss	00000004 tail
00000000 l    df *ABS*	00000000 Compress.cpp
20013fe4 l     O .bss	00000200 dout
200141f4 l     O .bss	00000200 outData
200145f4 l     O .bss	00000200 tempData
20014848 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
000034a0 l     F .text.itcm	00000024 Print::print(char const*) [clone .isra.0]
20001052 l     O .data	00000004 regs
20001056 l     O .data	00000008 chmap
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 RTC.cpp
200010c5 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 MTP.cpp
00003a7e l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
00003a94 l     F .text.itcm	00000078 MTPD::write(char const*, int) [clone .part.0]
00004506 l     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
2001484c l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
20014850 l     O .bss	00000004 MTPD::write(char const*, int)::dst
20000b5c l     O .data	00000014 propertyList
20000b70 l     O .data	00000028 supported_op
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000a30 l     O .data	0000012c lookupTable
20000b98 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00006354 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00006d14 l     F .text.itcm	00000030 FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00007ddc l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00008e9c l     F .text.itcm	0000002c sdIrs()
00008ec8 l     F .text.itcm	00000020 gpioMux(unsigned char)
00008ee8 l     F .text.itcm	00000018 isBusyCommandComplete()
00008f00 l     F .text.itcm	00000010 isBusyCommandInhibit()
00008f10 l     F .text.itcm	00000014 isBusyDat()
00008f24 l     F .text.itcm	0000000c isBusyDMA()
00008f30 l     F .text.itcm	00000014 isBusyFifoRead()
00008f44 l     F .text.itcm	00000014 isBusyFifoWrite()
00008f58 l     F .text.itcm	00000018 isBusyTransferComplete()
00008f70 l     F .text.itcm	000000a4 setSdclk(unsigned long)
00009078 l     F .text.itcm	00000024 waitTimeout(bool (*)())
0000909c l     F .text.itcm	0000003c yieldTimeout(bool (*)())
000090e8 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
00009118 l     F .text.itcm	000000d4 initSDHC()
00009208 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00009270 l     F .text.itcm	00000020 statusCMD13()
00009290 l     F .text.itcm	00000010 isBusyCMD13()
000092a4 l     F .text.itcm	00000058 readReg16(unsigned long, void*)
000092fc l     F .text.itcm	00000030 waitDmaStatus()
0000932c l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00009624 l     F .text.itcm	0000005c waitTransferComplete()
0000988c l     F .text.itcm	0000008c cardCMD6(unsigned long, unsigned char*)
20015476 l     O .bss	00000001 m_initDone
2000dfd0 l     O .bss	00000004 m_sdClkKhz
20015477 l     O .bss	00000001 m_version2
2000dfd8 l     O .bss	00000004 m_errorLine
20015478 l     O .bss	00000001 m_highCapacity
20015479 l     O .bss	00000001 m_transferActive
2001547a l     O .bss	00000010 m_cid
2001548a l     O .bss	00000010 m_csd
200141ec l     O .bss	00000004 m_ocr
200141f0 l     O .bss	00000004 m_rca
200147f4 l     O .bss	00000004 m_busyFcn
2001553a l     O .bss	00000001 m_dmaBusy
200147f8 l     O .bss	00000004 m_irqstat
200022d8 l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00009dcc l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000a134 l     F .text.itcm	00000060 rx_queue_transfer
20004b40 l     O .bss	00001000 rx_buffer
0000a194 l     F .text.itcm	000000ac rx_event
0000a240 l     F .text.itcm	0000008c usb_serial_flush_callback
20005dc0 l     O .bss	00002000 txbuffer
20014cb8 l     O .bss	00000004 rx_available
200153cc l     O .bss	00000010 rx_count
200155cb l     O .bss	00000001 rx_head
200153dc l     O .bss	00000010 rx_index
200155cd l     O .bss	00000009 rx_list
200153ec l     O .bss	00000002 rx_packet_size
200155db l     O .bss	00000001 rx_tail
20005b40 l     O .bss	00000100 rx_transfer
200155de l     O .bss	00000001 transmit_previous_timeout
20015470 l     O .bss	00000002 tx_available
200155df l     O .bss	00000001 tx_head
200155e1 l     O .bss	00000001 tx_noautoflush
20015472 l     O .bss	00000002 tx_packet_size
20005cc0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000b7ac l     F .text.itcm	00000058 flash_wait
200155c2 l     O .bss	00000001 initialized
200153f0 l     O .bss	0000007e sector_index
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000be44 l     F .text.itcm	00000010 txEvent_event
0000be54 l     F .text.itcm	0000003c rx_event
0000be90 l     F .text.itcm	00000060 rx_queue_transfer
200155cc l     O .bss	00000001 rx_head
200155d6 l     O .bss	00000005 rx_list
20014cbc l     O .bss	00000014 rx_list_transfer_len
200153ee l     O .bss	00000002 rx_packet_size
200155dc l     O .bss	00000001 rx_tail
20005c40 l     O .bss	00000080 rx_transfer
200155e0 l     O .bss	00000001 tx_head
20015474 l     O .bss	00000002 tx_packet_size
20005d40 l     O .bss	00000080 tx_transfer
20201000 l     O .bss.dma	00000800 rx_buffer
20201800 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
2001553d l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000c456 l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
0000ca20 l     F .text.itcm	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
0000cbc2 l     F .text.itcm	00000034 sulp
00000000 l    df *ABS*	00000000 libc_a-strtol.o
0000d768 l     F .text.itcm	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_float.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_i.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_float.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000e51c l     F .text.itcm	00000048 std
0000e564 l     F .text.itcm	00000018 stdio_exit_handler
0000e57c l     F .text.itcm	00000040 cleanup_stdio
0000e5bc l     F .text.itcm	0000003c global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-sscanf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strlcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
0000ebac l     F .text.itcm	00000110 quorem
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
0000f830 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
0000fd5c l     F .text.itcm	00000024 L_shift
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-msizer.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfscanf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_i.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-sccl.o
00000000 l    df *ABS*	00000000 libc_a-ungetc.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-strtoul.o
000114b4 l     F .text.itcm	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-fprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf.o
000115c0 l     F .text.itcm	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00011e68 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00011e70 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
00011e78 l     F .text.itcm	00000008 __usb_init_veneer
00011e80 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
00011e88 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
00011e90 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
00011e98 l     F .text.itcm	00000008 ___init_veneer
60002428 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
60002430 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
60002438 l     F .text.code	00000008 __sm_set_pool_veneer
60002440 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002448 l     F .text.code	00000008 __memset_veneer
60002450 l     F .text.code	00000008 ____libc_init_array_veneer
60002458 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
60002460 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
60002468 l     F .text.code	00000008 __pwm_init_veneer
60002470 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002478 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60002480 l     F .text.code	00000008 ___ZN7TwoWire8setClockEm_veneer
60002488 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002490 l     F .text.code	00000008 __main_veneer
60002498 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
600024a0 l     F .text.code	00000008 __set_arm_clock_veneer
600024a8 l     F .text.code	00000008 __delay_veneer
600024b0 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
600024b8 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
00010858 g     F .text.itcm	00000010 _malloc_usable_size_r
00006d44  w    F .text.itcm	00000026 FatPartition::cacheSync()
600024d0 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
0000d89a g     F .text.itcm	000000a4 __cvt
0000549c g     F .text.itcm	000000a8 toUpcase(unsigned short)
000010b6 g     F .text.itcm	0000002c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00010f6c g     F .text.itcm	000000b4 _scanf_chars
00002738 g     F .text.itcm	00000060 pushData(unsigned long*)
0000a4e8 g     F .text.itcm	00000014 usb_serial_available
00010816 g     F .text.itcm	00000042 __any_on
00011a5c g     F .text.itcm	00000020 _isatty_r
0000eac4 g     F .text.itcm	00000010 strcpy
00007920 g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
60001940 g     F .text.code	00000002 startup_default_late_hook
0000e9e0 g     F .text.itcm	00000024 _lseek_r
000093c4 g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c1c4  w    F .text.itcm	00000074 yield
00008808  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20014c58 g     O .bss	00000060 proc_stat
2001539c g     O .bss	00000004 usb_timer1_callback
00003c14 g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
00003c6c g     F .text.itcm	00000014 MTPD::write32(unsigned long)
0000777c g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
0000c532 g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
200151b8 g     O .bss	000001b8 storage
60002630 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200153ca g     O .bss	00000002 proc
60001a58 g     F .text.code	00000274 configure_external_ram
00003a0c g     F .text.itcm	00000002 rtcXferTime()
00008772  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
20001e44 g     O .data	00000140 Wire1
00008e5c  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00011d98 g     F .text.itcm	0000005a .hidden __floatdidf
00007f58 g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
20014c50 g     O .bss	00000004 procCount
00007c88 g     F .text.itcm	00000118 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
200147fc g     O .bss	00000004 FsDateTime::callback
6000165c g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
0000807c g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
00008c44 g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000c4cc g     F .text.itcm	0000001a Print::println()
000051b0 g     F .text.itcm	00000098 TwoWire::isr()
200004b4 g     O .data	00000070 vtable for DedicatedSpiCard
20014c54 g     O .bss	00000004 procMiss
0000e7da g     F .text.itcm	00000024 __sseek
0000e610 g     F .text.itcm	00000030 __sinit
000059c8 g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
00010884 g     F .text.itcm	00000094 fcvtbuf
00011848 g     F .text.itcm	0000007a __swbuf_r
00003b32 g     F .text.itcm	0000001e MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000cb58 g     F .text.itcm	0000000c __malloc_unlock
000037ba g     F .text.itcm	0000004c i2c_class::read(unsigned char, unsigned char)
200022b0 g     O .data	00000004 t_4
20014834 g     O .bss	00000004 FsVolume::m_cwv
00003774 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
00002708 g     F .text.itcm	00000008 getStore()
0000732c g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
20007dc8 g     O .bss	00000004 SerNum
2001553c g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
00008766  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600023d0 g     F .text.code	0000004c analog_init
0000d75c g     F .text.itcm	0000000c _strtod_r
000016ba g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
0000e806 g     F .text.itcm	0000004a _vdprintf_r
0000740e g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000f8d4 g     F .text.itcm	0000002a __hexdig_fun
00008a96 g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
0000b804 g     F .text.itcm	00000044 eeprom_initialize
0000304c g     F .text.itcm	000000e0 saveData(short)
2001546e g     O .bss	00000002 shift
20001cf0 g     O .data	00000004 F_CPU_ACTUAL
0000e8e4 g     F .text.itcm	00000034 memmove
2001537c g     O .bss	00000004 t_1
000016e8 g     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
20014c2c g     O .bss	00000004 max_stat
0000e67c g     F .text.itcm	00000068 snprintf
00009d4c g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
0000ff04 g     F .text.itcm	00000080 _Balloc
00000c82  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
00011eac g       .ARM.exidx	00000000 __exidx_end
00007b9a g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
2001553b g     O .bss	00000001 EventResponder::runningFromYield
00009f42 g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
0000865c g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000bc38 g     F .text.itcm	00000060 tempmonGetTemp
0000bb78 g     F .text.itcm	0000001e smalloc_verify_pool
0000ea6c g     F .text.itcm	0000000c __errno
00002130 g     F .text.itcm	0000009c saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
2001480c g     O .bss	00000004 EventResponder::firstInterrupt
0000b244 g     F .text.itcm	00000028 usb_transfer_status
00003dc2 g     F .text.itcm	00000050 MTPD::GetObjectHandles(unsigned long, unsigned long)
0000bbca g     F .text.itcm	0000006a sm_set_pool
00002b8c g     F .text.itcm	00000014 newFolder(int)
20014814 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
00003a0e g     F .text.itcm	00000004 rtcGetTimestamp()
20014994 g     O .bss	00000004 __stdio_exit_handler
000004e0  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
000062f0 g     F .text.itcm	00000018 ExFatPartition::rootLength()
00011df4 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
000029fc g     F .text.itcm	00000014 headerUpdate(long)
0000c3c8  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00011a38 g     F .text.itcm	00000024 _fstat_r
20000614 g     O .data	00000370 digital_pin_to_info_PGM
20014ba4 g     O .bss	00000004 errno
00009f4c g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00006074 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
60002568  w    O .text.progmem	00000050 TwoWire::i2c3_hardware
00011020 g     F .text.itcm	000001e8 _scanf_i
0000e79e g     F .text.itcm	00000004 __seofread
00011ea8 g       .text.itcm	00000000 _etext
00008398 g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200026c0 g       .bss	00000000 _sbss
00009020 g     F .text.itcm	0000000c SdioCard::errorData() const
00000d7e g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
00003a28 g     F .text.itcm	0000000e rtc_set_datetime(datetime_t*)
00003bc2 g     F .text.itcm	00000016 MTPD::write16(unsigned short)
00001954 g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
00009680 g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
00006210 g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
60002728 g       *ABS*	00000000 _stextload
0000027c g     F .text.itcm	00000224 loop
0000bd3c g     F .text.itcm	00000072 flexpwm_init
0000b8c8 g     F .text.itcm	000000dc eepromemu_flash_write
60001942 g     F .text.code	00000004 startup_debug_reset
0000b158 g     F .text.itcm	00000040 usb_config_rx
00003ffc g     F .text.itcm	0000010c MTPD::GetStorageInfo(unsigned long)
00005798 g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00009b84 g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
00004fb8 g     F .text.itcm	000000e4 TwoWire::endTransmission(unsigned char)
00003806 g     F .text.itcm	0000003c i2c_class::write(unsigned char, unsigned char, unsigned char)
20014808 g     O .bss	00000004 EventResponder::lastInterrupt
000084fc g     F .text.itcm	0000002a FsBaseFile::close()
0000e850 g     F .text.itcm	00000014 vdiprintf
00004d82 g     F .text.itcm	00000048 SPIClass::end()
0000a000 g     F .text.itcm	00000134 memcpy
0000fda8 g     F .text.itcm	00000136 __hexnan
00001718 g     F .text.itcm	000000dc MTPStorage_SD::removeFile(unsigned long, char*)
00008d0c g     F .text.itcm	00000032 SharedSpiCard::writeStop()
000052e4 g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
00001566 g     F .text.itcm	00000126 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00002120 g     F .text.itcm	00000008 storeConfig(unsigned short*, int)
200026c0 g     O .data	00000000 .hidden __TMC_END__
00006154 g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
00001420 g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00006fee g     F .text.itcm	00000026 FatFile::peek()
000021cc g     F .text.itcm	00000048 menu1(short)
20014c34 g     O .bss	00000004 nbuf
000109cc g     F .text.itcm	000001fc _svfprintf_r
00011d20 g     F .text.itcm	00000022 .hidden __floatsidf
20015374 g     O .bss	00000004 systick_millis_count
000067f4 g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000c028 g     F .text.itcm	00000030 usb_mtp_available
000004a0 g     F .text.itcm	00000040 setup1()
00004f84 g     F .text.itcm	00000034 TwoWire::wait_idle()
0000e864 g     F .text.itcm	00000060 _vasniprintf_r
00004744 g     F .text.itcm	000005e6 MTPD::loop()
0000c704 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
200155e3 g     O .bss	00000001 usb_configuration
0000875c  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000bb96 g     F .text.itcm	00000034 sm_align_pool
00009db0 g     F .text.itcm	0000001c SdioCard::syncDevice()
00009798 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000d0  w    F .text.itcm	00000050 StreamFile<FsBaseFile, unsigned long long>::available()
00007014 g     F .text.itcm	0000003e FatFile::readDirCache(bool)
00010770 g     F .text.itcm	00000060 __ratio
00008816 g     F .text.itcm	0000007e SharedSpiCard::sectorCount()
60002630  w    O .text.progmem	00000018 usb_string_manufacturer_name
200022ac g     O .data	00000004 t_3
60002608 g     O .text.progmem	00000008 usb_string_mtp
0000ca00 g     F .text.itcm	00000010 malloc
00000248 g     F .text.itcm	00000010 reboot()
00003774 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
600025b8  w    O .text.progmem	00000050 TwoWire::i2c1_hardware
2000054c  w    O .data	00000024 vtable for FsFile
0000b72a  w    F .text.itcm	0000000a _fstat
20014998 g     O .bss	00000200 acqBuffer
00004dd6  w    F .text.itcm	0000001e TwoWire::read()
0001144c g     F .text.itcm	0000003c __assert_func
00004710 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
00002ca0 g     F .text.itcm	000000a0 getAlarmTime(unsigned long)
20000328 g     O .data	000000c8 __mprec_tens
600017b4 g     F .text.code	000000e4 usb_init
00008526 g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
200151b0 g     O .bss	00000004 sessionID_
00002d54 g     F .text.itcm	00000094 do_hibernate(unsigned long)
00008762  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000c6c  w    F .text.itcm	00000016 MTPStorage_SD::addFilesystem(SdFs&, char const*)
0000b768 g     F .text.itcm	00000044 rtc_set
00010c42 g     F .text.itcm	0000003a __ssrefill_r
20015378 g     O .bss	00000004 systick_safe_read
00004e70 g     F .text.itcm	00000114 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00006888 g     F .text.itcm	000000ca ExFatFile::truncate()
200020cc g     O .data	00000000 .hidden __dso_handle
0000b9a4 g     F .text.itcm	000000b4 eepromemu_flash_erase_sector
00011d00 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000e9b8 g     F .text.itcm	00000008 _localeconv_r
200022a4 g     O .data	00000004 sd_str
00009eee g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00010184 g     F .text.itcm	0000002c __i2b
20000000 g       .data	00000000 _sdata
0000bef0 g     F .text.itcm	000000a4 usb_mtp_configure
200022b8 g     O .data	00000004 t_on
600026b5 g     O .text.progmem	00000069 usb_config_descriptor_480
0000c734 g     F .text.itcm	000002c8 .hidden __udivmoddi4
00003f24 g     F .text.itcm	000000d8 MTPD::getObjectPropValue(unsigned long, unsigned long)
00011a7c g     F .text.itcm	00000000 .hidden __aeabi_drsub
00009f3c g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00006d6a g     F .text.itcm	00000036 FatFile::addCluster()
0000ea28 g     F .text.itcm	00000020 _sbrk_r
000091ec g     F .text.itcm	0000001c SdioCard::type() const
00003b64 g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
6000193c g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
0000a55c g     F .text.itcm	0000001e usb_serial_getchar
00000d66  w    F .text.itcm	00000018 FsVolume::clusterCount() const
2001538c g     O .bss	00000008 usb_cdc_line_coding
0000bc98 g     F .text.itcm	00000040 digitalWrite
00007978  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
20014810 g     O .bss	00000004 EventResponder::lastYield
00005772 g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000ea04 g     F .text.itcm	00000024 _read_r
00000cd2  w    F .text.itcm	00000024 Print::write(char const*)
20015388 g     O .bss	00000004 termon
00000082  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
00008800  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
20014ba8 g     O .bss	00000010 extmem_smalloc_pool
00008b8c g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000bcd8 g     F .text.itcm	00000064 pinMode
0000149a g     F .text.itcm	00000028 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000efc  w    F .text.itcm	0000001c FsFile::FsFile()
0000c5c8 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
00011d44 g     F .text.itcm	00000042 .hidden __extendsfdf2
00010c7c g     F .text.itcm	000002f0 __ssvfscanf_r
0000c38c  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000eb4  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00011a88 g     F .text.itcm	00000276 .hidden __adddf3
60001690 g     F .text.code	00000050 TwoWire::setSDA(unsigned char)
20001f84 g     O .data	00000140 Wire2
00003ef4 g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
00003b50 g     F .text.itcm	00000012 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60017000 g     O .text.csf	00000c00 hab_csf
00003bd8 g     F .text.itcm	0000003a MTPD::writestring(char const*)
00007be0 g     F .text.itcm	000000a8 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00010628 g     F .text.itcm	00000094 __b2d
0000352c g     F .text.itcm	000001a4 adc_init()
00011ea4 g       .ARM.exidx	00000000 __exidx_start
70240000 g       .bss.extram	00000000 _extram_end
000008d4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200022a8 g     O .data	00000004 t_2
0000c368  w    F .text.itcm	00000008 Print::print(unsigned char)
0000b734  w    F .text.itcm	00000004 _isatty
20014804 g     O .bss	00000004 EventResponder::firstYield
00000eee g     F .text.itcm	0000000c MTPStorage_SD::write(char const*, unsigned long)
00005378 g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001fe  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000cb64 g     F .text.itcm	0000005e _realloc_r
0000ea78 g     F .text.itcm	00000048 __libc_init_array
0000b2b4 g     F .text.itcm	00000248 dtostrf
00004dca  w    F .text.itcm	0000000c TwoWire::available()
00005ebe g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000902c g     F .text.itcm	0000001c SdioCard::readCID(CID*)
0000663e g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
0000155a g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
00001b18 g     F .text.itcm	00000042 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
00003798 g     F .text.itcm	00000022 i2c_class::exist(unsigned char)
20000300 g     O .data	00000028 __mprec_bigtens
00010054 g     F .text.itcm	00000094 __s2b
00008b0e  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000b73e  w    F .text.itcm	00000004 abort
0000509c g     F .text.itcm	00000114 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000c3b0  w    F .text.itcm	00000004 usb_serial_class::clear()
00011d00 g     F .text.itcm	0000001e .hidden __floatunsidf
0000b6f4  w    F .text.itcm	0000002c _sbrk
600145d4 g       *ABS*	00000000 _sdataload
00010490 g     F .text.itcm	00000038 __mcmp
0000189e g     F .text.itcm	000000b6 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
200020c8 g     O .data	00000004 __brkval
200155e2 g     O .bss	00000001 usb_cdc_line_rtsdtr
6000241c g     F .text.code	00000000 _init
0000a2cc g     F .text.itcm	00000002 usb_serial_reset
00006e10 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
0000ba58 g     F .text.itcm	00000104 eeprom_write_byte
00000fd4  w    F .text.itcm	0000004e mSD_Base::sd_rmdir(unsigned long, char*)
00011e28 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
6000264c g     O .text.progmem	00000069 usb_config_descriptor_12
20000570 g     O .data	00000024 vtable for TwoWire
0000cbf8 g     F .text.itcm	00000b64 _strtod_l
0000fd80 g     F .text.itcm	00000028 __match
20015620 g       .bss	00000000 _ebss
00009440 g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00003c80 g     F .text.itcm	00000118 MTPD::WriteDescriptor()
2000229c g     O .data	00000004 propertyListNum
600016e0 g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
0000006e  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000100e8 g     F .text.itcm	00000040 __hi0bits
000056e6 g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001ea8 g     F .text.code	00000074 CrashReportClass::clear()
00005254 g     F .text.itcm	0000000c lpi2c3_isr()
000066ee g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20202080 g       .bss.dma	00000000 _heap_start
00003d98 g     F .text.itcm	0000002a MTPD::WriteStorageIDs()
200155b6 g     O .bss	00000001 __lock___malloc_recursive_mutex
00001c94 g     F .text.itcm	000001d8 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00006308 g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
60002518  w    O .text.progmem	00000050 TwoWire::i2c4_hardware
000008d4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
2001485c g     O .bss	00000138 __sf
20001ce8 g     O .data	00000004 CrashReport
20014ce4 g     O .bss	000004cc sdx
00008a0c g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000554 g     F .text.itcm	00000144 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
200026e0 g     O .bss	00000020 endpoint0_transfer_data
00006b7a g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
0000544e g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000c6f4 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000bde4 g     F .text.itcm	00000060 pwm_init
0001159c g     F .text.itcm	00000024 fprintf
00011a88 g     F .text.itcm	00000276 .hidden __aeabi_dadd
20014bb8 g     O .bss	00000050 file
00004478 g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
200022eb g     O .data	00000001 usb_mtp_status
60017c00 g       .text.csf	00000000 __text_csf_end
60001ccc g     F .text.code	0000005c usb_pll_start
00010304 g     F .text.itcm	000000b4 __pow5mult
000070f2 g     F .text.itcm	0000004c FatFile::rmdir()
200004a8 g     O .data	0000000c vtable for CrashReportClass
00011d88 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00005260 g     F .text.itcm	0000000c lpi2c4_isr()
00007b18 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
20014c08 g     O .bss	00000004 haveStore
00008e9a  w    F .text.itcm	00000002 SdioCard::end()
0000e67c g     F .text.itcm	00000068 sniprintf
200026c0 g     O .bss	00000020 endpoint0_transfer_ack
20015394 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b204 g     F .text.itcm	00000024 usb_transmit
00000d34  w    F .text.itcm	00000014 Print::println(char const*)
0000c274 g     F .text.itcm	00000020 systick_isr
0000eac2 g     F .text.itcm	00000002 __retarget_lock_release_recursive
00003a12 g     F .text.itcm	00000016 rtc_get_datetime(datetime_t*)
00003b8c g     F .text.itcm	00000020 MTPD::write(char const*, int)
20001cf4 g     O .data	00000010 Serial
20014c0c g     O .bss	00000020 logBuffer
00010918 g     F .text.itcm	000000b4 __ssputs_r
00002128 g     F .text.itcm	00000008 loadConfig(unsigned short*, int)
0000c3d0  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
000085fc g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
6000193c  w    F .text.code	00000002 startup_early_hook
000063a8 g     F .text.itcm	00000094 ExFatFile::addCluster()
00008970 g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
0000a4a4 g     F .text.itcm	00000044 usb_serial_peekchar
000115ee g     F .text.itcm	00000024 __sfputs_r
0000e5f8 g     F .text.itcm	0000000c __sfp_lock_acquire
0000eae0 g     F .text.itcm	00000000 memchr
00007a48 g     F .text.itcm	000000d0 FatPartition::fatPut(unsigned long, unsigned long)
0000d9c0  w    F .text.itcm	00000434 _printf_float
0000a800 g     F .text.itcm	00000250 set_arm_clock
20015370 g     O .bss	00000004 systick_cycle_count
200022c2 g     O .data	00000016 usb_string_serial_number_default
0000f798 g     F .text.itcm	00000098 _free_r
00008c7a g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
00008d3e g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
00009724 g     F .text.itcm	00000074 SdioCard::readStop()
00000d9a  w    F .text.itcm	00000060 FsVolume::rename(char const*, char const*)
0000876a  w    F .text.itcm	00000004 SharedSpiCard::type() const
00001a3a g     F .text.itcm	000000de MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000c3c0  w    F .text.itcm	00000004 usb_serial_class::flush()
00010bc8 g     F .text.itcm	0000007a _sungetc_r
00011a84 g     F .text.itcm	0000027a .hidden __aeabi_dsub
0000c3b8  w    F .text.itcm	00000004 usb_serial_class::read()
00008444 g     F .text.itcm	000000b8 FatFile::remove()
00011d88 g     F .text.itcm	0000006a .hidden __floatundidf
00000efc  w    F .text.itcm	0000001c FsFile::FsFile()
0000b738  w    F .text.itcm	00000006 _lseek
0000370c g     F .text.itcm	00000068 adcStatus()
000103b8 g     F .text.itcm	000000d8 __lshift
00002de8 g     F .text.itcm	00000264 storeData(short)
00007548 g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000b1d8 g     F .text.itcm	0000002c usb_prepare_transfer
0000876e  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b574 g     F .text.itcm	00000180 unused_interrupt_vector
60001d28 g     F .text.code	0000012c tempmon_init
20015398 g     O .bss	00000004 usb_timer0_callback
00007e8c g     F .text.itcm	000000cc FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000e864 g     F .text.itcm	00000060 _vasnprintf_r
00002d40 g     F .text.itcm	00000014 powerDown()
00008798 g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00005df8 g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000b848 g     F .text.itcm	00000064 eeprom_read_byte
0000e95e g     F .text.itcm	00000036 strlcpy
000011e0 g     F .text.itcm	000000b0 MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)
0000e994 g     F .text.itcm	00000024 strncmp
00007dfa g     F .text.itcm	00000092 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00006736 g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000a4fc g     F .text.itcm	00000060 usb_serial_flush_input
20002298 g     O .data	00000004 fsamp
000061ae g     F .text.itcm	00000060 ExFatPartition::freeClusterCount()
00001328 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000f70  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
000101b0 g     F .text.itcm	00000154 __multiply
00002710 g     F .text.itcm	0000001c getDataCount()
0000a708 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000e806 g     F .text.itcm	0000004a _vdiprintf_r
00000af8 g     F .text.itcm	00000084 i2s_setup()
00003524 g     F .text.itcm	00000008 adcStart()
000106bc g     F .text.itcm	000000b4 __d2b
00008d8c g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
00008e92  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001898 g     F .text.code	00000054 _reboot_Teensyduino_
000090d8  w    F .text.itcm	0000000e SdioCard::~SdioCard()
6000193e g     F .text.code	00000002 startup_default_middle_hook
00000c86  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00000b7c g     F .text.itcm	000000a4 dma_setup()
00008894 g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00008ad0 g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
00009820 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00011598 g     F .text.itcm	00000004 _strtoul_r
000034c4 g     F .text.itcm	00000024 usbPowerInit()
0000c058 g     F .text.itcm	000000c4 usb_mtp_send
0000acb0 g     F .text.itcm	000004a8 usb_isr
0000d870 g     F .text.itcm	0000001c __cxa_atexit
00005818 g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
0000e9c0 g     F .text.itcm	00000020 _close_r
00008e22  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00011d20 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00008b4a g     F .text.itcm	0000002a SharedSpiCard::readStop()
00005400 g     F .text.itcm	0000004e FsCache::sync()
0000e8c4 g     F .text.itcm	00000020 memcmp
20000524  w    O .data	00000028 vtable for usb_serial_class
00009f6e g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
0000424a g     F .text.itcm	000000e6 MTPD::GetObject(unsigned long)
00009fb6 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20014ce0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000e724 g     F .text.itcm	00000058 sscanf
000118c4 g     F .text.itcm	000000b0 __swsetup_r
0000c9fc  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
000064c8 g     F .text.itcm	00000056 ExFatFile::rmdir()
00004108 g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000d48  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00002918 g     F .text.itcm	000000e4 headerInit(long, long, long, int)
00008b16 g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
000107d0 g     F .text.itcm	00000046 __copybits
000044ac g     F .text.itcm	00000016 MTPD::read16()
00000c92 g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
0000e77c g     F .text.itcm	00000022 __sread
0000a76c g     F .text.itcm	00000094 usb_serial_flush_output
0000b8ac g     F .text.itcm	0000001c eeprom_read_block
0000cb4c g     F .text.itcm	0000000c __malloc_lock
000055d4 g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20002400 g     O .data	000002c0 _VectorsRam
00009f76 g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
000089e0 g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
00011314 g     F .text.itcm	00000050 _fflush_r
00011488 g     F .text.itcm	0000002c _calloc_r
00004414 g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
00002a70 g     F .text.itcm	000000c0 makeHeader(long*)
00000f30  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
00008114 g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
200022b4 g     O .data	00000004 t_acq
200155e6 g     O .bss	00000001 yield_active_check_flags
000065fc g     F .text.itcm	00000042 ExFatFile::sync()
0000eac0 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
200155e4 g     O .bss	00000001 usb_high_speed
000075ec g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
0000951c g     F .text.itcm	00000040 SdioCard::isBusy()
00003bac g     F .text.itcm	00000016 MTPD::write8(unsigned char)
00009fbc g     F .text.itcm	00000000 memset
0000c3d6 g     F .text.itcm	00000010 main
0000d88c g     F .text.itcm	00000006 fcvt
00005ef8 g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20202000 g     O .bss.dma	00000069 usb_descriptor_buffer
00000218 g     F .text.itcm	00000030 resetUSB()
00008dbc g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
00006954 g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
20000448 g     O .data	00000060 vtable for MTPStorage_SD
0000453c g     F .text.itcm	000000e0 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000e918 g     F .text.itcm	00000046 strlcat
000073d8 g     F .text.itcm	00000036 FatFile::dirEntry(DirFat_t*)
0000e7fe g     F .text.itcm	00000008 __sclose
0000c11c g     F .text.itcm	00000054 usb_init_serialnumber
0000d86c g     F .text.itcm	00000004 _strtol_r
600024d0 g       .text.code	00000000 __init_array_end
0000ecc0 g     F .text.itcm	00000ad8 _dtoa_r
0000ca60 g     F .text.itcm	000000ec _malloc_r
00008776 g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
00010868 g     F .text.itcm	0000001a __ascii_wctomb
00011d98 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20014838 g     O .bss	00000004 FatVolume::m_cwv
0000c360  w    F .text.itcm	00000008 Print::print(char const*)
000113d6 g     F .text.itcm	00000074 __submore
20000604  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c414 g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
00004d2c g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
669d271b g       *ABS*	00000000 __rtc_localtime
0000b4fc g     F .text.itcm	0000004c micros
00003c28 g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
00006520 g     F .text.itcm	000000dc ExFatFile::syncDir()
0000526c g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
60002648 g     O .text.progmem	00000004 string0
0000a57c g     F .text.itcm	0000018c usb_serial_write
60001940  w    F .text.code	00000002 startup_late_hook
0000ac50 g     F .text.itcm	00000034 usb_start_sof_interrupts
00000dfa  w    F .text.itcm	00000050 FsBaseFile::available() const
00008e06 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c3bc  w    F .text.itcm	00000004 usb_serial_class::available()
0000e724 g     F .text.itcm	00000058 siscanf
000044d6 g     F .text.itcm	00000030 MTPD::readstring(char*)
0000729c g     F .text.itcm	00000080 FatFile::sync()
20000000 g     O .data	00000300 endpoint_queue_head
00006382  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60002610  w    O .text.progmem	00000020 usb_string_product_name
00003b0c g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000b548 g     F .text.itcm	0000002a delay
00011e28 g     F .text.itcm	00000040 .hidden __fixunsdfdi
200153c6 g     O .bss	00000002 dma_channel_allocated_mask
00000e92 g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
00005752 g     F .text.itcm	00000020 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000ecc  w    F .text.itcm	00000022 FsBaseFile::seekSet(unsigned long long)
00011ea0 g     F .fini	00000000 _fini
00003508 g     F .text.itcm	00000014 acqPower(int)
000028c0  w    F .text.itcm	00000014 FsBaseFile::sync()
00004e0c g     F .text.itcm	00000026 TwoWire::write(unsigned char)
00008940 g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
20015380 g     O .bss	00000004 t_off
00005ecc g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000e6e4 g     F .text.itcm	00000040 sprintf
0000c504 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000d93e g     F .text.itcm	0000007c __exponent
0000c4ba g     F .text.itcm	00000012 Print::print(long)
0000731c g     F .text.itcm	00000010 FatFile::close()
0000bc34 g     F .text.itcm	00000004 Panic_Temp_isr
00011df4 g     F .text.itcm	00000030 .hidden __fixdfdi
00000998 g     F .text.itcm	00000160 setAudioFrequency(int)
0000272c g     F .text.itcm	0000000c queue_isBusy()
200022a0 g     O .data	00000004 sd
0000744e g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
00009074  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000b8  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000ea48 g     F .text.itcm	00000024 _write_r
0000955c g     F .text.itcm	000000c8 SdioCard::erase(unsigned long, unsigned long)
200022c0 g     O .data	00000002 again
00000258 g     F .text.itcm	00000024 lowPowerInit()
0000315c g     F .text.itcm	000000b4 filing_init()
0000bf94 g     F .text.itcm	00000094 usb_mtp_recv
0000eba0 g     F .text.itcm	0000000c nanf
0000ddf4 g     F .text.itcm	000000da _printf_common
200151b4 g     O .bss	00000004 setup_ready
20002294 g     O .data	00000004 _impure_ptr
0000599e g     F .text.itcm	0000002a ExFatFile::peek()
00011208 g     F .text.itcm	0000010c __sflush_r
20000424  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000c170  w    F .text.itcm	00000054 EventResponder::runFromYield()
20001d04 g     O .data	00000140 Wire
00008730 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000e640 g     F .text.itcm	0000003c _fwalk_sglue
00009014 g     F .text.itcm	0000000c SdioCard::errorCode() const
000073ca g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001f4  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
600024c0 g       .text.code	00000000 __preinit_array_end
60001f1c g     F .text.code	000004a4 CrashReportClass::printTo(Print&) const
000027ec g     F .text.itcm	00000072 dateTime(unsigned short*, unsigned short*, unsigned char*)
000109cc g     F .text.itcm	000001fc _svfiprintf_r
00002c0c g     F .text.itcm	00000094 newFileName(char*)
00000f18  w    F .text.itcm	00000018 FsFile::~FsFile()
00006040 g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
000088f2 g     F .text.itcm	00000026 SharedSpiCard::spiStart()
00001890 g     F .text.itcm	0000000e MTPStorage_SD::DeleteObject(unsigned long)
0000fede g     F .text.itcm	00000024 __ascii_mbtowc
000105dc g     F .text.itcm	0000004c __ulp
0000ac84 g     F .text.itcm	0000002c usb_stop_sof_interrupts
0000c370  w    F .text.itcm	00000008 Print::print(unsigned long, int)
00004df4  w    F .text.itcm	00000016 TwoWire::peek()
00004e0a  w    F .text.itcm	00000002 TwoWire::flush()
00000788 g     F .text.itcm	0000014c setup
200009b8 g     O .data	00000078 usb_descriptor_list
000092a0 g     F .text.itcm	00000004 SdioCard::status()
00001088 g     F .text.itcm	0000002e MTPStorage_SD::ResetIndex()
00003b74 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
0000742e g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000e80  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
0000351c g     F .text.itcm	00000008 adcReset()
00000e5e  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000eb90 g     F .text.itcm	00000010 nan
00006e68 g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00004330 g     F .text.itcm	000000e4 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
00010c7c g     F .text.itcm	000002f0 __ssvfiscanf_r
00006e2e g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20014800 g     O .bss	00000004 ExFatVolume::m_cwv
00011974 g     F .text.itcm	0000004c __swhatbuf_r
20068000 g       .text.csf	00000000 _estack
00008758 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c330 g     F .text.itcm	00000030 DMAChannel::release()
00002214 g     F .text.itcm	00000124 loadParameters()
0000a720 g     F .text.itcm	0000004c usb_serial_write_buffer_free
000034e8 g     F .text.itcm	00000020 usbPowerSetup()
60001714 g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
2000223c g     O .data	0000000c __sglue
0000a2d0 g     F .text.itcm	00000100 usb_serial_configure
00004e32 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
0000c4e8  w    F .text.itcm	0000001c _write
200026c0 g       .data	00000000 _edata
0000611a g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
200155c1 g     O .bss	00000001 external_psram_size
00003e14 g     F .text.itcm	000000e0 MTPD::GetObjectInfo(unsigned long)
00009074  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00005544 g     F .text.itcm	00000048 FsName::get16()
00008800  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00008be0 g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00008786 g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
00005684 g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
00006da0 g     F .text.itcm	00000070 FatFile::addDirCluster()
0000c3c4  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00005248 g     F .text.itcm	0000000c lpi2c1_isr()
0000794e g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000c20 g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000b26c g     F .text.itcm	00000046 ultoa
00004496 g     F .text.itcm	00000016 MTPD::read8()
6000176c g     F .text.code	00000048 TwoWire::begin()
200153c4 g     O .bss	00000002 dgain
00008586 g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
00001160 g     F .text.itcm	0000003e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000e7a2 g     F .text.itcm	00000038 __swrite
0000c238 g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
00002624 g     F .text.itcm	000000e4 menu(short)
0000c3b4  w    F .text.itcm	00000004 usb_serial_class::peek()
0000d892 g     F .text.itcm	00000008 fcvtf
00008e96  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00008918 g     F .text.itcm	00000028 SharedSpiCard::spiStop()
00003a36 g     F .text.itcm	00000024 rtcSetDate(int, int, int)
0000119e g     F .text.itcm	00000042 MTPStorage_SD::GetNextObjectHandle(unsigned long)
0001159c g     F .text.itcm	00000024 fiprintf
00011614 g     F .text.itcm	00000234 _vfiprintf_r
00003a5a g     F .text.itcm	00000024 rtcSetTime(int, int, int)
00009ddc  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
20002700 g     O .bss	00002440 mtpd
000104c8 g     F .text.itcm	00000114 __mdiff
00002798 g     F .text.itcm	00000054 pullData(unsigned long*)
00009064 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
000014c2 g     F .text.itcm	00000098 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
000060da g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00006c24 g     F .text.itcm	000000ec FatFile::getName8(char*, unsigned int)
00002b30 g     F .text.itcm	0000005c checkEndOfFile(short)
20002248 g     O .data	0000004c _impure_data
00005aa8 g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00002a10 g     F .text.itcm	00000060 writeHeader(char*)
00001f88 g     F .text.itcm	00000198 menu3()
0000e604 g     F .text.itcm	0000000c __sfp_lock_release
20014c30 g     O .bss	00000004 mtp_txEventCount
0000c378  w    F .text.itcm	00000014 Print::println(unsigned long, int)
000028d4 g     F .text.itcm	00000044 timeStamp()
00009724 g     F .text.itcm	00000074 SdioCard::writeStop()
0000e6e4 g     F .text.itcm	00000040 siprintf
00011364 g     F .text.itcm	00000072 __sccl
000089d8 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
0000571e g     F .text.itcm	00000014 ExFatFile::close()
2000120f g     O .data	00000101 _ctype_
0000b720  w    F .text.itcm	00000004 _read
600024c0 g       .text.code	00000000 __init_array_start
0000c9fc  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00001024 g     F .text.itcm	00000064 MTPStorage_SD::OpenIndex()
600023c0 g     F .text.code	0000000e CrashReportClass::operator bool()
000044c2 g     F .text.itcm	00000014 MTPD::read32()
20001cec g     O .data	00000004 F_BUS_ACTUAL
0000bdae g     F .text.itcm	00000036 quadtimer_init
20014b98 g     O .bss	00000004 disk_count
00003844 g     F .text.itcm	000000fc time2date(unsigned long, datetime_t*)
00007da0 g     F .text.itcm	0000003c FatVolume::chdir(char const*)
00003940 g     F .text.itcm	000000cc date2time(datetime_t*)
0000c3e8 g     F .text.itcm	0000002c Stream::timedRead()
000119c0 g     F .text.itcm	00000078 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000c294 g     F .text.itcm	0000009c DMAChannel::begin(bool)
00008802  w    F .text.itcm	00000006 SharedSpiCard::end()
0000eb80 g     F .text.itcm	00000010 strlen
0000ded0 g     F .text.itcm	00000244 _printf_i
00006e3a g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
00007052 g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
0000f900 g     F .text.itcm	0000045c __gethex
60002610 g     O .text.progmem	00000020 usb_string_product_name_default
20014858 g     O .bss	00000004 __malloc_sbrk_start
000036d0 g     F .text.itcm	0000003c setAGain(signed char)
0000e850 g     F .text.itcm	00000014 vdprintf
000094bc g     F .text.itcm	00000060 SdioCard::sectorCount()
00007200 g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
6000193e  w    F .text.code	00000002 startup_middle_hook
20000594 g     O .data	00000070 vtable for SdioCard
00011d44 g     F .text.itcm	00000042 .hidden __aeabi_f2d
000012a6 g     F .text.itcm	00000082 MTPStorage_SD::close()
00006d10 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001946 g     F .text.code	00000112 configure_cache
00000e4a  w    F .text.itcm	00000014 FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)
0000bb5c g     F .text.itcm	0000001c eeprom_write_block
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
00008e8e  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
00001388 g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
20014854 g     O .bss	00000004 __malloc_free_list
00008b06  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
00002ba0 g     F .text.itcm	0000006c newDirectory(char*)
00009c38 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00002338 g     F .text.itcm	000002ec menu2()
00009ee0 g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
00003210 g     F .text.itcm	00000290 compress(void*)
00006b60  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00000c8e g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00011a84 g     F .text.itcm	0000027a .hidden __subdf3
00011614 g     F .text.itcm	00000234 _vfprintf_r
600024c0 g       .text.code	00000000 __preinit_array_start
0000b228 g     F .text.itcm	0000001c usb_receive
00005fa0 g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001e0  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
00001290 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
20015384 g     O .bss	00000004 t_rep
00010128 g     F .text.itcm	0000005a __lo0bits
000060b4 g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
200022bc g     O .data	00000004 tempDatai
0000713e g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00017c00 g       *ABS*	00000000 _flashimagelen
00008b74 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000c6f8 g     F .text.itcm	0000000a __aeabi_atexit
00000f18  w    F .text.itcm	00000018 FsFile::~FsFile()
0000b744 g     F .text.itcm	00000024 rtc_get
0000643c g     F .text.itcm	0000008c ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000c270 g     F .text.itcm	00000004 pendablesrvreq_isr
0000461c g     F .text.itcm	000000f4 MTPD::SendObject()
200153c8 g     O .bss	00000002 monitor
00001e6c g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
200020d0 g     O .data	0000016c __global_locale
00009918 g     F .text.itcm	0000026c SdioCard::begin(SdioConfig)
00005732 g     F .text.itcm	00000020 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000a3d0 g     F .text.itcm	000000d4 usb_serial_read
200155b7 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000c51e g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000b198 g     F .text.itcm	00000040 usb_config_tx
0000b724  w    F .text.itcm	00000006 _close
0000798a g     F .text.itcm	000000be FatPartition::fatGet(unsigned long, unsigned long*)
0000ca10 g     F .text.itcm	00000010 free
0000e114  w    F .text.itcm	00000408 _scanf_float
0000558c g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
000010e2 g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
0000ffc8 g     F .text.itcm	0000008c __multadd
0000ff84 g     F .text.itcm	00000044 _Bfree
00006ba2 g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
200022c2  w    O .data	00000016 usb_string_serial_number
00009ca4 g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
00009048 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	; (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x200026c0
60001428:	.word	0x20015620

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	6000193c <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	; (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	; (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	; (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	; (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	; (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	; (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	; (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	; (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	; 0xe000e000
60001484:	mov.w	r2, #15728640	; 0xf00000
60001488:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	; (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	; 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	; (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	; 0x80
6000149e:	ldr	r2, [pc, #348]	; (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	; (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	; 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	; 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	; (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	; 0x70000
600014dc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	; 0x7f
600014e6:	orr.w	r3, r3, #64	; 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	; 0x24
600014ee:	bic.w	r3, r3, #127	; 0x7f
600014f2:	orr.w	r3, r3, #64	; 0x40
600014f6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	; (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001502:	bl	60001946 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	; (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	; (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	; (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001524:	orr.w	r3, r3, #16777216	; 0x1000000
60001528:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	; (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	; (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001ccc <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	; (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	600024a0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	; 0x6c
60001558:	orr.w	r3, r3, #12288	; 0x3000
6000155c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	; (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	; 0x50000
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	; (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	; 0x2e15
60001584:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	; 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	; (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	; 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001a58 <configure_external_ram>
	analog_init();
6000159c:	bl	600023d0 <analog_init>
	pwm_init();
600015a0:	bl	60002468 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001d28 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	6000193e <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	600017b4 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	60001942 <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	60001940 <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	60002450 <____libc_init_array_veneer>
	main();
600015ca:	bl	60002490 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x00011ea8
600015dc:	.word	0x60002728
600015e0:	.word	0x00000000
600015e4:	.word	0x200026c0
600015e8:	.word	0x600145d4
600015ec:	.word	0x20000000
600015f0:	.word	0x20002400
600015f4:	.word	0x0000b575
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000c271
6000160c:	.word	0x0000c275
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x20015370
6000161c:	.word	0x016e3600
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x20015374
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	; (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	; (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	; (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	; 0xaa0000
60001642:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	; (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165c:	ldr	r3, [r0, #20]
6000165e:	ldr	r2, [pc, #40]	; (60001688 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001660:	add.w	r0, r3, r1, lsl #4
60001664:	add.w	r1, r3, r1, lsl #4
{
60001668:	push	{r4, r5, lr}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	ldrb	r4, [r0, #8]
6000166c:	ldr	r5, [pc, #28]	; (6000168c <TwoWire::configSDApin(unsigned char)+0x30>)
6000166e:	add.w	r2, r2, r4, lsl #4
60001672:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001674:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001676:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001678:	ldr	r0, [r0, #12]
6000167a:	str	r0, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000167c:	ldr	r3, [r1, #16]
6000167e:	cbz	r3, 60001684 <TwoWire::configSDApin(unsigned char)+0x28>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001680:	ldr	r2, [r1, #20]
60001682:	str	r2, [r3, #0]
	}
}
60001684:	pop	{r4, r5, pc}
60001686:	nop
60001688:	.word	0x20000614
6000168c:	.word	0x0001f861

60001690 <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001690:	push	{r3, r4, r5, lr}
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001692:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001694:	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001696:	ldrb	r2, [r0, #24]
60001698:	add.w	r2, r3, r2, lsl #4
6000169c:	ldrb	r2, [r2, #8]
6000169e:	cmp	r2, r1
600016a0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016a2:	ldrb	r0, [r3, #8]
		if (sda_pin == 255) return;
600016a4:	cmp	r0, #255	; 0xff
600016a6:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (sda_pin == pin) break;
600016a8:	cmp	r1, r0
600016aa:	beq.n	600016d8 <TwoWire::setSDA(unsigned char)+0x48>
		if (sda_pin == 255) return;
600016ac:	ldrb	r1, [r3, #24]
600016ae:	cmp	r1, #255	; 0xff
600016b0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016b2:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b4:	ldr	r1, [r3, #0]
		configSDApin(newindex);
600016b6:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b8:	ldr	r3, [r3, #4]
600016ba:	ldr	r1, [r1, #0]
600016bc:	tst	r1, r3
600016be:	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x44>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c0:	ldr	r3, [pc, #24]	; (600016dc <TwoWire::setSDA(unsigned char)+0x4c>)
		configSDApin(newindex);
600016c2:	mov	r1, r5
600016c4:	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c6:	add.w	r3, r3, r2, lsl #4
600016ca:	movs	r2, #5
600016cc:	ldr	r3, [r3, #4]
600016ce:	str	r2, [r3, #0]
		configSDApin(newindex);
600016d0:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016d4:	strb	r5, [r4, #24]
}
600016d6:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
600016d8:	movs	r5, #0
600016da:	b.n	600016b4 <TwoWire::setSDA(unsigned char)+0x24>
600016dc:	.word	0x20000614

600016e0 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e0:	ldr	r3, [r0, #20]
600016e2:	ldr	r2, [pc, #40]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e4:	add.w	r0, r3, r1, lsl #4
600016e8:	add.w	r1, r3, r1, lsl #4
{
600016ec:	push	{r4, r5, lr}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016ee:	ldrb.w	r4, [r0, #40]	; 0x28
600016f2:	ldr	r5, [pc, #28]	; (60001710 <TwoWire::configSCLpin(unsigned char)+0x30>)
600016f4:	add.w	r2, r2, r4, lsl #4
600016f8:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fa:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fe:	ldr	r0, [r0, #44]	; 0x2c
60001700:	str	r0, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001702:	ldr	r3, [r1, #48]	; 0x30
60001704:	cbz	r3, 6000170a <TwoWire::configSCLpin(unsigned char)+0x2a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001706:	ldr	r2, [r1, #52]	; 0x34
60001708:	str	r2, [r3, #0]
	}
}
6000170a:	pop	{r4, r5, pc}
6000170c:	.word	0x20000614
60001710:	.word	0x0001f861

60001714 <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001714:	push	{r3, r4, r5, lr}
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001716:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001718:	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000171a:	ldrb	r2, [r0, #25]
6000171c:	add.w	r2, r3, r2, lsl #4
60001720:	ldrb.w	r2, [r2, #40]	; 0x28
60001724:	cmp	r2, r1
60001726:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001728:	ldrb.w	r0, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
6000172c:	cmp	r0, #255	; 0xff
6000172e:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (scl_pin == pin) break;
60001730:	cmp	r1, r0
60001732:	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == 255) return;
60001734:	ldrb.w	r1, [r3, #56]	; 0x38
60001738:	cmp	r1, #255	; 0xff
6000173a:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000173c:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173e:	ldr	r1, [r3, #0]
		configSCLpin(newindex);
60001740:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001742:	ldr	r3, [r3, #4]
60001744:	ldr	r1, [r1, #0]
60001746:	tst	r1, r3
60001748:	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4a>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174a:	ldr	r3, [pc, #28]	; (60001768 <TwoWire::setSCL(unsigned char)+0x54>)
		configSCLpin(newindex);
6000174c:	mov	r1, r5
6000174e:	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001750:	add.w	r3, r3, r2, lsl #4
60001754:	movs	r2, #5
60001756:	ldr	r3, [r3, #4]
60001758:	str	r2, [r3, #0]
		configSCLpin(newindex);
6000175a:	bl	600016e0 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175e:	strb	r5, [r4, #25]
}
60001760:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
60001762:	movs	r5, #0
60001764:	b.n	6000173e <TwoWire::setSCL(unsigned char)+0x2a>
60001766:	nop
60001768:	.word	0x20000614

6000176c <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	ldr	r2, [pc, #60]	; (600017ac <TwoWire::begin()+0x40>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176e:	ldr	r1, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001770:	ldr	r3, [r2, #56]	; 0x38
60001772:	bic.w	r3, r3, #16515072	; 0xfc0000
60001776:	orr.w	r3, r3, #262144	; 0x40000
{
6000177a:	push	{r4, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000177c:	str	r3, [r2, #56]	; 0x38
{
6000177e:	mov	r4, r0
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001780:	ldr	r2, [r1, #0]
60001782:	ldr	r1, [r1, #4]
60001784:	ldr	r3, [r2, #0]
60001786:	orrs	r3, r1
	setClock(100000);
60001788:	ldr	r1, [pc, #36]	; (600017b0 <TwoWire::begin()+0x44>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
6000178c:	movs	r2, #2
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
6000178e:	ldr	r3, [r0, #16]
	port->MCR = LPI2C_MCR_RST;
60001790:	str	r2, [r3, #16]
	setClock(100000);
60001792:	bl	60002480 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
60001796:	ldrb	r1, [r4, #24]
60001798:	mov	r0, r4
6000179a:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
6000179e:	ldrb	r1, [r4, #25]
600017a0:	mov	r0, r4
}
600017a2:	ldmia.w	sp!, {r4, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017a6:	b.w	600016e0 <TwoWire::configSCLpin(unsigned char)>
600017aa:	nop
600017ac:	.word	0x400fc000
600017b0:	.word	0x000186a0

600017b4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017b4:	ldr	r3, [pc, #192]	; (60001878 <usb_init+0xc4>)
600017b6:	movw	r2, #3937	; 0xf61
{
600017ba:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017bc:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600017c0:	bl	60002478 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c4:	ldr	r2, [pc, #180]	; (6000187c <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017c6:	ldr	r1, [pc, #184]	; (60001880 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c8:	ldr.w	r3, [r2, #128]	; 0x80
600017cc:	orr.w	r3, r3, #3
600017d0:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
600017d4:	movw	r2, #1028	; 0x404
600017d8:	ldr	r3, [pc, #168]	; (60001884 <usb_init+0xd0>)
600017da:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017de:	ldr	r2, [pc, #168]	; (60001888 <usb_init+0xd4>)
600017e0:	ldr	r0, [r2, #0]
600017e2:	tst	r0, r1
600017e4:	bne.n	600017ee <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600017e6:	ldr.w	r1, [r3, #424]	; 0x1a8
600017ea:	lsls	r4, r1, #30
600017ec:	beq.n	60001824 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600017ee:	mov.w	r1, #2147483648	; 0x80000000
600017f2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017f4:	ldr.w	r2, [r3, #320]	; 0x140
600017f8:	orr.w	r2, r2, #2
600017fc:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001800:	ldr	r2, [pc, #128]	; (60001884 <usb_init+0xd0>)
60001802:	ldr.w	r3, [r2, #320]	; 0x140
60001806:	lsls	r0, r3, #30
60001808:	bmi.n	60001802 <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000180a:	mov.w	r3, #3758153728	; 0xe000e000
6000180e:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001812:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001814:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001818:	mov.w	r2, #2147483648	; 0x80000000
6000181c:	ldr	r3, [pc, #104]	; (60001888 <usb_init+0xd4>)
6000181e:	str	r2, [r3, #56]	; 0x38
		delay(25);
60001820:	bl	600024a8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001824:	ldr	r3, [pc, #96]	; (60001888 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
60001826:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001828:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000182c:	ldr	r4, [pc, #84]	; (60001884 <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000182e:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001830:	mov.w	r2, #768	; 0x300
	USBPHY1_PWD = 0;
60001834:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001836:	movs	r3, #10
60001838:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000183c:	ldr	r3, [pc, #76]	; (6000188c <usb_init+0xd8>)
6000183e:	mov	r0, r3
60001840:	bl	60002448 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001844:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001848:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000184c:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000184e:	mov.w	r2, #4194304	; 0x400000
60001852:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001854:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001858:	ldr	r2, [pc, #52]	; (60001890 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000185a:	str.w	r3, [r4, #328]	; 0x148
6000185e:	ldr	r3, [pc, #52]	; (60001894 <usb_init+0xe0>)
60001860:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001864:	mov.w	r3, #3758153728	; 0xe000e000
60001868:	mov.w	r2, #131072	; 0x20000
6000186c:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001870:	movs	r3, #1
60001872:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001876:	pop	{r4, pc}
60001878:	.word	0x400d8000
6000187c:	.word	0x400fc000
60001880:	.word	0x001e1c00
60001884:	.word	0x402e0000
60001888:	.word	0x400d9000
6000188c:	.word	0x20000000
60001890:	.word	0x0000acb1
60001894:	.word	0x20002400

60001898 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001898:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000189a:	ldr	r3, [pc, #60]	; (600018d8 <_reboot_Teensyduino_+0x40>)
6000189c:	ldr	r3, [r3, #96]	; 0x60
6000189e:	lsls	r3, r3, #30
600018a0:	bmi.n	600018a4 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600018a2:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600018a4:	cpsid	i
		USB1_USBCMD = 0;
600018a6:	ldr	r3, [pc, #52]	; (600018dc <_reboot_Teensyduino_+0x44>)
600018a8:	movs	r2, #0
600018aa:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
600018ae:	sub.w	r3, r3, #2310144	; 0x234000
600018b2:	ldr	r2, [pc, #44]	; (600018e0 <_reboot_Teensyduino_+0x48>)
600018b4:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600018b6:	sub.w	r3, r3, #534773760	; 0x1fe00000
600018ba:	sub.w	r3, r3, #700416	; 0xab000
600018be:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600018c0:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
600018c4:	ldr	r0, [pc, #28]	; (600018e4 <_reboot_Teensyduino_+0x4c>)
600018c6:	ldr	r3, [pc, #32]	; (600018e8 <_reboot_Teensyduino_+0x50>)
600018c8:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600018ca:	mov.w	r3, #2097152	; 0x200000
600018ce:	ldr	r3, [r3, #28]
600018d0:	ldr	r3, [r3, #8]
600018d2:	blx	r3
600018d4:	b.n	600018a4 <_reboot_Teensyduino_+0xc>
600018d6:	nop
600018d8:	.word	0x401f4400
600018dc:	.word	0x402e0000
600018e0:	.word	0x00200003
600018e4:	.word	0x20208000
600018e8:	.word	0xeb120000

600018ec <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
600018ec:	ldr	r3, [pc, #28]	; (6000190c <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ee:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
600018f2:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018f6:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018fa:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018fe:	ldr	r2, [r3, #20]
60001900:	lsls	r2, r2, #31
60001902:	bpl.n	600018fe <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	movs	r2, #1
60001906:	str	r2, [r3, #20]
}
60001908:	bx	lr
6000190a:	nop
6000190c:	.word	0x402a4000

60001910 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
60001910:	ldr	r3, [pc, #32]	; (60001934 <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001912:	ldr	r2, [pc, #36]	; (60001938 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
60001914:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001918:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000191c:	movs	r2, #1
6000191e:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001922:	ldr	r2, [r3, #20]
60001924:	lsls	r2, r2, #31
60001926:	bpl.n	60001922 <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
60001928:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000192c:	movs	r2, #33	; 0x21
}
6000192e:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001930:	str	r2, [r3, #20]
}
60001932:	bx	lr
60001934:	.word	0x402a4000
60001938:	.word	0x00030004

6000193c <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
6000193c:	bx	lr

6000193e <startup_default_middle_hook>:
6000193e:	bx	lr

60001940 <startup_default_late_hook>:
60001940:	bx	lr

60001942 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001942:	nop
60001944:	bx	lr

60001946 <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
60001946:	mov.w	r3, #3758153728	; 0xe000e000
6000194a:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000194c:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
6000194e:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001952:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001956:	ldr	r2, [pc, #184]	; (60001a10 <configure_cache+0xca>)
60001958:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000195c:	movs	r2, #17
6000195e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001962:	ldr	r2, [pc, #176]	; (60001a14 <configure_cache+0xce>)
60001964:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001968:	movs	r2, #18
6000196a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000196e:	ldr	r2, [pc, #168]	; (60001a18 <configure_cache+0xd2>)
60001970:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001974:	ldr	r2, [pc, #164]	; (60001a1c <configure_cache+0xd6>)
60001976:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000197a:	ldr	r2, [pc, #164]	; (60001a20 <configure_cache+0xda>)
6000197c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001980:	ldr	r2, [pc, #160]	; (60001a24 <configure_cache+0xde>)
60001982:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001986:	ldr	r2, [pc, #160]	; (60001a28 <configure_cache+0xe2>)
60001988:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000198c:	ldr	r2, [pc, #156]	; (60001a2c <configure_cache+0xe6>)
6000198e:	orr.w	r2, r2, #21
60001992:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001996:	ldr	r2, [pc, #152]	; (60001a30 <configure_cache+0xea>)
60001998:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000199c:	add.w	r2, r2, #270532608	; 0x10200000
600019a0:	adds	r2, #13
600019a2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600019a6:	ldr	r2, [pc, #140]	; (60001a34 <configure_cache+0xee>)
600019a8:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600019ac:	ldr	r2, [pc, #136]	; (60001a38 <configure_cache+0xf2>)
600019ae:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600019b2:	ldr	r2, [pc, #136]	; (60001a3c <configure_cache+0xf6>)
600019b4:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600019b8:	ldr	r2, [pc, #132]	; (60001a40 <configure_cache+0xfa>)
600019ba:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600019be:	ldr	r2, [pc, #132]	; (60001a44 <configure_cache+0xfe>)
600019c0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600019c4:	ldr	r2, [pc, #128]	; (60001a48 <configure_cache+0x102>)
600019c6:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600019ca:	ldr	r2, [pc, #128]	; (60001a4c <configure_cache+0x106>)
600019cc:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600019d0:	ldr	r2, [pc, #124]	; (60001a50 <configure_cache+0x10a>)
600019d2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600019d6:	ldr	r2, [pc, #124]	; (60001a54 <configure_cache+0x10e>)
600019d8:	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600019dc:	nop
	asm("nop");
600019de:	nop
	asm("nop");
600019e0:	nop
	asm("nop");
600019e2:	nop
	asm("nop");
600019e4:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600019e6:	movs	r2, #1
600019e8:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600019ec:	dsb	sy
	asm("isb");
600019f0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600019f4:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600019f8:	dsb	sy
	asm("isb");
600019fc:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a00:	ldr.w	r2, [r3, #3348]	; 0xd14
60001a04:	orr.w	r2, r2, #196608	; 0x30000
60001a08:	str.w	r2, [r3, #3348]	; 0xd14
}
60001a0c:	bx	lr
60001a0e:	nop
60001a10:	.word	0x1000003f
60001a14:	.word	0x07080025
60001a18:	.word	0x00100009
60001a1c:	.word	0x00200013
60001a20:	.word	0x07020021
60001a24:	.word	0x20000014
60001a28:	.word	0x13080025
60001a2c:	.word	0x20015620
60001a30:	.word	0x10000009
60001a34:	.word	0x130b0027
60001a38:	.word	0x40000017
60001a3c:	.word	0x13100033
60001a40:	.word	0x60000018
60001a44:	.word	0x070b002f
60001a48:	.word	0x70000019
60001a4c:	.word	0x130b002f
60001a50:	.word	0x8000001a
60001a54:	.word	0x130b003b

60001a58 <configure_external_ram>:
{
60001a58:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a5a:	ldr	r3, [pc, #536]	; (60001c74 <configure_external_ram+0x21c>)
60001a5c:	ldr	r2, [pc, #536]	; (60001c78 <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a5e:	ldr	r1, [pc, #540]	; (60001c7c <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a60:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a64:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a68:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a6c:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a70:	ldr	r4, [pc, #524]	; (60001c80 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a72:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a76:	add.w	r2, r2, #28672	; 0x7000
60001a7a:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a7e:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a82:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a86:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001a8a:	movs	r2, #24
60001a8c:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001a8e:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001a90:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001a92:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001a94:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001a96:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001a9a:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a9e:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001aa2:	movs	r2, #1
60001aa4:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001aa8:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001aac:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001ab0:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001ab4:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001ab8:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001abc:	ldr	r2, [pc, #452]	; (60001c84 <configure_external_ram+0x22c>)
60001abe:	ldr	r3, [r2, #24]
60001ac0:	bic.w	r3, r3, #3758096384	; 0xe0000000
60001ac4:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001ac8:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001acc:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001ad0:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001ad2:	ldr.w	r3, [r2, #132]	; 0x84
60001ad6:	orr.w	r3, r3, #12
60001ada:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001ade:	ldr	r3, [pc, #424]	; (60001c88 <configure_external_ram+0x230>)
60001ae0:	ldr	r2, [r3, #0]
60001ae2:	orr.w	r2, r2, #2
60001ae6:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ae8:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001aea:	ldr	r2, [pc, #416]	; (60001c8c <configure_external_ram+0x234>)
60001aec:	bic.w	r1, r1, #30848	; 0x7880
60001af0:	bic.w	r1, r1, #115	; 0x73
60001af4:	lsls	r1, r1, #16
60001af6:	lsrs	r1, r1, #16
60001af8:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001afa:	ldr	r1, [pc, #404]	; (60001c90 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001afc:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001afe:	mov.w	r2, #4294967295
60001b02:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b04:	add.w	r2, r2, #16187392	; 0xf70000
60001b08:	ldr	r0, [r1, #8]
60001b0a:	add.w	r2, r2, #14336	; 0x3800
60001b0e:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b10:	ldr	r0, [pc, #384]	; (60001c94 <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001b12:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b16:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001b18:	ldr	r2, [r3, #12]
60001b1a:	bic.w	r2, r2, #120	; 0x78
60001b1e:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b20:	ldr	r2, [r3, #32]
60001b22:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b24:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b26:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b28:	ldr	r2, [r3, #32]
60001b2a:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b2c:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b30:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b32:	ldr	r0, [pc, #356]	; (60001c98 <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b34:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001b36:	ldr	r2, [pc, #356]	; (60001c9c <configure_external_ram+0x244>)
60001b38:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001b3a:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001b3c:	ldr.w	r2, [r1, #184]	; 0xb8
60001b40:	bic.w	r2, r2, #63	; 0x3f
60001b44:	orr.w	r2, r2, #1
60001b48:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b4c:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001b50:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b52:	bic.w	r2, r2, #63	; 0x3f
60001b56:	orr.w	r2, r2, #1
60001b5a:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b5e:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001b62:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b64:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b66:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b68:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001b6c:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b6e:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b70:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b74:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b76:	ldr	r0, [pc, #296]	; (60001ca0 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b78:	bic.w	r2, r2, #2
60001b7c:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b7e:	ldr	r2, [pc, #292]	; (60001ca4 <configure_external_ram+0x24c>)
60001b80:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b82:	movs	r2, #2
60001b84:	str	r2, [r3, #28]
60001b86:	ldr	r2, [pc, #288]	; (60001ca8 <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b88:	str.w	r1, [r2], #4
60001b8c:	cmp	r2, r0
60001b8e:	bne.n	60001b88 <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001b90:	ldr	r2, [r3, #0]
60001b92:	orr.w	r2, r2, #1
60001b96:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b98:	ldr	r3, [pc, #236]	; (60001c88 <configure_external_ram+0x230>)
60001b9a:	ldr	r4, [r3, #0]
60001b9c:	ands.w	r4, r4, #1
60001ba0:	bne.n	60001b9a <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ba2:	ldr	r2, [pc, #256]	; (60001ca4 <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ba4:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001ba6:	mov	r1, r4
60001ba8:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001baa:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bac:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bb0:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bb2:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001bb6:	movw	r2, #1126	; 0x466
60001bba:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001bbe:	movw	r2, #1177	; 0x499
60001bc2:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001bc6:	ldr	r2, [pc, #228]	; (60001cac <configure_external_ram+0x254>)
60001bc8:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001bcc:	movw	r2, #9217	; 0x2401
60001bd0:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001bd4:	movw	r2, #1077	; 0x435
60001bd8:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001bdc:	ldr	r2, [pc, #208]	; (60001cb0 <configure_external_ram+0x258>)
60001bde:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001be2:	ldr	r2, [pc, #208]	; (60001cb4 <configure_external_ram+0x25c>)
60001be4:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001be8:	ldr	r2, [pc, #204]	; (60001cb8 <configure_external_ram+0x260>)
60001bea:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001bee:	movw	r2, #8705	; 0x2201
60001bf2:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001bf6:	bl	600018ec <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001bfa:	movs	r0, #1
60001bfc:	bl	600018ec <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001c00:	mov	r0, r6
60001c02:	bl	600018ec <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001c06:	mov	r0, r4
60001c08:	bl	60001910 <flexspi2_psram_id>
60001c0c:	movw	r3, #23821	; 0x5d0d
60001c10:	mov	r5, r0
60001c12:	cmp	r0, r3
60001c14:	bne.n	60001c66 <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001c16:	movs	r0, #4
60001c18:	bl	600018ec <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001c1c:	mov.w	r1, #8388608	; 0x800000
60001c20:	mov	r0, r4
60001c22:	bl	600018ec <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001c26:	movs	r0, #1
60001c28:	bl	600018ec <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001c2c:	mov	r0, r6
60001c2e:	bl	600018ec <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c32:	mov	r0, r1
60001c34:	bl	60001910 <flexspi2_psram_id>
60001c38:	cmp	r0, r5
60001c3a:	bne.n	60001c62 <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001c3c:	movs	r0, #4
60001c3e:	bl	600018ec <flexspi2_command>
			external_psram_size = 16;
60001c42:	movs	r0, #16
			external_psram_size * 0x100000 -
60001c44:	ldr	r1, [pc, #116]	; (60001cbc <configure_external_ram+0x264>)
			external_psram_size = 16;
60001c46:	ldr	r3, [pc, #120]	; (60001cc0 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001c48:	ldr	r2, [pc, #120]	; (60001cc4 <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001c4a:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c4c:	movs	r3, #0
			external_psram_size * 0x100000 -
60001c4e:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c50:	str	r3, [sp, #0]
60001c52:	movs	r3, #1
60001c54:	add.w	r2, r2, r0, lsl #20
60001c58:	ldr	r0, [pc, #108]	; (60001cc8 <configure_external_ram+0x270>)
60001c5a:	bl	60002438 <__sm_set_pool_veneer>
}
60001c5e:	add	sp, #8
60001c60:	pop	{r4, r5, r6, pc}
60001c62:	movs	r0, #8
60001c64:	b.n	60001c44 <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c66:	movs	r2, #16
60001c68:	ldr	r0, [pc, #92]	; (60001cc8 <configure_external_ram+0x270>)
}
60001c6a:	add	sp, #8
60001c6c:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c70:	b.w	60002448 <__memset_veneer>
60001c74:	.word	0x401f8000
60001c78:	.word	0x0001b0f9
60001c7c:	.word	0x000110f9
60001c80:	.word	0x7cf0ff00
60001c84:	.word	0x400fc000
60001c88:	.word	0x402a4000
60001c8c:	.word	0xffff0012
60001c90:	.word	0x402a8000
60001c94:	.word	0x80000040
60001c98:	.word	0x00020063
60001c9c:	.word	0x830f00ff
60001ca0:	.word	0x402a4300
60001ca4:	.word	0x5af05af0
60001ca8:	.word	0x402a4200
60001cac:	.word	0x3018049f
60001cb0:	.word	0x0a1806eb
60001cb4:	.word	0x26013206
60001cb8:	.word	0x0a180638
60001cbc:	.word	0x70240000
60001cc0:	.word	0x200155c1
60001cc4:	.word	0x70000000
60001cc8:	.word	0x20014ba8

60001ccc <usb_pll_start>:
{
60001ccc:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cce:	ldr	r3, [pc, #84]	; (60001d24 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cd0:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cd2:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001cd6:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cda:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cde:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ce2:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ce6:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001ce8:	tst.w	r2, #2
60001cec:	beq.n	60001cf6 <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cee:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cf0:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cf2:	str	r7, [r3, #24]
			continue;
60001cf4:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cf6:	tst.w	r2, #8192	; 0x2000
60001cfa:	bne.n	60001d00 <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cfc:	str	r5, [r3, #20]
			continue;
60001cfe:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001d00:	tst.w	r2, #4096	; 0x1000
60001d04:	bne.n	60001d0a <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d06:	str	r4, [r3, #20]
			continue;
60001d08:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001d0a:	cmp	r2, #0
60001d0c:	bge.n	60001ce6 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001d0e:	tst.w	r2, #65536	; 0x10000
60001d12:	beq.n	60001d18 <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d14:	str	r1, [r3, #24]
			continue;
60001d16:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001d18:	lsls	r2, r2, #25
60001d1a:	bmi.n	60001d20 <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d1c:	str	r0, [r3, #20]
			continue;
60001d1e:	b.n	60001ce6 <usb_pll_start+0x1a>
}
60001d20:	pop	{r4, r5, r6, r7, pc}
60001d22:	nop
60001d24:	.word	0x400d8000

60001d28 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d28:	ldr	r2, [pc, #248]	; (60001e24 <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d2a:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d2e:	ldr	r0, [pc, #248]	; (60001e28 <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d30:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	vldr	s10, [pc, #244]	; 60001e2c <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d38:	bic.w	r3, r3, #1
{
60001d3c:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d3e:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d42:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d44:	ldr	r4, [pc, #232]	; (60001e30 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d46:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d4a:	ldr	r3, [pc, #232]	; (60001e34 <tempmon_init+0x10c>)
60001d4c:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d50:	uxtb	r1, r3
60001d52:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d54:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d58:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d5c:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d5e:	vcvt.f32.s32	s14, s15
60001d62:	ldr	r1, [pc, #212]	; (60001e38 <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d64:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d68:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d6a:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d6e:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d76:	ldr	r3, [pc, #196]	; (60001e3c <tempmon_init+0x114>)
60001d78:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d7c:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d80:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d84:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d8c:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d90:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d94:	vdiv.f32	s11, s10, s12
60001d98:	vadd.f32	s11, s11, s13
60001d9c:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001da0:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da4:	vldr	s11, [pc, #152]	; 60001e40 <tempmon_init+0x118>
60001da8:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001dac:	orr.w	r3, r3, r1, lsl #20
60001db0:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db4:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db8:	ldr	r3, [pc, #136]	; (60001e44 <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dba:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dbe:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dc2:	vdiv.f32	s11, s14, s12
60001dc6:	vadd.f32	s14, s11, s13
60001dca:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dce:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dd2:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dd6:	and.w	r3, r3, r0, lsl #16
60001dda:	orrs	r3, r1
60001ddc:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001de0:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001de4:	vadd.f32	s15, s14, s13
60001de8:	vcvt.u32.f32	s15, s15
60001dec:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001df0:	ubfx	r3, r3, #0, #12
60001df4:	orrs	r3, r1
60001df6:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dfa:	ldr.w	r3, [r2, #128]	; 0x80
60001dfe:	orr.w	r3, r3, #2
60001e02:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e06:	movs	r2, #0
60001e08:	ldr	r3, [pc, #60]	; (60001e48 <tempmon_init+0x120>)
60001e0a:	strb.w	r2, [r3, #64]	; 0x40
60001e0e:	ldr	r3, [pc, #60]	; (60001e4c <tempmon_init+0x124>)
60001e10:	ldr	r2, [pc, #60]	; (60001e50 <tempmon_init+0x128>)
60001e12:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e16:	mov.w	r3, #3758153728	; 0xe000e000
60001e1a:	movs	r2, #1
60001e1c:	str.w	r2, [r3, #264]	; 0x108
}
60001e20:	pop	{r4, pc}
60001e22:	nop
60001e24:	.word	0x400d8100
60001e28:	.word	0x20014cd4
60001e2c:	.word	0x42aa0000
60001e30:	.word	0x20014cd0
60001e34:	.word	0x401f4400
60001e38:	.word	0x20014cd8
60001e3c:	.word	0x20014cdc
60001e40:	.word	0x42b40000
60001e44:	.word	0x0fff0000
60001e48:	.word	0xe000e400
60001e4c:	.word	0x20002400
60001e50:	.word	0x0000bc35

60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001e54:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e56:	ldr	r4, [pc, #64]	; (60001e98 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001e58:	ldr.w	r3, [r4, #128]	; 0x80
60001e5c:	cmp	r3, #11
60001e5e:	bne.n	60001e92 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001e60:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001e64:	ldr	r2, [pc, #52]	; (60001e9c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e66:	ldr	r6, [pc, #56]	; (60001ea0 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001e68:	ldr	r5, [pc, #56]	; (60001ea4 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001e6a:	ldr	r1, [r2, #0]
60001e6c:	adds	r2, #4
60001e6e:	eors	r3, r1
60001e70:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e72:	and.w	r0, r3, #1
60001e76:	subs	r1, #1
60001e78:	mul.w	r0, r6, r0
60001e7c:	eor.w	r3, r0, r3, lsr #1
60001e80:	bne.n	60001e72 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001e82:	cmp	r2, r5
60001e84:	bne.n	60001e6a <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001e86:	ldr.w	r0, [r4, #168]	; 0xa8
60001e8a:	subs	r3, r0, r3
60001e8c:	negs	r0, r3
60001e8e:	adcs	r0, r3
	return 1;
}
60001e90:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001e92:	movs	r0, #0
60001e94:	b.n	60001e90 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001e96:	nop
60001e98:	.word	0x2027ff00
60001e9c:	.word	0x2027ff80
60001ea0:	.word	0xedb88320
60001ea4:	.word	0x2027ffa8

60001ea8 <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001ea8:	ldr	r2, [pc, #96]	; (60001f0c <CrashReportClass::clear()+0x64>)
60001eaa:	movs	r3, #0
{
60001eac:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001eae:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001eb2:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001eb6:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001eba:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001ebe:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001ec2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001ec6:	mov.w	r4, #3758153728	; 0xe000e000
60001eca:	adds	r2, #128	; 0x80
60001ecc:	str.w	r2, [r4, #3952]	; 0xf70
60001ed0:	adds	r2, #32
60001ed2:	str.w	r2, [r4, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001ed6:	dsb	sy
	asm("isb");
60001eda:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ede:	ldr	r2, [pc, #48]	; (60001f10 <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ee0:	ldr	r6, [pc, #48]	; (60001f14 <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee2:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee4:	ldr	r5, [pc, #48]	; (60001f18 <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee6:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee8:	movs	r1, #28
	SRC_GPR5 = 0;
60001eea:	str	r3, [r2, #48]	; 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001eec:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001eee:	str.w	r3, [r6, #4032]	; 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ef2:	bl	60002460 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001ef6:	str.w	r0, [r6, #4060]	; 0xfdc
	asm("dsb");
60001efa:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001efe:	str.w	r5, [r4, #3944]	; 0xf68
	asm("dsb");
60001f02:	dsb	sy
	asm("isb");
60001f06:	isb	sy
}
60001f0a:	pop	{r4, r5, r6, pc}
60001f0c:	.word	0x2027ff00
60001f10:	.word	0x400f8000
60001f14:	.word	0x2027f000
60001f18:	.word	0x2027ffc0

60001f1c <CrashReportClass::printTo(Print&) const>:
{
60001f1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001f20:	mov	r4, r1
  if (isvalid(info)) {
60001f22:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001f26:	cmp	r0, #0
60001f28:	beq.w	600022cc <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001f2c:	ldr	r6, [pc, #692]	; (600021e4 <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001f2e:	mov	r0, r4
60001f30:	ldr	r1, [pc, #692]	; (600021e8 <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001f32:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001f36:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f3a:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f3e:	ldr	r1, [pc, #684]	; (600021ec <CrashReportClass::printTo(Print&) const+0x2d0>)
60001f40:	mov	r0, r4
    info->time /= 60;
60001f42:	udiv	r9, r7, r8
    info->time /= 60;
60001f46:	udiv	r5, r9, r8
60001f4a:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f4e:	bl	60002498 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001f52:	movs	r3, #24
    p.print(hh);
60001f54:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001f56:	udiv	r1, r5, r3
60001f5a:	mls	r1, r3, r1, r5
    p.print(hh);
60001f5e:	uxtb	r1, r1
60001f60:	bl	600024b0 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f64:	ldr	r1, [pc, #648]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f66:	mov	r0, r4
60001f68:	bl	60002498 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001f6c:	mls	r1, r8, r5, r9
    p.print(mm);
60001f70:	mov	r0, r4
60001f72:	uxtb	r1, r1
60001f74:	bl	600024b0 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f78:	ldr	r1, [pc, #628]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f7a:	mov	r0, r4
60001f7c:	bl	60002498 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f80:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001f84:	mov	r0, r4
60001f86:	uxtb	r1, r1
60001f88:	bl	600024b0 <___ZN5Print5printEh_veneer>
60001f8c:	mov	r0, r4
60001f8e:	bl	60002430 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001f92:	ldr	r1, [pc, #608]	; (600021f4 <CrashReportClass::printTo(Print&) const+0x2d8>)
60001f94:	mov	r0, r4
60001f96:	bl	60002498 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001f9a:	movs	r2, #16
60001f9c:	ldr.w	r1, [r6, #152]	; 0x98
60001fa0:	mov	r0, r4
60001fa2:	bl	60002488 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
60001fa6:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
60001faa:	cmp	r5, #0
60001fac:	beq.n	6000205c <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60001fae:	ldr	r1, [pc, #584]	; (600021f8 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001fb0:	mov	r0, r4
60001fb2:	bl	60002498 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
60001fb6:	movs	r2, #16
60001fb8:	ldr.w	r1, [r6, #136]	; 0x88
60001fbc:	mov	r0, r4
60001fbe:	bl	60002488 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60001fc2:	lsls	r2, r5, #31
60001fc4:	bpl.w	6000216c <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001fc8:	ldr	r1, [pc, #560]	; (600021fc <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001fca:	mov	r0, r4
60001fcc:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001fd0:	lsls	r2, r5, #24
60001fd2:	bpl.n	60002028 <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001fd4:	ldr	r1, [pc, #552]	; (60002200 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001fd6:	mov	r0, r4
60001fd8:	bl	60002498 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60001fdc:	movs	r2, #16
60001fde:	ldr.w	r1, [r6, #144]	; 0x90
60001fe2:	mov	r0, r4
60001fe4:	bl	60002458 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
60001fe8:	ldr.w	r2, [r6, #144]	; 0x90
60001fec:	cmp	r2, #31
60001fee:	bhi.w	6000218e <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001ff2:	ldr	r1, [pc, #528]	; (60002204 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001ff4:	mov	r0, r4
60001ff6:	bl	60002498 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001ffa:	movs	r2, #16
60001ffc:	ldr.w	r1, [r6, #152]	; 0x98
60002000:	mov	r0, r4
60002002:	bl	60002458 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60002006:	ldr	r1, [pc, #512]	; (60002208 <CrashReportClass::printTo(Print&) const+0x2ec>)
60002008:	mov	r0, r4
6000200a:	bl	60002498 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
6000200e:	ldr.w	r1, [r6, #152]	; 0x98
60002012:	movs	r2, #16
60002014:	mov	r0, r4
60002016:	bl	60002458 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
6000201a:	ldr	r1, [pc, #496]	; (6000220c <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000201c:	mov	r0, r4
6000201e:	bl	60002498 <___ZN5Print5printEPKc_veneer>
        p.println();
60002022:	mov	r0, r4
60002024:	bl	60002430 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60002028:	lsls	r3, r5, #23
6000202a:	bpl.w	600021a2 <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
6000202e:	ldr	r1, [pc, #480]	; (60002210 <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60002030:	mov	r0, r4
60002032:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002036:	lsls	r7, r5, #16
60002038:	bpl.n	6000204e <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
6000203a:	ldr	r1, [pc, #472]	; (60002214 <CrashReportClass::printTo(Print&) const+0x2f8>)
6000203c:	mov	r0, r4
6000203e:	bl	60002498 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
60002042:	movs	r2, #16
60002044:	ldr.w	r1, [r6, #148]	; 0x94
60002048:	mov	r0, r4
6000204a:	bl	60002488 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
6000204e:	lsls	r0, r5, #15
60002050:	bpl.w	600021cc <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60002054:	ldr	r1, [pc, #448]	; (60002218 <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
60002056:	mov	r0, r4
60002058:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
6000205c:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60002060:	cbz	r5, 60002084 <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
60002062:	ldr	r1, [pc, #440]	; (6000221c <CrashReportClass::printTo(Print&) const+0x300>)
60002064:	mov	r0, r4
60002066:	bl	60002498 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
6000206a:	movs	r2, #16
6000206c:	ldr.w	r1, [r6, #140]	; 0x8c
60002070:	mov	r0, r4
60002072:	bl	60002488 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60002076:	lsls	r0, r5, #30
60002078:	bpl.w	600022c2 <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
6000207c:	ldr	r1, [pc, #416]	; (60002220 <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
6000207e:	mov	r0, r4
60002080:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
60002084:	ldr	r1, [pc, #412]	; (60002224 <CrashReportClass::printTo(Print&) const+0x308>)
60002086:	mov	r0, r4
60002088:	bl	60002498 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
6000208c:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60002090:	movs	r1, #2
60002092:	mov	r0, r4
60002094:	vcvt.f64.f32	d0, s0
60002098:	bl	60002440 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
6000209c:	ldr	r1, [pc, #392]	; (60002228 <CrashReportClass::printTo(Print&) const+0x30c>)
6000209e:	mov	r0, r4
600020a0:	bl	60002498 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
600020a4:	ldr	r1, [pc, #388]	; (6000222c <CrashReportClass::printTo(Print&) const+0x310>)
600020a6:	mov	r0, r4
600020a8:	bl	60002498 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
600020ac:	ldr	r3, [pc, #384]	; (60002230 <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600020ae:	ldr	r1, [pc, #388]	; (60002234 <CrashReportClass::printTo(Print&) const+0x318>)
600020b0:	movs	r2, #10
600020b2:	ldr	r0, [r3, #0]
600020b4:	movs	r3, #0
600020b6:	udiv	r1, r0, r1
600020ba:	mov	r0, r4
600020bc:	bl	60002428 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
600020c0:	ldr	r1, [pc, #372]	; (60002238 <CrashReportClass::printTo(Print&) const+0x31c>)
600020c2:	mov	r0, r4
600020c4:	bl	60002498 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
600020c8:	ldr	r3, [pc, #368]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
600020ca:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600020cc:	lsls	r2, r5, #30
600020ce:	bpl.n	600020e2 <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
600020d0:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020d2:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
600020d4:	ldr	r3, [pc, #360]	; (60002240 <CrashReportClass::printTo(Print&) const+0x324>)
600020d6:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
600020d8:	ite	eq
600020da:	ldreq	r1, [pc, #360]	; (60002244 <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020dc:	ldrne	r1, [pc, #360]	; (60002248 <CrashReportClass::printTo(Print&) const+0x32c>)
600020de:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600020e2:	lsls	r7, r5, #29
600020e4:	bpl.n	600020ee <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
600020e6:	ldr	r1, [pc, #356]	; (6000224c <CrashReportClass::printTo(Print&) const+0x330>)
600020e8:	mov	r0, r4
600020ea:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600020ee:	lsls	r6, r5, #28
600020f0:	bpl.n	600020fa <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
600020f2:	ldr	r1, [pc, #348]	; (60002250 <CrashReportClass::printTo(Print&) const+0x334>)
600020f4:	mov	r0, r4
600020f6:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
600020fa:	lsls	r0, r5, #27
600020fc:	bpl.n	60002106 <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
600020fe:	ldr	r1, [pc, #340]	; (60002254 <CrashReportClass::printTo(Print&) const+0x338>)
60002100:	mov	r0, r4
60002102:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60002106:	lsls	r1, r5, #26
60002108:	bpl.n	60002112 <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
6000210a:	ldr	r1, [pc, #332]	; (60002258 <CrashReportClass::printTo(Print&) const+0x33c>)
6000210c:	mov	r0, r4
6000210e:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60002112:	lsls	r2, r5, #25
60002114:	bpl.n	6000211e <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
60002116:	ldr	r1, [pc, #324]	; (6000225c <CrashReportClass::printTo(Print&) const+0x340>)
60002118:	mov	r0, r4
6000211a:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000211e:	lsls	r3, r5, #24
60002120:	bpl.n	6000212a <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
60002122:	ldr	r1, [pc, #316]	; (60002260 <CrashReportClass::printTo(Print&) const+0x344>)
60002124:	mov	r0, r4
60002126:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000212a:	ands.w	r5, r5, #256	; 0x100
6000212e:	beq.w	600022fe <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
60002132:	ldr	r1, [pc, #304]	; (60002264 <CrashReportClass::printTo(Print&) const+0x348>)
60002134:	mov	r0, r4
60002136:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
6000213a:	ldr	r2, [pc, #256]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
6000213c:	ldr	r1, [pc, #296]	; (60002268 <CrashReportClass::printTo(Print&) const+0x34c>)
6000213e:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002140:	ldr	r3, [r2, #8]
60002142:	bic.w	r3, r3, #256	; 0x100
60002146:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60002148:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
6000214c:	ldr	r1, [pc, #284]	; (6000226c <CrashReportClass::printTo(Print&) const+0x350>)
6000214e:	mov	r0, r4
60002150:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60002154:	ldr	r3, [pc, #280]	; (60002270 <CrashReportClass::printTo(Print&) const+0x354>)
60002156:	movs	r2, #7
60002158:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
6000215a:	ldr	r2, [pc, #280]	; (60002274 <CrashReportClass::printTo(Print&) const+0x358>)
6000215c:	ldr	r3, [r2, #56]	; 0x38
6000215e:	orr.w	r3, r3, #64	; 0x40
60002162:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60002164:	dsb	sy
	  while (1) asm ("wfi");
60002168:	wfi
6000216a:	b.n	60002168 <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
6000216c:	lsls	r3, r5, #30
6000216e:	bpl.n	60002174 <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
60002170:	ldr	r1, [pc, #260]	; (60002278 <CrashReportClass::printTo(Print&) const+0x35c>)
60002172:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002174:	lsls	r7, r5, #28
60002176:	bpl.n	6000217c <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60002178:	ldr	r1, [pc, #256]	; (6000227c <CrashReportClass::printTo(Print&) const+0x360>)
6000217a:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000217c:	lsls	r0, r5, #27
6000217e:	bpl.n	60002184 <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
60002180:	ldr	r1, [pc, #252]	; (60002280 <CrashReportClass::printTo(Print&) const+0x364>)
60002182:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002184:	lsls	r1, r5, #26
60002186:	bpl.w	60001fd0 <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
6000218a:	ldr	r1, [pc, #248]	; (60002284 <CrashReportClass::printTo(Print&) const+0x368>)
6000218c:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000218e:	ldr	r3, [pc, #248]	; (60002288 <CrashReportClass::printTo(Print&) const+0x36c>)
60002190:	cmp	r2, r3
60002192:	bcc.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
60002196:	adds	r3, #32
60002198:	cmp	r2, r3
6000219a:	bcs.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000219e:	ldr	r1, [pc, #236]	; (6000228c <CrashReportClass::printTo(Print&) const+0x370>)
600021a0:	b.n	6000201c <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
600021a2:	lsls	r7, r5, #22
600021a4:	bpl.n	600021aa <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
600021a6:	ldr	r1, [pc, #232]	; (60002290 <CrashReportClass::printTo(Print&) const+0x374>)
600021a8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
600021aa:	lsls	r0, r5, #21
600021ac:	bpl.n	600021b2 <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
600021ae:	ldr	r1, [pc, #228]	; (60002294 <CrashReportClass::printTo(Print&) const+0x378>)
600021b0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
600021b2:	lsls	r1, r5, #20
600021b4:	bpl.n	600021ba <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
600021b6:	ldr	r1, [pc, #224]	; (60002298 <CrashReportClass::printTo(Print&) const+0x37c>)
600021b8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
600021ba:	lsls	r2, r5, #19
600021bc:	bpl.n	600021c2 <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600021be:	ldr	r1, [pc, #220]	; (6000229c <CrashReportClass::printTo(Print&) const+0x380>)
600021c0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
600021c2:	lsls	r3, r5, #18
600021c4:	bpl.w	60002036 <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
600021c8:	ldr	r1, [pc, #212]	; (600022a0 <CrashReportClass::printTo(Print&) const+0x384>)
600021ca:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600021cc:	lsls	r1, r5, #14
600021ce:	bpl.n	600021d4 <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600021d0:	ldr	r1, [pc, #208]	; (600022a4 <CrashReportClass::printTo(Print&) const+0x388>)
600021d2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600021d4:	lsls	r2, r5, #13
600021d6:	bpl.n	600021dc <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600021d8:	ldr	r1, [pc, #204]	; (600022a8 <CrashReportClass::printTo(Print&) const+0x38c>)
600021da:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600021dc:	lsls	r3, r5, #12
600021de:	bpl.n	600022b0 <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
600021e0:	ldr	r1, [pc, #200]	; (600022ac <CrashReportClass::printTo(Print&) const+0x390>)
600021e2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
600021e4:	.word	0x2027ff00
600021e8:	.word	0x2000149a
600021ec:	.word	0x200014a7
600021f0:	.word	0x200019d0
600021f4:	.word	0x200014ce
600021f8:	.word	0x200014f3
600021fc:	.word	0x200014fc
60002200:	.word	0x200015c2
60002204:	.word	0x200015e4
60002208:	.word	0x20001603
6000220c:	.word	0x20001642
60002210:	.word	0x200016a2
60002214:	.word	0x200017db
60002218:	.word	0x200017fd
6000221c:	.word	0x200018d9
60002220:	.word	0x200018e2
60002224:	.word	0x20001925
60002228:	.word	0x20001948
6000222c:	.word	0x2000194e
60002230:	.word	0x20001cf0
60002234:	.word	0x000f4240
60002238:	.word	0x2000196c
6000223c:	.word	0x400f8000
60002240:	.word	0x0bad00f1
60002244:	.word	0x20001ac9
60002248:	.word	0x20001b12
6000224c:	.word	0x20001b53
60002250:	.word	0x20001b7b
60002254:	.word	0x20001ba6
60002258:	.word	0x20001bcd
6000225c:	.word	0x20001bf7
60002260:	.word	0x20001c19
60002264:	.word	0x20001c3b
60002268:	.word	0x20001c65
6000226c:	.word	0x20001c87
60002270:	.word	0x400ac000
60002274:	.word	0x400d4000
60002278:	.word	0x20001525
6000227c:	.word	0x20001547
60002280:	.word	0x20001571
60002284:	.word	0x20001597
60002288:	.word	0x20015620
6000228c:	.word	0x20001660
60002290:	.word	0x200016c3
60002294:	.word	0x200016f0
60002298:	.word	0x20001735
6000229c:	.word	0x20001775
600022a0:	.word	0x200017a9
600022a4:	.word	0x20001821
600022a8:	.word	0x20001854
600022ac:	.word	0x2000187d
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600022b0:	lsls	r7, r5, #7
600022b2:	bpl.n	600022b8 <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600022b4:	ldr	r1, [pc, #204]	; (60002384 <CrashReportClass::printTo(Print&) const+0x468>)
600022b6:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600022b8:	lsls	r5, r5, #6
600022ba:	bpl.w	6000205c <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
600022be:	ldr	r1, [pc, #200]	; (60002388 <CrashReportClass::printTo(Print&) const+0x46c>)
600022c0:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
600022c2:	lsls	r1, r5, #1
600022c4:	bpl.w	60002084 <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
600022c8:	ldr	r1, [pc, #192]	; (6000238c <CrashReportClass::printTo(Print&) const+0x470>)
600022ca:	b.n	6000207e <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
600022cc:	ldr	r1, [pc, #192]	; (60002390 <CrashReportClass::printTo(Print&) const+0x474>)
600022ce:	mov	r0, r4
600022d0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
600022d4:	ldr	r1, [pc, #188]	; (60002394 <CrashReportClass::printTo(Print&) const+0x478>)
600022d6:	mov	r0, r4
600022d8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
600022dc:	ldr	r1, [pc, #184]	; (60002398 <CrashReportClass::printTo(Print&) const+0x47c>)
600022de:	mov	r0, r4
600022e0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
600022e4:	ldr	r1, [pc, #180]	; (6000239c <CrashReportClass::printTo(Print&) const+0x480>)
600022e6:	mov	r0, r4
600022e8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
600022ec:	ldr	r1, [pc, #176]	; (600023a0 <CrashReportClass::printTo(Print&) const+0x484>)
600022ee:	mov	r0, r4
600022f0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
600022f4:	ldr	r1, [pc, #172]	; (600023a4 <CrashReportClass::printTo(Print&) const+0x488>)
600022f6:	mov	r0, r4
600022f8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
600022fc:	b.n	600020c8 <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
600022fe:	ldr	r7, [pc, #168]	; (600023a8 <CrashReportClass::printTo(Print&) const+0x48c>)
60002300:	ldr.w	r3, [r7, #192]	; 0xc0
60002304:	cbz	r3, 60002378 <CrashReportClass::printTo(Print&) const+0x45c>
60002306:	ldr.w	r6, [r7, #220]	; 0xdc
6000230a:	movs	r1, #28
6000230c:	ldr	r0, [pc, #156]	; (600023ac <CrashReportClass::printTo(Print&) const+0x490>)
6000230e:	bl	60002460 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60002312:	cmp	r6, r0
60002314:	bne.n	60002378 <CrashReportClass::printTo(Print&) const+0x45c>
        p.print("  Breadcrumb #");
60002316:	ldr.w	r8, [pc, #160]	; 600023b8 <CrashReportClass::printTo(Print&) const+0x49c>
        p.print(" was ");
6000231a:	ldr.w	r9, [pc, #160]	; 600023bc <CrashReportClass::printTo(Print&) const+0x4a0>
6000231e:	ldr.w	sl, [pc, #140]	; 600023ac <CrashReportClass::printTo(Print&) const+0x490>
      if (bc->bitmask & (1 << i)) {
60002322:	movs	r3, #1
60002324:	ldr.w	r2, [r7, #192]	; 0xc0
60002328:	mov	r6, r5
6000232a:	lsls	r3, r5
6000232c:	adds	r5, #1
6000232e:	tst	r3, r2
60002330:	beq.n	60002374 <CrashReportClass::printTo(Print&) const+0x458>
        p.print("  Breadcrumb #");
60002332:	mov	r1, r8
60002334:	mov	r0, r4
60002336:	bl	60002498 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
6000233a:	mov	r1, r5
6000233c:	add.w	r6, sl, r6, lsl #2
60002340:	mov	r0, r4
60002342:	bl	600024b8 <___ZN5Print5printEl_veneer>
        p.print(" was ");
60002346:	mov	r1, r9
60002348:	mov	r0, r4
6000234a:	bl	60002498 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000234e:	movs	r3, #0
60002350:	movs	r2, #10
60002352:	ldr	r1, [r6, #4]
60002354:	mov	r0, r4
60002356:	bl	60002428 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
6000235a:	ldr	r1, [pc, #84]	; (600023b0 <CrashReportClass::printTo(Print&) const+0x494>)
6000235c:	mov	r0, r4
6000235e:	bl	60002498 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
60002362:	ldr	r1, [r6, #4]
60002364:	movs	r2, #16
60002366:	mov	r0, r4
60002368:	bl	60002458 <___ZN5Print5printEmi_veneer>
        p.println(")");
6000236c:	ldr	r1, [pc, #68]	; (600023b4 <CrashReportClass::printTo(Print&) const+0x498>)
6000236e:	mov	r0, r4
60002370:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
60002374:	cmp	r5, #6
60002376:	bne.n	60002322 <CrashReportClass::printTo(Print&) const+0x406>
  clear();
60002378:	bl	60001ea8 <CrashReportClass::clear()>
}
6000237c:	movs	r0, #1
6000237e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60002382:	nop
60002384:	.word	0x20001894
60002388:	.word	0x200018bd
6000238c:	.word	0x20001909
60002390:	.word	0x20001971
60002394:	.word	0x20001989
60002398:	.word	0x200019d2
6000239c:	.word	0x20001a1c
600023a0:	.word	0x20001a41
600023a4:	.word	0x20001a89
600023a8:	.word	0x2027ff00
600023ac:	.word	0x2027ffc0
600023b0:	.word	0x20001cd9
600023b4:	.word	0x20001a87
600023b8:	.word	0x20001cca
600023bc:	.word	0x20001942

600023c0 <CrashReportClass::operator bool()>:
{
600023c0:	push	{r3, lr}
	if (isvalid(info)) return true;
600023c2:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
600023c6:	subs	r0, #0
600023c8:	it	ne
600023ca:	movne	r0, #1
600023cc:	pop	{r3, pc}
600023ce:	nop

600023d0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600023d0:	ldr	r3, [pc, #60]	; (60002410 <analog_init+0x40>)
600023d2:	ldr	r2, [r3, #108]	; 0x6c
600023d4:	orr.w	r2, r2, #196608	; 0x30000
600023d8:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600023da:	ldr	r2, [r3, #108]	; 0x6c
600023dc:	orr.w	r2, r2, #768	; 0x300
600023e0:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600023e2:	sub.w	r3, r3, #229376	; 0x38000
600023e6:	movw	r2, #1591	; 0x637
600023ea:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600023ec:	movs	r2, #160	; 0xa0
600023ee:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600023f0:	ldr	r2, [r3, #72]	; 0x48
600023f2:	lsls	r2, r2, #24
600023f4:	bmi.n	600023f0 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600023f6:	ldr	r2, [pc, #28]	; (60002414 <analog_init+0x44>)
600023f8:	movw	r3, #1591	; 0x637
600023fc:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600023fe:	movs	r3, #160	; 0xa0
60002400:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002402:	ldr	r3, [r2, #72]	; 0x48
60002404:	ands.w	r3, r3, #128	; 0x80
60002408:	bne.n	60002402 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000240a:	ldr	r2, [pc, #12]	; (60002418 <analog_init+0x48>)
6000240c:	strb	r3, [r2, #0]
}
6000240e:	bx	lr
60002410:	.word	0x400fc000
60002414:	.word	0x400c8000
60002418:	.word	0x200155b8

6000241c <_init>:
6000241c:	push	{r3, r4, r5, r6, r7, lr}
6000241e:	nop
60002420:	pop	{r3, r4, r5, r6, r7}
60002422:	pop	{r3}
60002424:	mov	lr, r3
60002426:	bx	lr

60002428 <___ZN5Print11printNumberEmhh_veneer>:
60002428:	ldr.w	pc, [pc]	; 6000242c <___ZN5Print11printNumberEmhh_veneer+0x4>
6000242c:	.word	0x0000c51f

60002430 <___ZN5Print7printlnEv_veneer>:
60002430:	ldr.w	pc, [pc]	; 60002434 <___ZN5Print7printlnEv_veneer+0x4>
60002434:	.word	0x0000c4cd

60002438 <__sm_set_pool_veneer>:
60002438:	ldr.w	pc, [pc]	; 6000243c <__sm_set_pool_veneer+0x4>
6000243c:	.word	0x0000bbcb

60002440 <___ZN5Print10printFloatEdh_veneer>:
60002440:	ldr.w	pc, [pc]	; 60002444 <___ZN5Print10printFloatEdh_veneer+0x4>
60002444:	.word	0x0000c5c9

60002448 <__memset_veneer>:
60002448:	ldr.w	pc, [pc]	; 6000244c <__memset_veneer+0x4>
6000244c:	.word	0x00009fbd

60002450 <____libc_init_array_veneer>:
60002450:	ldr.w	pc, [pc]	; 60002454 <____libc_init_array_veneer+0x4>
60002454:	.word	0x0000ea79

60002458 <___ZN5Print5printEmi_veneer>:
60002458:	ldr.w	pc, [pc]	; 6000245c <___ZN5Print5printEmi_veneer+0x4>
6000245c:	.word	0x0000c371

60002460 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
60002460:	ldr.w	pc, [pc]	; 60002464 <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
60002464:	.word	0x0000c38d

60002468 <__pwm_init_veneer>:
60002468:	ldr.w	pc, [pc]	; 6000246c <__pwm_init_veneer+0x4>
6000246c:	.word	0x0000bde5

60002470 <___ZN5Print7printlnEPKc_veneer>:
60002470:	ldr.w	pc, [pc]	; 60002474 <___ZN5Print7printlnEPKc_veneer+0x4>
60002474:	.word	0x00000d35

60002478 <__usb_init_serialnumber_veneer>:
60002478:	ldr.w	pc, [pc]	; 6000247c <__usb_init_serialnumber_veneer+0x4>
6000247c:	.word	0x0000c11d

60002480 <___ZN7TwoWire8setClockEm_veneer>:
60002480:	ldr.w	pc, [pc]	; 60002484 <___ZN7TwoWire8setClockEm_veneer+0x4>
60002484:	.word	0x0000526d

60002488 <___ZN5Print7printlnEmi_veneer>:
60002488:	ldr.w	pc, [pc]	; 6000248c <___ZN5Print7printlnEmi_veneer+0x4>
6000248c:	.word	0x0000c379

60002490 <__main_veneer>:
60002490:	ldr.w	pc, [pc]	; 60002494 <__main_veneer+0x4>
60002494:	.word	0x0000c3d7

60002498 <___ZN5Print5printEPKc_veneer>:
60002498:	ldr.w	pc, [pc]	; 6000249c <___ZN5Print5printEPKc_veneer+0x4>
6000249c:	.word	0x0000c361

600024a0 <__set_arm_clock_veneer>:
600024a0:	ldr.w	pc, [pc]	; 600024a4 <__set_arm_clock_veneer+0x4>
600024a4:	.word	0x0000a801

600024a8 <__delay_veneer>:
600024a8:	ldr.w	pc, [pc]	; 600024ac <__delay_veneer+0x4>
600024ac:	.word	0x0000b549

600024b0 <___ZN5Print5printEh_veneer>:
600024b0:	ldr.w	pc, [pc]	; 600024b4 <___ZN5Print5printEh_veneer+0x4>
600024b4:	.word	0x0000c369

600024b8 <___ZN5Print5printEl_veneer>:
600024b8:	ldr.w	pc, [pc]	; 600024bc <___ZN5Print5printEl_veneer+0x4>
600024bc:	.word	0x0000c4bb

600024c0 <__frame_dummy_init_array_entry>:
600024c0:	E.......I...-1..

Disassembly of section .text.progmem:

600024d0 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024d0:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024d4:	ldr	r3, [pc, #60]	; (60002514 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024d6:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024da:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024de:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024e2:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024e4:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024e8:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600024ec:	ldr	r2, [r3, #112]	; 0x70
600024ee:	bic.w	r2, r2, #4096	; 0x1000
600024f2:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600024f4:	ldr	r2, [r3, #112]	; 0x70
600024f6:	cmp	r2, #0
600024f8:	bge.n	600024f4 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600024fa:	ldr.w	r2, [r3, #368]	; 0x170
600024fe:	bic.w	r2, r2, #8388608	; 0x800000
60002502:	bic.w	r2, r2, #32768	; 0x8000
60002506:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
6000250a:	ldr	r2, [r3, #112]	; 0x70
6000250c:	bic.w	r2, r2, #65536	; 0x10000
60002510:	str	r2, [r3, #112]	; 0x70
  }
60002512:	bx	lr
60002514:	.word	0x400d8000

60002518 <TwoWire::i2c4_hardware>:
60002518:	...@............
60002528:	...@............
	...
60002540:	...........@....
60002550:	................
60002560:	....aR..

60002568 <TwoWire::i2c3_hardware>:
60002568:	p..@............
60002578:	...@....,.......
60002588:	...@............
60002598:	...@....-.......
600025a8:	...@........UR..

600025b8 <TwoWire::i2c1_hardware>:
600025b8:	p..@............
600025c8:	...@............
	...
600025e0:	...........@....
600025f0:	................
60002600:	....IR..

60002608 <usb_string_mtp>:
60002608:	..M.T.P.

60002610 <usb_string_product_name_default>:
60002610:	 .T.e.e.n.s.y. .
60002620:	M.T.P. .D.i.s.k.

60002630 <usb_string_manufacturer_name_default>:
60002630:	..T.e.e.n.s.y.d.
60002640:	u.i.n.o.

60002648 <string0>:
60002648:	....

6000264c <usb_config_descriptor_12>:
6000264c:	..i.....2.......
6000265c:	...........$....
6000266c:	$....$...$......
6000267c:	................
6000268c:	.@......@.......
6000269c:	........@......@
600026ac:	...... ..

600026b5 <usb_config_descriptor_480>:
600026b5:	..i.....2.......
600026c5:	...........$....
600026d5:	$....$...$......
600026e5:	................
600026f5:	................
60002705:	................
60002715:	...... ..

6000271e <qualifier_descriptor>:
6000271e:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}

uint16_t checkDiskSpace(void)
{   if((diskSize>0) && ((diskSpace=sd->freeClusterCount()) > MIN_SPACE)) return 1;
    return 0;
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	bx	lr
      38:	.word	0x200026c0
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      3c:	.word	0x200026c0
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
		buf[j] = buf[i];
      56:	b.w	20 <register_tm_clones>
		buf[i] = t;
      5a:	nop
      5c:	.word	0x00000000
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      60:	.word	0x20014c38
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
      64:	.word	0x60017c00

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
      6e:	ldr	r3, [r0, #72]	; 0x48
      70:	cbz	r3, 78 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      72:	mov	r0, r3
      74:	b.w	729c <FatFile::sync()>
      78:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      7a:	cbz	r0, 80 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      7c:	b.w	65fc <ExFatFile::sync()>
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    BaseFile::sync();
  }
      80:	bx	lr

00000082 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      82:	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      84:	push	{r0, r1, r2, lr}
      86:	cbz	r3, 9e <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      88:	movs	r2, #1
      8a:	add.w	r1, sp, #7
      8e:	mov	r0, r3
      90:	bl	6e68 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      94:	cmp	r0, #1
      96:	bne.n	a2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      98:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      9c:	b.n	a6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      9e:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      a0:	cbnz	r0, ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      a2:	mov.w	r0, #4294967295
  }
      a6:	add	sp, #12
      a8:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      ac:	movs	r2, #1
      ae:	add.w	r1, sp, #7
      b2:	bl	5818 <ExFatFile::read(void*, unsigned int)>
      b6:	b.n	94 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000b8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
      b8:	ldr	r3, [r0, #72]	; 0x48
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      bc:	mov	r0, r3
      be:	b.w	6fee <FatFile::peek()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      c6:	b.w	599e <ExFatFile::peek()>
  }
      ca:	mov.w	r0, #4294967295
      ce:	bx	lr

000000d0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      d0:	ldr	r3, [r0, #72]	; 0x48
  int available() {
      d2:	push	{r4, lr}
      d4:	cbz	r3, ee <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      d6:	ldrb	r0, [r3, #0]
      d8:	ands.w	r0, r0, #8
      dc:	ittt	ne
      de:	ldrne	r0, [r3, #28]
      e0:	ldrne	r3, [r3, #20]
      e2:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
      e4:	cmp	r0, #0
      e6:	it	lt
      e8:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
      ec:	pop	{r4, pc}
      ee:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
      f0:	cmp	r0, #0
      f2:	beq.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      f4:	ldrb.w	r3, [r0, #49]	; 0x31
      f8:	ands.w	r3, r3, #8
      fc:	beq.n	11c <StreamFile<FsBaseFile, unsigned long long>::available()+0x4c>
      fe:	ldrd	r1, r3, [r0, #16]
     102:	ldrd	r2, r4, [r0]
     106:	subs	r0, r1, r2
     108:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     10c:	cmp.w	r0, #2147483648	; 0x80000000
     110:	sbcs.w	r3, r3, #0
     114:	it	cs
     116:	mvncs.w	r0, #2147483648	; 0x80000000
     11a:	b.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     11c:	mov	r0, r3
     11e:	b.n	10c <StreamFile<FsBaseFile, unsigned long long>::available()+0x3c>

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	c1c4 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	; (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	; 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	; (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	; (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	; (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x200155e3
     154:	.word	0x200155e2
     158:	.word	0x20015374
     15c:	.word	0x20015394

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	c51e <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r0, r1, r4, lr}
     16a:	mov	r4, r0
     16c:	cbz	r1, 188 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     16e:	mov	r0, r1
     170:	str	r1, [sp, #4]
     172:	bl	eb80 <strlen>
     176:	ldr	r3, [r4, #0]
     178:	mov	r2, r0
     17a:	ldr	r1, [sp, #4]
     17c:	ldr	r3, [r3, #4]
     17e:	mov	r0, r4
     180:	add	sp, #8
     182:	ldmia.w	sp!, {r4, lr}
     186:	bx	r3
     188:	add	sp, #8
     18a:	pop	{r4, pc}

0000018c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     18c:	b.w	168 <Print::write(char const*) [clone .isra.0]>

00000190 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     190:	push	{r4, lr}
     192:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     194:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r4, lr}
     19e:	b.w	c4cc <Print::println()>
	...

000001a4 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     1a4:	push	{r3, r4, r5, lr}
     1a6:	ldr	r3, [pc, #48]	; (1d8 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
     1a8:	mov	r4, r0
class StreamFile : public stream_t, public BaseFile {
     1aa:	ldr	r5, [pc, #48]	; (1dc <MTPStorage_SD::~MTPStorage_SD()+0x38>)
     1ac:	str	r3, [r0, #0]
  ~FsBaseFile() {close();}
     1ae:	add.w	r0, r0, #344	; 0x158
     1b2:	str.w	r5, [r0, #-16]
     1b6:	bl	84fc <FsBaseFile::close()>
     1ba:	add.w	r0, r4, #264	; 0x108
     1be:	str.w	r5, [r4, #248]	; 0xf8
     1c2:	bl	84fc <FsBaseFile::close()>
     1c6:	add.w	r0, r4, #184	; 0xb8
     1ca:	str.w	r5, [r4, #168]	; 0xa8
     1ce:	bl	84fc <FsBaseFile::close()>
     1d2:	mov	r0, r4
     1d4:	pop	{r3, r4, r5, pc}
     1d6:	nop
     1d8:	.word	0x20000450
     1dc:	.word	0x2000042c

000001e0 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     1e0:	ldr	r3, [r0, #56]	; 0x38
     1e2:	cbz	r3, 1ea <FsBaseFile::write(void const*, unsigned int)+0xa>
     1e4:	mov	r0, r3
     1e6:	b.w	777c <FatFile::write(void const*, unsigned int)>
     1ea:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1ec:	cbz	r0, 1f2 <FsBaseFile::write(void const*, unsigned int)+0x12>
     1ee:	b.w	6954 <ExFatFile::write(void const*, unsigned int)>
  }
     1f2:	bx	lr

000001f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1f4:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1f6:	adds	r0, #16
     1f8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     1fc:	pop	{r3, pc}

000001fe <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1fe:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     200:	movs	r2, #1
     202:	strb.w	r1, [sp, #7]
     206:	add.w	r1, sp, #7
     20a:	adds	r0, #16
     20c:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     210:	add	sp, #12
     212:	ldr.w	pc, [sp], #4
	...

00000218 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     218:	ldr	r3, [pc, #36]	; (240 <resetUSB()+0x28>)
     21a:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     21c:	movs	r0, #100	; 0x64
  {
     21e:	push	{r4, lr}
    while(!Serial) mtpd.loop();
     220:	ldr	r4, [pc, #32]	; (244 <resetUSB()+0x2c>)
    USB1_USBCMD = 0;  // disconnect USB
     222:	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     226:	bl	b548 <delay>
    usb_init();
     22a:	bl	11e78 <__usb_init_veneer>
    while(!Serial) mtpd.loop();
     22e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     232:	cbz	r0, 236 <resetUSB()+0x1e>
  }
     234:	pop	{r4, pc}
    while(!Serial) mtpd.loop();
     236:	mov	r0, r4
     238:	bl	4744 <MTPD::loop()>
     23c:	b.n	22e <resetUSB()+0x16>
     23e:	nop
     240:	.word	0x402e0000
     244:	.word	0x20002700

00000248 <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     248:	mov.w	r3, #3758153728	; 0xe000e000
     24c:	ldr	r2, [pc, #4]	; (254 <reboot()+0xc>)
     24e:	str.w	r2, [r3, #3340]	; 0xd0c
     252:	bx	lr
     254:	.word	0x05fa0004

00000258 <lowPowerInit()>:
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     258:	ldr	r3, [pc, #28]	; (278 <lowPowerInit()+0x20>)
     25a:	ldr	r2, [r3, #100]	; 0x64
     25c:	orr.w	r2, r2, #131072	; 0x20000
     260:	str	r2, [r3, #100]	; 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     262:	ldr	r2, [r3, #84]	; 0x54
     264:	bic.w	r2, r2, #35	; 0x23
     268:	str	r2, [r3, #84]	; 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     26a:	ldr	r2, [r3, #84]	; 0x54
     26c:	orr.w	r2, r2, #1
     270:	str	r2, [r3, #84]	; 0x54
    asm volatile("dsb");    
     272:	dsb	sy
  }
     276:	bx	lr
     278:	.word	0x400fc000

0000027c <loop>:
{
     27c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     280:	ldr	r6, [pc, #432]	; (434 <loop+0x1b8>)
{
     282:	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     284:	ldr	r5, [pc, #432]	; (438 <loop+0x1bc>)
  loopCount++;
     286:	ldr	r3, [r6, #0]
     288:	ldr	r4, [pc, #432]	; (43c <loop+0x1c0>)
     28a:	adds	r3, #1
     28c:	str	r3, [r6, #0]
  nb = getDataCount();
     28e:	bl	2710 <getDataCount()>
  if(nb>mxb) mxb=nb;
     292:	ldrh	r3, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     294:	ldr	r2, [pc, #424]	; (440 <loop+0x1c4>)
  if(nb>mxb) mxb=nb;
     296:	cmp	r3, r0
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     298:	ldr	r3, [r2, #0]
  if(nb>mxb) mxb=nb;
     29a:	it	cc
     29c:	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     29e:	tst.w	r3, #1
     2a2:	bne.n	2b8 <loop+0x3c>
     2a4:	ldr	r3, [pc, #412]	; (444 <loop+0x1c8>)
     2a6:	ldr	r3, [r3, #0]
     2a8:	cmp	r3, #1
     2aa:	mov.w	r3, #4294967295
     2ae:	it	ne
     2b0:	movne	r3, #0
     2b2:	strh	r3, [r4, #0]
     2b4:	movs	r3, #1
     2b6:	str	r3, [r2, #0]
  status=menu(status);
     2b8:	ldrh	r0, [r4, #0]
     2ba:	sxth	r0, r0
     2bc:	bl	2624 <menu(short)>
     2c0:	strh	r0, [r4, #0]
    if(status<0)
     2c2:	ldrh	r3, [r4, #0]
     2c4:	lsls	r3, r3, #16
     2c6:	bpl.n	2ce <loop+0x52>
    { mtpd.loop();
     2c8:	ldr	r0, [pc, #380]	; (448 <loop+0x1cc>)
     2ca:	bl	4744 <MTPD::loop()>
      if(status>0) digitalWriteFast(13,HIGH);    
     2ce:	ldrh	r3, [r4, #0]
     2d0:	sxth	r3, r3
     2d2:	cmp	r3, #0
     2d4:	ble.n	2de <loop+0x62>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     2d6:	ldr	r3, [pc, #372]	; (44c <loop+0x1d0>)
     2d8:	movs	r2, #8
     2da:	str.w	r2, [r3, #132]	; 0x84
      status=saveData(status);  
     2de:	ldrh	r0, [r4, #0]
     2e0:	sxth	r0, r0
     2e2:	bl	304c <saveData(short)>
     2e6:	strh	r0, [r4, #0]
      if(status>0) digitalWriteFast(13,LOW);
     2e8:	ldrh	r3, [r4, #0]
     2ea:	sxth	r3, r3
     2ec:	cmp	r3, #0
     2ee:	ble.n	2f8 <loop+0x7c>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     2f0:	ldr	r3, [pc, #344]	; (44c <loop+0x1d0>)
     2f2:	movs	r2, #8
     2f4:	str.w	r2, [r3, #136]	; 0x88
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     2f8:	ldr	r3, [pc, #340]	; (450 <loop+0x1d4>)
  if((t1=millis())>(t0+1000))
     2fa:	ldr	r7, [pc, #344]	; (454 <loop+0x1d8>)
     2fc:	ldr	r3, [r3, #0]
     2fe:	str	r3, [sp, #28]
     300:	ldr	r3, [r7, #0]
     302:	ldr	r2, [sp, #28]
     304:	add.w	r3, r3, #1000	; 0x3e8
     308:	cmp	r3, r2
     30a:	bcs.n	3f0 <loop+0x174>
    if(monitor)
     30c:	ldr	r3, [pc, #328]	; (458 <loop+0x1dc>)
     30e:	ldr.w	sl, [pc, #388]	; 494 <loop+0x218>
     312:	ldrsh.w	r3, [r3]
     316:	ldr.w	r9, [pc, #384]	; 498 <loop+0x21c>
     31a:	ldr.w	r8, [pc, #384]	; 49c <loop+0x220>
     31e:	cmp	r3, #0
     320:	beq.n	3da <loop+0x15e>
      rtc_get_datetime(&t);
     322:	add	r0, sp, #32
     324:	bl	3a12 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     328:	ldrsb.w	r3, [sp, #36]	; 0x24
     32c:	ldrsh.w	r2, [sp, #32]
     330:	str	r3, [sp, #16]
     332:	ldrsb.w	r3, [sp, #39]	; 0x27
     336:	ldr	r1, [pc, #292]	; (45c <loop+0x1e0>)
     338:	str	r3, [sp, #12]
     33a:	ldrsb.w	r3, [sp, #38]	; 0x26
     33e:	ldr	r0, [pc, #288]	; (460 <loop+0x1e4>)
     340:	str	r3, [sp, #8]
     342:	ldrsb.w	r3, [sp, #37]	; 0x25
     346:	str	r3, [sp, #4]
     348:	ldrsb.w	r3, [sp, #35]	; 0x23
     34c:	str	r3, [sp, #0]
     34e:	ldrsb.w	r3, [sp, #34]	; 0x22
     352:	bl	c504 <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     356:	ldr	r1, [pc, #268]	; (464 <loop+0x1e8>)
     358:	ldr	r0, [pc, #260]	; (460 <loop+0x1e4>)
     35a:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     35e:	ldr	r1, [r6, #0]
     360:	ldr	r0, [pc, #252]	; (460 <loop+0x1e4>)
     362:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     366:	ldr	r1, [pc, #256]	; (468 <loop+0x1ec>)
     368:	ldr	r0, [pc, #244]	; (460 <loop+0x1e4>)
     36a:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     36e:	ldr.w	r1, [sl]
     372:	ldr	r0, [pc, #236]	; (460 <loop+0x1e4>)
     374:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     378:	ldr	r1, [pc, #236]	; (468 <loop+0x1ec>)
     37a:	ldr	r0, [pc, #228]	; (460 <loop+0x1e4>)
     37c:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     380:	ldr.w	r1, [r9]
     384:	ldr	r0, [pc, #216]	; (460 <loop+0x1e4>)
     386:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     38a:	ldr	r1, [pc, #220]	; (468 <loop+0x1ec>)
     38c:	ldr	r0, [pc, #208]	; (460 <loop+0x1e4>)
     38e:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     392:	ldrh	r2, [r5, #0]
     394:	ldr	r1, [pc, #212]	; (46c <loop+0x1f0>)
     396:	ldr	r0, [pc, #200]	; (460 <loop+0x1e4>)
     398:	bl	c504 <Print::printf(char const*, ...)>
     39c:	ldr	r1, [pc, #208]	; (470 <loop+0x1f4>)
     39e:	ldr	r0, [pc, #192]	; (460 <loop+0x1e4>)
     3a0:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("  ; ");
     3a4:	ldr.w	r1, [r8]
     3a8:	ldr	r0, [pc, #180]	; (460 <loop+0x1e4>)
     3aa:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     3ae:	ldr	r1, [pc, #196]	; (474 <loop+0x1f8>)
     3b0:	ldr	r0, [pc, #172]	; (460 <loop+0x1e4>)
     3b2:	bl	18c <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     3b6:	ldr	r3, [pc, #192]	; (478 <loop+0x1fc>)
     3b8:	ldrh	r4, [r3, #0]
     3ba:	sxth	r4, r4
     3bc:	cbnz	r4, 3f8 <loop+0x17c>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     3be:	ldr	r3, [pc, #188]	; (47c <loop+0x200>)
     3c0:	ldr	r1, [pc, #188]	; (480 <loop+0x204>)
     3c2:	ldr.w	fp, [pc, #156]	; 460 <loop+0x1e4>
     3c6:	ldr.w	r2, [r3, r4, lsl #2]
     3ca:	adds	r4, #1
     3cc:	mov	r0, fp
     3ce:	bl	c504 <Print::printf(char const*, ...)>
     3d2:	cmp	r4, #8
     3d4:	ldr	r1, [pc, #168]	; (480 <loop+0x204>)
     3d6:	ldr	r3, [pc, #164]	; (47c <loop+0x200>)
     3d8:	bne.n	3c6 <loop+0x14a>
    loopCount=0;
     3da:	movs	r3, #0
     3dc:	str	r3, [r6, #0]
    procCount=0;
     3de:	str.w	r3, [sl]
    procMiss=0;
     3e2:	str.w	r3, [r9]
    mxb=0;
     3e6:	strh	r3, [r5, #0]
    disk_count=0;
     3e8:	str.w	r3, [r8]
    t0=t1;
     3ec:	ldr	r3, [sp, #28]
     3ee:	str	r3, [r7, #0]
  asm("wfi");
     3f0:	wfi
}
     3f2:	add	sp, #44	; 0x2c
     3f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3f8:	ldr.w	fp, [pc, #148]	; 490 <loop+0x214>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3fc:	movs	r4, #0
     3fe:	ldr	r1, [pc, #132]	; (484 <loop+0x208>)
     400:	ldr	r3, [pc, #92]	; (460 <loop+0x1e4>)
     402:	adds	r4, #1
     404:	mov	r0, r3
     406:	ldr.w	r2, [fp], #4
     40a:	bl	c504 <Print::printf(char const*, ...)>
     40e:	cmp	r4, #24
     410:	ldr	r3, [pc, #76]	; (460 <loop+0x1e4>)
     412:	ldr	r1, [pc, #112]	; (484 <loop+0x208>)
     414:	bne.n	402 <loop+0x186>
        Serial.printf("%2d",max_stat);
     416:	ldr	r4, [pc, #112]	; (488 <loop+0x20c>)
     418:	mov	r0, r3
     41a:	ldr	r1, [pc, #112]	; (48c <loop+0x210>)
     41c:	ldr	r2, [r4, #0]
     41e:	bl	c504 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     422:	movs	r2, #96	; 0x60
     424:	movs	r1, #0
     426:	ldr	r0, [pc, #104]	; (490 <loop+0x214>)
     428:	bl	9fbc <memset>
        max_stat=0;        
     42c:	movs	r3, #0
     42e:	str	r3, [r4, #0]
     430:	b.n	3da <loop+0x15e>
     432:	nop
     434:	.word	0x20014844
     438:	.word	0x200153c0
     43c:	.word	0x200153c2
     440:	.word	0x20007dcc
     444:	.word	0x20015388
     448:	.word	0x20002700
     44c:	.word	0x42004000
     450:	.word	0x20015374
     454:	.word	0x20014840
     458:	.word	0x200153c8
     45c:	.word	0x200013f6
     460:	.word	0x20001cf4
     464:	.word	0x20001417
     468:	.word	0x20001420
     46c:	.word	0x2000141b
     470:	.word	0x2000141f
     474:	.word	0x20001422
     478:	.word	0x200153ca
     47c:	.word	0x20014c0c
     480:	.word	0x20001427
     484:	.word	0x2000142c
     488:	.word	0x20014c2c
     48c:	.word	0x20001431
     490:	.word	0x20014c58
     494:	.word	0x20014c50
     498:	.word	0x20014c54
     49c:	.word	0x20014b98

000004a0 <setup1()>:
{ 
     4a0:	push	{r4, lr}
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4a2:	ldr	r4, [pc, #44]	; (4d0 <setup1()+0x30>)
  Serial.println("Setup1");
     4a4:	ldr	r1, [pc, #44]	; (4d4 <setup1()+0x34>)
     4a6:	ldr	r0, [pc, #48]	; (4d8 <setup1()+0x38>)
     4a8:	bl	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4ac:	ldr	r3, [r4, #0]
     4ae:	cbz	r3, 4c8 <setup1()+0x28>
  i2s_setup();
     4b0:	bl	af8 <i2s_setup()>
  dma_setup();
     4b4:	bl	b7c <dma_setup()>
  adc_init();
     4b8:	bl	352c <adc_init()>
  Serial.println("Setup1 done");
     4bc:	ldr	r1, [pc, #28]	; (4dc <setup1()+0x3c>)
     4be:	ldr	r0, [pc, #24]	; (4d8 <setup1()+0x38>)
}
     4c0:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     4c4:	b.w	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4c8:	movs	r0, #1
     4ca:	bl	b548 <delay>
     4ce:	b.n	4ac <setup1()+0xc>
     4d0:	.word	0x200151b4
     4d4:	.word	0x20000fe3
     4d8:	.word	0x20001cf4
     4dc:	.word	0x20000fea

000004e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     4e0:	push	{r4, r5, r6, lr}
     4e2:	mov	r5, r0
     4e4:	ldr.w	r0, [r0, #1164]	; 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4e8:	cbnz	r0, 50e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     4ea:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     4ec:	ldr.w	r0, [r5, #1152]	; 0x480
     4f0:	cbz	r0, 544 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     4f2:	bl	7be0 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     4f6:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     4f8:	cbz	r6, 50a <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
     4fa:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     4fe:	cbz	r0, 524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
     500:	ldr	r3, [r0, #0]
     502:	movs	r1, #0
     504:	ldr	r3, [r3, #68]	; 0x44
     506:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     508:	cbz	r0, 524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
     50a:	mov	r0, r4
     50c:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     50e:	ldr	r3, [r0, #0]
     510:	ldr	r3, [r3, #60]	; 0x3c
     512:	blx	r3
     514:	cmp	r0, #0
     516:	beq.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     518:	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     51c:	cbnz	r0, 528 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     51e:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
     522:	cbnz	r0, 534 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     524:	movs	r4, #0
     526:	b.n	50a <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     528:	ldr	r3, [r0, #0]
     52a:	ldr	r3, [r3, #64]	; 0x40
     52c:	blx	r3
     52e:	cmp	r0, #0
     530:	bne.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     532:	b.n	51e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
     534:	ldr	r3, [r0, #0]
     536:	movs	r1, #1
     538:	ldr	r3, [r3, #68]	; 0x44
     53a:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     53c:	mov	r6, r0
     53e:	cmp	r0, #0
     540:	bne.n	4ec <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     542:	b.n	524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     544:	ldr.w	r0, [r5, #1156]	; 0x484
     548:	cmp	r0, #0
     54a:	beq.n	4f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     54c:	bl	61ae <ExFatPartition::freeClusterCount()>
     550:	b.n	4f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

00000554 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     554:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spiConfigBackupPin = 255;
     558:	ldr	r4, [pc, #276]	; (670 <storage_configure()+0x11c>)
     55a:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
     55c:	movs	r1, #0
     55e:	ldr	r6, [pc, #276]	; (674 <storage_configure()+0x120>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     560:	add.w	r5, r4, #1168	; 0x490
    spiConfigBackupPin = 255;
     564:	strb.w	r3, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     568:	strb.w	r1, [r4, #1224]	; 0x4c8
     56c:	mov	r0, r5
     56e:	bl	9918 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     572:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     574:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     578:	bl	9014 <SdioCard::errorCode() const>
     57c:	cmp	r0, #0
     57e:	bne.n	622 <storage_configure()+0xce>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     580:	movs	r3, #1
     582:	ldr.w	r1, [r4, #1164]	; 0x48c
     586:	mov	r0, r4
     588:	mov	r2, r3
     58a:	bl	865c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     58e:	cmp	r0, #0
     590:	beq.n	622 <storage_configure()+0xce>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     592:	ldr	r3, [pc, #228]	; (678 <storage_configure()+0x124>)
     594:	ldr	r2, [r3, #4]
     596:	cmp	r2, #19
     598:	ble.n	63e <storage_configure()+0xea>
    return m_fVol ? m_fVol->clusterCount() :
     59a:	ldr.w	r3, [r4, #1152]	; 0x480
     59e:	cmp	r3, #0
     5a0:	beq.n	652 <storage_configure()+0xfe>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     5a2:	ldr	r5, [r3, #28]
     5a4:	subs	r5, #1
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     5a6:	ldr	r0, [pc, #200]	; (670 <storage_configure()+0x11c>)
     5a8:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     5ac:	ldr.w	r3, [r4, #1152]	; 0x480
     5b0:	mov	r7, r0
     5b2:	cmp	r3, #0
     5b4:	beq.n	660 <storage_configure()+0x10c>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     5b6:	ldrb	r3, [r3, #6]
     5b8:	mov.w	r4, #512	; 0x200
     5bc:	lsls	r4, r3
     5be:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     5c0:	ldr	r3, [r6, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     5c2:	mov.w	r8, #10
     5c6:	movs	r6, #0
     5c8:	movs	r2, #0
     5ca:	str	r3, [sp, #0]
     5cc:	movs	r3, #254	; 0xfe
     5ce:	ldr	r1, [pc, #172]	; (67c <storage_configure()+0x128>)
     5d0:	ldr	r0, [pc, #172]	; (680 <storage_configure()+0x12c>)
     5d2:	bl	c504 <Print::printf(char const*, ...)>
            Serial.print("; total clusters: "); Serial.print(totalSize); 
     5d6:	ldr	r1, [pc, #172]	; (684 <storage_configure()+0x130>)
     5d8:	ldr	r0, [pc, #164]	; (680 <storage_configure()+0x12c>)
     5da:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5de:	mov	r2, r5
     5e0:	mov	r3, r6
     5e2:	ldr	r0, [pc, #156]	; (680 <storage_configure()+0x12c>)
     5e4:	strd	r8, r6, [sp]
     5e8:	bl	c532 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" free clusters: "); Serial.print(freeSize);
     5ec:	ldr	r1, [pc, #152]	; (688 <storage_configure()+0x134>)
     5ee:	ldr	r0, [pc, #144]	; (680 <storage_configure()+0x12c>)
     5f0:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5f4:	mov	r2, r7
     5f6:	mov	r3, r6
     5f8:	ldr	r0, [pc, #132]	; (680 <storage_configure()+0x12c>)
     5fa:	strd	r8, r6, [sp]
     5fe:	bl	c532 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     602:	ldr	r1, [pc, #136]	; (68c <storage_configure()+0x138>)
     604:	ldr	r0, [pc, #120]	; (680 <storage_configure()+0x12c>)
     606:	bl	18c <Print::print(char const*) [clone .isra.0]>
     60a:	lsr.w	r1, r4, r8
     60e:	ldr	r0, [pc, #112]	; (680 <storage_configure()+0x12c>)
     610:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     614:	ldr	r1, [pc, #120]	; (690 <storage_configure()+0x13c>)
     616:	ldr	r0, [pc, #104]	; (680 <storage_configure()+0x12c>)
        }
      }
  }
     618:	add	sp, #8
     61a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     61e:	b.w	190 <Print::println(char const*) [clone .isra.0]>
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     622:	ldr	r3, [r6, #0]
     624:	movs	r2, #0
     626:	ldr	r1, [pc, #108]	; (694 <storage_configure()+0x140>)
     628:	str	r3, [sp, #0]
     62a:	movs	r3, #254	; 0xfe
     62c:	ldr	r0, [pc, #80]	; (680 <storage_configure()+0x12c>)
     62e:	bl	c504 <Print::printf(char const*, ...)>
     632:	ldr	r0, [pc, #76]	; (680 <storage_configure()+0x12c>)
  }
     634:	add	sp, #8
     636:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     63a:	b.w	c4cc <Print::println()>
          sd_name[fsCount] = name;
     63e:	add.w	r1, r3, r2, lsl #2
     642:	ldr	r0, [r6, #0]
     644:	str	r0, [r1, #8]
          sdx[fsCount++] = &fs;
     646:	adds	r1, r2, #1
     648:	str	r1, [r3, #4]
     64a:	add.w	r3, r3, r2, lsl #2
     64e:	str	r4, [r3, #88]	; 0x58
     650:	b.n	59a <storage_configure()+0x46>
     652:	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     656:	cmp	r5, #0
     658:	beq.n	5a6 <storage_configure()+0x52>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     65a:	ldr.w	r5, [r5, #1072]	; 0x430
     65e:	b.n	5a6 <storage_configure()+0x52>
     660:	ldr.w	r4, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     664:	cmp	r4, #0
     666:	beq.n	5c0 <storage_configure()+0x6c>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     668:	ldr.w	r4, [r4, #1084]	; 0x43c
     66c:	b.n	5c0 <storage_configure()+0x6c>
     66e:	nop
     670:	.word	0x20014ce4
     674:	.word	0x200022a4
     678:	.word	0x200151b8
     67c:	.word	0x20000de7
     680:	.word	0x20001cf4
     684:	.word	0x20000dfe
     688:	.word	0x20000e11
     68c:	.word	0x20000e22
     690:	.word	0x20000e31
     694:	.word	0x20000dbc

00000698 <_GLOBAL__sub_I_storage>:
  }
     698:	push	{r3, r4, r5, lr}
        fsCount = 0;
     69a:	ldr	r5, [pc, #192]	; (75c <_GLOBAL__sub_I_storage+0xc4>)
     69c:	movs	r4, #0
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     69e:	ldr	r3, [pc, #192]	; (760 <_GLOBAL__sub_I_storage+0xc8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6a0:	mov.w	r2, #1000	; 0x3e8
  MTPStorage_SD storage;
     6a4:	ldr	r1, [pc, #188]	; (764 <_GLOBAL__sub_I_storage+0xcc>)
     6a6:	mov	r0, r5
     6a8:	str	r3, [r5, #0]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6aa:	ldr	r3, [pc, #188]	; (768 <_GLOBAL__sub_I_storage+0xd0>)
     6ac:	str.w	r2, [r5, #176]	; 0xb0
     6b0:	str.w	r3, [r5, #168]	; 0xa8
     6b4:	str.w	r3, [r5, #248]	; 0xf8
     6b8:	str.w	r3, [r5, #328]	; 0x148
     6bc:	mvn.w	r3, #1
        fsCount = 0;
     6c0:	str	r4, [r5, #4]
	constexpr Print() : write_error(0) {}
     6c2:	str.w	r4, [r5, #172]	; 0xac
     6c6:	strb.w	r4, [r5, #180]	; 0xb4
     6ca:	strb.w	r4, [r5, #260]	; 0x104
     6ce:	strb.w	r4, [r5, #340]	; 0x154
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6d2:	str.w	r4, [r5, #416]	; 0x1a0
     6d6:	strh.w	r4, [r5, #428]	; 0x1ac
     6da:	strd	r4, r2, [r5, #252]	; 0xfc
     6de:	strd	r4, r2, [r5, #332]	; 0x14c
     6e2:	ldr	r2, [pc, #136]	; (76c <_GLOBAL__sub_I_storage+0xd4>)
     6e4:	strd	r3, r4, [r5, #420]	; 0x1a4
  FsBaseFile() {}
     6e8:	strd	r4, r4, [r5, #240]	; 0xf0
     6ec:	strd	r4, r4, [r5, #320]	; 0x140
     6f0:	strd	r4, r4, [r5, #400]	; 0x190
     6f4:	strd	r4, r4, [r5, #408]	; 0x198
     6f8:	bl	c6f8 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     6fc:	ldr	r3, [pc, #112]	; (770 <_GLOBAL__sub_I_storage+0xd8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     6fe:	ldr	r1, [pc, #116]	; (774 <_GLOBAL__sub_I_storage+0xdc>)
  SdFs sdx[nsd];
     700:	mov	r0, r4
     702:	str	r5, [r3, #0]
     704:	add.w	r3, r3, #8192	; 0x2000
     708:	ldr	r2, [pc, #96]	; (76c <_GLOBAL__sub_I_storage+0xd4>)
     70a:	str.w	r4, [r3, #1056]	; 0x420
     70e:	strb.w	r4, [r3, #1060]	; 0x424
     712:	str.w	r4, [r3, #1064]	; 0x428
  FsVolume() {}
     716:	ldr	r3, [pc, #96]	; (778 <_GLOBAL__sub_I_storage+0xe0>)
     718:	str.w	r1, [r3, #1168]	; 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     71c:	ldr	r1, [pc, #92]	; (77c <_GLOBAL__sub_I_storage+0xe4>)
     71e:	str.w	r4, [r3, #1152]	; 0x480
     722:	str.w	r1, [r3, #1188]	; 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     726:	movs	r1, #7
     728:	str.w	r4, [r3, #1156]	; 0x484
     72c:	str.w	r1, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     730:	movs	r1, #41	; 0x29
class SdBase : public Vol {
     732:	str.w	r4, [r3, #1164]	; 0x48c
     736:	strb.w	r1, [r3, #1197]	; 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     73a:	ldr	r1, [pc, #68]	; (780 <_GLOBAL__sub_I_storage+0xe8>)
  SdioConfig() {}
     73c:	strh.w	r4, [r3, #1176]	; 0x498
     740:	str.w	r1, [r3, #1180]	; 0x49c
  SharedSpiCard() {}
     744:	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     748:	strb.w	r4, [r3, #1208]	; 0x4b8
     74c:	strb.w	r4, [r3, #1224]	; 0x4c8
     750:	ldr	r1, [pc, #48]	; (784 <_GLOBAL__sub_I_storage+0xec>)
  }
     752:	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     756:	b.w	c6f8 <__aeabi_atexit>
     75a:	nop
     75c:	.word	0x200151b8
     760:	.word	0x20000450
     764:	.word	0x000001a5
     768:	.word	0x20000554
     76c:	.word	0x200020cc
     770:	.word	0x20002700
     774:	.word	0x2000059c
     778:	.word	0x20014ce4
     77c:	.word	0x003d0900
     780:	.word	0x200004bc
     784:	.word	0x0000006d

00000788 <setup>:
{
     788:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     78a:	ldr	r5, [pc, #268]	; (898 <setup+0x110>)
     78c:	sub	sp, #28
    set_arm_clock(48'000'000);
     78e:	ldr	r0, [pc, #268]	; (89c <setup+0x114>)
				if (elapsed > 750) break;
     790:	movw	r7, #750	; 0x2ee
     794:	bl	a800 <set_arm_clock>
			if (usb_configuration) {
     798:	ldr	r6, [pc, #260]	; (8a0 <setup+0x118>)
		uint32_t millis_begin = systick_millis_count;
     79a:	ldr	r4, [r5, #0]
		while (!(*this)) {
     79c:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7a0:	cbz	r0, 7c8 <setup+0x40>
  uint16_t *params=loadParameters();
     7a2:	bl	2214 <loadParameters()>
  if(params[0]==1)
     7a6:	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     7a8:	mov	r4, r0
  if(params[0]==1)
     7aa:	cmp	r3, #1
     7ac:	beq.n	7e0 <setup+0x58>
    while(millis()<10'000) if(Serial) { termon=1; break;}
     7ae:	movw	r6, #9999	; 0x270f
     7b2:	ldr	r3, [r5, #0]
     7b4:	cmp	r3, r6
     7b6:	bhi.n	7f4 <setup+0x6c>
     7b8:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7bc:	cmp	r0, #0
     7be:	beq.n	7b2 <setup+0x2a>
     7c0:	ldr	r3, [pc, #224]	; (8a4 <setup+0x11c>)
     7c2:	movs	r2, #1
     7c4:	str	r2, [r3, #0]
     7c6:	b.n	7f4 <setup+0x6c>
			uint32_t elapsed = systick_millis_count - millis_begin;
     7c8:	ldr	r3, [r5, #0]
			if (usb_configuration) {
     7ca:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     7cc:	subs	r3, r3, r4
			if (usb_configuration) {
     7ce:	cbz	r2, 7dc <setup+0x54>
				if (elapsed > 2000) break;
     7d0:	cmp.w	r3, #2000	; 0x7d0
				if (elapsed > 750) break;
     7d4:	bhi.n	7a2 <setup+0x1a>
			yield();
     7d6:	bl	c1c4 <yield>
     7da:	b.n	79c <setup+0x14>
				if (elapsed > 750) break;
     7dc:	cmp	r3, r7
     7de:	b.n	7d4 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     7e0:	ldr	r3, [pc, #196]	; (8a8 <setup+0x120>)
     7e2:	ldr	r2, [pc, #200]	; (8ac <setup+0x124>)
     7e4:	ldr	r3, [r3, #0]
     7e6:	ldr	r2, [r2, #0]
     7e8:	cmp	r3, r2
     7ea:	ldr	r2, [pc, #184]	; (8a4 <setup+0x11c>)
     7ec:	ite	hi
     7ee:	movhi	r3, #0
     7f0:	movls	r3, #1
     7f2:	str	r3, [r2, #0]
  Serial.println(version);
     7f4:	ldr	r1, [pc, #184]	; (8b0 <setup+0x128>)
     7f6:	ldr	r0, [pc, #188]	; (8b4 <setup+0x12c>)
     7f8:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.print("params[0] = "); Serial.println(params[0]);
     7fc:	ldr	r1, [pc, #184]	; (8b8 <setup+0x130>)
     7fe:	ldr	r0, [pc, #180]	; (8b4 <setup+0x12c>)
     800:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     804:	ldrh	r1, [r4, #0]
     806:	ldr	r0, [pc, #172]	; (8b4 <setup+0x12c>)
     808:	bl	c4ba <Print::print(long)>
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     80c:	ldr	r0, [pc, #164]	; (8b4 <setup+0x12c>)
     80e:	bl	c4cc <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     812:	ldr	r0, [pc, #168]	; (8bc <setup+0x134>)
     814:	bl	11e90 <___ZN16CrashReportClasscvbEv_veneer>
     818:	cbz	r0, 822 <setup+0x9a>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     81a:	ldr	r1, [pc, #152]	; (8b4 <setup+0x12c>)
     81c:	ldr	r0, [pc, #156]	; (8bc <setup+0x134>)
     81e:	bl	11e70 <___ZNK16CrashReportClass7printToER5Print_veneer>
    usbPowerSetup();
     822:	bl	34e8 <usbPowerSetup()>
    lowPowerInit();
     826:	bl	258 <lowPowerInit()>
    storage_configure();
     82a:	bl	554 <storage_configure()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     82e:	add	r0, sp, #16
     830:	bl	3a12 <rtc_get_datetime(datetime_t*)>
     834:	cbnz	r0, 83e <setup+0xb6>
     836:	ldr	r1, [pc, #136]	; (8c0 <setup+0x138>)
     838:	ldr	r0, [pc, #120]	; (8b4 <setup+0x12c>)
     83a:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     83e:	ldrsb.w	r3, [sp, #23]
  setup_ready=1;
     842:	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     844:	ldrsh.w	r2, [sp, #16]
     848:	str	r3, [sp, #12]
     84a:	ldrsb.w	r3, [sp, #22]
     84e:	ldr	r1, [pc, #116]	; (8c4 <setup+0x13c>)
     850:	str	r3, [sp, #8]
     852:	ldrsb.w	r3, [sp, #21]
     856:	ldr	r0, [pc, #92]	; (8b4 <setup+0x12c>)
     858:	str	r3, [sp, #4]
     85a:	ldrsb.w	r3, [sp, #19]
     85e:	str	r3, [sp, #0]
     860:	ldrsb.w	r3, [sp, #18]
     864:	bl	c504 <Print::printf(char const*, ...)>
  Serial.println();
     868:	ldr	r0, [pc, #72]	; (8b4 <setup+0x12c>)
     86a:	bl	c4cc <Print::println()>
  Serial.println("filing_init");
     86e:	ldr	r1, [pc, #88]	; (8c8 <setup+0x140>)
     870:	ldr	r0, [pc, #64]	; (8b4 <setup+0x12c>)
     872:	bl	190 <Print::println(char const*) [clone .isra.0]>
  filing_init();
     876:	bl	315c <filing_init()>
  setup_ready=1;
     87a:	ldr	r3, [pc, #80]	; (8cc <setup+0x144>)
  Serial.println("Setup done");
     87c:	ldr	r1, [pc, #80]	; (8d0 <setup+0x148>)
     87e:	ldr	r0, [pc, #52]	; (8b4 <setup+0x12c>)
  setup_ready=1;
     880:	str	r4, [r3, #0]
  Serial.println("Setup done");
     882:	bl	190 <Print::println(char const*) [clone .isra.0]>
    setup1();
     886:	bl	4a0 <setup1()>
    pinMode(13,OUTPUT);
     88a:	mov	r1, r4
     88c:	movs	r0, #13
     88e:	bl	bcd8 <pinMode>
}
     892:	add	sp, #28
     894:	pop	{r4, r5, r6, r7, pc}
     896:	nop
     898:	.word	0x20015374
     89c:	.word	0x02dc6c00
     8a0:	.word	0x200155e3
     8a4:	.word	0x20015388
     8a8:	.word	0x20015384
     8ac:	.word	0x200022b8
     8b0:	.word	0x2000105e
     8b4:	.word	0x20001cf4
     8b8:	.word	0x20001435
     8bc:	.word	0x20001ce8
     8c0:	.word	0x20001442
     8c4:	.word	0x20001457
     8c8:	.word	0x2000147e
     8cc:	.word	0x200151b4
     8d0:	.word	0x2000148a

000008d4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     8d4:	push	{r4, lr}
     8d6:	mov	r4, r0
		release();
     8d8:	bl	c330 <DMAChannel::release()>
	}
     8dc:	mov	r0, r4
     8de:	pop	{r4, pc}

000008e0 <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     8e0:	push	{r3, r4, r5, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     8e2:	ldr	r3, [pc, #148]	; (978 <acq_isr()+0x98>)
     8e4:	ldr	r2, [r3, #0]
     8e6:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     8e8:	ldrb	r2, [r3, #4]
     8ea:	ldr	r3, [pc, #144]	; (97c <acq_isr()+0x9c>)
     8ec:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     8ee:	ldr	r2, [pc, #144]	; (980 <acq_isr()+0xa0>)
    }
    else
    {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
     8f0:	sub.w	r3, r2, #2048	; 0x800
     8f4:	cmp	r1, r2
     8f6:	it	cc
     8f8:	movcc	r3, r2
	uint32_t end_addr = (uint32_t)addr + size;
     8fa:	add.w	r0, r3, #2048	; 0x800
	asm("dsb");
     8fe:	dsb	sy
     902:	add.w	r2, r3, #32
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     906:	mov	r1, r3
		SCB_CACHE_DCIMVAC = location;
     908:	mov.w	r4, #3758153728	; 0xe000e000
     90c:	cmp	r2, r0
     90e:	ite	hi
     910:	movhi	r2, #1
     912:	movls	r2, #64	; 0x40
     914:	add.w	r2, r3, r2, lsl #5
     918:	str.w	r1, [r4, #3932]	; 0xf5c
		location += 32;
     91c:	adds	r1, #32
	} while (location < end_addr);
     91e:	cmp	r1, r2
     920:	bne.n	918 <acq_isr()+0x38>
	asm("dsb");
     922:	dsb	sy
	asm("isb");
     926:	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     92a:	ldr	r1, [pc, #88]	; (984 <acq_isr()+0xa4>)
     92c:	ldr	r4, [pc, #88]	; (988 <acq_isr()+0xa8>)
     92e:	ldr	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     930:	ldr	r5, [pc, #88]	; (98c <acq_isr()+0xac>)
{ procCount++;
     932:	adds	r2, #1
     934:	str	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     936:	ldrh	r1, [r5, #0]
     938:	adds	r3, #16
     93a:	ldr.w	r2, [r3, #-8]
     93e:	sxth	r1, r1
     940:	cmp	r0, r3
     942:	asr.w	r2, r2, r1
     946:	str.w	r2, [r4], #4
     94a:	bne.n	936 <acq_isr()+0x56>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     94c:	ldr	r2, [pc, #64]	; (990 <acq_isr()+0xb0>)
     94e:	ldrh	r3, [r2, #0]
     950:	sxth	r3, r3
     952:	cbnz	r3, 966 <acq_isr()+0x86>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     954:	ldr	r0, [pc, #48]	; (988 <acq_isr()+0xa8>)
     956:	bl	2738 <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     95a:	cbnz	r0, 964 <acq_isr()+0x84>
     95c:	ldr	r2, [pc, #52]	; (994 <acq_isr()+0xb4>)
     95e:	ldr	r3, [r2, #0]
     960:	adds	r3, #1
     962:	str	r3, [r2, #0]
  }
     964:	pop	{r3, r4, r5, pc}
  else if(proc==1)
     966:	ldrh	r3, [r2, #0]
     968:	sxth	r3, r3
     96a:	cmp	r3, #1
     96c:	bne.n	964 <acq_isr()+0x84>
   if(!compress((void *)acqBuffer)) procMiss++;
     96e:	ldr	r0, [pc, #24]	; (988 <acq_isr()+0xa8>)
     970:	bl	3210 <compress(void*)>
     974:	b.n	95a <acq_isr()+0x7a>
     976:	nop
     978:	.word	0x20013fdc
     97c:	.word	0x400e8000
     980:	.word	0x20200800
     984:	.word	0x20014c50
     988:	.word	0x20014998
     98c:	.word	0x2001546e
     990:	.word	0x200153ca
     994:	.word	0x20014c54

00000998 <setAudioFrequency(int)>:
  {
     998:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     99c:	ldr.w	r9, [pc, #332]	; aec <setAudioFrequency(int)+0x154>
     9a0:	movs	r2, #5
     9a2:	mov	r5, r0
     9a4:	ldr	r1, [pc, #312]	; (ae0 <setAudioFrequency(int)+0x148>)
     9a6:	ldr.w	r3, [r9]
     9aa:	mov	r0, r9
     9ac:	ldr	r3, [r3, #4]
     9ae:	vpush	{d8}
     9b2:	sub	sp, #12
     9b4:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     9b6:	mov.w	r1, #256	; 0x100
     9ba:	mov	r0, r9
     9bc:	bl	c4ba <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     9c0:	mov	r0, r9
     9c2:	bl	c4cc <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     9c6:	movs	r3, #26
     9c8:	lsls	r1, r5, #8
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9ca:	ldr	r0, [pc, #280]	; (ae4 <setAudioFrequency(int)+0x14c>)
    {   n0++;
     9cc:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9ce:	mov	r2, r1
        n1=0;
     9d0:	movs	r4, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9d2:	mul.w	ip, r0, r3
        {   n1++; 
     9d6:	mov	r6, r4
     9d8:	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9da:	sdiv	r8, ip, r2
     9de:	add.w	r7, r8, #1
        } while ((n2>64) && (n1<=8));
     9e2:	cmp	r7, #64	; 0x40
     9e4:	ble.n	9f2 <setAudioFrequency(int)+0x5a>
     9e6:	cmp	r4, #9
     9e8:	add	r2, r1
     9ea:	bne.n	9d6 <setAudioFrequency(int)+0x3e>
    } while ((n2>64 && n0<54));
     9ec:	cmp	r3, #54	; 0x36
     9ee:	bne.n	9cc <setAudioFrequency(int)+0x34>
     9f0:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9f2:	mov	r2, r5
     9f4:	ldr	r1, [pc, #240]	; (ae8 <setAudioFrequency(int)+0x150>)
     9f6:	ldr	r0, [pc, #244]	; (aec <setAudioFrequency(int)+0x154>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     9f8:	and.w	r8, r8, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     9fc:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9fe:	strd	r4, r7, [sp]
     a02:	bl	c504 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a06:	vmov	s15, r5
							  return write((const uint8_t *)str, strlen(str)); }
     a0a:	ldr.w	r3, [r9]
     a0e:	movs	r2, #3
     a10:	vcvt.f64.s32	d7, s15
     a14:	ldr	r1, [pc, #216]	; (af0 <setAudioFrequency(int)+0x158>)
     a16:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a18:	and.w	r6, r6, #448	; 0x1c0
     a1c:	ldr	r0, [pc, #204]	; (aec <setAudioFrequency(int)+0x154>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a1e:	vldr	d6, [pc, #168]	; ac8 <setAudioFrequency(int)+0x130>
     a22:	vmul.f64	d7, d7, d6
     a26:	vmov	s13, r4
     a2a:	vcvt.f64.s32	d6, s13
     a2e:	vmul.f64	d7, d7, d6
     a32:	vmov	s13, r7
     a36:	vcvt.f64.s32	d6, s13
     a3a:	vmul.f64	d7, d7, d6
     a3e:	vldr	d6, [pc, #144]	; ad0 <setAudioFrequency(int)+0x138>
     a42:	vdiv.f64	d8, d7, d6
     a46:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a48:	movs	r1, #2
     a4a:	ldr	r0, [pc, #160]	; (aec <setAudioFrequency(int)+0x154>)
     a4c:	vmov.f64	d0, d8
     a50:	bl	c5c8 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     a54:	ldr	r0, [pc, #148]	; (aec <setAudioFrequency(int)+0x154>)
     a56:	bl	c4cc <Print::println()>
    int c0 = C;
     a5a:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     a5e:	movw	r2, #10000	; 0x2710
    int c0 = C;
     a62:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     a66:	mul.w	r3, r2, r0
     a6a:	vmov	s14, r3
     a6e:	vldr	d6, [pc, #104]	; ad8 <setAudioFrequency(int)+0x140>
     a72:	vcvt.f64.s32	d7, s14
     a76:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     a7a:	vcvt.s32.f64	s15, d7
     a7e:	vmov	r1, s15
     a82:	bl	11e88 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a86:	ldr	r2, [pc, #108]	; (af4 <setAudioFrequency(int)+0x15c>)
     a88:	ldr	r3, [r2, #28]
     a8a:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     a8e:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a92:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a94:	ldr	r3, [r2, #40]	; 0x28
     a96:	bic.w	r3, r3, #510	; 0x1fe
     a9a:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     a9e:	orr.w	r3, r3, r8
     aa2:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     aa4:	str	r3, [r2, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     aa6:	sub.w	r2, r2, #327680	; 0x50000
     aaa:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     aac:	bic.w	r3, r3, #524288	; 0x80000
     ab0:	bic.w	r3, r3, #7
     ab4:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     ab8:	str	r3, [r2, #4]
  }
     aba:	add	sp, #12
     abc:	vpop	{d8}
     ac0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     ac4:	nop.w
     ac8:	.word	0x00000000
     acc:	.word	0x40700000
     ad0:	.word	0x00000000
     ad4:	.word	0x4176e360
     ad8:	.word	0x00000000
     adc:	.word	0x40c38800
     ae0:	.word	0x20000d95
     ae4:	.word	0x016e3600
     ae8:	.word	0x20000d9b
     aec:	.word	0x20001cf4
     af0:	.word	0x20000db8
     af4:	.word	0x400fc000

00000af8 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     af8:	ldr	r2, [pc, #100]	; (b60 <i2s_setup()+0x68>)
     afa:	ldr	r3, [r2, #124]	; 0x7c
  {
     afc:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     afe:	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b02:	ldr	r4, [pc, #96]	; (b64 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b04:	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b06:	ldr.w	r3, [r4, #136]	; 0x88
     b0a:	cmp	r3, #0
     b0c:	blt.n	b5e <i2s_setup()+0x66>
    int fs = fsamp;
     b0e:	ldr	r3, [pc, #88]	; (b68 <i2s_setup()+0x70>)
     b10:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     b12:	bl	998 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     b16:	ldr	r3, [pc, #84]	; (b6c <i2s_setup()+0x74>)
     b18:	movs	r2, #3
     b1a:	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     b1e:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     b22:	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     b26:	str.w	r2, [r3, #380]	; 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     b2a:	movs	r2, #2
     b2c:	str.w	r2, [r3, #1428]	; 0x594
    I2S1_RMR = 0;
     b30:	movs	r3, #0
     b32:	str.w	r3, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     b36:	movs	r3, #4
     b38:	str.w	r3, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     b3c:	mov.w	r3, #83886080	; 0x5000000
     b40:	str.w	r3, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     b44:	mov.w	r3, #65536	; 0x10000
     b48:	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     b4c:	ldr	r3, [pc, #32]	; (b70 <i2s_setup()+0x78>)
     b4e:	str.w	r3, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     b52:	ldr	r3, [pc, #32]	; (b74 <i2s_setup()+0x7c>)
     b54:	str.w	r3, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     b58:	ldr	r3, [pc, #28]	; (b78 <i2s_setup()+0x80>)
     b5a:	str.w	r3, [r4, #136]	; 0x88
  }
     b5e:	pop	{r4, pc}
     b60:	.word	0x400fc000
     b64:	.word	0x40384000
     b68:	.word	0x20002298
     b6c:	.word	0x401f8000
     b70:	.word	0x0003001b
     b74:	.word	0x1f1f1f00
     b78:	.word	0x92000001

00000b7c <dma_setup()>:
  {
     b7c:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     b7e:	ldr	r4, [pc, #128]	; (c00 <dma_setup()+0x84>)
     b80:	movs	r1, #1
     b82:	mov	r0, r4
     b84:	bl	c294 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b88:	ldr	r3, [r4, #0]
     b8a:	ldr	r2, [pc, #120]	; (c04 <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b8c:	ldr	r1, [pc, #120]	; (c08 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b8e:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b90:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     b92:	ldr	r0, [pc, #120]	; (c0c <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     b94:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     b96:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     b98:	ldr	r0, [pc, #116]	; (c10 <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b9a:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b9e:	mov.w	r2, #1024	; 0x400
    dma.TCD->SLAST = 0;
     ba2:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     ba4:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     ba6:	sub.w	r2, r2, #5120	; 0x1400
    dma.TCD->SLAST = 0;
     baa:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     bac:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     bae:	ldrh	r2, [r3, #22]
     bb0:	uxth	r2, r2
     bb2:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     bb4:	movs	r2, #6
     bb6:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     bb8:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bba:	ldr	r2, [pc, #88]	; (c14 <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     bbc:	lsls	r3, r3, #2
     bbe:	add.w	r3, r3, #1073741824	; 0x40000000
     bc2:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     bc6:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bc8:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     bca:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     bcc:	ldr	r2, [pc, #72]	; (c18 <dma_setup()+0x9c>)
     bce:	add.w	r1, r3, #16
     bd2:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bd6:	asrs	r2, r3, #5
     bd8:	and.w	r0, r3, #31
     bdc:	movs	r1, #1
     bde:	add.w	r2, r2, #939538432	; 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     be2:	add.w	r3, r3, #3758096384	; 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     be6:	lsls	r1, r0
     be8:	adds	r2, #64	; 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bea:	add.w	r3, r3, #58368	; 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bee:	lsls	r2, r2, #2
     bf0:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bf2:	movs	r2, #96	; 0x60
     bf4:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     bf6:	ldr	r3, [pc, #36]	; (c1c <dma_setup()+0xa0>)
     bf8:	ldrb	r2, [r4, #4]
     bfa:	strb	r2, [r3, #27]
  }
     bfc:	pop	{r4, pc}
     bfe:	nop
     c00:	.word	0x20013fdc
     c04:	.word	0x403840a0
     c08:	.word	0x02020000
     c0c:	.word	0x20200000
     c10:	.word	0x000008e1
     c14:	.word	0x80000013
     c18:	.word	0x20002400
     c1c:	.word	0x400e8000

00000c20 <acqModifyFrequency(unsigned long)>:
  {
     c20:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     c22:	ldr	r4, [pc, #32]	; (c44 <acqModifyFrequency(unsigned long)+0x24>)
     c24:	ldr.w	r3, [r4, #136]	; 0x88
     c28:	bic.w	r3, r3, #2415919104	; 0x90000000
     c2c:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     c30:	bl	998 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     c34:	ldr.w	r3, [r4, #136]	; 0x88
     c38:	orr.w	r3, r3, #2415919104	; 0x90000000
     c3c:	str.w	r3, [r4, #136]	; 0x88
  }
     c40:	pop	{r4, pc}
     c42:	nop
     c44:	.word	0x40384000

00000c48 <_GLOBAL__sub_I_procCount>:
		begin();
     c48:	ldr	r0, [pc, #20]	; (c60 <_GLOBAL__sub_I_procCount+0x18>)
     c4a:	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     c4c:	push	{r3, lr}
     c4e:	bl	c294 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     c52:	ldr	r2, [pc, #16]	; (c64 <_GLOBAL__sub_I_procCount+0x1c>)
     c54:	ldr	r1, [pc, #16]	; (c68 <_GLOBAL__sub_I_procCount+0x20>)
     c56:	ldr	r0, [pc, #8]	; (c60 <_GLOBAL__sub_I_procCount+0x18>)
}
     c58:	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     c5c:	b.w	c6f8 <__aeabi_atexit>
     c60:	.word	0x20013fdc
     c64:	.word	0x200020cc
     c68:	.word	0x000008d5

00000c6c <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c6c:	ldr	r3, [r0, #4]
     c6e:	cmp	r3, #19
{ 
public:
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c70:	push	{r4, lr}
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c72:	bgt.n	c80 <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x14>
          sd_name[fsCount] = name;
     c74:	add.w	r4, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
     c78:	adds	r3, #1
          sd_name[fsCount] = name;
     c7a:	str	r2, [r4, #8]
          sdx[fsCount++] = &fs;
     c7c:	str	r3, [r0, #4]
     c7e:	str	r1, [r4, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c80:	pop	{r4, pc}

00000c82 <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = O_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
     c82:	ldr	r0, [r0, #4]
     c84:	bx	lr

00000c86 <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
     c86:	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
     c8a:	ldr	r0, [r1, #8]
     c8c:	bx	lr

00000c8e <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
     c8e:	movs	r0, #0
     c90:	bx	lr

00000c92 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
     c92:	movs	r0, #1
     c94:	bx	lr

00000c96 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     c96:	push	{r4}
    *name = 0;
     c98:	movs	r4, #0
     c9a:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     c9c:	ldr	r3, [r0, #56]	; 0x38
     c9e:	cbz	r3, caa <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
     ca0:	mov	r0, r3
  }
     ca2:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     ca6:	b.w	6d10 <FatFile::getName(char*, unsigned int)>
     caa:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     cac:	cbz	r0, cb6 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     cae:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     cb2:	b.w	55d4 <ExFatFile::getName8(char*, unsigned int)>
     cb6:	ldr.w	r4, [sp], #4
     cba:	bx	lr

00000cbc <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cbc:	push	{r4, lr}
     cbe:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     cc0:	movs	r3, #0
     cc2:	movs	r2, #10
     cc4:	bl	c51e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cc8:	mov	r0, r4
     cca:	ldmia.w	sp!, {r4, lr}
     cce:	b.w	c4cc <Print::println()>

00000cd2 <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cd2:	push	{r0, r1, r4, lr}
     cd4:	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
     cd6:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cd8:	cbz	r1, cf2 <Print::write(char const*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     cda:	str	r1, [sp, #4]
     cdc:	bl	eb80 <strlen>
     ce0:	ldr	r3, [r4, #0]
     ce2:	mov	r2, r0
     ce4:	ldr	r1, [sp, #4]
     ce6:	mov	r0, r4
     ce8:	ldr	r3, [r3, #4]
     cea:	add	sp, #8
     cec:	ldmia.w	sp!, {r4, lr}
     cf0:	bx	r3
     cf2:	add	sp, #8
     cf4:	pop	{r4, pc}
	...

00000cf8 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
     cf8:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     cfa:	ldr	r4, [pc, #44]	; (d28 <dbgPrint(unsigned short)+0x30>)
     cfc:	mov	r5, r0
     cfe:	ldr	r1, [pc, #44]	; (d2c <dbgPrint(unsigned short)+0x34>)
     d00:	mov	r0, r4
     d02:	bl	cd2 <Print::write(char const*)>
     d06:	ldr	r1, [pc, #40]	; (d30 <dbgPrint(unsigned short)+0x38>)
     d08:	mov	r0, r4
     d0a:	bl	cd2 <Print::write(char const*)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     d0e:	movs	r0, #46	; 0x2e
     d10:	bl	a708 <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     d14:	mov	r1, r5
     d16:	mov	r0, r4
     d18:	bl	c4ba <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     d1c:	mov	r0, r4
  }
     d1e:	ldmia.w	sp!, {r3, r4, r5, lr}
     d22:	b.w	c4cc <Print::println()>
     d26:	nop
     d28:	.word	0x20001cf4
     d2c:	.word	0x200010ae
     d30:	.word	0x200010b9

00000d34 <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
     d34:	push	{r3, r4, r5, lr}
     d36:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
     d38:	bl	cd2 <Print::write(char const*)>
     d3c:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
     d3e:	mov	r0, r5
     d40:	bl	c4cc <Print::println()>
     d44:	add	r0, r4
     d46:	pop	{r3, r4, r5, pc}

00000d48 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     d48:	ldr.w	r3, [r0, #1152]	; 0x480
     d4c:	cbz	r3, d5a <FsVolume::bytesPerCluster() const+0x12>
     d4e:	ldrb	r3, [r3, #6]
     d50:	mov.w	r0, #512	; 0x200
     d54:	lsls	r0, r3
     d56:	uxth	r0, r0
     d58:	bx	lr
     d5a:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     d5e:	cbz	r0, d64 <FsVolume::bytesPerCluster() const+0x1c>
     d60:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
     d64:	bx	lr

00000d66 <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     d66:	ldr.w	r3, [r0, #1152]	; 0x480
     d6a:	cbz	r3, d72 <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     d6c:	ldr	r0, [r3, #28]
     d6e:	subs	r0, #1
     d70:	bx	lr
     d72:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     d76:	cbz	r0, d7c <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     d78:	ldr.w	r0, [r0, #1072]	; 0x430
  }
     d7c:	bx	lr

00000d7e <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
     d7e:	add.w	r1, r0, r1, lsl #2
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
     d82:	push	{r3, r4, r5, lr}
     d84:	ldr	r5, [r1, #88]	; 0x58
     d86:	mov	r0, r5
     d88:	bl	d66 <FsVolume::clusterCount() const>
     d8c:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
     d8e:	mov	r0, r5
     d90:	bl	d48 <FsVolume::bytesPerCluster() const>
     d94:	umull	r0, r1, r4, r0
     d98:	pop	{r3, r4, r5, pc}

00000d9a <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     d9a:	ldr.w	r3, [r0, #1152]	; 0x480
  bool rename(const char *oldPath, const char *newPath) {
     d9e:	push	{r4, r5, lr}
     da0:	mov	r5, r1
     da2:	sub	sp, #68	; 0x44
     da4:	mov	r4, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     da6:	cbz	r3, dcc <FsVolume::rename(char const*, char const*)+0x32>
  FatFile() {}
     da8:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     daa:	add.w	r1, r3, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     dae:	add	r0, sp, #8
     db0:	mov	r3, r2
     db2:	str	r2, [sp, #8]
     db4:	mov	r2, r5
     db6:	str	r1, [sp, #4]
     db8:	bl	732c <FatFile::open(FatFile*, char const*, int)>
     dbc:	ldr	r1, [sp, #4]
     dbe:	cbz	r0, dc8 <FsVolume::rename(char const*, char const*)+0x2e>
     dc0:	mov	r2, r4
     dc2:	add	r0, sp, #8
     dc4:	bl	75ec <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     dc8:	add	sp, #68	; 0x44
     dca:	pop	{r4, r5, pc}
     dcc:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     dd0:	cmp	r0, #0
     dd2:	beq.n	dc8 <FsVolume::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     dd4:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     dd8:	mov	r2, r5
     dda:	add	r0, sp, #8
  ExFatFile() {}
     ddc:	str	r3, [sp, #56]	; 0x38
     dde:	str	r1, [sp, #4]
     de0:	bl	5df8 <ExFatFile::open(ExFatFile*, char const*, int)>
     de4:	ldr	r1, [sp, #4]
     de6:	cbnz	r0, dec <FsVolume::rename(char const*, char const*)+0x52>
     de8:	movs	r0, #0
     dea:	b.n	dc8 <FsVolume::rename(char const*, char const*)+0x2e>
     dec:	mov	r2, r4
     dee:	add	r0, sp, #8
     df0:	bl	67f4 <ExFatFile::rename(ExFatFile*, char const*)>
     df4:	cmp	r0, #0
     df6:	beq.n	de8 <FsVolume::rename(char const*, char const*)+0x4e>
     df8:	b.n	dc8 <FsVolume::rename(char const*, char const*)+0x2e>

00000dfa <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     dfa:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
     dfc:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     dfe:	cbz	r3, e18 <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
     e00:	ldrb	r0, [r3, #0]
     e02:	ands.w	r0, r0, #8
     e06:	ittt	ne
     e08:	ldrne	r0, [r3, #28]
     e0a:	ldrne	r3, [r3, #20]
     e0c:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
     e0e:	cmp	r0, #0
     e10:	it	lt
     e12:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
     e16:	pop	{r4, pc}
     e18:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->available() : 0;
     e1a:	cmp	r0, #0
     e1c:	beq.n	e16 <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e1e:	ldrb.w	r3, [r0, #49]	; 0x31
     e22:	ands.w	r3, r3, #8
     e26:	beq.n	e46 <FsBaseFile::available() const+0x4c>
     e28:	ldrd	r1, r3, [r0, #16]
     e2c:	ldrd	r2, r4, [r0]
     e30:	subs	r0, r1, r2
     e32:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     e36:	cmp.w	r0, #2147483648	; 0x80000000
     e3a:	sbcs.w	r3, r3, #0
     e3e:	it	cs
     e40:	mvncs.w	r0, #2147483648	; 0x80000000
     e44:	b.n	e16 <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e46:	mov	r0, r3
     e48:	b.n	e36 <FsBaseFile::available() const+0x3c>

00000e4a <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     e4a:	ldr	r3, [r0, #56]	; 0x38
     e4c:	cbz	r3, e54 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)+0xa>
     e4e:	mov	r0, r3
     e50:	b.w	740e <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     e54:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     e56:	cbz	r0, e5c <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)+0x12>
     e58:	b.w	5732 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
  }
     e5c:	bx	lr

00000e5e <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     e5e:	ldr	r3, [r0, #56]	; 0x38
     e60:	cbz	r3, e70 <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     e62:	ldrb	r3, [r3, #0]
     e64:	tst.w	r3, #112	; 0x70
           m_xFile ? m_xFile->isDir() : false;
     e68:	ite	ne
     e6a:	movne	r0, #1
     e6c:	moveq	r0, #0
  }
     e6e:	bx	lr
     e70:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->isDir() : false;
     e72:	cmp	r0, #0
     e74:	beq.n	e6e <FsBaseFile::isDir() const+0x10>
     e76:	ldrb.w	r3, [r0, #49]	; 0x31
     e7a:	tst.w	r3, #80	; 0x50
     e7e:	b.n	e68 <FsBaseFile::isDir() const+0xa>

00000e80 <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     e80:	ldr	r3, [r0, #56]	; 0x38
     e82:	cbnz	r3, e8e <FsBaseFile::isOpen() const+0xe>
     e84:	ldr	r0, [r0, #60]	; 0x3c
     e86:	subs	r0, #0
     e88:	it	ne
     e8a:	movne	r0, #1
     e8c:	bx	lr
     e8e:	movs	r0, #1
     e90:	bx	lr

00000e92 <MTPStorage_SD::CloseIndex()>:
  {
     e92:	push	{r3, r4, r5, lr}
    if(index_.isOpen()) {index_.close();}
     e94:	add.w	r5, r0, #184	; 0xb8
  {
     e98:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
     e9a:	mov	r0, r5
     e9c:	bl	e80 <FsBaseFile::isOpen() const>
     ea0:	cbz	r0, ea8 <MTPStorage_SD::CloseIndex()+0x16>
     ea2:	mov	r0, r5
     ea4:	bl	84fc <FsBaseFile::close()>
    index_generated = false;
     ea8:	movs	r3, #0
     eaa:	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
     eae:	str.w	r3, [r4, #424]	; 0x1a8
  }
     eb2:	pop	{r3, r4, r5, pc}

00000eb4 <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     eb4:	ldr	r3, [r0, #56]	; 0x38
     eb6:	cbz	r3, ebe <FsBaseFile::read(void*, unsigned int)+0xa>
     eb8:	mov	r0, r3
     eba:	b.w	6e68 <FatFile::read(void*, unsigned int)>
     ebe:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     ec0:	cbz	r0, ec6 <FsBaseFile::read(void*, unsigned int)+0x12>
     ec2:	b.w	5818 <ExFatFile::read(void*, unsigned int)>
  }
     ec6:	mov.w	r0, #4294967295
     eca:	bx	lr

00000ecc <FsBaseFile::seekSet(unsigned long long)>:
  bool seekSet(uint64_t pos) {
     ecc:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ece:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
     ed0:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ed2:	cbz	r5, ede <FsBaseFile::seekSet(unsigned long long)+0x12>
     ed4:	cbnz	r3, ee8 <FsBaseFile::seekSet(unsigned long long)+0x1c>
     ed6:	mov	r0, r5
  }
     ed8:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     eda:	b.w	7052 <FatFile::seekSet(unsigned long)>
     ede:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
     ee0:	cbz	r0, ee8 <FsBaseFile::seekSet(unsigned long long)+0x1c>
  }
     ee2:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     ee4:	b.w	59c8 <ExFatFile::seekSet(unsigned long long)>
  }
     ee8:	movs	r0, #0
     eea:	pop	{r4, r5}
     eec:	bx	lr

00000eee <MTPStorage_SD::write(char const*, unsigned long)>:
  {
     eee:	push	{r3, lr}
      size_t ret = file_.write(data,bytes);
     ef0:	add.w	r0, r0, #264	; 0x108
     ef4:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     ef8:	pop	{r3, pc}
	...

00000efc <FsFile::FsFile()>:
     efc:	movs	r2, #0
     efe:	mov.w	r1, #1000	; 0x3e8
     f02:	strb	r2, [r0, #12]
     f04:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     f08:	strd	r2, r2, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f0c:	ldr	r2, [pc, #4]	; (f14 <FsFile::FsFile()+0x18>)
     f0e:	str	r2, [r0, #0]
     f10:	bx	lr
     f12:	nop
     f14:	.word	0x20000554

00000f18 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     f18:	ldr	r3, [pc, #16]	; (f2c <FsFile::~FsFile()+0x14>)
     f1a:	push	{r4, lr}
     f1c:	mov	r4, r0
     f1e:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     f22:	bl	84fc <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f26:	mov	r0, r4
     f28:	pop	{r4, pc}
     f2a:	nop
     f2c:	.word	0x2000042c

00000f30 <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     f30:	add.w	r1, r0, r1, lsl #2
     f34:	ldr	r3, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     f36:	ldr.w	r1, [r3, #1152]	; 0x480
     f3a:	push	{lr}
     f3c:	sub	sp, #60	; 0x3c
     f3e:	cbz	r1, f56 <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     f40:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     f42:	add.w	r1, r1, #1096	; 0x448
     f46:	mov	r0, sp
     f48:	str	r3, [sp, #0]
     f4a:	movs	r3, #1
     f4c:	bl	7548 <FatFile::mkdir(FatFile*, char const*, bool)>
     f50:	add	sp, #60	; 0x3c
     f52:	ldr.w	pc, [sp], #4
     f56:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f5a:	cmp	r0, #0
     f5c:	beq.n	f50 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     f5e:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
     f60:	movs	r3, #1
     f62:	add.w	r1, r0, #1096	; 0x448
     f66:	mov	r0, sp
     f68:	bl	6736 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f6c:	b.n	f50 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000f70 <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     f70:	push	{r4, r5, lr}
     f72:	mov	r4, r0
     f74:	sub	sp, #68	; 0x44
     f76:	mov	r5, r1
     f78:	ldr	r0, [pc, #84]	; (fd0 <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     f7a:	mov	r1, r2
     f7c:	str	r2, [sp, #4]
     f7e:	bl	d34 <Print::println(char const*)>
    return m_fVol ? m_fVol->remove(path) :
     f82:	ldr	r2, [sp, #4]
     f84:	add.w	r1, r4, r5, lsl #2
     f88:	ldr	r3, [r1, #84]	; 0x54
     f8a:	ldr.w	r1, [r3, #1152]	; 0x480
     f8e:	cbz	r1, fa8 <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
     f90:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f92:	add	r0, sp, #8
     f94:	str	r3, [sp, #8]
     f96:	movs	r3, #1
     f98:	bl	73ca <FatFile::open(FatVolume*, char const*, int)>
     f9c:	cbz	r0, fa4 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f9e:	add	r0, sp, #8
     fa0:	bl	8444 <FatFile::remove()>
     fa4:	add	sp, #68	; 0x44
     fa6:	pop	{r4, r5, pc}
     fa8:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
     fac:	cmp	r0, #0
     fae:	beq.n	fa4 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fb0:	str	r1, [sp, #56]	; 0x38
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     fb2:	movs	r3, #1
     fb4:	mov	r1, r0
     fb6:	add	r0, sp, #8
     fb8:	bl	5ebe <ExFatFile::open(ExFatVolume*, char const*, int)>
     fbc:	cbnz	r0, fc2 <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
     fbe:	movs	r0, #0
     fc0:	b.n	fa4 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fc2:	add	r0, sp, #8
     fc4:	bl	643c <ExFatFile::remove()>
     fc8:	cmp	r0, #0
     fca:	beq.n	fbe <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     fcc:	b.n	fa4 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fce:	nop
     fd0:	.word	0x20001cf4

00000fd4 <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
     fd4:	add.w	r1, r0, r1, lsl #2
     fd8:	ldr	r3, [r1, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
     fda:	ldr.w	r1, [r3, #1152]	; 0x480
     fde:	push	{lr}
     fe0:	sub	sp, #60	; 0x3c
     fe2:	cbz	r1, ffc <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
     fe4:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fe6:	mov	r0, sp
     fe8:	str	r3, [sp, #0]
     fea:	bl	73ca <FatFile::open(FatVolume*, char const*, int)>
     fee:	cbz	r0, ff6 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     ff0:	mov	r0, sp
     ff2:	bl	70f2 <FatFile::rmdir()>
     ff6:	add	sp, #60	; 0x3c
     ff8:	ldr.w	pc, [sp], #4
     ffc:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    1000:	cmp	r0, #0
    1002:	beq.n	ff6 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1004:	mov	r3, r1
    1006:	str	r1, [sp, #48]	; 0x30
    1008:	mov	r1, r0
    100a:	mov	r0, sp
    100c:	bl	5ebe <ExFatFile::open(ExFatVolume*, char const*, int)>
    1010:	cbnz	r0, 1016 <mSD_Base::sd_rmdir(unsigned long, char*)+0x42>
    1012:	movs	r0, #0
    1014:	b.n	ff6 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    1016:	mov	r0, sp
    1018:	bl	64c8 <ExFatFile::rmdir()>
    101c:	cmp	r0, #0
    101e:	beq.n	1012 <mSD_Base::sd_rmdir(unsigned long, char*)+0x3e>
    1020:	b.n	ff6 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
	...

00001024 <MTPStorage_SD::OpenIndex()>:
  { 
    1024:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
    1026:	add.w	r5, r0, #184	; 0xb8
  { 
    102a:	sub	sp, #84	; 0x54
    102c:	mov	r4, r0
    if(index_.isOpen()) return; // only once
    102e:	mov	r0, r5
    1030:	bl	e80 <FsBaseFile::isOpen() const>
    1034:	cbnz	r0, 1076 <MTPStorage_SD::OpenIndex()+0x52>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    1036:	ldr	r2, [pc, #68]	; (107c <MTPStorage_SD::OpenIndex()+0x58>)
    1038:	movw	r3, #514	; 0x202
    103c:	ldr	r1, [r4, #88]	; 0x58
    103e:	mov	r0, sp
    1040:	bl	8730 <FsVolume::open(char const*, int)>
class Print
    1044:	ldr	r3, [sp, #4]
    1046:	add	r1, sp, #16
    1048:	mov	r0, r5
    104a:	str.w	r3, [r4, #172]	; 0xac
class Stream : public Print
    104e:	ldr	r3, [sp, #8]
    1050:	str.w	r3, [r4, #176]	; 0xb0
    1054:	ldrb.w	r3, [sp, #12]
    1058:	strb.w	r3, [r4, #180]	; 0xb4
    105c:	bl	8526 <FsBaseFile::operator=(FsBaseFile const&)>
    index_=sd_open(0,indexFile, (O_RDWR | O_CREAT));
    1060:	mov	r0, sp
    1062:	bl	f18 <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    1066:	mov	r0, r5
    1068:	bl	e80 <FsBaseFile::isOpen() const>
    106c:	cbnz	r0, 1076 <MTPStorage_SD::OpenIndex()+0x52>
    106e:	ldr	r1, [pc, #16]	; (1080 <MTPStorage_SD::OpenIndex()+0x5c>)
    1070:	ldr	r0, [pc, #16]	; (1084 <MTPStorage_SD::OpenIndex()+0x60>)
    1072:	bl	d34 <Print::println(char const*)>
  }
    1076:	add	sp, #84	; 0x54
    1078:	pop	{r4, r5, pc}
    107a:	nop
    107c:	.word	0x200010f1
    1080:	.word	0x200010ff
    1084:	.word	0x20001cf4

00001088 <MTPStorage_SD::ResetIndex()>:
  void MTPStorage_SD::ResetIndex() {
    1088:	push	{r4, lr}
    108a:	mov	r4, r0
    if(!index_.isOpen()) return;
    108c:	adds	r0, #184	; 0xb8
    108e:	bl	e80 <FsBaseFile::isOpen() const>
    1092:	cbz	r0, 10b4 <MTPStorage_SD::ResetIndex()+0x2c>
    CloseIndex();
    1094:	ldr	r3, [r4, #0]
    1096:	mov	r0, r4
    1098:	ldr	r3, [r3, #64]	; 0x40
    109a:	blx	r3
    all_scanned_ = false;
    109c:	movs	r3, #0
    OpenIndex();
    109e:	mov	r0, r4
    all_scanned_ = false;
    10a0:	strb.w	r3, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    10a4:	mvn.w	r3, #1
    10a8:	str.w	r3, [r4, #420]	; 0x1a4
  }
    10ac:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    10b0:	b.w	1024 <MTPStorage_SD::OpenIndex()>
  }
    10b4:	pop	{r4, pc}

000010b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    10b6:	push	{r0, r1, r4, r5, r6, lr}
    10b8:	mov	r4, r0
    10ba:	mov	r5, r1
    index_.seekSet((sizeof(r) * i));
    10bc:	mov.w	r6, #280	; 0x118
  { OpenIndex();
    10c0:	str	r2, [sp, #4]
    index_.seekSet((sizeof(r) * i));
    10c2:	adds	r4, #184	; 0xb8
  { OpenIndex();
    10c4:	bl	1024 <MTPStorage_SD::OpenIndex()>
    index_.seekSet((sizeof(r) * i));
    10c8:	mul.w	r2, r6, r5
    10cc:	movs	r3, #0
    10ce:	mov	r0, r4
    10d0:	bl	ecc <FsBaseFile::seekSet(unsigned long long)>
    index_.write((char*)&r, sizeof(r));
    10d4:	mov	r2, r6
    10d6:	ldr	r1, [sp, #4]
    10d8:	mov	r0, r4
    10da:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
    10de:	add	sp, #8
    10e0:	pop	{r4, r5, r6, pc}

000010e2 <MTPStorage_SD::AppendIndexRecord(Record const&)>:
  { uint32_t new_record = index_entries_++;
    10e2:	push	{r4, lr}
    10e4:	ldr.w	r4, [r0, #424]	; 0x1a8
    10e8:	mov	r2, r1
    10ea:	adds	r1, r4, #1
    10ec:	str.w	r1, [r0, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    10f0:	mov	r1, r4
    10f2:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    10f6:	mov	r0, r4
    10f8:	pop	{r4, pc}
	...

000010fc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
    index_generated = true;
    10fc:	movs	r3, #1
    sd_remove(0,indexFile);
    10fe:	ldr	r2, [pc, #88]	; (1158 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    1100:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    1102:	push	{r4, r5, r6, r7, lr}
    1104:	mov	r4, r0
    index_generated = true;
    1106:	strb.w	r3, [r0, #428]	; 0x1ac
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    110a:	sub	sp, #284	; 0x11c
    sd_remove(0,indexFile);
    110c:	adds	r0, #4
    110e:	bl	f70 <mSD_Base::sd_remove(unsigned long, char const*)>
    index_entries_ = 0;
    1112:	movs	r5, #0
    num_storage = sd_getFSCount();
    1114:	ldr	r3, [r4, #4]
      r.parent = 0xFFFFFFFFUL; // 
    1116:	mov.w	r6, #4294967295
      strcpy(r.name, "/");
    111a:	ldr	r7, [pc, #64]	; (115c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x60>)
    num_storage = sd_getFSCount();
    111c:	str.w	r3, [r4, #408]	; 0x198
    index_entries_ = 0;
    1120:	str.w	r5, [r4, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    1124:	ldr.w	r3, [r4, #408]	; 0x198
    1128:	cmp	r5, r3
    112a:	blt.n	1130 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x34>
  }
    112c:	add	sp, #284	; 0x11c
    112e:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    1130:	movs	r3, #0
      strcpy(r.name, "/");
    1132:	mov	r1, r7
    1134:	add	r0, sp, #24
      r.store = ii; // 
    1136:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    113a:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    113c:	adds	r5, #1
      r.sibling = 0;
    113e:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    1142:	movs	r3, #1
    1144:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    1148:	bl	eac4 <strcpy>
      AppendIndexRecord(r);
    114c:	mov	r1, sp
    114e:	mov	r0, r4
    1150:	bl	10e2 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    1154:	b.n	1124 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x28>
    1156:	nop
    1158:	.word	0x200010f1
    115c:	.word	0x20000d93

00001160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    1160:	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    1162:	mov.w	r7, #280	; 0x118
  {
    1166:	mov	r4, r1
    1168:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    116a:	movs	r1, #0
    116c:	mov	r2, r7
  {
    116e:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    1170:	bl	9fbc <memset>
    if (i > index_entries_) 
    1174:	ldr.w	r3, [r4, #424]	; 0x1a8
    1178:	cmp	r3, r6
    117a:	bcc.n	119a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3a>
    OpenIndex();
    117c:	mov	r0, r4
    index_.seekSet(sizeof(ret) * i);
    117e:	adds	r4, #184	; 0xb8
    OpenIndex();
    1180:	bl	1024 <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    1184:	mul.w	r2, r7, r6
    1188:	movs	r3, #0
    118a:	mov	r0, r4
    118c:	bl	ecc <FsBaseFile::seekSet(unsigned long long)>
    index_.read((char *)&ret, sizeof(ret));
    1190:	mov	r2, r7
    1192:	mov	r1, r5
    1194:	mov	r0, r4
    1196:	bl	eb4 <FsBaseFile::read(void*, unsigned int)>
  }
    119a:	mov	r0, r5
    119c:	pop	{r3, r4, r5, r6, r7, pc}

0000119e <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    119e:	push	{r4, r5, lr}
    11a0:	mov	r4, r0
    11a2:	sub	sp, #284	; 0x11c
    { if (next_ == 0) return 0;
    11a4:	ldr.w	r5, [r4, #432]	; 0x1b0
    11a8:	cbz	r5, 11c8 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>
      Record r = ReadIndexRecord(ret);
    11aa:	mov	r2, r5
    11ac:	mov	r1, r4
    11ae:	mov	r0, sp
    11b0:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    11b4:	ldrb.w	r3, [r4, #436]	; 0x1b4
    11b8:	cbz	r3, 11ce <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    11ba:	ldr	r3, [sp, #8]
        if (next_ >= index_entries_) next_ = 0;
    11bc:	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    11c0:	ldrb.w	r3, [sp, #24]
    11c4:	cmp	r3, #0
    11c6:	beq.n	11a4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
  }
    11c8:	mov	r0, r5
    11ca:	add	sp, #284	; 0x11c
    11cc:	pop	{r4, r5, pc}
      { next_++;
    11ce:	ldr.w	r1, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    11d2:	ldr.w	r2, [r4, #424]	; 0x1a8
      { next_++;
    11d6:	adds	r1, #1
        if (next_ >= index_entries_) next_ = 0;
    11d8:	cmp	r1, r2
    11da:	it	cc
    11dc:	movcc	r3, r1
    11de:	b.n	11bc <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1e>

000011e0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)>:
  {
    11e0:	push	{r4, r5, lr}
    11e2:	sub	sp, #308	; 0x134
    11e4:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    11e6:	mov	r2, r1
    11e8:	mov	r1, r0
    11ea:	add	r0, sp, #24
  {
    11ec:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    11ee:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    11f2:	add	r1, sp, #48	; 0x30
    11f4:	mov	r0, r5
    11f6:	bl	eac4 <strcpy>
    *parent = r.parent;
    11fa:	ldr	r3, [sp, #320]	; 0x140
    11fc:	ldr	r2, [sp, #24]
    11fe:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1200:	ldrb.w	r3, [sp, #36]	; 0x24
    1204:	cmp	r3, #0
    1206:	bne.n	1284 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xa4>
    1208:	ldr	r3, [sp, #28]
          FS_HOUR(r.cptime),FS_MINUTE(r.cptime),FS_SECOND(r.cptime));
    120a:	ldrh.w	r1, [sp, #42]	; 0x2a
    *store = r.store;
    120e:	ldrh.w	r2, [sp, #38]	; 0x26
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    1212:	and.w	r0, r1, #31
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1216:	str	r3, [r4, #0]
    *store = r.store;
    1218:	ldr	r3, [sp, #324]	; 0x144
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    121a:	lsls	r0, r0, #1
    *store = r.store;
    121c:	strh	r2, [r3, #0]
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
    121e:	ldrh.w	r2, [sp, #40]	; 0x28
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    1222:	str	r0, [sp, #16]
    1224:	ubfx	r0, r1, #5, #6
    1228:	lsrs	r1, r1, #11
  return 1980 + (fatDate >> 9);
    122a:	lsrs	r3, r2, #9
    122c:	str	r0, [sp, #12]
    122e:	str	r1, [sp, #8]
    1230:	and.w	r1, r2, #31
    1234:	ubfx	r2, r2, #5, #4
    1238:	addw	r3, r3, #1980	; 0x7bc
    123c:	str	r1, [sp, #4]
    123e:	movs	r1, #32
    1240:	str	r2, [sp, #0]
    1242:	ldr	r0, [sp, #328]	; 0x148
    1244:	ldr	r2, [pc, #68]	; (128c <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    1246:	bl	e67c <sniprintf>
          FS_HOUR(r.mptime),FS_MINUTE(r.mptime),FS_SECOND(r.mptime));
    124a:	ldrh.w	r1, [sp, #46]	; 0x2e
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
    124e:	ldrh.w	r2, [sp, #44]	; 0x2c
  return 2*(fatTime & 0X1F);
    1252:	and.w	r0, r1, #31
  return 1980 + (fatDate >> 9);
    1256:	lsrs	r3, r2, #9
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
    1258:	lsls	r0, r0, #1
    125a:	addw	r3, r3, #1980	; 0x7bc
    125e:	str	r0, [sp, #16]
    1260:	ubfx	r0, r1, #5, #6
    1264:	lsrs	r1, r1, #11
    1266:	str	r0, [sp, #12]
    1268:	str	r1, [sp, #8]
    126a:	and.w	r1, r2, #31
    126e:	ubfx	r2, r2, #5, #4
    1272:	ldr	r0, [sp, #332]	; 0x14c
    1274:	str	r1, [sp, #4]
    1276:	movs	r1, #32
    1278:	str	r2, [sp, #0]
    127a:	ldr	r2, [pc, #16]	; (128c <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    127c:	bl	e67c <sniprintf>
  }
    1280:	add	sp, #308	; 0x134
    1282:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1284:	mov.w	r3, #4294967295
    1288:	b.n	120a <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0x2a>
    128a:	nop
    128c:	.word	0x200010d7

00001290 <MTPStorage_SD::GetSize(unsigned long)>:
  {
    1290:	push	{lr}
    1292:	sub	sp, #284	; 0x11c
    1294:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    1296:	mov	r1, r0
    1298:	mov	r0, sp
    129a:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    129e:	ldr	r0, [sp, #4]
    12a0:	add	sp, #284	; 0x11c
    12a2:	ldr.w	pc, [sp], #4

000012a6 <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    12a6:	ldr.w	r3, [r0, #320]	; 0x140
  {
    12aa:	push	{r4, r5, r6, lr}
    12ac:	mov	r4, r0
    12ae:	sub	sp, #288	; 0x120
    12b0:	cbz	r3, 131c <MTPStorage_SD::close()+0x76>
    12b2:	ldr	r5, [r3, #28]
    file_.getCreateDateTime(&cpdate,&cptime);
    12b4:	add.w	r6, r4, #264	; 0x108
    12b8:	add.w	r2, sp, #2
    12bc:	mov	r1, sp
    12be:	mov	r0, r6
    12c0:	bl	e4a <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.getCreateDateTime(&mpdate,&mptime);
    12c4:	add.w	r2, sp, #6
    12c8:	add	r1, sp, #4
    12ca:	mov	r0, r6
    12cc:	bl	e4a <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.close();
    12d0:	mov	r0, r6
    12d2:	bl	84fc <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    12d6:	ldr.w	r2, [r4, #420]	; 0x1a4
    12da:	mov	r1, r4
    12dc:	add	r0, sp, #8
    12de:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.cpdate=cpdate;
    12e2:	ldrh.w	r3, [sp]
    WriteIndexRecord(open_file_, r);
    12e6:	add	r2, sp, #8
    12e8:	ldr.w	r1, [r4, #420]	; 0x1a4
    r.cpdate=cpdate;
    12ec:	strh.w	r3, [sp, #24]
    WriteIndexRecord(open_file_, r);
    12f0:	mov	r0, r4
    r.cptime=cptime;
    12f2:	ldrh.w	r3, [sp, #2]
    uint32_t size = (uint32_t) file_.size();
    12f6:	str	r5, [sp, #12]
    r.cptime=cptime;
    12f8:	strh.w	r3, [sp, #26]
    r.mpdate=mpdate;
    12fc:	ldrh.w	r3, [sp, #4]
    1300:	strh.w	r3, [sp, #28]
    r.mptime=mptime;
    1304:	ldrh.w	r3, [sp, #6]
    1308:	strh.w	r3, [sp, #30]
    WriteIndexRecord(open_file_, r);
    130c:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    1310:	mvn.w	r3, #1
    1314:	str.w	r3, [r4, #420]	; 0x1a4
  }
    1318:	add	sp, #288	; 0x120
    131a:	pop	{r4, r5, r6, pc}
    131c:	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    1320:	cmp	r5, #0
    1322:	beq.n	12b4 <MTPStorage_SD::close()+0xe>
  uint64_t fileSize() const {return m_validLength;}
    1324:	ldr	r5, [r5, #16]
    1326:	b.n	12b4 <MTPStorage_SD::close()+0xe>

00001328 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    1328:	push	{r4, r5, r6, lr}
    132a:	sub	sp, #280	; 0x118
    132c:	mov	r6, r0
    132e:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    1330:	mov	r2, r1
    1332:	mov	r1, r0
    1334:	mov	r0, sp
  {
    1336:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    1338:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    133c:	ldr	r1, [sp, #0]
    133e:	adds	r3, r1, #1
    1340:	bne.n	1352 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    1342:	ldr	r1, [pc, #64]	; (1384 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1344:	mov	r0, r4
    1346:	bl	eac4 <strcpy>
      return tmp.store;
    134a:	ldrh.w	r0, [sp, #14]
  }
    134e:	add	sp, #280	; 0x118
    1350:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    1352:	mov	r3, r5
    1354:	mov	r2, r4
    1356:	mov	r0, r6
    1358:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    135c:	mov	r0, r4
    135e:	bl	eb80 <strlen>
    1362:	add	r0, r4
    1364:	ldrb.w	r3, [r0, #-1]
    1368:	cmp	r3, #47	; 0x2f
    136a:	beq.n	1376 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    136c:	mov	r2, r5
    136e:	ldr	r1, [pc, #20]	; (1384 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1370:	mov	r0, r4
    1372:	bl	e918 <strlcat>
      strlcat(out, tmp.name,len);
    1376:	mov	r2, r5
    1378:	add	r1, sp, #24
    137a:	mov	r0, r4
    137c:	bl	e918 <strlcat>
    1380:	b.n	134a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    1382:	nop
    1384:	.word	0x20000d93

00001388 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    1388:	push	{r4, r5, r6, r7, lr}
    138a:	subw	sp, sp, #1052	; 0x41c
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    138e:	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    1392:	mov	r4, r0
    1394:	mov	r5, r1
    1396:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1398:	mov	r2, sp
    139a:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    139e:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    13a0:	mov	r6, r0
    Serial.println(oldName);
    13a2:	ldr	r0, [pc, #120]	; (141c <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    13a4:	bl	d34 <Print::println(char const*)>
    Record p1 = ReadIndexRecord(handle);
    13a8:	mov	r2, r5
    13aa:	mov	r1, r4
    13ac:	add	r0, sp, #768	; 0x300
    13ae:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    13b2:	mov.w	r2, #256	; 0x100
    13b6:	add	r1, sp, #792	; 0x318
    13b8:	add	r0, sp, #512	; 0x200
    13ba:	bl	e95e <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    13be:	mov.w	r2, #256	; 0x100
    13c2:	mov	r1, r7
    13c4:	add	r0, sp, #792	; 0x318
    13c6:	bl	e95e <strlcpy>
    WriteIndexRecord(handle, p1);
    13ca:	add	r2, sp, #768	; 0x300
    13cc:	mov	r1, r5
    13ce:	mov	r0, r4
    13d0:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    13d4:	mov.w	r3, #256	; 0x100
    13d8:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    13da:	add.w	r6, r4, r6, lsl #2
    13de:	add.w	r2, sp, r3
    13e2:	mov	r0, r4
    13e4:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    13e8:	add	r1, sp, #256	; 0x100
    13ea:	ldr	r0, [pc, #48]	; (141c <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    13ec:	bl	d34 <Print::println(char const*)>
    13f0:	ldr	r0, [r6, #88]	; 0x58
    13f2:	add	r2, sp, #256	; 0x100
    13f4:	mov	r1, sp
    13f6:	bl	d9a <FsVolume::rename(char const*, char const*)>
    if (sd_rename(store,oldName,newName)) return true;
    13fa:	mov	r6, r0
    13fc:	cbnz	r0, 1414 <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    13fe:	mov.w	r2, #256	; 0x100
    1402:	add	r1, sp, #512	; 0x200
    1404:	add	r0, sp, #792	; 0x318
    1406:	bl	e95e <strlcpy>
    WriteIndexRecord(handle, p1);
    140a:	add	r2, sp, #768	; 0x300
    140c:	mov	r1, r5
    140e:	mov	r0, r4
    1410:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1414:	mov	r0, r6
    1416:	addw	sp, sp, #1052	; 0x41c
    141a:	pop	{r4, r5, r6, r7, pc}
    141c:	.word	0x20001cf4

00001420 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    1420:	ldr.w	r3, [r0, #420]	; 0x1a4
    1424:	cmp	r3, r1
  {
    1426:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    142a:	mov	r4, r0
    142c:	sub	sp, #336	; 0x150
    142e:	mov	r6, r1
    1430:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    1432:	bne.n	143c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    1434:	ldr.w	r3, [r0, #416]	; 0x1a0
    1438:	cmp	r3, r2
    143a:	beq.n	1494 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    143c:	add.w	r8, r4, #264	; 0x108
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    1440:	mov.w	r3, #256	; 0x100
    1444:	add	r2, sp, #80	; 0x50
    1446:	mov	r1, r6
    1448:	mov	r0, r4
    144a:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    144e:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    1450:	mov	r0, r8
    1452:	bl	e80 <FsBaseFile::isOpen() const>
    1456:	cbz	r0, 145e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    1458:	mov	r0, r8
    145a:	bl	84fc <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    145e:	add.w	r7, r4, r7, lsl #2
    1462:	add	r2, sp, #80	; 0x50
    1464:	mov	r3, r5
    1466:	mov	r0, sp
    1468:	ldr	r1, [r7, #88]	; 0x58
    146a:	bl	8730 <FsVolume::open(char const*, int)>
    146e:	ldr	r3, [sp, #4]
    1470:	add	r1, sp, #16
    1472:	mov	r0, r8
    1474:	str.w	r3, [r4, #252]	; 0xfc
    1478:	ldr	r3, [sp, #8]
    147a:	str.w	r3, [r4, #256]	; 0x100
    147e:	ldrb.w	r3, [sp, #12]
    1482:	strb.w	r3, [r4, #260]	; 0x104
    1486:	bl	8526 <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    148a:	mov	r0, sp
    148c:	bl	f18 <FsFile::~FsFile()>
    mode_ = mode;
    1490:	strd	r5, r6, [r4, #416]	; 0x1a0
  }
    1494:	add	sp, #336	; 0x150
    1496:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000149a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    149a:	push	{r4, r5, r6, lr}
    149c:	mov	r4, r0
    149e:	mov	r6, r2
    14a0:	mov	r5, r3
    OpenFileByIndex(handle);
    14a2:	movs	r2, #0
    file_.seekSet(pos);
    14a4:	add.w	r4, r4, #264	; 0x108
    OpenFileByIndex(handle);
    14a8:	bl	1420 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    file_.seekSet(pos);
    14ac:	mov	r2, r6
    14ae:	movs	r3, #0
    14b0:	mov	r0, r4
    14b2:	bl	ecc <FsBaseFile::seekSet(unsigned long long)>
    file_.read(out,bytes);
    14b6:	ldr	r2, [sp, #16]
    14b8:	mov	r1, r5
    14ba:	mov	r0, r4
    14bc:	bl	eb4 <FsBaseFile::read(void*, unsigned int)>
  }
    14c0:	pop	{r4, r5, r6, pc}

000014c2 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    14c2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    14c6:	cmp.w	r2, #4294967295
    14ca:	ite	ne
    14cc:	movne	r8, r2
    14ce:	moveq	r8, r1
  {
    14d0:	sub.w	sp, sp, #816	; 0x330
    14d4:	mov	r4, r0
    14d6:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    14d8:	mov	r2, r8
    14da:	mov	r1, r0
    14dc:	add	r0, sp, #256	; 0x100
  {
    14de:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    14e0:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    14e4:	mov.w	r2, #256	; 0x100
    14e8:	ldr	r1, [sp, #840]	; 0x348
    14ea:	add	r0, sp, #560	; 0x230
    14ec:	bl	e95e <strlcpy>
    r.store = p.store;
    14f0:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.sibling = p.child;
    14f4:	ldr	r2, [sp, #260]	; 0x104
    ret = p.child = AppendIndexRecord(r);
    14f6:	add	r1, sp, #536	; 0x218
    r.store = p.store;
    14f8:	strh.w	r3, [sp, #550]	; 0x226
    r.child = 0;
    14fc:	movs	r3, #0
    ret = p.child = AppendIndexRecord(r);
    14fe:	mov	r0, r4
    r.sibling = p.child;
    1500:	str	r2, [sp, #544]	; 0x220
    r.child = 0;
    1502:	str	r3, [sp, #540]	; 0x21c
    r.parent = parent;
    1504:	str.w	r8, [sp, #536]	; 0x218
    r.isdir = folder;
    1508:	strb.w	r7, [sp, #548]	; 0x224
    r.mpdate = 0;
    150c:	strd	r3, r3, [sp, #552]	; 0x228
    r.scanned = 1;
    1510:	movs	r3, #1
    1512:	strb.w	r3, [sp, #549]	; 0x225
    ret = p.child = AppendIndexRecord(r);
    1516:	bl	10e2 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    151a:	add	r2, sp, #256	; 0x100
    ret = p.child = AppendIndexRecord(r);
    151c:	mov	r5, r0
    151e:	str	r0, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    1520:	mov	r1, r8
    1522:	mov	r0, r4
    1524:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    1528:	cbz	r7, 154c <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x8a>
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    152a:	mov	r2, sp
    152c:	mov	r1, r5
    152e:	mov.w	r3, #256	; 0x100
    1532:	mov	r0, r4
    1534:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_mkdir(store,filename);
    1538:	mov	r2, sp
    153a:	mov	r1, r6
    153c:	adds	r0, r4, #4
    153e:	bl	f30 <mSD_Base::sd_mkdir(unsigned long, char*)>
  }
    1542:	mov	r0, r5
    1544:	add.w	sp, sp, #816	; 0x330
    1548:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, (O_RDWR | O_CREAT));
    154c:	movw	r2, #514	; 0x202
    1550:	mov	r1, r5
    1552:	mov	r0, r4
    1554:	bl	1420 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    1558:	b.n	1542 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x80>

0000155a <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    155a:	ldrb.w	r3, [r0, #428]	; 0x1ac
    155e:	cbnz	r3, 1564 <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    1560:	b.w	10fc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    1564:	bx	lr

00001566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    1566:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    156a:	cmp.w	r2, #4294967295
    156e:	ite	ne
    1570:	movne	r6, r2
    1572:	moveq	r6, r1
    1574:	sub.w	sp, sp, #564	; 0x234
    Record record = ReadIndexRecord(i);
    1578:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    157a:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    157c:	mov	r2, r6
    157e:	mov	r0, sp
    1580:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    1584:	ldrb.w	r3, [sp, #12]
    1588:	cmp	r3, #0
    158a:	beq.n	1684 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
    158c:	ldrb.w	r5, [sp, #13]
    1590:	cmp	r5, #0
    1592:	bne.n	1684 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
      if (!file_.isOpen()) return;
    1594:	add.w	r8, r4, #264	; 0x108
      OpenFileByIndex(i);
    1598:	mov	r0, r4
    159a:	mov	r2, r5
    159c:	mov	r1, r6
    159e:	bl	1420 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    15a2:	mov	r0, r8
    15a4:	bl	e80 <FsBaseFile::isOpen() const>
    15a8:	cmp	r0, #0
    15aa:	beq.n	1684 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    15ac:	mov	r9, r5
    FsFile tmpFile;
    15ae:	add	r0, sp, #280	; 0x118
    15b0:	add.w	r7, r4, #344	; 0x158
    15b4:	bl	efc <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    15b8:	movs	r2, #0
    15ba:	mov	r1, r8
    15bc:	add	r0, sp, #296	; 0x128
    15be:	bl	85fc <FsBaseFile::openNext(FsBaseFile*, int)>
    15c2:	ldr	r3, [sp, #284]	; 0x11c
    15c4:	add	r1, sp, #296	; 0x128
    15c6:	mov	r0, r7
    15c8:	str.w	r3, [r4, #332]	; 0x14c
    15cc:	ldr	r3, [sp, #288]	; 0x120
    15ce:	str.w	r3, [r4, #336]	; 0x150
    15d2:	ldrb.w	r3, [sp, #292]	; 0x124
    15d6:	strb.w	r3, [r4, #340]	; 0x154
    15da:	bl	8526 <FsBaseFile::operator=(FsBaseFile const&)>
        child_=file_.openNextFile();
    15de:	add	r0, sp, #280	; 0x118
    15e0:	bl	f18 <FsFile::~FsFile()>
        if(!child_.isOpen()) break;
    15e4:	mov	r0, r7
    15e6:	bl	e80 <FsBaseFile::isOpen() const>
    15ea:	cmp	r0, #0
    15ec:	beq.n	1672 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
        r.store = record.store;
    15ee:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    15f2:	mov	r0, r7
        r.parent = i;
    15f4:	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    15f6:	strh.w	r3, [sp, #294]	; 0x126
        r.sibling = sibling;
    15fa:	str	r5, [sp, #288]	; 0x120
    15fc:	bl	e5e <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    1600:	strb.w	r0, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1604:	cbnz	r0, 165a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf4>
    return m_fFile ? m_fFile->fileSize() :
    1606:	ldr.w	r3, [r4, #400]	; 0x190
    160a:	cbz	r3, 164e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xe8>
    160c:	ldr	r3, [r3, #28]
        child_.getName(r.name,MAX_FILENAME_LEN);
    160e:	mov.w	r2, #256	; 0x100
    1612:	add	r1, sp, #304	; 0x130
    1614:	mov	r0, r7
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1616:	str	r3, [sp, #284]	; 0x11c
        r.scanned = false;
    1618:	strb.w	r9, [sp, #293]	; 0x125
        child_.getName(r.name,MAX_FILENAME_LEN);
    161c:	bl	c96 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        child_.getCreateDateTime(&r.cpdate, &r.cptime);
    1620:	add.w	r2, sp, #298	; 0x12a
    1624:	add	r1, sp, #296	; 0x128
    1626:	mov	r0, r7
    1628:	bl	e4a <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    162c:	ldr.w	r0, [r4, #400]	; 0x190
    1630:	cbz	r0, 165e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf8>
    1632:	add.w	r2, sp, #302	; 0x12e
    1636:	add	r1, sp, #300	; 0x12c
    1638:	bl	742e <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
        sibling = AppendIndexRecord(r);
    163c:	add	r1, sp, #280	; 0x118
    163e:	mov	r0, r4
    1640:	bl	10e2 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1644:	mov	r5, r0
        child_.close();
    1646:	mov	r0, r7
    1648:	bl	84fc <FsBaseFile::close()>
      }
    164c:	b.n	15ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    164e:	ldr.w	r3, [r4, #404]	; 0x194
           m_xFile ? m_xFile->fileSize() : 0;
    1652:	cmp	r3, #0
    1654:	beq.n	160e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    1656:	ldr	r3, [r3, #16]
    1658:	b.n	160e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    165a:	movs	r3, #0
    165c:	b.n	160e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    165e:	ldr.w	r0, [r4, #404]	; 0x194
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    1662:	cmp	r0, #0
    1664:	beq.n	163c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    1666:	add.w	r2, sp, #302	; 0x12e
    166a:	add	r1, sp, #300	; 0x12c
    166c:	bl	5752 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    1670:	b.n	163c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
      record.scanned = true;
    1672:	movs	r3, #1
      WriteIndexRecord(i, record);
    1674:	mov	r2, sp
    1676:	mov	r1, r6
    1678:	mov	r0, r4
      record.scanned = true;
    167a:	strb.w	r3, [sp, #13]
      record.child = sibling;
    167e:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    1680:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1684:	add.w	sp, sp, #564	; 0x234
    1688:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000168c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    168c:	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    168e:	cmp.w	r2, #4294967295
    1692:	it	eq
    1694:	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    1696:	sub	sp, #288	; 0x120
    1698:	mov	r4, r0
      ScanDir(store, parent);
    169a:	str	r2, [sp, #4]
    169c:	bl	1566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    16a0:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    16a2:	ldr	r2, [sp, #4]
    16a4:	mov	r1, r4
    16a6:	add	r0, sp, #8
      follow_sibling_ = true;
    16a8:	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    16ac:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    16b0:	ldr	r3, [sp, #12]
    16b2:	str.w	r3, [r4, #432]	; 0x1b0
  }
    16b6:	add	sp, #288	; 0x120
    16b8:	pop	{r4, pc}

000016ba <MTPStorage_SD::ScanAll(unsigned long)>:
  { if (all_scanned_) return;
    16ba:	push	{r4, r5, r6, lr}
    16bc:	ldrb.w	r4, [r0, #429]	; 0x1ad
    16c0:	mov	r5, r0
    16c2:	mov	r6, r1
    16c4:	cbnz	r4, 16d8 <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    16c6:	movs	r3, #1
    16c8:	strb.w	r3, [r0, #429]	; 0x1ad
    GenerateIndex(store);
    16cc:	bl	155a <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    16d0:	ldr.w	r3, [r5, #424]	; 0x1a8
    16d4:	cmp	r4, r3
    16d6:	bcc.n	16da <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    16d8:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    16da:	mov	r2, r4
    16dc:	mov	r1, r6
    16de:	mov	r0, r5
    16e0:	adds	r4, #1
    16e2:	bl	1566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    16e6:	b.n	16d0 <MTPStorage_SD::ScanAll(unsigned long)+0x16>

000016e8 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { 
    16e8:	push	{r4, r5, r6, lr}
    16ea:	mov	r5, r2
    16ec:	mov	r4, r0
    16ee:	mov	r6, r1
    GenerateIndex(store);
    16f0:	bl	155a <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    16f4:	cbz	r5, 1704 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1c>
    16f6:	mov	r2, r5
    16f8:	mov	r1, r6
    16fa:	mov	r0, r4
  }
    16fc:	ldmia.w	sp!, {r4, r5, r6, lr}
    1700:	b.w	168c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
      ScanAll(store);
    1704:	mov	r1, r6
    1706:	mov	r0, r4
    1708:	bl	16ba <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    170c:	movs	r3, #1
      follow_sibling_ = false;
    170e:	strb.w	r5, [r4, #436]	; 0x1b4
      next_ = 1;
    1712:	str.w	r3, [r4, #432]	; 0x1b0
  }
    1716:	pop	{r4, r5, r6, pc}

00001718 <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    1718:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    171c:	mov	r4, r1
    171e:	sub.w	sp, sp, #764	; 0x2fc
    1722:	add.w	r1, r0, r1, lsl #2
    1726:	mov	r6, r0
  FsFile f1=sd_open(store,file,O_READ);
    1728:	adds	r7, r0, #4
    172a:	movs	r3, #0
    172c:	add	r0, sp, #8
    172e:	ldr	r1, [r1, #88]	; 0x58
{ 
    1730:	mov	r5, r2
    1732:	bl	8730 <FsVolume::open(char const*, int)>
    1736:	add	r0, sp, #24
    1738:	bl	e5e <FsBaseFile::isDir() const>
  if(f1.isDirectory())
    173c:	cmp	r0, #0
    173e:	beq.n	17e2 <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    1740:	ldr.w	r9, [pc, #172]	; 17f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd8>
    FsFile f2;
    1744:	add	r0, sp, #88	; 0x58
    1746:	bl	efc <FsFile::FsFile()>
    FsFile tmpFile;
    174a:	add	r0, sp, #168	; 0xa8
    174c:	bl	efc <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1750:	movs	r2, #0
    1752:	add	r1, sp, #24
    1754:	add	r0, sp, #184	; 0xb8
    1756:	bl	85fc <FsBaseFile::openNext(FsBaseFile*, int)>
    175a:	ldr	r3, [sp, #172]	; 0xac
class StreamFile : public stream_t, public BaseFile {
    175c:	add	r1, sp, #184	; 0xb8
    175e:	add	r0, sp, #104	; 0x68
    1760:	str	r3, [sp, #92]	; 0x5c
    1762:	ldr	r3, [sp, #176]	; 0xb0
    1764:	str	r3, [sp, #96]	; 0x60
    1766:	ldrb.w	r3, [sp, #180]	; 0xb4
    176a:	strb.w	r3, [sp, #100]	; 0x64
    176e:	bl	8526 <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    1772:	add	r0, sp, #104	; 0x68
    1774:	bl	e80 <FsBaseFile::isOpen() const>
    1778:	mov	r8, r0
    while(f2=f1.openNextFile())
    177a:	add	r0, sp, #168	; 0xa8
    177c:	bl	f18 <FsFile::~FsFile()>
    1780:	cmp.w	r8, #0
    1784:	bne.n	17a4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x8c>
    sd_rmdir(store,file);
    1786:	mov	r2, r5
    1788:	mov	r1, r4
    178a:	mov	r0, r7
    178c:	bl	fd4 <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    1790:	add	r0, sp, #88	; 0x58
    1792:	bl	f18 <FsFile::~FsFile()>
}
    1796:	add	r0, sp, #8
    1798:	bl	f18 <FsFile::~FsFile()>
    179c:	add.w	sp, sp, #764	; 0x2fc
    17a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    17a4:	add.w	r8, sp, #504	; 0x1f8
    17a8:	mov.w	r2, #256	; 0x100
    17ac:	add	r0, sp, #104	; 0x68
    17ae:	mov	r1, r8
    17b0:	bl	c96 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    17b4:	mov	r2, r9
    17b6:	mov.w	r1, #256	; 0x100
    17ba:	mov	r3, r5
    17bc:	add	r0, sp, #248	; 0xf8
    17be:	str.w	r8, [sp]
    17c2:	bl	e67c <sniprintf>
    return BaseFile::isDir();
    17c6:	add	r0, sp, #104	; 0x68
    17c8:	bl	e5e <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    17cc:	add	r2, sp, #248	; 0xf8
    17ce:	mov	r1, r4
    17d0:	cbz	r0, 17da <MTPStorage_SD::removeFile(unsigned long, char*)+0xc2>
    17d2:	mov	r0, r6
    17d4:	bl	1718 <MTPStorage_SD::removeFile(unsigned long, char*)>
    17d8:	b.n	174a <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    17da:	mov	r0, r7
    17dc:	bl	f70 <mSD_Base::sd_remove(unsigned long, char const*)>
    17e0:	b.n	174a <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    sd_remove(store,file);
    17e2:	mov	r2, r5
    17e4:	mov	r1, r4
    17e6:	mov	r0, r7
    17e8:	bl	f70 <mSD_Base::sd_remove(unsigned long, char const*)>
    17ec:	b.n	1796 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7e>
    17ee:	nop
    17f0:	.word	0x200010d1

000017f4 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    17f4:	push	{r4, r5, r6, r7, lr}
    17f6:	subw	sp, sp, #1380	; 0x564
    17fa:	mov	r4, r0
    17fc:	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    17fe:	mov.w	r3, #256	; 0x100
    1802:	add	r2, sp, #280	; 0x118
    1804:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    1808:	mov	r2, r5
    180a:	mov	r1, r4
    180c:	add	r0, sp, #536	; 0x218
    180e:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    1812:	add	r2, sp, #280	; 0x118
    1814:	ldrh.w	r1, [sp, #550]	; 0x226
    1818:	mov	r0, r4
    181a:	bl	1718 <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    181e:	movs	r3, #0
    WriteIndexRecord(object, r);
    1820:	add	r2, sp, #536	; 0x218
    1822:	mov	r1, r5
    1824:	mov	r0, r4
    r.name[0]=0;
    1826:	strb.w	r3, [sp, #560]	; 0x230
    WriteIndexRecord(object, r);
    182a:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    182e:	ldr	r2, [sp, #536]	; 0x218
    1830:	mov	r1, r4
    1832:	add	r0, sp, #816	; 0x330
    1834:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    1838:	ldr	r6, [sp, #820]	; 0x334
    183a:	cmp	r5, r6
    183c:	bne.n	1852 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      t.child = r.sibling;
    183e:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(r.parent, t);
    1840:	add	r2, sp, #816	; 0x330
    1842:	ldr	r1, [sp, #536]	; 0x218
      t.child = r.sibling;
    1844:	str	r3, [sp, #820]	; 0x334
      WriteIndexRecord(is, x);
    1846:	mov	r0, r4
    1848:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    184c:	addw	sp, sp, #1380	; 0x564
    1850:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    1852:	mov	r2, r6
    1854:	mov	r1, r4
    1856:	add.w	r0, sp, #1096	; 0x448
    185a:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    185e:	ldr.w	r7, [sp, #1104]	; 0x450
    1862:	cmp	r5, r7
    1864:	bne.n	1874 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x80>
      x.sibling = r.sibling;
    1866:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(is, x);
    1868:	add.w	r2, sp, #1096	; 0x448
    186c:	mov	r1, r6
      x.sibling = r.sibling;
    186e:	str.w	r3, [sp, #1104]	; 0x450
      WriteIndexRecord(is, x);
    1872:	b.n	1846 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x52>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1874:	mov	r2, r7
    1876:	mov	r1, r4
    1878:	mov	r0, sp
    187a:	mov	r6, r7
    187c:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1880:	mov.w	r2, #280	; 0x118
    1884:	mov	r1, sp
    1886:	add.w	r0, sp, #1096	; 0x448
    188a:	bl	a000 <memcpy>
    188e:	b.n	185e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x6a>

00001890 <MTPStorage_SD::DeleteObject(unsigned long)>:
  {
    1890:	push	{r3, lr}
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    1892:	adds	r3, r1, #1
    1894:	beq.n	189a <MTPStorage_SD::DeleteObject(unsigned long)+0xa>
    1896:	bl	17f4 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    189a:	movs	r0, #1
    189c:	pop	{r3, pc}

0000189e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    189e:	push	{r4, r5, r6, lr}
    18a0:	add.w	r1, r0, r1, lsl #2
    18a4:	sub.w	sp, sp, #2208	; 0x8a0
    18a8:	mov	r5, r0
    18aa:	mov	r6, r3
    18ac:	ldr	r1, [r1, #84]	; 0x54
    18ae:	movs	r3, #0
    18b0:	mov	r0, sp
    18b2:	bl	8730 <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,O_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    18b6:	add	r0, sp, #16
    18b8:	bl	e80 <FsBaseFile::isOpen() const>
    18bc:	mov	r4, r0
    18be:	cbnz	r0, 18d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    18c0:	movw	r0, #690	; 0x2b2
    18c4:	bl	cf8 <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    18c8:	mov	r0, sp
    18ca:	bl	f18 <FsFile::~FsFile()>
    18ce:	mov	r0, r4
    18d0:	add.w	sp, sp, #2208	; 0x8a0
    18d4:	pop	{r4, r5, r6, pc}
    18d6:	add.w	r5, r5, r6, lsl #2
    18da:	movw	r3, #514	; 0x202
    18de:	ldr.w	r2, [sp, #2224]	; 0x8b0
    18e2:	add	r0, sp, #80	; 0x50
    18e4:	ldr	r1, [r5, #84]	; 0x54
    18e6:	bl	8730 <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    18ea:	add	r0, sp, #96	; 0x60
    18ec:	bl	e80 <FsBaseFile::isOpen() const>
    18f0:	mov	r4, r0
    18f2:	cbnz	r0, 190a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c>
    18f4:	add	r0, sp, #16
    18f6:	bl	84fc <FsBaseFile::close()>
    18fa:	movw	r0, #693	; 0x2b5
    18fe:	bl	cf8 <dbgPrint(unsigned short)>
}
    1902:	add	r0, sp, #80	; 0x50
    1904:	bl	f18 <FsFile::~FsFile()>
    1908:	b.n	18c8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    190a:	mov.w	r5, #4294967295
    return BaseFile::available();
    190e:	add	r0, sp, #16
    1910:	bl	dfa <FsBaseFile::available() const>
  while(f1.available()>0)
    1914:	cmp	r0, #0
    1916:	ble.n	1938 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    nd=f1.read(buffer,nbuf);
    1918:	mov.w	r2, #2048	; 0x800
    191c:	add	r1, sp, #160	; 0xa0
    191e:	add	r0, sp, #16
    1920:	bl	eb4 <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    1924:	subs	r5, r0, #0
    1926:	blt.n	1938 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    f2.write(buffer,nd);
    1928:	mov	r2, r5
    192a:	add	r1, sp, #160	; 0xa0
    192c:	add	r0, sp, #96	; 0x60
    192e:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    1932:	cmp.w	r5, #2048	; 0x800
    1936:	bge.n	190e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x70>
  f1.close();
    1938:	add	r0, sp, #16
    193a:	bl	84fc <FsBaseFile::close()>
  f2.close();
    193e:	add	r0, sp, #96	; 0x60
    1940:	bl	84fc <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    1944:	cmp	r5, #0
    1946:	bge.n	1902 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>
    1948:	movw	r0, #705	; 0x2c1
    194c:	movs	r4, #0
    194e:	bl	cf8 <dbgPrint(unsigned short)>
    1952:	b.n	1902 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>

00001954 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    1954:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1958:	sub.w	sp, sp, #1360	; 0x550
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    195c:	cmp.w	r3, #4294967295
    1960:	ite	ne
    1962:	movne	r8, r3
    1964:	moveq	r8, r2
  { 
    1966:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1968:	mov	r2, r1
  { 
    196a:	mov	r7, r1
    Record p1 = ReadIndexRecord(handle);
    196c:	mov	r1, r0
    196e:	add	r0, sp, #520	; 0x208
    1970:	add	r6, sp, #544	; 0x220
    1972:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1976:	mov	r2, r8
    1978:	mov	r1, r4
    197a:	add	r0, sp, #800	; 0x320
    197c:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    1980:	ldrb.w	r5, [sp, #532]	; 0x214
    1984:	cbz	r5, 19ca <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    1986:	ldrh.w	r1, [sp, #534]	; 0x216
    198a:	mov	r2, r7
    198c:	mov	r0, r4
    198e:	adds	r1, #1
    1990:	bl	1566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1994:	ldrb.w	r3, [sp, #532]	; 0x214
    1998:	ldr	r2, [r4, #0]
    199a:	mov	r0, r4
    199c:	subs	r3, #0
    199e:	str	r6, [sp, #0]
    19a0:	ldrh.w	r1, [sp, #814]	; 0x32e
    19a4:	ldr	r5, [r2, #44]	; 0x2c
    19a6:	it	ne
    19a8:	movne	r3, #1
    19aa:	mov	r2, r8
    19ac:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    19ae:	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    19b0:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    19b2:	ldrh.w	r2, [sp, #814]	; 0x32e
    19b6:	ldr	r6, [r3, #84]	; 0x54
    19b8:	mov	r1, r7
    19ba:	mov	r3, r0
    19bc:	mov	r0, r4
    19be:	blx	r6
  }
    19c0:	mov	r0, r5
    19c2:	add.w	sp, sp, #1360	; 0x550
    19c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    19ca:	mov.w	r2, #256	; 0x100
    19ce:	mov	r1, r6
    19d0:	add.w	r0, sp, #1104	; 0x450
    19d4:	bl	e95e <strlcpy>
      r.store = p2.store;
    19d8:	ldrh.w	r3, [sp, #814]	; 0x32e
      newHandle = p2.child = AppendIndexRecord(r);
    19dc:	add.w	r1, sp, #1080	; 0x438
    19e0:	mov	r0, r4
      r.store = p2.store;
    19e2:	strh.w	r3, [sp, #1094]	; 0x446
      r.sibling = p2.child;
    19e6:	ldr	r3, [sp, #804]	; 0x324
      r.child = 0;
    19e8:	str.w	r5, [sp, #1084]	; 0x43c
      r.sibling = p2.child;
    19ec:	str.w	r3, [sp, #1088]	; 0x440
      r.isdir = 0;
    19f0:	strh.w	r5, [sp, #1092]	; 0x444
      r.parent = newParent;
    19f4:	str.w	r8, [sp, #1080]	; 0x438
      newHandle = p2.child = AppendIndexRecord(r);
    19f8:	bl	10e2 <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    19fc:	add	r2, sp, #800	; 0x320
      newHandle = p2.child = AppendIndexRecord(r);
    19fe:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    1a00:	mov	r1, r8
      newHandle = p2.child = AppendIndexRecord(r);
    1a02:	str	r0, [sp, #804]	; 0x324
      WriteIndexRecord(newParent, p2);
    1a04:	mov	r0, r4
    1a06:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1a0a:	add	r2, sp, #8
    1a0c:	mov	r1, r7
    1a0e:	mov.w	r3, #256	; 0x100
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a12:	add	r7, sp, #264	; 0x108
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1a14:	mov	r0, r4
    1a16:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1a1a:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a1c:	mov	r2, r7
    1a1e:	mov	r1, r5
    1a20:	mov.w	r3, #256	; 0x100
    1a24:	mov	r0, r4
    1a26:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    1a2a:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a2c:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1a2e:	mov	r1, r6
    1a30:	adds	r0, r4, #4
    1a32:	str	r7, [sp, #0]
    1a34:	bl	189e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    1a38:	b.n	19c0 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

00001a3a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    1a3a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a3e:	subw	sp, sp, #1644	; 0x66c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    1a42:	cmp.w	r3, #4294967295
    1a46:	ite	ne
    1a48:	movne	r7, r3
    1a4a:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    1a4c:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    1a4e:	mov	r2, r1
    1a50:	mov	r1, r0
    1a52:	add	r0, sp, #520	; 0x208
    1a54:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    1a58:	mov	r2, r7
    1a5a:	mov	r1, r4
    1a5c:	add	r0, sp, #800	; 0x320
  Record p1=ReadIndexRecord(handle);
    1a5e:	ldrh.w	r8, [sp, #534]	; 0x216
  uint32_t iy= 0;
    1a62:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    1a64:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    1a68:	ldr	r6, [sp, #524]	; 0x20c
  while(ix)
    1a6a:	cbnz	r6, 1a82 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    1a6c:	mov	r0, r4
    1a6e:	add	r2, sp, #800	; 0x320
    1a70:	mov	r1, r7
  p2.child=iy;
    1a72:	str	r5, [sp, #804]	; 0x324
  WriteIndexRecord(newHandle,p2);
    1a74:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    1a78:	movs	r0, #1
    1a7a:	addw	sp, sp, #1644	; 0x66c
    1a7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Record px = ReadIndexRecord(ix) ;
    1a82:	mov	r2, r6
    1a84:	mov	r1, r4
    1a86:	add.w	r0, sp, #1080	; 0x438
    1a8a:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    1a8e:	mov.w	r2, #280	; 0x118
    1a92:	add.w	r1, sp, #1080	; 0x438
    1a96:	add.w	r0, sp, #1360	; 0x550
    1a9a:	bl	a000 <memcpy>
    py.store = p2.store;
    1a9e:	ldrh.w	r3, [sp, #814]	; 0x32e
    iy = AppendIndexRecord(py);
    1aa2:	add.w	r1, sp, #1360	; 0x550
    1aa6:	mov	r0, r4
    py.store = p2.store;
    1aa8:	strh.w	r3, [sp, #1374]	; 0x55e
    py.sibling = iy;
    1aac:	str.w	r5, [sp, #1368]	; 0x558
    py.parent = newHandle;
    1ab0:	str.w	r7, [sp, #1360]	; 0x550
    iy = AppendIndexRecord(py);
    1ab4:	bl	10e2 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1ab8:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    1aba:	mov.w	r3, #256	; 0x100
    1abe:	add	r2, sp, #8
    1ac0:	mov	r1, r6
    1ac2:	mov	r0, r4
    1ac4:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    1ac8:	add	r2, sp, #264	; 0x108
    1aca:	mov.w	r3, #256	; 0x100
    1ace:	mov	r1, r5
    1ad0:	mov	r0, r4
    1ad2:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    1ad6:	ldrb.w	r1, [sp, #1372]	; 0x55c
      sd_mkdir(py.store,newfilename);
    1ada:	adds	r0, r4, #4
    1adc:	ldrh.w	r3, [sp, #1374]	; 0x55e
    if(py.isdir) 
    1ae0:	add	r2, sp, #264	; 0x108
    1ae2:	cbz	r1, 1b0c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd2>
      sd_mkdir(py.store,newfilename);
    1ae4:	mov	r1, r3
    1ae6:	bl	f30 <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    1aea:	mov	r2, r6
    1aec:	mov	r1, r8
    1aee:	mov	r0, r4
    1af0:	bl	1566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    1af4:	ldr	r3, [r4, #0]
    1af6:	ldrh.w	r2, [sp, #814]	; 0x32e
    1afa:	mov	r1, r6
    1afc:	ldr.w	r9, [r3, #84]	; 0x54
    1b00:	mov	r0, r4
    1b02:	mov	r3, r5
    1b04:	blx	r9
    ix = px.sibling;
    1b06:	ldr.w	r6, [sp, #1088]	; 0x440
    1b0a:	b.n	1a6a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    1b0c:	str	r2, [sp, #0]
    1b0e:	mov	r1, r8
    1b10:	add	r2, sp, #8
    1b12:	bl	189e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1b16:	b.n	1b06 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xcc>

00001b18 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    1b18:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1b1c:	ldr.w	r8, [sp, #32]
    1b20:	mov	r6, r1
    1b22:	mov	r7, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b24:	mov	r1, r3
    1b26:	mov	r2, r8
    1b28:	str	r3, [sp, #4]
{ // old and new are directory paths
    1b2a:	mov	r5, r0
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b2c:	bl	f30 <mSD_Base::sd_mkdir(unsigned long, char*)>
    1b30:	ldr	r3, [sp, #4]
    1b32:	mov	r4, r0
    1b34:	cbz	r0, 1b4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x32>
    1b36:	mov	r2, r7
    1b38:	mov	r1, r6
    1b3a:	mov	r0, r5
    1b3c:	str.w	r8, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1b40:	add	sp, #8
    1b42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1b46:	b.w	1b5c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b4a:	movw	r0, #715	; 0x2cb
    1b4e:	bl	cf8 <dbgPrint(unsigned short)>
}
    1b52:	mov	r0, r4
    1b54:	add	sp, #8
    1b56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00001b5c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1b5c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b60:	mov	r6, r1
    1b62:	sub.w	sp, sp, #680	; 0x2a8
    1b66:	add.w	r1, r0, r1, lsl #2
    1b6a:	mov	r5, r0
    1b6c:	mov	r8, r3
    1b6e:	add	r0, sp, #8
    1b70:	movs	r3, #0
    1b72:	ldr	r1, [r1, #84]	; 0x54
    1b74:	mov	r7, r2
    1b76:	bl	8730 <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1b7a:	add	r0, sp, #24
    1b7c:	bl	e80 <FsBaseFile::isOpen() const>
    1b80:	mov	r4, r0
    1b82:	cmp	r0, #0
    1b84:	beq.n	1c3a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xde>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1b86:	ldr	r4, [pc, #264]	; (1c90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>)
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1b88:	mov.w	r2, #256	; 0x100
    1b8c:	mov	r1, r7
    1b8e:	add	r0, sp, #168	; 0xa8
    1b90:	bl	e95e <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1b94:	add	r0, sp, #168	; 0xa8
    1b96:	bl	eb80 <strlen>
    1b9a:	add	r3, sp, #168	; 0xa8
    1b9c:	add	r0, r3
    1b9e:	ldrb.w	r3, [r0, #-1]
    1ba2:	cmp	r3, #47	; 0x2f
    1ba4:	beq.n	1bb2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1ba6:	mov.w	r2, #256	; 0x100
    1baa:	mov	r1, r4
    1bac:	add	r0, sp, #168	; 0xa8
    1bae:	bl	e918 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1bb2:	mov.w	r2, #256	; 0x100
    1bb6:	ldr	r1, [sp, #704]	; 0x2c0
    1bb8:	add	r0, sp, #424	; 0x1a8
    1bba:	bl	e95e <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1bbe:	add	r0, sp, #424	; 0x1a8
    1bc0:	bl	eb80 <strlen>
    1bc4:	add	r3, sp, #424	; 0x1a8
    1bc6:	add	r0, r3
    1bc8:	ldrb.w	r3, [r0, #-1]
    1bcc:	cmp	r3, #47	; 0x2f
    1bce:	beq.n	1bdc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1bd0:	mov.w	r2, #256	; 0x100
    1bd4:	mov	r1, r4
    1bd6:	add	r0, sp, #424	; 0x1a8
    1bd8:	bl	e918 <strlcat>
    FsFile tmpFile;
    1bdc:	add	r0, sp, #88	; 0x58
    1bde:	bl	efc <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1be2:	movs	r2, #0
    1be4:	add	r1, sp, #24
    1be6:	add	r0, sp, #104	; 0x68
    1be8:	bl	85fc <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1bec:	add	r0, sp, #104	; 0x68
    1bee:	bl	e80 <FsBaseFile::isOpen() const>
    1bf2:	cmp	r0, #0
    1bf4:	beq.n	1c7a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11e>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1bf6:	mov.w	r2, #256	; 0x100
    1bfa:	add	r1, sp, #168	; 0xa8
    1bfc:	add	r0, sp, #104	; 0x68
    1bfe:	bl	c96 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1c02:	mov.w	r2, #256	; 0x100
    1c06:	add	r1, sp, #424	; 0x1a8
    1c08:	add	r0, sp, #104	; 0x68
    1c0a:	bl	c96 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1c0e:	add	r0, sp, #104	; 0x68
    1c10:	bl	e5e <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c14:	add	r3, sp, #424	; 0x1a8
    1c16:	add	r2, sp, #168	; 0xa8
    1c18:	mov	r1, r6
    1c1a:	str	r3, [sp, #0]
    1c1c:	mov	r3, r8
        if(f2.isDirectory())
    1c1e:	cbz	r0, 1c52 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c20:	mov	r0, r5
    1c22:	bl	1b18 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1c26:	cbnz	r0, 1c72 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1c28:	movw	r0, #738	; 0x2e2
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c2c:	bl	cf8 <dbgPrint(unsigned short)>
    }
    1c30:	add	r0, sp, #88	; 0x58
    1c32:	movs	r4, #0
    1c34:	bl	f18 <FsFile::~FsFile()>
    1c38:	b.n	1c42 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1c3a:	movw	r0, #718	; 0x2ce
    1c3e:	bl	cf8 <dbgPrint(unsigned short)>
}
    1c42:	add	r0, sp, #8
    1c44:	bl	f18 <FsFile::~FsFile()>
    1c48:	mov	r0, r4
    1c4a:	add.w	sp, sp, #680	; 0x2a8
    1c4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c52:	mov	r0, r5
    1c54:	bl	189e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1c58:	cbnz	r0, 1c60 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x104>
    1c5a:	movw	r0, #742	; 0x2e6
    1c5e:	b.n	1c2c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c60:	add	r2, sp, #168	; 0xa8
    1c62:	mov	r1, r6
    1c64:	mov	r0, r5
    1c66:	bl	f70 <mSD_Base::sd_remove(unsigned long, char const*)>
    1c6a:	cbnz	r0, 1c72 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1c6c:	movw	r0, #743	; 0x2e7
    1c70:	b.n	1c2c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1c72:	add	r0, sp, #88	; 0x58
    1c74:	bl	f18 <FsFile::~FsFile()>
    1c78:	b.n	1b88 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    1c7a:	add	r0, sp, #88	; 0x58
    1c7c:	bl	f18 <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1c80:	mov	r2, r7
    1c82:	mov	r1, r6
    1c84:	mov	r0, r5
    1c86:	bl	fd4 <mSD_Base::sd_rmdir(unsigned long, char*)>
    1c8a:	mov	r4, r0
    1c8c:	b.n	1c42 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
    1c8e:	nop
    1c90:	.word	0x20000d93

00001c94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1c94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c98:	subw	sp, sp, #2764	; 0xacc
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1c9c:	cmp.w	r3, #4294967295
    1ca0:	ite	ne
    1ca2:	movne	r7, r3
    1ca4:	moveq	r7, r2
  { 
    1ca6:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1ca8:	mov	r2, r1
  { 
    1caa:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1cac:	mov	r1, r0
    1cae:	add	r0, sp, #800	; 0x320
    1cb0:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1cb4:	mov	r2, r7
    1cb6:	mov	r1, r4
    1cb8:	add.w	r0, sp, #1080	; 0x438
    1cbc:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1cc0:	ldr	r2, [sp, #800]	; 0x320
    1cc2:	mov	r1, r4
    1cc4:	add.w	r0, sp, #1360	; 0x550
    1cc8:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1ccc:	ldrb.w	r3, [sp, #812]	; 0x32c
    1cd0:	cbz	r3, 1cee <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1cd2:	ldrb.w	r3, [sp, #813]	; 0x32d
    1cd6:	cbnz	r3, 1cee <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1cd8:	mov	r2, r5
    1cda:	ldrh.w	r1, [sp, #814]	; 0x32e
    1cde:	mov	r0, r4
    1ce0:	bl	1566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1ce4:	add	r2, sp, #800	; 0x320
    1ce6:	mov	r1, r5
    1ce8:	mov	r0, r4
    1cea:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1cee:	mov.w	r2, #280	; 0x118
    1cf2:	add	r1, sp, #800	; 0x320
    1cf4:	add.w	r0, sp, #1640	; 0x668
    1cf8:	bl	a000 <memcpy>
    Record p2o = p2;
    1cfc:	mov.w	r2, #280	; 0x118
    1d00:	add.w	r1, sp, #1080	; 0x438
    1d04:	add.w	r0, sp, #1920	; 0x780
    1d08:	bl	a000 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1d0c:	mov.w	r3, #256	; 0x100
    1d10:	add	r2, sp, #288	; 0x120
    1d12:	mov	r1, r5
    1d14:	mov	r0, r4
    1d16:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1d1a:	ldr.w	r8, [sp, #1364]	; 0x554
    1d1e:	cmp	r8, r5
    1d20:	bne.n	1d98 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x104>
        p3.child = p1.sibling;
    1d22:	ldr	r3, [sp, #808]	; 0x328
    uint32_t jx=-1;
    1d24:	mov.w	r8, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1d28:	add.w	r2, sp, #1360	; 0x550
    1d2c:	ldr	r1, [sp, #800]	; 0x320
    1d2e:	mov	r0, r4
        p3.child = p1.sibling;
    1d30:	str.w	r3, [sp, #1364]	; 0x554
        WriteIndexRecord(p1.parent, p3);    
    1d34:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1d38:	ldrh.w	r3, [sp, #1094]	; 0x446
      WriteIndexRecord(handle, p1);
    1d3c:	add	r2, sp, #800	; 0x320
    1d3e:	mov	r1, r5
    1d40:	mov	r0, r4
      p1.store = p2.store;
    1d42:	strh.w	r3, [sp, #814]	; 0x32e
      p1.sibling = p2.child;
    1d46:	ldr.w	r3, [sp, #1084]	; 0x43c
      p1.parent = newParent;
    1d4a:	str	r7, [sp, #800]	; 0x320
      p1.sibling = p2.child;
    1d4c:	str	r3, [sp, #808]	; 0x328
      p2.child = handle;
    1d4e:	str.w	r5, [sp, #1084]	; 0x43c
      WriteIndexRecord(handle, p1);
    1d52:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1d56:	add.w	r2, sp, #1080	; 0x438
    1d5a:	mov	r1, r7
    1d5c:	mov	r0, r4
    1d5e:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1d62:	mov.w	r3, #256	; 0x100
    1d66:	mov	r1, r5
    1d68:	add	r2, sp, #544	; 0x220
    1d6a:	mov	r0, r4
    1d6c:	bl	1328 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1d70:	ldrh.w	r1, [sp, #1654]	; 0x676
    1d74:	ldrh.w	r3, [sp, #1934]	; 0x78e
    1d78:	cmp	r1, r3
    1d7a:	bne.n	1e28 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x194>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1d7c:	add.w	r3, r4, r1, lsl #2
    1d80:	add	r2, sp, #544	; 0x220
    1d82:	add	r1, sp, #288	; 0x120
    1d84:	ldr	r0, [r3, #88]	; 0x58
    1d86:	bl	d9a <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1d8a:	cbz	r0, 1df8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x164>
    1d8c:	movs	r6, #1
  }
    1d8e:	mov	r0, r6
    1d90:	addw	sp, sp, #2764	; 0xacc
    1d94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        px = ReadIndexRecord(jx); 
    1d98:	mov	r2, r8
    1d9a:	mov	r1, r4
    1d9c:	add	r0, sp, #8
    1d9e:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1da2:	mov.w	r2, #280	; 0x118
    1da6:	add	r1, sp, #8
    1da8:	add.w	r0, sp, #2480	; 0x9b0
    1dac:	bl	a000 <memcpy>
        pxo = px;
    1db0:	mov.w	r2, #280	; 0x118
    1db4:	add.w	r1, sp, #2480	; 0x9b0
    1db8:	addw	r0, sp, #2200	; 0x898
    1dbc:	bl	a000 <memcpy>
        while(handle != px.sibling)
    1dc0:	ldr.w	r6, [sp, #2488]	; 0x9b8
    1dc4:	cmp	r6, r5
    1dc6:	bne.n	1ddc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x148>
        px.sibling = p1.sibling;
    1dc8:	ldr	r3, [sp, #808]	; 0x328
        WriteIndexRecord(jx, px);
    1dca:	add.w	r2, sp, #2480	; 0x9b0
    1dce:	mov	r1, r8
    1dd0:	mov	r0, r4
        px.sibling = p1.sibling;
    1dd2:	str.w	r3, [sp, #2488]	; 0x9b8
        WriteIndexRecord(jx, px);
    1dd6:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1dda:	b.n	1d38 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1ddc:	mov	r2, r6
    1dde:	mov	r1, r4
    1de0:	add	r0, sp, #8
    1de2:	mov	r8, r6
    1de4:	bl	1160 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1de8:	mov.w	r2, #280	; 0x118
    1dec:	add	r1, sp, #8
    1dee:	add.w	r0, sp, #2480	; 0x9b0
    1df2:	bl	a000 <memcpy>
          pxo = px;
    1df6:	b.n	1db0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x11c>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1df8:	movw	r0, #579	; 0x243
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1dfc:	bl	cf8 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1e00:	addw	r2, sp, #2200	; 0x898
    1e04:	mov	r1, r8
    1e06:	mov	r0, r4
    1e08:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1e0c:	add.w	r2, sp, #1640	; 0x668
    1e10:	mov	r1, r5
    1e12:	mov	r0, r4
    1e14:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1e18:	add.w	r2, sp, #1920	; 0x780
    1e1c:	mov	r1, r7
    1e1e:	mov	r0, r4
    return false;
    1e20:	movs	r6, #0
    WriteIndexRecord(newParent,p2o);      
    1e22:	bl	10b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1e26:	b.n	1d8e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    else if(!p1o.isdir)
    1e28:	ldrb.w	r2, [sp, #1652]	; 0x674
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e2c:	add.w	r9, r4, #4
    else if(!p1o.isdir)
    1e30:	cbnz	r2, 1e56 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e32:	add	r2, sp, #544	; 0x220
    1e34:	mov	r0, r9
    1e36:	str	r2, [sp, #0]
    1e38:	add	r2, sp, #288	; 0x120
    1e3a:	bl	189e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1e3e:	mov	r6, r0
    1e40:	cbz	r0, 1e50 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1bc>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1e42:	add	r2, sp, #288	; 0x120
    1e44:	ldrh.w	r1, [sp, #1934]	; 0x78e
    1e48:	mov	r0, r9
    1e4a:	bl	f70 <mSD_Base::sd_remove(unsigned long, char const*)>
    1e4e:	b.n	1d8e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    1e50:	movw	r0, #583	; 0x247
    1e54:	b.n	1dfc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e56:	add	r2, sp, #544	; 0x220
    1e58:	mov	r0, r9
    1e5a:	str	r2, [sp, #0]
    1e5c:	add	r2, sp, #288	; 0x120
    1e5e:	bl	1b18 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1e62:	cmp	r0, #0
    1e64:	bne.n	1d8c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf8>
    1e66:	movw	r0, #587	; 0x24b
    1e6a:	b.n	1dfc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>

00001e6c <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1e6c:	push	{r4, r5, r6, lr}
    1e6e:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1e72:	ldr	r4, [pc, #60]	; (1eb0 <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1e74:	ldr	r0, [r5, #88]	; 0x58
    1e76:	bl	d66 <FsVolume::clusterCount() const>
    1e7a:	mov	r1, r0
    1e7c:	mov	r0, r4
    1e7e:	bl	cbc <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1e82:	ldr	r0, [r5, #88]	; 0x58
    1e84:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1e88:	mov	r1, r0
    1e8a:	mov	r0, r4
    1e8c:	bl	cbc <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1e90:	ldr	r6, [r5, #88]	; 0x58
    1e92:	mov	r0, r6
    1e94:	bl	d66 <FsVolume::clusterCount() const>
    1e98:	mov	r4, r0
    1e9a:	mov	r0, r6
    1e9c:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1ea0:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1ea2:	ldr	r0, [r5, #88]	; 0x58
    1ea4:	bl	d48 <FsVolume::bytesPerCluster() const>
    1ea8:	umull	r0, r1, r4, r0
    1eac:	pop	{r4, r5, r6, pc}
    1eae:	nop
    1eb0:	.word	0x20001cf4

00001eb4 <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1eb4:	push	{r4, lr}
    1eb6:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1eb8:	bl	c4ba <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1ebc:	mov	r0, r4
    1ebe:	ldmia.w	sp!, {r4, lr}
    1ec2:	b.w	c4cc <Print::println()>

00001ec6 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1ec6:	push	{r4, lr}
    1ec8:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1eca:	movs	r3, #0
    1ecc:	movs	r2, #10
    1ece:	bl	c51e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1ed2:	mov	r0, r4
    1ed4:	ldmia.w	sp!, {r4, lr}
    1ed8:	b.w	c4cc <Print::println()>

00001edc <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1edc:	push	{r0, r1, r4, lr}
    1ede:	mov	r4, r0
    1ee0:	cbz	r1, 1efc <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    1ee2:	mov	r0, r1
    1ee4:	str	r1, [sp, #4]
    1ee6:	bl	eb80 <strlen>
    1eea:	ldr	r3, [r4, #0]
    1eec:	mov	r2, r0
    1eee:	ldr	r1, [sp, #4]
    1ef0:	ldr	r3, [r3, #4]
    1ef2:	mov	r0, r4
    1ef4:	add	sp, #8
    1ef6:	ldmia.w	sp!, {r4, lr}
    1efa:	bx	r3
    1efc:	add	sp, #8
    1efe:	pop	{r4, pc}

00001f00 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1f00:	b.w	1edc <Print::write(char const*) [clone .isra.0]>

00001f04 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1f04:	push	{r4, lr}
    1f06:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1f08:	bl	1edc <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1f0c:	mov	r0, r4
    1f0e:	ldmia.w	sp!, {r4, lr}
    1f12:	b.w	c4cc <Print::println()>
	...

00001f18 <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    1f18:	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    1f1a:	bl	a4e8 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1f1e:	cmp	r0, #0
    1f20:	beq.n	1f1a <menuGetLine()+0x2>
  Serial.setTimeout(5000);
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1f22:	ldr	r4, [pc, #36]	; (1f48 <menuGetLine()+0x30>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    1f24:	movw	r3, #5000	; 0x1388
    1f28:	ldr	r5, [pc, #32]	; (1f4c <menuGetLine()+0x34>)
    1f2a:	movs	r1, #13
    1f2c:	mov	r2, r4
    1f2e:	str	r3, [r5, #8]
    1f30:	mov	r0, r5
    1f32:	movs	r3, #40	; 0x28
    1f34:	bl	c414 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1f38:	movs	r3, #0
  Serial.println(buffer);
    1f3a:	mov	r1, r4
  buffer[count]=0;
    1f3c:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1f3e:	mov	r0, r5
    1f40:	bl	1f04 <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1f44:	mov	r0, r4
    1f46:	pop	{r3, r4, r5, pc}
    1f48:	.word	0x2001558e
    1f4c:	.word	0x20001cf4

00001f50 <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1f50:	push	{r0, r1, r4, lr}
    1f52:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f54:	bl	1f18 <menuGetLine()>
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1f58:	add	r2, sp, #4
    1f5a:	ldr	r1, [pc, #12]	; (1f68 <menuGetInt32(long*) [clone .isra.0]+0x18>)
    1f5c:	bl	e724 <siscanf>
    1f60:	ldr	r3, [sp, #4]
    1f62:	str	r3, [r4, #0]
  return 1;
}
    1f64:	add	sp, #8
    1f66:	pop	{r4, pc}
    1f68:	.word	0x20001414

00001f6c <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1f6c:	push	{r0, r1, r4, lr}
    1f6e:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f70:	bl	1f18 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1f74:	add	r2, sp, #4
    1f76:	ldr	r1, [pc, #12]	; (1f84 <menuGetInt16(short*) [clone .isra.0]+0x18>)
    1f78:	bl	e724 <siscanf>
    1f7c:	ldr	r3, [sp, #4]
    1f7e:	strh	r3, [r4, #0]
}
    1f80:	add	sp, #8
    1f82:	pop	{r4, pc}
    1f84:	.word	0x20001414

00001f88 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    1f88:	push	{r4, lr}
    1f8a:	sub	sp, #32
    1f8c:	bl	a4e8 <usb_serial_available>

    while(!Serial.available()) ;
    1f90:	cmp	r0, #0
    1f92:	beq.n	1f8c <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1f94:	bl	a55c <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1f98:	uxtb	r0, r0
    if(ch=='d') // set date
    1f9a:	cmp	r0, #100	; 0x64
    1f9c:	bne.n	1fca <menu3()+0x42>
{ char *buffer=menuGetLine();
    1f9e:	bl	1f18 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1fa2:	add	r3, sp, #28
    1fa4:	add	r2, sp, #20
    1fa6:	ldr	r1, [pc, #324]	; (20ec <menu3()+0x164>)
    1fa8:	str	r3, [sp, #8]
    1faa:	add.w	r3, sp, #19
    1fae:	str	r3, [sp, #4]
    1fb0:	add	r3, sp, #24
    1fb2:	str	r3, [sp, #0]
    1fb4:	add.w	r3, sp, #18
    1fb8:	bl	e724 <siscanf>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    1fbc:	ldr	r0, [sp, #20]
    1fbe:	ldrd	r1, r2, [sp, #24]
    1fc2:	bl	3a36 <rtcSetDate(int, int, int)>
    }
    else if(ch=='4')
    { 
      menuGetInt16((int16_t *)&t_4);
    }
}
    1fc6:	add	sp, #32
    1fc8:	pop	{r4, pc}
    else if(ch=='t') // set time
    1fca:	cmp	r0, #52	; 0x34
    1fcc:	bhi.n	1fe2 <menu3()+0x5a>
    1fce:	cmp	r0, #48	; 0x30
    1fd0:	bls.n	1fc6 <menu3()+0x3e>
    1fd2:	subs	r0, #50	; 0x32
    1fd4:	cmp	r0, #2
    1fd6:	bhi.w	20dc <menu3()+0x154>
    1fda:	tbb	[pc, r0]
    1fde:	.short	0x8381
    1fe0:	.byte	0x85
    1fe1:	.byte	0x00
    1fe2:	subs	r0, #97	; 0x61
    1fe4:	uxtb	r3, r0
    1fe6:	cmp	r3, #22
    1fe8:	bhi.n	1fc6 <menu3()+0x3e>
    1fea:	cmp	r0, #22
    1fec:	bhi.n	1fc6 <menu3()+0x3e>
    1fee:	add	r3, pc, #4	; (adr r3, 1ff4 <menu3()+0x6c>)
    1ff0:	ldr.w	pc, [r3, r0, lsl #2]
    1ff4:	.word	0x0000207b
    1ff8:	.word	0x00001fc7
    1ffc:	.word	0x000020b7
    2000:	.word	0x00001fc7
    2004:	.word	0x00001fc7
    2008:	.word	0x0000208f
    200c:	.word	0x000020c3
    2010:	.word	0x00001fc7
    2014:	.word	0x00001fc7
    2018:	.word	0x00001fc7
    201c:	.word	0x00001fc7
    2020:	.word	0x00001fc7
    2024:	.word	0x00001fc7
    2028:	.word	0x00001fc7
    202c:	.word	0x00002087
    2030:	.word	0x00001fc7
    2034:	.word	0x00001fc7
    2038:	.word	0x0000208b
    203c:	.word	0x000020a3
    2040:	.word	0x00002051
    2044:	.word	0x00001fc7
    2048:	.word	0x00001fc7
    204c:	.word	0x000020d9
{ char *buffer=menuGetLine();
    2050:	bl	1f18 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    2054:	add	r3, sp, #28
    2056:	add	r2, sp, #20
    2058:	ldr	r1, [pc, #144]	; (20ec <menu3()+0x164>)
    205a:	str	r3, [sp, #8]
    205c:	add.w	r3, sp, #19
    2060:	str	r3, [sp, #4]
    2062:	add	r3, sp, #24
    2064:	str	r3, [sp, #0]
    2066:	add.w	r3, sp, #18
    206a:	bl	e724 <siscanf>
      rtcSetTime(hour,minutes,seconds);
    206e:	ldr	r0, [sp, #20]
    2070:	ldrd	r1, r2, [sp, #24]
    2074:	bl	3a5a <rtcSetTime(int, int, int)>
    2078:	b.n	1fc6 <menu3()+0x3e>
      menuGetInt32((int32_t *)&t_acq);
    207a:	ldr	r0, [pc, #116]	; (20f0 <menu3()+0x168>)
}
    207c:	add	sp, #32
    207e:	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_on);
    2082:	b.w	1f50 <menuGetInt32(long*) [clone .isra.0]>
    2086:	ldr	r0, [pc, #108]	; (20f4 <menu3()+0x16c>)
    2088:	b.n	207c <menu3()+0xf4>
      menuGetInt32((int32_t *)&t_rep);
    208a:	ldr	r0, [pc, #108]	; (20f8 <menu3()+0x170>)
    208c:	b.n	207c <menu3()+0xf4>
      menuGetInt32((int32_t *)&fsamp);
    208e:	ldr	r4, [pc, #108]	; (20fc <menu3()+0x174>)
    2090:	mov	r0, r4
    2092:	bl	1f50 <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    2096:	ldr	r0, [r4, #0]
}
    2098:	add	sp, #32
    209a:	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    209e:	b.w	c20 <acqModifyFrequency(unsigned long)>
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    20a2:	ldr	r4, [pc, #92]	; (2100 <menu3()+0x178>)
    20a4:	mov	r0, r4
    20a6:	bl	1f6c <menuGetInt16(short*) [clone .isra.0]>
    20aa:	ldrh	r3, [r4, #0]
    20ac:	lsls	r3, r3, #16
    20ae:	bpl.n	1fc6 <menu3()+0x3e>
    20b0:	movs	r3, #0
    20b2:	strh	r3, [r4, #0]
    20b4:	b.n	1fc6 <menu3()+0x3e>
      menuGetInt16((int16_t *)&proc);
    20b6:	ldr	r0, [pc, #76]	; (2104 <menu3()+0x17c>)
}
    20b8:	add	sp, #32
    20ba:	ldmia.w	sp!, {r4, lr}
      menuGetInt16((int16_t *)&t_4);
    20be:	b.w	1f6c <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt16((int16_t *)&again);
    20c2:	ldr	r4, [pc, #68]	; (2108 <menu3()+0x180>)
    20c4:	mov	r0, r4
    20c6:	bl	1f6c <menuGetInt16(short*) [clone .isra.0]>
      setAGain(again);
    20ca:	ldrh	r0, [r4, #0]
    20cc:	sxtb	r0, r0
}
    20ce:	add	sp, #32
    20d0:	ldmia.w	sp!, {r4, lr}
      setAGain(again);
    20d4:	b.w	36d0 <setAGain(signed char)>
      menuGetInt16((int16_t *)&store[0]);
    20d8:	ldr	r0, [pc, #48]	; (210c <menu3()+0x184>)
    20da:	b.n	20b8 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_1);
    20dc:	ldr	r0, [pc, #48]	; (2110 <menu3()+0x188>)
    20de:	b.n	20b8 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_2);
    20e0:	ldr	r0, [pc, #48]	; (2114 <menu3()+0x18c>)
    20e2:	b.n	20b8 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_3);
    20e4:	ldr	r0, [pc, #48]	; (2118 <menu3()+0x190>)
    20e6:	b.n	20b8 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_4);
    20e8:	ldr	r0, [pc, #48]	; (211c <menu3()+0x194>)
    20ea:	b.n	20b8 <menu3()+0x130>
    20ec:	.word	0x20000fd8
    20f0:	.word	0x200022b4
    20f4:	.word	0x200022b8
    20f8:	.word	0x20015384
    20fc:	.word	0x20002298
    2100:	.word	0x2001546e
    2104:	.word	0x200153ca
    2108:	.word	0x200022c0
    210c:	.word	0x200153a0
    2110:	.word	0x2001537c
    2114:	.word	0x200022a8
    2118:	.word	0x200022ac
    211c:	.word	0x200022b0

00002120 <storeConfig(unsigned short*, int)>:

/******************** Parameter ******************************/
void storeConfig(uint16_t *store, int ns)
{ 
  #if defined(__IMXRT1062__)
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    2120:	lsls	r2, r1, #1
    2122:	movs	r1, #0
    2124:	b.w	bb5c <eeprom_write_block>

00002128 <loadConfig(unsigned short*, int)>:
}

void loadConfig(uint16_t *store, int ns)
{
  #if defined(__IMXRT1062__)
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    2128:	lsls	r2, r1, #1
    212a:	movs	r1, #0
    212c:	b.w	b8ac <eeprom_read_block>

00002130 <saveParameters()>:
  #endif
}

void saveParameters(void)
{
  store[1]  = t_acq;
    2130:	ldr	r3, [pc, #96]	; (2194 <saveParameters()+0x64>)
  store[6]  = shift;
  store[7]  = t_1;
  store[8]  = t_2;
  store[9]  = t_3;
  store[10] = t_4;
  store[11] = fsamp/1000;
    2132:	mov.w	r2, #1000	; 0x3e8
  store[1]  = t_acq;
    2136:	ldr	r0, [pc, #96]	; (2198 <saveParameters()+0x68>)
  store[12] = again;
  store[13] = dgain;
  store[14] = 0;
  store[15] = 0;

  storeConfig(store, 16);
    2138:	movs	r1, #16
  store[1]  = t_acq;
    213a:	ldr	r3, [r3, #0]
    213c:	strh	r3, [r0, #2]
  store[2]  = t_on;
    213e:	ldr	r3, [pc, #92]	; (219c <saveParameters()+0x6c>)
    2140:	ldr	r3, [r3, #0]
    2142:	strh	r3, [r0, #4]
  store[3]  = t_off;
    2144:	ldr	r3, [pc, #88]	; (21a0 <saveParameters()+0x70>)
    2146:	ldr	r3, [r3, #0]
    2148:	strh	r3, [r0, #6]
  store[4]  = t_rep;
    214a:	ldr	r3, [pc, #88]	; (21a4 <saveParameters()+0x74>)
    214c:	ldr	r3, [r3, #0]
    214e:	strh	r3, [r0, #8]
  store[5]  = proc;
    2150:	ldr	r3, [pc, #84]	; (21a8 <saveParameters()+0x78>)
    2152:	ldrh	r3, [r3, #0]
    2154:	strh	r3, [r0, #10]
  store[6]  = shift;
    2156:	ldr	r3, [pc, #84]	; (21ac <saveParameters()+0x7c>)
    2158:	ldrh	r3, [r3, #0]
    215a:	strh	r3, [r0, #12]
  store[7]  = t_1;
    215c:	ldr	r3, [pc, #80]	; (21b0 <saveParameters()+0x80>)
    215e:	ldr	r3, [r3, #0]
    2160:	strh	r3, [r0, #14]
  store[8]  = t_2;
    2162:	ldr	r3, [pc, #80]	; (21b4 <saveParameters()+0x84>)
    2164:	ldr	r3, [r3, #0]
    2166:	strh	r3, [r0, #16]
  store[9]  = t_3;
    2168:	ldr	r3, [pc, #76]	; (21b8 <saveParameters()+0x88>)
    216a:	ldr	r3, [r3, #0]
    216c:	strh	r3, [r0, #18]
  store[10] = t_4;
    216e:	ldr	r3, [pc, #76]	; (21bc <saveParameters()+0x8c>)
    2170:	ldr	r3, [r3, #0]
    2172:	strh	r3, [r0, #20]
  store[11] = fsamp/1000;
    2174:	ldr	r3, [pc, #72]	; (21c0 <saveParameters()+0x90>)
    2176:	ldr	r3, [r3, #0]
    2178:	sdiv	r3, r3, r2
    217c:	strh	r3, [r0, #22]
  store[12] = again;
    217e:	ldr	r3, [pc, #68]	; (21c4 <saveParameters()+0x94>)
    2180:	ldrh	r3, [r3, #0]
    2182:	strh	r3, [r0, #24]
  store[13] = dgain;
    2184:	ldr	r3, [pc, #64]	; (21c8 <saveParameters()+0x98>)
    2186:	ldrh	r3, [r3, #0]
    2188:	strh	r3, [r0, #26]
  store[14] = 0;
    218a:	movs	r3, #0
    218c:	strh	r3, [r0, #28]
  store[15] = 0;
    218e:	strh	r3, [r0, #30]
  storeConfig(store, 16);
    2190:	b.w	2120 <storeConfig(unsigned short*, int)>
    2194:	.word	0x200022b4
    2198:	.word	0x200153a0
    219c:	.word	0x200022b8
    21a0:	.word	0x20015380
    21a4:	.word	0x20015384
    21a8:	.word	0x200153ca
    21ac:	.word	0x2001546e
    21b0:	.word	0x2001537c
    21b4:	.word	0x200022a8
    21b8:	.word	0x200022ac
    21bc:	.word	0x200022b0
    21c0:	.word	0x20002298
    21c4:	.word	0x200022c0
    21c8:	.word	0x200153c4

000021cc <menu1(short)>:
{   // have ':'
    21cc:	push	{r4, lr}
    21ce:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    21d0:	bl	a4e8 <usb_serial_available>
    while(!Serial.available()) ;
    21d4:	cmp	r0, #0
    21d6:	beq.n	21d0 <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    21d8:	bl	a55c <usb_serial_getchar>
    ch=Serial.read();
    21dc:	uxtb	r3, r0
    if(ch=='w') 
    21de:	cmp	r3, #119	; 0x77
    21e0:	bne.n	21f2 <menu1(short)+0x26>
    { Serial.println("Save parameters");
    21e2:	ldr	r1, [pc, #36]	; (2208 <menu1(short)+0x3c>)
    21e4:	ldr	r0, [pc, #36]	; (220c <menu1(short)+0x40>)
    21e6:	bl	1f04 <Print::println(char const*) [clone .isra.0]>
      saveParameters();
    21ea:	bl	2130 <saveParameters()>
}
    21ee:	mov	r0, r4
    21f0:	pop	{r4, pc}
    else if(ch=='m') // control monitor (needed for gui)
    21f2:	cmp	r3, #109	; 0x6d
    21f4:	bne.n	21fe <menu1(short)+0x32>
      menuGetInt16((int16_t *)&monitor);
    21f6:	ldr	r0, [pc, #24]	; (2210 <menu1(short)+0x44>)
    21f8:	bl	1f6c <menuGetInt16(short*) [clone .isra.0]>
    21fc:	b.n	21ee <menu1(short)+0x22>
    else if(ch=='c') // transfer internal rtc to external rtc
    21fe:	cmp	r3, #99	; 0x63
    2200:	bne.n	21ee <menu1(short)+0x22>
    { rtcXferTime();
    2202:	bl	3a0c <rtcXferTime()>
    2206:	b.n	21ee <menu1(short)+0x22>
    2208:	.word	0x20000e93
    220c:	.word	0x20001cf4
    2210:	.word	0x200153c8

00002214 <loadParameters()>:
}

uint16_t *loadParameters(void)
{
    2214:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  loadConfig(store,16);
    2218:	ldr	r4, [pc, #228]	; (2300 <loadParameters()+0xec>)
    221a:	movs	r1, #16
    221c:	ldr.w	sl, [pc, #264]	; 2328 <loadParameters()+0x114>
    2220:	mov	r0, r4
    2222:	ldr.w	r9, [pc, #264]	; 232c <loadParameters()+0x118>
    2226:	bl	2128 <loadConfig(unsigned short*, int)>
  if(store[0]==1)
    222a:	ldrh	r3, [r4, #0]
    222c:	ldr.w	lr, [pc, #256]	; 2330 <loadParameters()+0x11c>
    2230:	cmp	r3, #1
    2232:	ldr.w	ip, [pc, #256]	; 2334 <loadParameters()+0x120>
    2236:	ldr	r7, [pc, #204]	; (2304 <loadParameters()+0xf0>)
    2238:	ldr	r6, [pc, #204]	; (2308 <loadParameters()+0xf4>)
    223a:	ldr	r2, [pc, #208]	; (230c <loadParameters()+0xf8>)
    223c:	ldr	r5, [pc, #208]	; (2310 <loadParameters()+0xfc>)
    223e:	ldr	r0, [pc, #212]	; (2314 <loadParameters()+0x100>)
    2240:	ldr	r1, [pc, #212]	; (2318 <loadParameters()+0x104>)
    2242:	bne.n	229a <loadParameters()+0x86>
  {
    t_acq   = store[1];
    2244:	ldrh	r3, [r4, #2]
    2246:	str.w	r3, [sl]
    t_on    = store[2];
    224a:	ldrh	r3, [r4, #4]
    224c:	str.w	r3, [r9]
    t_off   = store[3];
    2250:	ldrh	r3, [r4, #6]
    2252:	str.w	r3, [lr]
    t_rep   = store[4];
    2256:	ldrh	r3, [r4, #8]
    2258:	str.w	r3, [ip]
    proc    = store[5];
    225c:	ldrsh.w	r3, [r4, #10]
    2260:	strh	r3, [r7, #0]
    shift   = store[6];
    2262:	ldrsh.w	r3, [r4, #12]
    2266:	strh	r3, [r6, #0]
    t_1     = store[7];
    2268:	ldrh	r3, [r4, #14]
    226a:	str	r3, [r2, #0]
    t_2     = store[8];
    t_3     = store[9];
    t_4     = store[10];
    fsamp   = store[11]*1000;
    226c:	mov.w	r2, #1000	; 0x3e8
    t_2     = store[8];
    2270:	ldrh	r3, [r4, #16]
    2272:	str	r3, [r5, #0]
    t_3     = store[9];
    2274:	ldrh	r3, [r4, #18]
    2276:	str	r3, [r0, #0]
    t_4     = store[10];
    2278:	ldrh	r3, [r4, #20]
    227a:	str	r3, [r1, #0]
    fsamp   = store[11]*1000;
    227c:	ldrh	r3, [r4, #22]
    227e:	muls	r3, r2
    2280:	ldr	r2, [pc, #152]	; (231c <loadParameters()+0x108>)
    2282:	str	r3, [r2, #0]
    again   = store[12];
    2284:	ldrsh.w	r2, [r4, #24]
    2288:	ldr	r3, [pc, #148]	; (2320 <loadParameters()+0x10c>)
    228a:	strh	r2, [r3, #0]
    dgain   = store[13];
    228c:	ldrsh.w	r2, [r4, #26]
    2290:	ldr	r3, [pc, #144]	; (2324 <loadParameters()+0x110>)
    2292:	strh	r2, [r3, #0]
    store[13] = dgain    = DGAIN;
    store[14] = 0;
    store[15] = 0; 
  }
  return store;
}
    2294:	ldr	r0, [pc, #104]	; (2300 <loadParameters()+0xec>)
    2296:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    store[1]  = t_acq    = T_ACQ;
    229a:	mov.w	r8, #20
    store[0]  = 0;
    229e:	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    22a0:	str.w	r8, [sl]
    22a4:	strh.w	r8, [r4, #2]
    store[2]  = t_on     = T_ON;
    22a8:	mov.w	r8, #60	; 0x3c
    store[0]  = 0;
    22ac:	strh	r3, [r4, #0]
    store[2]  = t_on     = T_ON;
    22ae:	str.w	r8, [r9]
    store[3]  = t_off    = T_OFF;
    22b2:	str.w	r3, [lr]
    store[4]  = t_rep    = T_REP;
    22b6:	str.w	r3, [ip]
    store[5]  = proc     = PROC_MODE;
    22ba:	strh	r3, [r7, #0]
    store[6]  = shift    = SHIFT;
    22bc:	strh	r3, [r6, #0]
    store[7]  = t_1      = T_1;
    22be:	str	r3, [r2, #0]
    store[8]  = t_2      = T_2;
    22c0:	movs	r2, #12
    store[2]  = t_on     = T_ON;
    22c2:	strh.w	r8, [r4, #4]
    store[8]  = t_2      = T_2;
    22c6:	str	r2, [r5, #0]
    22c8:	strh	r2, [r4, #16]
    store[9]  = t_3      = T_3;
    22ca:	str	r2, [r0, #0]
    22cc:	strh	r2, [r4, #18]
    store[10] = t_4      = T_4;
    22ce:	movs	r2, #24
    store[3]  = t_off    = T_OFF;
    22d0:	strh	r3, [r4, #6]
    store[10] = t_4      = T_4;
    22d2:	str	r2, [r1, #0]
    store[11] = (fsamp   = FSAMP)/1000; 
    22d4:	movw	r1, #48000	; 0xbb80
    store[10] = t_4      = T_4;
    22d8:	strh	r2, [r4, #20]
    store[11] = (fsamp   = FSAMP)/1000; 
    22da:	ldr	r2, [pc, #64]	; (231c <loadParameters()+0x108>)
    store[4]  = t_rep    = T_REP;
    22dc:	strh	r3, [r4, #8]
    store[11] = (fsamp   = FSAMP)/1000; 
    22de:	str	r1, [r2, #0]
    22e0:	movs	r2, #48	; 0x30
    store[12] = again    = AGAIN;
    22e2:	ldr	r1, [pc, #60]	; (2320 <loadParameters()+0x10c>)
    store[11] = (fsamp   = FSAMP)/1000; 
    22e4:	strh	r2, [r4, #22]
    store[12] = again    = AGAIN;
    22e6:	movs	r2, #10
    store[5]  = proc     = PROC_MODE;
    22e8:	strh	r3, [r4, #10]
    store[12] = again    = AGAIN;
    22ea:	strh	r2, [r1, #0]
    22ec:	strh	r2, [r4, #24]
    store[13] = dgain    = DGAIN;
    22ee:	ldr	r2, [pc, #52]	; (2324 <loadParameters()+0x110>)
    store[6]  = shift    = SHIFT;
    22f0:	strh	r3, [r4, #12]
    store[7]  = t_1      = T_1;
    22f2:	strh	r3, [r4, #14]
    store[13] = dgain    = DGAIN;
    22f4:	strh	r3, [r2, #0]
    22f6:	strh	r3, [r4, #26]
    store[14] = 0;
    22f8:	strh	r3, [r4, #28]
    store[15] = 0; 
    22fa:	strh	r3, [r4, #30]
    22fc:	b.n	2294 <loadParameters()+0x80>
    22fe:	nop
    2300:	.word	0x200153a0
    2304:	.word	0x200153ca
    2308:	.word	0x2001546e
    230c:	.word	0x2001537c
    2310:	.word	0x200022a8
    2314:	.word	0x200022ac
    2318:	.word	0x200022b0
    231c:	.word	0x20002298
    2320:	.word	0x200022c0
    2324:	.word	0x200153c4
    2328:	.word	0x200022b4
    232c:	.word	0x200022b8
    2330:	.word	0x20015380
    2334:	.word	0x20015384

00002338 <menu2()>:
{   // have '?'
    2338:	push	{r4, lr}
    233a:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    233c:	bl	a4e8 <usb_serial_available>
    while(!Serial.available()) ;
    2340:	cmp	r0, #0
    2342:	beq.n	233c <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2344:	bl	a55c <usb_serial_getchar>
    ch=Serial.read();
    2348:	uxtb	r0, r0
    if(ch=='p') // get parameters
    234a:	cmp	r0, #112	; 0x70
    234c:	bne.w	246a <menu2()+0x132>
      Serial.println();
    2350:	ldr	r0, [pc, #588]	; (25a0 <menu2()+0x268>)
    2352:	bl	c4cc <Print::println()>
      Serial.println(version);
    2356:	ldr	r1, [pc, #588]	; (25a4 <menu2()+0x26c>)
    2358:	ldr	r0, [pc, #580]	; (25a0 <menu2()+0x268>)
    235a:	bl	1f04 <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    235e:	add	r0, sp, #24
    2360:	bl	3a12 <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    2364:	ldrsb.w	r3, [sp, #28]
    2368:	ldrsh.w	r2, [sp, #24]
    236c:	str	r3, [sp, #16]
    236e:	ldrsb.w	r3, [sp, #31]
    2372:	ldr	r1, [pc, #564]	; (25a8 <menu2()+0x270>)
    2374:	str	r3, [sp, #12]
    2376:	ldrsb.w	r3, [sp, #30]
    237a:	ldr	r0, [pc, #548]	; (25a0 <menu2()+0x268>)
    237c:	str	r3, [sp, #8]
    237e:	ldrsb.w	r3, [sp, #29]
    2382:	str	r3, [sp, #4]
    2384:	ldrsb.w	r3, [sp, #27]
    2388:	str	r3, [sp, #0]
    238a:	ldrsb.w	r3, [sp, #26]
    238e:	bl	c504 <Print::printf(char const*, ...)>
      Serial.println(rtcGetTimestamp());
    2392:	bl	3a0e <rtcGetTimestamp()>
    2396:	mov	r1, r0
    2398:	ldr	r0, [pc, #516]	; (25a0 <menu2()+0x268>)
    239a:	bl	1f04 <Print::println(char const*) [clone .isra.0]>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    239e:	ldr	r1, [pc, #524]	; (25ac <menu2()+0x274>)
    23a0:	ldr	r0, [pc, #508]	; (25a0 <menu2()+0x268>)
    23a2:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    23a6:	ldr	r3, [pc, #520]	; (25b0 <menu2()+0x278>)
    23a8:	ldr	r0, [pc, #500]	; (25a0 <menu2()+0x268>)
    23aa:	ldr	r1, [r3, #0]
    23ac:	bl	1ec6 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    23b0:	ldr	r1, [pc, #512]	; (25b4 <menu2()+0x27c>)
    23b2:	ldr	r0, [pc, #492]	; (25a0 <menu2()+0x268>)
    23b4:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    23b8:	ldr	r3, [pc, #508]	; (25b8 <menu2()+0x280>)
    23ba:	ldr	r0, [pc, #484]	; (25a0 <menu2()+0x268>)
    23bc:	ldr	r1, [r3, #0]
    23be:	bl	1ec6 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    23c2:	ldr	r1, [pc, #504]	; (25bc <menu2()+0x284>)
    23c4:	ldr	r0, [pc, #472]	; (25a0 <menu2()+0x268>)
    23c6:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    23ca:	ldr	r3, [pc, #500]	; (25c0 <menu2()+0x288>)
    23cc:	ldr	r0, [pc, #464]	; (25a0 <menu2()+0x268>)
    23ce:	ldr	r1, [r3, #0]
    23d0:	bl	1ec6 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    23d4:	ldr	r1, [pc, #492]	; (25c4 <menu2()+0x28c>)
    23d6:	ldr	r0, [pc, #456]	; (25a0 <menu2()+0x268>)
    23d8:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    23dc:	ldr	r3, [pc, #488]	; (25c8 <menu2()+0x290>)
	size_t println(long n)				{ return print(n) + println(); }
    23de:	ldr	r0, [pc, #448]	; (25a0 <menu2()+0x268>)
    23e0:	ldr	r1, [r3, #0]
    23e2:	bl	c4ba <Print::print(long)>
    23e6:	ldr	r0, [pc, #440]	; (25a0 <menu2()+0x268>)
    23e8:	bl	c4cc <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    23ec:	ldr	r1, [pc, #476]	; (25cc <menu2()+0x294>)
    23ee:	ldr	r0, [pc, #432]	; (25a0 <menu2()+0x268>)
    23f0:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    23f4:	ldr	r3, [pc, #472]	; (25d0 <menu2()+0x298>)
    23f6:	ldr	r0, [pc, #424]	; (25a0 <menu2()+0x268>)
    23f8:	ldrh	r1, [r3, #0]
    23fa:	sxth	r1, r1
    23fc:	bl	1eb4 <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    2400:	ldr	r1, [pc, #464]	; (25d4 <menu2()+0x29c>)
    2402:	ldr	r0, [pc, #412]	; (25a0 <menu2()+0x268>)
    2404:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2408:	ldr	r3, [pc, #460]	; (25d8 <menu2()+0x2a0>)
    240a:	ldr	r0, [pc, #404]	; (25a0 <menu2()+0x268>)
    240c:	ldrh	r1, [r3, #0]
    240e:	sxth	r1, r1
    2410:	bl	1eb4 <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    2414:	ldr	r1, [pc, #452]	; (25dc <menu2()+0x2a4>)
    2416:	ldr	r0, [pc, #392]	; (25a0 <menu2()+0x268>)
    2418:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    241c:	ldr	r3, [pc, #448]	; (25e0 <menu2()+0x2a8>)
    241e:	ldr	r0, [pc, #384]	; (25a0 <menu2()+0x268>)
    2420:	ldrh	r1, [r3, #0]
    2422:	sxth	r1, r1
    2424:	bl	1eb4 <Print::println(int) [clone .isra.0]>
      Serial.print("t_1   (1) = "); Serial.println(t_1);
    2428:	ldr	r1, [pc, #440]	; (25e4 <menu2()+0x2ac>)
    242a:	ldr	r0, [pc, #372]	; (25a0 <menu2()+0x268>)
    242c:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2430:	ldr	r3, [pc, #436]	; (25e8 <menu2()+0x2b0>)
    2432:	ldr	r0, [pc, #364]	; (25a0 <menu2()+0x268>)
    2434:	ldr	r1, [r3, #0]
    2436:	bl	1ec6 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_2   (2) = "); Serial.println(t_2);
    243a:	ldr	r1, [pc, #432]	; (25ec <menu2()+0x2b4>)
    243c:	ldr	r0, [pc, #352]	; (25a0 <menu2()+0x268>)
    243e:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2442:	ldr	r3, [pc, #428]	; (25f0 <menu2()+0x2b8>)
    2444:	ldr	r0, [pc, #344]	; (25a0 <menu2()+0x268>)
    2446:	ldr	r1, [r3, #0]
    2448:	bl	1ec6 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_3   (3) = "); Serial.println(t_3);
    244c:	ldr	r1, [pc, #420]	; (25f4 <menu2()+0x2bc>)
    244e:	ldr	r0, [pc, #336]	; (25a0 <menu2()+0x268>)
    2450:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2454:	ldr	r3, [pc, #416]	; (25f8 <menu2()+0x2c0>)
    2456:	ldr	r0, [pc, #328]	; (25a0 <menu2()+0x268>)
    2458:	ldr	r1, [r3, #0]
    245a:	bl	1ec6 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_4   (4) = "); Serial.println(t_4);
    245e:	ldr	r1, [pc, #412]	; (25fc <menu2()+0x2c4>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    2460:	ldr	r0, [pc, #316]	; (25a0 <menu2()+0x268>)
    2462:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2466:	ldr	r3, [pc, #408]	; (2600 <menu2()+0x2c8>)
    2468:	b.n	24f4 <menu2()+0x1bc>
    else if(ch=='d') // get date
    246a:	cmp	r0, #52	; 0x34
    246c:	bhi.n	24a0 <menu2()+0x168>
    246e:	cmp	r0, #48	; 0x30
    2470:	bls.n	24a8 <menu2()+0x170>
    2472:	subs	r0, #50	; 0x32
    2474:	cmp	r0, #2
    2476:	bhi.n	255e <menu2()+0x226>
    2478:	tbb	[pc, r0]
    247c:	.short	0x7d77
    247e:	.byte	0x83
    247f:	.byte	0x00
    2480:	cmp	r0, #22
    2482:	bhi.n	24a8 <menu2()+0x170>
    2484:	tbb	[pc, r0]
    2488:	.word	0x165f1031
    248c:	.word	0x10654710
    2490:	.word	0x10101010
    2494:	.word	0x103b1010
    2498:	.word	0x25544110
    249c:	.short	0x1010
    249e:	.byte	0x7f
    249f:	.byte	0x00
    24a0:	subs	r0, #97	; 0x61
    24a2:	uxtb	r3, r0
    24a4:	cmp	r3, #22
    24a6:	bls.n	2480 <menu2()+0x148>
        virtual int available() { return usb_serial_available(); }
    24a8:	bl	a4e8 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    24ac:	cmp	r0, #0
    24ae:	bne.n	2598 <menu2()+0x260>
}
    24b0:	add	sp, #32
    24b2:	pop	{r4, pc}
      rtc_get_datetime(&t);
    24b4:	add	r0, sp, #24
    24b6:	bl	3a12 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    24ba:	ldrsb.w	r3, [sp, #27]
    24be:	ldrsh.w	r2, [sp, #24]
    24c2:	str	r3, [sp, #0]
    24c4:	ldr	r1, [pc, #316]	; (2604 <menu2()+0x2cc>)
    24c6:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    24ca:	ldr	r0, [pc, #212]	; (25a0 <menu2()+0x268>)
    24cc:	bl	c504 <Print::printf(char const*, ...)>
    24d0:	b.n	24a8 <menu2()+0x170>
      rtc_get_datetime(&t);
    24d2:	add	r0, sp, #24
    24d4:	bl	3a12 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    24d8:	ldrsb.w	r3, [sp, #31]
    24dc:	ldrsb.w	r2, [sp, #29]
    24e0:	str	r3, [sp, #0]
    24e2:	ldr	r1, [pc, #292]	; (2608 <menu2()+0x2d0>)
    24e4:	ldrsb.w	r3, [sp, #30]
    24e8:	b.n	24ca <menu2()+0x192>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    24ea:	ldr	r1, [pc, #192]	; (25ac <menu2()+0x274>)
    24ec:	ldr	r0, [pc, #176]	; (25a0 <menu2()+0x268>)
    24ee:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    24f2:	ldr	r3, [pc, #188]	; (25b0 <menu2()+0x278>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    24f4:	ldr	r1, [r3, #0]
    24f6:	ldr	r0, [pc, #168]	; (25a0 <menu2()+0x268>)
    24f8:	bl	1ec6 <Print::println(unsigned long) [clone .isra.0]>
    24fc:	b.n	24a8 <menu2()+0x170>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    24fe:	ldr	r1, [pc, #268]	; (260c <menu2()+0x2d4>)
    2500:	ldr	r0, [pc, #156]	; (25a0 <menu2()+0x268>)
    2502:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2506:	ldr	r3, [pc, #176]	; (25b8 <menu2()+0x280>)
    2508:	b.n	24f4 <menu2()+0x1bc>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    250a:	ldr	r1, [pc, #176]	; (25bc <menu2()+0x284>)
    250c:	ldr	r0, [pc, #144]	; (25a0 <menu2()+0x268>)
    250e:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2512:	ldr	r3, [pc, #172]	; (25c0 <menu2()+0x288>)
    2514:	b.n	24f4 <menu2()+0x1bc>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    2516:	ldr	r1, [pc, #172]	; (25c4 <menu2()+0x28c>)
    2518:	ldr	r0, [pc, #132]	; (25a0 <menu2()+0x268>)
    251a:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    251e:	ldr	r3, [pc, #168]	; (25c8 <menu2()+0x290>)
    2520:	ldr	r0, [pc, #124]	; (25a0 <menu2()+0x268>)
    2522:	ldr	r1, [r3, #0]
    2524:	bl	c4ba <Print::print(long)>
    2528:	ldr	r0, [pc, #116]	; (25a0 <menu2()+0x268>)
    252a:	bl	c4cc <Print::println()>
    252e:	b.n	24a8 <menu2()+0x170>
      Serial.print("shift (s) = "); Serial.println(shift);
    2530:	ldr	r1, [pc, #152]	; (25cc <menu2()+0x294>)
    2532:	ldr	r0, [pc, #108]	; (25a0 <menu2()+0x268>)
    2534:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2538:	ldr	r3, [pc, #148]	; (25d0 <menu2()+0x298>)
      Serial.print("again (g) = "); Serial.println(again);
    253a:	ldrh	r1, [r3, #0]
    253c:	sxth	r1, r1
      Serial.print("params[0]  = "); Serial.println(params[0]);
    253e:	ldr	r0, [pc, #96]	; (25a0 <menu2()+0x268>)
    2540:	bl	1eb4 <Print::println(int) [clone .isra.0]>
    2544:	b.n	24a8 <menu2()+0x170>
      Serial.print("proc  (c) = "); Serial.println(proc);
    2546:	ldr	r1, [pc, #140]	; (25d4 <menu2()+0x29c>)
    2548:	ldr	r0, [pc, #84]	; (25a0 <menu2()+0x268>)
    254a:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    254e:	ldr	r3, [pc, #136]	; (25d8 <menu2()+0x2a0>)
    2550:	b.n	253a <menu2()+0x202>
      Serial.print("again (g) = "); Serial.println(again);
    2552:	ldr	r1, [pc, #136]	; (25dc <menu2()+0x2a4>)
    2554:	ldr	r0, [pc, #72]	; (25a0 <menu2()+0x268>)
    2556:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    255a:	ldr	r3, [pc, #132]	; (25e0 <menu2()+0x2a8>)
    255c:	b.n	253a <menu2()+0x202>
      Serial.print("t_1  (1) = "); Serial.println(t_1);
    255e:	ldr	r1, [pc, #176]	; (2610 <menu2()+0x2d8>)
    2560:	ldr	r0, [pc, #60]	; (25a0 <menu2()+0x268>)
    2562:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2566:	ldr	r3, [pc, #128]	; (25e8 <menu2()+0x2b0>)
    2568:	b.n	24f4 <menu2()+0x1bc>
      Serial.print("t_2  (2) = "); Serial.println(t_2);
    256a:	ldr	r1, [pc, #168]	; (2614 <menu2()+0x2dc>)
    256c:	ldr	r0, [pc, #48]	; (25a0 <menu2()+0x268>)
    256e:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2572:	ldr	r3, [pc, #124]	; (25f0 <menu2()+0x2b8>)
    2574:	b.n	24f4 <menu2()+0x1bc>
      Serial.print("t_3  (3) = "); Serial.println(t_3);
    2576:	ldr	r1, [pc, #160]	; (2618 <menu2()+0x2e0>)
    2578:	ldr	r0, [pc, #36]	; (25a0 <menu2()+0x268>)
    257a:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    257e:	ldr	r3, [pc, #120]	; (25f8 <menu2()+0x2c0>)
    2580:	b.n	24f4 <menu2()+0x1bc>
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    2582:	ldr	r1, [pc, #152]	; (261c <menu2()+0x2e4>)
    2584:	b.n	2460 <menu2()+0x128>
    { uint16_t *params=loadParameters();
    2586:	bl	2214 <loadParameters()>
    258a:	mov	r4, r0
      Serial.print("params[0]  = "); Serial.println(params[0]);
    258c:	ldr	r1, [pc, #144]	; (2620 <menu2()+0x2e8>)
    258e:	ldr	r0, [pc, #16]	; (25a0 <menu2()+0x268>)
    2590:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2594:	ldrh	r1, [r4, #0]
    2596:	b.n	253e <menu2()+0x206>
        virtual int read() { return usb_serial_getchar(); }
    2598:	bl	a55c <usb_serial_getchar>
    259c:	b.n	24a8 <menu2()+0x170>
    259e:	nop
    25a0:	.word	0x20001cf4
    25a4:	.word	0x20001086
    25a8:	.word	0x20000ea3
    25ac:	.word	0x20000ec9
    25b0:	.word	0x200022b4
    25b4:	.word	0x20000ed6
    25b8:	.word	0x200022b8
    25bc:	.word	0x20000ee3
    25c0:	.word	0x20015384
    25c4:	.word	0x20000ef0
    25c8:	.word	0x20002298
    25cc:	.word	0x20000efd
    25d0:	.word	0x2001546e
    25d4:	.word	0x20000f0a
    25d8:	.word	0x200153ca
    25dc:	.word	0x20000f17
    25e0:	.word	0x200022c0
    25e4:	.word	0x20000f24
    25e8:	.word	0x2001537c
    25ec:	.word	0x20000f31
    25f0:	.word	0x200022a8
    25f4:	.word	0x20000f3e
    25f8:	.word	0x200022ac
    25fc:	.word	0x20000f4b
    2600:	.word	0x200022b0
    2604:	.word	0x20000f58
    2608:	.word	0x20000f72
    260c:	.word	0x20000f8d
    2610:	.word	0x20000f9a
    2614:	.word	0x20000fa6
    2618:	.word	0x20000fb2
    261c:	.word	0x20000fbe
    2620:	.word	0x20000fca

00002624 <menu(short)>:
{
    2624:	push	{r3, r4, r5, lr}
    2626:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    2628:	bl	a4e8 <usb_serial_available>
  if(Serial.available())
    262c:	cmp	r0, #0
    262e:	beq.n	26ec <menu(short)+0xc8>
        virtual int read() { return usb_serial_getchar(); }
    2630:	bl	a55c <usb_serial_getchar>
    char ch=Serial.read();
    2634:	uxtb	r1, r0
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    2636:	cmp	r1, #115	; 0x73
    2638:	bne.n	264c <menu(short)+0x28>
    263a:	movs	r4, #0
    263c:	ldr	r1, [pc, #176]	; (26f0 <menu(short)+0xcc>)
    263e:	ldr	r0, [pc, #180]	; (26f4 <menu(short)+0xd0>)
    2640:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    2644:	bl	370c <adcStatus()>
	size_t print(char c)				{ return write((uint8_t)c); }
    2648:	ldr	r5, [pc, #168]	; (26f4 <menu(short)+0xd0>)
    264a:	b.n	26e4 <menu(short)+0xc0>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    264c:	cmp	r1, #101	; 0x65
    264e:	beq.n	26a8 <menu(short)+0x84>
    2650:	bhi.n	267e <menu(short)+0x5a>
    2652:	cmp	r1, #63	; 0x3f
    2654:	beq.n	26ca <menu(short)+0xa6>
    2656:	bhi.n	2674 <menu(short)+0x50>
    2658:	cmp	r1, #33	; 0x21
    265a:	beq.n	26d0 <menu(short)+0xac>
    265c:	cmp	r1, #58	; 0x3a
    265e:	beq.n	26c0 <menu(short)+0x9c>
    2660:	ldr	r5, [pc, #144]	; (26f4 <menu(short)+0xd0>)
    2662:	ldr	r3, [r5, #0]
    2664:	mov	r0, r5
    2666:	ldr	r3, [r3, #0]
    2668:	blx	r3
    else {Serial.print(ch); Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    266a:	ldr	r1, [pc, #140]	; (26f8 <menu(short)+0xd4>)
    266c:	mov	r0, r5
    266e:	bl	1f04 <Print::println(char const*) [clone .isra.0]>
    2672:	b.n	2648 <menu(short)+0x24>
    2674:	cmp	r1, #98	; 0x62
    2676:	bne.n	2660 <menu(short)+0x3c>
    else if(ch=='b') {reboot();}
    2678:	bl	248 <reboot()>
    267c:	b.n	2648 <menu(short)+0x24>
    267e:	cmp	r1, #114	; 0x72
    2680:	beq.n	26b4 <menu(short)+0x90>
    2682:	cmp	r1, #120	; 0x78
    2684:	beq.n	26ba <menu(short)+0x96>
    2686:	cmp	r1, #109	; 0x6d
    2688:	bne.n	2660 <menu(short)+0x3c>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    268a:	ldr	r5, [pc, #112]	; (26fc <menu(short)+0xd8>)
    268c:	ldr	r1, [pc, #112]	; (2700 <menu(short)+0xdc>)
    268e:	ldrh	r3, [r5, #0]
    2690:	ldr	r0, [pc, #96]	; (26f4 <menu(short)+0xd0>)
    2692:	rsb	r3, r3, #1
    2696:	strh	r3, [r5, #0]
    2698:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    269c:	ldrsh.w	r1, [r5]
    26a0:	ldr	r0, [pc, #80]	; (26f4 <menu(short)+0xd0>)
    26a2:	bl	c4ba <Print::print(long)>
    26a6:	b.n	2648 <menu(short)+0x24>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    26a8:	ldr	r1, [pc, #88]	; (2704 <menu(short)+0xe0>)
    26aa:	movs	r4, #5
    26ac:	ldr	r0, [pc, #68]	; (26f4 <menu(short)+0xd0>)
    26ae:	bl	1f00 <Print::print(char const*) [clone .isra.0]>
    26b2:	b.n	2648 <menu(short)+0x24>
    else if(ch=='r') {resetUSB();}
    26b4:	bl	218 <resetUSB()>
    26b8:	b.n	2648 <menu(short)+0x24>
    else if(ch=='x') {powerDown();}
    26ba:	bl	2d40 <powerDown()>
    26be:	b.n	2648 <menu(short)+0x24>
    else if(ch==':') status=menu1(status); 
    26c0:	mov	r0, r4
    26c2:	bl	21cc <menu1(short)>
    26c6:	mov	r4, r0
    26c8:	b.n	2648 <menu(short)+0x24>
    else if(ch=='?') menu2(); 
    26ca:	bl	2338 <menu2()>
    26ce:	b.n	2648 <menu(short)+0x24>
    else if(ch=='!') menu3(); 
    26d0:	bl	1f88 <menu3()>
    26d4:	b.n	2648 <menu(short)+0x24>
    26d6:	bl	a55c <usb_serial_getchar>
	size_t print(char c)				{ return write((uint8_t)c); }
    26da:	ldr	r3, [r5, #0]
    26dc:	uxtb	r1, r0
    26de:	ldr	r0, [pc, #20]	; (26f4 <menu(short)+0xd0>)
    26e0:	ldr	r3, [r3, #0]
    26e2:	blx	r3
        virtual int available() { return usb_serial_available(); }
    26e4:	bl	a4e8 <usb_serial_available>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    26e8:	cmp	r0, #0
    26ea:	bne.n	26d6 <menu(short)+0xb2>
}
    26ec:	mov	r0, r4
    26ee:	pop	{r3, r4, r5, pc}
    26f0:	.word	0x20000e38
    26f4:	.word	0x20001cf4
    26f8:	.word	0x20000e52
    26fc:	.word	0x200153c8
    2700:	.word	0x20000e47
    2704:	.word	0x20000e40

00002708 <getStore()>:

uint16_t *getStore(void) {return store;}
    2708:	ldr	r0, [pc, #0]	; (270c <getStore()+0x4>)
    270a:	bx	lr
    270c:	.word	0x200153a0

00002710 <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    2710:	ldr	r3, [pc, #16]	; (2724 <getDataCount()+0x14>)
    2712:	ldr	r0, [r3, #0]
    2714:	ldr	r3, [pc, #16]	; (2728 <getDataCount()+0x18>)
    2716:	ldr	r3, [r3, #0]
    2718:	subs	r0, r0, r3
    271a:	it	mi
    271c:	addmi.w	r0, r0, #4608	; 0x1200
    2720:	uxth	r0, r0
    2722:	bx	lr
    2724:	.word	0x200141e8
    2728:	.word	0x200141e4

0000272c <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    272c:	ldr	r3, [pc, #4]	; (2734 <queue_isBusy()+0x8>)
    272e:	ldr	r0, [r3, #0]
    2730:	bx	lr
    2732:	nop
    2734:	.word	0x2000dfd4

00002738 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    2738:	push	{r3, r4, r5, r6, r7, lr}
//    while(queue_busy); 
    queue_busy=1;
    273a:	movs	r4, #1
    273c:	ldr	r5, [pc, #72]	; (2788 <pushData(unsigned long*)+0x50>)
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    273e:	ldr	r6, [pc, #76]	; (278c <pushData(unsigned long*)+0x54>)
    2740:	mov.w	r7, #4608	; 0x1200
    queue_busy=1;
    2744:	str	r4, [r5, #0]
  {
    2746:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2748:	ldr	r3, [r6, #0]
    274a:	ldr	r2, [pc, #68]	; (2790 <pushData(unsigned long*)+0x58>)
    274c:	add	r3, r4
    274e:	ldr	r2, [r2, #0]
    2750:	sdiv	r0, r3, r7
    2754:	mls	r3, r7, r0, r3
    2758:	cmp	r3, r2
    275a:	bne.n	2762 <pushData(unsigned long*)+0x2a>
    275c:	movs	r0, #0
    275e:	str	r0, [r5, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    2760:	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    2762:	ldr	r3, [pc, #48]	; (2794 <pushData(unsigned long*)+0x5c>)
    2764:	mov.w	r2, #512	; 0x200
    2768:	ldr	r0, [r6, #0]
    276a:	add.w	r0, r3, r0, lsl #9
    276e:	bl	a000 <memcpy>
    tail = (tail+1)%MAXBUF;
    2772:	ldr	r3, [r6, #0]
    return 1; // signal success.
    2774:	mov	r0, r4
    tail = (tail+1)%MAXBUF;
    2776:	adds	r3, #1
    2778:	sdiv	r2, r3, r7
    277c:	mls	r3, r7, r2, r3
    2780:	str	r3, [r6, #0]
    queue_busy=0;
    2782:	movs	r3, #0
    2784:	str	r3, [r5, #0]
    return 1; // signal success.
    2786:	b.n	2760 <pushData(unsigned long*)+0x28>
    2788:	.word	0x2000dfd4
    278c:	.word	0x200141e8
    2790:	.word	0x200141e4
    2794:	.word	0x70000000

00002798 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    2798:	push	{r4, r5, r6, lr}
//    while(queue_busy); 
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    279a:	ldr	r3, [pc, #64]	; (27dc <pullData(unsigned long*)+0x44>)
    queue_busy=1;
    279c:	movs	r4, #1
    279e:	ldr	r6, [pc, #64]	; (27e0 <pullData(unsigned long*)+0x48>)
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    27a0:	ldr	r5, [pc, #64]	; (27e4 <pullData(unsigned long*)+0x4c>)
    queue_busy=1;
    27a2:	str	r4, [r6, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    27a4:	ldr	r2, [r5, #0]
    27a6:	ldr	r3, [r3, #0]
    27a8:	cmp	r2, r3
    27aa:	bne.n	27b2 <pullData(unsigned long*)+0x1a>
    27ac:	movs	r0, #0
    27ae:	str	r0, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    head = (head+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    27b0:	pop	{r4, r5, r6, pc}
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    27b2:	ldr	r3, [pc, #52]	; (27e8 <pullData(unsigned long*)+0x50>)
    27b4:	mov.w	r2, #512	; 0x200
    27b8:	ldr	r1, [r5, #0]
    27ba:	add.w	r1, r3, r1, lsl #9
    27be:	bl	a000 <memcpy>
    head = (head+1)%MAXBUF;
    27c2:	ldr	r3, [r5, #0]
    27c4:	mov.w	r2, #4608	; 0x1200
    return 1; // signal success.
    27c8:	mov	r0, r4
    head = (head+1)%MAXBUF;
    27ca:	adds	r3, #1
    27cc:	sdiv	r1, r3, r2
    27d0:	mls	r3, r2, r1, r3
    27d4:	str	r3, [r5, #0]
    queue_busy=0;
    27d6:	movs	r3, #0
    27d8:	str	r3, [r6, #0]
    return 1; // signal success.
    27da:	b.n	27b0 <pullData(unsigned long*)+0x18>
    27dc:	.word	0x200141e8
    27e0:	.word	0x2000dfd4
    27e4:	.word	0x200141e4
    27e8:	.word	0x70000000

000027ec <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
{
    27ec:	push	{r0, r1, r4, r5, r6, lr}
    27ee:	mov	r6, r0
    rtc_get_datetime(&t);
    27f0:	mov	r0, sp
{
    27f2:	mov	r5, r2
    27f4:	mov	r4, r1
    rtc_get_datetime(&t);
    27f6:	bl	3a12 <rtc_get_datetime(datetime_t*)>
  year -= 1980;
    27fa:	ldrh.w	r2, [sp]
    *date = FS_DATE(t.year,t.month,t.day);
    27fe:	ldrsb.w	r3, [sp, #3]
    2802:	subw	r2, r2, #1980	; 0x7bc
    2806:	uxth	r2, r2
         year << 9 | month << 5 | day;
    2808:	cmp	r2, #127	; 0x7f
    280a:	bhi.n	2856 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    280c:	ldrb.w	r1, [sp, #2]
  return year > 127 || month > 12 || day > 31 ? 0 :
    2810:	cmp	r1, #12
    2812:	bhi.n	2856 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2814:	uxtb	r3, r3
    2816:	cmp	r3, #31
    2818:	bhi.n	2856 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
         year << 9 | month << 5 | day;
    281a:	orr.w	r3, r3, r1, lsl #5
    281e:	orr.w	r3, r3, r2, lsl #9
    2822:	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    2824:	ldrb.w	r1, [sp, #5]
    2828:	ldrsb.w	r2, [sp, #7]
         hour << 11 | minute << 5 | second >> 1;
    282c:	cmp	r1, #23
    *date = FS_DATE(t.year,t.month,t.day);
    282e:	strh	r3, [r6, #0]
    2830:	bhi.n	285a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    *time = FS_TIME(t.hour,t.min,t.sec);
    2832:	ldrb.w	r3, [sp, #6]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    2836:	cmp	r3, #59	; 0x3b
    2838:	bhi.n	285a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    283a:	uxtb	r2, r2
    283c:	cmp	r2, #59	; 0x3b
    283e:	bhi.n	285a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
         hour << 11 | minute << 5 | second >> 1;
    2840:	lsls	r3, r3, #5
    2842:	orr.w	r3, r3, r1, lsl #11
    2846:	orr.w	r3, r3, r2, lsr #1
    284a:	uxth	r3, r3
    284c:	strh	r3, [r4, #0]
    *ms10 = 0;
    284e:	movs	r3, #0
    2850:	strb	r3, [r5, #0]
}
    2852:	add	sp, #8
    2854:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    2856:	movs	r3, #0
    2858:	b.n	2824 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
         hour << 11 | minute << 5 | second >> 1;
    285a:	movs	r3, #0
    285c:	b.n	284c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x60>

0000285e <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    285e:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2860:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    2862:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2864:	cbz	r5, 2870 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    2866:	cbnz	r3, 287a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
    2868:	mov	r0, r5
  }
    286a:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    286c:	b.w	7052 <FatFile::seekSet(unsigned long)>
    2870:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
    2872:	cbz	r0, 287a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    2874:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    2876:	b.w	59c8 <ExFatFile::seekSet(unsigned long long)>
  }
    287a:	pop	{r4, r5}
    287c:	bx	lr

0000287e <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    287e:	movs	r3, #0
    2880:	movs	r2, #10
    2882:	b.w	c51e <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00002886 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2886:	push	{r0, r1, r4, lr}
    2888:	mov	r4, r0
    288a:	cbz	r1, 28a6 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    288c:	mov	r0, r1
    288e:	str	r1, [sp, #4]
    2890:	bl	eb80 <strlen>
    2894:	ldr	r3, [r4, #0]
    2896:	mov	r2, r0
    2898:	ldr	r1, [sp, #4]
    289a:	ldr	r3, [r3, #4]
    289c:	mov	r0, r4
    289e:	add	sp, #8
    28a0:	ldmia.w	sp!, {r4, lr}
    28a4:	bx	r3
    28a6:	add	sp, #8
    28a8:	pop	{r4, pc}

000028aa <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    28aa:	b.w	2886 <Print::write(char const*) [clone .isra.0]>

000028ae <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    28ae:	push	{r4, lr}
    28b0:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    28b2:	bl	2886 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    28b6:	mov	r0, r4
    28b8:	ldmia.w	sp!, {r4, lr}
    28bc:	b.w	c4cc <Print::println()>

000028c0 <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() :
    28c0:	ldr	r3, [r0, #56]	; 0x38
    28c2:	cbz	r3, 28ca <FsBaseFile::sync()+0xa>
    28c4:	mov	r0, r3
    28c6:	b.w	729c <FatFile::sync()>
    28ca:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->sync() : false;
    28cc:	cbz	r0, 28d2 <FsBaseFile::sync()+0x12>
    28ce:	b.w	65fc <ExFatFile::sync()>
  }
    28d2:	bx	lr

000028d4 <timeStamp()>:
{
    28d4:	push	{r4, lr}
    28d6:	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    28d8:	ldr	r4, [pc, #52]	; (2910 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    28da:	add	r0, sp, #16
    28dc:	bl	3a12 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    28e0:	ldrsb.w	r3, [sp, #23]
    28e4:	ldrsh.w	r2, [sp, #16]
    28e8:	mov	r0, r4
    28ea:	str	r3, [sp, #12]
    28ec:	ldrsb.w	r3, [sp, #22]
    28f0:	ldr	r1, [pc, #32]	; (2914 <timeStamp()+0x40>)
    28f2:	str	r3, [sp, #8]
    28f4:	ldrsb.w	r3, [sp, #21]
    28f8:	str	r3, [sp, #4]
    28fa:	ldrsb.w	r3, [sp, #19]
    28fe:	str	r3, [sp, #0]
    2900:	ldrsb.w	r3, [sp, #18]
    2904:	bl	e6e4 <siprintf>
}
    2908:	mov	r0, r4
    290a:	add	sp, #24
    290c:	pop	{r4, pc}
    290e:	nop
    2910:	.word	0x2001553e
    2914:	.word	0x20000cd7

00002918 <headerInit(long, long, long, int)>:
{
    2918:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  memcpy(wav_hdr.rId,"RIFF",4);
    291a:	ldr	r4, [pc, #196]	; (29e0 <headerInit(long, long, long, int)+0xc8>)
  int nbytes=nbits/8;
    291c:	cmp	r2, #0
    291e:	str	r3, [sp, #4]
    2920:	mov	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    2922:	ldr	r3, [pc, #192]	; (29e4 <headerInit(long, long, long, int)+0xcc>)
  int nbytes=nbits/8;
    2924:	it	lt
    2926:	addlt	r5, r2, #7
  wav_hdr.nSamplesPerSec=fsamp;
    2928:	str	r0, [r4, #24]
  wav_hdr.nChannels=nchan;
    292a:	uxth	r6, r1
  memcpy(wav_hdr.rId,"RIFF",4);
    292c:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    292e:	sub.w	r3, r3, #15728640	; 0xf00000
  int nbytes=nbits/8;
    2932:	asrs	r5, r5, #3
  wav_hdr.nBitsPerSamples=nbits;
    2934:	strh	r2, [r4, #34]	; 0x22
  memcpy(wav_hdr.wId,"WAVE",4);
    2936:	subw	r3, r3, #2043	; 0x7fb
  wav_hdr.nChannels=nchan;
    293a:	strh	r6, [r4, #22]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    293c:	muls	r0, r5
  memcpy(wav_hdr.wId,"WAVE",4);
    293e:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    2940:	add.w	r3, r3, #3674210304	; 0xdb000000
  wav_hdr.nBlockAlign=nchan*nbytes;
    2944:	smulbb	r5, r5, r6
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2948:	muls	r1, r0
  memcpy(wav_hdr.fId,"fmt ",4);
    294a:	add.w	r3, r3, #1974272	; 0x1e2000
  strcpy(&wav_hdr.info[0], MAGIC);
    294e:	add.w	r0, r4, #44	; 0x2c
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2952:	str	r1, [r4, #28]
  memcpy(wav_hdr.fId,"fmt ",4);
    2954:	addw	r3, r3, #3087	; 0xc0f
  strcpy(&wav_hdr.info[0], MAGIC);
    2958:	ldr	r1, [pc, #140]	; (29e8 <headerInit(long, long, long, int)+0xd0>)
  wav_hdr.nBlockAlign=nchan*nbytes;
    295a:	strh	r5, [r4, #32]
  memcpy(wav_hdr.fId,"fmt ",4);
    295c:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    295e:	add.w	r3, r3, #1090519040	; 0x41000000
    2962:	subw	r3, r3, #3074	; 0xc02
    2966:	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    296a:	add.w	r3, r3, #218107136	; 0xd000d00
    296e:	add.w	r3, r3, #15859712	; 0xf20000
    2972:	adds	r3, #5
    2974:	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    2976:	mov.w	r3, #504	; 0x1f8
    297a:	str	r3, [r4, #4]
  wav_hdr.fLen = 0x10;
    297c:	movs	r3, #16
    297e:	str	r3, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
    2980:	mov.w	r3, #460	; 0x1cc
    2984:	str	r3, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    2986:	movs	r3, #0
    2988:	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    298c:	movs	r3, #1
    298e:	strh	r3, [r4, #20]
    2990:	ldr	r3, [pc, #88]	; (29ec <headerInit(long, long, long, int)+0xd4>)
    2992:	ldr	r5, [r3, #0]
  strcpy(&wav_hdr.info[0], MAGIC);
    2994:	bl	eac4 <strcpy>
  strcpy(&wav_hdr.info[4], timeStamp());
    2998:	bl	28d4 <timeStamp()>
    299c:	mov	r1, r0
    299e:	add.w	r0, r4, #48	; 0x30
    29a2:	bl	eac4 <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    29a6:	ldr	r2, [sp, #4]
    29a8:	ldr	r1, [pc, #68]	; (29f0 <headerInit(long, long, long, int)+0xd8>)
    29aa:	add.w	r0, r4, #64	; 0x40
    29ae:	bl	e6e4 <siprintf>
  memcpy(&wav_hdr.info[32], &tt,4);
    29b2:	str	r5, [r4, #76]	; 0x4c
  memcpy(&wav_hdr.info[36], getStore(),16*2);
    29b4:	bl	2708 <getStore()>
    29b8:	adds	r4, #80	; 0x50
    29ba:	mov	r3, r0
    29bc:	add.w	r5, r0, #32
    29c0:	ldr	r0, [r3, #0]
    29c2:	adds	r3, #8
    29c4:	ldr.w	r1, [r3, #-4]
    29c8:	mov	r2, r4
    29ca:	cmp	r3, r5
    29cc:	stmia	r2!, {r0, r1}
    29ce:	mov	r4, r2
    29d0:	bne.n	29c0 <headerInit(long, long, long, int)+0xa8>
  strcpy(&wav_hdr.info[68]," end");
    29d2:	ldr	r1, [pc, #32]	; (29f4 <headerInit(long, long, long, int)+0xdc>)
    29d4:	ldr	r0, [pc, #32]	; (29f8 <headerInit(long, long, long, int)+0xe0>)
    29d6:	bl	eac4 <strcpy>
}
    29da:	ldr	r0, [pc, #4]	; (29e0 <headerInit(long, long, long, int)+0xc8>)
    29dc:	add	sp, #12
    29de:	pop	{r4, r5, r6, r7, pc}
    29e0:	.word	0x200143f4
    29e4:	.word	0x46464952
    29e8:	.word	0x20000cc6
    29ec:	.word	0x20015374
    29f0:	.word	0x20000ccb
    29f4:	.word	0x20000cd0
    29f8:	.word	0x20014464

000029fc <headerUpdate(long)>:
  wav_hdr.dLen = nbytes;
    29fc:	ldr	r3, [pc, #12]	; (2a0c <headerUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    29fe:	ldr	r2, [r3, #4]
  wav_hdr.dLen = nbytes;
    2a00:	str.w	r0, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    2a04:	add	r2, r0
}
    2a06:	mov	r0, r3
  wav_hdr.rLen += wav_hdr.dLen;
    2a08:	str	r2, [r3, #4]
}
    2a0a:	bx	lr
    2a0c:	.word	0x200143f4

00002a10 <writeHeader(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    2a10:	ldr	r3, [pc, #76]	; (2a60 <writeHeader(char*)+0x50>)
    2a12:	ldr	r2, [r3, #72]	; 0x48
{ 
    2a14:	push	{r4, r5, r6, lr}
    2a16:	mov	r6, r0
    2a18:	cbz	r2, 2a4e <writeHeader(char*)+0x3e>
    2a1a:	ldr	r4, [r2, #20]
    2a1c:	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    2a1e:	mov	r2, r4
    2a20:	mov	r3, r5
    2a22:	ldr	r1, [pc, #64]	; (2a64 <writeHeader(char*)+0x54>)
    2a24:	ldr	r0, [pc, #64]	; (2a68 <writeHeader(char*)+0x58>)
    2a26:	bl	c504 <Print::printf(char const*, ...)>
  file.seekSet(0);
    2a2a:	movs	r3, #0
    2a2c:	movs	r2, #0
    2a2e:	ldr	r0, [pc, #60]	; (2a6c <writeHeader(char*)+0x5c>)
    2a30:	bl	285e <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write((const uint8_t*)wav_hdr,512);
    2a34:	mov.w	r2, #512	; 0x200
    2a38:	mov	r1, r6
    2a3a:	ldr	r0, [pc, #36]	; (2a60 <writeHeader(char*)+0x50>)
    2a3c:	bl	1f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>
  file.seekSet(fpos);
    2a40:	mov	r2, r4
    2a42:	mov	r3, r5
    2a44:	ldr	r0, [pc, #36]	; (2a6c <writeHeader(char*)+0x5c>)
}
    2a46:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    2a4a:	b.w	285e <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    2a4e:	ldr	r3, [r3, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    2a50:	cbz	r3, 2a58 <writeHeader(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    2a52:	ldrd	r4, r5, [r3]
    2a56:	b.n	2a1e <writeHeader(char*)+0xe>
    2a58:	mov	r4, r3
    2a5a:	mov	r5, r3
    2a5c:	b.n	2a1e <writeHeader(char*)+0xe>
    2a5e:	nop
    2a60:	.word	0x20014bb8
    2a64:	.word	0x20000d6f
    2a68:	.word	0x20001cf4
    2a6c:	.word	0x20014bc8

00002a70 <makeHeader(long*)>:
{
    2a70:	push	{r4, lr}
    2a72:	sub	sp, #32
    2a74:	mov	r4, r0
    rtc_get_datetime(&t);
    2a76:	add	r0, sp, #24
    2a78:	bl	3a12 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    2a7c:	ldrsb.w	r3, [sp, #31]
    2a80:	ldr	r2, [pc, #124]	; (2b00 <makeHeader(long*)+0x90>)
    2a82:	mov	r0, r4
    2a84:	str	r3, [sp, #16]
    2a86:	ldrsb.w	r3, [sp, #30]
    2a8a:	ldr	r1, [pc, #120]	; (2b04 <makeHeader(long*)+0x94>)
    2a8c:	str	r3, [sp, #12]
    2a8e:	ldrsb.w	r3, [sp, #29]
    2a92:	str	r3, [sp, #8]
    2a94:	ldrsb.w	r3, [sp, #27]
    2a98:	str	r3, [sp, #4]
    2a9a:	ldrsb.w	r3, [sp, #26]
    2a9e:	str	r3, [sp, #0]
    2aa0:	ldrsh.w	r3, [sp, #24]
    2aa4:	bl	e6e4 <siprintf>
    header[5] = 20;          // SW version
    2aa8:	movs	r3, #20
    header[8] = NCHAN_ACQ;
    2aaa:	movs	r0, #1
    header[5] = 20;          // SW version
    2aac:	str	r3, [r4, #20]
    header[6] = SerNum;      // serial number
    2aae:	ldr	r3, [pc, #88]	; (2b08 <makeHeader(long*)+0x98>)
    header[8] = NCHAN_ACQ;
    2ab0:	str	r0, [r4, #32]
    header[6] = SerNum;      // serial number
    2ab2:	ldr	r3, [r3, #0]
    2ab4:	str	r3, [r4, #24]
    header[7] = fsamp;
    2ab6:	ldr	r3, [pc, #84]	; (2b0c <makeHeader(long*)+0x9c>)
    2ab8:	ldr	r3, [r3, #0]
    2aba:	str	r3, [r4, #28]
    header[9] = t_acq;
    2abc:	ldr	r3, [pc, #80]	; (2b10 <makeHeader(long*)+0xa0>)
    2abe:	ldr	r3, [r3, #0]
    2ac0:	str	r3, [r4, #36]	; 0x24
    header[10] = t_on;
    2ac2:	ldr	r3, [pc, #80]	; (2b14 <makeHeader(long*)+0xa4>)
    2ac4:	ldr	r3, [r3, #0]
    2ac6:	str	r3, [r4, #40]	; 0x28
    header[11] = t_rep;
    2ac8:	ldr	r3, [pc, #76]	; (2b18 <makeHeader(long*)+0xa8>)
    2aca:	ldr	r3, [r3, #0]
    2acc:	str	r3, [r4, #44]	; 0x2c
    header[12] = proc;
    2ace:	ldr	r3, [pc, #76]	; (2b1c <makeHeader(long*)+0xac>)
    2ad0:	ldrh	r3, [r3, #0]
    2ad2:	sxth	r3, r3
    2ad4:	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    2ad6:	ldr	r3, [pc, #72]	; (2b20 <makeHeader(long*)+0xb0>)
    2ad8:	ldrh	r3, [r3, #0]
    2ada:	sxth	r3, r3
    2adc:	str	r3, [r4, #52]	; 0x34
    header[14] = again;
    2ade:	ldr	r3, [pc, #68]	; (2b24 <makeHeader(long*)+0xb4>)
    2ae0:	ldrh	r3, [r3, #0]
    2ae2:	sxth	r3, r3
    2ae4:	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    2ae6:	ldr	r3, [pc, #64]	; (2b28 <makeHeader(long*)+0xb8>)
    2ae8:	ldrh	r3, [r3, #0]
    2aea:	sxth	r3, r3
    2aec:	str	r3, [r4, #60]	; 0x3c
    2aee:	ldr	r3, [pc, #60]	; (2b2c <makeHeader(long*)+0xbc>)
    2af0:	ldr	r3, [r3, #0]
    header[16] = millis();
    2af2:	str	r3, [r4, #64]	; 0x40
    header[127]=0x55555555;
    2af4:	mov.w	r3, #1431655765	; 0x55555555
    2af8:	str.w	r3, [r4, #508]	; 0x1fc
}
    2afc:	add	sp, #32
    2afe:	pop	{r4, pc}
    2b00:	.word	0x20000cc6
    2b04:	.word	0x20000cd5
    2b08:	.word	0x20007dc8
    2b0c:	.word	0x20002298
    2b10:	.word	0x200022b4
    2b14:	.word	0x200022b8
    2b18:	.word	0x20015384
    2b1c:	.word	0x200153ca
    2b20:	.word	0x2001546e
    2b24:	.word	0x200022c0
    2b28:	.word	0x200153c4
    2b2c:	.word	0x20015374

00002b30 <checkEndOfFile(short)>:
  if(state==RUNNING)
    2b30:	cmp	r0, #2
{ 
    2b32:	push	{r4, lr}
    2b34:	mov	r4, r0
  if(state==RUNNING)
    2b36:	bne.n	2b60 <checkEndOfFile(short)+0x30>
    uint32_t tt = rtc_get();
    2b38:	bl	b744 <rtc_get>
    uint32_t dt1 = tt % t_acq;
    2b3c:	ldr	r3, [pc, #60]	; (2b7c <checkEndOfFile(short)+0x4c>)
    2b3e:	ldr	r2, [r3, #0]
    2b40:	udiv	r3, r0, r2
    2b44:	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2b48:	ldr	r2, [pc, #52]	; (2b80 <checkEndOfFile(short)+0x50>)
    2b4a:	ldr	r1, [r2, #0]
    dta = dt1;
    2b4c:	str	r3, [r2, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2b4e:	cmp	r3, r1
    2b50:	bcs.n	2b60 <checkEndOfFile(short)+0x30>
    if(t_rep>t_on)                      // and if foreseen  check for hibernation
    2b52:	ldr	r3, [pc, #48]	; (2b84 <checkEndOfFile(short)+0x54>)
    2b54:	ldr	r2, [pc, #48]	; (2b88 <checkEndOfFile(short)+0x58>)
    2b56:	ldr	r4, [r3, #0]
    2b58:	ldr	r1, [r2, #0]
    2b5a:	cmp	r4, r1
    2b5c:	bhi.n	2b64 <checkEndOfFile(short)+0x34>
    2b5e:	movs	r4, #3
}
    2b60:	mov	r0, r4
    2b62:	pop	{r4, pc}
      uint32_t dt2 = (tt % t_rep);
    2b64:	ldr	r3, [r3, #0]
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2b66:	ldr	r4, [r2, #0]
      uint32_t dt2 = (tt % t_rep);
    2b68:	udiv	r2, r0, r3
    2b6c:	mls	r0, r3, r2, r0
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2b70:	cmp	r0, r4
    2b72:	ite	cc
    2b74:	movcc	r4, #3
    2b76:	movcs	r4, #4
    2b78:	b.n	2b60 <checkEndOfFile(short)+0x30>
    2b7a:	nop
    2b7c:	.word	0x200022b4
    2b80:	.word	0x2001483c
    2b84:	.word	0x20015384
    2b88:	.word	0x200022b8

00002b8c <newFolder(int)>:

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    2b8c:	ldr	r3, [pc, #12]	; (2b9c <newFolder(int)+0x10>)
    2b8e:	ldr	r2, [r3, #0]
    2b90:	cmp	r2, r0
  d0=d;
    2b92:	itte	ne
    2b94:	strne	r0, [r3, #0]
  return 1;
    2b96:	movne	r0, #1
  if(d==d0) return 0; // same day
    2b98:	moveq	r0, #0
}
    2b9a:	bx	lr
    2b9c:	.word	0x200020c4

00002ba0 <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    2ba0:	push	{r4, lr}
    2ba2:	sub	sp, #24
    2ba4:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2ba6:	add	r0, sp, #16
    2ba8:	bl	3a12 <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    2bac:	ldrsb.w	r1, [sp, #21]
    2bb0:	mov	r0, r1
    2bb2:	bl	2b8c <newFolder(int)>
    2bb6:	cbz	r0, 2bf2 <newDirectory(char*)+0x52>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    2bb8:	ldrsb.w	r3, [sp, #19]
    2bbc:	mov	r0, r4
    2bbe:	ldr	r2, [pc, #56]	; (2bf8 <newDirectory(char*)+0x58>)
    2bc0:	str	r3, [sp, #8]
    2bc2:	ldrsb.w	r3, [sp, #18]
    2bc6:	str	r1, [sp, #12]
    2bc8:	str	r3, [sp, #4]
    2bca:	ldrsh.w	r3, [sp, #16]
    2bce:	ldr	r1, [pc, #44]	; (2bfc <newDirectory(char*)+0x5c>)
    2bd0:	str	r3, [sp, #0]
    2bd2:	ldr	r3, [pc, #44]	; (2c00 <newDirectory(char*)+0x60>)
    2bd4:	ldr	r3, [r3, #0]
    2bd6:	bl	e6e4 <siprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    2bda:	ldr	r0, [pc, #40]	; (2c04 <newDirectory(char*)+0x64>)
    2bdc:	bl	c4cc <Print::println()>
    2be0:	ldr	r1, [pc, #36]	; (2c08 <newDirectory(char*)+0x68>)
    2be2:	ldr	r0, [pc, #32]	; (2c04 <newDirectory(char*)+0x64>)
    2be4:	bl	28aa <Print::print(char const*) [clone .isra.0]>
    2be8:	ldr	r0, [pc, #24]	; (2c04 <newDirectory(char*)+0x64>)
    2bea:	mov	r1, r4
    2bec:	bl	28aa <Print::print(char const*) [clone .isra.0]>
          return 1;   // have new directory
    2bf0:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    2bf2:	add	sp, #24
    2bf4:	pop	{r4, pc}
    2bf6:	nop
    2bf8:	.word	0x2000111b
    2bfc:	.word	0x20000d7a
    2c00:	.word	0x20007dc8
    2c04:	.word	0x20001cf4
    2c08:	.word	0x20001418

00002c0c <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    2c0c:	push	{r4, r5, r6, r7, lr}
    2c0e:	sub	sp, #36	; 0x24
    2c10:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2c12:	add	r0, sp, #24
    2c14:	bl	3a12 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    2c18:	ldr	r3, [pc, #104]	; (2c84 <newFileName(char*)+0x78>)
    2c1a:	ldrsb.w	r7, [sp, #31]
    2c1e:	ldrh	r2, [r3, #0]
    2c20:	ldrsb.w	r6, [sp, #30]
    2c24:	ldrsb.w	r5, [sp, #29]
    2c28:	sxth	r2, r2
    2c2a:	ldrsb.w	r0, [sp, #27]
    2c2e:	ldrsb.w	r1, [sp, #26]
    2c32:	ldrsh.w	r3, [sp, #24]
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2c36:	str	r1, [sp, #0]
    2c38:	strd	r6, r7, [sp, #12]
    2c3c:	strd	r0, r5, [sp, #4]
    if(proc==0)
    2c40:	cbnz	r2, 2c7c <newFileName(char*)+0x70>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2c42:	ldr	r2, [pc, #68]	; (2c88 <newFileName(char*)+0x7c>)
    2c44:	ldr	r1, [pc, #68]	; (2c8c <newFileName(char*)+0x80>)
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2c46:	mov	r0, r4
    2c48:	bl	e6e4 <siprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    2c4c:	ldr	r0, [pc, #64]	; (2c90 <newFileName(char*)+0x84>)
    2c4e:	bl	c4cc <Print::println()>
    2c52:	ldr	r1, [pc, #64]	; (2c94 <newFileName(char*)+0x88>)
    2c54:	ldr	r0, [pc, #56]	; (2c90 <newFileName(char*)+0x84>)
    2c56:	bl	28aa <Print::print(char const*) [clone .isra.0]>
    2c5a:	mov	r1, r4
    2c5c:	ldr	r0, [pc, #48]	; (2c90 <newFileName(char*)+0x84>)
    2c5e:	bl	28aa <Print::print(char const*) [clone .isra.0]>
    Serial.print(" "); Serial.print(micros());
    2c62:	ldr	r1, [pc, #52]	; (2c98 <newFileName(char*)+0x8c>)
    2c64:	ldr	r0, [pc, #40]	; (2c90 <newFileName(char*)+0x84>)
    2c66:	bl	28aa <Print::print(char const*) [clone .isra.0]>
    2c6a:	bl	b4fc <micros>
    2c6e:	mov	r1, r0
    2c70:	ldr	r0, [pc, #28]	; (2c90 <newFileName(char*)+0x84>)
    2c72:	bl	287e <Print::print(unsigned long) [clone .isra.0]>

    return 1;
}
    2c76:	movs	r0, #1
    2c78:	add	sp, #36	; 0x24
    2c7a:	pop	{r4, r5, r6, r7, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2c7c:	ldr	r2, [pc, #8]	; (2c88 <newFileName(char*)+0x7c>)
    2c7e:	ldr	r1, [pc, #28]	; (2c9c <newFileName(char*)+0x90>)
    2c80:	b.n	2c46 <newFileName(char*)+0x3a>
    2c82:	nop
    2c84:	.word	0x200153ca
    2c88:	.word	0x200013b5
    2c8c:	.word	0x20000d2f
    2c90:	.word	0x20001cf4
    2c94:	.word	0x20001418
    2c98:	.word	0x20001420
    2c9c:	.word	0x20000d4f

00002ca0 <getAlarmTime(unsigned long)>:
{   // estimate the wakup-time in seconds 
    // input: actual time
    // output: next wakup time
    //
    uint32_t dd = secs/(24*3600); // days
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    2ca0:	ldr	r2, [pc, #132]	; (2d28 <getAlarmTime(unsigned long)+0x88>)
    2ca2:	udiv	r3, r0, r2
    2ca6:	mls	r3, r2, r3, r0
    2caa:	mov.w	r2, #3600	; 0xe10
    2cae:	udiv	r3, r3, r2

    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2cb2:	ldr	r2, [pc, #120]	; (2d2c <getAlarmTime(unsigned long)+0x8c>)
    2cb4:	ldr	r1, [r2, #0]
    2cb6:	cmp	r1, r3
{   // estimate the wakup-time in seconds 
    2cb8:	push	{r4, r5, r6, lr}
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2cba:	bhi.n	2cc4 <getAlarmTime(unsigned long)+0x24>
    2cbc:	ldr	r1, [pc, #112]	; (2d30 <getAlarmTime(unsigned long)+0x90>)
    2cbe:	ldr	r1, [r1, #0]
    2cc0:	cmp	r1, r3
    2cc2:	bhi.n	2cec <getAlarmTime(unsigned long)+0x4c>
    2cc4:	ldr	r5, [pc, #108]	; (2d34 <getAlarmTime(unsigned long)+0x94>)
    2cc6:	ldr	r1, [r5, #0]
    2cc8:	cmp	r1, r3
    2cca:	bhi.n	2cd4 <getAlarmTime(unsigned long)+0x34>
    2ccc:	ldr	r1, [pc, #104]	; (2d38 <getAlarmTime(unsigned long)+0x98>)
    2cce:	ldr	r1, [r1, #0]
    2cd0:	cmp	r1, r3
    2cd2:	bhi.n	2cec <getAlarmTime(unsigned long)+0x4c>
    {
      secs = ((secs/t_rep)+1)*t_rep;
    }
    else if (hh<t_1)  // from mid-night to t_1
    2cd4:	ldr	r6, [r2, #0]
    uint32_t dd = secs/(24*3600); // days
    2cd6:	ldr	r1, [pc, #80]	; (2d28 <getAlarmTime(unsigned long)+0x88>)
    else if (hh<t_1)  // from mid-night to t_1
    2cd8:	cmp	r6, r3
    uint32_t dd = secs/(24*3600); // days
    2cda:	udiv	r4, r0, r1
    else if (hh<t_1)  // from mid-night to t_1
    2cde:	bhi.n	2cfc <getAlarmTime(unsigned long)+0x5c>
    {
      secs = dd*(24*3600) + t_1*3600;
    }
    else if (hh>=t_2) // between the two recording periods
    2ce0:	ldr	r6, [pc, #76]	; (2d30 <getAlarmTime(unsigned long)+0x90>)
    2ce2:	ldr	r6, [r6, #0]
    2ce4:	cmp	r6, r3
    2ce6:	bhi.n	2d0a <getAlarmTime(unsigned long)+0x6a>
    {
      secs = dd*(24*3600) + t_3*3600;
    2ce8:	ldr	r0, [r5, #0]
    2cea:	b.n	2cfe <getAlarmTime(unsigned long)+0x5e>
      secs = ((secs/t_rep)+1)*t_rep;
    2cec:	ldr	r2, [pc, #76]	; (2d3c <getAlarmTime(unsigned long)+0x9c>)
    2cee:	ldr	r3, [r2, #0]
    2cf0:	udiv	r3, r0, r3
    2cf4:	ldr	r0, [r2, #0]
    2cf6:	mla	r0, r3, r0, r0
    {
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;

    }
    return secs;
}
    2cfa:	pop	{r4, r5, r6, pc}
      secs = dd*(24*3600) + t_1*3600;
    2cfc:	ldr	r0, [r2, #0]
      secs = dd*(24*3600) + t_3*3600;
    2cfe:	mov.w	r3, #3600	; 0xe10
    2d02:	muls	r0, r3
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2d04:	mla	r0, r1, r4, r0
    2d08:	b.n	2cfa <getAlarmTime(unsigned long)+0x5a>
    else if (hh>=t_4) // after the second recording period (goes into next day)
    2d0a:	ldr	r5, [pc, #44]	; (2d38 <getAlarmTime(unsigned long)+0x98>)
    2d0c:	ldr	r6, [r5, #0]
    2d0e:	cmp	r6, r3
    2d10:	bhi.n	2cfa <getAlarmTime(unsigned long)+0x5a>
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2d12:	ldr	r0, [r2, #0]
    2d14:	ldr	r3, [r5, #0]
    2d16:	subs	r0, r0, r3
    2d18:	mov.w	r3, #3600	; 0xe10
    2d1c:	muls	r0, r3
    2d1e:	add.w	r0, r0, #86016	; 0x15000
    2d22:	add.w	r0, r0, #384	; 0x180
    2d26:	b.n	2d04 <getAlarmTime(unsigned long)+0x64>
    2d28:	.word	0x00015180
    2d2c:	.word	0x2001537c
    2d30:	.word	0x200022a8
    2d34:	.word	0x200022ac
    2d38:	.word	0x200022b0
    2d3c:	.word	0x20015384

00002d40 <powerDown()>:

void powerDown(void)
{
  SNVS_LPCR |= (1 << 6); // turn off power
    2d40:	ldr	r2, [pc, #12]	; (2d50 <powerDown()+0x10>)
    2d42:	ldr	r3, [r2, #56]	; 0x38
    2d44:	orr.w	r3, r3, #64	; 0x40
    2d48:	str	r3, [r2, #56]	; 0x38
  while (1) asm("wfi");      
    2d4a:	wfi
    2d4c:	b.n	2d4a <powerDown()+0xa>
    2d4e:	nop
    2d50:	.word	0x400d4000

00002d54 <do_hibernate(unsigned long)>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(uint32_t t_rep)
{
    uint32_t tmp = SNVS_LPCR;   // save control register
    2d54:	ldr	r3, [pc, #132]	; (2ddc <do_hibernate(unsigned long)+0x88>)
{
    2d56:	push	{r4, r5, r6, lr}
    uint32_t tmp = SNVS_LPCR;   // save control register
    2d58:	ldr	r6, [r3, #56]	; 0x38

    SNVS_LPSR |= 1;
    2d5a:	ldr	r2, [r3, #76]	; 0x4c
    2d5c:	orr.w	r2, r2, #1
    2d60:	str	r2, [r3, #76]	; 0x4c
    asm volatile("DSB");
    2d62:	dsb	sy

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2d66:	ldr	r2, [r3, #56]	; 0x38
    2d68:	bic.w	r2, r2, #2
    2d6c:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2d6e:	ldr	r2, [r3, #56]	; 0x38
    2d70:	ands.w	r2, r2, #2
    2d74:	bne.n	2d6e <do_hibernate(unsigned long)+0x1a>

    // clear alarm value
    SNVS_LPTAR = 0;
    2d76:	str	r2, [r3, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    2d78:	ldr	r2, [r3, #88]	; 0x58
    2d7a:	cmp	r2, #0
    2d7c:	bne.n	2d78 <do_hibernate(unsigned long)+0x24>

    __disable_irq();
    2d7e:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    2d80:	ldr	r5, [pc, #88]	; (2ddc <do_hibernate(unsigned long)+0x88>)
    2d82:	ldr	r3, [r5, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    2d84:	ldr	r4, [r5, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    2d86:	ldr	r1, [r5, #84]	; 0x54
    2d88:	ldr	r2, [r5, #80]	; 0x50
    2d8a:	cmp	r1, r4
    2d8c:	bne.n	2d82 <do_hibernate(unsigned long)+0x2e>
    2d8e:	cmp	r2, r3
    2d90:	bne.n	2d82 <do_hibernate(unsigned long)+0x2e>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2d92:	lsrs	r4, r4, #15

    //set alarm
    Serial.print(secs); Serial.print(" ");
    2d94:	ldr	r0, [pc, #72]	; (2de0 <do_hibernate(unsigned long)+0x8c>)
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2d96:	orr.w	r4, r4, r3, lsl #17
    Serial.print(secs); Serial.print(" ");
    2d9a:	mov	r1, r4
    2d9c:	bl	287e <Print::print(unsigned long) [clone .isra.0]>
    2da0:	ldr	r1, [pc, #64]	; (2de4 <do_hibernate(unsigned long)+0x90>)
    2da2:	ldr	r0, [pc, #60]	; (2de0 <do_hibernate(unsigned long)+0x8c>)
    2da4:	bl	28aa <Print::print(char const*) [clone .isra.0]>
    secs = getAlarmTime(secs);
    2da8:	mov	r0, r4
    2daa:	bl	2ca0 <getAlarmTime(unsigned long)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    2dae:	mov	r1, r0
    2db0:	mov	r4, r0
    2db2:	ldr	r0, [pc, #44]	; (2de0 <do_hibernate(unsigned long)+0x8c>)
    2db4:	bl	287e <Print::print(unsigned long) [clone .isra.0]>
    2db8:	ldr	r0, [pc, #36]	; (2de0 <do_hibernate(unsigned long)+0x8c>)
    2dba:	bl	c4cc <Print::println()>
    Serial.println(secs);

    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
    2dbe:	ldr	r3, [pc, #28]	; (2ddc <do_hibernate(unsigned long)+0x88>)
    SNVS_LPTAR = secs;
    2dc0:	str	r4, [r5, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    2dc2:	ldr	r2, [r3, #88]	; 0x58
    2dc4:	cmp	r2, r4
    2dc6:	bne.n	2dc2 <do_hibernate(unsigned long)+0x6e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    2dc8:	orr.w	r6, r6, #2
    2dcc:	str	r6, [r3, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    2dce:	ldr	r2, [r3, #56]	; 0x38
    2dd0:	lsls	r2, r2, #30
    2dd2:	bpl.n	2dce <do_hibernate(unsigned long)+0x7a>

    __enable_irq();
    2dd4:	cpsie	i
  
    //
    powerDown(); 
    2dd6:	bl	2d40 <powerDown()>
    2dda:	nop
    2ddc:	.word	0x400d4000
    2de0:	.word	0x20001cf4
    2de4:	.word	0x20001420

00002de8 <storeData(short)>:
{
    2de8:	push	{r4, r5, lr}
    if(status==CLOSED) // file closed: should open
    2dea:	mov	r4, r0
{
    2dec:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    2dee:	cmp	r0, #0
    2df0:	bne.w	2efa <storeData(short)+0x112>
        if(newDirectory(dirName))
    2df4:	ldr	r0, [pc, #512]	; (2ff8 <storeData(short)+0x210>)
    2df6:	bl	2ba0 <newDirectory(char*)>
    2dfa:	cmp	r0, #0
    2dfc:	beq.n	2e98 <storeData(short)+0xb0>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    2dfe:	ldr	r5, [pc, #508]	; (2ffc <storeData(short)+0x214>)
    2e00:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    2e02:	ldr.w	r1, [r3, #1152]	; 0x480
    2e06:	cbz	r1, 2e36 <storeData(short)+0x4e>
    return tmp.open(this, path, O_RDONLY);
    2e08:	mov	r3, r4
    2e0a:	ldr	r2, [pc, #492]	; (2ff8 <storeData(short)+0x210>)
    2e0c:	mov	r0, sp
    2e0e:	str	r4, [sp, #0]
    2e10:	bl	73ca <FatFile::open(FatVolume*, char const*, int)>
    2e14:	cbnz	r0, 2e74 <storeData(short)+0x8c>
    2e16:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    2e18:	ldr.w	r1, [r3, #1152]	; 0x480
    2e1c:	cbnz	r1, 2e4e <storeData(short)+0x66>
    2e1e:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    2e22:	cbz	r0, 2e62 <storeData(short)+0x7a>
  ExFatFile() {}
    2e24:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    2e26:	movs	r3, #1
    2e28:	add.w	r1, r0, #1096	; 0x448
    2e2c:	ldr	r2, [pc, #456]	; (2ff8 <storeData(short)+0x210>)
    2e2e:	mov	r0, sp
    2e30:	bl	6736 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2e34:	b.n	2e60 <storeData(short)+0x78>
    2e36:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    2e3a:	cmp	r0, #0
    2e3c:	beq.n	2e16 <storeData(short)+0x2e>
    return tmp.open(this, path, O_RDONLY);
    2e3e:	mov	r3, r1
    2e40:	str	r1, [sp, #48]	; 0x30
    2e42:	ldr	r2, [pc, #436]	; (2ff8 <storeData(short)+0x210>)
    2e44:	mov	r1, r0
    2e46:	mov	r0, sp
    2e48:	bl	5ebe <ExFatFile::open(ExFatVolume*, char const*, int)>
    2e4c:	b.n	2e14 <storeData(short)+0x2c>
    2e4e:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    2e50:	ldr	r2, [pc, #420]	; (2ff8 <storeData(short)+0x210>)
    2e52:	add.w	r1, r1, #1096	; 0x448
    2e56:	mov	r0, sp
    2e58:	str	r3, [sp, #0]
    2e5a:	movs	r3, #1
    2e5c:	bl	7548 <FatFile::mkdir(FatFile*, char const*, bool)>
    2e60:	cbnz	r0, 2e74 <storeData(short)+0x8c>
    2e62:	ldr	r1, [pc, #412]	; (3000 <storeData(short)+0x218>)
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    2e64:	ldr	r0, [pc, #412]	; (3004 <storeData(short)+0x21c>)
    2e66:	bl	28ae <Print::println(char const*) [clone .isra.0]>
        {  return STOPPED; // if file open fails: don't do anything
    2e6a:	mov.w	r4, #4294967295
}
    2e6e:	mov	r0, r4
    2e70:	add	sp, #84	; 0x54
    2e72:	pop	{r4, r5, pc}
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    2e74:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    2e76:	ldr.w	r0, [r3, #1152]	; 0x480
    2e7a:	cbz	r0, 2e88 <storeData(short)+0xa0>
    2e7c:	ldr	r1, [pc, #376]	; (2ff8 <storeData(short)+0x210>)
    2e7e:	bl	7da0 <FatVolume::chdir(char const*)>
    2e82:	cbnz	r0, 2e98 <storeData(short)+0xb0>
    2e84:	ldr	r1, [pc, #384]	; (3008 <storeData(short)+0x220>)
    2e86:	b.n	2e64 <storeData(short)+0x7c>
    2e88:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    2e8c:	cmp	r0, #0
    2e8e:	beq.n	2e84 <storeData(short)+0x9c>
    2e90:	ldr	r1, [pc, #356]	; (2ff8 <storeData(short)+0x210>)
    2e92:	bl	6308 <ExFatVolume::chdir(char const*)>
    2e96:	b.n	2e82 <storeData(short)+0x9a>
        if(newFileName(fileName))
    2e98:	ldr	r0, [pc, #368]	; (300c <storeData(short)+0x224>)
    2e9a:	bl	2c0c <newFileName(char*)>
    2e9e:	cmp	r0, #0
    2ea0:	beq.n	2e6a <storeData(short)+0x82>
            file = sd->open(fileName, FILE_WRITE); 
    2ea2:	ldr	r1, [pc, #344]	; (2ffc <storeData(short)+0x214>)
    2ea4:	movw	r3, #16898	; 0x4202
    2ea8:	ldr	r2, [pc, #352]	; (300c <storeData(short)+0x224>)
    2eaa:	mov	r0, sp
    2eac:	ldr	r1, [r1, #0]
    2eae:	bl	8730 <FsVolume::open(char const*, int)>
class Print
    2eb2:	ldr	r4, [pc, #348]	; (3010 <storeData(short)+0x228>)
    2eb4:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    2eb6:	add	r1, sp, #16
    2eb8:	add.w	r0, r4, #16
    2ebc:	str	r3, [r4, #4]
class Stream : public Print
    2ebe:	ldr	r3, [sp, #8]
    2ec0:	str	r3, [r4, #8]
    2ec2:	ldrb.w	r3, [sp, #12]
    2ec6:	strb	r3, [r4, #12]
    2ec8:	bl	8526 <FsBaseFile::operator=(FsBaseFile const&)>
    2ecc:	mov	r0, sp
    2ece:	bl	f18 <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    2ed2:	ldr	r3, [r4, #72]	; 0x48
    2ed4:	cbz	r3, 2ef0 <storeData(short)+0x108>
    {   nbuf=0;
    2ed6:	ldr	r3, [pc, #316]	; (3014 <storeData(short)+0x22c>)
    2ed8:	movs	r2, #0
    2eda:	str	r2, [r3, #0]
        if(proc==0)
    2edc:	ldr	r3, [pc, #312]	; (3018 <storeData(short)+0x230>)
    2ede:	ldrh	r3, [r3, #0]
    2ee0:	sxth	r3, r3
    2ee2:	cmp	r3, #0
    2ee4:	beq.n	2f54 <storeData(short)+0x16c>
          makeHeader(fileHeader);
    2ee6:	ldr	r0, [pc, #308]	; (301c <storeData(short)+0x234>)
    2ee8:	bl	2a70 <makeHeader(long*)>
          hdr=(char *)fileHeader;
    2eec:	ldr	r1, [pc, #300]	; (301c <storeData(short)+0x234>)
    2eee:	b.n	2f66 <storeData(short)+0x17e>
    2ef0:	ldr	r3, [r4, #76]	; 0x4c
    2ef2:	cmp	r3, #0
    2ef4:	bne.n	2ed6 <storeData(short)+0xee>
            {   Serial.println("Failing open file");
    2ef6:	ldr	r1, [pc, #296]	; (3020 <storeData(short)+0x238>)
    2ef8:	b.n	2e64 <storeData(short)+0x7c>
    if(status==OPENED) // file is open: write first record (header)
    2efa:	cmp	r0, #1
    2efc:	beq.n	2ed6 <storeData(short)+0xee>
    if(status==RUNNING) // file is open and header written: store data records
    2efe:	cmp	r0, #2
    2f00:	beq.n	2f76 <storeData(short)+0x18e>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    2f02:	subs	r3, r4, #3
    2f04:	uxth	r3, r3
    2f06:	cmp	r3, #2
    2f08:	bhi.n	2e6e <storeData(short)+0x86>
    2f0a:	ldr	r3, [pc, #260]	; (3010 <storeData(short)+0x228>)
    2f0c:	ldr	r2, [r3, #72]	; 0x48
    2f0e:	cbnz	r2, 2f14 <storeData(short)+0x12c>
    2f10:	ldr	r3, [r3, #76]	; 0x4c
    2f12:	cbz	r3, 2f34 <storeData(short)+0x14c>
        {   if(proc==0)
    2f14:	ldr	r3, [pc, #256]	; (3018 <storeData(short)+0x230>)
    2f16:	ldrh	r3, [r3, #0]
    2f18:	sxth	r3, r3
    2f1a:	cbnz	r3, 2f2e <storeData(short)+0x146>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    2f1c:	ldr	r3, [pc, #244]	; (3014 <storeData(short)+0x22c>)
    2f1e:	mov.w	r0, #24576	; 0x6000
    2f22:	ldr	r3, [r3, #0]
    2f24:	muls	r0, r3
    2f26:	bl	29fc <headerUpdate(long)>
              writeHeader(hdr);
    2f2a:	bl	2a10 <writeHeader(char*)>
            file.close();
    2f2e:	ldr	r0, [pc, #244]	; (3024 <storeData(short)+0x23c>)
    2f30:	bl	84fc <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    2f34:	cmp	r4, #4
    2f36:	bne.n	2fe4 <storeData(short)+0x1fc>
        { if( t_rep > t_on) 
    2f38:	ldr	r4, [pc, #236]	; (3028 <storeData(short)+0x240>)
    2f3a:	ldr	r3, [pc, #240]	; (302c <storeData(short)+0x244>)
    2f3c:	ldr	r2, [r4, #0]
    2f3e:	ldr	r3, [r3, #0]
    2f40:	cmp	r2, r3
    2f42:	bls.n	2ff2 <storeData(short)+0x20a>
            adcReset();
    2f44:	bl	351c <adcReset()>
            acqPower(LOW);
    2f48:	movs	r0, #0
    2f4a:	bl	3508 <acqPower(int)>
            do_hibernate(t_rep);
    2f4e:	ldr	r0, [r4, #0]
    2f50:	bl	2d54 <do_hibernate(unsigned long)>
          hdr = headerInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    2f54:	ldr	r3, [pc, #216]	; (3030 <storeData(short)+0x248>)
    2f56:	movs	r1, #1
    2f58:	movs	r2, #32
    2f5a:	ldr	r0, [r3, #0]
    2f5c:	ldr	r3, [pc, #212]	; (3034 <storeData(short)+0x24c>)
    2f5e:	ldr	r3, [r3, #0]
    2f60:	bl	2918 <headerInit(long, long, long, int)>
    2f64:	mov	r1, r0
    return BaseFile::write(buffer, size);
    2f66:	mov.w	r2, #512	; 0x200
    2f6a:	ldr	r0, [pc, #184]	; (3024 <storeData(short)+0x23c>)
    2f6c:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    2f70:	cmp.w	r0, #512	; 0x200
    2f74:	blt.n	2fe0 <storeData(short)+0x1f8>
    2f76:	mov.w	r2, #24576	; 0x6000
    2f7a:	ldr	r1, [pc, #188]	; (3038 <storeData(short)+0x250>)
    2f7c:	ldr	r0, [pc, #164]	; (3024 <storeData(short)+0x23c>)
    2f7e:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    2f82:	cmp.w	r0, #24576	; 0x6000
    2f86:	mov	r4, r0
    2f88:	ldr	r5, [pc, #136]	; (3014 <storeData(short)+0x22c>)
    2f8a:	bcs.n	2fd6 <storeData(short)+0x1ee>
        { Serial.print(">"); 
    2f8c:	ldr	r1, [pc, #172]	; (303c <storeData(short)+0x254>)
    2f8e:	ldr	r0, [pc, #116]	; (3004 <storeData(short)+0x21c>)
    2f90:	bl	28aa <Print::print(char const*) [clone .isra.0]>
          Serial.print(nd); 
    2f94:	mov	r1, r4
    2f96:	ldr	r0, [pc, #108]	; (3004 <storeData(short)+0x21c>)
          status=DOCLOSE; 
    2f98:	movs	r4, #3
          Serial.print(nd); 
    2f9a:	bl	287e <Print::print(unsigned long) [clone .isra.0]>
          Serial.print(" "); 
    2f9e:	ldr	r1, [pc, #160]	; (3040 <storeData(short)+0x258>)
    2fa0:	ldr	r0, [pc, #96]	; (3004 <storeData(short)+0x21c>)
    2fa2:	bl	28aa <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2fa6:	movs	r1, #2
    2fa8:	ldr	r0, [pc, #88]	; (3004 <storeData(short)+0x21c>)
    2faa:	bl	c4ba <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    2fae:	ldr	r0, [pc, #84]	; (3004 <storeData(short)+0x21c>)
    2fb0:	bl	c4cc <Print::println()>
        disk_count++;
    2fb4:	ldr	r2, [pc, #140]	; (3044 <storeData(short)+0x25c>)
    2fb6:	ldr	r3, [r2, #0]
    2fb8:	adds	r3, #1
    2fba:	str	r3, [r2, #0]
    2fbc:	mov.w	r2, #1000	; 0x3e8
    2fc0:	ldr	r3, [r5, #0]
    2fc2:	udiv	r1, r3, r2
    2fc6:	mls	r3, r2, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    2fca:	cmp	r3, #0
    2fcc:	bne.n	2f02 <storeData(short)+0x11a>
    BaseFile::sync();
    2fce:	ldr	r0, [pc, #84]	; (3024 <storeData(short)+0x23c>)
    2fd0:	bl	28c0 <FsBaseFile::sync()>
  }
    2fd4:	b.n	2f02 <storeData(short)+0x11a>
          nbuf++;
    2fd6:	ldr	r3, [r5, #0]
    2fd8:	movs	r4, #2
    2fda:	adds	r3, #1
    2fdc:	str	r3, [r5, #0]
    2fde:	b.n	2fb4 <storeData(short)+0x1cc>
        { status = DOCLOSE;
    2fe0:	movs	r4, #3
    2fe2:	b.n	2f02 <storeData(short)+0x11a>
        else if(status==DOCLOSE)
    2fe4:	cmp	r4, #3
    2fe6:	beq.n	2ff2 <storeData(short)+0x20a>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2fe8:	ldr	r3, [pc, #92]	; (3048 <storeData(short)+0x260>)
    2fea:	movs	r2, #8
    2fec:	str.w	r2, [r3, #136]	; 0x88
    2ff0:	b.n	2e6a <storeData(short)+0x82>
            status = CLOSED;   // do not hibernate
    2ff2:	movs	r4, #0
    2ff4:	b.n	2e6e <storeData(short)+0x86>
    2ff6:	nop
    2ff8:	.word	0x2001549a
    2ffc:	.word	0x200022a0
    3000:	.word	0x20001026
    3004:	.word	0x20001cf4
    3008:	.word	0x20001032
    300c:	.word	0x200154ea
    3010:	.word	0x20014bb8
    3014:	.word	0x20014c34
    3018:	.word	0x200153ca
    301c:	.word	0x2000ddd0
    3020:	.word	0x2000103e
    3024:	.word	0x20014bc8
    3028:	.word	0x20015384
    302c:	.word	0x200022b8
    3030:	.word	0x20002298
    3034:	.word	0x20007dc8
    3038:	.word	0x20007dd0
    303c:	.word	0x20001050
    3040:	.word	0x20001420
    3044:	.word	0x20014b98
    3048:	.word	0x42004000

0000304c <saveData(short)>:
    if(status==STOPPED) 
    304c:	adds	r3, r0, #1
{
    304e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3052:	mov	r4, r0
    if(status==STOPPED) 
    3054:	bne.n	307e <saveData(short)+0x32>
    { while(queue_isBusy()) {;} //wait if acq writes to queue
    3056:	bl	272c <queue_isBusy()>
    305a:	mov	r5, r0
    305c:	cmp	r0, #0
    305e:	bne.n	3056 <saveData(short)+0xa>
      pullData((uint32_t*)tempBuffer0);
    3060:	ldr	r0, [pc, #180]	; (3118 <saveData(short)+0xcc>)
    3062:	bl	2798 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    3066:	ldr	r3, [pc, #176]	; (3118 <saveData(short)+0xcc>)
    3068:	ldr	r2, [pc, #176]	; (311c <saveData(short)+0xd0>)
    306a:	ldr.w	r1, [r3], #4
    306e:	str.w	r1, [r2, r5, lsl #2]
    3072:	adds	r5, #1
    3074:	cmp	r5, #8
    3076:	bne.n	306a <saveData(short)+0x1e>
}
    3078:	mov	r0, r4
    307a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(status<CLOSED) return status; // we are stopped: don't do anything
    307e:	cmp	r0, #0
    3080:	blt.n	3078 <saveData(short)+0x2c>
    status=checkEndOfFile(status);
    3082:	bl	2b30 <checkEndOfFile(short)>
    3086:	mov	r4, r0
    if(getDataCount() >= NDBL)
    3088:	bl	2710 <getDataCount()>
    308c:	cmp	r0, #47	; 0x2f
    308e:	bls.n	3078 <saveData(short)+0x2c>
      if(proc==0)
    3090:	ldr	r3, [pc, #140]	; (3120 <saveData(short)+0xd4>)
    3092:	ldrh	r5, [r3, #0]
    3094:	sxth	r5, r5
    3096:	cbnz	r5, 30e4 <saveData(short)+0x98>
    3098:	ldr	r7, [pc, #124]	; (3118 <saveData(short)+0xcc>)
    309a:	mov	r8, r7
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    309c:	bl	272c <queue_isBusy()>
    30a0:	mov	r6, r0
    30a2:	cmp	r0, #0
    30a4:	bne.n	309c <saveData(short)+0x50>
        for(int ii=0; ii<NDBL; ii++)
    30a6:	adds	r5, #1
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    30a8:	mov	r0, r8
    30aa:	bl	2798 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    30ae:	add.w	r8, r8, #512	; 0x200
    30b2:	cmp	r5, #48	; 0x30
    30b4:	bne.n	309c <saveData(short)+0x50>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    30b6:	ldr	r3, [pc, #100]	; (311c <saveData(short)+0xd0>)
    30b8:	ldr.w	r2, [r7], #4
    30bc:	str.w	r2, [r3, r6, lsl #2]
    30c0:	adds	r6, #1
    30c2:	cmp	r6, #8
    30c4:	bne.n	30b8 <saveData(short)+0x6c>
          { diskBuffer[ii]=tempBuffer0[ii];
    30c6:	mov.w	r2, #24576	; 0x6000
    30ca:	ldr	r1, [pc, #76]	; (3118 <saveData(short)+0xcc>)
    30cc:	ldr	r0, [pc, #84]	; (3124 <saveData(short)+0xd8>)
    30ce:	bl	a000 <memcpy>
      if(haveStore)
    30d2:	ldr	r3, [pc, #84]	; (3128 <saveData(short)+0xdc>)
    30d4:	ldr	r3, [r3, #0]
    30d6:	cmp	r3, #0
    30d8:	beq.n	3078 <saveData(short)+0x2c>
        status=storeData(status);
    30da:	mov	r0, r4
}
    30dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status=storeData(status);
    30e0:	b.w	2de8 <storeData(short)>
    30e4:	ldr	r6, [pc, #60]	; (3124 <saveData(short)+0xd8>)
        for(int ii=0; ii<NDBL; ii++)
    30e6:	movs	r7, #0
      if(proc==0)
    30e8:	mov	r8, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    30ea:	bl	272c <queue_isBusy()>
    30ee:	mov	r5, r0
    30f0:	cmp	r0, #0
    30f2:	bne.n	30ea <saveData(short)+0x9e>
        for(int ii=0; ii<NDBL; ii++)
    30f4:	adds	r7, #1
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    30f6:	mov	r0, r8
    30f8:	bl	2798 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    30fc:	add.w	r8, r8, #512	; 0x200
    3100:	cmp	r7, #48	; 0x30
    3102:	bne.n	30ea <saveData(short)+0x9e>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    3104:	ldr	r3, [pc, #20]	; (311c <saveData(short)+0xd0>)
    3106:	ldr.w	r2, [r6], #4
    310a:	str.w	r2, [r3, r5, lsl #2]
    310e:	adds	r5, #1
    3110:	cmp	r5, #8
    3112:	bne.n	3106 <saveData(short)+0xba>
    3114:	b.n	30d2 <saveData(short)+0x86>
    3116:	nop
    3118:	.word	0x2000dfdc
    311c:	.word	0x20014c0c
    3120:	.word	0x200153ca
    3124:	.word	0x20007dd0
    3128:	.word	0x20014c08

0000312c <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    312c:	ldr	r0, [pc, #28]	; (314c <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    312e:	movs	r3, #0
    3130:	mov.w	r2, #1000	; 0x3e8
FsFile file;
    3134:	ldr	r1, [pc, #24]	; (3150 <_GLOBAL__sub_I_t_acq+0x24>)
    3136:	strb	r3, [r0, #12]
    3138:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    313c:	strd	r3, r3, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3140:	ldr	r3, [pc, #16]	; (3154 <_GLOBAL__sub_I_t_acq+0x28>)
    3142:	ldr	r2, [pc, #20]	; (3158 <_GLOBAL__sub_I_t_acq+0x2c>)
    3144:	str	r3, [r0, #0]
    3146:	b.w	c6f8 <__aeabi_atexit>
    314a:	nop
    314c:	.word	0x20014bb8
    3150:	.word	0x00000f19
    3154:	.word	0x20000554
    3158:	.word	0x200020cc

0000315c <filing_init()>:
{
    315c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3160:	ldr	r3, [pc, #132]	; (31e8 <filing_init()+0x8c>)
  FsDateTime::callback = dateTime;
    3162:	movs	r4, #5
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3164:	ldr	r2, [pc, #132]	; (31ec <filing_init()+0x90>)
    3166:	ldr.w	r3, [r3, #544]	; 0x220
    if (sd->begin(SD_CONFIG)) 
    316a:	ldr.w	r9, [pc, #156]	; 3208 <filing_init()+0xac>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    316e:	bic.w	r3, r3, #4278190080	; 0xff000000
    { Serial.println("still trying..."); 
    3172:	ldr.w	r8, [pc, #152]	; 320c <filing_init()+0xb0>
    3176:	ldr	r7, [pc, #120]	; (31f0 <filing_init()+0x94>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3178:	str	r3, [r2, #0]
  FsDateTime::callback = dateTime;
    317a:	ldr	r3, [pc, #120]	; (31f4 <filing_init()+0x98>)
    317c:	ldr	r2, [pc, #120]	; (31f8 <filing_init()+0x9c>)
    317e:	str	r2, [r3, #0]
    if (sd->begin(SD_CONFIG)) 
    3180:	ldr.w	r5, [r9]
    spiConfigBackupPin = 255;
    3184:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
    3186:	movs	r1, #0
    3188:	add.w	r6, r5, #1168	; 0x490
    spiConfigBackupPin = 255;
    318c:	strb.w	r3, [r5, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
    3190:	strb.w	r1, [r5, #1224]	; 0x4c8
    3194:	mov	r0, r6
    3196:	bl	9918 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    319a:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    319c:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    31a0:	bl	9014 <SdioCard::errorCode() const>
    31a4:	cbnz	r0, 31c8 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    31a6:	movs	r3, #1
    31a8:	ldr.w	r1, [r5, #1164]	; 0x48c
    31ac:	mov	r0, r5
    31ae:	mov	r2, r3
    31b0:	bl	865c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    31b4:	cbz	r0, 31c8 <filing_init()+0x6c>
    { Serial.println("card initialized.");
    31b6:	ldr	r0, [pc, #56]	; (31f0 <filing_init()+0x94>)
    31b8:	ldr	r1, [pc, #64]	; (31fc <filing_init()+0xa0>)
    31ba:	bl	28ae <Print::println(char const*) [clone .isra.0]>
      haveStore=1;
    31be:	movs	r0, #1
    31c0:	ldr	r3, [pc, #60]	; (3200 <filing_init()+0xa4>)
    31c2:	str	r0, [r3, #0]
}
    31c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    { Serial.println("still trying..."); 
    31c8:	mov	r1, r8
    31ca:	mov	r0, r7
    31cc:	bl	28ae <Print::println(char const*) [clone .isra.0]>
      delay(100);
    31d0:	movs	r0, #100	; 0x64
    31d2:	bl	b548 <delay>
  for(int ii=0; ii<5;ii++)
    31d6:	subs	r4, #1
    31d8:	bne.n	3180 <filing_init()+0x24>
  Serial.println("Card failed, or not present");
    31da:	ldr	r0, [pc, #20]	; (31f0 <filing_init()+0x94>)
    31dc:	ldr	r1, [pc, #36]	; (3204 <filing_init()+0xa8>)
    31de:	bl	28ae <Print::println(char const*) [clone .isra.0]>
  return 0;
    31e2:	mov	r0, r4
    31e4:	b.n	31c4 <filing_init()+0x68>
    31e6:	nop
    31e8:	.word	0x401f4400
    31ec:	.word	0x20007dc8
    31f0:	.word	0x20001cf4
    31f4:	.word	0x200147fc
    31f8:	.word	0x000027ed
    31fc:	.word	0x20000cf1
    3200:	.word	0x20014c08
    3204:	.word	0x20000d13
    3208:	.word	0x200022a0
    320c:	.word	0x20000d03

00003210 <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    3210:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3214:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    3216:	bl	b744 <rtc_get>
    321a:	str	r0, [sp, #4]
  uint32_t t1;
  t1 = micros();
    321c:	bl	b4fc <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    3220:	ldr	r3, [pc, #604]	; (3480 <compress(void*)+0x270>)
  t1 = micros();
    3222:	mov	sl, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    3224:	movs	r2, #0
    3226:	ldr	r3, [r3, #0]
    3228:	ldr.w	r1, [r4, r2, lsl #2]
    322c:	str.w	r1, [r3, r2, lsl #2]
    3230:	adds	r2, #1
    3232:	cmp	r2, #128	; 0x80
    3234:	bne.n	3228 <compress(void*)+0x18>
    3236:	subs	r4, #4
    3238:	add.w	r0, r3, #508	; 0x1fc
    323c:	mov	r2, r3
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    323e:	ldr.w	r1, [r2, #4]!
    3242:	ldr.w	r5, [r4, #4]!
    3246:	cmp	r0, r2
    3248:	sub.w	r1, r1, r5
    324c:	str	r1, [r2, #0]
    324e:	bne.n	323e <compress(void*)+0x2e>

  // find maximum in filtered data 
  int32_t mx = 0;
    3250:	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    3252:	ldr.w	r1, [r3, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    3256:	cmp	r1, #0
    3258:	it	lt
    325a:	neglt	r1, r1
    325c:	cmp	r2, r1
    325e:	it	lt
    3260:	movlt	r2, r1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    3262:	cmp	r0, r3
    3264:	bne.n	3252 <compress(void*)+0x42>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    3266:	movs	r4, #2
    3268:	movs	r1, #1
    326a:	subs	r3, r4, #1
    326c:	lsl.w	r3, r1, r3
    3270:	cmp	r3, r2
    3272:	bgt.n	327a <compress(void*)+0x6a>
    3274:	adds	r4, #1
    3276:	cmp	r4, #24
    3278:	bne.n	326a <compress(void*)+0x5a>
  // compression factor (32/nb)

  // keep statistics
  proc_stat[nb-1]++;
    327a:	ldr	r2, [pc, #520]	; (3484 <compress(void*)+0x274>)
    327c:	subs	r1, r4, #1
    327e:	ldr.w	r8, [pc, #536]	; 3498 <compress(void*)+0x288>
    3282:	ldr.w	r3, [r2, r1, lsl #2]
    3286:	mov	fp, r8
    3288:	adds	r3, #1
    328a:	str.w	r3, [r2, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    328e:	ldr	r3, [pc, #504]	; (3488 <compress(void*)+0x278>)
    3290:	ldr	r2, [r3, #0]
    3292:	cmp	r4, r2

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    3294:	mov	r2, r8
  if((uint32_t)nb>max_stat) max_stat=nb;
    3296:	it	hi
    3298:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    329a:	movs	r3, #1
    329c:	lsl.w	r0, r3, r4
    32a0:	subs	r0, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    32a2:	ldr.w	r1, [r2, #4]!
    32a6:	adds	r3, #1
    32a8:	ands	r1, r0
    32aa:	cmp	r3, #128	; 0x80
    32ac:	str	r1, [r2, #0]
    32ae:	bne.n	32a2 <compress(void*)+0x92>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    32b0:	ldr	r5, [pc, #472]	; (348c <compress(void*)+0x27c>)
    32b2:	mov.w	r2, #512	; 0x200
    32b6:	movs	r1, #0
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    32b8:	mov.w	r9, r4, lsl #2
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    32bc:	mov	r0, r5
    32be:	bl	9fbc <memset>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
    32c2:	mov.w	r2, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
    32c6:	ldr	r3, [sp, #4]
  int ndat = NH + NCHAN_ACQ + ncmp;
    32c8:	add.w	r7, r9, #7
  *iptr++ = 0xA5A5A5A5;
    32cc:	str	r2, [r5, #0]
  ndat= ((ndat>>1) + 1)<<1;
    32ce:	add.w	r6, r9, #8
  *iptr++ = nb | shift<<16;
    32d2:	ldr	r2, [pc, #444]	; (3490 <compress(void*)+0x280>)
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    32d4:	movs	r1, #7
  *iptr++ = nb | shift<<16;
    32d6:	ldrh	r2, [r2, #0]
  *iptr++ = t1;
    32d8:	strd	r3, sl, [r5, #8]
  *iptr++ = nb | shift<<16;
    32dc:	orr.w	r2, r4, r2, lsl #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
    32e0:	ldr.w	r3, [fp]
  *iptr++ = nb | shift<<16;
    32e4:	str	r2, [r5, #4]
  *iptr++ = NCHAN_ACQ;
    32e6:	movs	r2, #1
  outData[kk++] = tempData[0]; tempData[0] = 0;
    32e8:	str	r3, [r5, #24]
    32ea:	movs	r3, #0
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    32ec:	add.w	r0, r9, r2
  *iptr++ = NCHAN_ACQ;
    32f0:	str	r2, [r5, #16]
  #endif

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    32f2:	mov	ip, r3
  outData[kk++] = tempData[0]; tempData[0] = 0;
    32f4:	str.w	r3, [fp]
  int nx = MBIT;
    32f8:	movs	r3, #32
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    32fa:	str	r0, [r5, #20]
  {   nx -= nb;
    32fc:	sub.w	lr, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    3300:	ldr.w	sl, [r5, r1, lsl #2]
    3304:	ldr.w	r2, [r8], #4
      if(nx > 0)
    3308:	cmp.w	lr, #0
    330c:	ble.n	3356 <compress(void*)+0x146>
      {   outData[kk] |= (tempData[ii] << nx);
    330e:	lsl.w	r2, r2, lr
    3312:	mov	r3, lr
    3314:	orr.w	r2, r2, sl
    3318:	str.w	r2, [r5, r1, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    331c:	add.w	ip, ip, #1
    3320:	cmp.w	ip, #128	; 0x80
    3324:	bne.n	32fc <compress(void*)+0xec>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    3326:	ldr.w	r8, [pc, #372]	; 349c <compress(void*)+0x28c>
    332a:	ldr.w	r4, [r8]
    332e:	add.w	r9, r4, r6
    3332:	cmp.w	r9, #128	; 0x80
    3336:	bgt.n	3386 <compress(void*)+0x176>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3338:	ldr	r0, [pc, #344]	; (3494 <compress(void*)+0x284>)
    333a:	lsls	r2, r6, #2
    333c:	ldr	r1, [pc, #332]	; (348c <compress(void*)+0x27c>)
    333e:	add.w	r0, r0, r4, lsl #2
    3342:	bl	a000 <memcpy>
    3346:	str.w	r9, [r8]
  int ret=1;
    334a:	mov.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    334e:	mov	r0, r9
    3350:	add	sp, #12
    3352:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    3356:	add.w	r9, r1, #1
      else if(nx==0) 
    335a:	bne.n	336a <compress(void*)+0x15a>
      {   outData[kk++] |= tempData[ii];
    335c:	orr.w	r2, sl, r2
          nx=MBIT;
    3360:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    3362:	str.w	r2, [r5, r1, lsl #2]
    3366:	mov	r1, r9
    3368:	b.n	331c <compress(void*)+0x10c>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    336a:	subs	r3, r4, r3
    336c:	lsr.w	r3, r2, r3
    3370:	orr.w	r3, r3, sl
    3374:	str.w	r3, [r5, r1, lsl #2]
          nx += MBIT;
    3378:	add.w	r3, lr, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    337c:	mov	r1, r9
          outData[kk] = (tempData[ii] << nx);
    337e:	lsls	r2, r3
    3380:	str.w	r2, [r5, r9, lsl #2]
    3384:	b.n	331c <compress(void*)+0x10c>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    3386:	cmp	r4, #122	; 0x7a
    3388:	ble.n	33d4 <compress(void*)+0x1c4>
    338a:	movs	r2, #0
    338c:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    338e:	ldr	r1, [pc, #260]	; (3494 <compress(void*)+0x284>)
    3390:	mov	r0, r2
    3392:	cmp	r3, #127	; 0x7f
    3394:	bls.n	33ca <compress(void*)+0x1ba>
    3396:	cmp	r4, #128	; 0x80
    3398:	rsb	r3, r4, #128	; 0x80
    339c:	it	gt
    339e:	movgt	r3, #0
    33a0:	add	r3, r4
    33a2:	cbz	r2, 33a8 <compress(void*)+0x198>
    33a4:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    33a8:	ldr	r0, [pc, #232]	; (3494 <compress(void*)+0x284>)
    33aa:	bl	2738 <pushData(unsigned long*)>
    33ae:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    33b2:	mov.w	r2, r6, lsl #2
    33b6:	ldr	r1, [pc, #212]	; (348c <compress(void*)+0x27c>)
    33b8:	ldr	r0, [pc, #216]	; (3494 <compress(void*)+0x284>)
      if(!pushData(dout)) ret = 0;
    33ba:	it	ne
    33bc:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    33c0:	bl	a000 <memcpy>
    33c4:	str.w	r6, [r8]
    33c8:	b.n	334e <compress(void*)+0x13e>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    33ca:	str.w	r0, [r1, r3, lsl #2]
    33ce:	movs	r2, #1
    33d0:	adds	r3, #1
    33d2:	b.n	3392 <compress(void*)+0x182>
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    33d4:	rsb	r3, r4, #122	; 0x7a
    33d8:	ldr	r1, [pc, #176]	; (348c <compress(void*)+0x27c>)
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    33da:	ldr	r2, [pc, #184]	; (3494 <compress(void*)+0x284>)
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    33dc:	orr.w	r3, r3, r0, lsl #16
    33e0:	mov	r0, r1
    33e2:	str	r3, [r5, #20]
    33e4:	mov	r3, r4
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    33e6:	ldr.w	ip, [r0], #4
    33ea:	str.w	ip, [r2, r3, lsl #2]
    33ee:	adds	r3, #1
    33f0:	cmp	r3, #128	; 0x80
    33f2:	bne.n	33e6 <compress(void*)+0x1d6>
      if(!pushData(dout)) ret = 0;
    33f4:	ldr	r0, [pc, #156]	; (3494 <compress(void*)+0x284>)
    33f6:	rsb	sl, r4, #128	; 0x80
    33fa:	str	r1, [sp, #4]
    33fc:	str.w	r3, [r8]
    3400:	bl	2738 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3404:	ldr	r3, [r5, #20]
      nr=ndat0-ii; // for header
    3406:	sub.w	r7, r7, sl
      if(!pushData(dout)) ret = 0;
    340a:	subs.w	r9, r0, #0
    340e:	mov	fp, sl
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3410:	mov.w	r3, r3, lsr #16
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3414:	mov.w	r0, #7
      if(!pushData(dout)) ret = 0;
    3418:	it	ne
    341a:	movne.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    341e:	ldr	r1, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3420:	lsls	r3, r3, #16
    3422:	orrs	r3, r7
    3424:	ldr	r7, [pc, #108]	; (3494 <compress(void*)+0x284>)
    3426:	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3428:	mov	r2, r7
    342a:	movs	r3, #0
    342c:	str.w	r3, [r8]
    3430:	subs	r0, #1
    3432:	bne.n	3462 <compress(void*)+0x252>
    3434:	cbz	r3, 343c <compress(void*)+0x22c>
    3436:	movs	r3, #6
    3438:	str.w	r3, [r8]
    343c:	ldr.w	r1, [r8]
    3440:	movs	r3, #0
    3442:	add.w	r2, r2, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    3446:	cmp	sl, r6
    3448:	blt.n	346e <compress(void*)+0x25e>
    344a:	subs	r4, #128	; 0x80
    344c:	add	r4, r6
    344e:	cmp	r6, fp
    3450:	it	lt
    3452:	movlt	r4, #0
    3454:	add	r4, r1
    3456:	cmp	r3, #0
    3458:	beq.w	334e <compress(void*)+0x13e>
    345c:	str.w	r4, [r8]
  return ret;
    3460:	b.n	334e <compress(void*)+0x13e>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3462:	ldr.w	r3, [r1], #4
    3466:	str.w	r3, [r7], #4
    346a:	movs	r3, #1
    346c:	b.n	3430 <compress(void*)+0x220>
      while (ii < ndat) dout[nout++] = outData[ii++];
    346e:	ldr.w	r3, [r5, sl, lsl #2]
    3472:	add.w	sl, sl, #1
    3476:	str.w	r3, [r2], #4
    347a:	movs	r3, #1
    347c:	b.n	3446 <compress(void*)+0x236>
    347e:	nop
    3480:	.word	0x200022bc
    3484:	.word	0x20014c58
    3488:	.word	0x20014c2c
    348c:	.word	0x200141f4
    3490:	.word	0x2001546e
    3494:	.word	0x20013fe4
    3498:	.word	0x200145f4
    349c:	.word	0x20014848

000034a0 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    34a0:	push	{r0, r1, r4, lr}
    34a2:	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    34a4:	cbz	r1, 34c0 <Print::print(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    34a6:	mov	r0, r1
    34a8:	str	r1, [sp, #4]
    34aa:	bl	eb80 <strlen>
    34ae:	ldr	r3, [r4, #0]
    34b0:	mov	r2, r0
    34b2:	ldr	r1, [sp, #4]
    34b4:	ldr	r3, [r3, #4]
    34b6:	mov	r0, r4
	size_t print(const char s[])			{ return write(s); }
    34b8:	add	sp, #8
    34ba:	ldmia.w	sp!, {r4, lr}
							  return write((const uint8_t *)str, strlen(str)); }
    34be:	bx	r3
	size_t print(const char s[])			{ return write(s); }
    34c0:	add	sp, #8
    34c2:	pop	{r4, pc}

000034c4 <usbPowerInit()>:
    static const uint8_t i2c_addr[2]= {I2C_ADDRESS1, I2C_ADDRESS2};
    static const uint8_t regs[4]={0x3C, 0x41, 0x46, 0x4B};

    void usbPowerInit()
    {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    34c4:	ldr	r3, [pc, #24]	; (34e0 <usbPowerInit()+0x1c>)
    34c6:	movs	r2, #5
    34c8:	str.w	r2, [r3, #180]	; 0xb4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    34cc:	movs	r2, #8
    34ce:	str.w	r2, [r3, #676]	; 0x2a4

      GPIO8_GDIR |= 1<<26;
    34d2:	ldr	r2, [pc, #16]	; (34e4 <usbPowerInit()+0x20>)
    34d4:	ldr	r3, [r2, #4]
    34d6:	orr.w	r3, r3, #67108864	; 0x4000000
    34da:	str	r3, [r2, #4]
    }
    34dc:	bx	lr
    34de:	nop
    34e0:	.word	0x401f8000
    34e4:	.word	0x42008000

000034e8 <usbPowerSetup()>:
    {
      GPIO8_DR_CLEAR = 1<<26;
    }

    void usbPowerSetup(void)
    {
    34e8:	push	{r3, lr}
      #if USB_POWER==1
        usbPowerInit();
    34ea:	bl	34c4 <usbPowerInit()>
      GPIO8_DR_SET = 1<<26;
    34ee:	ldr	r3, [pc, #20]	; (3504 <usbPowerSetup()+0x1c>)
    34f0:	mov.w	r2, #67108864	; 0x4000000
        usbPowerOn();
        delay(1000);
    34f4:	mov.w	r0, #1000	; 0x3e8
      GPIO8_DR_SET = 1<<26;
    34f8:	str.w	r2, [r3, #132]	; 0x84
      #endif
    }
    34fc:	ldmia.w	sp!, {r3, lr}
        delay(1000);
    3500:	b.w	b548 <delay>
    3504:	.word	0x42008000

00003508 <acqPower(int)>:

    void acqPower(int flag)
    {   
        #if defined(ADC_EN)
            digitalWrite(ADC_EN,flag);
    3508:	uxtb	r1, r0
    350a:	movs	r0, #33	; 0x21
    {   
    350c:	push	{r3, lr}
            digitalWrite(ADC_EN,flag);
    350e:	bl	bc98 <digitalWrite>
            delay(100);
    3512:	movs	r0, #100	; 0x64
        #else
            (void) flag;
        #endif
    }
    3514:	ldmia.w	sp!, {r3, lr}
            delay(100);
    3518:	b.w	b548 <delay>

0000351c <adcReset()>:

    void adcReset(void) 
    { digitalWrite(ADC_SHDNZ,LOW); 
    351c:	movs	r1, #0
    351e:	movs	r0, #32
    3520:	b.w	bc98 <digitalWrite>

00003524 <adcStart()>:
    }
    void adcStart(void) 
    { digitalWrite(ADC_SHDNZ,HIGH); 
    3524:	movs	r1, #1
    3526:	movs	r0, #32
    3528:	b.w	bc98 <digitalWrite>

0000352c <adc_init()>:
    }


    void adc_init(void)
    {
    352c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        #if defined(ADC_EN)
            pinMode(ADC_EN,OUTPUT);
    3530:	movs	r1, #1
    3532:	movs	r0, #33	; 0x21
    3534:	bl	bcd8 <pinMode>
        #endif
        acqPower(HIGH);
    3538:	movs	r0, #1
    353a:	bl	3508 <acqPower(int)>

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
    353e:	movs	r1, #1
    3540:	movs	r0, #32
    3542:	bl	bcd8 <pinMode>
        adcReset();
    3546:	bl	351c <adcReset()>
        delay(100);
    354a:	movs	r0, #100	; 0x64
    354c:	bl	b548 <delay>
        adcStart();
    3550:	bl	3524 <adcStart()>

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&mWire,100'000); 
    3554:	ldr	r2, [pc, #332]	; (36a4 <adc_init()+0x178>)
    3556:	ldr	r1, [pc, #336]	; (36a8 <adc_init()+0x17c>)
    3558:	add	r0, sp, #4
    355a:	bl	3774 <i2c_class::i2c_class(TwoWire*, unsigned long)>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
    355e:	movs	r1, #76	; 0x4c
    3560:	add	r0, sp, #4
    3562:	bl	3798 <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
    3566:	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
    3568:	cmp	r0, #0
    356a:	beq.w	369e <adc_init()+0x172>
                Serial.printf("found %x\n",i2c_addr[ii]);
    356e:	ldr	r1, [pc, #316]	; (36ac <adc_init()+0x180>)
            else
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    3570:	ldr	r0, [pc, #316]	; (36b0 <adc_init()+0x184>)

            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep

            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    3572:	movs	r4, #11
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    3574:	bl	c504 <Print::printf(char const*, ...)>
            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
    3578:	movs	r3, #129	; 0x81
    357a:	movs	r2, #2
    357c:	movs	r1, #76	; 0x4c
    357e:	add	r0, sp, #4
    3580:	ldr	r5, [pc, #304]	; (36b4 <adc_init()+0x188>)
    3582:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
    3586:	movs	r3, #48	; 0x30
    3588:	movs	r2, #7
    358a:	movs	r1, #76	; 0x4c
    358c:	add	r0, sp, #4
    358e:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    3592:	movs	r3, #0
    3594:	movs	r2, #8
    3596:	movs	r1, #76	; 0x4c
    3598:	add	r0, sp, #4
    359a:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            for(int jj=0;jj<4;jj++)
            {
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    359e:	mov	r2, r4
            for(int jj=0;jj<4;jj++)
    35a0:	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    35a2:	ldrb.w	r3, [r5], #1
    35a6:	movs	r1, #76	; 0x4c
            for(int jj=0;jj<4;jj++)
    35a8:	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    35aa:	add	r0, sp, #4
    35ac:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
    35b0:	cmp	r4, #15
    35b2:	bne.n	359e <adc_init()+0x72>
            }

            //i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	//Enable Input Ch-1 to Ch-8 by I2C write into P0_R115 
            i2c.write(i2c_addr[ii],0x73,0x30);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    35b4:	movs	r3, #48	; 0x30
    35b6:	movs	r2, #115	; 0x73
    35b8:	movs	r1, #76	; 0x4c
    35ba:	add	r0, sp, #4
    35bc:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
            i2c.write(i2c_addr[ii],0x74,0x20);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    35c0:	movs	r3, #32
    35c2:	movs	r2, #116	; 0x74
    35c4:	movs	r1, #76	; 0x4c
    35c6:	add	r0, sp, #4
    35c8:	ldr	r6, [pc, #236]	; (36b8 <adc_init()+0x18c>)
    35ca:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    35ce:	movs	r3, #224	; 0xe0
    35d0:	movs	r2, #117	; 0x75
    35d2:	movs	r1, #76	; 0x4c
    35d4:	add	r0, sp, #4

            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2

            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V

            for(int jj=0; jj<4; jj++)
    35d6:	movs	r5, #0
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    35d8:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            {   
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    35dc:	ldr.w	r8, [pc, #236]	; 36cc <adc_init()+0x1a0>
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    35e0:	movs	r3, #37	; 0x25
    35e2:	movs	r2, #107	; 0x6b
    35e4:	movs	r1, #76	; 0x4c
    35e6:	add	r0, sp, #4
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    35e8:	ldr	r7, [pc, #208]	; (36bc <adc_init()+0x190>)
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    35ea:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
    35ee:	movs	r3, #96	; 0x60
    35f0:	movs	r2, #59	; 0x3b
    35f2:	movs	r1, #76	; 0x4c
    35f4:	add	r0, sp, #4
    35f6:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    35fa:	ldrb.w	r4, [r6], #1
    35fe:	movs	r3, #136	; 0x88
    3600:	movs	r1, #76	; 0x4c
    3602:	add	r0, sp, #4
    3604:	mov	r2, r4
            for(int jj=0; jj<4; jj++)
    3606:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    3608:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    360c:	ldrh.w	r3, [r8]
    3610:	adds	r2, r4, #1
    3612:	movs	r1, #76	; 0x4c
    3614:	uxtb	r3, r3
    3616:	add	r0, sp, #4
    3618:	uxtb	r2, r2
    361a:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    361e:	ldrh	r3, [r7, #0]
    3620:	adds	r2, r4, #2
    3622:	movs	r1, #76	; 0x4c
    3624:	subs	r3, #55	; 0x37
    3626:	add	r0, sp, #4
    3628:	uxtb	r2, r2
    362a:	uxtb	r3, r3
    362c:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
    3630:	adds	r2, r4, #3
    3632:	movs	r3, #128	; 0x80
    3634:	movs	r1, #76	; 0x4c
    3636:	uxtb	r2, r2
    3638:	add	r0, sp, #4
    363a:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
    363e:	adds	r2, r4, #4
    3640:	movs	r3, #0
    3642:	movs	r1, #76	; 0x4c
    3644:	uxtb	r2, r2
    3646:	add	r0, sp, #4
    3648:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    364c:	cmp	r5, #4
    364e:	bne.n	35fa <adc_init()+0xce>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
    3650:	ldr	r1, [pc, #108]	; (36c0 <adc_init()+0x194>)
    3652:	ldr	r0, [pc, #92]	; (36b0 <adc_init()+0x184>)
    3654:	bl	34a0 <Print::print(char const*) [clone .isra.0]>
    3658:	movs	r2, #21
    365a:	movs	r1, #76	; 0x4c
    365c:	add	r0, sp, #4
    365e:	bl	37ba <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3662:	movs	r3, #0
    3664:	mov	r1, r0
    3666:	movs	r2, #16
    3668:	ldr	r0, [pc, #68]	; (36b0 <adc_init()+0x184>)
    366a:	bl	c51e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    366e:	ldr	r0, [pc, #64]	; (36b0 <adc_init()+0x184>)
    3670:	bl	c4cc <Print::println()>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
    3674:	ldr	r1, [pc, #76]	; (36c4 <adc_init()+0x198>)
    3676:	ldr	r0, [pc, #56]	; (36b0 <adc_init()+0x184>)
    3678:	bl	34a0 <Print::print(char const*) [clone .isra.0]>
    367c:	movs	r2, #118	; 0x76
    367e:	movs	r1, #76	; 0x4c
    3680:	add	r0, sp, #4
    3682:	bl	37ba <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3686:	movs	r3, #0
    3688:	mov	r1, r0
    368a:	movs	r2, #16
    368c:	ldr	r0, [pc, #32]	; (36b0 <adc_init()+0x184>)
    368e:	bl	c51e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    3692:	ldr	r0, [pc, #28]	; (36b0 <adc_init()+0x184>)
    3694:	bl	c4cc <Print::println()>
            
        }
    }
    3698:	add	sp, #8
    369a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    369e:	ldr	r1, [pc, #40]	; (36c8 <adc_init()+0x19c>)
    36a0:	b.n	3570 <adc_init()+0x44>
    36a2:	nop
    36a4:	.word	0x000186a0
    36a8:	.word	0x20001e44
    36ac:	.word	0x20000ff6
    36b0:	.word	0x20001cf4
    36b4:	.word	0x20001056
    36b8:	.word	0x20001052
    36bc:	.word	0x200153c4
    36c0:	.word	0x20001017
    36c4:	.word	0x2000101f
    36c8:	.word	0x20001000
    36cc:	.word	0x200022c0

000036d0 <setAGain(signed char)>:

    void setAGain(int8_t again)
    {
    36d0:	push	{r0, r1, r4, r5, r6, lr}
    36d2:	mov	r4, r0
    36d4:	ldr	r6, [pc, #40]	; (3700 <setAGain(signed char)+0x30>)
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
            for(int jj=0; jj<4; jj++)
    36d6:	movs	r5, #0
        i2c_class i2c(&mWire,100'000);
    36d8:	ldr	r2, [pc, #40]	; (3704 <setAGain(signed char)+0x34>)
            {
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    36da:	uxtb	r4, r4
        i2c_class i2c(&mWire,100'000);
    36dc:	ldr	r1, [pc, #40]	; (3708 <setAGain(signed char)+0x38>)
    36de:	add	r0, sp, #4
    36e0:	bl	3774 <i2c_class::i2c_class(TwoWire*, unsigned long)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    36e4:	ldrb.w	r2, [r6], #1
            for(int jj=0; jj<4; jj++)
    36e8:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    36ea:	mov	r3, r4
    36ec:	movs	r1, #76	; 0x4c
    36ee:	adds	r2, #1
    36f0:	add	r0, sp, #4
    36f2:	uxtb	r2, r2
    36f4:	bl	3806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    36f8:	cmp	r5, #4
    36fa:	bne.n	36e4 <setAGain(signed char)+0x14>
            }
    }
    36fc:	add	sp, #8
    36fe:	pop	{r4, r5, r6, pc}
    3700:	.word	0x20001052
    3704:	.word	0x000186a0
    3708:	.word	0x20001e44

0000370c <adcStatus()>:
    void adcStatus(void)
    {
    370c:	push	{r0, r1, r4, lr}
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    370e:	ldr	r4, [pc, #80]	; (3760 <adcStatus()+0x54>)
        i2c_class i2c(&mWire,100'000);
    3710:	add	r0, sp, #4
    3712:	ldr	r2, [pc, #80]	; (3764 <adcStatus()+0x58>)
    3714:	ldr	r1, [pc, #80]	; (3768 <adcStatus()+0x5c>)
    3716:	bl	3774 <i2c_class::i2c_class(TwoWire*, unsigned long)>
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    371a:	mov	r0, r4
    371c:	ldr	r1, [pc, #76]	; (376c <adcStatus()+0x60>)
    371e:	bl	34a0 <Print::print(char const*) [clone .isra.0]>
    3722:	movs	r2, #21
    3724:	movs	r1, #76	; 0x4c
    3726:	add	r0, sp, #4
    3728:	bl	37ba <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    372c:	movs	r3, #0
    372e:	mov	r1, r0
    3730:	movs	r2, #16
    3732:	mov	r0, r4
    3734:	bl	c51e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            Serial.print("\n0x76: "); Serial.print(i2c.read(i2c_addr[ii],0x76),HEX);
    3738:	mov	r0, r4
    373a:	ldr	r1, [pc, #52]	; (3770 <adcStatus()+0x64>)
    373c:	bl	34a0 <Print::print(char const*) [clone .isra.0]>
    3740:	movs	r2, #118	; 0x76
    3742:	movs	r1, #76	; 0x4c
    3744:	add	r0, sp, #4
    3746:	bl	37ba <i2c_class::read(unsigned char, unsigned char)>
    374a:	movs	r3, #0
    374c:	mov	r1, r0
    374e:	movs	r2, #16
    3750:	mov	r0, r4
    3752:	bl	c51e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        }
        Serial.println();
    3756:	mov	r0, r4
    3758:	bl	c4cc <Print::println()>
    }
    375c:	add	sp, #8
    375e:	pop	{r4, pc}
    3760:	.word	0x20001cf4
    3764:	.word	0x000186a0
    3768:	.word	0x20001e44
    376c:	.word	0x20001016
    3770:	.word	0x2000101e

00003774 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    3774:	push	{r0, r1, r2, r4, r5, lr}
    3776:	mov	r4, r1
    {   this->wire = wire;
    3778:	str	r1, [r0, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    377a:	mov	r5, r0
        wire->begin();
    377c:	mov	r0, r1
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    377e:	str	r2, [sp, #4]
        wire->begin();
    3780:	bl	11e80 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    3784:	movs	r0, #100	; 0x64
    3786:	bl	b548 <delay>
        wire->setClock(speed);
    378a:	mov	r0, r4
    378c:	ldr	r1, [sp, #4]
    378e:	bl	526c <TwoWire::setClock(unsigned long)>
    }
    3792:	mov	r0, r5
    3794:	add	sp, #12
    3796:	pop	{r4, r5, pc}

00003798 <i2c_class::exist(unsigned char)>:
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    3798:	push	{r3, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    379a:	lsls	r1, r1, #1
        wire->beginTransmission(addr);
    379c:	ldr	r3, [r0, #0]
    379e:	strb.w	r1, [r3, #165]	; 0xa5
		transmitting = 1;
    37a2:	movs	r1, #1
    37a4:	strb.w	r1, [r3, #304]	; 0x130
		txBufferLength = 1;
    37a8:	strb.w	r1, [r3, #303]	; 0x12f
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    37ac:	ldr	r0, [r0, #0]
    37ae:	bl	4fb8 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    37b2:	clz	r0, r0
    37b6:	lsrs	r0, r0, #5
    37b8:	pop	{r3, pc}

000037ba <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    37ba:	push	{r4, r5, r6, lr}
        unsigned int val;
        wire->beginTransmission(addr);
    37bc:	ldr	r3, [r0, #0]
		transmitting = 1;
    37be:	movs	r6, #1
    { 
    37c0:	mov	r5, r1
		txBuffer[0] = (address << 1);
    37c2:	lsls	r1, r1, #1
		transmitting = 1;
    37c4:	strb.w	r6, [r3, #304]	; 0x130
    37c8:	mov	r4, r0
		txBuffer[0] = (address << 1);
    37ca:	strb.w	r1, [r3, #165]	; 0xa5
        wire->write(reg);
    37ce:	mov	r1, r2
		txBufferLength = 1;
    37d0:	strb.w	r6, [r3, #303]	; 0x12f
    37d4:	ldr	r0, [r0, #0]
    37d6:	ldr	r3, [r0, #0]
    37d8:	ldr	r3, [r3, #0]
    37da:	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    37dc:	movs	r1, #0
    37de:	ldr	r0, [r4, #0]
    37e0:	bl	4fb8 <TwoWire::endTransmission(unsigned char)>
    37e4:	cbz	r0, 37ea <i2c_class::read(unsigned char, unsigned char)+0x30>
    37e6:	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    37e8:	pop	{r4, r5, r6, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    37ea:	mov	r3, r6
    37ec:	mov	r2, r6
    37ee:	mov	r1, r5
    37f0:	ldr	r0, [r4, #0]
    37f2:	bl	509c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    37f6:	cmp	r0, #0
    37f8:	beq.n	37e6 <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    37fa:	ldr	r0, [r4, #0]
    37fc:	ldr	r3, [r0, #0]
    37fe:	ldr	r3, [r3, #20]
    3800:	blx	r3
        return val;
    3802:	uxtb	r0, r0
    3804:	b.n	37e8 <i2c_class::read(unsigned char, unsigned char)+0x2e>

00003806 <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    3806:	push	{r4, r5, r6, lr}
    3808:	mov	r4, r0
		transmitting = 1;
    380a:	movs	r5, #1
    380c:	mov	r6, r3
        wire->beginTransmission(addr);
    380e:	ldr	r3, [r0, #0]
		txBuffer[0] = (address << 1);
    3810:	lsls	r0, r1, #1
        wire->write(reg);
    3812:	mov	r1, r2
		transmitting = 1;
    3814:	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    3818:	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    381c:	strb.w	r0, [r3, #165]	; 0xa5
    3820:	ldr	r0, [r4, #0]
    3822:	ldr	r3, [r0, #0]
    3824:	ldr	r3, [r3, #0]
    3826:	blx	r3
        wire->write(val);
    3828:	ldr	r0, [r4, #0]
    382a:	mov	r1, r6
    382c:	ldr	r3, [r0, #0]
    382e:	ldr	r3, [r3, #0]
    3830:	blx	r3
		return endTransmission(1);
    3832:	mov	r1, r5
    3834:	ldr	r0, [r4, #0]
    3836:	bl	4fb8 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    383a:	clz	r0, r0
    383e:	lsrs	r0, r0, #5
    3840:	pop	{r4, r5, r6, pc}
	...

00003844 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
    3844:	push	{r4, r5, r6, r7, lr}

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    3846:	movs	r4, #60	; 0x3c

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3848:	movw	lr, #365	; 0x16d
    384c:	movs	r6, #100	; 0x64
    384e:	mov.w	ip, #400	; 0x190
    tm->sec  = time % 60; time /= 60; // now it is minutes
    3852:	udiv	r2, r0, r4
    tm->min  = time % 60; time /= 60; // now it is hours
    3856:	udiv	r3, r2, r4
    tm->sec  = time % 60; time /= 60; // now it is minutes
    385a:	mls	r0, r4, r2, r0
    tm->min  = time % 60; time /= 60; // now it is hours
    385e:	mls	r2, r4, r3, r2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    3862:	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    3864:	movs	r0, #24
    tm->min  = time % 60; time /= 60; // now it is hours
    3866:	strb	r2, [r1, #6]
    tm->hour = time % 24; time /= 24; // now it is days
    3868:	udiv	r2, r3, r0
    386c:	mls	r3, r0, r2, r3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3870:	adds	r0, r2, #4
    tm->hour = time % 24; time /= 24; // now it is days
    3872:	strb	r3, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3874:	movs	r3, #7
    3876:	udiv	r3, r0, r3
    387a:	rsb	r3, r3, r3, lsl #3
    387e:	subs	r0, r0, r3
    3880:	strb	r0, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3882:	movs	r0, #0
    days = 0;
    3884:	mov	r4, r0
    3886:	uxtb	r3, r0
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3888:	addw	r3, r3, #1970	; 0x7b2
    388c:	ands.w	r7, r3, #3
    3890:	bne.n	3914 <time2date(unsigned long, datetime_t*)+0xd0>
    3892:	sdiv	r5, r3, r6
    3896:	mls	r5, r6, r5, r3
    389a:	cmp	r5, #0
    389c:	bne.n	391a <time2date(unsigned long, datetime_t*)+0xd6>
    389e:	sdiv	r5, r3, ip
    38a2:	mls	r5, ip, r5, r3
    38a6:	cmp	r5, #0
    38a8:	ite	ne
    38aa:	movne	r5, lr
    38ac:	moveq.w	r5, #366	; 0x16e
    38b0:	add	r4, r5
    38b2:	adds	r0, #1
    38b4:	cmp	r2, r4
    38b6:	bcs.n	3886 <time2date(unsigned long, datetime_t*)+0x42>
    38b8:	movs	r0, #100	; 0x64
      year++;
    }
    tm->year = year+YEAR0;
    38ba:	strh	r3, [r1, #0]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    38bc:	udiv	r6, r3, r0
    38c0:	mls	r6, r0, r6, r3
    38c4:	mov.w	r0, #400	; 0x190
    38c8:	udiv	r5, r3, r0
    38cc:	mls	r3, r0, r5, r3
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    38d0:	cbnz	r7, 3920 <time2date(unsigned long, datetime_t*)+0xdc>
    38d2:	cbnz	r6, 3926 <time2date(unsigned long, datetime_t*)+0xe2>
    38d4:	cmp	r3, #0
    38d6:	movw	r0, #365	; 0x16d
    38da:	it	eq
    38dc:	moveq.w	r0, #366	; 0x16e
    time  -= days; // now it is days in this year, starting at 0
    38e0:	subs	r2, r2, r4
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    38e2:	ldr.w	ip, [pc, #88]	; 393c <time2date(unsigned long, datetime_t*)+0xf8>
    time  -= days; // now it is days in this year, starting at 0
    38e6:	add	r2, r0
    38e8:	movs	r0, #0
      if (month==1) { // february
    38ea:	cmp	r0, #1
    38ec:	uxtb	r5, r0
    38ee:	bne.n	392c <time2date(unsigned long, datetime_t*)+0xe8>
        if (LEAP_YEAR(year)) {
    38f0:	cbnz	r7, 3932 <time2date(unsigned long, datetime_t*)+0xee>
    38f2:	cbnz	r6, 3936 <time2date(unsigned long, datetime_t*)+0xf2>
          monthLength=29;
    38f4:	cmp	r3, #0
    38f6:	ite	ne
    38f8:	movne	r4, #28
    38fa:	moveq	r4, #29
      }
      
      if (time >= monthLength) {
    38fc:	cmp	r4, r2
    38fe:	bhi.n	390a <time2date(unsigned long, datetime_t*)+0xc6>
    for (month=0; month<12; month++) {
    3900:	adds	r0, #1
        time -= monthLength;
    3902:	subs	r2, r2, r4
    for (month=0; month<12; month++) {
    3904:	cmp	r0, #12
    3906:	bne.n	38ea <time2date(unsigned long, datetime_t*)+0xa6>
    3908:	mov	r5, r0
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    390a:	adds	r5, #1
    tm->day = time + 1;     // day of month
    390c:	adds	r2, #1
    tm->month = month + 1;  // jan is month 1  
    390e:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
    3910:	strb	r2, [r1, #3]
  }
    3912:	pop	{r4, r5, r6, r7, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3914:	movw	r5, #365	; 0x16d
    3918:	b.n	38b0 <time2date(unsigned long, datetime_t*)+0x6c>
    391a:	mov.w	r5, #366	; 0x16e
    391e:	b.n	38b0 <time2date(unsigned long, datetime_t*)+0x6c>
    days -= LEAP_YEAR(year) ? 366 : 365;
    3920:	movw	r0, #365	; 0x16d
    3924:	b.n	38e0 <time2date(unsigned long, datetime_t*)+0x9c>
    3926:	mov.w	r0, #366	; 0x16e
    392a:	b.n	38e0 <time2date(unsigned long, datetime_t*)+0x9c>
        monthLength = monthDays[month];
    392c:	ldrb.w	r4, [r0, ip]
    3930:	b.n	38fc <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=28;
    3932:	movs	r4, #28
    3934:	b.n	38fc <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=29;
    3936:	movs	r4, #29
    3938:	b.n	38fc <time2date(unsigned long, datetime_t*)+0xb8>
    393a:	nop
    393c:	.word	0x200010c5

00003940 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    3940:	ldrh	r3, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
    3942:	movw	r1, #1970	; 0x7b2
    seconds= year*(SECS_PER_DAY * 365);
    3946:	ldr	r2, [pc, #184]	; (3a00 <date2time(datetime_t*)+0xc0>)
    year=tm->year-YEAR0;
    3948:	adds	r3, #78	; 0x4e
    394a:	uxtb	r3, r3
  {
    394c:	push	{r4, r5, r6, r7, lr}
    seconds= year*(SECS_PER_DAY * 365);
    394e:	muls	r2, r3
    for (ii = 0; ii < year; ii++) {
    3950:	movs	r5, #100	; 0x64
    3952:	mov.w	r6, #400	; 0x190
    3956:	subw	r4, r1, #1970	; 0x7b2
    395a:	cmp	r3, r4
    395c:	bgt.n	39b8 <date2time(datetime_t*)+0x78>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    395e:	addw	r3, r3, #1970	; 0x7b2
    3962:	movs	r1, #100	; 0x64
    for (ii = 1; ii < tm->month; ii++) {
    3964:	ldrsb.w	r7, [r0, #2]
    3968:	ldr	r6, [pc, #152]	; (3a04 <date2time(datetime_t*)+0xc4>)
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    396a:	ldr.w	ip, [pc, #156]	; 3a08 <date2time(datetime_t*)+0xc8>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    396e:	udiv	r4, r3, r1
    3972:	mls	r4, r1, r4, r3
    3976:	mov.w	r1, #400	; 0x190
    397a:	udiv	r5, r3, r1
    397e:	mls	r5, r1, r5, r3
    for (ii = 1; ii < tm->month; ii++) {
    3982:	movs	r1, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3984:	and.w	r3, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    3988:	cmp	r7, r1
    398a:	bgt.n	39dc <date2time(datetime_t*)+0x9c>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    398c:	ldrsb.w	r3, [r0, #6]
    seconds+= tm->sec;
    3990:	mov.w	r4, #3600	; 0xe10
    seconds+= tm->hour * SECS_PER_HOUR;
    3994:	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    3998:	rsb	r3, r3, r3, lsl #4
    399c:	lsls	r3, r3, #2
    seconds+= tm->sec;
    399e:	mla	r3, r4, r1, r3
    39a2:	ldrsb.w	r1, [r0, #7]
    39a6:	add	r3, r1
    seconds+= (tm->day-1) * SECS_PER_DAY;
    39a8:	ldrsb.w	r1, [r0, #3]
    seconds+= tm->sec;
    39ac:	ldr	r0, [pc, #88]	; (3a08 <date2time(datetime_t*)+0xc8>)
    seconds+= (tm->day-1) * SECS_PER_DAY;
    39ae:	subs	r1, #1
    seconds+= tm->sec;
    39b0:	mla	r0, r0, r1, r3
    return seconds; 
  }
    39b4:	add	r0, r2
    39b6:	pop	{r4, r5, r6, r7, pc}
      if (LEAP_YEAR(ii)) {
    39b8:	lsls	r4, r1, #30
    39ba:	bne.n	39d8 <date2time(datetime_t*)+0x98>
    39bc:	sdiv	r4, r1, r5
    39c0:	mls	r4, r5, r4, r1
    39c4:	cbnz	r4, 39d0 <date2time(datetime_t*)+0x90>
    39c6:	sdiv	r4, r1, r6
    39ca:	mls	r4, r6, r4, r1
    39ce:	cbnz	r4, 39d8 <date2time(datetime_t*)+0x98>
        seconds += SECS_PER_DAY;   // add extra days for leap years
    39d0:	add.w	r2, r2, #86016	; 0x15000
    39d4:	add.w	r2, r2, #384	; 0x180
    for (ii = 0; ii < year; ii++) {
    39d8:	adds	r1, #1
    39da:	b.n	3956 <date2time(datetime_t*)+0x16>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    39dc:	cmp	r1, #2
    39de:	bne.n	39f4 <date2time(datetime_t*)+0xb4>
    39e0:	cbnz	r3, 39f4 <date2time(datetime_t*)+0xb4>
    39e2:	cbnz	r4, 39e6 <date2time(datetime_t*)+0xa6>
    39e4:	cbnz	r5, 39f4 <date2time(datetime_t*)+0xb4>
        seconds += SECS_PER_DAY * 29;
    39e6:	add.w	r2, r2, #2490368	; 0x260000
    39ea:	add.w	r2, r2, #15232	; 0x3b80
    for (ii = 1; ii < tm->month; ii++) {
    39ee:	adds	r1, #1
    39f0:	adds	r6, #1
    39f2:	b.n	3988 <date2time(datetime_t*)+0x48>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    39f4:	ldrb.w	lr, [r6]
    39f8:	mla	r2, ip, lr, r2
    39fc:	b.n	39ee <date2time(datetime_t*)+0xae>
    39fe:	nop
    3a00:	.word	0x01e13380
    3a04:	.word	0x200010c5
    3a08:	.word	0x00015180

00003a0c <rtcXferTime()>:
    3a0c:	bx	lr

00003a0e <rtcGetTimestamp()>:
      return rtc.stringTimeStamp();
    }
    #else
      return 0;
    #endif
  }
    3a0e:	movs	r0, #0
    3a10:	bx	lr

00003a12 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    3a12:	push	{r0, r1, r2, lr}
    3a14:	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    3a16:	bl	b744 <rtc_get>
    3a1a:	ldr	r1, [sp, #4]
    3a1c:	bl	3844 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    3a20:	movs	r0, #1
    3a22:	add	sp, #12
    3a24:	ldr.w	pc, [sp], #4

00003a28 <rtc_set_datetime(datetime_t*)>:

  bool rtc_set_datetime(datetime_t *t)
  {
    3a28:	push	{r3, lr}
    rtc_set(date2time(t));
    3a2a:	bl	3940 <date2time(datetime_t*)>
    3a2e:	bl	b768 <rtc_set>
    return 1;
  }
    3a32:	movs	r0, #1
    3a34:	pop	{r3, pc}

00003a36 <rtcSetDate(int, int, int)>:

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    3a36:	push	{r0, r1, r4, r5, r6, lr}
    3a38:	mov	r5, r1
    3a3a:	mov	r4, r2
    3a3c:	mov	r6, r0
    rtc_get_datetime(&t);
    3a3e:	mov	r0, sp
    3a40:	bl	3a12 <rtc_get_datetime(datetime_t*)>
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
    3a44:	mov	r0, sp
    t.year=year;
    3a46:	strh.w	r6, [sp]
    t.month=month;
    3a4a:	strb.w	r5, [sp, #2]
    t.day=day;
    3a4e:	strb.w	r4, [sp, #3]
    rtc_set_datetime(&t);
    3a52:	bl	3a28 <rtc_set_datetime(datetime_t*)>
  }
    3a56:	add	sp, #8
    3a58:	pop	{r4, r5, r6, pc}

00003a5a <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    3a5a:	push	{r0, r1, r4, r5, r6, lr}
    3a5c:	mov	r5, r1
    3a5e:	mov	r4, r2
    3a60:	mov	r6, r0
    rtc_get_datetime(&t);
    3a62:	mov	r0, sp
    3a64:	bl	3a12 <rtc_get_datetime(datetime_t*)>
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
    3a68:	mov	r0, sp
    t.hour=hour;
    3a6a:	strb.w	r6, [sp, #5]
    t.min=minutes;
    3a6e:	strb.w	r5, [sp, #6]
    t.sec=seconds;
    3a72:	strb.w	r4, [sp, #7]
    rtc_set_datetime(&t);
    3a76:	bl	3a28 <rtc_set_datetime(datetime_t*)>
  }
    3a7a:	add	sp, #8
    3a7c:	pop	{r4, r5, r6, pc}

00003a7e <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    3a7e:	push	{r3, r4, r5, lr}
    3a80:	mov	r4, r0
    3a82:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a84:	movs	r2, #60	; 0x3c
    3a86:	mov	r1, r5
    3a88:	mov	r0, r4
    3a8a:	bl	c058 <usb_mtp_send>
    3a8e:	cmp	r0, #0
    3a90:	ble.n	3a84 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    3a92:	pop	{r3, r4, r5, pc}

00003a94 <MTPD::write(char const*, int) [clone .part.0]>:
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    3a94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a98:	mov	r7, r1
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3a9a:	add.w	r1, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    3a9e:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    3aa0:	ldr.w	r3, [r1, #1064]	; 0x428
    3aa4:	cbnz	r3, 3aae <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    3aa6:	add.w	r2, r0, #544	; 0x220
    3aaa:	ldr	r4, [pc, #92]	; (3b08 <MTPD::write(char const*, int) [clone .part.0]+0x74>)
    3aac:	str	r2, [r4, #0]
        write_length_ += len;
    3aae:	add	r3, r6
        
        const char * src=data;
        //
        int pos = 0; // into data
    3ab0:	mov.w	r8, #0
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3ab4:	add.w	r9, r0, #1056	; 0x420
    3ab8:	ldr.w	sl, [pc, #76]	; 3b08 <MTPD::write(char const*, int) [clone .part.0]+0x74>
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3abc:	add.w	r4, r0, #544	; 0x220
        write_length_ += len;
    3ac0:	str.w	r3, [r1, #1064]	; 0x428
        while(pos<len)
    3ac4:	cmp	r6, r8
    3ac6:	bgt.n	3acc <MTPD::write(char const*, int) [clone .part.0]+0x38>
            dst=tx_data_buffer;
          }
        }
      }
    }
    3ac8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3acc:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    3ad0:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    3ad4:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3ad6:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    3ada:	mov	r0, r3
    3adc:	cmp	r5, r2
    3ade:	it	ge
    3ae0:	movge	r5, r2
    3ae2:	mov	r2, r5
          pos += to_copy;
    3ae4:	add	r8, r5
          memcpy(dst,src,to_copy);
    3ae6:	bl	a000 <memcpy>
    3aea:	mov	r3, r0
          src += to_copy;
    3aec:	add	r7, r5
          dst += to_copy;
    3aee:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3af0:	cmp	r9, r3
          dst += to_copy;
    3af2:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3af6:	bne.n	3ac4 <MTPD::write(char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3af8:	mov.w	r1, #512	; 0x200
    3afc:	mov	r0, r4
    3afe:	bl	3a7e <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    3b02:	str.w	r4, [sl]
    3b06:	b.n	3ac4 <MTPD::write(char const*, int) [clone .part.0]+0x30>
    3b08:	.word	0x20014850

00003b0c <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3b0c:	push	{r4, r5, r6, lr}
    3b0e:	mov	r5, r0
    storage_->StartGetObjectHandles(store, parent);
    3b10:	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    3b12:	subs	r4, r1, #1
    int num = 0;
    3b14:	movs	r6, #0
    storage_->StartGetObjectHandles(store, parent);
    3b16:	ldr	r3, [r0, #0]
    3b18:	mov	r1, r4
    3b1a:	ldr	r3, [r3, #28]
    3b1c:	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    3b1e:	ldr	r0, [r5, #0]
    3b20:	mov	r1, r4
    3b22:	ldr	r3, [r0, #0]
    3b24:	ldr	r3, [r3, #32]
    3b26:	blx	r3
    3b28:	cbnz	r0, 3b2e <MTPD::GetNumObjects(unsigned long, unsigned long)+0x22>
  }
    3b2a:	mov	r0, r6
    3b2c:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    3b2e:	adds	r6, #1
    3b30:	b.n	3b1e <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>

00003b32 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3b32:	ldr	r0, [r0, #0]
    3b34:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3b36:	push	{r4, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3b38:	ldr	r4, [r0, #0]
    3b3a:	ldr	r4, [r4, #76]	; 0x4c
    3b3c:	blx	r4
    }
    3b3e:	movw	r2, #8193	; 0x2001
    3b42:	movw	r3, #8197	; 0x2005
    3b46:	cmp	r0, #0
    3b48:	ite	ne
    3b4a:	movne	r0, r2
    3b4c:	moveq	r0, r3
    3b4e:	pop	{r4, pc}

00003b50 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    3b50:	ldr	r0, [r0, #0]
    3b52:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3b54:	push	{r4}
      return storage_->copy(handle,store1,newHandle);
    3b56:	ldr	r4, [r0, #0]
    3b58:	ldr	r4, [r4, #80]	; 0x50
    3b5a:	mov	ip, r4
    }
    3b5c:	ldr.w	r4, [sp], #4
      return storage_->copy(handle,store1,newHandle);
    3b60:	bx	ip
	...

00003b64 <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    3b64:	ldr	r3, [pc, #8]	; (3b70 <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    3b66:	ldr	r0, [r0, #0]
      sessionID_ = id;
    3b68:	str	r1, [r3, #0]
      storage_->ResetIndex();
    3b6a:	ldr	r3, [r0, #0]
    3b6c:	ldr	r3, [r3, #68]	; 0x44
    3b6e:	bx	r3
    3b70:	.word	0x200151b0

00003b74 <MTPD::pull_packet(unsigned char*)>:
    {
    3b74:	push	{r4, lr}
    3b76:	mov	r4, r1
      while(!usb_mtp_available());
    3b78:	bl	c028 <usb_mtp_available>
    3b7c:	cmp	r0, #0
    3b7e:	beq.n	3b78 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    3b80:	mov	r0, r4
    3b82:	movs	r1, #60	; 0x3c
    }
    3b84:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    3b88:	b.w	bf94 <usb_mtp_recv>

00003b8c <MTPD::write(char const*, int)>:
    { if (write_get_length_) 
    3b8c:	add.w	r3, r0, #8192	; 0x2000
    3b90:	push	{r4, r5}
    3b92:	ldrb.w	r5, [r3, #1060]	; 0x424
    3b96:	cbz	r5, 3ba6 <MTPD::write(char const*, int)+0x1a>
        write_length_ += len;
    3b98:	ldr.w	r1, [r3, #1064]	; 0x428
    3b9c:	add	r1, r2
    }
    3b9e:	pop	{r4, r5}
        write_length_ += len;
    3ba0:	str.w	r1, [r3, #1064]	; 0x428
    }
    3ba4:	bx	lr
    3ba6:	pop	{r4, r5}
    3ba8:	b.w	3a94 <MTPD::write(char const*, int) [clone .part.0]>

00003bac <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
    3bac:	push	{r0, r1, r2, lr}
    3bae:	movs	r2, #1
    3bb0:	strb.w	r1, [sp, #7]
    3bb4:	add.w	r1, sp, #7
    3bb8:	bl	3b8c <MTPD::write(char const*, int)>
    3bbc:	add	sp, #12
    3bbe:	ldr.w	pc, [sp], #4

00003bc2 <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
    3bc2:	push	{r0, r1, r2, lr}
    3bc4:	movs	r2, #2
    3bc6:	strh.w	r1, [sp, #6]
    3bca:	add.w	r1, sp, #6
    3bce:	bl	3b8c <MTPD::write(char const*, int)>
    3bd2:	add	sp, #12
    3bd4:	ldr.w	pc, [sp], #4

00003bd8 <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    3bd8:	push	{r3, r4, r5, lr}
    3bda:	mov	r4, r1
    if (*str) 
    3bdc:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    3bde:	mov	r5, r0
    if (*str) 
    3be0:	cbz	r1, 3c0a <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    3be2:	mov	r0, r4
    3be4:	subs	r4, #1
    3be6:	bl	eb80 <strlen>
    3bea:	adds	r0, #1
    3bec:	uxtb	r1, r0
    3bee:	mov	r0, r5
    3bf0:	bl	3bac <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3bf4:	ldrb.w	r1, [r4, #1]!
    3bf8:	mov	r0, r5
    3bfa:	cbnz	r1, 3c04 <MTPD::writestring(char const*)+0x2c>
  }
    3bfc:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3c00:	b.w	3bc2 <MTPD::write16(unsigned short)>
    3c04:	bl	3bc2 <MTPD::write16(unsigned short)>
    3c08:	b.n	3bf4 <MTPD::writestring(char const*)+0x1c>
  }
    3c0a:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    3c0e:	b.w	3bac <MTPD::write8(unsigned char)>
	...

00003c14 <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    3c14:	movw	r3, #54274	; 0xd402
    3c18:	cmp	r1, r3
    3c1a:	bne.n	3c22 <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    3c1c:	ldr	r1, [pc, #4]	; (3c24 <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    3c1e:	b.w	3bd8 <MTPD::writestring(char const*)>
  }
    3c22:	bx	lr
    3c24:	.word	0x2000114d

00003c28 <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    3c28:	movw	r3, #54274	; 0xd402
    3c2c:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    3c2e:	push	{r4, lr}
    3c30:	mov	r4, r0
    switch (prop) {
    3c32:	bne.n	3c66 <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    3c34:	bl	3bc2 <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    3c38:	mov	r0, r4
    3c3a:	movw	r1, #65535	; 0xffff
    3c3e:	bl	3bc2 <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    3c42:	mov	r0, r4
    3c44:	movs	r1, #0
    3c46:	bl	3bac <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    3c4a:	mov	r0, r4
    3c4c:	ldr	r1, [pc, #24]	; (3c68 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    3c4e:	bl	3bd8 <MTPD::writestring(char const*)>
    3c52:	mov	r0, r4
    3c54:	ldr	r1, [pc, #16]	; (3c68 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    3c56:	bl	3bd8 <MTPD::writestring(char const*)>
        write8(0);       // no form
    3c5a:	mov	r0, r4
    3c5c:	movs	r1, #0
  }
    3c5e:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    3c62:	b.w	3bac <MTPD::write8(unsigned char)>
  }
    3c66:	pop	{r4, pc}
    3c68:	.word	0x2000114d

00003c6c <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
    3c6c:	push	{r0, r1, r2, lr}
    3c6e:	movs	r2, #4
    3c70:	str	r1, [sp, #4]
    3c72:	add.w	r1, sp, r2
    3c76:	bl	3b8c <MTPD::write(char const*, int)>
    3c7a:	add	sp, #12
    3c7c:	ldr.w	pc, [sp], #4

00003c80 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    3c80:	push	{r4, r5, r6, lr}
    3c82:	mov	r4, r0
    3c84:	sub	sp, #24
    write16(100);  // MTP version
    3c86:	movs	r1, #100	; 0x64
    3c88:	ldr	r6, [pc, #240]	; (3d7c <MTPD::WriteDescriptor()+0xfc>)
    3c8a:	bl	3bc2 <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    3c8e:	movs	r1, #6
    3c90:	mov	r0, r4
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3c92:	movs	r5, #0
    write32(6);    // MTP extension
    3c94:	bl	3c6c <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    3c98:	movs	r1, #100	; 0x64
    3c9a:	mov	r0, r4
    3c9c:	bl	3bc2 <MTPD::write16(unsigned short)>
    writestring("microsoft.com: 1.0;");
    3ca0:	ldr	r1, [pc, #220]	; (3d80 <MTPD::WriteDescriptor()+0x100>)
    3ca2:	mov	r0, r4
    3ca4:	bl	3bd8 <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    3ca8:	movs	r1, #0
    3caa:	mov	r0, r4
    3cac:	bl	3bc2 <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    3cb0:	movs	r1, #20
    3cb2:	mov	r0, r4
    3cb4:	bl	3c6c <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3cb8:	adds	r5, #1
    3cba:	ldrh.w	r1, [r6], #2
    3cbe:	mov	r0, r4
    3cc0:	bl	3bc2 <MTPD::write16(unsigned short)>
    3cc4:	cmp	r5, #20
    3cc6:	bne.n	3cb8 <MTPD::WriteDescriptor()+0x38>
    write32(supported_event_num);      
    3cc8:	movs	r1, #4
    3cca:	mov	r0, r4
    3ccc:	bl	3c6c <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    3cd0:	movw	r1, #16388	; 0x4004
    3cd4:	mov	r0, r4
    3cd6:	bl	3bc2 <MTPD::write16(unsigned short)>
    3cda:	movw	r1, #16389	; 0x4005
    3cde:	mov	r0, r4
    3ce0:	bl	3bc2 <MTPD::write16(unsigned short)>
    3ce4:	movw	r1, #16395	; 0x400b
    3ce8:	mov	r0, r4
    3cea:	bl	3bc2 <MTPD::write16(unsigned short)>
    3cee:	movw	r1, #16396	; 0x400c
    3cf2:	mov	r0, r4
    3cf4:	bl	3bc2 <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    3cf8:	movs	r1, #1
    3cfa:	mov	r0, r4
    3cfc:	bl	3c6c <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    3d00:	movw	r1, #54274	; 0xd402
    3d04:	mov	r0, r4
    3d06:	bl	3bc2 <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    3d0a:	movs	r1, #0
    3d0c:	mov	r0, r4
    3d0e:	bl	3c6c <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    3d12:	movs	r1, #2
    3d14:	mov	r0, r4
    3d16:	bl	3c6c <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    3d1a:	mov.w	r1, #12288	; 0x3000
    3d1e:	mov	r0, r4
    3d20:	bl	3bc2 <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    3d24:	movw	r1, #12289	; 0x3001
    3d28:	mov	r0, r4
    3d2a:	bl	3bc2 <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    3d2e:	ldr	r1, [pc, #84]	; (3d84 <MTPD::WriteDescriptor()+0x104>)
    3d30:	mov	r0, r4
    3d32:	bl	3bd8 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    3d36:	ldr	r1, [pc, #80]	; (3d88 <MTPD::WriteDescriptor()+0x108>)
    3d38:	mov	r0, r4
    3d3a:	bl	3bd8 <MTPD::writestring(char const*)>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    3d3e:	vldr	s0, [pc, #76]	; 3d8c <MTPD::WriteDescriptor()+0x10c>
    3d42:	add	r2, sp, #4
    3d44:	movs	r1, #2
    3d46:	movs	r0, #3
    3d48:	bl	b2b4 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    3d4c:	mov	r2, r5
    3d4e:	ldr	r1, [pc, #64]	; (3d90 <MTPD::WriteDescriptor()+0x110>)
    3d50:	add	r0, sp, #4
    3d52:	bl	e918 <strlcat>
    writestring( buf );    
    3d56:	add	r1, sp, #4
    3d58:	mov	r0, r4
    3d5a:	bl	3bd8 <MTPD::writestring(char const*)>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3d5e:	ldr	r1, [pc, #52]	; (3d94 <MTPD::WriteDescriptor()+0x114>)
    3d60:	add	r2, sp, #4
    writestring( buf );    
    3d62:	movs	r3, #10
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3d64:	ldrh.w	r0, [r1, #2]!
    3d68:	subs	r3, #1
    3d6a:	strb.w	r0, [r2], #1
    3d6e:	bne.n	3d64 <MTPD::WriteDescriptor()+0xe4>
    writestring(buf);    
    3d70:	add	r1, sp, #4
    3d72:	mov	r0, r4
    3d74:	bl	3bd8 <MTPD::writestring(char const*)>
  }
    3d78:	add	sp, #24
    3d7a:	pop	{r4, r5, r6, pc}
    3d7c:	.word	0x20000b70
    3d80:	.word	0x20001129
    3d84:	.word	0x2000113d
    3d88:	.word	0x2000114d
    3d8c:	.word	0x3fcb851f
    3d90:	.word	0x20001142
    3d94:	.word	0x200022c2

00003d98 <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    3d98:	push	{r4, r5, r6, lr}
    3d9a:	mov	r4, r0
    uint32_t num=storage_->get_FSCount();
    3d9c:	ldr	r0, [r0, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3d9e:	movs	r6, #0
    uint32_t num=storage_->get_FSCount();
    3da0:	ldr	r3, [r0, #0]
    3da2:	ldr	r3, [r3, #4]
    3da4:	blx	r3
    write32(num); // number of storages (disks)
    3da6:	mov	r1, r0
    uint32_t num=storage_->get_FSCount();
    3da8:	mov	r5, r0
    write32(num); // number of storages (disks)
    3daa:	mov	r0, r4
    3dac:	bl	3c6c <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3db0:	cmp	r6, r5
    3db2:	bne.n	3db6 <MTPD::WriteStorageIDs()+0x1e>
  }
    3db4:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3db6:	adds	r6, #1
    3db8:	mov	r0, r4
    3dba:	mov	r1, r6
    3dbc:	bl	3c6c <MTPD::write32(unsigned long)>
    3dc0:	b.n	3db0 <MTPD::WriteStorageIDs()+0x18>

00003dc2 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3dc2:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    3dc4:	add.w	r7, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    3dc8:	mov	r4, r0
    3dca:	mov	r6, r2
    if (write_get_length_) {
    3dcc:	ldrb.w	r3, [r7, #1060]	; 0x424
    3dd0:	cbz	r3, 3de0 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    3dd2:	bl	3b0c <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    3dd6:	adds	r0, #1
      write_length_ *= 4;
    3dd8:	lsls	r0, r0, #2
    3dda:	str.w	r0, [r7, #1064]	; 0x428
  }
    3dde:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    3de0:	subs	r5, r1, #1
      write32(GetNumObjects(storage, parent));
    3de2:	bl	3b0c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    3de6:	mov	r1, r0
    3de8:	mov	r0, r4
    3dea:	bl	3c6c <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    3dee:	ldr	r0, [r4, #0]
    3df0:	mov	r2, r6
    3df2:	mov	r1, r5
    3df4:	ldr	r3, [r0, #0]
    3df6:	ldr	r3, [r3, #28]
    3df8:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    3dfa:	ldr	r0, [r4, #0]
    3dfc:	mov	r1, r5
    3dfe:	ldr	r3, [r0, #0]
    3e00:	ldr	r3, [r3, #32]
    3e02:	blx	r3
    3e04:	mov	r1, r0
    3e06:	cmp	r0, #0
    3e08:	beq.n	3dde <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    3e0a:	mov	r0, r4
    3e0c:	bl	3c6c <MTPD::write32(unsigned long)>
    3e10:	b.n	3dfa <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
	...

00003e14 <MTPD::GetObjectInfo(unsigned long)>:
  {
    3e14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e18:	mov	r4, r0
    3e1a:	sub	sp, #420	; 0x1a4
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    3e1c:	ldr	r0, [r0, #0]
    3e1e:	add	r5, sp, #96	; 0x60
    3e20:	add	r6, sp, #32
    3e22:	ldr	r3, [r0, #0]
    3e24:	add.w	r8, sp, #22
    3e28:	add	r7, sp, #28
    3e2a:	add	r2, sp, #160	; 0xa0
    3e2c:	str	r5, [sp, #12]
    3e2e:	str	r6, [sp, #8]
    3e30:	str.w	r8, [sp, #4]
    3e34:	str	r7, [sp, #0]
    3e36:	ldr.w	r9, [r3, #36]	; 0x24
    3e3a:	add	r3, sp, #24
    3e3c:	blx	r9
    uint32_t storage = Store2Storage(store);
    3e3e:	ldrh.w	r1, [sp, #22]
    write32(storage); // storage
    3e42:	mov	r0, r4
    3e44:	adds	r1, #1
    3e46:	bl	3c6c <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    3e4a:	ldr	r3, [sp, #24]
    3e4c:	movw	r1, #12289	; 0x3001
    3e50:	mov	r0, r4
    3e52:	adds	r3, #1
    3e54:	it	ne
    3e56:	movne	r1, #0
    3e58:	bl	3bc2 <MTPD::write16(unsigned short)>
    write16(0);  // protection
    3e5c:	mov	r0, r4
    3e5e:	movs	r1, #0
    3e60:	bl	3bc2 <MTPD::write16(unsigned short)>
    write32(size); // size
    3e64:	ldr	r1, [sp, #24]
    3e66:	mov	r0, r4
    3e68:	bl	3c6c <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    3e6c:	mov	r0, r4
    3e6e:	movs	r1, #0
    3e70:	bl	3bc2 <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    3e74:	mov	r0, r4
    3e76:	movs	r1, #0
    3e78:	bl	3c6c <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    3e7c:	mov	r0, r4
    3e7e:	movs	r1, #0
    3e80:	bl	3c6c <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    3e84:	mov	r0, r4
    3e86:	movs	r1, #0
    3e88:	bl	3c6c <MTPD::write32(unsigned long)>
    write32(0); // pix width
    3e8c:	mov	r0, r4
    3e8e:	movs	r1, #0
    3e90:	bl	3c6c <MTPD::write32(unsigned long)>
    write32(0); // pix height
    3e94:	mov	r0, r4
    3e96:	movs	r1, #0
    3e98:	bl	3c6c <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    3e9c:	mov	r0, r4
    3e9e:	movs	r1, #0
    3ea0:	bl	3c6c <MTPD::write32(unsigned long)>
    write32(parent); // parent
    3ea4:	ldr	r1, [sp, #28]
    3ea6:	mov	r0, r4
    3ea8:	bl	3c6c <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    3eac:	ldr	r1, [sp, #24]
    3eae:	mov	r0, r4
    3eb0:	adds	r3, r1, #1
    3eb2:	negs	r1, r3
    3eb4:	adcs	r1, r3
    3eb6:	bl	3bc2 <MTPD::write16(unsigned short)>
    write32(0); // association description
    3eba:	mov	r0, r4
    3ebc:	movs	r1, #0
    3ebe:	bl	3c6c <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    3ec2:	mov	r0, r4
    3ec4:	movs	r1, #0
    3ec6:	bl	3c6c <MTPD::write32(unsigned long)>
    writestring(filename);
    3eca:	add	r1, sp, #160	; 0xa0
    3ecc:	mov	r0, r4
    3ece:	bl	3bd8 <MTPD::writestring(char const*)>
    writestring(create);  // date created
    3ed2:	mov	r1, r6
    3ed4:	mov	r0, r4
    3ed6:	bl	3bd8 <MTPD::writestring(char const*)>
    writestring(modify);  // date modified
    3eda:	mov	r1, r5
    3edc:	mov	r0, r4
    3ede:	bl	3bd8 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    3ee2:	ldr	r1, [pc, #12]	; (3ef0 <MTPD::GetObjectInfo(unsigned long)+0xdc>)
    3ee4:	mov	r0, r4
    3ee6:	bl	3bd8 <MTPD::writestring(char const*)>
  }
    3eea:	add	sp, #420	; 0x1a4
    3eec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3ef0:	.word	0x20000db7

00003ef4 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    3ef4:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    3ef6:	ldr	r6, [pc, #36]	; (3f1c <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3ef8:	movs	r4, #0
    3efa:	ldr	r7, [pc, #36]	; (3f20 <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    3efc:	mov	r5, r0
      write32(propertyListNum);
    3efe:	ldr	r1, [r6, #0]
    3f00:	bl	3c6c <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3f04:	ldr	r3, [r6, #0]
    3f06:	cmp	r3, r4
    3f08:	bhi.n	3f0c <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    3f0a:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3f0c:	ldrh.w	r1, [r7], #2
    3f10:	mov	r0, r5
    3f12:	adds	r4, #1
    3f14:	bl	3bc2 <MTPD::write16(unsigned short)>
    3f18:	b.n	3f04 <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    3f1a:	nop
    3f1c:	.word	0x2000229c
    3f20:	.word	0x20000b5c

00003f24 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    3f24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f28:	mov	r4, r0
    3f2a:	sub	sp, #420	; 0x1a4
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    3f2c:	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    3f2e:	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    3f30:	add.w	r8, sp, #22
    3f34:	add.w	r9, sp, #96	; 0x60
    3f38:	ldr	r3, [r0, #0]
    3f3a:	add.w	sl, sp, #32
    3f3e:	add	r6, sp, #28
    3f40:	str.w	r8, [sp, #4]
    3f44:	add	r2, sp, #160	; 0xa0
    3f46:	str.w	r9, [sp, #12]
    3f4a:	str.w	sl, [sp, #8]
    { char name[MAX_FILENAME_LEN];
    3f4e:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    3f50:	str	r6, [sp, #0]
    3f52:	ldr.w	fp, [r3, #36]	; 0x24
    3f56:	add	r3, sp, #24
    3f58:	blx	fp
      switch(p2)
    3f5a:	movw	r2, #56331	; 0xdc0b
      uint32_t storage = Store2Storage(store);
    3f5e:	ldrh.w	r3, [sp, #22]
      switch(p2)
    3f62:	cmp	r5, r2
      dir = size == 0xFFFFFFFFUL;
    3f64:	ldr	r1, [sp, #24]
      uint32_t storage = Store2Storage(store);
    3f66:	add.w	r8, r3, #1
      switch(p2)
    3f6a:	bhi.n	3f8c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    3f6c:	cmp.w	r5, #56320	; 0xdc00
    3f70:	bls.n	3f9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    3f72:	sub.w	r5, r5, #56320	; 0xdc00
    3f76:	subs	r5, #1
    3f78:	cmp	r5, #10
    3f7a:	bhi.n	3f9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    3f7c:	tbb	[pc, r5]
    3f80:	.word	0x39201611
    3f84:	.word	0x27220e0e
    3f88:	.short	0x0e29
    3f8a:	.byte	0x2b
    3f8b:	.byte	0x00
    3f8c:	movw	r3, #56385	; 0xdc41
    3f90:	cmp	r5, r3
    3f92:	beq.n	3fe0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbc>
    3f94:	movw	r3, #56388	; 0xdc44
    3f98:	cmp	r5, r3
    3f9a:	beq.n	3fc4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa0>
    }
    3f9c:	add	sp, #420	; 0x1a4
    3f9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          write32(storage);
    3fa2:	mov	r1, r8
          write32(0);
    3fa4:	mov	r0, r4
    3fa6:	bl	3c6c <MTPD::write32(unsigned long)>
    }
    3faa:	b.n	3f9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(dir?0x3001:0x3000);
    3fac:	adds	r1, #1
    3fae:	movw	r1, #12289	; 0x3001
    3fb2:	it	ne
    3fb4:	movne.w	r1, #12288	; 0x3000
          write16(0);
    3fb8:	mov	r0, r4
    3fba:	bl	3bc2 <MTPD::write16(unsigned short)>
          break;
    3fbe:	b.n	3f9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(0);
    3fc0:	movs	r1, #0
    3fc2:	b.n	3fb8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
          writestring(name);
    3fc4:	add	r1, sp, #160	; 0xa0
          writestring(modify);
    3fc6:	mov	r0, r4
    3fc8:	bl	3bd8 <MTPD::writestring(char const*)>
          break;
    3fcc:	b.n	3f9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          writestring(create);
    3fce:	mov	r1, sl
    3fd0:	b.n	3fc6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          writestring(modify);
    3fd2:	mov	r1, r9
    3fd4:	b.n	3fc6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          write32((store==parent)? 0: parent);
    3fd6:	ldr	r1, [r6, #0]
    3fd8:	cmp	r3, r1
    3fda:	it	eq
    3fdc:	moveq	r1, #0
    3fde:	b.n	3fa4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>
          write32(p1);
    3fe0:	mov	r1, r7
    3fe2:	mov	r0, r4
    3fe4:	bl	3c6c <MTPD::write32(unsigned long)>
          write32(parent);
    3fe8:	ldr	r1, [r6, #0]
    3fea:	mov	r0, r4
    3fec:	bl	3c6c <MTPD::write32(unsigned long)>
          write32(storage);
    3ff0:	mov	r1, r8
    3ff2:	mov	r0, r4
    3ff4:	bl	3c6c <MTPD::write32(unsigned long)>
          write32(0);
    3ff8:	movs	r1, #0
    3ffa:	b.n	3fa4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>

00003ffc <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    3ffc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4000:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4002:	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    4004:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    4006:	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4008:	ldr	r3, [r0, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    400a:	mov.w	fp, #0
    400e:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    4010:	ldr	r6, [pc, #228]	; (40f8 <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    4012:	ldr	r3, [r3, #20]
    4014:	blx	r3
    4016:	cmp	r0, #0
    4018:	mov	r0, r4
    401a:	ite	ne
    401c:	movne	r1, #1
    401e:	moveq	r1, #4
    4020:	bl	3bc2 <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    4024:	ldr	r0, [r4, #0]
    4026:	mov	r1, r7
    4028:	ldr	r3, [r0, #0]
    402a:	ldr	r3, [r3, #24]
    402c:	blx	r3
    402e:	adds	r0, #1
    4030:	uxth	r1, r0
    4032:	mov	r0, r4
    4034:	bl	3bc2 <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    4038:	mov	r0, r4
    403a:	movs	r1, #0
    403c:	bl	3bc2 <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    4040:	ldr	r0, [r4, #0]
    4042:	mov	r1, r7
    4044:	ldr	r3, [r0, #0]
    4046:	ldr	r3, [r3, #12]
    4048:	blx	r3
    404a:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    404c:	ldr	r0, [r4, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    404e:	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    4050:	mov	r1, r7
    4052:	ldr	r3, [r0, #0]
    4054:	ldr	r3, [r3, #16]
    4056:	blx	r3
    4058:	ldr	r3, [r6, #0]
    405a:	mov	r9, r0
    405c:	mov	sl, r1
    405e:	ldr	r3, [r3, #4]
    4060:	movs	r2, #5
    4062:	ldr	r1, [pc, #152]	; (40fc <MTPD::GetStorageInfo(unsigned long)+0x100>)
    4064:	mov	r0, r6
    4066:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    4068:	movs	r3, #10
    406a:	mov	r2, r5
    406c:	mov	r0, r6
    406e:	strd	r3, fp, [sp]
    4072:	mov	r3, r8
    4074:	bl	c532 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    4078:	mov	r0, r6
    407a:	bl	c4cc <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    407e:	ldr	r3, [r6, #0]
    4080:	ldr	r1, [pc, #124]	; (4100 <MTPD::GetStorageInfo(unsigned long)+0x104>)
    4082:	movs	r2, #5
    4084:	ldr	r3, [r3, #4]
    4086:	mov	r0, r6
    4088:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    408a:	movs	r3, #10
    408c:	mov	r2, r9
    408e:	mov	r0, r6
    4090:	str	r3, [sp, #0]
    4092:	mov	r3, sl
    4094:	str.w	fp, [sp, #4]
    4098:	bl	c532 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    409c:	mov	r0, r6
    409e:	bl	c4cc <Print::println()>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    40a2:	movs	r2, #8
    40a4:	mov	r0, r4
    40a6:	add.w	r1, sp, r2
    40aa:	strd	r5, r8, [sp, #8]
    40ae:	bl	3b8c <MTPD::write(char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    40b2:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    40b6:	mov.w	r2, #8
    40ba:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    40bc:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    40c0:	add.w	r1, sp, r2
    40c4:	strd	r5, r3, [sp, #8]
    40c8:	bl	3b8c <MTPD::write(char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    40cc:	mov	r0, r4
    40ce:	mov.w	r1, #4294967295
    40d2:	bl	3c6c <MTPD::write32(unsigned long)>
    const char *name = storage_->get_FSName(store);
    40d6:	ldr	r0, [r4, #0]
    40d8:	mov	r1, r7
    40da:	ldr	r3, [r0, #0]
    40dc:	ldr	r3, [r3, #8]
    40de:	blx	r3
    40e0:	mov	r1, r0
    writestring(name);  // storage descriptor
    40e2:	mov	r0, r4
    40e4:	bl	3bd8 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    40e8:	ldr	r1, [pc, #24]	; (4104 <MTPD::GetStorageInfo(unsigned long)+0x108>)
    40ea:	mov	r0, r4
  }
    40ec:	add	sp, #20
    40ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    40f2:	b.w	3bd8 <MTPD::writestring(char const*)>
    40f6:	nop
    40f8:	.word	0x20001cf4
    40fc:	.word	0x2000111d
    4100:	.word	0x20001123
    4104:	.word	0x20000db7

00004108 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    4108:	movw	r2, #56331	; 0xdc0b
    410c:	cmp	r1, r2
    {
    410e:	push	{r0, r1, r4, r6, r7, lr}
    4110:	mov	r4, r0
      switch(p1)
    4112:	bhi.n	4134 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    4114:	cmp.w	r1, #56320	; 0xdc00
    4118:	bls.n	4144 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    411a:	sub.w	r3, r1, #56320	; 0xdc00
    411e:	subs	r3, #1
    4120:	cmp	r3, #10
    4122:	bhi.n	4144 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    4124:	tbb	[pc, r3]
    4128:	.word	0x413e2210
    412c:	.word	0x69570e0e
    4130:	.short	0x0e75
    4132:	.byte	0x78
    4133:	.byte	0x00
    4134:	movw	r2, #56385	; 0xdc41
    4138:	cmp	r1, r2
    413a:	beq.n	421e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    413c:	movw	r2, #56388	; 0xdc44
    4140:	cmp	r1, r2
    4142:	beq.n	4200 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    4144:	add	sp, #8
    4146:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    4148:	movw	r1, #56321	; 0xdc01
          write16(0xDC0B);
    414c:	mov	r0, r4
    414e:	bl	3bc2 <MTPD::write16(unsigned short)>
          write16(6);
    4152:	mov	r0, r4
    4154:	movs	r1, #6
    4156:	bl	3bc2 <MTPD::write16(unsigned short)>
          write8(0); //get
    415a:	mov	r0, r4
    415c:	movs	r1, #0
    415e:	bl	3bac <MTPD::write8(unsigned char)>
          write32(0);
    4162:	movs	r1, #0
    4164:	mov	r0, r4
    4166:	bl	3c6c <MTPD::write32(unsigned long)>
          write32(0);
    416a:	b.n	418e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    416c:	movw	r1, #56322	; 0xdc02
          write16(0xDC03);
    4170:	mov	r0, r4
    4172:	bl	3bc2 <MTPD::write16(unsigned short)>
          write16(0x004);
    4176:	movs	r1, #4
    4178:	mov	r0, r4
    417a:	bl	3bc2 <MTPD::write16(unsigned short)>
          write8(0); //get
    417e:	movs	r1, #0
    4180:	mov	r0, r4
    4182:	bl	3bac <MTPD::write8(unsigned char)>
          write16(0);
    4186:	movs	r1, #0
    4188:	mov	r0, r4
    418a:	bl	3bc2 <MTPD::write16(unsigned short)>
          write32(0);
    418e:	mov	r0, r4
    4190:	movs	r1, #0
    4192:	bl	3c6c <MTPD::write32(unsigned long)>
          write8(0);
    4196:	movs	r1, #0
    4198:	mov	r0, r4
    }
    419a:	add	sp, #8
    419c:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    41a0:	b.w	3bac <MTPD::write8(unsigned char)>
          write16(0xDC03);
    41a4:	movw	r1, #56323	; 0xdc03
    41a8:	b.n	4170 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    41aa:	movw	r1, #56324	; 0xdc04
    41ae:	bl	3bc2 <MTPD::write16(unsigned short)>
          write16(0x008);
    41b2:	movs	r1, #8
    41b4:	mov	r0, r4
    41b6:	bl	3bc2 <MTPD::write16(unsigned short)>
          write8(0); //get
    41ba:	movs	r1, #0
    41bc:	mov	r0, r4
    41be:	bl	3bac <MTPD::write8(unsigned char)>
          write64(0);
    41c2:	movs	r2, #0
    41c4:	movs	r3, #0
    41c6:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    41ca:	movs	r2, #8
    41cc:	mov	r1, sp
    41ce:	mov	r0, r4
    41d0:	bl	3b8c <MTPD::write(char const*, int)>
          write32(0);
    41d4:	b.n	418e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    41d6:	movw	r1, #56327	; 0xdc07
    41da:	bl	3bc2 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    41de:	movw	r1, #65535	; 0xffff
    41e2:	mov	r0, r4
    41e4:	bl	3bc2 <MTPD::write16(unsigned short)>
          write8(1); //get/set
    41e8:	movs	r1, #1
          write8(0); //get
    41ea:	mov	r0, r4
    41ec:	bl	3bac <MTPD::write8(unsigned char)>
          write8(0);
    41f0:	movs	r1, #0
    41f2:	mov	r0, r4
    41f4:	bl	3bac <MTPD::write8(unsigned char)>
    41f8:	b.n	418e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    41fa:	movw	r1, #56328	; 0xdc08
          write16(0xDC09);
    41fe:	mov	r0, r4
          write16(0xDC44);
    4200:	bl	3bc2 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    4204:	movw	r1, #65535	; 0xffff
    4208:	mov	r0, r4
    420a:	bl	3bc2 <MTPD::write16(unsigned short)>
          write8(0); //get
    420e:	movs	r1, #0
    4210:	b.n	41ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    4212:	movw	r1, #56329	; 0xdc09
    4216:	b.n	41fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    4218:	movw	r1, #56331	; 0xdc0b
    421c:	b.n	414c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    421e:	bl	3bc2 <MTPD::write16(unsigned short)>
          write16(0x0A);
    4222:	movs	r1, #10
    4224:	mov	r0, r4
    4226:	movs	r6, #0
    4228:	bl	3bc2 <MTPD::write16(unsigned short)>
          write8(0); //get
    422c:	movs	r7, #0
    422e:	movs	r1, #0
    4230:	mov	r0, r4
    4232:	bl	3bac <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    4236:	movs	r2, #8
    4238:	mov	r1, sp
    423a:	mov	r0, r4
    423c:	strd	r6, r7, [sp]
    4240:	bl	3b8c <MTPD::write(char const*, int)>
          write64(0);
    4244:	strd	r6, r7, [sp]
    4248:	b.n	41ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

0000424a <MTPD::GetObject(unsigned long)>:

    void MTPD::GetObject(uint32_t object_id) 
    {
    424a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    424e:	mov	r6, r0
      uint32_t size = storage_->GetSize(object_id);
    4250:	ldr	r0, [r0, #0]
    4252:	ldr	r3, [r0, #0]

      if (write_get_length_) {
    4254:	add.w	r5, r6, #8192	; 0x2000
    {
    4258:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    425c:	ldr	r3, [r3, #40]	; 0x28
    {
    425e:	sub	sp, #20
    4260:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    4264:	blx	r3
      if (write_get_length_) {
    4266:	ldrb.w	r4, [r5, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    426a:	mov	r8, r0
      if (write_get_length_) {
    426c:	cbz	r4, 4282 <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    426e:	ldr.w	r3, [r5, #1064]	; 0x428
    4272:	add	r3, r0
    4274:	str.w	r3, [r5, #1064]	; 0x428
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    4278:	add	sp, #20
    427a:	vpop	{d8}
    427e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    4282:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    4286:	movs	r7, #12
    4288:	add.w	fp, r6, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    428c:	add.w	sl, r6, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    4290:	str.w	r3, [r5, #1056]	; 0x420
        uint32_t pos = 0; // into data
    4294:	str	r4, [sp, #12]
        while(pos<size)
    4296:	ldr	r3, [sp, #12]
    4298:	cmp	r3, r8
    429a:	bcc.n	42b6 <MTPD::GetObject(unsigned long)+0x6c>
        if(len>0)
    429c:	cmp	r7, #0
    429e:	beq.n	4278 <MTPD::GetObject(unsigned long)+0x2e>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    42a0:	mov.w	r1, #512	; 0x200
    42a4:	add.w	r0, r6, #544	; 0x220
    }
    42a8:	add	sp, #20
    42aa:	vpop	{d8}
    42ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    42b2:	b.w	3a7e <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
          if(disk_pos==DISK_BUFFER_SIZE)
    42b6:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    42ba:	ldr	r2, [sp, #12]
          if(disk_pos==DISK_BUFFER_SIZE)
    42bc:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    42c0:	sub.w	r9, r8, r2
          if(disk_pos==DISK_BUFFER_SIZE)
    42c4:	bne.n	42e8 <MTPD::GetObject(unsigned long)+0x9e>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    42c6:	ldr	r0, [r6, #0]
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    42c8:	cmp.w	r9, #8192	; 0x2000
    42cc:	it	cc
    42ce:	movcc	r3, r9
    42d0:	vmov	r1, s16
    42d4:	ldr	r2, [r0, #0]
    42d6:	str	r3, [sp, #0]
    42d8:	ldr	r3, [r2, #48]	; 0x30
    42da:	ldr	r2, [sp, #12]
    42dc:	mov	r4, r3
    42de:	mov	r3, fp
    42e0:	blx	r4
            disk_pos=0;
    42e2:	movs	r3, #0
    42e4:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    42e8:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    42ec:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    42f0:	add.w	r0, sl, r7
    42f4:	cmp	r9, r3
    42f6:	it	cs
    42f8:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    42fa:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    42fe:	add	r1, fp
    4300:	cmp	r9, r3
    4302:	it	cs
    4304:	movcs	r9, r3
    4306:	mov	r2, r9
          len += to_copy;
    4308:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    430a:	bl	a000 <memcpy>
          disk_pos += to_copy;
    430e:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    4312:	cmp.w	r7, #512	; 0x200
          disk_pos += to_copy;
    4316:	add	r3, r9
    4318:	str.w	r3, [r5, #1056]	; 0x420
          pos += to_copy;
    431c:	ldr	r3, [sp, #12]
    431e:	add	r3, r9
    4320:	str	r3, [sp, #12]
          if(len==MTP_TX_SIZE)
    4322:	bne.n	4296 <MTPD::GetObject(unsigned long)+0x4c>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4324:	mov	r1, r7
    4326:	mov	r0, sl
            len=0;
    4328:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    432a:	bl	3a7e <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    432e:	b.n	4296 <MTPD::GetObject(unsigned long)+0x4c>

00004330 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    4330:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4334:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    4336:	ldr	r0, [r0, #0]
    {
    4338:	mov	r4, r3
    433a:	mov	r6, r2
      uint32_t size = storage_->GetSize(object_id);
    433c:	ldr	r3, [r0, #0]

      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
    433e:	add.w	r5, r8, #8192	; 0x2000
    {
    4342:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    4346:	ldr	r3, [r3, #40]	; 0x28
    {
    4348:	sub	sp, #20
    434a:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    434e:	blx	r3
      size -= offset;
    4350:	subs	r0, r0, r6
      if(NumBytes == 0xffffffff) NumBytes=size;
    4352:	cmp.w	r4, #4294967295
    4356:	it	eq
    4358:	moveq	r4, r0
      if (NumBytes<size) size=NumBytes;
    435a:	cmp	r4, r0
    435c:	mov	r3, r4
    435e:	it	cs
    4360:	movcs	r3, r0
    4362:	str	r3, [sp, #8]
      if (write_get_length_) {
    4364:	ldrb.w	r3, [r5, #1060]	; 0x424
    4368:	str	r3, [sp, #12]
    436a:	cbz	r3, 4384 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x54>
        write_length_ += size;
    436c:	ldr.w	r3, [r5, #1064]	; 0x428
    4370:	ldr	r2, [sp, #8]
    4372:	add	r3, r2
    4374:	str.w	r3, [r5, #1064]	; 0x428
            len=0;
          }
        }
      }
      return size;
    }
    4378:	ldr	r0, [sp, #8]
    437a:	add	sp, #20
    437c:	vpop	{d8}
    4380:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    4384:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    4388:	movs	r7, #12
    438a:	add.w	fp, r8, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    438e:	add.w	sl, r8, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    4392:	str.w	r3, [r5, #1056]	; 0x420
        while(pos<size)
    4396:	ldr	r3, [sp, #8]
    4398:	cmp	r3, r6
    439a:	bls.n	4378 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x48>
          if(disk_pos==DISK_BUFFER_SIZE)
    439c:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    43a0:	ldr	r2, [sp, #8]
          if(disk_pos==DISK_BUFFER_SIZE)
    43a2:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    43a6:	sub.w	r9, r2, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    43aa:	bne.n	43d0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa0>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    43ac:	ldr.w	r0, [r8]
    43b0:	cmp.w	r9, #8192	; 0x2000
    43b4:	it	cc
    43b6:	movcc	r3, r9
    43b8:	vmov	r1, s16
    43bc:	ldr	r2, [r0, #0]
    43be:	str	r3, [sp, #0]
    43c0:	ldr	r3, [r2, #48]	; 0x30
    43c2:	mov	r2, r6
    43c4:	mov	r4, r3
    43c6:	mov	r3, fp
    43c8:	blx	r4
            disk_pos=0;
    43ca:	ldr	r3, [sp, #12]
    43cc:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    43d0:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    43d4:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    43d8:	add.w	r0, sl, r7
    43dc:	cmp	r9, r3
    43de:	it	cs
    43e0:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    43e2:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    43e6:	add	r1, fp
    43e8:	cmp	r9, r3
    43ea:	it	cs
    43ec:	movcs	r9, r3
    43ee:	mov	r2, r9
          len += to_copy;
    43f0:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    43f2:	bl	a000 <memcpy>
          disk_pos += to_copy;
    43f6:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    43fa:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    43fe:	add	r6, r9
          disk_pos += to_copy;
    4400:	add	r3, r9
    4402:	str.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    4406:	bne.n	4396 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4408:	mov	r1, r7
    440a:	mov	r0, sl
            len=0;
    440c:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    440e:	bl	3a7e <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4412:	b.n	4396 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>

00004414 <MTPD::read(char*, unsigned long)>:
      printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    4414:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4418:	mov	r8, r0
    441a:	mov	r5, r1
      static int index=0;
      if(!size) 
    441c:	mov	r4, r2
    441e:	ldr.w	fp, [pc, #84]	; 4474 <MTPD::read(char*, unsigned long)+0x60>
    4422:	cbz	r2, 446a <MTPD::read(char*, unsigned long)+0x56>

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    4424:	add.w	r9, r0, #32
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
          index=0;
    4428:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    442c:	ldr.w	r6, [fp]
    4430:	rsb	r7, r6, #512	; 0x200
    4434:	cmp	r7, r4
    4436:	it	cs
    4438:	movcs	r7, r4
        if (data) {
    443a:	cbz	r5, 444a <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    443c:	mov	r0, r5
          data += to_copy;
    443e:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    4440:	mov	r2, r7
    4442:	add.w	r1, r9, r6
    4446:	bl	a000 <memcpy>
        index += to_copy;
    444a:	add	r6, r7
        size -= to_copy;
    444c:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    444e:	cmp.w	r6, #512	; 0x200
        index += to_copy;
    4452:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    4456:	bne.n	4464 <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    4458:	mov	r1, r9
    445a:	mov	r0, r8
    445c:	bl	3b74 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4460:	str.w	sl, [fp]
      while (size) {
    4464:	cmp	r4, #0
    4466:	bne.n	442c <MTPD::read(char*, unsigned long)+0x18>
    4468:	b.n	446e <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    446a:	str.w	r2, [fp]
        }
      }
    }
    446e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4472:	nop
    4474:	.word	0x2001484c

00004478 <MTPD::ReadMTPHeader()>:
  {
    4478:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    447a:	movs	r2, #12
    447c:	add	r1, sp, #4
    447e:	bl	4414 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    4482:	ldrh.w	r3, [sp, #8]
    4486:	cmp	r3, #2
      return header.len - 12;
    4488:	itet	eq
    448a:	ldreq	r0, [sp, #4]
      return 0;
    448c:	movne	r0, #0
      return header.len - 12;
    448e:	subeq	r0, #12
  }
    4490:	add	sp, #20
    4492:	ldr.w	pc, [sp], #4

00004496 <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    4496:	push	{r0, r1, r2, lr}
    4498:	movs	r2, #1
    449a:	add.w	r1, sp, #7
    449e:	bl	4414 <MTPD::read(char*, unsigned long)>
    44a2:	ldrb.w	r0, [sp, #7]
    44a6:	add	sp, #12
    44a8:	ldr.w	pc, [sp], #4

000044ac <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    44ac:	push	{r0, r1, r2, lr}
    44ae:	movs	r2, #2
    44b0:	add.w	r1, sp, #6
    44b4:	bl	4414 <MTPD::read(char*, unsigned long)>
    44b8:	ldrh.w	r0, [sp, #6]
    44bc:	add	sp, #12
    44be:	ldr.w	pc, [sp], #4

000044c2 <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    44c2:	push	{r0, r1, r2, lr}
    44c4:	movs	r2, #4
    44c6:	add.w	r1, sp, r2
    44ca:	bl	4414 <MTPD::read(char*, unsigned long)>
    44ce:	ldr	r0, [sp, #4]
    44d0:	add	sp, #12
    44d2:	ldr.w	pc, [sp], #4

000044d6 <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    44d6:	push	{r4, r5, r6, lr}
    44d8:	mov	r5, r1
    44da:	mov	r6, r0
    int len = read8();
    44dc:	bl	4496 <MTPD::read8()>
    if (!buffer) {
    44e0:	cbz	r5, 44ea <MTPD::readstring(char*)+0x14>
    44e2:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    44e4:	cmp	r5, r4
    44e6:	bne.n	44fa <MTPD::readstring(char*)+0x24>
  }
    44e8:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    44ea:	sxth	r2, r0
    44ec:	mov	r1, r5
    44ee:	mov	r0, r6
    44f0:	lsls	r2, r2, #1
  }
    44f2:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    44f6:	b.w	4414 <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    44fa:	mov	r0, r6
    44fc:	bl	44ac <MTPD::read16()>
    4500:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    4504:	b.n	44e4 <MTPD::readstring(char*)+0xe>

00004506 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    4506:	push	{r4, r5, lr}
    4508:	mov	r4, r0
    450a:	sub	sp, #260	; 0x104
    450c:	mov	r5, r1
      //printContainer(); 
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
    450e:	bl	4478 <MTPD::ReadMTPHeader()>
        readstring(filename);
    4512:	mov	r1, sp
    4514:	mov	r0, r4
    4516:	bl	44d6 <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    451a:	ldr	r0, [r4, #0]
    451c:	mov	r2, sp
    451e:	mov	r1, r5
    4520:	ldr	r3, [r0, #0]
    4522:	ldr	r3, [r3, #72]	; 0x48
    4524:	blx	r3
      }
      else
        return 0x2005;
    }
    4526:	movw	r2, #8193	; 0x2001
    452a:	movw	r3, #8197	; 0x2005
    452e:	cmp	r0, #0
    4530:	ite	ne
    4532:	movne	r0, r2
    4534:	moveq	r0, r3
    4536:	add	sp, #260	; 0x104
    4538:	pop	{r4, r5, pc}
	...

0000453c <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    453c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4540:	mov	r4, r0
    4542:	sub	sp, #268	; 0x10c
    4544:	mov	r6, r1
      pull_packet(rx_data_buffer);
    4546:	add.w	r1, r0, #32
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    454a:	mov	r7, r2
      pull_packet(rx_data_buffer);
    454c:	bl	3b74 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4550:	movs	r2, #0
    4552:	ldr	r3, [pc, #196]	; (4618 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xdc>)
      int len=ReadMTPHeader();
    4554:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4556:	add.w	r9, sp, #8
        index=0;
    455a:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    455c:	bl	4478 <MTPD::ReadMTPHeader()>
    4560:	mov	r5, r0
      read32(); len -=4; // storage
    4562:	mov	r0, r4
    4564:	bl	44c2 <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    4568:	mov	r0, r4
    456a:	bl	44ac <MTPD::read16()>
    456e:	movw	r3, #12289	; 0x3001
      read32(); len -=4; // sequence number
    4572:	subs	r5, #52	; 0x34
      uint32_t store = Storage2Store(storage);
    4574:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    4576:	subs	r3, r0, r3
      read16(); len -=2; // protection
    4578:	mov	r0, r4
      bool dir = (read16() == 0x3001); len -=2; // format
    457a:	rsbs	r8, r3, #0
    457e:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    4582:	bl	44ac <MTPD::read16()>
      read32(); len -=4; // size
    4586:	mov	r0, r4
    4588:	bl	44c2 <MTPD::read32()>
      read16(); len -=2; // thumb format
    458c:	mov	r0, r4
    458e:	bl	44ac <MTPD::read16()>
      read32(); len -=4; // thumb size
    4592:	mov	r0, r4
    4594:	bl	44c2 <MTPD::read32()>
      read32(); len -=4; // thumb width
    4598:	mov	r0, r4
    459a:	bl	44c2 <MTPD::read32()>
      read32(); len -=4; // thumb height
    459e:	mov	r0, r4
    45a0:	bl	44c2 <MTPD::read32()>
      read32(); len -=4; // pix width
    45a4:	mov	r0, r4
    45a6:	bl	44c2 <MTPD::read32()>
      read32(); len -=4; // pix height
    45aa:	mov	r0, r4
    45ac:	bl	44c2 <MTPD::read32()>
      read32(); len -=4; // bit depth
    45b0:	mov	r0, r4
    45b2:	bl	44c2 <MTPD::read32()>
      read32(); len -=4; // parent
    45b6:	mov	r0, r4
    45b8:	bl	44c2 <MTPD::read32()>
      read16(); len -=2; // association type
    45bc:	mov	r0, r4
    45be:	bl	44ac <MTPD::read16()>
      read32(); len -=4; // association description
    45c2:	mov	r0, r4
    45c4:	bl	44c2 <MTPD::read32()>
      read32(); len -=4; // sequence number
    45c8:	mov	r0, r4
    45ca:	bl	44c2 <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    45ce:	mov	r1, r9
    45d0:	mov	r0, r4
    45d2:	bl	44d6 <MTPD::readstring(char*)>
    45d6:	mov	r0, r9
    45d8:	bl	eb80 <strlen>
    45dc:	adds	r0, #1
    45de:	sub.w	r5, r5, r0, lsl #1
    45e2:	subs	r5, #1
      while(len>=4) { read32(); len-=4;}
    45e4:	cmp	r5, #3
    45e6:	bgt.n	4602 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xc6>
      while(len) {read8(); len--;}
    45e8:	cbnz	r5, 460c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd0>
      return storage_->Create(store, parent, dir, filename);
    45ea:	ldr	r0, [r4, #0]
    45ec:	mov	r2, r7
    45ee:	mov	r1, r6
    45f0:	ldr	r3, [r0, #0]
    45f2:	str.w	r9, [sp]
    45f6:	ldr	r4, [r3, #44]	; 0x2c
    45f8:	mov	r3, r8
    45fa:	blx	r4
    }
    45fc:	add	sp, #268	; 0x10c
    45fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      while(len>=4) { read32(); len-=4;}
    4602:	mov	r0, r4
    4604:	subs	r5, #4
    4606:	bl	44c2 <MTPD::read32()>
    460a:	b.n	45e4 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xa8>
      while(len) {read8(); len--;}
    460c:	mov	r0, r4
    460e:	subs	r5, #1
    4610:	bl	4496 <MTPD::read8()>
    4614:	b.n	45e8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
    4616:	nop
    4618:	.word	0x2001484c

0000461c <MTPD::SendObject()>:
    { 
    461c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    4620:	add.w	r9, r0, #32
    { 
    4624:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    4626:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    462a:	mov	r1, r9
      disk_pos=0;
    462c:	add.w	r6, r4, #8192	; 0x2000
      pull_packet(rx_data_buffer);
    4630:	bl	3b74 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4634:	ldr	r3, [pc, #212]	; (470c <MTPD::SendObject()+0xf0>)
    4636:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    4638:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    463a:	add.w	fp, r4, #1056	; 0x420
        index=0;
    463e:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4640:	bl	4478 <MTPD::ReadMTPHeader()>
      disk_pos=0;
    4644:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    4646:	mov	r7, r0
      disk_pos=0;
    4648:	str.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    464c:	cmp	r7, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    464e:	ldr.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    4652:	bgt.n	4668 <MTPD::SendObject()+0x4c>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    4654:	ldr	r0, [r4, #0]
    4656:	ldr	r2, [r0, #0]
      if(disk_pos)
    4658:	cmp	r3, #0
    465a:	bne.n	46f6 <MTPD::SendObject()+0xda>
      storage_->close();
    465c:	ldr	r0, [r4, #0]
    465e:	ldr	r3, [r0, #0]
    4660:	ldr	r3, [r3, #56]	; 0x38
    4662:	blx	r3
      return true;
    4664:	movs	r0, #1
    4666:	b.n	46b0 <MTPD::SendObject()+0x94>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    4668:	rsb	r8, sl, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    466c:	rsb	r5, r3, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4670:	add.w	r0, fp, r3
    4674:	add.w	r1, r9, sl
    4678:	cmp	r8, r7
    467a:	it	cs
    467c:	movcs	r8, r7
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    467e:	cmp	r5, r8
    4680:	it	cs
    4682:	movcs	r5, r8
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4684:	mov	r2, r5
    4686:	bl	a000 <memcpy>
        disk_pos += to_copy;
    468a:	ldr.w	r2, [r6, #1056]	; 0x420
        len -= to_copy;
    468e:	subs	r3, r7, r5
        disk_pos += to_copy;
    4690:	add	r2, r5
        len -= to_copy;
    4692:	str	r3, [sp, #4]
        if(disk_pos==DISK_BUFFER_SIZE)
    4694:	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    4698:	str.w	r2, [r6, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    469c:	bne.n	46e2 <MTPD::SendObject()+0xc6>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    469e:	ldr	r0, [r4, #0]
    46a0:	mov	r1, fp
    46a2:	ldr	r3, [r0, #0]
    46a4:	ldr	r3, [r3, #52]	; 0x34
    46a6:	blx	r3
    46a8:	cmp.w	r0, #8192	; 0x2000
    46ac:	bcs.n	46b6 <MTPD::SendObject()+0x9a>
    46ae:	movs	r0, #0
    }
    46b0:	add	sp, #12
    46b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    46b6:	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    46b8:	subs.w	r2, r8, r5
          disk_pos =0;
    46bc:	str.w	r3, [r6, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    46c0:	beq.n	46e2 <MTPD::SendObject()+0xc6>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    46c2:	add.w	r1, sl, r5
    46c6:	mov	r0, fp
    46c8:	str	r2, [sp, #4]
    46ca:	add	r1, r9
    46cc:	bl	a000 <memcpy>
            disk_pos += bytes;
    46d0:	ldr.w	r3, [r6, #1056]	; 0x420
    46d4:	ldr	r2, [sp, #4]
    46d6:	add	r3, r2
    46d8:	str.w	r3, [r6, #1056]	; 0x420
            len -= bytes;
    46dc:	sub.w	r3, r7, r8
    46e0:	str	r3, [sp, #4]
        if(len>0)  // we have still data to be transfered
    46e2:	ldr	r3, [sp, #4]
    46e4:	cbz	r3, 46f2 <MTPD::SendObject()+0xd6>
          index=0;
    46e6:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    46ea:	mov	r1, r9
    46ec:	mov	r0, r4
    46ee:	bl	3b74 <MTPD::pull_packet(unsigned char*)>
          index=0;
    46f2:	ldr	r7, [sp, #4]
    46f4:	b.n	464c <MTPD::SendObject()+0x30>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    46f6:	ldr	r5, [r2, #52]	; 0x34
    46f8:	add.w	r1, r4, #1056	; 0x420
    46fc:	mov	r2, r3
    46fe:	blx	r5
    4700:	ldr.w	r3, [r6, #1056]	; 0x420
    4704:	cmp	r0, r3
    4706:	bcs.n	465c <MTPD::SendObject()+0x40>
    4708:	b.n	46ae <MTPD::SendObject()+0x92>
    470a:	nop
    470c:	.word	0x2001484c

00004710 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    4710:	push	{r4, r5, r6, lr}
    4712:	mov	r5, r1
    4714:	add.w	r1, r0, #32
    4718:	mov	r6, r2
    471a:	mov	r4, r0
    471c:	bl	3b74 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4720:	ldr	r3, [pc, #28]	; (4740 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    4722:	movs	r2, #0
    4724:	str	r2, [r3, #0]
      if(p2==0xDC07)
    4726:	movw	r3, #56327	; 0xdc07
    472a:	cmp	r6, r3
    472c:	bne.n	473a <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    472e:	mov	r1, r5
    4730:	mov	r0, r4
    }
    4732:	ldmia.w	sp!, {r4, r5, r6, lr}
    4736:	b.w	4506 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    473a:	movw	r0, #8197	; 0x2005
    473e:	pop	{r4, r5, r6, pc}
    4740:	.word	0x2001484c

00004744 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    4744:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4748:	sub	sp, #60	; 0x3c
    474a:	mov	r4, r0
    474c:	bl	c028 <usb_mtp_available>
    4750:	cmp	r0, #0
    4752:	beq.w	4bac <MTPD::loop()+0x468>
      if(fetch_packet(rx_data_buffer))
    4756:	add.w	fp, r4, #32
      return usb_mtp_recv(data_buffer,60);
    475a:	movs	r1, #60	; 0x3c
    475c:	mov	r0, fp
    475e:	bl	bf94 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    4762:	cmp	r0, #0
    4764:	beq.w	4bac <MTPD::loop()+0x468>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4768:	ldr	r3, [r4, #40]	; 0x28
    476a:	ldr	r1, [pc, #756]	; (4a60 <MTPD::loop()+0x31c>)
    476c:	str	r3, [sp, #4]
    476e:	ldrh	r3, [r4, #36]	; 0x24
    4770:	ldr	r0, [pc, #752]	; (4a64 <MTPD::loop()+0x320>)
    4772:	str	r3, [sp, #0]
    4774:	ldr	r3, [r4, #32]
    4776:	ldrh	r2, [r4, #38]	; 0x26
    4778:	bl	c504 <Print::printf(char const*, ...)>
    477c:	ldr	r3, [r4, #32]
    477e:	cmp	r3, #12
    4780:	bls.n	478c <MTPD::loop()+0x48>
    4782:	ldr	r2, [r4, #44]	; 0x2c
    4784:	ldr	r1, [pc, #736]	; (4a68 <MTPD::loop()+0x324>)
    4786:	ldr	r0, [pc, #732]	; (4a64 <MTPD::loop()+0x320>)
    4788:	bl	c504 <Print::printf(char const*, ...)>
    478c:	ldr	r3, [r4, #32]
    478e:	cmp	r3, #16
    4790:	bls.n	479c <MTPD::loop()+0x58>
    4792:	ldr	r2, [r4, #48]	; 0x30
    4794:	ldr	r1, [pc, #720]	; (4a68 <MTPD::loop()+0x324>)
    4796:	ldr	r0, [pc, #716]	; (4a64 <MTPD::loop()+0x320>)
    4798:	bl	c504 <Print::printf(char const*, ...)>
    479c:	ldr	r3, [r4, #32]
    479e:	cmp	r3, #20
    47a0:	bls.n	47ac <MTPD::loop()+0x68>
    47a2:	ldr	r2, [r4, #52]	; 0x34
    47a4:	ldr	r1, [pc, #704]	; (4a68 <MTPD::loop()+0x324>)
    47a6:	ldr	r0, [pc, #700]	; (4a64 <MTPD::loop()+0x320>)
    47a8:	bl	c504 <Print::printf(char const*, ...)>
    47ac:	ldr	r1, [pc, #700]	; (4a6c <MTPD::loop()+0x328>)
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    47ae:	add.w	r5, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    47b2:	ldr	r0, [pc, #688]	; (4a64 <MTPD::loop()+0x320>)

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    47b4:	movw	r7, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    47b8:	bl	c504 <Print::printf(char const*, ...)>
        int p1 = CONTAINER->params[0];
    47bc:	ldr	r3, [r4, #44]	; 0x2c
        int id = CONTAINER->transaction_id;
    47be:	ldr	r1, [r4, #40]	; 0x28
        int typ= CONTAINER->type;
    47c0:	ldrh	r0, [r4, #36]	; 0x24
        int p1 = CONTAINER->params[0];
    47c2:	mov	r6, r3
        int op = CONTAINER->op;
    47c4:	ldrh	r2, [r4, #38]	; 0x26
        int len= CONTAINER->len;
    47c6:	ldr.w	r9, [r4, #32]
        int p1 = CONTAINER->params[0];
    47ca:	str	r3, [sp, #12]
        int id = CONTAINER->transaction_id;
    47cc:	str	r1, [sp, #16]
        int p3 = CONTAINER->params[2];
    47ce:	ldrd	r8, r3, [r4, #48]	; 0x30
        TID=id;
    47d2:	str.w	r1, [r5, #1068]	; 0x42c
        if(typ==2) return_code=0x2005; // we should only get cmds
    47d6:	movw	r1, #8197	; 0x2005
    47da:	cmp	r0, #2
    47dc:	it	eq
    47de:	moveq	r7, r1

        switch (op)
    47e0:	movw	r0, #4123	; 0x101b
    47e4:	cmp	r2, r0
    47e6:	bhi.n	4870 <MTPD::loop()+0x12c>
    47e8:	cmp.w	r2, #4096	; 0x1000
    47ec:	bhi.n	47f4 <MTPD::loop()+0xb0>
    47ee:	movw	r7, #8197	; 0x2005
    47f2:	b.n	48ee <MTPD::loop()+0x1aa>
    47f4:	sub.w	r2, r2, #4096	; 0x1000
    47f8:	subs	r2, #1
    47fa:	cmp	r2, #26
    47fc:	bhi.n	47ee <MTPD::loop()+0xaa>
    47fe:	add	r1, pc, #4	; (adr r1, 4804 <MTPD::loop()+0xc0>)
    4800:	ldr.w	pc, [r1, r2, lsl #2]
    4804:	.word	0x00004893
    4808:	.word	0x000048e7
    480c:	.word	0x00004ba7
    4810:	.word	0x0000491d
    4814:	.word	0x00004961
    4818:	.word	0x000049ab
    481c:	.word	0x000049c1
    4820:	.word	0x00004a17
    4824:	.word	0x00004a71
    4828:	.word	0x000047ef
    482c:	.word	0x00004abb
    4830:	.word	0x00004ad9
    4834:	.word	0x00004aed
    4838:	.word	0x000047ef
    483c:	.word	0x000047ef
    4840:	.word	0x000047ef
    4844:	.word	0x000047ef
    4848:	.word	0x000047ef
    484c:	.word	0x000047ef
    4850:	.word	0x00004b03
    4854:	.word	0x00004b4d
    4858:	.word	0x000047ef
    485c:	.word	0x000047ef
    4860:	.word	0x000047ef
    4864:	.word	0x00004b97
    4868:	.word	0x00004bb3
    486c:	.word	0x00004bdd
    4870:	add.w	r3, r2, #26496	; 0x6780
    4874:	adds	r3, #127	; 0x7f
    4876:	uxth	r3, r3
    4878:	cmp	r3, #3
    487a:	bhi.n	47ee <MTPD::loop()+0xaa>
    487c:	sub.w	r2, r2, #38912	; 0x9800
    4880:	subs	r2, #2
    4882:	cmp	r2, #2
    4884:	bhi.w	4c30 <MTPD::loop()+0x4ec>
    4888:	tbh	[pc, r2, lsl #1]
    488c:	.word	0x021e01f7
    4890:	.short	0x0245
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    4892:	movs	r6, #0
    4894:	movs	r3, #1
    4896:	mov	r0, r4
    4898:	strb.w	r3, [r5, #1060]	; 0x424
    489c:	str.w	r6, [r5, #1064]	; 0x428
    48a0:	bl	3c80 <MTPD::WriteDescriptor()>
    48a4:	ldr.w	r3, [r5, #1064]	; 0x428
    48a8:	mov	r0, r4
    48aa:	movs	r2, #12
    48ac:	adds	r3, #12
    48ae:	add	r1, sp, #24
    48b0:	str	r3, [sp, #24]
    48b2:	movs	r3, #2
    48b4:	strh.w	r3, [sp, #28]
    48b8:	ldrh	r3, [r4, #38]	; 0x26
    48ba:	strh.w	r3, [sp, #30]
    48be:	ldr	r3, [r4, #40]	; 0x28
    48c0:	str.w	r6, [r5, #1064]	; 0x428
    48c4:	strb.w	r6, [r5, #1060]	; 0x424
    48c8:	str	r3, [sp, #32]
    { if (write_get_length_) 
    48ca:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    48ce:	mov	r0, r4
    48d0:	bl	3c80 <MTPD::WriteDescriptor()>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    48d4:	ldr	r1, [sp, #24]
    48d6:	ubfx	r1, r1, #0, #9
    48da:	cbz	r1, 48ee <MTPD::loop()+0x1aa>
    48dc:	add.w	r0, r4, #544	; 0x220
    48e0:	bl	3a7e <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    48e4:	b.n	48ee <MTPD::loop()+0x1aa>
            openSession(p1);
    48e6:	mov	r1, r6
    48e8:	mov	r0, r4
    48ea:	bl	3b64 <MTPD::openSession(unsigned long)>
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    48ee:	movs	r3, #3
            CONTAINER->len=len;
    48f0:	str.w	r9, [r4, #32]
            CONTAINER->op=return_code;
    48f4:	strh	r7, [r4, #38]	; 0x26
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    48f6:	mov	r1, fp
            CONTAINER->type=3;
    48f8:	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    48fa:	mov	r2, r9
            CONTAINER->transaction_id=id;
    48fc:	ldr	r3, [sp, #16]
    48fe:	str	r3, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
    4900:	ldr	r3, [sp, #12]
    4902:	str	r3, [r4, #44]	; 0x2c
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4904:	add.w	r4, r4, #544	; 0x220
    4908:	mov	r0, r4
    490a:	bl	a000 <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    490e:	mov	r1, r9
    4910:	mov	r0, r4
        }
      }
    }
    4912:	add	sp, #60	; 0x3c
    4914:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4918:	b.w	3a7e <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    491c:	movs	r6, #0
    491e:	movs	r3, #1
    4920:	mov	r0, r4
    4922:	strb.w	r3, [r5, #1060]	; 0x424
    4926:	str.w	r6, [r5, #1064]	; 0x428
    492a:	bl	3d98 <MTPD::WriteStorageIDs()>
    492e:	ldr.w	r3, [r5, #1064]	; 0x428
    4932:	mov	r0, r4
    4934:	movs	r2, #12
    4936:	adds	r3, #12
    4938:	add	r1, sp, #24
    493a:	str	r3, [sp, #24]
    493c:	movs	r3, #2
    493e:	strh.w	r3, [sp, #28]
    4942:	ldrh	r3, [r4, #38]	; 0x26
    4944:	strh.w	r3, [sp, #30]
    4948:	ldr	r3, [r4, #40]	; 0x28
    494a:	str.w	r6, [r5, #1064]	; 0x428
    494e:	strb.w	r6, [r5, #1060]	; 0x424
    4952:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4954:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    4958:	mov	r0, r4
    495a:	bl	3d98 <MTPD::WriteStorageIDs()>
    495e:	b.n	48d4 <MTPD::loop()+0x190>
            TRANSMIT(GetStorageInfo(p1));
    4960:	mov.w	r8, #0
    4964:	movs	r3, #1
    4966:	mov	r1, r6
    4968:	mov	r0, r4
    496a:	strb.w	r3, [r5, #1060]	; 0x424
    496e:	str.w	r8, [r5, #1064]	; 0x428
    4972:	bl	3ffc <MTPD::GetStorageInfo(unsigned long)>
    4976:	ldr.w	r3, [r5, #1064]	; 0x428
    497a:	add	r1, sp, #24
    497c:	mov	r0, r4
    497e:	adds	r3, #12
    4980:	movs	r2, #12
    4982:	str	r3, [sp, #24]
    4984:	movs	r3, #2
    4986:	strh.w	r3, [sp, #28]
    498a:	ldrh	r3, [r4, #38]	; 0x26
    498c:	strh.w	r3, [sp, #30]
    4990:	ldr	r3, [r4, #40]	; 0x28
    4992:	str.w	r8, [r5, #1064]	; 0x428
    4996:	strb.w	r8, [r5, #1060]	; 0x424
    499a:	str	r3, [sp, #32]
    { if (write_get_length_) 
    499c:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    49a0:	mov	r1, r6
    49a2:	mov	r0, r4
    49a4:	bl	3ffc <MTPD::GetStorageInfo(unsigned long)>
    49a8:	b.n	48d4 <MTPD::loop()+0x190>
            if (p2) 
    49aa:	cmp.w	r8, #0
    49ae:	bne.w	4d24 <MTPD::loop()+0x5e0>
                p1 = GetNumObjects(p1, p3);
    49b2:	mov	r2, r3
    49b4:	mov	r1, r6
    49b6:	mov	r0, r4
    49b8:	bl	3b0c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    49bc:	str	r0, [sp, #12]
    49be:	b.n	48ee <MTPD::loop()+0x1aa>
            if (p2) 
    49c0:	cmp.w	r8, #0
    49c4:	bne.w	4d24 <MTPD::loop()+0x5e0>
              TRANSMIT(GetObjectHandles(p1, p3));
    49c8:	movs	r2, #1
    49ca:	mov	r1, r6
    49cc:	mov	r0, r4
    49ce:	str.w	r8, [r5, #1064]	; 0x428
    49d2:	strb.w	r2, [r5, #1060]	; 0x424
    49d6:	mov	r2, r3
    49d8:	str	r3, [sp, #20]
    49da:	bl	3dc2 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    49de:	ldr.w	r2, [r5, #1064]	; 0x428
    49e2:	add	r1, sp, #24
    49e4:	mov	r0, r4
    49e6:	adds	r2, #12
    49e8:	str	r2, [sp, #24]
    49ea:	movs	r2, #2
    49ec:	strh.w	r2, [sp, #28]
    49f0:	ldrh	r2, [r4, #38]	; 0x26
    49f2:	strh.w	r2, [sp, #30]
    49f6:	ldr	r2, [r4, #40]	; 0x28
    49f8:	str.w	r8, [r5, #1064]	; 0x428
    49fc:	str	r2, [sp, #32]
    49fe:	movs	r2, #12
    4a00:	strb.w	r8, [r5, #1060]	; 0x424
    { if (write_get_length_) 
    4a04:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    4a08:	ldr	r3, [sp, #20]
    4a0a:	mov	r1, r6
    4a0c:	mov	r0, r4
    4a0e:	mov	r2, r3
    4a10:	bl	3dc2 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4a14:	b.n	48d4 <MTPD::loop()+0x190>
            TRANSMIT(GetObjectInfo(p1));
    4a16:	mov.w	r8, #0
    4a1a:	movs	r3, #1
    4a1c:	mov	r1, r6
    4a1e:	mov	r0, r4
    4a20:	strb.w	r3, [r5, #1060]	; 0x424
    4a24:	str.w	r8, [r5, #1064]	; 0x428
    4a28:	bl	3e14 <MTPD::GetObjectInfo(unsigned long)>
    4a2c:	ldr.w	r3, [r5, #1064]	; 0x428
    4a30:	add	r1, sp, #24
    4a32:	mov	r0, r4
    4a34:	adds	r3, #12
    4a36:	movs	r2, #12
    4a38:	str	r3, [sp, #24]
    4a3a:	movs	r3, #2
    4a3c:	strh.w	r3, [sp, #28]
    4a40:	ldrh	r3, [r4, #38]	; 0x26
    4a42:	strh.w	r3, [sp, #30]
    4a46:	ldr	r3, [r4, #40]	; 0x28
    4a48:	str.w	r8, [r5, #1064]	; 0x428
    4a4c:	strb.w	r8, [r5, #1060]	; 0x424
    4a50:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4a52:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    4a56:	mov	r1, r6
    4a58:	mov	r0, r4
    4a5a:	bl	3e14 <MTPD::GetObjectInfo(unsigned long)>
    4a5e:	b.n	48d4 <MTPD::loop()+0x190>
    4a60:	.word	0x20001154
    4a64:	.word	0x20001cf4
    4a68:	.word	0x20001162
    4a6c:	.word	0x20000db5
            TRANSMIT(GetObject(p1));
    4a70:	mov.w	r8, #0
    4a74:	movs	r3, #1
    4a76:	mov	r1, r6
    4a78:	mov	r0, r4
    4a7a:	strb.w	r3, [r5, #1060]	; 0x424
    4a7e:	str.w	r8, [r5, #1064]	; 0x428
    4a82:	bl	424a <MTPD::GetObject(unsigned long)>
    4a86:	ldr.w	r3, [r5, #1064]	; 0x428
    4a8a:	add	r1, sp, #24
    4a8c:	mov	r0, r4
    4a8e:	adds	r3, #12
    4a90:	movs	r2, #12
    4a92:	str	r3, [sp, #24]
    4a94:	movs	r3, #2
    4a96:	strh.w	r3, [sp, #28]
    4a9a:	ldrh	r3, [r4, #38]	; 0x26
    4a9c:	strh.w	r3, [sp, #30]
    4aa0:	ldr	r3, [r4, #40]	; 0x28
    4aa2:	str.w	r8, [r5, #1064]	; 0x428
    4aa6:	strb.w	r8, [r5, #1060]	; 0x424
    4aaa:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4aac:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    4ab0:	mov	r1, r6
    4ab2:	mov	r0, r4
    4ab4:	bl	424a <MTPD::GetObject(unsigned long)>
    4ab8:	b.n	48d4 <MTPD::loop()+0x190>
              if (p2) {
    4aba:	cmp.w	r8, #0
    4abe:	bne.w	4d24 <MTPD::loop()+0x5e0>
                if (!storage_->DeleteObject(p1)) {
    4ac2:	ldr	r0, [r4, #0]
    4ac4:	mov	r1, r6
    4ac6:	ldr	r3, [r0, #0]
    4ac8:	ldr	r3, [r3, #60]	; 0x3c
    4aca:	blx	r3
                  return_code = 0x2012; // partial deletion
    4acc:	movw	r3, #8210	; 0x2012
    4ad0:	cmp	r0, #0
    4ad2:	it	eq
    4ad4:	moveq	r7, r3
    4ad6:	b.n	48ee <MTPD::loop()+0x1aa>
              p3 = SendObjectInfo(p1, // storage
    4ad8:	mov	r2, r8
    4ada:	mov	r1, r6
    4adc:	mov	r0, r4
              len = 12 + 3 * 4;
    4ade:	mov.w	r9, #24
              p3 = SendObjectInfo(p1, // storage
    4ae2:	bl	453c <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    4ae6:	strd	r8, r0, [r4, #48]	; 0x30
              break;
    4aea:	b.n	48ee <MTPD::loop()+0x1aa>
              if(!SendObject()) return_code = 0x2005;
    4aec:	mov	r0, r4
    4aee:	mov.w	r9, #12
    4af2:	bl	461c <MTPD::SendObject()>
    4af6:	movw	r3, #8197	; 0x2005
    4afa:	cmp	r0, #0
    4afc:	it	eq
    4afe:	moveq	r7, r3
    4b00:	b.n	48ee <MTPD::loop()+0x1aa>
              TRANSMIT(GetDevicePropDesc(p1));
    4b02:	mov.w	r8, #0
    4b06:	movs	r3, #1
    4b08:	mov	r1, r6
    4b0a:	mov	r0, r4
    4b0c:	strb.w	r3, [r5, #1060]	; 0x424
    4b10:	str.w	r8, [r5, #1064]	; 0x428
    4b14:	bl	3c28 <MTPD::GetDevicePropDesc(unsigned long)>
    4b18:	ldr.w	r3, [r5, #1064]	; 0x428
    4b1c:	add	r1, sp, #24
    4b1e:	mov	r0, r4
    4b20:	adds	r3, #12
    4b22:	movs	r2, #12
    4b24:	str	r3, [sp, #24]
    4b26:	movs	r3, #2
    4b28:	strh.w	r3, [sp, #28]
    4b2c:	ldrh	r3, [r4, #38]	; 0x26
    4b2e:	strh.w	r3, [sp, #30]
    4b32:	ldr	r3, [r4, #40]	; 0x28
    4b34:	str.w	r8, [r5, #1064]	; 0x428
    4b38:	strb.w	r8, [r5, #1060]	; 0x424
    4b3c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4b3e:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    4b42:	mov	r1, r6
    4b44:	mov	r0, r4
    4b46:	bl	3c28 <MTPD::GetDevicePropDesc(unsigned long)>
    4b4a:	b.n	48d4 <MTPD::loop()+0x190>
              TRANSMIT(GetDevicePropValue(p1));
    4b4c:	mov.w	r8, #0
    4b50:	movs	r3, #1
    4b52:	mov	r1, r6
    4b54:	mov	r0, r4
    4b56:	strb.w	r3, [r5, #1060]	; 0x424
    4b5a:	str.w	r8, [r5, #1064]	; 0x428
    4b5e:	bl	3c14 <MTPD::GetDevicePropValue(unsigned long)>
    4b62:	ldr.w	r3, [r5, #1064]	; 0x428
    4b66:	add	r1, sp, #24
    4b68:	mov	r0, r4
    4b6a:	adds	r3, #12
    4b6c:	movs	r2, #12
    4b6e:	str	r3, [sp, #24]
    4b70:	movs	r3, #2
    4b72:	strh.w	r3, [sp, #28]
    4b76:	ldrh	r3, [r4, #38]	; 0x26
    4b78:	strh.w	r3, [sp, #30]
    4b7c:	ldr	r3, [r4, #40]	; 0x28
    4b7e:	str.w	r8, [r5, #1064]	; 0x428
    4b82:	strb.w	r8, [r5, #1060]	; 0x424
    4b86:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4b88:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    4b8c:	mov	r1, r6
    4b8e:	mov	r0, r4
    4b90:	bl	3c14 <MTPD::GetDevicePropValue(unsigned long)>
    4b94:	b.n	48d4 <MTPD::loop()+0x190>
              return_code = moveObject(p1,p2,p3);
    4b96:	mov	r2, r8
    4b98:	mov	r1, r6
    4b9a:	mov	r0, r4
              len = 12;
    4b9c:	mov.w	r9, #12
              return_code = moveObject(p1,p2,p3);
    4ba0:	bl	3b32 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    4ba4:	mov	r7, r0
        if(return_code)
    4ba6:	cmp	r7, #0
    4ba8:	bne.w	48ee <MTPD::loop()+0x1aa>
    }
    4bac:	add	sp, #60	; 0x3c
    4bae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    4bb2:	mov	r2, r8
    4bb4:	mov	r1, r6
    4bb6:	mov	r0, r4
              if(!return_code) 
    4bb8:	movw	r7, #8197	; 0x2005
              return_code = copyObject(p1,p2,p3);
    4bbc:	bl	3b50 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    4bc0:	cmp	r0, #0
    4bc2:	itete	eq
    4bc4:	moveq	r3, r6
    4bc6:	movne	r3, r0
    4bc8:	moveq.w	r9, #12
    4bcc:	movne.w	r9, #16
    4bd0:	str	r3, [sp, #12]
    4bd2:	movw	r3, #8193	; 0x2001
    4bd6:	it	ne
    4bd8:	movne	r7, r3
    4bda:	b.n	48ee <MTPD::loop()+0x1aa>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    4bdc:	mov.w	sl, #0
    4be0:	movs	r2, #1
    4be2:	mov	r1, r6
    4be4:	mov	r0, r4
    4be6:	strb.w	r2, [r5, #1060]	; 0x424
    4bea:	mov	r2, r8
    4bec:	str.w	sl, [r5, #1064]	; 0x428
    4bf0:	str	r3, [sp, #20]
    4bf2:	bl	4330 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    4bf6:	ldr.w	r2, [r5, #1064]	; 0x428
    4bfa:	add	r1, sp, #24
    4bfc:	adds	r2, #12
    4bfe:	str	r2, [sp, #24]
    4c00:	movs	r2, #2
    4c02:	strh.w	r2, [sp, #28]
    4c06:	ldrh	r2, [r4, #38]	; 0x26
    4c08:	strh.w	r2, [sp, #30]
    4c0c:	ldr	r2, [r4, #40]	; 0x28
    4c0e:	str.w	sl, [r5, #1064]	; 0x428
    4c12:	strb.w	sl, [r5, #1060]	; 0x424
    4c16:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    4c1a:	mov	r0, r4
    4c1c:	movs	r2, #32
    4c1e:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    4c22:	ldr	r3, [sp, #20]
    4c24:	mov	r2, r8
    4c26:	mov	r1, r6
    4c28:	mov	r0, r4
    4c2a:	bl	4330 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    4c2e:	b.n	48d4 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropsSupported(p1));
    4c30:	mov.w	r8, #0
    4c34:	movs	r3, #1
    4c36:	mov	r1, r6
    4c38:	mov	r0, r4
    4c3a:	strb.w	r3, [r5, #1060]	; 0x424
    4c3e:	str.w	r8, [r5, #1064]	; 0x428
    4c42:	bl	3ef4 <MTPD::getObjectPropsSupported(unsigned long)>
    4c46:	ldr.w	r3, [r5, #1064]	; 0x428
    4c4a:	add	r1, sp, #24
    4c4c:	mov	r0, r4
    4c4e:	adds	r3, #12
    4c50:	movs	r2, #12
    4c52:	str	r3, [sp, #24]
    4c54:	movs	r3, #2
    4c56:	strh.w	r3, [sp, #28]
    4c5a:	ldrh	r3, [r4, #38]	; 0x26
    4c5c:	strh.w	r3, [sp, #30]
    4c60:	ldr	r3, [r4, #40]	; 0x28
    4c62:	str.w	r8, [r5, #1064]	; 0x428
    4c66:	strb.w	r8, [r5, #1060]	; 0x424
    4c6a:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4c6c:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    4c70:	mov	r1, r6
    4c72:	mov	r0, r4
    4c74:	bl	3ef4 <MTPD::getObjectPropsSupported(unsigned long)>
    4c78:	b.n	48d4 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropDesc(p1,p2));
    4c7a:	mov.w	sl, #0
    4c7e:	movs	r3, #1
    4c80:	mov	r2, r8
    4c82:	mov	r1, r6
    4c84:	mov	r0, r4
    4c86:	strb.w	r3, [r5, #1060]	; 0x424
    4c8a:	str.w	sl, [r5, #1064]	; 0x428
    4c8e:	bl	4108 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    4c92:	ldr.w	r3, [r5, #1064]	; 0x428
    4c96:	add	r1, sp, #24
    4c98:	mov	r0, r4
    4c9a:	adds	r3, #12
    4c9c:	movs	r2, #12
    4c9e:	str	r3, [sp, #24]
    4ca0:	movs	r3, #2
    4ca2:	strh.w	r3, [sp, #28]
    4ca6:	ldrh	r3, [r4, #38]	; 0x26
    4ca8:	strh.w	r3, [sp, #30]
    4cac:	ldr	r3, [r4, #40]	; 0x28
    4cae:	str.w	sl, [r5, #1064]	; 0x428
    4cb2:	strb.w	sl, [r5, #1060]	; 0x424
    4cb6:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4cb8:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    4cbc:	mov	r2, r8
    4cbe:	mov	r1, r6
    4cc0:	mov	r0, r4
    4cc2:	bl	4108 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    4cc6:	b.n	48d4 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropValue(p1,p2));
    4cc8:	mov.w	sl, #0
    4ccc:	movs	r3, #1
    4cce:	mov	r2, r8
    4cd0:	mov	r1, r6
    4cd2:	mov	r0, r4
    4cd4:	strb.w	r3, [r5, #1060]	; 0x424
    4cd8:	str.w	sl, [r5, #1064]	; 0x428
    4cdc:	bl	3f24 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4ce0:	ldr.w	r3, [r5, #1064]	; 0x428
    4ce4:	add	r1, sp, #24
    4ce6:	mov	r0, r4
    4ce8:	adds	r3, #12
    4cea:	movs	r2, #12
    4cec:	str	r3, [sp, #24]
    4cee:	movs	r3, #2
    4cf0:	strh.w	r3, [sp, #28]
    4cf4:	ldrh	r3, [r4, #38]	; 0x26
    4cf6:	strh.w	r3, [sp, #30]
    4cfa:	ldr	r3, [r4, #40]	; 0x28
    4cfc:	str.w	sl, [r5, #1064]	; 0x428
    4d00:	strb.w	sl, [r5, #1060]	; 0x424
    4d04:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4d06:	bl	3a94 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    4d0a:	mov	r2, r8
    4d0c:	mov	r1, r6
    4d0e:	mov	r0, r4
    4d10:	bl	3f24 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4d14:	b.n	48d4 <MTPD::loop()+0x190>
              return_code = setObjectPropValue(p1,p2);
    4d16:	mov	r2, r8
    4d18:	mov	r1, r6
    4d1a:	mov	r0, r4
    4d1c:	bl	4710 <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    4d20:	mov	r7, r0
              break;
    4d22:	b.n	4ba6 <MTPD::loop()+0x462>
                return_code = 0x2014; // spec by format unsupported
    4d24:	movw	r7, #8212	; 0x2014
    4d28:	b.n	48ee <MTPD::loop()+0x1aa>
    4d2a:	nop

00004d2c <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    4d2c:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    4d2e:	cbz	r3, 4d66 <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4d30:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4d32:	movw	r5, #513	; 0x201
    4d36:	str	r5, [r4, #16]
    4d38:	mov	r4, r3

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4d3a:	cbz	r1, 4d68 <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    4d3c:	ldrb.w	r5, [r1], #1
    4d40:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    4d42:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4d44:	str	r5, [r6, #100]	; 0x64
    4d46:	ldr	r5, [r0, #0]
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4d48:	ldr	r6, [r5, #112]	; 0x70
    4d4a:	lsls	r6, r6, #30
    4d4c:	bmi.n	4d58 <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4d4e:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    4d50:	cbz	r2, 4d56 <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4d52:	strb.w	r5, [r2], #1
				count_read--;
    4d56:	subs	r4, #1
    4d58:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4d5a:	ldr	r5, [r5, #20]
    4d5c:	lsls	r5, r5, #31
    4d5e:	bpl.n	4d46 <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    4d60:	cmp	r3, #0
    4d62:	bne.n	4d3a <SPIClass::transfer(void const*, void*, unsigned int)+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    4d64:	cbnz	r4, 4d6e <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    4d66:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4d68:	ldrb.w	r5, [r0, #60]	; 0x3c
    4d6c:	b.n	4d40 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    4d6e:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4d70:	ldr	r1, [r3, #112]	; 0x70
    4d72:	lsls	r1, r1, #30
    4d74:	bmi.n	4d64 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4d76:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    4d78:	cbz	r2, 4d7e <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4d7a:	strb.w	r3, [r2], #1
			count_read--;
    4d7e:	subs	r4, #1
    4d80:	b.n	4d64 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

00004d82 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4d82:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4d84:	ldr	r2, [r3, #0]
    4d86:	ldr	r1, [r2, #0]
    4d88:	ldr	r2, [r3, #4]
    4d8a:	tst	r1, r2
void SPIClass::end() {
    4d8c:	push	{r4, lr}
    4d8e:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4d90:	beq.n	4dc8 <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4d92:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    4d94:	movs	r1, #0
    4d96:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    4d98:	movs	r1, #5
    4d9a:	ldrb	r2, [r0, #16]
    4d9c:	add	r3, r2
    4d9e:	ldrb	r0, [r3, #16]
    4da0:	bl	bcd8 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    4da4:	ldrb	r2, [r4, #17]
    4da6:	ldr	r3, [r4, #4]
    4da8:	movs	r1, #5
    4daa:	add	r3, r2
    4dac:	ldrb.w	r0, [r3, #36]	; 0x24
    4db0:	bl	bcd8 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4db4:	ldr	r3, [r4, #4]
    4db6:	ldrb	r2, [r4, #18]
    4db8:	movs	r1, #5
    4dba:	add	r3, r2
	}
}
    4dbc:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4dc0:	ldrb.w	r0, [r3, #56]	; 0x38
    4dc4:	b.w	bcd8 <pinMode>
}
    4dc8:	pop	{r4, pc}

00004dca <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    4dca:	ldrb.w	r2, [r0, #163]	; 0xa3
    4dce:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    4dd2:	subs	r0, r2, r0
    4dd4:	bx	lr

00004dd6 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4dd6:	ldrb.w	r3, [r0, #162]	; 0xa2
    4dda:	ldrb.w	r2, [r0, #163]	; 0xa3
    4dde:	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    4de0:	itttt	hi
    4de2:	addhi	r2, r3, #1
    4de4:	strbhi.w	r2, [r0, #162]	; 0xa2
    4de8:	addhi	r0, r0, r3
    4dea:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    4dec:	it	ls
    4dee:	movls.w	r0, #4294967295
	}
    4df2:	bx	lr

00004df4 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4df4:	ldrb.w	r3, [r0, #162]	; 0xa2
    4df8:	ldrb.w	r2, [r0, #163]	; 0xa3
    4dfc:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    4dfe:	itte	hi
    4e00:	addhi	r0, r0, r3
    4e02:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    4e04:	movls.w	r0, #4294967295
	}
    4e08:	bx	lr

00004e0a <TwoWire::flush()>:
	virtual void flush(void) {
	}
    4e0a:	bx	lr

00004e0c <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    4e0c:	ldrh.w	r3, [r0, #304]	; 0x130
    4e10:	cbz	r3, 4e1e <TwoWire::write(unsigned char)+0x12>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    4e12:	ldrb.w	r3, [r0, #303]	; 0x12f
    4e16:	cmp	r3, #136	; 0x88
    4e18:	bls.n	4e22 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    4e1a:	movs	r3, #1
    4e1c:	str	r3, [r0, #4]
			return 0;
    4e1e:	movs	r0, #0
    4e20:	bx	lr
		txBuffer[txBufferLength++] = data;
    4e22:	adds	r2, r3, #1
    4e24:	strb.w	r2, [r0, #303]	; 0x12f
    4e28:	add	r0, r3
    4e2a:	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    4e2e:	movs	r0, #1
    4e30:	bx	lr

00004e32 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    4e32:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    4e34:	ldrh.w	r3, [r0, #304]	; 0x130
{
    4e38:	mov	r5, r0
    4e3a:	mov	r4, r2
	if (transmitting || slave_mode) {
    4e3c:	cbz	r3, 4e6a <TwoWire::write(unsigned char const*, unsigned int)+0x38>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    4e3e:	ldrb.w	r3, [r0, #303]	; 0x12f
    4e42:	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    4e46:	cmp	r4, r2
    4e48:	ittt	hi
    4e4a:	movhi	r0, #1
    4e4c:	movhi	r4, r2
    4e4e:	strhi	r0, [r5, #4]
		memcpy(txBuffer + txBufferLength, data, quantity);
    4e50:	add.w	r0, r5, #165	; 0xa5
    4e54:	mov	r2, r4
    4e56:	add	r0, r3
    4e58:	bl	a000 <memcpy>
		txBufferLength += quantity;
    4e5c:	ldrb.w	r3, [r5, #303]	; 0x12f
    4e60:	add	r3, r4
    4e62:	strb.w	r3, [r5, #303]	; 0x12f
}
    4e66:	mov	r0, r4
    4e68:	pop	{r3, r4, r5, pc}
	return 0;
    4e6a:	mov	r4, r3
    4e6c:	b.n	4e66 <TwoWire::write(unsigned char const*, unsigned int)+0x34>
	...

00004e70 <TwoWire::force_clock()>:
{
    4e70:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    4e74:	ldr	r1, [r0, #20]
{
    4e76:	mov	r2, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    4e78:	ldrb	r3, [r0, #24]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4e7a:	mov.w	lr, #21
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4e7e:	ldr	r4, [pc, #244]	; (4f74 <TwoWire::force_clock()+0x104>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    4e80:	add.w	r3, r1, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4e84:	ldr.w	r8, [pc, #244]	; 4f7c <TwoWire::force_clock()+0x10c>
    4e88:	ldrb	r0, [r3, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    4e8a:	ldrb	r3, [r2, #25]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4e8c:	lsls	r6, r0, #4
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    4e8e:	add.w	r3, r1, r3, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4e92:	add.w	r0, r4, r0, lsl #4
	*portSetRegister(sda_pin) = sda_mask;
    4e96:	ldr	r6, [r4, r6]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    4e98:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4e9c:	ldr.w	ip, [r0, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4ea0:	ldr.w	r9, [r0, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    4ea4:	lsls	r7, r3, #4
    4ea6:	add.w	r3, r4, r3, lsl #4
    4eaa:	ldr	r5, [r3, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4eac:	str.w	lr, [r9]
	*portSetRegister(sda_pin) = sda_mask;
    4eb0:	str.w	ip, [r6, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    4eb4:	ldr	r0, [r6, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4eb6:	ldr	r3, [r3, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    4eb8:	orr.w	r0, r0, ip
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4ebc:	str	r3, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    4ebe:	str	r0, [r6, #4]
	*portSetRegister(scl_pin) = scl_mask;
    4ec0:	ldr	r0, [r4, r7]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4ec2:	str.w	lr, [r3]
	*portSetRegister(scl_pin) = scl_mask;
    4ec6:	str.w	r5, [r0, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    4eca:	ldr	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    4ecc:	ldr	r4, [pc, #168]	; (4f78 <TwoWire::force_clock()+0x108>)
    4ece:	orrs	r3, r5
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4ed0:	ldr.w	lr, [pc, #172]	; 4f80 <TwoWire::force_clock()+0x110>
    4ed4:	str	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    4ed6:	ldr	r7, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4ed8:	ldr.w	r3, [lr]
    4edc:	udiv	r3, r3, r8
    4ee0:	mov.w	r8, #10
    4ee4:	mul.w	r3, r8, r3
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4ee8:	ldr.w	r8, [r4, #4]
    4eec:	sub.w	r8, r8, r7
    4ef0:	cmp	r3, r8
    4ef2:	bhi.n	4ee8 <TwoWire::force_clock()+0x78>
    4ef4:	movs	r3, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    4ef6:	ldr	r7, [pc, #128]	; (4f78 <TwoWire::force_clock()+0x108>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4ef8:	ldr.w	sl, [pc, #128]	; 4f7c <TwoWire::force_clock()+0x10c>
		if ((*portInputRegister(sda_pin) & sda_mask)
    4efc:	ldr	r4, [r6, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    4efe:	tst.w	r4, ip
    4f02:	beq.n	4f0a <TwoWire::force_clock()+0x9a>
    4f04:	ldr	r4, [r0, #8]
    4f06:	tst	r4, r5
    4f08:	bne.n	4f6e <TwoWire::force_clock()+0xfe>
		*portClearRegister(scl_pin) = scl_mask;
    4f0a:	str.w	r5, [r0, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    4f0e:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4f12:	ldr.w	r4, [lr]
    4f16:	udiv	r4, r4, sl
    4f1a:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4f1e:	ldr.w	r8, [r7, #4]
    4f22:	sub.w	r8, r8, fp
    4f26:	cmp	r4, r8
    4f28:	bhi.n	4f1e <TwoWire::force_clock()+0xae>
		*portSetRegister(scl_pin) = scl_mask;
    4f2a:	str.w	r5, [r0, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    4f2e:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4f32:	ldr.w	r4, [lr]
    4f36:	udiv	r4, r4, sl
    4f3a:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4f3e:	ldr.w	r8, [r7, #4]
    4f42:	sub.w	r8, r8, fp
    4f46:	cmp	r4, r8
    4f48:	bhi.n	4f3e <TwoWire::force_clock()+0xce>
	for (int i=0; i < 9; i++) {
    4f4a:	subs	r3, #1
    4f4c:	bne.n	4efc <TwoWire::force_clock()+0x8c>
	bool ret = false;
    4f4e:	mov	r0, r3
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    4f50:	ldrb	r3, [r2, #24]
    4f52:	add.w	r3, r1, r3, lsl #4
    4f56:	ldr	r3, [r3, #12]
    4f58:	str.w	r3, [r9]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    4f5c:	ldrb	r3, [r2, #25]
    4f5e:	ldr	r2, [sp, #4]
    4f60:	add.w	r1, r1, r3, lsl #4
    4f64:	ldr	r3, [r1, #44]	; 0x2c
    4f66:	str	r3, [r2, #0]
}
    4f68:	add	sp, #12
    4f6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    4f6e:	movs	r0, #1
    4f70:	b.n	4f50 <TwoWire::force_clock()+0xe0>
    4f72:	nop
    4f74:	.word	0x20000614
    4f78:	.word	0xe0001000
    4f7c:	.word	0x000f4240
    4f80:	.word	0x20001cf0

00004f84 <TwoWire::wait_idle()>:
	return systick_millis_count;
    4f84:	ldr	r2, [pc, #44]	; (4fb4 <TwoWire::wait_idle()+0x30>)
{
    4f86:	push	{r4, lr}
    4f88:	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    4f8a:	ldr	r4, [r0, #16]
		uint32_t status = port->MSR; // pg 2899 & 2892
    4f8c:	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    4f8e:	tst.w	r3, #33554432	; 0x2000000
    4f92:	bne.n	4f9e <TwoWire::wait_idle()+0x1a>
	port->MSR = 0x00007F00; // clear all prior flags
    4f94:	mov.w	r3, #32512	; 0x7f00
	return true;
    4f98:	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    4f9a:	str	r3, [r4, #20]
}
    4f9c:	pop	{r4, pc}
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    4f9e:	lsls	r3, r3, #7
    4fa0:	bmi.n	4f94 <TwoWire::wait_idle()+0x10>
    4fa2:	ldr	r3, [r2, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    4fa4:	subs	r3, r3, r1
		if (timeout > 16) {
    4fa6:	cmp	r3, #16
    4fa8:	bls.n	4f8c <TwoWire::wait_idle()+0x8>
			if (force_clock()) break;
    4faa:	bl	4e70 <TwoWire::force_clock()>
    4fae:	cmp	r0, #0
    4fb0:	bne.n	4f94 <TwoWire::wait_idle()+0x10>
    4fb2:	b.n	4f9c <TwoWire::wait_idle()+0x18>
    4fb4:	.word	0x20015374

00004fb8 <TwoWire::endTransmission(unsigned char)>:
{
    4fb8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tx_len = txBufferLength;
    4fbc:	ldrb.w	r8, [r0, #303]	; 0x12f
{
    4fc0:	mov	r7, r0
    4fc2:	mov	r5, r1
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    4fc4:	ldr	r4, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    4fc6:	cmp.w	r8, #0
    4fca:	beq.n	502a <TwoWire::endTransmission(unsigned char)+0x72>
	if (!wait_idle()) return 4;
    4fcc:	bl	4f84 <TwoWire::wait_idle()>
    4fd0:	cbz	r0, 502a <TwoWire::endTransmission(unsigned char)+0x72>
    4fd2:	ldr.w	r9, [pc, #196]	; 5098 <TwoWire::endTransmission(unsigned char)+0xe0>
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    4fd6:	movs	r6, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4fd8:	mov.w	fp, #512	; 0x200
    4fdc:	ldr.w	sl, [r9]
		if (tx_index <= tx_len) {
    4fe0:	cmp	r6, r8
    4fe2:	bhi.n	501c <TwoWire::endTransmission(unsigned char)+0x64>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    4fe4:	ldr	r3, [r4, #92]	; 0x5c
    4fe6:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    4fea:	cmp	r3, #3
    4fec:	bhi.n	501c <TwoWire::endTransmission(unsigned char)+0x64>
				if (tx_index == 0) {
    4fee:	cbnz	r6, 5002 <TwoWire::endTransmission(unsigned char)+0x4a>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    4ff0:	ldrb.w	r2, [r7, #165]	; 0xa5
    4ff4:	orr.w	r2, r2, #1024	; 0x400
    4ff8:	str	r2, [r4, #96]	; 0x60
					tx_index = 1;
    4ffa:	movs	r2, #1
				fifo_used++;
    4ffc:	adds	r3, #1
    4ffe:	mov	r6, r2
    5000:	b.n	4fea <TwoWire::endTransmission(unsigned char)+0x32>
				} else if (tx_index < tx_len) {
    5002:	cmp	r6, r8
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    5004:	add.w	r2, r6, #1
				} else if (tx_index < tx_len) {
    5008:	bcs.n	5014 <TwoWire::endTransmission(unsigned char)+0x5c>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    500a:	add	r6, r7
    500c:	ldrb.w	r1, [r6, #165]	; 0xa5
    5010:	str	r1, [r4, #96]	; 0x60
    5012:	b.n	4ffc <TwoWire::endTransmission(unsigned char)+0x44>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5014:	cbz	r5, 501a <TwoWire::endTransmission(unsigned char)+0x62>
    5016:	str.w	fp, [r4, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    501a:	mov	r6, r2
		uint32_t status = port->MSR; // pg 2884 & 2891
    501c:	ldr	r3, [r4, #20]
		if (status & LPI2C_MSR_ALF) {
    501e:	lsls	r2, r3, #20
    5020:	bpl.n	502e <TwoWire::endTransmission(unsigned char)+0x76>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5022:	ldr	r3, [r4, #16]
    5024:	orr.w	r3, r3, #768	; 0x300
    5028:	str	r3, [r4, #16]
	if (!tx_len) return 4; // no address for transmit
    502a:	movs	r5, #4
    502c:	b.n	503c <TwoWire::endTransmission(unsigned char)+0x84>
		if (status & LPI2C_MSR_FEF) {
    502e:	lsls	r0, r3, #19
    5030:	bpl.n	5042 <TwoWire::endTransmission(unsigned char)+0x8a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5032:	ldr	r3, [r4, #16]
			return 5; // FIFO error
    5034:	movs	r5, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5036:	orr.w	r3, r3, #768	; 0x300
    503a:	str	r3, [r4, #16]
}
    503c:	mov	r0, r5
    503e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (status & LPI2C_MSR_NDF) {
    5042:	lsls	r1, r3, #21
    5044:	bpl.n	5058 <TwoWire::endTransmission(unsigned char)+0xa0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5046:	ldr	r3, [r4, #16]
			return 2; // NACK (assume address, TODO: how to tell address from data)
    5048:	movs	r5, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    504a:	orr.w	r3, r3, #768	; 0x300
    504e:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    5050:	mov.w	r3, #512	; 0x200
    5054:	str	r3, [r4, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    5056:	b.n	503c <TwoWire::endTransmission(unsigned char)+0x84>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    5058:	lsls	r2, r3, #18
    505a:	bmi.n	5068 <TwoWire::endTransmission(unsigned char)+0xb0>
    505c:	ldr.w	r2, [r9]
    5060:	sub.w	r2, r2, sl
    5064:	cmp	r2, #50	; 0x32
    5066:	bls.n	5078 <TwoWire::endTransmission(unsigned char)+0xc0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5068:	ldr	r3, [r4, #16]
    506a:	orr.w	r3, r3, #768	; 0x300
    506e:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    5070:	mov.w	r3, #512	; 0x200
    5074:	str	r3, [r4, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    5076:	b.n	502a <TwoWire::endTransmission(unsigned char)+0x72>
		if (tx_index > tx_len) {
    5078:	cmp	r6, r8
    507a:	bls.n	508c <TwoWire::endTransmission(unsigned char)+0xd4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    507c:	ldr	r2, [r4, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    507e:	ands.w	r2, r2, #7
    5082:	bne.n	508c <TwoWire::endTransmission(unsigned char)+0xd4>
    5084:	lsls	r3, r3, #22
    5086:	bmi.n	5092 <TwoWire::endTransmission(unsigned char)+0xda>
    5088:	cmp	r5, #0
    508a:	beq.n	503c <TwoWire::endTransmission(unsigned char)+0x84>
		yield();
    508c:	bl	c1c4 <yield>
	}
    5090:	b.n	4fe0 <TwoWire::endTransmission(unsigned char)+0x28>
				return 0;
    5092:	mov	r5, r2
    5094:	b.n	503c <TwoWire::endTransmission(unsigned char)+0x84>
    5096:	nop
    5098:	.word	0x20015374

0000509c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    509c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50a0:	mov	r7, r0
    50a2:	mov	r6, r1
    50a4:	mov	r9, r2
    50a6:	mov	r8, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    50a8:	ldr	r5, [r0, #16]
	if (!wait_idle()) return 4;
    50aa:	bl	4f84 <TwoWire::wait_idle()>
    50ae:	cmp	r0, #0
    50b0:	beq.n	51a8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10c>
	address = (address & 0x7F) << 1;
    50b2:	lsls	r6, r6, #1
	if (length < 1) length = 1;
    50b4:	cmp.w	r9, #1
    50b8:	ldr.w	sl, [pc, #240]	; 51ac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
	rxBufferIndex = 0;
    50bc:	mov.w	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    50c0:	uxtb	r6, r6
    50c2:	it	cc
    50c4:	movcc.w	r9, #1
    50c8:	ldr.w	fp, [sl]
    50cc:	orr.w	r6, r6, #1024	; 0x400
	rxBufferIndex = 0;
    50d0:	strh.w	r4, [r7, #162]	; 0xa2
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    50d4:	orr.w	r6, r6, #1
		if (tx_state < 3) {
    50d8:	cmp	r4, #2
    50da:	bhi.n	50fa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    50dc:	ldr	r3, [r5, #92]	; 0x5c
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    50de:	add.w	r2, r9, #4294967295
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    50e2:	mov.w	r1, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    50e6:	and.w	r3, r3, #7
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    50ea:	orr.w	r2, r2, #256	; 0x100
    50ee:	add	r3, r4
			while (tx_fifo < 4 && tx_state < 3) {
    50f0:	subs	r0, r3, r4
    50f2:	cmp	r0, #3
    50f4:	bhi.n	50fa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
    50f6:	cmp	r4, #3
    50f8:	bne.n	5128 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x8c>
		if (rxBufferLength < sizeof(rxBuffer)) {
    50fa:	ldrb.w	r3, [r7, #163]	; 0xa3
    50fe:	cmp	r3, #135	; 0x87
    5100:	bls.n	5142 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    5102:	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    5104:	lsls	r1, r3, #20
    5106:	bpl.n	5164 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5108:	ldr	r3, [r5, #16]
    510a:	orr.w	r3, r3, #768	; 0x300
    510e:	str	r3, [r5, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    5110:	ldr	r3, [r5, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    5112:	tst.w	r3, #458752	; 0x70000
    5116:	beq.n	5120 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x84>
    5118:	ldr	r3, [r5, #16]
    511a:	orr.w	r3, r3, #512	; 0x200
    511e:	str	r3, [r5, #16]
	return rxBufferLength;
    5120:	ldrb.w	r0, [r7, #163]	; 0xa3
}
    5124:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (tx_state == 0) {
    5128:	cbnz	r4, 5130 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x94>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    512a:	str	r6, [r5, #96]	; 0x60
				tx_state++;
    512c:	adds	r4, #1
				tx_fifo--;
    512e:	b.n	50f0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x54>
				} else if (tx_state == 1) {
    5130:	cmp	r4, #1
    5132:	bne.n	5138 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    5134:	str	r2, [r5, #96]	; 0x60
    5136:	b.n	512c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5138:	cmp.w	r8, #0
    513c:	beq.n	512c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
    513e:	str	r1, [r5, #96]	; 0x60
    5140:	b.n	512c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    5142:	ldr	r2, [r5, #92]	; 0x5c
    5144:	ubfx	r2, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    5148:	cmp	r2, #0
    514a:	beq.n	5102 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
    514c:	ldrb.w	r3, [r7, #163]	; 0xa3
    5150:	cmp	r3, #135	; 0x87
    5152:	bhi.n	5102 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
				rxBuffer[rxBufferLength++] = port->MRDR;
    5154:	ldr	r1, [r5, #112]	; 0x70
    5156:	adds	r0, r3, #1
    5158:	add	r3, r7
				rx_fifo--;
    515a:	subs	r2, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    515c:	strb.w	r0, [r7, #163]	; 0xa3
    5160:	strb	r1, [r3, #26]
				rx_fifo--;
    5162:	b.n	5148 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xac>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    5164:	tst.w	r3, #9216	; 0x2400
    5168:	bne.n	5176 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
    516a:	ldr.w	r2, [sl]
    516e:	sub.w	r2, r2, fp
    5172:	cmp	r2, #50	; 0x32
    5174:	bls.n	5186 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5176:	ldr	r3, [r5, #16]
    5178:	orr.w	r3, r3, #768	; 0x300
    517c:	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    517e:	mov.w	r3, #512	; 0x200
    5182:	str	r3, [r5, #96]	; 0x60
			break;
    5184:	b.n	5110 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		if (rxBufferLength >= length && tx_state >= 3) {
    5186:	ldrb.w	r2, [r7, #163]	; 0xa3
    518a:	cmp	r2, r9
    518c:	bcc.n	51a2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    518e:	cmp	r4, #2
    5190:	bls.n	51a2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			uint32_t tx_fifo = port->MFSR & 0x07;
    5192:	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    5194:	lsls	r2, r2, #29
    5196:	bne.n	51a2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    5198:	lsls	r3, r3, #22
    519a:	bmi.n	5110 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
    519c:	cmp.w	r8, #0
    51a0:	beq.n	5110 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		yield();
    51a2:	bl	c1c4 <yield>
	}
    51a6:	b.n	50d8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3c>
	if (!wait_idle()) return 4;
    51a8:	movs	r0, #4
    51aa:	b.n	5124 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    51ac:	.word	0x20015374

000051b0 <TwoWire::isr()>:
{
    51b0:	push	{r4, r5, r6, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    51b2:	ldr	r6, [r0, #16]
{
    51b4:	mov	r4, r0
	uint32_t status = port->SSR;
    51b6:	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    51ba:	ands.w	r3, r5, #3840	; 0xf00
    51be:	beq.n	51c4 <TwoWire::isr()+0x14>
    51c0:	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    51c4:	lsls	r0, r5, #30
    51c6:	bpl.n	51e8 <TwoWire::isr()+0x38>
		int rx = port->SRDR;
    51c8:	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    51cc:	lsls	r1, r2, #16
			rxBufferIndex = 0;
    51ce:	itt	mi
    51d0:	movmi	r3, #0
    51d2:	strhmi.w	r3, [r4, #162]	; 0xa2
		if (rxBufferLength < BUFFER_LENGTH) {
    51d6:	ldrb.w	r3, [r4, #163]	; 0xa3
    51da:	cmp	r3, #135	; 0x87
			rxBuffer[rxBufferLength++] = rx & 255;
    51dc:	itttt	ls
    51de:	addls	r1, r3, #1
    51e0:	addls	r3, r3, r4
    51e2:	strbls.w	r1, [r4, #163]	; 0xa3
    51e6:	strbls	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    51e8:	lsls	r2, r5, #31
    51ea:	bpl.n	5226 <TwoWire::isr()+0x76>
		if (!transmitting) {
    51ec:	ldrb.w	r3, [r4, #304]	; 0x130
    51f0:	cbnz	r3, 5206 <TwoWire::isr()+0x56>
			if (user_onRequest != nullptr) {
    51f2:	ldr.w	r3, [r4, #312]	; 0x138
    51f6:	cbz	r3, 51fa <TwoWire::isr()+0x4a>
				(*user_onRequest)();
    51f8:	blx	r3
			txBufferIndex = 0;
    51fa:	movs	r3, #0
    51fc:	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    5200:	movs	r3, #1
    5202:	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    5206:	ldrb.w	r3, [r4, #302]	; 0x12e
    520a:	ldrb.w	r2, [r4, #303]	; 0x12f
    520e:	cmp	r2, r3
			port->STDR = txBuffer[txBufferIndex++];
    5210:	ittet	hi
    5212:	addhi	r2, r3, #1
    5214:	addhi	r3, r3, r4
			port->STDR = 0;
    5216:	movls	r3, #0
			port->STDR = txBuffer[txBufferIndex++];
    5218:	strbhi.w	r2, [r4, #302]	; 0x12e
    521c:	it	hi
    521e:	ldrbhi.w	r3, [r3, #165]	; 0xa5
			port->STDR = 0;
    5222:	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    5226:	lsls	r3, r5, #22
    5228:	bpl.n	5246 <TwoWire::isr()+0x96>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    522a:	ldrb.w	r0, [r4, #163]	; 0xa3
    522e:	cbz	r0, 5238 <TwoWire::isr()+0x88>
    5230:	ldr.w	r3, [r4, #316]	; 0x13c
    5234:	cbz	r3, 5238 <TwoWire::isr()+0x88>
			(*user_onReceive)(rxBufferLength);
    5236:	blx	r3
		rxBufferIndex = 0;
    5238:	movs	r3, #0
    523a:	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    523e:	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    5242:	strb.w	r3, [r4, #304]	; 0x130
}
    5246:	pop	{r4, r5, r6, pc}

00005248 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    5248:	ldr	r0, [pc, #4]	; (5250 <lpi2c1_isr()+0x8>)
    524a:	b.w	51b0 <TwoWire::isr()>
    524e:	nop
    5250:	.word	0x20001d04

00005254 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    5254:	ldr	r0, [pc, #4]	; (525c <lpi2c3_isr()+0x8>)
    5256:	b.w	51b0 <TwoWire::isr()>
    525a:	nop
    525c:	.word	0x20001e44

00005260 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    5260:	ldr	r0, [pc, #4]	; (5268 <lpi2c4_isr()+0x8>)
    5262:	b.w	51b0 <TwoWire::isr()>
    5266:	nop
    5268:	.word	0x20001f84

0000526c <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    526c:	ldr	r3, [r0, #16]
	port->MCR = 0;
    526e:	movs	r2, #0
	if (frequency < 400000) {
    5270:	ldr	r0, [pc, #76]	; (52c0 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    5272:	str	r2, [r3, #16]
	if (frequency < 400000) {
    5274:	cmp	r1, r0
    5276:	bhi.n	529e <TwoWire::setClock(unsigned long)+0x32>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    5278:	ldr	r2, [pc, #72]	; (52c4 <TwoWire::setClock(unsigned long)+0x58>)
    527a:	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    527c:	movs	r2, #1
    527e:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    5280:	ldr	r2, [pc, #68]	; (52c8 <TwoWire::setClock(unsigned long)+0x5c>)
    5282:	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    5284:	mov.w	r2, #180224	; 0x2c000
    5288:	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    528a:	ldr	r2, [r3, #72]	; 0x48
    528c:	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    528e:	movs	r2, #0
    5290:	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    5292:	mov.w	r2, #65537	; 0x10001
    5296:	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    5298:	movs	r2, #1
    529a:	str	r2, [r3, #16]
}
    529c:	bx	lr
	} else if (frequency < 1000000) {
    529e:	ldr	r0, [pc, #44]	; (52cc <TwoWire::setClock(unsigned long)+0x60>)
    52a0:	cmp	r1, r0
    52a2:	ldr	r1, [pc, #44]	; (52d0 <TwoWire::setClock(unsigned long)+0x64>)
    52a4:	bhi.n	52b4 <TwoWire::setClock(unsigned long)+0x48>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    52a6:	ldr	r0, [pc, #44]	; (52d4 <TwoWire::setClock(unsigned long)+0x68>)
    52a8:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    52aa:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    52ac:	ldr	r2, [pc, #40]	; (52d8 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    52ae:	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    52b0:	str	r1, [r3, #44]	; 0x2c
    52b2:	b.n	528a <TwoWire::setClock(unsigned long)+0x1e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    52b4:	ldr	r0, [pc, #36]	; (52dc <TwoWire::setClock(unsigned long)+0x70>)
    52b6:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    52b8:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    52ba:	ldr	r2, [pc, #36]	; (52e0 <TwoWire::setClock(unsigned long)+0x74>)
    52bc:	b.n	52ae <TwoWire::setClock(unsigned long)+0x42>
    52be:	nop
    52c0:	.word	0x00061a7f
    52c4:	.word	0x1928373b
    52c8:	.word	0x05050bb8
    52cc:	.word	0x000f423f
    52d0:	.word	0x00057f00
    52d4:	.word	0x0c121a1c
    52d8:	.word	0x02020e10
    52dc:	.word	0x0407090a
    52e0:	.word	0x01010960

000052e4 <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    52e4:	mov	r3, r0
    size_t n = end - str;
    52e6:	subs	r0, r2, r1
    if (cp < 0X80) {
    52e8:	cmp	r3, #127	; 0x7f
    52ea:	bhi.n	52f8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    52ec:	cmp	r0, #0
    52ee:	beq.n	5374 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    52f0:	mov	r0, r1
    52f2:	strb.w	r3, [r0], #1
    52f6:	bx	lr
    } else if (cp < 0X800) {
    52f8:	cmp.w	r3, #2048	; 0x800
    52fc:	bcs.n	531a <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    52fe:	cmp	r0, #1
    5300:	bls.n	5372 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5302:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5304:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5308:	mov	r0, r1
    530a:	orn	r2, r2, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    530e:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5312:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5316:	strb	r3, [r1, #1]
    5318:	bx	lr
    } else if (cp < 0X10000) {
    531a:	cmp.w	r3, #65536	; 0x10000
    531e:	bcs.n	5344 <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    5320:	cmp	r0, #2
    5322:	bls.n	5372 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    5324:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5326:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    5328:	orn	r2, r2, #31
    532c:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    532e:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5332:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5336:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    533a:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    533e:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5340:	strb	r3, [r1, #2]
    5342:	bx	lr
       if (n < 4) goto fail;
    5344:	cmp	r0, #3
    5346:	bls.n	5372 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    5348:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    534a:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    534c:	orn	r2, r2, #15
    5350:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    5352:	ubfx	r2, r3, #12, #6
    5356:	orn	r2, r2, #127	; 0x7f
    535a:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    535c:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5360:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5364:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5368:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    536c:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    536e:	strb	r3, [r1, #3]
    5370:	bx	lr
    return nullptr;
    5372:	movs	r0, #0
  }
    5374:	bx	lr
	...

00005378 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    5378:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    537a:	push	{r4, r5, lr}
    537c:	mov	r5, r0
    if (str >= end) {
    537e:	bcs.n	53f6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    uint8_t ch = str[0];
    5380:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    5382:	ldrsb.w	r0, [r0]
    5386:	cmp	r0, #0
    5388:	blt.n	5390 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      return str + 1;
    538a:	adds	r0, r5, #1
      *rtn = ch;
    538c:	str	r3, [r2, #0]
  }
    538e:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    5390:	and.w	r0, r3, #224	; 0xe0
    5394:	cmp	r0, #192	; 0xc0
    5396:	bne.n	53d6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    5398:	and.w	r3, r3, #31
      n = 2;
    539c:	movs	r4, #2
    if ((str + n) > end) {
    539e:	adds	r0, r5, r4
    53a0:	cmp	r0, r1
    53a2:	bhi.n	53f6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    53a4:	adds	r5, #1
      ch = str[i];
    53a6:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    53aa:	and.w	r4, r1, #192	; 0xc0
    53ae:	cmp	r4, #128	; 0x80
    53b0:	bne.n	53f6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    53b2:	and.w	r1, r1, #63	; 0x3f
    for (size_t i = 1; i < n; i++) {
    53b6:	cmp	r5, r0
      cp |= ch & 0X3F;
    53b8:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    53bc:	bne.n	53a6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    53be:	sub.w	r4, r3, #128	; 0x80
    53c2:	ldr	r1, [pc, #56]	; (53fc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    53c4:	cmp	r4, r1
    53c6:	bhi.n	53f6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    53c8:	sub.w	r1, r3, #55296	; 0xd800
    53cc:	cmp.w	r1, #2048	; 0x800
    53d0:	bcc.n	53f6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    53d2:	str	r3, [r2, #0]
    return str + n;
    53d4:	b.n	538e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    53d6:	and.w	r0, r3, #240	; 0xf0
    53da:	cmp	r0, #224	; 0xe0
    53dc:	bne.n	53e6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    53de:	and.w	r3, r3, #15
      n = 3;
    53e2:	movs	r4, #3
    53e4:	b.n	539e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    53e6:	and.w	r0, r3, #248	; 0xf8
    53ea:	cmp	r0, #240	; 0xf0
    53ec:	bne.n	53f6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    53ee:	and.w	r3, r3, #7
      n = 4;
    53f2:	movs	r4, #4
    53f4:	b.n	539e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    53f6:	movs	r0, #0
    53f8:	b.n	538e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    53fa:	nop
    53fc:	.word	0x0010ff7f

00005400 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    5400:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    5402:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    5404:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    5406:	lsls	r2, r3, #31
    5408:	bpl.n	544a <FsCache::sync()+0x4a>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    540a:	ldr	r0, [r0, #4]
    540c:	add.w	r2, r4, #16
    5410:	ldr	r1, [r4, #12]
    5412:	ldr	r3, [r0, #0]
    5414:	str	r2, [sp, #4]
    5416:	ldr	r3, [r3, #36]	; 0x24
    5418:	blx	r3
    541a:	ldr	r2, [sp, #4]
    541c:	mov	r5, r0
    541e:	cbnz	r0, 5428 <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    5420:	movs	r5, #0
}
    5422:	mov	r0, r5
    5424:	add	sp, #8
    5426:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5428:	ldrb	r3, [r4, #0]
    542a:	lsls	r3, r3, #30
    542c:	bmi.n	5438 <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    542e:	ldrb	r3, [r4, #0]
    5430:	bic.w	r3, r3, #1
    5434:	strb	r3, [r4, #0]
    5436:	b.n	5422 <FsCache::sync()+0x22>
      uint32_t sector = m_sector + m_mirrorOffset;
    5438:	adds	r0, r4, #4
    543a:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    543c:	ldr	r3, [r0, #0]
    543e:	add	r1, r6
    5440:	ldr	r3, [r3, #36]	; 0x24
    5442:	blx	r3
    5444:	cmp	r0, #0
    5446:	bne.n	542e <FsCache::sync()+0x2e>
    5448:	b.n	5420 <FsCache::sync()+0x20>
  return true;
    544a:	movs	r5, #1
    544c:	b.n	5422 <FsCache::sync()+0x22>

0000544e <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    544e:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    5450:	push	{r4, r5, r6, lr}
    5452:	mov	r4, r0
    5454:	mov	r6, r1
    5456:	mov	r5, r2
  if (!m_blockDev) {
    5458:	cbnz	r3, 545e <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    545a:	movs	r0, #0
}
    545c:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    545e:	ldr	r3, [r0, #12]
    5460:	cmp	r3, r1
    5462:	beq.n	5476 <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    5464:	bl	5400 <FsCache::sync()>
    5468:	cmp	r0, #0
    546a:	beq.n	545a <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    546c:	lsls	r3, r5, #29
    546e:	bpl.n	5486 <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    5470:	movs	r3, #0
    m_sector = sector;
    5472:	str	r6, [r4, #12]
    m_status = 0;
    5474:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    5476:	ldrb	r3, [r4, #0]
    5478:	and.w	r5, r5, #3
    547c:	mov	r0, r4
    547e:	orrs	r3, r5
    5480:	strb.w	r3, [r0], #16
  return m_buffer;
    5484:	b.n	545c <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    5486:	ldr	r0, [r4, #4]
    5488:	add.w	r2, r4, #16
    548c:	mov	r1, r6
    548e:	ldr	r3, [r0, #0]
    5490:	ldr	r3, [r3, #16]
    5492:	blx	r3
    5494:	cmp	r0, #0
    5496:	bne.n	5470 <FsCache::prepare(unsigned long, unsigned char)+0x22>
    5498:	b.n	545a <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

0000549c <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    549c:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    549e:	push	{r4, r5, lr}
  if (chr < 127) {
    54a0:	bhi.n	54f2 <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    54a2:	sub.w	r3, r0, #97	; 0x61
    54a6:	cmp	r3, #25
    54a8:	ite	hi
    54aa:	movhi	r3, #0
    54ac:	movls	r3, #1
    54ae:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    54b2:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    54b4:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    54b6:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    54ba:	ldrh.w	r5, [r1, r2, lsl #2]
    54be:	cmp	r5, r0
    mid = left + (right - left)/2;
    54c0:	ite	hi
    54c2:	movhi	r4, r2
    54c4:	movls	r3, r2
  while (right - left > 1) {
    54c6:	subs	r2, r4, r3
    54c8:	cmp	r2, #1
    54ca:	bhi.n	54b6 <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    54cc:	uxth	r2, r3
    54ce:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    54d2:	cmp	r0, r3
    54d4:	bcc.n	5532 <toUpcase(unsigned short)+0x96>
    54d6:	add.w	r1, r1, r2, lsl #2
    54da:	subs	r3, r0, r3
    54dc:	ldrb	r2, [r1, #3]
    54de:	cmp	r3, r2
    54e0:	bge.n	5532 <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    54e2:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    54e6:	cmp	r2, #1
    54e8:	bne.n	54fa <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    54ea:	and.w	r3, r3, #1
    54ee:	subs	r3, r0, r3
    54f0:	b.n	54b2 <toUpcase(unsigned short)+0x16>
  size_t right = size;
    54f2:	movs	r4, #53	; 0x35
  size_t left = 0;
    54f4:	movs	r3, #0
    54f6:	ldr	r1, [pc, #68]	; (553c <toUpcase(unsigned short)+0xa0>)
    54f8:	b.n	54c6 <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    54fa:	cbz	r2, 5504 <toUpcase(unsigned short)+0x68>
    54fc:	uxth	r2, r2
    54fe:	add	r2, r0
    5500:	uxth	r0, r2
    5502:	b.n	54b4 <toUpcase(unsigned short)+0x18>
    5504:	movw	r2, #58272	; 0xe3a0
    5508:	b.n	54fe <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    550a:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    550e:	ldrh.w	r5, [r1, r2, lsl #2]
    5512:	cmp	r5, r0
    mid = left + (right - left)/2;
    5514:	ite	hi
    5516:	movhi	r4, r2
    5518:	movls	r3, r2
  while (right - left > 1) {
    551a:	subs	r2, r4, r3
    551c:	cmp	r2, #1
    551e:	bhi.n	550a <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    5520:	uxth	r3, r3
    5522:	ldrh.w	r2, [r1, r3, lsl #2]
    5526:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    5528:	itt	eq
    552a:	addeq.w	r1, r1, r3, lsl #2
    552e:	ldrheq	r0, [r1, #2]
    5530:	b.n	54b4 <toUpcase(unsigned short)+0x18>
    5532:	movs	r4, #75	; 0x4b
    5534:	movs	r3, #0
    5536:	ldr	r1, [pc, #8]	; (5540 <toUpcase(unsigned short)+0xa4>)
    5538:	b.n	551a <toUpcase(unsigned short)+0x7e>
    553a:	nop
    553c:	.word	0x20000b98
    5540:	.word	0x20000a30

00005544 <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    5544:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    5546:	push	{r0, r1, r4, lr}
    5548:	mov	r4, r0
  if (ls) {
    554a:	cbz	r3, 5556 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    554c:	movs	r2, #0
    554e:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    5550:	mov	r0, r3
    5552:	add	sp, #8
    5554:	pop	{r4, pc}
  } else if (next >= end) {
    5556:	ldrd	r0, r1, [r0, #4]
    555a:	cmp	r0, r1
    555c:	bcs.n	5550 <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    555e:	add	r2, sp, #4
    5560:	bl	5378 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    5564:	cbnz	r0, 556c <FsName::get16()+0x28>
  return 0XFFFF;
    5566:	movw	r3, #65535	; 0xffff
    556a:	b.n	5550 <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    556c:	ldr	r2, [sp, #4]
    next = ptr;
    556e:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    5570:	cmp.w	r2, #65536	; 0x10000
      rtn = cp;
    5574:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    5576:	bcc.n	5550 <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    5578:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    557c:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    557e:	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5582:	sub.w	r2, r2, #10304	; 0x2840
      ls = FsUtf::lowSurrogate(cp);
    5586:	strh	r3, [r4, #12]
    5588:	uxth	r3, r2
    558a:	b.n	5550 <FsName::get16()+0xc>

0000558c <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    558c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5590:	mov	r6, r2
    5592:	mov	r5, r1
    5594:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    5598:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    559a:	ldrh.w	r4, [r5, #2]!
    559e:	cbnz	r3, 55b2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    55a0:	ldrd	r2, r3, [r6, #4]
    55a4:	cmp	r2, r3
    55a6:	bne.n	55b2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
      return u == 0;
    55a8:	clz	r0, r4
    55ac:	lsrs	r0, r0, #5
}
    55ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    55b2:	mov	r0, r6
    55b4:	bl	5544 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    55b8:	bl	549c <toUpcase(unsigned short)>
    55bc:	mov	r7, r0
    55be:	mov	r0, r4
    55c0:	bl	549c <toUpcase(unsigned short)>
    55c4:	cmp	r7, r0
    55c6:	bne.n	55d0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    55c8:	cmp	r5, r8
    55ca:	bne.n	5598 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    55cc:	movs	r0, #1
    55ce:	b.n	55ae <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    55d0:	movs	r0, #0
    55d2:	b.n	55ae <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

000055d4 <ExFatFile::getName8(char*, unsigned int)>:
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    55d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    55d8:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    55dc:	mov	sl, r0
    55de:	mov	r8, r1
  if (!isOpen()) {
    55e0:	cmp	r3, #0
    55e2:	beq.n	5676 <ExFatFile::getName8(char*, unsigned int)+0xa2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    55e4:	subs	r2, #1
  char* str = name;
    55e6:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    55e8:	mov.w	r9, #2
  uint16_t hs = 0;
    55ec:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    55ee:	adds	r7, r1, r2
  for (uint8_t is = 2; is <= m_setCount; is++) {
    55f0:	ldrb.w	r3, [sl, #48]	; 0x30
    55f4:	cmp	r3, r9
    55f6:	bcc.n	5660 <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    55f8:	movs	r2, #0
    55fa:	mov	r1, r9
    55fc:	mov	r0, sl
    55fe:	bl	56e6 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    5602:	cbz	r0, 5676 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5604:	ldrb	r3, [r0, #0]
    5606:	cmp	r3, #193	; 0xc1
    5608:	bne.n	5676 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    560a:	mov	r6, r0
    560c:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5610:	ldr	r3, [pc, #108]	; (5680 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    5612:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    5616:	cbz	r5, 5650 <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    5618:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    561c:	uxth	r2, r2
    561e:	cmp.w	r2, #1024	; 0x400
    5622:	bcs.n	5676 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5624:	and.w	r5, r3, r5, lsl #10
    5628:	ubfx	r0, r0, #0, #10
    562c:	orrs	r0, r5
    562e:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5632:	mov	r1, r4
    5634:	mov	r2, r7
    5636:	bl	52e4 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    563a:	mov	r4, r0
    563c:	cbz	r0, 5676 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    563e:	movs	r5, #0
    5640:	ldr	r3, [pc, #60]	; (5680 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    for (uint8_t in = 0; in < 15; in++) {
    5642:	cmp	fp, r6
    5644:	bne.n	5612 <ExFatFile::getName8(char*, unsigned int)+0x3e>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5646:	add.w	r9, r9, #1
    564a:	uxtb.w	r9, r9
    564e:	b.n	55f0 <ExFatFile::getName8(char*, unsigned int)+0x1c>
    return 0XD800 <= c && c <= 0XDFFF;
    5650:	add.w	r2, r0, #10240	; 0x2800
    5654:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    5656:	cmp.w	r2, #2048	; 0x800
    565a:	bcc.n	566c <ExFatFile::getName8(char*, unsigned int)+0x98>
        if (c == 0) {
    565c:	cmp	r0, #0
    565e:	bne.n	5632 <ExFatFile::getName8(char*, unsigned int)+0x5e>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    5660:	movs	r3, #0
  return str - name;
    5662:	sub.w	r0, r4, r8
  *str = '\0';
    5666:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    5668:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    566c:	cmp.w	r2, #1024	; 0x400
    5670:	bcs.n	5676 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5672:	mov	r5, r0
    5674:	b.n	5642 <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    5676:	movs	r0, #0
    5678:	strb.w	r0, [r8]
  return 0;
    567c:	b.n	5668 <ExFatFile::getName8(char*, unsigned int)+0x94>
    567e:	nop
    5680:	.word	0x000ffc00

00005684 <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    5684:	movs	r0, #0
    next = begin;
    5686:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    5688:	push	{r4, r5, r6, lr}
    568a:	mov	r4, r1
  uint16_t hash = 0;
    568c:	mov	r6, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    568e:	movw	r5, #65535	; 0xffff
    5692:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    5694:	strh	r0, [r1, #12]
    return !ls && next == end;
    5696:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    5698:	str	r0, [r4, #16]
    569a:	cbnz	r3, 56d8 <ExFatFile::hashName(ExName_t*)+0x54>
    569c:	ldrd	r2, r3, [r4, #4]
    56a0:	cmp	r2, r3
    56a2:	bne.n	56d8 <ExFatFile::hashName(ExName_t*)+0x54>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    56a4:	subs	r0, #1
  fname->nameHash = hash;
    56a6:	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    56a8:	cmp	r0, #254	; 0xfe
    56aa:	ite	hi
    56ac:	movhi	r0, #0
    56ae:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    56b0:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    56b2:	bl	549c <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    56b6:	lsls	r3, r6, #15
    56b8:	orr.w	r3, r3, r6, lsr #1
    56bc:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    56c0:	lsrs	r0, r0, #8
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    56c2:	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    56c4:	ubfx	r3, r3, #1, #15
    56c8:	orr.w	r3, r3, r2, lsl #15
    56cc:	uxtah	r3, r0, r3
    fname->nameLength++;
    56d0:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    56d2:	uxth	r6, r3
    fname->nameLength++;
    56d4:	adds	r0, #1
    56d6:	b.n	5696 <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    56d8:	mov	r0, r4
    56da:	bl	5544 <FsName::get16()>
    if (u == 0XFFFF) {
    56de:	cmp	r0, r5
    56e0:	bne.n	56b2 <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    56e2:	movs	r0, #0
    56e4:	b.n	56b0 <ExFatFile::hashName(ExName_t*)+0x2c>

000056e6 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    56e6:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    56e8:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    56ec:	sub	sp, #20
    56ee:	mov	r4, r0
    56f0:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    56f2:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    56f4:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    56f6:	ldmia.w	r3, {r0, r1, r2}
    56fa:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    56fe:	lsls	r2, r7, #5
    5700:	mov	r1, r5
    5702:	ldr	r0, [r4, #32]
    5704:	bl	60da <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5708:	cmp	r0, #1
    570a:	bne.n	571a <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    570c:	mov	r2, r6
    570e:	mov	r1, r5
    5710:	ldr	r0, [r4, #32]
    5712:	bl	6040 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    5716:	add	sp, #20
    5718:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    571a:	movs	r0, #0
    571c:	b.n	5716 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

0000571e <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    571e:	push	{r4, lr}
    5720:	mov	r4, r0
  bool rtn = sync();
    5722:	bl	65fc <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    5726:	movs	r3, #0
    5728:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    572c:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    5730:	pop	{r4, pc}

00005732 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5732:	push	{r3, r4, r5, lr}
    5734:	mov	r5, r1
    5736:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5738:	add.w	r1, r0, #36	; 0x24
    573c:	movs	r2, #0
    573e:	ldr	r0, [r0, #32]
    5740:	bl	6040 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5744:	cbz	r0, 5750 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>
    5746:	ldrh	r3, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    5748:	strh	r3, [r5, #0]
    574a:	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
  return true;
    574c:	movs	r0, #1
  *ptime = getLe16(df->createTime);
    574e:	strh	r3, [r4, #0]

 fail:
  return false;
}
    5750:	pop	{r3, r4, r5, pc}

00005752 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5752:	push	{r3, r4, r5, lr}
    5754:	mov	r5, r1
    5756:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5758:	add.w	r1, r0, #36	; 0x24
    575c:	movs	r2, #0
    575e:	ldr	r0, [r0, #32]
    5760:	bl	6040 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5764:	cbz	r0, 5770 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>
    5766:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    5768:	strh	r3, [r5, #0]
    576a:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
  return true;
    576c:	movs	r0, #1
  *ptime = getLe16(df->modifyTime);
    576e:	strh	r3, [r4, #0]

 fail:
  return false;
}
    5770:	pop	{r3, r4, r5, pc}

00005772 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5772:	push	{r3, r4, r5, lr}
    5774:	mov	r5, r1
  if (isOpen()) {
    5776:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    577a:	mov	r4, r0
  if (isOpen()) {
    577c:	cbnz	r1, 5794 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    577e:	movs	r2, #56	; 0x38
    5780:	bl	9fbc <memset>
  m_attributes = FILE_ATTR_ROOT;
    5784:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    5786:	movs	r0, #1
  m_vol = vol;
    5788:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    578a:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    578e:	strb.w	r0, [r4, #51]	; 0x33
  return true;

 fail:
  return false;
}
    5792:	pop	{r3, r4, r5, pc}
  return false;
    5794:	movs	r0, #0
    5796:	b.n	5792 <ExFatFile::openRoot(ExFatVolume*)+0x20>

00005798 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    5798:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    579a:	mov	r5, r1
    579c:	ldrb.w	r4, [r1], #1
    57a0:	cmp	r4, #32
    57a2:	beq.n	579a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    57a4:	ldr	r7, [pc, #108]	; (5814 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    57a6:	str	r5, [r2, #0]
  fname->end = path;
    57a8:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    57aa:	mov	r6, r5
    57ac:	ldrb.w	r4, [r6], #1
    57b0:	cbz	r4, 57b6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    57b2:	cmp	r4, #47	; 0x2f
    57b4:	bne.n	57ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    57b6:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    57b8:	ldrb.w	r1, [r5], #1
    57bc:	cmp	r1, #32
    57be:	beq.n	57b6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    57c0:	cmp	r1, #47	; 0x2f
    57c2:	beq.n	57b6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    57c4:	str	r4, [r3, #0]
  return hashName(fname);
    57c6:	mov	r1, r2

 fail:
  return false;
}
    57c8:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    57ca:	b.w	5684 <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    57ce:	cmp	r4, #60	; 0x3c
    57d0:	bhi.n	57f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    57d2:	cmp	r4, #33	; 0x21
    57d4:	bhi.n	57e4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    57d6:	subs	r1, r4, #1
    57d8:	cmp	r1, #30
    57da:	bls.n	57f2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    if (c != '.' && c != ' ') {
    57dc:	cmp	r4, #32
    57de:	bne.n	5804 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
                            ExName_t* fname, const char** ptr) {
    57e0:	mov	r5, r6
    57e2:	b.n	57aa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    57e4:	sub.w	r1, r4, #34	; 0x22
    57e8:	uxtb	r1, r1
    57ea:	lsr.w	r1, r7, r1
    57ee:	lsls	r1, r1, #31
    57f0:	bpl.n	580e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
}
    57f2:	movs	r0, #0
    57f4:	pop	{r4, r5, r6, r7}
    57f6:	bx	lr
    57f8:	cmp	r4, #92	; 0x5c
    57fa:	beq.n	57f2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    57fc:	bhi.n	5808 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    57fe:	subs	r4, #62	; 0x3e
    5800:	cmp	r4, #1
    5802:	bls.n	57f2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
      fname->end = path;
    5804:	str	r6, [r2, #8]
    5806:	b.n	57e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5808:	cmp	r4, #124	; 0x7c
    580a:	beq.n	57f2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    580c:	b.n	5804 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    if (c != '.' && c != ' ') {
    580e:	cmp	r4, #46	; 0x2e
    5810:	b.n	57de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    5812:	nop
    5814:	.word	0x05002101

00005818 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    5818:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    581c:	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    5820:	ldrb.w	r3, [r0, #51]	; 0x33
    5824:	sub	sp, #12
    5826:	mov	r4, r0
    5828:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    582a:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    582c:	mov	r6, r2
  if (!isReadable()) {
    582e:	bpl.n	58f8 <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5830:	lsls	r0, r3, #25
    5832:	bmi.n	583c <ExFatFile::read(void*, unsigned int)+0x24>
    5834:	ldrb.w	r3, [r4, #49]	; 0x31
    5838:	lsls	r1, r3, #28
    583a:	bpl.n	5854 <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    583c:	ldrd	r2, r3, [r4]
    5840:	ldrd	r1, r0, [r4, #16]
    5844:	adds	r5, r6, r2
    5846:	adc.w	r3, r3, #0
    584a:	cmp	r1, r5
    584c:	sbcs.w	r3, r0, r3
    5850:	bcs.n	5854 <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    5852:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5854:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5858:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    585a:	vmov	s16, r3
    585e:	b.n	5944 <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5860:	ldr	r0, [r4, #32]
    5862:	ldrd	r3, r2, [r4]
    5866:	ldr.w	r7, [r0, #1080]	; 0x438
    586a:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    586c:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    5870:	cbnz	r7, 5886 <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    5872:	orrs	r3, r2
    5874:	bne.n	58d0 <ExFatFile::read(void*, unsigned int)+0xb8>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5876:	ldrb.w	r3, [r4, #49]	; 0x31
    587a:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    587c:	ite	mi
    587e:	ldrmi.w	r3, [r0, #1076]	; 0x434
    5882:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    5884:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    5886:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    588a:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    588c:	ldr	r2, [r4, #24]
    588e:	ldrb.w	r1, [fp, #1093]	; 0x445
    5892:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    5894:	ldr.w	r2, [fp, #1068]	; 0x42c
    5898:	lsls	r5, r1
    589a:	add.w	r5, r5, r7, lsr #9
    589e:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    58a0:	cmp.w	sl, #0
    58a4:	bne.n	590a <ExFatFile::read(void*, unsigned int)+0xf2>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    58a6:	cmp.w	r8, #512	; 0x200
    58aa:	bcc.n	590a <ExFatFile::read(void*, unsigned int)+0xf2>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    58ac:	ldr.w	r2, [fp, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    58b0:	cmp	r5, r2
    58b2:	beq.n	590a <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    58b4:	cmp.w	r8, #1024	; 0x400
    58b8:	bcs.n	5958 <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    58ba:	ldr.w	r0, [fp, #532]	; 0x214
    58be:	mov	r2, r9
    58c0:	mov	r1, r5
    58c2:	ldr	r3, [r0, #0]
    58c4:	ldr	r3, [r3, #16]
    58c6:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    58c8:	cbz	r0, 58f8 <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    58ca:	mov.w	r7, #512	; 0x200
    58ce:	b.n	5930 <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    58d0:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    58d4:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    58d6:	lsls	r3, r3, #25
    58d8:	bpl.n	58e0 <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    58da:	adds	r1, #1
    58dc:	str	r1, [r4, #24]
    58de:	b.n	5886 <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    58e0:	vmov	r2, s16
    58e4:	bl	6074 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    58e8:	cmp	r0, #0
    58ea:	blt.n	58f8 <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    58ec:	bne.n	5886 <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    58ee:	ldrb.w	r3, [r4, #49]	; 0x31
    58f2:	tst.w	r3, #80	; 0x50
    58f6:	bne.n	594a <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    58f8:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    58fc:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    5900:	orr.w	r3, r3, #2
    5904:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    5908:	b.n	594e <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    590a:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    590e:	movs	r2, #0
    5910:	mov	r1, r5
    5912:	add.w	r0, fp, #528	; 0x210
    5916:	cmp	r7, r8
    5918:	it	cs
    591a:	movcs	r7, r8
    591c:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5920:	cmp	r0, #0
    5922:	beq.n	58f8 <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    5924:	add.w	r1, r0, sl
    5928:	mov	r2, r7
    592a:	mov	r0, r9
    592c:	bl	a000 <memcpy>
    dst += n;
    5930:	add	r9, r7
    toRead -= n;
    5932:	sub.w	r8, r8, r7
    m_curPosition += n;
    5936:	ldrd	r3, r2, [r4]
    593a:	adds	r3, r3, r7
    593c:	adc.w	r2, r2, #0
    5940:	strd	r3, r2, [r4]
  while (toRead) {
    5944:	cmp.w	r8, #0
    5948:	bne.n	5860 <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    594a:	sub.w	r0, r6, r8
}
    594e:	add	sp, #12
    5950:	vpop	{d8}
    5954:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5958:	movs	r3, #1
    595a:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    595c:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5960:	subs	r3, r3, r0
    5962:	cmp	r3, r1
    5964:	it	cs
    5966:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    5968:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    596a:	mov.w	r7, r3, lsl #9
    596e:	bls.n	5986 <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    5970:	ldr.w	r0, [fp, #532]	; 0x214
    5974:	mov	r1, r5
    5976:	ldr	r2, [r0, #0]
    5978:	ldr.w	fp, [r2, #20]
    597c:	mov	r2, r9
    597e:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5980:	cmp	r0, #0
    5982:	bne.n	5930 <ExFatFile::read(void*, unsigned int)+0x118>
    5984:	b.n	58f8 <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    5986:	adds	r1, r5, r3
    5988:	cmp	r2, r1
    598a:	bcs.n	5970 <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    598c:	add.w	r0, fp, #528	; 0x210
    5990:	str	r3, [sp, #4]
    5992:	bl	5400 <FsCache::sync()>
    5996:	ldr	r3, [sp, #4]
    5998:	cmp	r0, #0
    599a:	bne.n	5970 <ExFatFile::read(void*, unsigned int)+0x158>
    599c:	b.n	58f8 <ExFatFile::read(void*, unsigned int)+0xe0>

0000599e <ExFatFile::peek()>:
int ExFatFile::peek() {
    599e:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    59a0:	movs	r2, #1
    59a2:	add.w	r1, sp, #7
    59a6:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    59a8:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    59aa:	ldrd	r6, r7, [r0]
    59ae:	bl	5818 <ExFatFile::read(void*, unsigned int)>
    59b2:	cmp	r0, #1
  m_curCluster = curCluster;
    59b4:	str	r5, [r4, #24]
    59b6:	ite	eq
    59b8:	ldrbeq.w	r0, [sp, #7]
    59bc:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    59c0:	strd	r6, r7, [r4]
}
    59c4:	add	sp, #12
    59c6:	pop	{r4, r5, r6, r7, pc}

000059c8 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    59c8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    59cc:	ldrb.w	ip, [r0, #49]	; 0x31
    59d0:	mov	r4, r0
    59d2:	mov	r6, r2
    59d4:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    59d6:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    59da:	cmp.w	ip, #0
    59de:	beq.n	5a98 <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    59e0:	ldrd	r0, r3, [r0]
    59e4:	cmp	r3, r7
    59e6:	it	eq
    59e8:	cmpeq	r0, r2
    59ea:	beq.n	59fa <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    59ec:	orrs.w	r2, r6, r7
    59f0:	bne.n	59fe <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    59f2:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    59f4:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    59f6:	strd	r6, r7, [r4]
    return true;
    59fa:	movs	r0, #1
    59fc:	b.n	5a9e <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    59fe:	tst.w	ip, #8
    5a02:	beq.n	5a0e <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    5a04:	ldrd	r1, r2, [r4, #16]
    5a08:	cmp	r1, r6
    5a0a:	sbcs	r2, r7
    5a0c:	bcc.n	5a98 <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    5a0e:	ldr.w	lr, [r4, #32]
    5a12:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5a14:	ldrb.w	r1, [lr, #1093]	; 0x445
    5a18:	adc.w	sl, r7, #4294967295
    5a1c:	adds	r1, #9
    5a1e:	uxtb	r1, r1
    5a20:	rsb	r9, r1, #32
    5a24:	sub.w	r2, r1, #32
    5a28:	lsrs	r5, r1
    5a2a:	lsl.w	r9, sl, r9
    5a2e:	lsr.w	r2, sl, r2
    5a32:	sub.w	sl, r1, #32
    5a36:	orr.w	r5, r5, r9
    5a3a:	rsb	r9, r1, #32
    5a3e:	orrs	r5, r2
  if (isContiguous()) {
    5a40:	ldrb.w	r2, [r4, #51]	; 0x33
    5a44:	tst.w	r2, #64	; 0x40
    5a48:	beq.n	5a50 <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    5a4a:	ldr	r3, [r4, #28]
    5a4c:	add	r3, r5
    5a4e:	b.n	59f4 <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    5a50:	adds.w	fp, r0, #4294967295
    5a54:	adc.w	r2, r3, #4294967295
    5a58:	lsr.w	r1, fp, r1
    5a5c:	lsl.w	r9, r2, r9
    5a60:	lsr.w	r2, r2, sl
    5a64:	orr.w	r1, r1, r9
    5a68:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    5a6a:	cmp	r5, r1
    5a6c:	bcc.n	5a72 <ExFatFile::seekSet(unsigned long long)+0xaa>
    5a6e:	orrs	r3, r0
    5a70:	bne.n	5aa2 <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5a72:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5a76:	ite	ne
    5a78:	ldrne.w	r3, [lr, #1076]	; 0x434
    5a7c:	ldreq	r3, [r4, #28]
    5a7e:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5a80:	add.w	r9, r4, #24
  while (nNew--) {
    5a84:	cmp	r5, #0
    5a86:	beq.n	59f6 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5a88:	mov	r2, r9
    5a8a:	ldr	r1, [r4, #24]
    5a8c:	ldr	r0, [r4, #32]
    5a8e:	subs	r5, #1
    5a90:	bl	6074 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5a94:	cmp	r0, #0
    5a96:	bgt.n	5a84 <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    5a98:	movs	r0, #0
  m_curCluster = tmp;
    5a9a:	str.w	r8, [r4, #24]
}
    5a9e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    5aa2:	subs	r5, r5, r1
    5aa4:	b.n	5a80 <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

00005aa8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5aa8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5aac:	mov	sl, r3
    5aae:	ldrb.w	r3, [r0, #49]	; 0x31
    5ab2:	sub	sp, #52	; 0x34
    5ab4:	mov	r4, r0
    5ab6:	mov	r6, r1
    5ab8:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    5aba:	cmp	r3, #0
    5abc:	bne.n	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5abe:	ldrb.w	r3, [r1, #49]	; 0x31
    5ac2:	tst.w	r3, #80	; 0x50
    5ac6:	beq.n	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    5ac8:	and.w	r9, sl, #3
    5acc:	cmp.w	r9, #3
    5ad0:	beq.n	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    5ad2:	add.w	r9, r9, #1
    5ad6:	and.w	r3, sl, #8
    5ada:	orr.w	r9, r9, r3
  if (fname) {
    5ade:	cmp	r2, #0
    5ae0:	beq.n	5b54 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    5ae2:	ldr	r7, [r2, #16]
    5ae4:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5ae6:	movs	r2, #0
    5ae8:	mov	r0, r1
    5aea:	adds	r7, #14
    5aec:	udiv	r7, r7, r3
    5af0:	adds	r7, #2
    5af2:	movs	r3, #0
    5af4:	uxtb	r7, r7
    5af6:	bl	59c8 <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    5afa:	mov.w	fp, #0
    5afe:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    5b00:	movs	r2, #32
    5b02:	add	r1, sp, #16
    5b04:	mov	r0, r6
    5b06:	bl	5818 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5b0a:	cmp	r0, #0
    5b0c:	beq.w	5c96 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    5b10:	cmp	r0, #32
    5b12:	bne.n	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    5b14:	ldrsb.w	r1, [sp, #16]
    5b18:	ldrb.w	r2, [sp, #16]
    5b1c:	cmp	r1, #0
    5b1e:	blt.n	5b5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    5b20:	cmp.w	fp, #0
    5b24:	bne.n	5b32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5b26:	ldr	r1, [r6, #0]
    5b28:	sub.w	r3, r1, #32
    5b2c:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5b2e:	ldr	r3, [r6, #24]
    5b30:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    5b32:	cmp	fp, r7
        freeCount++;
    5b34:	itt	cc
    5b36:	addcc.w	r3, fp, #1
    5b3a:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    5b3e:	cbnz	r2, 5b58 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    5b40:	cmp	r5, #0
    5b42:	bne.w	5c96 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    5b46:	mov.w	r8, #0
    5b4a:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    5b4e:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    5b52:	b.n	5c2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    5b54:	movs	r7, #3
    5b56:	b.n	5afa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    5b58:	movs	r0, #0
    5b5a:	mov	r8, r0
    5b5c:	b.n	5b00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    5b5e:	cmp.w	r8, #0
    5b62:	bne.n	5bb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    5b64:	cmp	fp, r7
    5b66:	it	cc
    5b68:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    5b6c:	cmp	r2, #133	; 0x85
    5b6e:	bne.n	5b58 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    5b70:	movs	r2, #56	; 0x38
    5b72:	mov	r1, r8
    5b74:	mov	r0, r4
    5b76:	bl	9fbc <memset>
      m_setCount = dirFile->setCount;
    5b7a:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5b7e:	ldrb.w	r1, [sp, #20]
      inSet = true;
    5b82:	movs	r0, #1
      m_setCount = dirFile->setCount;
    5b84:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5b88:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5b8c:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    5b8e:	it	pl
    5b90:	orrpl.w	r2, r2, #8
    5b94:	strb.w	r2, [r4, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    5b98:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    5b9a:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    5b9c:	ldr	r2, [r6, #24]
    5b9e:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5ba0:	ldr	r2, [r6, #0]
    5ba2:	subs	r2, #32
    5ba4:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5ba6:	ldrb.w	r2, [r6, #51]	; 0x33
    5baa:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    5bae:	strb.w	r2, [r4, #44]	; 0x2c
    5bb2:	b.n	5b5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    5bb4:	cmp	r2, #192	; 0xc0
    5bb6:	bne.n	5c5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5bb8:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    5bbc:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5bc0:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    5bc2:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5bc6:	it	mi
    5bc8:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    5bcc:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5bd0:	it	mi
    5bd2:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    5bd6:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    5bd8:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    5bdc:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    5bde:	strd	r0, r1, [r4, #8]
      if (!fname) {
    5be2:	cbnz	r5, 5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    5be4:	tst.w	sl, #2048	; 0x800
    5be8:	bne.n	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    5bea:	tst.w	sl, #17408	; 0x4400
    5bee:	bne.n	5bf8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    5bf0:	ldrb.w	r3, [r4, #51]	; 0x33
    5bf4:	lsls	r0, r3, #30
    5bf6:	bpl.n	5c04 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    5bf8:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    5bfc:	lsls	r1, r3, #27
    5bfe:	bmi.n	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5c00:	lsls	r2, r3, #31
    5c02:	bmi.n	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    5c04:	tst.w	sl, #1024	; 0x400
    5c08:	beq.n	5c84 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    5c0a:	ldrb.w	r3, [r4, #51]	; 0x33
    5c0e:	lsls	r3, r3, #30
    5c10:	bpl.n	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    5c12:	movs	r2, #0
    5c14:	movs	r3, #0
    5c16:	mov	r0, r4
    5c18:	bl	59c8 <ExFatFile::seekSet(unsigned long long)>
    5c1c:	cmp	r0, #0
    5c1e:	beq.n	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5c20:	mov	r0, r4
    5c22:	bl	6888 <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5c26:	cmp	r0, #0
    5c28:	beq.n	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    5c2a:	mov	r0, r8
    5c2c:	add	sp, #52	; 0x34
    5c2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    5c32:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    5c34:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    5c38:	ldr	r1, [r5, #16]
    next = begin;
    5c3a:	str	r2, [r5, #4]
    5c3c:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    5c40:	strh	r3, [r5, #12]
    5c42:	cmp	r1, r2
    5c44:	bne.n	5b58 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    5c46:	ldrh	r0, [r5, #20]
    5c48:	ldrh.w	r2, [sp, #20]
    5c4c:	sub.w	ip, r0, r2
    5c50:	rsbs	r0, ip, #0
    5c54:	adc.w	r0, r0, ip
    5c58:	b.n	5b5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    5c5a:	cmp	r2, #193	; 0xc1
    5c5c:	bne.w	5b58 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    5c60:	mov	r2, r5
    5c62:	add	r1, sp, #16
    5c64:	mov	r0, r4
    5c66:	bl	558c <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    5c6a:	cmp	r0, #0
    5c6c:	beq.w	5b5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    5c70:	ldrh	r2, [r5, #12]
    5c72:	cmp	r2, #0
    5c74:	bne.w	5b5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5c78:	ldrd	r1, r2, [r5, #4]
    5c7c:	cmp	r1, r2
    5c7e:	bne.w	5b5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5c82:	b.n	5be4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5c84:	tst.w	sl, #16384	; 0x4000
    5c88:	beq.n	5c2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    5c8a:	mov	r0, r4
    5c8c:	ldrd	r2, r3, [r4, #16]
    5c90:	bl	59c8 <ExFatFile::seekSet(unsigned long long)>
    5c94:	b.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5c96:	tst.w	sl, #512	; 0x200
    5c9a:	beq.w	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5c9e:	tst.w	r9, #2
    5ca2:	beq.w	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5ca6:	cmp	r5, #0
    5ca8:	beq.w	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    5cac:	cmp	fp, r7
    5cae:	bcc.n	5cfe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    5cb0:	movs	r2, #56	; 0x38
    5cb2:	movs	r1, #0
    5cb4:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5cb6:	ldrb.w	r8, [r6, #51]	; 0x33
    5cba:	bl	9fbc <memset>
  ExFatVolume* volume() const {return m_vol;}
    5cbe:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    5cc0:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    5cc4:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    5cc8:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    5cca:	movs	r3, #8
  m_dirPos = freePos;
    5ccc:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    5cd0:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    5cd4:	strb.w	r3, [r4, #49]	; 0x31
    ls = 0;  // lowSurrogate
    5cd8:	mov.w	r8, #0
  m_dirPos = freePos;
    5cdc:	ldr	r3, [sp, #0]
    5cde:	str	r3, [r4, #36]	; 0x24
    5ce0:	ldr	r3, [sp, #4]
    5ce2:	str	r3, [r4, #40]	; 0x28
    next = begin;
    5ce4:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    5ce6:	strh.w	r8, [r5, #12]
    next = begin;
    5cea:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5cec:	uxtb.w	fp, r8
    5cf0:	cmp	r7, fp
    5cf2:	bhi.n	5d42 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    5cf4:	mov	r0, r4
    5cf6:	bl	65fc <ExFatFile::sync()>
    5cfa:	mov	r8, r0
    5cfc:	b.n	5c2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    5cfe:	movs	r2, #32
    5d00:	add	r1, sp, #16
    5d02:	mov	r0, r6
    5d04:	bl	5818 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5d08:	cbnz	r0, 5d20 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    5d0a:	mov	r0, r6
      curCluster = dir->m_curCluster;
    5d0c:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    5d10:	bl	663e <ExFatFile::addDirCluster()>
    5d14:	cmp	r0, #0
    5d16:	beq.w	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    5d1a:	str.w	r8, [r6, #24]
      continue;
    5d1e:	b.n	5cac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    5d20:	cmp	r0, #32
    5d22:	bne.w	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    5d26:	cmp.w	fp, #0
    5d2a:	bne.n	5d38 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5d2c:	ldr	r2, [r6, #0]
    5d2e:	sub.w	r3, r2, #32
    5d32:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    5d34:	ldr	r3, [r6, #24]
    5d36:	str	r3, [sp, #0]
    freeCount++;
    5d38:	add.w	r3, fp, #1
    5d3c:	uxtb.w	fp, r3
    5d40:	b.n	5cac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    5d42:	movs	r2, #1
    5d44:	mov	r1, fp
    5d46:	mov	r0, r4
    5d48:	bl	56e6 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5d4c:	mov	r6, r0
    5d4e:	cmp	r0, #0
    5d50:	beq.w	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5d54:	ldrsb.w	r2, [r0]
    5d58:	cmp	r2, #0
    5d5a:	blt.w	5b46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    5d5e:	movs	r2, #32
    5d60:	movs	r1, #0
    5d62:	bl	9fbc <memset>
    if (i == 0) {
    5d66:	cmp.w	fp, #0
    5d6a:	bne.n	5dae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
      dirFile->type = EXFAT_TYPE_FILE;
    5d6c:	movs	r3, #133	; 0x85
    5d6e:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    5d70:	ldr	r3, [pc, #128]	; (5df4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    5d72:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5d76:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    5d7a:	ldr	r3, [r3, #0]
    5d7c:	cbz	r3, 5da2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fa>
        FsDateTime::callback(&date, &time, &ms10);
    5d7e:	add.w	r2, sp, #11
    5d82:	add.w	r1, sp, #14
    5d86:	add	r0, sp, #12
    5d88:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5d8a:	ldrh.w	r3, [sp, #12]
    5d8e:	strh	r3, [r6, #10]
    5d90:	ldrh.w	r3, [sp, #14]
    5d94:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    5d96:	ldrb.w	r3, [sp, #11]
    5d9a:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5d9c:	add.w	r8, r8, #1
    5da0:	b.n	5cec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    5da2:	movw	r3, #22561	; 0x5821
    5da6:	strh	r3, [r6, #10]
    5da8:	strh	r3, [r6, #14]
    5daa:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    5dac:	b.n	5d9c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    } else if (i == 1) {
    5dae:	cmp.w	fp, #1
    5db2:	bne.n	5dce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x326>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5db4:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    5db8:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    5dba:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    5dbe:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5dc0:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    5dc4:	ldr	r3, [r5, #16]
    5dc6:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    5dc8:	ldrh	r3, [r5, #20]
    5dca:	strh	r3, [r6, #4]
}
    5dcc:	b.n	5d9c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      dirName->type = EXFAT_TYPE_NAME;
    5dce:	movs	r3, #193	; 0xc1
    5dd0:	add.w	fp, r6, #30
    5dd4:	strb	r3, [r6, #0]
    return !ls && next == end;
    5dd6:	ldrh	r2, [r5, #12]
    5dd8:	cbnz	r2, 5de2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33a>
    5dda:	ldrd	r1, r2, [r5, #4]
    5dde:	cmp	r1, r2
    5de0:	beq.n	5d9c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
        uint16_t u = fname->get16();
    5de2:	mov	r0, r5
    5de4:	bl	5544 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    5de8:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    5dec:	cmp	fp, r6
    5dee:	bne.n	5dd6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
    5df0:	b.n	5d9c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    5df2:	nop
    5df4:	.word	0x200147fc

00005df8 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5df8:	push	{r4, r5, r6, r7, lr}
    5dfa:	mov	r7, r3
    5dfc:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    5dfe:	movs	r3, #0
    5e00:	mov	r5, r0
    5e02:	mov	r4, r1
    5e04:	str	r2, [sp, #4]
    5e06:	str	r3, [sp, #80]	; 0x50
class FsName {
    5e08:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    5e0c:	ldrb.w	r3, [r0, #49]	; 0x31
    5e10:	cbz	r3, 5e18 <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    5e12:	movs	r0, #0
}
    5e14:	add	sp, #92	; 0x5c
    5e16:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    5e18:	ldrb.w	r1, [r1, #49]	; 0x31
    5e1c:	tst.w	r1, #80	; 0x50
    5e20:	beq.n	5e12 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    5e22:	ldrb	r1, [r2, #0]
    5e24:	cmp	r1, #47	; 0x2f
    5e26:	bne.n	5e62 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    5e28:	mov	r0, r2
    while (isDirSeparator(*path)) {
    5e2a:	ldrb.w	r1, [r2], #1
    5e2e:	cmp	r1, #47	; 0x2f
    5e30:	beq.n	5e44 <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    5e32:	cbz	r3, 5e36 <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    5e34:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5e36:	ldr	r4, [r4, #32]
    if (*path == 0) {
    5e38:	cbnz	r1, 5e48 <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    5e3a:	mov	r1, r4
    5e3c:	mov	r0, r5
    5e3e:	bl	5772 <ExFatFile::openRoot(ExFatVolume*)>
    5e42:	b.n	5e14 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    5e44:	movs	r3, #1
    5e46:	b.n	5e28 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    5e48:	movs	r2, #56	; 0x38
    5e4a:	movs	r1, #0
    5e4c:	add	r0, sp, #32
    5e4e:	bl	9fbc <memset>
  m_attributes = FILE_ATTR_ROOT;
    5e52:	movs	r3, #64	; 0x40
  m_vol = vol;
    5e54:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    5e56:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    5e58:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    5e5c:	movs	r3, #1
    5e5e:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    5e62:	add	r3, sp, #4
    5e64:	add	r2, sp, #8
    5e66:	ldr	r1, [sp, #4]
    5e68:	mov	r0, r5
    5e6a:	bl	5798 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5e6e:	cmp	r0, #0
    5e70:	beq.n	5e12 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    5e72:	ldr	r3, [sp, #4]
    5e74:	ldrb	r3, [r3, #0]
    5e76:	cbz	r3, 5eb0 <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5e78:	movs	r3, #0
    5e7a:	add	r2, sp, #8
    5e7c:	mov	r1, r4
    5e7e:	mov	r0, r5
    5e80:	bl	5aa8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5e84:	cmp	r0, #0
    5e86:	beq.n	5e12 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    5e88:	add	r6, sp, #32
    5e8a:	mov	r2, r5
    5e8c:	add.w	ip, r5, #48	; 0x30
    5e90:	mov	r4, r6
    5e92:	ldr	r0, [r2, #0]
    5e94:	adds	r2, #8
    5e96:	ldr.w	r1, [r2, #-4]
    5e9a:	mov	r3, r6
    5e9c:	cmp	r2, ip
    5e9e:	stmia	r3!, {r0, r1}
    5ea0:	mov	r6, r3
    5ea2:	bne.n	5e92 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    5ea4:	ldr	r0, [r2, #0]
    5ea6:	str	r0, [r3, #0]
    close();
    5ea8:	mov	r0, r5
    5eaa:	bl	571e <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    5eae:	b.n	5e62 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    5eb0:	mov	r3, r7
    5eb2:	add	r2, sp, #8
    5eb4:	mov	r1, r4
    5eb6:	mov	r0, r5
    5eb8:	bl	5aa8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5ebc:	b.n	5e14 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

00005ebe <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    5ebe:	cbz	r1, 5ec8 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    5ec0:	add.w	r1, r1, #1096	; 0x448
    5ec4:	b.w	5df8 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    5ec8:	mov	r0, r1
    5eca:	bx	lr

00005ecc <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    5ecc:	mov	r3, r2
    5ece:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    5ed0:	ldrb.w	r2, [r0, #49]	; 0x31
    5ed4:	cbnz	r2, 5ef0 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    5ed6:	ldrb.w	r2, [r1, #49]	; 0x31
    5eda:	tst.w	r2, #80	; 0x50
    5ede:	beq.n	5ef0 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    5ee0:	ldr	r2, [r1, #0]
    5ee2:	ands.w	r2, r2, #31
    5ee6:	bne.n	5ef0 <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    5ee8:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    5eec:	b.w	5aa8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    5ef0:	movs	r0, #0
    5ef2:	ldr.w	r4, [sp], #4
    5ef6:	bx	lr

00005ef8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    5ef8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5efc:	mov	r7, r0
    5efe:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5f00:	mov	sl, r1
    5f02:	cbz	r1, 5f38 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    5f04:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    5f06:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    5f0a:	movs	r4, #1
    start = 0;
    5f0c:	cmp	r3, r5
    5f0e:	it	ls
    5f10:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    5f12:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    5f16:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    5f1a:	mov	r8, r5
  uint32_t endAlloc = start;
    5f1c:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    5f1e:	lsls	r4, r3
    5f20:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    5f22:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    5f26:	movs	r2, #0
    5f28:	mov	r0, r7
    5f2a:	add.w	r1, r1, r6, lsr #12
    5f2e:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    5f32:	cbnz	r0, 5f66 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    5f34:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5f38:	ldr.w	r5, [r0, #1056]	; 0x420
    5f3c:	b.n	5f06 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    5f3e:	mov	r8, r6
        if (endAlloc == start) {
    5f40:	cmp	r5, r6
    5f42:	beq.n	5f9c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    5f44:	ldr.w	r2, [r7, #1072]	; 0x430
    5f48:	cmp	r2, r6
    5f4a:	bls.n	5f90 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    5f4c:	lsls	r4, r4, #1
    5f4e:	ands.w	r4, r4, #255	; 0xff
    5f52:	bne.n	5f6a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    5f54:	add.w	r3, r9, #1
    5f58:	movs	r4, #1
    i = 0;
    5f5a:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    5f5e:	cmp.w	r3, #512	; 0x200
    5f62:	bcs.n	5f22 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    5f64:	mov	r9, r3
        if (!(mask & cache[i])) {
    5f66:	ldrb.w	r3, [r0, r9]
    5f6a:	tst	r3, r4
        endAlloc++;
    5f6c:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    5f70:	bne.n	5f3e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    5f72:	sub.w	r2, r6, r8
    5f76:	cmp	r2, fp
    5f78:	bne.n	5f40 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    5f7a:	cmp.w	sl, #0
    5f7e:	bne.n	5f8a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    5f80:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    5f84:	it	eq
    5f86:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    5f8a:	add.w	r0, r8, #2
    5f8e:	b.n	5f34 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    5f90:	mov.w	r8, #0
          i = sectorSize;
    5f94:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    5f98:	mov	r6, r8
    5f9a:	b.n	5f54 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    5f9c:	movs	r0, #1
    5f9e:	b.n	5f34 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

00005fa0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    5fa0:	subs	r1, #2
                                  uint32_t count, bool value) {
    5fa2:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5fa6:	mov	r5, r0
    5fa8:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    5faa:	ldr.w	r0, [r0, #1072]	; 0x430
    5fae:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    5fb0:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    5fb2:	cmp	r3, r0
    5fb4:	bhi.n	6036 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    5fb6:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    5fba:	cbz	r7, 602c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    5fbc:	cmp	r1, r2
    5fbe:	bhi.n	5fce <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    5fc0:	cmp	r3, r2
    5fc2:	bls.n	5fce <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    5fc4:	cmp	r3, r0
    5fc6:	it	cs
    5fc8:	movcs	r3, #0
    5fca:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    5fce:	and.w	r3, r1, #7
    5fd2:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    5fd6:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    5fda:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    5fde:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    5fe2:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    5fe6:	add.w	r8, r3, r1, lsr #12
    5fea:	movs	r2, #1
    5fec:	mov	r1, r8
    5fee:	mov	r0, r5
    5ff0:	add	r8, r2
    5ff2:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    5ff6:	cbz	r0, 6036 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    5ff8:	adds	r3, r0, r4
    5ffa:	mov	r1, r9
    5ffc:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    6000:	ldrb	r2, [r3, #0]
    6002:	tst	r2, r1
    6004:	ite	ne
    6006:	movne	r4, #1
    6008:	moveq	r4, #0
    600a:	cmp	r4, r7
    600c:	beq.n	6036 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    600e:	eors	r2, r1
        if (--count == 0) {
    6010:	subs	r6, #1
        cache[i] ^= mask;
    6012:	strb	r2, [r3, #0]
        if (--count == 0) {
    6014:	beq.n	603c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    6016:	lsls	r1, r1, #1
    6018:	ands.w	r1, r1, #255	; 0xff
    601c:	bne.n	6000 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    601e:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    6020:	mov	r4, r1
    6022:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    6024:	cmp	r0, r3
      mask = 1;
    6026:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    6028:	bne.n	6000 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    602a:	b.n	5fea <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    602c:	cmp	r1, r2
      m_bitmapStart = start;
    602e:	it	cc
    6030:	strcc.w	r1, [r5, #1056]	; 0x420
    6034:	b.n	5fce <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    6036:	movs	r0, #0
}
    6038:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    603c:	movs	r0, #1
    603e:	b.n	6038 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

00006040 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6040:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    6042:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6046:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    6048:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    604a:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    604e:	ldrb.w	r5, [r0, #565]	; 0x235
    6052:	ands	r1, r3
    6054:	ldr	r3, [r4, #0]
    6056:	subs	r3, #2
    6058:	lsls	r3, r5
    605a:	add.w	r3, r3, r1, lsr #9
    605e:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    6062:	add	r1, r3
    6064:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    6068:	cbz	r0, 6072 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    606a:	ldr	r3, [r4, #4]
    606c:	ubfx	r3, r3, #0, #9
    6070:	add	r0, r3
}
    6072:	pop	{r3, r4, r5, pc}

00006074 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6074:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6076:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    607a:	mov	r4, r1
    607c:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    607e:	adds	r3, #1
    6080:	cmp	r3, r1
    6082:	bcs.n	608a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    6084:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    6088:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    608a:	ldr.w	r1, [r0, #1060]	; 0x424
    608e:	movs	r2, #0
    6090:	add.w	r0, r0, #528	; 0x210
    6094:	add.w	r1, r1, r4, lsr #7
    6098:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    609c:	cmp	r0, #0
    609e:	beq.n	6084 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    60a0:	lsls	r4, r4, #2
    60a2:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    60a6:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    60a8:	adds	r2, r3, #1
  return 1;
    60aa:	itet	ne
    60ac:	movne	r0, #1
    return 0;
    60ae:	moveq	r0, #0
  *value = next;
    60b0:	strne	r3, [r5, #0]
  return 1;
    60b2:	b.n	6088 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

000060b4 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    60b4:	push	{r0, r1, r2, r4, r5, lr}
    60b6:	mov	r5, r0
  uint32_t n = 0;
    60b8:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    60ba:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    60bc:	add	r2, sp, #4
    60be:	ldr	r1, [sp, #4]
    60c0:	mov	r0, r5
    60c2:	bl	6074 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    60c6:	cmp	r0, #0
    60c8:	blt.n	60d6 <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    60ca:	add.w	r4, r4, #1
  } while (status);
    60ce:	bne.n	60bc <ExFatPartition::chainSize(unsigned long)+0x8>
}
    60d0:	mov	r0, r4
    60d2:	add	sp, #12
    60d4:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    60d6:	movs	r4, #0
    60d8:	b.n	60d0 <ExFatPartition::chainSize(unsigned long)+0x1c>

000060da <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    60da:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    60dc:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    60de:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    60e0:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    60e4:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    60e6:	ands	r4, r3
    60e8:	add	r4, r2
  pos->position += offset;
    60ea:	add	r2, r3
    60ec:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    60ee:	ldrb.w	r3, [r0, #1093]	; 0x445
    60f2:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    60f4:	uxtb	r3, r3
    60f6:	lsrs	r4, r3
  while (tmp--) {
    60f8:	cbnz	r4, 60fe <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    60fa:	movs	r0, #1
    60fc:	b.n	6118 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    60fe:	ldrb	r3, [r5, #8]
      pos->cluster++;
    6100:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    6102:	cbz	r3, 610c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    6104:	adds	r1, #1
    6106:	str	r1, [r5, #0]
    6108:	subs	r4, #1
    610a:	b.n	60f8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    610c:	mov	r2, r5
    610e:	mov	r0, r6
    6110:	bl	6074 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    6114:	cmp	r0, #1
    6116:	beq.n	6108 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    6118:	pop	{r4, r5, r6, pc}

0000611a <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    611a:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    611c:	push	{r3, r4, r5, lr}
    611e:	mov	r4, r1
    6120:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6122:	bhi.n	6128 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    6124:	movs	r0, #0
}
    6126:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6128:	ldr.w	r3, [r0, #1072]	; 0x430
    612c:	adds	r3, #1
    612e:	cmp	r3, r1
    6130:	bcc.n	6124 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6132:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    6136:	movs	r2, #1
    6138:	add.w	r0, r0, #528	; 0x210
    613c:	add.w	r1, r1, r4, lsr #7
    6140:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6144:	cmp	r0, #0
    6146:	beq.n	6124 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    6148:	lsls	r4, r4, #2
    614a:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    614e:	str	r5, [r0, r4]
  return true;
    6150:	movs	r0, #1
    6152:	b.n	6126 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

00006154 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    6154:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6158:	mov	r7, r0
    615a:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    615c:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    615e:	add	r2, sp, #4
    6160:	mov	r1, r4
    6162:	mov	r0, r7
    6164:	bl	6074 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    6168:	subs	r6, r0, #0
    616a:	bge.n	6176 <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    616c:	movs	r5, #0
}
    616e:	mov	r0, r5
    6170:	add	sp, #8
    6172:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    6176:	movs	r2, #0
    6178:	mov	r1, r4
    617a:	mov	r0, r7
    617c:	bl	611a <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6180:	mov	r5, r0
    6182:	cmp	r0, #0
    6184:	beq.n	616c <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    6186:	adds	r2, r4, #1
    6188:	cbz	r6, 6190 <ExFatPartition::freeChain(unsigned long)+0x3c>
    618a:	ldr	r3, [sp, #4]
    618c:	cmp	r3, r2
    618e:	beq.n	61a6 <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6190:	movs	r3, #0
    6192:	sub.w	r2, r2, r8
    6196:	mov	r1, r8
    6198:	mov	r0, r7
    619a:	bl	5fa0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    619e:	cmp	r0, #0
    61a0:	beq.n	616c <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    61a2:	ldr.w	r8, [sp, #4]
    cluster = next;
    61a6:	ldr	r4, [sp, #4]
  } while (status);
    61a8:	cmp	r6, #0
    61aa:	bne.n	615e <ExFatPartition::freeChain(unsigned long)+0xa>
    61ac:	b.n	616e <ExFatPartition::freeChain(unsigned long)+0x1a>

000061ae <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    61ae:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    61b2:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    61b4:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    61b6:	ldr.w	r7, [r0, #1068]	; 0x42c
    61ba:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    61be:	mov	r5, r4
    61c0:	mov	r1, r7
    61c2:	movs	r2, #0
    61c4:	mov	r0, r8
    61c6:	adds	r7, #1
    61c8:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    61cc:	cbz	r0, 61ea <ExFatPartition::freeClusterCount()+0x3c>
    61ce:	subs	r0, #1
    61d0:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    61d4:	ldrb.w	r1, [r0, #1]!
    61d8:	cmp	r1, #255	; 0xff
    61da:	bne.n	61ee <ExFatPartition::freeClusterCount()+0x40>
        usedCount+= 8;
    61dc:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    61de:	adds	r5, #8
      if (nc >= m_clusterCount) {
    61e0:	ldr.w	r3, [r6, #1072]	; 0x430
    61e4:	cmp	r3, r5
    61e6:	bhi.n	6208 <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    61e8:	subs	r0, r3, r4
      }
    }
  }
}
    61ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    61ee:	cmp	r1, #0
    61f0:	beq.n	61de <ExFatPartition::freeClusterCount()+0x30>
    61f2:	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    61f4:	movs	r3, #1
          if ((mask & cache[i])) {
    61f6:	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    61f8:	mov.w	r3, r3, lsl #1
            usedCount++;
    61fc:	it	ne
    61fe:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6200:	subs	r2, #1
    6202:	uxtb	r3, r3
    6204:	bne.n	61f6 <ExFatPartition::freeClusterCount()+0x48>
    6206:	b.n	61de <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    6208:	cmp	r5, ip
    620a:	bne.n	61d4 <ExFatPartition::freeClusterCount()+0x26>
    620c:	b.n	61c0 <ExFatPartition::freeClusterCount()+0x12>
	...

00006210 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6210:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    6212:	mov.w	r3, #4294967295
    6216:	mov	r6, r2
    6218:	add.w	r7, r0, #528	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    621c:	movs	r2, #0
  m_blockDev = dev;
    621e:	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6222:	mov	r4, r0
    m_blockDev = blockDev;
    6224:	str	r1, [r0, #4]
    6226:	str.w	r1, [r0, #532]	; 0x214
    622a:	mov	r1, r2
  m_fatType = 0;
    622c:	strb.w	r2, [r0, #1092]	; 0x444
    m_status = 0;
    6230:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    6232:	str	r3, [r0, #12]
    m_status = 0;
    6234:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6238:	str.w	r3, [r0, #540]	; 0x21c
    623c:	mov	r0, r7
    623e:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    6242:	cmp	r6, #4
    6244:	mov	r5, r0
    6246:	bls.n	624c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    6248:	movs	r0, #0
}
    624a:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    624c:	cmp	r0, #0
    624e:	beq.n	6248 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    6250:	cbz	r6, 6280 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x70>
    mp = &mbr->part[part - 1];
    6252:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    6254:	add.w	r3, r0, r3, lsl #4
    6258:	ldrb.w	r2, [r3, #446]	; 0x1be
    625c:	ands.w	r2, r2, #127	; 0x7f
    6260:	bne.n	6248 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    6262:	ldrb.w	r3, [r3, #450]	; 0x1c2
    6266:	cmp	r3, #0
    6268:	beq.n	6248 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    626a:	add.w	r6, r0, r6, lsl #4
    626e:	mov	r0, r7
    6270:	ldr.w	r6, [r6, #438]	; 0x1b6
    6274:	mov	r1, r6
    6276:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    627a:	mov	r5, r0
    627c:	cmp	r0, #0
    627e:	beq.n	6248 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    6280:	ldr	r1, [pc, #104]	; (62ec <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    6282:	movs	r2, #5
    6284:	adds	r0, r5, #3
    6286:	bl	e994 <strncmp>
    628a:	mov	r1, r0
    628c:	cmp	r0, #0
    628e:	bne.n	6248 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    6290:	ldrb.w	r3, [r5, #108]	; 0x6c
    6294:	cmp	r3, #9
    6296:	bne.n	6248 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6298:	ldr	r3, [r5, #80]	; 0x50
    629a:	add	r3, r6
    629c:	str.w	r3, [r4, #1060]	; 0x424
    62a0:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    62a2:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    62a6:	ldr	r3, [r5, #88]	; 0x58
    62a8:	add	r3, r6
    62aa:	str.w	r3, [r4, #1068]	; 0x42c
    62ae:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    62b0:	str.w	r3, [r4, #1072]	; 0x430
    62b4:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    62b6:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    62ba:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    62be:	movs	r5, #1
  m_bitmapStart = 0;
    62c0:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    62c4:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    62c6:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    62ca:	adds	r3, #9
  bitmapFind(0, 1);
    62cc:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    62ce:	lsl.w	r3, r5, r3
    62d2:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    62d6:	subs	r3, #1
    62d8:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    62dc:	bl	5ef8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    62e0:	movs	r3, #64	; 0x40
  return true;
    62e2:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    62e4:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    62e8:	b.n	624a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    62ea:	nop
    62ec:	.word	0x20001117

000062f0 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    62f0:	push	{r4, lr}
    62f2:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    62f4:	ldr.w	r1, [r0, #1076]	; 0x434
    62f8:	bl	60b4 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    62fc:	ldrb.w	r3, [r4, #1093]	; 0x445
    6300:	adds	r3, #9
  return nc << bytesPerClusterShift();
    6302:	uxtb	r3, r3
}
    6304:	lsls	r0, r3
    6306:	pop	{r4, pc}

00006308 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    6308:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    630a:	add.w	r4, r0, #1096	; 0x448
    630e:	sub	sp, #56	; 0x38
    6310:	movs	r3, #0
    6312:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    6314:	mov	r0, sp
    6316:	mov	r1, r4
    6318:	str	r3, [sp, #48]	; 0x30
    631a:	bl	5df8 <ExFatFile::open(ExFatFile*, char const*, int)>
    631e:	mov	r5, r0
    6320:	cbz	r0, 634a <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    6322:	ldrb.w	r3, [sp, #49]	; 0x31
    6326:	ands.w	r3, r3, #80	; 0x50
    632a:	beq.n	6350 <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    632c:	mov	r2, sp
    632e:	mov	r3, r4
    6330:	add	r6, sp, #48	; 0x30
    6332:	mov	r4, r2
    6334:	adds	r3, #8
    6336:	ldmia	r4!, {r0, r1}
    6338:	cmp	r4, r6
    633a:	str.w	r0, [r3, #-8]
    633e:	str.w	r1, [r3, #-4]
    6342:	mov	r2, r4
    6344:	bne.n	6332 <ExFatVolume::chdir(char const*)+0x2a>
    6346:	ldr	r0, [r4, #0]
    6348:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    634a:	mov	r0, r5
    634c:	add	sp, #56	; 0x38
    634e:	pop	{r4, r5, r6, pc}
  return false;
    6350:	mov	r5, r3
    6352:	b.n	634a <ExFatVolume::chdir(char const*)+0x42>

00006354 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    6354:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6356:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6358:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    635a:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    635c:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    635e:	orr.w	r2, r2, r1, lsr #1
    6362:	ldrb	r1, [r0, r3]
    6364:	uxtah	r2, r1, r2
    6368:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    636a:	bne.n	637e <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    636c:	cmp	r4, #133	; 0x85
    636e:	ite	ne
    6370:	movne	r2, #1
    6372:	moveq	r2, #3
    6374:	add	r3, r2
    6376:	cmp	r3, #31
    6378:	bls.n	635a <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    637a:	mov	r0, r1
    637c:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    637e:	movs	r2, #1
    6380:	b.n	6374 <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

00006382 <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    6382:	push	{r4, lr}
    6384:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6386:	bl	5400 <FsCache::sync()>
    638a:	cbz	r0, 63a4 <ExFatPartition::cacheSync()+0x22>
    638c:	add.w	r0, r4, #528	; 0x210
    6390:	bl	5400 <FsCache::sync()>
    6394:	cbz	r0, 63a4 <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6396:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    639a:	ldr	r3, [r0, #0]
  }
    639c:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    63a0:	ldr	r3, [r3, #32]
    63a2:	bx	r3
  }
    63a4:	movs	r0, #0
    63a6:	pop	{r4, pc}

000063a8 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    63a8:	push	{r3, r4, r5, r6, r7, lr}
    63aa:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    63ac:	ldr	r0, [r0, #32]
    63ae:	ldr	r1, [r4, #24]
    63b0:	cbz	r1, 63b4 <ExFatFile::addCluster()+0xc>
    63b2:	adds	r1, #1
    63b4:	movs	r2, #1
    63b6:	bl	5ef8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    63ba:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    63bc:	mov	r5, r0
  if (find < 2) {
    63be:	bhi.n	63c6 <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    63c0:	movs	r6, #0
}
    63c2:	mov	r0, r6
    63c4:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    63c6:	movs	r3, #1
    63c8:	mov	r1, r0
    63ca:	ldr	r0, [r4, #32]
    63cc:	mov	r2, r3
    63ce:	bl	5fa0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    63d2:	mov	r6, r0
    63d4:	cmp	r0, #0
    63d6:	beq.n	63c0 <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    63d8:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    63da:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    63de:	cbnz	r2, 63ec <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    63e0:	orr.w	r3, r3, #64	; 0x40
    63e4:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    63e8:	str	r5, [r4, #24]
  return true;
    63ea:	b.n	63c2 <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    63ec:	lsls	r1, r3, #25
    63ee:	bmi.n	6414 <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    63f0:	mov.w	r2, #4294967295
    63f4:	mov	r1, r5
    63f6:	ldr	r0, [r4, #32]
    63f8:	bl	611a <ExFatPartition::fatPut(unsigned long, unsigned long)>
    63fc:	cmp	r0, #0
    63fe:	beq.n	63c0 <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    6400:	ldr	r1, [r4, #24]
    6402:	cmp	r1, #0
    6404:	beq.n	63e8 <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    6406:	mov	r2, r5
    6408:	ldr	r0, [r4, #32]
    640a:	bl	611a <ExFatPartition::fatPut(unsigned long, unsigned long)>
    640e:	cmp	r0, #0
    6410:	bne.n	63e8 <ExFatFile::addCluster()+0x40>
    6412:	b.n	63c0 <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    6414:	adds	r2, #1
    6416:	cmp	r2, r5
    6418:	beq.n	63e8 <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    641a:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    641e:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6420:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6424:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    6426:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6428:	cmp	r3, r1
    642a:	bls.n	63f0 <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    642c:	adds	r7, r1, #1
    642e:	mov	r2, r7
    6430:	bl	611a <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6434:	cmp	r0, #0
    6436:	beq.n	63c0 <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6438:	mov	r1, r7
    643a:	b.n	6424 <ExFatFile::addCluster()+0x7c>

0000643c <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    643c:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    643e:	ldrb.w	r3, [r0, #51]	; 0x33
    6442:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    6444:	lsls	r2, r3, #30
    6446:	bmi.n	644c <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    6448:	movs	r0, #0
}
    644a:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    644c:	ldr	r1, [r0, #28]
    644e:	cbnz	r1, 6486 <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    6450:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    6452:	movs	r2, #1
    6454:	uxtb	r1, r5
    6456:	mov	r0, r4
    6458:	bl	56e6 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    645c:	cmp	r0, #0
    645e:	beq.n	6448 <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    6460:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6462:	adds	r5, #1
    cache[0] &= 0x7F;
    6464:	and.w	r3, r3, #127	; 0x7f
    6468:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    646a:	uxtb	r3, r5
    646c:	ldrb.w	r2, [r4, #48]	; 0x30
    6470:	cmp	r2, r3
    6472:	bcs.n	6452 <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    6474:	movs	r3, #0
  return m_vol->cacheSync();
    6476:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    6478:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    647c:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    6480:	bl	6382 <ExFatPartition::cacheSync()>
    6484:	b.n	644a <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    6486:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6488:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    648a:	bpl.n	64c2 <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    648c:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6490:	ldrd	r2, r5, [r4, #8]
    6494:	adds	r3, #9
    6496:	subs	r2, #1
    6498:	uxtb	r3, r3
    649a:	adc.w	r5, r5, #4294967295
    649e:	rsb	r7, r3, #32
    64a2:	sub.w	r6, r3, #32
    64a6:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    64a8:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    64aa:	lsl.w	r7, r5, r7
    64ae:	lsr.w	r6, r5, r6
    64b2:	orrs	r2, r7
    64b4:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    64b6:	adds	r2, #1
    64b8:	bl	5fa0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    64bc:	cmp	r0, #0
    64be:	bne.n	6450 <ExFatFile::remove()+0x14>
    64c0:	b.n	6448 <ExFatFile::remove()+0xc>
    64c2:	bl	6154 <ExFatPartition::freeChain(unsigned long)>
    64c6:	b.n	64bc <ExFatFile::remove()+0x80>

000064c8 <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    64c8:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    64ca:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    64ce:	sub	sp, #32
    64d0:	mov	r4, r0
  if (!isSubDir()) {
    64d2:	lsls	r3, r3, #27
    64d4:	bmi.n	64dc <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    64d6:	movs	r0, #0
}
    64d8:	add	sp, #32
    64da:	pop	{r4, pc}
    seekSet(0);
    64dc:	movs	r2, #0
    64de:	movs	r3, #0
    64e0:	bl	59c8 <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    64e4:	movs	r2, #32
    64e6:	mov	r1, sp
    64e8:	mov	r0, r4
    64ea:	bl	5818 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    64ee:	cbz	r0, 6504 <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    64f0:	cmp	r0, #32
    64f2:	bne.n	64d6 <ExFatFile::rmdir()+0xe>
    64f4:	ldrsb.w	r2, [sp]
    64f8:	ldrb.w	r3, [sp]
    64fc:	cmp	r2, #0
    64fe:	blt.n	64d6 <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    6500:	cmp	r3, #0
    6502:	bne.n	64e4 <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    6504:	movs	r3, #8
  return remove();
    6506:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    6508:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    650c:	ldrb.w	r3, [r4, #51]	; 0x33
    6510:	orr.w	r3, r3, #2
    6514:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    6518:	bl	643c <ExFatFile::remove()>
    651c:	b.n	64d8 <ExFatFile::rmdir()+0x10>
	...

00006520 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    6520:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6524:	movs	r7, #0
    6526:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    6528:	ldr.w	r8, [pc, #204]	; 65f8 <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    652c:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    652e:	movs	r2, #0
    6530:	uxtb	r1, r7
    6532:	mov	r0, r4
    6534:	bl	56e6 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6538:	mov	r5, r0
    653a:	cmp	r0, #0
    653c:	beq.n	65ba <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    653e:	ldrb	r3, [r0, #0]
    6540:	cmp	r3, #192	; 0xc0
    6542:	beq.n	65ce <ExFatFile::syncDir()+0xae>
    6544:	cmp	r3, #193	; 0xc1
    6546:	beq.n	658c <ExFatFile::syncDir()+0x6c>
    6548:	cmp	r3, #133	; 0x85
    654a:	bne.n	65ba <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    654c:	ldrb.w	r3, [r4, #49]	; 0x31
    6550:	and.w	r3, r3, #55	; 0x37
    6554:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    6556:	ldr.w	r3, [r8]
    655a:	cbz	r3, 657e <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    655c:	add.w	r2, sp, #3
    6560:	add.w	r1, sp, #6
    6564:	add	r0, sp, #4
    6566:	blx	r3
          df->modifyTimeMs = ms10;
    6568:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    656c:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    6570:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    6572:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    6576:	strh	r2, [r5, #12]
    6578:	strh	r3, [r5, #14]
    657a:	strh	r2, [r5, #16]
    657c:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    657e:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6580:	ldrb.w	r3, [r2, #528]	; 0x210
    6584:	orr.w	r3, r3, #1
    6588:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    658c:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    658e:	mov	r1, r6
    6590:	mov	r0, r5
    6592:	bl	6354 <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6596:	ldrb.w	r2, [r4, #48]	; 0x30
    659a:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    659c:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    659e:	cmp	r2, r3
    65a0:	bcs.n	652e <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    65a2:	movs	r2, #1
    65a4:	add.w	r1, r4, #36	; 0x24
    65a8:	ldr	r0, [r4, #32]
    65aa:	bl	6040 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    65ae:	cbz	r0, 65ba <ExFatFile::syncDir()+0x9a>
    65b0:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    65b2:	ldr	r0, [r4, #32]
    65b4:	bl	6382 <ExFatPartition::cacheSync()>
    65b8:	cbnz	r0, 65c8 <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    65ba:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    65be:	movs	r0, #0
  m_error |= WRITE_ERROR;
    65c0:	orr.w	r3, r3, #1
    65c4:	strb.w	r3, [r4, #50]	; 0x32
}
    65c8:	add	sp, #8
    65ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    65ce:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    65d2:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    65d4:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    65d6:	ite	mi
    65d8:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    65dc:	andpl.w	r3, r3, #253	; 0xfd
    65e0:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    65e2:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    65e6:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    65ea:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    65ec:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    65ee:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    65f2:	strd	r2, r3, [r0, #24]
    65f6:	b.n	657e <ExFatFile::syncDir()+0x5e>
    65f8:	.word	0x200147fc

000065fc <ExFatFile::sync()>:
bool ExFatFile::sync() {
    65fc:	push	{r4, lr}
  if (!isOpen()) {
    65fe:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    6602:	mov	r4, r0
  if (!isOpen()) {
    6604:	cbnz	r3, 660a <ExFatFile::sync()+0xe>
    return true;
    6606:	movs	r0, #1
}
    6608:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    660a:	ldrsb.w	r2, [r0, #51]	; 0x33
    660e:	ldrb.w	r3, [r0, #51]	; 0x33
    6612:	cmp	r2, #0
    6614:	bge.n	6626 <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6616:	and.w	r3, r3, #127	; 0x7f
    661a:	strb.w	r3, [r0, #51]	; 0x33
}
    661e:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    6622:	b.w	6520 <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    6626:	ldr	r0, [r0, #32]
    6628:	bl	6382 <ExFatPartition::cacheSync()>
    662c:	cmp	r0, #0
    662e:	bne.n	6606 <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    6630:	ldrb.w	r3, [r4, #50]	; 0x32
    6634:	orr.w	r3, r3, #1
    6638:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    663c:	b.n	6608 <ExFatFile::sync()+0xc>

0000663e <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    663e:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6640:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    6644:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6646:	lsls	r2, r3, #25
    6648:	bpl.n	66ca <ExFatFile::addDirCluster()+0x8c>
    664a:	ldr	r0, [r0, #32]
    664c:	bl	62f0 <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6650:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    6652:	ldr.w	r3, [r3, #1084]	; 0x43c
    6656:	add	r0, r3
  if (dl >= 0X4000000) {
    6658:	cmp.w	r0, #67108864	; 0x4000000
    665c:	bcs.n	66ea <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    665e:	mov	r0, r4
    6660:	bl	63a8 <ExFatFile::addCluster()>
    6664:	cmp	r0, #0
    6666:	beq.n	66ea <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    6668:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    666a:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    666c:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    666e:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    6670:	ldrb.w	r2, [r3, #1093]	; 0x445
    6674:	subs	r5, #2
    6676:	ldr.w	r3, [r3, #1068]	; 0x42c
    667a:	lsls	r5, r2
    667c:	add	r5, r3
    667e:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6680:	ldrb.w	r3, [r0, #1093]	; 0x445
    6684:	lsl.w	r3, r7, r3
    6688:	cmp	r6, r3
    668a:	bcc.n	66ce <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    668c:	ldrb.w	r3, [r4, #49]	; 0x31
    6690:	lsls	r3, r3, #25
    6692:	bmi.n	66c0 <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6694:	ldrb.w	r3, [r4, #51]	; 0x33
    6698:	orn	r3, r3, #127	; 0x7f
    669c:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    66a0:	ldr.w	r2, [r0, #1084]	; 0x43c
    66a4:	ldrd	r3, r1, [r4, #8]
    66a8:	adds	r3, r3, r2
    66aa:	adc.w	r1, r1, #0
    66ae:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    66b2:	ldrd	r3, r1, [r4, #16]
    66b6:	adds	r3, r3, r2
    66b8:	adc.w	r1, r1, #0
    66bc:	strd	r3, r1, [r4, #16]
  return sync();
    66c0:	mov	r0, r4
}
    66c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    66c6:	b.w	65fc <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    66ca:	ldr	r0, [r0, #8]
    66cc:	b.n	6650 <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    66ce:	movs	r2, #5
    66d0:	adds	r1, r5, r6
    66d2:	add.w	r0, r0, #528	; 0x210
    66d6:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    66da:	cbz	r0, 66ea <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    66dc:	mov.w	r2, #512	; 0x200
    66e0:	movs	r1, #0
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    66e2:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    66e4:	bl	9fbc <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    66e8:	b.n	667e <ExFatFile::addDirCluster()+0x40>
}
    66ea:	movs	r0, #0
    66ec:	pop	{r3, r4, r5, r6, r7, pc}

000066ee <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    66ee:	push	{r4, lr}
  if (!parent->isDir()) {
    66f0:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    66f4:	mov	r4, r0
  if (!parent->isDir()) {
    66f6:	tst.w	r3, #80	; 0x50
    66fa:	beq.n	6732 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    66fc:	movw	r3, #2562	; 0xa02
    6700:	bl	5aa8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6704:	cbz	r0, 6732 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    6706:	movs	r3, #16
  if (!addDirCluster()) {
    6708:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    670a:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    670e:	bl	663e <ExFatFile::addDirCluster()>
    6712:	cbz	r0, 6732 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    6714:	ldr	r3, [r4, #24]
    6716:	mov	r0, r4
    6718:	movs	r2, #0
    671a:	str	r3, [r4, #28]
    671c:	movs	r3, #0
    671e:	bl	59c8 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6722:	movs	r3, #193	; 0xc1
  return sync();
    6724:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6726:	strb.w	r3, [r4, #51]	; 0x33
}
    672a:	ldmia.w	sp!, {r4, lr}
  return sync();
    672e:	b.w	65fc <ExFatFile::sync()>
}
    6732:	movs	r0, #0
    6734:	pop	{r4, pc}

00006736 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    6736:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    673a:	mov	r8, r3
    673c:	sub	sp, #88	; 0x58
    673e:	movs	r3, #0
    6740:	mov	r5, r0
    6742:	mov	r4, r1
    6744:	str	r2, [sp, #4]
    6746:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    674a:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    674c:	ldrb.w	r3, [r0, #49]	; 0x31
    6750:	cbz	r3, 675a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    6752:	movs	r0, #0
}
    6754:	add	sp, #88	; 0x58
    6756:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    675a:	ldrb.w	r3, [r1, #49]	; 0x31
    675e:	tst.w	r3, #80	; 0x50
    6762:	beq.n	6752 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    6764:	ldrb	r3, [r2, #0]
    6766:	cmp	r3, #47	; 0x2f
    6768:	bne.n	6780 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    676a:	ldr	r2, [sp, #4]
    676c:	ldrb	r3, [r2, #0]
    676e:	cmp	r3, #47	; 0x2f
    6770:	beq.n	67cc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    6772:	ldr	r1, [r4, #32]
    6774:	add	r0, sp, #32
    6776:	bl	5772 <ExFatFile::openRoot(ExFatVolume*)>
    677a:	cmp	r0, #0
    677c:	beq.n	6752 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    677e:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    6780:	add	r3, sp, #4
    6782:	add	r2, sp, #8
    6784:	ldr	r1, [sp, #4]
    6786:	mov	r0, r5
    6788:	bl	5798 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    678c:	cmp	r0, #0
    678e:	beq.n	6752 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    6790:	ldr	r3, [sp, #4]
    6792:	ldrb	r3, [r3, #0]
    6794:	cbz	r3, 67e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6796:	movs	r3, #0
    6798:	add	r2, sp, #8
    679a:	mov	r1, r4
    679c:	mov	r0, r5
    679e:	bl	5aa8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    67a2:	cbz	r0, 67d2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    67a4:	add	r6, sp, #32
    67a6:	mov	r2, r5
    67a8:	add.w	r3, r5, #48	; 0x30
    67ac:	mov	r4, r6
    67ae:	ldr	r0, [r2, #0]
    67b0:	adds	r2, #8
    67b2:	ldr.w	r1, [r2, #-4]
    67b6:	mov	r7, r6
    67b8:	cmp	r2, r3
    67ba:	stmia	r7!, {r0, r1}
    67bc:	mov	r6, r7
    67be:	bne.n	67ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    67c0:	ldr	r0, [r2, #0]
    67c2:	str	r0, [r7, #0]
    close();
    67c4:	mov	r0, r5
    67c6:	bl	571e <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    67ca:	b.n	6780 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    67cc:	adds	r2, #1
    67ce:	str	r2, [sp, #4]
    67d0:	b.n	676a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    67d2:	cmp.w	r8, #0
    67d6:	beq.n	6752 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    67d8:	add	r2, sp, #8
    67da:	mov	r1, r4
    67dc:	mov	r0, r5
    67de:	bl	66ee <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    67e2:	cmp	r0, #0
    67e4:	bne.n	67a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    67e6:	b.n	6752 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    67e8:	add	r2, sp, #8
    67ea:	mov	r1, r4
    67ec:	mov	r0, r5
    67ee:	bl	66ee <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    67f2:	b.n	6754 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

000067f4 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    67f4:	push	{r4, r5, r6, r7, lr}
    67f6:	mov	r4, r0
    67f8:	sub	sp, #116	; 0x74
    67fa:	movs	r0, #0
    67fc:	str	r0, [sp, #48]	; 0x30
    67fe:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    6800:	ldrb.w	r0, [r4, #49]	; 0x31
    6804:	tst.w	r0, #24
    6808:	bne.n	6810 <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    680a:	movs	r0, #0
}
    680c:	add	sp, #116	; 0x74
    680e:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    6810:	ldr	r0, [r4, #32]
    6812:	ldr	r3, [r1, #32]
    6814:	cmp	r0, r3
    6816:	bne.n	680a <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6818:	movw	r3, #2561	; 0xa01
    681c:	mov	r0, sp
    681e:	bl	5df8 <ExFatFile::open(ExFatFile*, char const*, int)>
    6822:	cmp	r0, #0
    6824:	beq.n	680a <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    6826:	add	r2, sp, #56	; 0x38
    6828:	mov	r3, r4
    682a:	add.w	r7, r4, #48	; 0x30
    682e:	mov	r6, r2
    6830:	ldr	r0, [r3, #0]
    6832:	adds	r3, #8
    6834:	ldr.w	r1, [r3, #-4]
    6838:	mov	r5, r2
    683a:	cmp	r3, r7
    683c:	stmia	r5!, {r0, r1}
    683e:	mov	r2, r5
    6840:	bne.n	6830 <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    6842:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    6844:	add	r2, sp, #36	; 0x24
    6846:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    684a:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    684c:	ldmia	r2, {r0, r1, r2}
    684e:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    6852:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    6856:	mov	r0, r4
  m_setCount = file.m_setCount;
    6858:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    685c:	ldrb.w	r3, [r4, #51]	; 0x33
    6860:	orn	r3, r3, #127	; 0x7f
    6864:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    6868:	bl	65fc <ExFatFile::sync()>
    686c:	cmp	r0, #0
    686e:	beq.n	680a <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    6870:	movs	r3, #0
  return oldFile.remove();
    6872:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    6874:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    6876:	movs	r3, #2
    6878:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    687c:	movs	r3, #8
    687e:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    6882:	bl	643c <ExFatFile::remove()>
    6886:	b.n	680c <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00006888 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    6888:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    688a:	ldrb.w	r2, [r0, #51]	; 0x33
    688e:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6890:	lsls	r3, r2, #30
    6892:	bmi.n	689a <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    6894:	movs	r0, #0
}
    6896:	add	sp, #12
    6898:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    689a:	ldr	r3, [r0, #28]
    689c:	cmp	r3, #0
    689e:	beq.n	694e <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    68a0:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    68a4:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    68a6:	beq.n	6918 <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    68a8:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    68aa:	ldrb.w	r5, [r0, #1093]	; 0x445
    68ae:	ldrd	r2, r6, [r4, #8]
    68b2:	adds	r5, #9
    68b4:	subs	r2, #1
    68b6:	uxtb	r5, r5
    68b8:	adc.w	r6, r6, #4294967295
    68bc:	rsb	ip, r5, #32
    68c0:	sub.w	r7, r5, #32
    68c4:	lsrs	r2, r5
    68c6:	lsl.w	ip, r6, ip
    68ca:	lsr.w	r7, r6, r7
    68ce:	orr.w	r2, r2, ip
    68d2:	orrs	r2, r7
    68d4:	adds	r2, #1
    if (m_curCluster) {
    68d6:	cbz	r1, 6904 <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    68d8:	subs	r3, #1
      toFree = m_curCluster + 1;
    68da:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    68dc:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    68de:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    68e0:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    68e2:	cbnz	r2, 690a <ExFatFile::truncate()+0x82>
  return sync();
    68e4:	mov	r0, r4
  m_dataLength = m_curPosition;
    68e6:	ldrd	r2, r3, [r4]
    68ea:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    68ee:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68f2:	ldrb.w	r3, [r4, #51]	; 0x33
    68f6:	orn	r3, r3, #127	; 0x7f
    68fa:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    68fe:	bl	65fc <ExFatFile::sync()>
    6902:	b.n	6896 <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    6904:	str	r3, [sp, #4]
      m_firstCluster = 0;
    6906:	str	r1, [r4, #28]
    6908:	b.n	68e2 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    690a:	movs	r3, #0
    690c:	ldr	r1, [sp, #4]
    690e:	bl	5fa0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    6912:	cmp	r0, #0
    6914:	bne.n	68e4 <ExFatFile::truncate()+0x5c>
    6916:	b.n	6894 <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    6918:	cbz	r1, 6948 <ExFatFile::truncate()+0xc0>
      toFree = 0;
    691a:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    691c:	add	r2, sp, #4
    691e:	ldr	r0, [r0, #32]
    6920:	bl	6074 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    6924:	cmp	r0, #0
    6926:	blt.n	6894 <ExFatFile::truncate()+0xc>
      if (fg) {
    6928:	beq.n	693a <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    692a:	mov.w	r2, #4294967295
    692e:	ldr	r1, [r4, #24]
    6930:	ldr	r0, [r4, #32]
    6932:	bl	611a <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6936:	cmp	r0, #0
    6938:	beq.n	6894 <ExFatFile::truncate()+0xc>
    if (toFree) {
    693a:	ldr	r1, [sp, #4]
    693c:	cmp	r1, #0
    693e:	beq.n	68e4 <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    6940:	ldr	r0, [r4, #32]
    6942:	bl	6154 <ExFatPartition::freeChain(unsigned long)>
    6946:	b.n	6912 <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    6948:	str	r3, [sp, #4]
      m_firstCluster = 0;
    694a:	str	r1, [r0, #28]
    694c:	b.n	693a <ExFatFile::truncate()+0xb2>
      return true;
    694e:	movs	r0, #1
    6950:	b.n	6896 <ExFatFile::truncate()+0xe>
	...

00006954 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6954:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6958:	ldrb.w	r3, [r0, #51]	; 0x33
    695c:	mov	r8, r1
    695e:	mov	r4, r0
    6960:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    6962:	lsls	r1, r3, #30
    6964:	bpl.n	69a4 <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6966:	lsls	r2, r3, #28
    6968:	bmi.n	6998 <ExFatFile::write(void const*, unsigned int)+0x44>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    696a:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    696c:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6970:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6974:	ldrd	r5, r3, [r4]
  while (toWrite) {
    6978:	cbnz	r7, 69b6 <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    697a:	ldrd	r1, r2, [r4, #8]
    697e:	cmp	r1, r5
    6980:	sbcs	r2, r3
    6982:	bcs.w	6b48 <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    6986:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    698a:	ldrb.w	r3, [r4, #51]	; 0x33
    698e:	orn	r3, r3, #127	; 0x7f
    6992:	strb.w	r3, [r4, #51]	; 0x33
    6996:	b.n	6b52 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    6998:	ldrd	r2, r3, [r0, #16]
    699c:	bl	59c8 <ExFatFile::seekSet(unsigned long long)>
    69a0:	cmp	r0, #0
    69a2:	bne.n	696a <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    69a4:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    69a8:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    69ac:	orr.w	r3, r3, #1
    69b0:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    69b4:	b.n	6b52 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    69b6:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    69b8:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    69ba:	ldr.w	r3, [r0, #1080]	; 0x438
    69be:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    69c0:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    69c4:	cbnz	r5, 6a10 <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    69c6:	cmp	r1, #0
    69c8:	beq.n	6a76 <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    69ca:	ldrb.w	r3, [r4, #51]	; 0x33
    69ce:	lsls	r3, r3, #25
    69d0:	bpl.n	6a68 <ExFatFile::write(void const*, unsigned int)+0x114>
    69d2:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    69d6:	ldrd	r3, r2, [r4, #8]
    69da:	adds	r0, #9
    69dc:	subs	r3, #1
    69de:	uxtb	r0, r0
    69e0:	adc.w	r2, r2, #4294967295
    69e4:	rsb	lr, r0, #32
    69e8:	sub.w	ip, r0, #32
    69ec:	lsrs	r3, r0
    69ee:	lsl.w	lr, r2, lr
    69f2:	lsr.w	ip, r2, ip
    69f6:	ldr	r2, [r4, #28]
    69f8:	orr.w	r3, r3, lr
    69fc:	orr.w	r3, r3, ip
    6a00:	add	r3, r2
          if (m_curCluster < lc) {
    6a02:	cmp	r3, r1
    6a04:	bhi.n	6a62 <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    6a06:	mov	r0, r4
    6a08:	bl	63a8 <ExFatFile::addCluster()>
    6a0c:	cmp	r0, #0
    6a0e:	beq.n	69a4 <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    6a10:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6a14:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    6a16:	ldr	r1, [r4, #24]
    6a18:	ldrb.w	r2, [ip, #1093]	; 0x445
    6a1c:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    6a1e:	ldr.w	r0, [ip, #1068]	; 0x42c
    6a22:	lsls	r1, r2
    6a24:	add.w	r1, r1, r5, lsr #9
    6a28:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    6a2a:	cbnz	r6, 6a8e <ExFatFile::write(void const*, unsigned int)+0x13a>
    6a2c:	cmp.w	r7, #512	; 0x200
    6a30:	bcc.n	6a8e <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    6a32:	cmp.w	r7, #1024	; 0x400
    6a36:	ldr.w	lr, [ip, #540]	; 0x21c
    6a3a:	ldr.w	r0, [ip, #532]	; 0x214
    6a3e:	bcs.n	6b16 <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    6a40:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    6a42:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    6a44:	ittt	eq
    6a46:	moveq.w	r3, #4294967295
    m_status = 0;
    6a4a:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6a4e:	streq.w	r3, [ip, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    6a52:	ldr	r3, [r0, #0]
    6a54:	ldr	r3, [r3, #36]	; 0x24
    6a56:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6a58:	cmp	r0, #0
    6a5a:	beq.n	69a4 <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    6a5c:	mov.w	r5, #512	; 0x200
    6a60:	b.n	6ae2 <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    6a62:	adds	r1, #1
    6a64:	str	r1, [r4, #24]
        if (fg == 0) {
    6a66:	b.n	6a10 <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6a68:	mov	r2, sl
    6a6a:	bl	6074 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6a6e:	cmp	r0, #0
    6a70:	blt.n	69a4 <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    6a72:	beq.n	6a06 <ExFatFile::write(void const*, unsigned int)+0xb2>
    6a74:	b.n	6a10 <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    6a76:	ldr	r3, [r4, #28]
    6a78:	cbnz	r3, 6a8a <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    6a7a:	mov	r0, r4
    6a7c:	bl	63a8 <ExFatFile::addCluster()>
    6a80:	cmp	r0, #0
    6a82:	beq.n	69a4 <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    6a84:	ldr	r3, [r4, #24]
    6a86:	str	r3, [r4, #28]
    6a88:	b.n	6a10 <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    6a8a:	str	r3, [r4, #24]
    6a8c:	b.n	6a10 <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    6a8e:	rsb	r5, r6, #512	; 0x200
    6a92:	cmp	r5, r7
    6a94:	it	cs
    6a96:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    6a98:	cmp	r6, #0
    6a9a:	bne.n	6b12 <ExFatFile::write(void const*, unsigned int)+0x1be>
    6a9c:	ldr	r3, [r4, #20]
    6a9e:	ldr	r0, [r4, #0]
    6aa0:	str	r3, [sp, #4]
    6aa2:	ldr	r3, [r4, #16]
    6aa4:	ldr	r2, [r4, #4]
    6aa6:	cmp	r0, r3
    6aa8:	ldr	r3, [sp, #4]
    6aaa:	sbcs.w	r3, r2, r3
    6aae:	bcc.n	6b12 <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6ab0:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    6ab2:	add.w	r0, ip, #528	; 0x210
    6ab6:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6aba:	cmp	r0, #0
    6abc:	beq.w	69a4 <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    6ac0:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6ac2:	add	r6, r5
      memcpy(dst, src, n);
    6ac4:	mov	r2, r5
    6ac6:	mov	r1, r8
    6ac8:	bl	a000 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6acc:	cmp.w	r6, #512	; 0x200
    6ad0:	ldr	r0, [r4, #32]
    6ad2:	bne.n	6ae2 <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() {return m_dataCache.sync();}
    6ad4:	add.w	r0, r0, #528	; 0x210
    6ad8:	bl	5400 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    6adc:	cmp	r0, #0
    6ade:	beq.w	69a4 <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    6ae2:	add	r8, r5
    toWrite -= n;
    6ae4:	subs	r7, r7, r5
    m_curPosition += n;
    6ae6:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    6aea:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    6aee:	adds	r3, r5, r3
    6af0:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    6af4:	cmp	r0, r3
    6af6:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6af8:	itt	cc
    6afa:	ldrbcc.w	r1, [r4, #51]	; 0x33
    6afe:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    6b02:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6b06:	itt	cc
    6b08:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    6b0c:	strdcc	r3, r2, [r4, #16]
    6b10:	b.n	6974 <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6b12:	movs	r2, #1
    6b14:	b.n	6ab2 <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6b16:	lsl.w	r2, fp, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6b1a:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    6b1c:	lsrs	r2, r7, #9
    6b1e:	cmp	r3, r2
    6b20:	it	cs
    6b22:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    6b24:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    6b26:	mov.w	r5, r3, lsl #9
    6b2a:	bhi.n	6b3e <ExFatFile::write(void const*, unsigned int)+0x1ea>
    6b2c:	adds	r2, r1, r3
    6b2e:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    6b30:	ittt	hi
    6b32:	movhi.w	r2, #4294967295
    m_status = 0;
    6b36:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6b3a:	strhi.w	r2, [ip, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    6b3e:	ldr	r2, [r0, #0]
    6b40:	ldr	r6, [r2, #40]	; 0x28
    6b42:	mov	r2, r8
    6b44:	blx	r6
    6b46:	b.n	6adc <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    6b48:	ldr	r3, [pc, #16]	; (6b5c <ExFatFile::write(void const*, unsigned int)+0x208>)
    6b4a:	ldr	r3, [r3, #0]
    6b4c:	cmp	r3, #0
    6b4e:	bne.w	698a <ExFatFile::write(void const*, unsigned int)+0x36>
}
    6b52:	mov	r0, r9
    6b54:	add	sp, #12
    6b56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b5a:	nop
    6b5c:	.word	0x200147fc

00006b60 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    6b60:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6b62:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    6b64:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6b66:	bl	7052 <FatFile::seekSet(unsigned long)>
    6b6a:	cbz	r0, 6b78 <FatFile::cacheDir(unsigned short)+0x18>
    6b6c:	mov	r0, r4
    6b6e:	movs	r1, #0
  }
    6b70:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6b74:	b.w	7014 <FatFile::readDirCache(bool)>
  }
    6b78:	pop	{r4, pc}

00006b7a <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    6b7a:	cmp	r2, #4
    6b7c:	bhi.n	6b88 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    6b7e:	add.w	r2, r1, r2, lsl #1
    6b82:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    6b86:	bx	lr
  } else if (i < 11) {
    6b88:	cmp	r2, #10
    6b8a:	bhi.n	6b94 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    6b8c:	add.w	r2, r1, r2, lsl #1
    6b90:	ldrh	r0, [r2, #4]
    6b92:	bx	lr
  } else if (i < 13) {
    6b94:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    6b96:	itte	ls
    6b98:	addls.w	r2, r1, r2, lsl #1
    6b9c:	ldrhls	r0, [r2, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    6b9e:	movhi	r0, #0
}
    6ba0:	bx	lr

00006ba2 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    6ba2:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    6ba4:	ldrb	r4, [r0, #0]
    6ba6:	mov	r5, r1
    6ba8:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    6baa:	cbz	r4, 6c1c <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    6bac:	ands.w	r4, r4, #96	; 0x60
    6bb0:	beq.n	6bc2 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    6bb2:	cmp	r2, #1
    6bb4:	bls.n	6c1c <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    6bb6:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    6bb8:	movs	r0, #1
    name[0] = '/';
    6bba:	strb	r3, [r1, #0]
    name[1] = '\0';
    6bbc:	movs	r3, #0
    6bbe:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    6bc0:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6bc2:	mov	r1, r4
    6bc4:	bl	6e10 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6bc8:	cbz	r0, 6c1c <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    6bca:	mov	r6, r0
    6bcc:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    6bce:	movs	r2, #8
    if (i == 8) {
    6bd0:	cmp	r1, #8
      if (*ptr == ' ') {
    6bd2:	ldrb	r3, [r6, #0]
    if (i == 8) {
    6bd4:	bne.n	6bee <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    6bd6:	cmp	r3, #32
    6bd8:	beq.n	6c14 <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    6bda:	movs	r2, #16
      c = '.';
    6bdc:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    6bde:	mov	ip, r4
    6be0:	adds	r4, #1
    6be2:	cmp	r4, r7
    6be4:	bcs.n	6c1c <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    6be6:	uxtb	r4, r4
    6be8:	strb.w	r3, [r5, ip]
    6bec:	b.n	6c0e <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6bee:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    6bf2:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6bf4:	cmp.w	ip, #25
    6bf8:	bhi.n	6c0a <FatFile::getSFN(char*, unsigned int)+0x68>
    6bfa:	ldrb.w	ip, [r0, #12]
    6bfe:	tst.w	r2, ip
    6c02:	beq.n	6bde <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    6c04:	adds	r3, #32
    6c06:	uxtb	r3, r3
    6c08:	b.n	6bde <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    6c0a:	cmp	r3, #32
    6c0c:	bne.n	6bde <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    6c0e:	adds	r1, #1
    6c10:	cmp	r1, #12
    6c12:	bne.n	6bd0 <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    6c14:	movs	r3, #0
    6c16:	mov	r0, r4
    6c18:	strb	r3, [r5, r4]
  return j;
    6c1a:	b.n	6bc0 <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    6c1c:	movs	r0, #0
    6c1e:	strb	r0, [r5, #0]
  return 0;
    6c20:	b.n	6bc0 <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

00006c24 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    6c24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    6c28:	movs	r5, #0
    6c2a:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    6c2c:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    6c2e:	mov	r6, r0
    6c30:	mov	r8, r1
    6c32:	mov	r7, r2
    6c34:	str	r5, [sp, #4]
  if (!isOpen()) {
    6c36:	cbz	r3, 6c52 <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    6c38:	ldrb	r3, [r0, #3]
    6c3a:	cbnz	r3, 6c46 <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    6c3c:	bl	6ba2 <FatFile::getSFN(char*, unsigned int)>
}
    6c40:	add	sp, #44	; 0x2c
    6c42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    6c46:	mov	r1, r0
    6c48:	add	r0, sp, #4
    6c4a:	bl	6e3a <FatFile::openCluster(FatFile*)>
    6c4e:	cmp	r0, #0
    6c50:	bne.n	6cfe <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    6c52:	movs	r0, #0
    6c54:	strb.w	r0, [r8]
  return 0;
    6c58:	b.n	6c40 <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    6c5a:	ldrh	r1, [r6, #4]
    6c5c:	add	r0, sp, #4
    6c5e:	sub.w	r1, r1, r9
    6c62:	uxth	r1, r1
    6c64:	bl	6b60 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    6c68:	mov	sl, r0
    6c6a:	cmp	r0, #0
    6c6c:	beq.n	6c52 <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6c6e:	ldrb	r3, [r0, #11]
    6c70:	cmp	r3, #15
    6c72:	bne.n	6c52 <FatFile::getName8(char*, unsigned int)+0x2e>
    6c74:	ldrb	r3, [r0, #0]
    6c76:	and.w	r3, r3, #31
    6c7a:	cmp	fp, r3
    6c7c:	bne.n	6c52 <FatFile::getName8(char*, unsigned int)+0x2e>
    6c7e:	mov.w	fp, #0
      uint16_t c = getLfnChar(ldir, i);
    6c82:	uxtb.w	r2, fp
    6c86:	mov	r1, sl
    6c88:	mov	r0, r6
    6c8a:	bl	6b7a <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    6c8e:	cbz	r5, 6cda <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    6c90:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6c94:	uxth	r2, r2
    6c96:	cmp.w	r2, #1024	; 0x400
    6c9a:	bcs.n	6c52 <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6c9c:	ldr	r3, [pc, #108]	; (6d0c <FatFile::getName8(char*, unsigned int)+0xe8>)
    6c9e:	ubfx	r0, r0, #0, #10
    6ca2:	and.w	r5, r3, r5, lsl #10
    6ca6:	orrs	r0, r5
    6ca8:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6cac:	mov	r1, r4
    6cae:	mov	r2, r7
    6cb0:	bl	52e4 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6cb4:	mov	r4, r0
    6cb6:	cmp	r0, #0
    6cb8:	beq.n	6c52 <FatFile::getName8(char*, unsigned int)+0x2e>
    6cba:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    6cbc:	add.w	fp, fp, #1
    6cc0:	cmp.w	fp, #13
    6cc4:	bne.n	6c82 <FatFile::getName8(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6cc6:	add.w	r9, r9, #1
    6cca:	uxth.w	r9, r9
    6cce:	uxtb.w	fp, r9
    6cd2:	ldrb	r3, [r6, #3]
    6cd4:	cmp	r3, fp
    6cd6:	bcs.n	6c5a <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    6cd8:	b.n	6cea <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    6cda:	add.w	r2, r0, #10240	; 0x2800
    6cde:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    6ce0:	cmp.w	r2, #2048	; 0x800
    6ce4:	bcc.n	6cf4 <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    6ce6:	cmp	r0, #0
    6ce8:	bne.n	6cac <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    6cea:	movs	r3, #0
  return str - name;
    6cec:	sub.w	r0, r4, r8
  *str = '\0';
    6cf0:	strb	r3, [r4, #0]
  return str - name;
    6cf2:	b.n	6c40 <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    6cf4:	cmp.w	r2, #1024	; 0x400
    6cf8:	bcs.n	6c52 <FatFile::getName8(char*, unsigned int)+0x2e>
    6cfa:	mov	r5, r0
    6cfc:	b.n	6cbc <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6cfe:	subs	r7, #1
  char* str = name;
    6d00:	mov	r4, r8
    6d02:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6d06:	add	r7, r8
    6d08:	b.n	6cce <FatFile::getName8(char*, unsigned int)+0xaa>
    6d0a:	nop
    6d0c:	.word	0x000ffc00

00006d10 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    6d10:	b.w	6c24 <FatFile::getName8(char*, unsigned int)>

00006d14 <FatFile::openRoot(FatVolume*) [clone .part.0]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    6d14:	push	{r3, r4, r5, lr}
    6d16:	mov	r5, r1
    6d18:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    6d1a:	movs	r2, #36	; 0x24
    6d1c:	movs	r1, #0
    6d1e:	bl	9fbc <memset>

  m_vol = vol;
    6d22:	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartSector;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
    6d24:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    6d26:	cmp	r3, #16
    6d28:	beq.n	6d32 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1e>
    6d2a:	cmp	r3, #32
    6d2c:	beq.n	6d3c <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    6d2e:	cmp	r3, #12
    6d30:	bne.n	6d40 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x2c>
    6d32:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    6d34:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    6d36:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6d38:	strb	r0, [r4, #2]
  return true;

 fail:
  return false;
}
    6d3a:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    6d3c:	movs	r3, #64	; 0x40
    6d3e:	b.n	6d34 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x20>
    6d40:	movs	r0, #0
    6d42:	b.n	6d3a <FatFile::openRoot(FatVolume*) [clone .part.0]+0x26>

00006d44 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    6d44:	push	{r4, lr}
    6d46:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6d48:	adds	r0, #40	; 0x28
    6d4a:	bl	5400 <FsCache::sync()>
    6d4e:	cbz	r0, 6d66 <FatPartition::cacheSync()+0x22>
    6d50:	add.w	r0, r4, #568	; 0x238
    6d54:	bl	5400 <FsCache::sync()>
    6d58:	cbz	r0, 6d66 <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6d5a:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    6d5c:	ldr	r3, [r0, #0]
  }
    6d5e:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6d62:	ldr	r3, [r3, #32]
    6d64:	bx	r3
  }
    6d66:	movs	r0, #0
    6d68:	pop	{r4, pc}

00006d6a <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    6d6a:	mov	r2, r0
bool FatFile::addCluster() {
    6d6c:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    6d6e:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    6d72:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    6d74:	ldr	r0, [r0, #8]
    6d76:	mov	r1, r5
    6d78:	bl	7b18 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    6d7c:	cbz	r0, 6d90 <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6d7e:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    6d80:	cbnz	r5, 6d92 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6d82:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6d86:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6d88:	ldrb	r3, [r4, #2]
    6d8a:	orn	r3, r3, #127	; 0x7f
    6d8e:	strb	r3, [r4, #2]
}
    6d90:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    6d92:	adds	r5, #1
    6d94:	ldr	r2, [r4, #16]
    6d96:	cmp	r2, r5
    6d98:	beq.n	6d88 <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6d9a:	bic.w	r3, r3, #64	; 0x40
    6d9e:	b.n	6d86 <FatFile::addCluster()+0x1c>

00006da0 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    6da0:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    6da2:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    6da4:	mov	r4, r0
  if (isRootFixed()) {
    6da6:	ands.w	r5, r5, #32
    6daa:	beq.n	6db2 <FatFile::addDirCluster()+0x12>
  return false;
    6dac:	movs	r6, #0
}
    6dae:	mov	r0, r6
    6db0:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    6db2:	ldr	r2, [r0, #20]
    6db4:	ldr	r3, [pc, #84]	; (6e0c <FatFile::addDirCluster()+0x6c>)
    6db6:	cmp	r2, r3
    6db8:	bcs.n	6dac <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    6dba:	bl	6d6a <FatFile::addCluster()>
    6dbe:	mov	r6, r0
    6dc0:	cmp	r0, #0
    6dc2:	beq.n	6dac <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    6dc4:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6dc6:	ldr	r3, [r4, #16]
    6dc8:	ldrb	r1, [r2, #6]
    6dca:	subs	r3, #2
    6dcc:	ldr	r7, [r2, #20]
    6dce:	lsls	r3, r1
    6dd0:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    6dd2:	ldr	r0, [r4, #8]
    6dd4:	uxtb	r1, r5
    6dd6:	ldrb	r3, [r0, #4]
    6dd8:	cmp	r3, r1
    6dda:	bhi.n	6dee <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    6ddc:	ldrb	r2, [r0, #6]
    6dde:	mov.w	r3, #512	; 0x200
    6de2:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    6de4:	ldr	r2, [r4, #20]
    6de6:	uxtah	r3, r2, r3
    6dea:	str	r3, [r4, #20]
  return true;
    6dec:	b.n	6dae <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    6dee:	movs	r2, #5
    6df0:	add	r1, r7
    6df2:	adds	r0, #40	; 0x28
    if (!pc) {
    6df4:	adds	r5, #1
    6df6:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
    6dfa:	cmp	r0, #0
    6dfc:	beq.n	6dac <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    6dfe:	mov.w	r2, #512	; 0x200
    6e02:	movs	r1, #0
    6e04:	bl	9fbc <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    6e08:	b.n	6dd2 <FatFile::addDirCluster()+0x32>
    6e0a:	nop
    6e0c:	.word	0x001ffe00

00006e10 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    6e10:	push	{r4, lr}
    6e12:	mov	r4, r0
    6e14:	ldr	r0, [r0, #8]
    6e16:	mov	r2, r1
    6e18:	adds	r0, #40	; 0x28
    6e1a:	ldr	r1, [r4, #24]
    6e1c:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6e20:	cbz	r0, 6e2c <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    6e22:	ldrh	r3, [r4, #4]
    6e24:	and.w	r3, r3, #15
    6e28:	add.w	r0, r0, r3, lsl #5
}
    6e2c:	pop	{r4, pc}

00006e2e <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    6e2e:	ldrb	r3, [r0, #0]
    6e30:	cbnz	r3, 6e36 <FatFile::openRoot(FatVolume*)+0x8>
    6e32:	b.w	6d14 <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    6e36:	movs	r0, #0
    6e38:	bx	lr

00006e3a <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    6e3a:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    6e3c:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    6e3e:	mov	r4, r0
    6e40:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    6e42:	cbnz	r3, 6e4e <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    6e44:	ldr	r1, [r1, #8]
}
    6e46:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    6e4a:	b.w	6e2e <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    6e4e:	movs	r2, #36	; 0x24
    6e50:	movs	r1, #0
    6e52:	bl	9fbc <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    6e56:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6e58:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6e5a:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6e5c:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    6e5e:	ldr	r3, [r5, #8]
    6e60:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    6e62:	ldr	r3, [r5, #12]
    6e64:	str	r3, [r4, #32]
}
    6e66:	pop	{r3, r4, r5, pc}

00006e68 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    6e68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e6c:	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    6e70:	ldrb	r3, [r0, #2]
    6e72:	mov	r4, r0
    6e74:	sub	sp, #12
    6e76:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    6e78:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    6e7a:	mov	r5, r2
  if (!isReadable()) {
    6e7c:	bpl.n	6f62 <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    6e7e:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    6e80:	lsls	r1, r3, #28
    6e82:	bpl.n	6eac <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6e84:	ldr	r3, [r4, #28]
    6e86:	ldr	r2, [r4, #20]
    6e88:	subs	r3, r3, r2
    6e8a:	cmp	r5, r3
    6e8c:	it	cs
    6e8e:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6e90:	add.w	r3, r4, #16
  toRead = nbyte;
    6e94:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    6e96:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6e9a:	vmov	s16, r3
  while (toRead) {
    6e9e:	cbnz	r6, 6ebe <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    6ea0:	subs	r0, r5, r6

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    6ea2:	add	sp, #12
    6ea4:	vpop	{d8}
    6ea8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    6eac:	lsls	r2, r3, #26
    6eae:	bpl.n	6e90 <FatFile::read(void*, unsigned int)+0x28>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    6eb0:	ldr	r3, [r4, #8]
    6eb2:	ldrh	r2, [r3, #10]
    6eb4:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    6eb6:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    6eba:	uxth	r3, r3
    6ebc:	b.n	6e8a <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    6ebe:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6ec0:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    6ec2:	lsls	r3, r2, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6ec4:	ldr	r0, [r4, #8]
    6ec6:	ubfx	fp, r7, #0, #9
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    6eca:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    6ece:	bpl.n	6f08 <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart()
    6ed0:	ldr	r2, [r0, #32]
    6ed2:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    6ed4:	ldr.w	sl, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    6ed8:	cmp.w	fp, #0
    6edc:	bne.n	6f70 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    6ede:	cmp.w	r6, #512	; 0x200
    6ee2:	bcc.n	6f70 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    6ee4:	ldr.w	r2, [sl, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    6ee8:	cmp	r1, r2
    6eea:	beq.n	6f70 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6eec:	cmp.w	r6, #1024	; 0x400
    6ef0:	bcs.n	6fa0 <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    6ef2:	ldr.w	r0, [sl, #44]	; 0x2c
    6ef6:	mov	r2, r8
    6ef8:	ldr	r3, [r0, #0]
    6efa:	ldr	r3, [r3, #16]
    6efc:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    6efe:	cmp	r0, #0
    6f00:	beq.n	6f62 <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    6f02:	mov.w	r7, #512	; 0x200
    6f06:	b.n	6f94 <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    6f08:	ldrb.w	r9, [r0, #5]
    6f0c:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    6f10:	cmp.w	fp, #0
    6f14:	bne.n	6f28 <FatFile::read(void*, unsigned int)+0xc0>
    6f16:	cmp.w	r9, #0
    6f1a:	bne.n	6f28 <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    6f1c:	cbnz	r7, 6f3a <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6f1e:	lsls	r2, r2, #25
    return m_rootDirStart;
    6f20:	ite	mi
    6f22:	ldrmi	r2, [r0, #32]
    6f24:	ldrpl	r2, [r4, #32]
    6f26:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6f28:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6f2a:	ldr	r1, [r4, #16]
    6f2c:	ldrb	r0, [r2, #6]
    6f2e:	subs	r1, #2
    6f30:	ldr	r2, [r2, #20]
    6f32:	lsls	r1, r0
    6f34:	add	r1, r2
    6f36:	add	r1, r9
    6f38:	b.n	6ed4 <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    6f3a:	lsls	r3, r2, #28
          m_curCluster++;
    6f3c:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    6f3e:	bpl.n	6f4c <FatFile::read(void*, unsigned int)+0xe4>
    6f40:	ldrb	r2, [r4, #2]
    6f42:	lsls	r7, r2, #25
    6f44:	bpl.n	6f4c <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    6f46:	adds	r1, #1
    6f48:	str	r1, [r4, #16]
    6f4a:	b.n	6f28 <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6f4c:	vmov	r2, s16
    6f50:	bl	798a <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6f54:	cmp	r0, #0
    6f56:	blt.n	6f62 <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    6f58:	bne.n	6f28 <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    6f5a:	ldrb	r3, [r4, #0]
    6f5c:	tst.w	r3, #112	; 0x70
    6f60:	bne.n	6ea0 <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    6f62:	ldrb	r3, [r4, #1]
  return -1;
    6f64:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    6f68:	orr.w	r3, r3, #2
    6f6c:	strb	r3, [r4, #1]
  return -1;
    6f6e:	b.n	6ea2 <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    6f70:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    6f74:	movs	r2, #0
    6f76:	add.w	r0, sl, #40	; 0x28
    6f7a:	cmp	r7, r6
    6f7c:	it	cs
    6f7e:	movcs	r7, r6
    6f80:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6f84:	cmp	r0, #0
    6f86:	beq.n	6f62 <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    6f88:	add.w	r1, r0, fp
    6f8c:	mov	r2, r7
    6f8e:	mov	r0, r8
    6f90:	bl	a000 <memcpy>
    m_curPosition += n;
    6f94:	ldr	r3, [r4, #20]
    dst += n;
    6f96:	add	r8, r7
    toRead -= n;
    6f98:	subs	r6, r6, r7
    m_curPosition += n;
    6f9a:	add	r3, r7
    6f9c:	str	r3, [r4, #20]
    toRead -= n;
    6f9e:	b.n	6e9e <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    6fa0:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    6fa2:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    6fa4:	lsls	r0, r0, #26
    6fa6:	bmi.n	6fb6 <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    6fa8:	ldrb.w	r0, [sl, #4]
    6fac:	sub.w	r0, r0, r9
    6fb0:	cmp	r3, r0
    6fb2:	it	cs
    6fb4:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    6fb6:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    6fb8:	mov.w	r7, r3, lsl #9
    6fbc:	bls.n	6fd2 <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    6fbe:	ldr.w	r0, [sl, #44]	; 0x2c
    6fc2:	ldr	r2, [r0, #0]
    6fc4:	ldr.w	sl, [r2, #20]
    6fc8:	mov	r2, r8
    6fca:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    6fcc:	cmp	r0, #0
    6fce:	bne.n	6f94 <FatFile::read(void*, unsigned int)+0x12c>
    6fd0:	b.n	6f62 <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    6fd2:	adds	r0, r1, r3
    6fd4:	cmp	r2, r0
    6fd6:	bcs.n	6fbe <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    6fd8:	add.w	r0, sl, #40	; 0x28
    6fdc:	strd	r1, r3, [sp]
    6fe0:	bl	5400 <FsCache::sync()>
    6fe4:	ldrd	r1, r3, [sp]
    6fe8:	cmp	r0, #0
    6fea:	bne.n	6fbe <FatFile::read(void*, unsigned int)+0x156>
    6fec:	b.n	6f62 <FatFile::read(void*, unsigned int)+0xfa>

00006fee <FatFile::peek()>:
int FatFile::peek() {
    6fee:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    6ff0:	movs	r2, #1
    6ff2:	add.w	r1, sp, #7
    6ff6:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    6ff8:	ldrd	r5, r6, [r0, #16]
    6ffc:	bl	6e68 <FatFile::read(void*, unsigned int)>
    7000:	cmp	r0, #1
    7002:	ite	eq
    7004:	ldrbeq.w	r0, [sp, #7]
    7008:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    700c:	strd	r5, r6, [r4, #16]
}
    7010:	add	sp, #8
    7012:	pop	{r4, r5, r6, pc}

00007014 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7014:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    7016:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    701a:	push	{r0, r1, r2, r4, r5, lr}
    701c:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    701e:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    7022:	beq.n	7026 <FatFile::readDirCache(bool)+0x12>
    7024:	cbnz	r1, 704e <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    7026:	movs	r2, #1
    7028:	add.w	r1, sp, #7
    702c:	mov	r0, r4
    702e:	bl	6e68 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    7032:	sxtb	r0, r0
    7034:	cmp	r0, #1
    7036:	beq.n	703e <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    7038:	movs	r0, #0
}
    703a:	add	sp, #12
    703c:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    703e:	ldr	r3, [r4, #20]
    7040:	adds	r3, #31
    return m_buffer;
    7042:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    7044:	str	r3, [r4, #20]
    7046:	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7048:	add.w	r0, r0, r5, lsl #5
    704c:	b.n	703a <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    704e:	adds	r3, #32
    7050:	b.n	7042 <FatFile::readDirCache(bool)+0x2e>

00007052 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    7052:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7056:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    7058:	ldrb	r1, [r0, #0]
    705a:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    705c:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    705e:	cbz	r1, 7082 <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    7060:	ldr	r0, [r0, #20]
    7062:	cmp	r0, r5
    7064:	beq.n	7074 <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    7066:	cbnz	r5, 7078 <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    7068:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    706a:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    706c:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    706e:	bic.w	r3, r3, #32
    7072:	strb	r3, [r4, #2]
    return true;
    7074:	movs	r0, #1
    7076:	b.n	7086 <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    7078:	lsls	r3, r1, #28
    707a:	bpl.n	708a <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    707c:	ldr	r3, [r4, #28]
    707e:	cmp	r3, r5
    7080:	bcs.n	709a <FatFile::seekSet(unsigned long)+0x48>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    7082:	movs	r0, #0
  m_curCluster = tmp;
    7084:	str	r7, [r4, #16]
}
    7086:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    708a:	lsls	r6, r1, #26
    708c:	bpl.n	709a <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    708e:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    7090:	ldrh	r3, [r3, #10]
    7092:	cmp.w	r5, r3, lsl #5
    7096:	bhi.n	7082 <FatFile::seekSet(unsigned long)+0x30>
    7098:	b.n	706a <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    709a:	ldr.w	ip, [r4, #8]
    709e:	subs	r6, r5, #1
  if (isContiguous()) {
    70a0:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    70a2:	ldrb.w	r3, [ip, #6]
    70a6:	lsls	r2, r2, #25
    70a8:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    70ac:	uxtb	r3, r3
    70ae:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    70b2:	bpl.n	70bc <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    70b4:	ldr	r3, [r4, #32]
    70b6:	add	r3, r6
    70b8:	str	r3, [r4, #16]
    goto done;
    70ba:	b.n	706a <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    70bc:	subs	r2, r0, #1
    70be:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    70c2:	cmp	r6, r3
    70c4:	bcc.n	70c8 <FatFile::seekSet(unsigned long)+0x76>
    70c6:	cbnz	r0, 70ee <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    70c8:	lsls	r3, r1, #25
    return m_rootDirStart;
    70ca:	ite	mi
    70cc:	ldrmi.w	r3, [ip, #32]
    70d0:	ldrpl	r3, [r4, #32]
    70d2:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    70d4:	add.w	r8, r4, #16
  while (nNew--) {
    70d8:	cmp	r6, #0
    70da:	beq.n	706a <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    70dc:	mov	r2, r8
    70de:	ldr	r1, [r4, #16]
    70e0:	ldr	r0, [r4, #8]
    70e2:	subs	r6, #1
    70e4:	bl	798a <FatPartition::fatGet(unsigned long, unsigned long*)>
    70e8:	cmp	r0, #0
    70ea:	bgt.n	70d8 <FatFile::seekSet(unsigned long)+0x86>
    70ec:	b.n	7082 <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    70ee:	subs	r6, r6, r3
    70f0:	b.n	70d4 <FatFile::seekSet(unsigned long)+0x82>

000070f2 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    70f2:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    70f4:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    70f6:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    70f8:	lsls	r2, r3, #27
    70fa:	bpl.n	7110 <FatFile::rmdir()+0x1e>
    seekSet(0);
    70fc:	movs	r1, #0
    70fe:	bl	7052 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    7102:	movs	r1, #1
    7104:	mov	r0, r4
    7106:	bl	7014 <FatFile::readDirCache(bool)>
    if (!dir) {
    710a:	cbnz	r0, 7114 <FatFile::rmdir()+0x22>
      if (!getError()) {
    710c:	ldrb	r3, [r4, #1]
    710e:	cbz	r3, 7128 <FatFile::rmdir()+0x36>
}
    7110:	movs	r0, #0
    7112:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    7114:	ldrb	r3, [r0, #0]
    7116:	cbz	r3, 7128 <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7118:	cmp	r3, #229	; 0xe5
    711a:	beq.n	7102 <FatFile::rmdir()+0x10>
    711c:	cmp	r3, #46	; 0x2e
    711e:	beq.n	7102 <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    7120:	ldrb	r3, [r0, #11]
    7122:	lsls	r3, r3, #28
    7124:	bmi.n	7102 <FatFile::rmdir()+0x10>
    7126:	b.n	7110 <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    7128:	movs	r3, #8
  return remove();
    712a:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    712c:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    712e:	ldrb	r3, [r4, #2]
    7130:	orr.w	r3, r3, #2
    7134:	strb	r3, [r4, #2]
}
    7136:	ldmia.w	sp!, {r4, lr}
  return remove();
    713a:	b.w	8444 <FatFile::remove()>

0000713e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    713e:	push	{r3, r4, r5, r6, r7, lr}
    7140:	mov	r7, r1
    7142:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    7144:	movs	r1, #0
    7146:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    7148:	mov	r4, r0
    714a:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    714c:	bl	9fbc <memset>
  m_vol = dirFile->m_vol;
    7150:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    7152:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    7154:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    7156:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    715a:	str	r3, [r4, #12]
    715c:	add.w	r3, r0, #56	; 0x38
  m_vol = dirFile->m_vol;
    7160:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    7162:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7166:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    7168:	lsls	r1, r2, #28
    716a:	bmi.n	71e2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    716c:	and.w	r2, r2, #23
    7170:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    7172:	ldrb	r1, [r3, #11]
    7174:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    7178:	itt	eq
    717a:	orreq.w	r2, r2, #8
    717e:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    7180:	ldrb.w	r2, [sp, #24]
    7184:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    7186:	and.w	r2, r5, #3
    718a:	cmp	r2, #1
    718c:	beq.n	71d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    718e:	cmp	r2, #2
    7190:	beq.n	71d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    7192:	cbnz	r2, 71e2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    7194:	lsls	r2, r5, #21
    7196:	bmi.n	71e2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    7198:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    719a:	lsls	r7, r2, #30
    719c:	bpl.n	71a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    719e:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    71a0:	lsls	r6, r1, #27
    71a2:	bmi.n	71e2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    71a4:	lsls	r1, r1, #31
    71a6:	bmi.n	71e2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    71a8:	and.w	r1, r5, #8
    71ac:	orrs	r2, r1
    71ae:	strb	r2, [r4, #2]
    return m_sector;
    71b0:	ldr	r2, [r0, #52]	; 0x34
                 | getLe16(dir->firstClusterLow);
    71b2:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    71b4:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    71b6:	ldrh	r2, [r3, #20]
    71b8:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    71bc:	lsls	r2, r5, #21
    71be:	bpl.n	71ea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    71c0:	cbnz	r1, 71da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    71c2:	ldrb	r3, [r4, #2]
    71c4:	orn	r3, r3, #127	; 0x7f
    71c8:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    71ca:	lsls	r3, r5, #17
    71cc:	bmi.n	71f2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    71ce:	movs	r0, #1
}
    71d0:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    71d2:	movs	r2, #2
    71d4:	b.n	719a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    71d6:	movs	r2, #3
    71d8:	b.n	719a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    71da:	bl	7b9a <FatPartition::freeChain(unsigned long)>
    71de:	cmp	r0, #0
    71e0:	bne.n	71c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    71e2:	movs	r0, #0
    71e4:	strb	r0, [r4, #0]
  m_flags = 0;
    71e6:	strb	r0, [r4, #2]
  return false;
    71e8:	b.n	71d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    71ea:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    71ec:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    71ee:	str	r3, [r4, #28]
    71f0:	b.n	71ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    71f2:	ldr	r1, [r4, #28]
    71f4:	mov	r0, r4
    71f6:	bl	7052 <FatFile::seekSet(unsigned long)>
    71fa:	cmp	r0, #0
    71fc:	bne.n	71ce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    71fe:	b.n	71e2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

00007200 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7200:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7204:	mov	r3, r2
  bool isOpen() const {return m_attributes;}
    7206:	ldrb	r2, [r0, #0]
    7208:	sub	sp, #20
    720a:	mov	r7, r0
    720c:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    720e:	cmp	r2, #0
    7210:	bne.n	7298 <FatFile::openNext(FatFile*, int)+0x98>
    7212:	ldrb	r2, [r1, #0]
    7214:	tst.w	r2, #112	; 0x70
    7218:	beq.n	7298 <FatFile::openNext(FatFile*, int)+0x98>
    721a:	ldr	r4, [r1, #20]
    721c:	ands.w	r4, r4, #31
    7220:	bne.n	7298 <FatFile::openNext(FatFile*, int)+0x98>
    7222:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    7224:	movs	r1, #0
    7226:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    7228:	ldr.w	r8, [r6, #20]
    722c:	str	r3, [sp, #12]
    722e:	bl	7014 <FatFile::readDirCache(bool)>
    if (!dir) {
    7232:	cbz	r0, 7298 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    7234:	ldrb	r1, [r0, #0]
    7236:	cbz	r1, 7298 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    7238:	cmp	r1, #46	; 0x2e
    723a:	ldr	r3, [sp, #12]
    723c:	beq.n	7282 <FatFile::openNext(FatFile*, int)+0x82>
    723e:	cmp	r1, #229	; 0xe5
    7240:	beq.n	7282 <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7242:	ldrb	r2, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    7244:	ands.w	ip, r2, #8
    7248:	bne.n	7286 <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    724a:	cbz	r4, 726e <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    724c:	subs	r1, r0, #1
    724e:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7252:	mov.w	r2, ip, lsl #7
    7256:	ldrb.w	r0, [r1, #1]!
    725a:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    725e:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7260:	uxtab	r2, r0, r2
    7264:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    7268:	bne.n	7252 <FatFile::openNext(FatFile*, int)+0x52>
    726a:	cmp	r9, ip
    726c:	bne.n	7298 <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    726e:	ubfx	r2, r8, #5, #16
    7272:	mov	r1, r6
    7274:	mov	r0, r7
    7276:	str	r4, [sp, #0]
    7278:	bl	713e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    727c:	add	sp, #20
    727e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    7282:	movs	r4, #0
    7284:	b.n	7224 <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isLongName(dir)) {
    7286:	cmp	r2, #15
    7288:	bne.n	7282 <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    728a:	lsls	r2, r1, #25
    728c:	bpl.n	7224 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    728e:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    7292:	ldrb.w	r9, [r0, #13]
    7296:	b.n	7224 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    7298:	movs	r0, #0
    729a:	b.n	727c <FatFile::openNext(FatFile*, int)+0x7c>

0000729c <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    729c:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    729e:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    72a0:	mov	r4, r0
  if (!isOpen()) {
    72a2:	cmp	r3, #0
    72a4:	beq.n	7312 <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    72a6:	ldrsb.w	r3, [r0, #2]
    72aa:	cmp	r3, #0
    72ac:	bge.n	7306 <FatFile::sync()+0x6a>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    72ae:	movs	r1, #1
    72b0:	bl	6e10 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    72b4:	mov	r5, r0
    72b6:	cbnz	r0, 72c6 <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    72b8:	ldrb	r3, [r4, #1]
  return false;
    72ba:	movs	r0, #0
  m_error |= WRITE_ERROR;
    72bc:	orr.w	r3, r3, #1
    72c0:	strb	r3, [r4, #1]
}
    72c2:	add	sp, #12
    72c4:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    72c6:	ldrb	r3, [r0, #0]
    72c8:	cmp	r3, #229	; 0xe5
    72ca:	beq.n	72b8 <FatFile::sync()+0x1c>
    if (isFile()) {
    72cc:	ldrb	r3, [r4, #0]
    72ce:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    72d0:	itt	mi
    72d2:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    72d4:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    72d6:	ldr	r3, [r4, #32]
    72d8:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    72da:	lsrs	r3, r3, #16
    72dc:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    72de:	ldr	r3, [pc, #56]	; (7318 <FatFile::sync()+0x7c>)
    72e0:	ldr	r3, [r3, #0]
    72e2:	cbz	r3, 72fe <FatFile::sync()+0x62>
      FsDateTime::callback(&date, &time, &ms10);
    72e4:	add.w	r2, sp, #3
    72e8:	add.w	r1, sp, #6
    72ec:	add	r0, sp, #4
    72ee:	blx	r3
      setLe16(dir->modifyDate, date);
    72f0:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    72f4:	strh	r3, [r5, #24]
    72f6:	strh	r3, [r5, #18]
    72f8:	ldrh.w	r3, [sp, #6]
    72fc:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    72fe:	ldrb	r3, [r4, #2]
    7300:	and.w	r3, r3, #127	; 0x7f
    7304:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    7306:	ldr	r0, [r4, #8]
    7308:	bl	6d44 <FatPartition::cacheSync()>
    730c:	cmp	r0, #0
    730e:	beq.n	72b8 <FatFile::sync()+0x1c>
    7310:	b.n	72c2 <FatFile::sync()+0x26>
    return true;
    7312:	movs	r0, #1
    7314:	b.n	72c2 <FatFile::sync()+0x26>
    7316:	nop
    7318:	.word	0x200147fc

0000731c <FatFile::close()>:
bool FatFile::close() {
    731c:	push	{r4, lr}
    731e:	mov	r4, r0
  bool rtn = sync();
    7320:	bl	729c <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7324:	movs	r3, #0
    7326:	strb	r3, [r4, #0]
  m_flags = 0;
    7328:	strb	r3, [r4, #2]
}
    732a:	pop	{r4, pc}

0000732c <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    732c:	push	{r4, r5, r6, r7, lr}
    732e:	mov	r7, r3
    7330:	sub	sp, #84	; 0x54
  FatFile() {}
    7332:	movs	r3, #0
    7334:	mov	r6, r0
    7336:	mov	r4, r1
    7338:	str	r2, [sp, #4]
    733a:	str	r3, [sp, #8]
    733c:	strh.w	r3, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    7340:	ldrb	r3, [r0, #0]
    7342:	cbz	r3, 734a <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    7344:	movs	r0, #0
}
    7346:	add	sp, #84	; 0x54
    7348:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    734a:	ldrb	r3, [r1, #0]
    734c:	tst.w	r3, #112	; 0x70
    7350:	beq.n	7344 <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    7352:	ldrb	r3, [r2, #0]
    7354:	cmp	r3, #47	; 0x2f
    7356:	bne.n	737e <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    7358:	ldr	r2, [sp, #4]
    735a:	ldrb	r3, [r2, #0]
    735c:	cmp	r3, #47	; 0x2f
    735e:	beq.n	736c <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    7360:	ldr	r1, [r4, #8]
    if (*path == 0) {
    7362:	cbnz	r3, 7372 <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    7364:	mov	r0, r6
    7366:	bl	6e2e <FatFile::openRoot(FatVolume*)>
    736a:	b.n	7346 <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    736c:	adds	r2, #1
    736e:	str	r2, [sp, #4]
    7370:	b.n	7358 <FatFile::open(FatFile*, char const*, int)+0x2c>
  if (isOpen()) {
    7372:	add	r0, sp, #8
    7374:	bl	6d14 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7378:	cmp	r0, #0
    737a:	beq.n	7344 <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    737c:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    737e:	add	r3, sp, #4
    7380:	add	r2, sp, #44	; 0x2c
    7382:	ldr	r1, [sp, #4]
    7384:	mov	r0, r6
    7386:	bl	8398 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    738a:	cmp	r0, #0
    738c:	beq.n	7344 <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    738e:	ldr	r3, [sp, #4]
    7390:	ldrb	r3, [r3, #0]
    7392:	cbz	r3, 73bc <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7394:	movs	r3, #0
    7396:	add	r2, sp, #44	; 0x2c
    7398:	mov	r1, r4
    739a:	mov	r0, r6
    739c:	bl	8114 <FatFile::open(FatFile*, FatLfn_t*, int)>
    73a0:	cmp	r0, #0
    73a2:	beq.n	7344 <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    73a4:	mov	r5, r6
    73a6:	add	r4, sp, #8
    73a8:	ldmia	r5!, {r0, r1, r2, r3}
    73aa:	stmia	r4!, {r0, r1, r2, r3}
    73ac:	ldmia	r5!, {r0, r1, r2, r3}
    73ae:	stmia	r4!, {r0, r1, r2, r3}
    73b0:	ldr	r3, [r5, #0]
    close();
    73b2:	mov	r0, r6
    tmpDir = *this;
    73b4:	str	r3, [r4, #0]
    close();
    73b6:	bl	731c <FatFile::close()>
  while (1) {
    73ba:	b.n	737c <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    73bc:	mov	r3, r7
    73be:	add	r2, sp, #44	; 0x2c
    73c0:	mov	r1, r4
    73c2:	mov	r0, r6
    73c4:	bl	8114 <FatFile::open(FatFile*, FatLfn_t*, int)>
    73c8:	b.n	7346 <FatFile::open(FatFile*, char const*, int)+0x1a>

000073ca <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    73ca:	cbz	r1, 73d4 <FatFile::open(FatVolume*, char const*, int)+0xa>
    73cc:	add.w	r1, r1, #1096	; 0x448
    73d0:	b.w	732c <FatFile::open(FatFile*, char const*, int)>
}
    73d4:	mov	r0, r1
    73d6:	bx	lr

000073d8 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    73d8:	push	{r4, r5, r6, lr}
    73da:	mov	r6, r0
    73dc:	mov	r4, r1
  if (!sync()) {
    73de:	bl	729c <FatFile::sync()>
    73e2:	mov	r5, r0
    73e4:	cbnz	r0, 73ec <FatFile::dirEntry(DirFat_t*)+0x14>
  return false;
    73e6:	movs	r5, #0
}
    73e8:	mov	r0, r5
    73ea:	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    73ec:	movs	r1, #0
    73ee:	mov	r0, r6
    73f0:	bl	6e10 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    73f4:	mov	r3, r0
    73f6:	cmp	r0, #0
    73f8:	beq.n	73e6 <FatFile::dirEntry(DirFat_t*)+0xe>
  memcpy(dst, dir, sizeof(DirFat_t));
    73fa:	mov	r1, r4
    73fc:	add.w	r2, r0, #32
    7400:	ldr.w	r0, [r3], #4
    7404:	cmp	r3, r2
    7406:	str.w	r0, [r1], #4
    740a:	bne.n	7400 <FatFile::dirEntry(DirFat_t*)+0x28>
    740c:	b.n	73e8 <FatFile::dirEntry(DirFat_t*)+0x10>

0000740e <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    740e:	push	{r4, r5, lr}
    7410:	sub	sp, #36	; 0x24
    7412:	mov	r5, r1
    7414:	mov	r4, r2
  if (!dirEntry(&dir)) {
    7416:	mov	r1, sp
    7418:	bl	73d8 <FatFile::dirEntry(DirFat_t*)>
    741c:	cbz	r0, 742a <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    741e:	ldrh.w	r3, [sp, #16]
    7422:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    7424:	ldrh.w	r3, [sp, #14]
    7428:	strh	r3, [r4, #0]
}
    742a:	add	sp, #36	; 0x24
    742c:	pop	{r4, r5, pc}

0000742e <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    742e:	push	{r4, r5, lr}
    7430:	sub	sp, #36	; 0x24
    7432:	mov	r5, r1
    7434:	mov	r4, r2
  if (!dirEntry(&dir)) {
    7436:	mov	r1, sp
    7438:	bl	73d8 <FatFile::dirEntry(DirFat_t*)>
    743c:	cbz	r0, 744a <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    743e:	ldrh.w	r3, [sp, #24]
    7442:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    7444:	ldrh.w	r3, [sp, #22]
    7448:	strh	r3, [r4, #0]
}
    744a:	add	sp, #36	; 0x24
    744c:	pop	{r4, r5, pc}

0000744e <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    744e:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    7450:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7452:	sub	sp, #36	; 0x24
    7454:	mov	r4, r0
    7456:	mov	r6, r1
  if (!parent->isDir()) {
    7458:	tst.w	r3, #112	; 0x70
    745c:	bne.n	7464 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    745e:	movs	r0, #0
}
    7460:	add	sp, #36	; 0x24
    7462:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7464:	movw	r3, #2562	; 0xa02
    7468:	bl	8114 <FatFile::open(FatFile*, FatLfn_t*, int)>
    746c:	cmp	r0, #0
    746e:	beq.n	745e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    7470:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7472:	movs	r5, #16
  if (!addDirCluster()) {
    7474:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    7476:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7478:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    747a:	bl	6da0 <FatFile::addDirCluster()>
    747e:	cmp	r0, #0
    7480:	beq.n	745e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    7482:	ldr	r3, [r4, #16]
    seekSet(0);
    7484:	movs	r1, #0
    7486:	mov	r0, r4
    7488:	str	r3, [r4, #32]
    748a:	bl	7052 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    748e:	mov	r0, r4
    7490:	bl	729c <FatFile::sync()>
    7494:	cmp	r0, #0
    7496:	beq.n	745e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7498:	mov	r1, r7
    749a:	mov	r0, r4
    749c:	bl	6e10 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    74a0:	cmp	r0, #0
    74a2:	beq.n	745e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    74a4:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    74a6:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    74a8:	mov	r3, r0
    74aa:	add.w	ip, r0, #32
    74ae:	mov	r5, r2
    74b0:	ldr	r0, [r3, #0]
    74b2:	adds	r3, #8
    74b4:	ldr.w	r1, [r3, #-4]
    74b8:	mov	r7, r2
    74ba:	cmp	r3, ip
    74bc:	stmia	r7!, {r0, r1}
    74be:	mov	r2, r7
    74c0:	bne.n	74b0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    74c2:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    74c6:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    74c8:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    74ca:	movs	r2, #1
    dot.name[i] = ' ';
    74cc:	str.w	r3, [sp, #1]
    74d0:	adds	r0, #40	; 0x28
    74d2:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    74d6:	subs	r1, #2
    74d8:	strh.w	r3, [sp, #9]
    74dc:	ldrb.w	r3, [r0, #-34]
    74e0:	lsls	r1, r3
    74e2:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    74e6:	add	r1, r3
    74e8:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    74ec:	mov	r3, r0
    74ee:	cmp	r0, #0
    74f0:	beq.n	745e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    74f2:	movs	r2, #46	; 0x2e
    74f4:	mov	ip, r5
    74f6:	mov	r7, r0
    74f8:	add.w	lr, sp, #32
    74fc:	strb.w	r2, [sp]
    7500:	mov	r2, ip
    7502:	adds	r7, #8
    7504:	ldmia	r2!, {r0, r1}
    7506:	cmp	r2, lr
    7508:	str.w	r0, [r7, #-8]
    750c:	str.w	r1, [r7, #-4]
    7510:	mov	ip, r2
    7512:	bne.n	7500 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    7514:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    7516:	adds	r3, #32
  dot.name[1] = '.';
    7518:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    751c:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    751e:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7520:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7522:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    7526:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7528:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    752c:	mov	r5, r2
    752e:	adds	r3, #8
    7530:	ldmia	r5!, {r0, r1}
    7532:	cmp	r5, r6
    7534:	str.w	r0, [r3, #-8]
    7538:	str.w	r1, [r3, #-4]
    753c:	mov	r2, r5
    753e:	bne.n	752c <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    7540:	ldr	r0, [r4, #8]
    7542:	bl	6d44 <FatPartition::cacheSync()>
    7546:	b.n	7460 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

00007548 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7548:	push	{r4, r5, r6, r7, lr}
    754a:	mov	r7, r3
    754c:	sub	sp, #84	; 0x54
    754e:	movs	r3, #0
    7550:	mov	r6, r0
    7552:	mov	r4, r1
    7554:	str	r2, [sp, #4]
    7556:	strh.w	r3, [sp, #20]
  FatFile() {}
    755a:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    755c:	ldrb	r3, [r0, #0]
    755e:	cbz	r3, 7566 <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    7560:	movs	r0, #0
}
    7562:	add	sp, #84	; 0x54
    7564:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    7566:	ldrb	r3, [r1, #0]
    7568:	tst.w	r3, #112	; 0x70
    756c:	beq.n	7560 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    756e:	ldrb	r3, [r2, #0]
    7570:	cmp	r3, #47	; 0x2f
    7572:	bne.n	758a <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    7574:	ldr	r2, [sp, #4]
    7576:	ldrb	r3, [r2, #0]
    7578:	cmp	r3, #47	; 0x2f
    757a:	beq.n	75c6 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
  if (isOpen()) {
    757c:	ldr	r1, [r4, #8]
    757e:	add	r0, sp, #44	; 0x2c
    7580:	bl	6d14 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7584:	cmp	r0, #0
    7586:	beq.n	7560 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    7588:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    758a:	add	r3, sp, #4
    758c:	add	r2, sp, #8
    758e:	ldr	r1, [sp, #4]
    7590:	mov	r0, r6
    7592:	bl	8398 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7596:	cmp	r0, #0
    7598:	beq.n	7560 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    759a:	ldr	r3, [sp, #4]
    759c:	ldrb	r3, [r3, #0]
    759e:	cbz	r3, 75e0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    75a0:	movs	r3, #0
    75a2:	add	r2, sp, #8
    75a4:	mov	r1, r4
    75a6:	mov	r0, r6
    75a8:	bl	8114 <FatFile::open(FatFile*, FatLfn_t*, int)>
    75ac:	cbz	r0, 75cc <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    75ae:	mov	r5, r6
    75b0:	add	r4, sp, #44	; 0x2c
    75b2:	ldmia	r5!, {r0, r1, r2, r3}
    75b4:	stmia	r4!, {r0, r1, r2, r3}
    75b6:	ldmia	r5!, {r0, r1, r2, r3}
    75b8:	stmia	r4!, {r0, r1, r2, r3}
    75ba:	ldr	r3, [r5, #0]
    close();
    75bc:	mov	r0, r6
    tmpDir = *this;
    75be:	str	r3, [r4, #0]
    close();
    75c0:	bl	731c <FatFile::close()>
  while (1) {
    75c4:	b.n	7588 <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    75c6:	adds	r2, #1
    75c8:	str	r2, [sp, #4]
    75ca:	b.n	7574 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    75cc:	cmp	r7, #0
    75ce:	beq.n	7560 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    75d0:	add	r2, sp, #8
    75d2:	mov	r1, r4
    75d4:	mov	r0, r6
    75d6:	bl	744e <FatFile::mkdir(FatFile*, FatLfn_t*)>
    75da:	cmp	r0, #0
    75dc:	bne.n	75ae <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    75de:	b.n	7560 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    75e0:	add	r2, sp, #8
    75e2:	mov	r1, r4
    75e4:	mov	r0, r6
    75e6:	bl	744e <FatFile::mkdir(FatFile*, FatLfn_t*)>
    75ea:	b.n	7562 <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

000075ec <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    75ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    75f0:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    75f2:	sub	sp, #108	; 0x6c
    75f4:	mov.w	r9, #0
    75f8:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    75fa:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    75fe:	mov	r7, r1
    7600:	mov	r8, r2
    7602:	str.w	r9, [sp, #32]
    7606:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    760a:	bne.n	7614 <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    760c:	movs	r0, #0
}
    760e:	add	sp, #108	; 0x6c
    7610:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    7614:	ldr	r2, [r0, #8]
    7616:	ldr	r3, [r1, #8]
    7618:	cmp	r2, r3
    761a:	bne.n	760c <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    761c:	mov	r6, r4
  sync();
    761e:	bl	729c <FatFile::sync()>
  oldFile = *this;
    7622:	add	r5, sp, #68	; 0x44
    7624:	ldmia	r6!, {r0, r1, r2, r3}
    7626:	stmia	r5!, {r0, r1, r2, r3}
    7628:	ldmia	r6!, {r0, r1, r2, r3}
    762a:	stmia	r5!, {r0, r1, r2, r3}
    762c:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    762e:	mov	r1, r9
    7630:	mov	r0, r4
  oldFile = *this;
    7632:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7634:	bl	6e10 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7638:	cmp	r0, #0
    763a:	beq.n	760c <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    763c:	mov	r2, sp
    763e:	mov	r3, r0
    7640:	add.w	ip, r0, #32
    7644:	mov	r5, r2
    7646:	ldr	r0, [r3, #0]
    7648:	adds	r3, #8
    764a:	ldr.w	r1, [r3, #-4]
    764e:	mov	r6, r2
    7650:	cmp	r3, ip
    7652:	stmia	r6!, {r0, r1}
    7654:	mov	r2, r6
    7656:	bne.n	7646 <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    7658:	ldrb	r3, [r4, #0]
    765a:	add	r6, sp, #32
    765c:	ands.w	r3, r3, #8
    7660:	beq.n	7678 <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7662:	movw	r3, #2561	; 0xa01
    7666:	mov	r2, r8
    7668:	mov	r1, r7
    766a:	mov	r0, r6
    766c:	bl	732c <FatFile::open(FatFile*, char const*, int)>
    7670:	cmp	r0, #0
    7672:	beq.n	760c <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    7674:	movs	r7, #0
    7676:	b.n	7688 <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    7678:	mov	r2, r8
    767a:	mov	r1, r7
    767c:	mov	r0, r6
    767e:	bl	7548 <FatFile::mkdir(FatFile*, char const*, bool)>
    7682:	cmp	r0, #0
    7684:	beq.n	760c <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    7686:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    7688:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    768a:	movs	r1, #1
    768c:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    768e:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    7690:	ldrh.w	r3, [sp, #36]	; 0x24
    7694:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    7696:	ldrb.w	r3, [sp, #35]	; 0x23
    769a:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    769c:	ldr	r3, [sp, #44]	; 0x2c
    769e:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    76a0:	movs	r3, #0
    76a2:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    76a6:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    76aa:	bl	6e10 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    76ae:	cmp	r0, #0
    76b0:	beq.n	760c <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    76b2:	add.w	r3, sp, #13
    76b6:	add.w	r2, r0, #13
    76ba:	add.w	r1, sp, #29
    76be:	ldr.w	ip, [r3], #4
    76c2:	cmp	r3, r1
    76c4:	str.w	ip, [r2], #4
    76c8:	bne.n	76be <FatFile::rename(FatFile*, char const*)+0xd2>
    76ca:	ldrh	r1, [r3, #0]
    76cc:	strh	r1, [r2, #0]
    76ce:	ldrb	r3, [r3, #2]
    76d0:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    76d2:	ldrb.w	r3, [sp, #11]
    76d6:	strb	r3, [r0, #11]
  if (dirCluster) {
    76d8:	cmp	r7, #0
    76da:	beq.n	7758 <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    76dc:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    76de:	subs	r3, r7, #2
    76e0:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    76e2:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    76e4:	ldr.w	r1, [r0, #-20]
    76e8:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    76ea:	movs	r2, #0
    76ec:	add	r1, r3
    76ee:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    76f2:	cmp	r0, #0
    76f4:	beq.n	760c <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    76f6:	add.w	r2, r0, #32
    76fa:	mov	lr, r5
    76fc:	add.w	r3, r0, #64	; 0x40
    7700:	ldr	r0, [r2, #0]
    7702:	adds	r2, #8
    7704:	ldr.w	r1, [r2, #-4]
    7708:	mov	ip, lr
    770a:	cmp	r2, r3
    770c:	stmia.w	ip!, {r0, r1}
    7710:	mov	lr, ip
    7712:	bne.n	7700 <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    7714:	mov	r1, r7
    7716:	ldr	r0, [r4, #8]
    7718:	bl	7b9a <FatPartition::freeChain(unsigned long)>
    771c:	cmp	r0, #0
    771e:	beq.w	760c <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    7722:	ldr	r0, [r4, #8]
    7724:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7726:	ldr	r1, [r4, #32]
    7728:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    772a:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    772c:	subs	r1, #2
    772e:	lsls	r1, r3
    7730:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    7734:	add	r1, r3
    7736:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    773a:	cmp	r0, #0
    773c:	beq.w	760c <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    7740:	add.w	r3, r0, #32
    7744:	mov	r2, r5
    7746:	adds	r3, #8
    7748:	ldmia	r2!, {r0, r1}
    774a:	cmp	r2, r6
    774c:	str.w	r0, [r3, #-8]
    7750:	str.w	r1, [r3, #-4]
    7754:	mov	r5, r2
    7756:	bne.n	7744 <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    7758:	movs	r3, #0
  if (!oldFile.remove()) {
    775a:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    775c:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    775e:	movs	r3, #2
    7760:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    7764:	movs	r3, #8
    7766:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    776a:	bl	8444 <FatFile::remove()>
    776e:	cmp	r0, #0
    7770:	beq.w	760c <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    7774:	ldr	r0, [r4, #8]
    7776:	bl	6d44 <FatPartition::cacheSync()>
    777a:	b.n	760e <FatFile::rename(FatFile*, char const*)+0x22>

0000777c <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    777c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7780:	ldrb	r3, [r0, #2]
    7782:	mov	r4, r0
    7784:	mov	r9, r1
    7786:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    7788:	lsls	r5, r3, #30
    778a:	bpl.n	77c2 <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    778c:	lsls	r1, r3, #28
    778e:	bmi.n	77b8 <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    7790:	ldr	r3, [r4, #20]
    7792:	adds	r3, r3, r7
    7794:	bcs.n	77c2 <FatFile::write(void const*, unsigned int)+0x46>
    7796:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7798:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    779c:	ldr	r3, [r4, #20]
  while (nToWrite) {
    779e:	cmp.w	r8, #0
    77a2:	bne.n	77ce <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    77a4:	ldr	r2, [r4, #28]
    77a6:	cmp	r2, r3
    77a8:	bcs.w	790a <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    77ac:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    77ae:	ldrb	r3, [r4, #2]
    77b0:	orn	r3, r3, #127	; 0x7f
    77b4:	strb	r3, [r4, #2]
    77b6:	b.n	7914 <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    77b8:	ldr	r1, [r0, #28]
    77ba:	bl	7052 <FatFile::seekSet(unsigned long)>
    77be:	cmp	r0, #0
    77c0:	bne.n	7790 <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    77c2:	ldrb	r3, [r4, #1]
  return 0;
    77c4:	movs	r7, #0
  m_error |= WRITE_ERROR;
    77c6:	orr.w	r3, r3, #1
    77ca:	strb	r3, [r4, #1]
  return 0;
    77cc:	b.n	7914 <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    77ce:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    77d0:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    77d4:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    77d6:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    77d8:	ands.w	r6, r6, r3, lsr #9
    77dc:	bne.n	77f4 <FatFile::write(void const*, unsigned int)+0x78>
    77de:	cbnz	r5, 77f4 <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    77e0:	cmp	r1, #0
    77e2:	beq.n	785c <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    77e4:	ldrb	r2, [r4, #2]
    77e6:	lsls	r2, r2, #25
    77e8:	bpl.n	7844 <FatFile::write(void const*, unsigned int)+0xc8>
    77ea:	ldr	r2, [r4, #28]
    77ec:	cmp	r2, r3
    77ee:	bls.n	7844 <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    77f0:	adds	r1, #1
    77f2:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    77f4:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    77f8:	ldr	r1, [r4, #16]
    77fa:	ldrb.w	r3, [ip, #6]
    77fe:	subs	r1, #2
    7800:	lsls	r1, r3
    7802:	ldr.w	r3, [ip, #20]
    7806:	add	r1, r3
                      + sectorOfCluster;
    7808:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    780a:	cmp	r5, #0
    780c:	bne.n	7874 <FatFile::write(void const*, unsigned int)+0xf8>
    780e:	cmp.w	r8, #512	; 0x200
    7812:	bcc.n	7874 <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    7814:	cmp.w	r8, #1024	; 0x400
    7818:	ldr.w	r2, [ip, #52]	; 0x34
    781c:	ldr.w	r0, [ip, #44]	; 0x2c
    7820:	bcs.n	78d4 <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    7822:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    7824:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    7826:	ittt	eq
    7828:	moveq.w	r3, #4294967295
    m_status = 0;
    782c:	strbeq.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7830:	streq.w	r3, [ip, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    7834:	ldr	r3, [r0, #0]
    7836:	ldr	r3, [r3, #36]	; 0x24
    7838:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    783a:	cmp	r0, #0
    783c:	beq.n	77c2 <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    783e:	mov.w	r6, #512	; 0x200
    7842:	b.n	78be <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7844:	mov	r2, sl
    7846:	bl	798a <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    784a:	cmp	r0, #0
    784c:	blt.n	77c2 <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    784e:	bne.n	77f4 <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    7850:	mov	r0, r4
    7852:	bl	6d6a <FatFile::addCluster()>
    7856:	cmp	r0, #0
    7858:	bne.n	77f4 <FatFile::write(void const*, unsigned int)+0x78>
    785a:	b.n	77c2 <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    785c:	ldr	r3, [r4, #32]
    785e:	cbnz	r3, 7870 <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    7860:	mov	r0, r4
    7862:	bl	6d6a <FatFile::addCluster()>
    7866:	cmp	r0, #0
    7868:	beq.n	77c2 <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    786a:	ldr	r3, [r4, #16]
    786c:	str	r3, [r4, #32]
    786e:	b.n	77f4 <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    7870:	str	r3, [r4, #16]
    7872:	b.n	77f4 <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    7874:	rsb	r6, r5, #512	; 0x200
    7878:	cmp	r6, r8
    787a:	it	cs
    787c:	movcs	r6, r8
      if (sectorOffset == 0 &&
    787e:	cbnz	r5, 78cc <FatFile::write(void const*, unsigned int)+0x150>
    7880:	ldr	r2, [r4, #20]
    7882:	ldr	r3, [r4, #28]
    7884:	cmp	r2, r3
    7886:	bcs.n	78d0 <FatFile::write(void const*, unsigned int)+0x154>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    7888:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    788a:	tst.w	r3, #32
    788e:	ite	eq
    7890:	moveq	r2, #1
    7892:	movne	r2, #5
    return m_cache.prepare(sector, options);
    7894:	add.w	r0, ip, #40	; 0x28
    7898:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    789c:	cmp	r0, #0
    789e:	beq.n	77c2 <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    78a0:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    78a2:	add	r5, r6
      memcpy(dst, src, n);
    78a4:	mov	r2, r6
    78a6:	mov	r1, r9
    78a8:	bl	a000 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    78ac:	cmp.w	r5, #512	; 0x200
    78b0:	ldr	r0, [r4, #8]
    78b2:	bne.n	78be <FatFile::write(void const*, unsigned int)+0x142>
    return m_cache.sync();
    78b4:	adds	r0, #40	; 0x28
    78b6:	bl	5400 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    78ba:	cmp	r0, #0
    78bc:	beq.n	77c2 <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    78be:	ldr	r3, [r4, #20]
    src += n;
    78c0:	add	r9, r6
    nToWrite -= n;
    78c2:	sub.w	r8, r8, r6
    m_curPosition += n;
    78c6:	add	r3, r6
    78c8:	str	r3, [r4, #20]
    nToWrite -= n;
    78ca:	b.n	779c <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    78cc:	movs	r2, #1
    78ce:	b.n	7894 <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    78d0:	movs	r2, #5
    78d2:	b.n	7894 <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    78d4:	ldrb.w	r3, [ip, #4]
    78d8:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    78da:	mov.w	r6, r8, lsr #9
    78de:	cmp	r3, r6
    78e0:	it	cs
    78e2:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    78e4:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    78e6:	mov.w	r6, r3, lsl #9
    78ea:	bhi.n	7900 <FatFile::write(void const*, unsigned int)+0x184>
    78ec:	add.w	lr, r1, r3
    78f0:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    78f2:	ittt	hi
    78f4:	movhi.w	r2, #4294967295
    m_status = 0;
    78f8:	strbhi.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    78fc:	strhi.w	r2, [ip, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    7900:	ldr	r2, [r0, #0]
    7902:	ldr	r5, [r2, #40]	; 0x28
    7904:	mov	r2, r9
    7906:	blx	r5
    7908:	b.n	78ba <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    790a:	ldr	r3, [pc, #16]	; (791c <FatFile::write(void const*, unsigned int)+0x1a0>)
    790c:	ldr	r3, [r3, #0]
    790e:	cmp	r3, #0
    7910:	bne.w	77ae <FatFile::write(void const*, unsigned int)+0x32>
}
    7914:	mov	r0, r7
    7916:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    791a:	nop
    791c:	.word	0x200147fc

00007920 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    7920:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    7922:	cmp.w	r3, #256	; 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    7926:	push	{r4, r5, lr}
    7928:	mov	r4, r3
    792a:	it	cs
    792c:	movcs.w	r4, #256	; 0x100
  uint16_t *e = p + n;
    7930:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    7934:	cmp	r1, r5
    7936:	bcc.n	793e <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7938:	subs	r3, r3, r4
    793a:	str	r3, [r2, #0]
}
    793c:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    793e:	ldrh.w	r0, [r1], #2
    7942:	cmp	r0, #0
    7944:	bne.n	7934 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    7946:	ldr	r0, [r2, #4]
    7948:	adds	r0, #1
    794a:	str	r0, [r2, #4]
    794c:	b.n	7934 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

0000794e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    794e:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    7950:	cmp	r3, #128	; 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    7952:	push	{r4, r5, lr}
    7954:	mov	r4, r3
    7956:	it	cs
    7958:	movcs	r4, #128	; 0x80
  uint32_t *e = p + n;
    795a:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    795e:	cmp	r1, r5
    7960:	bcc.n	7968 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7962:	subs	r3, r3, r4
    7964:	str	r3, [r2, #0]
}
    7966:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    7968:	ldr.w	r0, [r1], #4
    796c:	cmp	r0, #0
    796e:	bne.n	795e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    7970:	ldr	r0, [r2, #4]
    7972:	adds	r0, #1
    7974:	str	r0, [r2, #4]
    7976:	b.n	795e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

00007978 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7978:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    797a:	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    797e:	cmp	r3, #2
    7980:	it	eq
    7982:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    7986:	b.w	544e <FsCache::prepare(unsigned long, unsigned char)>

0000798a <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    798a:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    798c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7990:	mov	r6, r0
    7992:	mov	r4, r1
    7994:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7996:	bhi.n	79a0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    7998:	mov.w	r0, #4294967295
}
    799c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    79a0:	ldr	r3, [r0, #28]
    79a2:	cmp	r3, r1
    79a4:	bcc.n	7998 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    79a6:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    79a8:	cmp	r3, #32
    79aa:	bne.n	79d2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    79ac:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    79ae:	movs	r2, #0
    79b0:	add.w	r1, r1, r4, lsr #7
    79b4:	bl	7978 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    79b8:	cmp	r0, #0
    79ba:	beq.n	7998 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    79bc:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    79be:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    79c2:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    79c4:	ldr	r2, [r6, #28]
    79c6:	cmp	r2, r3
  return 1;
    79c8:	itet	cs
    79ca:	movcs	r0, #1
    return 0;
    79cc:	movcc	r0, #0
  *value = next;
    79ce:	strcs	r3, [r7, #0]
  return 1;
    79d0:	b.n	799c <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    79d2:	cmp	r3, #16
    79d4:	bne.n	79f2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    79d6:	ubfx	r1, r1, #8, #8
    79da:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    79dc:	movs	r2, #0
    79de:	add	r1, r3
    79e0:	bl	7978 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    79e4:	cmp	r0, #0
    79e6:	beq.n	7998 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    79e8:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    79ea:	and.w	r4, r4, #510	; 0x1fe
    79ee:	ldrh	r3, [r0, r4]
    79f0:	b.n	79c4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    79f2:	cmp	r3, #12
    79f4:	bne.n	7998 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    79f6:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    79fa:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    79fc:	movs	r2, #0
    index += index >> 1;
    79fe:	uxtah	r8, r8, r1
    7a02:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7a06:	ubfx	r8, r8, #9, #7
    7a0a:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7a0c:	mov	r1, r8
    7a0e:	bl	7978 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7a12:	cmp	r0, #0
    7a14:	beq.n	7998 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    7a16:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    7a1a:	ldrb	r5, [r0, r3]
    index++;
    7a1c:	adds	r3, #1
    if (index == m_bytesPerSector) {
    7a1e:	cmp.w	r3, #512	; 0x200
    7a22:	bne.n	7a36 <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    7a24:	movs	r2, #0
    7a26:	add.w	r1, r8, #1
    7a2a:	mov	r0, r6
    7a2c:	bl	7978 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7a30:	cmp	r0, #0
    7a32:	beq.n	7998 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    7a34:	movs	r3, #0
    tmp |= pc[index] << 8;
    7a36:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7a38:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    7a3a:	orr.w	r3, r5, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7a3e:	ite	mi
    7a40:	lsrmi	r3, r3, #4
    7a42:	ubfxpl	r3, r3, #0, #12
    7a46:	b.n	79c4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

00007a48 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7a48:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7a4a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a4e:	mov	r8, r0
    7a50:	mov	r4, r1
    7a52:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7a54:	bhi.n	7a5c <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    7a56:	movs	r0, #0
}
    7a58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7a5c:	ldr	r3, [r0, #28]
    7a5e:	cmp	r3, r1
    7a60:	bcc.n	7a56 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    7a62:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7a64:	cmp	r3, #32
    7a66:	bne.n	7a84 <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7a68:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7a6a:	movs	r2, #1
    7a6c:	add.w	r1, r1, r4, lsr #7
    7a70:	bl	7978 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7a74:	cmp	r0, #0
    7a76:	beq.n	7a56 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7a78:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    7a7a:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    7a7e:	str	r5, [r0, r4]
    return true;
    7a80:	movs	r0, #1
    7a82:	b.n	7a58 <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    7a84:	cmp	r3, #16
    7a86:	bne.n	7aa4 <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7a88:	ubfx	r1, r1, #8, #8
    7a8c:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7a8e:	movs	r2, #1
    7a90:	add	r1, r3
    7a92:	bl	7978 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7a96:	cmp	r0, #0
    7a98:	beq.n	7a56 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7a9a:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    7a9c:	and.w	r4, r4, #510	; 0x1fe
    7aa0:	strh	r5, [r0, r4]
    return true;
    7aa2:	b.n	7a80 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    7aa4:	cmp	r3, #12
    7aa6:	bne.n	7a56 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    7aa8:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7aac:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7aae:	movs	r2, #1
    index += index >> 1;
    7ab0:	uxtah	r7, r7, r1
    7ab4:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7ab6:	ubfx	r7, r7, #9, #7
    7aba:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7abc:	mov	r1, r7
    7abe:	bl	7978 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7ac2:	cmp	r0, #0
    7ac4:	beq.n	7a56 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    if (cluster & 1) {
    7ac6:	ands.w	r4, r4, #1
    index &= m_sectorMask;
    7aca:	ubfx	r3, r6, #0, #9
      tmp = (pc[index] & 0XF) | tmp << 4;
    7ace:	itt	ne
    7ad0:	lslne	r2, r5, #4
    7ad2:	ldrbne	r1, [r0, r3]
    7ad4:	add.w	r6, r0, r3
    index++;
    7ad8:	add.w	r3, r3, #1
      tmp = (pc[index] & 0XF) | tmp << 4;
    7adc:	ittet	ne
    7ade:	andne.w	r2, r2, #240	; 0xf0
    7ae2:	andne.w	r1, r1, #15
    uint8_t tmp = value;
    7ae6:	uxtbeq	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    7ae8:	orrne	r2, r1
    if (index == m_bytesPerSector) {
    7aea:	cmp.w	r3, #512	; 0x200
    pc[index] = tmp;
    7aee:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    7af0:	bne.n	7b02 <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7af2:	movs	r2, #1
    7af4:	mov	r0, r8
    7af6:	adds	r1, r7, r2
    7af8:	bl	7978 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7afc:	cmp	r0, #0
    7afe:	beq.n	7a56 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    7b00:	movs	r3, #0
    tmp = value >> 4;
    7b02:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7b06:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    7b08:	cbnz	r4, 7b14 <FatPartition::fatPut(unsigned long, unsigned long)+0xcc>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7b0a:	ldrb	r3, [r0, r3]
    7b0c:	bic.w	r3, r3, #15
    7b10:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    7b14:	strb	r5, [r2, #0]
    7b16:	b.n	7a80 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

00007b18 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7b18:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    7b1c:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7b1e:	mov	r5, r0
    7b20:	mov	r6, r1
    7b22:	mov	r8, r2
  if (m_allocSearchStart < current) {
    7b24:	cmp	r4, r1
    7b26:	bcc.n	7b2c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    7b28:	movs	r7, #1
    7b2a:	b.n	7b30 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    7b2c:	mov	r4, r1
    setStart = false;
    7b2e:	movs	r7, #0
    find++;
    7b30:	adds	r4, #1
    if (find > m_lastCluster) {
    7b32:	ldr	r3, [r5, #28]
    7b34:	cmp	r3, r4
    7b36:	bcs.n	7b3e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    7b38:	cbnz	r7, 7b6c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    7b3a:	ldr	r4, [r5, #12]
    7b3c:	b.n	7b28 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    7b3e:	cmp	r6, r4
    7b40:	beq.n	7b6c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    7b42:	add	r2, sp, #4
    7b44:	mov	r1, r4
    7b46:	mov	r0, r5
    7b48:	bl	798a <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7b4c:	cmp	r0, #0
    7b4e:	blt.n	7b6c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    7b50:	beq.n	7b30 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    7b52:	ldr	r3, [sp, #4]
    7b54:	cmp	r3, #0
    7b56:	bne.n	7b30 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    7b58:	cbz	r7, 7b5c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    7b5a:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    7b5c:	mvn.w	r2, #4026531840	; 0xf0000000
    7b60:	mov	r1, r4
    7b62:	mov	r0, r5
    7b64:	bl	7a48 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    7b68:	mov	r7, r0
    7b6a:	cbnz	r0, 7b76 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    7b6c:	movs	r7, #0
}
    7b6e:	mov	r0, r7
    7b70:	add	sp, #8
    7b72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    7b76:	cbnz	r6, 7b84 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
    if (m_freeClusterCount >= 0) {
    7b78:	ldr	r3, [r5, #36]	; 0x24
    7b7a:	cmp	r3, #0
    7b7c:	bge.n	7b94 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
  *next = find;
    7b7e:	str.w	r4, [r8]
  return true;
    7b82:	b.n	7b6e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    7b84:	mov	r2, r4
    7b86:	mov	r1, r6
    7b88:	mov	r0, r5
    7b8a:	bl	7a48 <FatPartition::fatPut(unsigned long, unsigned long)>
    7b8e:	cmp	r0, #0
    7b90:	bne.n	7b78 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    7b92:	b.n	7b6c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      m_freeClusterCount += change;
    7b94:	subs	r3, #1
    7b96:	str	r3, [r5, #36]	; 0x24
    7b98:	b.n	7b7e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>

00007b9a <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    7b9a:	push	{r0, r1, r4, r5, r6, lr}
    7b9c:	mov	r5, r0
    7b9e:	mov	r4, r1
    fg = fatGet(cluster, &next);
    7ba0:	add	r2, sp, #4
    7ba2:	mov	r1, r4
    7ba4:	mov	r0, r5
    7ba6:	bl	798a <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7baa:	subs	r6, r0, #0
    7bac:	blt.n	7bda <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    7bae:	movs	r2, #0
    7bb0:	mov	r1, r4
    7bb2:	mov	r0, r5
    7bb4:	bl	7a48 <FatPartition::fatPut(unsigned long, unsigned long)>
    7bb8:	cbz	r0, 7bda <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    7bba:	ldr	r3, [r5, #36]	; 0x24
    7bbc:	cmp	r3, #0
      m_freeClusterCount += change;
    7bbe:	itt	ge
    7bc0:	addge	r3, #1
    7bc2:	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    7bc4:	ldr	r3, [r5, #12]
    7bc6:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    7bc8:	itt	hi
    7bca:	addhi.w	r4, r4, #4294967295
    7bce:	strhi	r4, [r5, #12]
    cluster = next;
    7bd0:	ldr	r4, [sp, #4]
  } while (fg);
    7bd2:	cmp	r6, #0
    7bd4:	bne.n	7ba0 <FatPartition::freeChain(unsigned long)+0x6>
}
    7bd6:	add	sp, #8
    7bd8:	pop	{r4, r5, r6, pc}
  return false;
    7bda:	movs	r0, #0
    7bdc:	b.n	7bd6 <FatPartition::freeChain(unsigned long)+0x3c>
	...

00007be0 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    7be0:	push	{r4, r5, r6, r7, lr}
    7be2:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    7be4:	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    7be6:	sub	sp, #28
  if (m_freeClusterCount >= 0) {
    7be8:	cmp	r0, #0
    7bea:	bge.n	7c5e <FatPartition::freeClusterCount()+0x7e>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    7bec:	ldrb	r3, [r4, #7]
    7bee:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    7bf0:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    7bf2:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    7bf4:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    7bf8:	beq.n	7c62 <FatPartition::freeClusterCount()+0x82>
    return m_status & CACHE_STATUS_DIRTY;
    7bfa:	ldrb.w	r2, [r4, #568]	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    7bfe:	ldr	r3, [r4, #16]
    if (isDirty() && !sync()) {
    7c00:	lsls	r2, r2, #31
  state.clusters_to_do = m_lastCluster + 1;
    7c02:	strd	r6, r5, [sp, #16]
    7c06:	bmi.n	7c66 <FatPartition::freeClusterCount()+0x86>
    m_status = 0;
    7c08:	movs	r2, #0
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    7c0a:	ldrb	r5, [r4, #7]
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7c0c:	ldr	r0, [r4, #0]
    7c0e:	add	r6, sp, #16
    7c10:	strb.w	r2, [r4, #568]	; 0x238
  if (fatType() == FAT_TYPE_FAT32) {
    7c14:	cmp	r5, #32
    m_sector = 0XFFFFFFFF;
    7c16:	mov.w	r2, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7c1a:	ldr	r1, [r4, #24]
    7c1c:	ldr	r5, [r0, #0]
    7c1e:	str.w	r2, [r4, #580]	; 0x244
    return m_buffer;
    7c22:	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
    7c26:	bne.n	7c78 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7c28:	str	r6, [sp, #4]
    7c2a:	ldr	r6, [pc, #84]	; (7c80 <FatPartition::freeClusterCount()+0xa0>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7c2c:	str	r6, [sp, #0]
    7c2e:	ldr	r5, [r5, #24]
    7c30:	blx	r5
    7c32:	cbz	r0, 7c48 <FatPartition::freeClusterCount()+0x68>
  }

  setFreeClusterCount(state.free_count);
    7c34:	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    7c36:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
    7c38:	b.n	7c5e <FatPartition::freeClusterCount()+0x7e>
      int8_t fg = fatGet(i, &c);
    7c3a:	add	r2, sp, #16
    7c3c:	mov	r1, r7
    7c3e:	mov	r0, r4
    7c40:	bl	798a <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    7c44:	cmp	r0, #0
    7c46:	bge.n	7c4e <FatPartition::freeClusterCount()+0x6e>
  if (buf == nullptr) return -1;
    7c48:	mov.w	r0, #4294967295
    7c4c:	b.n	7c5e <FatPartition::freeClusterCount()+0x7e>
      if (fg && c == 0) {
    7c4e:	beq.n	7c56 <FatPartition::freeClusterCount()+0x76>
    7c50:	ldr	r3, [sp, #16]
    7c52:	cbnz	r3, 7c56 <FatPartition::freeClusterCount()+0x76>
        free++;
    7c54:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    7c56:	adds	r7, #1
    7c58:	cmp	r7, r6
    7c5a:	bcc.n	7c3a <FatPartition::freeClusterCount()+0x5a>
    return free;
    7c5c:	mov	r0, r5
}
    7c5e:	add	sp, #28
    7c60:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    7c62:	movs	r7, #2
    7c64:	b.n	7c58 <FatPartition::freeClusterCount()+0x78>
    if (isDirty() && !sync()) {
    7c66:	add.w	r0, r4, #568	; 0x238
    7c6a:	str	r3, [sp, #12]
    7c6c:	bl	5400 <FsCache::sync()>
    7c70:	ldr	r3, [sp, #12]
    7c72:	cmp	r0, #0
    7c74:	bne.n	7c08 <FatPartition::freeClusterCount()+0x28>
    7c76:	b.n	7c48 <FatPartition::freeClusterCount()+0x68>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7c78:	str	r6, [sp, #4]
    7c7a:	ldr	r6, [pc, #8]	; (7c84 <FatPartition::freeClusterCount()+0xa4>)
    7c7c:	b.n	7c2c <FatPartition::freeClusterCount()+0x4c>
    7c7e:	nop
    7c80:	.word	0x0000794f
    7c84:	.word	0x00007921

00007c88 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7c88:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    7c8a:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7c8c:	mov	r4, r0
  m_blockDev = dev;
    7c8e:	str	r1, [r0, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    7c90:	mov	r5, r2
  m_fatType = 0;
    7c92:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    7c94:	movs	r0, #1
  m_cache.init(dev);
    7c96:	add.w	r6, r4, #40	; 0x28
    m_blockDev = blockDev;
    7c9a:	str	r1, [r4, #44]	; 0x2c
  m_allocSearchStart = 1;
    7c9c:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    7c9e:	mov.w	r0, #4294967295
    m_status = 0;
    7ca2:	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7ca6:	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    7ca8:	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    7cac:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    7cb0:	str.w	r0, [r4, #580]	; 0x244
  if (part) {
    7cb4:	cbz	r2, 7cea <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    7cb6:	cmp	r2, #4
    7cb8:	bls.n	7cbe <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    7cba:	movs	r0, #0
}
    7cbc:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    7cbe:	add.w	r5, r5, #268435456	; 0x10000000
    return m_cache.prepare(sector, options);
    7cc2:	mov	r2, r3
    7cc4:	mov	r1, r3
    7cc6:	mov	r0, r6
    7cc8:	subs	r5, #1
    7cca:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
    7cce:	add.w	r3, r0, #446	; 0x1be
    7cd2:	lsls	r2, r5, #4
    7cd4:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    7cd8:	cmp	r0, #0
    7cda:	beq.n	7cba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7cdc:	ldrb	r1, [r5, #4]
    7cde:	cmp	r1, #0
    7ce0:	beq.n	7cba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7ce2:	ldrb	r3, [r3, r2]
    7ce4:	lsls	r3, r3, #25
    7ce6:	bne.n	7cba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    7ce8:	ldr	r5, [r5, #8]
    7cea:	movs	r2, #0
    7cec:	mov	r1, r5
    7cee:	mov	r0, r6
    7cf0:	bl	544e <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    7cf4:	cmp	r0, #0
    7cf6:	beq.n	7cba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7cf8:	ldrh.w	r3, [r0, #11]
    7cfc:	cmp.w	r3, #512	; 0x200
    7d00:	bne.n	7cba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    7d02:	ldrb	r3, [r0, #16]
    7d04:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    7d06:	subs	r3, #1
    7d08:	cmp	r3, #1
    7d0a:	bhi.n	7cba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7d0c:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7d0e:	movs	r6, #9
    7d10:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7d12:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7d14:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7d16:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7d18:	movs	r3, #1
    7d1a:	cmp	r1, r3
    7d1c:	bne.n	7d86 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfe>
    7d1e:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    7d20:	ldrh	r3, [r0, #22]
    7d22:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    7d24:	cbnz	r3, 7d2a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    7d26:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    7d28:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7d2a:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    7d2c:	ldrh.w	r1, [r0, #17]
    7d30:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7d32:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    7d34:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7d36:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7d38:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7d3a:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7d3c:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7d40:	mla	r3, r6, r7, r3
    7d44:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    7d46:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    7d4a:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    7d4e:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    7d50:	cbnz	r1, 7d54 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xcc>
  return *reinterpret_cast<const uint32_t*>(src);
    7d52:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    7d54:	subs	r5, r5, r3
    7d56:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    7d58:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    7d5a:	adds	r3, r5, #1
    7d5c:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    7d5e:	mov.w	r3, #4294967295
    7d62:	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    7d64:	movw	r3, #4084	; 0xff4
    7d68:	cmp	r5, r3
    7d6a:	bls.n	7d98 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
  } else if (clusterCount < 65525) {
    7d6c:	movw	r3, #65524	; 0xfff4
    7d70:	cmp	r5, r3
    7d72:	bls.n	7d9c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    7d74:	ldr	r3, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    7d76:	str	r3, [r4, #32]
    7d78:	movs	r3, #32
  return true;
    7d7a:	movs	r0, #1
    m_fatType = 12;
    7d7c:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    7d7e:	str	r6, [r4, #48]	; 0x30
    7d80:	str.w	r6, [r4, #576]	; 0x240
  return true;
    7d84:	b.n	7cbc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    if (tmp == 0) {
    7d86:	subs	r6, #1
    7d88:	bne.n	7d8e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x106>
    7d8a:	strb	r2, [r4, #6]
    7d8c:	b.n	7cba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    m_sectorsPerClusterShift++;
    7d8e:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7d90:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    7d92:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7d94:	uxtb	r3, r3
    7d96:	b.n	7d1a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x92>
    7d98:	movs	r3, #12
    7d9a:	b.n	7d7a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>
    7d9c:	movs	r3, #16
    7d9e:	b.n	7d7a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>

00007da0 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    7da0:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    7da2:	add.w	r4, r0, #1096	; 0x448
    7da6:	sub	sp, #40	; 0x28
  FatFile() {}
    7da8:	movs	r3, #0
    7daa:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    7dac:	add	r0, sp, #4
    7dae:	mov	r1, r4
    7db0:	str	r3, [sp, #4]
    7db2:	bl	732c <FatFile::open(FatFile*, char const*, int)>
    7db6:	mov	r6, r0
    7db8:	cbz	r0, 7dd6 <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    7dba:	ldrb.w	r3, [sp, #4]
    7dbe:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    7dc2:	itett	ne
    7dc4:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    7dc6:	moveq	r6, r3
  m_vwd = dir;
    7dc8:	ldmiane	r5!, {r0, r1, r2, r3}
    7dca:	stmiane	r4!, {r0, r1, r2, r3}
    7dcc:	itttt	ne
    7dce:	ldmiane	r5!, {r0, r1, r2, r3}
    7dd0:	stmiane	r4!, {r0, r1, r2, r3}
    7dd2:	ldrne	r3, [r5, #0]
    7dd4:	strne	r3, [r4, #0]
}
    7dd6:	mov	r0, r6
    7dd8:	add	sp, #40	; 0x28
    7dda:	pop	{r4, r5, r6, pc}

00007ddc <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    7ddc:	subs	r1, r0, #1
    7dde:	add.w	r3, r0, #10
    uint8_t sum = 0;
    7de2:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7de4:	lsls	r2, r0, #7
    7de6:	orr.w	r2, r2, r0, lsr #1
    7dea:	ldrb.w	r0, [r1, #1]!
    7dee:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    7df2:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7df4:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    7df6:	bne.n	7de4 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    7df8:	bx	lr

00007dfa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7dfa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7dfe:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7e00:	sub	sp, #52	; 0x34
    7e02:	mov	r6, r2
    7e04:	mov	r7, r0
    7e06:	mov	r9, r1
    7e08:	mov	r8, r3
  FatFile dir = *this;
    7e0a:	add	r4, sp, #12
    7e0c:	ldmia	r5!, {r0, r1, r2, r3}
    7e0e:	stmia	r4!, {r0, r1, r2, r3}
    7e10:	ldmia	r5!, {r0, r1, r2, r3}
    7e12:	stmia	r4!, {r0, r1, r2, r3}
    7e14:	ldr	r3, [r5, #0]
    7e16:	str	r3, [r4, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7e18:	movs	r4, #1
    next = begin;
    7e1a:	ldr	r3, [r6, #0]
    7e1c:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    7e1e:	movs	r3, #0
    7e20:	strh	r3, [r6, #12]
    7e22:	cmp	r4, r8
    7e24:	bls.n	7e2a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    7e26:	movs	r0, #1
    7e28:	b.n	7e3c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    7e2a:	sub.w	r1, r9, r4
    7e2e:	add	r0, sp, #12
    7e30:	uxth	r1, r1
    7e32:	bl	6b60 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7e36:	mov	sl, r0
    7e38:	cbnz	r0, 7e42 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>

 fail:
  return false;
    7e3a:	movs	r0, #0
}
    7e3c:	add	sp, #52	; 0x34
    7e3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e42:	movs	r5, #0
      uint16_t u = getLfnChar(ldir, i);
    7e44:	uxtb	r2, r5
    7e46:	mov	r1, sl
    7e48:	mov	r0, r7
    7e4a:	bl	6b7a <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    7e4e:	ldrh	r3, [r6, #12]
    7e50:	mov	fp, r0
    7e52:	cbnz	r3, 7e64 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
    7e54:	ldrd	r2, r3, [r6, #4]
    7e58:	cmp	r2, r3
    7e5a:	bne.n	7e64 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
        return u == 0;
    7e5c:	clz	r0, r0
    7e60:	lsrs	r0, r0, #5
    7e62:	b.n	7e3c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    7e64:	mov	r0, r6
    7e66:	bl	5544 <FsName::get16()>
    7e6a:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    7e6c:	mov	r0, fp
    7e6e:	bl	549c <toUpcase(unsigned short)>
    7e72:	ldr	r3, [sp, #4]
    7e74:	mov	fp, r0
    7e76:	mov	r0, r3
    7e78:	bl	549c <toUpcase(unsigned short)>
    7e7c:	cmp	fp, r0
    7e7e:	bne.n	7e3a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    7e80:	adds	r5, #1
    7e82:	cmp	r5, #13
    7e84:	bne.n	7e44 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4a>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7e86:	adds	r4, #1
    7e88:	uxtb	r4, r4
    7e8a:	b.n	7e22 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

00007e8c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7e8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7e90:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7e92:	sub	sp, #52	; 0x34
    7e94:	mov	r4, r2
    7e96:	mov	r9, r1
    7e98:	mov	r7, r3
  FatFile dir = *this;
    7e9a:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7e9c:	mov.w	sl, #15
  FatFile dir = *this;
    7ea0:	ldmia	r5!, {r0, r1, r2, r3}
    7ea2:	stmia	r6!, {r0, r1, r2, r3}
    7ea4:	ldmia	r5!, {r0, r1, r2, r3}
    7ea6:	stmia	r6!, {r0, r1, r2, r3}
    7ea8:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    7eaa:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7eae:	movs	r5, #1
  FatFile dir = *this;
    7eb0:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    7eb2:	bl	7ddc <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    7eb6:	movs	r6, #0
    next = begin;
    7eb8:	ldr	r3, [r4, #0]
    7eba:	mov	r8, r0
    7ebc:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    7ebe:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7ec0:	cmp	r5, r7
    7ec2:	bls.n	7ecc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    7ec4:	movs	r0, #1

 fail:
  return false;
}
    7ec6:	add	sp, #52	; 0x34
    7ec8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    7ecc:	sub.w	r1, r9, r5
    7ed0:	add	r0, sp, #12
    7ed2:	uxth	r1, r1
    7ed4:	bl	6b60 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7ed8:	cmp	r0, #0
    7eda:	beq.n	7ec6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    7edc:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7ede:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    7ee0:	mov.w	r1, #0
    7ee4:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    7ee8:	ldrb.w	r3, [r2, #40]	; 0x28
    7eec:	orr.w	r3, r3, #1
    7ef0:	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7ef4:	ite	eq
    7ef6:	orreq.w	r3, r5, #64	; 0x40
    7efa:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7efc:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    7f00:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7f02:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    7f04:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7f08:	strh	r1, [r0, #26]
    return !ls && next == end;
    7f0a:	ldrh	r0, [r4, #12]
    7f0c:	cbnz	r0, 7f3a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
    7f0e:	ldrd	r2, r3, [r4, #4]
    7f12:	cmp	r2, r3
    7f14:	bne.n	7f3a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
        cp = fc++ ? 0XFFFF : 0;
    7f16:	cbz	r6, 7f46 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
    7f18:	adds	r6, #1
    7f1a:	movw	r0, #65535	; 0xffff
    7f1e:	uxtb	r6, r6
  if (i < 5) {
    7f20:	cmp	r1, #4
    7f22:	uxtb	r3, r1
    7f24:	bhi.n	7f4a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbe>
    7f26:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    7f2a:	adds	r1, #1
    7f2c:	add.w	fp, fp, #2
    7f30:	cmp	r1, #13
    7f32:	bne.n	7f0a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7f34:	adds	r5, #1
    7f36:	uxtb	r5, r5
    7f38:	b.n	7ec0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    7f3a:	mov	r0, r4
    7f3c:	str	r1, [sp, #4]
    7f3e:	bl	5544 <FsName::get16()>
    7f42:	ldr	r1, [sp, #4]
    7f44:	b.n	7f20 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
    7f46:	movs	r6, #1
    7f48:	b.n	7f20 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    7f4a:	cmp	r3, #10
    7f4c:	ite	ls
    7f4e:	strhls.w	r0, [fp, #3]
    7f52:	strhhi.w	r0, [fp, #5]
}
    7f56:	b.n	7f2a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9e>

00007f58 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    7f58:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    7f5a:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    7f5e:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    7f62:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    7f66:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    7f68:	mov	r5, r0
    fname->sfn[k] = ' ';
    7f6a:	str.w	r1, [r0, #22]
    7f6e:	str	r1, [r2, #4]
    7f70:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    7f74:	ldrb	r0, [r3, #0]
    7f76:	subs	r0, #46	; 0x2e
    7f78:	it	ne
    7f7a:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    7f7c:	mov	r7, r3
    7f7e:	ldrb.w	r2, [r3], #1
    7f82:	cmp	r2, #46	; 0x2e
    7f84:	beq.n	7f7c <FatFile::makeSFN(FatLfn_t*)+0x24>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    7f86:	subs	r3, r6, #1
    7f88:	cmp	r3, r7
    7f8a:	mov	lr, r3
    7f8c:	bls.n	7f96 <FatFile::makeSFN(FatLfn_t*)+0x3e>
    7f8e:	ldrb.w	r2, [r3], #-1
    7f92:	cmp	r2, #46	; 0x2e
    7f94:	bne.n	7f88 <FatFile::makeSFN(FatLfn_t*)+0x30>
    7f96:	movs	r2, #0
    7f98:	mov.w	ip, #7
    7f9c:	mov.w	r9, #8
    7fa0:	mov	r1, r2
    7fa2:	mov	r8, r2
    7fa4:	b.n	7fbc <FatFile::makeSFN(FatLfn_t*)+0x64>

  for (; ptr < end; ptr++) {
    c = *ptr;
    7fa6:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    7fa8:	cmp	r3, #46	; 0x2e
    7faa:	bne.n	7fd8 <FatFile::makeSFN(FatLfn_t*)+0x80>
    7fac:	cmp	lr, r7
    7fae:	bne.n	7ff4 <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;  // Max index for full 8.3 name.
    7fb0:	mov.w	ip, #10
      i = 8;    // Place for extension.
    7fb4:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    7fb6:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    7fba:	adds	r7, #1
    7fbc:	cmp	r7, r6
    7fbe:	bcc.n	7fa6 <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7fc0:	ldrb	r3, [r5, #22]
    7fc2:	cmp	r3, #32
    7fc4:	beq.n	8078 <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    7fc6:	cmp	r0, #0
    7fc8:	beq.n	8064 <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7fca:	tst.w	r8, r2
    7fce:	it	ne
    7fd0:	movne	r2, #2
    7fd2:	strb	r2, [r5, #21]
  }
  return true;

 fail:
  return false;
}
    7fd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    7fd8:	cmp	r3, #34	; 0x22
    7fda:	beq.n	7ff4 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    7fdc:	cmp	r3, #124	; 0x7c
    7fde:	beq.n	7ff4 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    7fe0:	sub.w	r4, r3, #91	; 0x5b
    7fe4:	cmp	r4, #2
    7fe6:	bls.n	7ff4 <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    7fe8:	sub.w	r4, r3, #42	; 0x2a
    7fec:	cmp	r4, #5
    7fee:	bhi.n	7ffe <FatFile::makeSFN(FatLfn_t*)+0xa6>
    7ff0:	cmp	r3, #45	; 0x2d
    7ff2:	beq.n	801a <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    7ff4:	cmp	r1, ip
    7ff6:	bhi.n	801e <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    7ff8:	movs	r0, #0
        c = '_';
    7ffa:	movs	r3, #95	; 0x5f
    7ffc:	b.n	8040 <FatFile::makeSFN(FatLfn_t*)+0xe8>
    7ffe:	sub.w	r4, r3, #58	; 0x3a
    8002:	cmp	r4, #5
    8004:	bls.n	800e <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    8006:	sub.w	r4, r3, #33	; 0x21
    800a:	cmp	r4, #93	; 0x5d
    800c:	bls.n	801a <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    800e:	and.w	r3, r3, #192	; 0xc0
    8012:	cmp	r3, #128	; 0x80
    8014:	bne.n	7ff4 <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    8016:	movs	r0, #0
    8018:	b.n	7fba <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    801a:	cmp	r1, ip
    801c:	bls.n	802e <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    801e:	cmp.w	ip, #10
    8022:	beq.n	8060 <FatFile::makeSFN(FatLfn_t*)+0x108>
    8024:	cmp	lr, r7
    8026:	bcc.n	8060 <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    8028:	add.w	r7, lr, #4294967295
        continue;
    802c:	b.n	8016 <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    802e:	sub.w	r4, r3, #97	; 0x61
    8032:	cmp	r4, #25
    8034:	bhi.n	8052 <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    8036:	subs	r3, #32
        lc |= bit;
    8038:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    803c:	uxtb	r3, r3
        lc |= bit;
    803e:	uxtb	r2, r2
      fname->sfn[i++] = c;
    8040:	adds	r4, r1, #1
    8042:	add	r1, r5
    8044:	uxtb	r4, r4
    8046:	strb	r3, [r1, #22]
      if (i < 7) {
    8048:	cmp	r4, #6
    804a:	bhi.n	804e <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    804c:	strb	r4, [r5, #20]
    804e:	mov	r1, r4
    8050:	b.n	7fba <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    8052:	sub.w	r4, r3, #65	; 0x41
    8056:	cmp	r4, #25
        uc |= bit;
    8058:	it	ls
    805a:	orrls.w	r8, r9, r8
    805e:	b.n	8040 <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    8060:	movs	r0, #0
    8062:	b.n	7fc0 <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    8064:	ldrb	r3, [r5, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8066:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    8068:	movs	r1, #126	; 0x7e
    806a:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    806c:	strb	r2, [r5, #21]
  return true;
    806e:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    8070:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    8072:	movs	r1, #49	; 0x31
    8074:	strb	r1, [r3, #23]
    8076:	b.n	7fd4 <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    8078:	movs	r0, #0
    807a:	b.n	7fd4 <FatFile::makeSFN(FatLfn_t*)+0x7c>

0000807c <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    807c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8080:	mov	r7, r0
    8082:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    8084:	ldrb	r6, [r1, #20]
    8086:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    8088:	mov.w	sl, #0
    808c:	ldr.w	r8, [pc, #128]	; 8110 <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8090:	add.w	r9, r1, #22
    8094:	ldr.w	r3, [r8]
    8098:	cmp	r6, #3
    hex += millis();
    809a:	add	r3, sl
    809c:	it	cs
    809e:	movcs	r6, #3
    80a0:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    80a4:	adds	r3, r6, #4
    80a6:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    80a8:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    80ac:	adds	r1, r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    80ae:	subs	r3, #1
      hex >>= 4;
    80b0:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    80b4:	cmp	r2, #9
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    80b6:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    80b8:	ite	ls
    80ba:	addls	r2, #48	; 0x30
    80bc:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    80be:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    80c0:	strb	r2, [r1, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    80c2:	bne.n	80a8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    80c4:	adds	r3, r5, r6
    80c6:	movs	r2, #126	; 0x7e
    seekSet(0);
    80c8:	movs	r1, #0
    80ca:	mov	r0, r7
    80cc:	strb	r2, [r3, #22]
    80ce:	bl	7052 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    80d2:	movs	r1, #1
    80d4:	mov	r0, r7
    80d6:	bl	7014 <FatFile::readDirCache(bool)>
      if (!dir) {
    80da:	mov	r1, r0
    80dc:	cbnz	r0, 80ea <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    80de:	ldrb	r0, [r7, #1]
    80e0:	clz	r0, r0
    80e4:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    80e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    80ea:	ldrb	r3, [r0, #0]
    80ec:	cbz	r3, 810c <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    80ee:	ldrb	r3, [r0, #11]
    80f0:	lsls	r3, r3, #28
    80f2:	bmi.n	80d2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    80f4:	movs	r2, #11
    80f6:	mov	r0, r9
    80f8:	bl	e8c4 <memcmp>
    80fc:	cmp	r0, #0
    80fe:	bne.n	80d2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8100:	subs	r0, r4, #1
    8102:	ands.w	r4, r0, #255	; 0xff
    8106:	bne.n	8094 <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    8108:	mov	r0, r4
 fail:
    810a:	b.n	80e6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    810c:	movs	r0, #1
    810e:	b.n	80e6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    8110:	.word	0x20015374

00008114 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8114:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8118:	vpush	{d8}
    811c:	sub	sp, #44	; 0x2c
    811e:	mov	r5, r1
    8120:	mov	r7, r2
    8122:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    8124:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8126:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    8128:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    812a:	ldrb	r3, [r1, #0]
    812c:	tst.w	r3, #112	; 0x70
    8130:	bne.n	813e <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

 fail:
  return false;
    8132:	movs	r0, #0
}
    8134:	add	sp, #44	; 0x2c
    8136:	vpop	{d8}
    813a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    813e:	ldr	r3, [sp, #28]
    8140:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    8142:	cmp	r3, #0
    8144:	bne.n	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12)/13;
    8146:	ldr	r3, [r2, #16]
    8148:	movs	r2, #13
    seekSet(0);
    814a:	movs	r1, #0
    814c:	mov	r0, r5
    814e:	adds	r3, #12
  uint8_t checksum = 0;
    8150:	mov.w	sl, #0
  nameOrd = (fname->len + 12)/13;
    8154:	udiv	r3, r3, r2
    8158:	uxtb	r3, r3
  uint8_t order = 0;
    815a:	mov	r8, sl
  uint8_t freeFound = 0;
    815c:	mov	r4, sl
  bool fnameFound = false;
    815e:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    8160:	str	r3, [sp, #24]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8162:	ldrb	r3, [r7, #21]
    8164:	lsls	r2, r3, #30
    8166:	itett	ne
    8168:	ldrne	r3, [sp, #24]
    816a:	moveq	r3, #1
    816c:	addne.w	r9, r3, #1
    8170:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    8174:	mov	r9, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8176:	str	r3, [sp, #8]
    8178:	bl	7052 <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    817c:	add.w	r3, r7, #22
  uint16_t freeIndex = 0;
    8180:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8184:	vmov	s16, r3
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8188:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    818a:	movs	r1, #0
    818c:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    818e:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    8192:	bl	7014 <FatFile::readDirCache(bool)>
    if (!dir) {
    8196:	cmp	r0, #0
    8198:	bne.n	825e <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (dirFile->getError()) {
    819a:	ldrb	r3, [r5, #1]
    819c:	cmp	r3, #0
    819e:	bne.n	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    81a0:	ldr	r3, [sp, #16]
    81a2:	lsls	r2, r3, #22
    81a4:	bpl.n	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    81a6:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    81aa:	subs	r3, #1
    81ac:	cmp	r3, #1
    81ae:	bhi.n	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    81b0:	ldr	r3, [sp, #12]
    81b2:	cmp	r4, #0
    81b4:	it	eq
    81b6:	moveq	r3, r6
    81b8:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    81ba:	ldr	r3, [sp, #8]
    81bc:	cmp	r4, r3
    81be:	bcc.w	8342 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22e>
  if (fnameFound) {
    81c2:	cmp.w	fp, #0
    81c6:	bne.w	8378 <FatFile::open(FatFile*, FatLfn_t*, int)+0x264>
  lfnOrd = freeNeed - 1;
    81ca:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    81cc:	mov	r2, r7
    81ce:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    81d0:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    81d2:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    81d4:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    81d8:	uxtab	r6, r3, r6
    81dc:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    81de:	mov	r3, fp
    81e0:	mov	r1, r6
    81e2:	bl	7e8c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    81e6:	cmp	r0, #0
    81e8:	beq.n	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    81ea:	mov	r1, r6
    81ec:	mov	r0, r5
    81ee:	bl	6b60 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    81f2:	mov	r4, r0
    81f4:	cmp	r0, #0
    81f6:	beq.n	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    81f8:	movs	r2, #32
    81fa:	movs	r1, #0
    81fc:	bl	9fbc <memset>
  memcpy(dir->name, fname->sfn, 11);
    8200:	ldr.w	r3, [r7, #22]
    8204:	str	r3, [r4, #0]
    8206:	ldr.w	r3, [r7, #26]
    820a:	str	r3, [r4, #4]
    820c:	ldrh	r3, [r7, #30]
    820e:	strh	r3, [r4, #8]
    8210:	ldrb.w	r3, [r7, #32]
    8214:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    8216:	ldrb	r3, [r7, #21]
    8218:	and.w	r3, r3, #24
    821c:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    821e:	ldr	r3, [pc, #372]	; (8394 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    8220:	ldr	r3, [r3, #0]
    8222:	cmp	r3, #0
    8224:	beq.w	8388 <FatFile::open(FatFile*, FatLfn_t*, int)+0x274>
    FsDateTime::callback(&date, &time, &ms10);
    8228:	add.w	r2, sp, #35	; 0x23
    822c:	add.w	r1, sp, #38	; 0x26
    8230:	add	r0, sp, #36	; 0x24
    8232:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    8234:	ldrh.w	r3, [sp, #36]	; 0x24
    8238:	strh	r3, [r4, #16]
    823a:	ldrh.w	r3, [sp, #38]	; 0x26
    823e:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    8240:	ldrb.w	r3, [sp, #35]	; 0x23
    8244:	strb	r3, [r4, #13]
    8246:	ldr	r3, [sp, #20]
    8248:	ldr	r2, [sp, #20]
    824a:	ldrb.w	r3, [r3, #40]	; 0x28
    824e:	orr.w	r3, r3, #1
    8252:	strb.w	r3, [r2, #40]	; 0x28
  }
    8256:	b.n	8330 <FatFile::open(FatFile*, FatLfn_t*, int)+0x21c>
        fnameFound = true;
    8258:	mov.w	fp, #1
    825c:	b.n	8188 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    825e:	ldrb	r2, [r0, #0]
    8260:	cmp	r2, #229	; 0xe5
    8262:	beq.n	8266 <FatFile::open(FatFile*, FatLfn_t*, int)+0x152>
    8264:	cbnz	r2, 8288 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8266:	ldr	r3, [sp, #12]
    8268:	cmp	r4, #0
    826a:	it	eq
    826c:	moveq	r3, r6
    826e:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    8270:	ldr	r3, [sp, #8]
    8272:	cmp	r4, r3
        freeFound++;
    8274:	itt	cc
    8276:	addcc	r4, #1
    8278:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    827a:	cmp	r2, #0
    827c:	beq.n	81a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    827e:	cmp	r2, #229	; 0xe5
    8280:	bne.n	8290 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
      lfnOrd = 0;
    8282:	mov.w	r9, #0
    8286:	b.n	8188 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    8288:	ldr	r3, [sp, #8]
    828a:	cmp	r4, r3
    828c:	it	cc
    828e:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8290:	cmp	r2, #46	; 0x2e
    8292:	beq.n	8282 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    8294:	ldrb	r1, [r0, #11]
    } else if (isLongName(dir)) {
    8296:	cmp	r1, #15
    8298:	bne.n	82ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x1da>
      if (!lfnOrd) {
    829a:	cmp.w	r9, #0
    829e:	bne.n	82da <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
        order = ldir->order & 0X1F;
    82a0:	and.w	r8, r2, #31
        if (order != nameOrd ||
    82a4:	ldr	r3, [sp, #24]
    82a6:	cmp	r3, r8
    82a8:	bne.w	8188 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    82ac:	ands.w	r9, r2, #64	; 0x40
    82b0:	beq.w	8188 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    82b4:	ldrb.w	sl, [r0, #13]
    82b8:	mov	r9, r3
      if (order == 1) {
    82ba:	cmp.w	r8, #1
    82be:	bne.w	8188 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    82c2:	adds	r1, r6, #1
    82c4:	mov	r3, r9
    82c6:	mov	r2, r7
    82c8:	mov	r0, r5
    82ca:	uxth	r1, r1
    82cc:	bl	7dfa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    82d0:	cmp	r0, #0
    82d2:	it	eq
    82d4:	moveq.w	r9, #0
    82d8:	b.n	8188 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    82da:	add.w	r8, r8, #4294967295
    82de:	uxtb.w	r8, r8
    82e2:	cmp	r2, r8
    82e4:	bne.n	8282 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    82e6:	ldrb	r2, [r0, #13]
    82e8:	cmp	r2, sl
    82ea:	beq.n	82ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a6>
    82ec:	b.n	8282 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    } else if (isFileOrSubdir(dir)) {
    82ee:	lsls	r3, r1, #28
    82f0:	bmi.n	8282 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
      if (lfnOrd) {
    82f2:	cmp.w	r9, #0
    82f6:	beq.n	830e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1fa>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    82f8:	cmp.w	r8, #1
    82fc:	bne.w	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    8300:	bl	7ddc <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    8304:	cmp	r0, sl
    8306:	bne.w	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    830a:	mov	fp, r9
    830c:	b.n	8328 <FatFile::open(FatFile*, FatLfn_t*, int)+0x214>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    830e:	movs	r2, #11
    8310:	vmov	r1, s16
    8314:	bl	e8c4 <memcmp>
    8318:	cmp	r0, #0
    831a:	bne.w	8188 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    831e:	ldrb.w	fp, [r7, #21]
    8322:	ands.w	fp, fp, #1
    8326:	bne.n	8258 <FatFile::open(FatFile*, FatLfn_t*, int)+0x144>
  if (oflag & O_EXCL) {
    8328:	ldr	r3, [sp, #16]
    832a:	lsls	r1, r3, #20
    832c:	bmi.w	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    8330:	ldr	r3, [sp, #16]
    8332:	mov	r2, r6
    8334:	mov	r1, r5
    8336:	ldr	r0, [sp, #28]
    8338:	str.w	fp, [sp]
    833c:	bl	713e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8340:	b.n	8134 <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    8342:	movs	r1, #0
    8344:	mov	r0, r5
    8346:	bl	7014 <FatFile::readDirCache(bool)>
    if (!dir) {
    834a:	cbnz	r0, 8372 <FatFile::open(FatFile*, FatLfn_t*, int)+0x25e>
      if (dirFile->getError()) {
    834c:	ldrb	r3, [r5, #1]
    834e:	cmp	r3, #0
    8350:	bne.w	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    8354:	mov	r0, r5
    8356:	bl	6da0 <FatFile::addDirCluster()>
    835a:	cmp	r0, #0
    835c:	beq.w	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8360:	ldr	r3, [sp, #20]
    8362:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    8364:	add.w	r3, r4, r3, lsl #4
    8368:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    836a:	ldr	r3, [sp, #8]
    836c:	cmp	r3, r4
    836e:	bhi.n	8354 <FatFile::open(FatFile*, FatLfn_t*, int)+0x240>
    8370:	b.n	81c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    8372:	adds	r4, #1
    8374:	uxtb	r4, r4
    8376:	b.n	81ba <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    8378:	mov	r1, r7
    837a:	mov	r0, r5
    837c:	bl	807c <FatFile::makeUniqueSfn(FatLfn_t*)>
    8380:	cmp	r0, #0
    8382:	bne.w	81ca <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    8386:	b.n	8132 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    8388:	movw	r3, #22561	; 0x5821
    838c:	strh	r3, [r4, #16]
    838e:	strh	r3, [r4, #24]
    8390:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    8392:	b.n	8246 <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    8394:	.word	0x200147fc

00008398 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8398:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    839a:	mov	r4, r2
    839c:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    839e:	mov	r0, r1
    83a0:	ldrb.w	r3, [r1], #1
    83a4:	cmp	r3, #32
    83a6:	beq.n	839e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    83a8:	movs	r5, #0
    83aa:	ldr	r7, [pc, #148]	; (8440 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
    path++;
  }
  fname->begin = path;
    83ac:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    83ae:	ldrb	r3, [r0, #0]
    83b0:	cbnz	r3, 8400 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    83b2:	ldr	r3, [r4, #16]
    83b4:	subs	r3, #1
    83b6:	cmp	r3, #254	; 0xfe
    83b8:	bhi.n	83e2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    83ba:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    83bc:	ldrb.w	r3, [r0], #1
    83c0:	cmp	r3, #32
    83c2:	beq.n	83ba <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    83c4:	cmp	r3, #47	; 0x2f
    83c6:	beq.n	83ba <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    83c8:	mov	r0, r4
  *ptr = path;
    83ca:	str	r2, [r6, #0]

 fail:
  return false;
}
    83cc:	add	sp, #12
    83ce:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    83d2:	b.w	7f58 <FatFile::makeSFN(FatLfn_t*)>
    83d6:	subs	r1, #34	; 0x22
    83d8:	uxtb	r1, r1
    83da:	lsr.w	r1, r7, r1
    83de:	lsls	r2, r1, #31
    83e0:	bpl.n	843a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
}
    83e2:	movs	r0, #0
    83e4:	add	sp, #12
    83e6:	pop	{r4, r5, r6, r7, pc}
    83e8:	cmp	r1, #92	; 0x5c
    83ea:	beq.n	83e2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    83ec:	bhi.n	83fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x62>
    83ee:	subs	r1, #62	; 0x3e
    83f0:	cmp	r1, #1
    83f2:	bls.n	83e2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
      fname->len = len;
    83f4:	str	r5, [r4, #16]
      fname->end = path;
    83f6:	str	r0, [r4, #8]
    83f8:	b.n	83ae <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    83fa:	cmp	r1, #124	; 0x7c
    83fc:	beq.n	83e2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    83fe:	b.n	83f4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
  while (*path && !isDirSeparator(*path)) {
    8400:	cmp	r3, #47	; 0x2f
    8402:	beq.n	83b2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8404:	add	r2, sp, #4
    8406:	adds	r1, r0, #4
    8408:	bl	5378 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    840c:	cmp	r0, #0
    840e:	beq.n	83e2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    len += cp <= 0XFFFF ? 1 : 2;
    8410:	ldr	r3, [sp, #4]
    8412:	cmp.w	r3, #65536	; 0x10000
    8416:	ite	cc
    8418:	movcc	r2, #1
    841a:	movcs	r2, #2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    841c:	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    841e:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8420:	bhi.n	83f4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    8422:	cmp	r3, #60	; 0x3c
    8424:	uxtb	r1, r3
    8426:	bhi.n	83e8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    8428:	cmp	r1, #33	; 0x21
    842a:	bhi.n	83d6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    842c:	cmp	r1, #31
    842e:	bls.n	83e2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    if (cp != '.' && cp != ' ') {
    8430:	cmp	r3, #46	; 0x2e
    8432:	beq.n	83ae <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8434:	cmp	r3, #32
    8436:	beq.n	83ae <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8438:	b.n	83f4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    843a:	cmp	r3, #46	; 0x2e
    843c:	b.n	8436 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9e>
    843e:	nop
    8440:	.word	0x05002101

00008444 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8444:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    8448:	movs	r3, #0
    844a:	sub	sp, #40	; 0x28
    844c:	mov	r4, r0
    844e:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8450:	ldrb	r3, [r0, #2]
    8452:	lsls	r2, r3, #30
    8454:	bmi.n	845e <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8456:	movs	r0, #0
}
    8458:	add	sp, #40	; 0x28
    845a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    845e:	ldr	r1, [r0, #32]
    8460:	cmp	r1, #0
    8462:	bne.n	84f0 <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8464:	movs	r1, #1
    8466:	mov	r0, r4
    8468:	bl	6e10 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    846c:	mov	r5, r0
    846e:	cmp	r0, #0
    8470:	beq.n	8456 <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    8472:	bl	7ddc <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    8476:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    8478:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    847a:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    847c:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    847e:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    8480:	ldr	r0, [r4, #8]
  m_flags = 0;
    8482:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    8484:	bl	6d44 <FatPartition::cacheSync()>
    8488:	cmp	r0, #0
    848a:	beq.n	8456 <FatFile::remove()+0x12>
  if (!isLFN()) {
    848c:	ldrb	r3, [r4, #3]
    848e:	cmp	r3, #0
    8490:	beq.n	8458 <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    8492:	mov	r1, r4
    8494:	add	r0, sp, #4
    8496:	bl	6e3a <FatFile::openCluster(FatFile*)>
    849a:	cmp	r0, #0
    849c:	beq.n	8456 <FatFile::remove()+0x12>
    849e:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    84a0:	uxtb.w	r8, r5
    84a4:	ldrb	r3, [r4, #3]
    84a6:	cmp	r3, r8
    84a8:	bcc.n	8456 <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    84aa:	ldrh	r1, [r4, #4]
    84ac:	add	r0, sp, #4
    84ae:	subs	r1, r1, r5
    84b0:	uxth	r1, r1
    84b2:	bl	6b60 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    84b6:	cmp	r0, #0
    84b8:	beq.n	8456 <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    84ba:	ldrb	r3, [r0, #11]
    84bc:	cmp	r3, #15
    84be:	bne.n	8456 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    84c0:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    84c2:	and.w	r3, r2, #31
    84c6:	cmp	r3, r8
    84c8:	bne.n	8456 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    84ca:	ldrb	r3, [r0, #13]
    84cc:	cmp	r3, r6
    84ce:	bne.n	8456 <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    84d0:	strb	r7, [r0, #0]
    if (last) {
    84d2:	adds	r5, #1
    m_vol->cacheDirty();
    84d4:	ldr	r1, [r4, #8]
    if (last) {
    84d6:	uxth	r5, r5
    84d8:	ldrb.w	r3, [r1, #40]	; 0x28
    84dc:	orr.w	r3, r3, #1
    84e0:	strb.w	r3, [r1, #40]	; 0x28
    84e4:	lsls	r3, r2, #25
    84e6:	bpl.n	84a0 <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    84e8:	ldr	r0, [r4, #8]
    84ea:	bl	6d44 <FatPartition::cacheSync()>
    84ee:	b.n	8458 <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    84f0:	ldr	r0, [r0, #8]
    84f2:	bl	7b9a <FatPartition::freeChain(unsigned long)>
    84f6:	cmp	r0, #0
    84f8:	bne.n	8464 <FatFile::remove()+0x20>
    84fa:	b.n	8456 <FatFile::remove()+0x12>

000084fc <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    84fc:	push	{r4, lr}
    84fe:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8500:	ldr	r0, [r0, #56]	; 0x38
    8502:	cbz	r0, 8510 <FsBaseFile::close()+0x14>
    8504:	bl	731c <FatFile::close()>
    8508:	cbz	r0, 8510 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    850a:	movs	r3, #0
    850c:	str	r3, [r4, #56]	; 0x38
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
}
    850e:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    8510:	ldr	r0, [r4, #60]	; 0x3c
    8512:	cbnz	r0, 8518 <FsBaseFile::close()+0x1c>
  return false;
    8514:	movs	r0, #0
    8516:	b.n	850e <FsBaseFile::close()+0x12>
  if (m_xFile && m_xFile->close()) {
    8518:	bl	571e <ExFatFile::close()>
    851c:	cmp	r0, #0
    851e:	beq.n	8514 <FsBaseFile::close()+0x18>
    m_xFile = nullptr;
    8520:	movs	r3, #0
    8522:	str	r3, [r4, #60]	; 0x3c
    return true;
    8524:	b.n	850e <FsBaseFile::close()+0x12>

00008526 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    8526:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    8528:	push	{r4, r5, r6, lr}
    852a:	mov	r6, r0
    852c:	mov	r5, r1
  if (this == &from) return *this;
    852e:	beq.n	8558 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    8530:	bl	84fc <FsBaseFile::close()>
  if (from.m_fFile) {
    8534:	ldr	r4, [r5, #56]	; 0x38
    8536:	cbz	r4, 855c <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8538:	mov	r1, r6
    853a:	movs	r0, #36	; 0x24
    853c:	bl	8758 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    8540:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    8542:	mov	r4, r0
    8544:	strh	r3, [r0, #0]
    8546:	strb	r3, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8548:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    854a:	ldr	r5, [r5, #56]	; 0x38
    854c:	ldmia	r5!, {r0, r1, r2, r3}
    854e:	stmia	r4!, {r0, r1, r2, r3}
    8550:	ldmia	r5!, {r0, r1, r2, r3}
    8552:	stmia	r4!, {r0, r1, r2, r3}
    8554:	ldr	r3, [r5, #0]
    8556:	str	r3, [r4, #0]
}
    8558:	mov	r0, r6
    855a:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    855c:	ldr	r3, [r5, #60]	; 0x3c
    855e:	cmp	r3, #0
    8560:	beq.n	8558 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    8562:	mov	r1, r6
    8564:	movs	r0, #56	; 0x38
    8566:	bl	8758 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    856a:	strb.w	r4, [r0, #49]	; 0x31
    856e:	strh	r4, [r0, #50]	; 0x32
    8570:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    8572:	ldr	r3, [r5, #60]	; 0x3c
    8574:	add.w	r2, r3, #52	; 0x34
    8578:	ldr.w	r1, [r3], #4
    857c:	cmp	r3, r2
    857e:	str.w	r1, [r0], #4
    8582:	bne.n	8578 <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    8584:	b.n	8558 <FsBaseFile::operator=(FsBaseFile const&)+0x32>

00008586 <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    8586:	push	{r0, r1, r4, r5, r6, lr}
    8588:	mov	r4, r0
  if (!vol) {
    858a:	mov	r5, r1
    858c:	cbnz	r1, 8594 <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    858e:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8590:	add	sp, #8
    8592:	pop	{r4, r5, r6, pc}
    8594:	strd	r2, r3, [sp]
  close();
    8598:	bl	84fc <FsBaseFile::close()>
  if (vol->m_fVol) {
    859c:	ldr.w	r6, [r5, #1152]	; 0x480
    85a0:	ldrd	r2, r3, [sp]
    85a4:	cbz	r6, 85cc <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    85a6:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    85a8:	mov	r1, r4
    85aa:	movs	r0, #36	; 0x24
    85ac:	bl	8758 <operator new(unsigned int, unsigned long*)>
    85b0:	strh	r6, [r0, #0]
    85b2:	strb	r6, [r0, #2]
    85b4:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    85b6:	ldr.w	r1, [r5, #1152]	; 0x480
    85ba:	ldrd	r2, r3, [sp]
    85be:	bl	73ca <FatFile::open(FatVolume*, char const*, int)>
    85c2:	cbz	r0, 85c8 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    85c4:	movs	r0, #1
    85c6:	b.n	8590 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    85c8:	str	r0, [r4, #56]	; 0x38
    85ca:	b.n	8590 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    85cc:	ldr.w	r1, [r5, #1156]	; 0x484
    85d0:	strd	r2, r3, [sp]
    85d4:	cmp	r1, #0
    85d6:	beq.n	858e <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    85d8:	mov	r1, r4
    85da:	movs	r0, #56	; 0x38
    85dc:	bl	8758 <operator new(unsigned int, unsigned long*)>
    85e0:	strb.w	r6, [r0, #49]	; 0x31
    85e4:	strh	r6, [r0, #50]	; 0x32
    85e6:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    85e8:	ldr.w	r1, [r5, #1156]	; 0x484
    85ec:	ldrd	r2, r3, [sp]
    85f0:	bl	5ebe <ExFatFile::open(ExFatVolume*, char const*, int)>
    85f4:	cmp	r0, #0
    85f6:	bne.n	85c4 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    85f8:	str	r0, [r4, #60]	; 0x3c
    85fa:	b.n	8590 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

000085fc <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    85fc:	push	{r0, r1, r4, r5, r6, lr}
    85fe:	mov	r5, r1
    8600:	str	r2, [sp, #4]
    8602:	mov	r4, r0
  close();
    8604:	bl	84fc <FsBaseFile::close()>
  if (dir->m_fFile) {
    8608:	ldr	r6, [r5, #56]	; 0x38
    860a:	ldr	r2, [sp, #4]
    860c:	cbz	r6, 8632 <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    860e:	mov	r1, r4
    8610:	movs	r0, #36	; 0x24
    8612:	bl	8758 <operator new(unsigned int, unsigned long*)>
    8616:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8618:	ldr	r2, [sp, #4]
    861a:	strh	r1, [r0, #0]
    861c:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    861e:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8620:	ldr	r1, [r5, #56]	; 0x38
    8622:	bl	7200 <FatFile::openNext(FatFile*, int)>
    8626:	cbz	r0, 862e <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    8628:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    862a:	add	sp, #8
    862c:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    862e:	str	r0, [r4, #56]	; 0x38
    8630:	b.n	862a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    8632:	ldr	r0, [r5, #60]	; 0x3c
    8634:	str	r2, [sp, #4]
    8636:	cmp	r0, #0
    8638:	beq.n	862a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    863a:	mov	r1, r4
    863c:	movs	r0, #56	; 0x38
    863e:	bl	8758 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8642:	ldr	r2, [sp, #4]
    8644:	strb.w	r6, [r0, #49]	; 0x31
    8648:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    864a:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    864c:	ldr	r1, [r5, #60]	; 0x3c
    864e:	bl	5ecc <ExFatFile::openNext(ExFatFile*, int)>
    8652:	cmp	r0, #0
    8654:	bne.n	8628 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    8656:	str	r0, [r4, #60]	; 0x3c
    8658:	b.n	862a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

0000865c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    865c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    8660:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8662:	mov	r4, r0
    8664:	mov	r6, r3
  m_blockDev = blockDev;
    8666:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    866a:	str.w	r7, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    866e:	mov	r1, r0
    8670:	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8674:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    8676:	bl	8758 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    867a:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    867c:	strb.w	r7, [r0, #1092]	; 0x444
    8680:	mov	r5, r0
    8682:	strb.w	r7, [r0, #1145]	; 0x479
    8686:	strh.w	r7, [r0, #1146]	; 0x47a
    868a:	str.w	r0, [r4, #1156]	; 0x484
    868e:	ldr.w	r1, [r4, #1160]	; 0x488
    8692:	ldr.w	r8, [pc, #152]	; 872c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    8696:	bl	6210 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    869a:	cbz	r0, 86cc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    869c:	add.w	r7, r5, #1096	; 0x448
    86a0:	mov	r0, r7
    86a2:	bl	571e <ExFatFile::close()>
    return m_vwd.openRoot(this);
    86a6:	mov	r1, r5
    86a8:	mov	r0, r7
    86aa:	bl	5772 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    86ae:	cbz	r0, 86cc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
    if (setCwv || !m_cwv) {
    86b0:	ldr	r3, [pc, #112]	; (8724 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    86b2:	ldr	r2, [r3, #0]
    86b4:	cbnz	r2, 86b8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    86b6:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    86b8:	cmp.w	r9, #0
    86bc:	bne.n	86c4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    86be:	ldr.w	r3, [r8]
    86c2:	cbnz	r3, 86c8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    m_cwv = this;
    86c4:	str.w	r4, [r8]
  }
  return true;
    86c8:	movs	r0, #1
    86ca:	b.n	871e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
  m_xVol = nullptr;
    86cc:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    86ce:	mov	r1, r4
    86d0:	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    86d4:	str.w	r7, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    86d8:	bl	8758 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    86dc:	movs	r3, #2
    86de:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    86e0:	mov	r2, r6
    86e2:	strb	r3, [r0, #8]
    86e4:	mov	r5, r0
    86e6:	strh.w	r7, [r0, #1096]	; 0x448
    86ea:	strb.w	r7, [r0, #1098]	; 0x44a
    86ee:	str.w	r0, [r4, #1152]	; 0x480
    86f2:	ldr.w	r1, [r4, #1160]	; 0x488
    86f6:	bl	7c88 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    86fa:	cbz	r0, 8714 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    86fc:	add.w	r6, r5, #1096	; 0x448
    8700:	mov	r0, r6
    8702:	bl	731c <FatFile::close()>
    return m_vwd.openRoot(this);
    8706:	mov	r1, r5
    8708:	mov	r0, r6
    870a:	bl	6e2e <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    870e:	cbz	r0, 8714 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
    if (setCwv || !m_cwv) {
    8710:	ldr	r3, [pc, #20]	; (8728 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    8712:	b.n	86b2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    8714:	movs	r0, #0
    8716:	str.w	r0, [r8]
  m_fVol = nullptr;
    871a:	str.w	r0, [r4, #1152]	; 0x480
}
    871e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8722:	nop
    8724:	.word	0x20014800
    8728:	.word	0x20014838
    872c:	.word	0x20014834

00008730 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    8730:	push	{r3, r4, r5, lr}
    8732:	mov	r4, r0
    8734:	mov.w	r5, #1000	; 0x3e8
    8738:	movs	r0, #0
    873a:	strd	r0, r5, [r4, #4]
    873e:	strb	r0, [r4, #12]
    8740:	ldr	r5, [pc, #16]	; (8754 <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    8742:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    8746:	mov	r0, r4
    8748:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    874c:	bl	8586 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    8750:	mov	r0, r4
    8752:	pop	{r3, r4, r5, pc}
    8754:	.word	0x20000554

00008758 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    8758:	mov	r0, r1
    875a:	bx	lr

0000875c <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    875c:	mov.w	r0, #4294967295
    8760:	bx	lr

00008762 <SharedSpiCard::errorCode() const>:
  }
    8762:	ldrb	r0, [r0, #17]
    8764:	bx	lr

00008766 <SharedSpiCard::errorData() const>:
  }
    8766:	ldrb	r0, [r0, #20]
    8768:	bx	lr

0000876a <SharedSpiCard::type() const>:
  }
    876a:	ldrb	r0, [r0, #21]
    876c:	bx	lr

0000876e <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    876e:	movs	r0, #1
    8770:	bx	lr

00008772 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    8772:	ldrb	r0, [r0, #28]
    8774:	bx	lr

00008776 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    8776:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    8778:	push	{r4}
  return readSectors(sector, dst, 1);
    877a:	ldr	r4, [r3, #20]
    877c:	movs	r3, #1
    877e:	mov	ip, r4
}
    8780:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    8784:	bx	ip

00008786 <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8786:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    8788:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    878a:	mov	r4, r0
    878c:	mov	r5, r1
  if (!syncDevice()) {
    878e:	ldr	r3, [r3, #32]
    8790:	blx	r3
    8792:	cbz	r0, 8796 <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    8794:	strb	r5, [r4, #28]
  return true;
}
    8796:	pop	{r3, r4, r5, pc}

00008798 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8798:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    879c:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    879e:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    87a0:	mov	r4, r0
    87a2:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    87a4:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    87a6:	mov	r6, r2
    87a8:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    87ac:	bne.n	87b4 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    87ae:	ldr	r3, [r0, #24]
    87b0:	cmp	r3, r1
    87b2:	beq.n	87c8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    87b4:	ldr	r3, [r4, #0]
    87b6:	mov	r1, r5
    87b8:	mov	r0, r4
    87ba:	ldr	r3, [r3, #96]	; 0x60
    87bc:	blx	r3
    87be:	cbnz	r0, 87c6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    87c0:	movs	r0, #0
}
    87c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    87c6:	str	r5, [r4, #24]
    87c8:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    87cc:	cmp	r5, r8
    87ce:	bne.n	87e8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    87d0:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    87d2:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    87d4:	add	r3, r6
    87d6:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    87d8:	cmp	r0, #0
    87da:	bne.n	87c2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    87dc:	ldr	r3, [r4, #0]
    87de:	mov	r0, r4
    87e0:	ldr	r3, [r3, #100]	; 0x64
}
    87e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    87e6:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    87e8:	mov	r1, r9
    87ea:	mov	r0, r5
    87ec:	blx	r7
    if (!writeData(src)) {
    87ee:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    87f0:	mov	r1, r0
    if (!writeData(src)) {
    87f2:	mov	r0, r4
    87f4:	ldr	r3, [r3, #92]	; 0x5c
    87f6:	adds	r5, #1
    87f8:	blx	r3
    87fa:	cmp	r0, #0
    87fc:	bne.n	87cc <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    87fe:	b.n	87c0 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

00008800 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8800:	bx	lr

00008802 <SharedSpiCard::end()>:
    m_spiDriver.end();
    8802:	adds	r0, #4
    8804:	b.w	9f3c <SdSpiArduinoDriver::end()>

00008808 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8808:	push	{r4, lr}
    880a:	mov	r4, r0
    880c:	movs	r1, #32
    880e:	bl	c6f4 <operator delete(void*, unsigned int)>
    8812:	mov	r0, r4
    8814:	pop	{r4, pc}

00008816 <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    8816:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8818:	ldr	r3, [r0, #0]
    881a:	mov	r1, sp
    881c:	ldr	r3, [r3, #76]	; 0x4c
    881e:	blx	r3
    8820:	cbz	r0, 8868 <SharedSpiCard::sectorCount()+0x52>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8822:	ldrb.w	r3, [sp]
    8826:	ands.w	r3, r3, #192	; 0xc0
    882a:	bne.n	886e <SharedSpiCard::sectorCount()+0x58>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    882c:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8830:	ldrb.w	r0, [sp, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8834:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8838:	ldrb.w	r2, [sp, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    883c:	lsls	r0, r0, #2
    883e:	orr.w	r0, r0, r3, lsl #10
    8842:	ldrb.w	r3, [sp, #8]
    8846:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    884a:	ldrb.w	r3, [sp, #9]
    884e:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8852:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    8854:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8856:	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    885a:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    885e:	and.w	r2, r2, #15
    8862:	add	r3, r2
    8864:	subs	r3, #7
    8866:	lsls	r0, r3
}
    8868:	add	sp, #20
    886a:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    886e:	cmp	r3, #64	; 0x40
    8870:	bne.n	8890 <SharedSpiCard::sectorCount()+0x7a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8872:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8876:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    887a:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    887c:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8880:	add.w	r0, r0, r3, lsl #16
    8884:	ldrb.w	r3, [sp, #8]
    8888:	add.w	r0, r0, r3, lsl #8
    888c:	lsls	r0, r0, #10
    888e:	b.n	8868 <SharedSpiCard::sectorCount()+0x52>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8890:	movs	r0, #0
    8892:	b.n	8868 <SharedSpiCard::sectorCount()+0x52>

00008894 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    8894:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8898:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    889a:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    889c:	mov	r4, r0
    889e:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    88a0:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    88a2:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    88a4:	bne.n	88ac <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    88a6:	ldr	r3, [r0, #24]
    88a8:	cmp	r3, r1
    88aa:	beq.n	88c0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    88ac:	ldr	r3, [r4, #0]
    88ae:	mov	r1, r5
    88b0:	mov	r0, r4
    88b2:	ldr	r3, [r3, #96]	; 0x60
    88b4:	blx	r3
    88b6:	cbnz	r0, 88be <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  return false;
    88b8:	movs	r0, #0
}
    88ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    88be:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    88c0:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    88c2:	cmp	r6, r5
    88c4:	add.w	r1, r7, r5, lsl #9
    88c8:	bne.n	88e2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    88ca:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    88cc:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    88ce:	add	r3, r6
    88d0:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    88d2:	cmp	r0, #0
    88d4:	bne.n	88ba <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    88d6:	ldr	r3, [r4, #0]
    88d8:	mov	r0, r4
    88da:	ldr	r3, [r3, #100]	; 0x64
}
    88dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    88e0:	bx	r3
    if (!writeData(src)) {
    88e2:	ldr	r3, [r4, #0]
    88e4:	mov	r0, r4
    88e6:	ldr	r3, [r3, #92]	; 0x5c
    88e8:	blx	r3
    88ea:	cmp	r0, #0
    88ec:	beq.n	88b8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    88ee:	adds	r5, #1
    88f0:	b.n	88c2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

000088f2 <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    88f2:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    88f4:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    88f6:	mov	r4, r0
  if (!m_spiActive) {
    88f8:	cbnz	r6, 8916 <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    88fa:	adds	r5, r0, #4
    88fc:	mov	r0, r5
    88fe:	bl	9ee0 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    8902:	mov	r1, r6
    8904:	ldrb	r0, [r4, #16]
    8906:	bl	9fb6 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    890a:	movs	r1, #255	; 0xff
    890c:	mov	r0, r5
    890e:	bl	9f6e <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    8912:	movs	r3, #1
    8914:	strb	r3, [r4, #18]
}
    8916:	pop	{r4, r5, r6, pc}

00008918 <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    8918:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    891a:	push	{r0, r1, r4, lr}
    891c:	mov	r4, r0
  if (m_spiActive) {
    891e:	cbz	r3, 893c <SharedSpiCard::spiStop()+0x24>
    sdCsWrite(m_csPin, true);
    8920:	movs	r1, #1
    8922:	ldrb	r0, [r0, #16]
    8924:	bl	9fb6 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8928:	adds	r0, r4, #4
    892a:	movs	r1, #255	; 0xff
    892c:	str	r0, [sp, #4]
    892e:	bl	9f6e <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8932:	ldr	r0, [sp, #4]
    8934:	bl	9eee <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8938:	movs	r3, #0
    893a:	strb	r3, [r4, #18]
}
    893c:	add	sp, #8
    893e:	pop	{r4, pc}

00008940 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    8940:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    8942:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    8944:	mov	r4, r0
  if (m_state == READ_STATE) {
    8946:	cmp	r3, #1
    8948:	beq.n	896c <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    894a:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    894c:	cbnz	r6, 8952 <SharedSpiCard::isBusy()+0x12>
    spiStart();
    894e:	bl	88f2 <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    8952:	adds	r0, r4, #4
    8954:	bl	9f42 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    8958:	subs.w	r5, r0, #255	; 0xff
    895c:	it	ne
    895e:	movne	r5, #1
  if (!spiActive) {
    8960:	cbnz	r6, 8968 <SharedSpiCard::isBusy()+0x28>
    spiStop();
    8962:	mov	r0, r4
    8964:	bl	8918 <SharedSpiCard::spiStop()>
}
    8968:	mov	r0, r5
    896a:	pop	{r4, r5, r6, pc}
    return false;
    896c:	movs	r5, #0
    896e:	b.n	8968 <SharedSpiCard::isBusy()+0x28>

00008970 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    8970:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8972:	ldr	r7, [pc, #96]	; (89d4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    8974:	mov	r4, r0
    8976:	adds	r6, r0, #4
    8978:	ldr	r5, [r7, #0]
    m_endTime = ms + millis16();
    897a:	add.w	r5, r5, #300	; 0x12c
    897e:	uxth	r5, r5
    8980:	mov	r0, r6
    8982:	strd	r1, r2, [sp]
    8986:	bl	9f42 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    898a:	cmp	r0, #255	; 0xff
    898c:	strb	r0, [r4, #20]
    898e:	ldrd	r1, r2, [sp]
    8992:	beq.n	89b4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    8994:	cmp	r0, #254	; 0xfe
    8996:	bne.n	89ca <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    8998:	mov	r0, r6
    899a:	bl	9f4c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    899e:	strb	r0, [r4, #20]
    89a0:	cbnz	r0, 89ce <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    89a2:	mov	r0, r6
    89a4:	bl	9f42 <SdSpiArduinoDriver::receive()>
    89a8:	mov	r0, r6
    89aa:	bl	9f42 <SdSpiArduinoDriver::receive()>
  return true;
    89ae:	movs	r0, #1
}
    89b0:	add	sp, #12
    89b2:	pop	{r4, r5, r6, r7, pc}
    89b4:	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    89b6:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    89b8:	lsls	r3, r3, #16
    89ba:	bpl.n	8980 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    89bc:	movs	r3, #29
  spiStop();
    89be:	mov	r0, r4
    m_errorCode = code;
    89c0:	strb	r3, [r4, #17]
    89c2:	bl	8918 <SharedSpiCard::spiStop()>
  return false;
    89c6:	movs	r0, #0
    89c8:	b.n	89b0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    89ca:	movs	r3, #24
    89cc:	b.n	89be <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    89ce:	movs	r3, #37	; 0x25
    89d0:	b.n	89be <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    89d2:	nop
    89d4:	.word	0x20015374

000089d8 <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    89d8:	mov.w	r2, #512	; 0x200
    89dc:	b.w	8970 <SharedSpiCard::readData(unsigned char*, unsigned int)>

000089e0 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    89e0:	push	{r4, r5, r6, lr}
    89e2:	ldr	r6, [pc, #36]	; (8a08 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    89e4:	adds	r5, r0, #4
    89e6:	ldr	r3, [r6, #0]
    m_endTime = ms + millis16();
    89e8:	add	r1, r3
    89ea:	uxth	r4, r1
    89ec:	mov	r0, r5
    89ee:	bl	9f42 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    89f2:	cmp	r0, #255	; 0xff
    89f4:	bne.n	89fa <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    89f6:	movs	r0, #1
}
    89f8:	pop	{r4, r5, r6, pc}
    89fa:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    89fc:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    89fe:	lsls	r3, r3, #16
    8a00:	bpl.n	89ec <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    8a02:	movs	r0, #0
    8a04:	b.n	89f8 <SharedSpiCard::waitReady(unsigned short)+0x18>
    8a06:	nop
    8a08:	.word	0x20015374

00008a0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    8a0c:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8a0e:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    8a12:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8a14:	mov	r4, r0
    8a16:	str	r2, [sp, #4]
    8a18:	mov	r5, r1
  if (!syncDevice()) {
    8a1a:	blx	r3
    8a1c:	cmp	r0, #0
    8a1e:	beq.n	8a92 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    8a20:	ldrb	r3, [r4, #18]
    8a22:	cbnz	r3, 8a2a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    8a24:	mov	r0, r4
    8a26:	bl	88f2 <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    8a2a:	cmp	r5, #12
    8a2c:	bne.n	8a80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    8a2e:	adds	r6, r4, #4
    8a30:	movs	r7, #3
    spiSend(pa[i]);
    8a32:	add.w	r8, sp, #4
    8a36:	orr.w	r1, r5, #64	; 0x40
    8a3a:	mov	r0, r6
    8a3c:	bl	9f6e <SdSpiArduinoDriver::send(unsigned char)>
    8a40:	ldrb.w	r1, [r8, r7]
    8a44:	mov	r0, r6
    8a46:	bl	9f6e <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    8a4a:	subs	r7, #1
    8a4c:	bcs.n	8a40 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    8a4e:	cmp	r5, #0
    8a50:	mov	r0, r6
    return m_spiDriver.receive();
    8a52:	mov.w	r5, #10
    m_spiDriver.send(data);
    8a56:	ite	eq
    8a58:	moveq	r1, #149	; 0x95
    8a5a:	movne	r1, #135	; 0x87
    8a5c:	bl	9f6e <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8a60:	mov	r0, r6
    8a62:	bl	9f42 <SdSpiArduinoDriver::receive()>
    8a66:	mov	r0, r6
    8a68:	bl	9f42 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    8a6c:	lsls	r3, r0, #24
    m_status = spiReceive();
    8a6e:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    8a70:	bpl.n	8a7a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    8a72:	subs	r5, #1
    8a74:	uxth	r5, r5
    8a76:	cmp	r5, #0
    8a78:	bne.n	8a66 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    8a7a:	add	sp, #8
    8a7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    8a80:	mov.w	r1, #300	; 0x12c
    8a84:	mov	r0, r4
    8a86:	bl	89e0 <SharedSpiCard::waitReady(unsigned short)>
    8a8a:	cmp	r0, #0
    8a8c:	bne.n	8a2e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    8a8e:	cmp	r5, #0
    8a90:	beq.n	8a2e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    8a92:	movs	r0, #255	; 0xff
    8a94:	b.n	8a7a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

00008a96 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8a96:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    8a98:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8a9a:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    8a9c:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8a9e:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    8aa0:	bl	8a0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8aa4:	cbz	r0, 8ab4 <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    8aa6:	movs	r3, #18
  spiStop();
    8aa8:	mov	r0, r4
    8aaa:	strb	r3, [r4, #17]
    8aac:	bl	8918 <SharedSpiCard::spiStop()>
  return false;
    8ab0:	movs	r0, #0
}
    8ab2:	pop	{r3, r4, r5, r6, r7, pc}
    8ab4:	adds	r6, r5, #4
    return m_spiDriver.receive();
    8ab6:	adds	r7, r4, #4
    8ab8:	mov	r0, r7
    8aba:	bl	9f42 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    8abe:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    8ac2:	cmp	r6, r5
    8ac4:	bne.n	8ab8 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    8ac6:	mov	r0, r4
    8ac8:	bl	8918 <SharedSpiCard::spiStop()>
    8acc:	movs	r0, #1
    8ace:	b.n	8ab2 <SharedSpiCard::readOCR(unsigned long*)+0x1c>

00008ad0 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8ad0:	push	{r3, r4, r5, lr}
    8ad2:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    8ad4:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8ad6:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    8ad8:	bl	8a0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8adc:	cbz	r0, 8aec <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    8ade:	movs	r3, #27
    8ae0:	strb	r3, [r4, #17]
  spiStop();
    8ae2:	mov	r0, r4
  return false;
    8ae4:	movs	r5, #0
  spiStop();
    8ae6:	bl	8918 <SharedSpiCard::spiStop()>
  return false;
    8aea:	b.n	8b02 <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    8aec:	mov	r1, r5
    8aee:	movs	r2, #16
    8af0:	mov	r0, r4
    8af2:	bl	8970 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8af6:	mov	r5, r0
    8af8:	cmp	r0, #0
    8afa:	beq.n	8ae2 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    8afc:	mov	r0, r4
    8afe:	bl	8918 <SharedSpiCard::spiStop()>
}
    8b02:	mov	r0, r5
    8b04:	pop	{r3, r4, r5, pc}

00008b06 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    8b06:	mov	r2, r1
    return readRegister(CMD9, csd);
    8b08:	movs	r1, #9
    8b0a:	b.w	8ad0 <SharedSpiCard::readRegister(unsigned char, void*)>

00008b0e <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    8b0e:	mov	r2, r1
    return readRegister(CMD10, cid);
    8b10:	movs	r1, #10
    8b12:	b.w	8ad0 <SharedSpiCard::readRegister(unsigned char, void*)>

00008b16 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    8b16:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8b18:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    8b1a:	mov	r5, r1
    8b1c:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8b1e:	ldr	r3, [r3, #88]	; 0x58
    8b20:	blx	r3
    8b22:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8b24:	mov.w	r1, #18
    8b28:	mov	r0, r4
    sector <<= 9;
    8b2a:	it	ne
    8b2c:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    8b2e:	mov	r2, r5
    8b30:	bl	8a0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8b34:	cbz	r0, 8b44 <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    8b36:	movs	r3, #12
  spiStop();
    8b38:	mov	r0, r4
    8b3a:	strb	r3, [r4, #17]
    8b3c:	bl	8918 <SharedSpiCard::spiStop()>
  return false;
    8b40:	movs	r0, #0
}
    8b42:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    8b44:	movs	r0, #1
    8b46:	strb	r0, [r4, #19]
  return true;
    8b48:	b.n	8b42 <SharedSpiCard::readStart(unsigned long)+0x2c>

00008b4a <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    8b4a:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    8b4c:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    8b4e:	movs	r1, #12
bool SharedSpiCard::readStop() {
    8b50:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    8b52:	mov	r2, r4
  m_state = IDLE_STATE;
    8b54:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    8b56:	bl	8a0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8b5a:	cbz	r0, 8b6a <SharedSpiCard::readStop()+0x20>
    8b5c:	movs	r3, #9
  spiStop();
    8b5e:	mov	r0, r5
    8b60:	strb	r3, [r5, #17]
    8b62:	bl	8918 <SharedSpiCard::spiStop()>
  return false;
    8b66:	mov	r0, r4
}
    8b68:	pop	{r3, r4, r5, pc}
  spiStop();
    8b6a:	mov	r0, r5
    8b6c:	bl	8918 <SharedSpiCard::spiStop()>
  return true;
    8b70:	movs	r0, #1
    8b72:	b.n	8b68 <SharedSpiCard::readStop()+0x1e>

00008b74 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    8b74:	ldrb	r2, [r0, #19]
    8b76:	cmp	r2, #2
    8b78:	bne.n	8b80 <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    8b7a:	ldr	r3, [r0, #0]
    8b7c:	ldr	r3, [r3, #100]	; 0x64
    8b7e:	bx	r3
  if (m_state == READ_STATE) {
    8b80:	cmp	r2, #1
    8b82:	bne.n	8b88 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    8b84:	b.w	8b4a <SharedSpiCard::readStop()>
}
    8b88:	movs	r0, #1
    8b8a:	bx	lr

00008b8c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    8b8c:	push	{r3, r4, r5, r6, r7, lr}
    8b8e:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8b90:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8b92:	mov	r4, r0
    8b94:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8b96:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    8b98:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8b9a:	bne.n	8ba2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    8b9c:	ldr	r3, [r0, #24]
    8b9e:	cmp	r3, r1
    8ba0:	beq.n	8bb2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    8ba2:	mov	r1, r5
    8ba4:	mov	r0, r4
    8ba6:	bl	8b16 <SharedSpiCard::readStart(unsigned long)>
    8baa:	cbnz	r0, 8bb0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    8bac:	movs	r0, #0
}
    8bae:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    8bb0:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8bb2:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8bb4:	cmp	r5, r6
    8bb6:	add.w	r1, r7, r5, lsl #9
    8bba:	bne.n	8bd2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    8bbc:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8bbe:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8bc0:	add	r3, r5
    8bc2:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8bc4:	cmp	r0, #0
    8bc6:	bne.n	8bae <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    8bc8:	mov	r0, r4
}
    8bca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    8bce:	b.w	8b4a <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    8bd2:	mov	r0, r4
    8bd4:	bl	89d8 <SharedSpiCard::readData(unsigned char*)>
    8bd8:	cmp	r0, #0
    8bda:	beq.n	8bac <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8bdc:	adds	r5, #1
    8bde:	b.n	8bb4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

00008be0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8be0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8be4:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8be6:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8be8:	mov	r4, r0
    8bea:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8bec:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8bee:	mov	r7, r2
    8bf0:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    8bf4:	bne.n	8bfc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    8bf6:	ldr	r3, [r0, #24]
    8bf8:	cmp	r3, r1
    8bfa:	beq.n	8c0e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    8bfc:	mov	r1, r5
    8bfe:	mov	r0, r4
    8c00:	bl	8b16 <SharedSpiCard::readStart(unsigned long)>
    8c04:	cbnz	r0, 8c0c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    8c06:	movs	r0, #0
}
    8c08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8c0c:	str	r5, [r4, #24]
    8c0e:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8c12:	cmp	r5, r8
    8c14:	bne.n	8c2c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    8c16:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8c18:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8c1a:	add	r3, r6
    8c1c:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8c1e:	cmp	r0, #0
    8c20:	bne.n	8c08 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    8c22:	mov	r0, r4
}
    8c24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    8c28:	b.w	8b4a <SharedSpiCard::readStop()>
    if (readData(dst)) {
    8c2c:	mov	r1, r7
    8c2e:	mov	r0, r4
    8c30:	bl	89d8 <SharedSpiCard::readData(unsigned char*)>
    8c34:	cmp	r0, #0
    8c36:	beq.n	8c06 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    8c38:	mov	r0, r5
    8c3a:	mov	r2, sl
    8c3c:	mov	r1, r7
    8c3e:	adds	r5, #1
    8c40:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    8c42:	b.n	8c12 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

00008c44 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    8c44:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8c46:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    8c48:	mov	r5, r1
    8c4a:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8c4c:	ldr	r3, [r3, #88]	; 0x58
    8c4e:	blx	r3
    8c50:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8c52:	mov.w	r1, #25
    8c56:	mov	r0, r4
    sector <<= 9;
    8c58:	it	ne
    8c5a:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    8c5c:	mov	r2, r5
    8c5e:	bl	8a0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8c62:	cbz	r0, 8c72 <SharedSpiCard::writeStart(unsigned long)+0x2e>
    8c64:	movs	r3, #14
  spiStop();
    8c66:	mov	r0, r4
    8c68:	strb	r3, [r4, #17]
    8c6a:	bl	8918 <SharedSpiCard::spiStop()>
  return false;
    8c6e:	movs	r0, #0
}
    8c70:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    8c72:	movs	r3, #2
  return true;
    8c74:	movs	r0, #1
  m_state = WRITE_STATE;
    8c76:	strb	r3, [r4, #19]
  return true;
    8c78:	b.n	8c70 <SharedSpiCard::writeStart(unsigned long)+0x2c>

00008c7a <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8c7a:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    8c7c:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8c7e:	mov	r6, r1
  if (!readCSD(&csd)) {
    8c80:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8c82:	mov	r4, r0
  if (!readCSD(&csd)) {
    8c84:	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8c86:	mov	r5, r2
  if (!readCSD(&csd)) {
    8c88:	blx	r3
    8c8a:	cbz	r0, 8cae <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
  if (!csd.v1.erase_blk_en) {
    8c8c:	ldrb.w	r3, [sp, #10]
    8c90:	lsls	r2, r3, #25
    8c92:	bmi.n	8cb8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    8c94:	and.w	r3, r3, #63	; 0x3f
    8c98:	ldrb.w	r2, [sp, #11]
    8c9c:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8c9e:	orr.w	r3, r3, r2, lsr #7
    8ca2:	adds	r2, r5, #1
    8ca4:	orrs	r2, r6
    8ca6:	tst	r3, r2
    8ca8:	beq.n	8cb8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    8caa:	movs	r3, #39	; 0x27
    8cac:	strb	r3, [r4, #17]
  spiStop();
    8cae:	mov	r0, r4
  return false;
    8cb0:	movs	r5, #0
  spiStop();
    8cb2:	bl	8918 <SharedSpiCard::spiStop()>
  return false;
    8cb6:	b.n	8d06 <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    8cb8:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    8cba:	movs	r1, #32
    8cbc:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    8cbe:	cmp	r3, #3
    firstSector <<= 9;
    8cc0:	itt	ne
    8cc2:	lslne	r6, r6, #9
    lastSector <<= 9;
    8cc4:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    8cc6:	mov	r2, r6
    8cc8:	bl	8a0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    8ccc:	cbz	r0, 8cd2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    8cce:	movs	r3, #38	; 0x26
    8cd0:	b.n	8cac <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
      || cardCommand(CMD33, lastSector)
    8cd2:	mov	r2, r5
    8cd4:	movs	r1, #33	; 0x21
    8cd6:	mov	r0, r4
    8cd8:	bl	8a0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8cdc:	mov	r2, r0
    8cde:	cmp	r0, #0
    8ce0:	bne.n	8cce <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      || cardCommand(CMD38, 0)) {
    8ce2:	movs	r1, #38	; 0x26
    8ce4:	mov	r0, r4
    8ce6:	bl	8a0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8cea:	cmp	r0, #0
    8cec:	bne.n	8cce <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    8cee:	movw	r1, #10000	; 0x2710
    8cf2:	mov	r0, r4
    8cf4:	bl	89e0 <SharedSpiCard::waitReady(unsigned short)>
    8cf8:	mov	r5, r0
    8cfa:	cbnz	r0, 8d00 <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    8cfc:	movs	r3, #40	; 0x28
    8cfe:	b.n	8cac <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    8d00:	mov	r0, r4
    8d02:	bl	8918 <SharedSpiCard::spiStop()>
}
    8d06:	mov	r0, r5
    8d08:	add	sp, #16
    8d0a:	pop	{r4, r5, r6, pc}

00008d0c <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    8d0c:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8d0e:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    8d12:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8d14:	bl	89e0 <SharedSpiCard::waitReady(unsigned short)>
    8d18:	mov	r5, r0
    8d1a:	cbnz	r0, 8d2a <SharedSpiCard::writeStop()+0x1e>
    8d1c:	movs	r3, #30
  spiStop();
    8d1e:	mov	r0, r4
    8d20:	strb	r3, [r4, #17]
    8d22:	bl	8918 <SharedSpiCard::spiStop()>
}
    8d26:	mov	r0, r5
    8d28:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    8d2a:	movs	r1, #253	; 0xfd
    8d2c:	adds	r0, r4, #4
    8d2e:	bl	9f6e <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    8d32:	mov	r0, r4
    8d34:	bl	8918 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    8d38:	movs	r3, #0
    8d3a:	strb	r3, [r4, #19]
  return true;
    8d3c:	b.n	8d26 <SharedSpiCard::writeStop()+0x1a>

00008d3e <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    8d3e:	push	{r0, r1, r2, r4, r5, lr}
    8d40:	mov	r5, r2
    8d42:	mov	r4, r0
    8d44:	adds	r0, #4
    8d46:	str	r0, [sp, #4]
    8d48:	bl	9f6e <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    8d4c:	mov.w	r2, #512	; 0x200
    8d50:	mov	r1, r5
    8d52:	ldr	r0, [sp, #4]
    8d54:	bl	9f76 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    8d58:	movs	r1, #255	; 0xff
    8d5a:	ldr	r0, [sp, #4]
    8d5c:	bl	9f6e <SdSpiArduinoDriver::send(unsigned char)>
    8d60:	movs	r1, #255	; 0xff
    8d62:	ldr	r0, [sp, #4]
    8d64:	bl	9f6e <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8d68:	ldr	r0, [sp, #4]
    8d6a:	bl	9f42 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    8d6e:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8d70:	and.w	r0, r0, #31
    8d74:	cmp	r0, #5
    8d76:	beq.n	8d88 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    8d78:	movs	r3, #32
  spiStop();
    8d7a:	mov	r0, r4
    8d7c:	strb	r3, [r4, #17]
    8d7e:	bl	8918 <SharedSpiCard::spiStop()>
  return false;
    8d82:	movs	r0, #0
}
    8d84:	add	sp, #12
    8d86:	pop	{r4, r5, pc}
  return true;
    8d88:	movs	r0, #1
    8d8a:	b.n	8d84 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

00008d8c <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    8d8c:	push	{r0, r1, r4, lr}
    8d8e:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8d90:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    8d94:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8d96:	bl	89e0 <SharedSpiCard::waitReady(unsigned short)>
    8d9a:	ldr	r2, [sp, #4]
    8d9c:	cbnz	r0, 8dac <SharedSpiCard::writeData(unsigned char const*)+0x20>
    8d9e:	movs	r3, #36	; 0x24
    8da0:	strb	r3, [r4, #17]
  spiStop();
    8da2:	mov	r0, r4
    8da4:	bl	8918 <SharedSpiCard::spiStop()>
  return false;
    8da8:	movs	r0, #0
    8daa:	b.n	8db8 <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8dac:	movs	r1, #252	; 0xfc
    8dae:	mov	r0, r4
    8db0:	bl	8d3e <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8db4:	cmp	r0, #0
    8db6:	beq.n	8da2 <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    8db8:	add	sp, #8
    8dba:	pop	{r4, pc}

00008dbc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8dbc:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8dbe:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8dc0:	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8dc2:	mov	r5, r1
    8dc4:	mov	r4, r0
    8dc6:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    8dc8:	blx	r3
    8dca:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    8dcc:	mov.w	r1, #24
    8dd0:	mov	r0, r4
    sector <<= 9;
    8dd2:	it	ne
    8dd4:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    8dd6:	mov	r2, r5
    8dd8:	bl	8a0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8ddc:	cbz	r0, 8dec <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    8dde:	movs	r3, #13
    8de0:	strb	r3, [r4, #17]
  spiStop();
    8de2:	mov	r0, r4
  return false;
    8de4:	movs	r5, #0
  spiStop();
    8de6:	bl	8918 <SharedSpiCard::spiStop()>
  return false;
    8dea:	b.n	8e02 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    8dec:	mov	r2, r6
    8dee:	movs	r1, #254	; 0xfe
    8df0:	mov	r0, r4
    8df2:	bl	8d3e <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8df6:	mov	r5, r0
    8df8:	cmp	r0, #0
    8dfa:	beq.n	8de2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    8dfc:	mov	r0, r4
    8dfe:	bl	8918 <SharedSpiCard::spiStop()>
}
    8e02:	mov	r0, r5
    8e04:	pop	{r4, r5, r6, pc}

00008e06 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8e06:	push	{r4}
  if (m_dedicatedSpi) {
    8e08:	ldrb	r4, [r0, #28]
    8e0a:	cbz	r4, 8e1a <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    8e0c:	ldr	r3, [r0, #0]
    8e0e:	ldr	r4, [r3, #40]	; 0x28
    8e10:	movs	r3, #1
    8e12:	mov	ip, r4
}
    8e14:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    8e18:	bx	ip
}
    8e1a:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    8e1e:	b.w	8dbc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00008e22 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    8e22:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e26:	ldr	r5, [sp, #32]
    8e28:	mov	r6, r0
    8e2a:	mov	r4, r1
    8e2c:	mov	r7, r2
    8e2e:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    8e32:	cmp	r4, r8
    8e34:	bne.n	8e3c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    8e36:	movs	r0, #1
  }
    8e38:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    8e3c:	ldr	r3, [r6, #0]
    8e3e:	mov	r2, r7
    8e40:	mov	r1, r4
    8e42:	mov	r0, r6
    8e44:	ldr	r3, [r3, #16]
    8e46:	add.w	r9, r4, #1
    8e4a:	blx	r3
    8e4c:	cmp	r0, #0
    8e4e:	beq.n	8e38 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    8e50:	mov	r0, r4
    8e52:	ldr	r2, [sp, #36]	; 0x24
    8e54:	mov	r1, r7
    8e56:	mov	r4, r9
    8e58:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    8e5a:	b.n	8e32 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

00008e5c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    8e5c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e60:	mov	r5, r0
    8e62:	mov	r4, r1
    8e64:	mov	r7, r3
    8e66:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    8e68:	cmp	r4, r6
    8e6a:	bne.n	8e70 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    8e6c:	movs	r0, #1
    8e6e:	b.n	8e8a <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    8e70:	ldr	r3, [r5, #0]
    8e72:	mov	r0, r4
    8e74:	ldr	r1, [sp, #24]
    8e76:	ldr.w	r8, [r3, #36]	; 0x24
    8e7a:	blx	r7
    8e7c:	mov	r1, r4
    8e7e:	mov	r2, r0
    8e80:	mov	r0, r5
    8e82:	adds	r4, #1
    8e84:	blx	r8
    8e86:	cmp	r0, #0
    8e88:	bne.n	8e68 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    8e8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008e8e <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    8e8e:	movs	r0, #0
    8e90:	bx	lr

00008e92 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    8e92:	movs	r0, #0
    8e94:	bx	lr

00008e96 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    8e96:	movs	r0, #0
    8e98:	bx	lr

00008e9a <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    8e9a:	bx	lr

00008e9c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    8e9c:	ldr	r3, [pc, #28]	; (8ebc <sdIrs()+0x20>)
    8e9e:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8ea0:	ldr	r2, [pc, #28]	; (8ec0 <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    8ea2:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    8ea4:	ldr	r0, [r3, #48]	; 0x30
    8ea6:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    8ea8:	ldr	r2, [r2, #0]
    8eaa:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    8eac:	ldr	r2, [r3, #72]	; 0x48
    8eae:	bic.w	r2, r2, #129	; 0x81
    8eb2:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    8eb4:	ldr	r3, [pc, #12]	; (8ec4 <sdIrs()+0x28>)
    8eb6:	strb	r1, [r3, #0]
}
    8eb8:	bx	lr
    8eba:	nop
    8ebc:	.word	0x402c0000
    8ec0:	.word	0x200147f8
    8ec4:	.word	0x2001553a

00008ec8 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8ec8:	ldr	r3, [pc, #24]	; (8ee4 <gpioMux(unsigned char)+0x1c>)
    8eca:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    8ece:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    8ed2:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    8ed6:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    8eda:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    8ede:	str.w	r0, [r3, #456]	; 0x1c8
}
    8ee2:	bx	lr
    8ee4:	.word	0x401f8000

00008ee8 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8ee8:	ldr	r3, [pc, #12]	; (8ef8 <isBusyCommandComplete()+0x10>)
    8eea:	ldr	r0, [pc, #16]	; (8efc <isBusyCommandComplete()+0x14>)
    8eec:	ldr	r3, [r3, #48]	; 0x30
    8eee:	ands	r0, r3
}
    8ef0:	clz	r0, r0
    8ef4:	lsrs	r0, r0, #5
    8ef6:	bx	lr
    8ef8:	.word	0x402c0000
    8efc:	.word	0x000f0001

00008f00 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    8f00:	ldr	r3, [pc, #8]	; (8f0c <isBusyCommandInhibit()+0xc>)
    8f02:	ldr	r0, [r3, #36]	; 0x24
}
    8f04:	and.w	r0, r0, #1
    8f08:	bx	lr
    8f0a:	nop
    8f0c:	.word	0x402c0000

00008f10 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8f10:	ldr	r3, [pc, #12]	; (8f20 <isBusyDat()+0x10>)
    8f12:	ldr	r0, [r3, #36]	; 0x24
    8f14:	eor.w	r0, r0, #16777216	; 0x1000000
}
    8f18:	ubfx	r0, r0, #24, #1
    8f1c:	bx	lr
    8f1e:	nop
    8f20:	.word	0x402c0000

00008f24 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8f24:	ldr	r3, [pc, #4]	; (8f2c <isBusyDMA()+0x8>)
    8f26:	ldrb	r0, [r3, #0]
}
    8f28:	bx	lr
    8f2a:	nop
    8f2c:	.word	0x2001553a

00008f30 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8f30:	ldr	r3, [pc, #12]	; (8f40 <isBusyFifoRead()+0x10>)
    8f32:	ldr	r0, [r3, #36]	; 0x24
    8f34:	eor.w	r0, r0, #2048	; 0x800
}
    8f38:	ubfx	r0, r0, #11, #1
    8f3c:	bx	lr
    8f3e:	nop
    8f40:	.word	0x402c0000

00008f44 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    8f44:	ldr	r3, [pc, #12]	; (8f54 <isBusyFifoWrite()+0x10>)
    8f46:	ldr	r0, [r3, #36]	; 0x24
    8f48:	eor.w	r0, r0, #1024	; 0x400
}
    8f4c:	ubfx	r0, r0, #10, #1
    8f50:	bx	lr
    8f52:	nop
    8f54:	.word	0x402c0000

00008f58 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8f58:	ldr	r3, [pc, #12]	; (8f68 <isBusyTransferComplete()+0x10>)
    8f5a:	ldr	r0, [pc, #16]	; (8f6c <isBusyTransferComplete()+0x14>)
    8f5c:	ldr	r3, [r3, #48]	; 0x30
    8f5e:	ands	r0, r3
}
    8f60:	clz	r0, r0
    8f64:	lsrs	r0, r0, #5
    8f66:	bx	lr
    8f68:	.word	0x402c0000
    8f6c:	.word	0x117f0002

00008f70 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    8f70:	mov.w	r3, #1000	; 0x3e8
    8f74:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8f76:	ldr	r3, [pc, #140]	; (9004 <setSdclk(unsigned long)+0x94>)
    8f78:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8f7a:	sub.w	r3, r3, #147456	; 0x24000
    8f7e:	ldr.w	r1, [r3, #256]	; 0x100
    8f82:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8f84:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8f88:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8f8c:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8f8e:	udiv	r1, r1, r3
    8f92:	ldr	r3, [pc, #116]	; (9008 <setSdclk(unsigned long)+0x98>)
    8f94:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8f98:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8f9a:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    8f9e:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    8fa0:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8fa2:	lsls	r4, r2, #4
    8fa4:	udiv	r4, r3, r4
    8fa8:	cmp	r4, r0
    8faa:	bls.n	8fb0 <setSdclk(unsigned long)+0x40>
    8fac:	subs	r1, #1
    8fae:	bne.n	8fb6 <setSdclk(unsigned long)+0x46>
    8fb0:	mov	r4, r2
    8fb2:	movs	r1, #1
    8fb4:	b.n	8fbe <setSdclk(unsigned long)+0x4e>
    sdclkfs <<= 1;
    8fb6:	lsls	r2, r2, #1
    8fb8:	b.n	8fa2 <setSdclk(unsigned long)+0x32>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    8fba:	adds	r1, #1
    8fbc:	mov	r4, r5
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8fbe:	udiv	r5, r3, r4
    8fc2:	cmp	r5, r0
    8fc4:	bls.n	8fce <setSdclk(unsigned long)+0x5e>
    8fc6:	cmp	r1, #16
    8fc8:	add.w	r5, r2, r4
    8fcc:	bne.n	8fba <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8fce:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    8fd2:	subs	r1, #1
  sdclkfs >>= 1;
    8fd4:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8fd6:	muls	r4, r0
    8fd8:	ldr	r0, [pc, #48]	; (900c <setSdclk(unsigned long)+0x9c>)
    8fda:	udiv	r3, r3, r4
    8fde:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8fe0:	ldr	r0, [pc, #44]	; (9010 <setSdclk(unsigned long)+0xa0>)
    8fe2:	ldr	r3, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    8fe4:	bic.w	r3, r3, #1044480	; 0xff000
    8fe8:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8fec:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8ff0:	orr.w	r3, r3, r2, lsl #8
    8ff4:	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8ff8:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8ffa:	ldr	r3, [r0, #36]	; 0x24
    8ffc:	lsls	r3, r3, #28
    8ffe:	bpl.n	8ffa <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    9000:	pop	{r4, r5, pc}
    9002:	nop
    9004:	.word	0x400fc000
    9008:	.word	0x5e69ec00
    900c:	.word	0x2000dfd0
    9010:	.word	0x402c0000

00009014 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    9014:	ldr	r3, [pc, #4]	; (901c <SdioCard::errorCode() const+0x8>)
    9016:	ldrb	r0, [r3, #0]
    9018:	bx	lr
    901a:	nop
    901c:	.word	0x200022d8

00009020 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    9020:	ldr	r3, [pc, #4]	; (9028 <SdioCard::errorData() const+0x8>)
    9022:	ldr	r0, [r3, #0]
}
    9024:	bx	lr
    9026:	nop
    9028:	.word	0x200147f8

0000902c <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    902c:	ldr	r3, [pc, #20]	; (9044 <SdioCard::readCID(CID*)+0x18>)
    902e:	add.w	r2, r3, #16
    9032:	ldr.w	r0, [r3], #4
    9036:	cmp	r3, r2
    9038:	str.w	r0, [r1], #4
    903c:	bne.n	9032 <SdioCard::readCID(CID*)+0x6>
  return true;
}
    903e:	movs	r0, #1
    9040:	bx	lr
    9042:	nop
    9044:	.word	0x2001547a

00009048 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    9048:	ldr	r3, [pc, #20]	; (9060 <SdioCard::readCSD(csd_t*)+0x18>)
    904a:	add.w	r2, r3, #16
    904e:	ldr.w	r0, [r3], #4
    9052:	cmp	r3, r2
    9054:	str.w	r0, [r1], #4
    9058:	bne.n	904e <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    905a:	movs	r0, #1
    905c:	bx	lr
    905e:	nop
    9060:	.word	0x2001548a

00009064 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    9064:	ldr	r3, [pc, #8]	; (9070 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    9066:	movs	r0, #1
  *ocr = m_ocr;
    9068:	ldr	r3, [r3, #0]
    906a:	str	r3, [r1, #0]
}
    906c:	bx	lr
    906e:	nop
    9070:	.word	0x200141ec

00009074 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    9074:	bx	lr
	...

00009078 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    9078:	push	{r3, r4, r5, r6, r7, lr}
    907a:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    907c:	ldr	r7, [pc, #24]	; (9098 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    907e:	bl	b4fc <micros>
    9082:	mov	r6, r0
  while (fcn()) {
    9084:	blx	r5
    9086:	mov	r4, r0
    9088:	cbz	r0, 9094 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    908a:	bl	b4fc <micros>
    908e:	subs	r0, r0, r6
    9090:	cmp	r0, r7
    9092:	bls.n	9084 <waitTimeout(bool (*)())+0xc>
}
    9094:	mov	r0, r4
    9096:	pop	{r3, r4, r5, r6, r7, pc}
    9098:	.word	0x000f4240

0000909c <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    909c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    90a0:	ldr	r7, [pc, #44]	; (90d0 <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    90a2:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    90a4:	ldr.w	r8, [pc, #44]	; 90d4 <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    90a8:	str	r0, [r7, #0]
  uint32_t m = micros();
    90aa:	bl	b4fc <micros>
    90ae:	mov	r6, r0
  while (fcn()) {
    90b0:	blx	r5
    90b2:	mov	r4, r0
    90b4:	cbnz	r0, 90c0 <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    90b6:	movs	r3, #0
}
    90b8:	mov	r0, r4
      m_busyFcn = 0;
    90ba:	str	r3, [r7, #0]
}
    90bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    90c0:	bl	b4fc <micros>
    90c4:	subs	r0, r0, r6
    90c6:	cmp	r0, r8
    90c8:	bhi.n	90b6 <yieldTimeout(bool (*)())+0x1a>
    yield();
    90ca:	bl	c1c4 <yield>
    90ce:	b.n	90b0 <yieldTimeout(bool (*)())+0x14>
    90d0:	.word	0x200147f4
    90d4:	.word	0x000f4240

000090d8 <SdioCard::~SdioCard()>:
    90d8:	push	{r4, lr}
    90da:	mov	r4, r0
    90dc:	movs	r1, #12
    90de:	bl	c6f4 <operator delete(void*, unsigned int)>
    90e2:	mov	r0, r4
    90e4:	pop	{r4, pc}
	...

000090e8 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    90e8:	push	{r3, lr}
    gpioMux(0);
    90ea:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    90ec:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    90f0:	bl	8ec8 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    90f4:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    90f8:	ldr	r3, [pc, #24]	; (9114 <enableGPIO(bool) [clone .part.0]+0x2c>)
    90fa:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    90fe:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    9102:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9106:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    910a:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    910e:	str.w	r2, [r3, #952]	; 0x3b8
}
    9112:	pop	{r3, pc}
    9114:	.word	0x401f8000

00009118 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9118:	ldr	r3, [pc, #184]	; (91d4 <initSDHC()+0xbc>)
    gpioMux(5);
    911a:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    911c:	ldr.w	r2, [r3, #256]	; 0x100
    9120:	orr.w	r2, r2, #128	; 0x80
static void initSDHC() {
    9124:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9126:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    912a:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    912e:	ldr	r4, [pc, #168]	; (91d8 <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9130:	bic.w	r2, r2, #63	; 0x3f
    9134:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    9138:	ldr.w	r2, [r3, #256]	; 0x100
    913c:	orr.w	r2, r2, #24
    9140:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    9144:	ldr.w	r2, [r3, #256]	; 0x100
    9148:	bic.w	r2, r2, #128	; 0x80
    914c:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9150:	add.w	r3, r3, #147456	; 0x24000
    9154:	ldr.w	r2, [r3, #128]	; 0x80
    9158:	orr.w	r2, r2, #12
    915c:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    9160:	ldr	r2, [r3, #36]	; 0x24
    9162:	bic.w	r2, r2, #14336	; 0x3800
    9166:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    9168:	ldr	r2, [r3, #28]
    916a:	orr.w	r2, r2, #65536	; 0x10000
    916e:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    9170:	ldr	r2, [r3, #36]	; 0x24
    9172:	orr.w	r2, r2, #2048	; 0x800
    9176:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    9178:	bl	8ec8 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    917c:	ldr	r3, [r4, #72]	; 0x48
    917e:	orr.w	r3, r3, #2147483648	; 0x80000000
    9182:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    9184:	ldr	r3, [r4, #44]	; 0x2c
    9186:	orr.w	r3, r3, #16777216	; 0x1000000
    918a:	orr.w	r3, r3, #32768	; 0x8000
    918e:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    9190:	ldr	r3, [r4, #44]	; 0x2c
    9192:	lsls	r2, r3, #7
    9194:	bmi.n	9190 <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    9196:	mov.w	r0, #400	; 0x190
    919a:	bl	8f70 <setSdclk(unsigned long)>
  if (enable) {
    919e:	bl	90e8 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    91a2:	ldr	r3, [pc, #56]	; (91dc <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    91a4:	ldr	r2, [pc, #56]	; (91e0 <initSDHC()+0xc8>)
    91a6:	str	r3, [r4, #52]	; 0x34
    91a8:	ldr	r3, [pc, #56]	; (91e4 <initSDHC()+0xcc>)
    91aa:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    91ae:	ldr	r3, [pc, #56]	; (91e8 <initSDHC()+0xd0>)
    91b0:	movs	r2, #96	; 0x60
    91b2:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    91b6:	mov.w	r3, #3758153728	; 0xe000e000
    91ba:	mov.w	r2, #16384	; 0x4000
    91be:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    91c2:	ldr	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    91c4:	ldr	r2, [pc, #16]	; (91d8 <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    91c6:	orr.w	r3, r3, #134217728	; 0x8000000
    91ca:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    91cc:	ldr	r3, [r2, #44]	; 0x2c
    91ce:	lsls	r3, r3, #4
    91d0:	bmi.n	91cc <initSDHC()+0xb4>
}
    91d2:	pop	{r4, pc}
    91d4:	.word	0x400d8000
    91d8:	.word	0x402c0000
    91dc:	.word	0x117f000b
    91e0:	.word	0x00008e9d
    91e4:	.word	0x20002400
    91e8:	.word	0xe000e400

000091ec <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    91ec:	ldr	r3, [pc, #16]	; (9200 <SdioCard::type() const+0x14>)
    91ee:	ldrb	r3, [r3, #0]
    91f0:	cbz	r3, 91fc <SdioCard::type() const+0x10>
    91f2:	ldr	r3, [pc, #16]	; (9204 <SdioCard::type() const+0x18>)
    91f4:	ldrb	r0, [r3, #0]
    91f6:	adds	r0, #2
    91f8:	uxtb	r0, r0
    91fa:	bx	lr
    91fc:	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    91fe:	bx	lr
    9200:	.word	0x20015477
    9204:	.word	0x20015478

00009208 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    9208:	push	{r3, r4, r5, lr}
    920a:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    920c:	ldr	r0, [pc, #80]	; (9260 <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    920e:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    9210:	bl	9078 <waitTimeout(bool (*)())>
    9214:	cbnz	r0, 9256 <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    9216:	ldr	r3, [pc, #76]	; (9264 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    9218:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    921a:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    921c:	bpl.n	922e <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    921e:	ldr	r2, [r3, #72]	; 0x48
    9220:	bic.w	r2, r2, #255	; 0xff
    9224:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    9226:	uxtb	r2, r4
    9228:	ldr	r1, [r3, #72]	; 0x48
    922a:	orrs	r2, r1
    922c:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    922e:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    9232:	ldr	r5, [pc, #48]	; (9264 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    9234:	ldr	r0, [pc, #48]	; (9268 <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    9236:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    9238:	bl	9078 <waitTimeout(bool (*)())>
    923c:	cbnz	r0, 9256 <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    923e:	ldr	r2, [r5, #48]	; 0x30
    9240:	ldr	r3, [pc, #40]	; (926c <cardCommand(unsigned long, unsigned long)+0x64>)
    9242:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9244:	ldr	r2, [r3, #0]
    9246:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9248:	ldr	r2, [r3, #0]
    924a:	lsls	r2, r2, #31
    924c:	bpl.n	9256 <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    924e:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9250:	tst.w	r3, #983040	; 0xf0000
    9254:	beq.n	925a <cardCommand(unsigned long, unsigned long)+0x52>
    9256:	movs	r0, #0
}
    9258:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    925a:	movs	r0, #1
    925c:	b.n	9258 <cardCommand(unsigned long, unsigned long)+0x50>
    925e:	nop
    9260:	.word	0x00008f01
    9264:	.word	0x402c0000
    9268:	.word	0x00008ee9
    926c:	.word	0x200147f8

00009270 <statusCMD13()>:
static uint32_t statusCMD13() {
    9270:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9272:	ldr	r3, [pc, #16]	; (9284 <statusCMD13()+0x14>)
    9274:	ldr	r0, [pc, #16]	; (9288 <statusCMD13()+0x18>)
    9276:	ldr	r1, [r3, #0]
    9278:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    927c:	cbz	r0, 9282 <statusCMD13()+0x12>
    927e:	ldr	r3, [pc, #12]	; (928c <statusCMD13()+0x1c>)
    9280:	ldr	r0, [r3, #16]
}
    9282:	pop	{r3, pc}
    9284:	.word	0x200141f0
    9288:	.word	0x0d1a0000
    928c:	.word	0x402c0000

00009290 <isBusyCMD13()>:
static bool isBusyCMD13() {
    9290:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    9292:	bl	9270 <statusCMD13()>
    9296:	eor.w	r0, r0, #256	; 0x100
}
    929a:	ubfx	r0, r0, #8, #1
    929e:	pop	{r3, pc}

000092a0 <SdioCard::status()>:
  return statusCMD13();
    92a0:	b.w	9270 <statusCMD13()>

000092a4 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    92a4:	ldr	r3, [pc, #76]	; (92f4 <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    92a6:	push	{r4, r5, lr}
    92a8:	mov	r4, r1
    92aa:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    92ac:	ldr	r1, [r3, #0]
    92ae:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    92b2:	cbz	r0, 92f0 <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    92b4:	ldr	r3, [pc, #64]	; (92f8 <readReg16(unsigned long, void*)+0x54>)
    92b6:	add.w	r5, r4, #15
    92ba:	ldr	r2, [r3, #16]
    92bc:	str	r2, [sp, #0]
    92be:	ldr	r2, [r3, #20]
    92c0:	str	r2, [sp, #4]
    92c2:	ldr	r2, [r3, #24]
    92c4:	str	r2, [sp, #8]
    92c6:	ldr	r3, [r3, #28]
    92c8:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    92ca:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    92cc:	bic.w	r2, r3, #3
    92d0:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    92d4:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    92d6:	adds	r2, #16
    92d8:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    92da:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    92dc:	add	r2, sp
    92de:	ldr.w	r2, [r2, #-16]
    92e2:	lsr.w	r2, r2, r1
    92e6:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    92ea:	bne.n	92cc <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    92ec:	movs	r3, #0
    92ee:	strb	r3, [r4, #15]
}
    92f0:	add	sp, #20
    92f2:	pop	{r4, r5, pc}
    92f4:	.word	0x200141f0
    92f8:	.word	0x402c0000

000092fc <waitDmaStatus()>:
static bool waitDmaStatus() {
    92fc:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    92fe:	ldr	r0, [pc, #32]	; (9320 <waitDmaStatus()+0x24>)
    9300:	bl	909c <yieldTimeout(bool (*)())>
    9304:	cbnz	r0, 931c <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9306:	ldr	r3, [pc, #28]	; (9324 <waitDmaStatus()+0x28>)
    9308:	ldr	r2, [r3, #0]
    930a:	lsls	r2, r2, #30
    930c:	bpl.n	931a <waitDmaStatus()+0x1e>
    930e:	ldr	r2, [r3, #0]
    9310:	ldr	r3, [pc, #20]	; (9328 <waitDmaStatus()+0x2c>)
    9312:	tst	r2, r3
    9314:	ite	eq
    9316:	moveq	r0, #1
    9318:	movne	r0, #0
}
    931a:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    931c:	movs	r0, #0
    931e:	b.n	931a <waitDmaStatus()+0x1e>
    9320:	.word	0x00008f25
    9324:	.word	0x200147f8
    9328:	.word	0x117f0000

0000932c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    932c:	push	{r3, r4, r5, r6, r7, lr}
    932e:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    9330:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    9332:	mov	r7, r0
    9334:	mov	r4, r1
    9336:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    9338:	bne.n	933c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    933a:	cbnz	r5, 934e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    933c:	ldr	r3, [pc, #96]	; (93a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    933e:	movs	r2, #37	; 0x25
    9340:	strb	r2, [r3, #0]
  m_errorLine = line;
    9342:	movw	r2, #501	; 0x1f5
    9346:	ldr	r3, [pc, #92]	; (93a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    9348:	str	r2, [r3, #0]
}
    934a:	movs	r0, #0
    934c:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    934e:	ldr	r0, [pc, #88]	; (93a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    9350:	bl	909c <yieldTimeout(bool (*)())>
    9354:	cbz	r0, 9364 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    9356:	ldr	r3, [pc, #72]	; (93a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    9358:	movs	r2, #10
    935a:	strb	r2, [r3, #0]
  m_errorLine = line;
    935c:	mov.w	r2, #504	; 0x1f8
    9360:	ldr	r3, [pc, #64]	; (93a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    9362:	b.n	9348 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    9364:	ldr	r3, [pc, #68]	; (93ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    9366:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    9368:	ldr	r1, [pc, #68]	; (93b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    936a:	strb	r2, [r3, #0]
  m_irqstat = 0;
    936c:	ldr	r3, [pc, #68]	; (93b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    936e:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9370:	ldr	r3, [pc, #68]	; (93b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    9372:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9374:	and.w	r3, r3, r5, lsl #16
    9378:	orr.w	r3, r3, #512	; 0x200
    937c:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    937e:	ldr	r3, [pc, #60]	; (93bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    9380:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    9382:	ldr	r3, [pc, #60]	; (93c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    9384:	ldrb	r3, [r3, #0]
    9386:	cbnz	r3, 938a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    9388:	lsls	r4, r4, #9
    938a:	mov	r1, r4
    938c:	mov	r0, r7
    938e:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    9392:	cmp	r0, #0
    9394:	beq.n	934a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    9396:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    939a:	b.w	92fc <waitDmaStatus()>
    939e:	nop
    93a0:	.word	0x200022d8
    93a4:	.word	0x2000dfd8
    93a8:	.word	0x00009291
    93ac:	.word	0x2001553a
    93b0:	.word	0x402c0000
    93b4:	.word	0x200147f8
    93b8:	.word	0x1fff0000
    93bc:	.word	0x117f0002
    93c0:	.word	0x20015478

000093c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    93c4:	push	{r3, r4, r5, r6, r7, lr}
    93c6:	mov	r7, r0
  bool useDma() {return m_options & DMA_SDIO;}
    93c8:	ldrb	r0, [r0, #8]
    93ca:	mov	r4, r1
    93cc:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    93ce:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    93d0:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    93d2:	bmi.n	93f2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    93d4:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    93d6:	cmp	r4, r6
    93d8:	beq.n	93fc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    93da:	ldr	r3, [r7, #0]
    93dc:	mov	r2, r5
    93de:	mov	r1, r4
    93e0:	mov	r0, r7
    93e2:	ldr	r3, [r3, #16]
    93e4:	adds	r4, #1
    93e6:	add.w	r5, r5, #512	; 0x200
    93ea:	blx	r3
    93ec:	cmp	r0, #0
    93ee:	bne.n	93d6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    93f0:	b.n	940e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    93f2:	lsls	r0, r2, #30
    93f4:	beq.n	941a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    93f6:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    93f8:	cmp	r4, r6
    93fa:	bne.n	9400 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    93fc:	movs	r0, #1
    93fe:	b.n	9410 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    9400:	ldr	r3, [r7, #0]
    9402:	mov	r2, r5
    9404:	mov	r1, r4
    9406:	mov	r0, r7
    9408:	ldr	r3, [r3, #16]
    940a:	blx	r3
    940c:	cbnz	r0, 9412 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    940e:	movs	r0, #0
}
    9410:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9412:	adds	r4, #1
    9414:	add.w	r5, r5, #512	; 0x200
    9418:	b.n	93f8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    941a:	ldr	r0, [pc, #24]	; (9434 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    941c:	bl	932c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9420:	cmp	r0, #0
    9422:	bne.n	93fc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    9424:	ldr	r3, [pc, #16]	; (9438 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    9426:	movs	r2, #12
    9428:	strb	r2, [r3, #0]
  m_errorLine = line;
    942a:	movw	r2, #929	; 0x3a1
    942e:	ldr	r3, [pc, #12]	; (943c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    9430:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    9432:	b.n	9410 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    9434:	.word	0x123a0037
    9438:	.word	0x200022d8
    943c:	.word	0x2000dfd8

00009440 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9440:	push	{r3, r4, r5, r6, r7, lr}
    9442:	mov	r7, r0
    9444:	ldrb	r0, [r0, #8]
    9446:	mov	r4, r1
    9448:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    944a:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    944c:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    944e:	bmi.n	946e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    9450:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    9452:	cmp	r4, r6
    9454:	beq.n	9478 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    9456:	ldr	r3, [r7, #0]
    9458:	mov	r2, r5
    945a:	mov	r1, r4
    945c:	mov	r0, r7
    945e:	ldr	r3, [r3, #36]	; 0x24
    9460:	adds	r4, #1
    9462:	add.w	r5, r5, #512	; 0x200
    9466:	blx	r3
    9468:	cmp	r0, #0
    946a:	bne.n	9452 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    946c:	b.n	948a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    946e:	lsls	r0, r2, #30
    9470:	beq.n	9496 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    9472:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9474:	cmp	r4, r6
    9476:	bne.n	947c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    9478:	movs	r0, #1
    947a:	b.n	948c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    947c:	ldr	r3, [r7, #0]
    947e:	mov	r2, r5
    9480:	mov	r1, r4
    9482:	mov	r0, r7
    9484:	ldr	r3, [r3, #36]	; 0x24
    9486:	blx	r3
    9488:	cbnz	r0, 948e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    948a:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    948c:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    948e:	adds	r4, #1
    9490:	add.w	r5, r5, #512	; 0x200
    9494:	b.n	9474 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    9496:	ldr	r0, [pc, #24]	; (94b0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    9498:	bl	932c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    949c:	cmp	r0, #0
    949e:	bne.n	9478 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    94a0:	ldr	r3, [pc, #16]	; (94b4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    94a2:	movs	r2, #14
    94a4:	strb	r2, [r3, #0]
  m_errorLine = line;
    94a6:	movw	r2, #1085	; 0x43d
    94aa:	ldr	r3, [pc, #12]	; (94b8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    94ac:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    94ae:	b.n	948c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    94b0:	.word	0x193a0027
    94b4:	.word	0x200022d8
    94b8:	.word	0x2000dfd8

000094bc <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    94bc:	ldr	r2, [pc, #88]	; (9518 <SdioCard::sectorCount()+0x5c>)
    94be:	ldrb	r3, [r2, #0]
    94c0:	ands.w	r3, r3, #192	; 0xc0
    94c4:	bne.n	94f8 <SdioCard::sectorCount()+0x3c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    94c6:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    94c8:	ldrb	r0, [r2, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    94ca:	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    94ce:	ldrb	r1, [r2, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    94d0:	lsls	r0, r0, #2
    94d2:	orr.w	r0, r0, r3, lsl #10
    94d6:	ldrb	r3, [r2, #8]
    94d8:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    94dc:	ldrb	r3, [r2, #9]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    94de:	ldrb	r2, [r2, #5]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    94e0:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    94e4:	adds	r0, #1
    94e6:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    94ea:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    94ec:	orr.w	r3, r3, r1, lsr #7
    94f0:	add	r3, r2
    94f2:	subs	r3, #7
    94f4:	lsls	r0, r3
    94f6:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    94f8:	cmp	r3, #64	; 0x40
    94fa:	bne.n	9514 <SdioCard::sectorCount()+0x58>
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    94fc:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    94fe:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9500:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9502:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9506:	add.w	r0, r0, r3, lsl #16
    950a:	ldrb	r3, [r2, #8]
    950c:	add.w	r0, r0, r3, lsl #8
    9510:	lsls	r0, r0, #10
    9512:	bx	lr
  } else {
    return 0;
    9514:	movs	r0, #0
}
    9516:	bx	lr
    9518:	.word	0x2001548a

0000951c <SdioCard::isBusy()>:
    951c:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    951e:	lsls	r3, r3, #31
    9520:	bpl.n	9534 <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    9522:	ldr	r3, [pc, #40]	; (954c <SdioCard::isBusy()+0x30>)
    9524:	ldr	r3, [r3, #0]
    9526:	cbz	r3, 952a <SdioCard::isBusy()+0xe>
    9528:	bx	r3
    952a:	ldr	r3, [pc, #36]	; (9550 <SdioCard::isBusy()+0x34>)
    952c:	ldrb	r0, [r3, #0]
    952e:	cbz	r0, 954a <SdioCard::isBusy()+0x2e>
    9530:	b.w	9290 <isBusyCMD13()>
    if (m_transferActive) {
    9534:	ldr	r3, [pc, #28]	; (9554 <SdioCard::isBusy()+0x38>)
    9536:	ldrb	r3, [r3, #0]
    9538:	cbz	r3, 953e <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    953a:	b.w	8f58 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    953e:	ldr	r3, [pc, #24]	; (9558 <SdioCard::isBusy()+0x3c>)
    9540:	ldr	r0, [r3, #36]	; 0x24
    9542:	eor.w	r0, r0, #16777216	; 0x1000000
    9546:	ubfx	r0, r0, #24, #1
}
    954a:	bx	lr
    954c:	.word	0x200147f4
    9550:	.word	0x20015476
    9554:	.word	0x20015479
    9558:	.word	0x402c0000

0000955c <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    955c:	push	{r3, r4, r5, lr}
    955e:	mov	r5, r2
  if (!m_csd.v1.erase_blk_en) {
    9560:	ldr	r2, [pc, #160]	; (9604 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    9562:	ldrb	r3, [r2, #10]
    9564:	ands.w	r4, r3, #64	; 0x40
    9568:	bne.n	9590 <SdioCard::erase(unsigned long, unsigned long)+0x34>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    956a:	and.w	r3, r3, #63	; 0x3f
    956e:	ldrb	r2, [r2, #11]
    9570:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9572:	orr.w	r3, r3, r2, lsr #7
    9576:	adds	r2, r5, #1
    9578:	orrs	r2, r1
    957a:	tst	r3, r2
    957c:	beq.n	9590 <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    957e:	ldr	r3, [pc, #136]	; (9608 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9580:	movs	r2, #39	; 0x27
    9582:	strb	r2, [r3, #0]
  m_errorLine = line;
    9584:	movw	r2, #770	; 0x302
    9588:	ldr	r3, [pc, #128]	; (960c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    958a:	str	r2, [r3, #0]
}
    958c:	mov	r0, r4
    958e:	pop	{r3, r4, r5, pc}
  if (!m_highCapacity) {
    9590:	ldr	r3, [pc, #124]	; (9610 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    9592:	ldrb	r3, [r3, #0]
    9594:	cbnz	r3, 959a <SdioCard::erase(unsigned long, unsigned long)+0x3e>
    firstSector <<= 9;
    9596:	lsls	r1, r1, #9
    lastSector <<= 9;
    9598:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    959a:	ldr	r0, [pc, #120]	; (9614 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    959c:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    95a0:	mov	r4, r0
    95a2:	cbnz	r0, 95b2 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  m_errorCode = code;
    95a4:	ldr	r3, [pc, #96]	; (9608 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    95a6:	movs	r2, #15
    95a8:	strb	r2, [r3, #0]
  m_errorLine = line;
    95aa:	movw	r2, #778	; 0x30a
    95ae:	ldr	r3, [pc, #92]	; (960c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    95b0:	b.n	958a <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    95b2:	mov	r1, r5
    95b4:	ldr	r0, [pc, #96]	; (9618 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    95b6:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    95ba:	mov	r4, r0
    95bc:	cbnz	r0, 95cc <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    95be:	ldr	r3, [pc, #72]	; (9608 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    95c0:	movs	r2, #16
    95c2:	strb	r2, [r3, #0]
  m_errorLine = line;
    95c4:	movw	r2, #781	; 0x30d
    95c8:	ldr	r3, [pc, #64]	; (960c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    95ca:	b.n	958a <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    95cc:	movs	r1, #0
    95ce:	ldr	r0, [pc, #76]	; (961c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    95d0:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    95d4:	mov	r4, r0
    95d6:	cbnz	r0, 95e6 <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    95d8:	ldr	r3, [pc, #44]	; (9608 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    95da:	movs	r2, #17
    95dc:	strb	r2, [r3, #0]
  m_errorLine = line;
    95de:	mov.w	r2, #784	; 0x310
    95e2:	ldr	r3, [pc, #40]	; (960c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    95e4:	b.n	958a <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (waitTimeout(isBusyCMD13)) {
    95e6:	ldr	r0, [pc, #56]	; (9620 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    95e8:	bl	9078 <waitTimeout(bool (*)())>
    95ec:	cmp	r0, #0
    95ee:	beq.n	958c <SdioCard::erase(unsigned long, unsigned long)+0x30>
  m_errorCode = code;
    95f0:	ldr	r3, [pc, #20]	; (9608 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    95f2:	movs	r2, #40	; 0x28
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    95f4:	movs	r4, #0
  m_errorCode = code;
    95f6:	strb	r2, [r3, #0]
  m_errorLine = line;
    95f8:	movw	r2, #787	; 0x313
    95fc:	ldr	r3, [pc, #12]	; (960c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    95fe:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9600:	b.n	958c <SdioCard::erase(unsigned long, unsigned long)+0x30>
    9602:	nop
    9604:	.word	0x2001548a
    9608:	.word	0x200022d8
    960c:	.word	0x2000dfd8
    9610:	.word	0x20015478
    9614:	.word	0x201a0000
    9618:	.word	0x211a0000
    961c:	.word	0x261b0000
    9620:	.word	0x00009291

00009624 <waitTransferComplete()>:
static bool waitTransferComplete() {
    9624:	push	{r4, lr}
  if (!m_transferActive) {
    9626:	ldr	r4, [pc, #60]	; (9664 <waitTransferComplete()+0x40>)
    9628:	ldrb	r3, [r4, #0]
    962a:	cbnz	r3, 9630 <waitTransferComplete()+0xc>
    return true;
    962c:	movs	r0, #1
}
    962e:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    9630:	ldr	r0, [pc, #52]	; (9668 <waitTransferComplete()+0x44>)
    9632:	bl	9078 <waitTimeout(bool (*)())>
  m_transferActive = false;
    9636:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    9638:	ldr	r2, [pc, #48]	; (966c <waitTransferComplete()+0x48>)
  m_transferActive = false;
    963a:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    963c:	ldr	r1, [r2, #48]	; 0x30
    963e:	ldr	r3, [pc, #48]	; (9670 <waitTransferComplete()+0x4c>)
    9640:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9642:	ldr	r1, [r3, #0]
    9644:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    9646:	cbnz	r0, 9650 <waitTransferComplete()+0x2c>
    9648:	ldr	r2, [r3, #0]
    964a:	ldr	r3, [pc, #40]	; (9674 <waitTransferComplete()+0x50>)
    964c:	tst	r2, r3
    964e:	beq.n	962c <waitTransferComplete()+0x8>
  m_errorCode = code;
    9650:	ldr	r3, [pc, #36]	; (9678 <waitTransferComplete()+0x54>)
    9652:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    9654:	movs	r0, #0
  m_errorCode = code;
    9656:	strb	r2, [r3, #0]
  m_errorLine = line;
    9658:	movw	r2, #634	; 0x27a
    965c:	ldr	r3, [pc, #28]	; (967c <waitTransferComplete()+0x58>)
    965e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    9660:	b.n	962e <waitTransferComplete()+0xa>
    9662:	nop
    9664:	.word	0x20015479
    9668:	.word	0x00008f59
    966c:	.word	0x402c0000
    9670:	.word	0x200147f8
    9674:	.word	0x117f0000
    9678:	.word	0x200022d8
    967c:	.word	0x2000dfd8

00009680 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9680:	push	{r4, r5, r6, r7, lr}
    9682:	ldrb	r5, [r0, #8]
    9684:	sub.w	sp, sp, #516	; 0x204
    9688:	mov	r4, r0
    968a:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    968c:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9690:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9692:	beq.n	96cc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    9694:	lsls	r3, r2, #30
    9696:	beq.n	96a6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    9698:	mov	r1, r6
      ptr = aligned;
    969a:	mov	r6, sp
      memcpy(aligned, src, 512);
    969c:	mov.w	r2, #512	; 0x200
    96a0:	mov	r0, sp
    96a2:	bl	a000 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    96a6:	movs	r3, #1
    96a8:	mov	r2, r6
    96aa:	mov	r1, r7
    96ac:	ldr	r0, [pc, #104]	; (9718 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    96ae:	bl	932c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    96b2:	mov	r5, r0
    96b4:	cbnz	r0, 96c4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    96b6:	ldr	r3, [pc, #100]	; (971c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    96b8:	movs	r2, #13
    96ba:	strb	r2, [r3, #0]
  m_errorLine = line;
    96bc:	movw	r2, #1041	; 0x411
    96c0:	ldr	r3, [pc, #92]	; (9720 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    96c2:	str	r2, [r3, #0]
}
    96c4:	mov	r0, r5
    96c6:	add.w	sp, sp, #516	; 0x204
    96ca:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    96cc:	bl	9624 <waitTransferComplete()>
    96d0:	cmp	r0, #0
    96d2:	beq.n	96c4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    96d4:	ldrb	r3, [r4, #9]
    96d6:	cmp	r3, #2
    96d8:	bne.n	96e0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    96da:	ldr	r3, [r4, #4]
    96dc:	cmp	r3, r7
    96de:	beq.n	9700 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    96e0:	ldr	r3, [r4, #0]
    96e2:	mov	r0, r4
    96e4:	ldr	r3, [r3, #32]
    96e6:	blx	r3
    96e8:	cmp	r0, #0
    96ea:	beq.n	96c4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    96ec:	ldr	r3, [r4, #0]
    96ee:	mov	r1, r7
    96f0:	mov	r0, r4
    96f2:	ldr	r3, [r3, #96]	; 0x60
    96f4:	blx	r3
    96f6:	cmp	r0, #0
    96f8:	beq.n	96c4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    96fa:	movs	r3, #2
      m_curSector = sector;
    96fc:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    96fe:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    9700:	ldr	r3, [r4, #0]
    9702:	mov	r1, r6
    9704:	mov	r0, r4
    9706:	ldr	r3, [r3, #92]	; 0x5c
    9708:	blx	r3
    970a:	cmp	r0, #0
    970c:	beq.n	96c4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    970e:	ldr	r3, [r4, #4]
  return true;
    9710:	mov	r5, r0
    m_curSector++;
    9712:	adds	r3, #1
    9714:	str	r3, [r4, #4]
    9716:	b.n	96c4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    9718:	.word	0x183a0001
    971c:	.word	0x200022d8
    9720:	.word	0x2000dfd8

00009724 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    9724:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9726:	ldr	r4, [pc, #92]	; (9784 <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9728:	movs	r1, #0
    972a:	ldr	r0, [pc, #92]	; (9788 <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    972c:	ldr	r3, [r4, #40]	; 0x28
    972e:	bic.w	r3, r3, #65536	; 0x10000
    9732:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9734:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    9738:	mov	r5, r0
    973a:	cbnz	r0, 974e <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    973c:	ldr	r3, [pc, #76]	; (978c <SdioCard::readStop()+0x68>)
    973e:	movs	r2, #9
    9740:	strb	r2, [r3, #0]
  m_errorLine = line;
    9742:	movw	r2, #573	; 0x23d
    9746:	ldr	r3, [pc, #72]	; (9790 <SdioCard::readStop()+0x6c>)
    9748:	str	r2, [r3, #0]
}
    974a:	mov	r0, r5
    974c:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    974e:	ldr	r0, [pc, #68]	; (9794 <SdioCard::readStop()+0x70>)
    9750:	bl	909c <yieldTimeout(bool (*)())>
    9754:	cbz	r0, 9768 <SdioCard::readStop()+0x44>
  m_errorCode = code;
    9756:	ldr	r3, [pc, #52]	; (978c <SdioCard::readStop()+0x68>)
    9758:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    975a:	movs	r5, #0
  m_errorCode = code;
    975c:	strb	r2, [r3, #0]
  m_errorLine = line;
    975e:	mov.w	r2, #576	; 0x240
    9762:	ldr	r3, [pc, #44]	; (9790 <SdioCard::readStop()+0x6c>)
    9764:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    9766:	b.n	974a <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9768:	ldr	r3, [r4, #36]	; 0x24
    976a:	lsls	r3, r3, #30
    976c:	bpl.n	974a <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    976e:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9770:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9772:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9774:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9778:	orr.w	r2, r2, #67108864	; 0x4000000
    977c:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    977e:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    9780:	str	r3, [r4, #40]	; 0x28
    9782:	b.n	974a <SdioCard::readStop()+0x26>
    9784:	.word	0x402c0000
    9788:	.word	0x0cdb0000
    978c:	.word	0x200022d8
    9790:	.word	0x2000dfd8
    9794:	.word	0x00008f11

00009798 <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    9798:	push	{r4, r5, r6, lr}
    979a:	mov	r4, r1
  if (!waitTransferComplete()) {
    979c:	bl	9624 <waitTransferComplete()>
    97a0:	mov	r5, r0
    97a2:	cbz	r0, 97dc <SdioCard::writeData(unsigned char const*)+0x44>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    97a4:	ldr	r3, [pc, #100]	; (980c <SdioCard::writeData(unsigned char const*)+0x74>)
    97a6:	ldr	r2, [r3, #36]	; 0x24
    97a8:	lsls	r2, r2, #23
    97aa:	bmi.n	97bc <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    97ac:	ldr	r2, [r3, #40]	; 0x28
    97ae:	bic.w	r2, r2, #65536	; 0x10000
    97b2:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    97b4:	ldr	r2, [r3, #40]	; 0x28
    97b6:	orr.w	r2, r2, #131072	; 0x20000
    97ba:	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    97bc:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    97be:	ldr	r0, [pc, #80]	; (9810 <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    97c0:	orr.w	r2, r2, #65536	; 0x10000
    97c4:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    97c6:	bl	9078 <waitTimeout(bool (*)())>
    97ca:	cbz	r0, 97e0 <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    97cc:	ldr	r3, [pc, #68]	; (9814 <SdioCard::writeData(unsigned char const*)+0x7c>)
    97ce:	movs	r2, #33	; 0x21
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    97d0:	movs	r5, #0
  m_errorCode = code;
    97d2:	strb	r2, [r3, #0]
  m_errorLine = line;
    97d4:	mov.w	r2, #1016	; 0x3f8
    97d8:	ldr	r3, [pc, #60]	; (9818 <SdioCard::writeData(unsigned char const*)+0x80>)
    97da:	str	r2, [r3, #0]
}
    97dc:	mov	r0, r5
    97de:	pop	{r4, r5, r6, pc}
    97e0:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    97e4:	ldr	r2, [pc, #36]	; (980c <SdioCard::writeData(unsigned char const*)+0x74>)
    97e6:	ldr	r3, [r2, #36]	; 0x24
    97e8:	lsls	r3, r3, #21
    97ea:	bpl.n	97e6 <SdioCard::writeData(unsigned char const*)+0x4e>
    97ec:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    97ee:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    97f2:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    97f6:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    97f8:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    97fa:	bne.n	97f2 <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    97fc:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    97fe:	cmp	r4, r1
    9800:	bne.n	97e6 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    9802:	ldr	r3, [pc, #24]	; (981c <SdioCard::writeData(unsigned char const*)+0x84>)
    9804:	movs	r2, #1
    9806:	strb	r2, [r3, #0]
  return true;
    9808:	b.n	97dc <SdioCard::writeData(unsigned char const*)+0x44>
    980a:	nop
    980c:	.word	0x402c0000
    9810:	.word	0x00008f45
    9814:	.word	0x200022d8
    9818:	.word	0x2000dfd8
    981c:	.word	0x20015479

00009820 <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9820:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9822:	ldr	r0, [pc, #80]	; (9874 <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    9824:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9826:	bl	909c <yieldTimeout(bool (*)())>
    982a:	cbz	r0, 983e <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    982c:	ldr	r3, [pc, #72]	; (9878 <SdioCard::writeStart(unsigned long)+0x58>)
    982e:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9830:	movs	r0, #0
  m_errorCode = code;
    9832:	strb	r2, [r3, #0]
  m_errorLine = line;
    9834:	movw	r2, #1099	; 0x44b
    9838:	ldr	r3, [pc, #64]	; (987c <SdioCard::writeStart(unsigned long)+0x5c>)
    983a:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    983c:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    983e:	ldr	r3, [pc, #64]	; (9880 <SdioCard::writeStart(unsigned long)+0x60>)
    9840:	ldr	r2, [r3, #40]	; 0x28
    9842:	bic.w	r2, r2, #65536	; 0x10000
    9846:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9848:	mov.w	r2, #512	; 0x200
    984c:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    984e:	ldr	r3, [pc, #52]	; (9884 <SdioCard::writeStart(unsigned long)+0x64>)
    9850:	ldrb	r3, [r3, #0]
    9852:	cbnz	r3, 9856 <SdioCard::writeStart(unsigned long)+0x36>
    9854:	lsls	r4, r4, #9
    9856:	mov	r1, r4
    9858:	ldr	r0, [pc, #44]	; (9888 <SdioCard::writeStart(unsigned long)+0x68>)
    985a:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    985e:	cmp	r0, #0
    9860:	bne.n	983c <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    9862:	ldr	r3, [pc, #20]	; (9878 <SdioCard::writeStart(unsigned long)+0x58>)
    9864:	movs	r2, #14
    9866:	strb	r2, [r3, #0]
  m_errorLine = line;
    9868:	movw	r2, #1111	; 0x457
    986c:	ldr	r3, [pc, #12]	; (987c <SdioCard::writeStart(unsigned long)+0x5c>)
    986e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    9870:	b.n	983c <SdioCard::writeStart(unsigned long)+0x1c>
    9872:	nop
    9874:	.word	0x00009291
    9878:	.word	0x200022d8
    987c:	.word	0x2000dfd8
    9880:	.word	0x402c0000
    9884:	.word	0x20015478
    9888:	.word	0x193a0020

0000988c <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    988c:	push	{r3, r4, r5, lr}
    988e:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    9890:	ldr	r0, [pc, #96]	; (98f4 <cardCMD6(unsigned long, unsigned char*)+0x68>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9892:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    9894:	bl	9078 <waitTimeout(bool (*)())>
    9898:	cbz	r0, 98ac <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    989a:	ldr	r3, [pc, #92]	; (98f8 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    989c:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    989e:	movs	r0, #0
  m_errorCode = code;
    98a0:	strb	r2, [r3, #0]
  m_errorLine = line;
    98a2:	mov.w	r2, #408	; 0x198
    98a6:	ldr	r3, [pc, #84]	; (98fc <cardCMD6(unsigned long, unsigned char*)+0x70>)
    98a8:	str	r2, [r3, #0]
}
    98aa:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    98ac:	ldr	r3, [pc, #80]	; (9900 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    98ae:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    98b0:	mov	r1, r4
  m_dmaBusy = true;
    98b2:	strb	r2, [r3, #0]
  m_irqstat = 0;
    98b4:	ldr	r3, [pc, #76]	; (9904 <cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    98b6:	ldr	r2, [pc, #80]	; (9908 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    98b8:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    98ba:	ldr	r3, [pc, #80]	; (990c <cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    98bc:	ldr	r0, [pc, #80]	; (9910 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR  = (uint32_t)status;
    98be:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    98c0:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    98c2:	ldr	r2, [pc, #80]	; (9914 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    98c4:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    98c6:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    98ca:	cbnz	r0, 98dc <cardCMD6(unsigned long, unsigned char*)+0x50>
  m_errorCode = code;
    98cc:	ldr	r3, [pc, #40]	; (98f8 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    98ce:	movs	r2, #4
    98d0:	strb	r2, [r3, #0]
  m_errorLine = line;
    98d2:	movw	r2, #415	; 0x19f
    98d6:	ldr	r3, [pc, #36]	; (98fc <cardCMD6(unsigned long, unsigned char*)+0x70>)
    98d8:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    98da:	b.n	98aa <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    98dc:	bl	92fc <waitDmaStatus()>
    98e0:	cmp	r0, #0
    98e2:	bne.n	98aa <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    98e4:	ldr	r3, [pc, #16]	; (98f8 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    98e6:	movs	r2, #37	; 0x25
    98e8:	strb	r2, [r3, #0]
  m_errorLine = line;
    98ea:	mov.w	r2, #418	; 0x1a2
    98ee:	ldr	r3, [pc, #12]	; (98fc <cardCMD6(unsigned long, unsigned char*)+0x70>)
    98f0:	b.n	98d8 <cardCMD6(unsigned long, unsigned char*)+0x4c>
    98f2:	nop
    98f4:	.word	0x00009291
    98f8:	.word	0x200022d8
    98fc:	.word	0x2000dfd8
    9900:	.word	0x2001553a
    9904:	.word	0x200147f8
    9908:	.word	0x00010040
    990c:	.word	0x402c0000
    9910:	.word	0x063a0011
    9914:	.word	0x117f0002

00009918 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    9918:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    991c:	movs	r4, #0
  m_initDone = false;
    991e:	ldr	r7, [pc, #524]	; (9b2c <SdioCard::begin(SdioConfig)+0x214>)
  m_errorCode = SD_CARD_ERROR_NONE;
    9920:	ldr	r5, [pc, #524]	; (9b30 <SdioCard::begin(SdioConfig)+0x218>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    9922:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    9924:	ldr.w	r8, [pc, #584]	; 9b70 <SdioCard::begin(SdioConfig)+0x258>
  m_version2 = false;
    9928:	ldr	r6, [pc, #520]	; (9b34 <SdioCard::begin(SdioConfig)+0x21c>)
  m_sdioConfig = sdioConfig;
    992a:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    992c:	strb	r4, [r0, #9]
  m_initDone = false;
    992e:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    9930:	strb	r4, [r5, #0]
  m_highCapacity = false;
    9932:	strb.w	r4, [r8]
  m_version2 = false;
    9936:	strb	r4, [r6, #0]
  initSDHC();
    9938:	bl	9118 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    993c:	mov	r1, r4
    993e:	mov	r0, r4
    9940:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    9944:	mov	r4, r0
    9946:	cbnz	r0, 995c <SdioCard::begin(SdioConfig)+0x44>
  m_errorCode = code;
    9948:	movs	r3, #1
  m_errorLine = line;
    994a:	movw	r2, #654	; 0x28e
  m_errorCode = code;
    994e:	strb	r3, [r5, #0]
  m_errorLine = line;
    9950:	ldr	r3, [pc, #484]	; (9b38 <SdioCard::begin(SdioConfig)+0x220>)
    9952:	str	r2, [r3, #0]
}
    9954:	mov	r0, r4
    9956:	add	sp, #68	; 0x44
    9958:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    995c:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    995e:	ldr.w	r9, [pc, #532]	; 9b74 <SdioCard::begin(SdioConfig)+0x25c>
    9962:	mov.w	r1, #426	; 0x1aa
    9966:	mov	r0, r9
    9968:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    996c:	cbz	r0, 9990 <SdioCard::begin(SdioConfig)+0x78>
      if (SDHC_CMDRSP0 != 0X1AA) {
    996e:	ldr	r3, [pc, #460]	; (9b3c <SdioCard::begin(SdioConfig)+0x224>)
    9970:	ldr	r3, [r3, #16]
    9972:	cmp.w	r3, #426	; 0x1aa
    9976:	beq.n	9988 <SdioCard::begin(SdioConfig)+0x70>
  m_errorCode = code;
    9978:	movs	r3, #6
  m_errorLine = line;
    997a:	mov.w	r2, #660	; 0x294
  m_errorCode = code;
    997e:	strb	r3, [r5, #0]
  m_errorLine = line;
    9980:	ldr	r3, [pc, #436]	; (9b38 <SdioCard::begin(SdioConfig)+0x220>)
    return sdError(SD_CARD_ERROR_ACMD6);
    9982:	movs	r4, #0
  m_errorLine = line;
    9984:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    9986:	b.n	9954 <SdioCard::begin(SdioConfig)+0x3c>
      m_version2 = true;
    9988:	movs	r3, #1
    998a:	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    998c:	ldr	r6, [pc, #432]	; (9b40 <SdioCard::begin(SdioConfig)+0x228>)
    998e:	b.n	99b0 <SdioCard::begin(SdioConfig)+0x98>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9990:	subs	r4, #1
    9992:	bne.n	9962 <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
    9994:	ldrb	r3, [r6, #0]
    9996:	cmp	r3, #0
    9998:	bne.n	998c <SdioCard::begin(SdioConfig)+0x74>
    initSDHC();
    999a:	bl	9118 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    999e:	mov	r1, r4
    99a0:	mov	r0, r4
    99a2:	bl	9208 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    99a6:	ldrb	r3, [r6, #0]
    99a8:	cmp	r3, #0
    99aa:	bne.n	998c <SdioCard::begin(SdioConfig)+0x74>
    99ac:	mov.w	r6, #3145728	; 0x300000
  int m = micros();
    99b0:	bl	b4fc <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    99b4:	ldr.w	r9, [pc, #428]	; 9b64 <SdioCard::begin(SdioConfig)+0x24c>
  int m = micros();
    99b8:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    99ba:	ldr.w	sl, [pc, #444]	; 9b78 <SdioCard::begin(SdioConfig)+0x260>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    99be:	ldr.w	fp, [pc, #444]	; 9b7c <SdioCard::begin(SdioConfig)+0x264>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    99c2:	movs	r1, #0
    99c4:	mov	r0, r9
    99c6:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    99ca:	cbnz	r0, 99d8 <SdioCard::begin(SdioConfig)+0xc0>
  m_errorCode = code;
    99cc:	movs	r3, #23
  m_errorLine = line;
    99ce:	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    99d2:	strb	r3, [r5, #0]
  m_errorLine = line;
    99d4:	ldr	r3, [pc, #352]	; (9b38 <SdioCard::begin(SdioConfig)+0x220>)
    99d6:	b.n	9982 <SdioCard::begin(SdioConfig)+0x6a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    99d8:	mov	r1, r6
    99da:	mov	r0, sl
    99dc:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    99e0:	cmp	r0, #0
    99e2:	beq.n	99cc <SdioCard::begin(SdioConfig)+0xb4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    99e4:	bl	b4fc <micros>
    99e8:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    99ea:	cmp	r0, fp
    99ec:	bhi.n	99cc <SdioCard::begin(SdioConfig)+0xb4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    99ee:	ldr	r3, [pc, #332]	; (9b3c <SdioCard::begin(SdioConfig)+0x224>)
    99f0:	ldr	r2, [r3, #16]
    99f2:	cmp	r2, #0
    99f4:	bge.n	99c2 <SdioCard::begin(SdioConfig)+0xaa>
  m_ocr = SDHC_CMDRSP0;
    99f6:	ldr	r1, [r3, #16]
    99f8:	ldr	r2, [pc, #328]	; (9b44 <SdioCard::begin(SdioConfig)+0x22c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    99fa:	ldr	r0, [pc, #332]	; (9b48 <SdioCard::begin(SdioConfig)+0x230>)
  m_ocr = SDHC_CMDRSP0;
    99fc:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    99fe:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    9a00:	ldr	r3, [r3, #16]
    9a02:	lsls	r2, r3, #1
    m_highCapacity = true;
    9a04:	itt	mi
    9a06:	movmi	r3, #1
    9a08:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9a0c:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    9a10:	mov	r4, r0
    9a12:	cbnz	r0, 9a20 <SdioCard::begin(SdioConfig)+0x108>
  m_errorCode = code;
    9a14:	movs	r3, #2
  m_errorLine = line;
    9a16:	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    9a1a:	strb	r3, [r5, #0]
  m_errorLine = line;
    9a1c:	ldr	r3, [pc, #280]	; (9b38 <SdioCard::begin(SdioConfig)+0x220>)
    9a1e:	b.n	9952 <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    9a20:	movs	r1, #0
    9a22:	ldr	r0, [pc, #296]	; (9b4c <SdioCard::begin(SdioConfig)+0x234>)
    9a24:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    9a28:	mov	r4, r0
    9a2a:	cbnz	r0, 9a38 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    9a2c:	movs	r3, #3
  m_errorLine = line;
    9a2e:	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    9a32:	strb	r3, [r5, #0]
  m_errorLine = line;
    9a34:	ldr	r3, [pc, #256]	; (9b38 <SdioCard::begin(SdioConfig)+0x220>)
    9a36:	b.n	9952 <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9a38:	ldr	r6, [pc, #256]	; (9b3c <SdioCard::begin(SdioConfig)+0x224>)
    9a3a:	ldr.w	r8, [pc, #324]	; 9b80 <SdioCard::begin(SdioConfig)+0x268>
    9a3e:	ldr	r3, [r6, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9a40:	ldr	r1, [pc, #268]	; (9b50 <SdioCard::begin(SdioConfig)+0x238>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9a42:	lsrs	r3, r3, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9a44:	ldr	r0, [pc, #268]	; (9b54 <SdioCard::begin(SdioConfig)+0x23c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9a46:	lsls	r3, r3, #16
    9a48:	str.w	r3, [r8]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9a4c:	bl	92a4 <readReg16(unsigned long, void*)>
    9a50:	mov	r4, r0
    9a52:	cbnz	r0, 9a60 <SdioCard::begin(SdioConfig)+0x148>
  m_errorCode = code;
    9a54:	movs	r3, #7
  m_errorLine = line;
    9a56:	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    9a5a:	strb	r3, [r5, #0]
  m_errorLine = line;
    9a5c:	ldr	r3, [pc, #216]	; (9b38 <SdioCard::begin(SdioConfig)+0x220>)
    9a5e:	b.n	9952 <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9a60:	ldr	r1, [pc, #244]	; (9b58 <SdioCard::begin(SdioConfig)+0x240>)
    9a62:	ldr	r0, [pc, #248]	; (9b5c <SdioCard::begin(SdioConfig)+0x244>)
    9a64:	bl	92a4 <readReg16(unsigned long, void*)>
    9a68:	mov	r4, r0
    9a6a:	cbnz	r0, 9a78 <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
    9a6c:	movs	r3, #8
  m_errorLine = line;
    9a6e:	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    9a72:	strb	r3, [r5, #0]
  m_errorLine = line;
    9a74:	ldr	r3, [pc, #192]	; (9b38 <SdioCard::begin(SdioConfig)+0x220>)
    9a76:	b.n	9952 <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9a78:	ldr.w	r1, [r8]
    9a7c:	ldr	r0, [pc, #224]	; (9b60 <SdioCard::begin(SdioConfig)+0x248>)
    9a7e:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    9a82:	mov	r4, r0
    9a84:	cbnz	r0, 9a92 <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    9a86:	movs	r3, #5
  m_errorLine = line;
    9a88:	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    9a8c:	strb	r3, [r5, #0]
  m_errorLine = line;
    9a8e:	ldr	r3, [pc, #168]	; (9b38 <SdioCard::begin(SdioConfig)+0x220>)
    9a90:	b.n	9952 <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9a92:	ldr.w	r1, [r8]
    9a96:	ldr	r0, [pc, #204]	; (9b64 <SdioCard::begin(SdioConfig)+0x24c>)
    9a98:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    9a9c:	cbz	r0, 9ae6 <SdioCard::begin(SdioConfig)+0x1ce>
    9a9e:	movs	r1, #2
    9aa0:	ldr	r0, [pc, #196]	; (9b68 <SdioCard::begin(SdioConfig)+0x250>)
    9aa2:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    9aa6:	mov	r4, r0
    9aa8:	cbz	r0, 9ae6 <SdioCard::begin(SdioConfig)+0x1ce>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9aaa:	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9aac:	mov	r1, sp
    9aae:	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9ab2:	bic.w	r3, r3, #6
    9ab6:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9ab8:	ldr	r3, [r6, #40]	; 0x28
    9aba:	orr.w	r3, r3, #2
    9abe:	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9ac0:	mov.w	r3, #1048592	; 0x100010
    9ac4:	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9ac6:	bl	988c <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    9aca:	cbnz	r0, 9af2 <SdioCard::begin(SdioConfig)+0x1da>
  kHzSdClk = 25000;
    9acc:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    9ad0:	movs	r0, #5
    9ad2:	bl	8ec8 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    9ad6:	mov	r0, r2
    9ad8:	bl	8f70 <setSdclk(unsigned long)>
  if (enable) {
    9adc:	bl	90e8 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    9ae0:	movs	r3, #1
    9ae2:	strb	r3, [r7, #0]
  return true;
    9ae4:	b.n	9954 <SdioCard::begin(SdioConfig)+0x3c>
  m_errorCode = code;
    9ae6:	movs	r3, #20
  m_errorLine = line;
    9ae8:	movw	r2, #707	; 0x2c3
  m_errorCode = code;
    9aec:	strb	r3, [r5, #0]
  m_errorLine = line;
    9aee:	ldr	r3, [pc, #72]	; (9b38 <SdioCard::begin(SdioConfig)+0x220>)
    9af0:	b.n	9982 <SdioCard::begin(SdioConfig)+0x6a>
  if (highSpeedModeAsk && highspeedModeSupported) {
    9af2:	ldrb.w	r3, [sp, #13]
    9af6:	lsls	r3, r3, #30
    9af8:	bpl.n	9acc <SdioCard::begin(SdioConfig)+0x1b4>
    uint32_t m_errorLine_before = m_errorLine;
    9afa:	ldr	r6, [pc, #60]	; (9b38 <SdioCard::begin(SdioConfig)+0x220>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    9afc:	mov	r1, sp
    9afe:	ldr	r0, [pc, #108]	; (9b6c <SdioCard::begin(SdioConfig)+0x254>)
    uint8_t err_code_before = m_errorCode;
    9b00:	ldrb.w	r9, [r5]
    uint32_t m_errorLine_before = m_errorLine;
    9b04:	ldr.w	r8, [r6]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    9b08:	bl	988c <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    9b0c:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    9b10:	cbz	r0, 9b1a <SdioCard::begin(SdioConfig)+0x202>
    9b12:	and.w	r3, r3, #15
    9b16:	cmp	r3, #1
    9b18:	beq.n	9b24 <SdioCard::begin(SdioConfig)+0x20c>
      m_errorCode = err_code_before;
    9b1a:	strb.w	r9, [r5]
      m_errorLine = m_errorLine_before;
    9b1e:	str.w	r8, [r6]
    9b22:	b.n	9acc <SdioCard::begin(SdioConfig)+0x1b4>
      kHzSdClk = 50000;
    9b24:	movw	r2, #50000	; 0xc350
    9b28:	b.n	9ad0 <SdioCard::begin(SdioConfig)+0x1b8>
    9b2a:	nop
    9b2c:	.word	0x20015476
    9b30:	.word	0x200022d8
    9b34:	.word	0x20015477
    9b38:	.word	0x2000dfd8
    9b3c:	.word	0x402c0000
    9b40:	.word	0x40300000
    9b44:	.word	0x200141ec
    9b48:	.word	0x02090000
    9b4c:	.word	0x031a0000
    9b50:	.word	0x2001548a
    9b54:	.word	0x09090000
    9b58:	.word	0x2001547a
    9b5c:	.word	0x0a090000
    9b60:	.word	0x071b0000
    9b64:	.word	0x371a0000
    9b68:	.word	0x061a0000
    9b6c:	.word	0x80fffff1
    9b70:	.word	0x20015478
    9b74:	.word	0x081a0000
    9b78:	.word	0x29020000
    9b7c:	.word	0x000f4240
    9b80:	.word	0x200141f0

00009b84 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    9b84:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9b86:	ldr	r3, [pc, #148]	; (9c1c <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    9b88:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9b8a:	ldr	r2, [r3, #36]	; 0x24
    9b8c:	lsls	r0, r2, #22
    9b8e:	bmi.n	9bac <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b90:	ldr	r2, [r3, #40]	; 0x28
    9b92:	bic.w	r2, r2, #65536	; 0x10000
    9b96:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    9b98:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9b9a:	ldr	r2, [r3, #40]	; 0x28
    9b9c:	orr.w	r2, r2, #131072	; 0x20000
    9ba0:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9ba2:	ldr	r2, [r3, #40]	; 0x28
    9ba4:	orr.w	r2, r2, #65536	; 0x10000
    9ba8:	str	r2, [r3, #40]	; 0x28
    interrupts();
    9baa:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    9bac:	ldr	r0, [pc, #112]	; (9c20 <SdioCard::readData(unsigned char*)+0x9c>)
    9bae:	bl	9078 <waitTimeout(bool (*)())>
    9bb2:	cbz	r0, 9bc6 <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    9bb4:	ldr	r3, [pc, #108]	; (9c24 <SdioCard::readData(unsigned char*)+0xa0>)
    9bb6:	movs	r2, #26
    9bb8:	strb	r2, [r3, #0]
  m_errorLine = line;
    9bba:	movw	r2, #854	; 0x356
    9bbe:	ldr	r3, [pc, #104]	; (9c28 <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9bc0:	movs	r0, #0
  m_errorLine = line;
    9bc2:	str	r2, [r3, #0]
}
    9bc4:	pop	{r3, r4, r5, pc}
    9bc6:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    9bca:	ldr	r5, [pc, #80]	; (9c1c <SdioCard::readData(unsigned char*)+0x98>)
    9bcc:	ldr	r3, [r5, #36]	; 0x24
    9bce:	lsls	r1, r3, #20
    9bd0:	bpl.n	9bcc <SdioCard::readData(unsigned char*)+0x48>
    9bd2:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9bd4:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    9bd8:	ldr	r0, [r5, #32]
    9bda:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9bde:	cmp	r3, r1
    9be0:	bne.n	9bd8 <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    9be2:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9be4:	cmp	r4, r2
    9be6:	bne.n	9bcc <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    9be8:	ldr	r0, [pc, #64]	; (9c2c <SdioCard::readData(unsigned char*)+0xa8>)
    9bea:	bl	9078 <waitTimeout(bool (*)())>
    9bee:	cbz	r0, 9bfe <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    9bf0:	ldr	r3, [pc, #48]	; (9c24 <SdioCard::readData(unsigned char*)+0xa0>)
    9bf2:	movs	r2, #29
    9bf4:	strb	r2, [r3, #0]
  m_errorLine = line;
    9bf6:	movw	r2, #865	; 0x361
    9bfa:	ldr	r3, [pc, #44]	; (9c28 <SdioCard::readData(unsigned char*)+0xa4>)
    9bfc:	b.n	9bc0 <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    9bfe:	ldr	r2, [r5, #48]	; 0x30
    9c00:	ldr	r3, [pc, #44]	; (9c30 <SdioCard::readData(unsigned char*)+0xac>)
    9c02:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9c04:	ldr	r2, [r3, #0]
    9c06:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9c08:	ldr	r2, [r3, #0]
    9c0a:	lsls	r2, r2, #30
    9c0c:	bpl.n	9bc4 <SdioCard::readData(unsigned char*)+0x40>
    9c0e:	ldr	r2, [r3, #0]
    9c10:	ldr	r3, [pc, #32]	; (9c34 <SdioCard::readData(unsigned char*)+0xb0>)
    9c12:	tst	r2, r3
    9c14:	ite	eq
    9c16:	moveq	r0, #1
    9c18:	movne	r0, #0
    9c1a:	b.n	9bc4 <SdioCard::readData(unsigned char*)+0x40>
    9c1c:	.word	0x402c0000
    9c20:	.word	0x00008f31
    9c24:	.word	0x200022d8
    9c28:	.word	0x2000dfd8
    9c2c:	.word	0x00008f59
    9c30:	.word	0x200147f8
    9c34:	.word	0x117f0000

00009c38 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    9c38:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9c3a:	ldr	r0, [pc, #80]	; (9c8c <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    9c3c:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9c3e:	bl	909c <yieldTimeout(bool (*)())>
    9c42:	cbz	r0, 9c56 <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    9c44:	ldr	r3, [pc, #72]	; (9c90 <SdioCard::readStart(unsigned long)+0x58>)
    9c46:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9c48:	movs	r0, #0
  m_errorCode = code;
    9c4a:	strb	r2, [r3, #0]
  m_errorLine = line;
    9c4c:	movw	r2, #945	; 0x3b1
    9c50:	ldr	r3, [pc, #64]	; (9c94 <SdioCard::readStart(unsigned long)+0x5c>)
    9c52:	str	r2, [r3, #0]
}
    9c54:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9c56:	ldr	r3, [pc, #64]	; (9c98 <SdioCard::readStart(unsigned long)+0x60>)
    9c58:	ldr	r2, [r3, #40]	; 0x28
    9c5a:	orr.w	r2, r2, #65536	; 0x10000
    9c5e:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9c60:	mov.w	r2, #512	; 0x200
    9c64:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9c66:	ldr	r3, [pc, #52]	; (9c9c <SdioCard::readStart(unsigned long)+0x64>)
    9c68:	ldrb	r3, [r3, #0]
    9c6a:	cbnz	r3, 9c6e <SdioCard::readStart(unsigned long)+0x36>
    9c6c:	lsls	r4, r4, #9
    9c6e:	mov	r1, r4
    9c70:	ldr	r0, [pc, #44]	; (9ca0 <SdioCard::readStart(unsigned long)+0x68>)
    9c72:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    9c76:	cmp	r0, #0
    9c78:	bne.n	9c54 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    9c7a:	ldr	r3, [pc, #20]	; (9c90 <SdioCard::readStart(unsigned long)+0x58>)
    9c7c:	movs	r2, #12
    9c7e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9c80:	movw	r2, #957	; 0x3bd
    9c84:	ldr	r3, [pc, #12]	; (9c94 <SdioCard::readStart(unsigned long)+0x5c>)
    9c86:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    9c88:	b.n	9c54 <SdioCard::readStart(unsigned long)+0x1c>
    9c8a:	nop
    9c8c:	.word	0x00009291
    9c90:	.word	0x200022d8
    9c94:	.word	0x2000dfd8
    9c98:	.word	0x402c0000
    9c9c:	.word	0x20015478
    9ca0:	.word	0x123a0030

00009ca4 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9ca4:	push	{r4, r5, r6, r7, lr}
    9ca6:	ldrb	r5, [r0, #8]
    9ca8:	sub.w	sp, sp, #516	; 0x204
    9cac:	mov	r4, r0
    9cae:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9cb0:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9cb4:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9cb6:	beq.n	9cf8 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9cb8:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9cba:	ldr	r0, [pc, #132]	; (9d40 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    9cbc:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9cc0:	ite	eq
    9cc2:	moveq	r4, r2
    9cc4:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9cc6:	mov	r2, r4
    9cc8:	bl	932c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9ccc:	mov	r5, r0
    9cce:	cbnz	r0, 9ce6 <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    9cd0:	ldr	r3, [pc, #112]	; (9d44 <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    9cd2:	movs	r2, #11
    9cd4:	strb	r2, [r3, #0]
  m_errorLine = line;
    9cd6:	mov.w	r2, #884	; 0x374
    9cda:	ldr	r3, [pc, #108]	; (9d48 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    9cdc:	str	r2, [r3, #0]
}
    9cde:	mov	r0, r5
    9ce0:	add.w	sp, sp, #516	; 0x204
    9ce4:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    9ce6:	cmp	r4, r6
    9ce8:	beq.n	9cde <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    9cea:	mov.w	r2, #512	; 0x200
    9cee:	mov	r1, sp
    9cf0:	mov	r0, r6
    9cf2:	bl	a000 <memcpy>
    9cf6:	b.n	9cde <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    9cf8:	bl	9624 <waitTransferComplete()>
    9cfc:	cmp	r0, #0
    9cfe:	beq.n	9cde <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9d00:	ldrb	r3, [r4, #9]
    9d02:	cmp	r3, #1
    9d04:	bne.n	9d0c <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    9d06:	ldr	r3, [r4, #4]
    9d08:	cmp	r3, r7
    9d0a:	beq.n	9d2a <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    9d0c:	ldr	r3, [r4, #0]
    9d0e:	mov	r0, r4
    9d10:	ldr	r3, [r3, #32]
    9d12:	blx	r3
    9d14:	cmp	r0, #0
    9d16:	beq.n	9cde <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    9d18:	mov	r1, r7
    9d1a:	mov	r0, r4
    9d1c:	bl	9c38 <SdioCard::readStart(unsigned long)>
    9d20:	cmp	r0, #0
    9d22:	beq.n	9cde <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    9d24:	movs	r3, #1
      m_curSector = sector;
    9d26:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9d28:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    9d2a:	mov	r1, r6
    9d2c:	mov	r0, r4
    9d2e:	bl	9b84 <SdioCard::readData(unsigned char*)>
    9d32:	cmp	r0, #0
    9d34:	beq.n	9cde <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    9d36:	ldr	r3, [r4, #4]
  return true;
    9d38:	mov	r5, r0
    m_curSector++;
    9d3a:	adds	r3, #1
    9d3c:	str	r3, [r4, #4]
    9d3e:	b.n	9cde <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    9d40:	.word	0x113a0011
    9d44:	.word	0x200022d8
    9d48:	.word	0x2000dfd8

00009d4c <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    9d4c:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9d4e:	ldr	r2, [pc, #76]	; (9d9c <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    9d50:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    9d52:	mov	r6, r1
  m_curState = IDLE_STATE;
    9d54:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9d56:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9d58:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9d5a:	ldr	r0, [pc, #68]	; (9da0 <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9d5c:	bic.w	r3, r3, #65536	; 0x10000
    9d60:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9d62:	bl	9208 <cardCommand(unsigned long, unsigned long)>
    9d66:	mov	r4, r0
    9d68:	cbnz	r0, 9d7c <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    9d6a:	ldr	r3, [pc, #56]	; (9da4 <SdioCard::stopTransmission(bool)+0x58>)
    9d6c:	movs	r2, #9
    9d6e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9d70:	movw	r2, #979	; 0x3d3
    9d74:	ldr	r3, [pc, #48]	; (9da8 <SdioCard::stopTransmission(bool)+0x5c>)
    9d76:	str	r2, [r3, #0]
}
    9d78:	mov	r0, r4
    9d7a:	pop	{r4, r5, r6, pc}
  if (blocking) {
    9d7c:	cmp	r6, #0
    9d7e:	beq.n	9d78 <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    9d80:	ldr	r0, [pc, #40]	; (9dac <SdioCard::stopTransmission(bool)+0x60>)
    9d82:	bl	909c <yieldTimeout(bool (*)())>
    9d86:	cmp	r0, #0
    9d88:	beq.n	9d78 <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    9d8a:	ldr	r3, [pc, #24]	; (9da4 <SdioCard::stopTransmission(bool)+0x58>)
    9d8c:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    9d8e:	mov	r4, r5
  m_errorCode = code;
    9d90:	strb	r2, [r3, #0]
  m_errorLine = line;
    9d92:	movw	r2, #983	; 0x3d7
    9d96:	ldr	r3, [pc, #16]	; (9da8 <SdioCard::stopTransmission(bool)+0x5c>)
    9d98:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    9d9a:	b.n	9d78 <SdioCard::stopTransmission(bool)+0x2c>
    9d9c:	.word	0x402c0000
    9da0:	.word	0x0cdb0000
    9da4:	.word	0x200022d8
    9da8:	.word	0x2000dfd8
    9dac:	.word	0x00008f11

00009db0 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    9db0:	push	{r4, lr}
    9db2:	mov	r4, r0
  if (!waitTransferComplete()) {
    9db4:	bl	9624 <waitTransferComplete()>
    9db8:	cbz	r0, 9dca <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    9dba:	ldrb	r3, [r4, #9]
    9dbc:	cbz	r3, 9dca <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    9dbe:	mov	r0, r4
    9dc0:	movs	r1, #1
}
    9dc2:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    9dc6:	b.w	9d4c <SdioCard::stopTransmission(bool)>
}
    9dca:	pop	{r4, pc}

00009dcc <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    9dcc:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9dce:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9dd0:	tst.w	r3, #2031616	; 0x1f0000
    9dd4:	beq.n	9dce <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    9dd6:	ldr	r0, [r0, #116]	; 0x74
	}
    9dd8:	uxtb	r0, r0
    9dda:	bx	lr

00009ddc <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    9ddc:	push	{r0, r1, r2, r4, r5, lr}
    9dde:	add	r3, sp, #8
    9de0:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    9de4:	ldrb	r2, [r0, #19]
    9de6:	mov	r3, r1
    9de8:	cmp	r2, #0
    9dea:	beq.n	9e60 <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    9dec:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9dee:	ldrb	r2, [r0, #19]
    9df0:	lsls	r1, r2, #31
    9df2:	bpl.n	9e06 <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    9df4:	mov.w	r4, #3758153728	; 0xe000e000
    9df8:	ldr	r5, [r0, #20]
    9dfa:	ldr.w	r1, [r4, #384]	; 0x180
    9dfe:	ands	r1, r5
    9e00:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    9e02:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    9e06:	lsls	r5, r2, #30
    9e08:	bpl.n	9e1c <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    9e0a:	mov.w	r4, #3758153728	; 0xe000e000
    9e0e:	ldr	r5, [r0, #24]
    9e10:	ldr.w	r1, [r4, #388]	; 0x184
    9e14:	ands	r1, r5
    9e16:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    9e18:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    9e1c:	lsls	r4, r2, #29
    9e1e:	bpl.n	9e32 <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    9e20:	mov.w	r4, #3758153728	; 0xe000e000
    9e24:	ldr	r5, [r0, #28]
    9e26:	ldr.w	r1, [r4, #392]	; 0x188
    9e2a:	ands	r1, r5
    9e2c:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    9e2e:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    9e32:	lsls	r1, r2, #28
    9e34:	bpl.n	9e48 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    9e36:	mov.w	r4, #3758153728	; 0xe000e000
    9e3a:	ldr	r5, [r0, #32]
    9e3c:	ldr.w	r1, [r4, #396]	; 0x18c
    9e40:	ands	r1, r5
    9e42:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    9e44:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    9e48:	lsls	r2, r2, #27
    9e4a:	bpl.n	9e5e <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    9e4c:	mov.w	r1, #3758153728	; 0xe000e000
    9e50:	ldr	r4, [r0, #36]	; 0x24
    9e52:	ldr.w	r2, [r1, #400]	; 0x190
    9e56:	ands	r2, r4
    9e58:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    9e5a:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    9e5e:	cpsie	i
		if (settings.clock() != _clock) {
    9e60:	ldr	r2, [r0, #8]
    9e62:	cmp	r3, r2
    9e64:	beq.n	9eb4 <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    9e66:	ldr	r2, [pc, #112]	; (9ed8 <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    9e68:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    9e6a:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9e6c:	ldr	r1, [pc, #108]	; (9edc <SPIClass::beginTransaction(SPISettings)+0x100>)
    9e6e:	ubfx	r4, r2, #4, #2
    9e72:	ubfx	r2, r2, #26, #3
    9e76:	ldr.w	r4, [r1, r4, lsl #2]
    9e7a:	adds	r2, #1
    9e7c:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    9e80:	cbz	r3, 9ece <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    9e82:	cmp	r3, r1
    9e84:	bhi.n	9e9e <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    9e86:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    9e8a:	udiv	r1, r1, r2
    9e8e:	cmp	r3, r1
    9e90:	bcs.n	9e94 <SPIClass::beginTransaction(SPISettings)+0xb8>
    9e92:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    9e94:	cmp.w	r2, #258	; 0x102
    9e98:	bcs.n	9ea2 <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    9e9a:	cmp	r2, #2
    9e9c:	bhi.n	9ea6 <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    9e9e:	movs	r3, #0
    9ea0:	b.n	9ea8 <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    9ea2:	movw	r2, #257	; 0x101
				div = d-2;
    9ea6:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    9ea8:	lsrs	r1, r3, #1
    9eaa:	lsls	r2, r1, #16
    9eac:	orr.w	r2, r2, r1, lsl #8
    9eb0:	orrs	r3, r2
    9eb2:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9eb4:	ldr	r3, [r0, #0]
		port().CR = 0;
    9eb6:	movs	r2, #0
    9eb8:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9eba:	movs	r2, #3
    9ebc:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    9ebe:	ldr	r2, [r0, #12]
    9ec0:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    9ec2:	ldr	r2, [sp, #4]
    9ec4:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    9ec6:	movs	r2, #1
    9ec8:	str	r2, [r3, #16]
	}
    9eca:	add	sp, #12
    9ecc:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    9ece:	cmp	r4, r2
    9ed0:	bcc.n	9ea8 <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9ed2:	mov	r2, r1
    9ed4:	b.n	9e92 <SPIClass::beginTransaction(SPISettings)+0xb6>
    9ed6:	nop
    9ed8:	.word	0x400fc000
    9edc:	.word	0x20000604

00009ee0 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    9ee0:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    9ee4:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    9ee6:	ldr	r0, [r0, #0]
    9ee8:	bl	9ddc <SPIClass::beginTransaction(SPISettings)>
}
    9eec:	pop	{r3, pc}

00009eee <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    9eee:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    9ef0:	ldrb	r2, [r3, #19]
    9ef2:	cbz	r2, 9f3a <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    9ef4:	lsls	r0, r2, #31
    9ef6:	bpl.n	9f02 <SdSpiArduinoDriver::deactivate()+0x14>
    9ef8:	ldr	r0, [r3, #40]	; 0x28
    9efa:	mov.w	r1, #3758153728	; 0xe000e000
    9efe:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    9f02:	lsls	r1, r2, #30
    9f04:	bpl.n	9f10 <SdSpiArduinoDriver::deactivate()+0x22>
    9f06:	ldr	r0, [r3, #44]	; 0x2c
    9f08:	mov.w	r1, #3758153728	; 0xe000e000
    9f0c:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9f10:	lsls	r0, r2, #29
    9f12:	bpl.n	9f1e <SdSpiArduinoDriver::deactivate()+0x30>
    9f14:	ldr	r0, [r3, #48]	; 0x30
    9f16:	mov.w	r1, #3758153728	; 0xe000e000
    9f1a:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    9f1e:	lsls	r1, r2, #28
    9f20:	bpl.n	9f2c <SdSpiArduinoDriver::deactivate()+0x3e>
    9f22:	ldr	r0, [r3, #52]	; 0x34
    9f24:	mov.w	r1, #3758153728	; 0xe000e000
    9f28:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    9f2c:	lsls	r2, r2, #27
    9f2e:	bpl.n	9f3a <SdSpiArduinoDriver::deactivate()+0x4c>
    9f30:	ldr	r2, [r3, #56]	; 0x38
    9f32:	mov.w	r3, #3758153728	; 0xe000e000
    9f36:	str.w	r2, [r3, #272]	; 0x110
}
    9f3a:	bx	lr

00009f3c <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    9f3c:	ldr	r0, [r0, #0]
    9f3e:	b.w	4d82 <SPIClass::end()>

00009f42 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    9f42:	ldr	r3, [r0, #0]
    9f44:	movs	r1, #255	; 0xff
    9f46:	ldr	r0, [r3, #0]
    9f48:	b.w	9dcc <SPIClass::transfer(unsigned char) [clone .isra.0]>

00009f4c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9f4c:	push	{r0, r1, r2, r4, r5, lr}
    9f4e:	mov	r4, r1
    9f50:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    9f52:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9f54:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    9f56:	mov	r0, r4
    9f58:	bl	9fbc <memset>
		transfer(buf, buf, count);
    9f5c:	ldr	r0, [r5, #0]
    9f5e:	ldr	r3, [sp, #4]
    9f60:	mov	r2, r4
    9f62:	mov	r1, r4
    9f64:	bl	4d2c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9f68:	movs	r0, #0
    9f6a:	add	sp, #12
    9f6c:	pop	{r4, r5, pc}

00009f6e <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    9f6e:	ldr	r3, [r0, #0]
    9f70:	ldr	r0, [r3, #0]
    9f72:	b.w	9dcc <SPIClass::transfer(unsigned char) [clone .isra.0]>

00009f76 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9f76:	subs	r3, r2, #1
    9f78:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9f7c:	push	{r4, r5, r6, lr}
    9f7e:	mov	r6, r0
    9f80:	sub.w	sp, sp, #512	; 0x200
    9f84:	mov	r4, r1
    9f86:	mov	r5, r2
  if (0 < count && count <= 512) {
    9f88:	bcc.n	9f9e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    9f8a:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9f8c:	cmp	r4, r5
    9f8e:	beq.n	9fb0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    9f90:	ldr	r3, [r6, #0]
    9f92:	ldrb.w	r1, [r4], #1
    9f96:	ldr	r0, [r3, #0]
    9f98:	bl	9dcc <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    9f9c:	b.n	9f8c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    9f9e:	mov	r0, sp
    9fa0:	bl	a000 <memcpy>
    9fa4:	mov	r2, sp
    9fa6:	mov	r3, r5
    9fa8:	ldr	r0, [r6, #0]
    9faa:	mov	r1, r2
    9fac:	bl	4d2c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    9fb0:	add.w	sp, sp, #512	; 0x200
    9fb4:	pop	{r4, r5, r6, pc}

00009fb6 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    9fb6:	b.w	bc98 <digitalWrite>
	...

00009fbc <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    9fbc:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    9fbe:	cbz	r2, 9ffc <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    9fc0:	cmp	r2, #16
    blt     .L_bytewise
    9fc2:	blt.n	9ff4 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    9fc4:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    9fc8:	cbz	r3, 9fd8 <memset+0x1c>
    rsb     r3, #8
    9fca:	rsb	r3, r3, #8
    subs    r2, r3
    9fce:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    9fd0:	subs	r3, #1
    strb    r1, [r0], #1
    9fd2:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    9fd6:	bgt.n	9fd0 <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    9fd8:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    9fda:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    9fde:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    9fe2:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    9fe4:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    9fe6:	subs	r3, #1
    strd    r1, r12, [r0], #8
    9fe8:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    9fec:	bgt.n	9fe6 <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    9fee:	ands.w	r2, r2, #7
    beq     .L_done
    9ff2:	beq.n	9ffc <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    9ff4:	subs	r2, #1
    strb    r1, [r0], #1
    9ff6:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    9ffa:	bgt.n	9ff4 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    9ffc:	pop	{r0, pc}
    9ffe:	nop

0000a000 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a000:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a002:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a006:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a00a:	bne.n	a0e8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a00c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a00e:	bcc.n	a094 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a010:	ldr.w	r3, [r1], #4
    a014:	str.w	r3, [r0], #4
    a018:	ldr.w	r3, [r1], #4
    a01c:	str.w	r3, [r0], #4
    a020:	ldr.w	r3, [r1], #4
    a024:	str.w	r3, [r0], #4
    a028:	ldr.w	r3, [r1], #4
    a02c:	str.w	r3, [r0], #4
    a030:	ldr.w	r3, [r1], #4
    a034:	str.w	r3, [r0], #4
    a038:	ldr.w	r3, [r1], #4
    a03c:	str.w	r3, [r0], #4
    a040:	ldr.w	r3, [r1], #4
    a044:	str.w	r3, [r0], #4
    a048:	ldr.w	r3, [r1], #4
    a04c:	str.w	r3, [r0], #4
    a050:	ldr.w	r3, [r1], #4
    a054:	str.w	r3, [r0], #4
    a058:	ldr.w	r3, [r1], #4
    a05c:	str.w	r3, [r0], #4
    a060:	ldr.w	r3, [r1], #4
    a064:	str.w	r3, [r0], #4
    a068:	ldr.w	r3, [r1], #4
    a06c:	str.w	r3, [r0], #4
    a070:	ldr.w	r3, [r1], #4
    a074:	str.w	r3, [r0], #4
    a078:	ldr.w	r3, [r1], #4
    a07c:	str.w	r3, [r0], #4
    a080:	ldr.w	r3, [r1], #4
    a084:	str.w	r3, [r0], #4
    a088:	ldr.w	r3, [r1], #4
    a08c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a090:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a092:	bcs.n	a010 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a094:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a096:	bcc.n	a0bc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a098:	ldr.w	r3, [r1], #4
    a09c:	str.w	r3, [r0], #4
    a0a0:	ldr.w	r3, [r1], #4
    a0a4:	str.w	r3, [r0], #4
    a0a8:	ldr.w	r3, [r1], #4
    a0ac:	str.w	r3, [r0], #4
    a0b0:	ldr.w	r3, [r1], #4
    a0b4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a0b8:	subs	r2, #16
	bhs	.Lmid_block_loop
    a0ba:	bcs.n	a098 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a0bc:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a0be:	bcc.n	a0cc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a0c0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a0c4:	str.w	r3, [r0], #4
	subs	r2, #4
    a0c8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a0ca:	bcs.n	a0c0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a0cc:	adds	r2, #4
	beq	.Ldone
    a0ce:	beq.n	a0e2 <memcpy+0xe2>

	lsls	r2, r2, #31
    a0d0:	lsls	r2, r2, #31
	itt ne
    a0d2:	itt	ne
	ldrbne  r3, [r1], #1
    a0d4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a0d8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a0dc:	bcc.n	a0e2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a0de:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a0e0:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a0e2:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a0e4:	bx	lr
    a0e6:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a0e8:	cmp	r2, #8
	blo	.Lbyte_copy
    a0ea:	bcc.n	a114 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a0ec:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a0ee:	beq.n	a00c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a0f0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a0f4:	beq.n	a00c <memcpy+0xc>

	rsb	r3, #4
    a0f6:	rsb	r3, r3, #4
	subs	r2, r3
    a0fa:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a0fc:	lsls	r3, r3, #31
	itt ne
    a0fe:	itt	ne
	ldrbne  r3, [r1], #1
    a100:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a104:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a108:	bcc.n	a00c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a10a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a10e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a112:	b.n	a00c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a114:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a116:	bcc.n	a0cc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a118:	subs	r2, #1
	ldrb    r3, [r1], #1
    a11a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a11e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a122:	bcs.n	a118 <memcpy+0x118>

	ldrb	r3, [r1]
    a124:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a126:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a128:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a12a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a12c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a12e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a130:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a132:	bx	lr

0000a134 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a134:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a136:	ldr	r4, [pc, #80]	; (a188 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a138:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a13c:	ldr	r5, [pc, #76]	; (a18c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a13e:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a142:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a146:	ldr	r7, [pc, #72]	; (a190 <rx_queue_transfer+0x5c>)
    a148:	add.w	r5, r5, r0, lsl #5
{
    a14c:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a14e:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a152:	mov	r1, r4
    a154:	ldrh	r2, [r7, #0]
    a156:	mov	r0, r5
    a158:	bl	b1d8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a15c:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a15e:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    a160:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a164:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    a168:	adds	r4, #32
	} while (location < end_addr);
    a16a:	cmp	r3, r4
    a16c:	bhi.n	a164 <rx_queue_transfer+0x30>
	asm("dsb");
    a16e:	dsb	sy
	asm("isb");
    a172:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a176:	movs	r0, #3
    a178:	mov	r1, r5
    a17a:	bl	b228 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a17e:	mov.w	r3, #131072	; 0x20000
    a182:	str.w	r3, [r6, #268]	; 0x10c
}
    a186:	pop	{r3, r4, r5, r6, r7, pc}
    a188:	.word	0x20004b40
    a18c:	.word	0x20005b40
    a190:	.word	0x200153ec

0000a194 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a194:	ldr	r3, [r0, #4]
    a196:	ldr	r2, [pc, #136]	; (a220 <rx_event+0x8c>)
    a198:	ubfx	r3, r3, #16, #15
{
    a19c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a1a0:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    a1a2:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a1a4:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a1a6:	cmp	r4, #0
    a1a8:	ble.n	a1f2 <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    a1aa:	ldr	r2, [pc, #120]	; (a224 <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    a1ac:	uxth.w	sl, r4
		if (head != rx_tail) {
    a1b0:	ldr	r0, [pc, #116]	; (a228 <rx_event+0x94>)
		uint32_t head = rx_head;
    a1b2:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    a1b4:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a1b6:	uxtb	r3, r1
		if (head != rx_tail) {
    a1b8:	ldr.w	r8, [pc, #128]	; a23c <rx_event+0xa8>
    a1bc:	cmp	r1, r0
    a1be:	ldr	r7, [pc, #108]	; (a22c <rx_event+0x98>)
    a1c0:	ldr	r1, [pc, #108]	; (a230 <rx_event+0x9c>)
    a1c2:	beq.n	a1fc <rx_event+0x68>
			uint32_t ii = rx_list[head];
    a1c4:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    a1c8:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a1cc:	rsb	r0, r6, #512	; 0x200
    a1d0:	cmp	r4, r0
    a1d2:	bhi.n	a1fc <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a1d4:	ldr	r3, [pc, #92]	; (a234 <rx_event+0xa0>)
    a1d6:	add.w	r0, r6, r9, lsl #9
    a1da:	mov	r2, r4
				rx_count[ii] = count + len;
    a1dc:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a1de:	add.w	r1, r3, r5, lsl #9
    a1e2:	add	r0, r3
    a1e4:	bl	a000 <memcpy>
				rx_available += len;
    a1e8:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    a1ea:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    a1ee:	add	r3, r4
    a1f0:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    a1f2:	mov	r0, r5
	}
}
    a1f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    a1f8:	b.w	a134 <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    a1fc:	adds	r3, #1
		rx_index[i] = 0;
    a1fe:	movs	r6, #0
    a200:	ldr	r0, [pc, #52]	; (a238 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    a202:	cmp	r3, #9
		rx_count[i] = len;
    a204:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    a208:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a20c:	it	cs
    a20e:	movcs	r3, r6
		rx_list[head] = i;
    a210:	strb	r5, [r1, r3]
		rx_head = head;
    a212:	uxtb	r3, r3
    a214:	strb	r3, [r2, #0]
		rx_available += len;
    a216:	ldr	r3, [r7, #0]
    a218:	add	r4, r3
    a21a:	str	r4, [r7, #0]
}
    a21c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a220:	.word	0x200153ec
    a224:	.word	0x200155cb
    a228:	.word	0x200155db
    a22c:	.word	0x20014cb8
    a230:	.word	0x200155cd
    a234:	.word	0x20004b40
    a238:	.word	0x200153dc
    a23c:	.word	0x200153cc

0000a240 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a240:	ldr	r3, [pc, #112]	; (a2b4 <usb_serial_flush_callback+0x74>)
{
    a242:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    a246:	ldrb	r2, [r3, #0]
    a248:	and.w	r3, r2, #255	; 0xff
    a24c:	cbnz	r2, a2ae <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    a24e:	ldr	r2, [pc, #104]	; (a2b8 <usb_serial_flush_callback+0x78>)
    a250:	ldrb	r2, [r2, #0]
    a252:	cbz	r2, a2ae <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    a254:	ldr	r7, [pc, #100]	; (a2bc <usb_serial_flush_callback+0x7c>)
    a256:	ldrh	r5, [r7, #0]
    a258:	cbz	r5, a2ae <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a25a:	ldr	r6, [pc, #100]	; (a2c0 <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a25c:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a260:	ldr	r1, [pc, #96]	; (a2c4 <usb_serial_flush_callback+0x84>)
    a262:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a264:	ldr	r4, [pc, #96]	; (a2c8 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    a266:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a26a:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a26e:	mov	r2, r5
    a270:	mov	r0, r8
    a272:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a274:	add	r5, r4
    a276:	bl	b1d8 <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    a27a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a27e:	mov.w	r3, #3758153728	; 0xe000e000
    a282:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a286:	adds	r4, #32
	} while (location < end_addr);
    a288:	cmp	r5, r4
    a28a:	bhi.n	a282 <usb_serial_flush_callback+0x42>
	asm("dsb");
    a28c:	dsb	sy
	asm("isb");
    a290:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a294:	movs	r0, #3
    a296:	mov	r1, r8
    a298:	bl	b204 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a29c:	ldrb	r3, [r6, #0]
    a29e:	movs	r2, #0
    a2a0:	adds	r3, #1
	tx_available = 0;
    a2a2:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    a2a4:	uxtb	r3, r3
    a2a6:	cmp	r3, #3
    a2a8:	ite	ls
    a2aa:	strbls	r3, [r6, #0]
    a2ac:	strbhi	r2, [r6, #0]
}
    a2ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2b2:	nop
    a2b4:	.word	0x200155e1
    a2b8:	.word	0x200155e3
    a2bc:	.word	0x20015470
    a2c0:	.word	0x200155df
    a2c4:	.word	0x20005cc0
    a2c8:	.word	0x20005dc0

0000a2cc <usb_serial_reset>:
}
    a2cc:	bx	lr
	...

0000a2d0 <usb_serial_configure>:
	if (usb_high_speed) {
    a2d0:	ldr	r3, [pc, #180]	; (a388 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a2d2:	movs	r2, #128	; 0x80
    a2d4:	movs	r1, #0
    a2d6:	ldr	r0, [pc, #180]	; (a38c <usb_serial_configure+0xbc>)
{
    a2d8:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a2da:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a2dc:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a2de:	ldr	r5, [pc, #176]	; (a390 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    a2e0:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    a2e2:	ldr	r6, [pc, #176]	; (a394 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    a2e4:	ite	eq
    a2e6:	moveq	r3, #64	; 0x40
    a2e8:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a2ec:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a2ee:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a2f0:	bl	9fbc <memset>
	tx_head = 0;
    a2f4:	ldr	r3, [pc, #160]	; (a398 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a2f6:	mov.w	r2, #256	; 0x100
    a2fa:	mov	r1, r4
    a2fc:	ldr	r0, [pc, #156]	; (a39c <usb_serial_configure+0xcc>)
	tx_head = 0;
    a2fe:	strb	r4, [r3, #0]
	tx_available = 0;
    a300:	ldr	r3, [pc, #156]	; (a3a0 <usb_serial_configure+0xd0>)
    a302:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a304:	bl	9fbc <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a308:	movs	r2, #16
    a30a:	mov	r1, r4
    a30c:	ldr	r0, [pc, #148]	; (a3a4 <usb_serial_configure+0xd4>)
    a30e:	bl	9fbc <memset>
	memset(rx_index, 0, sizeof(rx_index));
    a312:	movs	r2, #16
    a314:	mov	r1, r4
    a316:	ldr	r0, [pc, #144]	; (a3a8 <usb_serial_configure+0xd8>)
    a318:	bl	9fbc <memset>
	rx_head = 0;
    a31c:	ldr	r3, [pc, #140]	; (a3ac <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a31e:	mov	r2, r4
    a320:	movs	r1, #16
	rx_head = 0;
    a322:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a324:	movs	r0, #2
	rx_tail = 0;
    a326:	ldr	r3, [pc, #136]	; (a3b0 <usb_serial_configure+0xe0>)
    a328:	strb	r4, [r3, #0]
	rx_available = 0;
    a32a:	ldr	r3, [pc, #136]	; (a3b4 <usb_serial_configure+0xe4>)
    a32c:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a32e:	mov	r3, r4
    a330:	bl	b198 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a334:	ldr	r3, [pc, #128]	; (a3b8 <usb_serial_configure+0xe8>)
    a336:	mov	r2, r4
    a338:	ldrh	r1, [r6, #0]
    a33a:	movs	r0, #3
    a33c:	bl	b158 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a340:	mov	r3, r4
    a342:	movs	r2, #1
    a344:	ldrh	r1, [r5, #0]
    a346:	movs	r0, #3
    a348:	bl	b198 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a34c:	mov	r0, r4
    a34e:	adds	r4, #1
    a350:	bl	a134 <rx_queue_transfer>
    a354:	cmp	r4, #8
    a356:	bne.n	a34c <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    a358:	ldr	r3, [pc, #96]	; (a3bc <usb_serial_configure+0xec>)
    a35a:	ldr	r2, [pc, #100]	; (a3c0 <usb_serial_configure+0xf0>)
    a35c:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    a35e:	movs	r2, #0
    a360:	ldr	r3, [pc, #96]	; (a3c4 <usb_serial_configure+0xf4>)
    a362:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a366:	movs	r2, #74	; 0x4a
    a368:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a36c:	ldr.w	r2, [r3, #328]	; 0x148
    a370:	orr.w	r2, r2, #16777216	; 0x1000000
    a374:	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    a378:	ldr	r3, [pc, #76]	; (a3c8 <usb_serial_configure+0xf8>)
    a37a:	cbz	r3, a386 <usb_serial_configure+0xb6>
    a37c:	ldr	r2, [pc, #76]	; (a3cc <usb_serial_configure+0xfc>)
    a37e:	ldrb	r3, [r2, #0]
    a380:	orr.w	r3, r3, #1
    a384:	strb	r3, [r2, #0]
}
    a386:	pop	{r4, r5, r6, pc}
    a388:	.word	0x200155e4
    a38c:	.word	0x20005cc0
    a390:	.word	0x20015472
    a394:	.word	0x200153ec
    a398:	.word	0x200155df
    a39c:	.word	0x20005b40
    a3a0:	.word	0x20015470
    a3a4:	.word	0x200153cc
    a3a8:	.word	0x200153dc
    a3ac:	.word	0x200155cb
    a3b0:	.word	0x200155db
    a3b4:	.word	0x20014cb8
    a3b8:	.word	0x0000a195
    a3bc:	.word	0x20015398
    a3c0:	.word	0x0000a241
    a3c4:	.word	0x402e0000
    a3c8:	.word	0x00000000
    a3cc:	.word	0x200155e6

0000a3d0 <usb_serial_read>:
{
    a3d0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a3d4:	mov.w	r3, #3758153728	; 0xe000e000
    a3d8:	mov.w	r2, #131072	; 0x20000
{
    a3dc:	mov	r7, r0
    a3de:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a3e0:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    a3e4:	movs	r5, #0
	uint32_t tail = rx_tail;
    a3e6:	ldr	r3, [pc, #160]	; (a488 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a3e8:	ldr.w	fp, [pc, #176]	; a49c <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    a3ec:	ldrb	r4, [r3, #0]
    a3ee:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    a3f0:	cmp	r5, r8
    a3f2:	bcs.n	a3fc <usb_serial_read+0x2c>
    a3f4:	ldr	r3, [pc, #148]	; (a48c <usb_serial_read+0xbc>)
    a3f6:	ldrb	r2, [r3, #0]
    a3f8:	cmp	r2, r4
    a3fa:	bne.n	a410 <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a3fc:	mov.w	r3, #3758153728	; 0xe000e000
    a400:	mov.w	r2, #131072	; 0x20000
}
    a404:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a406:	str.w	r2, [r3, #268]	; 0x10c
}
    a40a:	add	sp, #12
    a40c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    a410:	adds	r4, #1
		uint32_t i = rx_list[tail];
    a412:	ldr	r3, [pc, #124]	; (a490 <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a414:	ldr	r0, [pc, #124]	; (a494 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a416:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    a41a:	cmp	r4, #9
    a41c:	ldr.w	sl, [pc, #128]	; a4a0 <usb_serial_read+0xd0>
    a420:	it	cs
    a422:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a424:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a428:	ldrh.w	r1, [fp, r9, lsl #1]
    a42c:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a430:	ldr	r0, [pc, #100]	; (a498 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a432:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a434:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    a438:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a43a:	add	r1, r0
		if (avail > len) {
    a43c:	bcs.n	a464 <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a43e:	mov	r0, r7
    a440:	str	r2, [sp, #4]
    a442:	bl	a000 <memcpy>
			rx_available -= len;
    a446:	ldr.w	r1, [sl]
			rx_index[i] += len;
    a44a:	ldr	r2, [sp, #4]
			rx_available -= len;
    a44c:	sub.w	r1, r1, r8
    a450:	add	r1, r5
    a452:	mov	r5, r8
    a454:	str.w	r1, [sl]
			rx_index[i] += len;
    a458:	ldrh.w	r1, [fp, r9, lsl #1]
    a45c:	add	r2, r1
    a45e:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    a462:	b.n	a3f0 <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a464:	mov	r2, r6
    a466:	mov	r0, r7
    a468:	bl	a000 <memcpy>
			rx_available -= avail;
    a46c:	ldr.w	r2, [sl]
			rx_tail = tail;
    a470:	ldr	r3, [pc, #20]	; (a488 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    a472:	mov	r0, r9
			rx_available -= avail;
    a474:	subs	r2, r2, r6
			p += avail;
    a476:	add	r7, r6
			count += avail;
    a478:	add	r5, r6
			rx_available -= avail;
    a47a:	str.w	r2, [sl]
			rx_tail = tail;
    a47e:	uxtb	r2, r4
    a480:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    a482:	bl	a134 <rx_queue_transfer>
    a486:	b.n	a3f0 <usb_serial_read+0x20>
    a488:	.word	0x200155db
    a48c:	.word	0x200155cb
    a490:	.word	0x200155cd
    a494:	.word	0x200153cc
    a498:	.word	0x20004b40
    a49c:	.word	0x200153dc
    a4a0:	.word	0x20014cb8

0000a4a4 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    a4a4:	ldr	r3, [pc, #44]	; (a4d4 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    a4a6:	ldr	r1, [pc, #48]	; (a4d8 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    a4a8:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    a4aa:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    a4ac:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a4ae:	cmp	r2, r1
    a4b0:	beq.n	a4ce <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a4b2:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a4b4:	ldr	r2, [pc, #36]	; (a4dc <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    a4b6:	cmp	r3, #9
    a4b8:	it	cs
    a4ba:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a4bc:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a4be:	ldr	r3, [pc, #32]	; (a4e0 <usb_serial_peekchar+0x3c>)
    a4c0:	ldrh.w	r1, [r3, r2, lsl #1]
    a4c4:	ldr	r3, [pc, #28]	; (a4e4 <usb_serial_peekchar+0x40>)
    a4c6:	add.w	r3, r3, r2, lsl #9
    a4ca:	ldrb	r0, [r3, r1]
    a4cc:	bx	lr
	if (tail == rx_head) return -1;
    a4ce:	mov.w	r0, #4294967295
}
    a4d2:	bx	lr
    a4d4:	.word	0x200155db
    a4d8:	.word	0x200155cb
    a4dc:	.word	0x200155cd
    a4e0:	.word	0x200153dc
    a4e4:	.word	0x20004b40

0000a4e8 <usb_serial_available>:
	uint32_t n = rx_available;
    a4e8:	ldr	r3, [pc, #12]	; (a4f8 <usb_serial_available+0x10>)
{
    a4ea:	push	{r4, lr}
	uint32_t n = rx_available;
    a4ec:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a4ee:	cbnz	r4, a4f4 <usb_serial_available+0xc>
    a4f0:	bl	c1c4 <yield>
}
    a4f4:	mov	r0, r4
    a4f6:	pop	{r4, pc}
    a4f8:	.word	0x20014cb8

0000a4fc <usb_serial_flush_input>:
{
    a4fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    a500:	ldr	r5, [pc, #64]	; (a544 <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    a502:	ldr	r7, [pc, #68]	; (a548 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    a504:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    a506:	ldr.w	r8, [pc, #80]	; a558 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    a50a:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    a50c:	ldr	r6, [pc, #60]	; (a54c <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    a50e:	ldrb	r3, [r7, #0]
    a510:	cmp	r3, r4
    a512:	bne.n	a518 <usb_serial_flush_input+0x1c>
}
    a514:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    a518:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    a51a:	ldr	r2, [pc, #52]	; (a550 <usb_serial_flush_input+0x54>)
    a51c:	ldr	r1, [pc, #52]	; (a554 <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    a51e:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    a520:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    a522:	it	cs
    a524:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a526:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a52a:	ldrh.w	r2, [r2, r0, lsl #1]
    a52e:	ldrh.w	r1, [r1, r0, lsl #1]
    a532:	subs	r2, r2, r1
    a534:	subs	r3, r3, r2
    a536:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    a538:	bl	a134 <rx_queue_transfer>
		rx_tail = tail;
    a53c:	uxtb	r3, r4
    a53e:	strb	r3, [r5, #0]
    a540:	b.n	a50e <usb_serial_flush_input+0x12>
    a542:	nop
    a544:	.word	0x200155db
    a548:	.word	0x200155cb
    a54c:	.word	0x20014cb8
    a550:	.word	0x200153cc
    a554:	.word	0x200153dc
    a558:	.word	0x200155cd

0000a55c <usb_serial_getchar>:
{
    a55c:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    a55e:	movs	r1, #1
    a560:	add.w	r0, sp, #7
    a564:	bl	a3d0 <usb_serial_read>
    a568:	cbz	r0, a574 <usb_serial_getchar+0x18>
    a56a:	ldrb.w	r0, [sp, #7]
}
    a56e:	add	sp, #12
    a570:	ldr.w	pc, [sp], #4
	return -1;
    a574:	mov.w	r0, #4294967295
    a578:	b.n	a56e <usb_serial_getchar+0x12>
	...

0000a57c <usb_serial_write>:
	if (!usb_configuration) return 0;
    a57c:	ldr	r3, [pc, #356]	; (a6e4 <usb_serial_write+0x168>)
{
    a57e:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    a582:	ldrb	r3, [r3, #0]
{
    a584:	mov	r6, r0
    a586:	mov	r5, r1
	if (!usb_configuration) return 0;
    a588:	and.w	r4, r3, #255	; 0xff
    a58c:	cmp	r3, #0
    a58e:	beq.w	a6a2 <usb_serial_write+0x126>
	uint32_t sent=0;
    a592:	movs	r4, #0
		tx_noautoflush = 1;
    a594:	ldr.w	fp, [pc, #360]	; a700 <usb_serial_write+0x184>
	while (size > 0) {
    a598:	cmp	r5, #0
    a59a:	beq.w	a6a2 <usb_serial_write+0x126>
		tx_noautoflush = 1;
    a59e:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a5a0:	ldr.w	r9, [pc, #352]	; a704 <usb_serial_write+0x188>
		while (!tx_available) {
    a5a4:	ldr	r7, [pc, #320]	; (a6e8 <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    a5a6:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    a5aa:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    a5ae:	ldr	r3, [pc, #316]	; (a6ec <usb_serial_write+0x170>)
    a5b0:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    a5b4:	movs	r3, #0
		int waiting=0;
    a5b6:	mov	r8, r3
		while (!tx_available) {
    a5b8:	ldrh	r1, [r7, #0]
    a5ba:	cbnz	r1, a5da <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    a5bc:	mov	r0, sl
    a5be:	strd	r3, r1, [sp]
    a5c2:	bl	b244 <usb_transfer_status>
			if (!(status & 0x80)) {
    a5c6:	ands.w	r0, r0, #128	; 0x80
    a5ca:	ldr	r2, [pc, #292]	; (a6f0 <usb_serial_write+0x174>)
    a5cc:	ldrd	r3, r1, [sp]
    a5d0:	bne.n	a67e <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    a5d2:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    a5d6:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    a5d8:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a5da:	ldrh.w	r8, [r7]
    a5de:	ldrb.w	r3, [r9]
    a5e2:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    a5e6:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a5e8:	mov.w	r2, r3, lsl #11
    a5ec:	add.w	r0, r0, r3, lsl #11
    a5f0:	ldr	r3, [pc, #256]	; (a6f4 <usb_serial_write+0x178>)
    a5f2:	str	r2, [sp, #0]
    a5f4:	add	r0, r3
		if (size >= tx_available) {
    a5f6:	bhi.n	a6c4 <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    a5f8:	mov	r2, r8
    a5fa:	mov	r1, r6
    a5fc:	bl	a000 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a600:	ldr	r2, [sp, #0]
    a602:	ldr	r3, [pc, #240]	; (a6f4 <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a604:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a606:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a608:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a60a:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a60c:	mov.w	r2, #2048	; 0x800
    a610:	mov	r1, r8
    a612:	bl	b1d8 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a616:	mov	r1, r8
	asm("dsb");
    a618:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    a61c:	add.w	r2, r8, #2048	; 0x800
    a620:	add.w	r3, r8, #32
    a624:	cmp	r3, r2
    a626:	ite	hi
    a628:	movhi	r3, #1
    a62a:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a62c:	mov.w	r2, #3758153728	; 0xe000e000
    a630:	add.w	r3, r8, r3, lsl #5
    a634:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    a638:	adds	r1, #32
	} while (location < end_addr);
    a63a:	cmp	r1, r3
    a63c:	bne.n	a634 <usb_serial_write+0xb8>
	asm("dsb");
    a63e:	dsb	sy
	asm("isb");
    a642:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a646:	movs	r0, #3
    a648:	mov	r1, sl
    a64a:	bl	b204 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a64e:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    a652:	ldr	r2, [pc, #164]	; (a6f8 <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    a654:	adds	r3, #1
    a656:	uxtb	r3, r3
    a658:	cmp	r3, #3
    a65a:	it	hi
    a65c:	movhi	r3, #0
    a65e:	strb.w	r3, [r9]
			size -= tx_available;
    a662:	ldrh	r3, [r7, #0]
    a664:	subs	r5, r5, r3
			sent += tx_available;
    a666:	add	r4, r3
			data += tx_available;
    a668:	add	r6, r3
			tx_available = 0;
    a66a:	movs	r3, #0
    a66c:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    a66e:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a672:	dsb	sy
		tx_noautoflush = 0;
    a676:	movs	r3, #0
    a678:	strb.w	r3, [fp]
    a67c:	b.n	a598 <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    a67e:	dsb	sy
			tx_noautoflush = 0;
    a682:	strb.w	r1, [fp]
			if (!waiting) {
    a686:	cmp.w	r8, #0
    a68a:	bne.n	a690 <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    a68c:	ldr	r3, [pc, #108]	; (a6fc <usb_serial_write+0x180>)
    a68e:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    a690:	ldrb	r1, [r2, #0]
    a692:	cbnz	r1, a6a2 <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a694:	ldr	r1, [pc, #100]	; (a6fc <usb_serial_write+0x180>)
    a696:	ldr	r1, [r1, #0]
    a698:	subs	r1, r1, r3
    a69a:	cmp	r1, #120	; 0x78
    a69c:	bls.n	a6aa <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    a69e:	movs	r3, #1
    a6a0:	strb	r3, [r2, #0]
}
    a6a2:	mov	r0, r4
    a6a4:	add	sp, #12
    a6a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    a6aa:	ldr	r1, [pc, #56]	; (a6e4 <usb_serial_write+0x168>)
    a6ac:	ldrb	r1, [r1, #0]
    a6ae:	cmp	r1, #0
    a6b0:	beq.n	a6a2 <usb_serial_write+0x126>
			tx_noautoflush = 1;
    a6b2:	mov.w	r8, #1
    a6b6:	str	r3, [sp, #0]
			yield();
    a6b8:	bl	c1c4 <yield>
			tx_noautoflush = 1;
    a6bc:	ldr	r3, [sp, #0]
    a6be:	strb.w	r8, [fp]
    a6c2:	b.n	a5b8 <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    a6c4:	mov	r2, r5
    a6c6:	mov	r1, r6
    a6c8:	bl	a000 <memcpy>
			tx_available -= size;
    a6cc:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a6d0:	ldr	r3, [pc, #36]	; (a6f8 <usb_serial_write+0x17c>)
    a6d2:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    a6d6:	add	r4, r5
			tx_available -= size;
    a6d8:	strh.w	r8, [r7]
			size = 0;
    a6dc:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a6de:	str.w	r2, [r3, #132]	; 0x84
}
    a6e2:	b.n	a672 <usb_serial_write+0xf6>
    a6e4:	.word	0x200155e3
    a6e8:	.word	0x20015470
    a6ec:	.word	0x20005cc0
    a6f0:	.word	0x200155de
    a6f4:	.word	0x20005dc0
    a6f8:	.word	0x402e0000
    a6fc:	.word	0x20015374
    a700:	.word	0x200155e1
    a704:	.word	0x200155df

0000a708 <usb_serial_putchar>:
{
    a708:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    a70a:	movs	r1, #1
{
    a70c:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    a710:	add.w	r0, sp, #7
    a714:	bl	a57c <usb_serial_write>
}
    a718:	add	sp, #12
    a71a:	ldr.w	pc, [sp], #4
	...

0000a720 <usb_serial_write_buffer_free>:
{
    a720:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a724:	movs	r4, #0
	tx_noautoflush = 1;
    a726:	ldr	r7, [pc, #56]	; (a760 <usb_serial_write_buffer_free+0x40>)
    a728:	movs	r3, #1
    a72a:	ldr	r6, [pc, #56]	; (a764 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a72c:	mov	r5, r4
		if (i == tx_head) continue;
    a72e:	ldr.w	r8, [pc, #56]	; a768 <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    a732:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    a734:	ldrb.w	r3, [r8]
    a738:	cmp	r3, r4
    a73a:	beq.n	a74a <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a73c:	mov	r0, r6
    a73e:	bl	b244 <usb_transfer_status>
    a742:	lsls	r3, r0, #24
    a744:	it	pl
    a746:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a74a:	adds	r4, #1
    a74c:	adds	r6, #32
    a74e:	cmp	r4, #4
    a750:	bne.n	a734 <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    a752:	dsb	sy
	tx_noautoflush = 0;
    a756:	movs	r3, #0
}
    a758:	mov	r0, r5
	tx_noautoflush = 0;
    a75a:	strb	r3, [r7, #0]
}
    a75c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a760:	.word	0x200155e1
    a764:	.word	0x20005cc0
    a768:	.word	0x200155df

0000a76c <usb_serial_flush_output>:
{
    a76c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a770:	ldr	r3, [pc, #116]	; (a7e8 <usb_serial_flush_output+0x7c>)
    a772:	ldrb	r3, [r3, #0]
    a774:	cbz	r3, a7e4 <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    a776:	ldr.w	r8, [pc, #132]	; a7fc <usb_serial_flush_output+0x90>
    a77a:	ldrh.w	r5, [r8]
    a77e:	cbz	r5, a7e4 <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    a780:	ldr	r7, [pc, #104]	; (a7ec <usb_serial_flush_output+0x80>)
    a782:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a784:	ldr	r6, [pc, #104]	; (a7f0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a786:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    a78a:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    a78c:	ldr	r2, [pc, #100]	; (a7f4 <usb_serial_flush_output+0x88>)
    a78e:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a790:	ldr	r4, [pc, #100]	; (a7f8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a792:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a796:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a798:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a79c:	movs	r3, #0
    a79e:	mov	r0, r9
    a7a0:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    a7a2:	add	r5, r4
    a7a4:	bl	b1d8 <usb_prepare_transfer>
	asm("dsb");
    a7a8:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a7ac:	mov.w	r3, #3758153728	; 0xe000e000
    a7b0:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a7b4:	adds	r4, #32
	} while (location < end_addr);
    a7b6:	cmp	r5, r4
    a7b8:	bhi.n	a7b0 <usb_serial_flush_output+0x44>
	asm("dsb");
    a7ba:	dsb	sy
	asm("isb");
    a7be:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a7c2:	movs	r0, #3
    a7c4:	mov	r1, r9
    a7c6:	bl	b204 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a7ca:	ldrb	r3, [r6, #0]
    a7cc:	movs	r2, #0
    a7ce:	adds	r3, #1
	tx_available = 0;
    a7d0:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    a7d4:	uxtb	r3, r3
    a7d6:	cmp	r3, #3
    a7d8:	ite	ls
    a7da:	strbls	r3, [r6, #0]
    a7dc:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    a7de:	dsb	sy
	tx_noautoflush = 0;
    a7e2:	strb	r2, [r7, #0]
}
    a7e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a7e8:	.word	0x200155e3
    a7ec:	.word	0x200155e1
    a7f0:	.word	0x200155df
    a7f4:	.word	0x20005cc0
    a7f8:	.word	0x20005dc0
    a7fc:	.word	0x20015470

0000a800 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a800:	ldr	r3, [pc, #512]	; (aa04 <set_arm_clock+0x204>)
{
    a802:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a804:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a806:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a808:	sub.w	r3, r3, #507904	; 0x7c000
    a80c:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a80e:	ldr	r3, [pc, #504]	; (aa08 <set_arm_clock+0x208>)
    a810:	cmp	r0, r3
    a812:	bls.w	a9d4 <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a816:	ldr	r3, [pc, #500]	; (aa0c <set_arm_clock+0x20c>)
    a818:	cmp	r0, r3
    a81a:	bls.w	a9e6 <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a81e:	ldr	r2, [pc, #496]	; (aa10 <set_arm_clock+0x210>)
    a820:	subs	r3, r0, r3
    a822:	udiv	r3, r3, r2
    a826:	movs	r2, #25
    a828:	muls	r3, r2
    a82a:	movw	r2, #1575	; 0x627
    a82e:	addw	r3, r3, #1250	; 0x4e2
    a832:	cmp	r3, r2
    a834:	it	cs
    a836:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a838:	ldr	r6, [pc, #456]	; (aa04 <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a83a:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a83e:	ldr.w	r2, [r6, #128]	; 0x80
    a842:	orr.w	r2, r2, #192	; 0xc0
    a846:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a84a:	movs	r2, #25
    a84c:	udiv	r2, r3, r2
    a850:	and.w	r3, r4, #31
    a854:	cmp	r3, r2
    a856:	bcs.n	a868 <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a858:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a85c:	ldr	r3, [pc, #436]	; (aa14 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a85e:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    a860:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a862:	ldr	r6, [r3, #0]
    a864:	cmp	r6, #0
    a866:	bge.n	a862 <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a868:	ands.w	r3, r1, #33554432	; 0x2000000
    a86c:	bne.n	a8c0 <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a86e:	ldr	r6, [pc, #424]	; (aa18 <set_arm_clock+0x218>)
    a870:	ldr	r7, [pc, #424]	; (aa1c <set_arm_clock+0x21c>)
    a872:	ldr	r6, [r6, #16]
    a874:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    a876:	cmp	r6, r7
    a878:	itee	eq
    a87a:	moveq	r6, #3
    a87c:	movne	r6, #0
    a87e:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a880:	lsls	r7, r6, #27
    a882:	eor.w	r6, r1, r6, lsl #27
    a886:	tst.w	r6, #939524096	; 0x38000000
    a88a:	beq.n	a896 <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a88c:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    a890:	ldr	r6, [pc, #368]	; (aa04 <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a892:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    a894:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a896:	lsls	r6, r3, #12
    a898:	eor.w	r3, r5, r3, lsl #12
    a89c:	tst.w	r3, #12288	; 0x3000
    a8a0:	beq.n	a8b2 <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a8a2:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a8a6:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    a8a8:	ldr	r5, [pc, #344]	; (aa04 <set_arm_clock+0x204>)
    a8aa:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a8ac:	ldr	r3, [r5, #72]	; 0x48
    a8ae:	lsls	r6, r3, #28
    a8b0:	bmi.n	a8ac <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a8b2:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a8b6:	ldr	r3, [pc, #332]	; (aa04 <set_arm_clock+0x204>)
    a8b8:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a8ba:	ldr	r5, [r3, #72]	; 0x48
    a8bc:	lsls	r5, r5, #26
    a8be:	bmi.n	a8ba <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a8c0:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a8c2:	ldr	r7, [pc, #348]	; (aa20 <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    a8c4:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    a8c6:	mul.w	r3, r6, r5
    a8ca:	muls	r3, r0
    a8cc:	cmp	r3, r7
    a8ce:	bls.w	a9ec <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a8d2:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    a8d6:	ldr	r0, [pc, #332]	; (aa24 <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a8d8:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    a8dc:	cmp	r3, r0
    a8de:	ldr	r0, [pc, #328]	; (aa28 <set_arm_clock+0x228>)
    a8e0:	bhi.w	aa00 <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a8e4:	udiv	r3, r3, r0
    a8e8:	cmp	r3, #54	; 0x36
    a8ea:	it	cc
    a8ec:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a8ee:	ldr	r7, [pc, #296]	; (aa18 <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    a8f0:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a8f2:	ldr.w	lr, [pc, #344]	; aa4c <set_arm_clock+0x24c>
    a8f6:	ldr.w	ip, [r7]
    a8fa:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a8fe:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    a902:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a906:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a90a:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    a90c:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a910:	beq.n	a926 <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a912:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a916:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a91a:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a91e:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a920:	ldr	r3, [r7, #0]
    a922:	cmp	r3, #0
    a924:	bge.n	a920 <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a926:	ldr	r3, [pc, #220]	; (aa04 <set_arm_clock+0x204>)
    a928:	subs	r5, #1
    a92a:	ldr	r7, [r3, #16]
    a92c:	and.w	r7, r7, #7
    a930:	cmp	r7, r5
    a932:	beq.n	a93c <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a934:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a936:	ldr	r5, [r3, #72]	; 0x48
    a938:	lsls	r7, r5, #15
    a93a:	bmi.n	a936 <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a93c:	subs	r3, r6, #1
    a93e:	lsls	r5, r3, #10
    a940:	eor.w	r3, r1, r3, lsl #10
    a944:	tst.w	r3, #7168	; 0x1c00
    a948:	beq.n	a95e <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a94a:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a94e:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a952:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    a954:	ldr	r3, [pc, #172]	; (aa04 <set_arm_clock+0x204>)
    a956:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a958:	ldr	r5, [r3, #72]	; 0x48
    a95a:	lsls	r5, r5, #30
    a95c:	bmi.n	a958 <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a95e:	ldr	r3, [pc, #204]	; (aa2c <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    a960:	ldr	r5, [pc, #204]	; (aa30 <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a962:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    a964:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a966:	itet	ls
    a968:	ldrls	r5, [pc, #200]	; (aa34 <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    a96a:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a96c:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a970:	subs	r6, r3, #1
    a972:	lsls	r5, r6, #8
    a974:	eor.w	r6, r1, r6, lsl #8
    a978:	tst.w	r6, #768	; 0x300
    a97c:	ldr	r6, [pc, #132]	; (aa04 <set_arm_clock+0x204>)
    a97e:	beq.n	a98c <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a980:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a984:	and.w	r5, r5, #768	; 0x300
    a988:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a98a:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a98c:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a98e:	ldr	r5, [pc, #116]	; (aa04 <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a990:	bic.w	r1, r1, #33554432	; 0x2000000
    a994:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a996:	ldr	r1, [r5, #72]	; 0x48
    a998:	lsls	r1, r1, #26
    a99a:	bmi.n	a996 <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    a99c:	ldr	r1, [pc, #152]	; (aa38 <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    a99e:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    a9a2:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a9a4:	ldr	r1, [pc, #148]	; (aa3c <set_arm_clock+0x23c>)
    a9a6:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a9a8:	mov.w	r3, #4294967295
    a9ac:	ldr	r1, [pc, #144]	; (aa40 <set_arm_clock+0x240>)
    a9ae:	udiv	r1, r0, r1
    a9b2:	udiv	r3, r3, r1
    a9b6:	ldr	r1, [pc, #140]	; (aa44 <set_arm_clock+0x244>)
    a9b8:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a9ba:	and.w	r3, r4, #31
    a9be:	cmp	r2, r3
    a9c0:	bcs.n	a9d2 <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a9c2:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a9c6:	ldr	r3, [pc, #76]	; (aa14 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a9c8:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    a9ca:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a9cc:	ldr	r2, [r3, #0]
    a9ce:	cmp	r2, #0
    a9d0:	bge.n	a9cc <set_arm_clock+0x1cc>
	}

	return frequency;
}
    a9d2:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    a9d4:	ldr	r6, [pc, #112]	; (aa48 <set_arm_clock+0x248>)
    a9d6:	movw	r3, #1150	; 0x47e
    a9da:	movw	r2, #950	; 0x3b6
    a9de:	cmp	r0, r6
    a9e0:	it	ls
    a9e2:	movls	r3, r2
    a9e4:	b.n	a838 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    a9e6:	movw	r3, #1250	; 0x4e2
    a9ea:	b.n	a838 <set_arm_clock+0x38>
		if (div_arm < 8) {
    a9ec:	cmp	r5, #8
    a9ee:	beq.n	a9f4 <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    a9f0:	adds	r5, #1
    a9f2:	b.n	a8c6 <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    a9f4:	cmp	r6, #4
    a9f6:	bhi.w	a8d2 <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    a9fa:	adds	r6, #1
				div_arm = 1;
    a9fc:	movs	r5, #1
    a9fe:	b.n	a8c6 <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    aa00:	movs	r3, #108	; 0x6c
    aa02:	b.n	a8ee <set_arm_clock+0xee>
    aa04:	.word	0x400fc000
    aa08:	.word	0x1f78a400
    aa0c:	.word	0x23c34600
    aa10:	.word	0x01ab3f00
    aa14:	.word	0x40080000
    aa18:	.word	0x400d8000
    aa1c:	.word	0x80003040
    aa20:	.word	0x269fb1ff
    aa24:	.word	0x4df67eff
    aa28:	.word	0x00b71b00
    aa2c:	.word	0x08f0d17f
    aa30:	.word	0x2cb4177f
    aa34:	.word	0x08f0d180
    aa38:	.word	0x20001cf0
    aa3c:	.word	0x20001cec
    aa40:	.word	0x000f4240
    aa44:	.word	0x20014ce0
    aa48:	.word	0x016e3600
    aa4c:	.word	0x8001307f

0000aa50 <endpoint0_receive>:
{
    aa50:	push	{r4, r5, lr}
    aa52:	ldr	r4, [pc, #136]	; (aadc <endpoint0_receive+0x8c>)
	if (len > 0) {
    aa54:	cbz	r1, aa98 <endpoint0_receive+0x48>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aa56:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    aa58:	ldr	r3, [pc, #132]	; (aae0 <endpoint0_receive+0x90>)
    aa5a:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aa5c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    aa60:	str	r0, [r3, #8]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    aa62:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aa64:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aa66:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    aa6a:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aa6c:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aa6e:	add.w	r1, r0, #8192	; 0x2000
    aa72:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aa74:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aa78:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aa7c:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aa7e:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    aa80:	movs	r3, #0
    aa82:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    aa84:	ldr	r3, [pc, #92]	; (aae4 <endpoint0_receive+0x94>)
    aa86:	ldr.w	r1, [r3, #432]	; 0x1b0
    aa8a:	orrs	r1, r5
    aa8c:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    aa90:	ldr.w	r1, [r3, #432]	; 0x1b0
    aa94:	cmp	r1, #0
    aa96:	bne.n	aa90 <endpoint0_receive+0x40>
	endpoint0_transfer_ack.next = 1;
    aa98:	ldr	r3, [pc, #76]	; (aae8 <endpoint0_receive+0x98>)
    aa9a:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa9c:	cmp	r2, #0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    aa9e:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    aaa2:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aaa4:	movw	r1, #32896	; 0x8080
    aaa8:	it	eq
    aaaa:	moveq	r1, #128	; 0x80
    aaac:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    aaae:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    aab0:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    aab4:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aab6:	mov.w	r1, #65537	; 0x10001
    aaba:	ldr	r3, [pc, #40]	; (aae4 <endpoint0_receive+0x94>)
    aabc:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    aac0:	ldr.w	r1, [r3, #432]	; 0x1b0
    aac4:	orr.w	r1, r1, #65536	; 0x10000
    aac8:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    aacc:	ldr	r1, [pc, #28]	; (aaec <endpoint0_receive+0x9c>)
    aace:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    aad0:	ldr.w	r2, [r3, #432]	; 0x1b0
    aad4:	cmp	r2, #0
    aad6:	bne.n	aad0 <endpoint0_receive+0x80>
}
    aad8:	pop	{r4, r5, pc}
    aada:	nop
    aadc:	.word	0x20000000
    aae0:	.word	0x200026e0
    aae4:	.word	0x402e0000
    aae8:	.word	0x200026c0
    aaec:	.word	0x20014b9c

0000aaf0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    aaf0:	ldr	r3, [r0, #56]	; 0x38
{
    aaf2:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    aaf4:	cbz	r3, aafe <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    aaf6:	ldr	r3, [r2, #4]
    aaf8:	orr.w	r3, r3, #32768	; 0x8000
    aafc:	str	r3, [r2, #4]
	}
	__disable_irq();
    aafe:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    ab00:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    ab02:	ldr	r3, [pc, #96]	; (ab64 <schedule_transfer+0x74>)
    ab04:	cbz	r4, ab50 <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    ab06:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    ab08:	ldr.w	r4, [r3, #432]	; 0x1b0
    ab0c:	tst	r4, r1
    ab0e:	bne.n	ab4a <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    ab10:	ldr	r6, [pc, #84]	; (ab68 <schedule_transfer+0x78>)
    ab12:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    ab14:	ldr.w	r4, [r3, #320]	; 0x140
    ab18:	orr.w	r4, r4, #16384	; 0x4000
    ab1c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    ab20:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ab24:	ldr.w	r5, [r3, #320]	; 0x140
    ab28:	lsls	r5, r5, #17
    ab2a:	bmi.n	ab36 <schedule_transfer+0x46>
    ab2c:	ldr	r5, [r6, #4]
    ab2e:	subs	r5, r5, r7
    ab30:	cmp.w	r5, #2400	; 0x960
    ab34:	bcc.n	ab14 <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ab36:	ands	r4, r1
    ab38:	bne.n	ab4a <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    ab3a:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    ab3e:	ldr	r4, [pc, #36]	; (ab64 <schedule_transfer+0x74>)
    ab40:	ldr.w	r3, [r4, #432]	; 0x1b0
    ab44:	orrs	r3, r1
    ab46:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    ab4a:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ab4c:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    ab4e:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    ab50:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    ab54:	ldr.w	r4, [r3, #432]	; 0x1b0
    ab58:	orrs	r1, r4
    ab5a:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    ab5e:	str	r2, [r0, #48]	; 0x30
    ab60:	b.n	ab4a <schedule_transfer+0x5a>
    ab62:	nop
    ab64:	.word	0x402e0000
    ab68:	.word	0xe0001000

0000ab6c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    ab6c:	push	{r4, r5, r6, lr}
    ab6e:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    ab70:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    ab72:	cbz	r0, ab84 <run_callbacks+0x18>
    ab74:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    ab76:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    ab78:	ldr	r3, [r2, #4]
    ab7a:	ands.w	r3, r3, #128	; 0x80
    ab7e:	beq.n	ab86 <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    ab80:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    ab82:	cbnz	r5, ab94 <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    ab84:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    ab86:	ldr	r2, [r2, #0]
		count++;
    ab88:	adds	r5, #1
		if ((uint32_t)t == 1) {
    ab8a:	cmp	r2, #1
    ab8c:	bne.n	ab78 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    ab8e:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    ab92:	b.n	ab82 <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    ab94:	ldr	r6, [r0, #0]
		count--;
    ab96:	subs	r5, #1
		ep->callback_function(first);
    ab98:	ldr	r3, [r4, #56]	; 0x38
    ab9a:	blx	r3
		first = next;
    ab9c:	mov	r0, r6
    ab9e:	b.n	ab82 <run_callbacks+0x16>

0000aba0 <usb_endpoint_config>:
{
    aba0:	push	{r4, r5, r6, lr}
    aba2:	mov	r4, r0
    aba4:	mov	r6, r1
    aba6:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    aba8:	movs	r1, #0
    abaa:	movs	r2, #60	; 0x3c
    abac:	adds	r0, #4
    abae:	bl	9fbc <memset>
	qh->next = 1; // Terminate bit = 1
    abb2:	movs	r3, #1
	qh->config = config;
    abb4:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    abb6:	str	r3, [r4, #8]
	qh->callback_function = callback;
    abb8:	str	r5, [r4, #56]	; 0x38
}
    abba:	pop	{r4, r5, r6, pc}

0000abbc <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    abbc:	ldr	r2, [pc, #124]	; (ac3c <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    abbe:	push	{r4, lr}
	if (len > 0) {
    abc0:	cbz	r1, ac06 <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    abc2:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    abc4:	ldr	r3, [pc, #120]	; (ac40 <endpoint0_transmit.constprop.0+0x84>)
    abc6:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    abc8:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    abcc:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    abce:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    abd0:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    abd2:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    abd6:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    abd8:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    abda:	add.w	r1, r0, #8192	; 0x2000
    abde:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    abe0:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    abe4:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    abe8:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    abea:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    abec:	movs	r3, #0
    abee:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    abf0:	ldr	r3, [pc, #80]	; (ac44 <endpoint0_transmit.constprop.0+0x88>)
    abf2:	ldr.w	r1, [r3, #432]	; 0x1b0
    abf6:	orr.w	r1, r1, #65536	; 0x10000
    abfa:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    abfe:	ldr.w	r1, [r3, #432]	; 0x1b0
    ac02:	cmp	r1, #0
    ac04:	bne.n	abfe <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    ac06:	ldr	r3, [pc, #64]	; (ac48 <endpoint0_transmit.constprop.0+0x8c>)
    ac08:	movs	r1, #1
    ac0a:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac0c:	movs	r1, #128	; 0x80
    ac0e:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    ac10:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    ac12:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    ac16:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac18:	mov.w	r2, #65537	; 0x10001
    ac1c:	ldr	r3, [pc, #36]	; (ac44 <endpoint0_transmit.constprop.0+0x88>)
    ac1e:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    ac22:	ldr.w	r2, [r3, #432]	; 0x1b0
    ac26:	orr.w	r2, r2, #1
    ac2a:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    ac2e:	ldr	r2, [pc, #28]	; (ac4c <endpoint0_transmit.constprop.0+0x90>)
    ac30:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    ac32:	ldr.w	r2, [r3, #432]	; 0x1b0
    ac36:	cmp	r2, #0
    ac38:	bne.n	ac32 <endpoint0_transmit.constprop.0+0x76>
}
    ac3a:	pop	{r4, pc}
    ac3c:	.word	0x20000000
    ac40:	.word	0x200026e0
    ac44:	.word	0x402e0000
    ac48:	.word	0x200026c0
    ac4c:	.word	0x20014b9c

0000ac50 <usb_start_sof_interrupts>:
	__disable_irq();
    ac50:	cpsid	i
	sof_usage |= (1 << interface);
    ac52:	ldr	r2, [pc, #40]	; (ac7c <usb_start_sof_interrupts+0x2c>)
    ac54:	movs	r3, #1
    ac56:	lsl.w	r0, r3, r0
    ac5a:	ldrb	r3, [r2, #0]
    ac5c:	orrs	r0, r3
    ac5e:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    ac60:	ldr	r2, [pc, #28]	; (ac80 <usb_start_sof_interrupts+0x30>)
    ac62:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    ac66:	lsls	r1, r3, #24
    ac68:	bmi.n	ac76 <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ac6a:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ac6c:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ac6e:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ac72:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    ac76:	cpsie	i
}
    ac78:	bx	lr
    ac7a:	nop
    ac7c:	.word	0x200155dd
    ac80:	.word	0x402e0000

0000ac84 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    ac84:	movs	r3, #1
    ac86:	ldr	r2, [pc, #32]	; (aca8 <usb_stop_sof_interrupts+0x24>)
    ac88:	lsl.w	r0, r3, r0
    ac8c:	ldrb	r3, [r2, #0]
    ac8e:	bic.w	r0, r3, r0
    ac92:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    ac94:	cbnz	r0, aca4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    ac96:	ldr	r2, [pc, #20]	; (acac <usb_stop_sof_interrupts+0x28>)
    ac98:	ldr.w	r3, [r2, #328]	; 0x148
    ac9c:	bic.w	r3, r3, #128	; 0x80
    aca0:	str.w	r3, [r2, #328]	; 0x148
}
    aca4:	bx	lr
    aca6:	nop
    aca8:	.word	0x200155dd
    acac:	.word	0x402e0000

0000acb0 <usb_isr>:
{
    acb0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    acb4:	ldr	r4, [pc, #676]	; (af5c <usb_isr+0x2ac>)
    acb6:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    acba:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    acbc:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    acc0:	bmi.n	ad28 <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    acc2:	lsls	r1, r6, #25
    acc4:	bmi.w	b0ee <usb_isr+0x43e>
	if (status & USB_USBSTS_TI0) {
    acc8:	lsls	r4, r6, #7
    acca:	bpl.n	acd4 <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    accc:	ldr	r3, [pc, #656]	; (af60 <usb_isr+0x2b0>)
    acce:	ldr	r3, [r3, #0]
    acd0:	cbz	r3, acd4 <usb_isr+0x24>
    acd2:	blx	r3
	if (status & USB_USBSTS_TI1) {
    acd4:	lsls	r0, r6, #6
    acd6:	bpl.n	ace0 <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    acd8:	ldr	r3, [pc, #648]	; (af64 <usb_isr+0x2b4>)
    acda:	ldr	r3, [r3, #0]
    acdc:	cbz	r3, ace0 <usb_isr+0x30>
    acde:	blx	r3
	if (status & USB_USBSTS_PCI) {
    ace0:	lsls	r1, r6, #29
    ace2:	bpl.n	acf6 <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    ace4:	ldr	r3, [pc, #628]	; (af5c <usb_isr+0x2ac>)
    ace6:	ldr	r2, [pc, #640]	; (af68 <usb_isr+0x2b8>)
    ace8:	ldr.w	r3, [r3, #388]	; 0x184
    acec:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    acf0:	it	ne
    acf2:	movne	r3, #1
			usb_high_speed = 0;
    acf4:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    acf6:	ldr	r3, [pc, #612]	; (af5c <usb_isr+0x2ac>)
    acf8:	ldr.w	r3, [r3, #328]	; 0x148
    acfc:	lsls	r2, r3, #24
    acfe:	bpl.w	b11e <usb_isr+0x46e>
    ad02:	lsls	r3, r6, #24
    ad04:	bpl.w	b11e <usb_isr+0x46e>
		if (usb_reboot_timer) {
    ad08:	ldr	r2, [pc, #608]	; (af6c <usb_isr+0x2bc>)
    ad0a:	ldrb	r3, [r2, #0]
    ad0c:	cmp	r3, #0
    ad0e:	beq.w	b11e <usb_isr+0x46e>
			if (--usb_reboot_timer == 0) {
    ad12:	subs	r3, #1
    ad14:	uxtb	r3, r3
    ad16:	strb	r3, [r2, #0]
    ad18:	cmp	r3, #0
    ad1a:	bne.w	b11e <usb_isr+0x46e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    ad1e:	movs	r0, #3
    ad20:	bl	ac84 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    ad24:	bl	11e68 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    ad28:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    ad2c:	ldr	r7, [pc, #576]	; (af70 <usb_isr+0x2c0>)
		while (setupstatus) {
    ad2e:	cmp	r3, #0
    ad30:	bne.n	adba <usb_isr+0x10a>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    ad32:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    ad36:	cmp	r5, #0
    ad38:	beq.n	acc2 <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    ad3a:	ldr	r2, [pc, #568]	; (af74 <usb_isr+0x2c4>)
			USB1_ENDPTCOMPLETE = completestatus;
    ad3c:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    ad40:	ldr	r1, [r2, #0]
    ad42:	tst	r5, r1
    ad44:	beq.n	ad7c <usb_isr+0xcc>
				endpoint0_notify_mask = 0;
    ad46:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ad48:	movw	r1, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    ad4c:	ldr	r2, [pc, #552]	; (af78 <usb_isr+0x2c8>)
    ad4e:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ad50:	ldrh	r2, [r2, #0]
    ad52:	cmp	r2, r1
    ad54:	bne.w	b0b0 <usb_isr+0x400>
    ad58:	uxth	r3, r3
    ad5a:	cbnz	r3, ad7c <usb_isr+0xcc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ad5c:	ldr	r2, [pc, #540]	; (af7c <usb_isr+0x2cc>)
    ad5e:	ldr	r3, [pc, #544]	; (af80 <usb_isr+0x2d0>)
    ad60:	ldr	r0, [r2, #0]
    ad62:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    ad64:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ad66:	ldrb	r2, [r2, #6]
    ad68:	str	r0, [r3, #0]
    ad6a:	strh	r1, [r3, #4]
    ad6c:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    ad6e:	bne.n	ad7c <usb_isr+0xcc>
			usb_start_sof_interrupts(NUM_INTERFACE);
    ad70:	movs	r0, #3
    ad72:	bl	ac50 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ad76:	ldr	r3, [pc, #500]	; (af6c <usb_isr+0x2bc>)
    ad78:	movs	r2, #80	; 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    ad7a:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    ad7c:	ldr	r3, [pc, #516]	; (af84 <usb_isr+0x2d4>)
    ad7e:	ldr	r3, [r3, #0]
			if (completestatus) {
    ad80:	ands	r5, r3
    ad82:	beq.n	acc2 <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    ad84:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ad86:	ldr.w	r8, [pc, #512]	; af88 <usb_isr+0x2d8>
					tx &= ~(1<<p);
    ad8a:	mov.w	r9, #1
				while (tx) {
    ad8e:	cmp	r4, #0
    ad90:	bne.w	b0d2 <usb_isr+0x422>
				uint32_t rx = completestatus & 0xffff;
    ad94:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    ad96:	ldr	r7, [pc, #496]	; (af88 <usb_isr+0x2d8>)
					rx &= ~(1<<p);
    ad98:	mov.w	r8, #1
				while(rx) {
    ad9c:	cmp	r5, #0
    ad9e:	beq.n	acc2 <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    ada0:	rbit	r4, r5
    ada4:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    ada8:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    adac:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    adb0:	bl	ab6c <run_callbacks>
					rx &= ~(1<<p);
    adb4:	bic.w	r5, r5, r4
    adb8:	b.n	ad9c <usb_isr+0xec>
			USB1_ENDPTSETUPSTAT = setupstatus;
    adba:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    adbe:	ldr	r3, [pc, #456]	; (af88 <usb_isr+0x2d8>)
				s.word2 = endpoint_queue_head[0].setup1;
    adc0:	ldrd	r5, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    adc4:	ldr.w	r2, [r4, #320]	; 0x140
    adc8:	orr.w	r2, r2, #8192	; 0x2000
    adcc:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    add0:	ldr.w	r2, [r4, #320]	; 0x140
    add4:	lsls	r2, r2, #18
    add6:	bpl.n	adc4 <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    add8:	ldr.w	r2, [r4, #320]	; 0x140
    addc:	bic.w	r2, r2, #8192	; 0x2000
    ade0:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    ade4:	mov.w	r2, #65537	; 0x10001
    ade8:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    adec:	ldr.w	r2, [r4, #436]	; 0x1b4
    adf0:	ands.w	r8, r2, #65537	; 0x10001
    adf4:	bne.n	adec <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    adf6:	uxth	r1, r5
    adf8:	ldr	r2, [pc, #376]	; (af74 <usb_isr+0x2c4>)
	switch (setup.wRequestAndType) {
    adfa:	cmp.w	r1, #2176	; 0x880
			endpoint0_notify_mask = 0;
    adfe:	str.w	r8, [r2]
	switch (setup.wRequestAndType) {
    ae02:	beq.w	af3e <usb_isr+0x28e>
    ae06:	bhi.n	ae9e <usb_isr+0x1ee>
    ae08:	movw	r2, #770	; 0x302
    ae0c:	cmp	r1, r2
    ae0e:	beq.w	afe2 <usb_isr+0x332>
    ae12:	bhi.n	ae32 <usb_isr+0x182>
    ae14:	cmp	r1, #130	; 0x82
    ae16:	beq.w	afac <usb_isr+0x2fc>
    ae1a:	cmp.w	r1, #258	; 0x102
    ae1e:	beq.w	b008 <usb_isr+0x358>
    ae22:	cmp	r1, #128	; 0x80
    ae24:	beq.w	af4e <usb_isr+0x29e>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    ae28:	mov.w	r3, #65537	; 0x10001
    ae2c:	str.w	r3, [r4, #448]	; 0x1c0
    ae30:	b.n	af38 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    ae32:	cmp.w	r1, #1280	; 0x500
    ae36:	beq.n	af22 <usb_isr+0x272>
    ae38:	sub.w	r1, r1, #1664	; 0x680
    ae3c:	cmp	r1, #1
    ae3e:	bhi.n	ae28 <usb_isr+0x178>
    ae40:	ldr	r2, [pc, #328]	; (af8c <usb_isr+0x2dc>)
    ae42:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ae46:	uxth.w	ip, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    ae4a:	ldr	r1, [r2, #4]
    ae4c:	cmp	r1, #0
    ae4e:	beq.n	ae28 <usb_isr+0x178>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ae50:	ldrh.w	lr, [r2]
    ae54:	mov	r0, r5
    ae56:	cmp	lr, r5
    ae58:	bne.w	b078 <usb_isr+0x3c8>
    ae5c:	ldrh.w	lr, [r2, #2]
    ae60:	cmp	lr, ip
    ae62:	bne.w	b078 <usb_isr+0x3c8>
				if ((setup.wValue >> 8) == 3) {
    ae66:	lsrs	r5, r5, #8
				if (datalen > setup.wLength) datalen = setup.wLength;
    ae68:	mov.w	r8, r3, lsr #16
    ae6c:	ldr	r3, [pc, #288]	; (af90 <usb_isr+0x2e0>)
				if ((setup.wValue >> 8) == 3) {
    ae6e:	cmp	r5, #3
					datalen = *(list->addr);
    ae70:	ite	eq
    ae72:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    ae74:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    ae76:	cmp	r8, r2
    ae78:	it	cs
    ae7a:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    ae7c:	cmp.w	r0, #512	; 0x200
    ae80:	bne.w	b02a <usb_isr+0x37a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    ae84:	ldr	r2, [pc, #224]	; (af68 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ae86:	ldr	r1, [pc, #268]	; (af94 <usb_isr+0x2e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    ae88:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    ae8a:	mov	r2, r8
    ae8c:	ldr	r0, [pc, #264]	; (af98 <usb_isr+0x2e8>)
    ae8e:	cmp	r5, #0
    ae90:	it	ne
    ae92:	movne	r1, r0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    ae94:	mov	r0, r3
    ae96:	bl	a000 <memcpy>
    ae9a:	mov	r3, r0
    ae9c:	b.n	b04c <usb_isr+0x39c>
	switch (setup.wRequestAndType) {
    ae9e:	movw	r2, #8993	; 0x2321
    aea2:	cmp	r1, r2
    aea4:	beq.n	aee8 <usb_isr+0x238>
    aea6:	bhi.n	aef4 <usb_isr+0x244>
    aea8:	movw	r2, #8225	; 0x2021
    aeac:	cmp	r1, r2
    aeae:	beq.w	b096 <usb_isr+0x3e6>
    aeb2:	movw	r2, #8737	; 0x2221
    aeb6:	cmp	r1, r2
    aeb8:	beq.w	b07c <usb_isr+0x3cc>
    aebc:	cmp.w	r1, #2304	; 0x900
    aec0:	bne.n	ae28 <usb_isr+0x178>
		usb_configuration = setup.wValue;
    aec2:	ldr	r3, [pc, #216]	; (af9c <usb_isr+0x2ec>)
    aec4:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    aec8:	mov.w	r2, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    aecc:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    aece:	ldr	r3, [pc, #208]	; (afa0 <usb_isr+0x2f0>)
    aed0:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    aed4:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    aed8:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    aedc:	str.w	r3, [r4, #468]	; 0x1d4
		usb_serial_configure();
    aee0:	bl	a2d0 <usb_serial_configure>
		usb_mtp_configure();
    aee4:	bl	bef0 <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    aee8:	movs	r2, #0
    aeea:	mov	r1, r2
    aeec:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    aeee:	bl	aa50 <endpoint0_receive>
			return;
    aef2:	b.n	af38 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    aef4:	movw	r2, #25633	; 0x6421
    aef8:	cmp	r1, r2
    aefa:	beq.w	b0aa <usb_isr+0x3fa>
    aefe:	movw	r2, #26529	; 0x67a1
    af02:	cmp	r1, r2
    af04:	bne.n	ae28 <usb_isr+0x178>
		if (setup.wLength >= 4) {
    af06:	cmp.w	r3, #262144	; 0x40000
    af0a:	bcc.n	ae28 <usb_isr+0x178>
			endpoint0_buffer[2] = usb_mtp_status;
    af0c:	ldr	r3, [pc, #148]	; (afa4 <usb_isr+0x2f4>)
			endpoint0_buffer[0] = 4;
    af0e:	movs	r1, #4
    af10:	ldr	r0, [pc, #104]	; (af7c <usb_isr+0x2cc>)
			endpoint0_buffer[2] = usb_mtp_status;
    af12:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    af14:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    af16:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    af18:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    af1a:	strb.w	r8, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    af1e:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    af20:	b.n	af48 <usb_isr+0x298>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    af22:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    af24:	mov	r2, r8
    af26:	mov	r1, r8
    af28:	mov	r0, r8
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    af2a:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    af2c:	bl	aa50 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    af30:	orr.w	r5, r5, #16777216	; 0x1000000
    af34:	str.w	r5, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    af38:	ldr.w	r3, [r4, #428]	; 0x1ac
    af3c:	b.n	ad2e <usb_isr+0x7e>
		reply_buffer[0] = usb_configuration;
    af3e:	ldr	r3, [pc, #92]	; (af9c <usb_isr+0x2ec>)
		endpoint0_transmit(reply_buffer, 1, 0);
    af40:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    af42:	ldr	r0, [pc, #100]	; (afa8 <usb_isr+0x2f8>)
    af44:	ldrb	r3, [r3, #0]
    af46:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    af48:	bl	abbc <endpoint0_transmit.constprop.0>
				return;
    af4c:	b.n	af38 <usb_isr+0x288>
		reply_buffer[0] = 0;
    af4e:	ldr	r0, [pc, #88]	; (afa8 <usb_isr+0x2f8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    af50:	movs	r1, #2
		reply_buffer[0] = 0;
    af52:	strb.w	r8, [r0]
		reply_buffer[1] = 0;
    af56:	strb.w	r8, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    af5a:	b.n	af48 <usb_isr+0x298>
    af5c:	.word	0x402e0000
    af60:	.word	0x20015398
    af64:	.word	0x2001539c
    af68:	.word	0x200155e4
    af6c:	.word	0x200155e5
    af70:	.word	0x402e01c0
    af74:	.word	0x20014b9c
    af78:	.word	0x20007dc0
    af7c:	.word	0x200155b9
    af80:	.word	0x2001538c
    af84:	.word	0x20014ba0
    af88:	.word	0x20000000
    af8c:	.word	0x200009b8
    af90:	.word	0x20202000
    af94:	.word	0x6000264c
    af98:	.word	0x600026b5
    af9c:	.word	0x200155e3
    afa0:	.word	0x00cc0002
    afa4:	.word	0x200022eb
    afa8:	.word	0x200155c3
		endpoint = setup.wIndex & 0x7F;
    afac:	uxth	r0, r3
		if (endpoint > 7) break;
    afae:	ands.w	r3, r3, #120	; 0x78
    afb2:	bne.w	ae28 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    afb6:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    afba:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    afbc:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    afc0:	ldr	r2, [pc, #352]	; (b124 <usb_isr+0x474>)
    afc2:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    afc4:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    afc6:	bpl.n	afdc <usb_isr+0x32c>
    afc8:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    afcc:	it	ne
    afce:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    afd0:	mov.w	r1, #2
    afd4:	ldr	r0, [pc, #332]	; (b124 <usb_isr+0x474>)
			reply_buffer[0] = 1;
    afd6:	it	ne
    afd8:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    afda:	b.n	af48 <usb_isr+0x298>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    afdc:	tst.w	r1, #1
    afe0:	b.n	afcc <usb_isr+0x31c>
		if (endpoint > 7) break;
    afe2:	tst.w	r3, #120	; 0x78
    afe6:	uxth	r2, r3
    afe8:	bne.w	ae28 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    afec:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    aff0:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    aff4:	ldr.w	r2, [r7, r3, lsl #2]
    aff8:	ite	ne
    affa:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    affe:	orreq.w	r2, r2, #1
    b002:	str.w	r2, [r7, r3, lsl #2]
    b006:	b.n	aee8 <usb_isr+0x238>
		if (endpoint > 7) break;
    b008:	tst.w	r3, #120	; 0x78
    b00c:	uxth	r2, r3
    b00e:	bne.w	ae28 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b012:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    b016:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b01a:	ldr.w	r2, [r7, r3, lsl #2]
    b01e:	ite	ne
    b020:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b024:	biceq.w	r2, r2, #1
    b028:	b.n	b002 <usb_isr+0x352>
				} else if (setup.wValue == 0x700) {
    b02a:	cmp.w	r0, #1792	; 0x700
    b02e:	bne.n	b074 <usb_isr+0x3c4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b030:	ldr	r2, [pc, #244]	; (b128 <usb_isr+0x478>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b032:	ldr	r0, [pc, #248]	; (b12c <usb_isr+0x47c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    b034:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b036:	mov	r2, r8
    b038:	ldr	r1, [pc, #244]	; (b130 <usb_isr+0x480>)
    b03a:	cmp	r5, #0
    b03c:	it	ne
    b03e:	movne	r1, r0
    b040:	mov	r0, r3
    b042:	bl	a000 <memcpy>
					usb_descriptor_buffer[1] = 7;
    b046:	movs	r2, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    b048:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    b04a:	strb	r2, [r0, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b04c:	bic.w	r5, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b050:	add.w	r0, r3, r8
	asm("dsb");
    b054:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b058:	mov.w	r3, #3758153728	; 0xe000e000
    b05c:	str.w	r5, [r3, #3952]	; 0xf70
		location += 32;
    b060:	adds	r5, #32
	} while (location < end_addr);
    b062:	cmp	r0, r5
    b064:	bhi.n	b05c <usb_isr+0x3ac>
	asm("dsb");
    b066:	dsb	sy
	asm("isb");
    b06a:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b06e:	ldr	r0, [pc, #196]	; (b134 <usb_isr+0x484>)
    b070:	mov	r1, r8
    b072:	b.n	af48 <usb_isr+0x298>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b074:	mov	r2, r8
    b076:	b.n	ae94 <usb_isr+0x1e4>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b078:	adds	r2, #12
    b07a:	b.n	ae4a <usb_isr+0x19a>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b07c:	uxth	r3, r3
    b07e:	cmp	r3, #0
    b080:	bne.w	aee8 <usb_isr+0x238>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b084:	ldr	r3, [pc, #176]	; (b138 <usb_isr+0x488>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b086:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b08a:	ldr	r2, [r3, #0]
    b08c:	ldr	r3, [pc, #172]	; (b13c <usb_isr+0x48c>)
    b08e:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b090:	ldr	r3, [pc, #172]	; (b140 <usb_isr+0x490>)
    b092:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    b094:	b.n	aee8 <usb_isr+0x238>
		if (setup.wLength != 7) break;
    b096:	lsrs	r1, r3, #16
    b098:	cmp	r1, #7
		if (setup.wLength == 6) {
    b09a:	bne.w	ae28 <usb_isr+0x178>
			endpoint0_setupdata.bothwords = setupdata;
    b09e:	ldr	r2, [pc, #164]	; (b144 <usb_isr+0x494>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b0a0:	ldr	r0, [pc, #164]	; (b148 <usb_isr+0x498>)
			endpoint0_setupdata.bothwords = setupdata;
    b0a2:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b0a6:	movs	r2, #1
    b0a8:	b.n	aeee <usb_isr+0x23e>
		if (setup.wLength == 6) {
    b0aa:	lsrs	r1, r3, #16
    b0ac:	cmp	r1, #6
    b0ae:	b.n	b09a <usb_isr+0x3ea>
	if (setup.wRequestAndType == 0x6421) {
    b0b0:	movw	r3, #25633	; 0x6421
    b0b4:	cmp	r2, r3
    b0b6:	bne.w	ad7c <usb_isr+0xcc>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    b0ba:	ldr	r3, [pc, #140]	; (b148 <usb_isr+0x498>)
    b0bc:	ldrb	r2, [r3, #0]
    b0be:	cmp	r2, #1
    b0c0:	bne.w	ad7c <usb_isr+0xcc>
    b0c4:	ldrb	r3, [r3, #1]
    b0c6:	cmp	r3, #64	; 0x40
    b0c8:	bne.w	ad7c <usb_isr+0xcc>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b0cc:	ldr	r3, [pc, #124]	; (b14c <usb_isr+0x49c>)
    b0ce:	movs	r2, #25
    b0d0:	b.n	ad7a <usb_isr+0xca>
					int p=__builtin_ctz(tx);
    b0d2:	rbit	r7, r4
    b0d6:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b0da:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    b0de:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b0e2:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    b0e4:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b0e8:	bl	ab6c <run_callbacks>
					tx &= ~(1<<p);
    b0ec:	b.n	ad8e <usb_isr+0xde>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b0ee:	ldr	r3, [pc, #96]	; (b150 <usb_isr+0x4a0>)
    b0f0:	ldr.w	r2, [r3, #428]	; 0x1ac
    b0f4:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b0f8:	ldr.w	r2, [r3, #444]	; 0x1bc
    b0fc:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b100:	ldr.w	r4, [r3, #432]	; 0x1b0
    b104:	cmp	r4, #0
    b106:	bne.n	b100 <usb_isr+0x450>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b108:	mov.w	r2, #4294967295
    b10c:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b110:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    b114:	bl	a2cc <usb_serial_reset>
		endpointN_notify_mask = 0;
    b118:	ldr	r3, [pc, #56]	; (b154 <usb_isr+0x4a4>)
    b11a:	str	r4, [r3, #0]
    b11c:	b.n	acc8 <usb_isr+0x18>
}
    b11e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b122:	nop
    b124:	.word	0x200155c3
    b128:	.word	0x200155e4
    b12c:	.word	0x6000264c
    b130:	.word	0x600026b5
    b134:	.word	0x20202000
    b138:	.word	0x20015374
    b13c:	.word	0x20015394
    b140:	.word	0x200155e2
    b144:	.word	0x20007dc0
    b148:	.word	0x200155b9
    b14c:	.word	0x200022eb
    b150:	.word	0x402e0000
    b154:	.word	0x20014ba0

0000b158 <usb_config_rx>:
{
    b158:	push	{r4, r5, r6, lr}
    b15a:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b15c:	subs	r3, r0, #2
{
    b15e:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b160:	cmp	r3, #3
    b162:	bhi.n	b18c <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b164:	clz	r4, r2
    b168:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b16a:	ldr	r0, [pc, #36]	; (b190 <usb_config_rx+0x38>)
    b16c:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b16e:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b170:	add.w	r0, r0, r5, lsl #7
    b174:	orr.w	r1, r1, r4, lsl #29
    b178:	bl	aba0 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    b17c:	cbz	r6, b18c <usb_config_rx+0x34>
    b17e:	ldr	r2, [pc, #20]	; (b194 <usb_config_rx+0x3c>)
    b180:	movs	r3, #1
    b182:	lsl.w	r0, r3, r5
    b186:	ldr	r3, [r2, #0]
    b188:	orrs	r0, r3
    b18a:	str	r0, [r2, #0]
}
    b18c:	pop	{r4, r5, r6, pc}
    b18e:	nop
    b190:	.word	0x20000000
    b194:	.word	0x20014ba0

0000b198 <usb_config_tx>:
{
    b198:	push	{r4, r5, r6, lr}
    b19a:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b19c:	subs	r3, r0, #2
{
    b19e:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b1a0:	cmp	r3, #3
    b1a2:	bhi.n	b1ce <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b1a4:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b1a8:	ldr	r0, [pc, #36]	; (b1d0 <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b1aa:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b1ac:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b1ae:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b1b0:	add.w	r0, r0, r4, lsl #7
    b1b4:	orr.w	r1, r1, r5, lsl #29
    b1b8:	adds	r0, #64	; 0x40
    b1ba:	bl	aba0 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b1be:	cbz	r6, b1ce <usb_config_tx+0x36>
    b1c0:	ldr	r2, [pc, #16]	; (b1d4 <usb_config_tx+0x3c>)
    b1c2:	adds	r4, #16
    b1c4:	movs	r3, #1
    b1c6:	ldr	r1, [r2, #0]
    b1c8:	lsls	r3, r4
    b1ca:	orrs	r3, r1
    b1cc:	str	r3, [r2, #0]
}
    b1ce:	pop	{r4, r5, r6, pc}
    b1d0:	.word	0x20000000
    b1d4:	.word	0x20014ba0

0000b1d8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b1d8:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    b1da:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    b1dc:	orr.w	r2, r2, #128	; 0x80
    b1e0:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    b1e2:	add.w	r2, r1, #4096	; 0x1000
    b1e6:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    b1e8:	add.w	r2, r1, #8192	; 0x2000
{
    b1ec:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    b1ee:	str	r2, [r0, #16]
	transfer->next = 1;
    b1f0:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    b1f2:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    b1f6:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    b1fa:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    b1fc:	str	r2, [r0, #20]
	transfer->callback_param = param;
    b1fe:	strd	r1, r3, [r0, #24]
}
    b202:	pop	{r4, pc}

0000b204 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b204:	subs	r3, r0, #2
{
    b206:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b208:	cmp	r3, #3
    b20a:	bhi.n	b222 <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b20c:	ldr	r3, [pc, #20]	; (b224 <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    b20e:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b212:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    b216:	movs	r3, #1
    b218:	adds	r0, #64	; 0x40
    b21a:	lsl.w	r1, r3, r1
    b21e:	b.w	aaf0 <schedule_transfer>
}
    b222:	bx	lr
    b224:	.word	0x20000000

0000b228 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b228:	subs	r3, r0, #2
{
    b22a:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b22c:	cmp	r3, #3
    b22e:	bhi.n	b23e <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b230:	movs	r1, #1
    b232:	ldr	r3, [pc, #12]	; (b240 <usb_receive+0x18>)
    b234:	lsls	r1, r0
    b236:	add.w	r0, r3, r0, lsl #7
    b23a:	b.w	aaf0 <schedule_transfer>
}
    b23e:	bx	lr
    b240:	.word	0x20000000

0000b244 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    b244:	ldr	r2, [pc, #32]	; (b268 <usb_transfer_status+0x24>)
{
    b246:	mov	r1, r0
	cmd = USB1_USBCMD;
    b248:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    b24c:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    b24e:	orr.w	r3, r3, #16384	; 0x4000
    b252:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    b256:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    b258:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    b25c:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    b25e:	tst.w	r3, #16384	; 0x4000
    b262:	beq.n	b24c <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    b264:	bx	lr
    b266:	nop
    b268:	.word	0x402e0000

0000b26c <ultoa>:
{
    b26c:	push	{r4, r5, r6, lr}
	int i=0, j;
    b26e:	movs	r4, #0
		digit = val % radix;
    b270:	udiv	r5, r0, r2
    b274:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b278:	uxtb	r3, r6
    b27a:	cmp	r6, #9
    b27c:	ite	ls
    b27e:	addls	r3, #48	; 0x30
    b280:	addhi	r3, #55	; 0x37
		if (val == 0) break;
    b282:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b284:	uxtb	r3, r3
    b286:	strb	r3, [r1, r4]
		if (val == 0) break;
    b288:	bhi.n	b290 <ultoa+0x24>
		i++;
    b28a:	adds	r4, #1
		val /= radix;
    b28c:	mov	r0, r5
		digit = val % radix;
    b28e:	b.n	b270 <ultoa+0x4>
	buf[i + 1] = 0;
    b290:	adds	r3, r1, r4
    b292:	movs	r2, #0
    b294:	subs	r0, r1, #1
    b296:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    b298:	subs	r5, r4, r2
    b29a:	cmp	r2, r5
    b29c:	blt.n	b2a2 <ultoa+0x36>
}
    b29e:	mov	r0, r1
    b2a0:	pop	{r4, r5, r6, pc}
		t = buf[j];
    b2a2:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    b2a6:	adds	r2, #1
		buf[j] = buf[i];
    b2a8:	ldrb	r6, [r3, #0]
    b2aa:	strb	r6, [r0, #0]
		buf[i] = t;
    b2ac:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    b2b0:	b.n	b298 <ultoa+0x2c>
	...

0000b2b4 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    b2b4:	vcmp.f32	s0, s0
{
    b2b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    b2bc:	vmrs	APSR_nzcv, fpscr
	int awidth = abs(width);
    b2c0:	eor.w	r5, r0, r0, asr #31
{
    b2c4:	mov	r7, r0
    b2c6:	mov	r6, r1
    b2c8:	mov	r4, r2
	int awidth = abs(width);
    b2ca:	sub.w	r5, r5, r0, asr #31
{
    b2ce:	vpush	{d8}
    b2d2:	vmov.f32	s16, s0
    b2d6:	sub	sp, #20
	if (isnanf(val)) {
    b2d8:	bvc.n	b338 <dtostrf+0x84>
		int ndigs = (val<0) ? 4 : 3;
    b2da:	vcmpe.f32	s0, #0.0
    b2de:	vmrs	APSR_nzcv, fpscr
    b2e2:	ite	mi
    b2e4:	movmi	r3, #4
    b2e6:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b2e8:	cmp	r3, r5
    b2ea:	ite	lt
    b2ec:	sublt	r5, r5, r3
    b2ee:	movge	r5, #0
		if (width<0) {
    b2f0:	cmp	r0, #0
    b2f2:	bge.n	b302 <dtostrf+0x4e>
			while (awidth) {
				*buf++ = ' ';
    b2f4:	mov	r2, r5
    b2f6:	mov	r0, r4
    b2f8:	add	r4, r5
    b2fa:	movs	r5, #0
    b2fc:	movs	r1, #32
    b2fe:	bl	9fbc <memset>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b302:	vmov	r3, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b306:	movs	r2, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b308:	cmp	r3, #0
    b30a:	itt	lt
    b30c:	movlt	r3, #45	; 0x2d
    b30e:	strblt.w	r3, [r4], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b312:	movs	r3, #65	; 0x41
    b314:	strb	r2, [r4, #0]
    b316:	strb	r3, [r4, #1]
    b318:	adds	r3, r4, #3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
			*buf++ = ' ';
    b31a:	mov	r0, r3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b31c:	strb	r2, [r4, #2]
			*buf++ = ' ';
    b31e:	movs	r1, #32
    b320:	mov	r2, r5
    b322:	bl	9fbc <memset>
			awidth--;
		}
		*buf = 0;
    b326:	movs	r2, #0
			*buf++ = ' ';
    b328:	mov	r3, r0
    b32a:	add	r0, r5
		*buf = 0;
    b32c:	strb	r2, [r3, r5]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    b32e:	add	sp, #20
    b330:	vpop	{d8}
    b334:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (isinff(val)) {
    b338:	vabs.f32	s15, s0
    b33c:	vldr	s14, [pc, #432]	; b4f0 <dtostrf+0x23c>
    b340:	vcmp.f32	s15, s14
    b344:	vmrs	APSR_nzcv, fpscr
    b348:	ble.n	b390 <dtostrf+0xdc>
		int ndigs = (val<0) ? 4 : 3;
    b34a:	vcmpe.f32	s0, #0.0
    b34e:	vmrs	APSR_nzcv, fpscr
    b352:	ite	mi
    b354:	movmi	r3, #4
    b356:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b358:	cmp	r3, r5
    b35a:	ite	lt
    b35c:	sublt	r5, r5, r3
    b35e:	movge	r5, #0
		if (width<0) {
    b360:	cmp	r0, #0
    b362:	bge.n	b372 <dtostrf+0xbe>
				*buf++ = ' ';
    b364:	mov	r2, r5
    b366:	mov	r0, r4
    b368:	add	r4, r5
    b36a:	movs	r5, #0
    b36c:	movs	r1, #32
    b36e:	bl	9fbc <memset>
		if (val<0) *buf++ = '-';
    b372:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b376:	movs	r2, #70	; 0x46
		if (val<0) *buf++ = '-';
    b378:	vmrs	APSR_nzcv, fpscr
    b37c:	itt	mi
    b37e:	movmi	r3, #45	; 0x2d
    b380:	strbmi.w	r3, [r4], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b384:	movs	r3, #73	; 0x49
    b386:	strb	r3, [r4, #0]
    b388:	movs	r3, #78	; 0x4e
    b38a:	strb	r3, [r4, #1]
    b38c:	adds	r3, r4, #3
    b38e:	b.n	b31a <dtostrf+0x66>
	s = fcvtf(val, precision, &decpt, &sign);
    b390:	add	r2, sp, #8
    b392:	add	r1, sp, #4
    b394:	mov	r0, r6
    b396:	bl	d892 <fcvtf>
	if (precision == 0 && decpt == 0) {
    b39a:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    b39c:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    b39e:	orrs.w	r2, r6, r3
    b3a2:	bne.n	b442 <dtostrf+0x18e>
		s = (*s < '5') ? "0" : "1";
    b3a4:	ldrb	r1, [r0, #0]
    b3a6:	ldr	r3, [pc, #332]	; (b4f4 <dtostrf+0x240>)
    b3a8:	ldr	r2, [pc, #332]	; (b4f8 <dtostrf+0x244>)
    b3aa:	cmp	r1, #52	; 0x34
    b3ac:	ite	ls
    b3ae:	movls	r8, r2
    b3b0:	movhi	r8, r3
		decpt++;
    b3b2:	movs	r3, #1
    b3b4:	str	r3, [sp, #4]
	reqd = strlen(s);
    b3b6:	mov	r0, r8
    b3b8:	bl	eb80 <strlen>
	if (reqd > decpt) reqd++;
    b3bc:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    b3be:	mov	r5, r0
	if (reqd > decpt) reqd++;
    b3c0:	cmp	r3, r0
    b3c2:	it	lt
    b3c4:	addlt	r5, r0, #1
	if (decpt == 0) reqd++;
    b3c6:	cmp	r3, #0
    b3c8:	bne.n	b452 <dtostrf+0x19e>
    b3ca:	adds	r5, #1
	if (sign) reqd++;
    b3cc:	ldr.w	fp, [sp, #8]
    b3d0:	cmp.w	fp, #0
    b3d4:	beq.n	b3d8 <dtostrf+0x124>
    b3d6:	adds	r5, #1
	pad = width - reqd;
    b3d8:	sub.w	sl, r7, r5
	e = p + reqd;
    b3dc:	add.w	r9, r4, r5
	if (pad > 0) {
    b3e0:	cmp.w	sl, #0
    b3e4:	ble.n	b49a <dtostrf+0x1e6>
		while (pad-- > 0) *p++ = ' ';
    b3e6:	mov	r2, sl
    b3e8:	movs	r1, #32
    b3ea:	mov	r0, r4
		e += pad;
    b3ec:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    b3ee:	bl	9fbc <memset>
    b3f2:	add.w	r2, r4, sl
	if (sign) *p++ = '-';
    b3f6:	cmp.w	fp, #0
    b3fa:	beq.n	b402 <dtostrf+0x14e>
    b3fc:	movs	r3, #45	; 0x2d
    b3fe:	strb.w	r3, [r2], #1
	if (decpt == 0 && precision > 0) {
    b402:	ldr	r1, [sp, #4]
    b404:	cmp	r1, #0
    b406:	bne.n	b49e <dtostrf+0x1ea>
    b408:	cbz	r6, b418 <dtostrf+0x164>
		*p++ = '0';
    b40a:	mov	r3, r2
    b40c:	movs	r1, #48	; 0x30
    b40e:	strb.w	r1, [r3], #2
		*p++ = '.';
    b412:	movs	r1, #46	; 0x2e
    b414:	strb	r1, [r2, #1]
    b416:	mov	r2, r3
		if (--decpt == 0) *p++ = '.';
    b418:	movs	r0, #46	; 0x2e
	while (p < e) {
    b41a:	cmp	r9, r2
		*p++ = *s++;
    b41c:	mov	r3, r2
	while (p < e) {
    b41e:	bhi.n	b4d4 <dtostrf+0x220>
	if (width < 0) {
    b420:	cmp	r7, #0
    b422:	bge.n	b43a <dtostrf+0x186>
		pad = (reqd + width) * -1;
    b424:	adds	r0, r5, r7
		while (pad-- > 0) *p++ = ' ';
    b426:	movs	r1, #32
		pad = (reqd + width) * -1;
    b428:	negs	r5, r0
		while (pad-- > 0) *p++ = ' ';
    b42a:	mov	r0, r3
    b42c:	bic.w	r5, r5, r5, asr #31
    b430:	mov	r2, r5
    b432:	bl	9fbc <memset>
    b436:	mov	r3, r0
    b438:	add	r3, r5
	*p = 0;
    b43a:	movs	r2, #0
	return buf;
    b43c:	mov	r0, r4
	*p = 0;
    b43e:	strb	r2, [r3, #0]
	return buf;
    b440:	b.n	b32e <dtostrf+0x7a>
	if (-decpt  > (int)precision) {
    b442:	negs	r3, r3
    b444:	cmp	r6, r3
		decpt = -precision;
    b446:	ittt	lt
    b448:	neglt	r3, r6
		s = "0";
    b44a:	ldrlt.w	r8, [pc, #172]	; b4f8 <dtostrf+0x244>
		decpt = -precision;
    b44e:	strlt	r3, [sp, #4]
    b450:	b.n	b3b6 <dtostrf+0x102>
	if (decpt < 0 && precision > 0) {
    b452:	bge.n	b3cc <dtostrf+0x118>
    b454:	cmp	r6, #0
    b456:	beq.n	b3cc <dtostrf+0x118>
		if (strlen(s) > precision + decpt) {
    b458:	add	r3, r6
		reqd = precision + 2;
    b45a:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    b45c:	cmp	r0, r3
    b45e:	bls.n	b3cc <dtostrf+0x118>
				val *= 10.0f;
    b460:	vmov.f32	s15, #36	; 0x41200000  10.0
    b464:	mov	r3, r6
    b466:	b.n	b46e <dtostrf+0x1ba>
    b468:	vmul.f32	s16, s16, s15
				newPrecision--;
    b46c:	subs	r3, #1
			while (newPrecision > 0) {
    b46e:	cmp	r3, #0
    b470:	bgt.n	b468 <dtostrf+0x1b4>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b472:	cmp	r6, #0
    b474:	add	r2, sp, #8
    b476:	add	r1, sp, #12
    b478:	vmov.f32	s0, s16
    b47c:	ite	ge
    b47e:	subge	r0, r6, r6
    b480:	movlt	r0, r6
    b482:	bl	d892 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b486:	ldr	r3, [sp, #4]
    b488:	ldr	r2, [sp, #12]
    b48a:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b48c:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b48e:	subs	r2, r2, r3
    b490:	cmp	r2, r1
    b492:	itt	eq
    b494:	addeq	r3, #1
    b496:	streq	r3, [sp, #4]
    b498:	b.n	b3cc <dtostrf+0x118>
    b49a:	mov	r2, r4
    b49c:	b.n	b3f6 <dtostrf+0x142>
	else if (decpt < 0 && precision > 0) {
    b49e:	bge.n	b418 <dtostrf+0x164>
    b4a0:	cmp	r6, #0
    b4a2:	beq.n	b418 <dtostrf+0x164>
		*p++ = '0';
    b4a4:	mov	r3, r2
		*p++ = '.';
    b4a6:	movs	r0, #46	; 0x2e
		*p++ = '0';
    b4a8:	mov.w	ip, #48	; 0x30
		while ( decpt < 0 ) {
    b4ac:	movs	r6, #0
		*p++ = '0';
    b4ae:	strb.w	ip, [r3], #2
		*p++ = '.';
    b4b2:	strb	r0, [r2, #1]
		while ( decpt < 0 ) {
    b4b4:	rsb	r0, r1, #2
    b4b8:	add	r2, r0
		*p++ = '.';
    b4ba:	mov	r0, r3
		while ( decpt < 0 ) {
    b4bc:	cmp	r0, r2
    b4be:	bne.n	b4cc <dtostrf+0x218>
    b4c0:	subs	r2, r3, r1
    b4c2:	cmp	r6, #0
    b4c4:	beq.n	b418 <dtostrf+0x164>
    b4c6:	movs	r3, #0
    b4c8:	str	r3, [sp, #4]
    b4ca:	b.n	b418 <dtostrf+0x164>
			*p++ = '0';
    b4cc:	movs	r6, #1
    b4ce:	strb.w	ip, [r0], #1
    b4d2:	b.n	b4bc <dtostrf+0x208>
		*p++ = *s++;
    b4d4:	ldrb.w	r1, [r8], #1
    b4d8:	strb.w	r1, [r3], #1
		if (p == e) break;
    b4dc:	cmp	r9, r3
    b4de:	beq.n	b420 <dtostrf+0x16c>
		if (--decpt == 0) *p++ = '.';
    b4e0:	ldr	r1, [sp, #4]
    b4e2:	subs	r1, #1
    b4e4:	str	r1, [sp, #4]
    b4e6:	cbnz	r1, b4ec <dtostrf+0x238>
    b4e8:	adds	r3, r2, #2
    b4ea:	strb	r0, [r2, #1]
			*p++ = '0';
    b4ec:	mov	r2, r3
    b4ee:	b.n	b41a <dtostrf+0x166>
    b4f0:	.word	0x7f7fffff
    b4f4:	.word	0x20000fe8
    b4f8:	.word	0x2000114b

0000b4fc <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    b4fc:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b4fe:	ldr	r3, [pc, #52]	; (b534 <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b500:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b502:	ldr	r6, [pc, #52]	; (b538 <micros+0x3c>)
		scc = systick_cycle_count;
    b504:	ldr	r5, [pc, #52]	; (b53c <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b506:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b50a:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    b50c:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b50e:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b512:	cmp	r2, #0
    b514:	bne.n	b506 <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b516:	ldr	r3, [pc, #40]	; (b540 <micros+0x44>)
    b518:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b51a:	ldr	r2, [pc, #40]	; (b544 <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    b51c:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b51e:	ldr	r2, [r2, #0]
    b520:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b524:	mov.w	r3, #1000	; 0x3e8
    b528:	muls	r0, r3
	return usec;
}
    b52a:	cmp	r2, r3
    b52c:	ite	ls
    b52e:	addls	r0, r0, r2
    b530:	addhi	r0, r0, r3
    b532:	pop	{r4, r5, r6, pc}
    b534:	.word	0x20015378
    b538:	.word	0x20015374
    b53c:	.word	0x20015370
    b540:	.word	0xe0001000
    b544:	.word	0x20014ce0

0000b548 <delay>:
{
    b548:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    b54a:	mov	r4, r0
    b54c:	cbz	r0, b570 <delay+0x28>
	start = micros();
    b54e:	bl	b4fc <micros>
    b552:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    b554:	bl	b4fc <micros>
    b558:	subs	r0, r0, r5
    b55a:	cmp.w	r0, #1000	; 0x3e8
    b55e:	bcs.n	b566 <delay+0x1e>
		yield();
    b560:	bl	c1c4 <yield>
		while ((micros() - start) >= 1000) {
    b564:	b.n	b554 <delay+0xc>
			if (--msec == 0) return;
    b566:	subs	r4, #1
    b568:	beq.n	b570 <delay+0x28>
			start += 1000;
    b56a:	add.w	r5, r5, #1000	; 0x3e8
    b56e:	b.n	b554 <delay+0xc>
}
    b570:	pop	{r3, r4, r5, pc}
	...

0000b574 <unused_interrupt_vector>:
	__disable_irq();
    b574:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b576:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b57a:	ldr	r4, [pc, #316]	; (b6b8 <unused_interrupt_vector+0x144>)
    b57c:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    b580:	tst.w	lr, #4
    b584:	ite	eq
    b586:	mrseq	r2, MSP
    b58a:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    b58e:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b592:	ldr	r7, [pc, #296]	; (b6bc <unused_interrupt_vector+0x148>)
	while (p < end) {
    b594:	ldr	r6, [pc, #296]	; (b6c0 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b596:	ldr.w	r1, [r3, #3368]	; 0xd28
    b59a:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    b59e:	ldr.w	r1, [r3, #3372]	; 0xd2c
    b5a2:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    b5a6:	ldr.w	r1, [r3, #3380]	; 0xd34
    b5aa:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    b5ae:	ldr.w	r3, [r3, #3384]	; 0xd38
    b5b2:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    b5b6:	ldr	r3, [r2, #24]
    b5b8:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b5bc:	ldr	r3, [r2, #28]
    b5be:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b5c2:	bl	bc38 <tempmonGetTemp>
    b5c6:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b5ca:	bl	b744 <rtc_get>
	info->len = sizeof(*info) / 4;
    b5ce:	movs	r3, #11
	p = (uint32_t *)info;
    b5d0:	ldr	r2, [pc, #240]	; (b6c4 <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    b5d2:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b5d6:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    b5da:	mov	r0, r2
	crc = 0xFFFFFFFF;
    b5dc:	mov.w	r3, #4294967295
		crc ^= *p++;
    b5e0:	ldr	r1, [r2, #0]
    b5e2:	movs	r5, #32
    b5e4:	adds	r2, #4
    b5e6:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b5e8:	and.w	r1, r3, #1
    b5ec:	subs	r5, #1
    b5ee:	mul.w	r1, r7, r1
    b5f2:	eor.w	r3, r1, r3, lsr #1
    b5f6:	bne.n	b5e8 <unused_interrupt_vector+0x74>
	while (p < end) {
    b5f8:	cmp	r2, r6
    b5fa:	bne.n	b5e0 <unused_interrupt_vector+0x6c>
	info->crc = crc;
    b5fc:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    b600:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b604:	mov.w	r3, #3758153728	; 0xe000e000
    b608:	ldr	r2, [pc, #188]	; (b6c8 <unused_interrupt_vector+0x154>)
    b60a:	str.w	r0, [r3, #3952]	; 0xf70
    b60e:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    b612:	dsb	sy
	asm("isb");
    b616:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b61a:	ldr	r2, [pc, #176]	; (b6cc <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    b61c:	ldr	r4, [pc, #176]	; (b6d0 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b61e:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b620:	ldr	r0, [pc, #176]	; (b6d4 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b622:	orr.w	r3, r3, #12288	; 0x3000
    b626:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b628:	movs	r3, #2
    b62a:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b62c:	ldr	r3, [r2, #28]
    b62e:	bic.w	r3, r3, #127	; 0x7f
    b632:	orr.w	r3, r3, #64	; 0x40
    b636:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b638:	ldr	r3, [pc, #156]	; (b6d8 <unused_interrupt_vector+0x164>)
    b63a:	ldr	r3, [r3, #0]
    b63c:	cmp	r3, r0
    b63e:	bls.n	b644 <unused_interrupt_vector+0xd0>
    b640:	bl	a800 <set_arm_clock>
	PIT_MCR = 0;
    b644:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b646:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    b648:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b64c:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    b64e:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b652:	ldr	r3, [pc, #136]	; (b6dc <unused_interrupt_vector+0x168>)
    b654:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    b658:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b65c:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    b660:	ldr	r4, [pc, #108]	; (b6d0 <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    b662:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b666:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b66a:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b66e:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b672:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    b676:	ldr.w	r3, [r4, #268]	; 0x10c
    b67a:	cbz	r3, b686 <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    b67c:	adds	r5, #1
			PIT_TFLG0 = 1;
    b67e:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b682:	cmp	r5, #79	; 0x4f
    b684:	bhi.n	b68c <unused_interrupt_vector+0x118>
		usb_isr();
    b686:	bl	acb0 <usb_isr>
		if (PIT_TFLG0) {
    b68a:	b.n	b676 <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    b68c:	ldr	r3, [pc, #80]	; (b6e0 <unused_interrupt_vector+0x16c>)
    b68e:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    b690:	ldr	r1, [pc, #80]	; (b6e4 <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    b692:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b696:	mov.w	r2, #2147483648	; 0x80000000
    b69a:	ldr	r3, [pc, #76]	; (b6e8 <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    b69c:	ldr	r0, [pc, #76]	; (b6ec <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b69e:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b6a0:	ldr	r2, [pc, #44]	; (b6d0 <unused_interrupt_vector+0x15c>)
    b6a2:	ldr.w	r3, [r2, #268]	; 0x10c
    b6a6:	cbz	r3, b6b4 <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    b6a8:	mov.w	r3, #3758153728	; 0xe000e000
    b6ac:	ldr	r2, [pc, #64]	; (b6f0 <unused_interrupt_vector+0x17c>)
    b6ae:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    b6b2:	b.n	b6b2 <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    b6b4:	str	r0, [r1, #48]	; 0x30
    b6b6:	b.n	b6a2 <unused_interrupt_vector+0x12e>
    b6b8:	.word	0x2027ff00
    b6bc:	.word	0xedb88320
    b6c0:	.word	0x2027ffa8
    b6c4:	.word	0x2027ff80
    b6c8:	.word	0x2027ffa0
    b6cc:	.word	0x400fc000
    b6d0:	.word	0x40084000
    b6d4:	.word	0x0bcd3d80
    b6d8:	.word	0x20001cf0
    b6dc:	.word	0x00249f00
    b6e0:	.word	0x402e0000
    b6e4:	.word	0x400f8000
    b6e8:	.word	0x400d9000
    b6ec:	.word	0x0bad00f1
    b6f0:	.word	0x05fa0004

0000b6f4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    b6f4:	ldr	r2, [pc, #32]	; (b718 <_sbrk+0x24>)
{
    b6f6:	push	{r3, lr}
    b6f8:	mov	r3, r0
        char *prev = __brkval;
    b6fa:	ldr	r0, [r2, #0]
        if (incr != 0) {
    b6fc:	cbz	r3, b712 <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    b6fe:	add	r3, r0
    b700:	ldr	r1, [pc, #24]	; (b71c <_sbrk+0x28>)
    b702:	cmp	r3, r1
    b704:	bls.n	b714 <_sbrk+0x20>
                        errno = ENOMEM;
    b706:	bl	ea6c <__errno>
    b70a:	movs	r3, #12
    b70c:	str	r3, [r0, #0]
                        return (void *)-1;
    b70e:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    b712:	pop	{r3, pc}
                __brkval = prev + incr;
    b714:	str	r3, [r2, #0]
    b716:	b.n	b712 <_sbrk+0x1e>
    b718:	.word	0x200020c8
    b71c:	.word	0x20280000

0000b720 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    b720:	movs	r0, #0
    b722:	bx	lr

0000b724 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    b724:	mov.w	r0, #4294967295
    b728:	bx	lr

0000b72a <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    b72a:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    b72e:	movs	r0, #0
	st->st_mode = S_IFCHR;
    b730:	str	r3, [r1, #4]
}
    b732:	bx	lr

0000b734 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    b734:	movs	r0, #1
    b736:	bx	lr

0000b738 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    b738:	mov.w	r0, #4294967295
    b73c:	bx	lr

0000b73e <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    b73e:	wfi
    b740:	b.n	b73e <abort>
	...

0000b744 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    b744:	ldr	r2, [pc, #28]	; (b764 <rtc_get+0x20>)
    b746:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    b748:	ldr	r3, [r2, #40]	; 0x28
{
    b74a:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    b74c:	mov	r4, r3
    b74e:	mov	r1, r0
    b750:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    b752:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    b754:	cmp	r4, r3
    b756:	bne.n	b74c <rtc_get+0x8>
    b758:	cmp	r1, r0
    b75a:	bne.n	b74c <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    b75c:	lsrs	r3, r3, #15
}
    b75e:	orr.w	r0, r3, r0, lsl #17
    b762:	pop	{r4, pc}
    b764:	.word	0x400d4000

0000b768 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    b768:	ldr	r3, [pc, #60]	; (b7a8 <rtc_set+0x40>)
    b76a:	ldr	r2, [r3, #8]
    b76c:	bic.w	r2, r2, #65537	; 0x10001
    b770:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    b772:	ldr	r2, [r3, #8]
    b774:	lsls	r2, r2, #31
    b776:	bmi.n	b772 <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    b778:	ldr	r2, [r3, #56]	; 0x38
    b77a:	bic.w	r2, r2, #1
    b77e:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    b780:	ldr	r3, [pc, #36]	; (b7a8 <rtc_set+0x40>)
    b782:	ldr	r2, [r3, #56]	; 0x38
    b784:	lsls	r1, r2, #31
    b786:	bmi.n	b782 <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    b788:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    b78a:	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    b78c:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    b78e:	str	r0, [r3, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    b790:	ldr	r2, [r3, #56]	; 0x38
    b792:	orr.w	r2, r2, #1
    b796:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    b798:	ldr	r2, [r3, #56]	; 0x38
    b79a:	lsls	r2, r2, #31
    b79c:	bpl.n	b798 <rtc_set+0x30>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    b79e:	ldr	r2, [r3, #8]
    b7a0:	orr.w	r2, r2, #65537	; 0x10001
    b7a4:	str	r2, [r3, #8]
}
    b7a6:	bx	lr
    b7a8:	.word	0x400d4000

0000b7ac <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b7ac:	ldr	r3, [pc, #68]	; (b7f4 <flash_wait+0x48>)
	FLEXSPI_LUT61 = 0;
    b7ae:	movs	r1, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b7b0:	ldr	r2, [pc, #68]	; (b7f8 <flash_wait+0x4c>)
{
    b7b2:	push	{r4, r5, lr}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b7b4:	str.w	r2, [r3, #752]	; 0x2f0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    b7b8:	movs	r2, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    b7ba:	ldr	r5, [pc, #64]	; (b7fc <flash_wait+0x50>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    b7bc:	ldr	r4, [pc, #64]	; (b800 <flash_wait+0x54>)
	FLEXSPI_LUT61 = 0;
    b7be:	str.w	r1, [r3, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    b7c2:	str.w	r2, [r3, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    b7c6:	str.w	r1, [r3, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    b7ca:	str.w	r5, [r3, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b7ce:	str.w	r2, [r3, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    b7d2:	ldr	r0, [r3, #20]
    b7d4:	lsls	r0, r0, #31
    b7d6:	bpl.n	b7d2 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b7d8:	str	r2, [r3, #20]
	} while (status & 1);
    b7da:	ldrb	r0, [r4, #0]
    b7dc:	lsls	r0, r0, #31
    b7de:	bmi.n	b7c2 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    b7e0:	ldr	r2, [r3, #0]
    b7e2:	orr.w	r2, r2, #1
    b7e6:	str	r2, [r3, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    b7e8:	ldr	r2, [pc, #8]	; (b7f4 <flash_wait+0x48>)
    b7ea:	ldr	r3, [r2, #0]
    b7ec:	lsls	r3, r3, #31
    b7ee:	bmi.n	b7ea <flash_wait+0x3e>
	__enable_irq();
    b7f0:	cpsie	i
}
    b7f2:	pop	{r4, r5, pc}
    b7f4:	.word	0x402a8000
    b7f8:	.word	0x24010405
    b7fc:	.word	0x000f0001
    b800:	.word	0x402a8100

0000b804 <eeprom_initialize>:
{
    b804:	push	{r4, r5, lr}
    b806:	ldr	r3, [pc, #52]	; (b83c <eeprom_initialize+0x38>)
			if (*p++ == 0xFFFF) break;
    b808:	movw	r5, #65535	; 0xffff
    b80c:	ldr	r4, [pc, #48]	; (b840 <eeprom_initialize+0x3c>)
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b80e:	sub.w	r1, r3, #4096	; 0x1000
		uint16_t index = 0;
    b812:	movs	r2, #0
			if (*p++ == 0xFFFF) break;
    b814:	ldrh	r0, [r1, #0]
    b816:	adds	r1, #2
    b818:	cmp	r0, r5
    b81a:	beq.n	b824 <eeprom_initialize+0x20>
			index++;
    b81c:	adds	r2, #1
		} while (p < end);
    b81e:	cmp	r1, r3
			index++;
    b820:	uxth	r2, r2
		} while (p < end);
    b822:	bcc.n	b814 <eeprom_initialize+0x10>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    b824:	add.w	r3, r3, #4096	; 0x1000
		sector_index[sector] = index;
    b828:	strh.w	r2, [r4], #2
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    b82c:	cmp.w	r3, #1619001344	; 0x60800000
    b830:	bne.n	b80e <eeprom_initialize+0xa>
	initialized = 1;
    b832:	ldr	r3, [pc, #16]	; (b844 <eeprom_initialize+0x40>)
    b834:	movs	r2, #1
    b836:	strb	r2, [r3, #0]
}
    b838:	pop	{r4, r5, pc}
    b83a:	nop
    b83c:	.word	0x607c1000
    b840:	.word	0x200153f0
    b844:	.word	0x200155c2

0000b848 <eeprom_read_byte>:
{
    b848:	push	{r3, r4, r5, lr}
	if (addr > E2END) return 0xFF;
    b84a:	movw	r3, #4283	; 0x10bb
{
    b84e:	mov	r4, r0
	if (addr > E2END) return 0xFF;
    b850:	cmp	r0, r3
    b852:	bhi.n	b8a0 <eeprom_read_byte+0x58>
	if (!initialized) eeprom_initialize();
    b854:	ldr	r3, [pc, #76]	; (b8a4 <eeprom_read_byte+0x5c>)
    b856:	ldrb	r3, [r3, #0]
    b858:	cbnz	r3, b85e <eeprom_read_byte+0x16>
    b85a:	bl	b804 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS;
    b85e:	lsrs	r2, r4, #2
    b860:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    b862:	ldr	r0, [pc, #68]	; (b8a8 <eeprom_read_byte+0x60>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b864:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS;
    b868:	udiv	r3, r2, r3
    b86c:	rsb	r1, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b870:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS;
    b874:	subs	r2, r2, r1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b876:	add.w	r1, r2, #393216	; 0x60000
	end = p + sector_index[sector];
    b87a:	ldrh.w	r2, [r0, r2, lsl #1]
	uint8_t data=0xFF;
    b87e:	movs	r0, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b880:	add.w	r1, r1, #1984	; 0x7c0
	end = p + sector_index[sector];
    b884:	lsls	r2, r2, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b886:	lsls	r3, r1, #12
	end = p + sector_index[sector];
    b888:	add.w	r2, r2, r1, lsl #12
	while (p < end) {
    b88c:	cmp	r3, r2
    b88e:	bcc.n	b892 <eeprom_read_byte+0x4a>
}
    b890:	pop	{r3, r4, r5, pc}
		uint32_t val = *p++;
    b892:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    b896:	uxtb	r5, r1
    b898:	cmp	r5, r4
    b89a:	it	eq
    b89c:	lsreq	r0, r1, #8
    b89e:	b.n	b88c <eeprom_read_byte+0x44>
	if (addr > E2END) return 0xFF;
    b8a0:	movs	r0, #255	; 0xff
    b8a2:	b.n	b890 <eeprom_read_byte+0x48>
    b8a4:	.word	0x200155c2
    b8a8:	.word	0x200153f0

0000b8ac <eeprom_read_block>:
{
    b8ac:	push	{r4, r5, r6, lr}
    b8ae:	mov	r4, r0
    b8b0:	adds	r5, r1, r2
    b8b2:	mov	r0, r1
	while (len--) {
    b8b4:	cmp	r0, r5
    b8b6:	bne.n	b8ba <eeprom_read_block+0xe>
}
    b8b8:	pop	{r4, r5, r6, pc}
		*dest++ = eeprom_read_byte(p++);
    b8ba:	adds	r6, r0, #1
    b8bc:	bl	b848 <eeprom_read_byte>
    b8c0:	strb.w	r0, [r4], #1
    b8c4:	mov	r0, r6
    b8c6:	b.n	b8b4 <eeprom_read_block+0x8>

0000b8c8 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    b8c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8cc:	mov	r5, r1
    b8ce:	mov	r4, r2
	__disable_irq();
    b8d0:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b8d2:	ldr	r3, [pc, #192]	; (b994 <eepromemu_flash_write+0xcc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b8d4:	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b8d8:	ldr	r2, [pc, #188]	; (b998 <eepromemu_flash_write+0xd0>)
    b8da:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    b8dc:	movs	r2, #2
    b8de:	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    b8e0:	movs	r2, #0
    b8e2:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b8e6:	str.w	r1, [r3, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    b8ea:	adds	r1, r0, r4
	FLEXSPI_LUT61 = 0;
    b8ec:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    b8f0:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    b8f4:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    b8f8:	mov.w	r2, #983040	; 0xf0000
    b8fc:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b900:	movs	r2, #1
    b902:	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b906:	bic.w	r2, r0, #31
	asm("dsb");
    b90a:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    b90e:	mov.w	r6, #3758153728	; 0xe000e000
    b912:	str.w	r2, [r6, #3932]	; 0xf5c
		location += 32;
    b916:	adds	r2, #32
	} while (location < end_addr);
    b918:	cmp	r1, r2
    b91a:	bhi.n	b912 <eepromemu_flash_write+0x4a>
	asm("dsb");
    b91c:	dsb	sy
	asm("isb");
    b920:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    b924:	ldr	r2, [r3, #20]
    b926:	lsls	r6, r2, #31
    b928:	bpl.n	b924 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b92a:	movs	r2, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    b92c:	ldr	r1, [pc, #108]	; (b99c <eepromemu_flash_write+0xd4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    b92e:	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    b932:	ldr	r7, [pc, #96]	; (b994 <eepromemu_flash_write+0xcc>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b934:	str	r2, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    b936:	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    b93a:	movw	r1, #8705	; 0x2201
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b93e:	ldr.w	r8, [pc, #96]	; b9a0 <eepromemu_flash_write+0xd8>
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    b942:	str.w	r1, [r3, #756]	; 0x2f4
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b946:	uxth	r1, r4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    b948:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b94c:	orr.w	r1, r1, #983040	; 0xf0000
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    b950:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b954:	str.w	r1, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b958:	str.w	r2, [r3, #176]	; 0xb0
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    b95c:	ldr	r3, [r7, #20]
    b95e:	lsls	r2, r3, #31
    b960:	bpl.n	b96e <eepromemu_flash_write+0xa6>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    b962:	movs	r3, #65	; 0x41
    b964:	str	r3, [r7, #20]
	flash_wait();
}
    b966:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	flash_wait();
    b96a:	b.w	b7ac <flash_wait>
		if (n & FLEXSPI_INTR_IPTXWE) {
    b96e:	lsls	r1, r3, #25
    b970:	bpl.n	b95c <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    b972:	cmp	r4, #8
    b974:	bhi.n	b98e <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    b976:	cbz	r4, b988 <eepromemu_flash_write+0xc0>
    b978:	mov	r6, r4
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b97a:	mov	r1, r5
				len -= wrlen;
    b97c:	subs	r4, r4, r6
				src += wrlen;
    b97e:	add	r5, r6
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b980:	mov	r2, r6
    b982:	mov	r0, r8
    b984:	bl	a000 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    b988:	movs	r3, #64	; 0x40
    b98a:	str	r3, [r7, #20]
    b98c:	b.n	b95c <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    b98e:	movs	r6, #8
    b990:	b.n	b97a <eepromemu_flash_write+0xb2>
    b992:	nop
    b994:	.word	0x402a8000
    b998:	.word	0x5af05af0
    b99c:	.word	0x08180432
    b9a0:	.word	0x402a8180

0000b9a4 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    b9a4:	push	{r4}
	__disable_irq();
    b9a6:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b9a8:	ldr	r3, [pc, #156]	; (ba48 <eepromemu_flash_erase_sector+0xa4>)
    b9aa:	ldr	r2, [pc, #160]	; (ba4c <eepromemu_flash_erase_sector+0xa8>)
    b9ac:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    b9ae:	movs	r2, #2
    b9b0:	str	r2, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b9b2:	movw	r2, #1030	; 0x406
    b9b6:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    b9ba:	movs	r2, #0
    b9bc:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    b9c0:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    b9c4:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    b9c8:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    b9cc:	mov.w	r2, #983040	; 0xf0000
    b9d0:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b9d4:	movs	r2, #1
    b9d6:	str.w	r2, [r3, #176]	; 0xb0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    b9da:	bic.w	r2, r0, #4080	; 0xff0
    b9de:	bic.w	r2, r2, #15
	asm("dsb");
    b9e2:	dsb	sy
    b9e6:	add.w	r4, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
    b9ea:	add.w	r1, r2, #4096	; 0x1000
    b9ee:	cmp	r1, r4
    b9f0:	ite	cc
    b9f2:	movcc	r1, #1
    b9f4:	movcs	r1, #128	; 0x80
		SCB_CACHE_DCIMVAC = location;
    b9f6:	mov.w	r4, #3758153728	; 0xe000e000
    b9fa:	add.w	r1, r2, r1, lsl #5
    b9fe:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    ba02:	adds	r2, #32
	} while (location < end_addr);
    ba04:	cmp	r2, r1
    ba06:	bne.n	b9fe <eepromemu_flash_erase_sector+0x5a>
	asm("dsb");
    ba08:	dsb	sy
	asm("isb");
    ba0c:	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    ba10:	ldr	r2, [r3, #20]
    ba12:	lsls	r1, r2, #31
    ba14:	bpl.n	ba10 <eepromemu_flash_erase_sector+0x6c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ba16:	movs	r1, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    ba18:	ldr	r2, [pc, #52]	; (ba50 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ba1a:	str	r1, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    ba1c:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    ba20:	ldr	r2, [pc, #48]	; (ba54 <eepromemu_flash_erase_sector+0xb0>)
    ba22:	ands	r2, r0
    ba24:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    ba28:	mov.w	r2, #983040	; 0xf0000
    ba2c:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    ba30:	str.w	r1, [r3, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    ba34:	ldr	r3, [pc, #16]	; (ba48 <eepromemu_flash_erase_sector+0xa4>)
    ba36:	ldr	r2, [r3, #20]
    ba38:	lsls	r2, r2, #31
    ba3a:	bpl.n	ba36 <eepromemu_flash_erase_sector+0x92>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ba3c:	movs	r2, #1
	flash_wait();
}
    ba3e:	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ba42:	str	r2, [r3, #20]
	flash_wait();
    ba44:	b.w	b7ac <flash_wait>
    ba48:	.word	0x402a8000
    ba4c:	.word	0x5af05af0
    ba50:	.word	0x08180420
    ba54:	.word	0x00fff000

0000ba58 <eeprom_write_byte>:
	if (addr > E2END) return;
    ba58:	movw	r3, #4283	; 0x10bb
    ba5c:	cmp	r0, r3
{
    ba5e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba62:	mov	r4, r0
    ba64:	sub	sp, #264	; 0x108
    ba66:	mov	r9, r1
	if (addr > E2END) return;
    ba68:	bhi.n	baca <eeprom_write_byte+0x72>
	if (!initialized) eeprom_initialize();
    ba6a:	ldr	r3, [pc, #232]	; (bb54 <eeprom_write_byte+0xfc>)
    ba6c:	ldrb	r3, [r3, #0]
    ba6e:	cbnz	r3, ba74 <eeprom_write_byte+0x1c>
    ba70:	bl	b804 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS; 
    ba74:	lsrs	r6, r4, #2
    ba76:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    ba78:	ldr	r7, [pc, #220]	; (bb58 <eeprom_write_byte+0x100>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ba7a:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS; 
    ba7e:	udiv	r3, r6, r3
    ba82:	rsb	r2, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ba86:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    ba8a:	subs	r6, r6, r2
	uint8_t olddata=0xFF;
    ba8c:	movs	r2, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ba8e:	add.w	r5, r6, #393216	; 0x60000
	end = p + sector_index[sector];
    ba92:	ldrh.w	sl, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ba96:	add.w	r5, r5, #1984	; 0x7c0
    ba9a:	lsls	r5, r5, #12
    ba9c:	mov	r8, r5
	end = p + sector_index[sector];
    ba9e:	add.w	r0, r5, sl, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    baa2:	mov	r3, r5
	while (p < end) {
    baa4:	cmp	r3, r0
    baa6:	bcc.n	bad0 <eeprom_write_byte+0x78>
	if (data == olddata) return;
    baa8:	cmp	r2, r9
    baaa:	beq.n	baca <eeprom_write_byte+0x72>
	if (sector_index[sector] < 2048) {
    baac:	cmp.w	sl, #2048	; 0x800
    bab0:	bcs.n	bae0 <eeprom_write_byte+0x88>
		uint16_t newdata = offset | (data << 8);
    bab2:	orr.w	r4, r4, r9, lsl #8
		sector_index[sector] = sector_index[sector] + 1;
    bab6:	add.w	sl, sl, #1
		eepromemu_flash_write(end, &newdata, 2);
    baba:	movs	r2, #2
    babc:	add	r1, sp, #8
		uint16_t newdata = offset | (data << 8);
    babe:	strh.w	r4, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    bac2:	bl	b8c8 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    bac6:	strh.w	sl, [r7, r6, lsl #1]
}
    baca:	add	sp, #264	; 0x108
    bacc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t val = *p++;
    bad0:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    bad4:	uxtb.w	ip, r1
    bad8:	cmp	ip, r4
    bada:	it	eq
    badc:	lsreq	r2, r1, #8
    bade:	b.n	baa4 <eeprom_write_byte+0x4c>
		memset(buf, 0xFF, sizeof(buf));
    bae0:	mov.w	r2, #256	; 0x100
    bae4:	movs	r1, #255	; 0xff
    bae6:	add	r0, sp, #8
    bae8:	bl	9fbc <memset>
		while (p < end) {
    baec:	cmn.w	r5, #4096	; 0x1000
    baf0:	movw	r3, #2049	; 0x801
    baf4:	it	cs
    baf6:	movcs	r3, #1
    baf8:	add.w	r3, r5, r3, lsl #1
    bafc:	mov	r1, r5
    bafe:	adds	r5, #2
    bb00:	cmp	r5, r3
    bb02:	bne.n	bb46 <eeprom_write_byte+0xee>
		buf[offset] = data;
    bb04:	add	r3, sp, #8
		for (i=0; i < 256; i++) {
    bb06:	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    bb08:	mov	r0, r8
		buf[offset] = data;
    bb0a:	strb.w	r9, [r3, r4]
		eepromemu_flash_erase_sector(p);
    bb0e:	add	r4, sp, #8
		index = 0;
    bb10:	mov	r9, r5
		eepromemu_flash_erase_sector(p);
    bb12:	bl	b9a4 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    bb16:	ldrb.w	r3, [r4], #1
    bb1a:	cmp	r3, #255	; 0xff
    bb1c:	beq.n	bb38 <eeprom_write_byte+0xe0>
				uint16_t newval = i | (buf[i] << 8);
    bb1e:	orr.w	r3, r5, r3, lsl #8
				eepromemu_flash_write(p + index, &newval, 2);
    bb22:	movs	r2, #2
    bb24:	add.w	r0, r8, r9, lsl #1
				index = index + 1;
    bb28:	add.w	r9, r9, #1
				eepromemu_flash_write(p + index, &newval, 2);
    bb2c:	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    bb30:	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    bb34:	bl	b8c8 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    bb38:	adds	r5, #1
    bb3a:	cmp.w	r5, #256	; 0x100
    bb3e:	bne.n	bb16 <eeprom_write_byte+0xbe>
		sector_index[sector] = index;
    bb40:	strh.w	r9, [r7, r6, lsl #1]
    bb44:	b.n	baca <eeprom_write_byte+0x72>
			uint16_t val = *p++;
    bb46:	ldrh	r2, [r1, #0]
			buf[val & 255] = val >> 8;
    bb48:	add	r0, sp, #8
    bb4a:	ldrb	r1, [r1, #0]
    bb4c:	lsrs	r2, r2, #8
    bb4e:	strb	r2, [r0, r1]
    bb50:	b.n	bafc <eeprom_write_byte+0xa4>
    bb52:	nop
    bb54:	.word	0x200155c2
    bb58:	.word	0x200153f0

0000bb5c <eeprom_write_block>:
{
    bb5c:	push	{r4, r5, r6, lr}
    bb5e:	mov	r4, r0
    bb60:	mov	r0, r1
	while (len--) {
    bb62:	adds	r5, r4, r2
    bb64:	cmp	r4, r5
    bb66:	bne.n	bb6a <eeprom_write_block+0xe>
}
    bb68:	pop	{r4, r5, r6, pc}
		eeprom_write_byte(p++, *src++);
    bb6a:	adds	r6, r0, #1
    bb6c:	ldrb.w	r1, [r4], #1
    bb70:	bl	ba58 <eeprom_write_byte>
    bb74:	mov	r0, r6
    bb76:	b.n	bb64 <eeprom_write_block+0x8>

0000bb78 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    bb78:	ldr	r3, [r0, #0]
    bb7a:	cbz	r3, bb92 <smalloc_verify_pool+0x1a>
    bb7c:	ldr	r0, [r0, #4]
    bb7e:	cbz	r0, bb94 <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    bb80:	movs	r3, #12
    bb82:	udiv	r2, r0, r3
    bb86:	mls	r0, r3, r2, r0
    bb8a:	clz	r0, r0
    bb8e:	lsrs	r0, r0, #5
    bb90:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    bb92:	mov	r0, r3
	return 1;
}
    bb94:	bx	lr

0000bb96 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    bb96:	push	{r4, lr}
    bb98:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    bb9a:	bl	bb78 <smalloc_verify_pool>
    bb9e:	mov	r4, r0
    bba0:	cbz	r0, bba8 <sm_align_pool+0x12>
    bba2:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    bba4:	mov	r0, r4
    bba6:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    bba8:	ldr	r3, [r1, #4]
    bbaa:	movs	r0, #12
    bbac:	udiv	r2, r3, r0
    bbb0:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    bbb4:	cbz	r2, bbba <sm_align_pool+0x24>
    bbb6:	subs	r3, r3, r2
    bbb8:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    bbba:	ldr	r3, [r1, #4]
    bbbc:	cmp	r3, #240	; 0xf0
    bbbe:	bhi.n	bba2 <sm_align_pool+0xc>
		errno = ENOSPC;
    bbc0:	bl	ea6c <__errno>
    bbc4:	movs	r3, #28
    bbc6:	str	r3, [r0, #0]
		return 0;
    bbc8:	b.n	bba4 <sm_align_pool+0xe>

0000bbca <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    bbca:	push	{r4, r5, r6, lr}
    bbcc:	mov	r6, r3
	if (!spool) {
    bbce:	mov	r4, r0
    bbd0:	cbnz	r0, bbe0 <sm_set_pool+0x16>
		errno = EINVAL;
    bbd2:	bl	ea6c <__errno>
		return 0;
    bbd6:	mov	r5, r4
		errno = EINVAL;
    bbd8:	movs	r3, #22
    bbda:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    bbdc:	mov	r0, r5
    bbde:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    bbe0:	cbz	r1, bbe4 <sm_set_pool+0x1a>
    bbe2:	cbnz	r2, bc14 <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    bbe4:	mov	r0, r4
    bbe6:	bl	bb78 <smalloc_verify_pool>
    bbea:	mov	r5, r0
    bbec:	cbz	r0, bc0a <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bbee:	ldr	r3, [r4, #8]
    bbf0:	cbz	r3, bbfc <sm_set_pool+0x32>
    bbf2:	ldr	r2, [r4, #4]
    bbf4:	movs	r1, #0
    bbf6:	ldr	r0, [r4, #0]
    bbf8:	bl	9fbc <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    bbfc:	movs	r2, #16
    bbfe:	movs	r1, #0
    bc00:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    bc02:	bl	9fbc <memset>
	return 1;
    bc06:	movs	r5, #1
    bc08:	b.n	bbdc <sm_set_pool+0x12>
		errno = EINVAL;
    bc0a:	bl	ea6c <__errno>
    bc0e:	movs	r3, #22
    bc10:	str	r3, [r0, #0]
		return 0;
    bc12:	b.n	bbdc <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    bc14:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    bc16:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    bc1a:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    bc1c:	bl	bb96 <sm_align_pool>
    bc20:	mov	r5, r0
    bc22:	cmp	r0, #0
    bc24:	beq.n	bbdc <sm_set_pool+0x12>
	if (do_zero) {
    bc26:	cmp	r6, #0
    bc28:	beq.n	bc06 <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    bc2a:	ldr	r2, [r4, #4]
    bc2c:	movs	r1, #0
    bc2e:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    bc30:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    bc32:	b.n	bc02 <sm_set_pool+0x38>

0000bc34 <Panic_Temp_isr>:
  unused_interrupt_vector();
    bc34:	b.w	b574 <unused_interrupt_vector>

0000bc38 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    bc38:	ldr	r3, [pc, #72]	; (bc84 <tempmonGetTemp+0x4c>)
    bc3a:	ldr.w	r2, [r3, #128]	; 0x80
    bc3e:	lsls	r2, r2, #29
    bc40:	bpl.n	bc3a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bc42:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bc46:	ldr	r2, [pc, #64]	; (bc88 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bc48:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bc4c:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bc50:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bc54:	ldr	r3, [pc, #52]	; (bc8c <tempmonGetTemp+0x54>)
    bc56:	vcvt.f32.u32	s0, s0
    bc5a:	vldr	s14, [r3]
    bc5e:	vcvt.f32.s32	s15, s15
    bc62:	ldr	r3, [pc, #44]	; (bc90 <tempmonGetTemp+0x58>)
    bc64:	vcvt.f32.u32	s14, s14
    bc68:	vsub.f32	s15, s15, s14
    bc6c:	vldr	s14, [r3]
    bc70:	ldr	r3, [pc, #32]	; (bc94 <tempmonGetTemp+0x5c>)
    bc72:	vmul.f32	s15, s15, s14
    bc76:	vldr	s13, [r3]
    bc7a:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    bc7e:	vsub.f32	s0, s0, s14
    bc82:	bx	lr
    bc84:	.word	0x400d8100
    bc88:	.word	0x20014cd4
    bc8c:	.word	0x20014cd0
    bc90:	.word	0x20014cd8
    bc94:	.word	0x20014cdc

0000bc98 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    bc98:	cmp	r0, #54	; 0x36
{
    bc9a:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    bc9c:	bhi.n	bcb6 <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    bc9e:	lsls	r2, r0, #4
    bca0:	ldr	r3, [pc, #40]	; (bccc <digitalWrite+0x34>)
    bca2:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    bca6:	ldr	r3, [r3, r2]
	mask = p->mask;
    bca8:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    bcaa:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    bcac:	tst	r4, r2
    bcae:	beq.n	bcbe <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    bcb0:	cbz	r1, bcb8 <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    bcb2:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    bcb6:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    bcb8:	str.w	r2, [r3, #136]	; 0x88
    bcbc:	b.n	bcb6 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bcbe:	ldr	r3, [r0, #8]
		if (val) {
    bcc0:	cbz	r1, bcc8 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bcc2:	ldr	r2, [pc, #12]	; (bcd0 <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bcc4:	str	r2, [r3, #0]
    bcc6:	b.n	bcb6 <digitalWrite+0x1e>
    bcc8:	ldr	r2, [pc, #8]	; (bcd4 <digitalWrite+0x3c>)
    bcca:	b.n	bcc4 <digitalWrite+0x2c>
    bccc:	.word	0x20000614
    bcd0:	.word	0x0001f038
    bcd4:	.word	0x00013038

0000bcd8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    bcd8:	cmp	r0, #54	; 0x36
{
    bcda:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    bcdc:	bhi.n	bd0e <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    bcde:	ldr	r3, [pc, #76]	; (bd2c <pinMode+0x54>)
    bce0:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bce2:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bce4:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    bce6:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bcea:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bcec:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bcf0:	beq.n	bcf6 <pinMode+0x1e>
    bcf2:	cmp	r1, #4
    bcf4:	bne.n	bd10 <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bcf6:	orrs	r4, r5
		if (mode == OUTPUT) {
    bcf8:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bcfa:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    bcfc:	bne.n	bd02 <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bcfe:	movs	r2, #56	; 0x38
    bd00:	b.n	bd06 <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    bd02:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bd06:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    bd08:	movs	r2, #21
    bd0a:	ldr	r3, [r0, #4]
    bd0c:	str	r2, [r3, #0]
}
    bd0e:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bd10:	bic.w	r4, r4, r5
    bd14:	str	r4, [r2, #4]
		if (mode == INPUT) {
    bd16:	cmp	r1, #0
    bd18:	beq.n	bcfe <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    bd1a:	cmp	r1, #2
    bd1c:	bne.n	bd22 <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bd1e:	ldr	r2, [pc, #16]	; (bd30 <pinMode+0x58>)
    bd20:	b.n	bd06 <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    bd22:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bd24:	ite	eq
    bd26:	ldreq	r2, [pc, #12]	; (bd34 <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bd28:	ldrne	r2, [pc, #12]	; (bd38 <pinMode+0x60>)
    bd2a:	b.n	bd06 <pinMode+0x2e>
    bd2c:	.word	0x20000614
    bd30:	.word	0x0001f038
    bd34:	.word	0x00013038
    bd38:	.word	0x00010038

0000bd3c <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bd3c:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    bd40:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bd42:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    bd46:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bd48:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    bd4a:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    bd4e:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bd52:	ldrh.w	r3, [r0, #392]	; 0x188
    bd56:	uxth	r3, r3
{
    bd58:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bd5a:	orr.w	r3, r3, #240	; 0xf0
    bd5e:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd60:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bd64:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bd68:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bd6c:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd70:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    bd74:	adds	r2, #1
    bd76:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd78:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bd7a:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    bd7c:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bd7e:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bd80:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    bd82:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bd84:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    bd86:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    bd88:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    bd8a:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    bd8c:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    bd8e:	bne.n	bd70 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bd90:	ldrh.w	r3, [r0, #392]	; 0x188
    bd94:	uxth	r3, r3
    bd96:	orr.w	r3, r3, #15
    bd9a:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bd9e:	ldrh.w	r3, [r0, #392]	; 0x188
    bda2:	uxth	r3, r3
    bda4:	orr.w	r3, r3, #3840	; 0xf00
    bda8:	strh.w	r3, [r0, #392]	; 0x188
}
    bdac:	pop	{r4, r5, r6, r7, pc}

0000bdae <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    bdae:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bdb0:	mov.w	ip, #15
{
    bdb4:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    bdb6:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bdb8:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bdbc:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bdc0:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    bdc4:	add.w	r3, r0, r2, lsl #5
    bdc8:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    bdca:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    bdcc:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    bdce:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    bdd0:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bdd2:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bdd6:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bdd8:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    bdda:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    bddc:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bdde:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    bde0:	bne.n	bdc4 <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    bde2:	pop	{r4, r5, r6, r7, pc}

0000bde4 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bde4:	ldr	r2, [pc, #84]	; (be3c <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    bde6:	ldr	r0, [pc, #88]	; (be40 <pwm_init+0x5c>)
{
    bde8:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bdea:	ldr	r3, [r2, #120]	; 0x78
    bdec:	orr.w	r3, r3, #16711680	; 0xff0000
    bdf0:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bdf2:	ldr.w	r3, [r2, #128]	; 0x80
    bdf6:	orr.w	r3, r3, #4227858432	; 0xfc000000
    bdfa:	orr.w	r3, r3, #196608	; 0x30000
    bdfe:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    be02:	bl	bd3c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    be06:	add.w	r0, r0, #16384	; 0x4000
    be0a:	bl	bd3c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    be0e:	add.w	r0, r0, #16384	; 0x4000
    be12:	bl	bd3c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    be16:	add.w	r0, r0, #16384	; 0x4000
    be1a:	bl	bd3c <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    be1e:	sub.w	r0, r0, #2146304	; 0x20c000
    be22:	bl	bdae <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    be26:	add.w	r0, r0, #16384	; 0x4000
    be2a:	bl	bdae <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    be2e:	add.w	r0, r0, #16384	; 0x4000
}
    be32:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    be36:	b.w	bdae <quadtimer_init>
    be3a:	nop
    be3c:	.word	0x400fc000
    be40:	.word	0x403dc000

0000be44 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    be44:	ldr	r2, [pc, #8]	; (be50 <txEvent_event+0xc>)
    be46:	ldr	r3, [r2, #0]
    be48:	adds	r3, #1
    be4a:	str	r3, [r2, #0]
    be4c:	bx	lr
    be4e:	nop
    be50:	.word	0x20014c30

0000be54 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    be54:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    be56:	ldr	r4, [pc, #40]	; (be80 <rx_event+0x2c>)
	int i = t->callback_param;
    be58:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    be5a:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    be5c:	ldr	r2, [pc, #36]	; (be84 <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    be5e:	adds	r3, #1
    be60:	cmp	r3, #5
    be62:	it	cs
    be64:	movcs	r3, #0
	rx_list[head] = i;
    be66:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    be68:	ldr	r1, [r0, #4]
    be6a:	ldr	r2, [pc, #28]	; (be88 <rx_event+0x34>)
    be6c:	ubfx	r1, r1, #16, #15
    be70:	ldrh	r2, [r2, #0]
    be72:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    be74:	ldr	r1, [pc, #20]	; (be8c <rx_event+0x38>)
    be76:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    be7a:	uxtb	r3, r3
    be7c:	strb	r3, [r4, #0]
}
    be7e:	pop	{r4, pc}
    be80:	.word	0x200155cc
    be84:	.word	0x200155d6
    be88:	.word	0x200153ee
    be8c:	.word	0x20014cbc

0000be90 <rx_queue_transfer>:
{
    be90:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    be92:	ldr	r1, [pc, #80]	; (bee4 <rx_queue_transfer+0x54>)
{
    be94:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    be96:	ldr	r7, [pc, #80]	; (bee8 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    be98:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    be9c:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    be9e:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    bea0:	add	r0, r1
	asm("dsb");
    bea2:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    bea6:	mov.w	r4, #3758153728	; 0xe000e000
    beaa:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    beae:	adds	r2, #32
	} while (location < end_addr);
    beb0:	cmp	r0, r2
    beb2:	bhi.n	beaa <rx_queue_transfer+0x1a>
	asm("dsb");
    beb4:	dsb	sy
	asm("isb");
    beb8:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bebc:	ldr	r5, [pc, #44]	; (beec <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bebe:	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bec2:	ldrh	r2, [r7, #0]
    bec4:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bec8:	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    becc:	mov	r0, r5
    bece:	bl	b1d8 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    bed2:	mov	r1, r5
    bed4:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bed6:	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    beda:	bl	b228 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    bede:	str.w	r6, [r4, #268]	; 0x10c
}
    bee2:	pop	{r3, r4, r5, r6, r7, pc}
    bee4:	.word	0x20201000
    bee8:	.word	0x200153ee
    beec:	.word	0x20005c40

0000bef0 <usb_mtp_configure>:
	if (usb_high_speed) {
    bef0:	ldr	r3, [pc, #120]	; (bf6c <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bef2:	movs	r2, #128	; 0x80
    bef4:	movs	r1, #0
    bef6:	ldr	r0, [pc, #120]	; (bf70 <usb_mtp_configure+0x80>)
{
    bef8:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    befa:	ldrb	r3, [r3, #0]
	tx_head = 0;
    befc:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    befe:	ldr	r6, [pc, #116]	; (bf74 <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    bf00:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    bf02:	ldr	r3, [pc, #116]	; (bf78 <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    bf04:	ite	eq
    bf06:	moveq	r5, #64	; 0x40
    bf08:	movne.w	r5, #512	; 0x200
		tx_packet_size = MTP_TX_SIZE_480;
    bf0c:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    bf0e:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf10:	bl	9fbc <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf14:	movs	r2, #128	; 0x80
    bf16:	movs	r1, #0
    bf18:	ldr	r0, [pc, #96]	; (bf7c <usb_mtp_configure+0x8c>)
    bf1a:	bl	9fbc <memset>
	tx_head = 0;
    bf1e:	ldr	r3, [pc, #96]	; (bf80 <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    bf20:	mov	r2, r4
    bf22:	mov	r1, r5
	tx_head = 0;
    bf24:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    bf26:	movs	r0, #4
	rx_head = 0;
    bf28:	ldr	r3, [pc, #88]	; (bf84 <usb_mtp_configure+0x94>)
    bf2a:	strb	r4, [r3, #0]
	rx_tail = 0;
    bf2c:	ldr	r3, [pc, #88]	; (bf88 <usb_mtp_configure+0x98>)
    bf2e:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    bf30:	mov	r3, r4
    bf32:	bl	b198 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf36:	mov	r2, r4
    bf38:	ldrh	r1, [r6, #0]
    bf3a:	movs	r0, #4
    bf3c:	ldr	r3, [pc, #76]	; (bf8c <usb_mtp_configure+0x9c>)
    bf3e:	bl	b158 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    bf42:	mov	r2, r4
    bf44:	ldr	r3, [pc, #72]	; (bf90 <usb_mtp_configure+0xa0>)
    bf46:	movs	r1, #32
    bf48:	movs	r0, #5
    bf4a:	bl	b198 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bf4e:	mov	r0, r4
    bf50:	bl	be90 <rx_queue_transfer>
    bf54:	movs	r0, #1
    bf56:	bl	be90 <rx_queue_transfer>
    bf5a:	movs	r0, #2
    bf5c:	bl	be90 <rx_queue_transfer>
    bf60:	movs	r0, #3
}
    bf62:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bf66:	b.w	be90 <rx_queue_transfer>
    bf6a:	nop
    bf6c:	.word	0x200155e4
    bf70:	.word	0x20005d40
    bf74:	.word	0x200153ee
    bf78:	.word	0x20015474
    bf7c:	.word	0x20005c40
    bf80:	.word	0x200155e0
    bf84:	.word	0x200155cc
    bf88:	.word	0x200155dc
    bf8c:	.word	0x0000be55
    bf90:	.word	0x0000be45

0000bf94 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    bf94:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t wait_begin_at = systick_millis_count;
    bf98:	ldr	r7, [pc, #112]	; (c00c <usb_mtp_recv+0x78>)
{
    bf9a:	mov	r5, r1
	uint32_t tail = rx_tail;
    bf9c:	ldr	r6, [pc, #112]	; (c010 <usb_mtp_recv+0x7c>)
	uint32_t wait_begin_at = systick_millis_count;
    bf9e:	ldr.w	r8, [r7]
	uint32_t tail = rx_tail;
    bfa2:	ldrb	r3, [r6, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    bfa4:	ldr.w	r9, [pc, #120]	; c020 <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    bfa8:	uxtb	r4, r3
		if (tail != rx_head) break;
    bfaa:	ldr.w	sl, [pc, #120]	; c024 <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    bfae:	ldrb.w	r3, [r9]
    bfb2:	cbz	r3, c000 <usb_mtp_recv+0x6c>
		if (tail != rx_head) break;
    bfb4:	ldrb.w	r3, [sl]
    bfb8:	cmp	r4, r3
    bfba:	bne.n	bfd0 <usb_mtp_recv+0x3c>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    bfbc:	ldr	r3, [r7, #0]
    bfbe:	str	r0, [sp, #4]
    bfc0:	sub.w	r3, r3, r8
    bfc4:	cmp	r3, r5
    bfc6:	bcs.n	c006 <usb_mtp_recv+0x72>
			return 0;
		}
		yield();
    bfc8:	bl	c1c4 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    bfcc:	ldr	r0, [sp, #4]
    bfce:	b.n	bfae <usb_mtp_recv+0x1a>
	}
	if (++tail > RX_NUM) tail = 0;
    bfd0:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    bfd2:	ldr	r2, [pc, #64]	; (c014 <usb_mtp_recv+0x80>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    bfd4:	ldr	r1, [pc, #64]	; (c018 <usb_mtp_recv+0x84>)
	if (++tail > RX_NUM) tail = 0;
    bfd6:	cmp	r3, #5
    bfd8:	it	cs
    bfda:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    bfdc:	ldrb	r5, [r2, r3]
	int len = rx_list_transfer_len[tail];
    bfde:	ldr	r2, [pc, #60]	; (c01c <usb_mtp_recv+0x88>)
	memcpy(buffer,  rx_item_buffer, len);
    bfe0:	add.w	r1, r1, r5, lsl #9
	int len = rx_list_transfer_len[tail];
    bfe4:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    bfe8:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    bfea:	mov	r2, r4
	rx_tail = tail;
    bfec:	strb	r3, [r6, #0]
	memcpy(buffer,  rx_item_buffer, len);
    bfee:	bl	a000 <memcpy>
	rx_queue_transfer(i);
    bff2:	mov	r0, r5
    bff4:	bl	be90 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    bff8:	mov	r0, r4
    bffa:	add	sp, #8
    bffc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c000:	mov.w	r4, #4294967295
    c004:	b.n	bff8 <usb_mtp_recv+0x64>
			return 0;
    c006:	movs	r4, #0
    c008:	b.n	bff8 <usb_mtp_recv+0x64>
    c00a:	nop
    c00c:	.word	0x20015374
    c010:	.word	0x200155dc
    c014:	.word	0x200155d6
    c018:	.word	0x20201000
    c01c:	.word	0x20014cbc
    c020:	.word	0x200155e3
    c024:	.word	0x200155cc

0000c028 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    c028:	ldr	r3, [pc, #28]	; (c048 <usb_mtp_available+0x20>)
    c02a:	ldrb	r3, [r3, #0]
    c02c:	and.w	r0, r3, #255	; 0xff
    c030:	cbz	r3, c046 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    c032:	ldr	r3, [pc, #24]	; (c04c <usb_mtp_available+0x24>)
    c034:	ldrb	r2, [r3, #0]
    c036:	ldr	r3, [pc, #24]	; (c050 <usb_mtp_available+0x28>)
    c038:	ldrb	r3, [r3, #0]
    c03a:	cmp	r2, r3
    c03c:	beq.n	c044 <usb_mtp_available+0x1c>
    c03e:	ldr	r3, [pc, #20]	; (c054 <usb_mtp_available+0x2c>)
    c040:	ldrh	r0, [r3, #0]
    c042:	bx	lr
	if (!usb_configuration) return 0;
    c044:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    c046:	bx	lr
    c048:	.word	0x200155e3
    c04c:	.word	0x200155cc
    c050:	.word	0x200155dc
    c054:	.word	0x200153ee

0000c058 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    c058:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    c05c:	ldr	r6, [pc, #164]	; (c104 <usb_mtp_send+0xac>)
{
    c05e:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    c060:	ldr	r7, [pc, #164]	; (c108 <usb_mtp_send+0xb0>)
{
    c062:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    c064:	ldrb	r3, [r6, #0]
{
    c066:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    c068:	ldr.w	r9, [pc, #168]	; c114 <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    c06c:	add.w	r7, r7, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c070:	ldr.w	fp, [pc, #164]	; c118 <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    c074:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    c078:	ldrb.w	r3, [fp]
    c07c:	cmp	r3, #0
    c07e:	beq.n	c0f8 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    c080:	mov	r0, r7
    c082:	bl	b244 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    c086:	lsls	r3, r0, #24
    c088:	bpl.n	c09c <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c08a:	ldr.w	r3, [r9]
    c08e:	sub.w	r3, r3, sl
    c092:	cmp	r3, r5
    c094:	bhi.n	c0fe <usb_mtp_send+0xa6>
		yield();
    c096:	bl	c1c4 <yield>
	while (1) {
    c09a:	b.n	c078 <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c09c:	ldrb	r3, [r6, #0]
	memcpy(txdata, buffer, len);
    c09e:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c0a0:	ldr	r5, [pc, #104]	; (c10c <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    c0a2:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c0a4:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    c0a8:	mov	r0, r5
    c0aa:	bl	a000 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    c0ae:	ldr	r2, [pc, #96]	; (c110 <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c0b0:	mov	r3, r5
    c0b2:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c0b4:	add	r2, r5
	asm("dsb");
    c0b6:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c0ba:	mov.w	r1, #3758153728	; 0xe000e000
    c0be:	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    c0c2:	adds	r3, #32
	} while (location < end_addr);
    c0c4:	cmp	r2, r3
    c0c6:	bhi.n	c0be <usb_mtp_send+0x66>
	asm("dsb");
    c0c8:	dsb	sy
	asm("isb");
    c0cc:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    c0d0:	movs	r3, #0
    c0d2:	mov	r2, r4
    c0d4:	mov	r1, r5
    c0d6:	mov	r0, r7
    c0d8:	bl	b1d8 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    c0dc:	movs	r0, #4
    c0de:	mov	r1, r7
    c0e0:	bl	b204 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c0e4:	ldrb	r3, [r6, #0]
	return len;
    c0e6:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    c0e8:	adds	r3, #1
    c0ea:	uxtb	r3, r3
    c0ec:	cmp	r3, #3
    c0ee:	it	hi
    c0f0:	movhi	r3, #0
    c0f2:	strb	r3, [r6, #0]
}
    c0f4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c0f8:	mov.w	r0, #4294967295
    c0fc:	b.n	c0f4 <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c0fe:	movs	r0, #0
    c100:	b.n	c0f4 <usb_mtp_send+0x9c>
    c102:	nop
    c104:	.word	0x200155e0
    c108:	.word	0x20005d40
    c10c:	.word	0x20201800
    c110:	.word	0x20015474
    c114:	.word	0x20015374
    c118:	.word	0x200155e3

0000c11c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c11c:	ldr	r3, [pc, #68]	; (c164 <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    c11e:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c120:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    c124:	ldr	r3, [pc, #64]	; (c168 <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c126:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    c12a:	cmp	r0, r3
{
    c12c:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    c12e:	it	cc
    c130:	movcc	r3, #10
{
    c132:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    c134:	it	cc
    c136:	mulcc	r0, r3
	ultoa(num, buf, 10);
    c138:	add	r1, sp, #4
    c13a:	bl	b26c <ultoa>
	for (i=0; i<10; i++) {
    c13e:	ldr	r0, [pc, #44]	; (c16c <usb_init_serialnumber+0x50>)
    c140:	add	r2, sp, #4
    c142:	movs	r1, #0
    c144:	mov	r5, r0
		char c = buf[i];
    c146:	ldrb.w	r4, [r2], #1
		if (!c) break;
    c14a:	mov	r3, r1
	for (i=0; i<10; i++) {
    c14c:	adds	r1, #1
		if (!c) break;
    c14e:	cbz	r4, c15a <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    c150:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    c152:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    c156:	bne.n	c146 <usb_init_serialnumber+0x2a>
    c158:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c15a:	adds	r3, #1
    c15c:	lsls	r3, r3, #1
    c15e:	strb	r3, [r5, #0]
}
    c160:	add	sp, #20
    c162:	pop	{r4, r5, pc}
    c164:	.word	0x401f4400
    c168:	.word	0x00989680
    c16c:	.word	0x200022c2

0000c170 <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    c170:	ldr	r1, [pc, #68]	; (c1b8 <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    c172:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    c174:	ldr	r3, [r1, #0]
    c176:	cbz	r3, c18c <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c178:	mrs	r3, IPSR
		if (ipsr != 0) return;
    c17c:	cbnz	r3, c18c <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c17e:	mrs	r2, PRIMASK
		__disable_irq();
    c182:	cpsid	i
		EventResponder *first = firstYield;
    c184:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    c186:	cbnz	r0, c18e <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c188:	cbnz	r2, c18c <EventResponder::runFromYield()+0x1c>
    c18a:	cpsie	i
	}
    c18c:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    c18e:	ldr	r4, [pc, #44]	; (c1bc <EventResponder::runFromYield()+0x4c>)
    c190:	ldrb	r5, [r4, #0]
    c192:	cmp	r5, #0
    c194:	bne.n	c188 <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    c196:	movs	r3, #1
    c198:	strb	r3, [r4, #0]
		firstYield = first->_next;
    c19a:	ldr	r3, [r0, #20]
    c19c:	str	r3, [r1, #0]
		if (firstYield) {
    c19e:	cbz	r3, c1b2 <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    c1a0:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c1a2:	cbnz	r2, c1a6 <EventResponder::runFromYield()+0x36>
    c1a4:	cpsie	i
		first->_triggered = false;
    c1a6:	movs	r5, #0
		(*(first->_function))(*first);
    c1a8:	ldr	r3, [r0, #8]
		first->_triggered = false;
    c1aa:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c1ac:	blx	r3
		runningFromYield = false;
    c1ae:	strb	r5, [r4, #0]
    c1b0:	b.n	c18c <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    c1b2:	ldr	r1, [pc, #12]	; (c1c0 <EventResponder::runFromYield()+0x50>)
    c1b4:	str	r3, [r1, #0]
    c1b6:	b.n	c1a2 <EventResponder::runFromYield()+0x32>
    c1b8:	.word	0x20014804
    c1bc:	.word	0x2001553b
    c1c0:	.word	0x20014810

0000c1c4 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    c1c4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    c1c8:	ldr	r3, [pc, #92]	; (c228 <yield+0x64>)
    c1ca:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    c1cc:	cbz	r4, c1f6 <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    c1ce:	ldr	r5, [pc, #92]	; (c22c <yield+0x68>)
    c1d0:	ldrb	r3, [r5, #0]
    c1d2:	cbnz	r3, c1f6 <yield+0x32>
	running = 1;
    c1d4:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c1d6:	lsls	r1, r4, #31
	running = 1;
    c1d8:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c1da:	bpl.n	c1e6 <yield+0x22>
    c1dc:	bl	a4e8 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c1e0:	cbz	r0, c1e6 <yield+0x22>
    c1e2:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c1e6:	lsls	r2, r4, #30
    c1e8:	bmi.n	c21c <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    c1ea:	movs	r3, #0
    c1ec:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    c1ee:	lsls	r3, r4, #29
    c1f0:	bpl.n	c1f6 <yield+0x32>
		EventResponder::runFromYield();
    c1f2:	bl	c170 <EventResponder::runFromYield()>
	}
};
    c1f6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    c1fa:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c1fe:	ldr	r3, [r7, #0]
    c200:	mov	r0, r7
    c202:	ldr	r3, [r3, #16]
    c204:	blx	r3
    c206:	cbz	r0, c20e <yield+0x4a>
    c208:	ldr	r3, [r7, #20]
    c20a:	ldr	r3, [r3, #8]
    c20c:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c20e:	adds	r6, #1
    c210:	ldrb.w	r2, [r8]
    c214:	uxtb	r3, r6
    c216:	cmp	r2, r3
    c218:	bhi.n	c1fa <yield+0x36>
    c21a:	b.n	c1ea <yield+0x26>
    c21c:	movs	r6, #0
    c21e:	ldr.w	r8, [pc, #16]	; c230 <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    c222:	ldr.w	r9, [pc, #16]	; c234 <yield+0x70>
    c226:	b.n	c210 <yield+0x4c>
    c228:	.word	0x200155e6
    c22c:	.word	0x2001553d
    c230:	.word	0x2001553c
    c234:	.word	0x20014814

0000c238 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    c238:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c23a:	ldr	r5, [pc, #44]	; (c268 <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    c23c:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    c23e:	ldr	r6, [pc, #44]	; (c26c <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c240:	mrs	r2, PRIMASK
		__disable_irq();
    c244:	cpsid	i
		EventResponder *first = firstInterrupt;
    c246:	ldr	r0, [r5, #0]
		if (first) {
    c248:	cbz	r0, c262 <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    c24a:	ldr	r3, [r0, #20]
    c24c:	str	r3, [r5, #0]
			if (firstInterrupt) {
    c24e:	cbz	r3, c25e <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    c250:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    c252:	cbnz	r2, c256 <EventResponder::runFromInterrupt()+0x1e>
    c254:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    c256:	ldr	r3, [r0, #8]
			first->_triggered = false;
    c258:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    c25a:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    c25c:	b.n	c240 <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    c25e:	str	r3, [r6, #0]
    c260:	b.n	c252 <EventResponder::runFromInterrupt()+0x1a>
    c262:	cbnz	r2, c266 <EventResponder::runFromInterrupt()+0x2e>
    c264:	cpsie	i
}
    c266:	pop	{r4, r5, r6, pc}
    c268:	.word	0x2001480c
    c26c:	.word	0x20014808

0000c270 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c270:	b.w	c238 <EventResponder::runFromInterrupt()>

0000c274 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c274:	ldr	r3, [pc, #16]	; (c288 <systick_isr+0x14>)
    c276:	ldr	r2, [r3, #4]
    c278:	ldr	r3, [pc, #16]	; (c28c <systick_isr+0x18>)
    c27a:	str	r2, [r3, #0]
	systick_millis_count++;
    c27c:	ldr	r2, [pc, #16]	; (c290 <systick_isr+0x1c>)
    c27e:	ldr	r3, [r2, #0]
    c280:	adds	r3, #1
    c282:	str	r3, [r2, #0]
}
    c284:	bx	lr
    c286:	nop
    c288:	.word	0xe0001000
    c28c:	.word	0x20015370
    c290:	.word	0x20015374

0000c294 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c294:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    c296:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c298:	ldr	r4, [pc, #136]	; (c324 <DMAChannel::begin(bool)+0x90>)
    c29a:	cbnz	r1, c2c0 <DMAChannel::begin(bool)+0x2c>
    c29c:	ldr	r1, [r0, #0]
    c29e:	cbz	r1, c2c0 <DMAChannel::begin(bool)+0x2c>
    c2a0:	ldrb	r3, [r0, #4]
    c2a2:	cmp	r3, #15
    c2a4:	bhi.n	c2c0 <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    c2a6:	ldrh	r2, [r4, #0]
    c2a8:	asrs	r2, r3
    c2aa:	lsls	r2, r2, #31
    c2ac:	bpl.n	c2c0 <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c2ae:	add.w	r3, r3, #33554432	; 0x2000000
    c2b2:	add.w	r3, r3, #29824	; 0x7480
    c2b6:	cmp.w	r1, r3, lsl #5
    c2ba:	bne.n	c2c0 <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    c2bc:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c2be:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c2c0:	ldrh	r1, [r4, #0]
    c2c2:	movs	r3, #0
    c2c4:	asr.w	r2, r1, r3
    c2c8:	ands.w	r2, r2, #1
    c2cc:	bne.n	c314 <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    c2ce:	movs	r5, #1
    c2d0:	lsls	r5, r3
    c2d2:	orrs	r1, r5
    c2d4:	strh	r1, [r4, #0]
			__enable_irq();
    c2d6:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c2d8:	ldr	r5, [pc, #76]	; (c328 <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    c2da:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c2dc:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    c2e0:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c2e2:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c2e4:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c2e8:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c2ec:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c2ee:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c2f0:	movw	r5, #1154	; 0x482
    c2f4:	ldr	r1, [pc, #52]	; (c32c <DMAChannel::begin(bool)+0x98>)
    c2f6:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    c2f8:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    c2fa:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    c2fc:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    c2fe:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c300:	str	r3, [r0, #0]
	*p++ = 0;
    c302:	strd	r2, r2, [r3]
	*p++ = 0;
    c306:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c30a:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c30e:	strd	r2, r2, [r3, #24]
    c312:	b.n	c2be <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    c314:	adds	r3, #1
    c316:	cmp	r3, #16
    c318:	bne.n	c2c4 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    c31a:	cpsie	i
			TCD = (TCD_t *)0;
    c31c:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c31e:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c320:	str	r2, [r0, #0]
			return; // no more channels available
    c322:	b.n	c2be <DMAChannel::begin(bool)+0x2a>
    c324:	.word	0x200153c6
    c328:	.word	0x400fc000
    c32c:	.word	0x400e8000

0000c330 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c330:	ldrb	r3, [r0, #4]
    c332:	cmp	r3, #15
    c334:	bhi.n	c356 <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    c336:	ldr	r2, [pc, #32]	; (c358 <DMAChannel::release()+0x28>)
    c338:	strb	r3, [r2, #26]
	__disable_irq();
    c33a:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c33c:	ldr	r1, [pc, #28]	; (c35c <DMAChannel::release()+0x2c>)
    c33e:	movs	r2, #1
    c340:	ldrb	r3, [r0, #4]
    c342:	lsls	r2, r3
    c344:	ldrh	r3, [r1, #0]
    c346:	bic.w	r3, r3, r2
    c34a:	strh	r3, [r1, #0]
	__enable_irq();
    c34c:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c34e:	movs	r3, #16
    c350:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    c352:	movs	r3, #0
    c354:	str	r3, [r0, #0]
}
    c356:	bx	lr
    c358:	.word	0x400e8000
    c35c:	.word	0x200153c6

0000c360 <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    c360:	push	{r3, lr}
    c362:	bl	cd2 <Print::write(char const*)>
    c366:	pop	{r3, pc}

0000c368 <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    c368:	movs	r3, #0
    c36a:	movs	r2, #10
    c36c:	b.w	c51e <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c370 <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    c370:	movs	r3, #0
    c372:	uxtb	r2, r2
    c374:	b.w	c51e <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c378 <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    c378:	push	{r3, r4, r5, lr}
    c37a:	mov	r5, r0
    c37c:	bl	c370 <Print::print(unsigned long, int)>
    c380:	mov	r4, r0
    c382:	mov	r0, r5
    c384:	bl	c4cc <Print::println()>
    c388:	add	r0, r4
    c38a:	pop	{r3, r4, r5, pc}

0000c38c <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    c38c:	movs	r2, #0
    c38e:	movs	r3, #1
    c390:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    c392:	push	{r4, lr}
		while (len > 0) {
    c394:	cmp	r1, #0
    c396:	sub.w	r4, r0, r1
    c39a:	bgt.n	c3a4 <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    c39c:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    c39e:	orr.w	r0, r3, r2, lsl #16
    c3a2:	pop	{r4, pc}
			a += *p++;
    c3a4:	ldrh	r4, [r4, #0]
			len -= 2;
    c3a6:	subs	r1, #2
			a += *p++;
    c3a8:	uxtah	r3, r3, r4
			b += a;
    c3ac:	add	r2, r3
			len -= 2;
    c3ae:	b.n	c394 <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000c3b0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c3b0:	b.w	a4fc <usb_serial_flush_input>

0000c3b4 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c3b4:	b.w	a4a4 <usb_serial_peekchar>

0000c3b8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c3b8:	b.w	a55c <usb_serial_getchar>

0000c3bc <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c3bc:	b.w	a4e8 <usb_serial_available>

0000c3c0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c3c0:	b.w	a76c <usb_serial_flush_output>

0000c3c4 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c3c4:	b.w	a720 <usb_serial_write_buffer_free>

0000c3c8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c3c8:	mov	r0, r1
    c3ca:	mov	r1, r2
    c3cc:	b.w	a57c <usb_serial_write>

0000c3d0 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c3d0:	mov	r0, r1
    c3d2:	b.w	a708 <usb_serial_putchar>

0000c3d6 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c3d6:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c3d8:	bl	788 <setup>
	while (1) {
		loop();
    c3dc:	bl	27c <loop>
		yield();
    c3e0:	bl	c1c4 <yield>
	while (1) {
    c3e4:	b.n	c3dc <main+0x6>
	...

0000c3e8 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    c3e8:	push	{r4, r5, r6, lr}
    c3ea:	ldr	r5, [pc, #36]	; (c410 <Stream::timedRead()+0x28>)
    c3ec:	mov	r4, r0
    c3ee:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    c3f0:	ldr	r3, [r4, #0]
    c3f2:	mov	r0, r4
    c3f4:	ldr	r3, [r3, #20]
    c3f6:	blx	r3
    if (c >= 0) return c;
    c3f8:	cmp	r0, #0
    c3fa:	bge.n	c40e <Stream::timedRead()+0x26>
    yield();
    c3fc:	bl	c1c4 <yield>
    c400:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c402:	ldr	r2, [r4, #8]
    c404:	subs	r3, r3, r6
    c406:	cmp	r3, r2
    c408:	bcc.n	c3f0 <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    c40a:	mov.w	r0, #4294967295
}
    c40e:	pop	{r4, r5, r6, pc}
    c410:	.word	0x20015374

0000c414 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    c414:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c418:	mov	r6, r0
    c41a:	mov	r7, r1
    c41c:	mov	r4, r3
	if (buffer == nullptr) return 0;
    c41e:	mov	r5, r2
    c420:	cbz	r2, c452 <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    c422:	cbz	r3, c444 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    c424:	add.w	r8, r3, #4294967295
	size_t index = 0;
    c428:	movs	r4, #0
	while (index < length) {
    c42a:	cmp	r4, r8
    c42c:	bcs.n	c440 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    c42e:	mov	r0, r6
    c430:	bl	c3e8 <Stream::timedRead()>
		if (c == terminator) break;
    c434:	cmp	r7, r0
    c436:	beq.n	c440 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    c438:	cmp	r0, #0
    c43a:	bge.n	c44a <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    c43c:	movs	r3, #1
    c43e:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    c440:	movs	r3, #0
    c442:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    c444:	mov	r0, r4
    c446:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    c44a:	adds	r4, #1
		*buffer++ = (char)c;
    c44c:	strb.w	r0, [r5], #1
		index++;
    c450:	b.n	c42a <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    c452:	mov	r4, r2
    c454:	b.n	c444 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000c456 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c456:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c458:	push	{r4, r5, r6, r7, lr}
		base = 10;
    c45a:	it	eq
    c45c:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c45e:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    c460:	cbnz	r1, c48e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    c462:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    c464:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    c466:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c46a:	cbz	r3, c47c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    c46c:	subs	r3, r4, #1
		buf[i] = '-';
    c46e:	add	r2, sp, #40	; 0x28
		i--;
    c470:	uxtb	r4, r3
		buf[i] = '-';
    c472:	uxtab	r3, r2, r3
    c476:	movs	r2, #45	; 0x2d
    c478:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c47c:	ldr	r3, [r0, #0]
    c47e:	add	r1, sp, #4
    c480:	rsb	r2, r4, #34	; 0x22
    c484:	ldr	r3, [r3, #4]
    c486:	add	r1, r4
    c488:	blx	r3
}
    c48a:	add	sp, #44	; 0x2c
    c48c:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    c48e:	movs	r4, #33	; 0x21
			digit = n % base;
    c490:	udiv	r6, r1, r2
    c494:	mls	r7, r2, r6, r1
    c498:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c49a:	cmp	r7, #9
    c49c:	add.w	r7, r4, #40	; 0x28
    c4a0:	ite	ls
    c4a2:	addls	r5, #48	; 0x30
    c4a4:	addhi	r5, #55	; 0x37
    c4a6:	add	r7, sp
			if (n == 0) break;
    c4a8:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c4aa:	uxtb	r5, r5
    c4ac:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    c4b0:	bhi.n	c46a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    c4b2:	subs	r4, #1
			n /= base;
    c4b4:	mov	r1, r6
			i--;
    c4b6:	uxtb	r4, r4
			digit = n % base;
    c4b8:	b.n	c490 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000c4ba <Print::print(long)>:
	if (n < 0) {
    c4ba:	cmp	r1, #0
		n = -n;
    c4bc:	mov.w	r2, #10
    c4c0:	itte	lt
    c4c2:	neglt	r1, r1
		sign = '-';
    c4c4:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    c4c6:	movge	r3, #0
	if (base == 0) {
    c4c8:	b.w	c456 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c4cc <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    c4cc:	movw	r3, #2573	; 0xa0d
{
    c4d0:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    c4d2:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c4d6:	movs	r2, #2
    c4d8:	ldr	r3, [r0, #0]
    c4da:	add	r1, sp, #4
    c4dc:	ldr	r3, [r3, #4]
    c4de:	blx	r3
}
    c4e0:	add	sp, #12
    c4e2:	ldr.w	pc, [sp], #4
	...

0000c4e8 <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c4e8:	ldr	r3, [pc, #20]	; (c500 <_write+0x18>)
    c4ea:	cmp	r0, #2
    c4ec:	it	hi
    c4ee:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c4f0:	ldr	r0, [r3, #0]
{
    c4f2:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c4f4:	ldr	r4, [r0, #4]
    c4f6:	mov	r0, r3
    c4f8:	mov	r3, r4
}
    c4fa:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c4fe:	bx	r3
    c500:	.word	0x20001cf4

0000c504 <Print::printf(char const*, ...)>:
{
    c504:	push	{r1, r2, r3}
    c506:	push	{r0, r1, lr}
    c508:	add	r2, sp, #12
    c50a:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    c50e:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    c510:	bl	e850 <vdiprintf>
}
    c514:	add	sp, #8
    c516:	ldr.w	lr, [sp], #4
    c51a:	add	sp, #12
    c51c:	bx	lr

0000c51e <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    c51e:	push	{r4, r5}
	if (base == 0) {
    c520:	cbnz	r2, c52c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    c522:	ldr	r3, [r0, #0]
    c524:	uxtb	r1, r1
    c526:	ldr	r3, [r3, #0]
}
    c528:	pop	{r4, r5}
		return write((uint8_t)n);
    c52a:	bx	r3
}
    c52c:	pop	{r4, r5}
    c52e:	b.w	c456 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c532 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    c532:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c536:	sub	sp, #72	; 0x48
    c538:	mov	r8, r0
    c53a:	mov	r7, r2
    c53c:	mov	r6, r3
    c53e:	ldrb.w	r9, [sp, #104]	; 0x68
    c542:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    c546:	cmp.w	r9, #1
    c54a:	bls.n	c5be <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    c54c:	orrs.w	r3, r2, r6
    c550:	bne.n	c588 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    c552:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    c554:	movs	r5, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    c556:	strb.w	r3, [sp, #69]	; 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c55a:	cmp.w	sl, #0
    c55e:	beq.n	c570 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    c560:	subs	r3, r5, #1
		buf[i] = '-';
    c562:	add	r2, sp, #72	; 0x48
		i--;
    c564:	uxtb	r5, r3
		buf[i] = '-';
    c566:	uxtab	r3, r2, r3
    c56a:	movs	r2, #45	; 0x2d
    c56c:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    c570:	ldr.w	r3, [r8]
    c574:	add	r1, sp, #4
    c576:	rsb	r2, r5, #66	; 0x42
    c57a:	mov	r0, r8
    c57c:	ldr	r3, [r3, #4]
    c57e:	add	r1, r5
    c580:	blx	r3
}
    c582:	add	sp, #72	; 0x48
    c584:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    c588:	movs	r5, #65	; 0x41
			digit = n % base;
    c58a:	mov	r1, r6
    c58c:	mov	r2, r9
    c58e:	movs	r3, #0
    c590:	mov	r0, r7
    c592:	bl	c704 <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c596:	add.w	r3, r5, #72	; 0x48
			digit = n % base;
    c59a:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c59c:	add	r3, sp
    c59e:	cmp	r4, #9
    c5a0:	ite	ls
    c5a2:	addls	r4, #48	; 0x30
    c5a4:	addhi	r4, #55	; 0x37
			if (n == 0) break;
    c5a6:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c5a8:	uxtb	r4, r4
			if (n == 0) break;
    c5aa:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c5ae:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    c5b2:	bcc.n	c55a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    c5b4:	subs	r5, #1
			n /= base;
    c5b6:	mov	r7, r0
    c5b8:	mov	r6, r1
			i--;
    c5ba:	uxtb	r5, r5
			digit = n % base;
    c5bc:	b.n	c58a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    c5be:	movs	r0, #0
    c5c0:	b.n	c582 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
    c5c2:	movs	r0, r0
    c5c4:	movs	r0, r0
	...

0000c5c8 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c5c8:	vcmp.f64	d0, d0
{
    c5cc:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    c5ce:	vmrs	APSR_nzcv, fpscr
{
    c5d2:	mov	r6, r0
    c5d4:	mov	r5, r1
    c5d6:	vpush	{d8-d9}
    c5da:	sub	sp, #28
	if (isnan(number)) return print("nan");
    c5dc:	bvc.n	c5f0 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    c5de:	ldr	r1, [pc, #264]	; (c6e8 <Print::printFloat(double, unsigned char)+0x120>)
    c5e0:	bl	cd2 <Print::write(char const*)>
    c5e4:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    c5e6:	mov	r0, r4
    c5e8:	add	sp, #28
    c5ea:	vpop	{d8-d9}
    c5ee:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c5f0:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c5f4:	vldr	d6, [pc, #208]	; c6c8 <Print::printFloat(double, unsigned char)+0x100>
    c5f8:	vcmp.f64	d7, d6
    c5fc:	vmrs	APSR_nzcv, fpscr
    c600:	ble.n	c606 <Print::printFloat(double, unsigned char)+0x3e>
    c602:	ldr	r1, [pc, #232]	; (c6ec <Print::printFloat(double, unsigned char)+0x124>)
    c604:	b.n	c5e0 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c606:	vldr	d7, [pc, #200]	; c6d0 <Print::printFloat(double, unsigned char)+0x108>
    c60a:	vcmpe.f64	d0, d7
    c60e:	vmrs	APSR_nzcv, fpscr
    c612:	ble.n	c61a <Print::printFloat(double, unsigned char)+0x52>
    c614:	ldr	r1, [pc, #216]	; (c6f0 <Print::printFloat(double, unsigned char)+0x128>)
    c616:	mov	r0, r6
    c618:	b.n	c5e0 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c61a:	vldr	d7, [pc, #188]	; c6d8 <Print::printFloat(double, unsigned char)+0x110>
    c61e:	vcmpe.f64	d0, d7
    c622:	vmrs	APSR_nzcv, fpscr
    c626:	bmi.n	c614 <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    c628:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    c62c:	movs	r2, #0
	double rounding = 0.5;
    c62e:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    c632:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    c636:	vldr	d6, [pc, #168]	; c6e0 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    c63a:	itte	mi
    c63c:	vnegmi.f64	d0, d0
		sign = 1;
    c640:	movmi	r3, #1
	uint8_t sign=0;
    c642:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    c644:	uxtb	r1, r2
    c646:	cmp	r5, r1
    c648:	bhi.n	c698 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    c64a:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    c64e:	movs	r2, #10
    c650:	mov	r0, r6
    c652:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    c656:	vmov	r1, s18
    c65a:	bl	c456 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c65e:	mov	r4, r0
	if (digits > 0) {
    c660:	cmp	r5, #0
    c662:	beq.n	c5e6 <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    c664:	vcvt.f64.u32	d0, s18
    c668:	cmp	r5, #15
    c66a:	add	r0, sp, #8
			remainder *= 10.0;
    c66c:	vmov.f64	d6, #36	; 0x41200000  10.0
    c670:	it	cs
    c672:	movcs	r5, #15
		buf[0] = '.';
    c674:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    c676:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    c67a:	mov	r1, r0
    c67c:	mov	r2, r5
    c67e:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    c682:	subs	r2, #1
    c684:	uxtb	r2, r2
    c686:	cmp	r2, #255	; 0xff
    c688:	bne.n	c6a0 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    c68a:	adds	r5, #1
    c68c:	ldr	r3, [r6, #0]
    c68e:	mov	r0, r6
    c690:	ldr	r3, [r3, #4]
    c692:	uxtb	r2, r5
    c694:	blx	r3
    c696:	b.n	c5e6 <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    c698:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    c69c:	adds	r2, #1
    c69e:	b.n	c644 <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    c6a0:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    c6a4:	vcvt.u32.f64	s15, d0
    c6a8:	vstr	s15, [sp, #4]
    c6ac:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    c6b0:	vmov	s15, r3
			buf[count++] = '0' + n;
    c6b4:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    c6b8:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    c6bc:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    c6c0:	vsub.f64	d0, d0, d7
    c6c4:	b.n	c682 <Print::printFloat(double, unsigned char)+0xba>
    c6c6:	nop
    c6c8:	.word	0xffffffff
    c6cc:	.word	0x7fefffff
    c6d0:	.word	0xe0000000
    c6d4:	.word	0x41efffff
    c6d8:	.word	0xe0000000
    c6dc:	.word	0xc1efffff
    c6e0:	.word	0xa0000000
    c6e4:	.word	0x3fb99999
    c6e8:	.word	0x20001166
    c6ec:	.word	0x2000116a
    c6f0:	.word	0x2000116e

0000c6f4 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    c6f4:	b.w	ca10 <free>

0000c6f8 <__aeabi_atexit>:
    c6f8:	mov	r3, r1
    c6fa:	mov	r1, r0
    c6fc:	mov	r0, r3
    c6fe:	b.w	d870 <__cxa_atexit>
	...

0000c704 <__aeabi_uldivmod>:
    c704:	cbnz	r3, c71c <__aeabi_uldivmod+0x18>
    c706:	cbnz	r2, c71c <__aeabi_uldivmod+0x18>
    c708:	cmp	r1, #0
    c70a:	it	eq
    c70c:	cmpeq	r0, #0
    c70e:	itt	ne
    c710:	movne.w	r1, #4294967295
    c714:	movne.w	r0, #4294967295
    c718:	b.w	c9fc <__aeabi_idiv0>
    c71c:	sub.w	ip, sp, #8
    c720:	strd	ip, lr, [sp, #-16]!
    c724:	bl	c734 <__udivmoddi4>
    c728:	ldr.w	lr, [sp, #4]
    c72c:	ldrd	r2, r3, [sp, #8]
    c730:	add	sp, #16
    c732:	bx	lr

0000c734 <__udivmoddi4>:
    c734:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c738:	ldr	r6, [sp, #32]
    c73a:	mov	r5, r1
    c73c:	mov	r4, r0
    c73e:	mov	r7, r1
    c740:	cmp	r3, #0
    c742:	bne.n	c7da <__udivmoddi4+0xa6>
    c744:	cmp	r2, r1
    c746:	mov	ip, r2
    c748:	bls.n	c816 <__udivmoddi4+0xe2>
    c74a:	clz	r3, r2
    c74e:	cbz	r3, c762 <__udivmoddi4+0x2e>
    c750:	lsl.w	ip, r2, r3
    c754:	rsb	r2, r3, #32
    c758:	lsls	r7, r3
    c75a:	lsr.w	r2, r0, r2
    c75e:	orrs	r7, r2
    c760:	lsls	r4, r3
    c762:	mov.w	lr, ip, lsr #16
    c766:	uxth.w	r5, ip
    c76a:	udiv	r1, r7, lr
    c76e:	lsrs	r2, r4, #16
    c770:	mls	r7, lr, r1, r7
    c774:	orr.w	r2, r2, r7, lsl #16
    c778:	mul.w	r0, r1, r5
    c77c:	cmp	r0, r2
    c77e:	bls.n	c796 <__udivmoddi4+0x62>
    c780:	adds.w	r2, ip, r2
    c784:	add.w	r7, r1, #4294967295
    c788:	bcs.w	c9c4 <__udivmoddi4+0x290>
    c78c:	cmp	r0, r2
    c78e:	bls.w	c9c4 <__udivmoddi4+0x290>
    c792:	subs	r1, #2
    c794:	add	r2, ip
    c796:	subs	r2, r2, r0
    c798:	uxth	r4, r4
    c79a:	udiv	r0, r2, lr
    c79e:	mls	r2, lr, r0, r2
    c7a2:	orr.w	r4, r4, r2, lsl #16
    c7a6:	mul.w	r5, r0, r5
    c7aa:	cmp	r5, r4
    c7ac:	bls.n	c7c4 <__udivmoddi4+0x90>
    c7ae:	adds.w	r4, ip, r4
    c7b2:	add.w	r2, r0, #4294967295
    c7b6:	bcs.w	c9c8 <__udivmoddi4+0x294>
    c7ba:	cmp	r5, r4
    c7bc:	bls.w	c9c8 <__udivmoddi4+0x294>
    c7c0:	add	r4, ip
    c7c2:	subs	r0, #2
    c7c4:	orr.w	r0, r0, r1, lsl #16
    c7c8:	subs	r4, r4, r5
    c7ca:	movs	r1, #0
    c7cc:	cbz	r6, c7d6 <__udivmoddi4+0xa2>
    c7ce:	lsrs	r4, r3
    c7d0:	movs	r3, #0
    c7d2:	strd	r4, r3, [r6]
    c7d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7da:	cmp	r3, r1
    c7dc:	bls.n	c7f0 <__udivmoddi4+0xbc>
    c7de:	cmp	r6, #0
    c7e0:	beq.w	c9be <__udivmoddi4+0x28a>
    c7e4:	movs	r1, #0
    c7e6:	strd	r0, r5, [r6]
    c7ea:	mov	r0, r1
    c7ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7f0:	clz	r1, r3
    c7f4:	cmp	r1, #0
    c7f6:	bne.n	c88c <__udivmoddi4+0x158>
    c7f8:	cmp	r3, r5
    c7fa:	bcc.n	c802 <__udivmoddi4+0xce>
    c7fc:	cmp	r2, r0
    c7fe:	bhi.w	c9f2 <__udivmoddi4+0x2be>
    c802:	subs	r4, r0, r2
    c804:	sbc.w	r2, r5, r3
    c808:	movs	r0, #1
    c80a:	mov	r7, r2
    c80c:	cmp	r6, #0
    c80e:	beq.n	c7d6 <__udivmoddi4+0xa2>
    c810:	strd	r4, r7, [r6]
    c814:	b.n	c7d6 <__udivmoddi4+0xa2>
    c816:	cbnz	r2, c81a <__udivmoddi4+0xe6>
    c818:	udf	#255	; 0xff
    c81a:	clz	r3, r2
    c81e:	cmp	r3, #0
    c820:	bne.w	c944 <__udivmoddi4+0x210>
    c824:	subs	r2, r1, r2
    c826:	mov.w	r7, ip, lsr #16
    c82a:	uxth.w	lr, ip
    c82e:	movs	r1, #1
    c830:	udiv	r5, r2, r7
    c834:	mls	r0, r7, r5, r2
    c838:	lsrs	r2, r4, #16
    c83a:	orr.w	r2, r2, r0, lsl #16
    c83e:	mul.w	r0, lr, r5
    c842:	cmp	r0, r2
    c844:	bls.n	c858 <__udivmoddi4+0x124>
    c846:	adds.w	r2, ip, r2
    c84a:	add.w	r8, r5, #4294967295
    c84e:	bcs.n	c856 <__udivmoddi4+0x122>
    c850:	cmp	r0, r2
    c852:	bhi.w	c9ec <__udivmoddi4+0x2b8>
    c856:	mov	r5, r8
    c858:	subs	r2, r2, r0
    c85a:	uxth	r4, r4
    c85c:	udiv	r0, r2, r7
    c860:	mls	r2, r7, r0, r2
    c864:	orr.w	r4, r4, r2, lsl #16
    c868:	mul.w	lr, lr, r0
    c86c:	cmp	lr, r4
    c86e:	bls.n	c882 <__udivmoddi4+0x14e>
    c870:	adds.w	r4, ip, r4
    c874:	add.w	r2, r0, #4294967295
    c878:	bcs.n	c880 <__udivmoddi4+0x14c>
    c87a:	cmp	lr, r4
    c87c:	bhi.w	c9f6 <__udivmoddi4+0x2c2>
    c880:	mov	r0, r2
    c882:	sub.w	r4, r4, lr
    c886:	orr.w	r0, r0, r5, lsl #16
    c88a:	b.n	c7cc <__udivmoddi4+0x98>
    c88c:	rsb	r7, r1, #32
    c890:	lsls	r3, r1
    c892:	lsr.w	ip, r2, r7
    c896:	orr.w	ip, ip, r3
    c89a:	lsl.w	r4, r5, r1
    c89e:	lsr.w	r3, r0, r7
    c8a2:	lsrs	r5, r7
    c8a4:	mov.w	r9, ip, lsr #16
    c8a8:	orrs	r3, r4
    c8aa:	udiv	r8, r5, r9
    c8ae:	uxth.w	lr, ip
    c8b2:	mls	r5, r9, r8, r5
    c8b6:	lsrs	r4, r3, #16
    c8b8:	orr.w	r4, r4, r5, lsl #16
    c8bc:	mul.w	r5, r8, lr
    c8c0:	cmp	r5, r4
    c8c2:	lsl.w	r2, r2, r1
    c8c6:	lsl.w	r0, r0, r1
    c8ca:	bls.n	c8e4 <__udivmoddi4+0x1b0>
    c8cc:	adds.w	r4, ip, r4
    c8d0:	add.w	sl, r8, #4294967295
    c8d4:	bcs.w	c9e8 <__udivmoddi4+0x2b4>
    c8d8:	cmp	r5, r4
    c8da:	bls.w	c9e8 <__udivmoddi4+0x2b4>
    c8de:	sub.w	r8, r8, #2
    c8e2:	add	r4, ip
    c8e4:	subs	r4, r4, r5
    c8e6:	uxth	r5, r3
    c8e8:	udiv	r3, r4, r9
    c8ec:	mls	r4, r9, r3, r4
    c8f0:	orr.w	r4, r5, r4, lsl #16
    c8f4:	mul.w	lr, r3, lr
    c8f8:	cmp	lr, r4
    c8fa:	bls.n	c90e <__udivmoddi4+0x1da>
    c8fc:	adds.w	r4, ip, r4
    c900:	add.w	r5, r3, #4294967295
    c904:	bcs.n	c9e0 <__udivmoddi4+0x2ac>
    c906:	cmp	lr, r4
    c908:	bls.n	c9e0 <__udivmoddi4+0x2ac>
    c90a:	subs	r3, #2
    c90c:	add	r4, ip
    c90e:	orr.w	r3, r3, r8, lsl #16
    c912:	umull	r9, r5, r3, r2
    c916:	sub.w	r4, r4, lr
    c91a:	cmp	r4, r5
    c91c:	mov	r8, r9
    c91e:	mov	lr, r5
    c920:	bcc.n	c9d0 <__udivmoddi4+0x29c>
    c922:	beq.n	c9cc <__udivmoddi4+0x298>
    c924:	cbz	r6, c93c <__udivmoddi4+0x208>
    c926:	subs.w	r2, r0, r8
    c92a:	sbc.w	r4, r4, lr
    c92e:	lsl.w	r7, r4, r7
    c932:	lsrs	r2, r1
    c934:	lsrs	r4, r1
    c936:	orrs	r7, r2
    c938:	strd	r7, r4, [r6]
    c93c:	mov	r0, r3
    c93e:	movs	r1, #0
    c940:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c944:	rsb	r1, r3, #32
    c948:	lsl.w	ip, r2, r3
    c94c:	lsr.w	r2, r0, r1
    c950:	lsr.w	r1, r5, r1
    c954:	lsls	r5, r3
    c956:	orrs	r2, r5
    c958:	mov.w	r7, ip, lsr #16
    c95c:	uxth.w	lr, ip
    c960:	udiv	r0, r1, r7
    c964:	mls	r5, r7, r0, r1
    c968:	lsrs	r1, r2, #16
    c96a:	orr.w	r1, r1, r5, lsl #16
    c96e:	mul.w	r5, r0, lr
    c972:	cmp	r5, r1
    c974:	lsl.w	r4, r4, r3
    c978:	bls.n	c98c <__udivmoddi4+0x258>
    c97a:	adds.w	r1, ip, r1
    c97e:	add.w	r8, r0, #4294967295
    c982:	bcs.n	c9e4 <__udivmoddi4+0x2b0>
    c984:	cmp	r5, r1
    c986:	bls.n	c9e4 <__udivmoddi4+0x2b0>
    c988:	subs	r0, #2
    c98a:	add	r1, ip
    c98c:	subs	r1, r1, r5
    c98e:	uxth	r2, r2
    c990:	udiv	r5, r1, r7
    c994:	mls	r1, r7, r5, r1
    c998:	orr.w	r2, r2, r1, lsl #16
    c99c:	mul.w	r1, r5, lr
    c9a0:	cmp	r1, r2
    c9a2:	bls.n	c9b6 <__udivmoddi4+0x282>
    c9a4:	adds.w	r2, ip, r2
    c9a8:	add.w	r8, r5, #4294967295
    c9ac:	bcs.n	c9dc <__udivmoddi4+0x2a8>
    c9ae:	cmp	r1, r2
    c9b0:	bls.n	c9dc <__udivmoddi4+0x2a8>
    c9b2:	subs	r5, #2
    c9b4:	add	r2, ip
    c9b6:	subs	r2, r2, r1
    c9b8:	orr.w	r1, r5, r0, lsl #16
    c9bc:	b.n	c830 <__udivmoddi4+0xfc>
    c9be:	mov	r1, r6
    c9c0:	mov	r0, r6
    c9c2:	b.n	c7d6 <__udivmoddi4+0xa2>
    c9c4:	mov	r1, r7
    c9c6:	b.n	c796 <__udivmoddi4+0x62>
    c9c8:	mov	r0, r2
    c9ca:	b.n	c7c4 <__udivmoddi4+0x90>
    c9cc:	cmp	r0, r9
    c9ce:	bcs.n	c924 <__udivmoddi4+0x1f0>
    c9d0:	subs.w	r8, r9, r2
    c9d4:	sbc.w	lr, r5, ip
    c9d8:	subs	r3, #1
    c9da:	b.n	c924 <__udivmoddi4+0x1f0>
    c9dc:	mov	r5, r8
    c9de:	b.n	c9b6 <__udivmoddi4+0x282>
    c9e0:	mov	r3, r5
    c9e2:	b.n	c90e <__udivmoddi4+0x1da>
    c9e4:	mov	r0, r8
    c9e6:	b.n	c98c <__udivmoddi4+0x258>
    c9e8:	mov	r8, sl
    c9ea:	b.n	c8e4 <__udivmoddi4+0x1b0>
    c9ec:	subs	r5, #2
    c9ee:	add	r2, ip
    c9f0:	b.n	c858 <__udivmoddi4+0x124>
    c9f2:	mov	r0, r1
    c9f4:	b.n	c80c <__udivmoddi4+0xd8>
    c9f6:	add	r4, ip
    c9f8:	subs	r0, #2
    c9fa:	b.n	c882 <__udivmoddi4+0x14e>

0000c9fc <__aeabi_idiv0>:
    c9fc:	bx	lr
    c9fe:	nop

0000ca00 <malloc>:
    ca00:	ldr	r3, [pc, #8]	; (ca0c <malloc+0xc>)
    ca02:	mov	r1, r0
    ca04:	ldr	r0, [r3, #0]
    ca06:	b.w	ca60 <_malloc_r>
    ca0a:	nop
    ca0c:	.word	0x20002294

0000ca10 <free>:
    ca10:	ldr	r3, [pc, #8]	; (ca1c <free+0xc>)
    ca12:	mov	r1, r0
    ca14:	ldr	r0, [r3, #0]
    ca16:	b.w	f798 <_free_r>
    ca1a:	nop
    ca1c:	.word	0x20002294

0000ca20 <sbrk_aligned>:
    ca20:	push	{r4, r5, r6, lr}
    ca22:	ldr	r6, [pc, #56]	; (ca5c <sbrk_aligned+0x3c>)
    ca24:	mov	r4, r1
    ca26:	ldr	r1, [r6, #0]
    ca28:	mov	r5, r0
    ca2a:	cbnz	r1, ca32 <sbrk_aligned+0x12>
    ca2c:	bl	ea28 <_sbrk_r>
    ca30:	str	r0, [r6, #0]
    ca32:	mov	r1, r4
    ca34:	mov	r0, r5
    ca36:	bl	ea28 <_sbrk_r>
    ca3a:	adds	r3, r0, #1
    ca3c:	beq.n	ca54 <sbrk_aligned+0x34>
    ca3e:	adds	r4, r0, #3
    ca40:	bic.w	r4, r4, #3
    ca44:	cmp	r0, r4
    ca46:	beq.n	ca58 <sbrk_aligned+0x38>
    ca48:	subs	r1, r4, r0
    ca4a:	mov	r0, r5
    ca4c:	bl	ea28 <_sbrk_r>
    ca50:	adds	r0, #1
    ca52:	bne.n	ca58 <sbrk_aligned+0x38>
    ca54:	mov.w	r4, #4294967295
    ca58:	mov	r0, r4
    ca5a:	pop	{r4, r5, r6, pc}
    ca5c:	.word	0x20014858

0000ca60 <_malloc_r>:
    ca60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca64:	adds	r5, r1, #3
    ca66:	bic.w	r5, r5, #3
    ca6a:	adds	r5, #8
    ca6c:	cmp	r5, #12
    ca6e:	it	cc
    ca70:	movcc	r5, #12
    ca72:	cmp	r5, #0
    ca74:	mov	r7, r0
    ca76:	blt.n	ca7c <_malloc_r+0x1c>
    ca78:	cmp	r1, r5
    ca7a:	bls.n	ca88 <_malloc_r+0x28>
    ca7c:	movs	r3, #12
    ca7e:	str	r3, [r7, #0]
    ca80:	movs	r6, #0
    ca82:	mov	r0, r6
    ca84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca88:	ldr	r6, [pc, #188]	; (cb48 <_malloc_r+0xe8>)
    ca8a:	bl	cb4c <__malloc_lock>
    ca8e:	ldr	r3, [r6, #0]
    ca90:	mov	r4, r3
    ca92:	cbnz	r4, cae6 <_malloc_r+0x86>
    ca94:	mov	r1, r5
    ca96:	mov	r0, r7
    ca98:	bl	ca20 <sbrk_aligned>
    ca9c:	adds	r3, r0, #1
    ca9e:	mov	r4, r0
    caa0:	bne.n	cb42 <_malloc_r+0xe2>
    caa2:	ldr	r4, [r6, #0]
    caa4:	mov	r6, r4
    caa6:	cmp	r6, #0
    caa8:	bne.n	cb30 <_malloc_r+0xd0>
    caaa:	cmp	r4, #0
    caac:	beq.n	cb36 <_malloc_r+0xd6>
    caae:	ldr	r3, [r4, #0]
    cab0:	mov	r1, r6
    cab2:	mov	r0, r7
    cab4:	add.w	r8, r4, r3
    cab8:	bl	ea28 <_sbrk_r>
    cabc:	cmp	r8, r0
    cabe:	bne.n	cb36 <_malloc_r+0xd6>
    cac0:	ldr	r3, [r4, #0]
    cac2:	adds	r5, #3
    cac4:	subs	r5, r5, r3
    cac6:	bic.w	r5, r5, #3
    caca:	adds	r5, #8
    cacc:	cmp	r5, #12
    cace:	it	cc
    cad0:	movcc	r5, #12
    cad2:	mov	r1, r5
    cad4:	mov	r0, r7
    cad6:	bl	ca20 <sbrk_aligned>
    cada:	adds	r0, #1
    cadc:	beq.n	cb36 <_malloc_r+0xd6>
    cade:	ldr	r3, [r4, #0]
    cae0:	add	r3, r5
    cae2:	str	r3, [r4, #0]
    cae4:	b.n	cb04 <_malloc_r+0xa4>
    cae6:	ldr	r2, [r4, #0]
    cae8:	subs	r2, r2, r5
    caea:	bmi.n	cb2a <_malloc_r+0xca>
    caec:	cmp	r2, #11
    caee:	bls.n	cb1e <_malloc_r+0xbe>
    caf0:	adds	r1, r4, r5
    caf2:	cmp	r3, r4
    caf4:	str	r5, [r4, #0]
    caf6:	it	ne
    caf8:	strne	r1, [r3, #4]
    cafa:	ldr	r3, [r4, #4]
    cafc:	it	eq
    cafe:	streq	r1, [r6, #0]
    cb00:	str	r2, [r4, r5]
    cb02:	str	r3, [r1, #4]
    cb04:	mov	r0, r7
    cb06:	add.w	r6, r4, #11
    cb0a:	bl	cb58 <__malloc_unlock>
    cb0e:	bic.w	r6, r6, #7
    cb12:	adds	r3, r4, #4
    cb14:	subs	r2, r6, r3
    cb16:	beq.n	ca82 <_malloc_r+0x22>
    cb18:	subs	r3, r3, r6
    cb1a:	str	r3, [r4, r2]
    cb1c:	b.n	ca82 <_malloc_r+0x22>
    cb1e:	ldr	r2, [r4, #4]
    cb20:	cmp	r3, r4
    cb22:	ite	eq
    cb24:	streq	r2, [r6, #0]
    cb26:	strne	r2, [r3, #4]
    cb28:	b.n	cb04 <_malloc_r+0xa4>
    cb2a:	mov	r3, r4
    cb2c:	ldr	r4, [r4, #4]
    cb2e:	b.n	ca92 <_malloc_r+0x32>
    cb30:	mov	r4, r6
    cb32:	ldr	r6, [r6, #4]
    cb34:	b.n	caa6 <_malloc_r+0x46>
    cb36:	movs	r3, #12
    cb38:	str	r3, [r7, #0]
    cb3a:	mov	r0, r7
    cb3c:	bl	cb58 <__malloc_unlock>
    cb40:	b.n	ca82 <_malloc_r+0x22>
    cb42:	str	r5, [r4, #0]
    cb44:	b.n	cb04 <_malloc_r+0xa4>
    cb46:	nop
    cb48:	.word	0x20014854

0000cb4c <__malloc_lock>:
    cb4c:	ldr	r0, [pc, #4]	; (cb54 <__malloc_lock+0x8>)
    cb4e:	b.w	eac0 <__retarget_lock_acquire_recursive>
    cb52:	nop
    cb54:	.word	0x200155b6

0000cb58 <__malloc_unlock>:
    cb58:	ldr	r0, [pc, #4]	; (cb60 <__malloc_unlock+0x8>)
    cb5a:	b.w	eac2 <__retarget_lock_release_recursive>
    cb5e:	nop
    cb60:	.word	0x200155b6

0000cb64 <_realloc_r>:
    cb64:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb68:	mov	r8, r0
    cb6a:	mov	r4, r2
    cb6c:	mov	r6, r1
    cb6e:	cbnz	r1, cb7a <_realloc_r+0x16>
    cb70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cb74:	mov	r1, r2
    cb76:	b.w	ca60 <_malloc_r>
    cb7a:	cbnz	r2, cb88 <_realloc_r+0x24>
    cb7c:	bl	f798 <_free_r>
    cb80:	mov	r5, r4
    cb82:	mov	r0, r5
    cb84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb88:	bl	10858 <_malloc_usable_size_r>
    cb8c:	cmp	r4, r0
    cb8e:	mov	r7, r0
    cb90:	bhi.n	cb98 <_realloc_r+0x34>
    cb92:	cmp.w	r4, r0, lsr #1
    cb96:	bhi.n	cbbe <_realloc_r+0x5a>
    cb98:	mov	r1, r4
    cb9a:	mov	r0, r8
    cb9c:	bl	ca60 <_malloc_r>
    cba0:	mov	r5, r0
    cba2:	cmp	r0, #0
    cba4:	beq.n	cb82 <_realloc_r+0x1e>
    cba6:	cmp	r4, r7
    cba8:	mov	r2, r4
    cbaa:	mov	r1, r6
    cbac:	it	cs
    cbae:	movcs	r2, r7
    cbb0:	bl	a000 <memcpy>
    cbb4:	mov	r1, r6
    cbb6:	mov	r0, r8
    cbb8:	bl	f798 <_free_r>
    cbbc:	b.n	cb82 <_realloc_r+0x1e>
    cbbe:	mov	r5, r6
    cbc0:	b.n	cb82 <_realloc_r+0x1e>

0000cbc2 <sulp>:
    cbc2:	push	{r4, r5, r6, lr}
    cbc4:	mov	r4, r0
    cbc6:	mov	r5, r1
    cbc8:	mov	r6, r2
    cbca:	vmov	d0, r4, r5
    cbce:	bl	105dc <__ulp>
    cbd2:	cbz	r6, cbf4 <sulp+0x32>
    cbd4:	ubfx	r3, r5, #20, #11
    cbd8:	rsb	r3, r3, #107	; 0x6b
    cbdc:	cmp	r3, #0
    cbde:	ble.n	cbf4 <sulp+0x32>
    cbe0:	lsls	r3, r3, #20
    cbe2:	add.w	r1, r3, #1069547520	; 0x3fc00000
    cbe6:	movs	r0, #0
    cbe8:	add.w	r1, r1, #3145728	; 0x300000
    cbec:	vmov	d7, r0, r1
    cbf0:	vmul.f64	d0, d0, d7
    cbf4:	pop	{r4, r5, r6, pc}
	...

0000cbf8 <_strtod_l>:
    cbf8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbfc:	vpush	{d8-d14}
    cc00:	sub	sp, #92	; 0x5c
    cc02:	mov	r4, r0
    cc04:	str	r2, [sp, #52]	; 0x34
    cc06:	movs	r2, #0
    cc08:	str	r2, [sp, #72]	; 0x48
    cc0a:	mov	sl, r1
    cc0c:	mov.w	r8, #0
    cc10:	mov.w	r9, #0
    cc14:	mov	r2, r1
    cc16:	str	r2, [sp, #68]	; 0x44
    cc18:	ldrb	r1, [r2, #0]
    cc1a:	cmp	r1, #43	; 0x2b
    cc1c:	beq.n	ccb8 <_strtod_l+0xc0>
    cc1e:	bhi.n	cc94 <_strtod_l+0x9c>
    cc20:	cmp	r1, #13
    cc22:	bhi.n	cc8c <_strtod_l+0x94>
    cc24:	cmp	r1, #8
    cc26:	bhi.n	cc90 <_strtod_l+0x98>
    cc28:	cmp	r1, #0
    cc2a:	beq.n	cca6 <_strtod_l+0xae>
    cc2c:	movs	r2, #0
    cc2e:	str	r2, [sp, #32]
    cc30:	ldr	r6, [sp, #68]	; 0x44
    cc32:	ldrb	r2, [r6, #0]
    cc34:	cmp	r2, #48	; 0x30
    cc36:	bne.w	cdaa <_strtod_l+0x1b2>
    cc3a:	ldrb	r2, [r6, #1]
    cc3c:	and.w	r2, r2, #223	; 0xdf
    cc40:	cmp	r2, #88	; 0x58
    cc42:	bne.n	cd26 <_strtod_l+0x12e>
    cc44:	str	r3, [sp, #8]
    cc46:	ldr	r3, [sp, #32]
    cc48:	str	r3, [sp, #4]
    cc4a:	add	r3, sp, #72	; 0x48
    cc4c:	str	r3, [sp, #0]
    cc4e:	ldr	r2, [pc, #580]	; (ce94 <_strtod_l+0x29c>)
    cc50:	add	r3, sp, #76	; 0x4c
    cc52:	add	r1, sp, #68	; 0x44
    cc54:	mov	r0, r4
    cc56:	bl	f900 <__gethex>
    cc5a:	ands.w	r7, r0, #15
    cc5e:	mov	r5, r0
    cc60:	beq.n	cc6e <_strtod_l+0x76>
    cc62:	cmp	r7, #6
    cc64:	bne.n	ccbc <_strtod_l+0xc4>
    cc66:	adds	r6, #1
    cc68:	movs	r3, #0
    cc6a:	str	r6, [sp, #68]	; 0x44
    cc6c:	str	r3, [sp, #32]
    cc6e:	ldr	r3, [sp, #52]	; 0x34
    cc70:	cmp	r3, #0
    cc72:	bne.w	d720 <_strtod_l+0xb28>
    cc76:	ldr	r3, [sp, #32]
    cc78:	vmov	d0, r8, r9
    cc7c:	cbz	r3, ccb2 <_strtod_l+0xba>
    cc7e:	vneg.f64	d0, d0
    cc82:	add	sp, #92	; 0x5c
    cc84:	vpop	{d8-d14}
    cc88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc8c:	cmp	r1, #32
    cc8e:	bne.n	cc2c <_strtod_l+0x34>
    cc90:	adds	r2, #1
    cc92:	b.n	cc16 <_strtod_l+0x1e>
    cc94:	cmp	r1, #45	; 0x2d
    cc96:	bne.n	cc2c <_strtod_l+0x34>
    cc98:	movs	r1, #1
    cc9a:	str	r1, [sp, #32]
    cc9c:	adds	r1, r2, #1
    cc9e:	str	r1, [sp, #68]	; 0x44
    cca0:	ldrb	r2, [r2, #1]
    cca2:	cmp	r2, #0
    cca4:	bne.n	cc30 <_strtod_l+0x38>
    cca6:	ldr	r3, [sp, #52]	; 0x34
    cca8:	str.w	sl, [sp, #68]	; 0x44
    ccac:	cmp	r3, #0
    ccae:	bne.w	d71c <_strtod_l+0xb24>
    ccb2:	vmov	d0, r8, r9
    ccb6:	b.n	cc82 <_strtod_l+0x8a>
    ccb8:	movs	r1, #0
    ccba:	b.n	cc9a <_strtod_l+0xa2>
    ccbc:	ldr	r2, [sp, #72]	; 0x48
    ccbe:	cbz	r2, ccd0 <_strtod_l+0xd8>
    ccc0:	movs	r1, #53	; 0x35
    ccc2:	add	r0, sp, #80	; 0x50
    ccc4:	bl	107d0 <__copybits>
    ccc8:	ldr	r1, [sp, #72]	; 0x48
    ccca:	mov	r0, r4
    cccc:	bl	ff84 <_Bfree>
    ccd0:	subs	r3, r7, #1
    ccd2:	ldr	r2, [sp, #76]	; 0x4c
    ccd4:	cmp	r3, #4
    ccd6:	bhi.n	cce6 <_strtod_l+0xee>
    ccd8:	tbb	[pc, r3]
    ccdc:	.word	0x201d0314
    cce0:	.byte	0x14
    cce1:	.byte	0x00
    cce2:	ldrd	r8, r9, [sp, #80]	; 0x50
    cce6:	lsls	r3, r5, #23
    cce8:	it	mi
    ccea:	orrmi.w	r9, r9, #2147483648	; 0x80000000
    ccee:	bic.w	r3, r9, #2147483648	; 0x80000000
    ccf2:	lsrs	r3, r3, #20
    ccf4:	lsls	r3, r3, #20
    ccf6:	cmp	r3, #0
    ccf8:	bne.n	cc6e <_strtod_l+0x76>
    ccfa:	bl	ea6c <__errno>
    ccfe:	movs	r3, #34	; 0x22
    cd00:	str	r3, [r0, #0]
    cd02:	b.n	cc6e <_strtod_l+0x76>
    cd04:	ldrd	r8, r3, [sp, #80]	; 0x50
    cd08:	addw	r2, r2, #1075	; 0x433
    cd0c:	bic.w	r3, r3, #1048576	; 0x100000
    cd10:	orr.w	r9, r3, r2, lsl #20
    cd14:	b.n	cce6 <_strtod_l+0xee>
    cd16:	ldr.w	r9, [pc, #388]	; ce9c <_strtod_l+0x2a4>
    cd1a:	b.n	cce6 <_strtod_l+0xee>
    cd1c:	mvn.w	r9, #2147483648	; 0x80000000
    cd20:	mov.w	r8, #4294967295
    cd24:	b.n	cce6 <_strtod_l+0xee>
    cd26:	ldr	r3, [sp, #68]	; 0x44
    cd28:	adds	r2, r3, #1
    cd2a:	str	r2, [sp, #68]	; 0x44
    cd2c:	ldrb	r3, [r3, #1]
    cd2e:	cmp	r3, #48	; 0x30
    cd30:	beq.n	cd26 <_strtod_l+0x12e>
    cd32:	cmp	r3, #0
    cd34:	beq.n	cc6e <_strtod_l+0x76>
    cd36:	movs	r3, #1
    cd38:	str	r3, [sp, #24]
    cd3a:	ldr	r3, [sp, #68]	; 0x44
    cd3c:	str	r3, [sp, #36]	; 0x24
    cd3e:	movs	r3, #0
    cd40:	str	r3, [sp, #20]
    cd42:	str	r3, [sp, #28]
    cd44:	mov	r6, r3
    cd46:	movs	r2, #10
    cd48:	ldr	r0, [sp, #68]	; 0x44
    cd4a:	ldrb	r5, [r0, #0]
    cd4c:	sub.w	r3, r5, #48	; 0x30
    cd50:	uxtb	r1, r3
    cd52:	cmp	r1, #9
    cd54:	bls.n	cdae <_strtod_l+0x1b6>
    cd56:	ldr	r1, [pc, #320]	; (ce98 <_strtod_l+0x2a0>)
    cd58:	movs	r2, #1
    cd5a:	bl	e994 <strncmp>
    cd5e:	cmp	r0, #0
    cd60:	beq.n	cdce <_strtod_l+0x1d6>
    cd62:	movs	r0, #0
    cd64:	mov	r2, r5
    cd66:	mov	r3, r6
    cd68:	mov	fp, r0
    cd6a:	mov	r1, r0
    cd6c:	cmp	r2, #101	; 0x65
    cd6e:	beq.n	cd74 <_strtod_l+0x17c>
    cd70:	cmp	r2, #69	; 0x45
    cd72:	bne.n	cda6 <_strtod_l+0x1ae>
    cd74:	cbnz	r3, cd7e <_strtod_l+0x186>
    cd76:	ldr	r3, [sp, #24]
    cd78:	orrs	r3, r0
    cd7a:	beq.n	cca6 <_strtod_l+0xae>
    cd7c:	movs	r3, #0
    cd7e:	ldr.w	sl, [sp, #68]	; 0x44
    cd82:	add.w	r2, sl, #1
    cd86:	str	r2, [sp, #68]	; 0x44
    cd88:	ldrb.w	r2, [sl, #1]
    cd8c:	cmp	r2, #43	; 0x2b
    cd8e:	beq.n	ce7c <_strtod_l+0x284>
    cd90:	cmp	r2, #45	; 0x2d
    cd92:	beq.n	ce8c <_strtod_l+0x294>
    cd94:	mov.w	lr, #0
    cd98:	sub.w	r5, r2, #48	; 0x30
    cd9c:	cmp	r5, #9
    cd9e:	bls.w	cea8 <_strtod_l+0x2b0>
    cda2:	str.w	sl, [sp, #68]	; 0x44
    cda6:	movs	r5, #0
    cda8:	b.n	cee8 <_strtod_l+0x2f0>
    cdaa:	movs	r3, #0
    cdac:	b.n	cd38 <_strtod_l+0x140>
    cdae:	cmp	r6, #8
    cdb0:	itete	le
    cdb2:	ldrle	r1, [sp, #28]
    cdb4:	ldrgt	r1, [sp, #20]
    cdb6:	mlale	r3, r2, r1, r3
    cdba:	mlagt	r3, r2, r1, r3
    cdbe:	add.w	r0, r0, #1
    cdc2:	ite	le
    cdc4:	strle	r3, [sp, #28]
    cdc6:	strgt	r3, [sp, #20]
    cdc8:	adds	r6, #1
    cdca:	str	r0, [sp, #68]	; 0x44
    cdcc:	b.n	cd48 <_strtod_l+0x150>
    cdce:	ldr	r3, [sp, #68]	; 0x44
    cdd0:	adds	r2, r3, #1
    cdd2:	str	r2, [sp, #68]	; 0x44
    cdd4:	ldrb	r2, [r3, #1]
    cdd6:	cbz	r6, ce44 <_strtod_l+0x24c>
    cdd8:	mov	fp, r0
    cdda:	mov	r3, r6
    cddc:	sub.w	r1, r2, #48	; 0x30
    cde0:	cmp	r1, #9
    cde2:	bls.n	ce0a <_strtod_l+0x212>
    cde4:	movs	r1, #1
    cde6:	b.n	cd6c <_strtod_l+0x174>
    cde8:	ldr	r3, [sp, #68]	; 0x44
    cdea:	adds	r2, r3, #1
    cdec:	str	r2, [sp, #68]	; 0x44
    cdee:	ldrb	r2, [r3, #1]
    cdf0:	adds	r0, #1
    cdf2:	cmp	r2, #48	; 0x30
    cdf4:	beq.n	cde8 <_strtod_l+0x1f0>
    cdf6:	sub.w	r3, r2, #49	; 0x31
    cdfa:	cmp	r3, #8
    cdfc:	bhi.w	d72a <_strtod_l+0xb32>
    ce00:	ldr	r3, [sp, #68]	; 0x44
    ce02:	str	r3, [sp, #36]	; 0x24
    ce04:	mov	fp, r0
    ce06:	movs	r0, #0
    ce08:	mov	r3, r0
    ce0a:	subs	r2, #48	; 0x30
    ce0c:	add.w	r1, r0, #1
    ce10:	beq.n	ce38 <_strtod_l+0x240>
    ce12:	add	fp, r1
    ce14:	add.w	ip, r0, r3
    ce18:	mov	r1, r3
    ce1a:	movs	r5, #10
    ce1c:	cmp	r1, ip
    ce1e:	bne.n	ce48 <_strtod_l+0x250>
    ce20:	adds	r1, r3, r0
    ce22:	cmp	r1, #8
    ce24:	add.w	r3, r3, #1
    ce28:	add	r3, r0
    ce2a:	bgt.n	ce64 <_strtod_l+0x26c>
    ce2c:	ldr	r0, [sp, #28]
    ce2e:	movs	r1, #10
    ce30:	mla	r2, r1, r0, r2
    ce34:	str	r2, [sp, #28]
    ce36:	movs	r1, #0
    ce38:	ldr	r2, [sp, #68]	; 0x44
    ce3a:	adds	r0, r2, #1
    ce3c:	str	r0, [sp, #68]	; 0x44
    ce3e:	ldrb	r2, [r2, #1]
    ce40:	mov	r0, r1
    ce42:	b.n	cddc <_strtod_l+0x1e4>
    ce44:	mov	r0, r6
    ce46:	b.n	cdf2 <_strtod_l+0x1fa>
    ce48:	cmp	r1, #8
    ce4a:	add.w	r1, r1, #1
    ce4e:	bgt.n	ce58 <_strtod_l+0x260>
    ce50:	ldr	r7, [sp, #28]
    ce52:	muls	r7, r5
    ce54:	str	r7, [sp, #28]
    ce56:	b.n	ce1c <_strtod_l+0x224>
    ce58:	cmp	r1, #16
    ce5a:	ittt	le
    ce5c:	ldrle	r7, [sp, #20]
    ce5e:	mulle	r7, r5
    ce60:	strle	r7, [sp, #20]
    ce62:	b.n	ce1c <_strtod_l+0x224>
    ce64:	cmp	r3, #16
    ce66:	itttt	le
    ce68:	ldrle	r0, [sp, #20]
    ce6a:	movle	r1, #10
    ce6c:	mlale	r2, r1, r0, r2
    ce70:	strle	r2, [sp, #20]
    ce72:	b.n	ce36 <_strtod_l+0x23e>
    ce74:	mov.w	fp, #0
    ce78:	movs	r1, #1
    ce7a:	b.n	cd76 <_strtod_l+0x17e>
    ce7c:	mov.w	lr, #0
    ce80:	add.w	r2, sl, #2
    ce84:	str	r2, [sp, #68]	; 0x44
    ce86:	ldrb.w	r2, [sl, #2]
    ce8a:	b.n	cd98 <_strtod_l+0x1a0>
    ce8c:	mov.w	lr, #1
    ce90:	b.n	ce80 <_strtod_l+0x288>
    ce92:	nop
    ce94:	.word	0x20000984
    ce98:	.word	0x20000d11
    ce9c:	.word	0x7ff00000
    cea0:	ldr	r2, [sp, #68]	; 0x44
    cea2:	adds	r5, r2, #1
    cea4:	str	r5, [sp, #68]	; 0x44
    cea6:	ldrb	r2, [r2, #1]
    cea8:	cmp	r2, #48	; 0x30
    ceaa:	beq.n	cea0 <_strtod_l+0x2a8>
    ceac:	sub.w	r5, r2, #49	; 0x31
    ceb0:	cmp	r5, #8
    ceb2:	bhi.w	cda6 <_strtod_l+0x1ae>
    ceb6:	sub.w	ip, r2, #48	; 0x30
    ceba:	ldr	r2, [sp, #68]	; 0x44
    cebc:	str	r2, [sp, #40]	; 0x28
    cebe:	ldr	r2, [sp, #68]	; 0x44
    cec0:	adds	r5, r2, #1
    cec2:	str	r5, [sp, #68]	; 0x44
    cec4:	ldrb	r2, [r2, #1]
    cec6:	sub.w	r7, r2, #48	; 0x30
    ceca:	cmp	r7, #9
    cecc:	bls.n	cf3e <_strtod_l+0x346>
    cece:	ldr	r7, [sp, #40]	; 0x28
    ced0:	subs	r5, r5, r7
    ced2:	cmp	r5, #8
    ced4:	movw	r5, #19999	; 0x4e1f
    ced8:	bgt.n	cee0 <_strtod_l+0x2e8>
    ceda:	cmp	r5, ip
    cedc:	it	ge
    cede:	movge	r5, ip
    cee0:	cmp.w	lr, #0
    cee4:	beq.n	cee8 <_strtod_l+0x2f0>
    cee6:	negs	r5, r5
    cee8:	cmp	r3, #0
    ceea:	bne.n	cf88 <_strtod_l+0x390>
    ceec:	ldr	r3, [sp, #24]
    ceee:	orrs	r3, r0
    cef0:	bne.w	cc6e <_strtod_l+0x76>
    cef4:	cmp	r1, #0
    cef6:	bne.w	cca6 <_strtod_l+0xae>
    cefa:	cmp	r2, #105	; 0x69
    cefc:	beq.n	cf4e <_strtod_l+0x356>
    cefe:	bgt.n	cf4a <_strtod_l+0x352>
    cf00:	cmp	r2, #73	; 0x49
    cf02:	beq.n	cf4e <_strtod_l+0x356>
    cf04:	cmp	r2, #78	; 0x4e
    cf06:	bne.w	cca6 <_strtod_l+0xae>
    cf0a:	ldr	r1, [pc, #596]	; (d160 <_strtod_l+0x568>)
    cf0c:	add	r0, sp, #68	; 0x44
    cf0e:	bl	fd80 <__match>
    cf12:	cmp	r0, #0
    cf14:	beq.w	cca6 <_strtod_l+0xae>
    cf18:	ldr	r3, [sp, #68]	; 0x44
    cf1a:	ldrb	r3, [r3, #0]
    cf1c:	cmp	r3, #40	; 0x28
    cf1e:	bne.n	cf7c <_strtod_l+0x384>
    cf20:	ldr	r1, [pc, #576]	; (d164 <_strtod_l+0x56c>)
    cf22:	add	r2, sp, #80	; 0x50
    cf24:	add	r0, sp, #68	; 0x44
    cf26:	bl	fda8 <__hexnan>
    cf2a:	cmp	r0, #5
    cf2c:	bne.n	cf7c <_strtod_l+0x384>
    cf2e:	ldr	r3, [sp, #84]	; 0x54
    cf30:	ldr.w	r8, [sp, #80]	; 0x50
    cf34:	orr.w	r9, r3, #2139095040	; 0x7f800000
    cf38:	orr.w	r9, r9, #7340032	; 0x700000
    cf3c:	b.n	cc6e <_strtod_l+0x76>
    cf3e:	movs	r5, #10
    cf40:	mla	ip, r5, ip, r2
    cf44:	sub.w	ip, ip, #48	; 0x30
    cf48:	b.n	cebe <_strtod_l+0x2c6>
    cf4a:	cmp	r2, #110	; 0x6e
    cf4c:	b.n	cf06 <_strtod_l+0x30e>
    cf4e:	ldr	r1, [pc, #536]	; (d168 <_strtod_l+0x570>)
    cf50:	add	r0, sp, #68	; 0x44
    cf52:	bl	fd80 <__match>
    cf56:	cmp	r0, #0
    cf58:	beq.w	cca6 <_strtod_l+0xae>
    cf5c:	ldr	r3, [sp, #68]	; 0x44
    cf5e:	ldr	r1, [pc, #524]	; (d16c <_strtod_l+0x574>)
    cf60:	subs	r3, #1
    cf62:	add	r0, sp, #68	; 0x44
    cf64:	str	r3, [sp, #68]	; 0x44
    cf66:	bl	fd80 <__match>
    cf6a:	cbnz	r0, cf72 <_strtod_l+0x37a>
    cf6c:	ldr	r3, [sp, #68]	; 0x44
    cf6e:	adds	r3, #1
    cf70:	str	r3, [sp, #68]	; 0x44
    cf72:	ldr.w	r9, [pc, #524]	; d180 <_strtod_l+0x588>
    cf76:	mov.w	r8, #0
    cf7a:	b.n	cc6e <_strtod_l+0x76>
    cf7c:	ldr	r0, [pc, #496]	; (d170 <_strtod_l+0x578>)
    cf7e:	bl	eb90 <nan>
    cf82:	vmov	r8, r9, d0
    cf86:	b.n	cc6e <_strtod_l+0x76>
    cf88:	vldr	s15, [sp, #28]
    cf8c:	sub.w	r2, r5, fp
    cf90:	vcvt.f64.u32	d7, s15
    cf94:	cmp	r6, #0
    cf96:	it	eq
    cf98:	moveq	r6, r3
    cf9a:	cmp	r3, #16
    cf9c:	str	r2, [sp, #24]
    cf9e:	mov	r2, r3
    cfa0:	it	ge
    cfa2:	movge	r2, #16
    cfa4:	cmp	r3, #9
    cfa6:	vmov	r8, r9, d7
    cfaa:	ble.n	cfc6 <_strtod_l+0x3ce>
    cfac:	ldr	r1, [pc, #452]	; (d174 <_strtod_l+0x57c>)
    cfae:	vldr	s13, [sp, #20]
    cfb2:	add.w	r1, r1, r2, lsl #3
    cfb6:	vldr	d5, [r1, #-72]	; 0xffffffb8
    cfba:	vcvt.f64.u32	d6, s13
    cfbe:	vfma.f64	d6, d7, d5
    cfc2:	vmov	r8, r9, d6
    cfc6:	cmp	r3, #15
    cfc8:	bgt.n	d03a <_strtod_l+0x442>
    cfca:	ldr	r1, [sp, #24]
    cfcc:	cmp	r1, #0
    cfce:	beq.w	cc6e <_strtod_l+0x76>
    cfd2:	ble.n	d01c <_strtod_l+0x424>
    cfd4:	cmp	r1, #22
    cfd6:	bgt.n	cff0 <_strtod_l+0x3f8>
    cfd8:	ldr	r3, [pc, #408]	; (d174 <_strtod_l+0x57c>)
    cfda:	add.w	r3, r3, r1, lsl #3
    cfde:	vldr	d7, [r3]
    cfe2:	vmov	d6, r8, r9
    cfe6:	vmul.f64	d7, d7, d6
    cfea:	vmov	r8, r9, d7
    cfee:	b.n	cc6e <_strtod_l+0x76>
    cff0:	ldr	r0, [sp, #24]
    cff2:	rsb	r1, r3, #37	; 0x25
    cff6:	cmp	r1, r0
    cff8:	blt.n	d03a <_strtod_l+0x442>
    cffa:	ldr	r2, [pc, #376]	; (d174 <_strtod_l+0x57c>)
    cffc:	rsb	r3, r3, #15
    d000:	add.w	r1, r2, r3, lsl #3
    d004:	vldr	d7, [r1]
    d008:	vmov	d6, r8, r9
    d00c:	subs	r3, r0, r3
    d00e:	add.w	r2, r2, r3, lsl #3
    d012:	vmul.f64	d7, d7, d6
    d016:	vldr	d6, [r2]
    d01a:	b.n	cfe6 <_strtod_l+0x3ee>
    d01c:	ldr	r1, [sp, #24]
    d01e:	adds	r1, #22
    d020:	blt.n	d03a <_strtod_l+0x442>
    d022:	ldr	r3, [pc, #336]	; (d174 <_strtod_l+0x57c>)
    d024:	sub.w	r5, fp, r5
    d028:	add.w	r5, r3, r5, lsl #3
    d02c:	vldr	d7, [r5]
    d030:	vmov	d6, r8, r9
    d034:	vdiv.f64	d7, d6, d7
    d038:	b.n	cfea <_strtod_l+0x3f2>
    d03a:	ldr	r1, [sp, #24]
    d03c:	subs	r2, r3, r2
    d03e:	add	r2, r1
    d040:	cmp	r2, #0
    d042:	ble.n	d122 <_strtod_l+0x52a>
    d044:	ands.w	r0, r2, #15
    d048:	beq.n	d060 <_strtod_l+0x468>
    d04a:	ldr	r1, [pc, #296]	; (d174 <_strtod_l+0x57c>)
    d04c:	add.w	r1, r1, r0, lsl #3
    d050:	vldr	d7, [r1]
    d054:	vmov	d6, r8, r9
    d058:	vmul.f64	d7, d7, d6
    d05c:	vmov	r8, r9, d7
    d060:	bics.w	r2, r2, #15
    d064:	beq.n	d104 <_strtod_l+0x50c>
    d066:	cmp.w	r2, #308	; 0x134
    d06a:	ble.n	d0b2 <_strtod_l+0x4ba>
    d06c:	movs	r5, #0
    d06e:	mov	r6, r5
    d070:	str	r5, [sp, #28]
    d072:	mov	r7, r5
    d074:	movs	r3, #34	; 0x22
    d076:	ldr.w	r9, [pc, #264]	; d180 <_strtod_l+0x588>
    d07a:	str	r3, [r4, #0]
    d07c:	mov.w	r8, #0
    d080:	ldr	r3, [sp, #28]
    d082:	cmp	r3, #0
    d084:	beq.w	cc6e <_strtod_l+0x76>
    d088:	ldr	r1, [sp, #72]	; 0x48
    d08a:	mov	r0, r4
    d08c:	bl	ff84 <_Bfree>
    d090:	mov	r1, r7
    d092:	mov	r0, r4
    d094:	bl	ff84 <_Bfree>
    d098:	mov	r1, r6
    d09a:	mov	r0, r4
    d09c:	bl	ff84 <_Bfree>
    d0a0:	ldr	r1, [sp, #28]
    d0a2:	mov	r0, r4
    d0a4:	bl	ff84 <_Bfree>
    d0a8:	mov	r1, r5
    d0aa:	mov	r0, r4
    d0ac:	bl	ff84 <_Bfree>
    d0b0:	b.n	cc6e <_strtod_l+0x76>
    d0b2:	movs	r0, #0
    d0b4:	vmov	d7, r8, r9
    d0b8:	ldr	r7, [pc, #188]	; (d178 <_strtod_l+0x580>)
    d0ba:	asrs	r2, r2, #4
    d0bc:	mov	r1, r0
    d0be:	cmp	r2, #1
    d0c0:	bgt.n	d10a <_strtod_l+0x512>
    d0c2:	cbz	r0, d0c8 <_strtod_l+0x4d0>
    d0c4:	vmov	r8, r9, d7
    d0c8:	ldr	r2, [pc, #172]	; (d178 <_strtod_l+0x580>)
    d0ca:	ldr	r0, [pc, #176]	; (d17c <_strtod_l+0x584>)
    d0cc:	add.w	r2, r2, r1, lsl #3
    d0d0:	vldr	d7, [r2]
    d0d4:	sub.w	r9, r9, #55574528	; 0x3500000
    d0d8:	vmov	d6, r8, r9
    d0dc:	ldr	r2, [pc, #160]	; (d180 <_strtod_l+0x588>)
    d0de:	vmul.f64	d7, d7, d6
    d0e2:	vmov	r1, s15
    d0e6:	ands	r2, r1
    d0e8:	cmp	r2, r0
    d0ea:	vmov	r8, r9, d7
    d0ee:	bhi.n	d06c <_strtod_l+0x474>
    d0f0:	sub.w	r0, r0, #1048576	; 0x100000
    d0f4:	cmp	r2, r0
    d0f6:	itte	hi
    d0f8:	ldrhi.w	r9, [pc, #136]	; d184 <_strtod_l+0x58c>
    d0fc:	movhi.w	r8, #4294967295
    d100:	addls.w	r9, r1, #55574528	; 0x3500000
    d104:	movs	r2, #0
    d106:	str	r2, [sp, #20]
    d108:	b.n	d1f8 <_strtod_l+0x600>
    d10a:	tst.w	r2, #1
    d10e:	beq.n	d11a <_strtod_l+0x522>
    d110:	vldr	d6, [r7]
    d114:	movs	r0, #1
    d116:	vmul.f64	d7, d7, d6
    d11a:	adds	r1, #1
    d11c:	asrs	r2, r2, #1
    d11e:	adds	r7, #8
    d120:	b.n	d0be <_strtod_l+0x4c6>
    d122:	beq.n	d104 <_strtod_l+0x50c>
    d124:	negs	r2, r2
    d126:	ands.w	r0, r2, #15
    d12a:	beq.n	d142 <_strtod_l+0x54a>
    d12c:	ldr	r1, [pc, #68]	; (d174 <_strtod_l+0x57c>)
    d12e:	add.w	r1, r1, r0, lsl #3
    d132:	vldr	d7, [r1]
    d136:	vmov	d6, r8, r9
    d13a:	vdiv.f64	d7, d6, d7
    d13e:	vmov	r8, r9, d7
    d142:	asrs	r2, r2, #4
    d144:	beq.n	d104 <_strtod_l+0x50c>
    d146:	cmp	r2, #31
    d148:	ble.n	d188 <_strtod_l+0x590>
    d14a:	movs	r5, #0
    d14c:	mov	r6, r5
    d14e:	str	r5, [sp, #28]
    d150:	mov	r7, r5
    d152:	movs	r3, #34	; 0x22
    d154:	mov.w	r8, #0
    d158:	mov.w	r9, #0
    d15c:	str	r3, [r4, #0]
    d15e:	b.n	d080 <_strtod_l+0x488>
    d160:	.word	0x20001bf4
    d164:	.word	0x20000998
    d168:	.word	0x2000116b
    d16c:	.word	0x20001313
    d170:	.word	0x20000db7
    d174:	.word	0x20000328
    d178:	.word	0x20000300
    d17c:	.word	0x7ca00000
    d180:	.word	0x7ff00000
    d184:	.word	0x7fefffff
    d188:	ands.w	r1, r2, #16
    d18c:	it	ne
    d18e:	movne	r1, #106	; 0x6a
    d190:	str	r1, [sp, #20]
    d192:	vmov	d7, r8, r9
    d196:	ldr	r1, [pc, #760]	; (d490 <_strtod_l+0x898>)
    d198:	movs	r0, #0
    d19a:	lsls	r7, r2, #31
    d19c:	bpl.n	d1a8 <_strtod_l+0x5b0>
    d19e:	vldr	d6, [r1]
    d1a2:	movs	r0, #1
    d1a4:	vmul.f64	d7, d7, d6
    d1a8:	asrs	r2, r2, #1
    d1aa:	add.w	r1, r1, #8
    d1ae:	bne.n	d19a <_strtod_l+0x5a2>
    d1b0:	cbz	r0, d1b6 <_strtod_l+0x5be>
    d1b2:	vmov	r8, r9, d7
    d1b6:	ldr	r2, [sp, #20]
    d1b8:	cbz	r2, d1ea <_strtod_l+0x5f2>
    d1ba:	ubfx	r1, r9, #20, #11
    d1be:	rsb	r2, r1, #107	; 0x6b
    d1c2:	cmp	r2, #0
    d1c4:	mov	r0, r9
    d1c6:	ble.n	d1ea <_strtod_l+0x5f2>
    d1c8:	cmp	r2, #31
    d1ca:	ble.w	d426 <_strtod_l+0x82e>
    d1ce:	cmp	r2, #52	; 0x34
    d1d0:	ittt	le
    d1d2:	movle.w	r2, #4294967295
    d1d6:	rsble	r1, r1, #75	; 0x4b
    d1da:	lslle	r2, r1
    d1dc:	mov.w	r8, #0
    d1e0:	ite	gt
    d1e2:	movgt.w	r9, #57671680	; 0x3700000
    d1e6:	andle.w	r9, r2, r0
    d1ea:	vmov	d7, r8, r9
    d1ee:	vcmp.f64	d7, #0.0
    d1f2:	vmrs	APSR_nzcv, fpscr
    d1f6:	beq.n	d14a <_strtod_l+0x552>
    d1f8:	ldr	r2, [sp, #28]
    d1fa:	str	r2, [sp, #0]
    d1fc:	ldr	r1, [sp, #36]	; 0x24
    d1fe:	mov	r2, r6
    d200:	mov	r0, r4
    d202:	bl	10054 <__s2b>
    d206:	str	r0, [sp, #28]
    d208:	cmp	r0, #0
    d20a:	beq.w	d06c <_strtod_l+0x474>
    d20e:	ldr	r2, [sp, #24]
    d210:	cmp	r2, #0
    d212:	sub.w	r3, fp, r5
    d216:	vldr	d9, [pc, #600]	; d470 <_strtod_l+0x878>
    d21a:	it	ge
    d21c:	movge	r3, #0
    d21e:	vldr	d10, [pc, #600]	; d478 <_strtod_l+0x880>
    d222:	vldr	d11, [pc, #604]	; d480 <_strtod_l+0x888>
    d226:	str	r3, [sp, #36]	; 0x24
    d228:	movs	r5, #0
    d22a:	bic.w	r3, r2, r2, asr #31
    d22e:	str	r3, [sp, #48]	; 0x30
    d230:	mov	r6, r5
    d232:	ldr	r3, [sp, #28]
    d234:	mov	r0, r4
    d236:	ldr	r1, [r3, #4]
    d238:	bl	ff04 <_Balloc>
    d23c:	mov	r7, r0
    d23e:	cmp	r0, #0
    d240:	beq.w	d074 <_strtod_l+0x47c>
    d244:	ldr	r3, [sp, #28]
    d246:	ldr	r2, [r3, #16]
    d248:	adds	r2, #2
    d24a:	add.w	r1, r3, #12
    d24e:	lsls	r2, r2, #2
    d250:	adds	r0, #12
    d252:	bl	a000 <memcpy>
    d256:	vmov	d0, r8, r9
    d25a:	add	r2, sp, #80	; 0x50
    d25c:	add	r1, sp, #76	; 0x4c
    d25e:	mov	r0, r4
    d260:	bl	106bc <__d2b>
    d264:	vmov	d8, r8, r9
    d268:	str	r0, [sp, #72]	; 0x48
    d26a:	cmp	r0, #0
    d26c:	beq.w	d074 <_strtod_l+0x47c>
    d270:	movs	r1, #1
    d272:	mov	r0, r4
    d274:	bl	10184 <__i2b>
    d278:	mov	r6, r0
    d27a:	cmp	r0, #0
    d27c:	beq.w	d074 <_strtod_l+0x47c>
    d280:	ldr	r3, [sp, #76]	; 0x4c
    d282:	ldr	r1, [sp, #80]	; 0x50
    d284:	cmp	r3, #0
    d286:	itete	ge
    d288:	ldrge	r2, [sp, #36]	; 0x24
    d28a:	ldrlt	r2, [sp, #48]	; 0x30
    d28c:	ldrge.w	sl, [sp, #48]	; 0x30
    d290:	ldrlt.w	fp, [sp, #36]	; 0x24
    d294:	ite	ge
    d296:	addge.w	fp, r3, r2
    d29a:	sublt.w	sl, r2, r3
    d29e:	ldr	r2, [sp, #20]
    d2a0:	subs	r3, r3, r2
    d2a2:	add	r3, r1
    d2a4:	ldr	r2, [pc, #492]	; (d494 <_strtod_l+0x89c>)
    d2a6:	subs	r3, #1
    d2a8:	cmp	r3, r2
    d2aa:	rsb	r1, r1, #54	; 0x36
    d2ae:	bge.w	d44c <_strtod_l+0x854>
    d2b2:	subs	r2, r2, r3
    d2b4:	cmp	r2, #31
    d2b6:	sub.w	r1, r1, r2
    d2ba:	mov.w	r0, #1
    d2be:	bgt.w	d434 <_strtod_l+0x83c>
    d2c2:	lsl.w	r3, r0, r2
    d2c6:	str	r3, [sp, #44]	; 0x2c
    d2c8:	movs	r3, #0
    d2ca:	str	r3, [sp, #40]	; 0x28
    d2cc:	add.w	r3, fp, r1
    d2d0:	ldr	r2, [sp, #20]
    d2d2:	cmp	fp, r3
    d2d4:	add	sl, r1
    d2d6:	add	sl, r2
    d2d8:	mov	r2, fp
    d2da:	it	ge
    d2dc:	movge	r2, r3
    d2de:	cmp	r2, sl
    d2e0:	it	ge
    d2e2:	movge	r2, sl
    d2e4:	cmp	r2, #0
    d2e6:	ittt	gt
    d2e8:	subgt	r3, r3, r2
    d2ea:	subgt.w	sl, sl, r2
    d2ee:	subgt.w	fp, fp, r2
    d2f2:	ldr	r2, [sp, #36]	; 0x24
    d2f4:	cmp	r2, #0
    d2f6:	ble.n	d32a <_strtod_l+0x732>
    d2f8:	mov	r1, r6
    d2fa:	mov	r0, r4
    d2fc:	str	r3, [sp, #60]	; 0x3c
    d2fe:	bl	10304 <__pow5mult>
    d302:	mov	r6, r0
    d304:	cmp	r0, #0
    d306:	beq.w	d074 <_strtod_l+0x47c>
    d30a:	mov	r1, r0
    d30c:	ldr	r2, [sp, #72]	; 0x48
    d30e:	mov	r0, r4
    d310:	bl	101b0 <__multiply>
    d314:	str	r0, [sp, #56]	; 0x38
    d316:	cmp	r0, #0
    d318:	beq.w	d074 <_strtod_l+0x47c>
    d31c:	ldr	r1, [sp, #72]	; 0x48
    d31e:	mov	r0, r4
    d320:	bl	ff84 <_Bfree>
    d324:	ldr	r2, [sp, #56]	; 0x38
    d326:	ldr	r3, [sp, #60]	; 0x3c
    d328:	str	r2, [sp, #72]	; 0x48
    d32a:	cmp	r3, #0
    d32c:	bgt.w	d456 <_strtod_l+0x85e>
    d330:	ldr	r3, [sp, #24]
    d332:	cmp	r3, #0
    d334:	ble.n	d348 <_strtod_l+0x750>
    d336:	mov	r1, r7
    d338:	ldr	r2, [sp, #48]	; 0x30
    d33a:	mov	r0, r4
    d33c:	bl	10304 <__pow5mult>
    d340:	mov	r7, r0
    d342:	cmp	r0, #0
    d344:	beq.w	d074 <_strtod_l+0x47c>
    d348:	cmp.w	sl, #0
    d34c:	ble.n	d360 <_strtod_l+0x768>
    d34e:	mov	r1, r7
    d350:	mov	r2, sl
    d352:	mov	r0, r4
    d354:	bl	103b8 <__lshift>
    d358:	mov	r7, r0
    d35a:	cmp	r0, #0
    d35c:	beq.w	d074 <_strtod_l+0x47c>
    d360:	cmp.w	fp, #0
    d364:	ble.n	d378 <_strtod_l+0x780>
    d366:	mov	r1, r6
    d368:	mov	r2, fp
    d36a:	mov	r0, r4
    d36c:	bl	103b8 <__lshift>
    d370:	mov	r6, r0
    d372:	cmp	r0, #0
    d374:	beq.w	d074 <_strtod_l+0x47c>
    d378:	ldr	r1, [sp, #72]	; 0x48
    d37a:	mov	r2, r7
    d37c:	mov	r0, r4
    d37e:	bl	104c8 <__mdiff>
    d382:	mov	r5, r0
    d384:	cmp	r0, #0
    d386:	beq.w	d074 <_strtod_l+0x47c>
    d38a:	movs	r3, #0
    d38c:	ldr.w	sl, [r0, #12]
    d390:	str	r3, [r0, #12]
    d392:	mov	r1, r6
    d394:	bl	10490 <__mcmp>
    d398:	cmp	r0, #0
    d39a:	bge.n	d49c <_strtod_l+0x8a4>
    d39c:	orrs.w	sl, sl, r8
    d3a0:	bne.w	d4ee <_strtod_l+0x8f6>
    d3a4:	ubfx	r3, r9, #0, #20
    d3a8:	cmp	r3, #0
    d3aa:	bne.w	d4ee <_strtod_l+0x8f6>
    d3ae:	bic.w	r3, r9, #2147483648	; 0x80000000
    d3b2:	lsrs	r3, r3, #20
    d3b4:	lsls	r3, r3, #20
    d3b6:	cmp.w	r3, #112197632	; 0x6b00000
    d3ba:	bls.w	d4ee <_strtod_l+0x8f6>
    d3be:	ldr	r3, [r5, #20]
    d3c0:	cbnz	r3, d3ca <_strtod_l+0x7d2>
    d3c2:	ldr	r3, [r5, #16]
    d3c4:	cmp	r3, #1
    d3c6:	ble.w	d4ee <_strtod_l+0x8f6>
    d3ca:	mov	r1, r5
    d3cc:	movs	r2, #1
    d3ce:	mov	r0, r4
    d3d0:	bl	103b8 <__lshift>
    d3d4:	mov	r1, r6
    d3d6:	mov	r5, r0
    d3d8:	bl	10490 <__mcmp>
    d3dc:	cmp	r0, #0
    d3de:	ble.w	d4ee <_strtod_l+0x8f6>
    d3e2:	ldr	r1, [sp, #20]
    d3e4:	ldr	r2, [pc, #176]	; (d498 <_strtod_l+0x8a0>)
    d3e6:	mov	r3, r9
    d3e8:	cmp	r1, #0
    d3ea:	beq.w	d52c <_strtod_l+0x934>
    d3ee:	and.w	r1, r2, r9
    d3f2:	cmp.w	r1, #112197632	; 0x6b00000
    d3f6:	bgt.w	d52c <_strtod_l+0x934>
    d3fa:	cmp.w	r1, #57671680	; 0x3700000
    d3fe:	ble.w	d152 <_strtod_l+0x55a>
    d402:	vldr	d7, [pc, #132]	; d488 <_strtod_l+0x890>
    d406:	vmov	d6, r8, r9
    d40a:	ldr	r3, [pc, #140]	; (d498 <_strtod_l+0x8a0>)
    d40c:	vmul.f64	d7, d6, d7
    d410:	vmov	r2, s15
    d414:	ands	r3, r2
    d416:	vmov	r8, r9, d7
    d41a:	cmp	r3, #0
    d41c:	bne.w	d088 <_strtod_l+0x490>
    d420:	movs	r3, #34	; 0x22
    d422:	str	r3, [r4, #0]
    d424:	b.n	d088 <_strtod_l+0x490>
    d426:	mov.w	r1, #4294967295
    d42a:	lsl.w	r2, r1, r2
    d42e:	and.w	r8, r2, r8
    d432:	b.n	d1ea <_strtod_l+0x5f2>
    d434:	rsb	r3, r3, #4278190080	; 0xff000000
    d438:	add.w	r3, r3, #16711680	; 0xff0000
    d43c:	add.w	r3, r3, #64256	; 0xfb00
    d440:	adds	r3, #226	; 0xe2
    d442:	lsl.w	r3, r0, r3
    d446:	strd	r3, r0, [sp, #40]	; 0x28
    d44a:	b.n	d2cc <_strtod_l+0x6d4>
    d44c:	movs	r2, #0
    d44e:	movs	r3, #1
    d450:	strd	r2, r3, [sp, #40]	; 0x28
    d454:	b.n	d2cc <_strtod_l+0x6d4>
    d456:	ldr	r1, [sp, #72]	; 0x48
    d458:	mov	r2, r3
    d45a:	mov	r0, r4
    d45c:	bl	103b8 <__lshift>
    d460:	str	r0, [sp, #72]	; 0x48
    d462:	cmp	r0, #0
    d464:	bne.w	d330 <_strtod_l+0x738>
    d468:	b.n	d074 <_strtod_l+0x47c>
    d46a:	nop
    d46c:	nop.w
    d470:	.word	0x94a03595
    d474:	.word	0x3fcfffff
    d478:	.word	0x94a03595
    d47c:	.word	0x3fdfffff
    d480:	.word	0x35afe535
    d484:	.word	0x3fe00000
    d488:	.word	0x00000000
    d48c:	.word	0x39500000
    d490:	.word	0x200003f0
    d494:	.word	0xfffffc02
    d498:	.word	0x7ff00000
    d49c:	mov	fp, r9
    d49e:	bne.n	d560 <_strtod_l+0x968>
    d4a0:	ubfx	r3, r9, #0, #20
    d4a4:	cmp.w	sl, #0
    d4a8:	beq.n	d500 <_strtod_l+0x908>
    d4aa:	ldr	r2, [pc, #668]	; (d748 <_strtod_l+0xb50>)
    d4ac:	cmp	r3, r2
    d4ae:	bne.n	d508 <_strtod_l+0x910>
    d4b0:	ldr	r3, [sp, #20]
    d4b2:	mov	r2, r8
    d4b4:	cbz	r3, d4f6 <_strtod_l+0x8fe>
    d4b6:	ldr	r3, [pc, #660]	; (d74c <_strtod_l+0xb54>)
    d4b8:	and.w	r3, r9, r3
    d4bc:	cmp.w	r3, #111149056	; 0x6a00000
    d4c0:	mov.w	r1, #4294967295
    d4c4:	bhi.n	d4fc <_strtod_l+0x904>
    d4c6:	lsrs	r3, r3, #20
    d4c8:	rsb	r3, r3, #107	; 0x6b
    d4cc:	lsl.w	r3, r1, r3
    d4d0:	cmp	r2, r3
    d4d2:	bne.n	d508 <_strtod_l+0x910>
    d4d4:	ldr	r3, [pc, #632]	; (d750 <_strtod_l+0xb58>)
    d4d6:	cmp	fp, r3
    d4d8:	bne.n	d4e0 <_strtod_l+0x8e8>
    d4da:	adds	r2, #1
    d4dc:	beq.w	d074 <_strtod_l+0x47c>
    d4e0:	ldr	r3, [pc, #616]	; (d74c <_strtod_l+0xb54>)
    d4e2:	and.w	r3, fp, r3
    d4e6:	add.w	r9, r3, #1048576	; 0x100000
    d4ea:	mov.w	r8, #0
    d4ee:	ldr	r3, [sp, #20]
    d4f0:	cmp	r3, #0
    d4f2:	bne.n	d402 <_strtod_l+0x80a>
    d4f4:	b.n	d088 <_strtod_l+0x490>
    d4f6:	mov.w	r3, #4294967295
    d4fa:	b.n	d4d0 <_strtod_l+0x8d8>
    d4fc:	mov	r3, r1
    d4fe:	b.n	d4d0 <_strtod_l+0x8d8>
    d500:	orrs.w	r3, r3, r8
    d504:	beq.w	d3e2 <_strtod_l+0x7ea>
    d508:	ldr	r3, [sp, #40]	; 0x28
    d50a:	cbz	r3, d540 <_strtod_l+0x948>
    d50c:	tst.w	r3, fp
    d510:	beq.n	d4ee <_strtod_l+0x8f6>
    d512:	ldr	r2, [sp, #20]
    d514:	mov	r0, r8
    d516:	mov	r1, r9
    d518:	cmp.w	sl, #0
    d51c:	beq.n	d548 <_strtod_l+0x950>
    d51e:	bl	cbc2 <sulp>
    d522:	vadd.f64	d7, d8, d0
    d526:	vmov	r8, r9, d7
    d52a:	b.n	d4ee <_strtod_l+0x8f6>
    d52c:	ands	r3, r2
    d52e:	sub.w	r3, r3, #1048576	; 0x100000
    d532:	mvn.w	r9, r3, lsr #20
    d536:	mvn.w	r9, r9, lsl #20
    d53a:	mov.w	r8, #4294967295
    d53e:	b.n	d4ee <_strtod_l+0x8f6>
    d540:	ldr	r3, [sp, #44]	; 0x2c
    d542:	tst.w	r3, r8
    d546:	b.n	d510 <_strtod_l+0x918>
    d548:	bl	cbc2 <sulp>
    d54c:	vsub.f64	d0, d8, d0
    d550:	vcmp.f64	d0, #0.0
    d554:	vmrs	APSR_nzcv, fpscr
    d558:	vmov	r8, r9, d0
    d55c:	bne.n	d4ee <_strtod_l+0x8f6>
    d55e:	b.n	d152 <_strtod_l+0x55a>
    d560:	mov	r1, r6
    d562:	mov	r0, r5
    d564:	bl	10770 <__ratio>
    d568:	vmov.f64	d7, #0	; 0x40000000  2.0
    d56c:	vcmpe.f64	d0, d7
    d570:	vmrs	APSR_nzcv, fpscr
    d574:	bhi.n	d636 <_strtod_l+0xa3e>
    d576:	cmp.w	sl, #0
    d57a:	bne.n	d64a <_strtod_l+0xa52>
    d57c:	cmp.w	r8, #0
    d580:	bne.n	d61e <_strtod_l+0xa26>
    d582:	ubfx	r3, r9, #0, #20
    d586:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d58a:	cmp	r3, #0
    d58c:	bne.n	d654 <_strtod_l+0xa5c>
    d58e:	vcmpe.f64	d0, d13
    d592:	vmov.f64	d13, #96	; 0x3f000000  0.5
    d596:	vmrs	APSR_nzcv, fpscr
    d59a:	bmi.n	d5a0 <_strtod_l+0x9a8>
    d59c:	vmul.f64	d13, d0, d13
    d5a0:	vneg.f64	d12, d13
    d5a4:	ldr	r0, [pc, #420]	; (d74c <_strtod_l+0xb54>)
    d5a6:	ldr.w	ip, [pc, #432]	; d758 <_strtod_l+0xb60>
    d5aa:	and.w	r1, fp, r0
    d5ae:	cmp	r1, ip
    d5b0:	vmov	r2, r3, d12
    d5b4:	bne.n	d6ac <_strtod_l+0xab4>
    d5b6:	sub.w	r9, fp, #55574528	; 0x3500000
    d5ba:	vmov	d0, r8, r9
    d5be:	str	r1, [sp, #40]	; 0x28
    d5c0:	bl	105dc <__ulp>
    d5c4:	vmov	d14, r8, r9
    d5c8:	ldr	r0, [pc, #384]	; (d74c <_strtod_l+0xb54>)
    d5ca:	vfma.f64	d14, d0, d12
    d5ce:	vmov	r3, s29
    d5d2:	ldr	r2, [pc, #384]	; (d754 <_strtod_l+0xb5c>)
    d5d4:	ldr	r1, [sp, #40]	; 0x28
    d5d6:	ands	r0, r3
    d5d8:	cmp	r0, r2
    d5da:	vmov	r8, r9, d14
    d5de:	bls.n	d65a <_strtod_l+0xa62>
    d5e0:	vmov	r2, s17
    d5e4:	ldr	r3, [pc, #360]	; (d750 <_strtod_l+0xb58>)
    d5e6:	cmp	r2, r3
    d5e8:	bne.n	d5f4 <_strtod_l+0x9fc>
    d5ea:	vmov	r3, s16
    d5ee:	adds	r3, #1
    d5f0:	beq.w	d074 <_strtod_l+0x47c>
    d5f4:	ldr.w	r9, [pc, #344]	; d750 <_strtod_l+0xb58>
    d5f8:	mov.w	r8, #4294967295
    d5fc:	ldr	r1, [sp, #72]	; 0x48
    d5fe:	mov	r0, r4
    d600:	bl	ff84 <_Bfree>
    d604:	mov	r1, r7
    d606:	mov	r0, r4
    d608:	bl	ff84 <_Bfree>
    d60c:	mov	r1, r6
    d60e:	mov	r0, r4
    d610:	bl	ff84 <_Bfree>
    d614:	mov	r1, r5
    d616:	mov	r0, r4
    d618:	bl	ff84 <_Bfree>
    d61c:	b.n	d232 <_strtod_l+0x63a>
    d61e:	cmp.w	r8, #1
    d622:	bne.n	d62c <_strtod_l+0xa34>
    d624:	cmp.w	r9, #0
    d628:	beq.w	d152 <_strtod_l+0x55a>
    d62c:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    d630:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d634:	b.n	d5a4 <_strtod_l+0x9ac>
    d636:	vmov.f64	d13, #96	; 0x3f000000  0.5
    d63a:	vmul.f64	d13, d0, d13
    d63e:	cmp.w	sl, #0
    d642:	beq.n	d5a0 <_strtod_l+0x9a8>
    d644:	vmov.f64	d12, d13
    d648:	b.n	d5a4 <_strtod_l+0x9ac>
    d64a:	vmov.f64	d12, #112	; 0x3f800000  1.0
    d64e:	vmov.f64	d13, d12
    d652:	b.n	d5a4 <_strtod_l+0x9ac>
    d654:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    d658:	b.n	d5a4 <_strtod_l+0x9ac>
    d65a:	add.w	r9, r3, #55574528	; 0x3500000
    d65e:	ldr	r3, [sp, #20]
    d660:	mov	fp, r9
    d662:	cmp	r3, #0
    d664:	bne.n	d5fc <_strtod_l+0xa04>
    d666:	bic.w	r3, r9, #2147483648	; 0x80000000
    d66a:	lsrs	r3, r3, #20
    d66c:	lsls	r3, r3, #20
    d66e:	cmp	r1, r3
    d670:	bne.n	d5fc <_strtod_l+0xa04>
    d672:	vmov	r0, r1, d13
    d676:	bl	11df4 <__aeabi_d2lz>
    d67a:	bl	11d98 <__aeabi_l2d>
    d67e:	ubfx	fp, r9, #0, #20
    d682:	vmov	d7, r0, r1
    d686:	orr.w	fp, fp, r8
    d68a:	orrs.w	fp, fp, sl
    d68e:	vsub.f64	d13, d13, d7
    d692:	beq.n	d70e <_strtod_l+0xb16>
    d694:	vcmpe.f64	d13, d10
    d698:	vmrs	APSR_nzcv, fpscr
    d69c:	bmi.w	d088 <_strtod_l+0x490>
    d6a0:	vcmpe.f64	d13, d11
    d6a4:	vmrs	APSR_nzcv, fpscr
    d6a8:	ble.n	d5fc <_strtod_l+0xa04>
    d6aa:	b.n	d088 <_strtod_l+0x490>
    d6ac:	ldr	r0, [sp, #20]
    d6ae:	cbz	r0, d6ee <_strtod_l+0xaf6>
    d6b0:	cmp.w	r1, #111149056	; 0x6a00000
    d6b4:	bhi.n	d6ee <_strtod_l+0xaf6>
    d6b6:	vldr	d7, [pc, #136]	; d740 <_strtod_l+0xb48>
    d6ba:	vcmpe.f64	d13, d7
    d6be:	vmrs	APSR_nzcv, fpscr
    d6c2:	bhi.n	d6e8 <_strtod_l+0xaf0>
    d6c4:	vcvt.u32.f64	s26, d13
    d6c8:	vmov	r3, s26
    d6cc:	cmp	r3, #1
    d6ce:	it	cc
    d6d0:	movcc	r3, #1
    d6d2:	vmov	s26, r3
    d6d6:	vcvt.f64.u32	d13, s26
    d6da:	cmp.w	sl, #0
    d6de:	bne.n	d708 <_strtod_l+0xb10>
    d6e0:	vneg.f64	d7, d13
    d6e4:	vmov	r2, r3, d7
    d6e8:	add.w	r0, r3, #112197632	; 0x6b00000
    d6ec:	subs	r3, r0, r1
    d6ee:	vmov.f64	d0, d8
    d6f2:	vmov	d12, r2, r3
    d6f6:	str	r1, [sp, #40]	; 0x28
    d6f8:	bl	105dc <__ulp>
    d6fc:	ldr	r1, [sp, #40]	; 0x28
    d6fe:	vfma.f64	d8, d12, d0
    d702:	vmov	r8, r9, d8
    d706:	b.n	d65e <_strtod_l+0xa66>
    d708:	vmov.f64	d7, d13
    d70c:	b.n	d6e4 <_strtod_l+0xaec>
    d70e:	vcmpe.f64	d13, d9
    d712:	vmrs	APSR_nzcv, fpscr
    d716:	bpl.w	d5fc <_strtod_l+0xa04>
    d71a:	b.n	d088 <_strtod_l+0x490>
    d71c:	movs	r3, #0
    d71e:	str	r3, [sp, #32]
    d720:	ldr	r2, [sp, #52]	; 0x34
    d722:	ldr	r3, [sp, #68]	; 0x44
    d724:	str	r3, [r2, #0]
    d726:	b.w	cc76 <_strtod_l+0x7e>
    d72a:	cmp	r2, #101	; 0x65
    d72c:	beq.w	ce74 <_strtod_l+0x27c>
    d730:	cmp	r2, #69	; 0x45
    d732:	beq.w	ce74 <_strtod_l+0x27c>
    d736:	movs	r1, #1
    d738:	b.w	ceec <_strtod_l+0x2f4>
    d73c:	nop.w
    d740:	.word	0xffc00000
    d744:	.word	0x41dfffff
    d748:	.word	0x000fffff
    d74c:	.word	0x7ff00000
    d750:	.word	0x7fefffff
    d754:	.word	0x7c9fffff
    d758:	.word	0x7fe00000

0000d75c <_strtod_r>:
    d75c:	ldr	r3, [pc, #4]	; (d764 <_strtod_r+0x8>)
    d75e:	b.w	cbf8 <_strtod_l>
    d762:	nop
    d764:	.word	0x200020d0

0000d768 <_strtol_l.constprop.0>:
    d768:	cmp	r3, #1
    d76a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d76e:	beq.n	d774 <_strtol_l.constprop.0+0xc>
    d770:	cmp	r3, #36	; 0x24
    d772:	bls.n	d782 <_strtol_l.constprop.0+0x1a>
    d774:	bl	ea6c <__errno>
    d778:	movs	r3, #22
    d77a:	str	r3, [r0, #0]
    d77c:	movs	r0, #0
    d77e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d782:	ldr.w	ip, [pc, #228]	; d868 <_strtol_l.constprop.0+0x100>
    d786:	mov	r5, r1
    d788:	mov	r6, r5
    d78a:	ldrb.w	r4, [r5], #1
    d78e:	ldrb.w	r7, [ip, r4]
    d792:	ands.w	r7, r7, #8
    d796:	bne.n	d788 <_strtol_l.constprop.0+0x20>
    d798:	cmp	r4, #45	; 0x2d
    d79a:	bne.n	d802 <_strtol_l.constprop.0+0x9a>
    d79c:	ldrb	r4, [r5, #0]
    d79e:	movs	r7, #1
    d7a0:	adds	r5, r6, #2
    d7a2:	cmp	r3, #0
    d7a4:	beq.n	d85e <_strtol_l.constprop.0+0xf6>
    d7a6:	cmp	r3, #16
    d7a8:	bne.n	d7be <_strtol_l.constprop.0+0x56>
    d7aa:	cmp	r4, #48	; 0x30
    d7ac:	bne.n	d7be <_strtol_l.constprop.0+0x56>
    d7ae:	ldrb	r4, [r5, #0]
    d7b0:	and.w	r4, r4, #223	; 0xdf
    d7b4:	cmp	r4, #88	; 0x58
    d7b6:	bne.n	d854 <_strtol_l.constprop.0+0xec>
    d7b8:	ldrb	r4, [r5, #1]
    d7ba:	movs	r3, #16
    d7bc:	adds	r5, #2
    d7be:	add.w	r8, r7, #2147483648	; 0x80000000
    d7c2:	add.w	r8, r8, #4294967295
    d7c6:	mov.w	lr, #0
    d7ca:	udiv	r9, r8, r3
    d7ce:	mov	r6, lr
    d7d0:	mls	sl, r3, r9, r8
    d7d4:	sub.w	ip, r4, #48	; 0x30
    d7d8:	cmp.w	ip, #9
    d7dc:	bhi.n	d80c <_strtol_l.constprop.0+0xa4>
    d7de:	mov	r4, ip
    d7e0:	cmp	r3, r4
    d7e2:	ble.n	d82e <_strtol_l.constprop.0+0xc6>
    d7e4:	cmp.w	lr, #4294967295
    d7e8:	beq.n	d7fc <_strtol_l.constprop.0+0x94>
    d7ea:	cmp	r9, r6
    d7ec:	bcc.n	d828 <_strtol_l.constprop.0+0xc0>
    d7ee:	bne.n	d7f4 <_strtol_l.constprop.0+0x8c>
    d7f0:	cmp	sl, r4
    d7f2:	blt.n	d828 <_strtol_l.constprop.0+0xc0>
    d7f4:	mla	r6, r6, r3, r4
    d7f8:	mov.w	lr, #1
    d7fc:	ldrb.w	r4, [r5], #1
    d800:	b.n	d7d4 <_strtol_l.constprop.0+0x6c>
    d802:	cmp	r4, #43	; 0x2b
    d804:	itt	eq
    d806:	ldrbeq	r4, [r5, #0]
    d808:	addeq	r5, r6, #2
    d80a:	b.n	d7a2 <_strtol_l.constprop.0+0x3a>
    d80c:	sub.w	ip, r4, #65	; 0x41
    d810:	cmp.w	ip, #25
    d814:	bhi.n	d81a <_strtol_l.constprop.0+0xb2>
    d816:	subs	r4, #55	; 0x37
    d818:	b.n	d7e0 <_strtol_l.constprop.0+0x78>
    d81a:	sub.w	ip, r4, #97	; 0x61
    d81e:	cmp.w	ip, #25
    d822:	bhi.n	d82e <_strtol_l.constprop.0+0xc6>
    d824:	subs	r4, #87	; 0x57
    d826:	b.n	d7e0 <_strtol_l.constprop.0+0x78>
    d828:	mov.w	lr, #4294967295
    d82c:	b.n	d7fc <_strtol_l.constprop.0+0x94>
    d82e:	cmp.w	lr, #4294967295
    d832:	bne.n	d840 <_strtol_l.constprop.0+0xd8>
    d834:	movs	r3, #34	; 0x22
    d836:	str	r3, [r0, #0]
    d838:	mov	r6, r8
    d83a:	cbnz	r2, d84e <_strtol_l.constprop.0+0xe6>
    d83c:	mov	r0, r6
    d83e:	b.n	d77e <_strtol_l.constprop.0+0x16>
    d840:	cbz	r7, d844 <_strtol_l.constprop.0+0xdc>
    d842:	negs	r6, r6
    d844:	cmp	r2, #0
    d846:	beq.n	d83c <_strtol_l.constprop.0+0xd4>
    d848:	cmp.w	lr, #0
    d84c:	beq.n	d850 <_strtol_l.constprop.0+0xe8>
    d84e:	subs	r1, r5, #1
    d850:	str	r1, [r2, #0]
    d852:	b.n	d83c <_strtol_l.constprop.0+0xd4>
    d854:	movs	r4, #48	; 0x30
    d856:	cmp	r3, #0
    d858:	bne.n	d7be <_strtol_l.constprop.0+0x56>
    d85a:	movs	r3, #8
    d85c:	b.n	d7be <_strtol_l.constprop.0+0x56>
    d85e:	cmp	r4, #48	; 0x30
    d860:	beq.n	d7ae <_strtol_l.constprop.0+0x46>
    d862:	movs	r3, #10
    d864:	b.n	d7be <_strtol_l.constprop.0+0x56>
    d866:	nop
    d868:	.word	0x20001210

0000d86c <_strtol_r>:
    d86c:	b.w	d768 <_strtol_l.constprop.0>

0000d870 <__cxa_atexit>:
    d870:	push	{r4, lr}
    d872:	ldr	r4, [pc, #20]	; (d888 <__cxa_atexit+0x18>)
    d874:	mov	r3, r2
    d876:	cbz	r4, d884 <__cxa_atexit+0x14>
    d878:	mov	r2, r1
    d87a:	mov	r1, r0
    d87c:	movs	r0, #2
    d87e:	nop.w
    d882:	pop	{r4, pc}
    d884:	mov	r0, r4
    d886:	b.n	d882 <__cxa_atexit+0x12>
    d888:	.word	0x00000000

0000d88c <fcvt>:
    d88c:	movs	r3, #0
    d88e:	b.w	10884 <fcvtbuf>

0000d892 <fcvtf>:
    d892:	vcvt.f64.f32	d0, s0
    d896:	b.w	d88c <fcvt>

0000d89a <__cvt>:
    d89a:	push	{r4, r5, r6, r7, lr}
    d89c:	vpush	{d8}
    d8a0:	vmov.f64	d8, d0
    d8a4:	sub	sp, #20
    d8a6:	mov	r7, r2
    d8a8:	ldr	r5, [sp, #52]	; 0x34
    d8aa:	ldr	r6, [sp, #48]	; 0x30
    d8ac:	vmov	r2, s17
    d8b0:	bic.w	r5, r5, #32
    d8b4:	cmp	r2, #0
    d8b6:	itet	lt
    d8b8:	movlt	r2, #45	; 0x2d
    d8ba:	movge	r2, #0
    d8bc:	vneglt.f64	d8, d0
    d8c0:	cmp	r5, #70	; 0x46
    d8c2:	mov	r4, r1
    d8c4:	strb	r2, [r3, #0]
    d8c6:	beq.n	d8d2 <__cvt+0x38>
    d8c8:	cmp	r5, #69	; 0x45
    d8ca:	bne.n	d8ce <__cvt+0x34>
    d8cc:	adds	r4, #1
    d8ce:	movs	r1, #2
    d8d0:	b.n	d8d4 <__cvt+0x3a>
    d8d2:	movs	r1, #3
    d8d4:	add	r3, sp, #12
    d8d6:	str	r3, [sp, #4]
    d8d8:	add	r3, sp, #8
    d8da:	str	r3, [sp, #0]
    d8dc:	mov	r2, r4
    d8de:	mov	r3, r6
    d8e0:	vmov.f64	d0, d8
    d8e4:	bl	ecc0 <_dtoa_r>
    d8e8:	cmp	r5, #71	; 0x47
    d8ea:	bne.n	d8f0 <__cvt+0x56>
    d8ec:	lsls	r3, r7, #31
    d8ee:	bpl.n	d926 <__cvt+0x8c>
    d8f0:	cmp	r5, #70	; 0x46
    d8f2:	add.w	r2, r0, r4
    d8f6:	bne.n	d912 <__cvt+0x78>
    d8f8:	ldrb	r3, [r0, #0]
    d8fa:	cmp	r3, #48	; 0x30
    d8fc:	bne.n	d90e <__cvt+0x74>
    d8fe:	vcmp.f64	d8, #0.0
    d902:	vmrs	APSR_nzcv, fpscr
    d906:	itt	ne
    d908:	rsbne	r4, r4, #1
    d90c:	strne	r4, [r6, #0]
    d90e:	ldr	r3, [r6, #0]
    d910:	add	r2, r3
    d912:	vcmp.f64	d8, #0.0
    d916:	vmrs	APSR_nzcv, fpscr
    d91a:	it	eq
    d91c:	streq	r2, [sp, #12]
    d91e:	movs	r1, #48	; 0x30
    d920:	ldr	r3, [sp, #12]
    d922:	cmp	r3, r2
    d924:	bcc.n	d936 <__cvt+0x9c>
    d926:	ldr	r3, [sp, #12]
    d928:	ldr	r2, [sp, #56]	; 0x38
    d92a:	subs	r3, r3, r0
    d92c:	str	r3, [r2, #0]
    d92e:	add	sp, #20
    d930:	vpop	{d8}
    d934:	pop	{r4, r5, r6, r7, pc}
    d936:	adds	r4, r3, #1
    d938:	str	r4, [sp, #12]
    d93a:	strb	r1, [r3, #0]
    d93c:	b.n	d920 <__cvt+0x86>

0000d93e <__exponent>:
    d93e:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d940:	mov	r3, r0
    d942:	cmp	r1, #0
    d944:	it	lt
    d946:	neglt	r1, r1
    d948:	strb.w	r2, [r3], #2
    d94c:	ite	lt
    d94e:	movlt	r2, #45	; 0x2d
    d950:	movge	r2, #43	; 0x2b
    d952:	cmp	r1, #9
    d954:	strb	r2, [r0, #1]
    d956:	ble.n	d9ae <__exponent+0x70>
    d958:	add.w	r2, sp, #7
    d95c:	mov	r7, r2
    d95e:	movs	r6, #10
    d960:	mov	ip, r2
    d962:	sdiv	r5, r1, r6
    d966:	mls	r4, r6, r5, r1
    d96a:	adds	r4, #48	; 0x30
    d96c:	strb.w	r4, [ip, #-1]
    d970:	mov	r4, r1
    d972:	cmp	r4, #99	; 0x63
    d974:	add.w	r2, r2, #4294967295
    d978:	mov	r1, r5
    d97a:	bgt.n	d960 <__exponent+0x22>
    d97c:	adds	r1, #48	; 0x30
    d97e:	sub.w	r4, ip, #2
    d982:	strb.w	r1, [r2, #-1]
    d986:	adds	r1, r0, #1
    d988:	mov	r2, r4
    d98a:	cmp	r2, r7
    d98c:	bcc.n	d9a4 <__exponent+0x66>
    d98e:	add.w	r2, sp, #9
    d992:	sub.w	r2, r2, ip
    d996:	cmp	r4, r7
    d998:	it	hi
    d99a:	movhi	r2, #0
    d99c:	add	r3, r2
    d99e:	subs	r0, r3, r0
    d9a0:	add	sp, #12
    d9a2:	pop	{r4, r5, r6, r7, pc}
    d9a4:	ldrb.w	r5, [r2], #1
    d9a8:	strb.w	r5, [r1, #1]!
    d9ac:	b.n	d98a <__exponent+0x4c>
    d9ae:	movs	r3, #48	; 0x30
    d9b0:	adds	r1, #48	; 0x30
    d9b2:	strb	r3, [r0, #2]
    d9b4:	strb	r1, [r0, #3]
    d9b6:	adds	r3, r0, #4
    d9b8:	b.n	d99e <__exponent+0x60>
    d9ba:	movs	r0, r0
    d9bc:	movs	r0, r0
	...

0000d9c0 <_printf_float>:
    d9c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9c4:	sub	sp, #44	; 0x2c
    d9c6:	mov	r4, r1
    d9c8:	ldr.w	r8, [sp, #80]	; 0x50
    d9cc:	mov	r6, r2
    d9ce:	mov	r7, r3
    d9d0:	mov	r5, r0
    d9d2:	bl	e9b8 <_localeconv_r>
    d9d6:	ldr.w	fp, [r0]
    d9da:	mov	r0, fp
    d9dc:	bl	eb80 <strlen>
    d9e0:	movs	r3, #0
    d9e2:	str	r3, [sp, #32]
    d9e4:	ldr.w	r3, [r8]
    d9e8:	ldrb.w	r9, [r4, #24]
    d9ec:	ldr	r2, [r4, #0]
    d9ee:	adds	r3, #7
    d9f0:	bic.w	r3, r3, #7
    d9f4:	add.w	r1, r3, #8
    d9f8:	str.w	r1, [r8]
    d9fc:	vldr	d0, [r3]
    da00:	vldr	d6, [pc, #604]	; dc60 <_printf_float+0x2a0>
    da04:	vabs.f64	d7, d0
    da08:	vcmp.f64	d7, d6
    da0c:	vmrs	APSR_nzcv, fpscr
    da10:	vstr	d0, [r4, #72]	; 0x48
    da14:	mov	sl, r0
    da16:	ble.n	da62 <_printf_float+0xa2>
    da18:	vcmpe.f64	d0, #0.0
    da1c:	vmrs	APSR_nzcv, fpscr
    da20:	bpl.n	da28 <_printf_float+0x68>
    da22:	movs	r3, #45	; 0x2d
    da24:	strb.w	r3, [r4, #67]	; 0x43
    da28:	ldr	r1, [pc, #572]	; (dc68 <_printf_float+0x2a8>)
    da2a:	ldr	r3, [pc, #576]	; (dc6c <_printf_float+0x2ac>)
    da2c:	cmp.w	r9, #71	; 0x47
    da30:	ite	ls
    da32:	movls	r8, r1
    da34:	movhi	r8, r3
    da36:	movs	r3, #3
    da38:	str	r3, [r4, #16]
    da3a:	bic.w	r2, r2, #4
    da3e:	movs	r3, #0
    da40:	str	r2, [r4, #0]
    da42:	str	r3, [sp, #16]
    da44:	str	r7, [sp, #0]
    da46:	mov	r3, r6
    da48:	add	r2, sp, #36	; 0x24
    da4a:	mov	r1, r4
    da4c:	mov	r0, r5
    da4e:	bl	ddf4 <_printf_common>
    da52:	adds	r0, #1
    da54:	bne.w	db6c <_printf_float+0x1ac>
    da58:	mov.w	r0, #4294967295
    da5c:	add	sp, #44	; 0x2c
    da5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da62:	vcmp.f64	d0, d0
    da66:	vmrs	APSR_nzcv, fpscr
    da6a:	bvc.n	da80 <_printf_float+0xc0>
    da6c:	vmov	r3, s1
    da70:	cmp	r3, #0
    da72:	itt	lt
    da74:	movlt	r3, #45	; 0x2d
    da76:	strblt.w	r3, [r4, #67]	; 0x43
    da7a:	ldr	r1, [pc, #500]	; (dc70 <_printf_float+0x2b0>)
    da7c:	ldr	r3, [pc, #500]	; (dc74 <_printf_float+0x2b4>)
    da7e:	b.n	da2c <_printf_float+0x6c>
    da80:	ldr	r3, [r4, #4]
    da82:	and.w	r1, r9, #223	; 0xdf
    da86:	str	r1, [sp, #16]
    da88:	adds	r1, r3, #1
    da8a:	bne.n	db06 <_printf_float+0x146>
    da8c:	movs	r3, #6
    da8e:	str	r3, [r4, #4]
    da90:	movs	r3, #0
    da92:	str	r3, [sp, #12]
    da94:	add	r3, sp, #32
    da96:	strd	r9, r3, [sp, #4]
    da9a:	orr.w	r2, r2, #1024	; 0x400
    da9e:	add	r3, sp, #28
    daa0:	ldr	r1, [r4, #4]
    daa2:	str	r3, [sp, #0]
    daa4:	str	r2, [r4, #0]
    daa6:	add.w	r3, sp, #27
    daaa:	mov	r0, r5
    daac:	bl	d89a <__cvt>
    dab0:	ldr	r3, [sp, #16]
    dab2:	ldr	r1, [sp, #28]
    dab4:	cmp	r3, #71	; 0x47
    dab6:	mov	r8, r0
    dab8:	bne.n	dacc <_printf_float+0x10c>
    daba:	adds	r0, r1, #3
    dabc:	blt.n	dac4 <_printf_float+0x104>
    dabe:	ldr	r3, [r4, #4]
    dac0:	cmp	r1, r3
    dac2:	ble.n	db48 <_printf_float+0x188>
    dac4:	sub.w	r9, r9, #2
    dac8:	uxtb.w	r9, r9
    dacc:	cmp.w	r9, #101	; 0x65
    dad0:	bhi.n	db14 <_printf_float+0x154>
    dad2:	subs	r1, #1
    dad4:	mov	r2, r9
    dad6:	add.w	r0, r4, #80	; 0x50
    dada:	str	r1, [sp, #28]
    dadc:	bl	d93e <__exponent>
    dae0:	ldr	r2, [sp, #32]
    dae2:	str	r0, [sp, #16]
    dae4:	adds	r3, r2, r0
    dae6:	cmp	r2, #1
    dae8:	str	r3, [r4, #16]
    daea:	bgt.n	daf2 <_printf_float+0x132>
    daec:	ldr	r2, [r4, #0]
    daee:	lsls	r2, r2, #31
    daf0:	bpl.n	daf6 <_printf_float+0x136>
    daf2:	adds	r3, #1
    daf4:	str	r3, [r4, #16]
    daf6:	ldrb.w	r3, [sp, #27]
    dafa:	cmp	r3, #0
    dafc:	beq.n	da44 <_printf_float+0x84>
    dafe:	movs	r3, #45	; 0x2d
    db00:	strb.w	r3, [r4, #67]	; 0x43
    db04:	b.n	da44 <_printf_float+0x84>
    db06:	ldr	r1, [sp, #16]
    db08:	cmp	r1, #71	; 0x47
    db0a:	bne.n	da90 <_printf_float+0xd0>
    db0c:	cmp	r3, #0
    db0e:	bne.n	da90 <_printf_float+0xd0>
    db10:	movs	r3, #1
    db12:	b.n	da8e <_printf_float+0xce>
    db14:	cmp.w	r9, #102	; 0x66
    db18:	bne.n	db4c <_printf_float+0x18c>
    db1a:	cmp	r1, #0
    db1c:	ldr	r3, [r4, #4]
    db1e:	ble.n	db38 <_printf_float+0x178>
    db20:	str	r1, [r4, #16]
    db22:	cbnz	r3, db2a <_printf_float+0x16a>
    db24:	ldr	r2, [r4, #0]
    db26:	lsls	r0, r2, #31
    db28:	bpl.n	db30 <_printf_float+0x170>
    db2a:	adds	r3, #1
    db2c:	add	r3, r1
    db2e:	str	r3, [r4, #16]
    db30:	movs	r3, #0
    db32:	str	r1, [r4, #88]	; 0x58
    db34:	str	r3, [sp, #16]
    db36:	b.n	daf6 <_printf_float+0x136>
    db38:	cbnz	r3, db40 <_printf_float+0x180>
    db3a:	ldr	r2, [r4, #0]
    db3c:	lsls	r2, r2, #31
    db3e:	bpl.n	db44 <_printf_float+0x184>
    db40:	adds	r3, #2
    db42:	b.n	db2e <_printf_float+0x16e>
    db44:	movs	r3, #1
    db46:	b.n	db2e <_printf_float+0x16e>
    db48:	mov.w	r9, #103	; 0x67
    db4c:	ldr	r3, [sp, #32]
    db4e:	cmp	r1, r3
    db50:	blt.n	db5e <_printf_float+0x19e>
    db52:	ldr	r3, [r4, #0]
    db54:	str	r1, [r4, #16]
    db56:	lsls	r0, r3, #31
    db58:	bpl.n	db30 <_printf_float+0x170>
    db5a:	adds	r3, r1, #1
    db5c:	b.n	db2e <_printf_float+0x16e>
    db5e:	cmp	r1, #0
    db60:	ite	le
    db62:	rsble	r2, r1, #2
    db66:	movgt	r2, #1
    db68:	add	r3, r2
    db6a:	b.n	db2e <_printf_float+0x16e>
    db6c:	ldr	r3, [r4, #0]
    db6e:	lsls	r2, r3, #21
    db70:	bmi.n	db82 <_printf_float+0x1c2>
    db72:	ldr	r3, [r4, #16]
    db74:	mov	r2, r8
    db76:	mov	r1, r6
    db78:	mov	r0, r5
    db7a:	blx	r7
    db7c:	adds	r0, #1
    db7e:	bne.n	dbd6 <_printf_float+0x216>
    db80:	b.n	da58 <_printf_float+0x98>
    db82:	cmp.w	r9, #101	; 0x65
    db86:	bls.w	dd4a <_printf_float+0x38a>
    db8a:	vldr	d7, [r4, #72]	; 0x48
    db8e:	vcmp.f64	d7, #0.0
    db92:	vmrs	APSR_nzcv, fpscr
    db96:	bne.n	dc00 <_printf_float+0x240>
    db98:	ldr	r2, [pc, #220]	; (dc78 <_printf_float+0x2b8>)
    db9a:	movs	r3, #1
    db9c:	mov	r1, r6
    db9e:	mov	r0, r5
    dba0:	blx	r7
    dba2:	adds	r0, #1
    dba4:	beq.w	da58 <_printf_float+0x98>
    dba8:	ldrd	r2, r3, [sp, #28]
    dbac:	cmp	r2, r3
    dbae:	blt.n	dbb6 <_printf_float+0x1f6>
    dbb0:	ldr	r3, [r4, #0]
    dbb2:	lsls	r0, r3, #31
    dbb4:	bpl.n	dbd6 <_printf_float+0x216>
    dbb6:	mov	r3, sl
    dbb8:	mov	r2, fp
    dbba:	mov	r1, r6
    dbbc:	mov	r0, r5
    dbbe:	blx	r7
    dbc0:	adds	r0, #1
    dbc2:	beq.w	da58 <_printf_float+0x98>
    dbc6:	mov.w	r8, #0
    dbca:	add.w	r9, r4, #26
    dbce:	ldr	r3, [sp, #32]
    dbd0:	subs	r3, #1
    dbd2:	cmp	r3, r8
    dbd4:	bgt.n	dbea <_printf_float+0x22a>
    dbd6:	ldr	r3, [r4, #0]
    dbd8:	lsls	r3, r3, #30
    dbda:	bmi.w	ddea <_printf_float+0x42a>
    dbde:	ldr	r0, [r4, #12]
    dbe0:	ldr	r3, [sp, #36]	; 0x24
    dbe2:	cmp	r0, r3
    dbe4:	it	lt
    dbe6:	movlt	r0, r3
    dbe8:	b.n	da5c <_printf_float+0x9c>
    dbea:	movs	r3, #1
    dbec:	mov	r2, r9
    dbee:	mov	r1, r6
    dbf0:	mov	r0, r5
    dbf2:	blx	r7
    dbf4:	adds	r0, #1
    dbf6:	beq.w	da58 <_printf_float+0x98>
    dbfa:	add.w	r8, r8, #1
    dbfe:	b.n	dbce <_printf_float+0x20e>
    dc00:	ldr	r3, [sp, #28]
    dc02:	cmp	r3, #0
    dc04:	bgt.n	dc7c <_printf_float+0x2bc>
    dc06:	ldr	r2, [pc, #112]	; (dc78 <_printf_float+0x2b8>)
    dc08:	movs	r3, #1
    dc0a:	mov	r1, r6
    dc0c:	mov	r0, r5
    dc0e:	blx	r7
    dc10:	adds	r0, #1
    dc12:	beq.w	da58 <_printf_float+0x98>
    dc16:	ldrd	r3, r2, [sp, #28]
    dc1a:	orrs	r3, r2
    dc1c:	bne.n	dc24 <_printf_float+0x264>
    dc1e:	ldr	r3, [r4, #0]
    dc20:	lsls	r1, r3, #31
    dc22:	bpl.n	dbd6 <_printf_float+0x216>
    dc24:	mov	r3, sl
    dc26:	mov	r2, fp
    dc28:	mov	r1, r6
    dc2a:	mov	r0, r5
    dc2c:	blx	r7
    dc2e:	adds	r0, #1
    dc30:	beq.w	da58 <_printf_float+0x98>
    dc34:	mov.w	r9, #0
    dc38:	add.w	sl, r4, #26
    dc3c:	ldr	r3, [sp, #28]
    dc3e:	negs	r3, r3
    dc40:	cmp	r3, r9
    dc42:	bgt.n	dc48 <_printf_float+0x288>
    dc44:	ldr	r3, [sp, #32]
    dc46:	b.n	db74 <_printf_float+0x1b4>
    dc48:	movs	r3, #1
    dc4a:	mov	r2, sl
    dc4c:	mov	r1, r6
    dc4e:	mov	r0, r5
    dc50:	blx	r7
    dc52:	adds	r0, #1
    dc54:	beq.w	da58 <_printf_float+0x98>
    dc58:	add.w	r9, r9, #1
    dc5c:	b.n	dc3c <_printf_float+0x27c>
    dc5e:	nop
    dc60:	.word	0xffffffff
    dc64:	.word	0x7fefffff
    dc68:	.word	0x2000139e
    dc6c:	.word	0x2000116a
    dc70:	.word	0x200013a2
    dc74:	.word	0x20001166
    dc78:	.word	0x2000114b
    dc7c:	ldr	r2, [sp, #32]
    dc7e:	ldr	r3, [r4, #88]	; 0x58
    dc80:	cmp	r2, r3
    dc82:	it	ge
    dc84:	movge	r2, r3
    dc86:	cmp	r2, #0
    dc88:	mov	r9, r2
    dc8a:	bgt.n	dcfe <_printf_float+0x33e>
    dc8c:	movs	r3, #0
    dc8e:	str	r3, [sp, #20]
    dc90:	bic.w	r9, r9, r9, asr #31
    dc94:	add.w	r2, r4, #26
    dc98:	ldr	r3, [r4, #88]	; 0x58
    dc9a:	ldr	r1, [sp, #20]
    dc9c:	str	r3, [sp, #16]
    dc9e:	sub.w	r3, r3, r9
    dca2:	cmp	r3, r1
    dca4:	bgt.n	dd0e <_printf_float+0x34e>
    dca6:	ldrd	r2, r3, [sp, #28]
    dcaa:	cmp	r2, r3
    dcac:	blt.n	dd28 <_printf_float+0x368>
    dcae:	ldr	r3, [r4, #0]
    dcb0:	lsls	r2, r3, #31
    dcb2:	bmi.n	dd28 <_printf_float+0x368>
    dcb4:	ldrd	r3, r2, [sp, #28]
    dcb8:	sub.w	r9, r2, r3
    dcbc:	ldr	r3, [sp, #16]
    dcbe:	subs	r2, r2, r3
    dcc0:	cmp	r9, r2
    dcc2:	it	ge
    dcc4:	movge	r9, r2
    dcc6:	cmp.w	r9, #0
    dcca:	bgt.n	dd38 <_printf_float+0x378>
    dccc:	mov.w	r8, #0
    dcd0:	bic.w	r9, r9, r9, asr #31
    dcd4:	add.w	sl, r4, #26
    dcd8:	ldrd	r2, r3, [sp, #28]
    dcdc:	subs	r3, r3, r2
    dcde:	sub.w	r3, r3, r9
    dce2:	cmp	r3, r8
    dce4:	ble.w	dbd6 <_printf_float+0x216>
    dce8:	movs	r3, #1
    dcea:	mov	r2, sl
    dcec:	mov	r1, r6
    dcee:	mov	r0, r5
    dcf0:	blx	r7
    dcf2:	adds	r0, #1
    dcf4:	beq.w	da58 <_printf_float+0x98>
    dcf8:	add.w	r8, r8, #1
    dcfc:	b.n	dcd8 <_printf_float+0x318>
    dcfe:	mov	r3, r2
    dd00:	mov	r1, r6
    dd02:	mov	r2, r8
    dd04:	mov	r0, r5
    dd06:	blx	r7
    dd08:	adds	r0, #1
    dd0a:	bne.n	dc8c <_printf_float+0x2cc>
    dd0c:	b.n	da58 <_printf_float+0x98>
    dd0e:	movs	r3, #1
    dd10:	mov	r1, r6
    dd12:	mov	r0, r5
    dd14:	str	r2, [sp, #16]
    dd16:	blx	r7
    dd18:	adds	r0, #1
    dd1a:	beq.w	da58 <_printf_float+0x98>
    dd1e:	ldr	r3, [sp, #20]
    dd20:	ldr	r2, [sp, #16]
    dd22:	adds	r3, #1
    dd24:	str	r3, [sp, #20]
    dd26:	b.n	dc98 <_printf_float+0x2d8>
    dd28:	mov	r3, sl
    dd2a:	mov	r2, fp
    dd2c:	mov	r1, r6
    dd2e:	mov	r0, r5
    dd30:	blx	r7
    dd32:	adds	r0, #1
    dd34:	bne.n	dcb4 <_printf_float+0x2f4>
    dd36:	b.n	da58 <_printf_float+0x98>
    dd38:	ldr	r2, [sp, #16]
    dd3a:	mov	r3, r9
    dd3c:	add	r2, r8
    dd3e:	mov	r1, r6
    dd40:	mov	r0, r5
    dd42:	blx	r7
    dd44:	adds	r0, #1
    dd46:	bne.n	dccc <_printf_float+0x30c>
    dd48:	b.n	da58 <_printf_float+0x98>
    dd4a:	ldr	r2, [sp, #32]
    dd4c:	cmp	r2, #1
    dd4e:	bgt.n	dd54 <_printf_float+0x394>
    dd50:	lsls	r3, r3, #31
    dd52:	bpl.n	ddc4 <_printf_float+0x404>
    dd54:	movs	r3, #1
    dd56:	mov	r2, r8
    dd58:	mov	r1, r6
    dd5a:	mov	r0, r5
    dd5c:	blx	r7
    dd5e:	adds	r0, #1
    dd60:	beq.w	da58 <_printf_float+0x98>
    dd64:	mov	r3, sl
    dd66:	mov	r2, fp
    dd68:	mov	r1, r6
    dd6a:	mov	r0, r5
    dd6c:	blx	r7
    dd6e:	adds	r0, #1
    dd70:	beq.w	da58 <_printf_float+0x98>
    dd74:	vldr	d7, [r4, #72]	; 0x48
    dd78:	vcmp.f64	d7, #0.0
    dd7c:	vmrs	APSR_nzcv, fpscr
    dd80:	ldr	r3, [sp, #32]
    dd82:	beq.n	ddba <_printf_float+0x3fa>
    dd84:	subs	r3, #1
    dd86:	add.w	r2, r8, #1
    dd8a:	mov	r1, r6
    dd8c:	mov	r0, r5
    dd8e:	blx	r7
    dd90:	adds	r0, #1
    dd92:	bne.n	ddb2 <_printf_float+0x3f2>
    dd94:	b.n	da58 <_printf_float+0x98>
    dd96:	movs	r3, #1
    dd98:	mov	r2, r9
    dd9a:	mov	r1, r6
    dd9c:	mov	r0, r5
    dd9e:	blx	r7
    dda0:	adds	r0, #1
    dda2:	beq.w	da58 <_printf_float+0x98>
    dda6:	add.w	r8, r8, #1
    ddaa:	ldr	r3, [sp, #32]
    ddac:	subs	r3, #1
    ddae:	cmp	r3, r8
    ddb0:	bgt.n	dd96 <_printf_float+0x3d6>
    ddb2:	ldr	r3, [sp, #16]
    ddb4:	add.w	r2, r4, #80	; 0x50
    ddb8:	b.n	db76 <_printf_float+0x1b6>
    ddba:	mov.w	r8, #0
    ddbe:	add.w	r9, r4, #26
    ddc2:	b.n	ddaa <_printf_float+0x3ea>
    ddc4:	movs	r3, #1
    ddc6:	mov	r2, r8
    ddc8:	b.n	dd8a <_printf_float+0x3ca>
    ddca:	movs	r3, #1
    ddcc:	mov	r2, r9
    ddce:	mov	r1, r6
    ddd0:	mov	r0, r5
    ddd2:	blx	r7
    ddd4:	adds	r0, #1
    ddd6:	beq.w	da58 <_printf_float+0x98>
    ddda:	add.w	r8, r8, #1
    ddde:	ldr	r3, [r4, #12]
    dde0:	ldr	r1, [sp, #36]	; 0x24
    dde2:	subs	r3, r3, r1
    dde4:	cmp	r3, r8
    dde6:	bgt.n	ddca <_printf_float+0x40a>
    dde8:	b.n	dbde <_printf_float+0x21e>
    ddea:	mov.w	r8, #0
    ddee:	add.w	r9, r4, #25
    ddf2:	b.n	ddde <_printf_float+0x41e>

0000ddf4 <_printf_common>:
    ddf4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ddf8:	mov	r6, r2
    ddfa:	mov	r9, r3
    ddfc:	ldr	r2, [r1, #8]
    ddfe:	ldr	r3, [r1, #16]
    de00:	ldr.w	r8, [sp, #32]
    de04:	cmp	r3, r2
    de06:	it	lt
    de08:	movlt	r3, r2
    de0a:	str	r3, [r6, #0]
    de0c:	ldrb.w	r2, [r1, #67]	; 0x43
    de10:	mov	r7, r0
    de12:	mov	r4, r1
    de14:	cbz	r2, de1a <_printf_common+0x26>
    de16:	adds	r3, #1
    de18:	str	r3, [r6, #0]
    de1a:	ldr	r3, [r4, #0]
    de1c:	lsls	r1, r3, #26
    de1e:	ittt	mi
    de20:	ldrmi	r3, [r6, #0]
    de22:	addmi	r3, #2
    de24:	strmi	r3, [r6, #0]
    de26:	ldr	r5, [r4, #0]
    de28:	ands.w	r5, r5, #6
    de2c:	bne.n	de3c <_printf_common+0x48>
    de2e:	add.w	sl, r4, #25
    de32:	ldr	r3, [r4, #12]
    de34:	ldr	r2, [r6, #0]
    de36:	subs	r3, r3, r2
    de38:	cmp	r3, r5
    de3a:	bgt.n	de8a <_printf_common+0x96>
    de3c:	ldrb.w	r2, [r4, #67]	; 0x43
    de40:	subs	r3, r2, #0
    de42:	ldr	r2, [r4, #0]
    de44:	it	ne
    de46:	movne	r3, #1
    de48:	lsls	r2, r2, #26
    de4a:	bmi.n	dea4 <_printf_common+0xb0>
    de4c:	add.w	r2, r4, #67	; 0x43
    de50:	mov	r1, r9
    de52:	mov	r0, r7
    de54:	blx	r8
    de56:	adds	r0, #1
    de58:	beq.n	de98 <_printf_common+0xa4>
    de5a:	ldr	r3, [r4, #0]
    de5c:	ldr	r2, [r4, #16]
    de5e:	and.w	r3, r3, #6
    de62:	cmp	r3, #4
    de64:	ittt	eq
    de66:	ldreq	r5, [r4, #12]
    de68:	ldreq	r3, [r6, #0]
    de6a:	subeq	r5, r5, r3
    de6c:	ldr	r3, [r4, #8]
    de6e:	ite	eq
    de70:	biceq.w	r5, r5, r5, asr #31
    de74:	movne	r5, #0
    de76:	cmp	r3, r2
    de78:	itt	gt
    de7a:	subgt	r3, r3, r2
    de7c:	addgt	r5, r5, r3
    de7e:	movs	r6, #0
    de80:	adds	r4, #26
    de82:	cmp	r5, r6
    de84:	bne.n	debc <_printf_common+0xc8>
    de86:	movs	r0, #0
    de88:	b.n	de9c <_printf_common+0xa8>
    de8a:	movs	r3, #1
    de8c:	mov	r2, sl
    de8e:	mov	r1, r9
    de90:	mov	r0, r7
    de92:	blx	r8
    de94:	adds	r0, #1
    de96:	bne.n	dea0 <_printf_common+0xac>
    de98:	mov.w	r0, #4294967295
    de9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dea0:	adds	r5, #1
    dea2:	b.n	de32 <_printf_common+0x3e>
    dea4:	adds	r1, r4, r3
    dea6:	adds	r2, r3, #1
    dea8:	movs	r0, #48	; 0x30
    deaa:	strb.w	r0, [r1, #67]	; 0x43
    deae:	add	r2, r4
    deb0:	ldrb.w	r1, [r4, #69]	; 0x45
    deb4:	strb.w	r1, [r2, #67]	; 0x43
    deb8:	adds	r3, #2
    deba:	b.n	de4c <_printf_common+0x58>
    debc:	movs	r3, #1
    debe:	mov	r2, r4
    dec0:	mov	r1, r9
    dec2:	mov	r0, r7
    dec4:	blx	r8
    dec6:	adds	r0, #1
    dec8:	beq.n	de98 <_printf_common+0xa4>
    deca:	adds	r6, #1
    decc:	b.n	de82 <_printf_common+0x8e>
	...

0000ded0 <_printf_i>:
    ded0:	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ded4:	ldrb	r7, [r1, #24]
    ded6:	ldr	r5, [sp, #48]	; 0x30
    ded8:	cmp	r7, #120	; 0x78
    deda:	mov	r9, r2
    dedc:	mov	r8, r0
    dede:	mov	r4, r1
    dee0:	mov	sl, r3
    dee2:	add.w	r2, r1, #67	; 0x43
    dee6:	bhi.n	def8 <_printf_i+0x28>
    dee8:	cmp	r7, #98	; 0x62
    deea:	bhi.n	df02 <_printf_i+0x32>
    deec:	cmp	r7, #0
    deee:	beq.w	e09a <_printf_i+0x1ca>
    def2:	cmp	r7, #88	; 0x58
    def4:	beq.w	e078 <_printf_i+0x1a8>
    def8:	add.w	r5, r4, #66	; 0x42
    defc:	strb.w	r7, [r4, #66]	; 0x42
    df00:	b.n	df78 <_printf_i+0xa8>
    df02:	sub.w	r3, r7, #99	; 0x63
    df06:	cmp	r3, #21
    df08:	bhi.n	def8 <_printf_i+0x28>
    df0a:	add	r1, pc, #4	; (adr r1, df10 <_printf_i+0x40>)
    df0c:	ldr.w	pc, [r1, r3, lsl #2]
    df10:	.word	0x0000df69
    df14:	.word	0x0000df7d
    df18:	.word	0x0000def9
    df1c:	.word	0x0000def9
    df20:	.word	0x0000def9
    df24:	.word	0x0000def9
    df28:	.word	0x0000df7d
    df2c:	.word	0x0000def9
    df30:	.word	0x0000def9
    df34:	.word	0x0000def9
    df38:	.word	0x0000def9
    df3c:	.word	0x0000e081
    df40:	.word	0x0000dfa9
    df44:	.word	0x0000e03b
    df48:	.word	0x0000def9
    df4c:	.word	0x0000def9
    df50:	.word	0x0000e0a3
    df54:	.word	0x0000def9
    df58:	.word	0x0000dfa9
    df5c:	.word	0x0000def9
    df60:	.word	0x0000def9
    df64:	.word	0x0000e043
    df68:	ldr	r3, [r5, #0]
    df6a:	adds	r2, r3, #4
    df6c:	ldr	r3, [r3, #0]
    df6e:	str	r2, [r5, #0]
    df70:	add.w	r5, r4, #66	; 0x42
    df74:	strb.w	r3, [r4, #66]	; 0x42
    df78:	movs	r3, #1
    df7a:	b.n	e0bc <_printf_i+0x1ec>
    df7c:	ldr	r0, [r4, #0]
    df7e:	ldr	r3, [r5, #0]
    df80:	lsls	r7, r0, #24
    df82:	add.w	r1, r3, #4
    df86:	str	r1, [r5, #0]
    df88:	bpl.n	df8e <_printf_i+0xbe>
    df8a:	ldr	r6, [r3, #0]
    df8c:	b.n	df96 <_printf_i+0xc6>
    df8e:	lsls	r6, r0, #25
    df90:	bpl.n	df8a <_printf_i+0xba>
    df92:	ldrsh.w	r6, [r3]
    df96:	cmp	r6, #0
    df98:	bge.n	dfa2 <_printf_i+0xd2>
    df9a:	movs	r3, #45	; 0x2d
    df9c:	negs	r6, r6
    df9e:	strb.w	r3, [r4, #67]	; 0x43
    dfa2:	ldr	r0, [pc, #360]	; (e10c <_printf_i+0x23c>)
    dfa4:	movs	r3, #10
    dfa6:	b.n	dfce <_printf_i+0xfe>
    dfa8:	ldr	r3, [r5, #0]
    dfaa:	ldr	r0, [r4, #0]
    dfac:	adds	r1, r3, #4
    dfae:	str	r1, [r5, #0]
    dfb0:	lsls	r5, r0, #24
    dfb2:	bpl.n	dfb8 <_printf_i+0xe8>
    dfb4:	ldr	r6, [r3, #0]
    dfb6:	b.n	dfbe <_printf_i+0xee>
    dfb8:	lsls	r1, r0, #25
    dfba:	bpl.n	dfb4 <_printf_i+0xe4>
    dfbc:	ldrh	r6, [r3, #0]
    dfbe:	ldr	r0, [pc, #332]	; (e10c <_printf_i+0x23c>)
    dfc0:	cmp	r7, #111	; 0x6f
    dfc2:	ite	eq
    dfc4:	moveq	r3, #8
    dfc6:	movne	r3, #10
    dfc8:	movs	r1, #0
    dfca:	strb.w	r1, [r4, #67]	; 0x43
    dfce:	ldr	r5, [r4, #4]
    dfd0:	str	r5, [r4, #8]
    dfd2:	cmp	r5, #0
    dfd4:	ittt	ge
    dfd6:	ldrge	r1, [r4, #0]
    dfd8:	bicge.w	r1, r1, #4
    dfdc:	strge	r1, [r4, #0]
    dfde:	cbnz	r6, dfe4 <_printf_i+0x114>
    dfe0:	cmp	r5, #0
    dfe2:	beq.n	e07c <_printf_i+0x1ac>
    dfe4:	mov	r5, r2
    dfe6:	udiv	r1, r6, r3
    dfea:	mls	r7, r3, r1, r6
    dfee:	ldrb	r7, [r0, r7]
    dff0:	strb.w	r7, [r5, #-1]!
    dff4:	mov	r7, r6
    dff6:	cmp	r3, r7
    dff8:	mov	r6, r1
    dffa:	bls.n	dfe6 <_printf_i+0x116>
    dffc:	cmp	r3, #8
    dffe:	bne.n	e018 <_printf_i+0x148>
    e000:	ldr	r3, [r4, #0]
    e002:	lsls	r6, r3, #31
    e004:	bpl.n	e018 <_printf_i+0x148>
    e006:	ldr	r3, [r4, #16]
    e008:	ldr	r1, [r4, #4]
    e00a:	cmp	r1, r3
    e00c:	ittt	le
    e00e:	movle	r3, #48	; 0x30
    e010:	strble.w	r3, [r5, #-1]
    e014:	addle.w	r5, r5, #4294967295
    e018:	subs	r2, r2, r5
    e01a:	str	r2, [r4, #16]
    e01c:	str.w	sl, [sp]
    e020:	mov	r3, r9
    e022:	add	r2, sp, #12
    e024:	mov	r1, r4
    e026:	mov	r0, r8
    e028:	bl	ddf4 <_printf_common>
    e02c:	adds	r0, #1
    e02e:	bne.n	e0c6 <_printf_i+0x1f6>
    e030:	mov.w	r0, #4294967295
    e034:	add	sp, #16
    e036:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e03a:	ldr	r3, [r4, #0]
    e03c:	orr.w	r3, r3, #32
    e040:	str	r3, [r4, #0]
    e042:	ldr	r0, [pc, #204]	; (e110 <_printf_i+0x240>)
    e044:	movs	r7, #120	; 0x78
    e046:	strb.w	r7, [r4, #69]	; 0x45
    e04a:	ldr	r3, [r4, #0]
    e04c:	ldr	r1, [r5, #0]
    e04e:	lsls	r7, r3, #24
    e050:	ldr.w	r6, [r1], #4
    e054:	bmi.n	e05c <_printf_i+0x18c>
    e056:	lsls	r7, r3, #25
    e058:	it	mi
    e05a:	uxthmi	r6, r6
    e05c:	lsls	r7, r3, #31
    e05e:	it	mi
    e060:	orrmi.w	r3, r3, #32
    e064:	str	r1, [r5, #0]
    e066:	it	mi
    e068:	strmi	r3, [r4, #0]
    e06a:	cbnz	r6, e074 <_printf_i+0x1a4>
    e06c:	ldr	r3, [r4, #0]
    e06e:	bic.w	r3, r3, #32
    e072:	str	r3, [r4, #0]
    e074:	movs	r3, #16
    e076:	b.n	dfc8 <_printf_i+0xf8>
    e078:	ldr	r0, [pc, #144]	; (e10c <_printf_i+0x23c>)
    e07a:	b.n	e046 <_printf_i+0x176>
    e07c:	mov	r5, r2
    e07e:	b.n	dffc <_printf_i+0x12c>
    e080:	ldr	r3, [r5, #0]
    e082:	ldr	r6, [r4, #0]
    e084:	ldr	r1, [r4, #20]
    e086:	adds	r0, r3, #4
    e088:	str	r0, [r5, #0]
    e08a:	lsls	r5, r6, #24
    e08c:	ldr	r3, [r3, #0]
    e08e:	bpl.n	e094 <_printf_i+0x1c4>
    e090:	str	r1, [r3, #0]
    e092:	b.n	e09a <_printf_i+0x1ca>
    e094:	lsls	r0, r6, #25
    e096:	bpl.n	e090 <_printf_i+0x1c0>
    e098:	strh	r1, [r3, #0]
    e09a:	movs	r3, #0
    e09c:	str	r3, [r4, #16]
    e09e:	mov	r5, r2
    e0a0:	b.n	e01c <_printf_i+0x14c>
    e0a2:	ldr	r3, [r5, #0]
    e0a4:	adds	r2, r3, #4
    e0a6:	str	r2, [r5, #0]
    e0a8:	ldr	r5, [r3, #0]
    e0aa:	ldr	r2, [r4, #4]
    e0ac:	movs	r1, #0
    e0ae:	mov	r0, r5
    e0b0:	bl	eae0 <memchr>
    e0b4:	cbz	r0, e0ba <_printf_i+0x1ea>
    e0b6:	subs	r0, r0, r5
    e0b8:	str	r0, [r4, #4]
    e0ba:	ldr	r3, [r4, #4]
    e0bc:	str	r3, [r4, #16]
    e0be:	movs	r3, #0
    e0c0:	strb.w	r3, [r4, #67]	; 0x43
    e0c4:	b.n	e01c <_printf_i+0x14c>
    e0c6:	ldr	r3, [r4, #16]
    e0c8:	mov	r2, r5
    e0ca:	mov	r1, r9
    e0cc:	mov	r0, r8
    e0ce:	blx	sl
    e0d0:	adds	r0, #1
    e0d2:	beq.n	e030 <_printf_i+0x160>
    e0d4:	ldr	r3, [r4, #0]
    e0d6:	lsls	r3, r3, #30
    e0d8:	bmi.n	e102 <_printf_i+0x232>
    e0da:	ldr	r0, [r4, #12]
    e0dc:	ldr	r3, [sp, #12]
    e0de:	cmp	r0, r3
    e0e0:	it	lt
    e0e2:	movlt	r0, r3
    e0e4:	b.n	e034 <_printf_i+0x164>
    e0e6:	movs	r3, #1
    e0e8:	mov	r2, r6
    e0ea:	mov	r1, r9
    e0ec:	mov	r0, r8
    e0ee:	blx	sl
    e0f0:	adds	r0, #1
    e0f2:	beq.n	e030 <_printf_i+0x160>
    e0f4:	adds	r5, #1
    e0f6:	ldr	r3, [r4, #12]
    e0f8:	ldr	r1, [sp, #12]
    e0fa:	subs	r3, r3, r1
    e0fc:	cmp	r3, r5
    e0fe:	bgt.n	e0e6 <_printf_i+0x216>
    e100:	b.n	e0da <_printf_i+0x20a>
    e102:	movs	r5, #0
    e104:	add.w	r6, r4, #25
    e108:	b.n	e0f6 <_printf_i+0x226>
    e10a:	nop
    e10c:	.word	0x200013a6
    e110:	.word	0x200013b7

0000e114 <_scanf_float>:
    e114:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e118:	sub	sp, #28
    e11a:	mov	r7, r2
    e11c:	str	r3, [sp, #12]
    e11e:	ldr	r3, [r1, #8]
    e120:	subs	r2, r3, #1
    e122:	cmp.w	r2, #348	; 0x15c
    e126:	ittte	hi
    e128:	mvnhi.w	r5, #348	; 0x15c
    e12c:	addhi	r3, r3, r5
    e12e:	strhi	r3, [sp, #8]
    e130:	movls	r3, #0
    e132:	itte	hi
    e134:	movwhi	r3, #349	; 0x15d
    e138:	strhi	r3, [r1, #8]
    e13a:	strls	r3, [sp, #8]
    e13c:	ldr	r3, [r1, #0]
    e13e:	mov	fp, r1
    e140:	movs	r5, #0
    e142:	orr.w	r3, r3, #1920	; 0x780
    e146:	str.w	r3, [fp], #28
    e14a:	strd	r5, r5, [sp, #16]
    e14e:	mov	r8, r0
    e150:	mov	r4, r1
    e152:	mov	r6, fp
    e154:	mov	sl, r5
    e156:	mov	r9, r5
    e158:	str	r5, [sp, #4]
    e15a:	ldr	r2, [r4, #8]
    e15c:	cbz	r2, e174 <_scanf_float+0x60>
    e15e:	ldr	r3, [r7, #0]
    e160:	ldrb	r3, [r3, #0]
    e162:	cmp	r3, #78	; 0x4e
    e164:	bhi.n	e230 <_scanf_float+0x11c>
    e166:	cmp	r3, #64	; 0x40
    e168:	bhi.n	e1e4 <_scanf_float+0xd0>
    e16a:	sub.w	r1, r3, #43	; 0x2b
    e16e:	uxtb	r0, r1
    e170:	cmp	r0, #14
    e172:	bls.n	e1ea <_scanf_float+0xd6>
    e174:	cmp.w	r9, #0
    e178:	beq.n	e182 <_scanf_float+0x6e>
    e17a:	ldr	r3, [r4, #0]
    e17c:	bic.w	r3, r3, #256	; 0x100
    e180:	str	r3, [r4, #0]
    e182:	add.w	sl, sl, #4294967295
    e186:	cmp.w	sl, #1
    e18a:	bhi.w	e3b4 <_scanf_float+0x2a0>
    e18e:	cmp	r6, fp
    e190:	bhi.w	e39e <_scanf_float+0x28a>
    e194:	movs	r5, #1
    e196:	mov	r0, r5
    e198:	add	sp, #28
    e19a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e19e:	sub.w	r2, r3, #97	; 0x61
    e1a2:	cmp	r2, #13
    e1a4:	bhi.n	e174 <_scanf_float+0x60>
    e1a6:	add	r1, pc, #4	; (adr r1, e1ac <_scanf_float+0x98>)
    e1a8:	ldr.w	pc, [r1, r2, lsl #2]
    e1ac:	.word	0x0000e2eb
    e1b0:	.word	0x0000e175
    e1b4:	.word	0x0000e175
    e1b8:	.word	0x0000e175
    e1bc:	.word	0x0000e34b
    e1c0:	.word	0x0000e323
    e1c4:	.word	0x0000e175
    e1c8:	.word	0x0000e175
    e1cc:	.word	0x0000e2f9
    e1d0:	.word	0x0000e175
    e1d4:	.word	0x0000e175
    e1d8:	.word	0x0000e175
    e1dc:	.word	0x0000e175
    e1e0:	.word	0x0000e2b1
    e1e4:	sub.w	r2, r3, #65	; 0x41
    e1e8:	b.n	e1a2 <_scanf_float+0x8e>
    e1ea:	cmp	r1, #14
    e1ec:	bhi.n	e174 <_scanf_float+0x60>
    e1ee:	add	r0, pc, #4	; (adr r0, e1f4 <_scanf_float+0xe0>)
    e1f0:	ldr.w	pc, [r0, r1, lsl #2]
    e1f4:	.word	0x0000e2a3
    e1f8:	.word	0x0000e175
    e1fc:	.word	0x0000e2a3
    e200:	.word	0x0000e337
    e204:	.word	0x0000e175
    e208:	.word	0x0000e251
    e20c:	.word	0x0000e28d
    e210:	.word	0x0000e28d
    e214:	.word	0x0000e28d
    e218:	.word	0x0000e28d
    e21c:	.word	0x0000e28d
    e220:	.word	0x0000e28d
    e224:	.word	0x0000e28d
    e228:	.word	0x0000e28d
    e22c:	.word	0x0000e28d
    e230:	cmp	r3, #110	; 0x6e
    e232:	bhi.n	e248 <_scanf_float+0x134>
    e234:	cmp	r3, #96	; 0x60
    e236:	bhi.n	e19e <_scanf_float+0x8a>
    e238:	cmp	r3, #84	; 0x54
    e23a:	beq.n	e32c <_scanf_float+0x218>
    e23c:	cmp	r3, #89	; 0x59
    e23e:	bne.n	e174 <_scanf_float+0x60>
    e240:	cmp	r5, #7
    e242:	bne.n	e174 <_scanf_float+0x60>
    e244:	movs	r5, #8
    e246:	b.n	e29c <_scanf_float+0x188>
    e248:	cmp	r3, #116	; 0x74
    e24a:	beq.n	e32c <_scanf_float+0x218>
    e24c:	cmp	r3, #121	; 0x79
    e24e:	b.n	e23e <_scanf_float+0x12a>
    e250:	ldr	r1, [r4, #0]
    e252:	lsls	r0, r1, #23
    e254:	bpl.n	e28c <_scanf_float+0x178>
    e256:	ldr	r3, [sp, #8]
    e258:	bic.w	r1, r1, #128	; 0x80
    e25c:	str	r1, [r4, #0]
    e25e:	add.w	r9, r9, #1
    e262:	cbz	r3, e26c <_scanf_float+0x158>
    e264:	subs	r3, #1
    e266:	adds	r2, #1
    e268:	str	r3, [sp, #8]
    e26a:	str	r2, [r4, #8]
    e26c:	ldr	r3, [r4, #8]
    e26e:	subs	r3, #1
    e270:	str	r3, [r4, #8]
    e272:	ldr	r3, [r4, #16]
    e274:	adds	r3, #1
    e276:	str	r3, [r4, #16]
    e278:	ldr	r3, [r7, #4]
    e27a:	subs	r3, #1
    e27c:	cmp	r3, #0
    e27e:	str	r3, [r7, #4]
    e280:	ble.w	e38c <_scanf_float+0x278>
    e284:	ldr	r3, [r7, #0]
    e286:	adds	r3, #1
    e288:	str	r3, [r7, #0]
    e28a:	b.n	e15a <_scanf_float+0x46>
    e28c:	cmn.w	sl, r5
    e290:	bne.w	e174 <_scanf_float+0x60>
    e294:	ldr	r2, [r4, #0]
    e296:	bic.w	r2, r2, #384	; 0x180
    e29a:	str	r2, [r4, #0]
    e29c:	strb.w	r3, [r6], #1
    e2a0:	b.n	e26c <_scanf_float+0x158>
    e2a2:	ldr	r2, [r4, #0]
    e2a4:	lsls	r0, r2, #24
    e2a6:	bpl.w	e174 <_scanf_float+0x60>
    e2aa:	bic.w	r2, r2, #128	; 0x80
    e2ae:	b.n	e29a <_scanf_float+0x186>
    e2b0:	cmp.w	sl, #0
    e2b4:	bne.n	e2d4 <_scanf_float+0x1c0>
    e2b6:	cmp.w	r9, #0
    e2ba:	bne.n	e2da <_scanf_float+0x1c6>
    e2bc:	ldr	r2, [r4, #0]
    e2be:	and.w	r1, r2, #1792	; 0x700
    e2c2:	cmp.w	r1, #1792	; 0x700
    e2c6:	bne.n	e2da <_scanf_float+0x1c6>
    e2c8:	bic.w	r2, r2, #1920	; 0x780
    e2cc:	str	r2, [r4, #0]
    e2ce:	mov.w	sl, #1
    e2d2:	b.n	e29c <_scanf_float+0x188>
    e2d4:	cmp.w	sl, #2
    e2d8:	beq.n	e386 <_scanf_float+0x272>
    e2da:	cmp	r5, #1
    e2dc:	beq.n	e2e4 <_scanf_float+0x1d0>
    e2de:	cmp	r5, #4
    e2e0:	bne.w	e174 <_scanf_float+0x60>
    e2e4:	adds	r5, #1
    e2e6:	uxtb	r5, r5
    e2e8:	b.n	e29c <_scanf_float+0x188>
    e2ea:	cmp.w	sl, #1
    e2ee:	bne.w	e174 <_scanf_float+0x60>
    e2f2:	mov.w	sl, #2
    e2f6:	b.n	e29c <_scanf_float+0x188>
    e2f8:	cbnz	r5, e31a <_scanf_float+0x206>
    e2fa:	cmp.w	r9, #0
    e2fe:	bne.w	e17a <_scanf_float+0x66>
    e302:	ldr	r2, [r4, #0]
    e304:	and.w	r1, r2, #1792	; 0x700
    e308:	cmp.w	r1, #1792	; 0x700
    e30c:	bne.w	e182 <_scanf_float+0x6e>
    e310:	bic.w	r2, r2, #1920	; 0x780
    e314:	str	r2, [r4, #0]
    e316:	movs	r5, #1
    e318:	b.n	e29c <_scanf_float+0x188>
    e31a:	cmp	r5, #3
    e31c:	beq.n	e2e4 <_scanf_float+0x1d0>
    e31e:	cmp	r5, #5
    e320:	b.n	e2e0 <_scanf_float+0x1cc>
    e322:	cmp	r5, #2
    e324:	bne.w	e174 <_scanf_float+0x60>
    e328:	movs	r5, #3
    e32a:	b.n	e29c <_scanf_float+0x188>
    e32c:	cmp	r5, #6
    e32e:	bne.w	e174 <_scanf_float+0x60>
    e332:	movs	r5, #7
    e334:	b.n	e29c <_scanf_float+0x188>
    e336:	ldr	r2, [r4, #0]
    e338:	lsls	r1, r2, #22
    e33a:	bpl.w	e174 <_scanf_float+0x60>
    e33e:	bic.w	r2, r2, #640	; 0x280
    e342:	str	r2, [r4, #0]
    e344:	str.w	r9, [sp, #4]
    e348:	b.n	e29c <_scanf_float+0x188>
    e34a:	ldr	r2, [r4, #0]
    e34c:	and.w	r1, r2, #1280	; 0x500
    e350:	cmp.w	r1, #1024	; 0x400
    e354:	beq.n	e364 <_scanf_float+0x250>
    e356:	lsls	r0, r2, #21
    e358:	bpl.w	e174 <_scanf_float+0x60>
    e35c:	cmp.w	r9, #0
    e360:	beq.w	e182 <_scanf_float+0x6e>
    e364:	lsls	r1, r2, #22
    e366:	it	pl
    e368:	ldrpl	r1, [sp, #4]
    e36a:	bic.w	r2, r2, #1920	; 0x780
    e36e:	it	pl
    e370:	subpl.w	r1, r9, r1
    e374:	orr.w	r2, r2, #384	; 0x180
    e378:	it	pl
    e37a:	strdpl	r1, r6, [sp, #16]
    e37e:	str	r2, [r4, #0]
    e380:	mov.w	r9, #0
    e384:	b.n	e29c <_scanf_float+0x188>
    e386:	mov.w	sl, #3
    e38a:	b.n	e29c <_scanf_float+0x188>
    e38c:	ldr.w	r3, [r4, #384]	; 0x180
    e390:	mov	r1, r7
    e392:	mov	r0, r8
    e394:	blx	r3
    e396:	cmp	r0, #0
    e398:	beq.w	e15a <_scanf_float+0x46>
    e39c:	b.n	e174 <_scanf_float+0x60>
    e39e:	ldr.w	r3, [r4, #380]	; 0x17c
    e3a2:	ldrb.w	r1, [r6, #-1]!
    e3a6:	mov	r2, r7
    e3a8:	mov	r0, r8
    e3aa:	blx	r3
    e3ac:	ldr	r3, [r4, #16]
    e3ae:	subs	r3, #1
    e3b0:	str	r3, [r4, #16]
    e3b2:	b.n	e18e <_scanf_float+0x7a>
    e3b4:	subs	r3, r5, #1
    e3b6:	cmp	r3, #6
    e3b8:	bhi.n	e406 <_scanf_float+0x2f2>
    e3ba:	cmp	r5, #2
    e3bc:	bhi.n	e42c <_scanf_float+0x318>
    e3be:	cmp	r6, fp
    e3c0:	bls.w	e194 <_scanf_float+0x80>
    e3c4:	ldr.w	r3, [r4, #380]	; 0x17c
    e3c8:	ldrb.w	r1, [r6, #-1]!
    e3cc:	mov	r2, r7
    e3ce:	mov	r0, r8
    e3d0:	blx	r3
    e3d2:	ldr	r3, [r4, #16]
    e3d4:	subs	r3, #1
    e3d6:	str	r3, [r4, #16]
    e3d8:	b.n	e3be <_scanf_float+0x2aa>
    e3da:	ldr	r0, [sp, #8]
    e3dc:	ldr.w	r3, [r4, #380]	; 0x17c
    e3e0:	ldrb.w	r1, [r0, #-1]!
    e3e4:	str	r0, [sp, #8]
    e3e6:	mov	r2, r7
    e3e8:	mov	r0, r8
    e3ea:	blx	r3
    e3ec:	ldr	r3, [r4, #16]
    e3ee:	subs	r3, #1
    e3f0:	str	r3, [r4, #16]
    e3f2:	add.w	sl, sl, #4294967295
    e3f6:	uxtb.w	sl, sl
    e3fa:	cmp.w	sl, #2
    e3fe:	bne.n	e3da <_scanf_float+0x2c6>
    e400:	subs	r5, #3
    e402:	uxtb	r5, r5
    e404:	subs	r6, r6, r5
    e406:	ldr	r3, [r4, #0]
    e408:	lsls	r2, r3, #23
    e40a:	bpl.n	e46c <_scanf_float+0x358>
    e40c:	lsls	r3, r3, #21
    e40e:	bpl.n	e432 <_scanf_float+0x31e>
    e410:	cmp	r6, fp
    e412:	bls.w	e194 <_scanf_float+0x80>
    e416:	ldr.w	r3, [r4, #380]	; 0x17c
    e41a:	ldrb.w	r1, [r6, #-1]!
    e41e:	mov	r2, r7
    e420:	mov	r0, r8
    e422:	blx	r3
    e424:	ldr	r3, [r4, #16]
    e426:	subs	r3, #1
    e428:	str	r3, [r4, #16]
    e42a:	b.n	e410 <_scanf_float+0x2fc>
    e42c:	mov	sl, r5
    e42e:	str	r6, [sp, #8]
    e430:	b.n	e3f2 <_scanf_float+0x2de>
    e432:	ldrb.w	r1, [r6, #-1]
    e436:	ldr	r3, [r4, #16]
    e438:	cmp	r1, #101	; 0x65
    e43a:	add.w	r3, r3, #4294967295
    e43e:	add.w	r5, r6, #4294967295
    e442:	str	r3, [r4, #16]
    e444:	beq.n	e460 <_scanf_float+0x34c>
    e446:	cmp	r1, #69	; 0x45
    e448:	beq.n	e460 <_scanf_float+0x34c>
    e44a:	ldr.w	r3, [r4, #380]	; 0x17c
    e44e:	mov	r2, r7
    e450:	mov	r0, r8
    e452:	blx	r3
    e454:	ldr	r3, [r4, #16]
    e456:	ldrb.w	r1, [r6, #-2]
    e45a:	subs	r3, #1
    e45c:	subs	r5, r6, #2
    e45e:	str	r3, [r4, #16]
    e460:	ldr.w	r3, [r4, #380]	; 0x17c
    e464:	mov	r2, r7
    e466:	mov	r0, r8
    e468:	blx	r3
    e46a:	mov	r6, r5
    e46c:	ldr	r5, [r4, #0]
    e46e:	ands.w	r5, r5, #16
    e472:	bne.n	e510 <_scanf_float+0x3fc>
    e474:	strb	r5, [r6, #0]
    e476:	ldr	r3, [r4, #0]
    e478:	and.w	r3, r3, #1536	; 0x600
    e47c:	cmp.w	r3, #1024	; 0x400
    e480:	bne.n	e4b8 <_scanf_float+0x3a4>
    e482:	ldr	r3, [sp, #4]
    e484:	cmp	r3, r9
    e486:	sub.w	r2, r3, r9
    e48a:	bne.n	e4d2 <_scanf_float+0x3be>
    e48c:	movs	r2, #0
    e48e:	mov	r1, fp
    e490:	mov	r0, r8
    e492:	bl	d75c <_strtod_r>
    e496:	ldr	r3, [sp, #12]
    e498:	ldr	r1, [r4, #0]
    e49a:	ldr	r3, [r3, #0]
    e49c:	tst.w	r1, #2
    e4a0:	add.w	r2, r3, #4
    e4a4:	beq.n	e4e8 <_scanf_float+0x3d4>
    e4a6:	ldr	r1, [sp, #12]
    e4a8:	str	r2, [r1, #0]
    e4aa:	ldr	r3, [r3, #0]
    e4ac:	vstr	d0, [r3]
    e4b0:	ldr	r3, [r4, #12]
    e4b2:	adds	r3, #1
    e4b4:	str	r3, [r4, #12]
    e4b6:	b.n	e196 <_scanf_float+0x82>
    e4b8:	ldr	r3, [sp, #16]
    e4ba:	cmp	r3, #0
    e4bc:	beq.n	e48c <_scanf_float+0x378>
    e4be:	ldr	r1, [sp, #20]
    e4c0:	movs	r3, #10
    e4c2:	mov	r2, r5
    e4c4:	adds	r1, #1
    e4c6:	mov	r0, r8
    e4c8:	bl	d86c <_strtol_r>
    e4cc:	ldr	r3, [sp, #16]
    e4ce:	ldr	r6, [sp, #20]
    e4d0:	subs	r2, r0, r3
    e4d2:	addw	r3, r4, #367	; 0x16f
    e4d6:	cmp	r6, r3
    e4d8:	it	cs
    e4da:	addcs.w	r6, r4, #366	; 0x16e
    e4de:	ldr	r1, [pc, #52]	; (e514 <_scanf_float+0x400>)
    e4e0:	mov	r0, r6
    e4e2:	bl	e6e4 <siprintf>
    e4e6:	b.n	e48c <_scanf_float+0x378>
    e4e8:	tst.w	r1, #4
    e4ec:	ldr	r1, [sp, #12]
    e4ee:	str	r2, [r1, #0]
    e4f0:	bne.n	e4aa <_scanf_float+0x396>
    e4f2:	vcmp.f64	d0, d0
    e4f6:	vmrs	APSR_nzcv, fpscr
    e4fa:	ldr	r6, [r3, #0]
    e4fc:	bvc.n	e50a <_scanf_float+0x3f6>
    e4fe:	ldr	r0, [pc, #24]	; (e518 <_scanf_float+0x404>)
    e500:	bl	eba0 <nanf>
    e504:	vstr	s0, [r6]
    e508:	b.n	e4b0 <_scanf_float+0x39c>
    e50a:	vcvt.f32.f64	s0, d0
    e50e:	b.n	e504 <_scanf_float+0x3f0>
    e510:	movs	r5, #0
    e512:	b.n	e196 <_scanf_float+0x82>
    e514:	.word	0x200013c8
    e518:	.word	0x20000db7

0000e51c <std>:
    e51c:	movs	r3, #0
    e51e:	push	{r4, lr}
    e520:	mov	r4, r0
    e522:	strd	r3, r3, [r0]
    e526:	strd	r3, r3, [r0, #16]
    e52a:	str	r3, [r0, #8]
    e52c:	strh	r1, [r0, #12]
    e52e:	str	r3, [r0, #100]	; 0x64
    e530:	strh	r2, [r0, #14]
    e532:	str	r3, [r0, #24]
    e534:	mov	r1, r3
    e536:	movs	r2, #8
    e538:	adds	r0, #92	; 0x5c
    e53a:	bl	9fbc <memset>
    e53e:	ldr	r3, [pc, #20]	; (e554 <std+0x38>)
    e540:	str	r3, [r4, #36]	; 0x24
    e542:	ldr	r3, [pc, #20]	; (e558 <std+0x3c>)
    e544:	str	r3, [r4, #40]	; 0x28
    e546:	ldr	r3, [pc, #20]	; (e55c <std+0x40>)
    e548:	str	r3, [r4, #44]	; 0x2c
    e54a:	ldr	r3, [pc, #20]	; (e560 <std+0x44>)
    e54c:	str	r4, [r4, #32]
    e54e:	str	r3, [r4, #48]	; 0x30
    e550:	pop	{r4, pc}
    e552:	nop
    e554:	.word	0x0000e77d
    e558:	.word	0x0000e7a3
    e55c:	.word	0x0000e7db
    e560:	.word	0x0000e7ff

0000e564 <stdio_exit_handler>:
    e564:	ldr	r2, [pc, #8]	; (e570 <stdio_exit_handler+0xc>)
    e566:	ldr	r1, [pc, #12]	; (e574 <stdio_exit_handler+0x10>)
    e568:	ldr	r0, [pc, #12]	; (e578 <stdio_exit_handler+0x14>)
    e56a:	b.w	e640 <_fwalk_sglue>
    e56e:	nop
    e570:	.word	0x2000223c
    e574:	.word	0x00011315
    e578:	.word	0x20002248

0000e57c <cleanup_stdio>:
    e57c:	ldr	r1, [r0, #4]
    e57e:	ldr	r3, [pc, #48]	; (e5b0 <cleanup_stdio+0x34>)
    e580:	cmp	r1, r3
    e582:	push	{r4, lr}
    e584:	mov	r4, r0
    e586:	beq.n	e58c <cleanup_stdio+0x10>
    e588:	bl	11314 <_fflush_r>
    e58c:	ldr	r1, [r4, #8]
    e58e:	ldr	r3, [pc, #36]	; (e5b4 <cleanup_stdio+0x38>)
    e590:	cmp	r1, r3
    e592:	beq.n	e59a <cleanup_stdio+0x1e>
    e594:	mov	r0, r4
    e596:	bl	11314 <_fflush_r>
    e59a:	ldr	r1, [r4, #12]
    e59c:	ldr	r3, [pc, #24]	; (e5b8 <cleanup_stdio+0x3c>)
    e59e:	cmp	r1, r3
    e5a0:	beq.n	e5ac <cleanup_stdio+0x30>
    e5a2:	mov	r0, r4
    e5a4:	ldmia.w	sp!, {r4, lr}
    e5a8:	b.w	11314 <_fflush_r>
    e5ac:	pop	{r4, pc}
    e5ae:	nop
    e5b0:	.word	0x2001485c
    e5b4:	.word	0x200148c4
    e5b8:	.word	0x2001492c

0000e5bc <global_stdio_init.part.0>:
    e5bc:	push	{r4, lr}
    e5be:	ldr	r3, [pc, #44]	; (e5ec <global_stdio_init.part.0+0x30>)
    e5c0:	ldr	r4, [pc, #44]	; (e5f0 <global_stdio_init.part.0+0x34>)
    e5c2:	ldr	r2, [pc, #48]	; (e5f4 <global_stdio_init.part.0+0x38>)
    e5c4:	str	r2, [r3, #0]
    e5c6:	mov	r0, r4
    e5c8:	movs	r2, #0
    e5ca:	movs	r1, #4
    e5cc:	bl	e51c <std>
    e5d0:	add.w	r0, r4, #104	; 0x68
    e5d4:	movs	r2, #1
    e5d6:	movs	r1, #9
    e5d8:	bl	e51c <std>
    e5dc:	add.w	r0, r4, #208	; 0xd0
    e5e0:	movs	r2, #2
    e5e2:	ldmia.w	sp!, {r4, lr}
    e5e6:	movs	r1, #18
    e5e8:	b.w	e51c <std>
    e5ec:	.word	0x20014994
    e5f0:	.word	0x2001485c
    e5f4:	.word	0x0000e565

0000e5f8 <__sfp_lock_acquire>:
    e5f8:	ldr	r0, [pc, #4]	; (e600 <__sfp_lock_acquire+0x8>)
    e5fa:	b.w	eac0 <__retarget_lock_acquire_recursive>
    e5fe:	nop
    e600:	.word	0x200155b7

0000e604 <__sfp_lock_release>:
    e604:	ldr	r0, [pc, #4]	; (e60c <__sfp_lock_release+0x8>)
    e606:	b.w	eac2 <__retarget_lock_release_recursive>
    e60a:	nop
    e60c:	.word	0x200155b7

0000e610 <__sinit>:
    e610:	push	{r4, lr}
    e612:	mov	r4, r0
    e614:	bl	e5f8 <__sfp_lock_acquire>
    e618:	ldr	r3, [r4, #32]
    e61a:	cbz	r3, e624 <__sinit+0x14>
    e61c:	ldmia.w	sp!, {r4, lr}
    e620:	b.w	e604 <__sfp_lock_release>
    e624:	ldr	r3, [pc, #16]	; (e638 <__sinit+0x28>)
    e626:	str	r3, [r4, #32]
    e628:	ldr	r3, [pc, #16]	; (e63c <__sinit+0x2c>)
    e62a:	ldr	r3, [r3, #0]
    e62c:	cmp	r3, #0
    e62e:	bne.n	e61c <__sinit+0xc>
    e630:	bl	e5bc <global_stdio_init.part.0>
    e634:	b.n	e61c <__sinit+0xc>
    e636:	nop
    e638:	.word	0x0000e57d
    e63c:	.word	0x20014994

0000e640 <_fwalk_sglue>:
    e640:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e644:	mov	r7, r0
    e646:	mov	r8, r1
    e648:	mov	r4, r2
    e64a:	movs	r6, #0
    e64c:	ldrd	r9, r5, [r4, #4]
    e650:	subs.w	r9, r9, #1
    e654:	bpl.n	e662 <_fwalk_sglue+0x22>
    e656:	ldr	r4, [r4, #0]
    e658:	cmp	r4, #0
    e65a:	bne.n	e64c <_fwalk_sglue+0xc>
    e65c:	mov	r0, r6
    e65e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e662:	ldrh	r3, [r5, #12]
    e664:	cmp	r3, #1
    e666:	bls.n	e678 <_fwalk_sglue+0x38>
    e668:	ldrsh.w	r3, [r5, #14]
    e66c:	adds	r3, #1
    e66e:	beq.n	e678 <_fwalk_sglue+0x38>
    e670:	mov	r1, r5
    e672:	mov	r0, r7
    e674:	blx	r8
    e676:	orrs	r6, r0
    e678:	adds	r5, #104	; 0x68
    e67a:	b.n	e650 <_fwalk_sglue+0x10>

0000e67c <sniprintf>:
    e67c:	push	{r2, r3}
    e67e:	push	{r4, r5, lr}
    e680:	ldr	r3, [pc, #92]	; (e6e0 <sniprintf+0x64>)
    e682:	subs	r4, r1, #0
    e684:	ldr	r5, [r3, #0]
    e686:	sub	sp, #116	; 0x74
    e688:	bge.n	e69c <sniprintf+0x20>
    e68a:	movs	r3, #139	; 0x8b
    e68c:	str	r3, [r5, #0]
    e68e:	mov.w	r0, #4294967295
    e692:	add	sp, #116	; 0x74
    e694:	ldmia.w	sp!, {r4, r5, lr}
    e698:	add	sp, #8
    e69a:	bx	lr
    e69c:	mov.w	r3, #520	; 0x208
    e6a0:	strh.w	r3, [sp, #20]
    e6a4:	ite	ne
    e6a6:	addne.w	r3, r4, #4294967295
    e6aa:	moveq	r3, r4
    e6ac:	str	r3, [sp, #16]
    e6ae:	str	r3, [sp, #28]
    e6b0:	movw	r3, #65535	; 0xffff
    e6b4:	str	r0, [sp, #8]
    e6b6:	str	r0, [sp, #24]
    e6b8:	strh.w	r3, [sp, #22]
    e6bc:	ldr	r2, [sp, #128]	; 0x80
    e6be:	add	r3, sp, #132	; 0x84
    e6c0:	add	r1, sp, #8
    e6c2:	mov	r0, r5
    e6c4:	str	r3, [sp, #4]
    e6c6:	bl	109cc <_svfiprintf_r>
    e6ca:	adds	r3, r0, #1
    e6cc:	itt	lt
    e6ce:	movlt	r3, #139	; 0x8b
    e6d0:	strlt	r3, [r5, #0]
    e6d2:	cmp	r4, #0
    e6d4:	beq.n	e692 <sniprintf+0x16>
    e6d6:	ldr	r3, [sp, #8]
    e6d8:	movs	r2, #0
    e6da:	strb	r2, [r3, #0]
    e6dc:	b.n	e692 <sniprintf+0x16>
    e6de:	nop
    e6e0:	.word	0x20002294

0000e6e4 <siprintf>:
    e6e4:	push	{r1, r2, r3}
    e6e6:	push	{lr}
    e6e8:	sub	sp, #112	; 0x70
    e6ea:	add	r3, sp, #116	; 0x74
    e6ec:	str	r0, [sp, #8]
    e6ee:	str	r0, [sp, #24]
    e6f0:	mvn.w	r1, #2147483648	; 0x80000000
    e6f4:	ldr	r0, [pc, #36]	; (e71c <siprintf+0x38>)
    e6f6:	str	r1, [sp, #28]
    e6f8:	str	r1, [sp, #16]
    e6fa:	ldr	r1, [pc, #36]	; (e720 <siprintf+0x3c>)
    e6fc:	ldr.w	r2, [r3], #4
    e700:	str	r1, [sp, #20]
    e702:	ldr	r0, [r0, #0]
    e704:	str	r3, [sp, #4]
    e706:	add	r1, sp, #8
    e708:	bl	109cc <_svfiprintf_r>
    e70c:	ldr	r3, [sp, #8]
    e70e:	movs	r2, #0
    e710:	strb	r2, [r3, #0]
    e712:	add	sp, #112	; 0x70
    e714:	ldr.w	lr, [sp], #4
    e718:	add	sp, #12
    e71a:	bx	lr
    e71c:	.word	0x20002294
    e720:	.word	0xffff0208

0000e724 <siscanf>:
    e724:	push	{r1, r2, r3}
    e726:	push	{r4, lr}
    e728:	sub	sp, #124	; 0x7c
    e72a:	add	r4, sp, #132	; 0x84
    e72c:	mov.w	r1, #516	; 0x204
    e730:	ldr.w	r2, [r4], #4
    e734:	str	r2, [sp, #4]
    e736:	strh.w	r1, [sp, #28]
    e73a:	str	r0, [sp, #16]
    e73c:	str	r0, [sp, #32]
    e73e:	bl	eb80 <strlen>
    e742:	ldr	r3, [pc, #48]	; (e774 <siscanf+0x50>)
    e744:	str	r0, [sp, #20]
    e746:	str	r0, [sp, #36]	; 0x24
    e748:	str	r3, [sp, #52]	; 0x34
    e74a:	ldr	r0, [pc, #44]	; (e778 <siscanf+0x54>)
    e74c:	ldr	r2, [sp, #4]
    e74e:	ldr	r0, [r0, #0]
    e750:	str	r4, [sp, #12]
    e752:	movs	r3, #0
    e754:	str	r3, [sp, #68]	; 0x44
    e756:	str	r3, [sp, #88]	; 0x58
    e758:	movw	r3, #65535	; 0xffff
    e75c:	strh.w	r3, [sp, #30]
    e760:	add	r1, sp, #16
    e762:	mov	r3, r4
    e764:	bl	10c7c <__ssvfiscanf_r>
    e768:	add	sp, #124	; 0x7c
    e76a:	ldmia.w	sp!, {r4, lr}
    e76e:	add	sp, #12
    e770:	bx	lr
    e772:	nop
    e774:	.word	0x0000e79f
    e778:	.word	0x20002294

0000e77c <__sread>:
    e77c:	push	{r4, lr}
    e77e:	mov	r4, r1
    e780:	ldrsh.w	r1, [r1, #14]
    e784:	bl	ea04 <_read_r>
    e788:	cmp	r0, #0
    e78a:	itete	ge
    e78c:	ldrge	r3, [r4, #84]	; 0x54
    e78e:	ldrhlt	r3, [r4, #12]
    e790:	addge	r3, r3, r0
    e792:	biclt.w	r3, r3, #4096	; 0x1000
    e796:	ite	ge
    e798:	strge	r3, [r4, #84]	; 0x54
    e79a:	strhlt	r3, [r4, #12]
    e79c:	pop	{r4, pc}

0000e79e <__seofread>:
    e79e:	movs	r0, #0
    e7a0:	bx	lr

0000e7a2 <__swrite>:
    e7a2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7a6:	mov	r7, r3
    e7a8:	ldrh	r3, [r1, #12]
    e7aa:	lsls	r3, r3, #23
    e7ac:	mov	r5, r0
    e7ae:	mov	r4, r1
    e7b0:	mov	r6, r2
    e7b2:	bpl.n	e7c0 <__swrite+0x1e>
    e7b4:	ldrsh.w	r1, [r1, #14]
    e7b8:	movs	r3, #2
    e7ba:	movs	r2, #0
    e7bc:	bl	e9e0 <_lseek_r>
    e7c0:	ldrh	r3, [r4, #12]
    e7c2:	ldrsh.w	r1, [r4, #14]
    e7c6:	bic.w	r3, r3, #4096	; 0x1000
    e7ca:	strh	r3, [r4, #12]
    e7cc:	mov	r2, r6
    e7ce:	mov	r3, r7
    e7d0:	mov	r0, r5
    e7d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e7d6:	b.w	ea48 <_write_r>

0000e7da <__sseek>:
    e7da:	push	{r4, lr}
    e7dc:	mov	r4, r1
    e7de:	ldrsh.w	r1, [r1, #14]
    e7e2:	bl	e9e0 <_lseek_r>
    e7e6:	adds	r3, r0, #1
    e7e8:	ldrh	r3, [r4, #12]
    e7ea:	itete	ne
    e7ec:	strne	r0, [r4, #84]	; 0x54
    e7ee:	biceq.w	r3, r3, #4096	; 0x1000
    e7f2:	orrne.w	r3, r3, #4096	; 0x1000
    e7f6:	strheq	r3, [r4, #12]
    e7f8:	it	ne
    e7fa:	strhne	r3, [r4, #12]
    e7fc:	pop	{r4, pc}

0000e7fe <__sclose>:
    e7fe:	ldrsh.w	r1, [r1, #14]
    e802:	b.w	e9c0 <_close_r>

0000e806 <_vdiprintf_r>:
    e806:	push	{r4, r5, r6, r7, lr}
    e808:	sub.w	sp, sp, #532	; 0x214
    e80c:	mov	r6, r1
    e80e:	add	r7, sp, #16
    e810:	mov.w	r1, #512	; 0x200
    e814:	str	r1, [sp, #12]
    e816:	str	r3, [sp, #0]
    e818:	mov	r1, r7
    e81a:	mov	r3, r2
    e81c:	add	r2, sp, #12
    e81e:	mov	r5, r0
    e820:	bl	e864 <_vasniprintf_r>
    e824:	mov	r4, r0
    e826:	cbz	r0, e84a <_vdiprintf_r+0x44>
    e828:	mov	r2, r0
    e82a:	ldr	r3, [sp, #12]
    e82c:	mov	r1, r6
    e82e:	mov	r0, r5
    e830:	bl	ea48 <_write_r>
    e834:	cmp	r4, r7
    e836:	str	r0, [sp, #12]
    e838:	beq.n	e842 <_vdiprintf_r+0x3c>
    e83a:	mov	r1, r4
    e83c:	mov	r0, r5
    e83e:	bl	f798 <_free_r>
    e842:	ldr	r0, [sp, #12]
    e844:	add.w	sp, sp, #532	; 0x214
    e848:	pop	{r4, r5, r6, r7, pc}
    e84a:	mov.w	r0, #4294967295
    e84e:	b.n	e844 <_vdiprintf_r+0x3e>

0000e850 <vdiprintf>:
    e850:	mov	r3, r2
    e852:	mov	r2, r1
    e854:	mov	r1, r0
    e856:	ldr	r0, [pc, #8]	; (e860 <vdiprintf+0x10>)
    e858:	ldr	r0, [r0, #0]
    e85a:	b.w	e806 <_vdiprintf_r>
    e85e:	nop
    e860:	.word	0x20002294

0000e864 <_vasniprintf_r>:
    e864:	push	{r4, r5, lr}
    e866:	mov	r5, r2
    e868:	sub	sp, #108	; 0x6c
    e86a:	ldr	r4, [r5, #0]
    e86c:	mov	r2, r3
    e86e:	cbz	r1, e894 <_vasniprintf_r+0x30>
    e870:	cmp	r4, #0
    e872:	itee	ne
    e874:	movne.w	r3, #1544	; 0x608
    e878:	moveq.w	r3, #648	; 0x288
    e87c:	moveq	r1, #0
    e87e:	cmp	r4, #0
    e880:	strh.w	r3, [sp, #12]
    e884:	str	r1, [sp, #0]
    e886:	str	r1, [sp, #16]
    e888:	bge.n	e89c <_vasniprintf_r+0x38>
    e88a:	movs	r3, #139	; 0x8b
    e88c:	str	r3, [r0, #0]
    e88e:	movs	r0, #0
    e890:	add	sp, #108	; 0x6c
    e892:	pop	{r4, r5, pc}
    e894:	mov.w	r3, #648	; 0x288
    e898:	mov	r4, r1
    e89a:	b.n	e87e <_vasniprintf_r+0x1a>
    e89c:	movw	r3, #65535	; 0xffff
    e8a0:	strh.w	r3, [sp, #14]
    e8a4:	mov	r1, sp
    e8a6:	ldr	r3, [sp, #120]	; 0x78
    e8a8:	str	r4, [sp, #8]
    e8aa:	str	r4, [sp, #20]
    e8ac:	bl	109cc <_svfiprintf_r>
    e8b0:	subs	r3, r0, #0
    e8b2:	itt	ge
    e8b4:	strge	r3, [r5, #0]
    e8b6:	ldrge	r3, [sp, #0]
    e8b8:	mov.w	r0, #0
    e8bc:	itt	ge
    e8be:	strbge	r0, [r3, #0]
    e8c0:	ldrge	r0, [sp, #16]
    e8c2:	b.n	e890 <_vasniprintf_r+0x2c>

0000e8c4 <memcmp>:
    e8c4:	push	{r4, lr}
    e8c6:	subs	r1, #1
    e8c8:	add	r2, r0
    e8ca:	cmp	r0, r2
    e8cc:	bne.n	e8d2 <memcmp+0xe>
    e8ce:	movs	r0, #0
    e8d0:	b.n	e8de <memcmp+0x1a>
    e8d2:	ldrb	r3, [r0, #0]
    e8d4:	ldrb.w	r4, [r1, #1]!
    e8d8:	cmp	r3, r4
    e8da:	beq.n	e8e0 <memcmp+0x1c>
    e8dc:	subs	r0, r3, r4
    e8de:	pop	{r4, pc}
    e8e0:	adds	r0, #1
    e8e2:	b.n	e8ca <memcmp+0x6>

0000e8e4 <memmove>:
    e8e4:	cmp	r0, r1
    e8e6:	push	{r4, lr}
    e8e8:	add.w	r4, r1, r2
    e8ec:	bls.n	e8f4 <memmove+0x10>
    e8ee:	cmp	r4, r0
    e8f0:	mov	r3, r4
    e8f2:	bhi.n	e904 <memmove+0x20>
    e8f4:	subs	r3, r0, #1
    e8f6:	cmp	r1, r4
    e8f8:	beq.n	e90c <memmove+0x28>
    e8fa:	ldrb.w	r2, [r1], #1
    e8fe:	strb.w	r2, [r3, #1]!
    e902:	b.n	e8f6 <memmove+0x12>
    e904:	add	r2, r0
    e906:	mov	r1, r0
    e908:	cmp	r2, r1
    e90a:	bne.n	e90e <memmove+0x2a>
    e90c:	pop	{r4, pc}
    e90e:	ldrb.w	r4, [r3, #-1]!
    e912:	strb.w	r4, [r2, #-1]!
    e916:	b.n	e908 <memmove+0x24>

0000e918 <strlcat>:
    e918:	push	{r4, r5, r6, lr}
    e91a:	mov	r4, r0
    e91c:	adds	r6, r2, r0
    e91e:	cmp	r4, r6
    e920:	mov	r3, r4
    e922:	bne.n	e936 <strlcat+0x1e>
    e924:	subs	r4, r3, r0
    e926:	subs	r2, r2, r4
    e928:	subs	r6, r2, #1
    e92a:	cbnz	r2, e940 <strlcat+0x28>
    e92c:	mov	r0, r1
    e92e:	bl	eb80 <strlen>
    e932:	add	r0, r4
    e934:	pop	{r4, r5, r6, pc}
    e936:	ldrb	r5, [r3, #0]
    e938:	adds	r4, #1
    e93a:	cmp	r5, #0
    e93c:	bne.n	e91e <strlcat+0x6>
    e93e:	b.n	e924 <strlcat+0xc>
    e940:	mov	r5, r1
    e942:	mov	r2, r5
    e944:	ldrb.w	r0, [r5], #1
    e948:	cbnz	r0, e952 <strlcat+0x3a>
    e94a:	subs	r2, r2, r1
    e94c:	strb	r0, [r3, #0]
    e94e:	adds	r0, r2, r4
    e950:	b.n	e934 <strlcat+0x1c>
    e952:	cmp	r6, #0
    e954:	beq.n	e942 <strlcat+0x2a>
    e956:	strb.w	r0, [r3], #1
    e95a:	subs	r6, #1
    e95c:	b.n	e942 <strlcat+0x2a>

0000e95e <strlcpy>:
    e95e:	push	{r4, lr}
    e960:	cbz	r2, e988 <strlcpy+0x2a>
    e962:	add	r2, r1
    e964:	mov	r3, r1
    e966:	mov	r4, r3
    e968:	adds	r3, #1
    e96a:	cmp	r3, r2
    e96c:	bne.n	e976 <strlcpy+0x18>
    e96e:	movs	r3, #0
    e970:	strb	r3, [r0, #0]
    e972:	mov	r3, r4
    e974:	b.n	e98a <strlcpy+0x2c>
    e976:	ldrb.w	r4, [r3, #-1]
    e97a:	strb.w	r4, [r0], #1
    e97e:	cmp	r4, #0
    e980:	bne.n	e966 <strlcpy+0x8>
    e982:	subs	r1, r3, r1
    e984:	subs	r0, r1, #1
    e986:	pop	{r4, pc}
    e988:	mov	r3, r1
    e98a:	ldrb.w	r2, [r3], #1
    e98e:	cmp	r2, #0
    e990:	bne.n	e98a <strlcpy+0x2c>
    e992:	b.n	e982 <strlcpy+0x24>

0000e994 <strncmp>:
    e994:	push	{r4, lr}
    e996:	cbz	r2, e9b4 <strncmp+0x20>
    e998:	subs	r1, #1
    e99a:	adds	r4, r0, r2
    e99c:	ldrb.w	r2, [r0], #1
    e9a0:	ldrb.w	r3, [r1, #1]!
    e9a4:	cmp	r2, r3
    e9a6:	bne.n	e9b0 <strncmp+0x1c>
    e9a8:	cmp	r0, r4
    e9aa:	beq.n	e9b0 <strncmp+0x1c>
    e9ac:	cmp	r2, #0
    e9ae:	bne.n	e99c <strncmp+0x8>
    e9b0:	subs	r0, r2, r3
    e9b2:	pop	{r4, pc}
    e9b4:	mov	r0, r2
    e9b6:	b.n	e9b2 <strncmp+0x1e>

0000e9b8 <_localeconv_r>:
    e9b8:	ldr	r0, [pc, #0]	; (e9bc <_localeconv_r+0x4>)
    e9ba:	bx	lr
    e9bc:	.word	0x200021c0

0000e9c0 <_close_r>:
    e9c0:	push	{r3, r4, r5, lr}
    e9c2:	ldr	r5, [pc, #24]	; (e9dc <_close_r+0x1c>)
    e9c4:	movs	r3, #0
    e9c6:	mov	r4, r0
    e9c8:	mov	r0, r1
    e9ca:	str	r3, [r5, #0]
    e9cc:	bl	b724 <_close>
    e9d0:	adds	r3, r0, #1
    e9d2:	bne.n	e9da <_close_r+0x1a>
    e9d4:	ldr	r3, [r5, #0]
    e9d6:	cbz	r3, e9da <_close_r+0x1a>
    e9d8:	str	r3, [r4, #0]
    e9da:	pop	{r3, r4, r5, pc}
    e9dc:	.word	0x20014ba4

0000e9e0 <_lseek_r>:
    e9e0:	push	{r3, r4, r5, lr}
    e9e2:	ldr	r5, [pc, #28]	; (ea00 <_lseek_r+0x20>)
    e9e4:	mov	r4, r0
    e9e6:	mov	r0, r1
    e9e8:	mov	r1, r2
    e9ea:	movs	r2, #0
    e9ec:	str	r2, [r5, #0]
    e9ee:	mov	r2, r3
    e9f0:	bl	b738 <_lseek>
    e9f4:	adds	r3, r0, #1
    e9f6:	bne.n	e9fe <_lseek_r+0x1e>
    e9f8:	ldr	r3, [r5, #0]
    e9fa:	cbz	r3, e9fe <_lseek_r+0x1e>
    e9fc:	str	r3, [r4, #0]
    e9fe:	pop	{r3, r4, r5, pc}
    ea00:	.word	0x20014ba4

0000ea04 <_read_r>:
    ea04:	push	{r3, r4, r5, lr}
    ea06:	ldr	r5, [pc, #28]	; (ea24 <_read_r+0x20>)
    ea08:	mov	r4, r0
    ea0a:	mov	r0, r1
    ea0c:	mov	r1, r2
    ea0e:	movs	r2, #0
    ea10:	str	r2, [r5, #0]
    ea12:	mov	r2, r3
    ea14:	bl	b720 <_read>
    ea18:	adds	r3, r0, #1
    ea1a:	bne.n	ea22 <_read_r+0x1e>
    ea1c:	ldr	r3, [r5, #0]
    ea1e:	cbz	r3, ea22 <_read_r+0x1e>
    ea20:	str	r3, [r4, #0]
    ea22:	pop	{r3, r4, r5, pc}
    ea24:	.word	0x20014ba4

0000ea28 <_sbrk_r>:
    ea28:	push	{r3, r4, r5, lr}
    ea2a:	ldr	r5, [pc, #24]	; (ea44 <_sbrk_r+0x1c>)
    ea2c:	movs	r3, #0
    ea2e:	mov	r4, r0
    ea30:	mov	r0, r1
    ea32:	str	r3, [r5, #0]
    ea34:	bl	b6f4 <_sbrk>
    ea38:	adds	r3, r0, #1
    ea3a:	bne.n	ea42 <_sbrk_r+0x1a>
    ea3c:	ldr	r3, [r5, #0]
    ea3e:	cbz	r3, ea42 <_sbrk_r+0x1a>
    ea40:	str	r3, [r4, #0]
    ea42:	pop	{r3, r4, r5, pc}
    ea44:	.word	0x20014ba4

0000ea48 <_write_r>:
    ea48:	push	{r3, r4, r5, lr}
    ea4a:	ldr	r5, [pc, #28]	; (ea68 <_write_r+0x20>)
    ea4c:	mov	r4, r0
    ea4e:	mov	r0, r1
    ea50:	mov	r1, r2
    ea52:	movs	r2, #0
    ea54:	str	r2, [r5, #0]
    ea56:	mov	r2, r3
    ea58:	bl	c4e8 <_write>
    ea5c:	adds	r3, r0, #1
    ea5e:	bne.n	ea66 <_write_r+0x1e>
    ea60:	ldr	r3, [r5, #0]
    ea62:	cbz	r3, ea66 <_write_r+0x1e>
    ea64:	str	r3, [r4, #0]
    ea66:	pop	{r3, r4, r5, pc}
    ea68:	.word	0x20014ba4

0000ea6c <__errno>:
    ea6c:	ldr	r3, [pc, #4]	; (ea74 <__errno+0x8>)
    ea6e:	ldr	r0, [r3, #0]
    ea70:	bx	lr
    ea72:	nop
    ea74:	.word	0x20002294

0000ea78 <__libc_init_array>:
    ea78:	push	{r4, r5, r6, lr}
    ea7a:	ldr	r5, [pc, #52]	; (eab0 <__libc_init_array+0x38>)
    ea7c:	ldr	r4, [pc, #52]	; (eab4 <__libc_init_array+0x3c>)
    ea7e:	subs	r4, r4, r5
    ea80:	asrs	r4, r4, #2
    ea82:	movs	r6, #0
    ea84:	cmp	r6, r4
    ea86:	bne.n	ea9c <__libc_init_array+0x24>
    ea88:	ldr	r5, [pc, #44]	; (eab8 <__libc_init_array+0x40>)
    ea8a:	ldr	r4, [pc, #48]	; (eabc <__libc_init_array+0x44>)
    ea8c:	bl	11e98 <___init_veneer>
    ea90:	subs	r4, r4, r5
    ea92:	asrs	r4, r4, #2
    ea94:	movs	r6, #0
    ea96:	cmp	r6, r4
    ea98:	bne.n	eaa6 <__libc_init_array+0x2e>
    ea9a:	pop	{r4, r5, r6, pc}
    ea9c:	ldr.w	r3, [r5], #4
    eaa0:	blx	r3
    eaa2:	adds	r6, #1
    eaa4:	b.n	ea84 <__libc_init_array+0xc>
    eaa6:	ldr.w	r3, [r5], #4
    eaaa:	blx	r3
    eaac:	adds	r6, #1
    eaae:	b.n	ea96 <__libc_init_array+0x1e>
    eab0:	.word	0x600024c0
    eab4:	.word	0x600024c0
    eab8:	.word	0x600024c0
    eabc:	.word	0x600024d0

0000eac0 <__retarget_lock_acquire_recursive>:
    eac0:	bx	lr

0000eac2 <__retarget_lock_release_recursive>:
    eac2:	bx	lr

0000eac4 <strcpy>:
    eac4:	mov	r3, r0
    eac6:	ldrb.w	r2, [r1], #1
    eaca:	strb.w	r2, [r3], #1
    eace:	cmp	r2, #0
    ead0:	bne.n	eac6 <strcpy+0x2>
    ead2:	bx	lr
	...

0000eae0 <memchr>:
    eae0:	and.w	r1, r1, #255	; 0xff
    eae4:	cmp	r2, #16
    eae6:	blt.n	eb40 <memchr+0x60>
    eae8:	tst.w	r0, #7
    eaec:	beq.n	eb00 <memchr+0x20>
    eaee:	ldrb.w	r3, [r0], #1
    eaf2:	subs	r2, #1
    eaf4:	cmp	r3, r1
    eaf6:	beq.n	eb54 <memchr+0x74>
    eaf8:	tst.w	r0, #7
    eafc:	cbz	r2, eb50 <memchr+0x70>
    eafe:	bne.n	eaee <memchr+0xe>
    eb00:	push	{r4, r5, r6, r7}
    eb02:	orr.w	r1, r1, r1, lsl #8
    eb06:	orr.w	r1, r1, r1, lsl #16
    eb0a:	bic.w	r4, r2, #7
    eb0e:	mvns.w	r7, #0
    eb12:	movs	r3, #0
    eb14:	ldrd	r5, r6, [r0], #8
    eb18:	subs	r4, #8
    eb1a:	eor.w	r5, r5, r1
    eb1e:	eor.w	r6, r6, r1
    eb22:	uadd8	r5, r5, r7
    eb26:	sel	r5, r3, r7
    eb2a:	uadd8	r6, r6, r7
    eb2e:	sel	r6, r5, r7
    eb32:	cbnz	r6, eb58 <memchr+0x78>
    eb34:	bne.n	eb14 <memchr+0x34>
    eb36:	pop	{r4, r5, r6, r7}
    eb38:	and.w	r1, r1, #255	; 0xff
    eb3c:	and.w	r2, r2, #7
    eb40:	cbz	r2, eb50 <memchr+0x70>
    eb42:	ldrb.w	r3, [r0], #1
    eb46:	subs	r2, #1
    eb48:	eor.w	r3, r3, r1
    eb4c:	cbz	r3, eb54 <memchr+0x74>
    eb4e:	bne.n	eb42 <memchr+0x62>
    eb50:	movs	r0, #0
    eb52:	bx	lr
    eb54:	subs	r0, #1
    eb56:	bx	lr
    eb58:	cmp	r5, #0
    eb5a:	itte	eq
    eb5c:	moveq	r5, r6
    eb5e:	subeq	r0, #3
    eb60:	subne	r0, #7
    eb62:	tst.w	r5, #1
    eb66:	bne.n	eb78 <memchr+0x98>
    eb68:	adds	r0, #1
    eb6a:	tst.w	r5, #256	; 0x100
    eb6e:	ittt	eq
    eb70:	addeq	r0, #1
    eb72:	tsteq.w	r5, #98304	; 0x18000
    eb76:	addeq	r0, #1
    eb78:	pop	{r4, r5, r6, r7}
    eb7a:	subs	r0, #1
    eb7c:	bx	lr
    eb7e:	nop

0000eb80 <strlen>:
    eb80:	mov	r3, r0
    eb82:	ldrb.w	r2, [r3], #1
    eb86:	cmp	r2, #0
    eb88:	bne.n	eb82 <strlen+0x2>
    eb8a:	subs	r0, r3, r0
    eb8c:	subs	r0, #1
    eb8e:	bx	lr

0000eb90 <nan>:
    eb90:	vldr	d0, [pc, #4]	; eb98 <nan+0x8>
    eb94:	bx	lr
    eb96:	nop
    eb98:	.word	0x00000000
    eb9c:	.word	0x7ff80000

0000eba0 <nanf>:
    eba0:	vldr	s0, [pc, #4]	; eba8 <nanf+0x8>
    eba4:	bx	lr
    eba6:	nop
    eba8:	.word	0x7fc00000

0000ebac <quorem>:
    ebac:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebb0:	ldr	r3, [r0, #16]
    ebb2:	ldr	r4, [r1, #16]
    ebb4:	cmp	r3, r4
    ebb6:	mov	r7, r0
    ebb8:	blt.n	ecb8 <quorem+0x10c>
    ebba:	subs	r4, #1
    ebbc:	add.w	r8, r1, #20
    ebc0:	add.w	r5, r0, #20
    ebc4:	add.w	r3, r5, r4, lsl #2
    ebc8:	str	r3, [sp, #4]
    ebca:	ldr.w	r3, [r8, r4, lsl #2]
    ebce:	ldr.w	r2, [r5, r4, lsl #2]
    ebd2:	adds	r3, #1
    ebd4:	cmp	r2, r3
    ebd6:	mov.w	fp, r4, lsl #2
    ebda:	add.w	r9, r8, r4, lsl #2
    ebde:	udiv	r6, r2, r3
    ebe2:	bcc.n	ec48 <quorem+0x9c>
    ebe4:	mov.w	lr, #0
    ebe8:	mov	r0, r8
    ebea:	mov	ip, r5
    ebec:	mov	sl, lr
    ebee:	ldr.w	r2, [r0], #4
    ebf2:	uxth	r3, r2
    ebf4:	mla	r3, r6, r3, lr
    ebf8:	mov.w	lr, r2, lsr #16
    ebfc:	lsrs	r2, r3, #16
    ebfe:	uxth	r3, r3
    ec00:	sub.w	r3, sl, r3
    ec04:	ldr.w	sl, [ip]
    ec08:	uxtah	r3, r3, sl
    ec0c:	mla	r2, r6, lr, r2
    ec10:	str	r3, [sp, #0]
    ec12:	ldr	r3, [sp, #0]
    ec14:	mov.w	lr, r2, lsr #16
    ec18:	uxth	r2, r2
    ec1a:	rsb	r2, r2, sl, lsr #16
    ec1e:	add.w	r2, r2, r3, asr #16
    ec22:	ldrh.w	r3, [sp]
    ec26:	cmp	r9, r0
    ec28:	orr.w	r3, r3, r2, lsl #16
    ec2c:	str.w	r3, [ip], #4
    ec30:	mov.w	sl, r2, asr #16
    ec34:	bcs.n	ebee <quorem+0x42>
    ec36:	ldr.w	r3, [r5, fp]
    ec3a:	cbnz	r3, ec48 <quorem+0x9c>
    ec3c:	ldr	r3, [sp, #4]
    ec3e:	subs	r3, #4
    ec40:	cmp	r5, r3
    ec42:	mov	r2, r3
    ec44:	bcc.n	eca0 <quorem+0xf4>
    ec46:	str	r4, [r7, #16]
    ec48:	mov	r0, r7
    ec4a:	bl	10490 <__mcmp>
    ec4e:	cmp	r0, #0
    ec50:	blt.n	ec98 <quorem+0xec>
    ec52:	adds	r6, #1
    ec54:	mov	r1, r5
    ec56:	movs	r0, #0
    ec58:	ldr.w	r2, [r8], #4
    ec5c:	ldr.w	ip, [r1]
    ec60:	uxth	r3, r2
    ec62:	subs	r3, r0, r3
    ec64:	lsrs	r2, r2, #16
    ec66:	uxtah	r3, r3, ip
    ec6a:	rsb	r2, r2, ip, lsr #16
    ec6e:	add.w	r2, r2, r3, asr #16
    ec72:	uxth	r3, r3
    ec74:	orr.w	r3, r3, r2, lsl #16
    ec78:	cmp	r9, r8
    ec7a:	str.w	r3, [r1], #4
    ec7e:	mov.w	r0, r2, asr #16
    ec82:	bcs.n	ec58 <quorem+0xac>
    ec84:	ldr.w	r2, [r5, r4, lsl #2]
    ec88:	add.w	r3, r5, r4, lsl #2
    ec8c:	cbnz	r2, ec98 <quorem+0xec>
    ec8e:	subs	r3, #4
    ec90:	cmp	r5, r3
    ec92:	mov	r2, r3
    ec94:	bcc.n	ecac <quorem+0x100>
    ec96:	str	r4, [r7, #16]
    ec98:	mov	r0, r6
    ec9a:	add	sp, #12
    ec9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eca0:	ldr	r2, [r2, #0]
    eca2:	subs	r3, #4
    eca4:	cmp	r2, #0
    eca6:	bne.n	ec46 <quorem+0x9a>
    eca8:	subs	r4, #1
    ecaa:	b.n	ec40 <quorem+0x94>
    ecac:	ldr	r2, [r2, #0]
    ecae:	subs	r3, #4
    ecb0:	cmp	r2, #0
    ecb2:	bne.n	ec96 <quorem+0xea>
    ecb4:	subs	r4, #1
    ecb6:	b.n	ec90 <quorem+0xe4>
    ecb8:	movs	r0, #0
    ecba:	b.n	ec9a <quorem+0xee>
    ecbc:	movs	r0, r0
	...

0000ecc0 <_dtoa_r>:
    ecc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecc4:	vpush	{d8}
    ecc8:	ldr	r5, [r0, #28]
    ecca:	sub	sp, #68	; 0x44
    eccc:	vstr	d0, [sp, #8]
    ecd0:	vmov	r8, r9, d0
    ecd4:	ldr	r4, [sp, #112]	; 0x70
    ecd6:	str	r1, [sp, #24]
    ecd8:	mov	r6, r0
    ecda:	str	r2, [sp, #32]
    ecdc:	str	r3, [sp, #48]	; 0x30
    ecde:	cbnz	r5, ecfe <_dtoa_r+0x3e>
    ece0:	movs	r0, #16
    ece2:	bl	ca00 <malloc>
    ece6:	mov	r2, r0
    ece8:	str	r0, [r6, #28]
    ecea:	cbnz	r0, ecf6 <_dtoa_r+0x36>
    ecec:	ldr	r3, [pc, #664]	; (ef88 <_dtoa_r+0x2c8>)
    ecee:	movs	r1, #239	; 0xef
    ecf0:	ldr	r0, [pc, #664]	; (ef8c <_dtoa_r+0x2cc>)
    ecf2:	bl	1144c <__assert_func>
    ecf6:	strd	r5, r5, [r0, #4]
    ecfa:	str	r5, [r0, #0]
    ecfc:	str	r5, [r0, #12]
    ecfe:	ldr	r3, [r6, #28]
    ed00:	ldr	r1, [r3, #0]
    ed02:	cbz	r1, ed1a <_dtoa_r+0x5a>
    ed04:	ldr	r2, [r3, #4]
    ed06:	str	r2, [r1, #4]
    ed08:	movs	r3, #1
    ed0a:	lsls	r3, r2
    ed0c:	str	r3, [r1, #8]
    ed0e:	mov	r0, r6
    ed10:	bl	ff84 <_Bfree>
    ed14:	ldr	r3, [r6, #28]
    ed16:	movs	r2, #0
    ed18:	str	r2, [r3, #0]
    ed1a:	subs.w	r3, r9, #0
    ed1e:	ittet	lt
    ed20:	biclt.w	r3, r3, #2147483648	; 0x80000000
    ed24:	strlt	r3, [sp, #12]
    ed26:	movge	r3, #0
    ed28:	movlt	r2, #1
    ed2a:	ite	ge
    ed2c:	strge	r3, [r4, #0]
    ed2e:	strlt	r2, [r4, #0]
    ed30:	ldr	r3, [pc, #604]	; (ef90 <_dtoa_r+0x2d0>)
    ed32:	ldr	r4, [sp, #12]
    ed34:	bics	r3, r4
    ed36:	bne.n	ed72 <_dtoa_r+0xb2>
    ed38:	ldr	r2, [sp, #48]	; 0x30
    ed3a:	movw	r3, #9999	; 0x270f
    ed3e:	str	r3, [r2, #0]
    ed40:	ubfx	r3, r4, #0, #20
    ed44:	orrs.w	r3, r3, r8
    ed48:	beq.w	f742 <_dtoa_r+0xa82>
    ed4c:	ldr	r3, [sp, #116]	; 0x74
    ed4e:	cbnz	r3, ed6a <_dtoa_r+0xaa>
    ed50:	ldr	r3, [pc, #576]	; (ef94 <_dtoa_r+0x2d4>)
    ed52:	b.n	ed96 <_dtoa_r+0xd6>
    ed54:	ldr	r3, [pc, #576]	; (ef98 <_dtoa_r+0x2d8>)
    ed56:	str	r3, [sp, #4]
    ed58:	adds	r3, #8
    ed5a:	ldr	r2, [sp, #116]	; 0x74
    ed5c:	str	r3, [r2, #0]
    ed5e:	ldr	r0, [sp, #4]
    ed60:	add	sp, #68	; 0x44
    ed62:	vpop	{d8}
    ed66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed6a:	ldr	r3, [pc, #552]	; (ef94 <_dtoa_r+0x2d4>)
    ed6c:	str	r3, [sp, #4]
    ed6e:	adds	r3, #3
    ed70:	b.n	ed5a <_dtoa_r+0x9a>
    ed72:	vldr	d8, [sp, #8]
    ed76:	vcmp.f64	d8, #0.0
    ed7a:	vmrs	APSR_nzcv, fpscr
    ed7e:	bne.n	ed9a <_dtoa_r+0xda>
    ed80:	ldr	r2, [sp, #48]	; 0x30
    ed82:	movs	r3, #1
    ed84:	str	r3, [r2, #0]
    ed86:	ldr	r3, [sp, #116]	; 0x74
    ed88:	cmp	r3, #0
    ed8a:	beq.w	f73c <_dtoa_r+0xa7c>
    ed8e:	ldr	r3, [pc, #524]	; (ef9c <_dtoa_r+0x2dc>)
    ed90:	ldr	r2, [sp, #116]	; 0x74
    ed92:	str	r3, [r2, #0]
    ed94:	subs	r3, #1
    ed96:	str	r3, [sp, #4]
    ed98:	b.n	ed5e <_dtoa_r+0x9e>
    ed9a:	add	r2, sp, #56	; 0x38
    ed9c:	add	r1, sp, #60	; 0x3c
    ed9e:	mov	r0, r6
    eda0:	vmov.f64	d0, d8
    eda4:	bl	106bc <__d2b>
    eda8:	ubfx	r3, r4, #20, #11
    edac:	ldr	r2, [sp, #56]	; 0x38
    edae:	mov	r5, r0
    edb0:	cmp	r3, #0
    edb2:	beq.n	ee42 <_dtoa_r+0x182>
    edb4:	vmov.f64	d7, d8
    edb8:	vmov	r1, s17
    edbc:	ubfx	r1, r1, #0, #20
    edc0:	orr.w	r1, r1, #1069547520	; 0x3fc00000
    edc4:	orr.w	r1, r1, #3145728	; 0x300000
    edc8:	subw	r3, r3, #1023	; 0x3ff
    edcc:	movs	r0, #0
    edce:	vmov	s15, r1
    edd2:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    edd6:	vldr	d5, [pc, #408]	; ef70 <_dtoa_r+0x2b0>
    edda:	vsub.f64	d7, d7, d6
    edde:	vldr	d6, [pc, #408]	; ef78 <_dtoa_r+0x2b8>
    ede2:	vfma.f64	d6, d7, d5
    ede6:	vldr	d5, [pc, #408]	; ef80 <_dtoa_r+0x2c0>
    edea:	vmov	s15, r3
    edee:	vcvt.f64.s32	d4, s15
    edf2:	vmov.f64	d7, d6
    edf6:	vfma.f64	d7, d4, d5
    edfa:	vcvt.s32.f64	s13, d7
    edfe:	vcmpe.f64	d7, #0.0
    ee02:	vmrs	APSR_nzcv, fpscr
    ee06:	vmov	fp, s13
    ee0a:	str	r0, [sp, #36]	; 0x24
    ee0c:	bpl.n	ee20 <_dtoa_r+0x160>
    ee0e:	vcvt.f64.s32	d6, s13
    ee12:	vcmp.f64	d6, d7
    ee16:	vmrs	APSR_nzcv, fpscr
    ee1a:	it	ne
    ee1c:	addne.w	fp, fp, #4294967295
    ee20:	cmp.w	fp, #22
    ee24:	bhi.n	ee7e <_dtoa_r+0x1be>
    ee26:	ldr	r1, [pc, #376]	; (efa0 <_dtoa_r+0x2e0>)
    ee28:	add.w	r1, r1, fp, lsl #3
    ee2c:	vldr	d7, [r1]
    ee30:	vcmpe.f64	d8, d7
    ee34:	vmrs	APSR_nzcv, fpscr
    ee38:	bpl.n	ee3e <_dtoa_r+0x17e>
    ee3a:	add.w	fp, fp, #4294967295
    ee3e:	movs	r1, #0
    ee40:	b.n	ee80 <_dtoa_r+0x1c0>
    ee42:	ldr	r3, [sp, #60]	; 0x3c
    ee44:	add	r3, r2
    ee46:	addw	r1, r3, #1074	; 0x432
    ee4a:	cmp	r1, #32
    ee4c:	itttt	gt
    ee4e:	rsbgt	r1, r1, #64	; 0x40
    ee52:	lslgt	r4, r1
    ee54:	addwgt	r1, r3, #1042	; 0x412
    ee58:	lsrgt.w	r1, r8, r1
    ee5c:	itet	le
    ee5e:	rsble	r1, r1, #32
    ee62:	orrgt	r1, r4
    ee64:	lslle.w	r1, r8, r1
    ee68:	vmov	s15, r1
    ee6c:	vcvt.f64.u32	d7, s15
    ee70:	subs	r3, #1
    ee72:	vmov	r1, s15
    ee76:	movs	r0, #1
    ee78:	sub.w	r1, r1, #32505856	; 0x1f00000
    ee7c:	b.n	edce <_dtoa_r+0x10e>
    ee7e:	movs	r1, #1
    ee80:	subs	r2, r2, r3
    ee82:	subs	r3, r2, #1
    ee84:	str	r3, [sp, #20]
    ee86:	ittet	mi
    ee88:	rsbmi	r3, r2, #1
    ee8c:	strmi	r3, [sp, #16]
    ee8e:	movpl	r3, #0
    ee90:	movmi	r3, #0
    ee92:	ite	mi
    ee94:	strmi	r3, [sp, #20]
    ee96:	strpl	r3, [sp, #16]
    ee98:	cmp.w	fp, #0
    ee9c:	str	r1, [sp, #44]	; 0x2c
    ee9e:	blt.n	eed2 <_dtoa_r+0x212>
    eea0:	ldr	r3, [sp, #20]
    eea2:	str.w	fp, [sp, #40]	; 0x28
    eea6:	add	r3, fp
    eea8:	str	r3, [sp, #20]
    eeaa:	movs	r3, #0
    eeac:	ldr	r2, [sp, #24]
    eeae:	cmp	r2, #9
    eeb0:	bhi.n	ef44 <_dtoa_r+0x284>
    eeb2:	cmp	r2, #5
    eeb4:	itt	gt
    eeb6:	subgt	r2, #4
    eeb8:	strgt	r2, [sp, #24]
    eeba:	ldr	r2, [sp, #24]
    eebc:	sub.w	r2, r2, #2
    eec0:	ite	gt
    eec2:	movgt	r4, #0
    eec4:	movle	r4, #1
    eec6:	cmp	r2, #3
    eec8:	bhi.n	ef5a <_dtoa_r+0x29a>
    eeca:	tbb	[pc, r2]
    eece:	.short	0x2d0b
    eed0:	.short	0x392b
    eed2:	ldr	r3, [sp, #16]
    eed4:	movs	r2, #0
    eed6:	sub.w	r3, r3, fp
    eeda:	str	r3, [sp, #16]
    eedc:	str	r2, [sp, #40]	; 0x28
    eede:	rsb	r3, fp, #0
    eee2:	b.n	eeac <_dtoa_r+0x1ec>
    eee4:	movs	r2, #0
    eee6:	str	r2, [sp, #28]
    eee8:	ldr	r2, [sp, #32]
    eeea:	cmp	r2, #0
    eeec:	bgt.n	ef60 <_dtoa_r+0x2a0>
    eeee:	mov.w	sl, #1
    eef2:	mov	r9, sl
    eef4:	mov	r2, sl
    eef6:	str.w	sl, [sp, #32]
    eefa:	ldr	r7, [r6, #28]
    eefc:	movs	r1, #0
    eefe:	movs	r0, #4
    ef00:	add.w	ip, r0, #20
    ef04:	cmp	ip, r2
    ef06:	bls.n	ef6a <_dtoa_r+0x2aa>
    ef08:	str	r1, [r7, #4]
    ef0a:	mov	r0, r6
    ef0c:	str	r3, [sp, #52]	; 0x34
    ef0e:	bl	ff04 <_Balloc>
    ef12:	ldr	r3, [sp, #52]	; 0x34
    ef14:	str	r0, [sp, #4]
    ef16:	mov	r2, r0
    ef18:	cmp	r0, #0
    ef1a:	bne.n	efa8 <_dtoa_r+0x2e8>
    ef1c:	ldr	r3, [pc, #132]	; (efa4 <_dtoa_r+0x2e4>)
    ef1e:	movw	r1, #431	; 0x1af
    ef22:	b.n	ecf0 <_dtoa_r+0x30>
    ef24:	movs	r2, #1
    ef26:	b.n	eee6 <_dtoa_r+0x226>
    ef28:	movs	r2, #0
    ef2a:	str	r2, [sp, #28]
    ef2c:	ldr	r2, [sp, #32]
    ef2e:	add.w	sl, fp, r2
    ef32:	add.w	r9, sl, #1
    ef36:	mov	r2, r9
    ef38:	cmp	r2, #1
    ef3a:	it	lt
    ef3c:	movlt	r2, #1
    ef3e:	b.n	eefa <_dtoa_r+0x23a>
    ef40:	movs	r2, #1
    ef42:	b.n	ef2a <_dtoa_r+0x26a>
    ef44:	movs	r4, #1
    ef46:	movs	r2, #0
    ef48:	strd	r2, r4, [sp, #24]
    ef4c:	mov.w	sl, #4294967295
    ef50:	movs	r1, #0
    ef52:	mov	r9, sl
    ef54:	movs	r2, #18
    ef56:	str	r1, [sp, #32]
    ef58:	b.n	eefa <_dtoa_r+0x23a>
    ef5a:	movs	r2, #1
    ef5c:	str	r2, [sp, #28]
    ef5e:	b.n	ef4c <_dtoa_r+0x28c>
    ef60:	ldr.w	sl, [sp, #32]
    ef64:	mov	r9, sl
    ef66:	mov	r2, sl
    ef68:	b.n	eefa <_dtoa_r+0x23a>
    ef6a:	adds	r1, #1
    ef6c:	lsls	r0, r0, #1
    ef6e:	b.n	ef00 <_dtoa_r+0x240>
    ef70:	.word	0x636f4361
    ef74:	.word	0x3fd287a7
    ef78:	.word	0x8b60c8b3
    ef7c:	.word	0x3fc68a28
    ef80:	.word	0x509f79fb
    ef84:	.word	0x3fd34413
    ef88:	.word	0x2000131d
    ef8c:	.word	0x20001334
    ef90:	.word	0x7ff00000
    ef94:	.word	0x20001319
    ef98:	.word	0x20001310
    ef9c:	.word	0x2000114c
    efa0:	.word	0x20000328
    efa4:	.word	0x2000138d
    efa8:	ldr	r2, [r6, #28]
    efaa:	ldr	r1, [sp, #4]
    efac:	str	r1, [r2, #0]
    efae:	cmp.w	r9, #14
    efb2:	bhi.n	f08e <_dtoa_r+0x3ce>
    efb4:	cmp	r4, #0
    efb6:	beq.n	f08e <_dtoa_r+0x3ce>
    efb8:	cmp.w	fp, #0
    efbc:	ble.w	f100 <_dtoa_r+0x440>
    efc0:	ldr	r2, [pc, #772]	; (f2c8 <_dtoa_r+0x608>)
    efc2:	and.w	r1, fp, #15
    efc6:	add.w	r2, r2, r1, lsl #3
    efca:	tst.w	fp, #256	; 0x100
    efce:	vldr	d7, [r2]
    efd2:	mov.w	r2, fp, asr #4
    efd6:	beq.w	f0e8 <_dtoa_r+0x428>
    efda:	ldr	r1, [pc, #752]	; (f2cc <_dtoa_r+0x60c>)
    efdc:	vldr	d6, [r1, #32]
    efe0:	vdiv.f64	d6, d8, d6
    efe4:	vstr	d6, [sp, #8]
    efe8:	and.w	r2, r2, #15
    efec:	movs	r1, #3
    efee:	ldr	r0, [pc, #732]	; (f2cc <_dtoa_r+0x60c>)
    eff0:	cmp	r2, #0
    eff2:	bne.n	f0ec <_dtoa_r+0x42c>
    eff4:	vldr	d6, [sp, #8]
    eff8:	vdiv.f64	d7, d6, d7
    effc:	vstr	d7, [sp, #8]
    f000:	ldr	r2, [sp, #44]	; 0x2c
    f002:	vldr	d7, [sp, #8]
    f006:	cmp	r2, #0
    f008:	beq.w	f14c <_dtoa_r+0x48c>
    f00c:	vmov.f64	d6, #112	; 0x3f800000  1.0
    f010:	vcmpe.f64	d7, d6
    f014:	vmrs	APSR_nzcv, fpscr
    f018:	bpl.w	f14c <_dtoa_r+0x48c>
    f01c:	cmp.w	r9, #0
    f020:	beq.w	f14c <_dtoa_r+0x48c>
    f024:	cmp.w	sl, #0
    f028:	ble.n	f08a <_dtoa_r+0x3ca>
    f02a:	vmov.f64	d6, #36	; 0x41200000  10.0
    f02e:	vmul.f64	d7, d7, d6
    f032:	vstr	d7, [sp, #8]
    f036:	add.w	r2, fp, #4294967295
    f03a:	adds	r1, #1
    f03c:	mov	r4, sl
    f03e:	vldr	d6, [sp, #8]
    f042:	vmov.f64	d5, #28	; 0x40e00000  7.0
    f046:	vmov	s15, r1
    f04a:	vcvt.f64.s32	d7, s15
    f04e:	vfma.f64	d5, d7, d6
    f052:	vmov	r7, s11
    f056:	vmov	r0, r1, d5
    f05a:	sub.w	r1, r7, #54525952	; 0x3400000
    f05e:	cmp	r4, #0
    f060:	bne.n	f152 <_dtoa_r+0x492>
    f062:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f066:	vsub.f64	d6, d6, d7
    f06a:	vmov	d7, r0, r1
    f06e:	vcmpe.f64	d6, d7
    f072:	vmrs	APSR_nzcv, fpscr
    f076:	bgt.w	f54e <_dtoa_r+0x88e>
    f07a:	vneg.f64	d7, d7
    f07e:	vcmpe.f64	d6, d7
    f082:	vmrs	APSR_nzcv, fpscr
    f086:	bmi.w	f54a <_dtoa_r+0x88a>
    f08a:	vstr	d8, [sp, #8]
    f08e:	ldr	r2, [sp, #60]	; 0x3c
    f090:	cmp	r2, #0
    f092:	blt.w	f2d0 <_dtoa_r+0x610>
    f096:	cmp.w	fp, #14
    f09a:	bgt.w	f2d0 <_dtoa_r+0x610>
    f09e:	ldr	r3, [pc, #552]	; (f2c8 <_dtoa_r+0x608>)
    f0a0:	add.w	r3, r3, fp, lsl #3
    f0a4:	vldr	d6, [r3]
    f0a8:	ldr	r3, [sp, #32]
    f0aa:	cmp	r3, #0
    f0ac:	bge.w	f21e <_dtoa_r+0x55e>
    f0b0:	cmp.w	r9, #0
    f0b4:	bgt.w	f21e <_dtoa_r+0x55e>
    f0b8:	bne.w	f548 <_dtoa_r+0x888>
    f0bc:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f0c0:	vmul.f64	d6, d6, d7
    f0c4:	vldr	d7, [sp, #8]
    f0c8:	vcmpe.f64	d6, d7
    f0cc:	vmrs	APSR_nzcv, fpscr
    f0d0:	mov	r4, r9
    f0d2:	mov	r7, r9
    f0d4:	bge.w	f510 <_dtoa_r+0x850>
    f0d8:	ldr.w	r8, [sp, #4]
    f0dc:	movs	r3, #49	; 0x31
    f0de:	strb.w	r3, [r8], #1
    f0e2:	add.w	fp, fp, #1
    f0e6:	b.n	f51a <_dtoa_r+0x85a>
    f0e8:	movs	r1, #2
    f0ea:	b.n	efee <_dtoa_r+0x32e>
    f0ec:	lsls	r4, r2, #31
    f0ee:	bpl.n	f0fa <_dtoa_r+0x43a>
    f0f0:	vldr	d6, [r0]
    f0f4:	adds	r1, #1
    f0f6:	vmul.f64	d7, d7, d6
    f0fa:	asrs	r2, r2, #1
    f0fc:	adds	r0, #8
    f0fe:	b.n	eff0 <_dtoa_r+0x330>
    f100:	beq.n	f148 <_dtoa_r+0x488>
    f102:	rsb	r2, fp, #0
    f106:	ldr	r1, [pc, #448]	; (f2c8 <_dtoa_r+0x608>)
    f108:	and.w	r0, r2, #15
    f10c:	add.w	r1, r1, r0, lsl #3
    f110:	vldr	d7, [r1]
    f114:	vmul.f64	d7, d8, d7
    f118:	vstr	d7, [sp, #8]
    f11c:	ldr	r0, [pc, #428]	; (f2cc <_dtoa_r+0x60c>)
    f11e:	asrs	r2, r2, #4
    f120:	movs	r4, #0
    f122:	movs	r1, #2
    f124:	cbnz	r2, f132 <_dtoa_r+0x472>
    f126:	cmp	r4, #0
    f128:	beq.w	f000 <_dtoa_r+0x340>
    f12c:	vstr	d7, [sp, #8]
    f130:	b.n	f000 <_dtoa_r+0x340>
    f132:	lsls	r7, r2, #31
    f134:	bpl.n	f142 <_dtoa_r+0x482>
    f136:	vldr	d6, [r0]
    f13a:	adds	r1, #1
    f13c:	movs	r4, #1
    f13e:	vmul.f64	d7, d7, d6
    f142:	asrs	r2, r2, #1
    f144:	adds	r0, #8
    f146:	b.n	f124 <_dtoa_r+0x464>
    f148:	movs	r1, #2
    f14a:	b.n	f000 <_dtoa_r+0x340>
    f14c:	mov	r2, fp
    f14e:	mov	r4, r9
    f150:	b.n	f03e <_dtoa_r+0x37e>
    f152:	vmov	d7, r0, r1
    f156:	ldr	r1, [pc, #368]	; (f2c8 <_dtoa_r+0x608>)
    f158:	add.w	r1, r1, r4, lsl #3
    f15c:	vldr	d4, [r1, #-8]
    f160:	ldr	r1, [sp, #4]
    f162:	add	r4, r1
    f164:	ldr	r1, [sp, #28]
    f166:	cbz	r1, f1be <_dtoa_r+0x4fe>
    f168:	vmov.f64	d3, #96	; 0x3f000000  0.5
    f16c:	vmov.f64	d2, #112	; 0x3f800000  1.0
    f170:	ldr.w	r8, [sp, #4]
    f174:	vdiv.f64	d5, d3, d4
    f178:	vmov.f64	d3, #36	; 0x41200000  10.0
    f17c:	vsub.f64	d7, d5, d7
    f180:	vcvt.s32.f64	s9, d6
    f184:	vmov	r1, s9
    f188:	vcvt.f64.s32	d5, s9
    f18c:	adds	r1, #48	; 0x30
    f18e:	vsub.f64	d6, d6, d5
    f192:	vcmpe.f64	d6, d7
    f196:	vmrs	APSR_nzcv, fpscr
    f19a:	strb.w	r1, [r8], #1
    f19e:	bmi.n	f214 <_dtoa_r+0x554>
    f1a0:	vsub.f64	d5, d2, d6
    f1a4:	vcmpe.f64	d5, d7
    f1a8:	vmrs	APSR_nzcv, fpscr
    f1ac:	bmi.n	f294 <_dtoa_r+0x5d4>
    f1ae:	cmp	r8, r4
    f1b0:	beq.w	f08a <_dtoa_r+0x3ca>
    f1b4:	vmul.f64	d7, d7, d3
    f1b8:	vmul.f64	d6, d6, d3
    f1bc:	b.n	f180 <_dtoa_r+0x4c0>
    f1be:	ldr.w	r8, [sp, #4]
    f1c2:	vmul.f64	d7, d7, d4
    f1c6:	mov	r0, r4
    f1c8:	vmov.f64	d3, #36	; 0x41200000  10.0
    f1cc:	vcvt.s32.f64	s9, d6
    f1d0:	vmov	r1, s9
    f1d4:	adds	r1, #48	; 0x30
    f1d6:	strb.w	r1, [r8], #1
    f1da:	cmp	r8, r4
    f1dc:	vcvt.f64.s32	d5, s9
    f1e0:	vsub.f64	d6, d6, d5
    f1e4:	bne.n	f218 <_dtoa_r+0x558>
    f1e6:	vmov.f64	d5, #96	; 0x3f000000  0.5
    f1ea:	vadd.f64	d4, d7, d5
    f1ee:	vcmpe.f64	d6, d4
    f1f2:	vmrs	APSR_nzcv, fpscr
    f1f6:	bgt.n	f294 <_dtoa_r+0x5d4>
    f1f8:	vsub.f64	d5, d5, d7
    f1fc:	vcmpe.f64	d6, d5
    f200:	vmrs	APSR_nzcv, fpscr
    f204:	bpl.w	f08a <_dtoa_r+0x3ca>
    f208:	mov	r8, r0
    f20a:	subs	r0, #1
    f20c:	ldrb.w	r3, [r8, #-1]
    f210:	cmp	r3, #48	; 0x30
    f212:	beq.n	f208 <_dtoa_r+0x548>
    f214:	mov	fp, r2
    f216:	b.n	f26e <_dtoa_r+0x5ae>
    f218:	vmul.f64	d6, d6, d3
    f21c:	b.n	f1cc <_dtoa_r+0x50c>
    f21e:	vldr	d7, [sp, #8]
    f222:	vmov.f64	d4, #36	; 0x41200000  10.0
    f226:	ldr.w	r8, [sp, #4]
    f22a:	vdiv.f64	d5, d7, d6
    f22e:	vcvt.s32.f64	s10, d5
    f232:	vmov	r3, s10
    f236:	adds	r3, #48	; 0x30
    f238:	strb.w	r3, [r8], #1
    f23c:	ldr	r3, [sp, #4]
    f23e:	sub.w	r3, r8, r3
    f242:	cmp	r9, r3
    f244:	vcvt.f64.s32	d3, s10
    f248:	vfms.f64	d7, d3, d6
    f24c:	bne.n	f2b6 <_dtoa_r+0x5f6>
    f24e:	vadd.f64	d7, d7, d7
    f252:	vcmpe.f64	d7, d6
    f256:	vmrs	APSR_nzcv, fpscr
    f25a:	bgt.n	f292 <_dtoa_r+0x5d2>
    f25c:	vcmp.f64	d7, d6
    f260:	vmrs	APSR_nzcv, fpscr
    f264:	bne.n	f26e <_dtoa_r+0x5ae>
    f266:	vmov	r3, s10
    f26a:	lsls	r1, r3, #31
    f26c:	bmi.n	f292 <_dtoa_r+0x5d2>
    f26e:	mov	r1, r5
    f270:	mov	r0, r6
    f272:	bl	ff84 <_Bfree>
    f276:	movs	r3, #0
    f278:	ldr	r2, [sp, #48]	; 0x30
    f27a:	strb.w	r3, [r8]
    f27e:	add.w	r3, fp, #1
    f282:	str	r3, [r2, #0]
    f284:	ldr	r3, [sp, #116]	; 0x74
    f286:	cmp	r3, #0
    f288:	beq.w	ed5e <_dtoa_r+0x9e>
    f28c:	str.w	r8, [r3]
    f290:	b.n	ed5e <_dtoa_r+0x9e>
    f292:	mov	r2, fp
    f294:	mov	r3, r8
    f296:	mov	r8, r3
    f298:	ldrb.w	r1, [r3, #-1]!
    f29c:	cmp	r1, #57	; 0x39
    f29e:	bne.n	f2ae <_dtoa_r+0x5ee>
    f2a0:	ldr	r1, [sp, #4]
    f2a2:	cmp	r1, r3
    f2a4:	bne.n	f296 <_dtoa_r+0x5d6>
    f2a6:	ldr	r0, [sp, #4]
    f2a8:	movs	r1, #48	; 0x30
    f2aa:	adds	r2, #1
    f2ac:	strb	r1, [r0, #0]
    f2ae:	ldrb	r1, [r3, #0]
    f2b0:	adds	r1, #1
    f2b2:	strb	r1, [r3, #0]
    f2b4:	b.n	f214 <_dtoa_r+0x554>
    f2b6:	vmul.f64	d7, d7, d4
    f2ba:	vcmp.f64	d7, #0.0
    f2be:	vmrs	APSR_nzcv, fpscr
    f2c2:	bne.n	f22a <_dtoa_r+0x56a>
    f2c4:	b.n	f26e <_dtoa_r+0x5ae>
    f2c6:	nop
    f2c8:	.word	0x20000328
    f2cc:	.word	0x20000300
    f2d0:	ldr	r1, [sp, #28]
    f2d2:	cmp	r1, #0
    f2d4:	beq.w	f478 <_dtoa_r+0x7b8>
    f2d8:	ldr	r1, [sp, #24]
    f2da:	cmp	r1, #1
    f2dc:	bgt.w	f448 <_dtoa_r+0x788>
    f2e0:	ldr	r1, [sp, #36]	; 0x24
    f2e2:	cmp	r1, #0
    f2e4:	beq.w	f440 <_dtoa_r+0x780>
    f2e8:	addw	r2, r2, #1075	; 0x433
    f2ec:	ldr.w	r8, [sp, #16]
    f2f0:	mov	r4, r3
    f2f2:	str	r3, [sp, #36]	; 0x24
    f2f4:	ldr	r3, [sp, #16]
    f2f6:	add	r3, r2
    f2f8:	str	r3, [sp, #16]
    f2fa:	ldr	r3, [sp, #20]
    f2fc:	movs	r1, #1
    f2fe:	add	r3, r2
    f300:	mov	r0, r6
    f302:	str	r3, [sp, #20]
    f304:	bl	10184 <__i2b>
    f308:	ldr	r3, [sp, #36]	; 0x24
    f30a:	mov	r7, r0
    f30c:	cmp.w	r8, #0
    f310:	beq.n	f32e <_dtoa_r+0x66e>
    f312:	ldr	r2, [sp, #20]
    f314:	cmp	r2, #0
    f316:	ble.n	f32e <_dtoa_r+0x66e>
    f318:	cmp	r2, r8
    f31a:	ldr	r1, [sp, #16]
    f31c:	it	ge
    f31e:	movge	r2, r8
    f320:	subs	r1, r1, r2
    f322:	str	r1, [sp, #16]
    f324:	ldr	r1, [sp, #20]
    f326:	sub.w	r8, r8, r2
    f32a:	subs	r2, r1, r2
    f32c:	str	r2, [sp, #20]
    f32e:	cbz	r3, f372 <_dtoa_r+0x6b2>
    f330:	ldr	r2, [sp, #28]
    f332:	cmp	r2, #0
    f334:	beq.w	f482 <_dtoa_r+0x7c2>
    f338:	cmp	r4, #0
    f33a:	ble.n	f364 <_dtoa_r+0x6a4>
    f33c:	mov	r1, r7
    f33e:	mov	r2, r4
    f340:	mov	r0, r6
    f342:	str	r3, [sp, #52]	; 0x34
    f344:	bl	10304 <__pow5mult>
    f348:	mov	r2, r5
    f34a:	mov	r1, r0
    f34c:	mov	r7, r0
    f34e:	mov	r0, r6
    f350:	bl	101b0 <__multiply>
    f354:	mov	r1, r5
    f356:	str	r0, [sp, #36]	; 0x24
    f358:	mov	r0, r6
    f35a:	bl	ff84 <_Bfree>
    f35e:	ldr	r2, [sp, #36]	; 0x24
    f360:	ldr	r3, [sp, #52]	; 0x34
    f362:	mov	r5, r2
    f364:	subs	r2, r3, r4
    f366:	beq.n	f372 <_dtoa_r+0x6b2>
    f368:	mov	r1, r5
    f36a:	mov	r0, r6
    f36c:	bl	10304 <__pow5mult>
    f370:	mov	r5, r0
    f372:	movs	r1, #1
    f374:	mov	r0, r6
    f376:	bl	10184 <__i2b>
    f37a:	ldr	r3, [sp, #40]	; 0x28
    f37c:	cmp	r3, #0
    f37e:	mov	r4, r0
    f380:	ble.w	f486 <_dtoa_r+0x7c6>
    f384:	mov	r2, r3
    f386:	mov	r1, r0
    f388:	mov	r0, r6
    f38a:	bl	10304 <__pow5mult>
    f38e:	ldr	r3, [sp, #24]
    f390:	cmp	r3, #1
    f392:	mov	r4, r0
    f394:	ble.n	f48c <_dtoa_r+0x7cc>
    f396:	movs	r3, #0
    f398:	str	r3, [sp, #36]	; 0x24
    f39a:	ldr	r2, [r4, #16]
    f39c:	add.w	r2, r4, r2, lsl #2
    f3a0:	ldr	r0, [r2, #16]
    f3a2:	bl	100e8 <__hi0bits>
    f3a6:	rsb	r0, r0, #32
    f3aa:	ldr	r3, [sp, #20]
    f3ac:	add	r0, r3
    f3ae:	ands.w	r0, r0, #31
    f3b2:	beq.w	f4dc <_dtoa_r+0x81c>
    f3b6:	rsb	r2, r0, #32
    f3ba:	cmp	r2, #4
    f3bc:	ble.w	f4ca <_dtoa_r+0x80a>
    f3c0:	ldr	r3, [sp, #16]
    f3c2:	rsb	r0, r0, #28
    f3c6:	add	r3, r0
    f3c8:	str	r3, [sp, #16]
    f3ca:	ldr	r3, [sp, #20]
    f3cc:	add	r8, r0
    f3ce:	add	r3, r0
    f3d0:	str	r3, [sp, #20]
    f3d2:	ldr	r3, [sp, #16]
    f3d4:	cmp	r3, #0
    f3d6:	ble.n	f3e4 <_dtoa_r+0x724>
    f3d8:	mov	r1, r5
    f3da:	mov	r2, r3
    f3dc:	mov	r0, r6
    f3de:	bl	103b8 <__lshift>
    f3e2:	mov	r5, r0
    f3e4:	ldr	r3, [sp, #20]
    f3e6:	cmp	r3, #0
    f3e8:	ble.n	f3f6 <_dtoa_r+0x736>
    f3ea:	mov	r1, r4
    f3ec:	mov	r2, r3
    f3ee:	mov	r0, r6
    f3f0:	bl	103b8 <__lshift>
    f3f4:	mov	r4, r0
    f3f6:	ldr	r3, [sp, #44]	; 0x2c
    f3f8:	cmp	r3, #0
    f3fa:	beq.n	f4e0 <_dtoa_r+0x820>
    f3fc:	mov	r1, r4
    f3fe:	mov	r0, r5
    f400:	bl	10490 <__mcmp>
    f404:	cmp	r0, #0
    f406:	bge.n	f4e0 <_dtoa_r+0x820>
    f408:	movs	r3, #0
    f40a:	mov	r1, r5
    f40c:	movs	r2, #10
    f40e:	mov	r0, r6
    f410:	bl	ffc8 <__multadd>
    f414:	ldr	r3, [sp, #28]
    f416:	add.w	fp, fp, #4294967295
    f41a:	mov	r5, r0
    f41c:	cmp	r3, #0
    f41e:	beq.w	f750 <_dtoa_r+0xa90>
    f422:	mov	r1, r7
    f424:	movs	r3, #0
    f426:	movs	r2, #10
    f428:	mov	r0, r6
    f42a:	bl	ffc8 <__multadd>
    f42e:	cmp.w	sl, #0
    f432:	mov	r7, r0
    f434:	bgt.w	f55e <_dtoa_r+0x89e>
    f438:	ldr	r3, [sp, #24]
    f43a:	cmp	r3, #2
    f43c:	bgt.n	f4ee <_dtoa_r+0x82e>
    f43e:	b.n	f55e <_dtoa_r+0x89e>
    f440:	ldr	r2, [sp, #56]	; 0x38
    f442:	rsb	r2, r2, #54	; 0x36
    f446:	b.n	f2ec <_dtoa_r+0x62c>
    f448:	add.w	r4, r9, #4294967295
    f44c:	cmp	r3, r4
    f44e:	itttt	lt
    f450:	sublt	r2, r4, r3
    f452:	ldrlt	r3, [sp, #40]	; 0x28
    f454:	addlt	r3, r3, r2
    f456:	strlt	r3, [sp, #40]	; 0x28
    f458:	itee	ge
    f45a:	subge	r4, r3, r4
    f45c:	movlt	r3, r4
    f45e:	movlt	r4, #0
    f460:	cmp.w	r9, #0
    f464:	itete	lt
    f466:	ldrlt	r2, [sp, #16]
    f468:	ldrge.w	r8, [sp, #16]
    f46c:	sublt.w	r8, r2, r9
    f470:	movge	r2, r9
    f472:	it	lt
    f474:	movlt	r2, #0
    f476:	b.n	f2f2 <_dtoa_r+0x632>
    f478:	ldr.w	r8, [sp, #16]
    f47c:	ldr	r7, [sp, #28]
    f47e:	mov	r4, r3
    f480:	b.n	f30c <_dtoa_r+0x64c>
    f482:	mov	r2, r3
    f484:	b.n	f368 <_dtoa_r+0x6a8>
    f486:	ldr	r3, [sp, #24]
    f488:	cmp	r3, #1
    f48a:	bgt.n	f4be <_dtoa_r+0x7fe>
    f48c:	ldr	r3, [sp, #8]
    f48e:	cbnz	r3, f4be <_dtoa_r+0x7fe>
    f490:	ldr	r3, [sp, #12]
    f492:	ubfx	r2, r3, #0, #20
    f496:	cbnz	r2, f4c2 <_dtoa_r+0x802>
    f498:	bic.w	r2, r3, #2147483648	; 0x80000000
    f49c:	lsrs	r2, r2, #20
    f49e:	lsls	r2, r2, #20
    f4a0:	cbz	r2, f4c6 <_dtoa_r+0x806>
    f4a2:	ldr	r3, [sp, #16]
    f4a4:	adds	r3, #1
    f4a6:	str	r3, [sp, #16]
    f4a8:	ldr	r3, [sp, #20]
    f4aa:	adds	r3, #1
    f4ac:	str	r3, [sp, #20]
    f4ae:	movs	r3, #1
    f4b0:	str	r3, [sp, #36]	; 0x24
    f4b2:	ldr	r3, [sp, #40]	; 0x28
    f4b4:	cmp	r3, #0
    f4b6:	bne.w	f39a <_dtoa_r+0x6da>
    f4ba:	movs	r0, #1
    f4bc:	b.n	f3aa <_dtoa_r+0x6ea>
    f4be:	movs	r3, #0
    f4c0:	b.n	f4b0 <_dtoa_r+0x7f0>
    f4c2:	ldr	r3, [sp, #8]
    f4c4:	b.n	f4b0 <_dtoa_r+0x7f0>
    f4c6:	str	r2, [sp, #36]	; 0x24
    f4c8:	b.n	f4b2 <_dtoa_r+0x7f2>
    f4ca:	beq.n	f3d2 <_dtoa_r+0x712>
    f4cc:	ldr	r3, [sp, #16]
    f4ce:	adds	r2, #28
    f4d0:	add	r3, r2
    f4d2:	str	r3, [sp, #16]
    f4d4:	ldr	r3, [sp, #20]
    f4d6:	add	r8, r2
    f4d8:	add	r3, r2
    f4da:	b.n	f3d0 <_dtoa_r+0x710>
    f4dc:	mov	r2, r0
    f4de:	b.n	f4cc <_dtoa_r+0x80c>
    f4e0:	cmp.w	r9, #0
    f4e4:	bgt.n	f554 <_dtoa_r+0x894>
    f4e6:	ldr	r3, [sp, #24]
    f4e8:	cmp	r3, #2
    f4ea:	ble.n	f554 <_dtoa_r+0x894>
    f4ec:	mov	sl, r9
    f4ee:	cmp.w	sl, #0
    f4f2:	bne.n	f510 <_dtoa_r+0x850>
    f4f4:	mov	r1, r4
    f4f6:	mov	r3, sl
    f4f8:	movs	r2, #5
    f4fa:	mov	r0, r6
    f4fc:	bl	ffc8 <__multadd>
    f500:	mov	r1, r0
    f502:	mov	r4, r0
    f504:	mov	r0, r5
    f506:	bl	10490 <__mcmp>
    f50a:	cmp	r0, #0
    f50c:	bgt.w	f0d8 <_dtoa_r+0x418>
    f510:	ldr	r3, [sp, #32]
    f512:	ldr.w	r8, [sp, #4]
    f516:	mvn.w	fp, r3
    f51a:	mov.w	r9, #0
    f51e:	mov	r1, r4
    f520:	mov	r0, r6
    f522:	bl	ff84 <_Bfree>
    f526:	cmp	r7, #0
    f528:	beq.w	f26e <_dtoa_r+0x5ae>
    f52c:	cmp.w	r9, #0
    f530:	beq.n	f53e <_dtoa_r+0x87e>
    f532:	cmp	r9, r7
    f534:	beq.n	f53e <_dtoa_r+0x87e>
    f536:	mov	r1, r9
    f538:	mov	r0, r6
    f53a:	bl	ff84 <_Bfree>
    f53e:	mov	r1, r7
    f540:	mov	r0, r6
    f542:	bl	ff84 <_Bfree>
    f546:	b.n	f26e <_dtoa_r+0x5ae>
    f548:	movs	r4, #0
    f54a:	mov	r7, r4
    f54c:	b.n	f510 <_dtoa_r+0x850>
    f54e:	mov	fp, r2
    f550:	mov	r7, r4
    f552:	b.n	f0d8 <_dtoa_r+0x418>
    f554:	ldr	r3, [sp, #28]
    f556:	mov	sl, r9
    f558:	cmp	r3, #0
    f55a:	beq.w	f75e <_dtoa_r+0xa9e>
    f55e:	cmp.w	r8, #0
    f562:	ble.n	f570 <_dtoa_r+0x8b0>
    f564:	mov	r1, r7
    f566:	mov	r2, r8
    f568:	mov	r0, r6
    f56a:	bl	103b8 <__lshift>
    f56e:	mov	r7, r0
    f570:	ldr	r3, [sp, #36]	; 0x24
    f572:	cmp	r3, #0
    f574:	beq.n	f632 <_dtoa_r+0x972>
    f576:	ldr	r1, [r7, #4]
    f578:	mov	r0, r6
    f57a:	bl	ff04 <_Balloc>
    f57e:	mov	r8, r0
    f580:	cbnz	r0, f58e <_dtoa_r+0x8ce>
    f582:	ldr	r3, [pc, #520]	; (f78c <_dtoa_r+0xacc>)
    f584:	mov	r2, r0
    f586:	movw	r1, #751	; 0x2ef
    f58a:	b.w	ecf0 <_dtoa_r+0x30>
    f58e:	ldr	r2, [r7, #16]
    f590:	adds	r2, #2
    f592:	lsls	r2, r2, #2
    f594:	add.w	r1, r7, #12
    f598:	adds	r0, #12
    f59a:	bl	a000 <memcpy>
    f59e:	movs	r2, #1
    f5a0:	mov	r1, r8
    f5a2:	mov	r0, r6
    f5a4:	bl	103b8 <__lshift>
    f5a8:	ldr	r3, [sp, #4]
    f5aa:	adds	r3, #1
    f5ac:	str	r3, [sp, #16]
    f5ae:	ldr	r3, [sp, #4]
    f5b0:	add	r3, sl
    f5b2:	str	r3, [sp, #32]
    f5b4:	ldr	r3, [sp, #8]
    f5b6:	and.w	r3, r3, #1
    f5ba:	mov	r9, r7
    f5bc:	str	r3, [sp, #28]
    f5be:	mov	r7, r0
    f5c0:	ldr	r3, [sp, #16]
    f5c2:	mov	r1, r4
    f5c4:	subs	r3, #1
    f5c6:	mov	r0, r5
    f5c8:	str	r3, [sp, #8]
    f5ca:	bl	ebac <quorem>
    f5ce:	mov	r3, r0
    f5d0:	adds	r3, #48	; 0x30
    f5d2:	str	r0, [sp, #20]
    f5d4:	mov	r1, r9
    f5d6:	mov	r0, r5
    f5d8:	str	r3, [sp, #36]	; 0x24
    f5da:	bl	10490 <__mcmp>
    f5de:	mov	r2, r7
    f5e0:	mov	sl, r0
    f5e2:	mov	r1, r4
    f5e4:	mov	r0, r6
    f5e6:	bl	104c8 <__mdiff>
    f5ea:	ldr	r2, [r0, #12]
    f5ec:	ldr	r3, [sp, #36]	; 0x24
    f5ee:	mov	r8, r0
    f5f0:	cbnz	r2, f636 <_dtoa_r+0x976>
    f5f2:	mov	r1, r0
    f5f4:	mov	r0, r5
    f5f6:	bl	10490 <__mcmp>
    f5fa:	ldr	r3, [sp, #36]	; 0x24
    f5fc:	mov	r2, r0
    f5fe:	mov	r1, r8
    f600:	mov	r0, r6
    f602:	strd	r3, r2, [sp, #36]	; 0x24
    f606:	bl	ff84 <_Bfree>
    f60a:	ldr	r3, [sp, #24]
    f60c:	ldr	r2, [sp, #40]	; 0x28
    f60e:	ldr.w	r8, [sp, #16]
    f612:	orr.w	r1, r3, r2
    f616:	ldr	r3, [sp, #28]
    f618:	orrs	r1, r3
    f61a:	ldr	r3, [sp, #36]	; 0x24
    f61c:	bne.n	f63a <_dtoa_r+0x97a>
    f61e:	cmp	r3, #57	; 0x39
    f620:	beq.n	f676 <_dtoa_r+0x9b6>
    f622:	cmp.w	sl, #0
    f626:	ble.n	f62c <_dtoa_r+0x96c>
    f628:	ldr	r3, [sp, #20]
    f62a:	adds	r3, #49	; 0x31
    f62c:	ldr	r2, [sp, #8]
    f62e:	strb	r3, [r2, #0]
    f630:	b.n	f51e <_dtoa_r+0x85e>
    f632:	mov	r0, r7
    f634:	b.n	f5a8 <_dtoa_r+0x8e8>
    f636:	movs	r2, #1
    f638:	b.n	f5fe <_dtoa_r+0x93e>
    f63a:	cmp.w	sl, #0
    f63e:	blt.n	f64e <_dtoa_r+0x98e>
    f640:	ldr	r1, [sp, #24]
    f642:	orr.w	sl, r1, sl
    f646:	ldr	r1, [sp, #28]
    f648:	orrs.w	sl, sl, r1
    f64c:	bne.n	f690 <_dtoa_r+0x9d0>
    f64e:	cmp	r2, #0
    f650:	ble.n	f62c <_dtoa_r+0x96c>
    f652:	mov	r1, r5
    f654:	movs	r2, #1
    f656:	mov	r0, r6
    f658:	str	r3, [sp, #16]
    f65a:	bl	103b8 <__lshift>
    f65e:	mov	r1, r4
    f660:	mov	r5, r0
    f662:	bl	10490 <__mcmp>
    f666:	cmp	r0, #0
    f668:	ldr	r3, [sp, #16]
    f66a:	bgt.n	f672 <_dtoa_r+0x9b2>
    f66c:	bne.n	f62c <_dtoa_r+0x96c>
    f66e:	lsls	r2, r3, #31
    f670:	bpl.n	f62c <_dtoa_r+0x96c>
    f672:	cmp	r3, #57	; 0x39
    f674:	bne.n	f628 <_dtoa_r+0x968>
    f676:	ldr	r2, [sp, #8]
    f678:	movs	r3, #57	; 0x39
    f67a:	strb	r3, [r2, #0]
    f67c:	mov	r3, r8
    f67e:	mov	r8, r3
    f680:	subs	r3, #1
    f682:	ldrb.w	r2, [r8, #-1]
    f686:	cmp	r2, #57	; 0x39
    f688:	beq.n	f72e <_dtoa_r+0xa6e>
    f68a:	adds	r2, #1
    f68c:	strb	r2, [r3, #0]
    f68e:	b.n	f51e <_dtoa_r+0x85e>
    f690:	cmp	r2, #0
    f692:	ble.n	f69c <_dtoa_r+0x9dc>
    f694:	cmp	r3, #57	; 0x39
    f696:	beq.n	f676 <_dtoa_r+0x9b6>
    f698:	adds	r3, #1
    f69a:	b.n	f62c <_dtoa_r+0x96c>
    f69c:	ldr	r2, [sp, #16]
    f69e:	ldr	r1, [sp, #32]
    f6a0:	strb.w	r3, [r2, #-1]
    f6a4:	cmp	r2, r1
    f6a6:	beq.n	f700 <_dtoa_r+0xa40>
    f6a8:	mov	r1, r5
    f6aa:	movs	r3, #0
    f6ac:	movs	r2, #10
    f6ae:	mov	r0, r6
    f6b0:	bl	ffc8 <__multadd>
    f6b4:	cmp	r9, r7
    f6b6:	mov	r5, r0
    f6b8:	mov.w	r3, #0
    f6bc:	mov.w	r2, #10
    f6c0:	mov	r1, r9
    f6c2:	mov	r0, r6
    f6c4:	bne.n	f6d6 <_dtoa_r+0xa16>
    f6c6:	bl	ffc8 <__multadd>
    f6ca:	mov	r9, r0
    f6cc:	mov	r7, r0
    f6ce:	ldr	r3, [sp, #16]
    f6d0:	adds	r3, #1
    f6d2:	str	r3, [sp, #16]
    f6d4:	b.n	f5c0 <_dtoa_r+0x900>
    f6d6:	bl	ffc8 <__multadd>
    f6da:	mov	r1, r7
    f6dc:	mov	r9, r0
    f6de:	movs	r3, #0
    f6e0:	movs	r2, #10
    f6e2:	mov	r0, r6
    f6e4:	bl	ffc8 <__multadd>
    f6e8:	mov	r7, r0
    f6ea:	b.n	f6ce <_dtoa_r+0xa0e>
    f6ec:	cmp.w	sl, #0
    f6f0:	ldr	r2, [sp, #4]
    f6f2:	ite	gt
    f6f4:	movgt	r8, sl
    f6f6:	movle.w	r8, #1
    f6fa:	add	r8, r2
    f6fc:	mov.w	r9, #0
    f700:	mov	r1, r5
    f702:	movs	r2, #1
    f704:	mov	r0, r6
    f706:	str	r3, [sp, #8]
    f708:	bl	103b8 <__lshift>
    f70c:	mov	r1, r4
    f70e:	mov	r5, r0
    f710:	bl	10490 <__mcmp>
    f714:	cmp	r0, #0
    f716:	bgt.n	f67c <_dtoa_r+0x9bc>
    f718:	bne.n	f720 <_dtoa_r+0xa60>
    f71a:	ldr	r3, [sp, #8]
    f71c:	lsls	r3, r3, #31
    f71e:	bmi.n	f67c <_dtoa_r+0x9bc>
    f720:	mov	r3, r8
    f722:	mov	r8, r3
    f724:	ldrb.w	r2, [r3, #-1]!
    f728:	cmp	r2, #48	; 0x30
    f72a:	beq.n	f722 <_dtoa_r+0xa62>
    f72c:	b.n	f51e <_dtoa_r+0x85e>
    f72e:	ldr	r2, [sp, #4]
    f730:	cmp	r2, r3
    f732:	bne.n	f67e <_dtoa_r+0x9be>
    f734:	add.w	fp, fp, #1
    f738:	movs	r3, #49	; 0x31
    f73a:	b.n	f62e <_dtoa_r+0x96e>
    f73c:	ldr	r3, [pc, #80]	; (f790 <_dtoa_r+0xad0>)
    f73e:	b.w	ed96 <_dtoa_r+0xd6>
    f742:	ldr	r3, [sp, #116]	; 0x74
    f744:	cmp	r3, #0
    f746:	bne.w	ed54 <_dtoa_r+0x94>
    f74a:	ldr	r3, [pc, #72]	; (f794 <_dtoa_r+0xad4>)
    f74c:	b.w	ed96 <_dtoa_r+0xd6>
    f750:	cmp.w	sl, #0
    f754:	bgt.n	f75e <_dtoa_r+0xa9e>
    f756:	ldr	r3, [sp, #24]
    f758:	cmp	r3, #2
    f75a:	bgt.w	f4ee <_dtoa_r+0x82e>
    f75e:	ldr.w	r8, [sp, #4]
    f762:	mov	r1, r4
    f764:	mov	r0, r5
    f766:	bl	ebac <quorem>
    f76a:	add.w	r3, r0, #48	; 0x30
    f76e:	strb.w	r3, [r8], #1
    f772:	ldr	r2, [sp, #4]
    f774:	sub.w	r2, r8, r2
    f778:	cmp	sl, r2
    f77a:	ble.n	f6ec <_dtoa_r+0xa2c>
    f77c:	mov	r1, r5
    f77e:	movs	r3, #0
    f780:	movs	r2, #10
    f782:	mov	r0, r6
    f784:	bl	ffc8 <__multadd>
    f788:	mov	r5, r0
    f78a:	b.n	f762 <_dtoa_r+0xaa2>
    f78c:	.word	0x2000138d
    f790:	.word	0x2000114b
    f794:	.word	0x20001310

0000f798 <_free_r>:
    f798:	push	{r0, r1, r2, r4, r5, lr}
    f79a:	cmp	r1, #0
    f79c:	beq.n	f828 <_free_r+0x90>
    f79e:	ldr.w	r3, [r1, #-4]
    f7a2:	str	r0, [sp, #4]
    f7a4:	cmp	r3, #0
    f7a6:	sub.w	r4, r1, #4
    f7aa:	it	lt
    f7ac:	addlt	r4, r4, r3
    f7ae:	bl	cb4c <__malloc_lock>
    f7b2:	ldr	r2, [pc, #120]	; (f82c <_free_r+0x94>)
    f7b4:	ldr	r0, [sp, #4]
    f7b6:	ldr	r3, [r2, #0]
    f7b8:	cbnz	r3, f7c8 <_free_r+0x30>
    f7ba:	str	r3, [r4, #4]
    f7bc:	str	r4, [r2, #0]
    f7be:	add	sp, #12
    f7c0:	ldmia.w	sp!, {r4, r5, lr}
    f7c4:	b.w	cb58 <__malloc_unlock>
    f7c8:	cmp	r3, r4
    f7ca:	bls.n	f7de <_free_r+0x46>
    f7cc:	ldr	r5, [r4, #0]
    f7ce:	adds	r1, r4, r5
    f7d0:	cmp	r3, r1
    f7d2:	itttt	eq
    f7d4:	ldreq	r1, [r3, #0]
    f7d6:	ldreq	r3, [r3, #4]
    f7d8:	addeq	r1, r1, r5
    f7da:	streq	r1, [r4, #0]
    f7dc:	b.n	f7ba <_free_r+0x22>
    f7de:	mov	r2, r3
    f7e0:	ldr	r3, [r3, #4]
    f7e2:	cbz	r3, f7e8 <_free_r+0x50>
    f7e4:	cmp	r3, r4
    f7e6:	bls.n	f7de <_free_r+0x46>
    f7e8:	ldr	r1, [r2, #0]
    f7ea:	adds	r5, r2, r1
    f7ec:	cmp	r5, r4
    f7ee:	bne.n	f808 <_free_r+0x70>
    f7f0:	ldr	r4, [r4, #0]
    f7f2:	add	r1, r4
    f7f4:	adds	r4, r2, r1
    f7f6:	cmp	r3, r4
    f7f8:	str	r1, [r2, #0]
    f7fa:	bne.n	f7be <_free_r+0x26>
    f7fc:	ldr	r4, [r3, #0]
    f7fe:	ldr	r3, [r3, #4]
    f800:	str	r3, [r2, #4]
    f802:	add	r4, r1
    f804:	str	r4, [r2, #0]
    f806:	b.n	f7be <_free_r+0x26>
    f808:	bls.n	f810 <_free_r+0x78>
    f80a:	movs	r3, #12
    f80c:	str	r3, [r0, #0]
    f80e:	b.n	f7be <_free_r+0x26>
    f810:	ldr	r5, [r4, #0]
    f812:	adds	r1, r4, r5
    f814:	cmp	r3, r1
    f816:	itt	eq
    f818:	ldreq	r1, [r3, #0]
    f81a:	ldreq	r3, [r3, #4]
    f81c:	str	r3, [r4, #4]
    f81e:	itt	eq
    f820:	addeq	r1, r1, r5
    f822:	streq	r1, [r4, #0]
    f824:	str	r4, [r2, #4]
    f826:	b.n	f7be <_free_r+0x26>
    f828:	add	sp, #12
    f82a:	pop	{r4, r5, pc}
    f82c:	.word	0x20014854

0000f830 <rshift>:
    f830:	ldr	r3, [r0, #16]
    f832:	cmp.w	r3, r1, asr #5
    f836:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f83a:	mov.w	r2, r1, asr #5
    f83e:	add.w	r4, r0, #20
    f842:	ble.n	f8d0 <rshift+0xa0>
    f844:	ands.w	r1, r1, #31
    f848:	add.w	r6, r4, r3, lsl #2
    f84c:	add.w	r5, r4, r2, lsl #2
    f850:	bne.n	f86c <rshift+0x3c>
    f852:	add.w	r7, r0, #16
    f856:	mov	r1, r5
    f858:	cmp	r1, r6
    f85a:	bcc.n	f8c6 <rshift+0x96>
    f85c:	subs	r3, r3, r2
    f85e:	lsls	r3, r3, #2
    f860:	subs	r2, r5, #3
    f862:	cmp	r6, r2
    f864:	it	cc
    f866:	movcc	r3, #0
    f868:	add	r3, r4
    f86a:	b.n	f898 <rshift+0x68>
    f86c:	ldr.w	r7, [r4, r2, lsl #2]
    f870:	rsb	r8, r1, #32
    f874:	lsrs	r7, r1
    f876:	add.w	lr, r5, #4
    f87a:	mov	r9, r4
    f87c:	cmp	r6, lr
    f87e:	mov	ip, lr
    f880:	bhi.n	f8ae <rshift+0x7e>
    f882:	subs	r2, r3, r2
    f884:	lsls	r2, r2, #2
    f886:	subs	r2, #4
    f888:	adds	r5, #1
    f88a:	cmp	r6, r5
    f88c:	it	cc
    f88e:	movcc	r2, #0
    f890:	adds	r3, r4, r2
    f892:	str	r7, [r4, r2]
    f894:	cbz	r7, f898 <rshift+0x68>
    f896:	adds	r3, #4
    f898:	subs	r2, r3, r4
    f89a:	cmp	r3, r4
    f89c:	mov.w	r2, r2, asr #2
    f8a0:	it	eq
    f8a2:	moveq	r3, #0
    f8a4:	str	r2, [r0, #16]
    f8a6:	it	eq
    f8a8:	streq	r3, [r0, #20]
    f8aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f8ae:	ldr.w	ip, [ip]
    f8b2:	lsl.w	ip, ip, r8
    f8b6:	orr.w	r7, ip, r7
    f8ba:	str.w	r7, [r9], #4
    f8be:	ldr.w	r7, [lr], #4
    f8c2:	lsrs	r7, r1
    f8c4:	b.n	f87c <rshift+0x4c>
    f8c6:	ldr.w	ip, [r1], #4
    f8ca:	str.w	ip, [r7, #4]!
    f8ce:	b.n	f858 <rshift+0x28>
    f8d0:	mov	r3, r4
    f8d2:	b.n	f898 <rshift+0x68>

0000f8d4 <__hexdig_fun>:
    f8d4:	sub.w	r3, r0, #48	; 0x30
    f8d8:	cmp	r3, #9
    f8da:	bhi.n	f8e2 <__hexdig_fun+0xe>
    f8dc:	subs	r0, #32
    f8de:	uxtb	r0, r0
    f8e0:	bx	lr
    f8e2:	sub.w	r3, r0, #97	; 0x61
    f8e6:	cmp	r3, #5
    f8e8:	bhi.n	f8ee <__hexdig_fun+0x1a>
    f8ea:	subs	r0, #71	; 0x47
    f8ec:	b.n	f8de <__hexdig_fun+0xa>
    f8ee:	sub.w	r3, r0, #65	; 0x41
    f8f2:	cmp	r3, #5
    f8f4:	bhi.n	f8fa <__hexdig_fun+0x26>
    f8f6:	subs	r0, #39	; 0x27
    f8f8:	b.n	f8de <__hexdig_fun+0xa>
    f8fa:	movs	r0, #0
    f8fc:	bx	lr
	...

0000f900 <__gethex>:
    f900:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f904:	mov	r7, r2
    f906:	ldr	r2, [r1, #0]
    f908:	sub	sp, #20
    f90a:	add.w	fp, r2, #2
    f90e:	rsb	r2, r2, #4278255360	; 0xff00ff00
    f912:	add.w	r2, r2, #16711680	; 0xff0000
    f916:	mov	r9, r0
    f918:	mov	sl, r1
    f91a:	str	r3, [sp, #8]
    f91c:	adds	r2, #254	; 0xfe
    f91e:	add.w	r3, r2, fp
    f922:	mov	r8, fp
    f924:	ldrb.w	r0, [fp], #1
    f928:	str	r3, [sp, #4]
    f92a:	cmp	r0, #48	; 0x30
    f92c:	beq.n	f91e <__gethex+0x1e>
    f92e:	bl	f8d4 <__hexdig_fun>
    f932:	mov	r4, r0
    f934:	cmp	r0, #0
    f936:	bne.n	f9aa <__gethex+0xaa>
    f938:	ldr	r1, [pc, #668]	; (fbd8 <__gethex+0x2d8>)
    f93a:	movs	r2, #1
    f93c:	mov	r0, r8
    f93e:	bl	e994 <strncmp>
    f942:	mov	r6, r0
    f944:	cmp	r0, #0
    f946:	bne.n	fa1c <__gethex+0x11c>
    f948:	ldrb.w	r0, [r8, #1]
    f94c:	mov	r5, fp
    f94e:	bl	f8d4 <__hexdig_fun>
    f952:	cmp	r0, #0
    f954:	beq.n	fa20 <__gethex+0x120>
    f956:	mov	r2, fp
    f958:	ldrb	r0, [r2, #0]
    f95a:	cmp	r0, #48	; 0x30
    f95c:	mov	r8, r2
    f95e:	add.w	r2, r2, #1
    f962:	beq.n	f958 <__gethex+0x58>
    f964:	bl	f8d4 <__hexdig_fun>
    f968:	movs	r3, #1
    f96a:	clz	r4, r0
    f96e:	lsrs	r4, r4, #5
    f970:	mov	r6, fp
    f972:	str	r3, [sp, #4]
    f974:	mov	r2, r8
    f976:	mov	r5, r2
    f978:	adds	r2, #1
    f97a:	ldrb	r0, [r5, #0]
    f97c:	bl	f8d4 <__hexdig_fun>
    f980:	cmp	r0, #0
    f982:	bne.n	f976 <__gethex+0x76>
    f984:	ldr	r1, [pc, #592]	; (fbd8 <__gethex+0x2d8>)
    f986:	movs	r2, #1
    f988:	mov	r0, r5
    f98a:	bl	e994 <strncmp>
    f98e:	cbnz	r0, f9b0 <__gethex+0xb0>
    f990:	cbnz	r6, f9a4 <__gethex+0xa4>
    f992:	adds	r6, r5, #1
    f994:	mov	r2, r6
    f996:	mov	r5, r2
    f998:	adds	r2, #1
    f99a:	ldrb	r0, [r5, #0]
    f99c:	bl	f8d4 <__hexdig_fun>
    f9a0:	cmp	r0, #0
    f9a2:	bne.n	f996 <__gethex+0x96>
    f9a4:	subs	r3, r6, r5
    f9a6:	lsls	r6, r3, #2
    f9a8:	b.n	f9b4 <__gethex+0xb4>
    f9aa:	movs	r4, #0
    f9ac:	mov	r6, r4
    f9ae:	b.n	f974 <__gethex+0x74>
    f9b0:	cmp	r6, #0
    f9b2:	bne.n	f9a4 <__gethex+0xa4>
    f9b4:	ldrb	r3, [r5, #0]
    f9b6:	and.w	r3, r3, #223	; 0xdf
    f9ba:	cmp	r3, #80	; 0x50
    f9bc:	bne.n	fa3a <__gethex+0x13a>
    f9be:	ldrb	r3, [r5, #1]
    f9c0:	cmp	r3, #43	; 0x2b
    f9c2:	beq.n	fa24 <__gethex+0x124>
    f9c4:	cmp	r3, #45	; 0x2d
    f9c6:	beq.n	fa2c <__gethex+0x12c>
    f9c8:	adds	r1, r5, #1
    f9ca:	mov.w	fp, #0
    f9ce:	ldrb	r0, [r1, #0]
    f9d0:	bl	f8d4 <__hexdig_fun>
    f9d4:	subs	r2, r0, #1
    f9d6:	uxtb	r2, r2
    f9d8:	cmp	r2, #24
    f9da:	bhi.n	fa3a <__gethex+0x13a>
    f9dc:	sub.w	r2, r0, #16
    f9e0:	ldrb.w	r0, [r1, #1]!
    f9e4:	bl	f8d4 <__hexdig_fun>
    f9e8:	add.w	ip, r0, #4294967295
    f9ec:	uxtb.w	ip, ip
    f9f0:	cmp.w	ip, #24
    f9f4:	bls.n	fa32 <__gethex+0x132>
    f9f6:	cmp.w	fp, #0
    f9fa:	beq.n	f9fe <__gethex+0xfe>
    f9fc:	negs	r2, r2
    f9fe:	add	r6, r2
    fa00:	str.w	r1, [sl]
    fa04:	cbz	r4, fa3e <__gethex+0x13e>
    fa06:	ldr	r3, [sp, #4]
    fa08:	cmp	r3, #0
    fa0a:	ite	ne
    fa0c:	movne.w	r8, #0
    fa10:	moveq.w	r8, #6
    fa14:	mov	r0, r8
    fa16:	add	sp, #20
    fa18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa1c:	mov	r5, r8
    fa1e:	mov	r6, r4
    fa20:	movs	r4, #1
    fa22:	b.n	f9b4 <__gethex+0xb4>
    fa24:	mov.w	fp, #0
    fa28:	adds	r1, r5, #2
    fa2a:	b.n	f9ce <__gethex+0xce>
    fa2c:	mov.w	fp, #1
    fa30:	b.n	fa28 <__gethex+0x128>
    fa32:	movs	r3, #10
    fa34:	mla	r0, r3, r2, r0
    fa38:	b.n	f9dc <__gethex+0xdc>
    fa3a:	mov	r1, r5
    fa3c:	b.n	fa00 <__gethex+0x100>
    fa3e:	sub.w	r3, r5, r8
    fa42:	subs	r3, #1
    fa44:	mov	r1, r4
    fa46:	cmp	r3, #7
    fa48:	bgt.n	fa60 <__gethex+0x160>
    fa4a:	mov	r0, r9
    fa4c:	bl	ff04 <_Balloc>
    fa50:	mov	r4, r0
    fa52:	cbnz	r0, fa66 <__gethex+0x166>
    fa54:	ldr	r3, [pc, #388]	; (fbdc <__gethex+0x2dc>)
    fa56:	mov	r2, r0
    fa58:	movs	r1, #228	; 0xe4
    fa5a:	ldr	r0, [pc, #388]	; (fbe0 <__gethex+0x2e0>)
    fa5c:	bl	1144c <__assert_func>
    fa60:	adds	r1, #1
    fa62:	asrs	r3, r3, #1
    fa64:	b.n	fa46 <__gethex+0x146>
    fa66:	add.w	sl, r0, #20
    fa6a:	movs	r3, #0
    fa6c:	ldr	r1, [pc, #360]	; (fbd8 <__gethex+0x2d8>)
    fa6e:	str.w	sl, [sp, #4]
    fa72:	mov	fp, r3
    fa74:	cmp	r8, r5
    fa76:	bcc.n	fafe <__gethex+0x1fe>
    fa78:	ldr	r0, [sp, #4]
    fa7a:	str.w	fp, [r0], #4
    fa7e:	sub.w	r0, r0, sl
    fa82:	asrs	r0, r0, #2
    fa84:	str	r0, [r4, #16]
    fa86:	mov.w	r8, r0, lsl #5
    fa8a:	mov	r0, fp
    fa8c:	bl	100e8 <__hi0bits>
    fa90:	ldr	r5, [r7, #0]
    fa92:	sub.w	r0, r8, r0
    fa96:	cmp	r0, r5
    fa98:	ble.n	fb4e <__gethex+0x24e>
    fa9a:	sub.w	r8, r0, r5
    fa9e:	mov	r1, r8
    faa0:	mov	r0, r4
    faa2:	bl	10816 <__any_on>
    faa6:	mov	fp, r0
    faa8:	cbz	r0, fada <__gethex+0x1da>
    faaa:	add.w	r3, r8, #4294967295
    faae:	asrs	r1, r3, #5
    fab0:	and.w	r2, r3, #31
    fab4:	ldr.w	r1, [sl, r1, lsl #2]
    fab8:	mov.w	fp, #1
    fabc:	lsl.w	r2, fp, r2
    fac0:	tst	r2, r1
    fac2:	beq.n	fada <__gethex+0x1da>
    fac4:	cmp	r3, fp
    fac6:	ble.n	fad6 <__gethex+0x1d6>
    fac8:	sub.w	r1, r8, #2
    facc:	mov	r0, r4
    face:	bl	10816 <__any_on>
    fad2:	cmp	r0, #0
    fad4:	bne.n	fb48 <__gethex+0x248>
    fad6:	mov.w	fp, #2
    fada:	mov	r1, r8
    fadc:	mov	r0, r4
    fade:	bl	f830 <rshift>
    fae2:	add	r6, r8
    fae4:	ldr	r3, [r7, #8]
    fae6:	cmp	r3, r6
    fae8:	bge.n	fb6e <__gethex+0x26e>
    faea:	mov	r1, r4
    faec:	mov	r0, r9
    faee:	bl	ff84 <_Bfree>
    faf2:	ldr	r2, [sp, #56]	; 0x38
    faf4:	movs	r3, #0
    faf6:	str	r3, [r2, #0]
    faf8:	mov.w	r8, #163	; 0xa3
    fafc:	b.n	fa14 <__gethex+0x114>
    fafe:	ldrb.w	r2, [r5, #-1]!
    fb02:	cmp	r2, #46	; 0x2e
    fb04:	beq.n	fb30 <__gethex+0x230>
    fb06:	cmp	r3, #32
    fb08:	bne.n	fb18 <__gethex+0x218>
    fb0a:	ldr	r3, [sp, #4]
    fb0c:	str.w	fp, [r3], #4
    fb10:	mov.w	fp, #0
    fb14:	str	r3, [sp, #4]
    fb16:	mov	r3, fp
    fb18:	ldrb	r0, [r5, #0]
    fb1a:	str	r3, [sp, #12]
    fb1c:	bl	f8d4 <__hexdig_fun>
    fb20:	ldr	r3, [sp, #12]
    fb22:	and.w	r0, r0, #15
    fb26:	lsls	r0, r3
    fb28:	orr.w	fp, fp, r0
    fb2c:	adds	r3, #4
    fb2e:	b.n	fa74 <__gethex+0x174>
    fb30:	cmp	r8, r5
    fb32:	bhi.n	fb06 <__gethex+0x206>
    fb34:	movs	r2, #1
    fb36:	mov	r0, r5
    fb38:	str	r3, [sp, #12]
    fb3a:	bl	e994 <strncmp>
    fb3e:	ldr	r1, [pc, #152]	; (fbd8 <__gethex+0x2d8>)
    fb40:	ldr	r3, [sp, #12]
    fb42:	cmp	r0, #0
    fb44:	bne.n	fb06 <__gethex+0x206>
    fb46:	b.n	fa74 <__gethex+0x174>
    fb48:	mov.w	fp, #3
    fb4c:	b.n	fada <__gethex+0x1da>
    fb4e:	bge.n	fb68 <__gethex+0x268>
    fb50:	sub.w	r8, r5, r0
    fb54:	mov	r1, r4
    fb56:	mov	r2, r8
    fb58:	mov	r0, r9
    fb5a:	bl	103b8 <__lshift>
    fb5e:	sub.w	r6, r6, r8
    fb62:	mov	r4, r0
    fb64:	add.w	sl, r0, #20
    fb68:	mov.w	fp, #0
    fb6c:	b.n	fae4 <__gethex+0x1e4>
    fb6e:	ldr	r3, [r7, #4]
    fb70:	cmp	r3, r6
    fb72:	ble.n	fc5c <__gethex+0x35c>
    fb74:	subs	r6, r3, r6
    fb76:	cmp	r5, r6
    fb78:	bgt.n	fbe4 <__gethex+0x2e4>
    fb7a:	ldr	r3, [r7, #12]
    fb7c:	cmp	r3, #2
    fb7e:	beq.n	fbc8 <__gethex+0x2c8>
    fb80:	cmp	r3, #3
    fb82:	beq.n	fbd0 <__gethex+0x2d0>
    fb84:	cmp	r3, #1
    fb86:	bne.n	fbb4 <__gethex+0x2b4>
    fb88:	cmp	r5, r6
    fb8a:	bne.n	fbb4 <__gethex+0x2b4>
    fb8c:	cmp	r5, #1
    fb8e:	bne.n	fba8 <__gethex+0x2a8>
    fb90:	ldr	r2, [sp, #8]
    fb92:	ldr	r3, [r7, #4]
    fb94:	str	r3, [r2, #0]
    fb96:	movs	r3, #1
    fb98:	str	r3, [r4, #16]
    fb9a:	str.w	r3, [sl]
    fb9e:	ldr	r3, [sp, #56]	; 0x38
    fba0:	mov.w	r8, #98	; 0x62
    fba4:	str	r4, [r3, #0]
    fba6:	b.n	fa14 <__gethex+0x114>
    fba8:	subs	r1, r5, #1
    fbaa:	mov	r0, r4
    fbac:	bl	10816 <__any_on>
    fbb0:	cmp	r0, #0
    fbb2:	bne.n	fb90 <__gethex+0x290>
    fbb4:	mov	r1, r4
    fbb6:	mov	r0, r9
    fbb8:	bl	ff84 <_Bfree>
    fbbc:	ldr	r2, [sp, #56]	; 0x38
    fbbe:	movs	r3, #0
    fbc0:	str	r3, [r2, #0]
    fbc2:	mov.w	r8, #80	; 0x50
    fbc6:	b.n	fa14 <__gethex+0x114>
    fbc8:	ldr	r3, [sp, #60]	; 0x3c
    fbca:	cmp	r3, #0
    fbcc:	bne.n	fbb4 <__gethex+0x2b4>
    fbce:	b.n	fb90 <__gethex+0x290>
    fbd0:	ldr	r3, [sp, #60]	; 0x3c
    fbd2:	cmp	r3, #0
    fbd4:	bne.n	fb90 <__gethex+0x290>
    fbd6:	b.n	fbb4 <__gethex+0x2b4>
    fbd8:	.word	0x20000d11
    fbdc:	.word	0x2000138d
    fbe0:	.word	0x200011ae
    fbe4:	add.w	r8, r6, #4294967295
    fbe8:	cmp.w	fp, #0
    fbec:	bne.n	fc56 <__gethex+0x356>
    fbee:	cmp.w	r8, #0
    fbf2:	beq.n	fbfe <__gethex+0x2fe>
    fbf4:	mov	r1, r8
    fbf6:	mov	r0, r4
    fbf8:	bl	10816 <__any_on>
    fbfc:	mov	fp, r0
    fbfe:	mov.w	r2, r8, asr #5
    fc02:	movs	r3, #1
    fc04:	ldr.w	r2, [sl, r2, lsl #2]
    fc08:	and.w	r8, r8, #31
    fc0c:	lsl.w	r3, r3, r8
    fc10:	tst	r3, r2
    fc12:	mov	r1, r6
    fc14:	mov	r0, r4
    fc16:	it	ne
    fc18:	orrne.w	fp, fp, #2
    fc1c:	subs	r5, r5, r6
    fc1e:	bl	f830 <rshift>
    fc22:	ldr	r6, [r7, #4]
    fc24:	mov.w	r8, #2
    fc28:	cmp.w	fp, #0
    fc2c:	beq.n	fcc4 <__gethex+0x3c4>
    fc2e:	ldr	r3, [r7, #12]
    fc30:	cmp	r3, #2
    fc32:	beq.n	fc62 <__gethex+0x362>
    fc34:	cmp	r3, #3
    fc36:	beq.n	fc6a <__gethex+0x36a>
    fc38:	cmp	r3, #1
    fc3a:	bne.n	fc50 <__gethex+0x350>
    fc3c:	tst.w	fp, #2
    fc40:	beq.n	fc50 <__gethex+0x350>
    fc42:	ldr.w	r3, [sl]
    fc46:	orr.w	fp, fp, r3
    fc4a:	tst.w	fp, #1
    fc4e:	bne.n	fc70 <__gethex+0x370>
    fc50:	orr.w	r8, r8, #16
    fc54:	b.n	fcc4 <__gethex+0x3c4>
    fc56:	mov.w	fp, #1
    fc5a:	b.n	fbfe <__gethex+0x2fe>
    fc5c:	mov.w	r8, #1
    fc60:	b.n	fc28 <__gethex+0x328>
    fc62:	ldr	r3, [sp, #60]	; 0x3c
    fc64:	rsb	r3, r3, #1
    fc68:	str	r3, [sp, #60]	; 0x3c
    fc6a:	ldr	r3, [sp, #60]	; 0x3c
    fc6c:	cmp	r3, #0
    fc6e:	beq.n	fc50 <__gethex+0x350>
    fc70:	ldr.w	fp, [r4, #16]
    fc74:	add.w	r2, r4, #20
    fc78:	mov.w	r3, fp, lsl #2
    fc7c:	str	r3, [sp, #4]
    fc7e:	add.w	r0, r2, fp, lsl #2
    fc82:	movs	r3, #0
    fc84:	mov	ip, r2
    fc86:	ldr.w	r1, [r2], #4
    fc8a:	cmp.w	r1, #4294967295
    fc8e:	beq.n	fcce <__gethex+0x3ce>
    fc90:	adds	r1, #1
    fc92:	str.w	r1, [ip]
    fc96:	cmp.w	r8, #2
    fc9a:	add.w	r2, r4, #20
    fc9e:	bne.n	fd1c <__gethex+0x41c>
    fca0:	ldr	r3, [r7, #0]
    fca2:	subs	r3, #1
    fca4:	cmp	r3, r5
    fca6:	bne.n	fcc0 <__gethex+0x3c0>
    fca8:	asrs	r1, r5, #5
    fcaa:	movs	r3, #1
    fcac:	and.w	r5, r5, #31
    fcb0:	lsl.w	r5, r3, r5
    fcb4:	ldr.w	r3, [r2, r1, lsl #2]
    fcb8:	tst	r5, r3
    fcba:	it	ne
    fcbc:	movne.w	r8, #1
    fcc0:	orr.w	r8, r8, #32
    fcc4:	ldr	r3, [sp, #56]	; 0x38
    fcc6:	str	r4, [r3, #0]
    fcc8:	ldr	r3, [sp, #8]
    fcca:	str	r6, [r3, #0]
    fccc:	b.n	fa14 <__gethex+0x114>
    fcce:	cmp	r0, r2
    fcd0:	str.w	r3, [r2, #-4]
    fcd4:	bhi.n	fc84 <__gethex+0x384>
    fcd6:	ldr	r2, [r4, #8]
    fcd8:	cmp	fp, r2
    fcda:	blt.n	fd0c <__gethex+0x40c>
    fcdc:	ldr	r1, [r4, #4]
    fcde:	mov	r0, r9
    fce0:	adds	r1, #1
    fce2:	bl	ff04 <_Balloc>
    fce6:	mov	sl, r0
    fce8:	cbnz	r0, fcf2 <__gethex+0x3f2>
    fcea:	ldr	r3, [pc, #108]	; (fd58 <__gethex+0x458>)
    fcec:	mov	r2, r0
    fcee:	movs	r1, #132	; 0x84
    fcf0:	b.n	fa5a <__gethex+0x15a>
    fcf2:	ldr	r2, [r4, #16]
    fcf4:	adds	r2, #2
    fcf6:	add.w	r1, r4, #12
    fcfa:	lsls	r2, r2, #2
    fcfc:	adds	r0, #12
    fcfe:	bl	a000 <memcpy>
    fd02:	mov	r1, r4
    fd04:	mov	r0, r9
    fd06:	bl	ff84 <_Bfree>
    fd0a:	mov	r4, sl
    fd0c:	ldr	r2, [r4, #16]
    fd0e:	adds	r1, r2, #1
    fd10:	add.w	r2, r4, r2, lsl #2
    fd14:	str	r1, [r4, #16]
    fd16:	movs	r1, #1
    fd18:	str	r1, [r2, #20]
    fd1a:	b.n	fc96 <__gethex+0x396>
    fd1c:	ldr	r1, [r4, #16]
    fd1e:	cmp	r1, fp
    fd20:	ble.n	fd3a <__gethex+0x43a>
    fd22:	movs	r1, #1
    fd24:	mov	r0, r4
    fd26:	bl	f830 <rshift>
    fd2a:	ldr	r3, [r7, #8]
    fd2c:	adds	r6, #1
    fd2e:	cmp	r3, r6
    fd30:	blt.w	faea <__gethex+0x1ea>
    fd34:	mov.w	r8, #1
    fd38:	b.n	fcc0 <__gethex+0x3c0>
    fd3a:	ands.w	r5, r5, #31
    fd3e:	beq.n	fd34 <__gethex+0x434>
    fd40:	ldr	r3, [sp, #4]
    fd42:	add	r2, r3
    fd44:	rsb	r5, r5, #32
    fd48:	ldr.w	r0, [r2, #-4]
    fd4c:	bl	100e8 <__hi0bits>
    fd50:	cmp	r0, r5
    fd52:	blt.n	fd22 <__gethex+0x422>
    fd54:	b.n	fd34 <__gethex+0x434>
    fd56:	nop
    fd58:	.word	0x2000138d

0000fd5c <L_shift>:
    fd5c:	rsb	r2, r2, #8
    fd60:	lsls	r2, r2, #2
    fd62:	push	{r4, r5, r6, lr}
    fd64:	rsb	r6, r2, #32
    fd68:	ldr	r3, [r0, #4]
    fd6a:	ldr	r4, [r0, #0]
    fd6c:	lsl.w	r5, r3, r6
    fd70:	orrs	r4, r5
    fd72:	lsrs	r3, r2
    fd74:	str	r4, [r0, #0]
    fd76:	str.w	r3, [r0, #4]!
    fd7a:	cmp	r0, r1
    fd7c:	bcc.n	fd68 <L_shift+0xc>
    fd7e:	pop	{r4, r5, r6, pc}

0000fd80 <__match>:
    fd80:	push	{r4, r5, lr}
    fd82:	ldr	r3, [r0, #0]
    fd84:	adds	r3, #1
    fd86:	ldrb.w	r4, [r1], #1
    fd8a:	cbnz	r4, fd92 <__match+0x12>
    fd8c:	str	r3, [r0, #0]
    fd8e:	movs	r0, #1
    fd90:	pop	{r4, r5, pc}
    fd92:	ldrb.w	r2, [r3], #1
    fd96:	sub.w	r5, r2, #65	; 0x41
    fd9a:	cmp	r5, #25
    fd9c:	it	ls
    fd9e:	addls	r2, #32
    fda0:	cmp	r2, r4
    fda2:	beq.n	fd86 <__match+0x6>
    fda4:	movs	r0, #0
    fda6:	b.n	fd90 <__match+0x10>

0000fda8 <__hexnan>:
    fda8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fdac:	ldr	r3, [r1, #0]
    fdae:	ldr	r1, [r0, #0]
    fdb0:	asrs	r6, r3, #5
    fdb2:	add.w	r6, r2, r6, lsl #2
    fdb6:	ands.w	r3, r3, #31
    fdba:	sub	sp, #28
    fdbc:	it	ne
    fdbe:	addne	r6, #4
    fdc0:	movs	r5, #0
    fdc2:	subs	r7, r6, #4
    fdc4:	mov	sl, r0
    fdc6:	mov	r8, r2
    fdc8:	str	r3, [sp, #4]
    fdca:	str.w	r5, [r6, #-4]
    fdce:	mov	r9, r7
    fdd0:	mov	r4, r7
    fdd2:	str	r5, [sp, #8]
    fdd4:	mov	fp, r5
    fdd6:	ldrb	r2, [r1, #1]
    fdd8:	adds	r3, r1, #1
    fdda:	str	r3, [sp, #12]
    fddc:	cbz	r2, fe30 <__hexnan+0x88>
    fdde:	mov	r0, r2
    fde0:	str	r1, [sp, #20]
    fde2:	str	r2, [sp, #16]
    fde4:	bl	f8d4 <__hexdig_fun>
    fde8:	cmp	r0, #0
    fdea:	bne.n	fe8c <__hexnan+0xe4>
    fdec:	ldr	r2, [sp, #16]
    fdee:	ldr	r1, [sp, #20]
    fdf0:	cmp	r2, #32
    fdf2:	bhi.n	fe26 <__hexnan+0x7e>
    fdf4:	ldr	r3, [sp, #8]
    fdf6:	cmp	fp, r3
    fdf8:	ble.n	fe22 <__hexnan+0x7a>
    fdfa:	cmp	r4, r9
    fdfc:	bcs.n	fe0c <__hexnan+0x64>
    fdfe:	cmp	r5, #7
    fe00:	bgt.n	fe0c <__hexnan+0x64>
    fe02:	mov	r2, r5
    fe04:	mov	r1, r9
    fe06:	mov	r0, r4
    fe08:	bl	fd5c <L_shift>
    fe0c:	cmp	r4, r8
    fe0e:	bls.n	feb2 <__hexnan+0x10a>
    fe10:	movs	r3, #0
    fe12:	sub.w	r9, r4, #4
    fe16:	str.w	r3, [r4, #-4]
    fe1a:	str.w	fp, [sp, #8]
    fe1e:	mov	r4, r9
    fe20:	mov	r5, r3
    fe22:	ldr	r1, [sp, #12]
    fe24:	b.n	fdd6 <__hexnan+0x2e>
    fe26:	cmp	r2, #41	; 0x29
    fe28:	bne.n	fed6 <__hexnan+0x12e>
    fe2a:	adds	r1, #2
    fe2c:	str.w	r1, [sl]
    fe30:	cmp.w	fp, #0
    fe34:	beq.n	fed6 <__hexnan+0x12e>
    fe36:	cmp	r4, r9
    fe38:	bcs.n	fe48 <__hexnan+0xa0>
    fe3a:	cmp	r5, #7
    fe3c:	bgt.n	fe48 <__hexnan+0xa0>
    fe3e:	mov	r2, r5
    fe40:	mov	r1, r9
    fe42:	mov	r0, r4
    fe44:	bl	fd5c <L_shift>
    fe48:	cmp	r4, r8
    fe4a:	bls.n	feb6 <__hexnan+0x10e>
    fe4c:	sub.w	r2, r8, #4
    fe50:	mov	r3, r4
    fe52:	ldr.w	r1, [r3], #4
    fe56:	str.w	r1, [r2, #4]!
    fe5a:	cmp	r7, r3
    fe5c:	bcs.n	fe52 <__hexnan+0xaa>
    fe5e:	subs	r3, r7, r4
    fe60:	bic.w	r3, r3, #3
    fe64:	adds	r3, #4
    fe66:	subs	r6, #3
    fe68:	adds	r4, #1
    fe6a:	cmp	r6, r4
    fe6c:	it	cc
    fe6e:	movcc	r3, #4
    fe70:	add	r3, r8
    fe72:	movs	r2, #0
    fe74:	str.w	r2, [r3], #4
    fe78:	cmp	r7, r3
    fe7a:	bcs.n	fe74 <__hexnan+0xcc>
    fe7c:	ldr	r3, [r7, #0]
    fe7e:	cbnz	r3, fe88 <__hexnan+0xe0>
    fe80:	cmp	r7, r8
    fe82:	bne.n	fed2 <__hexnan+0x12a>
    fe84:	movs	r3, #1
    fe86:	str	r3, [r7, #0]
    fe88:	movs	r0, #5
    fe8a:	b.n	fed8 <__hexnan+0x130>
    fe8c:	adds	r5, #1
    fe8e:	cmp	r5, #8
    fe90:	add.w	fp, fp, #1
    fe94:	ble.n	fea4 <__hexnan+0xfc>
    fe96:	cmp	r4, r8
    fe98:	bls.n	fe22 <__hexnan+0x7a>
    fe9a:	movs	r3, #0
    fe9c:	str.w	r3, [r4, #-4]
    fea0:	movs	r5, #1
    fea2:	subs	r4, #4
    fea4:	ldr	r2, [r4, #0]
    fea6:	and.w	r0, r0, #15
    feaa:	orr.w	r0, r0, r2, lsl #4
    feae:	str	r0, [r4, #0]
    feb0:	b.n	fe22 <__hexnan+0x7a>
    feb2:	movs	r5, #8
    feb4:	b.n	fe22 <__hexnan+0x7a>
    feb6:	ldr	r3, [sp, #4]
    feb8:	cmp	r3, #0
    feba:	beq.n	fe7c <__hexnan+0xd4>
    febc:	rsb	r3, r3, #32
    fec0:	mov.w	r2, #4294967295
    fec4:	lsrs	r2, r3
    fec6:	ldr.w	r3, [r6, #-4]
    feca:	ands	r3, r2
    fecc:	str.w	r3, [r6, #-4]
    fed0:	b.n	fe7c <__hexnan+0xd4>
    fed2:	subs	r7, #4
    fed4:	b.n	fe7c <__hexnan+0xd4>
    fed6:	movs	r0, #4
    fed8:	add	sp, #28
    feda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fede <__ascii_mbtowc>:
    fede:	sub	sp, #8
    fee0:	cbnz	r1, fee4 <__ascii_mbtowc+0x6>
    fee2:	add	r1, sp, #4
    fee4:	cbz	r2, fef8 <__ascii_mbtowc+0x1a>
    fee6:	cbz	r3, fefc <__ascii_mbtowc+0x1e>
    fee8:	ldrb	r3, [r2, #0]
    feea:	str	r3, [r1, #0]
    feec:	ldrb	r2, [r2, #0]
    feee:	subs	r0, r2, #0
    fef0:	it	ne
    fef2:	movne	r0, #1
    fef4:	add	sp, #8
    fef6:	bx	lr
    fef8:	mov	r0, r2
    fefa:	b.n	fef4 <__ascii_mbtowc+0x16>
    fefc:	mvn.w	r0, #1
    ff00:	b.n	fef4 <__ascii_mbtowc+0x16>
	...

0000ff04 <_Balloc>:
    ff04:	push	{r4, r5, r6, lr}
    ff06:	ldr	r6, [r0, #28]
    ff08:	mov	r4, r0
    ff0a:	mov	r5, r1
    ff0c:	cbnz	r6, ff2c <_Balloc+0x28>
    ff0e:	movs	r0, #16
    ff10:	bl	ca00 <malloc>
    ff14:	mov	r2, r0
    ff16:	str	r0, [r4, #28]
    ff18:	cbnz	r0, ff24 <_Balloc+0x20>
    ff1a:	ldr	r3, [pc, #96]	; (ff7c <_Balloc+0x78>)
    ff1c:	ldr	r0, [pc, #96]	; (ff80 <_Balloc+0x7c>)
    ff1e:	movs	r1, #107	; 0x6b
    ff20:	bl	1144c <__assert_func>
    ff24:	strd	r6, r6, [r0, #4]
    ff28:	str	r6, [r0, #0]
    ff2a:	str	r6, [r0, #12]
    ff2c:	ldr	r6, [r4, #28]
    ff2e:	ldr	r3, [r6, #12]
    ff30:	cbz	r3, ff54 <_Balloc+0x50>
    ff32:	ldr	r3, [r4, #28]
    ff34:	ldr	r3, [r3, #12]
    ff36:	ldr.w	r0, [r3, r5, lsl #2]
    ff3a:	cbnz	r0, ff6c <_Balloc+0x68>
    ff3c:	movs	r1, #1
    ff3e:	lsl.w	r6, r1, r5
    ff42:	adds	r2, r6, #5
    ff44:	lsls	r2, r2, #2
    ff46:	mov	r0, r4
    ff48:	bl	11488 <_calloc_r>
    ff4c:	cbz	r0, ff68 <_Balloc+0x64>
    ff4e:	strd	r5, r6, [r0, #4]
    ff52:	b.n	ff72 <_Balloc+0x6e>
    ff54:	movs	r2, #33	; 0x21
    ff56:	movs	r1, #4
    ff58:	mov	r0, r4
    ff5a:	bl	11488 <_calloc_r>
    ff5e:	ldr	r3, [r4, #28]
    ff60:	str	r0, [r6, #12]
    ff62:	ldr	r3, [r3, #12]
    ff64:	cmp	r3, #0
    ff66:	bne.n	ff32 <_Balloc+0x2e>
    ff68:	movs	r0, #0
    ff6a:	pop	{r4, r5, r6, pc}
    ff6c:	ldr	r2, [r0, #0]
    ff6e:	str.w	r2, [r3, r5, lsl #2]
    ff72:	movs	r3, #0
    ff74:	strd	r3, r3, [r0, #12]
    ff78:	b.n	ff6a <_Balloc+0x66>
    ff7a:	nop
    ff7c:	.word	0x2000131d
    ff80:	.word	0x20000c6c

0000ff84 <_Bfree>:
    ff84:	push	{r4, r5, r6, lr}
    ff86:	ldr	r6, [r0, #28]
    ff88:	mov	r5, r0
    ff8a:	mov	r4, r1
    ff8c:	cbnz	r6, ffac <_Bfree+0x28>
    ff8e:	movs	r0, #16
    ff90:	bl	ca00 <malloc>
    ff94:	mov	r2, r0
    ff96:	str	r0, [r5, #28]
    ff98:	cbnz	r0, ffa4 <_Bfree+0x20>
    ff9a:	ldr	r3, [pc, #36]	; (ffc0 <_Bfree+0x3c>)
    ff9c:	ldr	r0, [pc, #36]	; (ffc4 <_Bfree+0x40>)
    ff9e:	movs	r1, #143	; 0x8f
    ffa0:	bl	1144c <__assert_func>
    ffa4:	strd	r6, r6, [r0, #4]
    ffa8:	str	r6, [r0, #0]
    ffaa:	str	r6, [r0, #12]
    ffac:	cbz	r4, ffbe <_Bfree+0x3a>
    ffae:	ldr	r3, [r5, #28]
    ffb0:	ldr	r2, [r4, #4]
    ffb2:	ldr	r3, [r3, #12]
    ffb4:	ldr.w	r1, [r3, r2, lsl #2]
    ffb8:	str	r1, [r4, #0]
    ffba:	str.w	r4, [r3, r2, lsl #2]
    ffbe:	pop	{r4, r5, r6, pc}
    ffc0:	.word	0x2000131d
    ffc4:	.word	0x20000c6c

0000ffc8 <__multadd>:
    ffc8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffcc:	ldr	r5, [r1, #16]
    ffce:	mov	r7, r0
    ffd0:	mov	r4, r1
    ffd2:	mov	r6, r3
    ffd4:	add.w	ip, r1, #20
    ffd8:	movs	r0, #0
    ffda:	ldr.w	r3, [ip]
    ffde:	uxth	r1, r3
    ffe0:	mla	r1, r2, r1, r6
    ffe4:	lsrs	r6, r3, #16
    ffe6:	lsrs	r3, r1, #16
    ffe8:	mla	r3, r2, r6, r3
    ffec:	uxth	r1, r1
    ffee:	adds	r0, #1
    fff0:	add.w	r1, r1, r3, lsl #16
    fff4:	cmp	r5, r0
    fff6:	str.w	r1, [ip], #4
    fffa:	mov.w	r6, r3, lsr #16
    fffe:	bgt.n	ffda <__multadd+0x12>
   10000:	cbz	r6, 10046 <__multadd+0x7e>
   10002:	ldr	r3, [r4, #8]
   10004:	cmp	r3, r5
   10006:	bgt.n	1003c <__multadd+0x74>
   10008:	ldr	r1, [r4, #4]
   1000a:	mov	r0, r7
   1000c:	adds	r1, #1
   1000e:	bl	ff04 <_Balloc>
   10012:	mov	r8, r0
   10014:	cbnz	r0, 10022 <__multadd+0x5a>
   10016:	mov	r2, r0
   10018:	ldr	r3, [pc, #48]	; (1004c <__multadd+0x84>)
   1001a:	ldr	r0, [pc, #52]	; (10050 <__multadd+0x88>)
   1001c:	movs	r1, #186	; 0xba
   1001e:	bl	1144c <__assert_func>
   10022:	ldr	r2, [r4, #16]
   10024:	adds	r2, #2
   10026:	add.w	r1, r4, #12
   1002a:	lsls	r2, r2, #2
   1002c:	adds	r0, #12
   1002e:	bl	a000 <memcpy>
   10032:	mov	r1, r4
   10034:	mov	r0, r7
   10036:	bl	ff84 <_Bfree>
   1003a:	mov	r4, r8
   1003c:	add.w	r3, r4, r5, lsl #2
   10040:	adds	r5, #1
   10042:	str	r6, [r3, #20]
   10044:	str	r5, [r4, #16]
   10046:	mov	r0, r4
   10048:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1004c:	.word	0x2000138d
   10050:	.word	0x20000c6c

00010054 <__s2b>:
   10054:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10058:	mov	r4, r1
   1005a:	mov	r5, r2
   1005c:	mov	r7, r3
   1005e:	movs	r2, #9
   10060:	adds	r3, #8
   10062:	mov	r6, r0
   10064:	sdiv	r3, r3, r2
   10068:	movs	r1, #0
   1006a:	movs	r2, #1
   1006c:	cmp	r2, r3
   1006e:	blt.n	10084 <__s2b+0x30>
   10070:	mov	r0, r6
   10072:	bl	ff04 <_Balloc>
   10076:	cbnz	r0, 1008a <__s2b+0x36>
   10078:	mov	r2, r0
   1007a:	ldr	r3, [pc, #100]	; (100e0 <__s2b+0x8c>)
   1007c:	ldr	r0, [pc, #100]	; (100e4 <__s2b+0x90>)
   1007e:	movs	r1, #211	; 0xd3
   10080:	bl	1144c <__assert_func>
   10084:	lsls	r2, r2, #1
   10086:	adds	r1, #1
   10088:	b.n	1006c <__s2b+0x18>
   1008a:	ldr	r3, [sp, #32]
   1008c:	str	r3, [r0, #20]
   1008e:	cmp	r5, #9
   10090:	mov.w	r3, #1
   10094:	str	r3, [r0, #16]
   10096:	ble.n	100c6 <__s2b+0x72>
   10098:	add.w	r9, r4, #9
   1009c:	mov	r8, r9
   1009e:	add	r4, r5
   100a0:	ldrb.w	r3, [r8], #1
   100a4:	mov	r1, r0
   100a6:	subs	r3, #48	; 0x30
   100a8:	movs	r2, #10
   100aa:	mov	r0, r6
   100ac:	bl	ffc8 <__multadd>
   100b0:	cmp	r8, r4
   100b2:	bne.n	100a0 <__s2b+0x4c>
   100b4:	sub.w	r4, r5, #8
   100b8:	add	r4, r9
   100ba:	subs	r5, r5, r4
   100bc:	adds	r3, r4, r5
   100be:	cmp	r3, r7
   100c0:	blt.n	100cc <__s2b+0x78>
   100c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   100c6:	adds	r4, #10
   100c8:	movs	r5, #9
   100ca:	b.n	100ba <__s2b+0x66>
   100cc:	ldrb.w	r3, [r4], #1
   100d0:	mov	r1, r0
   100d2:	subs	r3, #48	; 0x30
   100d4:	movs	r2, #10
   100d6:	mov	r0, r6
   100d8:	bl	ffc8 <__multadd>
   100dc:	b.n	100bc <__s2b+0x68>
   100de:	nop
   100e0:	.word	0x2000138d
   100e4:	.word	0x20000c6c

000100e8 <__hi0bits>:
   100e8:	lsrs	r3, r0, #16
   100ea:	lsls	r3, r3, #16
   100ec:	cbnz	r3, 10124 <__hi0bits+0x3c>
   100ee:	lsls	r0, r0, #16
   100f0:	movs	r3, #16
   100f2:	tst.w	r0, #4278190080	; 0xff000000
   100f6:	itt	eq
   100f8:	lsleq	r0, r0, #8
   100fa:	addeq	r3, #8
   100fc:	tst.w	r0, #4026531840	; 0xf0000000
   10100:	itt	eq
   10102:	lsleq	r0, r0, #4
   10104:	addeq	r3, #4
   10106:	tst.w	r0, #3221225472	; 0xc0000000
   1010a:	itt	eq
   1010c:	lsleq	r0, r0, #2
   1010e:	addeq	r3, #2
   10110:	cmp	r0, #0
   10112:	blt.n	10120 <__hi0bits+0x38>
   10114:	tst.w	r0, #1073741824	; 0x40000000
   10118:	add.w	r3, r3, #1
   1011c:	it	eq
   1011e:	moveq	r3, #32
   10120:	mov	r0, r3
   10122:	bx	lr
   10124:	movs	r3, #0
   10126:	b.n	100f2 <__hi0bits+0xa>

00010128 <__lo0bits>:
   10128:	ldr	r3, [r0, #0]
   1012a:	ands.w	r2, r3, #7
   1012e:	beq.n	1014a <__lo0bits+0x22>
   10130:	lsls	r1, r3, #31
   10132:	bmi.n	1017a <__lo0bits+0x52>
   10134:	lsls	r2, r3, #30
   10136:	itett	mi
   10138:	lsrmi	r3, r3, #1
   1013a:	lsrpl	r3, r3, #2
   1013c:	strmi	r3, [r0, #0]
   1013e:	movmi	r2, #1
   10140:	itt	pl
   10142:	strpl	r3, [r0, #0]
   10144:	movpl	r2, #2
   10146:	mov	r0, r2
   10148:	bx	lr
   1014a:	uxth	r1, r3
   1014c:	cbnz	r1, 10152 <__lo0bits+0x2a>
   1014e:	lsrs	r3, r3, #16
   10150:	movs	r2, #16
   10152:	uxtb	r1, r3
   10154:	cbnz	r1, 1015a <__lo0bits+0x32>
   10156:	adds	r2, #8
   10158:	lsrs	r3, r3, #8
   1015a:	lsls	r1, r3, #28
   1015c:	itt	eq
   1015e:	lsreq	r3, r3, #4
   10160:	addeq	r2, #4
   10162:	lsls	r1, r3, #30
   10164:	itt	eq
   10166:	lsreq	r3, r3, #2
   10168:	addeq	r2, #2
   1016a:	lsls	r1, r3, #31
   1016c:	bmi.n	10176 <__lo0bits+0x4e>
   1016e:	lsrs	r3, r3, #1
   10170:	add.w	r2, r2, #1
   10174:	beq.n	1017e <__lo0bits+0x56>
   10176:	str	r3, [r0, #0]
   10178:	b.n	10146 <__lo0bits+0x1e>
   1017a:	movs	r2, #0
   1017c:	b.n	10146 <__lo0bits+0x1e>
   1017e:	movs	r2, #32
   10180:	b.n	10146 <__lo0bits+0x1e>
	...

00010184 <__i2b>:
   10184:	push	{r4, lr}
   10186:	mov	r4, r1
   10188:	movs	r1, #1
   1018a:	bl	ff04 <_Balloc>
   1018e:	mov	r2, r0
   10190:	cbnz	r0, 1019e <__i2b+0x1a>
   10192:	ldr	r3, [pc, #20]	; (101a8 <__i2b+0x24>)
   10194:	ldr	r0, [pc, #20]	; (101ac <__i2b+0x28>)
   10196:	movw	r1, #325	; 0x145
   1019a:	bl	1144c <__assert_func>
   1019e:	movs	r3, #1
   101a0:	str	r4, [r0, #20]
   101a2:	str	r3, [r0, #16]
   101a4:	pop	{r4, pc}
   101a6:	nop
   101a8:	.word	0x2000138d
   101ac:	.word	0x20000c6c

000101b0 <__multiply>:
   101b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101b4:	mov	r9, r2
   101b6:	ldr	r2, [r1, #16]
   101b8:	ldr.w	r3, [r9, #16]
   101bc:	cmp	r2, r3
   101be:	it	lt
   101c0:	movlt	r3, r1
   101c2:	mov	r4, r1
   101c4:	itt	lt
   101c6:	movlt	r4, r9
   101c8:	movlt	r9, r3
   101ca:	ldr	r7, [r4, #16]
   101cc:	ldr.w	sl, [r9, #16]
   101d0:	ldr	r3, [r4, #8]
   101d2:	ldr	r1, [r4, #4]
   101d4:	add.w	r6, r7, sl
   101d8:	cmp	r3, r6
   101da:	sub	sp, #20
   101dc:	it	lt
   101de:	addlt	r1, #1
   101e0:	bl	ff04 <_Balloc>
   101e4:	cbnz	r0, 101f4 <__multiply+0x44>
   101e6:	mov	r2, r0
   101e8:	ldr	r3, [pc, #272]	; (102fc <__multiply+0x14c>)
   101ea:	ldr	r0, [pc, #276]	; (10300 <__multiply+0x150>)
   101ec:	mov.w	r1, #354	; 0x162
   101f0:	bl	1144c <__assert_func>
   101f4:	add.w	r5, r0, #20
   101f8:	add.w	r8, r5, r6, lsl #2
   101fc:	mov	r3, r5
   101fe:	movs	r2, #0
   10200:	cmp	r3, r8
   10202:	bcc.n	10248 <__multiply+0x98>
   10204:	add.w	r3, r4, #20
   10208:	add.w	r7, r3, r7, lsl #2
   1020c:	add.w	r3, r9, #20
   10210:	add.w	r2, r3, sl, lsl #2
   10214:	str	r2, [sp, #8]
   10216:	subs	r2, r7, r4
   10218:	subs	r2, #21
   1021a:	bic.w	r2, r2, #3
   1021e:	adds	r2, #4
   10220:	add.w	r1, r4, #21
   10224:	cmp	r7, r1
   10226:	it	cc
   10228:	movcc	r2, #4
   1022a:	str	r2, [sp, #4]
   1022c:	ldr	r2, [sp, #8]
   1022e:	str	r3, [sp, #12]
   10230:	cmp	r2, r3
   10232:	bhi.n	1024e <__multiply+0x9e>
   10234:	cmp	r6, #0
   10236:	ble.n	10240 <__multiply+0x90>
   10238:	ldr.w	r3, [r8, #-4]!
   1023c:	cmp	r3, #0
   1023e:	beq.n	102f8 <__multiply+0x148>
   10240:	str	r6, [r0, #16]
   10242:	add	sp, #20
   10244:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10248:	str.w	r2, [r3], #4
   1024c:	b.n	10200 <__multiply+0x50>
   1024e:	ldrh.w	sl, [r3]
   10252:	cmp.w	sl, #0
   10256:	beq.n	102a2 <__multiply+0xf2>
   10258:	add.w	lr, r4, #20
   1025c:	mov	r9, r5
   1025e:	mov.w	ip, #0
   10262:	ldr.w	r2, [lr], #4
   10266:	ldr.w	r1, [r9]
   1026a:	uxth.w	fp, r2
   1026e:	uxth	r1, r1
   10270:	mla	r1, sl, fp, r1
   10274:	mov.w	fp, r2, lsr #16
   10278:	ldr.w	r2, [r9]
   1027c:	add	r1, ip
   1027e:	mov.w	ip, r2, lsr #16
   10282:	mla	r2, sl, fp, ip
   10286:	add.w	r2, r2, r1, lsr #16
   1028a:	uxth	r1, r1
   1028c:	orr.w	r1, r1, r2, lsl #16
   10290:	cmp	r7, lr
   10292:	str.w	r1, [r9], #4
   10296:	mov.w	ip, r2, lsr #16
   1029a:	bhi.n	10262 <__multiply+0xb2>
   1029c:	ldr	r2, [sp, #4]
   1029e:	str.w	ip, [r5, r2]
   102a2:	ldr	r2, [sp, #12]
   102a4:	ldrh.w	r9, [r2, #2]
   102a8:	adds	r3, #4
   102aa:	cmp.w	r9, #0
   102ae:	beq.n	102f4 <__multiply+0x144>
   102b0:	ldr	r1, [r5, #0]
   102b2:	add.w	ip, r4, #20
   102b6:	mov	lr, r5
   102b8:	mov.w	sl, #0
   102bc:	ldrh.w	fp, [ip]
   102c0:	ldrh.w	r2, [lr, #2]
   102c4:	mla	r2, r9, fp, r2
   102c8:	add	r2, sl
   102ca:	uxth	r1, r1
   102cc:	orr.w	r1, r1, r2, lsl #16
   102d0:	str.w	r1, [lr], #4
   102d4:	ldr.w	r1, [ip], #4
   102d8:	mov.w	sl, r1, lsr #16
   102dc:	ldrh.w	r1, [lr]
   102e0:	mla	r1, r9, sl, r1
   102e4:	add.w	r1, r1, r2, lsr #16
   102e8:	cmp	r7, ip
   102ea:	mov.w	sl, r1, lsr #16
   102ee:	bhi.n	102bc <__multiply+0x10c>
   102f0:	ldr	r2, [sp, #4]
   102f2:	str	r1, [r5, r2]
   102f4:	adds	r5, #4
   102f6:	b.n	1022c <__multiply+0x7c>
   102f8:	subs	r6, #1
   102fa:	b.n	10234 <__multiply+0x84>
   102fc:	.word	0x2000138d
   10300:	.word	0x20000c6c

00010304 <__pow5mult>:
   10304:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10308:	mov	r5, r2
   1030a:	ands.w	r2, r2, #3
   1030e:	mov	r6, r0
   10310:	mov	r7, r1
   10312:	beq.n	10324 <__pow5mult+0x20>
   10314:	ldr	r4, [pc, #148]	; (103ac <__pow5mult+0xa8>)
   10316:	subs	r2, #1
   10318:	movs	r3, #0
   1031a:	ldr.w	r2, [r4, r2, lsl #2]
   1031e:	bl	ffc8 <__multadd>
   10322:	mov	r7, r0
   10324:	asrs	r5, r5, #2
   10326:	beq.n	103a4 <__pow5mult+0xa0>
   10328:	ldr	r4, [r6, #28]
   1032a:	cbnz	r4, 1034c <__pow5mult+0x48>
   1032c:	movs	r0, #16
   1032e:	bl	ca00 <malloc>
   10332:	mov	r2, r0
   10334:	str	r0, [r6, #28]
   10336:	cbnz	r0, 10344 <__pow5mult+0x40>
   10338:	ldr	r3, [pc, #116]	; (103b0 <__pow5mult+0xac>)
   1033a:	ldr	r0, [pc, #120]	; (103b4 <__pow5mult+0xb0>)
   1033c:	movw	r1, #435	; 0x1b3
   10340:	bl	1144c <__assert_func>
   10344:	strd	r4, r4, [r0, #4]
   10348:	str	r4, [r0, #0]
   1034a:	str	r4, [r0, #12]
   1034c:	ldr.w	r8, [r6, #28]
   10350:	ldr.w	r4, [r8, #8]
   10354:	cbnz	r4, 1036a <__pow5mult+0x66>
   10356:	movw	r1, #625	; 0x271
   1035a:	mov	r0, r6
   1035c:	bl	10184 <__i2b>
   10360:	movs	r3, #0
   10362:	str.w	r0, [r8, #8]
   10366:	mov	r4, r0
   10368:	str	r3, [r0, #0]
   1036a:	mov.w	r9, #0
   1036e:	lsls	r3, r5, #31
   10370:	bpl.n	10388 <__pow5mult+0x84>
   10372:	mov	r1, r7
   10374:	mov	r2, r4
   10376:	mov	r0, r6
   10378:	bl	101b0 <__multiply>
   1037c:	mov	r1, r7
   1037e:	mov	r8, r0
   10380:	mov	r0, r6
   10382:	bl	ff84 <_Bfree>
   10386:	mov	r7, r8
   10388:	asrs	r5, r5, #1
   1038a:	beq.n	103a4 <__pow5mult+0xa0>
   1038c:	ldr	r0, [r4, #0]
   1038e:	cbnz	r0, 103a0 <__pow5mult+0x9c>
   10390:	mov	r2, r4
   10392:	mov	r1, r4
   10394:	mov	r0, r6
   10396:	bl	101b0 <__multiply>
   1039a:	str	r0, [r4, #0]
   1039c:	str.w	r9, [r0]
   103a0:	mov	r4, r0
   103a2:	b.n	1036e <__pow5mult+0x6a>
   103a4:	mov	r0, r7
   103a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   103aa:	nop
   103ac:	.word	0x200009ac
   103b0:	.word	0x2000131d
   103b4:	.word	0x20000c6c

000103b8 <__lshift>:
   103b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   103bc:	mov	r4, r1
   103be:	ldr	r1, [r1, #4]
   103c0:	ldr	r3, [r4, #16]
   103c2:	add.w	r8, r3, r2, asr #5
   103c6:	ldr	r3, [r4, #8]
   103c8:	mov	r7, r0
   103ca:	mov	r9, r2
   103cc:	mov.w	sl, r2, asr #5
   103d0:	add.w	r6, r8, #1
   103d4:	cmp	r3, r6
   103d6:	blt.n	103f0 <__lshift+0x38>
   103d8:	mov	r0, r7
   103da:	bl	ff04 <_Balloc>
   103de:	mov	r5, r0
   103e0:	cbnz	r0, 103f6 <__lshift+0x3e>
   103e2:	mov	r2, r0
   103e4:	ldr	r3, [pc, #160]	; (10488 <__lshift+0xd0>)
   103e6:	ldr	r0, [pc, #164]	; (1048c <__lshift+0xd4>)
   103e8:	mov.w	r1, #478	; 0x1de
   103ec:	bl	1144c <__assert_func>
   103f0:	adds	r1, #1
   103f2:	lsls	r3, r3, #1
   103f4:	b.n	103d4 <__lshift+0x1c>
   103f6:	movs	r3, #0
   103f8:	add.w	r1, r0, #20
   103fc:	add.w	r2, r0, #16
   10400:	mov	r0, r3
   10402:	cmp	r3, sl
   10404:	blt.n	1046e <__lshift+0xb6>
   10406:	ldr	r0, [r4, #16]
   10408:	bic.w	sl, sl, sl, asr #31
   1040c:	add.w	r3, r4, #20
   10410:	ands.w	r9, r9, #31
   10414:	add.w	r1, r1, sl, lsl #2
   10418:	add.w	ip, r3, r0, lsl #2
   1041c:	beq.n	10476 <__lshift+0xbe>
   1041e:	rsb	lr, r9, #32
   10422:	mov	sl, r1
   10424:	movs	r2, #0
   10426:	ldr	r0, [r3, #0]
   10428:	lsl.w	r0, r0, r9
   1042c:	orrs	r0, r2
   1042e:	str.w	r0, [sl], #4
   10432:	ldr.w	r2, [r3], #4
   10436:	cmp	ip, r3
   10438:	lsr.w	r2, r2, lr
   1043c:	bhi.n	10426 <__lshift+0x6e>
   1043e:	sub.w	r3, ip, r4
   10442:	subs	r3, #21
   10444:	bic.w	r3, r3, #3
   10448:	adds	r3, #4
   1044a:	add.w	r0, r4, #21
   1044e:	cmp	ip, r0
   10450:	it	cc
   10452:	movcc	r3, #4
   10454:	str	r2, [r1, r3]
   10456:	cbz	r2, 1045c <__lshift+0xa4>
   10458:	add.w	r6, r8, #2
   1045c:	subs	r6, #1
   1045e:	mov	r0, r7
   10460:	str	r6, [r5, #16]
   10462:	mov	r1, r4
   10464:	bl	ff84 <_Bfree>
   10468:	mov	r0, r5
   1046a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1046e:	str.w	r0, [r2, #4]!
   10472:	adds	r3, #1
   10474:	b.n	10402 <__lshift+0x4a>
   10476:	subs	r1, #4
   10478:	ldr.w	r2, [r3], #4
   1047c:	str.w	r2, [r1, #4]!
   10480:	cmp	ip, r3
   10482:	bhi.n	10478 <__lshift+0xc0>
   10484:	b.n	1045c <__lshift+0xa4>
   10486:	nop
   10488:	.word	0x2000138d
   1048c:	.word	0x20000c6c

00010490 <__mcmp>:
   10490:	push	{r4, r5, lr}
   10492:	ldr	r2, [r0, #16]
   10494:	ldr	r4, [r1, #16]
   10496:	subs	r2, r2, r4
   10498:	bne.n	104b8 <__mcmp+0x28>
   1049a:	add.w	r3, r0, #20
   1049e:	adds	r1, #20
   104a0:	add.w	r0, r3, r4, lsl #2
   104a4:	add.w	r1, r1, r4, lsl #2
   104a8:	ldr.w	r5, [r0, #-4]!
   104ac:	ldr.w	r4, [r1, #-4]!
   104b0:	cmp	r5, r4
   104b2:	beq.n	104bc <__mcmp+0x2c>
   104b4:	bcc.n	104c2 <__mcmp+0x32>
   104b6:	movs	r2, #1
   104b8:	mov	r0, r2
   104ba:	pop	{r4, r5, pc}
   104bc:	cmp	r3, r0
   104be:	bcc.n	104a8 <__mcmp+0x18>
   104c0:	b.n	104b8 <__mcmp+0x28>
   104c2:	mov.w	r2, #4294967295
   104c6:	b.n	104b8 <__mcmp+0x28>

000104c8 <__mdiff>:
   104c8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104cc:	mov	r4, r1
   104ce:	mov	r6, r0
   104d0:	mov	r1, r2
   104d2:	mov	r0, r4
   104d4:	mov	r8, r2
   104d6:	bl	10490 <__mcmp>
   104da:	subs	r5, r0, #0
   104dc:	bne.n	10500 <__mdiff+0x38>
   104de:	mov	r1, r5
   104e0:	mov	r0, r6
   104e2:	bl	ff04 <_Balloc>
   104e6:	cbnz	r0, 104f6 <__mdiff+0x2e>
   104e8:	ldr	r3, [pc, #232]	; (105d4 <__mdiff+0x10c>)
   104ea:	mov	r2, r0
   104ec:	movw	r1, #567	; 0x237
   104f0:	ldr	r0, [pc, #228]	; (105d8 <__mdiff+0x110>)
   104f2:	bl	1144c <__assert_func>
   104f6:	movs	r3, #1
   104f8:	strd	r3, r5, [r0, #16]
   104fc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10500:	itt	ge
   10502:	movge	r3, r8
   10504:	movge	r8, r4
   10506:	mov	r0, r6
   10508:	ldr.w	r1, [r8, #4]
   1050c:	itte	ge
   1050e:	movge	r4, r3
   10510:	movge	r5, #0
   10512:	movlt	r5, #1
   10514:	bl	ff04 <_Balloc>
   10518:	cbnz	r0, 10524 <__mdiff+0x5c>
   1051a:	ldr	r3, [pc, #184]	; (105d4 <__mdiff+0x10c>)
   1051c:	mov	r2, r0
   1051e:	movw	r1, #581	; 0x245
   10522:	b.n	104f0 <__mdiff+0x28>
   10524:	ldr.w	r7, [r8, #16]
   10528:	ldr	r6, [r4, #16]
   1052a:	str	r5, [r0, #12]
   1052c:	add.w	r9, r4, #20
   10530:	add.w	r5, r8, #20
   10534:	add.w	lr, r0, #20
   10538:	add.w	ip, r5, r7, lsl #2
   1053c:	add.w	r6, r9, r6, lsl #2
   10540:	add.w	r2, r8, #16
   10544:	mov	sl, lr
   10546:	movs	r1, #0
   10548:	ldr.w	r3, [r9], #4
   1054c:	ldr.w	fp, [r2, #4]!
   10550:	uxtah	r8, r1, fp
   10554:	uxth	r1, r3
   10556:	lsrs	r3, r3, #16
   10558:	sub.w	r8, r8, r1
   1055c:	rsb	r3, r3, fp, lsr #16
   10560:	add.w	r3, r3, r8, asr #16
   10564:	uxth.w	r8, r8
   10568:	asrs	r1, r3, #16
   1056a:	cmp	r6, r9
   1056c:	orr.w	r3, r8, r3, lsl #16
   10570:	str.w	r3, [sl], #4
   10574:	bhi.n	10548 <__mdiff+0x80>
   10576:	subs	r3, r6, r4
   10578:	subs	r3, #21
   1057a:	bic.w	r3, r3, #3
   1057e:	adds	r3, #4
   10580:	adds	r4, #21
   10582:	cmp	r6, r4
   10584:	it	cc
   10586:	movcc	r3, #4
   10588:	add	r5, r3
   1058a:	add	r3, lr
   1058c:	mov	lr, r3
   1058e:	mov	r6, r5
   10590:	cmp	r6, ip
   10592:	bcc.n	105b2 <__mdiff+0xea>
   10594:	add.w	r2, ip, #3
   10598:	subs	r2, r2, r5
   1059a:	bic.w	r2, r2, #3
   1059e:	subs	r5, #3
   105a0:	cmp	ip, r5
   105a2:	it	cc
   105a4:	movcc	r2, #0
   105a6:	add	r3, r2
   105a8:	ldr.w	r2, [r3, #-4]!
   105ac:	cbz	r2, 105ce <__mdiff+0x106>
   105ae:	str	r7, [r0, #16]
   105b0:	b.n	104fc <__mdiff+0x34>
   105b2:	ldr.w	r8, [r6], #4
   105b6:	uxtah	r2, r1, r8
   105ba:	asrs	r4, r2, #16
   105bc:	add.w	r4, r4, r8, lsr #16
   105c0:	uxth	r2, r2
   105c2:	orr.w	r2, r2, r4, lsl #16
   105c6:	str.w	r2, [lr], #4
   105ca:	asrs	r1, r4, #16
   105cc:	b.n	10590 <__mdiff+0xc8>
   105ce:	subs	r7, #1
   105d0:	b.n	105a8 <__mdiff+0xe0>
   105d2:	nop
   105d4:	.word	0x2000138d
   105d8:	.word	0x20000c6c

000105dc <__ulp>:
   105dc:	sub	sp, #8
   105de:	vstr	d0, [sp]
   105e2:	ldr	r2, [sp, #4]
   105e4:	ldr	r3, [pc, #60]	; (10624 <__ulp+0x48>)
   105e6:	ands	r3, r2
   105e8:	sub.w	r3, r3, #54525952	; 0x3400000
   105ec:	cmp	r3, #0
   105ee:	bgt.n	10602 <__ulp+0x26>
   105f0:	negs	r3, r3
   105f2:	cmp.w	r3, #20971520	; 0x1400000
   105f6:	mov.w	r2, r3, asr #20
   105fa:	bge.n	10606 <__ulp+0x2a>
   105fc:	mov.w	r3, #524288	; 0x80000
   10600:	asrs	r3, r2
   10602:	movs	r2, #0
   10604:	b.n	10618 <__ulp+0x3c>
   10606:	sub.w	r3, r2, #20
   1060a:	cmp	r3, #30
   1060c:	itte	le
   1060e:	movle.w	r2, #2147483648	; 0x80000000
   10612:	lsrle	r2, r3
   10614:	movgt	r2, #1
   10616:	movs	r3, #0
   10618:	mov	r1, r3
   1061a:	mov	r0, r2
   1061c:	vmov	d0, r0, r1
   10620:	add	sp, #8
   10622:	bx	lr
   10624:	.word	0x7ff00000

00010628 <__b2d>:
   10628:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1062c:	ldr	r6, [r0, #16]
   1062e:	add.w	r8, r0, #20
   10632:	add.w	r6, r8, r6, lsl #2
   10636:	subs	r7, r6, #4
   10638:	ldr.w	r2, [r6, #-4]
   1063c:	mov	r0, r2
   1063e:	bl	100e8 <__hi0bits>
   10642:	rsb	r3, r0, #32
   10646:	cmp	r0, #10
   10648:	str	r3, [r1, #0]
   1064a:	ldr	r1, [pc, #108]	; (106b8 <__b2d+0x90>)
   1064c:	bgt.n	1067a <__b2d+0x52>
   1064e:	rsb	ip, r0, #11
   10652:	lsr.w	r3, r2, ip
   10656:	cmp	r8, r7
   10658:	orr.w	r5, r3, r1
   1065c:	ite	cc
   1065e:	ldrcc.w	r3, [r6, #-8]
   10662:	movcs	r3, #0
   10664:	adds	r0, #21
   10666:	lsl.w	r0, r2, r0
   1066a:	lsr.w	r3, r3, ip
   1066e:	orrs	r3, r0
   10670:	mov	r4, r3
   10672:	vmov	d0, r4, r5
   10676:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1067a:	cmp	r8, r7
   1067c:	itte	cc
   1067e:	ldrcc.w	r3, [r6, #-8]
   10682:	subcc.w	r7, r6, #8
   10686:	movcs	r3, #0
   10688:	subs	r0, #11
   1068a:	beq.n	106b2 <__b2d+0x8a>
   1068c:	rsb	r1, r0, #32
   10690:	lsr.w	r4, r3, r1
   10694:	lsls	r2, r0
   10696:	orrs	r2, r4
   10698:	cmp	r7, r8
   1069a:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   1069e:	ite	hi
   106a0:	ldrhi.w	r2, [r7, #-4]
   106a4:	movls	r2, #0
   106a6:	lsls	r3, r0
   106a8:	lsrs	r2, r1
   106aa:	orr.w	r5, r5, #3145728	; 0x300000
   106ae:	orrs	r3, r2
   106b0:	b.n	10670 <__b2d+0x48>
   106b2:	orr.w	r5, r2, r1
   106b6:	b.n	10670 <__b2d+0x48>
   106b8:	.word	0x3ff00000

000106bc <__d2b>:
   106bc:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   106c0:	mov	r7, r1
   106c2:	movs	r1, #1
   106c4:	vmov	r8, r9, d0
   106c8:	mov	r6, r2
   106ca:	bl	ff04 <_Balloc>
   106ce:	mov	r4, r0
   106d0:	cbnz	r0, 106e0 <__d2b+0x24>
   106d2:	mov	r2, r0
   106d4:	ldr	r3, [pc, #144]	; (10768 <__d2b+0xac>)
   106d6:	ldr	r0, [pc, #148]	; (1076c <__d2b+0xb0>)
   106d8:	movw	r1, #783	; 0x30f
   106dc:	bl	1144c <__assert_func>
   106e0:	ubfx	r5, r9, #20, #11
   106e4:	ubfx	r3, r9, #0, #20
   106e8:	cbnz	r5, 10736 <__d2b+0x7a>
   106ea:	str	r3, [sp, #4]
   106ec:	subs.w	r3, r8, #0
   106f0:	beq.n	10740 <__d2b+0x84>
   106f2:	mov	r0, sp
   106f4:	str	r3, [sp, #0]
   106f6:	bl	10128 <__lo0bits>
   106fa:	ldrd	r1, r2, [sp]
   106fe:	cbz	r0, 1073c <__d2b+0x80>
   10700:	rsb	r3, r0, #32
   10704:	lsl.w	r3, r2, r3
   10708:	orrs	r3, r1
   1070a:	lsrs	r2, r0
   1070c:	str	r3, [r4, #20]
   1070e:	str	r2, [sp, #4]
   10710:	ldr	r3, [sp, #4]
   10712:	str	r3, [r4, #24]
   10714:	cmp	r3, #0
   10716:	ite	ne
   10718:	movne	r2, #2
   1071a:	moveq	r2, #1
   1071c:	str	r2, [r4, #16]
   1071e:	cbz	r5, 10750 <__d2b+0x94>
   10720:	subw	r5, r5, #1075	; 0x433
   10724:	add	r5, r0
   10726:	str	r5, [r7, #0]
   10728:	rsb	r0, r0, #53	; 0x35
   1072c:	str	r0, [r6, #0]
   1072e:	mov	r0, r4
   10730:	add	sp, #12
   10732:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10736:	orr.w	r3, r3, #1048576	; 0x100000
   1073a:	b.n	106ea <__d2b+0x2e>
   1073c:	str	r1, [r4, #20]
   1073e:	b.n	10710 <__d2b+0x54>
   10740:	add	r0, sp, #4
   10742:	bl	10128 <__lo0bits>
   10746:	ldr	r3, [sp, #4]
   10748:	str	r3, [r4, #20]
   1074a:	adds	r0, #32
   1074c:	movs	r2, #1
   1074e:	b.n	1071c <__d2b+0x60>
   10750:	add.w	r3, r4, r2, lsl #2
   10754:	subw	r0, r0, #1074	; 0x432
   10758:	str	r0, [r7, #0]
   1075a:	ldr	r0, [r3, #16]
   1075c:	bl	100e8 <__hi0bits>
   10760:	rsb	r0, r0, r2, lsl #5
   10764:	b.n	1072c <__d2b+0x70>
   10766:	nop
   10768:	.word	0x2000138d
   1076c:	.word	0x20000c6c

00010770 <__ratio>:
   10770:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10774:	mov	r8, r1
   10776:	mov	r1, sp
   10778:	mov	r9, r0
   1077a:	bl	10628 <__b2d>
   1077e:	add	r1, sp, #4
   10780:	mov	r0, r8
   10782:	vmov	r4, r5, d0
   10786:	vmov	sl, s0
   1078a:	bl	10628 <__b2d>
   1078e:	ldr.w	r3, [r8, #16]
   10792:	ldr.w	r2, [r9, #16]
   10796:	subs	r2, r2, r3
   10798:	ldrd	r3, r1, [sp]
   1079c:	subs	r3, r3, r1
   1079e:	add.w	r3, r3, r2, lsl #5
   107a2:	vmov	r6, r7, d0
   107a6:	cmp	r3, #0
   107a8:	itet	le
   107aa:	rsble	r3, r3, r3, lsl #12
   107ae:	movgt	r2, r5
   107b0:	movle	r2, r7
   107b2:	mov	fp, r5
   107b4:	itet	le
   107b6:	addle.w	r3, r2, r3, lsl #20
   107ba:	addgt.w	fp, r2, r3, lsl #20
   107be:	vmovle	s1, r3
   107c2:	vmov	d7, sl, fp
   107c6:	vdiv.f64	d0, d7, d0
   107ca:	add	sp, #12
   107cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000107d0 <__copybits>:
   107d0:	subs	r1, #1
   107d2:	push	{r4, r5, r6, lr}
   107d4:	asrs	r1, r1, #5
   107d6:	ldr	r4, [r2, #16]
   107d8:	adds	r1, #1
   107da:	add.w	r3, r2, #20
   107de:	add.w	r1, r0, r1, lsl #2
   107e2:	add.w	r4, r3, r4, lsl #2
   107e6:	subs	r5, r0, #4
   107e8:	cmp	r3, r4
   107ea:	bcc.n	10806 <__copybits+0x36>
   107ec:	subs	r3, r4, r2
   107ee:	subs	r3, #17
   107f0:	bic.w	r3, r3, #3
   107f4:	adds	r2, #17
   107f6:	cmp	r2, r4
   107f8:	it	hi
   107fa:	movhi	r3, #0
   107fc:	add	r0, r3
   107fe:	movs	r3, #0
   10800:	cmp	r0, r1
   10802:	bcc.n	10810 <__copybits+0x40>
   10804:	pop	{r4, r5, r6, pc}
   10806:	ldr.w	r6, [r3], #4
   1080a:	str.w	r6, [r5, #4]!
   1080e:	b.n	107e8 <__copybits+0x18>
   10810:	str.w	r3, [r0], #4
   10814:	b.n	10800 <__copybits+0x30>

00010816 <__any_on>:
   10816:	add.w	r2, r0, #20
   1081a:	ldr	r0, [r0, #16]
   1081c:	asrs	r3, r1, #5
   1081e:	cmp	r0, r3
   10820:	push	{r4, lr}
   10822:	blt.n	10848 <__any_on+0x32>
   10824:	ble.n	1083c <__any_on+0x26>
   10826:	ands.w	r1, r1, #31
   1082a:	beq.n	1083c <__any_on+0x26>
   1082c:	ldr.w	r4, [r2, r3, lsl #2]
   10830:	lsr.w	r0, r4, r1
   10834:	lsl.w	r1, r0, r1
   10838:	cmp	r4, r1
   1083a:	bne.n	10854 <__any_on+0x3e>
   1083c:	add.w	r3, r2, r3, lsl #2
   10840:	cmp	r3, r2
   10842:	bhi.n	1084c <__any_on+0x36>
   10844:	movs	r0, #0
   10846:	pop	{r4, pc}
   10848:	mov	r3, r0
   1084a:	b.n	1083c <__any_on+0x26>
   1084c:	ldr.w	r1, [r3, #-4]!
   10850:	cmp	r1, #0
   10852:	beq.n	10840 <__any_on+0x2a>
   10854:	movs	r0, #1
   10856:	b.n	10846 <__any_on+0x30>

00010858 <_malloc_usable_size_r>:
   10858:	ldr.w	r3, [r1, #-4]
   1085c:	subs	r0, r3, #4
   1085e:	cmp	r3, #0
   10860:	itt	lt
   10862:	ldrlt	r3, [r1, r0]
   10864:	addlt	r0, r0, r3
   10866:	bx	lr

00010868 <__ascii_wctomb>:
   10868:	cbz	r1, 1087e <__ascii_wctomb+0x16>
   1086a:	cmp	r2, #255	; 0xff
   1086c:	ittet	hi
   1086e:	movhi	r3, #138	; 0x8a
   10870:	strhi	r3, [r0, #0]
   10872:	strbls	r2, [r1, #0]
   10874:	movhi.w	r0, #4294967295
   10878:	it	ls
   1087a:	movls	r0, #1
   1087c:	bx	lr
   1087e:	mov	r0, r1
   10880:	bx	lr
	...

00010884 <fcvtbuf>:
   10884:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10888:	mov	r8, r2
   1088a:	ldr	r2, [pc, #136]	; (10914 <fcvtbuf+0x90>)
   1088c:	sub	sp, #28
   1088e:	ldr	r6, [r2, #0]
   10890:	mov	r5, r0
   10892:	mov	r7, r1
   10894:	mov	r4, r3
   10896:	cbnz	r3, 108c2 <fcvtbuf+0x3e>
   10898:	ldr	r2, [r6, #40]	; 0x28
   1089a:	ldr	r1, [r6, #44]	; 0x2c
   1089c:	add.w	r3, r0, #35	; 0x23
   108a0:	cmp	r2, r3
   108a2:	bgt.n	108c0 <fcvtbuf+0x3c>
   108a4:	add.w	r9, r0, #36	; 0x24
   108a8:	mov	r2, r9
   108aa:	mov	r0, r6
   108ac:	vstr	d0, [sp, #8]
   108b0:	bl	cb64 <_realloc_r>
   108b4:	mov	r4, r0
   108b6:	cbz	r0, 108fc <fcvtbuf+0x78>
   108b8:	strd	r9, r0, [r6, #40]	; 0x28
   108bc:	vldr	d0, [sp, #8]
   108c0:	ldr	r4, [r6, #44]	; 0x2c
   108c2:	add	r3, sp, #20
   108c4:	strd	r8, r3, [sp]
   108c8:	mov	r2, r5
   108ca:	mov	r3, r7
   108cc:	movs	r1, #3
   108ce:	mov	r0, r6
   108d0:	bl	ecc0 <_dtoa_r>
   108d4:	ldr	r3, [r7, #0]
   108d6:	negs	r3, r3
   108d8:	mov	r2, r4
   108da:	subs	r3, r3, r4
   108dc:	ldr	r1, [sp, #20]
   108de:	cmp	r1, r0
   108e0:	add.w	r6, r2, r3
   108e4:	bhi.n	10904 <fcvtbuf+0x80>
   108e6:	mov	r1, r2
   108e8:	movs	r7, #48	; 0x30
   108ea:	adds	r0, r1, r3
   108ec:	cmp	r5, r0
   108ee:	bgt.n	1090e <fcvtbuf+0x8a>
   108f0:	subs	r3, r5, r6
   108f2:	cmp	r5, r6
   108f4:	it	lt
   108f6:	movlt	r3, #0
   108f8:	movs	r1, #0
   108fa:	strb	r1, [r2, r3]
   108fc:	mov	r0, r4
   108fe:	add	sp, #28
   10900:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10904:	ldrb.w	r1, [r0], #1
   10908:	strb.w	r1, [r2], #1
   1090c:	b.n	108dc <fcvtbuf+0x58>
   1090e:	strb.w	r7, [r1], #1
   10912:	b.n	108ea <fcvtbuf+0x66>
   10914:	.word	0x20002294

00010918 <__ssputs_r>:
   10918:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1091c:	ldr	r6, [r1, #8]
   1091e:	mov	r7, r3
   10920:	cmp	r6, r7
   10922:	ldr	r3, [r1, #0]
   10924:	mov	sl, r0
   10926:	mov	r4, r1
   10928:	mov	r8, r2
   1092a:	bhi.n	10986 <__ssputs_r+0x6e>
   1092c:	ldrh	r2, [r1, #12]
   1092e:	tst.w	r2, #1152	; 0x480
   10932:	beq.n	10982 <__ssputs_r+0x6a>
   10934:	ldr	r5, [r4, #20]
   10936:	ldr	r1, [r1, #16]
   10938:	add.w	r5, r5, r5, lsl #1
   1093c:	sub.w	r9, r3, r1
   10940:	add.w	r5, r5, r5, lsr #31
   10944:	adds	r3, r7, #1
   10946:	add	r3, r9
   10948:	asrs	r5, r5, #1
   1094a:	cmp	r5, r3
   1094c:	it	cc
   1094e:	movcc	r5, r3
   10950:	lsls	r3, r2, #21
   10952:	bpl.n	109a4 <__ssputs_r+0x8c>
   10954:	mov	r1, r5
   10956:	bl	ca60 <_malloc_r>
   1095a:	mov	r6, r0
   1095c:	cbz	r0, 109b8 <__ssputs_r+0xa0>
   1095e:	ldr	r1, [r4, #16]
   10960:	mov	r2, r9
   10962:	bl	a000 <memcpy>
   10966:	ldrh	r3, [r4, #12]
   10968:	bic.w	r3, r3, #1152	; 0x480
   1096c:	orr.w	r3, r3, #128	; 0x80
   10970:	strh	r3, [r4, #12]
   10972:	str	r6, [r4, #16]
   10974:	str	r5, [r4, #20]
   10976:	add	r6, r9
   10978:	sub.w	r5, r5, r9
   1097c:	str	r6, [r4, #0]
   1097e:	str	r5, [r4, #8]
   10980:	mov	r6, r7
   10982:	cmp	r6, r7
   10984:	bls.n	10988 <__ssputs_r+0x70>
   10986:	mov	r6, r7
   10988:	ldr	r0, [r4, #0]
   1098a:	mov	r2, r6
   1098c:	mov	r1, r8
   1098e:	bl	e8e4 <memmove>
   10992:	ldr	r3, [r4, #8]
   10994:	subs	r3, r3, r6
   10996:	str	r3, [r4, #8]
   10998:	ldr	r3, [r4, #0]
   1099a:	add	r3, r6
   1099c:	str	r3, [r4, #0]
   1099e:	movs	r0, #0
   109a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   109a4:	mov	r2, r5
   109a6:	bl	cb64 <_realloc_r>
   109aa:	mov	r6, r0
   109ac:	cmp	r0, #0
   109ae:	bne.n	10972 <__ssputs_r+0x5a>
   109b0:	ldr	r1, [r4, #16]
   109b2:	mov	r0, sl
   109b4:	bl	f798 <_free_r>
   109b8:	movs	r3, #12
   109ba:	str.w	r3, [sl]
   109be:	ldrh	r3, [r4, #12]
   109c0:	orr.w	r3, r3, #64	; 0x40
   109c4:	strh	r3, [r4, #12]
   109c6:	mov.w	r0, #4294967295
   109ca:	b.n	109a0 <__ssputs_r+0x88>

000109cc <_svfiprintf_r>:
   109cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109d0:	mov	r8, r3
   109d2:	ldrh	r3, [r1, #12]
   109d4:	lsls	r3, r3, #24
   109d6:	sub	sp, #116	; 0x74
   109d8:	mov	r7, r0
   109da:	mov	r5, r1
   109dc:	mov	r4, r2
   109de:	bpl.n	109fe <_svfiprintf_r+0x32>
   109e0:	ldr	r3, [r1, #16]
   109e2:	cbnz	r3, 109fe <_svfiprintf_r+0x32>
   109e4:	movs	r1, #64	; 0x40
   109e6:	bl	ca60 <_malloc_r>
   109ea:	str	r0, [r5, #0]
   109ec:	str	r0, [r5, #16]
   109ee:	cbnz	r0, 109fa <_svfiprintf_r+0x2e>
   109f0:	movs	r3, #12
   109f2:	str	r3, [r7, #0]
   109f4:	mov.w	r0, #4294967295
   109f8:	b.n	10b9c <_svfiprintf_r+0x1d0>
   109fa:	movs	r3, #64	; 0x40
   109fc:	str	r3, [r5, #20]
   109fe:	movs	r3, #0
   10a00:	str	r3, [sp, #36]	; 0x24
   10a02:	movs	r3, #32
   10a04:	strb.w	r3, [sp, #41]	; 0x29
   10a08:	str.w	r8, [sp, #12]
   10a0c:	movs	r3, #48	; 0x30
   10a0e:	ldr.w	r8, [pc, #420]	; 10bb4 <_svfiprintf_r+0x1e8>
   10a12:	strb.w	r3, [sp, #42]	; 0x2a
   10a16:	mov.w	r9, #1
   10a1a:	mov	r3, r4
   10a1c:	mov	sl, r3
   10a1e:	ldrb.w	r2, [r3], #1
   10a22:	cbz	r2, 10a28 <_svfiprintf_r+0x5c>
   10a24:	cmp	r2, #37	; 0x25
   10a26:	bne.n	10a1c <_svfiprintf_r+0x50>
   10a28:	subs.w	fp, sl, r4
   10a2c:	beq.n	10a46 <_svfiprintf_r+0x7a>
   10a2e:	mov	r3, fp
   10a30:	mov	r2, r4
   10a32:	mov	r1, r5
   10a34:	mov	r0, r7
   10a36:	bl	10918 <__ssputs_r>
   10a3a:	adds	r0, #1
   10a3c:	beq.w	10b92 <_svfiprintf_r+0x1c6>
   10a40:	ldr	r2, [sp, #36]	; 0x24
   10a42:	add	r2, fp
   10a44:	str	r2, [sp, #36]	; 0x24
   10a46:	ldrb.w	r3, [sl]
   10a4a:	cmp	r3, #0
   10a4c:	beq.w	10b92 <_svfiprintf_r+0x1c6>
   10a50:	movs	r3, #0
   10a52:	mov.w	r2, #4294967295
   10a56:	strd	r2, r3, [sp, #20]
   10a5a:	add.w	sl, sl, #1
   10a5e:	str	r3, [sp, #16]
   10a60:	str	r3, [sp, #28]
   10a62:	strb.w	r3, [sp, #83]	; 0x53
   10a66:	str	r3, [sp, #104]	; 0x68
   10a68:	mov	r4, sl
   10a6a:	movs	r2, #5
   10a6c:	ldrb.w	r1, [r4], #1
   10a70:	ldr	r0, [pc, #320]	; (10bb4 <_svfiprintf_r+0x1e8>)
   10a72:	bl	eae0 <memchr>
   10a76:	ldr	r2, [sp, #16]
   10a78:	cbnz	r0, 10ab2 <_svfiprintf_r+0xe6>
   10a7a:	lsls	r0, r2, #27
   10a7c:	itt	mi
   10a7e:	movmi	r3, #32
   10a80:	strbmi.w	r3, [sp, #83]	; 0x53
   10a84:	lsls	r1, r2, #28
   10a86:	itt	mi
   10a88:	movmi	r3, #43	; 0x2b
   10a8a:	strbmi.w	r3, [sp, #83]	; 0x53
   10a8e:	ldrb.w	r3, [sl]
   10a92:	cmp	r3, #42	; 0x2a
   10a94:	beq.n	10ac2 <_svfiprintf_r+0xf6>
   10a96:	ldr	r2, [sp, #28]
   10a98:	mov	r4, sl
   10a9a:	movs	r0, #0
   10a9c:	mov.w	ip, #10
   10aa0:	mov	r1, r4
   10aa2:	ldrb.w	r3, [r1], #1
   10aa6:	subs	r3, #48	; 0x30
   10aa8:	cmp	r3, #9
   10aaa:	bls.n	10b48 <_svfiprintf_r+0x17c>
   10aac:	cbz	r0, 10adc <_svfiprintf_r+0x110>
   10aae:	str	r2, [sp, #28]
   10ab0:	b.n	10adc <_svfiprintf_r+0x110>
   10ab2:	sub.w	r3, r0, r8
   10ab6:	lsl.w	r3, r9, r3
   10aba:	orrs	r3, r2
   10abc:	str	r3, [sp, #16]
   10abe:	mov	sl, r4
   10ac0:	b.n	10a68 <_svfiprintf_r+0x9c>
   10ac2:	ldr	r3, [sp, #12]
   10ac4:	adds	r1, r3, #4
   10ac6:	ldr	r3, [r3, #0]
   10ac8:	str	r1, [sp, #12]
   10aca:	cmp	r3, #0
   10acc:	ittet	lt
   10ace:	neglt	r3, r3
   10ad0:	orrlt.w	r2, r2, #2
   10ad4:	strge	r3, [sp, #28]
   10ad6:	strlt	r3, [sp, #28]
   10ad8:	it	lt
   10ada:	strlt	r2, [sp, #16]
   10adc:	ldrb	r3, [r4, #0]
   10ade:	cmp	r3, #46	; 0x2e
   10ae0:	bne.n	10afc <_svfiprintf_r+0x130>
   10ae2:	ldrb	r3, [r4, #1]
   10ae4:	cmp	r3, #42	; 0x2a
   10ae6:	bne.n	10b52 <_svfiprintf_r+0x186>
   10ae8:	ldr	r3, [sp, #12]
   10aea:	adds	r2, r3, #4
   10aec:	ldr	r3, [r3, #0]
   10aee:	str	r2, [sp, #12]
   10af0:	cmp	r3, #0
   10af2:	it	lt
   10af4:	movlt.w	r3, #4294967295
   10af8:	adds	r4, #2
   10afa:	str	r3, [sp, #20]
   10afc:	ldr.w	sl, [pc, #196]	; 10bc4 <_svfiprintf_r+0x1f8>
   10b00:	ldrb	r1, [r4, #0]
   10b02:	movs	r2, #3
   10b04:	mov	r0, sl
   10b06:	bl	eae0 <memchr>
   10b0a:	cbz	r0, 10b1c <_svfiprintf_r+0x150>
   10b0c:	ldr	r3, [sp, #16]
   10b0e:	sub.w	r0, r0, sl
   10b12:	movs	r2, #64	; 0x40
   10b14:	lsls	r2, r0
   10b16:	orrs	r3, r2
   10b18:	adds	r4, #1
   10b1a:	str	r3, [sp, #16]
   10b1c:	ldrb.w	r1, [r4], #1
   10b20:	ldr	r0, [pc, #148]	; (10bb8 <_svfiprintf_r+0x1ec>)
   10b22:	strb.w	r1, [sp, #40]	; 0x28
   10b26:	movs	r2, #6
   10b28:	bl	eae0 <memchr>
   10b2c:	cmp	r0, #0
   10b2e:	beq.n	10ba2 <_svfiprintf_r+0x1d6>
   10b30:	ldr	r3, [pc, #136]	; (10bbc <_svfiprintf_r+0x1f0>)
   10b32:	cbnz	r3, 10b7c <_svfiprintf_r+0x1b0>
   10b34:	ldr	r3, [sp, #12]
   10b36:	adds	r3, #7
   10b38:	bic.w	r3, r3, #7
   10b3c:	adds	r3, #8
   10b3e:	str	r3, [sp, #12]
   10b40:	ldr	r3, [sp, #36]	; 0x24
   10b42:	add	r3, r6
   10b44:	str	r3, [sp, #36]	; 0x24
   10b46:	b.n	10a1a <_svfiprintf_r+0x4e>
   10b48:	mla	r2, ip, r2, r3
   10b4c:	mov	r4, r1
   10b4e:	movs	r0, #1
   10b50:	b.n	10aa0 <_svfiprintf_r+0xd4>
   10b52:	movs	r3, #0
   10b54:	adds	r4, #1
   10b56:	str	r3, [sp, #20]
   10b58:	mov	r1, r3
   10b5a:	mov.w	ip, #10
   10b5e:	mov	r0, r4
   10b60:	ldrb.w	r2, [r0], #1
   10b64:	subs	r2, #48	; 0x30
   10b66:	cmp	r2, #9
   10b68:	bls.n	10b72 <_svfiprintf_r+0x1a6>
   10b6a:	cmp	r3, #0
   10b6c:	beq.n	10afc <_svfiprintf_r+0x130>
   10b6e:	str	r1, [sp, #20]
   10b70:	b.n	10afc <_svfiprintf_r+0x130>
   10b72:	mla	r1, ip, r1, r2
   10b76:	mov	r4, r0
   10b78:	movs	r3, #1
   10b7a:	b.n	10b5e <_svfiprintf_r+0x192>
   10b7c:	add	r3, sp, #12
   10b7e:	str	r3, [sp, #0]
   10b80:	mov	r2, r5
   10b82:	ldr	r3, [pc, #60]	; (10bc0 <_svfiprintf_r+0x1f4>)
   10b84:	add	r1, sp, #16
   10b86:	mov	r0, r7
   10b88:	bl	d9c0 <_printf_float>
   10b8c:	adds	r2, r0, #1
   10b8e:	mov	r6, r0
   10b90:	bne.n	10b40 <_svfiprintf_r+0x174>
   10b92:	ldrh	r3, [r5, #12]
   10b94:	lsls	r3, r3, #25
   10b96:	bmi.w	109f4 <_svfiprintf_r+0x28>
   10b9a:	ldr	r0, [sp, #36]	; 0x24
   10b9c:	add	sp, #116	; 0x74
   10b9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ba2:	add	r3, sp, #12
   10ba4:	str	r3, [sp, #0]
   10ba6:	mov	r2, r5
   10ba8:	ldr	r3, [pc, #20]	; (10bc0 <_svfiprintf_r+0x1f4>)
   10baa:	add	r1, sp, #16
   10bac:	mov	r0, r7
   10bae:	bl	ded0 <_printf_i>
   10bb2:	b.n	10b8c <_svfiprintf_r+0x1c0>
   10bb4:	.word	0x200013e5
   10bb8:	.word	0x200013ef
   10bbc:	.word	0x0000d9c1
   10bc0:	.word	0x00010919
   10bc4:	.word	0x200013eb

00010bc8 <_sungetc_r>:
   10bc8:	push	{r3, r4, r5, lr}
   10bca:	adds	r3, r1, #1
   10bcc:	mov	r4, r2
   10bce:	bne.n	10bd8 <_sungetc_r+0x10>
   10bd0:	mov.w	r5, #4294967295
   10bd4:	mov	r0, r5
   10bd6:	pop	{r3, r4, r5, pc}
   10bd8:	ldrh	r3, [r2, #12]
   10bda:	bic.w	r3, r3, #32
   10bde:	strh	r3, [r2, #12]
   10be0:	ldr	r3, [r4, #52]	; 0x34
   10be2:	ldr	r2, [r2, #4]
   10be4:	uxtb	r5, r1
   10be6:	cbz	r3, 10c0c <_sungetc_r+0x44>
   10be8:	ldr	r3, [r4, #56]	; 0x38
   10bea:	cmp	r3, r2
   10bec:	ble.n	10c00 <_sungetc_r+0x38>
   10bee:	ldr	r3, [r4, #0]
   10bf0:	subs	r2, r3, #1
   10bf2:	str	r2, [r4, #0]
   10bf4:	strb.w	r5, [r3, #-1]
   10bf8:	ldr	r3, [r4, #4]
   10bfa:	adds	r3, #1
   10bfc:	str	r3, [r4, #4]
   10bfe:	b.n	10bd4 <_sungetc_r+0xc>
   10c00:	mov	r1, r4
   10c02:	bl	113d6 <__submore>
   10c06:	cmp	r0, #0
   10c08:	beq.n	10bee <_sungetc_r+0x26>
   10c0a:	b.n	10bd0 <_sungetc_r+0x8>
   10c0c:	ldr	r1, [r4, #16]
   10c0e:	ldr	r3, [r4, #0]
   10c10:	cbz	r1, 10c28 <_sungetc_r+0x60>
   10c12:	cmp	r1, r3
   10c14:	bcs.n	10c28 <_sungetc_r+0x60>
   10c16:	ldrb.w	r1, [r3, #-1]
   10c1a:	cmp	r1, r5
   10c1c:	bne.n	10c28 <_sungetc_r+0x60>
   10c1e:	subs	r3, #1
   10c20:	adds	r2, #1
   10c22:	str	r3, [r4, #0]
   10c24:	str	r2, [r4, #4]
   10c26:	b.n	10bd4 <_sungetc_r+0xc>
   10c28:	strd	r3, r2, [r4, #60]	; 0x3c
   10c2c:	add.w	r3, r4, #68	; 0x44
   10c30:	str	r3, [r4, #52]	; 0x34
   10c32:	movs	r3, #3
   10c34:	str	r3, [r4, #56]	; 0x38
   10c36:	mov	r3, r4
   10c38:	strb.w	r5, [r3, #70]!
   10c3c:	str	r3, [r4, #0]
   10c3e:	movs	r3, #1
   10c40:	b.n	10bfc <_sungetc_r+0x34>

00010c42 <__ssrefill_r>:
   10c42:	push	{r4, lr}
   10c44:	mov	r4, r1
   10c46:	ldr	r1, [r1, #52]	; 0x34
   10c48:	cbz	r1, 10c66 <__ssrefill_r+0x24>
   10c4a:	add.w	r3, r4, #68	; 0x44
   10c4e:	cmp	r1, r3
   10c50:	beq.n	10c56 <__ssrefill_r+0x14>
   10c52:	bl	f798 <_free_r>
   10c56:	ldr	r3, [r4, #64]	; 0x40
   10c58:	str	r3, [r4, #4]
   10c5a:	movs	r0, #0
   10c5c:	str	r0, [r4, #52]	; 0x34
   10c5e:	cbz	r3, 10c66 <__ssrefill_r+0x24>
   10c60:	ldr	r3, [r4, #60]	; 0x3c
   10c62:	str	r3, [r4, #0]
   10c64:	pop	{r4, pc}
   10c66:	ldr	r3, [r4, #16]
   10c68:	str	r3, [r4, #0]
   10c6a:	movs	r3, #0
   10c6c:	str	r3, [r4, #4]
   10c6e:	ldrh	r3, [r4, #12]
   10c70:	orr.w	r3, r3, #32
   10c74:	strh	r3, [r4, #12]
   10c76:	mov.w	r0, #4294967295
   10c7a:	b.n	10c64 <__ssrefill_r+0x22>

00010c7c <__ssvfiscanf_r>:
   10c7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c80:	mov	r4, r1
   10c82:	sub.w	sp, sp, #648	; 0x288
   10c86:	movs	r1, #0
   10c88:	strd	r1, r1, [sp, #272]	; 0x110
   10c8c:	ldr	r1, [pc, #664]	; (10f28 <__ssvfiscanf_r+0x2ac>)
   10c8e:	str	r1, [sp, #640]	; 0x280
   10c90:	add.w	r8, sp, #4
   10c94:	ldr	r1, [pc, #660]	; (10f2c <__ssvfiscanf_r+0x2b0>)
   10c96:	ldr	r7, [pc, #664]	; (10f30 <__ssvfiscanf_r+0x2b4>)
   10c98:	ldr.w	r9, [pc, #664]	; 10f34 <__ssvfiscanf_r+0x2b8>
   10c9c:	str.w	r8, [sp, #280]	; 0x118
   10ca0:	mov	r6, r0
   10ca2:	str	r1, [sp, #644]	; 0x284
   10ca4:	str	r3, [sp, #0]
   10ca6:	ldrb	r3, [r2, #0]
   10ca8:	cmp	r3, #0
   10caa:	beq.w	10f62 <__ssvfiscanf_r+0x2e6>
   10cae:	ldrb	r1, [r7, r3]
   10cb0:	ands.w	r1, r1, #8
   10cb4:	add.w	r5, r2, #1
   10cb8:	beq.n	10cee <__ssvfiscanf_r+0x72>
   10cba:	ldr	r3, [r4, #4]
   10cbc:	cmp	r3, #0
   10cbe:	ble.n	10ce0 <__ssvfiscanf_r+0x64>
   10cc0:	ldr	r3, [r4, #0]
   10cc2:	ldrb	r2, [r3, #0]
   10cc4:	ldrb	r2, [r7, r2]
   10cc6:	lsls	r2, r2, #28
   10cc8:	bmi.n	10cce <__ssvfiscanf_r+0x52>
   10cca:	mov	r2, r5
   10ccc:	b.n	10ca6 <__ssvfiscanf_r+0x2a>
   10cce:	ldr	r2, [sp, #276]	; 0x114
   10cd0:	adds	r2, #1
   10cd2:	str	r2, [sp, #276]	; 0x114
   10cd4:	ldr	r2, [r4, #4]
   10cd6:	adds	r3, #1
   10cd8:	subs	r2, #1
   10cda:	str	r2, [r4, #4]
   10cdc:	str	r3, [r4, #0]
   10cde:	b.n	10cba <__ssvfiscanf_r+0x3e>
   10ce0:	ldr	r3, [sp, #644]	; 0x284
   10ce2:	mov	r1, r4
   10ce4:	mov	r0, r6
   10ce6:	blx	r3
   10ce8:	cmp	r0, #0
   10cea:	beq.n	10cc0 <__ssvfiscanf_r+0x44>
   10cec:	b.n	10cca <__ssvfiscanf_r+0x4e>
   10cee:	cmp	r3, #37	; 0x25
   10cf0:	beq.n	10d18 <__ssvfiscanf_r+0x9c>
   10cf2:	mov	sl, r3
   10cf4:	ldr	r3, [r4, #4]
   10cf6:	cmp	r3, #0
   10cf8:	ble.w	10e1e <__ssvfiscanf_r+0x1a2>
   10cfc:	ldr	r2, [r4, #0]
   10cfe:	ldrb	r3, [r2, #0]
   10d00:	cmp	r3, sl
   10d02:	bne.w	10f62 <__ssvfiscanf_r+0x2e6>
   10d06:	ldr	r3, [r4, #4]
   10d08:	subs	r3, #1
   10d0a:	str	r3, [r4, #4]
   10d0c:	ldr	r3, [sp, #276]	; 0x114
   10d0e:	adds	r2, #1
   10d10:	adds	r3, #1
   10d12:	str	r2, [r4, #0]
   10d14:	str	r3, [sp, #276]	; 0x114
   10d16:	b.n	10cca <__ssvfiscanf_r+0x4e>
   10d18:	str	r1, [sp, #260]	; 0x104
   10d1a:	str	r1, [sp, #268]	; 0x10c
   10d1c:	ldrb	r3, [r2, #1]
   10d1e:	cmp	r3, #42	; 0x2a
   10d20:	ittt	eq
   10d22:	moveq	r3, #16
   10d24:	addeq	r5, r2, #2
   10d26:	streq	r3, [sp, #260]	; 0x104
   10d28:	movs	r2, #10
   10d2a:	mov	sl, r5
   10d2c:	ldrb.w	r1, [sl], #1
   10d30:	sub.w	r3, r1, #48	; 0x30
   10d34:	cmp	r3, #9
   10d36:	bls.n	10d72 <__ssvfiscanf_r+0xf6>
   10d38:	ldr	r0, [pc, #504]	; (10f34 <__ssvfiscanf_r+0x2b8>)
   10d3a:	movs	r2, #3
   10d3c:	bl	eae0 <memchr>
   10d40:	cbz	r0, 10d52 <__ssvfiscanf_r+0xd6>
   10d42:	ldr	r2, [sp, #260]	; 0x104
   10d44:	sub.w	r0, r0, r9
   10d48:	movs	r3, #1
   10d4a:	lsls	r3, r0
   10d4c:	orrs	r3, r2
   10d4e:	str	r3, [sp, #260]	; 0x104
   10d50:	mov	r5, sl
   10d52:	ldrb.w	r3, [r5], #1
   10d56:	cmp	r3, #120	; 0x78
   10d58:	bhi.n	10d68 <__ssvfiscanf_r+0xec>
   10d5a:	cmp	r3, #87	; 0x57
   10d5c:	bhi.n	10d80 <__ssvfiscanf_r+0x104>
   10d5e:	cmp	r3, #37	; 0x25
   10d60:	beq.n	10cf2 <__ssvfiscanf_r+0x76>
   10d62:	bhi.n	10e14 <__ssvfiscanf_r+0x198>
   10d64:	cmp	r3, #0
   10d66:	beq.n	10e34 <__ssvfiscanf_r+0x1b8>
   10d68:	movs	r3, #3
   10d6a:	str	r3, [sp, #284]	; 0x11c
   10d6c:	movs	r3, #10
   10d6e:	str	r3, [sp, #264]	; 0x108
   10d70:	b.n	10e60 <__ssvfiscanf_r+0x1e4>
   10d72:	ldr	r3, [sp, #268]	; 0x10c
   10d74:	mla	r1, r2, r3, r1
   10d78:	subs	r1, #48	; 0x30
   10d7a:	str	r1, [sp, #268]	; 0x10c
   10d7c:	mov	r5, sl
   10d7e:	b.n	10d2a <__ssvfiscanf_r+0xae>
   10d80:	sub.w	r2, r3, #88	; 0x58
   10d84:	cmp	r2, #32
   10d86:	bhi.n	10d68 <__ssvfiscanf_r+0xec>
   10d88:	add	r1, pc, #4	; (adr r1, 10d90 <__ssvfiscanf_r+0x114>)
   10d8a:	ldr.w	pc, [r1, r2, lsl #2]
   10d8e:	nop
   10d90:	.word	0x00010e43
   10d94:	.word	0x00010d69
   10d98:	.word	0x00010d69
   10d9c:	.word	0x00010ea1
   10da0:	.word	0x00010d69
   10da4:	.word	0x00010d69
   10da8:	.word	0x00010d69
   10dac:	.word	0x00010d69
   10db0:	.word	0x00010d69
   10db4:	.word	0x00010d69
   10db8:	.word	0x00010d69
   10dbc:	.word	0x00010eb7
   10dc0:	.word	0x00010e9d
   10dc4:	.word	0x00010e1b
   10dc8:	.word	0x00010e1b
   10dcc:	.word	0x00010e1b
   10dd0:	.word	0x00010d69
   10dd4:	.word	0x00010e59
   10dd8:	.word	0x00010d69
   10ddc:	.word	0x00010d69
   10de0:	.word	0x00010d69
   10de4:	.word	0x00010d69
   10de8:	.word	0x00010ec7
   10dec:	.word	0x00010e95
   10df0:	.word	0x00010e3b
   10df4:	.word	0x00010d69
   10df8:	.word	0x00010d69
   10dfc:	.word	0x00010ec3
   10e00:	.word	0x00010d69
   10e04:	.word	0x00010e9d
   10e08:	.word	0x00010d69
   10e0c:	.word	0x00010d69
   10e10:	.word	0x00010e43
   10e14:	subs	r3, #69	; 0x45
   10e16:	cmp	r3, #2
   10e18:	bhi.n	10d68 <__ssvfiscanf_r+0xec>
   10e1a:	movs	r3, #5
   10e1c:	b.n	10e5e <__ssvfiscanf_r+0x1e2>
   10e1e:	ldr	r3, [sp, #644]	; 0x284
   10e20:	mov	r1, r4
   10e22:	mov	r0, r6
   10e24:	blx	r3
   10e26:	cmp	r0, #0
   10e28:	beq.w	10cfc <__ssvfiscanf_r+0x80>
   10e2c:	ldr	r0, [sp, #272]	; 0x110
   10e2e:	cmp	r0, #0
   10e30:	bne.w	10f4e <__ssvfiscanf_r+0x2d2>
   10e34:	mov.w	r0, #4294967295
   10e38:	b.n	10f5a <__ssvfiscanf_r+0x2de>
   10e3a:	ldr	r2, [sp, #260]	; 0x104
   10e3c:	orr.w	r2, r2, #32
   10e40:	str	r2, [sp, #260]	; 0x104
   10e42:	ldr	r2, [sp, #260]	; 0x104
   10e44:	orr.w	r2, r2, #512	; 0x200
   10e48:	str	r2, [sp, #260]	; 0x104
   10e4a:	movs	r2, #16
   10e4c:	cmp	r3, #111	; 0x6f
   10e4e:	str	r2, [sp, #264]	; 0x108
   10e50:	ite	cc
   10e52:	movcc	r3, #3
   10e54:	movcs	r3, #4
   10e56:	b.n	10e5e <__ssvfiscanf_r+0x1e2>
   10e58:	movs	r3, #0
   10e5a:	str	r3, [sp, #264]	; 0x108
   10e5c:	movs	r3, #3
   10e5e:	str	r3, [sp, #284]	; 0x11c
   10e60:	ldr	r3, [r4, #4]
   10e62:	cmp	r3, #0
   10e64:	ble.n	10ee2 <__ssvfiscanf_r+0x266>
   10e66:	ldr	r3, [sp, #260]	; 0x104
   10e68:	lsls	r1, r3, #25
   10e6a:	bmi.n	10e76 <__ssvfiscanf_r+0x1fa>
   10e6c:	ldr	r3, [r4, #0]
   10e6e:	ldrb	r2, [r3, #0]
   10e70:	ldrb	r2, [r7, r2]
   10e72:	lsls	r2, r2, #28
   10e74:	bmi.n	10ef0 <__ssvfiscanf_r+0x274>
   10e76:	ldr	r3, [sp, #284]	; 0x11c
   10e78:	cmp	r3, #2
   10e7a:	bgt.n	10f14 <__ssvfiscanf_r+0x298>
   10e7c:	mov	r3, sp
   10e7e:	mov	r2, r4
   10e80:	add	r1, sp, #260	; 0x104
   10e82:	mov	r0, r6
   10e84:	bl	10f6c <_scanf_chars>
   10e88:	cmp	r0, #1
   10e8a:	beq.n	10f62 <__ssvfiscanf_r+0x2e6>
   10e8c:	cmp	r0, #2
   10e8e:	bne.w	10cca <__ssvfiscanf_r+0x4e>
   10e92:	b.n	10e2c <__ssvfiscanf_r+0x1b0>
   10e94:	movs	r3, #8
   10e96:	str	r3, [sp, #264]	; 0x108
   10e98:	movs	r3, #4
   10e9a:	b.n	10e5e <__ssvfiscanf_r+0x1e2>
   10e9c:	movs	r2, #10
   10e9e:	b.n	10e4c <__ssvfiscanf_r+0x1d0>
   10ea0:	mov	r1, r5
   10ea2:	mov	r0, r8
   10ea4:	bl	11364 <__sccl>
   10ea8:	ldr	r3, [sp, #260]	; 0x104
   10eaa:	orr.w	r3, r3, #64	; 0x40
   10eae:	str	r3, [sp, #260]	; 0x104
   10eb0:	mov	r5, r0
   10eb2:	movs	r3, #1
   10eb4:	b.n	10e5e <__ssvfiscanf_r+0x1e2>
   10eb6:	ldr	r3, [sp, #260]	; 0x104
   10eb8:	orr.w	r3, r3, #64	; 0x40
   10ebc:	str	r3, [sp, #260]	; 0x104
   10ebe:	movs	r3, #0
   10ec0:	b.n	10e5e <__ssvfiscanf_r+0x1e2>
   10ec2:	movs	r3, #2
   10ec4:	b.n	10e5e <__ssvfiscanf_r+0x1e2>
   10ec6:	ldr	r0, [sp, #260]	; 0x104
   10ec8:	lsls	r3, r0, #27
   10eca:	bmi.w	10cca <__ssvfiscanf_r+0x4e>
   10ece:	ldr	r3, [sp, #0]
   10ed0:	ldr	r2, [sp, #276]	; 0x114
   10ed2:	adds	r1, r3, #4
   10ed4:	str	r1, [sp, #0]
   10ed6:	ldr	r3, [r3, #0]
   10ed8:	lsls	r0, r0, #31
   10eda:	ite	mi
   10edc:	strhmi	r2, [r3, #0]
   10ede:	strpl	r2, [r3, #0]
   10ee0:	b.n	10cca <__ssvfiscanf_r+0x4e>
   10ee2:	ldr	r3, [sp, #644]	; 0x284
   10ee4:	mov	r1, r4
   10ee6:	mov	r0, r6
   10ee8:	blx	r3
   10eea:	cmp	r0, #0
   10eec:	beq.n	10e66 <__ssvfiscanf_r+0x1ea>
   10eee:	b.n	10e2c <__ssvfiscanf_r+0x1b0>
   10ef0:	ldr	r2, [sp, #276]	; 0x114
   10ef2:	adds	r2, #1
   10ef4:	str	r2, [sp, #276]	; 0x114
   10ef6:	ldr	r2, [r4, #4]
   10ef8:	subs	r2, #1
   10efa:	cmp	r2, #0
   10efc:	str	r2, [r4, #4]
   10efe:	ble.n	10f06 <__ssvfiscanf_r+0x28a>
   10f00:	adds	r3, #1
   10f02:	str	r3, [r4, #0]
   10f04:	b.n	10e6c <__ssvfiscanf_r+0x1f0>
   10f06:	ldr	r3, [sp, #644]	; 0x284
   10f08:	mov	r1, r4
   10f0a:	mov	r0, r6
   10f0c:	blx	r3
   10f0e:	cmp	r0, #0
   10f10:	beq.n	10e6c <__ssvfiscanf_r+0x1f0>
   10f12:	b.n	10e2c <__ssvfiscanf_r+0x1b0>
   10f14:	cmp	r3, #4
   10f16:	bgt.n	10f38 <__ssvfiscanf_r+0x2bc>
   10f18:	mov	r3, sp
   10f1a:	mov	r2, r4
   10f1c:	add	r1, sp, #260	; 0x104
   10f1e:	mov	r0, r6
   10f20:	bl	11020 <_scanf_i>
   10f24:	b.n	10e88 <__ssvfiscanf_r+0x20c>
   10f26:	nop
   10f28:	.word	0x00010bc9
   10f2c:	.word	0x00010c43
   10f30:	.word	0x20001210
   10f34:	.word	0x200013eb
   10f38:	ldr	r3, [pc, #44]	; (10f68 <__ssvfiscanf_r+0x2ec>)
   10f3a:	cmp	r3, #0
   10f3c:	beq.w	10cca <__ssvfiscanf_r+0x4e>
   10f40:	mov	r3, sp
   10f42:	mov	r2, r4
   10f44:	add	r1, sp, #260	; 0x104
   10f46:	mov	r0, r6
   10f48:	bl	e114 <_scanf_float>
   10f4c:	b.n	10e88 <__ssvfiscanf_r+0x20c>
   10f4e:	ldrh	r3, [r4, #12]
   10f50:	tst.w	r3, #64	; 0x40
   10f54:	it	ne
   10f56:	movne.w	r0, #4294967295
   10f5a:	add.w	sp, sp, #648	; 0x288
   10f5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f62:	ldr	r0, [sp, #272]	; 0x110
   10f64:	b.n	10f5a <__ssvfiscanf_r+0x2de>
   10f66:	nop
   10f68:	.word	0x0000e115

00010f6c <_scanf_chars>:
   10f6c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10f70:	mov	r5, r2
   10f72:	ldr	r2, [r1, #8]
   10f74:	mov	r8, r0
   10f76:	mov	r4, r1
   10f78:	cbnz	r2, 10f88 <_scanf_chars+0x1c>
   10f7a:	ldr	r2, [r1, #24]
   10f7c:	cmp	r2, #0
   10f7e:	ite	eq
   10f80:	moveq	r2, #1
   10f82:	movne.w	r2, #4294967295
   10f86:	str	r2, [r1, #8]
   10f88:	ldr	r2, [r4, #0]
   10f8a:	ldr.w	r9, [pc, #144]	; 1101c <_scanf_chars+0xb0>
   10f8e:	lsls	r1, r2, #27
   10f90:	itttt	pl
   10f92:	ldrpl	r2, [r3, #0]
   10f94:	addpl	r1, r2, #4
   10f96:	strpl	r1, [r3, #0]
   10f98:	ldrpl	r6, [r2, #0]
   10f9a:	movs	r7, #0
   10f9c:	ldr	r0, [r4, #24]
   10f9e:	cbz	r0, 10fc4 <_scanf_chars+0x58>
   10fa0:	cmp	r0, #1
   10fa2:	bne.n	10fb4 <_scanf_chars+0x48>
   10fa4:	ldr	r2, [r5, #0]
   10fa6:	ldrb	r1, [r2, #0]
   10fa8:	ldr	r2, [r4, #20]
   10faa:	ldrb	r2, [r2, r1]
   10fac:	cbnz	r2, 10fc4 <_scanf_chars+0x58>
   10fae:	cmp	r7, #0
   10fb0:	beq.n	11016 <_scanf_chars+0xaa>
   10fb2:	b.n	10ffa <_scanf_chars+0x8e>
   10fb4:	cmp	r0, #2
   10fb6:	bne.n	10ffa <_scanf_chars+0x8e>
   10fb8:	ldr	r3, [r5, #0]
   10fba:	ldrb	r3, [r3, #0]
   10fbc:	ldrb.w	r3, [r9, r3]
   10fc0:	lsls	r3, r3, #28
   10fc2:	bmi.n	10ffa <_scanf_chars+0x8e>
   10fc4:	ldr	r3, [r4, #0]
   10fc6:	lsls	r2, r3, #27
   10fc8:	ittt	pl
   10fca:	ldrpl	r3, [r5, #0]
   10fcc:	ldrbpl	r3, [r3, #0]
   10fce:	strbpl.w	r3, [r6], #1
   10fd2:	ldr	r2, [r5, #0]
   10fd4:	ldr	r3, [r5, #4]
   10fd6:	adds	r2, #1
   10fd8:	str	r2, [r5, #0]
   10fda:	ldr	r2, [r4, #8]
   10fdc:	subs	r3, #1
   10fde:	subs	r2, #1
   10fe0:	str	r3, [r5, #4]
   10fe2:	adds	r7, #1
   10fe4:	str	r2, [r4, #8]
   10fe6:	cbz	r2, 10ffa <_scanf_chars+0x8e>
   10fe8:	cmp	r3, #0
   10fea:	bgt.n	10f9c <_scanf_chars+0x30>
   10fec:	ldr.w	r3, [r4, #384]	; 0x180
   10ff0:	mov	r1, r5
   10ff2:	mov	r0, r8
   10ff4:	blx	r3
   10ff6:	cmp	r0, #0
   10ff8:	beq.n	10f9c <_scanf_chars+0x30>
   10ffa:	ldr	r3, [r4, #0]
   10ffc:	ands.w	r3, r3, #16
   11000:	bne.n	1100e <_scanf_chars+0xa2>
   11002:	ldr	r2, [r4, #12]
   11004:	adds	r2, #1
   11006:	str	r2, [r4, #12]
   11008:	ldr	r2, [r4, #24]
   1100a:	cbz	r2, 1100e <_scanf_chars+0xa2>
   1100c:	strb	r3, [r6, #0]
   1100e:	ldr	r3, [r4, #16]
   11010:	add	r3, r7
   11012:	str	r3, [r4, #16]
   11014:	movs	r0, #0
   11016:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1101a:	nop
   1101c:	.word	0x20001210

00011020 <_scanf_i>:
   11020:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11024:	mov	r8, r3
   11026:	ldr	r3, [pc, #464]	; (111f8 <_scanf_i+0x1d8>)
   11028:	mov	r4, r1
   1102a:	mov	sl, r0
   1102c:	mov	r6, r2
   1102e:	ldmia.w	r3, {r0, r1, r2}
   11032:	sub	sp, #28
   11034:	add	r3, sp, #12
   11036:	stmia.w	r3, {r0, r1, r2}
   1103a:	ldr	r3, [pc, #448]	; (111fc <_scanf_i+0x1dc>)
   1103c:	ldr	r1, [r4, #24]
   1103e:	ldr	r2, [pc, #448]	; (11200 <_scanf_i+0x1e0>)
   11040:	cmp	r1, #3
   11042:	it	ne
   11044:	movne	r2, r3
   11046:	ldr	r3, [r4, #8]
   11048:	str	r2, [sp, #4]
   1104a:	subs	r2, r3, #1
   1104c:	cmp.w	r2, #348	; 0x15c
   11050:	it	hi
   11052:	mvnhi.w	r5, #348	; 0x15c
   11056:	mov	r7, r4
   11058:	ittt	hi
   1105a:	addhi.w	r9, r3, r5
   1105e:	movwhi	r3, #349	; 0x15d
   11062:	strhi	r3, [r4, #8]
   11064:	ldr.w	r3, [r7], #28
   11068:	orr.w	r3, r3, #3328	; 0xd00
   1106c:	it	ls
   1106e:	movls.w	r9, #0
   11072:	str	r3, [r4, #0]
   11074:	mov	r5, r7
   11076:	mov.w	fp, #0
   1107a:	ldr	r1, [r6, #0]
   1107c:	add	r3, sp, #12
   1107e:	ldrb	r1, [r1, #0]
   11080:	ldr.w	r0, [r3, fp, lsl #2]
   11084:	movs	r2, #2
   11086:	bl	eae0 <memchr>
   1108a:	cbz	r0, 110d8 <_scanf_i+0xb8>
   1108c:	cmp.w	fp, #1
   11090:	bne.n	11146 <_scanf_i+0x126>
   11092:	ldr	r2, [r4, #4]
   11094:	cbnz	r2, 110a2 <_scanf_i+0x82>
   11096:	ldr	r2, [r4, #0]
   11098:	movs	r3, #8
   1109a:	orr.w	r2, r2, #512	; 0x200
   1109e:	str	r3, [r4, #4]
   110a0:	str	r2, [r4, #0]
   110a2:	ldr	r2, [r4, #0]
   110a4:	bic.w	r2, r2, #1280	; 0x500
   110a8:	str	r2, [r4, #0]
   110aa:	ldr	r2, [r4, #8]
   110ac:	subs	r1, r2, #1
   110ae:	str	r1, [r4, #8]
   110b0:	cbz	r2, 110d8 <_scanf_i+0xb8>
   110b2:	ldr	r2, [r6, #0]
   110b4:	adds	r1, r2, #1
   110b6:	str	r1, [r6, #0]
   110b8:	ldrb	r2, [r2, #0]
   110ba:	strb.w	r2, [r5], #1
   110be:	ldr	r2, [r6, #4]
   110c0:	subs	r2, #1
   110c2:	cmp	r2, #0
   110c4:	str	r2, [r6, #4]
   110c6:	bgt.n	110d8 <_scanf_i+0xb8>
   110c8:	ldr.w	r2, [r4, #384]	; 0x180
   110cc:	mov	r1, r6
   110ce:	mov	r0, sl
   110d0:	blx	r2
   110d2:	cmp	r0, #0
   110d4:	bne.w	111e2 <_scanf_i+0x1c2>
   110d8:	add.w	fp, fp, #1
   110dc:	cmp.w	fp, #3
   110e0:	bne.n	1107a <_scanf_i+0x5a>
   110e2:	ldr	r3, [r4, #4]
   110e4:	cbnz	r3, 110ea <_scanf_i+0xca>
   110e6:	movs	r3, #10
   110e8:	str	r3, [r4, #4]
   110ea:	ldr	r3, [r4, #4]
   110ec:	ldr	r1, [pc, #276]	; (11204 <_scanf_i+0x1e4>)
   110ee:	ldr	r0, [r4, #20]
   110f0:	subs	r1, r1, r3
   110f2:	bl	11364 <__sccl>
   110f6:	mov.w	fp, #0
   110fa:	ldr	r3, [r4, #8]
   110fc:	ldr	r2, [r4, #0]
   110fe:	cmp	r3, #0
   11100:	beq.n	1117e <_scanf_i+0x15e>
   11102:	ldr	r1, [r6, #0]
   11104:	ldr	r0, [r4, #20]
   11106:	ldrb.w	ip, [r1]
   1110a:	ldrb.w	r0, [r0, ip]
   1110e:	cmp	r0, #0
   11110:	beq.n	1117e <_scanf_i+0x15e>
   11112:	cmp.w	ip, #48	; 0x30
   11116:	bne.n	11162 <_scanf_i+0x142>
   11118:	lsls	r0, r2, #20
   1111a:	bpl.n	11162 <_scanf_i+0x142>
   1111c:	add.w	fp, fp, #1
   11120:	cmp.w	r9, #0
   11124:	beq.n	1112e <_scanf_i+0x10e>
   11126:	adds	r3, #1
   11128:	add.w	r9, r9, #4294967295
   1112c:	str	r3, [r4, #8]
   1112e:	ldr	r3, [r6, #4]
   11130:	subs	r3, #1
   11132:	cmp	r3, #0
   11134:	str	r3, [r6, #4]
   11136:	ble.n	11170 <_scanf_i+0x150>
   11138:	ldr	r3, [r6, #0]
   1113a:	adds	r3, #1
   1113c:	str	r3, [r6, #0]
   1113e:	ldr	r3, [r4, #8]
   11140:	subs	r3, #1
   11142:	str	r3, [r4, #8]
   11144:	b.n	110fa <_scanf_i+0xda>
   11146:	cmp.w	fp, #2
   1114a:	bne.n	110aa <_scanf_i+0x8a>
   1114c:	ldr	r2, [r4, #0]
   1114e:	and.w	r1, r2, #1536	; 0x600
   11152:	cmp.w	r1, #512	; 0x200
   11156:	bne.n	110d8 <_scanf_i+0xb8>
   11158:	movs	r3, #16
   1115a:	str	r3, [r4, #4]
   1115c:	orr.w	r2, r2, #256	; 0x100
   11160:	b.n	110a8 <_scanf_i+0x88>
   11162:	bic.w	r2, r2, #2304	; 0x900
   11166:	str	r2, [r4, #0]
   11168:	ldrb	r3, [r1, #0]
   1116a:	strb.w	r3, [r5], #1
   1116e:	b.n	1112e <_scanf_i+0x10e>
   11170:	ldr.w	r3, [r4, #384]	; 0x180
   11174:	mov	r1, r6
   11176:	mov	r0, sl
   11178:	blx	r3
   1117a:	cmp	r0, #0
   1117c:	beq.n	1113e <_scanf_i+0x11e>
   1117e:	ldr	r3, [r4, #0]
   11180:	lsls	r1, r3, #23
   11182:	bpl.n	111a0 <_scanf_i+0x180>
   11184:	cmp	r5, r7
   11186:	bls.n	1119c <_scanf_i+0x17c>
   11188:	ldrb.w	r1, [r5, #-1]
   1118c:	ldr.w	r3, [r4, #380]	; 0x17c
   11190:	mov	r2, r6
   11192:	mov	r0, sl
   11194:	blx	r3
   11196:	add.w	r9, r5, #4294967295
   1119a:	mov	r5, r9
   1119c:	cmp	r5, r7
   1119e:	beq.n	111f2 <_scanf_i+0x1d2>
   111a0:	ldr	r2, [r4, #0]
   111a2:	ands.w	r2, r2, #16
   111a6:	bne.n	111d0 <_scanf_i+0x1b0>
   111a8:	strb	r2, [r5, #0]
   111aa:	ldr	r3, [r4, #4]
   111ac:	ldr	r6, [sp, #4]
   111ae:	mov	r1, r7
   111b0:	mov	r0, sl
   111b2:	blx	r6
   111b4:	ldr.w	r3, [r8]
   111b8:	ldr	r1, [r4, #0]
   111ba:	adds	r2, r3, #4
   111bc:	str.w	r2, [r8]
   111c0:	tst.w	r1, #32
   111c4:	ldr	r3, [r3, #0]
   111c6:	beq.n	111e8 <_scanf_i+0x1c8>
   111c8:	str	r0, [r3, #0]
   111ca:	ldr	r3, [r4, #12]
   111cc:	adds	r3, #1
   111ce:	str	r3, [r4, #12]
   111d0:	ldr	r3, [r4, #16]
   111d2:	subs	r5, r5, r7
   111d4:	add	r5, fp
   111d6:	add	r3, r5
   111d8:	str	r3, [r4, #16]
   111da:	movs	r0, #0
   111dc:	add	sp, #28
   111de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111e2:	mov.w	fp, #0
   111e6:	b.n	1117e <_scanf_i+0x15e>
   111e8:	lsls	r2, r1, #31
   111ea:	ite	mi
   111ec:	strhmi	r0, [r3, #0]
   111ee:	strpl	r0, [r3, #0]
   111f0:	b.n	111ca <_scanf_i+0x1aa>
   111f2:	movs	r0, #1
   111f4:	b.n	111dc <_scanf_i+0x1bc>
   111f6:	nop
   111f8:	.word	0x20000418
   111fc:	.word	0x00011599
   11200:	.word	0x0000d86d
   11204:	.word	0x200013dd

00011208 <__sflush_r>:
   11208:	ldrh	r2, [r1, #12]
   1120a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1120e:	mov	r5, r0
   11210:	lsls	r0, r2, #28
   11212:	mov	r4, r1
   11214:	bmi.n	112c8 <__sflush_r+0xc0>
   11216:	ldr	r3, [r1, #4]
   11218:	cmp	r3, #0
   1121a:	bgt.n	11228 <__sflush_r+0x20>
   1121c:	ldr	r3, [r1, #64]	; 0x40
   1121e:	cmp	r3, #0
   11220:	bgt.n	11228 <__sflush_r+0x20>
   11222:	movs	r0, #0
   11224:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11228:	ldr	r6, [r4, #44]	; 0x2c
   1122a:	cmp	r6, #0
   1122c:	beq.n	11222 <__sflush_r+0x1a>
   1122e:	movs	r3, #0
   11230:	ands.w	r2, r2, #4096	; 0x1000
   11234:	ldr	r7, [r5, #0]
   11236:	ldr	r1, [r4, #32]
   11238:	str	r3, [r5, #0]
   1123a:	beq.n	112a2 <__sflush_r+0x9a>
   1123c:	ldr	r0, [r4, #84]	; 0x54
   1123e:	ldrh	r3, [r4, #12]
   11240:	lsls	r2, r3, #29
   11242:	bpl.n	11250 <__sflush_r+0x48>
   11244:	ldr	r3, [r4, #4]
   11246:	subs	r0, r0, r3
   11248:	ldr	r3, [r4, #52]	; 0x34
   1124a:	cbz	r3, 11250 <__sflush_r+0x48>
   1124c:	ldr	r3, [r4, #64]	; 0x40
   1124e:	subs	r0, r0, r3
   11250:	movs	r3, #0
   11252:	mov	r2, r0
   11254:	ldr	r6, [r4, #44]	; 0x2c
   11256:	ldr	r1, [r4, #32]
   11258:	mov	r0, r5
   1125a:	blx	r6
   1125c:	adds	r3, r0, #1
   1125e:	ldrh	r3, [r4, #12]
   11260:	bne.n	11270 <__sflush_r+0x68>
   11262:	ldr	r1, [r5, #0]
   11264:	cmp	r1, #29
   11266:	bhi.n	112c0 <__sflush_r+0xb8>
   11268:	ldr	r2, [pc, #164]	; (11310 <__sflush_r+0x108>)
   1126a:	asrs	r2, r1
   1126c:	lsls	r6, r2, #31
   1126e:	bmi.n	112c0 <__sflush_r+0xb8>
   11270:	movs	r2, #0
   11272:	str	r2, [r4, #4]
   11274:	lsls	r1, r3, #19
   11276:	ldr	r2, [r4, #16]
   11278:	str	r2, [r4, #0]
   1127a:	bpl.n	11286 <__sflush_r+0x7e>
   1127c:	adds	r2, r0, #1
   1127e:	bne.n	11284 <__sflush_r+0x7c>
   11280:	ldr	r3, [r5, #0]
   11282:	cbnz	r3, 11286 <__sflush_r+0x7e>
   11284:	str	r0, [r4, #84]	; 0x54
   11286:	ldr	r1, [r4, #52]	; 0x34
   11288:	str	r7, [r5, #0]
   1128a:	cmp	r1, #0
   1128c:	beq.n	11222 <__sflush_r+0x1a>
   1128e:	add.w	r3, r4, #68	; 0x44
   11292:	cmp	r1, r3
   11294:	beq.n	1129c <__sflush_r+0x94>
   11296:	mov	r0, r5
   11298:	bl	f798 <_free_r>
   1129c:	movs	r0, #0
   1129e:	str	r0, [r4, #52]	; 0x34
   112a0:	b.n	11224 <__sflush_r+0x1c>
   112a2:	movs	r3, #1
   112a4:	mov	r0, r5
   112a6:	blx	r6
   112a8:	adds	r1, r0, #1
   112aa:	bne.n	1123e <__sflush_r+0x36>
   112ac:	ldr	r3, [r5, #0]
   112ae:	cmp	r3, #0
   112b0:	beq.n	1123e <__sflush_r+0x36>
   112b2:	cmp	r3, #29
   112b4:	beq.n	112ba <__sflush_r+0xb2>
   112b6:	cmp	r3, #22
   112b8:	bne.n	112be <__sflush_r+0xb6>
   112ba:	str	r7, [r5, #0]
   112bc:	b.n	11222 <__sflush_r+0x1a>
   112be:	ldrh	r3, [r4, #12]
   112c0:	orr.w	r3, r3, #64	; 0x40
   112c4:	strh	r3, [r4, #12]
   112c6:	b.n	11224 <__sflush_r+0x1c>
   112c8:	ldr	r7, [r1, #16]
   112ca:	cmp	r7, #0
   112cc:	beq.n	11222 <__sflush_r+0x1a>
   112ce:	lsls	r3, r2, #30
   112d0:	ldr	r6, [r1, #0]
   112d2:	it	eq
   112d4:	ldreq	r3, [r1, #20]
   112d6:	str	r7, [r1, #0]
   112d8:	it	ne
   112da:	movne	r3, #0
   112dc:	sub.w	r8, r6, r7
   112e0:	str	r3, [r1, #8]
   112e2:	cmp.w	r8, #0
   112e6:	ble.n	11222 <__sflush_r+0x1a>
   112e8:	ldr	r1, [r4, #32]
   112ea:	ldr	r6, [r4, #40]	; 0x28
   112ec:	mov	r3, r8
   112ee:	mov	r2, r7
   112f0:	mov	r0, r5
   112f2:	blx	r6
   112f4:	cmp	r0, #0
   112f6:	bgt.n	11306 <__sflush_r+0xfe>
   112f8:	ldrh	r3, [r4, #12]
   112fa:	orr.w	r3, r3, #64	; 0x40
   112fe:	strh	r3, [r4, #12]
   11300:	mov.w	r0, #4294967295
   11304:	b.n	11224 <__sflush_r+0x1c>
   11306:	add	r7, r0
   11308:	sub.w	r8, r8, r0
   1130c:	b.n	112e2 <__sflush_r+0xda>
   1130e:	nop
   11310:	.word	0xdfbffffe

00011314 <_fflush_r>:
   11314:	push	{r3, r4, r5, lr}
   11316:	ldr	r3, [r1, #16]
   11318:	mov	r5, r0
   1131a:	mov	r4, r1
   1131c:	cbnz	r3, 11324 <_fflush_r+0x10>
   1131e:	movs	r5, #0
   11320:	mov	r0, r5
   11322:	pop	{r3, r4, r5, pc}
   11324:	cbz	r0, 1132e <_fflush_r+0x1a>
   11326:	ldr	r3, [r0, #32]
   11328:	cbnz	r3, 1132e <_fflush_r+0x1a>
   1132a:	bl	e610 <__sinit>
   1132e:	ldrsh.w	r3, [r4, #12]
   11332:	cmp	r3, #0
   11334:	beq.n	1131e <_fflush_r+0xa>
   11336:	ldr	r2, [r4, #100]	; 0x64
   11338:	lsls	r0, r2, #31
   1133a:	bmi.n	11346 <_fflush_r+0x32>
   1133c:	lsls	r1, r3, #22
   1133e:	bmi.n	11346 <_fflush_r+0x32>
   11340:	ldr	r0, [r4, #88]	; 0x58
   11342:	bl	eac0 <__retarget_lock_acquire_recursive>
   11346:	mov	r0, r5
   11348:	mov	r1, r4
   1134a:	bl	11208 <__sflush_r>
   1134e:	ldr	r3, [r4, #100]	; 0x64
   11350:	lsls	r2, r3, #31
   11352:	mov	r5, r0
   11354:	bmi.n	11320 <_fflush_r+0xc>
   11356:	ldrh	r3, [r4, #12]
   11358:	lsls	r3, r3, #22
   1135a:	bmi.n	11320 <_fflush_r+0xc>
   1135c:	ldr	r0, [r4, #88]	; 0x58
   1135e:	bl	eac2 <__retarget_lock_release_recursive>
   11362:	b.n	11320 <_fflush_r+0xc>

00011364 <__sccl>:
   11364:	push	{r4, r5, r6, lr}
   11366:	ldrb	r3, [r1, #0]
   11368:	mov	r4, r0
   1136a:	cmp	r3, #94	; 0x5e
   1136c:	itete	eq
   1136e:	ldrbeq	r3, [r1, #1]
   11370:	addne	r2, r1, #1
   11372:	addeq	r2, r1, #2
   11374:	movne	r1, #0
   11376:	it	eq
   11378:	moveq	r1, #1
   1137a:	subs	r0, #1
   1137c:	add.w	r5, r4, #255	; 0xff
   11380:	strb.w	r1, [r0, #1]!
   11384:	cmp	r0, r5
   11386:	bne.n	11380 <__sccl+0x1c>
   11388:	cbnz	r3, 1138e <__sccl+0x2a>
   1138a:	subs	r0, r2, #1
   1138c:	pop	{r4, r5, r6, pc}
   1138e:	eor.w	r1, r1, #1
   11392:	strb	r1, [r4, r3]
   11394:	mov	r0, r2
   11396:	mov	r2, r0
   11398:	ldrb.w	r5, [r2], #1
   1139c:	cmp	r5, #45	; 0x2d
   1139e:	beq.n	113ac <__sccl+0x48>
   113a0:	cmp	r5, #93	; 0x5d
   113a2:	beq.n	113d2 <__sccl+0x6e>
   113a4:	cmp	r5, #0
   113a6:	beq.n	1138c <__sccl+0x28>
   113a8:	mov	r3, r5
   113aa:	b.n	11392 <__sccl+0x2e>
   113ac:	ldrb	r6, [r0, #1]
   113ae:	cmp	r6, #93	; 0x5d
   113b0:	beq.n	113a8 <__sccl+0x44>
   113b2:	cmp	r3, r6
   113b4:	bgt.n	113a8 <__sccl+0x44>
   113b6:	adds	r0, #2
   113b8:	mov	r2, r3
   113ba:	adds	r2, #1
   113bc:	cmp	r6, r2
   113be:	strb	r1, [r4, r2]
   113c0:	bgt.n	113ba <__sccl+0x56>
   113c2:	subs	r2, r6, r3
   113c4:	subs	r2, #1
   113c6:	adds	r5, r3, #1
   113c8:	cmp	r3, r6
   113ca:	it	ge
   113cc:	movge	r2, #0
   113ce:	adds	r3, r5, r2
   113d0:	b.n	11396 <__sccl+0x32>
   113d2:	mov	r0, r2
   113d4:	b.n	1138c <__sccl+0x28>

000113d6 <__submore>:
   113d6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113da:	mov	r4, r1
   113dc:	ldr	r1, [r1, #52]	; 0x34
   113de:	add.w	r3, r4, #68	; 0x44
   113e2:	cmp	r1, r3
   113e4:	bne.n	11422 <__submore+0x4c>
   113e6:	mov.w	r1, #1024	; 0x400
   113ea:	bl	ca60 <_malloc_r>
   113ee:	cbnz	r0, 113f8 <__submore+0x22>
   113f0:	mov.w	r0, #4294967295
   113f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113f8:	mov.w	r3, #1024	; 0x400
   113fc:	str	r3, [r4, #56]	; 0x38
   113fe:	ldrb.w	r3, [r4, #70]	; 0x46
   11402:	str	r0, [r4, #52]	; 0x34
   11404:	strb.w	r3, [r0, #1023]	; 0x3ff
   11408:	ldrb.w	r3, [r4, #69]	; 0x45
   1140c:	strb.w	r3, [r0, #1022]	; 0x3fe
   11410:	ldrb.w	r3, [r4, #68]	; 0x44
   11414:	strb.w	r3, [r0, #1021]	; 0x3fd
   11418:	addw	r0, r0, #1021	; 0x3fd
   1141c:	str	r0, [r4, #0]
   1141e:	movs	r0, #0
   11420:	b.n	113f4 <__submore+0x1e>
   11422:	ldr	r6, [r4, #56]	; 0x38
   11424:	lsls	r7, r6, #1
   11426:	mov	r2, r7
   11428:	bl	cb64 <_realloc_r>
   1142c:	mov	r5, r0
   1142e:	cmp	r0, #0
   11430:	beq.n	113f0 <__submore+0x1a>
   11432:	add.w	r8, r0, r6
   11436:	mov	r1, r0
   11438:	mov	r2, r6
   1143a:	mov	r0, r8
   1143c:	bl	a000 <memcpy>
   11440:	strd	r5, r7, [r4, #52]	; 0x34
   11444:	str.w	r8, [r4]
   11448:	b.n	1141e <__submore+0x48>
	...

0001144c <__assert_func>:
   1144c:	push	{r0, r1, r2, r3, r4, lr}
   1144e:	mov	r4, r2
   11450:	mov	r2, r3
   11452:	ldr	r3, [pc, #36]	; (11478 <__assert_func+0x2c>)
   11454:	ldr	r3, [r3, #0]
   11456:	mov	r5, r0
   11458:	ldr	r0, [r3, #12]
   1145a:	cbz	r4, 11470 <__assert_func+0x24>
   1145c:	ldr	r3, [pc, #28]	; (1147c <__assert_func+0x30>)
   1145e:	str	r1, [sp, #0]
   11460:	strd	r3, r4, [sp, #4]
   11464:	ldr	r1, [pc, #24]	; (11480 <__assert_func+0x34>)
   11466:	mov	r3, r5
   11468:	bl	1159c <fiprintf>
   1146c:	bl	b73e <abort>
   11470:	ldr	r3, [pc, #16]	; (11484 <__assert_func+0x38>)
   11472:	mov	r4, r3
   11474:	b.n	1145e <__assert_func+0x12>
   11476:	nop
   11478:	.word	0x20002294
   1147c:	.word	0x20001172
   11480:	.word	0x2000117f
   11484:	.word	0x20000db7

00011488 <_calloc_r>:
   11488:	push	{r0, r1, r2, r4, r5, lr}
   1148a:	umull	r2, r4, r1, r2
   1148e:	cbnz	r4, 114a4 <_calloc_r+0x1c>
   11490:	mov	r1, r2
   11492:	str	r2, [sp, #4]
   11494:	bl	ca60 <_malloc_r>
   11498:	ldr	r2, [sp, #4]
   1149a:	mov	r5, r0
   1149c:	cbnz	r0, 114ac <_calloc_r+0x24>
   1149e:	mov	r0, r5
   114a0:	add	sp, #12
   114a2:	pop	{r4, r5, pc}
   114a4:	movs	r2, #12
   114a6:	str	r2, [r0, #0]
   114a8:	movs	r5, #0
   114aa:	b.n	1149e <_calloc_r+0x16>
   114ac:	mov	r1, r4
   114ae:	bl	9fbc <memset>
   114b2:	b.n	1149e <_calloc_r+0x16>

000114b4 <_strtoul_l.constprop.0>:
   114b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   114b8:	ldr	r7, [pc, #216]	; (11594 <_strtoul_l.constprop.0+0xe0>)
   114ba:	mov	lr, r0
   114bc:	mov	r5, r1
   114be:	mov	r0, r5
   114c0:	ldrb.w	r4, [r5], #1
   114c4:	ldrb	r6, [r7, r4]
   114c6:	ands.w	r6, r6, #8
   114ca:	bne.n	114be <_strtoul_l.constprop.0+0xa>
   114cc:	cmp	r4, #45	; 0x2d
   114ce:	bne.n	11532 <_strtoul_l.constprop.0+0x7e>
   114d0:	ldrb	r4, [r5, #0]
   114d2:	movs	r6, #1
   114d4:	adds	r5, r0, #2
   114d6:	cmp	r3, #0
   114d8:	beq.n	1158a <_strtoul_l.constprop.0+0xd6>
   114da:	cmp	r3, #16
   114dc:	bne.n	114f2 <_strtoul_l.constprop.0+0x3e>
   114de:	cmp	r4, #48	; 0x30
   114e0:	bne.n	114f2 <_strtoul_l.constprop.0+0x3e>
   114e2:	ldrb	r0, [r5, #0]
   114e4:	and.w	r0, r0, #223	; 0xdf
   114e8:	cmp	r0, #88	; 0x58
   114ea:	bne.n	11580 <_strtoul_l.constprop.0+0xcc>
   114ec:	ldrb	r4, [r5, #1]
   114ee:	movs	r3, #16
   114f0:	adds	r5, #2
   114f2:	mov.w	r8, #4294967295
   114f6:	movs	r7, #0
   114f8:	udiv	r8, r8, r3
   114fc:	mul.w	r9, r3, r8
   11500:	mvn.w	r9, r9
   11504:	mov	r0, r7
   11506:	sub.w	ip, r4, #48	; 0x30
   1150a:	cmp.w	ip, #9
   1150e:	bhi.n	1153c <_strtoul_l.constprop.0+0x88>
   11510:	mov	r4, ip
   11512:	cmp	r3, r4
   11514:	ble.n	1155e <_strtoul_l.constprop.0+0xaa>
   11516:	cmp.w	r7, #4294967295
   1151a:	beq.n	1152c <_strtoul_l.constprop.0+0x78>
   1151c:	cmp	r8, r0
   1151e:	bcc.n	11558 <_strtoul_l.constprop.0+0xa4>
   11520:	bne.n	11526 <_strtoul_l.constprop.0+0x72>
   11522:	cmp	r9, r4
   11524:	blt.n	11558 <_strtoul_l.constprop.0+0xa4>
   11526:	mla	r0, r0, r3, r4
   1152a:	movs	r7, #1
   1152c:	ldrb.w	r4, [r5], #1
   11530:	b.n	11506 <_strtoul_l.constprop.0+0x52>
   11532:	cmp	r4, #43	; 0x2b
   11534:	itt	eq
   11536:	ldrbeq	r4, [r5, #0]
   11538:	addeq	r5, r0, #2
   1153a:	b.n	114d6 <_strtoul_l.constprop.0+0x22>
   1153c:	sub.w	ip, r4, #65	; 0x41
   11540:	cmp.w	ip, #25
   11544:	bhi.n	1154a <_strtoul_l.constprop.0+0x96>
   11546:	subs	r4, #55	; 0x37
   11548:	b.n	11512 <_strtoul_l.constprop.0+0x5e>
   1154a:	sub.w	ip, r4, #97	; 0x61
   1154e:	cmp.w	ip, #25
   11552:	bhi.n	1155e <_strtoul_l.constprop.0+0xaa>
   11554:	subs	r4, #87	; 0x57
   11556:	b.n	11512 <_strtoul_l.constprop.0+0x5e>
   11558:	mov.w	r7, #4294967295
   1155c:	b.n	1152c <_strtoul_l.constprop.0+0x78>
   1155e:	adds	r3, r7, #1
   11560:	bne.n	11570 <_strtoul_l.constprop.0+0xbc>
   11562:	movs	r3, #34	; 0x22
   11564:	str.w	r3, [lr]
   11568:	mov	r0, r7
   1156a:	cbnz	r2, 1157a <_strtoul_l.constprop.0+0xc6>
   1156c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11570:	cbz	r6, 11574 <_strtoul_l.constprop.0+0xc0>
   11572:	negs	r0, r0
   11574:	cmp	r2, #0
   11576:	beq.n	1156c <_strtoul_l.constprop.0+0xb8>
   11578:	cbz	r7, 1157c <_strtoul_l.constprop.0+0xc8>
   1157a:	subs	r1, r5, #1
   1157c:	str	r1, [r2, #0]
   1157e:	b.n	1156c <_strtoul_l.constprop.0+0xb8>
   11580:	movs	r4, #48	; 0x30
   11582:	cmp	r3, #0
   11584:	bne.n	114f2 <_strtoul_l.constprop.0+0x3e>
   11586:	movs	r3, #8
   11588:	b.n	114f2 <_strtoul_l.constprop.0+0x3e>
   1158a:	cmp	r4, #48	; 0x30
   1158c:	beq.n	114e2 <_strtoul_l.constprop.0+0x2e>
   1158e:	movs	r3, #10
   11590:	b.n	114f2 <_strtoul_l.constprop.0+0x3e>
   11592:	nop
   11594:	.word	0x20001210

00011598 <_strtoul_r>:
   11598:	b.w	114b4 <_strtoul_l.constprop.0>

0001159c <fiprintf>:
   1159c:	push	{r1, r2, r3}
   1159e:	push	{r0, r1, lr}
   115a0:	mov	r1, r0
   115a2:	add	r3, sp, #12
   115a4:	ldr	r0, [pc, #20]	; (115bc <fiprintf+0x20>)
   115a6:	ldr.w	r2, [r3], #4
   115aa:	ldr	r0, [r0, #0]
   115ac:	str	r3, [sp, #4]
   115ae:	bl	11614 <_vfiprintf_r>
   115b2:	add	sp, #8
   115b4:	ldr.w	lr, [sp], #4
   115b8:	add	sp, #12
   115ba:	bx	lr
   115bc:	.word	0x20002294

000115c0 <__sfputc_r>:
   115c0:	ldr	r3, [r2, #8]
   115c2:	subs	r3, #1
   115c4:	cmp	r3, #0
   115c6:	push	{r4}
   115c8:	str	r3, [r2, #8]
   115ca:	bge.n	115de <__sfputc_r+0x1e>
   115cc:	ldr	r4, [r2, #24]
   115ce:	cmp	r3, r4
   115d0:	blt.n	115d6 <__sfputc_r+0x16>
   115d2:	cmp	r1, #10
   115d4:	bne.n	115de <__sfputc_r+0x1e>
   115d6:	ldr.w	r4, [sp], #4
   115da:	b.w	11848 <__swbuf_r>
   115de:	ldr	r3, [r2, #0]
   115e0:	adds	r0, r3, #1
   115e2:	str	r0, [r2, #0]
   115e4:	strb	r1, [r3, #0]
   115e6:	mov	r0, r1
   115e8:	ldr.w	r4, [sp], #4
   115ec:	bx	lr

000115ee <__sfputs_r>:
   115ee:	push	{r3, r4, r5, r6, r7, lr}
   115f0:	mov	r6, r0
   115f2:	mov	r7, r1
   115f4:	mov	r4, r2
   115f6:	adds	r5, r2, r3
   115f8:	cmp	r4, r5
   115fa:	bne.n	11600 <__sfputs_r+0x12>
   115fc:	movs	r0, #0
   115fe:	b.n	11610 <__sfputs_r+0x22>
   11600:	ldrb.w	r1, [r4], #1
   11604:	mov	r2, r7
   11606:	mov	r0, r6
   11608:	bl	115c0 <__sfputc_r>
   1160c:	adds	r3, r0, #1
   1160e:	bne.n	115f8 <__sfputs_r+0xa>
   11610:	pop	{r3, r4, r5, r6, r7, pc}
	...

00011614 <_vfiprintf_r>:
   11614:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11618:	mov	r5, r1
   1161a:	sub	sp, #116	; 0x74
   1161c:	mov	r4, r2
   1161e:	mov	r8, r3
   11620:	mov	r6, r0
   11622:	cbz	r0, 1162c <_vfiprintf_r+0x18>
   11624:	ldr	r3, [r0, #32]
   11626:	cbnz	r3, 1162c <_vfiprintf_r+0x18>
   11628:	bl	e610 <__sinit>
   1162c:	ldr	r3, [r5, #100]	; 0x64
   1162e:	lsls	r1, r3, #31
   11630:	bmi.n	1163e <_vfiprintf_r+0x2a>
   11632:	ldrh	r3, [r5, #12]
   11634:	lsls	r2, r3, #22
   11636:	bmi.n	1163e <_vfiprintf_r+0x2a>
   11638:	ldr	r0, [r5, #88]	; 0x58
   1163a:	bl	eac0 <__retarget_lock_acquire_recursive>
   1163e:	ldrh	r3, [r5, #12]
   11640:	lsls	r3, r3, #28
   11642:	bpl.n	11648 <_vfiprintf_r+0x34>
   11644:	ldr	r3, [r5, #16]
   11646:	cbnz	r3, 11670 <_vfiprintf_r+0x5c>
   11648:	mov	r1, r5
   1164a:	mov	r0, r6
   1164c:	bl	118c4 <__swsetup_r>
   11650:	cbz	r0, 11670 <_vfiprintf_r+0x5c>
   11652:	ldr	r3, [r5, #100]	; 0x64
   11654:	lsls	r4, r3, #31
   11656:	bpl.n	11662 <_vfiprintf_r+0x4e>
   11658:	mov.w	r0, #4294967295
   1165c:	add	sp, #116	; 0x74
   1165e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11662:	ldrh	r3, [r5, #12]
   11664:	lsls	r0, r3, #22
   11666:	bmi.n	11658 <_vfiprintf_r+0x44>
   11668:	ldr	r0, [r5, #88]	; 0x58
   1166a:	bl	eac2 <__retarget_lock_release_recursive>
   1166e:	b.n	11658 <_vfiprintf_r+0x44>
   11670:	movs	r3, #0
   11672:	str	r3, [sp, #36]	; 0x24
   11674:	movs	r3, #32
   11676:	strb.w	r3, [sp, #41]	; 0x29
   1167a:	str.w	r8, [sp, #12]
   1167e:	movs	r3, #48	; 0x30
   11680:	ldr.w	r8, [pc, #432]	; 11834 <_vfiprintf_r+0x220>
   11684:	strb.w	r3, [sp, #42]	; 0x2a
   11688:	mov.w	r9, #1
   1168c:	mov	r3, r4
   1168e:	mov	sl, r3
   11690:	ldrb.w	r2, [r3], #1
   11694:	cbz	r2, 1169a <_vfiprintf_r+0x86>
   11696:	cmp	r2, #37	; 0x25
   11698:	bne.n	1168e <_vfiprintf_r+0x7a>
   1169a:	subs.w	fp, sl, r4
   1169e:	beq.n	116b8 <_vfiprintf_r+0xa4>
   116a0:	mov	r3, fp
   116a2:	mov	r2, r4
   116a4:	mov	r1, r5
   116a6:	mov	r0, r6
   116a8:	bl	115ee <__sfputs_r>
   116ac:	adds	r0, #1
   116ae:	beq.w	11804 <_vfiprintf_r+0x1f0>
   116b2:	ldr	r2, [sp, #36]	; 0x24
   116b4:	add	r2, fp
   116b6:	str	r2, [sp, #36]	; 0x24
   116b8:	ldrb.w	r3, [sl]
   116bc:	cmp	r3, #0
   116be:	beq.w	11804 <_vfiprintf_r+0x1f0>
   116c2:	movs	r3, #0
   116c4:	mov.w	r2, #4294967295
   116c8:	strd	r2, r3, [sp, #20]
   116cc:	add.w	sl, sl, #1
   116d0:	str	r3, [sp, #16]
   116d2:	str	r3, [sp, #28]
   116d4:	strb.w	r3, [sp, #83]	; 0x53
   116d8:	str	r3, [sp, #104]	; 0x68
   116da:	mov	r4, sl
   116dc:	movs	r2, #5
   116de:	ldrb.w	r1, [r4], #1
   116e2:	ldr	r0, [pc, #336]	; (11834 <_vfiprintf_r+0x220>)
   116e4:	bl	eae0 <memchr>
   116e8:	ldr	r2, [sp, #16]
   116ea:	cbnz	r0, 11724 <_vfiprintf_r+0x110>
   116ec:	lsls	r1, r2, #27
   116ee:	itt	mi
   116f0:	movmi	r3, #32
   116f2:	strbmi.w	r3, [sp, #83]	; 0x53
   116f6:	lsls	r3, r2, #28
   116f8:	itt	mi
   116fa:	movmi	r3, #43	; 0x2b
   116fc:	strbmi.w	r3, [sp, #83]	; 0x53
   11700:	ldrb.w	r3, [sl]
   11704:	cmp	r3, #42	; 0x2a
   11706:	beq.n	11734 <_vfiprintf_r+0x120>
   11708:	ldr	r2, [sp, #28]
   1170a:	mov	r4, sl
   1170c:	movs	r0, #0
   1170e:	mov.w	ip, #10
   11712:	mov	r1, r4
   11714:	ldrb.w	r3, [r1], #1
   11718:	subs	r3, #48	; 0x30
   1171a:	cmp	r3, #9
   1171c:	bls.n	117ba <_vfiprintf_r+0x1a6>
   1171e:	cbz	r0, 1174e <_vfiprintf_r+0x13a>
   11720:	str	r2, [sp, #28]
   11722:	b.n	1174e <_vfiprintf_r+0x13a>
   11724:	sub.w	r3, r0, r8
   11728:	lsl.w	r3, r9, r3
   1172c:	orrs	r3, r2
   1172e:	str	r3, [sp, #16]
   11730:	mov	sl, r4
   11732:	b.n	116da <_vfiprintf_r+0xc6>
   11734:	ldr	r3, [sp, #12]
   11736:	adds	r1, r3, #4
   11738:	ldr	r3, [r3, #0]
   1173a:	str	r1, [sp, #12]
   1173c:	cmp	r3, #0
   1173e:	ittet	lt
   11740:	neglt	r3, r3
   11742:	orrlt.w	r2, r2, #2
   11746:	strge	r3, [sp, #28]
   11748:	strlt	r3, [sp, #28]
   1174a:	it	lt
   1174c:	strlt	r2, [sp, #16]
   1174e:	ldrb	r3, [r4, #0]
   11750:	cmp	r3, #46	; 0x2e
   11752:	bne.n	1176e <_vfiprintf_r+0x15a>
   11754:	ldrb	r3, [r4, #1]
   11756:	cmp	r3, #42	; 0x2a
   11758:	bne.n	117c4 <_vfiprintf_r+0x1b0>
   1175a:	ldr	r3, [sp, #12]
   1175c:	adds	r2, r3, #4
   1175e:	ldr	r3, [r3, #0]
   11760:	str	r2, [sp, #12]
   11762:	cmp	r3, #0
   11764:	it	lt
   11766:	movlt.w	r3, #4294967295
   1176a:	adds	r4, #2
   1176c:	str	r3, [sp, #20]
   1176e:	ldr.w	sl, [pc, #212]	; 11844 <_vfiprintf_r+0x230>
   11772:	ldrb	r1, [r4, #0]
   11774:	movs	r2, #3
   11776:	mov	r0, sl
   11778:	bl	eae0 <memchr>
   1177c:	cbz	r0, 1178e <_vfiprintf_r+0x17a>
   1177e:	ldr	r3, [sp, #16]
   11780:	sub.w	r0, r0, sl
   11784:	movs	r2, #64	; 0x40
   11786:	lsls	r2, r0
   11788:	orrs	r3, r2
   1178a:	adds	r4, #1
   1178c:	str	r3, [sp, #16]
   1178e:	ldrb.w	r1, [r4], #1
   11792:	ldr	r0, [pc, #164]	; (11838 <_vfiprintf_r+0x224>)
   11794:	strb.w	r1, [sp, #40]	; 0x28
   11798:	movs	r2, #6
   1179a:	bl	eae0 <memchr>
   1179e:	cmp	r0, #0
   117a0:	beq.n	11822 <_vfiprintf_r+0x20e>
   117a2:	ldr	r3, [pc, #152]	; (1183c <_vfiprintf_r+0x228>)
   117a4:	cbnz	r3, 117ee <_vfiprintf_r+0x1da>
   117a6:	ldr	r3, [sp, #12]
   117a8:	adds	r3, #7
   117aa:	bic.w	r3, r3, #7
   117ae:	adds	r3, #8
   117b0:	str	r3, [sp, #12]
   117b2:	ldr	r3, [sp, #36]	; 0x24
   117b4:	add	r3, r7
   117b6:	str	r3, [sp, #36]	; 0x24
   117b8:	b.n	1168c <_vfiprintf_r+0x78>
   117ba:	mla	r2, ip, r2, r3
   117be:	mov	r4, r1
   117c0:	movs	r0, #1
   117c2:	b.n	11712 <_vfiprintf_r+0xfe>
   117c4:	movs	r3, #0
   117c6:	adds	r4, #1
   117c8:	str	r3, [sp, #20]
   117ca:	mov	r1, r3
   117cc:	mov.w	ip, #10
   117d0:	mov	r0, r4
   117d2:	ldrb.w	r2, [r0], #1
   117d6:	subs	r2, #48	; 0x30
   117d8:	cmp	r2, #9
   117da:	bls.n	117e4 <_vfiprintf_r+0x1d0>
   117dc:	cmp	r3, #0
   117de:	beq.n	1176e <_vfiprintf_r+0x15a>
   117e0:	str	r1, [sp, #20]
   117e2:	b.n	1176e <_vfiprintf_r+0x15a>
   117e4:	mla	r1, ip, r1, r2
   117e8:	mov	r4, r0
   117ea:	movs	r3, #1
   117ec:	b.n	117d0 <_vfiprintf_r+0x1bc>
   117ee:	add	r3, sp, #12
   117f0:	str	r3, [sp, #0]
   117f2:	mov	r2, r5
   117f4:	ldr	r3, [pc, #72]	; (11840 <_vfiprintf_r+0x22c>)
   117f6:	add	r1, sp, #16
   117f8:	mov	r0, r6
   117fa:	bl	d9c0 <_printf_float>
   117fe:	mov	r7, r0
   11800:	adds	r0, r7, #1
   11802:	bne.n	117b2 <_vfiprintf_r+0x19e>
   11804:	ldr	r3, [r5, #100]	; 0x64
   11806:	lsls	r1, r3, #31
   11808:	bmi.n	11816 <_vfiprintf_r+0x202>
   1180a:	ldrh	r3, [r5, #12]
   1180c:	lsls	r2, r3, #22
   1180e:	bmi.n	11816 <_vfiprintf_r+0x202>
   11810:	ldr	r0, [r5, #88]	; 0x58
   11812:	bl	eac2 <__retarget_lock_release_recursive>
   11816:	ldrh	r3, [r5, #12]
   11818:	lsls	r3, r3, #25
   1181a:	bmi.w	11658 <_vfiprintf_r+0x44>
   1181e:	ldr	r0, [sp, #36]	; 0x24
   11820:	b.n	1165c <_vfiprintf_r+0x48>
   11822:	add	r3, sp, #12
   11824:	str	r3, [sp, #0]
   11826:	mov	r2, r5
   11828:	ldr	r3, [pc, #20]	; (11840 <_vfiprintf_r+0x22c>)
   1182a:	add	r1, sp, #16
   1182c:	mov	r0, r6
   1182e:	bl	ded0 <_printf_i>
   11832:	b.n	117fe <_vfiprintf_r+0x1ea>
   11834:	.word	0x200013e5
   11838:	.word	0x200013ef
   1183c:	.word	0x0000d9c1
   11840:	.word	0x000115ef
   11844:	.word	0x200013eb

00011848 <__swbuf_r>:
   11848:	push	{r3, r4, r5, r6, r7, lr}
   1184a:	mov	r6, r1
   1184c:	mov	r4, r2
   1184e:	mov	r5, r0
   11850:	cbz	r0, 1185a <__swbuf_r+0x12>
   11852:	ldr	r3, [r0, #32]
   11854:	cbnz	r3, 1185a <__swbuf_r+0x12>
   11856:	bl	e610 <__sinit>
   1185a:	ldr	r3, [r4, #24]
   1185c:	str	r3, [r4, #8]
   1185e:	ldrh	r3, [r4, #12]
   11860:	lsls	r2, r3, #28
   11862:	bpl.n	118b0 <__swbuf_r+0x68>
   11864:	ldr	r3, [r4, #16]
   11866:	cbz	r3, 118b0 <__swbuf_r+0x68>
   11868:	ldr	r3, [r4, #0]
   1186a:	ldr	r2, [r4, #16]
   1186c:	subs	r0, r3, r2
   1186e:	ldr	r3, [r4, #20]
   11870:	uxtb	r6, r6
   11872:	cmp	r3, r0
   11874:	mov	r7, r6
   11876:	bgt.n	11882 <__swbuf_r+0x3a>
   11878:	mov	r1, r4
   1187a:	mov	r0, r5
   1187c:	bl	11314 <_fflush_r>
   11880:	cbnz	r0, 118bc <__swbuf_r+0x74>
   11882:	ldr	r3, [r4, #8]
   11884:	subs	r3, #1
   11886:	str	r3, [r4, #8]
   11888:	ldr	r3, [r4, #0]
   1188a:	adds	r2, r3, #1
   1188c:	str	r2, [r4, #0]
   1188e:	strb	r6, [r3, #0]
   11890:	ldr	r2, [r4, #20]
   11892:	adds	r3, r0, #1
   11894:	cmp	r2, r3
   11896:	beq.n	118a2 <__swbuf_r+0x5a>
   11898:	ldrh	r3, [r4, #12]
   1189a:	lsls	r3, r3, #31
   1189c:	bpl.n	118ac <__swbuf_r+0x64>
   1189e:	cmp	r6, #10
   118a0:	bne.n	118ac <__swbuf_r+0x64>
   118a2:	mov	r1, r4
   118a4:	mov	r0, r5
   118a6:	bl	11314 <_fflush_r>
   118aa:	cbnz	r0, 118bc <__swbuf_r+0x74>
   118ac:	mov	r0, r7
   118ae:	pop	{r3, r4, r5, r6, r7, pc}
   118b0:	mov	r1, r4
   118b2:	mov	r0, r5
   118b4:	bl	118c4 <__swsetup_r>
   118b8:	cmp	r0, #0
   118ba:	beq.n	11868 <__swbuf_r+0x20>
   118bc:	mov.w	r7, #4294967295
   118c0:	b.n	118ac <__swbuf_r+0x64>
	...

000118c4 <__swsetup_r>:
   118c4:	push	{r3, r4, r5, lr}
   118c6:	ldr	r3, [pc, #168]	; (11970 <__swsetup_r+0xac>)
   118c8:	mov	r5, r0
   118ca:	ldr	r0, [r3, #0]
   118cc:	mov	r4, r1
   118ce:	cbz	r0, 118d8 <__swsetup_r+0x14>
   118d0:	ldr	r3, [r0, #32]
   118d2:	cbnz	r3, 118d8 <__swsetup_r+0x14>
   118d4:	bl	e610 <__sinit>
   118d8:	ldrh	r3, [r4, #12]
   118da:	ldrsh.w	r2, [r4, #12]
   118de:	lsls	r0, r3, #28
   118e0:	bmi.n	11928 <__swsetup_r+0x64>
   118e2:	lsls	r1, r3, #27
   118e4:	bmi.n	118f6 <__swsetup_r+0x32>
   118e6:	movs	r3, #9
   118e8:	str	r3, [r5, #0]
   118ea:	orr.w	r3, r2, #64	; 0x40
   118ee:	strh	r3, [r4, #12]
   118f0:	mov.w	r0, #4294967295
   118f4:	b.n	11960 <__swsetup_r+0x9c>
   118f6:	lsls	r0, r3, #29
   118f8:	bpl.n	11920 <__swsetup_r+0x5c>
   118fa:	ldr	r1, [r4, #52]	; 0x34
   118fc:	cbz	r1, 11910 <__swsetup_r+0x4c>
   118fe:	add.w	r3, r4, #68	; 0x44
   11902:	cmp	r1, r3
   11904:	beq.n	1190c <__swsetup_r+0x48>
   11906:	mov	r0, r5
   11908:	bl	f798 <_free_r>
   1190c:	movs	r3, #0
   1190e:	str	r3, [r4, #52]	; 0x34
   11910:	ldrh	r3, [r4, #12]
   11912:	bic.w	r3, r3, #36	; 0x24
   11916:	strh	r3, [r4, #12]
   11918:	movs	r3, #0
   1191a:	str	r3, [r4, #4]
   1191c:	ldr	r3, [r4, #16]
   1191e:	str	r3, [r4, #0]
   11920:	ldrh	r3, [r4, #12]
   11922:	orr.w	r3, r3, #8
   11926:	strh	r3, [r4, #12]
   11928:	ldr	r3, [r4, #16]
   1192a:	cbnz	r3, 11940 <__swsetup_r+0x7c>
   1192c:	ldrh	r3, [r4, #12]
   1192e:	and.w	r3, r3, #640	; 0x280
   11932:	cmp.w	r3, #512	; 0x200
   11936:	beq.n	11940 <__swsetup_r+0x7c>
   11938:	mov	r1, r4
   1193a:	mov	r0, r5
   1193c:	bl	119c0 <__smakebuf_r>
   11940:	ldrh	r0, [r4, #12]
   11942:	ldrsh.w	r2, [r4, #12]
   11946:	ands.w	r3, r0, #1
   1194a:	beq.n	11962 <__swsetup_r+0x9e>
   1194c:	movs	r3, #0
   1194e:	str	r3, [r4, #8]
   11950:	ldr	r3, [r4, #20]
   11952:	negs	r3, r3
   11954:	str	r3, [r4, #24]
   11956:	ldr	r3, [r4, #16]
   11958:	cbnz	r3, 1196c <__swsetup_r+0xa8>
   1195a:	ands.w	r0, r0, #128	; 0x80
   1195e:	bne.n	118ea <__swsetup_r+0x26>
   11960:	pop	{r3, r4, r5, pc}
   11962:	lsls	r1, r0, #30
   11964:	it	pl
   11966:	ldrpl	r3, [r4, #20]
   11968:	str	r3, [r4, #8]
   1196a:	b.n	11956 <__swsetup_r+0x92>
   1196c:	movs	r0, #0
   1196e:	b.n	11960 <__swsetup_r+0x9c>
   11970:	.word	0x20002294

00011974 <__swhatbuf_r>:
   11974:	push	{r4, r5, r6, lr}
   11976:	mov	r4, r1
   11978:	ldrsh.w	r1, [r1, #14]
   1197c:	cmp	r1, #0
   1197e:	sub	sp, #88	; 0x58
   11980:	mov	r5, r2
   11982:	mov	r6, r3
   11984:	bge.n	119a2 <__swhatbuf_r+0x2e>
   11986:	ldrh	r3, [r4, #12]
   11988:	tst.w	r3, #128	; 0x80
   1198c:	mov.w	r1, #0
   11990:	ite	eq
   11992:	moveq.w	r3, #1024	; 0x400
   11996:	movne	r3, #64	; 0x40
   11998:	movs	r0, #0
   1199a:	str	r1, [r6, #0]
   1199c:	str	r3, [r5, #0]
   1199e:	add	sp, #88	; 0x58
   119a0:	pop	{r4, r5, r6, pc}
   119a2:	mov	r2, sp
   119a4:	bl	11a38 <_fstat_r>
   119a8:	cmp	r0, #0
   119aa:	blt.n	11986 <__swhatbuf_r+0x12>
   119ac:	ldr	r1, [sp, #4]
   119ae:	and.w	r1, r1, #61440	; 0xf000
   119b2:	sub.w	r3, r1, #8192	; 0x2000
   119b6:	negs	r1, r3
   119b8:	adcs	r1, r3
   119ba:	mov.w	r3, #1024	; 0x400
   119be:	b.n	11998 <__swhatbuf_r+0x24>

000119c0 <__smakebuf_r>:
   119c0:	ldrh	r3, [r1, #12]
   119c2:	push	{r0, r1, r4, r5, r6, lr}
   119c4:	lsls	r5, r3, #30
   119c6:	mov	r6, r0
   119c8:	mov	r4, r1
   119ca:	bpl.n	119dc <__smakebuf_r+0x1c>
   119cc:	add.w	r3, r4, #71	; 0x47
   119d0:	str	r3, [r4, #0]
   119d2:	str	r3, [r4, #16]
   119d4:	movs	r3, #1
   119d6:	str	r3, [r4, #20]
   119d8:	add	sp, #8
   119da:	pop	{r4, r5, r6, pc}
   119dc:	add	r3, sp, #4
   119de:	mov	r2, sp
   119e0:	bl	11974 <__swhatbuf_r>
   119e4:	ldr	r1, [sp, #0]
   119e6:	mov	r5, r0
   119e8:	mov	r0, r6
   119ea:	bl	ca60 <_malloc_r>
   119ee:	cbnz	r0, 11a04 <__smakebuf_r+0x44>
   119f0:	ldrsh.w	r3, [r4, #12]
   119f4:	lsls	r2, r3, #22
   119f6:	bmi.n	119d8 <__smakebuf_r+0x18>
   119f8:	bic.w	r3, r3, #3
   119fc:	orr.w	r3, r3, #2
   11a00:	strh	r3, [r4, #12]
   11a02:	b.n	119cc <__smakebuf_r+0xc>
   11a04:	ldrh	r3, [r4, #12]
   11a06:	str	r0, [r4, #0]
   11a08:	orr.w	r3, r3, #128	; 0x80
   11a0c:	strh	r3, [r4, #12]
   11a0e:	ldr	r3, [sp, #0]
   11a10:	str	r3, [r4, #20]
   11a12:	ldr	r3, [sp, #4]
   11a14:	str	r0, [r4, #16]
   11a16:	cbz	r3, 11a30 <__smakebuf_r+0x70>
   11a18:	ldrsh.w	r1, [r4, #14]
   11a1c:	mov	r0, r6
   11a1e:	bl	11a5c <_isatty_r>
   11a22:	cbz	r0, 11a30 <__smakebuf_r+0x70>
   11a24:	ldrh	r3, [r4, #12]
   11a26:	bic.w	r3, r3, #3
   11a2a:	orr.w	r3, r3, #1
   11a2e:	strh	r3, [r4, #12]
   11a30:	ldrh	r3, [r4, #12]
   11a32:	orrs	r5, r3
   11a34:	strh	r5, [r4, #12]
   11a36:	b.n	119d8 <__smakebuf_r+0x18>

00011a38 <_fstat_r>:
   11a38:	push	{r3, r4, r5, lr}
   11a3a:	ldr	r5, [pc, #28]	; (11a58 <_fstat_r+0x20>)
   11a3c:	movs	r3, #0
   11a3e:	mov	r4, r0
   11a40:	mov	r0, r1
   11a42:	mov	r1, r2
   11a44:	str	r3, [r5, #0]
   11a46:	bl	b72a <_fstat>
   11a4a:	adds	r3, r0, #1
   11a4c:	bne.n	11a54 <_fstat_r+0x1c>
   11a4e:	ldr	r3, [r5, #0]
   11a50:	cbz	r3, 11a54 <_fstat_r+0x1c>
   11a52:	str	r3, [r4, #0]
   11a54:	pop	{r3, r4, r5, pc}
   11a56:	nop
   11a58:	.word	0x20014ba4

00011a5c <_isatty_r>:
   11a5c:	push	{r3, r4, r5, lr}
   11a5e:	ldr	r5, [pc, #24]	; (11a78 <_isatty_r+0x1c>)
   11a60:	movs	r3, #0
   11a62:	mov	r4, r0
   11a64:	mov	r0, r1
   11a66:	str	r3, [r5, #0]
   11a68:	bl	b734 <_isatty>
   11a6c:	adds	r3, r0, #1
   11a6e:	bne.n	11a76 <_isatty_r+0x1a>
   11a70:	ldr	r3, [r5, #0]
   11a72:	cbz	r3, 11a76 <_isatty_r+0x1a>
   11a74:	str	r3, [r4, #0]
   11a76:	pop	{r3, r4, r5, pc}
   11a78:	.word	0x20014ba4

00011a7c <__aeabi_drsub>:
   11a7c:	eor.w	r1, r1, #2147483648	; 0x80000000
   11a80:	b.n	11a88 <__adddf3>
   11a82:	nop

00011a84 <__aeabi_dsub>:
   11a84:	eor.w	r3, r3, #2147483648	; 0x80000000

00011a88 <__adddf3>:
   11a88:	push	{r4, r5, lr}
   11a8a:	mov.w	r4, r1, lsl #1
   11a8e:	mov.w	r5, r3, lsl #1
   11a92:	teq	r4, r5
   11a96:	it	eq
   11a98:	teqeq	r0, r2
   11a9c:	itttt	ne
   11a9e:	orrsne.w	ip, r4, r0
   11aa2:	orrsne.w	ip, r5, r2
   11aa6:	mvnsne.w	ip, r4, asr #21
   11aaa:	mvnsne.w	ip, r5, asr #21
   11aae:	beq.w	11c76 <__adddf3+0x1ee>
   11ab2:	mov.w	r4, r4, lsr #21
   11ab6:	rsbs	r5, r4, r5, lsr #21
   11aba:	it	lt
   11abc:	neglt	r5, r5
   11abe:	ble.n	11ada <__adddf3+0x52>
   11ac0:	add	r4, r5
   11ac2:	eor.w	r2, r0, r2
   11ac6:	eor.w	r3, r1, r3
   11aca:	eor.w	r0, r2, r0
   11ace:	eor.w	r1, r3, r1
   11ad2:	eor.w	r2, r0, r2
   11ad6:	eor.w	r3, r1, r3
   11ada:	cmp	r5, #54	; 0x36
   11adc:	it	hi
   11ade:	pophi	{r4, r5, pc}
   11ae0:	tst.w	r1, #2147483648	; 0x80000000
   11ae4:	mov.w	r1, r1, lsl #12
   11ae8:	mov.w	ip, #1048576	; 0x100000
   11aec:	orr.w	r1, ip, r1, lsr #12
   11af0:	beq.n	11af8 <__adddf3+0x70>
   11af2:	negs	r0, r0
   11af4:	sbc.w	r1, r1, r1, lsl #1
   11af8:	tst.w	r3, #2147483648	; 0x80000000
   11afc:	mov.w	r3, r3, lsl #12
   11b00:	orr.w	r3, ip, r3, lsr #12
   11b04:	beq.n	11b0c <__adddf3+0x84>
   11b06:	negs	r2, r2
   11b08:	sbc.w	r3, r3, r3, lsl #1
   11b0c:	teq	r4, r5
   11b10:	beq.w	11c62 <__adddf3+0x1da>
   11b14:	sub.w	r4, r4, #1
   11b18:	rsbs	lr, r5, #32
   11b1c:	blt.n	11b3a <__adddf3+0xb2>
   11b1e:	lsl.w	ip, r2, lr
   11b22:	lsr.w	r2, r2, r5
   11b26:	adds	r0, r0, r2
   11b28:	adc.w	r1, r1, #0
   11b2c:	lsl.w	r2, r3, lr
   11b30:	adds	r0, r0, r2
   11b32:	asr.w	r3, r3, r5
   11b36:	adcs	r1, r3
   11b38:	b.n	11b58 <__adddf3+0xd0>
   11b3a:	sub.w	r5, r5, #32
   11b3e:	add.w	lr, lr, #32
   11b42:	cmp	r2, #1
   11b44:	lsl.w	ip, r3, lr
   11b48:	it	cs
   11b4a:	orrcs.w	ip, ip, #2
   11b4e:	asr.w	r3, r3, r5
   11b52:	adds	r0, r0, r3
   11b54:	adcs.w	r1, r1, r3, asr #31
   11b58:	and.w	r5, r1, #2147483648	; 0x80000000
   11b5c:	bpl.n	11b6e <__adddf3+0xe6>
   11b5e:	mov.w	lr, #0
   11b62:	rsbs	ip, ip, #0
   11b66:	sbcs.w	r0, lr, r0
   11b6a:	sbc.w	r1, lr, r1
   11b6e:	cmp.w	r1, #1048576	; 0x100000
   11b72:	bcc.n	11bac <__adddf3+0x124>
   11b74:	cmp.w	r1, #2097152	; 0x200000
   11b78:	bcc.n	11b94 <__adddf3+0x10c>
   11b7a:	lsrs	r1, r1, #1
   11b7c:	movs.w	r0, r0, rrx
   11b80:	mov.w	ip, ip, rrx
   11b84:	add.w	r4, r4, #1
   11b88:	mov.w	r2, r4, lsl #21
   11b8c:	cmn.w	r2, #4194304	; 0x400000
   11b90:	bcs.w	11cc8 <__adddf3+0x240>
   11b94:	cmp.w	ip, #2147483648	; 0x80000000
   11b98:	it	eq
   11b9a:	movseq.w	ip, r0, lsr #1
   11b9e:	adcs.w	r0, r0, #0
   11ba2:	adc.w	r1, r1, r4, lsl #20
   11ba6:	orr.w	r1, r1, r5
   11baa:	pop	{r4, r5, pc}
   11bac:	movs.w	ip, ip, lsl #1
   11bb0:	adcs	r0, r0
   11bb2:	adc.w	r1, r1, r1
   11bb6:	subs	r4, #1
   11bb8:	it	cs
   11bba:	cmpcs.w	r1, #1048576	; 0x100000
   11bbe:	bcs.n	11b94 <__adddf3+0x10c>
   11bc0:	teq	r1, #0
   11bc4:	itt	eq
   11bc6:	moveq	r1, r0
   11bc8:	moveq	r0, #0
   11bca:	clz	r3, r1
   11bce:	it	eq
   11bd0:	addeq	r3, #32
   11bd2:	sub.w	r3, r3, #11
   11bd6:	subs.w	r2, r3, #32
   11bda:	bge.n	11bf6 <__adddf3+0x16e>
   11bdc:	adds	r2, #12
   11bde:	ble.n	11bf2 <__adddf3+0x16a>
   11be0:	add.w	ip, r2, #20
   11be4:	rsb	r2, r2, #12
   11be8:	lsl.w	r0, r1, ip
   11bec:	lsr.w	r1, r1, r2
   11bf0:	b.n	11c0c <__adddf3+0x184>
   11bf2:	add.w	r2, r2, #20
   11bf6:	it	le
   11bf8:	rsble	ip, r2, #32
   11bfc:	lsl.w	r1, r1, r2
   11c00:	lsr.w	ip, r0, ip
   11c04:	itt	le
   11c06:	orrle.w	r1, r1, ip
   11c0a:	lslle	r0, r2
   11c0c:	subs	r4, r4, r3
   11c0e:	ittt	ge
   11c10:	addge.w	r1, r1, r4, lsl #20
   11c14:	orrge	r1, r5
   11c16:	popge	{r4, r5, pc}
   11c18:	mvn.w	r4, r4
   11c1c:	subs	r4, #31
   11c1e:	bge.n	11c5a <__adddf3+0x1d2>
   11c20:	adds	r4, #12
   11c22:	bgt.n	11c42 <__adddf3+0x1ba>
   11c24:	add.w	r4, r4, #20
   11c28:	rsb	r2, r4, #32
   11c2c:	lsr.w	r0, r0, r4
   11c30:	lsl.w	r3, r1, r2
   11c34:	orr.w	r0, r0, r3
   11c38:	lsr.w	r3, r1, r4
   11c3c:	orr.w	r1, r5, r3
   11c40:	pop	{r4, r5, pc}
   11c42:	rsb	r4, r4, #12
   11c46:	rsb	r2, r4, #32
   11c4a:	lsr.w	r0, r0, r2
   11c4e:	lsl.w	r3, r1, r4
   11c52:	orr.w	r0, r0, r3
   11c56:	mov	r1, r5
   11c58:	pop	{r4, r5, pc}
   11c5a:	lsr.w	r0, r1, r4
   11c5e:	mov	r1, r5
   11c60:	pop	{r4, r5, pc}
   11c62:	teq	r4, #0
   11c66:	eor.w	r3, r3, #1048576	; 0x100000
   11c6a:	itte	eq
   11c6c:	eoreq.w	r1, r1, #1048576	; 0x100000
   11c70:	addeq	r4, #1
   11c72:	subne	r5, #1
   11c74:	b.n	11b14 <__adddf3+0x8c>
   11c76:	mvns.w	ip, r4, asr #21
   11c7a:	it	ne
   11c7c:	mvnsne.w	ip, r5, asr #21
   11c80:	beq.n	11cd6 <__adddf3+0x24e>
   11c82:	teq	r4, r5
   11c86:	it	eq
   11c88:	teqeq	r0, r2
   11c8c:	beq.n	11c9a <__adddf3+0x212>
   11c8e:	orrs.w	ip, r4, r0
   11c92:	itt	eq
   11c94:	moveq	r1, r3
   11c96:	moveq	r0, r2
   11c98:	pop	{r4, r5, pc}
   11c9a:	teq	r1, r3
   11c9e:	ittt	ne
   11ca0:	movne	r1, #0
   11ca2:	movne	r0, #0
   11ca4:	popne	{r4, r5, pc}
   11ca6:	movs.w	ip, r4, lsr #21
   11caa:	bne.n	11cb8 <__adddf3+0x230>
   11cac:	lsls	r0, r0, #1
   11cae:	adcs	r1, r1
   11cb0:	it	cs
   11cb2:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   11cb6:	pop	{r4, r5, pc}
   11cb8:	adds.w	r4, r4, #4194304	; 0x400000
   11cbc:	itt	cc
   11cbe:	addcc.w	r1, r1, #1048576	; 0x100000
   11cc2:	popcc	{r4, r5, pc}
   11cc4:	and.w	r5, r1, #2147483648	; 0x80000000
   11cc8:	orr.w	r1, r5, #2130706432	; 0x7f000000
   11ccc:	orr.w	r1, r1, #15728640	; 0xf00000
   11cd0:	mov.w	r0, #0
   11cd4:	pop	{r4, r5, pc}
   11cd6:	mvns.w	ip, r4, asr #21
   11cda:	itte	ne
   11cdc:	movne	r1, r3
   11cde:	movne	r0, r2
   11ce0:	mvnseq.w	ip, r5, asr #21
   11ce4:	itt	ne
   11ce6:	movne	r3, r1
   11ce8:	movne	r2, r0
   11cea:	orrs.w	r4, r0, r1, lsl #12
   11cee:	itte	eq
   11cf0:	orrseq.w	r5, r2, r3, lsl #12
   11cf4:	teqeq	r1, r3
   11cf8:	orrne.w	r1, r1, #524288	; 0x80000
   11cfc:	pop	{r4, r5, pc}
   11cfe:	nop

00011d00 <__aeabi_ui2d>:
   11d00:	teq	r0, #0
   11d04:	itt	eq
   11d06:	moveq	r1, #0
   11d08:	bxeq	lr
   11d0a:	push	{r4, r5, lr}
   11d0c:	mov.w	r4, #1024	; 0x400
   11d10:	add.w	r4, r4, #50	; 0x32
   11d14:	mov.w	r5, #0
   11d18:	mov.w	r1, #0
   11d1c:	b.n	11bc0 <__adddf3+0x138>
   11d1e:	nop

00011d20 <__aeabi_i2d>:
   11d20:	teq	r0, #0
   11d24:	itt	eq
   11d26:	moveq	r1, #0
   11d28:	bxeq	lr
   11d2a:	push	{r4, r5, lr}
   11d2c:	mov.w	r4, #1024	; 0x400
   11d30:	add.w	r4, r4, #50	; 0x32
   11d34:	ands.w	r5, r0, #2147483648	; 0x80000000
   11d38:	it	mi
   11d3a:	negmi	r0, r0
   11d3c:	mov.w	r1, #0
   11d40:	b.n	11bc0 <__adddf3+0x138>
   11d42:	nop

00011d44 <__aeabi_f2d>:
   11d44:	lsls	r2, r0, #1
   11d46:	mov.w	r1, r2, asr #3
   11d4a:	mov.w	r1, r1, rrx
   11d4e:	mov.w	r0, r2, lsl #28
   11d52:	itttt	ne
   11d54:	andsne.w	r3, r2, #4278190080	; 0xff000000
   11d58:	teqne	r3, #4278190080	; 0xff000000
   11d5c:	eorne.w	r1, r1, #939524096	; 0x38000000
   11d60:	bxne	lr
   11d62:	bics.w	r2, r2, #4278190080	; 0xff000000
   11d66:	it	eq
   11d68:	bxeq	lr
   11d6a:	teq	r3, #4278190080	; 0xff000000
   11d6e:	itt	eq
   11d70:	orreq.w	r1, r1, #524288	; 0x80000
   11d74:	bxeq	lr
   11d76:	push	{r4, r5, lr}
   11d78:	mov.w	r4, #896	; 0x380
   11d7c:	and.w	r5, r1, #2147483648	; 0x80000000
   11d80:	bic.w	r1, r1, #2147483648	; 0x80000000
   11d84:	b.n	11bc0 <__adddf3+0x138>
   11d86:	nop

00011d88 <__aeabi_ul2d>:
   11d88:	orrs.w	r2, r0, r1
   11d8c:	it	eq
   11d8e:	bxeq	lr
   11d90:	push	{r4, r5, lr}
   11d92:	mov.w	r5, #0
   11d96:	b.n	11dae <__aeabi_l2d+0x16>

00011d98 <__aeabi_l2d>:
   11d98:	orrs.w	r2, r0, r1
   11d9c:	it	eq
   11d9e:	bxeq	lr
   11da0:	push	{r4, r5, lr}
   11da2:	ands.w	r5, r1, #2147483648	; 0x80000000
   11da6:	bpl.n	11dae <__aeabi_l2d+0x16>
   11da8:	negs	r0, r0
   11daa:	sbc.w	r1, r1, r1, lsl #1
   11dae:	mov.w	r4, #1024	; 0x400
   11db2:	add.w	r4, r4, #50	; 0x32
   11db6:	movs.w	ip, r1, lsr #22
   11dba:	beq.w	11b6e <__adddf3+0xe6>
   11dbe:	mov.w	r2, #3
   11dc2:	movs.w	ip, ip, lsr #3
   11dc6:	it	ne
   11dc8:	addne	r2, #3
   11dca:	movs.w	ip, ip, lsr #3
   11dce:	it	ne
   11dd0:	addne	r2, #3
   11dd2:	add.w	r2, r2, ip, lsr #3
   11dd6:	rsb	r3, r2, #32
   11dda:	lsl.w	ip, r0, r3
   11dde:	lsr.w	r0, r0, r2
   11de2:	lsl.w	lr, r1, r3
   11de6:	orr.w	r0, r0, lr
   11dea:	lsr.w	r1, r1, r2
   11dee:	add	r4, r2
   11df0:	b.n	11b6e <__adddf3+0xe6>
   11df2:	nop

00011df4 <__aeabi_d2lz>:
   11df4:	push	{r3, lr}
   11df6:	mov	r2, r0
   11df8:	mov	r3, r1
   11dfa:	vmov	d7, r2, r3
   11dfe:	vcmpe.f64	d7, #0.0
   11e02:	vmrs	APSR_nzcv, fpscr
   11e06:	bmi.n	11e10 <__aeabi_d2lz+0x1c>
   11e08:	ldmia.w	sp!, {r3, lr}
   11e0c:	b.w	11e28 <__aeabi_d2ulz>
   11e10:	vneg.f64	d7, d7
   11e14:	vmov	r0, r1, d7
   11e18:	bl	11e28 <__aeabi_d2ulz>
   11e1c:	negs	r0, r0
   11e1e:	sbc.w	r1, r1, r1, lsl #1
   11e22:	pop	{r3, pc}
   11e24:	movs	r0, r0
	...

00011e28 <__aeabi_d2ulz>:
   11e28:	vldr	d6, [pc, #44]	; 11e58 <__aeabi_d2ulz+0x30>
   11e2c:	vmov	d7, r0, r1
   11e30:	vldr	d5, [pc, #44]	; 11e60 <__aeabi_d2ulz+0x38>
   11e34:	vmul.f64	d6, d7, d6
   11e38:	vcvt.u32.f64	s12, d6
   11e3c:	vcvt.f64.u32	d4, s12
   11e40:	vfms.f64	d7, d4, d5
   11e44:	vcvt.u32.f64	s15, d7
   11e48:	vmov	r1, s12
   11e4c:	vmov	r0, s15
   11e50:	bx	lr
   11e52:	nop
   11e54:	nop.w
   11e58:	.word	0x00000000
   11e5c:	.word	0x3df00000
   11e60:	.word	0x00000000
   11e64:	.word	0x41f00000

00011e68 <___reboot_Teensyduino__veneer>:
   11e68:	ldr.w	pc, [pc]	; 11e6c <___reboot_Teensyduino__veneer+0x4>
   11e6c:	.word	0x60001899

00011e70 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   11e70:	ldr.w	pc, [pc]	; 11e74 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   11e74:	.word	0x60001f1d

00011e78 <__usb_init_veneer>:
   11e78:	ldr.w	pc, [pc]	; 11e7c <__usb_init_veneer+0x4>
   11e7c:	.word	0x600017b5

00011e80 <___ZN7TwoWire5beginEv_veneer>:
   11e80:	ldr.w	pc, [pc]	; 11e84 <___ZN7TwoWire5beginEv_veneer+0x4>
   11e84:	.word	0x6000176d

00011e88 <___Z14set_audioClockilm_veneer>:
   11e88:	ldr.w	pc, [pc]	; 11e8c <___Z14set_audioClockilm_veneer+0x4>
   11e8c:	.word	0x600024d1

00011e90 <___ZN16CrashReportClasscvbEv_veneer>:
   11e90:	ldr.w	pc, [pc]	; 11e94 <___ZN16CrashReportClasscvbEv_veneer+0x4>
   11e94:	.word	0x600023c1

00011e98 <___init_veneer>:
   11e98:	ldr.w	pc, [pc]	; 11e9c <___init_veneer+0x4>
   11e9c:	.word	0x6000241d

Disassembly of section .fini:

00011ea0 <_fini>:
   11ea0:	push	{r3, r4, r5, r6, r7, lr}
   11ea2:	nop

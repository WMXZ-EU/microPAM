
.vsteensy/build/microPAM_V3_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
600023e0 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00011e60 l    d  .fini	00000000 .fini
00011e64 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200022c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60016674 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
600017f8 l     F .text.code	00000024 flexspi2_command
6000181c l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 Hibernate.cpp
2002ca3c l     O .bss	00000004 snvs_tmp
00000000 l    df *ABS*	00000000 usb.c
0000a9d8 l     F .text.itcm	000000a0 endpoint0_receive
0000aa78 l     F .text.itcm	0000007c schedule_transfer
0000aaf4 l     F .text.itcm	00000034 run_callbacks
0000ab28 l     F .text.itcm	0000001c usb_endpoint_config
0000ab44 l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
2002de29 l     O .bss	00000008 endpoint0_buffer
2002cff0 l     O .bss	00000004 endpoint0_notify_mask
20006a00 l     O .bss	00000008 endpoint0_setupdata
2002cff4 l     O .bss	00000004 endpointN_notify_mask
2002de83 l     O .bss	00000008 reply_buffer
2002de9d l     O .bss	00000001 sof_usage
2002dea5 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
2002d124 l     O .bss	00000004 s_hotCount
2002d128 l     O .bss	00000004 s_hotTemp
2002d12c l     O .bss	00000004 s_hot_ROOM
2002d130 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001d60 l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 analog.c
2002de28 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
2002d08c l     O .bss	00000000 object.0
600023d0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00000190 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
000006cc l     F .text.itcm	0000010c _GLOBAL__sub_I_storage
2002c418 l     O .bss	00000004 setup_ready
2002ce44 l     O .bss	00000004 have_disk
2002ce94 l     O .bss	00000004 loop::t0
2002d800 l     O .bss	00000002 loop::mxb
2002ce98 l     O .bss	00000004 loop::loopCount
20001e20 l     O .data	00000002 loop::status
00000000 l    df *ABS*	00000000 Acq.cpp
0000094c l     F .text.itcm	000000b8 acq_isr()
00000cb8 l     F .text.itcm	00000024 _GLOBAL__sub_I_procCount
2002c424 l     O .bss	00000008 dma
2002cc40 l     O .bss	00000200 acqBuffer
20200000 l     O .bss.dma	00000800 i2s_buffer
00000000 l    df *ABS*	00000000 Filing.cpp
00002e2e l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
00002e4e l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00002e72 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
20006a0c l     O .bss	00001800 diskBuffer
0000397c l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
2002d8be l     O .bss	00000400 configText
2000820c l     O .bss	00000200 fileHeader
2002dce2 l     O .bss	00000050 dirName
2002c83c l     O .bss	00000200 wav_hdr
2002dd32 l     O .bss	00000050 fileName
2002ce40 l     O .bss	00000004 haveStore
2002ce90 l     O .bss	00000004 checkEndOfFile(short)::dta
2002dd86 l     O .bss	00000050 timeStamp()::date_time
20001c38 l     O .data	00000004 newFolder(int)::d0
00000000 l    df *ABS*	00000000 usb_desc.c
20001e45 l     O .data	00000012 device_descriptor
6000253e l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000cdc l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
00000cfc l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000d22 l     F .text.itcm	00000014 FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]
00000d36 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000d4c l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00000d70 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00000d84 l     F .text.itcm	0000003c dbgPrint(unsigned short)
0000113c l     F .text.itcm	00000060 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
00001b90 l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001ee4 l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001ef6 l     F .text.itcm	00000006 Print::print(char) [clone .isra.0]
00001efc l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00001f20 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001f24 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001f38 l     F .text.itcm	00000038 menuGetLine()
00001f70 l     F .text.itcm	0000001c menuGetString(char*) [clone .isra.0]
00001f8c l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
2002d7e0 l     O .bss	00000020 store
2002ddd6 l     O .bss	00000028 menuGetLine()::buffer
20000fad l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Queue.cpp
20008414 l     O .bss	00024000 data_buffer
20008410 l     O .bss	00000004 queue_busy
2002c62c l     O .bss	00000004 head
2002c630 l     O .bss	00000004 tail
00000000 l    df *ABS*	00000000 Compress.cpp
2002c42c l     O .bss	00000200 dout
2002c63c l     O .bss	00000200 outData
2002ca40 l     O .bss	00000200 tempData
2002ce9c l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
00000000 l    df *ABS*	00000000 RTC.cpp
20000fec l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 MTP.cpp
00003e8c l     F .text.itcm	00000010 txEvent_event
00003e9c l     F .text.itcm	00000010 rxEvent_event
00003eac l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
00003ec4 l     F .text.itcm	00000078 MTPD::write(char const*, int) [clone .part.0]
00004966 l     F .text.itcm	00000032 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
200022c0 l     O .bss	00000020 rx_event_buffer
2002c41c l     O .bss	00000004 mtp_rxEventcount
2002c420 l     O .bss	00000004 mtp_txEventcount
200022e0 l     O .bss	00000020 rx_event_transfer
2002cea0 l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
2002cea4 l     O .bss	00000004 MTPD::write(char const*, int)::dst
20000ad8 l     O .data	00000014 propertyList
20000aec l     O .data	00000028 supported_op
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
200009ac l     O .data	0000012c lookupTable
20000b14 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
000062dc l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00006c9c l     F .text.itcm	00000030 FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00007d64 l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00008e24 l     F .text.itcm	0000002c sdIrs()
00008e50 l     F .text.itcm	00000020 gpioMux(unsigned char)
00008e70 l     F .text.itcm	00000018 isBusyCommandComplete()
00008e88 l     F .text.itcm	00000010 isBusyCommandInhibit()
00008e98 l     F .text.itcm	00000014 isBusyDat()
00008eac l     F .text.itcm	0000000c isBusyDMA()
00008eb8 l     F .text.itcm	00000014 isBusyFifoRead()
00008ecc l     F .text.itcm	00000014 isBusyFifoWrite()
00008ee0 l     F .text.itcm	00000018 isBusyTransferComplete()
00008ef8 l     F .text.itcm	000000a4 setSdclk(unsigned long)
00009000 l     F .text.itcm	00000024 waitTimeout(bool (*)())
00009024 l     F .text.itcm	0000003c yieldTimeout(bool (*)())
00009070 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
000090a0 l     F .text.itcm	000000d4 initSDHC()
00009190 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
000091f8 l     F .text.itcm	00000020 statusCMD13()
00009218 l     F .text.itcm	00000010 isBusyCMD13()
0000922c l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00009284 l     F .text.itcm	00000030 waitDmaStatus()
000092b4 l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
000095ac l     F .text.itcm	0000005c waitTransferComplete()
00009814 l     F .text.itcm	0000008c cardCMD6(unsigned long, unsigned char*)
2002dcbe l     O .bss	00000001 m_initDone
2000840c l     O .bss	00000004 m_sdClkKhz
2002dcbf l     O .bss	00000001 m_version2
2002c414 l     O .bss	00000004 m_errorLine
2002dcc0 l     O .bss	00000001 m_highCapacity
2002dcc1 l     O .bss	00000001 m_transferActive
2002dcc2 l     O .bss	00000010 m_cid
2002dcd2 l     O .bss	00000010 m_csd
2002c634 l     O .bss	00000004 m_ocr
2002c638 l     O .bss	00000004 m_rca
2002ce48 l     O .bss	00000004 m_busyFcn
2002dd82 l     O .bss	00000001 m_dmaBusy
2002ce4c l     O .bss	00000004 m_irqstat
20001e44 l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00009d54 l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000a0bc l     F .text.itcm	00000060 rx_queue_transfer
20003780 l     O .bss	00001000 rx_buffer
0000a11c l     F .text.itcm	000000ac rx_event
0000a1c8 l     F .text.itcm	0000008c usb_serial_flush_callback
20004a00 l     O .bss	00002000 txbuffer
2002d10c l     O .bss	00000004 rx_available
2002d812 l     O .bss	00000010 rx_count
2002de8b l     O .bss	00000001 rx_head
2002d822 l     O .bss	00000010 rx_index
2002de8d l     O .bss	00000009 rx_list
2002d832 l     O .bss	00000002 rx_packet_size
2002de9b l     O .bss	00000001 rx_tail
20004780 l     O .bss	00000100 rx_transfer
2002de9e l     O .bss	00000001 transmit_previous_timeout
2002d8b8 l     O .bss	00000002 tx_available
2002de9f l     O .bss	00000001 tx_head
2002dea1 l     O .bss	00000001 tx_noautoflush
2002d8ba l     O .bss	00000002 tx_packet_size
20004900 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000b734 l     F .text.itcm	00000058 flash_wait
2002de32 l     O .bss	00000001 initialized
2002d836 l     O .bss	0000007e sector_index
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000bdcc l     F .text.itcm	00000010 txEvent_event
0000bddc l     F .text.itcm	0000003c rx_event
0000be18 l     F .text.itcm	00000060 rx_queue_transfer
2002de8c l     O .bss	00000001 rx_head
2002de96 l     O .bss	00000005 rx_list
2002d110 l     O .bss	00000014 rx_list_transfer_len
2002d834 l     O .bss	00000002 rx_packet_size
2002de9c l     O .bss	00000001 rx_tail
20004880 l     O .bss	00000080 rx_transfer
2002dea0 l     O .bss	00000001 tx_head
2002d8bc l     O .bss	00000002 tx_packet_size
20004980 l     O .bss	00000080 tx_transfer
20200800 l     O .bss.dma	00000800 rx_buffer
20201000 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
2002dd85 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000c416 l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
0000c9e0 l     F .text.itcm	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
0000cb82 l     F .text.itcm	00000034 sulp
00000000 l    df *ABS*	00000000 libc_a-strtol.o
0000d728 l     F .text.itcm	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_float.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_i.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_float.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000e4dc l     F .text.itcm	00000048 std
0000e524 l     F .text.itcm	00000018 stdio_exit_handler
0000e53c l     F .text.itcm	00000040 cleanup_stdio
0000e57c l     F .text.itcm	0000003c global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-sscanf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strlcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
0000eb6c l     F .text.itcm	00000110 quorem
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
0000f7f0 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
0000fd1c l     F .text.itcm	00000024 L_shift
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-msizer.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfscanf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_i.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-sccl.o
00000000 l    df *ABS*	00000000 libc_a-ungetc.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-strtoul.o
00011474 l     F .text.itcm	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-fprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf.o
00011580 l     F .text.itcm	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00011e28 l     F .text.itcm	00000008 __usb_init_veneer
00011e30 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
00011e38 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00011e40 l     F .text.itcm	00000008 ___Z12do_hibernatev_veneer
00011e48 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
00011e50 l     F .text.itcm	00000008 ___init_veneer
00011e58 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
60002338 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
60002340 l     F .text.code	00000008 ____libc_init_array_veneer
60002348 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
60002350 l     F .text.code	00000008 __delay_veneer
60002358 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002360 l     F .text.code	00000008 __memset_veneer
60002368 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002370 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002378 l     F .text.code	00000008 __set_arm_clock_veneer
60002380 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60002388 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
60002390 l     F .text.code	00000008 __pwm_init_veneer
60002398 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
600023a0 l     F .text.code	00000008 __main_veneer
600023a8 l     F .text.code	00000008 ___Z12estAlarmTimem_veneer
600023b0 l     F .text.code	00000008 __sm_set_pool_veneer
600023b8 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
600023c0 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
600023c8 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
00010818 g     F .text.itcm	00000010 _malloc_usable_size_r
00006ccc  w    F .text.itcm	00000026 FatPartition::cacheSync()
600023e0 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
0000d85a g     F .text.itcm	000000a4 __cvt
00005424 g     F .text.itcm	000000a8 toUpcase(unsigned short)
000010f4 g     F .text.itcm	0000002e MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00010f2c g     F .text.itcm	000000b4 _scanf_chars
00002d24 g     F .text.itcm	0000004c pushData(unsigned long*)
0000a470 g     F .text.itcm	00000014 usb_serial_available
000107d6 g     F .text.itcm	00000042 __any_on
00011a1c g     F .text.itcm	00000020 _isatty_r
0000ea84 g     F .text.itcm	00000010 strcpy
6000165c g     F .text.code	00000064 do_hibernate()
000078a8 g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
6000184c g     F .text.code	00000002 startup_default_late_hook
0000e9a0 g     F .text.itcm	00000024 _lseek_r
0000934c g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c14c  w    F .text.itcm	00000074 yield
00002968 g     F .text.itcm	00000024 configGetInt16(char*)
00008790  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
2002d0ac g     O .bss	00000060 proc_stat
2002d7dc g     O .bss	00000004 usb_timer1_callback
0000401c g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
00004074 g     F .text.itcm	00000014 MTPD::write32(unsigned long)
00007704 g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
0000c4f2 g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
2002d60c g     O .bss	000001b4 storage
60002450 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
2002d810 g     O .bss	00000002 proc
60001964 g     F .text.code	00000274 configure_external_ram
000086fa  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
00008de4  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00011d58 g     F .text.itcm	0000005a .hidden __floatdidf
00007ee0 g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
2002d0a4 g     O .bss	00000004 procCount
00007c10 g     F .text.itcm	00000118 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
2002de33 g     O .bss	00000028 k_string
2002ce50 g     O .bss	00000004 FsDateTime::callback
00008004 g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
00008bcc g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000c48c g     F .text.itcm	0000001a Print::println()
20000454 g     O .data	00000070 vtable for DedicatedSpiCard
2002d0a8 g     O .bss	00000004 procMiss
0000e79a g     F .text.itcm	00000024 __sseek
0000e5d0 g     F .text.itcm	00000030 __sinit
00005950 g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
00010844 g     F .text.itcm	00000094 fcvtbuf
00011808 g     F .text.itcm	0000007a __swbuf_r
00004818 g     F .text.itcm	00000044 usb_init_events
00003f5e g     F .text.itcm	0000001c MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000cb18 g     F .text.itcm	0000000c __malloc_unlock
2002ce88 g     O .bss	00000004 FsVolume::m_cwv
00002960 g     F .text.itcm	00000008 getStore()
000072b4 g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
20006a08 g     O .bss	00000004 SerNum
2002dd84 g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
000086ee  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600022dc g     F .text.code	0000004c analog_init
0000d71c g     F .text.itcm	0000000c _strtod_r
000013ec g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
00003874 g     F .text.itcm	00000108 estAlarmTime(unsigned long)
0000e7c6 g     F .text.itcm	0000004a _vdprintf_r
00007396 g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000f894 g     F .text.itcm	0000002a __hexdig_fun
00008a1e g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
0000b78c g     F .text.itcm	00000044 eeprom_initialize
00003714 g     F .text.itcm	00000160 saveData(short)
2002d8b4 g     O .bss	00000002 shift
20001c24 g     O .data	00000004 F_CPU_ACTUAL
0000e8a4 g     F .text.itcm	00000034 memmove
0000141a g     F .text.itcm	0000004c MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
2002d07c g     O .bss	00000004 max_stat
0000e63c g     F .text.itcm	00000068 snprintf
00002c8c g     F .text.itcm	0000003c hibernate_init()
00009cd4 g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
0000fec4 g     F .text.itcm	00000080 _Balloc
00011e6c g       .ARM.exidx	00000000 __exidx_end
00007b22 g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
2002dd83 g     O .bss	00000001 EventResponder::runningFromYield
00009eca g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
000085e4 g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000bbc0 g     F .text.itcm	00000060 tempmonGetTemp
0000bb00 g     F .text.itcm	0000001e smalloc_verify_pool
0000ea2c g     F .text.itcm	0000000c __errno
00002350 g     F .text.itcm	000000ac saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
2002ce60 g     O .bss	00000004 EventResponder::firstInterrupt
0000b1cc g     F .text.itcm	00000028 usb_transfer_status
000041e6 g     F .text.itcm	0000004c MTPD::GetObjectHandles(unsigned long, unsigned long)
0000bb52 g     F .text.itcm	0000006a sm_set_pool
00003388 g     F .text.itcm	00000014 newFolder(int)
2002ce68 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
00003e18 g     F .text.itcm	00000004 rtcGetTimestamp()
2002cfe8 g     O .bss	00000004 __stdio_exit_handler
000004f8  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
000029e0 g     F .text.itcm	00000298 decodeConfigfromFile(char*)
00006278 g     F .text.itcm	00000018 ExFatPartition::rootLength()
00011db4 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
0000c388  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000119f8 g     F .text.itcm	00000024 _fstat_r
20000590 g     O .data	00000370 digital_pin_to_info_PGM
2002cff8 g     O .bss	00000004 errno
00009ed4 g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00005ffc g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
00010fe0 g     F .text.itcm	000001e8 _scanf_i
0000e75e g     F .text.itcm	00000004 __seofread
00011e68 g       .text.itcm	00000000 _etext
00008320 g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200022c0 g       .bss	00000000 _sbss
00008fa8 g     F .text.itcm	0000000c SdioCard::errorData() const
00001022 g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
00002ed0 g     F .text.itcm	0000007c loadConfigfromFile()
00003e32 g     F .text.itcm	0000000e rtc_set_datetime(datetime_t*)
00003fca g     F .text.itcm	00000016 MTPD::write16(unsigned short)
00001a66 g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
00009608 g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
00006198 g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
60002548 g       *ABS*	00000000 _stextload
000002b8 g     F .text.itcm	000001f8 loop
0000bcc4 g     F .text.itcm	00000072 flexpwm_init
0000b850 g     F .text.itcm	000000dc eepromemu_flash_write
6000184e g     F .text.code	00000004 startup_debug_reset
0000b0e0 g     F .text.itcm	00000040 usb_config_rx
0000442c g     F .text.itcm	00000100 MTPD::GetStorageInfo(unsigned long)
00005720 g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00009b0c g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
2002ce5c g     O .bss	00000004 EventResponder::lastInterrupt
00008484 g     F .text.itcm	0000002a FsBaseFile::close()
0000e810 g     F .text.itcm	00000014 vdiprintf
00005226 g     F .text.itcm	00000048 SPIClass::end()
00009f88 g     F .text.itcm	00000134 memcpy
0000fd68 g     F .text.itcm	00000136 __hexnan
000015a0 g     F .text.itcm	000000d4 MTPStorage_SD::removeFile(unsigned long, char*)
00008c94 g     F .text.itcm	00000032 SharedSpiCard::writeStop()
0000526e g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
000012c6 g     F .text.itcm	00000126 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00002340 g     F .text.itcm	00000008 storeConfig(unsigned short*, int)
200022c0 g     O .data	00000000 .hidden __TMC_END__
000030c4 g     F .text.itcm	00000088 wavHeaderInit(long, long, long, int)
000060dc g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
00001240 g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00006f76 g     F .text.itcm	00000026 FatFile::peek()
000023fc g     F .text.itcm	0000006c menu1(short)
2002d084 g     O .bss	00000004 nbuf
0001098c g     F .text.itcm	000001fc _svfprintf_r
00011ce0 g     F .text.itcm	00000022 .hidden __floatsidf
2002d7c4 g     O .bss	00000004 systick_millis_count
0000677c g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000bfb0 g     F .text.itcm	00000030 usb_mtp_available
000004b0 g     F .text.itcm	00000048 setup1()
0000e824 g     F .text.itcm	00000060 _vasniprintf_r
00004b98 g     F .text.itcm	00000638 MTPD::loop()
0000c6c4 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
2002dea3 g     O .bss	00000001 usb_configuration
000086e4  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000bb1e g     F .text.itcm	00000034 sm_align_pool
00009d38 g     F .text.itcm	0000001c SdioCard::syncDevice()
00009720 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000d0  w    F .text.itcm	00000050 StreamFile<FsBaseFile, unsigned long long>::available()
00006f9c g     F .text.itcm	0000003e FatFile::readDirCache(bool)
00010730 g     F .text.itcm	00000060 __ratio
0000879e g     F .text.itcm	0000007e SharedSpiCard::sectorCount()
60002450  w    O .text.progmem	00000018 usb_string_manufacturer_name
60002428 g     O .text.progmem	00000008 usb_string_mtp
0000c9c0 g     F .text.itcm	00000010 malloc
00000244 g     F .text.itcm	00000010 reboot()
200004ec  w    O .data	00000024 vtable for FsFile
0000b6b2  w    F .text.itcm	0000000a _fstat
0001140c g     F .text.itcm	0000003c __assert_func
00004a74 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
00003e88 g     F .text.itcm	00000002 XRTCprintTime()
20000328 g     O .data	000000c8 __mprec_tens
600016c0 g     F .text.code	000000e4 usb_init
000084ae g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
2002d608 g     O .bss	00000004 sessionID_
000086ea  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
0000b6f0 g     F .text.itcm	00000044 rtc_set
00010c02 g     F .text.itcm	0000003a __ssrefill_r
2002d7c8 g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00006810 g     F .text.itcm	000000ca ExFatFile::truncate()
20001c40 g     O .data	00000000 .hidden __dso_handle
0000b92c g     F .text.itcm	000000b4 eepromemu_flash_erase_sector
00011cc0 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000e978 g     F .text.itcm	00000008 _localeconv_r
20001e18 g     O .data	00000004 sd_str
00009e76 g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00010144 g     F .text.itcm	0000002c __i2b
20000000 g       .data	00000000 _sdata
0000be78 g     F .text.itcm	000000a4 usb_mtp_configure
20001e2c g     O .data	00000002 t_on
600024d5 g     O .text.progmem	00000069 usb_config_descriptor_480
0000c6f4 g     F .text.itcm	000002c8 .hidden __udivmoddi4
00004350 g     F .text.itcm	000000dc MTPD::getObjectPropValue(unsigned long, unsigned long)
00011a3c g     F .text.itcm	00000000 .hidden __aeabi_drsub
00009ec4 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00006cf2 g     F .text.itcm	00000036 FatFile::addCluster()
0000e9e8 g     F .text.itcm	00000020 _sbrk_r
2002d806 g     O .bss	00000002 d_rep
00009174 g     F .text.itcm	0000001c SdioCard::type() const
00003f84 g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
60001848 g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
0000a4e4 g     F .text.itcm	0000001e usb_serial_getchar
00000dde  w    F .text.itcm	00000018 FsVolume::clusterCount() const
2002d7cc g     O .bss	00000008 usb_cdc_line_coding
0000bc20 g     F .text.itcm	00000040 digitalWrite
00007900  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
2002ce64 g     O .bss	00000004 EventResponder::lastYield
000056fa g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000e9c4 g     F .text.itcm	00000024 _read_r
0000c2e8  w    F .text.itcm	00000024 Print::write(char const*)
00000082  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
00008788  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
2002cffc g     O .bss	00000010 extmem_smalloc_pool
00008b14 g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000bc60 g     F .text.itcm	00000064 pinMode
00001572 g     F .text.itcm	0000002e MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000ef4  w    F .text.itcm	0000001c FsFile::FsFile()
0000c588 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
00011d04 g     F .text.itcm	00000042 .hidden __extendsfdf2
00010c3c g     F .text.itcm	000002f0 __ssvfscanf_r
0000c34c  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000eda  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00011a48 g     F .text.itcm	00000276 .hidden __adddf3
00004320 g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
00003f7a g     F .text.itcm	00000008 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60016800 g     O .text.csf	00000c00 hab_csf
00003fe0 g     F .text.itcm	0000003a MTPD::writestring(char const*)
00007b68 g     F .text.itcm	000000a8 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
000105e8 g     F .text.itcm	00000094 __b2d
00003c4c g     F .text.itcm	00000002 adc_init()
00011e64 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
00000940  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000c314  w    F .text.itcm	00000008 Print::print(unsigned char)
0000b6bc  w    F .text.itcm	00000004 _isatty
2002d804 g     O .bss	00000002 d_0
2002ce58 g     O .bss	00000004 EventResponder::firstYield
00005300 g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001f6  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000cb24 g     F .text.itcm	0000005e _realloc_r
000029d4 g     F .text.itcm	0000000a skipEOL(char*)
0000ea38 g     F .text.itcm	00000048 __libc_init_array
0000b23c g     F .text.itcm	00000248 dtostrf
00005e46 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00008fb4 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
000065c6 g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
000012ba g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
00001b4c g     F .text.itcm	00000042 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
20000300 g     O .data	00000028 __mprec_bigtens
00010014 g     F .text.itcm	00000094 __s2b
00008a96  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000b6c6  w    F .text.itcm	00000004 abort
0000c370  w    F .text.itcm	00000004 usb_serial_class::clear()
00011cc0 g     F .text.itcm	0000001e .hidden __floatunsidf
0000b67c  w    F .text.itcm	0000002c _sbrk
600143b4 g       *ABS*	00000000 _sdataload
00010450 g     F .text.itcm	00000038 __mcmp
000018d4 g     F .text.itcm	000000b6 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
20001c3c g     O .data	00000004 __brkval
2002dea2 g     O .bss	00000001 usb_cdc_line_rtsdtr
60002328 g     F .text.code	00000000 _init
0000a254 g     F .text.itcm	00000002 usb_serial_reset
00006d98 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
0000b9e0 g     F .text.itcm	00000104 eeprom_write_byte
00000fcc  w    F .text.itcm	0000004e mSD_Base::sd_rmdir(unsigned long, char*)
00011de8 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
6000246c g     O .text.progmem	00000069 usb_config_descriptor_12
0000cbb8 g     F .text.itcm	00000b64 _strtod_l
0000fd40 g     F .text.itcm	00000028 __match
2002dee0 g       .bss	00000000 _ebss
000093c8 g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00004088 g     F .text.itcm	0000013c MTPD::WriteDescriptor()
00002e84  w    F .text.itcm	00000036 FsBaseFile::read()
20001e10 g     O .data	00000004 propertyListNum
0000006e  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000100a8 g     F .text.itcm	00000040 __hi0bits
0000566e g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001db4 g     F .text.code	00000074 CrashReportClass::clear()
00006676 g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20201880 g       .bss.dma	00000000 _heap_start
000041c4 g     F .text.itcm	00000022 MTPD::WriteStorageIDs()
000014a8 g     F .text.itcm	000000b4 MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)
2002ddfe g     O .bss	00000001 __lock___malloc_recursive_mutex
20001e28 g     O .data	00000002 h_4
00001cc8 g     F .text.itcm	000001d4 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00006290 g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
00000210 g     F .text.itcm	00000014 stopUSB()
00000940  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
2002ceb0 g     O .bss	00000138 __sf
20001c1c g     O .data	00000004 CrashReport
2002d13c g     O .bss	000004cc sdx
00008994 g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
0000056c g     F .text.itcm	00000160 storage_configure()
000029ac g     F .text.itcm	00000028 configGetString(char*, char*)
00000003 g       *ABS*	00000000 _itcm_block_count
20002320 g     O .bss	00000020 endpoint0_transfer_data
00006b02 g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
000053d6 g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000c6b4 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000bd6c g     F .text.itcm	00000060 pwm_init
0001155c g     F .text.itcm	00000024 fprintf
00011a48 g     F .text.itcm	00000276 .hidden __aeabi_dadd
2002d00c g     O .bss	00000050 file
000048d8 g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
20001e57 g     O .data	00000001 usb_mtp_status
60017400 g       .text.csf	00000000 __text_csf_end
60001bd8 g     F .text.code	0000005c usb_pll_start
000102c4 g     F .text.itcm	000000b4 __pow5mult
0000707a g     F .text.itcm	0000004c FatFile::rmdir()
20000448 g     O .data	0000000c vtable for CrashReportClass
00011d48 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
0000298c g     F .text.itcm	00000020 configGetInt32(char*)
00007aa0 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
00008e22  w    F .text.itcm	00000002 SdioCard::end()
0000e63c g     F .text.itcm	00000068 sniprintf
20002300 g     O .bss	00000020 endpoint0_transfer_ack
2002d7d4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b18c g     F .text.itcm	00000024 usb_transmit
0000c324  w    F .text.itcm	00000014 Print::println(char const*)
0000c1fc g     F .text.itcm	00000020 systick_isr
0000ea82 g     F .text.itcm	00000002 __retarget_lock_release_recursive
00003e1c g     F .text.itcm	00000016 rtc_get_datetime(datetime_t*)
00003f94 g     F .text.itcm	00000020 MTPD::write(char const*, int)
20001c28 g     O .data	00000010 Serial
2002d05c g     O .bss	00000020 logBuffer
000108d8 g     F .text.itcm	000000b4 __ssputs_r
00002348 g     F .text.itcm	00000008 loadConfig(unsigned short*, int)
0000c390  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00008584 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
60001848  w    F .text.code	00000002 startup_early_hook
00006330 g     F .text.itcm	00000094 ExFatFile::addCluster()
000088f8 g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
0000a42c g     F .text.itcm	00000044 usb_serial_peekchar
000115ae g     F .text.itcm	00000024 __sfputs_r
0000e5b8 g     F .text.itcm	0000000c __sfp_lock_acquire
0000eaa0 g     F .text.itcm	00000000 memchr
000079d0 g     F .text.itcm	000000d0 FatPartition::fatPut(unsigned long, unsigned long)
0000d980  w    F .text.itcm	00000434 _printf_float
0000a788 g     F .text.itcm	00000250 set_arm_clock
2002d7c0 g     O .bss	00000004 systick_cycle_count
20001e2e g     O .data	00000016 usb_string_serial_number_default
0000f758 g     F .text.itcm	00000098 _free_r
00008c02 g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
00008cc6 g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
000096ac g     F .text.itcm	00000074 SdioCard::readStop()
00000df6  w    F .text.itcm	00000060 FsVolume::rename(char const*, char const*)
000086f2  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000198a g     F .text.itcm	000000dc MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000c380  w    F .text.itcm	00000004 usb_serial_class::flush()
00010b88 g     F .text.itcm	0000007a _sungetc_r
00011a44 g     F .text.itcm	0000027a .hidden __aeabi_dsub
0000c378  w    F .text.itcm	00000004 usb_serial_class::read()
000083cc g     F .text.itcm	000000b8 FatFile::remove()
00011d48 g     F .text.itcm	0000006a .hidden __floatundidf
00000ef4  w    F .text.itcm	0000001c FsFile::FsFile()
0000b6c0  w    F .text.itcm	00000006 _lseek
00003c54 g     F .text.itcm	00000002 adcStatus()
00010378 g     F .text.itcm	000000d8 __lshift
000034b0 g     F .text.itcm	00000264 storeData(short)
000074d0 g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000b160 g     F .text.itcm	0000002c usb_prepare_transfer
000086f6  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b4fc g     F .text.itcm	00000180 unused_interrupt_vector
60001c34 g     F .text.code	0000012c tempmon_init
2002d7d8 g     O .bss	00000004 usb_timer0_callback
00007e14 g     F .text.itcm	000000cc FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000e824 g     F .text.itcm	00000060 _vasnprintf_r
00002c78 g     F .text.itcm	00000014 powerDown()
00008720 g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00005d80 g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000b7d0 g     F .text.itcm	00000064 eeprom_read_byte
0000e91e g     F .text.itcm	00000036 strlcpy
0000e954 g     F .text.itcm	00000024 strncmp
00007d82 g     F .text.itcm	00000092 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
000066be g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000a484 g     F .text.itcm	00000060 usb_serial_flush_input
20001e0c g     O .data	00000004 fsamp
00006136 g     F .text.itcm	00000060 ExFatPartition::freeClusterCount()
000011e0 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000f68  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
00010170 g     F .text.itcm	00000154 __multiply
00002cf8 g     F .text.itcm	00000020 getDataCount()
0000a690 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000e7c6 g     F .text.itcm	0000004a _vdiprintf_r
00000b68 g     F .text.itcm	00000084 i2s_setup()
0001067c g     F .text.itcm	000000b4 __d2b
00008d14 g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
00008e1a  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
600017a4 g     F .text.code	00000054 _reboot_Teensyduino_
00009060  w    F .text.itcm	0000000e SdioCard::~SdioCard()
6000184a g     F .text.code	00000002 startup_default_middle_hook
00000bec g     F .text.itcm	000000a4 dma_setup()
0000881c g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00008a58 g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
000097a8 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00011558 g     F .text.itcm	00000004 _strtoul_r
0000bfe0 g     F .text.itcm	000000c4 usb_mtp_send
0000ac38 g     F .text.itcm	000004a8 usb_isr
0000d830 g     F .text.itcm	0000001c __cxa_atexit
000057a0 g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
0000e980 g     F .text.itcm	00000020 _close_r
00008daa  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00011ce0 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00008ad2 g     F .text.itcm	0000002a SharedSpiCard::readStop()
00005388 g     F .text.itcm	0000004e FsCache::sync()
0000e884 g     F .text.itcm	00000020 memcmp
200004c4  w    O .data	00000028 vtable for usb_serial_class
00009ef6 g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
00002fc8 g     F .text.itcm	00000008 filing_exit()
0000466e g     F .text.itcm	000000d6 MTPD::GetObject(unsigned long)
00009f3e g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
2002d134 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000e6e4 g     F .text.itcm	00000058 sscanf
00011884 g     F .text.itcm	000000b0 __swsetup_r
00002fb4 g     F .text.itcm	00000014 stopSD()
0000c9bc  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00006450 g     F .text.itcm	00000056 ExFatFile::rmdir()
0000452c g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000dc0  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00008a9e g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
00010790 g     F .text.itcm	00000046 __copybits
0000490c g     F .text.itcm	00000016 MTPD::read16()
0000101e g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
0000e73c g     F .text.itcm	00000022 __sread
00003160 g     F .text.itcm	00000060 wavHeaderWrite(char*)
0000b834 g     F .text.itcm	0000001c eeprom_read_block
0000a6f4 g     F .text.itcm	00000094 usb_serial_flush_output
0000cb0c g     F .text.itcm	0000000c __malloc_lock
0000555c g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20002000 g     O .data	000002c0 _VectorsRam
00009efe g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00008968 g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
000112d4 g     F .text.itcm	00000050 _fflush_r
00011448 g     F .text.itcm	0000002c _calloc_r
00004874 g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
000031c0 g     F .text.itcm	000000d0 makeHeader(long*)
00000f28  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
0000809c g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
20001e2a g     O .data	00000002 t_acq
2002dea6 g     O .bss	00000001 yield_active_check_flags
00006584 g     F .text.itcm	00000042 ExFatFile::sync()
0000ea80 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
2002dea4 g     O .bss	00000001 usb_high_speed
00007574 g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
000094a4 g     F .text.itcm	00000040 SdioCard::isBusy()
00003fb4 g     F .text.itcm	00000016 MTPD::write8(unsigned char)
00009f44 g     F .text.itcm	00000000 memset
0000c396 g     F .text.itcm	00000010 main
0000d84c g     F .text.itcm	00000006 fcvt
00005e80 g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20201800 g     O .bss.dma	00000069 usb_descriptor_buffer
00000224 g     F .text.itcm	00000020 resetUSB()
00008d44 g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
000068dc g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
00004998 g     F .text.itcm	000000dc MTPD::SendObjectInfo(unsigned long, unsigned long)
0000e8d8 g     F .text.itcm	00000046 strlcat
00007360 g     F .text.itcm	00000036 FatFile::dirEntry(DirFat_t*)
0000e7be g     F .text.itcm	00000008 __sclose
0000c0a4 g     F .text.itcm	00000054 usb_init_serialnumber
0000d82c g     F .text.itcm	00000004 _strtol_r
600023e0 g       .text.code	00000000 __init_array_end
0000ec80 g     F .text.itcm	00000ad8 _dtoa_r
0000ca20 g     F .text.itcm	000000ec _malloc_r
000086fe g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
00010828 g     F .text.itcm	0000001a __ascii_wctomb
00003014 g     F .text.itcm	000000b0 writeHeaderInfo(char*, int)
00011d58 g     F .text.itcm	0000005a .hidden __aeabi_l2d
2002ce8c g     O .bss	00000004 FatVolume::m_cwv
00002cc8 g     F .text.itcm	00000030 hibernate_now(unsigned long)
000002a4 g     F .text.itcm	00000012 stopSystem()
0000c30c  w    F .text.itcm	00000008 Print::print(char const*)
00011396 g     F .text.itcm	00000074 __submore
20000580  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c3d4 g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
000051d0 g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
676e8065 g       *ABS*	00000000 __rtc_localtime
0000b484 g     F .text.itcm	0000004c micros
00004030 g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
000064a8 g     F .text.itcm	000000dc ExFatFile::syncDir()
60002468 g     O .text.progmem	00000004 string0
0000a504 g     F .text.itcm	0000018c usb_serial_write
6000184c  w    F .text.code	00000002 startup_late_hook
0000abd8 g     F .text.itcm	00000034 usb_start_sof_interrupts
00000e56  w    F .text.itcm	00000050 FsBaseFile::available() const
00008d8e g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c37c  w    F .text.itcm	00000004 usb_serial_class::available()
0000e6e4 g     F .text.itcm	00000058 siscanf
00004936 g     F .text.itcm	00000030 MTPD::readstring(char*)
00007224 g     F .text.itcm	00000080 FatFile::sync()
20000000 g     O .data	00000300 endpoint_queue_head
0000630a  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60002430  w    O .text.progmem	00000020 usb_string_product_name
00003f3c g     F .text.itcm	00000022 MTPD::GetNumObjects(unsigned long, unsigned long)
0000b4d0 g     F .text.itcm	0000002a delay
00011de8 g     F .text.itcm	00000040 .hidden __fixunsdfdi
2002d80a g     O .bss	00000002 dma_channel_allocated_mask
0000103e g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
000056da g     F .text.itcm	00000020 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00011e60 g     F .fini	00000000 _fini
00002eba  w    F .text.itcm	00000014 FsBaseFile::sync()
000088c8 g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
00005e54 g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000e6a4 g     F .text.itcm	00000040 sprintf
0000c4c4 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000d8fe g     F .text.itcm	0000007c __exponent
0000c47a g     F .text.itcm	00000012 Print::print(long)
000072a4 g     F .text.itcm	00000010 FatFile::close()
0000bbbc g     F .text.itcm	00000004 Panic_Temp_isr
00011db4 g     F .text.itcm	00000030 .hidden __fixdfdi
00000a08 g     F .text.itcm	00000160 setAudioFrequency(int)
00002d18 g     F .text.itcm	0000000c queue_isBusy()
20001e14 g     O .data	00000004 sd
000073d6 g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
00008ffc  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000b8  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000ea08 g     F .text.itcm	00000024 _write_r
2002d138 g     O .bss	00000004 sdSectorCount
000094e4 g     F .text.itcm	000000c8 SdioCard::erase(unsigned long, unsigned long)
2002d802 g     O .bss	00000002 again
0000026c g     F .text.itcm	00000038 lowPowerInit()
00002f4c g     F .text.itcm	00000068 filing_init()
0000bf1c g     F .text.itcm	00000094 usb_mtp_recv
0000eb60 g     F .text.itcm	0000000c nanf
0000ddb4 g     F .text.itcm	000000da _printf_common
20001e08 g     O .data	00000004 _impure_ptr
00005926 g     F .text.itcm	0000002a ExFatFile::peek()
000111c8 g     F .text.itcm	0000010c __sflush_r
20000424  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000c0f8  w    F .text.itcm	00000054 EventResponder::runFromYield()
000086b8 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000e600 g     F .text.itcm	0000003c _fwalk_sglue
00008f9c g     F .text.itcm	0000000c SdioCard::errorCode() const
00007352 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001ec  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
600023d0 g       .text.code	00000000 __preinit_array_end
60001e28 g     F .text.code	000004a4 CrashReportClass::printTo(Print&) const
00002dbc g     F .text.itcm	00000072 dateTime(unsigned short*, unsigned short*, unsigned char*)
0001098c g     F .text.itcm	000001fc _svfiprintf_r
00003418 g     F .text.itcm	00000098 newFileName(char*)
00000f10  w    F .text.itcm	00000018 FsFile::~FsFile()
00005fc8 g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000887a g     F .text.itcm	00000026 SharedSpiCard::spiStart()
00001674 g     F .text.itcm	000000a2 MTPStorage_SD::DeleteObject(unsigned long)
0000fe9e g     F .text.itcm	00000024 __ascii_mbtowc
2002d80c g     O .bss	00000002 h_1
0001059c g     F .text.itcm	0000004c __ulp
0000ac0c g     F .text.itcm	0000002c usb_stop_sof_interrupts
0000c31c  w    F .text.itcm	00000008 Print::print(unsigned long, int)
000007d8 g     F .text.itcm	00000168 setup
20000934 g     O .data	00000078 usb_descriptor_list
00009228 g     F .text.itcm	00000004 SdioCard::status()
000010c8 g     F .text.itcm	0000002c MTPStorage_SD::ResetIndex()
0000485c g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
000073b6 g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000ec8  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
00003c4e g     F .text.itcm	00000002 adc_exit()
00000ea6  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000eb50 g     F .text.itcm	00000010 nan
2002d088 g     O .bss	00000004 nout_dat
00006df0 g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00004744 g     F .text.itcm	000000d4 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
00010c3c g     F .text.itcm	000002f0 __ssvfiscanf_r
00006db6 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
2002ce54 g     O .bss	00000004 ExFatVolume::m_cwv
00011934 g     F .text.itcm	0000004c __swhatbuf_r
20068000 g       .text.csf	00000000 _estack
000086e0 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c2b8 g     F .text.itcm	00000030 DMAChannel::release()
00002468 g     F .text.itcm	000000cc loadParameters()
0000a6a8 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00003c50 g     F .text.itcm	00000002 usbPowerSetup()
20001db0 g     O .data	0000000c __sglue
0000a258 g     F .text.itcm	00000100 usb_serial_configure
0000c4a8  w    F .text.itcm	0000001c _write
200022c0 g       .data	00000000 _edata
000060a2 g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
2002de31 g     O .bss	00000001 external_psram_size
00004234 g     F .text.itcm	000000ec MTPD::GetObjectInfo(unsigned long)
00008ffc  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000054cc g     F .text.itcm	00000048 FsName::get16()
00008788  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00008b68 g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
0000870e g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
0000560c g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
00006d28 g     F .text.itcm	00000070 FatFile::addDirCluster()
0000c384  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000078d6 g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000c90 g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000b1f4 g     F .text.itcm	00000046 ultoa
20001e26 g     O .data	00000002 h_3
000048f6 g     F .text.itcm	00000016 MTPD::read8()
2002d808 g     O .bss	00000002 dgain
0000850e g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
0000119c g     F .text.itcm	00000042 MTPStorage_SD::ReadIndexRecord(unsigned long)
0000e762 g     F .text.itcm	00000038 __swrite
0000c1c0 g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
00002834 g     F .text.itcm	0000012c menu(short)
0000c374  w    F .text.itcm	00000004 usb_serial_class::peek()
0000d852 g     F .text.itcm	00000008 fcvtf
00008e1e  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
000088a0 g     F .text.itcm	00000028 SharedSpiCard::spiStop()
00003e40 g     F .text.itcm	00000024 rtcSetDate(int, int, int)
00001466 g     F .text.itcm	00000042 MTPStorage_SD::GetNextObjectHandle(unsigned long)
0001155c g     F .text.itcm	00000024 fiprintf
000115d4 g     F .text.itcm	00000234 _vfiprintf_r
00003e64 g     F .text.itcm	00000024 rtcSetTime(int, int, int)
00009d64  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a4  w    F .text.itcm	00000034 MTPStorage_SD::~MTPStorage_SD()
20002340 g     O .bss	00001440 mtpd
00010488 g     F .text.itcm	00000114 __mdiff
00002d70 g     F .text.itcm	0000004c pullData(unsigned long*)
00008fec g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
00001716 g     F .text.itcm	00000098 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
2002de5b g     O .bss	00000028 n_string
00006062 g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00006bac g     F .text.itcm	000000ec FatFile::getName8(char*, unsigned int)
00003290 g     F .text.itcm	000000f8 checkEndOfFile(short)
20001dbc g     O .data	0000004c _impure_data
00005a30 g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00002164 g     F .text.itcm	000001dc menu3()
0000e5c4 g     F .text.itcm	0000000c __sfp_lock_release
2002d080 g     O .bss	00000004 mtp_txEventCount
0000c338  w    F .text.itcm	00000014 Print::println(unsigned long, int)
00002fd0 g     F .text.itcm	00000044 timeStamp()
000096ac g     F .text.itcm	00000074 SdioCard::writeStop()
0000e6a4 g     F .text.itcm	00000040 siprintf
00011324 g     F .text.itcm	00000072 __sccl
00008960 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
000056a6 g     F .text.itcm	00000014 ExFatFile::close()
20001136 g     O .data	00000101 _ctype_
0000b6a8  w    F .text.itcm	00000004 _read
600023d0 g       .text.code	00000000 __init_array_start
0000c9bc  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00001060 g     F .text.itcm	00000068 MTPStorage_SD::OpenIndex()
600022cc g     F .text.code	0000000e CrashReportClass::operator bool()
00004922 g     F .text.itcm	00000014 MTPD::read32()
20001c20 g     O .data	00000004 F_BUS_ACTUAL
0000bd36 g     F .text.itcm	00000036 quadtimer_init
2002cfec g     O .bss	00000004 disk_count
0000314c g     F .text.itcm	00000014 wavHeaderUpdate(long)
00003c58 g     F .text.itcm	000000fc time2date(unsigned long, datetime_t*)
00007d28 g     F .text.itcm	0000003c FatVolume::chdir(char const*)
00001fa8 g     F .text.itcm	000001bc printPar()
20001e24 g     O .data	00000002 h_2
00003d54 g     F .text.itcm	000000c4 date2time(datetime_t*)
0000c3a8 g     F .text.itcm	0000002c Stream::timedRead()
00011980 g     F .text.itcm	00000078 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000c21c g     F .text.itcm	0000009c DMAChannel::begin(bool)
0000878a  w    F .text.itcm	00000006 SharedSpiCard::end()
0000eb40 g     F .text.itcm	00000010 strlen
0000de90 g     F .text.itcm	00000244 _printf_i
00006dc2 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
00006fda g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
0000f8c0 g     F .text.itcm	0000045c __gethex
60002430 g     O .text.progmem	00000020 usb_string_product_name_default
2002ceac g     O .bss	00000004 __malloc_sbrk_start
00003c52 g     F .text.itcm	00000002 setAGain(signed char)
0000e810 g     F .text.itcm	00000014 vdprintf
00009444 g     F .text.itcm	00000060 SdioCard::sectorCount()
00007188 g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
6000184a  w    F .text.code	00000002 startup_middle_hook
20000510 g     O .data	00000070 vtable for SdioCard
00011d04 g     F .text.itcm	00000042 .hidden __aeabi_f2d
000017ba g     F .text.itcm	00000082 MTPStorage_SD::close()
00006c98 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001852 g     F .text.code	00000112 configure_cache
0000bae4 g     F .text.itcm	0000001c eeprom_write_block
000001a4  w    F .text.itcm	00000034 MTPStorage_SD::~MTPStorage_SD()
00008e16  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
0000183c g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
2002cea8 g     O .bss	00000004 __malloc_free_list
00008a8e  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
0000339c g     F .text.itcm	0000007c newDirectory(char*)
00009bc0 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00002534 g     F .text.itcm	00000300 menu2()
00009e68 g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
000039ac g     F .text.itcm	000002a0 compress(void*)
00006ae8  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
0000101a g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00011a44 g     F .text.itcm	0000027a .hidden __subdf3
000115d4 g     F .text.itcm	00000234 _vfprintf_r
600023d0 g       .text.code	00000000 __preinit_array_start
0000b1b0 g     F .text.itcm	0000001c usb_receive
00005f28 g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001d8  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
0000155c g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
2002d8b6 g     O .bss	00000002 t_rep
000100e8 g     F .text.itcm	0000005a __lo0bits
0000603c g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
20001e1c g     O .data	00000004 tempDatai
000070c6 g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00017400 g       *ABS*	00000000 _flashimagelen
00008afc g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000c6b8 g     F .text.itcm	0000000a __aeabi_atexit
00000f10  w    F .text.itcm	00000018 FsFile::~FsFile()
0000b6cc g     F .text.itcm	00000024 rtc_get
000063c4 g     F .text.itcm	0000008c ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000c1f8 g     F .text.itcm	00000004 pendablesrvreq_isr
00004aa8 g     F .text.itcm	000000f0 MTPD::SendObject()
000017ae g     F .text.itcm	0000000c MTPStorage_SD::write(unsigned char const*, unsigned long)
2002d80e g     O .bss	00000002 monitor
20001e22 g     O .data	00000002 d_on
2002de00 g     O .bss	00000028 b_string
00001e9c g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20001c44 g     O .data	0000016c __global_locale
000098a0 g     F .text.itcm	0000026c SdioCard::begin(SdioConfig)
000056ba g     F .text.itcm	00000020 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000a358 g     F .text.itcm	000000d4 usb_serial_read
2002ddff g     O .bss	00000001 __lock___sfp_recursive_mutex
0000c4de g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000b120 g     F .text.itcm	00000040 usb_config_tx
0000b6ac  w    F .text.itcm	00000006 _close
00007912 g     F .text.itcm	000000be FatPartition::fatGet(unsigned long, unsigned long*)
0000c9d0 g     F .text.itcm	00000010 free
0000e0d4  w    F .text.itcm	00000408 _scanf_float
00005514 g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
00001122 g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
0000ff88 g     F .text.itcm	0000008c __multadd
0000ff44 g     F .text.itcm	00000044 _Bfree
00006b2a g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
20001e2e  w    O .data	00000016 usb_string_serial_number
00000254 g     F .text.itcm	00000018 getSerNum()
00009c2c g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
00008fd0 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	; (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x200022c0
60001428:	.word	0x2002dee0

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	60001848 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	; (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	; (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	; (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	; (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	; (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	; (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	; (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	; (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	; 0xe000e000
60001484:	mov.w	r2, #15728640	; 0xf00000
60001488:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	; (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	; 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	; (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	; 0x80
6000149e:	ldr	r2, [pc, #348]	; (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	; (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	; 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	; 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	; (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	; 0x70000
600014dc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	; 0x7f
600014e6:	orr.w	r3, r3, #64	; 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	; 0x24
600014ee:	bic.w	r3, r3, #127	; 0x7f
600014f2:	orr.w	r3, r3, #64	; 0x40
600014f6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	; (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001502:	bl	60001852 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	; (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	; (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	; (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001524:	orr.w	r3, r3, #16777216	; 0x1000000
60001528:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	; (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	; (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001bd8 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	; (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	60002378 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	; 0x6c
60001558:	orr.w	r3, r3, #12288	; 0x3000
6000155c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	; (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	; 0x50000
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	; (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	; 0x2e15
60001584:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	; 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	; (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	; 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001964 <configure_external_ram>
	analog_init();
6000159c:	bl	600022dc <analog_init>
	pwm_init();
600015a0:	bl	60002390 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001c34 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	6000184a <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	600016c0 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	6000184e <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	6000184c <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	60002340 <____libc_init_array_veneer>
	main();
600015ca:	bl	600023a0 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x00011e68
600015dc:	.word	0x60002548
600015e0:	.word	0x00000000
600015e4:	.word	0x200022c0
600015e8:	.word	0x600143b4
600015ec:	.word	0x20000000
600015f0:	.word	0x20002000
600015f4:	.word	0x0000b4fd
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000c1f9
6000160c:	.word	0x0000c1fd
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x2002d7c0
6000161c:	.word	0x016e3600
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x2002d7c4
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	; (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	; (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	; (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	; 0xaa0000
60001642:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	; (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <do_hibernate()>:
    if(secs>secso) hibernate_now(secs);
  }
#else
FLASHMEM
void do_hibernate(void)
{
6000165c:	push	{r3, r4, r5, lr}
    uint32_t tmp = SNVS_LPCR; // save control register
6000165e:	ldr	r3, [pc, #92]	; (600016bc <do_hibernate()+0x60>)
60001660:	ldr	r5, [r3, #56]	; 0x38

    SNVS_LPSR |= 1;
60001662:	ldr	r2, [r3, #76]	; 0x4c
60001664:	orr.w	r2, r2, #1
60001668:	str	r2, [r3, #76]	; 0x4c

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
6000166a:	ldr	r2, [r3, #56]	; 0x38
6000166c:	bic.w	r2, r2, #2
60001670:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
60001672:	ldr	r2, [r3, #56]	; 0x38
60001674:	lsls	r1, r2, #30
60001676:	bmi.n	60001672 <do_hibernate()+0x16>

    __disable_irq();
60001678:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
6000167a:	ldr	r4, [pc, #64]	; (600016bc <do_hibernate()+0x60>)
6000167c:	ldr	r0, [r4, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
6000167e:	ldr	r3, [r4, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
60001680:	ldr	r1, [r4, #84]	; 0x54
60001682:	ldr	r2, [r4, #80]	; 0x50
60001684:	cmp	r1, r3
60001686:	bne.n	6000167c <do_hibernate()+0x20>
60001688:	cmp	r2, r0
6000168a:	bne.n	6000167c <do_hibernate()+0x20>
    uint32_t secso = (msb << 17) | (lsb >> 15);
6000168c:	lsrs	r3, r3, #15

    uint32_t secs = estAlarmTime(secso);
6000168e:	orr.w	r0, r3, r0, lsl #17
60001692:	bl	600023a8 <___Z12estAlarmTimem_veneer>
    //set alarm
    //secs += nsec;
    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
60001696:	ldr	r3, [pc, #36]	; (600016bc <do_hibernate()+0x60>)
    SNVS_LPTAR = secs;
60001698:	str	r0, [r4, #88]	; 0x58
    while (SNVS_LPTAR != secs);
6000169a:	ldr	r2, [r3, #88]	; 0x58
6000169c:	cmp	r2, r0
6000169e:	bne.n	6000169a <do_hibernate()+0x3e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
600016a0:	orr.w	r5, r5, #2
600016a4:	str	r5, [r3, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
600016a6:	ldr	r2, [r3, #56]	; 0x38
600016a8:	lsls	r2, r2, #30
600016aa:	bpl.n	600016a6 <do_hibernate()+0x4a>
//    NVIC_CLEAR_PENDING(IRQ_SNVS_ONOFF);
//    attachInterruptVector(IRQ_SNVS_ONOFF, &call_back);
//    NVIC_SET_PRIORITY(IRQ_SNVS_ONOFF, 255); //lowest priority
//    asm volatile ("dsb"); //make sure to write before interrupt-enable
//    NVIC_ENABLE_IRQ(IRQ_SNVS_ONOFF);
    __enable_irq();
600016ac:	cpsie	i
  
    SNVS_LPCR |= (1 << 6); // turn off power
600016ae:	ldr	r2, [r3, #56]	; 0x38
600016b0:	orr.w	r2, r2, #64	; 0x40
600016b4:	str	r2, [r3, #56]	; 0x38
    while (1) asm("wfi");  
600016b6:	wfi
600016b8:	b.n	600016b6 <do_hibernate()+0x5a>
600016ba:	nop
600016bc:	.word	0x400d4000

600016c0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600016c0:	ldr	r3, [pc, #192]	; (60001784 <usb_init+0xc4>)
600016c2:	movw	r2, #3937	; 0xf61
{
600016c6:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600016c8:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600016cc:	bl	60002380 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600016d0:	ldr	r2, [pc, #180]	; (60001788 <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600016d2:	ldr	r1, [pc, #184]	; (6000178c <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600016d4:	ldr.w	r3, [r2, #128]	; 0x80
600016d8:	orr.w	r3, r3, #3
600016dc:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
600016e0:	movw	r2, #1028	; 0x404
600016e4:	ldr	r3, [pc, #168]	; (60001790 <usb_init+0xd0>)
600016e6:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600016ea:	ldr	r2, [pc, #168]	; (60001794 <usb_init+0xd4>)
600016ec:	ldr	r0, [r2, #0]
600016ee:	tst	r0, r1
600016f0:	bne.n	600016fa <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600016f2:	ldr.w	r1, [r3, #424]	; 0x1a8
600016f6:	lsls	r4, r1, #30
600016f8:	beq.n	60001730 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600016fa:	mov.w	r1, #2147483648	; 0x80000000
600016fe:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001700:	ldr.w	r2, [r3, #320]	; 0x140
60001704:	orr.w	r2, r2, #2
60001708:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000170c:	ldr	r2, [pc, #128]	; (60001790 <usb_init+0xd0>)
6000170e:	ldr.w	r3, [r2, #320]	; 0x140
60001712:	lsls	r0, r3, #30
60001714:	bmi.n	6000170e <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001716:	mov.w	r3, #3758153728	; 0xe000e000
6000171a:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000171e:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001720:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001724:	mov.w	r2, #2147483648	; 0x80000000
60001728:	ldr	r3, [pc, #104]	; (60001794 <usb_init+0xd4>)
6000172a:	str	r2, [r3, #56]	; 0x38
		delay(25);
6000172c:	bl	60002350 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001730:	ldr	r3, [pc, #96]	; (60001794 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
60001732:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001734:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001738:	ldr	r4, [pc, #84]	; (60001790 <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000173a:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000173c:	mov.w	r2, #768	; 0x300
	USBPHY1_PWD = 0;
60001740:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001742:	movs	r3, #10
60001744:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001748:	ldr	r3, [pc, #76]	; (60001798 <usb_init+0xd8>)
6000174a:	mov	r0, r3
6000174c:	bl	60002360 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001750:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001754:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001758:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000175a:	mov.w	r2, #4194304	; 0x400000
6000175e:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001760:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001764:	ldr	r2, [pc, #52]	; (6000179c <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001766:	str.w	r3, [r4, #328]	; 0x148
6000176a:	ldr	r3, [pc, #52]	; (600017a0 <usb_init+0xe0>)
6000176c:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001770:	mov.w	r3, #3758153728	; 0xe000e000
60001774:	mov.w	r2, #131072	; 0x20000
60001778:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000177c:	movs	r3, #1
6000177e:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001782:	pop	{r4, pc}
60001784:	.word	0x400d8000
60001788:	.word	0x400fc000
6000178c:	.word	0x001e1c00
60001790:	.word	0x402e0000
60001794:	.word	0x400d9000
60001798:	.word	0x20000000
6000179c:	.word	0x0000ac39
600017a0:	.word	0x20002000

600017a4 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
600017a4:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
600017a6:	ldr	r3, [pc, #60]	; (600017e4 <_reboot_Teensyduino_+0x40>)
600017a8:	ldr	r3, [r3, #96]	; 0x60
600017aa:	lsls	r3, r3, #30
600017ac:	bmi.n	600017b0 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600017ae:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600017b0:	cpsid	i
		USB1_USBCMD = 0;
600017b2:	ldr	r3, [pc, #52]	; (600017e8 <_reboot_Teensyduino_+0x44>)
600017b4:	movs	r2, #0
600017b6:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
600017ba:	sub.w	r3, r3, #2310144	; 0x234000
600017be:	ldr	r2, [pc, #44]	; (600017ec <_reboot_Teensyduino_+0x48>)
600017c0:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600017c2:	sub.w	r3, r3, #534773760	; 0x1fe00000
600017c6:	sub.w	r3, r3, #700416	; 0xab000
600017ca:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600017cc:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
600017d0:	ldr	r0, [pc, #28]	; (600017f0 <_reboot_Teensyduino_+0x4c>)
600017d2:	ldr	r3, [pc, #32]	; (600017f4 <_reboot_Teensyduino_+0x50>)
600017d4:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600017d6:	mov.w	r3, #2097152	; 0x200000
600017da:	ldr	r3, [r3, #28]
600017dc:	ldr	r3, [r3, #8]
600017de:	blx	r3
600017e0:	b.n	600017b0 <_reboot_Teensyduino_+0xc>
600017e2:	nop
600017e4:	.word	0x401f4400
600017e8:	.word	0x402e0000
600017ec:	.word	0x00200003
600017f0:	.word	0x20208000
600017f4:	.word	0xeb120000

600017f8 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
600017f8:	ldr	r3, [pc, #28]	; (60001818 <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600017fa:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017fc:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
600017fe:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001802:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001806:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000180a:	ldr	r2, [r3, #20]
6000180c:	lsls	r2, r2, #31
6000180e:	bpl.n	6000180a <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001810:	movs	r2, #1
60001812:	str	r2, [r3, #20]
}
60001814:	bx	lr
60001816:	nop
60001818:	.word	0x402a4000

6000181c <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
6000181c:	ldr	r3, [pc, #32]	; (60001840 <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000181e:	ldr	r2, [pc, #36]	; (60001844 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
60001820:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001824:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001828:	movs	r2, #1
6000182a:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000182e:	ldr	r2, [r3, #20]
60001830:	lsls	r2, r2, #31
60001832:	bpl.n	6000182e <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
60001834:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001838:	movs	r2, #33	; 0x21
}
6000183a:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000183c:	str	r2, [r3, #20]
}
6000183e:	bx	lr
60001840:	.word	0x402a4000
60001844:	.word	0x00030004

60001848 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001848:	bx	lr

6000184a <startup_default_middle_hook>:
6000184a:	bx	lr

6000184c <startup_default_late_hook>:
6000184c:	bx	lr

6000184e <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000184e:	nop
60001850:	bx	lr

60001852 <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
60001852:	mov.w	r3, #3758153728	; 0xe000e000
60001856:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001858:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
6000185a:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000185e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001862:	ldr	r2, [pc, #184]	; (6000191c <configure_cache+0xca>)
60001864:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001868:	movs	r2, #17
6000186a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000186e:	ldr	r2, [pc, #176]	; (60001920 <configure_cache+0xce>)
60001870:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001874:	movs	r2, #18
60001876:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000187a:	ldr	r2, [pc, #168]	; (60001924 <configure_cache+0xd2>)
6000187c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001880:	ldr	r2, [pc, #164]	; (60001928 <configure_cache+0xd6>)
60001882:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001886:	ldr	r2, [pc, #164]	; (6000192c <configure_cache+0xda>)
60001888:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000188c:	ldr	r2, [pc, #160]	; (60001930 <configure_cache+0xde>)
6000188e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001892:	ldr	r2, [pc, #160]	; (60001934 <configure_cache+0xe2>)
60001894:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001898:	ldr	r2, [pc, #156]	; (60001938 <configure_cache+0xe6>)
6000189a:	orr.w	r2, r2, #21
6000189e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600018a2:	ldr	r2, [pc, #152]	; (6000193c <configure_cache+0xea>)
600018a4:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600018a8:	add.w	r2, r2, #270532608	; 0x10200000
600018ac:	adds	r2, #13
600018ae:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600018b2:	ldr	r2, [pc, #140]	; (60001940 <configure_cache+0xee>)
600018b4:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600018b8:	ldr	r2, [pc, #136]	; (60001944 <configure_cache+0xf2>)
600018ba:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600018be:	ldr	r2, [pc, #136]	; (60001948 <configure_cache+0xf6>)
600018c0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600018c4:	ldr	r2, [pc, #132]	; (6000194c <configure_cache+0xfa>)
600018c6:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600018ca:	ldr	r2, [pc, #132]	; (60001950 <configure_cache+0xfe>)
600018cc:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600018d0:	ldr	r2, [pc, #128]	; (60001954 <configure_cache+0x102>)
600018d2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600018d6:	ldr	r2, [pc, #128]	; (60001958 <configure_cache+0x106>)
600018d8:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600018dc:	ldr	r2, [pc, #124]	; (6000195c <configure_cache+0x10a>)
600018de:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600018e2:	ldr	r2, [pc, #124]	; (60001960 <configure_cache+0x10e>)
600018e4:	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600018e8:	nop
	asm("nop");
600018ea:	nop
	asm("nop");
600018ec:	nop
	asm("nop");
600018ee:	nop
	asm("nop");
600018f0:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018f2:	movs	r2, #1
600018f4:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600018f8:	dsb	sy
	asm("isb");
600018fc:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001900:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001904:	dsb	sy
	asm("isb");
60001908:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000190c:	ldr.w	r2, [r3, #3348]	; 0xd14
60001910:	orr.w	r2, r2, #196608	; 0x30000
60001914:	str.w	r2, [r3, #3348]	; 0xd14
}
60001918:	bx	lr
6000191a:	nop
6000191c:	.word	0x1000003f
60001920:	.word	0x07080025
60001924:	.word	0x00100009
60001928:	.word	0x00200013
6000192c:	.word	0x07020021
60001930:	.word	0x20000014
60001934:	.word	0x13080025
60001938:	.word	0x2002dee0
6000193c:	.word	0x10000009
60001940:	.word	0x130b0027
60001944:	.word	0x40000017
60001948:	.word	0x13100033
6000194c:	.word	0x60000018
60001950:	.word	0x070b002f
60001954:	.word	0x70000019
60001958:	.word	0x130b002f
6000195c:	.word	0x8000001a
60001960:	.word	0x130b003b

60001964 <configure_external_ram>:
{
60001964:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001966:	ldr	r3, [pc, #536]	; (60001b80 <configure_external_ram+0x21c>)
60001968:	ldr	r2, [pc, #536]	; (60001b84 <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000196a:	ldr	r1, [pc, #540]	; (60001b88 <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000196c:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001970:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001974:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001978:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000197c:	ldr	r4, [pc, #524]	; (60001b8c <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000197e:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001982:	add.w	r2, r2, #28672	; 0x7000
60001986:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000198a:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000198e:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001992:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001996:	movs	r2, #24
60001998:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000199a:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000199c:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000199e:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600019a0:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600019a2:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600019a6:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600019aa:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600019ae:	movs	r2, #1
600019b0:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600019b4:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600019b8:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600019bc:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600019c0:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600019c4:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600019c8:	ldr	r2, [pc, #452]	; (60001b90 <configure_external_ram+0x22c>)
600019ca:	ldr	r3, [r2, #24]
600019cc:	bic.w	r3, r3, #3758096384	; 0xe0000000
600019d0:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600019d4:	orr.w	r3, r3, #2684354560	; 0xa0000000
600019d8:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600019dc:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600019de:	ldr.w	r3, [r2, #132]	; 0x84
600019e2:	orr.w	r3, r3, #12
600019e6:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600019ea:	ldr	r3, [pc, #424]	; (60001b94 <configure_external_ram+0x230>)
600019ec:	ldr	r2, [r3, #0]
600019ee:	orr.w	r2, r2, #2
600019f2:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019f4:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019f6:	ldr	r2, [pc, #416]	; (60001b98 <configure_external_ram+0x234>)
600019f8:	bic.w	r1, r1, #30848	; 0x7880
600019fc:	bic.w	r1, r1, #115	; 0x73
60001a00:	lsls	r1, r1, #16
60001a02:	lsrs	r1, r1, #16
60001a04:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a06:	ldr	r1, [pc, #404]	; (60001b9c <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a08:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001a0a:	mov.w	r2, #4294967295
60001a0e:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a10:	add.w	r2, r2, #16187392	; 0xf70000
60001a14:	ldr	r0, [r1, #8]
60001a16:	add.w	r2, r2, #14336	; 0x3800
60001a1a:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a1c:	ldr	r0, [pc, #384]	; (60001ba0 <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001a1e:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a22:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001a24:	ldr	r2, [r3, #12]
60001a26:	bic.w	r2, r2, #120	; 0x78
60001a2a:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a2c:	ldr	r2, [r3, #32]
60001a2e:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a30:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a32:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a34:	ldr	r2, [r3, #32]
60001a36:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a38:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a3c:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a3e:	ldr	r0, [pc, #356]	; (60001ba4 <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a40:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001a42:	ldr	r2, [pc, #356]	; (60001ba8 <configure_external_ram+0x244>)
60001a44:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001a46:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001a48:	ldr.w	r2, [r1, #184]	; 0xb8
60001a4c:	bic.w	r2, r2, #63	; 0x3f
60001a50:	orr.w	r2, r2, #1
60001a54:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001a58:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001a5c:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001a5e:	bic.w	r2, r2, #63	; 0x3f
60001a62:	orr.w	r2, r2, #1
60001a66:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a6a:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001a6e:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a70:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a72:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a74:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001a78:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a7a:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a7c:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a80:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a82:	ldr	r0, [pc, #296]	; (60001bac <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a84:	bic.w	r2, r2, #2
60001a88:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a8a:	ldr	r2, [pc, #292]	; (60001bb0 <configure_external_ram+0x24c>)
60001a8c:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a8e:	movs	r2, #2
60001a90:	str	r2, [r3, #28]
60001a92:	ldr	r2, [pc, #288]	; (60001bb4 <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a94:	str.w	r1, [r2], #4
60001a98:	cmp	r2, r0
60001a9a:	bne.n	60001a94 <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001a9c:	ldr	r2, [r3, #0]
60001a9e:	orr.w	r2, r2, #1
60001aa2:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001aa4:	ldr	r3, [pc, #236]	; (60001b94 <configure_external_ram+0x230>)
60001aa6:	ldr	r4, [r3, #0]
60001aa8:	ands.w	r4, r4, #1
60001aac:	bne.n	60001aa6 <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001aae:	ldr	r2, [pc, #256]	; (60001bb0 <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ab0:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001ab2:	mov	r1, r4
60001ab4:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ab6:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001ab8:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001abc:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001abe:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001ac2:	movw	r2, #1126	; 0x466
60001ac6:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001aca:	movw	r2, #1177	; 0x499
60001ace:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001ad2:	ldr	r2, [pc, #228]	; (60001bb8 <configure_external_ram+0x254>)
60001ad4:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001ad8:	movw	r2, #9217	; 0x2401
60001adc:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001ae0:	movw	r2, #1077	; 0x435
60001ae4:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001ae8:	ldr	r2, [pc, #208]	; (60001bbc <configure_external_ram+0x258>)
60001aea:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001aee:	ldr	r2, [pc, #208]	; (60001bc0 <configure_external_ram+0x25c>)
60001af0:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001af4:	ldr	r2, [pc, #204]	; (60001bc4 <configure_external_ram+0x260>)
60001af6:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001afa:	movw	r2, #8705	; 0x2201
60001afe:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001b02:	bl	600017f8 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001b06:	movs	r0, #1
60001b08:	bl	600017f8 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001b0c:	mov	r0, r6
60001b0e:	bl	600017f8 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b12:	mov	r0, r4
60001b14:	bl	6000181c <flexspi2_psram_id>
60001b18:	movw	r3, #23821	; 0x5d0d
60001b1c:	mov	r5, r0
60001b1e:	cmp	r0, r3
60001b20:	bne.n	60001b72 <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001b22:	movs	r0, #4
60001b24:	bl	600017f8 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001b28:	mov.w	r1, #8388608	; 0x800000
60001b2c:	mov	r0, r4
60001b2e:	bl	600017f8 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001b32:	movs	r0, #1
60001b34:	bl	600017f8 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001b38:	mov	r0, r6
60001b3a:	bl	600017f8 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b3e:	mov	r0, r1
60001b40:	bl	6000181c <flexspi2_psram_id>
60001b44:	cmp	r0, r5
60001b46:	bne.n	60001b6e <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001b48:	movs	r0, #4
60001b4a:	bl	600017f8 <flexspi2_command>
			external_psram_size = 16;
60001b4e:	movs	r0, #16
			external_psram_size * 0x100000 -
60001b50:	ldr	r1, [pc, #116]	; (60001bc8 <configure_external_ram+0x264>)
			external_psram_size = 16;
60001b52:	ldr	r3, [pc, #120]	; (60001bcc <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001b54:	ldr	r2, [pc, #120]	; (60001bd0 <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001b56:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b58:	movs	r3, #0
			external_psram_size * 0x100000 -
60001b5a:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b5c:	str	r3, [sp, #0]
60001b5e:	movs	r3, #1
60001b60:	add.w	r2, r2, r0, lsl #20
60001b64:	ldr	r0, [pc, #108]	; (60001bd4 <configure_external_ram+0x270>)
60001b66:	bl	600023b0 <__sm_set_pool_veneer>
}
60001b6a:	add	sp, #8
60001b6c:	pop	{r4, r5, r6, pc}
60001b6e:	movs	r0, #8
60001b70:	b.n	60001b50 <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b72:	movs	r2, #16
60001b74:	ldr	r0, [pc, #92]	; (60001bd4 <configure_external_ram+0x270>)
}
60001b76:	add	sp, #8
60001b78:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b7c:	b.w	60002360 <__memset_veneer>
60001b80:	.word	0x401f8000
60001b84:	.word	0x0001b0f9
60001b88:	.word	0x000110f9
60001b8c:	.word	0x7cf0ff00
60001b90:	.word	0x400fc000
60001b94:	.word	0x402a4000
60001b98:	.word	0xffff0012
60001b9c:	.word	0x402a8000
60001ba0:	.word	0x80000040
60001ba4:	.word	0x00020063
60001ba8:	.word	0x830f00ff
60001bac:	.word	0x402a4300
60001bb0:	.word	0x5af05af0
60001bb4:	.word	0x402a4200
60001bb8:	.word	0x3018049f
60001bbc:	.word	0x0a1806eb
60001bc0:	.word	0x26013206
60001bc4:	.word	0x0a180638
60001bc8:	.word	0x70000000
60001bcc:	.word	0x2002de31
60001bd0:	.word	0x70000000
60001bd4:	.word	0x2002cffc

60001bd8 <usb_pll_start>:
{
60001bd8:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001bda:	ldr	r3, [pc, #84]	; (60001c30 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bdc:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001bde:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001be2:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001be6:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001bea:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001bee:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001bf2:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001bf4:	tst.w	r2, #2
60001bf8:	beq.n	60001c02 <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001bfa:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001bfc:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001bfe:	str	r7, [r3, #24]
			continue;
60001c00:	b.n	60001bf2 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c02:	tst.w	r2, #8192	; 0x2000
60001c06:	bne.n	60001c0c <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c08:	str	r5, [r3, #20]
			continue;
60001c0a:	b.n	60001bf2 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c0c:	tst.w	r2, #4096	; 0x1000
60001c10:	bne.n	60001c16 <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c12:	str	r4, [r3, #20]
			continue;
60001c14:	b.n	60001bf2 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c16:	cmp	r2, #0
60001c18:	bge.n	60001bf2 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c1a:	tst.w	r2, #65536	; 0x10000
60001c1e:	beq.n	60001c24 <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c20:	str	r1, [r3, #24]
			continue;
60001c22:	b.n	60001bf2 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c24:	lsls	r2, r2, #25
60001c26:	bmi.n	60001c2c <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c28:	str	r0, [r3, #20]
			continue;
60001c2a:	b.n	60001bf2 <usb_pll_start+0x1a>
}
60001c2c:	pop	{r4, r5, r6, r7, pc}
60001c2e:	nop
60001c30:	.word	0x400d8000

60001c34 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c34:	ldr	r2, [pc, #248]	; (60001d30 <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c36:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c3a:	ldr	r0, [pc, #248]	; (60001d34 <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c3c:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c40:	vldr	s10, [pc, #244]	; 60001d38 <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c44:	bic.w	r3, r3, #1
{
60001c48:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c4a:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c4e:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c50:	ldr	r4, [pc, #232]	; (60001d3c <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c52:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001c56:	ldr	r3, [pc, #232]	; (60001d40 <tempmon_init+0x10c>)
60001c58:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c5c:	uxtb	r1, r3
60001c5e:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c60:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c64:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c68:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c6a:	vcvt.f32.s32	s14, s15
60001c6e:	ldr	r1, [pc, #212]	; (60001d44 <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c70:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c74:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c76:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c7a:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c7e:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c82:	ldr	r3, [pc, #196]	; (60001d48 <tempmon_init+0x114>)
60001c84:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c88:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c8c:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c90:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c94:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c98:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c9c:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ca0:	vdiv.f32	s11, s10, s12
60001ca4:	vadd.f32	s11, s11, s13
60001ca8:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cac:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cb0:	vldr	s11, [pc, #152]	; 60001d4c <tempmon_init+0x118>
60001cb4:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cb8:	orr.w	r3, r3, r1, lsl #20
60001cbc:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc0:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cc4:	ldr	r3, [pc, #136]	; (60001d50 <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc6:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cca:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cce:	vdiv.f32	s11, s14, s12
60001cd2:	vadd.f32	s14, s11, s13
60001cd6:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cda:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cde:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001ce2:	and.w	r3, r3, r0, lsl #16
60001ce6:	orrs	r3, r1
60001ce8:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001cec:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf0:	vadd.f32	s15, s14, s13
60001cf4:	vcvt.u32.f32	s15, s15
60001cf8:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001cfc:	ubfx	r3, r3, #0, #12
60001d00:	orrs	r3, r1
60001d02:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d06:	ldr.w	r3, [r2, #128]	; 0x80
60001d0a:	orr.w	r3, r3, #2
60001d0e:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d12:	movs	r2, #0
60001d14:	ldr	r3, [pc, #60]	; (60001d54 <tempmon_init+0x120>)
60001d16:	strb.w	r2, [r3, #64]	; 0x40
60001d1a:	ldr	r3, [pc, #60]	; (60001d58 <tempmon_init+0x124>)
60001d1c:	ldr	r2, [pc, #60]	; (60001d5c <tempmon_init+0x128>)
60001d1e:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d22:	mov.w	r3, #3758153728	; 0xe000e000
60001d26:	movs	r2, #1
60001d28:	str.w	r2, [r3, #264]	; 0x108
}
60001d2c:	pop	{r4, pc}
60001d2e:	nop
60001d30:	.word	0x400d8100
60001d34:	.word	0x2002d128
60001d38:	.word	0x42aa0000
60001d3c:	.word	0x2002d124
60001d40:	.word	0x401f4400
60001d44:	.word	0x2002d12c
60001d48:	.word	0x2002d130
60001d4c:	.word	0x42b40000
60001d50:	.word	0x0fff0000
60001d54:	.word	0xe000e400
60001d58:	.word	0x20002000
60001d5c:	.word	0x0000bbbd

60001d60 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001d60:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001d62:	ldr	r4, [pc, #64]	; (60001da4 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001d64:	ldr.w	r3, [r4, #128]	; 0x80
60001d68:	cmp	r3, #11
60001d6a:	bne.n	60001d9e <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001d6c:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001d70:	ldr	r2, [pc, #52]	; (60001da8 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001d72:	ldr	r6, [pc, #56]	; (60001dac <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001d74:	ldr	r5, [pc, #56]	; (60001db0 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001d76:	ldr	r1, [r2, #0]
60001d78:	adds	r2, #4
60001d7a:	eors	r3, r1
60001d7c:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001d7e:	and.w	r0, r3, #1
60001d82:	subs	r1, #1
60001d84:	mul.w	r0, r6, r0
60001d88:	eor.w	r3, r0, r3, lsr #1
60001d8c:	bne.n	60001d7e <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001d8e:	cmp	r2, r5
60001d90:	bne.n	60001d76 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001d92:	ldr.w	r0, [r4, #168]	; 0xa8
60001d96:	subs	r3, r0, r3
60001d98:	negs	r0, r3
60001d9a:	adcs	r0, r3
	return 1;
}
60001d9c:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001d9e:	movs	r0, #0
60001da0:	b.n	60001d9c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001da2:	nop
60001da4:	.word	0x2027ff00
60001da8:	.word	0x2027ff80
60001dac:	.word	0xedb88320
60001db0:	.word	0x2027ffa8

60001db4 <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001db4:	ldr	r2, [pc, #96]	; (60001e18 <CrashReportClass::clear()+0x64>)
60001db6:	movs	r3, #0
{
60001db8:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001dba:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001dbe:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001dc2:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001dc6:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001dca:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001dce:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001dd2:	mov.w	r4, #3758153728	; 0xe000e000
60001dd6:	adds	r2, #128	; 0x80
60001dd8:	str.w	r2, [r4, #3952]	; 0xf70
60001ddc:	adds	r2, #32
60001dde:	str.w	r2, [r4, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001de2:	dsb	sy
	asm("isb");
60001de6:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001dea:	ldr	r2, [pc, #48]	; (60001e1c <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001dec:	ldr	r6, [pc, #48]	; (60001e20 <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001dee:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001df0:	ldr	r5, [pc, #48]	; (60001e24 <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001df2:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001df4:	movs	r1, #28
	SRC_GPR5 = 0;
60001df6:	str	r3, [r2, #48]	; 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001df8:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001dfa:	str.w	r3, [r6, #4032]	; 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001dfe:	bl	60002398 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001e02:	str.w	r0, [r6, #4060]	; 0xfdc
	asm("dsb");
60001e06:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001e0a:	str.w	r5, [r4, #3944]	; 0xf68
	asm("dsb");
60001e0e:	dsb	sy
	asm("isb");
60001e12:	isb	sy
}
60001e16:	pop	{r4, r5, r6, pc}
60001e18:	.word	0x2027ff00
60001e1c:	.word	0x400f8000
60001e20:	.word	0x2027f000
60001e24:	.word	0x2027ffc0

60001e28 <CrashReportClass::printTo(Print&) const>:
{
60001e28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001e2c:	mov	r4, r1
  if (isvalid(info)) {
60001e2e:	bl	60001d60 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001e32:	cmp	r0, #0
60001e34:	beq.w	600021d8 <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001e38:	ldr	r6, [pc, #692]	; (600020f0 <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001e3a:	mov	r0, r4
60001e3c:	ldr	r1, [pc, #692]	; (600020f4 <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001e3e:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001e42:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001e46:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001e4a:	ldr	r1, [pc, #684]	; (600020f8 <CrashReportClass::printTo(Print&) const+0x2d0>)
60001e4c:	mov	r0, r4
    info->time /= 60;
60001e4e:	udiv	r9, r7, r8
    info->time /= 60;
60001e52:	udiv	r5, r9, r8
60001e56:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001e5a:	bl	60002338 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001e5e:	movs	r3, #24
    p.print(hh);
60001e60:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001e62:	udiv	r1, r5, r3
60001e66:	mls	r1, r3, r1, r5
    p.print(hh);
60001e6a:	uxtb	r1, r1
60001e6c:	bl	600023c8 <___ZN5Print5printEh_veneer>
    p.print(":");
60001e70:	ldr	r1, [pc, #648]	; (600020fc <CrashReportClass::printTo(Print&) const+0x2d4>)
60001e72:	mov	r0, r4
60001e74:	bl	60002338 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001e78:	mls	r1, r8, r5, r9
    p.print(mm);
60001e7c:	mov	r0, r4
60001e7e:	uxtb	r1, r1
60001e80:	bl	600023c8 <___ZN5Print5printEh_veneer>
    p.print(":");
60001e84:	ldr	r1, [pc, #628]	; (600020fc <CrashReportClass::printTo(Print&) const+0x2d4>)
60001e86:	mov	r0, r4
60001e88:	bl	60002338 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001e8c:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001e90:	mov	r0, r4
60001e92:	uxtb	r1, r1
60001e94:	bl	600023c8 <___ZN5Print5printEh_veneer>
60001e98:	mov	r0, r4
60001e9a:	bl	60002388 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001e9e:	ldr	r1, [pc, #608]	; (60002100 <CrashReportClass::printTo(Print&) const+0x2d8>)
60001ea0:	mov	r0, r4
60001ea2:	bl	60002338 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001ea6:	movs	r2, #16
60001ea8:	ldr.w	r1, [r6, #152]	; 0x98
60001eac:	mov	r0, r4
60001eae:	bl	60002358 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
60001eb2:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
60001eb6:	cmp	r5, #0
60001eb8:	beq.n	60001f68 <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60001eba:	ldr	r1, [pc, #584]	; (60002104 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001ebc:	mov	r0, r4
60001ebe:	bl	60002338 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
60001ec2:	movs	r2, #16
60001ec4:	ldr.w	r1, [r6, #136]	; 0x88
60001ec8:	mov	r0, r4
60001eca:	bl	60002358 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60001ece:	lsls	r2, r5, #31
60001ed0:	bpl.w	60002078 <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001ed4:	ldr	r1, [pc, #560]	; (60002108 <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001ed6:	mov	r0, r4
60001ed8:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001edc:	lsls	r2, r5, #24
60001ede:	bpl.n	60001f34 <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001ee0:	ldr	r1, [pc, #552]	; (6000210c <CrashReportClass::printTo(Print&) const+0x2e4>)
60001ee2:	mov	r0, r4
60001ee4:	bl	60002338 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60001ee8:	movs	r2, #16
60001eea:	ldr.w	r1, [r6, #144]	; 0x90
60001eee:	mov	r0, r4
60001ef0:	bl	600023c0 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
60001ef4:	ldr.w	r2, [r6, #144]	; 0x90
60001ef8:	cmp	r2, #31
60001efa:	bhi.w	6000209a <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001efe:	ldr	r1, [pc, #528]	; (60002110 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001f00:	mov	r0, r4
60001f02:	bl	60002338 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001f06:	movs	r2, #16
60001f08:	ldr.w	r1, [r6, #152]	; 0x98
60001f0c:	mov	r0, r4
60001f0e:	bl	600023c0 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60001f12:	ldr	r1, [pc, #512]	; (60002114 <CrashReportClass::printTo(Print&) const+0x2ec>)
60001f14:	mov	r0, r4
60001f16:	bl	60002338 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001f1a:	ldr.w	r1, [r6, #152]	; 0x98
60001f1e:	movs	r2, #16
60001f20:	mov	r0, r4
60001f22:	bl	600023c0 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
60001f26:	ldr	r1, [pc, #496]	; (60002118 <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
60001f28:	mov	r0, r4
60001f2a:	bl	60002338 <___ZN5Print5printEPKc_veneer>
        p.println();
60001f2e:	mov	r0, r4
60001f30:	bl	60002388 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001f34:	lsls	r3, r5, #23
60001f36:	bpl.w	600020ae <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
60001f3a:	ldr	r1, [pc, #480]	; (6000211c <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60001f3c:	mov	r0, r4
60001f3e:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001f42:	lsls	r7, r5, #16
60001f44:	bpl.n	60001f5a <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
60001f46:	ldr	r1, [pc, #472]	; (60002120 <CrashReportClass::printTo(Print&) const+0x2f8>)
60001f48:	mov	r0, r4
60001f4a:	bl	60002338 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
60001f4e:	movs	r2, #16
60001f50:	ldr.w	r1, [r6, #148]	; 0x94
60001f54:	mov	r0, r4
60001f56:	bl	60002358 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001f5a:	lsls	r0, r5, #15
60001f5c:	bpl.w	600020d8 <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60001f60:	ldr	r1, [pc, #448]	; (60002124 <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
60001f62:	mov	r0, r4
60001f64:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
60001f68:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001f6c:	cbz	r5, 60001f90 <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
60001f6e:	ldr	r1, [pc, #440]	; (60002128 <CrashReportClass::printTo(Print&) const+0x300>)
60001f70:	mov	r0, r4
60001f72:	bl	60002338 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
60001f76:	movs	r2, #16
60001f78:	ldr.w	r1, [r6, #140]	; 0x8c
60001f7c:	mov	r0, r4
60001f7e:	bl	60002358 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001f82:	lsls	r0, r5, #30
60001f84:	bpl.w	600021ce <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
60001f88:	ldr	r1, [pc, #416]	; (6000212c <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
60001f8a:	mov	r0, r4
60001f8c:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
60001f90:	ldr	r1, [pc, #412]	; (60002130 <CrashReportClass::printTo(Print&) const+0x308>)
60001f92:	mov	r0, r4
60001f94:	bl	60002338 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
60001f98:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001f9c:	movs	r1, #2
60001f9e:	mov	r0, r4
60001fa0:	vcvt.f64.f32	d0, s0
60001fa4:	bl	60002370 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
60001fa8:	ldr	r1, [pc, #392]	; (60002134 <CrashReportClass::printTo(Print&) const+0x30c>)
60001faa:	mov	r0, r4
60001fac:	bl	60002338 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
60001fb0:	ldr	r1, [pc, #388]	; (60002138 <CrashReportClass::printTo(Print&) const+0x310>)
60001fb2:	mov	r0, r4
60001fb4:	bl	60002338 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
60001fb8:	ldr	r3, [pc, #384]	; (6000213c <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001fba:	ldr	r1, [pc, #388]	; (60002140 <CrashReportClass::printTo(Print&) const+0x318>)
60001fbc:	movs	r2, #10
60001fbe:	ldr	r0, [r3, #0]
60001fc0:	movs	r3, #0
60001fc2:	udiv	r1, r0, r1
60001fc6:	mov	r0, r4
60001fc8:	bl	60002348 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
60001fcc:	ldr	r1, [pc, #372]	; (60002144 <CrashReportClass::printTo(Print&) const+0x31c>)
60001fce:	mov	r0, r4
60001fd0:	bl	60002338 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
60001fd4:	ldr	r3, [pc, #368]	; (60002148 <CrashReportClass::printTo(Print&) const+0x320>)
60001fd6:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001fd8:	lsls	r2, r5, #30
60001fda:	bpl.n	60001fee <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
60001fdc:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
60001fde:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
60001fe0:	ldr	r3, [pc, #360]	; (6000214c <CrashReportClass::printTo(Print&) const+0x324>)
60001fe2:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
60001fe4:	ite	eq
60001fe6:	ldreq	r1, [pc, #360]	; (60002150 <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
60001fe8:	ldrne	r1, [pc, #360]	; (60002154 <CrashReportClass::printTo(Print&) const+0x32c>)
60001fea:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001fee:	lsls	r7, r5, #29
60001ff0:	bpl.n	60001ffa <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
60001ff2:	ldr	r1, [pc, #356]	; (60002158 <CrashReportClass::printTo(Print&) const+0x330>)
60001ff4:	mov	r0, r4
60001ff6:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001ffa:	lsls	r6, r5, #28
60001ffc:	bpl.n	60002006 <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
60001ffe:	ldr	r1, [pc, #348]	; (6000215c <CrashReportClass::printTo(Print&) const+0x334>)
60002000:	mov	r0, r4
60002002:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60002006:	lsls	r0, r5, #27
60002008:	bpl.n	60002012 <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
6000200a:	ldr	r1, [pc, #340]	; (60002160 <CrashReportClass::printTo(Print&) const+0x338>)
6000200c:	mov	r0, r4
6000200e:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60002012:	lsls	r1, r5, #26
60002014:	bpl.n	6000201e <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
60002016:	ldr	r1, [pc, #332]	; (60002164 <CrashReportClass::printTo(Print&) const+0x33c>)
60002018:	mov	r0, r4
6000201a:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
6000201e:	lsls	r2, r5, #25
60002020:	bpl.n	6000202a <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
60002022:	ldr	r1, [pc, #324]	; (60002168 <CrashReportClass::printTo(Print&) const+0x340>)
60002024:	mov	r0, r4
60002026:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000202a:	lsls	r3, r5, #24
6000202c:	bpl.n	60002036 <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
6000202e:	ldr	r1, [pc, #316]	; (6000216c <CrashReportClass::printTo(Print&) const+0x344>)
60002030:	mov	r0, r4
60002032:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60002036:	ands.w	r5, r5, #256	; 0x100
6000203a:	beq.w	6000220a <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
6000203e:	ldr	r1, [pc, #304]	; (60002170 <CrashReportClass::printTo(Print&) const+0x348>)
60002040:	mov	r0, r4
60002042:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002046:	ldr	r2, [pc, #256]	; (60002148 <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
60002048:	ldr	r1, [pc, #296]	; (60002174 <CrashReportClass::printTo(Print&) const+0x34c>)
6000204a:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
6000204c:	ldr	r3, [r2, #8]
6000204e:	bic.w	r3, r3, #256	; 0x100
60002052:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60002054:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
60002058:	ldr	r1, [pc, #284]	; (60002178 <CrashReportClass::printTo(Print&) const+0x350>)
6000205a:	mov	r0, r4
6000205c:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60002060:	ldr	r3, [pc, #280]	; (6000217c <CrashReportClass::printTo(Print&) const+0x354>)
60002062:	movs	r2, #7
60002064:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60002066:	ldr	r2, [pc, #280]	; (60002180 <CrashReportClass::printTo(Print&) const+0x358>)
60002068:	ldr	r3, [r2, #56]	; 0x38
6000206a:	orr.w	r3, r3, #64	; 0x40
6000206e:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60002070:	dsb	sy
	  while (1) asm ("wfi");
60002074:	wfi
60002076:	b.n	60002074 <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60002078:	lsls	r3, r5, #30
6000207a:	bpl.n	60002080 <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
6000207c:	ldr	r1, [pc, #260]	; (60002184 <CrashReportClass::printTo(Print&) const+0x35c>)
6000207e:	b.n	60001ed6 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002080:	lsls	r7, r5, #28
60002082:	bpl.n	60002088 <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60002084:	ldr	r1, [pc, #256]	; (60002188 <CrashReportClass::printTo(Print&) const+0x360>)
60002086:	b.n	60001ed6 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60002088:	lsls	r0, r5, #27
6000208a:	bpl.n	60002090 <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
6000208c:	ldr	r1, [pc, #252]	; (6000218c <CrashReportClass::printTo(Print&) const+0x364>)
6000208e:	b.n	60001ed6 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002090:	lsls	r1, r5, #26
60002092:	bpl.w	60001edc <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60002096:	ldr	r1, [pc, #248]	; (60002190 <CrashReportClass::printTo(Print&) const+0x368>)
60002098:	b.n	60001ed6 <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000209a:	ldr	r3, [pc, #248]	; (60002194 <CrashReportClass::printTo(Print&) const+0x36c>)
6000209c:	cmp	r2, r3
6000209e:	bcc.w	60001f2e <CrashReportClass::printTo(Print&) const+0x106>
600020a2:	adds	r3, #32
600020a4:	cmp	r2, r3
600020a6:	bcs.w	60001f2e <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
600020aa:	ldr	r1, [pc, #236]	; (60002198 <CrashReportClass::printTo(Print&) const+0x370>)
600020ac:	b.n	60001f28 <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
600020ae:	lsls	r7, r5, #22
600020b0:	bpl.n	600020b6 <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
600020b2:	ldr	r1, [pc, #232]	; (6000219c <CrashReportClass::printTo(Print&) const+0x374>)
600020b4:	b.n	60001f3c <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
600020b6:	lsls	r0, r5, #21
600020b8:	bpl.n	600020be <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
600020ba:	ldr	r1, [pc, #228]	; (600021a0 <CrashReportClass::printTo(Print&) const+0x378>)
600020bc:	b.n	60001f3c <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
600020be:	lsls	r1, r5, #20
600020c0:	bpl.n	600020c6 <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
600020c2:	ldr	r1, [pc, #224]	; (600021a4 <CrashReportClass::printTo(Print&) const+0x37c>)
600020c4:	b.n	60001f3c <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
600020c6:	lsls	r2, r5, #19
600020c8:	bpl.n	600020ce <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600020ca:	ldr	r1, [pc, #220]	; (600021a8 <CrashReportClass::printTo(Print&) const+0x380>)
600020cc:	b.n	60001f3c <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
600020ce:	lsls	r3, r5, #18
600020d0:	bpl.w	60001f42 <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
600020d4:	ldr	r1, [pc, #212]	; (600021ac <CrashReportClass::printTo(Print&) const+0x384>)
600020d6:	b.n	60001f3c <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600020d8:	lsls	r1, r5, #14
600020da:	bpl.n	600020e0 <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600020dc:	ldr	r1, [pc, #208]	; (600021b0 <CrashReportClass::printTo(Print&) const+0x388>)
600020de:	b.n	60001f62 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600020e0:	lsls	r2, r5, #13
600020e2:	bpl.n	600020e8 <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600020e4:	ldr	r1, [pc, #204]	; (600021b4 <CrashReportClass::printTo(Print&) const+0x38c>)
600020e6:	b.n	60001f62 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600020e8:	lsls	r3, r5, #12
600020ea:	bpl.n	600021bc <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
600020ec:	ldr	r1, [pc, #200]	; (600021b8 <CrashReportClass::printTo(Print&) const+0x390>)
600020ee:	b.n	60001f62 <CrashReportClass::printTo(Print&) const+0x13a>
600020f0:	.word	0x2027ff00
600020f4:	.word	0x200013ce
600020f8:	.word	0x200013db
600020fc:	.word	0x20001904
60002100:	.word	0x20001402
60002104:	.word	0x20001427
60002108:	.word	0x20001430
6000210c:	.word	0x200014f6
60002110:	.word	0x20001518
60002114:	.word	0x20001537
60002118:	.word	0x20001576
6000211c:	.word	0x200015d6
60002120:	.word	0x2000170f
60002124:	.word	0x20001731
60002128:	.word	0x2000180d
6000212c:	.word	0x20001816
60002130:	.word	0x20001859
60002134:	.word	0x2000187c
60002138:	.word	0x20001882
6000213c:	.word	0x20001c24
60002140:	.word	0x000f4240
60002144:	.word	0x200018a0
60002148:	.word	0x400f8000
6000214c:	.word	0x0bad00f1
60002150:	.word	0x200019fd
60002154:	.word	0x20001a46
60002158:	.word	0x20001a87
6000215c:	.word	0x20001aaf
60002160:	.word	0x20001ada
60002164:	.word	0x20001b01
60002168:	.word	0x20001b2b
6000216c:	.word	0x20001b4d
60002170:	.word	0x20001b6f
60002174:	.word	0x20001b99
60002178:	.word	0x20001bbb
6000217c:	.word	0x400ac000
60002180:	.word	0x400d4000
60002184:	.word	0x20001459
60002188:	.word	0x2000147b
6000218c:	.word	0x200014a5
60002190:	.word	0x200014cb
60002194:	.word	0x2002dee0
60002198:	.word	0x20001594
6000219c:	.word	0x200015f7
600021a0:	.word	0x20001624
600021a4:	.word	0x20001669
600021a8:	.word	0x200016a9
600021ac:	.word	0x200016dd
600021b0:	.word	0x20001755
600021b4:	.word	0x20001788
600021b8:	.word	0x200017b1
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600021bc:	lsls	r7, r5, #7
600021be:	bpl.n	600021c4 <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600021c0:	ldr	r1, [pc, #204]	; (60002290 <CrashReportClass::printTo(Print&) const+0x468>)
600021c2:	b.n	60001f62 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600021c4:	lsls	r5, r5, #6
600021c6:	bpl.w	60001f68 <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
600021ca:	ldr	r1, [pc, #200]	; (60002294 <CrashReportClass::printTo(Print&) const+0x46c>)
600021cc:	b.n	60001f62 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
600021ce:	lsls	r1, r5, #1
600021d0:	bpl.w	60001f90 <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
600021d4:	ldr	r1, [pc, #192]	; (60002298 <CrashReportClass::printTo(Print&) const+0x470>)
600021d6:	b.n	60001f8a <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
600021d8:	ldr	r1, [pc, #192]	; (6000229c <CrashReportClass::printTo(Print&) const+0x474>)
600021da:	mov	r0, r4
600021dc:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
600021e0:	ldr	r1, [pc, #188]	; (600022a0 <CrashReportClass::printTo(Print&) const+0x478>)
600021e2:	mov	r0, r4
600021e4:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
600021e8:	ldr	r1, [pc, #184]	; (600022a4 <CrashReportClass::printTo(Print&) const+0x47c>)
600021ea:	mov	r0, r4
600021ec:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
600021f0:	ldr	r1, [pc, #180]	; (600022a8 <CrashReportClass::printTo(Print&) const+0x480>)
600021f2:	mov	r0, r4
600021f4:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
600021f8:	ldr	r1, [pc, #176]	; (600022ac <CrashReportClass::printTo(Print&) const+0x484>)
600021fa:	mov	r0, r4
600021fc:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
60002200:	ldr	r1, [pc, #172]	; (600022b0 <CrashReportClass::printTo(Print&) const+0x488>)
60002202:	mov	r0, r4
60002204:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
60002208:	b.n	60001fd4 <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
6000220a:	ldr	r7, [pc, #168]	; (600022b4 <CrashReportClass::printTo(Print&) const+0x48c>)
6000220c:	ldr.w	r3, [r7, #192]	; 0xc0
60002210:	cbz	r3, 60002284 <CrashReportClass::printTo(Print&) const+0x45c>
60002212:	ldr.w	r6, [r7, #220]	; 0xdc
60002216:	movs	r1, #28
60002218:	ldr	r0, [pc, #156]	; (600022b8 <CrashReportClass::printTo(Print&) const+0x490>)
6000221a:	bl	60002398 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
6000221e:	cmp	r6, r0
60002220:	bne.n	60002284 <CrashReportClass::printTo(Print&) const+0x45c>
        p.print("  Breadcrumb #");
60002222:	ldr.w	r8, [pc, #160]	; 600022c4 <CrashReportClass::printTo(Print&) const+0x49c>
        p.print(" was ");
60002226:	ldr.w	r9, [pc, #160]	; 600022c8 <CrashReportClass::printTo(Print&) const+0x4a0>
6000222a:	ldr.w	sl, [pc, #140]	; 600022b8 <CrashReportClass::printTo(Print&) const+0x490>
      if (bc->bitmask & (1 << i)) {
6000222e:	movs	r3, #1
60002230:	ldr.w	r2, [r7, #192]	; 0xc0
60002234:	mov	r6, r5
60002236:	lsls	r3, r5
60002238:	adds	r5, #1
6000223a:	tst	r3, r2
6000223c:	beq.n	60002280 <CrashReportClass::printTo(Print&) const+0x458>
        p.print("  Breadcrumb #");
6000223e:	mov	r1, r8
60002240:	mov	r0, r4
60002242:	bl	60002338 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
60002246:	mov	r1, r5
60002248:	add.w	r6, sl, r6, lsl #2
6000224c:	mov	r0, r4
6000224e:	bl	60002368 <___ZN5Print5printEl_veneer>
        p.print(" was ");
60002252:	mov	r1, r9
60002254:	mov	r0, r4
60002256:	bl	60002338 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000225a:	movs	r3, #0
6000225c:	movs	r2, #10
6000225e:	ldr	r1, [r6, #4]
60002260:	mov	r0, r4
60002262:	bl	60002348 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
60002266:	ldr	r1, [pc, #84]	; (600022bc <CrashReportClass::printTo(Print&) const+0x494>)
60002268:	mov	r0, r4
6000226a:	bl	60002338 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
6000226e:	ldr	r1, [r6, #4]
60002270:	movs	r2, #16
60002272:	mov	r0, r4
60002274:	bl	600023c0 <___ZN5Print5printEmi_veneer>
        p.println(")");
60002278:	ldr	r1, [pc, #68]	; (600022c0 <CrashReportClass::printTo(Print&) const+0x498>)
6000227a:	mov	r0, r4
6000227c:	bl	600023b8 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
60002280:	cmp	r5, #6
60002282:	bne.n	6000222e <CrashReportClass::printTo(Print&) const+0x406>
  clear();
60002284:	bl	60001db4 <CrashReportClass::clear()>
}
60002288:	movs	r0, #1
6000228a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000228e:	nop
60002290:	.word	0x200017c8
60002294:	.word	0x200017f1
60002298:	.word	0x2000183d
6000229c:	.word	0x200018a5
600022a0:	.word	0x200018bd
600022a4:	.word	0x20001906
600022a8:	.word	0x20001950
600022ac:	.word	0x20001975
600022b0:	.word	0x200019bd
600022b4:	.word	0x2027ff00
600022b8:	.word	0x2027ffc0
600022bc:	.word	0x20001c0d
600022c0:	.word	0x200019bb
600022c4:	.word	0x20001bfe
600022c8:	.word	0x20001876

600022cc <CrashReportClass::operator bool()>:
{
600022cc:	push	{r3, lr}
	if (isvalid(info)) return true;
600022ce:	bl	60001d60 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
600022d2:	subs	r0, #0
600022d4:	it	ne
600022d6:	movne	r0, #1
600022d8:	pop	{r3, pc}
600022da:	nop

600022dc <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600022dc:	ldr	r3, [pc, #60]	; (6000231c <analog_init+0x40>)
600022de:	ldr	r2, [r3, #108]	; 0x6c
600022e0:	orr.w	r2, r2, #196608	; 0x30000
600022e4:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600022e6:	ldr	r2, [r3, #108]	; 0x6c
600022e8:	orr.w	r2, r2, #768	; 0x300
600022ec:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600022ee:	sub.w	r3, r3, #229376	; 0x38000
600022f2:	movw	r2, #1591	; 0x637
600022f6:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600022f8:	movs	r2, #160	; 0xa0
600022fa:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600022fc:	ldr	r2, [r3, #72]	; 0x48
600022fe:	lsls	r2, r2, #24
60002300:	bmi.n	600022fc <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002302:	ldr	r2, [pc, #28]	; (60002320 <analog_init+0x44>)
60002304:	movw	r3, #1591	; 0x637
60002308:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000230a:	movs	r3, #160	; 0xa0
6000230c:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000230e:	ldr	r3, [r2, #72]	; 0x48
60002310:	ands.w	r3, r3, #128	; 0x80
60002314:	bne.n	6000230e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60002316:	ldr	r2, [pc, #12]	; (60002324 <analog_init+0x48>)
60002318:	strb	r3, [r2, #0]
}
6000231a:	bx	lr
6000231c:	.word	0x400fc000
60002320:	.word	0x400c8000
60002324:	.word	0x2002de28

60002328 <_init>:
60002328:	push	{r3, r4, r5, r6, r7, lr}
6000232a:	nop
6000232c:	pop	{r3, r4, r5, r6, r7}
6000232e:	pop	{r3}
60002330:	mov	lr, r3
60002332:	bx	lr
60002334:	movs	r0, r0
	...

60002338 <___ZN5Print5printEPKc_veneer>:
60002338:	ldr.w	pc, [pc]	; 6000233c <___ZN5Print5printEPKc_veneer+0x4>
6000233c:	.word	0x0000c30d

60002340 <____libc_init_array_veneer>:
60002340:	ldr.w	pc, [pc]	; 60002344 <____libc_init_array_veneer+0x4>
60002344:	.word	0x0000ea39

60002348 <___ZN5Print11printNumberEmhh_veneer>:
60002348:	ldr.w	pc, [pc]	; 6000234c <___ZN5Print11printNumberEmhh_veneer+0x4>
6000234c:	.word	0x0000c4df

60002350 <__delay_veneer>:
60002350:	ldr.w	pc, [pc]	; 60002354 <__delay_veneer+0x4>
60002354:	.word	0x0000b4d1

60002358 <___ZN5Print7printlnEmi_veneer>:
60002358:	ldr.w	pc, [pc]	; 6000235c <___ZN5Print7printlnEmi_veneer+0x4>
6000235c:	.word	0x0000c339

60002360 <__memset_veneer>:
60002360:	ldr.w	pc, [pc]	; 60002364 <__memset_veneer+0x4>
60002364:	.word	0x00009f45

60002368 <___ZN5Print5printEl_veneer>:
60002368:	ldr.w	pc, [pc]	; 6000236c <___ZN5Print5printEl_veneer+0x4>
6000236c:	.word	0x0000c47b

60002370 <___ZN5Print10printFloatEdh_veneer>:
60002370:	ldr.w	pc, [pc]	; 60002374 <___ZN5Print10printFloatEdh_veneer+0x4>
60002374:	.word	0x0000c589

60002378 <__set_arm_clock_veneer>:
60002378:	ldr.w	pc, [pc]	; 6000237c <__set_arm_clock_veneer+0x4>
6000237c:	.word	0x0000a789

60002380 <__usb_init_serialnumber_veneer>:
60002380:	ldr.w	pc, [pc]	; 60002384 <__usb_init_serialnumber_veneer+0x4>
60002384:	.word	0x0000c0a5

60002388 <___ZN5Print7printlnEv_veneer>:
60002388:	ldr.w	pc, [pc]	; 6000238c <___ZN5Print7printlnEv_veneer+0x4>
6000238c:	.word	0x0000c48d

60002390 <__pwm_init_veneer>:
60002390:	ldr.w	pc, [pc]	; 60002394 <__pwm_init_veneer+0x4>
60002394:	.word	0x0000bd6d

60002398 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
60002398:	ldr.w	pc, [pc]	; 6000239c <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
6000239c:	.word	0x0000c34d

600023a0 <__main_veneer>:
600023a0:	ldr.w	pc, [pc]	; 600023a4 <__main_veneer+0x4>
600023a4:	.word	0x0000c397

600023a8 <___Z12estAlarmTimem_veneer>:
600023a8:	ldr.w	pc, [pc]	; 600023ac <___Z12estAlarmTimem_veneer+0x4>
600023ac:	.word	0x00003875

600023b0 <__sm_set_pool_veneer>:
600023b0:	ldr.w	pc, [pc]	; 600023b4 <__sm_set_pool_veneer+0x4>
600023b4:	.word	0x0000bb53

600023b8 <___ZN5Print7printlnEPKc_veneer>:
600023b8:	ldr.w	pc, [pc]	; 600023bc <___ZN5Print7printlnEPKc_veneer+0x4>
600023bc:	.word	0x0000c325

600023c0 <___ZN5Print5printEmi_veneer>:
600023c0:	ldr.w	pc, [pc]	; 600023c4 <___ZN5Print5printEmi_veneer+0x4>
600023c4:	.word	0x0000c31d

600023c8 <___ZN5Print5printEh_veneer>:
600023c8:	ldr.w	pc, [pc]	; 600023cc <___ZN5Print5printEh_veneer+0x4>
600023cc:	.word	0x0000c315

600023d0 <__frame_dummy_init_array_entry>:
600023d0:	E...........}9..

Disassembly of section .text.progmem:

600023e0 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600023e0:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600023e4:	ldr	r3, [pc, #60]	; (60002424 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600023e6:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600023ea:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600023ee:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600023f2:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600023f4:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600023f8:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600023fc:	ldr	r2, [r3, #112]	; 0x70
600023fe:	bic.w	r2, r2, #4096	; 0x1000
60002402:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
60002404:	ldr	r2, [r3, #112]	; 0x70
60002406:	cmp	r2, #0
60002408:	bge.n	60002404 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
6000240a:	ldr.w	r2, [r3, #368]	; 0x170
6000240e:	bic.w	r2, r2, #8388608	; 0x800000
60002412:	bic.w	r2, r2, #32768	; 0x8000
60002416:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
6000241a:	ldr	r2, [r3, #112]	; 0x70
6000241c:	bic.w	r2, r2, #65536	; 0x10000
60002420:	str	r2, [r3, #112]	; 0x70
  }
60002422:	bx	lr
60002424:	.word	0x400d8000

60002428 <usb_string_mtp>:
60002428:	..M.T.P.

60002430 <usb_string_product_name_default>:
60002430:	 .T.e.e.n.s.y. .
60002440:	M.T.P. .D.i.s.k.

60002450 <usb_string_manufacturer_name_default>:
60002450:	..T.e.e.n.s.y.d.
60002460:	u.i.n.o.

60002468 <string0>:
60002468:	....

6000246c <usb_config_descriptor_12>:
6000246c:	..i.....2.......
6000247c:	...........$....
6000248c:	$....$...$......
6000249c:	................
600024ac:	.@......@.......
600024bc:	........@......@
600024cc:	...... ..

600024d5 <usb_config_descriptor_480>:
600024d5:	..i.....2.......
600024e5:	...........$....
600024f5:	$....$...$......
60002505:	................
60002515:	................
60002525:	................
60002535:	...... ..

6000253e <qualifier_descriptor>:
6000253e:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
  #endif
}

static uint32_t have_disk=0;
void printBin(uint32_t x) 
{ for (int i = 31; i >= 0; i--) { Serial.print(bitRead(x, i)); if(!(i%8)) Serial.print(' '); }}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	bx	lr
      38:	.word	0x200022c0
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      3c:	.word	0x200022c0
      memcpy(buffer, rx_event_buffer, len);
      memset(rx_event_transfer, 0, sizeof(rx_event_transfer));

      NVIC_DISABLE_IRQ(IRQ_USB1);
      usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
      usb_receive(MTP_EVENT_ENDPOINT, rx_event_transfer + 0);
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      NVIC_ENABLE_IRQ(IRQ_USB1);
      return MTP_EVENT_SIZE;
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
      NVIC_ENABLE_IRQ(IRQ_USB1);
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
    }
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
      56:	b.w	20 <register_tm_clones>
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
      5a:	nop
      5c:	.word	0x00000000
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      60:	.word	0x2002d08c
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
      64:	.word	0x60017400

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration

  const int nsd = sizeof(sd_str)/sizeof(const char *);
  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
      6e:	ldr	r3, [r0, #72]	; 0x48
      70:	cbz	r3, 78 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      72:	mov	r0, r3
      74:	b.w	7224 <FatFile::sync()>
      78:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      7a:	cbz	r0, 80 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      7c:	b.w	6584 <ExFatFile::sync()>
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    BaseFile::sync();
  }
      80:	bx	lr

00000082 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      82:	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      84:	push	{r0, r1, r2, lr}
      86:	cbz	r3, 9e <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      88:	movs	r2, #1
      8a:	add.w	r1, sp, #7
      8e:	mov	r0, r3
      90:	bl	6df0 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      94:	cmp	r0, #1
      96:	bne.n	a2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      98:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      9c:	b.n	a6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      9e:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      a0:	cbnz	r0, ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      a2:	mov.w	r0, #4294967295
  }
      a6:	add	sp, #12
      a8:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      ac:	movs	r2, #1
      ae:	add.w	r1, sp, #7
      b2:	bl	57a0 <ExFatFile::read(void*, unsigned int)>
      b6:	b.n	94 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000b8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
      b8:	ldr	r3, [r0, #72]	; 0x48
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      bc:	mov	r0, r3
      be:	b.w	6f76 <FatFile::peek()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      c6:	b.w	5926 <ExFatFile::peek()>
  }
      ca:	mov.w	r0, #4294967295
      ce:	bx	lr

000000d0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      d0:	ldr	r3, [r0, #72]	; 0x48
  int available() {
      d2:	push	{r4, lr}
      d4:	cbz	r3, ee <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      d6:	ldrb	r0, [r3, #0]
      d8:	ands.w	r0, r0, #8
      dc:	ittt	ne
      de:	ldrne	r0, [r3, #28]
      e0:	ldrne	r3, [r3, #20]
      e2:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
      e4:	cmp	r0, #0
      e6:	it	lt
      e8:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
      ec:	pop	{r4, pc}
      ee:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
      f0:	cmp	r0, #0
      f2:	beq.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      f4:	ldrb.w	r3, [r0, #49]	; 0x31
      f8:	ands.w	r3, r3, #8
      fc:	beq.n	11c <StreamFile<FsBaseFile, unsigned long long>::available()+0x4c>
      fe:	ldrd	r1, r3, [r0, #16]
     102:	ldrd	r2, r4, [r0]
     106:	subs	r0, r1, r2
     108:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     10c:	cmp.w	r0, #2147483648	; 0x80000000
     110:	sbcs.w	r3, r3, #0
     114:	it	cs
     116:	mvncs.w	r0, #2147483648	; 0x80000000
     11a:	b.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     11c:	mov	r0, r3
     11e:	b.n	10c <StreamFile<FsBaseFile, unsigned long long>::available()+0x3c>

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	c14c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	; (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	; 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	; (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	; (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	; (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x2002dea3
     154:	.word	0x2002dea2
     158:	.word	0x2002d7c4
     15c:	.word	0x2002d7d4

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	c4de <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r0, r1, r4, lr}
     16a:	mov	r4, r0
     16c:	cbz	r1, 188 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     16e:	mov	r0, r1
     170:	str	r1, [sp, #4]
     172:	bl	eb40 <strlen>
     176:	ldr	r3, [r4, #0]
     178:	mov	r2, r0
     17a:	ldr	r1, [sp, #4]
     17c:	ldr	r3, [r3, #4]
     17e:	mov	r0, r4
     180:	add	sp, #8
     182:	ldmia.w	sp!, {r4, lr}
     186:	bx	r3
     188:	add	sp, #8
     18a:	pop	{r4, pc}

0000018c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     18c:	b.w	168 <Print::write(char const*) [clone .isra.0]>

00000190 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     190:	push	{r4, lr}
     192:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     194:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r4, lr}
     19e:	b.w	c48c <Print::println()>
	...

000001a4 <MTPStorage_SD::~MTPStorage_SD()>:
  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
//class MTPStorage_SD : public MTPStorageInterface, mSD_Base
class MTPStorage_SD : public mSD_Base
     1a4:	push	{r3, r4, r5, lr}
class StreamFile : public stream_t, public BaseFile {
     1a6:	ldr	r5, [pc, #44]	; (1d4 <MTPStorage_SD::~MTPStorage_SD()+0x30>)
     1a8:	mov	r4, r0
  ~FsBaseFile() {close();}
     1aa:	add.w	r0, r0, #340	; 0x154
     1ae:	str.w	r5, [r0, #-16]
     1b2:	bl	8484 <FsBaseFile::close()>
     1b6:	add.w	r0, r4, #260	; 0x104
     1ba:	str.w	r5, [r4, #244]	; 0xf4
     1be:	bl	8484 <FsBaseFile::close()>
     1c2:	add.w	r0, r4, #180	; 0xb4
     1c6:	str.w	r5, [r4, #164]	; 0xa4
     1ca:	bl	8484 <FsBaseFile::close()>
     1ce:	mov	r0, r4
     1d0:	pop	{r3, r4, r5, pc}
     1d2:	nop
     1d4:	.word	0x2000042c

000001d8 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     1d8:	ldr	r3, [r0, #56]	; 0x38
     1da:	cbz	r3, 1e2 <FsBaseFile::write(void const*, unsigned int)+0xa>
     1dc:	mov	r0, r3
     1de:	b.w	7704 <FatFile::write(void const*, unsigned int)>
     1e2:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1e4:	cbz	r0, 1ea <FsBaseFile::write(void const*, unsigned int)+0x12>
     1e6:	b.w	68dc <ExFatFile::write(void const*, unsigned int)>
  }
     1ea:	bx	lr

000001ec <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1ec:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1ee:	adds	r0, #16
     1f0:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
  }
     1f4:	pop	{r3, pc}

000001f6 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1f6:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     1f8:	movs	r2, #1
     1fa:	strb.w	r1, [sp, #7]
     1fe:	add.w	r1, sp, #7
     202:	adds	r0, #16
     204:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
  }
     208:	add	sp, #12
     20a:	ldr.w	pc, [sp], #4
	...

00000210 <stopUSB()>:
  { USB1_USBCMD = 0;  // disconnect USB
     210:	ldr	r3, [pc, #12]	; (220 <stopUSB()+0x10>)
     212:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     214:	movs	r0, #100	; 0x64
  { USB1_USBCMD = 0;  // disconnect USB
     216:	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     21a:	b.w	b4d0 <delay>
     21e:	nop
     220:	.word	0x402e0000

00000224 <resetUSB()>:
  {
     224:	push	{r4, lr}
      while(!Serial) mtpd.loop();
     226:	ldr	r4, [pc, #24]	; (240 <resetUSB()+0x1c>)
    stopUSB();
     228:	bl	210 <stopUSB()>
    usb_init();
     22c:	bl	11e28 <__usb_init_veneer>
      while(!Serial) mtpd.loop();
     230:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     234:	cbz	r0, 238 <resetUSB()+0x14>
  }
     236:	pop	{r4, pc}
      while(!Serial) mtpd.loop();
     238:	mov	r0, r4
     23a:	bl	4b98 <MTPD::loop()>
     23e:	b.n	230 <resetUSB()+0xc>
     240:	.word	0x20002340

00000244 <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     244:	mov.w	r3, #3758153728	; 0xe000e000
     248:	ldr	r2, [pc, #4]	; (250 <reboot()+0xc>)
     24a:	str.w	r2, [r3, #3340]	; 0xd0c
     24e:	bx	lr
     250:	.word	0x05fa0004

00000254 <getSerNum()>:
    SerNum=HW_OCOTP_MAC0 & 0xFFFFFF;
     254:	ldr	r3, [pc, #12]	; (264 <getSerNum()+0x10>)
     256:	ldr	r2, [pc, #16]	; (268 <getSerNum()+0x14>)
     258:	ldr.w	r3, [r3, #544]	; 0x220
     25c:	bic.w	r3, r3, #4278190080	; 0xff000000
     260:	str	r3, [r2, #0]
  }
     262:	bx	lr
     264:	.word	0x401f4400
     268:	.word	0x20006a08

0000026c <lowPowerInit()>:
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     26c:	ldr	r3, [pc, #48]	; (2a0 <lowPowerInit()+0x34>)
     26e:	ldr	r2, [r3, #100]	; 0x64
     270:	orr.w	r2, r2, #131072	; 0x20000
  {
     274:	push	{r4, lr}
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     276:	str	r2, [r3, #100]	; 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     278:	ldr	r2, [r3, #84]	; 0x54
     27a:	bic.w	r2, r2, #35	; 0x23
     27e:	str	r2, [r3, #84]	; 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     280:	ldr	r2, [r3, #84]	; 0x54
     282:	orr.w	r2, r2, #1
     286:	str	r2, [r3, #84]	; 0x54
    asm volatile("dsb");
     288:	dsb	sy
    for(int ii=0;ii<41;ii++) { pinMode(ii,INPUT_DISABLE); }
     28c:	movs	r4, #0
     28e:	uxtb	r0, r4
     290:	adds	r4, #1
     292:	movs	r1, #5
     294:	bl	bc60 <pinMode>
     298:	cmp	r4, #41	; 0x29
     29a:	bne.n	28e <lowPowerInit()+0x22>
  }
     29c:	pop	{r4, pc}
     29e:	nop
     2a0:	.word	0x400fc000

000002a4 <stopSystem()>:
  { //shutting down power
     2a4:	push	{r3, lr}
    stopSD(); 
     2a6:	bl	2fb4 <stopSD()>
    adc_exit();
     2aa:	bl	3c4e <adc_exit()>
  }
     2ae:	ldmia.w	sp!, {r3, lr}
    stopUSB();
     2b2:	b.w	210 <stopUSB()>
	...

000002b8 <loop>:
{
     2b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     2bc:	ldr	r6, [pc, #396]	; (44c <loop+0x194>)
{
     2be:	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     2c0:	ldr	r5, [pc, #396]	; (450 <loop+0x198>)
  loopCount++;
     2c2:	ldr	r3, [r6, #0]
  if(status==-99) status = (termon==1)? STOPPED: CLOSED;
     2c4:	ldr	r4, [pc, #396]	; (454 <loop+0x19c>)
  loopCount++;
     2c6:	adds	r3, #1
     2c8:	str	r3, [r6, #0]
  nb = getDataCount();
     2ca:	bl	2cf8 <getDataCount()>
  if(nb>mxb) mxb=nb;
     2ce:	ldrh	r3, [r5, #0]
     2d0:	cmp	r3, r0
  if(status==-99) status = (termon==1)? STOPPED: CLOSED;
     2d2:	ldrsh.w	r3, [r4]
  if(nb>mxb) mxb=nb;
     2d6:	it	cc
     2d8:	strhcc	r0, [r5, #0]
  if(status==-99) status = (termon==1)? STOPPED: CLOSED;
     2da:	adds	r3, #99	; 0x63
     2dc:	itt	eq
     2de:	moveq	r3, #0
     2e0:	strheq	r3, [r4, #0]
  status = menu(status);
     2e2:	ldrsh.w	r0, [r4]
     2e6:	bl	2834 <menu(short)>
      if(status<0)
     2ea:	cmp	r0, #0
  status = menu(status);
     2ec:	strh	r0, [r4, #0]
      if(status<0)
     2ee:	bge.n	2f6 <loop+0x3e>
      { mtpd.loop();
     2f0:	ldr	r0, [pc, #356]	; (458 <loop+0x1a0>)
     2f2:	bl	4b98 <MTPD::loop()>
    status=saveData(status);  
     2f6:	ldrsh.w	r0, [r4]
     2fa:	bl	3714 <saveData(short)>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     2fe:	ldr	r3, [pc, #348]	; (45c <loop+0x1a4>)
  if((t1=millis())>(t0+1000))
     300:	ldr	r7, [pc, #348]	; (460 <loop+0x1a8>)
     302:	ldr	r3, [r3, #0]
    status=saveData(status);  
     304:	strh	r0, [r4, #0]
     306:	str	r3, [sp, #28]
  if((t1=millis())>(t0+1000))
     308:	ldr	r3, [r7, #0]
     30a:	ldr	r2, [sp, #28]
     30c:	add.w	r3, r3, #1000	; 0x3e8
     310:	cmp	r3, r2
     312:	bcs.n	40a <loop+0x152>
    if(monitor)
     314:	ldr	r3, [pc, #332]	; (464 <loop+0x1ac>)
     316:	ldr.w	sl, [pc, #396]	; 4a4 <loop+0x1ec>
     31a:	ldrsh.w	r3, [r3]
     31e:	ldr.w	r9, [pc, #392]	; 4a8 <loop+0x1f0>
     322:	ldr.w	r8, [pc, #392]	; 4ac <loop+0x1f4>
     326:	cmp	r3, #0
     328:	beq.n	3f4 <loop+0x13c>
      rtc_get_datetime(&t);
     32a:	add	r0, sp, #32
     32c:	bl	3e1c <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     330:	ldrsb.w	r3, [sp, #36]	; 0x24
     334:	ldrsh.w	r2, [sp, #32]
     338:	str	r3, [sp, #16]
     33a:	ldrsb.w	r3, [sp, #39]	; 0x27
     33e:	ldr	r1, [pc, #296]	; (468 <loop+0x1b0>)
     340:	str	r3, [sp, #12]
     342:	ldrsb.w	r3, [sp, #38]	; 0x26
     346:	ldr	r0, [pc, #292]	; (46c <loop+0x1b4>)
     348:	str	r3, [sp, #8]
     34a:	ldrsb.w	r3, [sp, #37]	; 0x25
     34e:	str	r3, [sp, #4]
     350:	ldrsb.w	r3, [sp, #35]	; 0x23
     354:	str	r3, [sp, #0]
     356:	ldrsb.w	r3, [sp, #34]	; 0x22
     35a:	bl	c4c4 <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     35e:	ldr	r1, [pc, #272]	; (470 <loop+0x1b8>)
     360:	ldr	r0, [pc, #264]	; (46c <loop+0x1b4>)
     362:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     366:	ldr	r1, [r6, #0]
     368:	ldr	r0, [pc, #256]	; (46c <loop+0x1b4>)
     36a:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     36e:	ldr	r1, [pc, #260]	; (474 <loop+0x1bc>)
     370:	ldr	r0, [pc, #248]	; (46c <loop+0x1b4>)
     372:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     376:	ldr.w	r1, [sl]
     37a:	ldr	r0, [pc, #240]	; (46c <loop+0x1b4>)
     37c:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     380:	ldr	r1, [pc, #240]	; (474 <loop+0x1bc>)
     382:	ldr	r0, [pc, #232]	; (46c <loop+0x1b4>)
     384:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     388:	ldr.w	r1, [r9]
     38c:	ldr	r0, [pc, #220]	; (46c <loop+0x1b4>)
     38e:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     392:	ldr	r1, [pc, #224]	; (474 <loop+0x1bc>)
     394:	ldr	r0, [pc, #212]	; (46c <loop+0x1b4>)
     396:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     39a:	ldrh	r2, [r5, #0]
     39c:	ldr	r1, [pc, #216]	; (478 <loop+0x1c0>)
     39e:	ldr	r0, [pc, #204]	; (46c <loop+0x1b4>)
     3a0:	bl	c4c4 <Print::printf(char const*, ...)>
     3a4:	ldr	r1, [pc, #212]	; (47c <loop+0x1c4>)
     3a6:	ldr	r0, [pc, #196]	; (46c <loop+0x1b4>)
     3a8:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(have_disk);  Serial.print("  ");
     3ac:	ldr	r3, [pc, #208]	; (480 <loop+0x1c8>)
     3ae:	ldr	r0, [pc, #188]	; (46c <loop+0x1b4>)
     3b0:	ldr	r1, [r3, #0]
     3b2:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     3b6:	ldr	r1, [pc, #196]	; (47c <loop+0x1c4>)
     3b8:	ldr	r0, [pc, #176]	; (46c <loop+0x1b4>)
     3ba:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("; ");
     3be:	ldr.w	r1, [r8]
     3c2:	ldr	r0, [pc, #168]	; (46c <loop+0x1b4>)
     3c4:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     3c8:	ldr	r1, [pc, #184]	; (484 <loop+0x1cc>)
     3ca:	ldr	r0, [pc, #160]	; (46c <loop+0x1b4>)
     3cc:	bl	18c <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     3d0:	ldr	r3, [pc, #180]	; (488 <loop+0x1d0>)
     3d2:	ldrh	r4, [r3, #0]
     3d4:	sxth	r4, r4
     3d6:	cbnz	r4, 412 <loop+0x15a>
          for(int ii=0; ii<8;ii++) {Serial.printf("%9d",logBuffer[ii]);}
     3d8:	ldr	r3, [pc, #176]	; (48c <loop+0x1d4>)
     3da:	ldr	r1, [pc, #180]	; (490 <loop+0x1d8>)
     3dc:	ldr.w	fp, [pc, #140]	; 46c <loop+0x1b4>
     3e0:	ldr.w	r2, [r3, r4, lsl #2]
     3e4:	adds	r4, #1
     3e6:	mov	r0, fp
     3e8:	bl	c4c4 <Print::printf(char const*, ...)>
     3ec:	cmp	r4, #8
     3ee:	ldr	r1, [pc, #160]	; (490 <loop+0x1d8>)
     3f0:	ldr	r3, [pc, #152]	; (48c <loop+0x1d4>)
     3f2:	bne.n	3e0 <loop+0x128>
    loopCount=0;
     3f4:	movs	r3, #0
     3f6:	str	r3, [r6, #0]
    procCount=0;
     3f8:	str.w	r3, [sl]
    procMiss=0;
     3fc:	str.w	r3, [r9]
    mxb=0;
     400:	strh	r3, [r5, #0]
    disk_count=0;
     402:	str.w	r3, [r8]
    t0=t1;
     406:	ldr	r3, [sp, #28]
     408:	str	r3, [r7, #0]
  asm("wfi");
     40a:	wfi
}
     40c:	add	sp, #44	; 0x2c
     40e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     412:	ldr.w	fp, [pc, #140]	; 4a0 <loop+0x1e8>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     416:	movs	r4, #0
     418:	ldr	r1, [pc, #120]	; (494 <loop+0x1dc>)
     41a:	ldr	r3, [pc, #80]	; (46c <loop+0x1b4>)
     41c:	adds	r4, #1
     41e:	mov	r0, r3
     420:	ldr.w	r2, [fp], #4
     424:	bl	c4c4 <Print::printf(char const*, ...)>
     428:	cmp	r4, #24
     42a:	ldr	r3, [pc, #64]	; (46c <loop+0x1b4>)
     42c:	ldr	r1, [pc, #100]	; (494 <loop+0x1dc>)
     42e:	bne.n	41c <loop+0x164>
        Serial.printf("%2d",max_stat);
     430:	ldr	r4, [pc, #100]	; (498 <loop+0x1e0>)
     432:	mov	r0, r3
     434:	ldr	r1, [pc, #100]	; (49c <loop+0x1e4>)
     436:	ldr	r2, [r4, #0]
     438:	bl	c4c4 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     43c:	movs	r2, #96	; 0x60
     43e:	movs	r1, #0
     440:	ldr	r0, [pc, #92]	; (4a0 <loop+0x1e8>)
     442:	bl	9f44 <memset>
        max_stat=0;        
     446:	movs	r3, #0
     448:	str	r3, [r4, #0]
     44a:	b.n	3f4 <loop+0x13c>
     44c:	.word	0x2002ce98
     450:	.word	0x2002d800
     454:	.word	0x20001e20
     458:	.word	0x20002340
     45c:	.word	0x2002d7c4
     460:	.word	0x2002ce94
     464:	.word	0x2002d80e
     468:	.word	0x2000131d
     46c:	.word	0x20001c28
     470:	.word	0x2000133e
     474:	.word	0x20001347
     478:	.word	0x20001342
     47c:	.word	0x20001346
     480:	.word	0x2002ce44
     484:	.word	0x20001349
     488:	.word	0x2002d810
     48c:	.word	0x2002d05c
     490:	.word	0x2000134c
     494:	.word	0x20001350
     498:	.word	0x2002d07c
     49c:	.word	0x20001355
     4a0:	.word	0x2002d0ac
     4a4:	.word	0x2002d0a4
     4a8:	.word	0x2002d0a8
     4ac:	.word	0x2002cfec

000004b0 <setup1()>:
{ delay(100);
     4b0:	push	{r4, lr}
  while(!setup_ready) {delay(10);} // wait for setup() to finish
     4b2:	ldr	r4, [pc, #52]	; (4e8 <setup1()+0x38>)
{ delay(100);
     4b4:	movs	r0, #100	; 0x64
     4b6:	bl	b4d0 <delay>
  while(!setup_ready) {delay(10);} // wait for setup() to finish
     4ba:	ldr	r3, [r4, #0]
     4bc:	cbz	r3, 4de <setup1()+0x2e>
  Serial.println("Setup1");
     4be:	ldr	r1, [pc, #44]	; (4ec <setup1()+0x3c>)
     4c0:	ldr	r0, [pc, #44]	; (4f0 <setup1()+0x40>)
     4c2:	bl	190 <Print::println(char const*) [clone .isra.0]>
  i2s_setup();
     4c6:	bl	b68 <i2s_setup()>
  dma_setup();
     4ca:	bl	bec <dma_setup()>
  adc_init();
     4ce:	bl	3c4c <adc_init()>
  Serial.println("Setup1 done");
     4d2:	ldr	r1, [pc, #32]	; (4f4 <setup1()+0x44>)
     4d4:	ldr	r0, [pc, #24]	; (4f0 <setup1()+0x40>)
}
     4d6:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     4da:	b.w	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(10);} // wait for setup() to finish
     4de:	movs	r0, #10
     4e0:	bl	b4d0 <delay>
     4e4:	b.n	4ba <setup1()+0xa>
     4e6:	nop
     4e8:	.word	0x2002c418
     4ec:	.word	0x20000e9c
     4f0:	.word	0x20001c28
     4f4:	.word	0x20000ea3

000004f8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     4f8:	push	{r4, r5, r6, lr}
     4fa:	mov	r5, r0
     4fc:	ldr.w	r0, [r0, #1164]	; 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     500:	cbnz	r0, 526 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     502:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     504:	ldr.w	r0, [r5, #1152]	; 0x480
     508:	cbz	r0, 55c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     50a:	bl	7b68 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     50e:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     510:	cbz	r6, 522 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
     512:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     516:	cbz	r0, 53c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
     518:	ldr	r3, [r0, #0]
     51a:	movs	r1, #0
     51c:	ldr	r3, [r3, #68]	; 0x44
     51e:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     520:	cbz	r0, 53c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
     522:	mov	r0, r4
     524:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     526:	ldr	r3, [r0, #0]
     528:	ldr	r3, [r3, #60]	; 0x3c
     52a:	blx	r3
     52c:	cmp	r0, #0
     52e:	beq.n	502 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     530:	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     534:	cbnz	r0, 540 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     536:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
     53a:	cbnz	r0, 54c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     53c:	movs	r4, #0
     53e:	b.n	522 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     540:	ldr	r3, [r0, #0]
     542:	ldr	r3, [r3, #64]	; 0x40
     544:	blx	r3
     546:	cmp	r0, #0
     548:	bne.n	502 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     54a:	b.n	536 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
     54c:	ldr	r3, [r0, #0]
     54e:	movs	r1, #1
     550:	ldr	r3, [r3, #68]	; 0x44
     552:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     554:	mov	r6, r0
     556:	cmp	r0, #0
     558:	bne.n	504 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     55a:	b.n	53c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     55c:	ldr.w	r0, [r5, #1156]	; 0x484
     560:	cmp	r0, #0
     562:	beq.n	50e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     564:	bl	6136 <ExFatPartition::freeClusterCount()>
     568:	b.n	50e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

0000056c <storage_configure()>:

  void storage_configure()
  {
     56c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
     570:	movs	r4, #5
    spiConfigBackupPin = 255;
     572:	ldr	r5, [pc, #296]	; (69c <storage_configure()+0x130>)
     574:	mov.w	r8, #4294967295
    sdioConfigBackup = sdioConfig;
     578:	movs	r7, #0
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     57a:	ldr	r6, [pc, #292]	; (6a0 <storage_configure()+0x134>)
     57c:	mov.w	r1, #0
    spiConfigBackupPin = 255;
     580:	strb.w	r8, [r5, #1212]	; 0x4bc
     584:	mov	r0, r6
    sdioConfigBackup = sdioConfig;
     586:	strb.w	r7, [r5, #1224]	; 0x4c8
     58a:	bl	98a0 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     58e:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     590:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     594:	bl	8f9c <SdioCard::errorCode() const>
     598:	cbnz	r0, 5bc <storage_configure()+0x50>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     59a:	movs	r3, #1
     59c:	ldr.w	r1, [r5, #1164]	; 0x48c
     5a0:	mov	r0, r5
     5a2:	mov	r2, r3
     5a4:	bl	85e4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     5a8:	cbz	r0, 5bc <storage_configure()+0x50>
    return m_fVol ? m_fVol->clusterCount() :
     5aa:	ldr.w	r3, [r5, #1152]	; 0x480
     5ae:	cbnz	r3, 5e2 <storage_configure()+0x76>
     5b0:	ldr.w	r6, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     5b4:	cbz	r6, 5e6 <storage_configure()+0x7a>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     5b6:	ldr.w	r6, [r6, #1072]	; 0x430
     5ba:	b.n	5e6 <storage_configure()+0x7a>
        if(cs[ii]<BUILTIN_SDCARD)
        { pinMode(cs[ii],OUTPUT); digitalWrite(cs[ii],HIGH); 
          spi_init();
        }
        int jj;
        for(jj=0;jj<5;jj++) if (sdx[ii].begin(SD_CONFIG)) break; else delay(1000);
     5bc:	mov.w	r0, #1000	; 0x3e8
     5c0:	bl	b4d0 <delay>
     5c4:	subs	r4, #1
     5c6:	bne.n	57a <storage_configure()+0xe>
        if(jj==5)
        {
          Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     5c8:	ldr	r3, [pc, #216]	; (6a4 <storage_configure()+0x138>)
     5ca:	mov	r2, r4
     5cc:	ldr	r1, [pc, #216]	; (6a8 <storage_configure()+0x13c>)
     5ce:	ldr	r3, [r3, #0]
     5d0:	ldr	r0, [pc, #216]	; (6ac <storage_configure()+0x140>)
     5d2:	str	r3, [sp, #0]
     5d4:	movs	r3, #254	; 0xfe
     5d6:	bl	c4c4 <Print::printf(char const*, ...)>
     5da:	ldr	r0, [pc, #208]	; (6ac <storage_configure()+0x140>)
     5dc:	bl	c48c <Print::println()>
      for(int ii=0; ii<nsd; ii++)
     5e0:	b.n	684 <storage_configure()+0x118>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     5e2:	ldr	r6, [r3, #28]
     5e4:	subs	r6, #1
          have_disk=0;
        }
        else
        {
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     5e6:	ldr	r0, [pc, #180]	; (69c <storage_configure()+0x130>)
     5e8:	bl	4f8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     5ec:	ldr.w	r3, [r5, #1152]	; 0x480
     5f0:	mov	r8, r0
     5f2:	cmp	r3, #0
     5f4:	beq.n	68e <storage_configure()+0x122>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     5f6:	ldrb	r3, [r3, #6]
     5f8:	mov.w	r4, #512	; 0x200
     5fc:	lsls	r4, r3
     5fe:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     600:	ldr.w	r9, [pc, #160]	; 6a4 <storage_configure()+0x138>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     604:	movs	r7, #0
     606:	movs	r2, #0
     608:	mov.w	sl, #10
     60c:	ldr.w	r3, [r9]
     610:	ldr	r1, [pc, #156]	; (6b0 <storage_configure()+0x144>)
     612:	str	r3, [sp, #0]
     614:	movs	r3, #254	; 0xfe
     616:	ldr	r0, [pc, #148]	; (6ac <storage_configure()+0x140>)
     618:	bl	c4c4 <Print::printf(char const*, ...)>
          Serial.print("; total clusters: "); Serial.print(totalSize); 
     61c:	ldr	r1, [pc, #148]	; (6b4 <storage_configure()+0x148>)
     61e:	ldr	r0, [pc, #140]	; (6ac <storage_configure()+0x140>)
     620:	bl	18c <Print::print(char const*) [clone .isra.0]>
     624:	mov	r2, r6
     626:	mov	r3, r7
     628:	ldr	r0, [pc, #128]	; (6ac <storage_configure()+0x140>)
     62a:	strd	sl, r7, [sp]
     62e:	bl	c4f2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
          Serial.print(" free clusters: "); Serial.print(freeSize);
     632:	ldr	r1, [pc, #132]	; (6b8 <storage_configure()+0x14c>)
     634:	ldr	r0, [pc, #116]	; (6ac <storage_configure()+0x140>)
     636:	bl	18c <Print::print(char const*) [clone .isra.0]>
     63a:	mov	r2, r8
     63c:	mov	r3, r7
     63e:	ldr	r0, [pc, #108]	; (6ac <storage_configure()+0x140>)
     640:	strd	sl, r7, [sp]
     644:	bl	c4f2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
          Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     648:	ldr	r1, [pc, #112]	; (6bc <storage_configure()+0x150>)
     64a:	ldr	r0, [pc, #96]	; (6ac <storage_configure()+0x140>)
     64c:	bl	18c <Print::print(char const*) [clone .isra.0]>
     650:	lsr.w	r1, r4, sl
     654:	ldr	r0, [pc, #84]	; (6ac <storage_configure()+0x140>)
     656:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     65a:	ldr	r1, [pc, #100]	; (6c0 <storage_configure()+0x154>)
     65c:	ldr	r0, [pc, #76]	; (6ac <storage_configure()+0x140>)
     65e:	bl	190 <Print::println(char const*) [clone .isra.0]>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     662:	ldr	r3, [pc, #96]	; (6c4 <storage_configure()+0x158>)
     664:	ldr	r2, [r3, #0]
     666:	cmp	r2, #19
     668:	bgt.n	67e <storage_configure()+0x112>
          sd_name[fsCount] = name;
     66a:	add.w	r1, r3, r2, lsl #2
     66e:	ldr.w	r0, [r9]
     672:	str	r0, [r1, #4]
          sdx[fsCount++] = &fs;
     674:	adds	r1, r2, #1
     676:	str	r1, [r3, #0]
     678:	add.w	r3, r3, r2, lsl #2
     67c:	str	r5, [r3, #84]	; 0x54
            #else
              mtpd.addFilesystem(sdx[ii], sd_str[ii]);
            #endif
          #endif

          filing_init();
     67e:	movs	r4, #1
     680:	bl	2f4c <filing_init()>
          have_disk=1;
     684:	ldr	r3, [pc, #64]	; (6c8 <storage_configure()+0x15c>)
     686:	str	r4, [r3, #0]
        }
      }
  }
     688:	add	sp, #8
     68a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     68e:	ldr.w	r4, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     692:	cmp	r4, #0
     694:	beq.n	600 <storage_configure()+0x94>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     696:	ldr.w	r4, [r4, #1084]	; 0x43c
     69a:	b.n	600 <storage_configure()+0x94>
     69c:	.word	0x2002d13c
     6a0:	.word	0x2002d5cc
     6a4:	.word	0x20001e18
     6a8:	.word	0x20000d56
     6ac:	.word	0x20001c28
     6b0:	.word	0x20000d05
     6b4:	.word	0x20000d1c
     6b8:	.word	0x20000d2f
     6bc:	.word	0x20000d40
     6c0:	.word	0x20000d4f
     6c4:	.word	0x2002d60c
     6c8:	.word	0x2002ce44

000006cc <_GLOBAL__sub_I_storage>:
     6cc:	push	{r3, r4, r5, r6, r7, lr}
        fsCount = 0;
     6ce:	ldr	r5, [pc, #224]	; (7b0 <_GLOBAL__sub_I_storage+0xe4>)
     6d0:	movs	r4, #0
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6d2:	ldr	r3, [pc, #224]	; (7b4 <_GLOBAL__sub_I_storage+0xe8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6d4:	mov.w	r2, #1000	; 0x3e8
      MTPStorage_SD storage;
     6d8:	ldr	r7, [pc, #220]	; (7b8 <_GLOBAL__sub_I_storage+0xec>)
     6da:	mov	r0, r5
// old MTP Responder.
class MTPD {
public:

//  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
  MTPD(MTPStorage_SD *storage): storage_(storage) {}
     6dc:	ldr	r6, [pc, #220]	; (7bc <_GLOBAL__sub_I_storage+0xf0>)
     6de:	str.w	r3, [r5, #164]	; 0xa4
     6e2:	str.w	r3, [r5, #244]	; 0xf4
     6e6:	str.w	r3, [r5, #324]	; 0x144
class MTPStorage_SD : public mSD_Base
     6ea:	mvn.w	r3, #1
     6ee:	str.w	r2, [r5, #172]	; 0xac
     6f2:	ldr	r1, [pc, #204]	; (7c0 <_GLOBAL__sub_I_storage+0xf4>)
        fsCount = 0;
     6f4:	str	r4, [r5, #0]
	constexpr Print() : write_error(0) {}
     6f6:	str.w	r4, [r5, #168]	; 0xa8
     6fa:	strb.w	r4, [r5, #176]	; 0xb0
     6fe:	strb.w	r4, [r5, #256]	; 0x100
     702:	strb.w	r4, [r5, #336]	; 0x150
class MTPStorage_SD : public mSD_Base
     706:	str.w	r4, [r5, #412]	; 0x19c
     70a:	strh.w	r4, [r5, #424]	; 0x1a8
     70e:	strd	r4, r2, [r5, #248]	; 0xf8
     712:	strd	r4, r2, [r5, #328]	; 0x148
     716:	mov	r2, r7
     718:	strd	r3, r4, [r5, #416]	; 0x1a0
  FsBaseFile() {}
     71c:	strd	r4, r4, [r5, #236]	; 0xec
     720:	strd	r4, r4, [r5, #316]	; 0x13c
     724:	strd	r4, r4, [r5, #396]	; 0x18c
     728:	strd	r4, r4, [r5, #404]	; 0x194
     72c:	bl	c6b8 <__aeabi_atexit>
     730:	mov	r0, r6
     732:	mov	r1, r4
     734:	mov.w	r2, #512	; 0x200
     738:	str.w	r5, [r0], #32
     73c:	bl	9f44 <memset>
     740:	mov	r1, r4
     742:	mov.w	r2, #512	; 0x200
     746:	add.w	r0, r6, #544	; 0x220
     74a:	bl	9f44 <memset>
     74e:	add.w	r3, r6, #4096	; 0x1000
     752:	movw	r2, #511	; 0x1ff
  SdFs sdx[nsd];
     756:	mov	r0, r4
     758:	str.w	r4, [r3, #1060]	; 0x424
     75c:	strh.w	r2, [r3, #1056]	; 0x420
     760:	strb.w	r4, [r3, #1064]	; 0x428
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     764:	ldr	r2, [pc, #92]	; (7c4 <_GLOBAL__sub_I_storage+0xf8>)
     766:	str.w	r4, [r3, #1068]	; 0x42c
  FsVolume() {}
     76a:	ldr	r3, [pc, #92]	; (7c8 <_GLOBAL__sub_I_storage+0xfc>)
     76c:	ldr	r1, [pc, #92]	; (7cc <_GLOBAL__sub_I_storage+0x100>)
     76e:	str.w	r2, [r3, #1168]	; 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     772:	ldr	r2, [pc, #92]	; (7d0 <_GLOBAL__sub_I_storage+0x104>)
     774:	str.w	r4, [r3, #1152]	; 0x480
     778:	str.w	r2, [r3, #1188]	; 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     77c:	movs	r2, #7
     77e:	str.w	r4, [r3, #1156]	; 0x484
     782:	str.w	r2, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     786:	movs	r2, #41	; 0x29
class SdBase : public Vol {
     788:	str.w	r4, [r3, #1164]	; 0x48c
     78c:	strb.w	r2, [r3, #1197]	; 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     790:	ldr	r2, [pc, #64]	; (7d4 <_GLOBAL__sub_I_storage+0x108>)
  SdioConfig() {}
     792:	strh.w	r4, [r3, #1176]	; 0x498
     796:	str.w	r2, [r3, #1180]	; 0x49c
     79a:	mov	r2, r7
  SharedSpiCard() {}
     79c:	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     7a0:	strb.w	r4, [r3, #1208]	; 0x4b8
     7a4:	strb.w	r4, [r3, #1224]	; 0x4c8
  }
     7a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  SdFs sdx[nsd];
     7ac:	b.w	c6b8 <__aeabi_atexit>
     7b0:	.word	0x2002d60c
     7b4:	.word	0x200004f4
     7b8:	.word	0x20001c40
     7bc:	.word	0x20002340
     7c0:	.word	0x000001a5
     7c4:	.word	0x20000518
     7c8:	.word	0x2002d13c
     7cc:	.word	0x0000006d
     7d0:	.word	0x003d0900
     7d4:	.word	0x2000045c

000007d8 <setup>:
{
     7d8:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     7da:	ldr	r4, [pc, #296]	; (904 <setup+0x12c>)
     7dc:	sub	sp, #28
    set_arm_clock(96'000'000);
     7de:	ldr	r0, [pc, #296]	; (908 <setup+0x130>)
				if (elapsed > 750) break;
     7e0:	movw	r7, #750	; 0x2ee
     7e4:	bl	a788 <set_arm_clock>
			if (usb_configuration) {
     7e8:	ldr	r6, [pc, #288]	; (90c <setup+0x134>)
		uint32_t millis_begin = systick_millis_count;
     7ea:	ldr	r5, [r4, #0]
		while (!(*this)) {
     7ec:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7f0:	cmp	r0, #0
     7f2:	beq.n	8ea <setup+0x112>
  uint16_t *params=loadParameters();  // get parameters from EEPROM
     7f4:	bl	2468 <loadParameters()>
  Serial.println("\nSetup");
     7f8:	ldr	r1, [pc, #276]	; (910 <setup+0x138>)
  uint16_t *params=loadParameters();  // get parameters from EEPROM
     7fa:	mov	r6, r0
  Serial.println("\nSetup");
     7fc:	ldr	r0, [pc, #276]	; (914 <setup+0x13c>)
     7fe:	ldr	r3, [r4, #0]
     800:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.print("params[0] = "); Serial.println(params[0]);
     804:	ldr	r1, [pc, #272]	; (918 <setup+0x140>)
  for(int ii=0;ii<16;ii++) {Serial.print(ii); Serial.print(" "); Serial.println(params[ii]);}
     806:	movs	r4, #0
  Serial.print("params[0] = "); Serial.println(params[0]);
     808:	ldr	r0, [pc, #264]	; (914 <setup+0x13c>)
     80a:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     80e:	ldr	r5, [pc, #260]	; (914 <setup+0x13c>)
     810:	ldrh	r1, [r6, #0]
     812:	ldr	r0, [pc, #256]	; (914 <setup+0x13c>)
  for(int ii=0;ii<16;ii++) {Serial.print(ii); Serial.print(" "); Serial.println(params[ii]);}
     814:	ldr	r7, [pc, #260]	; (91c <setup+0x144>)
     816:	bl	c47a <Print::print(long)>
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     81a:	ldr	r0, [pc, #248]	; (914 <setup+0x13c>)
     81c:	bl	c48c <Print::println()>
	size_t print(int n)				{ return print((long)n); }
     820:	mov	r1, r4
     822:	mov	r0, r5
     824:	bl	c47a <Print::print(long)>
     828:	mov	r1, r7
     82a:	mov	r0, r5
     82c:	bl	18c <Print::print(char const*) [clone .isra.0]>
     830:	ldrh.w	r1, [r6, r4, lsl #1]
     834:	mov	r0, r5
     836:	adds	r4, #1
     838:	bl	c47a <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     83c:	mov	r0, r5
     83e:	bl	c48c <Print::println()>
     842:	cmp	r4, #16
     844:	bne.n	820 <setup+0x48>
    if(CrashReport) Serial.print(CrashReport);
     846:	ldr	r0, [pc, #216]	; (920 <setup+0x148>)
     848:	bl	11e58 <___ZN16CrashReportClasscvbEv_veneer>
     84c:	cbz	r0, 856 <setup+0x7e>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     84e:	ldr	r1, [pc, #196]	; (914 <setup+0x13c>)
     850:	ldr	r0, [pc, #204]	; (920 <setup+0x148>)
     852:	bl	11e30 <___ZNK16CrashReportClass7printToER5Print_veneer>
        usb_init_events();
     856:	bl	4818 <usb_init_events>
    usbPowerSetup();  
     85a:	bl	3c50 <usbPowerSetup()>
    lowPowerInit();
     85e:	bl	26c <lowPowerInit()>
  Serial.print("SerNum: "); Serial.println(SerNum,HEX); Serial.flush();
     862:	ldr	r1, [pc, #192]	; (924 <setup+0x14c>)
     864:	ldr	r0, [pc, #172]	; (914 <setup+0x13c>)
  getSerNum();
     866:	bl	254 <getSerNum()>
  Serial.print("SerNum: "); Serial.println(SerNum,HEX); Serial.flush();
     86a:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     86e:	ldr	r1, [pc, #184]	; (928 <setup+0x150>)
     870:	movs	r3, #0
     872:	movs	r2, #16
     874:	ldr	r1, [r1, #0]
     876:	ldr	r0, [pc, #156]	; (914 <setup+0x13c>)
     878:	bl	c4de <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
     87c:	ldr	r0, [pc, #148]	; (914 <setup+0x13c>)
     87e:	bl	c48c <Print::println()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     882:	bl	a6f4 <usb_serial_flush_output>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     886:	add	r0, sp, #16
     888:	bl	3e1c <rtc_get_datetime(datetime_t*)>
     88c:	cbnz	r0, 896 <setup+0xbe>
     88e:	ldr	r1, [pc, #156]	; (92c <setup+0x154>)
     890:	ldr	r0, [pc, #128]	; (914 <setup+0x13c>)
     892:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     896:	ldrsb.w	r3, [sp, #23]
     89a:	ldrsh.w	r2, [sp, #16]
     89e:	str	r3, [sp, #12]
     8a0:	ldrsb.w	r3, [sp, #22]
     8a4:	ldr	r1, [pc, #136]	; (930 <setup+0x158>)
     8a6:	str	r3, [sp, #8]
     8a8:	ldrsb.w	r3, [sp, #21]
     8ac:	ldr	r0, [pc, #100]	; (914 <setup+0x13c>)
     8ae:	str	r3, [sp, #4]
     8b0:	ldrsb.w	r3, [sp, #19]
     8b4:	str	r3, [sp, #0]
     8b6:	ldrsb.w	r3, [sp, #18]
     8ba:	bl	c4c4 <Print::printf(char const*, ...)>
  Serial.println();
     8be:	ldr	r0, [pc, #84]	; (914 <setup+0x13c>)
     8c0:	bl	c48c <Print::println()>
  Serial.println("filing_init");
     8c4:	ldr	r1, [pc, #108]	; (934 <setup+0x15c>)
     8c6:	ldr	r0, [pc, #76]	; (914 <setup+0x13c>)
     8c8:	bl	190 <Print::println(char const*) [clone .isra.0]>
  storage_configure();  
     8cc:	bl	56c <storage_configure()>
  Serial.println("Setup done"); Serial.flush();
     8d0:	ldr	r1, [pc, #100]	; (938 <setup+0x160>)
     8d2:	ldr	r0, [pc, #64]	; (914 <setup+0x13c>)
     8d4:	bl	190 <Print::println(char const*) [clone .isra.0]>
     8d8:	bl	a6f4 <usb_serial_flush_output>
  setup_ready=1;
     8dc:	ldr	r3, [pc, #92]	; (93c <setup+0x164>)
     8de:	movs	r2, #1
     8e0:	str	r2, [r3, #0]
    setup1();
     8e2:	bl	4b0 <setup1()>
}
     8e6:	add	sp, #28
     8e8:	pop	{r4, r5, r6, r7, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     8ea:	ldr	r3, [r4, #0]
			if (usb_configuration) {
     8ec:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     8ee:	subs	r3, r3, r5
			if (usb_configuration) {
     8f0:	cbz	r2, 900 <setup+0x128>
				if (elapsed > 2000) break;
     8f2:	cmp.w	r3, #2000	; 0x7d0
				if (elapsed > 750) break;
     8f6:	bhi.w	7f4 <setup+0x1c>
			yield();
     8fa:	bl	c14c <yield>
     8fe:	b.n	7ec <setup+0x14>
				if (elapsed > 750) break;
     900:	cmp	r3, r7
     902:	b.n	8f6 <setup+0x11e>
     904:	.word	0x2002d7c4
     908:	.word	0x05b8d800
     90c:	.word	0x2002dea3
     910:	.word	0x20001359
     914:	.word	0x20001c28
     918:	.word	0x20001360
     91c:	.word	0x20001347
     920:	.word	0x20001c1c
     924:	.word	0x2000136d
     928:	.word	0x20006a08
     92c:	.word	0x20001376
     930:	.word	0x2000138b
     934:	.word	0x200013b2
     938:	.word	0x200013be
     93c:	.word	0x2002c418

00000940 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     940:	push	{r4, lr}
     942:	mov	r4, r0
		release();
     944:	bl	c2b8 <DMAChannel::release()>
	}
     948:	mov	r0, r4
     94a:	pop	{r4, pc}

0000094c <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     94c:	push	{r3, r4, r5, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     94e:	ldr	r3, [pc, #148]	; (9e4 <acq_isr()+0x98>)
     950:	ldr	r2, [r3, #0]
     952:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     954:	ldrb	r2, [r3, #4]
     956:	ldr	r3, [pc, #144]	; (9e8 <acq_isr()+0x9c>)
     958:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     95a:	ldr	r2, [pc, #144]	; (9ec <acq_isr()+0xa0>)
    }
    else
    {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
     95c:	sub.w	r3, r2, #1024	; 0x400
     960:	cmp	r1, r2
     962:	it	cc
     964:	movcc	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     966:	mov	r1, r3
	asm("dsb");
     968:	dsb	sy
     96c:	add.w	r0, r3, #32
	uint32_t end_addr = (uint32_t)addr + size;
     970:	add.w	r2, r3, #1024	; 0x400
     974:	cmp	r2, r0
     976:	ite	cc
     978:	movcc	r2, #1
     97a:	movcs	r2, #32
		SCB_CACHE_DCIMVAC = location;
     97c:	mov.w	r0, #3758153728	; 0xe000e000
     980:	add.w	r2, r3, r2, lsl #5
     984:	str.w	r1, [r0, #3932]	; 0xf5c
		location += 32;
     988:	adds	r1, #32
	} while (location < end_addr);
     98a:	cmp	r1, r2
     98c:	bne.n	984 <acq_isr()+0x38>
	asm("dsb");
     98e:	dsb	sy
	asm("isb");
     992:	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     996:	ldr	r1, [pc, #88]	; (9f0 <acq_isr()+0xa4>)
     998:	ldr	r4, [pc, #88]	; (9f4 <acq_isr()+0xa8>)
     99a:	ldr	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     99c:	ldr	r5, [pc, #88]	; (9f8 <acq_isr()+0xac>)
{ procCount++;
     99e:	adds	r2, #1
     9a0:	str	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     9a2:	movs	r2, #0
     9a4:	ldrh	r0, [r5, #0]
     9a6:	ldr.w	r1, [r3, r2, lsl #3]
     9aa:	adds	r2, #1
     9ac:	sxth	r0, r0
     9ae:	cmp	r2, #128	; 0x80
     9b0:	asr.w	r1, r1, r0
     9b4:	str.w	r1, [r4], #4
     9b8:	bne.n	9a4 <acq_isr()+0x58>
  extractBuffer(acqBuffer,buffer);
  //int32_t nz=0;
  //for(int ii=0;ii<NSAMP;ii++) if(acqBuffer[ii]==-1) nz++;
  //if(nz>0) Serial.println(nz);
  //
  if(proc==0)
     9ba:	ldr	r2, [pc, #64]	; (9fc <acq_isr()+0xb0>)
     9bc:	ldrh	r3, [r2, #0]
     9be:	sxth	r3, r3
     9c0:	cbnz	r3, 9d4 <acq_isr()+0x88>
  { if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     9c2:	ldr	r0, [pc, #48]	; (9f4 <acq_isr()+0xa8>)
     9c4:	bl	2d24 <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     9c8:	cbnz	r0, 9d2 <acq_isr()+0x86>
     9ca:	ldr	r2, [pc, #52]	; (a00 <acq_isr()+0xb4>)
     9cc:	ldr	r3, [r2, #0]
     9ce:	adds	r3, #1
     9d0:	str	r3, [r2, #0]
  }
     9d2:	pop	{r3, r4, r5, pc}
  else if(proc==1)
     9d4:	ldrh	r3, [r2, #0]
     9d6:	sxth	r3, r3
     9d8:	cmp	r3, #1
     9da:	bne.n	9d2 <acq_isr()+0x86>
   if(!compress((void *)acqBuffer)) procMiss++;
     9dc:	ldr	r0, [pc, #20]	; (9f4 <acq_isr()+0xa8>)
     9de:	bl	39ac <compress(void*)>
     9e2:	b.n	9c8 <acq_isr()+0x7c>
     9e4:	.word	0x2002c424
     9e8:	.word	0x400e8000
     9ec:	.word	0x20200400
     9f0:	.word	0x2002d0a4
     9f4:	.word	0x2002cc40
     9f8:	.word	0x2002d8b4
     9fc:	.word	0x2002d810
     a00:	.word	0x2002d0a8
     a04:	.word	0x00000000

00000a08 <setAudioFrequency(int)>:
  {
     a08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     a0c:	ldr.w	r9, [pc, #332]	; b5c <setAudioFrequency(int)+0x154>
     a10:	movs	r2, #5
     a12:	mov	r5, r0
     a14:	ldr	r1, [pc, #312]	; (b50 <setAudioFrequency(int)+0x148>)
     a16:	ldr.w	r3, [r9]
     a1a:	mov	r0, r9
     a1c:	ldr	r3, [r3, #4]
     a1e:	vpush	{d8}
     a22:	sub	sp, #12
     a24:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     a26:	movs	r1, #128	; 0x80
     a28:	mov	r0, r9
     a2a:	bl	c47a <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     a2e:	mov	r0, r9
     a30:	bl	c48c <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     a34:	movs	r3, #26
     a36:	lsls	r1, r5, #7
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     a38:	ldr	r0, [pc, #280]	; (b54 <setAudioFrequency(int)+0x14c>)
    {   n0++;
     a3a:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     a3c:	mov	r2, r1
        n1=0;
     a3e:	movs	r4, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     a40:	mul.w	ip, r0, r3
        {   n1++; 
     a44:	mov	r6, r4
     a46:	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     a48:	sdiv	r8, ip, r2
     a4c:	add.w	r7, r8, #1
        } while ((n2>64) && (n1<=8));
     a50:	cmp	r7, #64	; 0x40
     a52:	ble.n	a60 <setAudioFrequency(int)+0x58>
     a54:	cmp	r4, #9
     a56:	add	r2, r1
     a58:	bne.n	a44 <setAudioFrequency(int)+0x3c>
    } while ((n2>64 && n0<54));
     a5a:	cmp	r3, #54	; 0x36
     a5c:	bne.n	a3a <setAudioFrequency(int)+0x32>
     a5e:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     a60:	mov	r2, r5
     a62:	ldr	r1, [pc, #244]	; (b58 <setAudioFrequency(int)+0x150>)
     a64:	ldr	r0, [pc, #244]	; (b5c <setAudioFrequency(int)+0x154>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     a66:	and.w	r8, r8, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a6a:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     a6c:	strd	r4, r7, [sp]
     a70:	bl	c4c4 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a74:	vmov	s15, r5
							  return write((const uint8_t *)str, strlen(str)); }
     a78:	ldr.w	r3, [r9]
     a7c:	movs	r2, #3
     a7e:	vcvt.f64.s32	d7, s15
     a82:	ldr	r1, [pc, #220]	; (b60 <setAudioFrequency(int)+0x158>)
     a84:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a86:	and.w	r6, r6, #448	; 0x1c0
     a8a:	ldr	r0, [pc, #208]	; (b5c <setAudioFrequency(int)+0x154>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a8c:	vldr	d6, [pc, #168]	; b38 <setAudioFrequency(int)+0x130>
     a90:	vmul.f64	d7, d7, d6
     a94:	vmov	s13, r4
     a98:	vcvt.f64.s32	d6, s13
     a9c:	vmul.f64	d7, d7, d6
     aa0:	vmov	s13, r7
     aa4:	vcvt.f64.s32	d6, s13
     aa8:	vmul.f64	d7, d7, d6
     aac:	vldr	d6, [pc, #144]	; b40 <setAudioFrequency(int)+0x138>
     ab0:	vdiv.f64	d8, d7, d6
     ab4:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     ab6:	movs	r1, #2
     ab8:	ldr	r0, [pc, #160]	; (b5c <setAudioFrequency(int)+0x154>)
     aba:	vmov.f64	d0, d8
     abe:	bl	c588 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     ac2:	ldr	r0, [pc, #152]	; (b5c <setAudioFrequency(int)+0x154>)
     ac4:	bl	c48c <Print::println()>
    int c0 = C;
     ac8:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     acc:	movw	r2, #10000	; 0x2710
    int c0 = C;
     ad0:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     ad4:	mul.w	r3, r2, r0
     ad8:	vmov	s14, r3
     adc:	vldr	d6, [pc, #104]	; b48 <setAudioFrequency(int)+0x140>
     ae0:	vcvt.f64.s32	d7, s14
     ae4:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     ae8:	vcvt.s32.f64	s15, d7
     aec:	vmov	r1, s15
     af0:	bl	11e48 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     af4:	ldr	r2, [pc, #108]	; (b64 <setAudioFrequency(int)+0x15c>)
     af6:	ldr	r3, [r2, #28]
     af8:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     afc:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b00:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b02:	ldr	r3, [r2, #40]	; 0x28
     b04:	bic.w	r3, r3, #510	; 0x1fe
     b08:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     b0c:	orr.w	r3, r3, r8
     b10:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b12:	str	r3, [r2, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     b14:	sub.w	r2, r2, #327680	; 0x50000
     b18:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     b1a:	bic.w	r3, r3, #524288	; 0x80000
     b1e:	bic.w	r3, r3, #7
     b22:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     b26:	str	r3, [r2, #4]
  }
     b28:	add	sp, #12
     b2a:	vpop	{d8}
     b2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     b32:	nop
     b34:	nop.w
     b38:	.word	0x00000000
     b3c:	.word	0x40600000
     b40:	.word	0x00000000
     b44:	.word	0x4176e360
     b48:	.word	0x00000000
     b4c:	.word	0x40c38800
     b50:	.word	0x20000cde
     b54:	.word	0x016e3600
     b58:	.word	0x20000ce4
     b5c:	.word	0x20001c28
     b60:	.word	0x20000d01
     b64:	.word	0x400fc000

00000b68 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b68:	ldr	r2, [pc, #100]	; (bd0 <i2s_setup()+0x68>)
     b6a:	ldr	r3, [r2, #124]	; 0x7c
  {
     b6c:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b6e:	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b72:	ldr	r4, [pc, #96]	; (bd4 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b74:	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b76:	ldr.w	r3, [r4, #136]	; 0x88
     b7a:	cmp	r3, #0
     b7c:	blt.n	bce <i2s_setup()+0x66>
    int fs = fsamp;
     b7e:	ldr	r3, [pc, #88]	; (bd8 <i2s_setup()+0x70>)
     b80:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     b82:	bl	a08 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     b86:	ldr	r3, [pc, #84]	; (bdc <i2s_setup()+0x74>)
     b88:	movs	r2, #3
     b8a:	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     b8e:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     b92:	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     b96:	str.w	r2, [r3, #380]	; 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     b9a:	movs	r2, #2
     b9c:	str.w	r2, [r3, #1428]	; 0x594
    I2S1_RMR = 0;
     ba0:	movs	r3, #0
     ba2:	str.w	r3, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     ba6:	movs	r3, #4
     ba8:	str.w	r3, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     bac:	mov.w	r3, #83886080	; 0x5000000
     bb0:	str.w	r3, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     bb4:	mov.w	r3, #65536	; 0x10000
     bb8:	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     bbc:	ldr	r3, [pc, #32]	; (be0 <i2s_setup()+0x78>)
     bbe:	str.w	r3, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     bc2:	ldr	r3, [pc, #32]	; (be4 <i2s_setup()+0x7c>)
     bc4:	str.w	r3, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     bc8:	ldr	r3, [pc, #28]	; (be8 <i2s_setup()+0x80>)
     bca:	str.w	r3, [r4, #136]	; 0x88
  }
     bce:	pop	{r4, pc}
     bd0:	.word	0x400fc000
     bd4:	.word	0x40384000
     bd8:	.word	0x20001e0c
     bdc:	.word	0x401f8000
     be0:	.word	0x00011f1b
     be4:	.word	0x1f1f1f00
     be8:	.word	0x92000001

00000bec <dma_setup()>:
  {
     bec:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     bee:	ldr	r4, [pc, #128]	; (c70 <dma_setup()+0x84>)
     bf0:	movs	r1, #1
     bf2:	mov	r0, r4
     bf4:	bl	c21c <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     bf8:	ldr	r3, [r4, #0]
     bfa:	ldr	r2, [pc, #120]	; (c74 <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     bfc:	ldr	r1, [pc, #120]	; (c78 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     bfe:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     c00:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     c02:	ldr	r0, [pc, #120]	; (c7c <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     c04:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     c06:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     c08:	ldr	r0, [pc, #116]	; (c80 <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     c0a:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     c0e:	mov.w	r2, #512	; 0x200
    dma.TCD->SLAST = 0;
     c12:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     c14:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     c16:	sub.w	r2, r2, #2560	; 0xa00
    dma.TCD->SLAST = 0;
     c1a:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     c1c:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     c1e:	ldrh	r2, [r3, #22]
     c20:	uxth	r2, r2
     c22:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     c24:	movs	r2, #6
     c26:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     c28:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     c2a:	ldr	r2, [pc, #88]	; (c84 <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     c2c:	lsls	r3, r3, #2
     c2e:	add.w	r3, r3, #1073741824	; 0x40000000
     c32:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     c36:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     c38:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     c3a:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     c3c:	ldr	r2, [pc, #72]	; (c88 <dma_setup()+0x9c>)
     c3e:	add.w	r1, r3, #16
     c42:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c46:	asrs	r2, r3, #5
     c48:	and.w	r0, r3, #31
     c4c:	movs	r1, #1
     c4e:	add.w	r2, r2, #939538432	; 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     c52:	add.w	r3, r3, #3758096384	; 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c56:	lsls	r1, r0
     c58:	adds	r2, #64	; 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     c5a:	add.w	r3, r3, #58368	; 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c5e:	lsls	r2, r2, #2
     c60:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     c62:	movs	r2, #96	; 0x60
     c64:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     c66:	ldr	r3, [pc, #36]	; (c8c <dma_setup()+0xa0>)
     c68:	ldrb	r2, [r4, #4]
     c6a:	strb	r2, [r3, #27]
  }
     c6c:	pop	{r4, pc}
     c6e:	nop
     c70:	.word	0x2002c424
     c74:	.word	0x403840a0
     c78:	.word	0x02020000
     c7c:	.word	0x20200000
     c80:	.word	0x0000094d
     c84:	.word	0x80000013
     c88:	.word	0x20002000
     c8c:	.word	0x400e8000

00000c90 <acqModifyFrequency(unsigned long)>:
  {
     c90:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     c92:	ldr	r4, [pc, #32]	; (cb4 <acqModifyFrequency(unsigned long)+0x24>)
     c94:	ldr.w	r3, [r4, #136]	; 0x88
     c98:	bic.w	r3, r3, #2415919104	; 0x90000000
     c9c:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     ca0:	bl	a08 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     ca4:	ldr.w	r3, [r4, #136]	; 0x88
     ca8:	orr.w	r3, r3, #2415919104	; 0x90000000
     cac:	str.w	r3, [r4, #136]	; 0x88
  }
     cb0:	pop	{r4, pc}
     cb2:	nop
     cb4:	.word	0x40384000

00000cb8 <_GLOBAL__sub_I_procCount>:
		begin();
     cb8:	ldr	r0, [pc, #20]	; (cd0 <_GLOBAL__sub_I_procCount+0x18>)
     cba:	movs	r1, #0

  void acqStop(void)
  {
    i2s_stop();
    adc_exit();
     cbc:	push	{r3, lr}
     cbe:	bl	c21c <DMAChannel::begin(bool)>
  static DMAChannel dma;
     cc2:	ldr	r2, [pc, #16]	; (cd4 <_GLOBAL__sub_I_procCount+0x1c>)
     cc4:	ldr	r1, [pc, #16]	; (cd8 <_GLOBAL__sub_I_procCount+0x20>)
     cc6:	ldr	r0, [pc, #8]	; (cd0 <_GLOBAL__sub_I_procCount+0x18>)
     cc8:	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     ccc:	b.w	c6b8 <__aeabi_atexit>
     cd0:	.word	0x2002c424
     cd4:	.word	0x20001c40
     cd8:	.word	0x00000941

00000cdc <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
     cdc:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     cde:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
     ce0:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ce2:	cbz	r5, cee <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
     ce4:	cbnz	r3, cf8 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
     ce6:	mov	r0, r5
  }
     ce8:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     cea:	b.w	6fda <FatFile::seekSet(unsigned long)>
     cee:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
     cf0:	cbz	r0, cf8 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
     cf2:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     cf4:	b.w	5950 <ExFatFile::seekSet(unsigned long long)>
  }
     cf8:	pop	{r4, r5}
     cfa:	bx	lr

00000cfc <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     cfc:	push	{r4}
    *name = 0;
     cfe:	movs	r4, #0
     d00:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     d02:	ldr	r3, [r0, #56]	; 0x38
     d04:	cbz	r3, d10 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
     d06:	mov	r0, r3
  }
     d08:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     d0c:	b.w	6c98 <FatFile::getName(char*, unsigned int)>
     d10:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     d12:	cbz	r0, d1c <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     d14:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     d18:	b.w	555c <ExFatFile::getName8(char*, unsigned int)>
     d1c:	ldr.w	r4, [sp], #4
     d20:	bx	lr

00000d22 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     d22:	ldr	r3, [r0, #56]	; 0x38
     d24:	cbz	r3, d2c <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]+0xa>
     d26:	mov	r0, r3
     d28:	b.w	7396 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     d2c:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     d2e:	cbz	r0, d34 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]+0x12>
     d30:	b.w	56ba <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
  }
     d34:	bx	lr

00000d36 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     d36:	push	{r4, lr}
     d38:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     d3a:	movs	r3, #0
     d3c:	movs	r2, #10
     d3e:	bl	c4de <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     d42:	mov	r0, r4
     d44:	ldmia.w	sp!, {r4, lr}
     d48:	b.w	c48c <Print::println()>

00000d4c <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     d4c:	push	{r0, r1, r4, lr}
     d4e:	mov	r4, r0
     d50:	cbz	r1, d6c <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     d52:	mov	r0, r1
     d54:	str	r1, [sp, #4]
     d56:	bl	eb40 <strlen>
     d5a:	ldr	r3, [r4, #0]
     d5c:	mov	r2, r0
     d5e:	ldr	r1, [sp, #4]
     d60:	ldr	r3, [r3, #4]
     d62:	mov	r0, r4
     d64:	add	sp, #8
     d66:	ldmia.w	sp!, {r4, lr}
     d6a:	bx	r3
     d6c:	add	sp, #8
     d6e:	pop	{r4, pc}

00000d70 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     d70:	push	{r4, lr}
     d72:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     d74:	bl	d4c <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     d78:	mov	r0, r4
     d7a:	ldmia.w	sp!, {r4, lr}
     d7e:	b.w	c48c <Print::println()>
	...

00000d84 <dbgPrint(unsigned short)>:
#endif

#define DBG_FILE "Storage.cpp"

#if USE_DBG_MACROS==1
  static void dbgPrint(uint16_t line) {
     d84:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     d86:	ldr	r4, [pc, #44]	; (db4 <dbgPrint(unsigned short)+0x30>)
     d88:	mov	r5, r0
     d8a:	ldr	r1, [pc, #44]	; (db8 <dbgPrint(unsigned short)+0x34>)
     d8c:	mov	r0, r4
     d8e:	bl	d4c <Print::write(char const*) [clone .isra.0]>
     d92:	ldr	r1, [pc, #40]	; (dbc <dbgPrint(unsigned short)+0x38>)
     d94:	mov	r0, r4
     d96:	bl	d4c <Print::write(char const*) [clone .isra.0]>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     d9a:	movs	r0, #46	; 0x2e
     d9c:	bl	a690 <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     da0:	mov	r1, r5
     da2:	mov	r0, r4
     da4:	bl	c47a <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     da8:	mov	r0, r4
    Serial.print(F("DBG_FAIL: "));
    Serial.print(F(DBG_FILE));
    Serial.write('.');
    Serial.println(line);
  }
     daa:	ldmia.w	sp!, {r3, r4, r5, lr}
     dae:	b.w	c48c <Print::println()>
     db2:	nop
     db4:	.word	0x20001c28
     db8:	.word	0x20000fd5
     dbc:	.word	0x20000fe0

00000dc0 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     dc0:	ldr.w	r3, [r0, #1152]	; 0x480
     dc4:	cbz	r3, dd2 <FsVolume::bytesPerCluster() const+0x12>
     dc6:	ldrb	r3, [r3, #6]
     dc8:	mov.w	r0, #512	; 0x200
     dcc:	lsls	r0, r3
     dce:	uxth	r0, r0
     dd0:	bx	lr
     dd2:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     dd6:	cbz	r0, ddc <FsVolume::bytesPerCluster() const+0x1c>
     dd8:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
     ddc:	bx	lr

00000dde <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     dde:	ldr.w	r3, [r0, #1152]	; 0x480
     de2:	cbz	r3, dea <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     de4:	ldr	r0, [r3, #28]
     de6:	subs	r0, #1
     de8:	bx	lr
     dea:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     dee:	cbz	r0, df4 <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     df0:	ldr.w	r0, [r0, #1072]	; 0x430
  }
     df4:	bx	lr

00000df6 <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     df6:	ldr.w	r3, [r0, #1152]	; 0x480
  bool rename(const char *oldPath, const char *newPath) {
     dfa:	push	{r4, r5, lr}
     dfc:	mov	r5, r1
     dfe:	sub	sp, #68	; 0x44
     e00:	mov	r4, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     e02:	cbz	r3, e28 <FsVolume::rename(char const*, char const*)+0x32>
  FatFile() {}
     e04:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     e06:	add.w	r1, r3, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     e0a:	add	r0, sp, #8
     e0c:	mov	r3, r2
     e0e:	str	r2, [sp, #8]
     e10:	mov	r2, r5
     e12:	str	r1, [sp, #4]
     e14:	bl	72b4 <FatFile::open(FatFile*, char const*, int)>
     e18:	ldr	r1, [sp, #4]
     e1a:	cbz	r0, e24 <FsVolume::rename(char const*, char const*)+0x2e>
     e1c:	mov	r2, r4
     e1e:	add	r0, sp, #8
     e20:	bl	7574 <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     e24:	add	sp, #68	; 0x44
     e26:	pop	{r4, r5, pc}
     e28:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     e2c:	cmp	r0, #0
     e2e:	beq.n	e24 <FsVolume::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     e30:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     e34:	mov	r2, r5
     e36:	add	r0, sp, #8
  ExFatFile() {}
     e38:	str	r3, [sp, #56]	; 0x38
     e3a:	str	r1, [sp, #4]
     e3c:	bl	5d80 <ExFatFile::open(ExFatFile*, char const*, int)>
     e40:	ldr	r1, [sp, #4]
     e42:	cbnz	r0, e48 <FsVolume::rename(char const*, char const*)+0x52>
     e44:	movs	r0, #0
     e46:	b.n	e24 <FsVolume::rename(char const*, char const*)+0x2e>
     e48:	mov	r2, r4
     e4a:	add	r0, sp, #8
     e4c:	bl	677c <ExFatFile::rename(ExFatFile*, char const*)>
     e50:	cmp	r0, #0
     e52:	beq.n	e44 <FsVolume::rename(char const*, char const*)+0x4e>
     e54:	b.n	e24 <FsVolume::rename(char const*, char const*)+0x2e>

00000e56 <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     e56:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
     e58:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     e5a:	cbz	r3, e74 <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
     e5c:	ldrb	r0, [r3, #0]
     e5e:	ands.w	r0, r0, #8
     e62:	ittt	ne
     e64:	ldrne	r0, [r3, #28]
     e66:	ldrne	r3, [r3, #20]
     e68:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
     e6a:	cmp	r0, #0
     e6c:	it	lt
     e6e:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
     e72:	pop	{r4, pc}
     e74:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->available() : 0;
     e76:	cmp	r0, #0
     e78:	beq.n	e72 <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e7a:	ldrb.w	r3, [r0, #49]	; 0x31
     e7e:	ands.w	r3, r3, #8
     e82:	beq.n	ea2 <FsBaseFile::available() const+0x4c>
     e84:	ldrd	r1, r3, [r0, #16]
     e88:	ldrd	r2, r4, [r0]
     e8c:	subs	r0, r1, r2
     e8e:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     e92:	cmp.w	r0, #2147483648	; 0x80000000
     e96:	sbcs.w	r3, r3, #0
     e9a:	it	cs
     e9c:	mvncs.w	r0, #2147483648	; 0x80000000
     ea0:	b.n	e72 <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     ea2:	mov	r0, r3
     ea4:	b.n	e92 <FsBaseFile::available() const+0x3c>

00000ea6 <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     ea6:	ldr	r3, [r0, #56]	; 0x38
     ea8:	cbz	r3, eb8 <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     eaa:	ldrb	r3, [r3, #0]
     eac:	tst.w	r3, #112	; 0x70
           m_xFile ? m_xFile->isDir() : false;
     eb0:	ite	ne
     eb2:	movne	r0, #1
     eb4:	moveq	r0, #0
  }
     eb6:	bx	lr
     eb8:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->isDir() : false;
     eba:	cmp	r0, #0
     ebc:	beq.n	eb6 <FsBaseFile::isDir() const+0x10>
     ebe:	ldrb.w	r3, [r0, #49]	; 0x31
     ec2:	tst.w	r3, #80	; 0x50
     ec6:	b.n	eb0 <FsBaseFile::isDir() const+0xa>

00000ec8 <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     ec8:	ldr	r3, [r0, #56]	; 0x38
     eca:	cbnz	r3, ed6 <FsBaseFile::isOpen() const+0xe>
     ecc:	ldr	r0, [r0, #60]	; 0x3c
     ece:	subs	r0, #0
     ed0:	it	ne
     ed2:	movne	r0, #1
     ed4:	bx	lr
     ed6:	movs	r0, #1
     ed8:	bx	lr

00000eda <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     eda:	ldr	r3, [r0, #56]	; 0x38
     edc:	cbz	r3, ee4 <FsBaseFile::read(void*, unsigned int)+0xa>
     ede:	mov	r0, r3
     ee0:	b.w	6df0 <FatFile::read(void*, unsigned int)>
     ee4:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     ee6:	cbz	r0, eec <FsBaseFile::read(void*, unsigned int)+0x12>
     ee8:	b.w	57a0 <ExFatFile::read(void*, unsigned int)>
  }
     eec:	mov.w	r0, #4294967295
     ef0:	bx	lr
	...

00000ef4 <FsFile::FsFile()>:
     ef4:	movs	r2, #0
     ef6:	mov.w	r1, #1000	; 0x3e8
     efa:	strb	r2, [r0, #12]
     efc:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     f00:	strd	r2, r2, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f04:	ldr	r2, [pc, #4]	; (f0c <FsFile::FsFile()+0x18>)
     f06:	str	r2, [r0, #0]
     f08:	bx	lr
     f0a:	nop
     f0c:	.word	0x200004f4

00000f10 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     f10:	ldr	r3, [pc, #16]	; (f24 <FsFile::~FsFile()+0x14>)
     f12:	push	{r4, lr}
     f14:	mov	r4, r0
     f16:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     f1a:	bl	8484 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f1e:	mov	r0, r4
     f20:	pop	{r4, pc}
     f22:	nop
     f24:	.word	0x2000042c

00000f28 <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     f28:	add.w	r1, r0, r1, lsl #2
     f2c:	ldr	r3, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     f2e:	ldr.w	r1, [r3, #1152]	; 0x480
     f32:	push	{lr}
     f34:	sub	sp, #60	; 0x3c
     f36:	cbz	r1, f4e <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     f38:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     f3a:	add.w	r1, r1, #1096	; 0x448
     f3e:	mov	r0, sp
     f40:	str	r3, [sp, #0]
     f42:	movs	r3, #1
     f44:	bl	74d0 <FatFile::mkdir(FatFile*, char const*, bool)>
     f48:	add	sp, #60	; 0x3c
     f4a:	ldr.w	pc, [sp], #4
     f4e:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f52:	cmp	r0, #0
     f54:	beq.n	f48 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     f56:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
     f58:	movs	r3, #1
     f5a:	add.w	r1, r0, #1096	; 0x448
     f5e:	mov	r0, sp
     f60:	bl	66be <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f64:	b.n	f48 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000f68 <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     f68:	push	{r4, r5, lr}
     f6a:	mov	r4, r0
     f6c:	sub	sp, #68	; 0x44
     f6e:	mov	r5, r1
     f70:	ldr	r0, [pc, #84]	; (fc8 <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     f72:	mov	r1, r2
     f74:	str	r2, [sp, #4]
     f76:	bl	d70 <Print::println(char const*) [clone .isra.0]>
    return m_fVol ? m_fVol->remove(path) :
     f7a:	ldr	r2, [sp, #4]
     f7c:	add.w	r1, r4, r5, lsl #2
     f80:	ldr	r3, [r1, #84]	; 0x54
     f82:	ldr.w	r1, [r3, #1152]	; 0x480
     f86:	cbz	r1, fa0 <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
     f88:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f8a:	add	r0, sp, #8
     f8c:	str	r3, [sp, #8]
     f8e:	movs	r3, #1
     f90:	bl	7352 <FatFile::open(FatVolume*, char const*, int)>
     f94:	cbz	r0, f9c <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f96:	add	r0, sp, #8
     f98:	bl	83cc <FatFile::remove()>
     f9c:	add	sp, #68	; 0x44
     f9e:	pop	{r4, r5, pc}
     fa0:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
     fa4:	cmp	r0, #0
     fa6:	beq.n	f9c <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fa8:	str	r1, [sp, #56]	; 0x38
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     faa:	movs	r3, #1
     fac:	mov	r1, r0
     fae:	add	r0, sp, #8
     fb0:	bl	5e46 <ExFatFile::open(ExFatVolume*, char const*, int)>
     fb4:	cbnz	r0, fba <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
     fb6:	movs	r0, #0
     fb8:	b.n	f9c <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fba:	add	r0, sp, #8
     fbc:	bl	63c4 <ExFatFile::remove()>
     fc0:	cmp	r0, #0
     fc2:	beq.n	fb6 <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     fc4:	b.n	f9c <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fc6:	nop
     fc8:	.word	0x20001c28

00000fcc <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
     fcc:	add.w	r1, r0, r1, lsl #2
     fd0:	ldr	r3, [r1, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
     fd2:	ldr.w	r1, [r3, #1152]	; 0x480
     fd6:	push	{lr}
     fd8:	sub	sp, #60	; 0x3c
     fda:	cbz	r1, ff4 <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
     fdc:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fde:	mov	r0, sp
     fe0:	str	r3, [sp, #0]
     fe2:	bl	7352 <FatFile::open(FatVolume*, char const*, int)>
     fe6:	cbz	r0, fee <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     fe8:	mov	r0, sp
     fea:	bl	707a <FatFile::rmdir()>
     fee:	add	sp, #60	; 0x3c
     ff0:	ldr.w	pc, [sp], #4
     ff4:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
     ff8:	cmp	r0, #0
     ffa:	beq.n	fee <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     ffc:	mov	r3, r1
     ffe:	str	r1, [sp, #48]	; 0x30
    1000:	mov	r1, r0
    1002:	mov	r0, sp
    1004:	bl	5e46 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1008:	cbnz	r0, 100e <mSD_Base::sd_rmdir(unsigned long, char*)+0x42>
    100a:	movs	r0, #0
    100c:	b.n	fee <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    100e:	mov	r0, sp
    1010:	bl	6450 <ExFatFile::rmdir()>
    1014:	cmp	r0, #0
    1016:	beq.n	100a <mSD_Base::sd_rmdir(unsigned long, char*)+0x3e>
    1018:	b.n	fee <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>

0000101a <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    101a:	movs	r0, #0
    101c:	bx	lr

0000101e <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    101e:	movs	r0, #1
    1020:	bx	lr

00001022 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
    1022:	add.w	r1, r0, r1, lsl #2

  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
    1026:	push	{r3, r4, r5, lr}
    1028:	ldr	r5, [r1, #84]	; 0x54
    102a:	mov	r0, r5
    102c:	bl	dde <FsVolume::clusterCount() const>
    1030:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1032:	mov	r0, r5
    1034:	bl	dc0 <FsVolume::bytesPerCluster() const>
    1038:	umull	r0, r1, r4, r0
    103c:	pop	{r3, r4, r5, pc}

0000103e <MTPStorage_SD::CloseIndex()>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }

  void MTPStorage_SD::CloseIndex()
  {
    103e:	push	{r3, r4, r5, lr}
    mtp_lock_storage(true);
    if(index_.isOpen()) {index_.close();}
    1040:	add.w	r5, r0, #180	; 0xb4
  {
    1044:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
    1046:	mov	r0, r5
    1048:	bl	ec8 <FsBaseFile::isOpen() const>
    104c:	cbz	r0, 1054 <MTPStorage_SD::CloseIndex()+0x16>
    104e:	mov	r0, r5
    1050:	bl	8484 <FsBaseFile::close()>
    mtp_lock_storage(false);
    index_generated = false;
    1054:	movs	r3, #0
    1056:	strb.w	r3, [r4, #424]	; 0x1a8
    index_entries_ = 0;
    105a:	str.w	r3, [r4, #420]	; 0x1a4
  }
    105e:	pop	{r3, r4, r5, pc}

00001060 <MTPStorage_SD::OpenIndex()>:

  void MTPStorage_SD::OpenIndex() 
  { 
    1060:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
    1062:	add.w	r5, r0, #180	; 0xb4
  { 
    1066:	sub	sp, #84	; 0x54
    1068:	mov	r4, r0
    if(index_.isOpen()) return; // only once
    106a:	mov	r0, r5
    106c:	bl	ec8 <FsBaseFile::isOpen() const>
    1070:	cbnz	r0, 10b8 <MTPStorage_SD::OpenIndex()+0x58>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    1072:	ldr	r2, [pc, #72]	; (10bc <MTPStorage_SD::OpenIndex()+0x5c>)
    1074:	movw	r3, #514	; 0x202
    1078:	ldr	r1, [r4, #84]	; 0x54
    107a:	mov	r0, sp
    107c:	bl	86b8 <FsVolume::open(char const*, int)>
class Print
    1080:	ldr	r3, [sp, #4]
    1082:	add	r1, sp, #16
    1084:	mov	r0, r5
    1086:	str.w	r3, [r4, #168]	; 0xa8
class Stream : public Print
    108a:	ldr	r3, [sp, #8]
    108c:	str.w	r3, [r4, #172]	; 0xac
    1090:	ldrb.w	r3, [sp, #12]
    1094:	strb.w	r3, [r4, #176]	; 0xb0
    1098:	bl	84ae <FsBaseFile::operator=(FsBaseFile const&)>
    //
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, (O_RDWR | O_CREAT));
    109c:	mov	r0, sp
    109e:	bl	f10 <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    10a2:	mov	r0, r5
    10a4:	bl	ec8 <FsBaseFile::isOpen() const>
    10a8:	cbnz	r0, 10b8 <MTPStorage_SD::OpenIndex()+0x58>
    10aa:	ldr	r1, [pc, #20]	; (10c0 <MTPStorage_SD::OpenIndex()+0x60>)
    10ac:	ldr	r0, [pc, #20]	; (10c4 <MTPStorage_SD::OpenIndex()+0x64>)
    mtp_lock_storage(false);
  }
    10ae:	add	sp, #84	; 0x54
    10b0:	ldmia.w	sp!, {r4, r5, lr}
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    10b4:	b.w	d70 <Print::println(char const*) [clone .isra.0]>
  }
    10b8:	add	sp, #84	; 0x54
    10ba:	pop	{r4, r5, pc}
    10bc:	.word	0x20001018
    10c0:	.word	0x20001026
    10c4:	.word	0x20001c28

000010c8 <MTPStorage_SD::ResetIndex()>:

  void MTPStorage_SD::ResetIndex() {
    10c8:	push	{r4, lr}
    10ca:	mov	r4, r0
    if(!index_.isOpen()) return;
    10cc:	adds	r0, #180	; 0xb4
    10ce:	bl	ec8 <FsBaseFile::isOpen() const>
    10d2:	cbz	r0, 10f2 <MTPStorage_SD::ResetIndex()+0x2a>
    CloseIndex();
    10d4:	mov	r0, r4
    10d6:	bl	103e <MTPStorage_SD::CloseIndex()>

    all_scanned_ = false;
    10da:	movs	r3, #0
    open_file_ = 0xFFFFFFFEUL;

    OpenIndex();
    10dc:	mov	r0, r4
    all_scanned_ = false;
    10de:	strb.w	r3, [r4, #425]	; 0x1a9
    open_file_ = 0xFFFFFFFEUL;
    10e2:	mvn.w	r3, #1
    10e6:	str.w	r3, [r4, #416]	; 0x1a0
  }
    10ea:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    10ee:	b.w	1060 <MTPStorage_SD::OpenIndex()>
  }
    10f2:	pop	{r4, pc}

000010f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    10f4:	push	{r0, r1, r2, r4, r5, lr}
    10f6:	mov	r4, r0
    10f8:	mov	r5, r1
    10fa:	str	r2, [sp, #4]
    10fc:	bl	1060 <MTPStorage_SD::OpenIndex()>
    mtp_lock_storage(true);
    index_.seekSet((sizeof(r) * i));
    1100:	add.w	r0, r4, #180	; 0xb4
    1104:	mov.w	r4, #280	; 0x118
    1108:	movs	r3, #0
    110a:	mul.w	r2, r4, r5
    110e:	str	r0, [sp, #0]
    1110:	bl	cdc <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    index_.write((char*)&r, sizeof(r));
    1114:	mov	r2, r4
    1116:	ldrd	r0, r1, [sp]
    111a:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
    mtp_lock_storage(false);
  }
    111e:	add	sp, #12
    1120:	pop	{r4, r5, pc}

00001122 <MTPStorage_SD::AppendIndexRecord(Record const&)>:

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1122:	push	{r4, lr}
    1124:	ldr.w	r4, [r0, #420]	; 0x1a4
    1128:	mov	r2, r1
    112a:	adds	r1, r4, #1
    112c:	str.w	r1, [r0, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    1130:	mov	r1, r4
    1132:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return new_record;
  }
    1136:	mov	r0, r4
    1138:	pop	{r4, pc}
	...

0000113c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    index_generated = true;
    113c:	movs	r3, #1
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    113e:	ldr	r2, [pc, #84]	; (1194 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x58>)
    1140:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    1142:	push	{r4, r5, r6, r7, lr}
    1144:	mov	r4, r0
    index_generated = true;
    1146:	strb.w	r3, [r0, #424]	; 0x1a8
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    114a:	sub	sp, #284	; 0x11c
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    114c:	movs	r5, #0
    sd_remove(0,indexFile);
    114e:	bl	f68 <mSD_Base::sd_remove(unsigned long, char const*)>
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    1152:	mov.w	r6, #4294967295
    num_storage = sd_getFSCount();
    1156:	ldr	r3, [r4, #0]
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    1158:	ldr	r7, [pc, #60]	; (1198 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    num_storage = sd_getFSCount();
    115a:	str.w	r3, [r4, #404]	; 0x194
    index_entries_ = 0;
    115e:	str.w	r5, [r4, #420]	; 0x1a4
    for(int ii=0; ii<num_storage; ii++)
    1162:	ldr.w	r3, [r4, #404]	; 0x194
    1166:	cmp	r5, r3
    1168:	blt.n	116e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x32>
      AppendIndexRecord(r);
    }
  }
    116a:	add	sp, #284	; 0x11c
    116c:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    116e:	movs	r3, #0
      strcpy(r.name, "/");
    1170:	mov	r1, r7
    1172:	add	r0, sp, #24
      r.store = ii; // 
    1174:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    1178:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    117a:	adds	r5, #1
      r.sibling = 0;
    117c:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    1180:	movs	r3, #1
    1182:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    1186:	bl	ea84 <strcpy>
      AppendIndexRecord(r);
    118a:	mov	r1, sp
    118c:	mov	r0, r4
    118e:	bl	1122 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    1192:	b.n	1162 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x26>
    1194:	.word	0x20001018
    1198:	.word	0x20000cbe

0000119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    119c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    119e:	mov.w	r7, #280	; 0x118
  {
    11a2:	mov	r4, r1
    11a4:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    11a6:	movs	r1, #0
    11a8:	mov	r2, r7
  {
    11aa:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    11ac:	bl	9f44 <memset>
    if (i > index_entries_) 
    11b0:	ldr.w	r3, [r4, #420]	; 0x1a4
    11b4:	cmp	r3, r6
    11b6:	bcc.n	11d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    OpenIndex();
    11b8:	mov	r0, r4
    11ba:	bl	1060 <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    11be:	add.w	r0, r4, #180	; 0xb4
    11c2:	mul.w	r2, r7, r6
    11c6:	movs	r3, #0
    11c8:	str	r0, [sp, #4]
    11ca:	bl	cdc <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    index_.read((char *)&ret, sizeof(ret));
    11ce:	mov	r2, r7
    11d0:	mov	r1, r5
    11d2:	ldr	r0, [sp, #4]
    11d4:	bl	eda <FsBaseFile::read(void*, unsigned int)>
  }
    11d8:	mov	r0, r5
    11da:	add	sp, #12
    11dc:	pop	{r4, r5, r6, r7, pc}
	...

000011e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    11e0:	push	{r4, r5, r6, lr}
    11e2:	sub	sp, #280	; 0x118
    11e4:	mov	r6, r0
    11e6:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    11e8:	mov	r2, r1
    11ea:	mov	r1, r0
    11ec:	mov	r0, sp
  {
    11ee:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    11f0:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    11f4:	ldr	r1, [sp, #0]
    11f6:	adds	r3, r1, #1
    11f8:	bne.n	120a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    11fa:	ldr	r1, [pc, #64]	; (123c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    11fc:	mov	r0, r4
    11fe:	bl	ea84 <strcpy>
      return tmp.store;
    1202:	ldrh.w	r0, [sp, #14]
  }
    1206:	add	sp, #280	; 0x118
    1208:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    120a:	mov	r3, r5
    120c:	mov	r2, r4
    120e:	mov	r0, r6
    1210:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    1214:	mov	r0, r4
    1216:	bl	eb40 <strlen>
    121a:	add	r0, r4
    121c:	ldrb.w	r3, [r0, #-1]
    1220:	cmp	r3, #47	; 0x2f
    1222:	beq.n	122e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    1224:	mov	r2, r5
    1226:	ldr	r1, [pc, #20]	; (123c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1228:	mov	r0, r4
    122a:	bl	e8d8 <strlcat>
      strlcat(out, tmp.name,len);
    122e:	mov	r2, r5
    1230:	add	r1, sp, #24
    1232:	mov	r0, r4
    1234:	bl	e8d8 <strlcat>
    1238:	b.n	1202 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    123a:	nop
    123c:	.word	0x20000cbe

00001240 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    1240:	ldr.w	r3, [r0, #416]	; 0x1a0
    1244:	cmp	r3, r1
  {
    1246:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    124a:	mov	r4, r0
    124c:	sub	sp, #336	; 0x150
    124e:	mov	r6, r1
    1250:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    1252:	bne.n	125c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    1254:	ldr.w	r3, [r0, #412]	; 0x19c
    1258:	cmp	r3, r2
    125a:	beq.n	12b4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    125c:	add.w	r8, r4, #260	; 0x104
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    1260:	mov.w	r3, #256	; 0x100
    1264:	add	r2, sp, #80	; 0x50
    1266:	mov	r1, r6
    1268:	mov	r0, r4
    126a:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    126e:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    1270:	mov	r0, r8
    1272:	bl	ec8 <FsBaseFile::isOpen() const>
    1276:	cbz	r0, 127e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    1278:	mov	r0, r8
    127a:	bl	8484 <FsBaseFile::close()>
    127e:	add.w	r7, r4, r7, lsl #2
    1282:	add	r2, sp, #80	; 0x50
    1284:	mov	r3, r5
    1286:	mov	r0, sp
    1288:	ldr	r1, [r7, #84]	; 0x54
    128a:	bl	86b8 <FsVolume::open(char const*, int)>
    128e:	ldr	r3, [sp, #4]
    1290:	add	r1, sp, #16
    1292:	mov	r0, r8
    1294:	str.w	r3, [r4, #248]	; 0xf8
    1298:	ldr	r3, [sp, #8]
    129a:	str.w	r3, [r4, #252]	; 0xfc
    129e:	ldrb.w	r3, [sp, #12]
    12a2:	strb.w	r3, [r4, #256]	; 0x100
    12a6:	bl	84ae <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    12aa:	mov	r0, sp
    12ac:	bl	f10 <FsFile::~FsFile()>
    mode_ = mode;
    12b0:	strd	r5, r6, [r4, #412]	; 0x19c
  }
    12b4:	add	sp, #336	; 0x150
    12b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000012ba <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    12ba:	ldrb.w	r3, [r0, #424]	; 0x1a8
    12be:	cbnz	r3, 12c4 <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    12c0:	b.w	113c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    12c4:	bx	lr

000012c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    12c6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    12ca:	cmp.w	r2, #4294967295
    12ce:	ite	ne
    12d0:	movne	r6, r2
    12d2:	moveq	r6, r1
    12d4:	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    12d8:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    12da:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    12dc:	mov	r2, r6
    12de:	mov	r0, sp
    12e0:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    12e4:	ldrb.w	r3, [sp, #12]
    12e8:	cmp	r3, #0
    12ea:	beq.n	13e4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
    12ec:	ldrb.w	r5, [sp, #13]
    12f0:	cmp	r5, #0
    12f2:	bne.n	13e4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
      OpenFileByIndex(i);
      if (!file_.isOpen()) return;
    12f4:	add.w	r8, r4, #260	; 0x104
      OpenFileByIndex(i);
    12f8:	mov	r0, r4
    12fa:	mov	r2, r5
    12fc:	mov	r1, r6
    12fe:	bl	1240 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    1302:	mov	r0, r8
    1304:	bl	ec8 <FsBaseFile::isOpen() const>
    1308:	cmp	r0, #0
    130a:	beq.n	13e4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    130c:	mov	r9, r5
    FsFile tmpFile;
    130e:	add	r0, sp, #280	; 0x118
    1310:	add.w	r7, r4, #340	; 0x154
    1314:	bl	ef4 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1318:	movs	r2, #0
    131a:	mov	r1, r8
    131c:	add	r0, sp, #296	; 0x128
    131e:	bl	8584 <FsBaseFile::openNext(FsBaseFile*, int)>
    1322:	ldr	r3, [sp, #284]	; 0x11c
    1324:	add	r1, sp, #296	; 0x128
    1326:	mov	r0, r7
    1328:	str.w	r3, [r4, #328]	; 0x148
    132c:	ldr	r3, [sp, #288]	; 0x120
    132e:	str.w	r3, [r4, #332]	; 0x14c
    1332:	ldrb.w	r3, [sp, #292]	; 0x124
    1336:	strb.w	r3, [r4, #336]	; 0x150
    133a:	bl	84ae <FsBaseFile::operator=(FsBaseFile const&)>
    
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
    133e:	add	r0, sp, #280	; 0x118
    1340:	bl	f10 <FsFile::~FsFile()>
        mtp_lock_storage(false);
        if(!child_.isOpen()) break;
    1344:	mov	r0, r7
    1346:	bl	ec8 <FsBaseFile::isOpen() const>
    134a:	cmp	r0, #0
    134c:	beq.n	13d2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>

        Record r;
        r.store = record.store;
    134e:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    1352:	mov	r0, r7
        r.parent = i;
    1354:	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    1356:	strh.w	r3, [sp, #294]	; 0x126
        r.sibling = sibling;
    135a:	str	r5, [sp, #288]	; 0x120
    135c:	bl	ea6 <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    1360:	strb.w	r0, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1364:	cbnz	r0, 13ba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf4>
    return m_fFile ? m_fFile->fileSize() :
    1366:	ldr.w	r3, [r4, #396]	; 0x18c
    136a:	cbz	r3, 13ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xe8>
    136c:	ldr	r3, [r3, #28]
        r.scanned = false;
        child_.getName(r.name,MAX_FILENAME_LEN);
    136e:	mov.w	r2, #256	; 0x100
    1372:	add	r1, sp, #304	; 0x130
    1374:	mov	r0, r7
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1376:	str	r3, [sp, #284]	; 0x11c
        r.scanned = false;
    1378:	strb.w	r9, [sp, #293]	; 0x125
        child_.getName(r.name,MAX_FILENAME_LEN);
    137c:	bl	cfc <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        child_.getCreateDateTime(&r.cpdate, &r.cptime);
    1380:	mov	r0, r7
    1382:	add.w	r2, sp, #298	; 0x12a
    1386:	add	r1, sp, #296	; 0x128
    1388:	bl	d22 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    138c:	ldr.w	r0, [r4, #396]	; 0x18c
    1390:	cbz	r0, 13be <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf8>
    1392:	add.w	r2, sp, #302	; 0x12e
    1396:	add	r1, sp, #300	; 0x12c
    1398:	bl	73b6 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
        child_.getModifyDateTime(&r.mpdate, &r.mptime);
        //
        sibling = AppendIndexRecord(r);
    139c:	add	r1, sp, #280	; 0x118
    139e:	mov	r0, r4
    13a0:	bl	1122 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    13a4:	mov	r5, r0
        child_.close();
    13a6:	mov	r0, r7
    13a8:	bl	8484 <FsBaseFile::close()>
      }
    13ac:	b.n	130e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    13ae:	ldr.w	r3, [r4, #400]	; 0x190
           m_xFile ? m_xFile->fileSize() : 0;
    13b2:	cmp	r3, #0
    13b4:	beq.n	136e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
  uint64_t fileSize() const {return m_validLength;}
    13b6:	ldr	r3, [r3, #16]
    13b8:	b.n	136e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    13ba:	movs	r3, #0
    13bc:	b.n	136e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    13be:	ldr.w	r0, [r4, #400]	; 0x190
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    13c2:	cmp	r0, #0
    13c4:	beq.n	139c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    13c6:	add.w	r2, sp, #302	; 0x12e
    13ca:	add	r1, sp, #300	; 0x12c
    13cc:	bl	56da <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    13d0:	b.n	139c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
      record.scanned = true;
    13d2:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    13d4:	mov	r2, sp
    13d6:	mov	r1, r6
    13d8:	mov	r0, r4
      record.scanned = true;
    13da:	strb.w	r3, [sp, #13]
      record.child = sibling;
    13de:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    13e0:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    13e4:	add.w	sp, sp, #564	; 0x234
    13e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000013ec <MTPStorage_SD::ScanAll(unsigned long)>:

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    13ec:	push	{r4, r5, r6, lr}
    13ee:	ldrb.w	r4, [r0, #425]	; 0x1a9
    13f2:	mov	r5, r0
    13f4:	mov	r6, r1
    13f6:	cbnz	r4, 140a <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    13f8:	movs	r3, #1
    13fa:	strb.w	r3, [r0, #425]	; 0x1a9

    GenerateIndex(store);
    13fe:	bl	12ba <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    1402:	ldr.w	r3, [r5, #420]	; 0x1a4
    1406:	cmp	r4, r3
    1408:	bcc.n	140c <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    140a:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    140c:	mov	r2, r4
    140e:	mov	r1, r6
    1410:	mov	r0, r5
    1412:	adds	r4, #1
    1414:	bl	12c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    1418:	b.n	1402 <MTPStorage_SD::ScanAll(unsigned long)+0x16>

0000141a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    141a:	push	{r4, r5, r6, lr}
    141c:	mov	r5, r2
    141e:	sub	sp, #280	; 0x118
    1420:	mov	r4, r0
    1422:	mov	r6, r1
    GenerateIndex(store);
    1424:	bl	12ba <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    1428:	cbz	r5, 1456 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3c>
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    142a:	cmp.w	r5, #4294967295
    142e:	it	eq
    1430:	moveq	r5, r6

      ScanDir(store, parent);
    1432:	mov	r1, r6
    1434:	mov	r0, r4
    1436:	mov	r2, r5
    1438:	bl	12c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    143c:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    143e:	mov	r2, r5
    1440:	mov	r1, r4
      follow_sibling_ = true;
    1442:	strb.w	r3, [r4, #432]	; 0x1b0
      next_ = ReadIndexRecord(parent).child;
    1446:	mov	r0, sp
    1448:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    144c:	ldr	r3, [sp, #4]
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    144e:	str.w	r3, [r4, #428]	; 0x1ac
    }
  }
    1452:	add	sp, #280	; 0x118
    1454:	pop	{r4, r5, r6, pc}
      ScanAll(store);
    1456:	mov	r1, r6
    1458:	mov	r0, r4
    145a:	bl	13ec <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    145e:	movs	r3, #1
      follow_sibling_ = false;
    1460:	strb.w	r5, [r4, #432]	; 0x1b0
      next_ = 1;
    1464:	b.n	144e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x34>

00001466 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    1466:	push	{r4, r5, lr}
    1468:	mov	r4, r0
    146a:	sub	sp, #284	; 0x11c
    while (true) 
    { if (next_ == 0) return 0;
    146c:	ldr.w	r5, [r4, #428]	; 0x1ac
    1470:	cbz	r5, 1490 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    1472:	mov	r2, r5
    1474:	mov	r1, r4
    1476:	mov	r0, sp
    1478:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    147c:	ldrb.w	r3, [r4, #432]	; 0x1b0
    1480:	cbz	r3, 1496 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    1482:	ldr	r3, [sp, #8]
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    1484:	str.w	r3, [r4, #428]	; 0x1ac
      }
      if (r.name[0]) return ret;
    1488:	ldrb.w	r3, [sp, #24]
    148c:	cmp	r3, #0
    148e:	beq.n	146c <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
    }
  }
    1490:	mov	r0, r5
    1492:	add	sp, #284	; 0x11c
    1494:	pop	{r4, r5, pc}
      { next_++;
    1496:	ldr.w	r1, [r4, #428]	; 0x1ac
        if (next_ >= index_entries_) next_ = 0;
    149a:	ldr.w	r2, [r4, #420]	; 0x1a4
      { next_++;
    149e:	adds	r1, #1
        if (next_ >= index_entries_) next_ = 0;
    14a0:	cmp	r1, r2
    14a2:	it	cc
    14a4:	movcc	r3, r1
    14a6:	b.n	1484 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1e>

000014a8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint64_t* size, uint32_t* parent, uint16_t *store, char *create, char *modify)
  {
    14a8:	push	{r4, r5, lr}
    14aa:	sub	sp, #308	; 0x134
    14ac:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    14ae:	mov	r2, r1
    14b0:	mov	r1, r0
    14b2:	add	r0, sp, #24
  {
    14b4:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    14b6:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    14ba:	add	r1, sp, #48	; 0x30
    14bc:	mov	r0, r5
    14be:	bl	ea84 <strcpy>
    *parent = r.parent;
    14c2:	ldr	r3, [sp, #320]	; 0x140
    14c4:	ldr	r2, [sp, #24]
    14c6:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    14c8:	ldrb.w	r3, [sp, #36]	; 0x24
    14cc:	cmp	r3, #0
    14ce:	bne.n	1550 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xa8>
    14d0:	ldr	r3, [sp, #28]
    *store = r.store;
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
          FS_HOUR(r.cptime),FS_MINUTE(r.cptime),FS_SECOND(r.cptime));
    14d2:	ldrh.w	r1, [sp, #42]	; 0x2a
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    14d6:	str	r3, [r4, #0]
    14d8:	movs	r3, #0
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    14da:	and.w	r0, r1, #31
    *store = r.store;
    14de:	ldrh.w	r2, [sp, #38]	; 0x26
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    14e2:	str	r3, [r4, #4]
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    14e4:	lsls	r0, r0, #1
    *store = r.store;
    14e6:	ldr	r3, [sp, #324]	; 0x144
    14e8:	strh	r2, [r3, #0]
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
    14ea:	ldrh.w	r2, [sp, #40]	; 0x28
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    14ee:	str	r0, [sp, #16]
    14f0:	ubfx	r0, r1, #5, #6
    14f4:	lsrs	r1, r1, #11
  return 1980 + (fatDate >> 9);
    14f6:	lsrs	r3, r2, #9
    14f8:	str	r0, [sp, #12]
    14fa:	str	r1, [sp, #8]
    14fc:	and.w	r1, r2, #31
    1500:	ubfx	r2, r2, #5, #4
    1504:	addw	r3, r3, #1980	; 0x7bc
    1508:	str	r1, [sp, #4]
    150a:	movs	r1, #32
    150c:	str	r2, [sp, #0]
    150e:	ldr	r0, [sp, #328]	; 0x148
    1510:	ldr	r2, [pc, #68]	; (1558 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xb0>)
    1512:	bl	e63c <sniprintf>
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
          FS_HOUR(r.mptime),FS_MINUTE(r.mptime),FS_SECOND(r.mptime));
    1516:	ldrh.w	r1, [sp, #46]	; 0x2e
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
    151a:	ldrh.w	r2, [sp, #44]	; 0x2c
  return 2*(fatTime & 0X1F);
    151e:	and.w	r0, r1, #31
  return 1980 + (fatDate >> 9);
    1522:	lsrs	r3, r2, #9
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
    1524:	lsls	r0, r0, #1
    1526:	addw	r3, r3, #1980	; 0x7bc
    152a:	str	r0, [sp, #16]
    152c:	ubfx	r0, r1, #5, #6
    1530:	lsrs	r1, r1, #11
    1532:	str	r0, [sp, #12]
    1534:	str	r1, [sp, #8]
    1536:	and.w	r1, r2, #31
    153a:	ubfx	r2, r2, #5, #4
    153e:	ldr	r0, [sp, #332]	; 0x14c
    1540:	str	r1, [sp, #4]
    1542:	movs	r1, #32
    1544:	str	r2, [sp, #0]
    1546:	ldr	r2, [pc, #16]	; (1558 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xb0>)
    1548:	bl	e63c <sniprintf>
  }
    154c:	add	sp, #308	; 0x134
    154e:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1550:	mov.w	r3, #4294967295
    1554:	b.n	14d2 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0x2a>
    1556:	nop
    1558:	.word	0x20000ffe

0000155c <MTPStorage_SD::GetSize(unsigned long)>:
    WriteIndexRecord(handle, r); 
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    155c:	push	{lr}
    155e:	sub	sp, #284	; 0x11c
    1560:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    1562:	mov	r1, r0
    1564:	mov	r0, sp
    1566:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    156a:	ldr	r0, [sp, #4]
    156c:	add	sp, #284	; 0x11c
    156e:	ldr.w	pc, [sp], #4

00001572 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:

  size_t MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    1572:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1574:	mov	r4, r0
    1576:	mov	r6, r2
    OpenFileByIndex(handle);
    1578:	movs	r2, #0
  {
    157a:	mov	r5, r3
    157c:	ldr	r7, [sp, #32]
    OpenFileByIndex(handle);
    157e:	bl	1240 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    mtp_lock_storage(true);
    file_.seekSet(pos);
    1582:	add.w	r0, r4, #260	; 0x104
    1586:	mov	r2, r6
    1588:	movs	r3, #0
    158a:	str	r0, [sp, #4]
    158c:	bl	cdc <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    file_.read(out,bytes);
    1590:	mov	r2, r7
    1592:	mov	r1, r5
    1594:	ldr	r0, [sp, #4]
    1596:	bl	eda <FsBaseFile::read(void*, unsigned int)>
    mtp_lock_storage(false);
    return bytes;
  }
    159a:	mov	r0, r7
    159c:	add	sp, #12
    159e:	pop	{r4, r5, r6, r7, pc}

000015a0 <MTPStorage_SD::removeFile(unsigned long, char*)>:

void MTPStorage_SD::removeFile(uint32_t store, char *file)
{ 
    15a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15a4:	mov	r5, r1
    15a6:	sub.w	sp, sp, #1016	; 0x3f8
    15aa:	add.w	r1, r0, r1, lsl #2
    15ae:	mov	r4, r0
    15b0:	movs	r3, #0
    15b2:	add	r0, sp, #8
    15b4:	ldr	r1, [r1, #84]	; 0x54
    15b6:	mov	r6, r2
    15b8:	bl	86b8 <FsVolume::open(char const*, int)>
    15bc:	add	r0, sp, #24
    15be:	bl	ea6 <FsBaseFile::isDir() const>
  char tname[2*MAX_FILENAME_LEN];
  char fname[MAX_FILENAME_LEN];
  FsFile f1=sd_open(store,file,O_READ);
  if(f1.isDirectory())
    15c2:	cmp	r0, #0
    15c4:	beq.n	1664 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc4>
  {
    FsFile f2;
    while((f2=f1.openNextFile()))
    { f2.getName(fname,MAX_FILENAME_LEN);
      snprintf(tname,strlen(tname),"%s/%s",file,fname);
    15c6:	ldr.w	r8, [pc, #168]	; 1670 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd0>
    FsFile f2;
    15ca:	add	r0, sp, #88	; 0x58
    15cc:	bl	ef4 <FsFile::FsFile()>
    FsFile tmpFile;
    15d0:	add	r0, sp, #168	; 0xa8
    15d2:	bl	ef4 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    15d6:	movs	r2, #0
    15d8:	add	r1, sp, #24
    15da:	add	r0, sp, #184	; 0xb8
    15dc:	bl	8584 <FsBaseFile::openNext(FsBaseFile*, int)>
    15e0:	ldr	r3, [sp, #172]	; 0xac
class StreamFile : public stream_t, public BaseFile {
    15e2:	add	r1, sp, #184	; 0xb8
    15e4:	add	r0, sp, #104	; 0x68
    15e6:	str	r3, [sp, #92]	; 0x5c
    15e8:	ldr	r3, [sp, #176]	; 0xb0
    15ea:	str	r3, [sp, #96]	; 0x60
    15ec:	ldrb.w	r3, [sp, #180]	; 0xb4
    15f0:	strb.w	r3, [sp, #100]	; 0x64
    15f4:	bl	84ae <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    15f8:	add	r0, sp, #104	; 0x68
    15fa:	bl	ec8 <FsBaseFile::isOpen() const>
    15fe:	mov	r7, r0
    while((f2=f1.openNextFile()))
    1600:	add	r0, sp, #168	; 0xa8
    1602:	bl	f10 <FsFile::~FsFile()>
    1606:	cbnz	r7, 1626 <MTPStorage_SD::removeFile(unsigned long, char*)+0x86>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    }
    sd_rmdir(store,file);
    1608:	mov	r2, r6
    160a:	mov	r1, r5
    160c:	mov	r0, r4
    160e:	bl	fcc <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    1612:	add	r0, sp, #88	; 0x58
    1614:	bl	f10 <FsFile::~FsFile()>
  else
  {
    sd_remove(store,file);
  }
}
    1618:	add	r0, sp, #8
    161a:	bl	f10 <FsFile::~FsFile()>
    161e:	add.w	sp, sp, #1016	; 0x3f8
    1622:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    1626:	add	r7, sp, #248	; 0xf8
    1628:	mov.w	r2, #256	; 0x100
    162c:	add	r0, sp, #104	; 0x68
    162e:	mov	r1, r7
    1630:	bl	cfc <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,strlen(tname),"%s/%s",file,fname);
    1634:	add	r0, sp, #504	; 0x1f8
    1636:	bl	eb40 <strlen>
    163a:	mov	r2, r8
    163c:	mov	r1, r0
    163e:	mov	r3, r6
    1640:	add	r0, sp, #504	; 0x1f8
    1642:	str	r7, [sp, #0]
    1644:	bl	e63c <sniprintf>
    return BaseFile::isDir();
    1648:	add	r0, sp, #104	; 0x68
    164a:	bl	ea6 <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    164e:	add	r2, sp, #504	; 0x1f8
    1650:	mov	r1, r5
    1652:	cbz	r0, 165c <MTPStorage_SD::removeFile(unsigned long, char*)+0xbc>
    1654:	mov	r0, r4
    1656:	bl	15a0 <MTPStorage_SD::removeFile(unsigned long, char*)>
    165a:	b.n	15d0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x30>
    165c:	mov	r0, r4
    165e:	bl	f68 <mSD_Base::sd_remove(unsigned long, char const*)>
    1662:	b.n	15d0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x30>
    sd_remove(store,file);
    1664:	mov	r2, r6
    1666:	mov	r1, r5
    1668:	mov	r0, r4
    166a:	bl	f68 <mSD_Base::sd_remove(unsigned long, char const*)>
    166e:	b.n	1618 <MTPStorage_SD::removeFile(unsigned long, char*)+0x78>
    1670:	.word	0x20000ff8

00001674 <MTPStorage_SD::DeleteObject(unsigned long)>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    1674:	adds	r3, r1, #1
  {
    1676:	push	{r4, r5, r6, r7, lr}
    1678:	mov	r4, r0
    167a:	subw	sp, sp, #1380	; 0x564
    167e:	mov	r5, r1
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    1680:	beq.n	16d0 <MTPStorage_SD::DeleteObject(unsigned long)+0x5c>

    // first create full filename
    char filename[MAX_FILENAME_LEN];
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    1682:	mov.w	r3, #256	; 0x100
    1686:	add	r2, sp, #280	; 0x118
    1688:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    168c:	mov	r2, r5
    168e:	mov	r1, r4
    1690:	add	r0, sp, #536	; 0x218
    1692:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    // remove file from storage (assume it is always working)
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    1696:	add	r2, sp, #280	; 0x118
    1698:	ldrh.w	r1, [sp, #550]	; 0x226
    169c:	mov	r0, r4
    169e:	bl	15a0 <MTPStorage_SD::removeFile(unsigned long, char*)>
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    16a2:	movs	r3, #0
    WriteIndexRecord(object, r);
    16a4:	add	r2, sp, #536	; 0x218
    16a6:	mov	r1, r5
    16a8:	mov	r0, r4
    r.name[0]=0;
    16aa:	strb.w	r3, [sp, #560]	; 0x230
    WriteIndexRecord(object, r);
    16ae:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    16b2:	ldr	r2, [sp, #536]	; 0x218
    16b4:	mov	r1, r4
    16b6:	add	r0, sp, #816	; 0x330
    16b8:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    16bc:	ldr	r6, [sp, #820]	; 0x334
    16be:	cmp	r6, r5
    16c0:	bne.n	16d8 <MTPStorage_SD::DeleteObject(unsigned long)+0x64>
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    16c2:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(r.parent, t);
    16c4:	add	r2, sp, #816	; 0x330
    16c6:	ldr	r1, [sp, #536]	; 0x218
      t.child = r.sibling;
    16c8:	str	r3, [sp, #820]	; 0x334
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    16ca:	mov	r0, r4
    16cc:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
    return 1;
  }
    16d0:	movs	r0, #1
    16d2:	addw	sp, sp, #1380	; 0x564
    16d6:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    16d8:	mov	r2, r6
    16da:	mov	r1, r4
    16dc:	add.w	r0, sp, #1096	; 0x448
    16e0:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    16e4:	ldr.w	r7, [sp, #1104]	; 0x450
    16e8:	cmp	r7, r5
    16ea:	bne.n	16fa <MTPStorage_SD::DeleteObject(unsigned long)+0x86>
      x.sibling = r.sibling;
    16ec:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(is, x);
    16ee:	add.w	r2, sp, #1096	; 0x448
    16f2:	mov	r1, r6
      x.sibling = r.sibling;
    16f4:	str.w	r3, [sp, #1104]	; 0x450
      WriteIndexRecord(is, x);
    16f8:	b.n	16ca <MTPStorage_SD::DeleteObject(unsigned long)+0x56>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    16fa:	mov	r2, r7
    16fc:	mov	r1, r4
    16fe:	mov	r0, sp
    1700:	mov	r6, r7
    1702:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1706:	mov.w	r2, #280	; 0x118
    170a:	mov	r1, sp
    170c:	add.w	r0, sp, #1096	; 0x448
    1710:	bl	9f88 <memcpy>
    1714:	b.n	16e4 <MTPStorage_SD::DeleteObject(unsigned long)+0x70>

00001716 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    1716:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    171a:	cmp.w	r2, #4294967295
    171e:	ite	ne
    1720:	movne	r8, r2
    1722:	moveq	r8, r1
  {
    1724:	sub.w	sp, sp, #816	; 0x330
    1728:	mov	r4, r0
    172a:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    172c:	mov	r2, r8
    172e:	mov	r1, r0
    1730:	add	r0, sp, #256	; 0x100
  {
    1732:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    1734:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    1738:	mov.w	r2, #256	; 0x100
    173c:	ldr	r1, [sp, #840]	; 0x348
    173e:	add	r0, sp, #560	; 0x230
    1740:	bl	e91e <strlcpy>
    r.store = p.store;
    1744:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    1748:	ldr	r2, [sp, #260]	; 0x104
    r.cptime = 0;
    r.mpdate = 0;
    r.mptime = 0;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    174a:	add	r1, sp, #536	; 0x218
    r.store = p.store;
    174c:	strh.w	r3, [sp, #550]	; 0x226
    r.child = 0;
    1750:	movs	r3, #0
    ret = p.child = AppendIndexRecord(r);
    1752:	mov	r0, r4
    r.sibling = p.child;
    1754:	str	r2, [sp, #544]	; 0x220
    r.child = 0;
    1756:	str	r3, [sp, #540]	; 0x21c
    r.parent = parent;
    1758:	str.w	r8, [sp, #536]	; 0x218
    r.isdir = folder;
    175c:	strb.w	r7, [sp, #548]	; 0x224
    r.mpdate = 0;
    1760:	strd	r3, r3, [sp, #552]	; 0x228
    r.scanned = 1;
    1764:	movs	r3, #1
    1766:	strb.w	r3, [sp, #549]	; 0x225
    ret = p.child = AppendIndexRecord(r);
    176a:	bl	1122 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    176e:	add	r2, sp, #256	; 0x100
    ret = p.child = AppendIndexRecord(r);
    1770:	mov	r5, r0
    1772:	str	r0, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    1774:	mov	r1, r8
    1776:	mov	r0, r4
    1778:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    177c:	cbz	r7, 17a0 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x8a>
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    177e:	mov	r2, sp
    1780:	mov	r1, r5
    1782:	mov.w	r3, #256	; 0x100
    1786:	mov	r0, r4
    1788:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      mtp_lock_storage(true);
      sd_mkdir(store,filename);
    178c:	mov	r2, sp
    178e:	mov	r1, r6
    1790:	mov	r0, r4
    1792:	bl	f28 <mSD_Base::sd_mkdir(unsigned long, char*)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    1796:	mov	r0, r5
    1798:	add.w	sp, sp, #816	; 0x330
    179c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, (O_RDWR | O_CREAT));
    17a0:	movw	r2, #514	; 0x202
    17a4:	mov	r1, r5
    17a6:	mov	r0, r4
    17a8:	bl	1240 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    17ac:	b.n	1796 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x80>

000017ae <MTPStorage_SD::write(unsigned char const*, unsigned long)>:

  size_t MTPStorage_SD::write(const uint8_t* data, uint32_t bytes)
  {
    17ae:	push	{r3, lr}
    return BaseFile::write(buffer, size);
    17b0:	add.w	r0, r0, #260	; 0x104
    17b4:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    17b8:	pop	{r3, pc}

000017ba <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    17ba:	ldr.w	r3, [r0, #316]	; 0x13c

  void MTPStorage_SD::close() 
  {
    17be:	push	{r4, r5, lr}
    17c0:	mov	r4, r0
    17c2:	sub	sp, #300	; 0x12c
    17c4:	cbz	r3, 1830 <MTPStorage_SD::close()+0x76>
    17c6:	ldr	r5, [r3, #28]
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    uint16_t cpdate,cptime,mpdate,mptime;
    file_.getCreateDateTime(&cpdate,&cptime);
    17c8:	add.w	r0, r4, #260	; 0x104
    17cc:	add.w	r2, sp, #10
    17d0:	add	r1, sp, #8
    17d2:	str	r0, [sp, #4]
    17d4:	bl	d22 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>
    file_.getCreateDateTime(&mpdate,&mptime);
    17d8:	add.w	r2, sp, #14
    17dc:	add	r1, sp, #12
    17de:	ldr	r0, [sp, #4]
    17e0:	bl	d22 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>
    file_.close();
    17e4:	ldr	r0, [sp, #4]
    17e6:	bl	8484 <FsBaseFile::close()>
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    17ea:	ldr.w	r2, [r4, #416]	; 0x1a0
    17ee:	mov	r1, r4
    17f0:	add	r0, sp, #16
    17f2:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    r.cpdate=cpdate;
    17f6:	ldrh.w	r3, [sp, #8]
    r.cptime=cptime;
    r.mpdate=mpdate;
    r.mptime=mptime;
    WriteIndexRecord(open_file_, r);
    17fa:	add	r2, sp, #16
    17fc:	ldr.w	r1, [r4, #416]	; 0x1a0
    r.cpdate=cpdate;
    1800:	strh.w	r3, [sp, #32]
    WriteIndexRecord(open_file_, r);
    1804:	mov	r0, r4
    r.cptime=cptime;
    1806:	ldrh.w	r3, [sp, #10]
    uint32_t size = (uint32_t) file_.size();
    180a:	str	r5, [sp, #20]
    r.cptime=cptime;
    180c:	strh.w	r3, [sp, #34]	; 0x22
    r.mpdate=mpdate;
    1810:	ldrh.w	r3, [sp, #12]
    1814:	strh.w	r3, [sp, #36]	; 0x24
    r.mptime=mptime;
    1818:	ldrh.w	r3, [sp, #14]
    181c:	strh.w	r3, [sp, #38]	; 0x26
    WriteIndexRecord(open_file_, r);
    1820:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    1824:	mvn.w	r3, #1
    1828:	str.w	r3, [r4, #416]	; 0x1a0
  }
    182c:	add	sp, #300	; 0x12c
    182e:	pop	{r4, r5, pc}
    1830:	ldr.w	r5, [r0, #320]	; 0x140
           m_xFile ? m_xFile->fileSize() : 0;
    1834:	cmp	r5, #0
    1836:	beq.n	17c8 <MTPStorage_SD::close()+0xe>
    1838:	ldr	r5, [r5, #16]
    183a:	b.n	17c8 <MTPStorage_SD::close()+0xe>

0000183c <MTPStorage_SD::rename(unsigned long, char const*)>:

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    183c:	push	{r4, r5, r6, r7, lr}
    183e:	subw	sp, sp, #1052	; 0x41c
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1842:	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    1846:	mov	r4, r0
    1848:	mov	r5, r1
    184a:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    184c:	mov	r2, sp
    184e:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    1852:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1854:	mov	r6, r0
    Serial.println(oldName);
    1856:	ldr	r0, [pc, #120]	; (18d0 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    1858:	bl	d70 <Print::println(char const*) [clone .isra.0]>

    Record p1 = ReadIndexRecord(handle);
    185c:	mov	r2, r5
    185e:	mov	r1, r4
    1860:	add	r0, sp, #768	; 0x300
    1862:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    1866:	mov.w	r2, #256	; 0x100
    186a:	add	r1, sp, #792	; 0x318
    186c:	add	r0, sp, #512	; 0x200
    186e:	bl	e91e <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    1872:	mov.w	r2, #256	; 0x100
    1876:	mov	r1, r7
    1878:	add	r0, sp, #792	; 0x318
    187a:	bl	e91e <strlcpy>

    WriteIndexRecord(handle, p1);
    187e:	add	r2, sp, #768	; 0x300
    1880:	mov	r1, r5
    1882:	mov	r0, r4
    1884:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1888:	mov.w	r3, #256	; 0x100
    188c:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    188e:	add.w	r6, r4, r6, lsl #2
    1892:	add.w	r2, sp, r3
    1896:	mov	r0, r4
    1898:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    189c:	add	r1, sp, #256	; 0x100
    189e:	ldr	r0, [pc, #48]	; (18d0 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    18a0:	bl	d70 <Print::println(char const*) [clone .isra.0]>
    18a4:	ldr	r0, [r6, #84]	; 0x54
    18a6:	add	r2, sp, #256	; 0x100
    18a8:	mov	r1, sp
    18aa:	bl	df6 <FsVolume::rename(char const*, char const*)>

    if (sd_rename(store,oldName,newName)) return true;
    18ae:	mov	r6, r0
    18b0:	cbnz	r0, 18c8 <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    18b2:	mov.w	r2, #256	; 0x100
    18b6:	add	r1, sp, #512	; 0x200
    18b8:	add	r0, sp, #792	; 0x318
    18ba:	bl	e91e <strlcpy>
    WriteIndexRecord(handle, p1);
    18be:	add	r2, sp, #768	; 0x300
    18c0:	mov	r1, r5
    18c2:	mov	r0, r4
    18c4:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    18c8:	mov	r0, r6
    18ca:	addw	sp, sp, #1052	; 0x41c
    18ce:	pop	{r4, r5, r6, r7, pc}
    18d0:	.word	0x20001c28

000018d4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    18d4:	push	{r4, r5, r6, lr}
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    18d6:	add.w	r1, r0, r1, lsl #2
    18da:	sub.w	sp, sp, #2208	; 0x8a0
    18de:	mov	r5, r0
    18e0:	mov	r6, r3
    18e2:	ldr	r1, [r1, #84]	; 0x54
    18e4:	movs	r3, #0
    18e6:	mov	r0, sp
    18e8:	bl	86b8 <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,O_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    18ec:	add	r0, sp, #16
    18ee:	bl	ec8 <FsBaseFile::isOpen() const>
    18f2:	mov	r4, r0
    18f4:	cbnz	r0, 190c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    18f6:	movw	r0, #717	; 0x2cd
    18fa:	bl	d84 <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    18fe:	mov	r0, sp
    1900:	bl	f10 <FsFile::~FsFile()>
    1904:	mov	r0, r4
    1906:	add.w	sp, sp, #2208	; 0x8a0
    190a:	pop	{r4, r5, r6, pc}
    190c:	add.w	r5, r5, r6, lsl #2
    1910:	movw	r3, #514	; 0x202
    1914:	ldr.w	r2, [sp, #2224]	; 0x8b0
    1918:	add	r0, sp, #80	; 0x50
    191a:	ldr	r1, [r5, #84]	; 0x54
    191c:	bl	86b8 <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    1920:	add	r0, sp, #96	; 0x60
    1922:	bl	ec8 <FsBaseFile::isOpen() const>
    1926:	mov	r4, r0
    1928:	cbnz	r0, 1940 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c>
    192a:	add	r0, sp, #16
    192c:	bl	8484 <FsBaseFile::close()>
    1930:	mov.w	r0, #720	; 0x2d0
    1934:	bl	d84 <dbgPrint(unsigned short)>
}
    1938:	add	r0, sp, #80	; 0x50
    193a:	bl	f10 <FsFile::~FsFile()>
    193e:	b.n	18fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    1940:	mov.w	r5, #4294967295
    return BaseFile::available();
    1944:	add	r0, sp, #16
    1946:	bl	e56 <FsBaseFile::available() const>
  while(f1.available()>0)
    194a:	cmp	r0, #0
    194c:	ble.n	196e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    nd=f1.read(buffer,nbuf);
    194e:	mov.w	r2, #2048	; 0x800
    1952:	add	r1, sp, #160	; 0xa0
    1954:	add	r0, sp, #16
    1956:	bl	eda <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    195a:	subs	r5, r0, #0
    195c:	blt.n	196e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    f2.write(buffer,nd);
    195e:	mov	r2, r5
    1960:	add	r1, sp, #160	; 0xa0
    1962:	add	r0, sp, #96	; 0x60
    1964:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    1968:	cmp.w	r5, #2048	; 0x800
    196c:	bge.n	1944 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x70>
  f1.close();
    196e:	add	r0, sp, #16
    1970:	bl	8484 <FsBaseFile::close()>
  f2.close();
    1974:	add	r0, sp, #96	; 0x60
    1976:	bl	8484 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    197a:	cmp	r5, #0
    197c:	bge.n	1938 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>
    197e:	mov.w	r0, #732	; 0x2dc
    1982:	movs	r4, #0
    1984:	bl	d84 <dbgPrint(unsigned short)>
    1988:	b.n	1938 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>

0000198a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    198a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    198e:	sub.w	sp, sp, #1640	; 0x668
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    1992:	cmp.w	r3, #4294967295
    1996:	ite	ne
    1998:	movne	r7, r3
    199a:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    199c:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    199e:	mov	r2, r1
    19a0:	mov	r1, r0
    19a2:	add	r0, sp, #520	; 0x208
    19a4:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    19a8:	mov	r2, r7
    19aa:	mov	r1, r4
    19ac:	add	r0, sp, #800	; 0x320
  Record p1=ReadIndexRecord(handle);
    19ae:	ldrh.w	r8, [sp, #534]	; 0x216
  uint32_t iy= 0;
    19b2:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    19b4:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    19b8:	ldr	r6, [sp, #524]	; 0x20c
  while(ix)
    19ba:	cbnz	r6, 19d2 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    19bc:	mov	r0, r4
    19be:	add	r2, sp, #800	; 0x320
    19c0:	mov	r1, r7
  p2.child=iy;
    19c2:	str	r5, [sp, #804]	; 0x324
  WriteIndexRecord(newHandle,p2);
    19c4:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    19c8:	movs	r0, #1
    19ca:	add.w	sp, sp, #1640	; 0x668
    19ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record px = ReadIndexRecord(ix) ;
    19d2:	mov	r2, r6
    19d4:	mov	r1, r4
    19d6:	add.w	r0, sp, #1080	; 0x438
    19da:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    19de:	mov.w	r2, #280	; 0x118
    19e2:	add.w	r1, sp, #1080	; 0x438
    19e6:	add.w	r0, sp, #1360	; 0x550
    19ea:	bl	9f88 <memcpy>
    py.store = p2.store;
    19ee:	ldrh.w	r3, [sp, #814]	; 0x32e
    iy = AppendIndexRecord(py);
    19f2:	add.w	r1, sp, #1360	; 0x550
    19f6:	mov	r0, r4
    py.store = p2.store;
    19f8:	strh.w	r3, [sp, #1374]	; 0x55e
    py.sibling = iy;
    19fc:	str.w	r5, [sp, #1368]	; 0x558
    py.parent = newHandle;
    1a00:	str.w	r7, [sp, #1360]	; 0x550
    iy = AppendIndexRecord(py);
    1a04:	bl	1122 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1a08:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    1a0a:	mov.w	r3, #256	; 0x100
    1a0e:	add	r2, sp, #8
    1a10:	mov	r1, r6
    1a12:	mov	r0, r4
    1a14:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    1a18:	add	r2, sp, #264	; 0x108
    1a1a:	mov.w	r3, #256	; 0x100
    1a1e:	mov	r1, r5
    1a20:	mov	r0, r4
    1a22:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    1a26:	ldrb.w	r1, [sp, #1372]	; 0x55c
    1a2a:	ldrh.w	r3, [sp, #1374]	; 0x55e
    1a2e:	add	r2, sp, #264	; 0x108
    1a30:	cbz	r1, 1a58 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xce>
      sd_mkdir(py.store,newfilename);
    1a32:	mov	r1, r3
    1a34:	mov	r0, r4
    1a36:	bl	f28 <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    1a3a:	mov	r2, r6
    1a3c:	mov	r1, r8
    1a3e:	mov	r0, r4
    1a40:	bl	12c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    1a44:	mov	r3, r5
    1a46:	ldrh.w	r2, [sp, #814]	; 0x32e
    1a4a:	mov	r1, r6
    1a4c:	mov	r0, r4
    1a4e:	bl	198a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>
    ix = px.sibling;
    1a52:	ldr.w	r6, [sp, #1088]	; 0x440
    1a56:	b.n	19ba <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    1a58:	str	r2, [sp, #0]
    1a5a:	mov	r1, r8
    1a5c:	add	r2, sp, #8
    1a5e:	mov	r0, r4
    1a60:	bl	18d4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1a64:	b.n	1a52 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xc8>

00001a66 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    1a66:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a6a:	sub.w	sp, sp, #1360	; 0x550
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    1a6e:	cmp.w	r3, #4294967295
    1a72:	ite	ne
    1a74:	movne	r7, r3
    1a76:	moveq	r7, r2
  { 
    1a78:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1a7a:	mov	r2, r1
  { 
    1a7c:	mov	r6, r1
    Record p1 = ReadIndexRecord(handle);
    1a7e:	mov	r1, r0
    1a80:	add	r0, sp, #520	; 0x208
    1a82:	add.w	r8, sp, #544	; 0x220
    1a86:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1a8a:	mov	r2, r7
    1a8c:	mov	r1, r4
    1a8e:	add	r0, sp, #800	; 0x320
    1a90:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    1a94:	ldrb.w	r5, [sp, #532]	; 0x214
    1a98:	cbz	r5, 1adc <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    1a9a:	ldrh.w	r1, [sp, #534]	; 0x216
    1a9e:	mov	r2, r6
    1aa0:	mov	r0, r4
    1aa2:	adds	r1, #1
    1aa4:	bl	12c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1aa8:	ldrb.w	r3, [sp, #532]	; 0x214
    1aac:	mov	r2, r7
    1aae:	ldrh.w	r1, [sp, #814]	; 0x32e
    1ab2:	subs	r3, #0
    1ab4:	mov	r0, r4
    1ab6:	str.w	r8, [sp]
    1aba:	it	ne
    1abc:	movne	r3, #1
    1abe:	bl	1716 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>
      CopyFiles(handle, p2.store, newHandle);
    1ac2:	ldrh.w	r2, [sp, #814]	; 0x32e
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1ac6:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    1ac8:	mov	r3, r0
    1aca:	mov	r1, r6
    1acc:	mov	r0, r4
    1ace:	bl	198a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>
  }
    1ad2:	mov	r0, r5
    1ad4:	add.w	sp, sp, #1360	; 0x550
    1ad8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    1adc:	mov.w	r2, #256	; 0x100
    1ae0:	mov	r1, r8
    1ae2:	add.w	r0, sp, #1104	; 0x450
    1ae6:	bl	e91e <strlcpy>
      r.store = p2.store;
    1aea:	ldrh.w	r3, [sp, #814]	; 0x32e
      newHandle = p2.child = AppendIndexRecord(r);
    1aee:	add.w	r1, sp, #1080	; 0x438
    1af2:	mov	r0, r4
      r.store = p2.store;
    1af4:	strh.w	r3, [sp, #1094]	; 0x446
      r.sibling = p2.child;
    1af8:	ldr	r3, [sp, #804]	; 0x324
      r.parent = newParent;
    1afa:	str.w	r7, [sp, #1080]	; 0x438
      r.sibling = p2.child;
    1afe:	str.w	r3, [sp, #1088]	; 0x440
      r.child = 0;
    1b02:	str.w	r5, [sp, #1084]	; 0x43c
      r.isdir = 0;
    1b06:	strh.w	r5, [sp, #1092]	; 0x444
      newHandle = p2.child = AppendIndexRecord(r);
    1b0a:	bl	1122 <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    1b0e:	add	r2, sp, #800	; 0x320
      newHandle = p2.child = AppendIndexRecord(r);
    1b10:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    1b12:	mov	r1, r7
      newHandle = p2.child = AppendIndexRecord(r);
    1b14:	str	r0, [sp, #804]	; 0x324
      WriteIndexRecord(newParent, p2);
    1b16:	mov	r0, r4
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1b18:	add	r7, sp, #264	; 0x108
      WriteIndexRecord(newParent, p2);
    1b1a:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1b1e:	add	r2, sp, #8
    1b20:	mov	r1, r6
    1b22:	mov.w	r3, #256	; 0x100
    1b26:	mov	r0, r4
    1b28:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1b2c:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1b2e:	mov	r2, r7
    1b30:	mov	r1, r5
    1b32:	mov.w	r3, #256	; 0x100
    1b36:	mov	r0, r4
    1b38:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    1b3c:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1b3e:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1b40:	mov	r1, r6
    1b42:	mov	r0, r4
    1b44:	str	r7, [sp, #0]
    1b46:	bl	18d4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    1b4a:	b.n	1ad2 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

00001b4c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    1b4c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1b50:	ldr.w	r8, [sp, #32]
    1b54:	mov	r6, r1
    1b56:	mov	r7, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b58:	mov	r1, r3
    1b5a:	mov	r2, r8
    1b5c:	str	r3, [sp, #4]
{ // old and new are directory paths
    1b5e:	mov	r5, r0
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b60:	bl	f28 <mSD_Base::sd_mkdir(unsigned long, char*)>
    1b64:	ldr	r3, [sp, #4]
    1b66:	mov	r4, r0
    1b68:	cbz	r0, 1b7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x32>
    1b6a:	mov	r2, r7
    1b6c:	mov	r1, r6
    1b6e:	mov	r0, r5
    1b70:	str.w	r8, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1b74:	add	sp, #8
    1b76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1b7a:	b.w	1b90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b7e:	movw	r0, #742	; 0x2e6
    1b82:	bl	d84 <dbgPrint(unsigned short)>
}
    1b86:	mov	r0, r4
    1b88:	add	sp, #8
    1b8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00001b90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1b90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b94:	mov	r6, r1
    1b96:	sub.w	sp, sp, #680	; 0x2a8
    1b9a:	add.w	r1, r0, r1, lsl #2
    1b9e:	mov	r5, r0
    1ba0:	mov	r8, r3
    1ba2:	add	r0, sp, #8
    1ba4:	movs	r3, #0
    1ba6:	ldr	r1, [r1, #84]	; 0x54
    1ba8:	mov	r7, r2
    1baa:	bl	86b8 <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1bae:	add	r0, sp, #24
    1bb0:	bl	ec8 <FsBaseFile::isOpen() const>
    1bb4:	mov	r4, r0
    1bb6:	cmp	r0, #0
    1bb8:	beq.n	1c6e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xde>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1bba:	ldr	r4, [pc, #264]	; (1cc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>)
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1bbc:	mov.w	r2, #256	; 0x100
    1bc0:	mov	r1, r7
    1bc2:	add	r0, sp, #168	; 0xa8
    1bc4:	bl	e91e <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1bc8:	add	r0, sp, #168	; 0xa8
    1bca:	bl	eb40 <strlen>
    1bce:	add	r3, sp, #168	; 0xa8
    1bd0:	add	r0, r3
    1bd2:	ldrb.w	r3, [r0, #-1]
    1bd6:	cmp	r3, #47	; 0x2f
    1bd8:	beq.n	1be6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1bda:	mov.w	r2, #256	; 0x100
    1bde:	mov	r1, r4
    1be0:	add	r0, sp, #168	; 0xa8
    1be2:	bl	e8d8 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1be6:	mov.w	r2, #256	; 0x100
    1bea:	ldr	r1, [sp, #704]	; 0x2c0
    1bec:	add	r0, sp, #424	; 0x1a8
    1bee:	bl	e91e <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1bf2:	add	r0, sp, #424	; 0x1a8
    1bf4:	bl	eb40 <strlen>
    1bf8:	add	r3, sp, #424	; 0x1a8
    1bfa:	add	r0, r3
    1bfc:	ldrb.w	r3, [r0, #-1]
    1c00:	cmp	r3, #47	; 0x2f
    1c02:	beq.n	1c10 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1c04:	mov.w	r2, #256	; 0x100
    1c08:	mov	r1, r4
    1c0a:	add	r0, sp, #424	; 0x1a8
    1c0c:	bl	e8d8 <strlcat>
    FsFile tmpFile;
    1c10:	add	r0, sp, #88	; 0x58
    1c12:	bl	ef4 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1c16:	movs	r2, #0
    1c18:	add	r1, sp, #24
    1c1a:	add	r0, sp, #104	; 0x68
    1c1c:	bl	8584 <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1c20:	add	r0, sp, #104	; 0x68
    1c22:	bl	ec8 <FsBaseFile::isOpen() const>
    1c26:	cmp	r0, #0
    1c28:	beq.n	1cae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11e>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1c2a:	mov.w	r2, #256	; 0x100
    1c2e:	add	r1, sp, #168	; 0xa8
    1c30:	add	r0, sp, #104	; 0x68
    1c32:	bl	cfc <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1c36:	mov.w	r2, #256	; 0x100
    1c3a:	add	r1, sp, #424	; 0x1a8
    1c3c:	add	r0, sp, #104	; 0x68
    1c3e:	bl	cfc <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1c42:	add	r0, sp, #104	; 0x68
    1c44:	bl	ea6 <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c48:	add	r3, sp, #424	; 0x1a8
    1c4a:	add	r2, sp, #168	; 0xa8
    1c4c:	mov	r1, r6
    1c4e:	str	r3, [sp, #0]
    1c50:	mov	r3, r8
        if(f2.isDirectory())
    1c52:	cbz	r0, 1c86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c54:	mov	r0, r5
    1c56:	bl	1b4c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1c5a:	cbnz	r0, 1ca6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1c5c:	movw	r0, #765	; 0x2fd
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c60:	bl	d84 <dbgPrint(unsigned short)>
    }
    1c64:	add	r0, sp, #88	; 0x58
    1c66:	movs	r4, #0
    1c68:	bl	f10 <FsFile::~FsFile()>
    1c6c:	b.n	1c76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1c6e:	movw	r0, #745	; 0x2e9
    1c72:	bl	d84 <dbgPrint(unsigned short)>
}
    1c76:	add	r0, sp, #8
    1c78:	bl	f10 <FsFile::~FsFile()>
    1c7c:	mov	r0, r4
    1c7e:	add.w	sp, sp, #680	; 0x2a8
    1c82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c86:	mov	r0, r5
    1c88:	bl	18d4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1c8c:	cbnz	r0, 1c94 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x104>
    1c8e:	movw	r0, #769	; 0x301
    1c92:	b.n	1c60 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c94:	add	r2, sp, #168	; 0xa8
    1c96:	mov	r1, r6
    1c98:	mov	r0, r5
    1c9a:	bl	f68 <mSD_Base::sd_remove(unsigned long, char const*)>
    1c9e:	cbnz	r0, 1ca6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1ca0:	movw	r0, #770	; 0x302
    1ca4:	b.n	1c60 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1ca6:	add	r0, sp, #88	; 0x58
    1ca8:	bl	f10 <FsFile::~FsFile()>
    1cac:	b.n	1bbc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    1cae:	add	r0, sp, #88	; 0x58
    1cb0:	bl	f10 <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1cb4:	mov	r2, r7
    1cb6:	mov	r1, r6
    1cb8:	mov	r0, r5
    1cba:	bl	fcc <mSD_Base::sd_rmdir(unsigned long, char*)>
    1cbe:	mov	r4, r0
    1cc0:	b.n	1c76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
    1cc2:	nop
    1cc4:	.word	0x20000cbe

00001cc8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1cc8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ccc:	subw	sp, sp, #2760	; 0xac8
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1cd0:	cmp.w	r3, #4294967295
    1cd4:	ite	ne
    1cd6:	movne	r7, r3
    1cd8:	moveq	r7, r2
  { 
    1cda:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1cdc:	mov	r2, r1
  { 
    1cde:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1ce0:	mov	r1, r0
    1ce2:	add	r0, sp, #800	; 0x320
    1ce4:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1ce8:	mov	r2, r7
    1cea:	mov	r1, r4
    1cec:	add.w	r0, sp, #1080	; 0x438
    1cf0:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1cf4:	ldr	r2, [sp, #800]	; 0x320
    1cf6:	mov	r1, r4
    1cf8:	add.w	r0, sp, #1360	; 0x550
    1cfc:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1d00:	ldrb.w	r3, [sp, #812]	; 0x32c
    1d04:	cbz	r3, 1d22 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1d06:	ldrb.w	r3, [sp, #813]	; 0x32d
    1d0a:	cbnz	r3, 1d22 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1d0c:	mov	r2, r5
    1d0e:	ldrh.w	r1, [sp, #814]	; 0x32e
    1d12:	mov	r0, r4
    1d14:	bl	12c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1d18:	add	r2, sp, #800	; 0x320
    1d1a:	mov	r1, r5
    1d1c:	mov	r0, r4
    1d1e:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1d22:	mov.w	r2, #280	; 0x118
    1d26:	add	r1, sp, #800	; 0x320
    1d28:	add.w	r0, sp, #1640	; 0x668
    1d2c:	bl	9f88 <memcpy>
    Record p2o = p2;
    1d30:	mov.w	r2, #280	; 0x118
    1d34:	add.w	r1, sp, #1080	; 0x438
    1d38:	add.w	r0, sp, #1920	; 0x780
    1d3c:	bl	9f88 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1d40:	mov.w	r3, #256	; 0x100
    1d44:	add	r2, sp, #288	; 0x120
    1d46:	mov	r1, r5
    1d48:	mov	r0, r4
    1d4a:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1d4e:	ldr.w	r8, [sp, #1364]	; 0x554
    1d52:	cmp	r8, r5
    1d54:	bne.n	1dcc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x104>
        p3.child = p1.sibling;
    1d56:	ldr	r3, [sp, #808]	; 0x328
    uint32_t jx=-1;
    1d58:	mov.w	r8, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1d5c:	add.w	r2, sp, #1360	; 0x550
    1d60:	ldr	r1, [sp, #800]	; 0x320
    1d62:	mov	r0, r4
        p3.child = p1.sibling;
    1d64:	str.w	r3, [sp, #1364]	; 0x554
        WriteIndexRecord(p1.parent, p3);    
    1d68:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1d6c:	ldrh.w	r3, [sp, #1094]	; 0x446
      WriteIndexRecord(handle, p1);
    1d70:	add	r2, sp, #800	; 0x320
    1d72:	mov	r1, r5
    1d74:	mov	r0, r4
      p1.store = p2.store;
    1d76:	strh.w	r3, [sp, #814]	; 0x32e
      p1.sibling = p2.child;
    1d7a:	ldr.w	r3, [sp, #1084]	; 0x43c
      p1.parent = newParent;
    1d7e:	str	r7, [sp, #800]	; 0x320
      p1.sibling = p2.child;
    1d80:	str	r3, [sp, #808]	; 0x328
      p2.child = handle;
    1d82:	str.w	r5, [sp, #1084]	; 0x43c
      WriteIndexRecord(handle, p1);
    1d86:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1d8a:	add.w	r2, sp, #1080	; 0x438
    1d8e:	mov	r1, r7
    1d90:	mov	r0, r4
    1d92:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1d96:	mov.w	r3, #256	; 0x100
    1d9a:	mov	r1, r5
    1d9c:	add	r2, sp, #544	; 0x220
    1d9e:	mov	r0, r4
    1da0:	bl	11e0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1da4:	ldrh.w	r1, [sp, #1654]	; 0x676
    1da8:	ldrh.w	r3, [sp, #1934]	; 0x78e
    1dac:	cmp	r1, r3
    1dae:	bne.n	1e5c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x194>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1db0:	add.w	r3, r4, r1, lsl #2
    1db4:	add	r2, sp, #544	; 0x220
    1db6:	add	r1, sp, #288	; 0x120
    1db8:	ldr	r0, [r3, #84]	; 0x54
    1dba:	bl	df6 <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1dbe:	cbz	r0, 1e2c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x164>
    1dc0:	movs	r6, #1
  }
    1dc2:	mov	r0, r6
    1dc4:	addw	sp, sp, #2760	; 0xac8
    1dc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        px = ReadIndexRecord(jx); 
    1dcc:	mov	r2, r8
    1dce:	mov	r1, r4
    1dd0:	add	r0, sp, #8
    1dd2:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1dd6:	mov.w	r2, #280	; 0x118
    1dda:	add	r1, sp, #8
    1ddc:	add.w	r0, sp, #2480	; 0x9b0
    1de0:	bl	9f88 <memcpy>
        pxo = px;
    1de4:	mov.w	r2, #280	; 0x118
    1de8:	add.w	r1, sp, #2480	; 0x9b0
    1dec:	addw	r0, sp, #2200	; 0x898
    1df0:	bl	9f88 <memcpy>
        while(handle != px.sibling)
    1df4:	ldr.w	r6, [sp, #2488]	; 0x9b8
    1df8:	cmp	r6, r5
    1dfa:	bne.n	1e10 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x148>
        px.sibling = p1.sibling;
    1dfc:	ldr	r3, [sp, #808]	; 0x328
        WriteIndexRecord(jx, px);
    1dfe:	add.w	r2, sp, #2480	; 0x9b0
    1e02:	mov	r1, r8
    1e04:	mov	r0, r4
        px.sibling = p1.sibling;
    1e06:	str.w	r3, [sp, #2488]	; 0x9b8
        WriteIndexRecord(jx, px);
    1e0a:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1e0e:	b.n	1d6c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1e10:	mov	r2, r6
    1e12:	mov	r1, r4
    1e14:	add	r0, sp, #8
    1e16:	mov	r8, r6
    1e18:	bl	119c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1e1c:	mov.w	r2, #280	; 0x118
    1e20:	add	r1, sp, #8
    1e22:	add.w	r0, sp, #2480	; 0x9b0
    1e26:	bl	9f88 <memcpy>
          pxo = px;
    1e2a:	b.n	1de4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x11c>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e2c:	movw	r0, #606	; 0x25e
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e30:	bl	d84 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1e34:	addw	r2, sp, #2200	; 0x898
    1e38:	mov	r1, r8
    1e3a:	mov	r0, r4
    1e3c:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1e40:	add.w	r2, sp, #1640	; 0x668
    1e44:	mov	r1, r5
    1e46:	mov	r0, r4
    1e48:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1e4c:	add.w	r2, sp, #1920	; 0x780
    1e50:	mov	r1, r7
    1e52:	mov	r0, r4
    return false;
    1e54:	movs	r6, #0
    WriteIndexRecord(newParent,p2o);      
    1e56:	bl	10f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1e5a:	b.n	1dc2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    else if(!p1o.isdir)
    1e5c:	ldrb.w	r2, [sp, #1652]	; 0x674
    1e60:	cbnz	r2, 1e86 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1be>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e62:	add	r2, sp, #544	; 0x220
    1e64:	mov	r0, r4
    1e66:	str	r2, [sp, #0]
    1e68:	add	r2, sp, #288	; 0x120
    1e6a:	bl	18d4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1e6e:	mov	r6, r0
    1e70:	cbz	r0, 1e80 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1b8>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1e72:	add	r2, sp, #288	; 0x120
    1e74:	ldrh.w	r1, [sp, #1934]	; 0x78e
    1e78:	mov	r0, r4
    1e7a:	bl	f68 <mSD_Base::sd_remove(unsigned long, char const*)>
    1e7e:	b.n	1dc2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    1e80:	movw	r0, #610	; 0x262
    1e84:	b.n	1e30 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e86:	add	r2, sp, #544	; 0x220
    1e88:	mov	r0, r4
    1e8a:	str	r2, [sp, #0]
    1e8c:	add	r2, sp, #288	; 0x120
    1e8e:	bl	1b4c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1e92:	cmp	r0, #0
    1e94:	bne.n	1dc0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf8>
    1e96:	movw	r0, #614	; 0x266
    1e9a:	b.n	1e30 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>

00001e9c <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1e9c:	push	{r4, r5, r6, lr}
    1e9e:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1ea2:	ldr	r4, [pc, #60]	; (1ee0 <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1ea4:	ldr	r0, [r5, #84]	; 0x54
    1ea6:	bl	dde <FsVolume::clusterCount() const>
    1eaa:	mov	r1, r0
    1eac:	mov	r0, r4
    1eae:	bl	d36 <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1eb2:	ldr	r0, [r5, #84]	; 0x54
    1eb4:	bl	4f8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1eb8:	mov	r1, r0
    1eba:	mov	r0, r4
    1ebc:	bl	d36 <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1ec0:	ldr	r6, [r5, #84]	; 0x54
    1ec2:	mov	r0, r6
    1ec4:	bl	dde <FsVolume::clusterCount() const>
    1ec8:	mov	r4, r0
    1eca:	mov	r0, r6
    1ecc:	bl	4f8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1ed0:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1ed2:	ldr	r0, [r5, #84]	; 0x54
    1ed4:	bl	dc0 <FsVolume::bytesPerCluster() const>
    1ed8:	umull	r0, r1, r4, r0
    1edc:	pop	{r4, r5, r6, pc}
    1ede:	nop
    1ee0:	.word	0x20001c28

00001ee4 <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1ee4:	push	{r4, lr}
    1ee6:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1ee8:	bl	c47a <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1eec:	mov	r0, r4
    1eee:	ldmia.w	sp!, {r4, lr}
    1ef2:	b.w	c48c <Print::println()>

00001ef6 <Print::print(char) [clone .isra.0]>:
	size_t print(char c)				{ return write((uint8_t)c); }
    1ef6:	ldr	r3, [r0, #0]
    1ef8:	ldr	r3, [r3, #0]
    1efa:	bx	r3

00001efc <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1efc:	push	{r0, r1, r4, lr}
    1efe:	mov	r4, r0
    1f00:	cbz	r1, 1f1c <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    1f02:	mov	r0, r1
    1f04:	str	r1, [sp, #4]
    1f06:	bl	eb40 <strlen>
    1f0a:	ldr	r3, [r4, #0]
    1f0c:	mov	r2, r0
    1f0e:	ldr	r1, [sp, #4]
    1f10:	ldr	r3, [r3, #4]
    1f12:	mov	r0, r4
    1f14:	add	sp, #8
    1f16:	ldmia.w	sp!, {r4, lr}
    1f1a:	bx	r3
    1f1c:	add	sp, #8
    1f1e:	pop	{r4, pc}

00001f20 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1f20:	b.w	1efc <Print::write(char const*) [clone .isra.0]>

00001f24 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1f24:	push	{r4, lr}
    1f26:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1f28:	bl	1efc <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1f2c:	mov	r0, r4
    1f2e:	ldmia.w	sp!, {r4, lr}
    1f32:	b.w	c48c <Print::println()>
	...

00001f38 <menuGetLine()>:
#include "Hibernate.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    1f38:	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    1f3a:	bl	a470 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1f3e:	cmp	r0, #0
    1f40:	beq.n	1f3a <menuGetLine()+0x2>
  Serial.setTimeout(5000);
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1f42:	ldr	r4, [pc, #36]	; (1f68 <menuGetLine()+0x30>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    1f44:	movw	r3, #5000	; 0x1388
    1f48:	ldr	r5, [pc, #32]	; (1f6c <menuGetLine()+0x34>)
    1f4a:	movs	r1, #13
    1f4c:	mov	r2, r4
    1f4e:	str	r3, [r5, #8]
    1f50:	mov	r0, r5
    1f52:	movs	r3, #40	; 0x28
    1f54:	bl	c3d4 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1f58:	movs	r3, #0
  Serial.println(buffer);
    1f5a:	mov	r1, r4
  buffer[count]=0;
    1f5c:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1f5e:	mov	r0, r5
    1f60:	bl	1f24 <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1f64:	mov	r0, r4
    1f66:	pop	{r3, r4, r5, pc}
    1f68:	.word	0x2002ddd6
    1f6c:	.word	0x20001c28

00001f70 <menuGetString(char*) [clone .isra.0]>:
{ char *buffer=menuGetLine();
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
}

static int menuGetString(char *txt)
    1f70:	push	{r0, r1, r2, lr}
    1f72:	str	r0, [sp, #4]
{ char *buffer=menuGetLine();
    1f74:	bl	1f38 <menuGetLine()>
  return sscanf(buffer,"%s",txt);
    1f78:	ldr	r2, [sp, #4]
    1f7a:	ldr	r1, [pc, #12]	; (1f88 <menuGetString(char*) [clone .isra.0]+0x18>)
}
    1f7c:	add	sp, #12
    1f7e:	ldr.w	lr, [sp], #4
  return sscanf(buffer,"%s",txt);
    1f82:	b.w	e6e4 <siscanf>
    1f86:	nop
    1f88:	.word	0x20000ffb

00001f8c <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1f8c:	push	{r0, r1, r4, lr}
    1f8e:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f90:	bl	1f38 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1f94:	add	r2, sp, #4
    1f96:	ldr	r1, [pc, #12]	; (1fa4 <menuGetInt16(short*) [clone .isra.0]+0x18>)
    1f98:	bl	e6e4 <siscanf>
    1f9c:	ldr	r3, [sp, #4]
    1f9e:	strh	r3, [r4, #0]
}
    1fa0:	add	sp, #8
    1fa2:	pop	{r4, pc}
    1fa4:	.word	0x2000133b

00001fa8 <printPar()>:
    while(Serial.available()) ch=Serial.read();
    return status;
}

void printPar()
{
    1fa8:	push	{r4, lr}
      Serial.print("SerNum(h) = "); Serial.println(SerNum,HEX);
    1faa:	ldr	r4, [pc, #316]	; (20e8 <printPar()+0x140>)
    1fac:	ldr	r1, [pc, #316]	; (20ec <printPar()+0x144>)
    1fae:	mov	r0, r4
    1fb0:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    1fb4:	ldr	r1, [pc, #312]	; (20f0 <printPar()+0x148>)
    1fb6:	movs	r2, #16
    1fb8:	movs	r3, #0
    1fba:	ldr	r1, [r1, #0]
    1fbc:	mov	r0, r4
    1fbe:	bl	c4de <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    1fc2:	mov	r0, r4
    1fc4:	bl	c48c <Print::println()>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1fc8:	mov	r0, r4
    1fca:	ldr	r1, [pc, #296]	; (20f4 <printPar()+0x14c>)
    1fcc:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    1fd0:	ldr	r3, [pc, #292]	; (20f8 <printPar()+0x150>)
	size_t println(long n)				{ return print(n) + println(); }
    1fd2:	mov	r0, r4
    1fd4:	ldr	r1, [r3, #0]
    1fd6:	bl	c47a <Print::print(long)>
    1fda:	mov	r0, r4
    1fdc:	bl	c48c <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    1fe0:	mov	r0, r4
    1fe2:	ldr	r1, [pc, #280]	; (20fc <printPar()+0x154>)
    1fe4:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    1fe8:	ldr	r3, [pc, #276]	; (2100 <printPar()+0x158>)
    1fea:	mov	r0, r4
    1fec:	ldrh	r1, [r3, #0]
    1fee:	sxth	r1, r1
    1ff0:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    1ff4:	mov	r0, r4
    1ff6:	ldr	r1, [pc, #268]	; (2104 <printPar()+0x15c>)
    1ff8:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    1ffc:	ldr	r3, [pc, #264]	; (2108 <printPar()+0x160>)
    1ffe:	mov	r0, r4
    2000:	ldrh	r1, [r3, #0]
    2002:	sxth	r1, r1
    2004:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    2008:	mov	r0, r4
    200a:	ldr	r1, [pc, #256]	; (210c <printPar()+0x164>)
    200c:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2010:	ldr	r3, [pc, #252]	; (2110 <printPar()+0x168>)
    2012:	mov	r0, r4
    2014:	ldrh	r1, [r3, #0]
    2016:	sxth	r1, r1
    2018:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    201c:	mov	r0, r4
    201e:	ldr	r1, [pc, #244]	; (2114 <printPar()+0x16c>)
    2020:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2024:	ldr	r3, [pc, #240]	; (2118 <printPar()+0x170>)
    2026:	mov	r0, r4
    2028:	ldrh	r1, [r3, #0]
    202a:	uxth	r1, r1
    202c:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    2030:	mov	r0, r4
    2032:	ldr	r1, [pc, #232]	; (211c <printPar()+0x174>)
    2034:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2038:	ldr	r3, [pc, #228]	; (2120 <printPar()+0x178>)
    203a:	mov	r0, r4
    203c:	ldrh	r1, [r3, #0]
    203e:	uxth	r1, r1
    2040:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    2044:	mov	r0, r4
    2046:	ldr	r1, [pc, #220]	; (2124 <printPar()+0x17c>)
    2048:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    204c:	ldr	r3, [pc, #216]	; (2128 <printPar()+0x180>)
    204e:	mov	r0, r4
    2050:	ldrh	r1, [r3, #0]
    2052:	uxth	r1, r1
    2054:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("h_1   (1) = "); Serial.println(h_1);
    2058:	mov	r0, r4
    205a:	ldr	r1, [pc, #208]	; (212c <printPar()+0x184>)
    205c:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2060:	ldr	r3, [pc, #204]	; (2130 <printPar()+0x188>)
    2062:	mov	r0, r4
    2064:	ldrh	r1, [r3, #0]
    2066:	uxth	r1, r1
    2068:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("h_2   (2) = "); Serial.println(h_2);
    206c:	mov	r0, r4
    206e:	ldr	r1, [pc, #196]	; (2134 <printPar()+0x18c>)
    2070:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2074:	ldr	r3, [pc, #192]	; (2138 <printPar()+0x190>)
    2076:	mov	r0, r4
    2078:	ldrh	r1, [r3, #0]
    207a:	uxth	r1, r1
    207c:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("h_3   (3) = "); Serial.println(h_3);
    2080:	mov	r0, r4
    2082:	ldr	r1, [pc, #184]	; (213c <printPar()+0x194>)
    2084:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2088:	ldr	r3, [pc, #180]	; (2140 <printPar()+0x198>)
    208a:	mov	r0, r4
    208c:	ldrh	r1, [r3, #0]
    208e:	uxth	r1, r1
    2090:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("h_4   (4) = "); Serial.println(h_4);
    2094:	mov	r0, r4
    2096:	ldr	r1, [pc, #172]	; (2144 <printPar()+0x19c>)
    2098:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    209c:	ldr	r3, [pc, #168]	; (2148 <printPar()+0x1a0>)
    209e:	mov	r0, r4
    20a0:	ldrh	r1, [r3, #0]
    20a2:	uxth	r1, r1
    20a4:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("d_on  (5) = "); Serial.println(d_on);
    20a8:	mov	r0, r4
    20aa:	ldr	r1, [pc, #160]	; (214c <printPar()+0x1a4>)
    20ac:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    20b0:	ldr	r3, [pc, #156]	; (2150 <printPar()+0x1a8>)
    20b2:	mov	r0, r4
    20b4:	ldrh	r1, [r3, #0]
    20b6:	uxth	r1, r1
    20b8:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    20bc:	mov	r0, r4
    20be:	ldr	r1, [pc, #148]	; (2154 <printPar()+0x1ac>)
    20c0:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    20c4:	ldr	r3, [pc, #144]	; (2158 <printPar()+0x1b0>)
    20c6:	mov	r0, r4
    20c8:	ldrh	r1, [r3, #0]
    20ca:	uxth	r1, r1
    20cc:	bl	1ee4 <Print::println(int) [clone .isra.0]>
      Serial.print("d_0   (0) = "); Serial.println(d_0);
    20d0:	mov	r0, r4
    20d2:	ldr	r1, [pc, #136]	; (215c <printPar()+0x1b4>)
    20d4:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    20d8:	ldr	r3, [pc, #132]	; (2160 <printPar()+0x1b8>)
    20da:	mov	r0, r4
    20dc:	ldrh	r1, [r3, #0]
}
    20de:	ldmia.w	sp!, {r4, lr}
      Serial.print("d_0   (0) = "); Serial.println(d_0);
    20e2:	sxth	r1, r1
    20e4:	b.w	1ee4 <Print::println(int) [clone .isra.0]>
    20e8:	.word	0x20001c28
    20ec:	.word	0x20000ebe
    20f0:	.word	0x20006a08
    20f4:	.word	0x20000ecb
    20f8:	.word	0x20001e0c
    20fc:	.word	0x20000ed8
    2100:	.word	0x2002d8b4
    2104:	.word	0x20000ee5
    2108:	.word	0x2002d810
    210c:	.word	0x20000ef2
    2110:	.word	0x2002d802
    2114:	.word	0x20000eff
    2118:	.word	0x20001e2a
    211c:	.word	0x20000f0c
    2120:	.word	0x20001e2c
    2124:	.word	0x20000f19
    2128:	.word	0x2002d8b6
    212c:	.word	0x20000f26
    2130:	.word	0x2002d80c
    2134:	.word	0x20000f33
    2138:	.word	0x20001e24
    213c:	.word	0x20000f40
    2140:	.word	0x20001e26
    2144:	.word	0x20000f4d
    2148:	.word	0x20001e28
    214c:	.word	0x20000f5a
    2150:	.word	0x20001e22
    2154:	.word	0x20000f67
    2158:	.word	0x2002d806
    215c:	.word	0x20000f74
    2160:	.word	0x2002d804

00002164 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    2164:	push	{r4, lr}
    2166:	sub	sp, #32
    2168:	bl	a470 <usb_serial_available>

    while(!Serial.available()) ;
    216c:	cmp	r0, #0
    216e:	beq.n	2168 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2170:	bl	a4e4 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    2174:	uxtb	r0, r0
    if(ch=='d') // set date
    2176:	cmp	r0, #100	; 0x64
    2178:	bne.n	21a6 <menu3()+0x42>
{ char *buffer=menuGetLine();
    217a:	bl	1f38 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    217e:	add	r3, sp, #28
    2180:	add	r2, sp, #20
    2182:	ldr	r1, [pc, #364]	; (22f0 <menu3()+0x18c>)
    2184:	str	r3, [sp, #8]
    2186:	add.w	r3, sp, #19
    218a:	str	r3, [sp, #4]
    218c:	add	r3, sp, #24
    218e:	str	r3, [sp, #0]
    2190:	add.w	r3, sp, #18
    2194:	bl	e6e4 <siscanf>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);
      rtcSetDate(year,month,day);
    2198:	ldr	r0, [sp, #20]
    219a:	ldrd	r1, r2, [sp, #24]
    219e:	bl	3e40 <rtcSetDate(int, int, int)>
    else if(ch=='6') { menuGetInt16((int16_t *)&d_rep); }
    else if(ch=='0') { menuGetInt16((int16_t *)&d_0); }
    else if(ch=='b') { menuGetString((char *)&b_string[0]);}
    else if(ch=='k') { menuGetString((char *)&k_string[0]);}
    else if(ch=='n') { menuGetString((char *)&n_string[0]);}
}
    21a2:	add	sp, #32
    21a4:	pop	{r4, pc}
    else if(ch=='t') // set time
    21a6:	cmp	r0, #54	; 0x36
    21a8:	bhi.n	21c0 <menu3()+0x5c>
    21aa:	cmp	r0, #47	; 0x2f
    21ac:	bls.n	21a2 <menu3()+0x3e>
    21ae:	subs	r0, #49	; 0x31
    21b0:	cmp	r0, #5
    21b2:	bhi.w	22d6 <menu3()+0x172>
    21b6:	tbb	[pc, r0]
    21ba:	.short	0x8482
    21bc:	.word	0x8c8a8886
    21c0:	subs	r0, #97	; 0x61
    21c2:	uxtb	r3, r0
    21c4:	cmp	r3, #22
    21c6:	bhi.n	21a2 <menu3()+0x3e>
    21c8:	cmp	r0, #22
    21ca:	bhi.n	21a2 <menu3()+0x3e>
    21cc:	add	r3, pc, #4	; (adr r3, 21d4 <menu3()+0x70>)
    21ce:	ldr.w	pc, [r3, r0, lsl #2]
    21d2:	nop
    21d4:	.word	0x0000225b
    21d8:	.word	0x000022db
    21dc:	.word	0x000022a1
    21e0:	.word	0x000021a3
    21e4:	.word	0x000021a3
    21e8:	.word	0x0000226f
    21ec:	.word	0x000022a5
    21f0:	.word	0x000021a3
    21f4:	.word	0x000021a3
    21f8:	.word	0x000021a3
    21fc:	.word	0x000022e7
    2200:	.word	0x000021a3
    2204:	.word	0x000021a3
    2208:	.word	0x000022eb
    220c:	.word	0x00002267
    2210:	.word	0x000021a3
    2214:	.word	0x000021a3
    2218:	.word	0x0000226b
    221c:	.word	0x0000228d
    2220:	.word	0x00002231
    2224:	.word	0x000021a3
    2228:	.word	0x000021a3
    222c:	.word	0x000022bb
{ char *buffer=menuGetLine();
    2230:	bl	1f38 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    2234:	add	r3, sp, #28
    2236:	add	r2, sp, #20
    2238:	ldr	r1, [pc, #180]	; (22f0 <menu3()+0x18c>)
    223a:	str	r3, [sp, #8]
    223c:	add.w	r3, sp, #19
    2240:	str	r3, [sp, #4]
    2242:	add	r3, sp, #24
    2244:	str	r3, [sp, #0]
    2246:	add.w	r3, sp, #18
    224a:	bl	e6e4 <siscanf>
      rtcSetTime(hour,minutes,seconds);
    224e:	ldr	r0, [sp, #20]
    2250:	ldrd	r1, r2, [sp, #24]
    2254:	bl	3e64 <rtcSetTime(int, int, int)>
    2258:	b.n	21a2 <menu3()+0x3e>
    else if(ch=='a') { menuGetInt16((int16_t *)&t_acq); }
    225a:	ldr	r0, [pc, #152]	; (22f4 <menu3()+0x190>)
}
    225c:	add	sp, #32
    225e:	ldmia.w	sp!, {r4, lr}
    else if(ch=='o') { menuGetInt16((int16_t *)&t_on); }
    2262:	b.w	1f8c <menuGetInt16(short*) [clone .isra.0]>
    2266:	ldr	r0, [pc, #144]	; (22f8 <menu3()+0x194>)
    2268:	b.n	225c <menu3()+0xf8>
    else if(ch=='r') { menuGetInt16((int16_t *)&t_rep); }
    226a:	ldr	r0, [pc, #144]	; (22fc <menu3()+0x198>)
    226c:	b.n	225c <menu3()+0xf8>
{ char *buffer=menuGetLine();
    226e:	bl	1f38 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    2272:	add	r2, sp, #28
    2274:	ldr	r1, [pc, #136]	; (2300 <menu3()+0x19c>)
    2276:	bl	e6e4 <siscanf>
    227a:	ldr	r3, [pc, #136]	; (2304 <menu3()+0x1a0>)
    227c:	ldr	r2, [sp, #28]
    227e:	str	r2, [r3, #0]
    else if(ch=='f') { menuGetInt32((int32_t *)&fsamp); acqModifyFrequency(fsamp); }
    2280:	ldr	r0, [r3, #0]
}
    2282:	add	sp, #32
    2284:	ldmia.w	sp!, {r4, lr}
    else if(ch=='f') { menuGetInt32((int32_t *)&fsamp); acqModifyFrequency(fsamp); }
    2288:	b.w	c90 <acqModifyFrequency(unsigned long)>
    else if(ch=='s') { menuGetInt16((int16_t *)&shift); if(shift<0) shift=0; }
    228c:	ldr	r4, [pc, #120]	; (2308 <menu3()+0x1a4>)
    228e:	mov	r0, r4
    2290:	bl	1f8c <menuGetInt16(short*) [clone .isra.0]>
    2294:	ldrh	r3, [r4, #0]
    2296:	lsls	r3, r3, #16
    2298:	bpl.n	21a2 <menu3()+0x3e>
    229a:	movs	r3, #0
    229c:	strh	r3, [r4, #0]
    229e:	b.n	21a2 <menu3()+0x3e>
    else if(ch=='c') { menuGetInt16((int16_t *)&proc); }
    22a0:	ldr	r0, [pc, #104]	; (230c <menu3()+0x1a8>)
    22a2:	b.n	225c <menu3()+0xf8>
    else if(ch=='g') { menuGetInt16((int16_t *)&again); setAGain(again); }
    22a4:	ldr	r4, [pc, #104]	; (2310 <menu3()+0x1ac>)
    22a6:	mov	r0, r4
    22a8:	bl	1f8c <menuGetInt16(short*) [clone .isra.0]>
    22ac:	ldrh	r0, [r4, #0]
    22ae:	sxtb	r0, r0
}
    22b0:	add	sp, #32
    22b2:	ldmia.w	sp!, {r4, lr}
    else if(ch=='g') { menuGetInt16((int16_t *)&again); setAGain(again); }
    22b6:	b.w	3c52 <setAGain(signed char)>
    else if(ch=='w') { menuGetInt16((int16_t *)&store[0]); }
    22ba:	ldr	r0, [pc, #88]	; (2314 <menu3()+0x1b0>)
    22bc:	b.n	225c <menu3()+0xf8>
    else if(ch=='1') { menuGetInt16((int16_t *)&h_1); }
    22be:	ldr	r0, [pc, #88]	; (2318 <menu3()+0x1b4>)
    22c0:	b.n	225c <menu3()+0xf8>
    else if(ch=='2') { menuGetInt16((int16_t *)&h_2); }
    22c2:	ldr	r0, [pc, #88]	; (231c <menu3()+0x1b8>)
    22c4:	b.n	225c <menu3()+0xf8>
    else if(ch=='3') { menuGetInt16((int16_t *)&h_3); }
    22c6:	ldr	r0, [pc, #88]	; (2320 <menu3()+0x1bc>)
    22c8:	b.n	225c <menu3()+0xf8>
    else if(ch=='4') { menuGetInt16((int16_t *)&h_4); }
    22ca:	ldr	r0, [pc, #88]	; (2324 <menu3()+0x1c0>)
    22cc:	b.n	225c <menu3()+0xf8>
    else if(ch=='5') { menuGetInt16((int16_t *)&d_on); }
    22ce:	ldr	r0, [pc, #88]	; (2328 <menu3()+0x1c4>)
    22d0:	b.n	225c <menu3()+0xf8>
    else if(ch=='6') { menuGetInt16((int16_t *)&d_rep); }
    22d2:	ldr	r0, [pc, #88]	; (232c <menu3()+0x1c8>)
    22d4:	b.n	225c <menu3()+0xf8>
    else if(ch=='0') { menuGetInt16((int16_t *)&d_0); }
    22d6:	ldr	r0, [pc, #88]	; (2330 <menu3()+0x1cc>)
    22d8:	b.n	225c <menu3()+0xf8>
    else if(ch=='b') { menuGetString((char *)&b_string[0]);}
    22da:	ldr	r0, [pc, #88]	; (2334 <menu3()+0x1d0>)
}
    22dc:	add	sp, #32
    22de:	ldmia.w	sp!, {r4, lr}
    else if(ch=='n') { menuGetString((char *)&n_string[0]);}
    22e2:	b.w	1f70 <menuGetString(char*) [clone .isra.0]>
    else if(ch=='k') { menuGetString((char *)&k_string[0]);}
    22e6:	ldr	r0, [pc, #80]	; (2338 <menu3()+0x1d4>)
    22e8:	b.n	22dc <menu3()+0x178>
    else if(ch=='n') { menuGetString((char *)&n_string[0]);}
    22ea:	ldr	r0, [pc, #80]	; (233c <menu3()+0x1d8>)
    22ec:	b.n	22dc <menu3()+0x178>
    22ee:	nop
    22f0:	.word	0x20000e91
    22f4:	.word	0x20001e2a
    22f8:	.word	0x20001e2c
    22fc:	.word	0x2002d8b6
    2300:	.word	0x2000133b
    2304:	.word	0x20001e0c
    2308:	.word	0x2002d8b4
    230c:	.word	0x2002d810
    2310:	.word	0x2002d802
    2314:	.word	0x2002d7e0
    2318:	.word	0x2002d80c
    231c:	.word	0x20001e24
    2320:	.word	0x20001e26
    2324:	.word	0x20001e28
    2328:	.word	0x20001e22
    232c:	.word	0x2002d806
    2330:	.word	0x2002d804
    2334:	.word	0x2002de00
    2338:	.word	0x2002de33
    233c:	.word	0x2002de5b

00002340 <storeConfig(unsigned short*, int)>:

/******************** Parameter ******************************/
void storeConfig(uint16_t *store, int ns)
{ 
  #if defined(__IMXRT1062__)
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    2340:	lsls	r2, r1, #1
    2342:	movs	r1, #0
    2344:	b.w	bae4 <eeprom_write_block>

00002348 <loadConfig(unsigned short*, int)>:
}

void loadConfig(uint16_t *store, int ns)
{
  #if defined(__IMXRT1062__)
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    2348:	lsls	r2, r1, #1
    234a:	movs	r1, #0
    234c:	b.w	b834 <eeprom_read_block>

00002350 <saveParameters()>:
  #endif
}

void saveParameters(void)
{
  store[1]  = t_acq;
    2350:	ldr	r3, [pc, #104]	; (23bc <saveParameters()+0x6c>)
  store[7]  = h_2;
  store[8]  = h_3;
  store[9]  = h_4;
  store[10] = d_on;
  store[11] = d_rep;
  store[12] = fsamp/1000;
    2352:	mov.w	r2, #1000	; 0x3e8
  store[1]  = t_acq;
    2356:	ldr	r0, [pc, #104]	; (23c0 <saveParameters()+0x70>)
  store[13] = again;
  store[14] = dgain;
  store[15] = d_0;
  
  storeConfig(store, 16);
    2358:	movs	r1, #16
  store[1]  = t_acq;
    235a:	ldrh	r3, [r3, #0]
    235c:	strh	r3, [r0, #2]
  store[2]  = t_on;
    235e:	ldr	r3, [pc, #100]	; (23c4 <saveParameters()+0x74>)
    2360:	ldrh	r3, [r3, #0]
    2362:	strh	r3, [r0, #4]
  store[3]  = t_rep;
    2364:	ldr	r3, [pc, #96]	; (23c8 <saveParameters()+0x78>)
    2366:	ldrh	r3, [r3, #0]
    2368:	strh	r3, [r0, #6]
  store[4]  = proc;
    236a:	ldr	r3, [pc, #96]	; (23cc <saveParameters()+0x7c>)
    236c:	ldrh	r3, [r3, #0]
    236e:	strh	r3, [r0, #8]
  store[5]  = shift;
    2370:	ldr	r3, [pc, #92]	; (23d0 <saveParameters()+0x80>)
    2372:	ldrh	r3, [r3, #0]
    2374:	strh	r3, [r0, #10]
  store[6]  = h_1;
    2376:	ldr	r3, [pc, #92]	; (23d4 <saveParameters()+0x84>)
    2378:	ldrh	r3, [r3, #0]
    237a:	strh	r3, [r0, #12]
  store[7]  = h_2;
    237c:	ldr	r3, [pc, #88]	; (23d8 <saveParameters()+0x88>)
    237e:	ldrh	r3, [r3, #0]
    2380:	strh	r3, [r0, #14]
  store[8]  = h_3;
    2382:	ldr	r3, [pc, #88]	; (23dc <saveParameters()+0x8c>)
    2384:	ldrh	r3, [r3, #0]
    2386:	strh	r3, [r0, #16]
  store[9]  = h_4;
    2388:	ldr	r3, [pc, #84]	; (23e0 <saveParameters()+0x90>)
    238a:	ldrh	r3, [r3, #0]
    238c:	strh	r3, [r0, #18]
  store[10] = d_on;
    238e:	ldr	r3, [pc, #84]	; (23e4 <saveParameters()+0x94>)
    2390:	ldrh	r3, [r3, #0]
    2392:	strh	r3, [r0, #20]
  store[11] = d_rep;
    2394:	ldr	r3, [pc, #80]	; (23e8 <saveParameters()+0x98>)
    2396:	ldrh	r3, [r3, #0]
    2398:	strh	r3, [r0, #22]
  store[12] = fsamp/1000;
    239a:	ldr	r3, [pc, #80]	; (23ec <saveParameters()+0x9c>)
    239c:	ldr	r3, [r3, #0]
    239e:	sdiv	r3, r3, r2
    23a2:	strh	r3, [r0, #24]
  store[13] = again;
    23a4:	ldr	r3, [pc, #72]	; (23f0 <saveParameters()+0xa0>)
    23a6:	ldrh	r3, [r3, #0]
    23a8:	strh	r3, [r0, #26]
  store[14] = dgain;
    23aa:	ldr	r3, [pc, #72]	; (23f4 <saveParameters()+0xa4>)
    23ac:	ldrh	r3, [r3, #0]
    23ae:	strh	r3, [r0, #28]
  store[15] = d_0;
    23b0:	ldr	r3, [pc, #68]	; (23f8 <saveParameters()+0xa8>)
    23b2:	ldrh	r3, [r3, #0]
    23b4:	strh	r3, [r0, #30]
  storeConfig(store, 16);
    23b6:	b.w	2340 <storeConfig(unsigned short*, int)>
    23ba:	nop
    23bc:	.word	0x20001e2a
    23c0:	.word	0x2002d7e0
    23c4:	.word	0x20001e2c
    23c8:	.word	0x2002d8b6
    23cc:	.word	0x2002d810
    23d0:	.word	0x2002d8b4
    23d4:	.word	0x2002d80c
    23d8:	.word	0x20001e24
    23dc:	.word	0x20001e26
    23e0:	.word	0x20001e28
    23e4:	.word	0x20001e22
    23e8:	.word	0x2002d806
    23ec:	.word	0x20001e0c
    23f0:	.word	0x2002d802
    23f4:	.word	0x2002d808
    23f8:	.word	0x2002d804

000023fc <menu1(short)>:
{   // have ':'
    23fc:	push	{r3, r4, r5, lr}
    23fe:	mov	r5, r0
        virtual int available() { return usb_serial_available(); }
    2400:	bl	a470 <usb_serial_available>
    while(!Serial.available()) ;
    2404:	cmp	r0, #0
    2406:	beq.n	2400 <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2408:	bl	a4e4 <usb_serial_getchar>
    ch=Serial.read();
    240c:	uxtb	r4, r0
	size_t println(char c)				{ return print(c) + println(); }
    240e:	ldr	r0, [pc, #72]	; (2458 <menu1(short)+0x5c>)
    2410:	mov	r1, r4
    2412:	bl	1ef6 <Print::print(char) [clone .isra.0]>
    2416:	ldr	r0, [pc, #64]	; (2458 <menu1(short)+0x5c>)
    2418:	bl	c48c <Print::println()>
    if(ch=='w') 
    241c:	cmp	r4, #119	; 0x77
    241e:	bne.n	242e <menu1(short)+0x32>
    { saveParameters();
    2420:	bl	2350 <saveParameters()>
      Serial.println("Save parameters");
    2424:	ldr	r1, [pc, #52]	; (245c <menu1(short)+0x60>)
      Serial.print(ch); Serial.println(" not recognized");
    2426:	ldr	r0, [pc, #48]	; (2458 <menu1(short)+0x5c>)
    2428:	bl	1f24 <Print::println(char const*) [clone .isra.0]>
    242c:	b.n	2438 <menu1(short)+0x3c>
    else if(ch=='m') // control monitor (needed for gui)
    242e:	cmp	r4, #109	; 0x6d
    2430:	bne.n	2442 <menu1(short)+0x46>
      menuGetInt16((int16_t *)&monitor);
    2432:	ldr	r0, [pc, #44]	; (2460 <menu1(short)+0x64>)
    2434:	bl	1f8c <menuGetInt16(short*) [clone .isra.0]>
        virtual int available() { return usb_serial_available(); }
    2438:	bl	a470 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    243c:	cbnz	r0, 2452 <menu1(short)+0x56>
}
    243e:	mov	r0, r5
    2440:	pop	{r3, r4, r5, pc}
    else if(ch=='c') // transfer internal rtc to external rtc
    2442:	cmp	r4, #99	; 0x63
    2444:	beq.n	2438 <menu1(short)+0x3c>
      Serial.print(ch); Serial.println(" not recognized");
    2446:	mov	r1, r4
    2448:	ldr	r0, [pc, #12]	; (2458 <menu1(short)+0x5c>)
    244a:	bl	1ef6 <Print::print(char) [clone .isra.0]>
    244e:	ldr	r1, [pc, #20]	; (2464 <menu1(short)+0x68>)
    2450:	b.n	2426 <menu1(short)+0x2a>
        virtual int read() { return usb_serial_getchar(); }
    2452:	bl	a4e4 <usb_serial_getchar>
    2456:	b.n	2438 <menu1(short)+0x3c>
    2458:	.word	0x20001c28
    245c:	.word	0x20000de7
    2460:	.word	0x2002d80e
    2464:	.word	0x20000df7

00002468 <loadParameters()>:
}

uint16_t *loadParameters(void)
{
    2468:	push	{r4, lr}
  #if defined(__IMXRT1062__)
  loadConfig(store,16);
    246a:	ldr	r4, [pc, #132]	; (24f0 <loadParameters()+0x88>)
    246c:	movs	r1, #16
    246e:	mov	r0, r4
    2470:	bl	2348 <loadConfig(unsigned short*, int)>
  Serial.println(store[0]);
    2474:	ldrh	r1, [r4, #0]
    2476:	ldr	r0, [pc, #124]	; (24f4 <loadParameters()+0x8c>)
    2478:	bl	1ee4 <Print::println(int) [clone .isra.0]>
  }
  else
  #endif
  {
    store[0]  = 0;
    store[1]  = t_acq    = T_ACQ;
    247c:	movs	r2, #20
    247e:	ldr	r1, [pc, #120]	; (24f8 <loadParameters()+0x90>)
  store[0]=0;
    2480:	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    2482:	strh	r2, [r4, #2]
    store[13] = again    = AGAIN;
    store[14] = dgain    = DGAIN;
    store[15] = d_0      = 0; 
  }
  return store;
}
    2484:	mov	r0, r4
    store[1]  = t_acq    = T_ACQ;
    2486:	strh	r2, [r1, #0]
    store[2]  = t_on     = T_ON;
    2488:	movs	r2, #60	; 0x3c
    248a:	ldr	r1, [pc, #112]	; (24fc <loadParameters()+0x94>)
    248c:	strh	r2, [r4, #4]
    248e:	strh	r2, [r1, #0]
    store[3]  = t_rep    = T_REP;
    2490:	ldr	r2, [pc, #108]	; (2500 <loadParameters()+0x98>)
    store[7]  = h_2      = H_2;
    2492:	ldr	r1, [pc, #112]	; (2504 <loadParameters()+0x9c>)
    store[3]  = t_rep    = T_REP;
    2494:	strh	r3, [r2, #0]
    store[4]  = proc     = PROC_MODE;
    2496:	ldr	r2, [pc, #112]	; (2508 <loadParameters()+0xa0>)
  store[0]=0;
    2498:	strh	r3, [r4, #0]
    store[4]  = proc     = PROC_MODE;
    249a:	strh	r3, [r2, #0]
    store[5]  = shift    = SHIFT;
    249c:	ldr	r2, [pc, #108]	; (250c <loadParameters()+0xa4>)
    store[3]  = t_rep    = T_REP;
    249e:	strh	r3, [r4, #6]
    store[5]  = shift    = SHIFT;
    24a0:	strh	r3, [r2, #0]
    store[6]  = h_1      = H_1;
    24a2:	ldr	r2, [pc, #108]	; (2510 <loadParameters()+0xa8>)
    store[4]  = proc     = PROC_MODE;
    24a4:	strh	r3, [r4, #8]
    store[6]  = h_1      = H_1;
    24a6:	strh	r3, [r2, #0]
    store[7]  = h_2      = H_2;
    24a8:	movs	r2, #12
    store[5]  = shift    = SHIFT;
    24aa:	strh	r3, [r4, #10]
    store[7]  = h_2      = H_2;
    24ac:	strh	r2, [r1, #0]
    store[8]  = h_3      = H_3;
    24ae:	ldr	r1, [pc, #100]	; (2514 <loadParameters()+0xac>)
    store[7]  = h_2      = H_2;
    24b0:	strh	r2, [r4, #14]
    store[8]  = h_3      = H_3;
    24b2:	strh	r2, [r1, #0]
    24b4:	strh	r2, [r4, #16]
    store[9]  = h_4      = H_4;
    24b6:	movs	r2, #24
    24b8:	ldr	r1, [pc, #92]	; (2518 <loadParameters()+0xb0>)
    24ba:	strh	r2, [r4, #18]
    24bc:	strh	r2, [r1, #0]
    store[10] = d_on     = D_ON;
    24be:	movs	r2, #1
    24c0:	ldr	r1, [pc, #88]	; (251c <loadParameters()+0xb4>)
    24c2:	strh	r2, [r4, #20]
    24c4:	strh	r2, [r1, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    24c6:	movw	r1, #48000	; 0xbb80
    store[11] = d_rep    = D_REP;
    24ca:	ldr	r2, [pc, #84]	; (2520 <loadParameters()+0xb8>)
    store[6]  = h_1      = H_1;
    24cc:	strh	r3, [r4, #12]
    store[11] = d_rep    = D_REP;
    24ce:	strh	r3, [r2, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    24d0:	ldr	r2, [pc, #80]	; (2524 <loadParameters()+0xbc>)
    store[11] = d_rep    = D_REP;
    24d2:	strh	r3, [r4, #22]
    store[12] = (fsamp   = FSAMP)/1000; 
    24d4:	str	r1, [r2, #0]
    24d6:	movs	r2, #48	; 0x30
    store[13] = again    = AGAIN;
    24d8:	strh	r3, [r4, #26]
    store[12] = (fsamp   = FSAMP)/1000; 
    24da:	strh	r2, [r4, #24]
    store[13] = again    = AGAIN;
    24dc:	ldr	r2, [pc, #72]	; (2528 <loadParameters()+0xc0>)
    store[14] = dgain    = DGAIN;
    24de:	strh	r3, [r4, #28]
    store[13] = again    = AGAIN;
    24e0:	strh	r3, [r2, #0]
    store[14] = dgain    = DGAIN;
    24e2:	ldr	r2, [pc, #72]	; (252c <loadParameters()+0xc4>)
    store[15] = d_0      = 0; 
    24e4:	strh	r3, [r4, #30]
    store[14] = dgain    = DGAIN;
    24e6:	strh	r3, [r2, #0]
    store[15] = d_0      = 0; 
    24e8:	ldr	r2, [pc, #68]	; (2530 <loadParameters()+0xc8>)
    24ea:	strh	r3, [r2, #0]
}
    24ec:	pop	{r4, pc}
    24ee:	nop
    24f0:	.word	0x2002d7e0
    24f4:	.word	0x20001c28
    24f8:	.word	0x20001e2a
    24fc:	.word	0x20001e2c
    2500:	.word	0x2002d8b6
    2504:	.word	0x20001e24
    2508:	.word	0x2002d810
    250c:	.word	0x2002d8b4
    2510:	.word	0x2002d80c
    2514:	.word	0x20001e26
    2518:	.word	0x20001e28
    251c:	.word	0x20001e22
    2520:	.word	0x2002d806
    2524:	.word	0x20001e0c
    2528:	.word	0x2002d802
    252c:	.word	0x2002d808
    2530:	.word	0x2002d804

00002534 <menu2()>:
{   // have '?'
    2534:	push	{r4, lr}
    2536:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    2538:	bl	a470 <usb_serial_available>
    while(!Serial.available()) ;
    253c:	cmp	r0, #0
    253e:	beq.n	2538 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2540:	bl	a4e4 <usb_serial_getchar>
    ch=Serial.read();
    2544:	uxtb	r0, r0
    if(ch=='p') // get parameters
    2546:	cmp	r0, #112	; 0x70
    2548:	bne.n	25ae <menu2()+0x7a>
      Serial.println();
    254a:	ldr	r0, [pc, #576]	; (278c <menu2()+0x258>)
    254c:	bl	c48c <Print::println()>
      Serial.println(version);
    2550:	ldr	r1, [pc, #572]	; (2790 <menu2()+0x25c>)
    2552:	ldr	r0, [pc, #568]	; (278c <menu2()+0x258>)
    2554:	bl	1f24 <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    2558:	add	r0, sp, #24
    255a:	bl	3e1c <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    255e:	ldrsb.w	r3, [sp, #28]
    2562:	ldrsh.w	r2, [sp, #24]
    2566:	str	r3, [sp, #16]
    2568:	ldrsb.w	r3, [sp, #31]
    256c:	ldr	r1, [pc, #548]	; (2794 <menu2()+0x260>)
    256e:	str	r3, [sp, #12]
    2570:	ldrsb.w	r3, [sp, #30]
    2574:	ldr	r0, [pc, #532]	; (278c <menu2()+0x258>)
    2576:	str	r3, [sp, #8]
    2578:	ldrsb.w	r3, [sp, #29]
    257c:	str	r3, [sp, #4]
    257e:	ldrsb.w	r3, [sp, #27]
    2582:	str	r3, [sp, #0]
    2584:	ldrsb.w	r3, [sp, #26]
    2588:	bl	c4c4 <Print::printf(char const*, ...)>
      XRTCprintTime();
    258c:	bl	3e88 <XRTCprintTime()>
      Serial.println(rtcGetTimestamp());
    2590:	bl	3e18 <rtcGetTimestamp()>
    2594:	mov	r1, r0
    2596:	ldr	r0, [pc, #500]	; (278c <menu2()+0x258>)
    2598:	bl	1f24 <Print::println(char const*) [clone .isra.0]>
      printPar();
    259c:	bl	1fa8 <printPar()>
        virtual int available() { return usb_serial_available(); }
    25a0:	bl	a470 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    25a4:	cmp	r0, #0
    25a6:	bne.w	2786 <menu2()+0x252>
}
    25aa:	add	sp, #32
    25ac:	pop	{r4, pc}
    else if(ch=='d') // get date
    25ae:	cmp	r0, #54	; 0x36
    25b0:	bhi.n	25c8 <menu2()+0x94>
    25b2:	cmp	r0, #47	; 0x2f
    25b4:	bls.n	25a0 <menu2()+0x6c>
    25b6:	subs	r0, #49	; 0x31
    25b8:	cmp	r0, #5
    25ba:	bhi.w	273e <menu2()+0x20a>
    25be:	tbb	[pc, r0]
    25c2:	.short	0xa09a
    25c4:	.word	0xb8b2aca6
    25c8:	subs	r0, #97	; 0x61
    25ca:	uxtb	r3, r0
    25cc:	cmp	r3, #22
    25ce:	bhi.n	25a0 <menu2()+0x6c>
    25d0:	cmp	r0, #22
    25d2:	bhi.n	25a0 <menu2()+0x6c>
    25d4:	add	r3, pc, #4	; (adr r3, 25dc <menu2()+0xa8>)
    25d6:	ldr.w	pc, [r3, r0, lsl #2]
    25da:	nop
    25dc:	.word	0x0000268d
    25e0:	.word	0x0000275d
    25e4:	.word	0x000026df
    25e8:	.word	0x00002639
    25ec:	.word	0x000025a1
    25f0:	.word	0x000026bb
    25f4:	.word	0x000026eb
    25f8:	.word	0x0000266f
    25fc:	.word	0x000025a1
    2600:	.word	0x000025a1
    2604:	.word	0x0000276f
    2608:	.word	0x000025a1
    260c:	.word	0x000025a1
    2610:	.word	0x0000277b
    2614:	.word	0x000026a3
    2618:	.word	0x000025a1
    261c:	.word	0x000025a1
    2620:	.word	0x000026af
    2624:	.word	0x000026cf
    2628:	.word	0x00002657
    262c:	.word	0x000025a1
    2630:	.word	0x000025a1
    2634:	.word	0x0000274b
      rtc_get_datetime(&t);
    2638:	add	r0, sp, #24
    263a:	bl	3e1c <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    263e:	ldrsb.w	r3, [sp, #27]
    2642:	ldrsh.w	r2, [sp, #24]
    2646:	str	r3, [sp, #0]
    2648:	ldr	r1, [pc, #332]	; (2798 <menu2()+0x264>)
    264a:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec); 
    264e:	ldr	r0, [pc, #316]	; (278c <menu2()+0x258>)
    2650:	bl	c4c4 <Print::printf(char const*, ...)>
    2654:	b.n	25a0 <menu2()+0x6c>
      rtc_get_datetime(&t);
    2656:	add	r0, sp, #24
    2658:	bl	3e1c <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec); 
    265c:	ldrsb.w	r3, [sp, #31]
    2660:	ldrsb.w	r2, [sp, #29]
    2664:	str	r3, [sp, #0]
    2666:	ldr	r1, [pc, #308]	; (279c <menu2()+0x268>)
    2668:	ldrsb.w	r3, [sp, #30]
    266c:	b.n	264e <menu2()+0x11a>
    else if(ch=='h') { Serial.print("SerNum(h) = "); Serial.println(SerNum,HEX); }
    266e:	ldr	r1, [pc, #304]	; (27a0 <menu2()+0x26c>)
    2670:	ldr	r0, [pc, #280]	; (278c <menu2()+0x258>)
    2672:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    2676:	ldr	r1, [pc, #300]	; (27a4 <menu2()+0x270>)
    2678:	movs	r3, #0
    267a:	movs	r2, #16
    267c:	ldr	r1, [r1, #0]
    267e:	ldr	r0, [pc, #268]	; (278c <menu2()+0x258>)
    2680:	bl	c4de <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(long n)				{ return print(n) + println(); }
    2684:	ldr	r0, [pc, #260]	; (278c <menu2()+0x258>)
    2686:	bl	c48c <Print::println()>
    268a:	b.n	25a0 <menu2()+0x6c>
    else if(ch=='a') { Serial.print("t_acq (a) = "); Serial.println(t_acq); }
    268c:	ldr	r1, [pc, #280]	; (27a8 <menu2()+0x274>)
    268e:	ldr	r0, [pc, #252]	; (278c <menu2()+0x258>)
    2690:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2694:	ldr	r3, [pc, #276]	; (27ac <menu2()+0x278>)
    else if(ch=='6') { Serial.print("d_rep (6) = "); Serial.println(d_rep); }
    2696:	ldrh	r1, [r3, #0]
    2698:	uxth	r1, r1
    else if(ch=='w') { uint16_t *params=loadParameters(); Serial.print("params[0]  = "); Serial.println(params[0]); }
    269a:	ldr	r0, [pc, #240]	; (278c <menu2()+0x258>)
    269c:	bl	1ee4 <Print::println(int) [clone .isra.0]>
    26a0:	b.n	25a0 <menu2()+0x6c>
    else if(ch=='o') { Serial.print("t_on  (o) = "); Serial.println(t_on); }
    26a2:	ldr	r1, [pc, #268]	; (27b0 <menu2()+0x27c>)
    26a4:	ldr	r0, [pc, #228]	; (278c <menu2()+0x258>)
    26a6:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    26aa:	ldr	r3, [pc, #264]	; (27b4 <menu2()+0x280>)
    26ac:	b.n	2696 <menu2()+0x162>
    else if(ch=='r') { Serial.print("t_rep (r) = "); Serial.println(t_rep); }
    26ae:	ldr	r1, [pc, #264]	; (27b8 <menu2()+0x284>)
    26b0:	ldr	r0, [pc, #216]	; (278c <menu2()+0x258>)
    26b2:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    26b6:	ldr	r3, [pc, #260]	; (27bc <menu2()+0x288>)
    26b8:	b.n	2696 <menu2()+0x162>
    else if(ch=='f') { Serial.print("fsamp (f) = "); Serial.println(fsamp); }
    26ba:	ldr	r1, [pc, #260]	; (27c0 <menu2()+0x28c>)
    26bc:	ldr	r0, [pc, #204]	; (278c <menu2()+0x258>)
    26be:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    26c2:	ldr	r3, [pc, #256]	; (27c4 <menu2()+0x290>)
    26c4:	ldr	r0, [pc, #196]	; (278c <menu2()+0x258>)
    26c6:	ldr	r1, [r3, #0]
    26c8:	bl	c47a <Print::print(long)>
    26cc:	b.n	2684 <menu2()+0x150>
    else if(ch=='s') { Serial.print("shift (s) = "); Serial.println(shift); }
    26ce:	ldr	r1, [pc, #248]	; (27c8 <menu2()+0x294>)
    26d0:	ldr	r0, [pc, #184]	; (278c <menu2()+0x258>)
    26d2:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    26d6:	ldr	r3, [pc, #244]	; (27cc <menu2()+0x298>)
    else if(ch=='0') { Serial.print("d_0   (0) = "); Serial.println(d_0); }
    26d8:	ldrh	r1, [r3, #0]
    26da:	sxth	r1, r1
    26dc:	b.n	269a <menu2()+0x166>
    else if(ch=='c') { Serial.print("proc  (c) = "); Serial.println(proc); }
    26de:	ldr	r1, [pc, #240]	; (27d0 <menu2()+0x29c>)
    26e0:	ldr	r0, [pc, #168]	; (278c <menu2()+0x258>)
    26e2:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    26e6:	ldr	r3, [pc, #236]	; (27d4 <menu2()+0x2a0>)
    26e8:	b.n	26d8 <menu2()+0x1a4>
    else if(ch=='g') { Serial.print("again (g) = "); Serial.println(again); }
    26ea:	ldr	r1, [pc, #236]	; (27d8 <menu2()+0x2a4>)
    26ec:	ldr	r0, [pc, #156]	; (278c <menu2()+0x258>)
    26ee:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    26f2:	ldr	r3, [pc, #232]	; (27dc <menu2()+0x2a8>)
    26f4:	b.n	26d8 <menu2()+0x1a4>
    else if(ch=='1') { Serial.print("h_1   (1) = "); Serial.println(h_1); }
    26f6:	ldr	r1, [pc, #232]	; (27e0 <menu2()+0x2ac>)
    26f8:	ldr	r0, [pc, #144]	; (278c <menu2()+0x258>)
    26fa:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    26fe:	ldr	r3, [pc, #228]	; (27e4 <menu2()+0x2b0>)
    2700:	b.n	2696 <menu2()+0x162>
    else if(ch=='2') { Serial.print("h_2   (2) = "); Serial.println(h_2); }
    2702:	ldr	r1, [pc, #228]	; (27e8 <menu2()+0x2b4>)
    2704:	ldr	r0, [pc, #132]	; (278c <menu2()+0x258>)
    2706:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    270a:	ldr	r3, [pc, #224]	; (27ec <menu2()+0x2b8>)
    270c:	b.n	2696 <menu2()+0x162>
    else if(ch=='3') { Serial.print("h_3   (3) = "); Serial.println(h_3); }
    270e:	ldr	r1, [pc, #224]	; (27f0 <menu2()+0x2bc>)
    2710:	ldr	r0, [pc, #120]	; (278c <menu2()+0x258>)
    2712:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2716:	ldr	r3, [pc, #220]	; (27f4 <menu2()+0x2c0>)
    2718:	b.n	2696 <menu2()+0x162>
    else if(ch=='4') { Serial.print("h_4   (4) = "); Serial.println(h_4); }
    271a:	ldr	r1, [pc, #220]	; (27f8 <menu2()+0x2c4>)
    271c:	ldr	r0, [pc, #108]	; (278c <menu2()+0x258>)
    271e:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2722:	ldr	r3, [pc, #216]	; (27fc <menu2()+0x2c8>)
    2724:	b.n	2696 <menu2()+0x162>
    else if(ch=='5') { Serial.print("d_on  (5) = "); Serial.println(d_on); }
    2726:	ldr	r1, [pc, #216]	; (2800 <menu2()+0x2cc>)
    2728:	ldr	r0, [pc, #96]	; (278c <menu2()+0x258>)
    272a:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    272e:	ldr	r3, [pc, #212]	; (2804 <menu2()+0x2d0>)
    2730:	b.n	2696 <menu2()+0x162>
    else if(ch=='6') { Serial.print("d_rep (6) = "); Serial.println(d_rep); }
    2732:	ldr	r1, [pc, #212]	; (2808 <menu2()+0x2d4>)
    2734:	ldr	r0, [pc, #84]	; (278c <menu2()+0x258>)
    2736:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    273a:	ldr	r3, [pc, #208]	; (280c <menu2()+0x2d8>)
    273c:	b.n	2696 <menu2()+0x162>
    else if(ch=='0') { Serial.print("d_0   (0) = "); Serial.println(d_0); }
    273e:	ldr	r1, [pc, #208]	; (2810 <menu2()+0x2dc>)
    2740:	ldr	r0, [pc, #72]	; (278c <menu2()+0x258>)
    2742:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2746:	ldr	r3, [pc, #204]	; (2814 <menu2()+0x2e0>)
    2748:	b.n	26d8 <menu2()+0x1a4>
    else if(ch=='w') { uint16_t *params=loadParameters(); Serial.print("params[0]  = "); Serial.println(params[0]); }
    274a:	bl	2468 <loadParameters()>
    274e:	mov	r4, r0
    2750:	ldr	r1, [pc, #196]	; (2818 <menu2()+0x2e4>)
    2752:	ldr	r0, [pc, #56]	; (278c <menu2()+0x258>)
    2754:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2758:	ldrh	r1, [r4, #0]
    275a:	b.n	269a <menu2()+0x166>
    else if(ch=='b') { Serial.print("b   (b) = "); Serial.println((char *)b_string); }
    275c:	ldr	r1, [pc, #188]	; (281c <menu2()+0x2e8>)
    275e:	ldr	r0, [pc, #44]	; (278c <menu2()+0x258>)
    2760:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2764:	ldr	r1, [pc, #184]	; (2820 <menu2()+0x2ec>)
    else if(ch=='n') { Serial.print("n   (b) = "); Serial.println((char *)n_string); }
    2766:	ldr	r0, [pc, #36]	; (278c <menu2()+0x258>)
    2768:	bl	1f24 <Print::println(char const*) [clone .isra.0]>
    276c:	b.n	25a0 <menu2()+0x6c>
    else if(ch=='k') { Serial.print("k   (b) = "); Serial.println((char *)k_string); }
    276e:	ldr	r1, [pc, #180]	; (2824 <menu2()+0x2f0>)
    2770:	ldr	r0, [pc, #24]	; (278c <menu2()+0x258>)
    2772:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2776:	ldr	r1, [pc, #176]	; (2828 <menu2()+0x2f4>)
    2778:	b.n	2766 <menu2()+0x232>
    else if(ch=='n') { Serial.print("n   (b) = "); Serial.println((char *)n_string); }
    277a:	ldr	r1, [pc, #176]	; (282c <menu2()+0x2f8>)
    277c:	ldr	r0, [pc, #12]	; (278c <menu2()+0x258>)
    277e:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2782:	ldr	r1, [pc, #172]	; (2830 <menu2()+0x2fc>)
    2784:	b.n	2766 <menu2()+0x232>
        virtual int read() { return usb_serial_getchar(); }
    2786:	bl	a4e4 <usb_serial_getchar>
    278a:	b.n	25a0 <menu2()+0x6c>
    278c:	.word	0x20001c28
    2790:	.word	0x20000fad
    2794:	.word	0x20000e07
    2798:	.word	0x20000e2d
    279c:	.word	0x20000e47
    27a0:	.word	0x20000ebe
    27a4:	.word	0x20006a08
    27a8:	.word	0x20000eff
    27ac:	.word	0x20001e2a
    27b0:	.word	0x20000f0c
    27b4:	.word	0x20001e2c
    27b8:	.word	0x20000f19
    27bc:	.word	0x2002d8b6
    27c0:	.word	0x20000ecb
    27c4:	.word	0x20001e0c
    27c8:	.word	0x20000ed8
    27cc:	.word	0x2002d8b4
    27d0:	.word	0x20000ee5
    27d4:	.word	0x2002d810
    27d8:	.word	0x20000ef2
    27dc:	.word	0x2002d802
    27e0:	.word	0x20000f26
    27e4:	.word	0x2002d80c
    27e8:	.word	0x20000f33
    27ec:	.word	0x20001e24
    27f0:	.word	0x20000f40
    27f4:	.word	0x20001e26
    27f8:	.word	0x20000f4d
    27fc:	.word	0x20001e28
    2800:	.word	0x20000f5a
    2804:	.word	0x20001e22
    2808:	.word	0x20000f67
    280c:	.word	0x2002d806
    2810:	.word	0x20000f74
    2814:	.word	0x2002d804
    2818:	.word	0x20000e62
    281c:	.word	0x20000e70
    2820:	.word	0x2002de00
    2824:	.word	0x20000e7b
    2828:	.word	0x2002de33
    282c:	.word	0x20000e86
    2830:	.word	0x2002de5b

00002834 <menu(short)>:
{
    2834:	push	{r3, r4, r5, lr}
    2836:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    2838:	bl	a470 <usb_serial_available>
  if(Serial.available())
    283c:	cmp	r0, #0
    283e:	beq.w	2944 <menu(short)+0x110>
        virtual int read() { return usb_serial_getchar(); }
    2842:	bl	a4e4 <usb_serial_getchar>
    char ch=Serial.read();
    2846:	uxtb	r1, r0
    if(ch=='s') {Serial.print("\n Start"); adc_init(); adcStatus(); status=CLOSED;}
    2848:	cmp	r1, #115	; 0x73
    284a:	bne.n	2862 <menu(short)+0x2e>
    284c:	movs	r4, #0
    284e:	ldr	r1, [pc, #248]	; (2948 <menu(short)+0x114>)
    2850:	ldr	r0, [pc, #248]	; (294c <menu(short)+0x118>)
    2852:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    2856:	bl	3c4c <adc_init()>
    285a:	bl	3c54 <adcStatus()>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    285e:	ldr	r5, [pc, #236]	; (294c <menu(short)+0x118>)
    2860:	b.n	293c <menu(short)+0x108>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    2862:	cmp	r1, #101	; 0x65
    2864:	beq.n	28d4 <menu(short)+0xa0>
    2866:	bhi.n	2890 <menu(short)+0x5c>
    2868:	cmp	r1, #63	; 0x3f
    286a:	beq.n	2924 <menu(short)+0xf0>
    286c:	bhi.n	2886 <menu(short)+0x52>
    286e:	cmp	r1, #33	; 0x21
    2870:	beq.n	292a <menu(short)+0xf6>
    2872:	cmp	r1, #58	; 0x3a
    2874:	beq.n	291a <menu(short)+0xe6>
    else {Serial.print(ch); Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    2876:	ldr	r0, [pc, #212]	; (294c <menu(short)+0x118>)
    2878:	bl	1ef6 <Print::print(char) [clone .isra.0]>
    287c:	ldr	r1, [pc, #208]	; (2950 <menu(short)+0x11c>)
    287e:	ldr	r0, [pc, #204]	; (294c <menu(short)+0x118>)
    2880:	bl	1f24 <Print::println(char const*) [clone .isra.0]>
    2884:	b.n	285e <menu(short)+0x2a>
    2886:	cmp	r1, #98	; 0x62
    2888:	bne.n	2876 <menu(short)+0x42>
    else if(ch=='b') {reboot();}
    288a:	bl	244 <reboot()>
    288e:	b.n	285e <menu(short)+0x2a>
    2890:	sub.w	r3, r1, #109	; 0x6d
    2894:	uxtb	r2, r3
    2896:	cmp	r2, #11
    2898:	bhi.n	2876 <menu(short)+0x42>
    289a:	cmp	r3, #11
    289c:	bhi.n	2876 <menu(short)+0x42>
    289e:	add	r2, pc, #4	; (adr r2, 28a4 <menu(short)+0x70>)
    28a0:	ldr.w	pc, [r2, r3, lsl #2]
    28a4:	.word	0x000028e1
    28a8:	.word	0x00002877
    28ac:	.word	0x00002877
    28b0:	.word	0x00002877
    28b4:	.word	0x00002877
    28b8:	.word	0x000028ff
    28bc:	.word	0x00002877
    28c0:	.word	0x0000290b
    28c4:	.word	0x00002877
    28c8:	.word	0x00002877
    28cc:	.word	0x00002877
    28d0:	.word	0x00002905
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    28d4:	ldr	r1, [pc, #124]	; (2954 <menu(short)+0x120>)
    28d6:	movs	r4, #5
    28d8:	ldr	r0, [pc, #112]	; (294c <menu(short)+0x118>)
    28da:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
    28de:	b.n	285e <menu(short)+0x2a>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    28e0:	ldr	r5, [pc, #116]	; (2958 <menu(short)+0x124>)
    28e2:	ldr	r1, [pc, #120]	; (295c <menu(short)+0x128>)
    28e4:	ldrh	r3, [r5, #0]
    28e6:	ldr	r0, [pc, #100]	; (294c <menu(short)+0x118>)
    28e8:	rsb	r3, r3, #1
    28ec:	strh	r3, [r5, #0]
    28ee:	bl	1f20 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    28f2:	ldrsh.w	r1, [r5]
    28f6:	ldr	r0, [pc, #84]	; (294c <menu(short)+0x118>)
    28f8:	bl	c47a <Print::print(long)>
    28fc:	b.n	285e <menu(short)+0x2a>
    else if(ch=='r') {resetUSB();}
    28fe:	bl	224 <resetUSB()>
    2902:	b.n	285e <menu(short)+0x2a>
    else if(ch=='x') {powerDown();}
    2904:	bl	2c78 <powerDown()>
    2908:	b.n	285e <menu(short)+0x2a>
    else if(ch=='t') {hibernate_init(); hibernate_now(rtc_get()+30);}
    290a:	bl	2c8c <hibernate_init()>
    290e:	bl	b6cc <rtc_get>
    2912:	adds	r0, #30
    2914:	bl	2cc8 <hibernate_now(unsigned long)>
    2918:	b.n	285e <menu(short)+0x2a>
    else if(ch==':') status=menu1(status); 
    291a:	mov	r0, r4
    291c:	bl	23fc <menu1(short)>
    2920:	mov	r4, r0
    2922:	b.n	285e <menu(short)+0x2a>
    else if(ch=='?') menu2(); 
    2924:	bl	2534 <menu2()>
    2928:	b.n	285e <menu(short)+0x2a>
    else if(ch=='!') menu3(); 
    292a:	bl	2164 <menu3()>
    292e:	b.n	285e <menu(short)+0x2a>
    2930:	bl	a4e4 <usb_serial_getchar>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    2934:	uxtb	r1, r0
    2936:	mov	r0, r5
    2938:	bl	1ef6 <Print::print(char) [clone .isra.0]>
        virtual int available() { return usb_serial_available(); }
    293c:	bl	a470 <usb_serial_available>
    2940:	cmp	r0, #0
    2942:	bne.n	2930 <menu(short)+0xfc>
}
    2944:	mov	r0, r4
    2946:	pop	{r3, r4, r5, pc}
    2948:	.word	0x20000d8c
    294c:	.word	0x20001c28
    2950:	.word	0x20000da6
    2954:	.word	0x20000d94
    2958:	.word	0x2002d80e
    295c:	.word	0x20000d9b

00002960 <getStore()>:

uint16_t *getStore(void) {return store;}
    2960:	ldr	r0, [pc, #0]	; (2964 <getStore()+0x4>)
    2962:	bx	lr
    2964:	.word	0x2002d7e0

00002968 <configGetInt16(char*)>:
 * k = cinqueTerre; cruise
 * n = boa1; sensor
 */

int16_t configGetInt16(char *txt)
{ while(*txt++ !='=') continue;
    2968:	push	{r0, r1, r2, lr}
    296a:	ldrb.w	r3, [r0], #1
    296e:	cmp	r3, #61	; 0x3d
    2970:	bne.n	296a <configGetInt16(char*)+0x2>
  int16_t val;
  sscanf(txt,"%hd",&val);
    2972:	add.w	r2, sp, #6
    2976:	ldr	r1, [pc, #16]	; (2988 <configGetInt16(char*)+0x20>)
    2978:	bl	e6e4 <siscanf>
  return val;
}
    297c:	ldrsh.w	r0, [sp, #6]
    2980:	add	sp, #12
    2982:	ldr.w	pc, [sp], #4
    2986:	nop
    2988:	.word	0x20000cc0

0000298c <configGetInt32(char*)>:

int32_t configGetInt32(char *txt)
{ while(*txt++ !='=') continue;
    298c:	push	{r0, r1, r2, lr}
    298e:	ldrb.w	r3, [r0], #1
    2992:	cmp	r3, #61	; 0x3d
    2994:	bne.n	298e <configGetInt32(char*)+0x2>
  int32_t val;
  sscanf(txt,"%ld",&val);
    2996:	add	r2, sp, #4
    2998:	ldr	r1, [pc, #12]	; (29a8 <configGetInt32(char*)+0x1c>)
    299a:	bl	e6e4 <siscanf>
  return val;
}
    299e:	ldr	r0, [sp, #4]
    29a0:	add	sp, #12
    29a2:	ldr.w	pc, [sp], #4
    29a6:	nop
    29a8:	.word	0x200012f0

000029ac <configGetString(char*, char*)>:

void configGetString(char *txt, char *str)
{ while(*txt++ !='=') continue;
    29ac:	ldrb.w	r3, [r0], #1
    29b0:	cmp	r3, #61	; 0x3d
    29b2:	bne.n	29ac <configGetString(char*, char*)>
    29b4:	mov	r3, r0
  while(*txt == ' ') txt++;
    29b6:	adds	r0, #1
    29b8:	ldrb	r2, [r3, #0]
    29ba:	cmp	r2, #32
    29bc:	beq.n	29b4 <configGetString(char*, char*)+0x8>
    29be:	subs	r3, #1
  while (*txt !=';') *str++=*txt++;
    29c0:	ldrb.w	r2, [r3, #1]!
    29c4:	cmp	r2, #59	; 0x3b
    29c6:	bne.n	29ce <configGetString(char*, char*)+0x22>
  *str='\0';
    29c8:	movs	r3, #0
    29ca:	strb	r3, [r1, #0]
}
    29cc:	bx	lr
  while (*txt !=';') *str++=*txt++;
    29ce:	strb.w	r2, [r1], #1
    29d2:	b.n	29c0 <configGetString(char*, char*)+0x14>

000029d4 <skipEOL(char*)>:

char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    29d4:	ldrb.w	r3, [r0], #1
    29d8:	cmp	r3, #31
    29da:	bhi.n	29d4 <skipEOL(char*)>
    29dc:	bx	lr
	...

000029e0 <decodeConfigfromFile(char*)>:

void decodeConfigfromFile(char *configText)
{
    29e0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(configText)
    29e4:	mov	r4, r0
    29e6:	cmp	r0, #0
    29e8:	beq.w	2c28 <decodeConfigfromFile(char*)+0x248>
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
      else if(ch=='g') { store[13]=again= configGetInt16(cptr); cptr=skipEOL(cptr); setAGain(again);      }
      else if(ch=='0') { store[15]=d_0=  configGetInt16(cptr); cptr=skipEOL(cptr); }
      else if(ch=='b') { configGetString(cptr,(char *)&b_string[0]); cptr=skipEOL(cptr); }
      else if(ch=='k') { configGetString(cptr,(char *)&k_string[0]); cptr=skipEOL(cptr); }
      else if(ch=='n') { configGetString(cptr,(char *)&n_string[0]); cptr=skipEOL(cptr); }
    29ec:	ldr	r6, [pc, #572]	; (2c2c <decodeConfigfromFile(char*)+0x24c>)
    char *eptr=cptr+strlen(configText);
    29ee:	bl	eb40 <strlen>
      else if(ch=='k') { configGetString(cptr,(char *)&k_string[0]); cptr=skipEOL(cptr); }
    29f2:	ldr	r7, [pc, #572]	; (2c30 <decodeConfigfromFile(char*)+0x250>)
    char *eptr=cptr+strlen(configText);
    29f4:	adds	r5, r4, r0
      else if(ch=='b') { configGetString(cptr,(char *)&b_string[0]); cptr=skipEOL(cptr); }
    29f6:	ldr.w	r8, [pc, #632]	; 2c70 <decodeConfigfromFile(char*)+0x290>
    Serial.println(configText);
    29fa:	mov	r1, r4
    29fc:	ldr	r0, [pc, #564]	; (2c34 <decodeConfigfromFile(char*)+0x254>)
    29fe:	bl	1f24 <Print::println(char const*) [clone .isra.0]>
    while(cptr<eptr)
    2a02:	cmp	r4, r5
    2a04:	bcc.n	2a0e <decodeConfigfromFile(char*)+0x2e>
    }
    printPar();
  }
}
    2a06:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    printPar();
    2a0a:	b.w	1fa8 <printPar()>
      char ch=*cptr++;
    2a0e:	ldrb.w	r3, [r4], #1
      if(ch<=' ') continue;
    2a12:	cmp	r3, #32
    2a14:	bls.n	2a02 <decodeConfigfromFile(char*)+0x22>
      else if(ch==';') cptr=skipEOL(cptr);
    2a16:	cmp	r3, #59	; 0x3b
    2a18:	bhi.n	2a5c <decodeConfigfromFile(char*)+0x7c>
    2a1a:	cmp	r3, #47	; 0x2f
    2a1c:	bls.n	2a02 <decodeConfigfromFile(char*)+0x22>
    2a1e:	subs	r3, #48	; 0x30
    2a20:	cmp	r3, #11
    2a22:	bhi.n	2a02 <decodeConfigfromFile(char*)+0x22>
    2a24:	add	r2, pc, #4	; (adr r2, 2a2c <decodeConfigfromFile(char*)+0x4c>)
    2a26:	ldr.w	pc, [r2, r3, lsl #2]
    2a2a:	nop
    2a2c:	.word	0x00002c07
    2a30:	.word	0x00002b4b
    2a34:	.word	0x00002b5d
    2a38:	.word	0x00002b6f
    2a3c:	.word	0x00002b81
    2a40:	.word	0x00002b93
    2a44:	.word	0x00002ba5
    2a48:	.word	0x00002a03
    2a4c:	.word	0x00002a03
    2a50:	.word	0x00002a03
    2a54:	.word	0x00002a03
    2a58:	.word	0x00002ad7
    2a5c:	subs	r3, #97	; 0x61
    2a5e:	uxtb	r2, r3
    2a60:	cmp	r2, #22
    2a62:	bhi.n	2a02 <decodeConfigfromFile(char*)+0x22>
    2a64:	cmp	r3, #22
    2a66:	bhi.n	2a02 <decodeConfigfromFile(char*)+0x22>
    2a68:	add	r2, pc, #4	; (adr r2, 2a70 <decodeConfigfromFile(char*)+0x90>)
    2a6a:	ldr.w	pc, [r2, r3, lsl #2]
    2a6e:	nop
    2a70:	.word	0x00002ae1
    2a74:	.word	0x00002c17
    2a78:	.word	0x00002b17
    2a7c:	.word	0x00002a03
    2a80:	.word	0x00002a03
    2a84:	.word	0x00002bb7
    2a88:	.word	0x00002be7
    2a8c:	.word	0x00002a03
    2a90:	.word	0x00002a03
    2a94:	.word	0x00002a03
    2a98:	.word	0x00002c21
    2a9c:	.word	0x00002a03
    2aa0:	.word	0x00002a03
    2aa4:	.word	0x00002c25
    2aa8:	.word	0x00002af3
    2aac:	.word	0x00002a03
    2ab0:	.word	0x00002a03
    2ab4:	.word	0x00002b05
    2ab8:	.word	0x00002b27
    2abc:	.word	0x00002a03
    2ac0:	.word	0x00002a03
    2ac4:	.word	0x00002a03
    2ac8:	.word	0x00002acd
      else if(ch=='w') { store[0]=configGetInt16(cptr); cptr=skipEOL(cptr); }
    2acc:	mov	r0, r4
    2ace:	bl	2968 <configGetInt16(char*)>
    2ad2:	ldr	r3, [pc, #356]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2ad4:	strh	r0, [r3, #0]
      else if(ch=='n') { configGetString(cptr,(char *)&n_string[0]); cptr=skipEOL(cptr); }
    2ad6:	mov	r0, r4
    2ad8:	bl	29d4 <skipEOL(char*)>
    2adc:	mov	r4, r0
    2ade:	b.n	2a02 <decodeConfigfromFile(char*)+0x22>
      else if(ch=='a') { store[1]=t_acq=configGetInt16(cptr); cptr=skipEOL(cptr);}
    2ae0:	mov	r0, r4
    2ae2:	bl	2968 <configGetInt16(char*)>
    2ae6:	ldr	r3, [pc, #340]	; (2c3c <decodeConfigfromFile(char*)+0x25c>)
    2ae8:	uxth	r0, r0
    2aea:	strh	r0, [r3, #0]
    2aec:	ldr	r3, [pc, #328]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2aee:	strh	r0, [r3, #2]
    2af0:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='o') { store[2]=t_on= configGetInt16(cptr); cptr=skipEOL(cptr);}
    2af2:	mov	r0, r4
    2af4:	bl	2968 <configGetInt16(char*)>
    2af8:	ldr	r3, [pc, #324]	; (2c40 <decodeConfigfromFile(char*)+0x260>)
    2afa:	uxth	r0, r0
    2afc:	strh	r0, [r3, #0]
    2afe:	ldr	r3, [pc, #312]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2b00:	strh	r0, [r3, #4]
    2b02:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='r') { store[3]=t_rep=configGetInt16(cptr); cptr=skipEOL(cptr);}
    2b04:	mov	r0, r4
    2b06:	bl	2968 <configGetInt16(char*)>
    2b0a:	ldr	r3, [pc, #312]	; (2c44 <decodeConfigfromFile(char*)+0x264>)
    2b0c:	uxth	r0, r0
    2b0e:	strh	r0, [r3, #0]
    2b10:	ldr	r3, [pc, #292]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2b12:	strh	r0, [r3, #6]
    2b14:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='c') { store[4]=proc= configGetInt16(cptr); cptr=skipEOL(cptr);}
    2b16:	mov	r0, r4
    2b18:	bl	2968 <configGetInt16(char*)>
    2b1c:	ldr	r3, [pc, #296]	; (2c48 <decodeConfigfromFile(char*)+0x268>)
    2b1e:	strh	r0, [r3, #0]
    2b20:	ldr	r3, [pc, #276]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2b22:	strh	r0, [r3, #8]
    2b24:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='s') { store[5]=shift=configGetInt16(cptr); cptr=skipEOL(cptr);if(shift<0) shift=0; }
    2b26:	mov	r0, r4
    2b28:	bl	2968 <configGetInt16(char*)>
    2b2c:	ldr	r3, [pc, #264]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2b2e:	ldr	r2, [pc, #284]	; (2c4c <decodeConfigfromFile(char*)+0x26c>)
    2b30:	strh	r0, [r3, #10]
    2b32:	strh	r0, [r2, #0]
    2b34:	mov	r0, r4
    2b36:	bl	29d4 <skipEOL(char*)>
    2b3a:	ldrh	r3, [r2, #0]
    2b3c:	mov	r4, r0
    2b3e:	lsls	r3, r3, #16
    2b40:	bpl.w	2a02 <decodeConfigfromFile(char*)+0x22>
    2b44:	movs	r3, #0
    2b46:	strh	r3, [r2, #0]
    2b48:	b.n	2a02 <decodeConfigfromFile(char*)+0x22>
      else if(ch=='1') { store[6]=h_1=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    2b4a:	mov	r0, r4
    2b4c:	bl	2968 <configGetInt16(char*)>
    2b50:	ldr	r3, [pc, #252]	; (2c50 <decodeConfigfromFile(char*)+0x270>)
    2b52:	uxth	r0, r0
    2b54:	strh	r0, [r3, #0]
    2b56:	ldr	r3, [pc, #224]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2b58:	strh	r0, [r3, #12]
    2b5a:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='2') { store[7]=h_2=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    2b5c:	mov	r0, r4
    2b5e:	bl	2968 <configGetInt16(char*)>
    2b62:	ldr	r3, [pc, #240]	; (2c54 <decodeConfigfromFile(char*)+0x274>)
    2b64:	uxth	r0, r0
    2b66:	strh	r0, [r3, #0]
    2b68:	ldr	r3, [pc, #204]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2b6a:	strh	r0, [r3, #14]
    2b6c:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='3') { store[8]=h_3=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    2b6e:	mov	r0, r4
    2b70:	bl	2968 <configGetInt16(char*)>
    2b74:	ldr	r3, [pc, #224]	; (2c58 <decodeConfigfromFile(char*)+0x278>)
    2b76:	uxth	r0, r0
    2b78:	strh	r0, [r3, #0]
    2b7a:	ldr	r3, [pc, #188]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2b7c:	strh	r0, [r3, #16]
    2b7e:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='4') { store[9]=h_4=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    2b80:	mov	r0, r4
    2b82:	bl	2968 <configGetInt16(char*)>
    2b86:	ldr	r3, [pc, #212]	; (2c5c <decodeConfigfromFile(char*)+0x27c>)
    2b88:	uxth	r0, r0
    2b8a:	strh	r0, [r3, #0]
    2b8c:	ldr	r3, [pc, #168]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2b8e:	strh	r0, [r3, #18]
    2b90:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='5') { store[10]=d_on= configGetInt16(cptr); cptr=skipEOL(cptr); }
    2b92:	mov	r0, r4
    2b94:	bl	2968 <configGetInt16(char*)>
    2b98:	ldr	r3, [pc, #196]	; (2c60 <decodeConfigfromFile(char*)+0x280>)
    2b9a:	uxth	r0, r0
    2b9c:	strh	r0, [r3, #0]
    2b9e:	ldr	r3, [pc, #152]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2ba0:	strh	r0, [r3, #20]
    2ba2:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='6') { store[11]=d_rep=configGetInt16(cptr); cptr=skipEOL(cptr); }
    2ba4:	mov	r0, r4
    2ba6:	bl	2968 <configGetInt16(char*)>
    2baa:	ldr	r3, [pc, #184]	; (2c64 <decodeConfigfromFile(char*)+0x284>)
    2bac:	uxth	r0, r0
    2bae:	strh	r0, [r3, #0]
    2bb0:	ldr	r3, [pc, #132]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2bb2:	strh	r0, [r3, #22]
    2bb4:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
    2bb6:	ldr.w	r9, [pc, #188]	; 2c74 <decodeConfigfromFile(char*)+0x294>
    2bba:	mov	r0, r4
    2bbc:	bl	298c <configGetInt32(char*)>
    2bc0:	str.w	r0, [r9]
    2bc4:	mov	r0, r4
    2bc6:	bl	29d4 <skipEOL(char*)>
    2bca:	mov	r4, r0
    2bcc:	ldr.w	r0, [r9]
    2bd0:	bl	c90 <acqModifyFrequency(unsigned long)>
    2bd4:	mov.w	r2, #1000	; 0x3e8
    2bd8:	ldr.w	r3, [r9]
    2bdc:	sdiv	r3, r3, r2
    2be0:	ldr	r2, [pc, #84]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2be2:	strh	r3, [r2, #24]
    2be4:	b.n	2a02 <decodeConfigfromFile(char*)+0x22>
      else if(ch=='g') { store[13]=again= configGetInt16(cptr); cptr=skipEOL(cptr); setAGain(again);      }
    2be6:	mov	r0, r4
    2be8:	bl	2968 <configGetInt16(char*)>
    2bec:	ldr	r2, [pc, #120]	; (2c68 <decodeConfigfromFile(char*)+0x288>)
    2bee:	ldr	r3, [pc, #72]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2bf0:	strh	r0, [r2, #0]
    2bf2:	strh	r0, [r3, #26]
    2bf4:	mov	r0, r4
    2bf6:	bl	29d4 <skipEOL(char*)>
    2bfa:	mov	r4, r0
    2bfc:	ldrh	r0, [r2, #0]
    2bfe:	sxtb	r0, r0
    2c00:	bl	3c52 <setAGain(signed char)>
    2c04:	b.n	2a02 <decodeConfigfromFile(char*)+0x22>
      else if(ch=='0') { store[15]=d_0=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    2c06:	mov	r0, r4
    2c08:	bl	2968 <configGetInt16(char*)>
    2c0c:	ldr	r3, [pc, #92]	; (2c6c <decodeConfigfromFile(char*)+0x28c>)
    2c0e:	strh	r0, [r3, #0]
    2c10:	ldr	r3, [pc, #36]	; (2c38 <decodeConfigfromFile(char*)+0x258>)
    2c12:	strh	r0, [r3, #30]
    2c14:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='b') { configGetString(cptr,(char *)&b_string[0]); cptr=skipEOL(cptr); }
    2c16:	mov	r1, r8
      else if(ch=='n') { configGetString(cptr,(char *)&n_string[0]); cptr=skipEOL(cptr); }
    2c18:	mov	r0, r4
    2c1a:	bl	29ac <configGetString(char*, char*)>
    2c1e:	b.n	2ad6 <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='k') { configGetString(cptr,(char *)&k_string[0]); cptr=skipEOL(cptr); }
    2c20:	mov	r1, r7
    2c22:	b.n	2c18 <decodeConfigfromFile(char*)+0x238>
      else if(ch=='n') { configGetString(cptr,(char *)&n_string[0]); cptr=skipEOL(cptr); }
    2c24:	mov	r1, r6
    2c26:	b.n	2c18 <decodeConfigfromFile(char*)+0x238>
}
    2c28:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c2c:	.word	0x2002de5b
    2c30:	.word	0x2002de33
    2c34:	.word	0x20001c28
    2c38:	.word	0x2002d7e0
    2c3c:	.word	0x20001e2a
    2c40:	.word	0x20001e2c
    2c44:	.word	0x2002d8b6
    2c48:	.word	0x2002d810
    2c4c:	.word	0x2002d8b4
    2c50:	.word	0x2002d80c
    2c54:	.word	0x20001e24
    2c58:	.word	0x20001e26
    2c5c:	.word	0x20001e28
    2c60:	.word	0x20001e22
    2c64:	.word	0x2002d806
    2c68:	.word	0x2002d802
    2c6c:	.word	0x2002d804
    2c70:	.word	0x2002de00
    2c74:	.word	0x20001e0c

00002c78 <powerDown()>:
    SNVS_LPCR |= (1 << 6); // turn off power
    2c78:	ldr	r2, [pc, #12]	; (2c88 <powerDown()+0x10>)
    2c7a:	ldr	r3, [r2, #56]	; 0x38
    2c7c:	orr.w	r3, r3, #64	; 0x40
    2c80:	str	r3, [r2, #56]	; 0x38
    while (1) asm("wfi");      
    2c82:	wfi
    2c84:	b.n	2c82 <powerDown()+0xa>
    2c86:	nop
    2c88:	.word	0x400d4000

00002c8c <hibernate_init()>:
  {
    2c8c:	push	{r3, lr}
    stopSystem();
    2c8e:	bl	2a4 <stopSystem()>
    snvs_tmp = SNVS_LPCR;
    2c92:	ldr	r3, [pc, #44]	; (2cc0 <hibernate_init()+0x34>)
    2c94:	ldr	r2, [pc, #44]	; (2cc4 <hibernate_init()+0x38>)
    2c96:	ldr	r1, [r3, #56]	; 0x38
    2c98:	str	r1, [r2, #0]
    SNVS_LPSR |= 1;
    2c9a:	ldr	r2, [r3, #76]	; 0x4c
    2c9c:	orr.w	r2, r2, #1
    2ca0:	str	r2, [r3, #76]	; 0x4c
    asm volatile("DSB");
    2ca2:	dsb	sy
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2ca6:	ldr	r2, [r3, #56]	; 0x38
    2ca8:	bic.w	r2, r2, #2
    2cac:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2cae:	ldr	r2, [r3, #56]	; 0x38
    2cb0:	ands.w	r2, r2, #2
    2cb4:	bne.n	2cae <hibernate_init()+0x22>
    SNVS_LPTAR = 0;
    2cb6:	str	r2, [r3, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    2cb8:	ldr	r2, [r3, #88]	; 0x58
    2cba:	cmp	r2, #0
    2cbc:	bne.n	2cb8 <hibernate_init()+0x2c>
  }
    2cbe:	pop	{r3, pc}
    2cc0:	.word	0x400d4000
    2cc4:	.word	0x2002ca3c

00002cc8 <hibernate_now(unsigned long)>:
  {
    2cc8:	push	{r3, lr}
      __disable_irq();
    2cca:	cpsid	i
      SNVS_LPTAR = secs;
    2ccc:	ldr	r3, [pc, #32]	; (2cf0 <hibernate_now(unsigned long)+0x28>)
    2cce:	str	r0, [r3, #88]	; 0x58
      while (SNVS_LPTAR != secs);
    2cd0:	ldr	r2, [r3, #88]	; 0x58
    2cd2:	cmp	r2, r0
    2cd4:	bne.n	2cd0 <hibernate_now(unsigned long)+0x8>
      SNVS_LPCR = snvs_tmp | SNVS_LPCR_LPTA_EN_MASK; 
    2cd6:	ldr	r2, [pc, #28]	; (2cf4 <hibernate_now(unsigned long)+0x2c>)
    2cd8:	ldr	r2, [r2, #0]
    2cda:	orr.w	r2, r2, #2
    2cde:	str	r2, [r3, #56]	; 0x38
      while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    2ce0:	ldr	r2, [pc, #12]	; (2cf0 <hibernate_now(unsigned long)+0x28>)
    2ce2:	ldr	r3, [r2, #56]	; 0x38
    2ce4:	lsls	r3, r3, #30
    2ce6:	bpl.n	2ce2 <hibernate_now(unsigned long)+0x1a>
      __enable_irq();
    2ce8:	cpsie	i
      powerDown(); 
    2cea:	bl	2c78 <powerDown()>
    2cee:	nop
    2cf0:	.word	0x400d4000
    2cf4:	.word	0x2002ca3c

00002cf8 <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  static int head=0;
  static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    2cf8:	ldr	r3, [pc, #20]	; (2d10 <getDataCount()+0x18>)
    2cfa:	ldr	r2, [pc, #24]	; (2d14 <getDataCount()+0x1c>)
    2cfc:	ldr	r3, [r3, #0]
    2cfe:	ldr	r2, [r2, #0]
    2d00:	subs	r3, r3, r2
    2d02:	uxth	r0, r3
    2d04:	cmp	r3, #0
    2d06:	itt	lt
    2d08:	addlt.w	r0, r0, #288	; 0x120
    2d0c:	uxthlt	r0, r0
    2d0e:	bx	lr
    2d10:	.word	0x2002c630
    2d14:	.word	0x2002c62c

00002d18 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    2d18:	ldr	r3, [pc, #4]	; (2d20 <queue_isBusy()+0x8>)
    2d1a:	ldr	r0, [r3, #0]
    2d1c:	bx	lr
    2d1e:	nop
    2d20:	.word	0x20008410

00002d24 <pushData(unsigned long*)>:
        while(queue_busy); 
      #endif
  }

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    2d24:	push	{r3, r4, r5, lr}
    queue_lock();
    queue_busy=1;
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2d26:	ldr	r5, [pc, #56]	; (2d60 <pushData(unsigned long*)+0x3c>)
    2d28:	mov.w	r2, #288	; 0x120
  {
    2d2c:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2d2e:	ldr	r3, [r5, #0]
    2d30:	adds	r4, r3, #1
    2d32:	sdiv	r0, r4, r2
    2d36:	mls	r4, r2, r0, r4
    2d3a:	ldr	r2, [pc, #40]	; (2d64 <pushData(unsigned long*)+0x40>)
    2d3c:	ldr	r2, [r2, #0]
    2d3e:	cmp	r4, r2
    2d40:	beq.n	2d5c <pushData(unsigned long*)+0x38>
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    2d42:	ldr	r0, [pc, #36]	; (2d68 <pushData(unsigned long*)+0x44>)
    2d44:	mov.w	r2, #512	; 0x200
    2d48:	add.w	r0, r0, r3, lsl #9
    2d4c:	bl	9f88 <memcpy>
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
    2d50:	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    2d52:	str	r4, [r5, #0]
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2d54:	ldr	r3, [pc, #20]	; (2d6c <pushData(unsigned long*)+0x48>)
    2d56:	movs	r2, #0
    2d58:	str	r2, [r3, #0]
  }
    2d5a:	pop	{r3, r4, r5, pc}
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2d5c:	movs	r0, #0
    2d5e:	b.n	2d54 <pushData(unsigned long*)+0x30>
    2d60:	.word	0x2002c630
    2d64:	.word	0x2002c62c
    2d68:	.word	0x20008414
    2d6c:	.word	0x20008410

00002d70 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    2d70:	push	{r3, r4, r5, lr}
    queue_lock();
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    2d72:	ldr	r5, [pc, #56]	; (2dac <pullData(unsigned long*)+0x3c>)
    2d74:	ldr	r3, [pc, #56]	; (2db0 <pullData(unsigned long*)+0x40>)
    2d76:	ldr	r4, [r5, #0]
    2d78:	ldr	r3, [r3, #0]
    2d7a:	cmp	r4, r3
    2d7c:	beq.n	2da6 <pullData(unsigned long*)+0x36>
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    2d7e:	ldr	r1, [pc, #52]	; (2db4 <pullData(unsigned long*)+0x44>)
    2d80:	mov.w	r2, #512	; 0x200
    2d84:	add.w	r1, r1, r4, lsl #9
    head = (head+1)%MAXBUF;
    2d88:	adds	r4, #1
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    2d8a:	bl	9f88 <memcpy>
    head = (head+1)%MAXBUF;
    2d8e:	mov.w	r3, #288	; 0x120
    queue_busy=0;
    return 1; // signal success.
    2d92:	movs	r0, #1
    head = (head+1)%MAXBUF;
    2d94:	sdiv	r2, r4, r3
    2d98:	mls	r4, r3, r2, r4
    2d9c:	str	r4, [r5, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    2d9e:	ldr	r3, [pc, #24]	; (2db8 <pullData(unsigned long*)+0x48>)
    2da0:	movs	r2, #0
    2da2:	str	r2, [r3, #0]
  }
    2da4:	pop	{r3, r4, r5, pc}
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    2da6:	movs	r0, #0
    2da8:	b.n	2d9e <pullData(unsigned long*)+0x2e>
    2daa:	nop
    2dac:	.word	0x2002c62c
    2db0:	.word	0x2002c630
    2db4:	.word	0x20008414
    2db8:	.word	0x20008410

00002dbc <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
    2dbc:	push	{r0, r1, r4, r5, r6, lr}
    2dbe:	mov	r6, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2dc0:	mov	r0, sp
{
    2dc2:	mov	r5, r2
    2dc4:	mov	r4, r1
    rtc_get_datetime(&t);
    2dc6:	bl	3e1c <rtc_get_datetime(datetime_t*)>
  year -= 1980;
    2dca:	ldrh.w	r2, [sp]

    *date = FS_DATE(t.year,t.month,t.day);
    2dce:	ldrsb.w	r3, [sp, #3]
    2dd2:	subw	r2, r2, #1980	; 0x7bc
    2dd6:	uxth	r2, r2
         year << 9 | month << 5 | day;
    2dd8:	cmp	r2, #127	; 0x7f
    2dda:	bhi.n	2e26 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2ddc:	ldrb.w	r1, [sp, #2]
  return year > 127 || month > 12 || day > 31 ? 0 :
    2de0:	cmp	r1, #12
    2de2:	bhi.n	2e26 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2de4:	uxtb	r3, r3
    2de6:	cmp	r3, #31
    2de8:	bhi.n	2e26 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
         year << 9 | month << 5 | day;
    2dea:	orr.w	r3, r3, r1, lsl #5
    2dee:	orr.w	r3, r3, r2, lsl #9
    2df2:	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    2df4:	ldrb.w	r1, [sp, #5]
    2df8:	ldrsb.w	r2, [sp, #7]
         hour << 11 | minute << 5 | second >> 1;
    2dfc:	cmp	r1, #23
    *date = FS_DATE(t.year,t.month,t.day);
    2dfe:	strh	r3, [r6, #0]
    2e00:	bhi.n	2e2a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    *time = FS_TIME(t.hour,t.min,t.sec);
    2e02:	ldrb.w	r3, [sp, #6]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    2e06:	cmp	r3, #59	; 0x3b
    2e08:	bhi.n	2e2a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    2e0a:	uxtb	r2, r2
    2e0c:	cmp	r2, #59	; 0x3b
    2e0e:	bhi.n	2e2a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
         hour << 11 | minute << 5 | second >> 1;
    2e10:	lsls	r3, r3, #5
    2e12:	orr.w	r3, r3, r1, lsl #11
    2e16:	orr.w	r3, r3, r2, lsr #1
    2e1a:	uxth	r3, r3
    2e1c:	strh	r3, [r4, #0]
    *ms10 = 0;
    2e1e:	movs	r3, #0
    2e20:	strb	r3, [r5, #0]
}
    2e22:	add	sp, #8
    2e24:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    2e26:	movs	r3, #0
    2e28:	b.n	2df4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
         hour << 11 | minute << 5 | second >> 1;
    2e2a:	movs	r3, #0
    2e2c:	b.n	2e1c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x60>

00002e2e <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    2e2e:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2e30:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    2e32:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2e34:	cbz	r5, 2e40 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    2e36:	cbnz	r3, 2e4a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
    2e38:	mov	r0, r5
  }
    2e3a:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2e3c:	b.w	6fda <FatFile::seekSet(unsigned long)>
    2e40:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
    2e42:	cbz	r0, 2e4a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    2e44:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    2e46:	b.w	5950 <ExFatFile::seekSet(unsigned long long)>
  }
    2e4a:	pop	{r4, r5}
    2e4c:	bx	lr

00002e4e <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2e4e:	push	{r0, r1, r4, lr}
    2e50:	mov	r4, r0
    2e52:	cbz	r1, 2e6e <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    2e54:	mov	r0, r1
    2e56:	str	r1, [sp, #4]
    2e58:	bl	eb40 <strlen>
    2e5c:	ldr	r3, [r4, #0]
    2e5e:	mov	r2, r0
    2e60:	ldr	r1, [sp, #4]
    2e62:	ldr	r3, [r3, #4]
    2e64:	mov	r0, r4
    2e66:	add	sp, #8
    2e68:	ldmia.w	sp!, {r4, lr}
    2e6c:	bx	r3
    2e6e:	add	sp, #8
    2e70:	pop	{r4, pc}

00002e72 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    2e72:	push	{r4, lr}
    2e74:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    2e76:	bl	2e4e <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    2e7a:	mov	r0, r4
    2e7c:	ldmia.w	sp!, {r4, lr}
    2e80:	b.w	c48c <Print::println()>

00002e84 <FsBaseFile::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
    2e84:	ldr	r3, [r0, #56]	; 0x38
  int read() {
    2e86:	push	{r0, r1, r2, lr}
    return m_fFile ? m_fFile->read(buf, count) :
    2e88:	cbz	r3, 2ea0 <FsBaseFile::read()+0x1c>
    2e8a:	movs	r2, #1
    2e8c:	add.w	r1, sp, #7
    2e90:	mov	r0, r3
    2e92:	bl	6df0 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
    2e96:	cmp	r0, #1
    2e98:	bne.n	2ea4 <FsBaseFile::read()+0x20>
    2e9a:	ldrb.w	r0, [sp, #7]
    2e9e:	b.n	2ea8 <FsBaseFile::read()+0x24>
    2ea0:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
    2ea2:	cbnz	r0, 2eae <FsBaseFile::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
    2ea4:	mov.w	r0, #4294967295
  }
    2ea8:	add	sp, #12
    2eaa:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
    2eae:	movs	r2, #1
    2eb0:	add.w	r1, sp, #7
    2eb4:	bl	57a0 <ExFatFile::read(void*, unsigned int)>
    2eb8:	b.n	2e96 <FsBaseFile::read()+0x12>

00002eba <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() :
    2eba:	ldr	r3, [r0, #56]	; 0x38
    2ebc:	cbz	r3, 2ec4 <FsBaseFile::sync()+0xa>
    2ebe:	mov	r0, r3
    2ec0:	b.w	7224 <FatFile::sync()>
    2ec4:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->sync() : false;
    2ec6:	cbz	r0, 2ecc <FsBaseFile::sync()+0x12>
    2ec8:	b.w	6584 <ExFatFile::sync()>
  }
    2ecc:	bx	lr
	...

00002ed0 <loadConfigfromFile()>:

static char configText[1024];
uint32_t sdSectorCount=0;

int16_t loadConfigfromFile(void)
{
    2ed0:	push	{r4, r5, r6, lr}
    int ii=0;
    file = sd->open("config.txt"); 
    2ed2:	ldr	r1, [pc, #100]	; (2f38 <loadConfigfromFile()+0x68>)
{
    2ed4:	sub	sp, #80	; 0x50
    file = sd->open("config.txt"); 
    2ed6:	ldr	r2, [pc, #100]	; (2f3c <loadConfigfromFile()+0x6c>)
    2ed8:	movs	r3, #0
    2eda:	ldr	r1, [r1, #0]
    2edc:	mov	r0, sp
    2ede:	bl	86b8 <FsVolume::open(char const*, int)>
class Print
    2ee2:	ldr	r4, [pc, #92]	; (2f40 <loadConfigfromFile()+0x70>)
    2ee4:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    2ee6:	add	r1, sp, #16
    2ee8:	add.w	r0, r4, #16
    2eec:	str	r3, [r4, #4]
class Stream : public Print
    2eee:	ldr	r3, [sp, #8]
    2ef0:	str	r3, [r4, #8]
    2ef2:	ldrb.w	r3, [sp, #12]
    2ef6:	strb	r3, [r4, #12]
    2ef8:	bl	84ae <FsBaseFile::operator=(FsBaseFile const&)>
    2efc:	mov	r0, sp
    2efe:	bl	f10 <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    2f02:	ldr	r3, [r4, #72]	; 0x48
    2f04:	cbz	r3, 2f1c <loadConfigfromFile()+0x4c>
    2f06:	ldr	r5, [pc, #60]	; (2f44 <loadConfigfromFile()+0x74>)
{
    2f08:	movs	r4, #0
    return BaseFile::available();
    2f0a:	ldr	r6, [pc, #60]	; (2f48 <loadConfigfromFile()+0x78>)
    2f0c:	ldr	r0, [pc, #56]	; (2f48 <loadConfigfromFile()+0x78>)
    2f0e:	bl	e56 <FsBaseFile::available() const>
    if(file) 
    { while (file.available()) 
    2f12:	cbnz	r0, 2f28 <loadConfigfromFile()+0x58>
      {
        configText[ii++]=file.read();
      }
      file.close(); 
    2f14:	ldr	r0, [pc, #48]	; (2f48 <loadConfigfromFile()+0x78>)
    2f16:	bl	8484 <FsBaseFile::close()>
    2f1a:	b.n	2f22 <loadConfigfromFile()+0x52>
    2f1c:	ldr	r4, [r4, #76]	; 0x4c
    2f1e:	cmp	r4, #0
    2f20:	bne.n	2f06 <loadConfigfromFile()+0x36>
    }
  return ii;
}
    2f22:	sxth	r0, r4
    2f24:	add	sp, #80	; 0x50
    2f26:	pop	{r4, r5, r6, pc}
    return BaseFile::read();
    2f28:	mov	r0, r6
        configText[ii++]=file.read();
    2f2a:	adds	r4, #1
    2f2c:	bl	2e84 <FsBaseFile::read()>
    2f30:	strb.w	r0, [r5], #1
    2f34:	b.n	2f0c <loadConfigfromFile()+0x3c>
    2f36:	nop
    2f38:	.word	0x20001e14
    2f3c:	.word	0x20000d81
    2f40:	.word	0x2002d00c
    2f44:	.word	0x2002d8be
    2f48:	.word	0x2002d01c

00002f4c <filing_init()>:
int16_t filing_init(void)
{
    2f4c:	push	{r3, lr}
  FsDateTime::callback = dateTime;
    2f4e:	ldr	r2, [pc, #72]	; (2f98 <filing_init()+0x4c>)
    2f50:	ldr	r3, [pc, #72]	; (2f9c <filing_init()+0x50>)
    2f52:	str	r2, [r3, #0]

  sdSectorCount=sd->card()->sectorCount();
    2f54:	ldr	r3, [pc, #72]	; (2fa0 <filing_init()+0x54>)
  SdCard* card() {return m_card;}
    2f56:	ldr	r3, [r3, #0]
    2f58:	ldr.w	r0, [r3, #1164]	; 0x48c
    2f5c:	ldr	r3, [r0, #0]
    2f5e:	ldr	r3, [r3, #28]
    2f60:	blx	r3
    2f62:	ldr	r3, [pc, #64]	; (2fa4 <filing_init()+0x58>)
    2f64:	mov	r1, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2f66:	movs	r2, #10
    2f68:	str	r0, [r3, #0]
    2f6a:	movs	r3, #0
    2f6c:	ldr	r0, [pc, #56]	; (2fa8 <filing_init()+0x5c>)
    2f6e:	bl	c4de <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    2f72:	ldr	r0, [pc, #52]	; (2fa8 <filing_init()+0x5c>)
    2f74:	bl	c48c <Print::println()>
  Serial.println(sdSectorCount);
  haveStore=1;
    2f78:	ldr	r3, [pc, #48]	; (2fac <filing_init()+0x60>)
    2f7a:	movs	r2, #1
    2f7c:	str	r2, [r3, #0]
  if(loadConfigfromFile())              // is in Filing
    2f7e:	bl	2ed0 <loadConfigfromFile()>
    2f82:	cbz	r0, 2f8a <filing_init()+0x3e>
    decodeConfigfromFile(configText);   // in in Menu
    2f84:	ldr	r0, [pc, #40]	; (2fb0 <filing_init()+0x64>)
    2f86:	bl	29e0 <decodeConfigfromFile(char*)>
  pinMode(LED,OUTPUT);
    2f8a:	movs	r1, #1
    2f8c:	movs	r0, #13
    2f8e:	bl	bc60 <pinMode>

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
  */
}
    2f92:	movs	r0, #1
    2f94:	pop	{r3, pc}
    2f96:	nop
    2f98:	.word	0x00002dbd
    2f9c:	.word	0x2002ce50
    2fa0:	.word	0x20001e14
    2fa4:	.word	0x2002d138
    2fa8:	.word	0x20001c28
    2fac:	.word	0x2002ce40
    2fb0:	.word	0x2002d8be

00002fb4 <stopSD()>:

void stopSD(void)
{
//https://github.com/greiman/SdFat/issues/401
  sd->card()->syncDevice();
    2fb4:	ldr	r3, [pc, #12]	; (2fc4 <stopSD()+0x10>)
    2fb6:	ldr	r3, [r3, #0]
    2fb8:	ldr.w	r0, [r3, #1164]	; 0x48c
    2fbc:	ldr	r3, [r0, #0]
    2fbe:	ldr	r3, [r3, #32]
    2fc0:	bx	r3
    2fc2:	nop
    2fc4:	.word	0x20001e14

00002fc8 <filing_exit()>:
  mSPI.beginTransaction(SPISettings(400000, MSBFIRST, SPI_MODE0));
  mSPI.transfer(0XFF);
  mSPI.endTransaction();
  mSPI.end();
  */
  digitalWrite(LED,LOW);
    2fc8:	movs	r1, #0
    2fca:	movs	r0, #13
    2fcc:	b.w	bc20 <digitalWrite>

00002fd0 <timeStamp()>:
}

char * timeStamp(void)
{
    2fd0:	push	{r4, lr}
    2fd2:	sub	sp, #24
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2fd4:	ldr	r4, [pc, #52]	; (300c <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    2fd6:	add	r0, sp, #16
    2fd8:	bl	3e1c <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2fdc:	ldrsb.w	r3, [sp, #23]
    2fe0:	ldrsh.w	r2, [sp, #16]
    2fe4:	mov	r0, r4
    2fe6:	str	r3, [sp, #12]
    2fe8:	ldrsb.w	r3, [sp, #22]
    2fec:	ldr	r1, [pc, #32]	; (3010 <timeStamp()+0x40>)
    2fee:	str	r3, [sp, #8]
    2ff0:	ldrsb.w	r3, [sp, #21]
    2ff4:	str	r3, [sp, #4]
    2ff6:	ldrsb.w	r3, [sp, #19]
    2ffa:	str	r3, [sp, #0]
    2ffc:	ldrsb.w	r3, [sp, #18]
    3000:	bl	e6a4 <siprintf>
  return date_time;
}
    3004:	mov	r0, r4
    3006:	add	sp, #24
    3008:	pop	{r4, pc}
    300a:	nop
    300c:	.word	0x2002dd86
    3010:	.word	0x20000c44

00003014 <writeHeaderInfo(char*, int)>:

void writeHeaderInfo(char *info, int serNum)
{
    3014:	push	{r0, r1, r2, r4, r5, lr}
    3016:	ldr	r3, [pc, #144]	; (30a8 <writeHeaderInfo(char*, int)+0x94>)
    3018:	mov	r4, r0
    301a:	str	r1, [sp, #4]
  uint32_t tt=millis();
  int ih=0;
  strcpy(&info[ih], MAGIC); ih+=4;              //4
    301c:	ldr	r1, [pc, #140]	; (30ac <writeHeaderInfo(char*, int)+0x98>)
    301e:	ldr	r5, [r3, #0]
    3020:	bl	ea84 <strcpy>
  strcpy(&info[ih], timeStamp()); ih +=16;      //20
    3024:	bl	2fd0 <timeStamp()>
    3028:	mov	r1, r0
    302a:	adds	r0, r4, #4
    302c:	bl	ea84 <strcpy>
  sprintf(&info[ih]," %8x",serNum); ih +=12;    //32
    3030:	ldr	r2, [sp, #4]
    3032:	ldr	r1, [pc, #124]	; (30b0 <writeHeaderInfo(char*, int)+0x9c>)
    3034:	add.w	r0, r4, #20
    3038:	bl	e6a4 <siprintf>
  memcpy(&info[ih], &tt,4); ih +=4;             //36
  memcpy(&info[ih], (char *)b_string,40); ih+=40;       //76
    303c:	ldr	r3, [pc, #116]	; (30b4 <writeHeaderInfo(char*, int)+0xa0>)
    303e:	add.w	r2, r4, #36	; 0x24
  memcpy(&info[ih], &tt,4); ih +=4;             //36
    3042:	str	r5, [r4, #32]
  memcpy(&info[ih], (char *)b_string,40); ih+=40;       //76
    3044:	add.w	r1, r3, #40	; 0x28
    3048:	ldr.w	r0, [r3], #4
    304c:	cmp	r3, r1
    304e:	str.w	r0, [r2], #4
    3052:	bne.n	3048 <writeHeaderInfo(char*, int)+0x34>
  memcpy(&info[ih], (char *)k_string,40); ih+=40;       //116
    3054:	ldr	r3, [pc, #96]	; (30b8 <writeHeaderInfo(char*, int)+0xa4>)
    3056:	add.w	r2, r4, #76	; 0x4c
    305a:	add.w	r1, r3, #40	; 0x28
    305e:	ldr.w	r0, [r3], #4
    3062:	cmp	r3, r1
    3064:	str.w	r0, [r2], #4
    3068:	bne.n	305e <writeHeaderInfo(char*, int)+0x4a>
  memcpy(&info[ih], (char *)n_string,40); ih+=40;       //156
    306a:	ldr	r3, [pc, #80]	; (30bc <writeHeaderInfo(char*, int)+0xa8>)
    306c:	add.w	r2, r4, #116	; 0x74
    3070:	add.w	r1, r3, #40	; 0x28
    3074:	ldr.w	r0, [r3], #4
    3078:	cmp	r3, r1
    307a:	str.w	r0, [r2], #4
    307e:	bne.n	3074 <writeHeaderInfo(char*, int)+0x60>
  memcpy(&info[ih], getStore(),16*2); ih +=32;  //188
    3080:	bl	2960 <getStore()>
    3084:	add.w	r3, r4, #156	; 0x9c
    3088:	add.w	r2, r0, #32
    308c:	ldr.w	r1, [r0], #4
    3090:	cmp	r0, r2
    3092:	str.w	r1, [r3], #4
    3096:	bne.n	308c <writeHeaderInfo(char*, int)+0x78>
  strcpy(&info[ih]," end");                     //196
    3098:	ldr	r1, [pc, #36]	; (30c0 <writeHeaderInfo(char*, int)+0xac>)
    309a:	add.w	r0, r4, #188	; 0xbc
}
    309e:	add	sp, #12
    30a0:	ldmia.w	sp!, {r4, r5, lr}
  strcpy(&info[ih]," end");                     //196
    30a4:	b.w	ea84 <strcpy>
    30a8:	.word	0x2002d7c4
    30ac:	.word	0x20000ccf
    30b0:	.word	0x20000cd4
    30b4:	.word	0x2002de00
    30b8:	.word	0x2002de33
    30bc:	.word	0x2002de5b
    30c0:	.word	0x20000cd9

000030c4 <wavHeaderInit(long, long, long, int)>:

char * wavHeaderInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
    30c4:	push	{r3, r4, r5, r6, r7, lr}
  int nbytes=nbits/8;

  memcpy(wav_hdr.rId,"RIFF",4);
    30c6:	ldr	r4, [pc, #124]	; (3144 <wavHeaderInit(long, long, long, int)+0x80>)
{
    30c8:	mov	r7, r1
    30ca:	mov	r1, r3
  memcpy(wav_hdr.rId,"RIFF",4);
    30cc:	ldr	r3, [pc, #120]	; (3148 <wavHeaderInit(long, long, long, int)+0x84>)
  int nbytes=nbits/8;
    30ce:	cmp	r2, #0
    30d0:	mov	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    30d2:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    30d4:	sub.w	r3, r3, #15728640	; 0xf00000
  int nbytes=nbits/8;
    30d8:	it	lt
    30da:	addlt	r5, r2, #7
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=nchan;
  wav_hdr.nSamplesPerSec=fsamp;
    30dc:	str	r0, [r4, #24]
  memcpy(wav_hdr.wId,"WAVE",4);
    30de:	subw	r3, r3, #2043	; 0x7fb
  wav_hdr.nChannels=nchan;
    30e2:	uxth	r6, r7
  int nbytes=nbits/8;
    30e4:	asrs	r5, r5, #3
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
  wav_hdr.nBlockAlign=nchan*nbytes;
  wav_hdr.nBitsPerSamples=nbits;
    30e6:	strh	r2, [r4, #34]	; 0x22
  memcpy(wav_hdr.wId,"WAVE",4);
    30e8:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    30ea:	add.w	r3, r3, #3674210304	; 0xdb000000
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    30ee:	muls	r0, r5
  memcpy(wav_hdr.fId,"fmt ",4);
    30f0:	add.w	r3, r3, #1974272	; 0x1e2000
  wav_hdr.nChannels=nchan;
    30f4:	strh	r6, [r4, #22]
  wav_hdr.nBlockAlign=nchan*nbytes;
    30f6:	smulbb	r5, r5, r6
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    30fa:	muls	r0, r7
  memcpy(wav_hdr.fId,"fmt ",4);
    30fc:	addw	r3, r3, #3087	; 0xc0f
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    3100:	str	r0, [r4, #28]

  writeHeaderInfo(&wav_hdr.info[0],serNum);
    3102:	add.w	r0, r4, #44	; 0x2c
  memcpy(wav_hdr.fId,"fmt ",4);
    3106:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    3108:	add.w	r3, r3, #1090519040	; 0x41000000
  wav_hdr.nBlockAlign=nchan*nbytes;
    310c:	strh	r5, [r4, #32]
  memcpy(wav_hdr.dId,"data",4);
    310e:	subw	r3, r3, #3074	; 0xc02
    3112:	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    3116:	add.w	r3, r3, #218107136	; 0xd000d00
    311a:	add.w	r3, r3, #15859712	; 0xf20000
    311e:	adds	r3, #5
    3120:	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    3122:	mov.w	r3, #504	; 0x1f8
    3126:	str	r3, [r4, #4]
  wav_hdr.fLen = 0x10;
    3128:	movs	r3, #16
    312a:	str	r3, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
    312c:	mov.w	r3, #460	; 0x1cc
    3130:	str	r3, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    3132:	movs	r3, #0
    3134:	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    3138:	movs	r3, #1
    313a:	strh	r3, [r4, #20]
  writeHeaderInfo(&wav_hdr.info[0],serNum);
    313c:	bl	3014 <writeHeaderInfo(char*, int)>

  return (char *)&wav_hdr;
}
    3140:	mov	r0, r4
    3142:	pop	{r3, r4, r5, r6, r7, pc}
    3144:	.word	0x2002c83c
    3148:	.word	0x46464952

0000314c <wavHeaderUpdate(long)>:

char * wavHeaderUpdate(int32_t nbytes)
{
  wav_hdr.dLen = nbytes;
    314c:	ldr	r3, [pc, #12]	; (315c <wavHeaderUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    314e:	ldr	r2, [r3, #4]
  wav_hdr.dLen = nbytes;
    3150:	str.w	r0, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    3154:	add	r2, r0
  return (char *)&wav_hdr;
}
    3156:	mov	r0, r3
  wav_hdr.rLen += wav_hdr.dLen;
    3158:	str	r2, [r3, #4]
}
    315a:	bx	lr
    315c:	.word	0x2002c83c

00003160 <wavHeaderWrite(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    3160:	ldr	r3, [pc, #76]	; (31b0 <wavHeaderWrite(char*)+0x50>)
    3162:	ldr	r2, [r3, #72]	; 0x48

void wavHeaderWrite(char * wav_hdr) 
{ 
    3164:	push	{r4, r5, r6, lr}
    3166:	mov	r6, r0
    3168:	cbz	r2, 319e <wavHeaderWrite(char*)+0x3e>
    316a:	ldr	r4, [r2, #20]
    316c:	movs	r5, #0
  uint64_t fpos;
  fpos = file.curPosition();
  Serial.printf("; fpos=%d ",fpos);
    316e:	mov	r2, r4
    3170:	mov	r3, r5
    3172:	ldr	r1, [pc, #64]	; (31b4 <wavHeaderWrite(char*)+0x54>)
    3174:	ldr	r0, [pc, #64]	; (31b8 <wavHeaderWrite(char*)+0x58>)
    3176:	bl	c4c4 <Print::printf(char const*, ...)>
  file.seekSet(0);
    317a:	movs	r3, #0
    317c:	movs	r2, #0
    317e:	ldr	r0, [pc, #60]	; (31bc <wavHeaderWrite(char*)+0x5c>)
    3180:	bl	2e2e <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write((const uint8_t*)wav_hdr,512);
    3184:	mov.w	r2, #512	; 0x200
    3188:	mov	r1, r6
    318a:	ldr	r0, [pc, #36]	; (31b0 <wavHeaderWrite(char*)+0x50>)
    318c:	bl	1ec <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>
  file.seekSet(fpos);
    3190:	mov	r2, r4
    3192:	mov	r3, r5
    3194:	ldr	r0, [pc, #36]	; (31bc <wavHeaderWrite(char*)+0x5c>)
}
    3196:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    319a:	b.w	2e2e <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    319e:	ldr	r3, [r3, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    31a0:	cbz	r3, 31a8 <wavHeaderWrite(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    31a2:	ldrd	r4, r5, [r3]
    31a6:	b.n	316e <wavHeaderWrite(char*)+0xe>
    31a8:	mov	r4, r3
    31aa:	mov	r5, r3
    31ac:	b.n	316e <wavHeaderWrite(char*)+0xe>
    31ae:	nop
    31b0:	.word	0x2002d00c
    31b4:	.word	0x20000cc4
    31b8:	.word	0x20001c28
    31bc:	.word	0x2002d01c

000031c0 <makeHeader(long*)>:
   return wheader;
}
*/

int16_t makeHeader(int32_t *header)
{
    31c0:	push	{r4, r5, lr}
    31c2:	sub	sp, #36	; 0x24
    31c4:	mov	r4, r0

    //header[5] = 20;          // SW version
    header[5] = 30;            // SW version
    header[6] = SerNum;        // serial number
    header[7] = fsamp;
    header[8] = NCHAN_ACQ;
    31c6:	movs	r5, #1
    rtc_get_datetime(&t); 
    31c8:	add	r0, sp, #24
    31ca:	bl	3e1c <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    31ce:	ldrsb.w	r3, [sp, #31]
    31d2:	ldr	r2, [pc, #140]	; (3260 <makeHeader(long*)+0xa0>)
    31d4:	mov	r0, r4
    31d6:	str	r3, [sp, #16]
    31d8:	ldrsb.w	r3, [sp, #30]
    31dc:	ldr	r1, [pc, #132]	; (3264 <makeHeader(long*)+0xa4>)
    31de:	str	r3, [sp, #12]
    31e0:	ldrsb.w	r3, [sp, #29]
    31e4:	str	r3, [sp, #8]
    31e6:	ldrsb.w	r3, [sp, #27]
    31ea:	str	r3, [sp, #4]
    31ec:	ldrsb.w	r3, [sp, #26]
    31f0:	str	r3, [sp, #0]
    31f2:	ldrsh.w	r3, [sp, #24]
    31f6:	bl	e6a4 <siprintf>
    header[5] = 30;            // SW version
    31fa:	movs	r3, #30
    header[13] = shift;
    header[14] = again;
    header[15] = dgain;
    header[16] = millis();
    //memcpy(&header[20], getStore(),16*2);
    writeHeaderInfo((char *)&header[20],SerNum);
    31fc:	add.w	r0, r4, #80	; 0x50
    header[8] = NCHAN_ACQ;
    3200:	str	r5, [r4, #32]
    header[5] = 30;            // SW version
    3202:	str	r3, [r4, #20]
    header[6] = SerNum;        // serial number
    3204:	ldr	r3, [pc, #96]	; (3268 <makeHeader(long*)+0xa8>)
    3206:	ldr	r1, [r3, #0]
    header[7] = fsamp;
    3208:	ldr	r3, [pc, #96]	; (326c <makeHeader(long*)+0xac>)
    header[6] = SerNum;        // serial number
    320a:	str	r1, [r4, #24]
    header[7] = fsamp;
    320c:	ldr	r3, [r3, #0]
    320e:	str	r3, [r4, #28]
    header[9] = t_acq;
    3210:	ldr	r3, [pc, #92]	; (3270 <makeHeader(long*)+0xb0>)
    3212:	ldrh	r3, [r3, #0]
    3214:	uxth	r3, r3
    3216:	str	r3, [r4, #36]	; 0x24
    header[10] = t_on;
    3218:	ldr	r3, [pc, #88]	; (3274 <makeHeader(long*)+0xb4>)
    321a:	ldrh	r3, [r3, #0]
    321c:	uxth	r3, r3
    321e:	str	r3, [r4, #40]	; 0x28
    header[11] = t_rep;
    3220:	ldr	r3, [pc, #84]	; (3278 <makeHeader(long*)+0xb8>)
    3222:	ldrh	r3, [r3, #0]
    3224:	uxth	r3, r3
    3226:	str	r3, [r4, #44]	; 0x2c
    header[12] = proc;
    3228:	ldr	r3, [pc, #80]	; (327c <makeHeader(long*)+0xbc>)
    322a:	ldrh	r3, [r3, #0]
    322c:	sxth	r3, r3
    322e:	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    3230:	ldr	r3, [pc, #76]	; (3280 <makeHeader(long*)+0xc0>)
    3232:	ldrh	r3, [r3, #0]
    3234:	sxth	r3, r3
    3236:	str	r3, [r4, #52]	; 0x34
    header[14] = again;
    3238:	ldr	r3, [pc, #72]	; (3284 <makeHeader(long*)+0xc4>)
    323a:	ldrh	r3, [r3, #0]
    323c:	sxth	r3, r3
    323e:	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    3240:	ldr	r3, [pc, #68]	; (3288 <makeHeader(long*)+0xc8>)
    3242:	ldrh	r3, [r3, #0]
    3244:	sxth	r3, r3
    3246:	str	r3, [r4, #60]	; 0x3c
    3248:	ldr	r3, [pc, #64]	; (328c <makeHeader(long*)+0xcc>)
    324a:	ldr	r3, [r3, #0]
    header[16] = millis();
    324c:	str	r3, [r4, #64]	; 0x40
    writeHeaderInfo((char *)&header[20],SerNum);
    324e:	bl	3014 <writeHeaderInfo(char*, int)>
    header[127]=0x55555555;
    3252:	mov.w	r3, #1431655765	; 0x55555555
    return 1;
}
    3256:	mov	r0, r5
    header[127]=0x55555555;
    3258:	str.w	r3, [r4, #508]	; 0x1fc
}
    325c:	add	sp, #36	; 0x24
    325e:	pop	{r4, r5, pc}
    3260:	.word	0x20000ccf
    3264:	.word	0x20000c42
    3268:	.word	0x20006a08
    326c:	.word	0x20001e0c
    3270:	.word	0x20001e2a
    3274:	.word	0x20001e2c
    3278:	.word	0x2002d8b6
    327c:	.word	0x2002d810
    3280:	.word	0x2002d8b4
    3284:	.word	0x2002d802
    3288:	.word	0x2002d808
    328c:	.word	0x2002d7c4

00003290 <checkEndOfFile(short)>:

int16_t checkEndOfFile(int16_t state)
{ 
  static uint32_t dta=0;

  if(state==RUNNING)
    3290:	cmp	r0, #2
{ 
    3292:	push	{r4, lr}
    3294:	mov	r4, r0
  if(state==RUNNING)
    3296:	bne.n	333a <checkEndOfFile(short)+0xaa>
  { 
    uint32_t tt = rtc_get();
    3298:	bl	b6cc <rtc_get>
    //
    uint32_t dt1 = tt % t_acq;
    329c:	ldr	r3, [pc, #184]	; (3358 <checkEndOfFile(short)+0xc8>)
    329e:	ldrh	r2, [r3, #0]
    32a0:	uxth	r2, r2
    32a2:	udiv	r3, r0, r2
    32a6:	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    32aa:	ldr	r2, [pc, #176]	; (335c <checkEndOfFile(short)+0xcc>)
    32ac:	ldr	r1, [r2, #0]
    dta = dt1;
    32ae:	str	r3, [r2, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    32b0:	cmp	r3, r1
    32b2:	bcs.n	333a <checkEndOfFile(short)+0xaa>
    //
    // if file should be closed
    // check also if it should then hibernate 
    if(state == DOCLOSE)                // in case of DOCLOSE
    { 
      if(t_rep>t_on)                      // and if foreseen  check for hibernation
    32b4:	ldr	r4, [pc, #168]	; (3360 <checkEndOfFile(short)+0xd0>)
    32b6:	ldr	r1, [pc, #172]	; (3364 <checkEndOfFile(short)+0xd4>)
    32b8:	ldrh	r2, [r4, #0]
    32ba:	ldrh	r3, [r1, #0]
    32bc:	uxth	r2, r2
    32be:	uxth	r3, r3
    32c0:	cmp	r2, r3
    32c2:	bhi.n	333e <checkEndOfFile(short)+0xae>
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
      }
    }
    if(state == DOCLOSE)                // in case of DOCLOSE check dayly protocol
    {
      if(d_rep>d_on)                      // and if foreseen  check for hibernation
    32c4:	ldr	r4, [pc, #160]	; (3368 <checkEndOfFile(short)+0xd8>)
    32c6:	ldr	r1, [pc, #164]	; (336c <checkEndOfFile(short)+0xdc>)
    32c8:	ldrh	r2, [r4, #0]
    32ca:	ldrh	r3, [r1, #0]
    32cc:	uxth	r2, r2
    32ce:	uxth	r3, r3
    32d0:	cmp	r2, r3
    32d2:	bls.n	32ee <checkEndOfFile(short)+0x5e>
      { int32_t dd=tt/(24*3600);
    32d4:	ldr	r3, [pc, #152]	; (3370 <checkEndOfFile(short)+0xe0>)
        uint32_t dd2 = (dd % d_rep);
    32d6:	ldrh	r2, [r4, #0]
        
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    32d8:	ldrh	r1, [r1, #0]
        uint32_t dd2 = (dd % d_rep);
    32da:	uxth	r2, r2
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    32dc:	uxth	r1, r1
      { int32_t dd=tt/(24*3600);
    32de:	udiv	r3, r0, r3
        uint32_t dd2 = (dd % d_rep);
    32e2:	udiv	r4, r3, r2
    32e6:	mls	r3, r2, r4, r3
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    32ea:	cmp	r3, r1
    32ec:	bcs.n	3352 <checkEndOfFile(short)+0xc2>
      }
    }
    if(state == DOCLOSE)                // in case of DOCLOSE check acquisition periods
    {
      uint32_t hh=(tt%((24*3600)/3600));
    32ee:	movs	r2, #24
    32f0:	udiv	r3, r0, r2
    32f4:	mls	r3, r2, r3, r0
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    32f8:	ldr	r2, [pc, #120]	; (3374 <checkEndOfFile(short)+0xe4>)
    32fa:	ldrh	r2, [r2, #0]
    32fc:	uxth	r2, r2
    32fe:	cmp	r3, r2
    3300:	bcc.n	330c <checkEndOfFile(short)+0x7c>
    3302:	ldr	r2, [pc, #116]	; (3378 <checkEndOfFile(short)+0xe8>)
    3304:	ldrh	r2, [r2, #0]
    3306:	uxth	r2, r2
    3308:	cmp	r3, r2
    330a:	bcc.n	3320 <checkEndOfFile(short)+0x90>
    330c:	ldr	r2, [pc, #108]	; (337c <checkEndOfFile(short)+0xec>)
    330e:	ldrh	r2, [r2, #0]
    3310:	uxth	r2, r2
    3312:	cmp	r3, r2
    3314:	bcc.n	3352 <checkEndOfFile(short)+0xc2>
    3316:	ldr	r2, [pc, #104]	; (3380 <checkEndOfFile(short)+0xf0>)
    3318:	ldrh	r2, [r2, #0]
    331a:	uxth	r2, r2
    331c:	cmp	r3, r2
    331e:	bcs.n	3352 <checkEndOfFile(short)+0xc2>
      }
    }
    if(state == DOCLOSE)                // in case of DOCLOSE check start day
    {
      uint32_t dd=tt/(24*3600);
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    3320:	ldr	r3, [pc, #96]	; (3384 <checkEndOfFile(short)+0xf4>)
    3322:	ldrh	r4, [r3, #0]
      uint32_t dd=tt/(24*3600);
    3324:	ldr	r3, [pc, #72]	; (3370 <checkEndOfFile(short)+0xe0>)
    3326:	udiv	r0, r0, r3
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    332a:	movw	r3, #20000	; 0x4e20
    332e:	sxtah	r4, r3, r4
    3332:	cmp	r0, r4
    3334:	ite	cc
    3336:	movcc	r4, #4
    3338:	movcs	r4, #3
    }
  }
  return state;
}
    333a:	mov	r0, r4
    333c:	pop	{r4, pc}
      { uint32_t dt2 = (tt % t_rep);
    333e:	ldrh	r3, [r4, #0]
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    3340:	ldrh	r2, [r1, #0]
      { uint32_t dt2 = (tt % t_rep);
    3342:	uxth	r3, r3
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    3344:	uxth	r2, r2
      { uint32_t dt2 = (tt % t_rep);
    3346:	udiv	r1, r0, r3
    334a:	mls	r3, r3, r1, r0
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    334e:	cmp	r3, r2
    3350:	bcc.n	32c4 <checkEndOfFile(short)+0x34>
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    3352:	movs	r4, #4
    3354:	b.n	333a <checkEndOfFile(short)+0xaa>
    3356:	nop
    3358:	.word	0x20001e2a
    335c:	.word	0x2002ce90
    3360:	.word	0x2002d8b6
    3364:	.word	0x20001e2c
    3368:	.word	0x2002d806
    336c:	.word	0x20001e22
    3370:	.word	0x00015180
    3374:	.word	0x2002d80c
    3378:	.word	0x20001e24
    337c:	.word	0x20001e26
    3380:	.word	0x20001e28
    3384:	.word	0x2002d804

00003388 <newFolder(int)>:
    return 0;
}

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    3388:	ldr	r3, [pc, #12]	; (3398 <newFolder(int)+0x10>)
    338a:	ldr	r2, [r3, #0]
    338c:	cmp	r2, r0
  d0=d;
    338e:	itte	ne
    3390:	strne	r0, [r3, #0]
  return 1;
    3392:	movne	r0, #1
  if(d==d0) return 0; // same day
    3394:	moveq	r0, #0
}
    3396:	bx	lr
    3398:	.word	0x20001c38

0000339c <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    339c:	push	{r4, lr}
    339e:	sub	sp, #32
    33a0:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    33a2:	add	r0, sp, #24
    33a4:	bl	3e1c <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    33a8:	ldrsb.w	r1, [sp, #29]
    33ac:	mov	r0, r1
    33ae:	bl	3388 <newFolder(int)>
    33b2:	cbz	r0, 33f6 <newDirectory(char*)+0x5a>
      {   
          sprintf(dirName, "/%s_%s_%s_%06x_%04d%02d%02d/%02d/", 
    33b4:	ldrsb.w	r3, [sp, #27]
    33b8:	mov	r0, r4
    33ba:	str	r1, [sp, #20]
    33bc:	str	r3, [sp, #16]
    33be:	ldrsb.w	r3, [sp, #26]
    33c2:	ldr	r2, [pc, #56]	; (33fc <newDirectory(char*)+0x60>)
    33c4:	str	r3, [sp, #12]
    33c6:	ldrsh.w	r3, [sp, #24]
    33ca:	ldr	r1, [pc, #52]	; (3400 <newDirectory(char*)+0x64>)
    33cc:	str	r3, [sp, #8]
    33ce:	ldr	r3, [pc, #52]	; (3404 <newDirectory(char*)+0x68>)
    33d0:	ldr	r3, [r3, #0]
    33d2:	str	r3, [sp, #4]
    33d4:	ldr	r3, [pc, #48]	; (3408 <newDirectory(char*)+0x6c>)
    33d6:	str	r3, [sp, #0]
    33d8:	ldr	r3, [pc, #48]	; (340c <newDirectory(char*)+0x70>)
    33da:	bl	e6a4 <siprintf>
              b_string,k_string,n_string,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    33de:	ldr	r0, [pc, #48]	; (3410 <newDirectory(char*)+0x74>)
    33e0:	bl	c48c <Print::println()>
	size_t print(const char s[])			{ return write(s); }
    33e4:	ldr	r1, [pc, #44]	; (3414 <newDirectory(char*)+0x78>)
    33e6:	ldr	r0, [pc, #40]	; (3410 <newDirectory(char*)+0x74>)
    33e8:	bl	2e4e <Print::write(char const*) [clone .isra.0]>
    33ec:	ldr	r0, [pc, #32]	; (3410 <newDirectory(char*)+0x74>)
    33ee:	mov	r1, r4
    33f0:	bl	2e4e <Print::write(char const*) [clone .isra.0]>
          return 1;   // have new directory
    33f4:	movs	r0, #1
          Serial.println(); Serial.print(": "); Serial.print(dirName);
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory
}
    33f6:	add	sp, #32
    33f8:	pop	{r4, pc}
    33fa:	nop
    33fc:	.word	0x2002de00
    3400:	.word	0x20000c9e
    3404:	.word	0x20006a08
    3408:	.word	0x2002de5b
    340c:	.word	0x2002de33
    3410:	.word	0x20001c28
    3414:	.word	0x2000133f

00003418 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    3418:	push	{r4, r5, r6, r7, lr}
    341a:	sub	sp, #36	; 0x24
    341c:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    341e:	add	r0, sp, #24
    3420:	bl	3e1c <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    3424:	ldr	r3, [pc, #108]	; (3494 <newFileName(char*)+0x7c>)
    3426:	ldrsb.w	r7, [sp, #31]
    342a:	ldrh	r2, [r3, #0]
    342c:	ldrsb.w	r6, [sp, #30]
    3430:	ldrsb.w	r5, [sp, #29]
    3434:	sxth	r2, r2
    3436:	ldrsb.w	r0, [sp, #27]
    343a:	ldrsb.w	r1, [sp, #26]
    343e:	ldrsh.w	r3, [sp, #24]
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    3442:	str	r1, [sp, #0]
    3444:	strd	r6, r7, [sp, #12]
    3448:	strd	r0, r5, [sp, #4]
    if(proc==0)
    344c:	cbnz	r2, 348c <newFileName(char*)+0x74>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    344e:	ldr	r2, [pc, #72]	; (3498 <newFileName(char*)+0x80>)
    3450:	ldr	r1, [pc, #72]	; (349c <newFileName(char*)+0x84>)
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    3452:	mov	r0, r4
    3454:	bl	e6a4 <siprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    3458:	ldr	r0, [pc, #68]	; (34a0 <newFileName(char*)+0x88>)
    345a:	bl	c48c <Print::println()>
    345e:	ldr	r1, [pc, #68]	; (34a4 <newFileName(char*)+0x8c>)
    3460:	ldr	r0, [pc, #60]	; (34a0 <newFileName(char*)+0x88>)
    3462:	bl	2e4e <Print::write(char const*) [clone .isra.0]>
    3466:	mov	r1, r4
    3468:	ldr	r0, [pc, #52]	; (34a0 <newFileName(char*)+0x88>)
    346a:	bl	2e4e <Print::write(char const*) [clone .isra.0]>
    346e:	ldr	r1, [pc, #56]	; (34a8 <newFileName(char*)+0x90>)
    3470:	ldr	r0, [pc, #44]	; (34a0 <newFileName(char*)+0x88>)
    3472:	bl	2e4e <Print::write(char const*) [clone .isra.0]>
    Serial.print(" "); Serial.print(micros());
    3476:	bl	b484 <micros>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    347a:	movs	r3, #0
    347c:	mov	r1, r0
    347e:	movs	r2, #10
    3480:	ldr	r0, [pc, #28]	; (34a0 <newFileName(char*)+0x88>)
    3482:	bl	c4de <Print::printNumber(unsigned long, unsigned char, unsigned char)>

    return 1;
}
    3486:	movs	r0, #1
    3488:	add	sp, #36	; 0x24
    348a:	pop	{r4, r5, r6, r7, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    348c:	ldr	r2, [pc, #8]	; (3498 <newFileName(char*)+0x80>)
    348e:	ldr	r1, [pc, #28]	; (34ac <newFileName(char*)+0x94>)
    3490:	b.n	3452 <newFileName(char*)+0x3a>
    3492:	nop
    3494:	.word	0x2002d810
    3498:	.word	0x200012dc
    349c:	.word	0x20000c5e
    34a0:	.word	0x20001c28
    34a4:	.word	0x2000133f
    34a8:	.word	0x20001347
    34ac:	.word	0x20000c7e

000034b0 <storeData(short)>:
uint32_t nbuf;
void do_hibernate(void);

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    34b0:	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    34b2:	mov	r4, r0
{
    34b4:	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    34b6:	cmp	r0, #0
    34b8:	bne.w	35be <storeData(short)+0x10e>
    {   //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
    34bc:	ldr	r0, [pc, #520]	; (36c8 <storeData(short)+0x218>)
    34be:	bl	339c <newDirectory(char*)>
    34c2:	cmp	r0, #0
    34c4:	beq.n	355c <storeData(short)+0xac>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    34c6:	ldr	r5, [pc, #516]	; (36cc <storeData(short)+0x21c>)
    34c8:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    34ca:	ldr.w	r1, [r3, #1152]	; 0x480
    34ce:	cbz	r1, 34fe <storeData(short)+0x4e>
    return tmp.open(this, path, O_RDONLY);
    34d0:	mov	r3, r4
    34d2:	ldr	r2, [pc, #500]	; (36c8 <storeData(short)+0x218>)
    34d4:	mov	r0, sp
    34d6:	str	r4, [sp, #0]
    34d8:	bl	7352 <FatFile::open(FatVolume*, char const*, int)>
    34dc:	cbnz	r0, 3538 <storeData(short)+0x88>
    34de:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    34e0:	ldr.w	r1, [r3, #1152]	; 0x480
    34e4:	cbnz	r1, 3516 <storeData(short)+0x66>
    34e6:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    34ea:	cbz	r0, 352a <storeData(short)+0x7a>
  ExFatFile() {}
    34ec:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    34ee:	movs	r3, #1
    34f0:	add.w	r1, r0, #1096	; 0x448
    34f4:	ldr	r2, [pc, #464]	; (36c8 <storeData(short)+0x218>)
    34f6:	mov	r0, sp
    34f8:	bl	66be <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    34fc:	b.n	3528 <storeData(short)+0x78>
    34fe:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    3502:	cmp	r0, #0
    3504:	beq.n	34de <storeData(short)+0x2e>
    return tmp.open(this, path, O_RDONLY);
    3506:	mov	r3, r1
    3508:	str	r1, [sp, #48]	; 0x30
    350a:	ldr	r2, [pc, #444]	; (36c8 <storeData(short)+0x218>)
    350c:	mov	r1, r0
    350e:	mov	r0, sp
    3510:	bl	5e46 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3514:	b.n	34dc <storeData(short)+0x2c>
    3516:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    3518:	ldr	r2, [pc, #428]	; (36c8 <storeData(short)+0x218>)
    351a:	add.w	r1, r1, #1096	; 0x448
    351e:	mov	r0, sp
    3520:	str	r3, [sp, #0]
    3522:	movs	r3, #1
    3524:	bl	74d0 <FatFile::mkdir(FatFile*, char const*, bool)>
    3528:	cbnz	r0, 3538 <storeData(short)+0x88>
    352a:	ldr	r1, [pc, #420]	; (36d0 <storeData(short)+0x220>)
            if(file) 
            { status = OPENED; 
              //msc_activate(false);
            }
            else 
            {   Serial.println("Failing open file");
    352c:	ldr	r0, [pc, #420]	; (36d4 <storeData(short)+0x224>)
    352e:	bl	2e72 <Print::println(char const*) [clone .isra.0]>
                return STOPPED; 
            }
        } 
        else
        {   //msc_activate(true);
            return STOPPED; // if file open fails: don't do anything
    3532:	mov.w	r4, #4294967295
    3536:	b.n	3678 <storeData(short)+0x1c8>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    3538:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    353a:	ldr.w	r0, [r3, #1152]	; 0x480
    353e:	cbz	r0, 354c <storeData(short)+0x9c>
    3540:	ldr	r1, [pc, #388]	; (36c8 <storeData(short)+0x218>)
    3542:	bl	7d28 <FatVolume::chdir(char const*)>
    3546:	cbnz	r0, 355c <storeData(short)+0xac>
    3548:	ldr	r1, [pc, #396]	; (36d8 <storeData(short)+0x228>)
    354a:	b.n	352c <storeData(short)+0x7c>
    354c:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    3550:	cmp	r0, #0
    3552:	beq.n	3548 <storeData(short)+0x98>
    3554:	ldr	r1, [pc, #368]	; (36c8 <storeData(short)+0x218>)
    3556:	bl	6290 <ExFatVolume::chdir(char const*)>
    355a:	b.n	3546 <storeData(short)+0x96>
        if(newFileName(fileName))
    355c:	ldr	r0, [pc, #380]	; (36dc <storeData(short)+0x22c>)
    355e:	bl	3418 <newFileName(char*)>
    3562:	cmp	r0, #0
    3564:	beq.n	3532 <storeData(short)+0x82>
            file = sd->open(fileName, FILE_WRITE); 
    3566:	ldr	r1, [pc, #356]	; (36cc <storeData(short)+0x21c>)
    3568:	movw	r3, #16898	; 0x4202
    356c:	ldr	r2, [pc, #364]	; (36dc <storeData(short)+0x22c>)
    356e:	mov	r0, sp
    3570:	ldr	r1, [r1, #0]
    3572:	bl	86b8 <FsVolume::open(char const*, int)>
class Print
    3576:	ldr	r4, [pc, #360]	; (36e0 <storeData(short)+0x230>)
    3578:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    357a:	add	r1, sp, #16
    357c:	add.w	r0, r4, #16
    3580:	str	r3, [r4, #4]
    3582:	ldr	r3, [sp, #8]
    3584:	str	r3, [r4, #8]
    3586:	ldrb.w	r3, [sp, #12]
    358a:	strb	r3, [r4, #12]
    358c:	bl	84ae <FsBaseFile::operator=(FsBaseFile const&)>
    3590:	mov	r0, sp
    3592:	bl	f10 <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    3596:	ldr	r3, [r4, #72]	; 0x48
    3598:	cbz	r3, 35b4 <storeData(short)+0x104>
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    {   nbuf=0;
    359a:	ldr	r3, [pc, #328]	; (36e4 <storeData(short)+0x234>)
    359c:	movs	r2, #0
    359e:	str	r2, [r3, #0]
        char *hdr=0;
        if(proc==0)
    35a0:	ldr	r3, [pc, #324]	; (36e8 <storeData(short)+0x238>)
    35a2:	ldrh	r3, [r3, #0]
    35a4:	sxth	r3, r3
    35a6:	cmp	r3, #0
    35a8:	beq.n	367e <storeData(short)+0x1ce>
        { 
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
        }  
        else
        {
          makeHeader(fileHeader);
    35aa:	ldr	r0, [pc, #320]	; (36ec <storeData(short)+0x23c>)
    35ac:	bl	31c0 <makeHeader(long*)>
          hdr=(char *)fileHeader;
    35b0:	ldr	r1, [pc, #312]	; (36ec <storeData(short)+0x23c>)
    35b2:	b.n	3690 <storeData(short)+0x1e0>
    35b4:	ldr	r3, [r4, #76]	; 0x4c
    35b6:	cmp	r3, #0
    35b8:	bne.n	359a <storeData(short)+0xea>
            {   Serial.println("Failing open file");
    35ba:	ldr	r1, [pc, #308]	; (36f0 <storeData(short)+0x240>)
    35bc:	b.n	352c <storeData(short)+0x7c>
    if(status==OPENED) // file is open: write first record (header)
    35be:	cmp	r0, #1
    35c0:	beq.n	359a <storeData(short)+0xea>
        { status = DOCLOSE;
        }
        else status=RUNNING;
    }
    //
    if((status==RUNNING) || (status==DOCLOSE) || (status==MUSTSTOP))
    35c2:	subs	r3, r4, #2
    35c4:	uxth	r3, r3
    35c6:	cmp	r3, #1
    35c8:	bls.n	35ce <storeData(short)+0x11e>
    35ca:	cmp	r4, #5
    35cc:	bne.n	3632 <storeData(short)+0x182>
    { // file is open and header written: store data records  
      uint32_t nd;
        if((nd=file.write((const uint8_t*)diskBuffer,4*nout_dat)) < 4*nout_dat) 
    35ce:	ldr	r6, [pc, #292]	; (36f4 <storeData(short)+0x244>)
    return BaseFile::write(buffer, size);
    35d0:	ldr	r1, [pc, #292]	; (36f8 <storeData(short)+0x248>)
    35d2:	ldr	r2, [r6, #0]
    35d4:	ldr	r0, [pc, #292]	; (36fc <storeData(short)+0x24c>)
    35d6:	lsls	r2, r2, #2
    35d8:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
    35dc:	ldr	r3, [r6, #0]
    35de:	mov	r5, r0
    35e0:	ldr	r6, [pc, #256]	; (36e4 <storeData(short)+0x234>)
    35e2:	cmp.w	r0, r3, lsl #2
    35e6:	bcs.n	36a6 <storeData(short)+0x1f6>
	size_t print(const char s[])			{ return write(s); }
    35e8:	ldr	r1, [pc, #276]	; (3700 <storeData(short)+0x250>)
    35ea:	ldr	r0, [pc, #232]	; (36d4 <storeData(short)+0x224>)
    35ec:	bl	2e4e <Print::write(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    35f0:	movs	r3, #0
    35f2:	movs	r2, #10
    35f4:	mov	r1, r5
    35f6:	ldr	r0, [pc, #220]	; (36d4 <storeData(short)+0x224>)
    35f8:	bl	c4de <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(const char s[])			{ return write(s); }
    35fc:	ldr	r1, [pc, #260]	; (3704 <storeData(short)+0x254>)
    35fe:	ldr	r0, [pc, #212]	; (36d4 <storeData(short)+0x224>)
    3600:	bl	2e4e <Print::write(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    3604:	mov	r1, r4
    3606:	ldr	r0, [pc, #204]	; (36d4 <storeData(short)+0x224>)
        { Serial.print(">"); 
          Serial.print(nd); 
          Serial.print(" "); 
          Serial.println(status); 
          status=DOCLOSE; 
    3608:	movs	r4, #3
    360a:	bl	c47a <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    360e:	ldr	r0, [pc, #196]	; (36d4 <storeData(short)+0x224>)
    3610:	bl	c48c <Print::println()>
        }
        else
          nbuf++;
        //
        disk_count++;
    3614:	ldr	r2, [pc, #240]	; (3708 <storeData(short)+0x258>)
    3616:	ldr	r3, [r2, #0]
    3618:	adds	r3, #1
    361a:	str	r3, [r2, #0]
    361c:	mov.w	r2, #1000	; 0x3e8
    3620:	ldr	r3, [r6, #0]
    3622:	udiv	r1, r3, r2
    3626:	mls	r3, r2, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    362a:	cbnz	r3, 3632 <storeData(short)+0x182>
    BaseFile::sync();
    362c:	ldr	r0, [pc, #204]	; (36fc <storeData(short)+0x24c>)
    362e:	bl	2eba <FsBaseFile::sync()>
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) 
    3632:	subs	r3, r4, #3
    3634:	uxth	r3, r3
    3636:	cmp	r3, #2
    3638:	bhi.n	3678 <storeData(short)+0x1c8>
    363a:	ldr	r3, [pc, #164]	; (36e0 <storeData(short)+0x230>)
    363c:	ldr	r2, [r3, #72]	; 0x48
    363e:	cbnz	r2, 3644 <storeData(short)+0x194>
    3640:	ldr	r3, [r3, #76]	; 0x4c
    3642:	cbz	r3, 3660 <storeData(short)+0x1b0>
    {   // should close file or stop acquisition
        // first close file
        if(file)
        {   if(proc==0)
    3644:	ldr	r3, [pc, #160]	; (36e8 <storeData(short)+0x238>)
    3646:	ldrh	r3, [r3, #0]
    3648:	sxth	r3, r3
    364a:	cbnz	r3, 365a <storeData(short)+0x1aa>
            {
              char *hdr = wavHeaderUpdate(nout_dat*4);
    364c:	ldr	r3, [pc, #164]	; (36f4 <storeData(short)+0x244>)
    364e:	ldr	r0, [r3, #0]
    3650:	lsls	r0, r0, #2
    3652:	bl	314c <wavHeaderUpdate(long)>
              wavHeaderWrite(hdr);
    3656:	bl	3160 <wavHeaderWrite(char*)>
            }
            file.close();
    365a:	ldr	r0, [pc, #160]	; (36fc <storeData(short)+0x24c>)
    365c:	bl	8484 <FsBaseFile::close()>
        }

        if(status==DOHIBERNATE)
    3660:	cmp	r4, #4
    3662:	bne.n	36ae <storeData(short)+0x1fe>
        {   // shutdown acq board
          filing_exit();
    3664:	bl	2fc8 <filing_exit()>
          adc_exit();
    3668:	bl	3c4e <adc_exit()>
            //adcReset();
            //acqPower(LOW);
            digitalWrite(LED,LOW);
    366c:	movs	r1, #0
    366e:	movs	r0, #13
    3670:	bl	bc20 <digitalWrite>
            do_hibernate();
    3674:	bl	11e40 <___Z12do_hibernatev_veneer>
          adc_exit();
          digitalWrite(LED,LOW);
        }
    }
    return status;
}
    3678:	mov	r0, r4
    367a:	add	sp, #80	; 0x50
    367c:	pop	{r4, r5, r6, pc}
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    367e:	ldr	r3, [pc, #140]	; (370c <storeData(short)+0x25c>)
    3680:	movs	r1, #1
    3682:	movs	r2, #32
    3684:	ldr	r0, [r3, #0]
    3686:	ldr	r3, [pc, #136]	; (3710 <storeData(short)+0x260>)
    3688:	ldr	r3, [r3, #0]
    368a:	bl	30c4 <wavHeaderInit(long, long, long, int)>
    368e:	mov	r1, r0
    return BaseFile::write(buffer, size);
    3690:	mov.w	r2, #512	; 0x200
    3694:	ldr	r0, [pc, #100]	; (36fc <storeData(short)+0x24c>)
    3696:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
        else status=RUNNING;
    369a:	cmp.w	r0, #512	; 0x200
    369e:	ite	lt
    36a0:	movlt	r4, #3
    36a2:	movge	r4, #2
    36a4:	b.n	35c2 <storeData(short)+0x112>
          nbuf++;
    36a6:	ldr	r3, [r6, #0]
    36a8:	adds	r3, #1
    36aa:	str	r3, [r6, #0]
    36ac:	b.n	3614 <storeData(short)+0x164>
        else if(status==DOCLOSE)
    36ae:	cmp	r4, #3
    36b0:	beq.n	36c4 <storeData(short)+0x214>
          filing_exit();
    36b2:	bl	2fc8 <filing_exit()>
          adc_exit();
    36b6:	bl	3c4e <adc_exit()>
          digitalWrite(LED,LOW);
    36ba:	movs	r1, #0
    36bc:	movs	r0, #13
    36be:	bl	bc20 <digitalWrite>
    36c2:	b.n	3532 <storeData(short)+0x82>
          status=CLOSED;
    36c4:	movs	r4, #0
    36c6:	b.n	3678 <storeData(short)+0x1c8>
    36c8:	.word	0x2002dce2
    36cc:	.word	0x20001e14
    36d0:	.word	0x20000f81
    36d4:	.word	0x20001c28
    36d8:	.word	0x20000f8d
    36dc:	.word	0x2002dd32
    36e0:	.word	0x2002d00c
    36e4:	.word	0x2002d084
    36e8:	.word	0x2002d810
    36ec:	.word	0x2000820c
    36f0:	.word	0x20000f99
    36f4:	.word	0x2002d088
    36f8:	.word	0x20006a0c
    36fc:	.word	0x2002d01c
    3700:	.word	0x20000fab
    3704:	.word	0x20001347
    3708:	.word	0x2002cfec
    370c:	.word	0x20001e0c
    3710:	.word	0x20006a08

00003714 <saveData(short)>:
//
volatile int32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    if(status==STOPPED) 
    3714:	adds	r3, r0, #1
{
    3716:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    371a:	mov	r4, r0
    if(status==STOPPED) 
    371c:	bne.n	373e <saveData(short)+0x2a>
    { pullData((uint32_t*)diskBuffer);
    371e:	ldr	r0, [pc, #320]	; (3860 <saveData(short)+0x14c>)
    3720:	bl	2d70 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    3724:	ldr	r2, [pc, #312]	; (3860 <saveData(short)+0x14c>)
    3726:	movs	r3, #0
    3728:	ldr	r1, [pc, #312]	; (3864 <saveData(short)+0x150>)
    372a:	ldr.w	r0, [r2], #4
    372e:	str.w	r0, [r1, r3, lsl #2]
    3732:	adds	r3, #1
    3734:	cmp	r3, #8
    3736:	bne.n	372a <saveData(short)+0x16>
        digitalWrite(LED,LOW);
      }
    }

    return status;
}
    3738:	mov	r0, r4
    373a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(status<CLOSED) return status; // we are stopped: don't do anything
    373e:	cmp	r0, #0
    3740:	blt.n	3738 <saveData(short)+0x24>
    status=checkEndOfFile(status);
    3742:	bl	3290 <checkEndOfFile(short)>
    3746:	mov	r4, r0
    if(getDataCount() >= NDBL)
    3748:	bl	2cf8 <getDataCount()>
    374c:	cmp	r0, #11
    374e:	bls.n	3738 <saveData(short)+0x24>
      nout_dat=MAX_DISK_BUFFER;
    3750:	mov.w	r3, #1536	; 0x600
    3754:	ldr	r6, [pc, #272]	; (3868 <saveData(short)+0x154>)
    3756:	str	r3, [r6, #0]
      if(proc==0)
    3758:	ldr	r3, [pc, #272]	; (386c <saveData(short)+0x158>)
    375a:	ldrh	r5, [r3, #0]
    375c:	sxth	r5, r5
    375e:	cbnz	r5, 37ba <saveData(short)+0xa6>
    3760:	ldr	r7, [pc, #252]	; (3860 <saveData(short)+0x14c>)
    3762:	mov	r8, r7
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    3764:	bl	2d18 <queue_isBusy()>
    3768:	mov	r6, r0
    376a:	cmp	r0, #0
    376c:	bne.n	3764 <saveData(short)+0x50>
          while(!pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ])) delay(1);
    376e:	mov	r0, r8
    3770:	bl	2d70 <pullData(unsigned long*)>
    3774:	cbz	r0, 37b2 <saveData(short)+0x9e>
        for(int ii=0; ii<NDBL; ii++)
    3776:	adds	r5, #1
    3778:	add.w	r8, r8, #512	; 0x200
    377c:	cmp	r5, #12
    377e:	bne.n	3764 <saveData(short)+0x50>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    3780:	ldr	r3, [pc, #224]	; (3864 <saveData(short)+0x150>)
    3782:	ldr.w	r2, [r7], #4
    3786:	str.w	r2, [r3, r6, lsl #2]
    378a:	adds	r6, #1
    378c:	cmp	r6, #8
    378e:	bne.n	3782 <saveData(short)+0x6e>
      if(haveStore)
    3790:	ldr	r3, [pc, #220]	; (3870 <saveData(short)+0x15c>)
    3792:	ldr	r3, [r3, #0]
    3794:	cmp	r3, #0
    3796:	beq.n	3738 <saveData(short)+0x24>
      { digitalWrite(LED,HIGH);
    3798:	movs	r1, #1
    379a:	movs	r0, #13
    379c:	bl	bc20 <digitalWrite>
        status=storeData(status);
    37a0:	mov	r0, r4
    37a2:	bl	34b0 <storeData(short)>
        digitalWrite(LED,LOW);
    37a6:	movs	r1, #0
        status=storeData(status);
    37a8:	mov	r4, r0
        digitalWrite(LED,LOW);
    37aa:	movs	r0, #13
    37ac:	bl	bc20 <digitalWrite>
    37b0:	b.n	3738 <saveData(short)+0x24>
          while(!pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ])) delay(1);
    37b2:	movs	r0, #1
    37b4:	bl	b4d0 <delay>
    37b8:	b.n	376e <saveData(short)+0x5a>
        if((status==RUNNING) || (status==CLOSED))
    37ba:	bic.w	r5, r4, #2
    37be:	sxth	r5, r5
    37c0:	cbz	r5, 3812 <saveData(short)+0xfe>
        if((status==DOCLOSE) || (status==MUSTSTOP))
    37c2:	cmp	r4, #3
    37c4:	bne.n	384c <saveData(short)+0x138>
          memset(diskBuffer,0,4*MAX_DISK_BUFFER);
    37c6:	ldr.w	r8, [pc, #152]	; 3860 <saveData(short)+0x14c>
          for(ii=0; ii<NDBL; ii++)
    37ca:	movs	r7, #0
          memset(diskBuffer,0,4*MAX_DISK_BUFFER);
    37cc:	mov.w	r2, #6144	; 0x1800
    37d0:	movs	r1, #0
    37d2:	ldr	r0, [pc, #140]	; (3860 <saveData(short)+0x14c>)
    37d4:	bl	9f44 <memset>
            while(queue_isBusy()){continue;} //wait if acq writes to queue
    37d8:	bl	2d18 <queue_isBusy()>
    37dc:	mov	r5, r0
    37de:	cmp	r0, #0
    37e0:	bne.n	37d8 <saveData(short)+0xc4>
            while(!pullData(dptr)) delay(1);
    37e2:	mov	r0, r8
    37e4:	bl	2d70 <pullData(unsigned long*)>
    37e8:	cbz	r0, 3852 <saveData(short)+0x13e>
            uint32_t dindx=0;
    37ea:	movs	r3, #0
            for(int jj=0; jj<NBUF_ACQ-5;jj++) if((dptr[jj]==0xa5a5a5a5)) dindx=jj;
    37ec:	ldr.w	r2, [r8, r5, lsl #2]
    37f0:	cmp.w	r2, #2779096485	; 0xa5a5a5a5
    37f4:	it	eq
    37f6:	moveq	r3, r5
    37f8:	adds	r5, #1
    37fa:	cmp	r5, #123	; 0x7b
    37fc:	bne.n	37ec <saveData(short)+0xd8>
            if((dptr[dindx+5]>>16)==0) break; 
    37fe:	add.w	r3, r8, r3, lsl #2
          for(ii=0; ii<NDBL; ii++)
    3802:	adds	r7, #1
            if((dptr[dindx+5]>>16)==0) break; 
    3804:	ldrh	r3, [r3, #22]
    3806:	cbz	r3, 385a <saveData(short)+0x146>
          for(ii=0; ii<NDBL; ii++)
    3808:	cmp	r7, #12
    380a:	add.w	r8, r8, #512	; 0x200
    380e:	bne.n	37d8 <saveData(short)+0xc4>
    3810:	b.n	382e <saveData(short)+0x11a>
    3812:	ldr	r6, [pc, #76]	; (3860 <saveData(short)+0x14c>)
          { while(queue_isBusy()){continue;} //wait if acq writes to queue
    3814:	bl	2d18 <queue_isBusy()>
    3818:	cmp	r0, #0
    381a:	bne.n	3814 <saveData(short)+0x100>
            while(!pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ])) delay(1);
    381c:	mov	r0, r6
    381e:	bl	2d70 <pullData(unsigned long*)>
    3822:	cbz	r0, 3844 <saveData(short)+0x130>
          for(int ii=0; ii<NDBL; ii++)
    3824:	adds	r5, #1
    3826:	add.w	r6, r6, #512	; 0x200
    382a:	cmp	r5, #12
    382c:	bne.n	3814 <saveData(short)+0x100>
    382e:	ldr	r2, [pc, #48]	; (3860 <saveData(short)+0x14c>)
            for(int jj=0; jj<NBUF_ACQ-5;jj++) if((dptr[jj]==0xa5a5a5a5)) dindx=jj;
    3830:	movs	r3, #0
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    3832:	ldr	r1, [pc, #48]	; (3864 <saveData(short)+0x150>)
    3834:	ldr.w	r0, [r2], #4
    3838:	str.w	r0, [r1, r3, lsl #2]
    383c:	adds	r3, #1
    383e:	cmp	r3, #8
    3840:	bne.n	3834 <saveData(short)+0x120>
    3842:	b.n	3790 <saveData(short)+0x7c>
            while(!pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ])) delay(1);
    3844:	movs	r0, #1
    3846:	bl	b4d0 <delay>
    384a:	b.n	381c <saveData(short)+0x108>
        if((status==DOCLOSE) || (status==MUSTSTOP))
    384c:	cmp	r4, #5
    384e:	beq.n	37c6 <saveData(short)+0xb2>
    3850:	b.n	382e <saveData(short)+0x11a>
            while(!pullData(dptr)) delay(1);
    3852:	movs	r0, #1
    3854:	bl	b4d0 <delay>
    3858:	b.n	37e2 <saveData(short)+0xce>
          if(ii<NDBL) nout_dat=(ii+1)*NBUF_ACQ;
    385a:	lsls	r7, r7, #7
    385c:	str	r7, [r6, #0]
    385e:	b.n	382e <saveData(short)+0x11a>
    3860:	.word	0x20006a0c
    3864:	.word	0x2002d05c
    3868:	.word	0x2002d088
    386c:	.word	0x2002d810
    3870:	.word	0x2002ce40

00003874 <estAlarmTime(unsigned long)>:

      if d_rep > d_on, system will hibernate after d_on until next multiple of d_rep
      wakeup time is estimated by estAlarmTime
  */
  uint32_t estAlarmTime(uint32_t secs)
  {   // estimate the wakup-time in seconds 
    3874:	push	{r4, r5, r6, r7, lr}
      // input: actual time in s
      // output: next wakup time in s
      // wakeup is in absolute seconds
      // 
      // secs is actual time in s
      uint32_t dd = secs/(24*3600);       // full days so far
    3876:	ldr	r5, [pc, #220]	; (3954 <estAlarmTime(unsigned long)+0xe0>)
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    3878:	mov.w	r2, #3600	; 0xe10
      { // we are too early
        secs=(d_x)*(24*3600);
        return secs;
      }
      //
      if(d_rep> d_on)
    387c:	ldr	r7, [pc, #216]	; (3958 <estAlarmTime(unsigned long)+0xe4>)
      uint32_t dd = secs/(24*3600);       // full days so far
    387e:	udiv	r4, r0, r5
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    3882:	mls	r3, r5, r4, r0
    3886:	udiv	r3, r3, r2
      uint32_t d_x = (d_0+D_REF);
    388a:	ldr	r2, [pc, #208]	; (395c <estAlarmTime(unsigned long)+0xe8>)
    388c:	ldrh	r2, [r2, #0]
      if(d_rep> d_on)
    388e:	ldr	r2, [pc, #208]	; (3960 <estAlarmTime(unsigned long)+0xec>)
    3890:	ldrh	r6, [r2, #0]
    3892:	ldrh	r1, [r7, #0]
    3894:	uxth	r6, r6
    3896:	uxth	r1, r1
    3898:	cmp	r6, r1
    389a:	bls.n	38c4 <estAlarmTime(unsigned long)+0x50>
      {  // check if day is good for acqisition
        if(dd % d_rep >=d_on)
    389c:	ldrh	r1, [r2, #0]
    389e:	ldrh	r6, [r7, #0]
    38a0:	uxth	r1, r1
    38a2:	uxth	r6, r6
    38a4:	udiv	r7, r4, r1
    38a8:	mls	r1, r1, r7, r4
    38ac:	cmp	r1, r6
    38ae:	bcc.n	38c4 <estAlarmTime(unsigned long)+0x50>
        {
          secs = ((dd/d_rep)+1)*d_rep*(24*3600);  
    38b0:	ldrh	r3, [r2, #0]
    38b2:	ldrh	r0, [r2, #0]
    38b4:	uxth	r3, r3
    38b6:	uxth	r0, r0
    38b8:	udiv	r3, r4, r3
    38bc:	mla	r0, r3, r0, r0
    38c0:	muls	r0, r5
        secs = (dd*24+h_1)*3600;  // next time is next day at h_1
      }
      //
      // return start or actual time in seconds
      return secs;
  }
    38c2:	pop	{r4, r5, r6, r7, pc}
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)) )
    38c4:	ldr	r2, [pc, #156]	; (3964 <estAlarmTime(unsigned long)+0xf0>)
    38c6:	ldrh	r1, [r2, #0]
    38c8:	uxth	r1, r1
    38ca:	cmp	r1, r3
    38cc:	bhi.n	38d8 <estAlarmTime(unsigned long)+0x64>
    38ce:	ldr	r1, [pc, #152]	; (3968 <estAlarmTime(unsigned long)+0xf4>)
    38d0:	ldrh	r1, [r1, #0]
    38d2:	uxth	r1, r1
    38d4:	cmp	r1, r3
    38d6:	bhi.n	38ec <estAlarmTime(unsigned long)+0x78>
    38d8:	ldr	r1, [pc, #144]	; (396c <estAlarmTime(unsigned long)+0xf8>)
    38da:	ldrh	r1, [r1, #0]
    38dc:	uxth	r1, r1
    38de:	cmp	r1, r3
    38e0:	bhi.n	390e <estAlarmTime(unsigned long)+0x9a>
    38e2:	ldr	r1, [pc, #140]	; (3970 <estAlarmTime(unsigned long)+0xfc>)
    38e4:	ldrh	r1, [r1, #0]
    38e6:	uxth	r1, r1
    38e8:	cmp	r1, r3
    38ea:	bls.n	390e <estAlarmTime(unsigned long)+0x9a>
        if(t_rep>t_on)
    38ec:	ldr	r1, [pc, #132]	; (3974 <estAlarmTime(unsigned long)+0x100>)
    38ee:	ldr	r5, [pc, #136]	; (3978 <estAlarmTime(unsigned long)+0x104>)
    38f0:	ldrh	r6, [r1, #0]
    38f2:	ldrh	r5, [r5, #0]
    38f4:	uxth	r6, r6
    38f6:	uxth	r5, r5
    38f8:	cmp	r6, r5
    38fa:	bls.n	390e <estAlarmTime(unsigned long)+0x9a>
          secs = ((secs/t_rep)+1)*t_rep;
    38fc:	ldrh	r3, [r1, #0]
    38fe:	uxth	r3, r3
    3900:	udiv	r3, r0, r3
    3904:	ldrh	r0, [r1, #0]
    3906:	uxth	r0, r0
    3908:	mla	r0, r3, r0, r0
          return secs;
    390c:	b.n	38c2 <estAlarmTime(unsigned long)+0x4e>
      if (hh<h_1)                // from mid-night to h_1 
    390e:	ldrh	r1, [r2, #0]
    3910:	uxth	r1, r1
    3912:	cmp	r1, r3
    3914:	bls.n	3928 <estAlarmTime(unsigned long)+0xb4>
        secs = (dd*24+ h_1)*3600;     // next time is h1
    3916:	ldrh	r0, [r2, #0]
        secs = (dd*24+h_3)*3600;      // next time is h3
    3918:	movs	r3, #24
    391a:	muls	r3, r4
        secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    391c:	uxtah	r0, r3, r0
    3920:	mov.w	r3, #3600	; 0xe10
    3924:	muls	r0, r3
    3926:	b.n	38c2 <estAlarmTime(unsigned long)+0x4e>
      else if ((hh>=h_2) && (hh<h_3)) // between the two recording periods
    3928:	ldr	r1, [pc, #60]	; (3968 <estAlarmTime(unsigned long)+0xf4>)
    392a:	ldrh	r1, [r1, #0]
    392c:	uxth	r1, r1
    392e:	cmp	r1, r3
    3930:	bhi.n	393c <estAlarmTime(unsigned long)+0xc8>
    3932:	ldr	r5, [pc, #56]	; (396c <estAlarmTime(unsigned long)+0xf8>)
    3934:	ldrh	r1, [r5, #0]
    3936:	uxth	r1, r1
    3938:	cmp	r1, r3
    393a:	bhi.n	3950 <estAlarmTime(unsigned long)+0xdc>
      else if (hh>=h_4) // after the second recording period (goes into next day)
    393c:	ldr	r1, [pc, #48]	; (3970 <estAlarmTime(unsigned long)+0xfc>)
    393e:	ldrh	r1, [r1, #0]
    3940:	uxth	r1, r1
    3942:	cmp	r1, r3
    3944:	bhi.n	38c2 <estAlarmTime(unsigned long)+0x4e>
        secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    3946:	movs	r3, #24
    3948:	ldrh	r0, [r2, #0]
    394a:	mla	r3, r4, r3, r3
    394e:	b.n	391c <estAlarmTime(unsigned long)+0xa8>
        secs = (dd*24+h_3)*3600;      // next time is h3
    3950:	ldrh	r0, [r5, #0]
    3952:	b.n	3918 <estAlarmTime(unsigned long)+0xa4>
    3954:	.word	0x00015180
    3958:	.word	0x20001e22
    395c:	.word	0x2002d804
    3960:	.word	0x2002d806
    3964:	.word	0x2002d80c
    3968:	.word	0x20001e24
    396c:	.word	0x20001e26
    3970:	.word	0x20001e28
    3974:	.word	0x2002d8b6
    3978:	.word	0x20001e2c

0000397c <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    397c:	ldr	r0, [pc, #28]	; (399c <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    397e:	movs	r3, #0
    3980:	mov.w	r2, #1000	; 0x3e8
FsFile file;
    3984:	ldr	r1, [pc, #24]	; (39a0 <_GLOBAL__sub_I_t_acq+0x24>)
    3986:	strb	r3, [r0, #12]
    3988:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    398c:	strd	r3, r3, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3990:	ldr	r3, [pc, #16]	; (39a4 <_GLOBAL__sub_I_t_acq+0x28>)
    3992:	ldr	r2, [pc, #20]	; (39a8 <_GLOBAL__sub_I_t_acq+0x2c>)
    3994:	str	r3, [r0, #0]
    3996:	b.w	c6b8 <__aeabi_atexit>
    399a:	nop
    399c:	.word	0x2002d00c
    39a0:	.word	0x00000f11
    39a4:	.word	0x200004f4
    39a8:	.word	0x20001c40

000039ac <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    39ac:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39b0:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    39b2:	bl	b6cc <rtc_get>
    39b6:	str	r0, [sp, #4]
  uint32_t t1;
  t1 = micros();
    39b8:	bl	b484 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy first sample 
  for (int  ii = 0; ii < NCHAN_ACQ; ii++) tempDatai[ii] = din[ii];
    39bc:	ldr	r3, [pc, #612]	; (3c24 <compress(void*)+0x278>)
    39be:	add.w	r6, r4, #508	; 0x1fc
  t1 = micros();
    39c2:	mov	sl, r0
  for (int  ii = 0; ii < NCHAN_ACQ; ii++) tempDatai[ii] = din[ii];
    39c4:	ldr	r2, [r3, #0]
    39c6:	ldr	r3, [r4, #0]
    39c8:	mov	r1, r2
    39ca:	str	r3, [r2, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] =  din[ii] - din[ii - NCHAN_ACQ];
    39cc:	mov	r3, r4
  for (int  ii = 0; ii < NCHAN_ACQ; ii++) tempDatai[ii] = din[ii];
    39ce:	mov	r4, r2
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] =  din[ii] - din[ii - NCHAN_ACQ];
    39d0:	mov	r5, r3
    39d2:	adds	r3, #4
    39d4:	ldrd	r5, r0, [r5]
    39d8:	cmp	r3, r6
    39da:	sub.w	r0, r0, r5
    39de:	str.w	r0, [r4, #4]!
    39e2:	bne.n	39d0 <compress(void*)+0x24>
    39e4:	add.w	r2, r2, #508	; 0x1fc

  // find maximum in filtered data 
  int32_t mx = 0;
    39e8:	movs	r3, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    39ea:	ldr.w	r0, [r1, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    39ee:	cmp	r0, #0
    39f0:	it	lt
    39f2:	neglt	r0, r0
    39f4:	cmp	r3, r0
    39f6:	it	lt
    39f8:	movlt	r3, r0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    39fa:	cmp	r1, r2
    39fc:	bne.n	39ea <compress(void*)+0x3e>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    39fe:	movs	r4, #2
    3a00:	movs	r1, #1
    3a02:	subs	r2, r4, #1
    3a04:	lsl.w	r2, r1, r2
    3a08:	cmp	r2, r3
    3a0a:	bgt.n	3a12 <compress(void*)+0x66>
    3a0c:	adds	r4, #1
    3a0e:	cmp	r4, #24
    3a10:	bne.n	3a02 <compress(void*)+0x56>
  // compression factor (32/nb)

  // keep statistics
  proc_stat[nb-1]++;
    3a12:	subs	r1, r4, #1
    3a14:	ldr	r2, [pc, #528]	; (3c28 <compress(void*)+0x27c>)
    3a16:	ldr.w	r8, [pc, #556]	; 3c44 <compress(void*)+0x298>
  if((uint32_t)nb>max_stat) max_stat=nb;

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    3a1a:	mov.w	fp, #127	; 0x7f
  proc_stat[nb-1]++;
    3a1e:	ldr.w	r3, [r2, r1, lsl #2]
    3a22:	mov	r9, r8
    3a24:	adds	r3, #1
    3a26:	str.w	r3, [r2, r1, lsl #2]
  uint32_t msk = (1 << nb) - 1;
    3a2a:	mov	r1, r8
  if((uint32_t)nb>max_stat) max_stat=nb;
    3a2c:	ldr	r3, [pc, #508]	; (3c2c <compress(void*)+0x280>)
    3a2e:	ldr	r2, [r3, #0]
    3a30:	cmp	r4, r2
  uint32_t msk = (1 << nb) - 1;
    3a32:	mov.w	r2, #1
    3a36:	lsl.w	r2, r2, r4
  if((uint32_t)nb>max_stat) max_stat=nb;
    3a3a:	it	hi
    3a3c:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    3a3e:	subs	r2, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    3a40:	ldr.w	r0, [r1, #4]!
    3a44:	subs.w	fp, fp, #1
    3a48:	and.w	r0, r0, r2
    3a4c:	str	r0, [r1, #0]
    3a4e:	bne.n	3a40 <compress(void*)+0x94>
  // pack all data
  int ncmp = (NBUF_ACQ*nb) / MBIT;
  int ndat = NH + NCHAN_ACQ + ncmp;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    3a50:	ldr	r5, [pc, #476]	; (3c30 <compress(void*)+0x284>)
    3a52:	mov.w	r2, #512	; 0x200
    3a56:	mov	r1, fp
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    3a58:	lsls	r7, r4, #2
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    3a5a:	mov	r0, r5
    3a5c:	bl	9f44 <memset>

  // prepare header
  outData[0] = 0xA5A5A5A5;
    3a60:	mov.w	r2, #2779096485	; 0xa5a5a5a5
  outData[1] = nb | shift<<16;
  outData[2] = to;
    3a64:	ldr	r3, [sp, #4]
  int ndat = NH + NCHAN_ACQ + ncmp;
    3a66:	adds	r6, r7, #7
  outData[0] = 0xA5A5A5A5;
    3a68:	str	r2, [r5, #0]
  outData[3] = t1;
  outData[4] = NCHAN_ACQ;
  outData[5] = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3a6a:	movs	r0, #7
  outData[1] = nb | shift<<16;
    3a6c:	ldr	r2, [pc, #452]	; (3c34 <compress(void*)+0x288>)
    3a6e:	ldrh	r2, [r2, #0]
    3a70:	orr.w	r2, r4, r2, lsl #16
    3a74:	str	r2, [r5, #4]
  outData[4] = NCHAN_ACQ;
    3a76:	movs	r2, #1
    3a78:	str	r2, [r5, #16]
  outData[5] = NCHAN_ACQ+ncmp; // number of data after header
    3a7a:	adds	r2, r7, r2
  outData[3] = t1;
    3a7c:	strd	r3, sl, [r5, #8]
  outData[5] = NCHAN_ACQ+ncmp; // number of data after header
    3a80:	str	r2, [r5, #20]
    #error "NCH>8"
  #endif

  // pack data
  // 
  int nx = MBIT;
    3a82:	movs	r3, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3a84:	ldr.w	r2, [r9]
    3a88:	str.w	fp, [r9]
    3a8c:	str	r2, [r5, #24]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
  {   nx -= nb;
    3a8e:	sub.w	ip, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    3a92:	ldr.w	lr, [r5, r0, lsl #2]
    3a96:	ldr.w	r2, [r8], #4
      if(nx > 0)
    3a9a:	cmp.w	ip, #0
    3a9e:	ble.n	3afa <compress(void*)+0x14e>
      {   outData[kk] |= (tempData[ii] << nx);
    3aa0:	lsl.w	r2, r2, ip
    3aa4:	mov	r3, ip
    3aa6:	orr.w	r2, r2, lr
    3aaa:	str.w	r2, [r5, r0, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    3aae:	add.w	fp, fp, #1
    3ab2:	cmp.w	fp, #128	; 0x80
    3ab6:	bne.n	3a8e <compress(void*)+0xe2>
          nx += MBIT;
          outData[kk] = (tempData[ii] << nx);
      }
  }
  // kk should be NH+NCHAN_ACQ+ncmp
  if(kk !=(NH+NCHAN_ACQ+ncmp)) Serial.println("compress error");
    3ab8:	cmp	r0, r6
    3aba:	beq.n	3aca <compress(void*)+0x11e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3abc:	movs	r1, #14
    3abe:	ldr	r0, [pc, #376]	; (3c38 <compress(void*)+0x28c>)
    3ac0:	bl	a504 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3ac4:	ldr	r0, [pc, #372]	; (3c3c <compress(void*)+0x290>)
    3ac6:	bl	c48c <Print::println()>
  //------------------------------- Compression done -------------------------------
  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    3aca:	ldr.w	r8, [pc, #380]	; 3c48 <compress(void*)+0x29c>
    3ace:	ldr.w	r4, [r8]
    3ad2:	adds	r3, r4, r6
    3ad4:	cmp	r3, #128	; 0x80
    3ad6:	bgt.n	3b2a <compress(void*)+0x17e>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3ad8:	ldr	r0, [pc, #356]	; (3c40 <compress(void*)+0x294>)
  int ret=1;
    3ada:	mov.w	r9, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3ade:	lsls	r2, r6, #2
    3ae0:	ldr	r1, [pc, #332]	; (3c30 <compress(void*)+0x284>)
    3ae2:	add.w	r0, r0, r4, lsl #2
    3ae6:	adds	r4, #7
    3ae8:	bl	9f88 <memcpy>
    3aec:	add	r4, r7
    3aee:	str.w	r4, [r8]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    3af2:	mov	r0, r9
    3af4:	add	sp, #12
    3af6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    3afa:	add.w	r1, r0, #1
      else if(nx==0) 
    3afe:	bne.n	3b0e <compress(void*)+0x162>
      {   outData[kk++] |= tempData[ii];
    3b00:	orr.w	r2, lr, r2
          nx=MBIT;
    3b04:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    3b06:	str.w	r2, [r5, r0, lsl #2]
    3b0a:	mov	r0, r1
    3b0c:	b.n	3aae <compress(void*)+0x102>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    3b0e:	subs	r3, r4, r3
    3b10:	lsr.w	r3, r2, r3
    3b14:	orr.w	r3, r3, lr
    3b18:	str.w	r3, [r5, r0, lsl #2]
          nx += MBIT;
    3b1c:	add.w	r3, ip, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    3b20:	mov	r0, r1
          outData[kk] = (tempData[ii] << nx);
    3b22:	lsls	r2, r3
    3b24:	str.w	r2, [r5, r1, lsl #2]
    3b28:	b.n	3aae <compress(void*)+0x102>
  else if ((nout + NH) >= NBUF_OUT) //avoid partial or only header (special case)
    3b2a:	cmp	r4, #121	; 0x79
    3b2c:	ble.n	3b78 <compress(void*)+0x1cc>
    3b2e:	movs	r2, #0
    3b30:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    3b32:	ldr	r1, [pc, #268]	; (3c40 <compress(void*)+0x294>)
    3b34:	mov	r0, r2
    3b36:	cmp	r3, #127	; 0x7f
    3b38:	bls.n	3b6e <compress(void*)+0x1c2>
    3b3a:	cmp	r4, #128	; 0x80
    3b3c:	rsb	r3, r4, #128	; 0x80
    3b40:	it	gt
    3b42:	movgt	r3, #0
    3b44:	add	r3, r4
    3b46:	cbz	r2, 3b4c <compress(void*)+0x1a0>
    3b48:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    3b4c:	ldr	r0, [pc, #240]	; (3c40 <compress(void*)+0x294>)
    3b4e:	bl	2d24 <pushData(unsigned long*)>
    3b52:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3b56:	mov.w	r2, r6, lsl #2
    3b5a:	ldr	r1, [pc, #212]	; (3c30 <compress(void*)+0x284>)
    3b5c:	ldr	r0, [pc, #224]	; (3c40 <compress(void*)+0x294>)
      if(!pushData(dout)) ret = 0;
    3b5e:	it	ne
    3b60:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3b64:	bl	9f88 <memcpy>
    3b68:	str.w	r6, [r8]
    3b6c:	b.n	3af2 <compress(void*)+0x146>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    3b6e:	str.w	r0, [r1, r3, lsl #2]
    3b72:	movs	r2, #1
    3b74:	adds	r3, #1
    3b76:	b.n	3b36 <compress(void*)+0x18a>
      outData[5] = (outData[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    3b78:	ldr	r2, [r5, #20]
    3b7a:	rsb	r3, r4, #122	; 0x7a
    3b7e:	ldr	r1, [pc, #176]	; (3c30 <compress(void*)+0x284>)
    3b80:	orr.w	r3, r3, r2, lsl #16
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3b84:	ldr	r2, [pc, #184]	; (3c40 <compress(void*)+0x294>)
      outData[5] = (outData[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    3b86:	mov	r0, r1
    3b88:	str	r3, [r5, #20]
    3b8a:	mov	r3, r4
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3b8c:	ldr.w	ip, [r0], #4
    3b90:	str.w	ip, [r2, r3, lsl #2]
    3b94:	adds	r3, #1
    3b96:	cmp	r3, #128	; 0x80
    3b98:	bne.n	3b8c <compress(void*)+0x1e0>
      if(!pushData(dout)) ret = 0;
    3b9a:	ldr	r0, [pc, #164]	; (3c40 <compress(void*)+0x294>)
    3b9c:	rsb	sl, r4, #128	; 0x80
    3ba0:	str	r1, [sp, #4]
    3ba2:	str.w	r3, [r8]
    3ba6:	bl	2d24 <pushData(unsigned long*)>
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3baa:	ldr	r3, [r5, #20]
      if(!pushData(dout)) ret = 0;
    3bac:	subs.w	r9, r0, #0
      nr=ndat-ii; // for header
    3bb0:	sub.w	r0, r6, sl
    3bb4:	ldr.w	ip, [pc, #136]	; 3c40 <compress(void*)+0x294>
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3bb8:	mov.w	r3, r3, lsr #16
    3bbc:	mov	fp, sl
      if(!pushData(dout)) ret = 0;
    3bbe:	it	ne
    3bc0:	movne.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3bc4:	ldr	r1, [sp, #4]
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3bc6:	lsls	r3, r3, #16
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3bc8:	mov	r2, ip
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3bca:	orrs	r3, r0
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3bcc:	movs	r0, #7
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3bce:	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3bd0:	movs	r3, #0
    3bd2:	str.w	r3, [r8]
    3bd6:	subs	r0, #1
    3bd8:	bne.n	3c08 <compress(void*)+0x25c>
    3bda:	cbz	r3, 3be2 <compress(void*)+0x236>
    3bdc:	movs	r3, #6
    3bde:	str.w	r3, [r8]
    3be2:	ldr.w	r1, [r8]
    3be6:	movs	r3, #0
    3be8:	add.w	r2, r2, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    3bec:	cmp	sl, r6
    3bee:	blt.n	3c14 <compress(void*)+0x268>
    3bf0:	subs	r4, #121	; 0x79
    3bf2:	add	r4, r7
    3bf4:	cmp	r6, fp
    3bf6:	it	lt
    3bf8:	movlt	r4, #0
    3bfa:	add	r4, r1
    3bfc:	cmp	r3, #0
    3bfe:	beq.w	3af2 <compress(void*)+0x146>
    3c02:	str.w	r4, [r8]
  return ret;
    3c06:	b.n	3af2 <compress(void*)+0x146>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3c08:	ldr.w	r3, [r1], #4
    3c0c:	str.w	r3, [ip], #4
    3c10:	movs	r3, #1
    3c12:	b.n	3bd6 <compress(void*)+0x22a>
      while (ii < ndat) dout[nout++] = outData[ii++];
    3c14:	ldr.w	r3, [r5, sl, lsl #2]
    3c18:	add.w	sl, sl, #1
    3c1c:	str.w	r3, [r2], #4
    3c20:	movs	r3, #1
    3c22:	b.n	3bec <compress(void*)+0x240>
    3c24:	.word	0x20001e1c
    3c28:	.word	0x2002d0ac
    3c2c:	.word	0x2002d07c
    3c30:	.word	0x2002c63c
    3c34:	.word	0x2002d8b4
    3c38:	.word	0x20000eaf
    3c3c:	.word	0x20001c28
    3c40:	.word	0x2002c42c
    3c44:	.word	0x2002ca40
    3c48:	.word	0x2002ce9c

00003c4c <adc_init()>:
        }
        Serial.println();
    }
#else
    // there is no ADC to be controlled
    void adc_init(void) {}
    3c4c:	bx	lr

00003c4e <adc_exit()>:
    3c4e:	bx	lr

00003c50 <usbPowerSetup()>:
    3c50:	bx	lr

00003c52 <setAGain(signed char)>:
    void adc_exit(void) {}
    void usbPowerSetup(void){}
    void acqPower(int flag) {(void) flag;}
    void adcReset(void) {}
    void adcStart(void) {}
    void setAGain(int8_t again) {(void) again;}
    3c52:	bx	lr

00003c54 <adcStatus()>:
    3c54:	bx	lr
	...

00003c58 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
    3c58:	push	{r4, r5, r6, r7, lr}

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now time is minutes
    3c5a:	movs	r4, #60	; 0x3c

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3c5c:	movw	lr, #365	; 0x16d
    3c60:	movs	r6, #100	; 0x64
    3c62:	mov.w	ip, #400	; 0x190
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3c66:	udiv	r2, r0, r4
    tm->min  = time % 60; time /= 60; // now time is hours
    3c6a:	udiv	r3, r2, r4
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3c6e:	mls	r0, r4, r2, r0
    tm->min  = time % 60; time /= 60; // now time is hours
    3c72:	mls	r2, r4, r3, r2
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3c76:	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now time is days
    3c78:	movs	r0, #24
    tm->min  = time % 60; time /= 60; // now time is hours
    3c7a:	strb	r2, [r1, #6]
    tm->hour = time % 24; time /= 24; // now time is days
    3c7c:	udiv	r2, r3, r0
    3c80:	mls	r3, r0, r2, r3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3c84:	adds	r0, r2, #4
    tm->hour = time % 24; time /= 24; // now time is days
    3c86:	strb	r3, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3c88:	movs	r3, #7
    3c8a:	udiv	r3, r0, r3
    3c8e:	rsb	r3, r3, r3, lsl #3
    3c92:	subs	r0, r0, r3
    3c94:	strb	r0, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3c96:	movs	r0, #0
    days = 0;
    3c98:	mov	r4, r0
    3c9a:	uxtb	r3, r0
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3c9c:	addw	r3, r3, #1970	; 0x7b2
    3ca0:	ands.w	r7, r3, #3
    3ca4:	bne.n	3d28 <time2date(unsigned long, datetime_t*)+0xd0>
    3ca6:	sdiv	r5, r3, r6
    3caa:	mls	r5, r6, r5, r3
    3cae:	cmp	r5, #0
    3cb0:	bne.n	3d2e <time2date(unsigned long, datetime_t*)+0xd6>
    3cb2:	sdiv	r5, r3, ip
    3cb6:	mls	r5, ip, r5, r3
    3cba:	cmp	r5, #0
    3cbc:	ite	ne
    3cbe:	movne	r5, lr
    3cc0:	moveq.w	r5, #366	; 0x16e
    3cc4:	add	r4, r5
    3cc6:	adds	r0, #1
    3cc8:	cmp	r2, r4
    3cca:	bcs.n	3c9a <time2date(unsigned long, datetime_t*)+0x42>
    3ccc:	movs	r0, #100	; 0x64
      year++;
    }
    tm->year = year+YEAR0;
    3cce:	strh	r3, [r1, #0]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3cd0:	udiv	r6, r3, r0
    3cd4:	mls	r6, r0, r6, r3
    3cd8:	mov.w	r0, #400	; 0x190
    3cdc:	udiv	r5, r3, r0
    3ce0:	mls	r3, r0, r5, r3
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    3ce4:	cbnz	r7, 3d34 <time2date(unsigned long, datetime_t*)+0xdc>
    3ce6:	cbnz	r6, 3d3a <time2date(unsigned long, datetime_t*)+0xe2>
    3ce8:	cmp	r3, #0
    3cea:	movw	r0, #365	; 0x16d
    3cee:	it	eq
    3cf0:	moveq.w	r0, #366	; 0x16e
    time -= days; // now time is days in this year, starting at 0
    3cf4:	subs	r2, r2, r4
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    3cf6:	ldr.w	ip, [pc, #88]	; 3d50 <time2date(unsigned long, datetime_t*)+0xf8>
    time -= days; // now time is days in this year, starting at 0
    3cfa:	add	r2, r0
    3cfc:	movs	r0, #0
      if (month==1) { // february
    3cfe:	cmp	r0, #1
    3d00:	uxtb	r5, r0
    3d02:	bne.n	3d40 <time2date(unsigned long, datetime_t*)+0xe8>
        if (LEAP_YEAR(year)) {
    3d04:	cbnz	r7, 3d46 <time2date(unsigned long, datetime_t*)+0xee>
    3d06:	cbnz	r6, 3d4a <time2date(unsigned long, datetime_t*)+0xf2>
          monthLength=29;
    3d08:	cmp	r3, #0
    3d0a:	ite	ne
    3d0c:	movne	r4, #28
    3d0e:	moveq	r4, #29
      }
      
      if (time >= monthLength) {
    3d10:	cmp	r4, r2
    3d12:	bhi.n	3d1e <time2date(unsigned long, datetime_t*)+0xc6>
    for (month=0; month<12; month++) {
    3d14:	adds	r0, #1
        time -= monthLength;
    3d16:	subs	r2, r2, r4
    for (month=0; month<12; month++) {
    3d18:	cmp	r0, #12
    3d1a:	bne.n	3cfe <time2date(unsigned long, datetime_t*)+0xa6>
    3d1c:	mov	r5, r0
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    3d1e:	adds	r5, #1
    tm->day = time + 1;     // day of month
    3d20:	adds	r2, #1
    tm->month = month + 1;  // jan is month 1  
    3d22:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
    3d24:	strb	r2, [r1, #3]
  }
    3d26:	pop	{r4, r5, r6, r7, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3d28:	movw	r5, #365	; 0x16d
    3d2c:	b.n	3cc4 <time2date(unsigned long, datetime_t*)+0x6c>
    3d2e:	mov.w	r5, #366	; 0x16e
    3d32:	b.n	3cc4 <time2date(unsigned long, datetime_t*)+0x6c>
    days -= LEAP_YEAR(year) ? 366 : 365;
    3d34:	movw	r0, #365	; 0x16d
    3d38:	b.n	3cf4 <time2date(unsigned long, datetime_t*)+0x9c>
    3d3a:	mov.w	r0, #366	; 0x16e
    3d3e:	b.n	3cf4 <time2date(unsigned long, datetime_t*)+0x9c>
        monthLength = monthDays[month];
    3d40:	ldrb.w	r4, [r0, ip]
    3d44:	b.n	3d10 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=28;
    3d46:	movs	r4, #28
    3d48:	b.n	3d10 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=29;
    3d4a:	movs	r4, #29
    3d4c:	b.n	3d10 <time2date(unsigned long, datetime_t*)+0xb8>
    3d4e:	nop
    3d50:	.word	0x20000fec

00003d54 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    3d54:	ldrh	r3, [r0, #0]
      if (LEAP_YEAR(ii)) {
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    #endif
    uint32_t days= year*365;
    3d56:	movw	r2, #365	; 0x16d
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    3d5a:	movw	r1, #1970	; 0x7b2
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    3d5e:	adds	r3, #78	; 0x4e
    3d60:	uxtb	r3, r3
  {
    3d62:	push	{r4, r5, r6, r7, lr}
    uint32_t days= year*365;
    3d64:	muls	r2, r3
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    3d66:	movs	r5, #100	; 0x64
    3d68:	mov.w	r6, #400	; 0x190
    3d6c:	subw	r4, r1, #1970	; 0x7b2
    3d70:	cmp	r3, r4
    3d72:	bgt.n	3dce <date2time(datetime_t*)+0x7a>
    seconds = days*SECS_PER_DAY;

    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3d74:	addw	r3, r3, #1970	; 0x7b2
    3d78:	movs	r1, #100	; 0x64
    seconds = days*SECS_PER_DAY;
    3d7a:	ldr	r7, [pc, #148]	; (3e10 <date2time(datetime_t*)+0xbc>)
    for (ii = 1; ii < tm->month; ii++) {
    3d7c:	ldrsb.w	ip, [r0, #2]
    seconds = days*SECS_PER_DAY;
    3d80:	muls	r2, r7
    for (ii = 1; ii < tm->month; ii++) {
    3d82:	ldr	r6, [pc, #144]	; (3e14 <date2time(datetime_t*)+0xc0>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3d84:	udiv	r4, r3, r1
    3d88:	mls	r4, r1, r4, r3
    3d8c:	mov.w	r1, #400	; 0x190
    3d90:	udiv	r5, r3, r1
    3d94:	mls	r5, r1, r5, r3
    for (ii = 1; ii < tm->month; ii++) {
    3d98:	movs	r1, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3d9a:	and.w	r3, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    3d9e:	cmp	ip, r1
    3da0:	bgt.n	3dec <date2time(datetime_t*)+0x98>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    3da2:	ldrsb.w	r3, [r0, #6]
    seconds+= tm->sec;
    3da6:	mov.w	r4, #3600	; 0xe10
    seconds+= tm->hour * SECS_PER_HOUR;
    3daa:	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    3dae:	rsb	r3, r3, r3, lsl #4
    3db2:	lsls	r3, r3, #2
    seconds+= tm->sec;
    3db4:	mla	r3, r4, r1, r3
    3db8:	ldrsb.w	r1, [r0, #7]
    3dbc:	add	r3, r1
    seconds+= (tm->day-1) * SECS_PER_DAY;
    3dbe:	ldrsb.w	r1, [r0, #3]
    seconds+= tm->sec;
    3dc2:	ldr	r0, [pc, #76]	; (3e10 <date2time(datetime_t*)+0xbc>)
    seconds+= (tm->day-1) * SECS_PER_DAY;
    3dc4:	subs	r1, #1
    seconds+= tm->sec;
    3dc6:	mla	r0, r0, r1, r3
    return seconds; 
  }
    3dca:	add	r0, r2
    3dcc:	pop	{r4, r5, r6, r7, pc}
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    3dce:	lsls	r4, r1, #30
    3dd0:	bne.n	3de8 <date2time(datetime_t*)+0x94>
    3dd2:	sdiv	r4, r1, r5
    3dd6:	mls	r4, r5, r4, r1
    3dda:	cbnz	r4, 3de6 <date2time(datetime_t*)+0x92>
    3ddc:	sdiv	r4, r1, r6
    3de0:	mls	r4, r6, r4, r1
    3de4:	cbnz	r4, 3de8 <date2time(datetime_t*)+0x94>
    3de6:	adds	r2, #1
    3de8:	adds	r1, #1
    3dea:	b.n	3d6c <date2time(datetime_t*)+0x18>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3dec:	cmp	r1, #2
    3dee:	bne.n	3e04 <date2time(datetime_t*)+0xb0>
    3df0:	cbnz	r3, 3e04 <date2time(datetime_t*)+0xb0>
    3df2:	cbnz	r4, 3df6 <date2time(datetime_t*)+0xa2>
    3df4:	cbnz	r5, 3e04 <date2time(datetime_t*)+0xb0>
        seconds += SECS_PER_DAY * 29;
    3df6:	add.w	r2, r2, #2490368	; 0x260000
    3dfa:	add.w	r2, r2, #15232	; 0x3b80
    for (ii = 1; ii < tm->month; ii++) {
    3dfe:	adds	r1, #1
    3e00:	adds	r6, #1
    3e02:	b.n	3d9e <date2time(datetime_t*)+0x4a>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    3e04:	ldrb.w	lr, [r6]
    3e08:	mla	r2, r7, lr, r2
    3e0c:	b.n	3dfe <date2time(datetime_t*)+0xaa>
    3e0e:	nop
    3e10:	.word	0x00015180
    3e14:	.word	0x20000fec

00003e18 <rtcGetTimestamp()>:
      return xrtc.stringTimeStamp();
    }
    #else
      return 0;
    #endif
  }
    3e18:	movs	r0, #0
    3e1a:	bx	lr

00003e1c <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    3e1c:	push	{r0, r1, r2, lr}
    3e1e:	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    3e20:	bl	b6cc <rtc_get>
    3e24:	ldr	r1, [sp, #4]
    3e26:	bl	3c58 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    3e2a:	movs	r0, #1
    3e2c:	add	sp, #12
    3e2e:	ldr.w	pc, [sp], #4

00003e32 <rtc_set_datetime(datetime_t*)>:

  bool rtc_set_datetime(datetime_t *t)
  {
    3e32:	push	{r3, lr}
    rtc_set(date2time(t));
    3e34:	bl	3d54 <date2time(datetime_t*)>
    3e38:	bl	b6f0 <rtc_set>
    return 1;
  }
    3e3c:	movs	r0, #1
    3e3e:	pop	{r3, pc}

00003e40 <rtcSetDate(int, int, int)>:

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    3e40:	push	{r0, r1, r4, r5, r6, lr}
    3e42:	mov	r5, r1
    3e44:	mov	r4, r2
    3e46:	mov	r6, r0
    rtc_get_datetime(&t);
    3e48:	mov	r0, sp
    3e4a:	bl	3e1c <rtc_get_datetime(datetime_t*)>
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
    3e4e:	mov	r0, sp
    t.year=year;
    3e50:	strh.w	r6, [sp]
    t.month=month;
    3e54:	strb.w	r5, [sp, #2]
    t.day=day;
    3e58:	strb.w	r4, [sp, #3]
    rtc_set_datetime(&t);
    3e5c:	bl	3e32 <rtc_set_datetime(datetime_t*)>
  }
    3e60:	add	sp, #8
    3e62:	pop	{r4, r5, r6, pc}

00003e64 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    3e64:	push	{r0, r1, r4, r5, r6, lr}
    3e66:	mov	r5, r1
    3e68:	mov	r4, r2
    3e6a:	mov	r6, r0
    rtc_get_datetime(&t);
    3e6c:	mov	r0, sp
    3e6e:	bl	3e1c <rtc_get_datetime(datetime_t*)>
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
    3e72:	mov	r0, sp
    t.hour=hour;
    3e74:	strb.w	r6, [sp, #5]
    t.min=minutes;
    3e78:	strb.w	r5, [sp, #6]
    t.sec=seconds;
    3e7c:	strb.w	r4, [sp, #7]
    rtc_set_datetime(&t);
    3e80:	bl	3e32 <rtc_set_datetime(datetime_t*)>
  }
    3e84:	add	sp, #8
    3e86:	pop	{r4, r5, r6, pc}

00003e88 <XRTCprintTime()>:
    3e88:	bx	lr
	...

00003e8c <txEvent_event>:
    static void txEvent_event(transfer_t *t) { mtp_txEventcount++;}
    3e8c:	ldr	r2, [pc, #8]	; (3e98 <txEvent_event+0xc>)
    3e8e:	ldr	r3, [r2, #0]
    3e90:	adds	r3, #1
    3e92:	str	r3, [r2, #0]
    3e94:	bx	lr
    3e96:	nop
    3e98:	.word	0x2002c420

00003e9c <rxEvent_event>:
    static void rxEvent_event(transfer_t *t) { mtp_rxEventcount++;}
    3e9c:	ldr	r2, [pc, #8]	; (3ea8 <rxEvent_event+0xc>)
    3e9e:	ldr	r3, [r2, #0]
    3ea0:	adds	r3, #1
    3ea2:	str	r3, [r2, #0]
    3ea4:	bx	lr
    3ea6:	nop
    3ea8:	.word	0x2002c41c

00003eac <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    3eac:	push	{r3, r4, r5, lr}
    3eae:	mov	r4, r0
    3eb0:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3eb2:	movs	r2, #60	; 0x3c
    3eb4:	mov	r1, r5
    3eb6:	mov	r0, r4
    3eb8:	bl	bfe0 <usb_mtp_send>
    3ebc:	cmp	r0, #0
    3ebe:	ble.n	3eb2 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    3ec0:	pop	{r3, r4, r5, pc}
	...

00003ec4 <MTPD::write(char const*, int) [clone .part.0]>:
    void MTPD::write(const char *data, int len) 
    3ec4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ec8:	mov	r7, r1
        if(!write_length_) dst=tx_data_buffer;   
    3eca:	add.w	r1, r0, #4096	; 0x1000
    void MTPD::write(const char *data, int len) 
    3ece:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    3ed0:	ldr.w	r3, [r1, #1068]	; 0x42c
    3ed4:	cbnz	r3, 3ede <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    3ed6:	add.w	r2, r0, #32
    3eda:	ldr	r4, [pc, #92]	; (3f38 <MTPD::write(char const*, int) [clone .part.0]+0x74>)
    3edc:	str	r2, [r4, #0]
        write_length_ += len;
    3ede:	add	r3, r6
        int pos = 0; // into data
    3ee0:	mov.w	r8, #0
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3ee4:	add.w	r9, r0, #544	; 0x220
    3ee8:	ldr.w	sl, [pc, #76]	; 3f38 <MTPD::write(char const*, int) [clone .part.0]+0x74>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3eec:	add.w	r4, r0, #32
        write_length_ += len;
    3ef0:	str.w	r3, [r1, #1068]	; 0x42c
        while(pos<len)
    3ef4:	cmp	r6, r8
    3ef6:	bgt.n	3efc <MTPD::write(char const*, int) [clone .part.0]+0x38>
    }
    3ef8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3efc:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    3f00:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    3f04:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3f06:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    3f0a:	mov	r0, r3
    3f0c:	cmp	r5, r2
    3f0e:	it	ge
    3f10:	movge	r5, r2
    3f12:	mov	r2, r5
          pos += to_copy;
    3f14:	add	r8, r5
          memcpy(dst,src,to_copy);
    3f16:	bl	9f88 <memcpy>
    3f1a:	mov	r3, r0
          src += to_copy;
    3f1c:	add	r7, r5
          dst += to_copy;
    3f1e:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f20:	cmp	r9, r3
          dst += to_copy;
    3f22:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f26:	bne.n	3ef4 <MTPD::write(char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3f28:	mov.w	r1, #512	; 0x200
    3f2c:	mov	r0, r4
    3f2e:	bl	3eac <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    3f32:	str.w	r4, [sl]
    3f36:	b.n	3ef4 <MTPD::write(char const*, int) [clone .part.0]+0x30>
    3f38:	.word	0x2002cea4

00003f3c <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3f3c:	push	{r4, r5, r6, lr}
    3f3e:	subs	r5, r1, #1
    int num = 0;
    3f40:	movs	r6, #0
  { uint32_t store = Storage2Store(storage);
    3f42:	mov	r4, r0
    storage_->StartGetObjectHandles(store, parent);
    3f44:	ldr	r0, [r0, #0]
    3f46:	mov	r1, r5
    3f48:	bl	141a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
    while (storage_->GetNextObjectHandle(store)) num++;
    3f4c:	mov	r1, r5
    3f4e:	ldr	r0, [r4, #0]
    3f50:	bl	1466 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    3f54:	cbnz	r0, 3f5a <MTPD::GetNumObjects(unsigned long, unsigned long)+0x1e>
  }
    3f56:	mov	r0, r6
    3f58:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    3f5a:	adds	r6, #1
    3f5c:	b.n	3f4c <MTPD::GetNumObjects(unsigned long, unsigned long)+0x10>

00003f5e <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
    { uint32_t store1=Storage2Store(newStorage);
    3f5e:	push	{r3, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3f60:	subs	r2, #1
    3f62:	ldr	r0, [r0, #0]
    3f64:	bl	1cc8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>
    }
    3f68:	movw	r2, #8193	; 0x2001
    3f6c:	movw	r3, #8197	; 0x2005
    3f70:	cmp	r0, #0
    3f72:	ite	ne
    3f74:	movne	r0, r2
    3f76:	moveq	r0, r3
    3f78:	pop	{r3, pc}

00003f7a <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    3f7a:	subs	r2, #1
    3f7c:	ldr	r0, [r0, #0]
    3f7e:	b.w	1a66 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>
	...

00003f84 <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    3f84:	ldr	r3, [pc, #8]	; (3f90 <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    3f86:	ldr	r0, [r0, #0]
      sessionID_ = id;
    3f88:	str	r1, [r3, #0]
      storage_->ResetIndex();
    3f8a:	b.w	10c8 <MTPStorage_SD::ResetIndex()>
    3f8e:	nop
    3f90:	.word	0x2002d608

00003f94 <MTPD::write(char const*, int)>:
    { if (write_get_length_) 
    3f94:	add.w	r3, r0, #4096	; 0x1000
    3f98:	push	{r4, r5}
    3f9a:	ldrb.w	r5, [r3, #1064]	; 0x428
    3f9e:	cbz	r5, 3fae <MTPD::write(char const*, int)+0x1a>
        write_length_ += len;
    3fa0:	ldr.w	r1, [r3, #1068]	; 0x42c
    3fa4:	add	r1, r2
    }
    3fa6:	pop	{r4, r5}
        write_length_ += len;
    3fa8:	str.w	r1, [r3, #1068]	; 0x42c
    }
    3fac:	bx	lr
    3fae:	pop	{r4, r5}
    3fb0:	b.w	3ec4 <MTPD::write(char const*, int) [clone .part.0]>

00003fb4 <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
    3fb4:	push	{r0, r1, r2, lr}
    3fb6:	movs	r2, #1
    3fb8:	strb.w	r1, [sp, #7]
    3fbc:	add.w	r1, sp, #7
    3fc0:	bl	3f94 <MTPD::write(char const*, int)>
    3fc4:	add	sp, #12
    3fc6:	ldr.w	pc, [sp], #4

00003fca <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
    3fca:	push	{r0, r1, r2, lr}
    3fcc:	movs	r2, #2
    3fce:	strh.w	r1, [sp, #6]
    3fd2:	add.w	r1, sp, #6
    3fd6:	bl	3f94 <MTPD::write(char const*, int)>
    3fda:	add	sp, #12
    3fdc:	ldr.w	pc, [sp], #4

00003fe0 <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    3fe0:	push	{r3, r4, r5, lr}
    3fe2:	mov	r4, r1
    if (*str) 
    3fe4:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    3fe6:	mov	r5, r0
    if (*str) 
    3fe8:	cbz	r1, 4012 <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    3fea:	mov	r0, r4
    3fec:	subs	r4, #1
    3fee:	bl	eb40 <strlen>
    3ff2:	adds	r0, #1
    3ff4:	uxtb	r1, r0
    3ff6:	mov	r0, r5
    3ff8:	bl	3fb4 <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3ffc:	ldrb.w	r1, [r4, #1]!
    4000:	mov	r0, r5
    4002:	cbnz	r1, 400c <MTPD::writestring(char const*)+0x2c>
  }
    4004:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4008:	b.w	3fca <MTPD::write16(unsigned short)>
    400c:	bl	3fca <MTPD::write16(unsigned short)>
    4010:	b.n	3ffc <MTPD::writestring(char const*)+0x1c>
  }
    4012:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    4016:	b.w	3fb4 <MTPD::write8(unsigned char)>
	...

0000401c <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    401c:	movw	r3, #54274	; 0xd402
    4020:	cmp	r1, r3
    4022:	bne.n	402a <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    4024:	ldr	r1, [pc, #4]	; (402c <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    4026:	b.w	3fe0 <MTPD::writestring(char const*)>
  }
    402a:	bx	lr
    402c:	.word	0x20001074

00004030 <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    4030:	movw	r3, #54274	; 0xd402
    4034:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    4036:	push	{r4, lr}
    4038:	mov	r4, r0
    switch (prop) {
    403a:	bne.n	406e <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    403c:	bl	3fca <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    4040:	mov	r0, r4
    4042:	movw	r1, #65535	; 0xffff
    4046:	bl	3fca <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    404a:	mov	r0, r4
    404c:	movs	r1, #0
    404e:	bl	3fb4 <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    4052:	mov	r0, r4
    4054:	ldr	r1, [pc, #24]	; (4070 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    4056:	bl	3fe0 <MTPD::writestring(char const*)>
        writestring(MTP_NAME);
    405a:	mov	r0, r4
    405c:	ldr	r1, [pc, #16]	; (4070 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    405e:	bl	3fe0 <MTPD::writestring(char const*)>
        write8(0);       // no form
    4062:	mov	r0, r4
    4064:	movs	r1, #0
  }
    4066:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    406a:	b.w	3fb4 <MTPD::write8(unsigned char)>
  }
    406e:	pop	{r4, pc}
    4070:	.word	0x20001074

00004074 <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
    4074:	push	{r0, r1, r2, lr}
    4076:	movs	r2, #4
    4078:	str	r1, [sp, #4]
    407a:	add.w	r1, sp, r2
    407e:	bl	3f94 <MTPD::write(char const*, int)>
    4082:	add	sp, #12
    4084:	ldr.w	pc, [sp], #4

00004088 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    4088:	push	{r4, r5, r6, r7, lr}
    408a:	sub	sp, #68	; 0x44
    char msoft[]="microsoft.com: 1.0;";
    408c:	ldr	r3, [pc, #280]	; (41a8 <MTPD::WriteDescriptor()+0x120>)
  void MTPD::WriteDescriptor() {
    408e:	mov	r4, r0
    char msoft[]="microsoft.com: 1.0;";
    4090:	add	r2, sp, #4
    4092:	add.w	r7, r3, #16
    4096:	mov	r6, r2
    4098:	ldr	r0, [r3, #0]
    409a:	adds	r3, #8
    409c:	ldr.w	r1, [r3, #-4]
    40a0:	mov	r5, r2
    40a2:	cmp	r3, r7
    40a4:	stmia	r5!, {r0, r1}
    40a6:	mov	r2, r5
    40a8:	bne.n	4098 <MTPD::WriteDescriptor()+0x10>
    40aa:	ldr	r0, [r3, #0]
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf1);
    40ac:	add	r2, sp, #24
    40ae:	movs	r1, #2
    40b0:	vldr	s0, [pc, #248]	; 41ac <MTPD::WriteDescriptor()+0x124>
    char msoft[]="microsoft.com: 1.0;";
    40b4:	str	r0, [r5, #0]
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf1);
    40b6:	movs	r0, #3
    40b8:	bl	b23c <dtostrf>
    strlcat(buf1, " / MTP " MTP_VERS, sizeof(buf1) );
    40bc:	movs	r2, #20
    40be:	ldr	r1, [pc, #240]	; (41b0 <MTPD::WriteDescriptor()+0x128>)
    40c0:	add	r0, sp, #24
    40c2:	bl	e8d8 <strlcat>
    for (size_t i=0; i<10; i++) buf2[i] = usb_string_serial_number.wString[i];
    40c6:	add	r3, sp, #44	; 0x2c
    40c8:	ldr	r2, [pc, #232]	; (41b4 <MTPD::WriteDescriptor()+0x12c>)
    strlcat(buf1, " / MTP " MTP_VERS, sizeof(buf1) );
    40ca:	movs	r5, #10
    40cc:	mov	r7, r3
    for (size_t i=0; i<10; i++) buf2[i] = usb_string_serial_number.wString[i];
    40ce:	ldrh.w	r1, [r2, #2]!
    40d2:	subs	r5, #1
    40d4:	strb.w	r1, [r3], #1
    40d8:	bne.n	40ce <MTPD::WriteDescriptor()+0x46>
    write16(100);  // MTP version
    40da:	movs	r1, #100	; 0x64
    40dc:	mov	r0, r4
    40de:	bl	3fca <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    40e2:	movs	r1, #6
    40e4:	mov	r0, r4
    40e6:	bl	4074 <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    40ea:	movs	r1, #100	; 0x64
    40ec:	mov	r0, r4
    40ee:	bl	3fca <MTPD::write16(unsigned short)>
    writestring(msoft);
    40f2:	mov	r1, r6
    40f4:	mov	r0, r4
    40f6:	ldr	r6, [pc, #192]	; (41b8 <MTPD::WriteDescriptor()+0x130>)
    40f8:	bl	3fe0 <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    40fc:	mov	r1, r5
    40fe:	mov	r0, r4
    4100:	bl	3fca <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    4104:	movs	r1, #20
    4106:	mov	r0, r4
    4108:	bl	4074 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    410c:	adds	r5, #1
    410e:	ldrh.w	r1, [r6], #2
    4112:	mov	r0, r4
    4114:	bl	3fca <MTPD::write16(unsigned short)>
    4118:	cmp	r5, #20
    411a:	bne.n	410c <MTPD::WriteDescriptor()+0x84>
    write32(supported_event_num);      
    411c:	mov	r0, r4
    411e:	movs	r1, #4
    4120:	bl	4074 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    4124:	mov	r0, r4
    4126:	movw	r1, #16388	; 0x4004
    412a:	bl	3fca <MTPD::write16(unsigned short)>
    412e:	mov	r0, r4
    4130:	movw	r1, #16389	; 0x4005
    4134:	bl	3fca <MTPD::write16(unsigned short)>
    4138:	mov	r0, r4
    413a:	movw	r1, #16395	; 0x400b
    413e:	bl	3fca <MTPD::write16(unsigned short)>
    4142:	mov	r0, r4
    4144:	movw	r1, #16396	; 0x400c
    4148:	bl	3fca <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    414c:	mov	r0, r4
    414e:	movs	r1, #1
    4150:	bl	4074 <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    4154:	mov	r0, r4
    4156:	movw	r1, #54274	; 0xd402
    415a:	bl	3fca <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    415e:	mov	r0, r4
    4160:	movs	r1, #0
    4162:	bl	4074 <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    4166:	mov	r0, r4
    4168:	movs	r1, #2
    416a:	bl	4074 <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    416e:	mov	r0, r4
    4170:	mov.w	r1, #12288	; 0x3000
    4174:	bl	3fca <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    4178:	mov	r0, r4
    417a:	movw	r1, #12289	; 0x3001
    417e:	bl	3fca <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    4182:	mov	r0, r4
    4184:	ldr	r1, [pc, #52]	; (41bc <MTPD::WriteDescriptor()+0x134>)
    4186:	bl	3fe0 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    418a:	mov	r0, r4
    418c:	ldr	r1, [pc, #48]	; (41c0 <MTPD::WriteDescriptor()+0x138>)
    418e:	bl	3fe0 <MTPD::writestring(char const*)>
    writestring(buf1);    
    4192:	add	r1, sp, #24
    4194:	mov	r0, r4
    4196:	bl	3fe0 <MTPD::writestring(char const*)>
    writestring(buf2);    
    419a:	mov	r1, r7
    419c:	mov	r0, r4
    419e:	bl	3fe0 <MTPD::writestring(char const*)>
  }
    41a2:	add	sp, #68	; 0x44
    41a4:	pop	{r4, r5, r6, r7, pc}
    41a6:	nop
    41a8:	.word	0x20001060
    41ac:	.word	0x3fcb851f
    41b0:	.word	0x20001050
    41b4:	.word	0x20001e2e
    41b8:	.word	0x20000aec
    41bc:	.word	0x2000105b
    41c0:	.word	0x20001074

000041c4 <MTPD::WriteStorageIDs()>:
      uint32_t sd_getFSCount(void) {return fsCount;}
    41c4:	ldr	r3, [r0, #0]
  void MTPD::WriteStorageIDs() {
    41c6:	push	{r4, r5, r6, lr}
    41c8:	ldr	r6, [r3, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    41ca:	movs	r4, #0
  void MTPD::WriteStorageIDs() {
    41cc:	mov	r5, r0
    write32(num); // number of storages (disks)
    41ce:	mov	r1, r6
    41d0:	bl	4074 <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    41d4:	cmp	r4, r6
    41d6:	bne.n	41da <MTPD::WriteStorageIDs()+0x16>
  }
    41d8:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    41da:	adds	r4, #1
    41dc:	mov	r0, r5
    41de:	mov	r1, r4
    41e0:	bl	4074 <MTPD::write32(unsigned long)>
    41e4:	b.n	41d4 <MTPD::WriteStorageIDs()+0x10>

000041e6 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    41e6:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    41e8:	add.w	r7, r0, #4096	; 0x1000
  { uint32_t store = Storage2Store(storage);
    41ec:	mov	r4, r0
    41ee:	mov	r6, r2
    if (write_get_length_) {
    41f0:	ldrb.w	r3, [r7, #1064]	; 0x428
    41f4:	cbz	r3, 4204 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    41f6:	bl	3f3c <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    41fa:	adds	r0, #1
      write_length_ *= 4;
    41fc:	lsls	r0, r0, #2
    41fe:	str.w	r0, [r7, #1068]	; 0x42c
  }
    4202:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    4204:	subs	r5, r1, #1
      uint32_t numObjects=GetNumObjects(storage, parent);
    4206:	bl	3f3c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    420a:	mov	r1, r0
      write32(numObjects);
    420c:	mov	r0, r4
    420e:	bl	4074 <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    4212:	mov	r2, r6
    4214:	mov	r1, r5
    4216:	ldr	r0, [r4, #0]
    4218:	bl	141a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    421c:	mov	r1, r5
    421e:	ldr	r0, [r4, #0]
    4220:	bl	1466 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    4224:	mov	r1, r0
    4226:	cmp	r0, #0
    4228:	beq.n	4202 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    422a:	mov	r0, r4
    422c:	bl	4074 <MTPD::write32(unsigned long)>
    4230:	b.n	421c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x36>
	...

00004234 <MTPD::GetObjectInfo(unsigned long)>:
  {
    4234:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4238:	sub	sp, #416	; 0x1a0
    423a:	mov	r4, r0
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    423c:	add	r5, sp, #96	; 0x60
    423e:	add	r6, sp, #32
    4240:	add	r7, sp, #20
    4242:	add.w	r8, sp, #18
    4246:	add	r3, sp, #24
    4248:	add	r2, sp, #160	; 0xa0
    424a:	str	r5, [sp, #12]
    424c:	str	r6, [sp, #8]
    424e:	str.w	r8, [sp, #4]
    4252:	str	r7, [sp, #0]
    4254:	ldr	r0, [r0, #0]
    4256:	bl	14a8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>
    uint32_t storage = Store2Storage(store);
    425a:	ldrh.w	r1, [sp, #18]
    write32(storage); // storage
    425e:	mov	r0, r4
    4260:	adds	r1, #1
    4262:	bl	4074 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    4266:	movs	r1, #0
    4268:	mov	r0, r4
    426a:	ldrd	r2, r3, [sp, #24]
    426e:	cmp	r3, r1
    4270:	it	eq
    4272:	cmpeq.w	r2, #4294967295
    4276:	it	eq
    4278:	movweq	r1, #12289	; 0x3001
    427c:	bl	3fca <MTPD::write16(unsigned short)>
    write16(0);  // protection
    4280:	mov	r0, r4
    4282:	movs	r1, #0
    4284:	bl	3fca <MTPD::write16(unsigned short)>
    write32(size&0xffffffff); // size
    4288:	ldr	r1, [sp, #24]
    428a:	mov	r0, r4
    428c:	bl	4074 <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    4290:	mov	r0, r4
    4292:	movs	r1, #0
    4294:	bl	3fca <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    4298:	mov	r0, r4
    429a:	movs	r1, #0
    429c:	bl	4074 <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    42a0:	mov	r0, r4
    42a2:	movs	r1, #0
    42a4:	bl	4074 <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    42a8:	mov	r0, r4
    42aa:	movs	r1, #0
    42ac:	bl	4074 <MTPD::write32(unsigned long)>
    write32(0); // pix width
    42b0:	mov	r0, r4
    42b2:	movs	r1, #0
    42b4:	bl	4074 <MTPD::write32(unsigned long)>
    write32(0); // pix height
    42b8:	mov	r0, r4
    42ba:	movs	r1, #0
    42bc:	bl	4074 <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    42c0:	mov	r0, r4
    42c2:	movs	r1, #0
    42c4:	bl	4074 <MTPD::write32(unsigned long)>
    write32(parent); // parent
    42c8:	ldr	r1, [r7, #0]
    42ca:	mov	r0, r4
    42cc:	bl	4074 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    42d0:	mov	r0, r4
    42d2:	ldrd	r3, r2, [sp, #24]
    42d6:	adds	r3, #1
    42d8:	orrs	r3, r2
    42da:	ite	eq
    42dc:	moveq	r1, #1
    42de:	movne	r1, #0
    42e0:	bl	3fca <MTPD::write16(unsigned short)>
    write32(0); // association description
    42e4:	mov	r0, r4
    42e6:	movs	r1, #0
    42e8:	bl	4074 <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    42ec:	mov	r0, r4
    42ee:	movs	r1, #0
    42f0:	bl	4074 <MTPD::write32(unsigned long)>
    writestring(filename);
    42f4:	add	r1, sp, #160	; 0xa0
    42f6:	mov	r0, r4
    42f8:	bl	3fe0 <MTPD::writestring(char const*)>
    writestring(create);  // date created
    42fc:	mov	r1, r6
    42fe:	mov	r0, r4
    4300:	bl	3fe0 <MTPD::writestring(char const*)>
    writestring(modify);  // date modified
    4304:	mov	r1, r5
    4306:	mov	r0, r4
    4308:	bl	3fe0 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    430c:	ldr	r1, [pc, #12]	; (431c <MTPD::GetObjectInfo(unsigned long)+0xe8>)
    430e:	mov	r0, r4
    4310:	bl	3fe0 <MTPD::writestring(char const*)>
  }
    4314:	add	sp, #416	; 0x1a0
    4316:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    431a:	nop
    431c:	.word	0x20000d00

00004320 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    4320:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    4322:	ldr	r6, [pc, #36]	; (4348 <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4324:	movs	r4, #0
    4326:	ldr	r7, [pc, #36]	; (434c <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    4328:	mov	r5, r0
      write32(propertyListNum);
    432a:	ldr	r1, [r6, #0]
    432c:	bl	4074 <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4330:	ldr	r3, [r6, #0]
    4332:	cmp	r3, r4
    4334:	bhi.n	4338 <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    4336:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4338:	ldrh.w	r1, [r7], #2
    433c:	mov	r0, r5
    433e:	adds	r4, #1
    4340:	bl	3fca <MTPD::write16(unsigned short)>
    4344:	b.n	4330 <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    4346:	nop
    4348:	.word	0x20001e10
    434c:	.word	0x20000ad8

00004350 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    4350:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4354:	sub	sp, #416	; 0x1a0
    4356:	mov	r5, r2
    4358:	mov	r4, r0
    435a:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    435c:	add.w	r8, sp, #18
    4360:	add.w	r9, sp, #96	; 0x60
    4364:	add.w	sl, sp, #32
    4368:	add	r6, sp, #20
    436a:	str.w	r8, [sp, #4]
    436e:	add	r3, sp, #24
    4370:	add	r2, sp, #160	; 0xa0
    4372:	str.w	r9, [sp, #12]
    4376:	str.w	sl, [sp, #8]
    437a:	str	r6, [sp, #0]
    437c:	ldr	r0, [r0, #0]
    437e:	bl	14a8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>
      switch(p2)
    4382:	movw	r0, #56331	; 0xdc0b
      uint32_t storage = Store2Storage(store);
    4386:	ldrh.w	r3, [sp, #18]
      switch(p2)
    438a:	cmp	r5, r0
      uint32_t storage = Store2Storage(store);
    438c:	add.w	r8, r3, #1
      dir = size == 0xFFFFFFFFUL;
    4390:	ldrd	r1, r2, [sp, #24]
      switch(p2)
    4394:	bhi.n	43b6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x66>
    4396:	cmp.w	r5, #56320	; 0xdc00
    439a:	bls.n	43c6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76>
    439c:	sub.w	r5, r5, #56320	; 0xdc00
    43a0:	subs	r5, #1
    43a2:	cmp	r5, #10
    43a4:	bhi.n	43c6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76>
    43a6:	tbb	[pc, r5]
    43aa:	.short	0x1611
    43ac:	.word	0x0e0e3c23
    43b0:	.word	0x0e2c2a25
    43b4:	.byte	0x2e
    43b5:	.byte	0x00
    43b6:	movw	r3, #56385	; 0xdc41
    43ba:	cmp	r5, r3
    43bc:	beq.n	4410 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc0>
    43be:	movw	r3, #56388	; 0xdc44
    43c2:	cmp	r5, r3
    43c4:	beq.n	43f4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa4>
    }
    43c6:	add	sp, #416	; 0x1a0
    43c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          write32(storage);
    43cc:	mov	r1, r8
          write32(0);
    43ce:	mov	r0, r4
    43d0:	bl	4074 <MTPD::write32(unsigned long)>
    }
    43d4:	b.n	43c6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76>
          write16(dir?0x3001:0x3000);
    43d6:	cmp	r2, #0
    43d8:	it	eq
    43da:	cmpeq.w	r1, #4294967295
    43de:	ite	ne
    43e0:	movne.w	r1, #12288	; 0x3000
    43e4:	movweq	r1, #12289	; 0x3001
          write16(0);
    43e8:	mov	r0, r4
    43ea:	bl	3fca <MTPD::write16(unsigned short)>
          break;
    43ee:	b.n	43c6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76>
          write16(0);
    43f0:	movs	r1, #0
    43f2:	b.n	43e8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
          writestring(name);
    43f4:	add	r1, sp, #160	; 0xa0
          writestring(modify);
    43f6:	mov	r0, r4
    43f8:	bl	3fe0 <MTPD::writestring(char const*)>
          break;
    43fc:	b.n	43c6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76>
          writestring(create);
    43fe:	mov	r1, sl
    4400:	b.n	43f6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa6>
          writestring(modify);
    4402:	mov	r1, r9
    4404:	b.n	43f6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa6>
          write32((store==parent)? 0: parent);
    4406:	ldr	r1, [r6, #0]
    4408:	cmp	r3, r1
    440a:	it	eq
    440c:	moveq	r1, #0
    440e:	b.n	43ce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7e>
          write32(p1);
    4410:	mov	r1, r7
    4412:	mov	r0, r4
    4414:	bl	4074 <MTPD::write32(unsigned long)>
          write32(parent);
    4418:	ldr	r1, [r6, #0]
    441a:	mov	r0, r4
    441c:	bl	4074 <MTPD::write32(unsigned long)>
          write32(storage);
    4420:	mov	r1, r8
    4422:	mov	r0, r4
    4424:	bl	4074 <MTPD::write32(unsigned long)>
          write32(0);
    4428:	movs	r1, #0
    442a:	b.n	43ce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7e>

0000442c <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    442c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t store = Storage2Store(storage);
    4430:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    4432:	sub	sp, #20
    4434:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4436:	ldr	r0, [r0, #0]
    4438:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    443a:	ldr	r6, [pc, #224]	; (451c <MTPD::GetStorageInfo(unsigned long)+0xf0>)
    443c:	bl	101a <MTPStorage_SD::readonly(unsigned long)>
    4440:	cmp	r0, #0
    4442:	mov	r0, r4
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    4444:	mov.w	fp, #0
    4448:	ite	ne
    444a:	movne	r1, #1
    444c:	moveq	r1, #4
    444e:	bl	3fca <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    4452:	mov	r1, r7
    4454:	ldr	r0, [r4, #0]
    4456:	bl	101e <MTPStorage_SD::has_directories(unsigned long)>
    445a:	adds	r0, #1
    445c:	uxth	r1, r0
    445e:	mov	r0, r4
    4460:	bl	3fca <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    4464:	mov	r0, r4
    4466:	movs	r1, #0
    4468:	bl	3fca <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    446c:	mov	r1, r7
    446e:	ldr	r0, [r4, #0]
    4470:	bl	1022 <MTPStorage_SD::totalSize(unsigned long)>
    4474:	mov	r8, r1
    4476:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    4478:	mov	r1, r7
    447a:	ldr	r0, [r4, #0]
    447c:	bl	1e9c <MTPStorage_SD::usedSize(unsigned long)>
							  return write((const uint8_t *)str, strlen(str)); }
    4480:	ldr	r3, [r6, #0]
    4482:	mov	r9, r0
    4484:	mov	sl, r1
    4486:	ldr	r3, [r3, #4]
    4488:	movs	r2, #5
    448a:	ldr	r1, [pc, #148]	; (4520 <MTPD::GetStorageInfo(unsigned long)+0xf4>)
    448c:	mov	r0, r6
    448e:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    4490:	movs	r3, #10
    4492:	mov	r2, r5
    4494:	mov	r0, r6
    4496:	strd	r3, fp, [sp]
    449a:	mov	r3, r8
    449c:	bl	c4f2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    44a0:	mov	r0, r6
    44a2:	bl	c48c <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    44a6:	ldr	r3, [r6, #0]
    44a8:	ldr	r1, [pc, #120]	; (4524 <MTPD::GetStorageInfo(unsigned long)+0xf8>)
    44aa:	movs	r2, #5
    44ac:	ldr	r3, [r3, #4]
    44ae:	mov	r0, r6
    44b0:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    44b2:	movs	r3, #10
    44b4:	mov	r2, r9
    44b6:	mov	r0, r6
    44b8:	str	r3, [sp, #0]
    44ba:	mov	r3, sl
    44bc:	str.w	fp, [sp, #4]
    44c0:	bl	c4f2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    44c4:	mov	r0, r6
    44c6:	bl	c48c <Print::println()>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    44ca:	movs	r2, #8
    44cc:	mov	r0, r4
    44ce:	add.w	r1, sp, r2
    44d2:	strd	r5, r8, [sp, #8]
    44d6:	bl	3f94 <MTPD::write(char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    44da:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    44de:	mov.w	r2, #8
    44e2:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    44e4:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    44e8:	add.w	r1, sp, r2
    44ec:	strd	r5, r3, [sp, #8]
    44f0:	bl	3f94 <MTPD::write(char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    44f4:	mov	r0, r4
    44f6:	mov.w	r1, #4294967295
    44fa:	bl	4074 <MTPD::write32(unsigned long)>
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    44fe:	ldr	r3, [r4, #0]
    writestring(name);  // storage descriptor
    4500:	mov	r0, r4
    4502:	add.w	r3, r3, r7, lsl #2
    4506:	ldr	r1, [r3, #4]
    4508:	bl	3fe0 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    450c:	ldr	r1, [pc, #24]	; (4528 <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    450e:	mov	r0, r4
  }
    4510:	add	sp, #20
    4512:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    4516:	b.w	3fe0 <MTPD::writestring(char const*)>
    451a:	nop
    451c:	.word	0x20001c28
    4520:	.word	0x20001044
    4524:	.word	0x2000104a
    4528:	.word	0x20000d00

0000452c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    452c:	movw	r2, #56331	; 0xdc0b
    4530:	cmp	r1, r2
    {
    4532:	push	{r0, r1, r4, r6, r7, lr}
    4534:	mov	r4, r0
      switch(p1)
    4536:	bhi.n	4558 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    4538:	cmp.w	r1, #56320	; 0xdc00
    453c:	bls.n	4568 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    453e:	sub.w	r3, r1, #56320	; 0xdc00
    4542:	subs	r3, #1
    4544:	cmp	r3, #10
    4546:	bhi.n	4568 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    4548:	tbb	[pc, r3]
    454c:	.word	0x413e2210
    4550:	.word	0x69570e0e
    4554:	.short	0x0e75
    4556:	.byte	0x78
    4557:	.byte	0x00
    4558:	movw	r2, #56385	; 0xdc41
    455c:	cmp	r1, r2
    455e:	beq.n	4642 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    4560:	movw	r2, #56388	; 0xdc44
    4564:	cmp	r1, r2
    4566:	beq.n	4624 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    4568:	add	sp, #8
    456a:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    456c:	movw	r1, #56321	; 0xdc01
          write16(0xDC0B);
    4570:	mov	r0, r4
    4572:	bl	3fca <MTPD::write16(unsigned short)>
          write16(6);
    4576:	mov	r0, r4
    4578:	movs	r1, #6
    457a:	bl	3fca <MTPD::write16(unsigned short)>
          write8(0); //get
    457e:	mov	r0, r4
    4580:	movs	r1, #0
    4582:	bl	3fb4 <MTPD::write8(unsigned char)>
          write32(0);
    4586:	movs	r1, #0
    4588:	mov	r0, r4
    458a:	bl	4074 <MTPD::write32(unsigned long)>
          write32(0);
    458e:	b.n	45b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    4590:	movw	r1, #56322	; 0xdc02
          write16(0xDC03);
    4594:	mov	r0, r4
    4596:	bl	3fca <MTPD::write16(unsigned short)>
          write16(0x004);
    459a:	movs	r1, #4
    459c:	mov	r0, r4
    459e:	bl	3fca <MTPD::write16(unsigned short)>
          write8(0); //get
    45a2:	movs	r1, #0
    45a4:	mov	r0, r4
    45a6:	bl	3fb4 <MTPD::write8(unsigned char)>
          write16(0);
    45aa:	movs	r1, #0
    45ac:	mov	r0, r4
    45ae:	bl	3fca <MTPD::write16(unsigned short)>
          write32(0);
    45b2:	mov	r0, r4
    45b4:	movs	r1, #0
    45b6:	bl	4074 <MTPD::write32(unsigned long)>
          write8(0);
    45ba:	movs	r1, #0
    45bc:	mov	r0, r4
    }
    45be:	add	sp, #8
    45c0:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    45c4:	b.w	3fb4 <MTPD::write8(unsigned char)>
          write16(0xDC03);
    45c8:	movw	r1, #56323	; 0xdc03
    45cc:	b.n	4594 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    45ce:	movw	r1, #56324	; 0xdc04
    45d2:	bl	3fca <MTPD::write16(unsigned short)>
          write16(0x008);
    45d6:	movs	r1, #8
    45d8:	mov	r0, r4
    45da:	bl	3fca <MTPD::write16(unsigned short)>
          write8(0); //get
    45de:	movs	r1, #0
    45e0:	mov	r0, r4
    45e2:	bl	3fb4 <MTPD::write8(unsigned char)>
          write64(0);
    45e6:	movs	r2, #0
    45e8:	movs	r3, #0
    45ea:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    45ee:	movs	r2, #8
    45f0:	mov	r1, sp
    45f2:	mov	r0, r4
    45f4:	bl	3f94 <MTPD::write(char const*, int)>
          write32(0);
    45f8:	b.n	45b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    45fa:	movw	r1, #56327	; 0xdc07
    45fe:	bl	3fca <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    4602:	movw	r1, #65535	; 0xffff
    4606:	mov	r0, r4
    4608:	bl	3fca <MTPD::write16(unsigned short)>
          write8(1); //get/set
    460c:	movs	r1, #1
          write8(0); //get
    460e:	mov	r0, r4
    4610:	bl	3fb4 <MTPD::write8(unsigned char)>
          write8(0);
    4614:	movs	r1, #0
    4616:	mov	r0, r4
    4618:	bl	3fb4 <MTPD::write8(unsigned char)>
    461c:	b.n	45b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    461e:	movw	r1, #56328	; 0xdc08
          write16(0xDC09);
    4622:	mov	r0, r4
          write16(0xDC44);
    4624:	bl	3fca <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    4628:	movw	r1, #65535	; 0xffff
    462c:	mov	r0, r4
    462e:	bl	3fca <MTPD::write16(unsigned short)>
          write8(0); //get
    4632:	movs	r1, #0
    4634:	b.n	460e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    4636:	movw	r1, #56329	; 0xdc09
    463a:	b.n	4622 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    463c:	movw	r1, #56331	; 0xdc0b
    4640:	b.n	4570 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    4642:	bl	3fca <MTPD::write16(unsigned short)>
          write16(0x0A);
    4646:	movs	r1, #10
    4648:	mov	r0, r4
    464a:	movs	r6, #0
    464c:	bl	3fca <MTPD::write16(unsigned short)>
          write8(0); //get
    4650:	movs	r7, #0
    4652:	movs	r1, #0
    4654:	mov	r0, r4
    4656:	bl	3fb4 <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    465a:	movs	r2, #8
    465c:	mov	r1, sp
    465e:	mov	r0, r4
    4660:	strd	r6, r7, [sp]
    4664:	bl	3f94 <MTPD::write(char const*, int)>
          write64(0);
    4668:	strd	r6, r7, [sp]
    466c:	b.n	45ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

0000466e <MTPD::GetObject(unsigned long)>:
    {
    466e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4672:	mov	r6, r0
      uint32_t size = storage_->GetSize(object_id);
    4674:	ldr	r0, [r0, #0]
      if (write_get_length_) {
    4676:	add.w	r5, r6, #4096	; 0x1000
    {
    467a:	vpush	{d8}
    467e:	sub	sp, #12
    4680:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    4684:	bl	155c <MTPStorage_SD::GetSize(unsigned long)>
      if (write_get_length_) {
    4688:	ldrb.w	r4, [r5, #1064]	; 0x428
      uint32_t size = storage_->GetSize(object_id);
    468c:	mov	r8, r0
      if (write_get_length_) {
    468e:	cbz	r4, 46a4 <MTPD::GetObject(unsigned long)+0x36>
        write_length_ += size;
    4690:	ldr.w	r3, [r5, #1068]	; 0x42c
    4694:	add	r3, r0
    4696:	str.w	r3, [r5, #1068]	; 0x42c
    }
    469a:	add	sp, #12
    469c:	vpop	{d8}
    46a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    46a4:	mov.w	r3, #4096	; 0x1000
        uint32_t len = sizeof(MTPHeader);
    46a8:	movs	r7, #12
    46aa:	add.w	sl, r6, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    46ae:	add.w	fp, r6, #32
        disk_pos=DISK_BUFFER_SIZE;
    46b2:	str.w	r3, [r5, #1060]	; 0x424
        while(pos<size)
    46b6:	cmp	r4, r8
    46b8:	bcc.n	46d4 <MTPD::GetObject(unsigned long)+0x66>
        if(len>0)
    46ba:	cmp	r7, #0
    46bc:	beq.n	469a <MTPD::GetObject(unsigned long)+0x2c>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    46be:	mov.w	r1, #512	; 0x200
    46c2:	add.w	r0, r6, #32
    }
    46c6:	add	sp, #12
    46c8:	vpop	{d8}
    46cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    46d0:	b.w	3eac <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
          if(disk_pos==DISK_BUFFER_SIZE)
    46d4:	ldr.w	r3, [r5, #1060]	; 0x424
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    46d8:	sub.w	r9, r8, r4
          if(disk_pos==DISK_BUFFER_SIZE)
    46dc:	cmp.w	r3, #4096	; 0x1000
    46e0:	bne.n	4700 <MTPD::GetObject(unsigned long)+0x92>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    46e2:	cmp.w	r9, #4096	; 0x1000
    46e6:	it	cc
    46e8:	movcc	r3, r9
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    46ea:	mov	r2, r4
    46ec:	vmov	r1, s16
    46f0:	ldr	r0, [r6, #0]
    46f2:	str	r3, [sp, #0]
    46f4:	mov	r3, sl
    46f6:	bl	1572 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>
            disk_pos=0;
    46fa:	movs	r3, #0
    46fc:	str.w	r3, [r5, #1060]	; 0x424
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    4700:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4704:	ldr.w	r1, [r5, #1060]	; 0x424
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4708:	add.w	r0, fp, r7
    470c:	cmp	r9, r3
    470e:	it	cs
    4710:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4712:	rsb	r3, r1, #4096	; 0x1000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4716:	add	r1, sl
    4718:	cmp	r9, r3
    471a:	it	cs
    471c:	movcs	r9, r3
    471e:	mov	r2, r9
          len += to_copy;
    4720:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4722:	bl	9f88 <memcpy>
          disk_pos += to_copy;
    4726:	ldr.w	r3, [r5, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    472a:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    472e:	add	r4, r9
          disk_pos += to_copy;
    4730:	add	r3, r9
    4732:	str.w	r3, [r5, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    4736:	bne.n	46b6 <MTPD::GetObject(unsigned long)+0x48>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4738:	mov	r1, r7
    473a:	mov	r0, fp
            len=0;
    473c:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    473e:	bl	3eac <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4742:	b.n	46b6 <MTPD::GetObject(unsigned long)+0x48>

00004744 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    {
    4744:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4748:	mov	r6, r2
    474a:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    474c:	ldr	r0, [r0, #0]
    {
    474e:	mov	r4, r3
      if (write_get_length_) {
    4750:	add.w	r5, r8, #4096	; 0x1000
    {
    4754:	vpush	{d8}
    4758:	sub	sp, #20
    475a:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    475e:	bl	155c <MTPStorage_SD::GetSize(unsigned long)>
      size -= offset;
    4762:	subs	r0, r0, r6
      if (write_get_length_) {
    4764:	ldrb.w	r3, [r5, #1064]	; 0x428
      if(NumBytes == 0xffffffff) NumBytes=size;
    4768:	cmp.w	r4, #4294967295
    476c:	it	eq
    476e:	moveq	r4, r0
      if (write_get_length_) {
    4770:	str	r3, [sp, #12]
    4772:	cmp	r4, r0
    4774:	it	cs
    4776:	movcs	r4, r0
    4778:	cbz	r3, 4790 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x4c>
        write_length_ += size;
    477a:	ldr.w	r3, [r5, #1068]	; 0x42c
    477e:	add	r3, r4
    4780:	str.w	r3, [r5, #1068]	; 0x42c
    }
    4784:	mov	r0, r4
    4786:	add	sp, #20
    4788:	vpop	{d8}
    478c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    4790:	mov.w	r3, #4096	; 0x1000
        uint32_t len = sizeof(MTPHeader);
    4794:	movs	r7, #12
    4796:	add.w	sl, r8, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    479a:	add.w	fp, r8, #32
        disk_pos=DISK_BUFFER_SIZE;
    479e:	str.w	r3, [r5, #1060]	; 0x424
        while(pos<size)
    47a2:	cmp	r6, r4
    47a4:	bcs.n	4784 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
          if(disk_pos==DISK_BUFFER_SIZE)
    47a6:	ldr.w	r3, [r5, #1060]	; 0x424
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    47aa:	sub.w	r9, r4, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    47ae:	cmp.w	r3, #4096	; 0x1000
    47b2:	bne.n	47d4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x90>
    47b4:	cmp.w	r9, #4096	; 0x1000
    47b8:	it	cc
    47ba:	movcc	r3, r9
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    47bc:	mov	r2, r6
    47be:	vmov	r1, s16
    47c2:	ldr.w	r0, [r8]
    47c6:	str	r3, [sp, #0]
    47c8:	mov	r3, sl
    47ca:	bl	1572 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>
            disk_pos=0;
    47ce:	ldr	r3, [sp, #12]
    47d0:	str.w	r3, [r5, #1060]	; 0x424
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    47d4:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    47d8:	ldr.w	r1, [r5, #1060]	; 0x424
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    47dc:	add.w	r0, fp, r7
    47e0:	cmp	r9, r3
    47e2:	it	cs
    47e4:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    47e6:	rsb	r3, r1, #4096	; 0x1000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    47ea:	add	r1, sl
    47ec:	cmp	r9, r3
    47ee:	it	cs
    47f0:	movcs	r9, r3
    47f2:	mov	r2, r9
          len += to_copy;
    47f4:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    47f6:	bl	9f88 <memcpy>
          disk_pos += to_copy;
    47fa:	ldr.w	r3, [r5, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    47fe:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    4802:	add	r6, r9
          disk_pos += to_copy;
    4804:	add	r3, r9
    4806:	str.w	r3, [r5, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    480a:	bne.n	47a2 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x5e>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    480c:	mov	r1, r7
    480e:	mov	r0, fp
            len=0;
    4810:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4812:	bl	3eac <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4816:	b.n	47a2 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x5e>

00004818 <usb_init_events>:
    {
    4818:	push	{r4, lr}
        usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    481a:	ldr	r3, [pc, #48]	; (484c <usb_init_events+0x34>)
    481c:	movs	r2, #0
        usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
    481e:	ldr	r4, [pc, #48]	; (4850 <usb_init_events+0x38>)
        usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    4820:	movs	r1, #32
    4822:	movs	r0, #5
    4824:	bl	b120 <usb_config_tx>
        usb_config_rx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, rxEvent_event);
    4828:	ldr	r3, [pc, #40]	; (4854 <usb_init_events+0x3c>)
    482a:	movs	r2, #0
    482c:	movs	r1, #32
    482e:	movs	r0, #5
    4830:	bl	b0e0 <usb_config_rx>
        usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
    4834:	movs	r3, #0
    4836:	movs	r2, #32
    4838:	mov	r0, r4
    483a:	ldr	r1, [pc, #28]	; (4858 <usb_init_events+0x40>)
    483c:	bl	b160 <usb_prepare_transfer>
        usb_receive(MTP_EVENT_ENDPOINT, rx_event_transfer + 0);
    4840:	mov	r1, r4
    4842:	movs	r0, #5
    4844:	bl	b1b0 <usb_receive>
    }
    4848:	movs	r0, #1
    484a:	pop	{r4, pc}
    484c:	.word	0x00003e8d
    4850:	.word	0x200022e0
    4854:	.word	0x00003e9d
    4858:	.word	0x200022c0

0000485c <MTPD::pull_packet(unsigned char*)>:

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
    485c:	push	{r4, lr}
    485e:	mov	r4, r1
      while(!usb_mtp_available());
    4860:	bl	bfb0 <usb_mtp_available>
    4864:	cmp	r0, #0
    4866:	beq.n	4860 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    4868:	mov	r0, r4
    486a:	movs	r1, #60	; 0x3c
    }
    486c:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    4870:	b.w	bf1c <usb_mtp_recv>

00004874 <MTPD::read(char*, unsigned long)>:
    {
    4874:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4878:	mov	r8, r0
    487a:	mov	r5, r1
      if(!size) 
    487c:	mov	r4, r2
    487e:	ldr.w	fp, [pc, #84]	; 48d4 <MTPD::read(char*, unsigned long)+0x60>
    4882:	cbz	r2, 48ca <MTPD::read(char*, unsigned long)+0x56>
          memcpy(data, rx_data_buffer + index, to_copy);
    4884:	add.w	r9, r0, #544	; 0x220
          index=0;
    4888:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    488c:	ldr.w	r6, [fp]
    4890:	rsb	r7, r6, #512	; 0x200
    4894:	cmp	r7, r4
    4896:	it	cs
    4898:	movcs	r7, r4
        if (data) {
    489a:	cbz	r5, 48aa <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    489c:	mov	r0, r5
          data += to_copy;
    489e:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    48a0:	mov	r2, r7
    48a2:	add.w	r1, r9, r6
    48a6:	bl	9f88 <memcpy>
        index += to_copy;
    48aa:	add	r6, r7
        size -= to_copy;
    48ac:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    48ae:	cmp.w	r6, #512	; 0x200
        index += to_copy;
    48b2:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    48b6:	bne.n	48c4 <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    48b8:	mov	r1, r9
    48ba:	mov	r0, r8
    48bc:	bl	485c <MTPD::pull_packet(unsigned char*)>
          index=0;
    48c0:	str.w	sl, [fp]
      while (size) {
    48c4:	cmp	r4, #0
    48c6:	bne.n	488c <MTPD::read(char*, unsigned long)+0x18>
    48c8:	b.n	48ce <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    48ca:	str.w	r2, [fp]
    }
    48ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48d2:	nop
    48d4:	.word	0x2002cea0

000048d8 <MTPD::ReadMTPHeader()>:
  {
    48d8:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    48da:	movs	r2, #12
    48dc:	add	r1, sp, #4
    48de:	bl	4874 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    48e2:	ldrh.w	r3, [sp, #8]
    48e6:	cmp	r3, #2
      return header.len - 12;
    48e8:	itet	eq
    48ea:	ldreq	r0, [sp, #4]
      return 0;
    48ec:	movne	r0, #0
      return header.len - 12;
    48ee:	subeq	r0, #12
  }
    48f0:	add	sp, #20
    48f2:	ldr.w	pc, [sp], #4

000048f6 <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    48f6:	push	{r0, r1, r2, lr}
    48f8:	movs	r2, #1
    48fa:	add.w	r1, sp, #7
    48fe:	bl	4874 <MTPD::read(char*, unsigned long)>
    4902:	ldrb.w	r0, [sp, #7]
    4906:	add	sp, #12
    4908:	ldr.w	pc, [sp], #4

0000490c <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    490c:	push	{r0, r1, r2, lr}
    490e:	movs	r2, #2
    4910:	add.w	r1, sp, #6
    4914:	bl	4874 <MTPD::read(char*, unsigned long)>
    4918:	ldrh.w	r0, [sp, #6]
    491c:	add	sp, #12
    491e:	ldr.w	pc, [sp], #4

00004922 <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4922:	push	{r0, r1, r2, lr}
    4924:	movs	r2, #4
    4926:	add.w	r1, sp, r2
    492a:	bl	4874 <MTPD::read(char*, unsigned long)>
    492e:	ldr	r0, [sp, #4]
    4930:	add	sp, #12
    4932:	ldr.w	pc, [sp], #4

00004936 <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    4936:	push	{r4, r5, r6, lr}
    4938:	mov	r5, r1
    493a:	mov	r6, r0
    int len = read8();
    493c:	bl	48f6 <MTPD::read8()>
    if (!buffer) {
    4940:	cbz	r5, 494a <MTPD::readstring(char*)+0x14>
    4942:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    4944:	cmp	r5, r4
    4946:	bne.n	495a <MTPD::readstring(char*)+0x24>
  }
    4948:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    494a:	sxth	r2, r0
    494c:	mov	r1, r5
    494e:	mov	r0, r6
    4950:	lsls	r2, r2, #1
  }
    4952:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    4956:	b.w	4874 <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    495a:	mov	r0, r6
    495c:	bl	490c <MTPD::read16()>
    4960:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    4964:	b.n	4944 <MTPD::readstring(char*)+0xe>

00004966 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    4966:	push	{r4, r5, lr}
    4968:	mov	r4, r0
    496a:	sub	sp, #260	; 0x104
    496c:	mov	r5, r1
        ReadMTPHeader();
    496e:	bl	48d8 <MTPD::ReadMTPHeader()>
        readstring(filename);
    4972:	mov	r1, sp
    4974:	mov	r0, r4
    4976:	bl	4936 <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    497a:	mov	r2, sp
    497c:	mov	r1, r5
    497e:	ldr	r0, [r4, #0]
    4980:	bl	183c <MTPStorage_SD::rename(unsigned long, char const*)>
    }
    4984:	movw	r2, #8193	; 0x2001
    4988:	movw	r3, #8197	; 0x2005
    498c:	cmp	r0, #0
    498e:	ite	ne
    4990:	movne	r0, r2
    4992:	moveq	r0, r3
    4994:	add	sp, #260	; 0x104
    4996:	pop	{r4, r5, pc}

00004998 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4998:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    499c:	mov	r4, r0
    499e:	sub	sp, #268	; 0x10c
    49a0:	mov	r6, r1
      pull_packet(rx_data_buffer);
    49a2:	add.w	r1, r0, #544	; 0x220
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    49a6:	mov	r7, r2
      pull_packet(rx_data_buffer);
    49a8:	bl	485c <MTPD::pull_packet(unsigned char*)>
        index=0;
    49ac:	movs	r2, #0
    49ae:	ldr	r3, [pc, #192]	; (4a70 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd8>)
      int len=ReadMTPHeader();
    49b0:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    49b2:	add.w	r9, sp, #8
        index=0;
    49b6:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    49b8:	bl	48d8 <MTPD::ReadMTPHeader()>
    49bc:	mov	r5, r0
      read32(); len -=4; // storage
    49be:	mov	r0, r4
    49c0:	bl	4922 <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    49c4:	mov	r0, r4
    49c6:	bl	490c <MTPD::read16()>
    49ca:	movw	r3, #12289	; 0x3001
      read32(); len -=4; // sequence number
    49ce:	subs	r5, #52	; 0x34
      uint32_t store = Storage2Store(storage);
    49d0:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    49d2:	subs	r3, r0, r3
      read16(); len -=2; // protection
    49d4:	mov	r0, r4
      bool dir = (read16() == 0x3001); len -=2; // format
    49d6:	rsbs	r8, r3, #0
    49da:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    49de:	bl	490c <MTPD::read16()>
      read32(); len -=4; // size
    49e2:	mov	r0, r4
    49e4:	bl	4922 <MTPD::read32()>
      read16(); len -=2; // thumb format
    49e8:	mov	r0, r4
    49ea:	bl	490c <MTPD::read16()>
      read32(); len -=4; // thumb size
    49ee:	mov	r0, r4
    49f0:	bl	4922 <MTPD::read32()>
      read32(); len -=4; // thumb width
    49f4:	mov	r0, r4
    49f6:	bl	4922 <MTPD::read32()>
      read32(); len -=4; // thumb height
    49fa:	mov	r0, r4
    49fc:	bl	4922 <MTPD::read32()>
      read32(); len -=4; // pix width
    4a00:	mov	r0, r4
    4a02:	bl	4922 <MTPD::read32()>
      read32(); len -=4; // pix height
    4a06:	mov	r0, r4
    4a08:	bl	4922 <MTPD::read32()>
      read32(); len -=4; // bit depth
    4a0c:	mov	r0, r4
    4a0e:	bl	4922 <MTPD::read32()>
      read32(); len -=4; // parent
    4a12:	mov	r0, r4
    4a14:	bl	4922 <MTPD::read32()>
      read16(); len -=2; // association type
    4a18:	mov	r0, r4
    4a1a:	bl	490c <MTPD::read16()>
      read32(); len -=4; // association description
    4a1e:	mov	r0, r4
    4a20:	bl	4922 <MTPD::read32()>
      read32(); len -=4; // sequence number
    4a24:	mov	r0, r4
    4a26:	bl	4922 <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4a2a:	mov	r1, r9
    4a2c:	mov	r0, r4
    4a2e:	bl	4936 <MTPD::readstring(char*)>
    4a32:	mov	r0, r9
    4a34:	bl	eb40 <strlen>
    4a38:	adds	r0, #1
    4a3a:	sub.w	r5, r5, r0, lsl #1
    4a3e:	subs	r5, #1
      while(len>=4) { read32(); len-=4;}
    4a40:	cmp	r5, #3
    4a42:	bgt.n	4a5c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xc4>
      while(len) {read8(); len--;}
    4a44:	cbnz	r5, 4a66 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xce>
      return storage_->Create(store, parent, dir, filename);
    4a46:	mov	r3, r8
    4a48:	mov	r2, r7
    4a4a:	mov	r1, r6
    4a4c:	ldr	r0, [r4, #0]
    4a4e:	str.w	r9, [sp]
    4a52:	bl	1716 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>
    }
    4a56:	add	sp, #268	; 0x10c
    4a58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      while(len>=4) { read32(); len-=4;}
    4a5c:	mov	r0, r4
    4a5e:	subs	r5, #4
    4a60:	bl	4922 <MTPD::read32()>
    4a64:	b.n	4a40 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xa8>
      while(len) {read8(); len--;}
    4a66:	mov	r0, r4
    4a68:	subs	r5, #1
    4a6a:	bl	48f6 <MTPD::read8()>
    4a6e:	b.n	4a44 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
    4a70:	.word	0x2002cea0

00004a74 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    4a74:	push	{r4, r5, r6, lr}
    4a76:	mov	r5, r1
    4a78:	add.w	r1, r0, #544	; 0x220
    4a7c:	mov	r6, r2
    4a7e:	mov	r4, r0
    4a80:	bl	485c <MTPD::pull_packet(unsigned char*)>
        index=0;
    4a84:	ldr	r3, [pc, #28]	; (4aa4 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    4a86:	movs	r2, #0
    4a88:	str	r2, [r3, #0]
      if(p2==0xDC07)
    4a8a:	movw	r3, #56327	; 0xdc07
    4a8e:	cmp	r6, r3
    4a90:	bne.n	4a9e <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    4a92:	mov	r1, r5
    4a94:	mov	r0, r4
    }
    4a96:	ldmia.w	sp!, {r4, r5, r6, lr}
    4a9a:	b.w	4966 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    4a9e:	movw	r0, #8197	; 0x2005
    4aa2:	pop	{r4, r5, r6, pc}
    4aa4:	.word	0x2002cea0

00004aa8 <MTPD::SendObject()>:
    { 
    4aa8:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    4aac:	add.w	r9, r0, #544	; 0x220
    { 
    4ab0:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    4ab2:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    4ab6:	mov	r1, r9
      disk_pos=0;
    4ab8:	add.w	r6, r4, #4096	; 0x1000
      pull_packet(rx_data_buffer);
    4abc:	bl	485c <MTPD::pull_packet(unsigned char*)>
        index=0;
    4ac0:	ldr	r3, [pc, #208]	; (4b94 <MTPD::SendObject()+0xec>)
    4ac2:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    4ac4:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4ac6:	add.w	fp, r4, #1056	; 0x420
        index=0;
    4aca:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4acc:	bl	48d8 <MTPD::ReadMTPHeader()>
      disk_pos=0;
    4ad0:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    4ad2:	mov	r7, r0
      disk_pos=0;
    4ad4:	str.w	r3, [r6, #1060]	; 0x424
      while((int)len>0)
    4ad8:	cmp	r7, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4ada:	ldr.w	r3, [r6, #1060]	; 0x424
      while((int)len>0)
    4ade:	bgt.n	4af0 <MTPD::SendObject()+0x48>
        if(storage_->write((const uint8_t *)disk_buffer, disk_pos)<disk_pos) return false;
    4ae0:	ldr	r0, [r4, #0]
      if(disk_pos)
    4ae2:	cmp	r3, #0
    4ae4:	bne.n	4b7e <MTPD::SendObject()+0xd6>
      storage_->close();
    4ae6:	ldr	r0, [r4, #0]
    4ae8:	bl	17ba <MTPStorage_SD::close()>
      return true;
    4aec:	movs	r0, #1
    4aee:	b.n	4b38 <MTPD::SendObject()+0x90>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    4af0:	rsb	r8, sl, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4af4:	rsb	r5, r3, #4096	; 0x1000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4af8:	add.w	r0, fp, r3
    4afc:	add.w	r1, r9, sl
    4b00:	cmp	r8, r7
    4b02:	it	cs
    4b04:	movcs	r8, r7
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4b06:	cmp	r5, r8
    4b08:	it	cs
    4b0a:	movcs	r5, r8
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4b0c:	mov	r2, r5
    4b0e:	bl	9f88 <memcpy>
        disk_pos += to_copy;
    4b12:	ldr.w	r2, [r6, #1060]	; 0x424
        len -= to_copy;
    4b16:	subs	r3, r7, r5
        disk_pos += to_copy;
    4b18:	add	r2, r5
        if(disk_pos==DISK_BUFFER_SIZE)
    4b1a:	cmp.w	r2, #4096	; 0x1000
        disk_pos += to_copy;
    4b1e:	str.w	r2, [r6, #1060]	; 0x424
        if(disk_pos==DISK_BUFFER_SIZE)
    4b22:	bne.n	4b68 <MTPD::SendObject()+0xc0>
          if(storage_->write((const uint8_t *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    4b24:	mov	r1, fp
    4b26:	ldr	r0, [r4, #0]
    4b28:	str	r3, [sp, #4]
    4b2a:	bl	17ae <MTPStorage_SD::write(unsigned char const*, unsigned long)>
    4b2e:	cmp.w	r0, #4096	; 0x1000
    4b32:	ldr	r3, [sp, #4]
    4b34:	bcs.n	4b3e <MTPD::SendObject()+0x96>
    4b36:	movs	r0, #0
    }
    4b38:	add	sp, #12
    4b3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    4b3e:	movs	r2, #0
    4b40:	str.w	r2, [r6, #1060]	; 0x424
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4b44:	subs.w	r2, r8, r5
    4b48:	beq.n	4b68 <MTPD::SendObject()+0xc0>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    4b4a:	add.w	r1, sl, r5
    4b4e:	mov	r0, fp
    4b50:	str	r2, [sp, #4]
    4b52:	add	r1, r9
    4b54:	bl	9f88 <memcpy>
            disk_pos += bytes;
    4b58:	ldr.w	r3, [r6, #1060]	; 0x424
    4b5c:	ldr	r2, [sp, #4]
    4b5e:	add	r3, r2
    4b60:	str.w	r3, [r6, #1060]	; 0x424
            len -= bytes;
    4b64:	sub.w	r3, r7, r8
        if(len>0)  // we have still data to be transfered
    4b68:	cbz	r3, 4b7a <MTPD::SendObject()+0xd2>
        { pull_packet(rx_data_buffer);
    4b6a:	mov	r1, r9
    4b6c:	mov	r0, r4
    4b6e:	str	r3, [sp, #4]
          index=0;
    4b70:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    4b74:	bl	485c <MTPD::pull_packet(unsigned char*)>
          index=0;
    4b78:	ldr	r3, [sp, #4]
    4b7a:	mov	r7, r3
    4b7c:	b.n	4ad8 <MTPD::SendObject()+0x30>
        if(storage_->write((const uint8_t *)disk_buffer, disk_pos)<disk_pos) return false;
    4b7e:	mov	r2, r3
    4b80:	add.w	r1, r4, #1056	; 0x420
    4b84:	bl	17ae <MTPStorage_SD::write(unsigned char const*, unsigned long)>
    4b88:	ldr.w	r3, [r6, #1060]	; 0x424
    4b8c:	cmp	r0, r3
    4b8e:	bcs.n	4ae6 <MTPD::SendObject()+0x3e>
    4b90:	b.n	4b36 <MTPD::SendObject()+0x8e>
    4b92:	nop
    4b94:	.word	0x2002cea0

00004b98 <MTPD::loop()>:
    { if(!usb_mtp_available()) return;
    4b98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b9c:	sub	sp, #60	; 0x3c
    4b9e:	mov	r4, r0
    4ba0:	bl	bfb0 <usb_mtp_available>
    4ba4:	cmp	r0, #0
    4ba6:	beq.w	5042 <MTPD::loop()+0x4aa>
      if(fetch_packet(rx_data_buffer))
    4baa:	add.w	fp, r4, #544	; 0x220

    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    4bae:	movs	r1, #60	; 0x3c
    4bb0:	mov	r0, fp
    4bb2:	bl	bf1c <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    4bb6:	cmp	r0, #0
    4bb8:	beq.w	5042 <MTPD::loop()+0x4aa>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4bbc:	ldr.w	r3, [r4, #552]	; 0x228
    4bc0:	ldr	r1, [pc, #808]	; (4eec <MTPD::loop()+0x354>)
    4bc2:	str	r3, [sp, #4]
    4bc4:	ldrh.w	r3, [r4, #548]	; 0x224
    4bc8:	ldr	r0, [pc, #804]	; (4ef0 <MTPD::loop()+0x358>)
    4bca:	str	r3, [sp, #0]
    4bcc:	ldr.w	r3, [r4, #544]	; 0x220
    4bd0:	ldrh.w	r2, [r4, #550]	; 0x226
    4bd4:	bl	c4c4 <Print::printf(char const*, ...)>
    4bd8:	ldr.w	r3, [r4, #544]	; 0x220
    4bdc:	cmp	r3, #12
    4bde:	bls.n	4bec <MTPD::loop()+0x54>
    4be0:	ldr.w	r2, [r4, #556]	; 0x22c
    4be4:	ldr	r1, [pc, #780]	; (4ef4 <MTPD::loop()+0x35c>)
    4be6:	ldr	r0, [pc, #776]	; (4ef0 <MTPD::loop()+0x358>)
    4be8:	bl	c4c4 <Print::printf(char const*, ...)>
    4bec:	ldr.w	r3, [r4, #544]	; 0x220
    4bf0:	cmp	r3, #16
    4bf2:	bls.n	4c00 <MTPD::loop()+0x68>
    4bf4:	ldr.w	r2, [r4, #560]	; 0x230
    4bf8:	ldr	r1, [pc, #760]	; (4ef4 <MTPD::loop()+0x35c>)
    4bfa:	ldr	r0, [pc, #756]	; (4ef0 <MTPD::loop()+0x358>)
    4bfc:	bl	c4c4 <Print::printf(char const*, ...)>
    4c00:	ldr.w	r3, [r4, #544]	; 0x220
    4c04:	cmp	r3, #20
    4c06:	bls.n	4c14 <MTPD::loop()+0x7c>
    4c08:	ldr.w	r2, [r4, #564]	; 0x234
    4c0c:	ldr	r1, [pc, #740]	; (4ef4 <MTPD::loop()+0x35c>)
    4c0e:	ldr	r0, [pc, #736]	; (4ef0 <MTPD::loop()+0x358>)
    4c10:	bl	c4c4 <Print::printf(char const*, ...)>
    4c14:	ldr	r1, [pc, #736]	; (4ef8 <MTPD::loop()+0x360>)
        TID=id;
    4c16:	add.w	r5, r4, #4096	; 0x1000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4c1a:	ldr	r0, [pc, #724]	; (4ef0 <MTPD::loop()+0x358>)
        if(typ==2) return_code=0x2005; // we should only get cmds
    4c1c:	movw	r7, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4c20:	bl	c4c4 <Print::printf(char const*, ...)>
        int p1 = CONTAINER->params[0];
    4c24:	ldr.w	r3, [r4, #556]	; 0x22c
        int id = CONTAINER->transaction_id;
    4c28:	ldr.w	r1, [r4, #552]	; 0x228
        int typ= CONTAINER->type;
    4c2c:	ldrh.w	r0, [r4, #548]	; 0x224
        int p1 = CONTAINER->params[0];
    4c30:	mov	r6, r3
        int op = CONTAINER->op;
    4c32:	ldrh.w	r2, [r4, #550]	; 0x226
        int len= CONTAINER->len;
    4c36:	ldr.w	r9, [r4, #544]	; 0x220
        int p1 = CONTAINER->params[0];
    4c3a:	str	r3, [sp, #12]
        int id = CONTAINER->transaction_id;
    4c3c:	str	r1, [sp, #16]
        int p3 = CONTAINER->params[2];
    4c3e:	ldrd	r8, r3, [r4, #560]	; 0x230
        TID=id;
    4c42:	str.w	r1, [r5, #1072]	; 0x430
        if(typ==2) return_code=0x2005; // we should only get cmds
    4c46:	movw	r1, #8197	; 0x2005
    4c4a:	cmp	r0, #2
    4c4c:	it	eq
    4c4e:	moveq	r7, r1
        switch (op)
    4c50:	movw	r0, #4123	; 0x101b
    4c54:	cmp	r2, r0
    4c56:	bhi.n	4ce0 <MTPD::loop()+0x148>
    4c58:	cmp.w	r2, #4096	; 0x1000
    4c5c:	bhi.n	4c64 <MTPD::loop()+0xcc>
    4c5e:	movw	r7, #8197	; 0x2005
    4c62:	b.n	4d62 <MTPD::loop()+0x1ca>
    4c64:	sub.w	r2, r2, #4096	; 0x1000
    4c68:	subs	r2, #1
    4c6a:	cmp	r2, #26
    4c6c:	bhi.n	4c5e <MTPD::loop()+0xc6>
    4c6e:	add	r1, pc, #4	; (adr r1, 4c74 <MTPD::loop()+0xdc>)
    4c70:	ldr.w	pc, [r1, r2, lsl #2]
    4c74:	.word	0x00004d03
    4c78:	.word	0x00004d5b
    4c7c:	.word	0x0000503d
    4c80:	.word	0x00004d97
    4c84:	.word	0x00004ddf
    4c88:	.word	0x00004e2d
    4c8c:	.word	0x00004e43
    4c90:	.word	0x00004e9d
    4c94:	.word	0x00004efd
    4c98:	.word	0x00004c5f
    4c9c:	.word	0x00004f4b
    4ca0:	.word	0x00004f67
    4ca4:	.word	0x00004f7b
    4ca8:	.word	0x00004c5f
    4cac:	.word	0x00004c5f
    4cb0:	.word	0x00004c5f
    4cb4:	.word	0x00004c5f
    4cb8:	.word	0x00004c5f
    4cbc:	.word	0x00004c5f
    4cc0:	.word	0x00004f91
    4cc4:	.word	0x00004fdf
    4cc8:	.word	0x00004c5f
    4ccc:	.word	0x00004c5f
    4cd0:	.word	0x00004c5f
    4cd4:	.word	0x0000502d
    4cd8:	.word	0x00005049
    4cdc:	.word	0x00005073
    4ce0:	add.w	r3, r2, #26496	; 0x6780
    4ce4:	adds	r3, #127	; 0x7f
    4ce6:	uxth	r3, r3
    4ce8:	cmp	r3, #3
    4cea:	bhi.n	4c5e <MTPD::loop()+0xc6>
    4cec:	sub.w	r2, r2, #38912	; 0x9800
    4cf0:	subs	r2, #2
    4cf2:	cmp	r2, #2
    4cf4:	bhi.w	50ca <MTPD::loop()+0x532>
    4cf8:	tbh	[pc, r2, lsl #1]
    4cfc:	.word	0x0237020e
    4d00:	.short	0x0260
            TRANSMIT(WriteDescriptor());
    4d02:	movs	r6, #0
    4d04:	movs	r3, #1
    4d06:	mov	r0, r4
    4d08:	strb.w	r3, [r5, #1064]	; 0x428
    4d0c:	str.w	r6, [r5, #1068]	; 0x42c
    4d10:	bl	4088 <MTPD::WriteDescriptor()>
    4d14:	ldr.w	r3, [r5, #1068]	; 0x42c
    4d18:	mov	r0, r4
    4d1a:	movs	r2, #12
    4d1c:	adds	r3, #12
    4d1e:	add	r1, sp, #24
    4d20:	str	r3, [sp, #24]
    4d22:	movs	r3, #2
    4d24:	strh.w	r3, [sp, #28]
    4d28:	ldrh.w	r3, [r4, #550]	; 0x226
    4d2c:	strh.w	r3, [sp, #30]
    4d30:	ldr.w	r3, [r4, #552]	; 0x228
    4d34:	str.w	r6, [r5, #1068]	; 0x42c
    4d38:	strb.w	r6, [r5, #1064]	; 0x428
    4d3c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4d3e:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    4d42:	mov	r0, r4
    4d44:	bl	4088 <MTPD::WriteDescriptor()>
              TRANSMIT(getObjectPropValue(p1,p2));
    4d48:	ldr	r1, [sp, #24]
    4d4a:	ubfx	r1, r1, #0, #9
    4d4e:	cbz	r1, 4d62 <MTPD::loop()+0x1ca>
    4d50:	add.w	r0, r4, #32
    4d54:	bl	3eac <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    4d58:	b.n	4d62 <MTPD::loop()+0x1ca>
            openSession(p1);
    4d5a:	mov	r1, r6
    4d5c:	mov	r0, r4
    4d5e:	bl	3f84 <MTPD::openSession(unsigned long)>
            CONTAINER->type=3;
    4d62:	movs	r3, #3
            CONTAINER->len=len;
    4d64:	str.w	r9, [r4, #544]	; 0x220
            CONTAINER->op=return_code;
    4d68:	strh.w	r7, [r4, #550]	; 0x226
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4d6c:	adds	r4, #32
            CONTAINER->type=3;
    4d6e:	strh.w	r3, [r4, #516]	; 0x204
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4d72:	mov	r1, fp
            CONTAINER->transaction_id=id;
    4d74:	ldr	r3, [sp, #16]
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4d76:	mov	r2, r9
            CONTAINER->transaction_id=id;
    4d78:	str.w	r3, [r4, #520]	; 0x208
            CONTAINER->params[0]=p1;
    4d7c:	ldr	r3, [sp, #12]
    4d7e:	str.w	r3, [r4, #524]	; 0x20c
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4d82:	mov	r0, r4
    4d84:	bl	9f88 <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4d88:	mov	r1, r9
    4d8a:	mov	r0, r4
    }
    4d8c:	add	sp, #60	; 0x3c
    4d8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4d92:	b.w	3eac <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    4d96:	movs	r6, #0
    4d98:	movs	r3, #1
    4d9a:	mov	r0, r4
    4d9c:	strb.w	r3, [r5, #1064]	; 0x428
    4da0:	str.w	r6, [r5, #1068]	; 0x42c
    4da4:	bl	41c4 <MTPD::WriteStorageIDs()>
    4da8:	ldr.w	r3, [r5, #1068]	; 0x42c
    4dac:	mov	r0, r4
    4dae:	movs	r2, #12
    4db0:	adds	r3, #12
    4db2:	add	r1, sp, #24
    4db4:	str	r3, [sp, #24]
    4db6:	movs	r3, #2
    4db8:	strh.w	r3, [sp, #28]
    4dbc:	ldrh.w	r3, [r4, #550]	; 0x226
    4dc0:	strh.w	r3, [sp, #30]
    4dc4:	ldr.w	r3, [r4, #552]	; 0x228
    4dc8:	str.w	r6, [r5, #1068]	; 0x42c
    4dcc:	strb.w	r6, [r5, #1064]	; 0x428
    4dd0:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4dd2:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    4dd6:	mov	r0, r4
    4dd8:	bl	41c4 <MTPD::WriteStorageIDs()>
    4ddc:	b.n	4d48 <MTPD::loop()+0x1b0>
            TRANSMIT(GetStorageInfo(p1));
    4dde:	mov.w	r8, #0
    4de2:	movs	r3, #1
    4de4:	mov	r1, r6
    4de6:	mov	r0, r4
    4de8:	strb.w	r3, [r5, #1064]	; 0x428
    4dec:	str.w	r8, [r5, #1068]	; 0x42c
    4df0:	bl	442c <MTPD::GetStorageInfo(unsigned long)>
    4df4:	ldr.w	r3, [r5, #1068]	; 0x42c
    4df8:	add	r1, sp, #24
    4dfa:	mov	r0, r4
    4dfc:	adds	r3, #12
    4dfe:	movs	r2, #12
    4e00:	str	r3, [sp, #24]
    4e02:	movs	r3, #2
    4e04:	strh.w	r3, [sp, #28]
    4e08:	ldrh.w	r3, [r4, #550]	; 0x226
    4e0c:	strh.w	r3, [sp, #30]
    4e10:	ldr.w	r3, [r4, #552]	; 0x228
    4e14:	str.w	r8, [r5, #1068]	; 0x42c
    4e18:	strb.w	r8, [r5, #1064]	; 0x428
    4e1c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4e1e:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    4e22:	mov	r1, r6
    4e24:	mov	r0, r4
    4e26:	bl	442c <MTPD::GetStorageInfo(unsigned long)>
    4e2a:	b.n	4d48 <MTPD::loop()+0x1b0>
            if (p2) 
    4e2c:	cmp.w	r8, #0
    4e30:	bne.w	51ca <MTPD::loop()+0x632>
                p1 = GetNumObjects(p1, p3);
    4e34:	mov	r2, r3
    4e36:	mov	r1, r6
    4e38:	mov	r0, r4
    4e3a:	bl	3f3c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    4e3e:	str	r0, [sp, #12]
    4e40:	b.n	4d62 <MTPD::loop()+0x1ca>
            if (p2) 
    4e42:	cmp.w	r8, #0
    4e46:	bne.w	51ca <MTPD::loop()+0x632>
              TRANSMIT(GetObjectHandles(p1, p3));
    4e4a:	movs	r2, #1
    4e4c:	mov	r1, r6
    4e4e:	mov	r0, r4
    4e50:	str.w	r8, [r5, #1068]	; 0x42c
    4e54:	strb.w	r2, [r5, #1064]	; 0x428
    4e58:	mov	r2, r3
    4e5a:	str	r3, [sp, #20]
    4e5c:	bl	41e6 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4e60:	ldr.w	r2, [r5, #1068]	; 0x42c
    4e64:	add	r1, sp, #24
    4e66:	mov	r0, r4
    4e68:	adds	r2, #12
    4e6a:	str	r2, [sp, #24]
    4e6c:	movs	r2, #2
    4e6e:	strh.w	r2, [sp, #28]
    4e72:	ldrh.w	r2, [r4, #550]	; 0x226
    4e76:	strh.w	r2, [sp, #30]
    4e7a:	ldr.w	r2, [r4, #552]	; 0x228
    4e7e:	str.w	r8, [r5, #1068]	; 0x42c
    4e82:	str	r2, [sp, #32]
    4e84:	movs	r2, #12
    4e86:	strb.w	r8, [r5, #1064]	; 0x428
    { if (write_get_length_) 
    4e8a:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    4e8e:	ldr	r3, [sp, #20]
    4e90:	mov	r1, r6
    4e92:	mov	r0, r4
    4e94:	mov	r2, r3
    4e96:	bl	41e6 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4e9a:	b.n	4d48 <MTPD::loop()+0x1b0>
            TRANSMIT(GetObjectInfo(p1));
    4e9c:	mov.w	r8, #0
    4ea0:	movs	r3, #1
    4ea2:	mov	r1, r6
    4ea4:	mov	r0, r4
    4ea6:	strb.w	r3, [r5, #1064]	; 0x428
    4eaa:	str.w	r8, [r5, #1068]	; 0x42c
    4eae:	bl	4234 <MTPD::GetObjectInfo(unsigned long)>
    4eb2:	ldr.w	r3, [r5, #1068]	; 0x42c
    4eb6:	add	r1, sp, #24
    4eb8:	mov	r0, r4
    4eba:	adds	r3, #12
    4ebc:	movs	r2, #12
    4ebe:	str	r3, [sp, #24]
    4ec0:	movs	r3, #2
    4ec2:	strh.w	r3, [sp, #28]
    4ec6:	ldrh.w	r3, [r4, #550]	; 0x226
    4eca:	strh.w	r3, [sp, #30]
    4ece:	ldr.w	r3, [r4, #552]	; 0x228
    4ed2:	str.w	r8, [r5, #1068]	; 0x42c
    4ed6:	strb.w	r8, [r5, #1064]	; 0x428
    4eda:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4edc:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    4ee0:	mov	r1, r6
    4ee2:	mov	r0, r4
    4ee4:	bl	4234 <MTPD::GetObjectInfo(unsigned long)>
    4ee8:	b.n	4d48 <MTPD::loop()+0x1b0>
    4eea:	nop
    4eec:	.word	0x2000107b
    4ef0:	.word	0x20001c28
    4ef4:	.word	0x20001089
    4ef8:	.word	0x20000cfe
            TRANSMIT(GetObject(p1));
    4efc:	mov.w	r8, #0
    4f00:	movs	r3, #1
    4f02:	mov	r1, r6
    4f04:	mov	r0, r4
    4f06:	strb.w	r3, [r5, #1064]	; 0x428
    4f0a:	str.w	r8, [r5, #1068]	; 0x42c
    4f0e:	bl	466e <MTPD::GetObject(unsigned long)>
    4f12:	ldr.w	r3, [r5, #1068]	; 0x42c
    4f16:	add	r1, sp, #24
    4f18:	mov	r0, r4
    4f1a:	adds	r3, #12
    4f1c:	movs	r2, #12
    4f1e:	str	r3, [sp, #24]
    4f20:	movs	r3, #2
    4f22:	strh.w	r3, [sp, #28]
    4f26:	ldrh.w	r3, [r4, #550]	; 0x226
    4f2a:	strh.w	r3, [sp, #30]
    4f2e:	ldr.w	r3, [r4, #552]	; 0x228
    4f32:	str.w	r8, [r5, #1068]	; 0x42c
    4f36:	strb.w	r8, [r5, #1064]	; 0x428
    4f3a:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4f3c:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    4f40:	mov	r1, r6
    4f42:	mov	r0, r4
    4f44:	bl	466e <MTPD::GetObject(unsigned long)>
    4f48:	b.n	4d48 <MTPD::loop()+0x1b0>
              if (p2) {
    4f4a:	cmp.w	r8, #0
    4f4e:	bne.w	51ca <MTPD::loop()+0x632>
                if (!storage_->DeleteObject(p1)) {
    4f52:	mov	r1, r6
    4f54:	ldr	r0, [r4, #0]
    4f56:	bl	1674 <MTPStorage_SD::DeleteObject(unsigned long)>
                  return_code = 0x2012; // partial deletion
    4f5a:	movw	r3, #8210	; 0x2012
    4f5e:	cmp	r0, #0
    4f60:	it	eq
    4f62:	moveq	r7, r3
    4f64:	b.n	4d62 <MTPD::loop()+0x1ca>
              p3 = SendObjectInfo(p1, // storage
    4f66:	mov	r2, r8
    4f68:	mov	r1, r6
    4f6a:	mov	r0, r4
              len = 12 + 3 * 4;
    4f6c:	mov.w	r9, #24
              p3 = SendObjectInfo(p1, // storage
    4f70:	bl	4998 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    4f74:	strd	r8, r0, [r4, #560]	; 0x230
              break;
    4f78:	b.n	4d62 <MTPD::loop()+0x1ca>
              if(!SendObject()) return_code = 0x2005;
    4f7a:	mov	r0, r4
    4f7c:	mov.w	r9, #12
    4f80:	bl	4aa8 <MTPD::SendObject()>
    4f84:	movw	r3, #8197	; 0x2005
    4f88:	cmp	r0, #0
    4f8a:	it	eq
    4f8c:	moveq	r7, r3
    4f8e:	b.n	4d62 <MTPD::loop()+0x1ca>
              TRANSMIT(GetDevicePropDesc(p1));
    4f90:	mov.w	r8, #0
    4f94:	movs	r3, #1
    4f96:	mov	r1, r6
    4f98:	mov	r0, r4
    4f9a:	strb.w	r3, [r5, #1064]	; 0x428
    4f9e:	str.w	r8, [r5, #1068]	; 0x42c
    4fa2:	bl	4030 <MTPD::GetDevicePropDesc(unsigned long)>
    4fa6:	ldr.w	r3, [r5, #1068]	; 0x42c
    4faa:	add	r1, sp, #24
    4fac:	mov	r0, r4
    4fae:	adds	r3, #12
    4fb0:	movs	r2, #12
    4fb2:	str	r3, [sp, #24]
    4fb4:	movs	r3, #2
    4fb6:	strh.w	r3, [sp, #28]
    4fba:	ldrh.w	r3, [r4, #550]	; 0x226
    4fbe:	strh.w	r3, [sp, #30]
    4fc2:	ldr.w	r3, [r4, #552]	; 0x228
    4fc6:	str.w	r8, [r5, #1068]	; 0x42c
    4fca:	strb.w	r8, [r5, #1064]	; 0x428
    4fce:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4fd0:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    4fd4:	mov	r1, r6
    4fd6:	mov	r0, r4
    4fd8:	bl	4030 <MTPD::GetDevicePropDesc(unsigned long)>
    4fdc:	b.n	4d48 <MTPD::loop()+0x1b0>
              TRANSMIT(GetDevicePropValue(p1));
    4fde:	mov.w	r8, #0
    4fe2:	movs	r3, #1
    4fe4:	mov	r1, r6
    4fe6:	mov	r0, r4
    4fe8:	strb.w	r3, [r5, #1064]	; 0x428
    4fec:	str.w	r8, [r5, #1068]	; 0x42c
    4ff0:	bl	401c <MTPD::GetDevicePropValue(unsigned long)>
    4ff4:	ldr.w	r3, [r5, #1068]	; 0x42c
    4ff8:	add	r1, sp, #24
    4ffa:	mov	r0, r4
    4ffc:	adds	r3, #12
    4ffe:	movs	r2, #12
    5000:	str	r3, [sp, #24]
    5002:	movs	r3, #2
    5004:	strh.w	r3, [sp, #28]
    5008:	ldrh.w	r3, [r4, #550]	; 0x226
    500c:	strh.w	r3, [sp, #30]
    5010:	ldr.w	r3, [r4, #552]	; 0x228
    5014:	str.w	r8, [r5, #1068]	; 0x42c
    5018:	strb.w	r8, [r5, #1064]	; 0x428
    501c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    501e:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    5022:	mov	r1, r6
    5024:	mov	r0, r4
    5026:	bl	401c <MTPD::GetDevicePropValue(unsigned long)>
    502a:	b.n	4d48 <MTPD::loop()+0x1b0>
              return_code = moveObject(p1,p2,p3);
    502c:	mov	r2, r8
    502e:	mov	r1, r6
    5030:	mov	r0, r4
              len = 12;
    5032:	mov.w	r9, #12
              return_code = moveObject(p1,p2,p3);
    5036:	bl	3f5e <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    503a:	mov	r7, r0
        if(return_code)
    503c:	cmp	r7, #0
    503e:	bne.w	4d62 <MTPD::loop()+0x1ca>
    }
    5042:	add	sp, #60	; 0x3c
    5044:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    5048:	mov	r2, r8
    504a:	mov	r1, r6
    504c:	mov	r0, r4
              if(!return_code) 
    504e:	movw	r7, #8197	; 0x2005
              return_code = copyObject(p1,p2,p3);
    5052:	bl	3f7a <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    5056:	cmp	r0, #0
    5058:	itete	eq
    505a:	moveq	r3, r6
    505c:	movne	r3, r0
    505e:	moveq.w	r9, #12
    5062:	movne.w	r9, #16
    5066:	str	r3, [sp, #12]
    5068:	movw	r3, #8193	; 0x2001
    506c:	it	ne
    506e:	movne	r7, r3
    5070:	b.n	4d62 <MTPD::loop()+0x1ca>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    5072:	mov.w	sl, #0
    5076:	movs	r2, #1
    5078:	mov	r1, r6
    507a:	mov	r0, r4
    507c:	strb.w	r2, [r5, #1064]	; 0x428
    5080:	mov	r2, r8
    5082:	str.w	sl, [r5, #1068]	; 0x42c
    5086:	str	r3, [sp, #20]
    5088:	bl	4744 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    508c:	ldr.w	r2, [r5, #1068]	; 0x42c
    5090:	add	r1, sp, #24
    5092:	adds	r2, #12
    5094:	str	r2, [sp, #24]
    5096:	movs	r2, #2
    5098:	strh.w	r2, [sp, #28]
    509c:	ldrh.w	r2, [r4, #550]	; 0x226
    50a0:	strh.w	r2, [sp, #30]
    50a4:	ldr.w	r2, [r4, #552]	; 0x228
    50a8:	str.w	sl, [r5, #1068]	; 0x42c
    50ac:	strb.w	sl, [r5, #1064]	; 0x428
    50b0:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    50b4:	mov	r0, r4
    50b6:	movs	r2, #32
    50b8:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    50bc:	ldr	r3, [sp, #20]
    50be:	mov	r2, r8
    50c0:	mov	r1, r6
    50c2:	mov	r0, r4
    50c4:	bl	4744 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    50c8:	b.n	4d48 <MTPD::loop()+0x1b0>
              TRANSMIT(getObjectPropsSupported(p1));
    50ca:	mov.w	r8, #0
    50ce:	movs	r3, #1
    50d0:	mov	r1, r6
    50d2:	mov	r0, r4
    50d4:	strb.w	r3, [r5, #1064]	; 0x428
    50d8:	str.w	r8, [r5, #1068]	; 0x42c
    50dc:	bl	4320 <MTPD::getObjectPropsSupported(unsigned long)>
    50e0:	ldr.w	r3, [r5, #1068]	; 0x42c
    50e4:	add	r1, sp, #24
    50e6:	mov	r0, r4
    50e8:	adds	r3, #12
    50ea:	movs	r2, #12
    50ec:	str	r3, [sp, #24]
    50ee:	movs	r3, #2
    50f0:	strh.w	r3, [sp, #28]
    50f4:	ldrh.w	r3, [r4, #550]	; 0x226
    50f8:	strh.w	r3, [sp, #30]
    50fc:	ldr.w	r3, [r4, #552]	; 0x228
    5100:	str.w	r8, [r5, #1068]	; 0x42c
    5104:	strb.w	r8, [r5, #1064]	; 0x428
    5108:	str	r3, [sp, #32]
    { if (write_get_length_) 
    510a:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    510e:	mov	r1, r6
    5110:	mov	r0, r4
    5112:	bl	4320 <MTPD::getObjectPropsSupported(unsigned long)>
    5116:	b.n	4d48 <MTPD::loop()+0x1b0>
              TRANSMIT(getObjectPropDesc(p1,p2));
    5118:	mov.w	sl, #0
    511c:	movs	r3, #1
    511e:	mov	r2, r8
    5120:	mov	r1, r6
    5122:	mov	r0, r4
    5124:	strb.w	r3, [r5, #1064]	; 0x428
    5128:	str.w	sl, [r5, #1068]	; 0x42c
    512c:	bl	452c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    5130:	ldr.w	r3, [r5, #1068]	; 0x42c
    5134:	add	r1, sp, #24
    5136:	mov	r0, r4
    5138:	adds	r3, #12
    513a:	movs	r2, #12
    513c:	str	r3, [sp, #24]
    513e:	movs	r3, #2
    5140:	strh.w	r3, [sp, #28]
    5144:	ldrh.w	r3, [r4, #550]	; 0x226
    5148:	strh.w	r3, [sp, #30]
    514c:	ldr.w	r3, [r4, #552]	; 0x228
    5150:	str.w	sl, [r5, #1068]	; 0x42c
    5154:	strb.w	sl, [r5, #1064]	; 0x428
    5158:	str	r3, [sp, #32]
    { if (write_get_length_) 
    515a:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    515e:	mov	r2, r8
    5160:	mov	r1, r6
    5162:	mov	r0, r4
    5164:	bl	452c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    5168:	b.n	4d48 <MTPD::loop()+0x1b0>
              TRANSMIT(getObjectPropValue(p1,p2));
    516a:	mov.w	sl, #0
    516e:	movs	r3, #1
    5170:	mov	r2, r8
    5172:	mov	r1, r6
    5174:	mov	r0, r4
    5176:	strb.w	r3, [r5, #1064]	; 0x428
    517a:	str.w	sl, [r5, #1068]	; 0x42c
    517e:	bl	4350 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    5182:	ldr.w	r3, [r5, #1068]	; 0x42c
    5186:	add	r1, sp, #24
    5188:	mov	r0, r4
    518a:	adds	r3, #12
    518c:	movs	r2, #12
    518e:	str	r3, [sp, #24]
    5190:	movs	r3, #2
    5192:	strh.w	r3, [sp, #28]
    5196:	ldrh.w	r3, [r4, #550]	; 0x226
    519a:	strh.w	r3, [sp, #30]
    519e:	ldr.w	r3, [r4, #552]	; 0x228
    51a2:	str.w	sl, [r5, #1068]	; 0x42c
    51a6:	strb.w	sl, [r5, #1064]	; 0x428
    51aa:	str	r3, [sp, #32]
    { if (write_get_length_) 
    51ac:	bl	3ec4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    51b0:	mov	r2, r8
    51b2:	mov	r1, r6
    51b4:	mov	r0, r4
    51b6:	bl	4350 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    51ba:	b.n	4d48 <MTPD::loop()+0x1b0>
              return_code = setObjectPropValue(p1,p2);
    51bc:	mov	r2, r8
    51be:	mov	r1, r6
    51c0:	mov	r0, r4
    51c2:	bl	4a74 <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    51c6:	mov	r7, r0
              break;
    51c8:	b.n	503c <MTPD::loop()+0x4a4>
                return_code = 0x2014; // spec by format unsupported
    51ca:	movw	r7, #8212	; 0x2014
    51ce:	b.n	4d62 <MTPD::loop()+0x1ca>

000051d0 <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    51d0:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    51d2:	cbz	r3, 520a <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    51d4:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    51d6:	movw	r5, #513	; 0x201
    51da:	str	r5, [r4, #16]
    51dc:	mov	r4, r3

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    51de:	cbz	r1, 520c <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    51e0:	ldrb.w	r5, [r1], #1
    51e4:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    51e6:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    51e8:	str	r5, [r6, #100]	; 0x64
    51ea:	ldr	r5, [r0, #0]
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    51ec:	ldr	r6, [r5, #112]	; 0x70
    51ee:	lsls	r6, r6, #30
    51f0:	bmi.n	51fc <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    51f2:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    51f4:	cbz	r2, 51fa <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    51f6:	strb.w	r5, [r2], #1
				count_read--;
    51fa:	subs	r4, #1
    51fc:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    51fe:	ldr	r5, [r5, #20]
    5200:	lsls	r5, r5, #31
    5202:	bpl.n	51ea <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    5204:	cmp	r3, #0
    5206:	bne.n	51de <SPIClass::transfer(void const*, void*, unsigned int)+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    5208:	cbnz	r4, 5212 <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    520a:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    520c:	ldrb.w	r5, [r0, #60]	; 0x3c
    5210:	b.n	51e4 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    5212:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    5214:	ldr	r1, [r3, #112]	; 0x70
    5216:	lsls	r1, r1, #30
    5218:	bmi.n	5208 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    521a:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    521c:	cbz	r2, 5222 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    521e:	strb.w	r3, [r2], #1
			count_read--;
    5222:	subs	r4, #1
    5224:	b.n	5208 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

00005226 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    5226:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    5228:	ldr	r2, [r3, #0]
    522a:	ldr	r1, [r2, #0]
    522c:	ldr	r2, [r3, #4]
    522e:	tst	r1, r2
void SPIClass::end() {
    5230:	push	{r4, lr}
    5232:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    5234:	beq.n	526c <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    5236:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    5238:	movs	r1, #0
    523a:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    523c:	movs	r1, #5
    523e:	ldrb	r2, [r0, #16]
    5240:	add	r3, r2
    5242:	ldrb	r0, [r3, #16]
    5244:	bl	bc60 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    5248:	ldrb	r2, [r4, #17]
    524a:	ldr	r3, [r4, #4]
    524c:	movs	r1, #5
    524e:	add	r3, r2
    5250:	ldrb.w	r0, [r3, #36]	; 0x24
    5254:	bl	bc60 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    5258:	ldr	r3, [r4, #4]
    525a:	ldrb	r2, [r4, #18]
    525c:	movs	r1, #5
    525e:	add	r3, r2
	}
}
    5260:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    5264:	ldrb.w	r0, [r3, #56]	; 0x38
    5268:	b.w	bc60 <pinMode>
}
    526c:	pop	{r4, pc}

0000526e <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    526e:	mov	r3, r0
    size_t n = end - str;
    5270:	subs	r0, r2, r1
    if (cp < 0X80) {
    5272:	cmp	r3, #127	; 0x7f
    5274:	bhi.n	5282 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    5276:	cmp	r0, #0
    5278:	beq.n	52fe <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    527a:	mov	r0, r1
    527c:	strb.w	r3, [r0], #1
    5280:	bx	lr
    } else if (cp < 0X800) {
    5282:	cmp.w	r3, #2048	; 0x800
    5286:	bcs.n	52a4 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    5288:	cmp	r0, #1
    528a:	bls.n	52fc <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    528c:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    528e:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5292:	mov	r0, r1
    5294:	orn	r2, r2, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5298:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    529c:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    52a0:	strb	r3, [r1, #1]
    52a2:	bx	lr
    } else if (cp < 0X10000) {
    52a4:	cmp.w	r3, #65536	; 0x10000
    52a8:	bcs.n	52ce <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    52aa:	cmp	r0, #2
    52ac:	bls.n	52fc <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    52ae:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    52b0:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    52b2:	orn	r2, r2, #31
    52b6:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    52b8:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    52bc:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    52c0:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    52c4:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    52c8:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    52ca:	strb	r3, [r1, #2]
    52cc:	bx	lr
       if (n < 4) goto fail;
    52ce:	cmp	r0, #3
    52d0:	bls.n	52fc <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    52d2:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    52d4:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    52d6:	orn	r2, r2, #15
    52da:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    52dc:	ubfx	r2, r3, #12, #6
    52e0:	orn	r2, r2, #127	; 0x7f
    52e4:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    52e6:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    52ea:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    52ee:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    52f2:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    52f6:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    52f8:	strb	r3, [r1, #3]
    52fa:	bx	lr
    return nullptr;
    52fc:	movs	r0, #0
  }
    52fe:	bx	lr

00005300 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    5300:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    5302:	push	{r4, r5, lr}
    5304:	mov	r5, r0
    if (str >= end) {
    5306:	bcs.n	537e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    uint8_t ch = str[0];
    5308:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    530a:	ldrsb.w	r0, [r0]
    530e:	cmp	r0, #0
    5310:	blt.n	5318 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      return str + 1;
    5312:	adds	r0, r5, #1
      *rtn = ch;
    5314:	str	r3, [r2, #0]
  }
    5316:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    5318:	and.w	r0, r3, #224	; 0xe0
    531c:	cmp	r0, #192	; 0xc0
    531e:	bne.n	535e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    5320:	and.w	r3, r3, #31
      n = 2;
    5324:	movs	r4, #2
    if ((str + n) > end) {
    5326:	adds	r0, r5, r4
    5328:	cmp	r0, r1
    532a:	bhi.n	537e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    532c:	adds	r5, #1
      ch = str[i];
    532e:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    5332:	and.w	r4, r1, #192	; 0xc0
    5336:	cmp	r4, #128	; 0x80
    5338:	bne.n	537e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    533a:	and.w	r1, r1, #63	; 0x3f
    for (size_t i = 1; i < n; i++) {
    533e:	cmp	r5, r0
      cp |= ch & 0X3F;
    5340:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    5344:	bne.n	532e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    5346:	sub.w	r4, r3, #128	; 0x80
    534a:	ldr	r1, [pc, #56]	; (5384 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    534c:	cmp	r4, r1
    534e:	bhi.n	537e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    5350:	sub.w	r1, r3, #55296	; 0xd800
    5354:	cmp.w	r1, #2048	; 0x800
    5358:	bcc.n	537e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    535a:	str	r3, [r2, #0]
    return str + n;
    535c:	b.n	5316 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    535e:	and.w	r0, r3, #240	; 0xf0
    5362:	cmp	r0, #224	; 0xe0
    5364:	bne.n	536e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    5366:	and.w	r3, r3, #15
      n = 3;
    536a:	movs	r4, #3
    536c:	b.n	5326 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    536e:	and.w	r0, r3, #248	; 0xf8
    5372:	cmp	r0, #240	; 0xf0
    5374:	bne.n	537e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    5376:	and.w	r3, r3, #7
      n = 4;
    537a:	movs	r4, #4
    537c:	b.n	5326 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    537e:	movs	r0, #0
    5380:	b.n	5316 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    5382:	nop
    5384:	.word	0x0010ff7f

00005388 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    5388:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    538a:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    538c:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    538e:	lsls	r2, r3, #31
    5390:	bpl.n	53d2 <FsCache::sync()+0x4a>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    5392:	ldr	r0, [r0, #4]
    5394:	add.w	r2, r4, #16
    5398:	ldr	r1, [r4, #12]
    539a:	ldr	r3, [r0, #0]
    539c:	str	r2, [sp, #4]
    539e:	ldr	r3, [r3, #36]	; 0x24
    53a0:	blx	r3
    53a2:	ldr	r2, [sp, #4]
    53a4:	mov	r5, r0
    53a6:	cbnz	r0, 53b0 <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    53a8:	movs	r5, #0
}
    53aa:	mov	r0, r5
    53ac:	add	sp, #8
    53ae:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    53b0:	ldrb	r3, [r4, #0]
    53b2:	lsls	r3, r3, #30
    53b4:	bmi.n	53c0 <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    53b6:	ldrb	r3, [r4, #0]
    53b8:	bic.w	r3, r3, #1
    53bc:	strb	r3, [r4, #0]
    53be:	b.n	53aa <FsCache::sync()+0x22>
      uint32_t sector = m_sector + m_mirrorOffset;
    53c0:	adds	r0, r4, #4
    53c2:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    53c4:	ldr	r3, [r0, #0]
    53c6:	add	r1, r6
    53c8:	ldr	r3, [r3, #36]	; 0x24
    53ca:	blx	r3
    53cc:	cmp	r0, #0
    53ce:	bne.n	53b6 <FsCache::sync()+0x2e>
    53d0:	b.n	53a8 <FsCache::sync()+0x20>
  return true;
    53d2:	movs	r5, #1
    53d4:	b.n	53aa <FsCache::sync()+0x22>

000053d6 <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    53d6:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    53d8:	push	{r4, r5, r6, lr}
    53da:	mov	r4, r0
    53dc:	mov	r6, r1
    53de:	mov	r5, r2
  if (!m_blockDev) {
    53e0:	cbnz	r3, 53e6 <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    53e2:	movs	r0, #0
}
    53e4:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    53e6:	ldr	r3, [r0, #12]
    53e8:	cmp	r3, r1
    53ea:	beq.n	53fe <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    53ec:	bl	5388 <FsCache::sync()>
    53f0:	cmp	r0, #0
    53f2:	beq.n	53e2 <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    53f4:	lsls	r3, r5, #29
    53f6:	bpl.n	540e <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    53f8:	movs	r3, #0
    m_sector = sector;
    53fa:	str	r6, [r4, #12]
    m_status = 0;
    53fc:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    53fe:	ldrb	r3, [r4, #0]
    5400:	and.w	r5, r5, #3
    5404:	mov	r0, r4
    5406:	orrs	r3, r5
    5408:	strb.w	r3, [r0], #16
  return m_buffer;
    540c:	b.n	53e4 <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    540e:	ldr	r0, [r4, #4]
    5410:	add.w	r2, r4, #16
    5414:	mov	r1, r6
    5416:	ldr	r3, [r0, #0]
    5418:	ldr	r3, [r3, #16]
    541a:	blx	r3
    541c:	cmp	r0, #0
    541e:	bne.n	53f8 <FsCache::prepare(unsigned long, unsigned char)+0x22>
    5420:	b.n	53e2 <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

00005424 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    5424:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    5426:	push	{r4, r5, lr}
  if (chr < 127) {
    5428:	bhi.n	547a <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    542a:	sub.w	r3, r0, #97	; 0x61
    542e:	cmp	r3, #25
    5430:	ite	hi
    5432:	movhi	r3, #0
    5434:	movls	r3, #1
    5436:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    543a:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    543c:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    543e:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    5442:	ldrh.w	r5, [r1, r2, lsl #2]
    5446:	cmp	r5, r0
    mid = left + (right - left)/2;
    5448:	ite	hi
    544a:	movhi	r4, r2
    544c:	movls	r3, r2
  while (right - left > 1) {
    544e:	subs	r2, r4, r3
    5450:	cmp	r2, #1
    5452:	bhi.n	543e <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    5454:	uxth	r2, r3
    5456:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    545a:	cmp	r0, r3
    545c:	bcc.n	54ba <toUpcase(unsigned short)+0x96>
    545e:	add.w	r1, r1, r2, lsl #2
    5462:	subs	r3, r0, r3
    5464:	ldrb	r2, [r1, #3]
    5466:	cmp	r3, r2
    5468:	bge.n	54ba <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    546a:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    546e:	cmp	r2, #1
    5470:	bne.n	5482 <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    5472:	and.w	r3, r3, #1
    5476:	subs	r3, r0, r3
    5478:	b.n	543a <toUpcase(unsigned short)+0x16>
  size_t right = size;
    547a:	movs	r4, #53	; 0x35
  size_t left = 0;
    547c:	movs	r3, #0
    547e:	ldr	r1, [pc, #68]	; (54c4 <toUpcase(unsigned short)+0xa0>)
    5480:	b.n	544e <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    5482:	cbz	r2, 548c <toUpcase(unsigned short)+0x68>
    5484:	uxth	r2, r2
    5486:	add	r2, r0
    5488:	uxth	r0, r2
    548a:	b.n	543c <toUpcase(unsigned short)+0x18>
    548c:	movw	r2, #58272	; 0xe3a0
    5490:	b.n	5486 <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    5492:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    5496:	ldrh.w	r5, [r1, r2, lsl #2]
    549a:	cmp	r5, r0
    mid = left + (right - left)/2;
    549c:	ite	hi
    549e:	movhi	r4, r2
    54a0:	movls	r3, r2
  while (right - left > 1) {
    54a2:	subs	r2, r4, r3
    54a4:	cmp	r2, #1
    54a6:	bhi.n	5492 <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    54a8:	uxth	r3, r3
    54aa:	ldrh.w	r2, [r1, r3, lsl #2]
    54ae:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    54b0:	itt	eq
    54b2:	addeq.w	r1, r1, r3, lsl #2
    54b6:	ldrheq	r0, [r1, #2]
    54b8:	b.n	543c <toUpcase(unsigned short)+0x18>
    54ba:	movs	r4, #75	; 0x4b
    54bc:	movs	r3, #0
    54be:	ldr	r1, [pc, #8]	; (54c8 <toUpcase(unsigned short)+0xa4>)
    54c0:	b.n	54a2 <toUpcase(unsigned short)+0x7e>
    54c2:	nop
    54c4:	.word	0x20000b14
    54c8:	.word	0x200009ac

000054cc <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    54cc:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    54ce:	push	{r0, r1, r4, lr}
    54d0:	mov	r4, r0
  if (ls) {
    54d2:	cbz	r3, 54de <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    54d4:	movs	r2, #0
    54d6:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    54d8:	mov	r0, r3
    54da:	add	sp, #8
    54dc:	pop	{r4, pc}
  } else if (next >= end) {
    54de:	ldrd	r0, r1, [r0, #4]
    54e2:	cmp	r0, r1
    54e4:	bcs.n	54d8 <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    54e6:	add	r2, sp, #4
    54e8:	bl	5300 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    54ec:	cbnz	r0, 54f4 <FsName::get16()+0x28>
  return 0XFFFF;
    54ee:	movw	r3, #65535	; 0xffff
    54f2:	b.n	54d8 <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    54f4:	ldr	r2, [sp, #4]
    next = ptr;
    54f6:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    54f8:	cmp.w	r2, #65536	; 0x10000
      rtn = cp;
    54fc:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    54fe:	bcc.n	54d8 <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    5500:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5504:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    5506:	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    550a:	sub.w	r2, r2, #10304	; 0x2840
      ls = FsUtf::lowSurrogate(cp);
    550e:	strh	r3, [r4, #12]
    5510:	uxth	r3, r2
    5512:	b.n	54d8 <FsName::get16()+0xc>

00005514 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    5514:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5518:	mov	r6, r2
    551a:	mov	r5, r1
    551c:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    5520:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5522:	ldrh.w	r4, [r5, #2]!
    5526:	cbnz	r3, 553a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    5528:	ldrd	r2, r3, [r6, #4]
    552c:	cmp	r2, r3
    552e:	bne.n	553a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
      return u == 0;
    5530:	clz	r0, r4
    5534:	lsrs	r0, r0, #5
}
    5536:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    553a:	mov	r0, r6
    553c:	bl	54cc <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    5540:	bl	5424 <toUpcase(unsigned short)>
    5544:	mov	r7, r0
    5546:	mov	r0, r4
    5548:	bl	5424 <toUpcase(unsigned short)>
    554c:	cmp	r7, r0
    554e:	bne.n	5558 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    5550:	cmp	r5, r8
    5552:	bne.n	5520 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    5554:	movs	r0, #1
    5556:	b.n	5536 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    5558:	movs	r0, #0
    555a:	b.n	5536 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

0000555c <ExFatFile::getName8(char*, unsigned int)>:
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    555c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    5560:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    5564:	mov	sl, r0
    5566:	mov	r8, r1
  if (!isOpen()) {
    5568:	cmp	r3, #0
    556a:	beq.n	55fe <ExFatFile::getName8(char*, unsigned int)+0xa2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    556c:	subs	r2, #1
  char* str = name;
    556e:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5570:	mov.w	r9, #2
  uint16_t hs = 0;
    5574:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5576:	adds	r7, r1, r2
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5578:	ldrb.w	r3, [sl, #48]	; 0x30
    557c:	cmp	r3, r9
    557e:	bcc.n	55e8 <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    5580:	movs	r2, #0
    5582:	mov	r1, r9
    5584:	mov	r0, sl
    5586:	bl	566e <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    558a:	cbz	r0, 55fe <ExFatFile::getName8(char*, unsigned int)+0xa2>
    558c:	ldrb	r3, [r0, #0]
    558e:	cmp	r3, #193	; 0xc1
    5590:	bne.n	55fe <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5592:	mov	r6, r0
    5594:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5598:	ldr	r3, [pc, #108]	; (5608 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    559a:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    559e:	cbz	r5, 55d8 <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    55a0:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    55a4:	uxth	r2, r2
    55a6:	cmp.w	r2, #1024	; 0x400
    55aa:	bcs.n	55fe <ExFatFile::getName8(char*, unsigned int)+0xa2>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    55ac:	and.w	r5, r3, r5, lsl #10
    55b0:	ubfx	r0, r0, #0, #10
    55b4:	orrs	r0, r5
    55b6:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    55ba:	mov	r1, r4
    55bc:	mov	r2, r7
    55be:	bl	526e <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    55c2:	mov	r4, r0
    55c4:	cbz	r0, 55fe <ExFatFile::getName8(char*, unsigned int)+0xa2>
    55c6:	movs	r5, #0
    55c8:	ldr	r3, [pc, #60]	; (5608 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    for (uint8_t in = 0; in < 15; in++) {
    55ca:	cmp	fp, r6
    55cc:	bne.n	559a <ExFatFile::getName8(char*, unsigned int)+0x3e>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    55ce:	add.w	r9, r9, #1
    55d2:	uxtb.w	r9, r9
    55d6:	b.n	5578 <ExFatFile::getName8(char*, unsigned int)+0x1c>
    return 0XD800 <= c && c <= 0XDFFF;
    55d8:	add.w	r2, r0, #10240	; 0x2800
    55dc:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    55de:	cmp.w	r2, #2048	; 0x800
    55e2:	bcc.n	55f4 <ExFatFile::getName8(char*, unsigned int)+0x98>
        if (c == 0) {
    55e4:	cmp	r0, #0
    55e6:	bne.n	55ba <ExFatFile::getName8(char*, unsigned int)+0x5e>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    55e8:	movs	r3, #0
  return str - name;
    55ea:	sub.w	r0, r4, r8
  *str = '\0';
    55ee:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    55f0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    55f4:	cmp.w	r2, #1024	; 0x400
    55f8:	bcs.n	55fe <ExFatFile::getName8(char*, unsigned int)+0xa2>
    55fa:	mov	r5, r0
    55fc:	b.n	55ca <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    55fe:	movs	r0, #0
    5600:	strb.w	r0, [r8]
  return 0;
    5604:	b.n	55f0 <ExFatFile::getName8(char*, unsigned int)+0x94>
    5606:	nop
    5608:	.word	0x000ffc00

0000560c <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    560c:	movs	r0, #0
    next = begin;
    560e:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    5610:	push	{r4, r5, r6, lr}
    5612:	mov	r4, r1
  uint16_t hash = 0;
    5614:	mov	r6, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    5616:	movw	r5, #65535	; 0xffff
    561a:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    561c:	strh	r0, [r1, #12]
    return !ls && next == end;
    561e:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    5620:	str	r0, [r4, #16]
    5622:	cbnz	r3, 5660 <ExFatFile::hashName(ExName_t*)+0x54>
    5624:	ldrd	r2, r3, [r4, #4]
    5628:	cmp	r2, r3
    562a:	bne.n	5660 <ExFatFile::hashName(ExName_t*)+0x54>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    562c:	subs	r0, #1
  fname->nameHash = hash;
    562e:	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    5630:	cmp	r0, #254	; 0xfe
    5632:	ite	hi
    5634:	movhi	r0, #0
    5636:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    5638:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    563a:	bl	5424 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    563e:	lsls	r3, r6, #15
    5640:	orr.w	r3, r3, r6, lsr #1
    5644:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5648:	lsrs	r0, r0, #8
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    564a:	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    564c:	ubfx	r3, r3, #1, #15
    5650:	orr.w	r3, r3, r2, lsl #15
    5654:	uxtah	r3, r0, r3
    fname->nameLength++;
    5658:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    565a:	uxth	r6, r3
    fname->nameLength++;
    565c:	adds	r0, #1
    565e:	b.n	561e <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    5660:	mov	r0, r4
    5662:	bl	54cc <FsName::get16()>
    if (u == 0XFFFF) {
    5666:	cmp	r0, r5
    5668:	bne.n	563a <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    566a:	movs	r0, #0
    566c:	b.n	5638 <ExFatFile::hashName(ExName_t*)+0x2c>

0000566e <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    566e:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    5670:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5674:	sub	sp, #20
    5676:	mov	r4, r0
    5678:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    567a:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    567c:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    567e:	ldmia.w	r3, {r0, r1, r2}
    5682:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    5686:	lsls	r2, r7, #5
    5688:	mov	r1, r5
    568a:	ldr	r0, [r4, #32]
    568c:	bl	6062 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5690:	cmp	r0, #1
    5692:	bne.n	56a2 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    5694:	mov	r2, r6
    5696:	mov	r1, r5
    5698:	ldr	r0, [r4, #32]
    569a:	bl	5fc8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    569e:	add	sp, #20
    56a0:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    56a2:	movs	r0, #0
    56a4:	b.n	569e <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

000056a6 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    56a6:	push	{r4, lr}
    56a8:	mov	r4, r0
  bool rtn = sync();
    56aa:	bl	6584 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    56ae:	movs	r3, #0
    56b0:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    56b4:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    56b8:	pop	{r4, pc}

000056ba <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    56ba:	push	{r3, r4, r5, lr}
    56bc:	mov	r5, r1
    56be:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    56c0:	add.w	r1, r0, #36	; 0x24
    56c4:	movs	r2, #0
    56c6:	ldr	r0, [r0, #32]
    56c8:	bl	5fc8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    56cc:	cbz	r0, 56d8 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>
    56ce:	ldrh	r3, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    56d0:	strh	r3, [r5, #0]
    56d2:	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
  return true;
    56d4:	movs	r0, #1
  *ptime = getLe16(df->createTime);
    56d6:	strh	r3, [r4, #0]

 fail:
  return false;
}
    56d8:	pop	{r3, r4, r5, pc}

000056da <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    56da:	push	{r3, r4, r5, lr}
    56dc:	mov	r5, r1
    56de:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    56e0:	add.w	r1, r0, #36	; 0x24
    56e4:	movs	r2, #0
    56e6:	ldr	r0, [r0, #32]
    56e8:	bl	5fc8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    56ec:	cbz	r0, 56f8 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>
    56ee:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    56f0:	strh	r3, [r5, #0]
    56f2:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
  return true;
    56f4:	movs	r0, #1
  *ptime = getLe16(df->modifyTime);
    56f6:	strh	r3, [r4, #0]

 fail:
  return false;
}
    56f8:	pop	{r3, r4, r5, pc}

000056fa <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    56fa:	push	{r3, r4, r5, lr}
    56fc:	mov	r5, r1
  if (isOpen()) {
    56fe:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5702:	mov	r4, r0
  if (isOpen()) {
    5704:	cbnz	r1, 571c <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    5706:	movs	r2, #56	; 0x38
    5708:	bl	9f44 <memset>
  m_attributes = FILE_ATTR_ROOT;
    570c:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    570e:	movs	r0, #1
  m_vol = vol;
    5710:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    5712:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    5716:	strb.w	r0, [r4, #51]	; 0x33
  return true;

 fail:
  return false;
}
    571a:	pop	{r3, r4, r5, pc}
  return false;
    571c:	movs	r0, #0
    571e:	b.n	571a <ExFatFile::openRoot(ExFatVolume*)+0x20>

00005720 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    5720:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    5722:	mov	r5, r1
    5724:	ldrb.w	r4, [r1], #1
    5728:	cmp	r4, #32
    572a:	beq.n	5722 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    572c:	ldr	r7, [pc, #108]	; (579c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    572e:	str	r5, [r2, #0]
  fname->end = path;
    5730:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    5732:	mov	r6, r5
    5734:	ldrb.w	r4, [r6], #1
    5738:	cbz	r4, 573e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    573a:	cmp	r4, #47	; 0x2f
    573c:	bne.n	5756 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    573e:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    5740:	ldrb.w	r1, [r5], #1
    5744:	cmp	r1, #32
    5746:	beq.n	573e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5748:	cmp	r1, #47	; 0x2f
    574a:	beq.n	573e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    574c:	str	r4, [r3, #0]
  return hashName(fname);
    574e:	mov	r1, r2

 fail:
  return false;
}
    5750:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    5752:	b.w	560c <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    5756:	cmp	r4, #60	; 0x3c
    5758:	bhi.n	5780 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    575a:	cmp	r4, #33	; 0x21
    575c:	bhi.n	576c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    575e:	subs	r1, r4, #1
    5760:	cmp	r1, #30
    5762:	bls.n	577a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    if (c != '.' && c != ' ') {
    5764:	cmp	r4, #32
    5766:	bne.n	578c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
                            ExName_t* fname, const char** ptr) {
    5768:	mov	r5, r6
    576a:	b.n	5732 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    576c:	sub.w	r1, r4, #34	; 0x22
    5770:	uxtb	r1, r1
    5772:	lsr.w	r1, r7, r1
    5776:	lsls	r1, r1, #31
    5778:	bpl.n	5796 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
}
    577a:	movs	r0, #0
    577c:	pop	{r4, r5, r6, r7}
    577e:	bx	lr
    5780:	cmp	r4, #92	; 0x5c
    5782:	beq.n	577a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    5784:	bhi.n	5790 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    5786:	subs	r4, #62	; 0x3e
    5788:	cmp	r4, #1
    578a:	bls.n	577a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
      fname->end = path;
    578c:	str	r6, [r2, #8]
    578e:	b.n	5768 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5790:	cmp	r4, #124	; 0x7c
    5792:	beq.n	577a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    5794:	b.n	578c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    if (c != '.' && c != ' ') {
    5796:	cmp	r4, #46	; 0x2e
    5798:	b.n	5766 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    579a:	nop
    579c:	.word	0x05002101

000057a0 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    57a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57a4:	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    57a8:	ldrb.w	r3, [r0, #51]	; 0x33
    57ac:	sub	sp, #12
    57ae:	mov	r4, r0
    57b0:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    57b2:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    57b4:	mov	r6, r2
  if (!isReadable()) {
    57b6:	bpl.n	5880 <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    57b8:	lsls	r0, r3, #25
    57ba:	bmi.n	57c4 <ExFatFile::read(void*, unsigned int)+0x24>
    57bc:	ldrb.w	r3, [r4, #49]	; 0x31
    57c0:	lsls	r1, r3, #28
    57c2:	bpl.n	57dc <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    57c4:	ldrd	r2, r3, [r4]
    57c8:	ldrd	r1, r0, [r4, #16]
    57cc:	adds	r5, r6, r2
    57ce:	adc.w	r3, r3, #0
    57d2:	cmp	r1, r5
    57d4:	sbcs.w	r3, r0, r3
    57d8:	bcs.n	57dc <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    57da:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    57dc:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    57e0:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    57e2:	vmov	s16, r3
    57e6:	b.n	58cc <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    57e8:	ldr	r0, [r4, #32]
    57ea:	ldrd	r3, r2, [r4]
    57ee:	ldr.w	r7, [r0, #1080]	; 0x438
    57f2:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    57f4:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    57f8:	cbnz	r7, 580e <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    57fa:	orrs	r3, r2
    57fc:	bne.n	5858 <ExFatFile::read(void*, unsigned int)+0xb8>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    57fe:	ldrb.w	r3, [r4, #49]	; 0x31
    5802:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5804:	ite	mi
    5806:	ldrmi.w	r3, [r0, #1076]	; 0x434
    580a:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    580c:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    580e:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5812:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5814:	ldr	r2, [r4, #24]
    5816:	ldrb.w	r1, [fp, #1093]	; 0x445
    581a:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    581c:	ldr.w	r2, [fp, #1068]	; 0x42c
    5820:	lsls	r5, r1
    5822:	add.w	r5, r5, r7, lsr #9
    5826:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    5828:	cmp.w	sl, #0
    582c:	bne.n	5892 <ExFatFile::read(void*, unsigned int)+0xf2>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    582e:	cmp.w	r8, #512	; 0x200
    5832:	bcc.n	5892 <ExFatFile::read(void*, unsigned int)+0xf2>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5834:	ldr.w	r2, [fp, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5838:	cmp	r5, r2
    583a:	beq.n	5892 <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    583c:	cmp.w	r8, #1024	; 0x400
    5840:	bcs.n	58e0 <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    5842:	ldr.w	r0, [fp, #532]	; 0x214
    5846:	mov	r2, r9
    5848:	mov	r1, r5
    584a:	ldr	r3, [r0, #0]
    584c:	ldr	r3, [r3, #16]
    584e:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5850:	cbz	r0, 5880 <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    5852:	mov.w	r7, #512	; 0x200
    5856:	b.n	58b8 <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    5858:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    585c:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    585e:	lsls	r3, r3, #25
    5860:	bpl.n	5868 <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    5862:	adds	r1, #1
    5864:	str	r1, [r4, #24]
    5866:	b.n	580e <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5868:	vmov	r2, s16
    586c:	bl	5ffc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    5870:	cmp	r0, #0
    5872:	blt.n	5880 <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    5874:	bne.n	580e <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    5876:	ldrb.w	r3, [r4, #49]	; 0x31
    587a:	tst.w	r3, #80	; 0x50
    587e:	bne.n	58d2 <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    5880:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    5884:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    5888:	orr.w	r3, r3, #2
    588c:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    5890:	b.n	58d6 <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    5892:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    5896:	movs	r2, #0
    5898:	mov	r1, r5
    589a:	add.w	r0, fp, #528	; 0x210
    589e:	cmp	r7, r8
    58a0:	it	cs
    58a2:	movcs	r7, r8
    58a4:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    58a8:	cmp	r0, #0
    58aa:	beq.n	5880 <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    58ac:	add.w	r1, r0, sl
    58b0:	mov	r2, r7
    58b2:	mov	r0, r9
    58b4:	bl	9f88 <memcpy>
    dst += n;
    58b8:	add	r9, r7
    toRead -= n;
    58ba:	sub.w	r8, r8, r7
    m_curPosition += n;
    58be:	ldrd	r3, r2, [r4]
    58c2:	adds	r3, r3, r7
    58c4:	adc.w	r2, r2, #0
    58c8:	strd	r3, r2, [r4]
  while (toRead) {
    58cc:	cmp.w	r8, #0
    58d0:	bne.n	57e8 <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    58d2:	sub.w	r0, r6, r8
}
    58d6:	add	sp, #12
    58d8:	vpop	{d8}
    58dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    58e0:	movs	r3, #1
    58e2:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    58e4:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    58e8:	subs	r3, r3, r0
    58ea:	cmp	r3, r1
    58ec:	it	cs
    58ee:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    58f0:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    58f2:	mov.w	r7, r3, lsl #9
    58f6:	bls.n	590e <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    58f8:	ldr.w	r0, [fp, #532]	; 0x214
    58fc:	mov	r1, r5
    58fe:	ldr	r2, [r0, #0]
    5900:	ldr.w	fp, [r2, #20]
    5904:	mov	r2, r9
    5906:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5908:	cmp	r0, #0
    590a:	bne.n	58b8 <ExFatFile::read(void*, unsigned int)+0x118>
    590c:	b.n	5880 <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    590e:	adds	r1, r5, r3
    5910:	cmp	r2, r1
    5912:	bcs.n	58f8 <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    5914:	add.w	r0, fp, #528	; 0x210
    5918:	str	r3, [sp, #4]
    591a:	bl	5388 <FsCache::sync()>
    591e:	ldr	r3, [sp, #4]
    5920:	cmp	r0, #0
    5922:	bne.n	58f8 <ExFatFile::read(void*, unsigned int)+0x158>
    5924:	b.n	5880 <ExFatFile::read(void*, unsigned int)+0xe0>

00005926 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5926:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5928:	movs	r2, #1
    592a:	add.w	r1, sp, #7
    592e:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    5930:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    5932:	ldrd	r6, r7, [r0]
    5936:	bl	57a0 <ExFatFile::read(void*, unsigned int)>
    593a:	cmp	r0, #1
  m_curCluster = curCluster;
    593c:	str	r5, [r4, #24]
    593e:	ite	eq
    5940:	ldrbeq.w	r0, [sp, #7]
    5944:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    5948:	strd	r6, r7, [r4]
}
    594c:	add	sp, #12
    594e:	pop	{r4, r5, r6, r7, pc}

00005950 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    5950:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    5954:	ldrb.w	ip, [r0, #49]	; 0x31
    5958:	mov	r4, r0
    595a:	mov	r6, r2
    595c:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    595e:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    5962:	cmp.w	ip, #0
    5966:	beq.n	5a20 <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5968:	ldrd	r0, r3, [r0]
    596c:	cmp	r3, r7
    596e:	it	eq
    5970:	cmpeq	r0, r2
    5972:	beq.n	5982 <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    5974:	orrs.w	r2, r6, r7
    5978:	bne.n	5986 <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    597a:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    597c:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    597e:	strd	r6, r7, [r4]
    return true;
    5982:	movs	r0, #1
    5984:	b.n	5a26 <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    5986:	tst.w	ip, #8
    598a:	beq.n	5996 <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    598c:	ldrd	r1, r2, [r4, #16]
    5990:	cmp	r1, r6
    5992:	sbcs	r2, r7
    5994:	bcc.n	5a20 <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    5996:	ldr.w	lr, [r4, #32]
    599a:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    599c:	ldrb.w	r1, [lr, #1093]	; 0x445
    59a0:	adc.w	sl, r7, #4294967295
    59a4:	adds	r1, #9
    59a6:	uxtb	r1, r1
    59a8:	rsb	r9, r1, #32
    59ac:	sub.w	r2, r1, #32
    59b0:	lsrs	r5, r1
    59b2:	lsl.w	r9, sl, r9
    59b6:	lsr.w	r2, sl, r2
    59ba:	sub.w	sl, r1, #32
    59be:	orr.w	r5, r5, r9
    59c2:	rsb	r9, r1, #32
    59c6:	orrs	r5, r2
  if (isContiguous()) {
    59c8:	ldrb.w	r2, [r4, #51]	; 0x33
    59cc:	tst.w	r2, #64	; 0x40
    59d0:	beq.n	59d8 <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    59d2:	ldr	r3, [r4, #28]
    59d4:	add	r3, r5
    59d6:	b.n	597c <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    59d8:	adds.w	fp, r0, #4294967295
    59dc:	adc.w	r2, r3, #4294967295
    59e0:	lsr.w	r1, fp, r1
    59e4:	lsl.w	r9, r2, r9
    59e8:	lsr.w	r2, r2, sl
    59ec:	orr.w	r1, r1, r9
    59f0:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    59f2:	cmp	r5, r1
    59f4:	bcc.n	59fa <ExFatFile::seekSet(unsigned long long)+0xaa>
    59f6:	orrs	r3, r0
    59f8:	bne.n	5a2a <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    59fa:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    59fe:	ite	ne
    5a00:	ldrne.w	r3, [lr, #1076]	; 0x434
    5a04:	ldreq	r3, [r4, #28]
    5a06:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5a08:	add.w	r9, r4, #24
  while (nNew--) {
    5a0c:	cmp	r5, #0
    5a0e:	beq.n	597e <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5a10:	mov	r2, r9
    5a12:	ldr	r1, [r4, #24]
    5a14:	ldr	r0, [r4, #32]
    5a16:	subs	r5, #1
    5a18:	bl	5ffc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5a1c:	cmp	r0, #0
    5a1e:	bgt.n	5a0c <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    5a20:	movs	r0, #0
  m_curCluster = tmp;
    5a22:	str.w	r8, [r4, #24]
}
    5a26:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    5a2a:	subs	r5, r5, r1
    5a2c:	b.n	5a08 <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

00005a30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5a30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a34:	mov	sl, r3
    5a36:	ldrb.w	r3, [r0, #49]	; 0x31
    5a3a:	sub	sp, #52	; 0x34
    5a3c:	mov	r4, r0
    5a3e:	mov	r6, r1
    5a40:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    5a42:	cmp	r3, #0
    5a44:	bne.n	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5a46:	ldrb.w	r3, [r1, #49]	; 0x31
    5a4a:	tst.w	r3, #80	; 0x50
    5a4e:	beq.n	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    5a50:	and.w	r9, sl, #3
    5a54:	cmp.w	r9, #3
    5a58:	beq.n	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    5a5a:	add.w	r9, r9, #1
    5a5e:	and.w	r3, sl, #8
    5a62:	orr.w	r9, r9, r3
  if (fname) {
    5a66:	cmp	r2, #0
    5a68:	beq.n	5adc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    5a6a:	ldr	r7, [r2, #16]
    5a6c:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5a6e:	movs	r2, #0
    5a70:	mov	r0, r1
    5a72:	adds	r7, #14
    5a74:	udiv	r7, r7, r3
    5a78:	adds	r7, #2
    5a7a:	movs	r3, #0
    5a7c:	uxtb	r7, r7
    5a7e:	bl	5950 <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    5a82:	mov.w	fp, #0
    5a86:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    5a88:	movs	r2, #32
    5a8a:	add	r1, sp, #16
    5a8c:	mov	r0, r6
    5a8e:	bl	57a0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5a92:	cmp	r0, #0
    5a94:	beq.w	5c1e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    5a98:	cmp	r0, #32
    5a9a:	bne.n	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    5a9c:	ldrsb.w	r1, [sp, #16]
    5aa0:	ldrb.w	r2, [sp, #16]
    5aa4:	cmp	r1, #0
    5aa6:	blt.n	5ae6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    5aa8:	cmp.w	fp, #0
    5aac:	bne.n	5aba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5aae:	ldr	r1, [r6, #0]
    5ab0:	sub.w	r3, r1, #32
    5ab4:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5ab6:	ldr	r3, [r6, #24]
    5ab8:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    5aba:	cmp	fp, r7
        freeCount++;
    5abc:	itt	cc
    5abe:	addcc.w	r3, fp, #1
    5ac2:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    5ac6:	cbnz	r2, 5ae0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    5ac8:	cmp	r5, #0
    5aca:	bne.w	5c1e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    5ace:	mov.w	r8, #0
    5ad2:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    5ad6:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    5ada:	b.n	5bb2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    5adc:	movs	r7, #3
    5ade:	b.n	5a82 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    5ae0:	movs	r0, #0
    5ae2:	mov	r8, r0
    5ae4:	b.n	5a88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    5ae6:	cmp.w	r8, #0
    5aea:	bne.n	5b3c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    5aec:	cmp	fp, r7
    5aee:	it	cc
    5af0:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    5af4:	cmp	r2, #133	; 0x85
    5af6:	bne.n	5ae0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    5af8:	movs	r2, #56	; 0x38
    5afa:	mov	r1, r8
    5afc:	mov	r0, r4
    5afe:	bl	9f44 <memset>
      m_setCount = dirFile->setCount;
    5b02:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5b06:	ldrb.w	r1, [sp, #20]
      inSet = true;
    5b0a:	movs	r0, #1
      m_setCount = dirFile->setCount;
    5b0c:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5b10:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5b14:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    5b16:	it	pl
    5b18:	orrpl.w	r2, r2, #8
    5b1c:	strb.w	r2, [r4, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    5b20:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    5b22:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    5b24:	ldr	r2, [r6, #24]
    5b26:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5b28:	ldr	r2, [r6, #0]
    5b2a:	subs	r2, #32
    5b2c:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5b2e:	ldrb.w	r2, [r6, #51]	; 0x33
    5b32:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    5b36:	strb.w	r2, [r4, #44]	; 0x2c
    5b3a:	b.n	5ae2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    5b3c:	cmp	r2, #192	; 0xc0
    5b3e:	bne.n	5be2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5b40:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    5b44:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5b48:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    5b4a:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5b4e:	it	mi
    5b50:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    5b54:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5b58:	it	mi
    5b5a:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    5b5e:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    5b60:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    5b64:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    5b66:	strd	r0, r1, [r4, #8]
      if (!fname) {
    5b6a:	cbnz	r5, 5bba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    5b6c:	tst.w	sl, #2048	; 0x800
    5b70:	bne.n	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    5b72:	tst.w	sl, #17408	; 0x4400
    5b76:	bne.n	5b80 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    5b78:	ldrb.w	r3, [r4, #51]	; 0x33
    5b7c:	lsls	r0, r3, #30
    5b7e:	bpl.n	5b8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    5b80:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    5b84:	lsls	r1, r3, #27
    5b86:	bmi.n	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5b88:	lsls	r2, r3, #31
    5b8a:	bmi.n	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    5b8c:	tst.w	sl, #1024	; 0x400
    5b90:	beq.n	5c0c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    5b92:	ldrb.w	r3, [r4, #51]	; 0x33
    5b96:	lsls	r3, r3, #30
    5b98:	bpl.n	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    5b9a:	movs	r2, #0
    5b9c:	movs	r3, #0
    5b9e:	mov	r0, r4
    5ba0:	bl	5950 <ExFatFile::seekSet(unsigned long long)>
    5ba4:	cmp	r0, #0
    5ba6:	beq.n	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5ba8:	mov	r0, r4
    5baa:	bl	6810 <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5bae:	cmp	r0, #0
    5bb0:	beq.n	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    5bb2:	mov	r0, r8
    5bb4:	add	sp, #52	; 0x34
    5bb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    5bba:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    5bbc:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    5bc0:	ldr	r1, [r5, #16]
    next = begin;
    5bc2:	str	r2, [r5, #4]
    5bc4:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    5bc8:	strh	r3, [r5, #12]
    5bca:	cmp	r1, r2
    5bcc:	bne.n	5ae0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    5bce:	ldrh	r0, [r5, #20]
    5bd0:	ldrh.w	r2, [sp, #20]
    5bd4:	sub.w	ip, r0, r2
    5bd8:	rsbs	r0, ip, #0
    5bdc:	adc.w	r0, r0, ip
    5be0:	b.n	5ae2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    5be2:	cmp	r2, #193	; 0xc1
    5be4:	bne.w	5ae0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    5be8:	mov	r2, r5
    5bea:	add	r1, sp, #16
    5bec:	mov	r0, r4
    5bee:	bl	5514 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    5bf2:	cmp	r0, #0
    5bf4:	beq.w	5ae2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    5bf8:	ldrh	r2, [r5, #12]
    5bfa:	cmp	r2, #0
    5bfc:	bne.w	5ae2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5c00:	ldrd	r1, r2, [r5, #4]
    5c04:	cmp	r1, r2
    5c06:	bne.w	5ae2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5c0a:	b.n	5b6c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5c0c:	tst.w	sl, #16384	; 0x4000
    5c10:	beq.n	5bb2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    5c12:	mov	r0, r4
    5c14:	ldrd	r2, r3, [r4, #16]
    5c18:	bl	5950 <ExFatFile::seekSet(unsigned long long)>
    5c1c:	b.n	5bae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5c1e:	tst.w	sl, #512	; 0x200
    5c22:	beq.w	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5c26:	tst.w	r9, #2
    5c2a:	beq.w	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5c2e:	cmp	r5, #0
    5c30:	beq.w	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    5c34:	cmp	fp, r7
    5c36:	bcc.n	5c86 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    5c38:	movs	r2, #56	; 0x38
    5c3a:	movs	r1, #0
    5c3c:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5c3e:	ldrb.w	r8, [r6, #51]	; 0x33
    5c42:	bl	9f44 <memset>
  ExFatVolume* volume() const {return m_vol;}
    5c46:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    5c48:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    5c4c:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    5c50:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    5c52:	movs	r3, #8
  m_dirPos = freePos;
    5c54:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    5c58:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    5c5c:	strb.w	r3, [r4, #49]	; 0x31
    ls = 0;  // lowSurrogate
    5c60:	mov.w	r8, #0
  m_dirPos = freePos;
    5c64:	ldr	r3, [sp, #0]
    5c66:	str	r3, [r4, #36]	; 0x24
    5c68:	ldr	r3, [sp, #4]
    5c6a:	str	r3, [r4, #40]	; 0x28
    next = begin;
    5c6c:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    5c6e:	strh.w	r8, [r5, #12]
    next = begin;
    5c72:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5c74:	uxtb.w	fp, r8
    5c78:	cmp	r7, fp
    5c7a:	bhi.n	5cca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    5c7c:	mov	r0, r4
    5c7e:	bl	6584 <ExFatFile::sync()>
    5c82:	mov	r8, r0
    5c84:	b.n	5bb2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    5c86:	movs	r2, #32
    5c88:	add	r1, sp, #16
    5c8a:	mov	r0, r6
    5c8c:	bl	57a0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5c90:	cbnz	r0, 5ca8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    5c92:	mov	r0, r6
      curCluster = dir->m_curCluster;
    5c94:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    5c98:	bl	65c6 <ExFatFile::addDirCluster()>
    5c9c:	cmp	r0, #0
    5c9e:	beq.w	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    5ca2:	str.w	r8, [r6, #24]
      continue;
    5ca6:	b.n	5c34 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    5ca8:	cmp	r0, #32
    5caa:	bne.w	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    5cae:	cmp.w	fp, #0
    5cb2:	bne.n	5cc0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5cb4:	ldr	r2, [r6, #0]
    5cb6:	sub.w	r3, r2, #32
    5cba:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    5cbc:	ldr	r3, [r6, #24]
    5cbe:	str	r3, [sp, #0]
    freeCount++;
    5cc0:	add.w	r3, fp, #1
    5cc4:	uxtb.w	fp, r3
    5cc8:	b.n	5c34 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    5cca:	movs	r2, #1
    5ccc:	mov	r1, fp
    5cce:	mov	r0, r4
    5cd0:	bl	566e <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5cd4:	mov	r6, r0
    5cd6:	cmp	r0, #0
    5cd8:	beq.w	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5cdc:	ldrsb.w	r2, [r0]
    5ce0:	cmp	r2, #0
    5ce2:	blt.w	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    5ce6:	movs	r2, #32
    5ce8:	movs	r1, #0
    5cea:	bl	9f44 <memset>
    if (i == 0) {
    5cee:	cmp.w	fp, #0
    5cf2:	bne.n	5d36 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
      dirFile->type = EXFAT_TYPE_FILE;
    5cf4:	movs	r3, #133	; 0x85
    5cf6:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    5cf8:	ldr	r3, [pc, #128]	; (5d7c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    5cfa:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5cfe:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    5d02:	ldr	r3, [r3, #0]
    5d04:	cbz	r3, 5d2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fa>
        FsDateTime::callback(&date, &time, &ms10);
    5d06:	add.w	r2, sp, #11
    5d0a:	add.w	r1, sp, #14
    5d0e:	add	r0, sp, #12
    5d10:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5d12:	ldrh.w	r3, [sp, #12]
    5d16:	strh	r3, [r6, #10]
    5d18:	ldrh.w	r3, [sp, #14]
    5d1c:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    5d1e:	ldrb.w	r3, [sp, #11]
    5d22:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5d24:	add.w	r8, r8, #1
    5d28:	b.n	5c74 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    5d2a:	movw	r3, #22561	; 0x5821
    5d2e:	strh	r3, [r6, #10]
    5d30:	strh	r3, [r6, #14]
    5d32:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    5d34:	b.n	5d24 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    } else if (i == 1) {
    5d36:	cmp.w	fp, #1
    5d3a:	bne.n	5d56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x326>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5d3c:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    5d40:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    5d42:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    5d46:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5d48:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    5d4c:	ldr	r3, [r5, #16]
    5d4e:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    5d50:	ldrh	r3, [r5, #20]
    5d52:	strh	r3, [r6, #4]
}
    5d54:	b.n	5d24 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      dirName->type = EXFAT_TYPE_NAME;
    5d56:	movs	r3, #193	; 0xc1
    5d58:	add.w	fp, r6, #30
    5d5c:	strb	r3, [r6, #0]
    return !ls && next == end;
    5d5e:	ldrh	r2, [r5, #12]
    5d60:	cbnz	r2, 5d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33a>
    5d62:	ldrd	r1, r2, [r5, #4]
    5d66:	cmp	r1, r2
    5d68:	beq.n	5d24 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
        uint16_t u = fname->get16();
    5d6a:	mov	r0, r5
    5d6c:	bl	54cc <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    5d70:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    5d74:	cmp	fp, r6
    5d76:	bne.n	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
    5d78:	b.n	5d24 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    5d7a:	nop
    5d7c:	.word	0x2002ce50

00005d80 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5d80:	push	{r4, r5, r6, r7, lr}
    5d82:	mov	r7, r3
    5d84:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    5d86:	movs	r3, #0
    5d88:	mov	r5, r0
    5d8a:	mov	r4, r1
    5d8c:	str	r2, [sp, #4]
    5d8e:	str	r3, [sp, #80]	; 0x50
class FsName {
    5d90:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    5d94:	ldrb.w	r3, [r0, #49]	; 0x31
    5d98:	cbz	r3, 5da0 <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    5d9a:	movs	r0, #0
}
    5d9c:	add	sp, #92	; 0x5c
    5d9e:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    5da0:	ldrb.w	r1, [r1, #49]	; 0x31
    5da4:	tst.w	r1, #80	; 0x50
    5da8:	beq.n	5d9a <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    5daa:	ldrb	r1, [r2, #0]
    5dac:	cmp	r1, #47	; 0x2f
    5dae:	bne.n	5dea <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    5db0:	mov	r0, r2
    while (isDirSeparator(*path)) {
    5db2:	ldrb.w	r1, [r2], #1
    5db6:	cmp	r1, #47	; 0x2f
    5db8:	beq.n	5dcc <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    5dba:	cbz	r3, 5dbe <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    5dbc:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5dbe:	ldr	r4, [r4, #32]
    if (*path == 0) {
    5dc0:	cbnz	r1, 5dd0 <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    5dc2:	mov	r1, r4
    5dc4:	mov	r0, r5
    5dc6:	bl	56fa <ExFatFile::openRoot(ExFatVolume*)>
    5dca:	b.n	5d9c <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    5dcc:	movs	r3, #1
    5dce:	b.n	5db0 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    5dd0:	movs	r2, #56	; 0x38
    5dd2:	movs	r1, #0
    5dd4:	add	r0, sp, #32
    5dd6:	bl	9f44 <memset>
  m_attributes = FILE_ATTR_ROOT;
    5dda:	movs	r3, #64	; 0x40
  m_vol = vol;
    5ddc:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    5dde:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    5de0:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    5de4:	movs	r3, #1
    5de6:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    5dea:	add	r3, sp, #4
    5dec:	add	r2, sp, #8
    5dee:	ldr	r1, [sp, #4]
    5df0:	mov	r0, r5
    5df2:	bl	5720 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5df6:	cmp	r0, #0
    5df8:	beq.n	5d9a <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    5dfa:	ldr	r3, [sp, #4]
    5dfc:	ldrb	r3, [r3, #0]
    5dfe:	cbz	r3, 5e38 <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5e00:	movs	r3, #0
    5e02:	add	r2, sp, #8
    5e04:	mov	r1, r4
    5e06:	mov	r0, r5
    5e08:	bl	5a30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5e0c:	cmp	r0, #0
    5e0e:	beq.n	5d9a <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    5e10:	add	r6, sp, #32
    5e12:	mov	r2, r5
    5e14:	add.w	ip, r5, #48	; 0x30
    5e18:	mov	r4, r6
    5e1a:	ldr	r0, [r2, #0]
    5e1c:	adds	r2, #8
    5e1e:	ldr.w	r1, [r2, #-4]
    5e22:	mov	r3, r6
    5e24:	cmp	r2, ip
    5e26:	stmia	r3!, {r0, r1}
    5e28:	mov	r6, r3
    5e2a:	bne.n	5e1a <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    5e2c:	ldr	r0, [r2, #0]
    5e2e:	str	r0, [r3, #0]
    close();
    5e30:	mov	r0, r5
    5e32:	bl	56a6 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    5e36:	b.n	5dea <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    5e38:	mov	r3, r7
    5e3a:	add	r2, sp, #8
    5e3c:	mov	r1, r4
    5e3e:	mov	r0, r5
    5e40:	bl	5a30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5e44:	b.n	5d9c <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

00005e46 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    5e46:	cbz	r1, 5e50 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    5e48:	add.w	r1, r1, #1096	; 0x448
    5e4c:	b.w	5d80 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    5e50:	mov	r0, r1
    5e52:	bx	lr

00005e54 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    5e54:	mov	r3, r2
    5e56:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    5e58:	ldrb.w	r2, [r0, #49]	; 0x31
    5e5c:	cbnz	r2, 5e78 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    5e5e:	ldrb.w	r2, [r1, #49]	; 0x31
    5e62:	tst.w	r2, #80	; 0x50
    5e66:	beq.n	5e78 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    5e68:	ldr	r2, [r1, #0]
    5e6a:	ands.w	r2, r2, #31
    5e6e:	bne.n	5e78 <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    5e70:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    5e74:	b.w	5a30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    5e78:	movs	r0, #0
    5e7a:	ldr.w	r4, [sp], #4
    5e7e:	bx	lr

00005e80 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    5e80:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e84:	mov	r7, r0
    5e86:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5e88:	mov	sl, r1
    5e8a:	cbz	r1, 5ec0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    5e8c:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    5e8e:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    5e92:	movs	r4, #1
    start = 0;
    5e94:	cmp	r3, r5
    5e96:	it	ls
    5e98:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    5e9a:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    5e9e:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    5ea2:	mov	r8, r5
  uint32_t endAlloc = start;
    5ea4:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    5ea6:	lsls	r4, r3
    5ea8:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    5eaa:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    5eae:	movs	r2, #0
    5eb0:	mov	r0, r7
    5eb2:	add.w	r1, r1, r6, lsr #12
    5eb6:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    5eba:	cbnz	r0, 5eee <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    5ebc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5ec0:	ldr.w	r5, [r0, #1056]	; 0x420
    5ec4:	b.n	5e8e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    5ec6:	mov	r8, r6
        if (endAlloc == start) {
    5ec8:	cmp	r5, r6
    5eca:	beq.n	5f24 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    5ecc:	ldr.w	r2, [r7, #1072]	; 0x430
    5ed0:	cmp	r2, r6
    5ed2:	bls.n	5f18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    5ed4:	lsls	r4, r4, #1
    5ed6:	ands.w	r4, r4, #255	; 0xff
    5eda:	bne.n	5ef2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    5edc:	add.w	r3, r9, #1
    5ee0:	movs	r4, #1
    i = 0;
    5ee2:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    5ee6:	cmp.w	r3, #512	; 0x200
    5eea:	bcs.n	5eaa <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    5eec:	mov	r9, r3
        if (!(mask & cache[i])) {
    5eee:	ldrb.w	r3, [r0, r9]
    5ef2:	tst	r3, r4
        endAlloc++;
    5ef4:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    5ef8:	bne.n	5ec6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    5efa:	sub.w	r2, r6, r8
    5efe:	cmp	r2, fp
    5f00:	bne.n	5ec8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    5f02:	cmp.w	sl, #0
    5f06:	bne.n	5f12 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    5f08:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    5f0c:	it	eq
    5f0e:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    5f12:	add.w	r0, r8, #2
    5f16:	b.n	5ebc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    5f18:	mov.w	r8, #0
          i = sectorSize;
    5f1c:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    5f20:	mov	r6, r8
    5f22:	b.n	5edc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    5f24:	movs	r0, #1
    5f26:	b.n	5ebc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

00005f28 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    5f28:	subs	r1, #2
                                  uint32_t count, bool value) {
    5f2a:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5f2e:	mov	r5, r0
    5f30:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    5f32:	ldr.w	r0, [r0, #1072]	; 0x430
    5f36:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    5f38:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    5f3a:	cmp	r3, r0
    5f3c:	bhi.n	5fbe <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    5f3e:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    5f42:	cbz	r7, 5fb4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    5f44:	cmp	r1, r2
    5f46:	bhi.n	5f56 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    5f48:	cmp	r3, r2
    5f4a:	bls.n	5f56 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    5f4c:	cmp	r3, r0
    5f4e:	it	cs
    5f50:	movcs	r3, #0
    5f52:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    5f56:	and.w	r3, r1, #7
    5f5a:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    5f5e:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    5f62:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    5f66:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    5f6a:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    5f6e:	add.w	r8, r3, r1, lsr #12
    5f72:	movs	r2, #1
    5f74:	mov	r1, r8
    5f76:	mov	r0, r5
    5f78:	add	r8, r2
    5f7a:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    5f7e:	cbz	r0, 5fbe <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    5f80:	adds	r3, r0, r4
    5f82:	mov	r1, r9
    5f84:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    5f88:	ldrb	r2, [r3, #0]
    5f8a:	tst	r2, r1
    5f8c:	ite	ne
    5f8e:	movne	r4, #1
    5f90:	moveq	r4, #0
    5f92:	cmp	r4, r7
    5f94:	beq.n	5fbe <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    5f96:	eors	r2, r1
        if (--count == 0) {
    5f98:	subs	r6, #1
        cache[i] ^= mask;
    5f9a:	strb	r2, [r3, #0]
        if (--count == 0) {
    5f9c:	beq.n	5fc4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    5f9e:	lsls	r1, r1, #1
    5fa0:	ands.w	r1, r1, #255	; 0xff
    5fa4:	bne.n	5f88 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    5fa6:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    5fa8:	mov	r4, r1
    5faa:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    5fac:	cmp	r0, r3
      mask = 1;
    5fae:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    5fb0:	bne.n	5f88 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    5fb2:	b.n	5f72 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    5fb4:	cmp	r1, r2
      m_bitmapStart = start;
    5fb6:	it	cc
    5fb8:	strcc.w	r1, [r5, #1056]	; 0x420
    5fbc:	b.n	5f56 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    5fbe:	movs	r0, #0
}
    5fc0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    5fc4:	movs	r0, #1
    5fc6:	b.n	5fc0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

00005fc8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    5fc8:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    5fca:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    5fce:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    5fd0:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    5fd2:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    5fd6:	ldrb.w	r5, [r0, #565]	; 0x235
    5fda:	ands	r1, r3
    5fdc:	ldr	r3, [r4, #0]
    5fde:	subs	r3, #2
    5fe0:	lsls	r3, r5
    5fe2:	add.w	r3, r3, r1, lsr #9
    5fe6:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    5fea:	add	r1, r3
    5fec:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    5ff0:	cbz	r0, 5ffa <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    5ff2:	ldr	r3, [r4, #4]
    5ff4:	ubfx	r3, r3, #0, #9
    5ff8:	add	r0, r3
}
    5ffa:	pop	{r3, r4, r5, pc}

00005ffc <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5ffc:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    5ffe:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6002:	mov	r4, r1
    6004:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    6006:	adds	r3, #1
    6008:	cmp	r3, r1
    600a:	bcs.n	6012 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    600c:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    6010:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6012:	ldr.w	r1, [r0, #1060]	; 0x424
    6016:	movs	r2, #0
    6018:	add.w	r0, r0, #528	; 0x210
    601c:	add.w	r1, r1, r4, lsr #7
    6020:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6024:	cmp	r0, #0
    6026:	beq.n	600c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6028:	lsls	r4, r4, #2
    602a:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    602e:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    6030:	adds	r2, r3, #1
  return 1;
    6032:	itet	ne
    6034:	movne	r0, #1
    return 0;
    6036:	moveq	r0, #0
  *value = next;
    6038:	strne	r3, [r5, #0]
  return 1;
    603a:	b.n	6010 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

0000603c <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    603c:	push	{r0, r1, r2, r4, r5, lr}
    603e:	mov	r5, r0
  uint32_t n = 0;
    6040:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6042:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    6044:	add	r2, sp, #4
    6046:	ldr	r1, [sp, #4]
    6048:	mov	r0, r5
    604a:	bl	5ffc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    604e:	cmp	r0, #0
    6050:	blt.n	605e <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    6052:	add.w	r4, r4, #1
  } while (status);
    6056:	bne.n	6044 <ExFatPartition::chainSize(unsigned long)+0x8>
}
    6058:	mov	r0, r4
    605a:	add	sp, #12
    605c:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    605e:	movs	r4, #0
    6060:	b.n	6058 <ExFatPartition::chainSize(unsigned long)+0x1c>

00006062 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6062:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6064:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6066:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6068:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    606c:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    606e:	ands	r4, r3
    6070:	add	r4, r2
  pos->position += offset;
    6072:	add	r2, r3
    6074:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6076:	ldrb.w	r3, [r0, #1093]	; 0x445
    607a:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    607c:	uxtb	r3, r3
    607e:	lsrs	r4, r3
  while (tmp--) {
    6080:	cbnz	r4, 6086 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    6082:	movs	r0, #1
    6084:	b.n	60a0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    6086:	ldrb	r3, [r5, #8]
      pos->cluster++;
    6088:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    608a:	cbz	r3, 6094 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    608c:	adds	r1, #1
    608e:	str	r1, [r5, #0]
    6090:	subs	r4, #1
    6092:	b.n	6080 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    6094:	mov	r2, r5
    6096:	mov	r0, r6
    6098:	bl	5ffc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    609c:	cmp	r0, #1
    609e:	beq.n	6090 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    60a0:	pop	{r4, r5, r6, pc}

000060a2 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    60a2:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    60a4:	push	{r3, r4, r5, lr}
    60a6:	mov	r4, r1
    60a8:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    60aa:	bhi.n	60b0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    60ac:	movs	r0, #0
}
    60ae:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    60b0:	ldr.w	r3, [r0, #1072]	; 0x430
    60b4:	adds	r3, #1
    60b6:	cmp	r3, r1
    60b8:	bcc.n	60ac <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    60ba:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    60be:	movs	r2, #1
    60c0:	add.w	r0, r0, #528	; 0x210
    60c4:	add.w	r1, r1, r4, lsr #7
    60c8:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    60cc:	cmp	r0, #0
    60ce:	beq.n	60ac <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    60d0:	lsls	r4, r4, #2
    60d2:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    60d6:	str	r5, [r0, r4]
  return true;
    60d8:	movs	r0, #1
    60da:	b.n	60ae <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

000060dc <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    60dc:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    60e0:	mov	r7, r0
    60e2:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    60e4:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    60e6:	add	r2, sp, #4
    60e8:	mov	r1, r4
    60ea:	mov	r0, r7
    60ec:	bl	5ffc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    60f0:	subs	r6, r0, #0
    60f2:	bge.n	60fe <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    60f4:	movs	r5, #0
}
    60f6:	mov	r0, r5
    60f8:	add	sp, #8
    60fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    60fe:	movs	r2, #0
    6100:	mov	r1, r4
    6102:	mov	r0, r7
    6104:	bl	60a2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6108:	mov	r5, r0
    610a:	cmp	r0, #0
    610c:	beq.n	60f4 <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    610e:	adds	r2, r4, #1
    6110:	cbz	r6, 6118 <ExFatPartition::freeChain(unsigned long)+0x3c>
    6112:	ldr	r3, [sp, #4]
    6114:	cmp	r3, r2
    6116:	beq.n	612e <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6118:	movs	r3, #0
    611a:	sub.w	r2, r2, r8
    611e:	mov	r1, r8
    6120:	mov	r0, r7
    6122:	bl	5f28 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6126:	cmp	r0, #0
    6128:	beq.n	60f4 <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    612a:	ldr.w	r8, [sp, #4]
    cluster = next;
    612e:	ldr	r4, [sp, #4]
  } while (status);
    6130:	cmp	r6, #0
    6132:	bne.n	60e6 <ExFatPartition::freeChain(unsigned long)+0xa>
    6134:	b.n	60f6 <ExFatPartition::freeChain(unsigned long)+0x1a>

00006136 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    6136:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    613a:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    613c:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    613e:	ldr.w	r7, [r0, #1068]	; 0x42c
    6142:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    6146:	mov	r5, r4
    6148:	mov	r1, r7
    614a:	movs	r2, #0
    614c:	mov	r0, r8
    614e:	adds	r7, #1
    6150:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6154:	cbz	r0, 6172 <ExFatPartition::freeClusterCount()+0x3c>
    6156:	subs	r0, #1
    6158:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    615c:	ldrb.w	r1, [r0, #1]!
    6160:	cmp	r1, #255	; 0xff
    6162:	bne.n	6176 <ExFatPartition::freeClusterCount()+0x40>
        usedCount+= 8;
    6164:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    6166:	adds	r5, #8
      if (nc >= m_clusterCount) {
    6168:	ldr.w	r3, [r6, #1072]	; 0x430
    616c:	cmp	r3, r5
    616e:	bhi.n	6190 <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    6170:	subs	r0, r3, r4
      }
    }
  }
}
    6172:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    6176:	cmp	r1, #0
    6178:	beq.n	6166 <ExFatPartition::freeClusterCount()+0x30>
    617a:	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    617c:	movs	r3, #1
          if ((mask & cache[i])) {
    617e:	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6180:	mov.w	r3, r3, lsl #1
            usedCount++;
    6184:	it	ne
    6186:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6188:	subs	r2, #1
    618a:	uxtb	r3, r3
    618c:	bne.n	617e <ExFatPartition::freeClusterCount()+0x48>
    618e:	b.n	6166 <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    6190:	cmp	r5, ip
    6192:	bne.n	615c <ExFatPartition::freeClusterCount()+0x26>
    6194:	b.n	6148 <ExFatPartition::freeClusterCount()+0x12>
	...

00006198 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6198:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    619a:	mov.w	r3, #4294967295
    619e:	mov	r6, r2
    61a0:	add.w	r7, r0, #528	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    61a4:	movs	r2, #0
  m_blockDev = dev;
    61a6:	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    61aa:	mov	r4, r0
    m_blockDev = blockDev;
    61ac:	str	r1, [r0, #4]
    61ae:	str.w	r1, [r0, #532]	; 0x214
    61b2:	mov	r1, r2
  m_fatType = 0;
    61b4:	strb.w	r2, [r0, #1092]	; 0x444
    m_status = 0;
    61b8:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    61ba:	str	r3, [r0, #12]
    m_status = 0;
    61bc:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    61c0:	str.w	r3, [r0, #540]	; 0x21c
    61c4:	mov	r0, r7
    61c6:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    61ca:	cmp	r6, #4
    61cc:	mov	r5, r0
    61ce:	bls.n	61d4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    61d0:	movs	r0, #0
}
    61d2:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    61d4:	cmp	r0, #0
    61d6:	beq.n	61d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    61d8:	cbz	r6, 6208 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x70>
    mp = &mbr->part[part - 1];
    61da:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    61dc:	add.w	r3, r0, r3, lsl #4
    61e0:	ldrb.w	r2, [r3, #446]	; 0x1be
    61e4:	ands.w	r2, r2, #127	; 0x7f
    61e8:	bne.n	61d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    61ea:	ldrb.w	r3, [r3, #450]	; 0x1c2
    61ee:	cmp	r3, #0
    61f0:	beq.n	61d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    61f2:	add.w	r6, r0, r6, lsl #4
    61f6:	mov	r0, r7
    61f8:	ldr.w	r6, [r6, #438]	; 0x1b6
    61fc:	mov	r1, r6
    61fe:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6202:	mov	r5, r0
    6204:	cmp	r0, #0
    6206:	beq.n	61d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    6208:	ldr	r1, [pc, #104]	; (6274 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    620a:	movs	r2, #5
    620c:	adds	r0, r5, #3
    620e:	bl	e954 <strncmp>
    6212:	mov	r1, r0
    6214:	cmp	r0, #0
    6216:	bne.n	61d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    6218:	ldrb.w	r3, [r5, #108]	; 0x6c
    621c:	cmp	r3, #9
    621e:	bne.n	61d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6220:	ldr	r3, [r5, #80]	; 0x50
    6222:	add	r3, r6
    6224:	str.w	r3, [r4, #1060]	; 0x424
    6228:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    622a:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    622e:	ldr	r3, [r5, #88]	; 0x58
    6230:	add	r3, r6
    6232:	str.w	r3, [r4, #1068]	; 0x42c
    6236:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    6238:	str.w	r3, [r4, #1072]	; 0x430
    623c:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    623e:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6242:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6246:	movs	r5, #1
  m_bitmapStart = 0;
    6248:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    624c:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    624e:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6252:	adds	r3, #9
  bitmapFind(0, 1);
    6254:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6256:	lsl.w	r3, r5, r3
    625a:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    625e:	subs	r3, #1
    6260:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    6264:	bl	5e80 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    6268:	movs	r3, #64	; 0x40
  return true;
    626a:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    626c:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    6270:	b.n	61d2 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    6272:	nop
    6274:	.word	0x2000103e

00006278 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    6278:	push	{r4, lr}
    627a:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    627c:	ldr.w	r1, [r0, #1076]	; 0x434
    6280:	bl	603c <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6284:	ldrb.w	r3, [r4, #1093]	; 0x445
    6288:	adds	r3, #9
  return nc << bytesPerClusterShift();
    628a:	uxtb	r3, r3
}
    628c:	lsls	r0, r3
    628e:	pop	{r4, pc}

00006290 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    6290:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    6292:	add.w	r4, r0, #1096	; 0x448
    6296:	sub	sp, #56	; 0x38
    6298:	movs	r3, #0
    629a:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    629c:	mov	r0, sp
    629e:	mov	r1, r4
    62a0:	str	r3, [sp, #48]	; 0x30
    62a2:	bl	5d80 <ExFatFile::open(ExFatFile*, char const*, int)>
    62a6:	mov	r5, r0
    62a8:	cbz	r0, 62d2 <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    62aa:	ldrb.w	r3, [sp, #49]	; 0x31
    62ae:	ands.w	r3, r3, #80	; 0x50
    62b2:	beq.n	62d8 <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    62b4:	mov	r2, sp
    62b6:	mov	r3, r4
    62b8:	add	r6, sp, #48	; 0x30
    62ba:	mov	r4, r2
    62bc:	adds	r3, #8
    62be:	ldmia	r4!, {r0, r1}
    62c0:	cmp	r4, r6
    62c2:	str.w	r0, [r3, #-8]
    62c6:	str.w	r1, [r3, #-4]
    62ca:	mov	r2, r4
    62cc:	bne.n	62ba <ExFatVolume::chdir(char const*)+0x2a>
    62ce:	ldr	r0, [r4, #0]
    62d0:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    62d2:	mov	r0, r5
    62d4:	add	sp, #56	; 0x38
    62d6:	pop	{r4, r5, r6, pc}
  return false;
    62d8:	mov	r5, r3
    62da:	b.n	62d2 <ExFatVolume::chdir(char const*)+0x42>

000062dc <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    62dc:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    62de:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    62e0:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    62e2:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    62e4:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    62e6:	orr.w	r2, r2, r1, lsr #1
    62ea:	ldrb	r1, [r0, r3]
    62ec:	uxtah	r2, r1, r2
    62f0:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    62f2:	bne.n	6306 <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    62f4:	cmp	r4, #133	; 0x85
    62f6:	ite	ne
    62f8:	movne	r2, #1
    62fa:	moveq	r2, #3
    62fc:	add	r3, r2
    62fe:	cmp	r3, #31
    6300:	bls.n	62e2 <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    6302:	mov	r0, r1
    6304:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6306:	movs	r2, #1
    6308:	b.n	62fc <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

0000630a <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    630a:	push	{r4, lr}
    630c:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    630e:	bl	5388 <FsCache::sync()>
    6312:	cbz	r0, 632c <ExFatPartition::cacheSync()+0x22>
    6314:	add.w	r0, r4, #528	; 0x210
    6318:	bl	5388 <FsCache::sync()>
    631c:	cbz	r0, 632c <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    631e:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6322:	ldr	r3, [r0, #0]
  }
    6324:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6328:	ldr	r3, [r3, #32]
    632a:	bx	r3
  }
    632c:	movs	r0, #0
    632e:	pop	{r4, pc}

00006330 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    6330:	push	{r3, r4, r5, r6, r7, lr}
    6332:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6334:	ldr	r0, [r0, #32]
    6336:	ldr	r1, [r4, #24]
    6338:	cbz	r1, 633c <ExFatFile::addCluster()+0xc>
    633a:	adds	r1, #1
    633c:	movs	r2, #1
    633e:	bl	5e80 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    6342:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6344:	mov	r5, r0
  if (find < 2) {
    6346:	bhi.n	634e <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    6348:	movs	r6, #0
}
    634a:	mov	r0, r6
    634c:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    634e:	movs	r3, #1
    6350:	mov	r1, r0
    6352:	ldr	r0, [r4, #32]
    6354:	mov	r2, r3
    6356:	bl	5f28 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    635a:	mov	r6, r0
    635c:	cmp	r0, #0
    635e:	beq.n	6348 <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    6360:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6362:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    6366:	cbnz	r2, 6374 <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6368:	orr.w	r3, r3, #64	; 0x40
    636c:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    6370:	str	r5, [r4, #24]
  return true;
    6372:	b.n	634a <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    6374:	lsls	r1, r3, #25
    6376:	bmi.n	639c <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    6378:	mov.w	r2, #4294967295
    637c:	mov	r1, r5
    637e:	ldr	r0, [r4, #32]
    6380:	bl	60a2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6384:	cmp	r0, #0
    6386:	beq.n	6348 <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    6388:	ldr	r1, [r4, #24]
    638a:	cmp	r1, #0
    638c:	beq.n	6370 <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    638e:	mov	r2, r5
    6390:	ldr	r0, [r4, #32]
    6392:	bl	60a2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6396:	cmp	r0, #0
    6398:	bne.n	6370 <ExFatFile::addCluster()+0x40>
    639a:	b.n	6348 <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    639c:	adds	r2, #1
    639e:	cmp	r2, r5
    63a0:	beq.n	6370 <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    63a2:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    63a6:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    63a8:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    63ac:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    63ae:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    63b0:	cmp	r3, r1
    63b2:	bls.n	6378 <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    63b4:	adds	r7, r1, #1
    63b6:	mov	r2, r7
    63b8:	bl	60a2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    63bc:	cmp	r0, #0
    63be:	beq.n	6348 <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    63c0:	mov	r1, r7
    63c2:	b.n	63ac <ExFatFile::addCluster()+0x7c>

000063c4 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    63c4:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    63c6:	ldrb.w	r3, [r0, #51]	; 0x33
    63ca:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    63cc:	lsls	r2, r3, #30
    63ce:	bmi.n	63d4 <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    63d0:	movs	r0, #0
}
    63d2:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    63d4:	ldr	r1, [r0, #28]
    63d6:	cbnz	r1, 640e <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    63d8:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    63da:	movs	r2, #1
    63dc:	uxtb	r1, r5
    63de:	mov	r0, r4
    63e0:	bl	566e <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    63e4:	cmp	r0, #0
    63e6:	beq.n	63d0 <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    63e8:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    63ea:	adds	r5, #1
    cache[0] &= 0x7F;
    63ec:	and.w	r3, r3, #127	; 0x7f
    63f0:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    63f2:	uxtb	r3, r5
    63f4:	ldrb.w	r2, [r4, #48]	; 0x30
    63f8:	cmp	r2, r3
    63fa:	bcs.n	63da <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    63fc:	movs	r3, #0
  return m_vol->cacheSync();
    63fe:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    6400:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    6404:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    6408:	bl	630a <ExFatPartition::cacheSync()>
    640c:	b.n	63d2 <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    640e:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6410:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    6412:	bpl.n	644a <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6414:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6418:	ldrd	r2, r5, [r4, #8]
    641c:	adds	r3, #9
    641e:	subs	r2, #1
    6420:	uxtb	r3, r3
    6422:	adc.w	r5, r5, #4294967295
    6426:	rsb	r7, r3, #32
    642a:	sub.w	r6, r3, #32
    642e:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6430:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6432:	lsl.w	r7, r5, r7
    6436:	lsr.w	r6, r5, r6
    643a:	orrs	r2, r7
    643c:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    643e:	adds	r2, #1
    6440:	bl	5f28 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    6444:	cmp	r0, #0
    6446:	bne.n	63d8 <ExFatFile::remove()+0x14>
    6448:	b.n	63d0 <ExFatFile::remove()+0xc>
    644a:	bl	60dc <ExFatPartition::freeChain(unsigned long)>
    644e:	b.n	6444 <ExFatFile::remove()+0x80>

00006450 <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    6450:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    6452:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    6456:	sub	sp, #32
    6458:	mov	r4, r0
  if (!isSubDir()) {
    645a:	lsls	r3, r3, #27
    645c:	bmi.n	6464 <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    645e:	movs	r0, #0
}
    6460:	add	sp, #32
    6462:	pop	{r4, pc}
    seekSet(0);
    6464:	movs	r2, #0
    6466:	movs	r3, #0
    6468:	bl	5950 <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    646c:	movs	r2, #32
    646e:	mov	r1, sp
    6470:	mov	r0, r4
    6472:	bl	57a0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6476:	cbz	r0, 648c <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    6478:	cmp	r0, #32
    647a:	bne.n	645e <ExFatFile::rmdir()+0xe>
    647c:	ldrsb.w	r2, [sp]
    6480:	ldrb.w	r3, [sp]
    6484:	cmp	r2, #0
    6486:	blt.n	645e <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    6488:	cmp	r3, #0
    648a:	bne.n	646c <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    648c:	movs	r3, #8
  return remove();
    648e:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    6490:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    6494:	ldrb.w	r3, [r4, #51]	; 0x33
    6498:	orr.w	r3, r3, #2
    649c:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    64a0:	bl	63c4 <ExFatFile::remove()>
    64a4:	b.n	6460 <ExFatFile::rmdir()+0x10>
	...

000064a8 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    64a8:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    64ac:	movs	r7, #0
    64ae:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    64b0:	ldr.w	r8, [pc, #204]	; 6580 <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    64b4:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    64b6:	movs	r2, #0
    64b8:	uxtb	r1, r7
    64ba:	mov	r0, r4
    64bc:	bl	566e <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    64c0:	mov	r5, r0
    64c2:	cmp	r0, #0
    64c4:	beq.n	6542 <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    64c6:	ldrb	r3, [r0, #0]
    64c8:	cmp	r3, #192	; 0xc0
    64ca:	beq.n	6556 <ExFatFile::syncDir()+0xae>
    64cc:	cmp	r3, #193	; 0xc1
    64ce:	beq.n	6514 <ExFatFile::syncDir()+0x6c>
    64d0:	cmp	r3, #133	; 0x85
    64d2:	bne.n	6542 <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    64d4:	ldrb.w	r3, [r4, #49]	; 0x31
    64d8:	and.w	r3, r3, #55	; 0x37
    64dc:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    64de:	ldr.w	r3, [r8]
    64e2:	cbz	r3, 6506 <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    64e4:	add.w	r2, sp, #3
    64e8:	add.w	r1, sp, #6
    64ec:	add	r0, sp, #4
    64ee:	blx	r3
          df->modifyTimeMs = ms10;
    64f0:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    64f4:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    64f8:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    64fa:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    64fe:	strh	r2, [r5, #12]
    6500:	strh	r3, [r5, #14]
    6502:	strh	r2, [r5, #16]
    6504:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    6506:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6508:	ldrb.w	r3, [r2, #528]	; 0x210
    650c:	orr.w	r3, r3, #1
    6510:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6514:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    6516:	mov	r1, r6
    6518:	mov	r0, r5
    651a:	bl	62dc <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    651e:	ldrb.w	r2, [r4, #48]	; 0x30
    6522:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    6524:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6526:	cmp	r2, r3
    6528:	bcs.n	64b6 <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    652a:	movs	r2, #1
    652c:	add.w	r1, r4, #36	; 0x24
    6530:	ldr	r0, [r4, #32]
    6532:	bl	5fc8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6536:	cbz	r0, 6542 <ExFatFile::syncDir()+0x9a>
    6538:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    653a:	ldr	r0, [r4, #32]
    653c:	bl	630a <ExFatPartition::cacheSync()>
    6540:	cbnz	r0, 6550 <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    6542:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    6546:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6548:	orr.w	r3, r3, #1
    654c:	strb.w	r3, [r4, #50]	; 0x32
}
    6550:	add	sp, #8
    6552:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    6556:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    655a:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    655c:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    655e:	ite	mi
    6560:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    6564:	andpl.w	r3, r3, #253	; 0xfd
    6568:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    656a:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    656e:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    6572:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    6574:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    6576:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    657a:	strd	r2, r3, [r0, #24]
    657e:	b.n	6506 <ExFatFile::syncDir()+0x5e>
    6580:	.word	0x2002ce50

00006584 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    6584:	push	{r4, lr}
  if (!isOpen()) {
    6586:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    658a:	mov	r4, r0
  if (!isOpen()) {
    658c:	cbnz	r3, 6592 <ExFatFile::sync()+0xe>
    return true;
    658e:	movs	r0, #1
}
    6590:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6592:	ldrsb.w	r2, [r0, #51]	; 0x33
    6596:	ldrb.w	r3, [r0, #51]	; 0x33
    659a:	cmp	r2, #0
    659c:	bge.n	65ae <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    659e:	and.w	r3, r3, #127	; 0x7f
    65a2:	strb.w	r3, [r0, #51]	; 0x33
}
    65a6:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    65aa:	b.w	64a8 <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    65ae:	ldr	r0, [r0, #32]
    65b0:	bl	630a <ExFatPartition::cacheSync()>
    65b4:	cmp	r0, #0
    65b6:	bne.n	658e <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    65b8:	ldrb.w	r3, [r4, #50]	; 0x32
    65bc:	orr.w	r3, r3, #1
    65c0:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    65c4:	b.n	6590 <ExFatFile::sync()+0xc>

000065c6 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    65c6:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    65c8:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    65cc:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    65ce:	lsls	r2, r3, #25
    65d0:	bpl.n	6652 <ExFatFile::addDirCluster()+0x8c>
    65d2:	ldr	r0, [r0, #32]
    65d4:	bl	6278 <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    65d8:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    65da:	ldr.w	r3, [r3, #1084]	; 0x43c
    65de:	add	r0, r3
  if (dl >= 0X4000000) {
    65e0:	cmp.w	r0, #67108864	; 0x4000000
    65e4:	bcs.n	6672 <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    65e6:	mov	r0, r4
    65e8:	bl	6330 <ExFatFile::addCluster()>
    65ec:	cmp	r0, #0
    65ee:	beq.n	6672 <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    65f0:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    65f2:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    65f4:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    65f6:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    65f8:	ldrb.w	r2, [r3, #1093]	; 0x445
    65fc:	subs	r5, #2
    65fe:	ldr.w	r3, [r3, #1068]	; 0x42c
    6602:	lsls	r5, r2
    6604:	add	r5, r3
    6606:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6608:	ldrb.w	r3, [r0, #1093]	; 0x445
    660c:	lsl.w	r3, r7, r3
    6610:	cmp	r6, r3
    6612:	bcc.n	6656 <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    6614:	ldrb.w	r3, [r4, #49]	; 0x31
    6618:	lsls	r3, r3, #25
    661a:	bmi.n	6648 <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    661c:	ldrb.w	r3, [r4, #51]	; 0x33
    6620:	orn	r3, r3, #127	; 0x7f
    6624:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    6628:	ldr.w	r2, [r0, #1084]	; 0x43c
    662c:	ldrd	r3, r1, [r4, #8]
    6630:	adds	r3, r3, r2
    6632:	adc.w	r1, r1, #0
    6636:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    663a:	ldrd	r3, r1, [r4, #16]
    663e:	adds	r3, r3, r2
    6640:	adc.w	r1, r1, #0
    6644:	strd	r3, r1, [r4, #16]
  return sync();
    6648:	mov	r0, r4
}
    664a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    664e:	b.w	6584 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6652:	ldr	r0, [r0, #8]
    6654:	b.n	65d8 <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    6656:	movs	r2, #5
    6658:	adds	r1, r5, r6
    665a:	add.w	r0, r0, #528	; 0x210
    665e:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6662:	cbz	r0, 6672 <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    6664:	mov.w	r2, #512	; 0x200
    6668:	movs	r1, #0
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    666a:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    666c:	bl	9f44 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6670:	b.n	6606 <ExFatFile::addDirCluster()+0x40>
}
    6672:	movs	r0, #0
    6674:	pop	{r3, r4, r5, r6, r7, pc}

00006676 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6676:	push	{r4, lr}
  if (!parent->isDir()) {
    6678:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    667c:	mov	r4, r0
  if (!parent->isDir()) {
    667e:	tst.w	r3, #80	; 0x50
    6682:	beq.n	66ba <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6684:	movw	r3, #2562	; 0xa02
    6688:	bl	5a30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    668c:	cbz	r0, 66ba <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    668e:	movs	r3, #16
  if (!addDirCluster()) {
    6690:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    6692:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    6696:	bl	65c6 <ExFatFile::addDirCluster()>
    669a:	cbz	r0, 66ba <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    669c:	ldr	r3, [r4, #24]
    669e:	mov	r0, r4
    66a0:	movs	r2, #0
    66a2:	str	r3, [r4, #28]
    66a4:	movs	r3, #0
    66a6:	bl	5950 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    66aa:	movs	r3, #193	; 0xc1
  return sync();
    66ac:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    66ae:	strb.w	r3, [r4, #51]	; 0x33
}
    66b2:	ldmia.w	sp!, {r4, lr}
  return sync();
    66b6:	b.w	6584 <ExFatFile::sync()>
}
    66ba:	movs	r0, #0
    66bc:	pop	{r4, pc}

000066be <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    66be:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66c2:	mov	r8, r3
    66c4:	sub	sp, #88	; 0x58
    66c6:	movs	r3, #0
    66c8:	mov	r5, r0
    66ca:	mov	r4, r1
    66cc:	str	r2, [sp, #4]
    66ce:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    66d2:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    66d4:	ldrb.w	r3, [r0, #49]	; 0x31
    66d8:	cbz	r3, 66e2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    66da:	movs	r0, #0
}
    66dc:	add	sp, #88	; 0x58
    66de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    66e2:	ldrb.w	r3, [r1, #49]	; 0x31
    66e6:	tst.w	r3, #80	; 0x50
    66ea:	beq.n	66da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    66ec:	ldrb	r3, [r2, #0]
    66ee:	cmp	r3, #47	; 0x2f
    66f0:	bne.n	6708 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    66f2:	ldr	r2, [sp, #4]
    66f4:	ldrb	r3, [r2, #0]
    66f6:	cmp	r3, #47	; 0x2f
    66f8:	beq.n	6754 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    66fa:	ldr	r1, [r4, #32]
    66fc:	add	r0, sp, #32
    66fe:	bl	56fa <ExFatFile::openRoot(ExFatVolume*)>
    6702:	cmp	r0, #0
    6704:	beq.n	66da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    6706:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    6708:	add	r3, sp, #4
    670a:	add	r2, sp, #8
    670c:	ldr	r1, [sp, #4]
    670e:	mov	r0, r5
    6710:	bl	5720 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6714:	cmp	r0, #0
    6716:	beq.n	66da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    6718:	ldr	r3, [sp, #4]
    671a:	ldrb	r3, [r3, #0]
    671c:	cbz	r3, 6770 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    671e:	movs	r3, #0
    6720:	add	r2, sp, #8
    6722:	mov	r1, r4
    6724:	mov	r0, r5
    6726:	bl	5a30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    672a:	cbz	r0, 675a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    672c:	add	r6, sp, #32
    672e:	mov	r2, r5
    6730:	add.w	r3, r5, #48	; 0x30
    6734:	mov	r4, r6
    6736:	ldr	r0, [r2, #0]
    6738:	adds	r2, #8
    673a:	ldr.w	r1, [r2, #-4]
    673e:	mov	r7, r6
    6740:	cmp	r2, r3
    6742:	stmia	r7!, {r0, r1}
    6744:	mov	r6, r7
    6746:	bne.n	6736 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    6748:	ldr	r0, [r2, #0]
    674a:	str	r0, [r7, #0]
    close();
    674c:	mov	r0, r5
    674e:	bl	56a6 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    6752:	b.n	6708 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    6754:	adds	r2, #1
    6756:	str	r2, [sp, #4]
    6758:	b.n	66f2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    675a:	cmp.w	r8, #0
    675e:	beq.n	66da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    6760:	add	r2, sp, #8
    6762:	mov	r1, r4
    6764:	mov	r0, r5
    6766:	bl	6676 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    676a:	cmp	r0, #0
    676c:	bne.n	672c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    676e:	b.n	66da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    6770:	add	r2, sp, #8
    6772:	mov	r1, r4
    6774:	mov	r0, r5
    6776:	bl	6676 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    677a:	b.n	66dc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

0000677c <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    677c:	push	{r4, r5, r6, r7, lr}
    677e:	mov	r4, r0
    6780:	sub	sp, #116	; 0x74
    6782:	movs	r0, #0
    6784:	str	r0, [sp, #48]	; 0x30
    6786:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    6788:	ldrb.w	r0, [r4, #49]	; 0x31
    678c:	tst.w	r0, #24
    6790:	bne.n	6798 <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    6792:	movs	r0, #0
}
    6794:	add	sp, #116	; 0x74
    6796:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    6798:	ldr	r0, [r4, #32]
    679a:	ldr	r3, [r1, #32]
    679c:	cmp	r0, r3
    679e:	bne.n	6792 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    67a0:	movw	r3, #2561	; 0xa01
    67a4:	mov	r0, sp
    67a6:	bl	5d80 <ExFatFile::open(ExFatFile*, char const*, int)>
    67aa:	cmp	r0, #0
    67ac:	beq.n	6792 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    67ae:	add	r2, sp, #56	; 0x38
    67b0:	mov	r3, r4
    67b2:	add.w	r7, r4, #48	; 0x30
    67b6:	mov	r6, r2
    67b8:	ldr	r0, [r3, #0]
    67ba:	adds	r3, #8
    67bc:	ldr.w	r1, [r3, #-4]
    67c0:	mov	r5, r2
    67c2:	cmp	r3, r7
    67c4:	stmia	r5!, {r0, r1}
    67c6:	mov	r2, r5
    67c8:	bne.n	67b8 <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    67ca:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    67cc:	add	r2, sp, #36	; 0x24
    67ce:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    67d2:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    67d4:	ldmia	r2, {r0, r1, r2}
    67d6:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    67da:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    67de:	mov	r0, r4
  m_setCount = file.m_setCount;
    67e0:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    67e4:	ldrb.w	r3, [r4, #51]	; 0x33
    67e8:	orn	r3, r3, #127	; 0x7f
    67ec:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    67f0:	bl	6584 <ExFatFile::sync()>
    67f4:	cmp	r0, #0
    67f6:	beq.n	6792 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    67f8:	movs	r3, #0
  return oldFile.remove();
    67fa:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    67fc:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    67fe:	movs	r3, #2
    6800:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    6804:	movs	r3, #8
    6806:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    680a:	bl	63c4 <ExFatFile::remove()>
    680e:	b.n	6794 <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00006810 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    6810:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6812:	ldrb.w	r2, [r0, #51]	; 0x33
    6816:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6818:	lsls	r3, r2, #30
    681a:	bmi.n	6822 <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    681c:	movs	r0, #0
}
    681e:	add	sp, #12
    6820:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    6822:	ldr	r3, [r0, #28]
    6824:	cmp	r3, #0
    6826:	beq.n	68d6 <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    6828:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    682c:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    682e:	beq.n	68a0 <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6830:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6832:	ldrb.w	r5, [r0, #1093]	; 0x445
    6836:	ldrd	r2, r6, [r4, #8]
    683a:	adds	r5, #9
    683c:	subs	r2, #1
    683e:	uxtb	r5, r5
    6840:	adc.w	r6, r6, #4294967295
    6844:	rsb	ip, r5, #32
    6848:	sub.w	r7, r5, #32
    684c:	lsrs	r2, r5
    684e:	lsl.w	ip, r6, ip
    6852:	lsr.w	r7, r6, r7
    6856:	orr.w	r2, r2, ip
    685a:	orrs	r2, r7
    685c:	adds	r2, #1
    if (m_curCluster) {
    685e:	cbz	r1, 688c <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    6860:	subs	r3, #1
      toFree = m_curCluster + 1;
    6862:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    6864:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    6866:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    6868:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    686a:	cbnz	r2, 6892 <ExFatFile::truncate()+0x82>
  return sync();
    686c:	mov	r0, r4
  m_dataLength = m_curPosition;
    686e:	ldrd	r2, r3, [r4]
    6872:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    6876:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    687a:	ldrb.w	r3, [r4, #51]	; 0x33
    687e:	orn	r3, r3, #127	; 0x7f
    6882:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    6886:	bl	6584 <ExFatFile::sync()>
    688a:	b.n	681e <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    688c:	str	r3, [sp, #4]
      m_firstCluster = 0;
    688e:	str	r1, [r4, #28]
    6890:	b.n	686a <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6892:	movs	r3, #0
    6894:	ldr	r1, [sp, #4]
    6896:	bl	5f28 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    689a:	cmp	r0, #0
    689c:	bne.n	686c <ExFatFile::truncate()+0x5c>
    689e:	b.n	681c <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    68a0:	cbz	r1, 68d0 <ExFatFile::truncate()+0xc0>
      toFree = 0;
    68a2:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    68a4:	add	r2, sp, #4
    68a6:	ldr	r0, [r0, #32]
    68a8:	bl	5ffc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    68ac:	cmp	r0, #0
    68ae:	blt.n	681c <ExFatFile::truncate()+0xc>
      if (fg) {
    68b0:	beq.n	68c2 <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    68b2:	mov.w	r2, #4294967295
    68b6:	ldr	r1, [r4, #24]
    68b8:	ldr	r0, [r4, #32]
    68ba:	bl	60a2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    68be:	cmp	r0, #0
    68c0:	beq.n	681c <ExFatFile::truncate()+0xc>
    if (toFree) {
    68c2:	ldr	r1, [sp, #4]
    68c4:	cmp	r1, #0
    68c6:	beq.n	686c <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    68c8:	ldr	r0, [r4, #32]
    68ca:	bl	60dc <ExFatPartition::freeChain(unsigned long)>
    68ce:	b.n	689a <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    68d0:	str	r3, [sp, #4]
      m_firstCluster = 0;
    68d2:	str	r1, [r0, #28]
    68d4:	b.n	68c2 <ExFatFile::truncate()+0xb2>
      return true;
    68d6:	movs	r0, #1
    68d8:	b.n	681e <ExFatFile::truncate()+0xe>
	...

000068dc <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    68dc:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68e0:	ldrb.w	r3, [r0, #51]	; 0x33
    68e4:	mov	r8, r1
    68e6:	mov	r4, r0
    68e8:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    68ea:	lsls	r1, r3, #30
    68ec:	bpl.n	692c <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    68ee:	lsls	r2, r3, #28
    68f0:	bmi.n	6920 <ExFatFile::write(void const*, unsigned int)+0x44>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    68f2:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    68f4:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    68f8:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    68fc:	ldrd	r5, r3, [r4]
  while (toWrite) {
    6900:	cbnz	r7, 693e <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    6902:	ldrd	r1, r2, [r4, #8]
    6906:	cmp	r1, r5
    6908:	sbcs	r2, r3
    690a:	bcs.w	6ad0 <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    690e:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6912:	ldrb.w	r3, [r4, #51]	; 0x33
    6916:	orn	r3, r3, #127	; 0x7f
    691a:	strb.w	r3, [r4, #51]	; 0x33
    691e:	b.n	6ada <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    6920:	ldrd	r2, r3, [r0, #16]
    6924:	bl	5950 <ExFatFile::seekSet(unsigned long long)>
    6928:	cmp	r0, #0
    692a:	bne.n	68f2 <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    692c:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    6930:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    6934:	orr.w	r3, r3, #1
    6938:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    693c:	b.n	6ada <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    693e:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    6940:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6942:	ldr.w	r3, [r0, #1080]	; 0x438
    6946:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6948:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    694c:	cbnz	r5, 6998 <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    694e:	cmp	r1, #0
    6950:	beq.n	69fe <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    6952:	ldrb.w	r3, [r4, #51]	; 0x33
    6956:	lsls	r3, r3, #25
    6958:	bpl.n	69f0 <ExFatFile::write(void const*, unsigned int)+0x114>
    695a:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    695e:	ldrd	r3, r2, [r4, #8]
    6962:	adds	r0, #9
    6964:	subs	r3, #1
    6966:	uxtb	r0, r0
    6968:	adc.w	r2, r2, #4294967295
    696c:	rsb	lr, r0, #32
    6970:	sub.w	ip, r0, #32
    6974:	lsrs	r3, r0
    6976:	lsl.w	lr, r2, lr
    697a:	lsr.w	ip, r2, ip
    697e:	ldr	r2, [r4, #28]
    6980:	orr.w	r3, r3, lr
    6984:	orr.w	r3, r3, ip
    6988:	add	r3, r2
          if (m_curCluster < lc) {
    698a:	cmp	r3, r1
    698c:	bhi.n	69ea <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    698e:	mov	r0, r4
    6990:	bl	6330 <ExFatFile::addCluster()>
    6994:	cmp	r0, #0
    6996:	beq.n	692c <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    6998:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    699c:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    699e:	ldr	r1, [r4, #24]
    69a0:	ldrb.w	r2, [ip, #1093]	; 0x445
    69a4:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    69a6:	ldr.w	r0, [ip, #1068]	; 0x42c
    69aa:	lsls	r1, r2
    69ac:	add.w	r1, r1, r5, lsr #9
    69b0:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    69b2:	cbnz	r6, 6a16 <ExFatFile::write(void const*, unsigned int)+0x13a>
    69b4:	cmp.w	r7, #512	; 0x200
    69b8:	bcc.n	6a16 <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    69ba:	cmp.w	r7, #1024	; 0x400
    69be:	ldr.w	lr, [ip, #540]	; 0x21c
    69c2:	ldr.w	r0, [ip, #532]	; 0x214
    69c6:	bcs.n	6a9e <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    69c8:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    69ca:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    69cc:	ittt	eq
    69ce:	moveq.w	r3, #4294967295
    m_status = 0;
    69d2:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    69d6:	streq.w	r3, [ip, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    69da:	ldr	r3, [r0, #0]
    69dc:	ldr	r3, [r3, #36]	; 0x24
    69de:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    69e0:	cmp	r0, #0
    69e2:	beq.n	692c <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    69e4:	mov.w	r5, #512	; 0x200
    69e8:	b.n	6a6a <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    69ea:	adds	r1, #1
    69ec:	str	r1, [r4, #24]
        if (fg == 0) {
    69ee:	b.n	6998 <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    69f0:	mov	r2, sl
    69f2:	bl	5ffc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    69f6:	cmp	r0, #0
    69f8:	blt.n	692c <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    69fa:	beq.n	698e <ExFatFile::write(void const*, unsigned int)+0xb2>
    69fc:	b.n	6998 <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    69fe:	ldr	r3, [r4, #28]
    6a00:	cbnz	r3, 6a12 <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    6a02:	mov	r0, r4
    6a04:	bl	6330 <ExFatFile::addCluster()>
    6a08:	cmp	r0, #0
    6a0a:	beq.n	692c <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    6a0c:	ldr	r3, [r4, #24]
    6a0e:	str	r3, [r4, #28]
    6a10:	b.n	6998 <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    6a12:	str	r3, [r4, #24]
    6a14:	b.n	6998 <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    6a16:	rsb	r5, r6, #512	; 0x200
    6a1a:	cmp	r5, r7
    6a1c:	it	cs
    6a1e:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    6a20:	cmp	r6, #0
    6a22:	bne.n	6a9a <ExFatFile::write(void const*, unsigned int)+0x1be>
    6a24:	ldr	r3, [r4, #20]
    6a26:	ldr	r0, [r4, #0]
    6a28:	str	r3, [sp, #4]
    6a2a:	ldr	r3, [r4, #16]
    6a2c:	ldr	r2, [r4, #4]
    6a2e:	cmp	r0, r3
    6a30:	ldr	r3, [sp, #4]
    6a32:	sbcs.w	r3, r2, r3
    6a36:	bcc.n	6a9a <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6a38:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    6a3a:	add.w	r0, ip, #528	; 0x210
    6a3e:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6a42:	cmp	r0, #0
    6a44:	beq.w	692c <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    6a48:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6a4a:	add	r6, r5
      memcpy(dst, src, n);
    6a4c:	mov	r2, r5
    6a4e:	mov	r1, r8
    6a50:	bl	9f88 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6a54:	cmp.w	r6, #512	; 0x200
    6a58:	ldr	r0, [r4, #32]
    6a5a:	bne.n	6a6a <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() {return m_dataCache.sync();}
    6a5c:	add.w	r0, r0, #528	; 0x210
    6a60:	bl	5388 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    6a64:	cmp	r0, #0
    6a66:	beq.w	692c <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    6a6a:	add	r8, r5
    toWrite -= n;
    6a6c:	subs	r7, r7, r5
    m_curPosition += n;
    6a6e:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    6a72:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    6a76:	adds	r3, r5, r3
    6a78:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    6a7c:	cmp	r0, r3
    6a7e:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6a80:	itt	cc
    6a82:	ldrbcc.w	r1, [r4, #51]	; 0x33
    6a86:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    6a8a:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6a8e:	itt	cc
    6a90:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    6a94:	strdcc	r3, r2, [r4, #16]
    6a98:	b.n	68fc <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6a9a:	movs	r2, #1
    6a9c:	b.n	6a3a <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6a9e:	lsl.w	r2, fp, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6aa2:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    6aa4:	lsrs	r2, r7, #9
    6aa6:	cmp	r3, r2
    6aa8:	it	cs
    6aaa:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    6aac:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    6aae:	mov.w	r5, r3, lsl #9
    6ab2:	bhi.n	6ac6 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    6ab4:	adds	r2, r1, r3
    6ab6:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    6ab8:	ittt	hi
    6aba:	movhi.w	r2, #4294967295
    m_status = 0;
    6abe:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6ac2:	strhi.w	r2, [ip, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    6ac6:	ldr	r2, [r0, #0]
    6ac8:	ldr	r6, [r2, #40]	; 0x28
    6aca:	mov	r2, r8
    6acc:	blx	r6
    6ace:	b.n	6a64 <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    6ad0:	ldr	r3, [pc, #16]	; (6ae4 <ExFatFile::write(void const*, unsigned int)+0x208>)
    6ad2:	ldr	r3, [r3, #0]
    6ad4:	cmp	r3, #0
    6ad6:	bne.w	6912 <ExFatFile::write(void const*, unsigned int)+0x36>
}
    6ada:	mov	r0, r9
    6adc:	add	sp, #12
    6ade:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ae2:	nop
    6ae4:	.word	0x2002ce50

00006ae8 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    6ae8:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6aea:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    6aec:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6aee:	bl	6fda <FatFile::seekSet(unsigned long)>
    6af2:	cbz	r0, 6b00 <FatFile::cacheDir(unsigned short)+0x18>
    6af4:	mov	r0, r4
    6af6:	movs	r1, #0
  }
    6af8:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6afc:	b.w	6f9c <FatFile::readDirCache(bool)>
  }
    6b00:	pop	{r4, pc}

00006b02 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    6b02:	cmp	r2, #4
    6b04:	bhi.n	6b10 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    6b06:	add.w	r2, r1, r2, lsl #1
    6b0a:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    6b0e:	bx	lr
  } else if (i < 11) {
    6b10:	cmp	r2, #10
    6b12:	bhi.n	6b1c <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    6b14:	add.w	r2, r1, r2, lsl #1
    6b18:	ldrh	r0, [r2, #4]
    6b1a:	bx	lr
  } else if (i < 13) {
    6b1c:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    6b1e:	itte	ls
    6b20:	addls.w	r2, r1, r2, lsl #1
    6b24:	ldrhls	r0, [r2, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    6b26:	movhi	r0, #0
}
    6b28:	bx	lr

00006b2a <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    6b2a:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    6b2c:	ldrb	r4, [r0, #0]
    6b2e:	mov	r5, r1
    6b30:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    6b32:	cbz	r4, 6ba4 <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    6b34:	ands.w	r4, r4, #96	; 0x60
    6b38:	beq.n	6b4a <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    6b3a:	cmp	r2, #1
    6b3c:	bls.n	6ba4 <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    6b3e:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    6b40:	movs	r0, #1
    name[0] = '/';
    6b42:	strb	r3, [r1, #0]
    name[1] = '\0';
    6b44:	movs	r3, #0
    6b46:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    6b48:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6b4a:	mov	r1, r4
    6b4c:	bl	6d98 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6b50:	cbz	r0, 6ba4 <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    6b52:	mov	r6, r0
    6b54:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    6b56:	movs	r2, #8
    if (i == 8) {
    6b58:	cmp	r1, #8
      if (*ptr == ' ') {
    6b5a:	ldrb	r3, [r6, #0]
    if (i == 8) {
    6b5c:	bne.n	6b76 <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    6b5e:	cmp	r3, #32
    6b60:	beq.n	6b9c <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    6b62:	movs	r2, #16
      c = '.';
    6b64:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    6b66:	mov	ip, r4
    6b68:	adds	r4, #1
    6b6a:	cmp	r4, r7
    6b6c:	bcs.n	6ba4 <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    6b6e:	uxtb	r4, r4
    6b70:	strb.w	r3, [r5, ip]
    6b74:	b.n	6b96 <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6b76:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    6b7a:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6b7c:	cmp.w	ip, #25
    6b80:	bhi.n	6b92 <FatFile::getSFN(char*, unsigned int)+0x68>
    6b82:	ldrb.w	ip, [r0, #12]
    6b86:	tst.w	r2, ip
    6b8a:	beq.n	6b66 <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    6b8c:	adds	r3, #32
    6b8e:	uxtb	r3, r3
    6b90:	b.n	6b66 <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    6b92:	cmp	r3, #32
    6b94:	bne.n	6b66 <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    6b96:	adds	r1, #1
    6b98:	cmp	r1, #12
    6b9a:	bne.n	6b58 <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    6b9c:	movs	r3, #0
    6b9e:	mov	r0, r4
    6ba0:	strb	r3, [r5, r4]
  return j;
    6ba2:	b.n	6b48 <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    6ba4:	movs	r0, #0
    6ba6:	strb	r0, [r5, #0]
  return 0;
    6ba8:	b.n	6b48 <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

00006bac <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    6bac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    6bb0:	movs	r5, #0
    6bb2:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    6bb4:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    6bb6:	mov	r6, r0
    6bb8:	mov	r8, r1
    6bba:	mov	r7, r2
    6bbc:	str	r5, [sp, #4]
  if (!isOpen()) {
    6bbe:	cbz	r3, 6bda <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    6bc0:	ldrb	r3, [r0, #3]
    6bc2:	cbnz	r3, 6bce <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    6bc4:	bl	6b2a <FatFile::getSFN(char*, unsigned int)>
}
    6bc8:	add	sp, #44	; 0x2c
    6bca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    6bce:	mov	r1, r0
    6bd0:	add	r0, sp, #4
    6bd2:	bl	6dc2 <FatFile::openCluster(FatFile*)>
    6bd6:	cmp	r0, #0
    6bd8:	bne.n	6c86 <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    6bda:	movs	r0, #0
    6bdc:	strb.w	r0, [r8]
  return 0;
    6be0:	b.n	6bc8 <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    6be2:	ldrh	r1, [r6, #4]
    6be4:	add	r0, sp, #4
    6be6:	sub.w	r1, r1, r9
    6bea:	uxth	r1, r1
    6bec:	bl	6ae8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    6bf0:	mov	sl, r0
    6bf2:	cmp	r0, #0
    6bf4:	beq.n	6bda <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6bf6:	ldrb	r3, [r0, #11]
    6bf8:	cmp	r3, #15
    6bfa:	bne.n	6bda <FatFile::getName8(char*, unsigned int)+0x2e>
    6bfc:	ldrb	r3, [r0, #0]
    6bfe:	and.w	r3, r3, #31
    6c02:	cmp	fp, r3
    6c04:	bne.n	6bda <FatFile::getName8(char*, unsigned int)+0x2e>
    6c06:	mov.w	fp, #0
      uint16_t c = getLfnChar(ldir, i);
    6c0a:	uxtb.w	r2, fp
    6c0e:	mov	r1, sl
    6c10:	mov	r0, r6
    6c12:	bl	6b02 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    6c16:	cbz	r5, 6c62 <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    6c18:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6c1c:	uxth	r2, r2
    6c1e:	cmp.w	r2, #1024	; 0x400
    6c22:	bcs.n	6bda <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6c24:	ldr	r3, [pc, #108]	; (6c94 <FatFile::getName8(char*, unsigned int)+0xe8>)
    6c26:	ubfx	r0, r0, #0, #10
    6c2a:	and.w	r5, r3, r5, lsl #10
    6c2e:	orrs	r0, r5
    6c30:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6c34:	mov	r1, r4
    6c36:	mov	r2, r7
    6c38:	bl	526e <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6c3c:	mov	r4, r0
    6c3e:	cmp	r0, #0
    6c40:	beq.n	6bda <FatFile::getName8(char*, unsigned int)+0x2e>
    6c42:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    6c44:	add.w	fp, fp, #1
    6c48:	cmp.w	fp, #13
    6c4c:	bne.n	6c0a <FatFile::getName8(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6c4e:	add.w	r9, r9, #1
    6c52:	uxth.w	r9, r9
    6c56:	uxtb.w	fp, r9
    6c5a:	ldrb	r3, [r6, #3]
    6c5c:	cmp	r3, fp
    6c5e:	bcs.n	6be2 <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    6c60:	b.n	6c72 <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    6c62:	add.w	r2, r0, #10240	; 0x2800
    6c66:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    6c68:	cmp.w	r2, #2048	; 0x800
    6c6c:	bcc.n	6c7c <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    6c6e:	cmp	r0, #0
    6c70:	bne.n	6c34 <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    6c72:	movs	r3, #0
  return str - name;
    6c74:	sub.w	r0, r4, r8
  *str = '\0';
    6c78:	strb	r3, [r4, #0]
  return str - name;
    6c7a:	b.n	6bc8 <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    6c7c:	cmp.w	r2, #1024	; 0x400
    6c80:	bcs.n	6bda <FatFile::getName8(char*, unsigned int)+0x2e>
    6c82:	mov	r5, r0
    6c84:	b.n	6c44 <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6c86:	subs	r7, #1
  char* str = name;
    6c88:	mov	r4, r8
    6c8a:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6c8e:	add	r7, r8
    6c90:	b.n	6c56 <FatFile::getName8(char*, unsigned int)+0xaa>
    6c92:	nop
    6c94:	.word	0x000ffc00

00006c98 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    6c98:	b.w	6bac <FatFile::getName8(char*, unsigned int)>

00006c9c <FatFile::openRoot(FatVolume*) [clone .part.0]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    6c9c:	push	{r3, r4, r5, lr}
    6c9e:	mov	r5, r1
    6ca0:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    6ca2:	movs	r2, #36	; 0x24
    6ca4:	movs	r1, #0
    6ca6:	bl	9f44 <memset>

  m_vol = vol;
    6caa:	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartSector;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
    6cac:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    6cae:	cmp	r3, #16
    6cb0:	beq.n	6cba <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1e>
    6cb2:	cmp	r3, #32
    6cb4:	beq.n	6cc4 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    6cb6:	cmp	r3, #12
    6cb8:	bne.n	6cc8 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x2c>
    6cba:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    6cbc:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    6cbe:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6cc0:	strb	r0, [r4, #2]
  return true;

 fail:
  return false;
}
    6cc2:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    6cc4:	movs	r3, #64	; 0x40
    6cc6:	b.n	6cbc <FatFile::openRoot(FatVolume*) [clone .part.0]+0x20>
    6cc8:	movs	r0, #0
    6cca:	b.n	6cc2 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x26>

00006ccc <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    6ccc:	push	{r4, lr}
    6cce:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6cd0:	adds	r0, #40	; 0x28
    6cd2:	bl	5388 <FsCache::sync()>
    6cd6:	cbz	r0, 6cee <FatPartition::cacheSync()+0x22>
    6cd8:	add.w	r0, r4, #568	; 0x238
    6cdc:	bl	5388 <FsCache::sync()>
    6ce0:	cbz	r0, 6cee <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6ce2:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    6ce4:	ldr	r3, [r0, #0]
  }
    6ce6:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6cea:	ldr	r3, [r3, #32]
    6cec:	bx	r3
  }
    6cee:	movs	r0, #0
    6cf0:	pop	{r4, pc}

00006cf2 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    6cf2:	mov	r2, r0
bool FatFile::addCluster() {
    6cf4:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    6cf6:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    6cfa:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    6cfc:	ldr	r0, [r0, #8]
    6cfe:	mov	r1, r5
    6d00:	bl	7aa0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    6d04:	cbz	r0, 6d18 <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6d06:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    6d08:	cbnz	r5, 6d1a <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6d0a:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6d0e:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6d10:	ldrb	r3, [r4, #2]
    6d12:	orn	r3, r3, #127	; 0x7f
    6d16:	strb	r3, [r4, #2]
}
    6d18:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    6d1a:	adds	r5, #1
    6d1c:	ldr	r2, [r4, #16]
    6d1e:	cmp	r2, r5
    6d20:	beq.n	6d10 <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6d22:	bic.w	r3, r3, #64	; 0x40
    6d26:	b.n	6d0e <FatFile::addCluster()+0x1c>

00006d28 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    6d28:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    6d2a:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    6d2c:	mov	r4, r0
  if (isRootFixed()) {
    6d2e:	ands.w	r5, r5, #32
    6d32:	beq.n	6d3a <FatFile::addDirCluster()+0x12>
  return false;
    6d34:	movs	r6, #0
}
    6d36:	mov	r0, r6
    6d38:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    6d3a:	ldr	r2, [r0, #20]
    6d3c:	ldr	r3, [pc, #84]	; (6d94 <FatFile::addDirCluster()+0x6c>)
    6d3e:	cmp	r2, r3
    6d40:	bcs.n	6d34 <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    6d42:	bl	6cf2 <FatFile::addCluster()>
    6d46:	mov	r6, r0
    6d48:	cmp	r0, #0
    6d4a:	beq.n	6d34 <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    6d4c:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6d4e:	ldr	r3, [r4, #16]
    6d50:	ldrb	r1, [r2, #6]
    6d52:	subs	r3, #2
    6d54:	ldr	r7, [r2, #20]
    6d56:	lsls	r3, r1
    6d58:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    6d5a:	ldr	r0, [r4, #8]
    6d5c:	uxtb	r1, r5
    6d5e:	ldrb	r3, [r0, #4]
    6d60:	cmp	r3, r1
    6d62:	bhi.n	6d76 <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    6d64:	ldrb	r2, [r0, #6]
    6d66:	mov.w	r3, #512	; 0x200
    6d6a:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    6d6c:	ldr	r2, [r4, #20]
    6d6e:	uxtah	r3, r2, r3
    6d72:	str	r3, [r4, #20]
  return true;
    6d74:	b.n	6d36 <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    6d76:	movs	r2, #5
    6d78:	add	r1, r7
    6d7a:	adds	r0, #40	; 0x28
    if (!pc) {
    6d7c:	adds	r5, #1
    6d7e:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
    6d82:	cmp	r0, #0
    6d84:	beq.n	6d34 <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    6d86:	mov.w	r2, #512	; 0x200
    6d8a:	movs	r1, #0
    6d8c:	bl	9f44 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    6d90:	b.n	6d5a <FatFile::addDirCluster()+0x32>
    6d92:	nop
    6d94:	.word	0x001ffe00

00006d98 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    6d98:	push	{r4, lr}
    6d9a:	mov	r4, r0
    6d9c:	ldr	r0, [r0, #8]
    6d9e:	mov	r2, r1
    6da0:	adds	r0, #40	; 0x28
    6da2:	ldr	r1, [r4, #24]
    6da4:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6da8:	cbz	r0, 6db4 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    6daa:	ldrh	r3, [r4, #4]
    6dac:	and.w	r3, r3, #15
    6db0:	add.w	r0, r0, r3, lsl #5
}
    6db4:	pop	{r4, pc}

00006db6 <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    6db6:	ldrb	r3, [r0, #0]
    6db8:	cbnz	r3, 6dbe <FatFile::openRoot(FatVolume*)+0x8>
    6dba:	b.w	6c9c <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    6dbe:	movs	r0, #0
    6dc0:	bx	lr

00006dc2 <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    6dc2:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    6dc4:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    6dc6:	mov	r4, r0
    6dc8:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    6dca:	cbnz	r3, 6dd6 <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    6dcc:	ldr	r1, [r1, #8]
}
    6dce:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    6dd2:	b.w	6db6 <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    6dd6:	movs	r2, #36	; 0x24
    6dd8:	movs	r1, #0
    6dda:	bl	9f44 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    6dde:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6de0:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6de2:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6de4:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    6de6:	ldr	r3, [r5, #8]
    6de8:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    6dea:	ldr	r3, [r5, #12]
    6dec:	str	r3, [r4, #32]
}
    6dee:	pop	{r3, r4, r5, pc}

00006df0 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    6df0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6df4:	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    6df8:	ldrb	r3, [r0, #2]
    6dfa:	mov	r4, r0
    6dfc:	sub	sp, #12
    6dfe:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    6e00:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    6e02:	mov	r5, r2
  if (!isReadable()) {
    6e04:	bpl.n	6eea <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    6e06:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    6e08:	lsls	r1, r3, #28
    6e0a:	bpl.n	6e34 <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6e0c:	ldr	r3, [r4, #28]
    6e0e:	ldr	r2, [r4, #20]
    6e10:	subs	r3, r3, r2
    6e12:	cmp	r5, r3
    6e14:	it	cs
    6e16:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6e18:	add.w	r3, r4, #16
  toRead = nbyte;
    6e1c:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    6e1e:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6e22:	vmov	s16, r3
  while (toRead) {
    6e26:	cbnz	r6, 6e46 <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    6e28:	subs	r0, r5, r6

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    6e2a:	add	sp, #12
    6e2c:	vpop	{d8}
    6e30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    6e34:	lsls	r2, r3, #26
    6e36:	bpl.n	6e18 <FatFile::read(void*, unsigned int)+0x28>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    6e38:	ldr	r3, [r4, #8]
    6e3a:	ldrh	r2, [r3, #10]
    6e3c:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    6e3e:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    6e42:	uxth	r3, r3
    6e44:	b.n	6e12 <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    6e46:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6e48:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    6e4a:	lsls	r3, r2, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6e4c:	ldr	r0, [r4, #8]
    6e4e:	ubfx	fp, r7, #0, #9
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    6e52:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    6e56:	bpl.n	6e90 <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart()
    6e58:	ldr	r2, [r0, #32]
    6e5a:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    6e5c:	ldr.w	sl, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    6e60:	cmp.w	fp, #0
    6e64:	bne.n	6ef8 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    6e66:	cmp.w	r6, #512	; 0x200
    6e6a:	bcc.n	6ef8 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    6e6c:	ldr.w	r2, [sl, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    6e70:	cmp	r1, r2
    6e72:	beq.n	6ef8 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6e74:	cmp.w	r6, #1024	; 0x400
    6e78:	bcs.n	6f28 <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    6e7a:	ldr.w	r0, [sl, #44]	; 0x2c
    6e7e:	mov	r2, r8
    6e80:	ldr	r3, [r0, #0]
    6e82:	ldr	r3, [r3, #16]
    6e84:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    6e86:	cmp	r0, #0
    6e88:	beq.n	6eea <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    6e8a:	mov.w	r7, #512	; 0x200
    6e8e:	b.n	6f1c <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    6e90:	ldrb.w	r9, [r0, #5]
    6e94:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    6e98:	cmp.w	fp, #0
    6e9c:	bne.n	6eb0 <FatFile::read(void*, unsigned int)+0xc0>
    6e9e:	cmp.w	r9, #0
    6ea2:	bne.n	6eb0 <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    6ea4:	cbnz	r7, 6ec2 <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6ea6:	lsls	r2, r2, #25
    return m_rootDirStart;
    6ea8:	ite	mi
    6eaa:	ldrmi	r2, [r0, #32]
    6eac:	ldrpl	r2, [r4, #32]
    6eae:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6eb0:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6eb2:	ldr	r1, [r4, #16]
    6eb4:	ldrb	r0, [r2, #6]
    6eb6:	subs	r1, #2
    6eb8:	ldr	r2, [r2, #20]
    6eba:	lsls	r1, r0
    6ebc:	add	r1, r2
    6ebe:	add	r1, r9
    6ec0:	b.n	6e5c <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    6ec2:	lsls	r3, r2, #28
          m_curCluster++;
    6ec4:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    6ec6:	bpl.n	6ed4 <FatFile::read(void*, unsigned int)+0xe4>
    6ec8:	ldrb	r2, [r4, #2]
    6eca:	lsls	r7, r2, #25
    6ecc:	bpl.n	6ed4 <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    6ece:	adds	r1, #1
    6ed0:	str	r1, [r4, #16]
    6ed2:	b.n	6eb0 <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6ed4:	vmov	r2, s16
    6ed8:	bl	7912 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6edc:	cmp	r0, #0
    6ede:	blt.n	6eea <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    6ee0:	bne.n	6eb0 <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    6ee2:	ldrb	r3, [r4, #0]
    6ee4:	tst.w	r3, #112	; 0x70
    6ee8:	bne.n	6e28 <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    6eea:	ldrb	r3, [r4, #1]
  return -1;
    6eec:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    6ef0:	orr.w	r3, r3, #2
    6ef4:	strb	r3, [r4, #1]
  return -1;
    6ef6:	b.n	6e2a <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    6ef8:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    6efc:	movs	r2, #0
    6efe:	add.w	r0, sl, #40	; 0x28
    6f02:	cmp	r7, r6
    6f04:	it	cs
    6f06:	movcs	r7, r6
    6f08:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6f0c:	cmp	r0, #0
    6f0e:	beq.n	6eea <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    6f10:	add.w	r1, r0, fp
    6f14:	mov	r2, r7
    6f16:	mov	r0, r8
    6f18:	bl	9f88 <memcpy>
    m_curPosition += n;
    6f1c:	ldr	r3, [r4, #20]
    dst += n;
    6f1e:	add	r8, r7
    toRead -= n;
    6f20:	subs	r6, r6, r7
    m_curPosition += n;
    6f22:	add	r3, r7
    6f24:	str	r3, [r4, #20]
    toRead -= n;
    6f26:	b.n	6e26 <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    6f28:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    6f2a:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    6f2c:	lsls	r0, r0, #26
    6f2e:	bmi.n	6f3e <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    6f30:	ldrb.w	r0, [sl, #4]
    6f34:	sub.w	r0, r0, r9
    6f38:	cmp	r3, r0
    6f3a:	it	cs
    6f3c:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    6f3e:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    6f40:	mov.w	r7, r3, lsl #9
    6f44:	bls.n	6f5a <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    6f46:	ldr.w	r0, [sl, #44]	; 0x2c
    6f4a:	ldr	r2, [r0, #0]
    6f4c:	ldr.w	sl, [r2, #20]
    6f50:	mov	r2, r8
    6f52:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    6f54:	cmp	r0, #0
    6f56:	bne.n	6f1c <FatFile::read(void*, unsigned int)+0x12c>
    6f58:	b.n	6eea <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    6f5a:	adds	r0, r1, r3
    6f5c:	cmp	r2, r0
    6f5e:	bcs.n	6f46 <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    6f60:	add.w	r0, sl, #40	; 0x28
    6f64:	strd	r1, r3, [sp]
    6f68:	bl	5388 <FsCache::sync()>
    6f6c:	ldrd	r1, r3, [sp]
    6f70:	cmp	r0, #0
    6f72:	bne.n	6f46 <FatFile::read(void*, unsigned int)+0x156>
    6f74:	b.n	6eea <FatFile::read(void*, unsigned int)+0xfa>

00006f76 <FatFile::peek()>:
int FatFile::peek() {
    6f76:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    6f78:	movs	r2, #1
    6f7a:	add.w	r1, sp, #7
    6f7e:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    6f80:	ldrd	r5, r6, [r0, #16]
    6f84:	bl	6df0 <FatFile::read(void*, unsigned int)>
    6f88:	cmp	r0, #1
    6f8a:	ite	eq
    6f8c:	ldrbeq.w	r0, [sp, #7]
    6f90:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    6f94:	strd	r5, r6, [r4, #16]
}
    6f98:	add	sp, #8
    6f9a:	pop	{r4, r5, r6, pc}

00006f9c <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6f9c:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    6f9e:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    6fa2:	push	{r0, r1, r2, r4, r5, lr}
    6fa4:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6fa6:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    6faa:	beq.n	6fae <FatFile::readDirCache(bool)+0x12>
    6fac:	cbnz	r1, 6fd6 <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    6fae:	movs	r2, #1
    6fb0:	add.w	r1, sp, #7
    6fb4:	mov	r0, r4
    6fb6:	bl	6df0 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    6fba:	sxtb	r0, r0
    6fbc:	cmp	r0, #1
    6fbe:	beq.n	6fc6 <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    6fc0:	movs	r0, #0
}
    6fc2:	add	sp, #12
    6fc4:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    6fc6:	ldr	r3, [r4, #20]
    6fc8:	adds	r3, #31
    return m_buffer;
    6fca:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    6fcc:	str	r3, [r4, #20]
    6fce:	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6fd0:	add.w	r0, r0, r5, lsl #5
    6fd4:	b.n	6fc2 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    6fd6:	adds	r3, #32
    6fd8:	b.n	6fca <FatFile::readDirCache(bool)+0x2e>

00006fda <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    6fda:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fde:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    6fe0:	ldrb	r1, [r0, #0]
    6fe2:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    6fe4:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    6fe6:	cbz	r1, 700a <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6fe8:	ldr	r0, [r0, #20]
    6fea:	cmp	r0, r5
    6fec:	beq.n	6ffc <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    6fee:	cbnz	r5, 7000 <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    6ff0:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6ff2:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    6ff4:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6ff6:	bic.w	r3, r3, #32
    6ffa:	strb	r3, [r4, #2]
    return true;
    6ffc:	movs	r0, #1
    6ffe:	b.n	700e <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    7000:	lsls	r3, r1, #28
    7002:	bpl.n	7012 <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    7004:	ldr	r3, [r4, #28]
    7006:	cmp	r3, r5
    7008:	bcs.n	7022 <FatFile::seekSet(unsigned long)+0x48>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    700a:	movs	r0, #0
  m_curCluster = tmp;
    700c:	str	r7, [r4, #16]
}
    700e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    7012:	lsls	r6, r1, #26
    7014:	bpl.n	7022 <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    7016:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    7018:	ldrh	r3, [r3, #10]
    701a:	cmp.w	r5, r3, lsl #5
    701e:	bhi.n	700a <FatFile::seekSet(unsigned long)+0x30>
    7020:	b.n	6ff2 <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7022:	ldr.w	ip, [r4, #8]
    7026:	subs	r6, r5, #1
  if (isContiguous()) {
    7028:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    702a:	ldrb.w	r3, [ip, #6]
    702e:	lsls	r2, r2, #25
    7030:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7034:	uxtb	r3, r3
    7036:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    703a:	bpl.n	7044 <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    703c:	ldr	r3, [r4, #32]
    703e:	add	r3, r6
    7040:	str	r3, [r4, #16]
    goto done;
    7042:	b.n	6ff2 <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    7044:	subs	r2, r0, #1
    7046:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    704a:	cmp	r6, r3
    704c:	bcc.n	7050 <FatFile::seekSet(unsigned long)+0x76>
    704e:	cbnz	r0, 7076 <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7050:	lsls	r3, r1, #25
    return m_rootDirStart;
    7052:	ite	mi
    7054:	ldrmi.w	r3, [ip, #32]
    7058:	ldrpl	r3, [r4, #32]
    705a:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    705c:	add.w	r8, r4, #16
  while (nNew--) {
    7060:	cmp	r6, #0
    7062:	beq.n	6ff2 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7064:	mov	r2, r8
    7066:	ldr	r1, [r4, #16]
    7068:	ldr	r0, [r4, #8]
    706a:	subs	r6, #1
    706c:	bl	7912 <FatPartition::fatGet(unsigned long, unsigned long*)>
    7070:	cmp	r0, #0
    7072:	bgt.n	7060 <FatFile::seekSet(unsigned long)+0x86>
    7074:	b.n	700a <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    7076:	subs	r6, r6, r3
    7078:	b.n	705c <FatFile::seekSet(unsigned long)+0x82>

0000707a <FatFile::rmdir()>:
bool FatFile::rmdir() {
    707a:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    707c:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    707e:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7080:	lsls	r2, r3, #27
    7082:	bpl.n	7098 <FatFile::rmdir()+0x1e>
    seekSet(0);
    7084:	movs	r1, #0
    7086:	bl	6fda <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    708a:	movs	r1, #1
    708c:	mov	r0, r4
    708e:	bl	6f9c <FatFile::readDirCache(bool)>
    if (!dir) {
    7092:	cbnz	r0, 709c <FatFile::rmdir()+0x22>
      if (!getError()) {
    7094:	ldrb	r3, [r4, #1]
    7096:	cbz	r3, 70b0 <FatFile::rmdir()+0x36>
}
    7098:	movs	r0, #0
    709a:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    709c:	ldrb	r3, [r0, #0]
    709e:	cbz	r3, 70b0 <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    70a0:	cmp	r3, #229	; 0xe5
    70a2:	beq.n	708a <FatFile::rmdir()+0x10>
    70a4:	cmp	r3, #46	; 0x2e
    70a6:	beq.n	708a <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    70a8:	ldrb	r3, [r0, #11]
    70aa:	lsls	r3, r3, #28
    70ac:	bmi.n	708a <FatFile::rmdir()+0x10>
    70ae:	b.n	7098 <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    70b0:	movs	r3, #8
  return remove();
    70b2:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    70b4:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    70b6:	ldrb	r3, [r4, #2]
    70b8:	orr.w	r3, r3, #2
    70bc:	strb	r3, [r4, #2]
}
    70be:	ldmia.w	sp!, {r4, lr}
  return remove();
    70c2:	b.w	83cc <FatFile::remove()>

000070c6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    70c6:	push	{r3, r4, r5, r6, r7, lr}
    70c8:	mov	r7, r1
    70ca:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    70cc:	movs	r1, #0
    70ce:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    70d0:	mov	r4, r0
    70d2:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    70d4:	bl	9f44 <memset>
  m_vol = dirFile->m_vol;
    70d8:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    70da:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    70dc:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    70de:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    70e2:	str	r3, [r4, #12]
    70e4:	add.w	r3, r0, #56	; 0x38
  m_vol = dirFile->m_vol;
    70e8:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    70ea:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    70ee:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    70f0:	lsls	r1, r2, #28
    70f2:	bmi.n	716a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    70f4:	and.w	r2, r2, #23
    70f8:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    70fa:	ldrb	r1, [r3, #11]
    70fc:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    7100:	itt	eq
    7102:	orreq.w	r2, r2, #8
    7106:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    7108:	ldrb.w	r2, [sp, #24]
    710c:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    710e:	and.w	r2, r5, #3
    7112:	cmp	r2, #1
    7114:	beq.n	715a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    7116:	cmp	r2, #2
    7118:	beq.n	715e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    711a:	cbnz	r2, 716a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    711c:	lsls	r2, r5, #21
    711e:	bmi.n	716a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    7120:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    7122:	lsls	r7, r2, #30
    7124:	bpl.n	7130 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    7126:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    7128:	lsls	r6, r1, #27
    712a:	bmi.n	716a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    712c:	lsls	r1, r1, #31
    712e:	bmi.n	716a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7130:	and.w	r1, r5, #8
    7134:	orrs	r2, r1
    7136:	strb	r2, [r4, #2]
    return m_sector;
    7138:	ldr	r2, [r0, #52]	; 0x34
                 | getLe16(dir->firstClusterLow);
    713a:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    713c:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    713e:	ldrh	r2, [r3, #20]
    7140:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    7144:	lsls	r2, r5, #21
    7146:	bpl.n	7172 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7148:	cbnz	r1, 7162 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    714a:	ldrb	r3, [r4, #2]
    714c:	orn	r3, r3, #127	; 0x7f
    7150:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7152:	lsls	r3, r5, #17
    7154:	bmi.n	717a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    7156:	movs	r0, #1
}
    7158:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    715a:	movs	r2, #2
    715c:	b.n	7122 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    715e:	movs	r2, #3
    7160:	b.n	7122 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7162:	bl	7b22 <FatPartition::freeChain(unsigned long)>
    7166:	cmp	r0, #0
    7168:	bne.n	714a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    716a:	movs	r0, #0
    716c:	strb	r0, [r4, #0]
  m_flags = 0;
    716e:	strb	r0, [r4, #2]
  return false;
    7170:	b.n	7158 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    7172:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    7174:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    7176:	str	r3, [r4, #28]
    7178:	b.n	7152 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    717a:	ldr	r1, [r4, #28]
    717c:	mov	r0, r4
    717e:	bl	6fda <FatFile::seekSet(unsigned long)>
    7182:	cmp	r0, #0
    7184:	bne.n	7156 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    7186:	b.n	716a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

00007188 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7188:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    718c:	mov	r3, r2
  bool isOpen() const {return m_attributes;}
    718e:	ldrb	r2, [r0, #0]
    7190:	sub	sp, #20
    7192:	mov	r7, r0
    7194:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7196:	cmp	r2, #0
    7198:	bne.n	7220 <FatFile::openNext(FatFile*, int)+0x98>
    719a:	ldrb	r2, [r1, #0]
    719c:	tst.w	r2, #112	; 0x70
    71a0:	beq.n	7220 <FatFile::openNext(FatFile*, int)+0x98>
    71a2:	ldr	r4, [r1, #20]
    71a4:	ands.w	r4, r4, #31
    71a8:	bne.n	7220 <FatFile::openNext(FatFile*, int)+0x98>
    71aa:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    71ac:	movs	r1, #0
    71ae:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    71b0:	ldr.w	r8, [r6, #20]
    71b4:	str	r3, [sp, #12]
    71b6:	bl	6f9c <FatFile::readDirCache(bool)>
    if (!dir) {
    71ba:	cbz	r0, 7220 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    71bc:	ldrb	r1, [r0, #0]
    71be:	cbz	r1, 7220 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    71c0:	cmp	r1, #46	; 0x2e
    71c2:	ldr	r3, [sp, #12]
    71c4:	beq.n	720a <FatFile::openNext(FatFile*, int)+0x82>
    71c6:	cmp	r1, #229	; 0xe5
    71c8:	beq.n	720a <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    71ca:	ldrb	r2, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    71cc:	ands.w	ip, r2, #8
    71d0:	bne.n	720e <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    71d2:	cbz	r4, 71f6 <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    71d4:	subs	r1, r0, #1
    71d6:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    71da:	mov.w	r2, ip, lsl #7
    71de:	ldrb.w	r0, [r1, #1]!
    71e2:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    71e6:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    71e8:	uxtab	r2, r0, r2
    71ec:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    71f0:	bne.n	71da <FatFile::openNext(FatFile*, int)+0x52>
    71f2:	cmp	r9, ip
    71f4:	bne.n	7220 <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    71f6:	ubfx	r2, r8, #5, #16
    71fa:	mov	r1, r6
    71fc:	mov	r0, r7
    71fe:	str	r4, [sp, #0]
    7200:	bl	70c6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    7204:	add	sp, #20
    7206:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    720a:	movs	r4, #0
    720c:	b.n	71ac <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isLongName(dir)) {
    720e:	cmp	r2, #15
    7210:	bne.n	720a <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    7212:	lsls	r2, r1, #25
    7214:	bpl.n	71ac <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    7216:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    721a:	ldrb.w	r9, [r0, #13]
    721e:	b.n	71ac <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    7220:	movs	r0, #0
    7222:	b.n	7204 <FatFile::openNext(FatFile*, int)+0x7c>

00007224 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    7224:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7226:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    7228:	mov	r4, r0
  if (!isOpen()) {
    722a:	cmp	r3, #0
    722c:	beq.n	729a <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    722e:	ldrsb.w	r3, [r0, #2]
    7232:	cmp	r3, #0
    7234:	bge.n	728e <FatFile::sync()+0x6a>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7236:	movs	r1, #1
    7238:	bl	6d98 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    723c:	mov	r5, r0
    723e:	cbnz	r0, 724e <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7240:	ldrb	r3, [r4, #1]
  return false;
    7242:	movs	r0, #0
  m_error |= WRITE_ERROR;
    7244:	orr.w	r3, r3, #1
    7248:	strb	r3, [r4, #1]
}
    724a:	add	sp, #12
    724c:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    724e:	ldrb	r3, [r0, #0]
    7250:	cmp	r3, #229	; 0xe5
    7252:	beq.n	7240 <FatFile::sync()+0x1c>
    if (isFile()) {
    7254:	ldrb	r3, [r4, #0]
    7256:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    7258:	itt	mi
    725a:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    725c:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    725e:	ldr	r3, [r4, #32]
    7260:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7262:	lsrs	r3, r3, #16
    7264:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    7266:	ldr	r3, [pc, #56]	; (72a0 <FatFile::sync()+0x7c>)
    7268:	ldr	r3, [r3, #0]
    726a:	cbz	r3, 7286 <FatFile::sync()+0x62>
      FsDateTime::callback(&date, &time, &ms10);
    726c:	add.w	r2, sp, #3
    7270:	add.w	r1, sp, #6
    7274:	add	r0, sp, #4
    7276:	blx	r3
      setLe16(dir->modifyDate, date);
    7278:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    727c:	strh	r3, [r5, #24]
    727e:	strh	r3, [r5, #18]
    7280:	ldrh.w	r3, [sp, #6]
    7284:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7286:	ldrb	r3, [r4, #2]
    7288:	and.w	r3, r3, #127	; 0x7f
    728c:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    728e:	ldr	r0, [r4, #8]
    7290:	bl	6ccc <FatPartition::cacheSync()>
    7294:	cmp	r0, #0
    7296:	beq.n	7240 <FatFile::sync()+0x1c>
    7298:	b.n	724a <FatFile::sync()+0x26>
    return true;
    729a:	movs	r0, #1
    729c:	b.n	724a <FatFile::sync()+0x26>
    729e:	nop
    72a0:	.word	0x2002ce50

000072a4 <FatFile::close()>:
bool FatFile::close() {
    72a4:	push	{r4, lr}
    72a6:	mov	r4, r0
  bool rtn = sync();
    72a8:	bl	7224 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    72ac:	movs	r3, #0
    72ae:	strb	r3, [r4, #0]
  m_flags = 0;
    72b0:	strb	r3, [r4, #2]
}
    72b2:	pop	{r4, pc}

000072b4 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    72b4:	push	{r4, r5, r6, r7, lr}
    72b6:	mov	r7, r3
    72b8:	sub	sp, #84	; 0x54
  FatFile() {}
    72ba:	movs	r3, #0
    72bc:	mov	r6, r0
    72be:	mov	r4, r1
    72c0:	str	r2, [sp, #4]
    72c2:	str	r3, [sp, #8]
    72c4:	strh.w	r3, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    72c8:	ldrb	r3, [r0, #0]
    72ca:	cbz	r3, 72d2 <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    72cc:	movs	r0, #0
}
    72ce:	add	sp, #84	; 0x54
    72d0:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    72d2:	ldrb	r3, [r1, #0]
    72d4:	tst.w	r3, #112	; 0x70
    72d8:	beq.n	72cc <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    72da:	ldrb	r3, [r2, #0]
    72dc:	cmp	r3, #47	; 0x2f
    72de:	bne.n	7306 <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    72e0:	ldr	r2, [sp, #4]
    72e2:	ldrb	r3, [r2, #0]
    72e4:	cmp	r3, #47	; 0x2f
    72e6:	beq.n	72f4 <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    72e8:	ldr	r1, [r4, #8]
    if (*path == 0) {
    72ea:	cbnz	r3, 72fa <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    72ec:	mov	r0, r6
    72ee:	bl	6db6 <FatFile::openRoot(FatVolume*)>
    72f2:	b.n	72ce <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    72f4:	adds	r2, #1
    72f6:	str	r2, [sp, #4]
    72f8:	b.n	72e0 <FatFile::open(FatFile*, char const*, int)+0x2c>
  if (isOpen()) {
    72fa:	add	r0, sp, #8
    72fc:	bl	6c9c <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7300:	cmp	r0, #0
    7302:	beq.n	72cc <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    7304:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    7306:	add	r3, sp, #4
    7308:	add	r2, sp, #44	; 0x2c
    730a:	ldr	r1, [sp, #4]
    730c:	mov	r0, r6
    730e:	bl	8320 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7312:	cmp	r0, #0
    7314:	beq.n	72cc <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    7316:	ldr	r3, [sp, #4]
    7318:	ldrb	r3, [r3, #0]
    731a:	cbz	r3, 7344 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    731c:	movs	r3, #0
    731e:	add	r2, sp, #44	; 0x2c
    7320:	mov	r1, r4
    7322:	mov	r0, r6
    7324:	bl	809c <FatFile::open(FatFile*, FatLfn_t*, int)>
    7328:	cmp	r0, #0
    732a:	beq.n	72cc <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    732c:	mov	r5, r6
    732e:	add	r4, sp, #8
    7330:	ldmia	r5!, {r0, r1, r2, r3}
    7332:	stmia	r4!, {r0, r1, r2, r3}
    7334:	ldmia	r5!, {r0, r1, r2, r3}
    7336:	stmia	r4!, {r0, r1, r2, r3}
    7338:	ldr	r3, [r5, #0]
    close();
    733a:	mov	r0, r6
    tmpDir = *this;
    733c:	str	r3, [r4, #0]
    close();
    733e:	bl	72a4 <FatFile::close()>
  while (1) {
    7342:	b.n	7304 <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    7344:	mov	r3, r7
    7346:	add	r2, sp, #44	; 0x2c
    7348:	mov	r1, r4
    734a:	mov	r0, r6
    734c:	bl	809c <FatFile::open(FatFile*, FatLfn_t*, int)>
    7350:	b.n	72ce <FatFile::open(FatFile*, char const*, int)+0x1a>

00007352 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    7352:	cbz	r1, 735c <FatFile::open(FatVolume*, char const*, int)+0xa>
    7354:	add.w	r1, r1, #1096	; 0x448
    7358:	b.w	72b4 <FatFile::open(FatFile*, char const*, int)>
}
    735c:	mov	r0, r1
    735e:	bx	lr

00007360 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    7360:	push	{r4, r5, r6, lr}
    7362:	mov	r6, r0
    7364:	mov	r4, r1
  if (!sync()) {
    7366:	bl	7224 <FatFile::sync()>
    736a:	mov	r5, r0
    736c:	cbnz	r0, 7374 <FatFile::dirEntry(DirFat_t*)+0x14>
  return false;
    736e:	movs	r5, #0
}
    7370:	mov	r0, r5
    7372:	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7374:	movs	r1, #0
    7376:	mov	r0, r6
    7378:	bl	6d98 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    737c:	mov	r3, r0
    737e:	cmp	r0, #0
    7380:	beq.n	736e <FatFile::dirEntry(DirFat_t*)+0xe>
  memcpy(dst, dir, sizeof(DirFat_t));
    7382:	mov	r1, r4
    7384:	add.w	r2, r0, #32
    7388:	ldr.w	r0, [r3], #4
    738c:	cmp	r3, r2
    738e:	str.w	r0, [r1], #4
    7392:	bne.n	7388 <FatFile::dirEntry(DirFat_t*)+0x28>
    7394:	b.n	7370 <FatFile::dirEntry(DirFat_t*)+0x10>

00007396 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7396:	push	{r4, r5, lr}
    7398:	sub	sp, #36	; 0x24
    739a:	mov	r5, r1
    739c:	mov	r4, r2
  if (!dirEntry(&dir)) {
    739e:	mov	r1, sp
    73a0:	bl	7360 <FatFile::dirEntry(DirFat_t*)>
    73a4:	cbz	r0, 73b2 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    73a6:	ldrh.w	r3, [sp, #16]
    73aa:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    73ac:	ldrh.w	r3, [sp, #14]
    73b0:	strh	r3, [r4, #0]
}
    73b2:	add	sp, #36	; 0x24
    73b4:	pop	{r4, r5, pc}

000073b6 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    73b6:	push	{r4, r5, lr}
    73b8:	sub	sp, #36	; 0x24
    73ba:	mov	r5, r1
    73bc:	mov	r4, r2
  if (!dirEntry(&dir)) {
    73be:	mov	r1, sp
    73c0:	bl	7360 <FatFile::dirEntry(DirFat_t*)>
    73c4:	cbz	r0, 73d2 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    73c6:	ldrh.w	r3, [sp, #24]
    73ca:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    73cc:	ldrh.w	r3, [sp, #22]
    73d0:	strh	r3, [r4, #0]
}
    73d2:	add	sp, #36	; 0x24
    73d4:	pop	{r4, r5, pc}

000073d6 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    73d6:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    73d8:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    73da:	sub	sp, #36	; 0x24
    73dc:	mov	r4, r0
    73de:	mov	r6, r1
  if (!parent->isDir()) {
    73e0:	tst.w	r3, #112	; 0x70
    73e4:	bne.n	73ec <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    73e6:	movs	r0, #0
}
    73e8:	add	sp, #36	; 0x24
    73ea:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    73ec:	movw	r3, #2562	; 0xa02
    73f0:	bl	809c <FatFile::open(FatFile*, FatLfn_t*, int)>
    73f4:	cmp	r0, #0
    73f6:	beq.n	73e6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    73f8:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    73fa:	movs	r5, #16
  if (!addDirCluster()) {
    73fc:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    73fe:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7400:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    7402:	bl	6d28 <FatFile::addDirCluster()>
    7406:	cmp	r0, #0
    7408:	beq.n	73e6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    740a:	ldr	r3, [r4, #16]
    seekSet(0);
    740c:	movs	r1, #0
    740e:	mov	r0, r4
    7410:	str	r3, [r4, #32]
    7412:	bl	6fda <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    7416:	mov	r0, r4
    7418:	bl	7224 <FatFile::sync()>
    741c:	cmp	r0, #0
    741e:	beq.n	73e6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7420:	mov	r1, r7
    7422:	mov	r0, r4
    7424:	bl	6d98 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7428:	cmp	r0, #0
    742a:	beq.n	73e6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    742c:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    742e:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    7430:	mov	r3, r0
    7432:	add.w	ip, r0, #32
    7436:	mov	r5, r2
    7438:	ldr	r0, [r3, #0]
    743a:	adds	r3, #8
    743c:	ldr.w	r1, [r3, #-4]
    7440:	mov	r7, r2
    7442:	cmp	r3, ip
    7444:	stmia	r7!, {r0, r1}
    7446:	mov	r2, r7
    7448:	bne.n	7438 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    744a:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    744e:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7450:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    7452:	movs	r2, #1
    dot.name[i] = ' ';
    7454:	str.w	r3, [sp, #1]
    7458:	adds	r0, #40	; 0x28
    745a:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    745e:	subs	r1, #2
    7460:	strh.w	r3, [sp, #9]
    7464:	ldrb.w	r3, [r0, #-34]
    7468:	lsls	r1, r3
    746a:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    746e:	add	r1, r3
    7470:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7474:	mov	r3, r0
    7476:	cmp	r0, #0
    7478:	beq.n	73e6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    747a:	movs	r2, #46	; 0x2e
    747c:	mov	ip, r5
    747e:	mov	r7, r0
    7480:	add.w	lr, sp, #32
    7484:	strb.w	r2, [sp]
    7488:	mov	r2, ip
    748a:	adds	r7, #8
    748c:	ldmia	r2!, {r0, r1}
    748e:	cmp	r2, lr
    7490:	str.w	r0, [r7, #-8]
    7494:	str.w	r1, [r7, #-4]
    7498:	mov	ip, r2
    749a:	bne.n	7488 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    749c:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    749e:	adds	r3, #32
  dot.name[1] = '.';
    74a0:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    74a4:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    74a6:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    74a8:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    74aa:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    74ae:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    74b0:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    74b4:	mov	r5, r2
    74b6:	adds	r3, #8
    74b8:	ldmia	r5!, {r0, r1}
    74ba:	cmp	r5, r6
    74bc:	str.w	r0, [r3, #-8]
    74c0:	str.w	r1, [r3, #-4]
    74c4:	mov	r2, r5
    74c6:	bne.n	74b4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    74c8:	ldr	r0, [r4, #8]
    74ca:	bl	6ccc <FatPartition::cacheSync()>
    74ce:	b.n	73e8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

000074d0 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    74d0:	push	{r4, r5, r6, r7, lr}
    74d2:	mov	r7, r3
    74d4:	sub	sp, #84	; 0x54
    74d6:	movs	r3, #0
    74d8:	mov	r6, r0
    74da:	mov	r4, r1
    74dc:	str	r2, [sp, #4]
    74de:	strh.w	r3, [sp, #20]
  FatFile() {}
    74e2:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    74e4:	ldrb	r3, [r0, #0]
    74e6:	cbz	r3, 74ee <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    74e8:	movs	r0, #0
}
    74ea:	add	sp, #84	; 0x54
    74ec:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    74ee:	ldrb	r3, [r1, #0]
    74f0:	tst.w	r3, #112	; 0x70
    74f4:	beq.n	74e8 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    74f6:	ldrb	r3, [r2, #0]
    74f8:	cmp	r3, #47	; 0x2f
    74fa:	bne.n	7512 <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    74fc:	ldr	r2, [sp, #4]
    74fe:	ldrb	r3, [r2, #0]
    7500:	cmp	r3, #47	; 0x2f
    7502:	beq.n	754e <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
  if (isOpen()) {
    7504:	ldr	r1, [r4, #8]
    7506:	add	r0, sp, #44	; 0x2c
    7508:	bl	6c9c <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    750c:	cmp	r0, #0
    750e:	beq.n	74e8 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    7510:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    7512:	add	r3, sp, #4
    7514:	add	r2, sp, #8
    7516:	ldr	r1, [sp, #4]
    7518:	mov	r0, r6
    751a:	bl	8320 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    751e:	cmp	r0, #0
    7520:	beq.n	74e8 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    7522:	ldr	r3, [sp, #4]
    7524:	ldrb	r3, [r3, #0]
    7526:	cbz	r3, 7568 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    7528:	movs	r3, #0
    752a:	add	r2, sp, #8
    752c:	mov	r1, r4
    752e:	mov	r0, r6
    7530:	bl	809c <FatFile::open(FatFile*, FatLfn_t*, int)>
    7534:	cbz	r0, 7554 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    7536:	mov	r5, r6
    7538:	add	r4, sp, #44	; 0x2c
    753a:	ldmia	r5!, {r0, r1, r2, r3}
    753c:	stmia	r4!, {r0, r1, r2, r3}
    753e:	ldmia	r5!, {r0, r1, r2, r3}
    7540:	stmia	r4!, {r0, r1, r2, r3}
    7542:	ldr	r3, [r5, #0]
    close();
    7544:	mov	r0, r6
    tmpDir = *this;
    7546:	str	r3, [r4, #0]
    close();
    7548:	bl	72a4 <FatFile::close()>
  while (1) {
    754c:	b.n	7510 <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    754e:	adds	r2, #1
    7550:	str	r2, [sp, #4]
    7552:	b.n	74fc <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    7554:	cmp	r7, #0
    7556:	beq.n	74e8 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    7558:	add	r2, sp, #8
    755a:	mov	r1, r4
    755c:	mov	r0, r6
    755e:	bl	73d6 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7562:	cmp	r0, #0
    7564:	bne.n	7536 <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    7566:	b.n	74e8 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    7568:	add	r2, sp, #8
    756a:	mov	r1, r4
    756c:	mov	r0, r6
    756e:	bl	73d6 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7572:	b.n	74ea <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

00007574 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7574:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    7578:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    757a:	sub	sp, #108	; 0x6c
    757c:	mov.w	r9, #0
    7580:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    7582:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7586:	mov	r7, r1
    7588:	mov	r8, r2
    758a:	str.w	r9, [sp, #32]
    758e:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    7592:	bne.n	759c <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    7594:	movs	r0, #0
}
    7596:	add	sp, #108	; 0x6c
    7598:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    759c:	ldr	r2, [r0, #8]
    759e:	ldr	r3, [r1, #8]
    75a0:	cmp	r2, r3
    75a2:	bne.n	7594 <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    75a4:	mov	r6, r4
  sync();
    75a6:	bl	7224 <FatFile::sync()>
  oldFile = *this;
    75aa:	add	r5, sp, #68	; 0x44
    75ac:	ldmia	r6!, {r0, r1, r2, r3}
    75ae:	stmia	r5!, {r0, r1, r2, r3}
    75b0:	ldmia	r6!, {r0, r1, r2, r3}
    75b2:	stmia	r5!, {r0, r1, r2, r3}
    75b4:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    75b6:	mov	r1, r9
    75b8:	mov	r0, r4
  oldFile = *this;
    75ba:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    75bc:	bl	6d98 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    75c0:	cmp	r0, #0
    75c2:	beq.n	7594 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    75c4:	mov	r2, sp
    75c6:	mov	r3, r0
    75c8:	add.w	ip, r0, #32
    75cc:	mov	r5, r2
    75ce:	ldr	r0, [r3, #0]
    75d0:	adds	r3, #8
    75d2:	ldr.w	r1, [r3, #-4]
    75d6:	mov	r6, r2
    75d8:	cmp	r3, ip
    75da:	stmia	r6!, {r0, r1}
    75dc:	mov	r2, r6
    75de:	bne.n	75ce <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    75e0:	ldrb	r3, [r4, #0]
    75e2:	add	r6, sp, #32
    75e4:	ands.w	r3, r3, #8
    75e8:	beq.n	7600 <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    75ea:	movw	r3, #2561	; 0xa01
    75ee:	mov	r2, r8
    75f0:	mov	r1, r7
    75f2:	mov	r0, r6
    75f4:	bl	72b4 <FatFile::open(FatFile*, char const*, int)>
    75f8:	cmp	r0, #0
    75fa:	beq.n	7594 <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    75fc:	movs	r7, #0
    75fe:	b.n	7610 <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    7600:	mov	r2, r8
    7602:	mov	r1, r7
    7604:	mov	r0, r6
    7606:	bl	74d0 <FatFile::mkdir(FatFile*, char const*, bool)>
    760a:	cmp	r0, #0
    760c:	beq.n	7594 <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    760e:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    7610:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7612:	movs	r1, #1
    7614:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    7616:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    7618:	ldrh.w	r3, [sp, #36]	; 0x24
    761c:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    761e:	ldrb.w	r3, [sp, #35]	; 0x23
    7622:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    7624:	ldr	r3, [sp, #44]	; 0x2c
    7626:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    7628:	movs	r3, #0
    762a:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    762e:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7632:	bl	6d98 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7636:	cmp	r0, #0
    7638:	beq.n	7594 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    763a:	add.w	r3, sp, #13
    763e:	add.w	r2, r0, #13
    7642:	add.w	r1, sp, #29
    7646:	ldr.w	ip, [r3], #4
    764a:	cmp	r3, r1
    764c:	str.w	ip, [r2], #4
    7650:	bne.n	7646 <FatFile::rename(FatFile*, char const*)+0xd2>
    7652:	ldrh	r1, [r3, #0]
    7654:	strh	r1, [r2, #0]
    7656:	ldrb	r3, [r3, #2]
    7658:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    765a:	ldrb.w	r3, [sp, #11]
    765e:	strb	r3, [r0, #11]
  if (dirCluster) {
    7660:	cmp	r7, #0
    7662:	beq.n	76e0 <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    7664:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7666:	subs	r3, r7, #2
    7668:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    766a:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    766c:	ldr.w	r1, [r0, #-20]
    7670:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    7672:	movs	r2, #0
    7674:	add	r1, r3
    7676:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    767a:	cmp	r0, #0
    767c:	beq.n	7594 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    767e:	add.w	r2, r0, #32
    7682:	mov	lr, r5
    7684:	add.w	r3, r0, #64	; 0x40
    7688:	ldr	r0, [r2, #0]
    768a:	adds	r2, #8
    768c:	ldr.w	r1, [r2, #-4]
    7690:	mov	ip, lr
    7692:	cmp	r2, r3
    7694:	stmia.w	ip!, {r0, r1}
    7698:	mov	lr, ip
    769a:	bne.n	7688 <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    769c:	mov	r1, r7
    769e:	ldr	r0, [r4, #8]
    76a0:	bl	7b22 <FatPartition::freeChain(unsigned long)>
    76a4:	cmp	r0, #0
    76a6:	beq.w	7594 <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    76aa:	ldr	r0, [r4, #8]
    76ac:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    76ae:	ldr	r1, [r4, #32]
    76b0:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    76b2:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    76b4:	subs	r1, #2
    76b6:	lsls	r1, r3
    76b8:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    76bc:	add	r1, r3
    76be:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    76c2:	cmp	r0, #0
    76c4:	beq.w	7594 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    76c8:	add.w	r3, r0, #32
    76cc:	mov	r2, r5
    76ce:	adds	r3, #8
    76d0:	ldmia	r2!, {r0, r1}
    76d2:	cmp	r2, r6
    76d4:	str.w	r0, [r3, #-8]
    76d8:	str.w	r1, [r3, #-4]
    76dc:	mov	r5, r2
    76de:	bne.n	76cc <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    76e0:	movs	r3, #0
  if (!oldFile.remove()) {
    76e2:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    76e4:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    76e6:	movs	r3, #2
    76e8:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    76ec:	movs	r3, #8
    76ee:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    76f2:	bl	83cc <FatFile::remove()>
    76f6:	cmp	r0, #0
    76f8:	beq.w	7594 <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    76fc:	ldr	r0, [r4, #8]
    76fe:	bl	6ccc <FatPartition::cacheSync()>
    7702:	b.n	7596 <FatFile::rename(FatFile*, char const*)+0x22>

00007704 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    7704:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7708:	ldrb	r3, [r0, #2]
    770a:	mov	r4, r0
    770c:	mov	r9, r1
    770e:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    7710:	lsls	r5, r3, #30
    7712:	bpl.n	774a <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7714:	lsls	r1, r3, #28
    7716:	bmi.n	7740 <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    7718:	ldr	r3, [r4, #20]
    771a:	adds	r3, r3, r7
    771c:	bcs.n	774a <FatFile::write(void const*, unsigned int)+0x46>
    771e:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7720:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    7724:	ldr	r3, [r4, #20]
  while (nToWrite) {
    7726:	cmp.w	r8, #0
    772a:	bne.n	7756 <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    772c:	ldr	r2, [r4, #28]
    772e:	cmp	r2, r3
    7730:	bcs.w	7892 <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    7734:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7736:	ldrb	r3, [r4, #2]
    7738:	orn	r3, r3, #127	; 0x7f
    773c:	strb	r3, [r4, #2]
    773e:	b.n	789c <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    7740:	ldr	r1, [r0, #28]
    7742:	bl	6fda <FatFile::seekSet(unsigned long)>
    7746:	cmp	r0, #0
    7748:	bne.n	7718 <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    774a:	ldrb	r3, [r4, #1]
  return 0;
    774c:	movs	r7, #0
  m_error |= WRITE_ERROR;
    774e:	orr.w	r3, r3, #1
    7752:	strb	r3, [r4, #1]
  return 0;
    7754:	b.n	789c <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    7756:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    7758:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    775c:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    775e:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    7760:	ands.w	r6, r6, r3, lsr #9
    7764:	bne.n	777c <FatFile::write(void const*, unsigned int)+0x78>
    7766:	cbnz	r5, 777c <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    7768:	cmp	r1, #0
    776a:	beq.n	77e4 <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    776c:	ldrb	r2, [r4, #2]
    776e:	lsls	r2, r2, #25
    7770:	bpl.n	77cc <FatFile::write(void const*, unsigned int)+0xc8>
    7772:	ldr	r2, [r4, #28]
    7774:	cmp	r2, r3
    7776:	bls.n	77cc <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    7778:	adds	r1, #1
    777a:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    777c:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7780:	ldr	r1, [r4, #16]
    7782:	ldrb.w	r3, [ip, #6]
    7786:	subs	r1, #2
    7788:	lsls	r1, r3
    778a:	ldr.w	r3, [ip, #20]
    778e:	add	r1, r3
                      + sectorOfCluster;
    7790:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    7792:	cmp	r5, #0
    7794:	bne.n	77fc <FatFile::write(void const*, unsigned int)+0xf8>
    7796:	cmp.w	r8, #512	; 0x200
    779a:	bcc.n	77fc <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    779c:	cmp.w	r8, #1024	; 0x400
    77a0:	ldr.w	r2, [ip, #52]	; 0x34
    77a4:	ldr.w	r0, [ip, #44]	; 0x2c
    77a8:	bcs.n	785c <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    77aa:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    77ac:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    77ae:	ittt	eq
    77b0:	moveq.w	r3, #4294967295
    m_status = 0;
    77b4:	strbeq.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    77b8:	streq.w	r3, [ip, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    77bc:	ldr	r3, [r0, #0]
    77be:	ldr	r3, [r3, #36]	; 0x24
    77c0:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    77c2:	cmp	r0, #0
    77c4:	beq.n	774a <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    77c6:	mov.w	r6, #512	; 0x200
    77ca:	b.n	7846 <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    77cc:	mov	r2, sl
    77ce:	bl	7912 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    77d2:	cmp	r0, #0
    77d4:	blt.n	774a <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    77d6:	bne.n	777c <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    77d8:	mov	r0, r4
    77da:	bl	6cf2 <FatFile::addCluster()>
    77de:	cmp	r0, #0
    77e0:	bne.n	777c <FatFile::write(void const*, unsigned int)+0x78>
    77e2:	b.n	774a <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    77e4:	ldr	r3, [r4, #32]
    77e6:	cbnz	r3, 77f8 <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    77e8:	mov	r0, r4
    77ea:	bl	6cf2 <FatFile::addCluster()>
    77ee:	cmp	r0, #0
    77f0:	beq.n	774a <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    77f2:	ldr	r3, [r4, #16]
    77f4:	str	r3, [r4, #32]
    77f6:	b.n	777c <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    77f8:	str	r3, [r4, #16]
    77fa:	b.n	777c <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    77fc:	rsb	r6, r5, #512	; 0x200
    7800:	cmp	r6, r8
    7802:	it	cs
    7804:	movcs	r6, r8
      if (sectorOffset == 0 &&
    7806:	cbnz	r5, 7854 <FatFile::write(void const*, unsigned int)+0x150>
    7808:	ldr	r2, [r4, #20]
    780a:	ldr	r3, [r4, #28]
    780c:	cmp	r2, r3
    780e:	bcs.n	7858 <FatFile::write(void const*, unsigned int)+0x154>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    7810:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7812:	tst.w	r3, #32
    7816:	ite	eq
    7818:	moveq	r2, #1
    781a:	movne	r2, #5
    return m_cache.prepare(sector, options);
    781c:	add.w	r0, ip, #40	; 0x28
    7820:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7824:	cmp	r0, #0
    7826:	beq.n	774a <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    7828:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    782a:	add	r5, r6
      memcpy(dst, src, n);
    782c:	mov	r2, r6
    782e:	mov	r1, r9
    7830:	bl	9f88 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7834:	cmp.w	r5, #512	; 0x200
    7838:	ldr	r0, [r4, #8]
    783a:	bne.n	7846 <FatFile::write(void const*, unsigned int)+0x142>
    return m_cache.sync();
    783c:	adds	r0, #40	; 0x28
    783e:	bl	5388 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    7842:	cmp	r0, #0
    7844:	beq.n	774a <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    7846:	ldr	r3, [r4, #20]
    src += n;
    7848:	add	r9, r6
    nToWrite -= n;
    784a:	sub.w	r8, r8, r6
    m_curPosition += n;
    784e:	add	r3, r6
    7850:	str	r3, [r4, #20]
    nToWrite -= n;
    7852:	b.n	7724 <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7854:	movs	r2, #1
    7856:	b.n	781c <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7858:	movs	r2, #5
    785a:	b.n	781c <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    785c:	ldrb.w	r3, [ip, #4]
    7860:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    7862:	mov.w	r6, r8, lsr #9
    7866:	cmp	r3, r6
    7868:	it	cs
    786a:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    786c:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    786e:	mov.w	r6, r3, lsl #9
    7872:	bhi.n	7888 <FatFile::write(void const*, unsigned int)+0x184>
    7874:	add.w	lr, r1, r3
    7878:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    787a:	ittt	hi
    787c:	movhi.w	r2, #4294967295
    m_status = 0;
    7880:	strbhi.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7884:	strhi.w	r2, [ip, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    7888:	ldr	r2, [r0, #0]
    788a:	ldr	r5, [r2, #40]	; 0x28
    788c:	mov	r2, r9
    788e:	blx	r5
    7890:	b.n	7842 <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    7892:	ldr	r3, [pc, #16]	; (78a4 <FatFile::write(void const*, unsigned int)+0x1a0>)
    7894:	ldr	r3, [r3, #0]
    7896:	cmp	r3, #0
    7898:	bne.w	7736 <FatFile::write(void const*, unsigned int)+0x32>
}
    789c:	mov	r0, r7
    789e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78a2:	nop
    78a4:	.word	0x2002ce50

000078a8 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    78a8:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    78aa:	cmp.w	r3, #256	; 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    78ae:	push	{r4, r5, lr}
    78b0:	mov	r4, r3
    78b2:	it	cs
    78b4:	movcs.w	r4, #256	; 0x100
  uint16_t *e = p + n;
    78b8:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    78bc:	cmp	r1, r5
    78be:	bcc.n	78c6 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    78c0:	subs	r3, r3, r4
    78c2:	str	r3, [r2, #0]
}
    78c4:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    78c6:	ldrh.w	r0, [r1], #2
    78ca:	cmp	r0, #0
    78cc:	bne.n	78bc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    78ce:	ldr	r0, [r2, #4]
    78d0:	adds	r0, #1
    78d2:	str	r0, [r2, #4]
    78d4:	b.n	78bc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

000078d6 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    78d6:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    78d8:	cmp	r3, #128	; 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    78da:	push	{r4, r5, lr}
    78dc:	mov	r4, r3
    78de:	it	cs
    78e0:	movcs	r4, #128	; 0x80
  uint32_t *e = p + n;
    78e2:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    78e6:	cmp	r1, r5
    78e8:	bcc.n	78f0 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    78ea:	subs	r3, r3, r4
    78ec:	str	r3, [r2, #0]
}
    78ee:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    78f0:	ldr.w	r0, [r1], #4
    78f4:	cmp	r0, #0
    78f6:	bne.n	78e6 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    78f8:	ldr	r0, [r2, #4]
    78fa:	adds	r0, #1
    78fc:	str	r0, [r2, #4]
    78fe:	b.n	78e6 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

00007900 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7900:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    7902:	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7906:	cmp	r3, #2
    7908:	it	eq
    790a:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    790e:	b.w	53d6 <FsCache::prepare(unsigned long, unsigned char)>

00007912 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7912:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7914:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7918:	mov	r6, r0
    791a:	mov	r4, r1
    791c:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    791e:	bhi.n	7928 <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    7920:	mov.w	r0, #4294967295
}
    7924:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7928:	ldr	r3, [r0, #28]
    792a:	cmp	r3, r1
    792c:	bcc.n	7920 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    792e:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7930:	cmp	r3, #32
    7932:	bne.n	795a <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7934:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7936:	movs	r2, #0
    7938:	add.w	r1, r1, r4, lsr #7
    793c:	bl	7900 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7940:	cmp	r0, #0
    7942:	beq.n	7920 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7944:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    7946:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    794a:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    794c:	ldr	r2, [r6, #28]
    794e:	cmp	r2, r3
  return 1;
    7950:	itet	cs
    7952:	movcs	r0, #1
    return 0;
    7954:	movcc	r0, #0
  *value = next;
    7956:	strcs	r3, [r7, #0]
  return 1;
    7958:	b.n	7924 <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    795a:	cmp	r3, #16
    795c:	bne.n	797a <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    795e:	ubfx	r1, r1, #8, #8
    7962:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7964:	movs	r2, #0
    7966:	add	r1, r3
    7968:	bl	7900 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    796c:	cmp	r0, #0
    796e:	beq.n	7920 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7970:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    7972:	and.w	r4, r4, #510	; 0x1fe
    7976:	ldrh	r3, [r0, r4]
    7978:	b.n	794c <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    797a:	cmp	r3, #12
    797c:	bne.n	7920 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    797e:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7982:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7984:	movs	r2, #0
    index += index >> 1;
    7986:	uxtah	r8, r8, r1
    798a:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    798e:	ubfx	r8, r8, #9, #7
    7992:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7994:	mov	r1, r8
    7996:	bl	7900 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    799a:	cmp	r0, #0
    799c:	beq.n	7920 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    799e:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    79a2:	ldrb	r5, [r0, r3]
    index++;
    79a4:	adds	r3, #1
    if (index == m_bytesPerSector) {
    79a6:	cmp.w	r3, #512	; 0x200
    79aa:	bne.n	79be <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    79ac:	movs	r2, #0
    79ae:	add.w	r1, r8, #1
    79b2:	mov	r0, r6
    79b4:	bl	7900 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    79b8:	cmp	r0, #0
    79ba:	beq.n	7920 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    79bc:	movs	r3, #0
    tmp |= pc[index] << 8;
    79be:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    79c0:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    79c2:	orr.w	r3, r5, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    79c6:	ite	mi
    79c8:	lsrmi	r3, r3, #4
    79ca:	ubfxpl	r3, r3, #0, #12
    79ce:	b.n	794c <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

000079d0 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    79d0:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    79d2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79d6:	mov	r8, r0
    79d8:	mov	r4, r1
    79da:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    79dc:	bhi.n	79e4 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    79de:	movs	r0, #0
}
    79e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    79e4:	ldr	r3, [r0, #28]
    79e6:	cmp	r3, r1
    79e8:	bcc.n	79de <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    79ea:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    79ec:	cmp	r3, #32
    79ee:	bne.n	7a0c <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    79f0:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    79f2:	movs	r2, #1
    79f4:	add.w	r1, r1, r4, lsr #7
    79f8:	bl	7900 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    79fc:	cmp	r0, #0
    79fe:	beq.n	79de <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7a00:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    7a02:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    7a06:	str	r5, [r0, r4]
    return true;
    7a08:	movs	r0, #1
    7a0a:	b.n	79e0 <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    7a0c:	cmp	r3, #16
    7a0e:	bne.n	7a2c <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7a10:	ubfx	r1, r1, #8, #8
    7a14:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7a16:	movs	r2, #1
    7a18:	add	r1, r3
    7a1a:	bl	7900 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7a1e:	cmp	r0, #0
    7a20:	beq.n	79de <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7a22:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    7a24:	and.w	r4, r4, #510	; 0x1fe
    7a28:	strh	r5, [r0, r4]
    return true;
    7a2a:	b.n	7a08 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    7a2c:	cmp	r3, #12
    7a2e:	bne.n	79de <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    7a30:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7a34:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7a36:	movs	r2, #1
    index += index >> 1;
    7a38:	uxtah	r7, r7, r1
    7a3c:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7a3e:	ubfx	r7, r7, #9, #7
    7a42:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7a44:	mov	r1, r7
    7a46:	bl	7900 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7a4a:	cmp	r0, #0
    7a4c:	beq.n	79de <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    if (cluster & 1) {
    7a4e:	ands.w	r4, r4, #1
    index &= m_sectorMask;
    7a52:	ubfx	r3, r6, #0, #9
      tmp = (pc[index] & 0XF) | tmp << 4;
    7a56:	itt	ne
    7a58:	lslne	r2, r5, #4
    7a5a:	ldrbne	r1, [r0, r3]
    7a5c:	add.w	r6, r0, r3
    index++;
    7a60:	add.w	r3, r3, #1
      tmp = (pc[index] & 0XF) | tmp << 4;
    7a64:	ittet	ne
    7a66:	andne.w	r2, r2, #240	; 0xf0
    7a6a:	andne.w	r1, r1, #15
    uint8_t tmp = value;
    7a6e:	uxtbeq	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    7a70:	orrne	r2, r1
    if (index == m_bytesPerSector) {
    7a72:	cmp.w	r3, #512	; 0x200
    pc[index] = tmp;
    7a76:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    7a78:	bne.n	7a8a <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7a7a:	movs	r2, #1
    7a7c:	mov	r0, r8
    7a7e:	adds	r1, r7, r2
    7a80:	bl	7900 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7a84:	cmp	r0, #0
    7a86:	beq.n	79de <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    7a88:	movs	r3, #0
    tmp = value >> 4;
    7a8a:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7a8e:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    7a90:	cbnz	r4, 7a9c <FatPartition::fatPut(unsigned long, unsigned long)+0xcc>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7a92:	ldrb	r3, [r0, r3]
    7a94:	bic.w	r3, r3, #15
    7a98:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    7a9c:	strb	r5, [r2, #0]
    7a9e:	b.n	7a08 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

00007aa0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7aa0:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    7aa4:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7aa6:	mov	r5, r0
    7aa8:	mov	r6, r1
    7aaa:	mov	r8, r2
  if (m_allocSearchStart < current) {
    7aac:	cmp	r4, r1
    7aae:	bcc.n	7ab4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    7ab0:	movs	r7, #1
    7ab2:	b.n	7ab8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    7ab4:	mov	r4, r1
    setStart = false;
    7ab6:	movs	r7, #0
    find++;
    7ab8:	adds	r4, #1
    if (find > m_lastCluster) {
    7aba:	ldr	r3, [r5, #28]
    7abc:	cmp	r3, r4
    7abe:	bcs.n	7ac6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    7ac0:	cbnz	r7, 7af4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    7ac2:	ldr	r4, [r5, #12]
    7ac4:	b.n	7ab0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    7ac6:	cmp	r6, r4
    7ac8:	beq.n	7af4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    7aca:	add	r2, sp, #4
    7acc:	mov	r1, r4
    7ace:	mov	r0, r5
    7ad0:	bl	7912 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7ad4:	cmp	r0, #0
    7ad6:	blt.n	7af4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    7ad8:	beq.n	7ab8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    7ada:	ldr	r3, [sp, #4]
    7adc:	cmp	r3, #0
    7ade:	bne.n	7ab8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    7ae0:	cbz	r7, 7ae4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    7ae2:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    7ae4:	mvn.w	r2, #4026531840	; 0xf0000000
    7ae8:	mov	r1, r4
    7aea:	mov	r0, r5
    7aec:	bl	79d0 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    7af0:	mov	r7, r0
    7af2:	cbnz	r0, 7afe <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    7af4:	movs	r7, #0
}
    7af6:	mov	r0, r7
    7af8:	add	sp, #8
    7afa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    7afe:	cbnz	r6, 7b0c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
    if (m_freeClusterCount >= 0) {
    7b00:	ldr	r3, [r5, #36]	; 0x24
    7b02:	cmp	r3, #0
    7b04:	bge.n	7b1c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
  *next = find;
    7b06:	str.w	r4, [r8]
  return true;
    7b0a:	b.n	7af6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    7b0c:	mov	r2, r4
    7b0e:	mov	r1, r6
    7b10:	mov	r0, r5
    7b12:	bl	79d0 <FatPartition::fatPut(unsigned long, unsigned long)>
    7b16:	cmp	r0, #0
    7b18:	bne.n	7b00 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    7b1a:	b.n	7af4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      m_freeClusterCount += change;
    7b1c:	subs	r3, #1
    7b1e:	str	r3, [r5, #36]	; 0x24
    7b20:	b.n	7b06 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>

00007b22 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    7b22:	push	{r0, r1, r4, r5, r6, lr}
    7b24:	mov	r5, r0
    7b26:	mov	r4, r1
    fg = fatGet(cluster, &next);
    7b28:	add	r2, sp, #4
    7b2a:	mov	r1, r4
    7b2c:	mov	r0, r5
    7b2e:	bl	7912 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7b32:	subs	r6, r0, #0
    7b34:	blt.n	7b62 <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    7b36:	movs	r2, #0
    7b38:	mov	r1, r4
    7b3a:	mov	r0, r5
    7b3c:	bl	79d0 <FatPartition::fatPut(unsigned long, unsigned long)>
    7b40:	cbz	r0, 7b62 <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    7b42:	ldr	r3, [r5, #36]	; 0x24
    7b44:	cmp	r3, #0
      m_freeClusterCount += change;
    7b46:	itt	ge
    7b48:	addge	r3, #1
    7b4a:	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    7b4c:	ldr	r3, [r5, #12]
    7b4e:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    7b50:	itt	hi
    7b52:	addhi.w	r4, r4, #4294967295
    7b56:	strhi	r4, [r5, #12]
    cluster = next;
    7b58:	ldr	r4, [sp, #4]
  } while (fg);
    7b5a:	cmp	r6, #0
    7b5c:	bne.n	7b28 <FatPartition::freeChain(unsigned long)+0x6>
}
    7b5e:	add	sp, #8
    7b60:	pop	{r4, r5, r6, pc}
  return false;
    7b62:	movs	r0, #0
    7b64:	b.n	7b5e <FatPartition::freeChain(unsigned long)+0x3c>
	...

00007b68 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    7b68:	push	{r4, r5, r6, r7, lr}
    7b6a:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    7b6c:	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    7b6e:	sub	sp, #28
  if (m_freeClusterCount >= 0) {
    7b70:	cmp	r0, #0
    7b72:	bge.n	7be6 <FatPartition::freeClusterCount()+0x7e>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    7b74:	ldrb	r3, [r4, #7]
    7b76:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    7b78:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    7b7a:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    7b7c:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    7b80:	beq.n	7bea <FatPartition::freeClusterCount()+0x82>
    return m_status & CACHE_STATUS_DIRTY;
    7b82:	ldrb.w	r2, [r4, #568]	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    7b86:	ldr	r3, [r4, #16]
    if (isDirty() && !sync()) {
    7b88:	lsls	r2, r2, #31
  state.clusters_to_do = m_lastCluster + 1;
    7b8a:	strd	r6, r5, [sp, #16]
    7b8e:	bmi.n	7bee <FatPartition::freeClusterCount()+0x86>
    m_status = 0;
    7b90:	movs	r2, #0
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    7b92:	ldrb	r5, [r4, #7]
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7b94:	ldr	r0, [r4, #0]
    7b96:	add	r6, sp, #16
    7b98:	strb.w	r2, [r4, #568]	; 0x238
  if (fatType() == FAT_TYPE_FAT32) {
    7b9c:	cmp	r5, #32
    m_sector = 0XFFFFFFFF;
    7b9e:	mov.w	r2, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7ba2:	ldr	r1, [r4, #24]
    7ba4:	ldr	r5, [r0, #0]
    7ba6:	str.w	r2, [r4, #580]	; 0x244
    return m_buffer;
    7baa:	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
    7bae:	bne.n	7c00 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7bb0:	str	r6, [sp, #4]
    7bb2:	ldr	r6, [pc, #84]	; (7c08 <FatPartition::freeClusterCount()+0xa0>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7bb4:	str	r6, [sp, #0]
    7bb6:	ldr	r5, [r5, #24]
    7bb8:	blx	r5
    7bba:	cbz	r0, 7bd0 <FatPartition::freeClusterCount()+0x68>
  }

  setFreeClusterCount(state.free_count);
    7bbc:	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    7bbe:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
    7bc0:	b.n	7be6 <FatPartition::freeClusterCount()+0x7e>
      int8_t fg = fatGet(i, &c);
    7bc2:	add	r2, sp, #16
    7bc4:	mov	r1, r7
    7bc6:	mov	r0, r4
    7bc8:	bl	7912 <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    7bcc:	cmp	r0, #0
    7bce:	bge.n	7bd6 <FatPartition::freeClusterCount()+0x6e>
  if (buf == nullptr) return -1;
    7bd0:	mov.w	r0, #4294967295
    7bd4:	b.n	7be6 <FatPartition::freeClusterCount()+0x7e>
      if (fg && c == 0) {
    7bd6:	beq.n	7bde <FatPartition::freeClusterCount()+0x76>
    7bd8:	ldr	r3, [sp, #16]
    7bda:	cbnz	r3, 7bde <FatPartition::freeClusterCount()+0x76>
        free++;
    7bdc:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    7bde:	adds	r7, #1
    7be0:	cmp	r7, r6
    7be2:	bcc.n	7bc2 <FatPartition::freeClusterCount()+0x5a>
    return free;
    7be4:	mov	r0, r5
}
    7be6:	add	sp, #28
    7be8:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    7bea:	movs	r7, #2
    7bec:	b.n	7be0 <FatPartition::freeClusterCount()+0x78>
    if (isDirty() && !sync()) {
    7bee:	add.w	r0, r4, #568	; 0x238
    7bf2:	str	r3, [sp, #12]
    7bf4:	bl	5388 <FsCache::sync()>
    7bf8:	ldr	r3, [sp, #12]
    7bfa:	cmp	r0, #0
    7bfc:	bne.n	7b90 <FatPartition::freeClusterCount()+0x28>
    7bfe:	b.n	7bd0 <FatPartition::freeClusterCount()+0x68>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7c00:	str	r6, [sp, #4]
    7c02:	ldr	r6, [pc, #8]	; (7c0c <FatPartition::freeClusterCount()+0xa4>)
    7c04:	b.n	7bb4 <FatPartition::freeClusterCount()+0x4c>
    7c06:	nop
    7c08:	.word	0x000078d7
    7c0c:	.word	0x000078a9

00007c10 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7c10:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    7c12:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7c14:	mov	r4, r0
  m_blockDev = dev;
    7c16:	str	r1, [r0, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    7c18:	mov	r5, r2
  m_fatType = 0;
    7c1a:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    7c1c:	movs	r0, #1
  m_cache.init(dev);
    7c1e:	add.w	r6, r4, #40	; 0x28
    m_blockDev = blockDev;
    7c22:	str	r1, [r4, #44]	; 0x2c
  m_allocSearchStart = 1;
    7c24:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    7c26:	mov.w	r0, #4294967295
    m_status = 0;
    7c2a:	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7c2e:	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    7c30:	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    7c34:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    7c38:	str.w	r0, [r4, #580]	; 0x244
  if (part) {
    7c3c:	cbz	r2, 7c72 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    7c3e:	cmp	r2, #4
    7c40:	bls.n	7c46 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    7c42:	movs	r0, #0
}
    7c44:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    7c46:	add.w	r5, r5, #268435456	; 0x10000000
    return m_cache.prepare(sector, options);
    7c4a:	mov	r2, r3
    7c4c:	mov	r1, r3
    7c4e:	mov	r0, r6
    7c50:	subs	r5, #1
    7c52:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
    7c56:	add.w	r3, r0, #446	; 0x1be
    7c5a:	lsls	r2, r5, #4
    7c5c:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    7c60:	cmp	r0, #0
    7c62:	beq.n	7c42 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7c64:	ldrb	r1, [r5, #4]
    7c66:	cmp	r1, #0
    7c68:	beq.n	7c42 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7c6a:	ldrb	r3, [r3, r2]
    7c6c:	lsls	r3, r3, #25
    7c6e:	bne.n	7c42 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    7c70:	ldr	r5, [r5, #8]
    7c72:	movs	r2, #0
    7c74:	mov	r1, r5
    7c76:	mov	r0, r6
    7c78:	bl	53d6 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    7c7c:	cmp	r0, #0
    7c7e:	beq.n	7c42 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7c80:	ldrh.w	r3, [r0, #11]
    7c84:	cmp.w	r3, #512	; 0x200
    7c88:	bne.n	7c42 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    7c8a:	ldrb	r3, [r0, #16]
    7c8c:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    7c8e:	subs	r3, #1
    7c90:	cmp	r3, #1
    7c92:	bhi.n	7c42 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7c94:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7c96:	movs	r6, #9
    7c98:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7c9a:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7c9c:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7c9e:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7ca0:	movs	r3, #1
    7ca2:	cmp	r1, r3
    7ca4:	bne.n	7d0e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfe>
    7ca6:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    7ca8:	ldrh	r3, [r0, #22]
    7caa:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    7cac:	cbnz	r3, 7cb2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    7cae:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    7cb0:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7cb2:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    7cb4:	ldrh.w	r1, [r0, #17]
    7cb8:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7cba:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    7cbc:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7cbe:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7cc0:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7cc2:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7cc4:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7cc8:	mla	r3, r6, r7, r3
    7ccc:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    7cce:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    7cd2:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    7cd6:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    7cd8:	cbnz	r1, 7cdc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xcc>
  return *reinterpret_cast<const uint32_t*>(src);
    7cda:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    7cdc:	subs	r5, r5, r3
    7cde:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    7ce0:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    7ce2:	adds	r3, r5, #1
    7ce4:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    7ce6:	mov.w	r3, #4294967295
    7cea:	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    7cec:	movw	r3, #4084	; 0xff4
    7cf0:	cmp	r5, r3
    7cf2:	bls.n	7d20 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
  } else if (clusterCount < 65525) {
    7cf4:	movw	r3, #65524	; 0xfff4
    7cf8:	cmp	r5, r3
    7cfa:	bls.n	7d24 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    7cfc:	ldr	r3, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    7cfe:	str	r3, [r4, #32]
    7d00:	movs	r3, #32
  return true;
    7d02:	movs	r0, #1
    m_fatType = 12;
    7d04:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    7d06:	str	r6, [r4, #48]	; 0x30
    7d08:	str.w	r6, [r4, #576]	; 0x240
  return true;
    7d0c:	b.n	7c44 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    if (tmp == 0) {
    7d0e:	subs	r6, #1
    7d10:	bne.n	7d16 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x106>
    7d12:	strb	r2, [r4, #6]
    7d14:	b.n	7c42 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    m_sectorsPerClusterShift++;
    7d16:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7d18:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    7d1a:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7d1c:	uxtb	r3, r3
    7d1e:	b.n	7ca2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x92>
    7d20:	movs	r3, #12
    7d22:	b.n	7d02 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>
    7d24:	movs	r3, #16
    7d26:	b.n	7d02 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>

00007d28 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    7d28:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    7d2a:	add.w	r4, r0, #1096	; 0x448
    7d2e:	sub	sp, #40	; 0x28
  FatFile() {}
    7d30:	movs	r3, #0
    7d32:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    7d34:	add	r0, sp, #4
    7d36:	mov	r1, r4
    7d38:	str	r3, [sp, #4]
    7d3a:	bl	72b4 <FatFile::open(FatFile*, char const*, int)>
    7d3e:	mov	r6, r0
    7d40:	cbz	r0, 7d5e <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    7d42:	ldrb.w	r3, [sp, #4]
    7d46:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    7d4a:	itett	ne
    7d4c:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    7d4e:	moveq	r6, r3
  m_vwd = dir;
    7d50:	ldmiane	r5!, {r0, r1, r2, r3}
    7d52:	stmiane	r4!, {r0, r1, r2, r3}
    7d54:	itttt	ne
    7d56:	ldmiane	r5!, {r0, r1, r2, r3}
    7d58:	stmiane	r4!, {r0, r1, r2, r3}
    7d5a:	ldrne	r3, [r5, #0]
    7d5c:	strne	r3, [r4, #0]
}
    7d5e:	mov	r0, r6
    7d60:	add	sp, #40	; 0x28
    7d62:	pop	{r4, r5, r6, pc}

00007d64 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    7d64:	subs	r1, r0, #1
    7d66:	add.w	r3, r0, #10
    uint8_t sum = 0;
    7d6a:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7d6c:	lsls	r2, r0, #7
    7d6e:	orr.w	r2, r2, r0, lsr #1
    7d72:	ldrb.w	r0, [r1, #1]!
    7d76:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    7d7a:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7d7c:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    7d7e:	bne.n	7d6c <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    7d80:	bx	lr

00007d82 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7d82:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7d86:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7d88:	sub	sp, #52	; 0x34
    7d8a:	mov	r6, r2
    7d8c:	mov	r7, r0
    7d8e:	mov	r9, r1
    7d90:	mov	r8, r3
  FatFile dir = *this;
    7d92:	add	r4, sp, #12
    7d94:	ldmia	r5!, {r0, r1, r2, r3}
    7d96:	stmia	r4!, {r0, r1, r2, r3}
    7d98:	ldmia	r5!, {r0, r1, r2, r3}
    7d9a:	stmia	r4!, {r0, r1, r2, r3}
    7d9c:	ldr	r3, [r5, #0]
    7d9e:	str	r3, [r4, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7da0:	movs	r4, #1
    next = begin;
    7da2:	ldr	r3, [r6, #0]
    7da4:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    7da6:	movs	r3, #0
    7da8:	strh	r3, [r6, #12]
    7daa:	cmp	r4, r8
    7dac:	bls.n	7db2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    7dae:	movs	r0, #1
    7db0:	b.n	7dc4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    7db2:	sub.w	r1, r9, r4
    7db6:	add	r0, sp, #12
    7db8:	uxth	r1, r1
    7dba:	bl	6ae8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7dbe:	mov	sl, r0
    7dc0:	cbnz	r0, 7dca <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>

 fail:
  return false;
    7dc2:	movs	r0, #0
}
    7dc4:	add	sp, #52	; 0x34
    7dc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7dca:	movs	r5, #0
      uint16_t u = getLfnChar(ldir, i);
    7dcc:	uxtb	r2, r5
    7dce:	mov	r1, sl
    7dd0:	mov	r0, r7
    7dd2:	bl	6b02 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    7dd6:	ldrh	r3, [r6, #12]
    7dd8:	mov	fp, r0
    7dda:	cbnz	r3, 7dec <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
    7ddc:	ldrd	r2, r3, [r6, #4]
    7de0:	cmp	r2, r3
    7de2:	bne.n	7dec <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
        return u == 0;
    7de4:	clz	r0, r0
    7de8:	lsrs	r0, r0, #5
    7dea:	b.n	7dc4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    7dec:	mov	r0, r6
    7dee:	bl	54cc <FsName::get16()>
    7df2:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    7df4:	mov	r0, fp
    7df6:	bl	5424 <toUpcase(unsigned short)>
    7dfa:	ldr	r3, [sp, #4]
    7dfc:	mov	fp, r0
    7dfe:	mov	r0, r3
    7e00:	bl	5424 <toUpcase(unsigned short)>
    7e04:	cmp	fp, r0
    7e06:	bne.n	7dc2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    7e08:	adds	r5, #1
    7e0a:	cmp	r5, #13
    7e0c:	bne.n	7dcc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4a>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7e0e:	adds	r4, #1
    7e10:	uxtb	r4, r4
    7e12:	b.n	7daa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

00007e14 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7e14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7e18:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7e1a:	sub	sp, #52	; 0x34
    7e1c:	mov	r4, r2
    7e1e:	mov	r9, r1
    7e20:	mov	r7, r3
  FatFile dir = *this;
    7e22:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7e24:	mov.w	sl, #15
  FatFile dir = *this;
    7e28:	ldmia	r5!, {r0, r1, r2, r3}
    7e2a:	stmia	r6!, {r0, r1, r2, r3}
    7e2c:	ldmia	r5!, {r0, r1, r2, r3}
    7e2e:	stmia	r6!, {r0, r1, r2, r3}
    7e30:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    7e32:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7e36:	movs	r5, #1
  FatFile dir = *this;
    7e38:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    7e3a:	bl	7d64 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    7e3e:	movs	r6, #0
    next = begin;
    7e40:	ldr	r3, [r4, #0]
    7e42:	mov	r8, r0
    7e44:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    7e46:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7e48:	cmp	r5, r7
    7e4a:	bls.n	7e54 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    7e4c:	movs	r0, #1

 fail:
  return false;
}
    7e4e:	add	sp, #52	; 0x34
    7e50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    7e54:	sub.w	r1, r9, r5
    7e58:	add	r0, sp, #12
    7e5a:	uxth	r1, r1
    7e5c:	bl	6ae8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7e60:	cmp	r0, #0
    7e62:	beq.n	7e4e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    7e64:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7e66:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    7e68:	mov.w	r1, #0
    7e6c:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    7e70:	ldrb.w	r3, [r2, #40]	; 0x28
    7e74:	orr.w	r3, r3, #1
    7e78:	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7e7c:	ite	eq
    7e7e:	orreq.w	r3, r5, #64	; 0x40
    7e82:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7e84:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    7e88:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7e8a:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    7e8c:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7e90:	strh	r1, [r0, #26]
    return !ls && next == end;
    7e92:	ldrh	r0, [r4, #12]
    7e94:	cbnz	r0, 7ec2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
    7e96:	ldrd	r2, r3, [r4, #4]
    7e9a:	cmp	r2, r3
    7e9c:	bne.n	7ec2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
        cp = fc++ ? 0XFFFF : 0;
    7e9e:	cbz	r6, 7ece <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
    7ea0:	adds	r6, #1
    7ea2:	movw	r0, #65535	; 0xffff
    7ea6:	uxtb	r6, r6
  if (i < 5) {
    7ea8:	cmp	r1, #4
    7eaa:	uxtb	r3, r1
    7eac:	bhi.n	7ed2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbe>
    7eae:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    7eb2:	adds	r1, #1
    7eb4:	add.w	fp, fp, #2
    7eb8:	cmp	r1, #13
    7eba:	bne.n	7e92 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7ebc:	adds	r5, #1
    7ebe:	uxtb	r5, r5
    7ec0:	b.n	7e48 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    7ec2:	mov	r0, r4
    7ec4:	str	r1, [sp, #4]
    7ec6:	bl	54cc <FsName::get16()>
    7eca:	ldr	r1, [sp, #4]
    7ecc:	b.n	7ea8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
    7ece:	movs	r6, #1
    7ed0:	b.n	7ea8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    7ed2:	cmp	r3, #10
    7ed4:	ite	ls
    7ed6:	strhls.w	r0, [fp, #3]
    7eda:	strhhi.w	r0, [fp, #5]
}
    7ede:	b.n	7eb2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9e>

00007ee0 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    7ee0:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    7ee2:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    7ee6:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    7eea:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    7eee:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    7ef0:	mov	r5, r0
    fname->sfn[k] = ' ';
    7ef2:	str.w	r1, [r0, #22]
    7ef6:	str	r1, [r2, #4]
    7ef8:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    7efc:	ldrb	r0, [r3, #0]
    7efe:	subs	r0, #46	; 0x2e
    7f00:	it	ne
    7f02:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    7f04:	mov	r7, r3
    7f06:	ldrb.w	r2, [r3], #1
    7f0a:	cmp	r2, #46	; 0x2e
    7f0c:	beq.n	7f04 <FatFile::makeSFN(FatLfn_t*)+0x24>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    7f0e:	subs	r3, r6, #1
    7f10:	cmp	r3, r7
    7f12:	mov	lr, r3
    7f14:	bls.n	7f1e <FatFile::makeSFN(FatLfn_t*)+0x3e>
    7f16:	ldrb.w	r2, [r3], #-1
    7f1a:	cmp	r2, #46	; 0x2e
    7f1c:	bne.n	7f10 <FatFile::makeSFN(FatLfn_t*)+0x30>
    7f1e:	movs	r2, #0
    7f20:	mov.w	ip, #7
    7f24:	mov.w	r9, #8
    7f28:	mov	r1, r2
    7f2a:	mov	r8, r2
    7f2c:	b.n	7f44 <FatFile::makeSFN(FatLfn_t*)+0x64>

  for (; ptr < end; ptr++) {
    c = *ptr;
    7f2e:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    7f30:	cmp	r3, #46	; 0x2e
    7f32:	bne.n	7f60 <FatFile::makeSFN(FatLfn_t*)+0x80>
    7f34:	cmp	lr, r7
    7f36:	bne.n	7f7c <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;  // Max index for full 8.3 name.
    7f38:	mov.w	ip, #10
      i = 8;    // Place for extension.
    7f3c:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    7f3e:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    7f42:	adds	r7, #1
    7f44:	cmp	r7, r6
    7f46:	bcc.n	7f2e <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7f48:	ldrb	r3, [r5, #22]
    7f4a:	cmp	r3, #32
    7f4c:	beq.n	8000 <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    7f4e:	cmp	r0, #0
    7f50:	beq.n	7fec <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7f52:	tst.w	r8, r2
    7f56:	it	ne
    7f58:	movne	r2, #2
    7f5a:	strb	r2, [r5, #21]
  }
  return true;

 fail:
  return false;
}
    7f5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    7f60:	cmp	r3, #34	; 0x22
    7f62:	beq.n	7f7c <FatFile::makeSFN(FatLfn_t*)+0x9c>
    7f64:	cmp	r3, #124	; 0x7c
    7f66:	beq.n	7f7c <FatFile::makeSFN(FatLfn_t*)+0x9c>
    7f68:	sub.w	r4, r3, #91	; 0x5b
    7f6c:	cmp	r4, #2
    7f6e:	bls.n	7f7c <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    7f70:	sub.w	r4, r3, #42	; 0x2a
    7f74:	cmp	r4, #5
    7f76:	bhi.n	7f86 <FatFile::makeSFN(FatLfn_t*)+0xa6>
    7f78:	cmp	r3, #45	; 0x2d
    7f7a:	beq.n	7fa2 <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    7f7c:	cmp	r1, ip
    7f7e:	bhi.n	7fa6 <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    7f80:	movs	r0, #0
        c = '_';
    7f82:	movs	r3, #95	; 0x5f
    7f84:	b.n	7fc8 <FatFile::makeSFN(FatLfn_t*)+0xe8>
    7f86:	sub.w	r4, r3, #58	; 0x3a
    7f8a:	cmp	r4, #5
    7f8c:	bls.n	7f96 <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    7f8e:	sub.w	r4, r3, #33	; 0x21
    7f92:	cmp	r4, #93	; 0x5d
    7f94:	bls.n	7fa2 <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    7f96:	and.w	r3, r3, #192	; 0xc0
    7f9a:	cmp	r3, #128	; 0x80
    7f9c:	bne.n	7f7c <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    7f9e:	movs	r0, #0
    7fa0:	b.n	7f42 <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    7fa2:	cmp	r1, ip
    7fa4:	bls.n	7fb6 <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    7fa6:	cmp.w	ip, #10
    7faa:	beq.n	7fe8 <FatFile::makeSFN(FatLfn_t*)+0x108>
    7fac:	cmp	lr, r7
    7fae:	bcc.n	7fe8 <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    7fb0:	add.w	r7, lr, #4294967295
        continue;
    7fb4:	b.n	7f9e <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    7fb6:	sub.w	r4, r3, #97	; 0x61
    7fba:	cmp	r4, #25
    7fbc:	bhi.n	7fda <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    7fbe:	subs	r3, #32
        lc |= bit;
    7fc0:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    7fc4:	uxtb	r3, r3
        lc |= bit;
    7fc6:	uxtb	r2, r2
      fname->sfn[i++] = c;
    7fc8:	adds	r4, r1, #1
    7fca:	add	r1, r5
    7fcc:	uxtb	r4, r4
    7fce:	strb	r3, [r1, #22]
      if (i < 7) {
    7fd0:	cmp	r4, #6
    7fd2:	bhi.n	7fd6 <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    7fd4:	strb	r4, [r5, #20]
    7fd6:	mov	r1, r4
    7fd8:	b.n	7f42 <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    7fda:	sub.w	r4, r3, #65	; 0x41
    7fde:	cmp	r4, #25
        uc |= bit;
    7fe0:	it	ls
    7fe2:	orrls.w	r8, r9, r8
    7fe6:	b.n	7fc8 <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    7fe8:	movs	r0, #0
    7fea:	b.n	7f48 <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    7fec:	ldrb	r3, [r5, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7fee:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    7ff0:	movs	r1, #126	; 0x7e
    7ff2:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7ff4:	strb	r2, [r5, #21]
  return true;
    7ff6:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    7ff8:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    7ffa:	movs	r1, #49	; 0x31
    7ffc:	strb	r1, [r3, #23]
    7ffe:	b.n	7f5c <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    8000:	movs	r0, #0
    8002:	b.n	7f5c <FatFile::makeSFN(FatLfn_t*)+0x7c>

00008004 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    8004:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8008:	mov	r7, r0
    800a:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    800c:	ldrb	r6, [r1, #20]
    800e:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    8010:	mov.w	sl, #0
    8014:	ldr.w	r8, [pc, #128]	; 8098 <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8018:	add.w	r9, r1, #22
    801c:	ldr.w	r3, [r8]
    8020:	cmp	r6, #3
    hex += millis();
    8022:	add	r3, sl
    8024:	it	cs
    8026:	movcs	r6, #3
    8028:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    802c:	adds	r3, r6, #4
    802e:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    8030:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8034:	adds	r1, r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8036:	subs	r3, #1
      hex >>= 4;
    8038:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    803c:	cmp	r2, #9
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    803e:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8040:	ite	ls
    8042:	addls	r2, #48	; 0x30
    8044:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8046:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8048:	strb	r2, [r1, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    804a:	bne.n	8030 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    804c:	adds	r3, r5, r6
    804e:	movs	r2, #126	; 0x7e
    seekSet(0);
    8050:	movs	r1, #0
    8052:	mov	r0, r7
    8054:	strb	r2, [r3, #22]
    8056:	bl	6fda <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    805a:	movs	r1, #1
    805c:	mov	r0, r7
    805e:	bl	6f9c <FatFile::readDirCache(bool)>
      if (!dir) {
    8062:	mov	r1, r0
    8064:	cbnz	r0, 8072 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    8066:	ldrb	r0, [r7, #1]
    8068:	clz	r0, r0
    806c:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    806e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    8072:	ldrb	r3, [r0, #0]
    8074:	cbz	r3, 8094 <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8076:	ldrb	r3, [r0, #11]
    8078:	lsls	r3, r3, #28
    807a:	bmi.n	805a <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    807c:	movs	r2, #11
    807e:	mov	r0, r9
    8080:	bl	e884 <memcmp>
    8084:	cmp	r0, #0
    8086:	bne.n	805a <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8088:	subs	r0, r4, #1
    808a:	ands.w	r4, r0, #255	; 0xff
    808e:	bne.n	801c <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    8090:	mov	r0, r4
 fail:
    8092:	b.n	806e <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    8094:	movs	r0, #1
    8096:	b.n	806e <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    8098:	.word	0x2002d7c4

0000809c <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    809c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80a0:	vpush	{d8}
    80a4:	sub	sp, #44	; 0x2c
    80a6:	mov	r5, r1
    80a8:	mov	r7, r2
    80aa:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    80ac:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    80ae:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    80b0:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    80b2:	ldrb	r3, [r1, #0]
    80b4:	tst.w	r3, #112	; 0x70
    80b8:	bne.n	80c6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

 fail:
  return false;
    80ba:	movs	r0, #0
}
    80bc:	add	sp, #44	; 0x2c
    80be:	vpop	{d8}
    80c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    80c6:	ldr	r3, [sp, #28]
    80c8:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    80ca:	cmp	r3, #0
    80cc:	bne.n	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12)/13;
    80ce:	ldr	r3, [r2, #16]
    80d0:	movs	r2, #13
    seekSet(0);
    80d2:	movs	r1, #0
    80d4:	mov	r0, r5
    80d6:	adds	r3, #12
  uint8_t checksum = 0;
    80d8:	mov.w	sl, #0
  nameOrd = (fname->len + 12)/13;
    80dc:	udiv	r3, r3, r2
    80e0:	uxtb	r3, r3
  uint8_t order = 0;
    80e2:	mov	r8, sl
  uint8_t freeFound = 0;
    80e4:	mov	r4, sl
  bool fnameFound = false;
    80e6:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    80e8:	str	r3, [sp, #24]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    80ea:	ldrb	r3, [r7, #21]
    80ec:	lsls	r2, r3, #30
    80ee:	itett	ne
    80f0:	ldrne	r3, [sp, #24]
    80f2:	moveq	r3, #1
    80f4:	addne.w	r9, r3, #1
    80f8:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    80fc:	mov	r9, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    80fe:	str	r3, [sp, #8]
    8100:	bl	6fda <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8104:	add.w	r3, r7, #22
  uint16_t freeIndex = 0;
    8108:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    810c:	vmov	s16, r3
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8110:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    8112:	movs	r1, #0
    8114:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8116:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    811a:	bl	6f9c <FatFile::readDirCache(bool)>
    if (!dir) {
    811e:	cmp	r0, #0
    8120:	bne.n	81e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (dirFile->getError()) {
    8122:	ldrb	r3, [r5, #1]
    8124:	cmp	r3, #0
    8126:	bne.n	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    8128:	ldr	r3, [sp, #16]
    812a:	lsls	r2, r3, #22
    812c:	bpl.n	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    812e:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8132:	subs	r3, #1
    8134:	cmp	r3, #1
    8136:	bhi.n	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    8138:	ldr	r3, [sp, #12]
    813a:	cmp	r4, #0
    813c:	it	eq
    813e:	moveq	r3, r6
    8140:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    8142:	ldr	r3, [sp, #8]
    8144:	cmp	r4, r3
    8146:	bcc.w	82ca <FatFile::open(FatFile*, FatLfn_t*, int)+0x22e>
  if (fnameFound) {
    814a:	cmp.w	fp, #0
    814e:	bne.w	8300 <FatFile::open(FatFile*, FatLfn_t*, int)+0x264>
  lfnOrd = freeNeed - 1;
    8152:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8154:	mov	r2, r7
    8156:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    8158:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    815a:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    815c:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    8160:	uxtab	r6, r3, r6
    8164:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8166:	mov	r3, fp
    8168:	mov	r1, r6
    816a:	bl	7e14 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    816e:	cmp	r0, #0
    8170:	beq.n	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    8172:	mov	r1, r6
    8174:	mov	r0, r5
    8176:	bl	6ae8 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    817a:	mov	r4, r0
    817c:	cmp	r0, #0
    817e:	beq.n	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    8180:	movs	r2, #32
    8182:	movs	r1, #0
    8184:	bl	9f44 <memset>
  memcpy(dir->name, fname->sfn, 11);
    8188:	ldr.w	r3, [r7, #22]
    818c:	str	r3, [r4, #0]
    818e:	ldr.w	r3, [r7, #26]
    8192:	str	r3, [r4, #4]
    8194:	ldrh	r3, [r7, #30]
    8196:	strh	r3, [r4, #8]
    8198:	ldrb.w	r3, [r7, #32]
    819c:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    819e:	ldrb	r3, [r7, #21]
    81a0:	and.w	r3, r3, #24
    81a4:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    81a6:	ldr	r3, [pc, #372]	; (831c <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    81a8:	ldr	r3, [r3, #0]
    81aa:	cmp	r3, #0
    81ac:	beq.w	8310 <FatFile::open(FatFile*, FatLfn_t*, int)+0x274>
    FsDateTime::callback(&date, &time, &ms10);
    81b0:	add.w	r2, sp, #35	; 0x23
    81b4:	add.w	r1, sp, #38	; 0x26
    81b8:	add	r0, sp, #36	; 0x24
    81ba:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    81bc:	ldrh.w	r3, [sp, #36]	; 0x24
    81c0:	strh	r3, [r4, #16]
    81c2:	ldrh.w	r3, [sp, #38]	; 0x26
    81c6:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    81c8:	ldrb.w	r3, [sp, #35]	; 0x23
    81cc:	strb	r3, [r4, #13]
    81ce:	ldr	r3, [sp, #20]
    81d0:	ldr	r2, [sp, #20]
    81d2:	ldrb.w	r3, [r3, #40]	; 0x28
    81d6:	orr.w	r3, r3, #1
    81da:	strb.w	r3, [r2, #40]	; 0x28
  }
    81de:	b.n	82b8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x21c>
        fnameFound = true;
    81e0:	mov.w	fp, #1
    81e4:	b.n	8110 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    81e6:	ldrb	r2, [r0, #0]
    81e8:	cmp	r2, #229	; 0xe5
    81ea:	beq.n	81ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x152>
    81ec:	cbnz	r2, 8210 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    81ee:	ldr	r3, [sp, #12]
    81f0:	cmp	r4, #0
    81f2:	it	eq
    81f4:	moveq	r3, r6
    81f6:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    81f8:	ldr	r3, [sp, #8]
    81fa:	cmp	r4, r3
        freeFound++;
    81fc:	itt	cc
    81fe:	addcc	r4, #1
    8200:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    8202:	cmp	r2, #0
    8204:	beq.n	8128 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8206:	cmp	r2, #229	; 0xe5
    8208:	bne.n	8218 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
      lfnOrd = 0;
    820a:	mov.w	r9, #0
    820e:	b.n	8110 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    8210:	ldr	r3, [sp, #8]
    8212:	cmp	r4, r3
    8214:	it	cc
    8216:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8218:	cmp	r2, #46	; 0x2e
    821a:	beq.n	820a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    821c:	ldrb	r1, [r0, #11]
    } else if (isLongName(dir)) {
    821e:	cmp	r1, #15
    8220:	bne.n	8276 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1da>
      if (!lfnOrd) {
    8222:	cmp.w	r9, #0
    8226:	bne.n	8262 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
        order = ldir->order & 0X1F;
    8228:	and.w	r8, r2, #31
        if (order != nameOrd ||
    822c:	ldr	r3, [sp, #24]
    822e:	cmp	r3, r8
    8230:	bne.w	8110 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    8234:	ands.w	r9, r2, #64	; 0x40
    8238:	beq.w	8110 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    823c:	ldrb.w	sl, [r0, #13]
    8240:	mov	r9, r3
      if (order == 1) {
    8242:	cmp.w	r8, #1
    8246:	bne.w	8110 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    824a:	adds	r1, r6, #1
    824c:	mov	r3, r9
    824e:	mov	r2, r7
    8250:	mov	r0, r5
    8252:	uxth	r1, r1
    8254:	bl	7d82 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    8258:	cmp	r0, #0
    825a:	it	eq
    825c:	moveq.w	r9, #0
    8260:	b.n	8110 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    8262:	add.w	r8, r8, #4294967295
    8266:	uxtb.w	r8, r8
    826a:	cmp	r2, r8
    826c:	bne.n	820a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    826e:	ldrb	r2, [r0, #13]
    8270:	cmp	r2, sl
    8272:	beq.n	8242 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a6>
    8274:	b.n	820a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    } else if (isFileOrSubdir(dir)) {
    8276:	lsls	r3, r1, #28
    8278:	bmi.n	820a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
      if (lfnOrd) {
    827a:	cmp.w	r9, #0
    827e:	beq.n	8296 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1fa>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    8280:	cmp.w	r8, #1
    8284:	bne.w	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    8288:	bl	7d64 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    828c:	cmp	r0, sl
    828e:	bne.w	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    8292:	mov	fp, r9
    8294:	b.n	82b0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x214>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8296:	movs	r2, #11
    8298:	vmov	r1, s16
    829c:	bl	e884 <memcmp>
    82a0:	cmp	r0, #0
    82a2:	bne.w	8110 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    82a6:	ldrb.w	fp, [r7, #21]
    82aa:	ands.w	fp, fp, #1
    82ae:	bne.n	81e0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x144>
  if (oflag & O_EXCL) {
    82b0:	ldr	r3, [sp, #16]
    82b2:	lsls	r1, r3, #20
    82b4:	bmi.w	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    82b8:	ldr	r3, [sp, #16]
    82ba:	mov	r2, r6
    82bc:	mov	r1, r5
    82be:	ldr	r0, [sp, #28]
    82c0:	str.w	fp, [sp]
    82c4:	bl	70c6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    82c8:	b.n	80bc <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    82ca:	movs	r1, #0
    82cc:	mov	r0, r5
    82ce:	bl	6f9c <FatFile::readDirCache(bool)>
    if (!dir) {
    82d2:	cbnz	r0, 82fa <FatFile::open(FatFile*, FatLfn_t*, int)+0x25e>
      if (dirFile->getError()) {
    82d4:	ldrb	r3, [r5, #1]
    82d6:	cmp	r3, #0
    82d8:	bne.w	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    82dc:	mov	r0, r5
    82de:	bl	6d28 <FatFile::addDirCluster()>
    82e2:	cmp	r0, #0
    82e4:	beq.w	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    82e8:	ldr	r3, [sp, #20]
    82ea:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    82ec:	add.w	r3, r4, r3, lsl #4
    82f0:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    82f2:	ldr	r3, [sp, #8]
    82f4:	cmp	r3, r4
    82f6:	bhi.n	82dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x240>
    82f8:	b.n	814a <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    82fa:	adds	r4, #1
    82fc:	uxtb	r4, r4
    82fe:	b.n	8142 <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    8300:	mov	r1, r7
    8302:	mov	r0, r5
    8304:	bl	8004 <FatFile::makeUniqueSfn(FatLfn_t*)>
    8308:	cmp	r0, #0
    830a:	bne.w	8152 <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    830e:	b.n	80ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    8310:	movw	r3, #22561	; 0x5821
    8314:	strh	r3, [r4, #16]
    8316:	strh	r3, [r4, #24]
    8318:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    831a:	b.n	81ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    831c:	.word	0x2002ce50

00008320 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8320:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8322:	mov	r4, r2
    8324:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    8326:	mov	r0, r1
    8328:	ldrb.w	r3, [r1], #1
    832c:	cmp	r3, #32
    832e:	beq.n	8326 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    8330:	movs	r5, #0
    8332:	ldr	r7, [pc, #148]	; (83c8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
    path++;
  }
  fname->begin = path;
    8334:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    8336:	ldrb	r3, [r0, #0]
    8338:	cbnz	r3, 8388 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    833a:	ldr	r3, [r4, #16]
    833c:	subs	r3, #1
    833e:	cmp	r3, #254	; 0xfe
    8340:	bhi.n	836a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8342:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    8344:	ldrb.w	r3, [r0], #1
    8348:	cmp	r3, #32
    834a:	beq.n	8342 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    834c:	cmp	r3, #47	; 0x2f
    834e:	beq.n	8342 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    8350:	mov	r0, r4
  *ptr = path;
    8352:	str	r2, [r6, #0]

 fail:
  return false;
}
    8354:	add	sp, #12
    8356:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    835a:	b.w	7ee0 <FatFile::makeSFN(FatLfn_t*)>
    835e:	subs	r1, #34	; 0x22
    8360:	uxtb	r1, r1
    8362:	lsr.w	r1, r7, r1
    8366:	lsls	r2, r1, #31
    8368:	bpl.n	83c2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
}
    836a:	movs	r0, #0
    836c:	add	sp, #12
    836e:	pop	{r4, r5, r6, r7, pc}
    8370:	cmp	r1, #92	; 0x5c
    8372:	beq.n	836a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8374:	bhi.n	8382 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x62>
    8376:	subs	r1, #62	; 0x3e
    8378:	cmp	r1, #1
    837a:	bls.n	836a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
      fname->len = len;
    837c:	str	r5, [r4, #16]
      fname->end = path;
    837e:	str	r0, [r4, #8]
    8380:	b.n	8336 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8382:	cmp	r1, #124	; 0x7c
    8384:	beq.n	836a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8386:	b.n	837c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
  while (*path && !isDirSeparator(*path)) {
    8388:	cmp	r3, #47	; 0x2f
    838a:	beq.n	833a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    838c:	add	r2, sp, #4
    838e:	adds	r1, r0, #4
    8390:	bl	5300 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8394:	cmp	r0, #0
    8396:	beq.n	836a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    len += cp <= 0XFFFF ? 1 : 2;
    8398:	ldr	r3, [sp, #4]
    839a:	cmp.w	r3, #65536	; 0x10000
    839e:	ite	cc
    83a0:	movcc	r2, #1
    83a2:	movcs	r2, #2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    83a4:	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    83a6:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    83a8:	bhi.n	837c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    83aa:	cmp	r3, #60	; 0x3c
    83ac:	uxtb	r1, r3
    83ae:	bhi.n	8370 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    83b0:	cmp	r1, #33	; 0x21
    83b2:	bhi.n	835e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    83b4:	cmp	r1, #31
    83b6:	bls.n	836a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    if (cp != '.' && cp != ' ') {
    83b8:	cmp	r3, #46	; 0x2e
    83ba:	beq.n	8336 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    83bc:	cmp	r3, #32
    83be:	beq.n	8336 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    83c0:	b.n	837c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    83c2:	cmp	r3, #46	; 0x2e
    83c4:	b.n	83be <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9e>
    83c6:	nop
    83c8:	.word	0x05002101

000083cc <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    83cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    83d0:	movs	r3, #0
    83d2:	sub	sp, #40	; 0x28
    83d4:	mov	r4, r0
    83d6:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    83d8:	ldrb	r3, [r0, #2]
    83da:	lsls	r2, r3, #30
    83dc:	bmi.n	83e6 <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    83de:	movs	r0, #0
}
    83e0:	add	sp, #40	; 0x28
    83e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    83e6:	ldr	r1, [r0, #32]
    83e8:	cmp	r1, #0
    83ea:	bne.n	8478 <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    83ec:	movs	r1, #1
    83ee:	mov	r0, r4
    83f0:	bl	6d98 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    83f4:	mov	r5, r0
    83f6:	cmp	r0, #0
    83f8:	beq.n	83de <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    83fa:	bl	7d64 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    83fe:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    8400:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    8402:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    8404:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    8406:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    8408:	ldr	r0, [r4, #8]
  m_flags = 0;
    840a:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    840c:	bl	6ccc <FatPartition::cacheSync()>
    8410:	cmp	r0, #0
    8412:	beq.n	83de <FatFile::remove()+0x12>
  if (!isLFN()) {
    8414:	ldrb	r3, [r4, #3]
    8416:	cmp	r3, #0
    8418:	beq.n	83e0 <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    841a:	mov	r1, r4
    841c:	add	r0, sp, #4
    841e:	bl	6dc2 <FatFile::openCluster(FatFile*)>
    8422:	cmp	r0, #0
    8424:	beq.n	83de <FatFile::remove()+0x12>
    8426:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8428:	uxtb.w	r8, r5
    842c:	ldrb	r3, [r4, #3]
    842e:	cmp	r3, r8
    8430:	bcc.n	83de <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    8432:	ldrh	r1, [r4, #4]
    8434:	add	r0, sp, #4
    8436:	subs	r1, r1, r5
    8438:	uxth	r1, r1
    843a:	bl	6ae8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    843e:	cmp	r0, #0
    8440:	beq.n	83de <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8442:	ldrb	r3, [r0, #11]
    8444:	cmp	r3, #15
    8446:	bne.n	83de <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    8448:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    844a:	and.w	r3, r2, #31
    844e:	cmp	r3, r8
    8450:	bne.n	83de <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    8452:	ldrb	r3, [r0, #13]
    8454:	cmp	r3, r6
    8456:	bne.n	83de <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    8458:	strb	r7, [r0, #0]
    if (last) {
    845a:	adds	r5, #1
    m_vol->cacheDirty();
    845c:	ldr	r1, [r4, #8]
    if (last) {
    845e:	uxth	r5, r5
    8460:	ldrb.w	r3, [r1, #40]	; 0x28
    8464:	orr.w	r3, r3, #1
    8468:	strb.w	r3, [r1, #40]	; 0x28
    846c:	lsls	r3, r2, #25
    846e:	bpl.n	8428 <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    8470:	ldr	r0, [r4, #8]
    8472:	bl	6ccc <FatPartition::cacheSync()>
    8476:	b.n	83e0 <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8478:	ldr	r0, [r0, #8]
    847a:	bl	7b22 <FatPartition::freeChain(unsigned long)>
    847e:	cmp	r0, #0
    8480:	bne.n	83ec <FatFile::remove()+0x20>
    8482:	b.n	83de <FatFile::remove()+0x12>

00008484 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    8484:	push	{r4, lr}
    8486:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8488:	ldr	r0, [r0, #56]	; 0x38
    848a:	cbz	r0, 8498 <FsBaseFile::close()+0x14>
    848c:	bl	72a4 <FatFile::close()>
    8490:	cbz	r0, 8498 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    8492:	movs	r3, #0
    8494:	str	r3, [r4, #56]	; 0x38
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
}
    8496:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    8498:	ldr	r0, [r4, #60]	; 0x3c
    849a:	cbnz	r0, 84a0 <FsBaseFile::close()+0x1c>
  return false;
    849c:	movs	r0, #0
    849e:	b.n	8496 <FsBaseFile::close()+0x12>
  if (m_xFile && m_xFile->close()) {
    84a0:	bl	56a6 <ExFatFile::close()>
    84a4:	cmp	r0, #0
    84a6:	beq.n	849c <FsBaseFile::close()+0x18>
    m_xFile = nullptr;
    84a8:	movs	r3, #0
    84aa:	str	r3, [r4, #60]	; 0x3c
    return true;
    84ac:	b.n	8496 <FsBaseFile::close()+0x12>

000084ae <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    84ae:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    84b0:	push	{r4, r5, r6, lr}
    84b2:	mov	r6, r0
    84b4:	mov	r5, r1
  if (this == &from) return *this;
    84b6:	beq.n	84e0 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    84b8:	bl	8484 <FsBaseFile::close()>
  if (from.m_fFile) {
    84bc:	ldr	r4, [r5, #56]	; 0x38
    84be:	cbz	r4, 84e4 <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    84c0:	mov	r1, r6
    84c2:	movs	r0, #36	; 0x24
    84c4:	bl	86e0 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    84c8:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    84ca:	mov	r4, r0
    84cc:	strh	r3, [r0, #0]
    84ce:	strb	r3, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    84d0:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    84d2:	ldr	r5, [r5, #56]	; 0x38
    84d4:	ldmia	r5!, {r0, r1, r2, r3}
    84d6:	stmia	r4!, {r0, r1, r2, r3}
    84d8:	ldmia	r5!, {r0, r1, r2, r3}
    84da:	stmia	r4!, {r0, r1, r2, r3}
    84dc:	ldr	r3, [r5, #0]
    84de:	str	r3, [r4, #0]
}
    84e0:	mov	r0, r6
    84e2:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    84e4:	ldr	r3, [r5, #60]	; 0x3c
    84e6:	cmp	r3, #0
    84e8:	beq.n	84e0 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    84ea:	mov	r1, r6
    84ec:	movs	r0, #56	; 0x38
    84ee:	bl	86e0 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    84f2:	strb.w	r4, [r0, #49]	; 0x31
    84f6:	strh	r4, [r0, #50]	; 0x32
    84f8:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    84fa:	ldr	r3, [r5, #60]	; 0x3c
    84fc:	add.w	r2, r3, #52	; 0x34
    8500:	ldr.w	r1, [r3], #4
    8504:	cmp	r3, r2
    8506:	str.w	r1, [r0], #4
    850a:	bne.n	8500 <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    850c:	b.n	84e0 <FsBaseFile::operator=(FsBaseFile const&)+0x32>

0000850e <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    850e:	push	{r0, r1, r4, r5, r6, lr}
    8510:	mov	r4, r0
  if (!vol) {
    8512:	mov	r5, r1
    8514:	cbnz	r1, 851c <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    8516:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8518:	add	sp, #8
    851a:	pop	{r4, r5, r6, pc}
    851c:	strd	r2, r3, [sp]
  close();
    8520:	bl	8484 <FsBaseFile::close()>
  if (vol->m_fVol) {
    8524:	ldr.w	r6, [r5, #1152]	; 0x480
    8528:	ldrd	r2, r3, [sp]
    852c:	cbz	r6, 8554 <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    852e:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    8530:	mov	r1, r4
    8532:	movs	r0, #36	; 0x24
    8534:	bl	86e0 <operator new(unsigned int, unsigned long*)>
    8538:	strh	r6, [r0, #0]
    853a:	strb	r6, [r0, #2]
    853c:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    853e:	ldr.w	r1, [r5, #1152]	; 0x480
    8542:	ldrd	r2, r3, [sp]
    8546:	bl	7352 <FatFile::open(FatVolume*, char const*, int)>
    854a:	cbz	r0, 8550 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    854c:	movs	r0, #1
    854e:	b.n	8518 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    8550:	str	r0, [r4, #56]	; 0x38
    8552:	b.n	8518 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    8554:	ldr.w	r1, [r5, #1156]	; 0x484
    8558:	strd	r2, r3, [sp]
    855c:	cmp	r1, #0
    855e:	beq.n	8516 <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    8560:	mov	r1, r4
    8562:	movs	r0, #56	; 0x38
    8564:	bl	86e0 <operator new(unsigned int, unsigned long*)>
    8568:	strb.w	r6, [r0, #49]	; 0x31
    856c:	strh	r6, [r0, #50]	; 0x32
    856e:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    8570:	ldr.w	r1, [r5, #1156]	; 0x484
    8574:	ldrd	r2, r3, [sp]
    8578:	bl	5e46 <ExFatFile::open(ExFatVolume*, char const*, int)>
    857c:	cmp	r0, #0
    857e:	bne.n	854c <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    8580:	str	r0, [r4, #60]	; 0x3c
    8582:	b.n	8518 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

00008584 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    8584:	push	{r0, r1, r4, r5, r6, lr}
    8586:	mov	r5, r1
    8588:	str	r2, [sp, #4]
    858a:	mov	r4, r0
  close();
    858c:	bl	8484 <FsBaseFile::close()>
  if (dir->m_fFile) {
    8590:	ldr	r6, [r5, #56]	; 0x38
    8592:	ldr	r2, [sp, #4]
    8594:	cbz	r6, 85ba <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8596:	mov	r1, r4
    8598:	movs	r0, #36	; 0x24
    859a:	bl	86e0 <operator new(unsigned int, unsigned long*)>
    859e:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    85a0:	ldr	r2, [sp, #4]
    85a2:	strh	r1, [r0, #0]
    85a4:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    85a6:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    85a8:	ldr	r1, [r5, #56]	; 0x38
    85aa:	bl	7188 <FatFile::openNext(FatFile*, int)>
    85ae:	cbz	r0, 85b6 <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    85b0:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    85b2:	add	sp, #8
    85b4:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    85b6:	str	r0, [r4, #56]	; 0x38
    85b8:	b.n	85b2 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    85ba:	ldr	r0, [r5, #60]	; 0x3c
    85bc:	str	r2, [sp, #4]
    85be:	cmp	r0, #0
    85c0:	beq.n	85b2 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    85c2:	mov	r1, r4
    85c4:	movs	r0, #56	; 0x38
    85c6:	bl	86e0 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    85ca:	ldr	r2, [sp, #4]
    85cc:	strb.w	r6, [r0, #49]	; 0x31
    85d0:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    85d2:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    85d4:	ldr	r1, [r5, #60]	; 0x3c
    85d6:	bl	5e54 <ExFatFile::openNext(ExFatFile*, int)>
    85da:	cmp	r0, #0
    85dc:	bne.n	85b0 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    85de:	str	r0, [r4, #60]	; 0x3c
    85e0:	b.n	85b2 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

000085e4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    85e4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    85e8:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    85ea:	mov	r4, r0
    85ec:	mov	r6, r3
  m_blockDev = blockDev;
    85ee:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    85f2:	str.w	r7, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    85f6:	mov	r1, r0
    85f8:	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    85fc:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    85fe:	bl	86e0 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    8602:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    8604:	strb.w	r7, [r0, #1092]	; 0x444
    8608:	mov	r5, r0
    860a:	strb.w	r7, [r0, #1145]	; 0x479
    860e:	strh.w	r7, [r0, #1146]	; 0x47a
    8612:	str.w	r0, [r4, #1156]	; 0x484
    8616:	ldr.w	r1, [r4, #1160]	; 0x488
    861a:	ldr.w	r8, [pc, #152]	; 86b4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    861e:	bl	6198 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    8622:	cbz	r0, 8654 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8624:	add.w	r7, r5, #1096	; 0x448
    8628:	mov	r0, r7
    862a:	bl	56a6 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    862e:	mov	r1, r5
    8630:	mov	r0, r7
    8632:	bl	56fa <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    8636:	cbz	r0, 8654 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
    if (setCwv || !m_cwv) {
    8638:	ldr	r3, [pc, #112]	; (86ac <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    863a:	ldr	r2, [r3, #0]
    863c:	cbnz	r2, 8640 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    863e:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    8640:	cmp.w	r9, #0
    8644:	bne.n	864c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    8646:	ldr.w	r3, [r8]
    864a:	cbnz	r3, 8650 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    m_cwv = this;
    864c:	str.w	r4, [r8]
  }
  return true;
    8650:	movs	r0, #1
    8652:	b.n	86a6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
  m_xVol = nullptr;
    8654:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    8656:	mov	r1, r4
    8658:	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    865c:	str.w	r7, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    8660:	bl	86e0 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    8664:	movs	r3, #2
    8666:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    8668:	mov	r2, r6
    866a:	strb	r3, [r0, #8]
    866c:	mov	r5, r0
    866e:	strh.w	r7, [r0, #1096]	; 0x448
    8672:	strb.w	r7, [r0, #1098]	; 0x44a
    8676:	str.w	r0, [r4, #1152]	; 0x480
    867a:	ldr.w	r1, [r4, #1160]	; 0x488
    867e:	bl	7c10 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    8682:	cbz	r0, 869c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8684:	add.w	r6, r5, #1096	; 0x448
    8688:	mov	r0, r6
    868a:	bl	72a4 <FatFile::close()>
    return m_vwd.openRoot(this);
    868e:	mov	r1, r5
    8690:	mov	r0, r6
    8692:	bl	6db6 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    8696:	cbz	r0, 869c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
    if (setCwv || !m_cwv) {
    8698:	ldr	r3, [pc, #20]	; (86b0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    869a:	b.n	863a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    869c:	movs	r0, #0
    869e:	str.w	r0, [r8]
  m_fVol = nullptr;
    86a2:	str.w	r0, [r4, #1152]	; 0x480
}
    86a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    86aa:	nop
    86ac:	.word	0x2002ce54
    86b0:	.word	0x2002ce8c
    86b4:	.word	0x2002ce88

000086b8 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    86b8:	push	{r3, r4, r5, lr}
    86ba:	mov	r4, r0
    86bc:	mov.w	r5, #1000	; 0x3e8
    86c0:	movs	r0, #0
    86c2:	strd	r0, r5, [r4, #4]
    86c6:	strb	r0, [r4, #12]
    86c8:	ldr	r5, [pc, #16]	; (86dc <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    86ca:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    86ce:	mov	r0, r4
    86d0:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    86d4:	bl	850e <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    86d8:	mov	r0, r4
    86da:	pop	{r3, r4, r5, pc}
    86dc:	.word	0x200004f4

000086e0 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    86e0:	mov	r0, r1
    86e2:	bx	lr

000086e4 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    86e4:	mov.w	r0, #4294967295
    86e8:	bx	lr

000086ea <SharedSpiCard::errorCode() const>:
  }
    86ea:	ldrb	r0, [r0, #17]
    86ec:	bx	lr

000086ee <SharedSpiCard::errorData() const>:
  }
    86ee:	ldrb	r0, [r0, #20]
    86f0:	bx	lr

000086f2 <SharedSpiCard::type() const>:
  }
    86f2:	ldrb	r0, [r0, #21]
    86f4:	bx	lr

000086f6 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    86f6:	movs	r0, #1
    86f8:	bx	lr

000086fa <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    86fa:	ldrb	r0, [r0, #28]
    86fc:	bx	lr

000086fe <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    86fe:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    8700:	push	{r4}
  return readSectors(sector, dst, 1);
    8702:	ldr	r4, [r3, #20]
    8704:	movs	r3, #1
    8706:	mov	ip, r4
}
    8708:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    870c:	bx	ip

0000870e <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    870e:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    8710:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8712:	mov	r4, r0
    8714:	mov	r5, r1
  if (!syncDevice()) {
    8716:	ldr	r3, [r3, #32]
    8718:	blx	r3
    871a:	cbz	r0, 871e <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    871c:	strb	r5, [r4, #28]
  return true;
}
    871e:	pop	{r3, r4, r5, pc}

00008720 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8720:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8724:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8726:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8728:	mov	r4, r0
    872a:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    872c:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    872e:	mov	r6, r2
    8730:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8734:	bne.n	873c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    8736:	ldr	r3, [r0, #24]
    8738:	cmp	r3, r1
    873a:	beq.n	8750 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    873c:	ldr	r3, [r4, #0]
    873e:	mov	r1, r5
    8740:	mov	r0, r4
    8742:	ldr	r3, [r3, #96]	; 0x60
    8744:	blx	r3
    8746:	cbnz	r0, 874e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    8748:	movs	r0, #0
}
    874a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    874e:	str	r5, [r4, #24]
    8750:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8754:	cmp	r5, r8
    8756:	bne.n	8770 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    8758:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    875a:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    875c:	add	r3, r6
    875e:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8760:	cmp	r0, #0
    8762:	bne.n	874a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    8764:	ldr	r3, [r4, #0]
    8766:	mov	r0, r4
    8768:	ldr	r3, [r3, #100]	; 0x64
}
    876a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    876e:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    8770:	mov	r1, r9
    8772:	mov	r0, r5
    8774:	blx	r7
    if (!writeData(src)) {
    8776:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    8778:	mov	r1, r0
    if (!writeData(src)) {
    877a:	mov	r0, r4
    877c:	ldr	r3, [r3, #92]	; 0x5c
    877e:	adds	r5, #1
    8780:	blx	r3
    8782:	cmp	r0, #0
    8784:	bne.n	8754 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    8786:	b.n	8748 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

00008788 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8788:	bx	lr

0000878a <SharedSpiCard::end()>:
    m_spiDriver.end();
    878a:	adds	r0, #4
    878c:	b.w	9ec4 <SdSpiArduinoDriver::end()>

00008790 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8790:	push	{r4, lr}
    8792:	mov	r4, r0
    8794:	movs	r1, #32
    8796:	bl	c6b4 <operator delete(void*, unsigned int)>
    879a:	mov	r0, r4
    879c:	pop	{r4, pc}

0000879e <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    879e:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    87a0:	ldr	r3, [r0, #0]
    87a2:	mov	r1, sp
    87a4:	ldr	r3, [r3, #76]	; 0x4c
    87a6:	blx	r3
    87a8:	cbz	r0, 87f0 <SharedSpiCard::sectorCount()+0x52>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    87aa:	ldrb.w	r3, [sp]
    87ae:	ands.w	r3, r3, #192	; 0xc0
    87b2:	bne.n	87f6 <SharedSpiCard::sectorCount()+0x58>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    87b4:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    87b8:	ldrb.w	r0, [sp, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    87bc:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    87c0:	ldrb.w	r2, [sp, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    87c4:	lsls	r0, r0, #2
    87c6:	orr.w	r0, r0, r3, lsl #10
    87ca:	ldrb.w	r3, [sp, #8]
    87ce:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    87d2:	ldrb.w	r3, [sp, #9]
    87d6:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    87da:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    87dc:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    87de:	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    87e2:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    87e6:	and.w	r2, r2, #15
    87ea:	add	r3, r2
    87ec:	subs	r3, #7
    87ee:	lsls	r0, r3
}
    87f0:	add	sp, #20
    87f2:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    87f6:	cmp	r3, #64	; 0x40
    87f8:	bne.n	8818 <SharedSpiCard::sectorCount()+0x7a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    87fa:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    87fe:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8802:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8804:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8808:	add.w	r0, r0, r3, lsl #16
    880c:	ldrb.w	r3, [sp, #8]
    8810:	add.w	r0, r0, r3, lsl #8
    8814:	lsls	r0, r0, #10
    8816:	b.n	87f0 <SharedSpiCard::sectorCount()+0x52>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8818:	movs	r0, #0
    881a:	b.n	87f0 <SharedSpiCard::sectorCount()+0x52>

0000881c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    881c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8820:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8822:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8824:	mov	r4, r0
    8826:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8828:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    882a:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    882c:	bne.n	8834 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    882e:	ldr	r3, [r0, #24]
    8830:	cmp	r3, r1
    8832:	beq.n	8848 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    8834:	ldr	r3, [r4, #0]
    8836:	mov	r1, r5
    8838:	mov	r0, r4
    883a:	ldr	r3, [r3, #96]	; 0x60
    883c:	blx	r3
    883e:	cbnz	r0, 8846 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  return false;
    8840:	movs	r0, #0
}
    8842:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    8846:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8848:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    884a:	cmp	r6, r5
    884c:	add.w	r1, r7, r5, lsl #9
    8850:	bne.n	886a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    8852:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8854:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8856:	add	r3, r6
    8858:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    885a:	cmp	r0, #0
    885c:	bne.n	8842 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    885e:	ldr	r3, [r4, #0]
    8860:	mov	r0, r4
    8862:	ldr	r3, [r3, #100]	; 0x64
}
    8864:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    8868:	bx	r3
    if (!writeData(src)) {
    886a:	ldr	r3, [r4, #0]
    886c:	mov	r0, r4
    886e:	ldr	r3, [r3, #92]	; 0x5c
    8870:	blx	r3
    8872:	cmp	r0, #0
    8874:	beq.n	8840 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    8876:	adds	r5, #1
    8878:	b.n	884a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

0000887a <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    887a:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    887c:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    887e:	mov	r4, r0
  if (!m_spiActive) {
    8880:	cbnz	r6, 889e <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    8882:	adds	r5, r0, #4
    8884:	mov	r0, r5
    8886:	bl	9e68 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    888a:	mov	r1, r6
    888c:	ldrb	r0, [r4, #16]
    888e:	bl	9f3e <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8892:	movs	r1, #255	; 0xff
    8894:	mov	r0, r5
    8896:	bl	9ef6 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    889a:	movs	r3, #1
    889c:	strb	r3, [r4, #18]
}
    889e:	pop	{r4, r5, r6, pc}

000088a0 <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    88a0:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    88a2:	push	{r0, r1, r4, lr}
    88a4:	mov	r4, r0
  if (m_spiActive) {
    88a6:	cbz	r3, 88c4 <SharedSpiCard::spiStop()+0x24>
    sdCsWrite(m_csPin, true);
    88a8:	movs	r1, #1
    88aa:	ldrb	r0, [r0, #16]
    88ac:	bl	9f3e <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    88b0:	adds	r0, r4, #4
    88b2:	movs	r1, #255	; 0xff
    88b4:	str	r0, [sp, #4]
    88b6:	bl	9ef6 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    88ba:	ldr	r0, [sp, #4]
    88bc:	bl	9e76 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    88c0:	movs	r3, #0
    88c2:	strb	r3, [r4, #18]
}
    88c4:	add	sp, #8
    88c6:	pop	{r4, pc}

000088c8 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    88c8:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    88ca:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    88cc:	mov	r4, r0
  if (m_state == READ_STATE) {
    88ce:	cmp	r3, #1
    88d0:	beq.n	88f4 <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    88d2:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    88d4:	cbnz	r6, 88da <SharedSpiCard::isBusy()+0x12>
    spiStart();
    88d6:	bl	887a <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    88da:	adds	r0, r4, #4
    88dc:	bl	9eca <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    88e0:	subs.w	r5, r0, #255	; 0xff
    88e4:	it	ne
    88e6:	movne	r5, #1
  if (!spiActive) {
    88e8:	cbnz	r6, 88f0 <SharedSpiCard::isBusy()+0x28>
    spiStop();
    88ea:	mov	r0, r4
    88ec:	bl	88a0 <SharedSpiCard::spiStop()>
}
    88f0:	mov	r0, r5
    88f2:	pop	{r4, r5, r6, pc}
    return false;
    88f4:	movs	r5, #0
    88f6:	b.n	88f0 <SharedSpiCard::isBusy()+0x28>

000088f8 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    88f8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    88fa:	ldr	r7, [pc, #96]	; (895c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    88fc:	mov	r4, r0
    88fe:	adds	r6, r0, #4
    8900:	ldr	r5, [r7, #0]
    m_endTime = ms + millis16();
    8902:	add.w	r5, r5, #300	; 0x12c
    8906:	uxth	r5, r5
    8908:	mov	r0, r6
    890a:	strd	r1, r2, [sp]
    890e:	bl	9eca <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    8912:	cmp	r0, #255	; 0xff
    8914:	strb	r0, [r4, #20]
    8916:	ldrd	r1, r2, [sp]
    891a:	beq.n	893c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    891c:	cmp	r0, #254	; 0xfe
    891e:	bne.n	8952 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    8920:	mov	r0, r6
    8922:	bl	9ed4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    8926:	strb	r0, [r4, #20]
    8928:	cbnz	r0, 8956 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    892a:	mov	r0, r6
    892c:	bl	9eca <SdSpiArduinoDriver::receive()>
    8930:	mov	r0, r6
    8932:	bl	9eca <SdSpiArduinoDriver::receive()>
  return true;
    8936:	movs	r0, #1
}
    8938:	add	sp, #12
    893a:	pop	{r4, r5, r6, r7, pc}
    893c:	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    893e:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    8940:	lsls	r3, r3, #16
    8942:	bpl.n	8908 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    8944:	movs	r3, #29
  spiStop();
    8946:	mov	r0, r4
    m_errorCode = code;
    8948:	strb	r3, [r4, #17]
    894a:	bl	88a0 <SharedSpiCard::spiStop()>
  return false;
    894e:	movs	r0, #0
    8950:	b.n	8938 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    8952:	movs	r3, #24
    8954:	b.n	8946 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    8956:	movs	r3, #37	; 0x25
    8958:	b.n	8946 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    895a:	nop
    895c:	.word	0x2002d7c4

00008960 <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    8960:	mov.w	r2, #512	; 0x200
    8964:	b.w	88f8 <SharedSpiCard::readData(unsigned char*, unsigned int)>

00008968 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    8968:	push	{r4, r5, r6, lr}
    896a:	ldr	r6, [pc, #36]	; (8990 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    896c:	adds	r5, r0, #4
    896e:	ldr	r3, [r6, #0]
    m_endTime = ms + millis16();
    8970:	add	r1, r3
    8972:	uxth	r4, r1
    8974:	mov	r0, r5
    8976:	bl	9eca <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    897a:	cmp	r0, #255	; 0xff
    897c:	bne.n	8982 <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    897e:	movs	r0, #1
}
    8980:	pop	{r4, r5, r6, pc}
    8982:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    8984:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8986:	lsls	r3, r3, #16
    8988:	bpl.n	8974 <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    898a:	movs	r0, #0
    898c:	b.n	8980 <SharedSpiCard::waitReady(unsigned short)+0x18>
    898e:	nop
    8990:	.word	0x2002d7c4

00008994 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    8994:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8996:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    899a:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    899c:	mov	r4, r0
    899e:	str	r2, [sp, #4]
    89a0:	mov	r5, r1
  if (!syncDevice()) {
    89a2:	blx	r3
    89a4:	cmp	r0, #0
    89a6:	beq.n	8a1a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    89a8:	ldrb	r3, [r4, #18]
    89aa:	cbnz	r3, 89b2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    89ac:	mov	r0, r4
    89ae:	bl	887a <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    89b2:	cmp	r5, #12
    89b4:	bne.n	8a08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    89b6:	adds	r6, r4, #4
    89b8:	movs	r7, #3
    spiSend(pa[i]);
    89ba:	add.w	r8, sp, #4
    89be:	orr.w	r1, r5, #64	; 0x40
    89c2:	mov	r0, r6
    89c4:	bl	9ef6 <SdSpiArduinoDriver::send(unsigned char)>
    89c8:	ldrb.w	r1, [r8, r7]
    89cc:	mov	r0, r6
    89ce:	bl	9ef6 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    89d2:	subs	r7, #1
    89d4:	bcs.n	89c8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    89d6:	cmp	r5, #0
    89d8:	mov	r0, r6
    return m_spiDriver.receive();
    89da:	mov.w	r5, #10
    m_spiDriver.send(data);
    89de:	ite	eq
    89e0:	moveq	r1, #149	; 0x95
    89e2:	movne	r1, #135	; 0x87
    89e4:	bl	9ef6 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    89e8:	mov	r0, r6
    89ea:	bl	9eca <SdSpiArduinoDriver::receive()>
    89ee:	mov	r0, r6
    89f0:	bl	9eca <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    89f4:	lsls	r3, r0, #24
    m_status = spiReceive();
    89f6:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    89f8:	bpl.n	8a02 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    89fa:	subs	r5, #1
    89fc:	uxth	r5, r5
    89fe:	cmp	r5, #0
    8a00:	bne.n	89ee <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    8a02:	add	sp, #8
    8a04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    8a08:	mov.w	r1, #300	; 0x12c
    8a0c:	mov	r0, r4
    8a0e:	bl	8968 <SharedSpiCard::waitReady(unsigned short)>
    8a12:	cmp	r0, #0
    8a14:	bne.n	89b6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    8a16:	cmp	r5, #0
    8a18:	beq.n	89b6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    8a1a:	movs	r0, #255	; 0xff
    8a1c:	b.n	8a02 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

00008a1e <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8a1e:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    8a20:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8a22:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    8a24:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8a26:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    8a28:	bl	8994 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8a2c:	cbz	r0, 8a3c <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    8a2e:	movs	r3, #18
  spiStop();
    8a30:	mov	r0, r4
    8a32:	strb	r3, [r4, #17]
    8a34:	bl	88a0 <SharedSpiCard::spiStop()>
  return false;
    8a38:	movs	r0, #0
}
    8a3a:	pop	{r3, r4, r5, r6, r7, pc}
    8a3c:	adds	r6, r5, #4
    return m_spiDriver.receive();
    8a3e:	adds	r7, r4, #4
    8a40:	mov	r0, r7
    8a42:	bl	9eca <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    8a46:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    8a4a:	cmp	r6, r5
    8a4c:	bne.n	8a40 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    8a4e:	mov	r0, r4
    8a50:	bl	88a0 <SharedSpiCard::spiStop()>
    8a54:	movs	r0, #1
    8a56:	b.n	8a3a <SharedSpiCard::readOCR(unsigned long*)+0x1c>

00008a58 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8a58:	push	{r3, r4, r5, lr}
    8a5a:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    8a5c:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8a5e:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    8a60:	bl	8994 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8a64:	cbz	r0, 8a74 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    8a66:	movs	r3, #27
    8a68:	strb	r3, [r4, #17]
  spiStop();
    8a6a:	mov	r0, r4
  return false;
    8a6c:	movs	r5, #0
  spiStop();
    8a6e:	bl	88a0 <SharedSpiCard::spiStop()>
  return false;
    8a72:	b.n	8a8a <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    8a74:	mov	r1, r5
    8a76:	movs	r2, #16
    8a78:	mov	r0, r4
    8a7a:	bl	88f8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8a7e:	mov	r5, r0
    8a80:	cmp	r0, #0
    8a82:	beq.n	8a6a <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    8a84:	mov	r0, r4
    8a86:	bl	88a0 <SharedSpiCard::spiStop()>
}
    8a8a:	mov	r0, r5
    8a8c:	pop	{r3, r4, r5, pc}

00008a8e <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    8a8e:	mov	r2, r1
    return readRegister(CMD9, csd);
    8a90:	movs	r1, #9
    8a92:	b.w	8a58 <SharedSpiCard::readRegister(unsigned char, void*)>

00008a96 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    8a96:	mov	r2, r1
    return readRegister(CMD10, cid);
    8a98:	movs	r1, #10
    8a9a:	b.w	8a58 <SharedSpiCard::readRegister(unsigned char, void*)>

00008a9e <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    8a9e:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8aa0:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    8aa2:	mov	r5, r1
    8aa4:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8aa6:	ldr	r3, [r3, #88]	; 0x58
    8aa8:	blx	r3
    8aaa:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8aac:	mov.w	r1, #18
    8ab0:	mov	r0, r4
    sector <<= 9;
    8ab2:	it	ne
    8ab4:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    8ab6:	mov	r2, r5
    8ab8:	bl	8994 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8abc:	cbz	r0, 8acc <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    8abe:	movs	r3, #12
  spiStop();
    8ac0:	mov	r0, r4
    8ac2:	strb	r3, [r4, #17]
    8ac4:	bl	88a0 <SharedSpiCard::spiStop()>
  return false;
    8ac8:	movs	r0, #0
}
    8aca:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    8acc:	movs	r0, #1
    8ace:	strb	r0, [r4, #19]
  return true;
    8ad0:	b.n	8aca <SharedSpiCard::readStart(unsigned long)+0x2c>

00008ad2 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    8ad2:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    8ad4:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    8ad6:	movs	r1, #12
bool SharedSpiCard::readStop() {
    8ad8:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    8ada:	mov	r2, r4
  m_state = IDLE_STATE;
    8adc:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    8ade:	bl	8994 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8ae2:	cbz	r0, 8af2 <SharedSpiCard::readStop()+0x20>
    8ae4:	movs	r3, #9
  spiStop();
    8ae6:	mov	r0, r5
    8ae8:	strb	r3, [r5, #17]
    8aea:	bl	88a0 <SharedSpiCard::spiStop()>
  return false;
    8aee:	mov	r0, r4
}
    8af0:	pop	{r3, r4, r5, pc}
  spiStop();
    8af2:	mov	r0, r5
    8af4:	bl	88a0 <SharedSpiCard::spiStop()>
  return true;
    8af8:	movs	r0, #1
    8afa:	b.n	8af0 <SharedSpiCard::readStop()+0x1e>

00008afc <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    8afc:	ldrb	r2, [r0, #19]
    8afe:	cmp	r2, #2
    8b00:	bne.n	8b08 <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    8b02:	ldr	r3, [r0, #0]
    8b04:	ldr	r3, [r3, #100]	; 0x64
    8b06:	bx	r3
  if (m_state == READ_STATE) {
    8b08:	cmp	r2, #1
    8b0a:	bne.n	8b10 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    8b0c:	b.w	8ad2 <SharedSpiCard::readStop()>
}
    8b10:	movs	r0, #1
    8b12:	bx	lr

00008b14 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    8b14:	push	{r3, r4, r5, r6, r7, lr}
    8b16:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8b18:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8b1a:	mov	r4, r0
    8b1c:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8b1e:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    8b20:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8b22:	bne.n	8b2a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    8b24:	ldr	r3, [r0, #24]
    8b26:	cmp	r3, r1
    8b28:	beq.n	8b3a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    8b2a:	mov	r1, r5
    8b2c:	mov	r0, r4
    8b2e:	bl	8a9e <SharedSpiCard::readStart(unsigned long)>
    8b32:	cbnz	r0, 8b38 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    8b34:	movs	r0, #0
}
    8b36:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    8b38:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8b3a:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8b3c:	cmp	r5, r6
    8b3e:	add.w	r1, r7, r5, lsl #9
    8b42:	bne.n	8b5a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    8b44:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8b46:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8b48:	add	r3, r5
    8b4a:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8b4c:	cmp	r0, #0
    8b4e:	bne.n	8b36 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    8b50:	mov	r0, r4
}
    8b52:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    8b56:	b.w	8ad2 <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    8b5a:	mov	r0, r4
    8b5c:	bl	8960 <SharedSpiCard::readData(unsigned char*)>
    8b60:	cmp	r0, #0
    8b62:	beq.n	8b34 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8b64:	adds	r5, #1
    8b66:	b.n	8b3c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

00008b68 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8b68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b6c:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8b6e:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8b70:	mov	r4, r0
    8b72:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8b74:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8b76:	mov	r7, r2
    8b78:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    8b7c:	bne.n	8b84 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    8b7e:	ldr	r3, [r0, #24]
    8b80:	cmp	r3, r1
    8b82:	beq.n	8b96 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    8b84:	mov	r1, r5
    8b86:	mov	r0, r4
    8b88:	bl	8a9e <SharedSpiCard::readStart(unsigned long)>
    8b8c:	cbnz	r0, 8b94 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    8b8e:	movs	r0, #0
}
    8b90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8b94:	str	r5, [r4, #24]
    8b96:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8b9a:	cmp	r5, r8
    8b9c:	bne.n	8bb4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    8b9e:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8ba0:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8ba2:	add	r3, r6
    8ba4:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8ba6:	cmp	r0, #0
    8ba8:	bne.n	8b90 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    8baa:	mov	r0, r4
}
    8bac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    8bb0:	b.w	8ad2 <SharedSpiCard::readStop()>
    if (readData(dst)) {
    8bb4:	mov	r1, r7
    8bb6:	mov	r0, r4
    8bb8:	bl	8960 <SharedSpiCard::readData(unsigned char*)>
    8bbc:	cmp	r0, #0
    8bbe:	beq.n	8b8e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    8bc0:	mov	r0, r5
    8bc2:	mov	r2, sl
    8bc4:	mov	r1, r7
    8bc6:	adds	r5, #1
    8bc8:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    8bca:	b.n	8b9a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

00008bcc <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    8bcc:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8bce:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    8bd0:	mov	r5, r1
    8bd2:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8bd4:	ldr	r3, [r3, #88]	; 0x58
    8bd6:	blx	r3
    8bd8:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8bda:	mov.w	r1, #25
    8bde:	mov	r0, r4
    sector <<= 9;
    8be0:	it	ne
    8be2:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    8be4:	mov	r2, r5
    8be6:	bl	8994 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8bea:	cbz	r0, 8bfa <SharedSpiCard::writeStart(unsigned long)+0x2e>
    8bec:	movs	r3, #14
  spiStop();
    8bee:	mov	r0, r4
    8bf0:	strb	r3, [r4, #17]
    8bf2:	bl	88a0 <SharedSpiCard::spiStop()>
  return false;
    8bf6:	movs	r0, #0
}
    8bf8:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    8bfa:	movs	r3, #2
  return true;
    8bfc:	movs	r0, #1
  m_state = WRITE_STATE;
    8bfe:	strb	r3, [r4, #19]
  return true;
    8c00:	b.n	8bf8 <SharedSpiCard::writeStart(unsigned long)+0x2c>

00008c02 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8c02:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    8c04:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8c06:	mov	r6, r1
  if (!readCSD(&csd)) {
    8c08:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8c0a:	mov	r4, r0
  if (!readCSD(&csd)) {
    8c0c:	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8c0e:	mov	r5, r2
  if (!readCSD(&csd)) {
    8c10:	blx	r3
    8c12:	cbz	r0, 8c36 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
  if (!csd.v1.erase_blk_en) {
    8c14:	ldrb.w	r3, [sp, #10]
    8c18:	lsls	r2, r3, #25
    8c1a:	bmi.n	8c40 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    8c1c:	and.w	r3, r3, #63	; 0x3f
    8c20:	ldrb.w	r2, [sp, #11]
    8c24:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8c26:	orr.w	r3, r3, r2, lsr #7
    8c2a:	adds	r2, r5, #1
    8c2c:	orrs	r2, r6
    8c2e:	tst	r3, r2
    8c30:	beq.n	8c40 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    8c32:	movs	r3, #39	; 0x27
    8c34:	strb	r3, [r4, #17]
  spiStop();
    8c36:	mov	r0, r4
  return false;
    8c38:	movs	r5, #0
  spiStop();
    8c3a:	bl	88a0 <SharedSpiCard::spiStop()>
  return false;
    8c3e:	b.n	8c8e <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    8c40:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    8c42:	movs	r1, #32
    8c44:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    8c46:	cmp	r3, #3
    firstSector <<= 9;
    8c48:	itt	ne
    8c4a:	lslne	r6, r6, #9
    lastSector <<= 9;
    8c4c:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    8c4e:	mov	r2, r6
    8c50:	bl	8994 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    8c54:	cbz	r0, 8c5a <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    8c56:	movs	r3, #38	; 0x26
    8c58:	b.n	8c34 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
      || cardCommand(CMD33, lastSector)
    8c5a:	mov	r2, r5
    8c5c:	movs	r1, #33	; 0x21
    8c5e:	mov	r0, r4
    8c60:	bl	8994 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8c64:	mov	r2, r0
    8c66:	cmp	r0, #0
    8c68:	bne.n	8c56 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      || cardCommand(CMD38, 0)) {
    8c6a:	movs	r1, #38	; 0x26
    8c6c:	mov	r0, r4
    8c6e:	bl	8994 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8c72:	cmp	r0, #0
    8c74:	bne.n	8c56 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    8c76:	movw	r1, #10000	; 0x2710
    8c7a:	mov	r0, r4
    8c7c:	bl	8968 <SharedSpiCard::waitReady(unsigned short)>
    8c80:	mov	r5, r0
    8c82:	cbnz	r0, 8c88 <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    8c84:	movs	r3, #40	; 0x28
    8c86:	b.n	8c34 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    8c88:	mov	r0, r4
    8c8a:	bl	88a0 <SharedSpiCard::spiStop()>
}
    8c8e:	mov	r0, r5
    8c90:	add	sp, #16
    8c92:	pop	{r4, r5, r6, pc}

00008c94 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    8c94:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8c96:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    8c9a:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8c9c:	bl	8968 <SharedSpiCard::waitReady(unsigned short)>
    8ca0:	mov	r5, r0
    8ca2:	cbnz	r0, 8cb2 <SharedSpiCard::writeStop()+0x1e>
    8ca4:	movs	r3, #30
  spiStop();
    8ca6:	mov	r0, r4
    8ca8:	strb	r3, [r4, #17]
    8caa:	bl	88a0 <SharedSpiCard::spiStop()>
}
    8cae:	mov	r0, r5
    8cb0:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    8cb2:	movs	r1, #253	; 0xfd
    8cb4:	adds	r0, r4, #4
    8cb6:	bl	9ef6 <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    8cba:	mov	r0, r4
    8cbc:	bl	88a0 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    8cc0:	movs	r3, #0
    8cc2:	strb	r3, [r4, #19]
  return true;
    8cc4:	b.n	8cae <SharedSpiCard::writeStop()+0x1a>

00008cc6 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    8cc6:	push	{r0, r1, r2, r4, r5, lr}
    8cc8:	mov	r5, r2
    8cca:	mov	r4, r0
    8ccc:	adds	r0, #4
    8cce:	str	r0, [sp, #4]
    8cd0:	bl	9ef6 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    8cd4:	mov.w	r2, #512	; 0x200
    8cd8:	mov	r1, r5
    8cda:	ldr	r0, [sp, #4]
    8cdc:	bl	9efe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    8ce0:	movs	r1, #255	; 0xff
    8ce2:	ldr	r0, [sp, #4]
    8ce4:	bl	9ef6 <SdSpiArduinoDriver::send(unsigned char)>
    8ce8:	movs	r1, #255	; 0xff
    8cea:	ldr	r0, [sp, #4]
    8cec:	bl	9ef6 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8cf0:	ldr	r0, [sp, #4]
    8cf2:	bl	9eca <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    8cf6:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8cf8:	and.w	r0, r0, #31
    8cfc:	cmp	r0, #5
    8cfe:	beq.n	8d10 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    8d00:	movs	r3, #32
  spiStop();
    8d02:	mov	r0, r4
    8d04:	strb	r3, [r4, #17]
    8d06:	bl	88a0 <SharedSpiCard::spiStop()>
  return false;
    8d0a:	movs	r0, #0
}
    8d0c:	add	sp, #12
    8d0e:	pop	{r4, r5, pc}
  return true;
    8d10:	movs	r0, #1
    8d12:	b.n	8d0c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

00008d14 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    8d14:	push	{r0, r1, r4, lr}
    8d16:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8d18:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    8d1c:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8d1e:	bl	8968 <SharedSpiCard::waitReady(unsigned short)>
    8d22:	ldr	r2, [sp, #4]
    8d24:	cbnz	r0, 8d34 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    8d26:	movs	r3, #36	; 0x24
    8d28:	strb	r3, [r4, #17]
  spiStop();
    8d2a:	mov	r0, r4
    8d2c:	bl	88a0 <SharedSpiCard::spiStop()>
  return false;
    8d30:	movs	r0, #0
    8d32:	b.n	8d40 <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8d34:	movs	r1, #252	; 0xfc
    8d36:	mov	r0, r4
    8d38:	bl	8cc6 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8d3c:	cmp	r0, #0
    8d3e:	beq.n	8d2a <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    8d40:	add	sp, #8
    8d42:	pop	{r4, pc}

00008d44 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8d44:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8d46:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8d48:	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8d4a:	mov	r5, r1
    8d4c:	mov	r4, r0
    8d4e:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    8d50:	blx	r3
    8d52:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    8d54:	mov.w	r1, #24
    8d58:	mov	r0, r4
    sector <<= 9;
    8d5a:	it	ne
    8d5c:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    8d5e:	mov	r2, r5
    8d60:	bl	8994 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8d64:	cbz	r0, 8d74 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    8d66:	movs	r3, #13
    8d68:	strb	r3, [r4, #17]
  spiStop();
    8d6a:	mov	r0, r4
  return false;
    8d6c:	movs	r5, #0
  spiStop();
    8d6e:	bl	88a0 <SharedSpiCard::spiStop()>
  return false;
    8d72:	b.n	8d8a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    8d74:	mov	r2, r6
    8d76:	movs	r1, #254	; 0xfe
    8d78:	mov	r0, r4
    8d7a:	bl	8cc6 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8d7e:	mov	r5, r0
    8d80:	cmp	r0, #0
    8d82:	beq.n	8d6a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    8d84:	mov	r0, r4
    8d86:	bl	88a0 <SharedSpiCard::spiStop()>
}
    8d8a:	mov	r0, r5
    8d8c:	pop	{r4, r5, r6, pc}

00008d8e <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8d8e:	push	{r4}
  if (m_dedicatedSpi) {
    8d90:	ldrb	r4, [r0, #28]
    8d92:	cbz	r4, 8da2 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    8d94:	ldr	r3, [r0, #0]
    8d96:	ldr	r4, [r3, #40]	; 0x28
    8d98:	movs	r3, #1
    8d9a:	mov	ip, r4
}
    8d9c:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    8da0:	bx	ip
}
    8da2:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    8da6:	b.w	8d44 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00008daa <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    8daa:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8dae:	ldr	r5, [sp, #32]
    8db0:	mov	r6, r0
    8db2:	mov	r4, r1
    8db4:	mov	r7, r2
    8db6:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    8dba:	cmp	r4, r8
    8dbc:	bne.n	8dc4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    8dbe:	movs	r0, #1
  }
    8dc0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    8dc4:	ldr	r3, [r6, #0]
    8dc6:	mov	r2, r7
    8dc8:	mov	r1, r4
    8dca:	mov	r0, r6
    8dcc:	ldr	r3, [r3, #16]
    8dce:	add.w	r9, r4, #1
    8dd2:	blx	r3
    8dd4:	cmp	r0, #0
    8dd6:	beq.n	8dc0 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    8dd8:	mov	r0, r4
    8dda:	ldr	r2, [sp, #36]	; 0x24
    8ddc:	mov	r1, r7
    8dde:	mov	r4, r9
    8de0:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    8de2:	b.n	8dba <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

00008de4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    8de4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8de8:	mov	r5, r0
    8dea:	mov	r4, r1
    8dec:	mov	r7, r3
    8dee:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    8df0:	cmp	r4, r6
    8df2:	bne.n	8df8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    8df4:	movs	r0, #1
    8df6:	b.n	8e12 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    8df8:	ldr	r3, [r5, #0]
    8dfa:	mov	r0, r4
    8dfc:	ldr	r1, [sp, #24]
    8dfe:	ldr.w	r8, [r3, #36]	; 0x24
    8e02:	blx	r7
    8e04:	mov	r1, r4
    8e06:	mov	r2, r0
    8e08:	mov	r0, r5
    8e0a:	adds	r4, #1
    8e0c:	blx	r8
    8e0e:	cmp	r0, #0
    8e10:	bne.n	8df0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    8e12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008e16 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    8e16:	movs	r0, #0
    8e18:	bx	lr

00008e1a <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    8e1a:	movs	r0, #0
    8e1c:	bx	lr

00008e1e <SdCardInterface::setDedicatedSpi(bool)>:
  }
    8e1e:	movs	r0, #0
    8e20:	bx	lr

00008e22 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    8e22:	bx	lr

00008e24 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    8e24:	ldr	r3, [pc, #28]	; (8e44 <sdIrs()+0x20>)
    8e26:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8e28:	ldr	r2, [pc, #28]	; (8e48 <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    8e2a:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    8e2c:	ldr	r0, [r3, #48]	; 0x30
    8e2e:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    8e30:	ldr	r2, [r2, #0]
    8e32:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    8e34:	ldr	r2, [r3, #72]	; 0x48
    8e36:	bic.w	r2, r2, #129	; 0x81
    8e3a:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    8e3c:	ldr	r3, [pc, #12]	; (8e4c <sdIrs()+0x28>)
    8e3e:	strb	r1, [r3, #0]
}
    8e40:	bx	lr
    8e42:	nop
    8e44:	.word	0x402c0000
    8e48:	.word	0x2002ce4c
    8e4c:	.word	0x2002dd82

00008e50 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8e50:	ldr	r3, [pc, #24]	; (8e6c <gpioMux(unsigned char)+0x1c>)
    8e52:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    8e56:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    8e5a:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    8e5e:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    8e62:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    8e66:	str.w	r0, [r3, #456]	; 0x1c8
}
    8e6a:	bx	lr
    8e6c:	.word	0x401f8000

00008e70 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8e70:	ldr	r3, [pc, #12]	; (8e80 <isBusyCommandComplete()+0x10>)
    8e72:	ldr	r0, [pc, #16]	; (8e84 <isBusyCommandComplete()+0x14>)
    8e74:	ldr	r3, [r3, #48]	; 0x30
    8e76:	ands	r0, r3
}
    8e78:	clz	r0, r0
    8e7c:	lsrs	r0, r0, #5
    8e7e:	bx	lr
    8e80:	.word	0x402c0000
    8e84:	.word	0x000f0001

00008e88 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    8e88:	ldr	r3, [pc, #8]	; (8e94 <isBusyCommandInhibit()+0xc>)
    8e8a:	ldr	r0, [r3, #36]	; 0x24
}
    8e8c:	and.w	r0, r0, #1
    8e90:	bx	lr
    8e92:	nop
    8e94:	.word	0x402c0000

00008e98 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8e98:	ldr	r3, [pc, #12]	; (8ea8 <isBusyDat()+0x10>)
    8e9a:	ldr	r0, [r3, #36]	; 0x24
    8e9c:	eor.w	r0, r0, #16777216	; 0x1000000
}
    8ea0:	ubfx	r0, r0, #24, #1
    8ea4:	bx	lr
    8ea6:	nop
    8ea8:	.word	0x402c0000

00008eac <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8eac:	ldr	r3, [pc, #4]	; (8eb4 <isBusyDMA()+0x8>)
    8eae:	ldrb	r0, [r3, #0]
}
    8eb0:	bx	lr
    8eb2:	nop
    8eb4:	.word	0x2002dd82

00008eb8 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8eb8:	ldr	r3, [pc, #12]	; (8ec8 <isBusyFifoRead()+0x10>)
    8eba:	ldr	r0, [r3, #36]	; 0x24
    8ebc:	eor.w	r0, r0, #2048	; 0x800
}
    8ec0:	ubfx	r0, r0, #11, #1
    8ec4:	bx	lr
    8ec6:	nop
    8ec8:	.word	0x402c0000

00008ecc <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    8ecc:	ldr	r3, [pc, #12]	; (8edc <isBusyFifoWrite()+0x10>)
    8ece:	ldr	r0, [r3, #36]	; 0x24
    8ed0:	eor.w	r0, r0, #1024	; 0x400
}
    8ed4:	ubfx	r0, r0, #10, #1
    8ed8:	bx	lr
    8eda:	nop
    8edc:	.word	0x402c0000

00008ee0 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8ee0:	ldr	r3, [pc, #12]	; (8ef0 <isBusyTransferComplete()+0x10>)
    8ee2:	ldr	r0, [pc, #16]	; (8ef4 <isBusyTransferComplete()+0x14>)
    8ee4:	ldr	r3, [r3, #48]	; 0x30
    8ee6:	ands	r0, r3
}
    8ee8:	clz	r0, r0
    8eec:	lsrs	r0, r0, #5
    8eee:	bx	lr
    8ef0:	.word	0x402c0000
    8ef4:	.word	0x117f0002

00008ef8 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    8ef8:	mov.w	r3, #1000	; 0x3e8
    8efc:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8efe:	ldr	r3, [pc, #140]	; (8f8c <setSdclk(unsigned long)+0x94>)
    8f00:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8f02:	sub.w	r3, r3, #147456	; 0x24000
    8f06:	ldr.w	r1, [r3, #256]	; 0x100
    8f0a:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8f0c:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8f10:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8f14:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8f16:	udiv	r1, r1, r3
    8f1a:	ldr	r3, [pc, #116]	; (8f90 <setSdclk(unsigned long)+0x98>)
    8f1c:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8f20:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8f22:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    8f26:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    8f28:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8f2a:	lsls	r4, r2, #4
    8f2c:	udiv	r4, r3, r4
    8f30:	cmp	r4, r0
    8f32:	bls.n	8f38 <setSdclk(unsigned long)+0x40>
    8f34:	subs	r1, #1
    8f36:	bne.n	8f3e <setSdclk(unsigned long)+0x46>
    8f38:	mov	r4, r2
    8f3a:	movs	r1, #1
    8f3c:	b.n	8f46 <setSdclk(unsigned long)+0x4e>
    sdclkfs <<= 1;
    8f3e:	lsls	r2, r2, #1
    8f40:	b.n	8f2a <setSdclk(unsigned long)+0x32>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    8f42:	adds	r1, #1
    8f44:	mov	r4, r5
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8f46:	udiv	r5, r3, r4
    8f4a:	cmp	r5, r0
    8f4c:	bls.n	8f56 <setSdclk(unsigned long)+0x5e>
    8f4e:	cmp	r1, #16
    8f50:	add.w	r5, r2, r4
    8f54:	bne.n	8f42 <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8f56:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    8f5a:	subs	r1, #1
  sdclkfs >>= 1;
    8f5c:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8f5e:	muls	r4, r0
    8f60:	ldr	r0, [pc, #48]	; (8f94 <setSdclk(unsigned long)+0x9c>)
    8f62:	udiv	r3, r3, r4
    8f66:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8f68:	ldr	r0, [pc, #44]	; (8f98 <setSdclk(unsigned long)+0xa0>)
    8f6a:	ldr	r3, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    8f6c:	bic.w	r3, r3, #1044480	; 0xff000
    8f70:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8f74:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8f78:	orr.w	r3, r3, r2, lsl #8
    8f7c:	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8f80:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8f82:	ldr	r3, [r0, #36]	; 0x24
    8f84:	lsls	r3, r3, #28
    8f86:	bpl.n	8f82 <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8f88:	pop	{r4, r5, pc}
    8f8a:	nop
    8f8c:	.word	0x400fc000
    8f90:	.word	0x5e69ec00
    8f94:	.word	0x2000840c
    8f98:	.word	0x402c0000

00008f9c <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    8f9c:	ldr	r3, [pc, #4]	; (8fa4 <SdioCard::errorCode() const+0x8>)
    8f9e:	ldrb	r0, [r3, #0]
    8fa0:	bx	lr
    8fa2:	nop
    8fa4:	.word	0x20001e44

00008fa8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    8fa8:	ldr	r3, [pc, #4]	; (8fb0 <SdioCard::errorData() const+0x8>)
    8faa:	ldr	r0, [r3, #0]
}
    8fac:	bx	lr
    8fae:	nop
    8fb0:	.word	0x2002ce4c

00008fb4 <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    8fb4:	ldr	r3, [pc, #20]	; (8fcc <SdioCard::readCID(CID*)+0x18>)
    8fb6:	add.w	r2, r3, #16
    8fba:	ldr.w	r0, [r3], #4
    8fbe:	cmp	r3, r2
    8fc0:	str.w	r0, [r1], #4
    8fc4:	bne.n	8fba <SdioCard::readCID(CID*)+0x6>
  return true;
}
    8fc6:	movs	r0, #1
    8fc8:	bx	lr
    8fca:	nop
    8fcc:	.word	0x2002dcc2

00008fd0 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    8fd0:	ldr	r3, [pc, #20]	; (8fe8 <SdioCard::readCSD(csd_t*)+0x18>)
    8fd2:	add.w	r2, r3, #16
    8fd6:	ldr.w	r0, [r3], #4
    8fda:	cmp	r3, r2
    8fdc:	str.w	r0, [r1], #4
    8fe0:	bne.n	8fd6 <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    8fe2:	movs	r0, #1
    8fe4:	bx	lr
    8fe6:	nop
    8fe8:	.word	0x2002dcd2

00008fec <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8fec:	ldr	r3, [pc, #8]	; (8ff8 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    8fee:	movs	r0, #1
  *ocr = m_ocr;
    8ff0:	ldr	r3, [r3, #0]
    8ff2:	str	r3, [r1, #0]
}
    8ff4:	bx	lr
    8ff6:	nop
    8ff8:	.word	0x2002c634

00008ffc <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    8ffc:	bx	lr
	...

00009000 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    9000:	push	{r3, r4, r5, r6, r7, lr}
    9002:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9004:	ldr	r7, [pc, #24]	; (9020 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    9006:	bl	b484 <micros>
    900a:	mov	r6, r0
  while (fcn()) {
    900c:	blx	r5
    900e:	mov	r4, r0
    9010:	cbz	r0, 901c <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9012:	bl	b484 <micros>
    9016:	subs	r0, r0, r6
    9018:	cmp	r0, r7
    901a:	bls.n	900c <waitTimeout(bool (*)())+0xc>
}
    901c:	mov	r0, r4
    901e:	pop	{r3, r4, r5, r6, r7, pc}
    9020:	.word	0x000f4240

00009024 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    9024:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    9028:	ldr	r7, [pc, #44]	; (9058 <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    902a:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    902c:	ldr.w	r8, [pc, #44]	; 905c <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    9030:	str	r0, [r7, #0]
  uint32_t m = micros();
    9032:	bl	b484 <micros>
    9036:	mov	r6, r0
  while (fcn()) {
    9038:	blx	r5
    903a:	mov	r4, r0
    903c:	cbnz	r0, 9048 <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    903e:	movs	r3, #0
}
    9040:	mov	r0, r4
      m_busyFcn = 0;
    9042:	str	r3, [r7, #0]
}
    9044:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9048:	bl	b484 <micros>
    904c:	subs	r0, r0, r6
    904e:	cmp	r0, r8
    9050:	bhi.n	903e <yieldTimeout(bool (*)())+0x1a>
    yield();
    9052:	bl	c14c <yield>
    9056:	b.n	9038 <yieldTimeout(bool (*)())+0x14>
    9058:	.word	0x2002ce48
    905c:	.word	0x000f4240

00009060 <SdioCard::~SdioCard()>:
    9060:	push	{r4, lr}
    9062:	mov	r4, r0
    9064:	movs	r1, #12
    9066:	bl	c6b4 <operator delete(void*, unsigned int)>
    906a:	mov	r0, r4
    906c:	pop	{r4, pc}
	...

00009070 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    9070:	push	{r3, lr}
    gpioMux(0);
    9072:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9074:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    9078:	bl	8e50 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    907c:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9080:	ldr	r3, [pc, #24]	; (909c <enableGPIO(bool) [clone .part.0]+0x2c>)
    9082:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    9086:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    908a:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    908e:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    9092:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    9096:	str.w	r2, [r3, #952]	; 0x3b8
}
    909a:	pop	{r3, pc}
    909c:	.word	0x401f8000

000090a0 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    90a0:	ldr	r3, [pc, #184]	; (915c <initSDHC()+0xbc>)
    gpioMux(5);
    90a2:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    90a4:	ldr.w	r2, [r3, #256]	; 0x100
    90a8:	orr.w	r2, r2, #128	; 0x80
static void initSDHC() {
    90ac:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    90ae:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    90b2:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    90b6:	ldr	r4, [pc, #168]	; (9160 <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    90b8:	bic.w	r2, r2, #63	; 0x3f
    90bc:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    90c0:	ldr.w	r2, [r3, #256]	; 0x100
    90c4:	orr.w	r2, r2, #24
    90c8:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    90cc:	ldr.w	r2, [r3, #256]	; 0x100
    90d0:	bic.w	r2, r2, #128	; 0x80
    90d4:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    90d8:	add.w	r3, r3, #147456	; 0x24000
    90dc:	ldr.w	r2, [r3, #128]	; 0x80
    90e0:	orr.w	r2, r2, #12
    90e4:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    90e8:	ldr	r2, [r3, #36]	; 0x24
    90ea:	bic.w	r2, r2, #14336	; 0x3800
    90ee:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    90f0:	ldr	r2, [r3, #28]
    90f2:	orr.w	r2, r2, #65536	; 0x10000
    90f6:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    90f8:	ldr	r2, [r3, #36]	; 0x24
    90fa:	orr.w	r2, r2, #2048	; 0x800
    90fe:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    9100:	bl	8e50 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    9104:	ldr	r3, [r4, #72]	; 0x48
    9106:	orr.w	r3, r3, #2147483648	; 0x80000000
    910a:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    910c:	ldr	r3, [r4, #44]	; 0x2c
    910e:	orr.w	r3, r3, #16777216	; 0x1000000
    9112:	orr.w	r3, r3, #32768	; 0x8000
    9116:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    9118:	ldr	r3, [r4, #44]	; 0x2c
    911a:	lsls	r2, r3, #7
    911c:	bmi.n	9118 <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    911e:	mov.w	r0, #400	; 0x190
    9122:	bl	8ef8 <setSdclk(unsigned long)>
  if (enable) {
    9126:	bl	9070 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    912a:	ldr	r3, [pc, #56]	; (9164 <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    912c:	ldr	r2, [pc, #56]	; (9168 <initSDHC()+0xc8>)
    912e:	str	r3, [r4, #52]	; 0x34
    9130:	ldr	r3, [pc, #56]	; (916c <initSDHC()+0xcc>)
    9132:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    9136:	ldr	r3, [pc, #56]	; (9170 <initSDHC()+0xd0>)
    9138:	movs	r2, #96	; 0x60
    913a:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    913e:	mov.w	r3, #3758153728	; 0xe000e000
    9142:	mov.w	r2, #16384	; 0x4000
    9146:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    914a:	ldr	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    914c:	ldr	r2, [pc, #16]	; (9160 <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    914e:	orr.w	r3, r3, #134217728	; 0x8000000
    9152:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9154:	ldr	r3, [r2, #44]	; 0x2c
    9156:	lsls	r3, r3, #4
    9158:	bmi.n	9154 <initSDHC()+0xb4>
}
    915a:	pop	{r4, pc}
    915c:	.word	0x400d8000
    9160:	.word	0x402c0000
    9164:	.word	0x117f000b
    9168:	.word	0x00008e25
    916c:	.word	0x20002000
    9170:	.word	0xe000e400

00009174 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    9174:	ldr	r3, [pc, #16]	; (9188 <SdioCard::type() const+0x14>)
    9176:	ldrb	r3, [r3, #0]
    9178:	cbz	r3, 9184 <SdioCard::type() const+0x10>
    917a:	ldr	r3, [pc, #16]	; (918c <SdioCard::type() const+0x18>)
    917c:	ldrb	r0, [r3, #0]
    917e:	adds	r0, #2
    9180:	uxtb	r0, r0
    9182:	bx	lr
    9184:	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    9186:	bx	lr
    9188:	.word	0x2002dcbf
    918c:	.word	0x2002dcc0

00009190 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    9190:	push	{r3, r4, r5, lr}
    9192:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    9194:	ldr	r0, [pc, #80]	; (91e8 <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    9196:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    9198:	bl	9000 <waitTimeout(bool (*)())>
    919c:	cbnz	r0, 91de <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    919e:	ldr	r3, [pc, #76]	; (91ec <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    91a0:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    91a2:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    91a4:	bpl.n	91b6 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    91a6:	ldr	r2, [r3, #72]	; 0x48
    91a8:	bic.w	r2, r2, #255	; 0xff
    91ac:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    91ae:	uxtb	r2, r4
    91b0:	ldr	r1, [r3, #72]	; 0x48
    91b2:	orrs	r2, r1
    91b4:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    91b6:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    91ba:	ldr	r5, [pc, #48]	; (91ec <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    91bc:	ldr	r0, [pc, #48]	; (91f0 <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    91be:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    91c0:	bl	9000 <waitTimeout(bool (*)())>
    91c4:	cbnz	r0, 91de <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    91c6:	ldr	r2, [r5, #48]	; 0x30
    91c8:	ldr	r3, [pc, #40]	; (91f4 <cardCommand(unsigned long, unsigned long)+0x64>)
    91ca:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    91cc:	ldr	r2, [r3, #0]
    91ce:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    91d0:	ldr	r2, [r3, #0]
    91d2:	lsls	r2, r2, #31
    91d4:	bpl.n	91de <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    91d6:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    91d8:	tst.w	r3, #983040	; 0xf0000
    91dc:	beq.n	91e2 <cardCommand(unsigned long, unsigned long)+0x52>
    91de:	movs	r0, #0
}
    91e0:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    91e2:	movs	r0, #1
    91e4:	b.n	91e0 <cardCommand(unsigned long, unsigned long)+0x50>
    91e6:	nop
    91e8:	.word	0x00008e89
    91ec:	.word	0x402c0000
    91f0:	.word	0x00008e71
    91f4:	.word	0x2002ce4c

000091f8 <statusCMD13()>:
static uint32_t statusCMD13() {
    91f8:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    91fa:	ldr	r3, [pc, #16]	; (920c <statusCMD13()+0x14>)
    91fc:	ldr	r0, [pc, #16]	; (9210 <statusCMD13()+0x18>)
    91fe:	ldr	r1, [r3, #0]
    9200:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9204:	cbz	r0, 920a <statusCMD13()+0x12>
    9206:	ldr	r3, [pc, #12]	; (9214 <statusCMD13()+0x1c>)
    9208:	ldr	r0, [r3, #16]
}
    920a:	pop	{r3, pc}
    920c:	.word	0x2002c638
    9210:	.word	0x0d1a0000
    9214:	.word	0x402c0000

00009218 <isBusyCMD13()>:
static bool isBusyCMD13() {
    9218:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    921a:	bl	91f8 <statusCMD13()>
    921e:	eor.w	r0, r0, #256	; 0x100
}
    9222:	ubfx	r0, r0, #8, #1
    9226:	pop	{r3, pc}

00009228 <SdioCard::status()>:
  return statusCMD13();
    9228:	b.w	91f8 <statusCMD13()>

0000922c <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    922c:	ldr	r3, [pc, #76]	; (927c <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    922e:	push	{r4, r5, lr}
    9230:	mov	r4, r1
    9232:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    9234:	ldr	r1, [r3, #0]
    9236:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    923a:	cbz	r0, 9278 <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    923c:	ldr	r3, [pc, #64]	; (9280 <readReg16(unsigned long, void*)+0x54>)
    923e:	add.w	r5, r4, #15
    9242:	ldr	r2, [r3, #16]
    9244:	str	r2, [sp, #0]
    9246:	ldr	r2, [r3, #20]
    9248:	str	r2, [sp, #4]
    924a:	ldr	r2, [r3, #24]
    924c:	str	r2, [sp, #8]
    924e:	ldr	r3, [r3, #28]
    9250:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    9252:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9254:	bic.w	r2, r3, #3
    9258:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    925c:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    925e:	adds	r2, #16
    9260:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    9262:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9264:	add	r2, sp
    9266:	ldr.w	r2, [r2, #-16]
    926a:	lsr.w	r2, r2, r1
    926e:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    9272:	bne.n	9254 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    9274:	movs	r3, #0
    9276:	strb	r3, [r4, #15]
}
    9278:	add	sp, #20
    927a:	pop	{r4, r5, pc}
    927c:	.word	0x2002c638
    9280:	.word	0x402c0000

00009284 <waitDmaStatus()>:
static bool waitDmaStatus() {
    9284:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    9286:	ldr	r0, [pc, #32]	; (92a8 <waitDmaStatus()+0x24>)
    9288:	bl	9024 <yieldTimeout(bool (*)())>
    928c:	cbnz	r0, 92a4 <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    928e:	ldr	r3, [pc, #28]	; (92ac <waitDmaStatus()+0x28>)
    9290:	ldr	r2, [r3, #0]
    9292:	lsls	r2, r2, #30
    9294:	bpl.n	92a2 <waitDmaStatus()+0x1e>
    9296:	ldr	r2, [r3, #0]
    9298:	ldr	r3, [pc, #20]	; (92b0 <waitDmaStatus()+0x2c>)
    929a:	tst	r2, r3
    929c:	ite	eq
    929e:	moveq	r0, #1
    92a0:	movne	r0, #0
}
    92a2:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    92a4:	movs	r0, #0
    92a6:	b.n	92a2 <waitDmaStatus()+0x1e>
    92a8:	.word	0x00008ead
    92ac:	.word	0x2002ce4c
    92b0:	.word	0x117f0000

000092b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    92b4:	push	{r3, r4, r5, r6, r7, lr}
    92b6:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    92b8:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    92ba:	mov	r7, r0
    92bc:	mov	r4, r1
    92be:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    92c0:	bne.n	92c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    92c2:	cbnz	r5, 92d6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    92c4:	ldr	r3, [pc, #96]	; (9328 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    92c6:	movs	r2, #37	; 0x25
    92c8:	strb	r2, [r3, #0]
  m_errorLine = line;
    92ca:	movw	r2, #501	; 0x1f5
    92ce:	ldr	r3, [pc, #92]	; (932c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    92d0:	str	r2, [r3, #0]
}
    92d2:	movs	r0, #0
    92d4:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    92d6:	ldr	r0, [pc, #88]	; (9330 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    92d8:	bl	9024 <yieldTimeout(bool (*)())>
    92dc:	cbz	r0, 92ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    92de:	ldr	r3, [pc, #72]	; (9328 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    92e0:	movs	r2, #10
    92e2:	strb	r2, [r3, #0]
  m_errorLine = line;
    92e4:	mov.w	r2, #504	; 0x1f8
    92e8:	ldr	r3, [pc, #64]	; (932c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    92ea:	b.n	92d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    92ec:	ldr	r3, [pc, #68]	; (9334 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    92ee:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    92f0:	ldr	r1, [pc, #68]	; (9338 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    92f2:	strb	r2, [r3, #0]
  m_irqstat = 0;
    92f4:	ldr	r3, [pc, #68]	; (933c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    92f6:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    92f8:	ldr	r3, [pc, #68]	; (9340 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    92fa:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    92fc:	and.w	r3, r3, r5, lsl #16
    9300:	orr.w	r3, r3, #512	; 0x200
    9304:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9306:	ldr	r3, [pc, #60]	; (9344 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    9308:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    930a:	ldr	r3, [pc, #60]	; (9348 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    930c:	ldrb	r3, [r3, #0]
    930e:	cbnz	r3, 9312 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    9310:	lsls	r4, r4, #9
    9312:	mov	r1, r4
    9314:	mov	r0, r7
    9316:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    931a:	cmp	r0, #0
    931c:	beq.n	92d2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    931e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    9322:	b.w	9284 <waitDmaStatus()>
    9326:	nop
    9328:	.word	0x20001e44
    932c:	.word	0x2002c414
    9330:	.word	0x00009219
    9334:	.word	0x2002dd82
    9338:	.word	0x402c0000
    933c:	.word	0x2002ce4c
    9340:	.word	0x1fff0000
    9344:	.word	0x117f0002
    9348:	.word	0x2002dcc0

0000934c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    934c:	push	{r3, r4, r5, r6, r7, lr}
    934e:	mov	r7, r0
  bool useDma() {return m_options & DMA_SDIO;}
    9350:	ldrb	r0, [r0, #8]
    9352:	mov	r4, r1
    9354:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9356:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9358:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    935a:	bmi.n	937a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    935c:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    935e:	cmp	r4, r6
    9360:	beq.n	9384 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    9362:	ldr	r3, [r7, #0]
    9364:	mov	r2, r5
    9366:	mov	r1, r4
    9368:	mov	r0, r7
    936a:	ldr	r3, [r3, #16]
    936c:	adds	r4, #1
    936e:	add.w	r5, r5, #512	; 0x200
    9372:	blx	r3
    9374:	cmp	r0, #0
    9376:	bne.n	935e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    9378:	b.n	9396 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    937a:	lsls	r0, r2, #30
    937c:	beq.n	93a2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    937e:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9380:	cmp	r4, r6
    9382:	bne.n	9388 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    9384:	movs	r0, #1
    9386:	b.n	9398 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    9388:	ldr	r3, [r7, #0]
    938a:	mov	r2, r5
    938c:	mov	r1, r4
    938e:	mov	r0, r7
    9390:	ldr	r3, [r3, #16]
    9392:	blx	r3
    9394:	cbnz	r0, 939a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    9396:	movs	r0, #0
}
    9398:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    939a:	adds	r4, #1
    939c:	add.w	r5, r5, #512	; 0x200
    93a0:	b.n	9380 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    93a2:	ldr	r0, [pc, #24]	; (93bc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    93a4:	bl	92b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    93a8:	cmp	r0, #0
    93aa:	bne.n	9384 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    93ac:	ldr	r3, [pc, #16]	; (93c0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    93ae:	movs	r2, #12
    93b0:	strb	r2, [r3, #0]
  m_errorLine = line;
    93b2:	movw	r2, #929	; 0x3a1
    93b6:	ldr	r3, [pc, #12]	; (93c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    93b8:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    93ba:	b.n	9398 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    93bc:	.word	0x123a0037
    93c0:	.word	0x20001e44
    93c4:	.word	0x2002c414

000093c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    93c8:	push	{r3, r4, r5, r6, r7, lr}
    93ca:	mov	r7, r0
    93cc:	ldrb	r0, [r0, #8]
    93ce:	mov	r4, r1
    93d0:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    93d2:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    93d4:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    93d6:	bmi.n	93f6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    93d8:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    93da:	cmp	r4, r6
    93dc:	beq.n	9400 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    93de:	ldr	r3, [r7, #0]
    93e0:	mov	r2, r5
    93e2:	mov	r1, r4
    93e4:	mov	r0, r7
    93e6:	ldr	r3, [r3, #36]	; 0x24
    93e8:	adds	r4, #1
    93ea:	add.w	r5, r5, #512	; 0x200
    93ee:	blx	r3
    93f0:	cmp	r0, #0
    93f2:	bne.n	93da <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    93f4:	b.n	9412 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    93f6:	lsls	r0, r2, #30
    93f8:	beq.n	941e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    93fa:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    93fc:	cmp	r4, r6
    93fe:	bne.n	9404 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    9400:	movs	r0, #1
    9402:	b.n	9414 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    9404:	ldr	r3, [r7, #0]
    9406:	mov	r2, r5
    9408:	mov	r1, r4
    940a:	mov	r0, r7
    940c:	ldr	r3, [r3, #36]	; 0x24
    940e:	blx	r3
    9410:	cbnz	r0, 9416 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    9412:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    9414:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9416:	adds	r4, #1
    9418:	add.w	r5, r5, #512	; 0x200
    941c:	b.n	93fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    941e:	ldr	r0, [pc, #24]	; (9438 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    9420:	bl	92b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9424:	cmp	r0, #0
    9426:	bne.n	9400 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    9428:	ldr	r3, [pc, #16]	; (943c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    942a:	movs	r2, #14
    942c:	strb	r2, [r3, #0]
  m_errorLine = line;
    942e:	movw	r2, #1085	; 0x43d
    9432:	ldr	r3, [pc, #12]	; (9440 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    9434:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    9436:	b.n	9414 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    9438:	.word	0x193a0027
    943c:	.word	0x20001e44
    9440:	.word	0x2002c414

00009444 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    9444:	ldr	r2, [pc, #88]	; (94a0 <SdioCard::sectorCount()+0x5c>)
    9446:	ldrb	r3, [r2, #0]
    9448:	ands.w	r3, r3, #192	; 0xc0
    944c:	bne.n	9480 <SdioCard::sectorCount()+0x3c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    944e:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9450:	ldrb	r0, [r2, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9452:	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    9456:	ldrb	r1, [r2, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9458:	lsls	r0, r0, #2
    945a:	orr.w	r0, r0, r3, lsl #10
    945e:	ldrb	r3, [r2, #8]
    9460:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9464:	ldrb	r3, [r2, #9]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9466:	ldrb	r2, [r2, #5]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9468:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    946c:	adds	r0, #1
    946e:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    9472:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9474:	orr.w	r3, r3, r1, lsr #7
    9478:	add	r3, r2
    947a:	subs	r3, #7
    947c:	lsls	r0, r3
    947e:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    9480:	cmp	r3, #64	; 0x40
    9482:	bne.n	949c <SdioCard::sectorCount()+0x58>
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9484:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9486:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9488:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    948a:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    948e:	add.w	r0, r0, r3, lsl #16
    9492:	ldrb	r3, [r2, #8]
    9494:	add.w	r0, r0, r3, lsl #8
    9498:	lsls	r0, r0, #10
    949a:	bx	lr
  } else {
    return 0;
    949c:	movs	r0, #0
}
    949e:	bx	lr
    94a0:	.word	0x2002dcd2

000094a4 <SdioCard::isBusy()>:
    94a4:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    94a6:	lsls	r3, r3, #31
    94a8:	bpl.n	94bc <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    94aa:	ldr	r3, [pc, #40]	; (94d4 <SdioCard::isBusy()+0x30>)
    94ac:	ldr	r3, [r3, #0]
    94ae:	cbz	r3, 94b2 <SdioCard::isBusy()+0xe>
    94b0:	bx	r3
    94b2:	ldr	r3, [pc, #36]	; (94d8 <SdioCard::isBusy()+0x34>)
    94b4:	ldrb	r0, [r3, #0]
    94b6:	cbz	r0, 94d2 <SdioCard::isBusy()+0x2e>
    94b8:	b.w	9218 <isBusyCMD13()>
    if (m_transferActive) {
    94bc:	ldr	r3, [pc, #28]	; (94dc <SdioCard::isBusy()+0x38>)
    94be:	ldrb	r3, [r3, #0]
    94c0:	cbz	r3, 94c6 <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    94c2:	b.w	8ee0 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    94c6:	ldr	r3, [pc, #24]	; (94e0 <SdioCard::isBusy()+0x3c>)
    94c8:	ldr	r0, [r3, #36]	; 0x24
    94ca:	eor.w	r0, r0, #16777216	; 0x1000000
    94ce:	ubfx	r0, r0, #24, #1
}
    94d2:	bx	lr
    94d4:	.word	0x2002ce48
    94d8:	.word	0x2002dcbe
    94dc:	.word	0x2002dcc1
    94e0:	.word	0x402c0000

000094e4 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    94e4:	push	{r3, r4, r5, lr}
    94e6:	mov	r5, r2
  if (!m_csd.v1.erase_blk_en) {
    94e8:	ldr	r2, [pc, #160]	; (958c <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    94ea:	ldrb	r3, [r2, #10]
    94ec:	ands.w	r4, r3, #64	; 0x40
    94f0:	bne.n	9518 <SdioCard::erase(unsigned long, unsigned long)+0x34>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    94f2:	and.w	r3, r3, #63	; 0x3f
    94f6:	ldrb	r2, [r2, #11]
    94f8:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    94fa:	orr.w	r3, r3, r2, lsr #7
    94fe:	adds	r2, r5, #1
    9500:	orrs	r2, r1
    9502:	tst	r3, r2
    9504:	beq.n	9518 <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    9506:	ldr	r3, [pc, #136]	; (9590 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9508:	movs	r2, #39	; 0x27
    950a:	strb	r2, [r3, #0]
  m_errorLine = line;
    950c:	movw	r2, #770	; 0x302
    9510:	ldr	r3, [pc, #128]	; (9594 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9512:	str	r2, [r3, #0]
}
    9514:	mov	r0, r4
    9516:	pop	{r3, r4, r5, pc}
  if (!m_highCapacity) {
    9518:	ldr	r3, [pc, #124]	; (9598 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    951a:	ldrb	r3, [r3, #0]
    951c:	cbnz	r3, 9522 <SdioCard::erase(unsigned long, unsigned long)+0x3e>
    firstSector <<= 9;
    951e:	lsls	r1, r1, #9
    lastSector <<= 9;
    9520:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    9522:	ldr	r0, [pc, #120]	; (959c <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    9524:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9528:	mov	r4, r0
    952a:	cbnz	r0, 953a <SdioCard::erase(unsigned long, unsigned long)+0x56>
  m_errorCode = code;
    952c:	ldr	r3, [pc, #96]	; (9590 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    952e:	movs	r2, #15
    9530:	strb	r2, [r3, #0]
  m_errorLine = line;
    9532:	movw	r2, #778	; 0x30a
    9536:	ldr	r3, [pc, #92]	; (9594 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9538:	b.n	9512 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    953a:	mov	r1, r5
    953c:	ldr	r0, [pc, #96]	; (95a0 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    953e:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9542:	mov	r4, r0
    9544:	cbnz	r0, 9554 <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    9546:	ldr	r3, [pc, #72]	; (9590 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9548:	movs	r2, #16
    954a:	strb	r2, [r3, #0]
  m_errorLine = line;
    954c:	movw	r2, #781	; 0x30d
    9550:	ldr	r3, [pc, #64]	; (9594 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9552:	b.n	9512 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    9554:	movs	r1, #0
    9556:	ldr	r0, [pc, #76]	; (95a4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    9558:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    955c:	mov	r4, r0
    955e:	cbnz	r0, 956e <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    9560:	ldr	r3, [pc, #44]	; (9590 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9562:	movs	r2, #17
    9564:	strb	r2, [r3, #0]
  m_errorLine = line;
    9566:	mov.w	r2, #784	; 0x310
    956a:	ldr	r3, [pc, #40]	; (9594 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    956c:	b.n	9512 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (waitTimeout(isBusyCMD13)) {
    956e:	ldr	r0, [pc, #56]	; (95a8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    9570:	bl	9000 <waitTimeout(bool (*)())>
    9574:	cmp	r0, #0
    9576:	beq.n	9514 <SdioCard::erase(unsigned long, unsigned long)+0x30>
  m_errorCode = code;
    9578:	ldr	r3, [pc, #20]	; (9590 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    957a:	movs	r2, #40	; 0x28
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    957c:	movs	r4, #0
  m_errorCode = code;
    957e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9580:	movw	r2, #787	; 0x313
    9584:	ldr	r3, [pc, #12]	; (9594 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9586:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9588:	b.n	9514 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    958a:	nop
    958c:	.word	0x2002dcd2
    9590:	.word	0x20001e44
    9594:	.word	0x2002c414
    9598:	.word	0x2002dcc0
    959c:	.word	0x201a0000
    95a0:	.word	0x211a0000
    95a4:	.word	0x261b0000
    95a8:	.word	0x00009219

000095ac <waitTransferComplete()>:
static bool waitTransferComplete() {
    95ac:	push	{r4, lr}
  if (!m_transferActive) {
    95ae:	ldr	r4, [pc, #60]	; (95ec <waitTransferComplete()+0x40>)
    95b0:	ldrb	r3, [r4, #0]
    95b2:	cbnz	r3, 95b8 <waitTransferComplete()+0xc>
    return true;
    95b4:	movs	r0, #1
}
    95b6:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    95b8:	ldr	r0, [pc, #52]	; (95f0 <waitTransferComplete()+0x44>)
    95ba:	bl	9000 <waitTimeout(bool (*)())>
  m_transferActive = false;
    95be:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    95c0:	ldr	r2, [pc, #48]	; (95f4 <waitTransferComplete()+0x48>)
  m_transferActive = false;
    95c2:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    95c4:	ldr	r1, [r2, #48]	; 0x30
    95c6:	ldr	r3, [pc, #48]	; (95f8 <waitTransferComplete()+0x4c>)
    95c8:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    95ca:	ldr	r1, [r3, #0]
    95cc:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    95ce:	cbnz	r0, 95d8 <waitTransferComplete()+0x2c>
    95d0:	ldr	r2, [r3, #0]
    95d2:	ldr	r3, [pc, #40]	; (95fc <waitTransferComplete()+0x50>)
    95d4:	tst	r2, r3
    95d6:	beq.n	95b4 <waitTransferComplete()+0x8>
  m_errorCode = code;
    95d8:	ldr	r3, [pc, #36]	; (9600 <waitTransferComplete()+0x54>)
    95da:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    95dc:	movs	r0, #0
  m_errorCode = code;
    95de:	strb	r2, [r3, #0]
  m_errorLine = line;
    95e0:	movw	r2, #634	; 0x27a
    95e4:	ldr	r3, [pc, #28]	; (9604 <waitTransferComplete()+0x58>)
    95e6:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    95e8:	b.n	95b6 <waitTransferComplete()+0xa>
    95ea:	nop
    95ec:	.word	0x2002dcc1
    95f0:	.word	0x00008ee1
    95f4:	.word	0x402c0000
    95f8:	.word	0x2002ce4c
    95fc:	.word	0x117f0000
    9600:	.word	0x20001e44
    9604:	.word	0x2002c414

00009608 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9608:	push	{r4, r5, r6, r7, lr}
    960a:	ldrb	r5, [r0, #8]
    960c:	sub.w	sp, sp, #516	; 0x204
    9610:	mov	r4, r0
    9612:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9614:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9618:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    961a:	beq.n	9654 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    961c:	lsls	r3, r2, #30
    961e:	beq.n	962e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    9620:	mov	r1, r6
      ptr = aligned;
    9622:	mov	r6, sp
      memcpy(aligned, src, 512);
    9624:	mov.w	r2, #512	; 0x200
    9628:	mov	r0, sp
    962a:	bl	9f88 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    962e:	movs	r3, #1
    9630:	mov	r2, r6
    9632:	mov	r1, r7
    9634:	ldr	r0, [pc, #104]	; (96a0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    9636:	bl	92b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    963a:	mov	r5, r0
    963c:	cbnz	r0, 964c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    963e:	ldr	r3, [pc, #100]	; (96a4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    9640:	movs	r2, #13
    9642:	strb	r2, [r3, #0]
  m_errorLine = line;
    9644:	movw	r2, #1041	; 0x411
    9648:	ldr	r3, [pc, #92]	; (96a8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    964a:	str	r2, [r3, #0]
}
    964c:	mov	r0, r5
    964e:	add.w	sp, sp, #516	; 0x204
    9652:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    9654:	bl	95ac <waitTransferComplete()>
    9658:	cmp	r0, #0
    965a:	beq.n	964c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    965c:	ldrb	r3, [r4, #9]
    965e:	cmp	r3, #2
    9660:	bne.n	9668 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    9662:	ldr	r3, [r4, #4]
    9664:	cmp	r3, r7
    9666:	beq.n	9688 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    9668:	ldr	r3, [r4, #0]
    966a:	mov	r0, r4
    966c:	ldr	r3, [r3, #32]
    966e:	blx	r3
    9670:	cmp	r0, #0
    9672:	beq.n	964c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    9674:	ldr	r3, [r4, #0]
    9676:	mov	r1, r7
    9678:	mov	r0, r4
    967a:	ldr	r3, [r3, #96]	; 0x60
    967c:	blx	r3
    967e:	cmp	r0, #0
    9680:	beq.n	964c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    9682:	movs	r3, #2
      m_curSector = sector;
    9684:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    9686:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    9688:	ldr	r3, [r4, #0]
    968a:	mov	r1, r6
    968c:	mov	r0, r4
    968e:	ldr	r3, [r3, #92]	; 0x5c
    9690:	blx	r3
    9692:	cmp	r0, #0
    9694:	beq.n	964c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    9696:	ldr	r3, [r4, #4]
  return true;
    9698:	mov	r5, r0
    m_curSector++;
    969a:	adds	r3, #1
    969c:	str	r3, [r4, #4]
    969e:	b.n	964c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    96a0:	.word	0x183a0001
    96a4:	.word	0x20001e44
    96a8:	.word	0x2002c414

000096ac <SdioCard::readStop()>:
bool SdioCard::readStop() {
    96ac:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    96ae:	ldr	r4, [pc, #92]	; (970c <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    96b0:	movs	r1, #0
    96b2:	ldr	r0, [pc, #92]	; (9710 <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    96b4:	ldr	r3, [r4, #40]	; 0x28
    96b6:	bic.w	r3, r3, #65536	; 0x10000
    96ba:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    96bc:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    96c0:	mov	r5, r0
    96c2:	cbnz	r0, 96d6 <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    96c4:	ldr	r3, [pc, #76]	; (9714 <SdioCard::readStop()+0x68>)
    96c6:	movs	r2, #9
    96c8:	strb	r2, [r3, #0]
  m_errorLine = line;
    96ca:	movw	r2, #573	; 0x23d
    96ce:	ldr	r3, [pc, #72]	; (9718 <SdioCard::readStop()+0x6c>)
    96d0:	str	r2, [r3, #0]
}
    96d2:	mov	r0, r5
    96d4:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    96d6:	ldr	r0, [pc, #68]	; (971c <SdioCard::readStop()+0x70>)
    96d8:	bl	9024 <yieldTimeout(bool (*)())>
    96dc:	cbz	r0, 96f0 <SdioCard::readStop()+0x44>
  m_errorCode = code;
    96de:	ldr	r3, [pc, #52]	; (9714 <SdioCard::readStop()+0x68>)
    96e0:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    96e2:	movs	r5, #0
  m_errorCode = code;
    96e4:	strb	r2, [r3, #0]
  m_errorLine = line;
    96e6:	mov.w	r2, #576	; 0x240
    96ea:	ldr	r3, [pc, #44]	; (9718 <SdioCard::readStop()+0x6c>)
    96ec:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    96ee:	b.n	96d2 <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    96f0:	ldr	r3, [r4, #36]	; 0x24
    96f2:	lsls	r3, r3, #30
    96f4:	bpl.n	96d2 <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    96f6:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    96f8:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    96fa:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    96fc:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9700:	orr.w	r2, r2, #67108864	; 0x4000000
    9704:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    9706:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    9708:	str	r3, [r4, #40]	; 0x28
    970a:	b.n	96d2 <SdioCard::readStop()+0x26>
    970c:	.word	0x402c0000
    9710:	.word	0x0cdb0000
    9714:	.word	0x20001e44
    9718:	.word	0x2002c414
    971c:	.word	0x00008e99

00009720 <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    9720:	push	{r4, r5, r6, lr}
    9722:	mov	r4, r1
  if (!waitTransferComplete()) {
    9724:	bl	95ac <waitTransferComplete()>
    9728:	mov	r5, r0
    972a:	cbz	r0, 9764 <SdioCard::writeData(unsigned char const*)+0x44>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    972c:	ldr	r3, [pc, #100]	; (9794 <SdioCard::writeData(unsigned char const*)+0x74>)
    972e:	ldr	r2, [r3, #36]	; 0x24
    9730:	lsls	r2, r2, #23
    9732:	bmi.n	9744 <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9734:	ldr	r2, [r3, #40]	; 0x28
    9736:	bic.w	r2, r2, #65536	; 0x10000
    973a:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    973c:	ldr	r2, [r3, #40]	; 0x28
    973e:	orr.w	r2, r2, #131072	; 0x20000
    9742:	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9744:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    9746:	ldr	r0, [pc, #80]	; (9798 <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9748:	orr.w	r2, r2, #65536	; 0x10000
    974c:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    974e:	bl	9000 <waitTimeout(bool (*)())>
    9752:	cbz	r0, 9768 <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    9754:	ldr	r3, [pc, #68]	; (979c <SdioCard::writeData(unsigned char const*)+0x7c>)
    9756:	movs	r2, #33	; 0x21
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    9758:	movs	r5, #0
  m_errorCode = code;
    975a:	strb	r2, [r3, #0]
  m_errorLine = line;
    975c:	mov.w	r2, #1016	; 0x3f8
    9760:	ldr	r3, [pc, #60]	; (97a0 <SdioCard::writeData(unsigned char const*)+0x80>)
    9762:	str	r2, [r3, #0]
}
    9764:	mov	r0, r5
    9766:	pop	{r4, r5, r6, pc}
    9768:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    976c:	ldr	r2, [pc, #36]	; (9794 <SdioCard::writeData(unsigned char const*)+0x74>)
    976e:	ldr	r3, [r2, #36]	; 0x24
    9770:	lsls	r3, r3, #21
    9772:	bpl.n	976e <SdioCard::writeData(unsigned char const*)+0x4e>
    9774:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9776:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    977a:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    977e:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    9780:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9782:	bne.n	977a <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    9784:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9786:	cmp	r4, r1
    9788:	bne.n	976e <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    978a:	ldr	r3, [pc, #24]	; (97a4 <SdioCard::writeData(unsigned char const*)+0x84>)
    978c:	movs	r2, #1
    978e:	strb	r2, [r3, #0]
  return true;
    9790:	b.n	9764 <SdioCard::writeData(unsigned char const*)+0x44>
    9792:	nop
    9794:	.word	0x402c0000
    9798:	.word	0x00008ecd
    979c:	.word	0x20001e44
    97a0:	.word	0x2002c414
    97a4:	.word	0x2002dcc1

000097a8 <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    97a8:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    97aa:	ldr	r0, [pc, #80]	; (97fc <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    97ac:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    97ae:	bl	9024 <yieldTimeout(bool (*)())>
    97b2:	cbz	r0, 97c6 <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    97b4:	ldr	r3, [pc, #72]	; (9800 <SdioCard::writeStart(unsigned long)+0x58>)
    97b6:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    97b8:	movs	r0, #0
  m_errorCode = code;
    97ba:	strb	r2, [r3, #0]
  m_errorLine = line;
    97bc:	movw	r2, #1099	; 0x44b
    97c0:	ldr	r3, [pc, #64]	; (9804 <SdioCard::writeStart(unsigned long)+0x5c>)
    97c2:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    97c4:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    97c6:	ldr	r3, [pc, #64]	; (9808 <SdioCard::writeStart(unsigned long)+0x60>)
    97c8:	ldr	r2, [r3, #40]	; 0x28
    97ca:	bic.w	r2, r2, #65536	; 0x10000
    97ce:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    97d0:	mov.w	r2, #512	; 0x200
    97d4:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    97d6:	ldr	r3, [pc, #52]	; (980c <SdioCard::writeStart(unsigned long)+0x64>)
    97d8:	ldrb	r3, [r3, #0]
    97da:	cbnz	r3, 97de <SdioCard::writeStart(unsigned long)+0x36>
    97dc:	lsls	r4, r4, #9
    97de:	mov	r1, r4
    97e0:	ldr	r0, [pc, #44]	; (9810 <SdioCard::writeStart(unsigned long)+0x68>)
    97e2:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    97e6:	cmp	r0, #0
    97e8:	bne.n	97c4 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    97ea:	ldr	r3, [pc, #20]	; (9800 <SdioCard::writeStart(unsigned long)+0x58>)
    97ec:	movs	r2, #14
    97ee:	strb	r2, [r3, #0]
  m_errorLine = line;
    97f0:	movw	r2, #1111	; 0x457
    97f4:	ldr	r3, [pc, #12]	; (9804 <SdioCard::writeStart(unsigned long)+0x5c>)
    97f6:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    97f8:	b.n	97c4 <SdioCard::writeStart(unsigned long)+0x1c>
    97fa:	nop
    97fc:	.word	0x00009219
    9800:	.word	0x20001e44
    9804:	.word	0x2002c414
    9808:	.word	0x402c0000
    980c:	.word	0x2002dcc0
    9810:	.word	0x193a0020

00009814 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9814:	push	{r3, r4, r5, lr}
    9816:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    9818:	ldr	r0, [pc, #96]	; (987c <cardCMD6(unsigned long, unsigned char*)+0x68>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    981a:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    981c:	bl	9000 <waitTimeout(bool (*)())>
    9820:	cbz	r0, 9834 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    9822:	ldr	r3, [pc, #92]	; (9880 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9824:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9826:	movs	r0, #0
  m_errorCode = code;
    9828:	strb	r2, [r3, #0]
  m_errorLine = line;
    982a:	mov.w	r2, #408	; 0x198
    982e:	ldr	r3, [pc, #84]	; (9884 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9830:	str	r2, [r3, #0]
}
    9832:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    9834:	ldr	r3, [pc, #80]	; (9888 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    9836:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9838:	mov	r1, r4
  m_dmaBusy = true;
    983a:	strb	r2, [r3, #0]
  m_irqstat = 0;
    983c:	ldr	r3, [pc, #76]	; (988c <cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    983e:	ldr	r2, [pc, #80]	; (9890 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    9840:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    9842:	ldr	r3, [pc, #80]	; (9894 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9844:	ldr	r0, [pc, #80]	; (9898 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR  = (uint32_t)status;
    9846:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9848:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    984a:	ldr	r2, [pc, #80]	; (989c <cardCMD6(unsigned long, unsigned char*)+0x88>)
    984c:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    984e:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9852:	cbnz	r0, 9864 <cardCMD6(unsigned long, unsigned char*)+0x50>
  m_errorCode = code;
    9854:	ldr	r3, [pc, #40]	; (9880 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9856:	movs	r2, #4
    9858:	strb	r2, [r3, #0]
  m_errorLine = line;
    985a:	movw	r2, #415	; 0x19f
    985e:	ldr	r3, [pc, #36]	; (9884 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9860:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    9862:	b.n	9832 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    9864:	bl	9284 <waitDmaStatus()>
    9868:	cmp	r0, #0
    986a:	bne.n	9832 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    986c:	ldr	r3, [pc, #16]	; (9880 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    986e:	movs	r2, #37	; 0x25
    9870:	strb	r2, [r3, #0]
  m_errorLine = line;
    9872:	mov.w	r2, #418	; 0x1a2
    9876:	ldr	r3, [pc, #12]	; (9884 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9878:	b.n	9860 <cardCMD6(unsigned long, unsigned char*)+0x4c>
    987a:	nop
    987c:	.word	0x00009219
    9880:	.word	0x20001e44
    9884:	.word	0x2002c414
    9888:	.word	0x2002dd82
    988c:	.word	0x2002ce4c
    9890:	.word	0x00010040
    9894:	.word	0x402c0000
    9898:	.word	0x063a0011
    989c:	.word	0x117f0002

000098a0 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    98a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    98a4:	movs	r4, #0
  m_initDone = false;
    98a6:	ldr	r7, [pc, #524]	; (9ab4 <SdioCard::begin(SdioConfig)+0x214>)
  m_errorCode = SD_CARD_ERROR_NONE;
    98a8:	ldr	r5, [pc, #524]	; (9ab8 <SdioCard::begin(SdioConfig)+0x218>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    98aa:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    98ac:	ldr.w	r8, [pc, #584]	; 9af8 <SdioCard::begin(SdioConfig)+0x258>
  m_version2 = false;
    98b0:	ldr	r6, [pc, #520]	; (9abc <SdioCard::begin(SdioConfig)+0x21c>)
  m_sdioConfig = sdioConfig;
    98b2:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    98b4:	strb	r4, [r0, #9]
  m_initDone = false;
    98b6:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    98b8:	strb	r4, [r5, #0]
  m_highCapacity = false;
    98ba:	strb.w	r4, [r8]
  m_version2 = false;
    98be:	strb	r4, [r6, #0]
  initSDHC();
    98c0:	bl	90a0 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    98c4:	mov	r1, r4
    98c6:	mov	r0, r4
    98c8:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    98cc:	mov	r4, r0
    98ce:	cbnz	r0, 98e4 <SdioCard::begin(SdioConfig)+0x44>
  m_errorCode = code;
    98d0:	movs	r3, #1
  m_errorLine = line;
    98d2:	movw	r2, #654	; 0x28e
  m_errorCode = code;
    98d6:	strb	r3, [r5, #0]
  m_errorLine = line;
    98d8:	ldr	r3, [pc, #484]	; (9ac0 <SdioCard::begin(SdioConfig)+0x220>)
    98da:	str	r2, [r3, #0]
}
    98dc:	mov	r0, r4
    98de:	add	sp, #68	; 0x44
    98e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98e4:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    98e6:	ldr.w	r9, [pc, #532]	; 9afc <SdioCard::begin(SdioConfig)+0x25c>
    98ea:	mov.w	r1, #426	; 0x1aa
    98ee:	mov	r0, r9
    98f0:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    98f4:	cbz	r0, 9918 <SdioCard::begin(SdioConfig)+0x78>
      if (SDHC_CMDRSP0 != 0X1AA) {
    98f6:	ldr	r3, [pc, #460]	; (9ac4 <SdioCard::begin(SdioConfig)+0x224>)
    98f8:	ldr	r3, [r3, #16]
    98fa:	cmp.w	r3, #426	; 0x1aa
    98fe:	beq.n	9910 <SdioCard::begin(SdioConfig)+0x70>
  m_errorCode = code;
    9900:	movs	r3, #6
  m_errorLine = line;
    9902:	mov.w	r2, #660	; 0x294
  m_errorCode = code;
    9906:	strb	r3, [r5, #0]
  m_errorLine = line;
    9908:	ldr	r3, [pc, #436]	; (9ac0 <SdioCard::begin(SdioConfig)+0x220>)
    return sdError(SD_CARD_ERROR_ACMD6);
    990a:	movs	r4, #0
  m_errorLine = line;
    990c:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    990e:	b.n	98dc <SdioCard::begin(SdioConfig)+0x3c>
      m_version2 = true;
    9910:	movs	r3, #1
    9912:	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9914:	ldr	r6, [pc, #432]	; (9ac8 <SdioCard::begin(SdioConfig)+0x228>)
    9916:	b.n	9938 <SdioCard::begin(SdioConfig)+0x98>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9918:	subs	r4, #1
    991a:	bne.n	98ea <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
    991c:	ldrb	r3, [r6, #0]
    991e:	cmp	r3, #0
    9920:	bne.n	9914 <SdioCard::begin(SdioConfig)+0x74>
    initSDHC();
    9922:	bl	90a0 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    9926:	mov	r1, r4
    9928:	mov	r0, r4
    992a:	bl	9190 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    992e:	ldrb	r3, [r6, #0]
    9930:	cmp	r3, #0
    9932:	bne.n	9914 <SdioCard::begin(SdioConfig)+0x74>
    9934:	mov.w	r6, #3145728	; 0x300000
  int m = micros();
    9938:	bl	b484 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    993c:	ldr.w	r9, [pc, #428]	; 9aec <SdioCard::begin(SdioConfig)+0x24c>
  int m = micros();
    9940:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9942:	ldr.w	sl, [pc, #444]	; 9b00 <SdioCard::begin(SdioConfig)+0x260>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9946:	ldr.w	fp, [pc, #444]	; 9b04 <SdioCard::begin(SdioConfig)+0x264>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    994a:	movs	r1, #0
    994c:	mov	r0, r9
    994e:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9952:	cbnz	r0, 9960 <SdioCard::begin(SdioConfig)+0xc0>
  m_errorCode = code;
    9954:	movs	r3, #23
  m_errorLine = line;
    9956:	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    995a:	strb	r3, [r5, #0]
  m_errorLine = line;
    995c:	ldr	r3, [pc, #352]	; (9ac0 <SdioCard::begin(SdioConfig)+0x220>)
    995e:	b.n	990a <SdioCard::begin(SdioConfig)+0x6a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9960:	mov	r1, r6
    9962:	mov	r0, sl
    9964:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9968:	cmp	r0, #0
    996a:	beq.n	9954 <SdioCard::begin(SdioConfig)+0xb4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    996c:	bl	b484 <micros>
    9970:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9972:	cmp	r0, fp
    9974:	bhi.n	9954 <SdioCard::begin(SdioConfig)+0xb4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9976:	ldr	r3, [pc, #332]	; (9ac4 <SdioCard::begin(SdioConfig)+0x224>)
    9978:	ldr	r2, [r3, #16]
    997a:	cmp	r2, #0
    997c:	bge.n	994a <SdioCard::begin(SdioConfig)+0xaa>
  m_ocr = SDHC_CMDRSP0;
    997e:	ldr	r1, [r3, #16]
    9980:	ldr	r2, [pc, #328]	; (9acc <SdioCard::begin(SdioConfig)+0x22c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9982:	ldr	r0, [pc, #332]	; (9ad0 <SdioCard::begin(SdioConfig)+0x230>)
  m_ocr = SDHC_CMDRSP0;
    9984:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9986:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    9988:	ldr	r3, [r3, #16]
    998a:	lsls	r2, r3, #1
    m_highCapacity = true;
    998c:	itt	mi
    998e:	movmi	r3, #1
    9990:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9994:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9998:	mov	r4, r0
    999a:	cbnz	r0, 99a8 <SdioCard::begin(SdioConfig)+0x108>
  m_errorCode = code;
    999c:	movs	r3, #2
  m_errorLine = line;
    999e:	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    99a2:	strb	r3, [r5, #0]
  m_errorLine = line;
    99a4:	ldr	r3, [pc, #280]	; (9ac0 <SdioCard::begin(SdioConfig)+0x220>)
    99a6:	b.n	98da <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    99a8:	movs	r1, #0
    99aa:	ldr	r0, [pc, #296]	; (9ad4 <SdioCard::begin(SdioConfig)+0x234>)
    99ac:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    99b0:	mov	r4, r0
    99b2:	cbnz	r0, 99c0 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    99b4:	movs	r3, #3
  m_errorLine = line;
    99b6:	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    99ba:	strb	r3, [r5, #0]
  m_errorLine = line;
    99bc:	ldr	r3, [pc, #256]	; (9ac0 <SdioCard::begin(SdioConfig)+0x220>)
    99be:	b.n	98da <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    99c0:	ldr	r6, [pc, #256]	; (9ac4 <SdioCard::begin(SdioConfig)+0x224>)
    99c2:	ldr.w	r8, [pc, #324]	; 9b08 <SdioCard::begin(SdioConfig)+0x268>
    99c6:	ldr	r3, [r6, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    99c8:	ldr	r1, [pc, #268]	; (9ad8 <SdioCard::begin(SdioConfig)+0x238>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    99ca:	lsrs	r3, r3, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    99cc:	ldr	r0, [pc, #268]	; (9adc <SdioCard::begin(SdioConfig)+0x23c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    99ce:	lsls	r3, r3, #16
    99d0:	str.w	r3, [r8]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    99d4:	bl	922c <readReg16(unsigned long, void*)>
    99d8:	mov	r4, r0
    99da:	cbnz	r0, 99e8 <SdioCard::begin(SdioConfig)+0x148>
  m_errorCode = code;
    99dc:	movs	r3, #7
  m_errorLine = line;
    99de:	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    99e2:	strb	r3, [r5, #0]
  m_errorLine = line;
    99e4:	ldr	r3, [pc, #216]	; (9ac0 <SdioCard::begin(SdioConfig)+0x220>)
    99e6:	b.n	98da <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    99e8:	ldr	r1, [pc, #244]	; (9ae0 <SdioCard::begin(SdioConfig)+0x240>)
    99ea:	ldr	r0, [pc, #248]	; (9ae4 <SdioCard::begin(SdioConfig)+0x244>)
    99ec:	bl	922c <readReg16(unsigned long, void*)>
    99f0:	mov	r4, r0
    99f2:	cbnz	r0, 9a00 <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
    99f4:	movs	r3, #8
  m_errorLine = line;
    99f6:	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    99fa:	strb	r3, [r5, #0]
  m_errorLine = line;
    99fc:	ldr	r3, [pc, #192]	; (9ac0 <SdioCard::begin(SdioConfig)+0x220>)
    99fe:	b.n	98da <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9a00:	ldr.w	r1, [r8]
    9a04:	ldr	r0, [pc, #224]	; (9ae8 <SdioCard::begin(SdioConfig)+0x248>)
    9a06:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9a0a:	mov	r4, r0
    9a0c:	cbnz	r0, 9a1a <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    9a0e:	movs	r3, #5
  m_errorLine = line;
    9a10:	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    9a14:	strb	r3, [r5, #0]
  m_errorLine = line;
    9a16:	ldr	r3, [pc, #168]	; (9ac0 <SdioCard::begin(SdioConfig)+0x220>)
    9a18:	b.n	98da <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9a1a:	ldr.w	r1, [r8]
    9a1e:	ldr	r0, [pc, #204]	; (9aec <SdioCard::begin(SdioConfig)+0x24c>)
    9a20:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9a24:	cbz	r0, 9a6e <SdioCard::begin(SdioConfig)+0x1ce>
    9a26:	movs	r1, #2
    9a28:	ldr	r0, [pc, #196]	; (9af0 <SdioCard::begin(SdioConfig)+0x250>)
    9a2a:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9a2e:	mov	r4, r0
    9a30:	cbz	r0, 9a6e <SdioCard::begin(SdioConfig)+0x1ce>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9a32:	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9a34:	mov	r1, sp
    9a36:	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9a3a:	bic.w	r3, r3, #6
    9a3e:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9a40:	ldr	r3, [r6, #40]	; 0x28
    9a42:	orr.w	r3, r3, #2
    9a46:	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9a48:	mov.w	r3, #1048592	; 0x100010
    9a4c:	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9a4e:	bl	9814 <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    9a52:	cbnz	r0, 9a7a <SdioCard::begin(SdioConfig)+0x1da>
  kHzSdClk = 25000;
    9a54:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    9a58:	movs	r0, #5
    9a5a:	bl	8e50 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    9a5e:	mov	r0, r2
    9a60:	bl	8ef8 <setSdclk(unsigned long)>
  if (enable) {
    9a64:	bl	9070 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    9a68:	movs	r3, #1
    9a6a:	strb	r3, [r7, #0]
  return true;
    9a6c:	b.n	98dc <SdioCard::begin(SdioConfig)+0x3c>
  m_errorCode = code;
    9a6e:	movs	r3, #20
  m_errorLine = line;
    9a70:	movw	r2, #707	; 0x2c3
  m_errorCode = code;
    9a74:	strb	r3, [r5, #0]
  m_errorLine = line;
    9a76:	ldr	r3, [pc, #72]	; (9ac0 <SdioCard::begin(SdioConfig)+0x220>)
    9a78:	b.n	990a <SdioCard::begin(SdioConfig)+0x6a>
  if (highSpeedModeAsk && highspeedModeSupported) {
    9a7a:	ldrb.w	r3, [sp, #13]
    9a7e:	lsls	r3, r3, #30
    9a80:	bpl.n	9a54 <SdioCard::begin(SdioConfig)+0x1b4>
    uint32_t m_errorLine_before = m_errorLine;
    9a82:	ldr	r6, [pc, #60]	; (9ac0 <SdioCard::begin(SdioConfig)+0x220>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    9a84:	mov	r1, sp
    9a86:	ldr	r0, [pc, #108]	; (9af4 <SdioCard::begin(SdioConfig)+0x254>)
    uint8_t err_code_before = m_errorCode;
    9a88:	ldrb.w	r9, [r5]
    uint32_t m_errorLine_before = m_errorLine;
    9a8c:	ldr.w	r8, [r6]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    9a90:	bl	9814 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    9a94:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    9a98:	cbz	r0, 9aa2 <SdioCard::begin(SdioConfig)+0x202>
    9a9a:	and.w	r3, r3, #15
    9a9e:	cmp	r3, #1
    9aa0:	beq.n	9aac <SdioCard::begin(SdioConfig)+0x20c>
      m_errorCode = err_code_before;
    9aa2:	strb.w	r9, [r5]
      m_errorLine = m_errorLine_before;
    9aa6:	str.w	r8, [r6]
    9aaa:	b.n	9a54 <SdioCard::begin(SdioConfig)+0x1b4>
      kHzSdClk = 50000;
    9aac:	movw	r2, #50000	; 0xc350
    9ab0:	b.n	9a58 <SdioCard::begin(SdioConfig)+0x1b8>
    9ab2:	nop
    9ab4:	.word	0x2002dcbe
    9ab8:	.word	0x20001e44
    9abc:	.word	0x2002dcbf
    9ac0:	.word	0x2002c414
    9ac4:	.word	0x402c0000
    9ac8:	.word	0x40300000
    9acc:	.word	0x2002c634
    9ad0:	.word	0x02090000
    9ad4:	.word	0x031a0000
    9ad8:	.word	0x2002dcd2
    9adc:	.word	0x09090000
    9ae0:	.word	0x2002dcc2
    9ae4:	.word	0x0a090000
    9ae8:	.word	0x071b0000
    9aec:	.word	0x371a0000
    9af0:	.word	0x061a0000
    9af4:	.word	0x80fffff1
    9af8:	.word	0x2002dcc0
    9afc:	.word	0x081a0000
    9b00:	.word	0x29020000
    9b04:	.word	0x000f4240
    9b08:	.word	0x2002c638

00009b0c <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    9b0c:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9b0e:	ldr	r3, [pc, #148]	; (9ba4 <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    9b10:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9b12:	ldr	r2, [r3, #36]	; 0x24
    9b14:	lsls	r0, r2, #22
    9b16:	bmi.n	9b34 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b18:	ldr	r2, [r3, #40]	; 0x28
    9b1a:	bic.w	r2, r2, #65536	; 0x10000
    9b1e:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    9b20:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9b22:	ldr	r2, [r3, #40]	; 0x28
    9b24:	orr.w	r2, r2, #131072	; 0x20000
    9b28:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9b2a:	ldr	r2, [r3, #40]	; 0x28
    9b2c:	orr.w	r2, r2, #65536	; 0x10000
    9b30:	str	r2, [r3, #40]	; 0x28
    interrupts();
    9b32:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    9b34:	ldr	r0, [pc, #112]	; (9ba8 <SdioCard::readData(unsigned char*)+0x9c>)
    9b36:	bl	9000 <waitTimeout(bool (*)())>
    9b3a:	cbz	r0, 9b4e <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    9b3c:	ldr	r3, [pc, #108]	; (9bac <SdioCard::readData(unsigned char*)+0xa0>)
    9b3e:	movs	r2, #26
    9b40:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b42:	movw	r2, #854	; 0x356
    9b46:	ldr	r3, [pc, #104]	; (9bb0 <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9b48:	movs	r0, #0
  m_errorLine = line;
    9b4a:	str	r2, [r3, #0]
}
    9b4c:	pop	{r3, r4, r5, pc}
    9b4e:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    9b52:	ldr	r5, [pc, #80]	; (9ba4 <SdioCard::readData(unsigned char*)+0x98>)
    9b54:	ldr	r3, [r5, #36]	; 0x24
    9b56:	lsls	r1, r3, #20
    9b58:	bpl.n	9b54 <SdioCard::readData(unsigned char*)+0x48>
    9b5a:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9b5c:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    9b60:	ldr	r0, [r5, #32]
    9b62:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9b66:	cmp	r3, r1
    9b68:	bne.n	9b60 <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    9b6a:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9b6c:	cmp	r4, r2
    9b6e:	bne.n	9b54 <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    9b70:	ldr	r0, [pc, #64]	; (9bb4 <SdioCard::readData(unsigned char*)+0xa8>)
    9b72:	bl	9000 <waitTimeout(bool (*)())>
    9b76:	cbz	r0, 9b86 <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    9b78:	ldr	r3, [pc, #48]	; (9bac <SdioCard::readData(unsigned char*)+0xa0>)
    9b7a:	movs	r2, #29
    9b7c:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b7e:	movw	r2, #865	; 0x361
    9b82:	ldr	r3, [pc, #44]	; (9bb0 <SdioCard::readData(unsigned char*)+0xa4>)
    9b84:	b.n	9b48 <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    9b86:	ldr	r2, [r5, #48]	; 0x30
    9b88:	ldr	r3, [pc, #44]	; (9bb8 <SdioCard::readData(unsigned char*)+0xac>)
    9b8a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9b8c:	ldr	r2, [r3, #0]
    9b8e:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9b90:	ldr	r2, [r3, #0]
    9b92:	lsls	r2, r2, #30
    9b94:	bpl.n	9b4c <SdioCard::readData(unsigned char*)+0x40>
    9b96:	ldr	r2, [r3, #0]
    9b98:	ldr	r3, [pc, #32]	; (9bbc <SdioCard::readData(unsigned char*)+0xb0>)
    9b9a:	tst	r2, r3
    9b9c:	ite	eq
    9b9e:	moveq	r0, #1
    9ba0:	movne	r0, #0
    9ba2:	b.n	9b4c <SdioCard::readData(unsigned char*)+0x40>
    9ba4:	.word	0x402c0000
    9ba8:	.word	0x00008eb9
    9bac:	.word	0x20001e44
    9bb0:	.word	0x2002c414
    9bb4:	.word	0x00008ee1
    9bb8:	.word	0x2002ce4c
    9bbc:	.word	0x117f0000

00009bc0 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    9bc0:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9bc2:	ldr	r0, [pc, #80]	; (9c14 <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    9bc4:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9bc6:	bl	9024 <yieldTimeout(bool (*)())>
    9bca:	cbz	r0, 9bde <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    9bcc:	ldr	r3, [pc, #72]	; (9c18 <SdioCard::readStart(unsigned long)+0x58>)
    9bce:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9bd0:	movs	r0, #0
  m_errorCode = code;
    9bd2:	strb	r2, [r3, #0]
  m_errorLine = line;
    9bd4:	movw	r2, #945	; 0x3b1
    9bd8:	ldr	r3, [pc, #64]	; (9c1c <SdioCard::readStart(unsigned long)+0x5c>)
    9bda:	str	r2, [r3, #0]
}
    9bdc:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9bde:	ldr	r3, [pc, #64]	; (9c20 <SdioCard::readStart(unsigned long)+0x60>)
    9be0:	ldr	r2, [r3, #40]	; 0x28
    9be2:	orr.w	r2, r2, #65536	; 0x10000
    9be6:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9be8:	mov.w	r2, #512	; 0x200
    9bec:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9bee:	ldr	r3, [pc, #52]	; (9c24 <SdioCard::readStart(unsigned long)+0x64>)
    9bf0:	ldrb	r3, [r3, #0]
    9bf2:	cbnz	r3, 9bf6 <SdioCard::readStart(unsigned long)+0x36>
    9bf4:	lsls	r4, r4, #9
    9bf6:	mov	r1, r4
    9bf8:	ldr	r0, [pc, #44]	; (9c28 <SdioCard::readStart(unsigned long)+0x68>)
    9bfa:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9bfe:	cmp	r0, #0
    9c00:	bne.n	9bdc <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    9c02:	ldr	r3, [pc, #20]	; (9c18 <SdioCard::readStart(unsigned long)+0x58>)
    9c04:	movs	r2, #12
    9c06:	strb	r2, [r3, #0]
  m_errorLine = line;
    9c08:	movw	r2, #957	; 0x3bd
    9c0c:	ldr	r3, [pc, #12]	; (9c1c <SdioCard::readStart(unsigned long)+0x5c>)
    9c0e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    9c10:	b.n	9bdc <SdioCard::readStart(unsigned long)+0x1c>
    9c12:	nop
    9c14:	.word	0x00009219
    9c18:	.word	0x20001e44
    9c1c:	.word	0x2002c414
    9c20:	.word	0x402c0000
    9c24:	.word	0x2002dcc0
    9c28:	.word	0x123a0030

00009c2c <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9c2c:	push	{r4, r5, r6, r7, lr}
    9c2e:	ldrb	r5, [r0, #8]
    9c30:	sub.w	sp, sp, #516	; 0x204
    9c34:	mov	r4, r0
    9c36:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9c38:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9c3c:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9c3e:	beq.n	9c80 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9c40:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9c42:	ldr	r0, [pc, #132]	; (9cc8 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    9c44:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9c48:	ite	eq
    9c4a:	moveq	r4, r2
    9c4c:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9c4e:	mov	r2, r4
    9c50:	bl	92b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9c54:	mov	r5, r0
    9c56:	cbnz	r0, 9c6e <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    9c58:	ldr	r3, [pc, #112]	; (9ccc <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    9c5a:	movs	r2, #11
    9c5c:	strb	r2, [r3, #0]
  m_errorLine = line;
    9c5e:	mov.w	r2, #884	; 0x374
    9c62:	ldr	r3, [pc, #108]	; (9cd0 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    9c64:	str	r2, [r3, #0]
}
    9c66:	mov	r0, r5
    9c68:	add.w	sp, sp, #516	; 0x204
    9c6c:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    9c6e:	cmp	r4, r6
    9c70:	beq.n	9c66 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    9c72:	mov.w	r2, #512	; 0x200
    9c76:	mov	r1, sp
    9c78:	mov	r0, r6
    9c7a:	bl	9f88 <memcpy>
    9c7e:	b.n	9c66 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    9c80:	bl	95ac <waitTransferComplete()>
    9c84:	cmp	r0, #0
    9c86:	beq.n	9c66 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9c88:	ldrb	r3, [r4, #9]
    9c8a:	cmp	r3, #1
    9c8c:	bne.n	9c94 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    9c8e:	ldr	r3, [r4, #4]
    9c90:	cmp	r3, r7
    9c92:	beq.n	9cb2 <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    9c94:	ldr	r3, [r4, #0]
    9c96:	mov	r0, r4
    9c98:	ldr	r3, [r3, #32]
    9c9a:	blx	r3
    9c9c:	cmp	r0, #0
    9c9e:	beq.n	9c66 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    9ca0:	mov	r1, r7
    9ca2:	mov	r0, r4
    9ca4:	bl	9bc0 <SdioCard::readStart(unsigned long)>
    9ca8:	cmp	r0, #0
    9caa:	beq.n	9c66 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    9cac:	movs	r3, #1
      m_curSector = sector;
    9cae:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9cb0:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    9cb2:	mov	r1, r6
    9cb4:	mov	r0, r4
    9cb6:	bl	9b0c <SdioCard::readData(unsigned char*)>
    9cba:	cmp	r0, #0
    9cbc:	beq.n	9c66 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    9cbe:	ldr	r3, [r4, #4]
  return true;
    9cc0:	mov	r5, r0
    m_curSector++;
    9cc2:	adds	r3, #1
    9cc4:	str	r3, [r4, #4]
    9cc6:	b.n	9c66 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    9cc8:	.word	0x113a0011
    9ccc:	.word	0x20001e44
    9cd0:	.word	0x2002c414

00009cd4 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    9cd4:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9cd6:	ldr	r2, [pc, #76]	; (9d24 <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    9cd8:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    9cda:	mov	r6, r1
  m_curState = IDLE_STATE;
    9cdc:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9cde:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9ce0:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9ce2:	ldr	r0, [pc, #68]	; (9d28 <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9ce4:	bic.w	r3, r3, #65536	; 0x10000
    9ce8:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9cea:	bl	9190 <cardCommand(unsigned long, unsigned long)>
    9cee:	mov	r4, r0
    9cf0:	cbnz	r0, 9d04 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    9cf2:	ldr	r3, [pc, #56]	; (9d2c <SdioCard::stopTransmission(bool)+0x58>)
    9cf4:	movs	r2, #9
    9cf6:	strb	r2, [r3, #0]
  m_errorLine = line;
    9cf8:	movw	r2, #979	; 0x3d3
    9cfc:	ldr	r3, [pc, #48]	; (9d30 <SdioCard::stopTransmission(bool)+0x5c>)
    9cfe:	str	r2, [r3, #0]
}
    9d00:	mov	r0, r4
    9d02:	pop	{r4, r5, r6, pc}
  if (blocking) {
    9d04:	cmp	r6, #0
    9d06:	beq.n	9d00 <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    9d08:	ldr	r0, [pc, #40]	; (9d34 <SdioCard::stopTransmission(bool)+0x60>)
    9d0a:	bl	9024 <yieldTimeout(bool (*)())>
    9d0e:	cmp	r0, #0
    9d10:	beq.n	9d00 <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    9d12:	ldr	r3, [pc, #24]	; (9d2c <SdioCard::stopTransmission(bool)+0x58>)
    9d14:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    9d16:	mov	r4, r5
  m_errorCode = code;
    9d18:	strb	r2, [r3, #0]
  m_errorLine = line;
    9d1a:	movw	r2, #983	; 0x3d7
    9d1e:	ldr	r3, [pc, #16]	; (9d30 <SdioCard::stopTransmission(bool)+0x5c>)
    9d20:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    9d22:	b.n	9d00 <SdioCard::stopTransmission(bool)+0x2c>
    9d24:	.word	0x402c0000
    9d28:	.word	0x0cdb0000
    9d2c:	.word	0x20001e44
    9d30:	.word	0x2002c414
    9d34:	.word	0x00008e99

00009d38 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    9d38:	push	{r4, lr}
    9d3a:	mov	r4, r0
  if (!waitTransferComplete()) {
    9d3c:	bl	95ac <waitTransferComplete()>
    9d40:	cbz	r0, 9d52 <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    9d42:	ldrb	r3, [r4, #9]
    9d44:	cbz	r3, 9d52 <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    9d46:	mov	r0, r4
    9d48:	movs	r1, #1
}
    9d4a:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    9d4e:	b.w	9cd4 <SdioCard::stopTransmission(bool)>
}
    9d52:	pop	{r4, pc}

00009d54 <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    9d54:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9d56:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9d58:	tst.w	r3, #2031616	; 0x1f0000
    9d5c:	beq.n	9d56 <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    9d5e:	ldr	r0, [r0, #116]	; 0x74
	}
    9d60:	uxtb	r0, r0
    9d62:	bx	lr

00009d64 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    9d64:	push	{r0, r1, r2, r4, r5, lr}
    9d66:	add	r3, sp, #8
    9d68:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    9d6c:	ldrb	r2, [r0, #19]
    9d6e:	mov	r3, r1
    9d70:	cmp	r2, #0
    9d72:	beq.n	9de8 <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    9d74:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9d76:	ldrb	r2, [r0, #19]
    9d78:	lsls	r1, r2, #31
    9d7a:	bpl.n	9d8e <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    9d7c:	mov.w	r4, #3758153728	; 0xe000e000
    9d80:	ldr	r5, [r0, #20]
    9d82:	ldr.w	r1, [r4, #384]	; 0x180
    9d86:	ands	r1, r5
    9d88:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    9d8a:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    9d8e:	lsls	r5, r2, #30
    9d90:	bpl.n	9da4 <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    9d92:	mov.w	r4, #3758153728	; 0xe000e000
    9d96:	ldr	r5, [r0, #24]
    9d98:	ldr.w	r1, [r4, #388]	; 0x184
    9d9c:	ands	r1, r5
    9d9e:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    9da0:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    9da4:	lsls	r4, r2, #29
    9da6:	bpl.n	9dba <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    9da8:	mov.w	r4, #3758153728	; 0xe000e000
    9dac:	ldr	r5, [r0, #28]
    9dae:	ldr.w	r1, [r4, #392]	; 0x188
    9db2:	ands	r1, r5
    9db4:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    9db6:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    9dba:	lsls	r1, r2, #28
    9dbc:	bpl.n	9dd0 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    9dbe:	mov.w	r4, #3758153728	; 0xe000e000
    9dc2:	ldr	r5, [r0, #32]
    9dc4:	ldr.w	r1, [r4, #396]	; 0x18c
    9dc8:	ands	r1, r5
    9dca:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    9dcc:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    9dd0:	lsls	r2, r2, #27
    9dd2:	bpl.n	9de6 <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    9dd4:	mov.w	r1, #3758153728	; 0xe000e000
    9dd8:	ldr	r4, [r0, #36]	; 0x24
    9dda:	ldr.w	r2, [r1, #400]	; 0x190
    9dde:	ands	r2, r4
    9de0:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    9de2:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    9de6:	cpsie	i
		if (settings.clock() != _clock) {
    9de8:	ldr	r2, [r0, #8]
    9dea:	cmp	r3, r2
    9dec:	beq.n	9e3c <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    9dee:	ldr	r2, [pc, #112]	; (9e60 <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    9df0:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    9df2:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9df4:	ldr	r1, [pc, #108]	; (9e64 <SPIClass::beginTransaction(SPISettings)+0x100>)
    9df6:	ubfx	r4, r2, #4, #2
    9dfa:	ubfx	r2, r2, #26, #3
    9dfe:	ldr.w	r4, [r1, r4, lsl #2]
    9e02:	adds	r2, #1
    9e04:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    9e08:	cbz	r3, 9e56 <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    9e0a:	cmp	r3, r1
    9e0c:	bhi.n	9e26 <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    9e0e:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    9e12:	udiv	r1, r1, r2
    9e16:	cmp	r3, r1
    9e18:	bcs.n	9e1c <SPIClass::beginTransaction(SPISettings)+0xb8>
    9e1a:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    9e1c:	cmp.w	r2, #258	; 0x102
    9e20:	bcs.n	9e2a <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    9e22:	cmp	r2, #2
    9e24:	bhi.n	9e2e <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    9e26:	movs	r3, #0
    9e28:	b.n	9e30 <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    9e2a:	movw	r2, #257	; 0x101
				div = d-2;
    9e2e:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    9e30:	lsrs	r1, r3, #1
    9e32:	lsls	r2, r1, #16
    9e34:	orr.w	r2, r2, r1, lsl #8
    9e38:	orrs	r3, r2
    9e3a:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9e3c:	ldr	r3, [r0, #0]
		port().CR = 0;
    9e3e:	movs	r2, #0
    9e40:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9e42:	movs	r2, #3
    9e44:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    9e46:	ldr	r2, [r0, #12]
    9e48:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    9e4a:	ldr	r2, [sp, #4]
    9e4c:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    9e4e:	movs	r2, #1
    9e50:	str	r2, [r3, #16]
	}
    9e52:	add	sp, #12
    9e54:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    9e56:	cmp	r4, r2
    9e58:	bcc.n	9e30 <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9e5a:	mov	r2, r1
    9e5c:	b.n	9e1a <SPIClass::beginTransaction(SPISettings)+0xb6>
    9e5e:	nop
    9e60:	.word	0x400fc000
    9e64:	.word	0x20000580

00009e68 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    9e68:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    9e6c:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    9e6e:	ldr	r0, [r0, #0]
    9e70:	bl	9d64 <SPIClass::beginTransaction(SPISettings)>
}
    9e74:	pop	{r3, pc}

00009e76 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    9e76:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    9e78:	ldrb	r2, [r3, #19]
    9e7a:	cbz	r2, 9ec2 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    9e7c:	lsls	r0, r2, #31
    9e7e:	bpl.n	9e8a <SdSpiArduinoDriver::deactivate()+0x14>
    9e80:	ldr	r0, [r3, #40]	; 0x28
    9e82:	mov.w	r1, #3758153728	; 0xe000e000
    9e86:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    9e8a:	lsls	r1, r2, #30
    9e8c:	bpl.n	9e98 <SdSpiArduinoDriver::deactivate()+0x22>
    9e8e:	ldr	r0, [r3, #44]	; 0x2c
    9e90:	mov.w	r1, #3758153728	; 0xe000e000
    9e94:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9e98:	lsls	r0, r2, #29
    9e9a:	bpl.n	9ea6 <SdSpiArduinoDriver::deactivate()+0x30>
    9e9c:	ldr	r0, [r3, #48]	; 0x30
    9e9e:	mov.w	r1, #3758153728	; 0xe000e000
    9ea2:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    9ea6:	lsls	r1, r2, #28
    9ea8:	bpl.n	9eb4 <SdSpiArduinoDriver::deactivate()+0x3e>
    9eaa:	ldr	r0, [r3, #52]	; 0x34
    9eac:	mov.w	r1, #3758153728	; 0xe000e000
    9eb0:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    9eb4:	lsls	r2, r2, #27
    9eb6:	bpl.n	9ec2 <SdSpiArduinoDriver::deactivate()+0x4c>
    9eb8:	ldr	r2, [r3, #56]	; 0x38
    9eba:	mov.w	r3, #3758153728	; 0xe000e000
    9ebe:	str.w	r2, [r3, #272]	; 0x110
}
    9ec2:	bx	lr

00009ec4 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    9ec4:	ldr	r0, [r0, #0]
    9ec6:	b.w	5226 <SPIClass::end()>

00009eca <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    9eca:	ldr	r3, [r0, #0]
    9ecc:	movs	r1, #255	; 0xff
    9ece:	ldr	r0, [r3, #0]
    9ed0:	b.w	9d54 <SPIClass::transfer(unsigned char) [clone .isra.0]>

00009ed4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9ed4:	push	{r0, r1, r2, r4, r5, lr}
    9ed6:	mov	r4, r1
    9ed8:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    9eda:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9edc:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    9ede:	mov	r0, r4
    9ee0:	bl	9f44 <memset>
		transfer(buf, buf, count);
    9ee4:	ldr	r0, [r5, #0]
    9ee6:	ldr	r3, [sp, #4]
    9ee8:	mov	r2, r4
    9eea:	mov	r1, r4
    9eec:	bl	51d0 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9ef0:	movs	r0, #0
    9ef2:	add	sp, #12
    9ef4:	pop	{r4, r5, pc}

00009ef6 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    9ef6:	ldr	r3, [r0, #0]
    9ef8:	ldr	r0, [r3, #0]
    9efa:	b.w	9d54 <SPIClass::transfer(unsigned char) [clone .isra.0]>

00009efe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9efe:	subs	r3, r2, #1
    9f00:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9f04:	push	{r4, r5, r6, lr}
    9f06:	mov	r6, r0
    9f08:	sub.w	sp, sp, #512	; 0x200
    9f0c:	mov	r4, r1
    9f0e:	mov	r5, r2
  if (0 < count && count <= 512) {
    9f10:	bcc.n	9f26 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    9f12:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9f14:	cmp	r4, r5
    9f16:	beq.n	9f38 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    9f18:	ldr	r3, [r6, #0]
    9f1a:	ldrb.w	r1, [r4], #1
    9f1e:	ldr	r0, [r3, #0]
    9f20:	bl	9d54 <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    9f24:	b.n	9f14 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    9f26:	mov	r0, sp
    9f28:	bl	9f88 <memcpy>
    9f2c:	mov	r2, sp
    9f2e:	mov	r3, r5
    9f30:	ldr	r0, [r6, #0]
    9f32:	mov	r1, r2
    9f34:	bl	51d0 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    9f38:	add.w	sp, sp, #512	; 0x200
    9f3c:	pop	{r4, r5, r6, pc}

00009f3e <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    9f3e:	b.w	bc20 <digitalWrite>
	...

00009f44 <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    9f44:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    9f46:	cbz	r2, 9f84 <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    9f48:	cmp	r2, #16
    blt     .L_bytewise
    9f4a:	blt.n	9f7c <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    9f4c:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    9f50:	cbz	r3, 9f60 <memset+0x1c>
    rsb     r3, #8
    9f52:	rsb	r3, r3, #8
    subs    r2, r3
    9f56:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    9f58:	subs	r3, #1
    strb    r1, [r0], #1
    9f5a:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    9f5e:	bgt.n	9f58 <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    9f60:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    9f62:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    9f66:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    9f6a:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    9f6c:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    9f6e:	subs	r3, #1
    strd    r1, r12, [r0], #8
    9f70:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    9f74:	bgt.n	9f6e <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    9f76:	ands.w	r2, r2, #7
    beq     .L_done
    9f7a:	beq.n	9f84 <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    9f7c:	subs	r2, #1
    strb    r1, [r0], #1
    9f7e:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    9f82:	bgt.n	9f7c <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    9f84:	pop	{r0, pc}
    9f86:	nop

00009f88 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9f88:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9f8a:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9f8e:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9f92:	bne.n	a070 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9f94:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9f96:	bcc.n	a01c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9f98:	ldr.w	r3, [r1], #4
    9f9c:	str.w	r3, [r0], #4
    9fa0:	ldr.w	r3, [r1], #4
    9fa4:	str.w	r3, [r0], #4
    9fa8:	ldr.w	r3, [r1], #4
    9fac:	str.w	r3, [r0], #4
    9fb0:	ldr.w	r3, [r1], #4
    9fb4:	str.w	r3, [r0], #4
    9fb8:	ldr.w	r3, [r1], #4
    9fbc:	str.w	r3, [r0], #4
    9fc0:	ldr.w	r3, [r1], #4
    9fc4:	str.w	r3, [r0], #4
    9fc8:	ldr.w	r3, [r1], #4
    9fcc:	str.w	r3, [r0], #4
    9fd0:	ldr.w	r3, [r1], #4
    9fd4:	str.w	r3, [r0], #4
    9fd8:	ldr.w	r3, [r1], #4
    9fdc:	str.w	r3, [r0], #4
    9fe0:	ldr.w	r3, [r1], #4
    9fe4:	str.w	r3, [r0], #4
    9fe8:	ldr.w	r3, [r1], #4
    9fec:	str.w	r3, [r0], #4
    9ff0:	ldr.w	r3, [r1], #4
    9ff4:	str.w	r3, [r0], #4
    9ff8:	ldr.w	r3, [r1], #4
    9ffc:	str.w	r3, [r0], #4
    a000:	ldr.w	r3, [r1], #4
    a004:	str.w	r3, [r0], #4
    a008:	ldr.w	r3, [r1], #4
    a00c:	str.w	r3, [r0], #4
    a010:	ldr.w	r3, [r1], #4
    a014:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a018:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a01a:	bcs.n	9f98 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a01c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a01e:	bcc.n	a044 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a020:	ldr.w	r3, [r1], #4
    a024:	str.w	r3, [r0], #4
    a028:	ldr.w	r3, [r1], #4
    a02c:	str.w	r3, [r0], #4
    a030:	ldr.w	r3, [r1], #4
    a034:	str.w	r3, [r0], #4
    a038:	ldr.w	r3, [r1], #4
    a03c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a040:	subs	r2, #16
	bhs	.Lmid_block_loop
    a042:	bcs.n	a020 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a044:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a046:	bcc.n	a054 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a048:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a04c:	str.w	r3, [r0], #4
	subs	r2, #4
    a050:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a052:	bcs.n	a048 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a054:	adds	r2, #4
	beq	.Ldone
    a056:	beq.n	a06a <memcpy+0xe2>

	lsls	r2, r2, #31
    a058:	lsls	r2, r2, #31
	itt ne
    a05a:	itt	ne
	ldrbne  r3, [r1], #1
    a05c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a060:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a064:	bcc.n	a06a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a066:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a068:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a06a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a06c:	bx	lr
    a06e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a070:	cmp	r2, #8
	blo	.Lbyte_copy
    a072:	bcc.n	a09c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a074:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a076:	beq.n	9f94 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a078:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a07c:	beq.n	9f94 <memcpy+0xc>

	rsb	r3, #4
    a07e:	rsb	r3, r3, #4
	subs	r2, r3
    a082:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a084:	lsls	r3, r3, #31
	itt ne
    a086:	itt	ne
	ldrbne  r3, [r1], #1
    a088:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a08c:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a090:	bcc.n	9f94 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a092:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a096:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a09a:	b.n	9f94 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a09c:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a09e:	bcc.n	a054 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a0a0:	subs	r2, #1
	ldrb    r3, [r1], #1
    a0a2:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a0a6:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a0aa:	bcs.n	a0a0 <memcpy+0x118>

	ldrb	r3, [r1]
    a0ac:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a0ae:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a0b0:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a0b2:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a0b4:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a0b6:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a0b8:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a0ba:	bx	lr

0000a0bc <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a0bc:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a0be:	ldr	r4, [pc, #80]	; (a110 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a0c0:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a0c4:	ldr	r5, [pc, #76]	; (a114 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a0c6:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a0ca:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a0ce:	ldr	r7, [pc, #72]	; (a118 <rx_queue_transfer+0x5c>)
    a0d0:	add.w	r5, r5, r0, lsl #5
{
    a0d4:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a0d6:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a0da:	mov	r1, r4
    a0dc:	ldrh	r2, [r7, #0]
    a0de:	mov	r0, r5
    a0e0:	bl	b160 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a0e4:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a0e6:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    a0e8:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a0ec:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    a0f0:	adds	r4, #32
	} while (location < end_addr);
    a0f2:	cmp	r3, r4
    a0f4:	bhi.n	a0ec <rx_queue_transfer+0x30>
	asm("dsb");
    a0f6:	dsb	sy
	asm("isb");
    a0fa:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a0fe:	movs	r0, #3
    a100:	mov	r1, r5
    a102:	bl	b1b0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a106:	mov.w	r3, #131072	; 0x20000
    a10a:	str.w	r3, [r6, #268]	; 0x10c
}
    a10e:	pop	{r3, r4, r5, r6, r7, pc}
    a110:	.word	0x20003780
    a114:	.word	0x20004780
    a118:	.word	0x2002d832

0000a11c <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a11c:	ldr	r3, [r0, #4]
    a11e:	ldr	r2, [pc, #136]	; (a1a8 <rx_event+0x8c>)
    a120:	ubfx	r3, r3, #16, #15
{
    a124:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a128:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    a12a:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a12c:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a12e:	cmp	r4, #0
    a130:	ble.n	a17a <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    a132:	ldr	r2, [pc, #120]	; (a1ac <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    a134:	uxth.w	sl, r4
		if (head != rx_tail) {
    a138:	ldr	r0, [pc, #116]	; (a1b0 <rx_event+0x94>)
		uint32_t head = rx_head;
    a13a:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    a13c:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a13e:	uxtb	r3, r1
		if (head != rx_tail) {
    a140:	ldr.w	r8, [pc, #128]	; a1c4 <rx_event+0xa8>
    a144:	cmp	r1, r0
    a146:	ldr	r7, [pc, #108]	; (a1b4 <rx_event+0x98>)
    a148:	ldr	r1, [pc, #108]	; (a1b8 <rx_event+0x9c>)
    a14a:	beq.n	a184 <rx_event+0x68>
			uint32_t ii = rx_list[head];
    a14c:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    a150:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a154:	rsb	r0, r6, #512	; 0x200
    a158:	cmp	r4, r0
    a15a:	bhi.n	a184 <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a15c:	ldr	r3, [pc, #92]	; (a1bc <rx_event+0xa0>)
    a15e:	add.w	r0, r6, r9, lsl #9
    a162:	mov	r2, r4
				rx_count[ii] = count + len;
    a164:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a166:	add.w	r1, r3, r5, lsl #9
    a16a:	add	r0, r3
    a16c:	bl	9f88 <memcpy>
				rx_available += len;
    a170:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    a172:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    a176:	add	r3, r4
    a178:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    a17a:	mov	r0, r5
	}
}
    a17c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    a180:	b.w	a0bc <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    a184:	adds	r3, #1
		rx_index[i] = 0;
    a186:	movs	r6, #0
    a188:	ldr	r0, [pc, #52]	; (a1c0 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    a18a:	cmp	r3, #9
		rx_count[i] = len;
    a18c:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    a190:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a194:	it	cs
    a196:	movcs	r3, r6
		rx_list[head] = i;
    a198:	strb	r5, [r1, r3]
		rx_head = head;
    a19a:	uxtb	r3, r3
    a19c:	strb	r3, [r2, #0]
		rx_available += len;
    a19e:	ldr	r3, [r7, #0]
    a1a0:	add	r4, r3
    a1a2:	str	r4, [r7, #0]
}
    a1a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a1a8:	.word	0x2002d832
    a1ac:	.word	0x2002de8b
    a1b0:	.word	0x2002de9b
    a1b4:	.word	0x2002d10c
    a1b8:	.word	0x2002de8d
    a1bc:	.word	0x20003780
    a1c0:	.word	0x2002d822
    a1c4:	.word	0x2002d812

0000a1c8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a1c8:	ldr	r3, [pc, #112]	; (a23c <usb_serial_flush_callback+0x74>)
{
    a1ca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    a1ce:	ldrb	r2, [r3, #0]
    a1d0:	and.w	r3, r2, #255	; 0xff
    a1d4:	cbnz	r2, a236 <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    a1d6:	ldr	r2, [pc, #104]	; (a240 <usb_serial_flush_callback+0x78>)
    a1d8:	ldrb	r2, [r2, #0]
    a1da:	cbz	r2, a236 <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    a1dc:	ldr	r7, [pc, #100]	; (a244 <usb_serial_flush_callback+0x7c>)
    a1de:	ldrh	r5, [r7, #0]
    a1e0:	cbz	r5, a236 <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a1e2:	ldr	r6, [pc, #100]	; (a248 <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a1e4:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a1e8:	ldr	r1, [pc, #96]	; (a24c <usb_serial_flush_callback+0x84>)
    a1ea:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a1ec:	ldr	r4, [pc, #96]	; (a250 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    a1ee:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a1f2:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a1f6:	mov	r2, r5
    a1f8:	mov	r0, r8
    a1fa:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a1fc:	add	r5, r4
    a1fe:	bl	b160 <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    a202:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a206:	mov.w	r3, #3758153728	; 0xe000e000
    a20a:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a20e:	adds	r4, #32
	} while (location < end_addr);
    a210:	cmp	r5, r4
    a212:	bhi.n	a20a <usb_serial_flush_callback+0x42>
	asm("dsb");
    a214:	dsb	sy
	asm("isb");
    a218:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a21c:	movs	r0, #3
    a21e:	mov	r1, r8
    a220:	bl	b18c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a224:	ldrb	r3, [r6, #0]
    a226:	movs	r2, #0
    a228:	adds	r3, #1
	tx_available = 0;
    a22a:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    a22c:	uxtb	r3, r3
    a22e:	cmp	r3, #3
    a230:	ite	ls
    a232:	strbls	r3, [r6, #0]
    a234:	strbhi	r2, [r6, #0]
}
    a236:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a23a:	nop
    a23c:	.word	0x2002dea1
    a240:	.word	0x2002dea3
    a244:	.word	0x2002d8b8
    a248:	.word	0x2002de9f
    a24c:	.word	0x20004900
    a250:	.word	0x20004a00

0000a254 <usb_serial_reset>:
}
    a254:	bx	lr
	...

0000a258 <usb_serial_configure>:
	if (usb_high_speed) {
    a258:	ldr	r3, [pc, #180]	; (a310 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a25a:	movs	r2, #128	; 0x80
    a25c:	movs	r1, #0
    a25e:	ldr	r0, [pc, #180]	; (a314 <usb_serial_configure+0xbc>)
{
    a260:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a262:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a264:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a266:	ldr	r5, [pc, #176]	; (a318 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    a268:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    a26a:	ldr	r6, [pc, #176]	; (a31c <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    a26c:	ite	eq
    a26e:	moveq	r3, #64	; 0x40
    a270:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a274:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a276:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a278:	bl	9f44 <memset>
	tx_head = 0;
    a27c:	ldr	r3, [pc, #160]	; (a320 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a27e:	mov.w	r2, #256	; 0x100
    a282:	mov	r1, r4
    a284:	ldr	r0, [pc, #156]	; (a324 <usb_serial_configure+0xcc>)
	tx_head = 0;
    a286:	strb	r4, [r3, #0]
	tx_available = 0;
    a288:	ldr	r3, [pc, #156]	; (a328 <usb_serial_configure+0xd0>)
    a28a:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a28c:	bl	9f44 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a290:	movs	r2, #16
    a292:	mov	r1, r4
    a294:	ldr	r0, [pc, #148]	; (a32c <usb_serial_configure+0xd4>)
    a296:	bl	9f44 <memset>
	memset(rx_index, 0, sizeof(rx_index));
    a29a:	movs	r2, #16
    a29c:	mov	r1, r4
    a29e:	ldr	r0, [pc, #144]	; (a330 <usb_serial_configure+0xd8>)
    a2a0:	bl	9f44 <memset>
	rx_head = 0;
    a2a4:	ldr	r3, [pc, #140]	; (a334 <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a2a6:	mov	r2, r4
    a2a8:	movs	r1, #16
	rx_head = 0;
    a2aa:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a2ac:	movs	r0, #2
	rx_tail = 0;
    a2ae:	ldr	r3, [pc, #136]	; (a338 <usb_serial_configure+0xe0>)
    a2b0:	strb	r4, [r3, #0]
	rx_available = 0;
    a2b2:	ldr	r3, [pc, #136]	; (a33c <usb_serial_configure+0xe4>)
    a2b4:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a2b6:	mov	r3, r4
    a2b8:	bl	b120 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a2bc:	ldr	r3, [pc, #128]	; (a340 <usb_serial_configure+0xe8>)
    a2be:	mov	r2, r4
    a2c0:	ldrh	r1, [r6, #0]
    a2c2:	movs	r0, #3
    a2c4:	bl	b0e0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a2c8:	mov	r3, r4
    a2ca:	movs	r2, #1
    a2cc:	ldrh	r1, [r5, #0]
    a2ce:	movs	r0, #3
    a2d0:	bl	b120 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a2d4:	mov	r0, r4
    a2d6:	adds	r4, #1
    a2d8:	bl	a0bc <rx_queue_transfer>
    a2dc:	cmp	r4, #8
    a2de:	bne.n	a2d4 <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    a2e0:	ldr	r3, [pc, #96]	; (a344 <usb_serial_configure+0xec>)
    a2e2:	ldr	r2, [pc, #100]	; (a348 <usb_serial_configure+0xf0>)
    a2e4:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    a2e6:	movs	r2, #0
    a2e8:	ldr	r3, [pc, #96]	; (a34c <usb_serial_configure+0xf4>)
    a2ea:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a2ee:	movs	r2, #74	; 0x4a
    a2f0:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a2f4:	ldr.w	r2, [r3, #328]	; 0x148
    a2f8:	orr.w	r2, r2, #16777216	; 0x1000000
    a2fc:	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    a300:	ldr	r3, [pc, #76]	; (a350 <usb_serial_configure+0xf8>)
    a302:	cbz	r3, a30e <usb_serial_configure+0xb6>
    a304:	ldr	r2, [pc, #76]	; (a354 <usb_serial_configure+0xfc>)
    a306:	ldrb	r3, [r2, #0]
    a308:	orr.w	r3, r3, #1
    a30c:	strb	r3, [r2, #0]
}
    a30e:	pop	{r4, r5, r6, pc}
    a310:	.word	0x2002dea4
    a314:	.word	0x20004900
    a318:	.word	0x2002d8ba
    a31c:	.word	0x2002d832
    a320:	.word	0x2002de9f
    a324:	.word	0x20004780
    a328:	.word	0x2002d8b8
    a32c:	.word	0x2002d812
    a330:	.word	0x2002d822
    a334:	.word	0x2002de8b
    a338:	.word	0x2002de9b
    a33c:	.word	0x2002d10c
    a340:	.word	0x0000a11d
    a344:	.word	0x2002d7d8
    a348:	.word	0x0000a1c9
    a34c:	.word	0x402e0000
    a350:	.word	0x00000000
    a354:	.word	0x2002dea6

0000a358 <usb_serial_read>:
{
    a358:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a35c:	mov.w	r3, #3758153728	; 0xe000e000
    a360:	mov.w	r2, #131072	; 0x20000
{
    a364:	mov	r7, r0
    a366:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a368:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    a36c:	movs	r5, #0
	uint32_t tail = rx_tail;
    a36e:	ldr	r3, [pc, #160]	; (a410 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a370:	ldr.w	fp, [pc, #176]	; a424 <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    a374:	ldrb	r4, [r3, #0]
    a376:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    a378:	cmp	r5, r8
    a37a:	bcs.n	a384 <usb_serial_read+0x2c>
    a37c:	ldr	r3, [pc, #148]	; (a414 <usb_serial_read+0xbc>)
    a37e:	ldrb	r2, [r3, #0]
    a380:	cmp	r2, r4
    a382:	bne.n	a398 <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a384:	mov.w	r3, #3758153728	; 0xe000e000
    a388:	mov.w	r2, #131072	; 0x20000
}
    a38c:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a38e:	str.w	r2, [r3, #268]	; 0x10c
}
    a392:	add	sp, #12
    a394:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    a398:	adds	r4, #1
		uint32_t i = rx_list[tail];
    a39a:	ldr	r3, [pc, #124]	; (a418 <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a39c:	ldr	r0, [pc, #124]	; (a41c <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a39e:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    a3a2:	cmp	r4, #9
    a3a4:	ldr.w	sl, [pc, #128]	; a428 <usb_serial_read+0xd0>
    a3a8:	it	cs
    a3aa:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a3ac:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a3b0:	ldrh.w	r1, [fp, r9, lsl #1]
    a3b4:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a3b8:	ldr	r0, [pc, #100]	; (a420 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a3ba:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a3bc:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    a3c0:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a3c2:	add	r1, r0
		if (avail > len) {
    a3c4:	bcs.n	a3ec <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a3c6:	mov	r0, r7
    a3c8:	str	r2, [sp, #4]
    a3ca:	bl	9f88 <memcpy>
			rx_available -= len;
    a3ce:	ldr.w	r1, [sl]
			rx_index[i] += len;
    a3d2:	ldr	r2, [sp, #4]
			rx_available -= len;
    a3d4:	sub.w	r1, r1, r8
    a3d8:	add	r1, r5
    a3da:	mov	r5, r8
    a3dc:	str.w	r1, [sl]
			rx_index[i] += len;
    a3e0:	ldrh.w	r1, [fp, r9, lsl #1]
    a3e4:	add	r2, r1
    a3e6:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    a3ea:	b.n	a378 <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a3ec:	mov	r2, r6
    a3ee:	mov	r0, r7
    a3f0:	bl	9f88 <memcpy>
			rx_available -= avail;
    a3f4:	ldr.w	r2, [sl]
			rx_tail = tail;
    a3f8:	ldr	r3, [pc, #20]	; (a410 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    a3fa:	mov	r0, r9
			rx_available -= avail;
    a3fc:	subs	r2, r2, r6
			p += avail;
    a3fe:	add	r7, r6
			count += avail;
    a400:	add	r5, r6
			rx_available -= avail;
    a402:	str.w	r2, [sl]
			rx_tail = tail;
    a406:	uxtb	r2, r4
    a408:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    a40a:	bl	a0bc <rx_queue_transfer>
    a40e:	b.n	a378 <usb_serial_read+0x20>
    a410:	.word	0x2002de9b
    a414:	.word	0x2002de8b
    a418:	.word	0x2002de8d
    a41c:	.word	0x2002d812
    a420:	.word	0x20003780
    a424:	.word	0x2002d822
    a428:	.word	0x2002d10c

0000a42c <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    a42c:	ldr	r3, [pc, #44]	; (a45c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    a42e:	ldr	r1, [pc, #48]	; (a460 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    a430:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    a432:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    a434:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a436:	cmp	r2, r1
    a438:	beq.n	a456 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a43a:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a43c:	ldr	r2, [pc, #36]	; (a464 <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    a43e:	cmp	r3, #9
    a440:	it	cs
    a442:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a444:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a446:	ldr	r3, [pc, #32]	; (a468 <usb_serial_peekchar+0x3c>)
    a448:	ldrh.w	r1, [r3, r2, lsl #1]
    a44c:	ldr	r3, [pc, #28]	; (a46c <usb_serial_peekchar+0x40>)
    a44e:	add.w	r3, r3, r2, lsl #9
    a452:	ldrb	r0, [r3, r1]
    a454:	bx	lr
	if (tail == rx_head) return -1;
    a456:	mov.w	r0, #4294967295
}
    a45a:	bx	lr
    a45c:	.word	0x2002de9b
    a460:	.word	0x2002de8b
    a464:	.word	0x2002de8d
    a468:	.word	0x2002d822
    a46c:	.word	0x20003780

0000a470 <usb_serial_available>:
	uint32_t n = rx_available;
    a470:	ldr	r3, [pc, #12]	; (a480 <usb_serial_available+0x10>)
{
    a472:	push	{r4, lr}
	uint32_t n = rx_available;
    a474:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a476:	cbnz	r4, a47c <usb_serial_available+0xc>
    a478:	bl	c14c <yield>
}
    a47c:	mov	r0, r4
    a47e:	pop	{r4, pc}
    a480:	.word	0x2002d10c

0000a484 <usb_serial_flush_input>:
{
    a484:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    a488:	ldr	r5, [pc, #64]	; (a4cc <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    a48a:	ldr	r7, [pc, #68]	; (a4d0 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    a48c:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    a48e:	ldr.w	r8, [pc, #80]	; a4e0 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    a492:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    a494:	ldr	r6, [pc, #60]	; (a4d4 <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    a496:	ldrb	r3, [r7, #0]
    a498:	cmp	r3, r4
    a49a:	bne.n	a4a0 <usb_serial_flush_input+0x1c>
}
    a49c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    a4a0:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    a4a2:	ldr	r2, [pc, #52]	; (a4d8 <usb_serial_flush_input+0x54>)
    a4a4:	ldr	r1, [pc, #52]	; (a4dc <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    a4a6:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    a4a8:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    a4aa:	it	cs
    a4ac:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a4ae:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a4b2:	ldrh.w	r2, [r2, r0, lsl #1]
    a4b6:	ldrh.w	r1, [r1, r0, lsl #1]
    a4ba:	subs	r2, r2, r1
    a4bc:	subs	r3, r3, r2
    a4be:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    a4c0:	bl	a0bc <rx_queue_transfer>
		rx_tail = tail;
    a4c4:	uxtb	r3, r4
    a4c6:	strb	r3, [r5, #0]
    a4c8:	b.n	a496 <usb_serial_flush_input+0x12>
    a4ca:	nop
    a4cc:	.word	0x2002de9b
    a4d0:	.word	0x2002de8b
    a4d4:	.word	0x2002d10c
    a4d8:	.word	0x2002d812
    a4dc:	.word	0x2002d822
    a4e0:	.word	0x2002de8d

0000a4e4 <usb_serial_getchar>:
{
    a4e4:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    a4e6:	movs	r1, #1
    a4e8:	add.w	r0, sp, #7
    a4ec:	bl	a358 <usb_serial_read>
    a4f0:	cbz	r0, a4fc <usb_serial_getchar+0x18>
    a4f2:	ldrb.w	r0, [sp, #7]
}
    a4f6:	add	sp, #12
    a4f8:	ldr.w	pc, [sp], #4
	return -1;
    a4fc:	mov.w	r0, #4294967295
    a500:	b.n	a4f6 <usb_serial_getchar+0x12>
	...

0000a504 <usb_serial_write>:
	if (!usb_configuration) return 0;
    a504:	ldr	r3, [pc, #356]	; (a66c <usb_serial_write+0x168>)
{
    a506:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    a50a:	ldrb	r3, [r3, #0]
{
    a50c:	mov	r6, r0
    a50e:	mov	r5, r1
	if (!usb_configuration) return 0;
    a510:	and.w	r4, r3, #255	; 0xff
    a514:	cmp	r3, #0
    a516:	beq.w	a62a <usb_serial_write+0x126>
	uint32_t sent=0;
    a51a:	movs	r4, #0
		tx_noautoflush = 1;
    a51c:	ldr.w	fp, [pc, #360]	; a688 <usb_serial_write+0x184>
	while (size > 0) {
    a520:	cmp	r5, #0
    a522:	beq.w	a62a <usb_serial_write+0x126>
		tx_noautoflush = 1;
    a526:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a528:	ldr.w	r9, [pc, #352]	; a68c <usb_serial_write+0x188>
		while (!tx_available) {
    a52c:	ldr	r7, [pc, #320]	; (a670 <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    a52e:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    a532:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    a536:	ldr	r3, [pc, #316]	; (a674 <usb_serial_write+0x170>)
    a538:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    a53c:	movs	r3, #0
		int waiting=0;
    a53e:	mov	r8, r3
		while (!tx_available) {
    a540:	ldrh	r1, [r7, #0]
    a542:	cbnz	r1, a562 <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    a544:	mov	r0, sl
    a546:	strd	r3, r1, [sp]
    a54a:	bl	b1cc <usb_transfer_status>
			if (!(status & 0x80)) {
    a54e:	ands.w	r0, r0, #128	; 0x80
    a552:	ldr	r2, [pc, #292]	; (a678 <usb_serial_write+0x174>)
    a554:	ldrd	r3, r1, [sp]
    a558:	bne.n	a606 <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    a55a:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    a55e:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    a560:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a562:	ldrh.w	r8, [r7]
    a566:	ldrb.w	r3, [r9]
    a56a:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    a56e:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a570:	mov.w	r2, r3, lsl #11
    a574:	add.w	r0, r0, r3, lsl #11
    a578:	ldr	r3, [pc, #256]	; (a67c <usb_serial_write+0x178>)
    a57a:	str	r2, [sp, #0]
    a57c:	add	r0, r3
		if (size >= tx_available) {
    a57e:	bhi.n	a64c <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    a580:	mov	r2, r8
    a582:	mov	r1, r6
    a584:	bl	9f88 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a588:	ldr	r2, [sp, #0]
    a58a:	ldr	r3, [pc, #240]	; (a67c <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a58c:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a58e:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a590:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a592:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a594:	mov.w	r2, #2048	; 0x800
    a598:	mov	r1, r8
    a59a:	bl	b160 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a59e:	mov	r1, r8
	asm("dsb");
    a5a0:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    a5a4:	add.w	r2, r8, #2048	; 0x800
    a5a8:	add.w	r3, r8, #32
    a5ac:	cmp	r3, r2
    a5ae:	ite	hi
    a5b0:	movhi	r3, #1
    a5b2:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a5b4:	mov.w	r2, #3758153728	; 0xe000e000
    a5b8:	add.w	r3, r8, r3, lsl #5
    a5bc:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    a5c0:	adds	r1, #32
	} while (location < end_addr);
    a5c2:	cmp	r1, r3
    a5c4:	bne.n	a5bc <usb_serial_write+0xb8>
	asm("dsb");
    a5c6:	dsb	sy
	asm("isb");
    a5ca:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a5ce:	movs	r0, #3
    a5d0:	mov	r1, sl
    a5d2:	bl	b18c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a5d6:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    a5da:	ldr	r2, [pc, #164]	; (a680 <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    a5dc:	adds	r3, #1
    a5de:	uxtb	r3, r3
    a5e0:	cmp	r3, #3
    a5e2:	it	hi
    a5e4:	movhi	r3, #0
    a5e6:	strb.w	r3, [r9]
			size -= tx_available;
    a5ea:	ldrh	r3, [r7, #0]
    a5ec:	subs	r5, r5, r3
			sent += tx_available;
    a5ee:	add	r4, r3
			data += tx_available;
    a5f0:	add	r6, r3
			tx_available = 0;
    a5f2:	movs	r3, #0
    a5f4:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    a5f6:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a5fa:	dsb	sy
		tx_noautoflush = 0;
    a5fe:	movs	r3, #0
    a600:	strb.w	r3, [fp]
    a604:	b.n	a520 <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    a606:	dsb	sy
			tx_noautoflush = 0;
    a60a:	strb.w	r1, [fp]
			if (!waiting) {
    a60e:	cmp.w	r8, #0
    a612:	bne.n	a618 <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    a614:	ldr	r3, [pc, #108]	; (a684 <usb_serial_write+0x180>)
    a616:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    a618:	ldrb	r1, [r2, #0]
    a61a:	cbnz	r1, a62a <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a61c:	ldr	r1, [pc, #100]	; (a684 <usb_serial_write+0x180>)
    a61e:	ldr	r1, [r1, #0]
    a620:	subs	r1, r1, r3
    a622:	cmp	r1, #120	; 0x78
    a624:	bls.n	a632 <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    a626:	movs	r3, #1
    a628:	strb	r3, [r2, #0]
}
    a62a:	mov	r0, r4
    a62c:	add	sp, #12
    a62e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    a632:	ldr	r1, [pc, #56]	; (a66c <usb_serial_write+0x168>)
    a634:	ldrb	r1, [r1, #0]
    a636:	cmp	r1, #0
    a638:	beq.n	a62a <usb_serial_write+0x126>
			tx_noautoflush = 1;
    a63a:	mov.w	r8, #1
    a63e:	str	r3, [sp, #0]
			yield();
    a640:	bl	c14c <yield>
			tx_noautoflush = 1;
    a644:	ldr	r3, [sp, #0]
    a646:	strb.w	r8, [fp]
    a64a:	b.n	a540 <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    a64c:	mov	r2, r5
    a64e:	mov	r1, r6
    a650:	bl	9f88 <memcpy>
			tx_available -= size;
    a654:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a658:	ldr	r3, [pc, #36]	; (a680 <usb_serial_write+0x17c>)
    a65a:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    a65e:	add	r4, r5
			tx_available -= size;
    a660:	strh.w	r8, [r7]
			size = 0;
    a664:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a666:	str.w	r2, [r3, #132]	; 0x84
}
    a66a:	b.n	a5fa <usb_serial_write+0xf6>
    a66c:	.word	0x2002dea3
    a670:	.word	0x2002d8b8
    a674:	.word	0x20004900
    a678:	.word	0x2002de9e
    a67c:	.word	0x20004a00
    a680:	.word	0x402e0000
    a684:	.word	0x2002d7c4
    a688:	.word	0x2002dea1
    a68c:	.word	0x2002de9f

0000a690 <usb_serial_putchar>:
{
    a690:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    a692:	movs	r1, #1
{
    a694:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    a698:	add.w	r0, sp, #7
    a69c:	bl	a504 <usb_serial_write>
}
    a6a0:	add	sp, #12
    a6a2:	ldr.w	pc, [sp], #4
	...

0000a6a8 <usb_serial_write_buffer_free>:
{
    a6a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a6ac:	movs	r4, #0
	tx_noautoflush = 1;
    a6ae:	ldr	r7, [pc, #56]	; (a6e8 <usb_serial_write_buffer_free+0x40>)
    a6b0:	movs	r3, #1
    a6b2:	ldr	r6, [pc, #56]	; (a6ec <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a6b4:	mov	r5, r4
		if (i == tx_head) continue;
    a6b6:	ldr.w	r8, [pc, #56]	; a6f0 <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    a6ba:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    a6bc:	ldrb.w	r3, [r8]
    a6c0:	cmp	r3, r4
    a6c2:	beq.n	a6d2 <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a6c4:	mov	r0, r6
    a6c6:	bl	b1cc <usb_transfer_status>
    a6ca:	lsls	r3, r0, #24
    a6cc:	it	pl
    a6ce:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a6d2:	adds	r4, #1
    a6d4:	adds	r6, #32
    a6d6:	cmp	r4, #4
    a6d8:	bne.n	a6bc <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    a6da:	dsb	sy
	tx_noautoflush = 0;
    a6de:	movs	r3, #0
}
    a6e0:	mov	r0, r5
	tx_noautoflush = 0;
    a6e2:	strb	r3, [r7, #0]
}
    a6e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6e8:	.word	0x2002dea1
    a6ec:	.word	0x20004900
    a6f0:	.word	0x2002de9f

0000a6f4 <usb_serial_flush_output>:
{
    a6f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a6f8:	ldr	r3, [pc, #116]	; (a770 <usb_serial_flush_output+0x7c>)
    a6fa:	ldrb	r3, [r3, #0]
    a6fc:	cbz	r3, a76c <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    a6fe:	ldr.w	r8, [pc, #132]	; a784 <usb_serial_flush_output+0x90>
    a702:	ldrh.w	r5, [r8]
    a706:	cbz	r5, a76c <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    a708:	ldr	r7, [pc, #104]	; (a774 <usb_serial_flush_output+0x80>)
    a70a:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a70c:	ldr	r6, [pc, #104]	; (a778 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a70e:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    a712:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    a714:	ldr	r2, [pc, #100]	; (a77c <usb_serial_flush_output+0x88>)
    a716:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a718:	ldr	r4, [pc, #100]	; (a780 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a71a:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a71e:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a720:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a724:	movs	r3, #0
    a726:	mov	r0, r9
    a728:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    a72a:	add	r5, r4
    a72c:	bl	b160 <usb_prepare_transfer>
	asm("dsb");
    a730:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a734:	mov.w	r3, #3758153728	; 0xe000e000
    a738:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a73c:	adds	r4, #32
	} while (location < end_addr);
    a73e:	cmp	r5, r4
    a740:	bhi.n	a738 <usb_serial_flush_output+0x44>
	asm("dsb");
    a742:	dsb	sy
	asm("isb");
    a746:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a74a:	movs	r0, #3
    a74c:	mov	r1, r9
    a74e:	bl	b18c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a752:	ldrb	r3, [r6, #0]
    a754:	movs	r2, #0
    a756:	adds	r3, #1
	tx_available = 0;
    a758:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    a75c:	uxtb	r3, r3
    a75e:	cmp	r3, #3
    a760:	ite	ls
    a762:	strbls	r3, [r6, #0]
    a764:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    a766:	dsb	sy
	tx_noautoflush = 0;
    a76a:	strb	r2, [r7, #0]
}
    a76c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a770:	.word	0x2002dea3
    a774:	.word	0x2002dea1
    a778:	.word	0x2002de9f
    a77c:	.word	0x20004900
    a780:	.word	0x20004a00
    a784:	.word	0x2002d8b8

0000a788 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a788:	ldr	r3, [pc, #512]	; (a98c <set_arm_clock+0x204>)
{
    a78a:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a78c:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a78e:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a790:	sub.w	r3, r3, #507904	; 0x7c000
    a794:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a796:	ldr	r3, [pc, #504]	; (a990 <set_arm_clock+0x208>)
    a798:	cmp	r0, r3
    a79a:	bls.w	a95c <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a79e:	ldr	r3, [pc, #500]	; (a994 <set_arm_clock+0x20c>)
    a7a0:	cmp	r0, r3
    a7a2:	bls.w	a96e <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a7a6:	ldr	r2, [pc, #496]	; (a998 <set_arm_clock+0x210>)
    a7a8:	subs	r3, r0, r3
    a7aa:	udiv	r3, r3, r2
    a7ae:	movs	r2, #25
    a7b0:	muls	r3, r2
    a7b2:	movw	r2, #1575	; 0x627
    a7b6:	addw	r3, r3, #1250	; 0x4e2
    a7ba:	cmp	r3, r2
    a7bc:	it	cs
    a7be:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a7c0:	ldr	r6, [pc, #456]	; (a98c <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a7c2:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a7c6:	ldr.w	r2, [r6, #128]	; 0x80
    a7ca:	orr.w	r2, r2, #192	; 0xc0
    a7ce:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a7d2:	movs	r2, #25
    a7d4:	udiv	r2, r3, r2
    a7d8:	and.w	r3, r4, #31
    a7dc:	cmp	r3, r2
    a7de:	bcs.n	a7f0 <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a7e0:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a7e4:	ldr	r3, [pc, #436]	; (a99c <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a7e6:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    a7e8:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a7ea:	ldr	r6, [r3, #0]
    a7ec:	cmp	r6, #0
    a7ee:	bge.n	a7ea <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a7f0:	ands.w	r3, r1, #33554432	; 0x2000000
    a7f4:	bne.n	a848 <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a7f6:	ldr	r6, [pc, #424]	; (a9a0 <set_arm_clock+0x218>)
    a7f8:	ldr	r7, [pc, #424]	; (a9a4 <set_arm_clock+0x21c>)
    a7fa:	ldr	r6, [r6, #16]
    a7fc:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    a7fe:	cmp	r6, r7
    a800:	itee	eq
    a802:	moveq	r6, #3
    a804:	movne	r6, #0
    a806:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a808:	lsls	r7, r6, #27
    a80a:	eor.w	r6, r1, r6, lsl #27
    a80e:	tst.w	r6, #939524096	; 0x38000000
    a812:	beq.n	a81e <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a814:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    a818:	ldr	r6, [pc, #368]	; (a98c <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a81a:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    a81c:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a81e:	lsls	r6, r3, #12
    a820:	eor.w	r3, r5, r3, lsl #12
    a824:	tst.w	r3, #12288	; 0x3000
    a828:	beq.n	a83a <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a82a:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a82e:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    a830:	ldr	r5, [pc, #344]	; (a98c <set_arm_clock+0x204>)
    a832:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a834:	ldr	r3, [r5, #72]	; 0x48
    a836:	lsls	r6, r3, #28
    a838:	bmi.n	a834 <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a83a:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a83e:	ldr	r3, [pc, #332]	; (a98c <set_arm_clock+0x204>)
    a840:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a842:	ldr	r5, [r3, #72]	; 0x48
    a844:	lsls	r5, r5, #26
    a846:	bmi.n	a842 <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a848:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a84a:	ldr	r7, [pc, #348]	; (a9a8 <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    a84c:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    a84e:	mul.w	r3, r6, r5
    a852:	muls	r3, r0
    a854:	cmp	r3, r7
    a856:	bls.w	a974 <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a85a:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    a85e:	ldr	r0, [pc, #332]	; (a9ac <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a860:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    a864:	cmp	r3, r0
    a866:	ldr	r0, [pc, #328]	; (a9b0 <set_arm_clock+0x228>)
    a868:	bhi.w	a988 <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a86c:	udiv	r3, r3, r0
    a870:	cmp	r3, #54	; 0x36
    a872:	it	cc
    a874:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a876:	ldr	r7, [pc, #296]	; (a9a0 <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    a878:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a87a:	ldr.w	lr, [pc, #344]	; a9d4 <set_arm_clock+0x24c>
    a87e:	ldr.w	ip, [r7]
    a882:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a886:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    a88a:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a88e:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a892:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    a894:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a898:	beq.n	a8ae <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a89a:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a89e:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a8a2:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a8a6:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a8a8:	ldr	r3, [r7, #0]
    a8aa:	cmp	r3, #0
    a8ac:	bge.n	a8a8 <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a8ae:	ldr	r3, [pc, #220]	; (a98c <set_arm_clock+0x204>)
    a8b0:	subs	r5, #1
    a8b2:	ldr	r7, [r3, #16]
    a8b4:	and.w	r7, r7, #7
    a8b8:	cmp	r7, r5
    a8ba:	beq.n	a8c4 <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a8bc:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a8be:	ldr	r5, [r3, #72]	; 0x48
    a8c0:	lsls	r7, r5, #15
    a8c2:	bmi.n	a8be <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a8c4:	subs	r3, r6, #1
    a8c6:	lsls	r5, r3, #10
    a8c8:	eor.w	r3, r1, r3, lsl #10
    a8cc:	tst.w	r3, #7168	; 0x1c00
    a8d0:	beq.n	a8e6 <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a8d2:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a8d6:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a8da:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    a8dc:	ldr	r3, [pc, #172]	; (a98c <set_arm_clock+0x204>)
    a8de:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a8e0:	ldr	r5, [r3, #72]	; 0x48
    a8e2:	lsls	r5, r5, #30
    a8e4:	bmi.n	a8e0 <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a8e6:	ldr	r3, [pc, #204]	; (a9b4 <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    a8e8:	ldr	r5, [pc, #204]	; (a9b8 <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a8ea:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    a8ec:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a8ee:	itet	ls
    a8f0:	ldrls	r5, [pc, #200]	; (a9bc <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    a8f2:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a8f4:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a8f8:	subs	r6, r3, #1
    a8fa:	lsls	r5, r6, #8
    a8fc:	eor.w	r6, r1, r6, lsl #8
    a900:	tst.w	r6, #768	; 0x300
    a904:	ldr	r6, [pc, #132]	; (a98c <set_arm_clock+0x204>)
    a906:	beq.n	a914 <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a908:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a90c:	and.w	r5, r5, #768	; 0x300
    a910:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a912:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a914:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a916:	ldr	r5, [pc, #116]	; (a98c <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a918:	bic.w	r1, r1, #33554432	; 0x2000000
    a91c:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a91e:	ldr	r1, [r5, #72]	; 0x48
    a920:	lsls	r1, r1, #26
    a922:	bmi.n	a91e <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    a924:	ldr	r1, [pc, #152]	; (a9c0 <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    a926:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    a92a:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a92c:	ldr	r1, [pc, #148]	; (a9c4 <set_arm_clock+0x23c>)
    a92e:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a930:	mov.w	r3, #4294967295
    a934:	ldr	r1, [pc, #144]	; (a9c8 <set_arm_clock+0x240>)
    a936:	udiv	r1, r0, r1
    a93a:	udiv	r3, r3, r1
    a93e:	ldr	r1, [pc, #140]	; (a9cc <set_arm_clock+0x244>)
    a940:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a942:	and.w	r3, r4, #31
    a946:	cmp	r2, r3
    a948:	bcs.n	a95a <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a94a:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a94e:	ldr	r3, [pc, #76]	; (a99c <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a950:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    a952:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a954:	ldr	r2, [r3, #0]
    a956:	cmp	r2, #0
    a958:	bge.n	a954 <set_arm_clock+0x1cc>
	}

	return frequency;
}
    a95a:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    a95c:	ldr	r6, [pc, #112]	; (a9d0 <set_arm_clock+0x248>)
    a95e:	movw	r3, #1150	; 0x47e
    a962:	movw	r2, #950	; 0x3b6
    a966:	cmp	r0, r6
    a968:	it	ls
    a96a:	movls	r3, r2
    a96c:	b.n	a7c0 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    a96e:	movw	r3, #1250	; 0x4e2
    a972:	b.n	a7c0 <set_arm_clock+0x38>
		if (div_arm < 8) {
    a974:	cmp	r5, #8
    a976:	beq.n	a97c <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    a978:	adds	r5, #1
    a97a:	b.n	a84e <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    a97c:	cmp	r6, #4
    a97e:	bhi.w	a85a <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    a982:	adds	r6, #1
				div_arm = 1;
    a984:	movs	r5, #1
    a986:	b.n	a84e <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    a988:	movs	r3, #108	; 0x6c
    a98a:	b.n	a876 <set_arm_clock+0xee>
    a98c:	.word	0x400fc000
    a990:	.word	0x1f78a400
    a994:	.word	0x23c34600
    a998:	.word	0x01ab3f00
    a99c:	.word	0x40080000
    a9a0:	.word	0x400d8000
    a9a4:	.word	0x80003040
    a9a8:	.word	0x269fb1ff
    a9ac:	.word	0x4df67eff
    a9b0:	.word	0x00b71b00
    a9b4:	.word	0x08f0d17f
    a9b8:	.word	0x2cb4177f
    a9bc:	.word	0x08f0d180
    a9c0:	.word	0x20001c24
    a9c4:	.word	0x20001c20
    a9c8:	.word	0x000f4240
    a9cc:	.word	0x2002d134
    a9d0:	.word	0x016e3600
    a9d4:	.word	0x8001307f

0000a9d8 <endpoint0_receive>:
{
    a9d8:	push	{r4, r5, lr}
    a9da:	ldr	r4, [pc, #136]	; (aa64 <endpoint0_receive+0x8c>)
	if (len > 0) {
    a9dc:	cbz	r1, aa20 <endpoint0_receive+0x48>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a9de:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    a9e0:	ldr	r3, [pc, #132]	; (aa68 <endpoint0_receive+0x90>)
    a9e2:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a9e4:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a9e8:	str	r0, [r3, #8]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    a9ea:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a9ec:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a9ee:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    a9f2:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a9f4:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a9f6:	add.w	r1, r0, #8192	; 0x2000
    a9fa:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a9fc:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aa00:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aa04:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aa06:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    aa08:	movs	r3, #0
    aa0a:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    aa0c:	ldr	r3, [pc, #92]	; (aa6c <endpoint0_receive+0x94>)
    aa0e:	ldr.w	r1, [r3, #432]	; 0x1b0
    aa12:	orrs	r1, r5
    aa14:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    aa18:	ldr.w	r1, [r3, #432]	; 0x1b0
    aa1c:	cmp	r1, #0
    aa1e:	bne.n	aa18 <endpoint0_receive+0x40>
	endpoint0_transfer_ack.next = 1;
    aa20:	ldr	r3, [pc, #76]	; (aa70 <endpoint0_receive+0x98>)
    aa22:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa24:	cmp	r2, #0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    aa26:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    aa2a:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa2c:	movw	r1, #32896	; 0x8080
    aa30:	it	eq
    aa32:	moveq	r1, #128	; 0x80
    aa34:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    aa36:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    aa38:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    aa3c:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aa3e:	mov.w	r1, #65537	; 0x10001
    aa42:	ldr	r3, [pc, #40]	; (aa6c <endpoint0_receive+0x94>)
    aa44:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    aa48:	ldr.w	r1, [r3, #432]	; 0x1b0
    aa4c:	orr.w	r1, r1, #65536	; 0x10000
    aa50:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    aa54:	ldr	r1, [pc, #28]	; (aa74 <endpoint0_receive+0x9c>)
    aa56:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    aa58:	ldr.w	r2, [r3, #432]	; 0x1b0
    aa5c:	cmp	r2, #0
    aa5e:	bne.n	aa58 <endpoint0_receive+0x80>
}
    aa60:	pop	{r4, r5, pc}
    aa62:	nop
    aa64:	.word	0x20000000
    aa68:	.word	0x20002320
    aa6c:	.word	0x402e0000
    aa70:	.word	0x20002300
    aa74:	.word	0x2002cff0

0000aa78 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    aa78:	ldr	r3, [r0, #56]	; 0x38
{
    aa7a:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    aa7c:	cbz	r3, aa86 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    aa7e:	ldr	r3, [r2, #4]
    aa80:	orr.w	r3, r3, #32768	; 0x8000
    aa84:	str	r3, [r2, #4]
	}
	__disable_irq();
    aa86:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    aa88:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    aa8a:	ldr	r3, [pc, #96]	; (aaec <schedule_transfer+0x74>)
    aa8c:	cbz	r4, aad8 <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    aa8e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    aa90:	ldr.w	r4, [r3, #432]	; 0x1b0
    aa94:	tst	r4, r1
    aa96:	bne.n	aad2 <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    aa98:	ldr	r6, [pc, #84]	; (aaf0 <schedule_transfer+0x78>)
    aa9a:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    aa9c:	ldr.w	r4, [r3, #320]	; 0x140
    aaa0:	orr.w	r4, r4, #16384	; 0x4000
    aaa4:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    aaa8:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    aaac:	ldr.w	r5, [r3, #320]	; 0x140
    aab0:	lsls	r5, r5, #17
    aab2:	bmi.n	aabe <schedule_transfer+0x46>
    aab4:	ldr	r5, [r6, #4]
    aab6:	subs	r5, r5, r7
    aab8:	cmp.w	r5, #2400	; 0x960
    aabc:	bcc.n	aa9c <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    aabe:	ands	r4, r1
    aac0:	bne.n	aad2 <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    aac2:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    aac6:	ldr	r4, [pc, #36]	; (aaec <schedule_transfer+0x74>)
    aac8:	ldr.w	r3, [r4, #432]	; 0x1b0
    aacc:	orrs	r3, r1
    aace:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    aad2:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    aad4:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    aad6:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    aad8:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    aadc:	ldr.w	r4, [r3, #432]	; 0x1b0
    aae0:	orrs	r1, r4
    aae2:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    aae6:	str	r2, [r0, #48]	; 0x30
    aae8:	b.n	aad2 <schedule_transfer+0x5a>
    aaea:	nop
    aaec:	.word	0x402e0000
    aaf0:	.word	0xe0001000

0000aaf4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    aaf4:	push	{r4, r5, r6, lr}
    aaf6:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    aaf8:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    aafa:	cbz	r0, ab0c <run_callbacks+0x18>
    aafc:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    aafe:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    ab00:	ldr	r3, [r2, #4]
    ab02:	ands.w	r3, r3, #128	; 0x80
    ab06:	beq.n	ab0e <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    ab08:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    ab0a:	cbnz	r5, ab1c <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    ab0c:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    ab0e:	ldr	r2, [r2, #0]
		count++;
    ab10:	adds	r5, #1
		if ((uint32_t)t == 1) {
    ab12:	cmp	r2, #1
    ab14:	bne.n	ab00 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    ab16:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    ab1a:	b.n	ab0a <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    ab1c:	ldr	r6, [r0, #0]
		count--;
    ab1e:	subs	r5, #1
		ep->callback_function(first);
    ab20:	ldr	r3, [r4, #56]	; 0x38
    ab22:	blx	r3
		first = next;
    ab24:	mov	r0, r6
    ab26:	b.n	ab0a <run_callbacks+0x16>

0000ab28 <usb_endpoint_config>:
{
    ab28:	push	{r4, r5, r6, lr}
    ab2a:	mov	r4, r0
    ab2c:	mov	r6, r1
    ab2e:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    ab30:	movs	r1, #0
    ab32:	movs	r2, #60	; 0x3c
    ab34:	adds	r0, #4
    ab36:	bl	9f44 <memset>
	qh->next = 1; // Terminate bit = 1
    ab3a:	movs	r3, #1
	qh->config = config;
    ab3c:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    ab3e:	str	r3, [r4, #8]
	qh->callback_function = callback;
    ab40:	str	r5, [r4, #56]	; 0x38
}
    ab42:	pop	{r4, r5, r6, pc}

0000ab44 <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    ab44:	ldr	r2, [pc, #124]	; (abc4 <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    ab46:	push	{r4, lr}
	if (len > 0) {
    ab48:	cbz	r1, ab8e <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ab4a:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ab4c:	ldr	r3, [pc, #120]	; (abc8 <endpoint0_transmit.constprop.0+0x84>)
    ab4e:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ab50:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ab54:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ab56:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ab58:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ab5a:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    ab5e:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ab60:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ab62:	add.w	r1, r0, #8192	; 0x2000
    ab66:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ab68:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ab6c:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ab70:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ab72:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    ab74:	movs	r3, #0
    ab76:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    ab78:	ldr	r3, [pc, #80]	; (abcc <endpoint0_transmit.constprop.0+0x88>)
    ab7a:	ldr.w	r1, [r3, #432]	; 0x1b0
    ab7e:	orr.w	r1, r1, #65536	; 0x10000
    ab82:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ab86:	ldr.w	r1, [r3, #432]	; 0x1b0
    ab8a:	cmp	r1, #0
    ab8c:	bne.n	ab86 <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    ab8e:	ldr	r3, [pc, #64]	; (abd0 <endpoint0_transmit.constprop.0+0x8c>)
    ab90:	movs	r1, #1
    ab92:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ab94:	movs	r1, #128	; 0x80
    ab96:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    ab98:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    ab9a:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    ab9e:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aba0:	mov.w	r2, #65537	; 0x10001
    aba4:	ldr	r3, [pc, #36]	; (abcc <endpoint0_transmit.constprop.0+0x88>)
    aba6:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    abaa:	ldr.w	r2, [r3, #432]	; 0x1b0
    abae:	orr.w	r2, r2, #1
    abb2:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    abb6:	ldr	r2, [pc, #28]	; (abd4 <endpoint0_transmit.constprop.0+0x90>)
    abb8:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    abba:	ldr.w	r2, [r3, #432]	; 0x1b0
    abbe:	cmp	r2, #0
    abc0:	bne.n	abba <endpoint0_transmit.constprop.0+0x76>
}
    abc2:	pop	{r4, pc}
    abc4:	.word	0x20000000
    abc8:	.word	0x20002320
    abcc:	.word	0x402e0000
    abd0:	.word	0x20002300
    abd4:	.word	0x2002cff0

0000abd8 <usb_start_sof_interrupts>:
	__disable_irq();
    abd8:	cpsid	i
	sof_usage |= (1 << interface);
    abda:	ldr	r2, [pc, #40]	; (ac04 <usb_start_sof_interrupts+0x2c>)
    abdc:	movs	r3, #1
    abde:	lsl.w	r0, r3, r0
    abe2:	ldrb	r3, [r2, #0]
    abe4:	orrs	r0, r3
    abe6:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    abe8:	ldr	r2, [pc, #28]	; (ac08 <usb_start_sof_interrupts+0x30>)
    abea:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    abee:	lsls	r1, r3, #24
    abf0:	bmi.n	abfe <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    abf2:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    abf4:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    abf6:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    abfa:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    abfe:	cpsie	i
}
    ac00:	bx	lr
    ac02:	nop
    ac04:	.word	0x2002de9d
    ac08:	.word	0x402e0000

0000ac0c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    ac0c:	movs	r3, #1
    ac0e:	ldr	r2, [pc, #32]	; (ac30 <usb_stop_sof_interrupts+0x24>)
    ac10:	lsl.w	r0, r3, r0
    ac14:	ldrb	r3, [r2, #0]
    ac16:	bic.w	r0, r3, r0
    ac1a:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    ac1c:	cbnz	r0, ac2c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    ac1e:	ldr	r2, [pc, #20]	; (ac34 <usb_stop_sof_interrupts+0x28>)
    ac20:	ldr.w	r3, [r2, #328]	; 0x148
    ac24:	bic.w	r3, r3, #128	; 0x80
    ac28:	str.w	r3, [r2, #328]	; 0x148
}
    ac2c:	bx	lr
    ac2e:	nop
    ac30:	.word	0x2002de9d
    ac34:	.word	0x402e0000

0000ac38 <usb_isr>:
{
    ac38:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    ac3c:	ldr	r4, [pc, #676]	; (aee4 <usb_isr+0x2ac>)
    ac3e:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ac42:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    ac44:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ac48:	bmi.n	acb0 <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    ac4a:	lsls	r1, r6, #25
    ac4c:	bmi.w	b076 <usb_isr+0x43e>
	if (status & USB_USBSTS_TI0) {
    ac50:	lsls	r4, r6, #7
    ac52:	bpl.n	ac5c <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    ac54:	ldr	r3, [pc, #656]	; (aee8 <usb_isr+0x2b0>)
    ac56:	ldr	r3, [r3, #0]
    ac58:	cbz	r3, ac5c <usb_isr+0x24>
    ac5a:	blx	r3
	if (status & USB_USBSTS_TI1) {
    ac5c:	lsls	r0, r6, #6
    ac5e:	bpl.n	ac68 <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    ac60:	ldr	r3, [pc, #648]	; (aeec <usb_isr+0x2b4>)
    ac62:	ldr	r3, [r3, #0]
    ac64:	cbz	r3, ac68 <usb_isr+0x30>
    ac66:	blx	r3
	if (status & USB_USBSTS_PCI) {
    ac68:	lsls	r1, r6, #29
    ac6a:	bpl.n	ac7e <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    ac6c:	ldr	r3, [pc, #628]	; (aee4 <usb_isr+0x2ac>)
    ac6e:	ldr	r2, [pc, #640]	; (aef0 <usb_isr+0x2b8>)
    ac70:	ldr.w	r3, [r3, #388]	; 0x184
    ac74:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    ac78:	it	ne
    ac7a:	movne	r3, #1
			usb_high_speed = 0;
    ac7c:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    ac7e:	ldr	r3, [pc, #612]	; (aee4 <usb_isr+0x2ac>)
    ac80:	ldr.w	r3, [r3, #328]	; 0x148
    ac84:	lsls	r2, r3, #24
    ac86:	bpl.w	b0a6 <usb_isr+0x46e>
    ac8a:	lsls	r3, r6, #24
    ac8c:	bpl.w	b0a6 <usb_isr+0x46e>
		if (usb_reboot_timer) {
    ac90:	ldr	r2, [pc, #608]	; (aef4 <usb_isr+0x2bc>)
    ac92:	ldrb	r3, [r2, #0]
    ac94:	cmp	r3, #0
    ac96:	beq.w	b0a6 <usb_isr+0x46e>
			if (--usb_reboot_timer == 0) {
    ac9a:	subs	r3, #1
    ac9c:	uxtb	r3, r3
    ac9e:	strb	r3, [r2, #0]
    aca0:	cmp	r3, #0
    aca2:	bne.w	b0a6 <usb_isr+0x46e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    aca6:	movs	r0, #3
    aca8:	bl	ac0c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    acac:	bl	11e38 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    acb0:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    acb4:	ldr	r7, [pc, #576]	; (aef8 <usb_isr+0x2c0>)
		while (setupstatus) {
    acb6:	cmp	r3, #0
    acb8:	bne.n	ad42 <usb_isr+0x10a>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    acba:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    acbe:	cmp	r5, #0
    acc0:	beq.n	ac4a <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    acc2:	ldr	r2, [pc, #568]	; (aefc <usb_isr+0x2c4>)
			USB1_ENDPTCOMPLETE = completestatus;
    acc4:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    acc8:	ldr	r1, [r2, #0]
    acca:	tst	r5, r1
    accc:	beq.n	ad04 <usb_isr+0xcc>
				endpoint0_notify_mask = 0;
    acce:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    acd0:	movw	r1, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    acd4:	ldr	r2, [pc, #552]	; (af00 <usb_isr+0x2c8>)
    acd6:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    acd8:	ldrh	r2, [r2, #0]
    acda:	cmp	r2, r1
    acdc:	bne.w	b038 <usb_isr+0x400>
    ace0:	uxth	r3, r3
    ace2:	cbnz	r3, ad04 <usb_isr+0xcc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ace4:	ldr	r2, [pc, #540]	; (af04 <usb_isr+0x2cc>)
    ace6:	ldr	r3, [pc, #544]	; (af08 <usb_isr+0x2d0>)
    ace8:	ldr	r0, [r2, #0]
    acea:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    acec:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    acee:	ldrb	r2, [r2, #6]
    acf0:	str	r0, [r3, #0]
    acf2:	strh	r1, [r3, #4]
    acf4:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    acf6:	bne.n	ad04 <usb_isr+0xcc>
			usb_start_sof_interrupts(NUM_INTERFACE);
    acf8:	movs	r0, #3
    acfa:	bl	abd8 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    acfe:	ldr	r3, [pc, #500]	; (aef4 <usb_isr+0x2bc>)
    ad00:	movs	r2, #80	; 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    ad02:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    ad04:	ldr	r3, [pc, #516]	; (af0c <usb_isr+0x2d4>)
    ad06:	ldr	r3, [r3, #0]
			if (completestatus) {
    ad08:	ands	r5, r3
    ad0a:	beq.n	ac4a <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    ad0c:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ad0e:	ldr.w	r8, [pc, #512]	; af10 <usb_isr+0x2d8>
					tx &= ~(1<<p);
    ad12:	mov.w	r9, #1
				while (tx) {
    ad16:	cmp	r4, #0
    ad18:	bne.w	b05a <usb_isr+0x422>
				uint32_t rx = completestatus & 0xffff;
    ad1c:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    ad1e:	ldr	r7, [pc, #496]	; (af10 <usb_isr+0x2d8>)
					rx &= ~(1<<p);
    ad20:	mov.w	r8, #1
				while(rx) {
    ad24:	cmp	r5, #0
    ad26:	beq.n	ac4a <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    ad28:	rbit	r4, r5
    ad2c:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    ad30:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    ad34:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    ad38:	bl	aaf4 <run_callbacks>
					rx &= ~(1<<p);
    ad3c:	bic.w	r5, r5, r4
    ad40:	b.n	ad24 <usb_isr+0xec>
			USB1_ENDPTSETUPSTAT = setupstatus;
    ad42:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    ad46:	ldr	r3, [pc, #456]	; (af10 <usb_isr+0x2d8>)
				s.word2 = endpoint_queue_head[0].setup1;
    ad48:	ldrd	r5, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    ad4c:	ldr.w	r2, [r4, #320]	; 0x140
    ad50:	orr.w	r2, r2, #8192	; 0x2000
    ad54:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    ad58:	ldr.w	r2, [r4, #320]	; 0x140
    ad5c:	lsls	r2, r2, #18
    ad5e:	bpl.n	ad4c <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    ad60:	ldr.w	r2, [r4, #320]	; 0x140
    ad64:	bic.w	r2, r2, #8192	; 0x2000
    ad68:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    ad6c:	mov.w	r2, #65537	; 0x10001
    ad70:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    ad74:	ldr.w	r2, [r4, #436]	; 0x1b4
    ad78:	ands.w	r8, r2, #65537	; 0x10001
    ad7c:	bne.n	ad74 <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    ad7e:	uxth	r1, r5
    ad80:	ldr	r2, [pc, #376]	; (aefc <usb_isr+0x2c4>)
	switch (setup.wRequestAndType) {
    ad82:	cmp.w	r1, #2176	; 0x880
			endpoint0_notify_mask = 0;
    ad86:	str.w	r8, [r2]
	switch (setup.wRequestAndType) {
    ad8a:	beq.w	aec6 <usb_isr+0x28e>
    ad8e:	bhi.n	ae26 <usb_isr+0x1ee>
    ad90:	movw	r2, #770	; 0x302
    ad94:	cmp	r1, r2
    ad96:	beq.w	af6a <usb_isr+0x332>
    ad9a:	bhi.n	adba <usb_isr+0x182>
    ad9c:	cmp	r1, #130	; 0x82
    ad9e:	beq.w	af34 <usb_isr+0x2fc>
    ada2:	cmp.w	r1, #258	; 0x102
    ada6:	beq.w	af90 <usb_isr+0x358>
    adaa:	cmp	r1, #128	; 0x80
    adac:	beq.w	aed6 <usb_isr+0x29e>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    adb0:	mov.w	r3, #65537	; 0x10001
    adb4:	str.w	r3, [r4, #448]	; 0x1c0
    adb8:	b.n	aec0 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    adba:	cmp.w	r1, #1280	; 0x500
    adbe:	beq.n	aeaa <usb_isr+0x272>
    adc0:	sub.w	r1, r1, #1664	; 0x680
    adc4:	cmp	r1, #1
    adc6:	bhi.n	adb0 <usb_isr+0x178>
    adc8:	ldr	r2, [pc, #328]	; (af14 <usb_isr+0x2dc>)
    adca:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    adce:	uxth.w	ip, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    add2:	ldr	r1, [r2, #4]
    add4:	cmp	r1, #0
    add6:	beq.n	adb0 <usb_isr+0x178>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    add8:	ldrh.w	lr, [r2]
    addc:	mov	r0, r5
    adde:	cmp	lr, r5
    ade0:	bne.w	b000 <usb_isr+0x3c8>
    ade4:	ldrh.w	lr, [r2, #2]
    ade8:	cmp	lr, ip
    adea:	bne.w	b000 <usb_isr+0x3c8>
				if ((setup.wValue >> 8) == 3) {
    adee:	lsrs	r5, r5, #8
				if (datalen > setup.wLength) datalen = setup.wLength;
    adf0:	mov.w	r8, r3, lsr #16
    adf4:	ldr	r3, [pc, #288]	; (af18 <usb_isr+0x2e0>)
				if ((setup.wValue >> 8) == 3) {
    adf6:	cmp	r5, #3
					datalen = *(list->addr);
    adf8:	ite	eq
    adfa:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    adfc:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    adfe:	cmp	r8, r2
    ae00:	it	cs
    ae02:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    ae04:	cmp.w	r0, #512	; 0x200
    ae08:	bne.w	afb2 <usb_isr+0x37a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    ae0c:	ldr	r2, [pc, #224]	; (aef0 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ae0e:	ldr	r1, [pc, #268]	; (af1c <usb_isr+0x2e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    ae10:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    ae12:	mov	r2, r8
    ae14:	ldr	r0, [pc, #264]	; (af20 <usb_isr+0x2e8>)
    ae16:	cmp	r5, #0
    ae18:	it	ne
    ae1a:	movne	r1, r0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    ae1c:	mov	r0, r3
    ae1e:	bl	9f88 <memcpy>
    ae22:	mov	r3, r0
    ae24:	b.n	afd4 <usb_isr+0x39c>
	switch (setup.wRequestAndType) {
    ae26:	movw	r2, #8993	; 0x2321
    ae2a:	cmp	r1, r2
    ae2c:	beq.n	ae70 <usb_isr+0x238>
    ae2e:	bhi.n	ae7c <usb_isr+0x244>
    ae30:	movw	r2, #8225	; 0x2021
    ae34:	cmp	r1, r2
    ae36:	beq.w	b01e <usb_isr+0x3e6>
    ae3a:	movw	r2, #8737	; 0x2221
    ae3e:	cmp	r1, r2
    ae40:	beq.w	b004 <usb_isr+0x3cc>
    ae44:	cmp.w	r1, #2304	; 0x900
    ae48:	bne.n	adb0 <usb_isr+0x178>
		usb_configuration = setup.wValue;
    ae4a:	ldr	r3, [pc, #216]	; (af24 <usb_isr+0x2ec>)
    ae4c:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    ae50:	mov.w	r2, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    ae54:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    ae56:	ldr	r3, [pc, #208]	; (af28 <usb_isr+0x2f0>)
    ae58:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    ae5c:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    ae60:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    ae64:	str.w	r3, [r4, #468]	; 0x1d4
		usb_serial_configure();
    ae68:	bl	a258 <usb_serial_configure>
		usb_mtp_configure();
    ae6c:	bl	be78 <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    ae70:	movs	r2, #0
    ae72:	mov	r1, r2
    ae74:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    ae76:	bl	a9d8 <endpoint0_receive>
			return;
    ae7a:	b.n	aec0 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    ae7c:	movw	r2, #25633	; 0x6421
    ae80:	cmp	r1, r2
    ae82:	beq.w	b032 <usb_isr+0x3fa>
    ae86:	movw	r2, #26529	; 0x67a1
    ae8a:	cmp	r1, r2
    ae8c:	bne.n	adb0 <usb_isr+0x178>
		if (setup.wLength >= 4) {
    ae8e:	cmp.w	r3, #262144	; 0x40000
    ae92:	bcc.n	adb0 <usb_isr+0x178>
			endpoint0_buffer[2] = usb_mtp_status;
    ae94:	ldr	r3, [pc, #148]	; (af2c <usb_isr+0x2f4>)
			endpoint0_buffer[0] = 4;
    ae96:	movs	r1, #4
    ae98:	ldr	r0, [pc, #104]	; (af04 <usb_isr+0x2cc>)
			endpoint0_buffer[2] = usb_mtp_status;
    ae9a:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    ae9c:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    ae9e:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    aea0:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    aea2:	strb.w	r8, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    aea6:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    aea8:	b.n	aed0 <usb_isr+0x298>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    aeaa:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    aeac:	mov	r2, r8
    aeae:	mov	r1, r8
    aeb0:	mov	r0, r8
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    aeb2:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    aeb4:	bl	a9d8 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    aeb8:	orr.w	r5, r5, #16777216	; 0x1000000
    aebc:	str.w	r5, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    aec0:	ldr.w	r3, [r4, #428]	; 0x1ac
    aec4:	b.n	acb6 <usb_isr+0x7e>
		reply_buffer[0] = usb_configuration;
    aec6:	ldr	r3, [pc, #92]	; (af24 <usb_isr+0x2ec>)
		endpoint0_transmit(reply_buffer, 1, 0);
    aec8:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    aeca:	ldr	r0, [pc, #100]	; (af30 <usb_isr+0x2f8>)
    aecc:	ldrb	r3, [r3, #0]
    aece:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    aed0:	bl	ab44 <endpoint0_transmit.constprop.0>
				return;
    aed4:	b.n	aec0 <usb_isr+0x288>
		reply_buffer[0] = 0;
    aed6:	ldr	r0, [pc, #88]	; (af30 <usb_isr+0x2f8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    aed8:	movs	r1, #2
		reply_buffer[0] = 0;
    aeda:	strb.w	r8, [r0]
		reply_buffer[1] = 0;
    aede:	strb.w	r8, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    aee2:	b.n	aed0 <usb_isr+0x298>
    aee4:	.word	0x402e0000
    aee8:	.word	0x2002d7d8
    aeec:	.word	0x2002d7dc
    aef0:	.word	0x2002dea4
    aef4:	.word	0x2002dea5
    aef8:	.word	0x402e01c0
    aefc:	.word	0x2002cff0
    af00:	.word	0x20006a00
    af04:	.word	0x2002de29
    af08:	.word	0x2002d7cc
    af0c:	.word	0x2002cff4
    af10:	.word	0x20000000
    af14:	.word	0x20000934
    af18:	.word	0x20201800
    af1c:	.word	0x6000246c
    af20:	.word	0x600024d5
    af24:	.word	0x2002dea3
    af28:	.word	0x00cc0002
    af2c:	.word	0x20001e57
    af30:	.word	0x2002de83
		endpoint = setup.wIndex & 0x7F;
    af34:	uxth	r0, r3
		if (endpoint > 7) break;
    af36:	ands.w	r3, r3, #120	; 0x78
    af3a:	bne.w	adb0 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    af3e:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    af42:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    af44:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    af48:	ldr	r2, [pc, #352]	; (b0ac <usb_isr+0x474>)
    af4a:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    af4c:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    af4e:	bpl.n	af64 <usb_isr+0x32c>
    af50:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    af54:	it	ne
    af56:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    af58:	mov.w	r1, #2
    af5c:	ldr	r0, [pc, #332]	; (b0ac <usb_isr+0x474>)
			reply_buffer[0] = 1;
    af5e:	it	ne
    af60:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    af62:	b.n	aed0 <usb_isr+0x298>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    af64:	tst.w	r1, #1
    af68:	b.n	af54 <usb_isr+0x31c>
		if (endpoint > 7) break;
    af6a:	tst.w	r3, #120	; 0x78
    af6e:	uxth	r2, r3
    af70:	bne.w	adb0 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    af74:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    af78:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    af7c:	ldr.w	r2, [r7, r3, lsl #2]
    af80:	ite	ne
    af82:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    af86:	orreq.w	r2, r2, #1
    af8a:	str.w	r2, [r7, r3, lsl #2]
    af8e:	b.n	ae70 <usb_isr+0x238>
		if (endpoint > 7) break;
    af90:	tst.w	r3, #120	; 0x78
    af94:	uxth	r2, r3
    af96:	bne.w	adb0 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    af9a:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    af9e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    afa2:	ldr.w	r2, [r7, r3, lsl #2]
    afa6:	ite	ne
    afa8:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    afac:	biceq.w	r2, r2, #1
    afb0:	b.n	af8a <usb_isr+0x352>
				} else if (setup.wValue == 0x700) {
    afb2:	cmp.w	r0, #1792	; 0x700
    afb6:	bne.n	affc <usb_isr+0x3c4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    afb8:	ldr	r2, [pc, #244]	; (b0b0 <usb_isr+0x478>)
					memcpy(usb_descriptor_buffer, src, datalen);
    afba:	ldr	r0, [pc, #248]	; (b0b4 <usb_isr+0x47c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    afbc:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    afbe:	mov	r2, r8
    afc0:	ldr	r1, [pc, #244]	; (b0b8 <usb_isr+0x480>)
    afc2:	cmp	r5, #0
    afc4:	it	ne
    afc6:	movne	r1, r0
    afc8:	mov	r0, r3
    afca:	bl	9f88 <memcpy>
					usb_descriptor_buffer[1] = 7;
    afce:	movs	r2, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    afd0:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    afd2:	strb	r2, [r0, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    afd4:	bic.w	r5, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    afd8:	add.w	r0, r3, r8
	asm("dsb");
    afdc:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    afe0:	mov.w	r3, #3758153728	; 0xe000e000
    afe4:	str.w	r5, [r3, #3952]	; 0xf70
		location += 32;
    afe8:	adds	r5, #32
	} while (location < end_addr);
    afea:	cmp	r0, r5
    afec:	bhi.n	afe4 <usb_isr+0x3ac>
	asm("dsb");
    afee:	dsb	sy
	asm("isb");
    aff2:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    aff6:	ldr	r0, [pc, #196]	; (b0bc <usb_isr+0x484>)
    aff8:	mov	r1, r8
    affa:	b.n	aed0 <usb_isr+0x298>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    affc:	mov	r2, r8
    affe:	b.n	ae1c <usb_isr+0x1e4>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b000:	adds	r2, #12
    b002:	b.n	add2 <usb_isr+0x19a>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b004:	uxth	r3, r3
    b006:	cmp	r3, #0
    b008:	bne.w	ae70 <usb_isr+0x238>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b00c:	ldr	r3, [pc, #176]	; (b0c0 <usb_isr+0x488>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b00e:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b012:	ldr	r2, [r3, #0]
    b014:	ldr	r3, [pc, #172]	; (b0c4 <usb_isr+0x48c>)
    b016:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b018:	ldr	r3, [pc, #172]	; (b0c8 <usb_isr+0x490>)
    b01a:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    b01c:	b.n	ae70 <usb_isr+0x238>
		if (setup.wLength != 7) break;
    b01e:	lsrs	r1, r3, #16
    b020:	cmp	r1, #7
		if (setup.wLength == 6) {
    b022:	bne.w	adb0 <usb_isr+0x178>
			endpoint0_setupdata.bothwords = setupdata;
    b026:	ldr	r2, [pc, #164]	; (b0cc <usb_isr+0x494>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b028:	ldr	r0, [pc, #164]	; (b0d0 <usb_isr+0x498>)
			endpoint0_setupdata.bothwords = setupdata;
    b02a:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b02e:	movs	r2, #1
    b030:	b.n	ae76 <usb_isr+0x23e>
		if (setup.wLength == 6) {
    b032:	lsrs	r1, r3, #16
    b034:	cmp	r1, #6
    b036:	b.n	b022 <usb_isr+0x3ea>
	if (setup.wRequestAndType == 0x6421) {
    b038:	movw	r3, #25633	; 0x6421
    b03c:	cmp	r2, r3
    b03e:	bne.w	ad04 <usb_isr+0xcc>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    b042:	ldr	r3, [pc, #140]	; (b0d0 <usb_isr+0x498>)
    b044:	ldrb	r2, [r3, #0]
    b046:	cmp	r2, #1
    b048:	bne.w	ad04 <usb_isr+0xcc>
    b04c:	ldrb	r3, [r3, #1]
    b04e:	cmp	r3, #64	; 0x40
    b050:	bne.w	ad04 <usb_isr+0xcc>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b054:	ldr	r3, [pc, #124]	; (b0d4 <usb_isr+0x49c>)
    b056:	movs	r2, #25
    b058:	b.n	ad02 <usb_isr+0xca>
					int p=__builtin_ctz(tx);
    b05a:	rbit	r7, r4
    b05e:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b062:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    b066:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b06a:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    b06c:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b070:	bl	aaf4 <run_callbacks>
					tx &= ~(1<<p);
    b074:	b.n	ad16 <usb_isr+0xde>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b076:	ldr	r3, [pc, #96]	; (b0d8 <usb_isr+0x4a0>)
    b078:	ldr.w	r2, [r3, #428]	; 0x1ac
    b07c:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b080:	ldr.w	r2, [r3, #444]	; 0x1bc
    b084:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b088:	ldr.w	r4, [r3, #432]	; 0x1b0
    b08c:	cmp	r4, #0
    b08e:	bne.n	b088 <usb_isr+0x450>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b090:	mov.w	r2, #4294967295
    b094:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b098:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    b09c:	bl	a254 <usb_serial_reset>
		endpointN_notify_mask = 0;
    b0a0:	ldr	r3, [pc, #56]	; (b0dc <usb_isr+0x4a4>)
    b0a2:	str	r4, [r3, #0]
    b0a4:	b.n	ac50 <usb_isr+0x18>
}
    b0a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b0aa:	nop
    b0ac:	.word	0x2002de83
    b0b0:	.word	0x2002dea4
    b0b4:	.word	0x6000246c
    b0b8:	.word	0x600024d5
    b0bc:	.word	0x20201800
    b0c0:	.word	0x2002d7c4
    b0c4:	.word	0x2002d7d4
    b0c8:	.word	0x2002dea2
    b0cc:	.word	0x20006a00
    b0d0:	.word	0x2002de29
    b0d4:	.word	0x20001e57
    b0d8:	.word	0x402e0000
    b0dc:	.word	0x2002cff4

0000b0e0 <usb_config_rx>:
{
    b0e0:	push	{r4, r5, r6, lr}
    b0e2:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b0e4:	subs	r3, r0, #2
{
    b0e6:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b0e8:	cmp	r3, #3
    b0ea:	bhi.n	b114 <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b0ec:	clz	r4, r2
    b0f0:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b0f2:	ldr	r0, [pc, #36]	; (b118 <usb_config_rx+0x38>)
    b0f4:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b0f6:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b0f8:	add.w	r0, r0, r5, lsl #7
    b0fc:	orr.w	r1, r1, r4, lsl #29
    b100:	bl	ab28 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    b104:	cbz	r6, b114 <usb_config_rx+0x34>
    b106:	ldr	r2, [pc, #20]	; (b11c <usb_config_rx+0x3c>)
    b108:	movs	r3, #1
    b10a:	lsl.w	r0, r3, r5
    b10e:	ldr	r3, [r2, #0]
    b110:	orrs	r0, r3
    b112:	str	r0, [r2, #0]
}
    b114:	pop	{r4, r5, r6, pc}
    b116:	nop
    b118:	.word	0x20000000
    b11c:	.word	0x2002cff4

0000b120 <usb_config_tx>:
{
    b120:	push	{r4, r5, r6, lr}
    b122:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b124:	subs	r3, r0, #2
{
    b126:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b128:	cmp	r3, #3
    b12a:	bhi.n	b156 <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b12c:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b130:	ldr	r0, [pc, #36]	; (b158 <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b132:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b134:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b136:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b138:	add.w	r0, r0, r4, lsl #7
    b13c:	orr.w	r1, r1, r5, lsl #29
    b140:	adds	r0, #64	; 0x40
    b142:	bl	ab28 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b146:	cbz	r6, b156 <usb_config_tx+0x36>
    b148:	ldr	r2, [pc, #16]	; (b15c <usb_config_tx+0x3c>)
    b14a:	adds	r4, #16
    b14c:	movs	r3, #1
    b14e:	ldr	r1, [r2, #0]
    b150:	lsls	r3, r4
    b152:	orrs	r3, r1
    b154:	str	r3, [r2, #0]
}
    b156:	pop	{r4, r5, r6, pc}
    b158:	.word	0x20000000
    b15c:	.word	0x2002cff4

0000b160 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b160:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    b162:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    b164:	orr.w	r2, r2, #128	; 0x80
    b168:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    b16a:	add.w	r2, r1, #4096	; 0x1000
    b16e:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    b170:	add.w	r2, r1, #8192	; 0x2000
{
    b174:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    b176:	str	r2, [r0, #16]
	transfer->next = 1;
    b178:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    b17a:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    b17e:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    b182:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    b184:	str	r2, [r0, #20]
	transfer->callback_param = param;
    b186:	strd	r1, r3, [r0, #24]
}
    b18a:	pop	{r4, pc}

0000b18c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b18c:	subs	r3, r0, #2
{
    b18e:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b190:	cmp	r3, #3
    b192:	bhi.n	b1aa <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b194:	ldr	r3, [pc, #20]	; (b1ac <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    b196:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b19a:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    b19e:	movs	r3, #1
    b1a0:	adds	r0, #64	; 0x40
    b1a2:	lsl.w	r1, r3, r1
    b1a6:	b.w	aa78 <schedule_transfer>
}
    b1aa:	bx	lr
    b1ac:	.word	0x20000000

0000b1b0 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b1b0:	subs	r3, r0, #2
{
    b1b2:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b1b4:	cmp	r3, #3
    b1b6:	bhi.n	b1c6 <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b1b8:	movs	r1, #1
    b1ba:	ldr	r3, [pc, #12]	; (b1c8 <usb_receive+0x18>)
    b1bc:	lsls	r1, r0
    b1be:	add.w	r0, r3, r0, lsl #7
    b1c2:	b.w	aa78 <schedule_transfer>
}
    b1c6:	bx	lr
    b1c8:	.word	0x20000000

0000b1cc <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    b1cc:	ldr	r2, [pc, #32]	; (b1f0 <usb_transfer_status+0x24>)
{
    b1ce:	mov	r1, r0
	cmd = USB1_USBCMD;
    b1d0:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    b1d4:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    b1d6:	orr.w	r3, r3, #16384	; 0x4000
    b1da:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    b1de:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    b1e0:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    b1e4:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    b1e6:	tst.w	r3, #16384	; 0x4000
    b1ea:	beq.n	b1d4 <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    b1ec:	bx	lr
    b1ee:	nop
    b1f0:	.word	0x402e0000

0000b1f4 <ultoa>:
{
    b1f4:	push	{r4, r5, r6, lr}
	int i=0, j;
    b1f6:	movs	r4, #0
		digit = val % radix;
    b1f8:	udiv	r5, r0, r2
    b1fc:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b200:	uxtb	r3, r6
    b202:	cmp	r6, #9
    b204:	ite	ls
    b206:	addls	r3, #48	; 0x30
    b208:	addhi	r3, #55	; 0x37
		if (val == 0) break;
    b20a:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b20c:	uxtb	r3, r3
    b20e:	strb	r3, [r1, r4]
		if (val == 0) break;
    b210:	bhi.n	b218 <ultoa+0x24>
		i++;
    b212:	adds	r4, #1
		val /= radix;
    b214:	mov	r0, r5
		digit = val % radix;
    b216:	b.n	b1f8 <ultoa+0x4>
	buf[i + 1] = 0;
    b218:	adds	r3, r1, r4
    b21a:	movs	r2, #0
    b21c:	subs	r0, r1, #1
    b21e:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    b220:	subs	r5, r4, r2
    b222:	cmp	r2, r5
    b224:	blt.n	b22a <ultoa+0x36>
}
    b226:	mov	r0, r1
    b228:	pop	{r4, r5, r6, pc}
		t = buf[j];
    b22a:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    b22e:	adds	r2, #1
		buf[j] = buf[i];
    b230:	ldrb	r6, [r3, #0]
    b232:	strb	r6, [r0, #0]
		buf[i] = t;
    b234:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    b238:	b.n	b220 <ultoa+0x2c>
	...

0000b23c <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    b23c:	vcmp.f32	s0, s0
{
    b240:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    b244:	vmrs	APSR_nzcv, fpscr
	int awidth = abs(width);
    b248:	eor.w	r5, r0, r0, asr #31
{
    b24c:	mov	r7, r0
    b24e:	mov	r6, r1
    b250:	mov	r4, r2
	int awidth = abs(width);
    b252:	sub.w	r5, r5, r0, asr #31
{
    b256:	vpush	{d8}
    b25a:	vmov.f32	s16, s0
    b25e:	sub	sp, #20
	if (isnanf(val)) {
    b260:	bvc.n	b2c0 <dtostrf+0x84>
		int ndigs = (val<0) ? 4 : 3;
    b262:	vcmpe.f32	s0, #0.0
    b266:	vmrs	APSR_nzcv, fpscr
    b26a:	ite	mi
    b26c:	movmi	r3, #4
    b26e:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b270:	cmp	r3, r5
    b272:	ite	lt
    b274:	sublt	r5, r5, r3
    b276:	movge	r5, #0
		if (width<0) {
    b278:	cmp	r0, #0
    b27a:	bge.n	b28a <dtostrf+0x4e>
			while (awidth) {
				*buf++ = ' ';
    b27c:	mov	r2, r5
    b27e:	mov	r0, r4
    b280:	add	r4, r5
    b282:	movs	r5, #0
    b284:	movs	r1, #32
    b286:	bl	9f44 <memset>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b28a:	vmov	r3, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b28e:	movs	r2, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b290:	cmp	r3, #0
    b292:	itt	lt
    b294:	movlt	r3, #45	; 0x2d
    b296:	strblt.w	r3, [r4], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b29a:	movs	r3, #65	; 0x41
    b29c:	strb	r2, [r4, #0]
    b29e:	strb	r3, [r4, #1]
    b2a0:	adds	r3, r4, #3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
			*buf++ = ' ';
    b2a2:	mov	r0, r3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b2a4:	strb	r2, [r4, #2]
			*buf++ = ' ';
    b2a6:	movs	r1, #32
    b2a8:	mov	r2, r5
    b2aa:	bl	9f44 <memset>
			awidth--;
		}
		*buf = 0;
    b2ae:	movs	r2, #0
			*buf++ = ' ';
    b2b0:	mov	r3, r0
    b2b2:	add	r0, r5
		*buf = 0;
    b2b4:	strb	r2, [r3, r5]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    b2b6:	add	sp, #20
    b2b8:	vpop	{d8}
    b2bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (isinff(val)) {
    b2c0:	vabs.f32	s15, s0
    b2c4:	vldr	s14, [pc, #432]	; b478 <dtostrf+0x23c>
    b2c8:	vcmp.f32	s15, s14
    b2cc:	vmrs	APSR_nzcv, fpscr
    b2d0:	ble.n	b318 <dtostrf+0xdc>
		int ndigs = (val<0) ? 4 : 3;
    b2d2:	vcmpe.f32	s0, #0.0
    b2d6:	vmrs	APSR_nzcv, fpscr
    b2da:	ite	mi
    b2dc:	movmi	r3, #4
    b2de:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b2e0:	cmp	r3, r5
    b2e2:	ite	lt
    b2e4:	sublt	r5, r5, r3
    b2e6:	movge	r5, #0
		if (width<0) {
    b2e8:	cmp	r0, #0
    b2ea:	bge.n	b2fa <dtostrf+0xbe>
				*buf++ = ' ';
    b2ec:	mov	r2, r5
    b2ee:	mov	r0, r4
    b2f0:	add	r4, r5
    b2f2:	movs	r5, #0
    b2f4:	movs	r1, #32
    b2f6:	bl	9f44 <memset>
		if (val<0) *buf++ = '-';
    b2fa:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b2fe:	movs	r2, #70	; 0x46
		if (val<0) *buf++ = '-';
    b300:	vmrs	APSR_nzcv, fpscr
    b304:	itt	mi
    b306:	movmi	r3, #45	; 0x2d
    b308:	strbmi.w	r3, [r4], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b30c:	movs	r3, #73	; 0x49
    b30e:	strb	r3, [r4, #0]
    b310:	movs	r3, #78	; 0x4e
    b312:	strb	r3, [r4, #1]
    b314:	adds	r3, r4, #3
    b316:	b.n	b2a2 <dtostrf+0x66>
	s = fcvtf(val, precision, &decpt, &sign);
    b318:	add	r2, sp, #8
    b31a:	add	r1, sp, #4
    b31c:	mov	r0, r6
    b31e:	bl	d852 <fcvtf>
	if (precision == 0 && decpt == 0) {
    b322:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    b324:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    b326:	orrs.w	r2, r6, r3
    b32a:	bne.n	b3ca <dtostrf+0x18e>
		s = (*s < '5') ? "0" : "1";
    b32c:	ldrb	r1, [r0, #0]
    b32e:	ldr	r3, [pc, #332]	; (b47c <dtostrf+0x240>)
    b330:	ldr	r2, [pc, #332]	; (b480 <dtostrf+0x244>)
    b332:	cmp	r1, #52	; 0x34
    b334:	ite	ls
    b336:	movls	r8, r2
    b338:	movhi	r8, r3
		decpt++;
    b33a:	movs	r3, #1
    b33c:	str	r3, [sp, #4]
	reqd = strlen(s);
    b33e:	mov	r0, r8
    b340:	bl	eb40 <strlen>
	if (reqd > decpt) reqd++;
    b344:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    b346:	mov	r5, r0
	if (reqd > decpt) reqd++;
    b348:	cmp	r3, r0
    b34a:	it	lt
    b34c:	addlt	r5, r0, #1
	if (decpt == 0) reqd++;
    b34e:	cmp	r3, #0
    b350:	bne.n	b3da <dtostrf+0x19e>
    b352:	adds	r5, #1
	if (sign) reqd++;
    b354:	ldr.w	fp, [sp, #8]
    b358:	cmp.w	fp, #0
    b35c:	beq.n	b360 <dtostrf+0x124>
    b35e:	adds	r5, #1
	pad = width - reqd;
    b360:	sub.w	sl, r7, r5
	e = p + reqd;
    b364:	add.w	r9, r4, r5
	if (pad > 0) {
    b368:	cmp.w	sl, #0
    b36c:	ble.n	b422 <dtostrf+0x1e6>
		while (pad-- > 0) *p++ = ' ';
    b36e:	mov	r2, sl
    b370:	movs	r1, #32
    b372:	mov	r0, r4
		e += pad;
    b374:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    b376:	bl	9f44 <memset>
    b37a:	add.w	r2, r4, sl
	if (sign) *p++ = '-';
    b37e:	cmp.w	fp, #0
    b382:	beq.n	b38a <dtostrf+0x14e>
    b384:	movs	r3, #45	; 0x2d
    b386:	strb.w	r3, [r2], #1
	if (decpt == 0 && precision > 0) {
    b38a:	ldr	r1, [sp, #4]
    b38c:	cmp	r1, #0
    b38e:	bne.n	b426 <dtostrf+0x1ea>
    b390:	cbz	r6, b3a0 <dtostrf+0x164>
		*p++ = '0';
    b392:	mov	r3, r2
    b394:	movs	r1, #48	; 0x30
    b396:	strb.w	r1, [r3], #2
		*p++ = '.';
    b39a:	movs	r1, #46	; 0x2e
    b39c:	strb	r1, [r2, #1]
    b39e:	mov	r2, r3
		if (--decpt == 0) *p++ = '.';
    b3a0:	movs	r0, #46	; 0x2e
	while (p < e) {
    b3a2:	cmp	r9, r2
		*p++ = *s++;
    b3a4:	mov	r3, r2
	while (p < e) {
    b3a6:	bhi.n	b45c <dtostrf+0x220>
	if (width < 0) {
    b3a8:	cmp	r7, #0
    b3aa:	bge.n	b3c2 <dtostrf+0x186>
		pad = (reqd + width) * -1;
    b3ac:	adds	r0, r5, r7
		while (pad-- > 0) *p++ = ' ';
    b3ae:	movs	r1, #32
		pad = (reqd + width) * -1;
    b3b0:	negs	r5, r0
		while (pad-- > 0) *p++ = ' ';
    b3b2:	mov	r0, r3
    b3b4:	bic.w	r5, r5, r5, asr #31
    b3b8:	mov	r2, r5
    b3ba:	bl	9f44 <memset>
    b3be:	mov	r3, r0
    b3c0:	add	r3, r5
	*p = 0;
    b3c2:	movs	r2, #0
	return buf;
    b3c4:	mov	r0, r4
	*p = 0;
    b3c6:	strb	r2, [r3, #0]
	return buf;
    b3c8:	b.n	b2b6 <dtostrf+0x7a>
	if (-decpt  > (int)precision) {
    b3ca:	negs	r3, r3
    b3cc:	cmp	r6, r3
		decpt = -precision;
    b3ce:	ittt	lt
    b3d0:	neglt	r3, r6
		s = "0";
    b3d2:	ldrlt.w	r8, [pc, #172]	; b480 <dtostrf+0x244>
		decpt = -precision;
    b3d6:	strlt	r3, [sp, #4]
    b3d8:	b.n	b33e <dtostrf+0x102>
	if (decpt < 0 && precision > 0) {
    b3da:	bge.n	b354 <dtostrf+0x118>
    b3dc:	cmp	r6, #0
    b3de:	beq.n	b354 <dtostrf+0x118>
		if (strlen(s) > precision + decpt) {
    b3e0:	add	r3, r6
		reqd = precision + 2;
    b3e2:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    b3e4:	cmp	r0, r3
    b3e6:	bls.n	b354 <dtostrf+0x118>
				val *= 10.0f;
    b3e8:	vmov.f32	s15, #36	; 0x41200000  10.0
    b3ec:	mov	r3, r6
    b3ee:	b.n	b3f6 <dtostrf+0x1ba>
    b3f0:	vmul.f32	s16, s16, s15
				newPrecision--;
    b3f4:	subs	r3, #1
			while (newPrecision > 0) {
    b3f6:	cmp	r3, #0
    b3f8:	bgt.n	b3f0 <dtostrf+0x1b4>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b3fa:	cmp	r6, #0
    b3fc:	add	r2, sp, #8
    b3fe:	add	r1, sp, #12
    b400:	vmov.f32	s0, s16
    b404:	ite	ge
    b406:	subge	r0, r6, r6
    b408:	movlt	r0, r6
    b40a:	bl	d852 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b40e:	ldr	r3, [sp, #4]
    b410:	ldr	r2, [sp, #12]
    b412:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b414:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b416:	subs	r2, r2, r3
    b418:	cmp	r2, r1
    b41a:	itt	eq
    b41c:	addeq	r3, #1
    b41e:	streq	r3, [sp, #4]
    b420:	b.n	b354 <dtostrf+0x118>
    b422:	mov	r2, r4
    b424:	b.n	b37e <dtostrf+0x142>
	else if (decpt < 0 && precision > 0) {
    b426:	bge.n	b3a0 <dtostrf+0x164>
    b428:	cmp	r6, #0
    b42a:	beq.n	b3a0 <dtostrf+0x164>
		*p++ = '0';
    b42c:	mov	r3, r2
		*p++ = '.';
    b42e:	movs	r0, #46	; 0x2e
		*p++ = '0';
    b430:	mov.w	ip, #48	; 0x30
		while ( decpt < 0 ) {
    b434:	movs	r6, #0
		*p++ = '0';
    b436:	strb.w	ip, [r3], #2
		*p++ = '.';
    b43a:	strb	r0, [r2, #1]
		while ( decpt < 0 ) {
    b43c:	rsb	r0, r1, #2
    b440:	add	r2, r0
		*p++ = '.';
    b442:	mov	r0, r3
		while ( decpt < 0 ) {
    b444:	cmp	r0, r2
    b446:	bne.n	b454 <dtostrf+0x218>
    b448:	subs	r2, r3, r1
    b44a:	cmp	r6, #0
    b44c:	beq.n	b3a0 <dtostrf+0x164>
    b44e:	movs	r3, #0
    b450:	str	r3, [sp, #4]
    b452:	b.n	b3a0 <dtostrf+0x164>
			*p++ = '0';
    b454:	movs	r6, #1
    b456:	strb.w	ip, [r0], #1
    b45a:	b.n	b444 <dtostrf+0x208>
		*p++ = *s++;
    b45c:	ldrb.w	r1, [r8], #1
    b460:	strb.w	r1, [r3], #1
		if (p == e) break;
    b464:	cmp	r9, r3
    b466:	beq.n	b3a8 <dtostrf+0x16c>
		if (--decpt == 0) *p++ = '.';
    b468:	ldr	r1, [sp, #4]
    b46a:	subs	r1, #1
    b46c:	str	r1, [sp, #4]
    b46e:	cbnz	r1, b474 <dtostrf+0x238>
    b470:	adds	r3, r2, #2
    b472:	strb	r0, [r2, #1]
			*p++ = '0';
    b474:	mov	r2, r3
    b476:	b.n	b3a2 <dtostrf+0x166>
    b478:	.word	0x7f7fffff
    b47c:	.word	0x20000ea1
    b480:	.word	0x20001059

0000b484 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    b484:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b486:	ldr	r3, [pc, #52]	; (b4bc <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b488:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b48a:	ldr	r6, [pc, #52]	; (b4c0 <micros+0x3c>)
		scc = systick_cycle_count;
    b48c:	ldr	r5, [pc, #52]	; (b4c4 <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b48e:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b492:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    b494:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b496:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b49a:	cmp	r2, #0
    b49c:	bne.n	b48e <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b49e:	ldr	r3, [pc, #40]	; (b4c8 <micros+0x44>)
    b4a0:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b4a2:	ldr	r2, [pc, #40]	; (b4cc <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    b4a4:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b4a6:	ldr	r2, [r2, #0]
    b4a8:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b4ac:	mov.w	r3, #1000	; 0x3e8
    b4b0:	muls	r0, r3
	return usec;
}
    b4b2:	cmp	r2, r3
    b4b4:	ite	ls
    b4b6:	addls	r0, r0, r2
    b4b8:	addhi	r0, r0, r3
    b4ba:	pop	{r4, r5, r6, pc}
    b4bc:	.word	0x2002d7c8
    b4c0:	.word	0x2002d7c4
    b4c4:	.word	0x2002d7c0
    b4c8:	.word	0xe0001000
    b4cc:	.word	0x2002d134

0000b4d0 <delay>:
{
    b4d0:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    b4d2:	mov	r4, r0
    b4d4:	cbz	r0, b4f8 <delay+0x28>
	start = micros();
    b4d6:	bl	b484 <micros>
    b4da:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    b4dc:	bl	b484 <micros>
    b4e0:	subs	r0, r0, r5
    b4e2:	cmp.w	r0, #1000	; 0x3e8
    b4e6:	bcs.n	b4ee <delay+0x1e>
		yield();
    b4e8:	bl	c14c <yield>
		while ((micros() - start) >= 1000) {
    b4ec:	b.n	b4dc <delay+0xc>
			if (--msec == 0) return;
    b4ee:	subs	r4, #1
    b4f0:	beq.n	b4f8 <delay+0x28>
			start += 1000;
    b4f2:	add.w	r5, r5, #1000	; 0x3e8
    b4f6:	b.n	b4dc <delay+0xc>
}
    b4f8:	pop	{r3, r4, r5, pc}
	...

0000b4fc <unused_interrupt_vector>:
	__disable_irq();
    b4fc:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b4fe:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b502:	ldr	r4, [pc, #316]	; (b640 <unused_interrupt_vector+0x144>)
    b504:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    b508:	tst.w	lr, #4
    b50c:	ite	eq
    b50e:	mrseq	r2, MSP
    b512:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    b516:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b51a:	ldr	r7, [pc, #296]	; (b644 <unused_interrupt_vector+0x148>)
	while (p < end) {
    b51c:	ldr	r6, [pc, #296]	; (b648 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b51e:	ldr.w	r1, [r3, #3368]	; 0xd28
    b522:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    b526:	ldr.w	r1, [r3, #3372]	; 0xd2c
    b52a:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    b52e:	ldr.w	r1, [r3, #3380]	; 0xd34
    b532:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    b536:	ldr.w	r3, [r3, #3384]	; 0xd38
    b53a:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    b53e:	ldr	r3, [r2, #24]
    b540:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b544:	ldr	r3, [r2, #28]
    b546:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b54a:	bl	bbc0 <tempmonGetTemp>
    b54e:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b552:	bl	b6cc <rtc_get>
	info->len = sizeof(*info) / 4;
    b556:	movs	r3, #11
	p = (uint32_t *)info;
    b558:	ldr	r2, [pc, #240]	; (b64c <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    b55a:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b55e:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    b562:	mov	r0, r2
	crc = 0xFFFFFFFF;
    b564:	mov.w	r3, #4294967295
		crc ^= *p++;
    b568:	ldr	r1, [r2, #0]
    b56a:	movs	r5, #32
    b56c:	adds	r2, #4
    b56e:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b570:	and.w	r1, r3, #1
    b574:	subs	r5, #1
    b576:	mul.w	r1, r7, r1
    b57a:	eor.w	r3, r1, r3, lsr #1
    b57e:	bne.n	b570 <unused_interrupt_vector+0x74>
	while (p < end) {
    b580:	cmp	r2, r6
    b582:	bne.n	b568 <unused_interrupt_vector+0x6c>
	info->crc = crc;
    b584:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    b588:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b58c:	mov.w	r3, #3758153728	; 0xe000e000
    b590:	ldr	r2, [pc, #188]	; (b650 <unused_interrupt_vector+0x154>)
    b592:	str.w	r0, [r3, #3952]	; 0xf70
    b596:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    b59a:	dsb	sy
	asm("isb");
    b59e:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b5a2:	ldr	r2, [pc, #176]	; (b654 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    b5a4:	ldr	r4, [pc, #176]	; (b658 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b5a6:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b5a8:	ldr	r0, [pc, #176]	; (b65c <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b5aa:	orr.w	r3, r3, #12288	; 0x3000
    b5ae:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b5b0:	movs	r3, #2
    b5b2:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b5b4:	ldr	r3, [r2, #28]
    b5b6:	bic.w	r3, r3, #127	; 0x7f
    b5ba:	orr.w	r3, r3, #64	; 0x40
    b5be:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b5c0:	ldr	r3, [pc, #156]	; (b660 <unused_interrupt_vector+0x164>)
    b5c2:	ldr	r3, [r3, #0]
    b5c4:	cmp	r3, r0
    b5c6:	bls.n	b5cc <unused_interrupt_vector+0xd0>
    b5c8:	bl	a788 <set_arm_clock>
	PIT_MCR = 0;
    b5cc:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b5ce:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    b5d0:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b5d4:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    b5d6:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b5da:	ldr	r3, [pc, #136]	; (b664 <unused_interrupt_vector+0x168>)
    b5dc:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    b5e0:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b5e4:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    b5e8:	ldr	r4, [pc, #108]	; (b658 <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    b5ea:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b5ee:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b5f2:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b5f6:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b5fa:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    b5fe:	ldr.w	r3, [r4, #268]	; 0x10c
    b602:	cbz	r3, b60e <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    b604:	adds	r5, #1
			PIT_TFLG0 = 1;
    b606:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b60a:	cmp	r5, #79	; 0x4f
    b60c:	bhi.n	b614 <unused_interrupt_vector+0x118>
		usb_isr();
    b60e:	bl	ac38 <usb_isr>
		if (PIT_TFLG0) {
    b612:	b.n	b5fe <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    b614:	ldr	r3, [pc, #80]	; (b668 <unused_interrupt_vector+0x16c>)
    b616:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    b618:	ldr	r1, [pc, #80]	; (b66c <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    b61a:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b61e:	mov.w	r2, #2147483648	; 0x80000000
    b622:	ldr	r3, [pc, #76]	; (b670 <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    b624:	ldr	r0, [pc, #76]	; (b674 <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b626:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b628:	ldr	r2, [pc, #44]	; (b658 <unused_interrupt_vector+0x15c>)
    b62a:	ldr.w	r3, [r2, #268]	; 0x10c
    b62e:	cbz	r3, b63c <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    b630:	mov.w	r3, #3758153728	; 0xe000e000
    b634:	ldr	r2, [pc, #64]	; (b678 <unused_interrupt_vector+0x17c>)
    b636:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    b63a:	b.n	b63a <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    b63c:	str	r0, [r1, #48]	; 0x30
    b63e:	b.n	b62a <unused_interrupt_vector+0x12e>
    b640:	.word	0x2027ff00
    b644:	.word	0xedb88320
    b648:	.word	0x2027ffa8
    b64c:	.word	0x2027ff80
    b650:	.word	0x2027ffa0
    b654:	.word	0x400fc000
    b658:	.word	0x40084000
    b65c:	.word	0x0bcd3d80
    b660:	.word	0x20001c24
    b664:	.word	0x00249f00
    b668:	.word	0x402e0000
    b66c:	.word	0x400f8000
    b670:	.word	0x400d9000
    b674:	.word	0x0bad00f1
    b678:	.word	0x05fa0004

0000b67c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    b67c:	ldr	r2, [pc, #32]	; (b6a0 <_sbrk+0x24>)
{
    b67e:	push	{r3, lr}
    b680:	mov	r3, r0
        char *prev = __brkval;
    b682:	ldr	r0, [r2, #0]
        if (incr != 0) {
    b684:	cbz	r3, b69a <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    b686:	add	r3, r0
    b688:	ldr	r1, [pc, #24]	; (b6a4 <_sbrk+0x28>)
    b68a:	cmp	r3, r1
    b68c:	bls.n	b69c <_sbrk+0x20>
                        errno = ENOMEM;
    b68e:	bl	ea2c <__errno>
    b692:	movs	r3, #12
    b694:	str	r3, [r0, #0]
                        return (void *)-1;
    b696:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    b69a:	pop	{r3, pc}
                __brkval = prev + incr;
    b69c:	str	r3, [r2, #0]
    b69e:	b.n	b69a <_sbrk+0x1e>
    b6a0:	.word	0x20001c3c
    b6a4:	.word	0x20280000

0000b6a8 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    b6a8:	movs	r0, #0
    b6aa:	bx	lr

0000b6ac <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    b6ac:	mov.w	r0, #4294967295
    b6b0:	bx	lr

0000b6b2 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    b6b2:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    b6b6:	movs	r0, #0
	st->st_mode = S_IFCHR;
    b6b8:	str	r3, [r1, #4]
}
    b6ba:	bx	lr

0000b6bc <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    b6bc:	movs	r0, #1
    b6be:	bx	lr

0000b6c0 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    b6c0:	mov.w	r0, #4294967295
    b6c4:	bx	lr

0000b6c6 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    b6c6:	wfi
    b6c8:	b.n	b6c6 <abort>
	...

0000b6cc <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    b6cc:	ldr	r2, [pc, #28]	; (b6ec <rtc_get+0x20>)
    b6ce:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    b6d0:	ldr	r3, [r2, #40]	; 0x28
{
    b6d2:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    b6d4:	mov	r4, r3
    b6d6:	mov	r1, r0
    b6d8:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    b6da:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    b6dc:	cmp	r4, r3
    b6de:	bne.n	b6d4 <rtc_get+0x8>
    b6e0:	cmp	r1, r0
    b6e2:	bne.n	b6d4 <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    b6e4:	lsrs	r3, r3, #15
}
    b6e6:	orr.w	r0, r3, r0, lsl #17
    b6ea:	pop	{r4, pc}
    b6ec:	.word	0x400d4000

0000b6f0 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    b6f0:	ldr	r3, [pc, #60]	; (b730 <rtc_set+0x40>)
    b6f2:	ldr	r2, [r3, #8]
    b6f4:	bic.w	r2, r2, #65537	; 0x10001
    b6f8:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    b6fa:	ldr	r2, [r3, #8]
    b6fc:	lsls	r2, r2, #31
    b6fe:	bmi.n	b6fa <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    b700:	ldr	r2, [r3, #56]	; 0x38
    b702:	bic.w	r2, r2, #1
    b706:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    b708:	ldr	r3, [pc, #36]	; (b730 <rtc_set+0x40>)
    b70a:	ldr	r2, [r3, #56]	; 0x38
    b70c:	lsls	r1, r2, #31
    b70e:	bmi.n	b70a <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    b710:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    b712:	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    b714:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    b716:	str	r0, [r3, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    b718:	ldr	r2, [r3, #56]	; 0x38
    b71a:	orr.w	r2, r2, #1
    b71e:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    b720:	ldr	r2, [r3, #56]	; 0x38
    b722:	lsls	r2, r2, #31
    b724:	bpl.n	b720 <rtc_set+0x30>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    b726:	ldr	r2, [r3, #8]
    b728:	orr.w	r2, r2, #65537	; 0x10001
    b72c:	str	r2, [r3, #8]
}
    b72e:	bx	lr
    b730:	.word	0x400d4000

0000b734 <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b734:	ldr	r3, [pc, #68]	; (b77c <flash_wait+0x48>)
	FLEXSPI_LUT61 = 0;
    b736:	movs	r1, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b738:	ldr	r2, [pc, #68]	; (b780 <flash_wait+0x4c>)
{
    b73a:	push	{r4, r5, lr}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b73c:	str.w	r2, [r3, #752]	; 0x2f0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    b740:	movs	r2, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    b742:	ldr	r5, [pc, #64]	; (b784 <flash_wait+0x50>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    b744:	ldr	r4, [pc, #64]	; (b788 <flash_wait+0x54>)
	FLEXSPI_LUT61 = 0;
    b746:	str.w	r1, [r3, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    b74a:	str.w	r2, [r3, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    b74e:	str.w	r1, [r3, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    b752:	str.w	r5, [r3, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b756:	str.w	r2, [r3, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    b75a:	ldr	r0, [r3, #20]
    b75c:	lsls	r0, r0, #31
    b75e:	bpl.n	b75a <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b760:	str	r2, [r3, #20]
	} while (status & 1);
    b762:	ldrb	r0, [r4, #0]
    b764:	lsls	r0, r0, #31
    b766:	bmi.n	b74a <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    b768:	ldr	r2, [r3, #0]
    b76a:	orr.w	r2, r2, #1
    b76e:	str	r2, [r3, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    b770:	ldr	r2, [pc, #8]	; (b77c <flash_wait+0x48>)
    b772:	ldr	r3, [r2, #0]
    b774:	lsls	r3, r3, #31
    b776:	bmi.n	b772 <flash_wait+0x3e>
	__enable_irq();
    b778:	cpsie	i
}
    b77a:	pop	{r4, r5, pc}
    b77c:	.word	0x402a8000
    b780:	.word	0x24010405
    b784:	.word	0x000f0001
    b788:	.word	0x402a8100

0000b78c <eeprom_initialize>:
{
    b78c:	push	{r4, r5, lr}
    b78e:	ldr	r3, [pc, #52]	; (b7c4 <eeprom_initialize+0x38>)
			if (*p++ == 0xFFFF) break;
    b790:	movw	r5, #65535	; 0xffff
    b794:	ldr	r4, [pc, #48]	; (b7c8 <eeprom_initialize+0x3c>)
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b796:	sub.w	r1, r3, #4096	; 0x1000
		uint16_t index = 0;
    b79a:	movs	r2, #0
			if (*p++ == 0xFFFF) break;
    b79c:	ldrh	r0, [r1, #0]
    b79e:	adds	r1, #2
    b7a0:	cmp	r0, r5
    b7a2:	beq.n	b7ac <eeprom_initialize+0x20>
			index++;
    b7a4:	adds	r2, #1
		} while (p < end);
    b7a6:	cmp	r1, r3
			index++;
    b7a8:	uxth	r2, r2
		} while (p < end);
    b7aa:	bcc.n	b79c <eeprom_initialize+0x10>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    b7ac:	add.w	r3, r3, #4096	; 0x1000
		sector_index[sector] = index;
    b7b0:	strh.w	r2, [r4], #2
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    b7b4:	cmp.w	r3, #1619001344	; 0x60800000
    b7b8:	bne.n	b796 <eeprom_initialize+0xa>
	initialized = 1;
    b7ba:	ldr	r3, [pc, #16]	; (b7cc <eeprom_initialize+0x40>)
    b7bc:	movs	r2, #1
    b7be:	strb	r2, [r3, #0]
}
    b7c0:	pop	{r4, r5, pc}
    b7c2:	nop
    b7c4:	.word	0x607c1000
    b7c8:	.word	0x2002d836
    b7cc:	.word	0x2002de32

0000b7d0 <eeprom_read_byte>:
{
    b7d0:	push	{r3, r4, r5, lr}
	if (addr > E2END) return 0xFF;
    b7d2:	movw	r3, #4283	; 0x10bb
{
    b7d6:	mov	r4, r0
	if (addr > E2END) return 0xFF;
    b7d8:	cmp	r0, r3
    b7da:	bhi.n	b828 <eeprom_read_byte+0x58>
	if (!initialized) eeprom_initialize();
    b7dc:	ldr	r3, [pc, #76]	; (b82c <eeprom_read_byte+0x5c>)
    b7de:	ldrb	r3, [r3, #0]
    b7e0:	cbnz	r3, b7e6 <eeprom_read_byte+0x16>
    b7e2:	bl	b78c <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS;
    b7e6:	lsrs	r2, r4, #2
    b7e8:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    b7ea:	ldr	r0, [pc, #68]	; (b830 <eeprom_read_byte+0x60>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b7ec:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS;
    b7f0:	udiv	r3, r2, r3
    b7f4:	rsb	r1, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b7f8:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS;
    b7fc:	subs	r2, r2, r1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b7fe:	add.w	r1, r2, #393216	; 0x60000
	end = p + sector_index[sector];
    b802:	ldrh.w	r2, [r0, r2, lsl #1]
	uint8_t data=0xFF;
    b806:	movs	r0, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b808:	add.w	r1, r1, #1984	; 0x7c0
	end = p + sector_index[sector];
    b80c:	lsls	r2, r2, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b80e:	lsls	r3, r1, #12
	end = p + sector_index[sector];
    b810:	add.w	r2, r2, r1, lsl #12
	while (p < end) {
    b814:	cmp	r3, r2
    b816:	bcc.n	b81a <eeprom_read_byte+0x4a>
}
    b818:	pop	{r3, r4, r5, pc}
		uint32_t val = *p++;
    b81a:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    b81e:	uxtb	r5, r1
    b820:	cmp	r5, r4
    b822:	it	eq
    b824:	lsreq	r0, r1, #8
    b826:	b.n	b814 <eeprom_read_byte+0x44>
	if (addr > E2END) return 0xFF;
    b828:	movs	r0, #255	; 0xff
    b82a:	b.n	b818 <eeprom_read_byte+0x48>
    b82c:	.word	0x2002de32
    b830:	.word	0x2002d836

0000b834 <eeprom_read_block>:
{
    b834:	push	{r4, r5, r6, lr}
    b836:	mov	r4, r0
    b838:	adds	r5, r1, r2
    b83a:	mov	r0, r1
	while (len--) {
    b83c:	cmp	r0, r5
    b83e:	bne.n	b842 <eeprom_read_block+0xe>
}
    b840:	pop	{r4, r5, r6, pc}
		*dest++ = eeprom_read_byte(p++);
    b842:	adds	r6, r0, #1
    b844:	bl	b7d0 <eeprom_read_byte>
    b848:	strb.w	r0, [r4], #1
    b84c:	mov	r0, r6
    b84e:	b.n	b83c <eeprom_read_block+0x8>

0000b850 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    b850:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b854:	mov	r5, r1
    b856:	mov	r4, r2
	__disable_irq();
    b858:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b85a:	ldr	r3, [pc, #192]	; (b91c <eepromemu_flash_write+0xcc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b85c:	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b860:	ldr	r2, [pc, #188]	; (b920 <eepromemu_flash_write+0xd0>)
    b862:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    b864:	movs	r2, #2
    b866:	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    b868:	movs	r2, #0
    b86a:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b86e:	str.w	r1, [r3, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    b872:	adds	r1, r0, r4
	FLEXSPI_LUT61 = 0;
    b874:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    b878:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    b87c:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    b880:	mov.w	r2, #983040	; 0xf0000
    b884:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b888:	movs	r2, #1
    b88a:	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b88e:	bic.w	r2, r0, #31
	asm("dsb");
    b892:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    b896:	mov.w	r6, #3758153728	; 0xe000e000
    b89a:	str.w	r2, [r6, #3932]	; 0xf5c
		location += 32;
    b89e:	adds	r2, #32
	} while (location < end_addr);
    b8a0:	cmp	r1, r2
    b8a2:	bhi.n	b89a <eepromemu_flash_write+0x4a>
	asm("dsb");
    b8a4:	dsb	sy
	asm("isb");
    b8a8:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    b8ac:	ldr	r2, [r3, #20]
    b8ae:	lsls	r6, r2, #31
    b8b0:	bpl.n	b8ac <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b8b2:	movs	r2, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    b8b4:	ldr	r1, [pc, #108]	; (b924 <eepromemu_flash_write+0xd4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    b8b6:	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    b8ba:	ldr	r7, [pc, #96]	; (b91c <eepromemu_flash_write+0xcc>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b8bc:	str	r2, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    b8be:	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    b8c2:	movw	r1, #8705	; 0x2201
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b8c6:	ldr.w	r8, [pc, #96]	; b928 <eepromemu_flash_write+0xd8>
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    b8ca:	str.w	r1, [r3, #756]	; 0x2f4
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b8ce:	uxth	r1, r4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    b8d0:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b8d4:	orr.w	r1, r1, #983040	; 0xf0000
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    b8d8:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b8dc:	str.w	r1, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b8e0:	str.w	r2, [r3, #176]	; 0xb0
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    b8e4:	ldr	r3, [r7, #20]
    b8e6:	lsls	r2, r3, #31
    b8e8:	bpl.n	b8f6 <eepromemu_flash_write+0xa6>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    b8ea:	movs	r3, #65	; 0x41
    b8ec:	str	r3, [r7, #20]
	flash_wait();
}
    b8ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	flash_wait();
    b8f2:	b.w	b734 <flash_wait>
		if (n & FLEXSPI_INTR_IPTXWE) {
    b8f6:	lsls	r1, r3, #25
    b8f8:	bpl.n	b8e4 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    b8fa:	cmp	r4, #8
    b8fc:	bhi.n	b916 <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    b8fe:	cbz	r4, b910 <eepromemu_flash_write+0xc0>
    b900:	mov	r6, r4
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b902:	mov	r1, r5
				len -= wrlen;
    b904:	subs	r4, r4, r6
				src += wrlen;
    b906:	add	r5, r6
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b908:	mov	r2, r6
    b90a:	mov	r0, r8
    b90c:	bl	9f88 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    b910:	movs	r3, #64	; 0x40
    b912:	str	r3, [r7, #20]
    b914:	b.n	b8e4 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    b916:	movs	r6, #8
    b918:	b.n	b902 <eepromemu_flash_write+0xb2>
    b91a:	nop
    b91c:	.word	0x402a8000
    b920:	.word	0x5af05af0
    b924:	.word	0x08180432
    b928:	.word	0x402a8180

0000b92c <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    b92c:	push	{r4}
	__disable_irq();
    b92e:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b930:	ldr	r3, [pc, #156]	; (b9d0 <eepromemu_flash_erase_sector+0xa4>)
    b932:	ldr	r2, [pc, #160]	; (b9d4 <eepromemu_flash_erase_sector+0xa8>)
    b934:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    b936:	movs	r2, #2
    b938:	str	r2, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b93a:	movw	r2, #1030	; 0x406
    b93e:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    b942:	movs	r2, #0
    b944:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    b948:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    b94c:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    b950:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    b954:	mov.w	r2, #983040	; 0xf0000
    b958:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b95c:	movs	r2, #1
    b95e:	str.w	r2, [r3, #176]	; 0xb0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    b962:	bic.w	r2, r0, #4080	; 0xff0
    b966:	bic.w	r2, r2, #15
	asm("dsb");
    b96a:	dsb	sy
    b96e:	add.w	r4, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
    b972:	add.w	r1, r2, #4096	; 0x1000
    b976:	cmp	r1, r4
    b978:	ite	cc
    b97a:	movcc	r1, #1
    b97c:	movcs	r1, #128	; 0x80
		SCB_CACHE_DCIMVAC = location;
    b97e:	mov.w	r4, #3758153728	; 0xe000e000
    b982:	add.w	r1, r2, r1, lsl #5
    b986:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    b98a:	adds	r2, #32
	} while (location < end_addr);
    b98c:	cmp	r2, r1
    b98e:	bne.n	b986 <eepromemu_flash_erase_sector+0x5a>
	asm("dsb");
    b990:	dsb	sy
	asm("isb");
    b994:	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    b998:	ldr	r2, [r3, #20]
    b99a:	lsls	r1, r2, #31
    b99c:	bpl.n	b998 <eepromemu_flash_erase_sector+0x6c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b99e:	movs	r1, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    b9a0:	ldr	r2, [pc, #52]	; (b9d8 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b9a2:	str	r1, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    b9a4:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    b9a8:	ldr	r2, [pc, #48]	; (b9dc <eepromemu_flash_erase_sector+0xb0>)
    b9aa:	ands	r2, r0
    b9ac:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    b9b0:	mov.w	r2, #983040	; 0xf0000
    b9b4:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b9b8:	str.w	r1, [r3, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    b9bc:	ldr	r3, [pc, #16]	; (b9d0 <eepromemu_flash_erase_sector+0xa4>)
    b9be:	ldr	r2, [r3, #20]
    b9c0:	lsls	r2, r2, #31
    b9c2:	bpl.n	b9be <eepromemu_flash_erase_sector+0x92>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b9c4:	movs	r2, #1
	flash_wait();
}
    b9c6:	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b9ca:	str	r2, [r3, #20]
	flash_wait();
    b9cc:	b.w	b734 <flash_wait>
    b9d0:	.word	0x402a8000
    b9d4:	.word	0x5af05af0
    b9d8:	.word	0x08180420
    b9dc:	.word	0x00fff000

0000b9e0 <eeprom_write_byte>:
	if (addr > E2END) return;
    b9e0:	movw	r3, #4283	; 0x10bb
    b9e4:	cmp	r0, r3
{
    b9e6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9ea:	mov	r4, r0
    b9ec:	sub	sp, #264	; 0x108
    b9ee:	mov	r9, r1
	if (addr > E2END) return;
    b9f0:	bhi.n	ba52 <eeprom_write_byte+0x72>
	if (!initialized) eeprom_initialize();
    b9f2:	ldr	r3, [pc, #232]	; (badc <eeprom_write_byte+0xfc>)
    b9f4:	ldrb	r3, [r3, #0]
    b9f6:	cbnz	r3, b9fc <eeprom_write_byte+0x1c>
    b9f8:	bl	b78c <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS; 
    b9fc:	lsrs	r6, r4, #2
    b9fe:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    ba00:	ldr	r7, [pc, #220]	; (bae0 <eeprom_write_byte+0x100>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ba02:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS; 
    ba06:	udiv	r3, r6, r3
    ba0a:	rsb	r2, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ba0e:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    ba12:	subs	r6, r6, r2
	uint8_t olddata=0xFF;
    ba14:	movs	r2, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ba16:	add.w	r5, r6, #393216	; 0x60000
	end = p + sector_index[sector];
    ba1a:	ldrh.w	sl, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ba1e:	add.w	r5, r5, #1984	; 0x7c0
    ba22:	lsls	r5, r5, #12
    ba24:	mov	r8, r5
	end = p + sector_index[sector];
    ba26:	add.w	r0, r5, sl, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ba2a:	mov	r3, r5
	while (p < end) {
    ba2c:	cmp	r3, r0
    ba2e:	bcc.n	ba58 <eeprom_write_byte+0x78>
	if (data == olddata) return;
    ba30:	cmp	r2, r9
    ba32:	beq.n	ba52 <eeprom_write_byte+0x72>
	if (sector_index[sector] < 2048) {
    ba34:	cmp.w	sl, #2048	; 0x800
    ba38:	bcs.n	ba68 <eeprom_write_byte+0x88>
		uint16_t newdata = offset | (data << 8);
    ba3a:	orr.w	r4, r4, r9, lsl #8
		sector_index[sector] = sector_index[sector] + 1;
    ba3e:	add.w	sl, sl, #1
		eepromemu_flash_write(end, &newdata, 2);
    ba42:	movs	r2, #2
    ba44:	add	r1, sp, #8
		uint16_t newdata = offset | (data << 8);
    ba46:	strh.w	r4, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    ba4a:	bl	b850 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    ba4e:	strh.w	sl, [r7, r6, lsl #1]
}
    ba52:	add	sp, #264	; 0x108
    ba54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t val = *p++;
    ba58:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    ba5c:	uxtb.w	ip, r1
    ba60:	cmp	ip, r4
    ba62:	it	eq
    ba64:	lsreq	r2, r1, #8
    ba66:	b.n	ba2c <eeprom_write_byte+0x4c>
		memset(buf, 0xFF, sizeof(buf));
    ba68:	mov.w	r2, #256	; 0x100
    ba6c:	movs	r1, #255	; 0xff
    ba6e:	add	r0, sp, #8
    ba70:	bl	9f44 <memset>
		while (p < end) {
    ba74:	cmn.w	r5, #4096	; 0x1000
    ba78:	movw	r3, #2049	; 0x801
    ba7c:	it	cs
    ba7e:	movcs	r3, #1
    ba80:	add.w	r3, r5, r3, lsl #1
    ba84:	mov	r1, r5
    ba86:	adds	r5, #2
    ba88:	cmp	r5, r3
    ba8a:	bne.n	bace <eeprom_write_byte+0xee>
		buf[offset] = data;
    ba8c:	add	r3, sp, #8
		for (i=0; i < 256; i++) {
    ba8e:	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    ba90:	mov	r0, r8
		buf[offset] = data;
    ba92:	strb.w	r9, [r3, r4]
		eepromemu_flash_erase_sector(p);
    ba96:	add	r4, sp, #8
		index = 0;
    ba98:	mov	r9, r5
		eepromemu_flash_erase_sector(p);
    ba9a:	bl	b92c <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    ba9e:	ldrb.w	r3, [r4], #1
    baa2:	cmp	r3, #255	; 0xff
    baa4:	beq.n	bac0 <eeprom_write_byte+0xe0>
				uint16_t newval = i | (buf[i] << 8);
    baa6:	orr.w	r3, r5, r3, lsl #8
				eepromemu_flash_write(p + index, &newval, 2);
    baaa:	movs	r2, #2
    baac:	add.w	r0, r8, r9, lsl #1
				index = index + 1;
    bab0:	add.w	r9, r9, #1
				eepromemu_flash_write(p + index, &newval, 2);
    bab4:	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    bab8:	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    babc:	bl	b850 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    bac0:	adds	r5, #1
    bac2:	cmp.w	r5, #256	; 0x100
    bac6:	bne.n	ba9e <eeprom_write_byte+0xbe>
		sector_index[sector] = index;
    bac8:	strh.w	r9, [r7, r6, lsl #1]
    bacc:	b.n	ba52 <eeprom_write_byte+0x72>
			uint16_t val = *p++;
    bace:	ldrh	r2, [r1, #0]
			buf[val & 255] = val >> 8;
    bad0:	add	r0, sp, #8
    bad2:	ldrb	r1, [r1, #0]
    bad4:	lsrs	r2, r2, #8
    bad6:	strb	r2, [r0, r1]
    bad8:	b.n	ba84 <eeprom_write_byte+0xa4>
    bada:	nop
    badc:	.word	0x2002de32
    bae0:	.word	0x2002d836

0000bae4 <eeprom_write_block>:
{
    bae4:	push	{r4, r5, r6, lr}
    bae6:	mov	r4, r0
    bae8:	mov	r0, r1
	while (len--) {
    baea:	adds	r5, r4, r2
    baec:	cmp	r4, r5
    baee:	bne.n	baf2 <eeprom_write_block+0xe>
}
    baf0:	pop	{r4, r5, r6, pc}
		eeprom_write_byte(p++, *src++);
    baf2:	adds	r6, r0, #1
    baf4:	ldrb.w	r1, [r4], #1
    baf8:	bl	b9e0 <eeprom_write_byte>
    bafc:	mov	r0, r6
    bafe:	b.n	baec <eeprom_write_block+0x8>

0000bb00 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    bb00:	ldr	r3, [r0, #0]
    bb02:	cbz	r3, bb1a <smalloc_verify_pool+0x1a>
    bb04:	ldr	r0, [r0, #4]
    bb06:	cbz	r0, bb1c <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    bb08:	movs	r3, #12
    bb0a:	udiv	r2, r0, r3
    bb0e:	mls	r0, r3, r2, r0
    bb12:	clz	r0, r0
    bb16:	lsrs	r0, r0, #5
    bb18:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    bb1a:	mov	r0, r3
	return 1;
}
    bb1c:	bx	lr

0000bb1e <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    bb1e:	push	{r4, lr}
    bb20:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    bb22:	bl	bb00 <smalloc_verify_pool>
    bb26:	mov	r4, r0
    bb28:	cbz	r0, bb30 <sm_align_pool+0x12>
    bb2a:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    bb2c:	mov	r0, r4
    bb2e:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    bb30:	ldr	r3, [r1, #4]
    bb32:	movs	r0, #12
    bb34:	udiv	r2, r3, r0
    bb38:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    bb3c:	cbz	r2, bb42 <sm_align_pool+0x24>
    bb3e:	subs	r3, r3, r2
    bb40:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    bb42:	ldr	r3, [r1, #4]
    bb44:	cmp	r3, #240	; 0xf0
    bb46:	bhi.n	bb2a <sm_align_pool+0xc>
		errno = ENOSPC;
    bb48:	bl	ea2c <__errno>
    bb4c:	movs	r3, #28
    bb4e:	str	r3, [r0, #0]
		return 0;
    bb50:	b.n	bb2c <sm_align_pool+0xe>

0000bb52 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    bb52:	push	{r4, r5, r6, lr}
    bb54:	mov	r6, r3
	if (!spool) {
    bb56:	mov	r4, r0
    bb58:	cbnz	r0, bb68 <sm_set_pool+0x16>
		errno = EINVAL;
    bb5a:	bl	ea2c <__errno>
		return 0;
    bb5e:	mov	r5, r4
		errno = EINVAL;
    bb60:	movs	r3, #22
    bb62:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    bb64:	mov	r0, r5
    bb66:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    bb68:	cbz	r1, bb6c <sm_set_pool+0x1a>
    bb6a:	cbnz	r2, bb9c <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    bb6c:	mov	r0, r4
    bb6e:	bl	bb00 <smalloc_verify_pool>
    bb72:	mov	r5, r0
    bb74:	cbz	r0, bb92 <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bb76:	ldr	r3, [r4, #8]
    bb78:	cbz	r3, bb84 <sm_set_pool+0x32>
    bb7a:	ldr	r2, [r4, #4]
    bb7c:	movs	r1, #0
    bb7e:	ldr	r0, [r4, #0]
    bb80:	bl	9f44 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    bb84:	movs	r2, #16
    bb86:	movs	r1, #0
    bb88:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    bb8a:	bl	9f44 <memset>
	return 1;
    bb8e:	movs	r5, #1
    bb90:	b.n	bb64 <sm_set_pool+0x12>
		errno = EINVAL;
    bb92:	bl	ea2c <__errno>
    bb96:	movs	r3, #22
    bb98:	str	r3, [r0, #0]
		return 0;
    bb9a:	b.n	bb64 <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    bb9c:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    bb9e:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    bba2:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    bba4:	bl	bb1e <sm_align_pool>
    bba8:	mov	r5, r0
    bbaa:	cmp	r0, #0
    bbac:	beq.n	bb64 <sm_set_pool+0x12>
	if (do_zero) {
    bbae:	cmp	r6, #0
    bbb0:	beq.n	bb8e <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    bbb2:	ldr	r2, [r4, #4]
    bbb4:	movs	r1, #0
    bbb6:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    bbb8:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    bbba:	b.n	bb8a <sm_set_pool+0x38>

0000bbbc <Panic_Temp_isr>:
  unused_interrupt_vector();
    bbbc:	b.w	b4fc <unused_interrupt_vector>

0000bbc0 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    bbc0:	ldr	r3, [pc, #72]	; (bc0c <tempmonGetTemp+0x4c>)
    bbc2:	ldr.w	r2, [r3, #128]	; 0x80
    bbc6:	lsls	r2, r2, #29
    bbc8:	bpl.n	bbc2 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bbca:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bbce:	ldr	r2, [pc, #64]	; (bc10 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bbd0:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bbd4:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bbd8:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bbdc:	ldr	r3, [pc, #52]	; (bc14 <tempmonGetTemp+0x54>)
    bbde:	vcvt.f32.u32	s0, s0
    bbe2:	vldr	s14, [r3]
    bbe6:	vcvt.f32.s32	s15, s15
    bbea:	ldr	r3, [pc, #44]	; (bc18 <tempmonGetTemp+0x58>)
    bbec:	vcvt.f32.u32	s14, s14
    bbf0:	vsub.f32	s15, s15, s14
    bbf4:	vldr	s14, [r3]
    bbf8:	ldr	r3, [pc, #32]	; (bc1c <tempmonGetTemp+0x5c>)
    bbfa:	vmul.f32	s15, s15, s14
    bbfe:	vldr	s13, [r3]
    bc02:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    bc06:	vsub.f32	s0, s0, s14
    bc0a:	bx	lr
    bc0c:	.word	0x400d8100
    bc10:	.word	0x2002d128
    bc14:	.word	0x2002d124
    bc18:	.word	0x2002d12c
    bc1c:	.word	0x2002d130

0000bc20 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    bc20:	cmp	r0, #54	; 0x36
{
    bc22:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    bc24:	bhi.n	bc3e <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    bc26:	lsls	r2, r0, #4
    bc28:	ldr	r3, [pc, #40]	; (bc54 <digitalWrite+0x34>)
    bc2a:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    bc2e:	ldr	r3, [r3, r2]
	mask = p->mask;
    bc30:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    bc32:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    bc34:	tst	r4, r2
    bc36:	beq.n	bc46 <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    bc38:	cbz	r1, bc40 <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    bc3a:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    bc3e:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    bc40:	str.w	r2, [r3, #136]	; 0x88
    bc44:	b.n	bc3e <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bc46:	ldr	r3, [r0, #8]
		if (val) {
    bc48:	cbz	r1, bc50 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bc4a:	ldr	r2, [pc, #12]	; (bc58 <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bc4c:	str	r2, [r3, #0]
    bc4e:	b.n	bc3e <digitalWrite+0x1e>
    bc50:	ldr	r2, [pc, #8]	; (bc5c <digitalWrite+0x3c>)
    bc52:	b.n	bc4c <digitalWrite+0x2c>
    bc54:	.word	0x20000590
    bc58:	.word	0x0001f038
    bc5c:	.word	0x00013038

0000bc60 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    bc60:	cmp	r0, #54	; 0x36
{
    bc62:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    bc64:	bhi.n	bc96 <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    bc66:	ldr	r3, [pc, #76]	; (bcb4 <pinMode+0x54>)
    bc68:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bc6a:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bc6c:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    bc6e:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bc72:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bc74:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bc78:	beq.n	bc7e <pinMode+0x1e>
    bc7a:	cmp	r1, #4
    bc7c:	bne.n	bc98 <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bc7e:	orrs	r4, r5
		if (mode == OUTPUT) {
    bc80:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bc82:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    bc84:	bne.n	bc8a <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bc86:	movs	r2, #56	; 0x38
    bc88:	b.n	bc8e <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    bc8a:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bc8e:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    bc90:	movs	r2, #21
    bc92:	ldr	r3, [r0, #4]
    bc94:	str	r2, [r3, #0]
}
    bc96:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bc98:	bic.w	r4, r4, r5
    bc9c:	str	r4, [r2, #4]
		if (mode == INPUT) {
    bc9e:	cmp	r1, #0
    bca0:	beq.n	bc86 <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    bca2:	cmp	r1, #2
    bca4:	bne.n	bcaa <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bca6:	ldr	r2, [pc, #16]	; (bcb8 <pinMode+0x58>)
    bca8:	b.n	bc8e <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    bcaa:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bcac:	ite	eq
    bcae:	ldreq	r2, [pc, #12]	; (bcbc <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bcb0:	ldrne	r2, [pc, #12]	; (bcc0 <pinMode+0x60>)
    bcb2:	b.n	bc8e <pinMode+0x2e>
    bcb4:	.word	0x20000590
    bcb8:	.word	0x0001f038
    bcbc:	.word	0x00013038
    bcc0:	.word	0x00010038

0000bcc4 <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bcc4:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    bcc8:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bcca:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    bcce:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bcd0:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    bcd2:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    bcd6:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bcda:	ldrh.w	r3, [r0, #392]	; 0x188
    bcde:	uxth	r3, r3
{
    bce0:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bce2:	orr.w	r3, r3, #240	; 0xf0
    bce6:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bce8:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bcec:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bcf0:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bcf4:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bcf8:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    bcfc:	adds	r2, #1
    bcfe:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd00:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bd02:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    bd04:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bd06:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bd08:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    bd0a:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bd0c:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    bd0e:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    bd10:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    bd12:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    bd14:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    bd16:	bne.n	bcf8 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bd18:	ldrh.w	r3, [r0, #392]	; 0x188
    bd1c:	uxth	r3, r3
    bd1e:	orr.w	r3, r3, #15
    bd22:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bd26:	ldrh.w	r3, [r0, #392]	; 0x188
    bd2a:	uxth	r3, r3
    bd2c:	orr.w	r3, r3, #3840	; 0xf00
    bd30:	strh.w	r3, [r0, #392]	; 0x188
}
    bd34:	pop	{r4, r5, r6, r7, pc}

0000bd36 <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    bd36:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bd38:	mov.w	ip, #15
{
    bd3c:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    bd3e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bd40:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bd44:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bd48:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    bd4c:	add.w	r3, r0, r2, lsl #5
    bd50:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    bd52:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    bd54:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    bd56:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    bd58:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bd5a:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bd5e:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bd60:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    bd62:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    bd64:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bd66:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    bd68:	bne.n	bd4c <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    bd6a:	pop	{r4, r5, r6, r7, pc}

0000bd6c <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd6c:	ldr	r2, [pc, #84]	; (bdc4 <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    bd6e:	ldr	r0, [pc, #88]	; (bdc8 <pwm_init+0x5c>)
{
    bd70:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd72:	ldr	r3, [r2, #120]	; 0x78
    bd74:	orr.w	r3, r3, #16711680	; 0xff0000
    bd78:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bd7a:	ldr.w	r3, [r2, #128]	; 0x80
    bd7e:	orr.w	r3, r3, #4227858432	; 0xfc000000
    bd82:	orr.w	r3, r3, #196608	; 0x30000
    bd86:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    bd8a:	bl	bcc4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    bd8e:	add.w	r0, r0, #16384	; 0x4000
    bd92:	bl	bcc4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    bd96:	add.w	r0, r0, #16384	; 0x4000
    bd9a:	bl	bcc4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    bd9e:	add.w	r0, r0, #16384	; 0x4000
    bda2:	bl	bcc4 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    bda6:	sub.w	r0, r0, #2146304	; 0x20c000
    bdaa:	bl	bd36 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    bdae:	add.w	r0, r0, #16384	; 0x4000
    bdb2:	bl	bd36 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    bdb6:	add.w	r0, r0, #16384	; 0x4000
}
    bdba:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    bdbe:	b.w	bd36 <quadtimer_init>
    bdc2:	nop
    bdc4:	.word	0x400fc000
    bdc8:	.word	0x403dc000

0000bdcc <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    bdcc:	ldr	r2, [pc, #8]	; (bdd8 <txEvent_event+0xc>)
    bdce:	ldr	r3, [r2, #0]
    bdd0:	adds	r3, #1
    bdd2:	str	r3, [r2, #0]
    bdd4:	bx	lr
    bdd6:	nop
    bdd8:	.word	0x2002d080

0000bddc <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    bddc:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    bdde:	ldr	r4, [pc, #40]	; (be08 <rx_event+0x2c>)
	int i = t->callback_param;
    bde0:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    bde2:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    bde4:	ldr	r2, [pc, #36]	; (be0c <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    bde6:	adds	r3, #1
    bde8:	cmp	r3, #5
    bdea:	it	cs
    bdec:	movcs	r3, #0
	rx_list[head] = i;
    bdee:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bdf0:	ldr	r1, [r0, #4]
    bdf2:	ldr	r2, [pc, #28]	; (be10 <rx_event+0x34>)
    bdf4:	ubfx	r1, r1, #16, #15
    bdf8:	ldrh	r2, [r2, #0]
    bdfa:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    bdfc:	ldr	r1, [pc, #20]	; (be14 <rx_event+0x38>)
    bdfe:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    be02:	uxtb	r3, r3
    be04:	strb	r3, [r4, #0]
}
    be06:	pop	{r4, pc}
    be08:	.word	0x2002de8c
    be0c:	.word	0x2002de96
    be10:	.word	0x2002d834
    be14:	.word	0x2002d110

0000be18 <rx_queue_transfer>:
{
    be18:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    be1a:	ldr	r1, [pc, #80]	; (be6c <rx_queue_transfer+0x54>)
{
    be1c:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    be1e:	ldr	r7, [pc, #80]	; (be70 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    be20:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    be24:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    be26:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    be28:	add	r0, r1
	asm("dsb");
    be2a:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    be2e:	mov.w	r4, #3758153728	; 0xe000e000
    be32:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    be36:	adds	r2, #32
	} while (location < end_addr);
    be38:	cmp	r0, r2
    be3a:	bhi.n	be32 <rx_queue_transfer+0x1a>
	asm("dsb");
    be3c:	dsb	sy
	asm("isb");
    be40:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be44:	ldr	r5, [pc, #44]	; (be74 <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be46:	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be4a:	ldrh	r2, [r7, #0]
    be4c:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be50:	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be54:	mov	r0, r5
    be56:	bl	b160 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    be5a:	mov	r1, r5
    be5c:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be5e:	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    be62:	bl	b1b0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    be66:	str.w	r6, [r4, #268]	; 0x10c
}
    be6a:	pop	{r3, r4, r5, r6, r7, pc}
    be6c:	.word	0x20200800
    be70:	.word	0x2002d834
    be74:	.word	0x20004880

0000be78 <usb_mtp_configure>:
	if (usb_high_speed) {
    be78:	ldr	r3, [pc, #120]	; (bef4 <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    be7a:	movs	r2, #128	; 0x80
    be7c:	movs	r1, #0
    be7e:	ldr	r0, [pc, #120]	; (bef8 <usb_mtp_configure+0x80>)
{
    be80:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    be82:	ldrb	r3, [r3, #0]
	tx_head = 0;
    be84:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    be86:	ldr	r6, [pc, #116]	; (befc <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    be88:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    be8a:	ldr	r3, [pc, #116]	; (bf00 <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    be8c:	ite	eq
    be8e:	moveq	r5, #64	; 0x40
    be90:	movne.w	r5, #512	; 0x200
		tx_packet_size = MTP_TX_SIZE_480;
    be94:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    be96:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    be98:	bl	9f44 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    be9c:	movs	r2, #128	; 0x80
    be9e:	movs	r1, #0
    bea0:	ldr	r0, [pc, #96]	; (bf04 <usb_mtp_configure+0x8c>)
    bea2:	bl	9f44 <memset>
	tx_head = 0;
    bea6:	ldr	r3, [pc, #96]	; (bf08 <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    bea8:	mov	r2, r4
    beaa:	mov	r1, r5
	tx_head = 0;
    beac:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    beae:	movs	r0, #4
	rx_head = 0;
    beb0:	ldr	r3, [pc, #88]	; (bf0c <usb_mtp_configure+0x94>)
    beb2:	strb	r4, [r3, #0]
	rx_tail = 0;
    beb4:	ldr	r3, [pc, #88]	; (bf10 <usb_mtp_configure+0x98>)
    beb6:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    beb8:	mov	r3, r4
    beba:	bl	b120 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bebe:	mov	r2, r4
    bec0:	ldrh	r1, [r6, #0]
    bec2:	movs	r0, #4
    bec4:	ldr	r3, [pc, #76]	; (bf14 <usb_mtp_configure+0x9c>)
    bec6:	bl	b0e0 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    beca:	mov	r2, r4
    becc:	ldr	r3, [pc, #72]	; (bf18 <usb_mtp_configure+0xa0>)
    bece:	movs	r1, #32
    bed0:	movs	r0, #5
    bed2:	bl	b120 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bed6:	mov	r0, r4
    bed8:	bl	be18 <rx_queue_transfer>
    bedc:	movs	r0, #1
    bede:	bl	be18 <rx_queue_transfer>
    bee2:	movs	r0, #2
    bee4:	bl	be18 <rx_queue_transfer>
    bee8:	movs	r0, #3
}
    beea:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    beee:	b.w	be18 <rx_queue_transfer>
    bef2:	nop
    bef4:	.word	0x2002dea4
    bef8:	.word	0x20004980
    befc:	.word	0x2002d834
    bf00:	.word	0x2002d8bc
    bf04:	.word	0x20004880
    bf08:	.word	0x2002dea0
    bf0c:	.word	0x2002de8c
    bf10:	.word	0x2002de9c
    bf14:	.word	0x0000bddd
    bf18:	.word	0x0000bdcd

0000bf1c <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    bf1c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t wait_begin_at = systick_millis_count;
    bf20:	ldr	r7, [pc, #112]	; (bf94 <usb_mtp_recv+0x78>)
{
    bf22:	mov	r5, r1
	uint32_t tail = rx_tail;
    bf24:	ldr	r6, [pc, #112]	; (bf98 <usb_mtp_recv+0x7c>)
	uint32_t wait_begin_at = systick_millis_count;
    bf26:	ldr.w	r8, [r7]
	uint32_t tail = rx_tail;
    bf2a:	ldrb	r3, [r6, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    bf2c:	ldr.w	r9, [pc, #120]	; bfa8 <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    bf30:	uxtb	r4, r3
		if (tail != rx_head) break;
    bf32:	ldr.w	sl, [pc, #120]	; bfac <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    bf36:	ldrb.w	r3, [r9]
    bf3a:	cbz	r3, bf88 <usb_mtp_recv+0x6c>
		if (tail != rx_head) break;
    bf3c:	ldrb.w	r3, [sl]
    bf40:	cmp	r4, r3
    bf42:	bne.n	bf58 <usb_mtp_recv+0x3c>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    bf44:	ldr	r3, [r7, #0]
    bf46:	str	r0, [sp, #4]
    bf48:	sub.w	r3, r3, r8
    bf4c:	cmp	r3, r5
    bf4e:	bcs.n	bf8e <usb_mtp_recv+0x72>
			return 0;
		}
		yield();
    bf50:	bl	c14c <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    bf54:	ldr	r0, [sp, #4]
    bf56:	b.n	bf36 <usb_mtp_recv+0x1a>
	}
	if (++tail > RX_NUM) tail = 0;
    bf58:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    bf5a:	ldr	r2, [pc, #64]	; (bf9c <usb_mtp_recv+0x80>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    bf5c:	ldr	r1, [pc, #64]	; (bfa0 <usb_mtp_recv+0x84>)
	if (++tail > RX_NUM) tail = 0;
    bf5e:	cmp	r3, #5
    bf60:	it	cs
    bf62:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    bf64:	ldrb	r5, [r2, r3]
	int len = rx_list_transfer_len[tail];
    bf66:	ldr	r2, [pc, #60]	; (bfa4 <usb_mtp_recv+0x88>)
	memcpy(buffer,  rx_item_buffer, len);
    bf68:	add.w	r1, r1, r5, lsl #9
	int len = rx_list_transfer_len[tail];
    bf6c:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    bf70:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    bf72:	mov	r2, r4
	rx_tail = tail;
    bf74:	strb	r3, [r6, #0]
	memcpy(buffer,  rx_item_buffer, len);
    bf76:	bl	9f88 <memcpy>
	rx_queue_transfer(i);
    bf7a:	mov	r0, r5
    bf7c:	bl	be18 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    bf80:	mov	r0, r4
    bf82:	add	sp, #8
    bf84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    bf88:	mov.w	r4, #4294967295
    bf8c:	b.n	bf80 <usb_mtp_recv+0x64>
			return 0;
    bf8e:	movs	r4, #0
    bf90:	b.n	bf80 <usb_mtp_recv+0x64>
    bf92:	nop
    bf94:	.word	0x2002d7c4
    bf98:	.word	0x2002de9c
    bf9c:	.word	0x2002de96
    bfa0:	.word	0x20200800
    bfa4:	.word	0x2002d110
    bfa8:	.word	0x2002dea3
    bfac:	.word	0x2002de8c

0000bfb0 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    bfb0:	ldr	r3, [pc, #28]	; (bfd0 <usb_mtp_available+0x20>)
    bfb2:	ldrb	r3, [r3, #0]
    bfb4:	and.w	r0, r3, #255	; 0xff
    bfb8:	cbz	r3, bfce <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    bfba:	ldr	r3, [pc, #24]	; (bfd4 <usb_mtp_available+0x24>)
    bfbc:	ldrb	r2, [r3, #0]
    bfbe:	ldr	r3, [pc, #24]	; (bfd8 <usb_mtp_available+0x28>)
    bfc0:	ldrb	r3, [r3, #0]
    bfc2:	cmp	r2, r3
    bfc4:	beq.n	bfcc <usb_mtp_available+0x1c>
    bfc6:	ldr	r3, [pc, #20]	; (bfdc <usb_mtp_available+0x2c>)
    bfc8:	ldrh	r0, [r3, #0]
    bfca:	bx	lr
	if (!usb_configuration) return 0;
    bfcc:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    bfce:	bx	lr
    bfd0:	.word	0x2002dea3
    bfd4:	.word	0x2002de8c
    bfd8:	.word	0x2002de9c
    bfdc:	.word	0x2002d834

0000bfe0 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    bfe0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    bfe4:	ldr	r6, [pc, #164]	; (c08c <usb_mtp_send+0xac>)
{
    bfe6:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    bfe8:	ldr	r7, [pc, #164]	; (c090 <usb_mtp_send+0xb0>)
{
    bfea:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    bfec:	ldrb	r3, [r6, #0]
{
    bfee:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    bff0:	ldr.w	r9, [pc, #168]	; c09c <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    bff4:	add.w	r7, r7, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    bff8:	ldr.w	fp, [pc, #164]	; c0a0 <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    bffc:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    c000:	ldrb.w	r3, [fp]
    c004:	cmp	r3, #0
    c006:	beq.n	c080 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    c008:	mov	r0, r7
    c00a:	bl	b1cc <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    c00e:	lsls	r3, r0, #24
    c010:	bpl.n	c024 <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c012:	ldr.w	r3, [r9]
    c016:	sub.w	r3, r3, sl
    c01a:	cmp	r3, r5
    c01c:	bhi.n	c086 <usb_mtp_send+0xa6>
		yield();
    c01e:	bl	c14c <yield>
	while (1) {
    c022:	b.n	c000 <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c024:	ldrb	r3, [r6, #0]
	memcpy(txdata, buffer, len);
    c026:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c028:	ldr	r5, [pc, #104]	; (c094 <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    c02a:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c02c:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    c030:	mov	r0, r5
    c032:	bl	9f88 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    c036:	ldr	r2, [pc, #96]	; (c098 <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c038:	mov	r3, r5
    c03a:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c03c:	add	r2, r5
	asm("dsb");
    c03e:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c042:	mov.w	r1, #3758153728	; 0xe000e000
    c046:	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    c04a:	adds	r3, #32
	} while (location < end_addr);
    c04c:	cmp	r2, r3
    c04e:	bhi.n	c046 <usb_mtp_send+0x66>
	asm("dsb");
    c050:	dsb	sy
	asm("isb");
    c054:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    c058:	movs	r3, #0
    c05a:	mov	r2, r4
    c05c:	mov	r1, r5
    c05e:	mov	r0, r7
    c060:	bl	b160 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    c064:	movs	r0, #4
    c066:	mov	r1, r7
    c068:	bl	b18c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c06c:	ldrb	r3, [r6, #0]
	return len;
    c06e:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    c070:	adds	r3, #1
    c072:	uxtb	r3, r3
    c074:	cmp	r3, #3
    c076:	it	hi
    c078:	movhi	r3, #0
    c07a:	strb	r3, [r6, #0]
}
    c07c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c080:	mov.w	r0, #4294967295
    c084:	b.n	c07c <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c086:	movs	r0, #0
    c088:	b.n	c07c <usb_mtp_send+0x9c>
    c08a:	nop
    c08c:	.word	0x2002dea0
    c090:	.word	0x20004980
    c094:	.word	0x20201000
    c098:	.word	0x2002d8bc
    c09c:	.word	0x2002d7c4
    c0a0:	.word	0x2002dea3

0000c0a4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c0a4:	ldr	r3, [pc, #68]	; (c0ec <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    c0a6:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c0a8:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    c0ac:	ldr	r3, [pc, #64]	; (c0f0 <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c0ae:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    c0b2:	cmp	r0, r3
{
    c0b4:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    c0b6:	it	cc
    c0b8:	movcc	r3, #10
{
    c0ba:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    c0bc:	it	cc
    c0be:	mulcc	r0, r3
	ultoa(num, buf, 10);
    c0c0:	add	r1, sp, #4
    c0c2:	bl	b1f4 <ultoa>
	for (i=0; i<10; i++) {
    c0c6:	ldr	r0, [pc, #44]	; (c0f4 <usb_init_serialnumber+0x50>)
    c0c8:	add	r2, sp, #4
    c0ca:	movs	r1, #0
    c0cc:	mov	r5, r0
		char c = buf[i];
    c0ce:	ldrb.w	r4, [r2], #1
		if (!c) break;
    c0d2:	mov	r3, r1
	for (i=0; i<10; i++) {
    c0d4:	adds	r1, #1
		if (!c) break;
    c0d6:	cbz	r4, c0e2 <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    c0d8:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    c0da:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    c0de:	bne.n	c0ce <usb_init_serialnumber+0x2a>
    c0e0:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c0e2:	adds	r3, #1
    c0e4:	lsls	r3, r3, #1
    c0e6:	strb	r3, [r5, #0]
}
    c0e8:	add	sp, #20
    c0ea:	pop	{r4, r5, pc}
    c0ec:	.word	0x401f4400
    c0f0:	.word	0x00989680
    c0f4:	.word	0x20001e2e

0000c0f8 <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    c0f8:	ldr	r1, [pc, #68]	; (c140 <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    c0fa:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    c0fc:	ldr	r3, [r1, #0]
    c0fe:	cbz	r3, c114 <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c100:	mrs	r3, IPSR
		if (ipsr != 0) return;
    c104:	cbnz	r3, c114 <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c106:	mrs	r2, PRIMASK
		__disable_irq();
    c10a:	cpsid	i
		EventResponder *first = firstYield;
    c10c:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    c10e:	cbnz	r0, c116 <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c110:	cbnz	r2, c114 <EventResponder::runFromYield()+0x1c>
    c112:	cpsie	i
	}
    c114:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    c116:	ldr	r4, [pc, #44]	; (c144 <EventResponder::runFromYield()+0x4c>)
    c118:	ldrb	r5, [r4, #0]
    c11a:	cmp	r5, #0
    c11c:	bne.n	c110 <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    c11e:	movs	r3, #1
    c120:	strb	r3, [r4, #0]
		firstYield = first->_next;
    c122:	ldr	r3, [r0, #20]
    c124:	str	r3, [r1, #0]
		if (firstYield) {
    c126:	cbz	r3, c13a <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    c128:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c12a:	cbnz	r2, c12e <EventResponder::runFromYield()+0x36>
    c12c:	cpsie	i
		first->_triggered = false;
    c12e:	movs	r5, #0
		(*(first->_function))(*first);
    c130:	ldr	r3, [r0, #8]
		first->_triggered = false;
    c132:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c134:	blx	r3
		runningFromYield = false;
    c136:	strb	r5, [r4, #0]
    c138:	b.n	c114 <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    c13a:	ldr	r1, [pc, #12]	; (c148 <EventResponder::runFromYield()+0x50>)
    c13c:	str	r3, [r1, #0]
    c13e:	b.n	c12a <EventResponder::runFromYield()+0x32>
    c140:	.word	0x2002ce58
    c144:	.word	0x2002dd83
    c148:	.word	0x2002ce64

0000c14c <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    c14c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    c150:	ldr	r3, [pc, #92]	; (c1b0 <yield+0x64>)
    c152:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    c154:	cbz	r4, c17e <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    c156:	ldr	r5, [pc, #92]	; (c1b4 <yield+0x68>)
    c158:	ldrb	r3, [r5, #0]
    c15a:	cbnz	r3, c17e <yield+0x32>
	running = 1;
    c15c:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c15e:	lsls	r1, r4, #31
	running = 1;
    c160:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c162:	bpl.n	c16e <yield+0x22>
        virtual int available() { return usb_serial_available(); }
    c164:	bl	a470 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c168:	cbz	r0, c16e <yield+0x22>
    c16a:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c16e:	lsls	r2, r4, #30
    c170:	bmi.n	c1a4 <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    c172:	movs	r3, #0
    c174:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    c176:	lsls	r3, r4, #29
    c178:	bpl.n	c17e <yield+0x32>
		EventResponder::runFromYield();
    c17a:	bl	c0f8 <EventResponder::runFromYield()>
	}
};
    c17e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    c182:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c186:	ldr	r3, [r7, #0]
    c188:	mov	r0, r7
    c18a:	ldr	r3, [r3, #16]
    c18c:	blx	r3
    c18e:	cbz	r0, c196 <yield+0x4a>
    c190:	ldr	r3, [r7, #20]
    c192:	ldr	r3, [r3, #8]
    c194:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c196:	adds	r6, #1
    c198:	ldrb.w	r2, [r8]
    c19c:	uxtb	r3, r6
    c19e:	cmp	r2, r3
    c1a0:	bhi.n	c182 <yield+0x36>
    c1a2:	b.n	c172 <yield+0x26>
    c1a4:	movs	r6, #0
    c1a6:	ldr.w	r8, [pc, #16]	; c1b8 <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    c1aa:	ldr.w	r9, [pc, #16]	; c1bc <yield+0x70>
    c1ae:	b.n	c198 <yield+0x4c>
    c1b0:	.word	0x2002dea6
    c1b4:	.word	0x2002dd85
    c1b8:	.word	0x2002dd84
    c1bc:	.word	0x2002ce68

0000c1c0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    c1c0:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c1c2:	ldr	r5, [pc, #44]	; (c1f0 <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    c1c4:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    c1c6:	ldr	r6, [pc, #44]	; (c1f4 <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c1c8:	mrs	r2, PRIMASK
		__disable_irq();
    c1cc:	cpsid	i
		EventResponder *first = firstInterrupt;
    c1ce:	ldr	r0, [r5, #0]
		if (first) {
    c1d0:	cbz	r0, c1ea <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    c1d2:	ldr	r3, [r0, #20]
    c1d4:	str	r3, [r5, #0]
			if (firstInterrupt) {
    c1d6:	cbz	r3, c1e6 <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    c1d8:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    c1da:	cbnz	r2, c1de <EventResponder::runFromInterrupt()+0x1e>
    c1dc:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    c1de:	ldr	r3, [r0, #8]
			first->_triggered = false;
    c1e0:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    c1e2:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    c1e4:	b.n	c1c8 <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    c1e6:	str	r3, [r6, #0]
    c1e8:	b.n	c1da <EventResponder::runFromInterrupt()+0x1a>
    c1ea:	cbnz	r2, c1ee <EventResponder::runFromInterrupt()+0x2e>
    c1ec:	cpsie	i
}
    c1ee:	pop	{r4, r5, r6, pc}
    c1f0:	.word	0x2002ce60
    c1f4:	.word	0x2002ce5c

0000c1f8 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c1f8:	b.w	c1c0 <EventResponder::runFromInterrupt()>

0000c1fc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c1fc:	ldr	r3, [pc, #16]	; (c210 <systick_isr+0x14>)
    c1fe:	ldr	r2, [r3, #4]
    c200:	ldr	r3, [pc, #16]	; (c214 <systick_isr+0x18>)
    c202:	str	r2, [r3, #0]
	systick_millis_count++;
    c204:	ldr	r2, [pc, #16]	; (c218 <systick_isr+0x1c>)
    c206:	ldr	r3, [r2, #0]
    c208:	adds	r3, #1
    c20a:	str	r3, [r2, #0]
}
    c20c:	bx	lr
    c20e:	nop
    c210:	.word	0xe0001000
    c214:	.word	0x2002d7c0
    c218:	.word	0x2002d7c4

0000c21c <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c21c:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    c21e:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c220:	ldr	r4, [pc, #136]	; (c2ac <DMAChannel::begin(bool)+0x90>)
    c222:	cbnz	r1, c248 <DMAChannel::begin(bool)+0x2c>
    c224:	ldr	r1, [r0, #0]
    c226:	cbz	r1, c248 <DMAChannel::begin(bool)+0x2c>
    c228:	ldrb	r3, [r0, #4]
    c22a:	cmp	r3, #15
    c22c:	bhi.n	c248 <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    c22e:	ldrh	r2, [r4, #0]
    c230:	asrs	r2, r3
    c232:	lsls	r2, r2, #31
    c234:	bpl.n	c248 <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c236:	add.w	r3, r3, #33554432	; 0x2000000
    c23a:	add.w	r3, r3, #29824	; 0x7480
    c23e:	cmp.w	r1, r3, lsl #5
    c242:	bne.n	c248 <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    c244:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c246:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c248:	ldrh	r1, [r4, #0]
    c24a:	movs	r3, #0
    c24c:	asr.w	r2, r1, r3
    c250:	ands.w	r2, r2, #1
    c254:	bne.n	c29c <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    c256:	movs	r5, #1
    c258:	lsls	r5, r3
    c25a:	orrs	r1, r5
    c25c:	strh	r1, [r4, #0]
			__enable_irq();
    c25e:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c260:	ldr	r5, [pc, #76]	; (c2b0 <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    c262:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c264:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    c268:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c26a:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c26c:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c270:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c274:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c276:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c278:	movw	r5, #1154	; 0x482
    c27c:	ldr	r1, [pc, #52]	; (c2b4 <DMAChannel::begin(bool)+0x98>)
    c27e:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    c280:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    c282:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    c284:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    c286:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c288:	str	r3, [r0, #0]
	*p++ = 0;
    c28a:	strd	r2, r2, [r3]
	*p++ = 0;
    c28e:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c292:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c296:	strd	r2, r2, [r3, #24]
    c29a:	b.n	c246 <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    c29c:	adds	r3, #1
    c29e:	cmp	r3, #16
    c2a0:	bne.n	c24c <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    c2a2:	cpsie	i
			TCD = (TCD_t *)0;
    c2a4:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c2a6:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c2a8:	str	r2, [r0, #0]
			return; // no more channels available
    c2aa:	b.n	c246 <DMAChannel::begin(bool)+0x2a>
    c2ac:	.word	0x2002d80a
    c2b0:	.word	0x400fc000
    c2b4:	.word	0x400e8000

0000c2b8 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c2b8:	ldrb	r3, [r0, #4]
    c2ba:	cmp	r3, #15
    c2bc:	bhi.n	c2de <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    c2be:	ldr	r2, [pc, #32]	; (c2e0 <DMAChannel::release()+0x28>)
    c2c0:	strb	r3, [r2, #26]
	__disable_irq();
    c2c2:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c2c4:	ldr	r1, [pc, #28]	; (c2e4 <DMAChannel::release()+0x2c>)
    c2c6:	movs	r2, #1
    c2c8:	ldrb	r3, [r0, #4]
    c2ca:	lsls	r2, r3
    c2cc:	ldrh	r3, [r1, #0]
    c2ce:	bic.w	r3, r3, r2
    c2d2:	strh	r3, [r1, #0]
	__enable_irq();
    c2d4:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c2d6:	movs	r3, #16
    c2d8:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    c2da:	movs	r3, #0
    c2dc:	str	r3, [r0, #0]
}
    c2de:	bx	lr
    c2e0:	.word	0x400e8000
    c2e4:	.word	0x2002d80a

0000c2e8 <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    c2e8:	push	{r0, r1, r4, lr}
    c2ea:	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
    c2ec:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    c2ee:	cbz	r1, c308 <Print::write(char const*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    c2f0:	str	r1, [sp, #4]
    c2f2:	bl	eb40 <strlen>
    c2f6:	ldr	r3, [r4, #0]
    c2f8:	mov	r2, r0
    c2fa:	ldr	r1, [sp, #4]
    c2fc:	mov	r0, r4
    c2fe:	ldr	r3, [r3, #4]
    c300:	add	sp, #8
    c302:	ldmia.w	sp!, {r4, lr}
    c306:	bx	r3
    c308:	add	sp, #8
    c30a:	pop	{r4, pc}

0000c30c <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    c30c:	push	{r3, lr}
    c30e:	bl	c2e8 <Print::write(char const*)>
    c312:	pop	{r3, pc}

0000c314 <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    c314:	movs	r3, #0
    c316:	movs	r2, #10
    c318:	b.w	c4de <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c31c <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    c31c:	movs	r3, #0
    c31e:	uxtb	r2, r2
    c320:	b.w	c4de <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c324 <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
    c324:	push	{r3, r4, r5, lr}
    c326:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
    c328:	bl	c2e8 <Print::write(char const*)>
    c32c:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
    c32e:	mov	r0, r5
    c330:	bl	c48c <Print::println()>
    c334:	add	r0, r4
    c336:	pop	{r3, r4, r5, pc}

0000c338 <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    c338:	push	{r3, r4, r5, lr}
    c33a:	mov	r5, r0
    c33c:	bl	c31c <Print::print(unsigned long, int)>
    c340:	mov	r4, r0
    c342:	mov	r0, r5
    c344:	bl	c48c <Print::println()>
    c348:	add	r0, r4
    c34a:	pop	{r3, r4, r5, pc}

0000c34c <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    c34c:	movs	r2, #0
    c34e:	movs	r3, #1
    c350:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    c352:	push	{r4, lr}
		while (len > 0) {
    c354:	cmp	r1, #0
    c356:	sub.w	r4, r0, r1
    c35a:	bgt.n	c364 <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    c35c:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    c35e:	orr.w	r0, r3, r2, lsl #16
    c362:	pop	{r4, pc}
			a += *p++;
    c364:	ldrh	r4, [r4, #0]
			len -= 2;
    c366:	subs	r1, #2
			a += *p++;
    c368:	uxtah	r3, r3, r4
			b += a;
    c36c:	add	r2, r3
			len -= 2;
    c36e:	b.n	c354 <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000c370 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c370:	b.w	a484 <usb_serial_flush_input>

0000c374 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c374:	b.w	a42c <usb_serial_peekchar>

0000c378 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c378:	b.w	a4e4 <usb_serial_getchar>

0000c37c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c37c:	b.w	a470 <usb_serial_available>

0000c380 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c380:	b.w	a6f4 <usb_serial_flush_output>

0000c384 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c384:	b.w	a6a8 <usb_serial_write_buffer_free>

0000c388 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c388:	mov	r0, r1
    c38a:	mov	r1, r2
    c38c:	b.w	a504 <usb_serial_write>

0000c390 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c390:	mov	r0, r1
    c392:	b.w	a690 <usb_serial_putchar>

0000c396 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c396:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c398:	bl	7d8 <setup>
	while (1) {
		loop();
    c39c:	bl	2b8 <loop>
		yield();
    c3a0:	bl	c14c <yield>
	while (1) {
    c3a4:	b.n	c39c <main+0x6>
	...

0000c3a8 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    c3a8:	push	{r4, r5, r6, lr}
    c3aa:	ldr	r5, [pc, #36]	; (c3d0 <Stream::timedRead()+0x28>)
    c3ac:	mov	r4, r0
    c3ae:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    c3b0:	ldr	r3, [r4, #0]
    c3b2:	mov	r0, r4
    c3b4:	ldr	r3, [r3, #20]
    c3b6:	blx	r3
    if (c >= 0) return c;
    c3b8:	cmp	r0, #0
    c3ba:	bge.n	c3ce <Stream::timedRead()+0x26>
    yield();
    c3bc:	bl	c14c <yield>
    c3c0:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c3c2:	ldr	r2, [r4, #8]
    c3c4:	subs	r3, r3, r6
    c3c6:	cmp	r3, r2
    c3c8:	bcc.n	c3b0 <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    c3ca:	mov.w	r0, #4294967295
}
    c3ce:	pop	{r4, r5, r6, pc}
    c3d0:	.word	0x2002d7c4

0000c3d4 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    c3d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3d8:	mov	r6, r0
    c3da:	mov	r7, r1
    c3dc:	mov	r4, r3
	if (buffer == nullptr) return 0;
    c3de:	mov	r5, r2
    c3e0:	cbz	r2, c412 <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    c3e2:	cbz	r3, c404 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    c3e4:	add.w	r8, r3, #4294967295
	size_t index = 0;
    c3e8:	movs	r4, #0
	while (index < length) {
    c3ea:	cmp	r4, r8
    c3ec:	bcs.n	c400 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    c3ee:	mov	r0, r6
    c3f0:	bl	c3a8 <Stream::timedRead()>
		if (c == terminator) break;
    c3f4:	cmp	r7, r0
    c3f6:	beq.n	c400 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    c3f8:	cmp	r0, #0
    c3fa:	bge.n	c40a <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    c3fc:	movs	r3, #1
    c3fe:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    c400:	movs	r3, #0
    c402:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    c404:	mov	r0, r4
    c406:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    c40a:	adds	r4, #1
		*buffer++ = (char)c;
    c40c:	strb.w	r0, [r5], #1
		index++;
    c410:	b.n	c3ea <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    c412:	mov	r4, r2
    c414:	b.n	c404 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000c416 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c416:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c418:	push	{r4, r5, r6, r7, lr}
		base = 10;
    c41a:	it	eq
    c41c:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c41e:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    c420:	cbnz	r1, c44e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    c422:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    c424:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    c426:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c42a:	cbz	r3, c43c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    c42c:	subs	r3, r4, #1
		buf[i] = '-';
    c42e:	add	r2, sp, #40	; 0x28
		i--;
    c430:	uxtb	r4, r3
		buf[i] = '-';
    c432:	uxtab	r3, r2, r3
    c436:	movs	r2, #45	; 0x2d
    c438:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c43c:	ldr	r3, [r0, #0]
    c43e:	add	r1, sp, #4
    c440:	rsb	r2, r4, #34	; 0x22
    c444:	ldr	r3, [r3, #4]
    c446:	add	r1, r4
    c448:	blx	r3
}
    c44a:	add	sp, #44	; 0x2c
    c44c:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    c44e:	movs	r4, #33	; 0x21
			digit = n % base;
    c450:	udiv	r6, r1, r2
    c454:	mls	r7, r2, r6, r1
    c458:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c45a:	cmp	r7, #9
    c45c:	add.w	r7, r4, #40	; 0x28
    c460:	ite	ls
    c462:	addls	r5, #48	; 0x30
    c464:	addhi	r5, #55	; 0x37
    c466:	add	r7, sp
			if (n == 0) break;
    c468:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c46a:	uxtb	r5, r5
    c46c:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    c470:	bhi.n	c42a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    c472:	subs	r4, #1
			n /= base;
    c474:	mov	r1, r6
			i--;
    c476:	uxtb	r4, r4
			digit = n % base;
    c478:	b.n	c450 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000c47a <Print::print(long)>:
	if (n < 0) {
    c47a:	cmp	r1, #0
		n = -n;
    c47c:	mov.w	r2, #10
    c480:	itte	lt
    c482:	neglt	r1, r1
		sign = '-';
    c484:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    c486:	movge	r3, #0
	if (base == 0) {
    c488:	b.w	c416 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c48c <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    c48c:	movw	r3, #2573	; 0xa0d
{
    c490:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    c492:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c496:	movs	r2, #2
    c498:	ldr	r3, [r0, #0]
    c49a:	add	r1, sp, #4
    c49c:	ldr	r3, [r3, #4]
    c49e:	blx	r3
}
    c4a0:	add	sp, #12
    c4a2:	ldr.w	pc, [sp], #4
	...

0000c4a8 <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c4a8:	ldr	r3, [pc, #20]	; (c4c0 <_write+0x18>)
    c4aa:	cmp	r0, #2
    c4ac:	it	hi
    c4ae:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c4b0:	ldr	r0, [r3, #0]
{
    c4b2:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c4b4:	ldr	r4, [r0, #4]
    c4b6:	mov	r0, r3
    c4b8:	mov	r3, r4
}
    c4ba:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c4be:	bx	r3
    c4c0:	.word	0x20001c28

0000c4c4 <Print::printf(char const*, ...)>:
{
    c4c4:	push	{r1, r2, r3}
    c4c6:	push	{r0, r1, lr}
    c4c8:	add	r2, sp, #12
    c4ca:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    c4ce:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    c4d0:	bl	e810 <vdiprintf>
}
    c4d4:	add	sp, #8
    c4d6:	ldr.w	lr, [sp], #4
    c4da:	add	sp, #12
    c4dc:	bx	lr

0000c4de <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    c4de:	push	{r4, r5}
	if (base == 0) {
    c4e0:	cbnz	r2, c4ec <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    c4e2:	ldr	r3, [r0, #0]
    c4e4:	uxtb	r1, r1
    c4e6:	ldr	r3, [r3, #0]
}
    c4e8:	pop	{r4, r5}
		return write((uint8_t)n);
    c4ea:	bx	r3
}
    c4ec:	pop	{r4, r5}
    c4ee:	b.w	c416 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c4f2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    c4f2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4f6:	sub	sp, #72	; 0x48
    c4f8:	mov	r8, r0
    c4fa:	mov	r7, r2
    c4fc:	mov	r6, r3
    c4fe:	ldrb.w	r9, [sp, #104]	; 0x68
    c502:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    c506:	cmp.w	r9, #1
    c50a:	bls.n	c57e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    c50c:	orrs.w	r3, r2, r6
    c510:	bne.n	c548 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    c512:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    c514:	movs	r5, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    c516:	strb.w	r3, [sp, #69]	; 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c51a:	cmp.w	sl, #0
    c51e:	beq.n	c530 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    c520:	subs	r3, r5, #1
		buf[i] = '-';
    c522:	add	r2, sp, #72	; 0x48
		i--;
    c524:	uxtb	r5, r3
		buf[i] = '-';
    c526:	uxtab	r3, r2, r3
    c52a:	movs	r2, #45	; 0x2d
    c52c:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    c530:	ldr.w	r3, [r8]
    c534:	add	r1, sp, #4
    c536:	rsb	r2, r5, #66	; 0x42
    c53a:	mov	r0, r8
    c53c:	ldr	r3, [r3, #4]
    c53e:	add	r1, r5
    c540:	blx	r3
}
    c542:	add	sp, #72	; 0x48
    c544:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    c548:	movs	r5, #65	; 0x41
			digit = n % base;
    c54a:	mov	r1, r6
    c54c:	mov	r2, r9
    c54e:	movs	r3, #0
    c550:	mov	r0, r7
    c552:	bl	c6c4 <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c556:	add.w	r3, r5, #72	; 0x48
			digit = n % base;
    c55a:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c55c:	add	r3, sp
    c55e:	cmp	r4, #9
    c560:	ite	ls
    c562:	addls	r4, #48	; 0x30
    c564:	addhi	r4, #55	; 0x37
			if (n == 0) break;
    c566:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c568:	uxtb	r4, r4
			if (n == 0) break;
    c56a:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c56e:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    c572:	bcc.n	c51a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    c574:	subs	r5, #1
			n /= base;
    c576:	mov	r7, r0
    c578:	mov	r6, r1
			i--;
    c57a:	uxtb	r5, r5
			digit = n % base;
    c57c:	b.n	c54a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    c57e:	movs	r0, #0
    c580:	b.n	c542 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
    c582:	movs	r0, r0
    c584:	movs	r0, r0
	...

0000c588 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c588:	vcmp.f64	d0, d0
{
    c58c:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    c58e:	vmrs	APSR_nzcv, fpscr
{
    c592:	mov	r6, r0
    c594:	mov	r5, r1
    c596:	vpush	{d8-d9}
    c59a:	sub	sp, #28
	if (isnan(number)) return print("nan");
    c59c:	bvc.n	c5b0 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    c59e:	ldr	r1, [pc, #264]	; (c6a8 <Print::printFloat(double, unsigned char)+0x120>)
    c5a0:	bl	c2e8 <Print::write(char const*)>
    c5a4:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    c5a6:	mov	r0, r4
    c5a8:	add	sp, #28
    c5aa:	vpop	{d8-d9}
    c5ae:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c5b0:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c5b4:	vldr	d6, [pc, #208]	; c688 <Print::printFloat(double, unsigned char)+0x100>
    c5b8:	vcmp.f64	d7, d6
    c5bc:	vmrs	APSR_nzcv, fpscr
    c5c0:	ble.n	c5c6 <Print::printFloat(double, unsigned char)+0x3e>
    c5c2:	ldr	r1, [pc, #232]	; (c6ac <Print::printFloat(double, unsigned char)+0x124>)
    c5c4:	b.n	c5a0 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c5c6:	vldr	d7, [pc, #200]	; c690 <Print::printFloat(double, unsigned char)+0x108>
    c5ca:	vcmpe.f64	d0, d7
    c5ce:	vmrs	APSR_nzcv, fpscr
    c5d2:	ble.n	c5da <Print::printFloat(double, unsigned char)+0x52>
    c5d4:	ldr	r1, [pc, #216]	; (c6b0 <Print::printFloat(double, unsigned char)+0x128>)
    c5d6:	mov	r0, r6
    c5d8:	b.n	c5a0 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c5da:	vldr	d7, [pc, #188]	; c698 <Print::printFloat(double, unsigned char)+0x110>
    c5de:	vcmpe.f64	d0, d7
    c5e2:	vmrs	APSR_nzcv, fpscr
    c5e6:	bmi.n	c5d4 <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    c5e8:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    c5ec:	movs	r2, #0
	double rounding = 0.5;
    c5ee:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    c5f2:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    c5f6:	vldr	d6, [pc, #168]	; c6a0 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    c5fa:	itte	mi
    c5fc:	vnegmi.f64	d0, d0
		sign = 1;
    c600:	movmi	r3, #1
	uint8_t sign=0;
    c602:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    c604:	uxtb	r1, r2
    c606:	cmp	r5, r1
    c608:	bhi.n	c658 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    c60a:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    c60e:	movs	r2, #10
    c610:	mov	r0, r6
    c612:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    c616:	vmov	r1, s18
    c61a:	bl	c416 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c61e:	mov	r4, r0
	if (digits > 0) {
    c620:	cmp	r5, #0
    c622:	beq.n	c5a6 <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    c624:	vcvt.f64.u32	d0, s18
    c628:	cmp	r5, #15
    c62a:	add	r0, sp, #8
			remainder *= 10.0;
    c62c:	vmov.f64	d6, #36	; 0x41200000  10.0
    c630:	it	cs
    c632:	movcs	r5, #15
		buf[0] = '.';
    c634:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    c636:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    c63a:	mov	r1, r0
    c63c:	mov	r2, r5
    c63e:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    c642:	subs	r2, #1
    c644:	uxtb	r2, r2
    c646:	cmp	r2, #255	; 0xff
    c648:	bne.n	c660 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    c64a:	adds	r5, #1
    c64c:	ldr	r3, [r6, #0]
    c64e:	mov	r0, r6
    c650:	ldr	r3, [r3, #4]
    c652:	uxtb	r2, r5
    c654:	blx	r3
    c656:	b.n	c5a6 <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    c658:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    c65c:	adds	r2, #1
    c65e:	b.n	c604 <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    c660:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    c664:	vcvt.u32.f64	s15, d0
    c668:	vstr	s15, [sp, #4]
    c66c:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    c670:	vmov	s15, r3
			buf[count++] = '0' + n;
    c674:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    c678:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    c67c:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    c680:	vsub.f64	d0, d0, d7
    c684:	b.n	c642 <Print::printFloat(double, unsigned char)+0xba>
    c686:	nop
    c688:	.word	0xffffffff
    c68c:	.word	0x7fefffff
    c690:	.word	0xe0000000
    c694:	.word	0x41efffff
    c698:	.word	0xe0000000
    c69c:	.word	0xc1efffff
    c6a0:	.word	0xa0000000
    c6a4:	.word	0x3fb99999
    c6a8:	.word	0x2000108d
    c6ac:	.word	0x20001091
    c6b0:	.word	0x20001095

0000c6b4 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    c6b4:	b.w	c9d0 <free>

0000c6b8 <__aeabi_atexit>:
    c6b8:	mov	r3, r1
    c6ba:	mov	r1, r0
    c6bc:	mov	r0, r3
    c6be:	b.w	d830 <__cxa_atexit>
	...

0000c6c4 <__aeabi_uldivmod>:
    c6c4:	cbnz	r3, c6dc <__aeabi_uldivmod+0x18>
    c6c6:	cbnz	r2, c6dc <__aeabi_uldivmod+0x18>
    c6c8:	cmp	r1, #0
    c6ca:	it	eq
    c6cc:	cmpeq	r0, #0
    c6ce:	itt	ne
    c6d0:	movne.w	r1, #4294967295
    c6d4:	movne.w	r0, #4294967295
    c6d8:	b.w	c9bc <__aeabi_idiv0>
    c6dc:	sub.w	ip, sp, #8
    c6e0:	strd	ip, lr, [sp, #-16]!
    c6e4:	bl	c6f4 <__udivmoddi4>
    c6e8:	ldr.w	lr, [sp, #4]
    c6ec:	ldrd	r2, r3, [sp, #8]
    c6f0:	add	sp, #16
    c6f2:	bx	lr

0000c6f4 <__udivmoddi4>:
    c6f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6f8:	ldr	r6, [sp, #32]
    c6fa:	mov	r5, r1
    c6fc:	mov	r4, r0
    c6fe:	mov	r7, r1
    c700:	cmp	r3, #0
    c702:	bne.n	c79a <__udivmoddi4+0xa6>
    c704:	cmp	r2, r1
    c706:	mov	ip, r2
    c708:	bls.n	c7d6 <__udivmoddi4+0xe2>
    c70a:	clz	r3, r2
    c70e:	cbz	r3, c722 <__udivmoddi4+0x2e>
    c710:	lsl.w	ip, r2, r3
    c714:	rsb	r2, r3, #32
    c718:	lsls	r7, r3
    c71a:	lsr.w	r2, r0, r2
    c71e:	orrs	r7, r2
    c720:	lsls	r4, r3
    c722:	mov.w	lr, ip, lsr #16
    c726:	uxth.w	r5, ip
    c72a:	udiv	r1, r7, lr
    c72e:	lsrs	r2, r4, #16
    c730:	mls	r7, lr, r1, r7
    c734:	orr.w	r2, r2, r7, lsl #16
    c738:	mul.w	r0, r1, r5
    c73c:	cmp	r0, r2
    c73e:	bls.n	c756 <__udivmoddi4+0x62>
    c740:	adds.w	r2, ip, r2
    c744:	add.w	r7, r1, #4294967295
    c748:	bcs.w	c984 <__udivmoddi4+0x290>
    c74c:	cmp	r0, r2
    c74e:	bls.w	c984 <__udivmoddi4+0x290>
    c752:	subs	r1, #2
    c754:	add	r2, ip
    c756:	subs	r2, r2, r0
    c758:	uxth	r4, r4
    c75a:	udiv	r0, r2, lr
    c75e:	mls	r2, lr, r0, r2
    c762:	orr.w	r4, r4, r2, lsl #16
    c766:	mul.w	r5, r0, r5
    c76a:	cmp	r5, r4
    c76c:	bls.n	c784 <__udivmoddi4+0x90>
    c76e:	adds.w	r4, ip, r4
    c772:	add.w	r2, r0, #4294967295
    c776:	bcs.w	c988 <__udivmoddi4+0x294>
    c77a:	cmp	r5, r4
    c77c:	bls.w	c988 <__udivmoddi4+0x294>
    c780:	add	r4, ip
    c782:	subs	r0, #2
    c784:	orr.w	r0, r0, r1, lsl #16
    c788:	subs	r4, r4, r5
    c78a:	movs	r1, #0
    c78c:	cbz	r6, c796 <__udivmoddi4+0xa2>
    c78e:	lsrs	r4, r3
    c790:	movs	r3, #0
    c792:	strd	r4, r3, [r6]
    c796:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c79a:	cmp	r3, r1
    c79c:	bls.n	c7b0 <__udivmoddi4+0xbc>
    c79e:	cmp	r6, #0
    c7a0:	beq.w	c97e <__udivmoddi4+0x28a>
    c7a4:	movs	r1, #0
    c7a6:	strd	r0, r5, [r6]
    c7aa:	mov	r0, r1
    c7ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7b0:	clz	r1, r3
    c7b4:	cmp	r1, #0
    c7b6:	bne.n	c84c <__udivmoddi4+0x158>
    c7b8:	cmp	r3, r5
    c7ba:	bcc.n	c7c2 <__udivmoddi4+0xce>
    c7bc:	cmp	r2, r0
    c7be:	bhi.w	c9b2 <__udivmoddi4+0x2be>
    c7c2:	subs	r4, r0, r2
    c7c4:	sbc.w	r2, r5, r3
    c7c8:	movs	r0, #1
    c7ca:	mov	r7, r2
    c7cc:	cmp	r6, #0
    c7ce:	beq.n	c796 <__udivmoddi4+0xa2>
    c7d0:	strd	r4, r7, [r6]
    c7d4:	b.n	c796 <__udivmoddi4+0xa2>
    c7d6:	cbnz	r2, c7da <__udivmoddi4+0xe6>
    c7d8:	udf	#255	; 0xff
    c7da:	clz	r3, r2
    c7de:	cmp	r3, #0
    c7e0:	bne.w	c904 <__udivmoddi4+0x210>
    c7e4:	subs	r2, r1, r2
    c7e6:	mov.w	r7, ip, lsr #16
    c7ea:	uxth.w	lr, ip
    c7ee:	movs	r1, #1
    c7f0:	udiv	r5, r2, r7
    c7f4:	mls	r0, r7, r5, r2
    c7f8:	lsrs	r2, r4, #16
    c7fa:	orr.w	r2, r2, r0, lsl #16
    c7fe:	mul.w	r0, lr, r5
    c802:	cmp	r0, r2
    c804:	bls.n	c818 <__udivmoddi4+0x124>
    c806:	adds.w	r2, ip, r2
    c80a:	add.w	r8, r5, #4294967295
    c80e:	bcs.n	c816 <__udivmoddi4+0x122>
    c810:	cmp	r0, r2
    c812:	bhi.w	c9ac <__udivmoddi4+0x2b8>
    c816:	mov	r5, r8
    c818:	subs	r2, r2, r0
    c81a:	uxth	r4, r4
    c81c:	udiv	r0, r2, r7
    c820:	mls	r2, r7, r0, r2
    c824:	orr.w	r4, r4, r2, lsl #16
    c828:	mul.w	lr, lr, r0
    c82c:	cmp	lr, r4
    c82e:	bls.n	c842 <__udivmoddi4+0x14e>
    c830:	adds.w	r4, ip, r4
    c834:	add.w	r2, r0, #4294967295
    c838:	bcs.n	c840 <__udivmoddi4+0x14c>
    c83a:	cmp	lr, r4
    c83c:	bhi.w	c9b6 <__udivmoddi4+0x2c2>
    c840:	mov	r0, r2
    c842:	sub.w	r4, r4, lr
    c846:	orr.w	r0, r0, r5, lsl #16
    c84a:	b.n	c78c <__udivmoddi4+0x98>
    c84c:	rsb	r7, r1, #32
    c850:	lsls	r3, r1
    c852:	lsr.w	ip, r2, r7
    c856:	orr.w	ip, ip, r3
    c85a:	lsl.w	r4, r5, r1
    c85e:	lsr.w	r3, r0, r7
    c862:	lsrs	r5, r7
    c864:	mov.w	r9, ip, lsr #16
    c868:	orrs	r3, r4
    c86a:	udiv	r8, r5, r9
    c86e:	uxth.w	lr, ip
    c872:	mls	r5, r9, r8, r5
    c876:	lsrs	r4, r3, #16
    c878:	orr.w	r4, r4, r5, lsl #16
    c87c:	mul.w	r5, r8, lr
    c880:	cmp	r5, r4
    c882:	lsl.w	r2, r2, r1
    c886:	lsl.w	r0, r0, r1
    c88a:	bls.n	c8a4 <__udivmoddi4+0x1b0>
    c88c:	adds.w	r4, ip, r4
    c890:	add.w	sl, r8, #4294967295
    c894:	bcs.w	c9a8 <__udivmoddi4+0x2b4>
    c898:	cmp	r5, r4
    c89a:	bls.w	c9a8 <__udivmoddi4+0x2b4>
    c89e:	sub.w	r8, r8, #2
    c8a2:	add	r4, ip
    c8a4:	subs	r4, r4, r5
    c8a6:	uxth	r5, r3
    c8a8:	udiv	r3, r4, r9
    c8ac:	mls	r4, r9, r3, r4
    c8b0:	orr.w	r4, r5, r4, lsl #16
    c8b4:	mul.w	lr, r3, lr
    c8b8:	cmp	lr, r4
    c8ba:	bls.n	c8ce <__udivmoddi4+0x1da>
    c8bc:	adds.w	r4, ip, r4
    c8c0:	add.w	r5, r3, #4294967295
    c8c4:	bcs.n	c9a0 <__udivmoddi4+0x2ac>
    c8c6:	cmp	lr, r4
    c8c8:	bls.n	c9a0 <__udivmoddi4+0x2ac>
    c8ca:	subs	r3, #2
    c8cc:	add	r4, ip
    c8ce:	orr.w	r3, r3, r8, lsl #16
    c8d2:	umull	r9, r5, r3, r2
    c8d6:	sub.w	r4, r4, lr
    c8da:	cmp	r4, r5
    c8dc:	mov	r8, r9
    c8de:	mov	lr, r5
    c8e0:	bcc.n	c990 <__udivmoddi4+0x29c>
    c8e2:	beq.n	c98c <__udivmoddi4+0x298>
    c8e4:	cbz	r6, c8fc <__udivmoddi4+0x208>
    c8e6:	subs.w	r2, r0, r8
    c8ea:	sbc.w	r4, r4, lr
    c8ee:	lsl.w	r7, r4, r7
    c8f2:	lsrs	r2, r1
    c8f4:	lsrs	r4, r1
    c8f6:	orrs	r7, r2
    c8f8:	strd	r7, r4, [r6]
    c8fc:	mov	r0, r3
    c8fe:	movs	r1, #0
    c900:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c904:	rsb	r1, r3, #32
    c908:	lsl.w	ip, r2, r3
    c90c:	lsr.w	r2, r0, r1
    c910:	lsr.w	r1, r5, r1
    c914:	lsls	r5, r3
    c916:	orrs	r2, r5
    c918:	mov.w	r7, ip, lsr #16
    c91c:	uxth.w	lr, ip
    c920:	udiv	r0, r1, r7
    c924:	mls	r5, r7, r0, r1
    c928:	lsrs	r1, r2, #16
    c92a:	orr.w	r1, r1, r5, lsl #16
    c92e:	mul.w	r5, r0, lr
    c932:	cmp	r5, r1
    c934:	lsl.w	r4, r4, r3
    c938:	bls.n	c94c <__udivmoddi4+0x258>
    c93a:	adds.w	r1, ip, r1
    c93e:	add.w	r8, r0, #4294967295
    c942:	bcs.n	c9a4 <__udivmoddi4+0x2b0>
    c944:	cmp	r5, r1
    c946:	bls.n	c9a4 <__udivmoddi4+0x2b0>
    c948:	subs	r0, #2
    c94a:	add	r1, ip
    c94c:	subs	r1, r1, r5
    c94e:	uxth	r2, r2
    c950:	udiv	r5, r1, r7
    c954:	mls	r1, r7, r5, r1
    c958:	orr.w	r2, r2, r1, lsl #16
    c95c:	mul.w	r1, r5, lr
    c960:	cmp	r1, r2
    c962:	bls.n	c976 <__udivmoddi4+0x282>
    c964:	adds.w	r2, ip, r2
    c968:	add.w	r8, r5, #4294967295
    c96c:	bcs.n	c99c <__udivmoddi4+0x2a8>
    c96e:	cmp	r1, r2
    c970:	bls.n	c99c <__udivmoddi4+0x2a8>
    c972:	subs	r5, #2
    c974:	add	r2, ip
    c976:	subs	r2, r2, r1
    c978:	orr.w	r1, r5, r0, lsl #16
    c97c:	b.n	c7f0 <__udivmoddi4+0xfc>
    c97e:	mov	r1, r6
    c980:	mov	r0, r6
    c982:	b.n	c796 <__udivmoddi4+0xa2>
    c984:	mov	r1, r7
    c986:	b.n	c756 <__udivmoddi4+0x62>
    c988:	mov	r0, r2
    c98a:	b.n	c784 <__udivmoddi4+0x90>
    c98c:	cmp	r0, r9
    c98e:	bcs.n	c8e4 <__udivmoddi4+0x1f0>
    c990:	subs.w	r8, r9, r2
    c994:	sbc.w	lr, r5, ip
    c998:	subs	r3, #1
    c99a:	b.n	c8e4 <__udivmoddi4+0x1f0>
    c99c:	mov	r5, r8
    c99e:	b.n	c976 <__udivmoddi4+0x282>
    c9a0:	mov	r3, r5
    c9a2:	b.n	c8ce <__udivmoddi4+0x1da>
    c9a4:	mov	r0, r8
    c9a6:	b.n	c94c <__udivmoddi4+0x258>
    c9a8:	mov	r8, sl
    c9aa:	b.n	c8a4 <__udivmoddi4+0x1b0>
    c9ac:	subs	r5, #2
    c9ae:	add	r2, ip
    c9b0:	b.n	c818 <__udivmoddi4+0x124>
    c9b2:	mov	r0, r1
    c9b4:	b.n	c7cc <__udivmoddi4+0xd8>
    c9b6:	add	r4, ip
    c9b8:	subs	r0, #2
    c9ba:	b.n	c842 <__udivmoddi4+0x14e>

0000c9bc <__aeabi_idiv0>:
    c9bc:	bx	lr
    c9be:	nop

0000c9c0 <malloc>:
    c9c0:	ldr	r3, [pc, #8]	; (c9cc <malloc+0xc>)
    c9c2:	mov	r1, r0
    c9c4:	ldr	r0, [r3, #0]
    c9c6:	b.w	ca20 <_malloc_r>
    c9ca:	nop
    c9cc:	.word	0x20001e08

0000c9d0 <free>:
    c9d0:	ldr	r3, [pc, #8]	; (c9dc <free+0xc>)
    c9d2:	mov	r1, r0
    c9d4:	ldr	r0, [r3, #0]
    c9d6:	b.w	f758 <_free_r>
    c9da:	nop
    c9dc:	.word	0x20001e08

0000c9e0 <sbrk_aligned>:
    c9e0:	push	{r4, r5, r6, lr}
    c9e2:	ldr	r6, [pc, #56]	; (ca1c <sbrk_aligned+0x3c>)
    c9e4:	mov	r4, r1
    c9e6:	ldr	r1, [r6, #0]
    c9e8:	mov	r5, r0
    c9ea:	cbnz	r1, c9f2 <sbrk_aligned+0x12>
    c9ec:	bl	e9e8 <_sbrk_r>
    c9f0:	str	r0, [r6, #0]
    c9f2:	mov	r1, r4
    c9f4:	mov	r0, r5
    c9f6:	bl	e9e8 <_sbrk_r>
    c9fa:	adds	r3, r0, #1
    c9fc:	beq.n	ca14 <sbrk_aligned+0x34>
    c9fe:	adds	r4, r0, #3
    ca00:	bic.w	r4, r4, #3
    ca04:	cmp	r0, r4
    ca06:	beq.n	ca18 <sbrk_aligned+0x38>
    ca08:	subs	r1, r4, r0
    ca0a:	mov	r0, r5
    ca0c:	bl	e9e8 <_sbrk_r>
    ca10:	adds	r0, #1
    ca12:	bne.n	ca18 <sbrk_aligned+0x38>
    ca14:	mov.w	r4, #4294967295
    ca18:	mov	r0, r4
    ca1a:	pop	{r4, r5, r6, pc}
    ca1c:	.word	0x2002ceac

0000ca20 <_malloc_r>:
    ca20:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca24:	adds	r5, r1, #3
    ca26:	bic.w	r5, r5, #3
    ca2a:	adds	r5, #8
    ca2c:	cmp	r5, #12
    ca2e:	it	cc
    ca30:	movcc	r5, #12
    ca32:	cmp	r5, #0
    ca34:	mov	r7, r0
    ca36:	blt.n	ca3c <_malloc_r+0x1c>
    ca38:	cmp	r1, r5
    ca3a:	bls.n	ca48 <_malloc_r+0x28>
    ca3c:	movs	r3, #12
    ca3e:	str	r3, [r7, #0]
    ca40:	movs	r6, #0
    ca42:	mov	r0, r6
    ca44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca48:	ldr	r6, [pc, #188]	; (cb08 <_malloc_r+0xe8>)
    ca4a:	bl	cb0c <__malloc_lock>
    ca4e:	ldr	r3, [r6, #0]
    ca50:	mov	r4, r3
    ca52:	cbnz	r4, caa6 <_malloc_r+0x86>
    ca54:	mov	r1, r5
    ca56:	mov	r0, r7
    ca58:	bl	c9e0 <sbrk_aligned>
    ca5c:	adds	r3, r0, #1
    ca5e:	mov	r4, r0
    ca60:	bne.n	cb02 <_malloc_r+0xe2>
    ca62:	ldr	r4, [r6, #0]
    ca64:	mov	r6, r4
    ca66:	cmp	r6, #0
    ca68:	bne.n	caf0 <_malloc_r+0xd0>
    ca6a:	cmp	r4, #0
    ca6c:	beq.n	caf6 <_malloc_r+0xd6>
    ca6e:	ldr	r3, [r4, #0]
    ca70:	mov	r1, r6
    ca72:	mov	r0, r7
    ca74:	add.w	r8, r4, r3
    ca78:	bl	e9e8 <_sbrk_r>
    ca7c:	cmp	r8, r0
    ca7e:	bne.n	caf6 <_malloc_r+0xd6>
    ca80:	ldr	r3, [r4, #0]
    ca82:	adds	r5, #3
    ca84:	subs	r5, r5, r3
    ca86:	bic.w	r5, r5, #3
    ca8a:	adds	r5, #8
    ca8c:	cmp	r5, #12
    ca8e:	it	cc
    ca90:	movcc	r5, #12
    ca92:	mov	r1, r5
    ca94:	mov	r0, r7
    ca96:	bl	c9e0 <sbrk_aligned>
    ca9a:	adds	r0, #1
    ca9c:	beq.n	caf6 <_malloc_r+0xd6>
    ca9e:	ldr	r3, [r4, #0]
    caa0:	add	r3, r5
    caa2:	str	r3, [r4, #0]
    caa4:	b.n	cac4 <_malloc_r+0xa4>
    caa6:	ldr	r2, [r4, #0]
    caa8:	subs	r2, r2, r5
    caaa:	bmi.n	caea <_malloc_r+0xca>
    caac:	cmp	r2, #11
    caae:	bls.n	cade <_malloc_r+0xbe>
    cab0:	adds	r1, r4, r5
    cab2:	cmp	r3, r4
    cab4:	str	r5, [r4, #0]
    cab6:	it	ne
    cab8:	strne	r1, [r3, #4]
    caba:	ldr	r3, [r4, #4]
    cabc:	it	eq
    cabe:	streq	r1, [r6, #0]
    cac0:	str	r2, [r4, r5]
    cac2:	str	r3, [r1, #4]
    cac4:	mov	r0, r7
    cac6:	add.w	r6, r4, #11
    caca:	bl	cb18 <__malloc_unlock>
    cace:	bic.w	r6, r6, #7
    cad2:	adds	r3, r4, #4
    cad4:	subs	r2, r6, r3
    cad6:	beq.n	ca42 <_malloc_r+0x22>
    cad8:	subs	r3, r3, r6
    cada:	str	r3, [r4, r2]
    cadc:	b.n	ca42 <_malloc_r+0x22>
    cade:	ldr	r2, [r4, #4]
    cae0:	cmp	r3, r4
    cae2:	ite	eq
    cae4:	streq	r2, [r6, #0]
    cae6:	strne	r2, [r3, #4]
    cae8:	b.n	cac4 <_malloc_r+0xa4>
    caea:	mov	r3, r4
    caec:	ldr	r4, [r4, #4]
    caee:	b.n	ca52 <_malloc_r+0x32>
    caf0:	mov	r4, r6
    caf2:	ldr	r6, [r6, #4]
    caf4:	b.n	ca66 <_malloc_r+0x46>
    caf6:	movs	r3, #12
    caf8:	str	r3, [r7, #0]
    cafa:	mov	r0, r7
    cafc:	bl	cb18 <__malloc_unlock>
    cb00:	b.n	ca42 <_malloc_r+0x22>
    cb02:	str	r5, [r4, #0]
    cb04:	b.n	cac4 <_malloc_r+0xa4>
    cb06:	nop
    cb08:	.word	0x2002cea8

0000cb0c <__malloc_lock>:
    cb0c:	ldr	r0, [pc, #4]	; (cb14 <__malloc_lock+0x8>)
    cb0e:	b.w	ea80 <__retarget_lock_acquire_recursive>
    cb12:	nop
    cb14:	.word	0x2002ddfe

0000cb18 <__malloc_unlock>:
    cb18:	ldr	r0, [pc, #4]	; (cb20 <__malloc_unlock+0x8>)
    cb1a:	b.w	ea82 <__retarget_lock_release_recursive>
    cb1e:	nop
    cb20:	.word	0x2002ddfe

0000cb24 <_realloc_r>:
    cb24:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb28:	mov	r8, r0
    cb2a:	mov	r4, r2
    cb2c:	mov	r6, r1
    cb2e:	cbnz	r1, cb3a <_realloc_r+0x16>
    cb30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cb34:	mov	r1, r2
    cb36:	b.w	ca20 <_malloc_r>
    cb3a:	cbnz	r2, cb48 <_realloc_r+0x24>
    cb3c:	bl	f758 <_free_r>
    cb40:	mov	r5, r4
    cb42:	mov	r0, r5
    cb44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb48:	bl	10818 <_malloc_usable_size_r>
    cb4c:	cmp	r4, r0
    cb4e:	mov	r7, r0
    cb50:	bhi.n	cb58 <_realloc_r+0x34>
    cb52:	cmp.w	r4, r0, lsr #1
    cb56:	bhi.n	cb7e <_realloc_r+0x5a>
    cb58:	mov	r1, r4
    cb5a:	mov	r0, r8
    cb5c:	bl	ca20 <_malloc_r>
    cb60:	mov	r5, r0
    cb62:	cmp	r0, #0
    cb64:	beq.n	cb42 <_realloc_r+0x1e>
    cb66:	cmp	r4, r7
    cb68:	mov	r2, r4
    cb6a:	mov	r1, r6
    cb6c:	it	cs
    cb6e:	movcs	r2, r7
    cb70:	bl	9f88 <memcpy>
    cb74:	mov	r1, r6
    cb76:	mov	r0, r8
    cb78:	bl	f758 <_free_r>
    cb7c:	b.n	cb42 <_realloc_r+0x1e>
    cb7e:	mov	r5, r6
    cb80:	b.n	cb42 <_realloc_r+0x1e>

0000cb82 <sulp>:
    cb82:	push	{r4, r5, r6, lr}
    cb84:	mov	r4, r0
    cb86:	mov	r5, r1
    cb88:	mov	r6, r2
    cb8a:	vmov	d0, r4, r5
    cb8e:	bl	1059c <__ulp>
    cb92:	cbz	r6, cbb4 <sulp+0x32>
    cb94:	ubfx	r3, r5, #20, #11
    cb98:	rsb	r3, r3, #107	; 0x6b
    cb9c:	cmp	r3, #0
    cb9e:	ble.n	cbb4 <sulp+0x32>
    cba0:	lsls	r3, r3, #20
    cba2:	add.w	r1, r3, #1069547520	; 0x3fc00000
    cba6:	movs	r0, #0
    cba8:	add.w	r1, r1, #3145728	; 0x300000
    cbac:	vmov	d7, r0, r1
    cbb0:	vmul.f64	d0, d0, d7
    cbb4:	pop	{r4, r5, r6, pc}
	...

0000cbb8 <_strtod_l>:
    cbb8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbbc:	vpush	{d8-d14}
    cbc0:	sub	sp, #92	; 0x5c
    cbc2:	mov	r4, r0
    cbc4:	str	r2, [sp, #52]	; 0x34
    cbc6:	movs	r2, #0
    cbc8:	str	r2, [sp, #72]	; 0x48
    cbca:	mov	sl, r1
    cbcc:	mov.w	r8, #0
    cbd0:	mov.w	r9, #0
    cbd4:	mov	r2, r1
    cbd6:	str	r2, [sp, #68]	; 0x44
    cbd8:	ldrb	r1, [r2, #0]
    cbda:	cmp	r1, #43	; 0x2b
    cbdc:	beq.n	cc78 <_strtod_l+0xc0>
    cbde:	bhi.n	cc54 <_strtod_l+0x9c>
    cbe0:	cmp	r1, #13
    cbe2:	bhi.n	cc4c <_strtod_l+0x94>
    cbe4:	cmp	r1, #8
    cbe6:	bhi.n	cc50 <_strtod_l+0x98>
    cbe8:	cmp	r1, #0
    cbea:	beq.n	cc66 <_strtod_l+0xae>
    cbec:	movs	r2, #0
    cbee:	str	r2, [sp, #32]
    cbf0:	ldr	r6, [sp, #68]	; 0x44
    cbf2:	ldrb	r2, [r6, #0]
    cbf4:	cmp	r2, #48	; 0x30
    cbf6:	bne.w	cd6a <_strtod_l+0x1b2>
    cbfa:	ldrb	r2, [r6, #1]
    cbfc:	and.w	r2, r2, #223	; 0xdf
    cc00:	cmp	r2, #88	; 0x58
    cc02:	bne.n	cce6 <_strtod_l+0x12e>
    cc04:	str	r3, [sp, #8]
    cc06:	ldr	r3, [sp, #32]
    cc08:	str	r3, [sp, #4]
    cc0a:	add	r3, sp, #72	; 0x48
    cc0c:	str	r3, [sp, #0]
    cc0e:	ldr	r2, [pc, #580]	; (ce54 <_strtod_l+0x29c>)
    cc10:	add	r3, sp, #76	; 0x4c
    cc12:	add	r1, sp, #68	; 0x44
    cc14:	mov	r0, r4
    cc16:	bl	f8c0 <__gethex>
    cc1a:	ands.w	r7, r0, #15
    cc1e:	mov	r5, r0
    cc20:	beq.n	cc2e <_strtod_l+0x76>
    cc22:	cmp	r7, #6
    cc24:	bne.n	cc7c <_strtod_l+0xc4>
    cc26:	adds	r6, #1
    cc28:	movs	r3, #0
    cc2a:	str	r6, [sp, #68]	; 0x44
    cc2c:	str	r3, [sp, #32]
    cc2e:	ldr	r3, [sp, #52]	; 0x34
    cc30:	cmp	r3, #0
    cc32:	bne.w	d6e0 <_strtod_l+0xb28>
    cc36:	ldr	r3, [sp, #32]
    cc38:	vmov	d0, r8, r9
    cc3c:	cbz	r3, cc72 <_strtod_l+0xba>
    cc3e:	vneg.f64	d0, d0
    cc42:	add	sp, #92	; 0x5c
    cc44:	vpop	{d8-d14}
    cc48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc4c:	cmp	r1, #32
    cc4e:	bne.n	cbec <_strtod_l+0x34>
    cc50:	adds	r2, #1
    cc52:	b.n	cbd6 <_strtod_l+0x1e>
    cc54:	cmp	r1, #45	; 0x2d
    cc56:	bne.n	cbec <_strtod_l+0x34>
    cc58:	movs	r1, #1
    cc5a:	str	r1, [sp, #32]
    cc5c:	adds	r1, r2, #1
    cc5e:	str	r1, [sp, #68]	; 0x44
    cc60:	ldrb	r2, [r2, #1]
    cc62:	cmp	r2, #0
    cc64:	bne.n	cbf0 <_strtod_l+0x38>
    cc66:	ldr	r3, [sp, #52]	; 0x34
    cc68:	str.w	sl, [sp, #68]	; 0x44
    cc6c:	cmp	r3, #0
    cc6e:	bne.w	d6dc <_strtod_l+0xb24>
    cc72:	vmov	d0, r8, r9
    cc76:	b.n	cc42 <_strtod_l+0x8a>
    cc78:	movs	r1, #0
    cc7a:	b.n	cc5a <_strtod_l+0xa2>
    cc7c:	ldr	r2, [sp, #72]	; 0x48
    cc7e:	cbz	r2, cc90 <_strtod_l+0xd8>
    cc80:	movs	r1, #53	; 0x35
    cc82:	add	r0, sp, #80	; 0x50
    cc84:	bl	10790 <__copybits>
    cc88:	ldr	r1, [sp, #72]	; 0x48
    cc8a:	mov	r0, r4
    cc8c:	bl	ff44 <_Bfree>
    cc90:	subs	r3, r7, #1
    cc92:	ldr	r2, [sp, #76]	; 0x4c
    cc94:	cmp	r3, #4
    cc96:	bhi.n	cca6 <_strtod_l+0xee>
    cc98:	tbb	[pc, r3]
    cc9c:	.word	0x201d0314
    cca0:	.byte	0x14
    cca1:	.byte	0x00
    cca2:	ldrd	r8, r9, [sp, #80]	; 0x50
    cca6:	lsls	r3, r5, #23
    cca8:	it	mi
    ccaa:	orrmi.w	r9, r9, #2147483648	; 0x80000000
    ccae:	bic.w	r3, r9, #2147483648	; 0x80000000
    ccb2:	lsrs	r3, r3, #20
    ccb4:	lsls	r3, r3, #20
    ccb6:	cmp	r3, #0
    ccb8:	bne.n	cc2e <_strtod_l+0x76>
    ccba:	bl	ea2c <__errno>
    ccbe:	movs	r3, #34	; 0x22
    ccc0:	str	r3, [r0, #0]
    ccc2:	b.n	cc2e <_strtod_l+0x76>
    ccc4:	ldrd	r8, r3, [sp, #80]	; 0x50
    ccc8:	addw	r2, r2, #1075	; 0x433
    cccc:	bic.w	r3, r3, #1048576	; 0x100000
    ccd0:	orr.w	r9, r3, r2, lsl #20
    ccd4:	b.n	cca6 <_strtod_l+0xee>
    ccd6:	ldr.w	r9, [pc, #388]	; ce5c <_strtod_l+0x2a4>
    ccda:	b.n	cca6 <_strtod_l+0xee>
    ccdc:	mvn.w	r9, #2147483648	; 0x80000000
    cce0:	mov.w	r8, #4294967295
    cce4:	b.n	cca6 <_strtod_l+0xee>
    cce6:	ldr	r3, [sp, #68]	; 0x44
    cce8:	adds	r2, r3, #1
    ccea:	str	r2, [sp, #68]	; 0x44
    ccec:	ldrb	r3, [r3, #1]
    ccee:	cmp	r3, #48	; 0x30
    ccf0:	beq.n	cce6 <_strtod_l+0x12e>
    ccf2:	cmp	r3, #0
    ccf4:	beq.n	cc2e <_strtod_l+0x76>
    ccf6:	movs	r3, #1
    ccf8:	str	r3, [sp, #24]
    ccfa:	ldr	r3, [sp, #68]	; 0x44
    ccfc:	str	r3, [sp, #36]	; 0x24
    ccfe:	movs	r3, #0
    cd00:	str	r3, [sp, #20]
    cd02:	str	r3, [sp, #28]
    cd04:	mov	r6, r3
    cd06:	movs	r2, #10
    cd08:	ldr	r0, [sp, #68]	; 0x44
    cd0a:	ldrb	r5, [r0, #0]
    cd0c:	sub.w	r3, r5, #48	; 0x30
    cd10:	uxtb	r1, r3
    cd12:	cmp	r1, #9
    cd14:	bls.n	cd6e <_strtod_l+0x1b6>
    cd16:	ldr	r1, [pc, #320]	; (ce58 <_strtod_l+0x2a0>)
    cd18:	movs	r2, #1
    cd1a:	bl	e954 <strncmp>
    cd1e:	cmp	r0, #0
    cd20:	beq.n	cd8e <_strtod_l+0x1d6>
    cd22:	movs	r0, #0
    cd24:	mov	r2, r5
    cd26:	mov	r3, r6
    cd28:	mov	fp, r0
    cd2a:	mov	r1, r0
    cd2c:	cmp	r2, #101	; 0x65
    cd2e:	beq.n	cd34 <_strtod_l+0x17c>
    cd30:	cmp	r2, #69	; 0x45
    cd32:	bne.n	cd66 <_strtod_l+0x1ae>
    cd34:	cbnz	r3, cd3e <_strtod_l+0x186>
    cd36:	ldr	r3, [sp, #24]
    cd38:	orrs	r3, r0
    cd3a:	beq.n	cc66 <_strtod_l+0xae>
    cd3c:	movs	r3, #0
    cd3e:	ldr.w	sl, [sp, #68]	; 0x44
    cd42:	add.w	r2, sl, #1
    cd46:	str	r2, [sp, #68]	; 0x44
    cd48:	ldrb.w	r2, [sl, #1]
    cd4c:	cmp	r2, #43	; 0x2b
    cd4e:	beq.n	ce3c <_strtod_l+0x284>
    cd50:	cmp	r2, #45	; 0x2d
    cd52:	beq.n	ce4c <_strtod_l+0x294>
    cd54:	mov.w	lr, #0
    cd58:	sub.w	r5, r2, #48	; 0x30
    cd5c:	cmp	r5, #9
    cd5e:	bls.w	ce68 <_strtod_l+0x2b0>
    cd62:	str.w	sl, [sp, #68]	; 0x44
    cd66:	movs	r5, #0
    cd68:	b.n	cea8 <_strtod_l+0x2f0>
    cd6a:	movs	r3, #0
    cd6c:	b.n	ccf8 <_strtod_l+0x140>
    cd6e:	cmp	r6, #8
    cd70:	itete	le
    cd72:	ldrle	r1, [sp, #28]
    cd74:	ldrgt	r1, [sp, #20]
    cd76:	mlale	r3, r2, r1, r3
    cd7a:	mlagt	r3, r2, r1, r3
    cd7e:	add.w	r0, r0, #1
    cd82:	ite	le
    cd84:	strle	r3, [sp, #28]
    cd86:	strgt	r3, [sp, #20]
    cd88:	adds	r6, #1
    cd8a:	str	r0, [sp, #68]	; 0x44
    cd8c:	b.n	cd08 <_strtod_l+0x150>
    cd8e:	ldr	r3, [sp, #68]	; 0x44
    cd90:	adds	r2, r3, #1
    cd92:	str	r2, [sp, #68]	; 0x44
    cd94:	ldrb	r2, [r3, #1]
    cd96:	cbz	r6, ce04 <_strtod_l+0x24c>
    cd98:	mov	fp, r0
    cd9a:	mov	r3, r6
    cd9c:	sub.w	r1, r2, #48	; 0x30
    cda0:	cmp	r1, #9
    cda2:	bls.n	cdca <_strtod_l+0x212>
    cda4:	movs	r1, #1
    cda6:	b.n	cd2c <_strtod_l+0x174>
    cda8:	ldr	r3, [sp, #68]	; 0x44
    cdaa:	adds	r2, r3, #1
    cdac:	str	r2, [sp, #68]	; 0x44
    cdae:	ldrb	r2, [r3, #1]
    cdb0:	adds	r0, #1
    cdb2:	cmp	r2, #48	; 0x30
    cdb4:	beq.n	cda8 <_strtod_l+0x1f0>
    cdb6:	sub.w	r3, r2, #49	; 0x31
    cdba:	cmp	r3, #8
    cdbc:	bhi.w	d6ea <_strtod_l+0xb32>
    cdc0:	ldr	r3, [sp, #68]	; 0x44
    cdc2:	str	r3, [sp, #36]	; 0x24
    cdc4:	mov	fp, r0
    cdc6:	movs	r0, #0
    cdc8:	mov	r3, r0
    cdca:	subs	r2, #48	; 0x30
    cdcc:	add.w	r1, r0, #1
    cdd0:	beq.n	cdf8 <_strtod_l+0x240>
    cdd2:	add	fp, r1
    cdd4:	add.w	ip, r0, r3
    cdd8:	mov	r1, r3
    cdda:	movs	r5, #10
    cddc:	cmp	r1, ip
    cdde:	bne.n	ce08 <_strtod_l+0x250>
    cde0:	adds	r1, r3, r0
    cde2:	cmp	r1, #8
    cde4:	add.w	r3, r3, #1
    cde8:	add	r3, r0
    cdea:	bgt.n	ce24 <_strtod_l+0x26c>
    cdec:	ldr	r0, [sp, #28]
    cdee:	movs	r1, #10
    cdf0:	mla	r2, r1, r0, r2
    cdf4:	str	r2, [sp, #28]
    cdf6:	movs	r1, #0
    cdf8:	ldr	r2, [sp, #68]	; 0x44
    cdfa:	adds	r0, r2, #1
    cdfc:	str	r0, [sp, #68]	; 0x44
    cdfe:	ldrb	r2, [r2, #1]
    ce00:	mov	r0, r1
    ce02:	b.n	cd9c <_strtod_l+0x1e4>
    ce04:	mov	r0, r6
    ce06:	b.n	cdb2 <_strtod_l+0x1fa>
    ce08:	cmp	r1, #8
    ce0a:	add.w	r1, r1, #1
    ce0e:	bgt.n	ce18 <_strtod_l+0x260>
    ce10:	ldr	r7, [sp, #28]
    ce12:	muls	r7, r5
    ce14:	str	r7, [sp, #28]
    ce16:	b.n	cddc <_strtod_l+0x224>
    ce18:	cmp	r1, #16
    ce1a:	ittt	le
    ce1c:	ldrle	r7, [sp, #20]
    ce1e:	mulle	r7, r5
    ce20:	strle	r7, [sp, #20]
    ce22:	b.n	cddc <_strtod_l+0x224>
    ce24:	cmp	r3, #16
    ce26:	itttt	le
    ce28:	ldrle	r0, [sp, #20]
    ce2a:	movle	r1, #10
    ce2c:	mlale	r2, r1, r0, r2
    ce30:	strle	r2, [sp, #20]
    ce32:	b.n	cdf6 <_strtod_l+0x23e>
    ce34:	mov.w	fp, #0
    ce38:	movs	r1, #1
    ce3a:	b.n	cd36 <_strtod_l+0x17e>
    ce3c:	mov.w	lr, #0
    ce40:	add.w	r2, sl, #2
    ce44:	str	r2, [sp, #68]	; 0x44
    ce46:	ldrb.w	r2, [sl, #2]
    ce4a:	b.n	cd58 <_strtod_l+0x1a0>
    ce4c:	mov.w	lr, #1
    ce50:	b.n	ce40 <_strtod_l+0x288>
    ce52:	nop
    ce54:	.word	0x20000900
    ce58:	.word	0x200015d4
    ce5c:	.word	0x7ff00000
    ce60:	ldr	r2, [sp, #68]	; 0x44
    ce62:	adds	r5, r2, #1
    ce64:	str	r5, [sp, #68]	; 0x44
    ce66:	ldrb	r2, [r2, #1]
    ce68:	cmp	r2, #48	; 0x30
    ce6a:	beq.n	ce60 <_strtod_l+0x2a8>
    ce6c:	sub.w	r5, r2, #49	; 0x31
    ce70:	cmp	r5, #8
    ce72:	bhi.w	cd66 <_strtod_l+0x1ae>
    ce76:	sub.w	ip, r2, #48	; 0x30
    ce7a:	ldr	r2, [sp, #68]	; 0x44
    ce7c:	str	r2, [sp, #40]	; 0x28
    ce7e:	ldr	r2, [sp, #68]	; 0x44
    ce80:	adds	r5, r2, #1
    ce82:	str	r5, [sp, #68]	; 0x44
    ce84:	ldrb	r2, [r2, #1]
    ce86:	sub.w	r7, r2, #48	; 0x30
    ce8a:	cmp	r7, #9
    ce8c:	bls.n	cefe <_strtod_l+0x346>
    ce8e:	ldr	r7, [sp, #40]	; 0x28
    ce90:	subs	r5, r5, r7
    ce92:	cmp	r5, #8
    ce94:	movw	r5, #19999	; 0x4e1f
    ce98:	bgt.n	cea0 <_strtod_l+0x2e8>
    ce9a:	cmp	r5, ip
    ce9c:	it	ge
    ce9e:	movge	r5, ip
    cea0:	cmp.w	lr, #0
    cea4:	beq.n	cea8 <_strtod_l+0x2f0>
    cea6:	negs	r5, r5
    cea8:	cmp	r3, #0
    ceaa:	bne.n	cf48 <_strtod_l+0x390>
    ceac:	ldr	r3, [sp, #24]
    ceae:	orrs	r3, r0
    ceb0:	bne.w	cc2e <_strtod_l+0x76>
    ceb4:	cmp	r1, #0
    ceb6:	bne.w	cc66 <_strtod_l+0xae>
    ceba:	cmp	r2, #105	; 0x69
    cebc:	beq.n	cf0e <_strtod_l+0x356>
    cebe:	bgt.n	cf0a <_strtod_l+0x352>
    cec0:	cmp	r2, #73	; 0x49
    cec2:	beq.n	cf0e <_strtod_l+0x356>
    cec4:	cmp	r2, #78	; 0x4e
    cec6:	bne.w	cc66 <_strtod_l+0xae>
    ceca:	ldr	r1, [pc, #596]	; (d120 <_strtod_l+0x568>)
    cecc:	add	r0, sp, #68	; 0x44
    cece:	bl	fd40 <__match>
    ced2:	cmp	r0, #0
    ced4:	beq.w	cc66 <_strtod_l+0xae>
    ced8:	ldr	r3, [sp, #68]	; 0x44
    ceda:	ldrb	r3, [r3, #0]
    cedc:	cmp	r3, #40	; 0x28
    cede:	bne.n	cf3c <_strtod_l+0x384>
    cee0:	ldr	r1, [pc, #576]	; (d124 <_strtod_l+0x56c>)
    cee2:	add	r2, sp, #80	; 0x50
    cee4:	add	r0, sp, #68	; 0x44
    cee6:	bl	fd68 <__hexnan>
    ceea:	cmp	r0, #5
    ceec:	bne.n	cf3c <_strtod_l+0x384>
    ceee:	ldr	r3, [sp, #84]	; 0x54
    cef0:	ldr.w	r8, [sp, #80]	; 0x50
    cef4:	orr.w	r9, r3, #2139095040	; 0x7f800000
    cef8:	orr.w	r9, r9, #7340032	; 0x700000
    cefc:	b.n	cc2e <_strtod_l+0x76>
    cefe:	movs	r5, #10
    cf00:	mla	ip, r5, ip, r2
    cf04:	sub.w	ip, ip, #48	; 0x30
    cf08:	b.n	ce7e <_strtod_l+0x2c6>
    cf0a:	cmp	r2, #110	; 0x6e
    cf0c:	b.n	cec6 <_strtod_l+0x30e>
    cf0e:	ldr	r1, [pc, #536]	; (d128 <_strtod_l+0x570>)
    cf10:	add	r0, sp, #68	; 0x44
    cf12:	bl	fd40 <__match>
    cf16:	cmp	r0, #0
    cf18:	beq.w	cc66 <_strtod_l+0xae>
    cf1c:	ldr	r3, [sp, #68]	; 0x44
    cf1e:	ldr	r1, [pc, #524]	; (d12c <_strtod_l+0x574>)
    cf20:	subs	r3, #1
    cf22:	add	r0, sp, #68	; 0x44
    cf24:	str	r3, [sp, #68]	; 0x44
    cf26:	bl	fd40 <__match>
    cf2a:	cbnz	r0, cf32 <_strtod_l+0x37a>
    cf2c:	ldr	r3, [sp, #68]	; 0x44
    cf2e:	adds	r3, #1
    cf30:	str	r3, [sp, #68]	; 0x44
    cf32:	ldr.w	r9, [pc, #524]	; d140 <_strtod_l+0x588>
    cf36:	mov.w	r8, #0
    cf3a:	b.n	cc2e <_strtod_l+0x76>
    cf3c:	ldr	r0, [pc, #496]	; (d130 <_strtod_l+0x578>)
    cf3e:	bl	eb50 <nan>
    cf42:	vmov	r8, r9, d0
    cf46:	b.n	cc2e <_strtod_l+0x76>
    cf48:	vldr	s15, [sp, #28]
    cf4c:	sub.w	r2, r5, fp
    cf50:	vcvt.f64.u32	d7, s15
    cf54:	cmp	r6, #0
    cf56:	it	eq
    cf58:	moveq	r6, r3
    cf5a:	cmp	r3, #16
    cf5c:	str	r2, [sp, #24]
    cf5e:	mov	r2, r3
    cf60:	it	ge
    cf62:	movge	r2, #16
    cf64:	cmp	r3, #9
    cf66:	vmov	r8, r9, d7
    cf6a:	ble.n	cf86 <_strtod_l+0x3ce>
    cf6c:	ldr	r1, [pc, #452]	; (d134 <_strtod_l+0x57c>)
    cf6e:	vldr	s13, [sp, #20]
    cf72:	add.w	r1, r1, r2, lsl #3
    cf76:	vldr	d5, [r1, #-72]	; 0xffffffb8
    cf7a:	vcvt.f64.u32	d6, s13
    cf7e:	vfma.f64	d6, d7, d5
    cf82:	vmov	r8, r9, d6
    cf86:	cmp	r3, #15
    cf88:	bgt.n	cffa <_strtod_l+0x442>
    cf8a:	ldr	r1, [sp, #24]
    cf8c:	cmp	r1, #0
    cf8e:	beq.w	cc2e <_strtod_l+0x76>
    cf92:	ble.n	cfdc <_strtod_l+0x424>
    cf94:	cmp	r1, #22
    cf96:	bgt.n	cfb0 <_strtod_l+0x3f8>
    cf98:	ldr	r3, [pc, #408]	; (d134 <_strtod_l+0x57c>)
    cf9a:	add.w	r3, r3, r1, lsl #3
    cf9e:	vldr	d7, [r3]
    cfa2:	vmov	d6, r8, r9
    cfa6:	vmul.f64	d7, d7, d6
    cfaa:	vmov	r8, r9, d7
    cfae:	b.n	cc2e <_strtod_l+0x76>
    cfb0:	ldr	r0, [sp, #24]
    cfb2:	rsb	r1, r3, #37	; 0x25
    cfb6:	cmp	r1, r0
    cfb8:	blt.n	cffa <_strtod_l+0x442>
    cfba:	ldr	r2, [pc, #376]	; (d134 <_strtod_l+0x57c>)
    cfbc:	rsb	r3, r3, #15
    cfc0:	add.w	r1, r2, r3, lsl #3
    cfc4:	vldr	d7, [r1]
    cfc8:	vmov	d6, r8, r9
    cfcc:	subs	r3, r0, r3
    cfce:	add.w	r2, r2, r3, lsl #3
    cfd2:	vmul.f64	d7, d7, d6
    cfd6:	vldr	d6, [r2]
    cfda:	b.n	cfa6 <_strtod_l+0x3ee>
    cfdc:	ldr	r1, [sp, #24]
    cfde:	adds	r1, #22
    cfe0:	blt.n	cffa <_strtod_l+0x442>
    cfe2:	ldr	r3, [pc, #336]	; (d134 <_strtod_l+0x57c>)
    cfe4:	sub.w	r5, fp, r5
    cfe8:	add.w	r5, r3, r5, lsl #3
    cfec:	vldr	d7, [r5]
    cff0:	vmov	d6, r8, r9
    cff4:	vdiv.f64	d7, d6, d7
    cff8:	b.n	cfaa <_strtod_l+0x3f2>
    cffa:	ldr	r1, [sp, #24]
    cffc:	subs	r2, r3, r2
    cffe:	add	r2, r1
    d000:	cmp	r2, #0
    d002:	ble.n	d0e2 <_strtod_l+0x52a>
    d004:	ands.w	r0, r2, #15
    d008:	beq.n	d020 <_strtod_l+0x468>
    d00a:	ldr	r1, [pc, #296]	; (d134 <_strtod_l+0x57c>)
    d00c:	add.w	r1, r1, r0, lsl #3
    d010:	vldr	d7, [r1]
    d014:	vmov	d6, r8, r9
    d018:	vmul.f64	d7, d7, d6
    d01c:	vmov	r8, r9, d7
    d020:	bics.w	r2, r2, #15
    d024:	beq.n	d0c4 <_strtod_l+0x50c>
    d026:	cmp.w	r2, #308	; 0x134
    d02a:	ble.n	d072 <_strtod_l+0x4ba>
    d02c:	movs	r5, #0
    d02e:	mov	r6, r5
    d030:	str	r5, [sp, #28]
    d032:	mov	r7, r5
    d034:	movs	r3, #34	; 0x22
    d036:	ldr.w	r9, [pc, #264]	; d140 <_strtod_l+0x588>
    d03a:	str	r3, [r4, #0]
    d03c:	mov.w	r8, #0
    d040:	ldr	r3, [sp, #28]
    d042:	cmp	r3, #0
    d044:	beq.w	cc2e <_strtod_l+0x76>
    d048:	ldr	r1, [sp, #72]	; 0x48
    d04a:	mov	r0, r4
    d04c:	bl	ff44 <_Bfree>
    d050:	mov	r1, r7
    d052:	mov	r0, r4
    d054:	bl	ff44 <_Bfree>
    d058:	mov	r1, r6
    d05a:	mov	r0, r4
    d05c:	bl	ff44 <_Bfree>
    d060:	ldr	r1, [sp, #28]
    d062:	mov	r0, r4
    d064:	bl	ff44 <_Bfree>
    d068:	mov	r1, r5
    d06a:	mov	r0, r4
    d06c:	bl	ff44 <_Bfree>
    d070:	b.n	cc2e <_strtod_l+0x76>
    d072:	movs	r0, #0
    d074:	vmov	d7, r8, r9
    d078:	ldr	r7, [pc, #188]	; (d138 <_strtod_l+0x580>)
    d07a:	asrs	r2, r2, #4
    d07c:	mov	r1, r0
    d07e:	cmp	r2, #1
    d080:	bgt.n	d0ca <_strtod_l+0x512>
    d082:	cbz	r0, d088 <_strtod_l+0x4d0>
    d084:	vmov	r8, r9, d7
    d088:	ldr	r2, [pc, #172]	; (d138 <_strtod_l+0x580>)
    d08a:	ldr	r0, [pc, #176]	; (d13c <_strtod_l+0x584>)
    d08c:	add.w	r2, r2, r1, lsl #3
    d090:	vldr	d7, [r2]
    d094:	sub.w	r9, r9, #55574528	; 0x3500000
    d098:	vmov	d6, r8, r9
    d09c:	ldr	r2, [pc, #160]	; (d140 <_strtod_l+0x588>)
    d09e:	vmul.f64	d7, d7, d6
    d0a2:	vmov	r1, s15
    d0a6:	ands	r2, r1
    d0a8:	cmp	r2, r0
    d0aa:	vmov	r8, r9, d7
    d0ae:	bhi.n	d02c <_strtod_l+0x474>
    d0b0:	sub.w	r0, r0, #1048576	; 0x100000
    d0b4:	cmp	r2, r0
    d0b6:	itte	hi
    d0b8:	ldrhi.w	r9, [pc, #136]	; d144 <_strtod_l+0x58c>
    d0bc:	movhi.w	r8, #4294967295
    d0c0:	addls.w	r9, r1, #55574528	; 0x3500000
    d0c4:	movs	r2, #0
    d0c6:	str	r2, [sp, #20]
    d0c8:	b.n	d1b8 <_strtod_l+0x600>
    d0ca:	tst.w	r2, #1
    d0ce:	beq.n	d0da <_strtod_l+0x522>
    d0d0:	vldr	d6, [r7]
    d0d4:	movs	r0, #1
    d0d6:	vmul.f64	d7, d7, d6
    d0da:	adds	r1, #1
    d0dc:	asrs	r2, r2, #1
    d0de:	adds	r7, #8
    d0e0:	b.n	d07e <_strtod_l+0x4c6>
    d0e2:	beq.n	d0c4 <_strtod_l+0x50c>
    d0e4:	negs	r2, r2
    d0e6:	ands.w	r0, r2, #15
    d0ea:	beq.n	d102 <_strtod_l+0x54a>
    d0ec:	ldr	r1, [pc, #68]	; (d134 <_strtod_l+0x57c>)
    d0ee:	add.w	r1, r1, r0, lsl #3
    d0f2:	vldr	d7, [r1]
    d0f6:	vmov	d6, r8, r9
    d0fa:	vdiv.f64	d7, d6, d7
    d0fe:	vmov	r8, r9, d7
    d102:	asrs	r2, r2, #4
    d104:	beq.n	d0c4 <_strtod_l+0x50c>
    d106:	cmp	r2, #31
    d108:	ble.n	d148 <_strtod_l+0x590>
    d10a:	movs	r5, #0
    d10c:	mov	r6, r5
    d10e:	str	r5, [sp, #28]
    d110:	mov	r7, r5
    d112:	movs	r3, #34	; 0x22
    d114:	mov.w	r8, #0
    d118:	mov.w	r9, #0
    d11c:	str	r3, [r4, #0]
    d11e:	b.n	d040 <_strtod_l+0x488>
    d120:	.word	0x20001b28
    d124:	.word	0x20000914
    d128:	.word	0x20001092
    d12c:	.word	0x2000123a
    d130:	.word	0x20000d00
    d134:	.word	0x20000328
    d138:	.word	0x20000300
    d13c:	.word	0x7ca00000
    d140:	.word	0x7ff00000
    d144:	.word	0x7fefffff
    d148:	ands.w	r1, r2, #16
    d14c:	it	ne
    d14e:	movne	r1, #106	; 0x6a
    d150:	str	r1, [sp, #20]
    d152:	vmov	d7, r8, r9
    d156:	ldr	r1, [pc, #760]	; (d450 <_strtod_l+0x898>)
    d158:	movs	r0, #0
    d15a:	lsls	r7, r2, #31
    d15c:	bpl.n	d168 <_strtod_l+0x5b0>
    d15e:	vldr	d6, [r1]
    d162:	movs	r0, #1
    d164:	vmul.f64	d7, d7, d6
    d168:	asrs	r2, r2, #1
    d16a:	add.w	r1, r1, #8
    d16e:	bne.n	d15a <_strtod_l+0x5a2>
    d170:	cbz	r0, d176 <_strtod_l+0x5be>
    d172:	vmov	r8, r9, d7
    d176:	ldr	r2, [sp, #20]
    d178:	cbz	r2, d1aa <_strtod_l+0x5f2>
    d17a:	ubfx	r1, r9, #20, #11
    d17e:	rsb	r2, r1, #107	; 0x6b
    d182:	cmp	r2, #0
    d184:	mov	r0, r9
    d186:	ble.n	d1aa <_strtod_l+0x5f2>
    d188:	cmp	r2, #31
    d18a:	ble.w	d3e6 <_strtod_l+0x82e>
    d18e:	cmp	r2, #52	; 0x34
    d190:	ittt	le
    d192:	movle.w	r2, #4294967295
    d196:	rsble	r1, r1, #75	; 0x4b
    d19a:	lslle	r2, r1
    d19c:	mov.w	r8, #0
    d1a0:	ite	gt
    d1a2:	movgt.w	r9, #57671680	; 0x3700000
    d1a6:	andle.w	r9, r2, r0
    d1aa:	vmov	d7, r8, r9
    d1ae:	vcmp.f64	d7, #0.0
    d1b2:	vmrs	APSR_nzcv, fpscr
    d1b6:	beq.n	d10a <_strtod_l+0x552>
    d1b8:	ldr	r2, [sp, #28]
    d1ba:	str	r2, [sp, #0]
    d1bc:	ldr	r1, [sp, #36]	; 0x24
    d1be:	mov	r2, r6
    d1c0:	mov	r0, r4
    d1c2:	bl	10014 <__s2b>
    d1c6:	str	r0, [sp, #28]
    d1c8:	cmp	r0, #0
    d1ca:	beq.w	d02c <_strtod_l+0x474>
    d1ce:	ldr	r2, [sp, #24]
    d1d0:	cmp	r2, #0
    d1d2:	sub.w	r3, fp, r5
    d1d6:	vldr	d9, [pc, #600]	; d430 <_strtod_l+0x878>
    d1da:	it	ge
    d1dc:	movge	r3, #0
    d1de:	vldr	d10, [pc, #600]	; d438 <_strtod_l+0x880>
    d1e2:	vldr	d11, [pc, #604]	; d440 <_strtod_l+0x888>
    d1e6:	str	r3, [sp, #36]	; 0x24
    d1e8:	movs	r5, #0
    d1ea:	bic.w	r3, r2, r2, asr #31
    d1ee:	str	r3, [sp, #48]	; 0x30
    d1f0:	mov	r6, r5
    d1f2:	ldr	r3, [sp, #28]
    d1f4:	mov	r0, r4
    d1f6:	ldr	r1, [r3, #4]
    d1f8:	bl	fec4 <_Balloc>
    d1fc:	mov	r7, r0
    d1fe:	cmp	r0, #0
    d200:	beq.w	d034 <_strtod_l+0x47c>
    d204:	ldr	r3, [sp, #28]
    d206:	ldr	r2, [r3, #16]
    d208:	adds	r2, #2
    d20a:	add.w	r1, r3, #12
    d20e:	lsls	r2, r2, #2
    d210:	adds	r0, #12
    d212:	bl	9f88 <memcpy>
    d216:	vmov	d0, r8, r9
    d21a:	add	r2, sp, #80	; 0x50
    d21c:	add	r1, sp, #76	; 0x4c
    d21e:	mov	r0, r4
    d220:	bl	1067c <__d2b>
    d224:	vmov	d8, r8, r9
    d228:	str	r0, [sp, #72]	; 0x48
    d22a:	cmp	r0, #0
    d22c:	beq.w	d034 <_strtod_l+0x47c>
    d230:	movs	r1, #1
    d232:	mov	r0, r4
    d234:	bl	10144 <__i2b>
    d238:	mov	r6, r0
    d23a:	cmp	r0, #0
    d23c:	beq.w	d034 <_strtod_l+0x47c>
    d240:	ldr	r3, [sp, #76]	; 0x4c
    d242:	ldr	r1, [sp, #80]	; 0x50
    d244:	cmp	r3, #0
    d246:	itete	ge
    d248:	ldrge	r2, [sp, #36]	; 0x24
    d24a:	ldrlt	r2, [sp, #48]	; 0x30
    d24c:	ldrge.w	sl, [sp, #48]	; 0x30
    d250:	ldrlt.w	fp, [sp, #36]	; 0x24
    d254:	ite	ge
    d256:	addge.w	fp, r3, r2
    d25a:	sublt.w	sl, r2, r3
    d25e:	ldr	r2, [sp, #20]
    d260:	subs	r3, r3, r2
    d262:	add	r3, r1
    d264:	ldr	r2, [pc, #492]	; (d454 <_strtod_l+0x89c>)
    d266:	subs	r3, #1
    d268:	cmp	r3, r2
    d26a:	rsb	r1, r1, #54	; 0x36
    d26e:	bge.w	d40c <_strtod_l+0x854>
    d272:	subs	r2, r2, r3
    d274:	cmp	r2, #31
    d276:	sub.w	r1, r1, r2
    d27a:	mov.w	r0, #1
    d27e:	bgt.w	d3f4 <_strtod_l+0x83c>
    d282:	lsl.w	r3, r0, r2
    d286:	str	r3, [sp, #44]	; 0x2c
    d288:	movs	r3, #0
    d28a:	str	r3, [sp, #40]	; 0x28
    d28c:	add.w	r3, fp, r1
    d290:	ldr	r2, [sp, #20]
    d292:	cmp	fp, r3
    d294:	add	sl, r1
    d296:	add	sl, r2
    d298:	mov	r2, fp
    d29a:	it	ge
    d29c:	movge	r2, r3
    d29e:	cmp	r2, sl
    d2a0:	it	ge
    d2a2:	movge	r2, sl
    d2a4:	cmp	r2, #0
    d2a6:	ittt	gt
    d2a8:	subgt	r3, r3, r2
    d2aa:	subgt.w	sl, sl, r2
    d2ae:	subgt.w	fp, fp, r2
    d2b2:	ldr	r2, [sp, #36]	; 0x24
    d2b4:	cmp	r2, #0
    d2b6:	ble.n	d2ea <_strtod_l+0x732>
    d2b8:	mov	r1, r6
    d2ba:	mov	r0, r4
    d2bc:	str	r3, [sp, #60]	; 0x3c
    d2be:	bl	102c4 <__pow5mult>
    d2c2:	mov	r6, r0
    d2c4:	cmp	r0, #0
    d2c6:	beq.w	d034 <_strtod_l+0x47c>
    d2ca:	mov	r1, r0
    d2cc:	ldr	r2, [sp, #72]	; 0x48
    d2ce:	mov	r0, r4
    d2d0:	bl	10170 <__multiply>
    d2d4:	str	r0, [sp, #56]	; 0x38
    d2d6:	cmp	r0, #0
    d2d8:	beq.w	d034 <_strtod_l+0x47c>
    d2dc:	ldr	r1, [sp, #72]	; 0x48
    d2de:	mov	r0, r4
    d2e0:	bl	ff44 <_Bfree>
    d2e4:	ldr	r2, [sp, #56]	; 0x38
    d2e6:	ldr	r3, [sp, #60]	; 0x3c
    d2e8:	str	r2, [sp, #72]	; 0x48
    d2ea:	cmp	r3, #0
    d2ec:	bgt.w	d416 <_strtod_l+0x85e>
    d2f0:	ldr	r3, [sp, #24]
    d2f2:	cmp	r3, #0
    d2f4:	ble.n	d308 <_strtod_l+0x750>
    d2f6:	mov	r1, r7
    d2f8:	ldr	r2, [sp, #48]	; 0x30
    d2fa:	mov	r0, r4
    d2fc:	bl	102c4 <__pow5mult>
    d300:	mov	r7, r0
    d302:	cmp	r0, #0
    d304:	beq.w	d034 <_strtod_l+0x47c>
    d308:	cmp.w	sl, #0
    d30c:	ble.n	d320 <_strtod_l+0x768>
    d30e:	mov	r1, r7
    d310:	mov	r2, sl
    d312:	mov	r0, r4
    d314:	bl	10378 <__lshift>
    d318:	mov	r7, r0
    d31a:	cmp	r0, #0
    d31c:	beq.w	d034 <_strtod_l+0x47c>
    d320:	cmp.w	fp, #0
    d324:	ble.n	d338 <_strtod_l+0x780>
    d326:	mov	r1, r6
    d328:	mov	r2, fp
    d32a:	mov	r0, r4
    d32c:	bl	10378 <__lshift>
    d330:	mov	r6, r0
    d332:	cmp	r0, #0
    d334:	beq.w	d034 <_strtod_l+0x47c>
    d338:	ldr	r1, [sp, #72]	; 0x48
    d33a:	mov	r2, r7
    d33c:	mov	r0, r4
    d33e:	bl	10488 <__mdiff>
    d342:	mov	r5, r0
    d344:	cmp	r0, #0
    d346:	beq.w	d034 <_strtod_l+0x47c>
    d34a:	movs	r3, #0
    d34c:	ldr.w	sl, [r0, #12]
    d350:	str	r3, [r0, #12]
    d352:	mov	r1, r6
    d354:	bl	10450 <__mcmp>
    d358:	cmp	r0, #0
    d35a:	bge.n	d45c <_strtod_l+0x8a4>
    d35c:	orrs.w	sl, sl, r8
    d360:	bne.w	d4ae <_strtod_l+0x8f6>
    d364:	ubfx	r3, r9, #0, #20
    d368:	cmp	r3, #0
    d36a:	bne.w	d4ae <_strtod_l+0x8f6>
    d36e:	bic.w	r3, r9, #2147483648	; 0x80000000
    d372:	lsrs	r3, r3, #20
    d374:	lsls	r3, r3, #20
    d376:	cmp.w	r3, #112197632	; 0x6b00000
    d37a:	bls.w	d4ae <_strtod_l+0x8f6>
    d37e:	ldr	r3, [r5, #20]
    d380:	cbnz	r3, d38a <_strtod_l+0x7d2>
    d382:	ldr	r3, [r5, #16]
    d384:	cmp	r3, #1
    d386:	ble.w	d4ae <_strtod_l+0x8f6>
    d38a:	mov	r1, r5
    d38c:	movs	r2, #1
    d38e:	mov	r0, r4
    d390:	bl	10378 <__lshift>
    d394:	mov	r1, r6
    d396:	mov	r5, r0
    d398:	bl	10450 <__mcmp>
    d39c:	cmp	r0, #0
    d39e:	ble.w	d4ae <_strtod_l+0x8f6>
    d3a2:	ldr	r1, [sp, #20]
    d3a4:	ldr	r2, [pc, #176]	; (d458 <_strtod_l+0x8a0>)
    d3a6:	mov	r3, r9
    d3a8:	cmp	r1, #0
    d3aa:	beq.w	d4ec <_strtod_l+0x934>
    d3ae:	and.w	r1, r2, r9
    d3b2:	cmp.w	r1, #112197632	; 0x6b00000
    d3b6:	bgt.w	d4ec <_strtod_l+0x934>
    d3ba:	cmp.w	r1, #57671680	; 0x3700000
    d3be:	ble.w	d112 <_strtod_l+0x55a>
    d3c2:	vldr	d7, [pc, #132]	; d448 <_strtod_l+0x890>
    d3c6:	vmov	d6, r8, r9
    d3ca:	ldr	r3, [pc, #140]	; (d458 <_strtod_l+0x8a0>)
    d3cc:	vmul.f64	d7, d6, d7
    d3d0:	vmov	r2, s15
    d3d4:	ands	r3, r2
    d3d6:	vmov	r8, r9, d7
    d3da:	cmp	r3, #0
    d3dc:	bne.w	d048 <_strtod_l+0x490>
    d3e0:	movs	r3, #34	; 0x22
    d3e2:	str	r3, [r4, #0]
    d3e4:	b.n	d048 <_strtod_l+0x490>
    d3e6:	mov.w	r1, #4294967295
    d3ea:	lsl.w	r2, r1, r2
    d3ee:	and.w	r8, r2, r8
    d3f2:	b.n	d1aa <_strtod_l+0x5f2>
    d3f4:	rsb	r3, r3, #4278190080	; 0xff000000
    d3f8:	add.w	r3, r3, #16711680	; 0xff0000
    d3fc:	add.w	r3, r3, #64256	; 0xfb00
    d400:	adds	r3, #226	; 0xe2
    d402:	lsl.w	r3, r0, r3
    d406:	strd	r3, r0, [sp, #40]	; 0x28
    d40a:	b.n	d28c <_strtod_l+0x6d4>
    d40c:	movs	r2, #0
    d40e:	movs	r3, #1
    d410:	strd	r2, r3, [sp, #40]	; 0x28
    d414:	b.n	d28c <_strtod_l+0x6d4>
    d416:	ldr	r1, [sp, #72]	; 0x48
    d418:	mov	r2, r3
    d41a:	mov	r0, r4
    d41c:	bl	10378 <__lshift>
    d420:	str	r0, [sp, #72]	; 0x48
    d422:	cmp	r0, #0
    d424:	bne.w	d2f0 <_strtod_l+0x738>
    d428:	b.n	d034 <_strtod_l+0x47c>
    d42a:	nop
    d42c:	nop.w
    d430:	.word	0x94a03595
    d434:	.word	0x3fcfffff
    d438:	.word	0x94a03595
    d43c:	.word	0x3fdfffff
    d440:	.word	0x35afe535
    d444:	.word	0x3fe00000
    d448:	.word	0x00000000
    d44c:	.word	0x39500000
    d450:	.word	0x200003f0
    d454:	.word	0xfffffc02
    d458:	.word	0x7ff00000
    d45c:	mov	fp, r9
    d45e:	bne.n	d520 <_strtod_l+0x968>
    d460:	ubfx	r3, r9, #0, #20
    d464:	cmp.w	sl, #0
    d468:	beq.n	d4c0 <_strtod_l+0x908>
    d46a:	ldr	r2, [pc, #668]	; (d708 <_strtod_l+0xb50>)
    d46c:	cmp	r3, r2
    d46e:	bne.n	d4c8 <_strtod_l+0x910>
    d470:	ldr	r3, [sp, #20]
    d472:	mov	r2, r8
    d474:	cbz	r3, d4b6 <_strtod_l+0x8fe>
    d476:	ldr	r3, [pc, #660]	; (d70c <_strtod_l+0xb54>)
    d478:	and.w	r3, r9, r3
    d47c:	cmp.w	r3, #111149056	; 0x6a00000
    d480:	mov.w	r1, #4294967295
    d484:	bhi.n	d4bc <_strtod_l+0x904>
    d486:	lsrs	r3, r3, #20
    d488:	rsb	r3, r3, #107	; 0x6b
    d48c:	lsl.w	r3, r1, r3
    d490:	cmp	r2, r3
    d492:	bne.n	d4c8 <_strtod_l+0x910>
    d494:	ldr	r3, [pc, #632]	; (d710 <_strtod_l+0xb58>)
    d496:	cmp	fp, r3
    d498:	bne.n	d4a0 <_strtod_l+0x8e8>
    d49a:	adds	r2, #1
    d49c:	beq.w	d034 <_strtod_l+0x47c>
    d4a0:	ldr	r3, [pc, #616]	; (d70c <_strtod_l+0xb54>)
    d4a2:	and.w	r3, fp, r3
    d4a6:	add.w	r9, r3, #1048576	; 0x100000
    d4aa:	mov.w	r8, #0
    d4ae:	ldr	r3, [sp, #20]
    d4b0:	cmp	r3, #0
    d4b2:	bne.n	d3c2 <_strtod_l+0x80a>
    d4b4:	b.n	d048 <_strtod_l+0x490>
    d4b6:	mov.w	r3, #4294967295
    d4ba:	b.n	d490 <_strtod_l+0x8d8>
    d4bc:	mov	r3, r1
    d4be:	b.n	d490 <_strtod_l+0x8d8>
    d4c0:	orrs.w	r3, r3, r8
    d4c4:	beq.w	d3a2 <_strtod_l+0x7ea>
    d4c8:	ldr	r3, [sp, #40]	; 0x28
    d4ca:	cbz	r3, d500 <_strtod_l+0x948>
    d4cc:	tst.w	r3, fp
    d4d0:	beq.n	d4ae <_strtod_l+0x8f6>
    d4d2:	ldr	r2, [sp, #20]
    d4d4:	mov	r0, r8
    d4d6:	mov	r1, r9
    d4d8:	cmp.w	sl, #0
    d4dc:	beq.n	d508 <_strtod_l+0x950>
    d4de:	bl	cb82 <sulp>
    d4e2:	vadd.f64	d7, d8, d0
    d4e6:	vmov	r8, r9, d7
    d4ea:	b.n	d4ae <_strtod_l+0x8f6>
    d4ec:	ands	r3, r2
    d4ee:	sub.w	r3, r3, #1048576	; 0x100000
    d4f2:	mvn.w	r9, r3, lsr #20
    d4f6:	mvn.w	r9, r9, lsl #20
    d4fa:	mov.w	r8, #4294967295
    d4fe:	b.n	d4ae <_strtod_l+0x8f6>
    d500:	ldr	r3, [sp, #44]	; 0x2c
    d502:	tst.w	r3, r8
    d506:	b.n	d4d0 <_strtod_l+0x918>
    d508:	bl	cb82 <sulp>
    d50c:	vsub.f64	d0, d8, d0
    d510:	vcmp.f64	d0, #0.0
    d514:	vmrs	APSR_nzcv, fpscr
    d518:	vmov	r8, r9, d0
    d51c:	bne.n	d4ae <_strtod_l+0x8f6>
    d51e:	b.n	d112 <_strtod_l+0x55a>
    d520:	mov	r1, r6
    d522:	mov	r0, r5
    d524:	bl	10730 <__ratio>
    d528:	vmov.f64	d7, #0	; 0x40000000  2.0
    d52c:	vcmpe.f64	d0, d7
    d530:	vmrs	APSR_nzcv, fpscr
    d534:	bhi.n	d5f6 <_strtod_l+0xa3e>
    d536:	cmp.w	sl, #0
    d53a:	bne.n	d60a <_strtod_l+0xa52>
    d53c:	cmp.w	r8, #0
    d540:	bne.n	d5de <_strtod_l+0xa26>
    d542:	ubfx	r3, r9, #0, #20
    d546:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d54a:	cmp	r3, #0
    d54c:	bne.n	d614 <_strtod_l+0xa5c>
    d54e:	vcmpe.f64	d0, d13
    d552:	vmov.f64	d13, #96	; 0x3f000000  0.5
    d556:	vmrs	APSR_nzcv, fpscr
    d55a:	bmi.n	d560 <_strtod_l+0x9a8>
    d55c:	vmul.f64	d13, d0, d13
    d560:	vneg.f64	d12, d13
    d564:	ldr	r0, [pc, #420]	; (d70c <_strtod_l+0xb54>)
    d566:	ldr.w	ip, [pc, #432]	; d718 <_strtod_l+0xb60>
    d56a:	and.w	r1, fp, r0
    d56e:	cmp	r1, ip
    d570:	vmov	r2, r3, d12
    d574:	bne.n	d66c <_strtod_l+0xab4>
    d576:	sub.w	r9, fp, #55574528	; 0x3500000
    d57a:	vmov	d0, r8, r9
    d57e:	str	r1, [sp, #40]	; 0x28
    d580:	bl	1059c <__ulp>
    d584:	vmov	d14, r8, r9
    d588:	ldr	r0, [pc, #384]	; (d70c <_strtod_l+0xb54>)
    d58a:	vfma.f64	d14, d0, d12
    d58e:	vmov	r3, s29
    d592:	ldr	r2, [pc, #384]	; (d714 <_strtod_l+0xb5c>)
    d594:	ldr	r1, [sp, #40]	; 0x28
    d596:	ands	r0, r3
    d598:	cmp	r0, r2
    d59a:	vmov	r8, r9, d14
    d59e:	bls.n	d61a <_strtod_l+0xa62>
    d5a0:	vmov	r2, s17
    d5a4:	ldr	r3, [pc, #360]	; (d710 <_strtod_l+0xb58>)
    d5a6:	cmp	r2, r3
    d5a8:	bne.n	d5b4 <_strtod_l+0x9fc>
    d5aa:	vmov	r3, s16
    d5ae:	adds	r3, #1
    d5b0:	beq.w	d034 <_strtod_l+0x47c>
    d5b4:	ldr.w	r9, [pc, #344]	; d710 <_strtod_l+0xb58>
    d5b8:	mov.w	r8, #4294967295
    d5bc:	ldr	r1, [sp, #72]	; 0x48
    d5be:	mov	r0, r4
    d5c0:	bl	ff44 <_Bfree>
    d5c4:	mov	r1, r7
    d5c6:	mov	r0, r4
    d5c8:	bl	ff44 <_Bfree>
    d5cc:	mov	r1, r6
    d5ce:	mov	r0, r4
    d5d0:	bl	ff44 <_Bfree>
    d5d4:	mov	r1, r5
    d5d6:	mov	r0, r4
    d5d8:	bl	ff44 <_Bfree>
    d5dc:	b.n	d1f2 <_strtod_l+0x63a>
    d5de:	cmp.w	r8, #1
    d5e2:	bne.n	d5ec <_strtod_l+0xa34>
    d5e4:	cmp.w	r9, #0
    d5e8:	beq.w	d112 <_strtod_l+0x55a>
    d5ec:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    d5f0:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d5f4:	b.n	d564 <_strtod_l+0x9ac>
    d5f6:	vmov.f64	d13, #96	; 0x3f000000  0.5
    d5fa:	vmul.f64	d13, d0, d13
    d5fe:	cmp.w	sl, #0
    d602:	beq.n	d560 <_strtod_l+0x9a8>
    d604:	vmov.f64	d12, d13
    d608:	b.n	d564 <_strtod_l+0x9ac>
    d60a:	vmov.f64	d12, #112	; 0x3f800000  1.0
    d60e:	vmov.f64	d13, d12
    d612:	b.n	d564 <_strtod_l+0x9ac>
    d614:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    d618:	b.n	d564 <_strtod_l+0x9ac>
    d61a:	add.w	r9, r3, #55574528	; 0x3500000
    d61e:	ldr	r3, [sp, #20]
    d620:	mov	fp, r9
    d622:	cmp	r3, #0
    d624:	bne.n	d5bc <_strtod_l+0xa04>
    d626:	bic.w	r3, r9, #2147483648	; 0x80000000
    d62a:	lsrs	r3, r3, #20
    d62c:	lsls	r3, r3, #20
    d62e:	cmp	r1, r3
    d630:	bne.n	d5bc <_strtod_l+0xa04>
    d632:	vmov	r0, r1, d13
    d636:	bl	11db4 <__aeabi_d2lz>
    d63a:	bl	11d58 <__aeabi_l2d>
    d63e:	ubfx	fp, r9, #0, #20
    d642:	vmov	d7, r0, r1
    d646:	orr.w	fp, fp, r8
    d64a:	orrs.w	fp, fp, sl
    d64e:	vsub.f64	d13, d13, d7
    d652:	beq.n	d6ce <_strtod_l+0xb16>
    d654:	vcmpe.f64	d13, d10
    d658:	vmrs	APSR_nzcv, fpscr
    d65c:	bmi.w	d048 <_strtod_l+0x490>
    d660:	vcmpe.f64	d13, d11
    d664:	vmrs	APSR_nzcv, fpscr
    d668:	ble.n	d5bc <_strtod_l+0xa04>
    d66a:	b.n	d048 <_strtod_l+0x490>
    d66c:	ldr	r0, [sp, #20]
    d66e:	cbz	r0, d6ae <_strtod_l+0xaf6>
    d670:	cmp.w	r1, #111149056	; 0x6a00000
    d674:	bhi.n	d6ae <_strtod_l+0xaf6>
    d676:	vldr	d7, [pc, #136]	; d700 <_strtod_l+0xb48>
    d67a:	vcmpe.f64	d13, d7
    d67e:	vmrs	APSR_nzcv, fpscr
    d682:	bhi.n	d6a8 <_strtod_l+0xaf0>
    d684:	vcvt.u32.f64	s26, d13
    d688:	vmov	r3, s26
    d68c:	cmp	r3, #1
    d68e:	it	cc
    d690:	movcc	r3, #1
    d692:	vmov	s26, r3
    d696:	vcvt.f64.u32	d13, s26
    d69a:	cmp.w	sl, #0
    d69e:	bne.n	d6c8 <_strtod_l+0xb10>
    d6a0:	vneg.f64	d7, d13
    d6a4:	vmov	r2, r3, d7
    d6a8:	add.w	r0, r3, #112197632	; 0x6b00000
    d6ac:	subs	r3, r0, r1
    d6ae:	vmov.f64	d0, d8
    d6b2:	vmov	d12, r2, r3
    d6b6:	str	r1, [sp, #40]	; 0x28
    d6b8:	bl	1059c <__ulp>
    d6bc:	ldr	r1, [sp, #40]	; 0x28
    d6be:	vfma.f64	d8, d12, d0
    d6c2:	vmov	r8, r9, d8
    d6c6:	b.n	d61e <_strtod_l+0xa66>
    d6c8:	vmov.f64	d7, d13
    d6cc:	b.n	d6a4 <_strtod_l+0xaec>
    d6ce:	vcmpe.f64	d13, d9
    d6d2:	vmrs	APSR_nzcv, fpscr
    d6d6:	bpl.w	d5bc <_strtod_l+0xa04>
    d6da:	b.n	d048 <_strtod_l+0x490>
    d6dc:	movs	r3, #0
    d6de:	str	r3, [sp, #32]
    d6e0:	ldr	r2, [sp, #52]	; 0x34
    d6e2:	ldr	r3, [sp, #68]	; 0x44
    d6e4:	str	r3, [r2, #0]
    d6e6:	b.w	cc36 <_strtod_l+0x7e>
    d6ea:	cmp	r2, #101	; 0x65
    d6ec:	beq.w	ce34 <_strtod_l+0x27c>
    d6f0:	cmp	r2, #69	; 0x45
    d6f2:	beq.w	ce34 <_strtod_l+0x27c>
    d6f6:	movs	r1, #1
    d6f8:	b.w	ceac <_strtod_l+0x2f4>
    d6fc:	nop.w
    d700:	.word	0xffc00000
    d704:	.word	0x41dfffff
    d708:	.word	0x000fffff
    d70c:	.word	0x7ff00000
    d710:	.word	0x7fefffff
    d714:	.word	0x7c9fffff
    d718:	.word	0x7fe00000

0000d71c <_strtod_r>:
    d71c:	ldr	r3, [pc, #4]	; (d724 <_strtod_r+0x8>)
    d71e:	b.w	cbb8 <_strtod_l>
    d722:	nop
    d724:	.word	0x20001c44

0000d728 <_strtol_l.constprop.0>:
    d728:	cmp	r3, #1
    d72a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d72e:	beq.n	d734 <_strtol_l.constprop.0+0xc>
    d730:	cmp	r3, #36	; 0x24
    d732:	bls.n	d742 <_strtol_l.constprop.0+0x1a>
    d734:	bl	ea2c <__errno>
    d738:	movs	r3, #22
    d73a:	str	r3, [r0, #0]
    d73c:	movs	r0, #0
    d73e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d742:	ldr.w	ip, [pc, #228]	; d828 <_strtol_l.constprop.0+0x100>
    d746:	mov	r5, r1
    d748:	mov	r6, r5
    d74a:	ldrb.w	r4, [r5], #1
    d74e:	ldrb.w	r7, [ip, r4]
    d752:	ands.w	r7, r7, #8
    d756:	bne.n	d748 <_strtol_l.constprop.0+0x20>
    d758:	cmp	r4, #45	; 0x2d
    d75a:	bne.n	d7c2 <_strtol_l.constprop.0+0x9a>
    d75c:	ldrb	r4, [r5, #0]
    d75e:	movs	r7, #1
    d760:	adds	r5, r6, #2
    d762:	cmp	r3, #0
    d764:	beq.n	d81e <_strtol_l.constprop.0+0xf6>
    d766:	cmp	r3, #16
    d768:	bne.n	d77e <_strtol_l.constprop.0+0x56>
    d76a:	cmp	r4, #48	; 0x30
    d76c:	bne.n	d77e <_strtol_l.constprop.0+0x56>
    d76e:	ldrb	r4, [r5, #0]
    d770:	and.w	r4, r4, #223	; 0xdf
    d774:	cmp	r4, #88	; 0x58
    d776:	bne.n	d814 <_strtol_l.constprop.0+0xec>
    d778:	ldrb	r4, [r5, #1]
    d77a:	movs	r3, #16
    d77c:	adds	r5, #2
    d77e:	add.w	r8, r7, #2147483648	; 0x80000000
    d782:	add.w	r8, r8, #4294967295
    d786:	mov.w	lr, #0
    d78a:	udiv	r9, r8, r3
    d78e:	mov	r6, lr
    d790:	mls	sl, r3, r9, r8
    d794:	sub.w	ip, r4, #48	; 0x30
    d798:	cmp.w	ip, #9
    d79c:	bhi.n	d7cc <_strtol_l.constprop.0+0xa4>
    d79e:	mov	r4, ip
    d7a0:	cmp	r3, r4
    d7a2:	ble.n	d7ee <_strtol_l.constprop.0+0xc6>
    d7a4:	cmp.w	lr, #4294967295
    d7a8:	beq.n	d7bc <_strtol_l.constprop.0+0x94>
    d7aa:	cmp	r9, r6
    d7ac:	bcc.n	d7e8 <_strtol_l.constprop.0+0xc0>
    d7ae:	bne.n	d7b4 <_strtol_l.constprop.0+0x8c>
    d7b0:	cmp	sl, r4
    d7b2:	blt.n	d7e8 <_strtol_l.constprop.0+0xc0>
    d7b4:	mla	r6, r6, r3, r4
    d7b8:	mov.w	lr, #1
    d7bc:	ldrb.w	r4, [r5], #1
    d7c0:	b.n	d794 <_strtol_l.constprop.0+0x6c>
    d7c2:	cmp	r4, #43	; 0x2b
    d7c4:	itt	eq
    d7c6:	ldrbeq	r4, [r5, #0]
    d7c8:	addeq	r5, r6, #2
    d7ca:	b.n	d762 <_strtol_l.constprop.0+0x3a>
    d7cc:	sub.w	ip, r4, #65	; 0x41
    d7d0:	cmp.w	ip, #25
    d7d4:	bhi.n	d7da <_strtol_l.constprop.0+0xb2>
    d7d6:	subs	r4, #55	; 0x37
    d7d8:	b.n	d7a0 <_strtol_l.constprop.0+0x78>
    d7da:	sub.w	ip, r4, #97	; 0x61
    d7de:	cmp.w	ip, #25
    d7e2:	bhi.n	d7ee <_strtol_l.constprop.0+0xc6>
    d7e4:	subs	r4, #87	; 0x57
    d7e6:	b.n	d7a0 <_strtol_l.constprop.0+0x78>
    d7e8:	mov.w	lr, #4294967295
    d7ec:	b.n	d7bc <_strtol_l.constprop.0+0x94>
    d7ee:	cmp.w	lr, #4294967295
    d7f2:	bne.n	d800 <_strtol_l.constprop.0+0xd8>
    d7f4:	movs	r3, #34	; 0x22
    d7f6:	str	r3, [r0, #0]
    d7f8:	mov	r6, r8
    d7fa:	cbnz	r2, d80e <_strtol_l.constprop.0+0xe6>
    d7fc:	mov	r0, r6
    d7fe:	b.n	d73e <_strtol_l.constprop.0+0x16>
    d800:	cbz	r7, d804 <_strtol_l.constprop.0+0xdc>
    d802:	negs	r6, r6
    d804:	cmp	r2, #0
    d806:	beq.n	d7fc <_strtol_l.constprop.0+0xd4>
    d808:	cmp.w	lr, #0
    d80c:	beq.n	d810 <_strtol_l.constprop.0+0xe8>
    d80e:	subs	r1, r5, #1
    d810:	str	r1, [r2, #0]
    d812:	b.n	d7fc <_strtol_l.constprop.0+0xd4>
    d814:	movs	r4, #48	; 0x30
    d816:	cmp	r3, #0
    d818:	bne.n	d77e <_strtol_l.constprop.0+0x56>
    d81a:	movs	r3, #8
    d81c:	b.n	d77e <_strtol_l.constprop.0+0x56>
    d81e:	cmp	r4, #48	; 0x30
    d820:	beq.n	d76e <_strtol_l.constprop.0+0x46>
    d822:	movs	r3, #10
    d824:	b.n	d77e <_strtol_l.constprop.0+0x56>
    d826:	nop
    d828:	.word	0x20001137

0000d82c <_strtol_r>:
    d82c:	b.w	d728 <_strtol_l.constprop.0>

0000d830 <__cxa_atexit>:
    d830:	push	{r4, lr}
    d832:	ldr	r4, [pc, #20]	; (d848 <__cxa_atexit+0x18>)
    d834:	mov	r3, r2
    d836:	cbz	r4, d844 <__cxa_atexit+0x14>
    d838:	mov	r2, r1
    d83a:	mov	r1, r0
    d83c:	movs	r0, #2
    d83e:	nop.w
    d842:	pop	{r4, pc}
    d844:	mov	r0, r4
    d846:	b.n	d842 <__cxa_atexit+0x12>
    d848:	.word	0x00000000

0000d84c <fcvt>:
    d84c:	movs	r3, #0
    d84e:	b.w	10844 <fcvtbuf>

0000d852 <fcvtf>:
    d852:	vcvt.f64.f32	d0, s0
    d856:	b.w	d84c <fcvt>

0000d85a <__cvt>:
    d85a:	push	{r4, r5, r6, r7, lr}
    d85c:	vpush	{d8}
    d860:	vmov.f64	d8, d0
    d864:	sub	sp, #20
    d866:	mov	r7, r2
    d868:	ldr	r5, [sp, #52]	; 0x34
    d86a:	ldr	r6, [sp, #48]	; 0x30
    d86c:	vmov	r2, s17
    d870:	bic.w	r5, r5, #32
    d874:	cmp	r2, #0
    d876:	itet	lt
    d878:	movlt	r2, #45	; 0x2d
    d87a:	movge	r2, #0
    d87c:	vneglt.f64	d8, d0
    d880:	cmp	r5, #70	; 0x46
    d882:	mov	r4, r1
    d884:	strb	r2, [r3, #0]
    d886:	beq.n	d892 <__cvt+0x38>
    d888:	cmp	r5, #69	; 0x45
    d88a:	bne.n	d88e <__cvt+0x34>
    d88c:	adds	r4, #1
    d88e:	movs	r1, #2
    d890:	b.n	d894 <__cvt+0x3a>
    d892:	movs	r1, #3
    d894:	add	r3, sp, #12
    d896:	str	r3, [sp, #4]
    d898:	add	r3, sp, #8
    d89a:	str	r3, [sp, #0]
    d89c:	mov	r2, r4
    d89e:	mov	r3, r6
    d8a0:	vmov.f64	d0, d8
    d8a4:	bl	ec80 <_dtoa_r>
    d8a8:	cmp	r5, #71	; 0x47
    d8aa:	bne.n	d8b0 <__cvt+0x56>
    d8ac:	lsls	r3, r7, #31
    d8ae:	bpl.n	d8e6 <__cvt+0x8c>
    d8b0:	cmp	r5, #70	; 0x46
    d8b2:	add.w	r2, r0, r4
    d8b6:	bne.n	d8d2 <__cvt+0x78>
    d8b8:	ldrb	r3, [r0, #0]
    d8ba:	cmp	r3, #48	; 0x30
    d8bc:	bne.n	d8ce <__cvt+0x74>
    d8be:	vcmp.f64	d8, #0.0
    d8c2:	vmrs	APSR_nzcv, fpscr
    d8c6:	itt	ne
    d8c8:	rsbne	r4, r4, #1
    d8cc:	strne	r4, [r6, #0]
    d8ce:	ldr	r3, [r6, #0]
    d8d0:	add	r2, r3
    d8d2:	vcmp.f64	d8, #0.0
    d8d6:	vmrs	APSR_nzcv, fpscr
    d8da:	it	eq
    d8dc:	streq	r2, [sp, #12]
    d8de:	movs	r1, #48	; 0x30
    d8e0:	ldr	r3, [sp, #12]
    d8e2:	cmp	r3, r2
    d8e4:	bcc.n	d8f6 <__cvt+0x9c>
    d8e6:	ldr	r3, [sp, #12]
    d8e8:	ldr	r2, [sp, #56]	; 0x38
    d8ea:	subs	r3, r3, r0
    d8ec:	str	r3, [r2, #0]
    d8ee:	add	sp, #20
    d8f0:	vpop	{d8}
    d8f4:	pop	{r4, r5, r6, r7, pc}
    d8f6:	adds	r4, r3, #1
    d8f8:	str	r4, [sp, #12]
    d8fa:	strb	r1, [r3, #0]
    d8fc:	b.n	d8e0 <__cvt+0x86>

0000d8fe <__exponent>:
    d8fe:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d900:	mov	r3, r0
    d902:	cmp	r1, #0
    d904:	it	lt
    d906:	neglt	r1, r1
    d908:	strb.w	r2, [r3], #2
    d90c:	ite	lt
    d90e:	movlt	r2, #45	; 0x2d
    d910:	movge	r2, #43	; 0x2b
    d912:	cmp	r1, #9
    d914:	strb	r2, [r0, #1]
    d916:	ble.n	d96e <__exponent+0x70>
    d918:	add.w	r2, sp, #7
    d91c:	mov	r7, r2
    d91e:	movs	r6, #10
    d920:	mov	ip, r2
    d922:	sdiv	r5, r1, r6
    d926:	mls	r4, r6, r5, r1
    d92a:	adds	r4, #48	; 0x30
    d92c:	strb.w	r4, [ip, #-1]
    d930:	mov	r4, r1
    d932:	cmp	r4, #99	; 0x63
    d934:	add.w	r2, r2, #4294967295
    d938:	mov	r1, r5
    d93a:	bgt.n	d920 <__exponent+0x22>
    d93c:	adds	r1, #48	; 0x30
    d93e:	sub.w	r4, ip, #2
    d942:	strb.w	r1, [r2, #-1]
    d946:	adds	r1, r0, #1
    d948:	mov	r2, r4
    d94a:	cmp	r2, r7
    d94c:	bcc.n	d964 <__exponent+0x66>
    d94e:	add.w	r2, sp, #9
    d952:	sub.w	r2, r2, ip
    d956:	cmp	r4, r7
    d958:	it	hi
    d95a:	movhi	r2, #0
    d95c:	add	r3, r2
    d95e:	subs	r0, r3, r0
    d960:	add	sp, #12
    d962:	pop	{r4, r5, r6, r7, pc}
    d964:	ldrb.w	r5, [r2], #1
    d968:	strb.w	r5, [r1, #1]!
    d96c:	b.n	d94a <__exponent+0x4c>
    d96e:	movs	r3, #48	; 0x30
    d970:	adds	r1, #48	; 0x30
    d972:	strb	r3, [r0, #2]
    d974:	strb	r1, [r0, #3]
    d976:	adds	r3, r0, #4
    d978:	b.n	d95e <__exponent+0x60>
    d97a:	movs	r0, r0
    d97c:	movs	r0, r0
	...

0000d980 <_printf_float>:
    d980:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d984:	sub	sp, #44	; 0x2c
    d986:	mov	r4, r1
    d988:	ldr.w	r8, [sp, #80]	; 0x50
    d98c:	mov	r6, r2
    d98e:	mov	r7, r3
    d990:	mov	r5, r0
    d992:	bl	e978 <_localeconv_r>
    d996:	ldr.w	fp, [r0]
    d99a:	mov	r0, fp
    d99c:	bl	eb40 <strlen>
    d9a0:	movs	r3, #0
    d9a2:	str	r3, [sp, #32]
    d9a4:	ldr.w	r3, [r8]
    d9a8:	ldrb.w	r9, [r4, #24]
    d9ac:	ldr	r2, [r4, #0]
    d9ae:	adds	r3, #7
    d9b0:	bic.w	r3, r3, #7
    d9b4:	add.w	r1, r3, #8
    d9b8:	str.w	r1, [r8]
    d9bc:	vldr	d0, [r3]
    d9c0:	vldr	d6, [pc, #604]	; dc20 <_printf_float+0x2a0>
    d9c4:	vabs.f64	d7, d0
    d9c8:	vcmp.f64	d7, d6
    d9cc:	vmrs	APSR_nzcv, fpscr
    d9d0:	vstr	d0, [r4, #72]	; 0x48
    d9d4:	mov	sl, r0
    d9d6:	ble.n	da22 <_printf_float+0xa2>
    d9d8:	vcmpe.f64	d0, #0.0
    d9dc:	vmrs	APSR_nzcv, fpscr
    d9e0:	bpl.n	d9e8 <_printf_float+0x68>
    d9e2:	movs	r3, #45	; 0x2d
    d9e4:	strb.w	r3, [r4, #67]	; 0x43
    d9e8:	ldr	r1, [pc, #572]	; (dc28 <_printf_float+0x2a8>)
    d9ea:	ldr	r3, [pc, #576]	; (dc2c <_printf_float+0x2ac>)
    d9ec:	cmp.w	r9, #71	; 0x47
    d9f0:	ite	ls
    d9f2:	movls	r8, r1
    d9f4:	movhi	r8, r3
    d9f6:	movs	r3, #3
    d9f8:	str	r3, [r4, #16]
    d9fa:	bic.w	r2, r2, #4
    d9fe:	movs	r3, #0
    da00:	str	r2, [r4, #0]
    da02:	str	r3, [sp, #16]
    da04:	str	r7, [sp, #0]
    da06:	mov	r3, r6
    da08:	add	r2, sp, #36	; 0x24
    da0a:	mov	r1, r4
    da0c:	mov	r0, r5
    da0e:	bl	ddb4 <_printf_common>
    da12:	adds	r0, #1
    da14:	bne.w	db2c <_printf_float+0x1ac>
    da18:	mov.w	r0, #4294967295
    da1c:	add	sp, #44	; 0x2c
    da1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da22:	vcmp.f64	d0, d0
    da26:	vmrs	APSR_nzcv, fpscr
    da2a:	bvc.n	da40 <_printf_float+0xc0>
    da2c:	vmov	r3, s1
    da30:	cmp	r3, #0
    da32:	itt	lt
    da34:	movlt	r3, #45	; 0x2d
    da36:	strblt.w	r3, [r4, #67]	; 0x43
    da3a:	ldr	r1, [pc, #500]	; (dc30 <_printf_float+0x2b0>)
    da3c:	ldr	r3, [pc, #500]	; (dc34 <_printf_float+0x2b4>)
    da3e:	b.n	d9ec <_printf_float+0x6c>
    da40:	ldr	r3, [r4, #4]
    da42:	and.w	r1, r9, #223	; 0xdf
    da46:	str	r1, [sp, #16]
    da48:	adds	r1, r3, #1
    da4a:	bne.n	dac6 <_printf_float+0x146>
    da4c:	movs	r3, #6
    da4e:	str	r3, [r4, #4]
    da50:	movs	r3, #0
    da52:	str	r3, [sp, #12]
    da54:	add	r3, sp, #32
    da56:	strd	r9, r3, [sp, #4]
    da5a:	orr.w	r2, r2, #1024	; 0x400
    da5e:	add	r3, sp, #28
    da60:	ldr	r1, [r4, #4]
    da62:	str	r3, [sp, #0]
    da64:	str	r2, [r4, #0]
    da66:	add.w	r3, sp, #27
    da6a:	mov	r0, r5
    da6c:	bl	d85a <__cvt>
    da70:	ldr	r3, [sp, #16]
    da72:	ldr	r1, [sp, #28]
    da74:	cmp	r3, #71	; 0x47
    da76:	mov	r8, r0
    da78:	bne.n	da8c <_printf_float+0x10c>
    da7a:	adds	r0, r1, #3
    da7c:	blt.n	da84 <_printf_float+0x104>
    da7e:	ldr	r3, [r4, #4]
    da80:	cmp	r1, r3
    da82:	ble.n	db08 <_printf_float+0x188>
    da84:	sub.w	r9, r9, #2
    da88:	uxtb.w	r9, r9
    da8c:	cmp.w	r9, #101	; 0x65
    da90:	bhi.n	dad4 <_printf_float+0x154>
    da92:	subs	r1, #1
    da94:	mov	r2, r9
    da96:	add.w	r0, r4, #80	; 0x50
    da9a:	str	r1, [sp, #28]
    da9c:	bl	d8fe <__exponent>
    daa0:	ldr	r2, [sp, #32]
    daa2:	str	r0, [sp, #16]
    daa4:	adds	r3, r2, r0
    daa6:	cmp	r2, #1
    daa8:	str	r3, [r4, #16]
    daaa:	bgt.n	dab2 <_printf_float+0x132>
    daac:	ldr	r2, [r4, #0]
    daae:	lsls	r2, r2, #31
    dab0:	bpl.n	dab6 <_printf_float+0x136>
    dab2:	adds	r3, #1
    dab4:	str	r3, [r4, #16]
    dab6:	ldrb.w	r3, [sp, #27]
    daba:	cmp	r3, #0
    dabc:	beq.n	da04 <_printf_float+0x84>
    dabe:	movs	r3, #45	; 0x2d
    dac0:	strb.w	r3, [r4, #67]	; 0x43
    dac4:	b.n	da04 <_printf_float+0x84>
    dac6:	ldr	r1, [sp, #16]
    dac8:	cmp	r1, #71	; 0x47
    daca:	bne.n	da50 <_printf_float+0xd0>
    dacc:	cmp	r3, #0
    dace:	bne.n	da50 <_printf_float+0xd0>
    dad0:	movs	r3, #1
    dad2:	b.n	da4e <_printf_float+0xce>
    dad4:	cmp.w	r9, #102	; 0x66
    dad8:	bne.n	db0c <_printf_float+0x18c>
    dada:	cmp	r1, #0
    dadc:	ldr	r3, [r4, #4]
    dade:	ble.n	daf8 <_printf_float+0x178>
    dae0:	str	r1, [r4, #16]
    dae2:	cbnz	r3, daea <_printf_float+0x16a>
    dae4:	ldr	r2, [r4, #0]
    dae6:	lsls	r0, r2, #31
    dae8:	bpl.n	daf0 <_printf_float+0x170>
    daea:	adds	r3, #1
    daec:	add	r3, r1
    daee:	str	r3, [r4, #16]
    daf0:	movs	r3, #0
    daf2:	str	r1, [r4, #88]	; 0x58
    daf4:	str	r3, [sp, #16]
    daf6:	b.n	dab6 <_printf_float+0x136>
    daf8:	cbnz	r3, db00 <_printf_float+0x180>
    dafa:	ldr	r2, [r4, #0]
    dafc:	lsls	r2, r2, #31
    dafe:	bpl.n	db04 <_printf_float+0x184>
    db00:	adds	r3, #2
    db02:	b.n	daee <_printf_float+0x16e>
    db04:	movs	r3, #1
    db06:	b.n	daee <_printf_float+0x16e>
    db08:	mov.w	r9, #103	; 0x67
    db0c:	ldr	r3, [sp, #32]
    db0e:	cmp	r1, r3
    db10:	blt.n	db1e <_printf_float+0x19e>
    db12:	ldr	r3, [r4, #0]
    db14:	str	r1, [r4, #16]
    db16:	lsls	r0, r3, #31
    db18:	bpl.n	daf0 <_printf_float+0x170>
    db1a:	adds	r3, r1, #1
    db1c:	b.n	daee <_printf_float+0x16e>
    db1e:	cmp	r1, #0
    db20:	ite	le
    db22:	rsble	r2, r1, #2
    db26:	movgt	r2, #1
    db28:	add	r3, r2
    db2a:	b.n	daee <_printf_float+0x16e>
    db2c:	ldr	r3, [r4, #0]
    db2e:	lsls	r2, r3, #21
    db30:	bmi.n	db42 <_printf_float+0x1c2>
    db32:	ldr	r3, [r4, #16]
    db34:	mov	r2, r8
    db36:	mov	r1, r6
    db38:	mov	r0, r5
    db3a:	blx	r7
    db3c:	adds	r0, #1
    db3e:	bne.n	db96 <_printf_float+0x216>
    db40:	b.n	da18 <_printf_float+0x98>
    db42:	cmp.w	r9, #101	; 0x65
    db46:	bls.w	dd0a <_printf_float+0x38a>
    db4a:	vldr	d7, [r4, #72]	; 0x48
    db4e:	vcmp.f64	d7, #0.0
    db52:	vmrs	APSR_nzcv, fpscr
    db56:	bne.n	dbc0 <_printf_float+0x240>
    db58:	ldr	r2, [pc, #220]	; (dc38 <_printf_float+0x2b8>)
    db5a:	movs	r3, #1
    db5c:	mov	r1, r6
    db5e:	mov	r0, r5
    db60:	blx	r7
    db62:	adds	r0, #1
    db64:	beq.w	da18 <_printf_float+0x98>
    db68:	ldrd	r2, r3, [sp, #28]
    db6c:	cmp	r2, r3
    db6e:	blt.n	db76 <_printf_float+0x1f6>
    db70:	ldr	r3, [r4, #0]
    db72:	lsls	r0, r3, #31
    db74:	bpl.n	db96 <_printf_float+0x216>
    db76:	mov	r3, sl
    db78:	mov	r2, fp
    db7a:	mov	r1, r6
    db7c:	mov	r0, r5
    db7e:	blx	r7
    db80:	adds	r0, #1
    db82:	beq.w	da18 <_printf_float+0x98>
    db86:	mov.w	r8, #0
    db8a:	add.w	r9, r4, #26
    db8e:	ldr	r3, [sp, #32]
    db90:	subs	r3, #1
    db92:	cmp	r3, r8
    db94:	bgt.n	dbaa <_printf_float+0x22a>
    db96:	ldr	r3, [r4, #0]
    db98:	lsls	r3, r3, #30
    db9a:	bmi.w	ddaa <_printf_float+0x42a>
    db9e:	ldr	r0, [r4, #12]
    dba0:	ldr	r3, [sp, #36]	; 0x24
    dba2:	cmp	r0, r3
    dba4:	it	lt
    dba6:	movlt	r0, r3
    dba8:	b.n	da1c <_printf_float+0x9c>
    dbaa:	movs	r3, #1
    dbac:	mov	r2, r9
    dbae:	mov	r1, r6
    dbb0:	mov	r0, r5
    dbb2:	blx	r7
    dbb4:	adds	r0, #1
    dbb6:	beq.w	da18 <_printf_float+0x98>
    dbba:	add.w	r8, r8, #1
    dbbe:	b.n	db8e <_printf_float+0x20e>
    dbc0:	ldr	r3, [sp, #28]
    dbc2:	cmp	r3, #0
    dbc4:	bgt.n	dc3c <_printf_float+0x2bc>
    dbc6:	ldr	r2, [pc, #112]	; (dc38 <_printf_float+0x2b8>)
    dbc8:	movs	r3, #1
    dbca:	mov	r1, r6
    dbcc:	mov	r0, r5
    dbce:	blx	r7
    dbd0:	adds	r0, #1
    dbd2:	beq.w	da18 <_printf_float+0x98>
    dbd6:	ldrd	r3, r2, [sp, #28]
    dbda:	orrs	r3, r2
    dbdc:	bne.n	dbe4 <_printf_float+0x264>
    dbde:	ldr	r3, [r4, #0]
    dbe0:	lsls	r1, r3, #31
    dbe2:	bpl.n	db96 <_printf_float+0x216>
    dbe4:	mov	r3, sl
    dbe6:	mov	r2, fp
    dbe8:	mov	r1, r6
    dbea:	mov	r0, r5
    dbec:	blx	r7
    dbee:	adds	r0, #1
    dbf0:	beq.w	da18 <_printf_float+0x98>
    dbf4:	mov.w	r9, #0
    dbf8:	add.w	sl, r4, #26
    dbfc:	ldr	r3, [sp, #28]
    dbfe:	negs	r3, r3
    dc00:	cmp	r3, r9
    dc02:	bgt.n	dc08 <_printf_float+0x288>
    dc04:	ldr	r3, [sp, #32]
    dc06:	b.n	db34 <_printf_float+0x1b4>
    dc08:	movs	r3, #1
    dc0a:	mov	r2, sl
    dc0c:	mov	r1, r6
    dc0e:	mov	r0, r5
    dc10:	blx	r7
    dc12:	adds	r0, #1
    dc14:	beq.w	da18 <_printf_float+0x98>
    dc18:	add.w	r9, r9, #1
    dc1c:	b.n	dbfc <_printf_float+0x27c>
    dc1e:	nop
    dc20:	.word	0xffffffff
    dc24:	.word	0x7fefffff
    dc28:	.word	0x200012c5
    dc2c:	.word	0x20001091
    dc30:	.word	0x200012c9
    dc34:	.word	0x2000108d
    dc38:	.word	0x20001059
    dc3c:	ldr	r2, [sp, #32]
    dc3e:	ldr	r3, [r4, #88]	; 0x58
    dc40:	cmp	r2, r3
    dc42:	it	ge
    dc44:	movge	r2, r3
    dc46:	cmp	r2, #0
    dc48:	mov	r9, r2
    dc4a:	bgt.n	dcbe <_printf_float+0x33e>
    dc4c:	movs	r3, #0
    dc4e:	str	r3, [sp, #20]
    dc50:	bic.w	r9, r9, r9, asr #31
    dc54:	add.w	r2, r4, #26
    dc58:	ldr	r3, [r4, #88]	; 0x58
    dc5a:	ldr	r1, [sp, #20]
    dc5c:	str	r3, [sp, #16]
    dc5e:	sub.w	r3, r3, r9
    dc62:	cmp	r3, r1
    dc64:	bgt.n	dcce <_printf_float+0x34e>
    dc66:	ldrd	r2, r3, [sp, #28]
    dc6a:	cmp	r2, r3
    dc6c:	blt.n	dce8 <_printf_float+0x368>
    dc6e:	ldr	r3, [r4, #0]
    dc70:	lsls	r2, r3, #31
    dc72:	bmi.n	dce8 <_printf_float+0x368>
    dc74:	ldrd	r3, r2, [sp, #28]
    dc78:	sub.w	r9, r2, r3
    dc7c:	ldr	r3, [sp, #16]
    dc7e:	subs	r2, r2, r3
    dc80:	cmp	r9, r2
    dc82:	it	ge
    dc84:	movge	r9, r2
    dc86:	cmp.w	r9, #0
    dc8a:	bgt.n	dcf8 <_printf_float+0x378>
    dc8c:	mov.w	r8, #0
    dc90:	bic.w	r9, r9, r9, asr #31
    dc94:	add.w	sl, r4, #26
    dc98:	ldrd	r2, r3, [sp, #28]
    dc9c:	subs	r3, r3, r2
    dc9e:	sub.w	r3, r3, r9
    dca2:	cmp	r3, r8
    dca4:	ble.w	db96 <_printf_float+0x216>
    dca8:	movs	r3, #1
    dcaa:	mov	r2, sl
    dcac:	mov	r1, r6
    dcae:	mov	r0, r5
    dcb0:	blx	r7
    dcb2:	adds	r0, #1
    dcb4:	beq.w	da18 <_printf_float+0x98>
    dcb8:	add.w	r8, r8, #1
    dcbc:	b.n	dc98 <_printf_float+0x318>
    dcbe:	mov	r3, r2
    dcc0:	mov	r1, r6
    dcc2:	mov	r2, r8
    dcc4:	mov	r0, r5
    dcc6:	blx	r7
    dcc8:	adds	r0, #1
    dcca:	bne.n	dc4c <_printf_float+0x2cc>
    dccc:	b.n	da18 <_printf_float+0x98>
    dcce:	movs	r3, #1
    dcd0:	mov	r1, r6
    dcd2:	mov	r0, r5
    dcd4:	str	r2, [sp, #16]
    dcd6:	blx	r7
    dcd8:	adds	r0, #1
    dcda:	beq.w	da18 <_printf_float+0x98>
    dcde:	ldr	r3, [sp, #20]
    dce0:	ldr	r2, [sp, #16]
    dce2:	adds	r3, #1
    dce4:	str	r3, [sp, #20]
    dce6:	b.n	dc58 <_printf_float+0x2d8>
    dce8:	mov	r3, sl
    dcea:	mov	r2, fp
    dcec:	mov	r1, r6
    dcee:	mov	r0, r5
    dcf0:	blx	r7
    dcf2:	adds	r0, #1
    dcf4:	bne.n	dc74 <_printf_float+0x2f4>
    dcf6:	b.n	da18 <_printf_float+0x98>
    dcf8:	ldr	r2, [sp, #16]
    dcfa:	mov	r3, r9
    dcfc:	add	r2, r8
    dcfe:	mov	r1, r6
    dd00:	mov	r0, r5
    dd02:	blx	r7
    dd04:	adds	r0, #1
    dd06:	bne.n	dc8c <_printf_float+0x30c>
    dd08:	b.n	da18 <_printf_float+0x98>
    dd0a:	ldr	r2, [sp, #32]
    dd0c:	cmp	r2, #1
    dd0e:	bgt.n	dd14 <_printf_float+0x394>
    dd10:	lsls	r3, r3, #31
    dd12:	bpl.n	dd84 <_printf_float+0x404>
    dd14:	movs	r3, #1
    dd16:	mov	r2, r8
    dd18:	mov	r1, r6
    dd1a:	mov	r0, r5
    dd1c:	blx	r7
    dd1e:	adds	r0, #1
    dd20:	beq.w	da18 <_printf_float+0x98>
    dd24:	mov	r3, sl
    dd26:	mov	r2, fp
    dd28:	mov	r1, r6
    dd2a:	mov	r0, r5
    dd2c:	blx	r7
    dd2e:	adds	r0, #1
    dd30:	beq.w	da18 <_printf_float+0x98>
    dd34:	vldr	d7, [r4, #72]	; 0x48
    dd38:	vcmp.f64	d7, #0.0
    dd3c:	vmrs	APSR_nzcv, fpscr
    dd40:	ldr	r3, [sp, #32]
    dd42:	beq.n	dd7a <_printf_float+0x3fa>
    dd44:	subs	r3, #1
    dd46:	add.w	r2, r8, #1
    dd4a:	mov	r1, r6
    dd4c:	mov	r0, r5
    dd4e:	blx	r7
    dd50:	adds	r0, #1
    dd52:	bne.n	dd72 <_printf_float+0x3f2>
    dd54:	b.n	da18 <_printf_float+0x98>
    dd56:	movs	r3, #1
    dd58:	mov	r2, r9
    dd5a:	mov	r1, r6
    dd5c:	mov	r0, r5
    dd5e:	blx	r7
    dd60:	adds	r0, #1
    dd62:	beq.w	da18 <_printf_float+0x98>
    dd66:	add.w	r8, r8, #1
    dd6a:	ldr	r3, [sp, #32]
    dd6c:	subs	r3, #1
    dd6e:	cmp	r3, r8
    dd70:	bgt.n	dd56 <_printf_float+0x3d6>
    dd72:	ldr	r3, [sp, #16]
    dd74:	add.w	r2, r4, #80	; 0x50
    dd78:	b.n	db36 <_printf_float+0x1b6>
    dd7a:	mov.w	r8, #0
    dd7e:	add.w	r9, r4, #26
    dd82:	b.n	dd6a <_printf_float+0x3ea>
    dd84:	movs	r3, #1
    dd86:	mov	r2, r8
    dd88:	b.n	dd4a <_printf_float+0x3ca>
    dd8a:	movs	r3, #1
    dd8c:	mov	r2, r9
    dd8e:	mov	r1, r6
    dd90:	mov	r0, r5
    dd92:	blx	r7
    dd94:	adds	r0, #1
    dd96:	beq.w	da18 <_printf_float+0x98>
    dd9a:	add.w	r8, r8, #1
    dd9e:	ldr	r3, [r4, #12]
    dda0:	ldr	r1, [sp, #36]	; 0x24
    dda2:	subs	r3, r3, r1
    dda4:	cmp	r3, r8
    dda6:	bgt.n	dd8a <_printf_float+0x40a>
    dda8:	b.n	db9e <_printf_float+0x21e>
    ddaa:	mov.w	r8, #0
    ddae:	add.w	r9, r4, #25
    ddb2:	b.n	dd9e <_printf_float+0x41e>

0000ddb4 <_printf_common>:
    ddb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ddb8:	mov	r6, r2
    ddba:	mov	r9, r3
    ddbc:	ldr	r2, [r1, #8]
    ddbe:	ldr	r3, [r1, #16]
    ddc0:	ldr.w	r8, [sp, #32]
    ddc4:	cmp	r3, r2
    ddc6:	it	lt
    ddc8:	movlt	r3, r2
    ddca:	str	r3, [r6, #0]
    ddcc:	ldrb.w	r2, [r1, #67]	; 0x43
    ddd0:	mov	r7, r0
    ddd2:	mov	r4, r1
    ddd4:	cbz	r2, ddda <_printf_common+0x26>
    ddd6:	adds	r3, #1
    ddd8:	str	r3, [r6, #0]
    ddda:	ldr	r3, [r4, #0]
    dddc:	lsls	r1, r3, #26
    ddde:	ittt	mi
    dde0:	ldrmi	r3, [r6, #0]
    dde2:	addmi	r3, #2
    dde4:	strmi	r3, [r6, #0]
    dde6:	ldr	r5, [r4, #0]
    dde8:	ands.w	r5, r5, #6
    ddec:	bne.n	ddfc <_printf_common+0x48>
    ddee:	add.w	sl, r4, #25
    ddf2:	ldr	r3, [r4, #12]
    ddf4:	ldr	r2, [r6, #0]
    ddf6:	subs	r3, r3, r2
    ddf8:	cmp	r3, r5
    ddfa:	bgt.n	de4a <_printf_common+0x96>
    ddfc:	ldrb.w	r2, [r4, #67]	; 0x43
    de00:	subs	r3, r2, #0
    de02:	ldr	r2, [r4, #0]
    de04:	it	ne
    de06:	movne	r3, #1
    de08:	lsls	r2, r2, #26
    de0a:	bmi.n	de64 <_printf_common+0xb0>
    de0c:	add.w	r2, r4, #67	; 0x43
    de10:	mov	r1, r9
    de12:	mov	r0, r7
    de14:	blx	r8
    de16:	adds	r0, #1
    de18:	beq.n	de58 <_printf_common+0xa4>
    de1a:	ldr	r3, [r4, #0]
    de1c:	ldr	r2, [r4, #16]
    de1e:	and.w	r3, r3, #6
    de22:	cmp	r3, #4
    de24:	ittt	eq
    de26:	ldreq	r5, [r4, #12]
    de28:	ldreq	r3, [r6, #0]
    de2a:	subeq	r5, r5, r3
    de2c:	ldr	r3, [r4, #8]
    de2e:	ite	eq
    de30:	biceq.w	r5, r5, r5, asr #31
    de34:	movne	r5, #0
    de36:	cmp	r3, r2
    de38:	itt	gt
    de3a:	subgt	r3, r3, r2
    de3c:	addgt	r5, r5, r3
    de3e:	movs	r6, #0
    de40:	adds	r4, #26
    de42:	cmp	r5, r6
    de44:	bne.n	de7c <_printf_common+0xc8>
    de46:	movs	r0, #0
    de48:	b.n	de5c <_printf_common+0xa8>
    de4a:	movs	r3, #1
    de4c:	mov	r2, sl
    de4e:	mov	r1, r9
    de50:	mov	r0, r7
    de52:	blx	r8
    de54:	adds	r0, #1
    de56:	bne.n	de60 <_printf_common+0xac>
    de58:	mov.w	r0, #4294967295
    de5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de60:	adds	r5, #1
    de62:	b.n	ddf2 <_printf_common+0x3e>
    de64:	adds	r1, r4, r3
    de66:	adds	r2, r3, #1
    de68:	movs	r0, #48	; 0x30
    de6a:	strb.w	r0, [r1, #67]	; 0x43
    de6e:	add	r2, r4
    de70:	ldrb.w	r1, [r4, #69]	; 0x45
    de74:	strb.w	r1, [r2, #67]	; 0x43
    de78:	adds	r3, #2
    de7a:	b.n	de0c <_printf_common+0x58>
    de7c:	movs	r3, #1
    de7e:	mov	r2, r4
    de80:	mov	r1, r9
    de82:	mov	r0, r7
    de84:	blx	r8
    de86:	adds	r0, #1
    de88:	beq.n	de58 <_printf_common+0xa4>
    de8a:	adds	r6, #1
    de8c:	b.n	de42 <_printf_common+0x8e>
	...

0000de90 <_printf_i>:
    de90:	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    de94:	ldrb	r7, [r1, #24]
    de96:	ldr	r5, [sp, #48]	; 0x30
    de98:	cmp	r7, #120	; 0x78
    de9a:	mov	r9, r2
    de9c:	mov	r8, r0
    de9e:	mov	r4, r1
    dea0:	mov	sl, r3
    dea2:	add.w	r2, r1, #67	; 0x43
    dea6:	bhi.n	deb8 <_printf_i+0x28>
    dea8:	cmp	r7, #98	; 0x62
    deaa:	bhi.n	dec2 <_printf_i+0x32>
    deac:	cmp	r7, #0
    deae:	beq.w	e05a <_printf_i+0x1ca>
    deb2:	cmp	r7, #88	; 0x58
    deb4:	beq.w	e038 <_printf_i+0x1a8>
    deb8:	add.w	r5, r4, #66	; 0x42
    debc:	strb.w	r7, [r4, #66]	; 0x42
    dec0:	b.n	df38 <_printf_i+0xa8>
    dec2:	sub.w	r3, r7, #99	; 0x63
    dec6:	cmp	r3, #21
    dec8:	bhi.n	deb8 <_printf_i+0x28>
    deca:	add	r1, pc, #4	; (adr r1, ded0 <_printf_i+0x40>)
    decc:	ldr.w	pc, [r1, r3, lsl #2]
    ded0:	.word	0x0000df29
    ded4:	.word	0x0000df3d
    ded8:	.word	0x0000deb9
    dedc:	.word	0x0000deb9
    dee0:	.word	0x0000deb9
    dee4:	.word	0x0000deb9
    dee8:	.word	0x0000df3d
    deec:	.word	0x0000deb9
    def0:	.word	0x0000deb9
    def4:	.word	0x0000deb9
    def8:	.word	0x0000deb9
    defc:	.word	0x0000e041
    df00:	.word	0x0000df69
    df04:	.word	0x0000dffb
    df08:	.word	0x0000deb9
    df0c:	.word	0x0000deb9
    df10:	.word	0x0000e063
    df14:	.word	0x0000deb9
    df18:	.word	0x0000df69
    df1c:	.word	0x0000deb9
    df20:	.word	0x0000deb9
    df24:	.word	0x0000e003
    df28:	ldr	r3, [r5, #0]
    df2a:	adds	r2, r3, #4
    df2c:	ldr	r3, [r3, #0]
    df2e:	str	r2, [r5, #0]
    df30:	add.w	r5, r4, #66	; 0x42
    df34:	strb.w	r3, [r4, #66]	; 0x42
    df38:	movs	r3, #1
    df3a:	b.n	e07c <_printf_i+0x1ec>
    df3c:	ldr	r0, [r4, #0]
    df3e:	ldr	r3, [r5, #0]
    df40:	lsls	r7, r0, #24
    df42:	add.w	r1, r3, #4
    df46:	str	r1, [r5, #0]
    df48:	bpl.n	df4e <_printf_i+0xbe>
    df4a:	ldr	r6, [r3, #0]
    df4c:	b.n	df56 <_printf_i+0xc6>
    df4e:	lsls	r6, r0, #25
    df50:	bpl.n	df4a <_printf_i+0xba>
    df52:	ldrsh.w	r6, [r3]
    df56:	cmp	r6, #0
    df58:	bge.n	df62 <_printf_i+0xd2>
    df5a:	movs	r3, #45	; 0x2d
    df5c:	negs	r6, r6
    df5e:	strb.w	r3, [r4, #67]	; 0x43
    df62:	ldr	r0, [pc, #360]	; (e0cc <_printf_i+0x23c>)
    df64:	movs	r3, #10
    df66:	b.n	df8e <_printf_i+0xfe>
    df68:	ldr	r3, [r5, #0]
    df6a:	ldr	r0, [r4, #0]
    df6c:	adds	r1, r3, #4
    df6e:	str	r1, [r5, #0]
    df70:	lsls	r5, r0, #24
    df72:	bpl.n	df78 <_printf_i+0xe8>
    df74:	ldr	r6, [r3, #0]
    df76:	b.n	df7e <_printf_i+0xee>
    df78:	lsls	r1, r0, #25
    df7a:	bpl.n	df74 <_printf_i+0xe4>
    df7c:	ldrh	r6, [r3, #0]
    df7e:	ldr	r0, [pc, #332]	; (e0cc <_printf_i+0x23c>)
    df80:	cmp	r7, #111	; 0x6f
    df82:	ite	eq
    df84:	moveq	r3, #8
    df86:	movne	r3, #10
    df88:	movs	r1, #0
    df8a:	strb.w	r1, [r4, #67]	; 0x43
    df8e:	ldr	r5, [r4, #4]
    df90:	str	r5, [r4, #8]
    df92:	cmp	r5, #0
    df94:	ittt	ge
    df96:	ldrge	r1, [r4, #0]
    df98:	bicge.w	r1, r1, #4
    df9c:	strge	r1, [r4, #0]
    df9e:	cbnz	r6, dfa4 <_printf_i+0x114>
    dfa0:	cmp	r5, #0
    dfa2:	beq.n	e03c <_printf_i+0x1ac>
    dfa4:	mov	r5, r2
    dfa6:	udiv	r1, r6, r3
    dfaa:	mls	r7, r3, r1, r6
    dfae:	ldrb	r7, [r0, r7]
    dfb0:	strb.w	r7, [r5, #-1]!
    dfb4:	mov	r7, r6
    dfb6:	cmp	r3, r7
    dfb8:	mov	r6, r1
    dfba:	bls.n	dfa6 <_printf_i+0x116>
    dfbc:	cmp	r3, #8
    dfbe:	bne.n	dfd8 <_printf_i+0x148>
    dfc0:	ldr	r3, [r4, #0]
    dfc2:	lsls	r6, r3, #31
    dfc4:	bpl.n	dfd8 <_printf_i+0x148>
    dfc6:	ldr	r3, [r4, #16]
    dfc8:	ldr	r1, [r4, #4]
    dfca:	cmp	r1, r3
    dfcc:	ittt	le
    dfce:	movle	r3, #48	; 0x30
    dfd0:	strble.w	r3, [r5, #-1]
    dfd4:	addle.w	r5, r5, #4294967295
    dfd8:	subs	r2, r2, r5
    dfda:	str	r2, [r4, #16]
    dfdc:	str.w	sl, [sp]
    dfe0:	mov	r3, r9
    dfe2:	add	r2, sp, #12
    dfe4:	mov	r1, r4
    dfe6:	mov	r0, r8
    dfe8:	bl	ddb4 <_printf_common>
    dfec:	adds	r0, #1
    dfee:	bne.n	e086 <_printf_i+0x1f6>
    dff0:	mov.w	r0, #4294967295
    dff4:	add	sp, #16
    dff6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dffa:	ldr	r3, [r4, #0]
    dffc:	orr.w	r3, r3, #32
    e000:	str	r3, [r4, #0]
    e002:	ldr	r0, [pc, #204]	; (e0d0 <_printf_i+0x240>)
    e004:	movs	r7, #120	; 0x78
    e006:	strb.w	r7, [r4, #69]	; 0x45
    e00a:	ldr	r3, [r4, #0]
    e00c:	ldr	r1, [r5, #0]
    e00e:	lsls	r7, r3, #24
    e010:	ldr.w	r6, [r1], #4
    e014:	bmi.n	e01c <_printf_i+0x18c>
    e016:	lsls	r7, r3, #25
    e018:	it	mi
    e01a:	uxthmi	r6, r6
    e01c:	lsls	r7, r3, #31
    e01e:	it	mi
    e020:	orrmi.w	r3, r3, #32
    e024:	str	r1, [r5, #0]
    e026:	it	mi
    e028:	strmi	r3, [r4, #0]
    e02a:	cbnz	r6, e034 <_printf_i+0x1a4>
    e02c:	ldr	r3, [r4, #0]
    e02e:	bic.w	r3, r3, #32
    e032:	str	r3, [r4, #0]
    e034:	movs	r3, #16
    e036:	b.n	df88 <_printf_i+0xf8>
    e038:	ldr	r0, [pc, #144]	; (e0cc <_printf_i+0x23c>)
    e03a:	b.n	e006 <_printf_i+0x176>
    e03c:	mov	r5, r2
    e03e:	b.n	dfbc <_printf_i+0x12c>
    e040:	ldr	r3, [r5, #0]
    e042:	ldr	r6, [r4, #0]
    e044:	ldr	r1, [r4, #20]
    e046:	adds	r0, r3, #4
    e048:	str	r0, [r5, #0]
    e04a:	lsls	r5, r6, #24
    e04c:	ldr	r3, [r3, #0]
    e04e:	bpl.n	e054 <_printf_i+0x1c4>
    e050:	str	r1, [r3, #0]
    e052:	b.n	e05a <_printf_i+0x1ca>
    e054:	lsls	r0, r6, #25
    e056:	bpl.n	e050 <_printf_i+0x1c0>
    e058:	strh	r1, [r3, #0]
    e05a:	movs	r3, #0
    e05c:	str	r3, [r4, #16]
    e05e:	mov	r5, r2
    e060:	b.n	dfdc <_printf_i+0x14c>
    e062:	ldr	r3, [r5, #0]
    e064:	adds	r2, r3, #4
    e066:	str	r2, [r5, #0]
    e068:	ldr	r5, [r3, #0]
    e06a:	ldr	r2, [r4, #4]
    e06c:	movs	r1, #0
    e06e:	mov	r0, r5
    e070:	bl	eaa0 <memchr>
    e074:	cbz	r0, e07a <_printf_i+0x1ea>
    e076:	subs	r0, r0, r5
    e078:	str	r0, [r4, #4]
    e07a:	ldr	r3, [r4, #4]
    e07c:	str	r3, [r4, #16]
    e07e:	movs	r3, #0
    e080:	strb.w	r3, [r4, #67]	; 0x43
    e084:	b.n	dfdc <_printf_i+0x14c>
    e086:	ldr	r3, [r4, #16]
    e088:	mov	r2, r5
    e08a:	mov	r1, r9
    e08c:	mov	r0, r8
    e08e:	blx	sl
    e090:	adds	r0, #1
    e092:	beq.n	dff0 <_printf_i+0x160>
    e094:	ldr	r3, [r4, #0]
    e096:	lsls	r3, r3, #30
    e098:	bmi.n	e0c2 <_printf_i+0x232>
    e09a:	ldr	r0, [r4, #12]
    e09c:	ldr	r3, [sp, #12]
    e09e:	cmp	r0, r3
    e0a0:	it	lt
    e0a2:	movlt	r0, r3
    e0a4:	b.n	dff4 <_printf_i+0x164>
    e0a6:	movs	r3, #1
    e0a8:	mov	r2, r6
    e0aa:	mov	r1, r9
    e0ac:	mov	r0, r8
    e0ae:	blx	sl
    e0b0:	adds	r0, #1
    e0b2:	beq.n	dff0 <_printf_i+0x160>
    e0b4:	adds	r5, #1
    e0b6:	ldr	r3, [r4, #12]
    e0b8:	ldr	r1, [sp, #12]
    e0ba:	subs	r3, r3, r1
    e0bc:	cmp	r3, r5
    e0be:	bgt.n	e0a6 <_printf_i+0x216>
    e0c0:	b.n	e09a <_printf_i+0x20a>
    e0c2:	movs	r5, #0
    e0c4:	add.w	r6, r4, #25
    e0c8:	b.n	e0b6 <_printf_i+0x226>
    e0ca:	nop
    e0cc:	.word	0x200012cd
    e0d0:	.word	0x200012de

0000e0d4 <_scanf_float>:
    e0d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0d8:	sub	sp, #28
    e0da:	mov	r7, r2
    e0dc:	str	r3, [sp, #12]
    e0de:	ldr	r3, [r1, #8]
    e0e0:	subs	r2, r3, #1
    e0e2:	cmp.w	r2, #348	; 0x15c
    e0e6:	ittte	hi
    e0e8:	mvnhi.w	r5, #348	; 0x15c
    e0ec:	addhi	r3, r3, r5
    e0ee:	strhi	r3, [sp, #8]
    e0f0:	movls	r3, #0
    e0f2:	itte	hi
    e0f4:	movwhi	r3, #349	; 0x15d
    e0f8:	strhi	r3, [r1, #8]
    e0fa:	strls	r3, [sp, #8]
    e0fc:	ldr	r3, [r1, #0]
    e0fe:	mov	fp, r1
    e100:	movs	r5, #0
    e102:	orr.w	r3, r3, #1920	; 0x780
    e106:	str.w	r3, [fp], #28
    e10a:	strd	r5, r5, [sp, #16]
    e10e:	mov	r8, r0
    e110:	mov	r4, r1
    e112:	mov	r6, fp
    e114:	mov	sl, r5
    e116:	mov	r9, r5
    e118:	str	r5, [sp, #4]
    e11a:	ldr	r2, [r4, #8]
    e11c:	cbz	r2, e134 <_scanf_float+0x60>
    e11e:	ldr	r3, [r7, #0]
    e120:	ldrb	r3, [r3, #0]
    e122:	cmp	r3, #78	; 0x4e
    e124:	bhi.n	e1f0 <_scanf_float+0x11c>
    e126:	cmp	r3, #64	; 0x40
    e128:	bhi.n	e1a4 <_scanf_float+0xd0>
    e12a:	sub.w	r1, r3, #43	; 0x2b
    e12e:	uxtb	r0, r1
    e130:	cmp	r0, #14
    e132:	bls.n	e1aa <_scanf_float+0xd6>
    e134:	cmp.w	r9, #0
    e138:	beq.n	e142 <_scanf_float+0x6e>
    e13a:	ldr	r3, [r4, #0]
    e13c:	bic.w	r3, r3, #256	; 0x100
    e140:	str	r3, [r4, #0]
    e142:	add.w	sl, sl, #4294967295
    e146:	cmp.w	sl, #1
    e14a:	bhi.w	e374 <_scanf_float+0x2a0>
    e14e:	cmp	r6, fp
    e150:	bhi.w	e35e <_scanf_float+0x28a>
    e154:	movs	r5, #1
    e156:	mov	r0, r5
    e158:	add	sp, #28
    e15a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e15e:	sub.w	r2, r3, #97	; 0x61
    e162:	cmp	r2, #13
    e164:	bhi.n	e134 <_scanf_float+0x60>
    e166:	add	r1, pc, #4	; (adr r1, e16c <_scanf_float+0x98>)
    e168:	ldr.w	pc, [r1, r2, lsl #2]
    e16c:	.word	0x0000e2ab
    e170:	.word	0x0000e135
    e174:	.word	0x0000e135
    e178:	.word	0x0000e135
    e17c:	.word	0x0000e30b
    e180:	.word	0x0000e2e3
    e184:	.word	0x0000e135
    e188:	.word	0x0000e135
    e18c:	.word	0x0000e2b9
    e190:	.word	0x0000e135
    e194:	.word	0x0000e135
    e198:	.word	0x0000e135
    e19c:	.word	0x0000e135
    e1a0:	.word	0x0000e271
    e1a4:	sub.w	r2, r3, #65	; 0x41
    e1a8:	b.n	e162 <_scanf_float+0x8e>
    e1aa:	cmp	r1, #14
    e1ac:	bhi.n	e134 <_scanf_float+0x60>
    e1ae:	add	r0, pc, #4	; (adr r0, e1b4 <_scanf_float+0xe0>)
    e1b0:	ldr.w	pc, [r0, r1, lsl #2]
    e1b4:	.word	0x0000e263
    e1b8:	.word	0x0000e135
    e1bc:	.word	0x0000e263
    e1c0:	.word	0x0000e2f7
    e1c4:	.word	0x0000e135
    e1c8:	.word	0x0000e211
    e1cc:	.word	0x0000e24d
    e1d0:	.word	0x0000e24d
    e1d4:	.word	0x0000e24d
    e1d8:	.word	0x0000e24d
    e1dc:	.word	0x0000e24d
    e1e0:	.word	0x0000e24d
    e1e4:	.word	0x0000e24d
    e1e8:	.word	0x0000e24d
    e1ec:	.word	0x0000e24d
    e1f0:	cmp	r3, #110	; 0x6e
    e1f2:	bhi.n	e208 <_scanf_float+0x134>
    e1f4:	cmp	r3, #96	; 0x60
    e1f6:	bhi.n	e15e <_scanf_float+0x8a>
    e1f8:	cmp	r3, #84	; 0x54
    e1fa:	beq.n	e2ec <_scanf_float+0x218>
    e1fc:	cmp	r3, #89	; 0x59
    e1fe:	bne.n	e134 <_scanf_float+0x60>
    e200:	cmp	r5, #7
    e202:	bne.n	e134 <_scanf_float+0x60>
    e204:	movs	r5, #8
    e206:	b.n	e25c <_scanf_float+0x188>
    e208:	cmp	r3, #116	; 0x74
    e20a:	beq.n	e2ec <_scanf_float+0x218>
    e20c:	cmp	r3, #121	; 0x79
    e20e:	b.n	e1fe <_scanf_float+0x12a>
    e210:	ldr	r1, [r4, #0]
    e212:	lsls	r0, r1, #23
    e214:	bpl.n	e24c <_scanf_float+0x178>
    e216:	ldr	r3, [sp, #8]
    e218:	bic.w	r1, r1, #128	; 0x80
    e21c:	str	r1, [r4, #0]
    e21e:	add.w	r9, r9, #1
    e222:	cbz	r3, e22c <_scanf_float+0x158>
    e224:	subs	r3, #1
    e226:	adds	r2, #1
    e228:	str	r3, [sp, #8]
    e22a:	str	r2, [r4, #8]
    e22c:	ldr	r3, [r4, #8]
    e22e:	subs	r3, #1
    e230:	str	r3, [r4, #8]
    e232:	ldr	r3, [r4, #16]
    e234:	adds	r3, #1
    e236:	str	r3, [r4, #16]
    e238:	ldr	r3, [r7, #4]
    e23a:	subs	r3, #1
    e23c:	cmp	r3, #0
    e23e:	str	r3, [r7, #4]
    e240:	ble.w	e34c <_scanf_float+0x278>
    e244:	ldr	r3, [r7, #0]
    e246:	adds	r3, #1
    e248:	str	r3, [r7, #0]
    e24a:	b.n	e11a <_scanf_float+0x46>
    e24c:	cmn.w	sl, r5
    e250:	bne.w	e134 <_scanf_float+0x60>
    e254:	ldr	r2, [r4, #0]
    e256:	bic.w	r2, r2, #384	; 0x180
    e25a:	str	r2, [r4, #0]
    e25c:	strb.w	r3, [r6], #1
    e260:	b.n	e22c <_scanf_float+0x158>
    e262:	ldr	r2, [r4, #0]
    e264:	lsls	r0, r2, #24
    e266:	bpl.w	e134 <_scanf_float+0x60>
    e26a:	bic.w	r2, r2, #128	; 0x80
    e26e:	b.n	e25a <_scanf_float+0x186>
    e270:	cmp.w	sl, #0
    e274:	bne.n	e294 <_scanf_float+0x1c0>
    e276:	cmp.w	r9, #0
    e27a:	bne.n	e29a <_scanf_float+0x1c6>
    e27c:	ldr	r2, [r4, #0]
    e27e:	and.w	r1, r2, #1792	; 0x700
    e282:	cmp.w	r1, #1792	; 0x700
    e286:	bne.n	e29a <_scanf_float+0x1c6>
    e288:	bic.w	r2, r2, #1920	; 0x780
    e28c:	str	r2, [r4, #0]
    e28e:	mov.w	sl, #1
    e292:	b.n	e25c <_scanf_float+0x188>
    e294:	cmp.w	sl, #2
    e298:	beq.n	e346 <_scanf_float+0x272>
    e29a:	cmp	r5, #1
    e29c:	beq.n	e2a4 <_scanf_float+0x1d0>
    e29e:	cmp	r5, #4
    e2a0:	bne.w	e134 <_scanf_float+0x60>
    e2a4:	adds	r5, #1
    e2a6:	uxtb	r5, r5
    e2a8:	b.n	e25c <_scanf_float+0x188>
    e2aa:	cmp.w	sl, #1
    e2ae:	bne.w	e134 <_scanf_float+0x60>
    e2b2:	mov.w	sl, #2
    e2b6:	b.n	e25c <_scanf_float+0x188>
    e2b8:	cbnz	r5, e2da <_scanf_float+0x206>
    e2ba:	cmp.w	r9, #0
    e2be:	bne.w	e13a <_scanf_float+0x66>
    e2c2:	ldr	r2, [r4, #0]
    e2c4:	and.w	r1, r2, #1792	; 0x700
    e2c8:	cmp.w	r1, #1792	; 0x700
    e2cc:	bne.w	e142 <_scanf_float+0x6e>
    e2d0:	bic.w	r2, r2, #1920	; 0x780
    e2d4:	str	r2, [r4, #0]
    e2d6:	movs	r5, #1
    e2d8:	b.n	e25c <_scanf_float+0x188>
    e2da:	cmp	r5, #3
    e2dc:	beq.n	e2a4 <_scanf_float+0x1d0>
    e2de:	cmp	r5, #5
    e2e0:	b.n	e2a0 <_scanf_float+0x1cc>
    e2e2:	cmp	r5, #2
    e2e4:	bne.w	e134 <_scanf_float+0x60>
    e2e8:	movs	r5, #3
    e2ea:	b.n	e25c <_scanf_float+0x188>
    e2ec:	cmp	r5, #6
    e2ee:	bne.w	e134 <_scanf_float+0x60>
    e2f2:	movs	r5, #7
    e2f4:	b.n	e25c <_scanf_float+0x188>
    e2f6:	ldr	r2, [r4, #0]
    e2f8:	lsls	r1, r2, #22
    e2fa:	bpl.w	e134 <_scanf_float+0x60>
    e2fe:	bic.w	r2, r2, #640	; 0x280
    e302:	str	r2, [r4, #0]
    e304:	str.w	r9, [sp, #4]
    e308:	b.n	e25c <_scanf_float+0x188>
    e30a:	ldr	r2, [r4, #0]
    e30c:	and.w	r1, r2, #1280	; 0x500
    e310:	cmp.w	r1, #1024	; 0x400
    e314:	beq.n	e324 <_scanf_float+0x250>
    e316:	lsls	r0, r2, #21
    e318:	bpl.w	e134 <_scanf_float+0x60>
    e31c:	cmp.w	r9, #0
    e320:	beq.w	e142 <_scanf_float+0x6e>
    e324:	lsls	r1, r2, #22
    e326:	it	pl
    e328:	ldrpl	r1, [sp, #4]
    e32a:	bic.w	r2, r2, #1920	; 0x780
    e32e:	it	pl
    e330:	subpl.w	r1, r9, r1
    e334:	orr.w	r2, r2, #384	; 0x180
    e338:	it	pl
    e33a:	strdpl	r1, r6, [sp, #16]
    e33e:	str	r2, [r4, #0]
    e340:	mov.w	r9, #0
    e344:	b.n	e25c <_scanf_float+0x188>
    e346:	mov.w	sl, #3
    e34a:	b.n	e25c <_scanf_float+0x188>
    e34c:	ldr.w	r3, [r4, #384]	; 0x180
    e350:	mov	r1, r7
    e352:	mov	r0, r8
    e354:	blx	r3
    e356:	cmp	r0, #0
    e358:	beq.w	e11a <_scanf_float+0x46>
    e35c:	b.n	e134 <_scanf_float+0x60>
    e35e:	ldr.w	r3, [r4, #380]	; 0x17c
    e362:	ldrb.w	r1, [r6, #-1]!
    e366:	mov	r2, r7
    e368:	mov	r0, r8
    e36a:	blx	r3
    e36c:	ldr	r3, [r4, #16]
    e36e:	subs	r3, #1
    e370:	str	r3, [r4, #16]
    e372:	b.n	e14e <_scanf_float+0x7a>
    e374:	subs	r3, r5, #1
    e376:	cmp	r3, #6
    e378:	bhi.n	e3c6 <_scanf_float+0x2f2>
    e37a:	cmp	r5, #2
    e37c:	bhi.n	e3ec <_scanf_float+0x318>
    e37e:	cmp	r6, fp
    e380:	bls.w	e154 <_scanf_float+0x80>
    e384:	ldr.w	r3, [r4, #380]	; 0x17c
    e388:	ldrb.w	r1, [r6, #-1]!
    e38c:	mov	r2, r7
    e38e:	mov	r0, r8
    e390:	blx	r3
    e392:	ldr	r3, [r4, #16]
    e394:	subs	r3, #1
    e396:	str	r3, [r4, #16]
    e398:	b.n	e37e <_scanf_float+0x2aa>
    e39a:	ldr	r0, [sp, #8]
    e39c:	ldr.w	r3, [r4, #380]	; 0x17c
    e3a0:	ldrb.w	r1, [r0, #-1]!
    e3a4:	str	r0, [sp, #8]
    e3a6:	mov	r2, r7
    e3a8:	mov	r0, r8
    e3aa:	blx	r3
    e3ac:	ldr	r3, [r4, #16]
    e3ae:	subs	r3, #1
    e3b0:	str	r3, [r4, #16]
    e3b2:	add.w	sl, sl, #4294967295
    e3b6:	uxtb.w	sl, sl
    e3ba:	cmp.w	sl, #2
    e3be:	bne.n	e39a <_scanf_float+0x2c6>
    e3c0:	subs	r5, #3
    e3c2:	uxtb	r5, r5
    e3c4:	subs	r6, r6, r5
    e3c6:	ldr	r3, [r4, #0]
    e3c8:	lsls	r2, r3, #23
    e3ca:	bpl.n	e42c <_scanf_float+0x358>
    e3cc:	lsls	r3, r3, #21
    e3ce:	bpl.n	e3f2 <_scanf_float+0x31e>
    e3d0:	cmp	r6, fp
    e3d2:	bls.w	e154 <_scanf_float+0x80>
    e3d6:	ldr.w	r3, [r4, #380]	; 0x17c
    e3da:	ldrb.w	r1, [r6, #-1]!
    e3de:	mov	r2, r7
    e3e0:	mov	r0, r8
    e3e2:	blx	r3
    e3e4:	ldr	r3, [r4, #16]
    e3e6:	subs	r3, #1
    e3e8:	str	r3, [r4, #16]
    e3ea:	b.n	e3d0 <_scanf_float+0x2fc>
    e3ec:	mov	sl, r5
    e3ee:	str	r6, [sp, #8]
    e3f0:	b.n	e3b2 <_scanf_float+0x2de>
    e3f2:	ldrb.w	r1, [r6, #-1]
    e3f6:	ldr	r3, [r4, #16]
    e3f8:	cmp	r1, #101	; 0x65
    e3fa:	add.w	r3, r3, #4294967295
    e3fe:	add.w	r5, r6, #4294967295
    e402:	str	r3, [r4, #16]
    e404:	beq.n	e420 <_scanf_float+0x34c>
    e406:	cmp	r1, #69	; 0x45
    e408:	beq.n	e420 <_scanf_float+0x34c>
    e40a:	ldr.w	r3, [r4, #380]	; 0x17c
    e40e:	mov	r2, r7
    e410:	mov	r0, r8
    e412:	blx	r3
    e414:	ldr	r3, [r4, #16]
    e416:	ldrb.w	r1, [r6, #-2]
    e41a:	subs	r3, #1
    e41c:	subs	r5, r6, #2
    e41e:	str	r3, [r4, #16]
    e420:	ldr.w	r3, [r4, #380]	; 0x17c
    e424:	mov	r2, r7
    e426:	mov	r0, r8
    e428:	blx	r3
    e42a:	mov	r6, r5
    e42c:	ldr	r5, [r4, #0]
    e42e:	ands.w	r5, r5, #16
    e432:	bne.n	e4d0 <_scanf_float+0x3fc>
    e434:	strb	r5, [r6, #0]
    e436:	ldr	r3, [r4, #0]
    e438:	and.w	r3, r3, #1536	; 0x600
    e43c:	cmp.w	r3, #1024	; 0x400
    e440:	bne.n	e478 <_scanf_float+0x3a4>
    e442:	ldr	r3, [sp, #4]
    e444:	cmp	r3, r9
    e446:	sub.w	r2, r3, r9
    e44a:	bne.n	e492 <_scanf_float+0x3be>
    e44c:	movs	r2, #0
    e44e:	mov	r1, fp
    e450:	mov	r0, r8
    e452:	bl	d71c <_strtod_r>
    e456:	ldr	r3, [sp, #12]
    e458:	ldr	r1, [r4, #0]
    e45a:	ldr	r3, [r3, #0]
    e45c:	tst.w	r1, #2
    e460:	add.w	r2, r3, #4
    e464:	beq.n	e4a8 <_scanf_float+0x3d4>
    e466:	ldr	r1, [sp, #12]
    e468:	str	r2, [r1, #0]
    e46a:	ldr	r3, [r3, #0]
    e46c:	vstr	d0, [r3]
    e470:	ldr	r3, [r4, #12]
    e472:	adds	r3, #1
    e474:	str	r3, [r4, #12]
    e476:	b.n	e156 <_scanf_float+0x82>
    e478:	ldr	r3, [sp, #16]
    e47a:	cmp	r3, #0
    e47c:	beq.n	e44c <_scanf_float+0x378>
    e47e:	ldr	r1, [sp, #20]
    e480:	movs	r3, #10
    e482:	mov	r2, r5
    e484:	adds	r1, #1
    e486:	mov	r0, r8
    e488:	bl	d82c <_strtol_r>
    e48c:	ldr	r3, [sp, #16]
    e48e:	ldr	r6, [sp, #20]
    e490:	subs	r2, r0, r3
    e492:	addw	r3, r4, #367	; 0x16f
    e496:	cmp	r6, r3
    e498:	it	cs
    e49a:	addcs.w	r6, r4, #366	; 0x16e
    e49e:	ldr	r1, [pc, #52]	; (e4d4 <_scanf_float+0x400>)
    e4a0:	mov	r0, r6
    e4a2:	bl	e6a4 <siprintf>
    e4a6:	b.n	e44c <_scanf_float+0x378>
    e4a8:	tst.w	r1, #4
    e4ac:	ldr	r1, [sp, #12]
    e4ae:	str	r2, [r1, #0]
    e4b0:	bne.n	e46a <_scanf_float+0x396>
    e4b2:	vcmp.f64	d0, d0
    e4b6:	vmrs	APSR_nzcv, fpscr
    e4ba:	ldr	r6, [r3, #0]
    e4bc:	bvc.n	e4ca <_scanf_float+0x3f6>
    e4be:	ldr	r0, [pc, #24]	; (e4d8 <_scanf_float+0x404>)
    e4c0:	bl	eb60 <nanf>
    e4c4:	vstr	s0, [r6]
    e4c8:	b.n	e470 <_scanf_float+0x39c>
    e4ca:	vcvt.f32.f64	s0, d0
    e4ce:	b.n	e4c4 <_scanf_float+0x3f0>
    e4d0:	movs	r5, #0
    e4d2:	b.n	e156 <_scanf_float+0x82>
    e4d4:	.word	0x200012ef
    e4d8:	.word	0x20000d00

0000e4dc <std>:
    e4dc:	movs	r3, #0
    e4de:	push	{r4, lr}
    e4e0:	mov	r4, r0
    e4e2:	strd	r3, r3, [r0]
    e4e6:	strd	r3, r3, [r0, #16]
    e4ea:	str	r3, [r0, #8]
    e4ec:	strh	r1, [r0, #12]
    e4ee:	str	r3, [r0, #100]	; 0x64
    e4f0:	strh	r2, [r0, #14]
    e4f2:	str	r3, [r0, #24]
    e4f4:	mov	r1, r3
    e4f6:	movs	r2, #8
    e4f8:	adds	r0, #92	; 0x5c
    e4fa:	bl	9f44 <memset>
    e4fe:	ldr	r3, [pc, #20]	; (e514 <std+0x38>)
    e500:	str	r3, [r4, #36]	; 0x24
    e502:	ldr	r3, [pc, #20]	; (e518 <std+0x3c>)
    e504:	str	r3, [r4, #40]	; 0x28
    e506:	ldr	r3, [pc, #20]	; (e51c <std+0x40>)
    e508:	str	r3, [r4, #44]	; 0x2c
    e50a:	ldr	r3, [pc, #20]	; (e520 <std+0x44>)
    e50c:	str	r4, [r4, #32]
    e50e:	str	r3, [r4, #48]	; 0x30
    e510:	pop	{r4, pc}
    e512:	nop
    e514:	.word	0x0000e73d
    e518:	.word	0x0000e763
    e51c:	.word	0x0000e79b
    e520:	.word	0x0000e7bf

0000e524 <stdio_exit_handler>:
    e524:	ldr	r2, [pc, #8]	; (e530 <stdio_exit_handler+0xc>)
    e526:	ldr	r1, [pc, #12]	; (e534 <stdio_exit_handler+0x10>)
    e528:	ldr	r0, [pc, #12]	; (e538 <stdio_exit_handler+0x14>)
    e52a:	b.w	e600 <_fwalk_sglue>
    e52e:	nop
    e530:	.word	0x20001db0
    e534:	.word	0x000112d5
    e538:	.word	0x20001dbc

0000e53c <cleanup_stdio>:
    e53c:	ldr	r1, [r0, #4]
    e53e:	ldr	r3, [pc, #48]	; (e570 <cleanup_stdio+0x34>)
    e540:	cmp	r1, r3
    e542:	push	{r4, lr}
    e544:	mov	r4, r0
    e546:	beq.n	e54c <cleanup_stdio+0x10>
    e548:	bl	112d4 <_fflush_r>
    e54c:	ldr	r1, [r4, #8]
    e54e:	ldr	r3, [pc, #36]	; (e574 <cleanup_stdio+0x38>)
    e550:	cmp	r1, r3
    e552:	beq.n	e55a <cleanup_stdio+0x1e>
    e554:	mov	r0, r4
    e556:	bl	112d4 <_fflush_r>
    e55a:	ldr	r1, [r4, #12]
    e55c:	ldr	r3, [pc, #24]	; (e578 <cleanup_stdio+0x3c>)
    e55e:	cmp	r1, r3
    e560:	beq.n	e56c <cleanup_stdio+0x30>
    e562:	mov	r0, r4
    e564:	ldmia.w	sp!, {r4, lr}
    e568:	b.w	112d4 <_fflush_r>
    e56c:	pop	{r4, pc}
    e56e:	nop
    e570:	.word	0x2002ceb0
    e574:	.word	0x2002cf18
    e578:	.word	0x2002cf80

0000e57c <global_stdio_init.part.0>:
    e57c:	push	{r4, lr}
    e57e:	ldr	r3, [pc, #44]	; (e5ac <global_stdio_init.part.0+0x30>)
    e580:	ldr	r4, [pc, #44]	; (e5b0 <global_stdio_init.part.0+0x34>)
    e582:	ldr	r2, [pc, #48]	; (e5b4 <global_stdio_init.part.0+0x38>)
    e584:	str	r2, [r3, #0]
    e586:	mov	r0, r4
    e588:	movs	r2, #0
    e58a:	movs	r1, #4
    e58c:	bl	e4dc <std>
    e590:	add.w	r0, r4, #104	; 0x68
    e594:	movs	r2, #1
    e596:	movs	r1, #9
    e598:	bl	e4dc <std>
    e59c:	add.w	r0, r4, #208	; 0xd0
    e5a0:	movs	r2, #2
    e5a2:	ldmia.w	sp!, {r4, lr}
    e5a6:	movs	r1, #18
    e5a8:	b.w	e4dc <std>
    e5ac:	.word	0x2002cfe8
    e5b0:	.word	0x2002ceb0
    e5b4:	.word	0x0000e525

0000e5b8 <__sfp_lock_acquire>:
    e5b8:	ldr	r0, [pc, #4]	; (e5c0 <__sfp_lock_acquire+0x8>)
    e5ba:	b.w	ea80 <__retarget_lock_acquire_recursive>
    e5be:	nop
    e5c0:	.word	0x2002ddff

0000e5c4 <__sfp_lock_release>:
    e5c4:	ldr	r0, [pc, #4]	; (e5cc <__sfp_lock_release+0x8>)
    e5c6:	b.w	ea82 <__retarget_lock_release_recursive>
    e5ca:	nop
    e5cc:	.word	0x2002ddff

0000e5d0 <__sinit>:
    e5d0:	push	{r4, lr}
    e5d2:	mov	r4, r0
    e5d4:	bl	e5b8 <__sfp_lock_acquire>
    e5d8:	ldr	r3, [r4, #32]
    e5da:	cbz	r3, e5e4 <__sinit+0x14>
    e5dc:	ldmia.w	sp!, {r4, lr}
    e5e0:	b.w	e5c4 <__sfp_lock_release>
    e5e4:	ldr	r3, [pc, #16]	; (e5f8 <__sinit+0x28>)
    e5e6:	str	r3, [r4, #32]
    e5e8:	ldr	r3, [pc, #16]	; (e5fc <__sinit+0x2c>)
    e5ea:	ldr	r3, [r3, #0]
    e5ec:	cmp	r3, #0
    e5ee:	bne.n	e5dc <__sinit+0xc>
    e5f0:	bl	e57c <global_stdio_init.part.0>
    e5f4:	b.n	e5dc <__sinit+0xc>
    e5f6:	nop
    e5f8:	.word	0x0000e53d
    e5fc:	.word	0x2002cfe8

0000e600 <_fwalk_sglue>:
    e600:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e604:	mov	r7, r0
    e606:	mov	r8, r1
    e608:	mov	r4, r2
    e60a:	movs	r6, #0
    e60c:	ldrd	r9, r5, [r4, #4]
    e610:	subs.w	r9, r9, #1
    e614:	bpl.n	e622 <_fwalk_sglue+0x22>
    e616:	ldr	r4, [r4, #0]
    e618:	cmp	r4, #0
    e61a:	bne.n	e60c <_fwalk_sglue+0xc>
    e61c:	mov	r0, r6
    e61e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e622:	ldrh	r3, [r5, #12]
    e624:	cmp	r3, #1
    e626:	bls.n	e638 <_fwalk_sglue+0x38>
    e628:	ldrsh.w	r3, [r5, #14]
    e62c:	adds	r3, #1
    e62e:	beq.n	e638 <_fwalk_sglue+0x38>
    e630:	mov	r1, r5
    e632:	mov	r0, r7
    e634:	blx	r8
    e636:	orrs	r6, r0
    e638:	adds	r5, #104	; 0x68
    e63a:	b.n	e610 <_fwalk_sglue+0x10>

0000e63c <sniprintf>:
    e63c:	push	{r2, r3}
    e63e:	push	{r4, r5, lr}
    e640:	ldr	r3, [pc, #92]	; (e6a0 <sniprintf+0x64>)
    e642:	subs	r4, r1, #0
    e644:	ldr	r5, [r3, #0]
    e646:	sub	sp, #116	; 0x74
    e648:	bge.n	e65c <sniprintf+0x20>
    e64a:	movs	r3, #139	; 0x8b
    e64c:	str	r3, [r5, #0]
    e64e:	mov.w	r0, #4294967295
    e652:	add	sp, #116	; 0x74
    e654:	ldmia.w	sp!, {r4, r5, lr}
    e658:	add	sp, #8
    e65a:	bx	lr
    e65c:	mov.w	r3, #520	; 0x208
    e660:	strh.w	r3, [sp, #20]
    e664:	ite	ne
    e666:	addne.w	r3, r4, #4294967295
    e66a:	moveq	r3, r4
    e66c:	str	r3, [sp, #16]
    e66e:	str	r3, [sp, #28]
    e670:	movw	r3, #65535	; 0xffff
    e674:	str	r0, [sp, #8]
    e676:	str	r0, [sp, #24]
    e678:	strh.w	r3, [sp, #22]
    e67c:	ldr	r2, [sp, #128]	; 0x80
    e67e:	add	r3, sp, #132	; 0x84
    e680:	add	r1, sp, #8
    e682:	mov	r0, r5
    e684:	str	r3, [sp, #4]
    e686:	bl	1098c <_svfiprintf_r>
    e68a:	adds	r3, r0, #1
    e68c:	itt	lt
    e68e:	movlt	r3, #139	; 0x8b
    e690:	strlt	r3, [r5, #0]
    e692:	cmp	r4, #0
    e694:	beq.n	e652 <sniprintf+0x16>
    e696:	ldr	r3, [sp, #8]
    e698:	movs	r2, #0
    e69a:	strb	r2, [r3, #0]
    e69c:	b.n	e652 <sniprintf+0x16>
    e69e:	nop
    e6a0:	.word	0x20001e08

0000e6a4 <siprintf>:
    e6a4:	push	{r1, r2, r3}
    e6a6:	push	{lr}
    e6a8:	sub	sp, #112	; 0x70
    e6aa:	add	r3, sp, #116	; 0x74
    e6ac:	str	r0, [sp, #8]
    e6ae:	str	r0, [sp, #24]
    e6b0:	mvn.w	r1, #2147483648	; 0x80000000
    e6b4:	ldr	r0, [pc, #36]	; (e6dc <siprintf+0x38>)
    e6b6:	str	r1, [sp, #28]
    e6b8:	str	r1, [sp, #16]
    e6ba:	ldr	r1, [pc, #36]	; (e6e0 <siprintf+0x3c>)
    e6bc:	ldr.w	r2, [r3], #4
    e6c0:	str	r1, [sp, #20]
    e6c2:	ldr	r0, [r0, #0]
    e6c4:	str	r3, [sp, #4]
    e6c6:	add	r1, sp, #8
    e6c8:	bl	1098c <_svfiprintf_r>
    e6cc:	ldr	r3, [sp, #8]
    e6ce:	movs	r2, #0
    e6d0:	strb	r2, [r3, #0]
    e6d2:	add	sp, #112	; 0x70
    e6d4:	ldr.w	lr, [sp], #4
    e6d8:	add	sp, #12
    e6da:	bx	lr
    e6dc:	.word	0x20001e08
    e6e0:	.word	0xffff0208

0000e6e4 <siscanf>:
    e6e4:	push	{r1, r2, r3}
    e6e6:	push	{r4, lr}
    e6e8:	sub	sp, #124	; 0x7c
    e6ea:	add	r4, sp, #132	; 0x84
    e6ec:	mov.w	r1, #516	; 0x204
    e6f0:	ldr.w	r2, [r4], #4
    e6f4:	str	r2, [sp, #4]
    e6f6:	strh.w	r1, [sp, #28]
    e6fa:	str	r0, [sp, #16]
    e6fc:	str	r0, [sp, #32]
    e6fe:	bl	eb40 <strlen>
    e702:	ldr	r3, [pc, #48]	; (e734 <siscanf+0x50>)
    e704:	str	r0, [sp, #20]
    e706:	str	r0, [sp, #36]	; 0x24
    e708:	str	r3, [sp, #52]	; 0x34
    e70a:	ldr	r0, [pc, #44]	; (e738 <siscanf+0x54>)
    e70c:	ldr	r2, [sp, #4]
    e70e:	ldr	r0, [r0, #0]
    e710:	str	r4, [sp, #12]
    e712:	movs	r3, #0
    e714:	str	r3, [sp, #68]	; 0x44
    e716:	str	r3, [sp, #88]	; 0x58
    e718:	movw	r3, #65535	; 0xffff
    e71c:	strh.w	r3, [sp, #30]
    e720:	add	r1, sp, #16
    e722:	mov	r3, r4
    e724:	bl	10c3c <__ssvfiscanf_r>
    e728:	add	sp, #124	; 0x7c
    e72a:	ldmia.w	sp!, {r4, lr}
    e72e:	add	sp, #12
    e730:	bx	lr
    e732:	nop
    e734:	.word	0x0000e75f
    e738:	.word	0x20001e08

0000e73c <__sread>:
    e73c:	push	{r4, lr}
    e73e:	mov	r4, r1
    e740:	ldrsh.w	r1, [r1, #14]
    e744:	bl	e9c4 <_read_r>
    e748:	cmp	r0, #0
    e74a:	itete	ge
    e74c:	ldrge	r3, [r4, #84]	; 0x54
    e74e:	ldrhlt	r3, [r4, #12]
    e750:	addge	r3, r3, r0
    e752:	biclt.w	r3, r3, #4096	; 0x1000
    e756:	ite	ge
    e758:	strge	r3, [r4, #84]	; 0x54
    e75a:	strhlt	r3, [r4, #12]
    e75c:	pop	{r4, pc}

0000e75e <__seofread>:
    e75e:	movs	r0, #0
    e760:	bx	lr

0000e762 <__swrite>:
    e762:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e766:	mov	r7, r3
    e768:	ldrh	r3, [r1, #12]
    e76a:	lsls	r3, r3, #23
    e76c:	mov	r5, r0
    e76e:	mov	r4, r1
    e770:	mov	r6, r2
    e772:	bpl.n	e780 <__swrite+0x1e>
    e774:	ldrsh.w	r1, [r1, #14]
    e778:	movs	r3, #2
    e77a:	movs	r2, #0
    e77c:	bl	e9a0 <_lseek_r>
    e780:	ldrh	r3, [r4, #12]
    e782:	ldrsh.w	r1, [r4, #14]
    e786:	bic.w	r3, r3, #4096	; 0x1000
    e78a:	strh	r3, [r4, #12]
    e78c:	mov	r2, r6
    e78e:	mov	r3, r7
    e790:	mov	r0, r5
    e792:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e796:	b.w	ea08 <_write_r>

0000e79a <__sseek>:
    e79a:	push	{r4, lr}
    e79c:	mov	r4, r1
    e79e:	ldrsh.w	r1, [r1, #14]
    e7a2:	bl	e9a0 <_lseek_r>
    e7a6:	adds	r3, r0, #1
    e7a8:	ldrh	r3, [r4, #12]
    e7aa:	itete	ne
    e7ac:	strne	r0, [r4, #84]	; 0x54
    e7ae:	biceq.w	r3, r3, #4096	; 0x1000
    e7b2:	orrne.w	r3, r3, #4096	; 0x1000
    e7b6:	strheq	r3, [r4, #12]
    e7b8:	it	ne
    e7ba:	strhne	r3, [r4, #12]
    e7bc:	pop	{r4, pc}

0000e7be <__sclose>:
    e7be:	ldrsh.w	r1, [r1, #14]
    e7c2:	b.w	e980 <_close_r>

0000e7c6 <_vdiprintf_r>:
    e7c6:	push	{r4, r5, r6, r7, lr}
    e7c8:	sub.w	sp, sp, #532	; 0x214
    e7cc:	mov	r6, r1
    e7ce:	add	r7, sp, #16
    e7d0:	mov.w	r1, #512	; 0x200
    e7d4:	str	r1, [sp, #12]
    e7d6:	str	r3, [sp, #0]
    e7d8:	mov	r1, r7
    e7da:	mov	r3, r2
    e7dc:	add	r2, sp, #12
    e7de:	mov	r5, r0
    e7e0:	bl	e824 <_vasniprintf_r>
    e7e4:	mov	r4, r0
    e7e6:	cbz	r0, e80a <_vdiprintf_r+0x44>
    e7e8:	mov	r2, r0
    e7ea:	ldr	r3, [sp, #12]
    e7ec:	mov	r1, r6
    e7ee:	mov	r0, r5
    e7f0:	bl	ea08 <_write_r>
    e7f4:	cmp	r4, r7
    e7f6:	str	r0, [sp, #12]
    e7f8:	beq.n	e802 <_vdiprintf_r+0x3c>
    e7fa:	mov	r1, r4
    e7fc:	mov	r0, r5
    e7fe:	bl	f758 <_free_r>
    e802:	ldr	r0, [sp, #12]
    e804:	add.w	sp, sp, #532	; 0x214
    e808:	pop	{r4, r5, r6, r7, pc}
    e80a:	mov.w	r0, #4294967295
    e80e:	b.n	e804 <_vdiprintf_r+0x3e>

0000e810 <vdiprintf>:
    e810:	mov	r3, r2
    e812:	mov	r2, r1
    e814:	mov	r1, r0
    e816:	ldr	r0, [pc, #8]	; (e820 <vdiprintf+0x10>)
    e818:	ldr	r0, [r0, #0]
    e81a:	b.w	e7c6 <_vdiprintf_r>
    e81e:	nop
    e820:	.word	0x20001e08

0000e824 <_vasniprintf_r>:
    e824:	push	{r4, r5, lr}
    e826:	mov	r5, r2
    e828:	sub	sp, #108	; 0x6c
    e82a:	ldr	r4, [r5, #0]
    e82c:	mov	r2, r3
    e82e:	cbz	r1, e854 <_vasniprintf_r+0x30>
    e830:	cmp	r4, #0
    e832:	itee	ne
    e834:	movne.w	r3, #1544	; 0x608
    e838:	moveq.w	r3, #648	; 0x288
    e83c:	moveq	r1, #0
    e83e:	cmp	r4, #0
    e840:	strh.w	r3, [sp, #12]
    e844:	str	r1, [sp, #0]
    e846:	str	r1, [sp, #16]
    e848:	bge.n	e85c <_vasniprintf_r+0x38>
    e84a:	movs	r3, #139	; 0x8b
    e84c:	str	r3, [r0, #0]
    e84e:	movs	r0, #0
    e850:	add	sp, #108	; 0x6c
    e852:	pop	{r4, r5, pc}
    e854:	mov.w	r3, #648	; 0x288
    e858:	mov	r4, r1
    e85a:	b.n	e83e <_vasniprintf_r+0x1a>
    e85c:	movw	r3, #65535	; 0xffff
    e860:	strh.w	r3, [sp, #14]
    e864:	mov	r1, sp
    e866:	ldr	r3, [sp, #120]	; 0x78
    e868:	str	r4, [sp, #8]
    e86a:	str	r4, [sp, #20]
    e86c:	bl	1098c <_svfiprintf_r>
    e870:	subs	r3, r0, #0
    e872:	itt	ge
    e874:	strge	r3, [r5, #0]
    e876:	ldrge	r3, [sp, #0]
    e878:	mov.w	r0, #0
    e87c:	itt	ge
    e87e:	strbge	r0, [r3, #0]
    e880:	ldrge	r0, [sp, #16]
    e882:	b.n	e850 <_vasniprintf_r+0x2c>

0000e884 <memcmp>:
    e884:	push	{r4, lr}
    e886:	subs	r1, #1
    e888:	add	r2, r0
    e88a:	cmp	r0, r2
    e88c:	bne.n	e892 <memcmp+0xe>
    e88e:	movs	r0, #0
    e890:	b.n	e89e <memcmp+0x1a>
    e892:	ldrb	r3, [r0, #0]
    e894:	ldrb.w	r4, [r1, #1]!
    e898:	cmp	r3, r4
    e89a:	beq.n	e8a0 <memcmp+0x1c>
    e89c:	subs	r0, r3, r4
    e89e:	pop	{r4, pc}
    e8a0:	adds	r0, #1
    e8a2:	b.n	e88a <memcmp+0x6>

0000e8a4 <memmove>:
    e8a4:	cmp	r0, r1
    e8a6:	push	{r4, lr}
    e8a8:	add.w	r4, r1, r2
    e8ac:	bls.n	e8b4 <memmove+0x10>
    e8ae:	cmp	r4, r0
    e8b0:	mov	r3, r4
    e8b2:	bhi.n	e8c4 <memmove+0x20>
    e8b4:	subs	r3, r0, #1
    e8b6:	cmp	r1, r4
    e8b8:	beq.n	e8cc <memmove+0x28>
    e8ba:	ldrb.w	r2, [r1], #1
    e8be:	strb.w	r2, [r3, #1]!
    e8c2:	b.n	e8b6 <memmove+0x12>
    e8c4:	add	r2, r0
    e8c6:	mov	r1, r0
    e8c8:	cmp	r2, r1
    e8ca:	bne.n	e8ce <memmove+0x2a>
    e8cc:	pop	{r4, pc}
    e8ce:	ldrb.w	r4, [r3, #-1]!
    e8d2:	strb.w	r4, [r2, #-1]!
    e8d6:	b.n	e8c8 <memmove+0x24>

0000e8d8 <strlcat>:
    e8d8:	push	{r4, r5, r6, lr}
    e8da:	mov	r4, r0
    e8dc:	adds	r6, r2, r0
    e8de:	cmp	r4, r6
    e8e0:	mov	r3, r4
    e8e2:	bne.n	e8f6 <strlcat+0x1e>
    e8e4:	subs	r4, r3, r0
    e8e6:	subs	r2, r2, r4
    e8e8:	subs	r6, r2, #1
    e8ea:	cbnz	r2, e900 <strlcat+0x28>
    e8ec:	mov	r0, r1
    e8ee:	bl	eb40 <strlen>
    e8f2:	add	r0, r4
    e8f4:	pop	{r4, r5, r6, pc}
    e8f6:	ldrb	r5, [r3, #0]
    e8f8:	adds	r4, #1
    e8fa:	cmp	r5, #0
    e8fc:	bne.n	e8de <strlcat+0x6>
    e8fe:	b.n	e8e4 <strlcat+0xc>
    e900:	mov	r5, r1
    e902:	mov	r2, r5
    e904:	ldrb.w	r0, [r5], #1
    e908:	cbnz	r0, e912 <strlcat+0x3a>
    e90a:	subs	r2, r2, r1
    e90c:	strb	r0, [r3, #0]
    e90e:	adds	r0, r2, r4
    e910:	b.n	e8f4 <strlcat+0x1c>
    e912:	cmp	r6, #0
    e914:	beq.n	e902 <strlcat+0x2a>
    e916:	strb.w	r0, [r3], #1
    e91a:	subs	r6, #1
    e91c:	b.n	e902 <strlcat+0x2a>

0000e91e <strlcpy>:
    e91e:	push	{r4, lr}
    e920:	cbz	r2, e948 <strlcpy+0x2a>
    e922:	add	r2, r1
    e924:	mov	r3, r1
    e926:	mov	r4, r3
    e928:	adds	r3, #1
    e92a:	cmp	r3, r2
    e92c:	bne.n	e936 <strlcpy+0x18>
    e92e:	movs	r3, #0
    e930:	strb	r3, [r0, #0]
    e932:	mov	r3, r4
    e934:	b.n	e94a <strlcpy+0x2c>
    e936:	ldrb.w	r4, [r3, #-1]
    e93a:	strb.w	r4, [r0], #1
    e93e:	cmp	r4, #0
    e940:	bne.n	e926 <strlcpy+0x8>
    e942:	subs	r1, r3, r1
    e944:	subs	r0, r1, #1
    e946:	pop	{r4, pc}
    e948:	mov	r3, r1
    e94a:	ldrb.w	r2, [r3], #1
    e94e:	cmp	r2, #0
    e950:	bne.n	e94a <strlcpy+0x2c>
    e952:	b.n	e942 <strlcpy+0x24>

0000e954 <strncmp>:
    e954:	push	{r4, lr}
    e956:	cbz	r2, e974 <strncmp+0x20>
    e958:	subs	r1, #1
    e95a:	adds	r4, r0, r2
    e95c:	ldrb.w	r2, [r0], #1
    e960:	ldrb.w	r3, [r1, #1]!
    e964:	cmp	r2, r3
    e966:	bne.n	e970 <strncmp+0x1c>
    e968:	cmp	r0, r4
    e96a:	beq.n	e970 <strncmp+0x1c>
    e96c:	cmp	r2, #0
    e96e:	bne.n	e95c <strncmp+0x8>
    e970:	subs	r0, r2, r3
    e972:	pop	{r4, pc}
    e974:	mov	r0, r2
    e976:	b.n	e972 <strncmp+0x1e>

0000e978 <_localeconv_r>:
    e978:	ldr	r0, [pc, #0]	; (e97c <_localeconv_r+0x4>)
    e97a:	bx	lr
    e97c:	.word	0x20001d34

0000e980 <_close_r>:
    e980:	push	{r3, r4, r5, lr}
    e982:	ldr	r5, [pc, #24]	; (e99c <_close_r+0x1c>)
    e984:	movs	r3, #0
    e986:	mov	r4, r0
    e988:	mov	r0, r1
    e98a:	str	r3, [r5, #0]
    e98c:	bl	b6ac <_close>
    e990:	adds	r3, r0, #1
    e992:	bne.n	e99a <_close_r+0x1a>
    e994:	ldr	r3, [r5, #0]
    e996:	cbz	r3, e99a <_close_r+0x1a>
    e998:	str	r3, [r4, #0]
    e99a:	pop	{r3, r4, r5, pc}
    e99c:	.word	0x2002cff8

0000e9a0 <_lseek_r>:
    e9a0:	push	{r3, r4, r5, lr}
    e9a2:	ldr	r5, [pc, #28]	; (e9c0 <_lseek_r+0x20>)
    e9a4:	mov	r4, r0
    e9a6:	mov	r0, r1
    e9a8:	mov	r1, r2
    e9aa:	movs	r2, #0
    e9ac:	str	r2, [r5, #0]
    e9ae:	mov	r2, r3
    e9b0:	bl	b6c0 <_lseek>
    e9b4:	adds	r3, r0, #1
    e9b6:	bne.n	e9be <_lseek_r+0x1e>
    e9b8:	ldr	r3, [r5, #0]
    e9ba:	cbz	r3, e9be <_lseek_r+0x1e>
    e9bc:	str	r3, [r4, #0]
    e9be:	pop	{r3, r4, r5, pc}
    e9c0:	.word	0x2002cff8

0000e9c4 <_read_r>:
    e9c4:	push	{r3, r4, r5, lr}
    e9c6:	ldr	r5, [pc, #28]	; (e9e4 <_read_r+0x20>)
    e9c8:	mov	r4, r0
    e9ca:	mov	r0, r1
    e9cc:	mov	r1, r2
    e9ce:	movs	r2, #0
    e9d0:	str	r2, [r5, #0]
    e9d2:	mov	r2, r3
    e9d4:	bl	b6a8 <_read>
    e9d8:	adds	r3, r0, #1
    e9da:	bne.n	e9e2 <_read_r+0x1e>
    e9dc:	ldr	r3, [r5, #0]
    e9de:	cbz	r3, e9e2 <_read_r+0x1e>
    e9e0:	str	r3, [r4, #0]
    e9e2:	pop	{r3, r4, r5, pc}
    e9e4:	.word	0x2002cff8

0000e9e8 <_sbrk_r>:
    e9e8:	push	{r3, r4, r5, lr}
    e9ea:	ldr	r5, [pc, #24]	; (ea04 <_sbrk_r+0x1c>)
    e9ec:	movs	r3, #0
    e9ee:	mov	r4, r0
    e9f0:	mov	r0, r1
    e9f2:	str	r3, [r5, #0]
    e9f4:	bl	b67c <_sbrk>
    e9f8:	adds	r3, r0, #1
    e9fa:	bne.n	ea02 <_sbrk_r+0x1a>
    e9fc:	ldr	r3, [r5, #0]
    e9fe:	cbz	r3, ea02 <_sbrk_r+0x1a>
    ea00:	str	r3, [r4, #0]
    ea02:	pop	{r3, r4, r5, pc}
    ea04:	.word	0x2002cff8

0000ea08 <_write_r>:
    ea08:	push	{r3, r4, r5, lr}
    ea0a:	ldr	r5, [pc, #28]	; (ea28 <_write_r+0x20>)
    ea0c:	mov	r4, r0
    ea0e:	mov	r0, r1
    ea10:	mov	r1, r2
    ea12:	movs	r2, #0
    ea14:	str	r2, [r5, #0]
    ea16:	mov	r2, r3
    ea18:	bl	c4a8 <_write>
    ea1c:	adds	r3, r0, #1
    ea1e:	bne.n	ea26 <_write_r+0x1e>
    ea20:	ldr	r3, [r5, #0]
    ea22:	cbz	r3, ea26 <_write_r+0x1e>
    ea24:	str	r3, [r4, #0]
    ea26:	pop	{r3, r4, r5, pc}
    ea28:	.word	0x2002cff8

0000ea2c <__errno>:
    ea2c:	ldr	r3, [pc, #4]	; (ea34 <__errno+0x8>)
    ea2e:	ldr	r0, [r3, #0]
    ea30:	bx	lr
    ea32:	nop
    ea34:	.word	0x20001e08

0000ea38 <__libc_init_array>:
    ea38:	push	{r4, r5, r6, lr}
    ea3a:	ldr	r5, [pc, #52]	; (ea70 <__libc_init_array+0x38>)
    ea3c:	ldr	r4, [pc, #52]	; (ea74 <__libc_init_array+0x3c>)
    ea3e:	subs	r4, r4, r5
    ea40:	asrs	r4, r4, #2
    ea42:	movs	r6, #0
    ea44:	cmp	r6, r4
    ea46:	bne.n	ea5c <__libc_init_array+0x24>
    ea48:	ldr	r5, [pc, #44]	; (ea78 <__libc_init_array+0x40>)
    ea4a:	ldr	r4, [pc, #48]	; (ea7c <__libc_init_array+0x44>)
    ea4c:	bl	11e50 <___init_veneer>
    ea50:	subs	r4, r4, r5
    ea52:	asrs	r4, r4, #2
    ea54:	movs	r6, #0
    ea56:	cmp	r6, r4
    ea58:	bne.n	ea66 <__libc_init_array+0x2e>
    ea5a:	pop	{r4, r5, r6, pc}
    ea5c:	ldr.w	r3, [r5], #4
    ea60:	blx	r3
    ea62:	adds	r6, #1
    ea64:	b.n	ea44 <__libc_init_array+0xc>
    ea66:	ldr.w	r3, [r5], #4
    ea6a:	blx	r3
    ea6c:	adds	r6, #1
    ea6e:	b.n	ea56 <__libc_init_array+0x1e>
    ea70:	.word	0x600023d0
    ea74:	.word	0x600023d0
    ea78:	.word	0x600023d0
    ea7c:	.word	0x600023e0

0000ea80 <__retarget_lock_acquire_recursive>:
    ea80:	bx	lr

0000ea82 <__retarget_lock_release_recursive>:
    ea82:	bx	lr

0000ea84 <strcpy>:
    ea84:	mov	r3, r0
    ea86:	ldrb.w	r2, [r1], #1
    ea8a:	strb.w	r2, [r3], #1
    ea8e:	cmp	r2, #0
    ea90:	bne.n	ea86 <strcpy+0x2>
    ea92:	bx	lr
	...

0000eaa0 <memchr>:
    eaa0:	and.w	r1, r1, #255	; 0xff
    eaa4:	cmp	r2, #16
    eaa6:	blt.n	eb00 <memchr+0x60>
    eaa8:	tst.w	r0, #7
    eaac:	beq.n	eac0 <memchr+0x20>
    eaae:	ldrb.w	r3, [r0], #1
    eab2:	subs	r2, #1
    eab4:	cmp	r3, r1
    eab6:	beq.n	eb14 <memchr+0x74>
    eab8:	tst.w	r0, #7
    eabc:	cbz	r2, eb10 <memchr+0x70>
    eabe:	bne.n	eaae <memchr+0xe>
    eac0:	push	{r4, r5, r6, r7}
    eac2:	orr.w	r1, r1, r1, lsl #8
    eac6:	orr.w	r1, r1, r1, lsl #16
    eaca:	bic.w	r4, r2, #7
    eace:	mvns.w	r7, #0
    ead2:	movs	r3, #0
    ead4:	ldrd	r5, r6, [r0], #8
    ead8:	subs	r4, #8
    eada:	eor.w	r5, r5, r1
    eade:	eor.w	r6, r6, r1
    eae2:	uadd8	r5, r5, r7
    eae6:	sel	r5, r3, r7
    eaea:	uadd8	r6, r6, r7
    eaee:	sel	r6, r5, r7
    eaf2:	cbnz	r6, eb18 <memchr+0x78>
    eaf4:	bne.n	ead4 <memchr+0x34>
    eaf6:	pop	{r4, r5, r6, r7}
    eaf8:	and.w	r1, r1, #255	; 0xff
    eafc:	and.w	r2, r2, #7
    eb00:	cbz	r2, eb10 <memchr+0x70>
    eb02:	ldrb.w	r3, [r0], #1
    eb06:	subs	r2, #1
    eb08:	eor.w	r3, r3, r1
    eb0c:	cbz	r3, eb14 <memchr+0x74>
    eb0e:	bne.n	eb02 <memchr+0x62>
    eb10:	movs	r0, #0
    eb12:	bx	lr
    eb14:	subs	r0, #1
    eb16:	bx	lr
    eb18:	cmp	r5, #0
    eb1a:	itte	eq
    eb1c:	moveq	r5, r6
    eb1e:	subeq	r0, #3
    eb20:	subne	r0, #7
    eb22:	tst.w	r5, #1
    eb26:	bne.n	eb38 <memchr+0x98>
    eb28:	adds	r0, #1
    eb2a:	tst.w	r5, #256	; 0x100
    eb2e:	ittt	eq
    eb30:	addeq	r0, #1
    eb32:	tsteq.w	r5, #98304	; 0x18000
    eb36:	addeq	r0, #1
    eb38:	pop	{r4, r5, r6, r7}
    eb3a:	subs	r0, #1
    eb3c:	bx	lr
    eb3e:	nop

0000eb40 <strlen>:
    eb40:	mov	r3, r0
    eb42:	ldrb.w	r2, [r3], #1
    eb46:	cmp	r2, #0
    eb48:	bne.n	eb42 <strlen+0x2>
    eb4a:	subs	r0, r3, r0
    eb4c:	subs	r0, #1
    eb4e:	bx	lr

0000eb50 <nan>:
    eb50:	vldr	d0, [pc, #4]	; eb58 <nan+0x8>
    eb54:	bx	lr
    eb56:	nop
    eb58:	.word	0x00000000
    eb5c:	.word	0x7ff80000

0000eb60 <nanf>:
    eb60:	vldr	s0, [pc, #4]	; eb68 <nanf+0x8>
    eb64:	bx	lr
    eb66:	nop
    eb68:	.word	0x7fc00000

0000eb6c <quorem>:
    eb6c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb70:	ldr	r3, [r0, #16]
    eb72:	ldr	r4, [r1, #16]
    eb74:	cmp	r3, r4
    eb76:	mov	r7, r0
    eb78:	blt.n	ec78 <quorem+0x10c>
    eb7a:	subs	r4, #1
    eb7c:	add.w	r8, r1, #20
    eb80:	add.w	r5, r0, #20
    eb84:	add.w	r3, r5, r4, lsl #2
    eb88:	str	r3, [sp, #4]
    eb8a:	ldr.w	r3, [r8, r4, lsl #2]
    eb8e:	ldr.w	r2, [r5, r4, lsl #2]
    eb92:	adds	r3, #1
    eb94:	cmp	r2, r3
    eb96:	mov.w	fp, r4, lsl #2
    eb9a:	add.w	r9, r8, r4, lsl #2
    eb9e:	udiv	r6, r2, r3
    eba2:	bcc.n	ec08 <quorem+0x9c>
    eba4:	mov.w	lr, #0
    eba8:	mov	r0, r8
    ebaa:	mov	ip, r5
    ebac:	mov	sl, lr
    ebae:	ldr.w	r2, [r0], #4
    ebb2:	uxth	r3, r2
    ebb4:	mla	r3, r6, r3, lr
    ebb8:	mov.w	lr, r2, lsr #16
    ebbc:	lsrs	r2, r3, #16
    ebbe:	uxth	r3, r3
    ebc0:	sub.w	r3, sl, r3
    ebc4:	ldr.w	sl, [ip]
    ebc8:	uxtah	r3, r3, sl
    ebcc:	mla	r2, r6, lr, r2
    ebd0:	str	r3, [sp, #0]
    ebd2:	ldr	r3, [sp, #0]
    ebd4:	mov.w	lr, r2, lsr #16
    ebd8:	uxth	r2, r2
    ebda:	rsb	r2, r2, sl, lsr #16
    ebde:	add.w	r2, r2, r3, asr #16
    ebe2:	ldrh.w	r3, [sp]
    ebe6:	cmp	r9, r0
    ebe8:	orr.w	r3, r3, r2, lsl #16
    ebec:	str.w	r3, [ip], #4
    ebf0:	mov.w	sl, r2, asr #16
    ebf4:	bcs.n	ebae <quorem+0x42>
    ebf6:	ldr.w	r3, [r5, fp]
    ebfa:	cbnz	r3, ec08 <quorem+0x9c>
    ebfc:	ldr	r3, [sp, #4]
    ebfe:	subs	r3, #4
    ec00:	cmp	r5, r3
    ec02:	mov	r2, r3
    ec04:	bcc.n	ec60 <quorem+0xf4>
    ec06:	str	r4, [r7, #16]
    ec08:	mov	r0, r7
    ec0a:	bl	10450 <__mcmp>
    ec0e:	cmp	r0, #0
    ec10:	blt.n	ec58 <quorem+0xec>
    ec12:	adds	r6, #1
    ec14:	mov	r1, r5
    ec16:	movs	r0, #0
    ec18:	ldr.w	r2, [r8], #4
    ec1c:	ldr.w	ip, [r1]
    ec20:	uxth	r3, r2
    ec22:	subs	r3, r0, r3
    ec24:	lsrs	r2, r2, #16
    ec26:	uxtah	r3, r3, ip
    ec2a:	rsb	r2, r2, ip, lsr #16
    ec2e:	add.w	r2, r2, r3, asr #16
    ec32:	uxth	r3, r3
    ec34:	orr.w	r3, r3, r2, lsl #16
    ec38:	cmp	r9, r8
    ec3a:	str.w	r3, [r1], #4
    ec3e:	mov.w	r0, r2, asr #16
    ec42:	bcs.n	ec18 <quorem+0xac>
    ec44:	ldr.w	r2, [r5, r4, lsl #2]
    ec48:	add.w	r3, r5, r4, lsl #2
    ec4c:	cbnz	r2, ec58 <quorem+0xec>
    ec4e:	subs	r3, #4
    ec50:	cmp	r5, r3
    ec52:	mov	r2, r3
    ec54:	bcc.n	ec6c <quorem+0x100>
    ec56:	str	r4, [r7, #16]
    ec58:	mov	r0, r6
    ec5a:	add	sp, #12
    ec5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec60:	ldr	r2, [r2, #0]
    ec62:	subs	r3, #4
    ec64:	cmp	r2, #0
    ec66:	bne.n	ec06 <quorem+0x9a>
    ec68:	subs	r4, #1
    ec6a:	b.n	ec00 <quorem+0x94>
    ec6c:	ldr	r2, [r2, #0]
    ec6e:	subs	r3, #4
    ec70:	cmp	r2, #0
    ec72:	bne.n	ec56 <quorem+0xea>
    ec74:	subs	r4, #1
    ec76:	b.n	ec50 <quorem+0xe4>
    ec78:	movs	r0, #0
    ec7a:	b.n	ec5a <quorem+0xee>
    ec7c:	movs	r0, r0
	...

0000ec80 <_dtoa_r>:
    ec80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec84:	vpush	{d8}
    ec88:	ldr	r5, [r0, #28]
    ec8a:	sub	sp, #68	; 0x44
    ec8c:	vstr	d0, [sp, #8]
    ec90:	vmov	r8, r9, d0
    ec94:	ldr	r4, [sp, #112]	; 0x70
    ec96:	str	r1, [sp, #24]
    ec98:	mov	r6, r0
    ec9a:	str	r2, [sp, #32]
    ec9c:	str	r3, [sp, #48]	; 0x30
    ec9e:	cbnz	r5, ecbe <_dtoa_r+0x3e>
    eca0:	movs	r0, #16
    eca2:	bl	c9c0 <malloc>
    eca6:	mov	r2, r0
    eca8:	str	r0, [r6, #28]
    ecaa:	cbnz	r0, ecb6 <_dtoa_r+0x36>
    ecac:	ldr	r3, [pc, #664]	; (ef48 <_dtoa_r+0x2c8>)
    ecae:	movs	r1, #239	; 0xef
    ecb0:	ldr	r0, [pc, #664]	; (ef4c <_dtoa_r+0x2cc>)
    ecb2:	bl	1140c <__assert_func>
    ecb6:	strd	r5, r5, [r0, #4]
    ecba:	str	r5, [r0, #0]
    ecbc:	str	r5, [r0, #12]
    ecbe:	ldr	r3, [r6, #28]
    ecc0:	ldr	r1, [r3, #0]
    ecc2:	cbz	r1, ecda <_dtoa_r+0x5a>
    ecc4:	ldr	r2, [r3, #4]
    ecc6:	str	r2, [r1, #4]
    ecc8:	movs	r3, #1
    ecca:	lsls	r3, r2
    eccc:	str	r3, [r1, #8]
    ecce:	mov	r0, r6
    ecd0:	bl	ff44 <_Bfree>
    ecd4:	ldr	r3, [r6, #28]
    ecd6:	movs	r2, #0
    ecd8:	str	r2, [r3, #0]
    ecda:	subs.w	r3, r9, #0
    ecde:	ittet	lt
    ece0:	biclt.w	r3, r3, #2147483648	; 0x80000000
    ece4:	strlt	r3, [sp, #12]
    ece6:	movge	r3, #0
    ece8:	movlt	r2, #1
    ecea:	ite	ge
    ecec:	strge	r3, [r4, #0]
    ecee:	strlt	r2, [r4, #0]
    ecf0:	ldr	r3, [pc, #604]	; (ef50 <_dtoa_r+0x2d0>)
    ecf2:	ldr	r4, [sp, #12]
    ecf4:	bics	r3, r4
    ecf6:	bne.n	ed32 <_dtoa_r+0xb2>
    ecf8:	ldr	r2, [sp, #48]	; 0x30
    ecfa:	movw	r3, #9999	; 0x270f
    ecfe:	str	r3, [r2, #0]
    ed00:	ubfx	r3, r4, #0, #20
    ed04:	orrs.w	r3, r3, r8
    ed08:	beq.w	f702 <_dtoa_r+0xa82>
    ed0c:	ldr	r3, [sp, #116]	; 0x74
    ed0e:	cbnz	r3, ed2a <_dtoa_r+0xaa>
    ed10:	ldr	r3, [pc, #576]	; (ef54 <_dtoa_r+0x2d4>)
    ed12:	b.n	ed56 <_dtoa_r+0xd6>
    ed14:	ldr	r3, [pc, #576]	; (ef58 <_dtoa_r+0x2d8>)
    ed16:	str	r3, [sp, #4]
    ed18:	adds	r3, #8
    ed1a:	ldr	r2, [sp, #116]	; 0x74
    ed1c:	str	r3, [r2, #0]
    ed1e:	ldr	r0, [sp, #4]
    ed20:	add	sp, #68	; 0x44
    ed22:	vpop	{d8}
    ed26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed2a:	ldr	r3, [pc, #552]	; (ef54 <_dtoa_r+0x2d4>)
    ed2c:	str	r3, [sp, #4]
    ed2e:	adds	r3, #3
    ed30:	b.n	ed1a <_dtoa_r+0x9a>
    ed32:	vldr	d8, [sp, #8]
    ed36:	vcmp.f64	d8, #0.0
    ed3a:	vmrs	APSR_nzcv, fpscr
    ed3e:	bne.n	ed5a <_dtoa_r+0xda>
    ed40:	ldr	r2, [sp, #48]	; 0x30
    ed42:	movs	r3, #1
    ed44:	str	r3, [r2, #0]
    ed46:	ldr	r3, [sp, #116]	; 0x74
    ed48:	cmp	r3, #0
    ed4a:	beq.w	f6fc <_dtoa_r+0xa7c>
    ed4e:	ldr	r3, [pc, #524]	; (ef5c <_dtoa_r+0x2dc>)
    ed50:	ldr	r2, [sp, #116]	; 0x74
    ed52:	str	r3, [r2, #0]
    ed54:	subs	r3, #1
    ed56:	str	r3, [sp, #4]
    ed58:	b.n	ed1e <_dtoa_r+0x9e>
    ed5a:	add	r2, sp, #56	; 0x38
    ed5c:	add	r1, sp, #60	; 0x3c
    ed5e:	mov	r0, r6
    ed60:	vmov.f64	d0, d8
    ed64:	bl	1067c <__d2b>
    ed68:	ubfx	r3, r4, #20, #11
    ed6c:	ldr	r2, [sp, #56]	; 0x38
    ed6e:	mov	r5, r0
    ed70:	cmp	r3, #0
    ed72:	beq.n	ee02 <_dtoa_r+0x182>
    ed74:	vmov.f64	d7, d8
    ed78:	vmov	r1, s17
    ed7c:	ubfx	r1, r1, #0, #20
    ed80:	orr.w	r1, r1, #1069547520	; 0x3fc00000
    ed84:	orr.w	r1, r1, #3145728	; 0x300000
    ed88:	subw	r3, r3, #1023	; 0x3ff
    ed8c:	movs	r0, #0
    ed8e:	vmov	s15, r1
    ed92:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    ed96:	vldr	d5, [pc, #408]	; ef30 <_dtoa_r+0x2b0>
    ed9a:	vsub.f64	d7, d7, d6
    ed9e:	vldr	d6, [pc, #408]	; ef38 <_dtoa_r+0x2b8>
    eda2:	vfma.f64	d6, d7, d5
    eda6:	vldr	d5, [pc, #408]	; ef40 <_dtoa_r+0x2c0>
    edaa:	vmov	s15, r3
    edae:	vcvt.f64.s32	d4, s15
    edb2:	vmov.f64	d7, d6
    edb6:	vfma.f64	d7, d4, d5
    edba:	vcvt.s32.f64	s13, d7
    edbe:	vcmpe.f64	d7, #0.0
    edc2:	vmrs	APSR_nzcv, fpscr
    edc6:	vmov	fp, s13
    edca:	str	r0, [sp, #36]	; 0x24
    edcc:	bpl.n	ede0 <_dtoa_r+0x160>
    edce:	vcvt.f64.s32	d6, s13
    edd2:	vcmp.f64	d6, d7
    edd6:	vmrs	APSR_nzcv, fpscr
    edda:	it	ne
    eddc:	addne.w	fp, fp, #4294967295
    ede0:	cmp.w	fp, #22
    ede4:	bhi.n	ee3e <_dtoa_r+0x1be>
    ede6:	ldr	r1, [pc, #376]	; (ef60 <_dtoa_r+0x2e0>)
    ede8:	add.w	r1, r1, fp, lsl #3
    edec:	vldr	d7, [r1]
    edf0:	vcmpe.f64	d8, d7
    edf4:	vmrs	APSR_nzcv, fpscr
    edf8:	bpl.n	edfe <_dtoa_r+0x17e>
    edfa:	add.w	fp, fp, #4294967295
    edfe:	movs	r1, #0
    ee00:	b.n	ee40 <_dtoa_r+0x1c0>
    ee02:	ldr	r3, [sp, #60]	; 0x3c
    ee04:	add	r3, r2
    ee06:	addw	r1, r3, #1074	; 0x432
    ee0a:	cmp	r1, #32
    ee0c:	itttt	gt
    ee0e:	rsbgt	r1, r1, #64	; 0x40
    ee12:	lslgt	r4, r1
    ee14:	addwgt	r1, r3, #1042	; 0x412
    ee18:	lsrgt.w	r1, r8, r1
    ee1c:	itet	le
    ee1e:	rsble	r1, r1, #32
    ee22:	orrgt	r1, r4
    ee24:	lslle.w	r1, r8, r1
    ee28:	vmov	s15, r1
    ee2c:	vcvt.f64.u32	d7, s15
    ee30:	subs	r3, #1
    ee32:	vmov	r1, s15
    ee36:	movs	r0, #1
    ee38:	sub.w	r1, r1, #32505856	; 0x1f00000
    ee3c:	b.n	ed8e <_dtoa_r+0x10e>
    ee3e:	movs	r1, #1
    ee40:	subs	r2, r2, r3
    ee42:	subs	r3, r2, #1
    ee44:	str	r3, [sp, #20]
    ee46:	ittet	mi
    ee48:	rsbmi	r3, r2, #1
    ee4c:	strmi	r3, [sp, #16]
    ee4e:	movpl	r3, #0
    ee50:	movmi	r3, #0
    ee52:	ite	mi
    ee54:	strmi	r3, [sp, #20]
    ee56:	strpl	r3, [sp, #16]
    ee58:	cmp.w	fp, #0
    ee5c:	str	r1, [sp, #44]	; 0x2c
    ee5e:	blt.n	ee92 <_dtoa_r+0x212>
    ee60:	ldr	r3, [sp, #20]
    ee62:	str.w	fp, [sp, #40]	; 0x28
    ee66:	add	r3, fp
    ee68:	str	r3, [sp, #20]
    ee6a:	movs	r3, #0
    ee6c:	ldr	r2, [sp, #24]
    ee6e:	cmp	r2, #9
    ee70:	bhi.n	ef04 <_dtoa_r+0x284>
    ee72:	cmp	r2, #5
    ee74:	itt	gt
    ee76:	subgt	r2, #4
    ee78:	strgt	r2, [sp, #24]
    ee7a:	ldr	r2, [sp, #24]
    ee7c:	sub.w	r2, r2, #2
    ee80:	ite	gt
    ee82:	movgt	r4, #0
    ee84:	movle	r4, #1
    ee86:	cmp	r2, #3
    ee88:	bhi.n	ef1a <_dtoa_r+0x29a>
    ee8a:	tbb	[pc, r2]
    ee8e:	.short	0x2d0b
    ee90:	.short	0x392b
    ee92:	ldr	r3, [sp, #16]
    ee94:	movs	r2, #0
    ee96:	sub.w	r3, r3, fp
    ee9a:	str	r3, [sp, #16]
    ee9c:	str	r2, [sp, #40]	; 0x28
    ee9e:	rsb	r3, fp, #0
    eea2:	b.n	ee6c <_dtoa_r+0x1ec>
    eea4:	movs	r2, #0
    eea6:	str	r2, [sp, #28]
    eea8:	ldr	r2, [sp, #32]
    eeaa:	cmp	r2, #0
    eeac:	bgt.n	ef20 <_dtoa_r+0x2a0>
    eeae:	mov.w	sl, #1
    eeb2:	mov	r9, sl
    eeb4:	mov	r2, sl
    eeb6:	str.w	sl, [sp, #32]
    eeba:	ldr	r7, [r6, #28]
    eebc:	movs	r1, #0
    eebe:	movs	r0, #4
    eec0:	add.w	ip, r0, #20
    eec4:	cmp	ip, r2
    eec6:	bls.n	ef2a <_dtoa_r+0x2aa>
    eec8:	str	r1, [r7, #4]
    eeca:	mov	r0, r6
    eecc:	str	r3, [sp, #52]	; 0x34
    eece:	bl	fec4 <_Balloc>
    eed2:	ldr	r3, [sp, #52]	; 0x34
    eed4:	str	r0, [sp, #4]
    eed6:	mov	r2, r0
    eed8:	cmp	r0, #0
    eeda:	bne.n	ef68 <_dtoa_r+0x2e8>
    eedc:	ldr	r3, [pc, #132]	; (ef64 <_dtoa_r+0x2e4>)
    eede:	movw	r1, #431	; 0x1af
    eee2:	b.n	ecb0 <_dtoa_r+0x30>
    eee4:	movs	r2, #1
    eee6:	b.n	eea6 <_dtoa_r+0x226>
    eee8:	movs	r2, #0
    eeea:	str	r2, [sp, #28]
    eeec:	ldr	r2, [sp, #32]
    eeee:	add.w	sl, fp, r2
    eef2:	add.w	r9, sl, #1
    eef6:	mov	r2, r9
    eef8:	cmp	r2, #1
    eefa:	it	lt
    eefc:	movlt	r2, #1
    eefe:	b.n	eeba <_dtoa_r+0x23a>
    ef00:	movs	r2, #1
    ef02:	b.n	eeea <_dtoa_r+0x26a>
    ef04:	movs	r4, #1
    ef06:	movs	r2, #0
    ef08:	strd	r2, r4, [sp, #24]
    ef0c:	mov.w	sl, #4294967295
    ef10:	movs	r1, #0
    ef12:	mov	r9, sl
    ef14:	movs	r2, #18
    ef16:	str	r1, [sp, #32]
    ef18:	b.n	eeba <_dtoa_r+0x23a>
    ef1a:	movs	r2, #1
    ef1c:	str	r2, [sp, #28]
    ef1e:	b.n	ef0c <_dtoa_r+0x28c>
    ef20:	ldr.w	sl, [sp, #32]
    ef24:	mov	r9, sl
    ef26:	mov	r2, sl
    ef28:	b.n	eeba <_dtoa_r+0x23a>
    ef2a:	adds	r1, #1
    ef2c:	lsls	r0, r0, #1
    ef2e:	b.n	eec0 <_dtoa_r+0x240>
    ef30:	.word	0x636f4361
    ef34:	.word	0x3fd287a7
    ef38:	.word	0x8b60c8b3
    ef3c:	.word	0x3fc68a28
    ef40:	.word	0x509f79fb
    ef44:	.word	0x3fd34413
    ef48:	.word	0x20001244
    ef4c:	.word	0x2000125b
    ef50:	.word	0x7ff00000
    ef54:	.word	0x20001240
    ef58:	.word	0x20001237
    ef5c:	.word	0x2000105a
    ef60:	.word	0x20000328
    ef64:	.word	0x200012b4
    ef68:	ldr	r2, [r6, #28]
    ef6a:	ldr	r1, [sp, #4]
    ef6c:	str	r1, [r2, #0]
    ef6e:	cmp.w	r9, #14
    ef72:	bhi.n	f04e <_dtoa_r+0x3ce>
    ef74:	cmp	r4, #0
    ef76:	beq.n	f04e <_dtoa_r+0x3ce>
    ef78:	cmp.w	fp, #0
    ef7c:	ble.w	f0c0 <_dtoa_r+0x440>
    ef80:	ldr	r2, [pc, #772]	; (f288 <_dtoa_r+0x608>)
    ef82:	and.w	r1, fp, #15
    ef86:	add.w	r2, r2, r1, lsl #3
    ef8a:	tst.w	fp, #256	; 0x100
    ef8e:	vldr	d7, [r2]
    ef92:	mov.w	r2, fp, asr #4
    ef96:	beq.w	f0a8 <_dtoa_r+0x428>
    ef9a:	ldr	r1, [pc, #752]	; (f28c <_dtoa_r+0x60c>)
    ef9c:	vldr	d6, [r1, #32]
    efa0:	vdiv.f64	d6, d8, d6
    efa4:	vstr	d6, [sp, #8]
    efa8:	and.w	r2, r2, #15
    efac:	movs	r1, #3
    efae:	ldr	r0, [pc, #732]	; (f28c <_dtoa_r+0x60c>)
    efb0:	cmp	r2, #0
    efb2:	bne.n	f0ac <_dtoa_r+0x42c>
    efb4:	vldr	d6, [sp, #8]
    efb8:	vdiv.f64	d7, d6, d7
    efbc:	vstr	d7, [sp, #8]
    efc0:	ldr	r2, [sp, #44]	; 0x2c
    efc2:	vldr	d7, [sp, #8]
    efc6:	cmp	r2, #0
    efc8:	beq.w	f10c <_dtoa_r+0x48c>
    efcc:	vmov.f64	d6, #112	; 0x3f800000  1.0
    efd0:	vcmpe.f64	d7, d6
    efd4:	vmrs	APSR_nzcv, fpscr
    efd8:	bpl.w	f10c <_dtoa_r+0x48c>
    efdc:	cmp.w	r9, #0
    efe0:	beq.w	f10c <_dtoa_r+0x48c>
    efe4:	cmp.w	sl, #0
    efe8:	ble.n	f04a <_dtoa_r+0x3ca>
    efea:	vmov.f64	d6, #36	; 0x41200000  10.0
    efee:	vmul.f64	d7, d7, d6
    eff2:	vstr	d7, [sp, #8]
    eff6:	add.w	r2, fp, #4294967295
    effa:	adds	r1, #1
    effc:	mov	r4, sl
    effe:	vldr	d6, [sp, #8]
    f002:	vmov.f64	d5, #28	; 0x40e00000  7.0
    f006:	vmov	s15, r1
    f00a:	vcvt.f64.s32	d7, s15
    f00e:	vfma.f64	d5, d7, d6
    f012:	vmov	r7, s11
    f016:	vmov	r0, r1, d5
    f01a:	sub.w	r1, r7, #54525952	; 0x3400000
    f01e:	cmp	r4, #0
    f020:	bne.n	f112 <_dtoa_r+0x492>
    f022:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f026:	vsub.f64	d6, d6, d7
    f02a:	vmov	d7, r0, r1
    f02e:	vcmpe.f64	d6, d7
    f032:	vmrs	APSR_nzcv, fpscr
    f036:	bgt.w	f50e <_dtoa_r+0x88e>
    f03a:	vneg.f64	d7, d7
    f03e:	vcmpe.f64	d6, d7
    f042:	vmrs	APSR_nzcv, fpscr
    f046:	bmi.w	f50a <_dtoa_r+0x88a>
    f04a:	vstr	d8, [sp, #8]
    f04e:	ldr	r2, [sp, #60]	; 0x3c
    f050:	cmp	r2, #0
    f052:	blt.w	f290 <_dtoa_r+0x610>
    f056:	cmp.w	fp, #14
    f05a:	bgt.w	f290 <_dtoa_r+0x610>
    f05e:	ldr	r3, [pc, #552]	; (f288 <_dtoa_r+0x608>)
    f060:	add.w	r3, r3, fp, lsl #3
    f064:	vldr	d6, [r3]
    f068:	ldr	r3, [sp, #32]
    f06a:	cmp	r3, #0
    f06c:	bge.w	f1de <_dtoa_r+0x55e>
    f070:	cmp.w	r9, #0
    f074:	bgt.w	f1de <_dtoa_r+0x55e>
    f078:	bne.w	f508 <_dtoa_r+0x888>
    f07c:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f080:	vmul.f64	d6, d6, d7
    f084:	vldr	d7, [sp, #8]
    f088:	vcmpe.f64	d6, d7
    f08c:	vmrs	APSR_nzcv, fpscr
    f090:	mov	r4, r9
    f092:	mov	r7, r9
    f094:	bge.w	f4d0 <_dtoa_r+0x850>
    f098:	ldr.w	r8, [sp, #4]
    f09c:	movs	r3, #49	; 0x31
    f09e:	strb.w	r3, [r8], #1
    f0a2:	add.w	fp, fp, #1
    f0a6:	b.n	f4da <_dtoa_r+0x85a>
    f0a8:	movs	r1, #2
    f0aa:	b.n	efae <_dtoa_r+0x32e>
    f0ac:	lsls	r4, r2, #31
    f0ae:	bpl.n	f0ba <_dtoa_r+0x43a>
    f0b0:	vldr	d6, [r0]
    f0b4:	adds	r1, #1
    f0b6:	vmul.f64	d7, d7, d6
    f0ba:	asrs	r2, r2, #1
    f0bc:	adds	r0, #8
    f0be:	b.n	efb0 <_dtoa_r+0x330>
    f0c0:	beq.n	f108 <_dtoa_r+0x488>
    f0c2:	rsb	r2, fp, #0
    f0c6:	ldr	r1, [pc, #448]	; (f288 <_dtoa_r+0x608>)
    f0c8:	and.w	r0, r2, #15
    f0cc:	add.w	r1, r1, r0, lsl #3
    f0d0:	vldr	d7, [r1]
    f0d4:	vmul.f64	d7, d8, d7
    f0d8:	vstr	d7, [sp, #8]
    f0dc:	ldr	r0, [pc, #428]	; (f28c <_dtoa_r+0x60c>)
    f0de:	asrs	r2, r2, #4
    f0e0:	movs	r4, #0
    f0e2:	movs	r1, #2
    f0e4:	cbnz	r2, f0f2 <_dtoa_r+0x472>
    f0e6:	cmp	r4, #0
    f0e8:	beq.w	efc0 <_dtoa_r+0x340>
    f0ec:	vstr	d7, [sp, #8]
    f0f0:	b.n	efc0 <_dtoa_r+0x340>
    f0f2:	lsls	r7, r2, #31
    f0f4:	bpl.n	f102 <_dtoa_r+0x482>
    f0f6:	vldr	d6, [r0]
    f0fa:	adds	r1, #1
    f0fc:	movs	r4, #1
    f0fe:	vmul.f64	d7, d7, d6
    f102:	asrs	r2, r2, #1
    f104:	adds	r0, #8
    f106:	b.n	f0e4 <_dtoa_r+0x464>
    f108:	movs	r1, #2
    f10a:	b.n	efc0 <_dtoa_r+0x340>
    f10c:	mov	r2, fp
    f10e:	mov	r4, r9
    f110:	b.n	effe <_dtoa_r+0x37e>
    f112:	vmov	d7, r0, r1
    f116:	ldr	r1, [pc, #368]	; (f288 <_dtoa_r+0x608>)
    f118:	add.w	r1, r1, r4, lsl #3
    f11c:	vldr	d4, [r1, #-8]
    f120:	ldr	r1, [sp, #4]
    f122:	add	r4, r1
    f124:	ldr	r1, [sp, #28]
    f126:	cbz	r1, f17e <_dtoa_r+0x4fe>
    f128:	vmov.f64	d3, #96	; 0x3f000000  0.5
    f12c:	vmov.f64	d2, #112	; 0x3f800000  1.0
    f130:	ldr.w	r8, [sp, #4]
    f134:	vdiv.f64	d5, d3, d4
    f138:	vmov.f64	d3, #36	; 0x41200000  10.0
    f13c:	vsub.f64	d7, d5, d7
    f140:	vcvt.s32.f64	s9, d6
    f144:	vmov	r1, s9
    f148:	vcvt.f64.s32	d5, s9
    f14c:	adds	r1, #48	; 0x30
    f14e:	vsub.f64	d6, d6, d5
    f152:	vcmpe.f64	d6, d7
    f156:	vmrs	APSR_nzcv, fpscr
    f15a:	strb.w	r1, [r8], #1
    f15e:	bmi.n	f1d4 <_dtoa_r+0x554>
    f160:	vsub.f64	d5, d2, d6
    f164:	vcmpe.f64	d5, d7
    f168:	vmrs	APSR_nzcv, fpscr
    f16c:	bmi.n	f254 <_dtoa_r+0x5d4>
    f16e:	cmp	r8, r4
    f170:	beq.w	f04a <_dtoa_r+0x3ca>
    f174:	vmul.f64	d7, d7, d3
    f178:	vmul.f64	d6, d6, d3
    f17c:	b.n	f140 <_dtoa_r+0x4c0>
    f17e:	ldr.w	r8, [sp, #4]
    f182:	vmul.f64	d7, d7, d4
    f186:	mov	r0, r4
    f188:	vmov.f64	d3, #36	; 0x41200000  10.0
    f18c:	vcvt.s32.f64	s9, d6
    f190:	vmov	r1, s9
    f194:	adds	r1, #48	; 0x30
    f196:	strb.w	r1, [r8], #1
    f19a:	cmp	r8, r4
    f19c:	vcvt.f64.s32	d5, s9
    f1a0:	vsub.f64	d6, d6, d5
    f1a4:	bne.n	f1d8 <_dtoa_r+0x558>
    f1a6:	vmov.f64	d5, #96	; 0x3f000000  0.5
    f1aa:	vadd.f64	d4, d7, d5
    f1ae:	vcmpe.f64	d6, d4
    f1b2:	vmrs	APSR_nzcv, fpscr
    f1b6:	bgt.n	f254 <_dtoa_r+0x5d4>
    f1b8:	vsub.f64	d5, d5, d7
    f1bc:	vcmpe.f64	d6, d5
    f1c0:	vmrs	APSR_nzcv, fpscr
    f1c4:	bpl.w	f04a <_dtoa_r+0x3ca>
    f1c8:	mov	r8, r0
    f1ca:	subs	r0, #1
    f1cc:	ldrb.w	r3, [r8, #-1]
    f1d0:	cmp	r3, #48	; 0x30
    f1d2:	beq.n	f1c8 <_dtoa_r+0x548>
    f1d4:	mov	fp, r2
    f1d6:	b.n	f22e <_dtoa_r+0x5ae>
    f1d8:	vmul.f64	d6, d6, d3
    f1dc:	b.n	f18c <_dtoa_r+0x50c>
    f1de:	vldr	d7, [sp, #8]
    f1e2:	vmov.f64	d4, #36	; 0x41200000  10.0
    f1e6:	ldr.w	r8, [sp, #4]
    f1ea:	vdiv.f64	d5, d7, d6
    f1ee:	vcvt.s32.f64	s10, d5
    f1f2:	vmov	r3, s10
    f1f6:	adds	r3, #48	; 0x30
    f1f8:	strb.w	r3, [r8], #1
    f1fc:	ldr	r3, [sp, #4]
    f1fe:	sub.w	r3, r8, r3
    f202:	cmp	r9, r3
    f204:	vcvt.f64.s32	d3, s10
    f208:	vfms.f64	d7, d3, d6
    f20c:	bne.n	f276 <_dtoa_r+0x5f6>
    f20e:	vadd.f64	d7, d7, d7
    f212:	vcmpe.f64	d7, d6
    f216:	vmrs	APSR_nzcv, fpscr
    f21a:	bgt.n	f252 <_dtoa_r+0x5d2>
    f21c:	vcmp.f64	d7, d6
    f220:	vmrs	APSR_nzcv, fpscr
    f224:	bne.n	f22e <_dtoa_r+0x5ae>
    f226:	vmov	r3, s10
    f22a:	lsls	r1, r3, #31
    f22c:	bmi.n	f252 <_dtoa_r+0x5d2>
    f22e:	mov	r1, r5
    f230:	mov	r0, r6
    f232:	bl	ff44 <_Bfree>
    f236:	movs	r3, #0
    f238:	ldr	r2, [sp, #48]	; 0x30
    f23a:	strb.w	r3, [r8]
    f23e:	add.w	r3, fp, #1
    f242:	str	r3, [r2, #0]
    f244:	ldr	r3, [sp, #116]	; 0x74
    f246:	cmp	r3, #0
    f248:	beq.w	ed1e <_dtoa_r+0x9e>
    f24c:	str.w	r8, [r3]
    f250:	b.n	ed1e <_dtoa_r+0x9e>
    f252:	mov	r2, fp
    f254:	mov	r3, r8
    f256:	mov	r8, r3
    f258:	ldrb.w	r1, [r3, #-1]!
    f25c:	cmp	r1, #57	; 0x39
    f25e:	bne.n	f26e <_dtoa_r+0x5ee>
    f260:	ldr	r1, [sp, #4]
    f262:	cmp	r1, r3
    f264:	bne.n	f256 <_dtoa_r+0x5d6>
    f266:	ldr	r0, [sp, #4]
    f268:	movs	r1, #48	; 0x30
    f26a:	adds	r2, #1
    f26c:	strb	r1, [r0, #0]
    f26e:	ldrb	r1, [r3, #0]
    f270:	adds	r1, #1
    f272:	strb	r1, [r3, #0]
    f274:	b.n	f1d4 <_dtoa_r+0x554>
    f276:	vmul.f64	d7, d7, d4
    f27a:	vcmp.f64	d7, #0.0
    f27e:	vmrs	APSR_nzcv, fpscr
    f282:	bne.n	f1ea <_dtoa_r+0x56a>
    f284:	b.n	f22e <_dtoa_r+0x5ae>
    f286:	nop
    f288:	.word	0x20000328
    f28c:	.word	0x20000300
    f290:	ldr	r1, [sp, #28]
    f292:	cmp	r1, #0
    f294:	beq.w	f438 <_dtoa_r+0x7b8>
    f298:	ldr	r1, [sp, #24]
    f29a:	cmp	r1, #1
    f29c:	bgt.w	f408 <_dtoa_r+0x788>
    f2a0:	ldr	r1, [sp, #36]	; 0x24
    f2a2:	cmp	r1, #0
    f2a4:	beq.w	f400 <_dtoa_r+0x780>
    f2a8:	addw	r2, r2, #1075	; 0x433
    f2ac:	ldr.w	r8, [sp, #16]
    f2b0:	mov	r4, r3
    f2b2:	str	r3, [sp, #36]	; 0x24
    f2b4:	ldr	r3, [sp, #16]
    f2b6:	add	r3, r2
    f2b8:	str	r3, [sp, #16]
    f2ba:	ldr	r3, [sp, #20]
    f2bc:	movs	r1, #1
    f2be:	add	r3, r2
    f2c0:	mov	r0, r6
    f2c2:	str	r3, [sp, #20]
    f2c4:	bl	10144 <__i2b>
    f2c8:	ldr	r3, [sp, #36]	; 0x24
    f2ca:	mov	r7, r0
    f2cc:	cmp.w	r8, #0
    f2d0:	beq.n	f2ee <_dtoa_r+0x66e>
    f2d2:	ldr	r2, [sp, #20]
    f2d4:	cmp	r2, #0
    f2d6:	ble.n	f2ee <_dtoa_r+0x66e>
    f2d8:	cmp	r2, r8
    f2da:	ldr	r1, [sp, #16]
    f2dc:	it	ge
    f2de:	movge	r2, r8
    f2e0:	subs	r1, r1, r2
    f2e2:	str	r1, [sp, #16]
    f2e4:	ldr	r1, [sp, #20]
    f2e6:	sub.w	r8, r8, r2
    f2ea:	subs	r2, r1, r2
    f2ec:	str	r2, [sp, #20]
    f2ee:	cbz	r3, f332 <_dtoa_r+0x6b2>
    f2f0:	ldr	r2, [sp, #28]
    f2f2:	cmp	r2, #0
    f2f4:	beq.w	f442 <_dtoa_r+0x7c2>
    f2f8:	cmp	r4, #0
    f2fa:	ble.n	f324 <_dtoa_r+0x6a4>
    f2fc:	mov	r1, r7
    f2fe:	mov	r2, r4
    f300:	mov	r0, r6
    f302:	str	r3, [sp, #52]	; 0x34
    f304:	bl	102c4 <__pow5mult>
    f308:	mov	r2, r5
    f30a:	mov	r1, r0
    f30c:	mov	r7, r0
    f30e:	mov	r0, r6
    f310:	bl	10170 <__multiply>
    f314:	mov	r1, r5
    f316:	str	r0, [sp, #36]	; 0x24
    f318:	mov	r0, r6
    f31a:	bl	ff44 <_Bfree>
    f31e:	ldr	r2, [sp, #36]	; 0x24
    f320:	ldr	r3, [sp, #52]	; 0x34
    f322:	mov	r5, r2
    f324:	subs	r2, r3, r4
    f326:	beq.n	f332 <_dtoa_r+0x6b2>
    f328:	mov	r1, r5
    f32a:	mov	r0, r6
    f32c:	bl	102c4 <__pow5mult>
    f330:	mov	r5, r0
    f332:	movs	r1, #1
    f334:	mov	r0, r6
    f336:	bl	10144 <__i2b>
    f33a:	ldr	r3, [sp, #40]	; 0x28
    f33c:	cmp	r3, #0
    f33e:	mov	r4, r0
    f340:	ble.w	f446 <_dtoa_r+0x7c6>
    f344:	mov	r2, r3
    f346:	mov	r1, r0
    f348:	mov	r0, r6
    f34a:	bl	102c4 <__pow5mult>
    f34e:	ldr	r3, [sp, #24]
    f350:	cmp	r3, #1
    f352:	mov	r4, r0
    f354:	ble.n	f44c <_dtoa_r+0x7cc>
    f356:	movs	r3, #0
    f358:	str	r3, [sp, #36]	; 0x24
    f35a:	ldr	r2, [r4, #16]
    f35c:	add.w	r2, r4, r2, lsl #2
    f360:	ldr	r0, [r2, #16]
    f362:	bl	100a8 <__hi0bits>
    f366:	rsb	r0, r0, #32
    f36a:	ldr	r3, [sp, #20]
    f36c:	add	r0, r3
    f36e:	ands.w	r0, r0, #31
    f372:	beq.w	f49c <_dtoa_r+0x81c>
    f376:	rsb	r2, r0, #32
    f37a:	cmp	r2, #4
    f37c:	ble.w	f48a <_dtoa_r+0x80a>
    f380:	ldr	r3, [sp, #16]
    f382:	rsb	r0, r0, #28
    f386:	add	r3, r0
    f388:	str	r3, [sp, #16]
    f38a:	ldr	r3, [sp, #20]
    f38c:	add	r8, r0
    f38e:	add	r3, r0
    f390:	str	r3, [sp, #20]
    f392:	ldr	r3, [sp, #16]
    f394:	cmp	r3, #0
    f396:	ble.n	f3a4 <_dtoa_r+0x724>
    f398:	mov	r1, r5
    f39a:	mov	r2, r3
    f39c:	mov	r0, r6
    f39e:	bl	10378 <__lshift>
    f3a2:	mov	r5, r0
    f3a4:	ldr	r3, [sp, #20]
    f3a6:	cmp	r3, #0
    f3a8:	ble.n	f3b6 <_dtoa_r+0x736>
    f3aa:	mov	r1, r4
    f3ac:	mov	r2, r3
    f3ae:	mov	r0, r6
    f3b0:	bl	10378 <__lshift>
    f3b4:	mov	r4, r0
    f3b6:	ldr	r3, [sp, #44]	; 0x2c
    f3b8:	cmp	r3, #0
    f3ba:	beq.n	f4a0 <_dtoa_r+0x820>
    f3bc:	mov	r1, r4
    f3be:	mov	r0, r5
    f3c0:	bl	10450 <__mcmp>
    f3c4:	cmp	r0, #0
    f3c6:	bge.n	f4a0 <_dtoa_r+0x820>
    f3c8:	movs	r3, #0
    f3ca:	mov	r1, r5
    f3cc:	movs	r2, #10
    f3ce:	mov	r0, r6
    f3d0:	bl	ff88 <__multadd>
    f3d4:	ldr	r3, [sp, #28]
    f3d6:	add.w	fp, fp, #4294967295
    f3da:	mov	r5, r0
    f3dc:	cmp	r3, #0
    f3de:	beq.w	f710 <_dtoa_r+0xa90>
    f3e2:	mov	r1, r7
    f3e4:	movs	r3, #0
    f3e6:	movs	r2, #10
    f3e8:	mov	r0, r6
    f3ea:	bl	ff88 <__multadd>
    f3ee:	cmp.w	sl, #0
    f3f2:	mov	r7, r0
    f3f4:	bgt.w	f51e <_dtoa_r+0x89e>
    f3f8:	ldr	r3, [sp, #24]
    f3fa:	cmp	r3, #2
    f3fc:	bgt.n	f4ae <_dtoa_r+0x82e>
    f3fe:	b.n	f51e <_dtoa_r+0x89e>
    f400:	ldr	r2, [sp, #56]	; 0x38
    f402:	rsb	r2, r2, #54	; 0x36
    f406:	b.n	f2ac <_dtoa_r+0x62c>
    f408:	add.w	r4, r9, #4294967295
    f40c:	cmp	r3, r4
    f40e:	itttt	lt
    f410:	sublt	r2, r4, r3
    f412:	ldrlt	r3, [sp, #40]	; 0x28
    f414:	addlt	r3, r3, r2
    f416:	strlt	r3, [sp, #40]	; 0x28
    f418:	itee	ge
    f41a:	subge	r4, r3, r4
    f41c:	movlt	r3, r4
    f41e:	movlt	r4, #0
    f420:	cmp.w	r9, #0
    f424:	itete	lt
    f426:	ldrlt	r2, [sp, #16]
    f428:	ldrge.w	r8, [sp, #16]
    f42c:	sublt.w	r8, r2, r9
    f430:	movge	r2, r9
    f432:	it	lt
    f434:	movlt	r2, #0
    f436:	b.n	f2b2 <_dtoa_r+0x632>
    f438:	ldr.w	r8, [sp, #16]
    f43c:	ldr	r7, [sp, #28]
    f43e:	mov	r4, r3
    f440:	b.n	f2cc <_dtoa_r+0x64c>
    f442:	mov	r2, r3
    f444:	b.n	f328 <_dtoa_r+0x6a8>
    f446:	ldr	r3, [sp, #24]
    f448:	cmp	r3, #1
    f44a:	bgt.n	f47e <_dtoa_r+0x7fe>
    f44c:	ldr	r3, [sp, #8]
    f44e:	cbnz	r3, f47e <_dtoa_r+0x7fe>
    f450:	ldr	r3, [sp, #12]
    f452:	ubfx	r2, r3, #0, #20
    f456:	cbnz	r2, f482 <_dtoa_r+0x802>
    f458:	bic.w	r2, r3, #2147483648	; 0x80000000
    f45c:	lsrs	r2, r2, #20
    f45e:	lsls	r2, r2, #20
    f460:	cbz	r2, f486 <_dtoa_r+0x806>
    f462:	ldr	r3, [sp, #16]
    f464:	adds	r3, #1
    f466:	str	r3, [sp, #16]
    f468:	ldr	r3, [sp, #20]
    f46a:	adds	r3, #1
    f46c:	str	r3, [sp, #20]
    f46e:	movs	r3, #1
    f470:	str	r3, [sp, #36]	; 0x24
    f472:	ldr	r3, [sp, #40]	; 0x28
    f474:	cmp	r3, #0
    f476:	bne.w	f35a <_dtoa_r+0x6da>
    f47a:	movs	r0, #1
    f47c:	b.n	f36a <_dtoa_r+0x6ea>
    f47e:	movs	r3, #0
    f480:	b.n	f470 <_dtoa_r+0x7f0>
    f482:	ldr	r3, [sp, #8]
    f484:	b.n	f470 <_dtoa_r+0x7f0>
    f486:	str	r2, [sp, #36]	; 0x24
    f488:	b.n	f472 <_dtoa_r+0x7f2>
    f48a:	beq.n	f392 <_dtoa_r+0x712>
    f48c:	ldr	r3, [sp, #16]
    f48e:	adds	r2, #28
    f490:	add	r3, r2
    f492:	str	r3, [sp, #16]
    f494:	ldr	r3, [sp, #20]
    f496:	add	r8, r2
    f498:	add	r3, r2
    f49a:	b.n	f390 <_dtoa_r+0x710>
    f49c:	mov	r2, r0
    f49e:	b.n	f48c <_dtoa_r+0x80c>
    f4a0:	cmp.w	r9, #0
    f4a4:	bgt.n	f514 <_dtoa_r+0x894>
    f4a6:	ldr	r3, [sp, #24]
    f4a8:	cmp	r3, #2
    f4aa:	ble.n	f514 <_dtoa_r+0x894>
    f4ac:	mov	sl, r9
    f4ae:	cmp.w	sl, #0
    f4b2:	bne.n	f4d0 <_dtoa_r+0x850>
    f4b4:	mov	r1, r4
    f4b6:	mov	r3, sl
    f4b8:	movs	r2, #5
    f4ba:	mov	r0, r6
    f4bc:	bl	ff88 <__multadd>
    f4c0:	mov	r1, r0
    f4c2:	mov	r4, r0
    f4c4:	mov	r0, r5
    f4c6:	bl	10450 <__mcmp>
    f4ca:	cmp	r0, #0
    f4cc:	bgt.w	f098 <_dtoa_r+0x418>
    f4d0:	ldr	r3, [sp, #32]
    f4d2:	ldr.w	r8, [sp, #4]
    f4d6:	mvn.w	fp, r3
    f4da:	mov.w	r9, #0
    f4de:	mov	r1, r4
    f4e0:	mov	r0, r6
    f4e2:	bl	ff44 <_Bfree>
    f4e6:	cmp	r7, #0
    f4e8:	beq.w	f22e <_dtoa_r+0x5ae>
    f4ec:	cmp.w	r9, #0
    f4f0:	beq.n	f4fe <_dtoa_r+0x87e>
    f4f2:	cmp	r9, r7
    f4f4:	beq.n	f4fe <_dtoa_r+0x87e>
    f4f6:	mov	r1, r9
    f4f8:	mov	r0, r6
    f4fa:	bl	ff44 <_Bfree>
    f4fe:	mov	r1, r7
    f500:	mov	r0, r6
    f502:	bl	ff44 <_Bfree>
    f506:	b.n	f22e <_dtoa_r+0x5ae>
    f508:	movs	r4, #0
    f50a:	mov	r7, r4
    f50c:	b.n	f4d0 <_dtoa_r+0x850>
    f50e:	mov	fp, r2
    f510:	mov	r7, r4
    f512:	b.n	f098 <_dtoa_r+0x418>
    f514:	ldr	r3, [sp, #28]
    f516:	mov	sl, r9
    f518:	cmp	r3, #0
    f51a:	beq.w	f71e <_dtoa_r+0xa9e>
    f51e:	cmp.w	r8, #0
    f522:	ble.n	f530 <_dtoa_r+0x8b0>
    f524:	mov	r1, r7
    f526:	mov	r2, r8
    f528:	mov	r0, r6
    f52a:	bl	10378 <__lshift>
    f52e:	mov	r7, r0
    f530:	ldr	r3, [sp, #36]	; 0x24
    f532:	cmp	r3, #0
    f534:	beq.n	f5f2 <_dtoa_r+0x972>
    f536:	ldr	r1, [r7, #4]
    f538:	mov	r0, r6
    f53a:	bl	fec4 <_Balloc>
    f53e:	mov	r8, r0
    f540:	cbnz	r0, f54e <_dtoa_r+0x8ce>
    f542:	ldr	r3, [pc, #520]	; (f74c <_dtoa_r+0xacc>)
    f544:	mov	r2, r0
    f546:	movw	r1, #751	; 0x2ef
    f54a:	b.w	ecb0 <_dtoa_r+0x30>
    f54e:	ldr	r2, [r7, #16]
    f550:	adds	r2, #2
    f552:	lsls	r2, r2, #2
    f554:	add.w	r1, r7, #12
    f558:	adds	r0, #12
    f55a:	bl	9f88 <memcpy>
    f55e:	movs	r2, #1
    f560:	mov	r1, r8
    f562:	mov	r0, r6
    f564:	bl	10378 <__lshift>
    f568:	ldr	r3, [sp, #4]
    f56a:	adds	r3, #1
    f56c:	str	r3, [sp, #16]
    f56e:	ldr	r3, [sp, #4]
    f570:	add	r3, sl
    f572:	str	r3, [sp, #32]
    f574:	ldr	r3, [sp, #8]
    f576:	and.w	r3, r3, #1
    f57a:	mov	r9, r7
    f57c:	str	r3, [sp, #28]
    f57e:	mov	r7, r0
    f580:	ldr	r3, [sp, #16]
    f582:	mov	r1, r4
    f584:	subs	r3, #1
    f586:	mov	r0, r5
    f588:	str	r3, [sp, #8]
    f58a:	bl	eb6c <quorem>
    f58e:	mov	r3, r0
    f590:	adds	r3, #48	; 0x30
    f592:	str	r0, [sp, #20]
    f594:	mov	r1, r9
    f596:	mov	r0, r5
    f598:	str	r3, [sp, #36]	; 0x24
    f59a:	bl	10450 <__mcmp>
    f59e:	mov	r2, r7
    f5a0:	mov	sl, r0
    f5a2:	mov	r1, r4
    f5a4:	mov	r0, r6
    f5a6:	bl	10488 <__mdiff>
    f5aa:	ldr	r2, [r0, #12]
    f5ac:	ldr	r3, [sp, #36]	; 0x24
    f5ae:	mov	r8, r0
    f5b0:	cbnz	r2, f5f6 <_dtoa_r+0x976>
    f5b2:	mov	r1, r0
    f5b4:	mov	r0, r5
    f5b6:	bl	10450 <__mcmp>
    f5ba:	ldr	r3, [sp, #36]	; 0x24
    f5bc:	mov	r2, r0
    f5be:	mov	r1, r8
    f5c0:	mov	r0, r6
    f5c2:	strd	r3, r2, [sp, #36]	; 0x24
    f5c6:	bl	ff44 <_Bfree>
    f5ca:	ldr	r3, [sp, #24]
    f5cc:	ldr	r2, [sp, #40]	; 0x28
    f5ce:	ldr.w	r8, [sp, #16]
    f5d2:	orr.w	r1, r3, r2
    f5d6:	ldr	r3, [sp, #28]
    f5d8:	orrs	r1, r3
    f5da:	ldr	r3, [sp, #36]	; 0x24
    f5dc:	bne.n	f5fa <_dtoa_r+0x97a>
    f5de:	cmp	r3, #57	; 0x39
    f5e0:	beq.n	f636 <_dtoa_r+0x9b6>
    f5e2:	cmp.w	sl, #0
    f5e6:	ble.n	f5ec <_dtoa_r+0x96c>
    f5e8:	ldr	r3, [sp, #20]
    f5ea:	adds	r3, #49	; 0x31
    f5ec:	ldr	r2, [sp, #8]
    f5ee:	strb	r3, [r2, #0]
    f5f0:	b.n	f4de <_dtoa_r+0x85e>
    f5f2:	mov	r0, r7
    f5f4:	b.n	f568 <_dtoa_r+0x8e8>
    f5f6:	movs	r2, #1
    f5f8:	b.n	f5be <_dtoa_r+0x93e>
    f5fa:	cmp.w	sl, #0
    f5fe:	blt.n	f60e <_dtoa_r+0x98e>
    f600:	ldr	r1, [sp, #24]
    f602:	orr.w	sl, r1, sl
    f606:	ldr	r1, [sp, #28]
    f608:	orrs.w	sl, sl, r1
    f60c:	bne.n	f650 <_dtoa_r+0x9d0>
    f60e:	cmp	r2, #0
    f610:	ble.n	f5ec <_dtoa_r+0x96c>
    f612:	mov	r1, r5
    f614:	movs	r2, #1
    f616:	mov	r0, r6
    f618:	str	r3, [sp, #16]
    f61a:	bl	10378 <__lshift>
    f61e:	mov	r1, r4
    f620:	mov	r5, r0
    f622:	bl	10450 <__mcmp>
    f626:	cmp	r0, #0
    f628:	ldr	r3, [sp, #16]
    f62a:	bgt.n	f632 <_dtoa_r+0x9b2>
    f62c:	bne.n	f5ec <_dtoa_r+0x96c>
    f62e:	lsls	r2, r3, #31
    f630:	bpl.n	f5ec <_dtoa_r+0x96c>
    f632:	cmp	r3, #57	; 0x39
    f634:	bne.n	f5e8 <_dtoa_r+0x968>
    f636:	ldr	r2, [sp, #8]
    f638:	movs	r3, #57	; 0x39
    f63a:	strb	r3, [r2, #0]
    f63c:	mov	r3, r8
    f63e:	mov	r8, r3
    f640:	subs	r3, #1
    f642:	ldrb.w	r2, [r8, #-1]
    f646:	cmp	r2, #57	; 0x39
    f648:	beq.n	f6ee <_dtoa_r+0xa6e>
    f64a:	adds	r2, #1
    f64c:	strb	r2, [r3, #0]
    f64e:	b.n	f4de <_dtoa_r+0x85e>
    f650:	cmp	r2, #0
    f652:	ble.n	f65c <_dtoa_r+0x9dc>
    f654:	cmp	r3, #57	; 0x39
    f656:	beq.n	f636 <_dtoa_r+0x9b6>
    f658:	adds	r3, #1
    f65a:	b.n	f5ec <_dtoa_r+0x96c>
    f65c:	ldr	r2, [sp, #16]
    f65e:	ldr	r1, [sp, #32]
    f660:	strb.w	r3, [r2, #-1]
    f664:	cmp	r2, r1
    f666:	beq.n	f6c0 <_dtoa_r+0xa40>
    f668:	mov	r1, r5
    f66a:	movs	r3, #0
    f66c:	movs	r2, #10
    f66e:	mov	r0, r6
    f670:	bl	ff88 <__multadd>
    f674:	cmp	r9, r7
    f676:	mov	r5, r0
    f678:	mov.w	r3, #0
    f67c:	mov.w	r2, #10
    f680:	mov	r1, r9
    f682:	mov	r0, r6
    f684:	bne.n	f696 <_dtoa_r+0xa16>
    f686:	bl	ff88 <__multadd>
    f68a:	mov	r9, r0
    f68c:	mov	r7, r0
    f68e:	ldr	r3, [sp, #16]
    f690:	adds	r3, #1
    f692:	str	r3, [sp, #16]
    f694:	b.n	f580 <_dtoa_r+0x900>
    f696:	bl	ff88 <__multadd>
    f69a:	mov	r1, r7
    f69c:	mov	r9, r0
    f69e:	movs	r3, #0
    f6a0:	movs	r2, #10
    f6a2:	mov	r0, r6
    f6a4:	bl	ff88 <__multadd>
    f6a8:	mov	r7, r0
    f6aa:	b.n	f68e <_dtoa_r+0xa0e>
    f6ac:	cmp.w	sl, #0
    f6b0:	ldr	r2, [sp, #4]
    f6b2:	ite	gt
    f6b4:	movgt	r8, sl
    f6b6:	movle.w	r8, #1
    f6ba:	add	r8, r2
    f6bc:	mov.w	r9, #0
    f6c0:	mov	r1, r5
    f6c2:	movs	r2, #1
    f6c4:	mov	r0, r6
    f6c6:	str	r3, [sp, #8]
    f6c8:	bl	10378 <__lshift>
    f6cc:	mov	r1, r4
    f6ce:	mov	r5, r0
    f6d0:	bl	10450 <__mcmp>
    f6d4:	cmp	r0, #0
    f6d6:	bgt.n	f63c <_dtoa_r+0x9bc>
    f6d8:	bne.n	f6e0 <_dtoa_r+0xa60>
    f6da:	ldr	r3, [sp, #8]
    f6dc:	lsls	r3, r3, #31
    f6de:	bmi.n	f63c <_dtoa_r+0x9bc>
    f6e0:	mov	r3, r8
    f6e2:	mov	r8, r3
    f6e4:	ldrb.w	r2, [r3, #-1]!
    f6e8:	cmp	r2, #48	; 0x30
    f6ea:	beq.n	f6e2 <_dtoa_r+0xa62>
    f6ec:	b.n	f4de <_dtoa_r+0x85e>
    f6ee:	ldr	r2, [sp, #4]
    f6f0:	cmp	r2, r3
    f6f2:	bne.n	f63e <_dtoa_r+0x9be>
    f6f4:	add.w	fp, fp, #1
    f6f8:	movs	r3, #49	; 0x31
    f6fa:	b.n	f5ee <_dtoa_r+0x96e>
    f6fc:	ldr	r3, [pc, #80]	; (f750 <_dtoa_r+0xad0>)
    f6fe:	b.w	ed56 <_dtoa_r+0xd6>
    f702:	ldr	r3, [sp, #116]	; 0x74
    f704:	cmp	r3, #0
    f706:	bne.w	ed14 <_dtoa_r+0x94>
    f70a:	ldr	r3, [pc, #72]	; (f754 <_dtoa_r+0xad4>)
    f70c:	b.w	ed56 <_dtoa_r+0xd6>
    f710:	cmp.w	sl, #0
    f714:	bgt.n	f71e <_dtoa_r+0xa9e>
    f716:	ldr	r3, [sp, #24]
    f718:	cmp	r3, #2
    f71a:	bgt.w	f4ae <_dtoa_r+0x82e>
    f71e:	ldr.w	r8, [sp, #4]
    f722:	mov	r1, r4
    f724:	mov	r0, r5
    f726:	bl	eb6c <quorem>
    f72a:	add.w	r3, r0, #48	; 0x30
    f72e:	strb.w	r3, [r8], #1
    f732:	ldr	r2, [sp, #4]
    f734:	sub.w	r2, r8, r2
    f738:	cmp	sl, r2
    f73a:	ble.n	f6ac <_dtoa_r+0xa2c>
    f73c:	mov	r1, r5
    f73e:	movs	r3, #0
    f740:	movs	r2, #10
    f742:	mov	r0, r6
    f744:	bl	ff88 <__multadd>
    f748:	mov	r5, r0
    f74a:	b.n	f722 <_dtoa_r+0xaa2>
    f74c:	.word	0x200012b4
    f750:	.word	0x20001059
    f754:	.word	0x20001237

0000f758 <_free_r>:
    f758:	push	{r0, r1, r2, r4, r5, lr}
    f75a:	cmp	r1, #0
    f75c:	beq.n	f7e8 <_free_r+0x90>
    f75e:	ldr.w	r3, [r1, #-4]
    f762:	str	r0, [sp, #4]
    f764:	cmp	r3, #0
    f766:	sub.w	r4, r1, #4
    f76a:	it	lt
    f76c:	addlt	r4, r4, r3
    f76e:	bl	cb0c <__malloc_lock>
    f772:	ldr	r2, [pc, #120]	; (f7ec <_free_r+0x94>)
    f774:	ldr	r0, [sp, #4]
    f776:	ldr	r3, [r2, #0]
    f778:	cbnz	r3, f788 <_free_r+0x30>
    f77a:	str	r3, [r4, #4]
    f77c:	str	r4, [r2, #0]
    f77e:	add	sp, #12
    f780:	ldmia.w	sp!, {r4, r5, lr}
    f784:	b.w	cb18 <__malloc_unlock>
    f788:	cmp	r3, r4
    f78a:	bls.n	f79e <_free_r+0x46>
    f78c:	ldr	r5, [r4, #0]
    f78e:	adds	r1, r4, r5
    f790:	cmp	r3, r1
    f792:	itttt	eq
    f794:	ldreq	r1, [r3, #0]
    f796:	ldreq	r3, [r3, #4]
    f798:	addeq	r1, r1, r5
    f79a:	streq	r1, [r4, #0]
    f79c:	b.n	f77a <_free_r+0x22>
    f79e:	mov	r2, r3
    f7a0:	ldr	r3, [r3, #4]
    f7a2:	cbz	r3, f7a8 <_free_r+0x50>
    f7a4:	cmp	r3, r4
    f7a6:	bls.n	f79e <_free_r+0x46>
    f7a8:	ldr	r1, [r2, #0]
    f7aa:	adds	r5, r2, r1
    f7ac:	cmp	r5, r4
    f7ae:	bne.n	f7c8 <_free_r+0x70>
    f7b0:	ldr	r4, [r4, #0]
    f7b2:	add	r1, r4
    f7b4:	adds	r4, r2, r1
    f7b6:	cmp	r3, r4
    f7b8:	str	r1, [r2, #0]
    f7ba:	bne.n	f77e <_free_r+0x26>
    f7bc:	ldr	r4, [r3, #0]
    f7be:	ldr	r3, [r3, #4]
    f7c0:	str	r3, [r2, #4]
    f7c2:	add	r4, r1
    f7c4:	str	r4, [r2, #0]
    f7c6:	b.n	f77e <_free_r+0x26>
    f7c8:	bls.n	f7d0 <_free_r+0x78>
    f7ca:	movs	r3, #12
    f7cc:	str	r3, [r0, #0]
    f7ce:	b.n	f77e <_free_r+0x26>
    f7d0:	ldr	r5, [r4, #0]
    f7d2:	adds	r1, r4, r5
    f7d4:	cmp	r3, r1
    f7d6:	itt	eq
    f7d8:	ldreq	r1, [r3, #0]
    f7da:	ldreq	r3, [r3, #4]
    f7dc:	str	r3, [r4, #4]
    f7de:	itt	eq
    f7e0:	addeq	r1, r1, r5
    f7e2:	streq	r1, [r4, #0]
    f7e4:	str	r4, [r2, #4]
    f7e6:	b.n	f77e <_free_r+0x26>
    f7e8:	add	sp, #12
    f7ea:	pop	{r4, r5, pc}
    f7ec:	.word	0x2002cea8

0000f7f0 <rshift>:
    f7f0:	ldr	r3, [r0, #16]
    f7f2:	cmp.w	r3, r1, asr #5
    f7f6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f7fa:	mov.w	r2, r1, asr #5
    f7fe:	add.w	r4, r0, #20
    f802:	ble.n	f890 <rshift+0xa0>
    f804:	ands.w	r1, r1, #31
    f808:	add.w	r6, r4, r3, lsl #2
    f80c:	add.w	r5, r4, r2, lsl #2
    f810:	bne.n	f82c <rshift+0x3c>
    f812:	add.w	r7, r0, #16
    f816:	mov	r1, r5
    f818:	cmp	r1, r6
    f81a:	bcc.n	f886 <rshift+0x96>
    f81c:	subs	r3, r3, r2
    f81e:	lsls	r3, r3, #2
    f820:	subs	r2, r5, #3
    f822:	cmp	r6, r2
    f824:	it	cc
    f826:	movcc	r3, #0
    f828:	add	r3, r4
    f82a:	b.n	f858 <rshift+0x68>
    f82c:	ldr.w	r7, [r4, r2, lsl #2]
    f830:	rsb	r8, r1, #32
    f834:	lsrs	r7, r1
    f836:	add.w	lr, r5, #4
    f83a:	mov	r9, r4
    f83c:	cmp	r6, lr
    f83e:	mov	ip, lr
    f840:	bhi.n	f86e <rshift+0x7e>
    f842:	subs	r2, r3, r2
    f844:	lsls	r2, r2, #2
    f846:	subs	r2, #4
    f848:	adds	r5, #1
    f84a:	cmp	r6, r5
    f84c:	it	cc
    f84e:	movcc	r2, #0
    f850:	adds	r3, r4, r2
    f852:	str	r7, [r4, r2]
    f854:	cbz	r7, f858 <rshift+0x68>
    f856:	adds	r3, #4
    f858:	subs	r2, r3, r4
    f85a:	cmp	r3, r4
    f85c:	mov.w	r2, r2, asr #2
    f860:	it	eq
    f862:	moveq	r3, #0
    f864:	str	r2, [r0, #16]
    f866:	it	eq
    f868:	streq	r3, [r0, #20]
    f86a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f86e:	ldr.w	ip, [ip]
    f872:	lsl.w	ip, ip, r8
    f876:	orr.w	r7, ip, r7
    f87a:	str.w	r7, [r9], #4
    f87e:	ldr.w	r7, [lr], #4
    f882:	lsrs	r7, r1
    f884:	b.n	f83c <rshift+0x4c>
    f886:	ldr.w	ip, [r1], #4
    f88a:	str.w	ip, [r7, #4]!
    f88e:	b.n	f818 <rshift+0x28>
    f890:	mov	r3, r4
    f892:	b.n	f858 <rshift+0x68>

0000f894 <__hexdig_fun>:
    f894:	sub.w	r3, r0, #48	; 0x30
    f898:	cmp	r3, #9
    f89a:	bhi.n	f8a2 <__hexdig_fun+0xe>
    f89c:	subs	r0, #32
    f89e:	uxtb	r0, r0
    f8a0:	bx	lr
    f8a2:	sub.w	r3, r0, #97	; 0x61
    f8a6:	cmp	r3, #5
    f8a8:	bhi.n	f8ae <__hexdig_fun+0x1a>
    f8aa:	subs	r0, #71	; 0x47
    f8ac:	b.n	f89e <__hexdig_fun+0xa>
    f8ae:	sub.w	r3, r0, #65	; 0x41
    f8b2:	cmp	r3, #5
    f8b4:	bhi.n	f8ba <__hexdig_fun+0x26>
    f8b6:	subs	r0, #39	; 0x27
    f8b8:	b.n	f89e <__hexdig_fun+0xa>
    f8ba:	movs	r0, #0
    f8bc:	bx	lr
	...

0000f8c0 <__gethex>:
    f8c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8c4:	mov	r7, r2
    f8c6:	ldr	r2, [r1, #0]
    f8c8:	sub	sp, #20
    f8ca:	add.w	fp, r2, #2
    f8ce:	rsb	r2, r2, #4278255360	; 0xff00ff00
    f8d2:	add.w	r2, r2, #16711680	; 0xff0000
    f8d6:	mov	r9, r0
    f8d8:	mov	sl, r1
    f8da:	str	r3, [sp, #8]
    f8dc:	adds	r2, #254	; 0xfe
    f8de:	add.w	r3, r2, fp
    f8e2:	mov	r8, fp
    f8e4:	ldrb.w	r0, [fp], #1
    f8e8:	str	r3, [sp, #4]
    f8ea:	cmp	r0, #48	; 0x30
    f8ec:	beq.n	f8de <__gethex+0x1e>
    f8ee:	bl	f894 <__hexdig_fun>
    f8f2:	mov	r4, r0
    f8f4:	cmp	r0, #0
    f8f6:	bne.n	f96a <__gethex+0xaa>
    f8f8:	ldr	r1, [pc, #668]	; (fb98 <__gethex+0x2d8>)
    f8fa:	movs	r2, #1
    f8fc:	mov	r0, r8
    f8fe:	bl	e954 <strncmp>
    f902:	mov	r6, r0
    f904:	cmp	r0, #0
    f906:	bne.n	f9dc <__gethex+0x11c>
    f908:	ldrb.w	r0, [r8, #1]
    f90c:	mov	r5, fp
    f90e:	bl	f894 <__hexdig_fun>
    f912:	cmp	r0, #0
    f914:	beq.n	f9e0 <__gethex+0x120>
    f916:	mov	r2, fp
    f918:	ldrb	r0, [r2, #0]
    f91a:	cmp	r0, #48	; 0x30
    f91c:	mov	r8, r2
    f91e:	add.w	r2, r2, #1
    f922:	beq.n	f918 <__gethex+0x58>
    f924:	bl	f894 <__hexdig_fun>
    f928:	movs	r3, #1
    f92a:	clz	r4, r0
    f92e:	lsrs	r4, r4, #5
    f930:	mov	r6, fp
    f932:	str	r3, [sp, #4]
    f934:	mov	r2, r8
    f936:	mov	r5, r2
    f938:	adds	r2, #1
    f93a:	ldrb	r0, [r5, #0]
    f93c:	bl	f894 <__hexdig_fun>
    f940:	cmp	r0, #0
    f942:	bne.n	f936 <__gethex+0x76>
    f944:	ldr	r1, [pc, #592]	; (fb98 <__gethex+0x2d8>)
    f946:	movs	r2, #1
    f948:	mov	r0, r5
    f94a:	bl	e954 <strncmp>
    f94e:	cbnz	r0, f970 <__gethex+0xb0>
    f950:	cbnz	r6, f964 <__gethex+0xa4>
    f952:	adds	r6, r5, #1
    f954:	mov	r2, r6
    f956:	mov	r5, r2
    f958:	adds	r2, #1
    f95a:	ldrb	r0, [r5, #0]
    f95c:	bl	f894 <__hexdig_fun>
    f960:	cmp	r0, #0
    f962:	bne.n	f956 <__gethex+0x96>
    f964:	subs	r3, r6, r5
    f966:	lsls	r6, r3, #2
    f968:	b.n	f974 <__gethex+0xb4>
    f96a:	movs	r4, #0
    f96c:	mov	r6, r4
    f96e:	b.n	f934 <__gethex+0x74>
    f970:	cmp	r6, #0
    f972:	bne.n	f964 <__gethex+0xa4>
    f974:	ldrb	r3, [r5, #0]
    f976:	and.w	r3, r3, #223	; 0xdf
    f97a:	cmp	r3, #80	; 0x50
    f97c:	bne.n	f9fa <__gethex+0x13a>
    f97e:	ldrb	r3, [r5, #1]
    f980:	cmp	r3, #43	; 0x2b
    f982:	beq.n	f9e4 <__gethex+0x124>
    f984:	cmp	r3, #45	; 0x2d
    f986:	beq.n	f9ec <__gethex+0x12c>
    f988:	adds	r1, r5, #1
    f98a:	mov.w	fp, #0
    f98e:	ldrb	r0, [r1, #0]
    f990:	bl	f894 <__hexdig_fun>
    f994:	subs	r2, r0, #1
    f996:	uxtb	r2, r2
    f998:	cmp	r2, #24
    f99a:	bhi.n	f9fa <__gethex+0x13a>
    f99c:	sub.w	r2, r0, #16
    f9a0:	ldrb.w	r0, [r1, #1]!
    f9a4:	bl	f894 <__hexdig_fun>
    f9a8:	add.w	ip, r0, #4294967295
    f9ac:	uxtb.w	ip, ip
    f9b0:	cmp.w	ip, #24
    f9b4:	bls.n	f9f2 <__gethex+0x132>
    f9b6:	cmp.w	fp, #0
    f9ba:	beq.n	f9be <__gethex+0xfe>
    f9bc:	negs	r2, r2
    f9be:	add	r6, r2
    f9c0:	str.w	r1, [sl]
    f9c4:	cbz	r4, f9fe <__gethex+0x13e>
    f9c6:	ldr	r3, [sp, #4]
    f9c8:	cmp	r3, #0
    f9ca:	ite	ne
    f9cc:	movne.w	r8, #0
    f9d0:	moveq.w	r8, #6
    f9d4:	mov	r0, r8
    f9d6:	add	sp, #20
    f9d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9dc:	mov	r5, r8
    f9de:	mov	r6, r4
    f9e0:	movs	r4, #1
    f9e2:	b.n	f974 <__gethex+0xb4>
    f9e4:	mov.w	fp, #0
    f9e8:	adds	r1, r5, #2
    f9ea:	b.n	f98e <__gethex+0xce>
    f9ec:	mov.w	fp, #1
    f9f0:	b.n	f9e8 <__gethex+0x128>
    f9f2:	movs	r3, #10
    f9f4:	mla	r0, r3, r2, r0
    f9f8:	b.n	f99c <__gethex+0xdc>
    f9fa:	mov	r1, r5
    f9fc:	b.n	f9c0 <__gethex+0x100>
    f9fe:	sub.w	r3, r5, r8
    fa02:	subs	r3, #1
    fa04:	mov	r1, r4
    fa06:	cmp	r3, #7
    fa08:	bgt.n	fa20 <__gethex+0x160>
    fa0a:	mov	r0, r9
    fa0c:	bl	fec4 <_Balloc>
    fa10:	mov	r4, r0
    fa12:	cbnz	r0, fa26 <__gethex+0x166>
    fa14:	ldr	r3, [pc, #388]	; (fb9c <__gethex+0x2dc>)
    fa16:	mov	r2, r0
    fa18:	movs	r1, #228	; 0xe4
    fa1a:	ldr	r0, [pc, #388]	; (fba0 <__gethex+0x2e0>)
    fa1c:	bl	1140c <__assert_func>
    fa20:	adds	r1, #1
    fa22:	asrs	r3, r3, #1
    fa24:	b.n	fa06 <__gethex+0x146>
    fa26:	add.w	sl, r0, #20
    fa2a:	movs	r3, #0
    fa2c:	ldr	r1, [pc, #360]	; (fb98 <__gethex+0x2d8>)
    fa2e:	str.w	sl, [sp, #4]
    fa32:	mov	fp, r3
    fa34:	cmp	r8, r5
    fa36:	bcc.n	fabe <__gethex+0x1fe>
    fa38:	ldr	r0, [sp, #4]
    fa3a:	str.w	fp, [r0], #4
    fa3e:	sub.w	r0, r0, sl
    fa42:	asrs	r0, r0, #2
    fa44:	str	r0, [r4, #16]
    fa46:	mov.w	r8, r0, lsl #5
    fa4a:	mov	r0, fp
    fa4c:	bl	100a8 <__hi0bits>
    fa50:	ldr	r5, [r7, #0]
    fa52:	sub.w	r0, r8, r0
    fa56:	cmp	r0, r5
    fa58:	ble.n	fb0e <__gethex+0x24e>
    fa5a:	sub.w	r8, r0, r5
    fa5e:	mov	r1, r8
    fa60:	mov	r0, r4
    fa62:	bl	107d6 <__any_on>
    fa66:	mov	fp, r0
    fa68:	cbz	r0, fa9a <__gethex+0x1da>
    fa6a:	add.w	r3, r8, #4294967295
    fa6e:	asrs	r1, r3, #5
    fa70:	and.w	r2, r3, #31
    fa74:	ldr.w	r1, [sl, r1, lsl #2]
    fa78:	mov.w	fp, #1
    fa7c:	lsl.w	r2, fp, r2
    fa80:	tst	r2, r1
    fa82:	beq.n	fa9a <__gethex+0x1da>
    fa84:	cmp	r3, fp
    fa86:	ble.n	fa96 <__gethex+0x1d6>
    fa88:	sub.w	r1, r8, #2
    fa8c:	mov	r0, r4
    fa8e:	bl	107d6 <__any_on>
    fa92:	cmp	r0, #0
    fa94:	bne.n	fb08 <__gethex+0x248>
    fa96:	mov.w	fp, #2
    fa9a:	mov	r1, r8
    fa9c:	mov	r0, r4
    fa9e:	bl	f7f0 <rshift>
    faa2:	add	r6, r8
    faa4:	ldr	r3, [r7, #8]
    faa6:	cmp	r3, r6
    faa8:	bge.n	fb2e <__gethex+0x26e>
    faaa:	mov	r1, r4
    faac:	mov	r0, r9
    faae:	bl	ff44 <_Bfree>
    fab2:	ldr	r2, [sp, #56]	; 0x38
    fab4:	movs	r3, #0
    fab6:	str	r3, [r2, #0]
    fab8:	mov.w	r8, #163	; 0xa3
    fabc:	b.n	f9d4 <__gethex+0x114>
    fabe:	ldrb.w	r2, [r5, #-1]!
    fac2:	cmp	r2, #46	; 0x2e
    fac4:	beq.n	faf0 <__gethex+0x230>
    fac6:	cmp	r3, #32
    fac8:	bne.n	fad8 <__gethex+0x218>
    faca:	ldr	r3, [sp, #4]
    facc:	str.w	fp, [r3], #4
    fad0:	mov.w	fp, #0
    fad4:	str	r3, [sp, #4]
    fad6:	mov	r3, fp
    fad8:	ldrb	r0, [r5, #0]
    fada:	str	r3, [sp, #12]
    fadc:	bl	f894 <__hexdig_fun>
    fae0:	ldr	r3, [sp, #12]
    fae2:	and.w	r0, r0, #15
    fae6:	lsls	r0, r3
    fae8:	orr.w	fp, fp, r0
    faec:	adds	r3, #4
    faee:	b.n	fa34 <__gethex+0x174>
    faf0:	cmp	r8, r5
    faf2:	bhi.n	fac6 <__gethex+0x206>
    faf4:	movs	r2, #1
    faf6:	mov	r0, r5
    faf8:	str	r3, [sp, #12]
    fafa:	bl	e954 <strncmp>
    fafe:	ldr	r1, [pc, #152]	; (fb98 <__gethex+0x2d8>)
    fb00:	ldr	r3, [sp, #12]
    fb02:	cmp	r0, #0
    fb04:	bne.n	fac6 <__gethex+0x206>
    fb06:	b.n	fa34 <__gethex+0x174>
    fb08:	mov.w	fp, #3
    fb0c:	b.n	fa9a <__gethex+0x1da>
    fb0e:	bge.n	fb28 <__gethex+0x268>
    fb10:	sub.w	r8, r5, r0
    fb14:	mov	r1, r4
    fb16:	mov	r2, r8
    fb18:	mov	r0, r9
    fb1a:	bl	10378 <__lshift>
    fb1e:	sub.w	r6, r6, r8
    fb22:	mov	r4, r0
    fb24:	add.w	sl, r0, #20
    fb28:	mov.w	fp, #0
    fb2c:	b.n	faa4 <__gethex+0x1e4>
    fb2e:	ldr	r3, [r7, #4]
    fb30:	cmp	r3, r6
    fb32:	ble.n	fc1c <__gethex+0x35c>
    fb34:	subs	r6, r3, r6
    fb36:	cmp	r5, r6
    fb38:	bgt.n	fba4 <__gethex+0x2e4>
    fb3a:	ldr	r3, [r7, #12]
    fb3c:	cmp	r3, #2
    fb3e:	beq.n	fb88 <__gethex+0x2c8>
    fb40:	cmp	r3, #3
    fb42:	beq.n	fb90 <__gethex+0x2d0>
    fb44:	cmp	r3, #1
    fb46:	bne.n	fb74 <__gethex+0x2b4>
    fb48:	cmp	r5, r6
    fb4a:	bne.n	fb74 <__gethex+0x2b4>
    fb4c:	cmp	r5, #1
    fb4e:	bne.n	fb68 <__gethex+0x2a8>
    fb50:	ldr	r2, [sp, #8]
    fb52:	ldr	r3, [r7, #4]
    fb54:	str	r3, [r2, #0]
    fb56:	movs	r3, #1
    fb58:	str	r3, [r4, #16]
    fb5a:	str.w	r3, [sl]
    fb5e:	ldr	r3, [sp, #56]	; 0x38
    fb60:	mov.w	r8, #98	; 0x62
    fb64:	str	r4, [r3, #0]
    fb66:	b.n	f9d4 <__gethex+0x114>
    fb68:	subs	r1, r5, #1
    fb6a:	mov	r0, r4
    fb6c:	bl	107d6 <__any_on>
    fb70:	cmp	r0, #0
    fb72:	bne.n	fb50 <__gethex+0x290>
    fb74:	mov	r1, r4
    fb76:	mov	r0, r9
    fb78:	bl	ff44 <_Bfree>
    fb7c:	ldr	r2, [sp, #56]	; 0x38
    fb7e:	movs	r3, #0
    fb80:	str	r3, [r2, #0]
    fb82:	mov.w	r8, #80	; 0x50
    fb86:	b.n	f9d4 <__gethex+0x114>
    fb88:	ldr	r3, [sp, #60]	; 0x3c
    fb8a:	cmp	r3, #0
    fb8c:	bne.n	fb74 <__gethex+0x2b4>
    fb8e:	b.n	fb50 <__gethex+0x290>
    fb90:	ldr	r3, [sp, #60]	; 0x3c
    fb92:	cmp	r3, #0
    fb94:	bne.n	fb50 <__gethex+0x290>
    fb96:	b.n	fb74 <__gethex+0x2b4>
    fb98:	.word	0x200015d4
    fb9c:	.word	0x200012b4
    fba0:	.word	0x200010d5
    fba4:	add.w	r8, r6, #4294967295
    fba8:	cmp.w	fp, #0
    fbac:	bne.n	fc16 <__gethex+0x356>
    fbae:	cmp.w	r8, #0
    fbb2:	beq.n	fbbe <__gethex+0x2fe>
    fbb4:	mov	r1, r8
    fbb6:	mov	r0, r4
    fbb8:	bl	107d6 <__any_on>
    fbbc:	mov	fp, r0
    fbbe:	mov.w	r2, r8, asr #5
    fbc2:	movs	r3, #1
    fbc4:	ldr.w	r2, [sl, r2, lsl #2]
    fbc8:	and.w	r8, r8, #31
    fbcc:	lsl.w	r3, r3, r8
    fbd0:	tst	r3, r2
    fbd2:	mov	r1, r6
    fbd4:	mov	r0, r4
    fbd6:	it	ne
    fbd8:	orrne.w	fp, fp, #2
    fbdc:	subs	r5, r5, r6
    fbde:	bl	f7f0 <rshift>
    fbe2:	ldr	r6, [r7, #4]
    fbe4:	mov.w	r8, #2
    fbe8:	cmp.w	fp, #0
    fbec:	beq.n	fc84 <__gethex+0x3c4>
    fbee:	ldr	r3, [r7, #12]
    fbf0:	cmp	r3, #2
    fbf2:	beq.n	fc22 <__gethex+0x362>
    fbf4:	cmp	r3, #3
    fbf6:	beq.n	fc2a <__gethex+0x36a>
    fbf8:	cmp	r3, #1
    fbfa:	bne.n	fc10 <__gethex+0x350>
    fbfc:	tst.w	fp, #2
    fc00:	beq.n	fc10 <__gethex+0x350>
    fc02:	ldr.w	r3, [sl]
    fc06:	orr.w	fp, fp, r3
    fc0a:	tst.w	fp, #1
    fc0e:	bne.n	fc30 <__gethex+0x370>
    fc10:	orr.w	r8, r8, #16
    fc14:	b.n	fc84 <__gethex+0x3c4>
    fc16:	mov.w	fp, #1
    fc1a:	b.n	fbbe <__gethex+0x2fe>
    fc1c:	mov.w	r8, #1
    fc20:	b.n	fbe8 <__gethex+0x328>
    fc22:	ldr	r3, [sp, #60]	; 0x3c
    fc24:	rsb	r3, r3, #1
    fc28:	str	r3, [sp, #60]	; 0x3c
    fc2a:	ldr	r3, [sp, #60]	; 0x3c
    fc2c:	cmp	r3, #0
    fc2e:	beq.n	fc10 <__gethex+0x350>
    fc30:	ldr.w	fp, [r4, #16]
    fc34:	add.w	r2, r4, #20
    fc38:	mov.w	r3, fp, lsl #2
    fc3c:	str	r3, [sp, #4]
    fc3e:	add.w	r0, r2, fp, lsl #2
    fc42:	movs	r3, #0
    fc44:	mov	ip, r2
    fc46:	ldr.w	r1, [r2], #4
    fc4a:	cmp.w	r1, #4294967295
    fc4e:	beq.n	fc8e <__gethex+0x3ce>
    fc50:	adds	r1, #1
    fc52:	str.w	r1, [ip]
    fc56:	cmp.w	r8, #2
    fc5a:	add.w	r2, r4, #20
    fc5e:	bne.n	fcdc <__gethex+0x41c>
    fc60:	ldr	r3, [r7, #0]
    fc62:	subs	r3, #1
    fc64:	cmp	r3, r5
    fc66:	bne.n	fc80 <__gethex+0x3c0>
    fc68:	asrs	r1, r5, #5
    fc6a:	movs	r3, #1
    fc6c:	and.w	r5, r5, #31
    fc70:	lsl.w	r5, r3, r5
    fc74:	ldr.w	r3, [r2, r1, lsl #2]
    fc78:	tst	r5, r3
    fc7a:	it	ne
    fc7c:	movne.w	r8, #1
    fc80:	orr.w	r8, r8, #32
    fc84:	ldr	r3, [sp, #56]	; 0x38
    fc86:	str	r4, [r3, #0]
    fc88:	ldr	r3, [sp, #8]
    fc8a:	str	r6, [r3, #0]
    fc8c:	b.n	f9d4 <__gethex+0x114>
    fc8e:	cmp	r0, r2
    fc90:	str.w	r3, [r2, #-4]
    fc94:	bhi.n	fc44 <__gethex+0x384>
    fc96:	ldr	r2, [r4, #8]
    fc98:	cmp	fp, r2
    fc9a:	blt.n	fccc <__gethex+0x40c>
    fc9c:	ldr	r1, [r4, #4]
    fc9e:	mov	r0, r9
    fca0:	adds	r1, #1
    fca2:	bl	fec4 <_Balloc>
    fca6:	mov	sl, r0
    fca8:	cbnz	r0, fcb2 <__gethex+0x3f2>
    fcaa:	ldr	r3, [pc, #108]	; (fd18 <__gethex+0x458>)
    fcac:	mov	r2, r0
    fcae:	movs	r1, #132	; 0x84
    fcb0:	b.n	fa1a <__gethex+0x15a>
    fcb2:	ldr	r2, [r4, #16]
    fcb4:	adds	r2, #2
    fcb6:	add.w	r1, r4, #12
    fcba:	lsls	r2, r2, #2
    fcbc:	adds	r0, #12
    fcbe:	bl	9f88 <memcpy>
    fcc2:	mov	r1, r4
    fcc4:	mov	r0, r9
    fcc6:	bl	ff44 <_Bfree>
    fcca:	mov	r4, sl
    fccc:	ldr	r2, [r4, #16]
    fcce:	adds	r1, r2, #1
    fcd0:	add.w	r2, r4, r2, lsl #2
    fcd4:	str	r1, [r4, #16]
    fcd6:	movs	r1, #1
    fcd8:	str	r1, [r2, #20]
    fcda:	b.n	fc56 <__gethex+0x396>
    fcdc:	ldr	r1, [r4, #16]
    fcde:	cmp	r1, fp
    fce0:	ble.n	fcfa <__gethex+0x43a>
    fce2:	movs	r1, #1
    fce4:	mov	r0, r4
    fce6:	bl	f7f0 <rshift>
    fcea:	ldr	r3, [r7, #8]
    fcec:	adds	r6, #1
    fcee:	cmp	r3, r6
    fcf0:	blt.w	faaa <__gethex+0x1ea>
    fcf4:	mov.w	r8, #1
    fcf8:	b.n	fc80 <__gethex+0x3c0>
    fcfa:	ands.w	r5, r5, #31
    fcfe:	beq.n	fcf4 <__gethex+0x434>
    fd00:	ldr	r3, [sp, #4]
    fd02:	add	r2, r3
    fd04:	rsb	r5, r5, #32
    fd08:	ldr.w	r0, [r2, #-4]
    fd0c:	bl	100a8 <__hi0bits>
    fd10:	cmp	r0, r5
    fd12:	blt.n	fce2 <__gethex+0x422>
    fd14:	b.n	fcf4 <__gethex+0x434>
    fd16:	nop
    fd18:	.word	0x200012b4

0000fd1c <L_shift>:
    fd1c:	rsb	r2, r2, #8
    fd20:	lsls	r2, r2, #2
    fd22:	push	{r4, r5, r6, lr}
    fd24:	rsb	r6, r2, #32
    fd28:	ldr	r3, [r0, #4]
    fd2a:	ldr	r4, [r0, #0]
    fd2c:	lsl.w	r5, r3, r6
    fd30:	orrs	r4, r5
    fd32:	lsrs	r3, r2
    fd34:	str	r4, [r0, #0]
    fd36:	str.w	r3, [r0, #4]!
    fd3a:	cmp	r0, r1
    fd3c:	bcc.n	fd28 <L_shift+0xc>
    fd3e:	pop	{r4, r5, r6, pc}

0000fd40 <__match>:
    fd40:	push	{r4, r5, lr}
    fd42:	ldr	r3, [r0, #0]
    fd44:	adds	r3, #1
    fd46:	ldrb.w	r4, [r1], #1
    fd4a:	cbnz	r4, fd52 <__match+0x12>
    fd4c:	str	r3, [r0, #0]
    fd4e:	movs	r0, #1
    fd50:	pop	{r4, r5, pc}
    fd52:	ldrb.w	r2, [r3], #1
    fd56:	sub.w	r5, r2, #65	; 0x41
    fd5a:	cmp	r5, #25
    fd5c:	it	ls
    fd5e:	addls	r2, #32
    fd60:	cmp	r2, r4
    fd62:	beq.n	fd46 <__match+0x6>
    fd64:	movs	r0, #0
    fd66:	b.n	fd50 <__match+0x10>

0000fd68 <__hexnan>:
    fd68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd6c:	ldr	r3, [r1, #0]
    fd6e:	ldr	r1, [r0, #0]
    fd70:	asrs	r6, r3, #5
    fd72:	add.w	r6, r2, r6, lsl #2
    fd76:	ands.w	r3, r3, #31
    fd7a:	sub	sp, #28
    fd7c:	it	ne
    fd7e:	addne	r6, #4
    fd80:	movs	r5, #0
    fd82:	subs	r7, r6, #4
    fd84:	mov	sl, r0
    fd86:	mov	r8, r2
    fd88:	str	r3, [sp, #4]
    fd8a:	str.w	r5, [r6, #-4]
    fd8e:	mov	r9, r7
    fd90:	mov	r4, r7
    fd92:	str	r5, [sp, #8]
    fd94:	mov	fp, r5
    fd96:	ldrb	r2, [r1, #1]
    fd98:	adds	r3, r1, #1
    fd9a:	str	r3, [sp, #12]
    fd9c:	cbz	r2, fdf0 <__hexnan+0x88>
    fd9e:	mov	r0, r2
    fda0:	str	r1, [sp, #20]
    fda2:	str	r2, [sp, #16]
    fda4:	bl	f894 <__hexdig_fun>
    fda8:	cmp	r0, #0
    fdaa:	bne.n	fe4c <__hexnan+0xe4>
    fdac:	ldr	r2, [sp, #16]
    fdae:	ldr	r1, [sp, #20]
    fdb0:	cmp	r2, #32
    fdb2:	bhi.n	fde6 <__hexnan+0x7e>
    fdb4:	ldr	r3, [sp, #8]
    fdb6:	cmp	fp, r3
    fdb8:	ble.n	fde2 <__hexnan+0x7a>
    fdba:	cmp	r4, r9
    fdbc:	bcs.n	fdcc <__hexnan+0x64>
    fdbe:	cmp	r5, #7
    fdc0:	bgt.n	fdcc <__hexnan+0x64>
    fdc2:	mov	r2, r5
    fdc4:	mov	r1, r9
    fdc6:	mov	r0, r4
    fdc8:	bl	fd1c <L_shift>
    fdcc:	cmp	r4, r8
    fdce:	bls.n	fe72 <__hexnan+0x10a>
    fdd0:	movs	r3, #0
    fdd2:	sub.w	r9, r4, #4
    fdd6:	str.w	r3, [r4, #-4]
    fdda:	str.w	fp, [sp, #8]
    fdde:	mov	r4, r9
    fde0:	mov	r5, r3
    fde2:	ldr	r1, [sp, #12]
    fde4:	b.n	fd96 <__hexnan+0x2e>
    fde6:	cmp	r2, #41	; 0x29
    fde8:	bne.n	fe96 <__hexnan+0x12e>
    fdea:	adds	r1, #2
    fdec:	str.w	r1, [sl]
    fdf0:	cmp.w	fp, #0
    fdf4:	beq.n	fe96 <__hexnan+0x12e>
    fdf6:	cmp	r4, r9
    fdf8:	bcs.n	fe08 <__hexnan+0xa0>
    fdfa:	cmp	r5, #7
    fdfc:	bgt.n	fe08 <__hexnan+0xa0>
    fdfe:	mov	r2, r5
    fe00:	mov	r1, r9
    fe02:	mov	r0, r4
    fe04:	bl	fd1c <L_shift>
    fe08:	cmp	r4, r8
    fe0a:	bls.n	fe76 <__hexnan+0x10e>
    fe0c:	sub.w	r2, r8, #4
    fe10:	mov	r3, r4
    fe12:	ldr.w	r1, [r3], #4
    fe16:	str.w	r1, [r2, #4]!
    fe1a:	cmp	r7, r3
    fe1c:	bcs.n	fe12 <__hexnan+0xaa>
    fe1e:	subs	r3, r7, r4
    fe20:	bic.w	r3, r3, #3
    fe24:	adds	r3, #4
    fe26:	subs	r6, #3
    fe28:	adds	r4, #1
    fe2a:	cmp	r6, r4
    fe2c:	it	cc
    fe2e:	movcc	r3, #4
    fe30:	add	r3, r8
    fe32:	movs	r2, #0
    fe34:	str.w	r2, [r3], #4
    fe38:	cmp	r7, r3
    fe3a:	bcs.n	fe34 <__hexnan+0xcc>
    fe3c:	ldr	r3, [r7, #0]
    fe3e:	cbnz	r3, fe48 <__hexnan+0xe0>
    fe40:	cmp	r7, r8
    fe42:	bne.n	fe92 <__hexnan+0x12a>
    fe44:	movs	r3, #1
    fe46:	str	r3, [r7, #0]
    fe48:	movs	r0, #5
    fe4a:	b.n	fe98 <__hexnan+0x130>
    fe4c:	adds	r5, #1
    fe4e:	cmp	r5, #8
    fe50:	add.w	fp, fp, #1
    fe54:	ble.n	fe64 <__hexnan+0xfc>
    fe56:	cmp	r4, r8
    fe58:	bls.n	fde2 <__hexnan+0x7a>
    fe5a:	movs	r3, #0
    fe5c:	str.w	r3, [r4, #-4]
    fe60:	movs	r5, #1
    fe62:	subs	r4, #4
    fe64:	ldr	r2, [r4, #0]
    fe66:	and.w	r0, r0, #15
    fe6a:	orr.w	r0, r0, r2, lsl #4
    fe6e:	str	r0, [r4, #0]
    fe70:	b.n	fde2 <__hexnan+0x7a>
    fe72:	movs	r5, #8
    fe74:	b.n	fde2 <__hexnan+0x7a>
    fe76:	ldr	r3, [sp, #4]
    fe78:	cmp	r3, #0
    fe7a:	beq.n	fe3c <__hexnan+0xd4>
    fe7c:	rsb	r3, r3, #32
    fe80:	mov.w	r2, #4294967295
    fe84:	lsrs	r2, r3
    fe86:	ldr.w	r3, [r6, #-4]
    fe8a:	ands	r3, r2
    fe8c:	str.w	r3, [r6, #-4]
    fe90:	b.n	fe3c <__hexnan+0xd4>
    fe92:	subs	r7, #4
    fe94:	b.n	fe3c <__hexnan+0xd4>
    fe96:	movs	r0, #4
    fe98:	add	sp, #28
    fe9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fe9e <__ascii_mbtowc>:
    fe9e:	sub	sp, #8
    fea0:	cbnz	r1, fea4 <__ascii_mbtowc+0x6>
    fea2:	add	r1, sp, #4
    fea4:	cbz	r2, feb8 <__ascii_mbtowc+0x1a>
    fea6:	cbz	r3, febc <__ascii_mbtowc+0x1e>
    fea8:	ldrb	r3, [r2, #0]
    feaa:	str	r3, [r1, #0]
    feac:	ldrb	r2, [r2, #0]
    feae:	subs	r0, r2, #0
    feb0:	it	ne
    feb2:	movne	r0, #1
    feb4:	add	sp, #8
    feb6:	bx	lr
    feb8:	mov	r0, r2
    feba:	b.n	feb4 <__ascii_mbtowc+0x16>
    febc:	mvn.w	r0, #1
    fec0:	b.n	feb4 <__ascii_mbtowc+0x16>
	...

0000fec4 <_Balloc>:
    fec4:	push	{r4, r5, r6, lr}
    fec6:	ldr	r6, [r0, #28]
    fec8:	mov	r4, r0
    feca:	mov	r5, r1
    fecc:	cbnz	r6, feec <_Balloc+0x28>
    fece:	movs	r0, #16
    fed0:	bl	c9c0 <malloc>
    fed4:	mov	r2, r0
    fed6:	str	r0, [r4, #28]
    fed8:	cbnz	r0, fee4 <_Balloc+0x20>
    feda:	ldr	r3, [pc, #96]	; (ff3c <_Balloc+0x78>)
    fedc:	ldr	r0, [pc, #96]	; (ff40 <_Balloc+0x7c>)
    fede:	movs	r1, #107	; 0x6b
    fee0:	bl	1140c <__assert_func>
    fee4:	strd	r6, r6, [r0, #4]
    fee8:	str	r6, [r0, #0]
    feea:	str	r6, [r0, #12]
    feec:	ldr	r6, [r4, #28]
    feee:	ldr	r3, [r6, #12]
    fef0:	cbz	r3, ff14 <_Balloc+0x50>
    fef2:	ldr	r3, [r4, #28]
    fef4:	ldr	r3, [r3, #12]
    fef6:	ldr.w	r0, [r3, r5, lsl #2]
    fefa:	cbnz	r0, ff2c <_Balloc+0x68>
    fefc:	movs	r1, #1
    fefe:	lsl.w	r6, r1, r5
    ff02:	adds	r2, r6, #5
    ff04:	lsls	r2, r2, #2
    ff06:	mov	r0, r4
    ff08:	bl	11448 <_calloc_r>
    ff0c:	cbz	r0, ff28 <_Balloc+0x64>
    ff0e:	strd	r5, r6, [r0, #4]
    ff12:	b.n	ff32 <_Balloc+0x6e>
    ff14:	movs	r2, #33	; 0x21
    ff16:	movs	r1, #4
    ff18:	mov	r0, r4
    ff1a:	bl	11448 <_calloc_r>
    ff1e:	ldr	r3, [r4, #28]
    ff20:	str	r0, [r6, #12]
    ff22:	ldr	r3, [r3, #12]
    ff24:	cmp	r3, #0
    ff26:	bne.n	fef2 <_Balloc+0x2e>
    ff28:	movs	r0, #0
    ff2a:	pop	{r4, r5, r6, pc}
    ff2c:	ldr	r2, [r0, #0]
    ff2e:	str.w	r2, [r3, r5, lsl #2]
    ff32:	movs	r3, #0
    ff34:	strd	r3, r3, [r0, #12]
    ff38:	b.n	ff2a <_Balloc+0x66>
    ff3a:	nop
    ff3c:	.word	0x20001244
    ff40:	.word	0x20000be8

0000ff44 <_Bfree>:
    ff44:	push	{r4, r5, r6, lr}
    ff46:	ldr	r6, [r0, #28]
    ff48:	mov	r5, r0
    ff4a:	mov	r4, r1
    ff4c:	cbnz	r6, ff6c <_Bfree+0x28>
    ff4e:	movs	r0, #16
    ff50:	bl	c9c0 <malloc>
    ff54:	mov	r2, r0
    ff56:	str	r0, [r5, #28]
    ff58:	cbnz	r0, ff64 <_Bfree+0x20>
    ff5a:	ldr	r3, [pc, #36]	; (ff80 <_Bfree+0x3c>)
    ff5c:	ldr	r0, [pc, #36]	; (ff84 <_Bfree+0x40>)
    ff5e:	movs	r1, #143	; 0x8f
    ff60:	bl	1140c <__assert_func>
    ff64:	strd	r6, r6, [r0, #4]
    ff68:	str	r6, [r0, #0]
    ff6a:	str	r6, [r0, #12]
    ff6c:	cbz	r4, ff7e <_Bfree+0x3a>
    ff6e:	ldr	r3, [r5, #28]
    ff70:	ldr	r2, [r4, #4]
    ff72:	ldr	r3, [r3, #12]
    ff74:	ldr.w	r1, [r3, r2, lsl #2]
    ff78:	str	r1, [r4, #0]
    ff7a:	str.w	r4, [r3, r2, lsl #2]
    ff7e:	pop	{r4, r5, r6, pc}
    ff80:	.word	0x20001244
    ff84:	.word	0x20000be8

0000ff88 <__multadd>:
    ff88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff8c:	ldr	r5, [r1, #16]
    ff8e:	mov	r7, r0
    ff90:	mov	r4, r1
    ff92:	mov	r6, r3
    ff94:	add.w	ip, r1, #20
    ff98:	movs	r0, #0
    ff9a:	ldr.w	r3, [ip]
    ff9e:	uxth	r1, r3
    ffa0:	mla	r1, r2, r1, r6
    ffa4:	lsrs	r6, r3, #16
    ffa6:	lsrs	r3, r1, #16
    ffa8:	mla	r3, r2, r6, r3
    ffac:	uxth	r1, r1
    ffae:	adds	r0, #1
    ffb0:	add.w	r1, r1, r3, lsl #16
    ffb4:	cmp	r5, r0
    ffb6:	str.w	r1, [ip], #4
    ffba:	mov.w	r6, r3, lsr #16
    ffbe:	bgt.n	ff9a <__multadd+0x12>
    ffc0:	cbz	r6, 10006 <__multadd+0x7e>
    ffc2:	ldr	r3, [r4, #8]
    ffc4:	cmp	r3, r5
    ffc6:	bgt.n	fffc <__multadd+0x74>
    ffc8:	ldr	r1, [r4, #4]
    ffca:	mov	r0, r7
    ffcc:	adds	r1, #1
    ffce:	bl	fec4 <_Balloc>
    ffd2:	mov	r8, r0
    ffd4:	cbnz	r0, ffe2 <__multadd+0x5a>
    ffd6:	mov	r2, r0
    ffd8:	ldr	r3, [pc, #48]	; (1000c <__multadd+0x84>)
    ffda:	ldr	r0, [pc, #52]	; (10010 <__multadd+0x88>)
    ffdc:	movs	r1, #186	; 0xba
    ffde:	bl	1140c <__assert_func>
    ffe2:	ldr	r2, [r4, #16]
    ffe4:	adds	r2, #2
    ffe6:	add.w	r1, r4, #12
    ffea:	lsls	r2, r2, #2
    ffec:	adds	r0, #12
    ffee:	bl	9f88 <memcpy>
    fff2:	mov	r1, r4
    fff4:	mov	r0, r7
    fff6:	bl	ff44 <_Bfree>
    fffa:	mov	r4, r8
    fffc:	add.w	r3, r4, r5, lsl #2
   10000:	adds	r5, #1
   10002:	str	r6, [r3, #20]
   10004:	str	r5, [r4, #16]
   10006:	mov	r0, r4
   10008:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1000c:	.word	0x200012b4
   10010:	.word	0x20000be8

00010014 <__s2b>:
   10014:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10018:	mov	r4, r1
   1001a:	mov	r5, r2
   1001c:	mov	r7, r3
   1001e:	movs	r2, #9
   10020:	adds	r3, #8
   10022:	mov	r6, r0
   10024:	sdiv	r3, r3, r2
   10028:	movs	r1, #0
   1002a:	movs	r2, #1
   1002c:	cmp	r2, r3
   1002e:	blt.n	10044 <__s2b+0x30>
   10030:	mov	r0, r6
   10032:	bl	fec4 <_Balloc>
   10036:	cbnz	r0, 1004a <__s2b+0x36>
   10038:	mov	r2, r0
   1003a:	ldr	r3, [pc, #100]	; (100a0 <__s2b+0x8c>)
   1003c:	ldr	r0, [pc, #100]	; (100a4 <__s2b+0x90>)
   1003e:	movs	r1, #211	; 0xd3
   10040:	bl	1140c <__assert_func>
   10044:	lsls	r2, r2, #1
   10046:	adds	r1, #1
   10048:	b.n	1002c <__s2b+0x18>
   1004a:	ldr	r3, [sp, #32]
   1004c:	str	r3, [r0, #20]
   1004e:	cmp	r5, #9
   10050:	mov.w	r3, #1
   10054:	str	r3, [r0, #16]
   10056:	ble.n	10086 <__s2b+0x72>
   10058:	add.w	r9, r4, #9
   1005c:	mov	r8, r9
   1005e:	add	r4, r5
   10060:	ldrb.w	r3, [r8], #1
   10064:	mov	r1, r0
   10066:	subs	r3, #48	; 0x30
   10068:	movs	r2, #10
   1006a:	mov	r0, r6
   1006c:	bl	ff88 <__multadd>
   10070:	cmp	r8, r4
   10072:	bne.n	10060 <__s2b+0x4c>
   10074:	sub.w	r4, r5, #8
   10078:	add	r4, r9
   1007a:	subs	r5, r5, r4
   1007c:	adds	r3, r4, r5
   1007e:	cmp	r3, r7
   10080:	blt.n	1008c <__s2b+0x78>
   10082:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10086:	adds	r4, #10
   10088:	movs	r5, #9
   1008a:	b.n	1007a <__s2b+0x66>
   1008c:	ldrb.w	r3, [r4], #1
   10090:	mov	r1, r0
   10092:	subs	r3, #48	; 0x30
   10094:	movs	r2, #10
   10096:	mov	r0, r6
   10098:	bl	ff88 <__multadd>
   1009c:	b.n	1007c <__s2b+0x68>
   1009e:	nop
   100a0:	.word	0x200012b4
   100a4:	.word	0x20000be8

000100a8 <__hi0bits>:
   100a8:	lsrs	r3, r0, #16
   100aa:	lsls	r3, r3, #16
   100ac:	cbnz	r3, 100e4 <__hi0bits+0x3c>
   100ae:	lsls	r0, r0, #16
   100b0:	movs	r3, #16
   100b2:	tst.w	r0, #4278190080	; 0xff000000
   100b6:	itt	eq
   100b8:	lsleq	r0, r0, #8
   100ba:	addeq	r3, #8
   100bc:	tst.w	r0, #4026531840	; 0xf0000000
   100c0:	itt	eq
   100c2:	lsleq	r0, r0, #4
   100c4:	addeq	r3, #4
   100c6:	tst.w	r0, #3221225472	; 0xc0000000
   100ca:	itt	eq
   100cc:	lsleq	r0, r0, #2
   100ce:	addeq	r3, #2
   100d0:	cmp	r0, #0
   100d2:	blt.n	100e0 <__hi0bits+0x38>
   100d4:	tst.w	r0, #1073741824	; 0x40000000
   100d8:	add.w	r3, r3, #1
   100dc:	it	eq
   100de:	moveq	r3, #32
   100e0:	mov	r0, r3
   100e2:	bx	lr
   100e4:	movs	r3, #0
   100e6:	b.n	100b2 <__hi0bits+0xa>

000100e8 <__lo0bits>:
   100e8:	ldr	r3, [r0, #0]
   100ea:	ands.w	r2, r3, #7
   100ee:	beq.n	1010a <__lo0bits+0x22>
   100f0:	lsls	r1, r3, #31
   100f2:	bmi.n	1013a <__lo0bits+0x52>
   100f4:	lsls	r2, r3, #30
   100f6:	itett	mi
   100f8:	lsrmi	r3, r3, #1
   100fa:	lsrpl	r3, r3, #2
   100fc:	strmi	r3, [r0, #0]
   100fe:	movmi	r2, #1
   10100:	itt	pl
   10102:	strpl	r3, [r0, #0]
   10104:	movpl	r2, #2
   10106:	mov	r0, r2
   10108:	bx	lr
   1010a:	uxth	r1, r3
   1010c:	cbnz	r1, 10112 <__lo0bits+0x2a>
   1010e:	lsrs	r3, r3, #16
   10110:	movs	r2, #16
   10112:	uxtb	r1, r3
   10114:	cbnz	r1, 1011a <__lo0bits+0x32>
   10116:	adds	r2, #8
   10118:	lsrs	r3, r3, #8
   1011a:	lsls	r1, r3, #28
   1011c:	itt	eq
   1011e:	lsreq	r3, r3, #4
   10120:	addeq	r2, #4
   10122:	lsls	r1, r3, #30
   10124:	itt	eq
   10126:	lsreq	r3, r3, #2
   10128:	addeq	r2, #2
   1012a:	lsls	r1, r3, #31
   1012c:	bmi.n	10136 <__lo0bits+0x4e>
   1012e:	lsrs	r3, r3, #1
   10130:	add.w	r2, r2, #1
   10134:	beq.n	1013e <__lo0bits+0x56>
   10136:	str	r3, [r0, #0]
   10138:	b.n	10106 <__lo0bits+0x1e>
   1013a:	movs	r2, #0
   1013c:	b.n	10106 <__lo0bits+0x1e>
   1013e:	movs	r2, #32
   10140:	b.n	10106 <__lo0bits+0x1e>
	...

00010144 <__i2b>:
   10144:	push	{r4, lr}
   10146:	mov	r4, r1
   10148:	movs	r1, #1
   1014a:	bl	fec4 <_Balloc>
   1014e:	mov	r2, r0
   10150:	cbnz	r0, 1015e <__i2b+0x1a>
   10152:	ldr	r3, [pc, #20]	; (10168 <__i2b+0x24>)
   10154:	ldr	r0, [pc, #20]	; (1016c <__i2b+0x28>)
   10156:	movw	r1, #325	; 0x145
   1015a:	bl	1140c <__assert_func>
   1015e:	movs	r3, #1
   10160:	str	r4, [r0, #20]
   10162:	str	r3, [r0, #16]
   10164:	pop	{r4, pc}
   10166:	nop
   10168:	.word	0x200012b4
   1016c:	.word	0x20000be8

00010170 <__multiply>:
   10170:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10174:	mov	r9, r2
   10176:	ldr	r2, [r1, #16]
   10178:	ldr.w	r3, [r9, #16]
   1017c:	cmp	r2, r3
   1017e:	it	lt
   10180:	movlt	r3, r1
   10182:	mov	r4, r1
   10184:	itt	lt
   10186:	movlt	r4, r9
   10188:	movlt	r9, r3
   1018a:	ldr	r7, [r4, #16]
   1018c:	ldr.w	sl, [r9, #16]
   10190:	ldr	r3, [r4, #8]
   10192:	ldr	r1, [r4, #4]
   10194:	add.w	r6, r7, sl
   10198:	cmp	r3, r6
   1019a:	sub	sp, #20
   1019c:	it	lt
   1019e:	addlt	r1, #1
   101a0:	bl	fec4 <_Balloc>
   101a4:	cbnz	r0, 101b4 <__multiply+0x44>
   101a6:	mov	r2, r0
   101a8:	ldr	r3, [pc, #272]	; (102bc <__multiply+0x14c>)
   101aa:	ldr	r0, [pc, #276]	; (102c0 <__multiply+0x150>)
   101ac:	mov.w	r1, #354	; 0x162
   101b0:	bl	1140c <__assert_func>
   101b4:	add.w	r5, r0, #20
   101b8:	add.w	r8, r5, r6, lsl #2
   101bc:	mov	r3, r5
   101be:	movs	r2, #0
   101c0:	cmp	r3, r8
   101c2:	bcc.n	10208 <__multiply+0x98>
   101c4:	add.w	r3, r4, #20
   101c8:	add.w	r7, r3, r7, lsl #2
   101cc:	add.w	r3, r9, #20
   101d0:	add.w	r2, r3, sl, lsl #2
   101d4:	str	r2, [sp, #8]
   101d6:	subs	r2, r7, r4
   101d8:	subs	r2, #21
   101da:	bic.w	r2, r2, #3
   101de:	adds	r2, #4
   101e0:	add.w	r1, r4, #21
   101e4:	cmp	r7, r1
   101e6:	it	cc
   101e8:	movcc	r2, #4
   101ea:	str	r2, [sp, #4]
   101ec:	ldr	r2, [sp, #8]
   101ee:	str	r3, [sp, #12]
   101f0:	cmp	r2, r3
   101f2:	bhi.n	1020e <__multiply+0x9e>
   101f4:	cmp	r6, #0
   101f6:	ble.n	10200 <__multiply+0x90>
   101f8:	ldr.w	r3, [r8, #-4]!
   101fc:	cmp	r3, #0
   101fe:	beq.n	102b8 <__multiply+0x148>
   10200:	str	r6, [r0, #16]
   10202:	add	sp, #20
   10204:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10208:	str.w	r2, [r3], #4
   1020c:	b.n	101c0 <__multiply+0x50>
   1020e:	ldrh.w	sl, [r3]
   10212:	cmp.w	sl, #0
   10216:	beq.n	10262 <__multiply+0xf2>
   10218:	add.w	lr, r4, #20
   1021c:	mov	r9, r5
   1021e:	mov.w	ip, #0
   10222:	ldr.w	r2, [lr], #4
   10226:	ldr.w	r1, [r9]
   1022a:	uxth.w	fp, r2
   1022e:	uxth	r1, r1
   10230:	mla	r1, sl, fp, r1
   10234:	mov.w	fp, r2, lsr #16
   10238:	ldr.w	r2, [r9]
   1023c:	add	r1, ip
   1023e:	mov.w	ip, r2, lsr #16
   10242:	mla	r2, sl, fp, ip
   10246:	add.w	r2, r2, r1, lsr #16
   1024a:	uxth	r1, r1
   1024c:	orr.w	r1, r1, r2, lsl #16
   10250:	cmp	r7, lr
   10252:	str.w	r1, [r9], #4
   10256:	mov.w	ip, r2, lsr #16
   1025a:	bhi.n	10222 <__multiply+0xb2>
   1025c:	ldr	r2, [sp, #4]
   1025e:	str.w	ip, [r5, r2]
   10262:	ldr	r2, [sp, #12]
   10264:	ldrh.w	r9, [r2, #2]
   10268:	adds	r3, #4
   1026a:	cmp.w	r9, #0
   1026e:	beq.n	102b4 <__multiply+0x144>
   10270:	ldr	r1, [r5, #0]
   10272:	add.w	ip, r4, #20
   10276:	mov	lr, r5
   10278:	mov.w	sl, #0
   1027c:	ldrh.w	fp, [ip]
   10280:	ldrh.w	r2, [lr, #2]
   10284:	mla	r2, r9, fp, r2
   10288:	add	r2, sl
   1028a:	uxth	r1, r1
   1028c:	orr.w	r1, r1, r2, lsl #16
   10290:	str.w	r1, [lr], #4
   10294:	ldr.w	r1, [ip], #4
   10298:	mov.w	sl, r1, lsr #16
   1029c:	ldrh.w	r1, [lr]
   102a0:	mla	r1, r9, sl, r1
   102a4:	add.w	r1, r1, r2, lsr #16
   102a8:	cmp	r7, ip
   102aa:	mov.w	sl, r1, lsr #16
   102ae:	bhi.n	1027c <__multiply+0x10c>
   102b0:	ldr	r2, [sp, #4]
   102b2:	str	r1, [r5, r2]
   102b4:	adds	r5, #4
   102b6:	b.n	101ec <__multiply+0x7c>
   102b8:	subs	r6, #1
   102ba:	b.n	101f4 <__multiply+0x84>
   102bc:	.word	0x200012b4
   102c0:	.word	0x20000be8

000102c4 <__pow5mult>:
   102c4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   102c8:	mov	r5, r2
   102ca:	ands.w	r2, r2, #3
   102ce:	mov	r6, r0
   102d0:	mov	r7, r1
   102d2:	beq.n	102e4 <__pow5mult+0x20>
   102d4:	ldr	r4, [pc, #148]	; (1036c <__pow5mult+0xa8>)
   102d6:	subs	r2, #1
   102d8:	movs	r3, #0
   102da:	ldr.w	r2, [r4, r2, lsl #2]
   102de:	bl	ff88 <__multadd>
   102e2:	mov	r7, r0
   102e4:	asrs	r5, r5, #2
   102e6:	beq.n	10364 <__pow5mult+0xa0>
   102e8:	ldr	r4, [r6, #28]
   102ea:	cbnz	r4, 1030c <__pow5mult+0x48>
   102ec:	movs	r0, #16
   102ee:	bl	c9c0 <malloc>
   102f2:	mov	r2, r0
   102f4:	str	r0, [r6, #28]
   102f6:	cbnz	r0, 10304 <__pow5mult+0x40>
   102f8:	ldr	r3, [pc, #116]	; (10370 <__pow5mult+0xac>)
   102fa:	ldr	r0, [pc, #120]	; (10374 <__pow5mult+0xb0>)
   102fc:	movw	r1, #435	; 0x1b3
   10300:	bl	1140c <__assert_func>
   10304:	strd	r4, r4, [r0, #4]
   10308:	str	r4, [r0, #0]
   1030a:	str	r4, [r0, #12]
   1030c:	ldr.w	r8, [r6, #28]
   10310:	ldr.w	r4, [r8, #8]
   10314:	cbnz	r4, 1032a <__pow5mult+0x66>
   10316:	movw	r1, #625	; 0x271
   1031a:	mov	r0, r6
   1031c:	bl	10144 <__i2b>
   10320:	movs	r3, #0
   10322:	str.w	r0, [r8, #8]
   10326:	mov	r4, r0
   10328:	str	r3, [r0, #0]
   1032a:	mov.w	r9, #0
   1032e:	lsls	r3, r5, #31
   10330:	bpl.n	10348 <__pow5mult+0x84>
   10332:	mov	r1, r7
   10334:	mov	r2, r4
   10336:	mov	r0, r6
   10338:	bl	10170 <__multiply>
   1033c:	mov	r1, r7
   1033e:	mov	r8, r0
   10340:	mov	r0, r6
   10342:	bl	ff44 <_Bfree>
   10346:	mov	r7, r8
   10348:	asrs	r5, r5, #1
   1034a:	beq.n	10364 <__pow5mult+0xa0>
   1034c:	ldr	r0, [r4, #0]
   1034e:	cbnz	r0, 10360 <__pow5mult+0x9c>
   10350:	mov	r2, r4
   10352:	mov	r1, r4
   10354:	mov	r0, r6
   10356:	bl	10170 <__multiply>
   1035a:	str	r0, [r4, #0]
   1035c:	str.w	r9, [r0]
   10360:	mov	r4, r0
   10362:	b.n	1032e <__pow5mult+0x6a>
   10364:	mov	r0, r7
   10366:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1036a:	nop
   1036c:	.word	0x20000928
   10370:	.word	0x20001244
   10374:	.word	0x20000be8

00010378 <__lshift>:
   10378:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1037c:	mov	r4, r1
   1037e:	ldr	r1, [r1, #4]
   10380:	ldr	r3, [r4, #16]
   10382:	add.w	r8, r3, r2, asr #5
   10386:	ldr	r3, [r4, #8]
   10388:	mov	r7, r0
   1038a:	mov	r9, r2
   1038c:	mov.w	sl, r2, asr #5
   10390:	add.w	r6, r8, #1
   10394:	cmp	r3, r6
   10396:	blt.n	103b0 <__lshift+0x38>
   10398:	mov	r0, r7
   1039a:	bl	fec4 <_Balloc>
   1039e:	mov	r5, r0
   103a0:	cbnz	r0, 103b6 <__lshift+0x3e>
   103a2:	mov	r2, r0
   103a4:	ldr	r3, [pc, #160]	; (10448 <__lshift+0xd0>)
   103a6:	ldr	r0, [pc, #164]	; (1044c <__lshift+0xd4>)
   103a8:	mov.w	r1, #478	; 0x1de
   103ac:	bl	1140c <__assert_func>
   103b0:	adds	r1, #1
   103b2:	lsls	r3, r3, #1
   103b4:	b.n	10394 <__lshift+0x1c>
   103b6:	movs	r3, #0
   103b8:	add.w	r1, r0, #20
   103bc:	add.w	r2, r0, #16
   103c0:	mov	r0, r3
   103c2:	cmp	r3, sl
   103c4:	blt.n	1042e <__lshift+0xb6>
   103c6:	ldr	r0, [r4, #16]
   103c8:	bic.w	sl, sl, sl, asr #31
   103cc:	add.w	r3, r4, #20
   103d0:	ands.w	r9, r9, #31
   103d4:	add.w	r1, r1, sl, lsl #2
   103d8:	add.w	ip, r3, r0, lsl #2
   103dc:	beq.n	10436 <__lshift+0xbe>
   103de:	rsb	lr, r9, #32
   103e2:	mov	sl, r1
   103e4:	movs	r2, #0
   103e6:	ldr	r0, [r3, #0]
   103e8:	lsl.w	r0, r0, r9
   103ec:	orrs	r0, r2
   103ee:	str.w	r0, [sl], #4
   103f2:	ldr.w	r2, [r3], #4
   103f6:	cmp	ip, r3
   103f8:	lsr.w	r2, r2, lr
   103fc:	bhi.n	103e6 <__lshift+0x6e>
   103fe:	sub.w	r3, ip, r4
   10402:	subs	r3, #21
   10404:	bic.w	r3, r3, #3
   10408:	adds	r3, #4
   1040a:	add.w	r0, r4, #21
   1040e:	cmp	ip, r0
   10410:	it	cc
   10412:	movcc	r3, #4
   10414:	str	r2, [r1, r3]
   10416:	cbz	r2, 1041c <__lshift+0xa4>
   10418:	add.w	r6, r8, #2
   1041c:	subs	r6, #1
   1041e:	mov	r0, r7
   10420:	str	r6, [r5, #16]
   10422:	mov	r1, r4
   10424:	bl	ff44 <_Bfree>
   10428:	mov	r0, r5
   1042a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1042e:	str.w	r0, [r2, #4]!
   10432:	adds	r3, #1
   10434:	b.n	103c2 <__lshift+0x4a>
   10436:	subs	r1, #4
   10438:	ldr.w	r2, [r3], #4
   1043c:	str.w	r2, [r1, #4]!
   10440:	cmp	ip, r3
   10442:	bhi.n	10438 <__lshift+0xc0>
   10444:	b.n	1041c <__lshift+0xa4>
   10446:	nop
   10448:	.word	0x200012b4
   1044c:	.word	0x20000be8

00010450 <__mcmp>:
   10450:	push	{r4, r5, lr}
   10452:	ldr	r2, [r0, #16]
   10454:	ldr	r4, [r1, #16]
   10456:	subs	r2, r2, r4
   10458:	bne.n	10478 <__mcmp+0x28>
   1045a:	add.w	r3, r0, #20
   1045e:	adds	r1, #20
   10460:	add.w	r0, r3, r4, lsl #2
   10464:	add.w	r1, r1, r4, lsl #2
   10468:	ldr.w	r5, [r0, #-4]!
   1046c:	ldr.w	r4, [r1, #-4]!
   10470:	cmp	r5, r4
   10472:	beq.n	1047c <__mcmp+0x2c>
   10474:	bcc.n	10482 <__mcmp+0x32>
   10476:	movs	r2, #1
   10478:	mov	r0, r2
   1047a:	pop	{r4, r5, pc}
   1047c:	cmp	r3, r0
   1047e:	bcc.n	10468 <__mcmp+0x18>
   10480:	b.n	10478 <__mcmp+0x28>
   10482:	mov.w	r2, #4294967295
   10486:	b.n	10478 <__mcmp+0x28>

00010488 <__mdiff>:
   10488:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1048c:	mov	r4, r1
   1048e:	mov	r6, r0
   10490:	mov	r1, r2
   10492:	mov	r0, r4
   10494:	mov	r8, r2
   10496:	bl	10450 <__mcmp>
   1049a:	subs	r5, r0, #0
   1049c:	bne.n	104c0 <__mdiff+0x38>
   1049e:	mov	r1, r5
   104a0:	mov	r0, r6
   104a2:	bl	fec4 <_Balloc>
   104a6:	cbnz	r0, 104b6 <__mdiff+0x2e>
   104a8:	ldr	r3, [pc, #232]	; (10594 <__mdiff+0x10c>)
   104aa:	mov	r2, r0
   104ac:	movw	r1, #567	; 0x237
   104b0:	ldr	r0, [pc, #228]	; (10598 <__mdiff+0x110>)
   104b2:	bl	1140c <__assert_func>
   104b6:	movs	r3, #1
   104b8:	strd	r3, r5, [r0, #16]
   104bc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104c0:	itt	ge
   104c2:	movge	r3, r8
   104c4:	movge	r8, r4
   104c6:	mov	r0, r6
   104c8:	ldr.w	r1, [r8, #4]
   104cc:	itte	ge
   104ce:	movge	r4, r3
   104d0:	movge	r5, #0
   104d2:	movlt	r5, #1
   104d4:	bl	fec4 <_Balloc>
   104d8:	cbnz	r0, 104e4 <__mdiff+0x5c>
   104da:	ldr	r3, [pc, #184]	; (10594 <__mdiff+0x10c>)
   104dc:	mov	r2, r0
   104de:	movw	r1, #581	; 0x245
   104e2:	b.n	104b0 <__mdiff+0x28>
   104e4:	ldr.w	r7, [r8, #16]
   104e8:	ldr	r6, [r4, #16]
   104ea:	str	r5, [r0, #12]
   104ec:	add.w	r9, r4, #20
   104f0:	add.w	r5, r8, #20
   104f4:	add.w	lr, r0, #20
   104f8:	add.w	ip, r5, r7, lsl #2
   104fc:	add.w	r6, r9, r6, lsl #2
   10500:	add.w	r2, r8, #16
   10504:	mov	sl, lr
   10506:	movs	r1, #0
   10508:	ldr.w	r3, [r9], #4
   1050c:	ldr.w	fp, [r2, #4]!
   10510:	uxtah	r8, r1, fp
   10514:	uxth	r1, r3
   10516:	lsrs	r3, r3, #16
   10518:	sub.w	r8, r8, r1
   1051c:	rsb	r3, r3, fp, lsr #16
   10520:	add.w	r3, r3, r8, asr #16
   10524:	uxth.w	r8, r8
   10528:	asrs	r1, r3, #16
   1052a:	cmp	r6, r9
   1052c:	orr.w	r3, r8, r3, lsl #16
   10530:	str.w	r3, [sl], #4
   10534:	bhi.n	10508 <__mdiff+0x80>
   10536:	subs	r3, r6, r4
   10538:	subs	r3, #21
   1053a:	bic.w	r3, r3, #3
   1053e:	adds	r3, #4
   10540:	adds	r4, #21
   10542:	cmp	r6, r4
   10544:	it	cc
   10546:	movcc	r3, #4
   10548:	add	r5, r3
   1054a:	add	r3, lr
   1054c:	mov	lr, r3
   1054e:	mov	r6, r5
   10550:	cmp	r6, ip
   10552:	bcc.n	10572 <__mdiff+0xea>
   10554:	add.w	r2, ip, #3
   10558:	subs	r2, r2, r5
   1055a:	bic.w	r2, r2, #3
   1055e:	subs	r5, #3
   10560:	cmp	ip, r5
   10562:	it	cc
   10564:	movcc	r2, #0
   10566:	add	r3, r2
   10568:	ldr.w	r2, [r3, #-4]!
   1056c:	cbz	r2, 1058e <__mdiff+0x106>
   1056e:	str	r7, [r0, #16]
   10570:	b.n	104bc <__mdiff+0x34>
   10572:	ldr.w	r8, [r6], #4
   10576:	uxtah	r2, r1, r8
   1057a:	asrs	r4, r2, #16
   1057c:	add.w	r4, r4, r8, lsr #16
   10580:	uxth	r2, r2
   10582:	orr.w	r2, r2, r4, lsl #16
   10586:	str.w	r2, [lr], #4
   1058a:	asrs	r1, r4, #16
   1058c:	b.n	10550 <__mdiff+0xc8>
   1058e:	subs	r7, #1
   10590:	b.n	10568 <__mdiff+0xe0>
   10592:	nop
   10594:	.word	0x200012b4
   10598:	.word	0x20000be8

0001059c <__ulp>:
   1059c:	sub	sp, #8
   1059e:	vstr	d0, [sp]
   105a2:	ldr	r2, [sp, #4]
   105a4:	ldr	r3, [pc, #60]	; (105e4 <__ulp+0x48>)
   105a6:	ands	r3, r2
   105a8:	sub.w	r3, r3, #54525952	; 0x3400000
   105ac:	cmp	r3, #0
   105ae:	bgt.n	105c2 <__ulp+0x26>
   105b0:	negs	r3, r3
   105b2:	cmp.w	r3, #20971520	; 0x1400000
   105b6:	mov.w	r2, r3, asr #20
   105ba:	bge.n	105c6 <__ulp+0x2a>
   105bc:	mov.w	r3, #524288	; 0x80000
   105c0:	asrs	r3, r2
   105c2:	movs	r2, #0
   105c4:	b.n	105d8 <__ulp+0x3c>
   105c6:	sub.w	r3, r2, #20
   105ca:	cmp	r3, #30
   105cc:	itte	le
   105ce:	movle.w	r2, #2147483648	; 0x80000000
   105d2:	lsrle	r2, r3
   105d4:	movgt	r2, #1
   105d6:	movs	r3, #0
   105d8:	mov	r1, r3
   105da:	mov	r0, r2
   105dc:	vmov	d0, r0, r1
   105e0:	add	sp, #8
   105e2:	bx	lr
   105e4:	.word	0x7ff00000

000105e8 <__b2d>:
   105e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105ec:	ldr	r6, [r0, #16]
   105ee:	add.w	r8, r0, #20
   105f2:	add.w	r6, r8, r6, lsl #2
   105f6:	subs	r7, r6, #4
   105f8:	ldr.w	r2, [r6, #-4]
   105fc:	mov	r0, r2
   105fe:	bl	100a8 <__hi0bits>
   10602:	rsb	r3, r0, #32
   10606:	cmp	r0, #10
   10608:	str	r3, [r1, #0]
   1060a:	ldr	r1, [pc, #108]	; (10678 <__b2d+0x90>)
   1060c:	bgt.n	1063a <__b2d+0x52>
   1060e:	rsb	ip, r0, #11
   10612:	lsr.w	r3, r2, ip
   10616:	cmp	r8, r7
   10618:	orr.w	r5, r3, r1
   1061c:	ite	cc
   1061e:	ldrcc.w	r3, [r6, #-8]
   10622:	movcs	r3, #0
   10624:	adds	r0, #21
   10626:	lsl.w	r0, r2, r0
   1062a:	lsr.w	r3, r3, ip
   1062e:	orrs	r3, r0
   10630:	mov	r4, r3
   10632:	vmov	d0, r4, r5
   10636:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1063a:	cmp	r8, r7
   1063c:	itte	cc
   1063e:	ldrcc.w	r3, [r6, #-8]
   10642:	subcc.w	r7, r6, #8
   10646:	movcs	r3, #0
   10648:	subs	r0, #11
   1064a:	beq.n	10672 <__b2d+0x8a>
   1064c:	rsb	r1, r0, #32
   10650:	lsr.w	r4, r3, r1
   10654:	lsls	r2, r0
   10656:	orrs	r2, r4
   10658:	cmp	r7, r8
   1065a:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   1065e:	ite	hi
   10660:	ldrhi.w	r2, [r7, #-4]
   10664:	movls	r2, #0
   10666:	lsls	r3, r0
   10668:	lsrs	r2, r1
   1066a:	orr.w	r5, r5, #3145728	; 0x300000
   1066e:	orrs	r3, r2
   10670:	b.n	10630 <__b2d+0x48>
   10672:	orr.w	r5, r2, r1
   10676:	b.n	10630 <__b2d+0x48>
   10678:	.word	0x3ff00000

0001067c <__d2b>:
   1067c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10680:	mov	r7, r1
   10682:	movs	r1, #1
   10684:	vmov	r8, r9, d0
   10688:	mov	r6, r2
   1068a:	bl	fec4 <_Balloc>
   1068e:	mov	r4, r0
   10690:	cbnz	r0, 106a0 <__d2b+0x24>
   10692:	mov	r2, r0
   10694:	ldr	r3, [pc, #144]	; (10728 <__d2b+0xac>)
   10696:	ldr	r0, [pc, #148]	; (1072c <__d2b+0xb0>)
   10698:	movw	r1, #783	; 0x30f
   1069c:	bl	1140c <__assert_func>
   106a0:	ubfx	r5, r9, #20, #11
   106a4:	ubfx	r3, r9, #0, #20
   106a8:	cbnz	r5, 106f6 <__d2b+0x7a>
   106aa:	str	r3, [sp, #4]
   106ac:	subs.w	r3, r8, #0
   106b0:	beq.n	10700 <__d2b+0x84>
   106b2:	mov	r0, sp
   106b4:	str	r3, [sp, #0]
   106b6:	bl	100e8 <__lo0bits>
   106ba:	ldrd	r1, r2, [sp]
   106be:	cbz	r0, 106fc <__d2b+0x80>
   106c0:	rsb	r3, r0, #32
   106c4:	lsl.w	r3, r2, r3
   106c8:	orrs	r3, r1
   106ca:	lsrs	r2, r0
   106cc:	str	r3, [r4, #20]
   106ce:	str	r2, [sp, #4]
   106d0:	ldr	r3, [sp, #4]
   106d2:	str	r3, [r4, #24]
   106d4:	cmp	r3, #0
   106d6:	ite	ne
   106d8:	movne	r2, #2
   106da:	moveq	r2, #1
   106dc:	str	r2, [r4, #16]
   106de:	cbz	r5, 10710 <__d2b+0x94>
   106e0:	subw	r5, r5, #1075	; 0x433
   106e4:	add	r5, r0
   106e6:	str	r5, [r7, #0]
   106e8:	rsb	r0, r0, #53	; 0x35
   106ec:	str	r0, [r6, #0]
   106ee:	mov	r0, r4
   106f0:	add	sp, #12
   106f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   106f6:	orr.w	r3, r3, #1048576	; 0x100000
   106fa:	b.n	106aa <__d2b+0x2e>
   106fc:	str	r1, [r4, #20]
   106fe:	b.n	106d0 <__d2b+0x54>
   10700:	add	r0, sp, #4
   10702:	bl	100e8 <__lo0bits>
   10706:	ldr	r3, [sp, #4]
   10708:	str	r3, [r4, #20]
   1070a:	adds	r0, #32
   1070c:	movs	r2, #1
   1070e:	b.n	106dc <__d2b+0x60>
   10710:	add.w	r3, r4, r2, lsl #2
   10714:	subw	r0, r0, #1074	; 0x432
   10718:	str	r0, [r7, #0]
   1071a:	ldr	r0, [r3, #16]
   1071c:	bl	100a8 <__hi0bits>
   10720:	rsb	r0, r0, r2, lsl #5
   10724:	b.n	106ec <__d2b+0x70>
   10726:	nop
   10728:	.word	0x200012b4
   1072c:	.word	0x20000be8

00010730 <__ratio>:
   10730:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10734:	mov	r8, r1
   10736:	mov	r1, sp
   10738:	mov	r9, r0
   1073a:	bl	105e8 <__b2d>
   1073e:	add	r1, sp, #4
   10740:	mov	r0, r8
   10742:	vmov	r4, r5, d0
   10746:	vmov	sl, s0
   1074a:	bl	105e8 <__b2d>
   1074e:	ldr.w	r3, [r8, #16]
   10752:	ldr.w	r2, [r9, #16]
   10756:	subs	r2, r2, r3
   10758:	ldrd	r3, r1, [sp]
   1075c:	subs	r3, r3, r1
   1075e:	add.w	r3, r3, r2, lsl #5
   10762:	vmov	r6, r7, d0
   10766:	cmp	r3, #0
   10768:	itet	le
   1076a:	rsble	r3, r3, r3, lsl #12
   1076e:	movgt	r2, r5
   10770:	movle	r2, r7
   10772:	mov	fp, r5
   10774:	itet	le
   10776:	addle.w	r3, r2, r3, lsl #20
   1077a:	addgt.w	fp, r2, r3, lsl #20
   1077e:	vmovle	s1, r3
   10782:	vmov	d7, sl, fp
   10786:	vdiv.f64	d0, d7, d0
   1078a:	add	sp, #12
   1078c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010790 <__copybits>:
   10790:	subs	r1, #1
   10792:	push	{r4, r5, r6, lr}
   10794:	asrs	r1, r1, #5
   10796:	ldr	r4, [r2, #16]
   10798:	adds	r1, #1
   1079a:	add.w	r3, r2, #20
   1079e:	add.w	r1, r0, r1, lsl #2
   107a2:	add.w	r4, r3, r4, lsl #2
   107a6:	subs	r5, r0, #4
   107a8:	cmp	r3, r4
   107aa:	bcc.n	107c6 <__copybits+0x36>
   107ac:	subs	r3, r4, r2
   107ae:	subs	r3, #17
   107b0:	bic.w	r3, r3, #3
   107b4:	adds	r2, #17
   107b6:	cmp	r2, r4
   107b8:	it	hi
   107ba:	movhi	r3, #0
   107bc:	add	r0, r3
   107be:	movs	r3, #0
   107c0:	cmp	r0, r1
   107c2:	bcc.n	107d0 <__copybits+0x40>
   107c4:	pop	{r4, r5, r6, pc}
   107c6:	ldr.w	r6, [r3], #4
   107ca:	str.w	r6, [r5, #4]!
   107ce:	b.n	107a8 <__copybits+0x18>
   107d0:	str.w	r3, [r0], #4
   107d4:	b.n	107c0 <__copybits+0x30>

000107d6 <__any_on>:
   107d6:	add.w	r2, r0, #20
   107da:	ldr	r0, [r0, #16]
   107dc:	asrs	r3, r1, #5
   107de:	cmp	r0, r3
   107e0:	push	{r4, lr}
   107e2:	blt.n	10808 <__any_on+0x32>
   107e4:	ble.n	107fc <__any_on+0x26>
   107e6:	ands.w	r1, r1, #31
   107ea:	beq.n	107fc <__any_on+0x26>
   107ec:	ldr.w	r4, [r2, r3, lsl #2]
   107f0:	lsr.w	r0, r4, r1
   107f4:	lsl.w	r1, r0, r1
   107f8:	cmp	r4, r1
   107fa:	bne.n	10814 <__any_on+0x3e>
   107fc:	add.w	r3, r2, r3, lsl #2
   10800:	cmp	r3, r2
   10802:	bhi.n	1080c <__any_on+0x36>
   10804:	movs	r0, #0
   10806:	pop	{r4, pc}
   10808:	mov	r3, r0
   1080a:	b.n	107fc <__any_on+0x26>
   1080c:	ldr.w	r1, [r3, #-4]!
   10810:	cmp	r1, #0
   10812:	beq.n	10800 <__any_on+0x2a>
   10814:	movs	r0, #1
   10816:	b.n	10806 <__any_on+0x30>

00010818 <_malloc_usable_size_r>:
   10818:	ldr.w	r3, [r1, #-4]
   1081c:	subs	r0, r3, #4
   1081e:	cmp	r3, #0
   10820:	itt	lt
   10822:	ldrlt	r3, [r1, r0]
   10824:	addlt	r0, r0, r3
   10826:	bx	lr

00010828 <__ascii_wctomb>:
   10828:	cbz	r1, 1083e <__ascii_wctomb+0x16>
   1082a:	cmp	r2, #255	; 0xff
   1082c:	ittet	hi
   1082e:	movhi	r3, #138	; 0x8a
   10830:	strhi	r3, [r0, #0]
   10832:	strbls	r2, [r1, #0]
   10834:	movhi.w	r0, #4294967295
   10838:	it	ls
   1083a:	movls	r0, #1
   1083c:	bx	lr
   1083e:	mov	r0, r1
   10840:	bx	lr
	...

00010844 <fcvtbuf>:
   10844:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10848:	mov	r8, r2
   1084a:	ldr	r2, [pc, #136]	; (108d4 <fcvtbuf+0x90>)
   1084c:	sub	sp, #28
   1084e:	ldr	r6, [r2, #0]
   10850:	mov	r5, r0
   10852:	mov	r7, r1
   10854:	mov	r4, r3
   10856:	cbnz	r3, 10882 <fcvtbuf+0x3e>
   10858:	ldr	r2, [r6, #40]	; 0x28
   1085a:	ldr	r1, [r6, #44]	; 0x2c
   1085c:	add.w	r3, r0, #35	; 0x23
   10860:	cmp	r2, r3
   10862:	bgt.n	10880 <fcvtbuf+0x3c>
   10864:	add.w	r9, r0, #36	; 0x24
   10868:	mov	r2, r9
   1086a:	mov	r0, r6
   1086c:	vstr	d0, [sp, #8]
   10870:	bl	cb24 <_realloc_r>
   10874:	mov	r4, r0
   10876:	cbz	r0, 108bc <fcvtbuf+0x78>
   10878:	strd	r9, r0, [r6, #40]	; 0x28
   1087c:	vldr	d0, [sp, #8]
   10880:	ldr	r4, [r6, #44]	; 0x2c
   10882:	add	r3, sp, #20
   10884:	strd	r8, r3, [sp]
   10888:	mov	r2, r5
   1088a:	mov	r3, r7
   1088c:	movs	r1, #3
   1088e:	mov	r0, r6
   10890:	bl	ec80 <_dtoa_r>
   10894:	ldr	r3, [r7, #0]
   10896:	negs	r3, r3
   10898:	mov	r2, r4
   1089a:	subs	r3, r3, r4
   1089c:	ldr	r1, [sp, #20]
   1089e:	cmp	r1, r0
   108a0:	add.w	r6, r2, r3
   108a4:	bhi.n	108c4 <fcvtbuf+0x80>
   108a6:	mov	r1, r2
   108a8:	movs	r7, #48	; 0x30
   108aa:	adds	r0, r1, r3
   108ac:	cmp	r5, r0
   108ae:	bgt.n	108ce <fcvtbuf+0x8a>
   108b0:	subs	r3, r5, r6
   108b2:	cmp	r5, r6
   108b4:	it	lt
   108b6:	movlt	r3, #0
   108b8:	movs	r1, #0
   108ba:	strb	r1, [r2, r3]
   108bc:	mov	r0, r4
   108be:	add	sp, #28
   108c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   108c4:	ldrb.w	r1, [r0], #1
   108c8:	strb.w	r1, [r2], #1
   108cc:	b.n	1089c <fcvtbuf+0x58>
   108ce:	strb.w	r7, [r1], #1
   108d2:	b.n	108aa <fcvtbuf+0x66>
   108d4:	.word	0x20001e08

000108d8 <__ssputs_r>:
   108d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   108dc:	ldr	r6, [r1, #8]
   108de:	mov	r7, r3
   108e0:	cmp	r6, r7
   108e2:	ldr	r3, [r1, #0]
   108e4:	mov	sl, r0
   108e6:	mov	r4, r1
   108e8:	mov	r8, r2
   108ea:	bhi.n	10946 <__ssputs_r+0x6e>
   108ec:	ldrh	r2, [r1, #12]
   108ee:	tst.w	r2, #1152	; 0x480
   108f2:	beq.n	10942 <__ssputs_r+0x6a>
   108f4:	ldr	r5, [r4, #20]
   108f6:	ldr	r1, [r1, #16]
   108f8:	add.w	r5, r5, r5, lsl #1
   108fc:	sub.w	r9, r3, r1
   10900:	add.w	r5, r5, r5, lsr #31
   10904:	adds	r3, r7, #1
   10906:	add	r3, r9
   10908:	asrs	r5, r5, #1
   1090a:	cmp	r5, r3
   1090c:	it	cc
   1090e:	movcc	r5, r3
   10910:	lsls	r3, r2, #21
   10912:	bpl.n	10964 <__ssputs_r+0x8c>
   10914:	mov	r1, r5
   10916:	bl	ca20 <_malloc_r>
   1091a:	mov	r6, r0
   1091c:	cbz	r0, 10978 <__ssputs_r+0xa0>
   1091e:	ldr	r1, [r4, #16]
   10920:	mov	r2, r9
   10922:	bl	9f88 <memcpy>
   10926:	ldrh	r3, [r4, #12]
   10928:	bic.w	r3, r3, #1152	; 0x480
   1092c:	orr.w	r3, r3, #128	; 0x80
   10930:	strh	r3, [r4, #12]
   10932:	str	r6, [r4, #16]
   10934:	str	r5, [r4, #20]
   10936:	add	r6, r9
   10938:	sub.w	r5, r5, r9
   1093c:	str	r6, [r4, #0]
   1093e:	str	r5, [r4, #8]
   10940:	mov	r6, r7
   10942:	cmp	r6, r7
   10944:	bls.n	10948 <__ssputs_r+0x70>
   10946:	mov	r6, r7
   10948:	ldr	r0, [r4, #0]
   1094a:	mov	r2, r6
   1094c:	mov	r1, r8
   1094e:	bl	e8a4 <memmove>
   10952:	ldr	r3, [r4, #8]
   10954:	subs	r3, r3, r6
   10956:	str	r3, [r4, #8]
   10958:	ldr	r3, [r4, #0]
   1095a:	add	r3, r6
   1095c:	str	r3, [r4, #0]
   1095e:	movs	r0, #0
   10960:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10964:	mov	r2, r5
   10966:	bl	cb24 <_realloc_r>
   1096a:	mov	r6, r0
   1096c:	cmp	r0, #0
   1096e:	bne.n	10932 <__ssputs_r+0x5a>
   10970:	ldr	r1, [r4, #16]
   10972:	mov	r0, sl
   10974:	bl	f758 <_free_r>
   10978:	movs	r3, #12
   1097a:	str.w	r3, [sl]
   1097e:	ldrh	r3, [r4, #12]
   10980:	orr.w	r3, r3, #64	; 0x40
   10984:	strh	r3, [r4, #12]
   10986:	mov.w	r0, #4294967295
   1098a:	b.n	10960 <__ssputs_r+0x88>

0001098c <_svfiprintf_r>:
   1098c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10990:	mov	r8, r3
   10992:	ldrh	r3, [r1, #12]
   10994:	lsls	r3, r3, #24
   10996:	sub	sp, #116	; 0x74
   10998:	mov	r7, r0
   1099a:	mov	r5, r1
   1099c:	mov	r4, r2
   1099e:	bpl.n	109be <_svfiprintf_r+0x32>
   109a0:	ldr	r3, [r1, #16]
   109a2:	cbnz	r3, 109be <_svfiprintf_r+0x32>
   109a4:	movs	r1, #64	; 0x40
   109a6:	bl	ca20 <_malloc_r>
   109aa:	str	r0, [r5, #0]
   109ac:	str	r0, [r5, #16]
   109ae:	cbnz	r0, 109ba <_svfiprintf_r+0x2e>
   109b0:	movs	r3, #12
   109b2:	str	r3, [r7, #0]
   109b4:	mov.w	r0, #4294967295
   109b8:	b.n	10b5c <_svfiprintf_r+0x1d0>
   109ba:	movs	r3, #64	; 0x40
   109bc:	str	r3, [r5, #20]
   109be:	movs	r3, #0
   109c0:	str	r3, [sp, #36]	; 0x24
   109c2:	movs	r3, #32
   109c4:	strb.w	r3, [sp, #41]	; 0x29
   109c8:	str.w	r8, [sp, #12]
   109cc:	movs	r3, #48	; 0x30
   109ce:	ldr.w	r8, [pc, #420]	; 10b74 <_svfiprintf_r+0x1e8>
   109d2:	strb.w	r3, [sp, #42]	; 0x2a
   109d6:	mov.w	r9, #1
   109da:	mov	r3, r4
   109dc:	mov	sl, r3
   109de:	ldrb.w	r2, [r3], #1
   109e2:	cbz	r2, 109e8 <_svfiprintf_r+0x5c>
   109e4:	cmp	r2, #37	; 0x25
   109e6:	bne.n	109dc <_svfiprintf_r+0x50>
   109e8:	subs.w	fp, sl, r4
   109ec:	beq.n	10a06 <_svfiprintf_r+0x7a>
   109ee:	mov	r3, fp
   109f0:	mov	r2, r4
   109f2:	mov	r1, r5
   109f4:	mov	r0, r7
   109f6:	bl	108d8 <__ssputs_r>
   109fa:	adds	r0, #1
   109fc:	beq.w	10b52 <_svfiprintf_r+0x1c6>
   10a00:	ldr	r2, [sp, #36]	; 0x24
   10a02:	add	r2, fp
   10a04:	str	r2, [sp, #36]	; 0x24
   10a06:	ldrb.w	r3, [sl]
   10a0a:	cmp	r3, #0
   10a0c:	beq.w	10b52 <_svfiprintf_r+0x1c6>
   10a10:	movs	r3, #0
   10a12:	mov.w	r2, #4294967295
   10a16:	strd	r2, r3, [sp, #20]
   10a1a:	add.w	sl, sl, #1
   10a1e:	str	r3, [sp, #16]
   10a20:	str	r3, [sp, #28]
   10a22:	strb.w	r3, [sp, #83]	; 0x53
   10a26:	str	r3, [sp, #104]	; 0x68
   10a28:	mov	r4, sl
   10a2a:	movs	r2, #5
   10a2c:	ldrb.w	r1, [r4], #1
   10a30:	ldr	r0, [pc, #320]	; (10b74 <_svfiprintf_r+0x1e8>)
   10a32:	bl	eaa0 <memchr>
   10a36:	ldr	r2, [sp, #16]
   10a38:	cbnz	r0, 10a72 <_svfiprintf_r+0xe6>
   10a3a:	lsls	r0, r2, #27
   10a3c:	itt	mi
   10a3e:	movmi	r3, #32
   10a40:	strbmi.w	r3, [sp, #83]	; 0x53
   10a44:	lsls	r1, r2, #28
   10a46:	itt	mi
   10a48:	movmi	r3, #43	; 0x2b
   10a4a:	strbmi.w	r3, [sp, #83]	; 0x53
   10a4e:	ldrb.w	r3, [sl]
   10a52:	cmp	r3, #42	; 0x2a
   10a54:	beq.n	10a82 <_svfiprintf_r+0xf6>
   10a56:	ldr	r2, [sp, #28]
   10a58:	mov	r4, sl
   10a5a:	movs	r0, #0
   10a5c:	mov.w	ip, #10
   10a60:	mov	r1, r4
   10a62:	ldrb.w	r3, [r1], #1
   10a66:	subs	r3, #48	; 0x30
   10a68:	cmp	r3, #9
   10a6a:	bls.n	10b08 <_svfiprintf_r+0x17c>
   10a6c:	cbz	r0, 10a9c <_svfiprintf_r+0x110>
   10a6e:	str	r2, [sp, #28]
   10a70:	b.n	10a9c <_svfiprintf_r+0x110>
   10a72:	sub.w	r3, r0, r8
   10a76:	lsl.w	r3, r9, r3
   10a7a:	orrs	r3, r2
   10a7c:	str	r3, [sp, #16]
   10a7e:	mov	sl, r4
   10a80:	b.n	10a28 <_svfiprintf_r+0x9c>
   10a82:	ldr	r3, [sp, #12]
   10a84:	adds	r1, r3, #4
   10a86:	ldr	r3, [r3, #0]
   10a88:	str	r1, [sp, #12]
   10a8a:	cmp	r3, #0
   10a8c:	ittet	lt
   10a8e:	neglt	r3, r3
   10a90:	orrlt.w	r2, r2, #2
   10a94:	strge	r3, [sp, #28]
   10a96:	strlt	r3, [sp, #28]
   10a98:	it	lt
   10a9a:	strlt	r2, [sp, #16]
   10a9c:	ldrb	r3, [r4, #0]
   10a9e:	cmp	r3, #46	; 0x2e
   10aa0:	bne.n	10abc <_svfiprintf_r+0x130>
   10aa2:	ldrb	r3, [r4, #1]
   10aa4:	cmp	r3, #42	; 0x2a
   10aa6:	bne.n	10b12 <_svfiprintf_r+0x186>
   10aa8:	ldr	r3, [sp, #12]
   10aaa:	adds	r2, r3, #4
   10aac:	ldr	r3, [r3, #0]
   10aae:	str	r2, [sp, #12]
   10ab0:	cmp	r3, #0
   10ab2:	it	lt
   10ab4:	movlt.w	r3, #4294967295
   10ab8:	adds	r4, #2
   10aba:	str	r3, [sp, #20]
   10abc:	ldr.w	sl, [pc, #196]	; 10b84 <_svfiprintf_r+0x1f8>
   10ac0:	ldrb	r1, [r4, #0]
   10ac2:	movs	r2, #3
   10ac4:	mov	r0, sl
   10ac6:	bl	eaa0 <memchr>
   10aca:	cbz	r0, 10adc <_svfiprintf_r+0x150>
   10acc:	ldr	r3, [sp, #16]
   10ace:	sub.w	r0, r0, sl
   10ad2:	movs	r2, #64	; 0x40
   10ad4:	lsls	r2, r0
   10ad6:	orrs	r3, r2
   10ad8:	adds	r4, #1
   10ada:	str	r3, [sp, #16]
   10adc:	ldrb.w	r1, [r4], #1
   10ae0:	ldr	r0, [pc, #148]	; (10b78 <_svfiprintf_r+0x1ec>)
   10ae2:	strb.w	r1, [sp, #40]	; 0x28
   10ae6:	movs	r2, #6
   10ae8:	bl	eaa0 <memchr>
   10aec:	cmp	r0, #0
   10aee:	beq.n	10b62 <_svfiprintf_r+0x1d6>
   10af0:	ldr	r3, [pc, #136]	; (10b7c <_svfiprintf_r+0x1f0>)
   10af2:	cbnz	r3, 10b3c <_svfiprintf_r+0x1b0>
   10af4:	ldr	r3, [sp, #12]
   10af6:	adds	r3, #7
   10af8:	bic.w	r3, r3, #7
   10afc:	adds	r3, #8
   10afe:	str	r3, [sp, #12]
   10b00:	ldr	r3, [sp, #36]	; 0x24
   10b02:	add	r3, r6
   10b04:	str	r3, [sp, #36]	; 0x24
   10b06:	b.n	109da <_svfiprintf_r+0x4e>
   10b08:	mla	r2, ip, r2, r3
   10b0c:	mov	r4, r1
   10b0e:	movs	r0, #1
   10b10:	b.n	10a60 <_svfiprintf_r+0xd4>
   10b12:	movs	r3, #0
   10b14:	adds	r4, #1
   10b16:	str	r3, [sp, #20]
   10b18:	mov	r1, r3
   10b1a:	mov.w	ip, #10
   10b1e:	mov	r0, r4
   10b20:	ldrb.w	r2, [r0], #1
   10b24:	subs	r2, #48	; 0x30
   10b26:	cmp	r2, #9
   10b28:	bls.n	10b32 <_svfiprintf_r+0x1a6>
   10b2a:	cmp	r3, #0
   10b2c:	beq.n	10abc <_svfiprintf_r+0x130>
   10b2e:	str	r1, [sp, #20]
   10b30:	b.n	10abc <_svfiprintf_r+0x130>
   10b32:	mla	r1, ip, r1, r2
   10b36:	mov	r4, r0
   10b38:	movs	r3, #1
   10b3a:	b.n	10b1e <_svfiprintf_r+0x192>
   10b3c:	add	r3, sp, #12
   10b3e:	str	r3, [sp, #0]
   10b40:	mov	r2, r5
   10b42:	ldr	r3, [pc, #60]	; (10b80 <_svfiprintf_r+0x1f4>)
   10b44:	add	r1, sp, #16
   10b46:	mov	r0, r7
   10b48:	bl	d980 <_printf_float>
   10b4c:	adds	r2, r0, #1
   10b4e:	mov	r6, r0
   10b50:	bne.n	10b00 <_svfiprintf_r+0x174>
   10b52:	ldrh	r3, [r5, #12]
   10b54:	lsls	r3, r3, #25
   10b56:	bmi.w	109b4 <_svfiprintf_r+0x28>
   10b5a:	ldr	r0, [sp, #36]	; 0x24
   10b5c:	add	sp, #116	; 0x74
   10b5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b62:	add	r3, sp, #12
   10b64:	str	r3, [sp, #0]
   10b66:	mov	r2, r5
   10b68:	ldr	r3, [pc, #20]	; (10b80 <_svfiprintf_r+0x1f4>)
   10b6a:	add	r1, sp, #16
   10b6c:	mov	r0, r7
   10b6e:	bl	de90 <_printf_i>
   10b72:	b.n	10b4c <_svfiprintf_r+0x1c0>
   10b74:	.word	0x2000130c
   10b78:	.word	0x20001316
   10b7c:	.word	0x0000d981
   10b80:	.word	0x000108d9
   10b84:	.word	0x20001312

00010b88 <_sungetc_r>:
   10b88:	push	{r3, r4, r5, lr}
   10b8a:	adds	r3, r1, #1
   10b8c:	mov	r4, r2
   10b8e:	bne.n	10b98 <_sungetc_r+0x10>
   10b90:	mov.w	r5, #4294967295
   10b94:	mov	r0, r5
   10b96:	pop	{r3, r4, r5, pc}
   10b98:	ldrh	r3, [r2, #12]
   10b9a:	bic.w	r3, r3, #32
   10b9e:	strh	r3, [r2, #12]
   10ba0:	ldr	r3, [r4, #52]	; 0x34
   10ba2:	ldr	r2, [r2, #4]
   10ba4:	uxtb	r5, r1
   10ba6:	cbz	r3, 10bcc <_sungetc_r+0x44>
   10ba8:	ldr	r3, [r4, #56]	; 0x38
   10baa:	cmp	r3, r2
   10bac:	ble.n	10bc0 <_sungetc_r+0x38>
   10bae:	ldr	r3, [r4, #0]
   10bb0:	subs	r2, r3, #1
   10bb2:	str	r2, [r4, #0]
   10bb4:	strb.w	r5, [r3, #-1]
   10bb8:	ldr	r3, [r4, #4]
   10bba:	adds	r3, #1
   10bbc:	str	r3, [r4, #4]
   10bbe:	b.n	10b94 <_sungetc_r+0xc>
   10bc0:	mov	r1, r4
   10bc2:	bl	11396 <__submore>
   10bc6:	cmp	r0, #0
   10bc8:	beq.n	10bae <_sungetc_r+0x26>
   10bca:	b.n	10b90 <_sungetc_r+0x8>
   10bcc:	ldr	r1, [r4, #16]
   10bce:	ldr	r3, [r4, #0]
   10bd0:	cbz	r1, 10be8 <_sungetc_r+0x60>
   10bd2:	cmp	r1, r3
   10bd4:	bcs.n	10be8 <_sungetc_r+0x60>
   10bd6:	ldrb.w	r1, [r3, #-1]
   10bda:	cmp	r1, r5
   10bdc:	bne.n	10be8 <_sungetc_r+0x60>
   10bde:	subs	r3, #1
   10be0:	adds	r2, #1
   10be2:	str	r3, [r4, #0]
   10be4:	str	r2, [r4, #4]
   10be6:	b.n	10b94 <_sungetc_r+0xc>
   10be8:	strd	r3, r2, [r4, #60]	; 0x3c
   10bec:	add.w	r3, r4, #68	; 0x44
   10bf0:	str	r3, [r4, #52]	; 0x34
   10bf2:	movs	r3, #3
   10bf4:	str	r3, [r4, #56]	; 0x38
   10bf6:	mov	r3, r4
   10bf8:	strb.w	r5, [r3, #70]!
   10bfc:	str	r3, [r4, #0]
   10bfe:	movs	r3, #1
   10c00:	b.n	10bbc <_sungetc_r+0x34>

00010c02 <__ssrefill_r>:
   10c02:	push	{r4, lr}
   10c04:	mov	r4, r1
   10c06:	ldr	r1, [r1, #52]	; 0x34
   10c08:	cbz	r1, 10c26 <__ssrefill_r+0x24>
   10c0a:	add.w	r3, r4, #68	; 0x44
   10c0e:	cmp	r1, r3
   10c10:	beq.n	10c16 <__ssrefill_r+0x14>
   10c12:	bl	f758 <_free_r>
   10c16:	ldr	r3, [r4, #64]	; 0x40
   10c18:	str	r3, [r4, #4]
   10c1a:	movs	r0, #0
   10c1c:	str	r0, [r4, #52]	; 0x34
   10c1e:	cbz	r3, 10c26 <__ssrefill_r+0x24>
   10c20:	ldr	r3, [r4, #60]	; 0x3c
   10c22:	str	r3, [r4, #0]
   10c24:	pop	{r4, pc}
   10c26:	ldr	r3, [r4, #16]
   10c28:	str	r3, [r4, #0]
   10c2a:	movs	r3, #0
   10c2c:	str	r3, [r4, #4]
   10c2e:	ldrh	r3, [r4, #12]
   10c30:	orr.w	r3, r3, #32
   10c34:	strh	r3, [r4, #12]
   10c36:	mov.w	r0, #4294967295
   10c3a:	b.n	10c24 <__ssrefill_r+0x22>

00010c3c <__ssvfiscanf_r>:
   10c3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c40:	mov	r4, r1
   10c42:	sub.w	sp, sp, #648	; 0x288
   10c46:	movs	r1, #0
   10c48:	strd	r1, r1, [sp, #272]	; 0x110
   10c4c:	ldr	r1, [pc, #664]	; (10ee8 <__ssvfiscanf_r+0x2ac>)
   10c4e:	str	r1, [sp, #640]	; 0x280
   10c50:	add.w	r8, sp, #4
   10c54:	ldr	r1, [pc, #660]	; (10eec <__ssvfiscanf_r+0x2b0>)
   10c56:	ldr	r7, [pc, #664]	; (10ef0 <__ssvfiscanf_r+0x2b4>)
   10c58:	ldr.w	r9, [pc, #664]	; 10ef4 <__ssvfiscanf_r+0x2b8>
   10c5c:	str.w	r8, [sp, #280]	; 0x118
   10c60:	mov	r6, r0
   10c62:	str	r1, [sp, #644]	; 0x284
   10c64:	str	r3, [sp, #0]
   10c66:	ldrb	r3, [r2, #0]
   10c68:	cmp	r3, #0
   10c6a:	beq.w	10f22 <__ssvfiscanf_r+0x2e6>
   10c6e:	ldrb	r1, [r7, r3]
   10c70:	ands.w	r1, r1, #8
   10c74:	add.w	r5, r2, #1
   10c78:	beq.n	10cae <__ssvfiscanf_r+0x72>
   10c7a:	ldr	r3, [r4, #4]
   10c7c:	cmp	r3, #0
   10c7e:	ble.n	10ca0 <__ssvfiscanf_r+0x64>
   10c80:	ldr	r3, [r4, #0]
   10c82:	ldrb	r2, [r3, #0]
   10c84:	ldrb	r2, [r7, r2]
   10c86:	lsls	r2, r2, #28
   10c88:	bmi.n	10c8e <__ssvfiscanf_r+0x52>
   10c8a:	mov	r2, r5
   10c8c:	b.n	10c66 <__ssvfiscanf_r+0x2a>
   10c8e:	ldr	r2, [sp, #276]	; 0x114
   10c90:	adds	r2, #1
   10c92:	str	r2, [sp, #276]	; 0x114
   10c94:	ldr	r2, [r4, #4]
   10c96:	adds	r3, #1
   10c98:	subs	r2, #1
   10c9a:	str	r2, [r4, #4]
   10c9c:	str	r3, [r4, #0]
   10c9e:	b.n	10c7a <__ssvfiscanf_r+0x3e>
   10ca0:	ldr	r3, [sp, #644]	; 0x284
   10ca2:	mov	r1, r4
   10ca4:	mov	r0, r6
   10ca6:	blx	r3
   10ca8:	cmp	r0, #0
   10caa:	beq.n	10c80 <__ssvfiscanf_r+0x44>
   10cac:	b.n	10c8a <__ssvfiscanf_r+0x4e>
   10cae:	cmp	r3, #37	; 0x25
   10cb0:	beq.n	10cd8 <__ssvfiscanf_r+0x9c>
   10cb2:	mov	sl, r3
   10cb4:	ldr	r3, [r4, #4]
   10cb6:	cmp	r3, #0
   10cb8:	ble.w	10dde <__ssvfiscanf_r+0x1a2>
   10cbc:	ldr	r2, [r4, #0]
   10cbe:	ldrb	r3, [r2, #0]
   10cc0:	cmp	r3, sl
   10cc2:	bne.w	10f22 <__ssvfiscanf_r+0x2e6>
   10cc6:	ldr	r3, [r4, #4]
   10cc8:	subs	r3, #1
   10cca:	str	r3, [r4, #4]
   10ccc:	ldr	r3, [sp, #276]	; 0x114
   10cce:	adds	r2, #1
   10cd0:	adds	r3, #1
   10cd2:	str	r2, [r4, #0]
   10cd4:	str	r3, [sp, #276]	; 0x114
   10cd6:	b.n	10c8a <__ssvfiscanf_r+0x4e>
   10cd8:	str	r1, [sp, #260]	; 0x104
   10cda:	str	r1, [sp, #268]	; 0x10c
   10cdc:	ldrb	r3, [r2, #1]
   10cde:	cmp	r3, #42	; 0x2a
   10ce0:	ittt	eq
   10ce2:	moveq	r3, #16
   10ce4:	addeq	r5, r2, #2
   10ce6:	streq	r3, [sp, #260]	; 0x104
   10ce8:	movs	r2, #10
   10cea:	mov	sl, r5
   10cec:	ldrb.w	r1, [sl], #1
   10cf0:	sub.w	r3, r1, #48	; 0x30
   10cf4:	cmp	r3, #9
   10cf6:	bls.n	10d32 <__ssvfiscanf_r+0xf6>
   10cf8:	ldr	r0, [pc, #504]	; (10ef4 <__ssvfiscanf_r+0x2b8>)
   10cfa:	movs	r2, #3
   10cfc:	bl	eaa0 <memchr>
   10d00:	cbz	r0, 10d12 <__ssvfiscanf_r+0xd6>
   10d02:	ldr	r2, [sp, #260]	; 0x104
   10d04:	sub.w	r0, r0, r9
   10d08:	movs	r3, #1
   10d0a:	lsls	r3, r0
   10d0c:	orrs	r3, r2
   10d0e:	str	r3, [sp, #260]	; 0x104
   10d10:	mov	r5, sl
   10d12:	ldrb.w	r3, [r5], #1
   10d16:	cmp	r3, #120	; 0x78
   10d18:	bhi.n	10d28 <__ssvfiscanf_r+0xec>
   10d1a:	cmp	r3, #87	; 0x57
   10d1c:	bhi.n	10d40 <__ssvfiscanf_r+0x104>
   10d1e:	cmp	r3, #37	; 0x25
   10d20:	beq.n	10cb2 <__ssvfiscanf_r+0x76>
   10d22:	bhi.n	10dd4 <__ssvfiscanf_r+0x198>
   10d24:	cmp	r3, #0
   10d26:	beq.n	10df4 <__ssvfiscanf_r+0x1b8>
   10d28:	movs	r3, #3
   10d2a:	str	r3, [sp, #284]	; 0x11c
   10d2c:	movs	r3, #10
   10d2e:	str	r3, [sp, #264]	; 0x108
   10d30:	b.n	10e20 <__ssvfiscanf_r+0x1e4>
   10d32:	ldr	r3, [sp, #268]	; 0x10c
   10d34:	mla	r1, r2, r3, r1
   10d38:	subs	r1, #48	; 0x30
   10d3a:	str	r1, [sp, #268]	; 0x10c
   10d3c:	mov	r5, sl
   10d3e:	b.n	10cea <__ssvfiscanf_r+0xae>
   10d40:	sub.w	r2, r3, #88	; 0x58
   10d44:	cmp	r2, #32
   10d46:	bhi.n	10d28 <__ssvfiscanf_r+0xec>
   10d48:	add	r1, pc, #4	; (adr r1, 10d50 <__ssvfiscanf_r+0x114>)
   10d4a:	ldr.w	pc, [r1, r2, lsl #2]
   10d4e:	nop
   10d50:	.word	0x00010e03
   10d54:	.word	0x00010d29
   10d58:	.word	0x00010d29
   10d5c:	.word	0x00010e61
   10d60:	.word	0x00010d29
   10d64:	.word	0x00010d29
   10d68:	.word	0x00010d29
   10d6c:	.word	0x00010d29
   10d70:	.word	0x00010d29
   10d74:	.word	0x00010d29
   10d78:	.word	0x00010d29
   10d7c:	.word	0x00010e77
   10d80:	.word	0x00010e5d
   10d84:	.word	0x00010ddb
   10d88:	.word	0x00010ddb
   10d8c:	.word	0x00010ddb
   10d90:	.word	0x00010d29
   10d94:	.word	0x00010e19
   10d98:	.word	0x00010d29
   10d9c:	.word	0x00010d29
   10da0:	.word	0x00010d29
   10da4:	.word	0x00010d29
   10da8:	.word	0x00010e87
   10dac:	.word	0x00010e55
   10db0:	.word	0x00010dfb
   10db4:	.word	0x00010d29
   10db8:	.word	0x00010d29
   10dbc:	.word	0x00010e83
   10dc0:	.word	0x00010d29
   10dc4:	.word	0x00010e5d
   10dc8:	.word	0x00010d29
   10dcc:	.word	0x00010d29
   10dd0:	.word	0x00010e03
   10dd4:	subs	r3, #69	; 0x45
   10dd6:	cmp	r3, #2
   10dd8:	bhi.n	10d28 <__ssvfiscanf_r+0xec>
   10dda:	movs	r3, #5
   10ddc:	b.n	10e1e <__ssvfiscanf_r+0x1e2>
   10dde:	ldr	r3, [sp, #644]	; 0x284
   10de0:	mov	r1, r4
   10de2:	mov	r0, r6
   10de4:	blx	r3
   10de6:	cmp	r0, #0
   10de8:	beq.w	10cbc <__ssvfiscanf_r+0x80>
   10dec:	ldr	r0, [sp, #272]	; 0x110
   10dee:	cmp	r0, #0
   10df0:	bne.w	10f0e <__ssvfiscanf_r+0x2d2>
   10df4:	mov.w	r0, #4294967295
   10df8:	b.n	10f1a <__ssvfiscanf_r+0x2de>
   10dfa:	ldr	r2, [sp, #260]	; 0x104
   10dfc:	orr.w	r2, r2, #32
   10e00:	str	r2, [sp, #260]	; 0x104
   10e02:	ldr	r2, [sp, #260]	; 0x104
   10e04:	orr.w	r2, r2, #512	; 0x200
   10e08:	str	r2, [sp, #260]	; 0x104
   10e0a:	movs	r2, #16
   10e0c:	cmp	r3, #111	; 0x6f
   10e0e:	str	r2, [sp, #264]	; 0x108
   10e10:	ite	cc
   10e12:	movcc	r3, #3
   10e14:	movcs	r3, #4
   10e16:	b.n	10e1e <__ssvfiscanf_r+0x1e2>
   10e18:	movs	r3, #0
   10e1a:	str	r3, [sp, #264]	; 0x108
   10e1c:	movs	r3, #3
   10e1e:	str	r3, [sp, #284]	; 0x11c
   10e20:	ldr	r3, [r4, #4]
   10e22:	cmp	r3, #0
   10e24:	ble.n	10ea2 <__ssvfiscanf_r+0x266>
   10e26:	ldr	r3, [sp, #260]	; 0x104
   10e28:	lsls	r1, r3, #25
   10e2a:	bmi.n	10e36 <__ssvfiscanf_r+0x1fa>
   10e2c:	ldr	r3, [r4, #0]
   10e2e:	ldrb	r2, [r3, #0]
   10e30:	ldrb	r2, [r7, r2]
   10e32:	lsls	r2, r2, #28
   10e34:	bmi.n	10eb0 <__ssvfiscanf_r+0x274>
   10e36:	ldr	r3, [sp, #284]	; 0x11c
   10e38:	cmp	r3, #2
   10e3a:	bgt.n	10ed4 <__ssvfiscanf_r+0x298>
   10e3c:	mov	r3, sp
   10e3e:	mov	r2, r4
   10e40:	add	r1, sp, #260	; 0x104
   10e42:	mov	r0, r6
   10e44:	bl	10f2c <_scanf_chars>
   10e48:	cmp	r0, #1
   10e4a:	beq.n	10f22 <__ssvfiscanf_r+0x2e6>
   10e4c:	cmp	r0, #2
   10e4e:	bne.w	10c8a <__ssvfiscanf_r+0x4e>
   10e52:	b.n	10dec <__ssvfiscanf_r+0x1b0>
   10e54:	movs	r3, #8
   10e56:	str	r3, [sp, #264]	; 0x108
   10e58:	movs	r3, #4
   10e5a:	b.n	10e1e <__ssvfiscanf_r+0x1e2>
   10e5c:	movs	r2, #10
   10e5e:	b.n	10e0c <__ssvfiscanf_r+0x1d0>
   10e60:	mov	r1, r5
   10e62:	mov	r0, r8
   10e64:	bl	11324 <__sccl>
   10e68:	ldr	r3, [sp, #260]	; 0x104
   10e6a:	orr.w	r3, r3, #64	; 0x40
   10e6e:	str	r3, [sp, #260]	; 0x104
   10e70:	mov	r5, r0
   10e72:	movs	r3, #1
   10e74:	b.n	10e1e <__ssvfiscanf_r+0x1e2>
   10e76:	ldr	r3, [sp, #260]	; 0x104
   10e78:	orr.w	r3, r3, #64	; 0x40
   10e7c:	str	r3, [sp, #260]	; 0x104
   10e7e:	movs	r3, #0
   10e80:	b.n	10e1e <__ssvfiscanf_r+0x1e2>
   10e82:	movs	r3, #2
   10e84:	b.n	10e1e <__ssvfiscanf_r+0x1e2>
   10e86:	ldr	r0, [sp, #260]	; 0x104
   10e88:	lsls	r3, r0, #27
   10e8a:	bmi.w	10c8a <__ssvfiscanf_r+0x4e>
   10e8e:	ldr	r3, [sp, #0]
   10e90:	ldr	r2, [sp, #276]	; 0x114
   10e92:	adds	r1, r3, #4
   10e94:	str	r1, [sp, #0]
   10e96:	ldr	r3, [r3, #0]
   10e98:	lsls	r0, r0, #31
   10e9a:	ite	mi
   10e9c:	strhmi	r2, [r3, #0]
   10e9e:	strpl	r2, [r3, #0]
   10ea0:	b.n	10c8a <__ssvfiscanf_r+0x4e>
   10ea2:	ldr	r3, [sp, #644]	; 0x284
   10ea4:	mov	r1, r4
   10ea6:	mov	r0, r6
   10ea8:	blx	r3
   10eaa:	cmp	r0, #0
   10eac:	beq.n	10e26 <__ssvfiscanf_r+0x1ea>
   10eae:	b.n	10dec <__ssvfiscanf_r+0x1b0>
   10eb0:	ldr	r2, [sp, #276]	; 0x114
   10eb2:	adds	r2, #1
   10eb4:	str	r2, [sp, #276]	; 0x114
   10eb6:	ldr	r2, [r4, #4]
   10eb8:	subs	r2, #1
   10eba:	cmp	r2, #0
   10ebc:	str	r2, [r4, #4]
   10ebe:	ble.n	10ec6 <__ssvfiscanf_r+0x28a>
   10ec0:	adds	r3, #1
   10ec2:	str	r3, [r4, #0]
   10ec4:	b.n	10e2c <__ssvfiscanf_r+0x1f0>
   10ec6:	ldr	r3, [sp, #644]	; 0x284
   10ec8:	mov	r1, r4
   10eca:	mov	r0, r6
   10ecc:	blx	r3
   10ece:	cmp	r0, #0
   10ed0:	beq.n	10e2c <__ssvfiscanf_r+0x1f0>
   10ed2:	b.n	10dec <__ssvfiscanf_r+0x1b0>
   10ed4:	cmp	r3, #4
   10ed6:	bgt.n	10ef8 <__ssvfiscanf_r+0x2bc>
   10ed8:	mov	r3, sp
   10eda:	mov	r2, r4
   10edc:	add	r1, sp, #260	; 0x104
   10ede:	mov	r0, r6
   10ee0:	bl	10fe0 <_scanf_i>
   10ee4:	b.n	10e48 <__ssvfiscanf_r+0x20c>
   10ee6:	nop
   10ee8:	.word	0x00010b89
   10eec:	.word	0x00010c03
   10ef0:	.word	0x20001137
   10ef4:	.word	0x20001312
   10ef8:	ldr	r3, [pc, #44]	; (10f28 <__ssvfiscanf_r+0x2ec>)
   10efa:	cmp	r3, #0
   10efc:	beq.w	10c8a <__ssvfiscanf_r+0x4e>
   10f00:	mov	r3, sp
   10f02:	mov	r2, r4
   10f04:	add	r1, sp, #260	; 0x104
   10f06:	mov	r0, r6
   10f08:	bl	e0d4 <_scanf_float>
   10f0c:	b.n	10e48 <__ssvfiscanf_r+0x20c>
   10f0e:	ldrh	r3, [r4, #12]
   10f10:	tst.w	r3, #64	; 0x40
   10f14:	it	ne
   10f16:	movne.w	r0, #4294967295
   10f1a:	add.w	sp, sp, #648	; 0x288
   10f1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f22:	ldr	r0, [sp, #272]	; 0x110
   10f24:	b.n	10f1a <__ssvfiscanf_r+0x2de>
   10f26:	nop
   10f28:	.word	0x0000e0d5

00010f2c <_scanf_chars>:
   10f2c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10f30:	mov	r5, r2
   10f32:	ldr	r2, [r1, #8]
   10f34:	mov	r8, r0
   10f36:	mov	r4, r1
   10f38:	cbnz	r2, 10f48 <_scanf_chars+0x1c>
   10f3a:	ldr	r2, [r1, #24]
   10f3c:	cmp	r2, #0
   10f3e:	ite	eq
   10f40:	moveq	r2, #1
   10f42:	movne.w	r2, #4294967295
   10f46:	str	r2, [r1, #8]
   10f48:	ldr	r2, [r4, #0]
   10f4a:	ldr.w	r9, [pc, #144]	; 10fdc <_scanf_chars+0xb0>
   10f4e:	lsls	r1, r2, #27
   10f50:	itttt	pl
   10f52:	ldrpl	r2, [r3, #0]
   10f54:	addpl	r1, r2, #4
   10f56:	strpl	r1, [r3, #0]
   10f58:	ldrpl	r6, [r2, #0]
   10f5a:	movs	r7, #0
   10f5c:	ldr	r0, [r4, #24]
   10f5e:	cbz	r0, 10f84 <_scanf_chars+0x58>
   10f60:	cmp	r0, #1
   10f62:	bne.n	10f74 <_scanf_chars+0x48>
   10f64:	ldr	r2, [r5, #0]
   10f66:	ldrb	r1, [r2, #0]
   10f68:	ldr	r2, [r4, #20]
   10f6a:	ldrb	r2, [r2, r1]
   10f6c:	cbnz	r2, 10f84 <_scanf_chars+0x58>
   10f6e:	cmp	r7, #0
   10f70:	beq.n	10fd6 <_scanf_chars+0xaa>
   10f72:	b.n	10fba <_scanf_chars+0x8e>
   10f74:	cmp	r0, #2
   10f76:	bne.n	10fba <_scanf_chars+0x8e>
   10f78:	ldr	r3, [r5, #0]
   10f7a:	ldrb	r3, [r3, #0]
   10f7c:	ldrb.w	r3, [r9, r3]
   10f80:	lsls	r3, r3, #28
   10f82:	bmi.n	10fba <_scanf_chars+0x8e>
   10f84:	ldr	r3, [r4, #0]
   10f86:	lsls	r2, r3, #27
   10f88:	ittt	pl
   10f8a:	ldrpl	r3, [r5, #0]
   10f8c:	ldrbpl	r3, [r3, #0]
   10f8e:	strbpl.w	r3, [r6], #1
   10f92:	ldr	r2, [r5, #0]
   10f94:	ldr	r3, [r5, #4]
   10f96:	adds	r2, #1
   10f98:	str	r2, [r5, #0]
   10f9a:	ldr	r2, [r4, #8]
   10f9c:	subs	r3, #1
   10f9e:	subs	r2, #1
   10fa0:	str	r3, [r5, #4]
   10fa2:	adds	r7, #1
   10fa4:	str	r2, [r4, #8]
   10fa6:	cbz	r2, 10fba <_scanf_chars+0x8e>
   10fa8:	cmp	r3, #0
   10faa:	bgt.n	10f5c <_scanf_chars+0x30>
   10fac:	ldr.w	r3, [r4, #384]	; 0x180
   10fb0:	mov	r1, r5
   10fb2:	mov	r0, r8
   10fb4:	blx	r3
   10fb6:	cmp	r0, #0
   10fb8:	beq.n	10f5c <_scanf_chars+0x30>
   10fba:	ldr	r3, [r4, #0]
   10fbc:	ands.w	r3, r3, #16
   10fc0:	bne.n	10fce <_scanf_chars+0xa2>
   10fc2:	ldr	r2, [r4, #12]
   10fc4:	adds	r2, #1
   10fc6:	str	r2, [r4, #12]
   10fc8:	ldr	r2, [r4, #24]
   10fca:	cbz	r2, 10fce <_scanf_chars+0xa2>
   10fcc:	strb	r3, [r6, #0]
   10fce:	ldr	r3, [r4, #16]
   10fd0:	add	r3, r7
   10fd2:	str	r3, [r4, #16]
   10fd4:	movs	r0, #0
   10fd6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10fda:	nop
   10fdc:	.word	0x20001137

00010fe0 <_scanf_i>:
   10fe0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fe4:	mov	r8, r3
   10fe6:	ldr	r3, [pc, #464]	; (111b8 <_scanf_i+0x1d8>)
   10fe8:	mov	r4, r1
   10fea:	mov	sl, r0
   10fec:	mov	r6, r2
   10fee:	ldmia.w	r3, {r0, r1, r2}
   10ff2:	sub	sp, #28
   10ff4:	add	r3, sp, #12
   10ff6:	stmia.w	r3, {r0, r1, r2}
   10ffa:	ldr	r3, [pc, #448]	; (111bc <_scanf_i+0x1dc>)
   10ffc:	ldr	r1, [r4, #24]
   10ffe:	ldr	r2, [pc, #448]	; (111c0 <_scanf_i+0x1e0>)
   11000:	cmp	r1, #3
   11002:	it	ne
   11004:	movne	r2, r3
   11006:	ldr	r3, [r4, #8]
   11008:	str	r2, [sp, #4]
   1100a:	subs	r2, r3, #1
   1100c:	cmp.w	r2, #348	; 0x15c
   11010:	it	hi
   11012:	mvnhi.w	r5, #348	; 0x15c
   11016:	mov	r7, r4
   11018:	ittt	hi
   1101a:	addhi.w	r9, r3, r5
   1101e:	movwhi	r3, #349	; 0x15d
   11022:	strhi	r3, [r4, #8]
   11024:	ldr.w	r3, [r7], #28
   11028:	orr.w	r3, r3, #3328	; 0xd00
   1102c:	it	ls
   1102e:	movls.w	r9, #0
   11032:	str	r3, [r4, #0]
   11034:	mov	r5, r7
   11036:	mov.w	fp, #0
   1103a:	ldr	r1, [r6, #0]
   1103c:	add	r3, sp, #12
   1103e:	ldrb	r1, [r1, #0]
   11040:	ldr.w	r0, [r3, fp, lsl #2]
   11044:	movs	r2, #2
   11046:	bl	eaa0 <memchr>
   1104a:	cbz	r0, 11098 <_scanf_i+0xb8>
   1104c:	cmp.w	fp, #1
   11050:	bne.n	11106 <_scanf_i+0x126>
   11052:	ldr	r2, [r4, #4]
   11054:	cbnz	r2, 11062 <_scanf_i+0x82>
   11056:	ldr	r2, [r4, #0]
   11058:	movs	r3, #8
   1105a:	orr.w	r2, r2, #512	; 0x200
   1105e:	str	r3, [r4, #4]
   11060:	str	r2, [r4, #0]
   11062:	ldr	r2, [r4, #0]
   11064:	bic.w	r2, r2, #1280	; 0x500
   11068:	str	r2, [r4, #0]
   1106a:	ldr	r2, [r4, #8]
   1106c:	subs	r1, r2, #1
   1106e:	str	r1, [r4, #8]
   11070:	cbz	r2, 11098 <_scanf_i+0xb8>
   11072:	ldr	r2, [r6, #0]
   11074:	adds	r1, r2, #1
   11076:	str	r1, [r6, #0]
   11078:	ldrb	r2, [r2, #0]
   1107a:	strb.w	r2, [r5], #1
   1107e:	ldr	r2, [r6, #4]
   11080:	subs	r2, #1
   11082:	cmp	r2, #0
   11084:	str	r2, [r6, #4]
   11086:	bgt.n	11098 <_scanf_i+0xb8>
   11088:	ldr.w	r2, [r4, #384]	; 0x180
   1108c:	mov	r1, r6
   1108e:	mov	r0, sl
   11090:	blx	r2
   11092:	cmp	r0, #0
   11094:	bne.w	111a2 <_scanf_i+0x1c2>
   11098:	add.w	fp, fp, #1
   1109c:	cmp.w	fp, #3
   110a0:	bne.n	1103a <_scanf_i+0x5a>
   110a2:	ldr	r3, [r4, #4]
   110a4:	cbnz	r3, 110aa <_scanf_i+0xca>
   110a6:	movs	r3, #10
   110a8:	str	r3, [r4, #4]
   110aa:	ldr	r3, [r4, #4]
   110ac:	ldr	r1, [pc, #276]	; (111c4 <_scanf_i+0x1e4>)
   110ae:	ldr	r0, [r4, #20]
   110b0:	subs	r1, r1, r3
   110b2:	bl	11324 <__sccl>
   110b6:	mov.w	fp, #0
   110ba:	ldr	r3, [r4, #8]
   110bc:	ldr	r2, [r4, #0]
   110be:	cmp	r3, #0
   110c0:	beq.n	1113e <_scanf_i+0x15e>
   110c2:	ldr	r1, [r6, #0]
   110c4:	ldr	r0, [r4, #20]
   110c6:	ldrb.w	ip, [r1]
   110ca:	ldrb.w	r0, [r0, ip]
   110ce:	cmp	r0, #0
   110d0:	beq.n	1113e <_scanf_i+0x15e>
   110d2:	cmp.w	ip, #48	; 0x30
   110d6:	bne.n	11122 <_scanf_i+0x142>
   110d8:	lsls	r0, r2, #20
   110da:	bpl.n	11122 <_scanf_i+0x142>
   110dc:	add.w	fp, fp, #1
   110e0:	cmp.w	r9, #0
   110e4:	beq.n	110ee <_scanf_i+0x10e>
   110e6:	adds	r3, #1
   110e8:	add.w	r9, r9, #4294967295
   110ec:	str	r3, [r4, #8]
   110ee:	ldr	r3, [r6, #4]
   110f0:	subs	r3, #1
   110f2:	cmp	r3, #0
   110f4:	str	r3, [r6, #4]
   110f6:	ble.n	11130 <_scanf_i+0x150>
   110f8:	ldr	r3, [r6, #0]
   110fa:	adds	r3, #1
   110fc:	str	r3, [r6, #0]
   110fe:	ldr	r3, [r4, #8]
   11100:	subs	r3, #1
   11102:	str	r3, [r4, #8]
   11104:	b.n	110ba <_scanf_i+0xda>
   11106:	cmp.w	fp, #2
   1110a:	bne.n	1106a <_scanf_i+0x8a>
   1110c:	ldr	r2, [r4, #0]
   1110e:	and.w	r1, r2, #1536	; 0x600
   11112:	cmp.w	r1, #512	; 0x200
   11116:	bne.n	11098 <_scanf_i+0xb8>
   11118:	movs	r3, #16
   1111a:	str	r3, [r4, #4]
   1111c:	orr.w	r2, r2, #256	; 0x100
   11120:	b.n	11068 <_scanf_i+0x88>
   11122:	bic.w	r2, r2, #2304	; 0x900
   11126:	str	r2, [r4, #0]
   11128:	ldrb	r3, [r1, #0]
   1112a:	strb.w	r3, [r5], #1
   1112e:	b.n	110ee <_scanf_i+0x10e>
   11130:	ldr.w	r3, [r4, #384]	; 0x180
   11134:	mov	r1, r6
   11136:	mov	r0, sl
   11138:	blx	r3
   1113a:	cmp	r0, #0
   1113c:	beq.n	110fe <_scanf_i+0x11e>
   1113e:	ldr	r3, [r4, #0]
   11140:	lsls	r1, r3, #23
   11142:	bpl.n	11160 <_scanf_i+0x180>
   11144:	cmp	r5, r7
   11146:	bls.n	1115c <_scanf_i+0x17c>
   11148:	ldrb.w	r1, [r5, #-1]
   1114c:	ldr.w	r3, [r4, #380]	; 0x17c
   11150:	mov	r2, r6
   11152:	mov	r0, sl
   11154:	blx	r3
   11156:	add.w	r9, r5, #4294967295
   1115a:	mov	r5, r9
   1115c:	cmp	r5, r7
   1115e:	beq.n	111b2 <_scanf_i+0x1d2>
   11160:	ldr	r2, [r4, #0]
   11162:	ands.w	r2, r2, #16
   11166:	bne.n	11190 <_scanf_i+0x1b0>
   11168:	strb	r2, [r5, #0]
   1116a:	ldr	r3, [r4, #4]
   1116c:	ldr	r6, [sp, #4]
   1116e:	mov	r1, r7
   11170:	mov	r0, sl
   11172:	blx	r6
   11174:	ldr.w	r3, [r8]
   11178:	ldr	r1, [r4, #0]
   1117a:	adds	r2, r3, #4
   1117c:	str.w	r2, [r8]
   11180:	tst.w	r1, #32
   11184:	ldr	r3, [r3, #0]
   11186:	beq.n	111a8 <_scanf_i+0x1c8>
   11188:	str	r0, [r3, #0]
   1118a:	ldr	r3, [r4, #12]
   1118c:	adds	r3, #1
   1118e:	str	r3, [r4, #12]
   11190:	ldr	r3, [r4, #16]
   11192:	subs	r5, r5, r7
   11194:	add	r5, fp
   11196:	add	r3, r5
   11198:	str	r3, [r4, #16]
   1119a:	movs	r0, #0
   1119c:	add	sp, #28
   1119e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111a2:	mov.w	fp, #0
   111a6:	b.n	1113e <_scanf_i+0x15e>
   111a8:	lsls	r2, r1, #31
   111aa:	ite	mi
   111ac:	strhmi	r0, [r3, #0]
   111ae:	strpl	r0, [r3, #0]
   111b0:	b.n	1118a <_scanf_i+0x1aa>
   111b2:	movs	r0, #1
   111b4:	b.n	1119c <_scanf_i+0x1bc>
   111b6:	nop
   111b8:	.word	0x20000418
   111bc:	.word	0x00011559
   111c0:	.word	0x0000d82d
   111c4:	.word	0x20001304

000111c8 <__sflush_r>:
   111c8:	ldrh	r2, [r1, #12]
   111ca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111ce:	mov	r5, r0
   111d0:	lsls	r0, r2, #28
   111d2:	mov	r4, r1
   111d4:	bmi.n	11288 <__sflush_r+0xc0>
   111d6:	ldr	r3, [r1, #4]
   111d8:	cmp	r3, #0
   111da:	bgt.n	111e8 <__sflush_r+0x20>
   111dc:	ldr	r3, [r1, #64]	; 0x40
   111de:	cmp	r3, #0
   111e0:	bgt.n	111e8 <__sflush_r+0x20>
   111e2:	movs	r0, #0
   111e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111e8:	ldr	r6, [r4, #44]	; 0x2c
   111ea:	cmp	r6, #0
   111ec:	beq.n	111e2 <__sflush_r+0x1a>
   111ee:	movs	r3, #0
   111f0:	ands.w	r2, r2, #4096	; 0x1000
   111f4:	ldr	r7, [r5, #0]
   111f6:	ldr	r1, [r4, #32]
   111f8:	str	r3, [r5, #0]
   111fa:	beq.n	11262 <__sflush_r+0x9a>
   111fc:	ldr	r0, [r4, #84]	; 0x54
   111fe:	ldrh	r3, [r4, #12]
   11200:	lsls	r2, r3, #29
   11202:	bpl.n	11210 <__sflush_r+0x48>
   11204:	ldr	r3, [r4, #4]
   11206:	subs	r0, r0, r3
   11208:	ldr	r3, [r4, #52]	; 0x34
   1120a:	cbz	r3, 11210 <__sflush_r+0x48>
   1120c:	ldr	r3, [r4, #64]	; 0x40
   1120e:	subs	r0, r0, r3
   11210:	movs	r3, #0
   11212:	mov	r2, r0
   11214:	ldr	r6, [r4, #44]	; 0x2c
   11216:	ldr	r1, [r4, #32]
   11218:	mov	r0, r5
   1121a:	blx	r6
   1121c:	adds	r3, r0, #1
   1121e:	ldrh	r3, [r4, #12]
   11220:	bne.n	11230 <__sflush_r+0x68>
   11222:	ldr	r1, [r5, #0]
   11224:	cmp	r1, #29
   11226:	bhi.n	11280 <__sflush_r+0xb8>
   11228:	ldr	r2, [pc, #164]	; (112d0 <__sflush_r+0x108>)
   1122a:	asrs	r2, r1
   1122c:	lsls	r6, r2, #31
   1122e:	bmi.n	11280 <__sflush_r+0xb8>
   11230:	movs	r2, #0
   11232:	str	r2, [r4, #4]
   11234:	lsls	r1, r3, #19
   11236:	ldr	r2, [r4, #16]
   11238:	str	r2, [r4, #0]
   1123a:	bpl.n	11246 <__sflush_r+0x7e>
   1123c:	adds	r2, r0, #1
   1123e:	bne.n	11244 <__sflush_r+0x7c>
   11240:	ldr	r3, [r5, #0]
   11242:	cbnz	r3, 11246 <__sflush_r+0x7e>
   11244:	str	r0, [r4, #84]	; 0x54
   11246:	ldr	r1, [r4, #52]	; 0x34
   11248:	str	r7, [r5, #0]
   1124a:	cmp	r1, #0
   1124c:	beq.n	111e2 <__sflush_r+0x1a>
   1124e:	add.w	r3, r4, #68	; 0x44
   11252:	cmp	r1, r3
   11254:	beq.n	1125c <__sflush_r+0x94>
   11256:	mov	r0, r5
   11258:	bl	f758 <_free_r>
   1125c:	movs	r0, #0
   1125e:	str	r0, [r4, #52]	; 0x34
   11260:	b.n	111e4 <__sflush_r+0x1c>
   11262:	movs	r3, #1
   11264:	mov	r0, r5
   11266:	blx	r6
   11268:	adds	r1, r0, #1
   1126a:	bne.n	111fe <__sflush_r+0x36>
   1126c:	ldr	r3, [r5, #0]
   1126e:	cmp	r3, #0
   11270:	beq.n	111fe <__sflush_r+0x36>
   11272:	cmp	r3, #29
   11274:	beq.n	1127a <__sflush_r+0xb2>
   11276:	cmp	r3, #22
   11278:	bne.n	1127e <__sflush_r+0xb6>
   1127a:	str	r7, [r5, #0]
   1127c:	b.n	111e2 <__sflush_r+0x1a>
   1127e:	ldrh	r3, [r4, #12]
   11280:	orr.w	r3, r3, #64	; 0x40
   11284:	strh	r3, [r4, #12]
   11286:	b.n	111e4 <__sflush_r+0x1c>
   11288:	ldr	r7, [r1, #16]
   1128a:	cmp	r7, #0
   1128c:	beq.n	111e2 <__sflush_r+0x1a>
   1128e:	lsls	r3, r2, #30
   11290:	ldr	r6, [r1, #0]
   11292:	it	eq
   11294:	ldreq	r3, [r1, #20]
   11296:	str	r7, [r1, #0]
   11298:	it	ne
   1129a:	movne	r3, #0
   1129c:	sub.w	r8, r6, r7
   112a0:	str	r3, [r1, #8]
   112a2:	cmp.w	r8, #0
   112a6:	ble.n	111e2 <__sflush_r+0x1a>
   112a8:	ldr	r1, [r4, #32]
   112aa:	ldr	r6, [r4, #40]	; 0x28
   112ac:	mov	r3, r8
   112ae:	mov	r2, r7
   112b0:	mov	r0, r5
   112b2:	blx	r6
   112b4:	cmp	r0, #0
   112b6:	bgt.n	112c6 <__sflush_r+0xfe>
   112b8:	ldrh	r3, [r4, #12]
   112ba:	orr.w	r3, r3, #64	; 0x40
   112be:	strh	r3, [r4, #12]
   112c0:	mov.w	r0, #4294967295
   112c4:	b.n	111e4 <__sflush_r+0x1c>
   112c6:	add	r7, r0
   112c8:	sub.w	r8, r8, r0
   112cc:	b.n	112a2 <__sflush_r+0xda>
   112ce:	nop
   112d0:	.word	0xdfbffffe

000112d4 <_fflush_r>:
   112d4:	push	{r3, r4, r5, lr}
   112d6:	ldr	r3, [r1, #16]
   112d8:	mov	r5, r0
   112da:	mov	r4, r1
   112dc:	cbnz	r3, 112e4 <_fflush_r+0x10>
   112de:	movs	r5, #0
   112e0:	mov	r0, r5
   112e2:	pop	{r3, r4, r5, pc}
   112e4:	cbz	r0, 112ee <_fflush_r+0x1a>
   112e6:	ldr	r3, [r0, #32]
   112e8:	cbnz	r3, 112ee <_fflush_r+0x1a>
   112ea:	bl	e5d0 <__sinit>
   112ee:	ldrsh.w	r3, [r4, #12]
   112f2:	cmp	r3, #0
   112f4:	beq.n	112de <_fflush_r+0xa>
   112f6:	ldr	r2, [r4, #100]	; 0x64
   112f8:	lsls	r0, r2, #31
   112fa:	bmi.n	11306 <_fflush_r+0x32>
   112fc:	lsls	r1, r3, #22
   112fe:	bmi.n	11306 <_fflush_r+0x32>
   11300:	ldr	r0, [r4, #88]	; 0x58
   11302:	bl	ea80 <__retarget_lock_acquire_recursive>
   11306:	mov	r0, r5
   11308:	mov	r1, r4
   1130a:	bl	111c8 <__sflush_r>
   1130e:	ldr	r3, [r4, #100]	; 0x64
   11310:	lsls	r2, r3, #31
   11312:	mov	r5, r0
   11314:	bmi.n	112e0 <_fflush_r+0xc>
   11316:	ldrh	r3, [r4, #12]
   11318:	lsls	r3, r3, #22
   1131a:	bmi.n	112e0 <_fflush_r+0xc>
   1131c:	ldr	r0, [r4, #88]	; 0x58
   1131e:	bl	ea82 <__retarget_lock_release_recursive>
   11322:	b.n	112e0 <_fflush_r+0xc>

00011324 <__sccl>:
   11324:	push	{r4, r5, r6, lr}
   11326:	ldrb	r3, [r1, #0]
   11328:	mov	r4, r0
   1132a:	cmp	r3, #94	; 0x5e
   1132c:	itete	eq
   1132e:	ldrbeq	r3, [r1, #1]
   11330:	addne	r2, r1, #1
   11332:	addeq	r2, r1, #2
   11334:	movne	r1, #0
   11336:	it	eq
   11338:	moveq	r1, #1
   1133a:	subs	r0, #1
   1133c:	add.w	r5, r4, #255	; 0xff
   11340:	strb.w	r1, [r0, #1]!
   11344:	cmp	r0, r5
   11346:	bne.n	11340 <__sccl+0x1c>
   11348:	cbnz	r3, 1134e <__sccl+0x2a>
   1134a:	subs	r0, r2, #1
   1134c:	pop	{r4, r5, r6, pc}
   1134e:	eor.w	r1, r1, #1
   11352:	strb	r1, [r4, r3]
   11354:	mov	r0, r2
   11356:	mov	r2, r0
   11358:	ldrb.w	r5, [r2], #1
   1135c:	cmp	r5, #45	; 0x2d
   1135e:	beq.n	1136c <__sccl+0x48>
   11360:	cmp	r5, #93	; 0x5d
   11362:	beq.n	11392 <__sccl+0x6e>
   11364:	cmp	r5, #0
   11366:	beq.n	1134c <__sccl+0x28>
   11368:	mov	r3, r5
   1136a:	b.n	11352 <__sccl+0x2e>
   1136c:	ldrb	r6, [r0, #1]
   1136e:	cmp	r6, #93	; 0x5d
   11370:	beq.n	11368 <__sccl+0x44>
   11372:	cmp	r3, r6
   11374:	bgt.n	11368 <__sccl+0x44>
   11376:	adds	r0, #2
   11378:	mov	r2, r3
   1137a:	adds	r2, #1
   1137c:	cmp	r6, r2
   1137e:	strb	r1, [r4, r2]
   11380:	bgt.n	1137a <__sccl+0x56>
   11382:	subs	r2, r6, r3
   11384:	subs	r2, #1
   11386:	adds	r5, r3, #1
   11388:	cmp	r3, r6
   1138a:	it	ge
   1138c:	movge	r2, #0
   1138e:	adds	r3, r5, r2
   11390:	b.n	11356 <__sccl+0x32>
   11392:	mov	r0, r2
   11394:	b.n	1134c <__sccl+0x28>

00011396 <__submore>:
   11396:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1139a:	mov	r4, r1
   1139c:	ldr	r1, [r1, #52]	; 0x34
   1139e:	add.w	r3, r4, #68	; 0x44
   113a2:	cmp	r1, r3
   113a4:	bne.n	113e2 <__submore+0x4c>
   113a6:	mov.w	r1, #1024	; 0x400
   113aa:	bl	ca20 <_malloc_r>
   113ae:	cbnz	r0, 113b8 <__submore+0x22>
   113b0:	mov.w	r0, #4294967295
   113b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113b8:	mov.w	r3, #1024	; 0x400
   113bc:	str	r3, [r4, #56]	; 0x38
   113be:	ldrb.w	r3, [r4, #70]	; 0x46
   113c2:	str	r0, [r4, #52]	; 0x34
   113c4:	strb.w	r3, [r0, #1023]	; 0x3ff
   113c8:	ldrb.w	r3, [r4, #69]	; 0x45
   113cc:	strb.w	r3, [r0, #1022]	; 0x3fe
   113d0:	ldrb.w	r3, [r4, #68]	; 0x44
   113d4:	strb.w	r3, [r0, #1021]	; 0x3fd
   113d8:	addw	r0, r0, #1021	; 0x3fd
   113dc:	str	r0, [r4, #0]
   113de:	movs	r0, #0
   113e0:	b.n	113b4 <__submore+0x1e>
   113e2:	ldr	r6, [r4, #56]	; 0x38
   113e4:	lsls	r7, r6, #1
   113e6:	mov	r2, r7
   113e8:	bl	cb24 <_realloc_r>
   113ec:	mov	r5, r0
   113ee:	cmp	r0, #0
   113f0:	beq.n	113b0 <__submore+0x1a>
   113f2:	add.w	r8, r0, r6
   113f6:	mov	r1, r0
   113f8:	mov	r2, r6
   113fa:	mov	r0, r8
   113fc:	bl	9f88 <memcpy>
   11400:	strd	r5, r7, [r4, #52]	; 0x34
   11404:	str.w	r8, [r4]
   11408:	b.n	113de <__submore+0x48>
	...

0001140c <__assert_func>:
   1140c:	push	{r0, r1, r2, r3, r4, lr}
   1140e:	mov	r4, r2
   11410:	mov	r2, r3
   11412:	ldr	r3, [pc, #36]	; (11438 <__assert_func+0x2c>)
   11414:	ldr	r3, [r3, #0]
   11416:	mov	r5, r0
   11418:	ldr	r0, [r3, #12]
   1141a:	cbz	r4, 11430 <__assert_func+0x24>
   1141c:	ldr	r3, [pc, #28]	; (1143c <__assert_func+0x30>)
   1141e:	str	r1, [sp, #0]
   11420:	strd	r3, r4, [sp, #4]
   11424:	ldr	r1, [pc, #24]	; (11440 <__assert_func+0x34>)
   11426:	mov	r3, r5
   11428:	bl	1155c <fiprintf>
   1142c:	bl	b6c6 <abort>
   11430:	ldr	r3, [pc, #16]	; (11444 <__assert_func+0x38>)
   11432:	mov	r4, r3
   11434:	b.n	1141e <__assert_func+0x12>
   11436:	nop
   11438:	.word	0x20001e08
   1143c:	.word	0x20001099
   11440:	.word	0x200010a6
   11444:	.word	0x20000d00

00011448 <_calloc_r>:
   11448:	push	{r0, r1, r2, r4, r5, lr}
   1144a:	umull	r2, r4, r1, r2
   1144e:	cbnz	r4, 11464 <_calloc_r+0x1c>
   11450:	mov	r1, r2
   11452:	str	r2, [sp, #4]
   11454:	bl	ca20 <_malloc_r>
   11458:	ldr	r2, [sp, #4]
   1145a:	mov	r5, r0
   1145c:	cbnz	r0, 1146c <_calloc_r+0x24>
   1145e:	mov	r0, r5
   11460:	add	sp, #12
   11462:	pop	{r4, r5, pc}
   11464:	movs	r2, #12
   11466:	str	r2, [r0, #0]
   11468:	movs	r5, #0
   1146a:	b.n	1145e <_calloc_r+0x16>
   1146c:	mov	r1, r4
   1146e:	bl	9f44 <memset>
   11472:	b.n	1145e <_calloc_r+0x16>

00011474 <_strtoul_l.constprop.0>:
   11474:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11478:	ldr	r7, [pc, #216]	; (11554 <_strtoul_l.constprop.0+0xe0>)
   1147a:	mov	lr, r0
   1147c:	mov	r5, r1
   1147e:	mov	r0, r5
   11480:	ldrb.w	r4, [r5], #1
   11484:	ldrb	r6, [r7, r4]
   11486:	ands.w	r6, r6, #8
   1148a:	bne.n	1147e <_strtoul_l.constprop.0+0xa>
   1148c:	cmp	r4, #45	; 0x2d
   1148e:	bne.n	114f2 <_strtoul_l.constprop.0+0x7e>
   11490:	ldrb	r4, [r5, #0]
   11492:	movs	r6, #1
   11494:	adds	r5, r0, #2
   11496:	cmp	r3, #0
   11498:	beq.n	1154a <_strtoul_l.constprop.0+0xd6>
   1149a:	cmp	r3, #16
   1149c:	bne.n	114b2 <_strtoul_l.constprop.0+0x3e>
   1149e:	cmp	r4, #48	; 0x30
   114a0:	bne.n	114b2 <_strtoul_l.constprop.0+0x3e>
   114a2:	ldrb	r0, [r5, #0]
   114a4:	and.w	r0, r0, #223	; 0xdf
   114a8:	cmp	r0, #88	; 0x58
   114aa:	bne.n	11540 <_strtoul_l.constprop.0+0xcc>
   114ac:	ldrb	r4, [r5, #1]
   114ae:	movs	r3, #16
   114b0:	adds	r5, #2
   114b2:	mov.w	r8, #4294967295
   114b6:	movs	r7, #0
   114b8:	udiv	r8, r8, r3
   114bc:	mul.w	r9, r3, r8
   114c0:	mvn.w	r9, r9
   114c4:	mov	r0, r7
   114c6:	sub.w	ip, r4, #48	; 0x30
   114ca:	cmp.w	ip, #9
   114ce:	bhi.n	114fc <_strtoul_l.constprop.0+0x88>
   114d0:	mov	r4, ip
   114d2:	cmp	r3, r4
   114d4:	ble.n	1151e <_strtoul_l.constprop.0+0xaa>
   114d6:	cmp.w	r7, #4294967295
   114da:	beq.n	114ec <_strtoul_l.constprop.0+0x78>
   114dc:	cmp	r8, r0
   114de:	bcc.n	11518 <_strtoul_l.constprop.0+0xa4>
   114e0:	bne.n	114e6 <_strtoul_l.constprop.0+0x72>
   114e2:	cmp	r9, r4
   114e4:	blt.n	11518 <_strtoul_l.constprop.0+0xa4>
   114e6:	mla	r0, r0, r3, r4
   114ea:	movs	r7, #1
   114ec:	ldrb.w	r4, [r5], #1
   114f0:	b.n	114c6 <_strtoul_l.constprop.0+0x52>
   114f2:	cmp	r4, #43	; 0x2b
   114f4:	itt	eq
   114f6:	ldrbeq	r4, [r5, #0]
   114f8:	addeq	r5, r0, #2
   114fa:	b.n	11496 <_strtoul_l.constprop.0+0x22>
   114fc:	sub.w	ip, r4, #65	; 0x41
   11500:	cmp.w	ip, #25
   11504:	bhi.n	1150a <_strtoul_l.constprop.0+0x96>
   11506:	subs	r4, #55	; 0x37
   11508:	b.n	114d2 <_strtoul_l.constprop.0+0x5e>
   1150a:	sub.w	ip, r4, #97	; 0x61
   1150e:	cmp.w	ip, #25
   11512:	bhi.n	1151e <_strtoul_l.constprop.0+0xaa>
   11514:	subs	r4, #87	; 0x57
   11516:	b.n	114d2 <_strtoul_l.constprop.0+0x5e>
   11518:	mov.w	r7, #4294967295
   1151c:	b.n	114ec <_strtoul_l.constprop.0+0x78>
   1151e:	adds	r3, r7, #1
   11520:	bne.n	11530 <_strtoul_l.constprop.0+0xbc>
   11522:	movs	r3, #34	; 0x22
   11524:	str.w	r3, [lr]
   11528:	mov	r0, r7
   1152a:	cbnz	r2, 1153a <_strtoul_l.constprop.0+0xc6>
   1152c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11530:	cbz	r6, 11534 <_strtoul_l.constprop.0+0xc0>
   11532:	negs	r0, r0
   11534:	cmp	r2, #0
   11536:	beq.n	1152c <_strtoul_l.constprop.0+0xb8>
   11538:	cbz	r7, 1153c <_strtoul_l.constprop.0+0xc8>
   1153a:	subs	r1, r5, #1
   1153c:	str	r1, [r2, #0]
   1153e:	b.n	1152c <_strtoul_l.constprop.0+0xb8>
   11540:	movs	r4, #48	; 0x30
   11542:	cmp	r3, #0
   11544:	bne.n	114b2 <_strtoul_l.constprop.0+0x3e>
   11546:	movs	r3, #8
   11548:	b.n	114b2 <_strtoul_l.constprop.0+0x3e>
   1154a:	cmp	r4, #48	; 0x30
   1154c:	beq.n	114a2 <_strtoul_l.constprop.0+0x2e>
   1154e:	movs	r3, #10
   11550:	b.n	114b2 <_strtoul_l.constprop.0+0x3e>
   11552:	nop
   11554:	.word	0x20001137

00011558 <_strtoul_r>:
   11558:	b.w	11474 <_strtoul_l.constprop.0>

0001155c <fiprintf>:
   1155c:	push	{r1, r2, r3}
   1155e:	push	{r0, r1, lr}
   11560:	mov	r1, r0
   11562:	add	r3, sp, #12
   11564:	ldr	r0, [pc, #20]	; (1157c <fiprintf+0x20>)
   11566:	ldr.w	r2, [r3], #4
   1156a:	ldr	r0, [r0, #0]
   1156c:	str	r3, [sp, #4]
   1156e:	bl	115d4 <_vfiprintf_r>
   11572:	add	sp, #8
   11574:	ldr.w	lr, [sp], #4
   11578:	add	sp, #12
   1157a:	bx	lr
   1157c:	.word	0x20001e08

00011580 <__sfputc_r>:
   11580:	ldr	r3, [r2, #8]
   11582:	subs	r3, #1
   11584:	cmp	r3, #0
   11586:	push	{r4}
   11588:	str	r3, [r2, #8]
   1158a:	bge.n	1159e <__sfputc_r+0x1e>
   1158c:	ldr	r4, [r2, #24]
   1158e:	cmp	r3, r4
   11590:	blt.n	11596 <__sfputc_r+0x16>
   11592:	cmp	r1, #10
   11594:	bne.n	1159e <__sfputc_r+0x1e>
   11596:	ldr.w	r4, [sp], #4
   1159a:	b.w	11808 <__swbuf_r>
   1159e:	ldr	r3, [r2, #0]
   115a0:	adds	r0, r3, #1
   115a2:	str	r0, [r2, #0]
   115a4:	strb	r1, [r3, #0]
   115a6:	mov	r0, r1
   115a8:	ldr.w	r4, [sp], #4
   115ac:	bx	lr

000115ae <__sfputs_r>:
   115ae:	push	{r3, r4, r5, r6, r7, lr}
   115b0:	mov	r6, r0
   115b2:	mov	r7, r1
   115b4:	mov	r4, r2
   115b6:	adds	r5, r2, r3
   115b8:	cmp	r4, r5
   115ba:	bne.n	115c0 <__sfputs_r+0x12>
   115bc:	movs	r0, #0
   115be:	b.n	115d0 <__sfputs_r+0x22>
   115c0:	ldrb.w	r1, [r4], #1
   115c4:	mov	r2, r7
   115c6:	mov	r0, r6
   115c8:	bl	11580 <__sfputc_r>
   115cc:	adds	r3, r0, #1
   115ce:	bne.n	115b8 <__sfputs_r+0xa>
   115d0:	pop	{r3, r4, r5, r6, r7, pc}
	...

000115d4 <_vfiprintf_r>:
   115d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115d8:	mov	r5, r1
   115da:	sub	sp, #116	; 0x74
   115dc:	mov	r4, r2
   115de:	mov	r8, r3
   115e0:	mov	r6, r0
   115e2:	cbz	r0, 115ec <_vfiprintf_r+0x18>
   115e4:	ldr	r3, [r0, #32]
   115e6:	cbnz	r3, 115ec <_vfiprintf_r+0x18>
   115e8:	bl	e5d0 <__sinit>
   115ec:	ldr	r3, [r5, #100]	; 0x64
   115ee:	lsls	r1, r3, #31
   115f0:	bmi.n	115fe <_vfiprintf_r+0x2a>
   115f2:	ldrh	r3, [r5, #12]
   115f4:	lsls	r2, r3, #22
   115f6:	bmi.n	115fe <_vfiprintf_r+0x2a>
   115f8:	ldr	r0, [r5, #88]	; 0x58
   115fa:	bl	ea80 <__retarget_lock_acquire_recursive>
   115fe:	ldrh	r3, [r5, #12]
   11600:	lsls	r3, r3, #28
   11602:	bpl.n	11608 <_vfiprintf_r+0x34>
   11604:	ldr	r3, [r5, #16]
   11606:	cbnz	r3, 11630 <_vfiprintf_r+0x5c>
   11608:	mov	r1, r5
   1160a:	mov	r0, r6
   1160c:	bl	11884 <__swsetup_r>
   11610:	cbz	r0, 11630 <_vfiprintf_r+0x5c>
   11612:	ldr	r3, [r5, #100]	; 0x64
   11614:	lsls	r4, r3, #31
   11616:	bpl.n	11622 <_vfiprintf_r+0x4e>
   11618:	mov.w	r0, #4294967295
   1161c:	add	sp, #116	; 0x74
   1161e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11622:	ldrh	r3, [r5, #12]
   11624:	lsls	r0, r3, #22
   11626:	bmi.n	11618 <_vfiprintf_r+0x44>
   11628:	ldr	r0, [r5, #88]	; 0x58
   1162a:	bl	ea82 <__retarget_lock_release_recursive>
   1162e:	b.n	11618 <_vfiprintf_r+0x44>
   11630:	movs	r3, #0
   11632:	str	r3, [sp, #36]	; 0x24
   11634:	movs	r3, #32
   11636:	strb.w	r3, [sp, #41]	; 0x29
   1163a:	str.w	r8, [sp, #12]
   1163e:	movs	r3, #48	; 0x30
   11640:	ldr.w	r8, [pc, #432]	; 117f4 <_vfiprintf_r+0x220>
   11644:	strb.w	r3, [sp, #42]	; 0x2a
   11648:	mov.w	r9, #1
   1164c:	mov	r3, r4
   1164e:	mov	sl, r3
   11650:	ldrb.w	r2, [r3], #1
   11654:	cbz	r2, 1165a <_vfiprintf_r+0x86>
   11656:	cmp	r2, #37	; 0x25
   11658:	bne.n	1164e <_vfiprintf_r+0x7a>
   1165a:	subs.w	fp, sl, r4
   1165e:	beq.n	11678 <_vfiprintf_r+0xa4>
   11660:	mov	r3, fp
   11662:	mov	r2, r4
   11664:	mov	r1, r5
   11666:	mov	r0, r6
   11668:	bl	115ae <__sfputs_r>
   1166c:	adds	r0, #1
   1166e:	beq.w	117c4 <_vfiprintf_r+0x1f0>
   11672:	ldr	r2, [sp, #36]	; 0x24
   11674:	add	r2, fp
   11676:	str	r2, [sp, #36]	; 0x24
   11678:	ldrb.w	r3, [sl]
   1167c:	cmp	r3, #0
   1167e:	beq.w	117c4 <_vfiprintf_r+0x1f0>
   11682:	movs	r3, #0
   11684:	mov.w	r2, #4294967295
   11688:	strd	r2, r3, [sp, #20]
   1168c:	add.w	sl, sl, #1
   11690:	str	r3, [sp, #16]
   11692:	str	r3, [sp, #28]
   11694:	strb.w	r3, [sp, #83]	; 0x53
   11698:	str	r3, [sp, #104]	; 0x68
   1169a:	mov	r4, sl
   1169c:	movs	r2, #5
   1169e:	ldrb.w	r1, [r4], #1
   116a2:	ldr	r0, [pc, #336]	; (117f4 <_vfiprintf_r+0x220>)
   116a4:	bl	eaa0 <memchr>
   116a8:	ldr	r2, [sp, #16]
   116aa:	cbnz	r0, 116e4 <_vfiprintf_r+0x110>
   116ac:	lsls	r1, r2, #27
   116ae:	itt	mi
   116b0:	movmi	r3, #32
   116b2:	strbmi.w	r3, [sp, #83]	; 0x53
   116b6:	lsls	r3, r2, #28
   116b8:	itt	mi
   116ba:	movmi	r3, #43	; 0x2b
   116bc:	strbmi.w	r3, [sp, #83]	; 0x53
   116c0:	ldrb.w	r3, [sl]
   116c4:	cmp	r3, #42	; 0x2a
   116c6:	beq.n	116f4 <_vfiprintf_r+0x120>
   116c8:	ldr	r2, [sp, #28]
   116ca:	mov	r4, sl
   116cc:	movs	r0, #0
   116ce:	mov.w	ip, #10
   116d2:	mov	r1, r4
   116d4:	ldrb.w	r3, [r1], #1
   116d8:	subs	r3, #48	; 0x30
   116da:	cmp	r3, #9
   116dc:	bls.n	1177a <_vfiprintf_r+0x1a6>
   116de:	cbz	r0, 1170e <_vfiprintf_r+0x13a>
   116e0:	str	r2, [sp, #28]
   116e2:	b.n	1170e <_vfiprintf_r+0x13a>
   116e4:	sub.w	r3, r0, r8
   116e8:	lsl.w	r3, r9, r3
   116ec:	orrs	r3, r2
   116ee:	str	r3, [sp, #16]
   116f0:	mov	sl, r4
   116f2:	b.n	1169a <_vfiprintf_r+0xc6>
   116f4:	ldr	r3, [sp, #12]
   116f6:	adds	r1, r3, #4
   116f8:	ldr	r3, [r3, #0]
   116fa:	str	r1, [sp, #12]
   116fc:	cmp	r3, #0
   116fe:	ittet	lt
   11700:	neglt	r3, r3
   11702:	orrlt.w	r2, r2, #2
   11706:	strge	r3, [sp, #28]
   11708:	strlt	r3, [sp, #28]
   1170a:	it	lt
   1170c:	strlt	r2, [sp, #16]
   1170e:	ldrb	r3, [r4, #0]
   11710:	cmp	r3, #46	; 0x2e
   11712:	bne.n	1172e <_vfiprintf_r+0x15a>
   11714:	ldrb	r3, [r4, #1]
   11716:	cmp	r3, #42	; 0x2a
   11718:	bne.n	11784 <_vfiprintf_r+0x1b0>
   1171a:	ldr	r3, [sp, #12]
   1171c:	adds	r2, r3, #4
   1171e:	ldr	r3, [r3, #0]
   11720:	str	r2, [sp, #12]
   11722:	cmp	r3, #0
   11724:	it	lt
   11726:	movlt.w	r3, #4294967295
   1172a:	adds	r4, #2
   1172c:	str	r3, [sp, #20]
   1172e:	ldr.w	sl, [pc, #212]	; 11804 <_vfiprintf_r+0x230>
   11732:	ldrb	r1, [r4, #0]
   11734:	movs	r2, #3
   11736:	mov	r0, sl
   11738:	bl	eaa0 <memchr>
   1173c:	cbz	r0, 1174e <_vfiprintf_r+0x17a>
   1173e:	ldr	r3, [sp, #16]
   11740:	sub.w	r0, r0, sl
   11744:	movs	r2, #64	; 0x40
   11746:	lsls	r2, r0
   11748:	orrs	r3, r2
   1174a:	adds	r4, #1
   1174c:	str	r3, [sp, #16]
   1174e:	ldrb.w	r1, [r4], #1
   11752:	ldr	r0, [pc, #164]	; (117f8 <_vfiprintf_r+0x224>)
   11754:	strb.w	r1, [sp, #40]	; 0x28
   11758:	movs	r2, #6
   1175a:	bl	eaa0 <memchr>
   1175e:	cmp	r0, #0
   11760:	beq.n	117e2 <_vfiprintf_r+0x20e>
   11762:	ldr	r3, [pc, #152]	; (117fc <_vfiprintf_r+0x228>)
   11764:	cbnz	r3, 117ae <_vfiprintf_r+0x1da>
   11766:	ldr	r3, [sp, #12]
   11768:	adds	r3, #7
   1176a:	bic.w	r3, r3, #7
   1176e:	adds	r3, #8
   11770:	str	r3, [sp, #12]
   11772:	ldr	r3, [sp, #36]	; 0x24
   11774:	add	r3, r7
   11776:	str	r3, [sp, #36]	; 0x24
   11778:	b.n	1164c <_vfiprintf_r+0x78>
   1177a:	mla	r2, ip, r2, r3
   1177e:	mov	r4, r1
   11780:	movs	r0, #1
   11782:	b.n	116d2 <_vfiprintf_r+0xfe>
   11784:	movs	r3, #0
   11786:	adds	r4, #1
   11788:	str	r3, [sp, #20]
   1178a:	mov	r1, r3
   1178c:	mov.w	ip, #10
   11790:	mov	r0, r4
   11792:	ldrb.w	r2, [r0], #1
   11796:	subs	r2, #48	; 0x30
   11798:	cmp	r2, #9
   1179a:	bls.n	117a4 <_vfiprintf_r+0x1d0>
   1179c:	cmp	r3, #0
   1179e:	beq.n	1172e <_vfiprintf_r+0x15a>
   117a0:	str	r1, [sp, #20]
   117a2:	b.n	1172e <_vfiprintf_r+0x15a>
   117a4:	mla	r1, ip, r1, r2
   117a8:	mov	r4, r0
   117aa:	movs	r3, #1
   117ac:	b.n	11790 <_vfiprintf_r+0x1bc>
   117ae:	add	r3, sp, #12
   117b0:	str	r3, [sp, #0]
   117b2:	mov	r2, r5
   117b4:	ldr	r3, [pc, #72]	; (11800 <_vfiprintf_r+0x22c>)
   117b6:	add	r1, sp, #16
   117b8:	mov	r0, r6
   117ba:	bl	d980 <_printf_float>
   117be:	mov	r7, r0
   117c0:	adds	r0, r7, #1
   117c2:	bne.n	11772 <_vfiprintf_r+0x19e>
   117c4:	ldr	r3, [r5, #100]	; 0x64
   117c6:	lsls	r1, r3, #31
   117c8:	bmi.n	117d6 <_vfiprintf_r+0x202>
   117ca:	ldrh	r3, [r5, #12]
   117cc:	lsls	r2, r3, #22
   117ce:	bmi.n	117d6 <_vfiprintf_r+0x202>
   117d0:	ldr	r0, [r5, #88]	; 0x58
   117d2:	bl	ea82 <__retarget_lock_release_recursive>
   117d6:	ldrh	r3, [r5, #12]
   117d8:	lsls	r3, r3, #25
   117da:	bmi.w	11618 <_vfiprintf_r+0x44>
   117de:	ldr	r0, [sp, #36]	; 0x24
   117e0:	b.n	1161c <_vfiprintf_r+0x48>
   117e2:	add	r3, sp, #12
   117e4:	str	r3, [sp, #0]
   117e6:	mov	r2, r5
   117e8:	ldr	r3, [pc, #20]	; (11800 <_vfiprintf_r+0x22c>)
   117ea:	add	r1, sp, #16
   117ec:	mov	r0, r6
   117ee:	bl	de90 <_printf_i>
   117f2:	b.n	117be <_vfiprintf_r+0x1ea>
   117f4:	.word	0x2000130c
   117f8:	.word	0x20001316
   117fc:	.word	0x0000d981
   11800:	.word	0x000115af
   11804:	.word	0x20001312

00011808 <__swbuf_r>:
   11808:	push	{r3, r4, r5, r6, r7, lr}
   1180a:	mov	r6, r1
   1180c:	mov	r4, r2
   1180e:	mov	r5, r0
   11810:	cbz	r0, 1181a <__swbuf_r+0x12>
   11812:	ldr	r3, [r0, #32]
   11814:	cbnz	r3, 1181a <__swbuf_r+0x12>
   11816:	bl	e5d0 <__sinit>
   1181a:	ldr	r3, [r4, #24]
   1181c:	str	r3, [r4, #8]
   1181e:	ldrh	r3, [r4, #12]
   11820:	lsls	r2, r3, #28
   11822:	bpl.n	11870 <__swbuf_r+0x68>
   11824:	ldr	r3, [r4, #16]
   11826:	cbz	r3, 11870 <__swbuf_r+0x68>
   11828:	ldr	r3, [r4, #0]
   1182a:	ldr	r2, [r4, #16]
   1182c:	subs	r0, r3, r2
   1182e:	ldr	r3, [r4, #20]
   11830:	uxtb	r6, r6
   11832:	cmp	r3, r0
   11834:	mov	r7, r6
   11836:	bgt.n	11842 <__swbuf_r+0x3a>
   11838:	mov	r1, r4
   1183a:	mov	r0, r5
   1183c:	bl	112d4 <_fflush_r>
   11840:	cbnz	r0, 1187c <__swbuf_r+0x74>
   11842:	ldr	r3, [r4, #8]
   11844:	subs	r3, #1
   11846:	str	r3, [r4, #8]
   11848:	ldr	r3, [r4, #0]
   1184a:	adds	r2, r3, #1
   1184c:	str	r2, [r4, #0]
   1184e:	strb	r6, [r3, #0]
   11850:	ldr	r2, [r4, #20]
   11852:	adds	r3, r0, #1
   11854:	cmp	r2, r3
   11856:	beq.n	11862 <__swbuf_r+0x5a>
   11858:	ldrh	r3, [r4, #12]
   1185a:	lsls	r3, r3, #31
   1185c:	bpl.n	1186c <__swbuf_r+0x64>
   1185e:	cmp	r6, #10
   11860:	bne.n	1186c <__swbuf_r+0x64>
   11862:	mov	r1, r4
   11864:	mov	r0, r5
   11866:	bl	112d4 <_fflush_r>
   1186a:	cbnz	r0, 1187c <__swbuf_r+0x74>
   1186c:	mov	r0, r7
   1186e:	pop	{r3, r4, r5, r6, r7, pc}
   11870:	mov	r1, r4
   11872:	mov	r0, r5
   11874:	bl	11884 <__swsetup_r>
   11878:	cmp	r0, #0
   1187a:	beq.n	11828 <__swbuf_r+0x20>
   1187c:	mov.w	r7, #4294967295
   11880:	b.n	1186c <__swbuf_r+0x64>
	...

00011884 <__swsetup_r>:
   11884:	push	{r3, r4, r5, lr}
   11886:	ldr	r3, [pc, #168]	; (11930 <__swsetup_r+0xac>)
   11888:	mov	r5, r0
   1188a:	ldr	r0, [r3, #0]
   1188c:	mov	r4, r1
   1188e:	cbz	r0, 11898 <__swsetup_r+0x14>
   11890:	ldr	r3, [r0, #32]
   11892:	cbnz	r3, 11898 <__swsetup_r+0x14>
   11894:	bl	e5d0 <__sinit>
   11898:	ldrh	r3, [r4, #12]
   1189a:	ldrsh.w	r2, [r4, #12]
   1189e:	lsls	r0, r3, #28
   118a0:	bmi.n	118e8 <__swsetup_r+0x64>
   118a2:	lsls	r1, r3, #27
   118a4:	bmi.n	118b6 <__swsetup_r+0x32>
   118a6:	movs	r3, #9
   118a8:	str	r3, [r5, #0]
   118aa:	orr.w	r3, r2, #64	; 0x40
   118ae:	strh	r3, [r4, #12]
   118b0:	mov.w	r0, #4294967295
   118b4:	b.n	11920 <__swsetup_r+0x9c>
   118b6:	lsls	r0, r3, #29
   118b8:	bpl.n	118e0 <__swsetup_r+0x5c>
   118ba:	ldr	r1, [r4, #52]	; 0x34
   118bc:	cbz	r1, 118d0 <__swsetup_r+0x4c>
   118be:	add.w	r3, r4, #68	; 0x44
   118c2:	cmp	r1, r3
   118c4:	beq.n	118cc <__swsetup_r+0x48>
   118c6:	mov	r0, r5
   118c8:	bl	f758 <_free_r>
   118cc:	movs	r3, #0
   118ce:	str	r3, [r4, #52]	; 0x34
   118d0:	ldrh	r3, [r4, #12]
   118d2:	bic.w	r3, r3, #36	; 0x24
   118d6:	strh	r3, [r4, #12]
   118d8:	movs	r3, #0
   118da:	str	r3, [r4, #4]
   118dc:	ldr	r3, [r4, #16]
   118de:	str	r3, [r4, #0]
   118e0:	ldrh	r3, [r4, #12]
   118e2:	orr.w	r3, r3, #8
   118e6:	strh	r3, [r4, #12]
   118e8:	ldr	r3, [r4, #16]
   118ea:	cbnz	r3, 11900 <__swsetup_r+0x7c>
   118ec:	ldrh	r3, [r4, #12]
   118ee:	and.w	r3, r3, #640	; 0x280
   118f2:	cmp.w	r3, #512	; 0x200
   118f6:	beq.n	11900 <__swsetup_r+0x7c>
   118f8:	mov	r1, r4
   118fa:	mov	r0, r5
   118fc:	bl	11980 <__smakebuf_r>
   11900:	ldrh	r0, [r4, #12]
   11902:	ldrsh.w	r2, [r4, #12]
   11906:	ands.w	r3, r0, #1
   1190a:	beq.n	11922 <__swsetup_r+0x9e>
   1190c:	movs	r3, #0
   1190e:	str	r3, [r4, #8]
   11910:	ldr	r3, [r4, #20]
   11912:	negs	r3, r3
   11914:	str	r3, [r4, #24]
   11916:	ldr	r3, [r4, #16]
   11918:	cbnz	r3, 1192c <__swsetup_r+0xa8>
   1191a:	ands.w	r0, r0, #128	; 0x80
   1191e:	bne.n	118aa <__swsetup_r+0x26>
   11920:	pop	{r3, r4, r5, pc}
   11922:	lsls	r1, r0, #30
   11924:	it	pl
   11926:	ldrpl	r3, [r4, #20]
   11928:	str	r3, [r4, #8]
   1192a:	b.n	11916 <__swsetup_r+0x92>
   1192c:	movs	r0, #0
   1192e:	b.n	11920 <__swsetup_r+0x9c>
   11930:	.word	0x20001e08

00011934 <__swhatbuf_r>:
   11934:	push	{r4, r5, r6, lr}
   11936:	mov	r4, r1
   11938:	ldrsh.w	r1, [r1, #14]
   1193c:	cmp	r1, #0
   1193e:	sub	sp, #88	; 0x58
   11940:	mov	r5, r2
   11942:	mov	r6, r3
   11944:	bge.n	11962 <__swhatbuf_r+0x2e>
   11946:	ldrh	r3, [r4, #12]
   11948:	tst.w	r3, #128	; 0x80
   1194c:	mov.w	r1, #0
   11950:	ite	eq
   11952:	moveq.w	r3, #1024	; 0x400
   11956:	movne	r3, #64	; 0x40
   11958:	movs	r0, #0
   1195a:	str	r1, [r6, #0]
   1195c:	str	r3, [r5, #0]
   1195e:	add	sp, #88	; 0x58
   11960:	pop	{r4, r5, r6, pc}
   11962:	mov	r2, sp
   11964:	bl	119f8 <_fstat_r>
   11968:	cmp	r0, #0
   1196a:	blt.n	11946 <__swhatbuf_r+0x12>
   1196c:	ldr	r1, [sp, #4]
   1196e:	and.w	r1, r1, #61440	; 0xf000
   11972:	sub.w	r3, r1, #8192	; 0x2000
   11976:	negs	r1, r3
   11978:	adcs	r1, r3
   1197a:	mov.w	r3, #1024	; 0x400
   1197e:	b.n	11958 <__swhatbuf_r+0x24>

00011980 <__smakebuf_r>:
   11980:	ldrh	r3, [r1, #12]
   11982:	push	{r0, r1, r4, r5, r6, lr}
   11984:	lsls	r5, r3, #30
   11986:	mov	r6, r0
   11988:	mov	r4, r1
   1198a:	bpl.n	1199c <__smakebuf_r+0x1c>
   1198c:	add.w	r3, r4, #71	; 0x47
   11990:	str	r3, [r4, #0]
   11992:	str	r3, [r4, #16]
   11994:	movs	r3, #1
   11996:	str	r3, [r4, #20]
   11998:	add	sp, #8
   1199a:	pop	{r4, r5, r6, pc}
   1199c:	add	r3, sp, #4
   1199e:	mov	r2, sp
   119a0:	bl	11934 <__swhatbuf_r>
   119a4:	ldr	r1, [sp, #0]
   119a6:	mov	r5, r0
   119a8:	mov	r0, r6
   119aa:	bl	ca20 <_malloc_r>
   119ae:	cbnz	r0, 119c4 <__smakebuf_r+0x44>
   119b0:	ldrsh.w	r3, [r4, #12]
   119b4:	lsls	r2, r3, #22
   119b6:	bmi.n	11998 <__smakebuf_r+0x18>
   119b8:	bic.w	r3, r3, #3
   119bc:	orr.w	r3, r3, #2
   119c0:	strh	r3, [r4, #12]
   119c2:	b.n	1198c <__smakebuf_r+0xc>
   119c4:	ldrh	r3, [r4, #12]
   119c6:	str	r0, [r4, #0]
   119c8:	orr.w	r3, r3, #128	; 0x80
   119cc:	strh	r3, [r4, #12]
   119ce:	ldr	r3, [sp, #0]
   119d0:	str	r3, [r4, #20]
   119d2:	ldr	r3, [sp, #4]
   119d4:	str	r0, [r4, #16]
   119d6:	cbz	r3, 119f0 <__smakebuf_r+0x70>
   119d8:	ldrsh.w	r1, [r4, #14]
   119dc:	mov	r0, r6
   119de:	bl	11a1c <_isatty_r>
   119e2:	cbz	r0, 119f0 <__smakebuf_r+0x70>
   119e4:	ldrh	r3, [r4, #12]
   119e6:	bic.w	r3, r3, #3
   119ea:	orr.w	r3, r3, #1
   119ee:	strh	r3, [r4, #12]
   119f0:	ldrh	r3, [r4, #12]
   119f2:	orrs	r5, r3
   119f4:	strh	r5, [r4, #12]
   119f6:	b.n	11998 <__smakebuf_r+0x18>

000119f8 <_fstat_r>:
   119f8:	push	{r3, r4, r5, lr}
   119fa:	ldr	r5, [pc, #28]	; (11a18 <_fstat_r+0x20>)
   119fc:	movs	r3, #0
   119fe:	mov	r4, r0
   11a00:	mov	r0, r1
   11a02:	mov	r1, r2
   11a04:	str	r3, [r5, #0]
   11a06:	bl	b6b2 <_fstat>
   11a0a:	adds	r3, r0, #1
   11a0c:	bne.n	11a14 <_fstat_r+0x1c>
   11a0e:	ldr	r3, [r5, #0]
   11a10:	cbz	r3, 11a14 <_fstat_r+0x1c>
   11a12:	str	r3, [r4, #0]
   11a14:	pop	{r3, r4, r5, pc}
   11a16:	nop
   11a18:	.word	0x2002cff8

00011a1c <_isatty_r>:
   11a1c:	push	{r3, r4, r5, lr}
   11a1e:	ldr	r5, [pc, #24]	; (11a38 <_isatty_r+0x1c>)
   11a20:	movs	r3, #0
   11a22:	mov	r4, r0
   11a24:	mov	r0, r1
   11a26:	str	r3, [r5, #0]
   11a28:	bl	b6bc <_isatty>
   11a2c:	adds	r3, r0, #1
   11a2e:	bne.n	11a36 <_isatty_r+0x1a>
   11a30:	ldr	r3, [r5, #0]
   11a32:	cbz	r3, 11a36 <_isatty_r+0x1a>
   11a34:	str	r3, [r4, #0]
   11a36:	pop	{r3, r4, r5, pc}
   11a38:	.word	0x2002cff8

00011a3c <__aeabi_drsub>:
   11a3c:	eor.w	r1, r1, #2147483648	; 0x80000000
   11a40:	b.n	11a48 <__adddf3>
   11a42:	nop

00011a44 <__aeabi_dsub>:
   11a44:	eor.w	r3, r3, #2147483648	; 0x80000000

00011a48 <__adddf3>:
   11a48:	push	{r4, r5, lr}
   11a4a:	mov.w	r4, r1, lsl #1
   11a4e:	mov.w	r5, r3, lsl #1
   11a52:	teq	r4, r5
   11a56:	it	eq
   11a58:	teqeq	r0, r2
   11a5c:	itttt	ne
   11a5e:	orrsne.w	ip, r4, r0
   11a62:	orrsne.w	ip, r5, r2
   11a66:	mvnsne.w	ip, r4, asr #21
   11a6a:	mvnsne.w	ip, r5, asr #21
   11a6e:	beq.w	11c36 <__adddf3+0x1ee>
   11a72:	mov.w	r4, r4, lsr #21
   11a76:	rsbs	r5, r4, r5, lsr #21
   11a7a:	it	lt
   11a7c:	neglt	r5, r5
   11a7e:	ble.n	11a9a <__adddf3+0x52>
   11a80:	add	r4, r5
   11a82:	eor.w	r2, r0, r2
   11a86:	eor.w	r3, r1, r3
   11a8a:	eor.w	r0, r2, r0
   11a8e:	eor.w	r1, r3, r1
   11a92:	eor.w	r2, r0, r2
   11a96:	eor.w	r3, r1, r3
   11a9a:	cmp	r5, #54	; 0x36
   11a9c:	it	hi
   11a9e:	pophi	{r4, r5, pc}
   11aa0:	tst.w	r1, #2147483648	; 0x80000000
   11aa4:	mov.w	r1, r1, lsl #12
   11aa8:	mov.w	ip, #1048576	; 0x100000
   11aac:	orr.w	r1, ip, r1, lsr #12
   11ab0:	beq.n	11ab8 <__adddf3+0x70>
   11ab2:	negs	r0, r0
   11ab4:	sbc.w	r1, r1, r1, lsl #1
   11ab8:	tst.w	r3, #2147483648	; 0x80000000
   11abc:	mov.w	r3, r3, lsl #12
   11ac0:	orr.w	r3, ip, r3, lsr #12
   11ac4:	beq.n	11acc <__adddf3+0x84>
   11ac6:	negs	r2, r2
   11ac8:	sbc.w	r3, r3, r3, lsl #1
   11acc:	teq	r4, r5
   11ad0:	beq.w	11c22 <__adddf3+0x1da>
   11ad4:	sub.w	r4, r4, #1
   11ad8:	rsbs	lr, r5, #32
   11adc:	blt.n	11afa <__adddf3+0xb2>
   11ade:	lsl.w	ip, r2, lr
   11ae2:	lsr.w	r2, r2, r5
   11ae6:	adds	r0, r0, r2
   11ae8:	adc.w	r1, r1, #0
   11aec:	lsl.w	r2, r3, lr
   11af0:	adds	r0, r0, r2
   11af2:	asr.w	r3, r3, r5
   11af6:	adcs	r1, r3
   11af8:	b.n	11b18 <__adddf3+0xd0>
   11afa:	sub.w	r5, r5, #32
   11afe:	add.w	lr, lr, #32
   11b02:	cmp	r2, #1
   11b04:	lsl.w	ip, r3, lr
   11b08:	it	cs
   11b0a:	orrcs.w	ip, ip, #2
   11b0e:	asr.w	r3, r3, r5
   11b12:	adds	r0, r0, r3
   11b14:	adcs.w	r1, r1, r3, asr #31
   11b18:	and.w	r5, r1, #2147483648	; 0x80000000
   11b1c:	bpl.n	11b2e <__adddf3+0xe6>
   11b1e:	mov.w	lr, #0
   11b22:	rsbs	ip, ip, #0
   11b26:	sbcs.w	r0, lr, r0
   11b2a:	sbc.w	r1, lr, r1
   11b2e:	cmp.w	r1, #1048576	; 0x100000
   11b32:	bcc.n	11b6c <__adddf3+0x124>
   11b34:	cmp.w	r1, #2097152	; 0x200000
   11b38:	bcc.n	11b54 <__adddf3+0x10c>
   11b3a:	lsrs	r1, r1, #1
   11b3c:	movs.w	r0, r0, rrx
   11b40:	mov.w	ip, ip, rrx
   11b44:	add.w	r4, r4, #1
   11b48:	mov.w	r2, r4, lsl #21
   11b4c:	cmn.w	r2, #4194304	; 0x400000
   11b50:	bcs.w	11c88 <__adddf3+0x240>
   11b54:	cmp.w	ip, #2147483648	; 0x80000000
   11b58:	it	eq
   11b5a:	movseq.w	ip, r0, lsr #1
   11b5e:	adcs.w	r0, r0, #0
   11b62:	adc.w	r1, r1, r4, lsl #20
   11b66:	orr.w	r1, r1, r5
   11b6a:	pop	{r4, r5, pc}
   11b6c:	movs.w	ip, ip, lsl #1
   11b70:	adcs	r0, r0
   11b72:	adc.w	r1, r1, r1
   11b76:	subs	r4, #1
   11b78:	it	cs
   11b7a:	cmpcs.w	r1, #1048576	; 0x100000
   11b7e:	bcs.n	11b54 <__adddf3+0x10c>
   11b80:	teq	r1, #0
   11b84:	itt	eq
   11b86:	moveq	r1, r0
   11b88:	moveq	r0, #0
   11b8a:	clz	r3, r1
   11b8e:	it	eq
   11b90:	addeq	r3, #32
   11b92:	sub.w	r3, r3, #11
   11b96:	subs.w	r2, r3, #32
   11b9a:	bge.n	11bb6 <__adddf3+0x16e>
   11b9c:	adds	r2, #12
   11b9e:	ble.n	11bb2 <__adddf3+0x16a>
   11ba0:	add.w	ip, r2, #20
   11ba4:	rsb	r2, r2, #12
   11ba8:	lsl.w	r0, r1, ip
   11bac:	lsr.w	r1, r1, r2
   11bb0:	b.n	11bcc <__adddf3+0x184>
   11bb2:	add.w	r2, r2, #20
   11bb6:	it	le
   11bb8:	rsble	ip, r2, #32
   11bbc:	lsl.w	r1, r1, r2
   11bc0:	lsr.w	ip, r0, ip
   11bc4:	itt	le
   11bc6:	orrle.w	r1, r1, ip
   11bca:	lslle	r0, r2
   11bcc:	subs	r4, r4, r3
   11bce:	ittt	ge
   11bd0:	addge.w	r1, r1, r4, lsl #20
   11bd4:	orrge	r1, r5
   11bd6:	popge	{r4, r5, pc}
   11bd8:	mvn.w	r4, r4
   11bdc:	subs	r4, #31
   11bde:	bge.n	11c1a <__adddf3+0x1d2>
   11be0:	adds	r4, #12
   11be2:	bgt.n	11c02 <__adddf3+0x1ba>
   11be4:	add.w	r4, r4, #20
   11be8:	rsb	r2, r4, #32
   11bec:	lsr.w	r0, r0, r4
   11bf0:	lsl.w	r3, r1, r2
   11bf4:	orr.w	r0, r0, r3
   11bf8:	lsr.w	r3, r1, r4
   11bfc:	orr.w	r1, r5, r3
   11c00:	pop	{r4, r5, pc}
   11c02:	rsb	r4, r4, #12
   11c06:	rsb	r2, r4, #32
   11c0a:	lsr.w	r0, r0, r2
   11c0e:	lsl.w	r3, r1, r4
   11c12:	orr.w	r0, r0, r3
   11c16:	mov	r1, r5
   11c18:	pop	{r4, r5, pc}
   11c1a:	lsr.w	r0, r1, r4
   11c1e:	mov	r1, r5
   11c20:	pop	{r4, r5, pc}
   11c22:	teq	r4, #0
   11c26:	eor.w	r3, r3, #1048576	; 0x100000
   11c2a:	itte	eq
   11c2c:	eoreq.w	r1, r1, #1048576	; 0x100000
   11c30:	addeq	r4, #1
   11c32:	subne	r5, #1
   11c34:	b.n	11ad4 <__adddf3+0x8c>
   11c36:	mvns.w	ip, r4, asr #21
   11c3a:	it	ne
   11c3c:	mvnsne.w	ip, r5, asr #21
   11c40:	beq.n	11c96 <__adddf3+0x24e>
   11c42:	teq	r4, r5
   11c46:	it	eq
   11c48:	teqeq	r0, r2
   11c4c:	beq.n	11c5a <__adddf3+0x212>
   11c4e:	orrs.w	ip, r4, r0
   11c52:	itt	eq
   11c54:	moveq	r1, r3
   11c56:	moveq	r0, r2
   11c58:	pop	{r4, r5, pc}
   11c5a:	teq	r1, r3
   11c5e:	ittt	ne
   11c60:	movne	r1, #0
   11c62:	movne	r0, #0
   11c64:	popne	{r4, r5, pc}
   11c66:	movs.w	ip, r4, lsr #21
   11c6a:	bne.n	11c78 <__adddf3+0x230>
   11c6c:	lsls	r0, r0, #1
   11c6e:	adcs	r1, r1
   11c70:	it	cs
   11c72:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   11c76:	pop	{r4, r5, pc}
   11c78:	adds.w	r4, r4, #4194304	; 0x400000
   11c7c:	itt	cc
   11c7e:	addcc.w	r1, r1, #1048576	; 0x100000
   11c82:	popcc	{r4, r5, pc}
   11c84:	and.w	r5, r1, #2147483648	; 0x80000000
   11c88:	orr.w	r1, r5, #2130706432	; 0x7f000000
   11c8c:	orr.w	r1, r1, #15728640	; 0xf00000
   11c90:	mov.w	r0, #0
   11c94:	pop	{r4, r5, pc}
   11c96:	mvns.w	ip, r4, asr #21
   11c9a:	itte	ne
   11c9c:	movne	r1, r3
   11c9e:	movne	r0, r2
   11ca0:	mvnseq.w	ip, r5, asr #21
   11ca4:	itt	ne
   11ca6:	movne	r3, r1
   11ca8:	movne	r2, r0
   11caa:	orrs.w	r4, r0, r1, lsl #12
   11cae:	itte	eq
   11cb0:	orrseq.w	r5, r2, r3, lsl #12
   11cb4:	teqeq	r1, r3
   11cb8:	orrne.w	r1, r1, #524288	; 0x80000
   11cbc:	pop	{r4, r5, pc}
   11cbe:	nop

00011cc0 <__aeabi_ui2d>:
   11cc0:	teq	r0, #0
   11cc4:	itt	eq
   11cc6:	moveq	r1, #0
   11cc8:	bxeq	lr
   11cca:	push	{r4, r5, lr}
   11ccc:	mov.w	r4, #1024	; 0x400
   11cd0:	add.w	r4, r4, #50	; 0x32
   11cd4:	mov.w	r5, #0
   11cd8:	mov.w	r1, #0
   11cdc:	b.n	11b80 <__adddf3+0x138>
   11cde:	nop

00011ce0 <__aeabi_i2d>:
   11ce0:	teq	r0, #0
   11ce4:	itt	eq
   11ce6:	moveq	r1, #0
   11ce8:	bxeq	lr
   11cea:	push	{r4, r5, lr}
   11cec:	mov.w	r4, #1024	; 0x400
   11cf0:	add.w	r4, r4, #50	; 0x32
   11cf4:	ands.w	r5, r0, #2147483648	; 0x80000000
   11cf8:	it	mi
   11cfa:	negmi	r0, r0
   11cfc:	mov.w	r1, #0
   11d00:	b.n	11b80 <__adddf3+0x138>
   11d02:	nop

00011d04 <__aeabi_f2d>:
   11d04:	lsls	r2, r0, #1
   11d06:	mov.w	r1, r2, asr #3
   11d0a:	mov.w	r1, r1, rrx
   11d0e:	mov.w	r0, r2, lsl #28
   11d12:	itttt	ne
   11d14:	andsne.w	r3, r2, #4278190080	; 0xff000000
   11d18:	teqne	r3, #4278190080	; 0xff000000
   11d1c:	eorne.w	r1, r1, #939524096	; 0x38000000
   11d20:	bxne	lr
   11d22:	bics.w	r2, r2, #4278190080	; 0xff000000
   11d26:	it	eq
   11d28:	bxeq	lr
   11d2a:	teq	r3, #4278190080	; 0xff000000
   11d2e:	itt	eq
   11d30:	orreq.w	r1, r1, #524288	; 0x80000
   11d34:	bxeq	lr
   11d36:	push	{r4, r5, lr}
   11d38:	mov.w	r4, #896	; 0x380
   11d3c:	and.w	r5, r1, #2147483648	; 0x80000000
   11d40:	bic.w	r1, r1, #2147483648	; 0x80000000
   11d44:	b.n	11b80 <__adddf3+0x138>
   11d46:	nop

00011d48 <__aeabi_ul2d>:
   11d48:	orrs.w	r2, r0, r1
   11d4c:	it	eq
   11d4e:	bxeq	lr
   11d50:	push	{r4, r5, lr}
   11d52:	mov.w	r5, #0
   11d56:	b.n	11d6e <__aeabi_l2d+0x16>

00011d58 <__aeabi_l2d>:
   11d58:	orrs.w	r2, r0, r1
   11d5c:	it	eq
   11d5e:	bxeq	lr
   11d60:	push	{r4, r5, lr}
   11d62:	ands.w	r5, r1, #2147483648	; 0x80000000
   11d66:	bpl.n	11d6e <__aeabi_l2d+0x16>
   11d68:	negs	r0, r0
   11d6a:	sbc.w	r1, r1, r1, lsl #1
   11d6e:	mov.w	r4, #1024	; 0x400
   11d72:	add.w	r4, r4, #50	; 0x32
   11d76:	movs.w	ip, r1, lsr #22
   11d7a:	beq.w	11b2e <__adddf3+0xe6>
   11d7e:	mov.w	r2, #3
   11d82:	movs.w	ip, ip, lsr #3
   11d86:	it	ne
   11d88:	addne	r2, #3
   11d8a:	movs.w	ip, ip, lsr #3
   11d8e:	it	ne
   11d90:	addne	r2, #3
   11d92:	add.w	r2, r2, ip, lsr #3
   11d96:	rsb	r3, r2, #32
   11d9a:	lsl.w	ip, r0, r3
   11d9e:	lsr.w	r0, r0, r2
   11da2:	lsl.w	lr, r1, r3
   11da6:	orr.w	r0, r0, lr
   11daa:	lsr.w	r1, r1, r2
   11dae:	add	r4, r2
   11db0:	b.n	11b2e <__adddf3+0xe6>
   11db2:	nop

00011db4 <__aeabi_d2lz>:
   11db4:	push	{r3, lr}
   11db6:	mov	r2, r0
   11db8:	mov	r3, r1
   11dba:	vmov	d7, r2, r3
   11dbe:	vcmpe.f64	d7, #0.0
   11dc2:	vmrs	APSR_nzcv, fpscr
   11dc6:	bmi.n	11dd0 <__aeabi_d2lz+0x1c>
   11dc8:	ldmia.w	sp!, {r3, lr}
   11dcc:	b.w	11de8 <__aeabi_d2ulz>
   11dd0:	vneg.f64	d7, d7
   11dd4:	vmov	r0, r1, d7
   11dd8:	bl	11de8 <__aeabi_d2ulz>
   11ddc:	negs	r0, r0
   11dde:	sbc.w	r1, r1, r1, lsl #1
   11de2:	pop	{r3, pc}
   11de4:	movs	r0, r0
	...

00011de8 <__aeabi_d2ulz>:
   11de8:	vldr	d6, [pc, #44]	; 11e18 <__aeabi_d2ulz+0x30>
   11dec:	vmov	d7, r0, r1
   11df0:	vldr	d5, [pc, #44]	; 11e20 <__aeabi_d2ulz+0x38>
   11df4:	vmul.f64	d6, d7, d6
   11df8:	vcvt.u32.f64	s12, d6
   11dfc:	vcvt.f64.u32	d4, s12
   11e00:	vfms.f64	d7, d4, d5
   11e04:	vcvt.u32.f64	s15, d7
   11e08:	vmov	r1, s12
   11e0c:	vmov	r0, s15
   11e10:	bx	lr
   11e12:	nop
   11e14:	nop.w
   11e18:	.word	0x00000000
   11e1c:	.word	0x3df00000
   11e20:	.word	0x00000000
   11e24:	.word	0x41f00000

00011e28 <__usb_init_veneer>:
   11e28:	ldr.w	pc, [pc]	; 11e2c <__usb_init_veneer+0x4>
   11e2c:	.word	0x600016c1

00011e30 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   11e30:	ldr.w	pc, [pc]	; 11e34 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   11e34:	.word	0x60001e29

00011e38 <___reboot_Teensyduino__veneer>:
   11e38:	ldr.w	pc, [pc]	; 11e3c <___reboot_Teensyduino__veneer+0x4>
   11e3c:	.word	0x600017a5

00011e40 <___Z12do_hibernatev_veneer>:
   11e40:	ldr.w	pc, [pc]	; 11e44 <___Z12do_hibernatev_veneer+0x4>
   11e44:	.word	0x6000165d

00011e48 <___Z14set_audioClockilm_veneer>:
   11e48:	ldr.w	pc, [pc]	; 11e4c <___Z14set_audioClockilm_veneer+0x4>
   11e4c:	.word	0x600023e1

00011e50 <___init_veneer>:
   11e50:	ldr.w	pc, [pc]	; 11e54 <___init_veneer+0x4>
   11e54:	.word	0x60002329

00011e58 <___ZN16CrashReportClasscvbEv_veneer>:
   11e58:	ldr.w	pc, [pc]	; 11e5c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   11e5c:	.word	0x600022cd

Disassembly of section .fini:

00011e60 <_fini>:
   11e60:	push	{r3, r4, r5, r6, r7, lr}
   11e62:	nop

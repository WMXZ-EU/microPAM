
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\D7126AFB1F752B201955E1C21E4B6A68/LC_PAM.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20009ac0 	.word	0x20009ac0
6000142c:	200160a0 	.word	0x200160a0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 fe06 	bl	60002050 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 fda4 	bl	60002060 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 ffd2 	bl	600024f4 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f001 f989 	bl	60002878 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 fde0 	bl	60002170 <configure_external_ram>
	analog_init();
600015b0:	f001 f904 	bl	600027bc <analog_init>
	pwm_init();
600015b4:	f001 f95c 	bl	60002870 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 ffca 	bl	60002550 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 fd4a 	bl	60002054 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f001 f85b 	bl	60002680 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 fd43 	bl	6000205c <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 fd3f 	bl	60002058 <startup_default_late_hook>
	__libc_init_array();
600015da:	f001 f921 	bl	60002820 <____libc_init_array_veneer>
	main();
600015de:	f001 f933 	bl	60002848 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0001b398 	.word	0x0001b398
600015f0:	60002ab0 	.word	0x60002ab0
600015f4:	00000000 	.word	0x00000000
600015f8:	20009ac0 	.word	0x20009ac0
600015fc:	6001de4c 	.word	0x6001de4c
60001600:	20000000 	.word	0x20000000
60001604:	20009800 	.word	0x20009800
60001608:	0000eb69 	.word	0x0000eb69
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0000d945 	.word	0x0000d945
6000161c:	2001601c 	.word	0x2001601c
60001620:	0000d949 	.word	0x0000d949
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20016020 	.word	0x20016020
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaff 	.word	0xaaaaaaff
6000166c:	00200007 	.word	0x00200007
60001670:	20060000 	.word	0x20060000

60001674 <do_hibernate()>:
  }
#else
FLASHMEM
void do_hibernate(void)
{
    uint32_t tmp = SNVS_LPCR; // save control register
60001674:	4a17      	ldr	r2, [pc, #92]	; (600016d4 <do_hibernate()+0x60>)
{
60001676:	b538      	push	{r3, r4, r5, lr}
    uint32_t tmp = SNVS_LPCR; // save control register
60001678:	6b95      	ldr	r5, [r2, #56]	; 0x38

    SNVS_LPSR |= 1;
6000167a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
6000167c:	f043 0301 	orr.w	r3, r3, #1
60001680:	64d3      	str	r3, [r2, #76]	; 0x4c

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
60001682:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001684:	f023 0302 	bic.w	r3, r3, #2
60001688:	6393      	str	r3, [r2, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
6000168a:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000168c:	0799      	lsls	r1, r3, #30
6000168e:	d4fc      	bmi.n	6000168a <do_hibernate()+0x16>

    __disable_irq();
60001690:	b672      	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
60001692:	4c10      	ldr	r4, [pc, #64]	; (600016d4 <do_hibernate()+0x60>)
60001694:	6d20      	ldr	r0, [r4, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
60001696:	6d63      	ldr	r3, [r4, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
60001698:	6d62      	ldr	r2, [r4, #84]	; 0x54
6000169a:	6d21      	ldr	r1, [r4, #80]	; 0x50
6000169c:	429a      	cmp	r2, r3
6000169e:	d1f9      	bne.n	60001694 <do_hibernate()+0x20>
600016a0:	4281      	cmp	r1, r0
600016a2:	d1f7      	bne.n	60001694 <do_hibernate()+0x20>
    uint32_t secso = (msb << 17) | (lsb >> 15);
600016a4:	0bdb      	lsrs	r3, r3, #15

    uint32_t secs = estAlarmTime(secso);
600016a6:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
600016aa:	f001 f8e9 	bl	60002880 <___Z12estAlarmTimem_veneer>
    //set alarm
    //secs += nsec;
    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
600016ae:	4909      	ldr	r1, [pc, #36]	; (600016d4 <do_hibernate()+0x60>)
    SNVS_LPTAR = secs;
600016b0:	65a0      	str	r0, [r4, #88]	; 0x58
    while (SNVS_LPTAR != secs);
600016b2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
600016b4:	4283      	cmp	r3, r0
600016b6:	d1fc      	bne.n	600016b2 <do_hibernate()+0x3e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
600016b8:	f045 0502 	orr.w	r5, r5, #2
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
600016bc:	4a05      	ldr	r2, [pc, #20]	; (600016d4 <do_hibernate()+0x60>)
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
600016be:	638d      	str	r5, [r1, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
600016c0:	6b93      	ldr	r3, [r2, #56]	; 0x38
600016c2:	079b      	lsls	r3, r3, #30
600016c4:	d5fc      	bpl.n	600016c0 <do_hibernate()+0x4c>
//    NVIC_CLEAR_PENDING(IRQ_SNVS_ONOFF);
//    attachInterruptVector(IRQ_SNVS_ONOFF, &call_back);
//    NVIC_SET_PRIORITY(IRQ_SNVS_ONOFF, 255); //lowest priority
//    asm volatile ("dsb"); //make sure to write before interrupt-enable
//    NVIC_ENABLE_IRQ(IRQ_SNVS_ONOFF);
    __enable_irq();
600016c6:	b662      	cpsie	i
  
    SNVS_LPCR |= (1 << 6); // turn off power
600016c8:	6b93      	ldr	r3, [r2, #56]	; 0x38
600016ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600016ce:	6393      	str	r3, [r2, #56]	; 0x38
    while (1) asm("wfi");  
600016d0:	bf30      	wfi
600016d2:	e7fd      	b.n	600016d0 <do_hibernate()+0x5c>
600016d4:	400d4000 	.word	0x400d4000

600016d8 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016d8:	6943      	ldr	r3, [r0, #20]
600016da:	4a0a      	ldr	r2, [pc, #40]	; (60001704 <TwoWire::configSDApin(unsigned char)+0x2c>)
600016dc:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
600016e0:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016e2:	7a03      	ldrb	r3, [r0, #8]
600016e4:	4c08      	ldr	r4, [pc, #32]	; (60001708 <TwoWire::configSDApin(unsigned char)+0x30>)
600016e6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
600016ea:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016ee:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
600016f0:	68c2      	ldr	r2, [r0, #12]
600016f2:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016f4:	6903      	ldr	r3, [r0, #16]
600016f6:	b10b      	cbz	r3, 600016fc <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016f8:	6942      	ldr	r2, [r0, #20]
600016fa:	601a      	str	r2, [r3, #0]
	}
}
600016fc:	f85d 4b04 	ldr.w	r4, [sp], #4
60001700:	4770      	bx	lr
60001702:	bf00      	nop
60001704:	20007b44 	.word	0x20007b44
60001708:	0001f861 	.word	0x0001f861

6000170c <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
6000170c:	6943      	ldr	r3, [r0, #20]
6000170e:	7e02      	ldrb	r2, [r0, #24]
60001710:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001714:	f892 c008 	ldrb.w	ip, [r2, #8]
60001718:	458c      	cmp	ip, r1
6000171a:	d01c      	beq.n	60001756 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
6000171c:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
6000171e:	2aff      	cmp	r2, #255	; 0xff
60001720:	d019      	beq.n	60001756 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
60001722:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001724:	b510      	push	{r4, lr}
60001726:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
60001728:	d016      	beq.n	60001758 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
6000172a:	7e1a      	ldrb	r2, [r3, #24]
6000172c:	2aff      	cmp	r2, #255	; 0xff
6000172e:	d006      	beq.n	6000173e <TwoWire::setSDA(unsigned char)+0x32>
60001730:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001732:	e9d3 2300 	ldrd	r2, r3, [r3]
60001736:	6812      	ldr	r2, [r2, #0]
60001738:	421a      	tst	r2, r3
6000173a:	d101      	bne.n	60001740 <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
6000173c:	7621      	strb	r1, [r4, #24]
}
6000173e:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001740:	4b06      	ldr	r3, [pc, #24]	; (6000175c <TwoWire::setSDA(unsigned char)+0x50>)
60001742:	2205      	movs	r2, #5
		configSDApin(newindex);
60001744:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001746:	eb03 130c 	add.w	r3, r3, ip, lsl #4
6000174a:	685b      	ldr	r3, [r3, #4]
6000174c:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
6000174e:	f7ff ffc3 	bl	600016d8 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
60001752:	7621      	strb	r1, [r4, #24]
60001754:	e7f3      	b.n	6000173e <TwoWire::setSDA(unsigned char)+0x32>
60001756:	4770      	bx	lr
		if (sda_pin == pin) break;
60001758:	2100      	movs	r1, #0
6000175a:	e7ea      	b.n	60001732 <TwoWire::setSDA(unsigned char)+0x26>
6000175c:	20007b44 	.word	0x20007b44

60001760 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001760:	6943      	ldr	r3, [r0, #20]
60001762:	4a0a      	ldr	r2, [pc, #40]	; (6000178c <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001764:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001768:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
6000176a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000176e:	4c08      	ldr	r4, [pc, #32]	; (60001790 <TwoWire::configSCLpin(unsigned char)+0x30>)
60001770:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001774:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001778:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000177a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
6000177c:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000177e:	6b03      	ldr	r3, [r0, #48]	; 0x30
60001780:	b10b      	cbz	r3, 60001786 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001782:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001784:	601a      	str	r2, [r3, #0]
	}
}
60001786:	f85d 4b04 	ldr.w	r4, [sp], #4
6000178a:	4770      	bx	lr
6000178c:	20007b44 	.word	0x20007b44
60001790:	0001f861 	.word	0x0001f861

60001794 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001794:	6943      	ldr	r3, [r0, #20]
60001796:	7e42      	ldrb	r2, [r0, #25]
60001798:	eb03 1202 	add.w	r2, r3, r2, lsl #4
6000179c:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
600017a0:	458c      	cmp	ip, r1
600017a2:	d01e      	beq.n	600017e2 <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
600017a4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
600017a8:	2aff      	cmp	r2, #255	; 0xff
600017aa:	d01a      	beq.n	600017e2 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
600017ac:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
600017ae:	b510      	push	{r4, lr}
600017b0:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
600017b2:	d017      	beq.n	600017e4 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
600017b4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
600017b8:	2aff      	cmp	r2, #255	; 0xff
600017ba:	d006      	beq.n	600017ca <TwoWire::setSCL(unsigned char)+0x36>
600017bc:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017be:	e9d3 2300 	ldrd	r2, r3, [r3]
600017c2:	6812      	ldr	r2, [r2, #0]
600017c4:	421a      	tst	r2, r3
600017c6:	d101      	bne.n	600017cc <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
600017c8:	7661      	strb	r1, [r4, #25]
}
600017ca:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017cc:	4b06      	ldr	r3, [pc, #24]	; (600017e8 <TwoWire::setSCL(unsigned char)+0x54>)
600017ce:	2205      	movs	r2, #5
		configSCLpin(newindex);
600017d0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017d2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600017d6:	685b      	ldr	r3, [r3, #4]
600017d8:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
600017da:	f7ff ffc1 	bl	60001760 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
600017de:	7661      	strb	r1, [r4, #25]
600017e0:	e7f3      	b.n	600017ca <TwoWire::setSCL(unsigned char)+0x36>
600017e2:	4770      	bx	lr
		if (scl_pin == pin) break;
600017e4:	2100      	movs	r1, #0
600017e6:	e7ea      	b.n	600017be <TwoWire::setSCL(unsigned char)+0x2a>
600017e8:	20007b44 	.word	0x20007b44

600017ec <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017ec:	4916      	ldr	r1, [pc, #88]	; (60001848 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017ee:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017f0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
600017f2:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
600017f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
600017fa:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017fc:	638b      	str	r3, [r1, #56]	; 0x38
{
600017fe:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
60001800:	4d12      	ldr	r5, [pc, #72]	; (6000184c <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001802:	e9d2 1300 	ldrd	r1, r3, [r2]
60001806:	680a      	ldr	r2, [r1, #0]
60001808:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
6000180a:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000180c:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
6000180e:	2202      	movs	r2, #2
	port->MCR = 0;
60001810:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
60001812:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001814:	4a0e      	ldr	r2, [pc, #56]	; (60001850 <TwoWire::begin()+0x64>)
	port->MCR = 0;
60001816:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001818:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
6000181a:	2201      	movs	r2, #1
6000181c:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000181e:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
60001820:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
60001824:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
60001826:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
6000182a:	6c9e      	ldr	r6, [r3, #72]	; 0x48
6000182c:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
6000182e:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
60001830:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
60001832:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
60001834:	7e01      	ldrb	r1, [r0, #24]
60001836:	f7ff ff4f 	bl	600016d8 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
6000183a:	7e61      	ldrb	r1, [r4, #25]
6000183c:	4620      	mov	r0, r4
}
6000183e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
60001842:	f7ff bf8d 	b.w	60001760 <TwoWire::configSCLpin(unsigned char)>
60001846:	bf00      	nop
60001848:	400fc000 	.word	0x400fc000
6000184c:	05050bb8 	.word	0x05050bb8
60001850:	1928373b 	.word	0x1928373b

60001854 <CrashReportClass::clear()>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001854:	4b20      	ldr	r3, [pc, #128]	; (600018d8 <CrashReportClass::clear()+0x84>)
60001856:	2000      	movs	r0, #0
{
60001858:	b430      	push	{r4, r5}
	info->ipsr  = 0;
6000185a:	e9c3 0020 	strd	r0, r0, [r3, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
6000185e:	e9c3 0022 	strd	r0, r0, [r3, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001862:	e9c3 0024 	strd	r0, r0, [r3, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001866:	e9c3 0026 	strd	r0, r0, [r3, #152]	; 0x98
	info->crc = 0;
6000186a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000186e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001872:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001876:	4919      	ldr	r1, [pc, #100]	; (600018dc <CrashReportClass::clear()+0x88>)
60001878:	4a19      	ldr	r2, [pc, #100]	; (600018e0 <CrashReportClass::clear()+0x8c>)
6000187a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
6000187e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001882:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001886:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000188a:	4b16      	ldr	r3, [pc, #88]	; (600018e4 <CrashReportClass::clear()+0x90>)
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
6000188c:	4601      	mov	r1, r0
  *(volatile uint32_t *)(&bc->bitmask) = 0;
6000188e:	4c16      	ldr	r4, [pc, #88]	; (600018e8 <CrashReportClass::clear()+0x94>)
60001890:	2201      	movs	r2, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001892:	689d      	ldr	r5, [r3, #8]
		while (len > 0) {
60001894:	f604 74dc 	addw	r4, r4, #4060	; 0xfdc
60001898:	609d      	str	r5, [r3, #8]
	SRC_GPR5 = 0;
6000189a:	6318      	str	r0, [r3, #48]	; 0x30
		volatile const uint16_t *p = (volatile const uint16_t *)data;
6000189c:	4b13      	ldr	r3, [pc, #76]	; (600018ec <CrashReportClass::clear()+0x98>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
6000189e:	f844 0c1c 	str.w	r0, [r4, #-28]
			a += *p++;
600018a2:	4618      	mov	r0, r3
600018a4:	3302      	adds	r3, #2
600018a6:	8800      	ldrh	r0, [r0, #0]
		while (len > 0) {
600018a8:	42a3      	cmp	r3, r4
			a += *p++;
600018aa:	fa12 f280 	uxtah	r2, r2, r0
			b += a;
600018ae:	4411      	add	r1, r2
		while (len > 0) {
600018b0:	d1f7      	bne.n	600018a2 <CrashReportClass::clear()+0x4e>
			len -= 2;
		}
		a = a & 65535;
600018b2:	b292      	uxth	r2, r2
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
600018b4:	4b0c      	ldr	r3, [pc, #48]	; (600018e8 <CrashReportClass::clear()+0x94>)
		b = b & 65535;
		return a | (b << 16);
600018b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
600018ba:	f8c3 2fdc 	str.w	r2, [r3, #4060]	; 0xfdc
	asm("dsb");
600018be:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
600018c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018c6:	4a09      	ldr	r2, [pc, #36]	; (600018ec <CrashReportClass::clear()+0x98>)
600018c8:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
	asm("dsb");
600018cc:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018d0:	f3bf 8f6f 	isb	sy
}
600018d4:	bc30      	pop	{r4, r5}
600018d6:	4770      	bx	lr
600018d8:	2027ff00 	.word	0x2027ff00
600018dc:	2027ff80 	.word	0x2027ff80
600018e0:	2027ffa0 	.word	0x2027ffa0
600018e4:	400f8000 	.word	0x400f8000
600018e8:	2027f000 	.word	0x2027f000
600018ec:	2027ffc0 	.word	0x2027ffc0

600018f0 <CrashReportClass::printTo(Print&) const>:
	if (info->len != sizeof(*info) / 4) return 0;
600018f0:	4bb2      	ldr	r3, [pc, #712]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x2cc>)
600018f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
600018f6:	2a0b      	cmp	r2, #11
{
600018f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
600018fc:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
600018fe:	d11b      	bne.n	60001938 <CrashReportClass::printTo(Print&) const+0x48>
	crc = 0xFFFFFFFF;
60001900:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001904:	49ae      	ldr	r1, [pc, #696]	; (60001bc0 <CrashReportClass::printTo(Print&) const+0x2d0>)
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001906:	4baf      	ldr	r3, [pc, #700]	; (60001bc4 <CrashReportClass::printTo(Print&) const+0x2d4>)
	while (data < end) {
60001908:	4eaf      	ldr	r6, [pc, #700]	; (60001bc8 <CrashReportClass::printTo(Print&) const+0x2d8>)
		crc ^= *data++;
6000190a:	f101 0c04 	add.w	ip, r1, #4
6000190e:	4050      	eors	r0, r2
60001910:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001912:	f000 0201 	and.w	r2, r0, #1
60001916:	3c01      	subs	r4, #1
60001918:	fb03 f202 	mul.w	r2, r3, r2
6000191c:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
60001920:	d1f7      	bne.n	60001912 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60001922:	45b4      	cmp	ip, r6
60001924:	d002      	beq.n	6000192c <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
60001926:	684a      	ldr	r2, [r1, #4]
60001928:	4661      	mov	r1, ip
6000192a:	e7ee      	b.n	6000190a <CrashReportClass::printTo(Print&) const+0x1a>
	if (crc != info->crc) return 0;
6000192c:	f8df 828c 	ldr.w	r8, [pc, #652]	; 60001bbc <CrashReportClass::printTo(Print&) const+0x2cc>
60001930:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001934:	4298      	cmp	r0, r3
60001936:	d079      	beq.n	60001a2c <CrashReportClass::printTo(Print&) const+0x13c>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001938:	682b      	ldr	r3, [r5, #0]
6000193a:	2217      	movs	r2, #23
6000193c:	49a3      	ldr	r1, [pc, #652]	; (60001bcc <CrashReportClass::printTo(Print&) const+0x2dc>)
6000193e:	4628      	mov	r0, r5
60001940:	685b      	ldr	r3, [r3, #4]
60001942:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001944:	4628      	mov	r0, r5
60001946:	f000 ff87 	bl	60002858 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000194a:	682b      	ldr	r3, [r5, #0]
6000194c:	2248      	movs	r2, #72	; 0x48
6000194e:	49a0      	ldr	r1, [pc, #640]	; (60001bd0 <CrashReportClass::printTo(Print&) const+0x2e0>)
60001950:	685b      	ldr	r3, [r3, #4]
60001952:	4628      	mov	r0, r5
60001954:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001956:	4628      	mov	r0, r5
60001958:	f000 ff7e 	bl	60002858 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000195c:	682b      	ldr	r3, [r5, #0]
6000195e:	2249      	movs	r2, #73	; 0x49
60001960:	499c      	ldr	r1, [pc, #624]	; (60001bd4 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001962:	685b      	ldr	r3, [r3, #4]
60001964:	4628      	mov	r0, r5
60001966:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001968:	4628      	mov	r0, r5
6000196a:	f000 ff75 	bl	60002858 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000196e:	682b      	ldr	r3, [r5, #0]
60001970:	2224      	movs	r2, #36	; 0x24
60001972:	4999      	ldr	r1, [pc, #612]	; (60001bd8 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001974:	685b      	ldr	r3, [r3, #4]
60001976:	4628      	mov	r0, r5
60001978:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000197a:	4628      	mov	r0, r5
6000197c:	f000 ff6c 	bl	60002858 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001980:	682b      	ldr	r3, [r5, #0]
60001982:	2247      	movs	r2, #71	; 0x47
60001984:	4995      	ldr	r1, [pc, #596]	; (60001bdc <CrashReportClass::printTo(Print&) const+0x2ec>)
60001986:	685b      	ldr	r3, [r3, #4]
60001988:	4628      	mov	r0, r5
6000198a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000198c:	4628      	mov	r0, r5
6000198e:	f000 ff63 	bl	60002858 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001992:	682b      	ldr	r3, [r5, #0]
60001994:	223f      	movs	r2, #63	; 0x3f
60001996:	4992      	ldr	r1, [pc, #584]	; (60001be0 <CrashReportClass::printTo(Print&) const+0x2f0>)
60001998:	685b      	ldr	r3, [r3, #4]
6000199a:	4628      	mov	r0, r5
6000199c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000199e:	4628      	mov	r0, r5
600019a0:	f000 ff5a 	bl	60002858 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
600019a4:	4b8f      	ldr	r3, [pc, #572]	; (60001be4 <CrashReportClass::printTo(Print&) const+0x2f4>)
600019a6:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600019a8:	07a2      	lsls	r2, r4, #30
600019aa:	d50d      	bpl.n	600019c8 <CrashReportClass::printTo(Print&) const+0xd8>
    uint32_t gpr5 = SRC_GPR5;
600019ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
600019ae:	4b8e      	ldr	r3, [pc, #568]	; (60001be8 <CrashReportClass::printTo(Print&) const+0x2f8>)
600019b0:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
600019b2:	682b      	ldr	r3, [r5, #0]
600019b4:	f000 8174 	beq.w	60001ca0 <CrashReportClass::printTo(Print&) const+0x3b0>
600019b8:	2240      	movs	r2, #64	; 0x40
600019ba:	498c      	ldr	r1, [pc, #560]	; (60001bec <CrashReportClass::printTo(Print&) const+0x2fc>)
600019bc:	685b      	ldr	r3, [r3, #4]
600019be:	4628      	mov	r0, r5
600019c0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019c2:	4628      	mov	r0, r5
600019c4:	f000 ff48 	bl	60002858 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600019c8:	0767      	lsls	r7, r4, #29
600019ca:	f100 815f 	bmi.w	60001c8c <CrashReportClass::printTo(Print&) const+0x39c>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600019ce:	0726      	lsls	r6, r4, #28
600019d0:	f100 8152 	bmi.w	60001c78 <CrashReportClass::printTo(Print&) const+0x388>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
600019d4:	06e0      	lsls	r0, r4, #27
600019d6:	f100 8145 	bmi.w	60001c64 <CrashReportClass::printTo(Print&) const+0x374>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
600019da:	06a1      	lsls	r1, r4, #26
600019dc:	f100 8138 	bmi.w	60001c50 <CrashReportClass::printTo(Print&) const+0x360>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
600019e0:	0662      	lsls	r2, r4, #25
600019e2:	f100 812b 	bmi.w	60001c3c <CrashReportClass::printTo(Print&) const+0x34c>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
600019e6:	0623      	lsls	r3, r4, #24
600019e8:	f100 80dd 	bmi.w	60001ba6 <CrashReportClass::printTo(Print&) const+0x2b6>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
600019ec:	f414 7480 	ands.w	r4, r4, #256	; 0x100
600019f0:	f040 80ad 	bne.w	60001b4e <CrashReportClass::printTo(Print&) const+0x25e>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
600019f4:	4b71      	ldr	r3, [pc, #452]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x2cc>)
600019f6:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
600019fa:	b196      	cbz	r6, 60001a22 <CrashReportClass::printTo(Print&) const+0x132>
600019fc:	f8d3 70dc 	ldr.w	r7, [r3, #220]	; 0xdc
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60001a00:	2201      	movs	r2, #1
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60001a02:	33c0      	adds	r3, #192	; 0xc0
		while (len > 0) {
60001a04:	487a      	ldr	r0, [pc, #488]	; (60001bf0 <CrashReportClass::printTo(Print&) const+0x300>)
			a += *p++;
60001a06:	4619      	mov	r1, r3
60001a08:	3302      	adds	r3, #2
60001a0a:	8809      	ldrh	r1, [r1, #0]
		while (len > 0) {
60001a0c:	4283      	cmp	r3, r0
			a += *p++;
60001a0e:	fa12 f281 	uxtah	r2, r2, r1
			b += a;
60001a12:	4414      	add	r4, r2
		while (len > 0) {
60001a14:	d1f7      	bne.n	60001a06 <CrashReportClass::printTo(Print&) const+0x116>
		a = a & 65535;
60001a16:	b293      	uxth	r3, r2
		return a | (b << 16);
60001a18:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
60001a1c:	429f      	cmp	r7, r3
60001a1e:	f000 817c 	beq.w	60001d1a <CrashReportClass::printTo(Print&) const+0x42a>
  clear();
60001a22:	f7ff ff17 	bl	60001854 <CrashReportClass::clear()>
}
60001a26:	2001      	movs	r0, #1
60001a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							  return write((const uint8_t *)str, strlen(str)); }
60001a2c:	682b      	ldr	r3, [r5, #0]
60001a2e:	220c      	movs	r2, #12
60001a30:	4970      	ldr	r1, [pc, #448]	; (60001bf4 <CrashReportClass::printTo(Print&) const+0x304>)
60001a32:	4628      	mov	r0, r5
60001a34:	685b      	ldr	r3, [r3, #4]
60001a36:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a38:	4628      	mov	r0, r5
60001a3a:	f000 ff0d 	bl	60002858 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a3e:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
60001a40:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
60001a44:	4628      	mov	r0, r5
    info->time /= 60;
60001a46:	4b6c      	ldr	r3, [pc, #432]	; (60001bf8 <CrashReportClass::printTo(Print&) const+0x308>)
60001a48:	f8d2 a004 	ldr.w	sl, [r2, #4]
60001a4c:	fba3 2709 	umull	r2, r7, r3, r9
60001a50:	496a      	ldr	r1, [pc, #424]	; (60001bfc <CrashReportClass::printTo(Print&) const+0x30c>)
60001a52:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
60001a54:	fba3 2307 	umull	r2, r3, r3, r7
60001a58:	2226      	movs	r2, #38	; 0x26
60001a5a:	095e      	lsrs	r6, r3, #5
60001a5c:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
60001a60:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
60001a62:	4967      	ldr	r1, [pc, #412]	; (60001c00 <CrashReportClass::printTo(Print&) const+0x310>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a64:	220a      	movs	r2, #10
60001a66:	4628      	mov	r0, r5
60001a68:	fba1 3106 	umull	r3, r1, r1, r6
60001a6c:	4623      	mov	r3, r4
60001a6e:	0909      	lsrs	r1, r1, #4
60001a70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
60001a74:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
60001a78:	f000 feda 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a7c:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
60001a7e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
60001a82:	2201      	movs	r2, #1
60001a84:	685b      	ldr	r3, [r3, #4]
60001a86:	4628      	mov	r0, r5
60001a88:	495e      	ldr	r1, [pc, #376]	; (60001c04 <CrashReportClass::printTo(Print&) const+0x314>)
60001a8a:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a8c:	4623      	mov	r3, r4
60001a8e:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
60001a92:	220a      	movs	r2, #10
60001a94:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
60001a96:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
60001a9a:	f000 fec9 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a9e:	682b      	ldr	r3, [r5, #0]
60001aa0:	2201      	movs	r2, #1
60001aa2:	4958      	ldr	r1, [pc, #352]	; (60001c04 <CrashReportClass::printTo(Print&) const+0x314>)
60001aa4:	685b      	ldr	r3, [r3, #4]
60001aa6:	4628      	mov	r0, r5
60001aa8:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001aaa:	4623      	mov	r3, r4
60001aac:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
60001ab0:	220a      	movs	r2, #10
60001ab2:	4628      	mov	r0, r5
60001ab4:	f000 febc 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001ab8:	4628      	mov	r0, r5
60001aba:	f000 fecd 	bl	60002858 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001abe:	682b      	ldr	r3, [r5, #0]
60001ac0:	2224      	movs	r2, #36	; 0x24
60001ac2:	4951      	ldr	r1, [pc, #324]	; (60001c08 <CrashReportClass::printTo(Print&) const+0x318>)
60001ac4:	685b      	ldr	r3, [r3, #4]
60001ac6:	4628      	mov	r0, r5
60001ac8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001aca:	4623      	mov	r3, r4
60001acc:	2210      	movs	r2, #16
60001ace:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
60001ad2:	4628      	mov	r0, r5
60001ad4:	f000 feac 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001ad8:	4628      	mov	r0, r5
60001ada:	f000 febd 	bl	60002858 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
60001ade:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60001ae2:	2e00      	cmp	r6, #0
60001ae4:	f040 80df 	bne.w	60001ca6 <CrashReportClass::printTo(Print&) const+0x3b6>
    uint32_t _HFSR = info->hfsr;
60001ae8:	4e34      	ldr	r6, [pc, #208]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x2cc>)
60001aea:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001aee:	2c00      	cmp	r4, #0
60001af0:	f040 80fa 	bne.w	60001ce8 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001af4:	682b      	ldr	r3, [r5, #0]
60001af6:	2222      	movs	r2, #34	; 0x22
60001af8:	4944      	ldr	r1, [pc, #272]	; (60001c0c <CrashReportClass::printTo(Print&) const+0x31c>)
60001afa:	4628      	mov	r0, r5
60001afc:	685b      	ldr	r3, [r3, #4]
60001afe:	4798      	blx	r3
    p.print(info->temp);
60001b00:	4b2e      	ldr	r3, [pc, #184]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x2cc>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001b02:	2102      	movs	r1, #2
60001b04:	4628      	mov	r0, r5
60001b06:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001b0a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
60001b0e:	f000 fe97 	bl	60002840 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b12:	682b      	ldr	r3, [r5, #0]
60001b14:	2205      	movs	r2, #5
60001b16:	493e      	ldr	r1, [pc, #248]	; (60001c10 <CrashReportClass::printTo(Print&) const+0x320>)
60001b18:	685b      	ldr	r3, [r3, #4]
60001b1a:	4628      	mov	r0, r5
60001b1c:	4798      	blx	r3
60001b1e:	682b      	ldr	r3, [r5, #0]
60001b20:	221d      	movs	r2, #29
60001b22:	493c      	ldr	r1, [pc, #240]	; (60001c14 <CrashReportClass::printTo(Print&) const+0x324>)
60001b24:	685b      	ldr	r3, [r3, #4]
60001b26:	4628      	mov	r0, r5
60001b28:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001b2a:	4a3b      	ldr	r2, [pc, #236]	; (60001c18 <CrashReportClass::printTo(Print&) const+0x328>)
60001b2c:	483b      	ldr	r0, [pc, #236]	; (60001c1c <CrashReportClass::printTo(Print&) const+0x32c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001b2e:	2300      	movs	r3, #0
60001b30:	6811      	ldr	r1, [r2, #0]
60001b32:	220a      	movs	r2, #10
60001b34:	fba0 0101 	umull	r0, r1, r0, r1
60001b38:	4628      	mov	r0, r5
60001b3a:	0c89      	lsrs	r1, r1, #18
60001b3c:	f000 fe78 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b40:	682b      	ldr	r3, [r5, #0]
60001b42:	2204      	movs	r2, #4
60001b44:	4936      	ldr	r1, [pc, #216]	; (60001c20 <CrashReportClass::printTo(Print&) const+0x330>)
60001b46:	685b      	ldr	r3, [r3, #4]
60001b48:	4628      	mov	r0, r5
60001b4a:	4798      	blx	r3
60001b4c:	e72a      	b.n	600019a4 <CrashReportClass::printTo(Print&) const+0xb4>
60001b4e:	682b      	ldr	r3, [r5, #0]
60001b50:	2229      	movs	r2, #41	; 0x29
60001b52:	4934      	ldr	r1, [pc, #208]	; (60001c24 <CrashReportClass::printTo(Print&) const+0x334>)
60001b54:	4628      	mov	r0, r5
60001b56:	685b      	ldr	r3, [r3, #4]
60001b58:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b5a:	4628      	mov	r0, r5
60001b5c:	f000 fe7c 	bl	60002858 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001b60:	4920      	ldr	r1, [pc, #128]	; (60001be4 <CrashReportClass::printTo(Print&) const+0x2f4>)
							  return write((const uint8_t *)str, strlen(str)); }
60001b62:	6828      	ldr	r0, [r5, #0]
60001b64:	2221      	movs	r2, #33	; 0x21
60001b66:	688b      	ldr	r3, [r1, #8]
60001b68:	6844      	ldr	r4, [r0, #4]
60001b6a:	4628      	mov	r0, r5
60001b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
60001b70:	608b      	str	r3, [r1, #8]
60001b72:	492d      	ldr	r1, [pc, #180]	; (60001c28 <CrashReportClass::printTo(Print&) const+0x338>)
60001b74:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
60001b76:	4628      	mov	r0, r5
60001b78:	f000 fe6e 	bl	60002858 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b7c:	682b      	ldr	r3, [r5, #0]
60001b7e:	2242      	movs	r2, #66	; 0x42
60001b80:	492a      	ldr	r1, [pc, #168]	; (60001c2c <CrashReportClass::printTo(Print&) const+0x33c>)
60001b82:	685b      	ldr	r3, [r3, #4]
60001b84:	4628      	mov	r0, r5
60001b86:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b88:	4628      	mov	r0, r5
60001b8a:	f000 fe65 	bl	60002858 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001b8e:	4a28      	ldr	r2, [pc, #160]	; (60001c30 <CrashReportClass::printTo(Print&) const+0x340>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001b90:	4b28      	ldr	r3, [pc, #160]	; (60001c34 <CrashReportClass::printTo(Print&) const+0x344>)
60001b92:	2107      	movs	r1, #7
60001b94:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001b96:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001b9c:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001b9e:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001ba2:	bf30      	wfi
60001ba4:	e7fd      	b.n	60001ba2 <CrashReportClass::printTo(Print&) const+0x2b2>
							  return write((const uint8_t *)str, strlen(str)); }
60001ba6:	682b      	ldr	r3, [r5, #0]
60001ba8:	2221      	movs	r2, #33	; 0x21
60001baa:	4923      	ldr	r1, [pc, #140]	; (60001c38 <CrashReportClass::printTo(Print&) const+0x348>)
60001bac:	4628      	mov	r0, r5
60001bae:	685b      	ldr	r3, [r3, #4]
60001bb0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bb2:	4628      	mov	r0, r5
60001bb4:	f000 fe50 	bl	60002858 <___ZN5Print7printlnEv_veneer>
60001bb8:	e718      	b.n	600019ec <CrashReportClass::printTo(Print&) const+0xfc>
60001bba:	bf00      	nop
60001bbc:	2027ff00 	.word	0x2027ff00
60001bc0:	2027ff80 	.word	0x2027ff80
60001bc4:	edb88320 	.word	0xedb88320
60001bc8:	2027ffa8 	.word	0x2027ffa8
60001bcc:	200084d0 	.word	0x200084d0
60001bd0:	200084e8 	.word	0x200084e8
60001bd4:	20008534 	.word	0x20008534
60001bd8:	20008580 	.word	0x20008580
60001bdc:	200085a8 	.word	0x200085a8
60001be0:	200085f0 	.word	0x200085f0
60001be4:	400f8000 	.word	0x400f8000
60001be8:	0bad00f1 	.word	0x0bad00f1
60001bec:	2000867c 	.word	0x2000867c
60001bf0:	2027ffdc 	.word	0x2027ffdc
60001bf4:	20007fb8 	.word	0x20007fb8
60001bf8:	88888889 	.word	0x88888889
60001bfc:	20007fc8 	.word	0x20007fc8
60001c00:	aaaaaaab 	.word	0xaaaaaaab
60001c04:	20007ff0 	.word	0x20007ff0
60001c08:	20007ff4 	.word	0x20007ff4
60001c0c:	2000847c 	.word	0x2000847c
60001c10:	200084a0 	.word	0x200084a0
60001c14:	200084a8 	.word	0x200084a8
60001c18:	20008a68 	.word	0x20008a68
60001c1c:	431bde83 	.word	0x431bde83
60001c20:	200084c8 	.word	0x200084c8
60001c24:	200087b0 	.word	0x200087b0
60001c28:	200087dc 	.word	0x200087dc
60001c2c:	20008800 	.word	0x20008800
60001c30:	400d4000 	.word	0x400d4000
60001c34:	400ac000 	.word	0x400ac000
60001c38:	2000878c 	.word	0x2000878c
							  return write((const uint8_t *)str, strlen(str)); }
60001c3c:	682b      	ldr	r3, [r5, #0]
60001c3e:	2221      	movs	r2, #33	; 0x21
60001c40:	499c      	ldr	r1, [pc, #624]	; (60001eb4 <CrashReportClass::printTo(Print&) const+0x5c4>)
60001c42:	4628      	mov	r0, r5
60001c44:	685b      	ldr	r3, [r3, #4]
60001c46:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c48:	4628      	mov	r0, r5
60001c4a:	f000 fe05 	bl	60002858 <___ZN5Print7printlnEv_veneer>
60001c4e:	e6ca      	b.n	600019e6 <CrashReportClass::printTo(Print&) const+0xf6>
							  return write((const uint8_t *)str, strlen(str)); }
60001c50:	682b      	ldr	r3, [r5, #0]
60001c52:	2229      	movs	r2, #41	; 0x29
60001c54:	4998      	ldr	r1, [pc, #608]	; (60001eb8 <CrashReportClass::printTo(Print&) const+0x5c8>)
60001c56:	4628      	mov	r0, r5
60001c58:	685b      	ldr	r3, [r3, #4]
60001c5a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c5c:	4628      	mov	r0, r5
60001c5e:	f000 fdfb 	bl	60002858 <___ZN5Print7printlnEv_veneer>
60001c62:	e6bd      	b.n	600019e0 <CrashReportClass::printTo(Print&) const+0xf0>
							  return write((const uint8_t *)str, strlen(str)); }
60001c64:	682b      	ldr	r3, [r5, #0]
60001c66:	2226      	movs	r2, #38	; 0x26
60001c68:	4994      	ldr	r1, [pc, #592]	; (60001ebc <CrashReportClass::printTo(Print&) const+0x5cc>)
60001c6a:	4628      	mov	r0, r5
60001c6c:	685b      	ldr	r3, [r3, #4]
60001c6e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c70:	4628      	mov	r0, r5
60001c72:	f000 fdf1 	bl	60002858 <___ZN5Print7printlnEv_veneer>
60001c76:	e6b0      	b.n	600019da <CrashReportClass::printTo(Print&) const+0xea>
							  return write((const uint8_t *)str, strlen(str)); }
60001c78:	682b      	ldr	r3, [r5, #0]
60001c7a:	222a      	movs	r2, #42	; 0x2a
60001c7c:	4990      	ldr	r1, [pc, #576]	; (60001ec0 <CrashReportClass::printTo(Print&) const+0x5d0>)
60001c7e:	4628      	mov	r0, r5
60001c80:	685b      	ldr	r3, [r3, #4]
60001c82:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c84:	4628      	mov	r0, r5
60001c86:	f000 fde7 	bl	60002858 <___ZN5Print7printlnEv_veneer>
60001c8a:	e6a3      	b.n	600019d4 <CrashReportClass::printTo(Print&) const+0xe4>
							  return write((const uint8_t *)str, strlen(str)); }
60001c8c:	682b      	ldr	r3, [r5, #0]
60001c8e:	2227      	movs	r2, #39	; 0x27
60001c90:	498c      	ldr	r1, [pc, #560]	; (60001ec4 <CrashReportClass::printTo(Print&) const+0x5d4>)
60001c92:	4628      	mov	r0, r5
60001c94:	685b      	ldr	r3, [r3, #4]
60001c96:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c98:	4628      	mov	r0, r5
60001c9a:	f000 fddd 	bl	60002858 <___ZN5Print7printlnEv_veneer>
60001c9e:	e696      	b.n	600019ce <CrashReportClass::printTo(Print&) const+0xde>
							  return write((const uint8_t *)str, strlen(str)); }
60001ca0:	2248      	movs	r2, #72	; 0x48
60001ca2:	4989      	ldr	r1, [pc, #548]	; (60001ec8 <CrashReportClass::printTo(Print&) const+0x5d8>)
60001ca4:	e68a      	b.n	600019bc <CrashReportClass::printTo(Print&) const+0xcc>
60001ca6:	682b      	ldr	r3, [r5, #0]
60001ca8:	2208      	movs	r2, #8
60001caa:	4988      	ldr	r1, [pc, #544]	; (60001ecc <CrashReportClass::printTo(Print&) const+0x5dc>)
60001cac:	4628      	mov	r0, r5
60001cae:	685b      	ldr	r3, [r3, #4]
60001cb0:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cb2:	4623      	mov	r3, r4
60001cb4:	2210      	movs	r2, #16
60001cb6:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001cba:	4628      	mov	r0, r5
60001cbc:	f000 fdb8 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001cc0:	4628      	mov	r0, r5
60001cc2:	f000 fdc9 	bl	60002858 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001cc6:	07f4      	lsls	r4, r6, #31
60001cc8:	d469      	bmi.n	60001d9e <CrashReportClass::printTo(Print&) const+0x4ae>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001cca:	07b0      	lsls	r0, r6, #30
60001ccc:	f100 8153 	bmi.w	60001f76 <CrashReportClass::printTo(Print&) const+0x686>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001cd0:	0731      	lsls	r1, r6, #28
60001cd2:	f100 8144 	bmi.w	60001f5e <CrashReportClass::printTo(Print&) const+0x66e>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001cd6:	06f2      	lsls	r2, r6, #27
60001cd8:	f100 815d 	bmi.w	60001f96 <CrashReportClass::printTo(Print&) const+0x6a6>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001cdc:	06b3      	lsls	r3, r6, #26
60001cde:	d567      	bpl.n	60001db0 <CrashReportClass::printTo(Print&) const+0x4c0>
							  return write((const uint8_t *)str, strlen(str)); }
60001ce0:	682b      	ldr	r3, [r5, #0]
60001ce2:	222a      	movs	r2, #42	; 0x2a
60001ce4:	497a      	ldr	r1, [pc, #488]	; (60001ed0 <CrashReportClass::printTo(Print&) const+0x5e0>)
60001ce6:	e05d      	b.n	60001da4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001ce8:	682b      	ldr	r3, [r5, #0]
60001cea:	2208      	movs	r2, #8
60001cec:	4979      	ldr	r1, [pc, #484]	; (60001ed4 <CrashReportClass::printTo(Print&) const+0x5e4>)
60001cee:	4628      	mov	r0, r5
60001cf0:	685b      	ldr	r3, [r3, #4]
60001cf2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cf4:	2300      	movs	r3, #0
60001cf6:	2210      	movs	r2, #16
60001cf8:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001cfc:	4628      	mov	r0, r5
60001cfe:	f000 fd97 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001d02:	4628      	mov	r0, r5
60001d04:	f000 fda8 	bl	60002858 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001d08:	07a0      	lsls	r0, r4, #30
60001d0a:	d467      	bmi.n	60001ddc <CrashReportClass::printTo(Print&) const+0x4ec>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001d0c:	0061      	lsls	r1, r4, #1
60001d0e:	f57f aef1 	bpl.w	60001af4 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001d12:	682b      	ldr	r3, [r5, #0]
60001d14:	221b      	movs	r2, #27
60001d16:	4970      	ldr	r1, [pc, #448]	; (60001ed8 <CrashReportClass::printTo(Print&) const+0x5e8>)
60001d18:	e063      	b.n	60001de2 <CrashReportClass::printTo(Print&) const+0x4f2>
60001d1a:	2401      	movs	r4, #1
60001d1c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 60001f14 <CrashReportClass::printTo(Print&) const+0x624>
60001d20:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 60001f18 <CrashReportClass::printTo(Print&) const+0x628>
      if (bc->bitmask & (1 << i)) {
60001d24:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 60001efc <CrashReportClass::printTo(Print&) const+0x60c>
60001d28:	e005      	b.n	60001d36 <CrashReportClass::printTo(Print&) const+0x446>
    for (int i=0; i < 6; i++) {
60001d2a:	3401      	adds	r4, #1
60001d2c:	2c07      	cmp	r4, #7
60001d2e:	f43f ae78 	beq.w	60001a22 <CrashReportClass::printTo(Print&) const+0x132>
      if (bc->bitmask & (1 << i)) {
60001d32:	f8d8 60c0 	ldr.w	r6, [r8, #192]	; 0xc0
60001d36:	1e63      	subs	r3, r4, #1
60001d38:	2701      	movs	r7, #1
60001d3a:	fa07 f203 	lsl.w	r2, r7, r3
60001d3e:	4232      	tst	r2, r6
60001d40:	d0f3      	beq.n	60001d2a <CrashReportClass::printTo(Print&) const+0x43a>
60001d42:	eb09 0683 	add.w	r6, r9, r3, lsl #2
60001d46:	682b      	ldr	r3, [r5, #0]
60001d48:	220e      	movs	r2, #14
60001d4a:	4651      	mov	r1, sl
60001d4c:	685b      	ldr	r3, [r3, #4]
60001d4e:	4628      	mov	r0, r5
60001d50:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001d52:	4621      	mov	r1, r4
60001d54:	4628      	mov	r0, r5
60001d56:	f000 fd6f 	bl	60002838 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d5a:	682b      	ldr	r3, [r5, #0]
60001d5c:	2205      	movs	r2, #5
60001d5e:	495f      	ldr	r1, [pc, #380]	; (60001edc <CrashReportClass::printTo(Print&) const+0x5ec>)
60001d60:	685b      	ldr	r3, [r3, #4]
60001d62:	4628      	mov	r0, r5
60001d64:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001d66:	6871      	ldr	r1, [r6, #4]
60001d68:	2300      	movs	r3, #0
60001d6a:	220a      	movs	r2, #10
60001d6c:	4628      	mov	r0, r5
60001d6e:	f000 fd5f 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d72:	682b      	ldr	r3, [r5, #0]
60001d74:	2204      	movs	r2, #4
60001d76:	495a      	ldr	r1, [pc, #360]	; (60001ee0 <CrashReportClass::printTo(Print&) const+0x5f0>)
60001d78:	685b      	ldr	r3, [r3, #4]
60001d7a:	4628      	mov	r0, r5
60001d7c:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d7e:	6871      	ldr	r1, [r6, #4]
60001d80:	2300      	movs	r3, #0
60001d82:	2210      	movs	r2, #16
60001d84:	4628      	mov	r0, r5
60001d86:	f000 fd53 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d8a:	682b      	ldr	r3, [r5, #0]
60001d8c:	463a      	mov	r2, r7
60001d8e:	4955      	ldr	r1, [pc, #340]	; (60001ee4 <CrashReportClass::printTo(Print&) const+0x5f4>)
60001d90:	685b      	ldr	r3, [r3, #4]
60001d92:	4628      	mov	r0, r5
60001d94:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d96:	4628      	mov	r0, r5
60001d98:	f000 fd5e 	bl	60002858 <___ZN5Print7printlnEv_veneer>
60001d9c:	e7c5      	b.n	60001d2a <CrashReportClass::printTo(Print&) const+0x43a>
							  return write((const uint8_t *)str, strlen(str)); }
60001d9e:	682b      	ldr	r3, [r5, #0]
60001da0:	2228      	movs	r2, #40	; 0x28
60001da2:	4951      	ldr	r1, [pc, #324]	; (60001ee8 <CrashReportClass::printTo(Print&) const+0x5f8>)
60001da4:	685b      	ldr	r3, [r3, #4]
60001da6:	4628      	mov	r0, r5
60001da8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001daa:	4628      	mov	r0, r5
60001dac:	f000 fd54 	bl	60002858 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001db0:	0637      	lsls	r7, r6, #24
60001db2:	d43c      	bmi.n	60001e2e <CrashReportClass::printTo(Print&) const+0x53e>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001db4:	05f4      	lsls	r4, r6, #23
60001db6:	d41b      	bmi.n	60001df0 <CrashReportClass::printTo(Print&) const+0x500>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001db8:	05b0      	lsls	r0, r6, #22
60001dba:	f100 80d8 	bmi.w	60001f6e <CrashReportClass::printTo(Print&) const+0x67e>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001dbe:	0571      	lsls	r1, r6, #21
60001dc0:	f100 80d1 	bmi.w	60001f66 <CrashReportClass::printTo(Print&) const+0x676>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001dc4:	0532      	lsls	r2, r6, #20
60001dc6:	f100 80e2 	bmi.w	60001f8e <CrashReportClass::printTo(Print&) const+0x69e>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001dca:	04f3      	lsls	r3, r6, #19
60001dcc:	f100 80db 	bmi.w	60001f86 <CrashReportClass::printTo(Print&) const+0x696>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001dd0:	04b7      	lsls	r7, r6, #18
60001dd2:	d516      	bpl.n	60001e02 <CrashReportClass::printTo(Print&) const+0x512>
							  return write((const uint8_t *)str, strlen(str)); }
60001dd4:	682b      	ldr	r3, [r5, #0]
60001dd6:	2231      	movs	r2, #49	; 0x31
60001dd8:	4944      	ldr	r1, [pc, #272]	; (60001eec <CrashReportClass::printTo(Print&) const+0x5fc>)
60001dda:	e00c      	b.n	60001df6 <CrashReportClass::printTo(Print&) const+0x506>
60001ddc:	682b      	ldr	r3, [r5, #0]
60001dde:	2226      	movs	r2, #38	; 0x26
60001de0:	4943      	ldr	r1, [pc, #268]	; (60001ef0 <CrashReportClass::printTo(Print&) const+0x600>)
60001de2:	4628      	mov	r0, r5
60001de4:	685b      	ldr	r3, [r3, #4]
60001de6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001de8:	4628      	mov	r0, r5
60001dea:	f000 fd35 	bl	60002858 <___ZN5Print7printlnEv_veneer>
60001dee:	e681      	b.n	60001af4 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001df0:	682b      	ldr	r3, [r5, #0]
60001df2:	2220      	movs	r2, #32
60001df4:	493f      	ldr	r1, [pc, #252]	; (60001ef4 <CrashReportClass::printTo(Print&) const+0x604>)
60001df6:	685b      	ldr	r3, [r3, #4]
60001df8:	4628      	mov	r0, r5
60001dfa:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001dfc:	4628      	mov	r0, r5
60001dfe:	f000 fd2b 	bl	60002858 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001e02:	0434      	lsls	r4, r6, #16
60001e04:	d440      	bmi.n	60001e88 <CrashReportClass::printTo(Print&) const+0x598>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001e06:	03f0      	lsls	r0, r6, #15
60001e08:	d42e      	bmi.n	60001e68 <CrashReportClass::printTo(Print&) const+0x578>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001e0a:	03b1      	lsls	r1, r6, #14
60001e0c:	f100 80b7 	bmi.w	60001f7e <CrashReportClass::printTo(Print&) const+0x68e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001e10:	0372      	lsls	r2, r6, #13
60001e12:	d44b      	bmi.n	60001eac <CrashReportClass::printTo(Print&) const+0x5bc>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001e14:	0333      	lsls	r3, r6, #12
60001e16:	f100 80c6 	bmi.w	60001fa6 <CrashReportClass::printTo(Print&) const+0x6b6>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001e1a:	01f7      	lsls	r7, r6, #7
60001e1c:	f100 80bf 	bmi.w	60001f9e <CrashReportClass::printTo(Print&) const+0x6ae>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001e20:	01b4      	lsls	r4, r6, #6
60001e22:	f57f ae61 	bpl.w	60001ae8 <CrashReportClass::printTo(Print&) const+0x1f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001e26:	682b      	ldr	r3, [r5, #0]
60001e28:	221b      	movs	r2, #27
60001e2a:	4933      	ldr	r1, [pc, #204]	; (60001ef8 <CrashReportClass::printTo(Print&) const+0x608>)
60001e2c:	e01f      	b.n	60001e6e <CrashReportClass::printTo(Print&) const+0x57e>
60001e2e:	682b      	ldr	r3, [r5, #0]
60001e30:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001e32:	4c32      	ldr	r4, [pc, #200]	; (60001efc <CrashReportClass::printTo(Print&) const+0x60c>)
60001e34:	4628      	mov	r0, r5
60001e36:	4932      	ldr	r1, [pc, #200]	; (60001f00 <CrashReportClass::printTo(Print&) const+0x610>)
60001e38:	685b      	ldr	r3, [r3, #4]
60001e3a:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001e3c:	2210      	movs	r2, #16
60001e3e:	2300      	movs	r3, #0
60001e40:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001e44:	4628      	mov	r0, r5
60001e46:	f000 fcf3 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001e4a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001e4e:	2a1f      	cmp	r2, #31
60001e50:	d964      	bls.n	60001f1c <CrashReportClass::printTo(Print&) const+0x62c>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001e52:	4b2c      	ldr	r3, [pc, #176]	; (60001f04 <CrashReportClass::printTo(Print&) const+0x614>)
60001e54:	429a      	cmp	r2, r3
60001e56:	d303      	bcc.n	60001e60 <CrashReportClass::printTo(Print&) const+0x570>
60001e58:	3320      	adds	r3, #32
60001e5a:	429a      	cmp	r2, r3
60001e5c:	f0c0 80a7 	bcc.w	60001fae <CrashReportClass::printTo(Print&) const+0x6be>
        p.println();
60001e60:	4628      	mov	r0, r5
60001e62:	f000 fcf9 	bl	60002858 <___ZN5Print7printlnEv_veneer>
60001e66:	e7a5      	b.n	60001db4 <CrashReportClass::printTo(Print&) const+0x4c4>
							  return write((const uint8_t *)str, strlen(str)); }
60001e68:	682b      	ldr	r3, [r5, #0]
60001e6a:	2223      	movs	r2, #35	; 0x23
60001e6c:	4926      	ldr	r1, [pc, #152]	; (60001f08 <CrashReportClass::printTo(Print&) const+0x618>)
60001e6e:	685b      	ldr	r3, [r3, #4]
60001e70:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001e72:	4e22      	ldr	r6, [pc, #136]	; (60001efc <CrashReportClass::printTo(Print&) const+0x60c>)
60001e74:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e76:	4628      	mov	r0, r5
60001e78:	f000 fcee 	bl	60002858 <___ZN5Print7printlnEv_veneer>
60001e7c:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001e80:	2c00      	cmp	r4, #0
60001e82:	f43f ae37 	beq.w	60001af4 <CrashReportClass::printTo(Print&) const+0x204>
60001e86:	e72f      	b.n	60001ce8 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001e88:	682b      	ldr	r3, [r5, #0]
60001e8a:	2221      	movs	r2, #33	; 0x21
60001e8c:	491f      	ldr	r1, [pc, #124]	; (60001f0c <CrashReportClass::printTo(Print&) const+0x61c>)
60001e8e:	4628      	mov	r0, r5
60001e90:	685b      	ldr	r3, [r3, #4]
60001e92:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001e94:	4919      	ldr	r1, [pc, #100]	; (60001efc <CrashReportClass::printTo(Print&) const+0x60c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001e96:	2300      	movs	r3, #0
60001e98:	2210      	movs	r2, #16
60001e9a:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001e9e:	4628      	mov	r0, r5
60001ea0:	f000 fcc6 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001ea4:	4628      	mov	r0, r5
60001ea6:	f000 fcd7 	bl	60002858 <___ZN5Print7printlnEv_veneer>
60001eaa:	e7ac      	b.n	60001e06 <CrashReportClass::printTo(Print&) const+0x516>
							  return write((const uint8_t *)str, strlen(str)); }
60001eac:	682b      	ldr	r3, [r5, #0]
60001eae:	2228      	movs	r2, #40	; 0x28
60001eb0:	4917      	ldr	r1, [pc, #92]	; (60001f10 <CrashReportClass::printTo(Print&) const+0x620>)
60001eb2:	e7dc      	b.n	60001e6e <CrashReportClass::printTo(Print&) const+0x57e>
60001eb4:	20008768 	.word	0x20008768
60001eb8:	2000873c 	.word	0x2000873c
60001ebc:	20008714 	.word	0x20008714
60001ec0:	200086e8 	.word	0x200086e8
60001ec4:	200086c0 	.word	0x200086c0
60001ec8:	20008630 	.word	0x20008630
60001ecc:	2000801c 	.word	0x2000801c
60001ed0:	200080cc 	.word	0x200080cc
60001ed4:	2000842c 	.word	0x2000842c
60001ed8:	20008460 	.word	0x20008460
60001edc:	20008854 	.word	0x20008854
60001ee0:	2000885c 	.word	0x2000885c
60001ee4:	2000857c 	.word	0x2000857c
60001ee8:	20008028 	.word	0x20008028
60001eec:	200082f0 	.word	0x200082f0
60001ef0:	20008438 	.word	0x20008438
60001ef4:	200081e0 	.word	0x200081e0
60001ef8:	20008410 	.word	0x20008410
60001efc:	2027ff00 	.word	0x2027ff00
60001f00:	200080f8 	.word	0x200080f8
60001f04:	200160a0 	.word	0x200160a0
60001f08:	20008348 	.word	0x20008348
60001f0c:	20008324 	.word	0x20008324
60001f10:	200083a0 	.word	0x200083a0
60001f14:	20008844 	.word	0x20008844
60001f18:	2027ffc0 	.word	0x2027ffc0
60001f1c:	682b      	ldr	r3, [r5, #0]
60001f1e:	221e      	movs	r2, #30
60001f20:	4926      	ldr	r1, [pc, #152]	; (60001fbc <CrashReportClass::printTo(Print&) const+0x6cc>)
60001f22:	4628      	mov	r0, r5
60001f24:	685b      	ldr	r3, [r3, #4]
60001f26:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001f28:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001f2c:	2300      	movs	r3, #0
60001f2e:	2210      	movs	r2, #16
60001f30:	4628      	mov	r0, r5
60001f32:	f000 fc7d 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001f36:	682b      	ldr	r3, [r5, #0]
60001f38:	223e      	movs	r2, #62	; 0x3e
60001f3a:	4921      	ldr	r1, [pc, #132]	; (60001fc0 <CrashReportClass::printTo(Print&) const+0x6d0>)
60001f3c:	685b      	ldr	r3, [r3, #4]
60001f3e:	4628      	mov	r0, r5
60001f40:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001f42:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001f46:	2300      	movs	r3, #0
60001f48:	2210      	movs	r2, #16
60001f4a:	4628      	mov	r0, r5
60001f4c:	f000 fc70 	bl	60002830 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001f50:	682b      	ldr	r3, [r5, #0]
60001f52:	221d      	movs	r2, #29
60001f54:	491b      	ldr	r1, [pc, #108]	; (60001fc4 <CrashReportClass::printTo(Print&) const+0x6d4>)
60001f56:	685b      	ldr	r3, [r3, #4]
60001f58:	4628      	mov	r0, r5
60001f5a:	4798      	blx	r3
60001f5c:	e780      	b.n	60001e60 <CrashReportClass::printTo(Print&) const+0x570>
60001f5e:	682b      	ldr	r3, [r5, #0]
60001f60:	2229      	movs	r2, #41	; 0x29
60001f62:	4919      	ldr	r1, [pc, #100]	; (60001fc8 <CrashReportClass::printTo(Print&) const+0x6d8>)
60001f64:	e71e      	b.n	60001da4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f66:	682b      	ldr	r3, [r5, #0]
60001f68:	2244      	movs	r2, #68	; 0x44
60001f6a:	4918      	ldr	r1, [pc, #96]	; (60001fcc <CrashReportClass::printTo(Print&) const+0x6dc>)
60001f6c:	e743      	b.n	60001df6 <CrashReportClass::printTo(Print&) const+0x506>
60001f6e:	682b      	ldr	r3, [r5, #0]
60001f70:	222c      	movs	r2, #44	; 0x2c
60001f72:	4917      	ldr	r1, [pc, #92]	; (60001fd0 <CrashReportClass::printTo(Print&) const+0x6e0>)
60001f74:	e73f      	b.n	60001df6 <CrashReportClass::printTo(Print&) const+0x506>
60001f76:	682b      	ldr	r3, [r5, #0]
60001f78:	2221      	movs	r2, #33	; 0x21
60001f7a:	4916      	ldr	r1, [pc, #88]	; (60001fd4 <CrashReportClass::printTo(Print&) const+0x6e4>)
60001f7c:	e712      	b.n	60001da4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f7e:	682b      	ldr	r3, [r5, #0]
60001f80:	2232      	movs	r2, #50	; 0x32
60001f82:	4915      	ldr	r1, [pc, #84]	; (60001fd8 <CrashReportClass::printTo(Print&) const+0x6e8>)
60001f84:	e773      	b.n	60001e6e <CrashReportClass::printTo(Print&) const+0x57e>
60001f86:	682b      	ldr	r3, [r5, #0]
60001f88:	2233      	movs	r2, #51	; 0x33
60001f8a:	4914      	ldr	r1, [pc, #80]	; (60001fdc <CrashReportClass::printTo(Print&) const+0x6ec>)
60001f8c:	e733      	b.n	60001df6 <CrashReportClass::printTo(Print&) const+0x506>
60001f8e:	682b      	ldr	r3, [r5, #0]
60001f90:	223f      	movs	r2, #63	; 0x3f
60001f92:	4913      	ldr	r1, [pc, #76]	; (60001fe0 <CrashReportClass::printTo(Print&) const+0x6f0>)
60001f94:	e72f      	b.n	60001df6 <CrashReportClass::printTo(Print&) const+0x506>
60001f96:	682b      	ldr	r3, [r5, #0]
60001f98:	2225      	movs	r2, #37	; 0x25
60001f9a:	4912      	ldr	r1, [pc, #72]	; (60001fe4 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001f9c:	e702      	b.n	60001da4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f9e:	682b      	ldr	r3, [r5, #0]
60001fa0:	2228      	movs	r2, #40	; 0x28
60001fa2:	4911      	ldr	r1, [pc, #68]	; (60001fe8 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001fa4:	e763      	b.n	60001e6e <CrashReportClass::printTo(Print&) const+0x57e>
60001fa6:	682b      	ldr	r3, [r5, #0]
60001fa8:	2216      	movs	r2, #22
60001faa:	4910      	ldr	r1, [pc, #64]	; (60001fec <CrashReportClass::printTo(Print&) const+0x6fc>)
60001fac:	e75f      	b.n	60001e6e <CrashReportClass::printTo(Print&) const+0x57e>
60001fae:	682b      	ldr	r3, [r5, #0]
60001fb0:	2241      	movs	r2, #65	; 0x41
60001fb2:	490f      	ldr	r1, [pc, #60]	; (60001ff0 <CrashReportClass::printTo(Print&) const+0x700>)
60001fb4:	4628      	mov	r0, r5
60001fb6:	685b      	ldr	r3, [r3, #4]
60001fb8:	4798      	blx	r3
60001fba:	e751      	b.n	60001e60 <CrashReportClass::printTo(Print&) const+0x570>
60001fbc:	2000811c 	.word	0x2000811c
60001fc0:	2000813c 	.word	0x2000813c
60001fc4:	2000817c 	.word	0x2000817c
60001fc8:	20008078 	.word	0x20008078
60001fcc:	20008234 	.word	0x20008234
60001fd0:	20008204 	.word	0x20008204
60001fd4:	20008054 	.word	0x20008054
60001fd8:	2000836c 	.word	0x2000836c
60001fdc:	200082bc 	.word	0x200082bc
60001fe0:	2000827c 	.word	0x2000827c
60001fe4:	200080a4 	.word	0x200080a4
60001fe8:	200083e4 	.word	0x200083e4
60001fec:	200083cc 	.word	0x200083cc
60001ff0:	2000819c 	.word	0x2000819c

60001ff4 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001ff4:	4b12      	ldr	r3, [pc, #72]	; (60002040 <CrashReportClass::operator bool()+0x4c>)
60001ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001ffa:	2b0b      	cmp	r3, #11
60001ffc:	d11e      	bne.n	6000203c <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001ffe:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60002002:	4810      	ldr	r0, [pc, #64]	; (60002044 <CrashReportClass::operator bool()+0x50>)
{
60002004:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60002006:	4d10      	ldr	r5, [pc, #64]	; (60002048 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60002008:	4c10      	ldr	r4, [pc, #64]	; (6000204c <CrashReportClass::operator bool()+0x58>)
6000200a:	e001      	b.n	60002010 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
6000200c:	686b      	ldr	r3, [r5, #4]
6000200e:	4675      	mov	r5, lr
60002010:	f105 0e04 	add.w	lr, r5, #4
60002014:	405a      	eors	r2, r3
60002016:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60002018:	f002 0301 	and.w	r3, r2, #1
6000201c:	3901      	subs	r1, #1
6000201e:	fb00 f303 	mul.w	r3, r0, r3
60002022:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60002026:	d1f7      	bne.n	60002018 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60002028:	45a6      	cmp	lr, r4
6000202a:	d1ef      	bne.n	6000200c <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
6000202c:	4b04      	ldr	r3, [pc, #16]	; (60002040 <CrashReportClass::operator bool()+0x4c>)
6000202e:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60002032:	1a80      	subs	r0, r0, r2
60002034:	fab0 f080 	clz	r0, r0
60002038:	0940      	lsrs	r0, r0, #5
}
6000203a:	bd30      	pop	{r4, r5, pc}
	return false;
6000203c:	2000      	movs	r0, #0
}
6000203e:	4770      	bx	lr
60002040:	2027ff00 	.word	0x2027ff00
60002044:	edb88320 	.word	0xedb88320
60002048:	2027ff80 	.word	0x2027ff80
6000204c:	2027ffa8 	.word	0x2027ffa8

60002050 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60002050:	4770      	bx	lr
60002052:	bf00      	nop

60002054 <startup_default_middle_hook>:
60002054:	4770      	bx	lr
60002056:	bf00      	nop

60002058 <startup_default_late_hook>:
60002058:	4770      	bx	lr
6000205a:	bf00      	nop

6000205c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000205c:	bf00      	nop
6000205e:	4770      	bx	lr

60002060 <configure_cache>:
{
60002060:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60002062:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002066:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60002068:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000206a:	4831      	ldr	r0, [pc, #196]	; (60002130 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000206c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60002070:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60002074:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60002076:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000207a:	482e      	ldr	r0, [pc, #184]	; (60002134 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000207c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60002080:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60002082:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60002086:	482c      	ldr	r0, [pc, #176]	; (60002138 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60002088:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000208c:	4a2b      	ldr	r2, [pc, #172]	; (6000213c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000208e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60002092:	4c2b      	ldr	r4, [pc, #172]	; (60002140 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60002094:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60002098:	482a      	ldr	r0, [pc, #168]	; (60002144 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000209a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000209e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600020a2:	4c29      	ldr	r4, [pc, #164]	; (60002148 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600020a4:	4829      	ldr	r0, [pc, #164]	; (6000214c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600020a6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600020aa:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600020ae:	4c28      	ldr	r4, [pc, #160]	; (60002150 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600020b0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600020b4:	4827      	ldr	r0, [pc, #156]	; (60002154 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600020b6:	4a28      	ldr	r2, [pc, #160]	; (60002158 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600020b8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600020bc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600020c0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600020c4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600020c8:	4c24      	ldr	r4, [pc, #144]	; (6000215c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600020ca:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600020cc:	4824      	ldr	r0, [pc, #144]	; (60002160 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600020ce:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600020d2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600020d6:	4a23      	ldr	r2, [pc, #140]	; (60002164 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600020d8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600020dc:	4c22      	ldr	r4, [pc, #136]	; (60002168 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600020de:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600020e2:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600020e6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600020ea:	4820      	ldr	r0, [pc, #128]	; (6000216c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600020ec:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600020f0:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600020f2:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600020f6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600020fa:	bf00      	nop
	asm("nop");
600020fc:	bf00      	nop
	asm("nop");
600020fe:	bf00      	nop
	asm("nop");
60002100:	bf00      	nop
	asm("nop");
60002102:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60002104:	2201      	movs	r2, #1
60002106:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000210a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000210e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60002112:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60002116:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000211a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000211e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60002122:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60002126:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000212a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000212e:	4770      	bx	lr
60002130:	1000003f 	.word	0x1000003f
60002134:	07080025 	.word	0x07080025
60002138:	00100009 	.word	0x00100009
6000213c:	200160a0 	.word	0x200160a0
60002140:	00200013 	.word	0x00200013
60002144:	07020021 	.word	0x07020021
60002148:	20000014 	.word	0x20000014
6000214c:	13080025 	.word	0x13080025
60002150:	10000009 	.word	0x10000009
60002154:	20200016 	.word	0x20200016
60002158:	130b0027 	.word	0x130b0027
6000215c:	40000017 	.word	0x40000017
60002160:	60000018 	.word	0x60000018
60002164:	070b002f 	.word	0x070b002f
60002168:	70000019 	.word	0x70000019
6000216c:	8000001a 	.word	0x8000001a

60002170 <configure_external_ram>:
{
60002170:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002172:	4bb8      	ldr	r3, [pc, #736]	; (60002454 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002174:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002176:	4eb8      	ldr	r6, [pc, #736]	; (60002458 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60002178:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000217a:	4fb8      	ldr	r7, [pc, #736]	; (6000245c <configure_external_ram+0x2ec>)
{
6000217c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000217e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60002182:	49b7      	ldr	r1, [pc, #732]	; (60002460 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002184:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002188:	4db6      	ldr	r5, [pc, #728]	; (60002464 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000218a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000218e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002192:	4cb5      	ldr	r4, [pc, #724]	; (60002468 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60002194:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002198:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000219c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600021a0:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600021a4:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600021a8:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600021ac:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600021ae:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600021b0:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600021b2:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600021b4:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600021b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600021ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600021be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600021c2:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600021c6:	4aa9      	ldr	r2, [pc, #676]	; (6000246c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600021c8:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600021cc:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600021d0:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600021d4:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600021d8:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600021dc:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600021de:	4ba4      	ldr	r3, [pc, #656]	; (60002470 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600021e0:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600021e2:	48a4      	ldr	r0, [pc, #656]	; (60002474 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021e4:	49a4      	ldr	r1, [pc, #656]	; (60002478 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600021e6:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600021e8:	4aa4      	ldr	r2, [pc, #656]	; (6000247c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600021ea:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600021ec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600021f0:	f043 030c 	orr.w	r3, r3, #12
600021f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600021f8:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600021fc:	6803      	ldr	r3, [r0, #0]
600021fe:	f043 0302 	orr.w	r3, r3, #2
60002202:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60002204:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002206:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60002208:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000220c:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000220e:	4b9c      	ldr	r3, [pc, #624]	; (60002480 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60002210:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60002212:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002214:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002216:	4c9b      	ldr	r4, [pc, #620]	; (60002484 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002218:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000221a:	4a9b      	ldr	r2, [pc, #620]	; (60002488 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000221c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002220:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60002222:	68c3      	ldr	r3, [r0, #12]
60002224:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60002228:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000222a:	6a03      	ldr	r3, [r0, #32]
6000222c:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000222e:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002230:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002232:	6a03      	ldr	r3, [r0, #32]
60002234:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60002236:	4a95      	ldr	r2, [pc, #596]	; (6000248c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002238:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000223a:	4c95      	ldr	r4, [pc, #596]	; (60002490 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000223c:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000223e:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60002240:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60002242:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60002244:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60002248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000224c:	f043 0301 	orr.w	r3, r3, #1
60002250:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002254:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002258:	498e      	ldr	r1, [pc, #568]	; (60002494 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000225a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000225e:	f043 0301 	orr.w	r3, r3, #1
60002262:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002266:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000226a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000226c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000226e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002270:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002274:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002276:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002278:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000227a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000227e:	6803      	ldr	r3, [r0, #0]
60002280:	f023 0302 	bic.w	r3, r3, #2
60002284:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002286:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002288:	4b83      	ldr	r3, [pc, #524]	; (60002498 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000228a:	4984      	ldr	r1, [pc, #528]	; (6000249c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000228c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000228e:	f843 2b04 	str.w	r2, [r3], #4
60002292:	428b      	cmp	r3, r1
60002294:	d1fb      	bne.n	6000228e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60002296:	4a77      	ldr	r2, [pc, #476]	; (60002474 <configure_external_ram+0x304>)
60002298:	6813      	ldr	r3, [r2, #0]
6000229a:	f043 0301 	orr.w	r3, r3, #1
6000229e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600022a0:	6813      	ldr	r3, [r2, #0]
600022a2:	f013 0301 	ands.w	r3, r3, #1
600022a6:	d1fb      	bne.n	600022a0 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600022a8:	487a      	ldr	r0, [pc, #488]	; (60002494 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600022aa:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600022ac:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600022b0:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600022b2:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600022b6:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600022b8:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600022bc:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600022c0:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600022c4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600022c8:	4975      	ldr	r1, [pc, #468]	; (600024a0 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600022ca:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600022ce:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600022d2:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600022d6:	4873      	ldr	r0, [pc, #460]	; (600024a4 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600022d8:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600022dc:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600022e0:	4c71      	ldr	r4, [pc, #452]	; (600024a8 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600022e2:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600022e6:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600022ea:	4970      	ldr	r1, [pc, #448]	; (600024ac <configure_external_ram+0x33c>)
600022ec:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022f0:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600022f2:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600022f6:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022fa:	485e      	ldr	r0, [pc, #376]	; (60002474 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600022fc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002300:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002304:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002308:	6943      	ldr	r3, [r0, #20]
6000230a:	07da      	lsls	r2, r3, #31
6000230c:	d5fc      	bpl.n	60002308 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000230e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002310:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002312:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002316:	4957      	ldr	r1, [pc, #348]	; (60002474 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002318:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000231a:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000231e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002322:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002326:	694b      	ldr	r3, [r1, #20]
60002328:	07db      	lsls	r3, r3, #31
6000232a:	d5fc      	bpl.n	60002326 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000232c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000232e:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002330:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002334:	4a4f      	ldr	r2, [pc, #316]	; (60002474 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002336:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002338:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000233c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002340:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002344:	6953      	ldr	r3, [r2, #20]
60002346:	07df      	lsls	r7, r3, #31
60002348:	d5fc      	bpl.n	60002344 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000234a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000234c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000234e:	4858      	ldr	r0, [pc, #352]	; (600024b0 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002350:	4948      	ldr	r1, [pc, #288]	; (60002474 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002352:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002354:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002358:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000235c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002360:	694b      	ldr	r3, [r1, #20]
60002362:	07de      	lsls	r6, r3, #31
60002364:	d5fc      	bpl.n	60002360 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002366:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000236a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000236e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002370:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002372:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002374:	4293      	cmp	r3, r2
60002376:	d165      	bne.n	60002444 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002378:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000237a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000237e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002380:	483c      	ldr	r0, [pc, #240]	; (60002474 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002382:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002386:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000238a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000238e:	6943      	ldr	r3, [r0, #20]
60002390:	07dd      	lsls	r5, r3, #31
60002392:	d5fc      	bpl.n	6000238e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002394:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002396:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000239a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000239c:	4a35      	ldr	r2, [pc, #212]	; (60002474 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000239e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600023a0:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600023a4:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600023a8:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600023ac:	6953      	ldr	r3, [r2, #20]
600023ae:	07dc      	lsls	r4, r3, #31
600023b0:	d5fc      	bpl.n	600023ac <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600023b2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600023b4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600023b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600023bc:	492d      	ldr	r1, [pc, #180]	; (60002474 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600023be:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600023c0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600023c4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600023c8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600023cc:	694b      	ldr	r3, [r1, #20]
600023ce:	07d8      	lsls	r0, r3, #31
600023d0:	d5fc      	bpl.n	600023cc <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600023d2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600023d4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600023d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600023dc:	4a25      	ldr	r2, [pc, #148]	; (60002474 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600023de:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600023e0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600023e4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600023e8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600023ec:	6953      	ldr	r3, [r2, #20]
600023ee:	07d9      	lsls	r1, r3, #31
600023f0:	d5fc      	bpl.n	600023ec <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600023f2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600023f4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600023f8:	482d      	ldr	r0, [pc, #180]	; (600024b0 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600023fa:	491e      	ldr	r1, [pc, #120]	; (60002474 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600023fc:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600023fe:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002402:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002406:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000240a:	694b      	ldr	r3, [r1, #20]
6000240c:	07da      	lsls	r2, r3, #31
6000240e:	d5fc      	bpl.n	6000240a <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60002410:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60002414:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002418:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000241a:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000241c:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000241e:	4293      	cmp	r3, r2
60002420:	d050      	beq.n	600024c4 <configure_external_ram+0x354>
60002422:	2508      	movs	r5, #8
60002424:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60002428:	4922      	ldr	r1, [pc, #136]	; (600024b4 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
6000242a:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
6000242c:	4b22      	ldr	r3, [pc, #136]	; (600024b8 <configure_external_ram+0x348>)
			external_psram_size = 16;
6000242e:	4a23      	ldr	r2, [pc, #140]	; (600024bc <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002430:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60002432:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60002434:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002436:	2301      	movs	r3, #1
60002438:	4821      	ldr	r0, [pc, #132]	; (600024c0 <configure_external_ram+0x350>)
6000243a:	4422      	add	r2, r4
6000243c:	f000 fa08 	bl	60002850 <__sm_set_pool_veneer>
}
60002440:	b003      	add	sp, #12
60002442:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60002444:	4b1e      	ldr	r3, [pc, #120]	; (600024c0 <configure_external_ram+0x350>)
60002446:	2200      	movs	r2, #0
60002448:	e9c3 2200 	strd	r2, r2, [r3]
6000244c:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60002450:	b003      	add	sp, #12
60002452:	bdf0      	pop	{r4, r5, r6, r7, pc}
60002454:	401f8000 	.word	0x401f8000
60002458:	0001b0f9 	.word	0x0001b0f9
6000245c:	000110f9 	.word	0x000110f9
60002460:	401f8400 	.word	0x401f8400
60002464:	000170f9 	.word	0x000170f9
60002468:	400fc000 	.word	0x400fc000
6000246c:	1ffffcff 	.word	0x1ffffcff
60002470:	a0000300 	.word	0xa0000300
60002474:	402a4000 	.word	0x402a4000
60002478:	402a8000 	.word	0x402a8000
6000247c:	ffff0012 	.word	0xffff0012
60002480:	00f737ff 	.word	0x00f737ff
60002484:	80000040 	.word	0x80000040
60002488:	7cf0ff00 	.word	0x7cf0ff00
6000248c:	830f00ff 	.word	0x830f00ff
60002490:	00020063 	.word	0x00020063
60002494:	5af05af0 	.word	0x5af05af0
60002498:	402a4200 	.word	0x402a4200
6000249c:	402a4300 	.word	0x402a4300
600024a0:	3018049f 	.word	0x3018049f
600024a4:	0a1806eb 	.word	0x0a1806eb
600024a8:	0a180638 	.word	0x0a180638
600024ac:	26013206 	.word	0x26013206
600024b0:	00030004 	.word	0x00030004
600024b4:	70240000 	.word	0x70240000
600024b8:	70000000 	.word	0x70000000
600024bc:	20016063 	.word	0x20016063
600024c0:	20015750 	.word	0x20015750
	FLEXSPI2_IPCR0 = addr;
600024c4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600024c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600024cc:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600024ce:	4808      	ldr	r0, [pc, #32]	; (600024f0 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
600024d0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600024d4:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600024d8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600024dc:	6943      	ldr	r3, [r0, #20]
600024de:	07db      	lsls	r3, r3, #31
600024e0:	d5fc      	bpl.n	600024dc <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600024e2:	2301      	movs	r3, #1
600024e4:	2510      	movs	r5, #16
600024e6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
600024ea:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
600024ec:	e79c      	b.n	60002428 <configure_external_ram+0x2b8>
600024ee:	bf00      	nop
600024f0:	402a4000 	.word	0x402a4000

600024f4 <usb_pll_start>:
{
600024f4:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600024f6:	4a15      	ldr	r2, [pc, #84]	; (6000254c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600024f8:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600024fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600024fe:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60002502:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002506:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000250a:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000250e:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60002510:	f013 0f02 	tst.w	r3, #2
60002514:	d10e      	bne.n	60002534 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60002516:	f413 5f00 	tst.w	r3, #8192	; 0x2000
6000251a:	d00f      	beq.n	6000253c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000251c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60002520:	d00e      	beq.n	60002540 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60002522:	2b00      	cmp	r3, #0
60002524:	daf3      	bge.n	6000250e <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60002526:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000252a:	d10b      	bne.n	60002544 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000252c:	065b      	lsls	r3, r3, #25
6000252e:	d50b      	bpl.n	60002548 <usb_pll_start+0x54>
}
60002530:	bcf0      	pop	{r4, r5, r6, r7}
60002532:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002534:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60002536:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60002538:	6190      	str	r0, [r2, #24]
			continue;
6000253a:	e7e8      	b.n	6000250e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000253c:	6155      	str	r5, [r2, #20]
			continue;
6000253e:	e7e6      	b.n	6000250e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60002540:	6156      	str	r6, [r2, #20]
			continue;
60002542:	e7e4      	b.n	6000250e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002544:	6191      	str	r1, [r2, #24]
			continue;
60002546:	e7e2      	b.n	6000250e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002548:	6157      	str	r7, [r2, #20]
			continue;
6000254a:	e7e0      	b.n	6000250e <usb_pll_start+0x1a>
6000254c:	400d8000 	.word	0x400d8000

60002550 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002550:	4a3f      	ldr	r2, [pc, #252]	; (60002650 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002552:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60002554:	493f      	ldr	r1, [pc, #252]	; (60002654 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002556:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000255a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000255e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002562:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002658 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002566:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000256a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000265c <tempmon_init+0x10c>
{
6000256e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002570:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002574:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002578:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000257c:	4d38      	ldr	r5, [pc, #224]	; (60002660 <tempmon_init+0x110>)
6000257e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002580:	4c38      	ldr	r4, [pc, #224]	; (60002664 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002582:	4839      	ldr	r0, [pc, #228]	; (60002668 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002584:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002586:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000258a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000258c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002594:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002598:	ee07 1a10 	vmov	s14, r1
6000259c:	4b33      	ldr	r3, [pc, #204]	; (6000266c <tempmon_init+0x11c>)
6000259e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600025a2:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600025a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600025a8:	4931      	ldr	r1, [pc, #196]	; (60002670 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025aa:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025ae:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600025b2:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600025b6:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025ba:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600025be:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025c2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600025c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025ca:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600025ce:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025d2:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600025d6:	4827      	ldr	r0, [pc, #156]	; (60002674 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025d8:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025dc:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025e0:	ee75 5a87 	vadd.f32	s11, s11, s14
600025e4:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025e8:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600025ec:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025f0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600025f4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025f8:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600025fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002600:	ee16 3a10 	vmov	r3, s12
60002604:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000260c:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60002610:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002612:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002616:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000261a:	f3c3 030b 	ubfx	r3, r3, #0, #12
6000261e:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60002622:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60002624:	4914      	ldr	r1, [pc, #80]	; (60002678 <tempmon_init+0x128>)
60002626:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000262a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000262e:	f043 0302 	orr.w	r3, r3, #2
60002632:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60002636:	4b11      	ldr	r3, [pc, #68]	; (6000267c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002638:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000263c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002640:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002644:	2201      	movs	r2, #1
}
60002646:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002648:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000264c:	4770      	bx	lr
6000264e:	bf00      	nop
60002650:	400d8100 	.word	0x400d8100
60002654:	401f4400 	.word	0x401f4400
60002658:	42aa0000 	.word	0x42aa0000
6000265c:	42b40000 	.word	0x42b40000
60002660:	20015904 	.word	0x20015904
60002664:	20015900 	.word	0x20015900
60002668:	20015908 	.word	0x20015908
6000266c:	2001590c 	.word	0x2001590c
60002670:	0fff0000 	.word	0x0fff0000
60002674:	e000e400 	.word	0xe000e400
60002678:	20009800 	.word	0x20009800
6000267c:	0000ed51 	.word	0x0000ed51

60002680 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002680:	4b31      	ldr	r3, [pc, #196]	; (60002748 <usb_init+0xc8>)
60002682:	f640 7261 	movw	r2, #3937	; 0xf61
{
60002686:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002688:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000268c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60002690:	f000 f8e6 	bl	60002860 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002694:	4a2d      	ldr	r2, [pc, #180]	; (6000274c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60002696:	492e      	ldr	r1, [pc, #184]	; (60002750 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002698:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000269c:	482d      	ldr	r0, [pc, #180]	; (60002754 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000269e:	f043 0303 	orr.w	r3, r3, #3
600026a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600026a6:	4b2c      	ldr	r3, [pc, #176]	; (60002758 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
600026a8:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600026ac:	6802      	ldr	r2, [r0, #0]
600026ae:	421a      	tst	r2, r3
600026b0:	d103      	bne.n	600026ba <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600026b2:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
600026b6:	079a      	lsls	r2, r3, #30
600026b8:	d01b      	beq.n	600026f2 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600026ba:	4a25      	ldr	r2, [pc, #148]	; (60002750 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600026bc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600026c0:	4b24      	ldr	r3, [pc, #144]	; (60002754 <usb_init+0xd4>)
600026c2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600026c4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600026c8:	f043 0302 	orr.w	r3, r3, #2
600026cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600026d0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600026d4:	079b      	lsls	r3, r3, #30
600026d6:	d4fb      	bmi.n	600026d0 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600026d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600026dc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600026e0:	4b1c      	ldr	r3, [pc, #112]	; (60002754 <usb_init+0xd4>)
600026e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600026e6:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600026ea:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600026ec:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
600026ee:	f000 f8bb 	bl	60002868 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600026f2:	4a18      	ldr	r2, [pc, #96]	; (60002754 <usb_init+0xd4>)
600026f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600026f8:	4c15      	ldr	r4, [pc, #84]	; (60002750 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600026fa:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600026fc:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600026fe:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002700:	4b16      	ldr	r3, [pc, #88]	; (6000275c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60002702:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002704:	f44f 7240 	mov.w	r2, #768	; 0x300
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002708:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000270c:	4618      	mov	r0, r3
6000270e:	f000 f88b 	bl	60002828 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60002712:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002716:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002718:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000271c:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002720:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60002722:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60002726:	641a      	str	r2, [r3, #64]	; 0x40
60002728:	4b0d      	ldr	r3, [pc, #52]	; (60002760 <usb_init+0xe0>)
6000272a:	4a0e      	ldr	r2, [pc, #56]	; (60002764 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000272c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60002730:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60002734:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60002738:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000273c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000273e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60002742:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60002746:	bd10      	pop	{r4, pc}
60002748:	400d8000 	.word	0x400d8000
6000274c:	400fc000 	.word	0x400fc000
60002750:	402e0000 	.word	0x402e0000
60002754:	400d9000 	.word	0x400d9000
60002758:	001e1c00 	.word	0x001e1c00
6000275c:	20000000 	.word	0x20000000
60002760:	20009800 	.word	0x20009800
60002764:	0000f001 	.word	0x0000f001

60002768 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60002768:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000276a:	4b0e      	ldr	r3, [pc, #56]	; (600027a4 <_reboot_Teensyduino_+0x3c>)
6000276c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000276e:	079b      	lsls	r3, r3, #30
60002770:	d400      	bmi.n	60002774 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60002772:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002774:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002776:	4b0c      	ldr	r3, [pc, #48]	; (600027a8 <_reboot_Teensyduino_+0x40>)
60002778:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000277a:	4a0c      	ldr	r2, [pc, #48]	; (600027ac <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
6000277c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002780:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002784:	490a      	ldr	r1, [pc, #40]	; (600027b0 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002786:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000278a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000278c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000278e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002792:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60002796:	4807      	ldr	r0, [pc, #28]	; (600027b4 <_reboot_Teensyduino_+0x4c>)
60002798:	4a07      	ldr	r2, [pc, #28]	; (600027b8 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000279a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
6000279c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000279e:	689b      	ldr	r3, [r3, #8]
600027a0:	4798      	blx	r3
	}
	__builtin_unreachable();
600027a2:	bf00      	nop
600027a4:	401f4400 	.word	0x401f4400
600027a8:	402e0000 	.word	0x402e0000
600027ac:	400ac000 	.word	0x400ac000
600027b0:	00200003 	.word	0x00200003
600027b4:	20208000 	.word	0x20208000
600027b8:	eb120000 	.word	0xeb120000

600027bc <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600027bc:	4b10      	ldr	r3, [pc, #64]	; (60002800 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600027be:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600027c0:	4a10      	ldr	r2, [pc, #64]	; (60002804 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600027c2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600027c4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600027c8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600027ca:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600027cc:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600027d0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600027d2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
600027d6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600027d8:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600027da:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600027dc:	6c93      	ldr	r3, [r2, #72]	; 0x48
600027de:	061b      	lsls	r3, r3, #24
600027e0:	d4fc      	bmi.n	600027dc <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600027e2:	4a09      	ldr	r2, [pc, #36]	; (60002808 <analog_init+0x4c>)
600027e4:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600027e8:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600027ea:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600027ec:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600027ee:	6c93      	ldr	r3, [r2, #72]	; 0x48
600027f0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600027f4:	d1fb      	bne.n	600027ee <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600027f6:	4a05      	ldr	r2, [pc, #20]	; (6000280c <analog_init+0x50>)
600027f8:	7013      	strb	r3, [r2, #0]
}
600027fa:	f85d 4b04 	ldr.w	r4, [sp], #4
600027fe:	4770      	bx	lr
60002800:	400fc000 	.word	0x400fc000
60002804:	400c4000 	.word	0x400c4000
60002808:	400c8000 	.word	0x400c8000
6000280c:	20016062 	.word	0x20016062

60002810 <_init>:
60002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60002812:	bf00      	nop
60002814:	bcf8      	pop	{r3, r4, r5, r6, r7}
60002816:	bc08      	pop	{r3}
60002818:	469e      	mov	lr, r3
6000281a:	4770      	bx	lr
6000281c:	0000      	movs	r0, r0
	...

60002820 <____libc_init_array_veneer>:
60002820:	f85f f000 	ldr.w	pc, [pc]	; 60002824 <____libc_init_array_veneer+0x4>
60002824:	00012a55 	.word	0x00012a55

60002828 <__memset_veneer>:
60002828:	f85f f000 	ldr.w	pc, [pc]	; 6000282c <__memset_veneer+0x4>
6000282c:	00012731 	.word	0x00012731

60002830 <___ZN5Print11printNumberEmhh_veneer>:
60002830:	f85f f000 	ldr.w	pc, [pc]	; 60002834 <___ZN5Print11printNumberEmhh_veneer+0x4>
60002834:	0000da5d 	.word	0x0000da5d

60002838 <___ZN5Print5printEl_veneer>:
60002838:	f85f f000 	ldr.w	pc, [pc]	; 6000283c <___ZN5Print5printEl_veneer+0x4>
6000283c:	0000d9f1 	.word	0x0000d9f1

60002840 <___ZN5Print10printFloatEdh_veneer>:
60002840:	f85f f000 	ldr.w	pc, [pc]	; 60002844 <___ZN5Print10printFloatEdh_veneer+0x4>
60002844:	0000db29 	.word	0x0000db29

60002848 <__main_veneer>:
60002848:	f85f f000 	ldr.w	pc, [pc]	; 6000284c <__main_veneer+0x4>
6000284c:	0000e605 	.word	0x0000e605

60002850 <__sm_set_pool_veneer>:
60002850:	f85f f000 	ldr.w	pc, [pc]	; 60002854 <__sm_set_pool_veneer+0x4>
60002854:	000104a5 	.word	0x000104a5

60002858 <___ZN5Print7printlnEv_veneer>:
60002858:	f85f f000 	ldr.w	pc, [pc]	; 6000285c <___ZN5Print7printlnEv_veneer+0x4>
6000285c:	0000da09 	.word	0x0000da09

60002860 <__usb_init_serialnumber_veneer>:
60002860:	f85f f000 	ldr.w	pc, [pc]	; 60002864 <__usb_init_serialnumber_veneer+0x4>
60002864:	0000f745 	.word	0x0000f745

60002868 <__delay_veneer>:
60002868:	f85f f000 	ldr.w	pc, [pc]	; 6000286c <__delay_veneer+0x4>
6000286c:	0000e00d 	.word	0x0000e00d

60002870 <__pwm_init_veneer>:
60002870:	f85f f000 	ldr.w	pc, [pc]	; 60002874 <__pwm_init_veneer+0x4>
60002874:	00010365 	.word	0x00010365

60002878 <__set_arm_clock_veneer>:
60002878:	f85f f000 	ldr.w	pc, [pc]	; 6000287c <__set_arm_clock_veneer+0x4>
6000287c:	0000dd1d 	.word	0x0000dd1d

60002880 <___Z12estAlarmTimem_veneer>:
60002880:	f85f f000 	ldr.w	pc, [pc]	; 60002884 <___Z12estAlarmTimem_veneer+0x4>
60002884:	00001fc5 	.word	0x00001fc5

60002888 <__frame_dummy_init_array_entry>:
60002888:	00000045 00000709 00000da1 0000210d     E............!..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive

      GPIO8_GDIR |= 1<<26;
    }
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
}

void configGetString(char *txt, char *str)
{ while(*txt++ !='=') continue;
  while(*txt == ' ') txt++;
  while (*txt !=';') *str++=*txt++;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  *str='\0';
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
}
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
    }
    return ptr;
  }
      34:	4718      	bx	r3
      36:	4770      	bx	lr
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      38:	20009ac0 	.word	0x20009ac0
  #endif
}

static uint32_t have_disk=0;
void printBin(uint32_t x) 
{ for (int i = 31; i >= 0; i--) { Serial.print(bitRead(x, i)); if(!(i%8)) Serial.print(' '); }}
      3c:	20009ac0 	.word	0x20009ac0
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	2001582c 	.word	0x2001582c
      64:	60028800 	.word	0x60028800

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration

  const int nsd = sizeof(sd_str)/sizeof(const char *);
  SdFs sdx[nsd];
      6c:	4770      	bx	lr
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
      6e:	bf00      	nop

00000070 <MTPStorage_SD::~MTPStorage_SD()>:
  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
//class MTPStorage_SD : public MTPStorageInterface, mSD_Base
class MTPStorage_SD : public mSD_Base
      70:	b538      	push	{r3, r4, r5, lr}
      72:	4604      	mov	r4, r0
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
      74:	4d0a      	ldr	r5, [pc, #40]	; (a0 <MTPStorage_SD::~MTPStorage_SD()+0x30>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
      76:	f500 70aa 	add.w	r0, r0, #340	; 0x154
      7a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
      7e:	f00a fd61 	bl	ab44 <FsBaseFile::close()>
      82:	f504 7082 	add.w	r0, r4, #260	; 0x104
      86:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
      8a:	f00a fd5b 	bl	ab44 <FsBaseFile::close()>
      8e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
      92:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
      96:	f00a fd55 	bl	ab44 <FsBaseFile::close()>
      9a:	4620      	mov	r0, r4
      9c:	bd38      	pop	{r3, r4, r5, pc}
      9e:	bf00      	nop
      a0:	20000b98 	.word	0x20000b98

000000a4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
      a4:	b500      	push	{lr}
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
      a6:	6c83      	ldr	r3, [r0, #72]	; 0x48
      a8:	b083      	sub	sp, #12
      aa:	f88d 1007 	strb.w	r1, [sp, #7]
      ae:	b143      	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
      b0:	2201      	movs	r2, #1
      b2:	f10d 0107 	add.w	r1, sp, #7
      b6:	4618      	mov	r0, r3
      b8:	f009 fb48 	bl	974c <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
      bc:	b003      	add	sp, #12
      be:	f85d fb04 	ldr.w	pc, [sp], #4
      c2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
      c4:	2800      	cmp	r0, #0
      c6:	d0f9      	beq.n	bc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
      c8:	2201      	movs	r2, #1
      ca:	f10d 0107 	add.w	r1, sp, #7
      ce:	f007 ffe3 	bl	8098 <ExFatFile::write(void const*, unsigned int)>
      d2:	b003      	add	sp, #12
      d4:	f85d fb04 	ldr.w	pc, [sp], #4

000000d8 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
      d8:	6c83      	ldr	r3, [r0, #72]	; 0x48
      da:	b113      	cbz	r3, e2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      dc:	4618      	mov	r0, r3
      de:	f009 bb2f 	b.w	9740 <FatFile::sync()>
      e2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      e4:	b108      	cbz	r0, ea <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      e6:	f007 bdef 	b.w	7cc8 <ExFatFile::sync()>
  }
      ea:	4770      	bx	lr

000000ec <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
      ee:	b500      	push	{lr}
      f0:	b083      	sub	sp, #12
      f2:	b163      	cbz	r3, 10e <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
      f4:	2201      	movs	r2, #1
      f6:	f10d 0107 	add.w	r1, sp, #7
      fa:	4618      	mov	r0, r3
      fc:	f008 ffa8 	bl	9050 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     100:	2801      	cmp	r0, #1
     102:	d10c      	bne.n	11e <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     104:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     108:	b003      	add	sp, #12
     10a:	f85d fb04 	ldr.w	pc, [sp], #4
     10e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     110:	b128      	cbz	r0, 11e <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     112:	2201      	movs	r2, #1
     114:	f10d 0107 	add.w	r1, sp, #7
     118:	f007 f8a8 	bl	726c <ExFatFile::read(void*, unsigned int)>
     11c:	e7f0      	b.n	100 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     11e:	f04f 30ff 	mov.w	r0, #4294967295
     122:	e7f1      	b.n	108 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000124 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     124:	6c83      	ldr	r3, [r0, #72]	; 0x48
     126:	b113      	cbz	r3, 12e <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     128:	4618      	mov	r0, r3
     12a:	f009 b865 	b.w	91f8 <FatFile::peek()>
     12e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     130:	b108      	cbz	r0, 136 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     132:	f007 b96b 	b.w	740c <ExFatFile::peek()>
  }
     136:	f04f 30ff 	mov.w	r0, #4294967295
     13a:	4770      	bx	lr

0000013c <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     13c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     13e:	b153      	cbz	r3, 156 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     140:	7818      	ldrb	r0, [r3, #0]
     142:	f010 0008 	ands.w	r0, r0, #8
     146:	d00d      	beq.n	164 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     148:	69d8      	ldr	r0, [r3, #28]
     14a:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     14c:	1ac0      	subs	r0, r0, r3
     14e:	bf48      	it	mi
     150:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     154:	4770      	bx	lr
     156:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     158:	b1a3      	cbz	r3, 184 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     15a:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     15e:	f010 0008 	ands.w	r0, r0, #8
     162:	d100      	bne.n	166 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     164:	4770      	bx	lr
     166:	6918      	ldr	r0, [r3, #16]
     168:	6819      	ldr	r1, [r3, #0]
     16a:	695a      	ldr	r2, [r3, #20]
     16c:	1a40      	subs	r0, r0, r1
     16e:	685b      	ldr	r3, [r3, #4]
     170:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     174:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     178:	f173 0300 	sbcs.w	r3, r3, #0
     17c:	d3f2      	bcc.n	164 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     17e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     182:	4770      	bx	lr
     184:	4618      	mov	r0, r3
    return BaseFile::available();
     186:	e7ed      	b.n	164 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000188 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     188:	6c83      	ldr	r3, [r0, #72]	; 0x48
     18a:	b113      	cbz	r3, 192 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     18c:	4618      	mov	r0, r3
     18e:	f009 badd 	b.w	974c <FatFile::write(void const*, unsigned int)>
     192:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     194:	b108      	cbz	r0, 19a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     196:	f007 bf7f 	b.w	8098 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     19a:	4770      	bx	lr

0000019c <resetUSB()>:
  { USB1_USBCMD = 0;  // disconnect USB
     19c:	4b11      	ldr	r3, [pc, #68]	; (1e4 <resetUSB()+0x48>)
     19e:	2200      	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     1a0:	2064      	movs	r0, #100	; 0x64
  {
     1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     1a6:	4d10      	ldr	r5, [pc, #64]	; (1e8 <resetUSB()+0x4c>)
     1a8:	4e10      	ldr	r6, [pc, #64]	; (1ec <resetUSB()+0x50>)
     1aa:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1f8 <resetUSB()+0x5c>
     1ae:	4f10      	ldr	r7, [pc, #64]	; (1f0 <resetUSB()+0x54>)
      while(!Serial) mtpd.loop();
     1b0:	4c10      	ldr	r4, [pc, #64]	; (1f4 <resetUSB()+0x58>)
  { USB1_USBCMD = 0;  // disconnect USB
     1b2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     1b6:	f00d ff29 	bl	e00c <delay>
    usb_init();
     1ba:	f01b f8cd 	bl	1b358 <__usb_init_veneer>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     1be:	f010 f827 	bl	10210 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1c2:	782b      	ldrb	r3, [r5, #0]
      while(!Serial) mtpd.loop();
     1c4:	4620      	mov	r0, r4
     1c6:	b153      	cbz	r3, 1de <resetUSB()+0x42>
     1c8:	7833      	ldrb	r3, [r6, #0]
     1ca:	07db      	lsls	r3, r3, #31
     1cc:	d507      	bpl.n	1de <resetUSB()+0x42>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     1ce:	f8d8 3000 	ldr.w	r3, [r8]
     1d2:	683a      	ldr	r2, [r7, #0]
     1d4:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1d6:	2b0e      	cmp	r3, #14
     1d8:	d901      	bls.n	1de <resetUSB()+0x42>
  }
     1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      while(!Serial) mtpd.loop();
     1de:	f003 fc7b 	bl	3ad8 <MTPD::loop()>
     1e2:	e7ec      	b.n	1be <resetUSB()+0x22>
     1e4:	402e0000 	.word	0x402e0000
     1e8:	2001606f 	.word	0x2001606f
     1ec:	2001606e 	.word	0x2001606e
     1f0:	20016030 	.word	0x20016030
     1f4:	20009b40 	.word	0x20009b40
     1f8:	20016020 	.word	0x20016020

000001fc <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     1fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <reboot()+0xc>)
     202:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
     206:	4770      	bx	lr
     208:	05fa0004 	.word	0x05fa0004

0000020c <lowPowerInit()>:
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     20c:	4b0c      	ldr	r3, [pc, #48]	; (240 <lowPowerInit()+0x34>)
     20e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
     210:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  {
     214:	b510      	push	{r4, lr}
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     216:	665a      	str	r2, [r3, #100]	; 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     21a:	f022 0223 	bic.w	r2, r2, #35	; 0x23
     21e:	655a      	str	r2, [r3, #84]	; 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     222:	f042 0201 	orr.w	r2, r2, #1
     226:	655a      	str	r2, [r3, #84]	; 0x54
    asm volatile("dsb");
     228:	f3bf 8f4f 	dsb	sy
    for(int ii=0;ii<41;ii++) { pinMode(ii,INPUT_DISABLE); }
     22c:	2400      	movs	r4, #0
     22e:	b2e0      	uxtb	r0, r4
     230:	3401      	adds	r4, #1
     232:	2105      	movs	r1, #5
     234:	f00d ff92 	bl	e15c <pinMode>
     238:	2c29      	cmp	r4, #41	; 0x29
     23a:	d1f8      	bne.n	22e <lowPowerInit()+0x22>
  }
     23c:	bd10      	pop	{r4, pc}
     23e:	bf00      	nop
     240:	400fc000 	.word	0x400fc000

00000244 <stopSystem()>:
  { //shutting down power
     244:	b508      	push	{r3, lr}
    stopSD(); 
     246:	f001 fa1d 	bl	1684 <stopSD()>
    adc_exit();
     24a:	f000 fdd5 	bl	df8 <adc_exit()>
  { USB1_USBCMD = 0;  // disconnect USB
     24e:	4b04      	ldr	r3, [pc, #16]	; (260 <stopSystem()+0x1c>)
     250:	2200      	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     252:	2064      	movs	r0, #100	; 0x64
  { USB1_USBCMD = 0;  // disconnect USB
     254:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  }
     258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(100);       // long enough for PC+hubs to detect
     25c:	f00d bed6 	b.w	e00c <delay>
     260:	402e0000 	.word	0x402e0000

00000264 <loop>:
{
     264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     268:	4c6d      	ldr	r4, [pc, #436]	; (420 <loop+0x1bc>)
{
     26a:	b08b      	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     26c:	4d6d      	ldr	r5, [pc, #436]	; (424 <loop+0x1c0>)
  loopCount++;
     26e:	6823      	ldr	r3, [r4, #0]
  if(status==-99) status = (termon==1)? STOPPED: CLOSED;
     270:	4f6d      	ldr	r7, [pc, #436]	; (428 <loop+0x1c4>)
  loopCount++;
     272:	3301      	adds	r3, #1
     274:	6023      	str	r3, [r4, #0]
  nb = getDataCount();
     276:	f005 f921 	bl	54bc <getDataCount()>
  if(nb>mxb) mxb=nb;
     27a:	882b      	ldrh	r3, [r5, #0]
     27c:	4283      	cmp	r3, r0
     27e:	bf38      	it	cc
     280:	8028      	strhcc	r0, [r5, #0]
  if(status==-99) status = (termon==1)? STOPPED: CLOSED;
     282:	f9b7 0000 	ldrsh.w	r0, [r7]
     286:	f110 0f63 	cmn.w	r0, #99	; 0x63
     28a:	d102      	bne.n	292 <loop+0x2e>
     28c:	2300      	movs	r3, #0
     28e:	4618      	mov	r0, r3
     290:	803b      	strh	r3, [r7, #0]
  status = menu(status);
     292:	f004 fe0b 	bl	4eac <menu(short)>
      if(status<0)
     296:	2800      	cmp	r0, #0
  status = menu(status);
     298:	8038      	strh	r0, [r7, #0]
      if(status<0)
     29a:	db22      	blt.n	2e2 <loop+0x7e>
    status=saveData(status);  
     29c:	f001 fe0e 	bl	1ebc <saveData(short)>
  if((t1=millis())>(t0+1000))
     2a0:	4e62      	ldr	r6, [pc, #392]	; (42c <loop+0x1c8>)
     2a2:	4b63      	ldr	r3, [pc, #396]	; (430 <loop+0x1cc>)
    status=saveData(status);  
     2a4:	8038      	strh	r0, [r7, #0]
     2a6:	681f      	ldr	r7, [r3, #0]
  if((t1=millis())>(t0+1000))
     2a8:	6833      	ldr	r3, [r6, #0]
     2aa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
     2ae:	42bb      	cmp	r3, r7
     2b0:	d213      	bcs.n	2da <loop+0x76>
    if(monitor)
     2b2:	4b60      	ldr	r3, [pc, #384]	; (434 <loop+0x1d0>)
     2b4:	f9b3 3000 	ldrsh.w	r3, [r3]
     2b8:	b9cb      	cbnz	r3, 2ee <loop+0x8a>
     2ba:	4b5f      	ldr	r3, [pc, #380]	; (438 <loop+0x1d4>)
     2bc:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 478 <loop+0x214>
     2c0:	9307      	str	r3, [sp, #28]
     2c2:	4b5e      	ldr	r3, [pc, #376]	; (43c <loop+0x1d8>)
     2c4:	9306      	str	r3, [sp, #24]
    loopCount=0;
     2c6:	2300      	movs	r3, #0
    procMiss=0;
     2c8:	9a07      	ldr	r2, [sp, #28]
    t0=t1;
     2ca:	6037      	str	r7, [r6, #0]
    procMiss=0;
     2cc:	6013      	str	r3, [r2, #0]
    disk_count=0;
     2ce:	9a06      	ldr	r2, [sp, #24]
    loopCount=0;
     2d0:	6023      	str	r3, [r4, #0]
    procCount=0;
     2d2:	f8cb 3000 	str.w	r3, [fp]
    mxb=0;
     2d6:	802b      	strh	r3, [r5, #0]
    disk_count=0;
     2d8:	6013      	str	r3, [r2, #0]
  asm("wfi");
     2da:	bf30      	wfi
}
     2dc:	b00b      	add	sp, #44	; 0x2c
     2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { mtpd.loop();
     2e2:	4857      	ldr	r0, [pc, #348]	; (440 <loop+0x1dc>)
     2e4:	f003 fbf8 	bl	3ad8 <MTPD::loop()>
    status=saveData(status);  
     2e8:	f9b7 0000 	ldrsh.w	r0, [r7]
     2ec:	e7d6      	b.n	29c <loop+0x38>
      rtc_get_datetime(&t);
     2ee:	a808      	add	r0, sp, #32
      Serial.print(procCount);  Serial.print(" ");
     2f0:	f8df b184 	ldr.w	fp, [pc, #388]	; 478 <loop+0x214>
      rtc_get_datetime(&t);
     2f4:	f005 fa8e 	bl	5814 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     2f8:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
     2fc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
     300:	9304      	str	r3, [sp, #16]
     302:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     306:	494f      	ldr	r1, [pc, #316]	; (444 <loop+0x1e0>)
     308:	9303      	str	r3, [sp, #12]
     30a:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     30e:	484e      	ldr	r0, [pc, #312]	; (448 <loop+0x1e4>)
     310:	9302      	str	r3, [sp, #8]
     312:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     316:	9301      	str	r3, [sp, #4]
     318:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     31c:	9300      	str	r3, [sp, #0]
     31e:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
     322:	f00d fb8d 	bl	da40 <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     326:	2103      	movs	r1, #3
     328:	4848      	ldr	r0, [pc, #288]	; (44c <loop+0x1e8>)
     32a:	f00f fef3 	bl	10114 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     32e:	2300      	movs	r3, #0
     330:	220a      	movs	r2, #10
     332:	6821      	ldr	r1, [r4, #0]
     334:	4844      	ldr	r0, [pc, #272]	; (448 <loop+0x1e4>)
     336:	f00d fb91 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     33a:	2101      	movs	r1, #1
     33c:	4844      	ldr	r0, [pc, #272]	; (450 <loop+0x1ec>)
     33e:	f00f fee9 	bl	10114 <usb_serial_write>
      Serial.print(procMiss);   Serial.print(" ");
     342:	4b3d      	ldr	r3, [pc, #244]	; (438 <loop+0x1d4>)
     344:	220a      	movs	r2, #10
     346:	f8db 1000 	ldr.w	r1, [fp]
     34a:	9307      	str	r3, [sp, #28]
     34c:	2300      	movs	r3, #0
     34e:	483e      	ldr	r0, [pc, #248]	; (448 <loop+0x1e4>)
     350:	f00d fb84 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     354:	2101      	movs	r1, #1
     356:	483e      	ldr	r0, [pc, #248]	; (450 <loop+0x1ec>)
     358:	f00f fedc 	bl	10114 <usb_serial_write>
     35c:	9907      	ldr	r1, [sp, #28]
     35e:	2300      	movs	r3, #0
     360:	220a      	movs	r2, #10
     362:	6809      	ldr	r1, [r1, #0]
     364:	4838      	ldr	r0, [pc, #224]	; (448 <loop+0x1e4>)
     366:	f00d fb79 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     36a:	2101      	movs	r1, #1
     36c:	4838      	ldr	r0, [pc, #224]	; (450 <loop+0x1ec>)
     36e:	f00f fed1 	bl	10114 <usb_serial_write>
      Serial.printf("%3d",mxb); Serial.print("  ");
     372:	882a      	ldrh	r2, [r5, #0]
     374:	4937      	ldr	r1, [pc, #220]	; (454 <loop+0x1f0>)
     376:	4834      	ldr	r0, [pc, #208]	; (448 <loop+0x1e4>)
     378:	f00d fb62 	bl	da40 <Print::printf(char const*, ...)>
     37c:	2102      	movs	r1, #2
     37e:	4836      	ldr	r0, [pc, #216]	; (458 <loop+0x1f4>)
     380:	f00f fec8 	bl	10114 <usb_serial_write>
      Serial.print(have_disk);  Serial.print("  ");
     384:	4b35      	ldr	r3, [pc, #212]	; (45c <loop+0x1f8>)
     386:	220a      	movs	r2, #10
     388:	482f      	ldr	r0, [pc, #188]	; (448 <loop+0x1e4>)
     38a:	6819      	ldr	r1, [r3, #0]
     38c:	2300      	movs	r3, #0
     38e:	f00d fb65 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
      Serial.print(disk_count); Serial.print("; ");
     392:	4b2a      	ldr	r3, [pc, #168]	; (43c <loop+0x1d8>)
     394:	2102      	movs	r1, #2
     396:	4830      	ldr	r0, [pc, #192]	; (458 <loop+0x1f4>)
     398:	9306      	str	r3, [sp, #24]
     39a:	f00f febb 	bl	10114 <usb_serial_write>
     39e:	9906      	ldr	r1, [sp, #24]
     3a0:	2300      	movs	r3, #0
     3a2:	220a      	movs	r2, #10
     3a4:	4828      	ldr	r0, [pc, #160]	; (448 <loop+0x1e4>)
     3a6:	6809      	ldr	r1, [r1, #0]
     3a8:	f00d fb58 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     3ac:	2102      	movs	r1, #2
     3ae:	482c      	ldr	r0, [pc, #176]	; (460 <loop+0x1fc>)
     3b0:	f00f feb0 	bl	10114 <usb_serial_write>
      if(proc==0)
     3b4:	4b2b      	ldr	r3, [pc, #172]	; (464 <loop+0x200>)
     3b6:	881b      	ldrh	r3, [r3, #0]
     3b8:	b21b      	sxth	r3, r3
     3ba:	b98b      	cbnz	r3, 3e0 <loop+0x17c>
          for(int ii=0; ii<8;ii++) {Serial.printf("%9d",logBuffer[ii]);}
     3bc:	4699      	mov	r9, r3
     3be:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 47c <loop+0x218>
     3c2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 448 <loop+0x1e4>
     3c6:	4b28      	ldr	r3, [pc, #160]	; (468 <loop+0x204>)
     3c8:	4651      	mov	r1, sl
     3ca:	4640      	mov	r0, r8
     3cc:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     3d0:	f109 0901 	add.w	r9, r9, #1
     3d4:	f00d fb34 	bl	da40 <Print::printf(char const*, ...)>
     3d8:	f1b9 0f08 	cmp.w	r9, #8
     3dc:	d1f3      	bne.n	3c6 <loop+0x162>
     3de:	e772      	b.n	2c6 <loop+0x62>
     3e0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 480 <loop+0x21c>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3e4:	4921      	ldr	r1, [pc, #132]	; (46c <loop+0x208>)
     3e6:	f8df 9060 	ldr.w	r9, [pc, #96]	; 448 <loop+0x1e4>
     3ea:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     3ee:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     3f2:	4648      	mov	r0, r9
     3f4:	f00d fb24 	bl	da40 <Print::printf(char const*, ...)>
     3f8:	491c      	ldr	r1, [pc, #112]	; (46c <loop+0x208>)
     3fa:	45c2      	cmp	sl, r8
     3fc:	d1f7      	bne.n	3ee <loop+0x18a>
        Serial.printf("%2d",max_stat);
     3fe:	f8df 8084 	ldr.w	r8, [pc, #132]	; 484 <loop+0x220>
     402:	491b      	ldr	r1, [pc, #108]	; (470 <loop+0x20c>)
     404:	f8d8 2000 	ldr.w	r2, [r8]
     408:	480f      	ldr	r0, [pc, #60]	; (448 <loop+0x1e4>)
     40a:	f00d fb19 	bl	da40 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     40e:	2260      	movs	r2, #96	; 0x60
     410:	2100      	movs	r1, #0
     412:	4818      	ldr	r0, [pc, #96]	; (474 <loop+0x210>)
     414:	f012 f98c 	bl	12730 <memset>
        max_stat=0;        
     418:	2300      	movs	r3, #0
     41a:	f8c8 3000 	str.w	r3, [r8]
     41e:	e752      	b.n	2c6 <loop+0x62>
     420:	20015178 	.word	0x20015178
     424:	2001603c 	.word	0x2001603c
     428:	20009416 	.word	0x20009416
     42c:	20015174 	.word	0x20015174
     430:	20016020 	.word	0x20016020
     434:	20016048 	.word	0x20016048
     438:	20015848 	.word	0x20015848
     43c:	20015738 	.word	0x20015738
     440:	20009b40 	.word	0x20009b40
     444:	20007ee4 	.word	0x20007ee4
     448:	20008a6c 	.word	0x20008a6c
     44c:	20007f08 	.word	0x20007f08
     450:	20000b78 	.word	0x20000b78
     454:	20007f0c 	.word	0x20007f0c
     458:	20007f10 	.word	0x20007f10
     45c:	20015124 	.word	0x20015124
     460:	20007f14 	.word	0x20007f14
     464:	2001604a 	.word	0x2001604a
     468:	200157d8 	.word	0x200157d8
     46c:	20007f1c 	.word	0x20007f1c
     470:	20007f24 	.word	0x20007f24
     474:	2001584c 	.word	0x2001584c
     478:	20015844 	.word	0x20015844
     47c:	20007f18 	.word	0x20007f18
     480:	20015848 	.word	0x20015848
     484:	200157f8 	.word	0x200157f8

00000488 <setup1()>:
{ delay(100);
     488:	b510      	push	{r4, lr}
  while(!setup_ready) {delay(10);} // wait for setup() to finish
     48a:	4c11      	ldr	r4, [pc, #68]	; (4d0 <setup1()+0x48>)
{ delay(100);
     48c:	2064      	movs	r0, #100	; 0x64
     48e:	f00d fdbd 	bl	e00c <delay>
  while(!setup_ready) {delay(10);} // wait for setup() to finish
     492:	6823      	ldr	r3, [r4, #0]
     494:	b92b      	cbnz	r3, 4a2 <setup1()+0x1a>
     496:	200a      	movs	r0, #10
     498:	f00d fdb8 	bl	e00c <delay>
     49c:	6823      	ldr	r3, [r4, #0]
     49e:	2b00      	cmp	r3, #0
     4a0:	d0f9      	beq.n	496 <setup1()+0xe>
     4a2:	2106      	movs	r1, #6
     4a4:	480b      	ldr	r0, [pc, #44]	; (4d4 <setup1()+0x4c>)
     4a6:	f00f fe35 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     4aa:	480b      	ldr	r0, [pc, #44]	; (4d8 <setup1()+0x50>)
     4ac:	f00d faac 	bl	da08 <Print::println()>
  i2s_setup();
     4b0:	f000 fbca 	bl	c48 <i2s_setup()>
  dma_setup();
     4b4:	f000 fc0e 	bl	cd4 <dma_setup()>
  adc_init();
     4b8:	f000 fcb6 	bl	e28 <adc_init()>
     4bc:	210b      	movs	r1, #11
     4be:	4807      	ldr	r0, [pc, #28]	; (4dc <setup1()+0x54>)
     4c0:	f00f fe28 	bl	10114 <usb_serial_write>
     4c4:	4804      	ldr	r0, [pc, #16]	; (4d8 <setup1()+0x50>)
}
     4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     4ca:	f00d ba9d 	b.w	da08 <Print::println()>
     4ce:	bf00      	nop
     4d0:	2000e818 	.word	0x2000e818
     4d4:	200006a8 	.word	0x200006a8
     4d8:	20008a6c 	.word	0x20008a6c
     4dc:	200006b0 	.word	0x200006b0

000004e0 <storage_configure()>:

  void storage_configure()
  {
     4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
     4e4:	4c7d      	ldr	r4, [pc, #500]	; (6dc <storage_configure()+0x1fc>)
    sdioConfigBackup = sdioConfig;
     4e6:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
     4e8:	22ff      	movs	r2, #255	; 0xff
     4ea:	b082      	sub	sp, #8
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     4ec:	f504 6592 	add.w	r5, r4, #1168	; 0x490
     4f0:	4619      	mov	r1, r3
     4f2:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
     4f6:	4628      	mov	r0, r5
    sdioConfigBackup = sdioConfig;
     4f8:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
     4fc:	f00c f83c 	bl	c578 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
     500:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     502:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     506:	f00b fa99 	bl	ba3c <SdioCard::errorCode() const>
     50a:	b938      	cbnz	r0, 51c <storage_configure()+0x3c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     50c:	2301      	movs	r3, #1
     50e:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
     512:	4620      	mov	r0, r4
     514:	461a      	mov	r2, r3
     516:	f00a fbbd 	bl	ac94 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     51a:	b988      	cbnz	r0, 540 <storage_configure()+0x60>
        if(cs[ii]<BUILTIN_SDCARD)
        { pinMode(cs[ii],OUTPUT); digitalWrite(cs[ii],HIGH); 
          spi_init();
        }
        if(!sdx[ii].begin(SD_CONFIG)) 
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     51c:	4870      	ldr	r0, [pc, #448]	; (6e0 <storage_configure()+0x200>)
     51e:	23fe      	movs	r3, #254	; 0xfe
     520:	2200      	movs	r2, #0
     522:	4970      	ldr	r1, [pc, #448]	; (6e4 <storage_configure()+0x204>)
     524:	6804      	ldr	r4, [r0, #0]
     526:	4870      	ldr	r0, [pc, #448]	; (6e8 <storage_configure()+0x208>)
     528:	9400      	str	r4, [sp, #0]
     52a:	f00d fa89 	bl	da40 <Print::printf(char const*, ...)>
     52e:	486e      	ldr	r0, [pc, #440]	; (6e8 <storage_configure()+0x208>)
     530:	f00d fa6a 	bl	da08 <Print::println()>
     534:	2300      	movs	r3, #0
              mtpd.addFilesystem(sdx[ii], sd_str[ii]);
            #endif
          #endif

          filing_init();
          have_disk=1;
     536:	4a6d      	ldr	r2, [pc, #436]	; (6ec <storage_configure()+0x20c>)
     538:	6013      	str	r3, [r2, #0]
        }
      }
  }
     53a:	b002      	add	sp, #8
     53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
     540:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     544:	2b00      	cmp	r3, #0
     546:	f000 80a4 	beq.w	692 <storage_configure()+0x1b2>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     54a:	69da      	ldr	r2, [r3, #28]
     54c:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
     550:	f102 38ff 	add.w	r8, r2, #4294967295
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     554:	2800      	cmp	r0, #0
     556:	f000 80b2 	beq.w	6be <storage_configure()+0x1de>
     55a:	6803      	ldr	r3, [r0, #0]
     55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     55e:	4798      	blx	r3
     560:	b340      	cbz	r0, 5b4 <storage_configure()+0xd4>
     562:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     566:	2800      	cmp	r0, #0
     568:	f000 80a7 	beq.w	6ba <storage_configure()+0x1da>
     56c:	6803      	ldr	r3, [r0, #0]
     56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     570:	4798      	blx	r3
     572:	b9f8      	cbnz	r0, 5b4 <storage_configure()+0xd4>
     574:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     578:	2800      	cmp	r0, #0
     57a:	f000 809e 	beq.w	6ba <storage_configure()+0x1da>
      return m_card->setDedicatedSpi(value);
     57e:	6803      	ldr	r3, [r0, #0]
     580:	2101      	movs	r1, #1
     582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     584:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     586:	4606      	mov	r6, r0
     588:	2800      	cmp	r0, #0
     58a:	f000 80a4 	beq.w	6d6 <storage_configure()+0x1f6>
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     58e:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     592:	2800      	cmp	r0, #0
     594:	f040 808d 	bne.w	6b2 <storage_configure()+0x1d2>
     598:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     59c:	b9a5      	cbnz	r5, 5c8 <storage_configure()+0xe8>
     59e:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     5a2:	b9d0      	cbnz	r0, 5da <storage_configure()+0xfa>
     5a4:	4605      	mov	r5, r0
     5a6:	f8d4 7484 	ldr.w	r7, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     5aa:	b33f      	cbz	r7, 5fc <storage_configure()+0x11c>
          Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5ac:	f8d7 743c 	ldr.w	r7, [r7, #1084]	; 0x43c
     5b0:	0abf      	lsrs	r7, r7, #10
     5b2:	e023      	b.n	5fc <storage_configure()+0x11c>
    return m_fVol ? m_fVol->freeClusterCount() :
     5b4:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     5b8:	2800      	cmp	r0, #0
     5ba:	d179      	bne.n	6b0 <storage_configure()+0x1d0>
     5bc:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     5c0:	2d00      	cmp	r5, #0
     5c2:	f000 8085 	beq.w	6d0 <storage_configure()+0x1f0>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     5c6:	4606      	mov	r6, r0
     5c8:	4628      	mov	r0, r5
     5ca:	f008 f943 	bl	8854 <ExFatPartition::freeClusterCount()>
     5ce:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     5d0:	b156      	cbz	r6, 5e8 <storage_configure()+0x108>
     5d2:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     5d6:	2800      	cmp	r0, #0
     5d8:	d06f      	beq.n	6ba <storage_configure()+0x1da>
      return m_card->setDedicatedSpi(value);
     5da:	6803      	ldr	r3, [r0, #0]
     5dc:	2100      	movs	r1, #0
     5de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     5e0:	4798      	blx	r3
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     5e2:	2800      	cmp	r0, #0
     5e4:	bf08      	it	eq
     5e6:	2500      	moveq	r5, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
     5e8:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     5ec:	2b00      	cmp	r3, #0
     5ee:	d0da      	beq.n	5a6 <storage_configure()+0xc6>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     5f0:	799b      	ldrb	r3, [r3, #6]
     5f2:	f44f 7700 	mov.w	r7, #512	; 0x200
     5f6:	409f      	lsls	r7, r3
          Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5f8:	f3c7 2785 	ubfx	r7, r7, #10, #6
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     5fc:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 6e0 <storage_configure()+0x200>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     600:	2600      	movs	r6, #0
     602:	23fe      	movs	r3, #254	; 0xfe
     604:	f04f 090a 	mov.w	r9, #10
     608:	f8da 1000 	ldr.w	r1, [sl]
     60c:	4632      	mov	r2, r6
     60e:	4836      	ldr	r0, [pc, #216]	; (6e8 <storage_configure()+0x208>)
     610:	9100      	str	r1, [sp, #0]
     612:	4937      	ldr	r1, [pc, #220]	; (6f0 <storage_configure()+0x210>)
     614:	f00d fa14 	bl	da40 <Print::printf(char const*, ...)>
     618:	2112      	movs	r1, #18
     61a:	4836      	ldr	r0, [pc, #216]	; (6f4 <storage_configure()+0x214>)
     61c:	f00f fd7a 	bl	10114 <usb_serial_write>
     620:	4642      	mov	r2, r8
     622:	4633      	mov	r3, r6
     624:	4830      	ldr	r0, [pc, #192]	; (6e8 <storage_configure()+0x208>)
     626:	e9cd 9600 	strd	r9, r6, [sp]
     62a:	f00d fa2b 	bl	da84 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     62e:	2110      	movs	r1, #16
     630:	4831      	ldr	r0, [pc, #196]	; (6f8 <storage_configure()+0x218>)
     632:	f00f fd6f 	bl	10114 <usb_serial_write>
     636:	462a      	mov	r2, r5
     638:	4633      	mov	r3, r6
     63a:	482b      	ldr	r0, [pc, #172]	; (6e8 <storage_configure()+0x208>)
     63c:	e9cd 9600 	strd	r9, r6, [sp]
     640:	f00d fa20 	bl	da84 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     644:	210e      	movs	r1, #14
     646:	482d      	ldr	r0, [pc, #180]	; (6fc <storage_configure()+0x21c>)
     648:	f00f fd64 	bl	10114 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     64c:	4633      	mov	r3, r6
     64e:	464a      	mov	r2, r9
     650:	4639      	mov	r1, r7
     652:	4825      	ldr	r0, [pc, #148]	; (6e8 <storage_configure()+0x208>)
     654:	f00d fa02 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     658:	2106      	movs	r1, #6
     65a:	4829      	ldr	r0, [pc, #164]	; (700 <storage_configure()+0x220>)
     65c:	f00f fd5a 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     660:	4821      	ldr	r0, [pc, #132]	; (6e8 <storage_configure()+0x208>)
     662:	f00d f9d1 	bl	da08 <Print::println()>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     666:	4a27      	ldr	r2, [pc, #156]	; (704 <storage_configure()+0x224>)
     668:	6813      	ldr	r3, [r2, #0]
     66a:	2b13      	cmp	r3, #19
     66c:	dc09      	bgt.n	682 <storage_configure()+0x1a2>
          sd_name[fsCount] = name;
     66e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
     672:	f8da 0000 	ldr.w	r0, [sl]
     676:	6048      	str	r0, [r1, #4]
          sdx[fsCount++] = &fs;
     678:	1c59      	adds	r1, r3, #1
     67a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     67e:	6011      	str	r1, [r2, #0]
     680:	655c      	str	r4, [r3, #84]	; 0x54
          filing_init();
     682:	f000 ffcb 	bl	161c <filing_init()>
     686:	2301      	movs	r3, #1
          have_disk=1;
     688:	4a18      	ldr	r2, [pc, #96]	; (6ec <storage_configure()+0x20c>)
     68a:	6013      	str	r3, [r2, #0]
  }
     68c:	b002      	add	sp, #8
     68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     692:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
  uint32_t clusterCount() const {
     696:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
     69a:	b1ab      	cbz	r3, 6c8 <storage_configure()+0x1e8>
          uint64_t totalSize = sdx[ii].clusterCount();
     69c:	f8d3 8430 	ldr.w	r8, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     6a0:	2800      	cmp	r0, #0
     6a2:	f47f af5a 	bne.w	55a <storage_configure()+0x7a>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     6a6:	4618      	mov	r0, r3
     6a8:	f008 f8d4 	bl	8854 <ExFatPartition::freeClusterCount()>
     6ac:	4605      	mov	r5, r0
     6ae:	e79b      	b.n	5e8 <storage_configure()+0x108>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     6b0:	2600      	movs	r6, #0
    return m_fVol ? m_fVol->freeClusterCount() :
     6b2:	f00a f84f 	bl	a754 <FatPartition::freeClusterCount()>
     6b6:	4605      	mov	r5, r0
     6b8:	e78a      	b.n	5d0 <storage_configure()+0xf0>
     6ba:	4605      	mov	r5, r0
     6bc:	e794      	b.n	5e8 <storage_configure()+0x108>
     6be:	4618      	mov	r0, r3
     6c0:	f00a f848 	bl	a754 <FatPartition::freeClusterCount()>
     6c4:	4605      	mov	r5, r0
     6c6:	e78f      	b.n	5e8 <storage_configure()+0x108>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     6c8:	b108      	cbz	r0, 6ce <storage_configure()+0x1ee>
     6ca:	4698      	mov	r8, r3
     6cc:	e745      	b.n	55a <storage_configure()+0x7a>
     6ce:	4680      	mov	r8, r0
  uint32_t bytesPerCluster() const {
     6d0:	2700      	movs	r7, #0
     6d2:	463d      	mov	r5, r7
     6d4:	e792      	b.n	5fc <storage_configure()+0x11c>
     6d6:	4605      	mov	r5, r0
     6d8:	e786      	b.n	5e8 <storage_configure()+0x108>
     6da:	bf00      	nop
     6dc:	20015918 	.word	0x20015918
     6e0:	200093f8 	.word	0x200093f8
     6e4:	200004f4 	.word	0x200004f4
     6e8:	20008a6c 	.word	0x20008a6c
     6ec:	20015124 	.word	0x20015124
     6f0:	20000520 	.word	0x20000520
     6f4:	20000538 	.word	0x20000538
     6f8:	2000054c 	.word	0x2000054c
     6fc:	20000560 	.word	0x20000560
     700:	20000570 	.word	0x20000570
     704:	20015e68 	.word	0x20015e68

00000708 <_GLOBAL__sub_I_storage>:
  }
     708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     70a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
        fsCount = 0;
     70e:	2400      	movs	r4, #0
     710:	4d35      	ldr	r5, [pc, #212]	; (7e8 <_GLOBAL__sub_I_storage+0xe0>)
class MTPStorage_SD : public mSD_Base
     712:	f06f 0101 	mvn.w	r1, #1
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     716:	4b35      	ldr	r3, [pc, #212]	; (7ec <_GLOBAL__sub_I_storage+0xe4>)
      MTPStorage_SD storage;
     718:	4f35      	ldr	r7, [pc, #212]	; (7f0 <_GLOBAL__sub_I_storage+0xe8>)
     71a:	4628      	mov	r0, r5
// old MTP Responder.
class MTPD {
public:

//  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
  MTPD(MTPStorage_SD *storage): storage_(storage) {}
     71c:	4e35      	ldr	r6, [pc, #212]	; (7f4 <_GLOBAL__sub_I_storage+0xec>)
     71e:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
     722:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
     726:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
        fsCount = 0;
     72a:	602c      	str	r4, [r5, #0]
     72c:	f885 40b0 	strb.w	r4, [r5, #176]	; 0xb0
     730:	f885 4100 	strb.w	r4, [r5, #256]	; 0x100
     734:	f885 4150 	strb.w	r4, [r5, #336]	; 0x150
class MTPStorage_SD : public mSD_Base
     738:	f8c5 419c 	str.w	r4, [r5, #412]	; 0x19c
     73c:	f8a5 41a8 	strh.w	r4, [r5, #424]	; 0x1a8
     740:	e9c5 422a 	strd	r4, r2, [r5, #168]	; 0xa8
     744:	e9c5 423e 	strd	r4, r2, [r5, #248]	; 0xf8
     748:	e9c5 4252 	strd	r4, r2, [r5, #328]	; 0x148
     74c:	e9c5 1468 	strd	r1, r4, [r5, #416]	; 0x1a0
     750:	463a      	mov	r2, r7
     752:	4929      	ldr	r1, [pc, #164]	; (7f8 <_GLOBAL__sub_I_storage+0xf0>)
  FsBaseFile() {}
     754:	e9c5 443b 	strd	r4, r4, [r5, #236]	; 0xec
     758:	e9c5 444f 	strd	r4, r4, [r5, #316]	; 0x13c
     75c:	e9c5 4463 	strd	r4, r4, [r5, #396]	; 0x18c
     760:	e9c5 4465 	strd	r4, r4, [r5, #404]	; 0x194
     764:	f00f fee0 	bl	10528 <__aeabi_atexit>
     768:	4630      	mov	r0, r6
     76a:	4621      	mov	r1, r4
     76c:	f44f 7200 	mov.w	r2, #512	; 0x200
     770:	f840 5b20 	str.w	r5, [r0], #32
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     774:	2529      	movs	r5, #41	; 0x29
     776:	f011 ffdb 	bl	12730 <memset>
     77a:	4621      	mov	r1, r4
     77c:	f44f 7200 	mov.w	r2, #512	; 0x200
     780:	f506 7008 	add.w	r0, r6, #544	; 0x220
     784:	f011 ffd4 	bl	12730 <memset>
     788:	f506 5180 	add.w	r1, r6, #4096	; 0x1000
     78c:	f240 10ff 	movw	r0, #511	; 0x1ff
  FsVolume() {}
     790:	4b1a      	ldr	r3, [pc, #104]	; (7fc <_GLOBAL__sub_I_storage+0xf4>)
     792:	f8c1 4424 	str.w	r4, [r1, #1060]	; 0x424
  SdFs sdx[nsd];
     796:	463a      	mov	r2, r7
     798:	f8a1 0420 	strh.w	r0, [r1, #1056]	; 0x420
     79c:	f881 4428 	strb.w	r4, [r1, #1064]	; 0x428
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     7a0:	4817      	ldr	r0, [pc, #92]	; (800 <_GLOBAL__sub_I_storage+0xf8>)
     7a2:	f8c1 442c 	str.w	r4, [r1, #1068]	; 0x42c
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     7a6:	2107      	movs	r1, #7
     7a8:	f8c3 0490 	str.w	r0, [r3, #1168]	; 0x490
     7ac:	f8c3 14a8 	str.w	r1, [r3, #1192]	; 0x4a8
	SPISettings() : _clock(4000000) {
     7b0:	4814      	ldr	r0, [pc, #80]	; (804 <_GLOBAL__sub_I_storage+0xfc>)
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     7b2:	4915      	ldr	r1, [pc, #84]	; (808 <_GLOBAL__sub_I_storage+0x100>)
     7b4:	f8c3 04a4 	str.w	r0, [r3, #1188]	; 0x4a4
     7b8:	4620      	mov	r0, r4
     7ba:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
     7be:	f8c3 4480 	str.w	r4, [r3, #1152]	; 0x480
     7c2:	f8c3 4484 	str.w	r4, [r3, #1156]	; 0x484
class SdBase : public Vol {
     7c6:	f8c3 448c 	str.w	r4, [r3, #1164]	; 0x48c
  SdioConfig() {}
     7ca:	f8a3 4498 	strh.w	r4, [r3, #1176]	; 0x498
  SharedSpiCard() {}
     7ce:	f883 44b1 	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     7d2:	f883 44b8 	strb.w	r4, [r3, #1208]	; 0x4b8
     7d6:	f883 44c8 	strb.w	r4, [r3, #1224]	; 0x4c8
  SharedSpiCard() {}
     7da:	f883 54ad 	strb.w	r5, [r3, #1197]	; 0x4ad
     7de:	490b      	ldr	r1, [pc, #44]	; (80c <_GLOBAL__sub_I_storage+0x104>)
  }
     7e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  SdFs sdx[nsd];
     7e4:	f00f bea0 	b.w	10528 <__aeabi_atexit>
     7e8:	20015e68 	.word	0x20015e68
     7ec:	20000c60 	.word	0x20000c60
     7f0:	20008e48 	.word	0x20008e48
     7f4:	20009b40 	.word	0x20009b40
     7f8:	00000071 	.word	0x00000071
     7fc:	20015918 	.word	0x20015918
     800:	20000ca8 	.word	0x20000ca8
     804:	003d0900 	.word	0x003d0900
     808:	20000bc8 	.word	0x20000bc8
     80c:	0000006d 	.word	0x0000006d

00000810 <setup>:
{
     810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     814:	4d5d      	ldr	r5, [pc, #372]	; (98c <setup+0x17c>)
     816:	b087      	sub	sp, #28
    set_arm_clock(24'000'000);
     818:	485d      	ldr	r0, [pc, #372]	; (990 <setup+0x180>)
				if (elapsed > 750) break;
     81a:	f240 28ee 	movw	r8, #750	; 0x2ee
     81e:	f00d fa7d 	bl	dd1c <set_arm_clock>
		uint32_t millis_begin = systick_millis_count;
     822:	4c5c      	ldr	r4, [pc, #368]	; (994 <setup+0x184>)
     824:	682e      	ldr	r6, [r5, #0]
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     826:	4f5c      	ldr	r7, [pc, #368]	; (998 <setup+0x188>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     828:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 9d0 <setup+0x1c0>
		yield();
     82c:	f00f fcf0 	bl	10210 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     830:	7823      	ldrb	r3, [r4, #0]
     832:	2b00      	cmp	r3, #0
     834:	f000 808f 	beq.w	956 <setup+0x146>
     838:	783b      	ldrb	r3, [r7, #0]
     83a:	07db      	lsls	r3, r3, #31
     83c:	f140 808b 	bpl.w	956 <setup+0x146>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     840:	682b      	ldr	r3, [r5, #0]
     842:	f8d9 2000 	ldr.w	r2, [r9]
     846:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     848:	2b0e      	cmp	r3, #14
     84a:	f240 8084 	bls.w	956 <setup+0x146>
  uint16_t *params=loadParameters();  // get parameters from EEPROM
     84e:	f004 f903 	bl	4a58 <loadParameters()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     852:	2106      	movs	r1, #6
     854:	4606      	mov	r6, r0
     856:	4851      	ldr	r0, [pc, #324]	; (99c <setup+0x18c>)
     858:	682b      	ldr	r3, [r5, #0]
     85a:	f00f fc5b 	bl	10114 <usb_serial_write>
     85e:	4850      	ldr	r0, [pc, #320]	; (9a0 <setup+0x190>)
  for(int ii=0;ii<16;ii++) {Serial.print(ii); Serial.print(" "); Serial.println(params[ii]);}
     860:	2400      	movs	r4, #0
     862:	f00d f8d1 	bl	da08 <Print::println()>
     866:	210c      	movs	r1, #12
     868:	484e      	ldr	r0, [pc, #312]	; (9a4 <setup+0x194>)
     86a:	f00f fc53 	bl	10114 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     86e:	484c      	ldr	r0, [pc, #304]	; (9a0 <setup+0x190>)
     870:	f836 1902 	ldrh.w	r1, [r6], #-2
     874:	4605      	mov	r5, r0
     876:	4f4c      	ldr	r7, [pc, #304]	; (9a8 <setup+0x198>)
     878:	f00d f8ba 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     87c:	4628      	mov	r0, r5
     87e:	f00d f8c3 	bl	da08 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
     882:	4621      	mov	r1, r4
     884:	4628      	mov	r0, r5
     886:	f00d f8b3 	bl	d9f0 <Print::print(long)>
     88a:	2101      	movs	r1, #1
     88c:	4638      	mov	r0, r7
     88e:	440c      	add	r4, r1
     890:	f00f fc40 	bl	10114 <usb_serial_write>
     894:	f836 1f02 	ldrh.w	r1, [r6, #2]!
     898:	4628      	mov	r0, r5
     89a:	f00d f8a9 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     89e:	4628      	mov	r0, r5
     8a0:	f00d f8b2 	bl	da08 <Print::println()>
     8a4:	2c10      	cmp	r4, #16
     8a6:	d1ec      	bne.n	882 <setup+0x72>
    if(CrashReport) Serial.print(CrashReport);
     8a8:	4840      	ldr	r0, [pc, #256]	; (9ac <setup+0x19c>)
     8aa:	f01a fd59 	bl	1b360 <___ZN16CrashReportClasscvbEv_veneer>
     8ae:	2800      	cmp	r0, #0
     8b0:	d15f      	bne.n	972 <setup+0x162>
        usb_init_events();
     8b2:	f003 fd75 	bl	43a0 <usb_init_events>
    SerNum=HW_OCOTP_MAC0 & 0xFFFFFF;
     8b6:	4c3e      	ldr	r4, [pc, #248]	; (9b0 <setup+0x1a0>)
    usbPowerSetup();  
     8b8:	f000 fa84 	bl	dc4 <usbPowerSetup()>
    lowPowerInit();
     8bc:	f7ff fca6 	bl	20c <lowPowerInit()>
    SerNum=HW_OCOTP_MAC0 & 0xFFFFFF;
     8c0:	4b3c      	ldr	r3, [pc, #240]	; (9b4 <setup+0x1a4>)
     8c2:	2108      	movs	r1, #8
     8c4:	483c      	ldr	r0, [pc, #240]	; (9b8 <setup+0x1a8>)
     8c6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
     8ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     8ce:	6023      	str	r3, [r4, #0]
     8d0:	f00f fc20 	bl	10114 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     8d4:	2300      	movs	r3, #0
     8d6:	2210      	movs	r2, #16
     8d8:	6821      	ldr	r1, [r4, #0]
     8da:	4831      	ldr	r0, [pc, #196]	; (9a0 <setup+0x190>)
     8dc:	f00d f8be 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
     8e0:	482f      	ldr	r0, [pc, #188]	; (9a0 <setup+0x190>)
     8e2:	f00d f891 	bl	da08 <Print::println()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     8e6:	f00f fc49 	bl	1017c <usb_serial_flush_output>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     8ea:	a804      	add	r0, sp, #16
     8ec:	f004 ff92 	bl	5814 <rtc_get_datetime(datetime_t*)>
     8f0:	2800      	cmp	r0, #0
     8f2:	d043      	beq.n	97c <setup+0x16c>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     8f4:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     8f8:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     8fc:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     900:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     904:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     908:	e9cd 2102 	strd	r2, r1, [sp, #8]
     90c:	e9cd 0400 	strd	r0, r4, [sp]
     910:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     914:	4929      	ldr	r1, [pc, #164]	; (9bc <setup+0x1ac>)
     916:	4822      	ldr	r0, [pc, #136]	; (9a0 <setup+0x190>)
     918:	f00d f892 	bl	da40 <Print::printf(char const*, ...)>
  Serial.println();
     91c:	4820      	ldr	r0, [pc, #128]	; (9a0 <setup+0x190>)
     91e:	f00d f873 	bl	da08 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     922:	210b      	movs	r1, #11
     924:	4826      	ldr	r0, [pc, #152]	; (9c0 <setup+0x1b0>)
     926:	f00f fbf5 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     92a:	481d      	ldr	r0, [pc, #116]	; (9a0 <setup+0x190>)
     92c:	f00d f86c 	bl	da08 <Print::println()>
  storage_configure();  
     930:	f7ff fdd6 	bl	4e0 <storage_configure()>
     934:	210a      	movs	r1, #10
     936:	4823      	ldr	r0, [pc, #140]	; (9c4 <setup+0x1b4>)
     938:	f00f fbec 	bl	10114 <usb_serial_write>
     93c:	4818      	ldr	r0, [pc, #96]	; (9a0 <setup+0x190>)
     93e:	f00d f863 	bl	da08 <Print::println()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     942:	f00f fc1b 	bl	1017c <usb_serial_flush_output>
  setup_ready=1;
     946:	4b20      	ldr	r3, [pc, #128]	; (9c8 <setup+0x1b8>)
     948:	2201      	movs	r2, #1
     94a:	601a      	str	r2, [r3, #0]
    setup1();
     94c:	f7ff fd9c 	bl	488 <setup1()>
}
     950:	b007      	add	sp, #28
     952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     956:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     958:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     95a:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     95c:	b132      	cbz	r2, 96c <setup+0x15c>
				if (elapsed > 2000) break;
     95e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     962:	f63f af74 	bhi.w	84e <setup+0x3e>
			yield();
     966:	f00f fc53 	bl	10210 <yield>
     96a:	e75f      	b.n	82c <setup+0x1c>
				if (elapsed > 750) break;
     96c:	4543      	cmp	r3, r8
     96e:	d9fa      	bls.n	966 <setup+0x156>
     970:	e76d      	b.n	84e <setup+0x3e>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     972:	490b      	ldr	r1, [pc, #44]	; (9a0 <setup+0x190>)
     974:	480d      	ldr	r0, [pc, #52]	; (9ac <setup+0x19c>)
     976:	f01a fd03 	bl	1b380 <___ZNK16CrashReportClass7printToER5Print_veneer>
     97a:	e79a      	b.n	8b2 <setup+0xa2>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     97c:	2114      	movs	r1, #20
     97e:	4813      	ldr	r0, [pc, #76]	; (9cc <setup+0x1bc>)
     980:	f00f fbc8 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     984:	4806      	ldr	r0, [pc, #24]	; (9a0 <setup+0x190>)
     986:	f00d f83f 	bl	da08 <Print::println()>
     98a:	e7b3      	b.n	8f4 <setup+0xe4>
     98c:	20016020 	.word	0x20016020
     990:	016e3600 	.word	0x016e3600
     994:	2001606f 	.word	0x2001606f
     998:	2001606e 	.word	0x2001606e
     99c:	20007f34 	.word	0x20007f34
     9a0:	20008a6c 	.word	0x20008a6c
     9a4:	20007f3c 	.word	0x20007f3c
     9a8:	20000b78 	.word	0x20000b78
     9ac:	20008a60 	.word	0x20008a60
     9b0:	2000b208 	.word	0x2000b208
     9b4:	401f4400 	.word	0x401f4400
     9b8:	20007f4c 	.word	0x20007f4c
     9bc:	20007f70 	.word	0x20007f70
     9c0:	20007f98 	.word	0x20007f98
     9c4:	20007fa4 	.word	0x20007fa4
     9c8:	2000e818 	.word	0x2000e818
     9cc:	20007f58 	.word	0x20007f58
     9d0:	20016030 	.word	0x20016030

000009d4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     9d4:	b510      	push	{r4, lr}
     9d6:	4604      	mov	r4, r0
		release();
     9d8:	f00c ff78 	bl	d8cc <DMAChannel::release()>
	}
     9dc:	4620      	mov	r0, r4
     9de:	bd10      	pop	{r4, pc}

000009e0 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     9e0:	4b28      	ldr	r3, [pc, #160]	; (a84 <acq_isr()+0xa4>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     9e2:	4a29      	ldr	r2, [pc, #164]	; (a88 <acq_isr()+0xa8>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     9e4:	4929      	ldr	r1, [pc, #164]	; (a8c <acq_isr()+0xac>)
  {
     9e6:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     9e8:	681c      	ldr	r4, [r3, #0]
     9ea:	7918      	ldrb	r0, [r3, #4]
     9ec:	6923      	ldr	r3, [r4, #16]
     9ee:	77c8      	strb	r0, [r1, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     9f0:	4293      	cmp	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     9f2:	bf28      	it	cs
     9f4:	f5a2 6200 	subcs.w	r2, r2, #2048	; 0x800
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     9f8:	4611      	mov	r1, r2
	asm("dsb");
     9fa:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
     9fe:	f502 6000 	add.w	r0, r2, #2048	; 0x800
     a02:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
     a06:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
     a0a:	4298      	cmp	r0, r3
     a0c:	bf34      	ite	cc
     a0e:	2001      	movcc	r0, #1
     a10:	2040      	movcs	r0, #64	; 0x40
     a12:	eb02 1040 	add.w	r0, r2, r0, lsl #5
	} while (location < end_addr);
     a16:	4283      	cmp	r3, r0
		SCB_CACHE_DCIMVAC = location;
     a18:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
     a1c:	461a      	mov	r2, r3
	} while (location < end_addr);
     a1e:	f103 0320 	add.w	r3, r3, #32
     a22:	d1f8      	bne.n	a16 <acq_isr()+0x36>
	asm("dsb");
     a24:	f3bf 8f4f 	dsb	sy
	asm("isb");
     a28:	f3bf 8f6f 	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     a2c:	4a18      	ldr	r2, [pc, #96]	; (a90 <acq_isr()+0xb0>)
     a2e:	4819      	ldr	r0, [pc, #100]	; (a94 <acq_isr()+0xb4>)
     a30:	6813      	ldr	r3, [r2, #0]
     a32:	4c19      	ldr	r4, [pc, #100]	; (a98 <acq_isr()+0xb8>)
     a34:	f500 7c00 	add.w	ip, r0, #512	; 0x200
     a38:	3301      	adds	r3, #1
     a3a:	6013      	str	r3, [r2, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     a3c:	8822      	ldrh	r2, [r4, #0]
     a3e:	3110      	adds	r1, #16
     a40:	f851 3c08 	ldr.w	r3, [r1, #-8]
     a44:	b212      	sxth	r2, r2
     a46:	4113      	asrs	r3, r2
     a48:	f840 3f04 	str.w	r3, [r0, #4]!
     a4c:	4560      	cmp	r0, ip
     a4e:	d1f5      	bne.n	a3c <acq_isr()+0x5c>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     a50:	4a12      	ldr	r2, [pc, #72]	; (a9c <acq_isr()+0xbc>)
     a52:	8813      	ldrh	r3, [r2, #0]
     a54:	b21b      	sxth	r3, r3
     a56:	b123      	cbz	r3, a62 <acq_isr()+0x82>
  { if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     a58:	8813      	ldrh	r3, [r2, #0]
     a5a:	b21b      	sxth	r3, r3
     a5c:	2b01      	cmp	r3, #1
     a5e:	d00a      	beq.n	a76 <acq_isr()+0x96>
  }
     a60:	bd10      	pop	{r4, pc}
  { if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     a62:	480f      	ldr	r0, [pc, #60]	; (aa0 <acq_isr()+0xc0>)
     a64:	f004 fd3e 	bl	54e4 <pushData(unsigned long*)>
     a68:	2800      	cmp	r0, #0
     a6a:	d1f9      	bne.n	a60 <acq_isr()+0x80>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     a6c:	4a0d      	ldr	r2, [pc, #52]	; (aa4 <acq_isr()+0xc4>)
     a6e:	6813      	ldr	r3, [r2, #0]
     a70:	3301      	adds	r3, #1
     a72:	6013      	str	r3, [r2, #0]
  }
     a74:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     a76:	480a      	ldr	r0, [pc, #40]	; (aa0 <acq_isr()+0xc0>)
     a78:	f000 fb26 	bl	10c8 <compress(void*)>
     a7c:	2800      	cmp	r0, #0
     a7e:	d1ef      	bne.n	a60 <acq_isr()+0x80>
     a80:	e7f4      	b.n	a6c <acq_isr()+0x8c>
     a82:	bf00      	nop
     a84:	20014824 	.word	0x20014824
     a88:	20200800 	.word	0x20200800
     a8c:	400e8000 	.word	0x400e8000
     a90:	20015844 	.word	0x20015844
     a94:	2001550c 	.word	0x2001550c
     a98:	20016050 	.word	0x20016050
     a9c:	2001604a 	.word	0x2001604a
     aa0:	20015510 	.word	0x20015510
     aa4:	20015848 	.word	0x20015848

00000aa8 <setAudioFrequency(int)>:
  {
     aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     aac:	2105      	movs	r1, #5
     aae:	4681      	mov	r9, r0
     ab0:	4859      	ldr	r0, [pc, #356]	; (c18 <setAudioFrequency(int)+0x170>)
	size_t println(int n)				{ return print(n) + println(); }
     ab2:	4f5a      	ldr	r7, [pc, #360]	; (c1c <setAudioFrequency(int)+0x174>)
     ab4:	ed2d 8b02 	vpush	{d8}
     ab8:	b083      	sub	sp, #12
     aba:	f00f fb2b 	bl	10114 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     abe:	f44f 7180 	mov.w	r1, #256	; 0x100
     ac2:	4857      	ldr	r0, [pc, #348]	; (c20 <setAudioFrequency(int)+0x178>)
     ac4:	f00c ff94 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     ac8:	4855      	ldr	r0, [pc, #340]	; (c20 <setAudioFrequency(int)+0x178>)
     aca:	f00c ff9d 	bl	da08 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     ace:	231a      	movs	r3, #26
     ad0:	ea4f 2009 	mov.w	r0, r9, lsl #8
    } while ((n2>64 && n0<54));
     ad4:	f8df c16c 	ldr.w	ip, [pc, #364]	; c44 <setAudioFrequency(int)+0x19c>
    {   n0++;
     ad8:	3301      	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     ada:	4602      	mov	r2, r0
        n1=0;
     adc:	2400      	movs	r4, #0
        {   n1++; 
     ade:	46a0      	mov	r8, r4
     ae0:	3401      	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     ae2:	fb97 f6f2 	sdiv	r6, r7, r2
     ae6:	1c75      	adds	r5, r6, #1
        } while ((n2>64) && (n1<=8));
     ae8:	4402      	add	r2, r0
     aea:	2d40      	cmp	r5, #64	; 0x40
     aec:	bfd4      	ite	le
     aee:	2100      	movle	r1, #0
     af0:	2101      	movgt	r1, #1
     af2:	2c08      	cmp	r4, #8
     af4:	dc01      	bgt.n	afa <setAudioFrequency(int)+0x52>
     af6:	2900      	cmp	r1, #0
     af8:	d1f1      	bne.n	ade <setAudioFrequency(int)+0x36>
    } while ((n2>64 && n0<54));
     afa:	2b35      	cmp	r3, #53	; 0x35
     afc:	4467      	add	r7, ip
     afe:	dc01      	bgt.n	b04 <setAudioFrequency(int)+0x5c>
     b00:	2900      	cmp	r1, #0
     b02:	d1e9      	bne.n	ad8 <setAudioFrequency(int)+0x30>
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     b04:	464a      	mov	r2, r9
     b06:	4947      	ldr	r1, [pc, #284]	; (c24 <setAudioFrequency(int)+0x17c>)
     b08:	4845      	ldr	r0, [pc, #276]	; (c20 <setAudioFrequency(int)+0x178>)
     b0a:	e9cd 4500 	strd	r4, r5, [sp]
     b0e:	f00c ff97 	bl	da40 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     b12:	ee07 9a90 	vmov	s15, r9
     b16:	ee06 5a90 	vmov	s13, r5
     b1a:	2103      	movs	r1, #3
     b1c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
     b20:	ee07 4a90 	vmov	s15, r4
     b24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
     b28:	483f      	ldr	r0, [pc, #252]	; (c28 <setAudioFrequency(int)+0x180>)
     b2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     b2e:	ed9f 3b34 	vldr	d3, [pc, #208]	; c00 <setAudioFrequency(int)+0x158>
     b32:	ed9f 4b35 	vldr	d4, [pc, #212]	; c08 <setAudioFrequency(int)+0x160>
     b36:	ee25 5b03 	vmul.f64	d5, d5, d3
     b3a:	ee25 7b07 	vmul.f64	d7, d5, d7
     b3e:	ee27 7b06 	vmul.f64	d7, d7, d6
     b42:	ee87 8b04 	vdiv.f64	d8, d7, d4
     b46:	f00f fae5 	bl	10114 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     b4a:	2102      	movs	r1, #2
     b4c:	4834      	ldr	r0, [pc, #208]	; (c20 <setAudioFrequency(int)+0x178>)
     b4e:	eeb0 0b48 	vmov.f64	d0, d8
     b52:	f00c ffe9 	bl	db28 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     b56:	4832      	ldr	r0, [pc, #200]	; (c20 <setAudioFrequency(int)+0x178>)
     b58:	f00c ff56 	bl	da08 <Print::println()>
    int c0 = C;
     b5c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     b60:	f242 7110 	movw	r1, #10000	; 0x2710
    int c0 = C;
     b64:	ee17 3a90 	vmov	r3, s15
    int c1 = C * c2 - (c0 * c2);
     b68:	fb01 f203 	mul.w	r2, r1, r3
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     b70:	ee07 2a10 	vmov	s14, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b74:	f443 1389 	orr.w	r3, r3, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b78:	4a2c      	ldr	r2, [pc, #176]	; (c2c <setAudioFrequency(int)+0x184>)
    int c1 = C * c2 - (c0 * c2);
     b7a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b7e:	6713      	str	r3, [r2, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     b80:	ed9f 6b23 	vldr	d6, [pc, #140]	; c10 <setAudioFrequency(int)+0x168>
     b84:	ee98 7b06 	vfnms.f64	d7, d8, d6
     b88:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     b8c:	ee17 3a90 	vmov	r3, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b90:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     b98:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     b9c:	6f13      	ldr	r3, [r2, #112]	; 0x70
     b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     ba2:	6713      	str	r3, [r2, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     ba4:	6f13      	ldr	r3, [r2, #112]	; 0x70
     ba6:	2b00      	cmp	r3, #0
     ba8:	dafc      	bge.n	ba4 <setAudioFrequency(int)+0xfc>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     baa:	f8d2 1170 	ldr.w	r1, [r2, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bae:	ea4f 1388 	mov.w	r3, r8, lsl #6
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bb2:	481f      	ldr	r0, [pc, #124]	; (c30 <setAudioFrequency(int)+0x188>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bb4:	f006 063f 	and.w	r6, r6, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bb8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bbc:	4008      	ands	r0, r1
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bbe:	491d      	ldr	r1, [pc, #116]	; (c34 <setAudioFrequency(int)+0x18c>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bc0:	f8c2 0170 	str.w	r0, [r2, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     bc4:	6f10      	ldr	r0, [r2, #112]	; 0x70
     bc6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
     bca:	6710      	str	r0, [r2, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bcc:	69ca      	ldr	r2, [r1, #28]
     bce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bd6:	61ca      	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bd8:	4a17      	ldr	r2, [pc, #92]	; (c38 <setAudioFrequency(int)+0x190>)
     bda:	6a88      	ldr	r0, [r1, #40]	; 0x28
     bdc:	4002      	ands	r2, r0
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bde:	4817      	ldr	r0, [pc, #92]	; (c3c <setAudioFrequency(int)+0x194>)
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     be0:	4313      	orrs	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     be2:	4a17      	ldr	r2, [pc, #92]	; (c40 <setAudioFrequency(int)+0x198>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     be4:	4333      	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     be6:	628b      	str	r3, [r1, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     be8:	6843      	ldr	r3, [r0, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     bea:	401a      	ands	r2, r3
     bec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bf0:	6042      	str	r2, [r0, #4]
  }
     bf2:	b003      	add	sp, #12
     bf4:	ecbd 8b02 	vpop	{d8}
     bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     bfc:	f3af 8000 	nop.w
     c00:	00000000 	.word	0x00000000
     c04:	40700000 	.word	0x40700000
     c08:	00000000 	.word	0x00000000
     c0c:	4176e360 	.word	0x4176e360
     c10:	00000000 	.word	0x00000000
     c14:	40c38800 	.word	0x40c38800
     c18:	200004c8 	.word	0x200004c8
     c1c:	269fb200 	.word	0x269fb200
     c20:	20008a6c 	.word	0x20008a6c
     c24:	200004d0 	.word	0x200004d0
     c28:	200004f0 	.word	0x200004f0
     c2c:	400d8000 	.word	0x400d8000
     c30:	ff7f7fff 	.word	0xff7f7fff
     c34:	400fc000 	.word	0x400fc000
     c38:	fffffe00 	.word	0xfffffe00
     c3c:	400ac000 	.word	0x400ac000
     c40:	fff7fff8 	.word	0xfff7fff8
     c44:	016e3600 	.word	0x016e3600

00000c48 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c48:	4a1a      	ldr	r2, [pc, #104]	; (cb4 <i2s_setup()+0x6c>)
     c4a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     c4c:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c4e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c52:	4c19      	ldr	r4, [pc, #100]	; (cb8 <i2s_setup()+0x70>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c54:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c56:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     c5a:	2b00      	cmp	r3, #0
     c5c:	db28      	blt.n	cb0 <i2s_setup()+0x68>
    int fs = fsamp;
     c5e:	4b17      	ldr	r3, [pc, #92]	; (cbc <i2s_setup()+0x74>)
     c60:	6818      	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     c62:	f7ff ff21 	bl	aa8 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c66:	4b16      	ldr	r3, [pc, #88]	; (cc0 <i2s_setup()+0x78>)
     c68:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c6a:	4916      	ldr	r1, [pc, #88]	; (cc4 <i2s_setup()+0x7c>)
     c6c:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c6e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     c72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     c76:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c7a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     c7e:	2204      	movs	r2, #4
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c80:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     c88:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     c8a:	f04f 60a0 	mov.w	r0, #83886080	; 0x5000000
    I2S1_RMR = 0;
     c8e:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     c92:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     c96:	490c      	ldr	r1, [pc, #48]	; (cc8 <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     c98:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     c9c:	4a0b      	ldr	r2, [pc, #44]	; (ccc <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     c9e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     ca2:	4b0b      	ldr	r3, [pc, #44]	; (cd0 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     ca4:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     ca8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     cb0:	bd10      	pop	{r4, pc}
     cb2:	bf00      	nop
     cb4:	400fc000 	.word	0x400fc000
     cb8:	40384000 	.word	0x40384000
     cbc:	200093ec 	.word	0x200093ec
     cc0:	401f8000 	.word	0x401f8000
     cc4:	401f8400 	.word	0x401f8400
     cc8:	0003001b 	.word	0x0003001b
     ccc:	1f1f1f00 	.word	0x1f1f1f00
     cd0:	92000001 	.word	0x92000001

00000cd4 <dma_setup()>:
  {
     cd4:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     cd6:	4c1c      	ldr	r4, [pc, #112]	; (d48 <dma_setup()+0x74>)
     cd8:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     cda:	4d1c      	ldr	r5, [pc, #112]	; (d4c <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     cdc:	4620      	mov	r0, r4
     cde:	f00c fd9b 	bl	d818 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     ce2:	6823      	ldr	r3, [r4, #0]
     ce4:	481a      	ldr	r0, [pc, #104]	; (d50 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dma.TCD->DADDR = i2s_buffer;
     cea:	491a      	ldr	r1, [pc, #104]	; (d54 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     cec:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     cee:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     cf0:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     cf2:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     cf4:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     cf6:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     cf8:	4d17      	ldr	r5, [pc, #92]	; (d58 <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     cfa:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     cfc:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     cfe:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d00:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d02:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     d04:	2204      	movs	r2, #4
     d06:	4915      	ldr	r1, [pc, #84]	; (d5c <dma_setup()+0x88>)
     d08:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     d0a:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     d0c:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d0e:	4d14      	ldr	r5, [pc, #80]	; (d60 <dma_setup()+0x8c>)
     d10:	60da      	str	r2, [r3, #12]
		*mux = 0;
     d12:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d16:	4b13      	ldr	r3, [pc, #76]	; (d64 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d18:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d1c:	2101      	movs	r1, #1
     d1e:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d20:	4811      	ldr	r0, [pc, #68]	; (d68 <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d22:	f002 051f 	and.w	r5, r2, #31
     d26:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d2a:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d2e:	40a9      	lsls	r1, r5
     d30:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d32:	4d0e      	ldr	r5, [pc, #56]	; (d6c <dma_setup()+0x98>)
     d34:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d38:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d3a:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d3c:	490c      	ldr	r1, [pc, #48]	; (d70 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     d3e:	4b0d      	ldr	r3, [pc, #52]	; (d74 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d40:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     d42:	7922      	ldrb	r2, [r4, #4]
     d44:	76da      	strb	r2, [r3, #27]
  }
     d46:	bd38      	pop	{r3, r4, r5, pc}
     d48:	20014824 	.word	0x20014824
     d4c:	02020000 	.word	0x02020000
     d50:	403840a0 	.word	0x403840a0
     d54:	20200000 	.word	0x20200000
     d58:	fffff000 	.word	0xfffff000
     d5c:	400ec000 	.word	0x400ec000
     d60:	80000013 	.word	0x80000013
     d64:	38003840 	.word	0x38003840
     d68:	20009800 	.word	0x20009800
     d6c:	000009e1 	.word	0x000009e1
     d70:	e000e400 	.word	0xe000e400
     d74:	400e8000 	.word	0x400e8000

00000d78 <acqModifyFrequency(unsigned long)>:
  {
     d78:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     d7a:	4c08      	ldr	r4, [pc, #32]	; (d9c <acqModifyFrequency(unsigned long)+0x24>)
     d7c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     d80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     d84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     d88:	f7ff fe8e 	bl	aa8 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     d8c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     d90:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     d94:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     d98:	bd10      	pop	{r4, pc}
     d9a:	bf00      	nop
     d9c:	40384000 	.word	0x40384000

00000da0 <_GLOBAL__sub_I_procCount>:
		begin();
     da0:	4805      	ldr	r0, [pc, #20]	; (db8 <_GLOBAL__sub_I_procCount+0x18>)
     da2:	2100      	movs	r1, #0

  void acqStop(void)
  {
    i2s_stop();
    adc_exit();
     da4:	b508      	push	{r3, lr}
     da6:	f00c fd37 	bl	d818 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     daa:	4a04      	ldr	r2, [pc, #16]	; (dbc <_GLOBAL__sub_I_procCount+0x1c>)
     dac:	4904      	ldr	r1, [pc, #16]	; (dc0 <_GLOBAL__sub_I_procCount+0x20>)
     dae:	4802      	ldr	r0, [pc, #8]	; (db8 <_GLOBAL__sub_I_procCount+0x18>)
     db0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     db4:	f00f bbb8 	b.w	10528 <__aeabi_atexit>
     db8:	20014824 	.word	0x20014824
     dbc:	20008e48 	.word	0x20008e48
     dc0:	000009d5 	.word	0x000009d5

00000dc4 <usbPowerSetup()>:
    }
    void usbPowerOn()  { GPIO8_DR_SET = 1<<26; }
    void usbPowerOff() { GPIO8_DR_CLEAR = 1<<26; }

    void usbPowerSetup(void)
    {
     dc4:	b410      	push	{r4}
      GPIO8_GDIR |= 1<<26;
     dc6:	4b0a      	ldr	r3, [pc, #40]	; (df0 <usbPowerSetup()+0x2c>)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
     dc8:	2405      	movs	r4, #5
     dca:	4a0a      	ldr	r2, [pc, #40]	; (df4 <usbPowerSetup()+0x30>)
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
     dcc:	2008      	movs	r0, #8
    void usbPowerOn()  { GPIO8_DR_SET = 1<<26; }
     dce:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
     dd2:	f8c2 40b4 	str.w	r4, [r2, #180]	; 0xb4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
     dd6:	f8c2 02a4 	str.w	r0, [r2, #676]	; 0x2a4
      #if USB_POWER==1
        usbPowerInit();
        usbPowerOn();
        delay(100);
     dda:	2064      	movs	r0, #100	; 0x64
      GPIO8_GDIR |= 1<<26;
     ddc:	685a      	ldr	r2, [r3, #4]
      #endif
    }
     dde:	f85d 4b04 	ldr.w	r4, [sp], #4
      GPIO8_GDIR |= 1<<26;
     de2:	430a      	orrs	r2, r1
     de4:	605a      	str	r2, [r3, #4]
    void usbPowerOn()  { GPIO8_DR_SET = 1<<26; }
     de6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
        delay(100);
     dea:	f00d b90f 	b.w	e00c <delay>
     dee:	bf00      	nop
     df0:	42008000 	.word	0x42008000
     df4:	401f8000 	.word	0x401f8000

00000df8 <adc_exit()>:
    // handle ADC shutdown pin
    void adcReset(void) { digitalWrite(ADC_SHDNZ,LOW);}
    void adcStart(void) { digitalWrite(ADC_SHDNZ,HIGH);}

    void adc_exit(void)
    {
     df8:	b508      	push	{r3, lr}
    void adcReset(void) { digitalWrite(ADC_SHDNZ,LOW);}
     dfa:	2100      	movs	r1, #0
     dfc:	2003      	movs	r0, #3
     dfe:	f00d f983 	bl	e108 <digitalWrite>
            digitalWrite(ADC_EN,flag);
     e02:	2100      	movs	r1, #0
     e04:	2002      	movs	r0, #2
     e06:	f00d f97f 	bl	e108 <digitalWrite>
            delay(100);
     e0a:	2064      	movs	r0, #100	; 0x64
     e0c:	f00d f8fe 	bl	e00c <delay>
        digitalWrite(HP_ON,flag);
     e10:	2100      	movs	r1, #0
     e12:	2004      	movs	r0, #4
     e14:	f00d f978 	bl	e108 <digitalWrite>
    void usbPowerOff() { GPIO8_DR_CLEAR = 1<<26; }
     e18:	4b02      	ldr	r3, [pc, #8]	; (e24 <adc_exit()+0x2c>)
     e1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
     e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        acqPower(LOW);
        
        hpPower(LOW);
        usbPowerOff();
        usbPowerExit();
    }
     e22:	bd08      	pop	{r3, pc}
     e24:	42008000 	.word	0x42008000

00000e28 <adc_init()>:

    // initialize ADC
    void adc_init(void)
    {
     e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      GPIO8_GDIR |= 1<<26;
     e2c:	4b6e      	ldr	r3, [pc, #440]	; (fe8 <adc_init()+0x1c0>)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
     e2e:	2105      	movs	r1, #5
     e30:	4a6e      	ldr	r2, [pc, #440]	; (fec <adc_init()+0x1c4>)
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
     e32:	2408      	movs	r4, #8
    {
     e34:	b082      	sub	sp, #8
        delay(100);
     e36:	2064      	movs	r0, #100	; 0x64
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
     e38:	f8c2 10b4 	str.w	r1, [r2, #180]	; 0xb4
    void usbPowerOn()  { GPIO8_DR_SET = 1<<26; }
     e3c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
     e40:	f8c2 42a4 	str.w	r4, [r2, #676]	; 0x2a4
      GPIO8_GDIR |= 1<<26;
     e44:	685a      	ldr	r2, [r3, #4]
     e46:	430a      	orrs	r2, r1
     e48:	605a      	str	r2, [r3, #4]
    void usbPowerOn()  { GPIO8_DR_SET = 1<<26; }
     e4a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
        delay(100);
     e4e:	f00d f8dd 	bl	e00c <delay>
      usbPowerSetup();
        #if defined(ADC_EN) 
            pinMode(ADC_EN,OUTPUT);
     e52:	2101      	movs	r1, #1
     e54:	2002      	movs	r0, #2
     e56:	f00d f981 	bl	e15c <pinMode>
            digitalWrite(ADC_EN,flag);
     e5a:	2101      	movs	r1, #1
     e5c:	2002      	movs	r0, #2
     e5e:	f00d f953 	bl	e108 <digitalWrite>
            delay(100);
     e62:	2064      	movs	r0, #100	; 0x64
     e64:	f00d f8d2 	bl	e00c <delay>
        acqPower(HIGH);

        // preamp

        #if HP_ON>0
          pinMode(HP_ON,OUTPUT);
     e68:	2101      	movs	r1, #1
     e6a:	2004      	movs	r0, #4
     e6c:	f00d f976 	bl	e15c <pinMode>
        digitalWrite(HP_ON,flag);
     e70:	2101      	movs	r1, #1
     e72:	2004      	movs	r0, #4
     e74:	f00d f948 	bl	e108 <digitalWrite>
        #endif
        hpPower(HIGH);

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
     e78:	2101      	movs	r1, #1
     e7a:	2003      	movs	r0, #3
     e7c:	f00d f96e 	bl	e15c <pinMode>
    void adcReset(void) { digitalWrite(ADC_SHDNZ,LOW);}
     e80:	2100      	movs	r1, #0
     e82:	2003      	movs	r0, #3
     e84:	f00d f940 	bl	e108 <digitalWrite>
        adcReset();
        delay(100);
     e88:	2064      	movs	r0, #100	; 0x64
     e8a:	f00d f8bf 	bl	e00c <delay>
    void adcStart(void) { digitalWrite(ADC_SHDNZ,HIGH);}
     e8e:	2101      	movs	r1, #1
     e90:	2003      	movs	r0, #3
     e92:	f00d f939 	bl	e108 <digitalWrite>
        adcStart();

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&mWire,100'000); 
     e96:	4a56      	ldr	r2, [pc, #344]	; (ff0 <adc_init()+0x1c8>)
     e98:	4956      	ldr	r1, [pc, #344]	; (ff4 <adc_init()+0x1cc>)
     e9a:	a801      	add	r0, sp, #4
     e9c:	f001 f9a2 	bl	21e4 <i2c_class::i2c_class(TwoWire*, unsigned long)>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
     ea0:	214c      	movs	r1, #76	; 0x4c
     ea2:	a801      	add	r0, sp, #4
     ea4:	f001 f9b2 	bl	220c <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
     ea8:	224c      	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
     eaa:	b930      	cbnz	r0, eba <adc_init()+0x92>
            else
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]); continue;}
     eac:	4952      	ldr	r1, [pc, #328]	; (ff8 <adc_init()+0x1d0>)
     eae:	4853      	ldr	r0, [pc, #332]	; (ffc <adc_init()+0x1d4>)
     eb0:	f00c fdc6 	bl	da40 <Print::printf(char const*, ...)>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
            
        }
    }
     eb4:	b002      	add	sp, #8
     eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                Serial.printf("found %x\n",i2c_addr[ii]);
     eba:	4951      	ldr	r1, [pc, #324]	; (1000 <adc_init()+0x1d8>)
     ebc:	484f      	ldr	r0, [pc, #316]	; (ffc <adc_init()+0x1d4>)
     ebe:	f00c fdbf 	bl	da40 <Print::printf(char const*, ...)>
            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
     ec2:	2381      	movs	r3, #129	; 0x81
     ec4:	2202      	movs	r2, #2
     ec6:	214c      	movs	r1, #76	; 0x4c
     ec8:	a801      	add	r0, sp, #4
     eca:	4d4e      	ldr	r5, [pc, #312]	; (1004 <adc_init()+0x1dc>)
     ecc:	f001 f9ec 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
     ed0:	2330      	movs	r3, #48	; 0x30
     ed2:	2207      	movs	r2, #7
     ed4:	214c      	movs	r1, #76	; 0x4c
     ed6:	a801      	add	r0, sp, #4
     ed8:	f001 f9e6 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
     edc:	4622      	mov	r2, r4
     ede:	240b      	movs	r4, #11
     ee0:	2300      	movs	r3, #0
     ee2:	214c      	movs	r1, #76	; 0x4c
     ee4:	a801      	add	r0, sp, #4
     ee6:	f001 f9df 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     eea:	4622      	mov	r2, r4
            for(int jj=0;jj<4;jj++)
     eec:	3401      	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     eee:	f815 3b01 	ldrb.w	r3, [r5], #1
     ef2:	214c      	movs	r1, #76	; 0x4c
            for(int jj=0;jj<4;jj++)
     ef4:	b2e4      	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     ef6:	a801      	add	r0, sp, #4
     ef8:	f001 f9d6 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
     efc:	2c0f      	cmp	r4, #15
     efe:	d1f4      	bne.n	eea <adc_init()+0xc2>
            i2c.write(i2c_addr[ii],0x73,0x30);
     f00:	2330      	movs	r3, #48	; 0x30
     f02:	2273      	movs	r2, #115	; 0x73
     f04:	214c      	movs	r1, #76	; 0x4c
     f06:	a801      	add	r0, sp, #4
     f08:	f001 f9ce 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x74,0x20);	
     f0c:	4d3e      	ldr	r5, [pc, #248]	; (1008 <adc_init()+0x1e0>)
     f0e:	2320      	movs	r3, #32
     f10:	2274      	movs	r2, #116	; 0x74
     f12:	214c      	movs	r1, #76	; 0x4c
     f14:	a801      	add	r0, sp, #4
     f16:	f001 f9c7 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x75,0xE0);
     f1a:	23e0      	movs	r3, #224	; 0xe0
     f1c:	2275      	movs	r2, #117	; 0x75
     f1e:	214c      	movs	r1, #76	; 0x4c
     f20:	a801      	add	r0, sp, #4
     f22:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1018 <adc_init()+0x1f0>
     f26:	f001 f9bf 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
     f2a:	4f38      	ldr	r7, [pc, #224]	; (100c <adc_init()+0x1e4>)
     f2c:	2325      	movs	r3, #37	; 0x25
     f2e:	226b      	movs	r2, #107	; 0x6b
     f30:	214c      	movs	r1, #76	; 0x4c
     f32:	a801      	add	r0, sp, #4
     f34:	1d2e      	adds	r6, r5, #4
     f36:	f001 f9b7 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
     f3a:	2360      	movs	r3, #96	; 0x60
     f3c:	223b      	movs	r2, #59	; 0x3b
     f3e:	214c      	movs	r1, #76	; 0x4c
     f40:	a801      	add	r0, sp, #4
     f42:	f001 f9b1 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
     f46:	f815 4b01 	ldrb.w	r4, [r5], #1
     f4a:	2388      	movs	r3, #136	; 0x88
     f4c:	214c      	movs	r1, #76	; 0x4c
     f4e:	a801      	add	r0, sp, #4
     f50:	4622      	mov	r2, r4
     f52:	f001 f9a9 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
     f56:	f8b8 3000 	ldrh.w	r3, [r8]
     f5a:	1c62      	adds	r2, r4, #1
     f5c:	214c      	movs	r1, #76	; 0x4c
     f5e:	b2db      	uxtb	r3, r3
     f60:	a801      	add	r0, sp, #4
     f62:	b2d2      	uxtb	r2, r2
     f64:	f001 f9a0 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
     f68:	883b      	ldrh	r3, [r7, #0]
     f6a:	1ca2      	adds	r2, r4, #2
     f6c:	214c      	movs	r1, #76	; 0x4c
     f6e:	3b37      	subs	r3, #55	; 0x37
     f70:	a801      	add	r0, sp, #4
     f72:	b2d2      	uxtb	r2, r2
     f74:	b2db      	uxtb	r3, r3
     f76:	f001 f997 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
     f7a:	1ce2      	adds	r2, r4, #3
     f7c:	2380      	movs	r3, #128	; 0x80
     f7e:	214c      	movs	r1, #76	; 0x4c
     f80:	b2d2      	uxtb	r2, r2
     f82:	a801      	add	r0, sp, #4
     f84:	f001 f990 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
     f88:	1d22      	adds	r2, r4, #4
     f8a:	2300      	movs	r3, #0
     f8c:	214c      	movs	r1, #76	; 0x4c
     f8e:	b2d2      	uxtb	r2, r2
     f90:	a801      	add	r0, sp, #4
     f92:	f001 f989 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
     f96:	42b5      	cmp	r5, r6
     f98:	d1d5      	bne.n	f46 <adc_init()+0x11e>
     f9a:	2106      	movs	r1, #6
     f9c:	481c      	ldr	r0, [pc, #112]	; (1010 <adc_init()+0x1e8>)
     f9e:	f00f f8b9 	bl	10114 <usb_serial_write>
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
     fa2:	2215      	movs	r2, #21
     fa4:	214c      	movs	r1, #76	; 0x4c
     fa6:	a801      	add	r0, sp, #4
     fa8:	f001 f944 	bl	2234 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     fac:	2300      	movs	r3, #0
     fae:	4601      	mov	r1, r0
     fb0:	2210      	movs	r2, #16
     fb2:	4812      	ldr	r0, [pc, #72]	; (ffc <adc_init()+0x1d4>)
     fb4:	f00c fd52 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
     fb8:	4810      	ldr	r0, [pc, #64]	; (ffc <adc_init()+0x1d4>)
     fba:	f00c fd25 	bl	da08 <Print::println()>
     fbe:	2106      	movs	r1, #6
     fc0:	4814      	ldr	r0, [pc, #80]	; (1014 <adc_init()+0x1ec>)
     fc2:	f00f f8a7 	bl	10114 <usb_serial_write>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
     fc6:	2276      	movs	r2, #118	; 0x76
     fc8:	214c      	movs	r1, #76	; 0x4c
     fca:	a801      	add	r0, sp, #4
     fcc:	f001 f932 	bl	2234 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     fd0:	2300      	movs	r3, #0
     fd2:	4601      	mov	r1, r0
     fd4:	2210      	movs	r2, #16
     fd6:	4809      	ldr	r0, [pc, #36]	; (ffc <adc_init()+0x1d4>)
     fd8:	f00c fd40 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
     fdc:	4807      	ldr	r0, [pc, #28]	; (ffc <adc_init()+0x1d4>)
     fde:	f00c fd13 	bl	da08 <Print::println()>
    }
     fe2:	b002      	add	sp, #8
     fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fe8:	42008000 	.word	0x42008000
     fec:	401f8000 	.word	0x401f8000
     ff0:	000186a0 	.word	0x000186a0
     ff4:	20008a7c 	.word	0x20008a7c
     ff8:	200006c8 	.word	0x200006c8
     ffc:	20008a6c 	.word	0x20008a6c
    1000:	200006bc 	.word	0x200006bc
    1004:	200009b0 	.word	0x200009b0
    1008:	200009ac 	.word	0x200009ac
    100c:	20016042 	.word	0x20016042
    1010:	200006e0 	.word	0x200006e0
    1014:	200006e8 	.word	0x200006e8
    1018:	20009418 	.word	0x20009418

0000101c <setAGain(signed char)>:

    void setAGain(int8_t again)
    {
    101c:	b570      	push	{r4, r5, r6, lr}
    101e:	b082      	sub	sp, #8
    1020:	4605      	mov	r5, r0
    1022:	4c0b      	ldr	r4, [pc, #44]	; (1050 <setAGain(signed char)+0x34>)
        i2c_class i2c(&mWire,100'000);
    1024:	4a0b      	ldr	r2, [pc, #44]	; (1054 <setAGain(signed char)+0x38>)
    1026:	a801      	add	r0, sp, #4
    1028:	490b      	ldr	r1, [pc, #44]	; (1058 <setAGain(signed char)+0x3c>)
        for(int ii=0; ii<NPORT_I2S; ii++)
            for(int jj=0; jj<4; jj++)
            {
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    102a:	b2ed      	uxtb	r5, r5
        i2c_class i2c(&mWire,100'000);
    102c:	f001 f8da 	bl	21e4 <i2c_class::i2c_class(TwoWire*, unsigned long)>
            for(int jj=0; jj<4; jj++)
    1030:	1ce6      	adds	r6, r4, #3
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    1032:	223c      	movs	r2, #60	; 0x3c
    1034:	3201      	adds	r2, #1
    1036:	462b      	mov	r3, r5
    1038:	214c      	movs	r1, #76	; 0x4c
    103a:	a801      	add	r0, sp, #4
    103c:	b2d2      	uxtb	r2, r2
    103e:	f001 f933 	bl	22a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    1042:	42b4      	cmp	r4, r6
    1044:	d002      	beq.n	104c <setAGain(signed char)+0x30>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    1046:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    104a:	e7f3      	b.n	1034 <setAGain(signed char)+0x18>
            }
    }
    104c:	b002      	add	sp, #8
    104e:	bd70      	pop	{r4, r5, r6, pc}
    1050:	200009ac 	.word	0x200009ac
    1054:	000186a0 	.word	0x000186a0
    1058:	20008a7c 	.word	0x20008a7c

0000105c <adcStatus()>:
    void adcStatus(void)
    {
    105c:	b510      	push	{r4, lr}
    105e:	b082      	sub	sp, #8
        i2c_class i2c(&mWire,100'000);
    1060:	4a14      	ldr	r2, [pc, #80]	; (10b4 <adcStatus()+0x58>)
    1062:	4915      	ldr	r1, [pc, #84]	; (10b8 <adcStatus()+0x5c>)
    1064:	a801      	add	r0, sp, #4
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1066:	4c15      	ldr	r4, [pc, #84]	; (10bc <adcStatus()+0x60>)
    1068:	f001 f8bc 	bl	21e4 <i2c_class::i2c_class(TwoWire*, unsigned long)>
    106c:	2107      	movs	r1, #7
    106e:	4814      	ldr	r0, [pc, #80]	; (10c0 <adcStatus()+0x64>)
    1070:	f00f f850 	bl	10114 <usb_serial_write>
        for(int ii=0; ii<NPORT_I2S; ii++)
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    1074:	2215      	movs	r2, #21
    1076:	214c      	movs	r1, #76	; 0x4c
    1078:	a801      	add	r0, sp, #4
    107a:	f001 f8db 	bl	2234 <i2c_class::read(unsigned char, unsigned char)>
    107e:	2300      	movs	r3, #0
    1080:	4601      	mov	r1, r0
    1082:	2210      	movs	r2, #16
    1084:	4620      	mov	r0, r4
    1086:	f00c fce9 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    108a:	2107      	movs	r1, #7
    108c:	480d      	ldr	r0, [pc, #52]	; (10c4 <adcStatus()+0x68>)
    108e:	f00f f841 	bl	10114 <usb_serial_write>
            Serial.print("\n0x76: "); Serial.print(i2c.read(i2c_addr[ii],0x76),HEX);
    1092:	2276      	movs	r2, #118	; 0x76
    1094:	214c      	movs	r1, #76	; 0x4c
    1096:	a801      	add	r0, sp, #4
    1098:	f001 f8cc 	bl	2234 <i2c_class::read(unsigned char, unsigned char)>
    109c:	2300      	movs	r3, #0
    109e:	4601      	mov	r1, r0
    10a0:	2210      	movs	r2, #16
    10a2:	4620      	mov	r0, r4
    10a4:	f00c fcda 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        }
        Serial.println();
    10a8:	4620      	mov	r0, r4
    10aa:	f00c fcad 	bl	da08 <Print::println()>
    }
    10ae:	b002      	add	sp, #8
    10b0:	bd10      	pop	{r4, pc}
    10b2:	bf00      	nop
    10b4:	000186a0 	.word	0x000186a0
    10b8:	20008a7c 	.word	0x20008a7c
    10bc:	20008a6c 	.word	0x20008a6c
    10c0:	200007e0 	.word	0x200007e0
    10c4:	200007e8 	.word	0x200007e8

000010c8 <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    10c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10cc:	b083      	sub	sp, #12
    10ce:	4605      	mov	r5, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    10d0:	f00d fd14 	bl	eafc <rtc_get>
    10d4:	4682      	mov	sl, r0
  uint32_t t1;
  t1 = micros();
    10d6:	f00c ffed 	bl	e0b4 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    10da:	4ba2      	ldr	r3, [pc, #648]	; (1364 <compress(void*)+0x29c>)
    10dc:	1f2c      	subs	r4, r5, #4
  t1 = micros();
    10de:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    10e0:	6819      	ldr	r1, [r3, #0]
    10e2:	f505 75fe 	add.w	r5, r5, #508	; 0x1fc
    10e6:	4623      	mov	r3, r4
    10e8:	1f0a      	subs	r2, r1, #4
    10ea:	f853 0f04 	ldr.w	r0, [r3, #4]!
    10ee:	429d      	cmp	r5, r3
    10f0:	f842 0f04 	str.w	r0, [r2, #4]!
    10f4:	d1f9      	bne.n	10ea <compress(void*)+0x22>
    10f6:	f501 70fe 	add.w	r0, r1, #508	; 0x1fc
    10fa:	460b      	mov	r3, r1
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    10fc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    1100:	f854 5f04 	ldr.w	r5, [r4, #4]!
    1104:	4298      	cmp	r0, r3
    1106:	eba2 0205 	sub.w	r2, r2, r5
    110a:	601a      	str	r2, [r3, #0]
    110c:	d1f6      	bne.n	10fc <compress(void*)+0x34>

  // find maximum in filtered data 
  int32_t mx = 0;
    110e:	2200      	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    1110:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    1114:	2b00      	cmp	r3, #0
    1116:	bfb8      	it	lt
    1118:	425b      	neglt	r3, r3
    111a:	429a      	cmp	r2, r3
    111c:	bfb8      	it	lt
    111e:	461a      	movlt	r2, r3
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    1120:	4281      	cmp	r1, r0
    1122:	d1f5      	bne.n	1110 <compress(void*)+0x48>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    1124:	2702      	movs	r7, #2
    1126:	2001      	movs	r0, #1
    1128:	e003      	b.n	1132 <compress(void*)+0x6a>
    112a:	3701      	adds	r7, #1
    112c:	2f18      	cmp	r7, #24
    112e:	f000 810f 	beq.w	1350 <compress(void*)+0x288>
    1132:	1e79      	subs	r1, r7, #1
    1134:	fa00 f301 	lsl.w	r3, r0, r1
    1138:	4293      	cmp	r3, r2
    113a:	ddf6      	ble.n	112a <compress(void*)+0x62>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    113c:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
    1140:	40b8      	lsls	r0, r7
  int ndat = NH + NCHAN_ACQ + ncmp;
    1142:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
    1146:	3801      	subs	r0, #1
  int ndat = NH + NCHAN_ACQ + ncmp;
    1148:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    114a:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
    114e:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
    1152:	4c85      	ldr	r4, [pc, #532]	; (1368 <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
    1154:	4d85      	ldr	r5, [pc, #532]	; (136c <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
    1156:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
    115a:	3201      	adds	r2, #1
    115c:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    1160:	682a      	ldr	r2, [r5, #0]
    1162:	4c83      	ldr	r4, [pc, #524]	; (1370 <compress(void*)+0x2a8>)
    1164:	42ba      	cmp	r2, r7
    1166:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
    116a:	46a3      	mov	fp, r4
    116c:	4622      	mov	r2, r4
    116e:	bf38      	it	cc
    1170:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    1172:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1176:	4001      	ands	r1, r0
    1178:	42b2      	cmp	r2, r6
    117a:	6011      	str	r1, [r2, #0]
    117c:	d1f9      	bne.n	1172 <compress(void*)+0xaa>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    117e:	4d7d      	ldr	r5, [pc, #500]	; (1374 <compress(void*)+0x2ac>)
    1180:	f44f 7200 	mov.w	r2, #512	; 0x200
    1184:	2100      	movs	r1, #0
    1186:	9300      	str	r3, [sp, #0]
    1188:	4628      	mov	r0, r5
    118a:	f011 fad1 	bl	12730 <memset>
  *iptr++ = nb | shift<<16;
    118e:	4a7a      	ldr	r2, [pc, #488]	; (1378 <compress(void*)+0x2b0>)
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    1190:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    1192:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
    1194:	8812      	ldrh	r2, [r2, #0]
    #error "NCH>8"
  #endif

  // pack data
  // 
  int nx = MBIT;
    1196:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
    119a:	2007      	movs	r0, #7
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    119c:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
    119e:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
    11a2:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
    11a4:	f8db 2000 	ldr.w	r2, [fp]
    11a8:	f8cb 1000 	str.w	r1, [fp]
    11ac:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
    11ae:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
    11b2:	602a      	str	r2, [r5, #0]
  *iptr++ = NCHAN_ACQ;
    11b4:	2201      	movs	r2, #1
  *iptr++ = t1;
    11b6:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCHAN_ACQ;
    11ba:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    11bc:	e00a      	b.n	11d4 <compress(void*)+0x10c>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    11be:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
    11c2:	4694      	mov	ip, r2
    11c4:	ea41 010e 	orr.w	r1, r1, lr
    11c8:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    11cc:	42a6      	cmp	r6, r4
    11ce:	d018      	beq.n	1202 <compress(void*)+0x13a>
      {   outData[kk] |= (tempData[ii] << nx);
    11d0:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
    11d4:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
    11d8:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
    11da:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
    11de:	dcee      	bgt.n	11be <compress(void*)+0xf6>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    11e0:	eba7 0e0c 	sub.w	lr, r7, ip
    11e4:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
    11e8:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
    11ec:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
    11f0:	d12f      	bne.n	1252 <compress(void*)+0x18a>
      {   outData[kk++] |= tempData[ii];
    11f2:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    11f4:	42a6      	cmp	r6, r4
          nx=MBIT;
    11f6:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
    11fa:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
    11fe:	4648      	mov	r0, r9
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    1200:	d1e6      	bne.n	11d0 <compress(void*)+0x108>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    1202:	4e5e      	ldr	r6, [pc, #376]	; (137c <compress(void*)+0x2b4>)
    1204:	6834      	ldr	r4, [r6, #0]
    1206:	eb04 0208 	add.w	r2, r4, r8
    120a:	2a80      	cmp	r2, #128	; 0x80
    120c:	dc2d      	bgt.n	126a <compress(void*)+0x1a2>
    120e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    1212:	4a5b      	ldr	r2, [pc, #364]	; (1380 <compress(void*)+0x2b8>)
    1214:	4857      	ldr	r0, [pc, #348]	; (1374 <compress(void*)+0x2ac>)
    1216:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
    121a:	4423      	add	r3, r4
    121c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    1220:	2300      	movs	r3, #0
    1222:	e001      	b.n	1228 <compress(void*)+0x160>
    1224:	f850 1f04 	ldr.w	r1, [r0, #4]!
    1228:	3301      	adds	r3, #1
    122a:	f842 1f04 	str.w	r1, [r2, #4]!
    122e:	4543      	cmp	r3, r8
    1230:	dbf8      	blt.n	1224 <compress(void*)+0x15c>
    1232:	f1b8 0f00 	cmp.w	r8, #0
    1236:	f108 33ff 	add.w	r3, r8, #4294967295
    123a:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
    123e:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    1242:	bfd8      	it	le
    1244:	2300      	movle	r3, #0
    1246:	4423      	add	r3, r4
    1248:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    124a:	4638      	mov	r0, r7
    124c:	b003      	add	sp, #12
    124e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    1252:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
    1256:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    125a:	ea4e 0202 	orr.w	r2, lr, r2
    125e:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
    1262:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
    1264:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
    1268:	e7b0      	b.n	11cc <compress(void*)+0x104>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    126a:	2c7a      	cmp	r4, #122	; 0x7a
    126c:	dd22      	ble.n	12b4 <compress(void*)+0x1ec>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    126e:	2c7f      	cmp	r4, #127	; 0x7f
    1270:	dc0a      	bgt.n	1288 <compress(void*)+0x1c0>
    1272:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
    1276:	4842      	ldr	r0, [pc, #264]	; (1380 <compress(void*)+0x2b8>)
    1278:	2100      	movs	r1, #0
    127a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    127e:	0092      	lsls	r2, r2, #2
    1280:	f011 fa56 	bl	12730 <memset>
    1284:	2380      	movs	r3, #128	; 0x80
    1286:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
    1288:	483d      	ldr	r0, [pc, #244]	; (1380 <compress(void*)+0x2b8>)
    128a:	f004 f92b 	bl	54e4 <pushData(unsigned long*)>
    128e:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    1290:	ea4f 0288 	mov.w	r2, r8, lsl #2
    1294:	4937      	ldr	r1, [pc, #220]	; (1374 <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
    1296:	bf18      	it	ne
    1298:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    129a:	f1b8 0f00 	cmp.w	r8, #0
    129e:	4838      	ldr	r0, [pc, #224]	; (1380 <compress(void*)+0x2b8>)
    12a0:	bfd8      	it	le
    12a2:	2204      	movle	r2, #4
    12a4:	f00d f9b6 	bl	e614 <memcpy>
}
    12a8:	4638      	mov	r0, r7
    12aa:	f8c6 8000 	str.w	r8, [r6]
    12ae:	b003      	add	sp, #12
    12b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    12b4:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
    12b8:	4831      	ldr	r0, [pc, #196]	; (1380 <compress(void*)+0x2b8>)
    12ba:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    12be:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
    12c2:	616b      	str	r3, [r5, #20]
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    12c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    12c8:	4d2a      	ldr	r5, [pc, #168]	; (1374 <compress(void*)+0x2ac>)
    12ca:	4423      	add	r3, r4
    12cc:	4629      	mov	r1, r5
    12ce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    12d2:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
    12d6:	e001      	b.n	12dc <compress(void*)+0x214>
    12d8:	f851 2f04 	ldr.w	r2, [r1, #4]!
    12dc:	f843 2f04 	str.w	r2, [r3, #4]!
    12e0:	4298      	cmp	r0, r3
    12e2:	d1f9      	bne.n	12d8 <compress(void*)+0x210>
    12e4:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
    12e6:	4826      	ldr	r0, [pc, #152]	; (1380 <compress(void*)+0x2b8>)
    12e8:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
    12ec:	6033      	str	r3, [r6, #0]
    12ee:	f004 f8f9 	bl	54e4 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    12f2:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
    12f4:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
    12f6:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    12f8:	4a22      	ldr	r2, [pc, #136]	; (1384 <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
    12fa:	bf18      	it	ne
    12fc:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
    12fe:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    1302:	f8df e070 	ldr.w	lr, [pc, #112]	; 1374 <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    1306:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    1308:	f8df c074 	ldr.w	ip, [pc, #116]	; 1380 <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
    130c:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    130e:	ea42 0203 	orr.w	r2, r2, r3
    1312:	f04f 0306 	mov.w	r3, #6
    1316:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    1318:	6033      	str	r3, [r6, #0]
    131a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    131e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1322:	e89e 0003 	ldmia.w	lr, {r0, r1}
    1326:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
    132a:	da8e      	bge.n	124a <compress(void*)+0x182>
    132c:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
    1330:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1334:	f10c 0008 	add.w	r0, ip, #8
    1338:	4442      	add	r2, r8
    133a:	0092      	lsls	r2, r2, #2
    133c:	f00d f96a 	bl	e614 <memcpy>
    1340:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
    1344:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
    1346:	4443      	add	r3, r8
    1348:	6033      	str	r3, [r6, #0]
}
    134a:	b003      	add	sp, #12
    134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1350:	2267      	movs	r2, #103	; 0x67
    1352:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    1356:	f04f 0868 	mov.w	r8, #104	; 0x68
    135a:	2361      	movs	r3, #97	; 0x61
    135c:	2117      	movs	r1, #23
    135e:	9201      	str	r2, [sp, #4]
    1360:	e6f7      	b.n	1152 <compress(void*)+0x8a>
    1362:	bf00      	nop
    1364:	200093fc 	.word	0x200093fc
    1368:	2001584c 	.word	0x2001584c
    136c:	200157f8 	.word	0x200157f8
    1370:	20014f20 	.word	0x20014f20
    1374:	20014acc 	.word	0x20014acc
    1378:	20016050 	.word	0x20016050
    137c:	2001517c 	.word	0x2001517c
    1380:	2001482c 	.word	0x2001482c
    1384:	ffff0000 	.word	0xffff0000

00001388 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
    1388:	b570      	push	{r4, r5, r6, lr}
    138a:	b082      	sub	sp, #8
    138c:	4606      	mov	r6, r0
    138e:	4614      	mov	r4, r2
    1390:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
    1392:	4668      	mov	r0, sp
    1394:	f004 fa3e 	bl	5814 <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
    1398:	f89d 2002 	ldrb.w	r2, [sp, #2]
    139c:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    13a0:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0 :
    13a4:	2a0c      	cmp	r2, #12
    13a6:	bf98      	it	ls
    13a8:	f1bc 0f1f 	cmpls.w	ip, #31
    13ac:	d804      	bhi.n	13b8 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
    13ae:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
    13b2:	b29b      	uxth	r3, r3
    13b4:	2b7f      	cmp	r3, #127	; 0x7f
    13b6:	d920      	bls.n	13fa <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
         year << 9 | month << 5 | day;
    13b8:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    13bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
    13c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    13c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    13c8:	2a17      	cmp	r2, #23
    13ca:	bf98      	it	ls
    13cc:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
    13ce:	f8a6 c000 	strh.w	ip, [r6]
    13d2:	d801      	bhi.n	13d8 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
    13d4:	293b      	cmp	r1, #59	; 0x3b
    13d6:	d905      	bls.n	13e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
         hour << 11 | minute << 5 | second >> 1;
    13d8:	2300      	movs	r3, #0
    *ms10 = 0;
    13da:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    13dc:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    13de:	7022      	strb	r2, [r4, #0]
}
    13e0:	b002      	add	sp, #8
    13e2:	bd70      	pop	{r4, r5, r6, pc}
    13e4:	015b      	lsls	r3, r3, #5
    13e6:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
    13ea:	2200      	movs	r2, #0
    13ec:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    13f0:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    13f2:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    13f4:	7022      	strb	r2, [r4, #0]
}
    13f6:	b002      	add	sp, #8
    13f8:	bd70      	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    13fa:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
    13fe:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
    1402:	fa1f fc8c 	uxth.w	ip, ip
    1406:	e7d9      	b.n	13bc <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

00001408 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
    1408:	4b04      	ldr	r3, [pc, #16]	; (141c <FsFile::~FsFile()+0x14>)
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    140a:	b510      	push	{r4, lr}
    140c:	4604      	mov	r4, r0
    140e:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
    1412:	f009 fb97 	bl	ab44 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1416:	4620      	mov	r0, r4
    1418:	bd10      	pop	{r4, pc}
    141a:	bf00      	nop
    141c:	20000b98 	.word	0x20000b98

00001420 <checkEndOfFile(short) [clone .part.0]>:
    writeHeaderInfo((char *)&header[20],SerNum);
    header[127]=0x55555555;
    return 1;
}

int16_t checkEndOfFile(int16_t state)
    1420:	b510      	push	{r4, lr}
{ 
  static uint32_t dta=0;

  if(state==RUNNING)
  { 
    uint32_t tt = rtc_get();
    1422:	f00d fb6b 	bl	eafc <rtc_get>
    //
    uint32_t dt1 = tt % t_acq;
    1426:	4b32      	ldr	r3, [pc, #200]	; (14f0 <checkEndOfFile(short) [clone .part.0]+0xd0>)
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    1428:	4932      	ldr	r1, [pc, #200]	; (14f4 <checkEndOfFile(short) [clone .part.0]+0xd4>)
    uint32_t dt1 = tt % t_acq;
    142a:	881a      	ldrh	r2, [r3, #0]
    142c:	b292      	uxth	r2, r2
    142e:	fbb0 f3f2 	udiv	r3, r0, r2
    1432:	fb02 0313 	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    1436:	680a      	ldr	r2, [r1, #0]
    1438:	4293      	cmp	r3, r2
    143a:	d214      	bcs.n	1466 <checkEndOfFile(short) [clone .part.0]+0x46>
    dta = dt1;
    143c:	600b      	str	r3, [r1, #0]
    //
    // if file should be closed
    // check also if it should then hibernate 
    if(state == DOCLOSE)                // in case of DOCLOSE
    { 
      if(t_rep>t_on)                      // and if foreseen  check for hibernation
    143e:	4c2e      	ldr	r4, [pc, #184]	; (14f8 <checkEndOfFile(short) [clone .part.0]+0xd8>)
    1440:	492e      	ldr	r1, [pc, #184]	; (14fc <checkEndOfFile(short) [clone .part.0]+0xdc>)
    1442:	8822      	ldrh	r2, [r4, #0]
    1444:	880b      	ldrh	r3, [r1, #0]
    1446:	b292      	uxth	r2, r2
    1448:	b29b      	uxth	r3, r3
    144a:	429a      	cmp	r2, r3
    144c:	d90e      	bls.n	146c <checkEndOfFile(short) [clone .part.0]+0x4c>
      { uint32_t dt2 = (tt % t_rep);
    144e:	8823      	ldrh	r3, [r4, #0]
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    1450:	880a      	ldrh	r2, [r1, #0]
      { uint32_t dt2 = (tt % t_rep);
    1452:	b29b      	uxth	r3, r3
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    1454:	b292      	uxth	r2, r2
      { uint32_t dt2 = (tt % t_rep);
    1456:	fbb0 f1f3 	udiv	r1, r0, r3
    145a:	fb03 0311 	mls	r3, r3, r1, r0
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    145e:	4293      	cmp	r3, r2
    1460:	d304      	bcc.n	146c <checkEndOfFile(short) [clone .part.0]+0x4c>
      }
    }
    if(state == DOCLOSE)                // in case of DOCLOSE check start day
    {
      uint32_t dd=tt/(24*3600);
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    1462:	2004      	movs	r0, #4
    }
  }
  return state;
}
    1464:	bd10      	pop	{r4, pc}
    dta = dt1;
    1466:	2002      	movs	r0, #2
    1468:	600b      	str	r3, [r1, #0]
}
    146a:	bd10      	pop	{r4, pc}
      if(d_rep>d_on)                      // and if foreseen  check for hibernation
    146c:	4c24      	ldr	r4, [pc, #144]	; (1500 <checkEndOfFile(short) [clone .part.0]+0xe0>)
    146e:	4925      	ldr	r1, [pc, #148]	; (1504 <checkEndOfFile(short) [clone .part.0]+0xe4>)
    1470:	8822      	ldrh	r2, [r4, #0]
    1472:	880b      	ldrh	r3, [r1, #0]
    1474:	b292      	uxth	r2, r2
    1476:	b29b      	uxth	r3, r3
    1478:	429a      	cmp	r2, r3
    147a:	d90d      	bls.n	1498 <checkEndOfFile(short) [clone .part.0]+0x78>
      { int32_t dd=tt/(24*3600);
    147c:	4b22      	ldr	r3, [pc, #136]	; (1508 <checkEndOfFile(short) [clone .part.0]+0xe8>)
        uint32_t dd2 = (dd % d_rep);
    147e:	8822      	ldrh	r2, [r4, #0]
      { int32_t dd=tt/(24*3600);
    1480:	fba3 4300 	umull	r4, r3, r3, r0
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    1484:	8809      	ldrh	r1, [r1, #0]
        uint32_t dd2 = (dd % d_rep);
    1486:	b292      	uxth	r2, r2
      { int32_t dd=tt/(24*3600);
    1488:	0c1b      	lsrs	r3, r3, #16
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    148a:	b289      	uxth	r1, r1
        uint32_t dd2 = (dd % d_rep);
    148c:	fbb3 f4f2 	udiv	r4, r3, r2
    1490:	fb02 3314 	mls	r3, r2, r4, r3
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    1494:	428b      	cmp	r3, r1
    1496:	d2e4      	bcs.n	1462 <checkEndOfFile(short) [clone .part.0]+0x42>
      uint32_t hh=(tt%((24*3600)/3600));
    1498:	4b1c      	ldr	r3, [pc, #112]	; (150c <checkEndOfFile(short) [clone .part.0]+0xec>)
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    149a:	4a1d      	ldr	r2, [pc, #116]	; (1510 <checkEndOfFile(short) [clone .part.0]+0xf0>)
      uint32_t hh=(tt%((24*3600)/3600));
    149c:	fba3 1300 	umull	r1, r3, r3, r0
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    14a0:	8812      	ldrh	r2, [r2, #0]
      uint32_t hh=(tt%((24*3600)/3600));
    14a2:	091b      	lsrs	r3, r3, #4
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    14a4:	b292      	uxth	r2, r2
      uint32_t hh=(tt%((24*3600)/3600));
    14a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    14aa:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    14ae:	4293      	cmp	r3, r2
    14b0:	d313      	bcc.n	14da <checkEndOfFile(short) [clone .part.0]+0xba>
    14b2:	4a18      	ldr	r2, [pc, #96]	; (1514 <checkEndOfFile(short) [clone .part.0]+0xf4>)
    14b4:	8812      	ldrh	r2, [r2, #0]
    14b6:	b292      	uxth	r2, r2
    14b8:	4293      	cmp	r3, r2
    14ba:	d20e      	bcs.n	14da <checkEndOfFile(short) [clone .part.0]+0xba>
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    14bc:	4b16      	ldr	r3, [pc, #88]	; (1518 <checkEndOfFile(short) [clone .part.0]+0xf8>)
    14be:	f644 6120 	movw	r1, #20000	; 0x4e20
      uint32_t dd=tt/(24*3600);
    14c2:	4a11      	ldr	r2, [pc, #68]	; (1508 <checkEndOfFile(short) [clone .part.0]+0xe8>)
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    14c4:	881b      	ldrh	r3, [r3, #0]
      uint32_t dd=tt/(24*3600);
    14c6:	fba2 2000 	umull	r2, r0, r2, r0
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    14ca:	fa01 f383 	sxtah	r3, r1, r3
    14ce:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
    14d2:	bf8c      	ite	hi
    14d4:	2004      	movhi	r0, #4
    14d6:	2003      	movls	r0, #3
}
    14d8:	bd10      	pop	{r4, pc}
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    14da:	4a10      	ldr	r2, [pc, #64]	; (151c <checkEndOfFile(short) [clone .part.0]+0xfc>)
    14dc:	8812      	ldrh	r2, [r2, #0]
    14de:	b292      	uxth	r2, r2
    14e0:	4293      	cmp	r3, r2
    14e2:	d3be      	bcc.n	1462 <checkEndOfFile(short) [clone .part.0]+0x42>
    14e4:	4a0e      	ldr	r2, [pc, #56]	; (1520 <checkEndOfFile(short) [clone .part.0]+0x100>)
    14e6:	8812      	ldrh	r2, [r2, #0]
    14e8:	b292      	uxth	r2, r2
    14ea:	4293      	cmp	r3, r2
    14ec:	d3e6      	bcc.n	14bc <checkEndOfFile(short) [clone .part.0]+0x9c>
    14ee:	e7b8      	b.n	1462 <checkEndOfFile(short) [clone .part.0]+0x42>
    14f0:	20009422 	.word	0x20009422
    14f4:	20015170 	.word	0x20015170
    14f8:	20016052 	.word	0x20016052
    14fc:	20009424 	.word	0x20009424
    1500:	20016040 	.word	0x20016040
    1504:	2000941a 	.word	0x2000941a
    1508:	c22e4507 	.word	0xc22e4507
    150c:	aaaaaaab 	.word	0xaaaaaaab
    1510:	20016046 	.word	0x20016046
    1514:	2000941c 	.word	0x2000941c
    1518:	2001603e 	.word	0x2001603e
    151c:	2000941e 	.word	0x2000941e
    1520:	20009420 	.word	0x20009420

00001524 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1524:	b538      	push	{r3, r4, r5, lr}
    1526:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1528:	b149      	cbz	r1, 153e <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    152a:	4608      	mov	r0, r1
    152c:	460d      	mov	r5, r1
    152e:	f011 fce7 	bl	12f00 <strlen>
    1532:	6823      	ldr	r3, [r4, #0]
    1534:	4602      	mov	r2, r0
    1536:	4629      	mov	r1, r5
    1538:	685b      	ldr	r3, [r3, #4]
    153a:	4620      	mov	r0, r4
    153c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    153e:	4620      	mov	r0, r4
    1540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1544:	f00c ba60 	b.w	da08 <Print::println()>

00001548 <loadConfigfromFile()>:
{
    1548:	b5f0      	push	{r4, r5, r6, r7, lr}
    file = sd->open("config.txt"); 
    154a:	492e      	ldr	r1, [pc, #184]	; (1604 <loadConfigfromFile()+0xbc>)
{
    154c:	b095      	sub	sp, #84	; 0x54
    file = sd->open("config.txt"); 
    154e:	2300      	movs	r3, #0
    1550:	4a2d      	ldr	r2, [pc, #180]	; (1608 <loadConfigfromFile()+0xc0>)
    1552:	6809      	ldr	r1, [r1, #0]
    1554:	4668      	mov	r0, sp
    1556:	f009 fc0f 	bl	ad78 <FsVolume::open(char const*, int)>
class Print
    155a:	4d2c      	ldr	r5, [pc, #176]	; (160c <loadConfigfromFile()+0xc4>)
    155c:	a904      	add	r1, sp, #16
    155e:	f105 0010 	add.w	r0, r5, #16
class Stream : public Print
    1562:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    1566:	e9c5 2301 	strd	r2, r3, [r5, #4]
    156a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    156e:	732b      	strb	r3, [r5, #12]
    1570:	f009 fa8e 	bl	aa90 <FsBaseFile::operator=(FsBaseFile const&)>
    1574:	4b26      	ldr	r3, [pc, #152]	; (1610 <loadConfigfromFile()+0xc8>)
  ~FsBaseFile() {close();}
    1576:	a804      	add	r0, sp, #16
    1578:	9300      	str	r3, [sp, #0]
    157a:	f009 fae3 	bl	ab44 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    157e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1580:	2800      	cmp	r0, #0
    1582:	d039      	beq.n	15f8 <loadConfigfromFile()+0xb0>
    1584:	4e23      	ldr	r6, [pc, #140]	; (1614 <loadConfigfromFile()+0xcc>)
    1586:	2400      	movs	r4, #0
    return m_fFile ? m_fFile->available() :
    1588:	b1e0      	cbz	r0, 15c4 <loadConfigfromFile()+0x7c>
    return isFile() ? fileSize() - curPosition() : 0;
    158a:	7803      	ldrb	r3, [r0, #0]
    158c:	071a      	lsls	r2, r3, #28
    158e:	d405      	bmi.n	159c <loadConfigfromFile()+0x54>
      file.close(); 
    1590:	4821      	ldr	r0, [pc, #132]	; (1618 <loadConfigfromFile()+0xd0>)
    1592:	f009 fad7 	bl	ab44 <FsBaseFile::close()>
  return ii;
    1596:	b220      	sxth	r0, r4
}
    1598:	b015      	add	sp, #84	; 0x54
    159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { while (file.available()) 
    159c:	69c2      	ldr	r2, [r0, #28]
    159e:	6943      	ldr	r3, [r0, #20]
    15a0:	429a      	cmp	r2, r3
    15a2:	d0f5      	beq.n	1590 <loadConfigfromFile()+0x48>
    return m_fFile ? m_fFile->read(buf, count) :
    15a4:	2201      	movs	r2, #1
    15a6:	4669      	mov	r1, sp
    15a8:	f007 fd52 	bl	9050 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
    15ac:	2801      	cmp	r0, #1
    return m_fFile ? m_fFile->available() :
    15ae:	6ca8      	ldr	r0, [r5, #72]	; 0x48
        configText[ii++]=file.read();
    15b0:	f104 0401 	add.w	r4, r4, #1
    return read(&b, 1) == 1 ? b : -1;
    15b4:	bf0c      	ite	eq
    15b6:	f89d 3000 	ldrbeq.w	r3, [sp]
    15ba:	23ff      	movne	r3, #255	; 0xff
    15bc:	f806 3b01 	strb.w	r3, [r6], #1
    return m_fFile ? m_fFile->available() :
    15c0:	2800      	cmp	r0, #0
    15c2:	d1e2      	bne.n	158a <loadConfigfromFile()+0x42>
    15c4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
    15c6:	2800      	cmp	r0, #0
    15c8:	d0e2      	beq.n	1590 <loadConfigfromFile()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
    15ca:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    15ce:	071b      	lsls	r3, r3, #28
    15d0:	d5de      	bpl.n	1590 <loadConfigfromFile()+0x48>
    15d2:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
    15d6:	e9d0 7100 	ldrd	r7, r1, [r0]
    15da:	1bdb      	subs	r3, r3, r7
    15dc:	eb62 0201 	sbc.w	r2, r2, r1
    return n > INT_MAX ? INT_MAX : n;
    15e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    15e4:	f172 0200 	sbcs.w	r2, r2, #0
    15e8:	d201      	bcs.n	15ee <loadConfigfromFile()+0xa6>
    { while (file.available()) 
    15ea:	2b00      	cmp	r3, #0
    15ec:	d0d0      	beq.n	1590 <loadConfigfromFile()+0x48>
           m_xFile ? m_xFile->read(buf, count) : -1;
    15ee:	2201      	movs	r2, #1
    15f0:	4669      	mov	r1, sp
    15f2:	f005 fe3b 	bl	726c <ExFatFile::read(void*, unsigned int)>
    15f6:	e7d9      	b.n	15ac <loadConfigfromFile()+0x64>
  bool isOpen() const {return m_fFile || m_xFile;}
    15f8:	6cec      	ldr	r4, [r5, #76]	; 0x4c
    15fa:	2c00      	cmp	r4, #0
    15fc:	d1c2      	bne.n	1584 <loadConfigfromFile()+0x3c>
    15fe:	4620      	mov	r0, r4
    1600:	e7ca      	b.n	1598 <loadConfigfromFile()+0x50>
    1602:	bf00      	nop
    1604:	200093f4 	.word	0x200093f4
    1608:	20000578 	.word	0x20000578
    160c:	20015760 	.word	0x20015760
    1610:	20000b98 	.word	0x20000b98
    1614:	2000b20c 	.word	0x2000b20c
    1618:	20015770 	.word	0x20015770

0000161c <filing_init()>:
  sdSectorCount=sd->card()->sectorCount();
    161c:	4b12      	ldr	r3, [pc, #72]	; (1668 <filing_init()+0x4c>)
  FsDateTime::callback = dateTime;
    161e:	4a13      	ldr	r2, [pc, #76]	; (166c <filing_init()+0x50>)
  SdCard* card() {return m_card;}
    1620:	681b      	ldr	r3, [r3, #0]
    1622:	4913      	ldr	r1, [pc, #76]	; (1670 <filing_init()+0x54>)
    1624:	f8d3 048c 	ldr.w	r0, [r3, #1164]	; 0x48c
  sdSectorCount=sd->card()->sectorCount();
    1628:	6803      	ldr	r3, [r0, #0]
{
    162a:	b510      	push	{r4, lr}
  sdSectorCount=sd->card()->sectorCount();
    162c:	4c11      	ldr	r4, [pc, #68]	; (1674 <filing_init()+0x58>)
  FsDateTime::callback = dateTime;
    162e:	6011      	str	r1, [r2, #0]
  sdSectorCount=sd->card()->sectorCount();
    1630:	69db      	ldr	r3, [r3, #28]
    1632:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1634:	2300      	movs	r3, #0
    1636:	220a      	movs	r2, #10
    1638:	4601      	mov	r1, r0
    163a:	6020      	str	r0, [r4, #0]
    163c:	480e      	ldr	r0, [pc, #56]	; (1678 <filing_init()+0x5c>)
    163e:	f00c fa0d 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1642:	480d      	ldr	r0, [pc, #52]	; (1678 <filing_init()+0x5c>)
    1644:	f00c f9e0 	bl	da08 <Print::println()>
  haveStore=1;
    1648:	4b0c      	ldr	r3, [pc, #48]	; (167c <filing_init()+0x60>)
    164a:	2201      	movs	r2, #1
    164c:	601a      	str	r2, [r3, #0]
  if(loadConfigfromFile())              // is in Filing
    164e:	f7ff ff7b 	bl	1548 <loadConfigfromFile()>
    1652:	b928      	cbnz	r0, 1660 <filing_init()+0x44>
  pinMode(LED,OUTPUT);
    1654:	200d      	movs	r0, #13
    1656:	2101      	movs	r1, #1
    1658:	f00c fd80 	bl	e15c <pinMode>
}
    165c:	2001      	movs	r0, #1
    165e:	bd10      	pop	{r4, pc}
    decodeConfigfromFile(configText);   // in in Menu
    1660:	4807      	ldr	r0, [pc, #28]	; (1680 <filing_init()+0x64>)
    1662:	f003 fcbb 	bl	4fdc <decodeConfigfromFile(char*)>
    1666:	e7f5      	b.n	1654 <filing_init()+0x38>
    1668:	200093f4 	.word	0x200093f4
    166c:	20015130 	.word	0x20015130
    1670:	00001389 	.word	0x00001389
    1674:	20015914 	.word	0x20015914
    1678:	20008a6c 	.word	0x20008a6c
    167c:	20015120 	.word	0x20015120
    1680:	2000b20c 	.word	0x2000b20c

00001684 <stopSD()>:
  sd->card()->syncDevice();
    1684:	4b03      	ldr	r3, [pc, #12]	; (1694 <stopSD()+0x10>)
    1686:	681b      	ldr	r3, [r3, #0]
    1688:	f8d3 048c 	ldr.w	r0, [r3, #1164]	; 0x48c
    168c:	6803      	ldr	r3, [r0, #0]
    168e:	6a1b      	ldr	r3, [r3, #32]
    1690:	4718      	bx	r3
    1692:	bf00      	nop
    1694:	200093f4 	.word	0x200093f4

00001698 <timeStamp()>:
{
    1698:	b510      	push	{r4, lr}
    169a:	b086      	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    169c:	4c0d      	ldr	r4, [pc, #52]	; (16d4 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    169e:	a804      	add	r0, sp, #16
    16a0:	f004 f8b8 	bl	5814 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    16a4:	f99d 2017 	ldrsb.w	r2, [sp, #23]
    16a8:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    16ac:	f99d 0015 	ldrsb.w	r0, [sp, #21]
    16b0:	f99d 1013 	ldrsb.w	r1, [sp, #19]
    16b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    16b8:	e9cd 1000 	strd	r1, r0, [sp]
    16bc:	f99d 3012 	ldrsb.w	r3, [sp, #18]
    16c0:	4620      	mov	r0, r4
    16c2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    16c6:	4904      	ldr	r1, [pc, #16]	; (16d8 <timeStamp()+0x40>)
    16c8:	f010 fe8c 	bl	123e4 <sprintf>
}
    16cc:	4620      	mov	r0, r4
    16ce:	b006      	add	sp, #24
    16d0:	bd10      	pop	{r4, pc}
    16d2:	bf00      	nop
    16d4:	20015180 	.word	0x20015180
    16d8:	20000820 	.word	0x20000820

000016dc <writeHeaderInfo(char*, int)>:
{
    16dc:	b570      	push	{r4, r5, r6, lr}
  strcpy(&info[ih], MAGIC); ih+=4;              //4
    16de:	4b46      	ldr	r3, [pc, #280]	; (17f8 <writeHeaderInfo(char*, int)+0x11c>)
{
    16e0:	4604      	mov	r4, r0
    16e2:	4a46      	ldr	r2, [pc, #280]	; (17fc <writeHeaderInfo(char*, int)+0x120>)
    16e4:	b082      	sub	sp, #8
  strcpy(&info[ih], MAGIC); ih+=4;              //4
    16e6:	6818      	ldr	r0, [r3, #0]
    16e8:	4625      	mov	r5, r4
    16ea:	791b      	ldrb	r3, [r3, #4]
    16ec:	6816      	ldr	r6, [r2, #0]
    16ee:	6020      	str	r0, [r4, #0]
    16f0:	f805 3f04 	strb.w	r3, [r5, #4]!
{
    16f4:	9101      	str	r1, [sp, #4]
  strcpy(&info[ih], timeStamp()); ih +=16;      //20
    16f6:	f7ff ffcf 	bl	1698 <timeStamp()>
    16fa:	4601      	mov	r1, r0
    16fc:	4628      	mov	r0, r5
  memcpy(&info[ih], (char *)b_string,40); ih+=40;       //76
    16fe:	4d40      	ldr	r5, [pc, #256]	; (1800 <writeHeaderInfo(char*, int)+0x124>)
  strcpy(&info[ih], timeStamp()); ih +=16;      //20
    1700:	f011 fb4c 	bl	12d9c <strcpy>
  sprintf(&info[ih]," %8x",serNum); ih +=12;    //32
    1704:	9a01      	ldr	r2, [sp, #4]
    1706:	f104 0014 	add.w	r0, r4, #20
    170a:	493e      	ldr	r1, [pc, #248]	; (1804 <writeHeaderInfo(char*, int)+0x128>)
    170c:	f010 fe6a 	bl	123e4 <sprintf>
  memcpy(&info[ih], &tt,4); ih +=4;             //36
    1710:	6226      	str	r6, [r4, #32]
  memcpy(&info[ih], (char *)b_string,40); ih+=40;       //76
    1712:	f104 0c24 	add.w	ip, r4, #36	; 0x24
    1716:	f105 0620 	add.w	r6, r5, #32
    171a:	46ae      	mov	lr, r5
    171c:	f10c 0c10 	add.w	ip, ip, #16
    1720:	3510      	adds	r5, #16
    1722:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1726:	45b6      	cmp	lr, r6
    1728:	f84c 0c10 	str.w	r0, [ip, #-16]
    172c:	f84c 1c0c 	str.w	r1, [ip, #-12]
    1730:	f84c 2c08 	str.w	r2, [ip, #-8]
    1734:	f84c 3c04 	str.w	r3, [ip, #-4]
    1738:	d1ef      	bne.n	171a <writeHeaderInfo(char*, int)+0x3e>
    173a:	462b      	mov	r3, r5
  memcpy(&info[ih], (char *)k_string,40); ih+=40;       //116
    173c:	4d32      	ldr	r5, [pc, #200]	; (1808 <writeHeaderInfo(char*, int)+0x12c>)
    173e:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
    1742:	f105 0620 	add.w	r6, r5, #32
  memcpy(&info[ih], (char *)b_string,40); ih+=40;       //76
    1746:	cb03      	ldmia	r3!, {r0, r1}
    1748:	f8cc 0000 	str.w	r0, [ip]
    174c:	f8cc 1004 	str.w	r1, [ip, #4]
  memcpy(&info[ih], (char *)k_string,40); ih+=40;       //116
    1750:	46ac      	mov	ip, r5
    1752:	f10e 0e10 	add.w	lr, lr, #16
    1756:	3510      	adds	r5, #16
    1758:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    175c:	45b4      	cmp	ip, r6
    175e:	f84e 0c10 	str.w	r0, [lr, #-16]
    1762:	f84e 1c0c 	str.w	r1, [lr, #-12]
    1766:	f84e 2c08 	str.w	r2, [lr, #-8]
    176a:	f84e 3c04 	str.w	r3, [lr, #-4]
    176e:	d1ef      	bne.n	1750 <writeHeaderInfo(char*, int)+0x74>
    1770:	462b      	mov	r3, r5
  memcpy(&info[ih], (char *)n_string,40); ih+=40;       //156
    1772:	4d26      	ldr	r5, [pc, #152]	; (180c <writeHeaderInfo(char*, int)+0x130>)
    1774:	f104 0c74 	add.w	ip, r4, #116	; 0x74
    1778:	f105 0620 	add.w	r6, r5, #32
  memcpy(&info[ih], (char *)k_string,40); ih+=40;       //116
    177c:	cb03      	ldmia	r3!, {r0, r1}
    177e:	f8ce 0000 	str.w	r0, [lr]
    1782:	f8ce 1004 	str.w	r1, [lr, #4]
  memcpy(&info[ih], (char *)n_string,40); ih+=40;       //156
    1786:	46ae      	mov	lr, r5
    1788:	f10c 0c10 	add.w	ip, ip, #16
    178c:	3510      	adds	r5, #16
    178e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1792:	45b6      	cmp	lr, r6
    1794:	f84c 0c10 	str.w	r0, [ip, #-16]
    1798:	f84c 1c0c 	str.w	r1, [ip, #-12]
    179c:	f84c 2c08 	str.w	r2, [ip, #-8]
    17a0:	f84c 3c04 	str.w	r3, [ip, #-4]
    17a4:	d1ef      	bne.n	1786 <writeHeaderInfo(char*, int)+0xaa>
    17a6:	cd03      	ldmia	r5!, {r0, r1}
    17a8:	f8cc 1004 	str.w	r1, [ip, #4]
    17ac:	f8cc 0000 	str.w	r0, [ip]
  memcpy(&info[ih], getStore(),16*2); ih +=32;  //188
    17b0:	f003 fc10 	bl	4fd4 <getStore()>
    17b4:	6805      	ldr	r5, [r0, #0]
    17b6:	6841      	ldr	r1, [r0, #4]
    17b8:	6882      	ldr	r2, [r0, #8]
    17ba:	68c3      	ldr	r3, [r0, #12]
    17bc:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
    17c0:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    17c4:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
    17c8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    17cc:	6905      	ldr	r5, [r0, #16]
    17ce:	6982      	ldr	r2, [r0, #24]
    17d0:	6941      	ldr	r1, [r0, #20]
    17d2:	69c3      	ldr	r3, [r0, #28]
    17d4:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
  strcpy(&info[ih]," end");                     //196
    17d8:	4d0d      	ldr	r5, [pc, #52]	; (1810 <writeHeaderInfo(char*, int)+0x134>)
  memcpy(&info[ih], getStore(),16*2); ih +=32;  //188
    17da:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
  strcpy(&info[ih]," end");                     //196
    17de:	6828      	ldr	r0, [r5, #0]
    17e0:	792a      	ldrb	r2, [r5, #4]
  memcpy(&info[ih], getStore(),16*2); ih +=32;  //188
    17e2:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    17e6:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  strcpy(&info[ih]," end");                     //196
    17ea:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    17ee:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
}
    17f2:	b002      	add	sp, #8
    17f4:	bd70      	pop	{r4, r5, r6, pc}
    17f6:	bf00      	nop
    17f8:	200004b0 	.word	0x200004b0
    17fc:	20016020 	.word	0x20016020
    1800:	20015710 	.word	0x20015710
    1804:	200004b8 	.word	0x200004b8
    1808:	200157b0 	.word	0x200157b0
    180c:	20015800 	.word	0x20015800
    1810:	200004c0 	.word	0x200004c0

00001814 <wavHeaderWrite(char*)>:
{ 
    1814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile ? m_fFile->curPosition() :
    1818:	4c21      	ldr	r4, [pc, #132]	; (18a0 <wavHeaderWrite(char*)+0x8c>)
    181a:	4607      	mov	r7, r0
    181c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    181e:	b373      	cbz	r3, 187e <wavHeaderWrite(char*)+0x6a>
    1820:	695e      	ldr	r6, [r3, #20]
    1822:	2500      	movs	r5, #0
  Serial.printf("; fpos=%d ",fpos);
    1824:	4632      	mov	r2, r6
    1826:	462b      	mov	r3, r5
    1828:	491e      	ldr	r1, [pc, #120]	; (18a4 <wavHeaderWrite(char*)+0x90>)
    182a:	481f      	ldr	r0, [pc, #124]	; (18a8 <wavHeaderWrite(char*)+0x94>)
    182c:	f00c f908 	bl	da40 <Print::printf(char const*, ...)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1830:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1832:	b1e0      	cbz	r0, 186e <wavHeaderWrite(char*)+0x5a>
    1834:	2100      	movs	r1, #0
    1836:	f007 fe53 	bl	94e0 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    183a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    183c:	b170      	cbz	r0, 185c <wavHeaderWrite(char*)+0x48>
    183e:	4639      	mov	r1, r7
    1840:	f44f 7200 	mov.w	r2, #512	; 0x200
    1844:	f007 ff82 	bl	974c <FatFile::write(void const*, unsigned int)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1848:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    184a:	b1e8      	cbz	r0, 1888 <wavHeaderWrite(char*)+0x74>
    184c:	b10d      	cbz	r5, 1852 <wavHeaderWrite(char*)+0x3e>
}
    184e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1852:	4631      	mov	r1, r6
    1854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1858:	f007 be42 	b.w	94e0 <FatFile::seekSet(unsigned long)>
    185c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    185e:	2800      	cmp	r0, #0
    1860:	d0f5      	beq.n	184e <wavHeaderWrite(char*)+0x3a>
    1862:	4639      	mov	r1, r7
    1864:	f44f 7200 	mov.w	r2, #512	; 0x200
    1868:	f006 fc16 	bl	8098 <ExFatFile::write(void const*, unsigned int)>
    186c:	e7ec      	b.n	1848 <wavHeaderWrite(char*)+0x34>
    186e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    1870:	2800      	cmp	r0, #0
    1872:	d0ec      	beq.n	184e <wavHeaderWrite(char*)+0x3a>
    1874:	2200      	movs	r2, #0
    1876:	2300      	movs	r3, #0
    1878:	f005 fdde 	bl	7438 <ExFatFile::seekSet(unsigned long long)>
    187c:	e7dd      	b.n	183a <wavHeaderWrite(char*)+0x26>
    187e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    1880:	b15b      	cbz	r3, 189a <wavHeaderWrite(char*)+0x86>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
    1882:	e9d3 6500 	ldrd	r6, r5, [r3]
    1886:	e7cd      	b.n	1824 <wavHeaderWrite(char*)+0x10>
    1888:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    188a:	2800      	cmp	r0, #0
    188c:	d0df      	beq.n	184e <wavHeaderWrite(char*)+0x3a>
    188e:	4632      	mov	r2, r6
    1890:	462b      	mov	r3, r5
    1892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1896:	f005 bdcf 	b.w	7438 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->curPosition() : 0;
    189a:	461e      	mov	r6, r3
    189c:	461d      	mov	r5, r3
    189e:	e7c1      	b.n	1824 <wavHeaderWrite(char*)+0x10>
    18a0:	20015760 	.word	0x20015760
    18a4:	200004a4 	.word	0x200004a4
    18a8:	20008a6c 	.word	0x20008a6c

000018ac <makeHeader(long*)>:
{
    18ac:	b530      	push	{r4, r5, lr}
    18ae:	b089      	sub	sp, #36	; 0x24
    18b0:	4604      	mov	r4, r0
    rtc_get_datetime(&t); 
    18b2:	a806      	add	r0, sp, #24
    18b4:	f003 ffae 	bl	5814 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    18b8:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    18bc:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    18c0:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    18c4:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    18c8:	e9cd 3003 	strd	r3, r0, [sp, #12]
    18cc:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    18d0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    18d4:	9000      	str	r0, [sp, #0]
    18d6:	4620      	mov	r0, r4
    18d8:	e9cd 2101 	strd	r2, r1, [sp, #4]
    18dc:	4a1b      	ldr	r2, [pc, #108]	; (194c <makeHeader(long*)+0xa0>)
    18de:	491c      	ldr	r1, [pc, #112]	; (1950 <makeHeader(long*)+0xa4>)
    18e0:	f010 fd80 	bl	123e4 <sprintf>
    header[7] = fsamp;
    18e4:	491b      	ldr	r1, [pc, #108]	; (1954 <makeHeader(long*)+0xa8>)
    header[9] = t_acq;
    18e6:	481c      	ldr	r0, [pc, #112]	; (1958 <makeHeader(long*)+0xac>)
    header[10] = t_on;
    18e8:	4a1c      	ldr	r2, [pc, #112]	; (195c <makeHeader(long*)+0xb0>)
    header[7] = fsamp;
    18ea:	680d      	ldr	r5, [r1, #0]
    header[9] = t_acq;
    18ec:	8800      	ldrh	r0, [r0, #0]
    header[10] = t_on;
    18ee:	8812      	ldrh	r2, [r2, #0]
    header[9] = t_acq;
    18f0:	b280      	uxth	r0, r0
    header[11] = t_rep;
    18f2:	4b1b      	ldr	r3, [pc, #108]	; (1960 <makeHeader(long*)+0xb4>)
    header[10] = t_on;
    18f4:	b292      	uxth	r2, r2
    header[6] = SerNum;        // serial number
    18f6:	491b      	ldr	r1, [pc, #108]	; (1964 <makeHeader(long*)+0xb8>)
    header[11] = t_rep;
    18f8:	881b      	ldrh	r3, [r3, #0]
    header[10] = t_on;
    18fa:	62a2      	str	r2, [r4, #40]	; 0x28
    header[12] = proc;
    18fc:	4a1a      	ldr	r2, [pc, #104]	; (1968 <makeHeader(long*)+0xbc>)
    header[11] = t_rep;
    18fe:	b29b      	uxth	r3, r3
    header[6] = SerNum;        // serial number
    1900:	6809      	ldr	r1, [r1, #0]
    header[12] = proc;
    1902:	8812      	ldrh	r2, [r2, #0]
    header[9] = t_acq;
    1904:	6260      	str	r0, [r4, #36]	; 0x24
    header[5] = 30;            // SW version
    1906:	201e      	movs	r0, #30
    header[12] = proc;
    1908:	b212      	sxth	r2, r2
    header[11] = t_rep;
    190a:	62e3      	str	r3, [r4, #44]	; 0x2c
    header[7] = fsamp;
    190c:	61e5      	str	r5, [r4, #28]
    header[8] = NCHAN_ACQ;
    190e:	2501      	movs	r5, #1
    header[12] = proc;
    1910:	6322      	str	r2, [r4, #48]	; 0x30
    header[14] = again;
    1912:	4a16      	ldr	r2, [pc, #88]	; (196c <makeHeader(long*)+0xc0>)
    header[8] = NCHAN_ACQ;
    1914:	6225      	str	r5, [r4, #32]
    header[5] = 30;            // SW version
    1916:	e9c4 0105 	strd	r0, r1, [r4, #20]
    header[13] = shift;
    191a:	4815      	ldr	r0, [pc, #84]	; (1970 <makeHeader(long*)+0xc4>)
    191c:	8803      	ldrh	r3, [r0, #0]
    header[14] = again;
    191e:	8812      	ldrh	r2, [r2, #0]
    header[13] = shift;
    1920:	b21b      	sxth	r3, r3
    header[15] = dgain;
    1922:	4814      	ldr	r0, [pc, #80]	; (1974 <makeHeader(long*)+0xc8>)
    header[14] = again;
    1924:	b212      	sxth	r2, r2
    header[13] = shift;
    1926:	6363      	str	r3, [r4, #52]	; 0x34
    header[15] = dgain;
    1928:	8803      	ldrh	r3, [r0, #0]
    writeHeaderInfo((char *)&header[20],SerNum);
    192a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    header[14] = again;
    192e:	63a2      	str	r2, [r4, #56]	; 0x38
    header[15] = dgain;
    1930:	b21b      	sxth	r3, r3
    1932:	4a11      	ldr	r2, [pc, #68]	; (1978 <makeHeader(long*)+0xcc>)
    1934:	63e3      	str	r3, [r4, #60]	; 0x3c
    1936:	6813      	ldr	r3, [r2, #0]
    header[16] = millis();
    1938:	6423      	str	r3, [r4, #64]	; 0x40
    writeHeaderInfo((char *)&header[20],SerNum);
    193a:	f7ff fecf 	bl	16dc <writeHeaderInfo(char*, int)>
    header[127]=0x55555555;
    193e:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
}
    1942:	4628      	mov	r0, r5
    header[127]=0x55555555;
    1944:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
}
    1948:	b009      	add	sp, #36	; 0x24
    194a:	bd30      	pop	{r4, r5, pc}
    194c:	200004b0 	.word	0x200004b0
    1950:	20000418 	.word	0x20000418
    1954:	200093ec 	.word	0x200093ec
    1958:	20009422 	.word	0x20009422
    195c:	20009424 	.word	0x20009424
    1960:	20016052 	.word	0x20016052
    1964:	2000b208 	.word	0x2000b208
    1968:	2001604a 	.word	0x2001604a
    196c:	20009418 	.word	0x20009418
    1970:	20016050 	.word	0x20016050
    1974:	20016042 	.word	0x20016042
    1978:	20016020 	.word	0x20016020

0000197c <newDirectory(char*)>:
  d0=d;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    197c:	b510      	push	{r4, lr}
    197e:	b088      	sub	sp, #32
    1980:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1982:	a806      	add	r0, sp, #24
    1984:	f003 ff46 	bl	5814 <rtc_get_datetime(datetime_t*)>
  if(d==d0) return 0; // same day
    1988:	4a17      	ldr	r2, [pc, #92]	; (19e8 <newDirectory(char*)+0x6c>)

    if(HourDir)
    {
      if(newFolder(t.hour))
    198a:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  if(d==d0) return 0; // same day
    198e:	6811      	ldr	r1, [r2, #0]
    1990:	428b      	cmp	r3, r1
    1992:	d026      	beq.n	19e2 <newDirectory(char*)+0x66>
      {   
          sprintf(dirName, "/%s_%s_%s_%06x_%04d%02d%02d/%02d/", 
    1994:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1998:	4914      	ldr	r1, [pc, #80]	; (19ec <newDirectory(char*)+0x70>)
    199a:	9305      	str	r3, [sp, #20]
  d0=d;
    199c:	6013      	str	r3, [r2, #0]
          sprintf(dirName, "/%s_%s_%s_%06x_%04d%02d%02d/%02d/", 
    199e:	6809      	ldr	r1, [r1, #0]
    19a0:	f99d 201a 	ldrsb.w	r2, [sp, #26]
    19a4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    19a8:	9004      	str	r0, [sp, #16]
    19aa:	4811      	ldr	r0, [pc, #68]	; (19f0 <newDirectory(char*)+0x74>)
    19ac:	9101      	str	r1, [sp, #4]
    19ae:	9000      	str	r0, [sp, #0]
    19b0:	4620      	mov	r0, r4
    19b2:	4910      	ldr	r1, [pc, #64]	; (19f4 <newDirectory(char*)+0x78>)
    19b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    19b8:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <newDirectory(char*)+0x7c>)
    19ba:	4a10      	ldr	r2, [pc, #64]	; (19fc <newDirectory(char*)+0x80>)
    19bc:	f010 fd12 	bl	123e4 <sprintf>
              b_string,k_string,n_string,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    19c0:	480f      	ldr	r0, [pc, #60]	; (1a00 <newDirectory(char*)+0x84>)
    19c2:	f00c f821 	bl	da08 <Print::println()>
    19c6:	2102      	movs	r1, #2
    19c8:	480e      	ldr	r0, [pc, #56]	; (1a04 <newDirectory(char*)+0x88>)
    19ca:	f00e fba3 	bl	10114 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    19ce:	4620      	mov	r0, r4
    19d0:	f011 fa96 	bl	12f00 <strlen>
    19d4:	4601      	mov	r1, r0
    19d6:	4620      	mov	r0, r4
    19d8:	f00e fb9c 	bl	10114 <usb_serial_write>
          return 1;   // have new directory
    19dc:	2001      	movs	r0, #1
          Serial.println(); Serial.print(": "); Serial.print(dirName);
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory
}
    19de:	b008      	add	sp, #32
    19e0:	bd10      	pop	{r4, pc}
    return 0;       // keep old directory
    19e2:	2000      	movs	r0, #0
}
    19e4:	b008      	add	sp, #32
    19e6:	bd10      	pop	{r4, pc}
    19e8:	20008e3c 	.word	0x20008e3c
    19ec:	2000b208 	.word	0x2000b208
    19f0:	20015800 	.word	0x20015800
    19f4:	20000478 	.word	0x20000478
    19f8:	200157b0 	.word	0x200157b0
    19fc:	20015710 	.word	0x20015710
    1a00:	20008a6c 	.word	0x20008a6c
    1a04:	200006e4 	.word	0x200006e4

00001a08 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    1a08:	b510      	push	{r4, lr}
    1a0a:	b088      	sub	sp, #32
    1a0c:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1a0e:	a806      	add	r0, sp, #24
    1a10:	f003 ff00 	bl	5814 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    1a14:	4b25      	ldr	r3, [pc, #148]	; (1aac <newFileName(char*)+0xa4>)
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    1a16:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    if(proc==0)
    1a1a:	881b      	ldrh	r3, [r3, #0]
    1a1c:	b21b      	sxth	r3, r3
    1a1e:	bb83      	cbnz	r3, 1a82 <newFileName(char*)+0x7a>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    1a20:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1a24:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1a28:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    1a2c:	e9cd 3003 	strd	r3, r0, [sp, #12]
    1a30:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    1a34:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    1a38:	9000      	str	r0, [sp, #0]
    1a3a:	4620      	mov	r0, r4
    1a3c:	e9cd 2101 	strd	r2, r1, [sp, #4]
    1a40:	4a1b      	ldr	r2, [pc, #108]	; (1ab0 <newFileName(char*)+0xa8>)
    1a42:	491c      	ldr	r1, [pc, #112]	; (1ab4 <newFileName(char*)+0xac>)
    1a44:	f010 fcce 	bl	123e4 <sprintf>
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    1a48:	481b      	ldr	r0, [pc, #108]	; (1ab8 <newFileName(char*)+0xb0>)
    1a4a:	f00b ffdd 	bl	da08 <Print::println()>
    1a4e:	2102      	movs	r1, #2
    1a50:	481a      	ldr	r0, [pc, #104]	; (1abc <newFileName(char*)+0xb4>)
    1a52:	f00e fb5f 	bl	10114 <usb_serial_write>
    1a56:	4620      	mov	r0, r4
    1a58:	f011 fa52 	bl	12f00 <strlen>
    1a5c:	4601      	mov	r1, r0
    1a5e:	4620      	mov	r0, r4
    1a60:	f00e fb58 	bl	10114 <usb_serial_write>
    1a64:	2101      	movs	r1, #1
    1a66:	4816      	ldr	r0, [pc, #88]	; (1ac0 <newFileName(char*)+0xb8>)
    1a68:	f00e fb54 	bl	10114 <usb_serial_write>
    Serial.print(" "); Serial.print(micros());
    1a6c:	f00c fb22 	bl	e0b4 <micros>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1a70:	2300      	movs	r3, #0
    1a72:	4601      	mov	r1, r0
    1a74:	220a      	movs	r2, #10
    1a76:	4810      	ldr	r0, [pc, #64]	; (1ab8 <newFileName(char*)+0xb0>)
    1a78:	f00b fff0 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

    return 1;
}
    1a7c:	2001      	movs	r0, #1
    1a7e:	b008      	add	sp, #32
    1a80:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    1a82:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1a86:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1a8a:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    1a8e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    1a92:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    1a96:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    1a9a:	9000      	str	r0, [sp, #0]
    1a9c:	4620      	mov	r0, r4
    1a9e:	e9cd 2101 	strd	r2, r1, [sp, #4]
    1aa2:	4a03      	ldr	r2, [pc, #12]	; (1ab0 <newFileName(char*)+0xa8>)
    1aa4:	4907      	ldr	r1, [pc, #28]	; (1ac4 <newFileName(char*)+0xbc>)
    1aa6:	f010 fc9d 	bl	123e4 <sprintf>
    1aaa:	e7cd      	b.n	1a48 <newFileName(char*)+0x40>
    1aac:	2001604a 	.word	0x2001604a
    1ab0:	20000434 	.word	0x20000434
    1ab4:	20000438 	.word	0x20000438
    1ab8:	20008a6c 	.word	0x20008a6c
    1abc:	200006e4 	.word	0x200006e4
    1ac0:	20000b78 	.word	0x20000b78
    1ac4:	20000458 	.word	0x20000458

00001ac8 <storeData(short)>:
uint32_t nbuf;
void do_hibernate(void);

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    1ac8:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    1aca:	4604      	mov	r4, r0
{
    1acc:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    1ace:	2800      	cmp	r0, #0
    1ad0:	d07d      	beq.n	1bce <storeData(short)+0x106>
        {   //msc_activate(true);
            return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    1ad2:	2801      	cmp	r0, #1
    1ad4:	d00a      	beq.n	1aec <storeData(short)+0x24>
        { status = DOCLOSE;
        }
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open and header written: store data records
    1ad6:	2802      	cmp	r0, #2
    1ad8:	f000 810f 	beq.w	1cfa <storeData(short)+0x232>
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1adc:	1ec3      	subs	r3, r0, #3
    1ade:	b29b      	uxth	r3, r3
    1ae0:	2b02      	cmp	r3, #2
    1ae2:	f240 80f9 	bls.w	1cd8 <storeData(short)+0x210>
    1ae6:	4620      	mov	r0, r4
          adc_exit();
          digitalWrite(LED,LOW);
        }
    }
    return status;
}
    1ae8:	b014      	add	sp, #80	; 0x50
    1aea:	bd70      	pop	{r4, r5, r6, pc}
    1aec:	4db2      	ldr	r5, [pc, #712]	; (1db8 <storeData(short)+0x2f0>)
        if(proc==0)
    1aee:	4bb3      	ldr	r3, [pc, #716]	; (1dbc <storeData(short)+0x2f4>)
    {   nbuf=0;
    1af0:	2200      	movs	r2, #0
    1af2:	4eb3      	ldr	r6, [pc, #716]	; (1dc0 <storeData(short)+0x2f8>)
        if(proc==0)
    1af4:	881b      	ldrh	r3, [r3, #0]
    {   nbuf=0;
    1af6:	6032      	str	r2, [r6, #0]
        if(proc==0)
    1af8:	b21b      	sxth	r3, r3
    1afa:	2b00      	cmp	r3, #0
    1afc:	f040 80bb 	bne.w	1c76 <storeData(short)+0x1ae>
  memcpy(wav_hdr.rId,"RIFF",4);
    1b00:	4cb0      	ldr	r4, [pc, #704]	; (1dc4 <storeData(short)+0x2fc>)
  wav_hdr.nFormatTag=1;
    1b02:	f04f 0e10 	mov.w	lr, #16
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    1b06:	4ab0      	ldr	r2, [pc, #704]	; (1dc8 <storeData(short)+0x300>)
  wav_hdr.dLen = 0; // will be updated at closing
    1b08:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
  writeHeaderInfo(&wav_hdr.info[0],serNum);
    1b0c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
  wav_hdr.nBlockAlign=nchan*nbytes;
    1b10:	4bae      	ldr	r3, [pc, #696]	; (1dcc <storeData(short)+0x304>)
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    1b12:	6812      	ldr	r2, [r2, #0]
  wav_hdr.nBlockAlign=nchan*nbytes;
    1b14:	6223      	str	r3, [r4, #32]
  memcpy(wav_hdr.rId,"RIFF",4);
    1b16:	f103 438c 	add.w	r3, r3, #1174405120	; 0x46000000
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    1b1a:	49ad      	ldr	r1, [pc, #692]	; (1dd0 <storeData(short)+0x308>)
  memcpy(wav_hdr.rId,"RIFF",4);
    1b1c:	f503 1359 	add.w	r3, r3, #3555328	; 0x364000
  wav_hdr.nSamplesPerSec=fsamp;
    1b20:	61a2      	str	r2, [r4, #24]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    1b22:	0052      	lsls	r2, r2, #1
  writeHeaderInfo(&wav_hdr.info[0],serNum);
    1b24:	6809      	ldr	r1, [r1, #0]
  memcpy(wav_hdr.rId,"RIFF",4);
    1b26:	f503 6315 	add.w	r3, r3, #2384	; 0x950
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    1b2a:	61e2      	str	r2, [r4, #28]
  memcpy(wav_hdr.rId,"RIFF",4);
    1b2c:	6023      	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    1b2e:	f5a3 0370 	sub.w	r3, r3, #15728640	; 0xf00000
    1b32:	f2a3 73fb 	subw	r3, r3, #2043	; 0x7fb
    1b36:	60a3      	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    1b38:	f103 435b 	add.w	r3, r3, #3674210304	; 0xdb000000
    1b3c:	f503 13f1 	add.w	r3, r3, #1974272	; 0x1e2000
    1b40:	f603 430f 	addw	r3, r3, #3087	; 0xc0f
    1b44:	60e3      	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    1b46:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1b4a:	f6a3 4302 	subw	r3, r3, #3074	; 0xc02
    1b4e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    1b52:	f103 230d 	add.w	r3, r3, #218107136	; 0xd000d00
    1b56:	f503 0372 	add.w	r3, r3, #15859712	; 0xf20000
    1b5a:	3305      	adds	r3, #5
    1b5c:	6263      	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    1b5e:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
    1b62:	6063      	str	r3, [r4, #4]
  wav_hdr.iLen = 512 - 13*4;
    1b64:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
    1b68:	62a3      	str	r3, [r4, #40]	; 0x28
  wav_hdr.nFormatTag=1;
    1b6a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1b6e:	e9c4 e304 	strd	lr, r3, [r4, #16]
  writeHeaderInfo(&wav_hdr.info[0],serNum);
    1b72:	f7ff fdb3 	bl	16dc <writeHeaderInfo(char*, int)>
    return m_fFile ? m_fFile->write(buf, count) :
    1b76:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    1b78:	4621      	mov	r1, r4
    1b7a:	2800      	cmp	r0, #0
    1b7c:	f000 8083 	beq.w	1c86 <storeData(short)+0x1be>
    1b80:	f44f 7200 	mov.w	r2, #512	; 0x200
    1b84:	f007 fde2 	bl	974c <FatFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    1b88:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1b8c:	f2c0 8087 	blt.w	1c9e <storeData(short)+0x1d6>
    1b90:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1b92:	2800      	cmp	r0, #0
    1b94:	f000 80a8 	beq.w	1ce8 <storeData(short)+0x220>
    1b98:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    1b9c:	498d      	ldr	r1, [pc, #564]	; (1dd4 <storeData(short)+0x30c>)
    1b9e:	f007 fdd5 	bl	974c <FatFile::write(void const*, unsigned int)>
    1ba2:	4604      	mov	r4, r0
        if((nd=file.write((const uint8_t*)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    1ba4:	f5b4 5f40 	cmp.w	r4, #12288	; 0x3000
    1ba8:	f0c0 80b9 	bcc.w	1d1e <storeData(short)+0x256>
        disk_count++;
    1bac:	498a      	ldr	r1, [pc, #552]	; (1dd8 <storeData(short)+0x310>)
          nbuf++;
    1bae:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    1bb0:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    1bb2:	3301      	adds	r3, #1
        disk_count++;
    1bb4:	3201      	adds	r2, #1
          nbuf++;
    1bb6:	6033      	str	r3, [r6, #0]
        disk_count++;
    1bb8:	600a      	str	r2, [r1, #0]
    1bba:	4988      	ldr	r1, [pc, #544]	; (1ddc <storeData(short)+0x314>)
        if((nbuf % 1000)==0 ) file.flush();
    1bbc:	4a88      	ldr	r2, [pc, #544]	; (1de0 <storeData(short)+0x318>)
        disk_count++;
    1bbe:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    1bc2:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    1bc6:	d27f      	bcs.n	1cc8 <storeData(short)+0x200>
           m_xFile ? m_xFile->sync() : false;
    1bc8:	2002      	movs	r0, #2
}
    1bca:	b014      	add	sp, #80	; 0x50
    1bcc:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    1bce:	4885      	ldr	r0, [pc, #532]	; (1de4 <storeData(short)+0x31c>)
    1bd0:	f7ff fed4 	bl	197c <newDirectory(char*)>
    1bd4:	b1e8      	cbz	r0, 1c12 <storeData(short)+0x14a>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1bd6:	4d84      	ldr	r5, [pc, #528]	; (1de8 <storeData(short)+0x320>)
    1bd8:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    1bda:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    1bde:	2a00      	cmp	r2, #0
    1be0:	f000 80c5 	beq.w	1d6e <storeData(short)+0x2a6>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1be4:	466e      	mov	r6, sp
    1be6:	4611      	mov	r1, r2
    1be8:	4623      	mov	r3, r4
    1bea:	4a7e      	ldr	r2, [pc, #504]	; (1de4 <storeData(short)+0x31c>)
    1bec:	4630      	mov	r0, r6
  FatFile() {}
    1bee:	9400      	str	r4, [sp, #0]
    1bf0:	f007 f9da 	bl	8fa8 <FatFile::open(FatVolume*, char const*, int)>
    1bf4:	2800      	cmp	r0, #0
    1bf6:	f000 80c7 	beq.w	1d88 <storeData(short)+0x2c0>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1bfa:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    1bfc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    1c00:	2800      	cmp	r0, #0
    1c02:	f000 8105 	beq.w	1e10 <storeData(short)+0x348>
    1c06:	4977      	ldr	r1, [pc, #476]	; (1de4 <storeData(short)+0x31c>)
    1c08:	f008 ff1a 	bl	aa40 <FatVolume::chdir(char const*)>
    1c0c:	2800      	cmp	r0, #0
    1c0e:	f000 8108 	beq.w	1e22 <storeData(short)+0x35a>
        if(newFileName(fileName))
    1c12:	4876      	ldr	r0, [pc, #472]	; (1dec <storeData(short)+0x324>)
    1c14:	f7ff fef8 	bl	1a08 <newFileName(char*)>
    1c18:	2800      	cmp	r0, #0
    1c1a:	f000 8146 	beq.w	1eaa <storeData(short)+0x3e2>
            file = sd->open(fileName, FILE_WRITE); 
    1c1e:	4972      	ldr	r1, [pc, #456]	; (1de8 <storeData(short)+0x320>)
    1c20:	f244 2302 	movw	r3, #16898	; 0x4202
    1c24:	4a71      	ldr	r2, [pc, #452]	; (1dec <storeData(short)+0x324>)
    1c26:	4668      	mov	r0, sp
    1c28:	6809      	ldr	r1, [r1, #0]
    1c2a:	f009 f8a5 	bl	ad78 <FsVolume::open(char const*, int)>
class Print
    1c2e:	4d62      	ldr	r5, [pc, #392]	; (1db8 <storeData(short)+0x2f0>)
    1c30:	f89d 300c 	ldrb.w	r3, [sp, #12]
    1c34:	f105 0010 	add.w	r0, r5, #16
    1c38:	732b      	strb	r3, [r5, #12]
    1c3a:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1c3e:	e9c5 1201 	strd	r1, r2, [r5, #4]
    1c42:	a904      	add	r1, sp, #16
    1c44:	f008 ff24 	bl	aa90 <FsBaseFile::operator=(FsBaseFile const&)>
    1c48:	4b69      	ldr	r3, [pc, #420]	; (1df0 <storeData(short)+0x328>)
  ~FsBaseFile() {close();}
    1c4a:	a804      	add	r0, sp, #16
    1c4c:	9300      	str	r3, [sp, #0]
    1c4e:	f008 ff79 	bl	ab44 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    1c52:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1c54:	2b00      	cmp	r3, #0
    1c56:	f47f af4a 	bne.w	1aee <storeData(short)+0x26>
    1c5a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	f47f af46 	bne.w	1aee <storeData(short)+0x26>
    1c62:	2111      	movs	r1, #17
    1c64:	4863      	ldr	r0, [pc, #396]	; (1df4 <storeData(short)+0x32c>)
    1c66:	f00e fa55 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1c6a:	4863      	ldr	r0, [pc, #396]	; (1df8 <storeData(short)+0x330>)
    1c6c:	f00b fecc 	bl	da08 <Print::println()>
                return STOPPED; 
    1c70:	f04f 30ff 	mov.w	r0, #4294967295
    1c74:	e738      	b.n	1ae8 <storeData(short)+0x20>
          makeHeader(fileHeader);
    1c76:	4861      	ldr	r0, [pc, #388]	; (1dfc <storeData(short)+0x334>)
    1c78:	f7ff fe18 	bl	18ac <makeHeader(long*)>
    return m_fFile ? m_fFile->write(buf, count) :
    1c7c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    1c7e:	495f      	ldr	r1, [pc, #380]	; (1dfc <storeData(short)+0x334>)
    1c80:	2800      	cmp	r0, #0
    1c82:	f47f af7d 	bne.w	1b80 <storeData(short)+0xb8>
    1c86:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1c88:	2800      	cmp	r0, #0
    1c8a:	f43f af2d 	beq.w	1ae8 <storeData(short)+0x20>
    1c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
    1c92:	f006 fa01 	bl	8098 <ExFatFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    1c96:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1c9a:	f6bf af79 	bge.w	1b90 <storeData(short)+0xc8>
  bool isOpen() const {return m_fFile || m_xFile;}
    1c9e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	f000 80f0 	beq.w	1e86 <storeData(short)+0x3be>
    1ca6:	2403      	movs	r4, #3
        {   if(proc==0)
    1ca8:	4b44      	ldr	r3, [pc, #272]	; (1dbc <storeData(short)+0x2f4>)
    1caa:	881b      	ldrh	r3, [r3, #0]
    1cac:	b21b      	sxth	r3, r3
    1cae:	b33b      	cbz	r3, 1d00 <storeData(short)+0x238>
            file.close();
    1cb0:	4853      	ldr	r0, [pc, #332]	; (1e00 <storeData(short)+0x338>)
    1cb2:	f008 ff47 	bl	ab44 <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    1cb6:	2c04      	cmp	r4, #4
    1cb8:	f000 80ba 	beq.w	1e30 <storeData(short)+0x368>
        else if(status==DOCLOSE)
    1cbc:	2c03      	cmp	r4, #3
    1cbe:	f040 80e7 	bne.w	1e90 <storeData(short)+0x3c8>
          status=CLOSED;
    1cc2:	2000      	movs	r0, #0
}
    1cc4:	b014      	add	sp, #80	; 0x50
    1cc6:	bd70      	pop	{r4, r5, r6, pc}
    return m_fFile ? m_fFile->sync() :
    1cc8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1cca:	2800      	cmp	r0, #0
    1ccc:	f000 80bd 	beq.w	1e4a <storeData(short)+0x382>
    1cd0:	f007 fd36 	bl	9740 <FatFile::sync()>
    1cd4:	2002      	movs	r0, #2
    1cd6:	e707      	b.n	1ae8 <storeData(short)+0x20>
    1cd8:	4d37      	ldr	r5, [pc, #220]	; (1db8 <storeData(short)+0x2f0>)
  bool isOpen() const {return m_fFile || m_xFile;}
    1cda:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d1e3      	bne.n	1ca8 <storeData(short)+0x1e0>
    1ce0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d1e0      	bne.n	1ca8 <storeData(short)+0x1e0>
    1ce6:	e7e6      	b.n	1cb6 <storeData(short)+0x1ee>
    1ce8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1cea:	b1b8      	cbz	r0, 1d1c <storeData(short)+0x254>
    1cec:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    1cf0:	4938      	ldr	r1, [pc, #224]	; (1dd4 <storeData(short)+0x30c>)
    1cf2:	f006 f9d1 	bl	8098 <ExFatFile::write(void const*, unsigned int)>
    1cf6:	4604      	mov	r4, r0
    1cf8:	e754      	b.n	1ba4 <storeData(short)+0xdc>
    1cfa:	4d2f      	ldr	r5, [pc, #188]	; (1db8 <storeData(short)+0x2f0>)
    1cfc:	4e30      	ldr	r6, [pc, #192]	; (1dc0 <storeData(short)+0x2f8>)
    1cfe:	e747      	b.n	1b90 <storeData(short)+0xc8>
              char *hdr = wavHeaderUpdate(nbuf*MAX_DISK_BUFFER*4);
    1d00:	4b2f      	ldr	r3, [pc, #188]	; (1dc0 <storeData(short)+0x2f8>)
  wav_hdr.dLen = nbytes;
    1d02:	4830      	ldr	r0, [pc, #192]	; (1dc4 <storeData(short)+0x2fc>)
              char *hdr = wavHeaderUpdate(nbuf*MAX_DISK_BUFFER*4);
    1d04:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    1d06:	6842      	ldr	r2, [r0, #4]
              char *hdr = wavHeaderUpdate(nbuf*MAX_DISK_BUFFER*4);
    1d08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1d0c:	031b      	lsls	r3, r3, #12
  wav_hdr.rLen += wav_hdr.dLen;
    1d0e:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    1d10:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    1d14:	6042      	str	r2, [r0, #4]
              wavHeaderWrite(hdr);
    1d16:	f7ff fd7d 	bl	1814 <wavHeaderWrite(char*)>
    1d1a:	e7c9      	b.n	1cb0 <storeData(short)+0x1e8>
    1d1c:	4604      	mov	r4, r0
    1d1e:	2101      	movs	r1, #1
    1d20:	4838      	ldr	r0, [pc, #224]	; (1e04 <storeData(short)+0x33c>)
    1d22:	f00e f9f7 	bl	10114 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1d26:	2300      	movs	r3, #0
    1d28:	220a      	movs	r2, #10
    1d2a:	4621      	mov	r1, r4
    1d2c:	4832      	ldr	r0, [pc, #200]	; (1df8 <storeData(short)+0x330>)
    1d2e:	f00b fe95 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d32:	2101      	movs	r1, #1
    1d34:	4834      	ldr	r0, [pc, #208]	; (1e08 <storeData(short)+0x340>)
    1d36:	f00e f9ed 	bl	10114 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1d3a:	2102      	movs	r1, #2
    1d3c:	482e      	ldr	r0, [pc, #184]	; (1df8 <storeData(short)+0x330>)
    1d3e:	f00b fe57 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1d42:	482d      	ldr	r0, [pc, #180]	; (1df8 <storeData(short)+0x330>)
    1d44:	f00b fe60 	bl	da08 <Print::println()>
        disk_count++;
    1d48:	4923      	ldr	r1, [pc, #140]	; (1dd8 <storeData(short)+0x310>)
    1d4a:	4824      	ldr	r0, [pc, #144]	; (1ddc <storeData(short)+0x314>)
    1d4c:	6833      	ldr	r3, [r6, #0]
    1d4e:	680a      	ldr	r2, [r1, #0]
    1d50:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    1d54:	4822      	ldr	r0, [pc, #136]	; (1de0 <storeData(short)+0x318>)
        disk_count++;
    1d56:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    1d58:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    1d5c:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    1d5e:	d39e      	bcc.n	1c9e <storeData(short)+0x1d6>
    return m_fFile ? m_fFile->sync() :
    1d60:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1d62:	2800      	cmp	r0, #0
    1d64:	d078      	beq.n	1e58 <storeData(short)+0x390>
          status=DOCLOSE; 
    1d66:	2403      	movs	r4, #3
    1d68:	f007 fcea 	bl	9740 <FatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1d6c:	e7b5      	b.n	1cda <storeData(short)+0x212>
    1d6e:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    1d72:	b1d1      	cbz	r1, 1daa <storeData(short)+0x2e2>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1d74:	466e      	mov	r6, sp
    1d76:	4613      	mov	r3, r2
  ExFatFile() {}
    1d78:	920c      	str	r2, [sp, #48]	; 0x30
    1d7a:	4630      	mov	r0, r6
    1d7c:	4a19      	ldr	r2, [pc, #100]	; (1de4 <storeData(short)+0x31c>)
    1d7e:	f005 fe19 	bl	79b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1d82:	2800      	cmp	r0, #0
    1d84:	f47f af39 	bne.w	1bfa <storeData(short)+0x132>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1d88:	682b      	ldr	r3, [r5, #0]
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    1d8a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    1d8e:	2a00      	cmp	r2, #0
    1d90:	d06a      	beq.n	1e68 <storeData(short)+0x3a0>
    1d92:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1d94:	f502 6189 	add.w	r1, r2, #1096	; 0x448
    1d98:	2301      	movs	r3, #1
    1d9a:	4630      	mov	r0, r6
    1d9c:	4a11      	ldr	r2, [pc, #68]	; (1de4 <storeData(short)+0x31c>)
    1d9e:	9400      	str	r4, [sp, #0]
    1da0:	f007 f80a 	bl	8db8 <FatFile::mkdir(FatFile*, char const*, bool)>
    1da4:	2800      	cmp	r0, #0
    1da6:	f47f af28 	bne.w	1bfa <storeData(short)+0x132>
    1daa:	4813      	ldr	r0, [pc, #76]	; (1df8 <storeData(short)+0x330>)
    1dac:	4917      	ldr	r1, [pc, #92]	; (1e0c <storeData(short)+0x344>)
    1dae:	f7ff fbb9 	bl	1524 <Print::println(char const*) [clone .isra.0]>
    1db2:	f04f 30ff 	mov.w	r0, #4294967295
    1db6:	e697      	b.n	1ae8 <storeData(short)+0x20>
    1db8:	20015760 	.word	0x20015760
    1dbc:	2001604a 	.word	0x2001604a
    1dc0:	20015828 	.word	0x20015828
    1dc4:	20014ccc 	.word	0x20014ccc
    1dc8:	200093ec 	.word	0x200093ec
    1dcc:	00100002 	.word	0x00100002
    1dd0:	2000b208 	.word	0x2000b208
    1dd4:	2000b60c 	.word	0x2000b60c
    1dd8:	20015738 	.word	0x20015738
    1ddc:	26e978d5 	.word	0x26e978d5
    1de0:	00418937 	.word	0x00418937
    1de4:	20014a7c 	.word	0x20014a7c
    1de8:	200093f4 	.word	0x200093f4
    1dec:	20014ecc 	.word	0x20014ecc
    1df0:	20000b98 	.word	0x20000b98
    1df4:	20000808 	.word	0x20000808
    1df8:	20008a6c 	.word	0x20008a6c
    1dfc:	2000e60c 	.word	0x2000e60c
    1e00:	20015770 	.word	0x20015770
    1e04:	2000081c 	.word	0x2000081c
    1e08:	20000b78 	.word	0x20000b78
    1e0c:	200007f0 	.word	0x200007f0
    1e10:	f8d3 0484 	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    1e14:	b128      	cbz	r0, 1e22 <storeData(short)+0x35a>
    1e16:	4926      	ldr	r1, [pc, #152]	; (1eb0 <storeData(short)+0x3e8>)
    1e18:	f006 fdce 	bl	89b8 <ExFatVolume::chdir(char const*)>
    1e1c:	2800      	cmp	r0, #0
    1e1e:	f47f aef8 	bne.w	1c12 <storeData(short)+0x14a>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1e22:	4824      	ldr	r0, [pc, #144]	; (1eb4 <storeData(short)+0x3ec>)
    1e24:	4924      	ldr	r1, [pc, #144]	; (1eb8 <storeData(short)+0x3f0>)
    1e26:	f7ff fb7d 	bl	1524 <Print::println(char const*) [clone .isra.0]>
    1e2a:	f04f 30ff 	mov.w	r0, #4294967295
    1e2e:	e65b      	b.n	1ae8 <storeData(short)+0x20>
  digitalWrite(LED,LOW);
    1e30:	2100      	movs	r1, #0
    1e32:	200d      	movs	r0, #13
    1e34:	f00c f968 	bl	e108 <digitalWrite>
          adc_exit();
    1e38:	f7fe ffde 	bl	df8 <adc_exit()>
            digitalWrite(LED,LOW);
    1e3c:	2100      	movs	r1, #0
    1e3e:	200d      	movs	r0, #13
    1e40:	f00c f962 	bl	e108 <digitalWrite>
            do_hibernate();
    1e44:	f019 fa94 	bl	1b370 <___Z12do_hibernatev_veneer>
    1e48:	e64d      	b.n	1ae6 <storeData(short)+0x1e>
    1e4a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
    1e4c:	2800      	cmp	r0, #0
    1e4e:	f43f aebb 	beq.w	1bc8 <storeData(short)+0x100>
    1e52:	f005 ff39 	bl	7cc8 <ExFatFile::sync()>
    1e56:	e6b7      	b.n	1bc8 <storeData(short)+0x100>
    1e58:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1e5a:	2800      	cmp	r0, #0
    1e5c:	f43f ae44 	beq.w	1ae8 <storeData(short)+0x20>
          status=DOCLOSE; 
    1e60:	2403      	movs	r4, #3
    1e62:	f005 ff31 	bl	7cc8 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1e66:	e738      	b.n	1cda <storeData(short)+0x212>
    1e68:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1e6c:	2900      	cmp	r1, #0
    1e6e:	d09c      	beq.n	1daa <storeData(short)+0x2e2>
    1e70:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1e72:	2301      	movs	r3, #1
    1e74:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    1e78:	4630      	mov	r0, r6
    1e7a:	4a0d      	ldr	r2, [pc, #52]	; (1eb0 <storeData(short)+0x3e8>)
    1e7c:	f006 f82e 	bl	7edc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1e80:	2800      	cmp	r0, #0
    1e82:	d092      	beq.n	1daa <storeData(short)+0x2e2>
    1e84:	e6b9      	b.n	1bfa <storeData(short)+0x132>
  bool isOpen() const {return m_fFile || m_xFile;}
    1e86:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1e88:	2800      	cmp	r0, #0
    1e8a:	f47f af0c 	bne.w	1ca6 <storeData(short)+0x1de>
    1e8e:	e62b      	b.n	1ae8 <storeData(short)+0x20>
  digitalWrite(LED,LOW);
    1e90:	2100      	movs	r1, #0
    1e92:	200d      	movs	r0, #13
    1e94:	f00c f938 	bl	e108 <digitalWrite>
          adc_exit();
    1e98:	f7fe ffae 	bl	df8 <adc_exit()>
          digitalWrite(LED,LOW);
    1e9c:	200d      	movs	r0, #13
    1e9e:	2100      	movs	r1, #0
    1ea0:	f00c f932 	bl	e108 <digitalWrite>
          status=STOPPED;
    1ea4:	f04f 30ff 	mov.w	r0, #4294967295
    1ea8:	e61e      	b.n	1ae8 <storeData(short)+0x20>
            return STOPPED; // if file open fails: don't do anything
    1eaa:	f04f 30ff 	mov.w	r0, #4294967295
    1eae:	e61b      	b.n	1ae8 <storeData(short)+0x20>
    1eb0:	20014a7c 	.word	0x20014a7c
    1eb4:	20008a6c 	.word	0x20008a6c
    1eb8:	200007fc 	.word	0x200007fc

00001ebc <saveData(short)>:
//
volatile int32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    1ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ebe:	4605      	mov	r5, r0
    if(status==STOPPED) 
    1ec0:	3001      	adds	r0, #1
    1ec2:	d03f      	beq.n	1f44 <saveData(short)+0x88>
    { pullData((uint32_t*)tempBuffer0);
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    }

    if(status<CLOSED) return status; // we are stopped: don't do anything
    1ec4:	2d00      	cmp	r5, #0
    1ec6:	db3b      	blt.n	1f40 <saveData(short)+0x84>
  if(state==RUNNING)
    1ec8:	2d02      	cmp	r5, #2
    1eca:	d063      	beq.n	1f94 <saveData(short)+0xd8>

    status=checkEndOfFile(status);

    if(getDataCount() >= NDBL)
    1ecc:	f003 faf6 	bl	54bc <getDataCount()>
    1ed0:	282f      	cmp	r0, #47	; 0x2f
    1ed2:	d935      	bls.n	1f40 <saveData(short)+0x84>
    { 
      if(proc==0)
    1ed4:	4b31      	ldr	r3, [pc, #196]	; (1f9c <saveData(short)+0xe0>)
    1ed6:	881b      	ldrh	r3, [r3, #0]
    1ed8:	b21b      	sxth	r3, r3
    1eda:	2b00      	cmp	r3, #0
    1edc:	d141      	bne.n	1f62 <saveData(short)+0xa6>
    1ede:	4f30      	ldr	r7, [pc, #192]	; (1fa0 <saveData(short)+0xe4>)
    1ee0:	f5a7 46c0 	sub.w	r6, r7, #24576	; 0x6000
      { 
        for(int ii=0; ii<NDBL; ii++)
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1ee4:	f003 faf8 	bl	54d8 <queue_isBusy()>
    1ee8:	4604      	mov	r4, r0
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    1eea:	4630      	mov	r0, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1eec:	2c00      	cmp	r4, #0
    1eee:	d1f9      	bne.n	1ee4 <saveData(short)+0x28>
        for(int ii=0; ii<NDBL; ii++)
    1ef0:	f506 7600 	add.w	r6, r6, #512	; 0x200
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    1ef4:	f003 fb26 	bl	5544 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    1ef8:	42be      	cmp	r6, r7
    1efa:	d1f3      	bne.n	1ee4 <saveData(short)+0x28>
    1efc:	4a29      	ldr	r2, [pc, #164]	; (1fa4 <saveData(short)+0xe8>)
    1efe:	492a      	ldr	r1, [pc, #168]	; (1fa8 <saveData(short)+0xec>)
    1f00:	4613      	mov	r3, r2
        }

        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    1f02:	f853 0f04 	ldr.w	r0, [r3, #4]!
    1f06:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    1f0a:	3401      	adds	r4, #1
    1f0c:	2c08      	cmp	r4, #8
    1f0e:	d1f8      	bne.n	1f02 <saveData(short)+0x46>
    1f10:	4926      	ldr	r1, [pc, #152]	; (1fac <saveData(short)+0xf0>)
    1f12:	4827      	ldr	r0, [pc, #156]	; (1fb0 <saveData(short)+0xf4>)
        { // wav mode; store only top 16 bits
          int32_t * inpp=(int32_t *) tempBuffer0;
          int16_t * outptr=(int16_t *) diskBuffer;
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
          {
            outptr[ii]=(inpp[ii]>>16);
    1f14:	f852 3f04 	ldr.w	r3, [r2, #4]!
    1f18:	141b      	asrs	r3, r3, #16
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1f1a:	4282      	cmp	r2, r0
            outptr[ii]=(inpp[ii]>>16);
    1f1c:	f821 3f02 	strh.w	r3, [r1, #2]!
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1f20:	d1f8      	bne.n	1f14 <saveData(short)+0x58>
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
        }
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      }
      if(haveStore)
    1f22:	4b24      	ldr	r3, [pc, #144]	; (1fb4 <saveData(short)+0xf8>)
    1f24:	681b      	ldr	r3, [r3, #0]
    1f26:	b15b      	cbz	r3, 1f40 <saveData(short)+0x84>
      { digitalWrite(LED,HIGH);
    1f28:	2101      	movs	r1, #1
    1f2a:	200d      	movs	r0, #13
    1f2c:	f00c f8ec 	bl	e108 <digitalWrite>
        status=storeData(status);
    1f30:	4628      	mov	r0, r5
    1f32:	f7ff fdc9 	bl	1ac8 <storeData(short)>
        digitalWrite(LED,LOW);
    1f36:	2100      	movs	r1, #0
        status=storeData(status);
    1f38:	4605      	mov	r5, r0
        digitalWrite(LED,LOW);
    1f3a:	200d      	movs	r0, #13
    1f3c:	f00c f8e4 	bl	e108 <digitalWrite>
      }
    }

    return status;
}
    1f40:	4628      	mov	r0, r5
    1f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    { pullData((uint32_t*)tempBuffer0);
    1f44:	481c      	ldr	r0, [pc, #112]	; (1fb8 <saveData(short)+0xfc>)
    1f46:	f003 fafd 	bl	5544 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    1f4a:	4a16      	ldr	r2, [pc, #88]	; (1fa4 <saveData(short)+0xe8>)
    1f4c:	2300      	movs	r3, #0
    1f4e:	4916      	ldr	r1, [pc, #88]	; (1fa8 <saveData(short)+0xec>)
    1f50:	f852 0f04 	ldr.w	r0, [r2, #4]!
    1f54:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    1f58:	3301      	adds	r3, #1
    1f5a:	2b08      	cmp	r3, #8
    1f5c:	d1f8      	bne.n	1f50 <saveData(short)+0x94>
}
    1f5e:	4628      	mov	r0, r5
    1f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f62:	4e16      	ldr	r6, [pc, #88]	; (1fbc <saveData(short)+0x100>)
    1f64:	f506 47c0 	add.w	r7, r6, #24576	; 0x6000
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1f68:	f003 fab6 	bl	54d8 <queue_isBusy()>
    1f6c:	4604      	mov	r4, r0
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1f6e:	4630      	mov	r0, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1f70:	2c00      	cmp	r4, #0
    1f72:	d1f9      	bne.n	1f68 <saveData(short)+0xac>
        for(int ii=0; ii<NDBL; ii++)
    1f74:	f506 7600 	add.w	r6, r6, #512	; 0x200
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1f78:	f003 fae4 	bl	5544 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    1f7c:	42be      	cmp	r6, r7
    1f7e:	d1f3      	bne.n	1f68 <saveData(short)+0xac>
    1f80:	4b0f      	ldr	r3, [pc, #60]	; (1fc0 <saveData(short)+0x104>)
    1f82:	4909      	ldr	r1, [pc, #36]	; (1fa8 <saveData(short)+0xec>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1f84:	f853 2f04 	ldr.w	r2, [r3, #4]!
    1f88:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    1f8c:	3401      	adds	r4, #1
    1f8e:	2c08      	cmp	r4, #8
    1f90:	d1f8      	bne.n	1f84 <saveData(short)+0xc8>
    1f92:	e7c6      	b.n	1f22 <saveData(short)+0x66>
    1f94:	f7ff fa44 	bl	1420 <checkEndOfFile(short) [clone .part.0]>
    1f98:	4605      	mov	r5, r0
    1f9a:	e797      	b.n	1ecc <saveData(short)+0x10>
    1f9c:	2001604a 	.word	0x2001604a
    1fa0:	2001481c 	.word	0x2001481c
    1fa4:	2000e818 	.word	0x2000e818
    1fa8:	200157d8 	.word	0x200157d8
    1fac:	2000b60a 	.word	0x2000b60a
    1fb0:	20014818 	.word	0x20014818
    1fb4:	20015120 	.word	0x20015120
    1fb8:	2000e81c 	.word	0x2000e81c
    1fbc:	2000b60c 	.word	0x2000b60c
    1fc0:	2000b608 	.word	0x2000b608

00001fc4 <estAlarmTime(unsigned long)>:
      // input: actual time in s
      // output: next wakup time in s
      // wakeup is in absolute seconds
      // 
      // secs is actual time in s
      uint32_t dd = secs/(24*3600);       // full days so far
    1fc4:	4b45      	ldr	r3, [pc, #276]	; (20dc <estAlarmTime(unsigned long)+0x118>)
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day

      uint32_t d_x = (d_0+D_REF);
    1fc6:	4a46      	ldr	r2, [pc, #280]	; (20e0 <estAlarmTime(unsigned long)+0x11c>)
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    1fc8:	4946      	ldr	r1, [pc, #280]	; (20e4 <estAlarmTime(unsigned long)+0x120>)
      uint32_t d_x = (d_0+D_REF);
    1fca:	8812      	ldrh	r2, [r2, #0]
  {   // estimate the wakup-time in seconds 
    1fcc:	b470      	push	{r4, r5, r6}
      uint32_t dd = secs/(24*3600);       // full days so far
    1fce:	fba3 5300 	umull	r5, r3, r3, r0
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    1fd2:	4c45      	ldr	r4, [pc, #276]	; (20e8 <estAlarmTime(unsigned long)+0x124>)
      { // we are too early
        secs=(d_x)*(24*3600);
        return secs;
      }
      //
      if(d_rep> d_on)
    1fd4:	4d45      	ldr	r5, [pc, #276]	; (20ec <estAlarmTime(unsigned long)+0x128>)
      uint32_t dd = secs/(24*3600);       // full days so far
    1fd6:	0c1b      	lsrs	r3, r3, #16
      if(d_rep> d_on)
    1fd8:	4e45      	ldr	r6, [pc, #276]	; (20f0 <estAlarmTime(unsigned long)+0x12c>)
    1fda:	f8b5 c000 	ldrh.w	ip, [r5]
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    1fde:	fb04 0213 	mls	r2, r4, r3, r0
      if(d_rep> d_on)
    1fe2:	fa1f fc8c 	uxth.w	ip, ip
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    1fe6:	fba1 1202 	umull	r1, r2, r1, r2
      if(d_rep> d_on)
    1fea:	8831      	ldrh	r1, [r6, #0]
    1fec:	b289      	uxth	r1, r1
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    1fee:	0ad2      	lsrs	r2, r2, #11
      if(d_rep> d_on)
    1ff0:	458c      	cmp	ip, r1
    1ff2:	d909      	bls.n	2008 <estAlarmTime(unsigned long)+0x44>
      {  // check if day is good for acqisition
        if(dd % d_rep >=d_on)
    1ff4:	8829      	ldrh	r1, [r5, #0]
    1ff6:	8836      	ldrh	r6, [r6, #0]
    1ff8:	b289      	uxth	r1, r1
    1ffa:	b2b6      	uxth	r6, r6
    1ffc:	fbb3 fcf1 	udiv	ip, r3, r1
    2000:	fb01 311c 	mls	r1, r1, ip, r3
    2004:	42b1      	cmp	r1, r6
    2006:	d253      	bcs.n	20b0 <estAlarmTime(unsigned long)+0xec>
          secs = ((dd/d_rep)+1)*d_rep*(24*3600);  
          return secs;
        }
      }
      //
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)) )
    2008:	4c3a      	ldr	r4, [pc, #232]	; (20f4 <estAlarmTime(unsigned long)+0x130>)
    200a:	8821      	ldrh	r1, [r4, #0]
    200c:	b289      	uxth	r1, r1
    200e:	4291      	cmp	r1, r2
    2010:	d81c      	bhi.n	204c <estAlarmTime(unsigned long)+0x88>
    2012:	4939      	ldr	r1, [pc, #228]	; (20f8 <estAlarmTime(unsigned long)+0x134>)
    2014:	8809      	ldrh	r1, [r1, #0]
    2016:	b289      	uxth	r1, r1
    2018:	4291      	cmp	r1, r2
    201a:	d917      	bls.n	204c <estAlarmTime(unsigned long)+0x88>
      { // are we between recording periods during acquisition day
        if(t_rep>t_on)
    201c:	4e37      	ldr	r6, [pc, #220]	; (20fc <estAlarmTime(unsigned long)+0x138>)
    201e:	4938      	ldr	r1, [pc, #224]	; (2100 <estAlarmTime(unsigned long)+0x13c>)
    2020:	8835      	ldrh	r5, [r6, #0]
    2022:	8809      	ldrh	r1, [r1, #0]
    2024:	b2ad      	uxth	r5, r5
    2026:	b289      	uxth	r1, r1
    2028:	428d      	cmp	r5, r1
    202a:	d84d      	bhi.n	20c8 <estAlarmTime(unsigned long)+0x104>
          secs = ((secs/t_rep)+1)*t_rep;
          return secs;
        }
      }
      //
      if (hh<h_1)                // from mid-night to h_1 
    202c:	8821      	ldrh	r1, [r4, #0]
    202e:	b289      	uxth	r1, r1
    2030:	4291      	cmp	r1, r2
    2032:	d916      	bls.n	2062 <estAlarmTime(unsigned long)+0x9e>
      {
        secs = (dd*24+ h_1)*3600;     // next time is h1
    2034:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2038:	8820      	ldrh	r0, [r4, #0]
    203a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    203e:	00db      	lsls	r3, r3, #3
    2040:	fa13 f080 	uxtah	r0, r3, r0
    2044:	fb02 f000 	mul.w	r0, r2, r0
        secs = (dd*24+h_1)*3600;  // next time is next day at h_1
      }
      //
      // return start or actual time in seconds
      return secs;
  }
    2048:	bc70      	pop	{r4, r5, r6}
    204a:	4770      	bx	lr
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)) )
    204c:	492d      	ldr	r1, [pc, #180]	; (2104 <estAlarmTime(unsigned long)+0x140>)
    204e:	8809      	ldrh	r1, [r1, #0]
    2050:	b289      	uxth	r1, r1
    2052:	4291      	cmp	r1, r2
    2054:	d8ea      	bhi.n	202c <estAlarmTime(unsigned long)+0x68>
    2056:	492c      	ldr	r1, [pc, #176]	; (2108 <estAlarmTime(unsigned long)+0x144>)
    2058:	8809      	ldrh	r1, [r1, #0]
    205a:	b289      	uxth	r1, r1
    205c:	4291      	cmp	r1, r2
    205e:	d9e5      	bls.n	202c <estAlarmTime(unsigned long)+0x68>
    2060:	e7dc      	b.n	201c <estAlarmTime(unsigned long)+0x58>
      else if ((hh>=h_2) && (hh<h_3)) // between the two recording periods
    2062:	4925      	ldr	r1, [pc, #148]	; (20f8 <estAlarmTime(unsigned long)+0x134>)
    2064:	8809      	ldrh	r1, [r1, #0]
    2066:	b289      	uxth	r1, r1
    2068:	4291      	cmp	r1, r2
    206a:	d80f      	bhi.n	208c <estAlarmTime(unsigned long)+0xc8>
    206c:	4d25      	ldr	r5, [pc, #148]	; (2104 <estAlarmTime(unsigned long)+0x140>)
    206e:	8829      	ldrh	r1, [r5, #0]
    2070:	b289      	uxth	r1, r1
    2072:	4291      	cmp	r1, r2
    2074:	d90a      	bls.n	208c <estAlarmTime(unsigned long)+0xc8>
        secs = (dd*24+h_3)*3600;      // next time is h3
    2076:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    207a:	8828      	ldrh	r0, [r5, #0]
    207c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    2080:	00db      	lsls	r3, r3, #3
    2082:	fa13 f080 	uxtah	r0, r3, r0
    2086:	fb02 f000 	mul.w	r0, r2, r0
    208a:	e7dd      	b.n	2048 <estAlarmTime(unsigned long)+0x84>
      else if (hh>=h_4) // after the second recording period (goes into next day)
    208c:	491e      	ldr	r1, [pc, #120]	; (2108 <estAlarmTime(unsigned long)+0x144>)
    208e:	8809      	ldrh	r1, [r1, #0]
    2090:	b289      	uxth	r1, r1
    2092:	4291      	cmp	r1, r2
    2094:	d8d8      	bhi.n	2048 <estAlarmTime(unsigned long)+0x84>
        dd++;
    2096:	3301      	adds	r3, #1
        secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    2098:	8820      	ldrh	r0, [r4, #0]
    209a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    209e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    20a2:	00db      	lsls	r3, r3, #3
    20a4:	fa13 f080 	uxtah	r0, r3, r0
  }
    20a8:	bc70      	pop	{r4, r5, r6}
        secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    20aa:	fb02 f000 	mul.w	r0, r2, r0
  }
    20ae:	4770      	bx	lr
          secs = ((dd/d_rep)+1)*d_rep*(24*3600);  
    20b0:	882a      	ldrh	r2, [r5, #0]
    20b2:	8828      	ldrh	r0, [r5, #0]
    20b4:	b292      	uxth	r2, r2
    20b6:	b280      	uxth	r0, r0
    20b8:	fbb3 f3f2 	udiv	r3, r3, r2
    20bc:	fb03 0000 	mla	r0, r3, r0, r0
    20c0:	fb04 f000 	mul.w	r0, r4, r0
  }
    20c4:	bc70      	pop	{r4, r5, r6}
    20c6:	4770      	bx	lr
          secs = ((secs/t_rep)+1)*t_rep;
    20c8:	8833      	ldrh	r3, [r6, #0]
    20ca:	8832      	ldrh	r2, [r6, #0]
    20cc:	b29b      	uxth	r3, r3
    20ce:	b292      	uxth	r2, r2
    20d0:	fbb0 f3f3 	udiv	r3, r0, r3
  }
    20d4:	bc70      	pop	{r4, r5, r6}
          secs = ((secs/t_rep)+1)*t_rep;
    20d6:	fb03 2002 	mla	r0, r3, r2, r2
  }
    20da:	4770      	bx	lr
    20dc:	c22e4507 	.word	0xc22e4507
    20e0:	2001603e 	.word	0x2001603e
    20e4:	91a2b3c5 	.word	0x91a2b3c5
    20e8:	00015180 	.word	0x00015180
    20ec:	20016040 	.word	0x20016040
    20f0:	2000941a 	.word	0x2000941a
    20f4:	20016046 	.word	0x20016046
    20f8:	2000941c 	.word	0x2000941c
    20fc:	20016052 	.word	0x20016052
    2100:	20009424 	.word	0x20009424
    2104:	2000941e 	.word	0x2000941e
    2108:	20009420 	.word	0x20009420

0000210c <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    210c:	4808      	ldr	r0, [pc, #32]	; (2130 <_GLOBAL__sub_I_t_acq+0x24>)
    210e:	2300      	movs	r3, #0
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2110:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
FsFile file;
    2114:	4a07      	ldr	r2, [pc, #28]	; (2134 <_GLOBAL__sub_I_t_acq+0x28>)
  #else
    rc = sd->card()->writeBlocks(lba, buffer, bufsize/512);
  #endif

    return rc ? bufsize : -1;
  }
    2116:	b410      	push	{r4}
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2118:	4c07      	ldr	r4, [pc, #28]	; (2138 <_GLOBAL__sub_I_t_acq+0x2c>)
    211a:	7303      	strb	r3, [r0, #12]
    211c:	6004      	str	r4, [r0, #0]
    211e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2122:	e9c0 3101 	strd	r3, r1, [r0, #4]
  FsBaseFile() {}
    2126:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
FsFile file;
    212a:	4904      	ldr	r1, [pc, #16]	; (213c <_GLOBAL__sub_I_t_acq+0x30>)
    212c:	f00e b9fc 	b.w	10528 <__aeabi_atexit>
    2130:	20015760 	.word	0x20015760
    2134:	20008e48 	.word	0x20008e48
    2138:	20000c60 	.word	0x20000c60
    213c:	00001409 	.word	0x00001409

00002140 <powerDown()>:
    SNVS_LPCR |= (1 << 6); // turn off power
    2140:	4a03      	ldr	r2, [pc, #12]	; (2150 <powerDown()+0x10>)
    2142:	6b93      	ldr	r3, [r2, #56]	; 0x38
    2144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2148:	6393      	str	r3, [r2, #56]	; 0x38
    while (1) asm("wfi");      
    214a:	bf30      	wfi
    214c:	e7fd      	b.n	214a <powerDown()+0xa>
    214e:	bf00      	nop
    2150:	400d4000 	.word	0x400d4000

00002154 <hibernate_init()>:
  {
    2154:	b508      	push	{r3, lr}
    stopSystem();
    2156:	f7fe f875 	bl	244 <stopSystem()>
    snvs_tmp = SNVS_LPCR;
    215a:	4a0c      	ldr	r2, [pc, #48]	; (218c <hibernate_init()+0x38>)
    215c:	4b0c      	ldr	r3, [pc, #48]	; (2190 <hibernate_init()+0x3c>)
    215e:	6b91      	ldr	r1, [r2, #56]	; 0x38
    2160:	6019      	str	r1, [r3, #0]
    SNVS_LPSR |= 1;
    2162:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    2164:	f043 0301 	orr.w	r3, r3, #1
    2168:	64d3      	str	r3, [r2, #76]	; 0x4c
    asm volatile("DSB");
    216a:	f3bf 8f4f 	dsb	sy
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    216e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    2170:	f023 0302 	bic.w	r3, r3, #2
    2174:	6393      	str	r3, [r2, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2176:	6b93      	ldr	r3, [r2, #56]	; 0x38
    2178:	f013 0302 	ands.w	r3, r3, #2
    217c:	d1fb      	bne.n	2176 <hibernate_init()+0x22>
    while (SNVS_LPTAR != 0);
    217e:	4903      	ldr	r1, [pc, #12]	; (218c <hibernate_init()+0x38>)
    SNVS_LPTAR = 0;
    2180:	6593      	str	r3, [r2, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    2182:	6d8b      	ldr	r3, [r1, #88]	; 0x58
    2184:	2b00      	cmp	r3, #0
    2186:	d1fc      	bne.n	2182 <hibernate_init()+0x2e>
  }
    2188:	bd08      	pop	{r3, pc}
    218a:	bf00      	nop
    218c:	400d4000 	.word	0x400d4000
    2190:	20014f1c 	.word	0x20014f1c

00002194 <hibernate_now(unsigned long)>:
  {
    2194:	b508      	push	{r3, lr}
      __disable_irq();
    2196:	b672      	cpsid	i
      SNVS_LPTAR = secs;
    2198:	4a08      	ldr	r2, [pc, #32]	; (21bc <hibernate_now(unsigned long)+0x28>)
    219a:	6590      	str	r0, [r2, #88]	; 0x58
      while (SNVS_LPTAR != secs);
    219c:	6d93      	ldr	r3, [r2, #88]	; 0x58
    219e:	4283      	cmp	r3, r0
    21a0:	d1fc      	bne.n	219c <hibernate_now(unsigned long)+0x8>
      SNVS_LPCR = snvs_tmp | SNVS_LPCR_LPTA_EN_MASK; 
    21a2:	4b07      	ldr	r3, [pc, #28]	; (21c0 <hibernate_now(unsigned long)+0x2c>)
      while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    21a4:	4905      	ldr	r1, [pc, #20]	; (21bc <hibernate_now(unsigned long)+0x28>)
      SNVS_LPCR = snvs_tmp | SNVS_LPCR_LPTA_EN_MASK; 
    21a6:	681b      	ldr	r3, [r3, #0]
    21a8:	f043 0302 	orr.w	r3, r3, #2
    21ac:	6393      	str	r3, [r2, #56]	; 0x38
      while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    21ae:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    21b0:	079b      	lsls	r3, r3, #30
    21b2:	d5fc      	bpl.n	21ae <hibernate_now(unsigned long)+0x1a>
      __enable_irq();
    21b4:	b662      	cpsie	i
      powerDown(); 
    21b6:	f7ff ffc3 	bl	2140 <powerDown()>
    21ba:	bf00      	nop
    21bc:	400d4000 	.word	0x400d4000
    21c0:	20014f1c 	.word	0x20014f1c

000021c4 <TwoWire::read()>:
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    21c4:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    21c8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    21cc:	429a      	cmp	r2, r3
    21ce:	d905      	bls.n	21dc <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    21d0:	1c5a      	adds	r2, r3, #1
    21d2:	4403      	add	r3, r0
    21d4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    21d8:	7e98      	ldrb	r0, [r3, #26]
    21da:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    21dc:	f04f 30ff 	mov.w	r0, #4294967295
	}
    21e0:	4770      	bx	lr
    21e2:	bf00      	nop

000021e4 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    21e4:	b530      	push	{r4, r5, lr}
    21e6:	4605      	mov	r5, r0
    21e8:	b083      	sub	sp, #12
    21ea:	460c      	mov	r4, r1
    {   this->wire = wire;
        wire->begin();
    21ec:	4608      	mov	r0, r1
    {   this->wire = wire;
    21ee:	6029      	str	r1, [r5, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    21f0:	9201      	str	r2, [sp, #4]
        wire->begin();
    21f2:	f019 f8c1 	bl	1b378 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    21f6:	2064      	movs	r0, #100	; 0x64
    21f8:	f00b ff08 	bl	e00c <delay>
        wire->setClock(speed);
    21fc:	4620      	mov	r0, r4
    21fe:	9901      	ldr	r1, [sp, #4]
    2200:	f00b face 	bl	d7a0 <TwoWire::setClock(unsigned long)>
    }
    2204:	4628      	mov	r0, r5
    2206:	b003      	add	sp, #12
    2208:	bd30      	pop	{r4, r5, pc}
    220a:	bf00      	nop

0000220c <i2c_class::exist(unsigned char)>:
		transmitting = 1;
    220c:	2201      	movs	r2, #1
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    220e:	b508      	push	{r3, lr}
		txBuffer[0] = (address << 1);
    2210:	fa01 fc02 	lsl.w	ip, r1, r2
        wire->beginTransmission(addr);
    2214:	6803      	ldr	r3, [r0, #0]
		return endTransmission(1);
    2216:	4611      	mov	r1, r2
		txBuffer[0] = (address << 1);
    2218:	f883 c0a5 	strb.w	ip, [r3, #165]	; 0xa5
		transmitting = 1;
    221c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    2220:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
		return endTransmission(1);
    2224:	6800      	ldr	r0, [r0, #0]
    2226:	f00b f923 	bl	d470 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    222a:	fab0 f080 	clz	r0, r0
    222e:	0940      	lsrs	r0, r0, #5
    2230:	bd08      	pop	{r3, pc}
    2232:	bf00      	nop

00002234 <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    2234:	b570      	push	{r4, r5, r6, lr}
    2236:	460d      	mov	r5, r1
		transmitting = 1;
    2238:	2601      	movs	r6, #1
        unsigned int val;
        wire->beginTransmission(addr);
        wire->write(reg);
    223a:	4611      	mov	r1, r2
        wire->beginTransmission(addr);
    223c:	6802      	ldr	r2, [r0, #0]
		txBuffer[0] = (address << 1);
    223e:	006b      	lsls	r3, r5, #1
    { 
    2240:	4604      	mov	r4, r0
		transmitting = 1;
    2242:	f882 6130 	strb.w	r6, [r2, #304]	; 0x130
		txBuffer[0] = (address << 1);
    2246:	f882 30a5 	strb.w	r3, [r2, #165]	; 0xa5
		txBufferLength = 1;
    224a:	f882 612f 	strb.w	r6, [r2, #303]	; 0x12f
        wire->write(reg);
    224e:	6800      	ldr	r0, [r0, #0]
    2250:	6803      	ldr	r3, [r0, #0]
    2252:	681b      	ldr	r3, [r3, #0]
    2254:	4798      	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    2256:	2100      	movs	r1, #0
    2258:	6820      	ldr	r0, [r4, #0]
    225a:	f00b f909 	bl	d470 <TwoWire::endTransmission(unsigned char)>
    225e:	b108      	cbz	r0, 2264 <i2c_class::read(unsigned char, unsigned char)+0x30>
    2260:	2000      	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    2262:	bd70      	pop	{r4, r5, r6, pc}
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    2264:	4633      	mov	r3, r6
    2266:	4632      	mov	r2, r6
    2268:	4629      	mov	r1, r5
    226a:	6820      	ldr	r0, [r4, #0]
    226c:	f00b f980 	bl	d570 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    2270:	2800      	cmp	r0, #0
    2272:	d0f5      	beq.n	2260 <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    2274:	6820      	ldr	r0, [r4, #0]
    2276:	4a0b      	ldr	r2, [pc, #44]	; (22a4 <i2c_class::read(unsigned char, unsigned char)+0x70>)
    2278:	6803      	ldr	r3, [r0, #0]
    227a:	695b      	ldr	r3, [r3, #20]
    227c:	4293      	cmp	r3, r2
    227e:	d10b      	bne.n	2298 <i2c_class::read(unsigned char, unsigned char)+0x64>
		if (rxBufferIndex >= rxBufferLength) return -1;
    2280:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    2284:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    2288:	429a      	cmp	r2, r3
    228a:	d908      	bls.n	229e <i2c_class::read(unsigned char, unsigned char)+0x6a>
		return rxBuffer[rxBufferIndex++];
    228c:	1c5a      	adds	r2, r3, #1
    228e:	4403      	add	r3, r0
    2290:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    2294:	7e98      	ldrb	r0, [r3, #26]
    }
    2296:	bd70      	pop	{r4, r5, r6, pc}
        val = wire->read();
    2298:	4798      	blx	r3
        return val;
    229a:	b2c0      	uxtb	r0, r0
    }
    229c:	bd70      	pop	{r4, r5, r6, pc}
    229e:	20ff      	movs	r0, #255	; 0xff
    22a0:	bd70      	pop	{r4, r5, r6, pc}
    22a2:	bf00      	nop
    22a4:	000021c5 	.word	0x000021c5

000022a8 <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    22a8:	b570      	push	{r4, r5, r6, lr}
    22aa:	4604      	mov	r4, r0
		transmitting = 1;
    22ac:	2501      	movs	r5, #1
		txBuffer[0] = (address << 1);
    22ae:	0048      	lsls	r0, r1, #1
    22b0:	461e      	mov	r6, r3
        wire->beginTransmission(addr);
    22b2:	6823      	ldr	r3, [r4, #0]
        wire->write(reg);
    22b4:	4611      	mov	r1, r2
		transmitting = 1;
    22b6:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    22ba:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    22be:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
    22c2:	6820      	ldr	r0, [r4, #0]
    22c4:	6803      	ldr	r3, [r0, #0]
    22c6:	681b      	ldr	r3, [r3, #0]
    22c8:	4798      	blx	r3
        wire->write(val);
    22ca:	6820      	ldr	r0, [r4, #0]
    22cc:	4631      	mov	r1, r6
    22ce:	6803      	ldr	r3, [r0, #0]
    22d0:	681b      	ldr	r3, [r3, #0]
    22d2:	4798      	blx	r3
		return endTransmission(1);
    22d4:	4629      	mov	r1, r5
    22d6:	6820      	ldr	r0, [r4, #0]
    22d8:	f00b f8ca 	bl	d470 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    22dc:	fab0 f080 	clz	r0, r0
    22e0:	0940      	lsrs	r0, r0, #5
    22e2:	bd70      	pop	{r4, r5, r6, pc}

000022e4 <txEvent_event>:
    static uint32_t mtp_rxEventcount=0;

    uint32_t get_mtp_txEventcount() {return mtp_txEventcount; }
    uint32_t get_mtp_rxEventcount() {return mtp_rxEventcount; }
    
    static void txEvent_event(transfer_t *t) { mtp_txEventcount++;}
    22e4:	4a02      	ldr	r2, [pc, #8]	; (22f0 <txEvent_event+0xc>)
    22e6:	6813      	ldr	r3, [r2, #0]
    22e8:	3301      	adds	r3, #1
    22ea:	6013      	str	r3, [r2, #0]
    22ec:	4770      	bx	lr
    22ee:	bf00      	nop
    22f0:	20014820 	.word	0x20014820

000022f4 <rxEvent_event>:
    static void rxEvent_event(transfer_t *t) { mtp_rxEventcount++;}
    22f4:	4a02      	ldr	r2, [pc, #8]	; (2300 <rxEvent_event+0xc>)
    22f6:	6813      	ldr	r3, [r2, #0]
    22f8:	3301      	adds	r3, #1
    22fa:	6013      	str	r3, [r2, #0]
    22fc:	4770      	bx	lr
    22fe:	bf00      	nop
    2300:	2001481c 	.word	0x2001481c

00002304 <MTPD::write(char const*, int) [clone .part.0]>:
    void MTPD::write(const char *data, int len) 
    2304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2308:	4616      	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    230a:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
    void MTPD::write(const char *data, int len) 
    230e:	460d      	mov	r5, r1
        if(!write_length_) dst=tx_data_buffer;   
    2310:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    2314:	b91b      	cbnz	r3, 231e <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    2316:	4f19      	ldr	r7, [pc, #100]	; (237c <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    2318:	f100 0120 	add.w	r1, r0, #32
    231c:	6039      	str	r1, [r7, #0]
        write_length_ += len;
    231e:	4433      	add	r3, r6
        while(pos<len)
    2320:	2e00      	cmp	r6, #0
        write_length_ += len;
    2322:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
        while(pos<len)
    2326:	dd27      	ble.n	2378 <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    2328:	f500 7908 	add.w	r9, r0, #544	; 0x220
        int pos = 0; // into data
    232c:	2400      	movs	r4, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    232e:	f100 0820 	add.w	r8, r0, #32
    2332:	4f12      	ldr	r7, [pc, #72]	; (237c <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    2334:	e001      	b.n	233a <MTPD::write(char const*, int) [clone .part.0]+0x36>
        while(pos<len)
    2336:	42a6      	cmp	r6, r4
    2338:	dd1e      	ble.n	2378 <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    233a:	683b      	ldr	r3, [r7, #0]
          int to_copy = min(len - pos, avail);
    233c:	1b32      	subs	r2, r6, r4
          memcpy(dst,src,to_copy);
    233e:	4629      	mov	r1, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    2340:	eba9 0a03 	sub.w	sl, r9, r3
          memcpy(dst,src,to_copy);
    2344:	4618      	mov	r0, r3
    2346:	4592      	cmp	sl, r2
    2348:	bfa8      	it	ge
    234a:	4692      	movge	sl, r2
    234c:	4652      	mov	r2, sl
          pos += to_copy;
    234e:	4454      	add	r4, sl
          memcpy(dst,src,to_copy);
    2350:	f00c f960 	bl	e614 <memcpy>
    2354:	4603      	mov	r3, r0
          src += to_copy;
    2356:	4455      	add	r5, sl
          dst += to_copy;
    2358:	4453      	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    235a:	454b      	cmp	r3, r9
          dst += to_copy;
    235c:	603b      	str	r3, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    235e:	d1ea      	bne.n	2336 <MTPD::write(char const*, int) [clone .part.0]+0x32>

#elif defined(__IMXRT1062__)

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2360:	223c      	movs	r2, #60	; 0x3c
    2362:	f44f 7100 	mov.w	r1, #512	; 0x200
    2366:	4640      	mov	r0, r8
    2368:	f00d fb42 	bl	f9f0 <usb_mtp_send>
    236c:	2800      	cmp	r0, #0
    236e:	ddf7      	ble.n	2360 <MTPD::write(char const*, int) [clone .part.0]+0x5c>
        while(pos<len)
    2370:	42a6      	cmp	r6, r4
            dst=tx_data_buffer;
    2372:	f8c7 8000 	str.w	r8, [r7]
        while(pos<len)
    2376:	dce0      	bgt.n	233a <MTPD::write(char const*, int) [clone .part.0]+0x36>
    }
    2378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    237c:	200151fc 	.word	0x200151fc

00002380 <MTPD::writestring(char const*) [clone .part.0]>:
  void MTPD::writestring(const char* str) {
    2380:	b5f0      	push	{r4, r5, r6, r7, lr}
    2382:	4607      	mov	r7, r0
    2384:	b083      	sub	sp, #12
    { write8(strlen(str) + 1);
    2386:	4608      	mov	r0, r1
  void MTPD::writestring(const char* str) {
    2388:	460c      	mov	r4, r1
    { if (write_get_length_) 
    238a:	f507 5580 	add.w	r5, r7, #4096	; 0x1000
    { write8(strlen(str) + 1);
    238e:	f010 fdb7 	bl	12f00 <strlen>
    2392:	3001      	adds	r0, #1
    { if (write_get_length_) 
    2394:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
    2398:	f88d 0006 	strb.w	r0, [sp, #6]
    239c:	b396      	cbz	r6, 2404 <MTPD::writestring(char const*) [clone .part.0]+0x84>
        write_length_ += len;
    239e:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    23a2:	3301      	adds	r3, #1
    23a4:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
      while (*str) {  write16(*str);  ++str;  } write16(0);
    23a8:	7823      	ldrb	r3, [r4, #0]
    23aa:	b973      	cbnz	r3, 23ca <MTPD::writestring(char const*) [clone .part.0]+0x4a>
        write_length_ += len;
    23ac:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    23b0:	3302      	adds	r3, #2
    23b2:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
  }
    23b6:	b003      	add	sp, #12
    23b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        write_length_ += len;
    23ba:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    23be:	4413      	add	r3, r2
    23c0:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
      while (*str) {  write16(*str);  ++str;  } write16(0);
    23c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    23c8:	b17b      	cbz	r3, 23ea <MTPD::writestring(char const*) [clone .part.0]+0x6a>
        write_length_ += len;
    23ca:	2202      	movs	r2, #2
    23cc:	f10d 0106 	add.w	r1, sp, #6
    23d0:	4638      	mov	r0, r7
      while (*str) {  write16(*str);  ++str;  } write16(0);
    23d2:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    23d6:	2e00      	cmp	r6, #0
    23d8:	d1ef      	bne.n	23ba <MTPD::writestring(char const*) [clone .part.0]+0x3a>
    23da:	f7ff ff93 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    23de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    { if (write_get_length_) 
    23e2:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    23e6:	2b00      	cmp	r3, #0
    23e8:	d1ef      	bne.n	23ca <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    23ea:	2300      	movs	r3, #0
    23ec:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    23f0:	2e00      	cmp	r6, #0
    23f2:	d1db      	bne.n	23ac <MTPD::writestring(char const*) [clone .part.0]+0x2c>
    23f4:	2202      	movs	r2, #2
    23f6:	f10d 0106 	add.w	r1, sp, #6
    23fa:	4638      	mov	r0, r7
    23fc:	f7ff ff82 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
  }
    2400:	b003      	add	sp, #12
    2402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2404:	2201      	movs	r2, #1
    2406:	f10d 0106 	add.w	r1, sp, #6
    240a:	4638      	mov	r0, r7
    240c:	f7ff ff7a 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2410:	7823      	ldrb	r3, [r4, #0]
    { if (write_get_length_) 
    2412:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2416:	2b00      	cmp	r3, #0
    2418:	d1d7      	bne.n	23ca <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    241a:	e7e6      	b.n	23ea <MTPD::writestring(char const*) [clone .part.0]+0x6a>

0000241c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>:
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    241c:	b570      	push	{r4, r5, r6, lr}
    241e:	f24d 4302 	movw	r3, #54274	; 0xd402
    2422:	b082      	sub	sp, #8
    { if (write_get_length_) 
    2424:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    2428:	4605      	mov	r5, r0
    242a:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    242e:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2432:	b31b      	cbz	r3, 247c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x60>
        write_length_ += len;
    2434:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2438:	3302      	adds	r3, #2
    243a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    243e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2442:	3302      	adds	r3, #2
    2444:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2448:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    244c:	3301      	adds	r3, #1
    244e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    if (*str) 
    2452:	491e      	ldr	r1, [pc, #120]	; (24cc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    2454:	4628      	mov	r0, r5
    2456:	f7ff ff93 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    245a:	491c      	ldr	r1, [pc, #112]	; (24cc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    245c:	4628      	mov	r0, r5
    245e:	f7ff ff8f 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
        write8(0);       // no form
    2462:	2200      	movs	r2, #0
    { if (write_get_length_) 
    2464:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2468:	f88d 2006 	strb.w	r2, [sp, #6]
    246c:	b333      	cbz	r3, 24bc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xa0>
        write_length_ += len;
    246e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2472:	3301      	adds	r3, #1
    2474:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
  }
    2478:	b002      	add	sp, #8
    247a:	bd70      	pop	{r4, r5, r6, pc}
    247c:	2202      	movs	r2, #2
    247e:	f10d 0106 	add.w	r1, sp, #6
    2482:	f7ff ff3f 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2486:	f64f 73ff 	movw	r3, #65535	; 0xffff
    { if (write_get_length_) 
    248a:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
        write16(0xFFFF); // string type
    248e:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    2492:	2e00      	cmp	r6, #0
    2494:	d1d3      	bne.n	243e <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x22>
    2496:	2202      	movs	r2, #2
    2498:	f10d 0106 	add.w	r1, sp, #6
    249c:	4628      	mov	r0, r5
    249e:	f7ff ff31 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    24a2:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
        write8(0);       // read-only
    24a6:	f88d 6006 	strb.w	r6, [sp, #6]
    { if (write_get_length_) 
    24aa:	2b00      	cmp	r3, #0
    24ac:	d1cc      	bne.n	2448 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x2c>
    24ae:	2201      	movs	r2, #1
    24b0:	f10d 0106 	add.w	r1, sp, #6
    24b4:	4628      	mov	r0, r5
    24b6:	f7ff ff25 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    24ba:	e7ca      	b.n	2452 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x36>
    24bc:	2201      	movs	r2, #1
    24be:	f10d 0106 	add.w	r1, sp, #6
    24c2:	4628      	mov	r0, r5
    24c4:	f7ff ff1e 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
  }
    24c8:	b002      	add	sp, #8
    24ca:	bd70      	pop	{r4, r5, r6, pc}
    24cc:	20000b64 	.word	0x20000b64

000024d0 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    24d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char msoft[]="microsoft.com: 1.0;";
    24d4:	4dc5      	ldr	r5, [pc, #788]	; (27ec <MTPD::WriteDescriptor()+0x31c>)
  void MTPD::WriteDescriptor() {
    24d6:	b090      	sub	sp, #64	; 0x40
    24d8:	4607      	mov	r7, r0
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf1);
    24da:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 27f0 <MTPD::WriteDescriptor()+0x320>
    char msoft[]="microsoft.com: 1.0;";
    24de:	ac01      	add	r4, sp, #4
    24e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    24e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    24e4:	682b      	ldr	r3, [r5, #0]
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf1);
    24e6:	aa06      	add	r2, sp, #24
    24e8:	2102      	movs	r1, #2
    24ea:	2003      	movs	r0, #3
    char msoft[]="microsoft.com: 1.0;";
    24ec:	6023      	str	r3, [r4, #0]
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf1);
    24ee:	f00c f95f 	bl	e7b0 <dtostrf>
    strlcat(buf1, " / MTP " MTP_VERS, sizeof(buf1) );
    24f2:	2214      	movs	r2, #20
    24f4:	49bf      	ldr	r1, [pc, #764]	; (27f4 <MTPD::WriteDescriptor()+0x324>)
    24f6:	a806      	add	r0, sp, #24
    24f8:	f010 f96c 	bl	127d4 <strlcat>
    for (size_t i=0; i<10; i++) buf2[i] = usb_string_serial_number.wString[i];
    24fc:	4bbe      	ldr	r3, [pc, #760]	; (27f8 <MTPD::WriteDescriptor()+0x328>)
    24fe:	aa0b      	add	r2, sp, #44	; 0x2c
    2500:	f103 0014 	add.w	r0, r3, #20
    2504:	f833 1f02 	ldrh.w	r1, [r3, #2]!
    2508:	4298      	cmp	r0, r3
    250a:	f802 1b01 	strb.w	r1, [r2], #1
    250e:	d1f9      	bne.n	2504 <MTPD::WriteDescriptor()+0x34>
    { if (write_get_length_) 
    2510:	f507 5580 	add.w	r5, r7, #4096	; 0x1000
    2514:	2464      	movs	r4, #100	; 0x64
    2516:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    251a:	f8ad 4000 	strh.w	r4, [sp]
    251e:	2b00      	cmp	r3, #0
    2520:	f000 812f 	beq.w	2782 <MTPD::WriteDescriptor()+0x2b2>
        write_length_ += len;
    2524:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2528:	3302      	adds	r3, #2
    252a:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    252e:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2532:	3304      	adds	r3, #4
    2534:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2538:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    253c:	3302      	adds	r3, #2
    253e:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    if (*str) 
    2542:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2546:	2b00      	cmp	r3, #0
    2548:	f000 8105 	beq.w	2756 <MTPD::WriteDescriptor()+0x286>
    254c:	a901      	add	r1, sp, #4
    254e:	4638      	mov	r0, r7
    2550:	f7ff ff16 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    2554:	f895 2428 	ldrb.w	r2, [r5, #1064]	; 0x428
    write16(0);    // functional mode
    2558:	2300      	movs	r3, #0
    255a:	f8ad 3000 	strh.w	r3, [sp]
    { if (write_get_length_) 
    255e:	2a00      	cmp	r2, #0
    2560:	f040 8103 	bne.w	276a <MTPD::WriteDescriptor()+0x29a>
    2564:	2202      	movs	r2, #2
    2566:	4638      	mov	r0, r7
    2568:	4669      	mov	r1, sp
    256a:	f7ff fecb 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    256e:	2314      	movs	r3, #20
    2570:	9300      	str	r3, [sp, #0]
    2572:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2576:	2b00      	cmp	r3, #0
    2578:	f040 80fc 	bne.w	2774 <MTPD::WriteDescriptor()+0x2a4>
    257c:	4669      	mov	r1, sp
    257e:	2204      	movs	r2, #4
    2580:	4638      	mov	r0, r7
    2582:	f7ff febf 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2586:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    258a:	4c9c      	ldr	r4, [pc, #624]	; (27fc <MTPD::WriteDescriptor()+0x32c>)
    write32(supported_op_num);
    258c:	f241 0301 	movw	r3, #4097	; 0x1001
    2590:	f104 0826 	add.w	r8, r4, #38	; 0x26
    2594:	e008      	b.n	25a8 <MTPD::WriteDescriptor()+0xd8>
        write_length_ += len;
    2596:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    259a:	45a0      	cmp	r8, r4
        write_length_ += len;
    259c:	4413      	add	r3, r2
    259e:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    25a2:	d00e      	beq.n	25c2 <MTPD::WriteDescriptor()+0xf2>
    25a4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    25a8:	2202      	movs	r2, #2
    25aa:	4669      	mov	r1, sp
    25ac:	4638      	mov	r0, r7
    25ae:	f8ad 3000 	strh.w	r3, [sp]
    { if (write_get_length_) 
    25b2:	2e00      	cmp	r6, #0
    25b4:	d1ef      	bne.n	2596 <MTPD::WriteDescriptor()+0xc6>
    25b6:	f7ff fea5 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    25ba:	45a0      	cmp	r8, r4
    { if (write_get_length_) 
    25bc:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    25c0:	d1f0      	bne.n	25a4 <MTPD::WriteDescriptor()+0xd4>
    write32(supported_event_num);      
    25c2:	2204      	movs	r2, #4
    25c4:	9200      	str	r2, [sp, #0]
    { if (write_get_length_) 
    25c6:	2e00      	cmp	r6, #0
    25c8:	d060      	beq.n	268c <MTPD::WriteDescriptor()+0x1bc>
        write_length_ += len;
    25ca:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    25ce:	4413      	add	r3, r2
    25d0:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    25d4:	4c8a      	ldr	r4, [pc, #552]	; (2800 <MTPD::WriteDescriptor()+0x330>)
    write32(supported_event_num);      
    25d6:	f244 0304 	movw	r3, #16388	; 0x4004
    25da:	2202      	movs	r2, #2
    25dc:	4669      	mov	r1, sp
    25de:	f104 0806 	add.w	r8, r4, #6
    25e2:	4638      	mov	r0, r7
    25e4:	f8ad 3000 	strh.w	r3, [sp]
    { if (write_get_length_) 
    25e8:	b17e      	cbz	r6, 260a <MTPD::WriteDescriptor()+0x13a>
        write_length_ += len;
    25ea:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    25ee:	4544      	cmp	r4, r8
        write_length_ += len;
    25f0:	4413      	add	r3, r2
    25f2:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    25f6:	d00e      	beq.n	2616 <MTPD::WriteDescriptor()+0x146>
    25f8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    25fc:	2202      	movs	r2, #2
    25fe:	4669      	mov	r1, sp
    2600:	4638      	mov	r0, r7
    2602:	f8ad 3000 	strh.w	r3, [sp]
    { if (write_get_length_) 
    2606:	2e00      	cmp	r6, #0
    2608:	d1ef      	bne.n	25ea <MTPD::WriteDescriptor()+0x11a>
    260a:	f7ff fe7b 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    260e:	4544      	cmp	r4, r8
    { if (write_get_length_) 
    2610:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    2614:	d1f0      	bne.n	25f8 <MTPD::WriteDescriptor()+0x128>
    write32(1);       // Device properties (array of uint16)
    2616:	2301      	movs	r3, #1
    2618:	9300      	str	r3, [sp, #0]
    { if (write_get_length_) 
    261a:	2e00      	cmp	r6, #0
    261c:	d059      	beq.n	26d2 <MTPD::WriteDescriptor()+0x202>
        write_length_ += len;
    261e:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2622:	3304      	adds	r3, #4
    2624:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2628:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    262c:	3302      	adds	r3, #2
    262e:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2632:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2636:	3304      	adds	r3, #4
    2638:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    263c:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2640:	3304      	adds	r3, #4
    2642:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2646:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    264a:	3302      	adds	r3, #2
    264c:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2650:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2654:	3302      	adds	r3, #2
    2656:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    if (*str) 
    265a:	496a      	ldr	r1, [pc, #424]	; (2804 <MTPD::WriteDescriptor()+0x334>)
    265c:	4638      	mov	r0, r7
    265e:	f7ff fe8f 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    2662:	4969      	ldr	r1, [pc, #420]	; (2808 <MTPD::WriteDescriptor()+0x338>)
    2664:	4638      	mov	r0, r7
    2666:	f7ff fe8b 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    266a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    266e:	b31b      	cbz	r3, 26b8 <MTPD::WriteDescriptor()+0x1e8>
    2670:	a906      	add	r1, sp, #24
    2672:	4638      	mov	r0, r7
    2674:	f7ff fe84 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    2678:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    267c:	b16b      	cbz	r3, 269a <MTPD::WriteDescriptor()+0x1ca>
    267e:	a90b      	add	r1, sp, #44	; 0x2c
    2680:	4638      	mov	r0, r7
    2682:	f7ff fe7d 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
  }
    2686:	b010      	add	sp, #64	; 0x40
    2688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    268c:	4669      	mov	r1, sp
    268e:	4638      	mov	r0, r7
    2690:	f7ff fe38 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    2694:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
    2698:	e79c      	b.n	25d4 <MTPD::WriteDescriptor()+0x104>
    269a:	f895 2428 	ldrb.w	r2, [r5, #1064]	; 0x428
    269e:	f88d 3000 	strb.w	r3, [sp]
    26a2:	2a00      	cmp	r2, #0
    26a4:	f000 8099 	beq.w	27da <MTPD::WriteDescriptor()+0x30a>
        write_length_ += len;
    26a8:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    26ac:	3301      	adds	r3, #1
    26ae:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
  }
    26b2:	b010      	add	sp, #64	; 0x40
    26b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    { if (write_get_length_) 
    26b8:	f895 2428 	ldrb.w	r2, [r5, #1064]	; 0x428
    26bc:	f88d 3000 	strb.w	r3, [sp]
    26c0:	2a00      	cmp	r2, #0
    26c2:	f000 8084 	beq.w	27ce <MTPD::WriteDescriptor()+0x2fe>
        write_length_ += len;
    26c6:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    26ca:	3301      	adds	r3, #1
    26cc:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    26d0:	e7d2      	b.n	2678 <MTPD::WriteDescriptor()+0x1a8>
    26d2:	2204      	movs	r2, #4
    26d4:	4638      	mov	r0, r7
    26d6:	4669      	mov	r1, sp
    26d8:	f7ff fe14 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    26dc:	f24d 4302 	movw	r3, #54274	; 0xd402
    26e0:	f8ad 3000 	strh.w	r3, [sp]
    { if (write_get_length_) 
    26e4:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    26e8:	2b00      	cmp	r3, #0
    26ea:	d19d      	bne.n	2628 <MTPD::WriteDescriptor()+0x158>
    26ec:	2202      	movs	r2, #2
    26ee:	4669      	mov	r1, sp
    26f0:	4638      	mov	r0, r7
    26f2:	f7ff fe07 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    26f6:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    26fa:	9600      	str	r6, [sp, #0]
    26fc:	2b00      	cmp	r3, #0
    26fe:	d198      	bne.n	2632 <MTPD::WriteDescriptor()+0x162>
    2700:	2204      	movs	r2, #4
    2702:	4669      	mov	r1, sp
    2704:	4638      	mov	r0, r7
    2706:	2402      	movs	r4, #2
    2708:	f7ff fdfc 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    270c:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2710:	9400      	str	r4, [sp, #0]
    2712:	2b00      	cmp	r3, #0
    2714:	d192      	bne.n	263c <MTPD::WriteDescriptor()+0x16c>
    2716:	2204      	movs	r2, #4
    2718:	4669      	mov	r1, sp
    271a:	4638      	mov	r0, r7
    271c:	f7ff fdf2 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2720:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    2724:	f8ad 3000 	strh.w	r3, [sp]
    2728:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    272c:	2b00      	cmp	r3, #0
    272e:	d18a      	bne.n	2646 <MTPD::WriteDescriptor()+0x176>
    2730:	4622      	mov	r2, r4
    2732:	4669      	mov	r1, sp
    2734:	4638      	mov	r0, r7
    2736:	f7ff fde5 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    273a:	f243 0301 	movw	r3, #12289	; 0x3001
    273e:	f8ad 3000 	strh.w	r3, [sp]
    2742:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2746:	2b00      	cmp	r3, #0
    2748:	d182      	bne.n	2650 <MTPD::WriteDescriptor()+0x180>
    274a:	4622      	mov	r2, r4
    274c:	4669      	mov	r1, sp
    274e:	4638      	mov	r0, r7
    2750:	f7ff fdd8 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2754:	e781      	b.n	265a <MTPD::WriteDescriptor()+0x18a>
    { write8(0);
    2756:	f88d 3000 	strb.w	r3, [sp]
    { if (write_get_length_) 
    275a:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    275e:	b373      	cbz	r3, 27be <MTPD::WriteDescriptor()+0x2ee>
        write_length_ += len;
    2760:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2764:	3301      	adds	r3, #1
    2766:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    276a:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    276e:	3302      	adds	r3, #2
    2770:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2774:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2778:	2601      	movs	r6, #1
    277a:	3304      	adds	r3, #4
    277c:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2780:	e703      	b.n	258a <MTPD::WriteDescriptor()+0xba>
    2782:	2202      	movs	r2, #2
    2784:	4638      	mov	r0, r7
    2786:	4669      	mov	r1, sp
    2788:	f7ff fdbc 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    278c:	2306      	movs	r3, #6
    278e:	9300      	str	r3, [sp, #0]
    { if (write_get_length_) 
    2790:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2794:	2b00      	cmp	r3, #0
    2796:	f47f aeca 	bne.w	252e <MTPD::WriteDescriptor()+0x5e>
    279a:	2204      	movs	r2, #4
    279c:	4669      	mov	r1, sp
    279e:	4638      	mov	r0, r7
    27a0:	f7ff fdb0 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    27a4:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    27a8:	f8ad 4000 	strh.w	r4, [sp]
    27ac:	2b00      	cmp	r3, #0
    27ae:	f47f aec3 	bne.w	2538 <MTPD::WriteDescriptor()+0x68>
    27b2:	4669      	mov	r1, sp
    27b4:	2202      	movs	r2, #2
    27b6:	4638      	mov	r0, r7
    27b8:	f7ff fda4 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    27bc:	e6c1      	b.n	2542 <MTPD::WriteDescriptor()+0x72>
    27be:	2201      	movs	r2, #1
    27c0:	4669      	mov	r1, sp
    27c2:	4638      	mov	r0, r7
    27c4:	f7ff fd9e 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    27c8:	f895 2428 	ldrb.w	r2, [r5, #1064]	; 0x428
    27cc:	e6c4      	b.n	2558 <MTPD::WriteDescriptor()+0x88>
    27ce:	2201      	movs	r2, #1
    27d0:	4669      	mov	r1, sp
    27d2:	4638      	mov	r0, r7
    27d4:	f7ff fd96 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    27d8:	e74e      	b.n	2678 <MTPD::WriteDescriptor()+0x1a8>
    27da:	2201      	movs	r2, #1
    27dc:	4669      	mov	r1, sp
    27de:	4638      	mov	r0, r7
    27e0:	f7ff fd90 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
  }
    27e4:	b010      	add	sp, #64	; 0x40
    27e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    27ea:	bf00      	nop
    27ec:	20000b50 	.word	0x20000b50
    27f0:	3fcccccd 	.word	0x3fcccccd
    27f4:	20000b3c 	.word	0x20000b3c
    27f8:	20009400 	.word	0x20009400
    27fc:	2000097c 	.word	0x2000097c
    2800:	200009a4 	.word	0x200009a4
    2804:	20000b48 	.word	0x20000b48
    2808:	20000b64 	.word	0x20000b64

0000280c <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    280c:	b5f0      	push	{r4, r5, r6, r7, lr}
      uint32_t sd_getFSCount(void) {return fsCount;}
    280e:	6803      	ldr	r3, [r0, #0]
    { if (write_get_length_) 
    2810:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
  void MTPD::WriteStorageIDs() {
    2814:	b083      	sub	sp, #12
    2816:	4606      	mov	r6, r0
    2818:	681f      	ldr	r7, [r3, #0]
    { if (write_get_length_) 
    281a:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    281e:	9701      	str	r7, [sp, #4]
    2820:	b1f3      	cbz	r3, 2860 <MTPD::WriteStorageIDs()+0x54>
        write_length_ += len;
    2822:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2826:	3304      	adds	r3, #4
    2828:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    282c:	b1b7      	cbz	r7, 285c <MTPD::WriteStorageIDs()+0x50>
    282e:	2400      	movs	r4, #0
    2830:	e006      	b.n	2840 <MTPD::WriteStorageIDs()+0x34>
        write_length_ += len;
    2832:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    2836:	42bc      	cmp	r4, r7
        write_length_ += len;
    2838:	4413      	add	r3, r2
    283a:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    283e:	d00d      	beq.n	285c <MTPD::WriteStorageIDs()+0x50>
    2840:	3401      	adds	r4, #1
    2842:	2204      	movs	r2, #4
    { if (write_get_length_) 
    2844:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2848:	4630      	mov	r0, r6
    284a:	eb0d 0102 	add.w	r1, sp, r2
    284e:	9401      	str	r4, [sp, #4]
    2850:	2b00      	cmp	r3, #0
    2852:	d1ee      	bne.n	2832 <MTPD::WriteStorageIDs()+0x26>
    2854:	f7ff fd56 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    2858:	42bc      	cmp	r4, r7
    285a:	d1f1      	bne.n	2840 <MTPD::WriteStorageIDs()+0x34>
  }
    285c:	b003      	add	sp, #12
    285e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2860:	2204      	movs	r2, #4
    2862:	eb0d 0102 	add.w	r1, sp, r2
    2866:	f7ff fd4d 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    286a:	e7df      	b.n	282c <MTPD::WriteStorageIDs()+0x20>

0000286c <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    286c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t store = Storage2Store(storage);
    2870:	1e4e      	subs	r6, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    2872:	4605      	mov	r5, r0
    2874:	b085      	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2876:	6800      	ldr	r0, [r0, #0]
    2878:	4631      	mov	r1, r6
    { if (write_get_length_) 
    287a:	f505 5480 	add.w	r4, r5, #4096	; 0x1000
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    287e:	f003 f863 	bl	5948 <MTPStorage_SD::readonly(unsigned long)>
    2882:	2800      	cmp	r0, #0
    { if (write_get_length_) 
    2884:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2888:	bf14      	ite	ne
    288a:	2201      	movne	r2, #1
    288c:	2204      	moveq	r2, #4
    288e:	f8ad 2008 	strh.w	r2, [sp, #8]
    { if (write_get_length_) 
    2892:	2b00      	cmp	r3, #0
    2894:	d074      	beq.n	2980 <MTPD::GetStorageInfo(unsigned long)+0x114>
        write_length_ += len;
    2896:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    289a:	3302      	adds	r3, #2
    289c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    28a0:	4631      	mov	r1, r6
    28a2:	6828      	ldr	r0, [r5, #0]
    28a4:	f003 f852 	bl	594c <MTPStorage_SD::has_directories(unsigned long)>
    { if (write_get_length_) 
    28a8:	f894 7428 	ldrb.w	r7, [r4, #1064]	; 0x428
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    28ac:	3001      	adds	r0, #1
    28ae:	f8ad 0008 	strh.w	r0, [sp, #8]
    { if (write_get_length_) 
    28b2:	2f00      	cmp	r7, #0
    28b4:	f000 80a0 	beq.w	29f8 <MTPD::GetStorageInfo(unsigned long)+0x18c>
        write_length_ += len;
    28b8:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    28bc:	3302      	adds	r3, #2
    28be:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    28c2:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    28c6:	3302      	adds	r3, #2
    28c8:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    uint64_t ntotal = storage_->totalSize(store) ; 
    28cc:	4631      	mov	r1, r6
    28ce:	6828      	ldr	r0, [r5, #0]
    28d0:	f003 f83e 	bl	5950 <MTPStorage_SD::totalSize(unsigned long)>
    28d4:	4607      	mov	r7, r0
    28d6:	4688      	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    28d8:	6828      	ldr	r0, [r5, #0]
    28da:	4631      	mov	r1, r6
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    28dc:	f04f 0b00 	mov.w	fp, #0
    28e0:	f003 f852 	bl	5988 <MTPStorage_SD::usedSize(unsigned long)>
    28e4:	4681      	mov	r9, r0
    28e6:	468a      	mov	sl, r1
    28e8:	4850      	ldr	r0, [pc, #320]	; (2a2c <MTPD::GetStorageInfo(unsigned long)+0x1c0>)
    28ea:	2105      	movs	r1, #5
    28ec:	f00d fc12 	bl	10114 <usb_serial_write>
    28f0:	230a      	movs	r3, #10
    28f2:	463a      	mov	r2, r7
    28f4:	484e      	ldr	r0, [pc, #312]	; (2a30 <MTPD::GetStorageInfo(unsigned long)+0x1c4>)
    28f6:	9300      	str	r3, [sp, #0]
    28f8:	4643      	mov	r3, r8
    28fa:	f8cd b004 	str.w	fp, [sp, #4]
    28fe:	f00b f8c1 	bl	da84 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    2902:	484b      	ldr	r0, [pc, #300]	; (2a30 <MTPD::GetStorageInfo(unsigned long)+0x1c4>)
    2904:	f00b f880 	bl	da08 <Print::println()>
    2908:	2105      	movs	r1, #5
    290a:	484a      	ldr	r0, [pc, #296]	; (2a34 <MTPD::GetStorageInfo(unsigned long)+0x1c8>)
    290c:	f00d fc02 	bl	10114 <usb_serial_write>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    2910:	230a      	movs	r3, #10
    2912:	464a      	mov	r2, r9
    2914:	4846      	ldr	r0, [pc, #280]	; (2a30 <MTPD::GetStorageInfo(unsigned long)+0x1c4>)
    2916:	9300      	str	r3, [sp, #0]
    2918:	4653      	mov	r3, sl
    291a:	f8cd b004 	str.w	fp, [sp, #4]
    291e:	f00b f8b1 	bl	da84 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    2922:	4843      	ldr	r0, [pc, #268]	; (2a30 <MTPD::GetStorageInfo(unsigned long)+0x1c4>)
    2924:	f00b f870 	bl	da08 <Print::println()>
    { if (write_get_length_) 
    2928:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    292c:	e9cd 7802 	strd	r7, r8, [sp, #8]
    2930:	2b00      	cmp	r3, #0
    2932:	d03e      	beq.n	29b2 <MTPD::GetStorageInfo(unsigned long)+0x146>
        write_length_ += len;
    2934:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2938:	3308      	adds	r3, #8
    293a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    293e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2942:	3308      	adds	r3, #8
    2944:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2948:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    294c:	3304      	adds	r3, #4
    294e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    2952:	682b      	ldr	r3, [r5, #0]
    2954:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    2958:	6859      	ldr	r1, [r3, #4]
    if (*str) 
    295a:	780b      	ldrb	r3, [r1, #0]
    295c:	b1b3      	cbz	r3, 298c <MTPD::GetStorageInfo(unsigned long)+0x120>
    295e:	4628      	mov	r0, r5
    2960:	f7ff fd0e 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    2964:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    { write8(0);
    2968:	2200      	movs	r2, #0
    296a:	f88d 2008 	strb.w	r2, [sp, #8]
    { if (write_get_length_) 
    296e:	b9c3      	cbnz	r3, 29a2 <MTPD::GetStorageInfo(unsigned long)+0x136>
    2970:	2201      	movs	r2, #1
    2972:	a902      	add	r1, sp, #8
    2974:	4628      	mov	r0, r5
    2976:	f7ff fcc5 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
  }
    297a:	b005      	add	sp, #20
    297c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2980:	2202      	movs	r2, #2
    2982:	a902      	add	r1, sp, #8
    2984:	4628      	mov	r0, r5
    2986:	f7ff fcbd 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    298a:	e789      	b.n	28a0 <MTPD::GetStorageInfo(unsigned long)+0x34>
    { if (write_get_length_) 
    298c:	f894 2428 	ldrb.w	r2, [r4, #1064]	; 0x428
    2990:	f88d 3008 	strb.w	r3, [sp, #8]
    2994:	2a00      	cmp	r2, #0
    2996:	d041      	beq.n	2a1c <MTPD::GetStorageInfo(unsigned long)+0x1b0>
        write_length_ += len;
    2998:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    299c:	3301      	adds	r3, #1
    299e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    29a2:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    29a6:	3301      	adds	r3, #1
    29a8:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
  }
    29ac:	b005      	add	sp, #20
    29ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29b2:	2208      	movs	r2, #8
    29b4:	4628      	mov	r0, r5
    29b6:	eb0d 0102 	add.w	r1, sp, r2
    29ba:	f7ff fca3 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    write64((ntotal-nused));  // free space (100M)
    29be:	ebb7 0709 	subs.w	r7, r7, r9
    29c2:	eb68 030a 	sbc.w	r3, r8, sl
    29c6:	e9cd 7302 	strd	r7, r3, [sp, #8]
    { if (write_get_length_) 
    29ca:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    29ce:	2b00      	cmp	r3, #0
    29d0:	d1b5      	bne.n	293e <MTPD::GetStorageInfo(unsigned long)+0xd2>
    29d2:	2208      	movs	r2, #8
    29d4:	4628      	mov	r0, r5
    29d6:	eb0d 0102 	add.w	r1, sp, r2
    29da:	f7ff fc93 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    29de:	f04f 32ff 	mov.w	r2, #4294967295
    29e2:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    write32(0xFFFFFFFFUL);  // free space (objects)
    29e6:	9202      	str	r2, [sp, #8]
    { if (write_get_length_) 
    29e8:	2b00      	cmp	r3, #0
    29ea:	d1ad      	bne.n	2948 <MTPD::GetStorageInfo(unsigned long)+0xdc>
    29ec:	2204      	movs	r2, #4
    29ee:	a902      	add	r1, sp, #8
    29f0:	4628      	mov	r0, r5
    29f2:	f7ff fc87 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    29f6:	e7ac      	b.n	2952 <MTPD::GetStorageInfo(unsigned long)+0xe6>
    29f8:	2202      	movs	r2, #2
    29fa:	4628      	mov	r0, r5
    29fc:	a902      	add	r1, sp, #8
    29fe:	f7ff fc81 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2a02:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2a06:	f8ad 7008 	strh.w	r7, [sp, #8]
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	f47f af59 	bne.w	28c2 <MTPD::GetStorageInfo(unsigned long)+0x56>
    2a10:	2202      	movs	r2, #2
    2a12:	a902      	add	r1, sp, #8
    2a14:	4628      	mov	r0, r5
    2a16:	f7ff fc75 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2a1a:	e757      	b.n	28cc <MTPD::GetStorageInfo(unsigned long)+0x60>
    2a1c:	2201      	movs	r2, #1
    2a1e:	a902      	add	r1, sp, #8
    2a20:	4628      	mov	r0, r5
    2a22:	f7ff fc6f 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2a26:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2a2a:	e79d      	b.n	2968 <MTPD::GetStorageInfo(unsigned long)+0xfc>
    2a2c:	20000b2c 	.word	0x20000b2c
    2a30:	20008a6c 	.word	0x20008a6c
    2a34:	20000b34 	.word	0x20000b34

00002a38 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    2a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (write_get_length_) {
    2a3c:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
  { uint32_t store = Storage2Store(storage);
    2a40:	b082      	sub	sp, #8
    2a42:	4604      	mov	r4, r0
    2a44:	1e4d      	subs	r5, r1, #1
    if (write_get_length_) {
    2a46:	f896 7428 	ldrb.w	r7, [r6, #1064]	; 0x428
    2a4a:	b18f      	cbz	r7, 2a70 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
    int num = 0;
    2a4c:	2700      	movs	r7, #0
    storage_->StartGetObjectHandles(store, parent);
    2a4e:	4629      	mov	r1, r5
    2a50:	6800      	ldr	r0, [r0, #0]
    2a52:	f003 fadf 	bl	6014 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
    while (storage_->GetNextObjectHandle(store)) num++;
    2a56:	4629      	mov	r1, r5
    2a58:	6820      	ldr	r0, [r4, #0]
    2a5a:	3701      	adds	r7, #1
    2a5c:	f003 fb1e 	bl	609c <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    2a60:	2800      	cmp	r0, #0
    2a62:	d1f8      	bne.n	2a56 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ *= 4;
    2a64:	00bf      	lsls	r7, r7, #2
    2a66:	f8c6 742c 	str.w	r7, [r6, #1068]	; 0x42c
  }
    2a6a:	b002      	add	sp, #8
    2a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    storage_->StartGetObjectHandles(store, parent);
    2a70:	4629      	mov	r1, r5
    2a72:	6800      	ldr	r0, [r0, #0]
    2a74:	4690      	mov	r8, r2
    2a76:	f003 facd 	bl	6014 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
    while (storage_->GetNextObjectHandle(store)) num++;
    2a7a:	e000      	b.n	2a7e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x46>
    2a7c:	3701      	adds	r7, #1
    2a7e:	4629      	mov	r1, r5
    2a80:	6820      	ldr	r0, [r4, #0]
    2a82:	f003 fb0b 	bl	609c <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    2a86:	2800      	cmp	r0, #0
    2a88:	d1f8      	bne.n	2a7c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x44>
    { if (write_get_length_) 
    2a8a:	f896 3428 	ldrb.w	r3, [r6, #1064]	; 0x428
    2a8e:	9701      	str	r7, [sp, #4]
    2a90:	b9fb      	cbnz	r3, 2ad2 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x9a>
    2a92:	2204      	movs	r2, #4
    2a94:	4620      	mov	r0, r4
    2a96:	eb0d 0102 	add.w	r1, sp, r2
    2a9a:	f7ff fc33 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
      storage_->StartGetObjectHandles(store, parent);
    2a9e:	4642      	mov	r2, r8
    2aa0:	4629      	mov	r1, r5
    2aa2:	6820      	ldr	r0, [r4, #0]
    2aa4:	f003 fab6 	bl	6014 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    2aa8:	4629      	mov	r1, r5
    2aaa:	6820      	ldr	r0, [r4, #0]
    2aac:	f003 faf6 	bl	609c <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
        write_length_ += len;
    2ab0:	2204      	movs	r2, #4
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    2ab2:	4603      	mov	r3, r0
    2ab4:	4620      	mov	r0, r4
    2ab6:	eb0d 0102 	add.w	r1, sp, r2
    2aba:	2b00      	cmp	r3, #0
    2abc:	d0d5      	beq.n	2a6a <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x32>
    { if (write_get_length_) 
    2abe:	f896 7428 	ldrb.w	r7, [r6, #1064]	; 0x428
    2ac2:	9301      	str	r3, [sp, #4]
    2ac4:	b15f      	cbz	r7, 2ade <MTPD::GetObjectHandles(unsigned long, unsigned long)+0xa6>
        write_length_ += len;
    2ac6:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    2aca:	3304      	adds	r3, #4
    2acc:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    2ad0:	e7ea      	b.n	2aa8 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x70>
    2ad2:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    2ad6:	3304      	adds	r3, #4
    2ad8:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    2adc:	e7df      	b.n	2a9e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x66>
    2ade:	f7ff fc11 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2ae2:	e7e1      	b.n	2aa8 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x70>

00002ae4 <MTPD::GetObjectInfo(unsigned long)>:
  {
    2ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ae8:	b0ea      	sub	sp, #424	; 0x1a8
    2aea:	4605      	mov	r5, r0
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    2aec:	f10d 0416 	add.w	r4, sp, #22
    2af0:	af1a      	add	r7, sp, #104	; 0x68
    2af2:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    2af6:	f10d 0918 	add.w	r9, sp, #24
    2afa:	9401      	str	r4, [sp, #4]
    2afc:	ab08      	add	r3, sp, #32
    2afe:	9703      	str	r7, [sp, #12]
    2b00:	aa2a      	add	r2, sp, #168	; 0xa8
    2b02:	f8cd 8008 	str.w	r8, [sp, #8]
    { if (write_get_length_) 
    2b06:	f505 5480 	add.w	r4, r5, #4096	; 0x1000
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    2b0a:	f8cd 9000 	str.w	r9, [sp]
    2b0e:	6800      	ldr	r0, [r0, #0]
    2b10:	f003 faf2 	bl	60f8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>
    uint32_t storage = Store2Storage(store);
    2b14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    { if (write_get_length_) 
    2b18:	f894 a428 	ldrb.w	sl, [r4, #1064]	; 0x428
    uint32_t storage = Store2Storage(store);
    2b1c:	3301      	adds	r3, #1
    2b1e:	9307      	str	r3, [sp, #28]
    { if (write_get_length_) 
    2b20:	f1ba 0f00 	cmp.w	sl, #0
    2b24:	d074      	beq.n	2c10 <MTPD::GetObjectInfo(unsigned long)+0x12c>
        write_length_ += len;
    2b26:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b2a:	3304      	adds	r3, #4
    2b2c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b30:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b34:	3302      	adds	r3, #2
    2b36:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b3a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b3e:	3302      	adds	r3, #2
    2b40:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b44:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b48:	3304      	adds	r3, #4
    2b4a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b4e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b52:	3302      	adds	r3, #2
    2b54:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b58:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b5c:	3304      	adds	r3, #4
    2b5e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b62:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b66:	3304      	adds	r3, #4
    2b68:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b6c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b70:	3304      	adds	r3, #4
    2b72:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b76:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b7a:	3304      	adds	r3, #4
    2b7c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b80:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b84:	3304      	adds	r3, #4
    2b86:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b8a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b8e:	3304      	adds	r3, #4
    2b90:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b94:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2b98:	3304      	adds	r3, #4
    2b9a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2b9e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2ba2:	3302      	adds	r3, #2
    2ba4:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2ba8:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2bac:	3304      	adds	r3, #4
    2bae:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2bb2:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2bb6:	3304      	adds	r3, #4
    2bb8:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    if (*str) 
    2bbc:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
    2bc0:	2b00      	cmp	r3, #0
    2bc2:	f000 80e0 	beq.w	2d86 <MTPD::GetObjectInfo(unsigned long)+0x2a2>
    2bc6:	a92a      	add	r1, sp, #168	; 0xa8
    2bc8:	4628      	mov	r0, r5
    2bca:	f7ff fbd9 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    2bce:	f898 3000 	ldrb.w	r3, [r8]
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	f000 80e6 	beq.w	2da4 <MTPD::GetObjectInfo(unsigned long)+0x2c0>
    2bd8:	4641      	mov	r1, r8
    2bda:	4628      	mov	r0, r5
    2bdc:	f7ff fbd0 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    2be0:	783b      	ldrb	r3, [r7, #0]
    2be2:	2b00      	cmp	r3, #0
    2be4:	f000 80ec 	beq.w	2dc0 <MTPD::GetObjectInfo(unsigned long)+0x2dc>
    2be8:	4639      	mov	r1, r7
    2bea:	4628      	mov	r0, r5
    2bec:	f7ff fbc8 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    2bf0:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    { write8(0);
    2bf4:	2200      	movs	r2, #0
    2bf6:	f88d 201c 	strb.w	r2, [sp, #28]
    { if (write_get_length_) 
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	f040 80ea 	bne.w	2dd4 <MTPD::GetObjectInfo(unsigned long)+0x2f0>
    2c00:	2201      	movs	r2, #1
    2c02:	a907      	add	r1, sp, #28
    2c04:	4628      	mov	r0, r5
    2c06:	f7ff fb7d 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
  }
    2c0a:	b06a      	add	sp, #424	; 0x1a8
    2c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c10:	2204      	movs	r2, #4
    2c12:	a907      	add	r1, sp, #28
    2c14:	4628      	mov	r0, r5
    2c16:	f7ff fb75 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    2c1a:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2c1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    2c22:	4553      	cmp	r3, sl
    2c24:	bf08      	it	eq
    2c26:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    2c2a:	bf08      	it	eq
    2c2c:	f243 0a01 	movweq	sl, #12289	; 0x3001
    2c30:	f8ad a01c 	strh.w	sl, [sp, #28]
    { if (write_get_length_) 
    2c34:	2e00      	cmp	r6, #0
    2c36:	f47f af7b 	bne.w	2b30 <MTPD::GetObjectInfo(unsigned long)+0x4c>
    2c3a:	2202      	movs	r2, #2
    2c3c:	a907      	add	r1, sp, #28
    2c3e:	4628      	mov	r0, r5
    2c40:	f7ff fb60 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2c44:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2c48:	f8ad 601c 	strh.w	r6, [sp, #28]
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	f47f af74 	bne.w	2b3a <MTPD::GetObjectInfo(unsigned long)+0x56>
    2c52:	2202      	movs	r2, #2
    2c54:	a907      	add	r1, sp, #28
    2c56:	4628      	mov	r0, r5
    2c58:	f7ff fb54 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    write32(size&0xffffffff); // size
    2c5c:	9b08      	ldr	r3, [sp, #32]
    2c5e:	9307      	str	r3, [sp, #28]
    { if (write_get_length_) 
    2c60:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2c64:	2b00      	cmp	r3, #0
    2c66:	f47f af6d 	bne.w	2b44 <MTPD::GetObjectInfo(unsigned long)+0x60>
    2c6a:	2204      	movs	r2, #4
    2c6c:	a907      	add	r1, sp, #28
    2c6e:	4628      	mov	r0, r5
    2c70:	f7ff fb48 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2c74:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2c78:	f8ad 601c 	strh.w	r6, [sp, #28]
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	f47f af66 	bne.w	2b4e <MTPD::GetObjectInfo(unsigned long)+0x6a>
    2c82:	2202      	movs	r2, #2
    2c84:	a907      	add	r1, sp, #28
    2c86:	4628      	mov	r0, r5
    2c88:	f7ff fb3c 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2c8c:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2c90:	9607      	str	r6, [sp, #28]
    2c92:	2b00      	cmp	r3, #0
    2c94:	f47f af60 	bne.w	2b58 <MTPD::GetObjectInfo(unsigned long)+0x74>
    2c98:	2204      	movs	r2, #4
    2c9a:	a907      	add	r1, sp, #28
    2c9c:	4628      	mov	r0, r5
    2c9e:	f7ff fb31 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2ca2:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2ca6:	9607      	str	r6, [sp, #28]
    2ca8:	2b00      	cmp	r3, #0
    2caa:	f47f af5a 	bne.w	2b62 <MTPD::GetObjectInfo(unsigned long)+0x7e>
    2cae:	2204      	movs	r2, #4
    2cb0:	a907      	add	r1, sp, #28
    2cb2:	4628      	mov	r0, r5
    2cb4:	f7ff fb26 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2cb8:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2cbc:	9607      	str	r6, [sp, #28]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	f47f af54 	bne.w	2b6c <MTPD::GetObjectInfo(unsigned long)+0x88>
    2cc4:	2204      	movs	r2, #4
    2cc6:	a907      	add	r1, sp, #28
    2cc8:	4628      	mov	r0, r5
    2cca:	f7ff fb1b 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2cce:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2cd2:	9607      	str	r6, [sp, #28]
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	f47f af4e 	bne.w	2b76 <MTPD::GetObjectInfo(unsigned long)+0x92>
    2cda:	2204      	movs	r2, #4
    2cdc:	a907      	add	r1, sp, #28
    2cde:	4628      	mov	r0, r5
    2ce0:	f7ff fb10 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2ce4:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2ce8:	9607      	str	r6, [sp, #28]
    2cea:	2b00      	cmp	r3, #0
    2cec:	f47f af48 	bne.w	2b80 <MTPD::GetObjectInfo(unsigned long)+0x9c>
    2cf0:	2204      	movs	r2, #4
    2cf2:	a907      	add	r1, sp, #28
    2cf4:	4628      	mov	r0, r5
    2cf6:	f7ff fb05 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2cfa:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2cfe:	9607      	str	r6, [sp, #28]
    2d00:	2b00      	cmp	r3, #0
    2d02:	f47f af42 	bne.w	2b8a <MTPD::GetObjectInfo(unsigned long)+0xa6>
    2d06:	2204      	movs	r2, #4
    2d08:	a907      	add	r1, sp, #28
    2d0a:	4628      	mov	r0, r5
    2d0c:	f7ff fafa 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2d10:	f8d9 3000 	ldr.w	r3, [r9]
    2d14:	9307      	str	r3, [sp, #28]
    2d16:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	f47f af3a 	bne.w	2b94 <MTPD::GetObjectInfo(unsigned long)+0xb0>
    2d20:	2204      	movs	r2, #4
    2d22:	a907      	add	r1, sp, #28
    2d24:	4628      	mov	r0, r5
    2d26:	f7ff faed 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2d2a:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    2d2e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    2d32:	3301      	adds	r3, #1
    2d34:	4313      	orrs	r3, r2
    2d36:	bf0c      	ite	eq
    2d38:	2301      	moveq	r3, #1
    2d3a:	2300      	movne	r3, #0
    2d3c:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    2d40:	2e00      	cmp	r6, #0
    2d42:	f47f af2c 	bne.w	2b9e <MTPD::GetObjectInfo(unsigned long)+0xba>
    2d46:	2202      	movs	r2, #2
    2d48:	a907      	add	r1, sp, #28
    2d4a:	4628      	mov	r0, r5
    2d4c:	f7ff fada 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2d50:	9607      	str	r6, [sp, #28]
    2d52:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2d56:	2e00      	cmp	r6, #0
    2d58:	f47f af26 	bne.w	2ba8 <MTPD::GetObjectInfo(unsigned long)+0xc4>
    2d5c:	2204      	movs	r2, #4
    2d5e:	a907      	add	r1, sp, #28
    2d60:	4628      	mov	r0, r5
    2d62:	f7ff facf 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2d66:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2d6a:	9607      	str	r6, [sp, #28]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	f47f af20 	bne.w	2bb2 <MTPD::GetObjectInfo(unsigned long)+0xce>
    2d72:	2204      	movs	r2, #4
    2d74:	a907      	add	r1, sp, #28
    2d76:	4628      	mov	r0, r5
    2d78:	f7ff fac4 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    if (*str) 
    2d7c:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
    2d80:	2b00      	cmp	r3, #0
    2d82:	f47f af20 	bne.w	2bc6 <MTPD::GetObjectInfo(unsigned long)+0xe2>
    { write8(0);
    2d86:	f88d 301c 	strb.w	r3, [sp, #28]
    { if (write_get_length_) 
    2d8a:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2d8e:	b34b      	cbz	r3, 2de4 <MTPD::GetObjectInfo(unsigned long)+0x300>
        write_length_ += len;
    2d90:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2d94:	3301      	adds	r3, #1
    2d96:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    if (*str) 
    2d9a:	f898 3000 	ldrb.w	r3, [r8]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	f47f af1a 	bne.w	2bd8 <MTPD::GetObjectInfo(unsigned long)+0xf4>
    { write8(0);
    2da4:	f88d 301c 	strb.w	r3, [sp, #28]
    { if (write_get_length_) 
    2da8:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2dac:	b303      	cbz	r3, 2df0 <MTPD::GetObjectInfo(unsigned long)+0x30c>
        write_length_ += len;
    2dae:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2db2:	3301      	adds	r3, #1
    2db4:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    if (*str) 
    2db8:	783b      	ldrb	r3, [r7, #0]
    2dba:	2b00      	cmp	r3, #0
    2dbc:	f47f af14 	bne.w	2be8 <MTPD::GetObjectInfo(unsigned long)+0x104>
    { if (write_get_length_) 
    2dc0:	f894 2428 	ldrb.w	r2, [r4, #1064]	; 0x428
    2dc4:	f88d 301c 	strb.w	r3, [sp, #28]
    2dc8:	b1c2      	cbz	r2, 2dfc <MTPD::GetObjectInfo(unsigned long)+0x318>
        write_length_ += len;
    2dca:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2dce:	3301      	adds	r3, #1
    2dd0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2dd4:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2dd8:	3301      	adds	r3, #1
    2dda:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
  }
    2dde:	b06a      	add	sp, #424	; 0x1a8
    2de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2de4:	2201      	movs	r2, #1
    2de6:	a907      	add	r1, sp, #28
    2de8:	4628      	mov	r0, r5
    2dea:	f7ff fa8b 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2dee:	e6ee      	b.n	2bce <MTPD::GetObjectInfo(unsigned long)+0xea>
    2df0:	2201      	movs	r2, #1
    2df2:	a907      	add	r1, sp, #28
    2df4:	4628      	mov	r0, r5
    2df6:	f7ff fa85 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2dfa:	e6f1      	b.n	2be0 <MTPD::GetObjectInfo(unsigned long)+0xfc>
    2dfc:	2201      	movs	r2, #1
    2dfe:	a907      	add	r1, sp, #28
    2e00:	4628      	mov	r0, r5
    2e02:	f7ff fa7f 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    2e06:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2e0a:	e6f3      	b.n	2bf4 <MTPD::GetObjectInfo(unsigned long)+0x110>

00002e0c <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    2e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      write32(propertyListNum);
    2e10:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2e90 <MTPD::getObjectPropsSupported(unsigned long)+0x84>
    { if (write_get_length_) 
    2e14:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
    {
    2e18:	b082      	sub	sp, #8
    2e1a:	4607      	mov	r7, r0
      write32(propertyListNum);
    2e1c:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    2e20:	f895 2428 	ldrb.w	r2, [r5, #1064]	; 0x428
    2e24:	9301      	str	r3, [sp, #4]
    2e26:	b34a      	cbz	r2, 2e7c <MTPD::getObjectPropsSupported(unsigned long)+0x70>
        write_length_ += len;
    2e28:	f8d5 242c 	ldr.w	r2, [r5, #1068]	; 0x42c
    2e2c:	3204      	adds	r2, #4
    2e2e:	f8c5 242c 	str.w	r2, [r5, #1068]	; 0x42c
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2e32:	b303      	cbz	r3, 2e76 <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    2e34:	4e15      	ldr	r6, [pc, #84]	; (2e8c <MTPD::getObjectPropsSupported(unsigned long)+0x80>)
    2e36:	f64d 4c01 	movw	ip, #56321	; 0xdc01
    2e3a:	2400      	movs	r4, #0
    2e3c:	e00b      	b.n	2e56 <MTPD::getObjectPropsSupported(unsigned long)+0x4a>
        write_length_ += len;
    2e3e:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2e42:	3401      	adds	r4, #1
        write_length_ += len;
    2e44:	4413      	add	r3, r2
    2e46:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2e4a:	f8d8 3000 	ldr.w	r3, [r8]
    2e4e:	42a3      	cmp	r3, r4
    2e50:	d911      	bls.n	2e76 <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    2e52:	f836 cf02 	ldrh.w	ip, [r6, #2]!
    { if (write_get_length_) 
    2e56:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2e5a:	2202      	movs	r2, #2
    2e5c:	a901      	add	r1, sp, #4
    2e5e:	4638      	mov	r0, r7
    2e60:	f8ad c004 	strh.w	ip, [sp, #4]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d1ea      	bne.n	2e3e <MTPD::getObjectPropsSupported(unsigned long)+0x32>
    2e68:	f7ff fa4c 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2e6c:	3401      	adds	r4, #1
    2e6e:	f8d8 3000 	ldr.w	r3, [r8]
    2e72:	42a3      	cmp	r3, r4
    2e74:	d8ed      	bhi.n	2e52 <MTPD::getObjectPropsSupported(unsigned long)+0x46>
    }
    2e76:	b002      	add	sp, #8
    2e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e7c:	2204      	movs	r2, #4
    2e7e:	eb0d 0102 	add.w	r1, sp, r2
    2e82:	f7ff fa3f 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2e86:	f8d8 3000 	ldr.w	r3, [r8]
    2e8a:	e7d2      	b.n	2e32 <MTPD::getObjectPropsSupported(unsigned long)+0x26>
    2e8c:	20000968 	.word	0x20000968
    2e90:	200093f0 	.word	0x200093f0

00002e94 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    2e94:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
    2e98:	440b      	add	r3, r1
    {
    2e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e9c:	b085      	sub	sp, #20
      switch(p1)
    2e9e:	2b43      	cmp	r3, #67	; 0x43
    2ea0:	f200 808e 	bhi.w	2fc0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>
    2ea4:	e8df f013 	tbh	[pc, r3, lsl #1]
    2ea8:	010700b9 	.word	0x010700b9
    2eac:	01610125 	.word	0x01610125
    2eb0:	008c008c 	.word	0x008c008c
    2eb4:	0196008e 	.word	0x0196008e
    2eb8:	008c01a2 	.word	0x008c01a2
    2ebc:	008c00d7 	.word	0x008c00d7
    2ec0:	008c008c 	.word	0x008c008c
    2ec4:	008c008c 	.word	0x008c008c
    2ec8:	008c008c 	.word	0x008c008c
    2ecc:	008c008c 	.word	0x008c008c
    2ed0:	008c008c 	.word	0x008c008c
    2ed4:	008c008c 	.word	0x008c008c
    2ed8:	008c008c 	.word	0x008c008c
    2edc:	008c008c 	.word	0x008c008c
    2ee0:	008c008c 	.word	0x008c008c
    2ee4:	008c008c 	.word	0x008c008c
    2ee8:	008c008c 	.word	0x008c008c
    2eec:	008c008c 	.word	0x008c008c
    2ef0:	008c008c 	.word	0x008c008c
    2ef4:	008c008c 	.word	0x008c008c
    2ef8:	008c008c 	.word	0x008c008c
    2efc:	008c008c 	.word	0x008c008c
    2f00:	008c008c 	.word	0x008c008c
    2f04:	008c008c 	.word	0x008c008c
    2f08:	008c008c 	.word	0x008c008c
    2f0c:	008c008c 	.word	0x008c008c
    2f10:	008c008c 	.word	0x008c008c
    2f14:	008c008c 	.word	0x008c008c
    2f18:	008c008c 	.word	0x008c008c
    2f1c:	008c008c 	.word	0x008c008c
    2f20:	008c008c 	.word	0x008c008c
    2f24:	008c008c 	.word	0x008c008c
    2f28:	008c01ae 	.word	0x008c01ae
    2f2c:	0044008c 	.word	0x0044008c
    { if (write_get_length_) 
    2f30:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2f34:	f64d 4244 	movw	r2, #56388	; 0xdc44
    2f38:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2f3c:	f8ad 2008 	strh.w	r2, [sp, #8]
    2f40:	2b00      	cmp	r3, #0
    2f42:	d14a      	bne.n	2fda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2f44:	2202      	movs	r2, #2
    2f46:	a902      	add	r1, sp, #8
    2f48:	9001      	str	r0, [sp, #4]
    2f4a:	f7ff f9db 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2f52:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2f56:	9801      	ldr	r0, [sp, #4]
    2f58:	f8ad 3008 	strh.w	r3, [sp, #8]
    2f5c:	2e00      	cmp	r6, #0
    2f5e:	d141      	bne.n	2fe4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    2f60:	2202      	movs	r2, #2
    2f62:	a902      	add	r1, sp, #8
    2f64:	9001      	str	r0, [sp, #4]
    2f66:	f7ff f9cd 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2f6a:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    2f6e:	9801      	ldr	r0, [sp, #4]
    2f70:	f88d 6008 	strb.w	r6, [sp, #8]
    2f74:	2d00      	cmp	r5, #0
    2f76:	d13a      	bne.n	2fee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    2f78:	2201      	movs	r2, #1
    2f7a:	a902      	add	r1, sp, #8
    2f7c:	9001      	str	r0, [sp, #4]
    2f7e:	f7ff f9c1 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2f82:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2f86:	9801      	ldr	r0, [sp, #4]
    2f88:	f88d 5008 	strb.w	r5, [sp, #8]
    2f8c:	bba6      	cbnz	r6, 2ff8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    2f8e:	2201      	movs	r2, #1
    2f90:	a902      	add	r1, sp, #8
    2f92:	9001      	str	r0, [sp, #4]
    2f94:	f7ff f9b6 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2f98:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    2f9c:	9801      	ldr	r0, [sp, #4]
    2f9e:	9602      	str	r6, [sp, #8]
    2fa0:	bb7d      	cbnz	r5, 3002 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2fa2:	2204      	movs	r2, #4
    2fa4:	a902      	add	r1, sp, #8
    2fa6:	9001      	str	r0, [sp, #4]
    2fa8:	f7ff f9ac 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    2fac:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2fb0:	9801      	ldr	r0, [sp, #4]
    2fb2:	f88d 5008 	strb.w	r5, [sp, #8]
    2fb6:	bb4b      	cbnz	r3, 300c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
    2fb8:	2201      	movs	r2, #1
    2fba:	a902      	add	r1, sp, #8
    2fbc:	f7ff f9a2 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    }
    2fc0:	b005      	add	sp, #20
    2fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    2fc4:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2fc8:	f64d 4207 	movw	r2, #56327	; 0xdc07
    2fcc:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2fd0:	f8ad 2008 	strh.w	r2, [sp, #8]
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	f000 8170 	beq.w	32ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x426>
        write_length_ += len;
    2fda:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2fde:	3302      	adds	r3, #2
    2fe0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2fe4:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2fe8:	3302      	adds	r3, #2
    2fea:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2fee:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2ff2:	3301      	adds	r3, #1
    2ff4:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2ff8:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2ffc:	3301      	adds	r3, #1
    2ffe:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    3002:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    3006:	3304      	adds	r3, #4
    3008:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    300c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    3010:	3301      	adds	r3, #1
    3012:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    }
    3016:	b005      	add	sp, #20
    3018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    301a:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    301e:	f64d 4201 	movw	r2, #56321	; 0xdc01
    3022:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    3026:	f8ad 2008 	strh.w	r2, [sp, #8]
    302a:	b1f3      	cbz	r3, 306a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d6>
        write_length_ += len;
    302c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    3030:	3302      	adds	r3, #2
    3032:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    3036:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    303a:	3302      	adds	r3, #2
    303c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    3040:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    3044:	3301      	adds	r3, #1
    3046:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    304a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    304e:	3304      	adds	r3, #4
    3050:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    { if (write_get_length_) 
    3054:	e7d5      	b.n	3002 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    3056:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    305a:	f64d 420b 	movw	r2, #56331	; 0xdc0b
    305e:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    3062:	f8ad 2008 	strh.w	r2, [sp, #8]
    3066:	2b00      	cmp	r3, #0
    3068:	d1e0      	bne.n	302c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x198>
    306a:	2202      	movs	r2, #2
    306c:	a902      	add	r1, sp, #8
    306e:	9001      	str	r0, [sp, #4]
    3070:	f7ff f948 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    3074:	2306      	movs	r3, #6
    3076:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    307a:	9801      	ldr	r0, [sp, #4]
    307c:	f8ad 3008 	strh.w	r3, [sp, #8]
    3080:	2e00      	cmp	r6, #0
    3082:	d1d8      	bne.n	3036 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a2>
    3084:	2202      	movs	r2, #2
    3086:	a902      	add	r1, sp, #8
    3088:	9001      	str	r0, [sp, #4]
    308a:	f7ff f93b 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    308e:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    3092:	9801      	ldr	r0, [sp, #4]
    3094:	f88d 6008 	strb.w	r6, [sp, #8]
    3098:	2d00      	cmp	r5, #0
    309a:	d1d1      	bne.n	3040 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ac>
    309c:	2201      	movs	r2, #1
    309e:	a902      	add	r1, sp, #8
    30a0:	9001      	str	r0, [sp, #4]
    30a2:	f7ff f92f 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    30a6:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    30aa:	9801      	ldr	r0, [sp, #4]
    30ac:	9502      	str	r5, [sp, #8]
    30ae:	2e00      	cmp	r6, #0
    30b0:	d1cb      	bne.n	304a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b6>
    30b2:	2204      	movs	r2, #4
    30b4:	e76c      	b.n	2f90 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    30b6:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    30ba:	f64d 4202 	movw	r2, #56322	; 0xdc02
    30be:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    30c2:	f8ad 2008 	strh.w	r2, [sp, #8]
    30c6:	b1f3      	cbz	r3, 3106 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x272>
        write_length_ += len;
    30c8:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    30cc:	3302      	adds	r3, #2
    30ce:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    30d2:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    30d6:	3302      	adds	r3, #2
    30d8:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    30dc:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    30e0:	3301      	adds	r3, #1
    30e2:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    30e6:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    30ea:	3302      	adds	r3, #2
    30ec:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    { if (write_get_length_) 
    30f0:	e787      	b.n	3002 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    30f2:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    30f6:	f64d 4203 	movw	r2, #56323	; 0xdc03
    30fa:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    30fe:	f8ad 2008 	strh.w	r2, [sp, #8]
    3102:	2b00      	cmp	r3, #0
    3104:	d1e0      	bne.n	30c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x234>
    3106:	2202      	movs	r2, #2
    3108:	a902      	add	r1, sp, #8
    310a:	9001      	str	r0, [sp, #4]
    310c:	2604      	movs	r6, #4
    310e:	f7ff f8f9 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    3112:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    3116:	9801      	ldr	r0, [sp, #4]
    3118:	f8ad 6008 	strh.w	r6, [sp, #8]
    311c:	2d00      	cmp	r5, #0
    311e:	d1d8      	bne.n	30d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x23e>
    3120:	2202      	movs	r2, #2
    3122:	a902      	add	r1, sp, #8
    3124:	9001      	str	r0, [sp, #4]
    3126:	f7ff f8ed 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    312a:	f88d 5008 	strb.w	r5, [sp, #8]
    312e:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    3132:	9801      	ldr	r0, [sp, #4]
    3134:	2d00      	cmp	r5, #0
    3136:	d1d1      	bne.n	30dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x248>
    3138:	2201      	movs	r2, #1
    313a:	a902      	add	r1, sp, #8
    313c:	9001      	str	r0, [sp, #4]
    313e:	f7ff f8e1 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    3142:	f8ad 5008 	strh.w	r5, [sp, #8]
    3146:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    314a:	9801      	ldr	r0, [sp, #4]
    314c:	2d00      	cmp	r5, #0
    314e:	d1ca      	bne.n	30e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x252>
    3150:	2202      	movs	r2, #2
    3152:	a902      	add	r1, sp, #8
    3154:	9001      	str	r0, [sp, #4]
    3156:	f7ff f8d5 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    315a:	9502      	str	r5, [sp, #8]
    315c:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    3160:	9801      	ldr	r0, [sp, #4]
    3162:	2d00      	cmp	r5, #0
    3164:	f43f af1d 	beq.w	2fa2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10e>
    3168:	e74b      	b.n	3002 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    316a:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    316e:	f64d 4204 	movw	r2, #56324	; 0xdc04
    3172:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    3176:	f8ad 2008 	strh.w	r2, [sp, #8]
    317a:	2b00      	cmp	r3, #0
    317c:	f040 80e1 	bne.w	3342 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4ae>
    3180:	2202      	movs	r2, #2
    3182:	a902      	add	r1, sp, #8
    3184:	9001      	str	r0, [sp, #4]
    3186:	2508      	movs	r5, #8
    3188:	f7ff f8bc 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    318c:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    3190:	9801      	ldr	r0, [sp, #4]
    3192:	f8ad 5008 	strh.w	r5, [sp, #8]
    3196:	2e00      	cmp	r6, #0
    3198:	f040 80d8 	bne.w	334c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4b8>
    319c:	2202      	movs	r2, #2
    319e:	a902      	add	r1, sp, #8
    31a0:	9001      	str	r0, [sp, #4]
    31a2:	f7ff f8af 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    31a6:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    31aa:	9801      	ldr	r0, [sp, #4]
    31ac:	f88d 6008 	strb.w	r6, [sp, #8]
    31b0:	2b00      	cmp	r3, #0
    31b2:	f040 80d0 	bne.w	3356 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4c2>
    31b6:	2201      	movs	r2, #1
    31b8:	a902      	add	r1, sp, #8
    31ba:	9001      	str	r0, [sp, #4]
    31bc:	f7ff f8a2 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    31c0:	2200      	movs	r2, #0
    31c2:	2300      	movs	r3, #0
    31c4:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    31c8:	9801      	ldr	r0, [sp, #4]
    31ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    31ce:	bbb6      	cbnz	r6, 323e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    31d0:	462a      	mov	r2, r5
    31d2:	e6dd      	b.n	2f90 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    31d4:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    31d8:	f64d 4208 	movw	r2, #56328	; 0xdc08
    31dc:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    31e0:	f8ad 2008 	strh.w	r2, [sp, #8]
    31e4:	2b00      	cmp	r3, #0
    31e6:	f43f aead 	beq.w	2f44 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    31ea:	e6f6      	b.n	2fda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    31ec:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    31f0:	f64d 4209 	movw	r2, #56329	; 0xdc09
    31f4:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    31f8:	f8ad 2008 	strh.w	r2, [sp, #8]
    31fc:	2b00      	cmp	r3, #0
    31fe:	f43f aea1 	beq.w	2f44 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    3202:	e6ea      	b.n	2fda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    3204:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    3208:	f64d 4241 	movw	r2, #56385	; 0xdc41
    320c:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    3210:	f8ad 2008 	strh.w	r2, [sp, #8]
    3214:	b1cb      	cbz	r3, 324a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3b6>
        write_length_ += len;
    3216:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    321a:	3302      	adds	r3, #2
    321c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    3220:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    3224:	3302      	adds	r3, #2
    3226:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    322a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    322e:	3301      	adds	r3, #1
    3230:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    3234:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    3238:	3308      	adds	r3, #8
    323a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    323e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    3242:	3308      	adds	r3, #8
    3244:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    { if (write_get_length_) 
    3248:	e6db      	b.n	3002 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    324a:	2202      	movs	r2, #2
    324c:	a902      	add	r1, sp, #8
    324e:	9001      	str	r0, [sp, #4]
    3250:	f7ff f858 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    3254:	230a      	movs	r3, #10
    3256:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    325a:	9801      	ldr	r0, [sp, #4]
    325c:	f8ad 3008 	strh.w	r3, [sp, #8]
    3260:	2d00      	cmp	r5, #0
    3262:	d1dd      	bne.n	3220 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x38c>
    3264:	2202      	movs	r2, #2
    3266:	a902      	add	r1, sp, #8
    3268:	9001      	str	r0, [sp, #4]
    326a:	f7ff f84b 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    326e:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    3272:	9801      	ldr	r0, [sp, #4]
    3274:	f88d 5008 	strb.w	r5, [sp, #8]
    3278:	2b00      	cmp	r3, #0
    327a:	d1d6      	bne.n	322a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x396>
    327c:	2201      	movs	r2, #1
    327e:	a902      	add	r1, sp, #8
    3280:	9001      	str	r0, [sp, #4]
    3282:	2600      	movs	r6, #0
    3284:	f7ff f83e 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    3288:	2700      	movs	r7, #0
    328a:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    328e:	9801      	ldr	r0, [sp, #4]
    3290:	e9cd 6702 	strd	r6, r7, [sp, #8]
    3294:	2b00      	cmp	r3, #0
    3296:	d1cd      	bne.n	3234 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>
    3298:	2208      	movs	r2, #8
    329a:	9001      	str	r0, [sp, #4]
    329c:	eb0d 0102 	add.w	r1, sp, r2
    32a0:	f7ff f830 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    32a4:	9801      	ldr	r0, [sp, #4]
    32a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
    32aa:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    32ae:	2e00      	cmp	r6, #0
    32b0:	d1c5      	bne.n	323e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    32b2:	2208      	movs	r2, #8
    32b4:	eb0d 0102 	add.w	r1, sp, r2
    32b8:	e66b      	b.n	2f92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfe>
    32ba:	2202      	movs	r2, #2
    32bc:	a902      	add	r1, sp, #8
    32be:	9001      	str	r0, [sp, #4]
    32c0:	f7ff f820 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    32c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    32c8:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    32cc:	9801      	ldr	r0, [sp, #4]
    32ce:	f8ad 2008 	strh.w	r2, [sp, #8]
    32d2:	2b00      	cmp	r3, #0
    32d4:	f47f ae86 	bne.w	2fe4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    32d8:	2202      	movs	r2, #2
    32da:	a902      	add	r1, sp, #8
    32dc:	9001      	str	r0, [sp, #4]
    32de:	2501      	movs	r5, #1
    32e0:	f7ff f810 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    32e4:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    32e8:	9801      	ldr	r0, [sp, #4]
    32ea:	f88d 5008 	strb.w	r5, [sp, #8]
    32ee:	2e00      	cmp	r6, #0
    32f0:	f47f ae7d 	bne.w	2fee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    32f4:	462a      	mov	r2, r5
    32f6:	a902      	add	r1, sp, #8
    32f8:	9001      	str	r0, [sp, #4]
    32fa:	f7ff f803 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    32fe:	f88d 6008 	strb.w	r6, [sp, #8]
    3302:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    3306:	9801      	ldr	r0, [sp, #4]
    3308:	2e00      	cmp	r6, #0
    330a:	f47f ae75 	bne.w	2ff8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    330e:	462a      	mov	r2, r5
    3310:	a902      	add	r1, sp, #8
    3312:	9001      	str	r0, [sp, #4]
    3314:	f7fe fff6 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    3318:	9602      	str	r6, [sp, #8]
    331a:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    331e:	9801      	ldr	r0, [sp, #4]
    3320:	2e00      	cmp	r6, #0
    3322:	f47f ae6e 	bne.w	3002 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    3326:	2204      	movs	r2, #4
    3328:	a902      	add	r1, sp, #8
    332a:	9001      	str	r0, [sp, #4]
    332c:	f7fe ffea 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    3330:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    3334:	9801      	ldr	r0, [sp, #4]
    3336:	f88d 6008 	strb.w	r6, [sp, #8]
    333a:	2b00      	cmp	r3, #0
    333c:	f43f ae3c 	beq.w	2fb8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x124>
    3340:	e664      	b.n	300c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
        write_length_ += len;
    3342:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    3346:	3302      	adds	r3, #2
    3348:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    334c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    3350:	3302      	adds	r3, #2
    3352:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    3356:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    335a:	3301      	adds	r3, #1
    335c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    { if (write_get_length_) 
    3360:	e76d      	b.n	323e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    3362:	bf00      	nop

00003364 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    3364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3368:	b0ea      	sub	sp, #424	; 0x1a8
    336a:	4615      	mov	r5, r2
    336c:	4604      	mov	r4, r0
    336e:	460e      	mov	r6, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    3370:	f10d 0716 	add.w	r7, sp, #22
    3374:	f10d 0968 	add.w	r9, sp, #104	; 0x68
    3378:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
    337c:	f10d 0818 	add.w	r8, sp, #24
    3380:	ab08      	add	r3, sp, #32
    3382:	aa2a      	add	r2, sp, #168	; 0xa8
    3384:	9701      	str	r7, [sp, #4]
    3386:	f8cd 900c 	str.w	r9, [sp, #12]
    338a:	f8cd a008 	str.w	sl, [sp, #8]
    338e:	f8cd 8000 	str.w	r8, [sp]
    3392:	6800      	ldr	r0, [r0, #0]
    3394:	f002 feb0 	bl	60f8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>
      switch(p2)
    3398:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
      uint32_t storage = Store2Storage(store);
    339c:	883a      	ldrh	r2, [r7, #0]
      switch(p2)
    339e:	442b      	add	r3, r5
      dir = size == 0xFFFFFFFFUL;
    33a0:	9908      	ldr	r1, [sp, #32]
    33a2:	9809      	ldr	r0, [sp, #36]	; 0x24
      uint32_t storage = Store2Storage(store);
    33a4:	1c55      	adds	r5, r2, #1
      switch(p2)
    33a6:	2b43      	cmp	r3, #67	; 0x43
    33a8:	d851      	bhi.n	344e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    33aa:	e8df f003 	tbb	[pc, r3]
    33ae:	a46e      	.short	0xa46e
    33b0:	5050bb96 	.word	0x5050bb96
    33b4:	508d5b53 	.word	0x508d5b53
    33b8:	5050507b 	.word	0x5050507b
    33bc:	50505050 	.word	0x50505050
    33c0:	50505050 	.word	0x50505050
    33c4:	50505050 	.word	0x50505050
    33c8:	50505050 	.word	0x50505050
    33cc:	50505050 	.word	0x50505050
    33d0:	50505050 	.word	0x50505050
    33d4:	50505050 	.word	0x50505050
    33d8:	50505050 	.word	0x50505050
    33dc:	50505050 	.word	0x50505050
    33e0:	50505050 	.word	0x50505050
    33e4:	50505050 	.word	0x50505050
    33e8:	50505050 	.word	0x50505050
    33ec:	50225050 	.word	0x50225050
    33f0:	5350      	.short	0x5350
          write32(p1);
    33f2:	9607      	str	r6, [sp, #28]
    { if (write_get_length_) 
    33f4:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    33f8:	f896 3428 	ldrb.w	r3, [r6, #1064]	; 0x428
    33fc:	2b00      	cmp	r3, #0
    33fe:	f040 80b4 	bne.w	356a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x206>
    3402:	2204      	movs	r2, #4
    3404:	a907      	add	r1, sp, #28
    3406:	4620      	mov	r0, r4
    3408:	f7fe ff7c 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    340c:	f8d8 3000 	ldr.w	r3, [r8]
    3410:	9307      	str	r3, [sp, #28]
    3412:	f896 3428 	ldrb.w	r3, [r6, #1064]	; 0x428
    3416:	2b00      	cmp	r3, #0
    3418:	f040 80ac 	bne.w	3574 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x210>
    341c:	2204      	movs	r2, #4
    341e:	a907      	add	r1, sp, #28
    3420:	4620      	mov	r0, r4
    3422:	f7fe ff6f 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    3426:	f896 7428 	ldrb.w	r7, [r6, #1064]	; 0x428
          write32(storage);
    342a:	9507      	str	r5, [sp, #28]
    { if (write_get_length_) 
    342c:	2f00      	cmp	r7, #0
    342e:	d17f      	bne.n	3530 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1cc>
    3430:	2204      	movs	r2, #4
    3432:	a907      	add	r1, sp, #28
    3434:	4620      	mov	r0, r4
    3436:	f7fe ff65 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    343a:	f896 3428 	ldrb.w	r3, [r6, #1064]	; 0x428
          write32(0);
    343e:	9707      	str	r7, [sp, #28]
    { if (write_get_length_) 
    3440:	2b00      	cmp	r3, #0
    3442:	d17a      	bne.n	353a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d6>
    3444:	2204      	movs	r2, #4
    3446:	a907      	add	r1, sp, #28
    3448:	4620      	mov	r0, r4
    344a:	f7fe ff5b 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    }
    344e:	b06a      	add	sp, #424	; 0x1a8
    3450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (*str) 
    3454:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
    3458:	b14b      	cbz	r3, 346e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10a>
    345a:	a92a      	add	r1, sp, #168	; 0xa8
    345c:	4620      	mov	r0, r4
    345e:	f7fe ff8f 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    3462:	e7f4      	b.n	344e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    3464:	f89a 3000 	ldrb.w	r3, [sl]
    3468:	2b00      	cmp	r3, #0
    346a:	f040 8089 	bne.w	3580 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x21c>
    { if (write_get_length_) 
    346e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    3472:	f88d 301c 	strb.w	r3, [sp, #28]
    3476:	f892 1428 	ldrb.w	r1, [r2, #1064]	; 0x428
    347a:	2900      	cmp	r1, #0
    347c:	d063      	beq.n	3546 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1e2>
        write_length_ += len;
    347e:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    3482:	3301      	adds	r3, #1
    3484:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
    3488:	e7e1      	b.n	344e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    { if (write_get_length_) 
    348a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    348e:	9507      	str	r5, [sp, #28]
    3490:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
    3494:	2a00      	cmp	r2, #0
    3496:	d0d5      	beq.n	3444 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe0>
        write_length_ += len;
    3498:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
    349c:	3204      	adds	r2, #4
    349e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    34a2:	e7d4      	b.n	344e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
          write32((store==parent)? 0: parent);
    34a4:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    34a8:	f504 5180 	add.w	r1, r4, #4096	; 0x1000
          write32((store==parent)? 0: parent);
    34ac:	429a      	cmp	r2, r3
    34ae:	bf08      	it	eq
    34b0:	2300      	moveq	r3, #0
    { if (write_get_length_) 
    34b2:	f891 2428 	ldrb.w	r2, [r1, #1064]	; 0x428
    34b6:	9307      	str	r3, [sp, #28]
    34b8:	2a00      	cmp	r2, #0
    34ba:	d0c3      	beq.n	3444 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe0>
        write_length_ += len;
    34bc:	f8d1 342c 	ldr.w	r3, [r1, #1068]	; 0x42c
    34c0:	3304      	adds	r3, #4
    34c2:	f8c1 342c 	str.w	r3, [r1, #1068]	; 0x42c
    34c6:	e7c2      	b.n	344e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    if (*str) 
    34c8:	f899 3000 	ldrb.w	r3, [r9]
    34cc:	2b00      	cmp	r3, #0
    34ce:	d0ce      	beq.n	346e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10a>
    34d0:	4649      	mov	r1, r9
    34d2:	4620      	mov	r0, r4
    34d4:	f7fe ff54 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    34d8:	e7b9      	b.n	344e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    { if (write_get_length_) 
    34da:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    34de:	2100      	movs	r1, #0
    34e0:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
    34e4:	f8ad 101c 	strh.w	r1, [sp, #28]
    34e8:	b1b2      	cbz	r2, 3518 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b4>
        write_length_ += len;
    34ea:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
    34ee:	3202      	adds	r2, #2
    34f0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    34f4:	e7ab      	b.n	344e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
          write16(dir?0x3001:0x3000);
    34f6:	2800      	cmp	r0, #0
    34f8:	bf08      	it	eq
    34fa:	f1b1 3fff 	cmpeq.w	r1, #4294967295
    { if (write_get_length_) 
    34fe:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
          write16(dir?0x3001:0x3000);
    3502:	bf14      	ite	ne
    3504:	f44f 5140 	movne.w	r1, #12288	; 0x3000
    3508:	f243 0101 	movweq	r1, #12289	; 0x3001
    { if (write_get_length_) 
    350c:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
    3510:	f8ad 101c 	strh.w	r1, [sp, #28]
    3514:	2a00      	cmp	r2, #0
    3516:	d1e8      	bne.n	34ea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x186>
    3518:	2202      	movs	r2, #2
    351a:	a907      	add	r1, sp, #28
    351c:	4620      	mov	r0, r4
    351e:	f7fe fef1 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
          break;
    3522:	e794      	b.n	344e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    { if (write_get_length_) 
    3524:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
          write32(size&0xffffffff);
    3528:	9107      	str	r1, [sp, #28]
    { if (write_get_length_) 
    352a:	f896 5428 	ldrb.w	r5, [r6, #1064]	; 0x428
    352e:	b185      	cbz	r5, 3552 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ee>
        write_length_ += len;
    3530:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    3534:	3304      	adds	r3, #4
    3536:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    353a:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    353e:	3304      	adds	r3, #4
    3540:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    3544:	e783      	b.n	344e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    3546:	2201      	movs	r2, #1
    3548:	a907      	add	r1, sp, #28
    354a:	4620      	mov	r0, r4
    354c:	f7fe feda 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    }
    3550:	e77d      	b.n	344e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    3552:	2204      	movs	r2, #4
    3554:	a907      	add	r1, sp, #28
    3556:	4620      	mov	r0, r4
    3558:	f7fe fed4 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    355c:	f896 3428 	ldrb.w	r3, [r6, #1064]	; 0x428
          write32(0);
    3560:	9507      	str	r5, [sp, #28]
    { if (write_get_length_) 
    3562:	2b00      	cmp	r3, #0
    3564:	f43f af6e 	beq.w	3444 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe0>
    3568:	e7e7      	b.n	353a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d6>
        write_length_ += len;
    356a:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    356e:	3304      	adds	r3, #4
    3570:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    3574:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    3578:	3304      	adds	r3, #4
    357a:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    { if (write_get_length_) 
    357e:	e7d7      	b.n	3530 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1cc>
    3580:	4651      	mov	r1, sl
    3582:	4620      	mov	r0, r4
    3584:	f7fe fefc 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
    3588:	e761      	b.n	344e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    358a:	bf00      	nop

0000358c <MTPD::GetObject(unsigned long)>:
    {
    358c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3590:	ed2d 8b02 	vpush	{d8}
    3594:	b085      	sub	sp, #20
      if (write_get_length_) {
    3596:	f500 5880 	add.w	r8, r0, #4096	; 0x1000
    {
    359a:	ee08 1a10 	vmov	s16, r1
    359e:	9003      	str	r0, [sp, #12]
      uint32_t size = storage_->GetSize(object_id);
    35a0:	6800      	ldr	r0, [r0, #0]
    35a2:	f002 fe03 	bl	61ac <MTPStorage_SD::GetSize(unsigned long)>
      if (write_get_length_) {
    35a6:	f898 6428 	ldrb.w	r6, [r8, #1064]	; 0x428
      uint32_t size = storage_->GetSize(object_id);
    35aa:	4682      	mov	sl, r0
      if (write_get_length_) {
    35ac:	b14e      	cbz	r6, 35c2 <MTPD::GetObject(unsigned long)+0x36>
        write_length_ += size;
    35ae:	f8d8 342c 	ldr.w	r3, [r8, #1068]	; 0x42c
    35b2:	4403      	add	r3, r0
    35b4:	f8c8 342c 	str.w	r3, [r8, #1068]	; 0x42c
    }
    35b8:	b005      	add	sp, #20
    35ba:	ecbd 8b02 	vpop	{d8}
    35be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    35c2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    35c6:	9b03      	ldr	r3, [sp, #12]
        disk_pos=DISK_BUFFER_SIZE;
    35c8:	f8c8 4424 	str.w	r4, [r8, #1060]	; 0x424
        while(pos<size)
    35cc:	2800      	cmp	r0, #0
    35ce:	d055      	beq.n	367c <MTPD::GetObject(unsigned long)+0xf0>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    35d0:	f503 6b84 	add.w	fp, r3, #1056	; 0x420
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    35d4:	f103 0920 	add.w	r9, r3, #32
        uint32_t len = sizeof(MTPHeader);
    35d8:	250c      	movs	r5, #12
    35da:	e01e      	b.n	361a <MTPD::GetObject(unsigned long)+0x8e>
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    35dc:	f5c4 5380 	rsb	r3, r4, #4096	; 0x1000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    35e0:	eb0b 0104 	add.w	r1, fp, r4
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    35e4:	429f      	cmp	r7, r3
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    35e6:	f5c5 7200 	rsb	r2, r5, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    35ea:	eb09 0005 	add.w	r0, r9, r5
    35ee:	bf28      	it	cs
    35f0:	461f      	movcs	r7, r3
    35f2:	4297      	cmp	r7, r2
    35f4:	bf28      	it	cs
    35f6:	4617      	movcs	r7, r2
    35f8:	463a      	mov	r2, r7
          len += to_copy;
    35fa:	443d      	add	r5, r7
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    35fc:	f00b f80a 	bl	e614 <memcpy>
          disk_pos += to_copy;
    3600:	f8d8 3424 	ldr.w	r3, [r8, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    3604:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
          pos += to_copy;
    3608:	443e      	add	r6, r7
          disk_pos += to_copy;
    360a:	443b      	add	r3, r7
    360c:	f8c8 3424 	str.w	r3, [r8, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    3610:	d01d      	beq.n	364e <MTPD::GetObject(unsigned long)+0xc2>
        while(pos<size)
    3612:	45b2      	cmp	sl, r6
    3614:	d927      	bls.n	3666 <MTPD::GetObject(unsigned long)+0xda>
          if(disk_pos==DISK_BUFFER_SIZE)
    3616:	f8d8 4424 	ldr.w	r4, [r8, #1060]	; 0x424
    361a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    361e:	ebaa 0706 	sub.w	r7, sl, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    3622:	d1db      	bne.n	35dc <MTPD::GetObject(unsigned long)+0x50>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    3624:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3628:	465b      	mov	r3, fp
    362a:	4632      	mov	r2, r6
    362c:	ee18 1a10 	vmov	r1, s16
    3630:	bf34      	ite	cc
    3632:	4638      	movcc	r0, r7
    3634:	f44f 5080 	movcs.w	r0, #4096	; 0x1000
    3638:	9000      	str	r0, [sp, #0]
    363a:	9803      	ldr	r0, [sp, #12]
    363c:	6800      	ldr	r0, [r0, #0]
    363e:	f002 fdc1 	bl	61c4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>
            disk_pos=0;
    3642:	2200      	movs	r2, #0
    3644:	4623      	mov	r3, r4
    3646:	4659      	mov	r1, fp
    3648:	f8c8 2424 	str.w	r2, [r8, #1060]	; 0x424
    364c:	e7ca      	b.n	35e4 <MTPD::GetObject(unsigned long)+0x58>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    364e:	223c      	movs	r2, #60	; 0x3c
    3650:	f44f 7100 	mov.w	r1, #512	; 0x200
    3654:	4648      	mov	r0, r9
    3656:	f00c f9cb 	bl	f9f0 <usb_mtp_send>
    365a:	2800      	cmp	r0, #0
    365c:	ddf7      	ble.n	364e <MTPD::GetObject(unsigned long)+0xc2>
        while(pos<size)
    365e:	45b2      	cmp	sl, r6
            len=0;
    3660:	f04f 0500 	mov.w	r5, #0
        while(pos<size)
    3664:	d8d7      	bhi.n	3616 <MTPD::GetObject(unsigned long)+0x8a>
        if(len>0)
    3666:	2d00      	cmp	r5, #0
    3668:	d0a6      	beq.n	35b8 <MTPD::GetObject(unsigned long)+0x2c>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    366a:	223c      	movs	r2, #60	; 0x3c
    366c:	f44f 7100 	mov.w	r1, #512	; 0x200
    3670:	4648      	mov	r0, r9
    3672:	f00c f9bd 	bl	f9f0 <usb_mtp_send>
    3676:	2800      	cmp	r0, #0
    3678:	ddf7      	ble.n	366a <MTPD::GetObject(unsigned long)+0xde>
    367a:	e79d      	b.n	35b8 <MTPD::GetObject(unsigned long)+0x2c>
    367c:	f103 0920 	add.w	r9, r3, #32
    3680:	e7f3      	b.n	366a <MTPD::GetObject(unsigned long)+0xde>
    3682:	bf00      	nop

00003684 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    {
    3684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3688:	ed2d 8b02 	vpush	{d8}
    368c:	b085      	sub	sp, #20
    368e:	461c      	mov	r4, r3
    3690:	4615      	mov	r5, r2
    3692:	ee08 1a10 	vmov	s16, r1
    3696:	9002      	str	r0, [sp, #8]
      uint32_t size = storage_->GetSize(object_id);
    3698:	6800      	ldr	r0, [r0, #0]
    369a:	f002 fd87 	bl	61ac <MTPStorage_SD::GetSize(unsigned long)>
      if(NumBytes == 0xffffffff) NumBytes=size;
    369e:	1c63      	adds	r3, r4, #1
      size -= offset;
    36a0:	eba0 0905 	sub.w	r9, r0, r5
      if(NumBytes == 0xffffffff) NumBytes=size;
    36a4:	d002      	beq.n	36ac <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x28>
    36a6:	45a1      	cmp	r9, r4
    36a8:	bf28      	it	cs
    36aa:	46a1      	movcs	r9, r4
      if (write_get_length_) {
    36ac:	9b02      	ldr	r3, [sp, #8]
    36ae:	f503 5880 	add.w	r8, r3, #4096	; 0x1000
    36b2:	f898 3428 	ldrb.w	r3, [r8, #1064]	; 0x428
    36b6:	9303      	str	r3, [sp, #12]
    36b8:	b153      	cbz	r3, 36d0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x4c>
        write_length_ += size;
    36ba:	f8d8 342c 	ldr.w	r3, [r8, #1068]	; 0x42c
    36be:	444b      	add	r3, r9
    36c0:	f8c8 342c 	str.w	r3, [r8, #1068]	; 0x42c
    }
    36c4:	4648      	mov	r0, r9
    36c6:	b005      	add	sp, #20
    36c8:	ecbd 8b02 	vpop	{d8}
    36cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    36d0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
        while(pos<size)
    36d4:	454d      	cmp	r5, r9
        disk_pos=DISK_BUFFER_SIZE;
    36d6:	f8c8 4424 	str.w	r4, [r8, #1060]	; 0x424
        while(pos<size)
    36da:	d2f3      	bcs.n	36c4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    36dc:	9b02      	ldr	r3, [sp, #8]
        uint32_t len = sizeof(MTPHeader);
    36de:	260c      	movs	r6, #12
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    36e0:	f503 6b84 	add.w	fp, r3, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    36e4:	f103 0a20 	add.w	sl, r3, #32
    36e8:	e01e      	b.n	3728 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa4>
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    36ea:	f5c4 5380 	rsb	r3, r4, #4096	; 0x1000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    36ee:	eb0b 0104 	add.w	r1, fp, r4
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    36f2:	429f      	cmp	r7, r3
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    36f4:	f5c6 7200 	rsb	r2, r6, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    36f8:	eb0a 0006 	add.w	r0, sl, r6
    36fc:	bf28      	it	cs
    36fe:	461f      	movcs	r7, r3
    3700:	4297      	cmp	r7, r2
    3702:	bf28      	it	cs
    3704:	4617      	movcs	r7, r2
    3706:	463a      	mov	r2, r7
          len += to_copy;
    3708:	443e      	add	r6, r7
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    370a:	f00a ff83 	bl	e614 <memcpy>
          disk_pos += to_copy;
    370e:	f8d8 3424 	ldr.w	r3, [r8, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    3712:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
          pos += to_copy;
    3716:	443d      	add	r5, r7
          disk_pos += to_copy;
    3718:	443b      	add	r3, r7
    371a:	f8c8 3424 	str.w	r3, [r8, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    371e:	d01d      	beq.n	375c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xd8>
        while(pos<size)
    3720:	45a9      	cmp	r9, r5
    3722:	d9cf      	bls.n	36c4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
          if(disk_pos==DISK_BUFFER_SIZE)
    3724:	f8d8 4424 	ldr.w	r4, [r8, #1060]	; 0x424
    3728:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    372c:	eba9 0705 	sub.w	r7, r9, r5
          if(disk_pos==DISK_BUFFER_SIZE)
    3730:	d1db      	bne.n	36ea <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>
    3732:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3736:	465b      	mov	r3, fp
    3738:	462a      	mov	r2, r5
    373a:	ee18 1a10 	vmov	r1, s16
    373e:	bf34      	ite	cc
    3740:	4638      	movcc	r0, r7
    3742:	f44f 5080 	movcs.w	r0, #4096	; 0x1000
    3746:	9000      	str	r0, [sp, #0]
    3748:	9802      	ldr	r0, [sp, #8]
    374a:	6800      	ldr	r0, [r0, #0]
    374c:	f002 fd3a 	bl	61c4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>
            disk_pos=0;
    3750:	9a03      	ldr	r2, [sp, #12]
    3752:	4623      	mov	r3, r4
    3754:	4659      	mov	r1, fp
    3756:	f8c8 2424 	str.w	r2, [r8, #1060]	; 0x424
    375a:	e7ca      	b.n	36f2 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x6e>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    375c:	223c      	movs	r2, #60	; 0x3c
    375e:	f44f 7100 	mov.w	r1, #512	; 0x200
    3762:	4650      	mov	r0, sl
    3764:	f00c f944 	bl	f9f0 <usb_mtp_send>
    3768:	2800      	cmp	r0, #0
    376a:	ddf7      	ble.n	375c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xd8>
            len=0;
    376c:	2600      	movs	r6, #0
    376e:	e7d7      	b.n	3720 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x9c>

00003770 <MTPD::read(char*, unsigned long)>:
    {
    3770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      if(!size) 
    3774:	4616      	mov	r6, r2
    3776:	b36a      	cbz	r2, 37d4 <MTPD::read(char*, unsigned long)+0x64>
    3778:	460f      	mov	r7, r1
    377a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 37dc <MTPD::read(char*, unsigned long)+0x6c>
          memcpy(data, rx_data_buffer + index, to_copy);
    377e:	f500 7908 	add.w	r9, r0, #544	; 0x220
          index=0;
    3782:	f04f 0a00 	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    3786:	f8d8 4000 	ldr.w	r4, [r8]
    378a:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    378e:	42b5      	cmp	r5, r6
    3790:	bf28      	it	cs
    3792:	4635      	movcs	r5, r6
        if (data) {
    3794:	b137      	cbz	r7, 37a4 <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, rx_data_buffer + index, to_copy);
    3796:	4638      	mov	r0, r7
    3798:	462a      	mov	r2, r5
    379a:	eb09 0104 	add.w	r1, r9, r4
          data += to_copy;
    379e:	442f      	add	r7, r5
          memcpy(data, rx_data_buffer + index, to_copy);
    37a0:	f00a ff38 	bl	e614 <memcpy>
        index += to_copy;
    37a4:	442c      	add	r4, r5
        size -= to_copy;
    37a6:	1b76      	subs	r6, r6, r5
        if (index == MTP_RX_SIZE) {
    37a8:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
        index += to_copy;
    37ac:	f8c8 4000 	str.w	r4, [r8]
        if (index == MTP_RX_SIZE) {
    37b0:	d003      	beq.n	37ba <MTPD::read(char*, unsigned long)+0x4a>
      while (size) {
    37b2:	2e00      	cmp	r6, #0
    37b4:	d1e7      	bne.n	3786 <MTPD::read(char*, unsigned long)+0x16>
    }
    37b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return 1;
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
      while(!usb_mtp_available());
    37ba:	f00c f901 	bl	f9c0 <usb_mtp_available>
    37be:	2800      	cmp	r0, #0
    37c0:	d0fb      	beq.n	37ba <MTPD::read(char*, unsigned long)+0x4a>
      return usb_mtp_recv(data_buffer,60);
    37c2:	213c      	movs	r1, #60	; 0x3c
    37c4:	4648      	mov	r0, r9
    37c6:	f00c f8a9 	bl	f91c <usb_mtp_recv>
          index=0;
    37ca:	f8c8 a000 	str.w	sl, [r8]
      while (size) {
    37ce:	2e00      	cmp	r6, #0
    37d0:	d1d9      	bne.n	3786 <MTPD::read(char*, unsigned long)+0x16>
    37d2:	e7f0      	b.n	37b6 <MTPD::read(char*, unsigned long)+0x46>
        index=0;
    37d4:	4b01      	ldr	r3, [pc, #4]	; (37dc <MTPD::read(char*, unsigned long)+0x6c>)
    37d6:	601a      	str	r2, [r3, #0]
    }
    37d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37dc:	200151f8 	.word	0x200151f8

000037e0 <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    37e0:	b570      	push	{r4, r5, r6, lr}
    37e2:	b082      	sub	sp, #8
    37e4:	460c      	mov	r4, r1
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    37e6:	2201      	movs	r2, #1
  void MTPD::readstring(char* buffer) {
    37e8:	4606      	mov	r6, r0
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    37ea:	f10d 0106 	add.w	r1, sp, #6
    37ee:	f7ff ffbf 	bl	3770 <MTPD::read(char*, unsigned long)>
    37f2:	f89d 5006 	ldrb.w	r5, [sp, #6]
    if (!buffer) {
    37f6:	b17c      	cbz	r4, 3818 <MTPD::readstring(char*)+0x38>
      for (int i = 0; i < len; i++) {
    37f8:	b165      	cbz	r5, 3814 <MTPD::readstring(char*)+0x34>
    37fa:	4425      	add	r5, r4
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    37fc:	2202      	movs	r2, #2
    37fe:	f10d 0106 	add.w	r1, sp, #6
    3802:	4630      	mov	r0, r6
    3804:	f7ff ffb4 	bl	3770 <MTPD::read(char*, unsigned long)>
    3808:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        *(buffer++) = c2 = read16();
    380c:	f804 3b01 	strb.w	r3, [r4], #1
      for (int i = 0; i < len; i++) {
    3810:	42a5      	cmp	r5, r4
    3812:	d1f3      	bne.n	37fc <MTPD::readstring(char*)+0x1c>
  }
    3814:	b002      	add	sp, #8
    3816:	bd70      	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    3818:	006a      	lsls	r2, r5, #1
    381a:	4621      	mov	r1, r4
    381c:	4630      	mov	r0, r6
  }
    381e:	b002      	add	sp, #8
    3820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    3824:	f7ff bfa4 	b.w	3770 <MTPD::read(char*, unsigned long)>

00003828 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    3828:	b530      	push	{r4, r5, lr}
    382a:	b0c1      	sub	sp, #260	; 0x104
    382c:	4604      	mov	r4, r0
    read((char *)&header, sizeof(MTPHeader));
    382e:	220c      	movs	r2, #12
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    3830:	460d      	mov	r5, r1
    read((char *)&header, sizeof(MTPHeader));
    3832:	4669      	mov	r1, sp
    3834:	f7ff ff9c 	bl	3770 <MTPD::read(char*, unsigned long)>
        readstring(filename);
    3838:	4669      	mov	r1, sp
    383a:	4620      	mov	r0, r4
    383c:	f7ff ffd0 	bl	37e0 <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    3840:	466a      	mov	r2, sp
    3842:	4629      	mov	r1, r5
    3844:	6820      	ldr	r0, [r4, #0]
    3846:	f002 ff55 	bl	66f4 <MTPStorage_SD::rename(unsigned long, char const*)>
    384a:	f242 0201 	movw	r2, #8193	; 0x2001
    384e:	f242 0305 	movw	r3, #8197	; 0x2005
    }
    3852:	2800      	cmp	r0, #0
    3854:	bf14      	ite	ne
    3856:	4610      	movne	r0, r2
    3858:	4618      	moveq	r0, r3
    385a:	b041      	add	sp, #260	; 0x104
    385c:	bd30      	pop	{r4, r5, pc}
    385e:	bf00      	nop

00003860 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3864:	4605      	mov	r5, r0
    3866:	b0c5      	sub	sp, #276	; 0x114
    3868:	4689      	mov	r9, r1
    386a:	4692      	mov	sl, r2
      pull_packet(rx_data_buffer);
    386c:	f500 7408 	add.w	r4, r0, #544	; 0x220
      while(!usb_mtp_available());
    3870:	f00c f8a6 	bl	f9c0 <usb_mtp_available>
    3874:	2800      	cmp	r0, #0
    3876:	d0fb      	beq.n	3870 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10>
      return usb_mtp_recv(data_buffer,60);
    3878:	213c      	movs	r1, #60	; 0x3c
    387a:	4620      	mov	r0, r4
    387c:	f00c f84e 	bl	f91c <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    3880:	ae04      	add	r6, sp, #16
        index=0;
    3882:	4b4b      	ldr	r3, [pc, #300]	; (39b0 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x150>)
    3884:	2200      	movs	r2, #0
    read((char *)&header, sizeof(MTPHeader));
    3886:	4628      	mov	r0, r5
    3888:	4631      	mov	r1, r6
        index=0;
    388a:	601a      	str	r2, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    388c:	220c      	movs	r2, #12
    388e:	f7ff ff6f 	bl	3770 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    3892:	88b3      	ldrh	r3, [r6, #4]
      uint32_t store = Storage2Store(storage);
    3894:	f109 39ff 	add.w	r9, r9, #4294967295
    if(header.type==2)
    3898:	2b02      	cmp	r3, #2
    389a:	f000 8085 	beq.w	39a8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x148>
    389e:	f06f 0833 	mvn.w	r8, #51	; 0x33
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    38a2:	2204      	movs	r2, #4
    38a4:	4631      	mov	r1, r6
    38a6:	4628      	mov	r0, r5
    38a8:	f7ff ff62 	bl	3770 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    38ac:	2202      	movs	r2, #2
    38ae:	4631      	mov	r1, r6
    38b0:	4628      	mov	r0, r5
    38b2:	f7ff ff5d 	bl	3770 <MTPD::read(char*, unsigned long)>
      bool dir = (read16() == 0x3001); len -=2; // format
    38b6:	f243 0301 	movw	r3, #12289	; 0x3001
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    38ba:	f8b6 b000 	ldrh.w	fp, [r6]
    38be:	2202      	movs	r2, #2
    38c0:	4631      	mov	r1, r6
    38c2:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    38c4:	ebab 0b03 	sub.w	fp, fp, r3
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    38c8:	f7ff ff52 	bl	3770 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    38cc:	2204      	movs	r2, #4
    38ce:	4631      	mov	r1, r6
    38d0:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    38d2:	fabb fb8b 	clz	fp, fp
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    38d6:	f7ff ff4b 	bl	3770 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    38da:	2202      	movs	r2, #2
    38dc:	4631      	mov	r1, r6
    38de:	4628      	mov	r0, r5
    38e0:	f7ff ff46 	bl	3770 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    38e4:	2204      	movs	r2, #4
    38e6:	4631      	mov	r1, r6
    38e8:	4628      	mov	r0, r5
    38ea:	f7ff ff41 	bl	3770 <MTPD::read(char*, unsigned long)>
    38ee:	2204      	movs	r2, #4
    38f0:	4631      	mov	r1, r6
    38f2:	4628      	mov	r0, r5
    38f4:	f7ff ff3c 	bl	3770 <MTPD::read(char*, unsigned long)>
    38f8:	2204      	movs	r2, #4
    38fa:	4631      	mov	r1, r6
    38fc:	4628      	mov	r0, r5
    38fe:	f7ff ff37 	bl	3770 <MTPD::read(char*, unsigned long)>
    3902:	2204      	movs	r2, #4
    3904:	4631      	mov	r1, r6
    3906:	4628      	mov	r0, r5
    3908:	f7ff ff32 	bl	3770 <MTPD::read(char*, unsigned long)>
    390c:	2204      	movs	r2, #4
    390e:	4631      	mov	r1, r6
    3910:	4628      	mov	r0, r5
    3912:	f7ff ff2d 	bl	3770 <MTPD::read(char*, unsigned long)>
    3916:	2204      	movs	r2, #4
    3918:	4631      	mov	r1, r6
    391a:	4628      	mov	r0, r5
    391c:	f7ff ff28 	bl	3770 <MTPD::read(char*, unsigned long)>
    3920:	2204      	movs	r2, #4
    3922:	4631      	mov	r1, r6
    3924:	4628      	mov	r0, r5
    3926:	f7ff ff23 	bl	3770 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    392a:	2202      	movs	r2, #2
    392c:	4631      	mov	r1, r6
    392e:	4628      	mov	r0, r5
    3930:	f7ff ff1e 	bl	3770 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3934:	2204      	movs	r2, #4
    3936:	4631      	mov	r1, r6
    3938:	4628      	mov	r0, r5
    393a:	f7ff ff19 	bl	3770 <MTPD::read(char*, unsigned long)>
    393e:	2204      	movs	r2, #4
    3940:	4631      	mov	r1, r6
    3942:	4628      	mov	r0, r5
    3944:	f7ff ff14 	bl	3770 <MTPD::read(char*, unsigned long)>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    3948:	4631      	mov	r1, r6
    394a:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    394c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    3950:	f7ff ff46 	bl	37e0 <MTPD::readstring(char*)>
    3954:	4630      	mov	r0, r6
    3956:	f00f fad3 	bl	12f00 <strlen>
    395a:	3001      	adds	r0, #1
    395c:	eba8 0840 	sub.w	r8, r8, r0, lsl #1
    3960:	f108 34ff 	add.w	r4, r8, #4294967295
      while(len>=4) { read32(); len-=4;}
    3964:	2c03      	cmp	r4, #3
    3966:	dd0c      	ble.n	3982 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x122>
    3968:	af03      	add	r7, sp, #12
    396a:	3c04      	subs	r4, #4
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    396c:	2204      	movs	r2, #4
    396e:	4639      	mov	r1, r7
    3970:	4628      	mov	r0, r5
    3972:	f7ff fefd 	bl	3770 <MTPD::read(char*, unsigned long)>
      while(len>=4) { read32(); len-=4;}
    3976:	2c03      	cmp	r4, #3
    3978:	dcf7      	bgt.n	396a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10a>
    397a:	f1a8 0805 	sub.w	r8, r8, #5
    397e:	f008 0403 	and.w	r4, r8, #3
      while(len) {read8(); len--;}
    3982:	b13c      	cbz	r4, 3994 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x134>
    3984:	af03      	add	r7, sp, #12
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3986:	2201      	movs	r2, #1
    3988:	4639      	mov	r1, r7
    398a:	4628      	mov	r0, r5
    398c:	f7ff fef0 	bl	3770 <MTPD::read(char*, unsigned long)>
      while(len) {read8(); len--;}
    3990:	3c01      	subs	r4, #1
    3992:	d1f8      	bne.n	3986 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x126>
      return storage_->Create(store, parent, dir, filename);
    3994:	465b      	mov	r3, fp
    3996:	4652      	mov	r2, sl
    3998:	4649      	mov	r1, r9
    399a:	6828      	ldr	r0, [r5, #0]
    399c:	9600      	str	r6, [sp, #0]
    399e:	f002 fdbd 	bl	651c <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>
    }
    39a2:	b045      	add	sp, #276	; 0x114
    39a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    39a8:	6833      	ldr	r3, [r6, #0]
    39aa:	f1a3 0840 	sub.w	r8, r3, #64	; 0x40
    39ae:	e778      	b.n	38a2 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x42>
    39b0:	200151f8 	.word	0x200151f8

000039b4 <MTPD::SendObject()>:
    { 
    39b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    39b8:	f500 7908 	add.w	r9, r0, #544	; 0x220
    { 
    39bc:	b087      	sub	sp, #28
    39be:	9000      	str	r0, [sp, #0]
      while(!usb_mtp_available());
    39c0:	f00b fffe 	bl	f9c0 <usb_mtp_available>
    39c4:	2800      	cmp	r0, #0
    39c6:	d0fb      	beq.n	39c0 <MTPD::SendObject()+0xc>
      return usb_mtp_recv(data_buffer,60);
    39c8:	213c      	movs	r1, #60	; 0x3c
    39ca:	4648      	mov	r0, r9
    39cc:	f00b ffa6 	bl	f91c <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    39d0:	220c      	movs	r2, #12
        index=0;
    39d2:	4b40      	ldr	r3, [pc, #256]	; (3ad4 <MTPD::SendObject()+0x120>)
    39d4:	2400      	movs	r4, #0
    read((char *)&header, sizeof(MTPHeader));
    39d6:	eb0d 0102 	add.w	r1, sp, r2
    39da:	9800      	ldr	r0, [sp, #0]
        index=0;
    39dc:	601c      	str	r4, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    39de:	f7ff fec7 	bl	3770 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    39e2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    39e6:	2b02      	cmp	r3, #2
    39e8:	d00c      	beq.n	3a04 <MTPD::SendObject()+0x50>
      disk_pos=0;
    39ea:	9b00      	ldr	r3, [sp, #0]
    39ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    39f0:	f8c3 4424 	str.w	r4, [r3, #1060]	; 0x424
      storage_->close();
    39f4:	9b00      	ldr	r3, [sp, #0]
    39f6:	6818      	ldr	r0, [r3, #0]
    39f8:	f002 fe10 	bl	661c <MTPStorage_SD::close()>
      return true;
    39fc:	2001      	movs	r0, #1
    }
    39fe:	b007      	add	sp, #28
    3a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    3a04:	9b03      	ldr	r3, [sp, #12]
      disk_pos=0;
    3a06:	9a00      	ldr	r2, [sp, #0]
      return header.len - 12;
    3a08:	f1a3 0b0c 	sub.w	fp, r3, #12
      disk_pos=0;
    3a0c:	f502 5780 	add.w	r7, r2, #4096	; 0x1000
      while((int)len>0)
    3a10:	45a3      	cmp	fp, r4
      disk_pos=0;
    3a12:	f8c7 4424 	str.w	r4, [r7, #1060]	; 0x424
      while((int)len>0)
    3a16:	dded      	ble.n	39f4 <MTPD::SendObject()+0x40>
      uint32_t index = sizeof(MTPHeader);
    3a18:	250c      	movs	r5, #12
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3a1a:	4620      	mov	r0, r4
    3a1c:	f502 6a84 	add.w	sl, r2, #1056	; 0x420
          disk_pos =0;
    3a20:	46a8      	mov	r8, r5
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    3a22:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    3a26:	f5c0 5480 	rsb	r4, r0, #4096	; 0x1000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3a2a:	eb09 0108 	add.w	r1, r9, r8
    3a2e:	4450      	add	r0, sl
    3a30:	455e      	cmp	r6, fp
    3a32:	bf28      	it	cs
    3a34:	465e      	movcs	r6, fp
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    3a36:	42b4      	cmp	r4, r6
    3a38:	bf28      	it	cs
    3a3a:	4634      	movcs	r4, r6
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3a3c:	4622      	mov	r2, r4
        len -= to_copy;
    3a3e:	ebab 0504 	sub.w	r5, fp, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3a42:	f00a fde7 	bl	e614 <memcpy>
        disk_pos += to_copy;
    3a46:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
    3a4a:	4422      	add	r2, r4
        if(disk_pos==DISK_BUFFER_SIZE)
    3a4c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
        disk_pos += to_copy;
    3a50:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
        if(disk_pos==DISK_BUFFER_SIZE)
    3a54:	d021      	beq.n	3a9a <MTPD::SendObject()+0xe6>
        if(len>0)  // we have still data to be transfered
    3a56:	b985      	cbnz	r5, 3a7a <MTPD::SendObject()+0xc6>
      if(disk_pos)
    3a58:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
    3a5c:	2a00      	cmp	r2, #0
    3a5e:	d0c9      	beq.n	39f4 <MTPD::SendObject()+0x40>
        if(storage_->write((const uint8_t *)disk_buffer, disk_pos)<disk_pos) return false;
    3a60:	9b00      	ldr	r3, [sp, #0]
    3a62:	4651      	mov	r1, sl
    3a64:	6818      	ldr	r0, [r3, #0]
    3a66:	f002 fdcd 	bl	6604 <MTPStorage_SD::write(unsigned char const*, unsigned long)>
    3a6a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
    3a6e:	4298      	cmp	r0, r3
    3a70:	d2c0      	bcs.n	39f4 <MTPD::SendObject()+0x40>
          if(storage_->write((const uint8_t *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    3a72:	2000      	movs	r0, #0
    }
    3a74:	b007      	add	sp, #28
    3a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while(!usb_mtp_available());
    3a7a:	f00b ffa1 	bl	f9c0 <usb_mtp_available>
    3a7e:	2800      	cmp	r0, #0
    3a80:	d0fb      	beq.n	3a7a <MTPD::SendObject()+0xc6>
      return usb_mtp_recv(data_buffer,60);
    3a82:	213c      	movs	r1, #60	; 0x3c
    3a84:	4648      	mov	r0, r9
    3a86:	f00b ff49 	bl	f91c <usb_mtp_recv>
      while((int)len>0)
    3a8a:	2d00      	cmp	r5, #0
    3a8c:	dde4      	ble.n	3a58 <MTPD::SendObject()+0xa4>
      if(disk_pos)
    3a8e:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
    3a92:	46ab      	mov	fp, r5
          index=0;
    3a94:	f04f 0800 	mov.w	r8, #0
    3a98:	e7c3      	b.n	3a22 <MTPD::SendObject()+0x6e>
          if(storage_->write((const uint8_t *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    3a9a:	9b00      	ldr	r3, [sp, #0]
    3a9c:	4651      	mov	r1, sl
    3a9e:	6818      	ldr	r0, [r3, #0]
    3aa0:	f002 fdb0 	bl	6604 <MTPStorage_SD::write(unsigned char const*, unsigned long)>
    3aa4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    3aa8:	d3e3      	bcc.n	3a72 <MTPD::SendObject()+0xbe>
          disk_pos =0;
    3aaa:	2300      	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    3aac:	1b32      	subs	r2, r6, r4
          disk_pos =0;
    3aae:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    3ab2:	d0d0      	beq.n	3a56 <MTPD::SendObject()+0xa2>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    3ab4:	eb04 0108 	add.w	r1, r4, r8
    3ab8:	4650      	mov	r0, sl
    3aba:	9201      	str	r2, [sp, #4]
            len -= bytes;
    3abc:	ebab 0506 	sub.w	r5, fp, r6
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    3ac0:	4449      	add	r1, r9
    3ac2:	f00a fda7 	bl	e614 <memcpy>
            disk_pos += bytes;
    3ac6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
    3aca:	9a01      	ldr	r2, [sp, #4]
    3acc:	4413      	add	r3, r2
    3ace:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
            len -= bytes;
    3ad2:	e7c0      	b.n	3a56 <MTPD::SendObject()+0xa2>
    3ad4:	200151f8 	.word	0x200151f8

00003ad8 <MTPD::loop()>:
    { if(!usb_mtp_available()) return;
    3ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3adc:	ed2d 8b02 	vpush	{d8}
    3ae0:	b08f      	sub	sp, #60	; 0x3c
    3ae2:	4604      	mov	r4, r0
    3ae4:	f00b ff6c 	bl	f9c0 <usb_mtp_available>
    3ae8:	b920      	cbnz	r0, 3af4 <MTPD::loop()+0x1c>
    }
    3aea:	b00f      	add	sp, #60	; 0x3c
    3aec:	ecbd 8b02 	vpop	{d8}
    3af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(fetch_packet(rx_data_buffer))
    3af4:	f504 7508 	add.w	r5, r4, #544	; 0x220
    }

    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    3af8:	213c      	movs	r1, #60	; 0x3c
    3afa:	4628      	mov	r0, r5
    3afc:	f00b ff0e 	bl	f91c <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    3b00:	2800      	cmp	r0, #0
    3b02:	d0f2      	beq.n	3aea <MTPD::loop()+0x12>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    3b04:	f8d4 1228 	ldr.w	r1, [r4, #552]	; 0x228
    3b08:	f8b4 2224 	ldrh.w	r2, [r4, #548]	; 0x224
    3b0c:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    3b10:	48af      	ldr	r0, [pc, #700]	; (3dd0 <MTPD::loop()+0x2f8>)
    3b12:	e9cd 2100 	strd	r2, r1, [sp]
    3b16:	49af      	ldr	r1, [pc, #700]	; (3dd4 <MTPD::loop()+0x2fc>)
    3b18:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    3b1c:	f009 ff90 	bl	da40 <Print::printf(char const*, ...)>
    3b20:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    3b24:	2b0c      	cmp	r3, #12
    3b26:	d86f      	bhi.n	3c08 <MTPD::loop()+0x130>
    3b28:	49ab      	ldr	r1, [pc, #684]	; (3dd8 <MTPD::loop()+0x300>)
        TID=id;
    3b2a:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    3b2e:	48a8      	ldr	r0, [pc, #672]	; (3dd0 <MTPD::loop()+0x2f8>)
    3b30:	f009 ff86 	bl	da40 <Print::printf(char const*, ...)>
        int typ= CONTAINER->type;
    3b34:	f8b4 0224 	ldrh.w	r0, [r4, #548]	; 0x224
        if(typ==2) return_code=0x2005; // we should only get cmds
    3b38:	f242 0305 	movw	r3, #8197	; 0x2005
    3b3c:	f242 0201 	movw	r2, #8193	; 0x2001
        int op = CONTAINER->op;
    3b40:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
        if(typ==2) return_code=0x2005; // we should only get cmds
    3b44:	2802      	cmp	r0, #2
    3b46:	bf08      	it	eq
    3b48:	461a      	moveq	r2, r3
        int p2 = CONTAINER->params[1];
    3b4a:	f8d4 8230 	ldr.w	r8, [r4, #560]	; 0x230
        int id = CONTAINER->transaction_id;
    3b4e:	f8d4 9228 	ldr.w	r9, [r4, #552]	; 0x228
        if(typ==2) return_code=0x2005; // we should only get cmds
    3b52:	9203      	str	r2, [sp, #12]
        switch (op)
    3b54:	f241 021b 	movw	r2, #4123	; 0x101b
        int p1 = CONTAINER->params[0];
    3b58:	f8d4 a22c 	ldr.w	sl, [r4, #556]	; 0x22c
        int p2 = CONTAINER->params[1];
    3b5c:	46c3      	mov	fp, r8
        switch (op)
    3b5e:	4291      	cmp	r1, r2
        int p3 = CONTAINER->params[2];
    3b60:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
        int len= CONTAINER->len;
    3b64:	f8d4 6220 	ldr.w	r6, [r4, #544]	; 0x220
        TID=id;
    3b68:	f8c7 9430 	str.w	r9, [r7, #1072]	; 0x430
        switch (op)
    3b6c:	d826      	bhi.n	3bbc <MTPD::loop()+0xe4>
    3b6e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    3b72:	f240 80d7 	bls.w	3d24 <MTPD::loop()+0x24c>
    3b76:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
    3b7a:	440a      	add	r2, r1
    3b7c:	2a1a      	cmp	r2, #26
    3b7e:	f200 80d1 	bhi.w	3d24 <MTPD::loop()+0x24c>
    3b82:	e8df f012 	tbh	[pc, r2, lsl #1]
    3b86:	01cf      	.short	0x01cf
    3b88:	00eb01c4 	.word	0x00eb01c4
    3b8c:	013100f0 	.word	0x013100f0
    3b90:	02b6011b 	.word	0x02b6011b
    3b94:	0303027f 	.word	0x0303027f
    3b98:	025600cf 	.word	0x025600cf
    3b9c:	02660272 	.word	0x02660272
    3ba0:	00cf00cf 	.word	0x00cf00cf
    3ba4:	00cf00cf 	.word	0x00cf00cf
    3ba8:	00cf00cf 	.word	0x00cf00cf
    3bac:	0204022d 	.word	0x0204022d
    3bb0:	00cf00cf 	.word	0x00cf00cf
    3bb4:	01b300cf 	.word	0x01b300cf
    3bb8:	016801a4 	.word	0x016801a4
    3bbc:	f246 73ff 	movw	r3, #26623	; 0x67ff
    3bc0:	440b      	add	r3, r1
    3bc2:	b29b      	uxth	r3, r3
    3bc4:	2b03      	cmp	r3, #3
    3bc6:	f200 80ad 	bhi.w	3d24 <MTPD::loop()+0x24c>
    3bca:	4b84      	ldr	r3, [pc, #528]	; (3ddc <MTPD::loop()+0x304>)
    3bcc:	440b      	add	r3, r1
    3bce:	2b02      	cmp	r3, #2
    3bd0:	f200 83ac 	bhi.w	432c <MTPD::loop()+0x854>
    3bd4:	e8df f003 	tbb	[pc, r3]
    3bd8:	346e      	.short	0x346e
    3bda:	02          	.byte	0x02
    3bdb:	00          	.byte	0x00
      while(!usb_mtp_available());
    3bdc:	f00b fef0 	bl	f9c0 <usb_mtp_available>
    3be0:	2800      	cmp	r0, #0
    3be2:	d0fb      	beq.n	3bdc <MTPD::loop()+0x104>
      return usb_mtp_recv(data_buffer,60);
    3be4:	213c      	movs	r1, #60	; 0x3c
    3be6:	4628      	mov	r0, r5
    3be8:	f00b fe98 	bl	f91c <usb_mtp_recv>
        index=0;
    3bec:	4b7c      	ldr	r3, [pc, #496]	; (3de0 <MTPD::loop()+0x308>)
    3bee:	2200      	movs	r2, #0
    3bf0:	601a      	str	r2, [r3, #0]
      if(p2==0xDC07)
    3bf2:	f64d 4307 	movw	r3, #56327	; 0xdc07
    3bf6:	4598      	cmp	r8, r3
    3bf8:	f040 832e 	bne.w	4258 <MTPD::loop()+0x780>
    3bfc:	4651      	mov	r1, sl
    3bfe:	4620      	mov	r0, r4
    3c00:	f7ff fe12 	bl	3828 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
            CONTAINER->op=return_code;
    3c04:	b283      	uxth	r3, r0
    3c06:	e0ab      	b.n	3d60 <MTPD::loop()+0x288>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    3c08:	f8d4 222c 	ldr.w	r2, [r4, #556]	; 0x22c
    3c0c:	4975      	ldr	r1, [pc, #468]	; (3de4 <MTPD::loop()+0x30c>)
    3c0e:	4870      	ldr	r0, [pc, #448]	; (3dd0 <MTPD::loop()+0x2f8>)
    3c10:	f009 ff16 	bl	da40 <Print::printf(char const*, ...)>
    3c14:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    3c18:	2b10      	cmp	r3, #16
    3c1a:	d985      	bls.n	3b28 <MTPD::loop()+0x50>
    3c1c:	f8d4 2230 	ldr.w	r2, [r4, #560]	; 0x230
    3c20:	4970      	ldr	r1, [pc, #448]	; (3de4 <MTPD::loop()+0x30c>)
    3c22:	486b      	ldr	r0, [pc, #428]	; (3dd0 <MTPD::loop()+0x2f8>)
    3c24:	f009 ff0c 	bl	da40 <Print::printf(char const*, ...)>
    3c28:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    3c2c:	2b14      	cmp	r3, #20
    3c2e:	f67f af7b 	bls.w	3b28 <MTPD::loop()+0x50>
    3c32:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
    3c36:	496b      	ldr	r1, [pc, #428]	; (3de4 <MTPD::loop()+0x30c>)
    3c38:	4865      	ldr	r0, [pc, #404]	; (3dd0 <MTPD::loop()+0x2f8>)
    3c3a:	f009 ff01 	bl	da40 <Print::printf(char const*, ...)>
    3c3e:	e773      	b.n	3b28 <MTPD::loop()+0x50>
              TRANSMIT(getObjectPropValue(p1,p2));
    3c40:	f04f 0b00 	mov.w	fp, #0
    3c44:	2301      	movs	r3, #1
    3c46:	4642      	mov	r2, r8
    3c48:	4651      	mov	r1, sl
    3c4a:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    3c4e:	4620      	mov	r0, r4
    3c50:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    3c54:	f7ff fb86 	bl	3364 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3c58:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3c5c:	220c      	movs	r2, #12
    3c5e:	a906      	add	r1, sp, #24
    3c60:	330c      	adds	r3, #12
    3c62:	4620      	mov	r0, r4
    3c64:	9306      	str	r3, [sp, #24]
    3c66:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3c6a:	f8ad 301e 	strh.w	r3, [sp, #30]
    3c6e:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    3c72:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    3c76:	9308      	str	r3, [sp, #32]
    3c78:	2302      	movs	r3, #2
    3c7a:	f887 b428 	strb.w	fp, [r7, #1064]	; 0x428
    3c7e:	f104 0720 	add.w	r7, r4, #32
    3c82:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3c86:	f7fe fb3d 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    3c8a:	4642      	mov	r2, r8
    3c8c:	4651      	mov	r1, sl
    3c8e:	4620      	mov	r0, r4
    3c90:	f7ff fb68 	bl	3364 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3c94:	9b06      	ldr	r3, [sp, #24]
    3c96:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3c9a:	f1b8 0f00 	cmp.w	r8, #0
    3c9e:	d006      	beq.n	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3ca0:	223c      	movs	r2, #60	; 0x3c
    3ca2:	4641      	mov	r1, r8
    3ca4:	4638      	mov	r0, r7
    3ca6:	f00b fea3 	bl	f9f0 <usb_mtp_send>
    3caa:	2800      	cmp	r0, #0
    3cac:	ddf8      	ble.n	3ca0 <MTPD::loop()+0x1c8>
            CONTAINER->op=return_code;
    3cae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
              break;
    3cb2:	e03b      	b.n	3d2c <MTPD::loop()+0x254>
              TRANSMIT(getObjectPropDesc(p1,p2));
    3cb4:	f04f 0b00 	mov.w	fp, #0
    3cb8:	2301      	movs	r3, #1
    3cba:	4642      	mov	r2, r8
    3cbc:	4651      	mov	r1, sl
    3cbe:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    3cc2:	4620      	mov	r0, r4
    3cc4:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    3cc8:	f7ff f8e4 	bl	2e94 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3ccc:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3cd0:	220c      	movs	r2, #12
    3cd2:	a906      	add	r1, sp, #24
    3cd4:	330c      	adds	r3, #12
    3cd6:	4620      	mov	r0, r4
    3cd8:	9306      	str	r3, [sp, #24]
    3cda:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3cde:	f8ad 301e 	strh.w	r3, [sp, #30]
    3ce2:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    3ce6:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    3cea:	9308      	str	r3, [sp, #32]
    3cec:	2302      	movs	r3, #2
    3cee:	f887 b428 	strb.w	fp, [r7, #1064]	; 0x428
    3cf2:	f104 0720 	add.w	r7, r4, #32
    3cf6:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3cfa:	f7fe fb03 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    3cfe:	4642      	mov	r2, r8
    3d00:	4651      	mov	r1, sl
    3d02:	4620      	mov	r0, r4
    3d04:	f7ff f8c6 	bl	2e94 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3d08:	9b06      	ldr	r3, [sp, #24]
    3d0a:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3d0e:	f1b8 0f00 	cmp.w	r8, #0
    3d12:	d0cc      	beq.n	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d14:	223c      	movs	r2, #60	; 0x3c
    3d16:	4641      	mov	r1, r8
    3d18:	4638      	mov	r0, r7
    3d1a:	f00b fe69 	bl	f9f0 <usb_mtp_send>
    3d1e:	2800      	cmp	r0, #0
    3d20:	ddf8      	ble.n	3d14 <MTPD::loop()+0x23c>
    3d22:	e7c4      	b.n	3cae <MTPD::loop()+0x1d6>
            TRANSMIT(WriteDescriptor());
    3d24:	f104 0720 	add.w	r7, r4, #32
    3d28:	f242 0305 	movw	r3, #8197	; 0x2005
            CONTAINER->op=return_code;
    3d2c:	f8a4 3226 	strh.w	r3, [r4, #550]	; 0x226
            CONTAINER->type=3;
    3d30:	2303      	movs	r3, #3
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3d32:	4629      	mov	r1, r5
    3d34:	4632      	mov	r2, r6
    3d36:	4638      	mov	r0, r7
            CONTAINER->transaction_id=id;
    3d38:	f8c4 9228 	str.w	r9, [r4, #552]	; 0x228
            CONTAINER->len=len;
    3d3c:	f8c4 6220 	str.w	r6, [r4, #544]	; 0x220
            CONTAINER->params[0]=p1;
    3d40:	f8c4 a22c 	str.w	sl, [r4, #556]	; 0x22c
            CONTAINER->type=3;
    3d44:	f8a4 3224 	strh.w	r3, [r4, #548]	; 0x224
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3d48:	f00a fc64 	bl	e614 <memcpy>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d4c:	223c      	movs	r2, #60	; 0x3c
    3d4e:	4631      	mov	r1, r6
    3d50:	4638      	mov	r0, r7
    3d52:	f00b fe4d 	bl	f9f0 <usb_mtp_send>
    3d56:	2800      	cmp	r0, #0
    3d58:	ddf8      	ble.n	3d4c <MTPD::loop()+0x274>
    3d5a:	e6c6      	b.n	3aea <MTPD::loop()+0x12>
            CONTAINER->op=return_code;
    3d5c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            TRANSMIT(WriteDescriptor());
    3d60:	f104 0720 	add.w	r7, r4, #32
    3d64:	e7e2      	b.n	3d2c <MTPD::loop()+0x254>
      uint32_t sd_getFSCount(void) {return fsCount;}
    3d66:	6823      	ldr	r3, [r4, #0]
        write_length_ += len;
    3d68:	2204      	movs	r2, #4
    3d6a:	f8d3 b000 	ldr.w	fp, [r3]
              TRANSMIT(WriteStorageIDs());
    3d6e:	2301      	movs	r3, #1
        write_length_ += len;
    3d70:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
              TRANSMIT(WriteStorageIDs());
    3d74:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3d78:	f1bb 0f00 	cmp.w	fp, #0
    3d7c:	f000 82d4 	beq.w	4328 <MTPD::loop()+0x850>
    3d80:	f04f 0800 	mov.w	r8, #0
    3d84:	4622      	mov	r2, r4
    3d86:	a906      	add	r1, sp, #24
    3d88:	ee08 5a10 	vmov	s16, r5
    3d8c:	4644      	mov	r4, r8
    3d8e:	4690      	mov	r8, r2
    3d90:	460d      	mov	r5, r1
    3d92:	e009      	b.n	3da8 <MTPD::loop()+0x2d0>
        write_length_ += len;
    3d94:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3d98:	4413      	add	r3, r2
    3d9a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3d9e:	45a3      	cmp	fp, r4
    3da0:	f000 822b 	beq.w	41fa <MTPD::loop()+0x722>
    { if (write_get_length_) 
    3da4:	f897 3428 	ldrb.w	r3, [r7, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3da8:	3401      	adds	r4, #1
        write_length_ += len;
    3daa:	2204      	movs	r2, #4
    3dac:	9406      	str	r4, [sp, #24]
    { if (write_get_length_) 
    3dae:	2b00      	cmp	r3, #0
    3db0:	d1f0      	bne.n	3d94 <MTPD::loop()+0x2bc>
    3db2:	4629      	mov	r1, r5
    3db4:	4640      	mov	r0, r8
    3db6:	f7fe faa5 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    3dba:	e7f0      	b.n	3d9e <MTPD::loop()+0x2c6>
            if (p2) 
    3dbc:	f1b8 0f00 	cmp.w	r8, #0
    3dc0:	f000 825e 	beq.w	4280 <MTPD::loop()+0x7a8>
            TRANSMIT(WriteDescriptor());
    3dc4:	f104 0720 	add.w	r7, r4, #32
    3dc8:	f242 0314 	movw	r3, #8212	; 0x2014
    3dcc:	e7ae      	b.n	3d2c <MTPD::loop()+0x254>
    3dce:	bf00      	nop
    3dd0:	20008a6c 	.word	0x20008a6c
    3dd4:	20000b6c 	.word	0x20000b6c
    3dd8:	20000b80 	.word	0x20000b80
    3ddc:	ffff67fe 	.word	0xffff67fe
    3de0:	200151f8 	.word	0x200151f8
    3de4:	20000b7c 	.word	0x20000b7c
            TRANSMIT(GetStorageInfo(p1));
    3de8:	f04f 0800 	mov.w	r8, #0
    3dec:	2301      	movs	r3, #1
    3dee:	4651      	mov	r1, sl
    3df0:	4620      	mov	r0, r4
    3df2:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3df6:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    3dfa:	f7fe fd37 	bl	286c <MTPD::GetStorageInfo(unsigned long)>
    3dfe:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3e02:	220c      	movs	r2, #12
    3e04:	a906      	add	r1, sp, #24
    3e06:	330c      	adds	r3, #12
    3e08:	4620      	mov	r0, r4
    3e0a:	9306      	str	r3, [sp, #24]
    3e0c:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3e10:	f8ad 301e 	strh.w	r3, [sp, #30]
    3e14:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    3e18:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3e1c:	9308      	str	r3, [sp, #32]
    3e1e:	2302      	movs	r3, #2
    3e20:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3e24:	f104 0720 	add.w	r7, r4, #32
    3e28:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3e2c:	f7fe fa6a 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    3e30:	4651      	mov	r1, sl
    3e32:	4620      	mov	r0, r4
    3e34:	f7fe fd1a 	bl	286c <MTPD::GetStorageInfo(unsigned long)>
    3e38:	9b06      	ldr	r3, [sp, #24]
    3e3a:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3e3e:	f1b8 0f00 	cmp.w	r8, #0
    3e42:	f43f af34 	beq.w	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3e46:	223c      	movs	r2, #60	; 0x3c
    3e48:	4641      	mov	r1, r8
    3e4a:	4638      	mov	r0, r7
    3e4c:	f00b fdd0 	bl	f9f0 <usb_mtp_send>
    3e50:	2800      	cmp	r0, #0
    3e52:	ddf8      	ble.n	3e46 <MTPD::loop()+0x36e>
    3e54:	e72b      	b.n	3cae <MTPD::loop()+0x1d6>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    3e56:	f04f 0b00 	mov.w	fp, #0
    3e5a:	2201      	movs	r2, #1
    3e5c:	4651      	mov	r1, sl
    3e5e:	4620      	mov	r0, r4
    3e60:	f887 2428 	strb.w	r2, [r7, #1064]	; 0x428
    3e64:	4642      	mov	r2, r8
    3e66:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    3e6a:	9304      	str	r3, [sp, #16]
    3e6c:	f7ff fc0a 	bl	3684 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    3e70:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
    3e74:	a906      	add	r1, sp, #24
    3e76:	9009      	str	r0, [sp, #36]	; 0x24
    3e78:	4620      	mov	r0, r4
    3e7a:	320c      	adds	r2, #12
    3e7c:	9206      	str	r2, [sp, #24]
    3e7e:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    3e82:	f8ad 201e 	strh.w	r2, [sp, #30]
    3e86:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    3e8a:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    3e8e:	9208      	str	r2, [sp, #32]
    3e90:	2202      	movs	r2, #2
    3e92:	f887 b428 	strb.w	fp, [r7, #1064]	; 0x428
    3e96:	f104 0720 	add.w	r7, r4, #32
    3e9a:	f8ad 201c 	strh.w	r2, [sp, #28]
    { if (write_get_length_) 
    3e9e:	2220      	movs	r2, #32
    3ea0:	f7fe fa30 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    3ea4:	9b04      	ldr	r3, [sp, #16]
    3ea6:	4642      	mov	r2, r8
    3ea8:	4651      	mov	r1, sl
    3eaa:	4620      	mov	r0, r4
    3eac:	f7ff fbea 	bl	3684 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    3eb0:	9b06      	ldr	r3, [sp, #24]
    3eb2:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3eb6:	f1b8 0f00 	cmp.w	r8, #0
    3eba:	f43f aef8 	beq.w	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3ebe:	223c      	movs	r2, #60	; 0x3c
    3ec0:	4641      	mov	r1, r8
    3ec2:	4638      	mov	r0, r7
    3ec4:	f00b fd94 	bl	f9f0 <usb_mtp_send>
    3ec8:	2800      	cmp	r0, #0
    3eca:	ddf8      	ble.n	3ebe <MTPD::loop()+0x3e6>
    3ecc:	e6ef      	b.n	3cae <MTPD::loop()+0x1d6>
      return storage_->copy(handle,store1,newHandle);
    3ece:	f108 32ff 	add.w	r2, r8, #4294967295
    3ed2:	4651      	mov	r1, sl
    3ed4:	6820      	ldr	r0, [r4, #0]
            TRANSMIT(WriteDescriptor());
    3ed6:	f104 0720 	add.w	r7, r4, #32
      return storage_->copy(handle,store1,newHandle);
    3eda:	f002 fdc9 	bl	6a70 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    3ede:	2800      	cmp	r0, #0
    3ee0:	f040 81c3 	bne.w	426a <MTPD::loop()+0x792>
            TRANSMIT(WriteDescriptor());
    3ee4:	f242 0305 	movw	r3, #8197	; 0x2005
    3ee8:	260c      	movs	r6, #12
    3eea:	e71f      	b.n	3d2c <MTPD::loop()+0x254>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3eec:	4627      	mov	r7, r4
    3eee:	f108 32ff 	add.w	r2, r8, #4294967295
    3ef2:	4651      	mov	r1, sl
              break;
    3ef4:	260c      	movs	r6, #12
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3ef6:	f857 0b20 	ldr.w	r0, [r7], #32
    3efa:	f002 ffad 	bl	6e58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>
    3efe:	f242 0301 	movw	r3, #8193	; 0x2001
    3f02:	f242 0205 	movw	r2, #8197	; 0x2005
    3f06:	2800      	cmp	r0, #0
    3f08:	bf08      	it	eq
    3f0a:	4613      	moveq	r3, r2
              break;
    3f0c:	e70e      	b.n	3d2c <MTPD::loop()+0x254>
      storage_->ResetIndex();
    3f0e:	4627      	mov	r7, r4
      sessionID_ = id;
    3f10:	4bd8      	ldr	r3, [pc, #864]	; (4274 <MTPD::loop()+0x79c>)
      storage_->ResetIndex();
    3f12:	f857 0b20 	ldr.w	r0, [r7], #32
      sessionID_ = id;
    3f16:	f8c3 a000 	str.w	sl, [r3]
      storage_->ResetIndex();
    3f1a:	f001 fe1b 	bl	5b54 <MTPStorage_SD::ResetIndex()>
            CONTAINER->op=return_code;
    3f1e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    }
    3f22:	e703      	b.n	3d2c <MTPD::loop()+0x254>
            TRANSMIT(WriteDescriptor());
    3f24:	f04f 0800 	mov.w	r8, #0
    3f28:	2301      	movs	r3, #1
    3f2a:	4620      	mov	r0, r4
    3f2c:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3f30:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    3f34:	f7fe facc 	bl	24d0 <MTPD::WriteDescriptor()>
    3f38:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3f3c:	220c      	movs	r2, #12
    3f3e:	a906      	add	r1, sp, #24
    3f40:	330c      	adds	r3, #12
    3f42:	4620      	mov	r0, r4
    3f44:	9306      	str	r3, [sp, #24]
    3f46:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3f4a:	f8ad 301e 	strh.w	r3, [sp, #30]
    3f4e:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    3f52:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3f56:	9308      	str	r3, [sp, #32]
    3f58:	2302      	movs	r3, #2
    3f5a:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3f5e:	f104 0720 	add.w	r7, r4, #32
    3f62:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3f66:	f7fe f9cd 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    3f6a:	4620      	mov	r0, r4
    3f6c:	f7fe fab0 	bl	24d0 <MTPD::WriteDescriptor()>
    3f70:	9b06      	ldr	r3, [sp, #24]
    3f72:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3f76:	f1b8 0f00 	cmp.w	r8, #0
    3f7a:	f43f ae98 	beq.w	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3f7e:	223c      	movs	r2, #60	; 0x3c
    3f80:	4641      	mov	r1, r8
    3f82:	4638      	mov	r0, r7
    3f84:	f00b fd34 	bl	f9f0 <usb_mtp_send>
    3f88:	2800      	cmp	r0, #0
    3f8a:	ddf8      	ble.n	3f7e <MTPD::loop()+0x4a6>
    3f8c:	e68f      	b.n	3cae <MTPD::loop()+0x1d6>
              TRANSMIT(GetDevicePropValue(p1));
    3f8e:	2301      	movs	r3, #1
    3f90:	f04f 0800 	mov.w	r8, #0
    3f94:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    switch (prop) {
    3f98:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropValue(p1));
    3f9c:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    switch (prop) {
    3fa0:	459a      	cmp	sl, r3
    3fa2:	f000 8183 	beq.w	42ac <MTPD::loop()+0x7d4>
              TRANSMIT(GetDevicePropValue(p1));
    3fa6:	220c      	movs	r2, #12
    3fa8:	4bb3      	ldr	r3, [pc, #716]	; (4278 <MTPD::loop()+0x7a0>)
    3faa:	a906      	add	r1, sp, #24
    3fac:	4620      	mov	r0, r4
    3fae:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3fb2:	f8cd 9020 	str.w	r9, [sp, #32]
    3fb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    { if (write_get_length_) 
    3fba:	f7fe f9a3 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    3fbe:	9b06      	ldr	r3, [sp, #24]
    3fc0:	f104 0720 	add.w	r7, r4, #32
    3fc4:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3fc8:	f1b8 0f00 	cmp.w	r8, #0
    3fcc:	f43f ae6f 	beq.w	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3fd0:	223c      	movs	r2, #60	; 0x3c
    3fd2:	4641      	mov	r1, r8
    3fd4:	4638      	mov	r0, r7
    3fd6:	f00b fd0b 	bl	f9f0 <usb_mtp_send>
    3fda:	2800      	cmp	r0, #0
    3fdc:	ddf8      	ble.n	3fd0 <MTPD::loop()+0x4f8>
    3fde:	e666      	b.n	3cae <MTPD::loop()+0x1d6>
              TRANSMIT(GetDevicePropDesc(p1));
    3fe0:	2301      	movs	r3, #1
    3fe2:	f04f 0800 	mov.w	r8, #0
    3fe6:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    switch (prop) {
    3fea:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropDesc(p1));
    3fee:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    switch (prop) {
    3ff2:	459a      	cmp	sl, r3
    3ff4:	f000 817a 	beq.w	42ec <MTPD::loop()+0x814>
              TRANSMIT(GetDevicePropDesc(p1));
    3ff8:	220c      	movs	r2, #12
    3ffa:	4ba0      	ldr	r3, [pc, #640]	; (427c <MTPD::loop()+0x7a4>)
    3ffc:	a906      	add	r1, sp, #24
    3ffe:	4620      	mov	r0, r4
    4000:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    4004:	f8cd 9020 	str.w	r9, [sp, #32]
    4008:	e9cd 2306 	strd	r2, r3, [sp, #24]
    { if (write_get_length_) 
    400c:	f7fe f97a 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    4010:	9b06      	ldr	r3, [sp, #24]
    4012:	f104 0720 	add.w	r7, r4, #32
    4016:	f3c3 0808 	ubfx	r8, r3, #0, #9
    401a:	f1b8 0f00 	cmp.w	r8, #0
    401e:	f43f ae46 	beq.w	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4022:	223c      	movs	r2, #60	; 0x3c
    4024:	4641      	mov	r1, r8
    4026:	4638      	mov	r0, r7
    4028:	f00b fce2 	bl	f9f0 <usb_mtp_send>
    402c:	2800      	cmp	r0, #0
    402e:	ddf8      	ble.n	4022 <MTPD::loop()+0x54a>
    4030:	e63d      	b.n	3cae <MTPD::loop()+0x1d6>
              if (p2) {
    4032:	f1b8 0f00 	cmp.w	r8, #0
    4036:	f47f aec5 	bne.w	3dc4 <MTPD::loop()+0x2ec>
                if (!storage_->DeleteObject(p1)) {
    403a:	4651      	mov	r1, sl
    403c:	6820      	ldr	r0, [r4, #0]
    403e:	f002 fa11 	bl	6464 <MTPStorage_SD::DeleteObject(unsigned long)>
    4042:	2800      	cmp	r0, #0
    4044:	f47f ae8a 	bne.w	3d5c <MTPD::loop()+0x284>
            TRANSMIT(WriteDescriptor());
    4048:	f104 0720 	add.w	r7, r4, #32
    404c:	f242 0312 	movw	r3, #8210	; 0x2012
    4050:	e66c      	b.n	3d2c <MTPD::loop()+0x254>
              if(!SendObject()) return_code = 0x2005;
    4052:	4620      	mov	r0, r4
    4054:	f7ff fcae 	bl	39b4 <MTPD::SendObject()>
    4058:	2800      	cmp	r0, #0
    405a:	f040 8100 	bne.w	425e <MTPD::loop()+0x786>
            TRANSMIT(WriteDescriptor());
    405e:	f104 0720 	add.w	r7, r4, #32
    4062:	f242 0305 	movw	r3, #8197	; 0x2005
    4066:	260c      	movs	r6, #12
    4068:	e660      	b.n	3d2c <MTPD::loop()+0x254>
              p3 = SendObjectInfo(p1, // storage
    406a:	4642      	mov	r2, r8
    406c:	4651      	mov	r1, sl
    406e:	4620      	mov	r0, r4
            TRANSMIT(WriteDescriptor());
    4070:	f104 0720 	add.w	r7, r4, #32
              p3 = SendObjectInfo(p1, // storage
    4074:	f7ff fbf4 	bl	3860 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              break;
    4078:	2618      	movs	r6, #24
            CONTAINER->op=return_code;
    407a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
              CONTAINER->params[2]=p3;
    407e:	e9c4 808c 	strd	r8, r0, [r4, #560]	; 0x230
              break;
    4082:	e653      	b.n	3d2c <MTPD::loop()+0x254>
            TRANSMIT(GetObjectInfo(p1));
    4084:	f04f 0800 	mov.w	r8, #0
    4088:	2301      	movs	r3, #1
    408a:	4651      	mov	r1, sl
    408c:	4620      	mov	r0, r4
    408e:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    4092:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    4096:	f7fe fd25 	bl	2ae4 <MTPD::GetObjectInfo(unsigned long)>
    409a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    409e:	220c      	movs	r2, #12
    40a0:	a906      	add	r1, sp, #24
    40a2:	330c      	adds	r3, #12
    40a4:	4620      	mov	r0, r4
    40a6:	9306      	str	r3, [sp, #24]
    40a8:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    40ac:	f8ad 301e 	strh.w	r3, [sp, #30]
    40b0:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    40b4:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    40b8:	9308      	str	r3, [sp, #32]
    40ba:	2302      	movs	r3, #2
    40bc:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    40c0:	f104 0720 	add.w	r7, r4, #32
    40c4:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    40c8:	f7fe f91c 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    40cc:	4651      	mov	r1, sl
    40ce:	4620      	mov	r0, r4
    40d0:	f7fe fd08 	bl	2ae4 <MTPD::GetObjectInfo(unsigned long)>
    40d4:	9b06      	ldr	r3, [sp, #24]
    40d6:	f3c3 0808 	ubfx	r8, r3, #0, #9
    40da:	f1b8 0f00 	cmp.w	r8, #0
    40de:	f43f ade6 	beq.w	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    40e2:	223c      	movs	r2, #60	; 0x3c
    40e4:	4641      	mov	r1, r8
    40e6:	4638      	mov	r0, r7
    40e8:	f00b fc82 	bl	f9f0 <usb_mtp_send>
    40ec:	2800      	cmp	r0, #0
    40ee:	ddf8      	ble.n	40e2 <MTPD::loop()+0x60a>
    40f0:	e5dd      	b.n	3cae <MTPD::loop()+0x1d6>
            if (p2) 
    40f2:	f1b8 0f00 	cmp.w	r8, #0
    40f6:	f47f ae65 	bne.w	3dc4 <MTPD::loop()+0x2ec>
              TRANSMIT(GetObjectHandles(p1, p3));
    40fa:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    40fe:	2201      	movs	r2, #1
  { uint32_t store = Storage2Store(storage);
    4100:	f10a 38ff 	add.w	r8, sl, #4294967295
    storage_->StartGetObjectHandles(store, parent);
    4104:	6820      	ldr	r0, [r4, #0]
              TRANSMIT(GetObjectHandles(p1, p3));
    4106:	f887 2428 	strb.w	r2, [r7, #1064]	; 0x428
    storage_->StartGetObjectHandles(store, parent);
    410a:	461a      	mov	r2, r3
    410c:	4641      	mov	r1, r8
    410e:	9305      	str	r3, [sp, #20]
    4110:	f001 ff80 	bl	6014 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
    while (storage_->GetNextObjectHandle(store)) num++;
    4114:	9b05      	ldr	r3, [sp, #20]
    4116:	9704      	str	r7, [sp, #16]
    4118:	461f      	mov	r7, r3
    411a:	e001      	b.n	4120 <MTPD::loop()+0x648>
    411c:	f10b 0b01 	add.w	fp, fp, #1
    4120:	4641      	mov	r1, r8
    4122:	6820      	ldr	r0, [r4, #0]
    4124:	f001 ffba 	bl	609c <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    4128:	2800      	cmp	r0, #0
    412a:	d1f7      	bne.n	411c <MTPD::loop()+0x644>
      write_length_ *= 4;
    412c:	ea4f 028b 	mov.w	r2, fp, lsl #2
    4130:	9705      	str	r7, [sp, #20]
    4132:	9f04      	ldr	r7, [sp, #16]
    4134:	a906      	add	r1, sp, #24
              TRANSMIT(GetObjectHandles(p1, p3));
    4136:	3210      	adds	r2, #16
    4138:	9206      	str	r2, [sp, #24]
    413a:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    413e:	f8ad 201e 	strh.w	r2, [sp, #30]
    4142:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    4146:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
    414a:	9208      	str	r2, [sp, #32]
    414c:	2202      	movs	r2, #2
    414e:	f887 0428 	strb.w	r0, [r7, #1064]	; 0x428
    4152:	4620      	mov	r0, r4
    4154:	f8ad 201c 	strh.w	r2, [sp, #28]
    { if (write_get_length_) 
    4158:	220c      	movs	r2, #12
    415a:	f7fe f8d3 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    415e:	9b05      	ldr	r3, [sp, #20]
    4160:	4651      	mov	r1, sl
    4162:	4620      	mov	r0, r4
    4164:	461a      	mov	r2, r3
    4166:	f104 0720 	add.w	r7, r4, #32
    416a:	f7fe fc65 	bl	2a38 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    416e:	9b06      	ldr	r3, [sp, #24]
    4170:	f3c3 0808 	ubfx	r8, r3, #0, #9
    4174:	f1b8 0f00 	cmp.w	r8, #0
    4178:	f43f ad99 	beq.w	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    417c:	223c      	movs	r2, #60	; 0x3c
    417e:	4641      	mov	r1, r8
    4180:	4638      	mov	r0, r7
    4182:	f00b fc35 	bl	f9f0 <usb_mtp_send>
    4186:	2800      	cmp	r0, #0
    4188:	ddf8      	ble.n	417c <MTPD::loop()+0x6a4>
    418a:	e590      	b.n	3cae <MTPD::loop()+0x1d6>
            TRANSMIT(GetObject(p1));
    418c:	f04f 0800 	mov.w	r8, #0
    4190:	2301      	movs	r3, #1
    4192:	4651      	mov	r1, sl
    4194:	4620      	mov	r0, r4
    4196:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    419a:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    419e:	f7ff f9f5 	bl	358c <MTPD::GetObject(unsigned long)>
    41a2:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    41a6:	220c      	movs	r2, #12
    41a8:	a906      	add	r1, sp, #24
    41aa:	330c      	adds	r3, #12
    41ac:	4620      	mov	r0, r4
    41ae:	9306      	str	r3, [sp, #24]
    41b0:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    41b4:	f8ad 301e 	strh.w	r3, [sp, #30]
    41b8:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    41bc:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    41c0:	9308      	str	r3, [sp, #32]
    41c2:	2302      	movs	r3, #2
    41c4:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    41c8:	f104 0720 	add.w	r7, r4, #32
    41cc:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    41d0:	f7fe f898 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    41d4:	4651      	mov	r1, sl
    41d6:	4620      	mov	r0, r4
    41d8:	f7ff f9d8 	bl	358c <MTPD::GetObject(unsigned long)>
    41dc:	9b06      	ldr	r3, [sp, #24]
    41de:	f3c3 0808 	ubfx	r8, r3, #0, #9
    41e2:	f1b8 0f00 	cmp.w	r8, #0
    41e6:	f43f ad62 	beq.w	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    41ea:	223c      	movs	r2, #60	; 0x3c
    41ec:	4641      	mov	r1, r8
    41ee:	4638      	mov	r0, r7
    41f0:	f00b fbfe 	bl	f9f0 <usb_mtp_send>
    41f4:	2800      	cmp	r0, #0
    41f6:	ddf8      	ble.n	41ea <MTPD::loop()+0x712>
    41f8:	e559      	b.n	3cae <MTPD::loop()+0x1d6>
    41fa:	4629      	mov	r1, r5
    41fc:	4644      	mov	r4, r8
    41fe:	ee18 5a10 	vmov	r5, s16
              TRANSMIT(WriteStorageIDs());
    4202:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    4206:	4620      	mov	r0, r4
    4208:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    420c:	330c      	adds	r3, #12
    420e:	f8ad 201e 	strh.w	r2, [sp, #30]
    4212:	9306      	str	r3, [sp, #24]
    4214:	2300      	movs	r3, #0
    4216:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    421a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    421e:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    4222:	2302      	movs	r3, #2
    4224:	9208      	str	r2, [sp, #32]
    4226:	220c      	movs	r2, #12
    4228:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    422c:	f7fe f86a 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    4230:	4620      	mov	r0, r4
    4232:	f104 0720 	add.w	r7, r4, #32
    4236:	f7fe fae9 	bl	280c <MTPD::WriteStorageIDs()>
    423a:	9b06      	ldr	r3, [sp, #24]
    423c:	f3c3 0808 	ubfx	r8, r3, #0, #9
    4240:	f1b8 0f00 	cmp.w	r8, #0
    4244:	f43f ad33 	beq.w	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4248:	223c      	movs	r2, #60	; 0x3c
    424a:	4641      	mov	r1, r8
    424c:	4638      	mov	r0, r7
    424e:	f00b fbcf 	bl	f9f0 <usb_mtp_send>
    4252:	2800      	cmp	r0, #0
    4254:	ddf8      	ble.n	4248 <MTPD::loop()+0x770>
    4256:	e52a      	b.n	3cae <MTPD::loop()+0x1d6>
    4258:	f242 0305 	movw	r3, #8197	; 0x2005
              break;
    425c:	e580      	b.n	3d60 <MTPD::loop()+0x288>
            CONTAINER->op=return_code;
    425e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            TRANSMIT(WriteDescriptor());
    4262:	f104 0720 	add.w	r7, r4, #32
            CONTAINER->op=return_code;
    4266:	260c      	movs	r6, #12
    4268:	e560      	b.n	3d2c <MTPD::loop()+0x254>
            TRANSMIT(WriteDescriptor());
    426a:	4682      	mov	sl, r0
    426c:	f242 0301 	movw	r3, #8193	; 0x2001
    4270:	2610      	movs	r6, #16
    4272:	e55b      	b.n	3d2c <MTPD::loop()+0x254>
    4274:	20015e64 	.word	0x20015e64
    4278:	10150002 	.word	0x10150002
    427c:	10140002 	.word	0x10140002
  { uint32_t store = Storage2Store(storage);
    4280:	f10a 3aff 	add.w	sl, sl, #4294967295
    storage_->StartGetObjectHandles(store, parent);
    4284:	461a      	mov	r2, r3
    4286:	6820      	ldr	r0, [r4, #0]
    4288:	4651      	mov	r1, sl
    428a:	f001 fec3 	bl	6014 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
    while (storage_->GetNextObjectHandle(store)) num++;
    428e:	e001      	b.n	4294 <MTPD::loop()+0x7bc>
    4290:	f10b 0b01 	add.w	fp, fp, #1
    4294:	4651      	mov	r1, sl
    4296:	6820      	ldr	r0, [r4, #0]
    4298:	f001 ff00 	bl	609c <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    429c:	2800      	cmp	r0, #0
    429e:	d1f7      	bne.n	4290 <MTPD::loop()+0x7b8>
            CONTAINER->op=return_code;
    42a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            CONTAINER->params[0]=p1;
    42a4:	46da      	mov	sl, fp
            TRANSMIT(WriteDescriptor());
    42a6:	f104 0720 	add.w	r7, r4, #32
    42aa:	e53f      	b.n	3d2c <MTPD::loop()+0x254>
    if (*str) 
    42ac:	4620      	mov	r0, r4
    42ae:	493b      	ldr	r1, [pc, #236]	; (439c <MTPD::loop()+0x8c4>)
    42b0:	f7fe f866 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    42b4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    42b8:	a906      	add	r1, sp, #24
    42ba:	4620      	mov	r0, r4
    42bc:	330c      	adds	r3, #12
    42be:	220c      	movs	r2, #12
    42c0:	9306      	str	r3, [sp, #24]
    42c2:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    42c6:	f8ad 301e 	strh.w	r3, [sp, #30]
    42ca:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    42ce:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    42d2:	9308      	str	r3, [sp, #32]
    42d4:	2302      	movs	r3, #2
    42d6:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    42da:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    42de:	f7fe f811 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    if (*str) 
    42e2:	492e      	ldr	r1, [pc, #184]	; (439c <MTPD::loop()+0x8c4>)
    42e4:	4620      	mov	r0, r4
    42e6:	f7fe f84b 	bl	2380 <MTPD::writestring(char const*) [clone .part.0]>
  }
    42ea:	e668      	b.n	3fbe <MTPD::loop()+0x4e6>
    42ec:	4620      	mov	r0, r4
    42ee:	f7fe f895 	bl	241c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    42f2:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    42f6:	4620      	mov	r0, r4
    42f8:	220c      	movs	r2, #12
    42fa:	330c      	adds	r3, #12
    42fc:	a906      	add	r1, sp, #24
    42fe:	9306      	str	r3, [sp, #24]
    4300:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    4304:	f8ad 301e 	strh.w	r3, [sp, #30]
    4308:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    430c:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    4310:	9308      	str	r3, [sp, #32]
    4312:	2302      	movs	r3, #2
    4314:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    4318:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    431c:	f7fd fff2 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
    switch (prop) {
    4320:	4620      	mov	r0, r4
    4322:	f7fe f87b 	bl	241c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
    4326:	e673      	b.n	4010 <MTPD::loop()+0x538>
    4328:	a906      	add	r1, sp, #24
    432a:	e76a      	b.n	4202 <MTPD::loop()+0x72a>
              TRANSMIT(getObjectPropsSupported(p1));
    432c:	f04f 0800 	mov.w	r8, #0
    4330:	2301      	movs	r3, #1
    4332:	4651      	mov	r1, sl
    4334:	4620      	mov	r0, r4
    4336:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    433a:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    433e:	f7fe fd65 	bl	2e0c <MTPD::getObjectPropsSupported(unsigned long)>
    4342:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    4346:	220c      	movs	r2, #12
    4348:	a906      	add	r1, sp, #24
    434a:	330c      	adds	r3, #12
    434c:	4620      	mov	r0, r4
    434e:	9306      	str	r3, [sp, #24]
    4350:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    4354:	f8ad 301e 	strh.w	r3, [sp, #30]
    4358:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    435c:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    4360:	9308      	str	r3, [sp, #32]
    4362:	2302      	movs	r3, #2
    4364:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    4368:	f104 0720 	add.w	r7, r4, #32
    436c:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    4370:	f7fd ffc8 	bl	2304 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    4374:	4651      	mov	r1, sl
    4376:	4620      	mov	r0, r4
    4378:	f7fe fd48 	bl	2e0c <MTPD::getObjectPropsSupported(unsigned long)>
    437c:	9b06      	ldr	r3, [sp, #24]
    437e:	f3c3 0808 	ubfx	r8, r3, #0, #9
    4382:	f1b8 0f00 	cmp.w	r8, #0
    4386:	f43f ac92 	beq.w	3cae <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    438a:	223c      	movs	r2, #60	; 0x3c
    438c:	4641      	mov	r1, r8
    438e:	4638      	mov	r0, r7
    4390:	f00b fb2e 	bl	f9f0 <usb_mtp_send>
    4394:	2800      	cmp	r0, #0
    4396:	ddf8      	ble.n	438a <MTPD::loop()+0x8b2>
    4398:	e489      	b.n	3cae <MTPD::loop()+0x1d6>
    439a:	bf00      	nop
    439c:	20000b64 	.word	0x20000b64

000043a0 <usb_init_events>:
    {
    43a0:	b510      	push	{r4, lr}
        usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    43a2:	4b0c      	ldr	r3, [pc, #48]	; (43d4 <usb_init_events+0x34>)
    43a4:	2200      	movs	r2, #0
        usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
    43a6:	4c0c      	ldr	r4, [pc, #48]	; (43d8 <usb_init_events+0x38>)
        usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    43a8:	2120      	movs	r1, #32
    43aa:	2005      	movs	r0, #5
    43ac:	f00b f94a 	bl	f644 <usb_config_tx>
        usb_config_rx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, rxEvent_event);
    43b0:	4b0a      	ldr	r3, [pc, #40]	; (43dc <usb_init_events+0x3c>)
    43b2:	2200      	movs	r2, #0
    43b4:	2120      	movs	r1, #32
    43b6:	2005      	movs	r0, #5
    43b8:	f00b f912 	bl	f5e0 <usb_config_rx>
        usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
    43bc:	2300      	movs	r3, #0
    43be:	2220      	movs	r2, #32
    43c0:	4620      	mov	r0, r4
    43c2:	4907      	ldr	r1, [pc, #28]	; (43e0 <usb_init_events+0x40>)
    43c4:	f00b f970 	bl	f6a8 <usb_prepare_transfer>
        usb_receive(MTP_EVENT_ENDPOINT, rx_event_transfer + 0);
    43c8:	4621      	mov	r1, r4
    43ca:	2005      	movs	r0, #5
    43cc:	f00b f998 	bl	f700 <usb_receive>
    }
    43d0:	2001      	movs	r0, #1
    43d2:	bd10      	pop	{r4, pc}
    43d4:	000022e5 	.word	0x000022e5
    43d8:	20009ae0 	.word	0x20009ae0
    43dc:	000022f5 	.word	0x000022f5
    43e0:	20009ac0 	.word	0x20009ac0

000043e4 <menuGetLine()>:
{
    43e4:	b538      	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    43e6:	f00b fe2b 	bl	10040 <usb_serial_available>
  while(!Serial.available()) continue;
    43ea:	2800      	cmp	r0, #0
    43ec:	d0fb      	beq.n	43e6 <menuGetLine()+0x2>
  count = Serial.readBytesUntil('\r',buffer,40);
    43ee:	4c0d      	ldr	r4, [pc, #52]	; (4424 <menuGetLine()+0x40>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    43f0:	f241 3188 	movw	r1, #5000	; 0x1388
    43f4:	4d0c      	ldr	r5, [pc, #48]	; (4428 <menuGetLine()+0x44>)
    43f6:	2328      	movs	r3, #40	; 0x28
    43f8:	4622      	mov	r2, r4
    43fa:	60a9      	str	r1, [r5, #8]
    43fc:	4628      	mov	r0, r5
    43fe:	210d      	movs	r1, #13
    4400:	f009 fc48 	bl	dc94 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    4404:	2200      	movs	r2, #0
  count = Serial.readBytesUntil('\r',buffer,40);
    4406:	4603      	mov	r3, r0
							  return write((const uint8_t *)str, strlen(str)); }
    4408:	4620      	mov	r0, r4
  buffer[count]=0;
    440a:	54e2      	strb	r2, [r4, r3]
    440c:	f00e fd78 	bl	12f00 <strlen>
    4410:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4412:	4620      	mov	r0, r4
    4414:	f00b fe7e 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4418:	4628      	mov	r0, r5
    441a:	f009 faf5 	bl	da08 <Print::println()>
}
    441e:	4620      	mov	r0, r4
    4420:	bd38      	pop	{r3, r4, r5, pc}
    4422:	bf00      	nop
    4424:	200151d0 	.word	0x200151d0
    4428:	20008a6c 	.word	0x20008a6c

0000442c <printPar()>:
{
    442c:	b510      	push	{r4, lr}
    442e:	210c      	movs	r1, #12
    4430:	4862      	ldr	r0, [pc, #392]	; (45bc <printPar()+0x190>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    4432:	4c63      	ldr	r4, [pc, #396]	; (45c0 <printPar()+0x194>)
    4434:	f00b fe6e 	bl	10114 <usb_serial_write>
      Serial.print("SerNum(h) = "); Serial.println(SerNum,HEX);
    4438:	4962      	ldr	r1, [pc, #392]	; (45c4 <printPar()+0x198>)
    443a:	2210      	movs	r2, #16
    443c:	2300      	movs	r3, #0
    443e:	4620      	mov	r0, r4
    4440:	6809      	ldr	r1, [r1, #0]
    4442:	f009 fb0b 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    4446:	4620      	mov	r0, r4
    4448:	f009 fade 	bl	da08 <Print::println()>
    444c:	210c      	movs	r1, #12
    444e:	485e      	ldr	r0, [pc, #376]	; (45c8 <printPar()+0x19c>)
    4450:	f00b fe60 	bl	10114 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    4454:	4b5d      	ldr	r3, [pc, #372]	; (45cc <printPar()+0x1a0>)
	size_t println(long n)				{ return print(n) + println(); }
    4456:	4620      	mov	r0, r4
    4458:	6819      	ldr	r1, [r3, #0]
    445a:	f009 fac9 	bl	d9f0 <Print::print(long)>
    445e:	4620      	mov	r0, r4
    4460:	f009 fad2 	bl	da08 <Print::println()>
    4464:	210c      	movs	r1, #12
    4466:	485a      	ldr	r0, [pc, #360]	; (45d0 <printPar()+0x1a4>)
    4468:	f00b fe54 	bl	10114 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    446c:	4b59      	ldr	r3, [pc, #356]	; (45d4 <printPar()+0x1a8>)
	size_t print(int n)				{ return print((long)n); }
    446e:	4620      	mov	r0, r4
    4470:	8819      	ldrh	r1, [r3, #0]
    4472:	b209      	sxth	r1, r1
    4474:	f009 fabc 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4478:	4620      	mov	r0, r4
    447a:	f009 fac5 	bl	da08 <Print::println()>
    447e:	210c      	movs	r1, #12
    4480:	4855      	ldr	r0, [pc, #340]	; (45d8 <printPar()+0x1ac>)
    4482:	f00b fe47 	bl	10114 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    4486:	4b55      	ldr	r3, [pc, #340]	; (45dc <printPar()+0x1b0>)
	size_t print(int n)				{ return print((long)n); }
    4488:	4620      	mov	r0, r4
    448a:	8819      	ldrh	r1, [r3, #0]
    448c:	b209      	sxth	r1, r1
    448e:	f009 faaf 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4492:	4620      	mov	r0, r4
    4494:	f009 fab8 	bl	da08 <Print::println()>
    4498:	210c      	movs	r1, #12
    449a:	4851      	ldr	r0, [pc, #324]	; (45e0 <printPar()+0x1b4>)
    449c:	f00b fe3a 	bl	10114 <usb_serial_write>
      Serial.print("again (g) = "); Serial.println(again);
    44a0:	4b50      	ldr	r3, [pc, #320]	; (45e4 <printPar()+0x1b8>)
	size_t print(int n)				{ return print((long)n); }
    44a2:	4620      	mov	r0, r4
    44a4:	8819      	ldrh	r1, [r3, #0]
    44a6:	b209      	sxth	r1, r1
    44a8:	f009 faa2 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44ac:	4620      	mov	r0, r4
    44ae:	f009 faab 	bl	da08 <Print::println()>
    44b2:	210c      	movs	r1, #12
    44b4:	484c      	ldr	r0, [pc, #304]	; (45e8 <printPar()+0x1bc>)
    44b6:	f00b fe2d 	bl	10114 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    44ba:	4b4c      	ldr	r3, [pc, #304]	; (45ec <printPar()+0x1c0>)
	size_t print(int n)				{ return print((long)n); }
    44bc:	4620      	mov	r0, r4
    44be:	8819      	ldrh	r1, [r3, #0]
    44c0:	b289      	uxth	r1, r1
    44c2:	f009 fa95 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44c6:	4620      	mov	r0, r4
    44c8:	f009 fa9e 	bl	da08 <Print::println()>
    44cc:	210c      	movs	r1, #12
    44ce:	4848      	ldr	r0, [pc, #288]	; (45f0 <printPar()+0x1c4>)
    44d0:	f00b fe20 	bl	10114 <usb_serial_write>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    44d4:	4b47      	ldr	r3, [pc, #284]	; (45f4 <printPar()+0x1c8>)
	size_t print(int n)				{ return print((long)n); }
    44d6:	4620      	mov	r0, r4
    44d8:	8819      	ldrh	r1, [r3, #0]
    44da:	b289      	uxth	r1, r1
    44dc:	f009 fa88 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44e0:	4620      	mov	r0, r4
    44e2:	f009 fa91 	bl	da08 <Print::println()>
    44e6:	210c      	movs	r1, #12
    44e8:	4843      	ldr	r0, [pc, #268]	; (45f8 <printPar()+0x1cc>)
    44ea:	f00b fe13 	bl	10114 <usb_serial_write>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    44ee:	4b43      	ldr	r3, [pc, #268]	; (45fc <printPar()+0x1d0>)
	size_t print(int n)				{ return print((long)n); }
    44f0:	4620      	mov	r0, r4
    44f2:	8819      	ldrh	r1, [r3, #0]
    44f4:	b289      	uxth	r1, r1
    44f6:	f009 fa7b 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44fa:	4620      	mov	r0, r4
    44fc:	f009 fa84 	bl	da08 <Print::println()>
    4500:	210c      	movs	r1, #12
    4502:	483f      	ldr	r0, [pc, #252]	; (4600 <printPar()+0x1d4>)
    4504:	f00b fe06 	bl	10114 <usb_serial_write>
      Serial.print("h_1   (1) = "); Serial.println(h_1);
    4508:	4b3e      	ldr	r3, [pc, #248]	; (4604 <printPar()+0x1d8>)
	size_t print(int n)				{ return print((long)n); }
    450a:	4620      	mov	r0, r4
    450c:	8819      	ldrh	r1, [r3, #0]
    450e:	b289      	uxth	r1, r1
    4510:	f009 fa6e 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4514:	4620      	mov	r0, r4
    4516:	f009 fa77 	bl	da08 <Print::println()>
    451a:	210c      	movs	r1, #12
    451c:	483a      	ldr	r0, [pc, #232]	; (4608 <printPar()+0x1dc>)
    451e:	f00b fdf9 	bl	10114 <usb_serial_write>
      Serial.print("h_2   (2) = "); Serial.println(h_2);
    4522:	4b3a      	ldr	r3, [pc, #232]	; (460c <printPar()+0x1e0>)
	size_t print(int n)				{ return print((long)n); }
    4524:	4620      	mov	r0, r4
    4526:	8819      	ldrh	r1, [r3, #0]
    4528:	b289      	uxth	r1, r1
    452a:	f009 fa61 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    452e:	4620      	mov	r0, r4
    4530:	f009 fa6a 	bl	da08 <Print::println()>
    4534:	210c      	movs	r1, #12
    4536:	4836      	ldr	r0, [pc, #216]	; (4610 <printPar()+0x1e4>)
    4538:	f00b fdec 	bl	10114 <usb_serial_write>
      Serial.print("h_3   (3) = "); Serial.println(h_3);
    453c:	4b35      	ldr	r3, [pc, #212]	; (4614 <printPar()+0x1e8>)
	size_t print(int n)				{ return print((long)n); }
    453e:	4620      	mov	r0, r4
    4540:	8819      	ldrh	r1, [r3, #0]
    4542:	b289      	uxth	r1, r1
    4544:	f009 fa54 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4548:	4620      	mov	r0, r4
    454a:	f009 fa5d 	bl	da08 <Print::println()>
    454e:	210c      	movs	r1, #12
    4550:	4831      	ldr	r0, [pc, #196]	; (4618 <printPar()+0x1ec>)
    4552:	f00b fddf 	bl	10114 <usb_serial_write>
      Serial.print("h_4   (4) = "); Serial.println(h_4);
    4556:	4b31      	ldr	r3, [pc, #196]	; (461c <printPar()+0x1f0>)
	size_t print(int n)				{ return print((long)n); }
    4558:	4620      	mov	r0, r4
    455a:	8819      	ldrh	r1, [r3, #0]
    455c:	b289      	uxth	r1, r1
    455e:	f009 fa47 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4562:	4620      	mov	r0, r4
    4564:	f009 fa50 	bl	da08 <Print::println()>
    4568:	210c      	movs	r1, #12
    456a:	482d      	ldr	r0, [pc, #180]	; (4620 <printPar()+0x1f4>)
    456c:	f00b fdd2 	bl	10114 <usb_serial_write>
      Serial.print("d_on  (5) = "); Serial.println(d_on);
    4570:	4b2c      	ldr	r3, [pc, #176]	; (4624 <printPar()+0x1f8>)
	size_t print(int n)				{ return print((long)n); }
    4572:	4620      	mov	r0, r4
    4574:	8819      	ldrh	r1, [r3, #0]
    4576:	b289      	uxth	r1, r1
    4578:	f009 fa3a 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    457c:	4620      	mov	r0, r4
    457e:	f009 fa43 	bl	da08 <Print::println()>
    4582:	210c      	movs	r1, #12
    4584:	4828      	ldr	r0, [pc, #160]	; (4628 <printPar()+0x1fc>)
    4586:	f00b fdc5 	bl	10114 <usb_serial_write>
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    458a:	4b28      	ldr	r3, [pc, #160]	; (462c <printPar()+0x200>)
	size_t print(int n)				{ return print((long)n); }
    458c:	4620      	mov	r0, r4
    458e:	8819      	ldrh	r1, [r3, #0]
    4590:	b289      	uxth	r1, r1
    4592:	f009 fa2d 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4596:	4620      	mov	r0, r4
    4598:	f009 fa36 	bl	da08 <Print::println()>
    459c:	210c      	movs	r1, #12
    459e:	4824      	ldr	r0, [pc, #144]	; (4630 <printPar()+0x204>)
    45a0:	f00b fdb8 	bl	10114 <usb_serial_write>
      Serial.print("d_0   (0) = "); Serial.println(d_0);
    45a4:	4b23      	ldr	r3, [pc, #140]	; (4634 <printPar()+0x208>)
	size_t print(int n)				{ return print((long)n); }
    45a6:	4620      	mov	r0, r4
    45a8:	8819      	ldrh	r1, [r3, #0]
    45aa:	b209      	sxth	r1, r1
    45ac:	f009 fa20 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    45b0:	4620      	mov	r0, r4
}
    45b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45b6:	f009 ba27 	b.w	da08 <Print::println()>
    45ba:	bf00      	nop
    45bc:	200006f0 	.word	0x200006f0
    45c0:	20008a6c 	.word	0x20008a6c
    45c4:	2000b208 	.word	0x2000b208
    45c8:	20000700 	.word	0x20000700
    45cc:	200093ec 	.word	0x200093ec
    45d0:	20000710 	.word	0x20000710
    45d4:	20016050 	.word	0x20016050
    45d8:	20000720 	.word	0x20000720
    45dc:	2001604a 	.word	0x2001604a
    45e0:	20000730 	.word	0x20000730
    45e4:	20009418 	.word	0x20009418
    45e8:	20000740 	.word	0x20000740
    45ec:	20009422 	.word	0x20009422
    45f0:	20000750 	.word	0x20000750
    45f4:	20009424 	.word	0x20009424
    45f8:	20000760 	.word	0x20000760
    45fc:	20016052 	.word	0x20016052
    4600:	20000770 	.word	0x20000770
    4604:	20016046 	.word	0x20016046
    4608:	20000780 	.word	0x20000780
    460c:	2000941c 	.word	0x2000941c
    4610:	20000790 	.word	0x20000790
    4614:	2000941e 	.word	0x2000941e
    4618:	200007a0 	.word	0x200007a0
    461c:	20009420 	.word	0x20009420
    4620:	200007b0 	.word	0x200007b0
    4624:	2000941a 	.word	0x2000941a
    4628:	200007c0 	.word	0x200007c0
    462c:	20016040 	.word	0x20016040
    4630:	200007d0 	.word	0x200007d0
    4634:	2001603e 	.word	0x2001603e

00004638 <menu3()>:
{   // have '!'
    4638:	b530      	push	{r4, r5, lr}
    463a:	b089      	sub	sp, #36	; 0x24
        virtual int available() { return usb_serial_available(); }
    463c:	f00b fd00 	bl	10040 <usb_serial_available>
    while(!Serial.available()) ;
    4640:	2800      	cmp	r0, #0
    4642:	d0fb      	beq.n	463c <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    4644:	f00b fd40 	bl	100c8 <usb_serial_getchar>
    ch=Serial.read();
    4648:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    464a:	2864      	cmp	r0, #100	; 0x64
    464c:	d04c      	beq.n	46e8 <menu3()+0xb0>
    else if(ch=='t') // set time
    464e:	3830      	subs	r0, #48	; 0x30
    4650:	2847      	cmp	r0, #71	; 0x47
    4652:	d85d      	bhi.n	4710 <menu3()+0xd8>
    4654:	e8df f010 	tbh	[pc, r0, lsl #1]
    4658:	01160120 	.word	0x01160120
    465c:	0102010c 	.word	0x0102010c
    4660:	00ee00f8 	.word	0x00ee00f8
    4664:	005c00e4 	.word	0x005c00e4
    4668:	005c005c 	.word	0x005c005c
    466c:	005c005c 	.word	0x005c005c
    4670:	005c005c 	.word	0x005c005c
    4674:	005c005c 	.word	0x005c005c
    4678:	005c005c 	.word	0x005c005c
    467c:	005c005c 	.word	0x005c005c
    4680:	005c005c 	.word	0x005c005c
    4684:	005c005c 	.word	0x005c005c
    4688:	005c005c 	.word	0x005c005c
    468c:	005c005c 	.word	0x005c005c
    4690:	005c005c 	.word	0x005c005c
    4694:	005c005c 	.word	0x005c005c
    4698:	005c005c 	.word	0x005c005c
    469c:	005c005c 	.word	0x005c005c
    46a0:	005c005c 	.word	0x005c005c
    46a4:	005c005c 	.word	0x005c005c
    46a8:	005c005c 	.word	0x005c005c
    46ac:	005c005c 	.word	0x005c005c
    46b0:	005c005c 	.word	0x005c005c
    46b4:	005c005c 	.word	0x005c005c
    46b8:	00da005c 	.word	0x00da005c
    46bc:	00cc00d6 	.word	0x00cc00d6
    46c0:	005c005c 	.word	0x005c005c
    46c4:	00ad00bd 	.word	0x00ad00bd
    46c8:	005c005c 	.word	0x005c005c
    46cc:	00a9005c 	.word	0x00a9005c
    46d0:	005c005c 	.word	0x005c005c
    46d4:	009600a0 	.word	0x009600a0
    46d8:	005c005c 	.word	0x005c005c
    46dc:	007d008c 	.word	0x007d008c
    46e0:	005c0068 	.word	0x005c0068
    46e4:	005e005c 	.word	0x005e005c
{ char *buffer=menuGetLine();
    46e8:	f7ff fe7c 	bl	43e4 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    46ec:	ad07      	add	r5, sp, #28
    46ee:	f10d 0113 	add.w	r1, sp, #19
    46f2:	ac06      	add	r4, sp, #24
    46f4:	aa05      	add	r2, sp, #20
    46f6:	f10d 0312 	add.w	r3, sp, #18
    46fa:	9400      	str	r4, [sp, #0]
    46fc:	e9cd 1501 	strd	r1, r5, [sp, #4]
    4700:	496a      	ldr	r1, [pc, #424]	; (48ac <menu3()+0x274>)
    4702:	f00d fe8f 	bl	12424 <sscanf>
      rtcSetDate(year,month,day);
    4706:	9805      	ldr	r0, [sp, #20]
    4708:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    470c:	f001 f88e 	bl	582c <rtcSetDate(int, int, int)>
}
    4710:	b009      	add	sp, #36	; 0x24
    4712:	bd30      	pop	{r4, r5, pc}
{ char *buffer=menuGetLine();
    4714:	f7ff fe66 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4718:	aa07      	add	r2, sp, #28
    471a:	4965      	ldr	r1, [pc, #404]	; (48b0 <menu3()+0x278>)
    471c:	f00d fe82 	bl	12424 <sscanf>
    4720:	4b64      	ldr	r3, [pc, #400]	; (48b4 <menu3()+0x27c>)
    4722:	9a07      	ldr	r2, [sp, #28]
    4724:	801a      	strh	r2, [r3, #0]
  return 1;
    4726:	e7f3      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4728:	f7ff fe5c 	bl	43e4 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    472c:	ad07      	add	r5, sp, #28
    472e:	f10d 0113 	add.w	r1, sp, #19
    4732:	ac06      	add	r4, sp, #24
    4734:	aa05      	add	r2, sp, #20
    4736:	f10d 0312 	add.w	r3, sp, #18
    473a:	9400      	str	r4, [sp, #0]
    473c:	e9cd 1501 	strd	r1, r5, [sp, #4]
    4740:	495a      	ldr	r1, [pc, #360]	; (48ac <menu3()+0x274>)
    4742:	f00d fe6f 	bl	12424 <sscanf>
      rtcSetTime(hour,minutes,seconds);
    4746:	9805      	ldr	r0, [sp, #20]
    4748:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    474c:	f001 f886 	bl	585c <rtcSetTime(int, int, int)>
    4750:	e7de      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4752:	f7ff fe47 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4756:	aa07      	add	r2, sp, #28
    4758:	4955      	ldr	r1, [pc, #340]	; (48b0 <menu3()+0x278>)
    475a:	f00d fe63 	bl	12424 <sscanf>
    475e:	4b56      	ldr	r3, [pc, #344]	; (48b8 <menu3()+0x280>)
    4760:	9a07      	ldr	r2, [sp, #28]
    4762:	801a      	strh	r2, [r3, #0]
    else if(ch=='s') { menuGetInt16((int16_t *)&shift); if(shift<0) shift=0; }
    4764:	881a      	ldrh	r2, [r3, #0]
    4766:	0412      	lsls	r2, r2, #16
    4768:	d5d2      	bpl.n	4710 <menu3()+0xd8>
    476a:	2200      	movs	r2, #0
    476c:	801a      	strh	r2, [r3, #0]
    476e:	e7cf      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4770:	f7ff fe38 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4774:	aa07      	add	r2, sp, #28
    4776:	494e      	ldr	r1, [pc, #312]	; (48b0 <menu3()+0x278>)
    4778:	f00d fe54 	bl	12424 <sscanf>
    477c:	4b4f      	ldr	r3, [pc, #316]	; (48bc <menu3()+0x284>)
    477e:	9a07      	ldr	r2, [sp, #28]
    4780:	801a      	strh	r2, [r3, #0]
  return 1;
    4782:	e7c5      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4784:	f7ff fe2e 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4788:	aa07      	add	r2, sp, #28
    478a:	4949      	ldr	r1, [pc, #292]	; (48b0 <menu3()+0x278>)
    478c:	f00d fe4a 	bl	12424 <sscanf>
    4790:	4b4b      	ldr	r3, [pc, #300]	; (48c0 <menu3()+0x288>)
    4792:	9a07      	ldr	r2, [sp, #28]
    4794:	801a      	strh	r2, [r3, #0]
  return 1;
    4796:	e7bb      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4798:	f7ff fe24 	bl	43e4 <menuGetLine()>
  return sscanf(buffer,"%s",txt);
    479c:	4a49      	ldr	r2, [pc, #292]	; (48c4 <menu3()+0x28c>)
    479e:	494a      	ldr	r1, [pc, #296]	; (48c8 <menu3()+0x290>)
}
    47a0:	b009      	add	sp, #36	; 0x24
    47a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return sscanf(buffer,"%s",txt);
    47a6:	f00d be3d 	b.w	12424 <sscanf>
{ char *buffer=menuGetLine();
    47aa:	f7ff fe1b 	bl	43e4 <menuGetLine()>
  return sscanf(buffer,"%s",txt);
    47ae:	4a47      	ldr	r2, [pc, #284]	; (48cc <menu3()+0x294>)
    47b0:	e7f5      	b.n	479e <menu3()+0x166>
{ char *buffer=menuGetLine();
    47b2:	f7ff fe17 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    47b6:	aa07      	add	r2, sp, #28
    47b8:	493d      	ldr	r1, [pc, #244]	; (48b0 <menu3()+0x278>)
    47ba:	f00d fe33 	bl	12424 <sscanf>
    47be:	4b44      	ldr	r3, [pc, #272]	; (48d0 <menu3()+0x298>)
    47c0:	9a07      	ldr	r2, [sp, #28]
    47c2:	801a      	strh	r2, [r3, #0]
    else if(ch=='g') { menuGetInt16((int16_t *)&again); setAGain(again); }
    47c4:	8818      	ldrh	r0, [r3, #0]
    47c6:	b240      	sxtb	r0, r0
}
    47c8:	b009      	add	sp, #36	; 0x24
    47ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    else if(ch=='g') { menuGetInt16((int16_t *)&again); setAGain(again); }
    47ce:	f7fc bc25 	b.w	101c <setAGain(signed char)>
{ char *buffer=menuGetLine();
    47d2:	f7ff fe07 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    47d6:	aa07      	add	r2, sp, #28
    47d8:	4935      	ldr	r1, [pc, #212]	; (48b0 <menu3()+0x278>)
    47da:	f00d fe23 	bl	12424 <sscanf>
    47de:	4b3d      	ldr	r3, [pc, #244]	; (48d4 <menu3()+0x29c>)
    47e0:	9a07      	ldr	r2, [sp, #28]
    47e2:	601a      	str	r2, [r3, #0]
    else if(ch=='f') { menuGetInt32((int32_t *)&fsamp); acqModifyFrequency(fsamp); }
    47e4:	6818      	ldr	r0, [r3, #0]
}
    47e6:	b009      	add	sp, #36	; 0x24
    47e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    else if(ch=='f') { menuGetInt32((int32_t *)&fsamp); acqModifyFrequency(fsamp); }
    47ec:	f7fc bac4 	b.w	d78 <acqModifyFrequency(unsigned long)>
{ char *buffer=menuGetLine();
    47f0:	f7ff fdf8 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    47f4:	aa07      	add	r2, sp, #28
    47f6:	492e      	ldr	r1, [pc, #184]	; (48b0 <menu3()+0x278>)
    47f8:	f00d fe14 	bl	12424 <sscanf>
    47fc:	4b36      	ldr	r3, [pc, #216]	; (48d8 <menu3()+0x2a0>)
    47fe:	9a07      	ldr	r2, [sp, #28]
    4800:	801a      	strh	r2, [r3, #0]
  return 1;
    4802:	e785      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4804:	f7ff fdee 	bl	43e4 <menuGetLine()>
  return sscanf(buffer,"%s",txt);
    4808:	4a34      	ldr	r2, [pc, #208]	; (48dc <menu3()+0x2a4>)
    480a:	e7c8      	b.n	479e <menu3()+0x166>
{ char *buffer=menuGetLine();
    480c:	f7ff fdea 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4810:	aa07      	add	r2, sp, #28
    4812:	4927      	ldr	r1, [pc, #156]	; (48b0 <menu3()+0x278>)
    4814:	f00d fe06 	bl	12424 <sscanf>
    4818:	4b31      	ldr	r3, [pc, #196]	; (48e0 <menu3()+0x2a8>)
    481a:	9a07      	ldr	r2, [sp, #28]
    481c:	801a      	strh	r2, [r3, #0]
  return 1;
    481e:	e777      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4820:	f7ff fde0 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4824:	aa07      	add	r2, sp, #28
    4826:	4922      	ldr	r1, [pc, #136]	; (48b0 <menu3()+0x278>)
    4828:	f00d fdfc 	bl	12424 <sscanf>
    482c:	4b2d      	ldr	r3, [pc, #180]	; (48e4 <menu3()+0x2ac>)
    482e:	9a07      	ldr	r2, [sp, #28]
    4830:	801a      	strh	r2, [r3, #0]
  return 1;
    4832:	e76d      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4834:	f7ff fdd6 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4838:	aa07      	add	r2, sp, #28
    483a:	491d      	ldr	r1, [pc, #116]	; (48b0 <menu3()+0x278>)
    483c:	f00d fdf2 	bl	12424 <sscanf>
    4840:	4b29      	ldr	r3, [pc, #164]	; (48e8 <menu3()+0x2b0>)
    4842:	9a07      	ldr	r2, [sp, #28]
    4844:	801a      	strh	r2, [r3, #0]
  return 1;
    4846:	e763      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4848:	f7ff fdcc 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    484c:	aa07      	add	r2, sp, #28
    484e:	4918      	ldr	r1, [pc, #96]	; (48b0 <menu3()+0x278>)
    4850:	f00d fde8 	bl	12424 <sscanf>
    4854:	4b25      	ldr	r3, [pc, #148]	; (48ec <menu3()+0x2b4>)
    4856:	9a07      	ldr	r2, [sp, #28]
    4858:	801a      	strh	r2, [r3, #0]
  return 1;
    485a:	e759      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    485c:	f7ff fdc2 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4860:	aa07      	add	r2, sp, #28
    4862:	4913      	ldr	r1, [pc, #76]	; (48b0 <menu3()+0x278>)
    4864:	f00d fdde 	bl	12424 <sscanf>
    4868:	4b21      	ldr	r3, [pc, #132]	; (48f0 <menu3()+0x2b8>)
    486a:	9a07      	ldr	r2, [sp, #28]
    486c:	801a      	strh	r2, [r3, #0]
  return 1;
    486e:	e74f      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4870:	f7ff fdb8 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4874:	aa07      	add	r2, sp, #28
    4876:	490e      	ldr	r1, [pc, #56]	; (48b0 <menu3()+0x278>)
    4878:	f00d fdd4 	bl	12424 <sscanf>
    487c:	4b1d      	ldr	r3, [pc, #116]	; (48f4 <menu3()+0x2bc>)
    487e:	9a07      	ldr	r2, [sp, #28]
    4880:	801a      	strh	r2, [r3, #0]
  return 1;
    4882:	e745      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4884:	f7ff fdae 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4888:	aa07      	add	r2, sp, #28
    488a:	4909      	ldr	r1, [pc, #36]	; (48b0 <menu3()+0x278>)
    488c:	f00d fdca 	bl	12424 <sscanf>
    4890:	4b19      	ldr	r3, [pc, #100]	; (48f8 <menu3()+0x2c0>)
    4892:	9a07      	ldr	r2, [sp, #28]
    4894:	801a      	strh	r2, [r3, #0]
  return 1;
    4896:	e73b      	b.n	4710 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4898:	f7ff fda4 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    489c:	aa07      	add	r2, sp, #28
    489e:	4904      	ldr	r1, [pc, #16]	; (48b0 <menu3()+0x278>)
    48a0:	f00d fdc0 	bl	12424 <sscanf>
    48a4:	4b15      	ldr	r3, [pc, #84]	; (48fc <menu3()+0x2c4>)
    48a6:	9a07      	ldr	r2, [sp, #28]
    48a8:	801a      	strh	r2, [r3, #0]
  return 1;
    48aa:	e731      	b.n	4710 <menu3()+0xd8>
    48ac:	20000698 	.word	0x20000698
    48b0:	200006a0 	.word	0x200006a0
    48b4:	20014a5c 	.word	0x20014a5c
    48b8:	20016050 	.word	0x20016050
    48bc:	20016052 	.word	0x20016052
    48c0:	20009424 	.word	0x20009424
    48c4:	20015800 	.word	0x20015800
    48c8:	200006a4 	.word	0x200006a4
    48cc:	200157b0 	.word	0x200157b0
    48d0:	20009418 	.word	0x20009418
    48d4:	200093ec 	.word	0x200093ec
    48d8:	2001604a 	.word	0x2001604a
    48dc:	20015710 	.word	0x20015710
    48e0:	20009422 	.word	0x20009422
    48e4:	20016040 	.word	0x20016040
    48e8:	2000941a 	.word	0x2000941a
    48ec:	20009420 	.word	0x20009420
    48f0:	2000941e 	.word	0x2000941e
    48f4:	2000941c 	.word	0x2000941c
    48f8:	20016046 	.word	0x20016046
    48fc:	2001603e 	.word	0x2001603e

00004900 <saveParameters()>:
{
    4900:	b410      	push	{r4}
  store[4]  = proc;
    4902:	481f      	ldr	r0, [pc, #124]	; (4980 <saveParameters()+0x80>)
  store[1]  = t_acq;
    4904:	4c1f      	ldr	r4, [pc, #124]	; (4984 <saveParameters()+0x84>)
  store[2]  = t_on;
    4906:	4a20      	ldr	r2, [pc, #128]	; (4988 <saveParameters()+0x88>)
  store[3]  = t_rep;
    4908:	4b20      	ldr	r3, [pc, #128]	; (498c <saveParameters()+0x8c>)
  store[1]  = t_acq;
    490a:	f8b4 c000 	ldrh.w	ip, [r4]
  store[2]  = t_on;
    490e:	8812      	ldrh	r2, [r2, #0]
  store[3]  = t_rep;
    4910:	881b      	ldrh	r3, [r3, #0]
  store[4]  = proc;
    4912:	8804      	ldrh	r4, [r0, #0]
  store[1]  = t_acq;
    4914:	481e      	ldr	r0, [pc, #120]	; (4990 <saveParameters()+0x90>)
  store[5]  = shift;
    4916:	491f      	ldr	r1, [pc, #124]	; (4994 <saveParameters()+0x94>)
  store[3]  = t_rep;
    4918:	80c3      	strh	r3, [r0, #6]
  store[6]  = h_1;
    491a:	4b1f      	ldr	r3, [pc, #124]	; (4998 <saveParameters()+0x98>)
  store[5]  = shift;
    491c:	8809      	ldrh	r1, [r1, #0]
  store[6]  = h_1;
    491e:	881b      	ldrh	r3, [r3, #0]
  store[2]  = t_on;
    4920:	8082      	strh	r2, [r0, #4]
  store[6]  = h_1;
    4922:	8183      	strh	r3, [r0, #12]
  store[7]  = h_2;
    4924:	4a1d      	ldr	r2, [pc, #116]	; (499c <saveParameters()+0x9c>)
  store[8]  = h_3;
    4926:	4b1e      	ldr	r3, [pc, #120]	; (49a0 <saveParameters()+0xa0>)
  store[4]  = proc;
    4928:	8104      	strh	r4, [r0, #8]
  store[5]  = shift;
    492a:	8141      	strh	r1, [r0, #10]
  store[7]  = h_2;
    492c:	8814      	ldrh	r4, [r2, #0]
  store[9]  = h_4;
    492e:	491d      	ldr	r1, [pc, #116]	; (49a4 <saveParameters()+0xa4>)
  store[8]  = h_3;
    4930:	881b      	ldrh	r3, [r3, #0]
  store[10] = d_on;
    4932:	4a1d      	ldr	r2, [pc, #116]	; (49a8 <saveParameters()+0xa8>)
  store[7]  = h_2;
    4934:	81c4      	strh	r4, [r0, #14]
  store[8]  = h_3;
    4936:	8203      	strh	r3, [r0, #16]
  store[9]  = h_4;
    4938:	880c      	ldrh	r4, [r1, #0]
  store[12] = fsamp/1000;
    493a:	4b1c      	ldr	r3, [pc, #112]	; (49ac <saveParameters()+0xac>)
  store[10] = d_on;
    493c:	8811      	ldrh	r1, [r2, #0]
  store[11] = d_rep;
    493e:	4a1c      	ldr	r2, [pc, #112]	; (49b0 <saveParameters()+0xb0>)
  store[10] = d_on;
    4940:	8281      	strh	r1, [r0, #20]
  store[11] = d_rep;
    4942:	8812      	ldrh	r2, [r2, #0]
  store[12] = fsamp/1000;
    4944:	491b      	ldr	r1, [pc, #108]	; (49b4 <saveParameters()+0xb4>)
    4946:	681b      	ldr	r3, [r3, #0]
  store[11] = d_rep;
    4948:	82c2      	strh	r2, [r0, #22]
  store[12] = fsamp/1000;
    494a:	17da      	asrs	r2, r3, #31
    494c:	fb81 1303 	smull	r1, r3, r1, r3
  store[9]  = h_4;
    4950:	8244      	strh	r4, [r0, #18]
  store[12] = fsamp/1000;
    4952:	ebc2 13a3 	rsb	r3, r2, r3, asr #6
  store[13] = again;
    4956:	4c18      	ldr	r4, [pc, #96]	; (49b8 <saveParameters()+0xb8>)
  store[15] = d_0;
    4958:	4918      	ldr	r1, [pc, #96]	; (49bc <saveParameters()+0xbc>)
  store[14] = dgain;
    495a:	4a19      	ldr	r2, [pc, #100]	; (49c0 <saveParameters()+0xc0>)
  store[1]  = t_acq;
    495c:	f8a0 c002 	strh.w	ip, [r0, #2]
  store[12] = fsamp/1000;
    4960:	8303      	strh	r3, [r0, #24]
  store[13] = again;
    4962:	f8b4 c000 	ldrh.w	ip, [r4]
  store[14] = dgain;
    4966:	8812      	ldrh	r2, [r2, #0]
  store[15] = d_0;
    4968:	880b      	ldrh	r3, [r1, #0]
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    496a:	2100      	movs	r1, #0
  store[14] = dgain;
    496c:	8382      	strh	r2, [r0, #28]
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    496e:	2220      	movs	r2, #32
}
    4970:	f85d 4b04 	ldr.w	r4, [sp], #4
  store[13] = again;
    4974:	f8a0 c01a 	strh.w	ip, [r0, #26]
  store[15] = d_0;
    4978:	83c3      	strh	r3, [r0, #30]
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    497a:	f009 be33 	b.w	e5e4 <eeprom_write_block>
    497e:	bf00      	nop
    4980:	2001604a 	.word	0x2001604a
    4984:	20009422 	.word	0x20009422
    4988:	20009424 	.word	0x20009424
    498c:	20016052 	.word	0x20016052
    4990:	20014a5c 	.word	0x20014a5c
    4994:	20016050 	.word	0x20016050
    4998:	20016046 	.word	0x20016046
    499c:	2000941c 	.word	0x2000941c
    49a0:	2000941e 	.word	0x2000941e
    49a4:	20009420 	.word	0x20009420
    49a8:	2000941a 	.word	0x2000941a
    49ac:	200093ec 	.word	0x200093ec
    49b0:	20016040 	.word	0x20016040
    49b4:	10624dd3 	.word	0x10624dd3
    49b8:	20009418 	.word	0x20009418
    49bc:	2001603e 	.word	0x2001603e
    49c0:	20016042 	.word	0x20016042

000049c4 <menu1(short)>:
{   // have ':'
    49c4:	b530      	push	{r4, r5, lr}
    49c6:	4605      	mov	r5, r0
    49c8:	b083      	sub	sp, #12
        virtual int available() { return usb_serial_available(); }
    49ca:	f00b fb39 	bl	10040 <usb_serial_available>
    while(!Serial.available()) ;
    49ce:	2800      	cmp	r0, #0
    49d0:	d0fb      	beq.n	49ca <menu1(short)+0x6>
        virtual int read() { return usb_serial_getchar(); }
    49d2:	f00b fb79 	bl	100c8 <usb_serial_getchar>
    ch=Serial.read();
    49d6:	b2c4      	uxtb	r4, r0
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    49d8:	4620      	mov	r0, r4
    49da:	f00b fb85 	bl	100e8 <usb_serial_putchar>
	size_t println(char c)				{ return print(c) + println(); }
    49de:	4819      	ldr	r0, [pc, #100]	; (4a44 <menu1(short)+0x80>)
    49e0:	f009 f812 	bl	da08 <Print::println()>
    if(ch=='w') 
    49e4:	2c77      	cmp	r4, #119	; 0x77
    49e6:	d019      	beq.n	4a1c <menu1(short)+0x58>
    else if(ch=='m') // control monitor (needed for gui)
    49e8:	2c6d      	cmp	r4, #109	; 0x6d
    49ea:	d021      	beq.n	4a30 <menu1(short)+0x6c>
    else if(ch=='c') // transfer internal rtc to external rtc
    49ec:	2c63      	cmp	r4, #99	; 0x63
    49ee:	d00e      	beq.n	4a0e <menu1(short)+0x4a>
    49f0:	4620      	mov	r0, r4
    49f2:	f00b fb79 	bl	100e8 <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    49f6:	210f      	movs	r1, #15
    49f8:	4813      	ldr	r0, [pc, #76]	; (4a48 <menu1(short)+0x84>)
    49fa:	f00b fb8b 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    49fe:	4811      	ldr	r0, [pc, #68]	; (4a44 <menu1(short)+0x80>)
    4a00:	f009 f802 	bl	da08 <Print::println()>
        virtual int available() { return usb_serial_available(); }
    4a04:	f00b fb1c 	bl	10040 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    4a08:	b128      	cbz	r0, 4a16 <menu1(short)+0x52>
        virtual int read() { return usb_serial_getchar(); }
    4a0a:	f00b fb5d 	bl	100c8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4a0e:	f00b fb17 	bl	10040 <usb_serial_available>
    4a12:	2800      	cmp	r0, #0
    4a14:	d1f9      	bne.n	4a0a <menu1(short)+0x46>
}
    4a16:	4628      	mov	r0, r5
    4a18:	b003      	add	sp, #12
    4a1a:	bd30      	pop	{r4, r5, pc}
    { saveParameters();
    4a1c:	f7ff ff70 	bl	4900 <saveParameters()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4a20:	210f      	movs	r1, #15
    4a22:	480a      	ldr	r0, [pc, #40]	; (4a4c <menu1(short)+0x88>)
    4a24:	f00b fb76 	bl	10114 <usb_serial_write>
    4a28:	4806      	ldr	r0, [pc, #24]	; (4a44 <menu1(short)+0x80>)
    4a2a:	f008 ffed 	bl	da08 <Print::println()>
    4a2e:	e7ee      	b.n	4a0e <menu1(short)+0x4a>
{ char *buffer=menuGetLine();
    4a30:	f7ff fcd8 	bl	43e4 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4a34:	aa01      	add	r2, sp, #4
    4a36:	4906      	ldr	r1, [pc, #24]	; (4a50 <menu1(short)+0x8c>)
    4a38:	f00d fcf4 	bl	12424 <sscanf>
    4a3c:	4b05      	ldr	r3, [pc, #20]	; (4a54 <menu1(short)+0x90>)
    4a3e:	9a01      	ldr	r2, [sp, #4]
    4a40:	801a      	strh	r2, [r3, #0]
  return 1;
    4a42:	e7e4      	b.n	4a0e <menu1(short)+0x4a>
    4a44:	20008a6c 	.word	0x20008a6c
    4a48:	200005f4 	.word	0x200005f4
    4a4c:	200005e4 	.word	0x200005e4
    4a50:	200006a0 	.word	0x200006a0
    4a54:	20016048 	.word	0x20016048

00004a58 <loadParameters()>:
{
    4a58:	b538      	push	{r3, r4, r5, lr}
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    4a5a:	4c24      	ldr	r4, [pc, #144]	; (4aec <loadParameters()+0x94>)
    4a5c:	2220      	movs	r2, #32
	size_t print(int n)				{ return print((long)n); }
    4a5e:	4d24      	ldr	r5, [pc, #144]	; (4af0 <loadParameters()+0x98>)
    4a60:	2100      	movs	r1, #0
    4a62:	4620      	mov	r0, r4
    4a64:	f009 fc42 	bl	e2ec <eeprom_read_block>
    4a68:	8821      	ldrh	r1, [r4, #0]
    4a6a:	4628      	mov	r0, r5
    4a6c:	f008 ffc0 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4a70:	4628      	mov	r0, r5
    4a72:	f008 ffc9 	bl	da08 <Print::println()>
    store[2]  = t_on     = T_ON;
    4a76:	4d1f      	ldr	r5, [pc, #124]	; (4af4 <loadParameters()+0x9c>)
    store[1]  = t_acq    = T_ACQ;
    4a78:	2214      	movs	r2, #20
    store[2]  = t_on     = T_ON;
    4a7a:	213c      	movs	r1, #60	; 0x3c
    store[1]  = t_acq    = T_ACQ;
    4a7c:	481e      	ldr	r0, [pc, #120]	; (4af8 <loadParameters()+0xa0>)
  store[0]=0;
    4a7e:	2300      	movs	r3, #0
    store[2]  = t_on     = T_ON;
    4a80:	80a1      	strh	r1, [r4, #4]
    store[1]  = t_acq    = T_ACQ;
    4a82:	8002      	strh	r2, [r0, #0]
    store[9]  = h_4      = H_4;
    4a84:	2018      	movs	r0, #24
    store[2]  = t_on     = T_ON;
    4a86:	8029      	strh	r1, [r5, #0]
    store[3]  = t_rep    = T_REP;
    4a88:	491c      	ldr	r1, [pc, #112]	; (4afc <loadParameters()+0xa4>)
    store[1]  = t_acq    = T_ACQ;
    4a8a:	8062      	strh	r2, [r4, #2]
    store[7]  = h_2      = H_2;
    4a8c:	220c      	movs	r2, #12
    store[3]  = t_rep    = T_REP;
    4a8e:	800b      	strh	r3, [r1, #0]
    store[4]  = proc     = PROC_MODE;
    4a90:	491b      	ldr	r1, [pc, #108]	; (4b00 <loadParameters()+0xa8>)
    store[7]  = h_2      = H_2;
    4a92:	81e2      	strh	r2, [r4, #14]
    store[4]  = proc     = PROC_MODE;
    4a94:	800b      	strh	r3, [r1, #0]
    store[5]  = shift    = SHIFT;
    4a96:	491b      	ldr	r1, [pc, #108]	; (4b04 <loadParameters()+0xac>)
    store[8]  = h_3      = H_3;
    4a98:	8222      	strh	r2, [r4, #16]
    store[5]  = shift    = SHIFT;
    4a9a:	800b      	strh	r3, [r1, #0]
    store[6]  = h_1      = H_1;
    4a9c:	491a      	ldr	r1, [pc, #104]	; (4b08 <loadParameters()+0xb0>)
    store[9]  = h_4      = H_4;
    4a9e:	8260      	strh	r0, [r4, #18]
    store[6]  = h_1      = H_1;
    4aa0:	800b      	strh	r3, [r1, #0]
    store[7]  = h_2      = H_2;
    4aa2:	491a      	ldr	r1, [pc, #104]	; (4b0c <loadParameters()+0xb4>)
  store[0]=0;
    4aa4:	8023      	strh	r3, [r4, #0]
    store[7]  = h_2      = H_2;
    4aa6:	800a      	strh	r2, [r1, #0]
    store[8]  = h_3      = H_3;
    4aa8:	4919      	ldr	r1, [pc, #100]	; (4b10 <loadParameters()+0xb8>)
    store[3]  = t_rep    = T_REP;
    4aaa:	80e3      	strh	r3, [r4, #6]
    store[8]  = h_3      = H_3;
    4aac:	800a      	strh	r2, [r1, #0]
    store[10] = d_on     = D_ON;
    4aae:	2101      	movs	r1, #1
    store[9]  = h_4      = H_4;
    4ab0:	4a18      	ldr	r2, [pc, #96]	; (4b14 <loadParameters()+0xbc>)
    store[10] = d_on     = D_ON;
    4ab2:	82a1      	strh	r1, [r4, #20]
    store[9]  = h_4      = H_4;
    4ab4:	8010      	strh	r0, [r2, #0]
    store[13] = again    = AGAIN;
    4ab6:	220a      	movs	r2, #10
    store[10] = d_on     = D_ON;
    4ab8:	4817      	ldr	r0, [pc, #92]	; (4b18 <loadParameters()+0xc0>)
    store[13] = again    = AGAIN;
    4aba:	8362      	strh	r2, [r4, #26]
    store[10] = d_on     = D_ON;
    4abc:	8001      	strh	r1, [r0, #0]
    store[11] = d_rep    = D_REP;
    4abe:	4817      	ldr	r0, [pc, #92]	; (4b1c <loadParameters()+0xc4>)
    store[12] = (fsamp   = FSAMP)/1000; 
    4ac0:	4917      	ldr	r1, [pc, #92]	; (4b20 <loadParameters()+0xc8>)
    store[11] = d_rep    = D_REP;
    4ac2:	8003      	strh	r3, [r0, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    4ac4:	f64b 3080 	movw	r0, #48000	; 0xbb80
    store[4]  = proc     = PROC_MODE;
    4ac8:	8123      	strh	r3, [r4, #8]
    store[12] = (fsamp   = FSAMP)/1000; 
    4aca:	6008      	str	r0, [r1, #0]
    4acc:	2030      	movs	r0, #48	; 0x30
    store[13] = again    = AGAIN;
    4ace:	4915      	ldr	r1, [pc, #84]	; (4b24 <loadParameters()+0xcc>)
    store[12] = (fsamp   = FSAMP)/1000; 
    4ad0:	8320      	strh	r0, [r4, #24]
}
    4ad2:	4620      	mov	r0, r4
    store[13] = again    = AGAIN;
    4ad4:	800a      	strh	r2, [r1, #0]
    store[14] = dgain    = DGAIN;
    4ad6:	4914      	ldr	r1, [pc, #80]	; (4b28 <loadParameters()+0xd0>)
    store[15] = d_0      = 0; 
    4ad8:	4a14      	ldr	r2, [pc, #80]	; (4b2c <loadParameters()+0xd4>)
    store[14] = dgain    = DGAIN;
    4ada:	800b      	strh	r3, [r1, #0]
    store[5]  = shift    = SHIFT;
    4adc:	8163      	strh	r3, [r4, #10]
    store[6]  = h_1      = H_1;
    4ade:	81a3      	strh	r3, [r4, #12]
    store[11] = d_rep    = D_REP;
    4ae0:	82e3      	strh	r3, [r4, #22]
    store[14] = dgain    = DGAIN;
    4ae2:	83a3      	strh	r3, [r4, #28]
    store[15] = d_0      = 0; 
    4ae4:	83e3      	strh	r3, [r4, #30]
    4ae6:	8013      	strh	r3, [r2, #0]
}
    4ae8:	bd38      	pop	{r3, r4, r5, pc}
    4aea:	bf00      	nop
    4aec:	20014a5c 	.word	0x20014a5c
    4af0:	20008a6c 	.word	0x20008a6c
    4af4:	20009424 	.word	0x20009424
    4af8:	20009422 	.word	0x20009422
    4afc:	20016052 	.word	0x20016052
    4b00:	2001604a 	.word	0x2001604a
    4b04:	20016050 	.word	0x20016050
    4b08:	20016046 	.word	0x20016046
    4b0c:	2000941c 	.word	0x2000941c
    4b10:	2000941e 	.word	0x2000941e
    4b14:	20009420 	.word	0x20009420
    4b18:	2000941a 	.word	0x2000941a
    4b1c:	20016040 	.word	0x20016040
    4b20:	200093ec 	.word	0x200093ec
    4b24:	20009418 	.word	0x20009418
    4b28:	20016042 	.word	0x20016042
    4b2c:	2001603e 	.word	0x2001603e

00004b30 <menu2()>:
{   // have '?'
    4b30:	b510      	push	{r4, lr}
    4b32:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    4b34:	f00b fa84 	bl	10040 <usb_serial_available>
    while(!Serial.available()) ;
    4b38:	2800      	cmp	r0, #0
    4b3a:	d0fb      	beq.n	4b34 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    4b3c:	f00b fac4 	bl	100c8 <usb_serial_getchar>
    ch=Serial.read();
    4b40:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    4b42:	2870      	cmp	r0, #112	; 0x70
    4b44:	d054      	beq.n	4bf0 <menu2()+0xc0>
    else if(ch=='d') // get date
    4b46:	3830      	subs	r0, #48	; 0x30
    4b48:	2847      	cmp	r0, #71	; 0x47
    4b4a:	d84b      	bhi.n	4be4 <menu2()+0xb4>
    4b4c:	e8df f010 	tbh	[pc, r0, lsl #1]
    4b50:	01540086 	.word	0x01540086
    4b54:	0148014e 	.word	0x0148014e
    4b58:	013c0142 	.word	0x013c0142
    4b5c:	004a0136 	.word	0x004a0136
    4b60:	004a004a 	.word	0x004a004a
    4b64:	004a004a 	.word	0x004a004a
    4b68:	004a004a 	.word	0x004a004a
    4b6c:	004a004a 	.word	0x004a004a
    4b70:	004a004a 	.word	0x004a004a
    4b74:	004a004a 	.word	0x004a004a
    4b78:	004a004a 	.word	0x004a004a
    4b7c:	004a004a 	.word	0x004a004a
    4b80:	004a004a 	.word	0x004a004a
    4b84:	004a004a 	.word	0x004a004a
    4b88:	004a004a 	.word	0x004a004a
    4b8c:	004a004a 	.word	0x004a004a
    4b90:	004a004a 	.word	0x004a004a
    4b94:	004a004a 	.word	0x004a004a
    4b98:	004a004a 	.word	0x004a004a
    4b9c:	004a004a 	.word	0x004a004a
    4ba0:	004a004a 	.word	0x004a004a
    4ba4:	004a004a 	.word	0x004a004a
    4ba8:	004a004a 	.word	0x004a004a
    4bac:	004a004a 	.word	0x004a004a
    4bb0:	0130004a 	.word	0x0130004a
    4bb4:	011b0121 	.word	0x011b0121
    4bb8:	004a010c 	.word	0x004a010c
    4bbc:	00f900ff 	.word	0x00f900ff
    4bc0:	004a00ea 	.word	0x004a00ea
    4bc4:	00db004a 	.word	0x00db004a
    4bc8:	004a004a 	.word	0x004a004a
    4bcc:	00c600cc 	.word	0x00c600cc
    4bd0:	004a004a 	.word	0x004a004a
    4bd4:	00b200b8 	.word	0x00b200b8
    4bd8:	004a00a3 	.word	0x004a00a3
    4bdc:	0094004a 	.word	0x0094004a
    4be0:	f00b fa72 	bl	100c8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4be4:	f00b fa2c 	bl	10040 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    4be8:	2800      	cmp	r0, #0
    4bea:	d1f9      	bne.n	4be0 <menu2()+0xb0>
}
    4bec:	b008      	add	sp, #32
    4bee:	bd10      	pop	{r4, pc}
      Serial.println();
    4bf0:	4884      	ldr	r0, [pc, #528]	; (4e04 <menu2()+0x2d4>)
    4bf2:	f008 ff09 	bl	da08 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4bf6:	2127      	movs	r1, #39	; 0x27
    4bf8:	4883      	ldr	r0, [pc, #524]	; (4e08 <menu2()+0x2d8>)
    4bfa:	f00b fa8b 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4bfe:	4881      	ldr	r0, [pc, #516]	; (4e04 <menu2()+0x2d4>)
    4c00:	f008 ff02 	bl	da08 <Print::println()>
      rtc_get_datetime(&t);
    4c04:	a806      	add	r0, sp, #24
    4c06:	f000 fe05 	bl	5814 <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    4c0a:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    4c0e:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    4c12:	f99d 001e 	ldrsb.w	r0, [sp, #30]
    4c16:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    4c1a:	f99d 401b 	ldrsb.w	r4, [sp, #27]
    4c1e:	e9cd 3203 	strd	r3, r2, [sp, #12]
    4c22:	e9cd 1001 	strd	r1, r0, [sp, #4]
    4c26:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    4c2a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    4c2e:	4977      	ldr	r1, [pc, #476]	; (4e0c <menu2()+0x2dc>)
    4c30:	9400      	str	r4, [sp, #0]
    4c32:	4874      	ldr	r0, [pc, #464]	; (4e04 <menu2()+0x2d4>)
    4c34:	f008 ff04 	bl	da40 <Print::printf(char const*, ...)>
      XRTCprintTime();
    4c38:	f000 fe28 	bl	588c <XRTCprintTime()>
      Serial.println(rtcGetTimestamp());
    4c3c:	f000 fde8 	bl	5810 <rtcGetTimestamp()>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    4c40:	4604      	mov	r4, r0
    4c42:	b128      	cbz	r0, 4c50 <menu2()+0x120>
							  return write((const uint8_t *)str, strlen(str)); }
    4c44:	f00e f95c 	bl	12f00 <strlen>
    4c48:	4601      	mov	r1, r0
    4c4a:	4620      	mov	r0, r4
    4c4c:	f00b fa62 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4c50:	486c      	ldr	r0, [pc, #432]	; (4e04 <menu2()+0x2d4>)
    4c52:	f008 fed9 	bl	da08 <Print::println()>
      printPar();
    4c56:	f7ff fbe9 	bl	442c <printPar()>
    4c5a:	e7c3      	b.n	4be4 <menu2()+0xb4>
    4c5c:	210c      	movs	r1, #12
    4c5e:	486c      	ldr	r0, [pc, #432]	; (4e10 <menu2()+0x2e0>)
    4c60:	f00b fa58 	bl	10114 <usb_serial_write>
    else if(ch=='0') { Serial.print("d_0   (0) = "); Serial.println(d_0); }
    4c64:	4b6b      	ldr	r3, [pc, #428]	; (4e14 <menu2()+0x2e4>)
    else if(ch=='c') { Serial.print("proc  (c) = "); Serial.println(proc); }
    4c66:	8819      	ldrh	r1, [r3, #0]
	size_t print(int n)				{ return print((long)n); }
    4c68:	4866      	ldr	r0, [pc, #408]	; (4e04 <menu2()+0x2d4>)
    4c6a:	b209      	sxth	r1, r1
    4c6c:	f008 fec0 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4c70:	4864      	ldr	r0, [pc, #400]	; (4e04 <menu2()+0x2d4>)
    4c72:	f008 fec9 	bl	da08 <Print::println()>
    4c76:	e7b5      	b.n	4be4 <menu2()+0xb4>
    else if(ch=='w') { uint16_t *params=loadParameters(); Serial.print("params[0]  = "); Serial.println(params[0]); }
    4c78:	f7ff feee 	bl	4a58 <loadParameters()>
    4c7c:	4604      	mov	r4, r0
    4c7e:	210d      	movs	r1, #13
    4c80:	4865      	ldr	r0, [pc, #404]	; (4e18 <menu2()+0x2e8>)
    4c82:	f00b fa47 	bl	10114 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4c86:	8821      	ldrh	r1, [r4, #0]
    4c88:	485e      	ldr	r0, [pc, #376]	; (4e04 <menu2()+0x2d4>)
    4c8a:	f008 feb1 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4c8e:	485d      	ldr	r0, [pc, #372]	; (4e04 <menu2()+0x2d4>)
    4c90:	f008 feba 	bl	da08 <Print::println()>
    4c94:	e7a6      	b.n	4be4 <menu2()+0xb4>
      rtc_get_datetime(&t);
    4c96:	a806      	add	r0, sp, #24
    4c98:	f000 fdbc 	bl	5814 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec); 
    4c9c:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    4ca0:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    4ca4:	9000      	str	r0, [sp, #0]
    4ca6:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    4caa:	495c      	ldr	r1, [pc, #368]	; (4e1c <menu2()+0x2ec>)
    4cac:	4855      	ldr	r0, [pc, #340]	; (4e04 <menu2()+0x2d4>)
    4cae:	f008 fec7 	bl	da40 <Print::printf(char const*, ...)>
    4cb2:	e797      	b.n	4be4 <menu2()+0xb4>
    4cb4:	210c      	movs	r1, #12
    4cb6:	485a      	ldr	r0, [pc, #360]	; (4e20 <menu2()+0x2f0>)
    4cb8:	f00b fa2c 	bl	10114 <usb_serial_write>
    else if(ch=='s') { Serial.print("shift (s) = "); Serial.println(shift); }
    4cbc:	4b59      	ldr	r3, [pc, #356]	; (4e24 <menu2()+0x2f4>)
    4cbe:	e7d2      	b.n	4c66 <menu2()+0x136>
    4cc0:	210c      	movs	r1, #12
    4cc2:	4859      	ldr	r0, [pc, #356]	; (4e28 <menu2()+0x2f8>)
    4cc4:	f00b fa26 	bl	10114 <usb_serial_write>
    else if(ch=='r') { Serial.print("t_rep (r) = "); Serial.println(t_rep); }
    4cc8:	4b58      	ldr	r3, [pc, #352]	; (4e2c <menu2()+0x2fc>)
    else if(ch=='o') { Serial.print("t_on  (o) = "); Serial.println(t_on); }
    4cca:	8819      	ldrh	r1, [r3, #0]
	size_t print(int n)				{ return print((long)n); }
    4ccc:	484d      	ldr	r0, [pc, #308]	; (4e04 <menu2()+0x2d4>)
    4cce:	b289      	uxth	r1, r1
    4cd0:	f008 fe8e 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4cd4:	484b      	ldr	r0, [pc, #300]	; (4e04 <menu2()+0x2d4>)
    4cd6:	f008 fe97 	bl	da08 <Print::println()>
    4cda:	e783      	b.n	4be4 <menu2()+0xb4>
    4cdc:	210c      	movs	r1, #12
    4cde:	4854      	ldr	r0, [pc, #336]	; (4e30 <menu2()+0x300>)
    4ce0:	f00b fa18 	bl	10114 <usb_serial_write>
    4ce4:	4b53      	ldr	r3, [pc, #332]	; (4e34 <menu2()+0x304>)
    4ce6:	e7f0      	b.n	4cca <menu2()+0x19a>
    4ce8:	210a      	movs	r1, #10
    4cea:	4853      	ldr	r0, [pc, #332]	; (4e38 <menu2()+0x308>)
    4cec:	f00b fa12 	bl	10114 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    4cf0:	4852      	ldr	r0, [pc, #328]	; (4e3c <menu2()+0x30c>)
    4cf2:	f00e f905 	bl	12f00 <strlen>
    4cf6:	4601      	mov	r1, r0
    4cf8:	4850      	ldr	r0, [pc, #320]	; (4e3c <menu2()+0x30c>)
    4cfa:	f00b fa0b 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4cfe:	4841      	ldr	r0, [pc, #260]	; (4e04 <menu2()+0x2d4>)
    4d00:	f008 fe82 	bl	da08 <Print::println()>
    4d04:	e76e      	b.n	4be4 <menu2()+0xb4>
    4d06:	210a      	movs	r1, #10
    4d08:	484d      	ldr	r0, [pc, #308]	; (4e40 <menu2()+0x310>)
    4d0a:	f00b fa03 	bl	10114 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    4d0e:	484d      	ldr	r0, [pc, #308]	; (4e44 <menu2()+0x314>)
    4d10:	f00e f8f6 	bl	12f00 <strlen>
    4d14:	4601      	mov	r1, r0
    4d16:	484b      	ldr	r0, [pc, #300]	; (4e44 <menu2()+0x314>)
    4d18:	f00b f9fc 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d1c:	4839      	ldr	r0, [pc, #228]	; (4e04 <menu2()+0x2d4>)
    4d1e:	f008 fe73 	bl	da08 <Print::println()>
    4d22:	e75f      	b.n	4be4 <menu2()+0xb4>
    4d24:	210c      	movs	r1, #12
    4d26:	4848      	ldr	r0, [pc, #288]	; (4e48 <menu2()+0x318>)
    4d28:	f00b f9f4 	bl	10114 <usb_serial_write>
    else if(ch=='h') { Serial.print("SerNum(h) = "); Serial.println(SerNum,HEX); }
    4d2c:	4947      	ldr	r1, [pc, #284]	; (4e4c <menu2()+0x31c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    4d2e:	2300      	movs	r3, #0
    4d30:	2210      	movs	r2, #16
    4d32:	6809      	ldr	r1, [r1, #0]
    4d34:	4833      	ldr	r0, [pc, #204]	; (4e04 <menu2()+0x2d4>)
    4d36:	f008 fe91 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    4d3a:	4832      	ldr	r0, [pc, #200]	; (4e04 <menu2()+0x2d4>)
    4d3c:	f008 fe64 	bl	da08 <Print::println()>
    4d40:	e750      	b.n	4be4 <menu2()+0xb4>
    4d42:	210c      	movs	r1, #12
    4d44:	4842      	ldr	r0, [pc, #264]	; (4e50 <menu2()+0x320>)
    4d46:	f00b f9e5 	bl	10114 <usb_serial_write>
    else if(ch=='g') { Serial.print("again (g) = "); Serial.println(again); }
    4d4a:	4b42      	ldr	r3, [pc, #264]	; (4e54 <menu2()+0x324>)
    4d4c:	e78b      	b.n	4c66 <menu2()+0x136>
    4d4e:	210c      	movs	r1, #12
    4d50:	4841      	ldr	r0, [pc, #260]	; (4e58 <menu2()+0x328>)
    4d52:	f00b f9df 	bl	10114 <usb_serial_write>
    else if(ch=='f') { Serial.print("fsamp (f) = "); Serial.println(fsamp); }
    4d56:	4b41      	ldr	r3, [pc, #260]	; (4e5c <menu2()+0x32c>)
	size_t println(long n)				{ return print(n) + println(); }
    4d58:	482a      	ldr	r0, [pc, #168]	; (4e04 <menu2()+0x2d4>)
    4d5a:	6819      	ldr	r1, [r3, #0]
    4d5c:	f008 fe48 	bl	d9f0 <Print::print(long)>
    4d60:	4828      	ldr	r0, [pc, #160]	; (4e04 <menu2()+0x2d4>)
    4d62:	f008 fe51 	bl	da08 <Print::println()>
    4d66:	e73d      	b.n	4be4 <menu2()+0xb4>
      rtc_get_datetime(&t);
    4d68:	a806      	add	r0, sp, #24
    4d6a:	f000 fd53 	bl	5814 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    4d6e:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    4d72:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    4d76:	9000      	str	r0, [sp, #0]
    4d78:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    4d7c:	4938      	ldr	r1, [pc, #224]	; (4e60 <menu2()+0x330>)
    4d7e:	4821      	ldr	r0, [pc, #132]	; (4e04 <menu2()+0x2d4>)
    4d80:	f008 fe5e 	bl	da40 <Print::printf(char const*, ...)>
    4d84:	e72e      	b.n	4be4 <menu2()+0xb4>
    4d86:	210c      	movs	r1, #12
    4d88:	4836      	ldr	r0, [pc, #216]	; (4e64 <menu2()+0x334>)
    4d8a:	f00b f9c3 	bl	10114 <usb_serial_write>
    else if(ch=='c') { Serial.print("proc  (c) = "); Serial.println(proc); }
    4d8e:	4b36      	ldr	r3, [pc, #216]	; (4e68 <menu2()+0x338>)
    4d90:	e769      	b.n	4c66 <menu2()+0x136>
    4d92:	210a      	movs	r1, #10
    4d94:	4835      	ldr	r0, [pc, #212]	; (4e6c <menu2()+0x33c>)
    4d96:	f00b f9bd 	bl	10114 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    4d9a:	4835      	ldr	r0, [pc, #212]	; (4e70 <menu2()+0x340>)
    4d9c:	f00e f8b0 	bl	12f00 <strlen>
    4da0:	4601      	mov	r1, r0
    4da2:	4833      	ldr	r0, [pc, #204]	; (4e70 <menu2()+0x340>)
    4da4:	f00b f9b6 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4da8:	4816      	ldr	r0, [pc, #88]	; (4e04 <menu2()+0x2d4>)
    4daa:	f008 fe2d 	bl	da08 <Print::println()>
    4dae:	e719      	b.n	4be4 <menu2()+0xb4>
    4db0:	210c      	movs	r1, #12
    4db2:	4830      	ldr	r0, [pc, #192]	; (4e74 <menu2()+0x344>)
    4db4:	f00b f9ae 	bl	10114 <usb_serial_write>
    else if(ch=='a') { Serial.print("t_acq (a) = "); Serial.println(t_acq); }
    4db8:	4b2f      	ldr	r3, [pc, #188]	; (4e78 <menu2()+0x348>)
    4dba:	e786      	b.n	4cca <menu2()+0x19a>
    4dbc:	210c      	movs	r1, #12
    4dbe:	482f      	ldr	r0, [pc, #188]	; (4e7c <menu2()+0x34c>)
    4dc0:	f00b f9a8 	bl	10114 <usb_serial_write>
    else if(ch=='6') { Serial.print("d_rep (6) = "); Serial.println(d_rep); }
    4dc4:	4b2e      	ldr	r3, [pc, #184]	; (4e80 <menu2()+0x350>)
    4dc6:	e780      	b.n	4cca <menu2()+0x19a>
    4dc8:	210c      	movs	r1, #12
    4dca:	482e      	ldr	r0, [pc, #184]	; (4e84 <menu2()+0x354>)
    4dcc:	f00b f9a2 	bl	10114 <usb_serial_write>
    else if(ch=='5') { Serial.print("d_on  (5) = "); Serial.println(d_on); }
    4dd0:	4b2d      	ldr	r3, [pc, #180]	; (4e88 <menu2()+0x358>)
    4dd2:	e77a      	b.n	4cca <menu2()+0x19a>
    4dd4:	210c      	movs	r1, #12
    4dd6:	482d      	ldr	r0, [pc, #180]	; (4e8c <menu2()+0x35c>)
    4dd8:	f00b f99c 	bl	10114 <usb_serial_write>
    else if(ch=='4') { Serial.print("h_4   (4) = "); Serial.println(h_4); }
    4ddc:	4b2c      	ldr	r3, [pc, #176]	; (4e90 <menu2()+0x360>)
    4dde:	e774      	b.n	4cca <menu2()+0x19a>
    4de0:	210c      	movs	r1, #12
    4de2:	482c      	ldr	r0, [pc, #176]	; (4e94 <menu2()+0x364>)
    4de4:	f00b f996 	bl	10114 <usb_serial_write>
    else if(ch=='3') { Serial.print("h_3   (3) = "); Serial.println(h_3); }
    4de8:	4b2b      	ldr	r3, [pc, #172]	; (4e98 <menu2()+0x368>)
    4dea:	e76e      	b.n	4cca <menu2()+0x19a>
    4dec:	210c      	movs	r1, #12
    4dee:	482b      	ldr	r0, [pc, #172]	; (4e9c <menu2()+0x36c>)
    4df0:	f00b f990 	bl	10114 <usb_serial_write>
    else if(ch=='2') { Serial.print("h_2   (2) = "); Serial.println(h_2); }
    4df4:	4b2a      	ldr	r3, [pc, #168]	; (4ea0 <menu2()+0x370>)
    4df6:	e768      	b.n	4cca <menu2()+0x19a>
    4df8:	210c      	movs	r1, #12
    4dfa:	482a      	ldr	r0, [pc, #168]	; (4ea4 <menu2()+0x374>)
    4dfc:	f00b f98a 	bl	10114 <usb_serial_write>
    else if(ch=='1') { Serial.print("h_1   (1) = "); Serial.println(h_1); }
    4e00:	4b29      	ldr	r3, [pc, #164]	; (4ea8 <menu2()+0x378>)
    4e02:	e762      	b.n	4cca <menu2()+0x19a>
    4e04:	20008a6c 	.word	0x20008a6c
    4e08:	200009b8 	.word	0x200009b8
    4e0c:	20000604 	.word	0x20000604
    4e10:	200007d0 	.word	0x200007d0
    4e14:	2001603e 	.word	0x2001603e
    4e18:	20000664 	.word	0x20000664
    4e1c:	20000648 	.word	0x20000648
    4e20:	20000710 	.word	0x20000710
    4e24:	20016050 	.word	0x20016050
    4e28:	20000760 	.word	0x20000760
    4e2c:	20016052 	.word	0x20016052
    4e30:	20000750 	.word	0x20000750
    4e34:	20009424 	.word	0x20009424
    4e38:	2000068c 	.word	0x2000068c
    4e3c:	20015800 	.word	0x20015800
    4e40:	20000680 	.word	0x20000680
    4e44:	200157b0 	.word	0x200157b0
    4e48:	200006f0 	.word	0x200006f0
    4e4c:	2000b208 	.word	0x2000b208
    4e50:	20000730 	.word	0x20000730
    4e54:	20009418 	.word	0x20009418
    4e58:	20000700 	.word	0x20000700
    4e5c:	200093ec 	.word	0x200093ec
    4e60:	2000062c 	.word	0x2000062c
    4e64:	20000720 	.word	0x20000720
    4e68:	2001604a 	.word	0x2001604a
    4e6c:	20000674 	.word	0x20000674
    4e70:	20015710 	.word	0x20015710
    4e74:	20000740 	.word	0x20000740
    4e78:	20009422 	.word	0x20009422
    4e7c:	200007c0 	.word	0x200007c0
    4e80:	20016040 	.word	0x20016040
    4e84:	200007b0 	.word	0x200007b0
    4e88:	2000941a 	.word	0x2000941a
    4e8c:	200007a0 	.word	0x200007a0
    4e90:	20009420 	.word	0x20009420
    4e94:	20000790 	.word	0x20000790
    4e98:	2000941e 	.word	0x2000941e
    4e9c:	20000780 	.word	0x20000780
    4ea0:	2000941c 	.word	0x2000941c
    4ea4:	20000770 	.word	0x20000770
    4ea8:	20016046 	.word	0x20016046

00004eac <menu(short)>:
{
    4eac:	b538      	push	{r3, r4, r5, lr}
    4eae:	4604      	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    4eb0:	f00b f8c6 	bl	10040 <usb_serial_available>
  if(Serial.available())
    4eb4:	b908      	cbnz	r0, 4eba <menu(short)+0xe>
}
    4eb6:	4620      	mov	r0, r4
    4eb8:	bd38      	pop	{r3, r4, r5, pc}
        virtual int read() { return usb_serial_getchar(); }
    4eba:	f00b f905 	bl	100c8 <usb_serial_getchar>
    char ch=Serial.read();
    4ebe:	b2c0      	uxtb	r0, r0
    if(ch=='s') {Serial.print("\n Start"); adc_init(); adcStatus(); status=CLOSED;}
    4ec0:	2873      	cmp	r0, #115	; 0x73
    4ec2:	d02a      	beq.n	4f1a <menu(short)+0x6e>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    4ec4:	2821      	cmp	r0, #33	; 0x21
    4ec6:	d075      	beq.n	4fb4 <menu(short)+0x108>
    4ec8:	f1a0 033a 	sub.w	r3, r0, #58	; 0x3a
    4ecc:	b2da      	uxtb	r2, r3
    4ece:	2a3e      	cmp	r2, #62	; 0x3e
    4ed0:	d838      	bhi.n	4f44 <menu(short)+0x98>
    4ed2:	2b3e      	cmp	r3, #62	; 0x3e
    4ed4:	d836      	bhi.n	4f44 <menu(short)+0x98>
    4ed6:	e8df f003 	tbb	[pc, r3]
    4eda:	353f      	.short	0x353f
    4edc:	44353535 	.word	0x44353535
    4ee0:	35353535 	.word	0x35353535
    4ee4:	35353535 	.word	0x35353535
    4ee8:	35353535 	.word	0x35353535
    4eec:	35353535 	.word	0x35353535
    4ef0:	35353535 	.word	0x35353535
    4ef4:	35353535 	.word	0x35353535
    4ef8:	35353535 	.word	0x35353535
    4efc:	35353535 	.word	0x35353535
    4f00:	35473535 	.word	0x35473535
    4f04:	35354a35 	.word	0x35354a35
    4f08:	35353535 	.word	0x35353535
    4f0c:	35355035 	.word	0x35355035
    4f10:	355f3535 	.word	0x355f3535
    4f14:	35353562 	.word	0x35353562
    4f18:	6a          	.byte	0x6a
    4f19:	00          	.byte	0x00
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4f1a:	2107      	movs	r1, #7
    4f1c:	4827      	ldr	r0, [pc, #156]	; (4fbc <menu(short)+0x110>)
    4f1e:	f00b f8f9 	bl	10114 <usb_serial_write>
    if(ch=='s') {Serial.print("\n Start"); adc_init(); adcStatus(); status=CLOSED;}
    4f22:	2400      	movs	r4, #0
    4f24:	f7fb ff80 	bl	e28 <adc_init()>
    4f28:	f7fc f898 	bl	105c <adcStatus()>
    4f2c:	e004      	b.n	4f38 <menu(short)+0x8c>
        virtual int read() { return usb_serial_getchar(); }
    4f2e:	f00b f8cb 	bl	100c8 <usb_serial_getchar>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4f32:	b2c0      	uxtb	r0, r0
    4f34:	f00b f8d8 	bl	100e8 <usb_serial_putchar>
        virtual int available() { return usb_serial_available(); }
    4f38:	f00b f882 	bl	10040 <usb_serial_available>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    4f3c:	2800      	cmp	r0, #0
    4f3e:	d1f6      	bne.n	4f2e <menu(short)+0x82>
}
    4f40:	4620      	mov	r0, r4
    4f42:	bd38      	pop	{r3, r4, r5, pc}
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4f44:	f00b f8d0 	bl	100e8 <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4f48:	2140      	movs	r1, #64	; 0x40
    4f4a:	481d      	ldr	r0, [pc, #116]	; (4fc0 <menu(short)+0x114>)
    4f4c:	f00b f8e2 	bl	10114 <usb_serial_write>
    4f50:	481c      	ldr	r0, [pc, #112]	; (4fc4 <menu(short)+0x118>)
    4f52:	f008 fd59 	bl	da08 <Print::println()>
    4f56:	e7ef      	b.n	4f38 <menu(short)+0x8c>
    else if(ch==':') status=menu1(status); 
    4f58:	4620      	mov	r0, r4
    4f5a:	f7ff fd33 	bl	49c4 <menu1(short)>
    4f5e:	4604      	mov	r4, r0
    4f60:	e7ea      	b.n	4f38 <menu(short)+0x8c>
    else if(ch=='?') menu2(); 
    4f62:	f7ff fde5 	bl	4b30 <menu2()>
    4f66:	e7e7      	b.n	4f38 <menu(short)+0x8c>
    else if(ch=='b') {reboot();}
    4f68:	f7fb f948 	bl	1fc <reboot()>
    4f6c:	e7e4      	b.n	4f38 <menu(short)+0x8c>
    4f6e:	2106      	movs	r1, #6
    4f70:	4815      	ldr	r0, [pc, #84]	; (4fc8 <menu(short)+0x11c>)
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    4f72:	2405      	movs	r4, #5
    4f74:	f00b f8ce 	bl	10114 <usb_serial_write>
    4f78:	e7de      	b.n	4f38 <menu(short)+0x8c>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    4f7a:	4d14      	ldr	r5, [pc, #80]	; (4fcc <menu(short)+0x120>)
    4f7c:	210a      	movs	r1, #10
    4f7e:	4814      	ldr	r0, [pc, #80]	; (4fd0 <menu(short)+0x124>)
    4f80:	882b      	ldrh	r3, [r5, #0]
    4f82:	f1c3 0301 	rsb	r3, r3, #1
    4f86:	802b      	strh	r3, [r5, #0]
    4f88:	f00b f8c4 	bl	10114 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4f8c:	f9b5 1000 	ldrsh.w	r1, [r5]
    4f90:	480c      	ldr	r0, [pc, #48]	; (4fc4 <menu(short)+0x118>)
    4f92:	f008 fd2d 	bl	d9f0 <Print::print(long)>
    4f96:	e7cf      	b.n	4f38 <menu(short)+0x8c>
    else if(ch=='r') {resetUSB();}
    4f98:	f7fb f900 	bl	19c <resetUSB()>
    4f9c:	e7cc      	b.n	4f38 <menu(short)+0x8c>
    else if(ch=='t') {hibernate_init(); hibernate_now(rtc_get()+30);}
    4f9e:	f7fd f8d9 	bl	2154 <hibernate_init()>
    4fa2:	f009 fdab 	bl	eafc <rtc_get>
    4fa6:	301e      	adds	r0, #30
    4fa8:	f7fd f8f4 	bl	2194 <hibernate_now(unsigned long)>
    4fac:	e7c4      	b.n	4f38 <menu(short)+0x8c>
    else if(ch=='x') {powerDown();}
    4fae:	f7fd f8c7 	bl	2140 <powerDown()>
    4fb2:	e7c1      	b.n	4f38 <menu(short)+0x8c>
    else if(ch=='!') menu3(); 
    4fb4:	f7ff fb40 	bl	4638 <menu3()>
    4fb8:	e7be      	b.n	4f38 <menu(short)+0x8c>
    4fba:	bf00      	nop
    4fbc:	20000584 	.word	0x20000584
    4fc0:	200005a0 	.word	0x200005a0
    4fc4:	20008a6c 	.word	0x20008a6c
    4fc8:	2000058c 	.word	0x2000058c
    4fcc:	20016048 	.word	0x20016048
    4fd0:	20000594 	.word	0x20000594

00004fd4 <getStore()>:
uint16_t *getStore(void) {return store;}
    4fd4:	4800      	ldr	r0, [pc, #0]	; (4fd8 <getStore()+0x4>)
    4fd6:	4770      	bx	lr
    4fd8:	20014a5c 	.word	0x20014a5c

00004fdc <decodeConfigfromFile(char*)>:

char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }

void decodeConfigfromFile(char *configText)
{
  if(configText)
    4fdc:	2800      	cmp	r0, #0
    4fde:	f000 8092 	beq.w	5106 <decodeConfigfromFile(char*)+0x12a>
{
    4fe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4fe6:	b083      	sub	sp, #12
    4fe8:	4604      	mov	r4, r0
  {
    char *cptr=configText;
    char *eptr=cptr+strlen(configText);
    4fea:	f00d ff89 	bl	12f00 <strlen>
    4fee:	4601      	mov	r1, r0
    4ff0:	4620      	mov	r0, r4
    4ff2:	1865      	adds	r5, r4, r1
    4ff4:	f00b f88e 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4ff8:	4891      	ldr	r0, [pc, #580]	; (5240 <decodeConfigfromFile(char*)+0x264>)
    4ffa:	f008 fd05 	bl	da08 <Print::println()>
    Serial.println(configText);
    while(cptr<eptr)
    4ffe:	42ac      	cmp	r4, r5
    5000:	d275      	bcs.n	50ee <decodeConfigfromFile(char*)+0x112>
  sscanf(txt,"%hd",&val);
    5002:	4e90      	ldr	r6, [pc, #576]	; (5244 <decodeConfigfromFile(char*)+0x268>)
      else if(ch=='4') { store[9]=h_4=  configGetInt16(cptr); cptr=skipEOL(cptr); }
      else if(ch=='5') { store[10]=d_on= configGetInt16(cptr); cptr=skipEOL(cptr); }
      else if(ch=='6') { store[11]=d_rep=configGetInt16(cptr); cptr=skipEOL(cptr); }
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
      else if(ch=='g') { store[13]=again= configGetInt16(cptr); cptr=skipEOL(cptr); setAGain(again);      }
      else if(ch=='0') { store[15]=d_0=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    5004:	f8df 8260 	ldr.w	r8, [pc, #608]	; 5268 <decodeConfigfromFile(char*)+0x28c>
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
    5008:	4f8f      	ldr	r7, [pc, #572]	; (5248 <decodeConfigfromFile(char*)+0x26c>)
      char ch=*cptr++;
    500a:	f814 3b01 	ldrb.w	r3, [r4], #1
      if(ch<=' ') continue;
    500e:	2b20      	cmp	r3, #32
    5010:	d96b      	bls.n	50ea <decodeConfigfromFile(char*)+0x10e>
      else if(ch==';') cptr=skipEOL(cptr);
    5012:	3b30      	subs	r3, #48	; 0x30
    5014:	2b47      	cmp	r3, #71	; 0x47
    5016:	d868      	bhi.n	50ea <decodeConfigfromFile(char*)+0x10e>
    5018:	e8df f013 	tbh	[pc, r3, lsl #1]
    501c:	020b0223 	.word	0x020b0223
    5020:	01db01f3 	.word	0x01db01f3
    5024:	01ab01c3 	.word	0x01ab01c3
    5028:	00670193 	.word	0x00670193
    502c:	00670067 	.word	0x00670067
    5030:	006e0067 	.word	0x006e0067
    5034:	00670067 	.word	0x00670067
    5038:	00670067 	.word	0x00670067
    503c:	00670067 	.word	0x00670067
    5040:	00670067 	.word	0x00670067
    5044:	00670067 	.word	0x00670067
    5048:	00670067 	.word	0x00670067
    504c:	00670067 	.word	0x00670067
    5050:	00670067 	.word	0x00670067
    5054:	00670067 	.word	0x00670067
    5058:	00670067 	.word	0x00670067
    505c:	00670067 	.word	0x00670067
    5060:	00670067 	.word	0x00670067
    5064:	00670067 	.word	0x00670067
    5068:	00670067 	.word	0x00670067
    506c:	00670067 	.word	0x00670067
    5070:	00670067 	.word	0x00670067
    5074:	00670067 	.word	0x00670067
    5078:	00670067 	.word	0x00670067
    507c:	017b0067 	.word	0x017b0067
    5080:	0145015c 	.word	0x0145015c
    5084:	00670067 	.word	0x00670067
    5088:	012a0048 	.word	0x012a0048
    508c:	00670067 	.word	0x00670067
    5090:	00f30067 	.word	0x00f30067
    5094:	00670067 	.word	0x00670067
    5098:	00bc00d4 	.word	0x00bc00d4
    509c:	00670067 	.word	0x00670067
    50a0:	008b00a4 	.word	0x008b00a4
    50a4:	00670067 	.word	0x00670067
    50a8:	00760067 	.word	0x00760067
      if(ch<=' ') continue;
    50ac:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    50ae:	f810 3b01 	ldrb.w	r3, [r0], #1
    50b2:	2b3d      	cmp	r3, #61	; 0x3d
    50b4:	d1fb      	bne.n	50ae <decodeConfigfromFile(char*)+0xd2>
  sscanf(txt,"%ld",&val);
    50b6:	aa01      	add	r2, sp, #4
    50b8:	4964      	ldr	r1, [pc, #400]	; (524c <decodeConfigfromFile(char*)+0x270>)
    50ba:	f00d f9b3 	bl	12424 <sscanf>
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
    50be:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 526c <decodeConfigfromFile(char*)+0x290>
  return val;
    50c2:	9b01      	ldr	r3, [sp, #4]
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
    50c4:	f8c9 3000 	str.w	r3, [r9]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    50c8:	f814 3b01 	ldrb.w	r3, [r4], #1
    50cc:	2b1f      	cmp	r3, #31
    50ce:	d8fb      	bhi.n	50c8 <decodeConfigfromFile(char*)+0xec>
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
    50d0:	f8d9 0000 	ldr.w	r0, [r9]
    50d4:	f7fb fe50 	bl	d78 <acqModifyFrequency(unsigned long)>
    50d8:	f8d9 3000 	ldr.w	r3, [r9]
    50dc:	4a5c      	ldr	r2, [pc, #368]	; (5250 <decodeConfigfromFile(char*)+0x274>)
    50de:	fb87 0103 	smull	r0, r1, r7, r3
    50e2:	17db      	asrs	r3, r3, #31
    50e4:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
    50e8:	8313      	strh	r3, [r2, #24]
    while(cptr<eptr)
    50ea:	42a5      	cmp	r5, r4
    50ec:	d88d      	bhi.n	500a <decodeConfigfromFile(char*)+0x2e>
      else if(ch=='k') { configGetString(cptr,(char *)&k_string[0]); cptr=skipEOL(cptr); }
      else if(ch=='n') { configGetString(cptr,(char *)&n_string[0]); cptr=skipEOL(cptr); }
    }
    printPar();
  }
}
    50ee:	b003      	add	sp, #12
    50f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    printPar();
    50f4:	f7ff b99a 	b.w	442c <printPar()>
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    50f8:	f814 3b01 	ldrb.w	r3, [r4], #1
    50fc:	2b1f      	cmp	r3, #31
    50fe:	d8fb      	bhi.n	50f8 <decodeConfigfromFile(char*)+0x11c>
    while(cptr<eptr)
    5100:	42a5      	cmp	r5, r4
    5102:	d882      	bhi.n	500a <decodeConfigfromFile(char*)+0x2e>
    5104:	e7f3      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
    5106:	4770      	bx	lr
      if(ch<=' ') continue;
    5108:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    510a:	f810 3b01 	ldrb.w	r3, [r0], #1
    510e:	2b3d      	cmp	r3, #61	; 0x3d
    5110:	d1fb      	bne.n	510a <decodeConfigfromFile(char*)+0x12e>
  sscanf(txt,"%hd",&val);
    5112:	aa01      	add	r2, sp, #4
    5114:	4631      	mov	r1, r6
    5116:	f00d f985 	bl	12424 <sscanf>
  return val;
    511a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
      else if(ch=='w') { store[0]=configGetInt16(cptr); cptr=skipEOL(cptr); }
    511e:	4b4c      	ldr	r3, [pc, #304]	; (5250 <decodeConfigfromFile(char*)+0x274>)
    5120:	801a      	strh	r2, [r3, #0]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5122:	f814 3b01 	ldrb.w	r3, [r4], #1
    5126:	2b1f      	cmp	r3, #31
    5128:	d8fb      	bhi.n	5122 <decodeConfigfromFile(char*)+0x146>
    while(cptr<eptr)
    512a:	42a5      	cmp	r5, r4
    512c:	f63f af6d 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    5130:	e7dd      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5132:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5134:	f810 3b01 	ldrb.w	r3, [r0], #1
    5138:	2b3d      	cmp	r3, #61	; 0x3d
    513a:	d1fb      	bne.n	5134 <decodeConfigfromFile(char*)+0x158>
  sscanf(txt,"%hd",&val);
    513c:	aa01      	add	r2, sp, #4
    513e:	4631      	mov	r1, r6
    5140:	f00d f970 	bl	12424 <sscanf>
  return val;
    5144:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
      else if(ch=='s') { store[5]=shift=configGetInt16(cptr); cptr=skipEOL(cptr);if(shift<0) shift=0; }
    5148:	4b42      	ldr	r3, [pc, #264]	; (5254 <decodeConfigfromFile(char*)+0x278>)
    514a:	4941      	ldr	r1, [pc, #260]	; (5250 <decodeConfigfromFile(char*)+0x274>)
    514c:	801a      	strh	r2, [r3, #0]
    514e:	814a      	strh	r2, [r1, #10]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5150:	f814 2b01 	ldrb.w	r2, [r4], #1
    5154:	2a1f      	cmp	r2, #31
    5156:	d8fb      	bhi.n	5150 <decodeConfigfromFile(char*)+0x174>
      else if(ch=='s') { store[5]=shift=configGetInt16(cptr); cptr=skipEOL(cptr);if(shift<0) shift=0; }
    5158:	881a      	ldrh	r2, [r3, #0]
    515a:	0412      	lsls	r2, r2, #16
    515c:	d5c5      	bpl.n	50ea <decodeConfigfromFile(char*)+0x10e>
    515e:	2200      	movs	r2, #0
    5160:	801a      	strh	r2, [r3, #0]
    5162:	e7c2      	b.n	50ea <decodeConfigfromFile(char*)+0x10e>
      if(ch<=' ') continue;
    5164:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5166:	f810 3b01 	ldrb.w	r3, [r0], #1
    516a:	2b3d      	cmp	r3, #61	; 0x3d
    516c:	d1fb      	bne.n	5166 <decodeConfigfromFile(char*)+0x18a>
  sscanf(txt,"%hd",&val);
    516e:	aa01      	add	r2, sp, #4
    5170:	4631      	mov	r1, r6
    5172:	f00d f957 	bl	12424 <sscanf>
  return val;
    5176:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='r') { store[3]=t_rep=configGetInt16(cptr); cptr=skipEOL(cptr);}
    517a:	4a37      	ldr	r2, [pc, #220]	; (5258 <decodeConfigfromFile(char*)+0x27c>)
    517c:	b29b      	uxth	r3, r3
    517e:	8013      	strh	r3, [r2, #0]
    5180:	4a33      	ldr	r2, [pc, #204]	; (5250 <decodeConfigfromFile(char*)+0x274>)
    5182:	80d3      	strh	r3, [r2, #6]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5184:	f814 3b01 	ldrb.w	r3, [r4], #1
    5188:	2b1f      	cmp	r3, #31
    518a:	d8fb      	bhi.n	5184 <decodeConfigfromFile(char*)+0x1a8>
    while(cptr<eptr)
    518c:	42a5      	cmp	r5, r4
    518e:	f63f af3c 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    5192:	e7ac      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5194:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5196:	f810 3b01 	ldrb.w	r3, [r0], #1
    519a:	2b3d      	cmp	r3, #61	; 0x3d
    519c:	d1fb      	bne.n	5196 <decodeConfigfromFile(char*)+0x1ba>
  sscanf(txt,"%hd",&val);
    519e:	aa01      	add	r2, sp, #4
    51a0:	4631      	mov	r1, r6
    51a2:	f00d f93f 	bl	12424 <sscanf>
  return val;
    51a6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='o') { store[2]=t_on= configGetInt16(cptr); cptr=skipEOL(cptr);}
    51aa:	4a2c      	ldr	r2, [pc, #176]	; (525c <decodeConfigfromFile(char*)+0x280>)
    51ac:	b29b      	uxth	r3, r3
    51ae:	8013      	strh	r3, [r2, #0]
    51b0:	4a27      	ldr	r2, [pc, #156]	; (5250 <decodeConfigfromFile(char*)+0x274>)
    51b2:	8093      	strh	r3, [r2, #4]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    51b4:	f814 3b01 	ldrb.w	r3, [r4], #1
    51b8:	2b1f      	cmp	r3, #31
    51ba:	d8fb      	bhi.n	51b4 <decodeConfigfromFile(char*)+0x1d8>
    while(cptr<eptr)
    51bc:	42a5      	cmp	r5, r4
    51be:	f63f af24 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    51c2:	e794      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    51c4:	4622      	mov	r2, r4
{ while(*txt++ !='=') continue;
    51c6:	f812 3b01 	ldrb.w	r3, [r2], #1
    51ca:	2b3d      	cmp	r3, #61	; 0x3d
    51cc:	d1fb      	bne.n	51c6 <decodeConfigfromFile(char*)+0x1ea>
  while(*txt == ' ') txt++;
    51ce:	7813      	ldrb	r3, [r2, #0]
    51d0:	2b20      	cmp	r3, #32
    51d2:	d103      	bne.n	51dc <decodeConfigfromFile(char*)+0x200>
    51d4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    51d8:	2b20      	cmp	r3, #32
    51da:	d0fb      	beq.n	51d4 <decodeConfigfromFile(char*)+0x1f8>
  while (*txt !=';') *str++=*txt++;
    51dc:	2b3b      	cmp	r3, #59	; 0x3b
    51de:	4920      	ldr	r1, [pc, #128]	; (5260 <decodeConfigfromFile(char*)+0x284>)
    51e0:	d005      	beq.n	51ee <decodeConfigfromFile(char*)+0x212>
    51e2:	f801 3b01 	strb.w	r3, [r1], #1
    51e6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    51ea:	2b3b      	cmp	r3, #59	; 0x3b
    51ec:	d1f9      	bne.n	51e2 <decodeConfigfromFile(char*)+0x206>
  *str='\0';
    51ee:	2300      	movs	r3, #0
    51f0:	700b      	strb	r3, [r1, #0]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    51f2:	f814 3b01 	ldrb.w	r3, [r4], #1
    51f6:	2b1f      	cmp	r3, #31
    51f8:	d8fb      	bhi.n	51f2 <decodeConfigfromFile(char*)+0x216>
    while(cptr<eptr)
    51fa:	42a5      	cmp	r5, r4
    51fc:	f63f af05 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    5200:	e775      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5202:	4622      	mov	r2, r4
{ while(*txt++ !='=') continue;
    5204:	f812 3b01 	ldrb.w	r3, [r2], #1
    5208:	2b3d      	cmp	r3, #61	; 0x3d
    520a:	d1fb      	bne.n	5204 <decodeConfigfromFile(char*)+0x228>
  while(*txt == ' ') txt++;
    520c:	7813      	ldrb	r3, [r2, #0]
    520e:	2b20      	cmp	r3, #32
    5210:	d103      	bne.n	521a <decodeConfigfromFile(char*)+0x23e>
    5212:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    5216:	2b20      	cmp	r3, #32
    5218:	d0fb      	beq.n	5212 <decodeConfigfromFile(char*)+0x236>
  while (*txt !=';') *str++=*txt++;
    521a:	2b3b      	cmp	r3, #59	; 0x3b
    521c:	4911      	ldr	r1, [pc, #68]	; (5264 <decodeConfigfromFile(char*)+0x288>)
    521e:	d005      	beq.n	522c <decodeConfigfromFile(char*)+0x250>
    5220:	f801 3b01 	strb.w	r3, [r1], #1
    5224:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    5228:	2b3b      	cmp	r3, #59	; 0x3b
    522a:	d1f9      	bne.n	5220 <decodeConfigfromFile(char*)+0x244>
  *str='\0';
    522c:	2300      	movs	r3, #0
    522e:	700b      	strb	r3, [r1, #0]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5230:	f814 3b01 	ldrb.w	r3, [r4], #1
    5234:	2b1f      	cmp	r3, #31
    5236:	d8fb      	bhi.n	5230 <decodeConfigfromFile(char*)+0x254>
    while(cptr<eptr)
    5238:	42a5      	cmp	r5, r4
    523a:	f63f aee6 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    523e:	e756      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
    5240:	20008a6c 	.word	0x20008a6c
    5244:	2000049c 	.word	0x2000049c
    5248:	10624dd3 	.word	0x10624dd3
    524c:	200004a0 	.word	0x200004a0
    5250:	20014a5c 	.word	0x20014a5c
    5254:	20016050 	.word	0x20016050
    5258:	20016052 	.word	0x20016052
    525c:	20009424 	.word	0x20009424
    5260:	20015800 	.word	0x20015800
    5264:	200157b0 	.word	0x200157b0
    5268:	2001603e 	.word	0x2001603e
    526c:	200093ec 	.word	0x200093ec
      if(ch<=' ') continue;
    5270:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5272:	f810 3b01 	ldrb.w	r3, [r0], #1
    5276:	2b3d      	cmp	r3, #61	; 0x3d
    5278:	d1fb      	bne.n	5272 <decodeConfigfromFile(char*)+0x296>
  sscanf(txt,"%hd",&val);
    527a:	aa01      	add	r2, sp, #4
    527c:	4631      	mov	r1, r6
    527e:	f00d f8d1 	bl	12424 <sscanf>
  return val;
    5282:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='g') { store[13]=again= configGetInt16(cptr); cptr=skipEOL(cptr); setAGain(again);      }
    5286:	4a82      	ldr	r2, [pc, #520]	; (5490 <decodeConfigfromFile(char*)+0x4b4>)
    5288:	4982      	ldr	r1, [pc, #520]	; (5494 <decodeConfigfromFile(char*)+0x4b8>)
    528a:	8013      	strh	r3, [r2, #0]
    528c:	834b      	strh	r3, [r1, #26]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    528e:	f814 3b01 	ldrb.w	r3, [r4], #1
    5292:	2b1f      	cmp	r3, #31
    5294:	d8fb      	bhi.n	528e <decodeConfigfromFile(char*)+0x2b2>
      else if(ch=='g') { store[13]=again= configGetInt16(cptr); cptr=skipEOL(cptr); setAGain(again);      }
    5296:	8810      	ldrh	r0, [r2, #0]
    5298:	b240      	sxtb	r0, r0
    529a:	f7fb febf 	bl	101c <setAGain(signed char)>
    while(cptr<eptr)
    529e:	42a5      	cmp	r5, r4
    52a0:	f63f aeb3 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    52a4:	e723      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    52a6:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    52a8:	f810 3b01 	ldrb.w	r3, [r0], #1
    52ac:	2b3d      	cmp	r3, #61	; 0x3d
    52ae:	d1fb      	bne.n	52a8 <decodeConfigfromFile(char*)+0x2cc>
  sscanf(txt,"%hd",&val);
    52b0:	aa01      	add	r2, sp, #4
    52b2:	4631      	mov	r1, r6
    52b4:	f00d f8b6 	bl	12424 <sscanf>
  return val;
    52b8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='c') { store[4]=proc= configGetInt16(cptr); cptr=skipEOL(cptr);}
    52bc:	4a76      	ldr	r2, [pc, #472]	; (5498 <decodeConfigfromFile(char*)+0x4bc>)
    52be:	8013      	strh	r3, [r2, #0]
    52c0:	4a74      	ldr	r2, [pc, #464]	; (5494 <decodeConfigfromFile(char*)+0x4b8>)
    52c2:	8113      	strh	r3, [r2, #8]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    52c4:	f814 3b01 	ldrb.w	r3, [r4], #1
    52c8:	2b1f      	cmp	r3, #31
    52ca:	d8fb      	bhi.n	52c4 <decodeConfigfromFile(char*)+0x2e8>
    while(cptr<eptr)
    52cc:	42a5      	cmp	r5, r4
    52ce:	f63f ae9c 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    52d2:	e70c      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    52d4:	4622      	mov	r2, r4
{ while(*txt++ !='=') continue;
    52d6:	f812 3b01 	ldrb.w	r3, [r2], #1
    52da:	2b3d      	cmp	r3, #61	; 0x3d
    52dc:	d1fb      	bne.n	52d6 <decodeConfigfromFile(char*)+0x2fa>
  while(*txt == ' ') txt++;
    52de:	7813      	ldrb	r3, [r2, #0]
    52e0:	2b20      	cmp	r3, #32
    52e2:	d103      	bne.n	52ec <decodeConfigfromFile(char*)+0x310>
    52e4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    52e8:	2b20      	cmp	r3, #32
    52ea:	d0fb      	beq.n	52e4 <decodeConfigfromFile(char*)+0x308>
  while (*txt !=';') *str++=*txt++;
    52ec:	2b3b      	cmp	r3, #59	; 0x3b
    52ee:	496b      	ldr	r1, [pc, #428]	; (549c <decodeConfigfromFile(char*)+0x4c0>)
    52f0:	d005      	beq.n	52fe <decodeConfigfromFile(char*)+0x322>
    52f2:	f801 3b01 	strb.w	r3, [r1], #1
    52f6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    52fa:	2b3b      	cmp	r3, #59	; 0x3b
    52fc:	d1f9      	bne.n	52f2 <decodeConfigfromFile(char*)+0x316>
  *str='\0';
    52fe:	2300      	movs	r3, #0
    5300:	700b      	strb	r3, [r1, #0]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5302:	f814 3b01 	ldrb.w	r3, [r4], #1
    5306:	2b1f      	cmp	r3, #31
    5308:	d8fb      	bhi.n	5302 <decodeConfigfromFile(char*)+0x326>
    while(cptr<eptr)
    530a:	42a5      	cmp	r5, r4
    530c:	f63f ae7d 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    5310:	e6ed      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5312:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5314:	f810 3b01 	ldrb.w	r3, [r0], #1
    5318:	2b3d      	cmp	r3, #61	; 0x3d
    531a:	d1fb      	bne.n	5314 <decodeConfigfromFile(char*)+0x338>
  sscanf(txt,"%hd",&val);
    531c:	aa01      	add	r2, sp, #4
    531e:	4631      	mov	r1, r6
    5320:	f00d f880 	bl	12424 <sscanf>
  return val;
    5324:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='a') { store[1]=t_acq=configGetInt16(cptr); cptr=skipEOL(cptr);}
    5328:	4a5d      	ldr	r2, [pc, #372]	; (54a0 <decodeConfigfromFile(char*)+0x4c4>)
    532a:	b29b      	uxth	r3, r3
    532c:	8013      	strh	r3, [r2, #0]
    532e:	4a59      	ldr	r2, [pc, #356]	; (5494 <decodeConfigfromFile(char*)+0x4b8>)
    5330:	8053      	strh	r3, [r2, #2]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5332:	f814 3b01 	ldrb.w	r3, [r4], #1
    5336:	2b1f      	cmp	r3, #31
    5338:	d8fb      	bhi.n	5332 <decodeConfigfromFile(char*)+0x356>
    while(cptr<eptr)
    533a:	42a5      	cmp	r5, r4
    533c:	f63f ae65 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    5340:	e6d5      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5342:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5344:	f810 3b01 	ldrb.w	r3, [r0], #1
    5348:	2b3d      	cmp	r3, #61	; 0x3d
    534a:	d1fb      	bne.n	5344 <decodeConfigfromFile(char*)+0x368>
  sscanf(txt,"%hd",&val);
    534c:	aa01      	add	r2, sp, #4
    534e:	4631      	mov	r1, r6
    5350:	f00d f868 	bl	12424 <sscanf>
  return val;
    5354:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='6') { store[11]=d_rep=configGetInt16(cptr); cptr=skipEOL(cptr); }
    5358:	4a52      	ldr	r2, [pc, #328]	; (54a4 <decodeConfigfromFile(char*)+0x4c8>)
    535a:	b29b      	uxth	r3, r3
    535c:	8013      	strh	r3, [r2, #0]
    535e:	4a4d      	ldr	r2, [pc, #308]	; (5494 <decodeConfigfromFile(char*)+0x4b8>)
    5360:	82d3      	strh	r3, [r2, #22]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5362:	f814 3b01 	ldrb.w	r3, [r4], #1
    5366:	2b1f      	cmp	r3, #31
    5368:	d8fb      	bhi.n	5362 <decodeConfigfromFile(char*)+0x386>
    while(cptr<eptr)
    536a:	42a5      	cmp	r5, r4
    536c:	f63f ae4d 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    5370:	e6bd      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5372:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5374:	f810 3b01 	ldrb.w	r3, [r0], #1
    5378:	2b3d      	cmp	r3, #61	; 0x3d
    537a:	d1fb      	bne.n	5374 <decodeConfigfromFile(char*)+0x398>
  sscanf(txt,"%hd",&val);
    537c:	aa01      	add	r2, sp, #4
    537e:	4631      	mov	r1, r6
    5380:	f00d f850 	bl	12424 <sscanf>
  return val;
    5384:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='5') { store[10]=d_on= configGetInt16(cptr); cptr=skipEOL(cptr); }
    5388:	4a47      	ldr	r2, [pc, #284]	; (54a8 <decodeConfigfromFile(char*)+0x4cc>)
    538a:	b29b      	uxth	r3, r3
    538c:	8013      	strh	r3, [r2, #0]
    538e:	4a41      	ldr	r2, [pc, #260]	; (5494 <decodeConfigfromFile(char*)+0x4b8>)
    5390:	8293      	strh	r3, [r2, #20]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5392:	f814 3b01 	ldrb.w	r3, [r4], #1
    5396:	2b1f      	cmp	r3, #31
    5398:	d8fb      	bhi.n	5392 <decodeConfigfromFile(char*)+0x3b6>
    while(cptr<eptr)
    539a:	42a5      	cmp	r5, r4
    539c:	f63f ae35 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    53a0:	e6a5      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    53a2:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    53a4:	f810 3b01 	ldrb.w	r3, [r0], #1
    53a8:	2b3d      	cmp	r3, #61	; 0x3d
    53aa:	d1fb      	bne.n	53a4 <decodeConfigfromFile(char*)+0x3c8>
  sscanf(txt,"%hd",&val);
    53ac:	aa01      	add	r2, sp, #4
    53ae:	4631      	mov	r1, r6
    53b0:	f00d f838 	bl	12424 <sscanf>
  return val;
    53b4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='4') { store[9]=h_4=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    53b8:	4a3c      	ldr	r2, [pc, #240]	; (54ac <decodeConfigfromFile(char*)+0x4d0>)
    53ba:	b29b      	uxth	r3, r3
    53bc:	8013      	strh	r3, [r2, #0]
    53be:	4a35      	ldr	r2, [pc, #212]	; (5494 <decodeConfigfromFile(char*)+0x4b8>)
    53c0:	8253      	strh	r3, [r2, #18]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    53c2:	f814 3b01 	ldrb.w	r3, [r4], #1
    53c6:	2b1f      	cmp	r3, #31
    53c8:	d8fb      	bhi.n	53c2 <decodeConfigfromFile(char*)+0x3e6>
    while(cptr<eptr)
    53ca:	42a5      	cmp	r5, r4
    53cc:	f63f ae1d 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    53d0:	e68d      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    53d2:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    53d4:	f810 3b01 	ldrb.w	r3, [r0], #1
    53d8:	2b3d      	cmp	r3, #61	; 0x3d
    53da:	d1fb      	bne.n	53d4 <decodeConfigfromFile(char*)+0x3f8>
  sscanf(txt,"%hd",&val);
    53dc:	aa01      	add	r2, sp, #4
    53de:	4631      	mov	r1, r6
    53e0:	f00d f820 	bl	12424 <sscanf>
  return val;
    53e4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='3') { store[8]=h_3=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    53e8:	4a31      	ldr	r2, [pc, #196]	; (54b0 <decodeConfigfromFile(char*)+0x4d4>)
    53ea:	b29b      	uxth	r3, r3
    53ec:	8013      	strh	r3, [r2, #0]
    53ee:	4a29      	ldr	r2, [pc, #164]	; (5494 <decodeConfigfromFile(char*)+0x4b8>)
    53f0:	8213      	strh	r3, [r2, #16]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    53f2:	f814 3b01 	ldrb.w	r3, [r4], #1
    53f6:	2b1f      	cmp	r3, #31
    53f8:	d8fb      	bhi.n	53f2 <decodeConfigfromFile(char*)+0x416>
    while(cptr<eptr)
    53fa:	42a5      	cmp	r5, r4
    53fc:	f63f ae05 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    5400:	e675      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5402:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5404:	f810 3b01 	ldrb.w	r3, [r0], #1
    5408:	2b3d      	cmp	r3, #61	; 0x3d
    540a:	d1fb      	bne.n	5404 <decodeConfigfromFile(char*)+0x428>
  sscanf(txt,"%hd",&val);
    540c:	aa01      	add	r2, sp, #4
    540e:	4631      	mov	r1, r6
    5410:	f00d f808 	bl	12424 <sscanf>
  return val;
    5414:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='2') { store[7]=h_2=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    5418:	4a26      	ldr	r2, [pc, #152]	; (54b4 <decodeConfigfromFile(char*)+0x4d8>)
    541a:	b29b      	uxth	r3, r3
    541c:	8013      	strh	r3, [r2, #0]
    541e:	4a1d      	ldr	r2, [pc, #116]	; (5494 <decodeConfigfromFile(char*)+0x4b8>)
    5420:	81d3      	strh	r3, [r2, #14]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5422:	f814 3b01 	ldrb.w	r3, [r4], #1
    5426:	2b1f      	cmp	r3, #31
    5428:	d8fb      	bhi.n	5422 <decodeConfigfromFile(char*)+0x446>
    while(cptr<eptr)
    542a:	42a5      	cmp	r5, r4
    542c:	f63f aded 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    5430:	e65d      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5432:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5434:	f810 3b01 	ldrb.w	r3, [r0], #1
    5438:	2b3d      	cmp	r3, #61	; 0x3d
    543a:	d1fb      	bne.n	5434 <decodeConfigfromFile(char*)+0x458>
  sscanf(txt,"%hd",&val);
    543c:	aa01      	add	r2, sp, #4
    543e:	4631      	mov	r1, r6
    5440:	f00c fff0 	bl	12424 <sscanf>
  return val;
    5444:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='1') { store[6]=h_1=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    5448:	4a1b      	ldr	r2, [pc, #108]	; (54b8 <decodeConfigfromFile(char*)+0x4dc>)
    544a:	b29b      	uxth	r3, r3
    544c:	8013      	strh	r3, [r2, #0]
    544e:	4a11      	ldr	r2, [pc, #68]	; (5494 <decodeConfigfromFile(char*)+0x4b8>)
    5450:	8193      	strh	r3, [r2, #12]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5452:	f814 3b01 	ldrb.w	r3, [r4], #1
    5456:	2b1f      	cmp	r3, #31
    5458:	d8fb      	bhi.n	5452 <decodeConfigfromFile(char*)+0x476>
    while(cptr<eptr)
    545a:	42a5      	cmp	r5, r4
    545c:	f63f add5 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    5460:	e645      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5462:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5464:	f810 3b01 	ldrb.w	r3, [r0], #1
    5468:	2b3d      	cmp	r3, #61	; 0x3d
    546a:	d1fb      	bne.n	5464 <decodeConfigfromFile(char*)+0x488>
  sscanf(txt,"%hd",&val);
    546c:	aa01      	add	r2, sp, #4
    546e:	4631      	mov	r1, r6
    5470:	f00c ffd8 	bl	12424 <sscanf>
  return val;
    5474:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='0') { store[15]=d_0=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    5478:	4a06      	ldr	r2, [pc, #24]	; (5494 <decodeConfigfromFile(char*)+0x4b8>)
    547a:	f8a8 3000 	strh.w	r3, [r8]
    547e:	83d3      	strh	r3, [r2, #30]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5480:	f814 3b01 	ldrb.w	r3, [r4], #1
    5484:	2b1f      	cmp	r3, #31
    5486:	d8fb      	bhi.n	5480 <decodeConfigfromFile(char*)+0x4a4>
    while(cptr<eptr)
    5488:	42a5      	cmp	r5, r4
    548a:	f63f adbe 	bhi.w	500a <decodeConfigfromFile(char*)+0x2e>
    548e:	e62e      	b.n	50ee <decodeConfigfromFile(char*)+0x112>
    5490:	20009418 	.word	0x20009418
    5494:	20014a5c 	.word	0x20014a5c
    5498:	2001604a 	.word	0x2001604a
    549c:	20015710 	.word	0x20015710
    54a0:	20009422 	.word	0x20009422
    54a4:	20016040 	.word	0x20016040
    54a8:	2000941a 	.word	0x2000941a
    54ac:	20009420 	.word	0x20009420
    54b0:	2000941e 	.word	0x2000941e
    54b4:	2000941c 	.word	0x2000941c
    54b8:	20016046 	.word	0x20016046

000054bc <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  static int head=0;
  static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    54bc:	4a04      	ldr	r2, [pc, #16]	; (54d0 <getDataCount()+0x14>)
    54be:	4b05      	ldr	r3, [pc, #20]	; (54d4 <getDataCount()+0x18>)
    54c0:	6810      	ldr	r0, [r2, #0]
    54c2:	681b      	ldr	r3, [r3, #0]
    54c4:	1ac0      	subs	r0, r0, r3
    54c6:	bf48      	it	mi
    54c8:	f500 5090 	addmi.w	r0, r0, #4608	; 0x1200
    54cc:	b280      	uxth	r0, r0
    54ce:	4770      	bx	lr
    54d0:	20014a30 	.word	0x20014a30
    54d4:	20014a2c 	.word	0x20014a2c

000054d8 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    54d8:	4b01      	ldr	r3, [pc, #4]	; (54e0 <queue_isBusy()+0x8>)
    54da:	6818      	ldr	r0, [r3, #0]
    54dc:	4770      	bx	lr
    54de:	bf00      	nop
    54e0:	2000e810 	.word	0x2000e810

000054e4 <pushData(unsigned long*)>:
        while(queue_busy); 
      #endif
  }

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    54e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    queue_lock();
    queue_busy=1;
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    54e6:	4d12      	ldr	r5, [pc, #72]	; (5530 <pushData(unsigned long*)+0x4c>)
  {
    54e8:	4601      	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    54ea:	4b12      	ldr	r3, [pc, #72]	; (5534 <pushData(unsigned long*)+0x50>)
    54ec:	682e      	ldr	r6, [r5, #0]
    54ee:	681f      	ldr	r7, [r3, #0]
    54f0:	4a11      	ldr	r2, [pc, #68]	; (5538 <pushData(unsigned long*)+0x54>)
    54f2:	1c73      	adds	r3, r6, #1
    54f4:	fb82 0203 	smull	r0, r2, r2, r3
    54f8:	17dc      	asrs	r4, r3, #31
    54fa:	ebc4 24a2 	rsb	r4, r4, r2, asr #10
    54fe:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    5502:	eba3 2444 	sub.w	r4, r3, r4, lsl #9
    5506:	42bc      	cmp	r4, r7
    5508:	d00c      	beq.n	5524 <pushData(unsigned long*)+0x40>
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    550a:	480c      	ldr	r0, [pc, #48]	; (553c <pushData(unsigned long*)+0x58>)
    550c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5510:	eb00 2046 	add.w	r0, r0, r6, lsl #9
    5514:	f009 f87e 	bl	e614 <memcpy>
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    5518:	4b09      	ldr	r3, [pc, #36]	; (5540 <pushData(unsigned long*)+0x5c>)
    551a:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
    551c:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    551e:	602c      	str	r4, [r5, #0]
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    5520:	601a      	str	r2, [r3, #0]
  }
    5522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    5524:	4b06      	ldr	r3, [pc, #24]	; (5540 <pushData(unsigned long*)+0x5c>)
    5526:	2200      	movs	r2, #0
    5528:	2000      	movs	r0, #0
    552a:	601a      	str	r2, [r3, #0]
  }
    552c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    552e:	bf00      	nop
    5530:	20014a30 	.word	0x20014a30
    5534:	20014a2c 	.word	0x20014a2c
    5538:	38e38e39 	.word	0x38e38e39
    553c:	70000000 	.word	0x70000000
    5540:	2000e810 	.word	0x2000e810

00005544 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    5544:	b538      	push	{r3, r4, r5, lr}
    queue_lock();
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    5546:	4d11      	ldr	r5, [pc, #68]	; (558c <pullData(unsigned long*)+0x48>)
    5548:	4b11      	ldr	r3, [pc, #68]	; (5590 <pullData(unsigned long*)+0x4c>)
    554a:	682c      	ldr	r4, [r5, #0]
    554c:	681b      	ldr	r3, [r3, #0]
    554e:	429c      	cmp	r4, r3
    5550:	d017      	beq.n	5582 <pullData(unsigned long*)+0x3e>
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    5552:	4910      	ldr	r1, [pc, #64]	; (5594 <pullData(unsigned long*)+0x50>)
    5554:	f44f 7200 	mov.w	r2, #512	; 0x200
    5558:	eb01 2144 	add.w	r1, r1, r4, lsl #9
    head = (head+1)%MAXBUF;
    555c:	3401      	adds	r4, #1
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    555e:	f009 f859 	bl	e614 <memcpy>
    head = (head+1)%MAXBUF;
    5562:	4a0d      	ldr	r2, [pc, #52]	; (5598 <pullData(unsigned long*)+0x54>)
    5564:	17e3      	asrs	r3, r4, #31
    queue_busy=0;
    return 1; // signal success.
    5566:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    5568:	fb82 1204 	smull	r1, r2, r2, r4
    556c:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    5570:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    5572:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    5576:	eba4 2443 	sub.w	r4, r4, r3, lsl #9
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    557a:	4b08      	ldr	r3, [pc, #32]	; (559c <pullData(unsigned long*)+0x58>)
    head = (head+1)%MAXBUF;
    557c:	602c      	str	r4, [r5, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    557e:	601a      	str	r2, [r3, #0]
  }
    5580:	bd38      	pop	{r3, r4, r5, pc}
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    5582:	4b06      	ldr	r3, [pc, #24]	; (559c <pullData(unsigned long*)+0x58>)
    5584:	2200      	movs	r2, #0
    5586:	2000      	movs	r0, #0
    5588:	601a      	str	r2, [r3, #0]
  }
    558a:	bd38      	pop	{r3, r4, r5, pc}
    558c:	20014a2c 	.word	0x20014a2c
    5590:	20014a30 	.word	0x20014a30
    5594:	70000000 	.word	0x70000000
    5598:	38e38e39 	.word	0x38e38e39
    559c:	2000e810 	.word	0x2000e810

000055a0 <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now time is minutes
    55a0:	4a54      	ldr	r2, [pc, #336]	; (56f4 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    55a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now time is minutes
    55a6:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    55aa:	f240 196d 	movw	r9, #365	; 0x16d
    55ae:	4e52      	ldr	r6, [pc, #328]	; (56f8 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now time is minutes
    55b0:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    55b2:	4f52      	ldr	r7, [pc, #328]	; (56fc <time2date(unsigned long, datetime_t*)+0x15c>)
    55b4:	f8df 8158 	ldr.w	r8, [pc, #344]	; 5710 <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now time is hours
    55b8:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now time is minutes
    55bc:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now time is hours
    55c0:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now time is minutes
    55c2:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now time is days
    55c6:	4c4e      	ldr	r4, [pc, #312]	; (5700 <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now time is hours
    55c8:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now time is days
    55cc:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now time is hours
    55d0:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now time is minutes
    55d4:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now time is days
    55d6:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now time is hours
    55da:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    55dc:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now time is days
    55e0:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    55e4:	4b47      	ldr	r3, [pc, #284]	; (5704 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now time is days
    55e6:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    55ea:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    55ee:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now time is days
    55f0:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    55f2:	1ae2      	subs	r2, r4, r3
    55f4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    55f8:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    55fa:	089b      	lsrs	r3, r3, #2
    55fc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    5600:	1ae4      	subs	r4, r4, r3
    5602:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    5604:	b2c3      	uxtb	r3, r0
    5606:	f240 1c6d 	movw	ip, #365	; 0x16d
    560a:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    560e:	f013 0403 	ands.w	r4, r3, #3
    5612:	fb06 f503 	mul.w	r5, r6, r3
    5616:	d108      	bne.n	562a <time2date(unsigned long, datetime_t*)+0x8a>
    5618:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    561c:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    5620:	d303      	bcc.n	562a <time2date(unsigned long, datetime_t*)+0x8a>
    5622:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    5626:	bf38      	it	cc
    5628:	46cc      	movcc	ip, r9
    562a:	4462      	add	r2, ip
    562c:	3001      	adds	r0, #1
    562e:	4596      	cmp	lr, r2
    5630:	d2e8      	bcs.n	5604 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    5632:	4d35      	ldr	r5, [pc, #212]	; (5708 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    5634:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    5636:	fba5 0503 	umull	r0, r5, r5, r3
    563a:	b3a4      	cbz	r4, 56a6 <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    563c:	096e      	lsrs	r6, r5, #5
    563e:	2764      	movs	r7, #100	; 0x64
    5640:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5644:	09ed      	lsrs	r5, r5, #7
    5646:	fb07 3616 	mls	r6, r7, r6, r3
    564a:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    564e:	f240 106d 	movw	r0, #365	; 0x16d
    time -= days; // now time is days in this year, starting at 0
    5652:	ebae 0e02 	sub.w	lr, lr, r2
    5656:	2300      	movs	r3, #0
    5658:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    565a:	4f2c      	ldr	r7, [pc, #176]	; (570c <time2date(unsigned long, datetime_t*)+0x16c>)
    time -= days; // now time is days in this year, starting at 0
    565c:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    565e:	e00a      	b.n	5676 <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    5660:	f813 c007 	ldrb.w	ip, [r3, r7]
    5664:	4584      	cmp	ip, r0
    5666:	d837      	bhi.n	56d8 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    5668:	2a0c      	cmp	r2, #12
        time -= monthLength;
    566a:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    566e:	d012      	beq.n	5696 <time2date(unsigned long, datetime_t*)+0xf6>
    5670:	3201      	adds	r2, #1
    5672:	3301      	adds	r3, #1
    5674:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    5676:	2b01      	cmp	r3, #1
    5678:	fa5f fe83 	uxtb.w	lr, r3
    567c:	d1f0      	bne.n	5660 <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    567e:	b91c      	cbnz	r4, 5688 <time2date(unsigned long, datetime_t*)+0xe8>
    5680:	b1f6      	cbz	r6, 56c0 <time2date(unsigned long, datetime_t*)+0x120>
    5682:	f04f 0c1d 	mov.w	ip, #29
    5686:	e001      	b.n	568c <time2date(unsigned long, datetime_t*)+0xec>
    5688:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    568c:	4560      	cmp	r0, ip
    568e:	d32d      	bcc.n	56ec <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    5690:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    5694:	e7ec      	b.n	5670 <time2date(unsigned long, datetime_t*)+0xd0>
    5696:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    569a:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    569c:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    56a0:	70c8      	strb	r0, [r1, #3]
  }
    56a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    56a6:	2064      	movs	r0, #100	; 0x64
    56a8:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    56aa:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    56ac:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    56b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    56b4:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    56b8:	b14e      	cbz	r6, 56ce <time2date(unsigned long, datetime_t*)+0x12e>
    56ba:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    56be:	e7c8      	b.n	5652 <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    56c0:	2d00      	cmp	r5, #0
    56c2:	bf14      	ite	ne
    56c4:	f04f 0c1c 	movne.w	ip, #28
    56c8:	f04f 0c1d 	moveq.w	ip, #29
    56cc:	e7de      	b.n	568c <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    56ce:	2d00      	cmp	r5, #0
    56d0:	d1bd      	bne.n	564e <time2date(unsigned long, datetime_t*)+0xae>
    56d2:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    56d6:	e7bc      	b.n	5652 <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    56d8:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    56dc:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    56de:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    56e2:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    56e4:	f881 e002 	strb.w	lr, [r1, #2]
  }
    56e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    56ec:	f04f 0e02 	mov.w	lr, #2
    56f0:	e7d3      	b.n	569a <time2date(unsigned long, datetime_t*)+0xfa>
    56f2:	bf00      	nop
    56f4:	88888889 	.word	0x88888889
    56f8:	c28f5c29 	.word	0xc28f5c29
    56fc:	028f5c28 	.word	0x028f5c28
    5700:	aaaaaaab 	.word	0xaaaaaaab
    5704:	24924925 	.word	0x24924925
    5708:	51eb851f 	.word	0x51eb851f
    570c:	20000acc 	.word	0x20000acc
    5710:	00a3d70a 	.word	0x00a3d70a

00005714 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    5714:	8801      	ldrh	r1, [r0, #0]
      if (LEAP_YEAR(ii)) {
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    #endif
    uint32_t days= year*365;
    5716:	f240 126d 	movw	r2, #365	; 0x16d
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    571a:	314e      	adds	r1, #78	; 0x4e
    571c:	b2c9      	uxtb	r1, r1
  {
    571e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t days= year*365;
    5722:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    5726:	b1d9      	cbz	r1, 5760 <date2time(datetime_t*)+0x4c>
    5728:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    572c:	f240 73b3 	movw	r3, #1971	; 0x7b3
    5730:	4d30      	ldr	r5, [pc, #192]	; (57f4 <date2time(datetime_t*)+0xe0>)
    5732:	4e31      	ldr	r6, [pc, #196]	; (57f8 <date2time(datetime_t*)+0xe4>)
    5734:	4f31      	ldr	r7, [pc, #196]	; (57fc <date2time(datetime_t*)+0xe8>)
    5736:	4563      	cmp	r3, ip
    5738:	fb05 f403 	mul.w	r4, r5, r3
    573c:	d010      	beq.n	5760 <date2time(datetime_t*)+0x4c>
    573e:	f013 0f03 	tst.w	r3, #3
    5742:	f103 0301 	add.w	r3, r3, #1
    5746:	d1f6      	bne.n	5736 <date2time(datetime_t*)+0x22>
    5748:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    574c:	d302      	bcc.n	5754 <date2time(datetime_t*)+0x40>
    574e:	ebb7 1f34 	cmp.w	r7, r4, ror #4
    5752:	d3f0      	bcc.n	5736 <date2time(datetime_t*)+0x22>
    5754:	4563      	cmp	r3, ip
    5756:	f102 0201 	add.w	r2, r2, #1
    575a:	fb05 f403 	mul.w	r4, r5, r3
    575e:	d1ee      	bne.n	573e <date2time(datetime_t*)+0x2a>
    seconds = days*SECS_PER_DAY;

    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    5760:	f990 e002 	ldrsb.w	lr, [r0, #2]
    seconds = days*SECS_PER_DAY;
    5764:	4d26      	ldr	r5, [pc, #152]	; (5800 <date2time(datetime_t*)+0xec>)
    for (ii = 1; ii < tm->month; ii++) {
    5766:	f1be 0f01 	cmp.w	lr, #1
    seconds = days*SECS_PER_DAY;
    576a:	fb05 f202 	mul.w	r2, r5, r2
    for (ii = 1; ii < tm->month; ii++) {
    576e:	dd29      	ble.n	57c4 <date2time(datetime_t*)+0xb0>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    5770:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    5774:	4e23      	ldr	r6, [pc, #140]	; (5804 <date2time(datetime_t*)+0xf0>)
    5776:	f44f 74c8 	mov.w	r4, #400	; 0x190
    577a:	f04f 0c64 	mov.w	ip, #100	; 0x64
    577e:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    5782:	f8df 8088 	ldr.w	r8, [pc, #136]	; 580c <date2time(datetime_t*)+0xf8>
    5786:	4920      	ldr	r1, [pc, #128]	; (5808 <date2time(datetime_t*)+0xf4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    5788:	0977      	lsrs	r7, r6, #5
    578a:	09f6      	lsrs	r6, r6, #7
    578c:	fb0c 3717 	mls	r7, ip, r7, r3
    5790:	fb04 3616 	mls	r6, r4, r6, r3
    5794:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    5798:	2301      	movs	r3, #1
    579a:	e007      	b.n	57ac <date2time(datetime_t*)+0x98>
    579c:	3301      	adds	r3, #1
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    579e:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    57a2:	3101      	adds	r1, #1
    57a4:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    57a6:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    57aa:	d00b      	beq.n	57c4 <date2time(datetime_t*)+0xb0>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    57ac:	2b02      	cmp	r3, #2
    57ae:	d1f5      	bne.n	579c <date2time(datetime_t*)+0x88>
    57b0:	2c00      	cmp	r4, #0
    57b2:	d1f3      	bne.n	579c <date2time(datetime_t*)+0x88>
    57b4:	b90f      	cbnz	r7, 57ba <date2time(datetime_t*)+0xa6>
    57b6:	2e00      	cmp	r6, #0
    57b8:	d1f0      	bne.n	579c <date2time(datetime_t*)+0x88>
    for (ii = 1; ii < tm->month; ii++) {
    57ba:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    57bc:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    57be:	3101      	adds	r1, #1
    57c0:	4573      	cmp	r3, lr
    57c2:	d1f3      	bne.n	57ac <date2time(datetime_t*)+0x98>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    57c4:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    57c8:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    57cc:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    57d0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    57d4:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    57d8:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    57da:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    57de:	f990 1003 	ldrsb.w	r1, [r0, #3]
    57e2:	4c07      	ldr	r4, [pc, #28]	; (5800 <date2time(datetime_t*)+0xec>)
    seconds+= tm->sec;
    57e4:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    57e6:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    57e8:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    57ec:	4410      	add	r0, r2
    57ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57f2:	bf00      	nop
    57f4:	c28f5c29 	.word	0xc28f5c29
    57f8:	028f5c28 	.word	0x028f5c28
    57fc:	00a3d70a 	.word	0x00a3d70a
    5800:	00015180 	.word	0x00015180
    5804:	51eb851f 	.word	0x51eb851f
    5808:	20000acc 	.word	0x20000acc
    580c:	00263b80 	.word	0x00263b80

00005810 <rtcGetTimestamp()>:
      return xrtc.stringTimeStamp();
    }
    #else
      return 0;
    #endif
  }
    5810:	2000      	movs	r0, #0
    5812:	4770      	bx	lr

00005814 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    5814:	b500      	push	{lr}
    5816:	b083      	sub	sp, #12
    5818:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    581a:	f009 f96f 	bl	eafc <rtc_get>
    581e:	9901      	ldr	r1, [sp, #4]
    5820:	f7ff febe 	bl	55a0 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    5824:	2001      	movs	r0, #1
    5826:	b003      	add	sp, #12
    5828:	f85d fb04 	ldr.w	pc, [sp], #4

0000582c <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    582c:	b570      	push	{r4, r5, r6, lr}
    582e:	b082      	sub	sp, #8
    5830:	4614      	mov	r4, r2
    5832:	460d      	mov	r5, r1
    5834:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    5836:	f009 f961 	bl	eafc <rtc_get>
    583a:	4669      	mov	r1, sp
    583c:	f7ff feb0 	bl	55a0 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    5840:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    5844:	4608      	mov	r0, r1
    t.month=month;
    5846:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    584a:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    584e:	f7ff ff61 	bl	5714 <date2time(datetime_t*)>
    5852:	f009 f965 	bl	eb20 <rtc_set>
    rtc_set_datetime(&t);
  }
    5856:	b002      	add	sp, #8
    5858:	bd70      	pop	{r4, r5, r6, pc}
    585a:	bf00      	nop

0000585c <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    585c:	b570      	push	{r4, r5, r6, lr}
    585e:	b082      	sub	sp, #8
    5860:	4614      	mov	r4, r2
    5862:	460d      	mov	r5, r1
    5864:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    5866:	f009 f949 	bl	eafc <rtc_get>
    586a:	4669      	mov	r1, sp
    586c:	f7ff fe98 	bl	55a0 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    5870:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    5874:	4608      	mov	r0, r1
    t.min=minutes;
    5876:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    587a:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    587e:	f7ff ff49 	bl	5714 <date2time(datetime_t*)>
    5882:	f009 f94d 	bl	eb20 <rtc_set>
    rtc_set_datetime(&t);
  }
    5886:	b002      	add	sp, #8
    5888:	bd70      	pop	{r4, r5, r6, pc}
    588a:	bf00      	nop

0000588c <XRTCprintTime()>:
    588c:	4770      	bx	lr
    588e:	bf00      	nop

00005890 <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    5890:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    5894:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    5898:	1a10      	subs	r0, r2, r0
    589a:	4770      	bx	lr

0000589c <dbgPrint(unsigned short)>:
#endif

#define DBG_FILE "Storage.cpp"

#if USE_DBG_MACROS==1
  static void dbgPrint(uint16_t line) {
    589c:	b538      	push	{r3, r4, r5, lr}
    589e:	210a      	movs	r1, #10
    58a0:	4604      	mov	r4, r0
    58a2:	480a      	ldr	r0, [pc, #40]	; (58cc <dbgPrint(unsigned short)+0x30>)
    58a4:	f00a fc36 	bl	10114 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    58a8:	4d09      	ldr	r5, [pc, #36]	; (58d0 <dbgPrint(unsigned short)+0x34>)
    58aa:	210b      	movs	r1, #11
    58ac:	4809      	ldr	r0, [pc, #36]	; (58d4 <dbgPrint(unsigned short)+0x38>)
    58ae:	f00a fc31 	bl	10114 <usb_serial_write>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    58b2:	202e      	movs	r0, #46	; 0x2e
    58b4:	f00a fc18 	bl	100e8 <usb_serial_putchar>
    58b8:	4621      	mov	r1, r4
    58ba:	4628      	mov	r0, r5
    58bc:	f008 f898 	bl	d9f0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    58c0:	4628      	mov	r0, r5
    Serial.print(F("DBG_FAIL: "));
    Serial.print(F(DBG_FILE));
    Serial.write('.');
    Serial.println(line);
  }
    58c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    58c6:	f008 b89f 	b.w	da08 <Print::println()>
    58ca:	bf00      	nop
    58cc:	200009e0 	.word	0x200009e0
    58d0:	20008a6c 	.word	0x20008a6c
    58d4:	200009ec 	.word	0x200009ec

000058d8 <MTPStorage_SD::OpenIndex() [clone .part.0]>:
    mtp_lock_storage(false);
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
    58d8:	b510      	push	{r4, lr}
    58da:	4604      	mov	r4, r0
    58dc:	b094      	sub	sp, #80	; 0x50
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    58de:	f240 2302 	movw	r3, #514	; 0x202
    58e2:	4a15      	ldr	r2, [pc, #84]	; (5938 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x60>)
    58e4:	4668      	mov	r0, sp
    58e6:	6d61      	ldr	r1, [r4, #84]	; 0x54
    58e8:	f005 fa46 	bl	ad78 <FsVolume::open(char const*, int)>
class Stream : public Print
    58ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
    58f0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    58f4:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    58f8:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    58fc:	e9c4 122a 	strd	r1, r2, [r4, #168]	; 0xa8
    5900:	a904      	add	r1, sp, #16
    5902:	f005 f8c5 	bl	aa90 <FsBaseFile::operator=(FsBaseFile const&)>
    5906:	4b0d      	ldr	r3, [pc, #52]	; (593c <MTPStorage_SD::OpenIndex() [clone .part.0]+0x64>)
  ~FsBaseFile() {close();}
    5908:	a804      	add	r0, sp, #16
    590a:	9300      	str	r3, [sp, #0]
    590c:	f005 f91a 	bl	ab44 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    5910:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    5914:	b10b      	cbz	r3, 591a <MTPStorage_SD::OpenIndex() [clone .part.0]+0x42>
    //
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, (O_RDWR | O_CREAT));
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    mtp_lock_storage(false);
  }
    5916:	b014      	add	sp, #80	; 0x50
    5918:	bd10      	pop	{r4, pc}
    591a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    591e:	2b00      	cmp	r3, #0
    5920:	d1f9      	bne.n	5916 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x3e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5922:	2117      	movs	r1, #23
    5924:	4806      	ldr	r0, [pc, #24]	; (5940 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x68>)
    5926:	f00a fbf5 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    592a:	4806      	ldr	r0, [pc, #24]	; (5944 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x6c>)
    592c:	b014      	add	sp, #80	; 0x50
    592e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5932:	f008 b869 	b.w	da08 <Print::println()>
    5936:	bf00      	nop
    5938:	20000afc 	.word	0x20000afc
    593c:	20000b98 	.word	0x20000b98
    5940:	20000b0c 	.word	0x20000b0c
    5944:	20008a6c 	.word	0x20008a6c

00005948 <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    5948:	2000      	movs	r0, #0
    594a:	4770      	bx	lr

0000594c <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    594c:	2001      	movs	r0, #1
    594e:	4770      	bx	lr

00005950 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
    5950:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    5954:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->clusterCount() :
    5956:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    595a:	b14b      	cbz	r3, 5970 <MTPStorage_SD::totalSize(unsigned long)+0x20>
    595c:	799a      	ldrb	r2, [r3, #6]
    595e:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    5962:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5964:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    5966:	3901      	subs	r1, #1
              *(uint64_t)sdx[store]->bytesPerCluster();  
    5968:	b280      	uxth	r0, r0
    596a:	fba0 0101 	umull	r0, r1, r0, r1
    596e:	4770      	bx	lr
    5970:	f8d2 0484 	ldr.w	r0, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    5974:	b130      	cbz	r0, 5984 <MTPStorage_SD::totalSize(unsigned long)+0x34>
    5976:	f8d0 1430 	ldr.w	r1, [r0, #1072]	; 0x430
    597a:	f8d0 043c 	ldr.w	r0, [r0, #1084]	; 0x43c
    597e:	fba1 0100 	umull	r0, r1, r1, r0
    5982:	4770      	bx	lr
    5984:	4601      	mov	r1, r0
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
    5986:	4770      	bx	lr

00005988 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    5988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    598c:	eb00 0681 	add.w	r6, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    5990:	6d72      	ldr	r2, [r6, #84]	; 0x54
    return m_fVol ? m_fVol->clusterCount() :
    5992:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    5996:	2b00      	cmp	r3, #0
    5998:	f000 80bc 	beq.w	5b14 <MTPStorage_SD::usedSize(unsigned long)+0x18c>
    599c:	69d9      	ldr	r1, [r3, #28]
    599e:	3901      	subs	r1, #1
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    59a0:	2300      	movs	r3, #0
    59a2:	220a      	movs	r2, #10
    59a4:	486a      	ldr	r0, [pc, #424]	; (5b50 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    59a6:	f008 f859 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    59aa:	4869      	ldr	r0, [pc, #420]	; (5b50 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    59ac:	f008 f82c 	bl	da08 <Print::println()>
        Serial.println(sdx[store]->freeClusterCount());
    59b0:	6d75      	ldr	r5, [r6, #84]	; 0x54
  uint32_t freeClusterCount() {
    59b2:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    59b6:	b120      	cbz	r0, 59c2 <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    59b8:	6803      	ldr	r3, [r0, #0]
    59ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    59bc:	4798      	blx	r3
    59be:	2800      	cmp	r0, #0
    59c0:	d16c      	bne.n	5a9c <MTPStorage_SD::usedSize(unsigned long)+0x114>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    59c2:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    59c4:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    59c8:	2800      	cmp	r0, #0
    59ca:	f000 808e 	beq.w	5aea <MTPStorage_SD::usedSize(unsigned long)+0x162>
    59ce:	f004 fec1 	bl	a754 <FatPartition::freeClusterCount()>
    59d2:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    59d4:	2f00      	cmp	r7, #0
    59d6:	f040 8091 	bne.w	5afc <MTPStorage_SD::usedSize(unsigned long)+0x174>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    59da:	2300      	movs	r3, #0
    59dc:	220a      	movs	r2, #10
    59de:	4621      	mov	r1, r4
    59e0:	485b      	ldr	r0, [pc, #364]	; (5b50 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    59e2:	f008 f83b 	bl	da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    59e6:	485a      	ldr	r0, [pc, #360]	; (5b50 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    59e8:	f008 f80e 	bl	da08 <Print::println()>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    59ec:	6d75      	ldr	r5, [r6, #84]	; 0x54
    return m_fVol ? m_fVol->clusterCount() :
    59ee:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    59f2:	2b00      	cmp	r3, #0
    59f4:	f000 8096 	beq.w	5b24 <MTPStorage_SD::usedSize(unsigned long)+0x19c>
    59f8:	69dc      	ldr	r4, [r3, #28]
    59fa:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    59fe:	3c01      	subs	r4, #1
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5a00:	2800      	cmp	r0, #0
    5a02:	d05f      	beq.n	5ac4 <MTPStorage_SD::usedSize(unsigned long)+0x13c>
    5a04:	6803      	ldr	r3, [r0, #0]
    5a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5a08:	4798      	blx	r3
    5a0a:	bb38      	cbnz	r0, 5a5c <MTPStorage_SD::usedSize(unsigned long)+0xd4>
    return m_fVol ? m_fVol->freeClusterCount() :
    5a0c:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5a10:	f04f 0800 	mov.w	r8, #0
    5a14:	2800      	cmp	r0, #0
    5a16:	d139      	bne.n	5a8c <MTPStorage_SD::usedSize(unsigned long)+0x104>
    5a18:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5a1c:	b11f      	cbz	r7, 5a26 <MTPStorage_SD::usedSize(unsigned long)+0x9e>
    5a1e:	4638      	mov	r0, r7
    5a20:	f002 ff18 	bl	8854 <ExFatPartition::freeClusterCount()>
    5a24:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5a26:	f1b8 0f00 	cmp.w	r8, #0
    5a2a:	d035      	beq.n	5a98 <MTPStorage_SD::usedSize(unsigned long)+0x110>
    5a2c:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    5a30:	b128      	cbz	r0, 5a3e <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    5a32:	6803      	ldr	r3, [r0, #0]
    5a34:	2100      	movs	r1, #0
    5a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5a38:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    5a3a:	b100      	cbz	r0, 5a3e <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    5a3c:	1be4      	subs	r4, r4, r7
    5a3e:	6d75      	ldr	r5, [r6, #84]	; 0x54
    return m_fVol ? m_fVol->bytesPerCluster() :
    5a40:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    5a44:	2b00      	cmp	r3, #0
    5a46:	d147      	bne.n	5ad8 <MTPStorage_SD::usedSize(unsigned long)+0x150>
    5a48:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    5a4c:	2800      	cmp	r0, #0
    5a4e:	d07a      	beq.n	5b46 <MTPStorage_SD::usedSize(unsigned long)+0x1be>
              *(uint64_t)sdx[store]->bytesPerCluster();  
    5a50:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    5a54:	fba4 0101 	umull	r0, r1, r4, r1
    5a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a5c:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    5a60:	2800      	cmp	r0, #0
    5a62:	d0ec      	beq.n	5a3e <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    5a64:	6803      	ldr	r3, [r0, #0]
    5a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5a68:	4798      	blx	r3
    5a6a:	2800      	cmp	r0, #0
    5a6c:	d1ce      	bne.n	5a0c <MTPStorage_SD::usedSize(unsigned long)+0x84>
    5a6e:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    5a72:	2800      	cmp	r0, #0
    5a74:	d0e3      	beq.n	5a3e <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    5a76:	6803      	ldr	r3, [r0, #0]
    5a78:	2101      	movs	r1, #1
    5a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5a7c:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    5a7e:	4680      	mov	r8, r0
    5a80:	2800      	cmp	r0, #0
    5a82:	d0dc      	beq.n	5a3e <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    return m_fVol ? m_fVol->freeClusterCount() :
    5a84:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    5a88:	2800      	cmp	r0, #0
    5a8a:	d0c5      	beq.n	5a18 <MTPStorage_SD::usedSize(unsigned long)+0x90>
    5a8c:	f004 fe62 	bl	a754 <FatPartition::freeClusterCount()>
    5a90:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5a92:	f1b8 0f00 	cmp.w	r8, #0
    5a96:	d1c9      	bne.n	5a2c <MTPStorage_SD::usedSize(unsigned long)+0xa4>
    5a98:	6d75      	ldr	r5, [r6, #84]	; 0x54
    5a9a:	e018      	b.n	5ace <MTPStorage_SD::usedSize(unsigned long)+0x146>
    5a9c:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    5aa0:	b170      	cbz	r0, 5ac0 <MTPStorage_SD::usedSize(unsigned long)+0x138>
    5aa2:	6803      	ldr	r3, [r0, #0]
    5aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5aa6:	4798      	blx	r3
    5aa8:	2800      	cmp	r0, #0
    5aaa:	d18a      	bne.n	59c2 <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    5aac:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    5ab0:	b130      	cbz	r0, 5ac0 <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    5ab2:	6803      	ldr	r3, [r0, #0]
    5ab4:	2101      	movs	r1, #1
    5ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5ab8:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    5aba:	4607      	mov	r7, r0
    5abc:	2800      	cmp	r0, #0
    5abe:	d181      	bne.n	59c4 <MTPStorage_SD::usedSize(unsigned long)+0x3c>
      return 0;
    5ac0:	2400      	movs	r4, #0
    5ac2:	e78a      	b.n	59da <MTPStorage_SD::usedSize(unsigned long)+0x52>
    5ac4:	4618      	mov	r0, r3
    5ac6:	f004 fe45 	bl	a754 <FatPartition::freeClusterCount()>
    5aca:	6d75      	ldr	r5, [r6, #84]	; 0x54
    5acc:	4607      	mov	r7, r0
    return m_fVol ? m_fVol->bytesPerCluster() :
    5ace:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    5ad2:	1be4      	subs	r4, r4, r7
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d0b7      	beq.n	5a48 <MTPStorage_SD::usedSize(unsigned long)+0xc0>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5ad8:	799b      	ldrb	r3, [r3, #6]
    5ada:	f44f 7100 	mov.w	r1, #512	; 0x200
    5ade:	4099      	lsls	r1, r3
              *(uint64_t)sdx[store]->bytesPerCluster();  
    5ae0:	b289      	uxth	r1, r1
    5ae2:	fba1 0104 	umull	r0, r1, r1, r4
    5ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5aea:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5aee:	b328      	cbz	r0, 5b3c <MTPStorage_SD::usedSize(unsigned long)+0x1b4>
    5af0:	f002 feb0 	bl	8854 <ExFatPartition::freeClusterCount()>
    5af4:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5af6:	2f00      	cmp	r7, #0
    5af8:	f43f af6f 	beq.w	59da <MTPStorage_SD::usedSize(unsigned long)+0x52>
    5afc:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    5b00:	2800      	cmp	r0, #0
    5b02:	d0dd      	beq.n	5ac0 <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    5b04:	6803      	ldr	r3, [r0, #0]
    5b06:	2100      	movs	r1, #0
    5b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5b0a:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    5b0c:	2800      	cmp	r0, #0
    5b0e:	f47f af64 	bne.w	59da <MTPStorage_SD::usedSize(unsigned long)+0x52>
    5b12:	e7d5      	b.n	5ac0 <MTPStorage_SD::usedSize(unsigned long)+0x138>
    5b14:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    5b18:	2900      	cmp	r1, #0
    5b1a:	f43f af41 	beq.w	59a0 <MTPStorage_SD::usedSize(unsigned long)+0x18>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    5b1e:	f8d1 1430 	ldr.w	r1, [r1, #1072]	; 0x430
    5b22:	e73d      	b.n	59a0 <MTPStorage_SD::usedSize(unsigned long)+0x18>
    5b24:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
  uint32_t clusterCount() const {
    5b28:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
    5b2c:	b147      	cbz	r7, 5b40 <MTPStorage_SD::usedSize(unsigned long)+0x1b8>
    5b2e:	f8d7 4430 	ldr.w	r4, [r7, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5b32:	2800      	cmp	r0, #0
    5b34:	f47f af66 	bne.w	5a04 <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5b38:	4680      	mov	r8, r0
    5b3a:	e770      	b.n	5a1e <MTPStorage_SD::usedSize(unsigned long)+0x96>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5b3c:	4604      	mov	r4, r0
    5b3e:	e749      	b.n	59d4 <MTPStorage_SD::usedSize(unsigned long)+0x4c>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5b40:	b118      	cbz	r0, 5b4a <MTPStorage_SD::usedSize(unsigned long)+0x1c2>
           m_xVol ? m_xVol->clusterCount() : 0;
    5b42:	463c      	mov	r4, r7
    5b44:	e75e      	b.n	5a04 <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    5b46:	4601      	mov	r1, r0
    5b48:	e7cd      	b.n	5ae6 <MTPStorage_SD::usedSize(unsigned long)+0x15e>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5b4a:	4607      	mov	r7, r0
    5b4c:	4604      	mov	r4, r0
    5b4e:	e7be      	b.n	5ace <MTPStorage_SD::usedSize(unsigned long)+0x146>
    5b50:	20008a6c 	.word	0x20008a6c

00005b54 <MTPStorage_SD::ResetIndex()>:
    5b54:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec

  void MTPStorage_SD::ResetIndex() {
    5b58:	b510      	push	{r4, lr}
    5b5a:	4604      	mov	r4, r0
    5b5c:	b1cb      	cbz	r3, 5b92 <MTPStorage_SD::ResetIndex()+0x3e>
    if(index_.isOpen()) {index_.close();}
    5b5e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    5b62:	f004 ffef 	bl	ab44 <FsBaseFile::close()>
    index_entries_ = 0;
    5b66:	2300      	movs	r3, #0
    if(!index_.isOpen()) return;
    CloseIndex();

    all_scanned_ = false;
    open_file_ = 0xFFFFFFFEUL;
    5b68:	f06f 0101 	mvn.w	r1, #1
    5b6c:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
    index_entries_ = 0;
    5b70:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
    index_generated = false;
    5b74:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
    open_file_ = 0xFFFFFFFEUL;
    5b78:	f8c4 11a0 	str.w	r1, [r4, #416]	; 0x1a0
    5b7c:	b102      	cbz	r2, 5b80 <MTPStorage_SD::ResetIndex()+0x2c>

    OpenIndex();
  }
    5b7e:	bd10      	pop	{r4, pc}
    5b80:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    5b84:	2b00      	cmp	r3, #0
    5b86:	d1fa      	bne.n	5b7e <MTPStorage_SD::ResetIndex()+0x2a>
    5b88:	4620      	mov	r0, r4
    5b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b8e:	f7ff bea3 	b.w	58d8 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    5b92:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    5b96:	2b00      	cmp	r3, #0
    5b98:	d1e1      	bne.n	5b5e <MTPStorage_SD::ResetIndex()+0xa>
    5b9a:	bd10      	pop	{r4, pc}

00005b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    5b9c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    5ba0:	b570      	push	{r4, r5, r6, lr}
    5ba2:	4604      	mov	r4, r0
    5ba4:	b082      	sub	sp, #8
    5ba6:	4615      	mov	r5, r2
    5ba8:	b1e3      	cbz	r3, 5be4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x48>
    mtp_lock_storage(true);
    index_.seekSet((sizeof(r) * i));
    5baa:	f44f 728c 	mov.w	r2, #280	; 0x118
    5bae:	fb02 f101 	mul.w	r1, r2, r1
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5bb2:	4618      	mov	r0, r3
    5bb4:	f003 fc94 	bl	94e0 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    5bb8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    5bbc:	b138      	cbz	r0, 5bce <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x32>
    5bbe:	f44f 728c 	mov.w	r2, #280	; 0x118
    5bc2:	4629      	mov	r1, r5
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    5bc4:	b002      	add	sp, #8
    5bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5bca:	f003 bdbf 	b.w	974c <FatFile::write(void const*, unsigned int)>
    5bce:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
           m_xFile ? m_xFile->write(buf, count) : 0;
    5bd2:	b320      	cbz	r0, 5c1e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x82>
    5bd4:	f44f 728c 	mov.w	r2, #280	; 0x118
    5bd8:	4629      	mov	r1, r5
    5bda:	b002      	add	sp, #8
    5bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5be0:	f002 ba5a 	b.w	8098 <ExFatFile::write(void const*, unsigned int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5be4:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
    5be8:	b146      	cbz	r6, 5bfc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x60>
    index_.seekSet((sizeof(r) * i));
    5bea:	f44f 728c 	mov.w	r2, #280	; 0x118
    5bee:	fb01 f202 	mul.w	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
    5bf2:	2300      	movs	r3, #0
    5bf4:	4630      	mov	r0, r6
    5bf6:	f001 fc1f 	bl	7438 <ExFatFile::seekSet(unsigned long long)>
    5bfa:	e7dd      	b.n	5bb8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x1c>
    5bfc:	9101      	str	r1, [sp, #4]
    5bfe:	f7ff fe6b 	bl	58d8 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    5c02:	9901      	ldr	r1, [sp, #4]
    5c04:	f44f 728c 	mov.w	r2, #280	; 0x118
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5c08:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    5c0c:	fb01 f202 	mul.w	r2, r1, r2
    5c10:	4611      	mov	r1, r2
    5c12:	2b00      	cmp	r3, #0
    5c14:	d1cd      	bne.n	5bb2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x16>
    5c16:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
           m_xFile ? m_xFile->seekSet(pos) : false;
    5c1a:	2e00      	cmp	r6, #0
    5c1c:	d1e9      	bne.n	5bf2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x56>
  }
    5c1e:	b002      	add	sp, #8
    5c20:	bd70      	pop	{r4, r5, r6, pc}
    5c22:	bf00      	nop

00005c24 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    5c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5c28:	4605      	mov	r5, r0
  { if (index_generated) return; 
    index_generated = true;
    5c2a:	2601      	movs	r6, #1
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    5c2c:	b0c7      	sub	sp, #284	; 0x11c
    5c2e:	210d      	movs	r1, #13
    5c30:	482a      	ldr	r0, [pc, #168]	; (5cdc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    index_generated = true;
    5c32:	f885 61a8 	strb.w	r6, [r5, #424]	; 0x1a8
    5c36:	f00a fa6d 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5c3a:	4829      	ldr	r0, [pc, #164]	; (5ce0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xbc>)
    5c3c:	f007 fee4 	bl	da08 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    5c40:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  * \param[in] path A path with a valid 8.3 DOS name for the file.
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
    5c42:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    5c46:	b3a2      	cbz	r2, 5cb2 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x8e>
    5c48:	466c      	mov	r4, sp
    5c4a:	2000      	movs	r0, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5c4c:	4611      	mov	r1, r2
    5c4e:	4633      	mov	r3, r6
    5c50:	6020      	str	r0, [r4, #0]
    5c52:	4620      	mov	r0, r4
    5c54:	4a21      	ldr	r2, [pc, #132]	; (5cdc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    5c56:	f003 f9a7 	bl	8fa8 <FatFile::open(FatVolume*, char const*, int)>
    5c5a:	2800      	cmp	r0, #0
    5c5c:	d13a      	bne.n	5cd4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb0>
      uint32_t sd_getFSCount(void) {return fsCount;}
    5c5e:	682b      	ldr	r3, [r5, #0]
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    5c60:	2600      	movs	r6, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    5c62:	42b3      	cmp	r3, r6
    num_storage = sd_getFSCount();
    5c64:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
    index_entries_ = 0;
    5c68:	f8c5 61a4 	str.w	r6, [r5, #420]	; 0x1a4
    for(int ii=0; ii<num_storage; ii++)
    5c6c:	dd1e      	ble.n	5cac <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x88>
    5c6e:	466c      	mov	r4, sp
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    5c70:	f04f 39ff 	mov.w	r9, #4294967295
      r.sibling = 0;
      r.child = 0;
    5c74:	4637      	mov	r7, r6
      r.isdir = true;
    5c76:	f04f 0801 	mov.w	r8, #1
  { uint32_t new_record = index_entries_++;
    5c7a:	f8d5 11a4 	ldr.w	r1, [r5, #420]	; 0x1a4
      r.scanned = false;
      strcpy(r.name, "/");
    5c7e:	232f      	movs	r3, #47	; 0x2f
    WriteIndexRecord(new_record, r);
    5c80:	4622      	mov	r2, r4
    5c82:	4628      	mov	r0, r5
  { uint32_t new_record = index_entries_++;
    5c84:	f101 0c01 	add.w	ip, r1, #1
      r.store = ii; // 
    5c88:	81e6      	strh	r6, [r4, #14]
      r.parent = 0xFFFFFFFFUL; // 
    5c8a:	f8c4 9000 	str.w	r9, [r4]
    for(int ii=0; ii<num_storage; ii++)
    5c8e:	3601      	adds	r6, #1
  { uint32_t new_record = index_entries_++;
    5c90:	f8c5 c1a4 	str.w	ip, [r5, #420]	; 0x1a4
      r.isdir = true;
    5c94:	f8a4 800c 	strh.w	r8, [r4, #12]
      r.sibling = 0;
    5c98:	e9c4 7701 	strd	r7, r7, [r4, #4]
      strcpy(r.name, "/");
    5c9c:	f8ad 3018 	strh.w	r3, [sp, #24]
    WriteIndexRecord(new_record, r);
    5ca0:	f7ff ff7c 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    5ca4:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
    5ca8:	429e      	cmp	r6, r3
    5caa:	dbe6      	blt.n	5c7a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x56>
      AppendIndexRecord(r);
    }
  }
    5cac:	b047      	add	sp, #284	; 0x11c
    5cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5cb2:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    5cb6:	2900      	cmp	r1, #0
    5cb8:	d0d1      	beq.n	5c5e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5cba:	466c      	mov	r4, sp
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5cbc:	4633      	mov	r3, r6
    5cbe:	6322      	str	r2, [r4, #48]	; 0x30
    5cc0:	4620      	mov	r0, r4
    5cc2:	4a06      	ldr	r2, [pc, #24]	; (5cdc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    5cc4:	f001 fe76 	bl	79b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    5cc8:	2800      	cmp	r0, #0
    5cca:	d0c8      	beq.n	5c5e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5ccc:	4620      	mov	r0, r4
    5cce:	f001 fed5 	bl	7a7c <ExFatFile::remove()>
    5cd2:	e7c4      	b.n	5c5e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5cd4:	4620      	mov	r0, r4
    5cd6:	f004 f9c7 	bl	a068 <FatFile::remove()>
    5cda:	e7c0      	b.n	5c5e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5cdc:	20000afc 	.word	0x20000afc
    5ce0:	20008a6c 	.word	0x20008a6c

00005ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    5ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    5ce6:	f44f 778c 	mov.w	r7, #280	; 0x118
  {
    5cea:	460c      	mov	r4, r1
    5cec:	4615      	mov	r5, r2
    memset(&ret, 0, sizeof(ret));
    5cee:	2100      	movs	r1, #0
    5cf0:	463a      	mov	r2, r7
  {
    5cf2:	4606      	mov	r6, r0
    memset(&ret, 0, sizeof(ret));
    5cf4:	f00c fd1c 	bl	12730 <memset>
    if (i > index_entries_) 
    5cf8:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    5cfc:	42ab      	cmp	r3, r5
    5cfe:	d201      	bcs.n	5d04 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20>
  }
    5d00:	4630      	mov	r0, r6
    5d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5d04:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    5d08:	b1c0      	cbz	r0, 5d3c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x58>
    index_.seekSet(sizeof(ret) * i);
    5d0a:	fb07 f105 	mul.w	r1, r7, r5
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5d0e:	f003 fbe7 	bl	94e0 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    5d12:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    5d16:	b130      	cbz	r0, 5d26 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x42>
    5d18:	f44f 728c 	mov.w	r2, #280	; 0x118
    5d1c:	4631      	mov	r1, r6
    5d1e:	f003 f997 	bl	9050 <FatFile::read(void*, unsigned int)>
  }
    5d22:	4630      	mov	r0, r6
    5d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d26:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
           m_xFile ? m_xFile->read(buf, count) : -1;
    5d2a:	2800      	cmp	r0, #0
    5d2c:	d0e8      	beq.n	5d00 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c>
    5d2e:	f44f 728c 	mov.w	r2, #280	; 0x118
    5d32:	4631      	mov	r1, r6
    5d34:	f001 fa9a 	bl	726c <ExFatFile::read(void*, unsigned int)>
    5d38:	4630      	mov	r0, r6
    5d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5d3c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    5d40:	b128      	cbz	r0, 5d4e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x6a>
    index_.seekSet(sizeof(ret) * i);
    5d42:	fb07 f205 	mul.w	r2, r7, r5
           m_xFile ? m_xFile->seekSet(pos) : false;
    5d46:	2300      	movs	r3, #0
    5d48:	f001 fb76 	bl	7438 <ExFatFile::seekSet(unsigned long long)>
    5d4c:	e7e1      	b.n	5d12 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2e>
    5d4e:	4620      	mov	r0, r4
    5d50:	f7ff fdc2 	bl	58d8 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    5d54:	fb07 f205 	mul.w	r2, r7, r5
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5d58:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    5d5c:	4611      	mov	r1, r2
    5d5e:	2800      	cmp	r0, #0
    5d60:	d1d5      	bne.n	5d0e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2a>
    5d62:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
           m_xFile ? m_xFile->seekSet(pos) : false;
    5d66:	2800      	cmp	r0, #0
    5d68:	d0ca      	beq.n	5d00 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c>
    5d6a:	e7ec      	b.n	5d46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x62>

00005d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    5d6c:	b570      	push	{r4, r5, r6, lr}
    5d6e:	b0c6      	sub	sp, #280	; 0x118
    5d70:	4614      	mov	r4, r2
    5d72:	4605      	mov	r5, r0
    Record tmp = ReadIndexRecord(i);
    5d74:	460a      	mov	r2, r1
    5d76:	4601      	mov	r1, r0
    5d78:	4668      	mov	r0, sp
  {
    5d7a:	461e      	mov	r6, r3
    Record tmp = ReadIndexRecord(i);
    5d7c:	f7ff ffb2 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    5d80:	9900      	ldr	r1, [sp, #0]
    5d82:	1c4b      	adds	r3, r1, #1
    5d84:	d01b      	beq.n	5dbe <MTPStorage_SD::ConstructFilename(int, char*, int)+0x52>
    { ConstructFilename(tmp.parent, out, len);
    5d86:	4633      	mov	r3, r6
    5d88:	4622      	mov	r2, r4
    5d8a:	4628      	mov	r0, r5
    5d8c:	f7ff ffee 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    5d90:	4620      	mov	r0, r4
    5d92:	f00d f8b5 	bl	12f00 <strlen>
    5d96:	4420      	add	r0, r4
    5d98:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    5d9c:	2b2f      	cmp	r3, #47	; 0x2f
    5d9e:	d108      	bne.n	5db2 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x46>
      strlcat(out, tmp.name,len);
    5da0:	4632      	mov	r2, r6
    5da2:	a906      	add	r1, sp, #24
    5da4:	4620      	mov	r0, r4
    5da6:	f00c fd15 	bl	127d4 <strlcat>
      return tmp.store;
    5daa:	f8bd 000e 	ldrh.w	r0, [sp, #14]
  }
    5dae:	b046      	add	sp, #280	; 0x118
    5db0:	bd70      	pop	{r4, r5, r6, pc}
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    5db2:	4632      	mov	r2, r6
    5db4:	4905      	ldr	r1, [pc, #20]	; (5dcc <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    5db6:	4620      	mov	r0, r4
    5db8:	f00c fd0c 	bl	127d4 <strlcat>
    5dbc:	e7f0      	b.n	5da0 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x34>
    { strcpy(out, "/");
    5dbe:	4b03      	ldr	r3, [pc, #12]	; (5dcc <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    5dc0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    { strcpy(out, "/");
    5dc4:	881b      	ldrh	r3, [r3, #0]
    5dc6:	8023      	strh	r3, [r4, #0]
  }
    5dc8:	b046      	add	sp, #280	; 0x118
    5dca:	bd70      	pop	{r4, r5, r6, pc}
    5dcc:	20000498 	.word	0x20000498

00005dd0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    5dd0:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
    5dd4:	428b      	cmp	r3, r1
  {
    5dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dda:	4604      	mov	r4, r0
    5ddc:	b0d4      	sub	sp, #336	; 0x150
    5dde:	460d      	mov	r5, r1
    5de0:	4617      	mov	r7, r2
    if (open_file_ == i && mode_ == mode) return;
    5de2:	d103      	bne.n	5dec <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    5de4:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    5de8:	4293      	cmp	r3, r2
    5dea:	d02c      	beq.n	5e46 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x76>
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    5dec:	f44f 7380 	mov.w	r3, #256	; 0x100
    5df0:	4629      	mov	r1, r5
    5df2:	4620      	mov	r0, r4
    5df4:	aa14      	add	r2, sp, #80	; 0x50
    5df6:	f7ff ffb9 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5dfa:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    5dfe:	4606      	mov	r6, r0
    if(file_.isOpen()) {file_.close();}
    5e00:	f504 7882 	add.w	r8, r4, #260	; 0x104
    5e04:	b313      	cbz	r3, 5e4c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x7c>
    5e06:	4640      	mov	r0, r8
    5e08:	f004 fe9c 	bl	ab44 <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    5e0c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    5e10:	aa14      	add	r2, sp, #80	; 0x50
    5e12:	463b      	mov	r3, r7
    5e14:	4668      	mov	r0, sp
    5e16:	6d71      	ldr	r1, [r6, #84]	; 0x54
    5e18:	f004 ffae 	bl	ad78 <FsVolume::open(char const*, int)>
class Print
    5e1c:	9b01      	ldr	r3, [sp, #4]
    5e1e:	a904      	add	r1, sp, #16
    5e20:	4640      	mov	r0, r8
    5e22:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
    5e26:	9b02      	ldr	r3, [sp, #8]
    5e28:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    5e2c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5e30:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    5e34:	f004 fe2c 	bl	aa90 <FsBaseFile::operator=(FsBaseFile const&)>
    5e38:	4b07      	ldr	r3, [pc, #28]	; (5e58 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x88>)
  ~FsBaseFile() {close();}
    5e3a:	a804      	add	r0, sp, #16
    5e3c:	9300      	str	r3, [sp, #0]
    5e3e:	f004 fe81 	bl	ab44 <FsBaseFile::close()>
    mode_ = mode;
    5e42:	e9c4 7567 	strd	r7, r5, [r4, #412]	; 0x19c
  }
    5e46:	b054      	add	sp, #336	; 0x150
    5e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5e4c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5e50:	2b00      	cmp	r3, #0
    5e52:	d1d8      	bne.n	5e06 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
    5e54:	e7da      	b.n	5e0c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3c>
    5e56:	bf00      	nop
    5e58:	20000b98 	.word	0x20000b98

00005e5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    5e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e60:	f1b2 3fff 	cmp.w	r2, #4294967295
    5e64:	bf14      	ite	ne
    5e66:	4616      	movne	r6, r2
    5e68:	460e      	moveq	r6, r1
    5e6a:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    5e6e:	4601      	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    5e70:	4681      	mov	r9, r0
    Record record = ReadIndexRecord(i);
    5e72:	4632      	mov	r2, r6
    5e74:	4668      	mov	r0, sp
    5e76:	f7ff ff35 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    5e7a:	f89d 200c 	ldrb.w	r2, [sp, #12]
    5e7e:	b112      	cbz	r2, 5e86 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    5e80:	f89d 200d 	ldrb.w	r2, [sp, #13]
    5e84:	b11a      	cbz	r2, 5e8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    5e86:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
    5e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      OpenFileByIndex(i);
    5e8e:	4631      	mov	r1, r6
    5e90:	4648      	mov	r0, r9
    5e92:	f7ff ff9d 	bl	5dd0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    5e96:	f8d9 213c 	ldr.w	r2, [r9, #316]	; 0x13c
    5e9a:	2a00      	cmp	r2, #0
    5e9c:	f000 80b0 	beq.w	6000 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a4>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    5ea0:	2400      	movs	r4, #0
    5ea2:	f509 77aa 	add.w	r7, r9, #340	; 0x154
    5ea6:	f509 7b82 	add.w	fp, r9, #260	; 0x104
    5eaa:	f8df a164 	ldr.w	sl, [pc, #356]	; 6010 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b4>
	constexpr Print() : write_error(0) {}
    5eae:	4625      	mov	r5, r4
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5eb0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    5eb4:	2200      	movs	r2, #0
    5eb6:	4659      	mov	r1, fp
    5eb8:	a84a      	add	r0, sp, #296	; 0x128
    5eba:	f88d 5124 	strb.w	r5, [sp, #292]	; 0x124
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5ebe:	f8cd a118 	str.w	sl, [sp, #280]	; 0x118
    5ec2:	e9cd 5847 	strd	r5, r8, [sp, #284]	; 0x11c
  FsBaseFile() {}
    5ec6:	e9cd 5558 	strd	r5, r5, [sp, #352]	; 0x160
    tmpFile.openNext(this, oflag);
    5eca:	f004 fea7 	bl	ac1c <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    5ece:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    5ed0:	a94a      	add	r1, sp, #296	; 0x128
    5ed2:	4638      	mov	r0, r7
    5ed4:	f8c9 2148 	str.w	r2, [r9, #328]	; 0x148
class Stream : public Print
    5ed8:	9a48      	ldr	r2, [sp, #288]	; 0x120
    5eda:	f8c9 214c 	str.w	r2, [r9, #332]	; 0x14c
    5ede:	f89d 2124 	ldrb.w	r2, [sp, #292]	; 0x124
    5ee2:	f889 2150 	strb.w	r2, [r9, #336]	; 0x150
    5ee6:	f004 fdd3 	bl	aa90 <FsBaseFile::operator=(FsBaseFile const&)>
    5eea:	4b48      	ldr	r3, [pc, #288]	; (600c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b0>)
  ~FsBaseFile() {close();}
    5eec:	a84a      	add	r0, sp, #296	; 0x128
    5eee:	9346      	str	r3, [sp, #280]	; 0x118
    5ef0:	f004 fe28 	bl	ab44 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    5ef4:	f8d9 018c 	ldr.w	r0, [r9, #396]	; 0x18c
    5ef8:	2800      	cmp	r0, #0
    5efa:	d051      	beq.n	5fa0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x144>
        r.store = record.store;
    5efc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
        r.sibling = sibling;
    5f00:	9448      	str	r4, [sp, #288]	; 0x120
        r.parent = i;
    5f02:	9646      	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    5f04:	f8ad 2126 	strh.w	r2, [sp, #294]	; 0x126
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    5f08:	7802      	ldrb	r2, [r0, #0]
    5f0a:	f002 0270 	and.w	r2, r2, #112	; 0x70
    5f0e:	2a00      	cmp	r2, #0
    5f10:	bf14      	ite	ne
    5f12:	2201      	movne	r2, #1
    5f14:	2200      	moveq	r2, #0
    5f16:	f88d 2124 	strb.w	r2, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    5f1a:	d03f      	beq.n	5f9c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x140>
    5f1c:	2200      	movs	r2, #0
    5f1e:	9247      	str	r2, [sp, #284]	; 0x11c
    return m_fFile ? m_fFile->getName(name, len) :
    5f20:	a94c      	add	r1, sp, #304	; 0x130
    5f22:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    5f26:	f88d 5125 	strb.w	r5, [sp, #293]	; 0x125
    *name = 0;
    5f2a:	f88d 5130 	strb.w	r5, [sp, #304]	; 0x130
    return m_fFile ? m_fFile->getName(name, len) :
    5f2e:	f004 fa29 	bl	a384 <FatFile::getName(char*, unsigned int)>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    5f32:	f8d9 018c 	ldr.w	r0, [r9, #396]	; 0x18c
    5f36:	b1d0      	cbz	r0, 5f6e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x112>
    5f38:	f50d 7295 	add.w	r2, sp, #298	; 0x12a
    5f3c:	a94a      	add	r1, sp, #296	; 0x128
    5f3e:	f002 fe65 	bl	8c0c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    5f42:	f8d9 018c 	ldr.w	r0, [r9, #396]	; 0x18c
    5f46:	b1f8      	cbz	r0, 5f88 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x12c>
    5f48:	f50d 7297 	add.w	r2, sp, #302	; 0x12e
    5f4c:	a94b      	add	r1, sp, #300	; 0x12c
    5f4e:	f002 fe6d 	bl	8c2c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
  { uint32_t new_record = index_entries_++;
    5f52:	f8d9 41a4 	ldr.w	r4, [r9, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    5f56:	4648      	mov	r0, r9
    5f58:	aa46      	add	r2, sp, #280	; 0x118
  { uint32_t new_record = index_entries_++;
    5f5a:	1c61      	adds	r1, r4, #1
    5f5c:	f8c9 11a4 	str.w	r1, [r9, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    5f60:	4621      	mov	r1, r4
    5f62:	f7ff fe1b 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        child_.close();
    5f66:	4638      	mov	r0, r7
    5f68:	f004 fdec 	bl	ab44 <FsBaseFile::close()>
      }
    5f6c:	e7a2      	b.n	5eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x58>
    5f6e:	f8d9 0190 	ldr.w	r0, [r9, #400]	; 0x190
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    5f72:	2800      	cmp	r0, #0
    5f74:	d0ed      	beq.n	5f52 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf6>
    5f76:	f50d 7295 	add.w	r2, sp, #298	; 0x12a
    5f7a:	a94a      	add	r1, sp, #296	; 0x128
    5f7c:	f001 f8f0 	bl	7160 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    5f80:	f8d9 018c 	ldr.w	r0, [r9, #396]	; 0x18c
    5f84:	2800      	cmp	r0, #0
    5f86:	d1df      	bne.n	5f48 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
    5f88:	f8d9 0190 	ldr.w	r0, [r9, #400]	; 0x190
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    5f8c:	2800      	cmp	r0, #0
    5f8e:	d0e0      	beq.n	5f52 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf6>
    5f90:	f50d 7297 	add.w	r2, sp, #302	; 0x12e
    5f94:	a94b      	add	r1, sp, #300	; 0x12c
    5f96:	f001 f8f5 	bl	7184 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    5f9a:	e7da      	b.n	5f52 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf6>
  uint32_t fileSize() const {return m_fileSize;}
    5f9c:	69c2      	ldr	r2, [r0, #28]
    return m_fFile ? m_fFile->getName(name, len) :
    5f9e:	e7be      	b.n	5f1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xc2>
  bool isOpen() const {return m_fFile || m_xFile;}
    5fa0:	f8d9 2190 	ldr.w	r2, [r9, #400]	; 0x190
    5fa4:	b1fa      	cbz	r2, 5fe6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x18a>
        r.store = record.store;
    5fa6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
        r.sibling = sibling;
    5faa:	9448      	str	r4, [sp, #288]	; 0x120
        r.parent = i;
    5fac:	9646      	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    5fae:	f8ad 1126 	strh.w	r1, [sp, #294]	; 0x126
           m_xFile ? m_xFile->isDir() : false;
    5fb2:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    5fb6:	f011 0150 	ands.w	r1, r1, #80	; 0x50
    5fba:	d010      	beq.n	5fde <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x182>
        r.isdir = child_.isDirectory();
    5fbc:	2101      	movs	r1, #1
    5fbe:	f88d 1124 	strb.w	r1, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    5fc2:	9047      	str	r0, [sp, #284]	; 0x11c
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
    5fc4:	a94c      	add	r1, sp, #304	; 0x130
    5fc6:	4610      	mov	r0, r2
    5fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    5fcc:	f88d 5125 	strb.w	r5, [sp, #293]	; 0x125
    *name = 0;
    5fd0:	f88d 5130 	strb.w	r5, [sp, #304]	; 0x130
    5fd4:	f002 f9c6 	bl	8364 <ExFatFile::getName8(char*, unsigned int)>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    5fd8:	f8d9 018c 	ldr.w	r0, [r9, #396]	; 0x18c
    5fdc:	e7ab      	b.n	5f36 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xda>
        r.isdir = child_.isDirectory();
    5fde:	f88d 1124 	strb.w	r1, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    5fe2:	6910      	ldr	r0, [r2, #16]
  size_t getName(char* name, size_t len) {
    5fe4:	e7ed      	b.n	5fc2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x166>
      record.scanned = true;
    5fe6:	2501      	movs	r5, #1
      WriteIndexRecord(i, record);
    5fe8:	4631      	mov	r1, r6
    5fea:	4648      	mov	r0, r9
    5fec:	466a      	mov	r2, sp
      record.child = sibling;
    5fee:	9401      	str	r4, [sp, #4]
      record.scanned = true;
    5ff0:	f88d 500d 	strb.w	r5, [sp, #13]
      WriteIndexRecord(i, record);
    5ff4:	f7ff fdd2 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    5ff8:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
    5ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    6000:	f8d9 2140 	ldr.w	r2, [r9, #320]	; 0x140
    6004:	2a00      	cmp	r2, #0
    6006:	f47f af4b 	bne.w	5ea0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x44>
    600a:	e73c      	b.n	5e86 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    600c:	20000b98 	.word	0x20000b98
    6010:	20000c60 	.word	0x20000c60

00006014 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { if (index_generated) return; 
    6014:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    6018:	b570      	push	{r4, r5, r6, lr}
    601a:	4606      	mov	r6, r0
    601c:	b0c6      	sub	sp, #280	; 0x118
    601e:	460d      	mov	r5, r1
    6020:	4614      	mov	r4, r2
  { if (index_generated) return; 
    6022:	b3a3      	cbz	r3, 608e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x7a>
    GenerateIndex(store);
    if (parent) 
    6024:	b1ac      	cbz	r4, 6052 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3e>
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    6026:	f1b4 3fff 	cmp.w	r4, #4294967295
    602a:	bf08      	it	eq
    602c:	462c      	moveq	r4, r5

      ScanDir(store, parent);
    602e:	4629      	mov	r1, r5
    6030:	4630      	mov	r0, r6
    6032:	4622      	mov	r2, r4
    6034:	f7ff ff12 	bl	5e5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    6038:	2301      	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    603a:	4622      	mov	r2, r4
    603c:	4631      	mov	r1, r6
      follow_sibling_ = true;
    603e:	f886 31b0 	strb.w	r3, [r6, #432]	; 0x1b0
      next_ = ReadIndexRecord(parent).child;
    6042:	4668      	mov	r0, sp
    6044:	f7ff fe4e 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6048:	9b01      	ldr	r3, [sp, #4]
    604a:	f8c6 31ac 	str.w	r3, [r6, #428]	; 0x1ac
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    604e:	b046      	add	sp, #280	; 0x118
    6050:	bd70      	pop	{r4, r5, r6, pc}
  { if (all_scanned_) return;
    6052:	f896 31a9 	ldrb.w	r3, [r6, #425]	; 0x1a9
    6056:	b993      	cbnz	r3, 607e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x6a>
    all_scanned_ = true;
    6058:	2201      	movs	r2, #1
  { if (index_generated) return; 
    605a:	f896 31a8 	ldrb.w	r3, [r6, #424]	; 0x1a8
    all_scanned_ = true;
    605e:	f886 21a9 	strb.w	r2, [r6, #425]	; 0x1a9
  { if (index_generated) return; 
    6062:	b1bb      	cbz	r3, 6094 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x80>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    6064:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    6068:	b14b      	cbz	r3, 607e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x6a>
    606a:	4622      	mov	r2, r4
    606c:	4629      	mov	r1, r5
    606e:	4630      	mov	r0, r6
    6070:	3401      	adds	r4, #1
    6072:	f7ff fef3 	bl	5e5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    6076:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    607a:	429c      	cmp	r4, r3
    607c:	d3f5      	bcc.n	606a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x56>
      follow_sibling_ = false;
    607e:	2200      	movs	r2, #0
      next_ = 1;
    6080:	2301      	movs	r3, #1
      follow_sibling_ = false;
    6082:	f886 21b0 	strb.w	r2, [r6, #432]	; 0x1b0
      next_ = 1;
    6086:	f8c6 31ac 	str.w	r3, [r6, #428]	; 0x1ac
  }
    608a:	b046      	add	sp, #280	; 0x118
    608c:	bd70      	pop	{r4, r5, r6, pc}
    608e:	f7ff fdc9 	bl	5c24 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    6092:	e7c7      	b.n	6024 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x10>
    6094:	4630      	mov	r0, r6
    6096:	f7ff fdc5 	bl	5c24 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    609a:	e7e3      	b.n	6064 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x50>

0000609c <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    609c:	b530      	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    609e:	f8d0 51ac 	ldr.w	r5, [r0, #428]	; 0x1ac
  {
    60a2:	b0c7      	sub	sp, #284	; 0x11c
    { if (next_ == 0) return 0;
    60a4:	b325      	cbz	r5, 60f0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
    60a6:	4604      	mov	r4, r0
    60a8:	e008      	b.n	60bc <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    60aa:	9b02      	ldr	r3, [sp, #8]
    60ac:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    60b0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    60b4:	b9cb      	cbnz	r3, 60ea <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x4e>
    { if (next_ == 0) return 0;
    60b6:	f8d4 51ac 	ldr.w	r5, [r4, #428]	; 0x1ac
    60ba:	b1cd      	cbz	r5, 60f0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
      Record r = ReadIndexRecord(ret);
    60bc:	462a      	mov	r2, r5
    60be:	4621      	mov	r1, r4
    60c0:	4668      	mov	r0, sp
    60c2:	f7ff fe0f 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    60c6:	f894 31b0 	ldrb.w	r3, [r4, #432]	; 0x1b0
    60ca:	2b00      	cmp	r3, #0
    60cc:	d1ed      	bne.n	60aa <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_++;
    60ce:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
        if (next_ >= index_entries_) next_ = 0;
    60d2:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
      { next_++;
    60d6:	3201      	adds	r2, #1
        if (next_ >= index_entries_) next_ = 0;
    60d8:	428a      	cmp	r2, r1
    60da:	bf38      	it	cc
    60dc:	4613      	movcc	r3, r2
    60de:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
      if (r.name[0]) return ret;
    60e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    60e6:	2b00      	cmp	r3, #0
    60e8:	d0e5      	beq.n	60b6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    60ea:	4628      	mov	r0, r5
    60ec:	b047      	add	sp, #284	; 0x11c
    60ee:	bd30      	pop	{r4, r5, pc}
    { if (next_ == 0) return 0;
    60f0:	2500      	movs	r5, #0
  }
    60f2:	4628      	mov	r0, r5
    60f4:	b047      	add	sp, #284	; 0x11c
    60f6:	bd30      	pop	{r4, r5, pc}

000060f8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint64_t* size, uint32_t* parent, uint16_t *store, char *create, char *modify)
  {
    60f8:	b530      	push	{r4, r5, lr}
    60fa:	b0cd      	sub	sp, #308	; 0x134
    60fc:	4615      	mov	r5, r2
    60fe:	460a      	mov	r2, r1
    Record r = ReadIndexRecord(handle);
    6100:	4601      	mov	r1, r0
    6102:	a806      	add	r0, sp, #24
  {
    6104:	461c      	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    6106:	f7ff fded 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    610a:	4628      	mov	r0, r5
    610c:	a90c      	add	r1, sp, #48	; 0x30
    610e:	f00c fe45 	bl	12d9c <strcpy>
    *parent = r.parent;
    6112:	9b06      	ldr	r3, [sp, #24]
    6114:	9a50      	ldr	r2, [sp, #320]	; 0x140
    6116:	6013      	str	r3, [r2, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    6118:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    611c:	2b00      	cmp	r3, #0
    611e:	d13e      	bne.n	619e <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xa6>
    6120:	9a07      	ldr	r2, [sp, #28]
    6122:	6063      	str	r3, [r4, #4]
    *store = r.store;
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
          FS_HOUR(r.cptime),FS_MINUTE(r.cptime),FS_SECOND(r.cptime));
    6124:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    *store = r.store;
    6128:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
    612c:	9b51      	ldr	r3, [sp, #324]	; 0x144
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    612e:	6022      	str	r2, [r4, #0]
    *store = r.store;
    6130:	8018      	strh	r0, [r3, #0]
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    6132:	f001 001f 	and.w	r0, r1, #31
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
    6136:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    613a:	0040      	lsls	r0, r0, #1
    613c:	f002 041f 	and.w	r4, r2, #31
  return 1980 + (fatDate >> 9);
    6140:	0a53      	lsrs	r3, r2, #9
    6142:	9004      	str	r0, [sp, #16]
    6144:	f3c1 1045 	ubfx	r0, r1, #5, #6
    6148:	0ac9      	lsrs	r1, r1, #11
    614a:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
    614e:	9003      	str	r0, [sp, #12]
    6150:	f3c2 1043 	ubfx	r0, r2, #5, #4
    6154:	4a14      	ldr	r2, [pc, #80]	; (61a8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xb0>)
    6156:	9000      	str	r0, [sp, #0]
    6158:	9852      	ldr	r0, [sp, #328]	; 0x148
    615a:	e9cd 4101 	strd	r4, r1, [sp, #4]
    615e:	2120      	movs	r1, #32
    6160:	f00c f8fc 	bl	1235c <snprintf>
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
          FS_HOUR(r.mptime),FS_MINUTE(r.mptime),FS_SECOND(r.mptime));
    6164:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
    6168:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
  return 2*(fatTime & 0X1F);
    616c:	f000 041f 	and.w	r4, r0, #31
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
    6170:	f3c0 1545 	ubfx	r5, r0, #5, #6
    6174:	0ac0      	lsrs	r0, r0, #11
    6176:	4a0c      	ldr	r2, [pc, #48]	; (61a8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xb0>)
    6178:	0064      	lsls	r4, r4, #1
    617a:	9503      	str	r5, [sp, #12]
  return 1980 + (fatDate >> 9);
    617c:	0a4b      	lsrs	r3, r1, #9
    617e:	9002      	str	r0, [sp, #8]
    6180:	9404      	str	r4, [sp, #16]
    6182:	f3c1 1043 	ubfx	r0, r1, #5, #4
    6186:	f001 041f 	and.w	r4, r1, #31
    618a:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
    618e:	2120      	movs	r1, #32
    6190:	e9cd 0400 	strd	r0, r4, [sp]
    6194:	9853      	ldr	r0, [sp, #332]	; 0x14c
    6196:	f00c f8e1 	bl	1235c <snprintf>
  }
    619a:	b04d      	add	sp, #308	; 0x134
    619c:	bd30      	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    619e:	f04f 32ff 	mov.w	r2, #4294967295
    61a2:	2300      	movs	r3, #0
    61a4:	e7bd      	b.n	6122 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0x2a>
    61a6:	bf00      	nop
    61a8:	20000ae0 	.word	0x20000ae0

000061ac <MTPStorage_SD::GetSize(unsigned long)>:
    WriteIndexRecord(handle, r); 
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    61ac:	b500      	push	{lr}
    61ae:	b0c7      	sub	sp, #284	; 0x11c
    61b0:	460a      	mov	r2, r1
    return ReadIndexRecord(handle).child;
    61b2:	4601      	mov	r1, r0
    61b4:	4668      	mov	r0, sp
    61b6:	f7ff fd95 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    61ba:	9801      	ldr	r0, [sp, #4]
    61bc:	b047      	add	sp, #284	; 0x11c
    61be:	f85d fb04 	ldr.w	pc, [sp], #4
    61c2:	bf00      	nop

000061c4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:

  size_t MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    61c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61c6:	4604      	mov	r4, r0
    61c8:	4616      	mov	r6, r2
    OpenFileByIndex(handle);
    61ca:	2200      	movs	r2, #0
  {
    61cc:	461d      	mov	r5, r3
    61ce:	9f06      	ldr	r7, [sp, #24]
    OpenFileByIndex(handle);
    61d0:	f7ff fdfe 	bl	5dd0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    61d4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    61d8:	b1b3      	cbz	r3, 6208 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x44>
    61da:	4631      	mov	r1, r6
    61dc:	4618      	mov	r0, r3
    61de:	f003 f97f 	bl	94e0 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    61e2:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    61e6:	b128      	cbz	r0, 61f4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x30>
    61e8:	463a      	mov	r2, r7
    61ea:	4629      	mov	r1, r5
    61ec:	f002 ff30 	bl	9050 <FatFile::read(void*, unsigned int)>
    mtp_lock_storage(true);
    file_.seekSet(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
    return bytes;
  }
    61f0:	4638      	mov	r0, r7
    61f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61f4:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
           m_xFile ? m_xFile->read(buf, count) : -1;
    61f8:	2800      	cmp	r0, #0
    61fa:	d0f9      	beq.n	61f0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x2c>
    61fc:	463a      	mov	r2, r7
    61fe:	4629      	mov	r1, r5
    6200:	f001 f834 	bl	726c <ExFatFile::read(void*, unsigned int)>
    6204:	4638      	mov	r0, r7
    6206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6208:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
           m_xFile ? m_xFile->seekSet(pos) : false;
    620c:	2800      	cmp	r0, #0
    620e:	d0ef      	beq.n	61f0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x2c>
    6210:	4632      	mov	r2, r6
    6212:	f001 f911 	bl	7438 <ExFatFile::seekSet(unsigned long long)>
    6216:	e7e4      	b.n	61e2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x1e>

00006218 <MTPStorage_SD::removeFile(unsigned long, char*)>:

void MTPStorage_SD::removeFile(uint32_t store, char *file)
{ 
    6218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    621c:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
    6220:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
    6224:	2300      	movs	r3, #0
    6226:	4681      	mov	r9, r0
    6228:	4688      	mov	r8, r1
    622a:	a804      	add	r0, sp, #16
    622c:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
    6230:	4615      	mov	r5, r2
    6232:	f004 fda1 	bl	ad78 <FsVolume::open(char const*, int)>
    return m_fFile ? m_fFile->isDir() :
    6236:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6238:	2b00      	cmp	r3, #0
    623a:	f000 80ca 	beq.w	63d2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1ba>
  char tname[2*MAX_FILENAME_LEN];
  char fname[MAX_FILENAME_LEN];
  FsFile f1=sd_open(store,file,O_READ);
  if(f1.isDirectory())
    623e:	781b      	ldrb	r3, [r3, #0]
    6240:	f013 0f70 	tst.w	r3, #112	; 0x70
    6244:	f000 80cd 	beq.w	63e2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1ca>
	constexpr Stream() : _timeout(1000), read_error(0) {}
    6248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
    624c:	2400      	movs	r4, #0
    624e:	af08      	add	r7, sp, #32
    6250:	4e80      	ldr	r6, [pc, #512]	; (6454 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    6252:	931a      	str	r3, [sp, #104]	; 0x68
  {
    FsFile f2;
    while((f2=f1.openNextFile()))
    { f2.getName(fname,MAX_FILENAME_LEN);
      snprintf(tname,strlen(tname),"%s/%s",file,fname);
    6254:	f8df b208 	ldr.w	fp, [pc, #520]	; 6460 <MTPStorage_SD::removeFile(unsigned long, char*)+0x248>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6258:	4b7f      	ldr	r3, [pc, #508]	; (6458 <MTPStorage_SD::removeFile(unsigned long, char*)+0x240>)
    625a:	9419      	str	r4, [sp, #100]	; 0x64
    625c:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    6260:	9318      	str	r3, [sp, #96]	; 0x60
  FsBaseFile() {}
    6262:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6266:	4b7c      	ldr	r3, [pc, #496]	; (6458 <MTPStorage_SD::removeFile(unsigned long, char*)+0x240>)
    tmpFile.openNext(this, oflag);
    6268:	2200      	movs	r2, #0
    626a:	4639      	mov	r1, r7
    626c:	a830      	add	r0, sp, #192	; 0xc0
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    626e:	932c      	str	r3, [sp, #176]	; 0xb0
    6270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6274:	942d      	str	r4, [sp, #180]	; 0xb4
    6276:	932e      	str	r3, [sp, #184]	; 0xb8
    6278:	f88d 40bc 	strb.w	r4, [sp, #188]	; 0xbc
  FsBaseFile() {}
    627c:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
    tmpFile.openNext(this, oflag);
    6280:	f004 fccc 	bl	ac1c <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    6284:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    6286:	a930      	add	r1, sp, #192	; 0xc0
    6288:	a81c      	add	r0, sp, #112	; 0x70
    628a:	9319      	str	r3, [sp, #100]	; 0x64
class Stream : public Print
    628c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    628e:	931a      	str	r3, [sp, #104]	; 0x68
    6290:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
    6294:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    6298:	f004 fbfa 	bl	aa90 <FsBaseFile::operator=(FsBaseFile const&)>
  bool isOpen() const {return m_fFile || m_xFile;}
    629c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    629e:	2b00      	cmp	r3, #0
    62a0:	d052      	beq.n	6348 <MTPStorage_SD::removeFile(unsigned long, char*)+0x130>
  ~FsBaseFile() {close();}
    62a2:	a830      	add	r0, sp, #192	; 0xc0
    62a4:	962c      	str	r6, [sp, #176]	; 0xb0
    62a6:	f004 fc4d 	bl	ab44 <FsBaseFile::close()>
    return m_fFile ? m_fFile->getName(name, len) :
    62aa:	982a      	ldr	r0, [sp, #168]	; 0xa8
    *name = 0;
    62ac:	f88d 4100 	strb.w	r4, [sp, #256]	; 0x100
    return m_fFile ? m_fFile->getName(name, len) :
    62b0:	2800      	cmp	r0, #0
    62b2:	d03f      	beq.n	6334 <MTPStorage_SD::removeFile(unsigned long, char*)+0x11c>
    62b4:	f44f 7280 	mov.w	r2, #256	; 0x100
    62b8:	eb0d 0102 	add.w	r1, sp, r2
    62bc:	f004 f862 	bl	a384 <FatFile::getName(char*, unsigned int)>
    62c0:	a880      	add	r0, sp, #512	; 0x200
    62c2:	f00c fe1d 	bl	12f00 <strlen>
    62c6:	ab40      	add	r3, sp, #256	; 0x100
    62c8:	4601      	mov	r1, r0
    62ca:	465a      	mov	r2, fp
    62cc:	9300      	str	r3, [sp, #0]
    62ce:	a880      	add	r0, sp, #512	; 0x200
    62d0:	462b      	mov	r3, r5
    62d2:	f00c f843 	bl	1235c <snprintf>
    return m_fFile ? m_fFile->isDir() :
    62d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    62d8:	b14b      	cbz	r3, 62ee <MTPStorage_SD::removeFile(unsigned long, char*)+0xd6>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    62da:	781b      	ldrb	r3, [r3, #0]
    62dc:	f013 0f70 	tst.w	r3, #112	; 0x70
    62e0:	d00c      	beq.n	62fc <MTPStorage_SD::removeFile(unsigned long, char*)+0xe4>
    62e2:	aa80      	add	r2, sp, #512	; 0x200
    62e4:	4641      	mov	r1, r8
    62e6:	4648      	mov	r0, r9
    62e8:	f7ff ff96 	bl	6218 <MTPStorage_SD::removeFile(unsigned long, char*)>
    62ec:	e7bb      	b.n	6266 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    62ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
           m_xFile ? m_xFile->isDir() : false;
    62f0:	b123      	cbz	r3, 62fc <MTPStorage_SD::removeFile(unsigned long, char*)+0xe4>
    62f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    62f6:	f013 0f50 	tst.w	r3, #80	; 0x50
    62fa:	d1f2      	bne.n	62e2 <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
							  return write((const uint8_t *)str, strlen(str)); }
    62fc:	a880      	add	r0, sp, #512	; 0x200
    62fe:	f00c fdff 	bl	12f00 <strlen>
    6302:	4601      	mov	r1, r0
    6304:	a880      	add	r0, sp, #512	; 0x200
    6306:	f009 ff05 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    630a:	4854      	ldr	r0, [pc, #336]	; (645c <MTPStorage_SD::removeFile(unsigned long, char*)+0x244>)
    630c:	f007 fb7c 	bl	da08 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    6310:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    6314:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    6318:	2900      	cmp	r1, #0
    631a:	d037      	beq.n	638c <MTPStorage_SD::removeFile(unsigned long, char*)+0x174>
    631c:	aa80      	add	r2, sp, #512	; 0x200
    631e:	2301      	movs	r3, #1
    6320:	a82c      	add	r0, sp, #176	; 0xb0
  FatFile() {}
    6322:	942c      	str	r4, [sp, #176]	; 0xb0
    6324:	f002 fe40 	bl	8fa8 <FatFile::open(FatVolume*, char const*, int)>
    6328:	2800      	cmp	r0, #0
    632a:	d09c      	beq.n	6266 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    632c:	a82c      	add	r0, sp, #176	; 0xb0
    632e:	f003 fe9b 	bl	a068 <FatFile::remove()>
    6332:	e798      	b.n	6266 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    6334:	982b      	ldr	r0, [sp, #172]	; 0xac
           m_xFile ? m_xFile->getName(name, len) : 0;
    6336:	2800      	cmp	r0, #0
    6338:	d0c2      	beq.n	62c0 <MTPStorage_SD::removeFile(unsigned long, char*)+0xa8>
    633a:	f44f 7280 	mov.w	r2, #256	; 0x100
    633e:	eb0d 0102 	add.w	r1, sp, r2
    6342:	f002 f80f 	bl	8364 <ExFatFile::getName8(char*, unsigned int)>
    6346:	e7bb      	b.n	62c0 <MTPStorage_SD::removeFile(unsigned long, char*)+0xa8>
  bool isOpen() const {return m_fFile || m_xFile;}
    6348:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    634a:	2b00      	cmp	r3, #0
    634c:	d1a9      	bne.n	62a2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x8a>
  ~FsBaseFile() {close();}
    634e:	a830      	add	r0, sp, #192	; 0xc0
    6350:	9303      	str	r3, [sp, #12]
    6352:	962c      	str	r6, [sp, #176]	; 0xb0
    6354:	f004 fbf6 	bl	ab44 <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    6358:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    635c:	9b03      	ldr	r3, [sp, #12]
    635e:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    6362:	b330      	cbz	r0, 63b2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x19a>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6364:	4601      	mov	r1, r0
    6366:	462a      	mov	r2, r5
    6368:	a82c      	add	r0, sp, #176	; 0xb0
    636a:	932c      	str	r3, [sp, #176]	; 0xb0
    636c:	f002 fe1c 	bl	8fa8 <FatFile::open(FatVolume*, char const*, int)>
    6370:	2800      	cmp	r0, #0
    6372:	d164      	bne.n	643e <MTPStorage_SD::removeFile(unsigned long, char*)+0x226>
    6374:	a81c      	add	r0, sp, #112	; 0x70
    6376:	9618      	str	r6, [sp, #96]	; 0x60
    6378:	f004 fbe4 	bl	ab44 <FsBaseFile::close()>
    637c:	4638      	mov	r0, r7
    637e:	9604      	str	r6, [sp, #16]
    6380:	f004 fbe0 	bl	ab44 <FsBaseFile::close()>
  }
  else
  {
    sd_remove(store,file);
  }
}
    6384:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
    6388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    638c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    6390:	2b00      	cmp	r3, #0
    6392:	f43f af68 	beq.w	6266 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
  ExFatFile() {}
    6396:	9138      	str	r1, [sp, #224]	; 0xe0
    6398:	aa80      	add	r2, sp, #512	; 0x200
    639a:	4619      	mov	r1, r3
    639c:	a82c      	add	r0, sp, #176	; 0xb0
    639e:	2301      	movs	r3, #1
    63a0:	f001 fb08 	bl	79b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    63a4:	2800      	cmp	r0, #0
    63a6:	f43f af5e 	beq.w	6266 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    63aa:	a82c      	add	r0, sp, #176	; 0xb0
    63ac:	f001 fb66 	bl	7a7c <ExFatFile::remove()>
    63b0:	e759      	b.n	6266 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    63b2:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    63b6:	2900      	cmp	r1, #0
    63b8:	d0dc      	beq.n	6374 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15c>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    63ba:	4603      	mov	r3, r0
    63bc:	9038      	str	r0, [sp, #224]	; 0xe0
    63be:	462a      	mov	r2, r5
    63c0:	a82c      	add	r0, sp, #176	; 0xb0
    63c2:	f001 faf7 	bl	79b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    63c6:	2800      	cmp	r0, #0
    63c8:	d0d4      	beq.n	6374 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15c>
    63ca:	a82c      	add	r0, sp, #176	; 0xb0
    63cc:	f001 fbb0 	bl	7b30 <ExFatFile::rmdir()>
    63d0:	e7d0      	b.n	6374 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15c>
    63d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
           m_xFile ? m_xFile->isDir() : false;
    63d4:	b12b      	cbz	r3, 63e2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1ca>
    63d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    63da:	f013 0f50 	tst.w	r3, #80	; 0x50
    63de:	f47f af33 	bne.w	6248 <MTPStorage_SD::removeFile(unsigned long, char*)+0x30>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    63e2:	b135      	cbz	r5, 63f2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1da>
							  return write((const uint8_t *)str, strlen(str)); }
    63e4:	4628      	mov	r0, r5
    63e6:	f00c fd8b 	bl	12f00 <strlen>
    63ea:	4601      	mov	r1, r0
    63ec:	4628      	mov	r0, r5
    63ee:	f009 fe91 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    63f2:	481a      	ldr	r0, [pc, #104]	; (645c <MTPStorage_SD::removeFile(unsigned long, char*)+0x244>)
    63f4:	f007 fb08 	bl	da08 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    63f8:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    63fc:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6400:	b15b      	cbz	r3, 641a <MTPStorage_SD::removeFile(unsigned long, char*)+0x202>
    6402:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6404:	4619      	mov	r1, r3
    6406:	462a      	mov	r2, r5
    6408:	2301      	movs	r3, #1
    640a:	9080      	str	r0, [sp, #512]	; 0x200
    640c:	a880      	add	r0, sp, #512	; 0x200
    640e:	f002 fdcb 	bl	8fa8 <FatFile::open(FatVolume*, char const*, int)>
    6412:	b9c0      	cbnz	r0, 6446 <MTPStorage_SD::removeFile(unsigned long, char*)+0x22e>
    6414:	af08      	add	r7, sp, #32
    6416:	4e0f      	ldr	r6, [pc, #60]	; (6454 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    6418:	e7b0      	b.n	637c <MTPStorage_SD::removeFile(unsigned long, char*)+0x164>
    641a:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    641e:	2900      	cmp	r1, #0
    6420:	d0f8      	beq.n	6414 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1fc>
    6422:	938c      	str	r3, [sp, #560]	; 0x230
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6424:	462a      	mov	r2, r5
    6426:	2301      	movs	r3, #1
    6428:	a880      	add	r0, sp, #512	; 0x200
    642a:	af08      	add	r7, sp, #32
    642c:	4e09      	ldr	r6, [pc, #36]	; (6454 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    642e:	f001 fac1 	bl	79b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6432:	2800      	cmp	r0, #0
    6434:	d0a2      	beq.n	637c <MTPStorage_SD::removeFile(unsigned long, char*)+0x164>
    6436:	a880      	add	r0, sp, #512	; 0x200
    6438:	f001 fb20 	bl	7a7c <ExFatFile::remove()>
    643c:	e79e      	b.n	637c <MTPStorage_SD::removeFile(unsigned long, char*)+0x164>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    643e:	a82c      	add	r0, sp, #176	; 0xb0
    6440:	f003 f806 	bl	9450 <FatFile::rmdir()>
    6444:	e796      	b.n	6374 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15c>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6446:	a880      	add	r0, sp, #512	; 0x200
    6448:	af08      	add	r7, sp, #32
    644a:	4e02      	ldr	r6, [pc, #8]	; (6454 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    644c:	f003 fe0c 	bl	a068 <FatFile::remove()>
    6450:	e794      	b.n	637c <MTPStorage_SD::removeFile(unsigned long, char*)+0x164>
    6452:	bf00      	nop
    6454:	20000b98 	.word	0x20000b98
    6458:	20000c60 	.word	0x20000c60
    645c:	20008a6c 	.word	0x20008a6c
    6460:	20000ad8 	.word	0x20000ad8

00006464 <MTPStorage_SD::DeleteObject(unsigned long)>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    6464:	1c4b      	adds	r3, r1, #1
    6466:	d056      	beq.n	6516 <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>

    // first create full filename
    char filename[MAX_FILENAME_LEN];
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    6468:	f44f 7380 	mov.w	r3, #256	; 0x100
  {
    646c:	b570      	push	{r4, r5, r6, lr}
    646e:	f5ad 6dac 	sub.w	sp, sp, #1376	; 0x560
    6472:	460d      	mov	r5, r1
    6474:	4604      	mov	r4, r0
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    6476:	aa46      	add	r2, sp, #280	; 0x118
    6478:	f7ff fc78 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    647c:	4621      	mov	r1, r4
    647e:	a886      	add	r0, sp, #536	; 0x218
    6480:	462a      	mov	r2, r5
    6482:	f7ff fc2f 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    // remove file from storage (assume it is always working)
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    6486:	aa46      	add	r2, sp, #280	; 0x118
    6488:	f8bd 1226 	ldrh.w	r1, [sp, #550]	; 0x226
    648c:	4620      	mov	r0, r4
    648e:	f7ff fec3 	bl	6218 <MTPStorage_SD::removeFile(unsigned long, char*)>
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    6492:	2300      	movs	r3, #0
    WriteIndexRecord(object, r);
    6494:	aa86      	add	r2, sp, #536	; 0x218
    6496:	4629      	mov	r1, r5
    6498:	4620      	mov	r0, r4
    r.name[0]=0;
    649a:	f88d 3230 	strb.w	r3, [sp, #560]	; 0x230
    WriteIndexRecord(object, r);
    649e:	f7ff fb7d 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    64a2:	9a86      	ldr	r2, [sp, #536]	; 0x218
    64a4:	4621      	mov	r1, r4
    64a6:	a8cc      	add	r0, sp, #816	; 0x330
    64a8:	f7ff fc1c 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    64ac:	9ecd      	ldr	r6, [sp, #820]	; 0x334
    64ae:	42ae      	cmp	r6, r5
    64b0:	d026      	beq.n	6500 <MTPStorage_SD::DeleteObject(unsigned long)+0x9c>
    }
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
    64b2:	4632      	mov	r2, r6
    64b4:	4621      	mov	r1, r4
    64b6:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
    64ba:	f7ff fc13 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    64be:	f8dd 2450 	ldr.w	r2, [sp, #1104]	; 0x450
    64c2:	4295      	cmp	r5, r2
    64c4:	d00f      	beq.n	64e6 <MTPStorage_SD::DeleteObject(unsigned long)+0x82>
    64c6:	4621      	mov	r1, r4
    64c8:	4668      	mov	r0, sp
    64ca:	4616      	mov	r6, r2
    64cc:	f7ff fc0a 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    64d0:	f44f 728c 	mov.w	r2, #280	; 0x118
    64d4:	4669      	mov	r1, sp
    64d6:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
    64da:	f008 f89b 	bl	e614 <memcpy>
    64de:	f8dd 2450 	ldr.w	r2, [sp, #1104]	; 0x450
    64e2:	42aa      	cmp	r2, r5
    64e4:	d1ef      	bne.n	64c6 <MTPStorage_SD::DeleteObject(unsigned long)+0x62>
      // is points now to junder sibling
      x.sibling = r.sibling;
    64e6:	9b88      	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(is, x);
    64e8:	4620      	mov	r0, r4
    64ea:	f50d 6289 	add.w	r2, sp, #1096	; 0x448
    64ee:	4631      	mov	r1, r6
      x.sibling = r.sibling;
    64f0:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
      WriteIndexRecord(is, x);
    64f4:	f7ff fb52 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
    return 1;
  }
    64f8:	2001      	movs	r0, #1
    64fa:	f50d 6dac 	add.w	sp, sp, #1376	; 0x560
    64fe:	bd70      	pop	{r4, r5, r6, pc}
      t.child = r.sibling;
    6500:	9b88      	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(r.parent, t);
    6502:	4620      	mov	r0, r4
    6504:	aacc      	add	r2, sp, #816	; 0x330
    6506:	9986      	ldr	r1, [sp, #536]	; 0x218
      t.child = r.sibling;
    6508:	93cd      	str	r3, [sp, #820]	; 0x334
      WriteIndexRecord(r.parent, t);
    650a:	f7ff fb47 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    650e:	2001      	movs	r0, #1
    6510:	f50d 6dac 	add.w	sp, sp, #1376	; 0x560
    6514:	bd70      	pop	{r4, r5, r6, pc}
    6516:	2001      	movs	r0, #1
    6518:	4770      	bx	lr
    651a:	bf00      	nop

0000651c <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    6520:	f1b2 3fff 	cmp.w	r2, #4294967295
    6524:	bf14      	ite	ne
    6526:	4691      	movne	r9, r2
    6528:	4689      	moveq	r9, r1
  {
    652a:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
    652e:	4604      	mov	r4, r0
    6530:	460e      	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    6532:	464a      	mov	r2, r9
    6534:	4601      	mov	r1, r0
    6536:	a84e      	add	r0, sp, #312	; 0x138
  {
    6538:	461f      	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    653a:	f7ff fbd3 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    653e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6542:	99e2      	ldr	r1, [sp, #904]	; 0x388
    6544:	a89a      	add	r0, sp, #616	; 0x268
    6546:	f00c f979 	bl	1283c <strlcpy>
  { uint32_t new_record = index_entries_++;
    654a:	f8d4 51a4 	ldr.w	r5, [r4, #420]	; 0x1a4
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    654e:	f04f 0800 	mov.w	r8, #0
    r.cpdate = 0;
    r.cptime = 0;
    r.mpdate = 0;
    r.mptime = 0;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    6552:	f04f 0a01 	mov.w	sl, #1
  { uint32_t new_record = index_entries_++;
    6556:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    6558:	aa94      	add	r2, sp, #592	; 0x250
    655a:	4629      	mov	r1, r5
    655c:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    655e:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
    r.store = p.store;
    6562:	f8bd 3146 	ldrh.w	r3, [sp, #326]	; 0x146
    r.parent = parent;
    6566:	f8cd 9250 	str.w	r9, [sp, #592]	; 0x250
    r.store = p.store;
    656a:	f8ad 325e 	strh.w	r3, [sp, #606]	; 0x25e
    r.sibling = p.child;
    656e:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    r.isdir = folder;
    6570:	f88d 725c 	strb.w	r7, [sp, #604]	; 0x25c
    r.child = 0;
    6574:	f8cd 8254 	str.w	r8, [sp, #596]	; 0x254
    r.sibling = p.child;
    6578:	9396      	str	r3, [sp, #600]	; 0x258
    r.scanned = 1;
    657a:	f88d a25d 	strb.w	sl, [sp, #605]	; 0x25d
    r.mpdate = 0;
    657e:	e9cd 8898 	strd	r8, r8, [sp, #608]	; 0x260
    WriteIndexRecord(new_record, r);
    6582:	f7ff fb0b 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    6586:	4649      	mov	r1, r9
    6588:	aa4e      	add	r2, sp, #312	; 0x138
    658a:	4620      	mov	r0, r4
    ret = p.child = AppendIndexRecord(r);
    658c:	954f      	str	r5, [sp, #316]	; 0x13c
    WriteIndexRecord(parent, p);
    658e:	f7ff fb05 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    6592:	b1d7      	cbz	r7, 65ca <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xae>
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    6594:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    6598:	f44f 7380 	mov.w	r3, #256	; 0x100
    659c:	4629      	mov	r1, r5
    659e:	4620      	mov	r0, r4
    65a0:	aa0e      	add	r2, sp, #56	; 0x38
    65a2:	f7ff fbe3 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>
    65a6:	6d73      	ldr	r3, [r6, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    65a8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    65ac:	b1c0      	cbz	r0, 65e0 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xc4>
    return sub.mkdir(vwd(), path, pFlag);
    65ae:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    65b2:	4653      	mov	r3, sl
    65b4:	aa0e      	add	r2, sp, #56	; 0x38
    65b6:	4668      	mov	r0, sp
    65b8:	f8cd 8000 	str.w	r8, [sp]
    65bc:	f002 fbfc 	bl	8db8 <FatFile::mkdir(FatFile*, char const*, bool)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    65c0:	4628      	mov	r0, r5
    65c2:	f50d 7d5a 	add.w	sp, sp, #872	; 0x368
    65c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      OpenFileByIndex(ret, (O_RDWR | O_CREAT));
    65ca:	f240 2202 	movw	r2, #514	; 0x202
    65ce:	4629      	mov	r1, r5
    65d0:	4620      	mov	r0, r4
    65d2:	f7ff fbfd 	bl	5dd0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  }
    65d6:	4628      	mov	r0, r5
    65d8:	f50d 7d5a 	add.w	sp, sp, #872	; 0x368
    65dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65e0:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    65e4:	2900      	cmp	r1, #0
    65e6:	d0f6      	beq.n	65d6 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xba>
    65e8:	900c      	str	r0, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    65ea:	4653      	mov	r3, sl
    65ec:	aa0e      	add	r2, sp, #56	; 0x38
    65ee:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    65f2:	4668      	mov	r0, sp
    65f4:	f001 fc72 	bl	7edc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    65f8:	4628      	mov	r0, r5
    65fa:	f50d 7d5a 	add.w	sp, sp, #872	; 0x368
    65fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6602:	bf00      	nop

00006604 <MTPStorage_SD::write(unsigned char const*, unsigned long)>:
    return m_fFile ? m_fFile->write(buf, count) :
    6604:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    6608:	b113      	cbz	r3, 6610 <MTPStorage_SD::write(unsigned char const*, unsigned long)+0xc>
    660a:	4618      	mov	r0, r3
    660c:	f003 b89e 	b.w	974c <FatFile::write(void const*, unsigned int)>
    6610:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
           m_xFile ? m_xFile->write(buf, count) : 0;
    6614:	b108      	cbz	r0, 661a <MTPStorage_SD::write(unsigned char const*, unsigned long)+0x16>
    6616:	f001 bd3f 	b.w	8098 <ExFatFile::write(void const*, unsigned int)>
  {
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    661a:	4770      	bx	lr

0000661c <MTPStorage_SD::close()>:

  void MTPStorage_SD::close() 
  {
    661c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6620:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->fileSize() :
    6622:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
    6626:	b0c8      	sub	sp, #288	; 0x120
    6628:	2800      	cmp	r0, #0
    662a:	d03a      	beq.n	66a2 <MTPStorage_SD::close()+0x86>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    662c:	f10d 0602 	add.w	r6, sp, #2
    6630:	466d      	mov	r5, sp
  uint32_t fileSize() const {return m_fileSize;}
    6632:	f8d0 901c 	ldr.w	r9, [r0, #28]
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    uint16_t cpdate,cptime,mpdate,mptime;
    file_.getCreateDateTime(&cpdate,&cptime);
    6636:	f504 7a82 	add.w	sl, r4, #260	; 0x104
    663a:	4632      	mov	r2, r6
    663c:	4629      	mov	r1, r5
    663e:	f002 fae5 	bl	8c0c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    6642:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    6646:	2800      	cmp	r0, #0
    6648:	d03d      	beq.n	66c6 <MTPStorage_SD::close()+0xaa>
    664a:	f10d 0806 	add.w	r8, sp, #6
    664e:	af01      	add	r7, sp, #4
    6650:	4642      	mov	r2, r8
    6652:	4639      	mov	r1, r7
    6654:	f002 fada 	bl	8c0c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.getCreateDateTime(&mpdate,&mptime);
    file_.close();
    6658:	4650      	mov	r0, sl
    665a:	f004 fa73 	bl	ab44 <FsBaseFile::close()>
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    665e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    6662:	4621      	mov	r1, r4
    6664:	a802      	add	r0, sp, #8
    6666:	f7ff fb3d 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    r.cpdate=cpdate;
    666a:	882b      	ldrh	r3, [r5, #0]
    r.cptime=cptime;
    666c:	8832      	ldrh	r2, [r6, #0]
    r.mpdate=mpdate;
    r.mptime=mptime;
    WriteIndexRecord(open_file_, r);
    666e:	4620      	mov	r0, r4
    r.mpdate=mpdate;
    6670:	8839      	ldrh	r1, [r7, #0]
    r.cpdate=cpdate;
    6672:	f8ad 3018 	strh.w	r3, [sp, #24]
    r.mptime=mptime;
    6676:	f8b8 3000 	ldrh.w	r3, [r8]
    r.cptime=cptime;
    667a:	f8ad 201a 	strh.w	r2, [sp, #26]
    WriteIndexRecord(open_file_, r);
    667e:	aa02      	add	r2, sp, #8
    r.mpdate=mpdate;
    6680:	f8ad 101c 	strh.w	r1, [sp, #28]
    WriteIndexRecord(open_file_, r);
    6684:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    r.mptime=mptime;
    6688:	f8ad 301e 	strh.w	r3, [sp, #30]
    r.child = size;
    668c:	f8cd 900c 	str.w	r9, [sp, #12]
    WriteIndexRecord(open_file_, r);
    6690:	f7ff fa84 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    6694:	f06f 0301 	mvn.w	r3, #1
    6698:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
  }
    669c:	b048      	add	sp, #288	; 0x120
    669e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    66a2:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
           m_xFile ? m_xFile->fileSize() : 0;
    66a6:	b1d0      	cbz	r0, 66de <MTPStorage_SD::close()+0xc2>
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    66a8:	f10d 0602 	add.w	r6, sp, #2
    66ac:	466d      	mov	r5, sp
    uint32_t size = (uint32_t) file_.size();
    66ae:	f8d0 9010 	ldr.w	r9, [r0, #16]
    file_.getCreateDateTime(&cpdate,&cptime);
    66b2:	f504 7a82 	add.w	sl, r4, #260	; 0x104
    66b6:	4632      	mov	r2, r6
    66b8:	4629      	mov	r1, r5
    66ba:	f000 fd51 	bl	7160 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    66be:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    66c2:	2800      	cmp	r0, #0
    66c4:	d1c1      	bne.n	664a <MTPStorage_SD::close()+0x2e>
    66c6:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    66ca:	f10d 0806 	add.w	r8, sp, #6
    66ce:	af01      	add	r7, sp, #4
    66d0:	2800      	cmp	r0, #0
    66d2:	d0c1      	beq.n	6658 <MTPStorage_SD::close()+0x3c>
    66d4:	4642      	mov	r2, r8
    66d6:	4639      	mov	r1, r7
    66d8:	f000 fd42 	bl	7160 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    66dc:	e7bc      	b.n	6658 <MTPStorage_SD::close()+0x3c>
    66de:	f504 7a82 	add.w	sl, r4, #260	; 0x104
    uint32_t size = (uint32_t) file_.size();
    66e2:	4681      	mov	r9, r0
    66e4:	f10d 0602 	add.w	r6, sp, #2
    66e8:	466d      	mov	r5, sp
    66ea:	f10d 0806 	add.w	r8, sp, #6
    66ee:	af01      	add	r7, sp, #4
    66f0:	e7b2      	b.n	6658 <MTPStorage_SD::close()+0x3c>
    66f2:	bf00      	nop

000066f4 <MTPStorage_SD::rename(unsigned long, char const*)>:

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    66f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    66f6:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    66fa:	f44f 7380 	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    66fe:	4617      	mov	r7, r2
    6700:	460d      	mov	r5, r1
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    6702:	aa10      	add	r2, sp, #64	; 0x40
  { char oldName[MAX_FILENAME_LEN];
    6704:	4604      	mov	r4, r0
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    6706:	f7ff fb31 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>
    670a:	4606      	mov	r6, r0
							  return write((const uint8_t *)str, strlen(str)); }
    670c:	a810      	add	r0, sp, #64	; 0x40
    670e:	f00c fbf7 	bl	12f00 <strlen>
    6712:	4601      	mov	r1, r0
    6714:	a810      	add	r0, sp, #64	; 0x40
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    6716:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    671a:	f009 fcfb 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    671e:	4832      	ldr	r0, [pc, #200]	; (67e8 <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    6720:	f007 f972 	bl	da08 <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    6724:	462a      	mov	r2, r5
    6726:	4621      	mov	r1, r4
    6728:	a8d0      	add	r0, sp, #832	; 0x340
    672a:	f7ff fadb 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    672e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6732:	a9d6      	add	r1, sp, #856	; 0x358
    6734:	a890      	add	r0, sp, #576	; 0x240
    6736:	f00c f881 	bl	1283c <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    673a:	4639      	mov	r1, r7
    673c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6740:	a8d6      	add	r0, sp, #856	; 0x358
    6742:	f00c f87b 	bl	1283c <strlcpy>

    WriteIndexRecord(handle, p1);
    6746:	aad0      	add	r2, sp, #832	; 0x340
    6748:	4629      	mov	r1, r5
    674a:	4620      	mov	r0, r4
    674c:	f7ff fa26 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    6750:	f44f 7380 	mov.w	r3, #256	; 0x100
    6754:	aa50      	add	r2, sp, #320	; 0x140
    6756:	4629      	mov	r1, r5
    6758:	4620      	mov	r0, r4
    675a:	f7ff fb07 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>
							  return write((const uint8_t *)str, strlen(str)); }
    675e:	a850      	add	r0, sp, #320	; 0x140
    6760:	f00c fbce 	bl	12f00 <strlen>
    6764:	4601      	mov	r1, r0
    6766:	a850      	add	r0, sp, #320	; 0x140
    6768:	f009 fcd4 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    676c:	481e      	ldr	r0, [pc, #120]	; (67e8 <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    676e:	f007 f94b 	bl	da08 <Print::println()>
    6772:	6d72      	ldr	r2, [r6, #84]	; 0x54
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    6774:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6778:	b1cb      	cbz	r3, 67ae <MTPStorage_SD::rename(unsigned long, char const*)+0xba>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    677a:	f503 6189 	add.w	r1, r3, #1096	; 0x448
  FatFile() {}
    677e:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    6780:	aa10      	add	r2, sp, #64	; 0x40
    6782:	a802      	add	r0, sp, #8
    6784:	e9cd 1301 	strd	r1, r3, [sp, #4]
    6788:	f002 fb8c 	bl	8ea4 <FatFile::open(FatFile*, char const*, int)>
    678c:	9901      	ldr	r1, [sp, #4]
    678e:	bb20      	cbnz	r0, 67da <MTPStorage_SD::rename(unsigned long, char const*)+0xe6>
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    6790:	a990      	add	r1, sp, #576	; 0x240
    6792:	f44f 7280 	mov.w	r2, #256	; 0x100
    6796:	a8d6      	add	r0, sp, #856	; 0x358
    6798:	f00c f850 	bl	1283c <strlcpy>
    WriteIndexRecord(handle, p1);
    679c:	4620      	mov	r0, r4
    679e:	aad0      	add	r2, sp, #832	; 0x340
    67a0:	4629      	mov	r1, r5
    67a2:	f7ff f9fb 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    67a6:	2000      	movs	r0, #0
  }
    67a8:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
    67ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67ae:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    67b2:	2900      	cmp	r1, #0
    67b4:	d0ec      	beq.n	6790 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    67b6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    67ba:	aa10      	add	r2, sp, #64	; 0x40
    67bc:	a802      	add	r0, sp, #8
    67be:	930e      	str	r3, [sp, #56]	; 0x38
    67c0:	9101      	str	r1, [sp, #4]
    67c2:	f001 f87b 	bl	78bc <ExFatFile::open(ExFatFile*, char const*, int)>
    67c6:	9901      	ldr	r1, [sp, #4]
    67c8:	2800      	cmp	r0, #0
    67ca:	d0e1      	beq.n	6790 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    67cc:	aa50      	add	r2, sp, #320	; 0x140
    67ce:	a802      	add	r0, sp, #8
    67d0:	f001 fb02 	bl	7dd8 <ExFatFile::rename(ExFatFile*, char const*)>
    67d4:	2800      	cmp	r0, #0
    67d6:	d1e7      	bne.n	67a8 <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    67d8:	e7da      	b.n	6790 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    67da:	aa50      	add	r2, sp, #320	; 0x140
    67dc:	a802      	add	r0, sp, #8
    67de:	f002 fd41 	bl	9264 <FatFile::rename(FatFile*, char const*)>
    67e2:	2800      	cmp	r0, #0
    67e4:	d1e0      	bne.n	67a8 <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    67e6:	e7d3      	b.n	6790 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    67e8:	20008a6c 	.word	0x20008a6c

000067ec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    67ec:	b570      	push	{r4, r5, r6, lr}
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    67ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    67f2:	f5ad 6d0a 	sub.w	sp, sp, #2208	; 0x8a0
    67f6:	4605      	mov	r5, r0
    67f8:	461e      	mov	r6, r3
    67fa:	6d49      	ldr	r1, [r1, #84]	; 0x54
    67fc:	2300      	movs	r3, #0
    67fe:	4668      	mov	r0, sp
    6800:	f004 faba 	bl	ad78 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    6804:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6806:	2b00      	cmp	r3, #0
    6808:	f000 8082 	beq.w	6910 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x124>
    680c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    6810:	f240 2302 	movw	r3, #514	; 0x202
    6814:	f8dd 28b0 	ldr.w	r2, [sp, #2224]	; 0x8b0
    6818:	a814      	add	r0, sp, #80	; 0x50
    681a:	6d69      	ldr	r1, [r5, #84]	; 0x54
    681c:	f004 faac 	bl	ad78 <FsVolume::open(char const*, int)>
    6820:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6822:	2b00      	cmp	r3, #0
    6824:	d07f      	beq.n	6926 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x13a>
    6826:	f04f 34ff 	mov.w	r4, #4294967295
    682a:	e006      	b.n	683a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
    return m_fFile ? m_fFile->write(buf, count) :
    682c:	4622      	mov	r2, r4
    682e:	a928      	add	r1, sp, #160	; 0xa0
    6830:	f002 ff8c 	bl	974c <FatFile::write(void const*, unsigned int)>
  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    6834:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    6838:	db1e      	blt.n	6878 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8c>
    return m_fFile ? m_fFile->available() :
    683a:	9812      	ldr	r0, [sp, #72]	; 0x48
    683c:	2800      	cmp	r0, #0
    683e:	d03c      	beq.n	68ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xce>
    return isFile() ? fileSize() - curPosition() : 0;
    6840:	7803      	ldrb	r3, [r0, #0]
    6842:	071a      	lsls	r2, r3, #28
    6844:	d521      	bpl.n	688a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
  while(f1.available()>0)
    6846:	69c2      	ldr	r2, [r0, #28]
    6848:	6943      	ldr	r3, [r0, #20]
    684a:	429a      	cmp	r2, r3
    684c:	d01d      	beq.n	688a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return m_fFile ? m_fFile->read(buf, count) :
    684e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6852:	a928      	add	r1, sp, #160	; 0xa0
    6854:	f002 fbfc 	bl	9050 <FatFile::read(void*, unsigned int)>
    6858:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    685a:	2c00      	cmp	r4, #0
    685c:	db4a      	blt.n	68f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x108>
    return m_fFile ? m_fFile->write(buf, count) :
    685e:	9826      	ldr	r0, [sp, #152]	; 0x98
    6860:	2800      	cmp	r0, #0
    6862:	d1e3      	bne.n	682c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x40>
    6864:	9827      	ldr	r0, [sp, #156]	; 0x9c
           m_xFile ? m_xFile->write(buf, count) : 0;
    6866:	2800      	cmp	r0, #0
    6868:	d0e4      	beq.n	6834 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x48>
    686a:	4622      	mov	r2, r4
    686c:	a928      	add	r1, sp, #160	; 0xa0
    686e:	f001 fc13 	bl	8098 <ExFatFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    6872:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    6876:	dae0      	bge.n	683a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
  }
  // close all files
  f1.close();
    6878:	ad04      	add	r5, sp, #16
  f2.close();
    687a:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    687c:	4628      	mov	r0, r5
    687e:	f004 f961 	bl	ab44 <FsBaseFile::close()>
  f2.close();
    6882:	4630      	mov	r0, r6
    6884:	f004 f95e 	bl	ab44 <FsBaseFile::close()>
    6888:	e009      	b.n	689e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb2>
  f1.close();
    688a:	ad04      	add	r5, sp, #16
  f2.close();
    688c:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    688e:	4628      	mov	r0, r5
    6890:	f004 f958 	bl	ab44 <FsBaseFile::close()>
  f2.close();
    6894:	4630      	mov	r0, r6
    6896:	f004 f955 	bl	ab44 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    689a:	3401      	adds	r4, #1
    689c:	d032      	beq.n	6904 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x118>
  return true;
    689e:	2401      	movs	r4, #1
  ~FsBaseFile() {close();}
    68a0:	4630      	mov	r0, r6
    68a2:	4e28      	ldr	r6, [pc, #160]	; (6944 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    68a4:	9614      	str	r6, [sp, #80]	; 0x50
    68a6:	f004 f94d 	bl	ab44 <FsBaseFile::close()>
    68aa:	4628      	mov	r0, r5
    68ac:	9600      	str	r6, [sp, #0]
    68ae:	f004 f949 	bl	ab44 <FsBaseFile::close()>
}
    68b2:	4620      	mov	r0, r4
    68b4:	f50d 6d0a 	add.w	sp, sp, #2208	; 0x8a0
    68b8:	bd70      	pop	{r4, r5, r6, pc}
    68ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
    68bc:	2800      	cmp	r0, #0
    68be:	d0e4      	beq.n	688a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return isFile() ? fileSize() - curPosition() : 0;
    68c0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    68c4:	071b      	lsls	r3, r3, #28
    68c6:	d5e0      	bpl.n	688a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    68c8:	6903      	ldr	r3, [r0, #16]
    68ca:	6801      	ldr	r1, [r0, #0]
    68cc:	6942      	ldr	r2, [r0, #20]
    68ce:	1a5b      	subs	r3, r3, r1
    68d0:	6845      	ldr	r5, [r0, #4]
    68d2:	eb62 0205 	sbc.w	r2, r2, r5
    return n > INT_MAX ? INT_MAX : n;
    68d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    68da:	f172 0200 	sbcs.w	r2, r2, #0
    68de:	d201      	bcs.n	68e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xf8>
  while(f1.available()>0)
    68e0:	2b00      	cmp	r3, #0
    68e2:	d0d2      	beq.n	688a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
           m_xFile ? m_xFile->read(buf, count) : -1;
    68e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    68e8:	a928      	add	r1, sp, #160	; 0xa0
    68ea:	f000 fcbf 	bl	726c <ExFatFile::read(void*, unsigned int)>
    68ee:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    68f0:	2c00      	cmp	r4, #0
    68f2:	dab4      	bge.n	685e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x72>
  f1.close();
    68f4:	ad04      	add	r5, sp, #16
  f2.close();
    68f6:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    68f8:	4628      	mov	r0, r5
    68fa:	f004 f923 	bl	ab44 <FsBaseFile::close()>
  f2.close();
    68fe:	4630      	mov	r0, r6
    6900:	f004 f920 	bl	ab44 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    6904:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    6908:	2400      	movs	r4, #0
    690a:	f7fe ffc7 	bl	589c <dbgPrint(unsigned short)>
    690e:	e7c7      	b.n	68a0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
  bool isOpen() const {return m_fFile || m_xFile;}
    6910:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    6912:	2c00      	cmp	r4, #0
    6914:	f47f af7a 	bne.w	680c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x20>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    6918:	f240 20cd 	movw	r0, #717	; 0x2cd
    691c:	ad04      	add	r5, sp, #16
    691e:	4e09      	ldr	r6, [pc, #36]	; (6944 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    6920:	f7fe ffbc 	bl	589c <dbgPrint(unsigned short)>
    6924:	e7c1      	b.n	68aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xbe>
    6926:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6928:	2c00      	cmp	r4, #0
    692a:	f47f af7c 	bne.w	6826 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    692e:	ad04      	add	r5, sp, #16
    6930:	ae18      	add	r6, sp, #96	; 0x60
    6932:	4628      	mov	r0, r5
    6934:	f004 f906 	bl	ab44 <FsBaseFile::close()>
    6938:	f44f 7034 	mov.w	r0, #720	; 0x2d0
    693c:	f7fe ffae 	bl	589c <dbgPrint(unsigned short)>
    6940:	e7ae      	b.n	68a0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
    6942:	bf00      	nop
    6944:	20000b98 	.word	0x20000b98

00006948 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    6948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    694c:	f5ad 6dd4 	sub.w	sp, sp, #1696	; 0x6a0
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    6950:	f1b3 3fff 	cmp.w	r3, #4294967295
    6954:	bf14      	ite	ne
    6956:	461f      	movne	r7, r3
    6958:	4617      	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    695a:	4604      	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    695c:	460a      	mov	r2, r1
    695e:	4601      	mov	r1, r0
    6960:	a890      	add	r0, sp, #576	; 0x240
    6962:	f7ff f9bf 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    6966:	463a      	mov	r2, r7
    6968:	4621      	mov	r1, r4
    696a:	a8d6      	add	r0, sp, #856	; 0x358
  Record p1=ReadIndexRecord(handle);
    696c:	f8bd 824e 	ldrh.w	r8, [sp, #590]	; 0x24e
  Record p2=ReadIndexRecord(newHandle);
    6970:	f7ff f9b8 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    6974:	9e91      	ldr	r6, [sp, #580]	; 0x244
  while(ix)
    6976:	2e00      	cmp	r6, #0
    6978:	d077      	beq.n	6a6a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x122>
  uint32_t iy= 0;
    697a:	2500      	movs	r5, #0
    Record px = ReadIndexRecord(ix) ;
    697c:	4632      	mov	r2, r6
    697e:	4621      	mov	r1, r4
    6980:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
    6984:	f7ff f9ae 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    6988:	f50d 618e 	add.w	r1, sp, #1136	; 0x470
    698c:	f44f 728c 	mov.w	r2, #280	; 0x118
    6990:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    6994:	f007 fe3e 	bl	e614 <memcpy>
    py.sibling = iy;
    6998:	f8cd 5590 	str.w	r5, [sp, #1424]	; 0x590
  { uint32_t new_record = index_entries_++;
    699c:	f8d4 51a4 	ldr.w	r5, [r4, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    69a0:	f50d 62b1 	add.w	r2, sp, #1416	; 0x588
    py.store = p2.store;
    69a4:	f8bd 3366 	ldrh.w	r3, [sp, #870]	; 0x366
    WriteIndexRecord(new_record, r);
    69a8:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    69aa:	1c69      	adds	r1, r5, #1
    py.parent = newHandle;
    69ac:	f8cd 7588 	str.w	r7, [sp, #1416]	; 0x588
    py.store = p2.store;
    69b0:	f8ad 3596 	strh.w	r3, [sp, #1430]	; 0x596
  { uint32_t new_record = index_entries_++;
    69b4:	f8c4 11a4 	str.w	r1, [r4, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    69b8:	4629      	mov	r1, r5
    69ba:	f7ff f8ef 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    69be:	aa10      	add	r2, sp, #64	; 0x40
    69c0:	4631      	mov	r1, r6
    69c2:	f44f 7380 	mov.w	r3, #256	; 0x100
    69c6:	4620      	mov	r0, r4
    69c8:	f7ff f9d0 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    69cc:	aa50      	add	r2, sp, #320	; 0x140
    69ce:	f44f 7380 	mov.w	r3, #256	; 0x100
    69d2:	4629      	mov	r1, r5
    69d4:	4620      	mov	r0, r4
    69d6:	f7ff f9c9 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    69da:	f89d 3594 	ldrb.w	r3, [sp, #1428]	; 0x594
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    69de:	aa10      	add	r2, sp, #64	; 0x40
    if(py.isdir) 
    69e0:	b36b      	cbz	r3, 6a3e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf6>
      sd_mkdir(py.store,newfilename);
    69e2:	f8bd 3596 	ldrh.w	r3, [sp, #1430]	; 0x596
  FatFile() {}
    69e6:	f04f 0c00 	mov.w	ip, #0
    return sub.mkdir(vwd(), path, pFlag);
    69ea:	aa50      	add	r2, sp, #320	; 0x140
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    69ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    69f0:	6d58      	ldr	r0, [r3, #84]	; 0x54
    69f2:	2301      	movs	r3, #1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    69f4:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
    69f8:	b351      	cbz	r1, 6a50 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x108>
    69fa:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    69fe:	a802      	add	r0, sp, #8
    6a00:	f8cd c008 	str.w	ip, [sp, #8]
    6a04:	f002 f9d8 	bl	8db8 <FatFile::mkdir(FatFile*, char const*, bool)>
      ScanDir(p1.store,ix); 
    6a08:	4632      	mov	r2, r6
    6a0a:	4641      	mov	r1, r8
    6a0c:	4620      	mov	r0, r4
    6a0e:	f7ff fa25 	bl	5e5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    6a12:	462b      	mov	r3, r5
    6a14:	4631      	mov	r1, r6
    6a16:	f8bd 2366 	ldrh.w	r2, [sp, #870]	; 0x366
    6a1a:	4620      	mov	r0, r4
    6a1c:	f7ff ff94 	bl	6948 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>
    ix = px.sibling;
    6a20:	f8dd 6478 	ldr.w	r6, [sp, #1144]	; 0x478
  while(ix)
    6a24:	2e00      	cmp	r6, #0
    6a26:	d1a9      	bne.n	697c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x34>
  WriteIndexRecord(newHandle,p2);
    6a28:	4620      	mov	r0, r4
    6a2a:	aad6      	add	r2, sp, #856	; 0x358
    6a2c:	4639      	mov	r1, r7
  p2.child=iy;
    6a2e:	95d7      	str	r5, [sp, #860]	; 0x35c
  WriteIndexRecord(newHandle,p2);
    6a30:	f7ff f8b4 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    6a34:	2001      	movs	r0, #1
    6a36:	f50d 6dd4 	add.w	sp, sp, #1696	; 0x6a0
    6a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    6a3e:	ab50      	add	r3, sp, #320	; 0x140
    6a40:	4641      	mov	r1, r8
    6a42:	4620      	mov	r0, r4
    6a44:	9300      	str	r3, [sp, #0]
    6a46:	f8bd 3596 	ldrh.w	r3, [sp, #1430]	; 0x596
    6a4a:	f7ff fecf 	bl	67ec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    6a4e:	e7e7      	b.n	6a20 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd8>
    6a50:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    6a54:	2b00      	cmp	r3, #0
    6a56:	d0d7      	beq.n	6a08 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xc0>
  ExFatFile() {}
    6a58:	910e      	str	r1, [sp, #56]	; 0x38
    return sub.mkdir(vwd(), path, pFlag);
    6a5a:	aa50      	add	r2, sp, #320	; 0x140
    6a5c:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    6a60:	a802      	add	r0, sp, #8
    6a62:	2301      	movs	r3, #1
    6a64:	f001 fa3a 	bl	7edc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    6a68:	e7ce      	b.n	6a08 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xc0>
  uint32_t iy= 0;
    6a6a:	4635      	mov	r5, r6
    6a6c:	e7dc      	b.n	6a28 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xe0>
    6a6e:	bf00      	nop

00006a70 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    6a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a74:	f5ad 6daa 	sub.w	sp, sp, #1360	; 0x550
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    6a78:	f1b3 3fff 	cmp.w	r3, #4294967295
    6a7c:	bf14      	ite	ne
    6a7e:	461f      	movne	r7, r3
    6a80:	4617      	moveq	r7, r2
  { 
    6a82:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    6a84:	460a      	mov	r2, r1
  { 
    6a86:	460e      	mov	r6, r1
    Record p1 = ReadIndexRecord(handle);
    6a88:	4601      	mov	r1, r0
    6a8a:	a882      	add	r0, sp, #520	; 0x208
    6a8c:	f7ff f92a 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    6a90:	463a      	mov	r2, r7
    6a92:	4621      	mov	r1, r4
    6a94:	a8c8      	add	r0, sp, #800	; 0x320
    6a96:	f7ff f925 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    6a9a:	f89d 8214 	ldrb.w	r8, [sp, #532]	; 0x214
    6a9e:	f1b8 0f00 	cmp.w	r8, #0
    6aa2:	d020      	beq.n	6ae6 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    6aa4:	f8bd 1216 	ldrh.w	r1, [sp, #534]	; 0x216
    6aa8:	4632      	mov	r2, r6
    6aaa:	4620      	mov	r0, r4
    6aac:	3101      	adds	r1, #1
    6aae:	f7ff f9d5 	bl	5e5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    6ab2:	f89d 3214 	ldrb.w	r3, [sp, #532]	; 0x214
    6ab6:	a988      	add	r1, sp, #544	; 0x220
    6ab8:	463a      	mov	r2, r7
    6aba:	3b00      	subs	r3, #0
    6abc:	4620      	mov	r0, r4
    6abe:	9100      	str	r1, [sp, #0]
    6ac0:	bf18      	it	ne
    6ac2:	2301      	movne	r3, #1
    6ac4:	f8bd 132e 	ldrh.w	r1, [sp, #814]	; 0x32e
    6ac8:	f7ff fd28 	bl	651c <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>
    6acc:	4605      	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    6ace:	f8bd 232e 	ldrh.w	r2, [sp, #814]	; 0x32e
    6ad2:	4631      	mov	r1, r6
    6ad4:	4620      	mov	r0, r4
    6ad6:	462b      	mov	r3, r5
    6ad8:	f7ff ff36 	bl	6948 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>
  }
    6adc:	4628      	mov	r0, r5
    6ade:	f50d 6daa 	add.w	sp, sp, #1360	; 0x550
    6ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    6ae6:	a988      	add	r1, sp, #544	; 0x220
    6ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
    6aec:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
    6af0:	f00b fea4 	bl	1283c <strlcpy>
  { uint32_t new_record = index_entries_++;
    6af4:	f8d4 51a4 	ldr.w	r5, [r4, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    6af8:	f50d 6287 	add.w	r2, sp, #1080	; 0x438
    6afc:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    6afe:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    6b00:	4629      	mov	r1, r5
      r.parent = newParent;
    6b02:	f8cd 7438 	str.w	r7, [sp, #1080]	; 0x438
  { uint32_t new_record = index_entries_++;
    6b06:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
      r.store = p2.store;
    6b0a:	f8bd 332e 	ldrh.w	r3, [sp, #814]	; 0x32e
      r.child = 0;
    6b0e:	f8cd 843c 	str.w	r8, [sp, #1084]	; 0x43c
      r.store = p2.store;
    6b12:	f8ad 3446 	strh.w	r3, [sp, #1094]	; 0x446
      r.sibling = p2.child;
    6b16:	9bc9      	ldr	r3, [sp, #804]	; 0x324
      r.isdir = 0;
    6b18:	f8ad 8444 	strh.w	r8, [sp, #1092]	; 0x444
      r.sibling = p2.child;
    6b1c:	f8cd 3440 	str.w	r3, [sp, #1088]	; 0x440
    WriteIndexRecord(new_record, r);
    6b20:	f7ff f83c 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent, p2);
    6b24:	4639      	mov	r1, r7
    6b26:	aac8      	add	r2, sp, #800	; 0x320
    6b28:	4620      	mov	r0, r4
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    6b2a:	af42      	add	r7, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
    6b2c:	95c9      	str	r5, [sp, #804]	; 0x324
      WriteIndexRecord(newParent, p2);
    6b2e:	f7ff f835 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    6b32:	4631      	mov	r1, r6
    6b34:	aa02      	add	r2, sp, #8
    6b36:	f44f 7380 	mov.w	r3, #256	; 0x100
    6b3a:	4620      	mov	r0, r4
    6b3c:	f7ff f916 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>
    6b40:	4606      	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    6b42:	463a      	mov	r2, r7
    6b44:	4629      	mov	r1, r5
    6b46:	f44f 7380 	mov.w	r3, #256	; 0x100
    6b4a:	4620      	mov	r0, r4
    6b4c:	f7ff f90e 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    6b50:	aa02      	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    6b52:	4603      	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    6b54:	4631      	mov	r1, r6
    6b56:	4620      	mov	r0, r4
    6b58:	9700      	str	r7, [sp, #0]
    6b5a:	f7ff fe47 	bl	67ec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
  }
    6b5e:	4628      	mov	r0, r5
    6b60:	f50d 6daa 	add.w	sp, sp, #1360	; 0x550
    6b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006b68 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    6b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b6c:	461d      	mov	r5, r3
    6b6e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    6b72:	b08e      	sub	sp, #56	; 0x38
    6b74:	460e      	mov	r6, r1
    6b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6b78:	4604      	mov	r4, r0
    6b7a:	4690      	mov	r8, r2
    6b7c:	9f14      	ldr	r7, [sp, #80]	; 0x50
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    6b7e:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    6b82:	b199      	cbz	r1, 6bac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x44>
    6b84:	2300      	movs	r3, #0
    6b86:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    6b8a:	463a      	mov	r2, r7
    6b8c:	4668      	mov	r0, sp
    6b8e:	9300      	str	r3, [sp, #0]
    6b90:	2301      	movs	r3, #1
    6b92:	f002 f911 	bl	8db8 <FatFile::mkdir(FatFile*, char const*, bool)>

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    6b96:	b1b0      	cbz	r0, 6bc6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    6b98:	462b      	mov	r3, r5
    6b9a:	4642      	mov	r2, r8
    6b9c:	4631      	mov	r1, r6
    6b9e:	4620      	mov	r0, r4
    6ba0:	9714      	str	r7, [sp, #80]	; 0x50
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    6ba2:	b00e      	add	sp, #56	; 0x38
    6ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6ba8:	f000 b816 	b.w	6bd8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
    6bac:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    6bb0:	b14b      	cbz	r3, 6bc6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    6bb2:	910c      	str	r1, [sp, #48]	; 0x30
    6bb4:	463a      	mov	r2, r7
    6bb6:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    6bba:	4668      	mov	r0, sp
    6bbc:	2301      	movs	r3, #1
    6bbe:	f001 f98d 	bl	7edc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    6bc2:	2800      	cmp	r0, #0
    6bc4:	d1e8      	bne.n	6b98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x30>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    6bc6:	f240 20e6 	movw	r0, #742	; 0x2e6
    6bca:	f7fe fe67 	bl	589c <dbgPrint(unsigned short)>
}
    6bce:	2000      	movs	r0, #0
    6bd0:	b00e      	add	sp, #56	; 0x38
    6bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bd6:	bf00      	nop

00006bd8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    6bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bdc:	461f      	mov	r7, r3
    6bde:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    6be2:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
    6be6:	460d      	mov	r5, r1
    6be8:	4619      	mov	r1, r3
    6bea:	4604      	mov	r4, r0
  FsFile f1=sd_open(store0,oldfilename,O_READ);
    6bec:	9302      	str	r3, [sp, #8]
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    6bee:	a812      	add	r0, sp, #72	; 0x48
    6bf0:	2300      	movs	r3, #0
    6bf2:	6d49      	ldr	r1, [r1, #84]	; 0x54
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    6bf4:	4616      	mov	r6, r2
    6bf6:	f8dd a310 	ldr.w	sl, [sp, #784]	; 0x310
    6bfa:	f004 f8bd 	bl	ad78 <FsVolume::open(char const*, int)>
    6bfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
    6c00:	2b00      	cmp	r3, #0
    6c02:	f000 8101 	beq.w	6e08 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x230>
    6c06:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    6c0a:	f8df 9244 	ldr.w	r9, [pc, #580]	; 6e50 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    6c0e:	f8df b244 	ldr.w	fp, [pc, #580]	; 6e54 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x27c>
    6c12:	e01b      	b.n	6c4c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x74>
    return m_fFile ? m_fFile->getName(name, len) :
    6c14:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c18:	a97a      	add	r1, sp, #488	; 0x1e8
    6c1a:	f003 fbb3 	bl	a384 <FatFile::getName(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    6c1e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    6c20:	2b00      	cmp	r3, #0
    6c22:	d067      	beq.n	6cf4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11c>
        if(f2.isDirectory())
    6c24:	781b      	ldrb	r3, [r3, #0]
    6c26:	f013 0f70 	tst.w	r3, #112	; 0x70
    6c2a:	d06a      	beq.n	6d02 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6c2c:	ab7a      	add	r3, sp, #488	; 0x1e8
    6c2e:	aa3a      	add	r2, sp, #232	; 0xe8
    6c30:	4629      	mov	r1, r5
    6c32:	4620      	mov	r0, r4
    6c34:	9300      	str	r3, [sp, #0]
    6c36:	463b      	mov	r3, r7
    6c38:	f7ff ff96 	bl	6b68 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    6c3c:	2800      	cmp	r0, #0
    6c3e:	f000 80f6 	beq.w	6e2e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x256>
  ~FsBaseFile() {close();}
    6c42:	a82a      	add	r0, sp, #168	; 0xa8
    6c44:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    6c48:	f003 ff7c 	bl	ab44 <FsBaseFile::close()>
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    6c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c50:	4631      	mov	r1, r6
    6c52:	a83a      	add	r0, sp, #232	; 0xe8
    6c54:	f00b fdf2 	bl	1283c <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    6c58:	a83a      	add	r0, sp, #232	; 0xe8
    6c5a:	f00c f951 	bl	12f00 <strlen>
    6c5e:	ab3a      	add	r3, sp, #232	; 0xe8
    6c60:	4418      	add	r0, r3
    6c62:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6c66:	2b2f      	cmp	r3, #47	; 0x2f
    6c68:	d005      	beq.n	6c76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x9e>
    6c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c6e:	4659      	mov	r1, fp
    6c70:	a83a      	add	r0, sp, #232	; 0xe8
    6c72:	f00b fdaf 	bl	127d4 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    6c76:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c7a:	4651      	mov	r1, sl
    6c7c:	a87a      	add	r0, sp, #488	; 0x1e8
    6c7e:	f00b fddd 	bl	1283c <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    6c82:	a87a      	add	r0, sp, #488	; 0x1e8
    6c84:	f00c f93c 	bl	12f00 <strlen>
    6c88:	ab7a      	add	r3, sp, #488	; 0x1e8
    6c8a:	4418      	add	r0, r3
    6c8c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6c90:	2b2f      	cmp	r3, #47	; 0x2f
    6c92:	d005      	beq.n	6ca0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xc8>
    6c94:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c98:	4659      	mov	r1, fp
    6c9a:	a87a      	add	r0, sp, #488	; 0x1e8
    6c9c:	f00b fd9a 	bl	127d4 <strlcat>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6ca0:	4b69      	ldr	r3, [pc, #420]	; (6e48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x270>)
	constexpr Print() : write_error(0) {}
    6ca2:	2200      	movs	r2, #0
    tmpFile.openNext(this, oflag);
    6ca4:	4641      	mov	r1, r8
    6ca6:	a82a      	add	r0, sp, #168	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6ca8:	9326      	str	r3, [sp, #152]	; 0x98
	constexpr Stream() : _timeout(1000), read_error(0) {}
    6caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6cae:	9227      	str	r2, [sp, #156]	; 0x9c
    6cb0:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
    6cb4:	9328      	str	r3, [sp, #160]	; 0xa0
  FsBaseFile() {}
    6cb6:	e9cd 2238 	strd	r2, r2, [sp, #224]	; 0xe0
    tmpFile.openNext(this, oflag);
    6cba:	f003 ffaf 	bl	ac1c <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    6cbe:	9838      	ldr	r0, [sp, #224]	; 0xe0
    6cc0:	2200      	movs	r2, #0
    6cc2:	2800      	cmp	r0, #0
    6cc4:	d055      	beq.n	6d72 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x19a>
    *name = 0;
    6cc6:	f88d 20e8 	strb.w	r2, [sp, #232]	; 0xe8
    return m_fFile ? m_fFile->getName(name, len) :
    6cca:	a93a      	add	r1, sp, #232	; 0xe8
    6ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
    6cd0:	f003 fb58 	bl	a384 <FatFile::getName(char*, unsigned int)>
    *name = 0;
    6cd4:	2300      	movs	r3, #0
    return m_fFile ? m_fFile->getName(name, len) :
    6cd6:	9838      	ldr	r0, [sp, #224]	; 0xe0
    *name = 0;
    6cd8:	f88d 31e8 	strb.w	r3, [sp, #488]	; 0x1e8
    return m_fFile ? m_fFile->getName(name, len) :
    6cdc:	2800      	cmp	r0, #0
    6cde:	d199      	bne.n	6c14 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x3c>
    6ce0:	9839      	ldr	r0, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->getName(name, len) : 0;
    6ce2:	b170      	cbz	r0, 6d02 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    return getName8(name, size);
    6ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
    6ce8:	a97a      	add	r1, sp, #488	; 0x1e8
    6cea:	f001 fb3b 	bl	8364 <ExFatFile::getName8(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    6cee:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	d197      	bne.n	6c24 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x4c>
    6cf4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->isDir() : false;
    6cf6:	b123      	cbz	r3, 6d02 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    6cf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    6cfc:	f013 0f50 	tst.w	r3, #80	; 0x50
    6d00:	d194      	bne.n	6c2c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x54>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6d02:	ab7a      	add	r3, sp, #488	; 0x1e8
    6d04:	aa3a      	add	r2, sp, #232	; 0xe8
    6d06:	4629      	mov	r1, r5
    6d08:	4620      	mov	r0, r4
    6d0a:	9300      	str	r3, [sp, #0]
    6d0c:	463b      	mov	r3, r7
    6d0e:	f7ff fd6d 	bl	67ec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    6d12:	2800      	cmp	r0, #0
    6d14:	f000 8086 	beq.w	6e24 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x24c>
							  return write((const uint8_t *)str, strlen(str)); }
    6d18:	a83a      	add	r0, sp, #232	; 0xe8
    6d1a:	f00c f8f1 	bl	12f00 <strlen>
    6d1e:	4601      	mov	r1, r0
    6d20:	a83a      	add	r0, sp, #232	; 0xe8
    6d22:	f009 f9f7 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6d26:	4849      	ldr	r0, [pc, #292]	; (6e4c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x274>)
    6d28:	f006 fe6e 	bl	da08 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    6d2c:	9b02      	ldr	r3, [sp, #8]
    6d2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    6d30:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6d34:	b343      	cbz	r3, 6d88 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1b0>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6d36:	4619      	mov	r1, r3
    6d38:	2300      	movs	r3, #0
    6d3a:	aa3a      	add	r2, sp, #232	; 0xe8
    6d3c:	a804      	add	r0, sp, #16
    6d3e:	9304      	str	r3, [sp, #16]
    6d40:	2301      	movs	r3, #1
    6d42:	f002 f931 	bl	8fa8 <FatFile::open(FatVolume*, char const*, int)>
    6d46:	2800      	cmp	r0, #0
    6d48:	d157      	bne.n	6dfa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x222>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    6d4a:	f240 3002 	movw	r0, #770	; 0x302
    6d4e:	f7fe fda5 	bl	589c <dbgPrint(unsigned short)>
  ~FsBaseFile() {close();}
    6d52:	a82a      	add	r0, sp, #168	; 0xa8
    6d54:	2400      	movs	r4, #0
    6d56:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    6d5a:	f003 fef3 	bl	ab44 <FsBaseFile::close()>
    6d5e:	4640      	mov	r0, r8
    6d60:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    6d64:	f003 feee 	bl	ab44 <FsBaseFile::close()>
}
    6d68:	4620      	mov	r0, r4
    6d6a:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    6d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    6d72:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    6d74:	b1db      	cbz	r3, 6dae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1d6>
    *name = 0;
    6d76:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
    6d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
    6d7e:	4618      	mov	r0, r3
    6d80:	a93a      	add	r1, sp, #232	; 0xe8
    6d82:	f001 faef 	bl	8364 <ExFatFile::getName8(char*, unsigned int)>
    6d86:	e7a5      	b.n	6cd4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xfc>
    6d88:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    6d8c:	2900      	cmp	r1, #0
    6d8e:	d0dc      	beq.n	6d4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ExFatFile() {}
    6d90:	9310      	str	r3, [sp, #64]	; 0x40
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6d92:	aa3a      	add	r2, sp, #232	; 0xe8
    6d94:	2301      	movs	r3, #1
    6d96:	a804      	add	r0, sp, #16
    6d98:	f000 fe0c 	bl	79b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6d9c:	2800      	cmp	r0, #0
    6d9e:	d0d4      	beq.n	6d4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
    6da0:	a804      	add	r0, sp, #16
    6da2:	f000 fe6b 	bl	7a7c <ExFatFile::remove()>
    6da6:	2800      	cmp	r0, #0
    6da8:	f47f af4b 	bne.w	6c42 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    6dac:	e7cd      	b.n	6d4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ~FsBaseFile() {close();}
    6dae:	a82a      	add	r0, sp, #168	; 0xa8
    6db0:	9303      	str	r3, [sp, #12]
    6db2:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    6db6:	f003 fec5 	bl	ab44 <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    6dba:	9b02      	ldr	r3, [sp, #8]
    6dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->rmdir(path) :
    6dbe:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    6dc2:	b170      	cbz	r0, 6de2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x20a>
    6dc4:	9b03      	ldr	r3, [sp, #12]
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6dc6:	4601      	mov	r1, r0
    6dc8:	4632      	mov	r2, r6
    6dca:	a826      	add	r0, sp, #152	; 0x98
    6dcc:	9326      	str	r3, [sp, #152]	; 0x98
    6dce:	f002 f8eb 	bl	8fa8 <FatFile::open(FatVolume*, char const*, int)>
    6dd2:	4604      	mov	r4, r0
    6dd4:	2800      	cmp	r0, #0
    6dd6:	d0c2      	beq.n	6d5e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    6dd8:	a826      	add	r0, sp, #152	; 0x98
    6dda:	f002 fb39 	bl	9450 <FatFile::rmdir()>
    6dde:	4604      	mov	r4, r0
    6de0:	e7bd      	b.n	6d5e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    6de2:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    6de6:	b131      	cbz	r1, 6df6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6de8:	4603      	mov	r3, r0
    6dea:	9032      	str	r0, [sp, #200]	; 0xc8
    6dec:	4632      	mov	r2, r6
    6dee:	a826      	add	r0, sp, #152	; 0x98
    6df0:	f000 fde0 	bl	79b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6df4:	bb00      	cbnz	r0, 6e38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x260>
    6df6:	2400      	movs	r4, #0
    6df8:	e7b1      	b.n	6d5e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6dfa:	a804      	add	r0, sp, #16
    6dfc:	f003 f934 	bl	a068 <FatFile::remove()>
    6e00:	2800      	cmp	r0, #0
    6e02:	f47f af1e 	bne.w	6c42 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    6e06:	e7a0      	b.n	6d4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  bool isOpen() const {return m_fFile || m_xFile;}
    6e08:	9925      	ldr	r1, [sp, #148]	; 0x94
    6e0a:	2900      	cmp	r1, #0
    6e0c:	f47f aefb 	bne.w	6c06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2e>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    6e10:	f240 20e9 	movw	r0, #745	; 0x2e9
    6e14:	460c      	mov	r4, r1
    6e16:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    6e1a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 6e50 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
    6e1e:	f7fe fd3d 	bl	589c <dbgPrint(unsigned short)>
    6e22:	e79c      	b.n	6d5e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6e24:	f240 3001 	movw	r0, #769	; 0x301
    6e28:	f7fe fd38 	bl	589c <dbgPrint(unsigned short)>
    6e2c:	e791      	b.n	6d52 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6e2e:	f240 20fd 	movw	r0, #765	; 0x2fd
    6e32:	f7fe fd33 	bl	589c <dbgPrint(unsigned short)>
    6e36:	e78c      	b.n	6d52 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
    6e38:	a826      	add	r0, sp, #152	; 0x98
    6e3a:	f000 fe79 	bl	7b30 <ExFatFile::rmdir()>
    6e3e:	4604      	mov	r4, r0
    6e40:	2800      	cmp	r0, #0
    6e42:	d0d8      	beq.n	6df6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    6e44:	e78b      	b.n	6d5e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    6e46:	bf00      	nop
    6e48:	20000c60 	.word	0x20000c60
    6e4c:	20008a6c 	.word	0x20008a6c
    6e50:	20000b98 	.word	0x20000b98
    6e54:	20000498 	.word	0x20000498

00006e58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    6e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6e5c:	460d      	mov	r5, r1
    6e5e:	f6ad 3d0c 	subw	sp, sp, #2828	; 0xb0c
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    6e62:	f1b3 3fff 	cmp.w	r3, #4294967295
    6e66:	bf14      	ite	ne
    6e68:	461f      	movne	r7, r3
    6e6a:	4617      	moveq	r7, r2
  { 
    6e6c:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    6e6e:	4601      	mov	r1, r0
    6e70:	462a      	mov	r2, r5
    6e72:	a8d8      	add	r0, sp, #864	; 0x360
    6e74:	f7fe ff36 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    6e78:	463a      	mov	r2, r7
    6e7a:	4621      	mov	r1, r4
    6e7c:	f50d 608f 	add.w	r0, sp, #1144	; 0x478
    6e80:	f7fe ff30 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    6e84:	9ad8      	ldr	r2, [sp, #864]	; 0x360
    6e86:	4621      	mov	r1, r4
    6e88:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
    6e8c:	f7fe ff2a 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    6e90:	f89d 336c 	ldrb.w	r3, [sp, #876]	; 0x36c
    6e94:	b123      	cbz	r3, 6ea0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    6e96:	f89d 336d 	ldrb.w	r3, [sp, #877]	; 0x36d
    6e9a:	2b00      	cmp	r3, #0
    6e9c:	f000 80f2 	beq.w	7084 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x22c>
    Record p1o = p1;
    6ea0:	f44f 728c 	mov.w	r2, #280	; 0x118
    6ea4:	a9d8      	add	r1, sp, #864	; 0x360
    6ea6:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    6eaa:	f007 fbb3 	bl	e614 <memcpy>
    Record p2o = p2;
    6eae:	f44f 728c 	mov.w	r2, #280	; 0x118
    6eb2:	f50d 618f 	add.w	r1, sp, #1144	; 0x478
    6eb6:	f50d 60f8 	add.w	r0, sp, #1984	; 0x7c0
    6eba:	f007 fbab 	bl	e614 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    6ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
    6ec2:	aa58      	add	r2, sp, #352	; 0x160
    6ec4:	4629      	mov	r1, r5
    6ec6:	4620      	mov	r0, r4
    6ec8:	f7fe ff50 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    6ecc:	f8dd 6594 	ldr.w	r6, [sp, #1428]	; 0x594
    6ed0:	42ae      	cmp	r6, r5
    6ed2:	f000 8096 	beq.w	7002 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1aa>
        px = ReadIndexRecord(jx); 
    6ed6:	4632      	mov	r2, r6
    6ed8:	4621      	mov	r1, r4
    6eda:	a804      	add	r0, sp, #16
    6edc:	f7fe ff02 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6ee0:	f44f 728c 	mov.w	r2, #280	; 0x118
    6ee4:	a904      	add	r1, sp, #16
    6ee6:	f50d 601f 	add.w	r0, sp, #2544	; 0x9f0
    6eea:	f007 fb93 	bl	e614 <memcpy>
        pxo = px;
    6eee:	f44f 728c 	mov.w	r2, #280	; 0x118
    6ef2:	f50d 611f 	add.w	r1, sp, #2544	; 0x9f0
    6ef6:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
    6efa:	f007 fb8b 	bl	e614 <memcpy>
        while(handle != px.sibling)
    6efe:	f8dd 29f8 	ldr.w	r2, [sp, #2552]	; 0x9f8
    6f02:	4295      	cmp	r5, r2
    6f04:	d017      	beq.n	6f36 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xde>
          px = ReadIndexRecord(jx); 
    6f06:	4621      	mov	r1, r4
    6f08:	a804      	add	r0, sp, #16
    6f0a:	4616      	mov	r6, r2
    6f0c:	f7fe feea 	bl	5ce4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6f10:	f44f 728c 	mov.w	r2, #280	; 0x118
    6f14:	a904      	add	r1, sp, #16
    6f16:	f50d 601f 	add.w	r0, sp, #2544	; 0x9f0
    6f1a:	f007 fb7b 	bl	e614 <memcpy>
          pxo = px;
    6f1e:	f44f 728c 	mov.w	r2, #280	; 0x118
    6f22:	f50d 611f 	add.w	r1, sp, #2544	; 0x9f0
    6f26:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
    6f2a:	f007 fb73 	bl	e614 <memcpy>
        while(handle != px.sibling)
    6f2e:	f8dd 29f8 	ldr.w	r2, [sp, #2552]	; 0x9f8
    6f32:	42aa      	cmp	r2, r5
    6f34:	d1e7      	bne.n	6f06 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xae>
        px.sibling = p1.sibling;
    6f36:	9bda      	ldr	r3, [sp, #872]	; 0x368
        WriteIndexRecord(jx, px);
    6f38:	f50d 621f 	add.w	r2, sp, #2544	; 0x9f0
    6f3c:	4631      	mov	r1, r6
    6f3e:	4620      	mov	r0, r4
        px.sibling = p1.sibling;
    6f40:	f8cd 39f8 	str.w	r3, [sp, #2552]	; 0x9f8
        WriteIndexRecord(jx, px);
    6f44:	f7fe fe2a 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.sibling = p2.child;
    6f48:	f8dd 347c 	ldr.w	r3, [sp, #1148]	; 0x47c
      WriteIndexRecord(handle, p1);
    6f4c:	aad8      	add	r2, sp, #864	; 0x360
    6f4e:	4629      	mov	r1, r5
    6f50:	4620      	mov	r0, r4
      p1.sibling = p2.child;
    6f52:	93da      	str	r3, [sp, #872]	; 0x368
      p1.store = p2.store;
    6f54:	f8bd 3486 	ldrh.w	r3, [sp, #1158]	; 0x486
      p1.parent = newParent;
    6f58:	97d8      	str	r7, [sp, #864]	; 0x360
      p1.store = p2.store;
    6f5a:	f8ad 336e 	strh.w	r3, [sp, #878]	; 0x36e
      p2.child = handle;
    6f5e:	f8cd 547c 	str.w	r5, [sp, #1148]	; 0x47c
      WriteIndexRecord(handle, p1);
    6f62:	f7fe fe1b 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    6f66:	f50d 628f 	add.w	r2, sp, #1144	; 0x478
    6f6a:	4639      	mov	r1, r7
    6f6c:	4620      	mov	r0, r4
    6f6e:	f7fe fe15 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    6f72:	f44f 7380 	mov.w	r3, #256	; 0x100
    6f76:	4629      	mov	r1, r5
    6f78:	aa98      	add	r2, sp, #608	; 0x260
    6f7a:	4620      	mov	r0, r4
    6f7c:	f7fe fef6 	bl	5d6c <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    6f80:	f8bd 16b6 	ldrh.w	r1, [sp, #1718]	; 0x6b6
    6f84:	f8bd 37ce 	ldrh.w	r3, [sp, #1998]	; 0x7ce
    6f88:	4299      	cmp	r1, r3
    6f8a:	d046      	beq.n	701a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6f8c:	aa98      	add	r2, sp, #608	; 0x260
    else if(!p1o.isdir)
    6f8e:	f89d 96b4 	ldrb.w	r9, [sp, #1716]	; 0x6b4
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6f92:	4620      	mov	r0, r4
    6f94:	9200      	str	r2, [sp, #0]
    6f96:	aa58      	add	r2, sp, #352	; 0x160
    else if(!p1o.isdir)
    6f98:	f1b9 0f00 	cmp.w	r9, #0
    6f9c:	d00b      	beq.n	6fb6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x15e>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    6f9e:	f7ff fde3 	bl	6b68 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    6fa2:	2800      	cmp	r0, #0
    6fa4:	f000 8092 	beq.w	70cc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    6fa8:	f04f 0801 	mov.w	r8, #1
  }
    6fac:	4640      	mov	r0, r8
    6fae:	f60d 3d0c 	addw	sp, sp, #2828	; 0xb0c
    6fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6fb6:	f7ff fc19 	bl	67ec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    6fba:	4680      	mov	r8, r0
    6fbc:	2800      	cmp	r0, #0
    6fbe:	d044      	beq.n	704a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f2>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    6fc0:	f8bd 57ce 	ldrh.w	r5, [sp, #1998]	; 0x7ce
							  return write((const uint8_t *)str, strlen(str)); }
    6fc4:	a858      	add	r0, sp, #352	; 0x160
    6fc6:	f00b ff9b 	bl	12f00 <strlen>
    6fca:	4601      	mov	r1, r0
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    6fcc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    6fd0:	a858      	add	r0, sp, #352	; 0x160
    6fd2:	f009 f89f 	bl	10114 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6fd6:	484d      	ldr	r0, [pc, #308]	; (710c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2b4>)
    6fd8:	f006 fd16 	bl	da08 <Print::println()>
    6fdc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    6fde:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d077      	beq.n	70d6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x27e>
    6fe6:	4619      	mov	r1, r3
    6fe8:	aa58      	add	r2, sp, #352	; 0x160
    6fea:	2301      	movs	r3, #1
    6fec:	a84a      	add	r0, sp, #296	; 0x128
    6fee:	f8cd 9128 	str.w	r9, [sp, #296]	; 0x128
    6ff2:	f001 ffd9 	bl	8fa8 <FatFile::open(FatVolume*, char const*, int)>
    6ff6:	2800      	cmp	r0, #0
    6ff8:	d0d8      	beq.n	6fac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6ffa:	a84a      	add	r0, sp, #296	; 0x128
    6ffc:	f003 f834 	bl	a068 <FatFile::remove()>
    7000:	e7d4      	b.n	6fac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
        p3.child = p1.sibling;
    7002:	9bda      	ldr	r3, [sp, #872]	; 0x368
        WriteIndexRecord(p1.parent, p3);    
    7004:	f50d 62b2 	add.w	r2, sp, #1424	; 0x590
    7008:	99d8      	ldr	r1, [sp, #864]	; 0x360
    700a:	4620      	mov	r0, r4
        p3.child = p1.sibling;
    700c:	f8cd 3594 	str.w	r3, [sp, #1428]	; 0x594
    uint32_t jx=-1;
    7010:	f04f 36ff 	mov.w	r6, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    7014:	f7fe fdc2 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    7018:	e796      	b.n	6f48 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf0>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    701a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    701e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    7020:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    7024:	2b00      	cmp	r3, #0
    7026:	d039      	beq.n	709c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x244>
  FatFile* vwd() {return &m_vwd;}
    7028:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    702c:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    702e:	aa58      	add	r2, sp, #352	; 0x160
    7030:	a84a      	add	r0, sp, #296	; 0x128
    7032:	9103      	str	r1, [sp, #12]
    7034:	934a      	str	r3, [sp, #296]	; 0x128
    7036:	f001 ff35 	bl	8ea4 <FatFile::open(FatFile*, char const*, int)>
    703a:	9903      	ldr	r1, [sp, #12]
    703c:	2800      	cmp	r0, #0
    703e:	d15c      	bne.n	70fa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2a2>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    7040:	f240 205e 	movw	r0, #606	; 0x25e
    7044:	f7fe fc2a 	bl	589c <dbgPrint(unsigned short)>
    7048:	e003      	b.n	7052 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    704a:	f240 2062 	movw	r0, #610	; 0x262
    704e:	f7fe fc25 	bl	589c <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    7052:	4631      	mov	r1, r6
    7054:	f60d 02d8 	addw	r2, sp, #2264	; 0x8d8
    7058:	4620      	mov	r0, r4
    return false;
    705a:	f04f 0800 	mov.w	r8, #0
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    705e:	f7fe fd9d 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    7062:	f50d 62d5 	add.w	r2, sp, #1704	; 0x6a8
    7066:	4629      	mov	r1, r5
    7068:	4620      	mov	r0, r4
    706a:	f7fe fd97 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    706e:	4620      	mov	r0, r4
    7070:	f50d 62f8 	add.w	r2, sp, #1984	; 0x7c0
    7074:	4639      	mov	r1, r7
    7076:	f7fe fd91 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    707a:	4640      	mov	r0, r8
    707c:	f60d 3d0c 	addw	sp, sp, #2828	; 0xb0c
    7080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { ScanDir(p1.store, handle) ; // in case scan directory
    7084:	462a      	mov	r2, r5
    7086:	f8bd 136e 	ldrh.w	r1, [sp, #878]	; 0x36e
    708a:	4620      	mov	r0, r4
    708c:	f7fe fee6 	bl	5e5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    7090:	aad8      	add	r2, sp, #864	; 0x360
    7092:	4629      	mov	r1, r5
    7094:	4620      	mov	r0, r4
    7096:	f7fe fd81 	bl	5b9c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    709a:	e701      	b.n	6ea0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    709c:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    70a0:	2900      	cmp	r1, #0
    70a2:	d0cd      	beq.n	7040 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
  ExFatFile* vwd() {return &m_vwd;}
    70a4:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    70a8:	aa58      	add	r2, sp, #352	; 0x160
    70aa:	a84a      	add	r0, sp, #296	; 0x128
    70ac:	9356      	str	r3, [sp, #344]	; 0x158
    70ae:	9103      	str	r1, [sp, #12]
    70b0:	f000 fc04 	bl	78bc <ExFatFile::open(ExFatFile*, char const*, int)>
    70b4:	9903      	ldr	r1, [sp, #12]
    70b6:	2800      	cmp	r0, #0
    70b8:	d0c2      	beq.n	7040 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    70ba:	aa98      	add	r2, sp, #608	; 0x260
    70bc:	a84a      	add	r0, sp, #296	; 0x128
    70be:	f000 fe8b 	bl	7dd8 <ExFatFile::rename(ExFatFile*, char const*)>
    70c2:	4680      	mov	r8, r0
    70c4:	2800      	cmp	r0, #0
    70c6:	f47f af71 	bne.w	6fac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    70ca:	e7b9      	b.n	7040 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    70cc:	f240 2066 	movw	r0, #614	; 0x266
    70d0:	f7fe fbe4 	bl	589c <dbgPrint(unsigned short)>
    70d4:	e7bd      	b.n	7052 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
    70d6:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    70da:	2900      	cmp	r1, #0
    70dc:	f43f af64 	beq.w	6fa8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x150>
    70e0:	9356      	str	r3, [sp, #344]	; 0x158
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    70e2:	aa58      	add	r2, sp, #352	; 0x160
    70e4:	2301      	movs	r3, #1
    70e6:	a84a      	add	r0, sp, #296	; 0x128
    70e8:	f000 fc64 	bl	79b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    70ec:	2800      	cmp	r0, #0
    70ee:	f43f af5d 	beq.w	6fac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    70f2:	a84a      	add	r0, sp, #296	; 0x128
    70f4:	f000 fcc2 	bl	7a7c <ExFatFile::remove()>
    70f8:	e758      	b.n	6fac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    70fa:	aa98      	add	r2, sp, #608	; 0x260
    70fc:	a84a      	add	r0, sp, #296	; 0x128
    70fe:	f002 f8b1 	bl	9264 <FatFile::rename(FatFile*, char const*)>
    7102:	4680      	mov	r8, r0
    7104:	2800      	cmp	r0, #0
    7106:	f47f af51 	bne.w	6fac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    710a:	e799      	b.n	7040 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    710c:	20008a6c 	.word	0x20008a6c

00007110 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    7110:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    7112:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    7116:	b084      	sub	sp, #16
    7118:	468c      	mov	ip, r1
    711a:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    711c:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    711e:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    7120:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    7124:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    7128:	ea4f 124c 	mov.w	r2, ip, lsl #5
    712c:	4629      	mov	r1, r5
    712e:	6a20      	ldr	r0, [r4, #32]
    7130:	f001 faac 	bl	868c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    7134:	2801      	cmp	r0, #1
    7136:	d106      	bne.n	7146 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    7138:	4632      	mov	r2, r6
    713a:	4629      	mov	r1, r5
    713c:	6a20      	ldr	r0, [r4, #32]
    713e:	f001 fa89 	bl	8654 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    7142:	b004      	add	sp, #16
    7144:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    7146:	2000      	movs	r0, #0
}
    7148:	b004      	add	sp, #16
    714a:	bd70      	pop	{r4, r5, r6, pc}

0000714c <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    714c:	b510      	push	{r4, lr}
    714e:	4604      	mov	r4, r0
  bool rtn = sync();
    7150:	f000 fdba 	bl	7cc8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7154:	2300      	movs	r3, #0
    7156:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    715a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    715e:	bd10      	pop	{r4, pc}

00007160 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7160:	b538      	push	{r3, r4, r5, lr}
    7162:	4614      	mov	r4, r2
    7164:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    7166:	2200      	movs	r2, #0
    7168:	f100 0124 	add.w	r1, r0, #36	; 0x24
    716c:	6a00      	ldr	r0, [r0, #32]
    716e:	f001 fa71 	bl	8654 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    7172:	4603      	mov	r3, r0
    7174:	b120      	cbz	r0, 7180 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    7176:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    7178:	2001      	movs	r0, #1
  *pdate = getLe16(df->createDate);
    717a:	802a      	strh	r2, [r5, #0]
    717c:	891b      	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    717e:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    7180:	bd38      	pop	{r3, r4, r5, pc}
    7182:	bf00      	nop

00007184 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7184:	b538      	push	{r3, r4, r5, lr}
    7186:	4614      	mov	r4, r2
    7188:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    718a:	2200      	movs	r2, #0
    718c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    7190:	6a00      	ldr	r0, [r0, #32]
    7192:	f001 fa5f 	bl	8654 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    7196:	4603      	mov	r3, r0
    7198:	b120      	cbz	r0, 71a4 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    719a:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    719c:	2001      	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    719e:	802a      	strh	r2, [r5, #0]
    71a0:	899b      	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    71a2:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    71a4:	bd38      	pop	{r3, r4, r5, pc}
    71a6:	bf00      	nop

000071a8 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    71a8:	b538      	push	{r3, r4, r5, lr}
    71aa:	460d      	mov	r5, r1
  if (isOpen()) {
    71ac:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    71b0:	b109      	cbz	r1, 71b6 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    71b2:	2000      	movs	r0, #0
}
    71b4:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    71b6:	2238      	movs	r2, #56	; 0x38
    71b8:	4604      	mov	r4, r0
    71ba:	f00b fab9 	bl	12730 <memset>
  m_flags = FILE_FLAG_READ;
    71be:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    71c0:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    71c2:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    71c4:	4618      	mov	r0, r3
    71c6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    71ca:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    71ce:	bd38      	pop	{r3, r4, r5, pc}

000071d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    71d0:	b4f0      	push	{r4, r5, r6, r7}
    71d2:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    71d4:	7809      	ldrb	r1, [r1, #0]
    71d6:	2920      	cmp	r1, #32
    71d8:	d103      	bne.n	71e2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    71da:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    71de:	2c20      	cmp	r4, #32
    71e0:	d0fb      	beq.n	71da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    71e2:	6015      	str	r5, [r2, #0]
  fname->end = path;
    71e4:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    71e6:	782c      	ldrb	r4, [r5, #0]
    71e8:	2c2f      	cmp	r4, #47	; 0x2f
    71ea:	d011      	beq.n	7210 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    71ec:	b184      	cbz	r4, 7210 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    71ee:	1c6e      	adds	r6, r5, #1
    71f0:	2c3c      	cmp	r4, #60	; 0x3c
    71f2:	4f1d      	ldr	r7, [pc, #116]	; (7268 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    71f4:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    71f6:	d82a      	bhi.n	724e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    71f8:	2c21      	cmp	r4, #33	; 0x21
    71fa:	d812      	bhi.n	7222 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    71fc:	f104 3cff 	add.w	ip, r4, #4294967295
    7200:	f1bc 0f1e 	cmp.w	ip, #30
    7204:	d816      	bhi.n	7234 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    7206:	2000      	movs	r0, #0
    7208:	bcf0      	pop	{r4, r5, r6, r7}
    720a:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    720c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    7210:	2c20      	cmp	r4, #32
    7212:	d0fb      	beq.n	720c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    7214:	2c2f      	cmp	r4, #47	; 0x2f
    7216:	d0f9      	beq.n	720c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    7218:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    721a:	4611      	mov	r1, r2
}
    721c:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    721e:	f001 b907 	b.w	8430 <ExFatFile::hashName(ExName_t*)>
    7222:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    7226:	fa5f fc8c 	uxtb.w	ip, ip
    722a:	fa27 fc0c 	lsr.w	ip, r7, ip
    722e:	f01c 0f01 	tst.w	ip, #1
    7232:	d1e8      	bne.n	7206 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    7234:	2c2e      	cmp	r4, #46	; 0x2e
    7236:	d001      	beq.n	723c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    7238:	2c20      	cmp	r4, #32
    723a:	d10d      	bne.n	7258 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    723c:	f816 4b01 	ldrb.w	r4, [r6], #1
    7240:	2c00      	cmp	r4, #0
    7242:	d0e5      	beq.n	7210 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    7244:	2c2f      	cmp	r4, #47	; 0x2f
    7246:	d0e3      	beq.n	7210 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    7248:	2c3c      	cmp	r4, #60	; 0x3c
    724a:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    724c:	d9d4      	bls.n	71f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    724e:	2c5c      	cmp	r4, #92	; 0x5c
    7250:	d0d9      	beq.n	7206 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    7252:	d903      	bls.n	725c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    7254:	2c7c      	cmp	r4, #124	; 0x7c
    7256:	d0d6      	beq.n	7206 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    7258:	6096      	str	r6, [r2, #8]
    725a:	e7ef      	b.n	723c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    725c:	3c3e      	subs	r4, #62	; 0x3e
    725e:	2c01      	cmp	r4, #1
    7260:	d8fa      	bhi.n	7258 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    7262:	2000      	movs	r0, #0
    7264:	bcf0      	pop	{r4, r5, r6, r7}
    7266:	4770      	bx	lr
    7268:	05002101 	.word	0x05002101

0000726c <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    7270:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    7274:	b083      	sub	sp, #12
    7276:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    7278:	07dc      	lsls	r4, r3, #31
    727a:	d574      	bpl.n	7366 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    727c:	0658      	lsls	r0, r3, #25
    727e:	460f      	mov	r7, r1
    7280:	4690      	mov	r8, r2
    7282:	f140 80b0 	bpl.w	73e6 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    7286:	e9d5 2300 	ldrd	r2, r3, [r5]
    728a:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    728e:	eb18 0402 	adds.w	r4, r8, r2
    7292:	f143 0300 	adc.w	r3, r3, #0
    7296:	42a1      	cmp	r1, r4
    7298:	eb70 0303 	sbcs.w	r3, r0, r3
    729c:	f0c0 80a9 	bcc.w	73f2 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    72a0:	f1b8 0f00 	cmp.w	r8, #0
    72a4:	d05b      	beq.n	735e <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    72a6:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    72a8:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    72ac:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    72b0:	f8d5 a020 	ldr.w	sl, [r5, #32]
    72b4:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    72b8:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    72ba:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    72be:	2c00      	cmp	r4, #0
    72c0:	d170      	bne.n	73a4 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    72c2:	4313      	orrs	r3, r2
    72c4:	d170      	bne.n	73a8 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    72c6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    72ca:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    72cc:	bf4c      	ite	mi
    72ce:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    72d2:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    72d4:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    72d6:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    72da:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    72dc:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    72e0:	0a63      	lsrs	r3, r4, #9
    72e2:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    72e4:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    72e8:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    72ea:	f1bb 0f00 	cmp.w	fp, #0
    72ee:	d145      	bne.n	737c <ExFatFile::read(void*, unsigned int)+0x110>
    72f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    72f4:	d342      	bcc.n	737c <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    72f6:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    72fa:	4291      	cmp	r1, r2
    72fc:	d03e      	beq.n	737c <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    72fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    7302:	d358      	bcc.n	73b6 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    7304:	f04f 0b01 	mov.w	fp, #1
    7308:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    730c:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    7310:	0a73      	lsrs	r3, r6, #9
    7312:	459b      	cmp	fp, r3
    7314:	bf28      	it	cs
    7316:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    7318:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    731a:	ea4f 244b 	mov.w	r4, fp, lsl #9
    731e:	d80a      	bhi.n	7336 <ExFatFile::read(void*, unsigned int)+0xca>
    7320:	eb01 030b 	add.w	r3, r1, fp
    7324:	429a      	cmp	r2, r3
    7326:	d206      	bcs.n	7336 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    7328:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    732c:	9101      	str	r1, [sp, #4]
    732e:	f005 fded 	bl	cf0c <FsCache::sync()>
    7332:	9901      	ldr	r1, [sp, #4]
    7334:	b1b8      	cbz	r0, 7366 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    7336:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    733a:	465b      	mov	r3, fp
    733c:	6802      	ldr	r2, [r0, #0]
    733e:	f8d2 a014 	ldr.w	sl, [r2, #20]
    7342:	463a      	mov	r2, r7
    7344:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    7346:	b170      	cbz	r0, 7366 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    7348:	4623      	mov	r3, r4
    dst += n;
    734a:	4427      	add	r7, r4
    m_curPosition += n;
    734c:	e9d5 1200 	ldrd	r1, r2, [r5]
    7350:	185b      	adds	r3, r3, r1
    7352:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    7356:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    7358:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    735c:	d1a8      	bne.n	72b0 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    735e:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    7360:	b003      	add	sp, #12
    7362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    7366:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    736a:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    736e:	f043 0302 	orr.w	r3, r3, #2
    7372:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    7376:	b003      	add	sp, #12
    7378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    737c:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    7380:	2200      	movs	r2, #0
    7382:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    7386:	42b4      	cmp	r4, r6
    7388:	bf28      	it	cs
    738a:	4634      	movcs	r4, r6
    738c:	f005 fdea 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    7390:	2800      	cmp	r0, #0
    7392:	d0e8      	beq.n	7366 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    7394:	eb00 010b 	add.w	r1, r0, fp
    7398:	4622      	mov	r2, r4
    739a:	4638      	mov	r0, r7
    739c:	f007 f93a 	bl	e614 <memcpy>
    m_curPosition += n;
    73a0:	4623      	mov	r3, r4
    73a2:	e7d2      	b.n	734a <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    73a4:	69aa      	ldr	r2, [r5, #24]
    73a6:	e796      	b.n	72d6 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    73a8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    73ac:	065b      	lsls	r3, r3, #25
    73ae:	d50e      	bpl.n	73ce <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    73b0:	69aa      	ldr	r2, [r5, #24]
    73b2:	3201      	adds	r2, #1
    73b4:	e78e      	b.n	72d4 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    73b6:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    73ba:	463a      	mov	r2, r7
    73bc:	6803      	ldr	r3, [r0, #0]
    73be:	691b      	ldr	r3, [r3, #16]
    73c0:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    73c2:	2800      	cmp	r0, #0
    73c4:	d0cf      	beq.n	7366 <ExFatFile::read(void*, unsigned int)+0xfa>
    73c6:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    73ca:	461c      	mov	r4, r3
    73cc:	e7bd      	b.n	734a <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    73ce:	464a      	mov	r2, r9
    73d0:	4650      	mov	r0, sl
    73d2:	69a9      	ldr	r1, [r5, #24]
    73d4:	f001 f99c 	bl	8710 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    73d8:	2800      	cmp	r0, #0
    73da:	dbc4      	blt.n	7366 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    73dc:	d00c      	beq.n	73f8 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    73de:	f8d5 a020 	ldr.w	sl, [r5, #32]
    73e2:	69aa      	ldr	r2, [r5, #24]
    73e4:	e777      	b.n	72d6 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    73e6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    73ea:	0719      	lsls	r1, r3, #28
    73ec:	f57f af58 	bpl.w	72a0 <ExFatFile::read(void*, unsigned int)+0x34>
    73f0:	e749      	b.n	7286 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    73f2:	eba1 0802 	sub.w	r8, r1, r2
    73f6:	e753      	b.n	72a0 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    73f8:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    73fc:	f013 0f50 	tst.w	r3, #80	; 0x50
    7400:	d0b1      	beq.n	7366 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    7402:	eba8 0806 	sub.w	r8, r8, r6
    7406:	4640      	mov	r0, r8
    7408:	e7aa      	b.n	7360 <ExFatFile::read(void*, unsigned int)+0xf4>
    740a:	bf00      	nop

0000740c <ExFatFile::peek()>:
int ExFatFile::peek() {
    740c:	b5f0      	push	{r4, r5, r6, r7, lr}
    740e:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    7410:	2201      	movs	r2, #1
    7412:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    7414:	6985      	ldr	r5, [r0, #24]
    7416:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    741a:	e9d0 6700 	ldrd	r6, r7, [r0]
    741e:	f7ff ff25 	bl	726c <ExFatFile::read(void*, unsigned int)>
    7422:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    7424:	61a5      	str	r5, [r4, #24]
    7426:	bf0c      	ite	eq
    7428:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    742c:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    7430:	e9c4 6700 	strd	r6, r7, [r4]
}
    7434:	b003      	add	sp, #12
    7436:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007438 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    7438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    743c:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    743e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    7442:	b083      	sub	sp, #12
    7444:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    7446:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    744a:	2b00      	cmp	r3, #0
    744c:	d051      	beq.n	74f2 <ExFatFile::seekSet(unsigned long long)+0xba>
    744e:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    7450:	e9d0 1c00 	ldrd	r1, ip, [r0]
    7454:	45bc      	cmp	ip, r7
    7456:	bf08      	it	eq
    7458:	4291      	cmpeq	r1, r2
    745a:	d05c      	beq.n	7516 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    745c:	ea56 0207 	orrs.w	r2, r6, r7
    7460:	d04d      	beq.n	74fe <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    7462:	071d      	lsls	r5, r3, #28
    7464:	d504      	bpl.n	7470 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    7466:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    746a:	42b0      	cmp	r0, r6
    746c:	41ba      	sbcs	r2, r7
    746e:	d340      	bcc.n	74f2 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    7470:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    7474:	1e75      	subs	r5, r6, #1
    7476:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    747a:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    747c:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7480:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    7484:	3209      	adds	r2, #9
    7486:	b2d2      	uxtb	r2, r2
    7488:	f1c2 0e20 	rsb	lr, r2, #32
    748c:	40d5      	lsrs	r5, r2
    748e:	f1a2 0920 	sub.w	r9, r2, #32
    7492:	fa00 fb0e 	lsl.w	fp, r0, lr
    7496:	fa20 f009 	lsr.w	r0, r0, r9
    749a:	ea45 050b 	orr.w	r5, r5, fp
    749e:	4305      	orrs	r5, r0
  if (isContiguous()) {
    74a0:	9801      	ldr	r0, [sp, #4]
    74a2:	0640      	lsls	r0, r0, #25
    74a4:	d433      	bmi.n	750e <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    74a6:	1e48      	subs	r0, r1, #1
    74a8:	fa20 f202 	lsr.w	r2, r0, r2
    74ac:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    74b0:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    74b4:	fa00 fe0e 	lsl.w	lr, r0, lr
    74b8:	fa20 f009 	lsr.w	r0, r0, r9
    74bc:	ea42 020e 	orr.w	r2, r2, lr
    74c0:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    74c4:	d001      	beq.n	74ca <ExFatFile::seekSet(unsigned long long)+0x92>
    74c6:	4295      	cmp	r5, r2
    74c8:	d229      	bcs.n	751e <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    74ca:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    74cc:	bf4c      	ite	mi
    74ce:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    74d2:	69e3      	ldrpl	r3, [r4, #28]
    74d4:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    74d6:	f104 0918 	add.w	r9, r4, #24
    74da:	e006      	b.n	74ea <ExFatFile::seekSet(unsigned long long)+0xb2>
    74dc:	69a1      	ldr	r1, [r4, #24]
    74de:	3d01      	subs	r5, #1
    74e0:	6a20      	ldr	r0, [r4, #32]
    74e2:	f001 f915 	bl	8710 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    74e6:	2800      	cmp	r0, #0
    74e8:	dd03      	ble.n	74f2 <ExFatFile::seekSet(unsigned long long)+0xba>
    74ea:	464a      	mov	r2, r9
  while (nNew--) {
    74ec:	2d00      	cmp	r5, #0
    74ee:	d1f5      	bne.n	74dc <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    74f0:	e007      	b.n	7502 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    74f2:	2000      	movs	r0, #0
  m_curCluster = tmp;
    74f4:	f8c4 8018 	str.w	r8, [r4, #24]
}
    74f8:	b003      	add	sp, #12
    74fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    74fe:	2300      	movs	r3, #0
    7500:	6183      	str	r3, [r0, #24]
  return true;
    7502:	2001      	movs	r0, #1
  m_curPosition = pos;
    7504:	e9c4 6700 	strd	r6, r7, [r4]
}
    7508:	b003      	add	sp, #12
    750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    750e:	69e3      	ldr	r3, [r4, #28]
    7510:	442b      	add	r3, r5
    7512:	61a3      	str	r3, [r4, #24]
    goto done;
    7514:	e7f5      	b.n	7502 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    7516:	2001      	movs	r0, #1
}
    7518:	b003      	add	sp, #12
    751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    751e:	1aad      	subs	r5, r5, r2
    7520:	e7d9      	b.n	74d6 <ExFatFile::seekSet(unsigned long long)+0x9e>
    7522:	bf00      	nop

00007524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    7524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7528:	4617      	mov	r7, r2
    752a:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    752e:	b08f      	sub	sp, #60	; 0x3c
    7530:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    7532:	2a00      	cmp	r2, #0
    7534:	f040 80d7 	bne.w	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    7538:	468b      	mov	fp, r1
    753a:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    753e:	f011 0f50 	tst.w	r1, #80	; 0x50
    7542:	f000 80d0 	beq.w	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    7546:	f003 0103 	and.w	r1, r3, #3
    754a:	469a      	mov	sl, r3
    754c:	2903      	cmp	r1, #3
    754e:	f000 80ca 	beq.w	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    7552:	3101      	adds	r1, #1
    7554:	f003 0008 	and.w	r0, r3, #8
    7558:	ea41 0300 	orr.w	r3, r1, r0
    755c:	9302      	str	r3, [sp, #8]
  if (fname) {
    755e:	2f00      	cmp	r7, #0
    7560:	f000 80cb 	beq.w	76fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    7564:	6939      	ldr	r1, [r7, #16]
    7566:	f101 080e 	add.w	r8, r1, #14
    756a:	49b6      	ldr	r1, [pc, #728]	; (7844 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    756c:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    7570:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    7574:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    7578:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    757a:	f108 0802 	add.w	r8, r8, #2
    757e:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    7582:	d005      	beq.n	7590 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    7584:	2000      	movs	r0, #0
    7586:	2100      	movs	r1, #0
    m_curCluster = 0;
    7588:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    758c:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    7590:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    7592:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    7594:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    7596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    759a:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    759c:	2220      	movs	r2, #32
    759e:	a906      	add	r1, sp, #24
    75a0:	4658      	mov	r0, fp
    75a2:	f7ff fe63 	bl	726c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    75a6:	b300      	cbz	r0, 75ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    75a8:	2820      	cmp	r0, #32
    75aa:	f040 809c 	bne.w	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    75ae:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    75b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    75b6:	2a00      	cmp	r2, #0
    75b8:	f2c0 80a2 	blt.w	7700 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    75bc:	b934      	cbnz	r4, 75cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    75be:	f8db 2000 	ldr.w	r2, [fp]
    75c2:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    75c6:	f8db 2018 	ldr.w	r2, [fp, #24]
    75ca:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    75cc:	4544      	cmp	r4, r8
    75ce:	d201      	bcs.n	75d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    75d0:	3401      	adds	r4, #1
    75d2:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    75d4:	2b00      	cmp	r3, #0
    75d6:	f000 8113 	beq.w	7800 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    75da:	2220      	movs	r2, #32
    75dc:	a906      	add	r1, sp, #24
    75de:	4658      	mov	r0, fp
      inSet = false;
    75e0:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    75e2:	f7ff fe43 	bl	726c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    75e6:	2800      	cmp	r0, #0
    75e8:	d1de      	bne.n	75a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    75ea:	f41a 7f00 	tst.w	sl, #512	; 0x200
    75ee:	d07a      	beq.n	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    75f0:	9b02      	ldr	r3, [sp, #8]
    75f2:	079b      	lsls	r3, r3, #30
    75f4:	d577      	bpl.n	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    75f6:	2f00      	cmp	r7, #0
    75f8:	d075      	beq.n	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    75fa:	4544      	cmp	r4, r8
    75fc:	d217      	bcs.n	762e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    75fe:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    7602:	2220      	movs	r2, #32
    7604:	a906      	add	r1, sp, #24
    7606:	4658      	mov	r0, fp
    7608:	f7ff fe30 	bl	726c <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    760c:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    760e:	2800      	cmp	r0, #0
    7610:	d061      	beq.n	76d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    7612:	2820      	cmp	r0, #32
    7614:	d167      	bne.n	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    7616:	b92c      	cbnz	r4, 7624 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    7618:	f8db 2000 	ldr.w	r2, [fp]
    761c:	f8db a018 	ldr.w	sl, [fp, #24]
    7620:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    7624:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    7626:	45a0      	cmp	r8, r4
    7628:	d8eb      	bhi.n	7602 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    762a:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    762e:	2238      	movs	r2, #56	; 0x38
    7630:	2100      	movs	r1, #0
    7632:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    7634:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    7638:	f00b f87a 	bl	12730 <memset>
  ExFatVolume* volume() const {return m_vol;}
    763c:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    7640:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    7644:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    7646:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    7648:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    764a:	2600      	movs	r6, #0
  m_dirPos = freePos;
    764c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    7650:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    7654:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    7656:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    765a:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    765c:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    765e:	f1b8 0f00 	cmp.w	r8, #0
    7662:	d033      	beq.n	76cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    7664:	f108 39ff 	add.w	r9, r8, #4294967295
    7668:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    766a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 7848 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    766e:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    7672:	2201      	movs	r2, #1
    7674:	4659      	mov	r1, fp
    7676:	4628      	mov	r0, r5
    7678:	f7ff fd4a 	bl	7110 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    767c:	4604      	mov	r4, r0
    767e:	b390      	cbz	r0, 76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    7680:	f990 2000 	ldrsb.w	r2, [r0]
    7684:	2a00      	cmp	r2, #0
    7686:	db2e      	blt.n	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    7688:	2220      	movs	r2, #32
    768a:	2100      	movs	r1, #0
    768c:	f00b f850 	bl	12730 <memset>
    if (i == 0) {
    7690:	2e00      	cmp	r6, #0
    7692:	f000 80bc 	beq.w	780e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    7696:	f1bb 0f01 	cmp.w	fp, #1
    769a:	f000 80d7 	beq.w	784c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    769e:	23c1      	movs	r3, #193	; 0xc1
    76a0:	46a3      	mov	fp, r4
    76a2:	341e      	adds	r4, #30
    76a4:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    76a8:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    76aa:	4638      	mov	r0, r7
    76ac:	b91b      	cbnz	r3, 76b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    76ae:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    76b2:	429a      	cmp	r2, r3
    76b4:	d005      	beq.n	76c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    76b6:	f005 fc7d 	bl	cfb4 <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    76ba:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    76be:	45a3      	cmp	fp, r4
    76c0:	d1f2      	bne.n	76a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    76c2:	3601      	adds	r6, #1
    76c4:	fa5f fb86 	uxtb.w	fp, r6
    76c8:	45d8      	cmp	r8, fp
    76ca:	d8d2      	bhi.n	7672 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    76cc:	4628      	mov	r0, r5
    76ce:	f000 fafb 	bl	7cc8 <ExFatFile::sync()>
    76d2:	4606      	mov	r6, r0
    76d4:	e00d      	b.n	76f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    76d6:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    76d8:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    76dc:	f000 fb24 	bl	7d28 <ExFatFile::addDirCluster()>
    76e0:	2800      	cmp	r0, #0
    76e2:	f040 8091 	bne.w	7808 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    76e6:	2300      	movs	r3, #0
  return false;
    76e8:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    76ea:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    76ee:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    76f2:	4630      	mov	r0, r6
    76f4:	b00f      	add	sp, #60	; 0x3c
    76f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    76fa:	f04f 0803 	mov.w	r8, #3
    76fe:	e747      	b.n	7590 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    7700:	bb56      	cbnz	r6, 7758 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    7702:	4544      	cmp	r4, r8
    7704:	bf38      	it	cc
    7706:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    7708:	2b85      	cmp	r3, #133	; 0x85
    770a:	f47f af47 	bne.w	759c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    770e:	4631      	mov	r1, r6
    7710:	2238      	movs	r2, #56	; 0x38
    7712:	4628      	mov	r0, r5
      inSet = true;
    7714:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    7716:	f00b f80b 	bl	12730 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    771a:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    771e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    7722:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    7726:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    772a:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    772c:	bf58      	it	pl
    772e:	f043 0308 	orrpl.w	r3, r3, #8
    7732:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    7736:	f8db 3000 	ldr.w	r3, [fp]
    773a:	f8db 2020 	ldr.w	r2, [fp, #32]
    773e:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    7740:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    7742:	f8db 2018 	ldr.w	r2, [fp, #24]
    7746:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    774a:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    774e:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    7752:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    7756:	e721      	b.n	759c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    7758:	2bc0      	cmp	r3, #192	; 0xc0
    775a:	d028      	beq.n	77ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    775c:	2bc1      	cmp	r3, #193	; 0xc1
    775e:	f47f af3c 	bne.w	75da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    7762:	463a      	mov	r2, r7
    7764:	a906      	add	r1, sp, #24
    7766:	4628      	mov	r0, r5
    7768:	f000 fdd6 	bl	8318 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    776c:	b1e8      	cbz	r0, 77aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    776e:	89bb      	ldrh	r3, [r7, #12]
    7770:	b9db      	cbnz	r3, 77aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    7772:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    7776:	429a      	cmp	r2, r3
    7778:	d117      	bne.n	77aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    777a:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    777e:	d1b2      	bne.n	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    7780:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    7784:	d170      	bne.n	7868 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    7786:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    778a:	0798      	lsls	r0, r3, #30
    778c:	d46c      	bmi.n	7868 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    778e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    7792:	d1a8      	bne.n	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    7794:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    7798:	d0ab      	beq.n	76f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    779a:	4628      	mov	r0, r5
    779c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    77a0:	f7ff fe4a 	bl	7438 <ExFatFile::seekSet(unsigned long long)>
    77a4:	2800      	cmp	r0, #0
    77a6:	d1a4      	bne.n	76f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    77a8:	e79d      	b.n	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    77aa:	4606      	mov	r6, r0
    77ac:	e6f6      	b.n	759c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    77ae:	9b02      	ldr	r3, [sp, #8]
    77b0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    77b4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    77b8:	079b      	lsls	r3, r3, #30
    77ba:	d502      	bpl.n	77c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    77bc:	9b03      	ldr	r3, [sp, #12]
    77be:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    77c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    77c4:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    77c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    77ca:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    77ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    77d2:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    77d6:	2f00      	cmp	r7, #0
    77d8:	d0cf      	beq.n	777a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    77da:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    77de:	693a      	ldr	r2, [r7, #16]
    77e0:	81bb      	strh	r3, [r7, #12]
    next = begin;
    77e2:	683b      	ldr	r3, [r7, #0]
    77e4:	607b      	str	r3, [r7, #4]
    77e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    77ea:	429a      	cmp	r2, r3
    77ec:	f47f aef5 	bne.w	75da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    77f0:	8abe      	ldrh	r6, [r7, #20]
    77f2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    77f6:	1af6      	subs	r6, r6, r3
    77f8:	fab6 f686 	clz	r6, r6
    77fc:	0976      	lsrs	r6, r6, #5
    77fe:	e6cd      	b.n	759c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    7800:	2f00      	cmp	r7, #0
    7802:	f47f aef2 	bne.w	75ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    7806:	e76e      	b.n	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    7808:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    780c:	e70b      	b.n	7626 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    780e:	2385      	movs	r3, #133	; 0x85
    7810:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    7812:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    7816:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    781a:	f8da 3000 	ldr.w	r3, [sl]
    781e:	2b00      	cmp	r3, #0
    7820:	d046      	beq.n	78b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    7822:	f10d 0213 	add.w	r2, sp, #19
    7826:	f10d 0116 	add.w	r1, sp, #22
    782a:	a805      	add	r0, sp, #20
    782c:	4798      	blx	r3
    782e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7832:	8163      	strh	r3, [r4, #10]
    7834:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7838:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    783a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    783e:	7523      	strb	r3, [r4, #20]
    7840:	e73f      	b.n	76c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    7842:	bf00      	nop
    7844:	88888889 	.word	0x88888889
    7848:	20015130 	.word	0x20015130
      dirStream->type = EXFAT_TYPE_STREAM;
    784c:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    784e:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    7852:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    7854:	9b02      	ldr	r3, [sp, #8]
    7856:	f063 037f 	orn	r3, r3, #127	; 0x7f
    785a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    785e:	693b      	ldr	r3, [r7, #16]
    7860:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    7862:	8abb      	ldrh	r3, [r7, #20]
    7864:	80a3      	strh	r3, [r4, #4]
}
    7866:	e72c      	b.n	76c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    7868:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    786c:	06d9      	lsls	r1, r3, #27
    786e:	f53f af3a 	bmi.w	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    7872:	f013 0101 	ands.w	r1, r3, #1
    7876:	f47f af36 	bne.w	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    787a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    787e:	d089      	beq.n	7794 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    7880:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    7884:	0792      	lsls	r2, r2, #30
    7886:	f57f af2e 	bpl.w	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    788a:	2b00      	cmp	r3, #0
    788c:	f43f af2b 	beq.w	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    7890:	e9d5 3200 	ldrd	r3, r2, [r5]
    7894:	4313      	orrs	r3, r2
    7896:	d004      	beq.n	78a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    7898:	2200      	movs	r2, #0
    789a:	2300      	movs	r3, #0
    m_curCluster = 0;
    789c:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    789e:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    78a2:	4628      	mov	r0, r5
    78a4:	f000 fb86 	bl	7fb4 <ExFatFile::truncate()>
    78a8:	2800      	cmp	r0, #0
    78aa:	f43f af1c 	beq.w	76e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    78ae:	e720      	b.n	76f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    78b0:	f645 0321 	movw	r3, #22561	; 0x5821
    78b4:	8163      	strh	r3, [r4, #10]
    78b6:	81e3      	strh	r3, [r4, #14]
    78b8:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    78ba:	e702      	b.n	76c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

000078bc <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    78bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    78c0:	2500      	movs	r5, #0
    78c2:	b097      	sub	sp, #92	; 0x5c
    78c4:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    78c6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    78ca:	9201      	str	r2, [sp, #4]
    78cc:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    78ce:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    78d2:	2b00      	cmp	r3, #0
    78d4:	d13e      	bne.n	7954 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    78d6:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    78da:	460f      	mov	r7, r1
    78dc:	f013 0f50 	tst.w	r3, #80	; 0x50
    78e0:	d038      	beq.n	7954 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    78e2:	7813      	ldrb	r3, [r2, #0]
    78e4:	4604      	mov	r4, r0
    78e6:	4616      	mov	r6, r2
    78e8:	2b2f      	cmp	r3, #47	; 0x2f
    78ea:	d037      	beq.n	795c <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    78ec:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    78f0:	ab01      	add	r3, sp, #4
    78f2:	aa02      	add	r2, sp, #8
    78f4:	4631      	mov	r1, r6
    78f6:	4620      	mov	r0, r4
    78f8:	f7ff fc6a 	bl	71d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    78fc:	b350      	cbz	r0, 7954 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    78fe:	9e01      	ldr	r6, [sp, #4]
    7900:	7833      	ldrb	r3, [r6, #0]
    7902:	2b00      	cmp	r3, #0
    7904:	d03e      	beq.n	7984 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    7906:	2300      	movs	r3, #0
    7908:	aa02      	add	r2, sp, #8
    790a:	4639      	mov	r1, r7
    790c:	4620      	mov	r0, r4
    790e:	f7ff fe09 	bl	7524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    7912:	b1f8      	cbz	r0, 7954 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    7914:	46a4      	mov	ip, r4
    7916:	ad08      	add	r5, sp, #32
    7918:	f104 0730 	add.w	r7, r4, #48	; 0x30
    791c:	f8dc 0000 	ldr.w	r0, [ip]
    7920:	f10c 0c10 	add.w	ip, ip, #16
    7924:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    7928:	46ae      	mov	lr, r5
    792a:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    792e:	3510      	adds	r5, #16
    7930:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    7934:	45bc      	cmp	ip, r7
    7936:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    793a:	d1ef      	bne.n	791c <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    793c:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    7940:	af08      	add	r7, sp, #32
    tmpDir = *this;
    7942:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    7944:	4620      	mov	r0, r4
    7946:	f000 f9bf 	bl	7cc8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    794a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    794e:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    7952:	e7cd      	b.n	78f0 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    7954:	2000      	movs	r0, #0
}
    7956:	b017      	add	sp, #92	; 0x5c
    7958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    795c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    7960:	292f      	cmp	r1, #47	; 0x2f
    7962:	d0fb      	beq.n	795c <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    7964:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    7966:	b9b1      	cbnz	r1, 7996 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    7968:	2238      	movs	r2, #56	; 0x38
    796a:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    796c:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    796e:	f00a fedf 	bl	12730 <memset>
  m_flags = FILE_FLAG_READ;
    7972:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    7974:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    7976:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    7978:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    797a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    797e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    7982:	e7e8      	b.n	7956 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    7984:	464b      	mov	r3, r9
    7986:	aa02      	add	r2, sp, #8
    7988:	4639      	mov	r1, r7
    798a:	4620      	mov	r0, r4
    798c:	f7ff fdca 	bl	7524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    7990:	b017      	add	sp, #92	; 0x5c
    7992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    7996:	2238      	movs	r2, #56	; 0x38
    7998:	2100      	movs	r1, #0
    799a:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    799c:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    799e:	f00a fec7 	bl	12730 <memset>
  m_flags = FILE_FLAG_READ;
    79a2:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    79a4:	af08      	add	r7, sp, #32
  m_vol = vol;
    79a6:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    79a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    79ac:	2340      	movs	r3, #64	; 0x40
    79ae:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    79b2:	e79b      	b.n	78ec <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

000079b4 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    79b4:	b119      	cbz	r1, 79be <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    79b6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    79ba:	f7ff bf7f 	b.w	78bc <ExFatFile::open(ExFatFile*, char const*, int)>
}
    79be:	4608      	mov	r0, r1
    79c0:	4770      	bx	lr
    79c2:	bf00      	nop

000079c4 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    79c4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    79c8:	b963      	cbnz	r3, 79e4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    79ca:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    79ce:	f013 0f50 	tst.w	r3, #80	; 0x50
    79d2:	d007      	beq.n	79e4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    79d4:	680b      	ldr	r3, [r1, #0]
    79d6:	f013 0c1f 	ands.w	ip, r3, #31
    79da:	d103      	bne.n	79e4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    79dc:	4613      	mov	r3, r2
    79de:	4662      	mov	r2, ip
    79e0:	f7ff bda0 	b.w	7524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    79e4:	2000      	movs	r0, #0
    79e6:	4770      	bx	lr

000079e8 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    79e8:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    79ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79ec:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    79ee:	6a00      	ldr	r0, [r0, #32]
    79f0:	b101      	cbz	r1, 79f4 <ExFatFile::addCluster()+0xc>
    79f2:	3101      	adds	r1, #1
    79f4:	2201      	movs	r2, #1
    79f6:	f000 fd51 	bl	849c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    79fa:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    79fc:	4605      	mov	r5, r0
  if (find < 2) {
    79fe:	d932      	bls.n	7a66 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    7a00:	2301      	movs	r3, #1
    7a02:	4601      	mov	r1, r0
    7a04:	6a20      	ldr	r0, [r4, #32]
    7a06:	461a      	mov	r2, r3
    7a08:	f000 fda8 	bl	855c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7a0c:	4606      	mov	r6, r0
    7a0e:	b350      	cbz	r0, 7a66 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    7a10:	69a3      	ldr	r3, [r4, #24]
    7a12:	b35b      	cbz	r3, 7a6c <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    7a14:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    7a18:	0651      	lsls	r1, r2, #25
    7a1a:	d512      	bpl.n	7a42 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    7a1c:	1c59      	adds	r1, r3, #1
    7a1e:	42a9      	cmp	r1, r5
    7a20:	d018      	beq.n	7a54 <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    7a26:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7a28:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    7a2c:	e005      	b.n	7a3a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    7a2e:	6a20      	ldr	r0, [r4, #32]
    7a30:	f000 fe90 	bl	8754 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    7a34:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    7a36:	b1b0      	cbz	r0, 7a66 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    7a38:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    7a3a:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    7a3c:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    7a3e:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    7a40:	d3f5      	bcc.n	7a2e <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    7a42:	f04f 32ff 	mov.w	r2, #4294967295
    7a46:	4629      	mov	r1, r5
    7a48:	6a20      	ldr	r0, [r4, #32]
    7a4a:	f000 fe83 	bl	8754 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7a4e:	b150      	cbz	r0, 7a66 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    7a50:	69a1      	ldr	r1, [r4, #24]
    7a52:	b911      	cbnz	r1, 7a5a <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    7a54:	4630      	mov	r0, r6
  m_curCluster = find;
    7a56:	61a5      	str	r5, [r4, #24]
}
    7a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    7a5a:	462a      	mov	r2, r5
    7a5c:	6a20      	ldr	r0, [r4, #32]
    7a5e:	f000 fe79 	bl	8754 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7a62:	2800      	cmp	r0, #0
    7a64:	d1f6      	bne.n	7a54 <ExFatFile::addCluster()+0x6c>
  return false;
    7a66:	2600      	movs	r6, #0
}
    7a68:	4630      	mov	r0, r6
    7a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7a6c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7a74:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    7a78:	e7ec      	b.n	7a54 <ExFatFile::addCluster()+0x6c>
    7a7a:	bf00      	nop

00007a7c <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7a7c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    7a80:	079a      	lsls	r2, r3, #30
    7a82:	d536      	bpl.n	7af2 <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    7a84:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    7a86:	b570      	push	{r4, r5, r6, lr}
    7a88:	4605      	mov	r5, r0
  if (m_firstCluster) {
    7a8a:	b9a1      	cbnz	r1, 7ab6 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    7a8c:	2400      	movs	r4, #0
    7a8e:	4621      	mov	r1, r4
    7a90:	e007      	b.n	7aa2 <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    7a92:	7803      	ldrb	r3, [r0, #0]
    7a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7a98:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    7a9a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    7a9e:	428b      	cmp	r3, r1
    7aa0:	d329      	bcc.n	7af6 <ExFatFile::remove()+0x7a>
    7aa2:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    7aa4:	2201      	movs	r2, #1
    7aa6:	4628      	mov	r0, r5
    7aa8:	f7ff fb32 	bl	7110 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    7aac:	b2e1      	uxtb	r1, r4
    if (!cache) {
    7aae:	2800      	cmp	r0, #0
    7ab0:	d1ef      	bne.n	7a92 <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    7ab2:	2000      	movs	r0, #0
    7ab4:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    7ab6:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7ab8:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    7aba:	d534      	bpl.n	7b26 <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7abc:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7ac0:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    7ac4:	3309      	adds	r3, #9
    7ac6:	3a01      	subs	r2, #1
    7ac8:	b2db      	uxtb	r3, r3
    7aca:	f144 34ff 	adc.w	r4, r4, #4294967295
    7ace:	f1c3 0c20 	rsb	ip, r3, #32
    7ad2:	40da      	lsrs	r2, r3
    7ad4:	3b20      	subs	r3, #32
    7ad6:	fa04 fc0c 	lsl.w	ip, r4, ip
    7ada:	fa24 f303 	lsr.w	r3, r4, r3
    7ade:	ea42 020c 	orr.w	r2, r2, ip
    7ae2:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    7ae4:	2300      	movs	r3, #0
    7ae6:	3201      	adds	r2, #1
    7ae8:	f000 fd38 	bl	855c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7aec:	2800      	cmp	r0, #0
    7aee:	d1cd      	bne.n	7a8c <ExFatFile::remove()+0x10>
    7af0:	e7df      	b.n	7ab2 <ExFatFile::remove()+0x36>
}
    7af2:	2000      	movs	r0, #0
    7af4:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    7af6:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    7af8:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    7afa:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7afe:	4620      	mov	r0, r4
  m_flags = 0;
    7b00:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    7b04:	f005 fa02 	bl	cf0c <FsCache::sync()>
    7b08:	2800      	cmp	r0, #0
    7b0a:	d0d2      	beq.n	7ab2 <ExFatFile::remove()+0x36>
    7b0c:	f504 7004 	add.w	r0, r4, #528	; 0x210
    7b10:	f005 f9fc 	bl	cf0c <FsCache::sync()>
    7b14:	2800      	cmp	r0, #0
    7b16:	d0cc      	beq.n	7ab2 <ExFatFile::remove()+0x36>
    7b18:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7b1c:	6803      	ldr	r3, [r0, #0]
}
    7b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b22:	6a1b      	ldr	r3, [r3, #32]
    7b24:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    7b26:	f000 fe35 	bl	8794 <ExFatPartition::freeChain(unsigned long)>
    7b2a:	2800      	cmp	r0, #0
    7b2c:	d1ae      	bne.n	7a8c <ExFatFile::remove()+0x10>
    7b2e:	e7c0      	b.n	7ab2 <ExFatFile::remove()+0x36>

00007b30 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    7b30:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    7b34:	06db      	lsls	r3, r3, #27
    7b36:	d401      	bmi.n	7b3c <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    7b38:	2000      	movs	r0, #0
}
    7b3a:	4770      	bx	lr
bool ExFatFile::rmdir() {
    7b3c:	b510      	push	{r4, lr}
    seekSet(0);
    7b3e:	2200      	movs	r2, #0
    7b40:	b088      	sub	sp, #32
    7b42:	2300      	movs	r3, #0
    7b44:	4604      	mov	r4, r0
    7b46:	f7ff fc77 	bl	7438 <ExFatFile::seekSet(unsigned long long)>
  }
    7b4a:	e008      	b.n	7b5e <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    7b4c:	2820      	cmp	r0, #32
    7b4e:	d11b      	bne.n	7b88 <ExFatFile::rmdir()+0x58>
    7b50:	f99d 3000 	ldrsb.w	r3, [sp]
    7b54:	f89d 2000 	ldrb.w	r2, [sp]
    7b58:	2b00      	cmp	r3, #0
    7b5a:	db15      	blt.n	7b88 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    7b5c:	b132      	cbz	r2, 7b6c <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    7b5e:	2220      	movs	r2, #32
    7b60:	4669      	mov	r1, sp
    7b62:	4620      	mov	r0, r4
    7b64:	f7ff fb82 	bl	726c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    7b68:	2800      	cmp	r0, #0
    7b6a:	d1ef      	bne.n	7b4c <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    7b6c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    7b70:	2208      	movs	r2, #8
  return remove();
    7b72:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    7b74:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    7b78:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    7b7c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    7b80:	f7ff ff7c 	bl	7a7c <ExFatFile::remove()>
}
    7b84:	b008      	add	sp, #32
    7b86:	bd10      	pop	{r4, pc}
  return false;
    7b88:	2000      	movs	r0, #0
}
    7b8a:	b008      	add	sp, #32
    7b8c:	bd10      	pop	{r4, pc}
    7b8e:	bf00      	nop

00007b90 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    7b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b94:	f04f 0800 	mov.w	r8, #0
    7b98:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    7b9a:	4f4a      	ldr	r7, [pc, #296]	; (7cc4 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    7b9c:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    7b9e:	4644      	mov	r4, r8
    7ba0:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    7ba2:	2200      	movs	r2, #0
    7ba4:	4630      	mov	r0, r6
    7ba6:	f7ff fab3 	bl	7110 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    7baa:	4605      	mov	r5, r0
    7bac:	b130      	cbz	r0, 7bbc <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    7bae:	7801      	ldrb	r1, [r0, #0]
    7bb0:	29c0      	cmp	r1, #192	; 0xc0
    7bb2:	d069      	beq.n	7c88 <ExFatFile::syncDir()+0xf8>
    7bb4:	29c1      	cmp	r1, #193	; 0xc1
    7bb6:	d02b      	beq.n	7c10 <ExFatFile::syncDir()+0x80>
    7bb8:	2985      	cmp	r1, #133	; 0x85
    7bba:	d009      	beq.n	7bd0 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    7bbc:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    7bc0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7bc2:	f043 0301 	orr.w	r3, r3, #1
    7bc6:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    7bca:	b002      	add	sp, #8
    7bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    7bd0:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    7bd4:	f003 0337 	and.w	r3, r3, #55	; 0x37
    7bd8:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    7bda:	683b      	ldr	r3, [r7, #0]
    7bdc:	b183      	cbz	r3, 7c00 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    7bde:	f10d 0203 	add.w	r2, sp, #3
    7be2:	f10d 0106 	add.w	r1, sp, #6
    7be6:	a801      	add	r0, sp, #4
    7be8:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    7bea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7bee:	81ab      	strh	r3, [r5, #12]
    7bf0:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    7bf2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7bf6:	81eb      	strh	r3, [r5, #14]
    7bf8:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    7bfa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7bfe:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    7c00:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    7c02:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    7c06:	f043 0301 	orr.w	r3, r3, #1
    7c0a:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    7c0e:	7829      	ldrb	r1, [r5, #0]
    7c10:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7c14:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    7c16:	fab0 f080 	clz	r0, r0
    7c1a:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7c1c:	e001      	b.n	7c22 <ExFatFile::syncDir()+0x92>
    7c1e:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    7c20:	5ca9      	ldrb	r1, [r5, r2]
    7c22:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7c24:	2a01      	cmp	r2, #1
    7c26:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    7c2a:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    7c2e:	fa11 f383 	uxtah	r3, r1, r3
    7c32:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7c34:	d101      	bne.n	7c3a <ExFatFile::syncDir()+0xaa>
    7c36:	2800      	cmp	r0, #0
    7c38:	d1f1      	bne.n	7c1e <ExFatFile::syncDir()+0x8e>
    7c3a:	2a1f      	cmp	r2, #31
    7c3c:	d9f0      	bls.n	7c20 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    7c3e:	f108 0801 	add.w	r8, r8, #1
    7c42:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    7c46:	fa5f f188 	uxtb.w	r1, r8
    7c4a:	428b      	cmp	r3, r1
    7c4c:	d2a9      	bcs.n	7ba2 <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    7c4e:	2201      	movs	r2, #1
    7c50:	f106 0124 	add.w	r1, r6, #36	; 0x24
    7c54:	6a30      	ldr	r0, [r6, #32]
    7c56:	f000 fcfd 	bl	8654 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    7c5a:	2800      	cmp	r0, #0
    7c5c:	d0ae      	beq.n	7bbc <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    7c5e:	6a35      	ldr	r5, [r6, #32]
    7c60:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7c62:	4628      	mov	r0, r5
    7c64:	f005 f952 	bl	cf0c <FsCache::sync()>
    7c68:	2800      	cmp	r0, #0
    7c6a:	d0a7      	beq.n	7bbc <ExFatFile::syncDir()+0x2c>
    7c6c:	f505 7004 	add.w	r0, r5, #528	; 0x210
    7c70:	f005 f94c 	bl	cf0c <FsCache::sync()>
    7c74:	2800      	cmp	r0, #0
    7c76:	d0a1      	beq.n	7bbc <ExFatFile::syncDir()+0x2c>
    7c78:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    7c7c:	6803      	ldr	r3, [r0, #0]
    7c7e:	6a1b      	ldr	r3, [r3, #32]
    7c80:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7c82:	2800      	cmp	r0, #0
    7c84:	d1a1      	bne.n	7bca <ExFatFile::syncDir()+0x3a>
    7c86:	e799      	b.n	7bbc <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    7c88:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    7c8c:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    7c90:	7843      	ldrb	r3, [r0, #1]
    7c92:	bf14      	ite	ne
    7c94:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    7c98:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    7c9c:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    7c9e:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    7ca2:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    7ca6:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    7caa:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7cae:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    7cb0:	e9c5 0106 	strd	r0, r1, [r5, #24]
    7cb4:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    7cb8:	f043 0301 	orr.w	r3, r3, #1
    7cbc:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    7cc0:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    7cc2:	e7a5      	b.n	7c10 <ExFatFile::syncDir()+0x80>
    7cc4:	20015130 	.word	0x20015130

00007cc8 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    7cc8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    7cca:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    7cce:	b343      	cbz	r3, 7d22 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7cd0:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    7cd4:	4604      	mov	r4, r0
    7cd6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    7cda:	2a00      	cmp	r2, #0
    7cdc:	db0c      	blt.n	7cf8 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    7cde:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7ce0:	4628      	mov	r0, r5
    7ce2:	f005 f913 	bl	cf0c <FsCache::sync()>
    7ce6:	b978      	cbnz	r0, 7d08 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    7ce8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    7cec:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7cee:	f043 0301 	orr.w	r3, r3, #1
    7cf2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    7cf6:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7cfc:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    7d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    7d04:	f7ff bf44 	b.w	7b90 <ExFatFile::syncDir()>
    7d08:	f505 7004 	add.w	r0, r5, #528	; 0x210
    7d0c:	f005 f8fe 	bl	cf0c <FsCache::sync()>
    7d10:	2800      	cmp	r0, #0
    7d12:	d0e9      	beq.n	7ce8 <ExFatFile::sync()+0x20>
    7d14:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    7d18:	6803      	ldr	r3, [r0, #0]
    7d1a:	6a1b      	ldr	r3, [r3, #32]
    7d1c:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7d1e:	2800      	cmp	r0, #0
    7d20:	d0e2      	beq.n	7ce8 <ExFatFile::sync()+0x20>
    return true;
    7d22:	2001      	movs	r0, #1
}
    7d24:	bd38      	pop	{r3, r4, r5, pc}
    7d26:	bf00      	nop

00007d28 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    7d28:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7d2a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    7d2e:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7d30:	065a      	lsls	r2, r3, #25
    7d32:	d44c      	bmi.n	7dce <ExFatFile::addDirCluster()+0xa6>
    7d34:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    7d36:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    7d38:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    7d3c:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    7d3e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    7d42:	d301      	bcc.n	7d48 <ExFatFile::addDirCluster()+0x20>
}
    7d44:	2000      	movs	r0, #0
    7d46:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    7d48:	4628      	mov	r0, r5
    7d4a:	f7ff fe4d 	bl	79e8 <ExFatFile::addCluster()>
    7d4e:	2800      	cmp	r0, #0
    7d50:	d0f8      	beq.n	7d44 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    7d52:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    7d54:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    7d56:	69ae      	ldr	r6, [r5, #24]
    7d58:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    7d5c:	3e02      	subs	r6, #2
    7d5e:	409e      	lsls	r6, r3
    7d60:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    7d64:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    7d66:	1931      	adds	r1, r6, r4
    7d68:	2205      	movs	r2, #5
    7d6a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7d6e:	3401      	adds	r4, #1
    7d70:	f005 f8f8 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    7d74:	f44f 7200 	mov.w	r2, #512	; 0x200
    7d78:	2100      	movs	r1, #0
    if (!cache) {
    7d7a:	2800      	cmp	r0, #0
    7d7c:	d0e2      	beq.n	7d44 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    7d7e:	f00a fcd7 	bl	12730 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    7d82:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    7d84:	2301      	movs	r3, #1
    7d86:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    7d8a:	4093      	lsls	r3, r2
    7d8c:	429c      	cmp	r4, r3
    7d8e:	d3ea      	bcc.n	7d66 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    7d90:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    7d94:	065b      	lsls	r3, r3, #25
    7d96:	d415      	bmi.n	7dc4 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7d98:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    7d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    7da0:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7da4:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    7da8:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    7dac:	189b      	adds	r3, r3, r2
    7dae:	f141 0000 	adc.w	r0, r1, #0
    7db2:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    7db4:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    7db8:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    7dba:	189b      	adds	r3, r3, r2
    7dbc:	f141 0100 	adc.w	r1, r1, #0
    7dc0:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    7dc4:	4628      	mov	r0, r5
}
    7dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    7dca:	f7ff bf7d 	b.w	7cc8 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7dce:	6a00      	ldr	r0, [r0, #32]
    7dd0:	f000 fde6 	bl	89a0 <ExFatPartition::rootLength()>
    7dd4:	e7af      	b.n	7d36 <ExFatFile::addDirCluster()+0xe>
    7dd6:	bf00      	nop

00007dd8 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    7dd8:	b570      	push	{r4, r5, r6, lr}
    7dda:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    7ddc:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    7de0:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    7de2:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    7de4:	f010 0f18 	tst.w	r0, #24
    7de8:	930c      	str	r3, [sp, #48]	; 0x30
    7dea:	931a      	str	r3, [sp, #104]	; 0x68
    7dec:	d003      	beq.n	7df6 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    7dee:	6a20      	ldr	r0, [r4, #32]
    7df0:	6a0b      	ldr	r3, [r1, #32]
    7df2:	4298      	cmp	r0, r3
    7df4:	d002      	beq.n	7dfc <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    7df6:	2000      	movs	r0, #0
}
    7df8:	b01c      	add	sp, #112	; 0x70
    7dfa:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7dfc:	f640 2301 	movw	r3, #2561	; 0xa01
    7e00:	4668      	mov	r0, sp
    7e02:	f7ff fd5b 	bl	78bc <ExFatFile::open(ExFatFile*, char const*, int)>
    7e06:	2800      	cmp	r0, #0
    7e08:	d0f5      	beq.n	7df6 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    7e0a:	46a4      	mov	ip, r4
    7e0c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    7e10:	ad0e      	add	r5, sp, #56	; 0x38
    7e12:	f8dc 0000 	ldr.w	r0, [ip]
    7e16:	f10c 0c10 	add.w	ip, ip, #16
    7e1a:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    7e1e:	46ae      	mov	lr, r5
    7e20:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    7e24:	3510      	adds	r5, #16
    7e26:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    7e2a:	45b4      	cmp	ip, r6
    7e2c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7e30:	d1ef      	bne.n	7e12 <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    7e32:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    7e36:	aa09      	add	r2, sp, #36	; 0x24
    7e38:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    7e3c:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    7e3e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    7e42:	ca07      	ldmia	r2, {r0, r1, r2}
    7e44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7e48:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7e4c:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    7e4e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7e52:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7e56:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7e5a:	f7ff ff35 	bl	7cc8 <ExFatFile::sync()>
    7e5e:	2800      	cmp	r0, #0
    7e60:	d0c9      	beq.n	7df6 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    7e62:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    7e64:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    7e66:	2308      	movs	r3, #8
  return oldFile.remove();
    7e68:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    7e6a:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    7e6c:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    7e70:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    7e74:	f7ff fe02 	bl	7a7c <ExFatFile::remove()>
    7e78:	e7be      	b.n	7df8 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    7e7a:	bf00      	nop

00007e7c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    7e7c:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    7e7e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    7e82:	f013 0f50 	tst.w	r3, #80	; 0x50
    7e86:	d102      	bne.n	7e8e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    7e88:	2500      	movs	r5, #0
}
    7e8a:	4628      	mov	r0, r5
    7e8c:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7e8e:	f640 2302 	movw	r3, #2562	; 0xa02
    7e92:	4604      	mov	r4, r0
    7e94:	f7ff fb46 	bl	7524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    7e98:	2800      	cmp	r0, #0
    7e9a:	d0f5      	beq.n	7e88 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    7e9c:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    7e9e:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    7ea0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    7ea4:	f7ff ff40 	bl	7d28 <ExFatFile::addDirCluster()>
    7ea8:	4605      	mov	r5, r0
    7eaa:	2800      	cmp	r0, #0
    7eac:	d0ec      	beq.n	7e88 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    7eae:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    7eb0:	2200      	movs	r2, #0
    7eb2:	2300      	movs	r3, #0
    7eb4:	4620      	mov	r0, r4
    7eb6:	61e1      	str	r1, [r4, #28]
    7eb8:	f7ff fabe 	bl	7438 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7ebc:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    7ebe:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7ec2:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    7ec6:	2b00      	cmp	r3, #0
    7ec8:	d0df      	beq.n	7e8a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7eca:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    7ecc:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7ece:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    7ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    7ed6:	f7ff be5b 	b.w	7b90 <ExFatFile::syncDir()>
    7eda:	bf00      	nop

00007edc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    7edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ede:	2500      	movs	r5, #0
    7ee0:	b097      	sub	sp, #92	; 0x5c
    7ee2:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    7ee4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    7ee8:	9201      	str	r2, [sp, #4]
    7eea:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    7eee:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    7ef0:	2b00      	cmp	r3, #0
    7ef2:	d146      	bne.n	7f82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    7ef4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    7ef8:	460e      	mov	r6, r1
    7efa:	f013 0f50 	tst.w	r3, #80	; 0x50
    7efe:	d040      	beq.n	7f82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    7f00:	7813      	ldrb	r3, [r2, #0]
    7f02:	4604      	mov	r4, r0
    7f04:	4611      	mov	r1, r2
    7f06:	2b2f      	cmp	r3, #47	; 0x2f
    7f08:	d03e      	beq.n	7f88 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    7f0a:	ab01      	add	r3, sp, #4
    7f0c:	aa02      	add	r2, sp, #8
    7f0e:	4620      	mov	r0, r4
    7f10:	f7ff f95e 	bl	71d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7f14:	2800      	cmp	r0, #0
    7f16:	d034      	beq.n	7f82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    7f18:	9b01      	ldr	r3, [sp, #4]
    7f1a:	781b      	ldrb	r3, [r3, #0]
    7f1c:	2b00      	cmp	r3, #0
    7f1e:	d041      	beq.n	7fa4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    7f20:	2300      	movs	r3, #0
    7f22:	aa02      	add	r2, sp, #8
    7f24:	4631      	mov	r1, r6
    7f26:	4620      	mov	r0, r4
    7f28:	f7ff fafc 	bl	7524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    7f2c:	b930      	cbnz	r0, 7f3c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    7f2e:	b347      	cbz	r7, 7f82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    7f30:	aa02      	add	r2, sp, #8
    7f32:	4631      	mov	r1, r6
    7f34:	4620      	mov	r0, r4
    7f36:	f7ff ffa1 	bl	7e7c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    7f3a:	b310      	cbz	r0, 7f82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    7f3c:	46a4      	mov	ip, r4
    7f3e:	ad08      	add	r5, sp, #32
    7f40:	f104 0630 	add.w	r6, r4, #48	; 0x30
    7f44:	f8dc 0000 	ldr.w	r0, [ip]
    7f48:	f10c 0c10 	add.w	ip, ip, #16
    7f4c:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    7f50:	46ae      	mov	lr, r5
    7f52:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    7f56:	3510      	adds	r5, #16
    7f58:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    7f5c:	45b4      	cmp	ip, r6
    7f5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7f62:	d1ef      	bne.n	7f44 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    7f64:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    7f68:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    7f6a:	6028      	str	r0, [r5, #0]
    close();
    7f6c:	4620      	mov	r0, r4
    7f6e:	f7ff f8ed 	bl	714c <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    7f72:	9901      	ldr	r1, [sp, #4]
    7f74:	ab01      	add	r3, sp, #4
    7f76:	aa02      	add	r2, sp, #8
    7f78:	4620      	mov	r0, r4
    7f7a:	f7ff f929 	bl	71d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7f7e:	2800      	cmp	r0, #0
    7f80:	d1ca      	bne.n	7f18 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    7f82:	2000      	movs	r0, #0
}
    7f84:	b017      	add	sp, #92	; 0x5c
    7f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    7f88:	3101      	adds	r1, #1
    7f8a:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    7f8c:	780b      	ldrb	r3, [r1, #0]
    7f8e:	2b2f      	cmp	r3, #47	; 0x2f
    7f90:	d0fa      	beq.n	7f88 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7f92:	6a31      	ldr	r1, [r6, #32]
    7f94:	a808      	add	r0, sp, #32
    7f96:	f7ff f907 	bl	71a8 <ExFatFile::openRoot(ExFatVolume*)>
    7f9a:	2800      	cmp	r0, #0
    7f9c:	d0f1      	beq.n	7f82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    7f9e:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    7fa0:	ae08      	add	r6, sp, #32
    7fa2:	e7b2      	b.n	7f0a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    7fa4:	aa02      	add	r2, sp, #8
    7fa6:	4631      	mov	r1, r6
    7fa8:	4620      	mov	r0, r4
    7faa:	f7ff ff67 	bl	7e7c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    7fae:	b017      	add	sp, #92	; 0x5c
    7fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fb2:	bf00      	nop

00007fb4 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7fb4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    7fb8:	079a      	lsls	r2, r3, #30
    7fba:	d562      	bpl.n	8082 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    7fbc:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    7fbe:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    7fc0:	b082      	sub	sp, #8
    7fc2:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    7fc4:	b3a5      	cbz	r5, 8030 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    7fc6:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    7fca:	d034      	beq.n	8036 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7fcc:	6a00      	ldr	r0, [r0, #32]
    7fce:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7fd0:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    7fd4:	3a01      	subs	r2, #1
    7fd6:	68e1      	ldr	r1, [r4, #12]
    7fd8:	f10c 0c09 	add.w	ip, ip, #9
    7fdc:	f141 31ff 	adc.w	r1, r1, #4294967295
    7fe0:	fa5f fc8c 	uxtb.w	ip, ip
    7fe4:	f1cc 0e20 	rsb	lr, ip, #32
    7fe8:	fa22 f20c 	lsr.w	r2, r2, ip
    7fec:	f1ac 0c20 	sub.w	ip, ip, #32
    7ff0:	fa01 fe0e 	lsl.w	lr, r1, lr
    7ff4:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    7ff8:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7ffa:	ea42 020e 	orr.w	r2, r2, lr
    7ffe:	ea42 020c 	orr.w	r2, r2, ip
    8002:	3201      	adds	r2, #1
    if (m_curCluster) {
    8004:	b319      	cbz	r1, 804e <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    8006:	3d01      	subs	r5, #1
    8008:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    800a:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    800c:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    800e:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    8010:	bb72      	cbnz	r2, 8070 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    8012:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    8016:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    8018:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    801c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    8020:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    8024:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    8028:	f7ff fe4e 	bl	7cc8 <ExFatFile::sync()>

 fail:
  return false;
}
    802c:	b002      	add	sp, #8
    802e:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    8030:	2001      	movs	r0, #1
}
    8032:	b002      	add	sp, #8
    8034:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    8036:	6981      	ldr	r1, [r0, #24]
    8038:	b961      	cbnz	r1, 8054 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    803a:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    803c:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    803e:	4629      	mov	r1, r5
    8040:	6a20      	ldr	r0, [r4, #32]
    8042:	f000 fba7 	bl	8794 <ExFatPartition::freeChain(unsigned long)>
    8046:	b1c8      	cbz	r0, 807c <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    8048:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    804c:	e7e1      	b.n	8012 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    804e:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    8050:	61e1      	str	r1, [r4, #28]
    8052:	e7dd      	b.n	8010 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    8054:	aa01      	add	r2, sp, #4
    8056:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    8058:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    805a:	f000 fb59 	bl	8710 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    805e:	2800      	cmp	r0, #0
    8060:	db0c      	blt.n	807c <ExFatFile::truncate()+0xc8>
      if (fg) {
    8062:	d110      	bne.n	8086 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    8064:	9d01      	ldr	r5, [sp, #4]
    8066:	2d00      	cmp	r5, #0
    8068:	d1e9      	bne.n	803e <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    806a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    806e:	e7d0      	b.n	8012 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    8070:	2300      	movs	r3, #0
    8072:	9901      	ldr	r1, [sp, #4]
    8074:	f000 fa72 	bl	855c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    8078:	2800      	cmp	r0, #0
    807a:	d1e5      	bne.n	8048 <ExFatFile::truncate()+0x94>
  return false;
    807c:	2000      	movs	r0, #0
}
    807e:	b002      	add	sp, #8
    8080:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    8082:	2000      	movs	r0, #0
}
    8084:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    8086:	f04f 32ff 	mov.w	r2, #4294967295
    808a:	69a1      	ldr	r1, [r4, #24]
    808c:	6a20      	ldr	r0, [r4, #32]
    808e:	f000 fb61 	bl	8754 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    8092:	2800      	cmp	r0, #0
    8094:	d1e6      	bne.n	8064 <ExFatFile::truncate()+0xb0>
    8096:	e7f1      	b.n	807c <ExFatFile::truncate()+0xc8>

00008098 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    8098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    809c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    80a0:	b083      	sub	sp, #12
    80a2:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    80a4:	079d      	lsls	r5, r3, #30
    80a6:	f140 80a1 	bpl.w	81ec <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    80aa:	4691      	mov	r9, r2
    80ac:	071a      	lsls	r2, r3, #28
    80ae:	460e      	mov	r6, r1
    80b0:	f100 8095 	bmi.w	81de <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    80b4:	f1b9 0f00 	cmp.w	r9, #0
    80b8:	f000 8128 	beq.w	830c <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    80bc:	6823      	ldr	r3, [r4, #0]
    80be:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    80c0:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    80c2:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    80c4:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    80c8:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    80cc:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    80d0:	f1b8 0f00 	cmp.w	r8, #0
    80d4:	f040 8094 	bne.w	8200 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    80d8:	2900      	cmp	r1, #0
    80da:	f000 80d4 	beq.w	8286 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    80de:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    80e2:	065b      	lsls	r3, r3, #25
    80e4:	f140 80ec 	bpl.w	82c0 <ExFatFile::write(void const*, unsigned int)+0x228>
    80e8:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    80ec:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    80f0:	f10c 0c09 	add.w	ip, ip, #9
    80f4:	3b01      	subs	r3, #1
    80f6:	fa5f fc8c 	uxtb.w	ip, ip
    80fa:	f142 32ff 	adc.w	r2, r2, #4294967295
    80fe:	f1cc 0e20 	rsb	lr, ip, #32
    8102:	fa23 f30c 	lsr.w	r3, r3, ip
    8106:	f1ac 0c20 	sub.w	ip, ip, #32
    810a:	fa02 fe0e 	lsl.w	lr, r2, lr
    810e:	fa22 fc0c 	lsr.w	ip, r2, ip
    8112:	69e2      	ldr	r2, [r4, #28]
    8114:	ea43 030e 	orr.w	r3, r3, lr
    8118:	ea43 030c 	orr.w	r3, r3, ip
    811c:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    811e:	4299      	cmp	r1, r3
    8120:	f080 80d5 	bcs.w	82ce <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    8124:	3101      	adds	r1, #1
    8126:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    8128:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    812c:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    812e:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    8132:	4091      	lsls	r1, r2
    8134:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    8136:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    813a:	f0c0 808a 	bcc.w	8252 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    813e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    8142:	f0c0 80a6 	bcc.w	8292 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    8146:	2301      	movs	r3, #1
    8148:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    814a:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    814c:	eba3 0308 	sub.w	r3, r3, r8
    8150:	4293      	cmp	r3, r2
    8152:	bf28      	it	cs
    8154:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    8156:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    815a:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    815c:	ea4f 2843 	mov.w	r8, r3, lsl #9
    8160:	d309      	bcc.n	8176 <ExFatFile::write(void const*, unsigned int)+0xde>
    8162:	185f      	adds	r7, r3, r1
    8164:	42ba      	cmp	r2, r7
    8166:	d206      	bcs.n	8176 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    8168:	2200      	movs	r2, #0
    816a:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    816e:	f04f 32ff 	mov.w	r2, #4294967295
    8172:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    8176:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    817a:	4632      	mov	r2, r6
    817c:	6807      	ldr	r7, [r0, #0]
    817e:	6abf      	ldr	r7, [r7, #40]	; 0x28
    8180:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    8182:	b398      	cbz	r0, 81ec <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    8184:	4643      	mov	r3, r8
    src += n;
    8186:	4446      	add	r6, r8
    toWrite -= n;
    8188:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    818c:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    8190:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    8194:	19db      	adds	r3, r3, r7
    8196:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    819a:	4298      	cmp	r0, r3
    819c:	4191      	sbcs	r1, r2
    m_curPosition += n;
    819e:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    81a2:	d207      	bcs.n	81b4 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    81a4:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    81a8:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    81ac:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    81b0:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    81b4:	2d00      	cmp	r5, #0
    81b6:	d183      	bne.n	80c0 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    81b8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    81bc:	4298      	cmp	r0, r3
    81be:	4191      	sbcs	r1, r2
    81c0:	f0c0 8096 	bcc.w	82f0 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    81c4:	4b53      	ldr	r3, [pc, #332]	; (8314 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    81c6:	681b      	ldr	r3, [r3, #0]
    81c8:	2b00      	cmp	r3, #0
    81ca:	f000 809d 	beq.w	8308 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    81ce:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    81d2:	4648      	mov	r0, r9
    81d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    81d8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    81dc:	e00d      	b.n	81fa <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    81de:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    81e2:	f7ff f929 	bl	7438 <ExFatFile::seekSet(unsigned long long)>
    81e6:	2800      	cmp	r0, #0
    81e8:	f47f af64 	bne.w	80b4 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    81ec:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    81f0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    81f2:	f043 0301 	orr.w	r3, r3, #1
    81f6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    81fa:	b003      	add	sp, #12
    81fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    8200:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    8204:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    8206:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    820a:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    820e:	4091      	lsls	r1, r2
    8210:	4441      	add	r1, r8
    8212:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    8214:	2f00      	cmp	r7, #0
    8216:	d08e      	beq.n	8136 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    8218:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    821c:	2201      	movs	r2, #1
    821e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    8222:	45a8      	cmp	r8, r5
    8224:	bf28      	it	cs
    8226:	46a8      	movcs	r8, r5
    8228:	f004 fe9c 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    822c:	2800      	cmp	r0, #0
    822e:	d0dd      	beq.n	81ec <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    8230:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    8232:	4447      	add	r7, r8
      memcpy(dst, src, n);
    8234:	4642      	mov	r2, r8
    8236:	4631      	mov	r1, r6
    8238:	f006 f9ec 	bl	e614 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    823c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    8240:	6a20      	ldr	r0, [r4, #32]
    8242:	d19f      	bne.n	8184 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    8244:	f500 7004 	add.w	r0, r0, #528	; 0x210
    8248:	f004 fe60 	bl	cf0c <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    824c:	2800      	cmp	r0, #0
    824e:	d199      	bne.n	8184 <ExFatFile::write(void const*, unsigned int)+0xec>
    8250:	e7cc      	b.n	81ec <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    8252:	6862      	ldr	r2, [r4, #4]
    8254:	6963      	ldr	r3, [r4, #20]
    8256:	9200      	str	r2, [sp, #0]
    8258:	9301      	str	r3, [sp, #4]
    825a:	6922      	ldr	r2, [r4, #16]
    825c:	6823      	ldr	r3, [r4, #0]
    825e:	4293      	cmp	r3, r2
    8260:	e9dd 2300 	ldrd	r2, r3, [sp]
    8264:	419a      	sbcs	r2, r3
    8266:	d212      	bcs.n	828e <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    8268:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    826a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    826e:	f004 fe79 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    8272:	2800      	cmp	r0, #0
    8274:	d0ba      	beq.n	81ec <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    8276:	462a      	mov	r2, r5
    8278:	4631      	mov	r1, r6
    827a:	4438      	add	r0, r7
    m_curPosition += n;
    827c:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    827e:	f006 f9c9 	bl	e614 <memcpy>
    m_curPosition += n;
    8282:	462b      	mov	r3, r5
    8284:	e77f      	b.n	8186 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    8286:	69e1      	ldr	r1, [r4, #28]
    8288:	b349      	cbz	r1, 82de <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    828a:	61a1      	str	r1, [r4, #24]
    828c:	e74c      	b.n	8128 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    828e:	2205      	movs	r2, #5
    8290:	e7eb      	b.n	826a <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    8292:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    8296:	428b      	cmp	r3, r1
    8298:	d106      	bne.n	82a8 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    829a:	2300      	movs	r3, #0
    829c:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    82a0:	f04f 33ff 	mov.w	r3, #4294967295
    82a4:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    82a8:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    82ac:	4632      	mov	r2, r6
    82ae:	6803      	ldr	r3, [r0, #0]
    82b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    82b2:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    82b4:	2800      	cmp	r0, #0
    82b6:	d099      	beq.n	81ec <ExFatFile::write(void const*, unsigned int)+0x154>
    82b8:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    82bc:	4698      	mov	r8, r3
    82be:	e762      	b.n	8186 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    82c0:	f104 0218 	add.w	r2, r4, #24
    82c4:	f000 fa24 	bl	8710 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    82c8:	2800      	cmp	r0, #0
    82ca:	db8f      	blt.n	81ec <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    82cc:	d104      	bne.n	82d8 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    82ce:	4620      	mov	r0, r4
    82d0:	f7ff fb8a 	bl	79e8 <ExFatFile::addCluster()>
    82d4:	2800      	cmp	r0, #0
    82d6:	d089      	beq.n	81ec <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    82d8:	69a1      	ldr	r1, [r4, #24]
    82da:	6a20      	ldr	r0, [r4, #32]
    82dc:	e724      	b.n	8128 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    82de:	4620      	mov	r0, r4
    82e0:	f7ff fb82 	bl	79e8 <ExFatFile::addCluster()>
    82e4:	2800      	cmp	r0, #0
    82e6:	d081      	beq.n	81ec <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    82e8:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    82ea:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    82ec:	61e1      	str	r1, [r4, #28]
    82ee:	e71b      	b.n	8128 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    82f0:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    82f4:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    82f6:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    82fa:	f061 037f 	orn	r3, r1, #127	; 0x7f
    82fe:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    8302:	b003      	add	sp, #12
    8304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8308:	4648      	mov	r0, r9
    830a:	e776      	b.n	81fa <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    830c:	e9d4 3200 	ldrd	r3, r2, [r4]
    8310:	e752      	b.n	81b8 <ExFatFile::write(void const*, unsigned int)+0x120>
    8312:	bf00      	nop
    8314:	20015130 	.word	0x20015130

00008318 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    8318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    831c:	460c      	mov	r4, r1
    831e:	4615      	mov	r5, r2
    8320:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    8324:	89ab      	ldrh	r3, [r5, #12]
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    8326:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    8328:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    832c:	b91b      	cbnz	r3, 8336 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    832e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    8332:	429a      	cmp	r2, r3
    8334:	d00e      	beq.n	8354 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    8336:	f004 fe3d 	bl	cfb4 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    833a:	f004 feff 	bl	d13c <toUpcase(unsigned short)>
    833e:	4606      	mov	r6, r0
    8340:	4638      	mov	r0, r7
    8342:	f004 fefb 	bl	d13c <toUpcase(unsigned short)>
    8346:	4286      	cmp	r6, r0
    8348:	d109      	bne.n	835e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    834a:	4544      	cmp	r4, r8
    834c:	d1ea      	bne.n	8324 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    834e:	2001      	movs	r0, #1
}
    8350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    8354:	fab7 f087 	clz	r0, r7
    8358:	0940      	lsrs	r0, r0, #5
}
    835a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    835e:	2000      	movs	r0, #0
}
    8360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008364 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    8364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    8368:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    836c:	b083      	sub	sp, #12
    836e:	4688      	mov	r8, r1
  if (!isOpen()) {
    8370:	2b00      	cmp	r3, #0
    8372:	d04f      	beq.n	8414 <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    8374:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    8378:	4607      	mov	r7, r0
    837a:	2b01      	cmp	r3, #1
    837c:	d953      	bls.n	8426 <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    837e:	3a01      	subs	r2, #1
  char* str = name;
    8380:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    8382:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    8386:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    8388:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    838a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 842c <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    838e:	2200      	movs	r2, #0
    8390:	4651      	mov	r1, sl
    8392:	4638      	mov	r0, r7
    8394:	9301      	str	r3, [sp, #4]
    8396:	f7fe febb 	bl	7110 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    839a:	2800      	cmp	r0, #0
    839c:	d03a      	beq.n	8414 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    839e:	7802      	ldrb	r2, [r0, #0]
    83a0:	2ac1      	cmp	r2, #193	; 0xc1
    83a2:	d137      	bne.n	8414 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    83a4:	4605      	mov	r5, r0
    83a6:	f100 091e 	add.w	r9, r0, #30
    83aa:	9b01      	ldr	r3, [sp, #4]
    83ac:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    83b0:	b324      	cbz	r4, 83fc <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    83b2:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    83b6:	b292      	uxth	r2, r2
    83b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    83bc:	d22a      	bcs.n	8414 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    83be:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    83c2:	f3c0 0009 	ubfx	r0, r0, #0, #10
    83c6:	4320      	orrs	r0, r4
    83c8:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    83cc:	4619      	mov	r1, r3
    83ce:	4632      	mov	r2, r6
    83d0:	f004 fe16 	bl	d000 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    83d4:	4603      	mov	r3, r0
    83d6:	b1e8      	cbz	r0, 8414 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    83d8:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    83da:	454d      	cmp	r5, r9
    83dc:	d1e6      	bne.n	83ac <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    83de:	f10a 0a01 	add.w	sl, sl, #1
    83e2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    83e6:	fa5f fa8a 	uxtb.w	sl, sl
    83ea:	4552      	cmp	r2, sl
    83ec:	d2cf      	bcs.n	838e <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    83ee:	eba3 0008 	sub.w	r0, r3, r8
    83f2:	4698      	mov	r8, r3
  *str = '\0';
    83f4:	2300      	movs	r3, #0
    83f6:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    83fa:	e00f      	b.n	841c <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    83fc:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    8400:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    8402:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    8406:	d302      	bcc.n	840e <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    8408:	2800      	cmp	r0, #0
    840a:	d1df      	bne.n	83cc <ExFatFile::getName8(char*, unsigned int)+0x68>
    840c:	e7ef      	b.n	83ee <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    840e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    8412:	d306      	bcc.n	8422 <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    8414:	2300      	movs	r3, #0
  return 0;
    8416:	4618      	mov	r0, r3
  *name = 0;
    8418:	f888 3000 	strb.w	r3, [r8]
}
    841c:	b003      	add	sp, #12
    841e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8422:	4604      	mov	r4, r0
    8424:	e7d9      	b.n	83da <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    8426:	2000      	movs	r0, #0
    8428:	e7e4      	b.n	83f4 <ExFatFile::getName8(char*, unsigned int)+0x90>
    842a:	bf00      	nop
    842c:	000ffc00 	.word	0x000ffc00

00008430 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    8430:	b570      	push	{r4, r5, r6, lr}
    8432:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    8434:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    8436:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    843a:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    843c:	4619      	mov	r1, r3
  uint16_t hash = 0;
    843e:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    8440:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    8442:	6123      	str	r3, [r4, #16]
    next = begin;
    8444:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    8446:	e017      	b.n	8478 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    8448:	f004 fdb4 	bl	cfb4 <FsName::get16()>
    if (u == 0XFFFF) {
    844c:	42a8      	cmp	r0, r5
    844e:	d022      	beq.n	8496 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    8450:	f004 fe74 	bl	d13c <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    8454:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    8456:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    8458:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    845a:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    845c:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    8460:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    8462:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    8464:	fa52 f080 	uxtab	r0, r2, r0
    8468:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    846a:	f3c0 004e 	ubfx	r0, r0, #1, #15
    846e:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    8472:	fa16 f080 	uxtah	r0, r6, r0
    8476:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    8478:	4620      	mov	r0, r4
    847a:	2900      	cmp	r1, #0
    847c:	d1e4      	bne.n	8448 <ExFatFile::hashName(ExName_t*)+0x18>
    847e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    8482:	429a      	cmp	r2, r3
    8484:	d1e0      	bne.n	8448 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    8486:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    8488:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    848a:	3801      	subs	r0, #1
    848c:	28fe      	cmp	r0, #254	; 0xfe
    848e:	bf8c      	ite	hi
    8490:	2000      	movhi	r0, #0
    8492:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    8494:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    8496:	2000      	movs	r0, #0
}
    8498:	bd70      	pop	{r4, r5, r6, pc}
    849a:	bf00      	nop

0000849c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    849c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84a0:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    84a2:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    84a4:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    84a6:	2900      	cmp	r1, #0
    84a8:	d042      	beq.n	8530 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    84aa:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    84ae:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    84b2:	4543      	cmp	r3, r8
    84b4:	d942      	bls.n	853c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    84b6:	f008 0307 	and.w	r3, r8, #7
    84ba:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    84bc:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    84c0:	409d      	lsls	r5, r3
    84c2:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    84c4:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    84c6:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    84c8:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    84cc:	2200      	movs	r2, #0
    84ce:	4638      	mov	r0, r7
    84d0:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    84d4:	f004 fd46 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    84d8:	b1e8      	cbz	r0, 8516 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    84da:	f10b 3bff 	add.w	fp, fp, #4294967295
    84de:	4483      	add	fp, r0
    84e0:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    84e4:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    84e8:	e00a      	b.n	8500 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    84ea:	454a      	cmp	r2, r9
    84ec:	d02b      	beq.n	8546 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    84ee:	45a0      	cmp	r8, r4
    84f0:	d010      	beq.n	8514 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    84f2:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    84f6:	42a5      	cmp	r5, r4
    84f8:	d914      	bls.n	8524 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    84fa:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    84fe:	d00c      	beq.n	851a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    8500:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    8502:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    8504:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    8508:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    850c:	d0ed      	beq.n	84ea <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    850e:	45a0      	cmp	r8, r4
        endAlloc++;
    8510:	4626      	mov	r6, r4
        if (endAlloc == start) {
    8512:	d1ee      	bne.n	84f2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    8514:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    8516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    851a:	4558      	cmp	r0, fp
      mask = 1;
    851c:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    8520:	d1e0      	bne.n	84e4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    8522:	e001      	b.n	8528 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    8524:	2600      	movs	r6, #0
    8526:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    8528:	2501      	movs	r5, #1
    i = 0;
    852a:	f04f 0b00 	mov.w	fp, #0
    852e:	e7cb      	b.n	84c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    8530:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    8534:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    8538:	4543      	cmp	r3, r8
    853a:	d8bc      	bhi.n	84b6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    853c:	f04f 0800 	mov.w	r8, #0
    8540:	2501      	movs	r5, #1
    start = 0;
    8542:	46c3      	mov	fp, r8
    8544:	e7be      	b.n	84c4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    8546:	f1ba 0f00 	cmp.w	sl, #0
    854a:	d104      	bne.n	8556 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    854c:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    8550:	bf08      	it	eq
    8552:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    8556:	1cb0      	adds	r0, r6, #2
}
    8558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000855c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    855c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8560:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    8562:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    8564:	4615      	mov	r5, r2
    8566:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    8568:	1883      	adds	r3, r0, r2
    856a:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    856e:	4293      	cmp	r3, r2
    8570:	d837      	bhi.n	85e2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    8572:	bbce      	cbnz	r6, 85e8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    8574:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    8578:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    857a:	bf88      	it	hi
    857c:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    8580:	f000 0307 	and.w	r3, r0, #7
    8584:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    8586:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    858a:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    858e:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    8590:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    8594:	b2e4      	uxtb	r4, r4
    8596:	2201      	movs	r2, #1
    8598:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    859a:	188f      	adds	r7, r1, r2
    859c:	f004 fce2 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    85a0:	b1f8      	cbz	r0, 85e2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    85a2:	f109 3eff 	add.w	lr, r9, #4294967295
    85a6:	4486      	add	lr, r0
    85a8:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    85ac:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    85b0:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    85b4:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    85b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    85bc:	bf14      	ite	ne
    85be:	2201      	movne	r2, #1
    85c0:	2200      	moveq	r2, #0
    85c2:	42b2      	cmp	r2, r6
    85c4:	d00d      	beq.n	85e2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    85c6:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    85c8:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    85cc:	d018      	beq.n	8600 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    85ce:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    85d2:	d1ed      	bne.n	85b0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    85d4:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    85d6:	46a1      	mov	r9, r4
    85d8:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    85dc:	d1e6      	bne.n	85ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    85de:	4639      	mov	r1, r7
    85e0:	e7d9      	b.n	8596 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    85e2:	2000      	movs	r0, #0
}
    85e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    85e8:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    85ec:	428b      	cmp	r3, r1
    85ee:	d9c7      	bls.n	8580 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    85f0:	4281      	cmp	r1, r0
    85f2:	d3c5      	bcc.n	8580 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    85f4:	4293      	cmp	r3, r2
    85f6:	bf28      	it	cs
    85f8:	2300      	movcs	r3, #0
    85fa:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    85fe:	e7bf      	b.n	8580 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    8600:	2001      	movs	r0, #1
}
    8602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8606:	bf00      	nop

00008608 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    8608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    860a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    860e:	3301      	adds	r3, #1
    8610:	428b      	cmp	r3, r1
    8612:	d201      	bcs.n	8618 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    8614:	2000      	movs	r0, #0
}
    8616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8618:	4607      	mov	r7, r0
    861a:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    861c:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    8620:	2500      	movs	r5, #0
    8622:	e005      	b.n	8630 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    8624:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    8628:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    862a:	3301      	adds	r3, #1
    862c:	42a3      	cmp	r3, r4
    862e:	d3f1      	bcc.n	8614 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    8630:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    8634:	2200      	movs	r2, #0
    8636:	4630      	mov	r0, r6
    8638:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    863c:	f004 fc92 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    8640:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    8642:	2800      	cmp	r0, #0
    8644:	d0e6      	beq.n	8614 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    8646:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    864a:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    864c:	1c63      	adds	r3, r4, #1
    864e:	d1e9      	bne.n	8624 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    8650:	1c68      	adds	r0, r5, #1
}
    8652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008654 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    8654:	b538      	push	{r3, r4, r5, lr}
    8656:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    8658:	680b      	ldr	r3, [r1, #0]
    865a:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    865e:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    8662:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    8666:	3b02      	subs	r3, #2
    8668:	6865      	ldr	r5, [r4, #4]
    866a:	fa03 f30c 	lsl.w	r3, r3, ip
    866e:	4029      	ands	r1, r5
    8670:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    8674:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    8678:	4419      	add	r1, r3
    867a:	f004 fc73 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    867e:	b118      	cbz	r0, 8688 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    8680:	6863      	ldr	r3, [r4, #4]
    8682:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8686:	4418      	add	r0, r3
}
    8688:	bd38      	pop	{r3, r4, r5, pc}
    868a:	bf00      	nop

0000868c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    868c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8690:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    8692:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    8696:	6849      	ldr	r1, [r1, #4]
    8698:	400b      	ands	r3, r1
  pos->position += offset;
    869a:	4411      	add	r1, r2
    869c:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    869e:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    86a0:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    86a4:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    86a8:	b2d2      	uxtb	r2, r2
    86aa:	40d3      	lsrs	r3, r2
  while (tmp--) {
    86ac:	b32b      	cbz	r3, 86fa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    86ae:	4680      	mov	r8, r0
    86b0:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    86b2:	f500 7904 	add.w	r9, r0, #528	; 0x210
    86b6:	e005      	b.n	86c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    86b8:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    86ba:	3d01      	subs	r5, #1
      pos->cluster++;
    86bc:	f103 0301 	add.w	r3, r3, #1
    86c0:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    86c2:	d31a      	bcc.n	86fa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    86c4:	7a26      	ldrb	r6, [r4, #8]
    86c6:	2e00      	cmp	r6, #0
    86c8:	d1f6      	bne.n	86b8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    86ca:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    86ce:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    86d0:	6827      	ldr	r7, [r4, #0]
    86d2:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    86d4:	3301      	adds	r3, #1
    86d6:	429f      	cmp	r7, r3
    86d8:	d812      	bhi.n	8700 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    86da:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    86de:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    86e2:	f004 fc3f 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    86e6:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    86e8:	b150      	cbz	r0, 8700 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    86ea:	f3c7 0708 	ubfx	r7, r7, #0, #9
    86ee:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    86f0:	1c5a      	adds	r2, r3, #1
    86f2:	d009      	beq.n	8708 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    86f4:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    86f6:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    86f8:	d2e4      	bcs.n	86c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    86fa:	2001      	movs	r0, #1
}
    86fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    8700:	f04f 30ff 	mov.w	r0, #4294967295
}
    8704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    8708:	4630      	mov	r0, r6
}
    870a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    870e:	bf00      	nop

00008710 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    8710:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    8712:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    8716:	3301      	adds	r3, #1
    8718:	428b      	cmp	r3, r1
    871a:	d202      	bcs.n	8722 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    871c:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    8720:	bd38      	pop	{r3, r4, r5, pc}
    8722:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    8724:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    8728:	4615      	mov	r5, r2
    872a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    872e:	2200      	movs	r2, #0
    8730:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    8734:	f004 fc16 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    8738:	2800      	cmp	r0, #0
    873a:	d0ef      	beq.n	871c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    873c:	00a4      	lsls	r4, r4, #2
    873e:	f3c4 0408 	ubfx	r4, r4, #0, #9
    8742:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    8744:	1c5a      	adds	r2, r3, #1
    8746:	d002      	beq.n	874e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    8748:	2001      	movs	r0, #1
  *value = next;
    874a:	602b      	str	r3, [r5, #0]
}
    874c:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    874e:	2000      	movs	r0, #0
}
    8750:	bd38      	pop	{r3, r4, r5, pc}
    8752:	bf00      	nop

00008754 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    8754:	2901      	cmp	r1, #1
    8756:	d91b      	bls.n	8790 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    8758:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    875a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    875e:	460c      	mov	r4, r1
    8760:	3301      	adds	r3, #1
    8762:	428b      	cmp	r3, r1
    8764:	d201      	bcs.n	876a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    8766:	2000      	movs	r0, #0
}
    8768:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    876a:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    876e:	4615      	mov	r5, r2
    8770:	f500 7004 	add.w	r0, r0, #528	; 0x210
    8774:	2201      	movs	r2, #1
    8776:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    877a:	f004 fbf3 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    877e:	4603      	mov	r3, r0
    8780:	2800      	cmp	r0, #0
    8782:	d0f0      	beq.n	8766 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    8784:	00a4      	lsls	r4, r4, #2
  return true;
    8786:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    8788:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    878c:	511d      	str	r5, [r3, r4]
}
    878e:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    8790:	2000      	movs	r0, #0
}
    8792:	4770      	bx	lr

00008794 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    8794:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    8798:	3301      	adds	r3, #1
    879a:	4299      	cmp	r1, r3
    879c:	d901      	bls.n	87a2 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    879e:	2000      	movs	r0, #0
    87a0:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    87a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87a6:	4605      	mov	r5, r0
    87a8:	b083      	sub	sp, #12
    87aa:	460c      	mov	r4, r1
    87ac:	f500 7904 	add.w	r9, r0, #528	; 0x210
    87b0:	460f      	mov	r7, r1
    87b2:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    87b6:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    87ba:	2200      	movs	r2, #0
    87bc:	4648      	mov	r0, r9
    87be:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    87c2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    87c6:	f004 fbcd 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    87ca:	b190      	cbz	r0, 87f2 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    87cc:	00a3      	lsls	r3, r4, #2
    87ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    87d2:	58c2      	ldr	r2, [r0, r3]
    87d4:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    87d6:	1c53      	adds	r3, r2, #1
    87d8:	bf16      	itet	ne
    87da:	4616      	movne	r6, r2
    87dc:	f04f 0a00 	moveq.w	sl, #0
    87e0:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    87e4:	2c01      	cmp	r4, #1
    87e6:	d904      	bls.n	87f2 <ExFatPartition::freeChain(unsigned long)+0x5e>
    87e8:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    87ec:	3201      	adds	r2, #1
    87ee:	4294      	cmp	r4, r2
    87f0:	d903      	bls.n	87fa <ExFatPartition::freeChain(unsigned long)+0x66>
}
    87f2:	2000      	movs	r0, #0
    87f4:	b003      	add	sp, #12
    87f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    87fa:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    87fe:	2201      	movs	r2, #1
    8800:	4648      	mov	r0, r9
    8802:	4459      	add	r1, fp
    8804:	f004 fbae 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    8808:	2800      	cmp	r0, #0
    880a:	d0f2      	beq.n	87f2 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    880c:	9b01      	ldr	r3, [sp, #4]
    880e:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    8812:	f1ba 0f00 	cmp.w	sl, #0
    8816:	d012      	beq.n	883e <ExFatPartition::freeChain(unsigned long)+0xaa>
    8818:	3401      	adds	r4, #1
    881a:	42b4      	cmp	r4, r6
    881c:	d008      	beq.n	8830 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    881e:	2300      	movs	r3, #0
    8820:	1be2      	subs	r2, r4, r7
    8822:	4639      	mov	r1, r7
    8824:	4628      	mov	r0, r5
    8826:	f7ff fe99 	bl	855c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    882a:	2800      	cmp	r0, #0
    882c:	d0e1      	beq.n	87f2 <ExFatPartition::freeChain(unsigned long)+0x5e>
    882e:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    8830:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    8834:	3301      	adds	r3, #1
    8836:	42b3      	cmp	r3, r6
    8838:	d3db      	bcc.n	87f2 <ExFatPartition::freeChain(unsigned long)+0x5e>
    883a:	4634      	mov	r4, r6
    883c:	e7bb      	b.n	87b6 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    883e:	1c62      	adds	r2, r4, #1
    8840:	4653      	mov	r3, sl
    8842:	4639      	mov	r1, r7
    8844:	4628      	mov	r0, r5
    8846:	1bd2      	subs	r2, r2, r7
}
    8848:	b003      	add	sp, #12
    884a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    884e:	f7ff be85 	b.w	855c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    8852:	bf00      	nop

00008854 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    8854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    8858:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    885a:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    885c:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    8860:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    8864:	462c      	mov	r4, r5
    8866:	2200      	movs	r2, #0
    8868:	4640      	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    886a:	1c4f      	adds	r7, r1, #1
    886c:	f004 fb7a 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    8870:	b1a8      	cbz	r0, 889e <ExFatPartition::freeClusterCount()+0x4a>
    8872:	f100 3eff 	add.w	lr, r0, #4294967295
    8876:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    887a:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    887e:	e005      	b.n	888c <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    8880:	b979      	cbnz	r1, 88a2 <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    8882:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    8884:	4284      	cmp	r4, r0
    8886:	d209      	bcs.n	889c <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    8888:	454c      	cmp	r4, r9
    888a:	d016      	beq.n	88ba <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    888c:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    8890:	29ff      	cmp	r1, #255	; 0xff
    8892:	d1f5      	bne.n	8880 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    8894:	3408      	adds	r4, #8
        usedCount+= 8;
    8896:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    8898:	4284      	cmp	r4, r0
    889a:	d3f5      	bcc.n	8888 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    889c:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    889e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    88a2:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    88a4:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    88a6:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    88a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    88ac:	bf18      	it	ne
    88ae:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    88b0:	3a01      	subs	r2, #1
    88b2:	fa5f f38c 	uxtb.w	r3, ip
    88b6:	d1f6      	bne.n	88a6 <ExFatPartition::freeClusterCount()+0x52>
    88b8:	e7e3      	b.n	8882 <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    88ba:	4639      	mov	r1, r7
    88bc:	e7d3      	b.n	8866 <ExFatPartition::freeClusterCount()+0x12>
    88be:	bf00      	nop

000088c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    88c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    88c2:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    88c4:	f04f 36ff 	mov.w	r6, #4294967295
    88c8:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    88cc:	4615      	mov	r5, r2
  m_blockDev = dev;
    88ce:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    88d2:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    88d4:	6041      	str	r1, [r0, #4]
    88d6:	461a      	mov	r2, r3
    88d8:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    88dc:	4619      	mov	r1, r3
  m_fatType = 0;
    88de:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    88e2:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    88e4:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    88e6:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    88ea:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    88ee:	4638      	mov	r0, r7
    88f0:	f004 fb38 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    88f4:	2d04      	cmp	r5, #4
    88f6:	d80d      	bhi.n	8914 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    88f8:	4606      	mov	r6, r0
    88fa:	b158      	cbz	r0, 8914 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    88fc:	b1bd      	cbz	r5, 892e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    88fe:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    8900:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    8904:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    8908:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    890c:	d102      	bne.n	8914 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    890e:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    8912:	b90b      	cbnz	r3, 8918 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    8914:	2000      	movs	r0, #0
}
    8916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    8918:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    891c:	4638      	mov	r0, r7
    891e:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    8922:	4629      	mov	r1, r5
    8924:	f004 fb1e 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    8928:	4606      	mov	r6, r0
    892a:	2800      	cmp	r0, #0
    892c:	d0f2      	beq.n	8914 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    892e:	2205      	movs	r2, #5
    8930:	491a      	ldr	r1, [pc, #104]	; (899c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    8932:	1cf0      	adds	r0, r6, #3
    8934:	f009 ffa4 	bl	12880 <strncmp>
    8938:	2800      	cmp	r0, #0
    893a:	d1eb      	bne.n	8914 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    893c:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    8940:	2b09      	cmp	r3, #9
    8942:	d1e7      	bne.n	8914 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    8944:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    8946:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    8948:	442b      	add	r3, r5
    894a:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    894e:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    8950:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    8954:	6db3      	ldr	r3, [r6, #88]	; 0x58
    8956:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8958:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    895a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    895e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    8960:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    8964:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    8966:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    896a:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    896e:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    8972:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8974:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    8978:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    897c:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    8980:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8982:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    8986:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    898a:	462a      	mov	r2, r5
    898c:	f7ff fd86 	bl	849c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    8990:	2340      	movs	r3, #64	; 0x40
  return true;
    8992:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    8994:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    8998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    899a:	bf00      	nop
    899c:	20000b24 	.word	0x20000b24

000089a0 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    89a0:	b510      	push	{r4, lr}
    89a2:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    89a4:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    89a8:	f7ff fe2e 	bl	8608 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    89ac:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    89b0:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    89b2:	b2db      	uxtb	r3, r3
}
    89b4:	4098      	lsls	r0, r3
    89b6:	bd10      	pop	{r4, pc}

000089b8 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    89b8:	b570      	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    89ba:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    89be:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    89c0:	2300      	movs	r3, #0
    89c2:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    89c4:	4668      	mov	r0, sp
    89c6:	4621      	mov	r1, r4
    89c8:	930c      	str	r3, [sp, #48]	; 0x30
    89ca:	f7fe ff77 	bl	78bc <ExFatFile::open(ExFatFile*, char const*, int)>
    89ce:	4605      	mov	r5, r0
    89d0:	b1d8      	cbz	r0, 8a0a <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    89d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    89d6:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    89da:	d019      	beq.n	8a10 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    89dc:	46ee      	mov	lr, sp
    89de:	46a4      	mov	ip, r4
    89e0:	ae0c      	add	r6, sp, #48	; 0x30
    89e2:	4674      	mov	r4, lr
    89e4:	f10c 0c10 	add.w	ip, ip, #16
    89e8:	f10e 0e10 	add.w	lr, lr, #16
    89ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    89ee:	42b4      	cmp	r4, r6
    89f0:	f84c 0c10 	str.w	r0, [ip, #-16]
    89f4:	f84c 1c0c 	str.w	r1, [ip, #-12]
    89f8:	f84c 2c08 	str.w	r2, [ip, #-8]
    89fc:	f84c 3c04 	str.w	r3, [ip, #-4]
    8a00:	d1ef      	bne.n	89e2 <ExFatVolume::chdir(char const*)+0x2a>
    8a02:	f8de 0000 	ldr.w	r0, [lr]
    8a06:	f8cc 0000 	str.w	r0, [ip]
  return true;

 fail:
  return false;
}
    8a0a:	4628      	mov	r0, r5
    8a0c:	b00e      	add	sp, #56	; 0x38
    8a0e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    8a10:	461d      	mov	r5, r3
}
    8a12:	4628      	mov	r0, r5
    8a14:	b00e      	add	sp, #56	; 0x38
    8a16:	bd70      	pop	{r4, r5, r6, pc}

00008a18 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    8a18:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    8a1a:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    8a1e:	b082      	sub	sp, #8
    8a20:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    8a22:	2b00      	cmp	r3, #0
    8a24:	db0d      	blt.n	8a42 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    8a26:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8a28:	f105 0028 	add.w	r0, r5, #40	; 0x28
    8a2c:	f004 fa6e 	bl	cf0c <FsCache::sync()>
    8a30:	2800      	cmp	r0, #0
    8a32:	d13b      	bne.n	8aac <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    8a34:	7863      	ldrb	r3, [r4, #1]
  return false;
    8a36:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    8a38:	f043 0301 	orr.w	r3, r3, #1
    8a3c:	7063      	strb	r3, [r4, #1]
}
    8a3e:	b002      	add	sp, #8
    8a40:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    8a42:	6880      	ldr	r0, [r0, #8]
    8a44:	2201      	movs	r2, #1
    8a46:	69a1      	ldr	r1, [r4, #24]
    8a48:	3028      	adds	r0, #40	; 0x28
    8a4a:	f004 fa8b 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8a4e:	2800      	cmp	r0, #0
    8a50:	d0f0      	beq.n	8a34 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    8a52:	88a5      	ldrh	r5, [r4, #4]
    8a54:	f005 050f 	and.w	r5, r5, #15
    8a58:	016b      	lsls	r3, r5, #5
    8a5a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    8a5e:	5cc3      	ldrb	r3, [r0, r3]
    8a60:	2be5      	cmp	r3, #229	; 0xe5
    8a62:	d0e7      	beq.n	8a34 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    8a64:	7823      	ldrb	r3, [r4, #0]
    8a66:	071b      	lsls	r3, r3, #28
    8a68:	d501      	bpl.n	8a6e <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    8a6a:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8a6c:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    8a6e:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    8a70:	4915      	ldr	r1, [pc, #84]	; (8ac8 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    8a72:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    8a74:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    8a76:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    8a78:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    8a7a:	b166      	cbz	r6, 8a96 <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    8a7c:	f10d 0203 	add.w	r2, sp, #3
    8a80:	f10d 0106 	add.w	r1, sp, #6
    8a84:	a801      	add	r0, sp, #4
    8a86:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    8a88:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8a8c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8a90:	832b      	strh	r3, [r5, #24]
    8a92:	826b      	strh	r3, [r5, #18]
    8a94:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    8a96:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    8a98:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    8a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8a9e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    8aa2:	70a3      	strb	r3, [r4, #2]
    8aa4:	f004 fa32 	bl	cf0c <FsCache::sync()>
    8aa8:	2800      	cmp	r0, #0
    8aaa:	d0c3      	beq.n	8a34 <FatFile::sync() [clone .part.0]+0x1c>
    8aac:	f505 700e 	add.w	r0, r5, #568	; 0x238
    8ab0:	f004 fa2c 	bl	cf0c <FsCache::sync()>
    8ab4:	2800      	cmp	r0, #0
    8ab6:	d0bd      	beq.n	8a34 <FatFile::sync() [clone .part.0]+0x1c>
    8ab8:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    8aba:	6803      	ldr	r3, [r0, #0]
    8abc:	6a1b      	ldr	r3, [r3, #32]
    8abe:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8ac0:	2800      	cmp	r0, #0
    8ac2:	d0b7      	beq.n	8a34 <FatFile::sync() [clone .part.0]+0x1c>
    8ac4:	e7bb      	b.n	8a3e <FatFile::sync() [clone .part.0]+0x26>
    8ac6:	bf00      	nop
    8ac8:	20015130 	.word	0x20015130

00008acc <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    8acc:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    8ace:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    8ad0:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    8ad4:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    8ad6:	6880      	ldr	r0, [r0, #8]
    8ad8:	4629      	mov	r1, r5
    8ada:	f001 fdaf 	bl	a63c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    8ade:	b150      	cbz	r0, 8af6 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    8ae0:	b155      	cbz	r5, 8af8 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    8ae2:	6923      	ldr	r3, [r4, #16]
    8ae4:	3501      	adds	r5, #1
    8ae6:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    8ae8:	78a3      	ldrb	r3, [r4, #2]
    8aea:	bf18      	it	ne
    8aec:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    8af0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8af4:	70a3      	strb	r3, [r4, #2]
}
    8af6:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    8af8:	78a3      	ldrb	r3, [r4, #2]
    8afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8afe:	e7f7      	b.n	8af0 <FatFile::addCluster()+0x24>

00008b00 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    8b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    8b02:	7804      	ldrb	r4, [r0, #0]
    8b04:	f014 0420 	ands.w	r4, r4, #32
    8b08:	d104      	bne.n	8b14 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    8b0a:	4b1a      	ldr	r3, [pc, #104]	; (8b74 <FatFile::addDirCluster()+0x74>)
    8b0c:	4605      	mov	r5, r0
    8b0e:	6942      	ldr	r2, [r0, #20]
    8b10:	429a      	cmp	r2, r3
    8b12:	d302      	bcc.n	8b1a <FatFile::addDirCluster()+0x1a>
  return false;
    8b14:	2700      	movs	r7, #0
}
    8b16:	4638      	mov	r0, r7
    8b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    8b1a:	f7ff ffd7 	bl	8acc <FatFile::addCluster()>
    8b1e:	4607      	mov	r7, r0
    8b20:	2800      	cmp	r0, #0
    8b22:	d0f7      	beq.n	8b14 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    8b24:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8b26:	692e      	ldr	r6, [r5, #16]
    8b28:	7982      	ldrb	r2, [r0, #6]
    8b2a:	3e02      	subs	r6, #2
    8b2c:	6941      	ldr	r1, [r0, #20]
    8b2e:	4096      	lsls	r6, r2
    8b30:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    8b32:	7901      	ldrb	r1, [r0, #4]
    8b34:	b1a9      	cbz	r1, 8b62 <FatFile::addDirCluster()+0x62>
    8b36:	4621      	mov	r1, r4
    8b38:	e006      	b.n	8b48 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    8b3a:	f009 fdf9 	bl	12730 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    8b3e:	68a8      	ldr	r0, [r5, #8]
    8b40:	b2e1      	uxtb	r1, r4
    8b42:	7902      	ldrb	r2, [r0, #4]
    8b44:	428a      	cmp	r2, r1
    8b46:	d90b      	bls.n	8b60 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    8b48:	4431      	add	r1, r6
    8b4a:	2205      	movs	r2, #5
    8b4c:	3028      	adds	r0, #40	; 0x28
    8b4e:	3401      	adds	r4, #1
    8b50:	f004 fa08 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    8b54:	f44f 7200 	mov.w	r2, #512	; 0x200
    8b58:	2100      	movs	r1, #0
    if (!pc) {
    8b5a:	2800      	cmp	r0, #0
    8b5c:	d1ed      	bne.n	8b3a <FatFile::addDirCluster()+0x3a>
    8b5e:	e7d9      	b.n	8b14 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    8b60:	7982      	ldrb	r2, [r0, #6]
    8b62:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    8b66:	6969      	ldr	r1, [r5, #20]
}
    8b68:	4638      	mov	r0, r7
    8b6a:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    8b6c:	fa11 f383 	uxtah	r3, r1, r3
    8b70:	616b      	str	r3, [r5, #20]
}
    8b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b74:	001ffe00 	.word	0x001ffe00

00008b78 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    8b78:	b510      	push	{r4, lr}
    8b7a:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    8b7c:	6880      	ldr	r0, [r0, #8]
    8b7e:	460a      	mov	r2, r1
    8b80:	3028      	adds	r0, #40	; 0x28
    8b82:	69a1      	ldr	r1, [r4, #24]
    8b84:	f004 f9ee 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8b88:	b120      	cbz	r0, 8b94 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    8b8a:	88a3      	ldrh	r3, [r4, #4]
    8b8c:	f003 030f 	and.w	r3, r3, #15
    8b90:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    8b94:	bd10      	pop	{r4, pc}
    8b96:	bf00      	nop

00008b98 <FatFile::close()>:
bool FatFile::close() {
    8b98:	b510      	push	{r4, lr}
  if (!isOpen()) {
    8b9a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    8b9c:	4604      	mov	r4, r0
  if (!isOpen()) {
    8b9e:	b12b      	cbz	r3, 8bac <FatFile::close()+0x14>
    8ba0:	f7ff ff3a 	bl	8a18 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    8ba4:	2300      	movs	r3, #0
    8ba6:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    8ba8:	70a3      	strb	r3, [r4, #2]
}
    8baa:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    8bac:	2300      	movs	r3, #0
    return true;
    8bae:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    8bb0:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    8bb2:	70a3      	strb	r3, [r4, #2]
}
    8bb4:	bd10      	pop	{r4, pc}
    8bb6:	bf00      	nop

00008bb8 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    8bb8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    8bba:	7803      	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    8bbc:	4605      	mov	r5, r0
    8bbe:	460c      	mov	r4, r1
  if (!isOpen()) {
    8bc0:	b113      	cbz	r3, 8bc8 <FatFile::dirEntry(DirFat_t*)+0x10>
    8bc2:	f7ff ff29 	bl	8a18 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    8bc6:	b1f0      	cbz	r0, 8c06 <FatFile::dirEntry(DirFat_t*)+0x4e>
    8bc8:	68a8      	ldr	r0, [r5, #8]
    8bca:	2200      	movs	r2, #0
    8bcc:	69a9      	ldr	r1, [r5, #24]
    8bce:	3028      	adds	r0, #40	; 0x28
    8bd0:	f004 f9c8 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8bd4:	b1b8      	cbz	r0, 8c06 <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    8bd6:	88aa      	ldrh	r2, [r5, #4]
    8bd8:	f002 020f 	and.w	r2, r2, #15
    8bdc:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    8be0:	0152      	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    8be2:	685d      	ldr	r5, [r3, #4]
    8be4:	5880      	ldr	r0, [r0, r2]
    8be6:	6899      	ldr	r1, [r3, #8]
    8be8:	68da      	ldr	r2, [r3, #12]
    8bea:	6020      	str	r0, [r4, #0]
    8bec:	6065      	str	r5, [r4, #4]
    8bee:	60a1      	str	r1, [r4, #8]
    8bf0:	60e2      	str	r2, [r4, #12]
    8bf2:	6918      	ldr	r0, [r3, #16]
    8bf4:	695d      	ldr	r5, [r3, #20]
    8bf6:	6999      	ldr	r1, [r3, #24]
    8bf8:	69da      	ldr	r2, [r3, #28]
    8bfa:	6120      	str	r0, [r4, #16]
  return true;
    8bfc:	2001      	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    8bfe:	6165      	str	r5, [r4, #20]
    8c00:	61a1      	str	r1, [r4, #24]
    8c02:	61e2      	str	r2, [r4, #28]
}
    8c04:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    8c06:	2000      	movs	r0, #0
}
    8c08:	bd38      	pop	{r3, r4, r5, pc}
    8c0a:	bf00      	nop

00008c0c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    8c0c:	b530      	push	{r4, r5, lr}
    8c0e:	b089      	sub	sp, #36	; 0x24
    8c10:	460d      	mov	r5, r1
    8c12:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    8c14:	4669      	mov	r1, sp
    8c16:	f7ff ffcf 	bl	8bb8 <FatFile::dirEntry(DirFat_t*)>
    8c1a:	b128      	cbz	r0, 8c28 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    8c1c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    8c20:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    8c24:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    8c26:	8023      	strh	r3, [r4, #0]
}
    8c28:	b009      	add	sp, #36	; 0x24
    8c2a:	bd30      	pop	{r4, r5, pc}

00008c2c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    8c2c:	b530      	push	{r4, r5, lr}
    8c2e:	b089      	sub	sp, #36	; 0x24
    8c30:	460d      	mov	r5, r1
    8c32:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    8c34:	4669      	mov	r1, sp
    8c36:	f7ff ffbf 	bl	8bb8 <FatFile::dirEntry(DirFat_t*)>
    8c3a:	b128      	cbz	r0, 8c48 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    8c3c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    8c40:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    8c44:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    8c46:	8023      	strh	r3, [r4, #0]
}
    8c48:	b009      	add	sp, #36	; 0x24
    8c4a:	bd30      	pop	{r4, r5, pc}

00008c4c <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    8c4c:	780b      	ldrb	r3, [r1, #0]
    8c4e:	f013 0f70 	tst.w	r3, #112	; 0x70
    8c52:	d101      	bne.n	8c58 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    8c54:	2000      	movs	r0, #0
    8c56:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    8c58:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    8c5a:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    8c5e:	b089      	sub	sp, #36	; 0x24
    8c60:	460d      	mov	r5, r1
    8c62:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    8c64:	f001 f84a 	bl	9cfc <FatFile::open(FatFile*, FatLfn_t*, int)>
    8c68:	b138      	cbz	r0, 8c7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    8c6a:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    8c6c:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    8c6e:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    8c70:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    8c72:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    8c74:	f7ff ff44 	bl	8b00 <FatFile::addDirCluster()>
    8c78:	b910      	cbnz	r0, 8c80 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    8c7a:	2000      	movs	r0, #0
    8c7c:	b009      	add	sp, #36	; 0x24
    8c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    8c80:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    8c82:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    8c84:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    8c86:	b16b      	cbz	r3, 8ca4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    8c88:	6963      	ldr	r3, [r4, #20]
    8c8a:	b133      	cbz	r3, 8c9a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8c8c:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    8c8e:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8c90:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    8c94:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8c98:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    8c9a:	4620      	mov	r0, r4
    8c9c:	f7ff febc 	bl	8a18 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    8ca0:	2800      	cmp	r0, #0
    8ca2:	d0ea      	beq.n	8c7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    8ca4:	68a0      	ldr	r0, [r4, #8]
    8ca6:	2201      	movs	r2, #1
    8ca8:	69a1      	ldr	r1, [r4, #24]
    8caa:	3028      	adds	r0, #40	; 0x28
    8cac:	f004 f95a 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8cb0:	2800      	cmp	r0, #0
    8cb2:	d0e2      	beq.n	8c7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    8cb4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    8cb8:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    8cba:	f00c 0c0f 	and.w	ip, ip, #15
    8cbe:	ea4f 134c 	mov.w	r3, ip, lsl #5
    8cc2:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    8cc6:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    8cca:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    8ccc:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8cce:	6a23      	ldr	r3, [r4, #32]
    8cd0:	f897 e006 	ldrb.w	lr, [r7, #6]
    8cd4:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    8cd6:	f8dc 1004 	ldr.w	r1, [ip, #4]
    8cda:	f8dc 2008 	ldr.w	r2, [ip, #8]
    8cde:	f8dc 300c 	ldr.w	r3, [ip, #12]
    8ce2:	fa06 f60e 	lsl.w	r6, r6, lr
    8ce6:	46ee      	mov	lr, sp
    8ce8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    8cec:	f8dc 0010 	ldr.w	r0, [ip, #16]
    8cf0:	f8dc 1014 	ldr.w	r1, [ip, #20]
    8cf4:	f8dc 2018 	ldr.w	r2, [ip, #24]
    8cf8:	f8dc 301c 	ldr.w	r3, [ip, #28]
    8cfc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    8d00:	697b      	ldr	r3, [r7, #20]
    8d02:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8d06:	2201      	movs	r2, #1
    8d08:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    8d0a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    8d0e:	f8cd 3001 	str.w	r3, [sp, #1]
    8d12:	f8cd 3005 	str.w	r3, [sp, #5]
    8d16:	f8ad 3009 	strh.w	r3, [sp, #9]
    8d1a:	f004 f923 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8d1e:	4684      	mov	ip, r0
    8d20:	2800      	cmp	r0, #0
    8d22:	d0aa      	beq.n	8c7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    8d24:	272e      	movs	r7, #46	; 0x2e
    8d26:	46ee      	mov	lr, sp
    8d28:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    8d2c:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    8d2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8d32:	f8cc 0000 	str.w	r0, [ip]
    8d36:	f8cc 1004 	str.w	r1, [ip, #4]
    8d3a:	f8cc 2008 	str.w	r2, [ip, #8]
    8d3e:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    8d42:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    8d46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8d4a:	f8cc 0010 	str.w	r0, [ip, #16]
    8d4e:	f8cc 1014 	str.w	r1, [ip, #20]
    8d52:	f8cc 2018 	str.w	r2, [ip, #24]
    8d56:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8d5a:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    8d5c:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8d5e:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    8d62:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    8d66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8d68:	f8cc 0020 	str.w	r0, [ip, #32]
    8d6c:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    8d70:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    8d74:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    8d78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8d7a:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    8d7e:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    8d82:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    8d86:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    8d8a:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8d8c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8d90:	f004 f8bc 	bl	cf0c <FsCache::sync()>
    8d94:	2800      	cmp	r0, #0
    8d96:	f43f af70 	beq.w	8c7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    8d9a:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8d9e:	f004 f8b5 	bl	cf0c <FsCache::sync()>
    8da2:	2800      	cmp	r0, #0
    8da4:	f43f af69 	beq.w	8c7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    8da8:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    8daa:	6803      	ldr	r3, [r0, #0]
    8dac:	6a1b      	ldr	r3, [r3, #32]
}
    8dae:	b009      	add	sp, #36	; 0x24
    8db0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8db4:	4718      	bx	r3
    8db6:	bf00      	nop

00008db8 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    8db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    8dbc:	2600      	movs	r6, #0
    8dbe:	b094      	sub	sp, #80	; 0x50
    8dc0:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    8dc2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    8dc4:	9201      	str	r2, [sp, #4]
    8dc6:	f8ad 6014 	strh.w	r6, [sp, #20]
    8dca:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    8dcc:	2b00      	cmp	r3, #0
    8dce:	d141      	bne.n	8e54 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    8dd0:	780b      	ldrb	r3, [r1, #0]
    8dd2:	460d      	mov	r5, r1
    8dd4:	f013 0f70 	tst.w	r3, #112	; 0x70
    8dd8:	d03c      	beq.n	8e54 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    8dda:	7813      	ldrb	r3, [r2, #0]
    8ddc:	4604      	mov	r4, r0
    8dde:	4616      	mov	r6, r2
    8de0:	2b2f      	cmp	r3, #47	; 0x2f
    8de2:	d03b      	beq.n	8e5c <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    8de4:	2700      	movs	r7, #0
    8de6:	e028      	b.n	8e3a <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    8de8:	9e01      	ldr	r6, [sp, #4]
    8dea:	7836      	ldrb	r6, [r6, #0]
    8dec:	2e00      	cmp	r6, #0
    8dee:	d050      	beq.n	8e92 <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    8df0:	f000 ff84 	bl	9cfc <FatFile::open(FatFile*, FatLfn_t*, int)>
    8df4:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    8df6:	aa02      	add	r2, sp, #8
    8df8:	4629      	mov	r1, r5
    8dfa:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    8dfc:	b92b      	cbnz	r3, 8e0a <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    8dfe:	f1b8 0f00 	cmp.w	r8, #0
    8e02:	d027      	beq.n	8e54 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    8e04:	f7ff ff22 	bl	8c4c <FatFile::mkdir(FatFile*, FatLfn_t*)>
    8e08:	b320      	cbz	r0, 8e54 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    8e0a:	46a6      	mov	lr, r4
    8e0c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    8e10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8e14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8e18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8e1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8e20:	f8de 5000 	ldr.w	r5, [lr]
    8e24:	4620      	mov	r0, r4
  if (!isOpen()) {
    8e26:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    8e28:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    8e2c:	b10b      	cbz	r3, 8e32 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    8e2e:	f7ff fdf3 	bl	8a18 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    8e32:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    8e34:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    8e36:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    8e38:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    8e3a:	4631      	mov	r1, r6
    8e3c:	ab01      	add	r3, sp, #4
    8e3e:	aa02      	add	r2, sp, #8
    8e40:	4620      	mov	r0, r4
    8e42:	f001 f8a7 	bl	9f94 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    8e46:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    8e48:	aa02      	add	r2, sp, #8
    8e4a:	4629      	mov	r1, r5
    8e4c:	2300      	movs	r3, #0
    8e4e:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    8e50:	2e00      	cmp	r6, #0
    8e52:	d1c9      	bne.n	8de8 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    8e54:	2000      	movs	r0, #0
}
    8e56:	b014      	add	sp, #80	; 0x50
    8e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    8e5c:	3601      	adds	r6, #1
    8e5e:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    8e60:	7833      	ldrb	r3, [r6, #0]
    8e62:	2b2f      	cmp	r3, #47	; 0x2f
    8e64:	d0fa      	beq.n	8e5c <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    8e66:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    8e68:	2224      	movs	r2, #36	; 0x24
    8e6a:	2100      	movs	r1, #0
    8e6c:	a80b      	add	r0, sp, #44	; 0x2c
    8e6e:	f009 fc5f 	bl	12730 <memset>
  m_vol = vol;
    8e72:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    8e74:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8e76:	2b10      	cmp	r3, #16
    8e78:	d003      	beq.n	8e82 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    8e7a:	2b20      	cmp	r3, #32
    8e7c:	d00f      	beq.n	8e9e <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    8e7e:	2b0c      	cmp	r3, #12
    8e80:	d1e8      	bne.n	8e54 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    8e82:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8e84:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    8e88:	2301      	movs	r3, #1
    parent = &tmpDir;
    8e8a:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    8e8c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    8e90:	e7a8      	b.n	8de4 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    8e92:	aa02      	add	r2, sp, #8
    8e94:	f7ff feda 	bl	8c4c <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    8e98:	b014      	add	sp, #80	; 0x50
    8e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    8e9e:	2340      	movs	r3, #64	; 0x40
    8ea0:	e7f0      	b.n	8e84 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    8ea2:	bf00      	nop

00008ea4 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    8ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ea8:	2500      	movs	r5, #0
    8eaa:	b094      	sub	sp, #80	; 0x50
    8eac:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    8eae:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    8eb0:	9201      	str	r2, [sp, #4]
    8eb2:	9502      	str	r5, [sp, #8]
    8eb4:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    8eb8:	2b00      	cmp	r3, #0
    8eba:	d137      	bne.n	8f2c <FatFile::open(FatFile*, char const*, int)+0x88>
    8ebc:	780b      	ldrb	r3, [r1, #0]
    8ebe:	460e      	mov	r6, r1
    8ec0:	f013 0f70 	tst.w	r3, #112	; 0x70
    8ec4:	d032      	beq.n	8f2c <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    8ec6:	7813      	ldrb	r3, [r2, #0]
    8ec8:	4604      	mov	r4, r0
    8eca:	4615      	mov	r5, r2
    8ecc:	2b2f      	cmp	r3, #47	; 0x2f
    8ece:	d031      	beq.n	8f34 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    8ed0:	2700      	movs	r7, #0
    8ed2:	e01e      	b.n	8f12 <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    8ed4:	9d01      	ldr	r5, [sp, #4]
    8ed6:	782d      	ldrb	r5, [r5, #0]
    8ed8:	2d00      	cmp	r5, #0
    8eda:	d040      	beq.n	8f5e <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    8edc:	f000 ff0e 	bl	9cfc <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    8ee0:	46a6      	mov	lr, r4
    8ee2:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    8ee6:	b308      	cbz	r0, 8f2c <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    8ee8:	4666      	mov	r6, ip
  if (!isOpen()) {
    8eea:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    8eec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8ef0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8ef4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8ef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8efc:	f8de 3000 	ldr.w	r3, [lr]
    8f00:	4620      	mov	r0, r4
    8f02:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    8f06:	b10d      	cbz	r5, 8f0c <FatFile::open(FatFile*, char const*, int)+0x68>
    8f08:	f7ff fd86 	bl	8a18 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    8f0c:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    8f0e:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    8f10:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    8f12:	4629      	mov	r1, r5
    8f14:	ab01      	add	r3, sp, #4
    8f16:	aa0b      	add	r2, sp, #44	; 0x2c
    8f18:	4620      	mov	r0, r4
    8f1a:	f001 f83b 	bl	9f94 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    8f1e:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    8f20:	aa0b      	add	r2, sp, #44	; 0x2c
    8f22:	4631      	mov	r1, r6
    8f24:	2300      	movs	r3, #0
    8f26:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    8f28:	2d00      	cmp	r5, #0
    8f2a:	d1d3      	bne.n	8ed4 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    8f2c:	2000      	movs	r0, #0
}
    8f2e:	b014      	add	sp, #80	; 0x50
    8f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    8f34:	3501      	adds	r5, #1
    8f36:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    8f38:	7829      	ldrb	r1, [r5, #0]
    8f3a:	292f      	cmp	r1, #47	; 0x2f
    8f3c:	d0fa      	beq.n	8f34 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    8f3e:	b9a9      	cbnz	r1, 8f6c <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    8f40:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    8f42:	2224      	movs	r2, #36	; 0x24
    8f44:	4620      	mov	r0, r4
    8f46:	f009 fbf3 	bl	12730 <memset>
  m_vol = vol;
    8f4a:	60a5      	str	r5, [r4, #8]
    8f4c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8f4e:	2b10      	cmp	r3, #16
    8f50:	d003      	beq.n	8f5a <FatFile::open(FatFile*, char const*, int)+0xb6>
    8f52:	2b20      	cmp	r3, #32
    8f54:	d022      	beq.n	8f9c <FatFile::open(FatFile*, char const*, int)+0xf8>
    8f56:	2b0c      	cmp	r3, #12
    8f58:	d1e8      	bne.n	8f2c <FatFile::open(FatFile*, char const*, int)+0x88>
    8f5a:	2220      	movs	r2, #32
    8f5c:	e01f      	b.n	8f9e <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    8f5e:	4643      	mov	r3, r8
    8f60:	aa0b      	add	r2, sp, #44	; 0x2c
    8f62:	f000 fecb 	bl	9cfc <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    8f66:	b014      	add	sp, #80	; 0x50
    8f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    8f6c:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    8f6e:	2224      	movs	r2, #36	; 0x24
    8f70:	2100      	movs	r1, #0
    8f72:	a802      	add	r0, sp, #8
    8f74:	f009 fbdc 	bl	12730 <memset>
  m_vol = vol;
    8f78:	9604      	str	r6, [sp, #16]
    8f7a:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    8f7c:	2b10      	cmp	r3, #16
    8f7e:	d003      	beq.n	8f88 <FatFile::open(FatFile*, char const*, int)+0xe4>
    8f80:	2b20      	cmp	r3, #32
    8f82:	d003      	beq.n	8f8c <FatFile::open(FatFile*, char const*, int)+0xe8>
    8f84:	2b0c      	cmp	r3, #12
    8f86:	d1d1      	bne.n	8f2c <FatFile::open(FatFile*, char const*, int)+0x88>
    8f88:	2320      	movs	r3, #32
    8f8a:	e000      	b.n	8f8e <FatFile::open(FatFile*, char const*, int)+0xea>
    8f8c:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8f8e:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    8f92:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    8f94:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    8f96:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    8f9a:	e799      	b.n	8ed0 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    8f9c:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    8f9e:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8fa0:	7022      	strb	r2, [r4, #0]
  return true;
    8fa2:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    8fa4:	70a3      	strb	r3, [r4, #2]
  return true;
    8fa6:	e7c2      	b.n	8f2e <FatFile::open(FatFile*, char const*, int)+0x8a>

00008fa8 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    8fa8:	b119      	cbz	r1, 8fb2 <FatFile::open(FatVolume*, char const*, int)+0xa>
    8faa:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    8fae:	f7ff bf79 	b.w	8ea4 <FatFile::open(FatFile*, char const*, int)>
}
    8fb2:	4608      	mov	r0, r1
    8fb4:	4770      	bx	lr
    8fb6:	bf00      	nop

00008fb8 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    8fb8:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    8fba:	b570      	push	{r4, r5, r6, lr}
    8fbc:	460d      	mov	r5, r1
    8fbe:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    8fc0:	b993      	cbnz	r3, 8fe8 <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    8fc2:	7806      	ldrb	r6, [r0, #0]
    8fc4:	b10e      	cbz	r6, 8fca <FatFile::openCluster(FatFile*)+0x12>
  return false;
    8fc6:	4618      	mov	r0, r3
}
    8fc8:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    8fca:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    8fcc:	2224      	movs	r2, #36	; 0x24
    8fce:	4631      	mov	r1, r6
    8fd0:	f009 fbae 	bl	12730 <memset>
  m_vol = vol;
    8fd4:	60a5      	str	r5, [r4, #8]
    8fd6:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8fd8:	2b10      	cmp	r3, #16
    8fda:	d018      	beq.n	900e <FatFile::openCluster(FatFile*)+0x56>
    8fdc:	2b20      	cmp	r3, #32
    8fde:	d010      	beq.n	9002 <FatFile::openCluster(FatFile*)+0x4a>
    8fe0:	2b0c      	cmp	r3, #12
    8fe2:	d014      	beq.n	900e <FatFile::openCluster(FatFile*)+0x56>
    8fe4:	4630      	mov	r0, r6
}
    8fe6:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    8fe8:	2224      	movs	r2, #36	; 0x24
    8fea:	2100      	movs	r1, #0
    8fec:	f009 fba0 	bl	12730 <memset>
  m_flags = FILE_FLAG_READ;
    8ff0:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    8ff2:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    8ff4:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    8ff6:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    8ff8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    8ffc:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    8ffe:	6223      	str	r3, [r4, #32]
}
    9000:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    9002:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    9004:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    9006:	7022      	strb	r2, [r4, #0]
  return true;
    9008:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    900a:	70a3      	strb	r3, [r4, #2]
}
    900c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    900e:	2220      	movs	r2, #32
    9010:	e7f8      	b.n	9004 <FatFile::openCluster(FatFile*)+0x4c>
    9012:	bf00      	nop

00009014 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    9014:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    9016:	7805      	ldrb	r5, [r0, #0]
    9018:	b10d      	cbz	r5, 901e <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    901a:	2000      	movs	r0, #0
}
    901c:	bd70      	pop	{r4, r5, r6, pc}
    901e:	460e      	mov	r6, r1
    9020:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    9022:	2224      	movs	r2, #36	; 0x24
    9024:	4629      	mov	r1, r5
    9026:	f009 fb83 	bl	12730 <memset>
  m_vol = vol;
    902a:	60a6      	str	r6, [r4, #8]
    902c:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    902e:	2b10      	cmp	r3, #16
    9030:	d00b      	beq.n	904a <FatFile::openRoot(FatVolume*)+0x36>
    9032:	2b20      	cmp	r3, #32
    9034:	d003      	beq.n	903e <FatFile::openRoot(FatVolume*)+0x2a>
    9036:	2b0c      	cmp	r3, #12
    9038:	d007      	beq.n	904a <FatFile::openRoot(FatVolume*)+0x36>
    903a:	4628      	mov	r0, r5
}
    903c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    903e:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    9040:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    9042:	7022      	strb	r2, [r4, #0]
  return true;
    9044:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    9046:	70a3      	strb	r3, [r4, #2]
}
    9048:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    904a:	2220      	movs	r2, #32
    904c:	e7f8      	b.n	9040 <FatFile::openRoot(FatVolume*)+0x2c>
    904e:	bf00      	nop

00009050 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    9050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9054:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const {return m_lfnOrd;}
  /** \return True if this is an open file/directory. */
  bool isOpen() const {return m_attributes;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    9058:	7883      	ldrb	r3, [r0, #2]
    905a:	b083      	sub	sp, #12
    905c:	4605      	mov	r5, r0
  if (!isReadable()) {
    905e:	07df      	lsls	r7, r3, #31
    9060:	f140 808c 	bpl.w	917c <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    9064:	4688      	mov	r8, r1
    9066:	7801      	ldrb	r1, [r0, #0]
    9068:	4692      	mov	sl, r2
  if (isFile()) {
    906a:	070e      	lsls	r6, r1, #28
    906c:	f100 8091 	bmi.w	9192 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    9070:	068c      	lsls	r4, r1, #26
    9072:	d508      	bpl.n	9086 <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    9074:	6883      	ldr	r3, [r0, #8]
    9076:	895a      	ldrh	r2, [r3, #10]
    9078:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    907a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    907e:	b29b      	uxth	r3, r3
    9080:	459a      	cmp	sl, r3
    9082:	bf28      	it	cs
    9084:	469a      	movcs	sl, r3
  while (toRead) {
    9086:	f1ba 0f00 	cmp.w	sl, #0
    908a:	f000 80af 	beq.w	91ec <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    908e:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    9090:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    9094:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    9096:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    9098:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    909c:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    90a0:	68af      	ldr	r7, [r5, #8]
    90a2:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    90a6:	d53d      	bpl.n	9124 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    90a8:	6a39      	ldr	r1, [r7, #32]
    90aa:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    90ae:	f1bb 0f00 	cmp.w	fp, #0
    90b2:	d151      	bne.n	9158 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    90b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    90b8:	d34e      	bcc.n	9158 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    90ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    90bc:	4291      	cmp	r1, r2
    90be:	d04b      	beq.n	9158 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    90c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    90c4:	f0c0 8082 	bcc.w	91cc <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    90c8:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    90ca:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    90cc:	0680      	lsls	r0, r0, #26
    90ce:	d405      	bmi.n	90dc <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    90d0:	7938      	ldrb	r0, [r7, #4]
    90d2:	eba0 0009 	sub.w	r0, r0, r9
    90d6:	4283      	cmp	r3, r0
    90d8:	bf28      	it	cs
    90da:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    90dc:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    90de:	ea4f 2443 	mov.w	r4, r3, lsl #9
    90e2:	d80c      	bhi.n	90fe <FatFile::read(void*, unsigned int)+0xae>
    90e4:	18c8      	adds	r0, r1, r3
    90e6:	4282      	cmp	r2, r0
    90e8:	d209      	bcs.n	90fe <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    90ea:	f107 0028 	add.w	r0, r7, #40	; 0x28
    90ee:	e9cd 1300 	strd	r1, r3, [sp]
    90f2:	f003 ff0b 	bl	cf0c <FsCache::sync()>
    90f6:	e9dd 1300 	ldrd	r1, r3, [sp]
    90fa:	2800      	cmp	r0, #0
    90fc:	d03e      	beq.n	917c <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    90fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9100:	6802      	ldr	r2, [r0, #0]
    9102:	6957      	ldr	r7, [r2, #20]
    9104:	4642      	mov	r2, r8
    9106:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    9108:	2800      	cmp	r0, #0
    910a:	d037      	beq.n	917c <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    910c:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    910e:	1b36      	subs	r6, r6, r4
    dst += n;
    9110:	44a0      	add	r8, r4
    m_curPosition += n;
    9112:	4422      	add	r2, r4
    9114:	616a      	str	r2, [r5, #20]
  while (toRead) {
    9116:	d069      	beq.n	91ec <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const {return m_attributes & FILE_ATTR_ROOT32;}
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    9118:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    911a:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    911e:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    9120:	0688      	lsls	r0, r1, #26
    9122:	d4c1      	bmi.n	90a8 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    9124:	f897 9005 	ldrb.w	r9, [r7, #5]
    9128:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    912c:	f1bb 0f00 	cmp.w	fp, #0
    9130:	d136      	bne.n	91a0 <FatFile::read(void*, unsigned int)+0x150>
    9132:	f1b9 0f00 	cmp.w	r9, #0
    9136:	d133      	bne.n	91a0 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    9138:	2a00      	cmp	r2, #0
    913a:	d133      	bne.n	91a4 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    913c:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    913e:	bf4c      	ite	mi
    9140:	6a3a      	ldrmi	r2, [r7, #32]
    9142:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    9144:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    9146:	3a02      	subs	r2, #2
    9148:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    914a:	6979      	ldr	r1, [r7, #20]
    914c:	4082      	lsls	r2, r0
    914e:	4449      	add	r1, r9
    9150:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    9152:	f1bb 0f00 	cmp.w	fp, #0
    9156:	d0ad      	beq.n	90b4 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    9158:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    915c:	2200      	movs	r2, #0
    915e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    9162:	42b4      	cmp	r4, r6
    9164:	bf28      	it	cs
    9166:	4634      	movcs	r4, r6
    9168:	f003 fefc 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    916c:	b130      	cbz	r0, 917c <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    916e:	eb00 010b 	add.w	r1, r0, fp
    9172:	4622      	mov	r2, r4
    9174:	4640      	mov	r0, r8
    9176:	f005 fa4d 	bl	e614 <memcpy>
    917a:	e7c7      	b.n	910c <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    917c:	786b      	ldrb	r3, [r5, #1]
  return -1;
    917e:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    9182:	f043 0302 	orr.w	r3, r3, #2
    9186:	706b      	strb	r3, [r5, #1]
}
    9188:	b003      	add	sp, #12
    918a:	ecbd 8b02 	vpop	{d8}
    918e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    9192:	69c3      	ldr	r3, [r0, #28]
    9194:	6942      	ldr	r2, [r0, #20]
    9196:	1a9b      	subs	r3, r3, r2
    9198:	459a      	cmp	sl, r3
    919a:	bf28      	it	cs
    919c:	469a      	movcs	sl, r3
    919e:	e772      	b.n	9086 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    91a0:	692a      	ldr	r2, [r5, #16]
    91a2:	e7d0      	b.n	9146 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    91a4:	070b      	lsls	r3, r1, #28
    91a6:	d505      	bpl.n	91b4 <FatFile::read(void*, unsigned int)+0x164>
    91a8:	78aa      	ldrb	r2, [r5, #2]
    91aa:	0654      	lsls	r4, r2, #25
    91ac:	d502      	bpl.n	91b4 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    91ae:	692a      	ldr	r2, [r5, #16]
    91b0:	3201      	adds	r2, #1
    91b2:	e7c7      	b.n	9144 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    91b4:	ee18 2a10 	vmov	r2, s16
    91b8:	4638      	mov	r0, r7
    91ba:	6929      	ldr	r1, [r5, #16]
    91bc:	f001 fa8c 	bl	a6d8 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    91c0:	2800      	cmp	r0, #0
    91c2:	dbdb      	blt.n	917c <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    91c4:	d00c      	beq.n	91e0 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    91c6:	68af      	ldr	r7, [r5, #8]
    91c8:	692a      	ldr	r2, [r5, #16]
    91ca:	e7bc      	b.n	9146 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    91cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    91ce:	4642      	mov	r2, r8
    91d0:	6803      	ldr	r3, [r0, #0]
    91d2:	691b      	ldr	r3, [r3, #16]
    91d4:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    91d6:	2800      	cmp	r0, #0
    91d8:	d0d0      	beq.n	917c <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    91da:	f44f 7400 	mov.w	r4, #512	; 0x200
    91de:	e795      	b.n	910c <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    91e0:	782b      	ldrb	r3, [r5, #0]
    91e2:	f013 0f70 	tst.w	r3, #112	; 0x70
    91e6:	d0c9      	beq.n	917c <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    91e8:	ebaa 0a06 	sub.w	sl, sl, r6
    91ec:	4650      	mov	r0, sl
}
    91ee:	b003      	add	sp, #12
    91f0:	ecbd 8b02 	vpop	{d8}
    91f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000091f8 <FatFile::peek()>:
int FatFile::peek() {
    91f8:	b570      	push	{r4, r5, r6, lr}
    91fa:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    91fc:	2201      	movs	r2, #1
    91fe:	4604      	mov	r4, r0
    9200:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    9204:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    9208:	f7ff ff22 	bl	9050 <FatFile::read(void*, unsigned int)>
    920c:	2801      	cmp	r0, #1
    920e:	bf0c      	ite	eq
    9210:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    9214:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    9218:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    921c:	b002      	add	sp, #8
    921e:	bd70      	pop	{r4, r5, r6, pc}

00009220 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    9220:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    9222:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    9226:	b530      	push	{r4, r5, lr}
    9228:	4604      	mov	r4, r0
    922a:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    922c:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    9230:	d009      	beq.n	9246 <FatFile::readDirCache(bool)+0x26>
    9232:	2901      	cmp	r1, #1
    9234:	d107      	bne.n	9246 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    9236:	3320      	adds	r3, #32
    9238:	6143      	str	r3, [r0, #20]
    return m_buffer;
    923a:	68a0      	ldr	r0, [r4, #8]
    923c:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    923e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    9242:	b003      	add	sp, #12
    9244:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    9246:	2201      	movs	r2, #1
    9248:	f10d 0107 	add.w	r1, sp, #7
    924c:	4620      	mov	r0, r4
    924e:	f7ff feff 	bl	9050 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    9252:	b240      	sxtb	r0, r0
    9254:	2801      	cmp	r0, #1
    9256:	d103      	bne.n	9260 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    9258:	6963      	ldr	r3, [r4, #20]
    925a:	331f      	adds	r3, #31
    925c:	6163      	str	r3, [r4, #20]
    925e:	e7ec      	b.n	923a <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    9260:	2000      	movs	r0, #0
    9262:	e7ee      	b.n	9242 <FatFile::readDirCache(bool)+0x22>

00009264 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    9264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    9268:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    926a:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    926c:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    926e:	f013 0f18 	tst.w	r3, #24
    9272:	9608      	str	r6, [sp, #32]
    9274:	9611      	str	r6, [sp, #68]	; 0x44
    9276:	d006      	beq.n	9286 <FatFile::rename(FatFile*, char const*)+0x22>
    9278:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    927a:	6883      	ldr	r3, [r0, #8]
    927c:	688a      	ldr	r2, [r1, #8]
    927e:	4604      	mov	r4, r0
    9280:	460d      	mov	r5, r1
    9282:	429a      	cmp	r2, r3
    9284:	d003      	beq.n	928e <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    9286:	2000      	movs	r0, #0
}
    9288:	b01a      	add	sp, #104	; 0x68
    928a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    928e:	f7ff fbc3 	bl	8a18 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    9292:	46a6      	mov	lr, r4
    9294:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    9298:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    929c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    92a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    92a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    92a8:	f8de 3000 	ldr.w	r3, [lr]
    92ac:	4632      	mov	r2, r6
    92ae:	69a1      	ldr	r1, [r4, #24]
    92b0:	f8cc 3000 	str.w	r3, [ip]
    92b4:	68a3      	ldr	r3, [r4, #8]
    92b6:	f103 0028 	add.w	r0, r3, #40	; 0x28
    92ba:	f003 fe53 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    92be:	2800      	cmp	r0, #0
    92c0:	d0e1      	beq.n	9286 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    92c2:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    92c4:	46ec      	mov	ip, sp
  if (isFile()) {
    92c6:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    92ca:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    92ce:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    92d2:	0152      	lsls	r2, r2, #5
    92d4:	f8de 1004 	ldr.w	r1, [lr, #4]
    92d8:	5880      	ldr	r0, [r0, r2]
    92da:	f8de 300c 	ldr.w	r3, [lr, #12]
    92de:	f8de 2008 	ldr.w	r2, [lr, #8]
    92e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    92e6:	f8de 1014 	ldr.w	r1, [lr, #20]
    92ea:	f8de 2018 	ldr.w	r2, [lr, #24]
    92ee:	f8de 301c 	ldr.w	r3, [lr, #28]
    92f2:	f8de 0010 	ldr.w	r0, [lr, #16]
    92f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    92fa:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    92fe:	463a      	mov	r2, r7
    9300:	4629      	mov	r1, r5
  if (isFile()) {
    9302:	f040 809b 	bne.w	943c <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    9306:	a808      	add	r0, sp, #32
    9308:	f7ff fd56 	bl	8db8 <FatFile::mkdir(FatFile*, char const*, bool)>
    930c:	2800      	cmp	r0, #0
    930e:	d0ba      	beq.n	9286 <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    9310:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    9312:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    9316:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    9318:	990e      	ldr	r1, [sp, #56]	; 0x38
    931a:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    931c:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    931e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9322:	68a0      	ldr	r0, [r4, #8]
    9324:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    9326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9328:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    932a:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    932c:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    932e:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    9332:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    9336:	f003 fe15 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    933a:	2800      	cmp	r0, #0
    933c:	d0a3      	beq.n	9286 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    933e:	88a3      	ldrh	r3, [r4, #4]
    9340:	f003 030f 	and.w	r3, r3, #15
    9344:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    9348:	f8dd 300d 	ldr.w	r3, [sp, #13]
    934c:	f8c0 300d 	str.w	r3, [r0, #13]
    9350:	f8dd 3011 	ldr.w	r3, [sp, #17]
    9354:	f8c0 3011 	str.w	r3, [r0, #17]
    9358:	f8dd 3015 	ldr.w	r3, [sp, #21]
    935c:	f8c0 3015 	str.w	r3, [r0, #21]
    9360:	f8dd 3019 	ldr.w	r3, [sp, #25]
    9364:	f8c0 3019 	str.w	r3, [r0, #25]
    9368:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    936c:	f8a0 301d 	strh.w	r3, [r0, #29]
    9370:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9374:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    9376:	f89d 300b 	ldrb.w	r3, [sp, #11]
    937a:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    937c:	2e00      	cmp	r6, #0
    937e:	d03b      	beq.n	93f8 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    9380:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    9382:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    9384:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    9386:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    9388:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    938a:	408b      	lsls	r3, r1
    938c:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    9390:	4419      	add	r1, r3
    9392:	f003 fde7 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    9396:	4605      	mov	r5, r0
    9398:	2800      	cmp	r0, #0
    939a:	f43f af74 	beq.w	9286 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    939e:	6a00      	ldr	r0, [r0, #32]
    93a0:	466f      	mov	r7, sp
    93a2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    93a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    93a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    93a8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    93aa:	6b28      	ldr	r0, [r5, #48]	; 0x30
    93ac:	6b69      	ldr	r1, [r5, #52]	; 0x34
    93ae:	6baa      	ldr	r2, [r5, #56]	; 0x38
    93b0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    93b2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    93b4:	4631      	mov	r1, r6
    93b6:	68a0      	ldr	r0, [r4, #8]
    93b8:	f001 f9a0 	bl	a6fc <FatPartition::freeChain(unsigned long)>
    93bc:	2800      	cmp	r0, #0
    93be:	f43f af62 	beq.w	9286 <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    93c2:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    93c4:	6a23      	ldr	r3, [r4, #32]
    93c6:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    93c8:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    93ca:	3b02      	subs	r3, #2
    93cc:	f850 1c14 	ldr.w	r1, [r0, #-20]
    93d0:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    93d2:	2201      	movs	r2, #1
    93d4:	4419      	add	r1, r3
    93d6:	f003 fdc5 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    93da:	4606      	mov	r6, r0
    93dc:	2800      	cmp	r0, #0
    93de:	f43f af52 	beq.w	9286 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    93e2:	466d      	mov	r5, sp
    93e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    93e6:	6230      	str	r0, [r6, #32]
    93e8:	6271      	str	r1, [r6, #36]	; 0x24
    93ea:	62b2      	str	r2, [r6, #40]	; 0x28
    93ec:	62f3      	str	r3, [r6, #44]	; 0x2c
    93ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    93f0:	6330      	str	r0, [r6, #48]	; 0x30
    93f2:	6371      	str	r1, [r6, #52]	; 0x34
    93f4:	63b2      	str	r2, [r6, #56]	; 0x38
    93f6:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    93f8:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    93fa:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    93fc:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    93fe:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    9400:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    9402:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    9406:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    940a:	f000 fe2d 	bl	a068 <FatFile::remove()>
    940e:	2800      	cmp	r0, #0
    9410:	f43f af39 	beq.w	9286 <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    9414:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9416:	f104 0028 	add.w	r0, r4, #40	; 0x28
    941a:	f003 fd77 	bl	cf0c <FsCache::sync()>
    941e:	2800      	cmp	r0, #0
    9420:	f43f af31 	beq.w	9286 <FatFile::rename(FatFile*, char const*)+0x22>
    9424:	f504 700e 	add.w	r0, r4, #568	; 0x238
    9428:	f003 fd70 	bl	cf0c <FsCache::sync()>
    942c:	2800      	cmp	r0, #0
    942e:	f43f af2a 	beq.w	9286 <FatFile::rename(FatFile*, char const*)+0x22>
    9432:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    9434:	6803      	ldr	r3, [r0, #0]
    9436:	6a1b      	ldr	r3, [r3, #32]
    9438:	4798      	blx	r3
    943a:	e725      	b.n	9288 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    943c:	f640 2301 	movw	r3, #2561	; 0xa01
    9440:	4660      	mov	r0, ip
    9442:	f7ff fd2f 	bl	8ea4 <FatFile::open(FatFile*, char const*, int)>
    9446:	2800      	cmp	r0, #0
    9448:	f47f af63 	bne.w	9312 <FatFile::rename(FatFile*, char const*)+0xae>
    944c:	e71b      	b.n	9286 <FatFile::rename(FatFile*, char const*)+0x22>
    944e:	bf00      	nop

00009450 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    9450:	7803      	ldrb	r3, [r0, #0]
    9452:	06da      	lsls	r2, r3, #27
    9454:	d401      	bmi.n	945a <FatFile::rmdir()+0xa>
}
    9456:	2000      	movs	r0, #0
    9458:	4770      	bx	lr
  if (pos == m_curPosition) {
    945a:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    945c:	b530      	push	{r4, r5, lr}
    945e:	4604      	mov	r4, r0
    9460:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    9462:	b133      	cbz	r3, 9472 <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9464:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    9466:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9468:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    946c:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9470:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    9472:	2300      	movs	r3, #0
    9474:	e00f      	b.n	9496 <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    9476:	6163      	str	r3, [r4, #20]
    9478:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    947a:	016a      	lsls	r2, r5, #5
    947c:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    947e:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    9480:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    9484:	b1ea      	cbz	r2, 94c2 <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    9486:	2ae5      	cmp	r2, #229	; 0xe5
    9488:	d004      	beq.n	9494 <FatFile::rmdir()+0x44>
    948a:	2a2e      	cmp	r2, #46	; 0x2e
    948c:	d002      	beq.n	9494 <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    948e:	7adb      	ldrb	r3, [r3, #11]
    9490:	071b      	lsls	r3, r3, #28
    9492:	d522      	bpl.n	94da <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    9494:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    9496:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    949a:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    949e:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    94a2:	d1e8      	bne.n	9476 <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    94a4:	2201      	movs	r2, #1
    94a6:	f10d 0107 	add.w	r1, sp, #7
    94aa:	4620      	mov	r0, r4
    94ac:	f7ff fdd0 	bl	9050 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    94b0:	b240      	sxtb	r0, r0
    94b2:	2801      	cmp	r0, #1
    94b4:	d103      	bne.n	94be <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    94b6:	6963      	ldr	r3, [r4, #20]
    94b8:	331f      	adds	r3, #31
    94ba:	6163      	str	r3, [r4, #20]
    94bc:	e7dc      	b.n	9478 <FatFile::rmdir()+0x28>
      if (!getError()) {
    94be:	7863      	ldrb	r3, [r4, #1]
    94c0:	b95b      	cbnz	r3, 94da <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    94c2:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    94c4:	2208      	movs	r2, #8
  return remove();
    94c6:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    94c8:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    94cc:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    94ce:	70a3      	strb	r3, [r4, #2]
}
    94d0:	b003      	add	sp, #12
    94d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    94d6:	f000 bdc7 	b.w	a068 <FatFile::remove()>
}
    94da:	2000      	movs	r0, #0
    94dc:	b003      	add	sp, #12
    94de:	bd30      	pop	{r4, r5, pc}

000094e0 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    94e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    94e4:	7803      	ldrb	r3, [r0, #0]
    94e6:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    94e8:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    94ea:	2b00      	cmp	r3, #0
    94ec:	d039      	beq.n	9562 <FatFile::seekSet(unsigned long)+0x82>
    94ee:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    94f0:	6941      	ldr	r1, [r0, #20]
    94f2:	42a9      	cmp	r1, r5
    94f4:	d042      	beq.n	957c <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    94f6:	2d00      	cmp	r5, #0
    94f8:	d037      	beq.n	956a <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    94fa:	0718      	lsls	r0, r3, #28
    94fc:	d52a      	bpl.n	9554 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    94fe:	69e2      	ldr	r2, [r4, #28]
    9500:	42aa      	cmp	r2, r5
    9502:	d32e      	bcc.n	9562 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    9504:	f8d4 c008 	ldr.w	ip, [r4, #8]
    9508:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    950a:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    950c:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    9510:	f012 0f40 	tst.w	r2, #64	; 0x40
    9514:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    9518:	b2c0      	uxtb	r0, r0
    951a:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    951e:	d130      	bne.n	9582 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    9520:	1e4a      	subs	r2, r1, #1
    9522:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    9524:	b109      	cbz	r1, 952a <FatFile::seekSet(unsigned long)+0x4a>
    9526:	4296      	cmp	r6, r2
    9528:	d22f      	bcs.n	958a <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    952a:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    952c:	bf4c      	ite	mi
    952e:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    9532:	6a23      	ldrpl	r3, [r4, #32]
    9534:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    9536:	f104 0810 	add.w	r8, r4, #16
    953a:	e006      	b.n	954a <FatFile::seekSet(unsigned long)+0x6a>
    953c:	6921      	ldr	r1, [r4, #16]
    953e:	3e01      	subs	r6, #1
    9540:	68a0      	ldr	r0, [r4, #8]
    9542:	f001 f8c9 	bl	a6d8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    9546:	2800      	cmp	r0, #0
    9548:	dd0b      	ble.n	9562 <FatFile::seekSet(unsigned long)+0x82>
    954a:	4642      	mov	r2, r8
  while (nNew--) {
    954c:	2e00      	cmp	r6, #0
    954e:	d1f5      	bne.n	953c <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9550:	78a2      	ldrb	r2, [r4, #2]
    9552:	e00c      	b.n	956e <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    9554:	069a      	lsls	r2, r3, #26
    9556:	d5d5      	bpl.n	9504 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    9558:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    955a:	895b      	ldrh	r3, [r3, #10]
    955c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    9560:	d9f6      	bls.n	9550 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    9562:	2000      	movs	r0, #0
  m_curCluster = tmp;
    9564:	6127      	str	r7, [r4, #16]
}
    9566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    956a:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    956c:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    956e:	f022 0220 	bic.w	r2, r2, #32
  return true;
    9572:	2001      	movs	r0, #1
  m_curPosition = pos;
    9574:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9576:	70a2      	strb	r2, [r4, #2]
}
    9578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    957c:	2001      	movs	r0, #1
}
    957e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    9582:	6a23      	ldr	r3, [r4, #32]
    9584:	4433      	add	r3, r6
    9586:	6123      	str	r3, [r4, #16]
    goto done;
    9588:	e7f1      	b.n	956e <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    958a:	1ab6      	subs	r6, r6, r2
    958c:	e7d3      	b.n	9536 <FatFile::seekSet(unsigned long)+0x56>
    958e:	bf00      	nop

00009590 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    9590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9594:	460e      	mov	r6, r1
    9596:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    9598:	2100      	movs	r1, #0
    959a:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    959c:	4604      	mov	r4, r0
    959e:	4698      	mov	r8, r3
    95a0:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    95a4:	f009 f8c4 	bl	12730 <memset>
  m_vol = dirFile->m_vol;
    95a8:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    95aa:	6a33      	ldr	r3, [r6, #32]
    95ac:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    95b0:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    95b2:	f005 050f 	and.w	r5, r5, #15
    95b6:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    95ba:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    95be:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    95c0:	070b      	lsls	r3, r1, #28
    95c2:	d411      	bmi.n	95e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    95c4:	f001 0117 	and.w	r1, r1, #23
    95c8:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    95ca:	7ad3      	ldrb	r3, [r2, #11]
    95cc:	f013 0f18 	tst.w	r3, #24
    95d0:	d102      	bne.n	95d8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    95d2:	f041 0108 	orr.w	r1, r1, #8
    95d6:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    95d8:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    95dc:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    95de:	2b01      	cmp	r3, #1
    95e0:	d038      	beq.n	9654 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    95e2:	2b02      	cmp	r3, #2
    95e4:	d006      	beq.n	95f4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    95e6:	b1f3      	cbz	r3, 9626 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    95e8:	2300      	movs	r3, #0
  return false;
    95ea:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    95ec:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    95ee:	70a3      	strb	r3, [r4, #2]
}
    95f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    95f4:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    95f6:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    95f8:	06cd      	lsls	r5, r1, #27
    95fa:	d4f5      	bmi.n	95e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    95fc:	07ce      	lsls	r6, r1, #31
    95fe:	d4f3      	bmi.n	95e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    9600:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    9604:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    9608:	ea43 0301 	orr.w	r3, r3, r1
    960c:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    960e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    9610:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    9612:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    9614:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    9616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    961a:	d012      	beq.n	9642 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    961c:	bb19      	cbnz	r1, 9666 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    961e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9622:	70a3      	strb	r3, [r4, #2]
    9624:	e010      	b.n	9648 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    9626:	f418 6f80 	tst.w	r8, #1024	; 0x400
    962a:	d1dd      	bne.n	95e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    962c:	f008 0308 	and.w	r3, r8, #8
    9630:	f043 0301 	orr.w	r3, r3, #1
    9634:	70a3      	strb	r3, [r4, #2]
    9636:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    9638:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    963a:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    963c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    963e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    9642:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    9644:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    9646:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    9648:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    964c:	d104      	bne.n	9658 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    964e:	2001      	movs	r0, #1
}
    9650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    9654:	2302      	movs	r3, #2
    9656:	e7ce      	b.n	95f6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    9658:	69e1      	ldr	r1, [r4, #28]
    965a:	4620      	mov	r0, r4
    965c:	f7ff ff40 	bl	94e0 <FatFile::seekSet(unsigned long)>
    9660:	2800      	cmp	r0, #0
    9662:	d1f4      	bne.n	964e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    9664:	e7c0      	b.n	95e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    9666:	f001 f849 	bl	a6fc <FatPartition::freeChain(unsigned long)>
    966a:	2800      	cmp	r0, #0
    966c:	d0bc      	beq.n	95e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    966e:	78a3      	ldrb	r3, [r4, #2]
    9670:	e7d5      	b.n	961e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    9672:	bf00      	nop

00009674 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
    9674:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    9676:	2b00      	cmp	r3, #0
    9678:	d145      	bne.n	9706 <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    967a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    967e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    9680:	b084      	sub	sp, #16
    9682:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    9684:	f013 0f70 	tst.w	r3, #112	; 0x70
    9688:	d030      	beq.n	96ec <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
    968a:	694b      	ldr	r3, [r1, #20]
    968c:	f013 051f 	ands.w	r5, r3, #31
    9690:	d12c      	bne.n	96ec <FatFile::openNext(FatFile*, int)+0x78>
    9692:	4606      	mov	r6, r0
    9694:	4690      	mov	r8, r2
    9696:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
    9698:	2201      	movs	r2, #1
    969a:	f10d 010f 	add.w	r1, sp, #15
    969e:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    96a0:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
    96a4:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    96a6:	f7ff fcd3 	bl	9050 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    96aa:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    96ac:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
    96b0:	2801      	cmp	r0, #1
    96b2:	d11b      	bne.n	96ec <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    96b4:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
    96b6:	68a1      	ldr	r1, [r4, #8]
    96b8:	331f      	adds	r3, #31
    96ba:	f101 0c38 	add.w	ip, r1, #56	; 0x38
    96be:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    96c0:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    96c4:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    96c8:	b182      	cbz	r2, 96ec <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    96ca:	2a2e      	cmp	r2, #46	; 0x2e
    96cc:	d012      	beq.n	96f4 <FatFile::openNext(FatFile*, int)+0x80>
    96ce:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
    96d2:	fab0 f080 	clz	r0, r0
    96d6:	0940      	lsrs	r0, r0, #5
    96d8:	b960      	cbnz	r0, 96f4 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    96da:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
    96de:	f011 0e08 	ands.w	lr, r1, #8
    96e2:	d012      	beq.n	970a <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
    96e4:	290f      	cmp	r1, #15
    96e6:	d007      	beq.n	96f8 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    96e8:	4605      	mov	r5, r0
    96ea:	e7d5      	b.n	9698 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    96ec:	2000      	movs	r0, #0
}
    96ee:	b004      	add	sp, #16
    96f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    96f4:	2500      	movs	r5, #0
    96f6:	e7cf      	b.n	9698 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    96f8:	0651      	lsls	r1, r2, #25
    96fa:	d5cd      	bpl.n	9698 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    96fc:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
    9700:	f89c 900d 	ldrb.w	r9, [ip, #13]
    9704:	e7c8      	b.n	9698 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    9706:	2000      	movs	r0, #0
}
    9708:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    970a:	b185      	cbz	r5, 972e <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    970c:	f10c 010a 	add.w	r1, ip, #10
    9710:	e001      	b.n	9716 <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9712:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    9716:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    971a:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    971c:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
    9720:	fa52 f383 	uxtab	r3, r2, r3
    9724:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    9728:	d1f3      	bne.n	9712 <FatFile::openNext(FatFile*, int)+0x9e>
    972a:	45ce      	cmp	lr, r9
    972c:	d1de      	bne.n	96ec <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    972e:	4643      	mov	r3, r8
    9730:	b2ba      	uxth	r2, r7
    9732:	4621      	mov	r1, r4
    9734:	4630      	mov	r0, r6
    9736:	9500      	str	r5, [sp, #0]
    9738:	f7ff ff2a 	bl	9590 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    973c:	e7d7      	b.n	96ee <FatFile::openNext(FatFile*, int)+0x7a>
    973e:	bf00      	nop

00009740 <FatFile::sync()>:
  if (!isOpen()) {
    9740:	7803      	ldrb	r3, [r0, #0]
    9742:	b10b      	cbz	r3, 9748 <FatFile::sync()+0x8>
    9744:	f7ff b968 	b.w	8a18 <FatFile::sync() [clone .part.0]>
}
    9748:	2001      	movs	r0, #1
    974a:	4770      	bx	lr

0000974c <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    974c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    9750:	7883      	ldrb	r3, [r0, #2]
    9752:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    9754:	079c      	lsls	r4, r3, #30
    9756:	d577      	bpl.n	9848 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    9758:	4688      	mov	r8, r1
    975a:	0719      	lsls	r1, r3, #28
    975c:	4691      	mov	r9, r2
    975e:	f100 80b5 	bmi.w	98cc <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    9762:	696b      	ldr	r3, [r5, #20]
    9764:	eb13 0209 	adds.w	r2, r3, r9
    9768:	d26e      	bcs.n	9848 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    976a:	f1b9 0f00 	cmp.w	r9, #0
    976e:	d040      	beq.n	97f2 <FatFile::write(void const*, unsigned int)+0xa6>
    9770:	464f      	mov	r7, r9
    m_status = 0;
    9772:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    9776:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    9778:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    977c:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    977e:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    9780:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    9784:	d13f      	bne.n	9806 <FatFile::write(void const*, unsigned int)+0xba>
    9786:	2e00      	cmp	r6, #0
    9788:	d13d      	bne.n	9806 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    978a:	2900      	cmp	r1, #0
    978c:	d06e      	beq.n	986c <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    978e:	78aa      	ldrb	r2, [r5, #2]
    9790:	0652      	lsls	r2, r2, #25
    9792:	d576      	bpl.n	9882 <FatFile::write(void const*, unsigned int)+0x136>
    9794:	69ea      	ldr	r2, [r5, #28]
    9796:	429a      	cmp	r2, r3
    9798:	d973      	bls.n	9882 <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    979a:	3101      	adds	r1, #1
    979c:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    979e:	3902      	subs	r1, #2
    97a0:	7982      	ldrb	r2, [r0, #6]
    97a2:	6943      	ldr	r3, [r0, #20]
    97a4:	4091      	lsls	r1, r2
    97a6:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    97a8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    97ac:	d353      	bcc.n	9856 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    97ae:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    97b2:	d370      	bcc.n	9896 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    97b4:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    97b6:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    97b8:	1b1b      	subs	r3, r3, r4
    97ba:	4293      	cmp	r3, r2
    97bc:	bf28      	it	cs
    97be:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    97c0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    97c2:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    97c4:	ea4f 2443 	mov.w	r4, r3, lsl #9
    97c8:	d307      	bcc.n	97da <FatFile::write(void const*, unsigned int)+0x8e>
    97ca:	185e      	adds	r6, r3, r1
    97cc:	42b2      	cmp	r2, r6
    97ce:	d204      	bcs.n	97da <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    97d0:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    97d4:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    97d8:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    97da:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    97dc:	4642      	mov	r2, r8
    97de:	6806      	ldr	r6, [r0, #0]
    97e0:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    97e2:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    97e4:	b380      	cbz	r0, 9848 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    97e6:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    97e8:	1b3f      	subs	r7, r7, r4
    src += n;
    97ea:	44a0      	add	r8, r4
    m_curPosition += n;
    97ec:	4423      	add	r3, r4
    97ee:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    97f0:	d1c1      	bne.n	9776 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    97f2:	69ea      	ldr	r2, [r5, #28]
    97f4:	429a      	cmp	r2, r3
    97f6:	d276      	bcs.n	98e6 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    97f8:	78aa      	ldrb	r2, [r5, #2]
    97fa:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    97fc:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    97fe:	f062 037f 	orn	r3, r2, #127	; 0x7f
    9802:	70ab      	strb	r3, [r5, #2]
    9804:	e025      	b.n	9852 <FatFile::write(void const*, unsigned int)+0x106>
    9806:	7982      	ldrb	r2, [r0, #6]
    9808:	3902      	subs	r1, #2
    980a:	6943      	ldr	r3, [r0, #20]
    980c:	4091      	lsls	r1, r2
    980e:	4419      	add	r1, r3
                      + sectorOfCluster;
    9810:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    9812:	2e00      	cmp	r6, #0
    9814:	d0c8      	beq.n	97a8 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    9816:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    981a:	2201      	movs	r2, #1
    981c:	42bc      	cmp	r4, r7
    981e:	bf28      	it	cs
    9820:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    9822:	3028      	adds	r0, #40	; 0x28
    9824:	f003 fb9e 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9828:	b170      	cbz	r0, 9848 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    982a:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    982c:	4426      	add	r6, r4
      memcpy(dst, src, n);
    982e:	4622      	mov	r2, r4
    9830:	4641      	mov	r1, r8
    9832:	f004 feef 	bl	e614 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    9836:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    983a:	68a8      	ldr	r0, [r5, #8]
    983c:	d1d3      	bne.n	97e6 <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    983e:	3028      	adds	r0, #40	; 0x28
    9840:	f003 fb64 	bl	cf0c <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    9844:	2800      	cmp	r0, #0
    9846:	d1ce      	bne.n	97e6 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    9848:	786b      	ldrb	r3, [r5, #1]
  return 0;
    984a:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    984c:	f043 0301 	orr.w	r3, r3, #1
    9850:	706b      	strb	r3, [r5, #1]
}
    9852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    9856:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    985a:	696a      	ldr	r2, [r5, #20]
    985c:	69eb      	ldr	r3, [r5, #28]
    985e:	42bc      	cmp	r4, r7
    9860:	bf28      	it	cs
    9862:	463c      	movcs	r4, r7
    9864:	429a      	cmp	r2, r3
    9866:	d305      	bcc.n	9874 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    9868:	2205      	movs	r2, #5
    986a:	e7da      	b.n	9822 <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    986c:	6a29      	ldr	r1, [r5, #32]
    986e:	b321      	cbz	r1, 98ba <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    9870:	6129      	str	r1, [r5, #16]
    9872:	e794      	b.n	979e <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    9874:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    9876:	f013 0f20 	tst.w	r3, #32
    987a:	bf14      	ite	ne
    987c:	2205      	movne	r2, #5
    987e:	2201      	moveq	r2, #1
    9880:	e7cf      	b.n	9822 <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    9882:	f105 0210 	add.w	r2, r5, #16
    9886:	f000 ff27 	bl	a6d8 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    988a:	2800      	cmp	r0, #0
    988c:	dbdc      	blt.n	9848 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    988e:	d024      	beq.n	98da <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    9890:	68a8      	ldr	r0, [r5, #8]
    9892:	6929      	ldr	r1, [r5, #16]
    9894:	e783      	b.n	979e <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    9896:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9898:	428b      	cmp	r3, r1
    989a:	d104      	bne.n	98a6 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    989c:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    98a0:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    98a4:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    98a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    98a8:	4642      	mov	r2, r8
    98aa:	6803      	ldr	r3, [r0, #0]
    98ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    98ae:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    98b0:	2800      	cmp	r0, #0
    98b2:	d0c9      	beq.n	9848 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    98b4:	f44f 7400 	mov.w	r4, #512	; 0x200
    98b8:	e795      	b.n	97e6 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    98ba:	4628      	mov	r0, r5
    98bc:	f7ff f906 	bl	8acc <FatFile::addCluster()>
    98c0:	2800      	cmp	r0, #0
    98c2:	d0c1      	beq.n	9848 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    98c4:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    98c6:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    98c8:	6229      	str	r1, [r5, #32]
    98ca:	e768      	b.n	979e <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    98cc:	69c1      	ldr	r1, [r0, #28]
    98ce:	f7ff fe07 	bl	94e0 <FatFile::seekSet(unsigned long)>
    98d2:	2800      	cmp	r0, #0
    98d4:	f47f af45 	bne.w	9762 <FatFile::write(void const*, unsigned int)+0x16>
    98d8:	e7b6      	b.n	9848 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    98da:	4628      	mov	r0, r5
    98dc:	f7ff f8f6 	bl	8acc <FatFile::addCluster()>
    98e0:	2800      	cmp	r0, #0
    98e2:	d1d5      	bne.n	9890 <FatFile::write(void const*, unsigned int)+0x144>
    98e4:	e7b0      	b.n	9848 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    98e6:	4b05      	ldr	r3, [pc, #20]	; (98fc <FatFile::write(void const*, unsigned int)+0x1b0>)
    98e8:	681b      	ldr	r3, [r3, #0]
    98ea:	b12b      	cbz	r3, 98f8 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    98ec:	78ab      	ldrb	r3, [r5, #2]
    98ee:	4648      	mov	r0, r9
    98f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    98f4:	70ab      	strb	r3, [r5, #2]
    98f6:	e7ac      	b.n	9852 <FatFile::write(void const*, unsigned int)+0x106>
    98f8:	4648      	mov	r0, r9
    98fa:	e7aa      	b.n	9852 <FatFile::write(void const*, unsigned int)+0x106>
    98fc:	20015130 	.word	0x20015130

00009900 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    9900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    9904:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    9906:	b08d      	sub	sp, #52	; 0x34
    9908:	4614      	mov	r4, r2
    next = begin;
    990a:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    990c:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    990e:	4606      	mov	r6, r0
    9910:	4689      	mov	r9, r1
  FatFile dir = *this;
    9912:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9914:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    9916:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    991a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    991e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    9920:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    9924:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    9926:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    992a:	6065      	str	r5, [r4, #4]
    992c:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    992e:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    9930:	f8a4 e00c 	strh.w	lr, [r4, #12]
    9934:	2b00      	cmp	r3, #0
    9936:	d03f      	beq.n	99b8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    9938:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    993c:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9940:	a803      	add	r0, sp, #12
    9942:	b289      	uxth	r1, r1
    9944:	0149      	lsls	r1, r1, #5
    9946:	f7ff fdcb 	bl	94e0 <FatFile::seekSet(unsigned long)>
    994a:	b350      	cbz	r0, 99a2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    994c:	2100      	movs	r1, #0
    994e:	a803      	add	r0, sp, #12
    9950:	f7ff fc66 	bl	9220 <FatFile::readDirCache(bool)>
    if (!ldir) {
    9954:	4607      	mov	r7, r0
    9956:	b320      	cbz	r0, 99a2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    9958:	2500      	movs	r5, #0
    995a:	e00d      	b.n	9978 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    995c:	f003 fb2a 	bl	cfb4 <FsName::get16()>
    9960:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    9962:	4658      	mov	r0, fp
    9964:	f003 fbea 	bl	d13c <toUpcase(unsigned short)>
    9968:	4683      	mov	fp, r0
    996a:	4640      	mov	r0, r8
    996c:	f003 fbe6 	bl	d13c <toUpcase(unsigned short)>
    9970:	4583      	cmp	fp, r0
    9972:	d116      	bne.n	99a2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    9974:	2d0d      	cmp	r5, #13
    9976:	d018      	beq.n	99aa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    9978:	b2ea      	uxtb	r2, r5
    997a:	4639      	mov	r1, r7
    997c:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    997e:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    9980:	f000 fc18 	bl	a1b4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    9984:	89a3      	ldrh	r3, [r4, #12]
    9986:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    9988:	4620      	mov	r0, r4
    998a:	2b00      	cmp	r3, #0
    998c:	d1e6      	bne.n	995c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    998e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    9992:	4293      	cmp	r3, r2
    9994:	d1e2      	bne.n	995c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    9996:	fabb f08b 	clz	r0, fp
    999a:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    999c:	b00d      	add	sp, #52	; 0x34
    999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    99a2:	2000      	movs	r0, #0
}
    99a4:	b00d      	add	sp, #52	; 0x34
    99a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    99aa:	f10a 0a01 	add.w	sl, sl, #1
    99ae:	9b01      	ldr	r3, [sp, #4]
    99b0:	fa5f fa8a 	uxtb.w	sl, sl
    99b4:	4553      	cmp	r3, sl
    99b6:	d2c1      	bcs.n	993c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    99b8:	2001      	movs	r0, #1
    99ba:	e7ef      	b.n	999c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

000099bc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    99bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    99c0:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    99c2:	b08d      	sub	sp, #52	; 0x34
    99c4:	4616      	mov	r6, r2
    99c6:	469a      	mov	sl, r3
  FatFile dir = *this;
    99c8:	f10d 0c0c 	add.w	ip, sp, #12
    99cc:	f102 0415 	add.w	r4, r2, #21
    99d0:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    99d4:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
    99d6:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    99da:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    99dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    99e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    99e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    99e6:	683b      	ldr	r3, [r7, #0]
    99e8:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    99ec:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    99f0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    99f4:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    99f8:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    99fa:	fa52 f383 	uxtab	r3, r2, r3
    99fe:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    9a02:	d1f3      	bne.n	99ec <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    9a04:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    9a06:	f04f 0800 	mov.w	r8, #0
    next = begin;
    9a0a:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    9a0c:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9a10:	f1ba 0f00 	cmp.w	sl, #0
    9a14:	d04e      	beq.n	9ab4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    9a16:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    9a18:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9a1a:	a803      	add	r0, sp, #12
    9a1c:	1bd9      	subs	r1, r3, r7
    9a1e:	b289      	uxth	r1, r1
    9a20:	0149      	lsls	r1, r1, #5
    9a22:	f7ff fd5d 	bl	94e0 <FatFile::seekSet(unsigned long)>
    9a26:	2800      	cmp	r0, #0
    9a28:	d055      	beq.n	9ad6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    9a2a:	2100      	movs	r1, #0
    9a2c:	a803      	add	r0, sp, #12
    9a2e:	f7ff fbf7 	bl	9220 <FatFile::readDirCache(bool)>
    if (!ldir) {
    9a32:	2800      	cmp	r0, #0
    9a34:	d04f      	beq.n	9ad6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    9a36:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    9a38:	4557      	cmp	r7, sl
    9a3a:	f100 0b01 	add.w	fp, r0, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    9a3e:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    9a42:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    9a46:	f04f 0500 	mov.w	r5, #0
    9a4a:	f043 0301 	orr.w	r3, r3, #1
    9a4e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    9a52:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    9a56:	bf0c      	ite	eq
    9a58:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    9a5c:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    9a5e:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    9a60:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    9a64:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    9a66:	7303      	strb	r3, [r0, #12]
    9a68:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    9a6c:	f880 900d 	strb.w	r9, [r0, #13]
    9a70:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    9a72:	e006      	b.n	9a82 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    9a74:	f8ab 0000 	strh.w	r0, [fp]
    9a78:	3401      	adds	r4, #1
    9a7a:	3501      	adds	r5, #1
    9a7c:	f10b 0b02 	add.w	fp, fp, #2
    9a80:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    9a82:	89b0      	ldrh	r0, [r6, #12]
    9a84:	b918      	cbnz	r0, 9a8e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    9a86:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    9a8a:	429a      	cmp	r2, r3
    9a8c:	d016      	beq.n	9abc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    9a8e:	4630      	mov	r0, r6
    9a90:	f003 fa90 	bl	cfb4 <FsName::get16()>
  if (i < 5) {
    9a94:	2d04      	cmp	r5, #4
    9a96:	b2eb      	uxtb	r3, r5
    9a98:	d9ec      	bls.n	9a74 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    9a9a:	2b0a      	cmp	r3, #10
    9a9c:	d802      	bhi.n	9aa4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    9a9e:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    9aa2:	e7e9      	b.n	9a78 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    9aa4:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    9aa6:	f8ab 0005 	strh.w	r0, [fp, #5]
    9aaa:	d1e5      	bne.n	9a78 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9aac:	3701      	adds	r7, #1
    9aae:	b2ff      	uxtb	r7, r7
    9ab0:	45ba      	cmp	sl, r7
    9ab2:	d2b1      	bcs.n	9a18 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    9ab4:	2001      	movs	r0, #1

 fail:
  return false;
}
    9ab6:	b00d      	add	sp, #52	; 0x34
    9ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    9abc:	f1b8 0f00 	cmp.w	r8, #0
    9ac0:	d006      	beq.n	9ad0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    9ac2:	f108 0801 	add.w	r8, r8, #1
    9ac6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    9aca:	fa5f f888 	uxtb.w	r8, r8
    9ace:	e7e1      	b.n	9a94 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    9ad0:	f04f 0801 	mov.w	r8, #1
    9ad4:	e7de      	b.n	9a94 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    9ad6:	2000      	movs	r0, #0
}
    9ad8:	b00d      	add	sp, #52	; 0x34
    9ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ade:	bf00      	nop

00009ae0 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    9ae0:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    9ae2:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    9ae6:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    9aea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    9aee:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    9af2:	4686      	mov	lr, r0
  const char* end = fname->end;
    9af4:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    9af6:	6051      	str	r1, [r2, #4]
    9af8:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    9afc:	781a      	ldrb	r2, [r3, #0]
    9afe:	2a2e      	cmp	r2, #46	; 0x2e
    9b00:	bf14      	ite	ne
    9b02:	2001      	movne	r0, #1
    9b04:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    9b06:	d103      	bne.n	9b10 <FatFile::makeSFN(FatLfn_t*)+0x30>
    9b08:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9b0c:	2a2e      	cmp	r2, #46	; 0x2e
    9b0e:	d0fb      	beq.n	9b08 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    9b10:	1e61      	subs	r1, r4, #1
    9b12:	4299      	cmp	r1, r3
    9b14:	d90b      	bls.n	9b2e <FatFile::makeSFN(FatLfn_t*)+0x4e>
    9b16:	460a      	mov	r2, r1
    9b18:	e002      	b.n	9b20 <FatFile::makeSFN(FatLfn_t*)+0x40>
    9b1a:	4293      	cmp	r3, r2
    9b1c:	4611      	mov	r1, r2
    9b1e:	d006      	beq.n	9b2e <FatFile::makeSFN(FatLfn_t*)+0x4e>
    9b20:	4611      	mov	r1, r2
    9b22:	3a01      	subs	r2, #1
    9b24:	f891 c000 	ldrb.w	ip, [r1]
    9b28:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    9b2c:	d1f5      	bne.n	9b1a <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    9b2e:	429c      	cmp	r4, r3
    9b30:	f04f 0500 	mov.w	r5, #0
    9b34:	f240 8086 	bls.w	9c44 <FatFile::makeSFN(FatLfn_t*)+0x164>
    9b38:	2607      	movs	r6, #7
    9b3a:	2708      	movs	r7, #8
    9b3c:	46a9      	mov	r9, r5
    9b3e:	46a8      	mov	r8, r5
    9b40:	e006      	b.n	9b50 <FatFile::makeSFN(FatLfn_t*)+0x70>
    9b42:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    9b44:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    9b46:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    9b4a:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    9b4c:	429c      	cmp	r4, r3
    9b4e:	d95b      	bls.n	9c08 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    9b50:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    9b52:	2a2e      	cmp	r2, #46	; 0x2e
    9b54:	bf08      	it	eq
    9b56:	4299      	cmpeq	r1, r3
    9b58:	d0f3      	beq.n	9b42 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    9b5a:	2a22      	cmp	r2, #34	; 0x22
    9b5c:	d00d      	beq.n	9b7a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    9b5e:	2a7c      	cmp	r2, #124	; 0x7c
    9b60:	d00b      	beq.n	9b7a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    9b62:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    9b66:	f1bc 0f02 	cmp.w	ip, #2
    9b6a:	d906      	bls.n	9b7a <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    9b6c:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    9b70:	f1bc 0f05 	cmp.w	ip, #5
    9b74:	d821      	bhi.n	9bba <FatFile::makeSFN(FatLfn_t*)+0xda>
    9b76:	2a2d      	cmp	r2, #45	; 0x2d
    9b78:	d01f      	beq.n	9bba <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    9b7a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    9b7e:	2a80      	cmp	r2, #128	; 0x80
    9b80:	d05d      	beq.n	9c3e <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    9b82:	454e      	cmp	r6, r9
    9b84:	d22f      	bcs.n	9be6 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    9b86:	4299      	cmp	r1, r3
    9b88:	bf2c      	ite	cs
    9b8a:	2000      	movcs	r0, #0
    9b8c:	2001      	movcc	r0, #1
    9b8e:	2e0a      	cmp	r6, #10
    9b90:	bf08      	it	eq
    9b92:	f040 0001 	orreq.w	r0, r0, #1
    9b96:	2800      	cmp	r0, #0
    9b98:	d047      	beq.n	9c2a <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    9b9a:	f89e 3016 	ldrb.w	r3, [lr, #22]
    9b9e:	2b20      	cmp	r3, #32
    9ba0:	d040      	beq.n	9c24 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    9ba2:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    9ba6:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    9ba8:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    9baa:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    9bac:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    9bae:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    9bb2:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    9bb4:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    9bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9bba:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    9bbe:	f1bc 0f05 	cmp.w	ip, #5
    9bc2:	d9da      	bls.n	9b7a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    9bc4:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    9bc8:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    9bcc:	d8d5      	bhi.n	9b7a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    9bce:	454e      	cmp	r6, r9
    9bd0:	d3d9      	bcc.n	9b86 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    9bd2:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    9bd6:	f1bc 0f19 	cmp.w	ip, #25
    9bda:	d828      	bhi.n	9c2e <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    9bdc:	3a20      	subs	r2, #32
        lc |= bit;
    9bde:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    9be0:	b2d2      	uxtb	r2, r2
        lc |= bit;
    9be2:	b2ed      	uxtb	r5, r5
    9be4:	e001      	b.n	9bea <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    9be6:	2000      	movs	r0, #0
        c = '_';
    9be8:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    9bea:	f109 0c01 	add.w	ip, r9, #1
    9bee:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    9bf0:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    9bf2:	f889 2016 	strb.w	r2, [r9, #22]
    9bf6:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    9bfa:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    9bfc:	4691      	mov	r9, r2
    9bfe:	bf98      	it	ls
    9c00:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    9c04:	429c      	cmp	r4, r3
    9c06:	d8a3      	bhi.n	9b50 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    9c08:	f89e 3016 	ldrb.w	r3, [lr, #22]
    9c0c:	2b20      	cmp	r3, #32
    9c0e:	d009      	beq.n	9c24 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    9c10:	2800      	cmp	r0, #0
    9c12:	d0c6      	beq.n	9ba2 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    9c14:	ea18 0f05 	tst.w	r8, r5
    9c18:	bf18      	it	ne
    9c1a:	2502      	movne	r5, #2
    9c1c:	f88e 5015 	strb.w	r5, [lr, #21]
}
    9c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    9c24:	2000      	movs	r0, #0
}
    9c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9c2a:	460b      	mov	r3, r1
    9c2c:	e78e      	b.n	9b4c <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    9c2e:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    9c32:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    9c36:	bf98      	it	ls
    9c38:	ea47 0808 	orrls.w	r8, r7, r8
    9c3c:	e7d5      	b.n	9bea <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    9c3e:	3301      	adds	r3, #1
        is83 = false;
    9c40:	2000      	movs	r0, #0
    9c42:	e783      	b.n	9b4c <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    9c44:	46a8      	mov	r8, r5
    9c46:	e7df      	b.n	9c08 <FatFile::makeSFN(FatLfn_t*)+0x128>

00009c48 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    9c48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    9c4c:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    9c50:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    9c52:	460f      	mov	r7, r1
    9c54:	4604      	mov	r4, r0
    9c56:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 9cf8 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    9c5a:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    9c5e:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    9c62:	f101 0616 	add.w	r6, r1, #22
    9c66:	f1b8 0f03 	cmp.w	r8, #3
    9c6a:	f8db 3000 	ldr.w	r3, [fp]
    9c6e:	bf28      	it	cs
    9c70:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    9c74:	442b      	add	r3, r5
    9c76:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9c78:	f108 0304 	add.w	r3, r8, #4
    9c7c:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    9c7e:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9c82:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    9c84:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    9c86:	2a09      	cmp	r2, #9
    9c88:	f102 0137 	add.w	r1, r2, #55	; 0x37
    9c8c:	bf98      	it	ls
    9c8e:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    9c92:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9c94:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    9c96:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9c98:	4598      	cmp	r8, r3
    9c9a:	d1f0      	bne.n	9c7e <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    9c9c:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    9ca0:	2100      	movs	r1, #0
    9ca2:	4620      	mov	r0, r4
    9ca4:	f883 a016 	strb.w	sl, [r3, #22]
    9ca8:	f7ff fc1a 	bl	94e0 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    9cac:	2101      	movs	r1, #1
    9cae:	4620      	mov	r0, r4
    9cb0:	f7ff fab6 	bl	9220 <FatFile::readDirCache(bool)>
    9cb4:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    9cb6:	220b      	movs	r2, #11
    9cb8:	4630      	mov	r0, r6
      if (!dir) {
    9cba:	b19b      	cbz	r3, 9ce4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    9cbc:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    9cc0:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    9cc2:	f1bc 0f00 	cmp.w	ip, #0
    9cc6:	d013      	beq.n	9cf0 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    9cc8:	7adb      	ldrb	r3, [r3, #11]
    9cca:	071b      	lsls	r3, r3, #28
    9ccc:	d4ee      	bmi.n	9cac <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    9cce:	f008 fc83 	bl	125d8 <memcmp>
    9cd2:	2800      	cmp	r0, #0
    9cd4:	d1ea      	bne.n	9cac <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    9cd6:	f109 39ff 	add.w	r9, r9, #4294967295
    9cda:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    9cde:	d1c2      	bne.n	9c66 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    9ce0:	4648      	mov	r0, r9
 fail:
    9ce2:	e003      	b.n	9cec <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    9ce4:	7860      	ldrb	r0, [r4, #1]
    9ce6:	fab0 f080 	clz	r0, r0
    9cea:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    9cec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    9cf0:	2001      	movs	r0, #1
}
    9cf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9cf6:	bf00      	nop
    9cf8:	20016020 	.word	0x20016020

00009cfc <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    9cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d00:	ed2d 8b02 	vpush	{d8}
    9d04:	b08b      	sub	sp, #44	; 0x2c
    9d06:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    9d0a:	688b      	ldr	r3, [r1, #8]
    9d0c:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    9d0e:	780b      	ldrb	r3, [r1, #0]
    9d10:	f013 0f70 	tst.w	r3, #112	; 0x70
    9d14:	d053      	beq.n	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    9d16:	9b02      	ldr	r3, [sp, #8]
    9d18:	781b      	ldrb	r3, [r3, #0]
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d14f      	bne.n	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    9d1e:	6913      	ldr	r3, [r2, #16]
    9d20:	4690      	mov	r8, r2
    9d22:	4a9a      	ldr	r2, [pc, #616]	; (9f8c <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    9d24:	460e      	mov	r6, r1
    9d26:	330c      	adds	r3, #12
    9d28:	fba2 2303 	umull	r2, r3, r2, r3
    9d2c:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9d30:	f898 3015 	ldrb.w	r3, [r8, #21]
    9d34:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    9d36:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9d38:	f000 80a7 	beq.w	9e8a <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    9d3c:	1c57      	adds	r7, r2, #1
    9d3e:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    9d40:	2300      	movs	r3, #0
    seekSet(0);
    9d42:	4630      	mov	r0, r6
    9d44:	4619      	mov	r1, r3
    9d46:	461c      	mov	r4, r3
    9d48:	9306      	str	r3, [sp, #24]
    9d4a:	f7ff fbc9 	bl	94e0 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9d4e:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    9d52:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    9d54:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    9d56:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9d58:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    9d5c:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9d5e:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    9d60:	2100      	movs	r1, #0
    9d62:	4630      	mov	r0, r6
    9d64:	f7ff fa5c 	bl	9220 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9d68:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    9d6c:	4603      	mov	r3, r0
    9d6e:	b320      	cbz	r0, 9dba <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    9d70:	7802      	ldrb	r2, [r0, #0]
    9d72:	2ae5      	cmp	r2, #229	; 0xe5
    9d74:	d029      	beq.n	9dca <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    9d76:	b342      	cbz	r2, 9dca <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    9d78:	42bc      	cmp	r4, r7
    9d7a:	bf38      	it	cc
    9d7c:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    9d7e:	2a2e      	cmp	r2, #46	; 0x2e
    9d80:	d02b      	beq.n	9dda <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    9d82:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    9d86:	f1bc 0f0f 	cmp.w	ip, #15
    9d8a:	d054      	beq.n	9e36 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    9d8c:	f01c 0c08 	ands.w	ip, ip, #8
    9d90:	d123      	bne.n	9dda <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    9d92:	f1b9 0f00 	cmp.w	r9, #0
    9d96:	f040 80d5 	bne.w	9f44 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9d9a:	220b      	movs	r2, #11
    9d9c:	ee18 1a10 	vmov	r1, s16
    9da0:	f008 fc1a 	bl	125d8 <memcmp>
    9da4:	2800      	cmp	r0, #0
    9da6:	d1da      	bne.n	9d5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    9da8:	f898 3015 	ldrb.w	r3, [r8, #21]
    9dac:	f013 0301 	ands.w	r3, r3, #1
    9db0:	f000 80e4 	beq.w	9f7c <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    9db4:	2301      	movs	r3, #1
    9db6:	9305      	str	r3, [sp, #20]
    9db8:	e7d1      	b.n	9d5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    9dba:	7873      	ldrb	r3, [r6, #1]
    9dbc:	b183      	cbz	r3, 9de0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    9dbe:	2000      	movs	r0, #0
}
    9dc0:	b00b      	add	sp, #44	; 0x2c
    9dc2:	ecbd 8b02 	vpop	{d8}
    9dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9dca:	2c00      	cmp	r4, #0
    9dcc:	bf08      	it	eq
    9dce:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    9dd0:	42bc      	cmp	r4, r7
    9dd2:	d201      	bcs.n	9dd8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    9dd4:	3401      	adds	r4, #1
    9dd6:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    9dd8:	b112      	cbz	r2, 9de0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    9dda:	f04f 0900 	mov.w	r9, #0
    9dde:	e7be      	b.n	9d5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    9de0:	9b03      	ldr	r3, [sp, #12]
    9de2:	059a      	lsls	r2, r3, #22
    9de4:	d5eb      	bpl.n	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    9de6:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    9dea:	3b01      	subs	r3, #1
    9dec:	2b01      	cmp	r3, #1
    9dee:	d8e6      	bhi.n	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    9df0:	2c00      	cmp	r4, #0
    9df2:	bf08      	it	eq
    9df4:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    9df6:	42bc      	cmp	r4, r7
    9df8:	d303      	bcc.n	9e02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    9dfa:	e048      	b.n	9e8e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    9dfc:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    9dfe:	42a7      	cmp	r7, r4
    9e00:	d045      	beq.n	9e8e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    9e02:	2100      	movs	r1, #0
    9e04:	4630      	mov	r0, r6
    9e06:	f7ff fa0b 	bl	9220 <FatFile::readDirCache(bool)>
    freeFound++;
    9e0a:	1c63      	adds	r3, r4, #1
    if (!dir) {
    9e0c:	2800      	cmp	r0, #0
    9e0e:	d1f5      	bne.n	9dfc <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    9e10:	7873      	ldrb	r3, [r6, #1]
    9e12:	2b00      	cmp	r3, #0
    9e14:	d1d3      	bne.n	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    9e16:	42a7      	cmp	r7, r4
    9e18:	d939      	bls.n	9e8e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    9e1a:	9d07      	ldr	r5, [sp, #28]
    9e1c:	e005      	b.n	9e2a <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    9e1e:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    9e20:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    9e24:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    9e26:	42a7      	cmp	r7, r4
    9e28:	d931      	bls.n	9e8e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    9e2a:	4630      	mov	r0, r6
    9e2c:	f7fe fe68 	bl	8b00 <FatFile::addDirCluster()>
    9e30:	2800      	cmp	r0, #0
    9e32:	d1f4      	bne.n	9e1e <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    9e34:	e7c3      	b.n	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    9e36:	f1b9 0f00 	cmp.w	r9, #0
    9e3a:	d119      	bne.n	9e70 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    9e3c:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    9e40:	9904      	ldr	r1, [sp, #16]
    9e42:	4559      	cmp	r1, fp
    9e44:	d18b      	bne.n	9d5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    9e46:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    9e4a:	d088      	beq.n	9d5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    9e4c:	7b43      	ldrb	r3, [r0, #13]
    9e4e:	4689      	mov	r9, r1
    9e50:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    9e52:	f1bb 0f01 	cmp.w	fp, #1
    9e56:	d182      	bne.n	9d5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    9e58:	1c69      	adds	r1, r5, #1
    9e5a:	464b      	mov	r3, r9
    9e5c:	4642      	mov	r2, r8
    9e5e:	4630      	mov	r0, r6
    9e60:	b289      	uxth	r1, r1
    9e62:	f7ff fd4d 	bl	9900 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    9e66:	2800      	cmp	r0, #0
    9e68:	bf08      	it	eq
    9e6a:	f04f 0900 	moveq.w	r9, #0
    9e6e:	e776      	b.n	9d5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    9e70:	f10b 3bff 	add.w	fp, fp, #4294967295
    9e74:	fa5f fb8b 	uxtb.w	fp, fp
    9e78:	455a      	cmp	r2, fp
    9e7a:	d1ae      	bne.n	9dda <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    9e7c:	7b43      	ldrb	r3, [r0, #13]
    9e7e:	9a06      	ldr	r2, [sp, #24]
    9e80:	4293      	cmp	r3, r2
    9e82:	d0e6      	beq.n	9e52 <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    9e84:	f04f 0900 	mov.w	r9, #0
    9e88:	e769      	b.n	9d5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9e8a:	2701      	movs	r7, #1
    9e8c:	e758      	b.n	9d40 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    9e8e:	9b05      	ldr	r3, [sp, #20]
    9e90:	b12b      	cbz	r3, 9e9e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    9e92:	4641      	mov	r1, r8
    9e94:	4630      	mov	r0, r6
    9e96:	f7ff fed7 	bl	9c48 <FatFile::makeUniqueSfn(FatLfn_t*)>
    9e9a:	2800      	cmp	r0, #0
    9e9c:	d08f      	beq.n	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    9e9e:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    9ea0:	4642      	mov	r2, r8
    9ea2:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    9ea4:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    9ea6:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    9eaa:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    9eac:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    9eae:	4629      	mov	r1, r5
    9eb0:	f7ff fd84 	bl	99bc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    9eb4:	2800      	cmp	r0, #0
    9eb6:	d082      	beq.n	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9eb8:	0169      	lsls	r1, r5, #5
    9eba:	4630      	mov	r0, r6
    9ebc:	f7ff fb10 	bl	94e0 <FatFile::seekSet(unsigned long)>
    9ec0:	2800      	cmp	r0, #0
    9ec2:	f43f af7c 	beq.w	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9ec6:	2100      	movs	r1, #0
    9ec8:	4630      	mov	r0, r6
    9eca:	f7ff f9a9 	bl	9220 <FatFile::readDirCache(bool)>
  if (!dir) {
    9ece:	4604      	mov	r4, r0
    9ed0:	2800      	cmp	r0, #0
    9ed2:	f43f af74 	beq.w	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    9ed6:	2220      	movs	r2, #32
    9ed8:	2100      	movs	r1, #0
    9eda:	f008 fc29 	bl	12730 <memset>
  memcpy(dir->name, fname->sfn, 11);
    9ede:	f8d8 2016 	ldr.w	r2, [r8, #22]
    9ee2:	f8d8 301a 	ldr.w	r3, [r8, #26]
    9ee6:	6022      	str	r2, [r4, #0]
    9ee8:	6063      	str	r3, [r4, #4]
    9eea:	f898 3020 	ldrb.w	r3, [r8, #32]
    9eee:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    9ef2:	72a3      	strb	r3, [r4, #10]
    9ef4:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    9ef6:	f898 3015 	ldrb.w	r3, [r8, #21]
    9efa:	f003 0318 	and.w	r3, r3, #24
    9efe:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    9f00:	4b23      	ldr	r3, [pc, #140]	; (9f90 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    9f02:	681b      	ldr	r3, [r3, #0]
    9f04:	2b00      	cmp	r3, #0
    9f06:	d03b      	beq.n	9f80 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    9f08:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    9f0c:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    9f10:	a809      	add	r0, sp, #36	; 0x24
    9f12:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    9f14:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9f18:	8223      	strh	r3, [r4, #16]
    9f1a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    9f1e:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    9f20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9f24:	7363      	strb	r3, [r4, #13]
    9f26:	9a07      	ldr	r2, [sp, #28]
    9f28:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    9f2c:	f043 0301 	orr.w	r3, r3, #1
    9f30:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    9f34:	9b03      	ldr	r3, [sp, #12]
    9f36:	462a      	mov	r2, r5
    9f38:	4631      	mov	r1, r6
    9f3a:	9802      	ldr	r0, [sp, #8]
    9f3c:	9700      	str	r7, [sp, #0]
    9f3e:	f7ff fb27 	bl	9590 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    9f42:	e73d      	b.n	9dc0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    9f44:	f1bb 0f01 	cmp.w	fp, #1
    9f48:	f47f af39 	bne.w	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    9f4c:	300a      	adds	r0, #10
    9f4e:	e001      	b.n	9f54 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9f50:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9f54:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    9f58:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9f5a:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    9f5e:	fa52 f281 	uxtab	r2, r2, r1
    9f62:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    9f66:	d1f3      	bne.n	9f50 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    9f68:	9b06      	ldr	r3, [sp, #24]
    9f6a:	4563      	cmp	r3, ip
    9f6c:	f47f af27 	bne.w	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9f70:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    9f72:	9b03      	ldr	r3, [sp, #12]
    9f74:	0519      	lsls	r1, r3, #20
    9f76:	f53f af22 	bmi.w	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9f7a:	e7db      	b.n	9f34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    9f7c:	461f      	mov	r7, r3
    9f7e:	e7f8      	b.n	9f72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    9f80:	f645 0321 	movw	r3, #22561	; 0x5821
    9f84:	8223      	strh	r3, [r4, #16]
    9f86:	8323      	strh	r3, [r4, #24]
    9f88:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    9f8a:	e7cc      	b.n	9f26 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    9f8c:	4ec4ec4f 	.word	0x4ec4ec4f
    9f90:	20015130 	.word	0x20015130

00009f94 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    9f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f98:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    9f9a:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    9f9c:	b082      	sub	sp, #8
    9f9e:	460c      	mov	r4, r1
  while (*path == ' ') {
    9fa0:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    9fa2:	4615      	mov	r5, r2
  while (*path == ' ') {
    9fa4:	d103      	bne.n	9fae <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    9fa6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    9faa:	2b20      	cmp	r3, #32
    9fac:	d0fb      	beq.n	9fa6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    9fae:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    9fb0:	7823      	ldrb	r3, [r4, #0]
    9fb2:	b363      	cbz	r3, a00e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    9fb4:	2b2f      	cmp	r3, #47	; 0x2f
    9fb6:	d02a      	beq.n	a00e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    9fb8:	f04f 0800 	mov.w	r8, #0
    9fbc:	4e29      	ldr	r6, [pc, #164]	; (a064 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    9fbe:	1d21      	adds	r1, r4, #4
    9fc0:	4620      	mov	r0, r4
    9fc2:	aa01      	add	r2, sp, #4
    9fc4:	f003 f86e 	bl	d0a4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    9fc8:	4604      	mov	r4, r0
    9fca:	b170      	cbz	r0, 9fea <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    9fcc:	9b01      	ldr	r3, [sp, #4]
    9fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9fd2:	d240      	bcs.n	a056 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    9fd4:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    9fd6:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    9fda:	d831      	bhi.n	a040 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    9fdc:	2b3c      	cmp	r3, #60	; 0x3c
    9fde:	b2d9      	uxtb	r1, r3
    9fe0:	d829      	bhi.n	a036 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    9fe2:	2921      	cmp	r1, #33	; 0x21
    9fe4:	d805      	bhi.n	9ff2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    9fe6:	291f      	cmp	r1, #31
    9fe8:	d809      	bhi.n	9ffe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    9fea:	2000      	movs	r0, #0
    9fec:	b002      	add	sp, #8
    9fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ff2:	3922      	subs	r1, #34	; 0x22
    9ff4:	b2c9      	uxtb	r1, r1
    9ff6:	fa26 f101 	lsr.w	r1, r6, r1
    9ffa:	07ca      	lsls	r2, r1, #31
    9ffc:	d4f5      	bmi.n	9fea <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    9ffe:	2b2e      	cmp	r3, #46	; 0x2e
    a000:	d001      	beq.n	a006 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    a002:	2b20      	cmp	r3, #32
    a004:	d11c      	bne.n	a040 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    a006:	7823      	ldrb	r3, [r4, #0]
    a008:	b10b      	cbz	r3, a00e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    a00a:	2b2f      	cmp	r3, #47	; 0x2f
    a00c:	d1d7      	bne.n	9fbe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    a00e:	692b      	ldr	r3, [r5, #16]
    a010:	3b01      	subs	r3, #1
    a012:	2bfe      	cmp	r3, #254	; 0xfe
    a014:	d8e9      	bhi.n	9fea <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    a016:	7823      	ldrb	r3, [r4, #0]
    a018:	2b20      	cmp	r3, #32
    a01a:	d103      	bne.n	a024 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    a01c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    a020:	2b20      	cmp	r3, #32
    a022:	d0fb      	beq.n	a01c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    a024:	2b2f      	cmp	r3, #47	; 0x2f
    a026:	d0f9      	beq.n	a01c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    a028:	4628      	mov	r0, r5
  *ptr = path;
    a02a:	603c      	str	r4, [r7, #0]
}
    a02c:	b002      	add	sp, #8
    a02e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    a032:	f7ff bd55 	b.w	9ae0 <FatFile::makeSFN(FatLfn_t*)>
    a036:	295c      	cmp	r1, #92	; 0x5c
    a038:	d0d7      	beq.n	9fea <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    a03a:	d905      	bls.n	a048 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    a03c:	297c      	cmp	r1, #124	; 0x7c
    a03e:	d0d4      	beq.n	9fea <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    a040:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    a044:	60ac      	str	r4, [r5, #8]
    a046:	e7de      	b.n	a006 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    a048:	393e      	subs	r1, #62	; 0x3e
    a04a:	2901      	cmp	r1, #1
    a04c:	d8f8      	bhi.n	a040 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    a04e:	2000      	movs	r0, #0
    a050:	b002      	add	sp, #8
    a052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    a056:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    a05a:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    a05c:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    a060:	e7d1      	b.n	a006 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    a062:	bf00      	nop
    a064:	05002101 	.word	0x05002101

0000a068 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    a068:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    a06a:	2300      	movs	r3, #0
    a06c:	b08b      	sub	sp, #44	; 0x2c
    a06e:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    a070:	7883      	ldrb	r3, [r0, #2]
    a072:	079a      	lsls	r2, r3, #30
    a074:	d524      	bpl.n	a0c0 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    a076:	6a01      	ldr	r1, [r0, #32]
    a078:	4605      	mov	r5, r0
    a07a:	b119      	cbz	r1, a084 <FatFile::remove()+0x1c>
    a07c:	6880      	ldr	r0, [r0, #8]
    a07e:	f000 fb3d 	bl	a6fc <FatPartition::freeChain(unsigned long)>
    a082:	b1e8      	cbz	r0, a0c0 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    a084:	2101      	movs	r1, #1
    a086:	4628      	mov	r0, r5
    a088:	f7fe fd76 	bl	8b78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a08c:	b1c0      	cbz	r0, a0c0 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    a08e:	1e42      	subs	r2, r0, #1
    a090:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
    a094:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    a096:	01e3      	lsls	r3, r4, #7
    a098:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    a09c:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    a0a0:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    a0a2:	fa51 f383 	uxtab	r3, r1, r3
    a0a6:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    a0a8:	d1f5      	bne.n	a096 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    a0aa:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    a0ac:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    a0ae:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    a0b0:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    a0b2:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a0b4:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
    a0b8:	70ab      	strb	r3, [r5, #2]
    a0ba:	f002 ff27 	bl	cf0c <FsCache::sync()>
    a0be:	b910      	cbnz	r0, a0c6 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    a0c0:	2000      	movs	r0, #0
}
    a0c2:	b00b      	add	sp, #44	; 0x2c
    a0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0c6:	f507 700e 	add.w	r0, r7, #568	; 0x238
    a0ca:	f002 ff1f 	bl	cf0c <FsCache::sync()>
    a0ce:	2800      	cmp	r0, #0
    a0d0:	d0f6      	beq.n	a0c0 <FatFile::remove()+0x58>
    a0d2:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
    a0d4:	6803      	ldr	r3, [r0, #0]
    a0d6:	6a1b      	ldr	r3, [r3, #32]
    a0d8:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a0da:	2800      	cmp	r0, #0
    a0dc:	d0f0      	beq.n	a0c0 <FatFile::remove()+0x58>
  if (!isLFN()) {
    a0de:	78eb      	ldrb	r3, [r5, #3]
    a0e0:	2b00      	cmp	r3, #0
    a0e2:	d0ee      	beq.n	a0c2 <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    a0e4:	4629      	mov	r1, r5
    a0e6:	a801      	add	r0, sp, #4
    a0e8:	f7fe ff66 	bl	8fb8 <FatFile::openCluster(FatFile*)>
    a0ec:	2800      	cmp	r0, #0
    a0ee:	d0e7      	beq.n	a0c0 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a0f0:	78eb      	ldrb	r3, [r5, #3]
    a0f2:	2b00      	cmp	r3, #0
    a0f4:	d0e4      	beq.n	a0c0 <FatFile::remove()+0x58>
    a0f6:	2701      	movs	r7, #1
    a0f8:	e021      	b.n	a13e <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    a0fa:	a801      	add	r0, sp, #4
    a0fc:	f7ff f890 	bl	9220 <FatFile::readDirCache(bool)>
    a100:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a102:	b2f9      	uxtb	r1, r7
    if (!ldir) {
    a104:	2800      	cmp	r0, #0
    a106:	d0db      	beq.n	a0c0 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a108:	7ac2      	ldrb	r2, [r0, #11]
    a10a:	2a0f      	cmp	r2, #15
    a10c:	d1d8      	bne.n	a0c0 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    a10e:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a110:	fa5f fc83 	uxtb.w	ip, r3
    a114:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a116:	f002 031f 	and.w	r3, r2, #31
    a11a:	428b      	cmp	r3, r1
    a11c:	d1d0      	bne.n	a0c0 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    a11e:	7b43      	ldrb	r3, [r0, #13]
    a120:	42a3      	cmp	r3, r4
    a122:	d1cd      	bne.n	a0c0 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    a124:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    a126:	68a9      	ldr	r1, [r5, #8]
    a128:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    a12c:	f043 0301 	orr.w	r3, r3, #1
    a130:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    a134:	0653      	lsls	r3, r2, #25
    a136:	d40d      	bmi.n	a154 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a138:	78eb      	ldrb	r3, [r5, #3]
    a13a:	4563      	cmp	r3, ip
    a13c:	d3c0      	bcc.n	a0c0 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    a13e:	88a9      	ldrh	r1, [r5, #4]
    a140:	a801      	add	r0, sp, #4
    a142:	1bc9      	subs	r1, r1, r7
    a144:	b289      	uxth	r1, r1
    a146:	0149      	lsls	r1, r1, #5
    a148:	f7ff f9ca 	bl	94e0 <FatFile::seekSet(unsigned long)>
    a14c:	2100      	movs	r1, #0
    a14e:	2800      	cmp	r0, #0
    a150:	d1d3      	bne.n	a0fa <FatFile::remove()+0x92>
    a152:	e7b5      	b.n	a0c0 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    a154:	68ac      	ldr	r4, [r5, #8]
    a156:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a15a:	f002 fed7 	bl	cf0c <FsCache::sync()>
    a15e:	2800      	cmp	r0, #0
    a160:	d0ae      	beq.n	a0c0 <FatFile::remove()+0x58>
    a162:	f504 700e 	add.w	r0, r4, #568	; 0x238
    a166:	f002 fed1 	bl	cf0c <FsCache::sync()>
    a16a:	2800      	cmp	r0, #0
    a16c:	d0a8      	beq.n	a0c0 <FatFile::remove()+0x58>
    a16e:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    a170:	6803      	ldr	r3, [r0, #0]
    a172:	6a1b      	ldr	r3, [r3, #32]
    a174:	4798      	blx	r3
    a176:	e7a4      	b.n	a0c2 <FatFile::remove()+0x5a>

0000a178 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    a178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a17c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a180:	b1a2      	cbz	r2, a1ac <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    a182:	4605      	mov	r5, r0
    a184:	460c      	mov	r4, r1
    a186:	4698      	mov	r8, r3
    a188:	1857      	adds	r7, r2, r1
    a18a:	e001      	b.n	a190 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    a18c:	42bc      	cmp	r4, r7
    a18e:	d00d      	beq.n	a1ac <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    a190:	682b      	ldr	r3, [r5, #0]
    a192:	4620      	mov	r0, r4
    a194:	4649      	mov	r1, r9
    a196:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    a198:	47c0      	blx	r8
    a19a:	4621      	mov	r1, r4
    a19c:	4602      	mov	r2, r0
    a19e:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    a1a0:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    a1a2:	47b0      	blx	r6
    a1a4:	2800      	cmp	r0, #0
    a1a6:	d1f1      	bne.n	a18c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    a1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    a1ac:	2001      	movs	r0, #1
  }
    a1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a1b2:	bf00      	nop

0000a1b4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    a1b4:	2a04      	cmp	r2, #4
    a1b6:	d804      	bhi.n	a1c2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    a1b8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    a1bc:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    a1c0:	4770      	bx	lr
  } else if (i < 11) {
    a1c2:	2a0a      	cmp	r2, #10
    a1c4:	d803      	bhi.n	a1ce <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    a1c6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    a1ca:	8890      	ldrh	r0, [r2, #4]
    a1cc:	4770      	bx	lr
  } else if (i < 13) {
    a1ce:	2a0c      	cmp	r2, #12
    a1d0:	d803      	bhi.n	a1da <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    a1d2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    a1d6:	88c8      	ldrh	r0, [r1, #6]
    a1d8:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    a1da:	2000      	movs	r0, #0
}
    a1dc:	4770      	bx	lr
    a1de:	bf00      	nop

0000a1e0 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    a1e2:	7804      	ldrb	r4, [r0, #0]
    a1e4:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    a1e6:	b17c      	cbz	r4, a208 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    a1e8:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    a1ec:	4617      	mov	r7, r2
    a1ee:	d007      	beq.n	a200 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    a1f0:	2a01      	cmp	r2, #1
    a1f2:	d909      	bls.n	a208 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    a1f4:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
    a1f6:	2300      	movs	r3, #0
    return 1;
    a1f8:	2001      	movs	r0, #1
    name[0] = '/';
    a1fa:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
    a1fc:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    a1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    a200:	4621      	mov	r1, r4
    a202:	f7fe fcb9 	bl	8b78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a206:	b918      	cbnz	r0, a210 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    a208:	2300      	movs	r3, #0
  return 0;
    a20a:	4618      	mov	r0, r3
  name[0] = '\0';
    a20c:	7033      	strb	r3, [r6, #0]
}
    a20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    a210:	4603      	mov	r3, r0
    a212:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    a214:	2108      	movs	r1, #8
    a216:	e011      	b.n	a23c <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    a218:	7b02      	ldrb	r2, [r0, #12]
    a21a:	4211      	tst	r1, r2
    a21c:	d003      	beq.n	a226 <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    a21e:	f10e 0e20 	add.w	lr, lr, #32
    a222:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    a226:	1c65      	adds	r5, r4, #1
    a228:	42bd      	cmp	r5, r7
    a22a:	d2ed      	bcs.n	a208 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    a22c:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
    a230:	f806 e004 	strb.w	lr, [r6, r4]
    a234:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    a236:	f1bc 0f0c 	cmp.w	ip, #12
    a23a:	d010      	beq.n	a25e <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    a23c:	f1bc 0f08 	cmp.w	ip, #8
    a240:	d011      	beq.n	a266 <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    a242:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    a246:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
    a24a:	2a19      	cmp	r2, #25
    a24c:	d9e4      	bls.n	a218 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    a24e:	f1be 0f20 	cmp.w	lr, #32
    a252:	d1e8      	bne.n	a226 <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    a254:	f10c 0c01 	add.w	ip, ip, #1
    a258:	f1bc 0f0c 	cmp.w	ip, #12
    a25c:	d1ee      	bne.n	a23c <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    a25e:	2300      	movs	r3, #0
    a260:	4620      	mov	r0, r4
    a262:	5533      	strb	r3, [r6, r4]
}
    a264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    a266:	781a      	ldrb	r2, [r3, #0]
    a268:	2a20      	cmp	r2, #32
    a26a:	d0f8      	beq.n	a25e <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    a26c:	2110      	movs	r1, #16
      c = '.';
    a26e:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    a272:	e7d8      	b.n	a226 <FatFile::getSFN(char*, unsigned int)+0x46>

0000a274 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    a278:	2400      	movs	r4, #0
    a27a:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    a27c:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    a27e:	4689      	mov	r9, r1
    a280:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
    a282:	2b00      	cmp	r3, #0
    a284:	d055      	beq.n	a332 <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
    a286:	78c3      	ldrb	r3, [r0, #3]
    a288:	4606      	mov	r6, r0
    a28a:	2b00      	cmp	r3, #0
    a28c:	d058      	beq.n	a340 <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
    a28e:	4601      	mov	r1, r0
    a290:	a801      	add	r0, sp, #4
    a292:	4690      	mov	r8, r2
    a294:	f7fe fe90 	bl	8fb8 <FatFile::openCluster(FatFile*)>
    a298:	2800      	cmp	r0, #0
    a29a:	d04a      	beq.n	a332 <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a29c:	78f0      	ldrb	r0, [r6, #3]
    a29e:	2800      	cmp	r0, #0
    a2a0:	d043      	beq.n	a32a <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    a2a2:	f108 38ff 	add.w	r8, r8, #4294967295
  char* str = name;
    a2a6:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a2a8:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    a2ac:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    a2ae:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    a2b0:	a801      	add	r0, sp, #4
    a2b2:	eba1 010a 	sub.w	r1, r1, sl
    a2b6:	b289      	uxth	r1, r1
    a2b8:	0149      	lsls	r1, r1, #5
    a2ba:	f7ff f911 	bl	94e0 <FatFile::seekSet(unsigned long)>
    a2be:	b3c0      	cbz	r0, a332 <FatFile::getName8(char*, unsigned int)+0xbe>
    a2c0:	2100      	movs	r1, #0
    a2c2:	a801      	add	r0, sp, #4
    a2c4:	f7fe ffac 	bl	9220 <FatFile::readDirCache(bool)>
    if (!ldir) {
    a2c8:	b398      	cbz	r0, a332 <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a2ca:	7ac3      	ldrb	r3, [r0, #11]
    a2cc:	2b0f      	cmp	r3, #15
    a2ce:	d130      	bne.n	a332 <FatFile::getName8(char*, unsigned int)+0xbe>
    a2d0:	7803      	ldrb	r3, [r0, #0]
    a2d2:	fa5f f18a 	uxtb.w	r1, sl
    a2d6:	f003 031f 	and.w	r3, r3, #31
    a2da:	428b      	cmp	r3, r1
    a2dc:	d129      	bne.n	a332 <FatFile::getName8(char*, unsigned int)+0xbe>
    a2de:	1c47      	adds	r7, r0, #1
    a2e0:	2500      	movs	r5, #0
  if (i < 5) {
    a2e2:	2d04      	cmp	r5, #4
    a2e4:	b2eb      	uxtb	r3, r5
    a2e6:	d83f      	bhi.n	a368 <FatFile::getName8(char*, unsigned int)+0xf4>
    a2e8:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
    a2ea:	bb74      	cbnz	r4, a34a <FatFile::getName8(char*, unsigned int)+0xd6>
    a2ec:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
    a2f0:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
    a2f2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    a2f6:	d33e      	bcc.n	a376 <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
    a2f8:	b1a3      	cbz	r3, a324 <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
    a2fa:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    a2fc:	4659      	mov	r1, fp
    a2fe:	4642      	mov	r2, r8
    a300:	f002 fe7e 	bl	d000 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    a304:	4683      	mov	fp, r0
    a306:	b1a0      	cbz	r0, a332 <FatFile::getName8(char*, unsigned int)+0xbe>
    a308:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
    a30a:	3501      	adds	r5, #1
    a30c:	3702      	adds	r7, #2
    a30e:	2d0d      	cmp	r5, #13
    a310:	d1e7      	bne.n	a2e2 <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a312:	f10a 0a01 	add.w	sl, sl, #1
    a316:	78f1      	ldrb	r1, [r6, #3]
    a318:	fa5f f38a 	uxtb.w	r3, sl
    a31c:	fa1f fa8a 	uxth.w	sl, sl
    a320:	4299      	cmp	r1, r3
    a322:	d2c4      	bcs.n	a2ae <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
    a324:	ebab 0009 	sub.w	r0, fp, r9
    a328:	46d9      	mov	r9, fp
  *str = '\0';
    a32a:	2300      	movs	r3, #0
    a32c:	f889 3000 	strb.w	r3, [r9]
  return str - name;
    a330:	e003      	b.n	a33a <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
    a332:	2300      	movs	r3, #0
  return 0;
    a334:	4618      	mov	r0, r3
  *name = 0;
    a336:	f889 3000 	strb.w	r3, [r9]
}
    a33a:	b00b      	add	sp, #44	; 0x2c
    a33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
    a340:	f7ff ff4e 	bl	a1e0 <FatFile::getSFN(char*, unsigned int)>
}
    a344:	b00b      	add	sp, #44	; 0x2c
    a346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0XDC00 <= c && c <= 0XDFFF;
    a34a:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    a34e:	b289      	uxth	r1, r1
    a350:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    a354:	d2ed      	bcs.n	a332 <FatFile::getName8(char*, unsigned int)+0xbe>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    a356:	4a0a      	ldr	r2, [pc, #40]	; (a380 <FatFile::getName8(char*, unsigned int)+0x10c>)
    a358:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a35c:	ea02 2084 	and.w	r0, r2, r4, lsl #10
    a360:	4318      	orrs	r0, r3
    a362:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
    a366:	e7c9      	b.n	a2fc <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
    a368:	2b0a      	cmp	r3, #10
    a36a:	bf94      	ite	ls
    a36c:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
    a370:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
    a374:	e7b9      	b.n	a2ea <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
    a376:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    a37a:	d2da      	bcs.n	a332 <FatFile::getName8(char*, unsigned int)+0xbe>
    a37c:	461c      	mov	r4, r3
    a37e:	e7c4      	b.n	a30a <FatFile::getName8(char*, unsigned int)+0x96>
    a380:	000ffc00 	.word	0x000ffc00

0000a384 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    a384:	f7ff bf76 	b.w	a274 <FatFile::getName8(char*, unsigned int)>

0000a388 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    a388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a38c:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    a390:	b1c3      	cbz	r3, a3c4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    a392:	4681      	mov	r9, r0
    a394:	460c      	mov	r4, r1
    a396:	4615      	mov	r5, r2
    a398:	185e      	adds	r6, r3, r1
    a39a:	e002      	b.n	a3a2 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    a39c:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    a39e:	42b4      	cmp	r4, r6
    a3a0:	d010      	beq.n	a3c4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    a3a2:	f8d9 3000 	ldr.w	r3, [r9]
    a3a6:	4621      	mov	r1, r4
    a3a8:	462a      	mov	r2, r5
    a3aa:	4648      	mov	r0, r9
    a3ac:	691b      	ldr	r3, [r3, #16]
    a3ae:	4798      	blx	r3
    a3b0:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    a3b2:	463a      	mov	r2, r7
    a3b4:	4620      	mov	r0, r4
    a3b6:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    a3b8:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    a3ba:	2b00      	cmp	r3, #0
    a3bc:	d1ee      	bne.n	a39c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    a3be:	4618      	mov	r0, r3
    a3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    a3c4:	2301      	movs	r3, #1
  }
    a3c6:	4618      	mov	r0, r3
    a3c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a3cc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    a3cc:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    a3ce:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    a3d0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    a3d4:	46a4      	mov	ip, r4
    a3d6:	bf28      	it	cs
    a3d8:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    a3dc:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    a3e0:	4281      	cmp	r1, r0
    a3e2:	d207      	bcs.n	a3f4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    a3e4:	f831 3b02 	ldrh.w	r3, [r1], #2
    a3e8:	b913      	cbnz	r3, a3f0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    a3ea:	6853      	ldr	r3, [r2, #4]
    a3ec:	3301      	adds	r3, #1
    a3ee:	6053      	str	r3, [r2, #4]
  while (p < e) {
    a3f0:	4288      	cmp	r0, r1
    a3f2:	d8f7      	bhi.n	a3e4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  }
  state->clusters_to_do -= n;
    a3f4:	eba4 040c 	sub.w	r4, r4, ip
    a3f8:	6014      	str	r4, [r2, #0]
}
    a3fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    a3fe:	4770      	bx	lr

0000a400 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    a400:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    a402:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    a404:	2c80      	cmp	r4, #128	; 0x80
    a406:	46a4      	mov	ip, r4
    a408:	bf28      	it	cs
    a40a:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    a40e:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    a412:	4281      	cmp	r1, r0
    a414:	d207      	bcs.n	a426 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
    a416:	f851 3b04 	ldr.w	r3, [r1], #4
    a41a:	b913      	cbnz	r3, a422 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    a41c:	6853      	ldr	r3, [r2, #4]
    a41e:	3301      	adds	r3, #1
    a420:	6053      	str	r3, [r2, #4]
  while (p < e) {
    a422:	4288      	cmp	r0, r1
    a424:	d8f7      	bhi.n	a416 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  }
  state->clusters_to_do -= n;
    a426:	eba4 040c 	sub.w	r4, r4, ip
    a42a:	6014      	str	r4, [r2, #0]
}
    a42c:	f85d 4b04 	ldr.w	r4, [sp], #4
    a430:	4770      	bx	lr
    a432:	bf00      	nop

0000a434 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    a434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    a438:	79c3      	ldrb	r3, [r0, #7]
    a43a:	4604      	mov	r4, r0
    a43c:	460d      	mov	r5, r1
    a43e:	4617      	mov	r7, r2
  if (fatType() == 32) {
    a440:	2b20      	cmp	r3, #32
    a442:	d059      	beq.n	a4f8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    a444:	2b10      	cmp	r3, #16
    a446:	d030      	beq.n	a4aa <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    a448:	2b0c      	cmp	r3, #12
    a44a:	d151      	bne.n	a4f0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a44c:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    a44e:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a452:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a454:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    a458:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a45c:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a460:	4648      	mov	r0, r9
    a462:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a464:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a468:	f3c1 2146 	ubfx	r1, r1, #9, #7
    a46c:	0952      	lsrs	r2, r2, #5
    a46e:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    a472:	0052      	lsls	r2, r2, #1
    a474:	4641      	mov	r1, r8
    a476:	f002 fd75 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a47a:	2800      	cmp	r0, #0
    a47c:	d038      	beq.n	a4f0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    a47e:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    a482:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    a484:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    a486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a48a:	d023      	beq.n	a4d4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    a48c:	4418      	add	r0, r3
    a48e:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    a490:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    a492:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    a494:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    a498:	bf4c      	ite	mi
    a49a:	091b      	lsrmi	r3, r3, #4
    a49c:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    a4a0:	429a      	cmp	r2, r3
    a4a2:	d240      	bcs.n	a526 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    a4a4:	2000      	movs	r0, #0
}
    a4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a4aa:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    a4ac:	f3c1 2107 	ubfx	r1, r1, #8, #8
    a4b0:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a4b2:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a4b6:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a4ba:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a4bc:	fab2 f282 	clz	r2, r2
    a4c0:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a4c2:	0052      	lsls	r2, r2, #1
    a4c4:	f002 fd4e 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a4c8:	b190      	cbz	r0, a4f0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    a4ca:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    a4cc:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    a4d0:	5b43      	ldrh	r3, [r0, r5]
    a4d2:	e025      	b.n	a520 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a4d4:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    a4d6:	f108 0101 	add.w	r1, r8, #1
    a4da:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a4dc:	f1a2 0202 	sub.w	r2, r2, #2
    a4e0:	fab2 f282 	clz	r2, r2
    a4e4:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a4e6:	0052      	lsls	r2, r2, #1
    a4e8:	f002 fd3c 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    a4ec:	2800      	cmp	r0, #0
    a4ee:	d1ce      	bne.n	a48e <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    a4f0:	f04f 30ff 	mov.w	r0, #4294967295
}
    a4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a4f8:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    a4fa:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a4fc:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a500:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a504:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a508:	fab2 f282 	clz	r2, r2
    a50c:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a50e:	0052      	lsls	r2, r2, #1
    a510:	f002 fd28 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a514:	2800      	cmp	r0, #0
    a516:	d0eb      	beq.n	a4f0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    a518:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    a51a:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    a51e:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    a520:	69e2      	ldr	r2, [r4, #28]
    a522:	429a      	cmp	r2, r3
    a524:	d3be      	bcc.n	a4a4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    a526:	2001      	movs	r0, #1
  *value = next;
    a528:	603b      	str	r3, [r7, #0]
}
    a52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a52e:	bf00      	nop

0000a530 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    a530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    a534:	79c3      	ldrb	r3, [r0, #7]
    a536:	4605      	mov	r5, r0
    a538:	460c      	mov	r4, r1
    a53a:	4616      	mov	r6, r2
  if (fatType() == 32) {
    a53c:	2b20      	cmp	r3, #32
    a53e:	d048      	beq.n	a5d2 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    a540:	2b10      	cmp	r3, #16
    a542:	d02d      	beq.n	a5a0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    a544:	2b0c      	cmp	r3, #12
    a546:	d141      	bne.n	a5cc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    a548:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a54c:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a54e:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    a552:	fa11 f184 	uxtah	r1, r1, r4
    a556:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a55a:	f3c1 2146 	ubfx	r1, r1, #9, #7
    a55e:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a560:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    a562:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a564:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a566:	4639      	mov	r1, r7
    a568:	bf14      	ite	ne
    a56a:	2201      	movne	r2, #1
    a56c:	2203      	moveq	r2, #3
    a56e:	f002 fcf9 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a572:	b358      	cbz	r0, a5cc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    a574:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    a578:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    a57c:	d03f      	beq.n	a5fe <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    a57e:	5cc2      	ldrb	r2, [r0, r3]
    a580:	f002 020f 	and.w	r2, r2, #15
    a584:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    a588:	54c2      	strb	r2, [r0, r3]
    index++;
    a58a:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    a58c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a590:	d03a      	beq.n	a608 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    a592:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    a596:	4403      	add	r3, r0
    return true;
    a598:	2001      	movs	r0, #1
    pc[index] = tmp;
    a59a:	701a      	strb	r2, [r3, #0]
}
    a59c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a5a0:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    a5a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    a5a6:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a5a8:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a5ac:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    a5ae:	4419      	add	r1, r3
    a5b0:	bf14      	ite	ne
    a5b2:	2201      	movne	r2, #1
    a5b4:	2203      	moveq	r2, #3
    a5b6:	f002 fcd5 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a5ba:	4603      	mov	r3, r0
    a5bc:	b130      	cbz	r0, a5cc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    a5be:	0064      	lsls	r4, r4, #1
    return true;
    a5c0:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    a5c2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    a5c6:	531e      	strh	r6, [r3, r4]
}
    a5c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    a5cc:	2000      	movs	r0, #0
}
    a5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a5d2:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    a5d4:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a5d6:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a5da:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a5dc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    a5e0:	bf14      	ite	ne
    a5e2:	2201      	movne	r2, #1
    a5e4:	2203      	moveq	r2, #3
    a5e6:	f002 fcbd 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a5ea:	4603      	mov	r3, r0
    a5ec:	2800      	cmp	r0, #0
    a5ee:	d0ed      	beq.n	a5cc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    a5f0:	00a4      	lsls	r4, r4, #2
    return true;
    a5f2:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    a5f4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    a5f8:	511e      	str	r6, [r3, r4]
}
    a5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    a5fe:	54c6      	strb	r6, [r0, r3]
    index++;
    a600:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    a602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a606:	d115      	bne.n	a634 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a608:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    a60a:	1c79      	adds	r1, r7, #1
    a60c:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a60e:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a610:	bf14      	ite	ne
    a612:	2201      	movne	r2, #1
    a614:	2203      	moveq	r2, #3
    a616:	f002 fca5 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    a61a:	4603      	mov	r3, r0
    a61c:	2800      	cmp	r0, #0
    a61e:	d0d5      	beq.n	a5cc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    a620:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    a624:	2c00      	cmp	r4, #0
    a626:	d1b7      	bne.n	a598 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    a628:	7819      	ldrb	r1, [r3, #0]
    a62a:	f021 010f 	bic.w	r1, r1, #15
    a62e:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    a632:	e7b1      	b.n	a598 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    a634:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    a638:	4403      	add	r3, r0
    a63a:	e7f5      	b.n	a628 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

0000a63c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    a640:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a642:	b082      	sub	sp, #8
    a644:	4605      	mov	r5, r0
    a646:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    a648:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a64a:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    a64c:	d340      	bcc.n	a6d0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    a64e:	2701      	movs	r7, #1
    find++;
    a650:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    a652:	69eb      	ldr	r3, [r5, #28]
    a654:	aa01      	add	r2, sp, #4
    a656:	4628      	mov	r0, r5
    a658:	42a3      	cmp	r3, r4
    a65a:	d205      	bcs.n	a668 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    a65c:	bb9f      	cbnz	r7, a6c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    a65e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    a660:	2701      	movs	r7, #1
    find++;
    a662:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    a664:	42a3      	cmp	r3, r4
    a666:	d32e      	bcc.n	a6c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    a668:	42a6      	cmp	r6, r4
    a66a:	bf18      	it	ne
    a66c:	2c01      	cmpne	r4, #1
    a66e:	4621      	mov	r1, r4
    a670:	d929      	bls.n	a6c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a672:	f7ff fedf 	bl	a434 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    a676:	2800      	cmp	r0, #0
    a678:	db25      	blt.n	a6c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    a67a:	d0e9      	beq.n	a650 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    a67c:	9b01      	ldr	r3, [sp, #4]
    a67e:	2b00      	cmp	r3, #0
    a680:	d1e6      	bne.n	a650 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    a682:	b107      	cbz	r7, a686 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    a684:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    a686:	69eb      	ldr	r3, [r5, #28]
    a688:	42a3      	cmp	r3, r4
    a68a:	d31c      	bcc.n	a6c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a68c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    a690:	4621      	mov	r1, r4
    a692:	4628      	mov	r0, r5
    a694:	f7ff ff4c 	bl	a530 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    a698:	4607      	mov	r7, r0
    a69a:	b1a0      	cbz	r0, a6c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    a69c:	b93e      	cbnz	r6, a6ae <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    a69e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a6a0:	2b00      	cmp	r3, #0
    a6a2:	db01      	blt.n	a6a8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    a6a4:	3b01      	subs	r3, #1
    a6a6:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    a6a8:	f8c8 4000 	str.w	r4, [r8]
  return true;
    a6ac:	e00c      	b.n	a6c8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    a6ae:	2e01      	cmp	r6, #1
    a6b0:	d009      	beq.n	a6c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a6b2:	69eb      	ldr	r3, [r5, #28]
    a6b4:	429e      	cmp	r6, r3
    a6b6:	d806      	bhi.n	a6c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a6b8:	4631      	mov	r1, r6
    a6ba:	4622      	mov	r2, r4
    a6bc:	4628      	mov	r0, r5
    a6be:	f7ff ff37 	bl	a530 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    a6c2:	2800      	cmp	r0, #0
    a6c4:	d1eb      	bne.n	a69e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    a6c6:	2700      	movs	r7, #0
}
    a6c8:	4638      	mov	r0, r7
    a6ca:	b002      	add	sp, #8
    a6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6d0:	460c      	mov	r4, r1
    setStart = false;
    a6d2:	2700      	movs	r7, #0
    a6d4:	e7bc      	b.n	a650 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    a6d6:	bf00      	nop

0000a6d8 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    a6d8:	2901      	cmp	r1, #1
    a6da:	d90c      	bls.n	a6f6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    a6dc:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    a6de:	69c4      	ldr	r4, [r0, #28]
    a6e0:	428c      	cmp	r4, r1
    a6e2:	d303      	bcc.n	a6ec <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    a6e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    a6e8:	f7ff bea4 	b.w	a434 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    a6ec:	f04f 30ff 	mov.w	r0, #4294967295
    a6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
    a6f4:	4770      	bx	lr
    a6f6:	f04f 30ff 	mov.w	r0, #4294967295
    a6fa:	4770      	bx	lr

0000a6fc <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    a6fc:	b570      	push	{r4, r5, r6, lr}
    a6fe:	4605      	mov	r5, r0
    a700:	b082      	sub	sp, #8
    a702:	460c      	mov	r4, r1
    a704:	e01d      	b.n	a742 <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    a706:	69eb      	ldr	r3, [r5, #28]
    a708:	429c      	cmp	r4, r3
    a70a:	d81f      	bhi.n	a74c <FatPartition::freeChain(unsigned long)+0x50>
    a70c:	f7ff fe92 	bl	a434 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    a710:	4606      	mov	r6, r0
    if (fg < 0) {
    a712:	4621      	mov	r1, r4
    a714:	2200      	movs	r2, #0
    a716:	2e00      	cmp	r6, #0
    a718:	4628      	mov	r0, r5
    a71a:	db17      	blt.n	a74c <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    a71c:	69eb      	ldr	r3, [r5, #28]
    a71e:	429c      	cmp	r4, r3
    a720:	d814      	bhi.n	a74c <FatPartition::freeChain(unsigned long)+0x50>
    a722:	f7ff ff05 	bl	a530 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    a726:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    a728:	b180      	cbz	r0, a74c <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    a72a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a72c:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    a72e:	f103 0301 	add.w	r3, r3, #1
    a732:	bfa8      	it	ge
    a734:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    a736:	68eb      	ldr	r3, [r5, #12]
    a738:	42a3      	cmp	r3, r4
    cluster = next;
    a73a:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    a73c:	bf88      	it	hi
    a73e:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    a740:	b12e      	cbz	r6, a74e <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    a742:	2c01      	cmp	r4, #1
    a744:	4621      	mov	r1, r4
    a746:	aa01      	add	r2, sp, #4
    a748:	4628      	mov	r0, r5
    a74a:	d8dc      	bhi.n	a706 <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    a74c:	2000      	movs	r0, #0
}
    a74e:	b002      	add	sp, #8
    a750:	bd70      	pop	{r4, r5, r6, pc}
    a752:	bf00      	nop

0000a754 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    a754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a758:	4606      	mov	r6, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    a75a:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    a75c:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
    a75e:	2800      	cmp	r0, #0
    a760:	da1b      	bge.n	a79a <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
    a762:	79f2      	ldrb	r2, [r6, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    a764:	2a0c      	cmp	r2, #12
    a766:	d11b      	bne.n	a7a0 <FatPartition::freeClusterCount()+0x4c>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    a768:	69f7      	ldr	r7, [r6, #28]
    a76a:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    a76c:	2b02      	cmp	r3, #2
    a76e:	f240 80cd 	bls.w	a90c <FatPartition::freeClusterCount()+0x1b8>
    a772:	2402      	movs	r4, #2
    uint32_t free = 0;
    a774:	2500      	movs	r5, #0
    a776:	4621      	mov	r1, r4
    a778:	aa02      	add	r2, sp, #8
    a77a:	4630      	mov	r0, r6
    a77c:	f7ff fe5a 	bl	a434 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
    a780:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
    a782:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
    a786:	db06      	blt.n	a796 <FatPartition::freeClusterCount()+0x42>
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
    a788:	d157      	bne.n	a83a <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
    a78a:	42a7      	cmp	r7, r4
    a78c:	461c      	mov	r4, r3
    a78e:	d05c      	beq.n	a84a <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
    a790:	69f2      	ldr	r2, [r6, #28]
    a792:	4293      	cmp	r3, r2
    a794:	d9ef      	bls.n	a776 <FatPartition::freeClusterCount()+0x22>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    a796:	f04f 30ff 	mov.w	r0, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
    a79a:	b004      	add	sp, #16
    a79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
    a7a0:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
    a7a2:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
    a7a4:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    a7a8:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
    a7aa:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
    a7ac:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
    a7ae:	e9cd 1002 	strd	r1, r0, [sp, #8]
    a7b2:	f100 8085 	bmi.w	a8c0 <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
    a7b6:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
    a7b8:	f04f 33ff 	mov.w	r3, #4294967295
  if (fatType() == FAT_TYPE_FAT32) {
    a7bc:	2a20      	cmp	r2, #32
    return m_buffer;
    a7be:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
    a7c2:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    a7c6:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
    a7ca:	d042      	beq.n	a852 <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    a7cc:	f8d6 8000 	ldr.w	r8, [r6]
    a7d0:	4b4f      	ldr	r3, [pc, #316]	; (a910 <FatPartition::freeClusterCount()+0x1bc>)
    a7d2:	f8d8 2000 	ldr.w	r2, [r8]
    a7d6:	f8d6 a018 	ldr.w	sl, [r6, #24]
    a7da:	6995      	ldr	r5, [r2, #24]
    a7dc:	429d      	cmp	r5, r3
    a7de:	d178      	bne.n	a8d2 <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
    a7e0:	2c00      	cmp	r4, #0
    a7e2:	f000 8082 	beq.w	a8ea <FatPartition::freeClusterCount()+0x196>
    a7e6:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
    a7ea:	6913      	ldr	r3, [r2, #16]
    a7ec:	4651      	mov	r1, sl
    a7ee:	463a      	mov	r2, r7
    a7f0:	4640      	mov	r0, r8
    a7f2:	4798      	blx	r3
    a7f4:	2800      	cmp	r0, #0
    a7f6:	d0ce      	beq.n	a796 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    a7f8:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
    a7fa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    a7fe:	468e      	mov	lr, r1
    a800:	bf28      	it	cs
    a802:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
    a806:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
    a80a:	45bc      	cmp	ip, r7
    a80c:	d90b      	bls.n	a826 <FatPartition::freeClusterCount()+0xd2>
    a80e:	9d03      	ldr	r5, [sp, #12]
    a810:	463b      	mov	r3, r7
    a812:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
    a814:	f833 4b02 	ldrh.w	r4, [r3], #2
    a818:	b90c      	cbnz	r4, a81e <FatPartition::freeClusterCount()+0xca>
    a81a:	3501      	adds	r5, #1
    a81c:	4602      	mov	r2, r0
  while (p < e) {
    a81e:	459c      	cmp	ip, r3
    a820:	d8f8      	bhi.n	a814 <FatPartition::freeClusterCount()+0xc0>
    a822:	b102      	cbz	r2, a826 <FatPartition::freeClusterCount()+0xd2>
    a824:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    a826:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
    a82a:	eba1 010e 	sub.w	r1, r1, lr
    a82e:	45d1      	cmp	r9, sl
    a830:	9102      	str	r1, [sp, #8]
    a832:	d05a      	beq.n	a8ea <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    a834:	f8d8 2000 	ldr.w	r2, [r8]
    a838:	e7d7      	b.n	a7ea <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
    a83a:	9a02      	ldr	r2, [sp, #8]
    a83c:	2a00      	cmp	r2, #0
    a83e:	d1a4      	bne.n	a78a <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
    a840:	42a7      	cmp	r7, r4
        free++;
    a842:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
    a846:	461c      	mov	r4, r3
    a848:	d1a2      	bne.n	a790 <FatPartition::freeClusterCount()+0x3c>
    return free;
    a84a:	4628      	mov	r0, r5
}
    a84c:	b004      	add	sp, #16
    a84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    a852:	f8d6 a000 	ldr.w	sl, [r6]
    a856:	4b2e      	ldr	r3, [pc, #184]	; (a910 <FatPartition::freeClusterCount()+0x1bc>)
    a858:	f8da 2000 	ldr.w	r2, [sl]
    a85c:	f8d6 9018 	ldr.w	r9, [r6, #24]
    a860:	6995      	ldr	r5, [r2, #24]
    a862:	429d      	cmp	r5, r3
    a864:	d146      	bne.n	a8f4 <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
    a866:	2c00      	cmp	r4, #0
    a868:	d03f      	beq.n	a8ea <FatPartition::freeClusterCount()+0x196>
    a86a:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
    a86e:	6913      	ldr	r3, [r2, #16]
    a870:	4649      	mov	r1, r9
    a872:	463a      	mov	r2, r7
    a874:	4650      	mov	r0, sl
    a876:	4798      	blx	r3
    a878:	2800      	cmp	r0, #0
    a87a:	d08c      	beq.n	a796 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    a87c:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
    a880:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    a884:	46e6      	mov	lr, ip
    a886:	bf28      	it	cs
    a888:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
    a88c:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
    a890:	42ba      	cmp	r2, r7
    a892:	d90b      	bls.n	a8ac <FatPartition::freeClusterCount()+0x158>
    a894:	9d03      	ldr	r5, [sp, #12]
    a896:	463b      	mov	r3, r7
    a898:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
    a89a:	f853 4b04 	ldr.w	r4, [r3], #4
    a89e:	b90c      	cbnz	r4, a8a4 <FatPartition::freeClusterCount()+0x150>
    a8a0:	3501      	adds	r5, #1
    a8a2:	4601      	mov	r1, r0
  while (p < e) {
    a8a4:	429a      	cmp	r2, r3
    a8a6:	d8f8      	bhi.n	a89a <FatPartition::freeClusterCount()+0x146>
    a8a8:	b101      	cbz	r1, a8ac <FatPartition::freeClusterCount()+0x158>
    a8aa:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    a8ac:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
    a8b0:	ebac 030e 	sub.w	r3, ip, lr
    a8b4:	45c8      	cmp	r8, r9
    a8b6:	9302      	str	r3, [sp, #8]
    a8b8:	d017      	beq.n	a8ea <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    a8ba:	f8da 2000 	ldr.w	r2, [sl]
    a8be:	e7d6      	b.n	a86e <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
    a8c0:	f506 700e 	add.w	r0, r6, #568	; 0x238
    a8c4:	f002 fb22 	bl	cf0c <FsCache::sync()>
    a8c8:	2800      	cmp	r0, #0
    a8ca:	f43f af64 	beq.w	a796 <FatPartition::freeClusterCount()+0x42>
    a8ce:	79f2      	ldrb	r2, [r6, #7]
    a8d0:	e771      	b.n	a7b6 <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    a8d2:	4623      	mov	r3, r4
    a8d4:	ac02      	add	r4, sp, #8
    a8d6:	463a      	mov	r2, r7
    a8d8:	4651      	mov	r1, sl
    a8da:	9401      	str	r4, [sp, #4]
    a8dc:	4640      	mov	r0, r8
    a8de:	4c0d      	ldr	r4, [pc, #52]	; (a914 <FatPartition::freeClusterCount()+0x1c0>)
    a8e0:	9400      	str	r4, [sp, #0]
    a8e2:	47a8      	blx	r5
    a8e4:	2800      	cmp	r0, #0
    a8e6:	f43f af56 	beq.w	a796 <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
    a8ea:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    a8ec:	6270      	str	r0, [r6, #36]	; 0x24
}
    a8ee:	b004      	add	sp, #16
    a8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    a8f4:	4623      	mov	r3, r4
    a8f6:	ac02      	add	r4, sp, #8
    a8f8:	463a      	mov	r2, r7
    a8fa:	4649      	mov	r1, r9
    a8fc:	9401      	str	r4, [sp, #4]
    a8fe:	4650      	mov	r0, sl
    a900:	4c05      	ldr	r4, [pc, #20]	; (a918 <FatPartition::freeClusterCount()+0x1c4>)
    a902:	9400      	str	r4, [sp, #0]
    a904:	47a8      	blx	r5
    a906:	2800      	cmp	r0, #0
    a908:	d1ef      	bne.n	a8ea <FatPartition::freeClusterCount()+0x196>
    a90a:	e744      	b.n	a796 <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
    a90c:	2000      	movs	r0, #0
    a90e:	e744      	b.n	a79a <FatPartition::freeClusterCount()+0x46>
    a910:	0000a389 	.word	0x0000a389
    a914:	0000a3cd 	.word	0x0000a3cd
    a918:	0000a401 	.word	0x0000a401

0000a91c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    a91c:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    a91e:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    a920:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    a922:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    a924:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    a926:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    a92a:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    a92e:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    a930:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    a932:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    a934:	62e1      	str	r1, [r4, #44]	; 0x2c
    a936:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    a93a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    a93e:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    a942:	6362      	str	r2, [r4, #52]	; 0x34
    a944:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    a948:	b1cd      	cbz	r5, a97e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    a94a:	2d04      	cmp	r5, #4
    a94c:	d901      	bls.n	a952 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    a94e:	2000      	movs	r0, #0
}
    a950:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    a952:	461a      	mov	r2, r3
    a954:	4619      	mov	r1, r3
    a956:	4630      	mov	r0, r6
    a958:	f002 fb04 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    a95c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    a960:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    a964:	442b      	add	r3, r5
    a966:	011d      	lsls	r5, r3, #4
    a968:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    a96c:	2800      	cmp	r0, #0
    a96e:	d0ee      	beq.n	a94e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a970:	7919      	ldrb	r1, [r3, #4]
    a972:	2900      	cmp	r1, #0
    a974:	d0eb      	beq.n	a94e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a976:	5d52      	ldrb	r2, [r2, r5]
    a978:	0652      	lsls	r2, r2, #25
    a97a:	d1e8      	bne.n	a94e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    a97c:	689d      	ldr	r5, [r3, #8]
    a97e:	2200      	movs	r2, #0
    a980:	4629      	mov	r1, r5
    a982:	4630      	mov	r0, r6
    a984:	f002 faee 	bl	cf64 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    a988:	2800      	cmp	r0, #0
    a98a:	d0e0      	beq.n	a94e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a98c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    a990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a994:	d1db      	bne.n	a94e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    a996:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    a998:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    a99a:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    a99c:	2a01      	cmp	r2, #1
    a99e:	d8d6      	bhi.n	a94e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    a9a0:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    a9a2:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a9a4:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    a9a6:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    a9a8:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    a9aa:	f04f 0300 	mov.w	r3, #0
    a9ae:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a9b0:	d044      	beq.n	aa3c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    a9b2:	2201      	movs	r2, #1
    a9b4:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    a9b6:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a9b8:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    a9ba:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a9bc:	4291      	cmp	r1, r2
    a9be:	d004      	beq.n	a9ca <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    a9c0:	2b08      	cmp	r3, #8
    a9c2:	d1f7      	bne.n	a9b4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    a9c4:	2000      	movs	r0, #0
    a9c6:	71a3      	strb	r3, [r4, #6]
}
    a9c8:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    a9ca:	461e      	mov	r6, r3
    a9cc:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    a9ce:	8ac1      	ldrh	r1, [r0, #22]
    a9d0:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    a9d2:	b909      	cbnz	r1, a9d8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    a9d4:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    a9d6:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    a9d8:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    a9da:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    a9de:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    a9e0:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    a9e2:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    a9e4:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a9e6:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    a9ea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a9ee:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    a9f2:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a9f6:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    a9f8:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    a9fc:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    a9fe:	b902      	cbnz	r2, aa02 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    aa00:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    aa02:	1aed      	subs	r5, r5, r3
    aa04:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    aa06:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    aa08:	1c5a      	adds	r2, r3, #1
    aa0a:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    aa0c:	f04f 32ff 	mov.w	r2, #4294967295
    aa10:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    aa12:	f640 72f4 	movw	r2, #4084	; 0xff4
    aa16:	4293      	cmp	r3, r2
    aa18:	d90c      	bls.n	aa34 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    aa1a:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    aa1e:	4293      	cmp	r3, r2
    aa20:	d90a      	bls.n	aa38 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    aa22:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    aa24:	2320      	movs	r3, #32
    aa26:	6222      	str	r2, [r4, #32]
  return true;
    aa28:	2001      	movs	r0, #1
    m_fatType = 12;
    aa2a:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    aa2c:	6321      	str	r1, [r4, #48]	; 0x30
    aa2e:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    aa32:	bd70      	pop	{r4, r5, r6, pc}
    aa34:	230c      	movs	r3, #12
    aa36:	e7f7      	b.n	aa28 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    aa38:	2310      	movs	r3, #16
    aa3a:	e7f5      	b.n	aa28 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    aa3c:	461e      	mov	r6, r3
    aa3e:	e7c6      	b.n	a9ce <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

0000aa40 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    aa40:	b530      	push	{r4, r5, lr}
  FatFile* vwd() {return &m_vwd;}
    aa42:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    aa46:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    aa48:	2300      	movs	r3, #0
    aa4a:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    aa4c:	a801      	add	r0, sp, #4
    aa4e:	4621      	mov	r1, r4
    aa50:	9301      	str	r3, [sp, #4]
    aa52:	f7fe fa27 	bl	8ea4 <FatFile::open(FatFile*, char const*, int)>
    aa56:	4605      	mov	r5, r0
    aa58:	b198      	cbz	r0, aa82 <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    aa5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    aa5e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    aa62:	d011      	beq.n	aa88 <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    aa64:	f10d 0e04 	add.w	lr, sp, #4
    aa68:	46a4      	mov	ip, r4
    aa6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    aa6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    aa72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    aa76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    aa7a:	f8de 3000 	ldr.w	r3, [lr]
    aa7e:	f8cc 3000 	str.w	r3, [ip]
  return true;

 fail:
  return false;
}
    aa82:	4628      	mov	r0, r5
    aa84:	b00b      	add	sp, #44	; 0x2c
    aa86:	bd30      	pop	{r4, r5, pc}
  return false;
    aa88:	461d      	mov	r5, r3
}
    aa8a:	4628      	mov	r0, r5
    aa8c:	b00b      	add	sp, #44	; 0x2c
    aa8e:	bd30      	pop	{r4, r5, pc}

0000aa90 <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
    aa90:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    aa92:	b570      	push	{r4, r5, r6, lr}
    aa94:	4604      	mov	r4, r0
  if (this == &from) return *this;
    aa96:	d021      	beq.n	aadc <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  if (m_fFile && m_fFile->close()) {
    aa98:	6b80      	ldr	r0, [r0, #56]	; 0x38
    aa9a:	460d      	mov	r5, r1
    aa9c:	b118      	cbz	r0, aaa6 <FsBaseFile::operator=(FsBaseFile const&)+0x16>
    aa9e:	f7fe f87b 	bl	8b98 <FatFile::close()>
    aaa2:	2800      	cmp	r0, #0
    aaa4:	d141      	bne.n	ab2a <FsBaseFile::operator=(FsBaseFile const&)+0x9a>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    aaa6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    aaa8:	b118      	cbz	r0, aab2 <FsBaseFile::operator=(FsBaseFile const&)+0x22>
    aaaa:	f7fc fb4f 	bl	714c <ExFatFile::close()>
    aaae:	2800      	cmp	r0, #0
    aab0:	d141      	bne.n	ab36 <FsBaseFile::operator=(FsBaseFile const&)+0xa6>
  if (from.m_fFile) {
    aab2:	6bae      	ldr	r6, [r5, #56]	; 0x38
    aab4:	b1a6      	cbz	r6, aae0 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    aab6:	4621      	mov	r1, r4
    aab8:	2024      	movs	r0, #36	; 0x24
    aaba:	f000 f8e9 	bl	ac90 <operator new(unsigned int, unsigned long*)>
    aabe:	2300      	movs	r3, #0
    aac0:	4684      	mov	ip, r0
    aac2:	8003      	strh	r3, [r0, #0]
    aac4:	7083      	strb	r3, [r0, #2]
    aac6:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    aac8:	6bad      	ldr	r5, [r5, #56]	; 0x38
    aaca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    aacc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    aad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    aad2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    aad6:	682b      	ldr	r3, [r5, #0]
    aad8:	f8cc 3000 	str.w	r3, [ip]
}
    aadc:	4620      	mov	r0, r4
    aade:	bd70      	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    aae0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    aae2:	2b00      	cmp	r3, #0
    aae4:	d0fa      	beq.n	aadc <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
    m_xFile = new (m_fileMem) ExFatFile;
    aae6:	4621      	mov	r1, r4
    aae8:	2038      	movs	r0, #56	; 0x38
    aaea:	f000 f8d1 	bl	ac90 <operator new(unsigned int, unsigned long*)>
    aaee:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    aaf2:	8646      	strh	r6, [r0, #50]	; 0x32
    aaf4:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    aaf6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    aaf8:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    aafc:	681e      	ldr	r6, [r3, #0]
    aafe:	3310      	adds	r3, #16
    ab00:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    ab04:	3010      	adds	r0, #16
    ab06:	f853 1c08 	ldr.w	r1, [r3, #-8]
    ab0a:	f853 2c04 	ldr.w	r2, [r3, #-4]
    ab0e:	4563      	cmp	r3, ip
    ab10:	f840 6c10 	str.w	r6, [r0, #-16]
    ab14:	f840 5c0c 	str.w	r5, [r0, #-12]
    ab18:	f840 1c08 	str.w	r1, [r0, #-8]
    ab1c:	f840 2c04 	str.w	r2, [r0, #-4]
    ab20:	d1ec      	bne.n	aafc <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    ab22:	681b      	ldr	r3, [r3, #0]
    ab24:	6003      	str	r3, [r0, #0]
}
    ab26:	4620      	mov	r0, r4
    ab28:	bd70      	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    ab2a:	2300      	movs	r3, #0
    ab2c:	63a3      	str	r3, [r4, #56]	; 0x38
  if (from.m_fFile) {
    ab2e:	6bae      	ldr	r6, [r5, #56]	; 0x38
    ab30:	2e00      	cmp	r6, #0
    ab32:	d1c0      	bne.n	aab6 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    ab34:	e7d4      	b.n	aae0 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_xFile = nullptr;
    ab36:	2300      	movs	r3, #0
  if (from.m_fFile) {
    ab38:	6bae      	ldr	r6, [r5, #56]	; 0x38
    m_xFile = nullptr;
    ab3a:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    ab3c:	2e00      	cmp	r6, #0
    ab3e:	d1ba      	bne.n	aab6 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    ab40:	e7ce      	b.n	aae0 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    ab42:	bf00      	nop

0000ab44 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    ab44:	b510      	push	{r4, lr}
    ab46:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    ab48:	6b80      	ldr	r0, [r0, #56]	; 0x38
    ab4a:	b110      	cbz	r0, ab52 <FsBaseFile::close()+0xe>
    ab4c:	f7fe f824 	bl	8b98 <FatFile::close()>
    ab50:	b930      	cbnz	r0, ab60 <FsBaseFile::close()+0x1c>
  if (m_xFile && m_xFile->close()) {
    ab52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    ab54:	b110      	cbz	r0, ab5c <FsBaseFile::close()+0x18>
    ab56:	f7fc faf9 	bl	714c <ExFatFile::close()>
    ab5a:	b920      	cbnz	r0, ab66 <FsBaseFile::close()+0x22>
    return true;
  }
  return false;
    ab5c:	2000      	movs	r0, #0
}
    ab5e:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    ab60:	2300      	movs	r3, #0
    ab62:	63a3      	str	r3, [r4, #56]	; 0x38
}
    ab64:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    ab66:	2300      	movs	r3, #0
    ab68:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    ab6a:	bd10      	pop	{r4, pc}

0000ab6c <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    ab6c:	2900      	cmp	r1, #0
    ab6e:	d052      	beq.n	ac16 <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    ab70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab74:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    ab76:	6b80      	ldr	r0, [r0, #56]	; 0x38
    ab78:	460d      	mov	r5, r1
    ab7a:	4617      	mov	r7, r2
    ab7c:	461e      	mov	r6, r3
    ab7e:	b110      	cbz	r0, ab86 <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    ab80:	f7fe f80a 	bl	8b98 <FatFile::close()>
    ab84:	bba0      	cbnz	r0, abf0 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    ab86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    ab88:	b110      	cbz	r0, ab90 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    ab8a:	f7fc fadf 	bl	714c <ExFatFile::close()>
    ab8e:	bbb8      	cbnz	r0, ac00 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
    ab90:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    ab94:	f1b8 0f00 	cmp.w	r8, #0
    ab98:	d011      	beq.n	abbe <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    ab9a:	4621      	mov	r1, r4
    ab9c:	2024      	movs	r0, #36	; 0x24
    ab9e:	f000 f877 	bl	ac90 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    aba2:	4633      	mov	r3, r6
    aba4:	2600      	movs	r6, #0
    aba6:	463a      	mov	r2, r7
    aba8:	8006      	strh	r6, [r0, #0]
    abaa:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    abac:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    abae:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    abb2:	f7fe f9f9 	bl	8fa8 <FatFile::open(FatVolume*, char const*, int)>
    abb6:	bb58      	cbnz	r0, ac10 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
    abb8:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    abba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    abbe:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    abc2:	b193      	cbz	r3, abea <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    abc4:	4621      	mov	r1, r4
    abc6:	2038      	movs	r0, #56	; 0x38
    abc8:	f000 f862 	bl	ac90 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    abcc:	4633      	mov	r3, r6
    abce:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    abd2:	463a      	mov	r2, r7
    abd4:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    abd8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    abda:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    abde:	f7fc fee9 	bl	79b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    abe2:	b9a8      	cbnz	r0, ac10 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    abe4:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    abe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    abea:	2000      	movs	r0, #0
}
    abec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    abf0:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    abf2:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    abf6:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    abf8:	f1b8 0f00 	cmp.w	r8, #0
    abfc:	d1cd      	bne.n	ab9a <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    abfe:	e7de      	b.n	abbe <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    ac00:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    ac02:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    ac06:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    ac08:	f1b8 0f00 	cmp.w	r8, #0
    ac0c:	d1c5      	bne.n	ab9a <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    ac0e:	e7d6      	b.n	abbe <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    ac10:	2001      	movs	r0, #1
}
    ac12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    ac16:	2000      	movs	r0, #0
}
    ac18:	4770      	bx	lr
    ac1a:	bf00      	nop

0000ac1c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac1e:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    ac20:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    ac22:	460d      	mov	r5, r1
    ac24:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
    ac26:	b110      	cbz	r0, ac2e <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    ac28:	f7fd ffb6 	bl	8b98 <FatFile::close()>
    ac2c:	bb38      	cbnz	r0, ac7e <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
    ac2e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    ac30:	b110      	cbz	r0, ac38 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    ac32:	f7fc fa8b 	bl	714c <ExFatFile::close()>
    ac36:	bb38      	cbnz	r0, ac88 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
    ac38:	6bae      	ldr	r6, [r5, #56]	; 0x38
    ac3a:	b176      	cbz	r6, ac5a <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
    ac3c:	4621      	mov	r1, r4
    ac3e:	2024      	movs	r0, #36	; 0x24
    ac40:	f000 f826 	bl	ac90 <operator new(unsigned int, unsigned long*)>
    ac44:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    ac46:	463a      	mov	r2, r7
    ac48:	8001      	strh	r1, [r0, #0]
    ac4a:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    ac4c:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    ac4e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    ac50:	f7fe fd10 	bl	9674 <FatFile::openNext(FatFile*, int)>
    ac54:	b988      	cbnz	r0, ac7a <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
    ac56:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    ac58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    ac5a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    ac5c:	2800      	cmp	r0, #0
    ac5e:	d0fb      	beq.n	ac58 <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
    ac60:	4621      	mov	r1, r4
    ac62:	2038      	movs	r0, #56	; 0x38
    ac64:	f000 f814 	bl	ac90 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    ac68:	463a      	mov	r2, r7
    ac6a:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    ac6e:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    ac70:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    ac72:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    ac74:	f7fc fea6 	bl	79c4 <ExFatFile::openNext(ExFatFile*, int)>
    ac78:	b120      	cbz	r0, ac84 <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
    ac7a:	2001      	movs	r0, #1
}
    ac7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    ac7e:	2300      	movs	r3, #0
    ac80:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    ac82:	e7d9      	b.n	ac38 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
    ac84:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    ac86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
    ac88:	2300      	movs	r3, #0
    ac8a:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    ac8c:	e7d4      	b.n	ac38 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    ac8e:	bf00      	nop

0000ac90 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    ac90:	4608      	mov	r0, r1
    ac92:	4770      	bx	lr

0000ac94 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    ac94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    ac98:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    ac9a:	4604      	mov	r4, r0
    ac9c:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    ac9e:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    aca2:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    aca6:	4601      	mov	r1, r0
    aca8:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    acac:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    acae:	f7ff ffef 	bl	ac90 <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    acb2:	4642      	mov	r2, r8
  ExFatPartition() {}
    acb4:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    acb8:	4605      	mov	r5, r0
    acba:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    acbe:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    acc2:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    acc6:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    acca:	f7fd fdf9 	bl	88c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    acce:	bba0      	cbnz	r0, ad3a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    acd0:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    acd2:	4621      	mov	r1, r4
    acd4:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    acd8:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    acdc:	f7ff ffd8 	bl	ac90 <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    ace0:	2302      	movs	r3, #2
    ace2:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    ace4:	4642      	mov	r2, r8
    ace6:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    acea:	4605      	mov	r5, r0
    acec:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    acf0:	7203      	strb	r3, [r0, #8]
    acf2:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    acf6:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    acfa:	f7ff fe0f 	bl	a91c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    acfe:	b938      	cbnz	r0, ad10 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    ad00:	2300      	movs	r3, #0
    ad02:	4a1a      	ldr	r2, [pc, #104]	; (ad6c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    ad04:	4618      	mov	r0, r3
  m_cwv = nullptr;
    ad06:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    ad08:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    ad10:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    ad14:	4630      	mov	r0, r6
    ad16:	f7fd ff3f 	bl	8b98 <FatFile::close()>
    return m_vwd.openRoot(this);
    ad1a:	4629      	mov	r1, r5
    ad1c:	4630      	mov	r0, r6
    ad1e:	f7fe f979 	bl	9014 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    ad22:	2800      	cmp	r0, #0
    ad24:	d0ec      	beq.n	ad00 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    ad26:	4b12      	ldr	r3, [pc, #72]	; (ad70 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    ad28:	681a      	ldr	r2, [r3, #0]
    ad2a:	b9aa      	cbnz	r2, ad58 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    ad2c:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    ad2e:	4b0f      	ldr	r3, [pc, #60]	; (ad6c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    ad30:	b1af      	cbz	r7, ad5e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    ad32:	2001      	movs	r0, #1
    m_cwv = this;
    ad34:	601c      	str	r4, [r3, #0]
}
    ad36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    ad3a:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    ad3e:	4630      	mov	r0, r6
    ad40:	f7fc fa04 	bl	714c <ExFatFile::close()>
    return m_vwd.openRoot(this);
    ad44:	4629      	mov	r1, r5
    ad46:	4630      	mov	r0, r6
    ad48:	f7fc fa2e 	bl	71a8 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    ad4c:	2800      	cmp	r0, #0
    ad4e:	d0bf      	beq.n	acd0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    ad50:	4b08      	ldr	r3, [pc, #32]	; (ad74 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    ad52:	681a      	ldr	r2, [r3, #0]
    ad54:	2a00      	cmp	r2, #0
    ad56:	d0e9      	beq.n	ad2c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    ad58:	4b04      	ldr	r3, [pc, #16]	; (ad6c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    ad5a:	2f00      	cmp	r7, #0
    ad5c:	d1e9      	bne.n	ad32 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    ad5e:	681a      	ldr	r2, [r3, #0]
    ad60:	2a00      	cmp	r2, #0
    ad62:	d0e6      	beq.n	ad32 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    ad64:	2001      	movs	r0, #1
}
    ad66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad6a:	bf00      	nop
    ad6c:	20015168 	.word	0x20015168
    ad70:	2001516c 	.word	0x2001516c
    ad74:	20015134 	.word	0x20015134

0000ad78 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    ad78:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    ad7a:	2500      	movs	r5, #0
    ad7c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    ad80:	4604      	mov	r4, r0
    ad82:	6045      	str	r5, [r0, #4]
    ad84:	7305      	strb	r5, [r0, #12]
    ad86:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
    ad88:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    ad8c:	4d03      	ldr	r5, [pc, #12]	; (ad9c <FsVolume::open(char const*, int)+0x24>)
    ad8e:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    ad92:	f7ff feeb 	bl	ab6c <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    ad96:	4620      	mov	r0, r4
    ad98:	bd70      	pop	{r4, r5, r6, pc}
    ad9a:	bf00      	nop
    ad9c:	20000c60 	.word	0x20000c60

0000ada0 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    ada0:	f04f 30ff 	mov.w	r0, #4294967295
    ada4:	4770      	bx	lr
    ada6:	bf00      	nop

0000ada8 <SharedSpiCard::errorCode() const>:
  }
    ada8:	7c40      	ldrb	r0, [r0, #17]
    adaa:	4770      	bx	lr

0000adac <SharedSpiCard::errorData() const>:
  }
    adac:	7d00      	ldrb	r0, [r0, #20]
    adae:	4770      	bx	lr

0000adb0 <SharedSpiCard::type() const>:
  }
    adb0:	7d40      	ldrb	r0, [r0, #21]
    adb2:	4770      	bx	lr

0000adb4 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    adb4:	2001      	movs	r0, #1
    adb6:	4770      	bx	lr

0000adb8 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    adb8:	7f00      	ldrb	r0, [r0, #28]
    adba:	4770      	bx	lr

0000adbc <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    adbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    adc0:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    adc2:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    adc4:	4605      	mov	r5, r0
    adc6:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    adc8:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    adca:	4691      	mov	r9, r2
    adcc:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    adce:	d028      	beq.n	ae22 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    add0:	682b      	ldr	r3, [r5, #0]
    add2:	4621      	mov	r1, r4
    add4:	4628      	mov	r0, r5
    add6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    add8:	4798      	blx	r3
    adda:	b198      	cbz	r0, ae04 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    addc:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    adde:	f1b9 0f00 	cmp.w	r9, #0
    ade2:	d012      	beq.n	ae0a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    ade4:	eb04 0809 	add.w	r8, r4, r9
    ade8:	e001      	b.n	adee <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    adea:	45a0      	cmp	r8, r4
    adec:	d00d      	beq.n	ae0a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    adee:	4639      	mov	r1, r7
    adf0:	4620      	mov	r0, r4
    adf2:	47b0      	blx	r6
    if (!writeData(src)) {
    adf4:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    adf6:	4601      	mov	r1, r0
    if (!writeData(src)) {
    adf8:	4628      	mov	r0, r5
    adfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    adfc:	3401      	adds	r4, #1
    if (!writeData(src)) {
    adfe:	4798      	blx	r3
    ae00:	2800      	cmp	r0, #0
    ae02:	d1f2      	bne.n	adea <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    ae04:	2000      	movs	r0, #0
}
    ae06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    ae0a:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ae0c:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    ae0e:	444b      	add	r3, r9
    ae10:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ae12:	2800      	cmp	r0, #0
    ae14:	d1f7      	bne.n	ae06 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    ae16:	682b      	ldr	r3, [r5, #0]
    ae18:	4628      	mov	r0, r5
    ae1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    ae1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    ae20:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ae22:	6983      	ldr	r3, [r0, #24]
    ae24:	428b      	cmp	r3, r1
    ae26:	d1d3      	bne.n	add0 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    ae28:	e7d9      	b.n	adde <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    ae2a:	bf00      	nop

0000ae2c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    ae2c:	4770      	bx	lr
    ae2e:	bf00      	nop

0000ae30 <SharedSpiCard::end()>:
    m_spiDriver.end();
    ae30:	3004      	adds	r0, #4
    ae32:	f002 b817 	b.w	ce64 <SdSpiArduinoDriver::end()>
    ae36:	bf00      	nop

0000ae38 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    ae38:	b510      	push	{r4, lr}
    ae3a:	4604      	mov	r4, r0
    ae3c:	2120      	movs	r1, #32
    ae3e:	f003 fc83 	bl	e748 <operator delete(void*, unsigned int)>
    ae42:	4620      	mov	r0, r4
    ae44:	bd10      	pop	{r4, pc}
    ae46:	bf00      	nop

0000ae48 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    ae48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae4c:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ae4e:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    ae50:	4605      	mov	r5, r0
    ae52:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ae54:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    ae56:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ae58:	d024      	beq.n	aea4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    ae5a:	682b      	ldr	r3, [r5, #0]
    ae5c:	4631      	mov	r1, r6
    ae5e:	4628      	mov	r0, r5
    ae60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ae62:	4798      	blx	r3
    ae64:	b178      	cbz	r0, ae86 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    ae66:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    ae68:	b187      	cbz	r7, ae8c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    ae6a:	2600      	movs	r6, #0
    ae6c:	e001      	b.n	ae72 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    ae6e:	42b7      	cmp	r7, r6
    ae70:	d00c      	beq.n	ae8c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    ae72:	682a      	ldr	r2, [r5, #0]
    ae74:	4621      	mov	r1, r4
    ae76:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    ae78:	3601      	adds	r6, #1
    if (!writeData(src)) {
    ae7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    ae7c:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    ae80:	4790      	blx	r2
    ae82:	2800      	cmp	r0, #0
    ae84:	d1f3      	bne.n	ae6e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    ae86:	2000      	movs	r0, #0
}
    ae88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    ae8c:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ae8e:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    ae90:	443b      	add	r3, r7
    ae92:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ae94:	2800      	cmp	r0, #0
    ae96:	d1f7      	bne.n	ae88 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    ae98:	682b      	ldr	r3, [r5, #0]
    ae9a:	4628      	mov	r0, r5
    ae9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    ae9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    aea2:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    aea4:	6983      	ldr	r3, [r0, #24]
    aea6:	428b      	cmp	r3, r1
    aea8:	d1d7      	bne.n	ae5a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    aeaa:	e7dd      	b.n	ae68 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

0000aeac <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    aeac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aeb0:	4e20      	ldr	r6, [pc, #128]	; (af34 <SharedSpiCard::writeStop()+0x88>)
    aeb2:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    aeb4:	f100 0804 	add.w	r8, r0, #4
    aeb8:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    aeba:	f505 7516 	add.w	r5, r5, #600	; 0x258
    aebe:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    aec0:	e003      	b.n	aeca <SharedSpiCard::writeStop()+0x1e>
    aec2:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    aec4:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    aec6:	041b      	lsls	r3, r3, #16
    aec8:	d410      	bmi.n	aeec <SharedSpiCard::writeStop()+0x40>
    aeca:	4640      	mov	r0, r8
    aecc:	f001 ffce 	bl	ce6c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    aed0:	28ff      	cmp	r0, #255	; 0xff
    aed2:	4604      	mov	r4, r0
    aed4:	d1f5      	bne.n	aec2 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    aed6:	21fd      	movs	r1, #253	; 0xfd
    aed8:	4640      	mov	r0, r8
    aeda:	f001 ffe5 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    aede:	7cbb      	ldrb	r3, [r7, #18]
    aee0:	b9cb      	cbnz	r3, af16 <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    aee2:	2300      	movs	r3, #0
    aee4:	2001      	movs	r0, #1
    aee6:	74fb      	strb	r3, [r7, #19]
}
    aee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    aeec:	231e      	movs	r3, #30
  if (m_spiActive) {
    aeee:	7cb8      	ldrb	r0, [r7, #18]
    aef0:	747b      	strb	r3, [r7, #17]
    aef2:	2800      	cmp	r0, #0
    aef4:	d0f8      	beq.n	aee8 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    aef6:	7c38      	ldrb	r0, [r7, #16]
    aef8:	2101      	movs	r1, #1
    aefa:	f001 fef7 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    aefe:	21ff      	movs	r1, #255	; 0xff
    af00:	4640      	mov	r0, r8
    af02:	f001 ffd1 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    af06:	4640      	mov	r0, r8
    af08:	f001 ff84 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    af0c:	2300      	movs	r3, #0
  return false;
    af0e:	4618      	mov	r0, r3
    m_spiActive = false;
    af10:	74bb      	strb	r3, [r7, #18]
}
    af12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    af16:	2101      	movs	r1, #1
    af18:	7c38      	ldrb	r0, [r7, #16]
    af1a:	f001 fee7 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    af1e:	4621      	mov	r1, r4
    af20:	4640      	mov	r0, r8
    af22:	f001 ffc1 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    af26:	4640      	mov	r0, r8
    af28:	f001 ff74 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    af2c:	2300      	movs	r3, #0
    af2e:	74bb      	strb	r3, [r7, #18]
}
    af30:	e7d7      	b.n	aee2 <SharedSpiCard::writeStop()+0x36>
    af32:	bf00      	nop
    af34:	20016020 	.word	0x20016020

0000af38 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    af38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    af3c:	7cc3      	ldrb	r3, [r0, #19]
    af3e:	2b01      	cmp	r3, #1
    af40:	d035      	beq.n	afae <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    af42:	7c86      	ldrb	r6, [r0, #18]
    af44:	4604      	mov	r4, r0
    af46:	b14e      	cbz	r6, af5c <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    af48:	3004      	adds	r0, #4
    af4a:	f001 ff8f 	bl	ce6c <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    af4e:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    af52:	bf18      	it	ne
    af54:	2501      	movne	r5, #1
}
    af56:	4628      	mov	r0, r5
    af58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    af5c:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    af5e:	f04f 0801 	mov.w	r8, #1
    af62:	4638      	mov	r0, r7
    af64:	f001 ff4c 	bl	ce00 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    af68:	4631      	mov	r1, r6
    af6a:	7c20      	ldrb	r0, [r4, #16]
    af6c:	f001 febe 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    af70:	21ff      	movs	r1, #255	; 0xff
    af72:	4638      	mov	r0, r7
    af74:	f001 ff98 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    af78:	4638      	mov	r0, r7
    af7a:	f884 8012 	strb.w	r8, [r4, #18]
    af7e:	f001 ff75 	bl	ce6c <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    af82:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    af84:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    af88:	bf18      	it	ne
    af8a:	2501      	movne	r5, #1
  if (m_spiActive) {
    af8c:	2b00      	cmp	r3, #0
    af8e:	d0e2      	beq.n	af56 <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    af90:	4641      	mov	r1, r8
    af92:	7c20      	ldrb	r0, [r4, #16]
    af94:	f001 feaa 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    af98:	21ff      	movs	r1, #255	; 0xff
    af9a:	4638      	mov	r0, r7
    af9c:	f001 ff84 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    afa0:	4638      	mov	r0, r7
    afa2:	f001 ff37 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
}
    afa6:	4628      	mov	r0, r5
    m_spiActive = false;
    afa8:	74a6      	strb	r6, [r4, #18]
}
    afaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    afae:	2500      	movs	r5, #0
}
    afb0:	4628      	mov	r0, r5
    afb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    afb6:	bf00      	nop

0000afb8 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    afb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    afbc:	4f20      	ldr	r7, [pc, #128]	; (b040 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    afbe:	4604      	mov	r4, r0
    afc0:	4688      	mov	r8, r1
    afc2:	4691      	mov	r9, r2
    afc4:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    afc6:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    afc8:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    afcc:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    afce:	e003      	b.n	afd8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    afd0:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    afd2:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    afd4:	041b      	lsls	r3, r3, #16
    afd6:	d40d      	bmi.n	aff4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    afd8:	4630      	mov	r0, r6
    afda:	f001 ff47 	bl	ce6c <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    afde:	28ff      	cmp	r0, #255	; 0xff
    afe0:	7520      	strb	r0, [r4, #20]
    afe2:	d0f5      	beq.n	afd0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    afe4:	28fe      	cmp	r0, #254	; 0xfe
    afe6:	d01a      	beq.n	b01e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    afe8:	2318      	movs	r3, #24
  if (m_spiActive) {
    afea:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    afec:	7463      	strb	r3, [r4, #17]
    afee:	b930      	cbnz	r0, affe <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    aff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aff4:	231d      	movs	r3, #29
  if (m_spiActive) {
    aff6:	7ca0      	ldrb	r0, [r4, #18]
    aff8:	7463      	strb	r3, [r4, #17]
    affa:	2800      	cmp	r0, #0
    affc:	d0f8      	beq.n	aff0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    affe:	7c20      	ldrb	r0, [r4, #16]
    b000:	2101      	movs	r1, #1
    b002:	f001 fe73 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b006:	21ff      	movs	r1, #255	; 0xff
    b008:	4630      	mov	r0, r6
    b00a:	f001 ff4d 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b00e:	4630      	mov	r0, r6
    b010:	f001 ff00 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b014:	2300      	movs	r3, #0
  return false;
    b016:	4618      	mov	r0, r3
    m_spiActive = false;
    b018:	74a3      	strb	r3, [r4, #18]
}
    b01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    b01e:	464a      	mov	r2, r9
    b020:	4641      	mov	r1, r8
    b022:	4630      	mov	r0, r6
    b024:	f001 ff2e 	bl	ce84 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    b028:	7520      	strb	r0, [r4, #20]
    b02a:	b938      	cbnz	r0, b03c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    b02c:	4630      	mov	r0, r6
    b02e:	f001 ff1d 	bl	ce6c <SdSpiArduinoDriver::receive()>
    b032:	4630      	mov	r0, r6
    b034:	f001 ff1a 	bl	ce6c <SdSpiArduinoDriver::receive()>
  return true;
    b038:	2001      	movs	r0, #1
    b03a:	e7d9      	b.n	aff0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    b03c:	2325      	movs	r3, #37	; 0x25
    b03e:	e7d4      	b.n	afea <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    b040:	20016020 	.word	0x20016020

0000b044 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    b044:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    b046:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    b048:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    b04a:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    b04c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    b04e:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    b050:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    b052:	f000 f85b 	bl	b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b056:	b9b0      	cbnz	r0, b086 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    b058:	7ca6      	ldrb	r6, [r4, #18]
    b05a:	b91e      	cbnz	r6, b064 <SharedSpiCard::readStop()+0x20>
  return true;
    b05c:	2601      	movs	r6, #1
}
    b05e:	4630      	mov	r0, r6
    b060:	b003      	add	sp, #12
    b062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    b064:	4605      	mov	r5, r0
    b066:	2101      	movs	r1, #1
    b068:	7c20      	ldrb	r0, [r4, #16]
    b06a:	f001 fe3f 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b06e:	1d20      	adds	r0, r4, #4
    b070:	21ff      	movs	r1, #255	; 0xff
    b072:	9001      	str	r0, [sp, #4]
    b074:	f001 ff18 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b078:	9801      	ldr	r0, [sp, #4]
    b07a:	f001 fecb 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    b07e:	4630      	mov	r0, r6
    m_spiActive = false;
    b080:	74a5      	strb	r5, [r4, #18]
}
    b082:	b003      	add	sp, #12
    b084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    b086:	2309      	movs	r3, #9
  if (m_spiActive) {
    b088:	7ca6      	ldrb	r6, [r4, #18]
    b08a:	7463      	strb	r3, [r4, #17]
    b08c:	2e00      	cmp	r6, #0
    b08e:	d0e6      	beq.n	b05e <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    b090:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b092:	7c20      	ldrb	r0, [r4, #16]
    b094:	2101      	movs	r1, #1
}
    b096:	463e      	mov	r6, r7
    b098:	f001 fe28 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b09c:	21ff      	movs	r1, #255	; 0xff
    b09e:	4628      	mov	r0, r5
    b0a0:	f001 ff02 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b0a4:	4628      	mov	r0, r5
    b0a6:	f001 feb5 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
}
    b0aa:	4630      	mov	r0, r6
    m_spiActive = false;
    b0ac:	74a7      	strb	r7, [r4, #18]
}
    b0ae:	b003      	add	sp, #12
    b0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0b2:	bf00      	nop

0000b0b4 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    b0b4:	7cc2      	ldrb	r2, [r0, #19]
    b0b6:	2a02      	cmp	r2, #2
    b0b8:	d003      	beq.n	b0c2 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    b0ba:	2a01      	cmp	r2, #1
    b0bc:	d004      	beq.n	b0c8 <SharedSpiCard::syncDevice()+0x14>
}
    b0be:	2001      	movs	r0, #1
    b0c0:	4770      	bx	lr
    return writeStop();
    b0c2:	6803      	ldr	r3, [r0, #0]
    b0c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b0c6:	4718      	bx	r3
    return readStop();
    b0c8:	f7ff bfbc 	b.w	b044 <SharedSpiCard::readStop()>

0000b0cc <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    b0cc:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    b0ce:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    b0d0:	460d      	mov	r5, r1
    b0d2:	490d      	ldr	r1, [pc, #52]	; (b108 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    b0d4:	4604      	mov	r4, r0
  if (!syncDevice()) {
    b0d6:	6a1a      	ldr	r2, [r3, #32]
    b0d8:	428a      	cmp	r2, r1
    b0da:	d10c      	bne.n	b0f6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    b0dc:	7cc2      	ldrb	r2, [r0, #19]
    b0de:	2a02      	cmp	r2, #2
    b0e0:	d004      	beq.n	b0ec <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    b0e2:	2a01      	cmp	r2, #1
    b0e4:	d00b      	beq.n	b0fe <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    b0e6:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    b0e8:	7725      	strb	r5, [r4, #28]
}
    b0ea:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    b0ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b0ee:	4798      	blx	r3
  if (!syncDevice()) {
    b0f0:	2800      	cmp	r0, #0
    b0f2:	d1f8      	bne.n	b0e6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    b0f4:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    b0f6:	4790      	blx	r2
    b0f8:	2800      	cmp	r0, #0
    b0fa:	d0fb      	beq.n	b0f4 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    b0fc:	e7f3      	b.n	b0e6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    b0fe:	f7ff ffa1 	bl	b044 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    b102:	2800      	cmp	r0, #0
    b104:	d0f6      	beq.n	b0f4 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    b106:	e7ee      	b.n	b0e6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    b108:	0000b0b5 	.word	0x0000b0b5

0000b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    b10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    b110:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    b112:	b082      	sub	sp, #8
    b114:	460f      	mov	r7, r1
    b116:	4935      	ldr	r1, [pc, #212]	; (b1ec <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    b118:	9201      	str	r2, [sp, #4]
    b11a:	4606      	mov	r6, r0
  if (!syncDevice()) {
    b11c:	6a1a      	ldr	r2, [r3, #32]
    b11e:	428a      	cmp	r2, r1
    b120:	d15e      	bne.n	b1e0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    b122:	7cc2      	ldrb	r2, [r0, #19]
    b124:	2a02      	cmp	r2, #2
    b126:	d041      	beq.n	b1ac <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    b128:	2a01      	cmp	r2, #1
    b12a:	d05b      	beq.n	b1e4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    b12c:	7cb4      	ldrb	r4, [r6, #18]
    b12e:	2c00      	cmp	r4, #0
    b130:	d047      	beq.n	b1c2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    b132:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    b134:	2f0c      	cmp	r7, #12
    b136:	d011      	beq.n	b15c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    b138:	f8df 80b4 	ldr.w	r8, [pc, #180]	; b1f0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    b13c:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    b140:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    b144:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    b146:	e004      	b.n	b152 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    b148:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    b14c:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    b14e:	041a      	lsls	r2, r3, #16
    b150:	d434      	bmi.n	b1bc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    b152:	4628      	mov	r0, r5
    b154:	f001 fe8a 	bl	ce6c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    b158:	28ff      	cmp	r0, #255	; 0xff
    b15a:	d1f5      	bne.n	b148 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    b15c:	f10d 0804 	add.w	r8, sp, #4
    b160:	ac02      	add	r4, sp, #8
    b162:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    b166:	4628      	mov	r0, r5
    b168:	f001 fe9e 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    b16c:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    b170:	4628      	mov	r0, r5
    b172:	f001 fe99 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    b176:	45a0      	cmp	r8, r4
    b178:	d1f8      	bne.n	b16c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    b17a:	2f00      	cmp	r7, #0
    b17c:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    b17e:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    b182:	bf0c      	ite	eq
    b184:	2195      	moveq	r1, #149	; 0x95
    b186:	2187      	movne	r1, #135	; 0x87
    b188:	f001 fe8e 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    b18c:	4628      	mov	r0, r5
    b18e:	f001 fe6d 	bl	ce6c <SdSpiArduinoDriver::receive()>
    b192:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    b194:	3c01      	subs	r4, #1
    b196:	f001 fe69 	bl	ce6c <SdSpiArduinoDriver::receive()>
    b19a:	0603      	lsls	r3, r0, #24
    b19c:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    b19e:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    b1a0:	d501      	bpl.n	b1a6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    b1a2:	2c00      	cmp	r4, #0
    b1a4:	d1f5      	bne.n	b192 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    b1a6:	b002      	add	sp, #8
    b1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    b1ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b1ae:	4798      	blx	r3
  if (!syncDevice()) {
    b1b0:	2800      	cmp	r0, #0
    b1b2:	d1bb      	bne.n	b12c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    b1b4:	20ff      	movs	r0, #255	; 0xff
}
    b1b6:	b002      	add	sp, #8
    b1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    b1bc:	2f00      	cmp	r7, #0
    b1be:	d0cd      	beq.n	b15c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    b1c0:	e7f8      	b.n	b1b4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    b1c2:	1d35      	adds	r5, r6, #4
    b1c4:	4628      	mov	r0, r5
    b1c6:	f001 fe1b 	bl	ce00 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    b1ca:	4621      	mov	r1, r4
    b1cc:	7c30      	ldrb	r0, [r6, #16]
    b1ce:	f001 fd8d 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b1d2:	21ff      	movs	r1, #255	; 0xff
    b1d4:	4628      	mov	r0, r5
    b1d6:	f001 fe67 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    b1da:	2301      	movs	r3, #1
    b1dc:	74b3      	strb	r3, [r6, #18]
}
    b1de:	e7a9      	b.n	b134 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    b1e0:	4790      	blx	r2
    b1e2:	e7e5      	b.n	b1b0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    b1e4:	f7ff ff2e 	bl	b044 <SharedSpiCard::readStop()>
    b1e8:	e7e2      	b.n	b1b0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    b1ea:	bf00      	nop
    b1ec:	0000b0b5 	.word	0x0000b0b5
    b1f0:	20016020 	.word	0x20016020

0000b1f4 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    b1f6:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    b1f8:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    b1fa:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    b1fc:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    b1fe:	f7ff ff85 	bl	b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b202:	b9e0      	cbnz	r0, b23e <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    b204:	1d37      	adds	r7, r6, #4
    b206:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    b208:	4638      	mov	r0, r7
    b20a:	f001 fe2f 	bl	ce6c <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    b20e:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    b212:	42a5      	cmp	r5, r4
    b214:	d1f8      	bne.n	b208 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    b216:	7cb4      	ldrb	r4, [r6, #18]
    b218:	b914      	cbnz	r4, b220 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    b21a:	2401      	movs	r4, #1
}
    b21c:	4620      	mov	r0, r4
    b21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    b220:	7c30      	ldrb	r0, [r6, #16]
    b222:	2101      	movs	r1, #1
    b224:	f001 fd62 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b228:	21ff      	movs	r1, #255	; 0xff
    b22a:	4638      	mov	r0, r7
    b22c:	f001 fe3c 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b230:	4638      	mov	r0, r7
    b232:	f001 fdef 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b236:	2300      	movs	r3, #0
}
    b238:	4620      	mov	r0, r4
    m_spiActive = false;
    b23a:	74b3      	strb	r3, [r6, #18]
}
    b23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    b23e:	2312      	movs	r3, #18
  if (m_spiActive) {
    b240:	7cb4      	ldrb	r4, [r6, #18]
    b242:	7473      	strb	r3, [r6, #17]
    b244:	2c00      	cmp	r4, #0
    b246:	d0e9      	beq.n	b21c <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    b248:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    b24a:	7c30      	ldrb	r0, [r6, #16]
    b24c:	2101      	movs	r1, #1
    b24e:	f001 fd4d 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b252:	21ff      	movs	r1, #255	; 0xff
    b254:	4620      	mov	r0, r4
    b256:	f001 fe27 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b25a:	4620      	mov	r0, r4
    b25c:	f001 fdda 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b260:	2300      	movs	r3, #0
  return false;
    b262:	461c      	mov	r4, r3
    m_spiActive = false;
    b264:	74b3      	strb	r3, [r6, #18]
}
    b266:	4620      	mov	r0, r4
    b268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b26a:	bf00      	nop

0000b26c <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    b26c:	b570      	push	{r4, r5, r6, lr}
    b26e:	4616      	mov	r6, r2
    b270:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    b272:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    b274:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    b276:	f7ff ff49 	bl	b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b27a:	b1b0      	cbz	r0, b2aa <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    b27c:	231b      	movs	r3, #27
    b27e:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b280:	7ca0      	ldrb	r0, [r4, #18]
    b282:	b908      	cbnz	r0, b288 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    b284:	b002      	add	sp, #8
    b286:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b288:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b28a:	7c20      	ldrb	r0, [r4, #16]
    b28c:	2101      	movs	r1, #1
    b28e:	f001 fd2d 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b292:	21ff      	movs	r1, #255	; 0xff
    b294:	4628      	mov	r0, r5
    b296:	f001 fe07 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b29a:	4628      	mov	r0, r5
    b29c:	f001 fdba 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b2a0:	2300      	movs	r3, #0
  return false;
    b2a2:	4618      	mov	r0, r3
    m_spiActive = false;
    b2a4:	74a3      	strb	r3, [r4, #18]
}
    b2a6:	b002      	add	sp, #8
    b2a8:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    b2aa:	4605      	mov	r5, r0
    b2ac:	2210      	movs	r2, #16
    b2ae:	4631      	mov	r1, r6
    b2b0:	4620      	mov	r0, r4
    b2b2:	f7ff fe81 	bl	afb8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b2b6:	2800      	cmp	r0, #0
    b2b8:	d0e2      	beq.n	b280 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    b2ba:	7ca6      	ldrb	r6, [r4, #18]
    b2bc:	2e00      	cmp	r6, #0
    b2be:	d0e1      	beq.n	b284 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    b2c0:	7c20      	ldrb	r0, [r4, #16]
    b2c2:	2101      	movs	r1, #1
    b2c4:	f001 fd12 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b2c8:	1d20      	adds	r0, r4, #4
    b2ca:	21ff      	movs	r1, #255	; 0xff
    b2cc:	9001      	str	r0, [sp, #4]
    b2ce:	f001 fdeb 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b2d2:	9801      	ldr	r0, [sp, #4]
    b2d4:	f001 fd9e 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
}
    b2d8:	4630      	mov	r0, r6
    m_spiActive = false;
    b2da:	74a5      	strb	r5, [r4, #18]
}
    b2dc:	b002      	add	sp, #8
    b2de:	bd70      	pop	{r4, r5, r6, pc}

0000b2e0 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    b2e0:	6803      	ldr	r3, [r0, #0]
    b2e2:	4a25      	ldr	r2, [pc, #148]	; (b378 <SharedSpiCard::sectorCount()+0x98>)
    b2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b2e6:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    b2e8:	b500      	push	{lr}
    b2ea:	b085      	sub	sp, #20
    b2ec:	d10f      	bne.n	b30e <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    b2ee:	466a      	mov	r2, sp
    b2f0:	2109      	movs	r1, #9
    b2f2:	f7ff ffbb 	bl	b26c <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    b2f6:	b138      	cbz	r0, b308 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    b2f8:	f89d 3000 	ldrb.w	r3, [sp]
    b2fc:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    b300:	d008      	beq.n	b314 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    b302:	2b40      	cmp	r3, #64	; 0x40
    b304:	d027      	beq.n	b356 <SharedSpiCard::sectorCount()+0x76>
    b306:	2000      	movs	r0, #0
}
    b308:	b005      	add	sp, #20
    b30a:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    b30e:	4669      	mov	r1, sp
    b310:	4798      	blx	r3
    b312:	e7f0      	b.n	b2f6 <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    b314:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    b318:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    b31c:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    b320:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b324:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    b328:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    b32a:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b32e:	0080      	lsls	r0, r0, #2
    b330:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b334:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    b338:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b33c:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b340:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b344:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b348:	4413      	add	r3, r2
    b34a:	3001      	adds	r0, #1
    b34c:	3b07      	subs	r3, #7
    b34e:	4098      	lsls	r0, r3
}
    b350:	b005      	add	sp, #20
    b352:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b356:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    b35a:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b35e:	3001      	adds	r0, #1
    b360:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    b364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b368:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    b36c:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    b370:	0280      	lsls	r0, r0, #10
    b372:	b005      	add	sp, #20
    b374:	f85d fb04 	ldr.w	pc, [sp], #4
    b378:	0000b69d 	.word	0x0000b69d

0000b37c <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    b37c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    b37e:	460a      	mov	r2, r1
    b380:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    b382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    b384:	b083      	sub	sp, #12
    b386:	4d16      	ldr	r5, [pc, #88]	; (b3e0 <SharedSpiCard::readStart(unsigned long)+0x64>)
    b388:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    b38a:	42ab      	cmp	r3, r5
    b38c:	d124      	bne.n	b3d8 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    b38e:	7d40      	ldrb	r0, [r0, #21]
    b390:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    b392:	f04f 0112 	mov.w	r1, #18
    b396:	4620      	mov	r0, r4
    sector <<= 9;
    b398:	bf18      	it	ne
    b39a:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    b39c:	f7ff feb6 	bl	b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b3a0:	b920      	cbnz	r0, b3ac <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    b3a2:	2301      	movs	r3, #1
  return true;
    b3a4:	4618      	mov	r0, r3
  m_state = READ_STATE;
    b3a6:	74e3      	strb	r3, [r4, #19]
}
    b3a8:	b003      	add	sp, #12
    b3aa:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    b3ac:	230c      	movs	r3, #12
  if (m_spiActive) {
    b3ae:	7ca0      	ldrb	r0, [r4, #18]
    b3b0:	7463      	strb	r3, [r4, #17]
    b3b2:	2800      	cmp	r0, #0
    b3b4:	d0f8      	beq.n	b3a8 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    b3b6:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b3b8:	7c20      	ldrb	r0, [r4, #16]
    b3ba:	2101      	movs	r1, #1
    b3bc:	f001 fc96 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b3c0:	21ff      	movs	r1, #255	; 0xff
    b3c2:	4628      	mov	r0, r5
    b3c4:	f001 fd70 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b3c8:	4628      	mov	r0, r5
    b3ca:	f001 fd23 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b3ce:	2300      	movs	r3, #0
}
    b3d0:	4618      	mov	r0, r3
    m_spiActive = false;
    b3d2:	74a3      	strb	r3, [r4, #18]
}
    b3d4:	b003      	add	sp, #12
    b3d6:	bd30      	pop	{r4, r5, pc}
    b3d8:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    b3da:	4798      	blx	r3
    b3dc:	9a01      	ldr	r2, [sp, #4]
    b3de:	e7d7      	b.n	b390 <SharedSpiCard::readStart(unsigned long)+0x14>
    b3e0:	0000adb1 	.word	0x0000adb1

0000b3e4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3e6:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    b3e8:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    b3ea:	4606      	mov	r6, r0
    b3ec:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    b3ee:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    b3f0:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    b3f2:	d102      	bne.n	b3fa <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    b3f4:	6983      	ldr	r3, [r0, #24]
    b3f6:	428b      	cmp	r3, r1
    b3f8:	d005      	beq.n	b406 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    b3fa:	4629      	mov	r1, r5
    b3fc:	4630      	mov	r0, r6
    b3fe:	f7ff ffbd 	bl	b37c <SharedSpiCard::readStart(unsigned long)>
    b402:	b180      	cbz	r0, b426 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    b404:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    b406:	b187      	cbz	r7, b42a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    b408:	2500      	movs	r5, #0
    b40a:	e001      	b.n	b410 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    b40c:	42af      	cmp	r7, r5
    b40e:	d00c      	beq.n	b42a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    b410:	4621      	mov	r1, r4
    b412:	f44f 7200 	mov.w	r2, #512	; 0x200
    b416:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    b418:	3501      	adds	r5, #1
    b41a:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    b41e:	f7ff fdcb 	bl	afb8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    b422:	2800      	cmp	r0, #0
    b424:	d1f2      	bne.n	b40c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    b426:	2000      	movs	r0, #0
}
    b428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    b42a:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b42c:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    b42e:	443b      	add	r3, r7
    b430:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b432:	2800      	cmp	r0, #0
    b434:	d1f8      	bne.n	b428 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    b436:	4630      	mov	r0, r6
}
    b438:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    b43c:	f7ff be02 	b.w	b044 <SharedSpiCard::readStop()>

0000b440 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b444:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    b446:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b448:	4606      	mov	r6, r0
    b44a:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    b44c:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b44e:	4615      	mov	r5, r2
    b450:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    b454:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    b458:	d102      	bne.n	b460 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    b45a:	6983      	ldr	r3, [r0, #24]
    b45c:	428b      	cmp	r3, r1
    b45e:	d005      	beq.n	b46c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    b460:	4621      	mov	r1, r4
    b462:	4630      	mov	r0, r6
    b464:	f7ff ff8a 	bl	b37c <SharedSpiCard::readStart(unsigned long)>
    b468:	b1b0      	cbz	r0, b498 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    b46a:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    b46c:	f1bb 0f00 	cmp.w	fp, #0
    b470:	d015      	beq.n	b49e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    b472:	eb04 0a0b 	add.w	sl, r4, fp
    b476:	e002      	b.n	b47e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    b478:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    b47a:	45a2      	cmp	sl, r4
    b47c:	d00f      	beq.n	b49e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    b47e:	f44f 7200 	mov.w	r2, #512	; 0x200
    b482:	4629      	mov	r1, r5
    b484:	4630      	mov	r0, r6
    b486:	f7ff fd97 	bl	afb8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b48a:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    b48c:	4642      	mov	r2, r8
    b48e:	4620      	mov	r0, r4
    b490:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    b492:	3401      	adds	r4, #1
    if (readData(dst)) {
    b494:	2f00      	cmp	r7, #0
    b496:	d1ef      	bne.n	b478 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    b498:	2000      	movs	r0, #0
}
    b49a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    b49e:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b4a0:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    b4a2:	445b      	add	r3, fp
    b4a4:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b4a6:	2800      	cmp	r0, #0
    b4a8:	d1f7      	bne.n	b49a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    b4aa:	4630      	mov	r0, r6
}
    b4ac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    b4b0:	f7ff bdc8 	b.w	b044 <SharedSpiCard::readStop()>

0000b4b4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    b4b4:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    b4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    b4ba:	695f      	ldr	r7, [r3, #20]
    b4bc:	4b16      	ldr	r3, [pc, #88]	; (b518 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    b4be:	429f      	cmp	r7, r3
    b4c0:	d11f      	bne.n	b502 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    b4c2:	7cc3      	ldrb	r3, [r0, #19]
    b4c4:	4604      	mov	r4, r0
    b4c6:	460d      	mov	r5, r1
    b4c8:	4616      	mov	r6, r2
    b4ca:	2b01      	cmp	r3, #1
    b4cc:	d102      	bne.n	b4d4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    b4ce:	6983      	ldr	r3, [r0, #24]
    b4d0:	4299      	cmp	r1, r3
    b4d2:	d005      	beq.n	b4e0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    b4d4:	4629      	mov	r1, r5
    b4d6:	4620      	mov	r0, r4
    b4d8:	f7ff ff50 	bl	b37c <SharedSpiCard::readStart(unsigned long)>
    b4dc:	b170      	cbz	r0, b4fc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    b4de:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    b4e0:	f44f 7200 	mov.w	r2, #512	; 0x200
    b4e4:	4631      	mov	r1, r6
    b4e6:	4620      	mov	r0, r4
    b4e8:	f7ff fd66 	bl	afb8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    b4ec:	b130      	cbz	r0, b4fc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    b4ee:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    b4f0:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    b4f2:	3301      	adds	r3, #1
    b4f4:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    b4f6:	b148      	cbz	r0, b50c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    b4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    b4fc:	2000      	movs	r0, #0
}
    b4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    b502:	46bc      	mov	ip, r7
    b504:	2301      	movs	r3, #1
}
    b506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    b50a:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    b50c:	4620      	mov	r0, r4
}
    b50e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    b512:	f7ff bd97 	b.w	b044 <SharedSpiCard::readStop()>
    b516:	bf00      	nop
    b518:	0000b3e5 	.word	0x0000b3e5

0000b51c <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    b51c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    b51e:	460a      	mov	r2, r1
    b520:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    b522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    b524:	b083      	sub	sp, #12
    b526:	4d16      	ldr	r5, [pc, #88]	; (b580 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    b528:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    b52a:	42ab      	cmp	r3, r5
    b52c:	d124      	bne.n	b578 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    b52e:	7d40      	ldrb	r0, [r0, #21]
    b530:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    b532:	f04f 0119 	mov.w	r1, #25
    b536:	4620      	mov	r0, r4
    sector <<= 9;
    b538:	bf18      	it	ne
    b53a:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    b53c:	f7ff fde6 	bl	b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b540:	b920      	cbnz	r0, b54c <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    b542:	2302      	movs	r3, #2
  return true;
    b544:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    b546:	74e3      	strb	r3, [r4, #19]
}
    b548:	b003      	add	sp, #12
    b54a:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    b54c:	230e      	movs	r3, #14
  if (m_spiActive) {
    b54e:	7ca0      	ldrb	r0, [r4, #18]
    b550:	7463      	strb	r3, [r4, #17]
    b552:	2800      	cmp	r0, #0
    b554:	d0f8      	beq.n	b548 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    b556:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b558:	7c20      	ldrb	r0, [r4, #16]
    b55a:	2101      	movs	r1, #1
    b55c:	f001 fbc6 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b560:	21ff      	movs	r1, #255	; 0xff
    b562:	4628      	mov	r0, r5
    b564:	f001 fca0 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b568:	4628      	mov	r0, r5
    b56a:	f001 fc53 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b56e:	2300      	movs	r3, #0
}
    b570:	4618      	mov	r0, r3
    m_spiActive = false;
    b572:	74a3      	strb	r3, [r4, #18]
}
    b574:	b003      	add	sp, #12
    b576:	bd30      	pop	{r4, r5, pc}
    b578:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    b57a:	4798      	blx	r3
    b57c:	9a01      	ldr	r2, [sp, #4]
    b57e:	e7d7      	b.n	b530 <SharedSpiCard::writeStart(unsigned long)+0x14>
    b580:	0000adb1 	.word	0x0000adb1

0000b584 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    b584:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b586:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    b58a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b58c:	4617      	mov	r7, r2
    b58e:	4a41      	ldr	r2, [pc, #260]	; (b694 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    b590:	b085      	sub	sp, #20
    b592:	4604      	mov	r4, r0
    b594:	460e      	mov	r6, r1
    b596:	4293      	cmp	r3, r2
    b598:	d145      	bne.n	b626 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    b59a:	466a      	mov	r2, sp
    b59c:	2109      	movs	r1, #9
    b59e:	f7ff fe65 	bl	b26c <SharedSpiCard::readRegister(unsigned char, void*)>
    b5a2:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    b5a4:	b1b5      	cbz	r5, b5d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    b5a6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b5aa:	065a      	lsls	r2, r3, #25
    b5ac:	d518      	bpl.n	b5e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    b5ae:	7d63      	ldrb	r3, [r4, #21]
    b5b0:	2b03      	cmp	r3, #3
    b5b2:	d001      	beq.n	b5b8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    b5b4:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    b5b6:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    b5b8:	4632      	mov	r2, r6
    b5ba:	2120      	movs	r1, #32
    b5bc:	4620      	mov	r0, r4
    b5be:	f7ff fda5 	bl	b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    b5c2:	b928      	cbnz	r0, b5d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    b5c4:	463a      	mov	r2, r7
    b5c6:	2121      	movs	r1, #33	; 0x21
    b5c8:	4620      	mov	r0, r4
    b5ca:	f7ff fd9f 	bl	b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b5ce:	b370      	cbz	r0, b62e <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    b5d0:	2326      	movs	r3, #38	; 0x26
    b5d2:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b5d4:	7ca5      	ldrb	r5, [r4, #18]
    b5d6:	b99d      	cbnz	r5, b600 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    b5d8:	4628      	mov	r0, r5
    b5da:	b005      	add	sp, #20
    b5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    b5e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b5e4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b5e8:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    b5ea:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    b5ee:	1c7a      	adds	r2, r7, #1
    b5f0:	4332      	orrs	r2, r6
    b5f2:	4213      	tst	r3, r2
    b5f4:	d0db      	beq.n	b5ae <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    b5f6:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    b5f8:	7ca5      	ldrb	r5, [r4, #18]
    b5fa:	7463      	strb	r3, [r4, #17]
    b5fc:	2d00      	cmp	r5, #0
    b5fe:	d0eb      	beq.n	b5d8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    b600:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b602:	7c20      	ldrb	r0, [r4, #16]
    b604:	2101      	movs	r1, #1
    b606:	f001 fb71 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b60a:	21ff      	movs	r1, #255	; 0xff
    b60c:	4628      	mov	r0, r5
    b60e:	f001 fc4b 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b612:	4628      	mov	r0, r5
    b614:	f001 fbfe 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b618:	2300      	movs	r3, #0
  return false;
    b61a:	461d      	mov	r5, r3
    m_spiActive = false;
    b61c:	74a3      	strb	r3, [r4, #18]
}
    b61e:	4628      	mov	r0, r5
    b620:	b005      	add	sp, #20
    b622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    b626:	4669      	mov	r1, sp
    b628:	4798      	blx	r3
    b62a:	4605      	mov	r5, r0
    b62c:	e7ba      	b.n	b5a4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    b62e:	4602      	mov	r2, r0
    b630:	2126      	movs	r1, #38	; 0x26
    b632:	4620      	mov	r0, r4
    b634:	f7ff fd6a 	bl	b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b638:	2800      	cmp	r0, #0
    b63a:	d1c9      	bne.n	b5d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    b63c:	f8df 8058 	ldr.w	r8, [pc, #88]	; b698 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    b640:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    b644:	f104 0904 	add.w	r9, r4, #4
    b648:	f8d8 3000 	ldr.w	r3, [r8]
    b64c:	441f      	add	r7, r3
    b64e:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    b650:	e004      	b.n	b65c <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    b652:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    b656:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    b658:	041b      	lsls	r3, r3, #16
    b65a:	d417      	bmi.n	b68c <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    b65c:	4648      	mov	r0, r9
    b65e:	f001 fc05 	bl	ce6c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    b662:	28ff      	cmp	r0, #255	; 0xff
    b664:	4606      	mov	r6, r0
    b666:	d1f4      	bne.n	b652 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    b668:	7ca3      	ldrb	r3, [r4, #18]
    b66a:	2b00      	cmp	r3, #0
    b66c:	d0b4      	beq.n	b5d8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    b66e:	2101      	movs	r1, #1
    b670:	7c20      	ldrb	r0, [r4, #16]
  return true;
    b672:	461d      	mov	r5, r3
    b674:	f001 fb3a 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b678:	4631      	mov	r1, r6
    b67a:	4648      	mov	r0, r9
    b67c:	f001 fc14 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b680:	4648      	mov	r0, r9
    b682:	f001 fbc7 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b686:	2300      	movs	r3, #0
    b688:	74a3      	strb	r3, [r4, #18]
}
    b68a:	e7a5      	b.n	b5d8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    b68c:	2328      	movs	r3, #40	; 0x28
    b68e:	7463      	strb	r3, [r4, #17]
    goto fail;
    b690:	e7a0      	b.n	b5d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    b692:	bf00      	nop
    b694:	0000b69d 	.word	0x0000b69d
    b698:	20016020 	.word	0x20016020

0000b69c <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    b69c:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    b69e:	2200      	movs	r2, #0
    b6a0:	b082      	sub	sp, #8
    b6a2:	460e      	mov	r6, r1
    b6a4:	2109      	movs	r1, #9
    b6a6:	4604      	mov	r4, r0
    b6a8:	f7ff fd30 	bl	b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b6ac:	b1b0      	cbz	r0, b6dc <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    b6ae:	231b      	movs	r3, #27
    b6b0:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b6b2:	7ca0      	ldrb	r0, [r4, #18]
    b6b4:	b908      	cbnz	r0, b6ba <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    b6b6:	b002      	add	sp, #8
    b6b8:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b6ba:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b6bc:	7c20      	ldrb	r0, [r4, #16]
    b6be:	2101      	movs	r1, #1
    b6c0:	f001 fb14 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b6c4:	21ff      	movs	r1, #255	; 0xff
    b6c6:	4628      	mov	r0, r5
    b6c8:	f001 fbee 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b6cc:	4628      	mov	r0, r5
    b6ce:	f001 fba1 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b6d2:	2300      	movs	r3, #0
  return false;
    b6d4:	4618      	mov	r0, r3
    m_spiActive = false;
    b6d6:	74a3      	strb	r3, [r4, #18]
  }
    b6d8:	b002      	add	sp, #8
    b6da:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    b6dc:	4605      	mov	r5, r0
    b6de:	2210      	movs	r2, #16
    b6e0:	4631      	mov	r1, r6
    b6e2:	4620      	mov	r0, r4
    b6e4:	f7ff fc68 	bl	afb8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b6e8:	2800      	cmp	r0, #0
    b6ea:	d0e2      	beq.n	b6b2 <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    b6ec:	7ca6      	ldrb	r6, [r4, #18]
    b6ee:	2e00      	cmp	r6, #0
    b6f0:	d0e1      	beq.n	b6b6 <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    b6f2:	7c20      	ldrb	r0, [r4, #16]
    b6f4:	2101      	movs	r1, #1
    b6f6:	f001 faf9 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b6fa:	1d20      	adds	r0, r4, #4
    b6fc:	21ff      	movs	r1, #255	; 0xff
    b6fe:	9001      	str	r0, [sp, #4]
    b700:	f001 fbd2 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b704:	9801      	ldr	r0, [sp, #4]
    b706:	f001 fb85 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
}
    b70a:	4630      	mov	r0, r6
    m_spiActive = false;
    b70c:	74a5      	strb	r5, [r4, #18]
  }
    b70e:	b002      	add	sp, #8
    b710:	bd70      	pop	{r4, r5, r6, pc}
    b712:	bf00      	nop

0000b714 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    b714:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    b716:	2200      	movs	r2, #0
    b718:	b082      	sub	sp, #8
    b71a:	460e      	mov	r6, r1
    b71c:	210a      	movs	r1, #10
    b71e:	4604      	mov	r4, r0
    b720:	f7ff fcf4 	bl	b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b724:	b1b0      	cbz	r0, b754 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    b726:	231b      	movs	r3, #27
    b728:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b72a:	7ca0      	ldrb	r0, [r4, #18]
    b72c:	b908      	cbnz	r0, b732 <SharedSpiCard::readCID(CID*)+0x1e>
  }
    b72e:	b002      	add	sp, #8
    b730:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b732:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b734:	7c20      	ldrb	r0, [r4, #16]
    b736:	2101      	movs	r1, #1
    b738:	f001 fad8 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b73c:	21ff      	movs	r1, #255	; 0xff
    b73e:	4628      	mov	r0, r5
    b740:	f001 fbb2 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b744:	4628      	mov	r0, r5
    b746:	f001 fb65 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b74a:	2300      	movs	r3, #0
  return false;
    b74c:	4618      	mov	r0, r3
    m_spiActive = false;
    b74e:	74a3      	strb	r3, [r4, #18]
  }
    b750:	b002      	add	sp, #8
    b752:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    b754:	4605      	mov	r5, r0
    b756:	2210      	movs	r2, #16
    b758:	4631      	mov	r1, r6
    b75a:	4620      	mov	r0, r4
    b75c:	f7ff fc2c 	bl	afb8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b760:	2800      	cmp	r0, #0
    b762:	d0e2      	beq.n	b72a <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    b764:	7ca6      	ldrb	r6, [r4, #18]
    b766:	2e00      	cmp	r6, #0
    b768:	d0e1      	beq.n	b72e <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    b76a:	7c20      	ldrb	r0, [r4, #16]
    b76c:	2101      	movs	r1, #1
    b76e:	f001 fabd 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b772:	1d20      	adds	r0, r4, #4
    b774:	21ff      	movs	r1, #255	; 0xff
    b776:	9001      	str	r0, [sp, #4]
    b778:	f001 fb96 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b77c:	9801      	ldr	r0, [sp, #4]
    b77e:	f001 fb49 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
}
    b782:	4630      	mov	r0, r6
    m_spiActive = false;
    b784:	74a5      	strb	r5, [r4, #18]
  }
    b786:	b002      	add	sp, #8
    b788:	bd70      	pop	{r4, r5, r6, pc}
    b78a:	bf00      	nop

0000b78c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    b78c:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    b78e:	1d05      	adds	r5, r0, #4
    b790:	4616      	mov	r6, r2
    b792:	4604      	mov	r4, r0
    b794:	4628      	mov	r0, r5
    b796:	f001 fb87 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    b79a:	f44f 7200 	mov.w	r2, #512	; 0x200
    b79e:	4631      	mov	r1, r6
    b7a0:	4628      	mov	r0, r5
    b7a2:	f001 fb8b 	bl	cebc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    b7a6:	21ff      	movs	r1, #255	; 0xff
    b7a8:	4628      	mov	r0, r5
    b7aa:	f001 fb7d 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    b7ae:	21ff      	movs	r1, #255	; 0xff
    b7b0:	4628      	mov	r0, r5
    b7b2:	f001 fb79 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    b7b6:	4628      	mov	r0, r5
    b7b8:	f001 fb58 	bl	ce6c <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    b7bc:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    b7c0:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    b7c2:	2b05      	cmp	r3, #5
    b7c4:	d004      	beq.n	b7d0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    b7c6:	2320      	movs	r3, #32
  if (m_spiActive) {
    b7c8:	7ca0      	ldrb	r0, [r4, #18]
    b7ca:	7463      	strb	r3, [r4, #17]
    b7cc:	b910      	cbnz	r0, b7d4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    b7ce:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    b7d0:	2001      	movs	r0, #1
}
    b7d2:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    b7d4:	7c20      	ldrb	r0, [r4, #16]
    b7d6:	2101      	movs	r1, #1
    b7d8:	f001 fa88 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b7dc:	21ff      	movs	r1, #255	; 0xff
    b7de:	4628      	mov	r0, r5
    b7e0:	f001 fb62 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b7e4:	4628      	mov	r0, r5
    b7e6:	f001 fb15 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b7ea:	2300      	movs	r3, #0
}
    b7ec:	4618      	mov	r0, r3
    m_spiActive = false;
    b7ee:	74a3      	strb	r3, [r4, #18]
}
    b7f0:	bd70      	pop	{r4, r5, r6, pc}
    b7f2:	bf00      	nop

0000b7f4 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7f8:	4d17      	ldr	r5, [pc, #92]	; (b858 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    b7fa:	4606      	mov	r6, r0
    b7fc:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    b7fe:	f100 0804 	add.w	r8, r0, #4
    b802:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    b804:	f504 7416 	add.w	r4, r4, #600	; 0x258
    b808:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    b80a:	e003      	b.n	b814 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    b80c:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    b80e:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    b810:	041b      	lsls	r3, r3, #16
    b812:	d40c      	bmi.n	b82e <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    b814:	4640      	mov	r0, r8
    b816:	f001 fb29 	bl	ce6c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    b81a:	28ff      	cmp	r0, #255	; 0xff
    b81c:	d1f6      	bne.n	b80c <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    b81e:	463a      	mov	r2, r7
    b820:	21fc      	movs	r1, #252	; 0xfc
    b822:	4630      	mov	r0, r6
    b824:	f7ff ffb2 	bl	b78c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    b828:	b118      	cbz	r0, b832 <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    b82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    b82e:	2324      	movs	r3, #36	; 0x24
    b830:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    b832:	7cb0      	ldrb	r0, [r6, #18]
    b834:	2800      	cmp	r0, #0
    b836:	d0f8      	beq.n	b82a <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    b838:	7c30      	ldrb	r0, [r6, #16]
    b83a:	2101      	movs	r1, #1
    b83c:	f001 fa56 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b840:	21ff      	movs	r1, #255	; 0xff
    b842:	4640      	mov	r0, r8
    b844:	f001 fb30 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b848:	4640      	mov	r0, r8
    b84a:	f001 fae3 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b84e:	2300      	movs	r3, #0
}
    b850:	4618      	mov	r0, r3
    m_spiActive = false;
    b852:	74b3      	strb	r3, [r6, #18]
}
    b854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b858:	20016020 	.word	0x20016020

0000b85c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    b85c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b85e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    b860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b862:	4616      	mov	r6, r2
    b864:	4a22      	ldr	r2, [pc, #136]	; (b8f0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    b866:	b082      	sub	sp, #8
    b868:	4604      	mov	r4, r0
    b86a:	460d      	mov	r5, r1
    b86c:	4293      	cmp	r3, r2
    b86e:	d13c      	bne.n	b8ea <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    b870:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    b872:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    b874:	f04f 0118 	mov.w	r1, #24
    b878:	4620      	mov	r0, r4
    sector <<= 9;
    b87a:	bf18      	it	ne
    b87c:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    b87e:	462a      	mov	r2, r5
    b880:	f7ff fc44 	bl	b10c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b884:	4605      	mov	r5, r0
    b886:	b1b0      	cbz	r0, b8b6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    b888:	230d      	movs	r3, #13
    b88a:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b88c:	7ca0      	ldrb	r0, [r4, #18]
    b88e:	b908      	cbnz	r0, b894 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    b890:	b002      	add	sp, #8
    b892:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b894:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b896:	7c20      	ldrb	r0, [r4, #16]
    b898:	2101      	movs	r1, #1
    b89a:	f001 fa27 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b89e:	21ff      	movs	r1, #255	; 0xff
    b8a0:	4628      	mov	r0, r5
    b8a2:	f001 fb01 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b8a6:	4628      	mov	r0, r5
    b8a8:	f001 fab4 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b8ac:	2300      	movs	r3, #0
  return false;
    b8ae:	4618      	mov	r0, r3
    m_spiActive = false;
    b8b0:	74a3      	strb	r3, [r4, #18]
}
    b8b2:	b002      	add	sp, #8
    b8b4:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    b8b6:	4632      	mov	r2, r6
    b8b8:	21fe      	movs	r1, #254	; 0xfe
    b8ba:	4620      	mov	r0, r4
    b8bc:	f7ff ff66 	bl	b78c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    b8c0:	2800      	cmp	r0, #0
    b8c2:	d0e3      	beq.n	b88c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    b8c4:	7ca6      	ldrb	r6, [r4, #18]
    b8c6:	2e00      	cmp	r6, #0
    b8c8:	d0e2      	beq.n	b890 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    b8ca:	7c20      	ldrb	r0, [r4, #16]
    b8cc:	2101      	movs	r1, #1
    b8ce:	f001 fa0d 	bl	ccec <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b8d2:	1d20      	adds	r0, r4, #4
    b8d4:	21ff      	movs	r1, #255	; 0xff
    b8d6:	9001      	str	r0, [sp, #4]
    b8d8:	f001 fae6 	bl	cea8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b8dc:	9801      	ldr	r0, [sp, #4]
    b8de:	f001 fa99 	bl	ce14 <SdSpiArduinoDriver::deactivate()>
  return true;
    b8e2:	4630      	mov	r0, r6
    m_spiActive = false;
    b8e4:	74a5      	strb	r5, [r4, #18]
}
    b8e6:	b002      	add	sp, #8
    b8e8:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    b8ea:	4798      	blx	r3
    b8ec:	e7c1      	b.n	b872 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    b8ee:	bf00      	nop
    b8f0:	0000adb1 	.word	0x0000adb1

0000b8f4 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b8f4:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    b8f6:	7f04      	ldrb	r4, [r0, #28]
    b8f8:	b134      	cbz	r4, b908 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    b8fa:	6804      	ldr	r4, [r0, #0]
    b8fc:	2301      	movs	r3, #1
    b8fe:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    b900:	46a4      	mov	ip, r4
}
    b902:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    b906:	4760      	bx	ip
}
    b908:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    b90c:	f7ff bfa6 	b.w	b85c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000b910 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    b910:	2000      	movs	r0, #0
    b912:	4770      	bx	lr

0000b914 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    b914:	2000      	movs	r0, #0
    b916:	4770      	bx	lr

0000b918 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    b918:	2000      	movs	r0, #0
    b91a:	4770      	bx	lr

0000b91c <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    b91c:	4770      	bx	lr
    b91e:	bf00      	nop

0000b920 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    b920:	4b08      	ldr	r3, [pc, #32]	; (b944 <sdIrs()+0x24>)
    b922:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    b924:	4a08      	ldr	r2, [pc, #32]	; (b948 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    b926:	4809      	ldr	r0, [pc, #36]	; (b94c <sdIrs()+0x2c>)
static void sdIrs() {
    b928:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    b92a:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    b92c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    b92e:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    b930:	6812      	ldr	r2, [r2, #0]
}
    b932:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    b936:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    b938:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b93a:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    b93e:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    b940:	7001      	strb	r1, [r0, #0]
}
    b942:	4770      	bx	lr
    b944:	402c0000 	.word	0x402c0000
    b948:	2001512c 	.word	0x2001512c
    b94c:	2001605e 	.word	0x2001605e

0000b950 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b950:	4b03      	ldr	r3, [pc, #12]	; (b960 <isBusyDat()+0x10>)
    b952:	6a58      	ldr	r0, [r3, #36]	; 0x24
    b954:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    b958:	f3c0 6000 	ubfx	r0, r0, #24, #1
    b95c:	4770      	bx	lr
    b95e:	bf00      	nop
    b960:	402c0000 	.word	0x402c0000

0000b964 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    b964:	4b01      	ldr	r3, [pc, #4]	; (b96c <isBusyDMA()+0x8>)
    b966:	7818      	ldrb	r0, [r3, #0]
}
    b968:	4770      	bx	lr
    b96a:	bf00      	nop
    b96c:	2001605e 	.word	0x2001605e

0000b970 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b970:	4a2b      	ldr	r2, [pc, #172]	; (ba20 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b972:	4b2c      	ldr	r3, [pc, #176]	; (ba24 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b974:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b976:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    b97a:	492b      	ldr	r1, [pc, #172]	; (ba28 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b97c:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b984:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    b986:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b988:	4c28      	ldr	r4, [pc, #160]	; (ba2c <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    b98a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b98e:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    b992:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b996:	089b      	lsrs	r3, r3, #2
    b998:	fbb1 fef3 	udiv	lr, r1, r3
    b99c:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b9a0:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    b9a4:	d235      	bcs.n	ba12 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    b9a6:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    b9a8:	461e      	mov	r6, r3
    b9aa:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b9ac:	011a      	lsls	r2, r3, #4
    b9ae:	fbbe f2f2 	udiv	r2, lr, r2
    b9b2:	4282      	cmp	r2, r0
    b9b4:	d901      	bls.n	b9ba <setSdclk(unsigned long)+0x4a>
    b9b6:	2bff      	cmp	r3, #255	; 0xff
    b9b8:	d9f6      	bls.n	b9a8 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b9ba:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    b9be:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b9c0:	4290      	cmp	r0, r2
    b9c2:	d22a      	bcs.n	ba1a <setSdclk(unsigned long)+0xaa>
    b9c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    b9c8:	2201      	movs	r2, #1
    b9ca:	e000      	b.n	b9ce <setSdclk(unsigned long)+0x5e>
    b9cc:	46a4      	mov	ip, r4
    dvs++;
    b9ce:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b9d0:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    b9d4:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b9d6:	fbbe f1fc 	udiv	r1, lr, ip
    b9da:	4281      	cmp	r1, r0
    b9dc:	d917      	bls.n	ba0e <setSdclk(unsigned long)+0x9e>
    b9de:	2a10      	cmp	r2, #16
    b9e0:	d1f4      	bne.n	b9cc <setSdclk(unsigned long)+0x5c>
    b9e2:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    b9e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b9e8:	4911      	ldr	r1, [pc, #68]	; (ba30 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    b9ea:	4a12      	ldr	r2, [pc, #72]	; (ba34 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    b9ec:	fb03 fc0c 	mul.w	ip, r3, ip
    b9f0:	fbbe f3fc 	udiv	r3, lr, ip
    b9f4:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    b9f6:	4b10      	ldr	r3, [pc, #64]	; (ba38 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    b9f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    b9fa:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    b9fc:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    b9fe:	4333      	orrs	r3, r6
    ba00:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ba04:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    ba06:	6a53      	ldr	r3, [r2, #36]	; 0x24
    ba08:	071b      	lsls	r3, r3, #28
    ba0a:	d5fc      	bpl.n	ba06 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    ba0c:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ba0e:	012d      	lsls	r5, r5, #4
    ba10:	e7e8      	b.n	b9e4 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    ba12:	4672      	mov	r2, lr
    ba14:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    ba16:	2301      	movs	r3, #1
    ba18:	e7d2      	b.n	b9c0 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ba1a:	469c      	mov	ip, r3
    ba1c:	2500      	movs	r5, #0
    ba1e:	e7e1      	b.n	b9e4 <setSdclk(unsigned long)+0x74>
    ba20:	400fc000 	.word	0x400fc000
    ba24:	400d8000 	.word	0x400d8000
    ba28:	5e69ec00 	.word	0x5e69ec00
    ba2c:	aaaaaaab 	.word	0xaaaaaaab
    ba30:	2000e80c 	.word	0x2000e80c
    ba34:	402c0000 	.word	0x402c0000
    ba38:	fff0000f 	.word	0xfff0000f

0000ba3c <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    ba3c:	4b01      	ldr	r3, [pc, #4]	; (ba44 <SdioCard::errorCode() const+0x8>)
}
    ba3e:	7818      	ldrb	r0, [r3, #0]
    ba40:	4770      	bx	lr
    ba42:	bf00      	nop
    ba44:	20009426 	.word	0x20009426

0000ba48 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    ba48:	4b01      	ldr	r3, [pc, #4]	; (ba50 <SdioCard::errorData() const+0x8>)
    ba4a:	6818      	ldr	r0, [r3, #0]
}
    ba4c:	4770      	bx	lr
    ba4e:	bf00      	nop
    ba50:	2001512c 	.word	0x2001512c

0000ba54 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    ba54:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    ba56:	4c07      	ldr	r4, [pc, #28]	; (ba74 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    ba58:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    ba5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    ba5c:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    ba60:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    ba62:	f8cc 1004 	str.w	r1, [ip, #4]
    ba66:	f8cc 2008 	str.w	r2, [ip, #8]
    ba6a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    ba6e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ba72:	4770      	bx	lr
    ba74:	20014a34 	.word	0x20014a34

0000ba78 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    ba78:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    ba7a:	4c07      	ldr	r4, [pc, #28]	; (ba98 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    ba7c:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    ba7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    ba80:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    ba84:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    ba86:	f8cc 1004 	str.w	r1, [ip, #4]
    ba8a:	f8cc 2008 	str.w	r2, [ip, #8]
    ba8e:	f8cc 300c 	str.w	r3, [ip, #12]
}
    ba92:	f85d 4b04 	ldr.w	r4, [sp], #4
    ba96:	4770      	bx	lr
    ba98:	20014a44 	.word	0x20014a44

0000ba9c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    ba9c:	4b02      	ldr	r3, [pc, #8]	; (baa8 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    ba9e:	2001      	movs	r0, #1
  *ocr = m_ocr;
    baa0:	681b      	ldr	r3, [r3, #0]
    baa2:	600b      	str	r3, [r1, #0]
}
    baa4:	4770      	bx	lr
    baa6:	bf00      	nop
    baa8:	20014a54 	.word	0x20014a54

0000baac <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    baac:	4770      	bx	lr
    baae:	bf00      	nop

0000bab0 <SdioCard::~SdioCard()>:
    bab0:	b510      	push	{r4, lr}
    bab2:	4604      	mov	r4, r0
    bab4:	210c      	movs	r1, #12
    bab6:	f002 fe47 	bl	e748 <operator delete(void*, unsigned int)>
    baba:	4620      	mov	r0, r4
    babc:	bd10      	pop	{r4, pc}
    babe:	bf00      	nop

0000bac0 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    bac0:	4b04      	ldr	r3, [pc, #16]	; (bad4 <SdioCard::type() const+0x14>)
    bac2:	781b      	ldrb	r3, [r3, #0]
    bac4:	b123      	cbz	r3, bad0 <SdioCard::type() const+0x10>
    bac6:	4b04      	ldr	r3, [pc, #16]	; (bad8 <SdioCard::type() const+0x18>)
    bac8:	7818      	ldrb	r0, [r3, #0]
    baca:	3002      	adds	r0, #2
    bacc:	b2c0      	uxtb	r0, r0
    bace:	4770      	bx	lr
    bad0:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    bad2:	4770      	bx	lr
    bad4:	2001605b 	.word	0x2001605b
    bad8:	2001605c 	.word	0x2001605c

0000badc <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    badc:	4b18      	ldr	r3, [pc, #96]	; (bb40 <SdioCard::sectorCount()+0x64>)
    bade:	781a      	ldrb	r2, [r3, #0]
    bae0:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    bae4:	d00f      	beq.n	bb06 <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    bae6:	2a40      	cmp	r2, #64	; 0x40
    bae8:	d001      	beq.n	baee <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    baea:	2000      	movs	r0, #0
}
    baec:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    baee:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    baf0:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    baf2:	7a19      	ldrb	r1, [r3, #8]
    baf4:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    baf6:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    bafa:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    bafe:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    bb02:	0280      	lsls	r0, r0, #10
    bb04:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    bb06:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    bb08:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    bb0a:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    bb0c:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    bb10:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    bb14:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    bb18:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    bb1a:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    bb1c:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    bb20:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    bb22:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    bb26:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    bb2a:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    bb2c:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    bb30:	3001      	adds	r0, #1
    bb32:	f003 030f 	and.w	r3, r3, #15
    bb36:	4413      	add	r3, r2
    bb38:	3b07      	subs	r3, #7
    bb3a:	4098      	lsls	r0, r3
}
    bb3c:	f85d fb04 	ldr.w	pc, [sp], #4
    bb40:	20014a44 	.word	0x20014a44

0000bb44 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    bb44:	4a40      	ldr	r2, [pc, #256]	; (bc48 <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    bb46:	2005      	movs	r0, #5
    bb48:	4940      	ldr	r1, [pc, #256]	; (bc4c <initSDHC()+0x108>)
static void initSDHC() {
    bb4a:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    bb4c:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    bb50:	4b3f      	ldr	r3, [pc, #252]	; (bc50 <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    bb52:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    bb56:	4d3f      	ldr	r5, [pc, #252]	; (bc54 <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    bb58:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    bb5c:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    bb60:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    bb64:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    bb68:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    bb6c:	f044 0418 	orr.w	r4, r4, #24
    bb70:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    bb74:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    bb78:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    bb7c:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    bb80:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    bb84:	f042 020c 	orr.w	r2, r2, #12
    bb88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    bb8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bb8e:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    bb92:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    bb94:	69da      	ldr	r2, [r3, #28]
    bb96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    bb9a:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    bb9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bb9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    bba2:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    bba4:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    bba8:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    bbac:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    bbb0:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    bbb4:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    bbb8:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    bbbc:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    bbbe:	4b26      	ldr	r3, [pc, #152]	; (bc58 <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    bbc0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    bbc4:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    bbc6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    bbc8:	4313      	orrs	r3, r2
    bbca:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    bbcc:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    bbce:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    bbd2:	d1fb      	bne.n	bbcc <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    bbd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    bbd8:	f7ff feca 	bl	b970 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    bbdc:	4b1b      	ldr	r3, [pc, #108]	; (bc4c <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    bbde:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    bbe2:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    bbe6:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    bbea:	481c      	ldr	r0, [pc, #112]	; (bc5c <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    bbec:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    bbf0:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    bbf4:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    bbf8:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    bbfc:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    bc00:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    bc04:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    bc08:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    bc0c:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    bc10:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    bc14:	4912      	ldr	r1, [pc, #72]	; (bc60 <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    bc16:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    bc1a:	4b12      	ldr	r3, [pc, #72]	; (bc64 <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    bc1c:	6368      	str	r0, [r5, #52]	; 0x34
    bc1e:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    bc22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    bc26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    bc2a:	490f      	ldr	r1, [pc, #60]	; (bc68 <initSDHC()+0x124>)
    bc2c:	2060      	movs	r0, #96	; 0x60
    bc2e:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    bc32:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    bc36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    bc38:	4a06      	ldr	r2, [pc, #24]	; (bc54 <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    bc3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    bc3e:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    bc40:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    bc42:	011b      	lsls	r3, r3, #4
    bc44:	d4fc      	bmi.n	bc40 <initSDHC()+0xfc>
}
    bc46:	bd38      	pop	{r3, r4, r5, pc}
    bc48:	400d8000 	.word	0x400d8000
    bc4c:	401f8000 	.word	0x401f8000
    bc50:	400fc000 	.word	0x400fc000
    bc54:	402c0000 	.word	0x402c0000
    bc58:	01008000 	.word	0x01008000
    bc5c:	117f000b 	.word	0x117f000b
    bc60:	20009800 	.word	0x20009800
    bc64:	0000b921 	.word	0x0000b921
    bc68:	e000e400 	.word	0xe000e400

0000bc6c <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    bc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    bc70:	f002 fa20 	bl	e0b4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    bc74:	4e17      	ldr	r6, [pc, #92]	; (bcd4 <waitTransferComplete() [clone .part.0]+0x68>)
    bc76:	4d18      	ldr	r5, [pc, #96]	; (bcd8 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    bc78:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bc7a:	f8df 8074 	ldr.w	r8, [pc, #116]	; bcf0 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    bc7e:	e004      	b.n	bc8a <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bc80:	f002 fa18 	bl	e0b4 <micros>
    bc84:	1bc0      	subs	r0, r0, r7
    bc86:	4540      	cmp	r0, r8
    bc88:	d81b      	bhi.n	bcc2 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    bc8a:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    bc8c:	402c      	ands	r4, r5
    bc8e:	d0f7      	beq.n	bc80 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    bc90:	4a12      	ldr	r2, [pc, #72]	; (bcdc <waitTransferComplete() [clone .part.0]+0x70>)
    bc92:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    bc94:	4b12      	ldr	r3, [pc, #72]	; (bce0 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    bc96:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    bc98:	6b32      	ldr	r2, [r6, #48]	; 0x30
    bc9a:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    bc9c:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    bc9e:	4a11      	ldr	r2, [pc, #68]	; (bce4 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    bca0:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    bca2:	681b      	ldr	r3, [r3, #0]
    bca4:	4213      	tst	r3, r2
    bca6:	d009      	beq.n	bcbc <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    bca8:	490f      	ldr	r1, [pc, #60]	; (bce8 <waitTransferComplete() [clone .part.0]+0x7c>)
    bcaa:	241f      	movs	r4, #31
  m_errorLine = line;
    bcac:	4b0f      	ldr	r3, [pc, #60]	; (bcec <waitTransferComplete() [clone .part.0]+0x80>)
    bcae:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    bcb2:	2000      	movs	r0, #0
  m_errorCode = code;
    bcb4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bcb6:	601a      	str	r2, [r3, #0]
}
    bcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    bcbc:	2001      	movs	r0, #1
}
    bcbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    bcc2:	4a06      	ldr	r2, [pc, #24]	; (bcdc <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    bcc4:	4b06      	ldr	r3, [pc, #24]	; (bce0 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    bcc6:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    bcc8:	6b32      	ldr	r2, [r6, #48]	; 0x30
    bcca:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    bccc:	681b      	ldr	r3, [r3, #0]
    bcce:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    bcd0:	e7ea      	b.n	bca8 <waitTransferComplete() [clone .part.0]+0x3c>
    bcd2:	bf00      	nop
    bcd4:	402c0000 	.word	0x402c0000
    bcd8:	117f0002 	.word	0x117f0002
    bcdc:	2001605d 	.word	0x2001605d
    bce0:	2001512c 	.word	0x2001512c
    bce4:	117f0000 	.word	0x117f0000
    bce8:	20009426 	.word	0x20009426
    bcec:	2000e814 	.word	0x2000e814
    bcf0:	000f4240 	.word	0x000f4240

0000bcf4 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    bcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    bcf8:	4c26      	ldr	r4, [pc, #152]	; (bd94 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    bcfa:	460f      	mov	r7, r1
  if (!m_transferActive) {
    bcfc:	7823      	ldrb	r3, [r4, #0]
    bcfe:	2b00      	cmp	r3, #0
    bd00:	d138      	bne.n	bd74 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    bd02:	4b25      	ldr	r3, [pc, #148]	; (bd98 <SdioCard::writeData(unsigned char const*)+0xa4>)
    bd04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bd06:	05d2      	lsls	r2, r2, #23
    bd08:	d52b      	bpl.n	bd62 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    bd0a:	4d23      	ldr	r5, [pc, #140]	; (bd98 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd0c:	f8df 8094 	ldr.w	r8, [pc, #148]	; bda4 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    bd10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bd12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    bd16:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    bd18:	f002 f9cc 	bl	e0b4 <micros>
    bd1c:	4606      	mov	r6, r0
  while (fcn()) {
    bd1e:	e004      	b.n	bd2a <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd20:	f002 f9c8 	bl	e0b4 <micros>
    bd24:	1b80      	subs	r0, r0, r6
    bd26:	4540      	cmp	r0, r8
    bd28:	d82a      	bhi.n	bd80 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    bd2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    bd2c:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    bd30:	d0f6      	beq.n	bd20 <SdioCard::writeData(unsigned char const*)+0x2c>
    bd32:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    bd36:	4818      	ldr	r0, [pc, #96]	; (bd98 <SdioCard::writeData(unsigned char const*)+0xa4>)
    bd38:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    bd3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    bd3e:	055b      	lsls	r3, r3, #21
    bd40:	d5fc      	bpl.n	bd3c <SdioCard::writeData(unsigned char const*)+0x48>
    bd42:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    bd46:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    bd4a:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    bd4c:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    bd4e:	d1fa      	bne.n	bd46 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    bd50:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    bd54:	45bc      	cmp	ip, r7
    bd56:	d1f1      	bne.n	bd3c <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    bd58:	2301      	movs	r3, #1
  return true;
    bd5a:	4618      	mov	r0, r3
  m_transferActive = true;
    bd5c:	7023      	strb	r3, [r4, #0]
}
    bd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bd62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bd64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    bd68:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    bd6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bd6c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    bd70:	629a      	str	r2, [r3, #40]	; 0x28
    bd72:	e7ca      	b.n	bd0a <SdioCard::writeData(unsigned char const*)+0x16>
    bd74:	f7ff ff7a 	bl	bc6c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    bd78:	2800      	cmp	r0, #0
    bd7a:	d1c2      	bne.n	bd02 <SdioCard::writeData(unsigned char const*)+0xe>
}
    bd7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    bd80:	4906      	ldr	r1, [pc, #24]	; (bd9c <SdioCard::writeData(unsigned char const*)+0xa8>)
    bd82:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    bd84:	4b06      	ldr	r3, [pc, #24]	; (bda0 <SdioCard::writeData(unsigned char const*)+0xac>)
    bd86:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    bd8a:	4648      	mov	r0, r9
  m_errorCode = code;
    bd8c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bd8e:	601a      	str	r2, [r3, #0]
}
    bd90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bd94:	2001605d 	.word	0x2001605d
    bd98:	402c0000 	.word	0x402c0000
    bd9c:	20009426 	.word	0x20009426
    bda0:	2000e814 	.word	0x2000e814
    bda4:	000f4240 	.word	0x000f4240

0000bda8 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    bda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdac:	4607      	mov	r7, r0
    bdae:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    bdb0:	4c1f      	ldr	r4, [pc, #124]	; (be30 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    bdb2:	f002 f97f 	bl	e0b4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bdb6:	4e1f      	ldr	r6, [pc, #124]	; (be34 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    bdb8:	4605      	mov	r5, r0
  while (fcn()) {
    bdba:	e004      	b.n	bdc6 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bdbc:	f002 f97a 	bl	e0b4 <micros>
    bdc0:	1b43      	subs	r3, r0, r5
    bdc2:	42b3      	cmp	r3, r6
    bdc4:	d824      	bhi.n	be10 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    bdc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    bdc8:	07d9      	lsls	r1, r3, #31
    bdca:	d4f7      	bmi.n	bdbc <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    bdcc:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    bdce:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    bdd2:	d420      	bmi.n	be16 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    bdd4:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    bdd8:	4c15      	ldr	r4, [pc, #84]	; (be30 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    bdda:	4e17      	ldr	r6, [pc, #92]	; (be38 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    bddc:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    bdde:	f002 f969 	bl	e0b4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bde2:	4f14      	ldr	r7, [pc, #80]	; (be34 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    bde4:	4605      	mov	r5, r0
  while (fcn()) {
    bde6:	e004      	b.n	bdf2 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bde8:	f002 f964 	bl	e0b4 <micros>
    bdec:	1b40      	subs	r0, r0, r5
    bdee:	42b8      	cmp	r0, r7
    bdf0:	d80e      	bhi.n	be10 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    bdf2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    bdf4:	4233      	tst	r3, r6
    bdf6:	d0f7      	beq.n	bde8 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    bdf8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    bdfa:	4b10      	ldr	r3, [pc, #64]	; (be3c <cardCommand(unsigned long, unsigned long)+0x94>)
    bdfc:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    bdfe:	681a      	ldr	r2, [r3, #0]
    be00:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    be02:	681a      	ldr	r2, [r3, #0]
    be04:	07d2      	lsls	r2, r2, #31
    be06:	d503      	bpl.n	be10 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    be08:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    be0a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    be0e:	d00b      	beq.n	be28 <cardCommand(unsigned long, unsigned long)+0x80>
    be10:	2000      	movs	r0, #0
}
    be12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    be16:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    be18:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    be1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    be1e:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    be20:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    be22:	4313      	orrs	r3, r2
    be24:	64a3      	str	r3, [r4, #72]	; 0x48
    be26:	e7d5      	b.n	bdd4 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    be28:	2001      	movs	r0, #1
}
    be2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be2e:	bf00      	nop
    be30:	402c0000 	.word	0x402c0000
    be34:	000f4240 	.word	0x000f4240
    be38:	000f0001 	.word	0x000f0001
    be3c:	2001512c 	.word	0x2001512c

0000be40 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    be40:	4b15      	ldr	r3, [pc, #84]	; (be98 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    be42:	b530      	push	{r4, r5, lr}
    be44:	460d      	mov	r5, r1
    be46:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    be48:	6819      	ldr	r1, [r3, #0]
    be4a:	f7ff ffad 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    be4e:	b308      	cbz	r0, be94 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    be50:	4b12      	ldr	r3, [pc, #72]	; (be9c <readReg16(unsigned long, void*)+0x5c>)
    be52:	f105 040f 	add.w	r4, r5, #15
    be56:	691a      	ldr	r2, [r3, #16]
    be58:	9200      	str	r2, [sp, #0]
    be5a:	6959      	ldr	r1, [r3, #20]
    be5c:	9101      	str	r1, [sp, #4]
    be5e:	6999      	ldr	r1, [r3, #24]
    be60:	9102      	str	r1, [sp, #8]
    be62:	69db      	ldr	r3, [r3, #28]
    be64:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    be66:	2300      	movs	r3, #0
    be68:	e001      	b.n	be6e <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    be6a:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    be6e:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    be72:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    be74:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    be78:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    be7c:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    be7e:	fa22 f20c 	lsr.w	r2, r2, ip
    be82:	f10e 0110 	add.w	r1, lr, #16
    be86:	f804 2d01 	strb.w	r2, [r4, #-1]!
    be8a:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    be8e:	d1ec      	bne.n	be6a <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    be90:	2300      	movs	r3, #0
    be92:	73eb      	strb	r3, [r5, #15]
}
    be94:	b005      	add	sp, #20
    be96:	bd30      	pop	{r4, r5, pc}
    be98:	20014a58 	.word	0x20014a58
    be9c:	402c0000 	.word	0x402c0000

0000bea0 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    bea0:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    bea2:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    bea4:	07db      	lsls	r3, r3, #31
    bea6:	d505      	bpl.n	beb4 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    bea8:	4b15      	ldr	r3, [pc, #84]	; (bf00 <SdioCard::isBusy()+0x60>)
    beaa:	681b      	ldr	r3, [r3, #0]
    beac:	b1b3      	cbz	r3, bedc <SdioCard::isBusy()+0x3c>
}
    beae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    beb2:	4718      	bx	r3
    if (m_transferActive) {
    beb4:	4b13      	ldr	r3, [pc, #76]	; (bf04 <SdioCard::isBusy()+0x64>)
    beb6:	781b      	ldrb	r3, [r3, #0]
    beb8:	b93b      	cbnz	r3, beca <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    beba:	4b13      	ldr	r3, [pc, #76]	; (bf08 <SdioCard::isBusy()+0x68>)
    bebc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    bebe:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    bec2:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    bec6:	4620      	mov	r0, r4
    bec8:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    beca:	4b0f      	ldr	r3, [pc, #60]	; (bf08 <SdioCard::isBusy()+0x68>)
    becc:	4c0f      	ldr	r4, [pc, #60]	; (bf0c <SdioCard::isBusy()+0x6c>)
    bece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bed0:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    bed2:	fab4 f484 	clz	r4, r4
    bed6:	0964      	lsrs	r4, r4, #5
}
    bed8:	4620      	mov	r0, r4
    beda:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    bedc:	4b0c      	ldr	r3, [pc, #48]	; (bf10 <SdioCard::isBusy()+0x70>)
    bede:	781c      	ldrb	r4, [r3, #0]
    bee0:	2c00      	cmp	r4, #0
    bee2:	d0f0      	beq.n	bec6 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bee4:	4b0b      	ldr	r3, [pc, #44]	; (bf14 <SdioCard::isBusy()+0x74>)
    bee6:	480c      	ldr	r0, [pc, #48]	; (bf18 <SdioCard::isBusy()+0x78>)
    bee8:	6819      	ldr	r1, [r3, #0]
    beea:	f7ff ff5d 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    beee:	2800      	cmp	r0, #0
    bef0:	d0e9      	beq.n	bec6 <SdioCard::isBusy()+0x26>
    bef2:	4b05      	ldr	r3, [pc, #20]	; (bf08 <SdioCard::isBusy()+0x68>)
    bef4:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    bef6:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    befa:	f3c4 2400 	ubfx	r4, r4, #8, #1
    befe:	e7e2      	b.n	bec6 <SdioCard::isBusy()+0x26>
    bf00:	20015128 	.word	0x20015128
    bf04:	2001605d 	.word	0x2001605d
    bf08:	402c0000 	.word	0x402c0000
    bf0c:	117f0002 	.word	0x117f0002
    bf10:	2001605a 	.word	0x2001605a
    bf14:	20014a58 	.word	0x20014a58
    bf18:	0d1a0000 	.word	0x0d1a0000

0000bf1c <SdioCard::status()>:
uint32_t SdioCard::status() {
    bf1c:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bf1e:	4b04      	ldr	r3, [pc, #16]	; (bf30 <SdioCard::status()+0x14>)
    bf20:	4804      	ldr	r0, [pc, #16]	; (bf34 <SdioCard::status()+0x18>)
    bf22:	6819      	ldr	r1, [r3, #0]
    bf24:	f7ff ff40 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    bf28:	b108      	cbz	r0, bf2e <SdioCard::status()+0x12>
    bf2a:	4b03      	ldr	r3, [pc, #12]	; (bf38 <SdioCard::status()+0x1c>)
    bf2c:	6918      	ldr	r0, [r3, #16]
}
    bf2e:	bd08      	pop	{r3, pc}
    bf30:	20014a58 	.word	0x20014a58
    bf34:	0d1a0000 	.word	0x0d1a0000
    bf38:	402c0000 	.word	0x402c0000

0000bf3c <isBusyCMD13()>:
static bool isBusyCMD13() {
    bf3c:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bf3e:	4b07      	ldr	r3, [pc, #28]	; (bf5c <isBusyCMD13()+0x20>)
    bf40:	4807      	ldr	r0, [pc, #28]	; (bf60 <isBusyCMD13()+0x24>)
    bf42:	6819      	ldr	r1, [r3, #0]
    bf44:	f7ff ff30 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    bf48:	b130      	cbz	r0, bf58 <isBusyCMD13()+0x1c>
    bf4a:	4b06      	ldr	r3, [pc, #24]	; (bf64 <isBusyCMD13()+0x28>)
    bf4c:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    bf4e:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    bf52:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    bf56:	bd08      	pop	{r3, pc}
    bf58:	2001      	movs	r0, #1
    bf5a:	bd08      	pop	{r3, pc}
    bf5c:	20014a58 	.word	0x20014a58
    bf60:	0d1a0000 	.word	0x0d1a0000
    bf64:	402c0000 	.word	0x402c0000

0000bf68 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    bf68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    bf6c:	4b29      	ldr	r3, [pc, #164]	; (c014 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    bf6e:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    bf70:	f8df a0c0 	ldr.w	sl, [pc, #192]	; c034 <SdioCard::writeStart(unsigned long)+0xcc>
    bf74:	4e28      	ldr	r6, [pc, #160]	; (c018 <SdioCard::writeStart(unsigned long)+0xb0>)
    bf76:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    bf7a:	f002 f89b 	bl	e0b4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bf7e:	4d27      	ldr	r5, [pc, #156]	; (c01c <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    bf80:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bf82:	f8df 80b4 	ldr.w	r8, [pc, #180]	; c038 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bf86:	4f26      	ldr	r7, [pc, #152]	; (c020 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    bf88:	e006      	b.n	bf98 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bf8a:	f002 f893 	bl	e0b4 <micros>
    bf8e:	1b00      	subs	r0, r0, r4
    bf90:	42b8      	cmp	r0, r7
    bf92:	d829      	bhi.n	bfe8 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    bf94:	f004 f93c 	bl	10210 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bf98:	6831      	ldr	r1, [r6, #0]
    bf9a:	4628      	mov	r0, r5
    bf9c:	f7ff ff04 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    bfa0:	2800      	cmp	r0, #0
    bfa2:	d0f2      	beq.n	bf8a <SdioCard::writeStart(unsigned long)+0x22>
    bfa4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    bfa8:	05db      	lsls	r3, r3, #23
    bfaa:	d5ee      	bpl.n	bf8a <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    bfac:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    bfae:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    bfb2:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bfb6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    bfba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    bfbe:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bfc2:	4b18      	ldr	r3, [pc, #96]	; (c024 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    bfc4:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bfc8:	781b      	ldrb	r3, [r3, #0]
    bfca:	b1cb      	cbz	r3, c000 <SdioCard::writeStart(unsigned long)+0x98>
    bfcc:	4649      	mov	r1, r9
    bfce:	4816      	ldr	r0, [pc, #88]	; (c028 <SdioCard::writeStart(unsigned long)+0xc0>)
    bfd0:	f7ff feea 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    bfd4:	b930      	cbnz	r0, bfe4 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    bfd6:	4915      	ldr	r1, [pc, #84]	; (c02c <SdioCard::writeStart(unsigned long)+0xc4>)
    bfd8:	240e      	movs	r4, #14
  m_errorLine = line;
    bfda:	4b15      	ldr	r3, [pc, #84]	; (c030 <SdioCard::writeStart(unsigned long)+0xc8>)
    bfdc:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    bfe0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bfe2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    bfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    bfe8:	4a10      	ldr	r2, [pc, #64]	; (c02c <SdioCard::writeStart(unsigned long)+0xc4>)
    bfea:	210a      	movs	r1, #10
      m_busyFcn = 0;
    bfec:	2000      	movs	r0, #0
  m_errorLine = line;
    bfee:	4b10      	ldr	r3, [pc, #64]	; (c030 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    bff0:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    bff2:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    bff6:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    bffa:	601a      	str	r2, [r3, #0]
}
    bffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c000:	ea4f 2949 	mov.w	r9, r9, lsl #9
    c004:	4808      	ldr	r0, [pc, #32]	; (c028 <SdioCard::writeStart(unsigned long)+0xc0>)
    c006:	4649      	mov	r1, r9
    c008:	f7ff fece 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c00c:	2800      	cmp	r0, #0
    c00e:	d1e9      	bne.n	bfe4 <SdioCard::writeStart(unsigned long)+0x7c>
    c010:	e7e1      	b.n	bfd6 <SdioCard::writeStart(unsigned long)+0x6e>
    c012:	bf00      	nop
    c014:	0000bf3d 	.word	0x0000bf3d
    c018:	20014a58 	.word	0x20014a58
    c01c:	0d1a0000 	.word	0x0d1a0000
    c020:	000f4240 	.word	0x000f4240
    c024:	2001605c 	.word	0x2001605c
    c028:	193a0020 	.word	0x193a0020
    c02c:	20009426 	.word	0x20009426
    c030:	2000e814 	.word	0x2000e814
    c034:	20015128 	.word	0x20015128
    c038:	402c0000 	.word	0x402c0000

0000c03c <SdioCard::readStop()>:
bool SdioCard::readStop() {
    c03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c040:	4c25      	ldr	r4, [pc, #148]	; (c0d8 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c042:	2100      	movs	r1, #0
    c044:	4825      	ldr	r0, [pc, #148]	; (c0dc <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c046:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    c04c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c04e:	f7ff feab 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c052:	4605      	mov	r5, r0
    c054:	b948      	cbnz	r0, c06a <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    c056:	4922      	ldr	r1, [pc, #136]	; (c0e0 <SdioCard::readStop()+0xa4>)
    c058:	2009      	movs	r0, #9
  m_errorLine = line;
    c05a:	4b22      	ldr	r3, [pc, #136]	; (c0e4 <SdioCard::readStop()+0xa8>)
    c05c:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    c060:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c062:	601a      	str	r2, [r3, #0]
}
    c064:	4628      	mov	r0, r5
    c066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    c06a:	4b1f      	ldr	r3, [pc, #124]	; (c0e8 <SdioCard::readStop()+0xac>)
    c06c:	f8df 8080 	ldr.w	r8, [pc, #128]	; c0f0 <SdioCard::readStop()+0xb4>
    c070:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    c074:	f002 f81e 	bl	e0b4 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    c078:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    c07a:	4606      	mov	r6, r0
  while (fcn()) {
    c07c:	01d8      	lsls	r0, r3, #7
    c07e:	d418      	bmi.n	c0b2 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c080:	4f1a      	ldr	r7, [pc, #104]	; (c0ec <SdioCard::readStop()+0xb0>)
    c082:	e004      	b.n	c08e <SdioCard::readStop()+0x52>
    yield();
    c084:	f004 f8c4 	bl	10210 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    c088:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    c08a:	01d9      	lsls	r1, r3, #7
    c08c:	d411      	bmi.n	c0b2 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c08e:	f002 f811 	bl	e0b4 <micros>
    c092:	1b83      	subs	r3, r0, r6
    c094:	42bb      	cmp	r3, r7
    c096:	d9f5      	bls.n	c084 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    c098:	4a11      	ldr	r2, [pc, #68]	; (c0e0 <SdioCard::readStop()+0xa4>)
    c09a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    c09c:	2500      	movs	r5, #0
  m_errorLine = line;
    c09e:	4b11      	ldr	r3, [pc, #68]	; (c0e4 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    c0a0:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    c0a2:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    c0a6:	4628      	mov	r0, r5
      m_busyFcn = 0;
    c0a8:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    c0ac:	601a      	str	r2, [r3, #0]
}
    c0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    c0b2:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    c0b4:	4b08      	ldr	r3, [pc, #32]	; (c0d8 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    c0b6:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    c0ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c0bc:	0792      	lsls	r2, r2, #30
    c0be:	d5d1      	bpl.n	c064 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    c0c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    c0c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    c0c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    c0c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    c0ca:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    c0ce:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    c0d0:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    c0d2:	629a      	str	r2, [r3, #40]	; 0x28
    c0d4:	e7c6      	b.n	c064 <SdioCard::readStop()+0x28>
    c0d6:	bf00      	nop
    c0d8:	402c0000 	.word	0x402c0000
    c0dc:	0cdb0000 	.word	0x0cdb0000
    c0e0:	20009426 	.word	0x20009426
    c0e4:	2000e814 	.word	0x2000e814
    c0e8:	0000b951 	.word	0x0000b951
    c0ec:	000f4240 	.word	0x000f4240
    c0f0:	20015128 	.word	0x20015128

0000c0f4 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    c0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c0f8:	4682      	mov	sl, r0
    c0fa:	4689      	mov	r9, r1
    c0fc:	4e36      	ldr	r6, [pc, #216]	; (c1d8 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    c0fe:	f001 ffd9 	bl	e0b4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c102:	4d36      	ldr	r5, [pc, #216]	; (c1dc <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    c104:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c106:	f8df 8100 	ldr.w	r8, [pc, #256]	; c208 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c10a:	4f35      	ldr	r7, [pc, #212]	; (c1e0 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    c10c:	e004      	b.n	c118 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c10e:	f001 ffd1 	bl	e0b4 <micros>
    c112:	1b03      	subs	r3, r0, r4
    c114:	42bb      	cmp	r3, r7
    c116:	d827      	bhi.n	c168 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c118:	6831      	ldr	r1, [r6, #0]
    c11a:	4628      	mov	r0, r5
    c11c:	f7ff fe44 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c120:	2800      	cmp	r0, #0
    c122:	d0f4      	beq.n	c10e <cardCMD6(unsigned long, unsigned char*)+0x1a>
    c124:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    c128:	05da      	lsls	r2, r3, #23
    c12a:	d5f0      	bpl.n	c10e <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    c12c:	2301      	movs	r3, #1
    c12e:	4d2d      	ldr	r5, [pc, #180]	; (c1e4 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    c130:	4f2d      	ldr	r7, [pc, #180]	; (c1e8 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    c132:	4651      	mov	r1, sl
  m_dmaBusy = true;
    c134:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    c136:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    c138:	482c      	ldr	r0, [pc, #176]	; (c1ec <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    c13a:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    c13c:	4b2c      	ldr	r3, [pc, #176]	; (c1f0 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    c13e:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    c142:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    c146:	4b2b      	ldr	r3, [pc, #172]	; (c1f4 <cardCMD6(unsigned long, unsigned char*)+0x100>)
    c148:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    c14c:	f7ff fe2c 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c150:	4604      	mov	r4, r0
    c152:	b9a0      	cbnz	r0, c17e <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    c154:	4928      	ldr	r1, [pc, #160]	; (c1f8 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    c156:	2004      	movs	r0, #4
  m_errorLine = line;
    c158:	4b28      	ldr	r3, [pc, #160]	; (c1fc <cardCMD6(unsigned long, unsigned char*)+0x108>)
    c15a:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    c15e:	7008      	strb	r0, [r1, #0]
}
    c160:	4620      	mov	r0, r4
  m_errorLine = line;
    c162:	601a      	str	r2, [r3, #0]
}
    c164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    c168:	4923      	ldr	r1, [pc, #140]	; (c1f8 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    c16a:	200a      	movs	r0, #10
  m_errorLine = line;
    c16c:	4b23      	ldr	r3, [pc, #140]	; (c1fc <cardCMD6(unsigned long, unsigned char*)+0x108>)
    c16e:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    c172:	2400      	movs	r4, #0
  m_errorCode = code;
    c174:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c176:	601a      	str	r2, [r3, #0]
}
    c178:	4620      	mov	r0, r4
    c17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    c17e:	4b20      	ldr	r3, [pc, #128]	; (c200 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    c180:	f8df 9088 	ldr.w	r9, [pc, #136]	; c20c <cardCMD6(unsigned long, unsigned char*)+0x118>
    c184:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    c188:	f001 ff94 	bl	e0b4 <micros>
  return m_dmaBusy;
    c18c:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    c18e:	4606      	mov	r6, r0
  while (fcn()) {
    c190:	b1bb      	cbz	r3, c1c2 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c192:	f8df 804c 	ldr.w	r8, [pc, #76]	; c1e0 <cardCMD6(unsigned long, unsigned char*)+0xec>
    c196:	e003      	b.n	c1a0 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    c198:	f004 f83a 	bl	10210 <yield>
  return m_dmaBusy;
    c19c:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    c19e:	b183      	cbz	r3, c1c2 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c1a0:	f001 ff88 	bl	e0b4 <micros>
    c1a4:	1b83      	subs	r3, r0, r6
    c1a6:	4543      	cmp	r3, r8
    c1a8:	d9f6      	bls.n	c198 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    c1aa:	2300      	movs	r3, #0
    c1ac:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    c1b0:	4911      	ldr	r1, [pc, #68]	; (c1f8 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    c1b2:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    c1b4:	4b11      	ldr	r3, [pc, #68]	; (c1fc <cardCMD6(unsigned long, unsigned char*)+0x108>)
    c1b6:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    c1ba:	2400      	movs	r4, #0
  m_errorCode = code;
    c1bc:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c1be:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    c1c0:	e7da      	b.n	c178 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c1c2:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    c1c4:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c1c6:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    c1c8:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c1cc:	d5f0      	bpl.n	c1b0 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    c1ce:	683a      	ldr	r2, [r7, #0]
    c1d0:	4b0c      	ldr	r3, [pc, #48]	; (c204 <cardCMD6(unsigned long, unsigned char*)+0x110>)
    c1d2:	421a      	tst	r2, r3
    c1d4:	d0d0      	beq.n	c178 <cardCMD6(unsigned long, unsigned char*)+0x84>
    c1d6:	e7eb      	b.n	c1b0 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    c1d8:	20014a58 	.word	0x20014a58
    c1dc:	0d1a0000 	.word	0x0d1a0000
    c1e0:	000f4240 	.word	0x000f4240
    c1e4:	2001605e 	.word	0x2001605e
    c1e8:	2001512c 	.word	0x2001512c
    c1ec:	063a0011 	.word	0x063a0011
    c1f0:	00010040 	.word	0x00010040
    c1f4:	117f0002 	.word	0x117f0002
    c1f8:	20009426 	.word	0x20009426
    c1fc:	2000e814 	.word	0x2000e814
    c200:	0000b965 	.word	0x0000b965
    c204:	117f0000 	.word	0x117f0000
    c208:	402c0000 	.word	0x402c0000
    c20c:	20015128 	.word	0x20015128

0000c210 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    c210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    c214:	4d32      	ldr	r5, [pc, #200]	; (c2e0 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    c216:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    c218:	7aab      	ldrb	r3, [r5, #10]
    c21a:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    c21e:	d112      	bne.n	c246 <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    c220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c224:	7aea      	ldrb	r2, [r5, #11]
    c226:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    c228:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    c22c:	1c62      	adds	r2, r4, #1
    c22e:	430a      	orrs	r2, r1
    c230:	4213      	tst	r3, r2
    c232:	d008      	beq.n	c246 <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    c234:	492b      	ldr	r1, [pc, #172]	; (c2e4 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    c236:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    c238:	4b2b      	ldr	r3, [pc, #172]	; (c2e8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    c23a:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    c23e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c240:	601a      	str	r2, [r3, #0]
}
    c242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    c246:	4b29      	ldr	r3, [pc, #164]	; (c2ec <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    c248:	781b      	ldrb	r3, [r3, #0]
    c24a:	b90b      	cbnz	r3, c250 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    c24c:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    c24e:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    c250:	4827      	ldr	r0, [pc, #156]	; (c2f0 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    c252:	f7ff fda9 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c256:	b940      	cbnz	r0, c26a <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    c258:	4922      	ldr	r1, [pc, #136]	; (c2e4 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    c25a:	240f      	movs	r4, #15
  m_errorLine = line;
    c25c:	4b22      	ldr	r3, [pc, #136]	; (c2e8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    c25e:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    c262:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c264:	601a      	str	r2, [r3, #0]
}
    c266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    c26a:	4621      	mov	r1, r4
    c26c:	4821      	ldr	r0, [pc, #132]	; (c2f4 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    c26e:	f7ff fd9b 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c272:	b940      	cbnz	r0, c286 <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    c274:	491b      	ldr	r1, [pc, #108]	; (c2e4 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    c276:	2410      	movs	r4, #16
  m_errorLine = line;
    c278:	4b1b      	ldr	r3, [pc, #108]	; (c2e8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    c27a:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    c27e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c280:	601a      	str	r2, [r3, #0]
}
    c282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    c286:	2100      	movs	r1, #0
    c288:	481b      	ldr	r0, [pc, #108]	; (c2f8 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    c28a:	f7ff fd8d 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c28e:	b938      	cbnz	r0, c2a0 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    c290:	4914      	ldr	r1, [pc, #80]	; (c2e4 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    c292:	2411      	movs	r4, #17
  m_errorLine = line;
    c294:	4b14      	ldr	r3, [pc, #80]	; (c2e8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    c296:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    c29a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c29c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    c29e:	e7e2      	b.n	c266 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    c2a0:	f001 ff08 	bl	e0b4 <micros>
    c2a4:	4e15      	ldr	r6, [pc, #84]	; (c2fc <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c2a6:	4d16      	ldr	r5, [pc, #88]	; (c300 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    c2a8:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c2aa:	f8df 805c 	ldr.w	r8, [pc, #92]	; c308 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c2ae:	4f15      	ldr	r7, [pc, #84]	; (c304 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c2b0:	6831      	ldr	r1, [r6, #0]
    c2b2:	4628      	mov	r0, r5
    c2b4:	f7ff fd78 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c2b8:	b118      	cbz	r0, c2c2 <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    c2ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    c2be:	05db      	lsls	r3, r3, #23
    c2c0:	d4d1      	bmi.n	c266 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c2c2:	f001 fef7 	bl	e0b4 <micros>
    c2c6:	1b00      	subs	r0, r0, r4
    c2c8:	42b8      	cmp	r0, r7
    c2ca:	d9f1      	bls.n	c2b0 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    c2cc:	4905      	ldr	r1, [pc, #20]	; (c2e4 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    c2ce:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    c2d0:	4b05      	ldr	r3, [pc, #20]	; (c2e8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    c2d2:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    c2d6:	2000      	movs	r0, #0
  m_errorCode = code;
    c2d8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c2da:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    c2dc:	e7c3      	b.n	c266 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    c2de:	bf00      	nop
    c2e0:	20014a44 	.word	0x20014a44
    c2e4:	20009426 	.word	0x20009426
    c2e8:	2000e814 	.word	0x2000e814
    c2ec:	2001605c 	.word	0x2001605c
    c2f0:	201a0000 	.word	0x201a0000
    c2f4:	211a0000 	.word	0x211a0000
    c2f8:	261b0000 	.word	0x261b0000
    c2fc:	20014a58 	.word	0x20014a58
    c300:	0d1a0000 	.word	0x0d1a0000
    c304:	000f4240 	.word	0x000f4240
    c308:	402c0000 	.word	0x402c0000

0000c30c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    c310:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    c314:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    c316:	bf18      	it	ne
    c318:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    c31a:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    c31c:	9300      	str	r3, [sp, #0]
    c31e:	2b00      	cmp	r3, #0
    c320:	bf08      	it	eq
    c322:	f044 0401 	orreq.w	r4, r4, #1
    c326:	b15c      	cbz	r4, c340 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    c328:	4940      	ldr	r1, [pc, #256]	; (c42c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    c32a:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    c32c:	4b40      	ldr	r3, [pc, #256]	; (c430 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    c32e:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    c332:	2400      	movs	r4, #0
  m_errorCode = code;
    c334:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c336:	601a      	str	r2, [r3, #0]
}
    c338:	4620      	mov	r0, r4
    c33a:	b003      	add	sp, #12
    c33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    c340:	4b3c      	ldr	r3, [pc, #240]	; (c434 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    c342:	4615      	mov	r5, r2
    c344:	4a3c      	ldr	r2, [pc, #240]	; (c438 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c346:	460e      	mov	r6, r1
    c348:	f8df 910c 	ldr.w	r9, [pc, #268]	; c458 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    c34c:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    c34e:	f001 feb1 	bl	e0b4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c352:	f8df 8108 	ldr.w	r8, [pc, #264]	; c45c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    c356:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c358:	f8df b104 	ldr.w	fp, [pc, #260]	; c460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c35c:	f8df a0f0 	ldr.w	sl, [pc, #240]	; c450 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    c360:	e006      	b.n	c370 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c362:	f001 fea7 	bl	e0b4 <micros>
    c366:	1bc0      	subs	r0, r0, r7
    c368:	4550      	cmp	r0, sl
    c36a:	d844      	bhi.n	c3f6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    c36c:	f003 ff50 	bl	10210 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c370:	f8d9 1000 	ldr.w	r1, [r9]
    c374:	4640      	mov	r0, r8
    c376:	f7ff fd17 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c37a:	2800      	cmp	r0, #0
    c37c:	d0f1      	beq.n	c362 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    c37e:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    c382:	05da      	lsls	r2, r3, #23
    c384:	d5ed      	bpl.n	c362 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c386:	9a00      	ldr	r2, [sp, #0]
    c388:	4b2c      	ldr	r3, [pc, #176]	; (c43c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    c38a:	492b      	ldr	r1, [pc, #172]	; (c438 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c38c:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    c390:	2200      	movs	r2, #0
  m_dmaBusy = true;
    c392:	4f2b      	ldr	r7, [pc, #172]	; (c440 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    c394:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    c39a:	2101      	movs	r1, #1
  m_irqstat = 0;
    c39c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; c464 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    c3a0:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    c3a2:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    c3a6:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c3aa:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    c3ae:	4b25      	ldr	r3, [pc, #148]	; (c444 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    c3b0:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    c3b4:	4b24      	ldr	r3, [pc, #144]	; (c448 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    c3b6:	781b      	ldrb	r3, [r3, #0]
    c3b8:	b343      	cbz	r3, c40c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    c3ba:	4631      	mov	r1, r6
    c3bc:	9801      	ldr	r0, [sp, #4]
    c3be:	f7ff fcf3 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c3c2:	4681      	mov	r9, r0
    c3c4:	2800      	cmp	r0, #0
    c3c6:	d0b7      	beq.n	c338 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    c3c8:	4b20      	ldr	r3, [pc, #128]	; (c44c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    c3ca:	4a1b      	ldr	r2, [pc, #108]	; (c438 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c3cc:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    c3ce:	f001 fe71 	bl	e0b4 <micros>
  return m_dmaBusy;
    c3d2:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    c3d4:	4605      	mov	r5, r0
  while (fcn()) {
    c3d6:	b1db      	cbz	r3, c410 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c3d8:	4e1d      	ldr	r6, [pc, #116]	; (c450 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    c3da:	e003      	b.n	c3e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    c3dc:	f003 ff18 	bl	10210 <yield>
  return m_dmaBusy;
    c3e0:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    c3e2:	b1ab      	cbz	r3, c410 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c3e4:	f001 fe66 	bl	e0b4 <micros>
    c3e8:	1b40      	subs	r0, r0, r5
    c3ea:	42b0      	cmp	r0, r6
    c3ec:	d9f6      	bls.n	c3dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    c3ee:	2300      	movs	r3, #0
    c3f0:	4a11      	ldr	r2, [pc, #68]	; (c438 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c3f2:	6013      	str	r3, [r2, #0]
      return true;
    c3f4:	e7a0      	b.n	c338 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    c3f6:	4b0d      	ldr	r3, [pc, #52]	; (c42c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    c3f8:	220a      	movs	r2, #10
      m_busyFcn = 0;
    c3fa:	2100      	movs	r1, #0
    c3fc:	480e      	ldr	r0, [pc, #56]	; (c438 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    c3fe:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    c400:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    c404:	4b0a      	ldr	r3, [pc, #40]	; (c430 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    c406:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    c408:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    c40a:	e795      	b.n	c338 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    c40c:	0276      	lsls	r6, r6, #9
    c40e:	e7d4      	b.n	c3ba <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    c410:	2300      	movs	r3, #0
    c412:	4a09      	ldr	r2, [pc, #36]	; (c438 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c414:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c416:	f8d8 3000 	ldr.w	r3, [r8]
    c41a:	079b      	lsls	r3, r3, #30
    c41c:	d58c      	bpl.n	c338 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    c41e:	f8d8 2000 	ldr.w	r2, [r8]
    c422:	4b0c      	ldr	r3, [pc, #48]	; (c454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    c424:	421a      	tst	r2, r3
    c426:	bf08      	it	eq
    c428:	464c      	moveq	r4, r9
    c42a:	e785      	b.n	c338 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    c42c:	20009426 	.word	0x20009426
    c430:	2000e814 	.word	0x2000e814
    c434:	0000bf3d 	.word	0x0000bf3d
    c438:	20015128 	.word	0x20015128
    c43c:	1fff0000 	.word	0x1fff0000
    c440:	2001605e 	.word	0x2001605e
    c444:	117f0002 	.word	0x117f0002
    c448:	2001605c 	.word	0x2001605c
    c44c:	0000b965 	.word	0x0000b965
    c450:	000f4240 	.word	0x000f4240
    c454:	117f0000 	.word	0x117f0000
    c458:	20014a58 	.word	0x20014a58
    c45c:	0d1a0000 	.word	0x0d1a0000
    c460:	402c0000 	.word	0x402c0000
    c464:	2001512c 	.word	0x2001512c

0000c468 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    c468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c46a:	4606      	mov	r6, r0
    c46c:	7a00      	ldrb	r0, [r0, #8]
    c46e:	460c      	mov	r4, r1
    c470:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    c472:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    c474:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    c476:	d413      	bmi.n	c4a0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    c478:	b183      	cbz	r3, c49c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    c47a:	440f      	add	r7, r1
    c47c:	e001      	b.n	c482 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    c47e:	42bc      	cmp	r4, r7
    c480:	d00c      	beq.n	c49c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    c482:	6833      	ldr	r3, [r6, #0]
    c484:	462a      	mov	r2, r5
    c486:	4621      	mov	r1, r4
    c488:	4630      	mov	r0, r6
    c48a:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    c48c:	3401      	adds	r4, #1
    c48e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    c492:	4798      	blx	r3
    c494:	2800      	cmp	r0, #0
    c496:	d1f2      	bne.n	c47e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    c498:	2000      	movs	r0, #0
}
    c49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    c49c:	2001      	movs	r0, #1
}
    c49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    c4a0:	0790      	lsls	r0, r2, #30
    c4a2:	d012      	beq.n	c4ca <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    c4a4:	2b00      	cmp	r3, #0
    c4a6:	d0f9      	beq.n	c49c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    c4a8:	440f      	add	r7, r1
    c4aa:	e001      	b.n	c4b0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    c4ac:	42bc      	cmp	r4, r7
    c4ae:	d0f5      	beq.n	c49c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    c4b0:	6833      	ldr	r3, [r6, #0]
    c4b2:	462a      	mov	r2, r5
    c4b4:	4621      	mov	r1, r4
    c4b6:	4630      	mov	r0, r6
    c4b8:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    c4ba:	3401      	adds	r4, #1
    c4bc:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    c4c0:	4798      	blx	r3
    c4c2:	2800      	cmp	r0, #0
    c4c4:	d1f2      	bne.n	c4ac <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    c4c6:	2000      	movs	r0, #0
    c4c8:	e7e7      	b.n	c49a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    c4ca:	4806      	ldr	r0, [pc, #24]	; (c4e4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    c4cc:	f7ff ff1e 	bl	c30c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c4d0:	2800      	cmp	r0, #0
    c4d2:	d1e3      	bne.n	c49c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    c4d4:	4904      	ldr	r1, [pc, #16]	; (c4e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    c4d6:	240c      	movs	r4, #12
  m_errorLine = line;
    c4d8:	4b04      	ldr	r3, [pc, #16]	; (c4ec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    c4da:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    c4de:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c4e0:	601a      	str	r2, [r3, #0]
}
    c4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c4e4:	123a0037 	.word	0x123a0037
    c4e8:	20009426 	.word	0x20009426
    c4ec:	2000e814 	.word	0x2000e814

0000c4f0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    c4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4f2:	4606      	mov	r6, r0
    c4f4:	7a00      	ldrb	r0, [r0, #8]
    c4f6:	460c      	mov	r4, r1
    c4f8:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    c4fa:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    c4fc:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    c4fe:	d413      	bmi.n	c528 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    c500:	b183      	cbz	r3, c524 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    c502:	440f      	add	r7, r1
    c504:	e001      	b.n	c50a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    c506:	42bc      	cmp	r4, r7
    c508:	d00c      	beq.n	c524 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    c50a:	6833      	ldr	r3, [r6, #0]
    c50c:	462a      	mov	r2, r5
    c50e:	4621      	mov	r1, r4
    c510:	4630      	mov	r0, r6
    c512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    c514:	3401      	adds	r4, #1
    c516:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    c51a:	4798      	blx	r3
    c51c:	2800      	cmp	r0, #0
    c51e:	d1f2      	bne.n	c506 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    c520:	2000      	movs	r0, #0
}
    c522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    c524:	2001      	movs	r0, #1
}
    c526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    c528:	0790      	lsls	r0, r2, #30
    c52a:	d012      	beq.n	c552 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    c52c:	2b00      	cmp	r3, #0
    c52e:	d0f9      	beq.n	c524 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    c530:	440f      	add	r7, r1
    c532:	e001      	b.n	c538 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    c534:	42bc      	cmp	r4, r7
    c536:	d0f5      	beq.n	c524 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    c538:	6833      	ldr	r3, [r6, #0]
    c53a:	462a      	mov	r2, r5
    c53c:	4621      	mov	r1, r4
    c53e:	4630      	mov	r0, r6
    c540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    c542:	3401      	adds	r4, #1
    c544:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    c548:	4798      	blx	r3
    c54a:	2800      	cmp	r0, #0
    c54c:	d1f2      	bne.n	c534 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    c54e:	2000      	movs	r0, #0
    c550:	e7e7      	b.n	c522 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    c552:	4806      	ldr	r0, [pc, #24]	; (c56c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    c554:	f7ff feda 	bl	c30c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c558:	2800      	cmp	r0, #0
    c55a:	d1e3      	bne.n	c524 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    c55c:	4904      	ldr	r1, [pc, #16]	; (c570 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    c55e:	240e      	movs	r4, #14
  m_errorLine = line;
    c560:	4b04      	ldr	r3, [pc, #16]	; (c574 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    c562:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    c566:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c568:	601a      	str	r2, [r3, #0]
}
    c56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c56c:	193a0027 	.word	0x193a0027
    c570:	20009426 	.word	0x20009426
    c574:	2000e814 	.word	0x2000e814

0000c578 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    c57c:	2500      	movs	r5, #0
  m_initDone = false;
    c57e:	f8df 92c0 	ldr.w	r9, [pc, #704]	; c840 <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    c582:	4c9b      	ldr	r4, [pc, #620]	; (c7f0 <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    c584:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    c586:	f8df 82bc 	ldr.w	r8, [pc, #700]	; c844 <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    c58a:	4e9a      	ldr	r6, [pc, #616]	; (c7f4 <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    c58c:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    c58e:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    c590:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    c594:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    c596:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    c59a:	7035      	strb	r5, [r6, #0]
  initSDHC();
    c59c:	f7ff fad2 	bl	bb44 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    c5a0:	4629      	mov	r1, r5
    c5a2:	4628      	mov	r0, r5
    c5a4:	f7ff fc00 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c5a8:	b950      	cbnz	r0, c5c0 <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    c5aa:	2101      	movs	r1, #1
  m_errorLine = line;
    c5ac:	4b92      	ldr	r3, [pc, #584]	; (c7f8 <SdioCard::begin(SdioConfig)+0x280>)
    c5ae:	f240 228e 	movw	r2, #654	; 0x28e
    c5b2:	4605      	mov	r5, r0
  m_errorCode = code;
    c5b4:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c5b6:	601a      	str	r2, [r3, #0]
}
    c5b8:	4628      	mov	r0, r5
    c5ba:	b011      	add	sp, #68	; 0x44
    c5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5c0:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    c5c2:	4f8e      	ldr	r7, [pc, #568]	; (c7fc <SdioCard::begin(SdioConfig)+0x284>)
    c5c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    c5c8:	4638      	mov	r0, r7
    c5ca:	f7ff fbed 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c5ce:	2800      	cmp	r0, #0
    c5d0:	d14e      	bne.n	c670 <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    c5d2:	3d01      	subs	r5, #1
    c5d4:	d1f6      	bne.n	c5c4 <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    c5d6:	7833      	ldrb	r3, [r6, #0]
    c5d8:	2b00      	cmp	r3, #0
    c5da:	d03d      	beq.n	c658 <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    c5dc:	f8df b268 	ldr.w	fp, [pc, #616]	; c848 <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    c5e0:	f001 fd68 	bl	e0b4 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c5e4:	4e86      	ldr	r6, [pc, #536]	; (c800 <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    c5e6:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c5e8:	f8df a260 	ldr.w	sl, [pc, #608]	; c84c <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    c5ec:	4f85      	ldr	r7, [pc, #532]	; (c804 <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c5ee:	2100      	movs	r1, #0
    c5f0:	4630      	mov	r0, r6
    c5f2:	f7ff fbd9 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c5f6:	b950      	cbnz	r0, c60e <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    c5f8:	2500      	movs	r5, #0
  m_errorCode = code;
    c5fa:	2117      	movs	r1, #23
  m_errorLine = line;
    c5fc:	4b7e      	ldr	r3, [pc, #504]	; (c7f8 <SdioCard::begin(SdioConfig)+0x280>)
    c5fe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    c602:	4628      	mov	r0, r5
  m_errorCode = code;
    c604:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c606:	601a      	str	r2, [r3, #0]
}
    c608:	b011      	add	sp, #68	; 0x44
    c60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c60e:	4659      	mov	r1, fp
    c610:	4650      	mov	r0, sl
    c612:	f7ff fbc9 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c616:	2800      	cmp	r0, #0
    c618:	d0ee      	beq.n	c5f8 <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    c61a:	f001 fd4b 	bl	e0b4 <micros>
    c61e:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    c620:	4b79      	ldr	r3, [pc, #484]	; (c808 <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    c622:	42b8      	cmp	r0, r7
    c624:	d8e8      	bhi.n	c5f8 <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    c626:	691a      	ldr	r2, [r3, #16]
    c628:	2a00      	cmp	r2, #0
    c62a:	dae0      	bge.n	c5ee <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    c62c:	6919      	ldr	r1, [r3, #16]
    c62e:	4a77      	ldr	r2, [pc, #476]	; (c80c <SdioCard::begin(SdioConfig)+0x294>)
    c630:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    c632:	691b      	ldr	r3, [r3, #16]
    c634:	005a      	lsls	r2, r3, #1
    c636:	d502      	bpl.n	c63e <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    c638:	2301      	movs	r3, #1
    c63a:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    c63e:	2100      	movs	r1, #0
    c640:	4873      	ldr	r0, [pc, #460]	; (c810 <SdioCard::begin(SdioConfig)+0x298>)
    c642:	f7ff fbb1 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c646:	4605      	mov	r5, r0
    c648:	bb10      	cbnz	r0, c690 <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    c64a:	2102      	movs	r1, #2
  m_errorLine = line;
    c64c:	4b6a      	ldr	r3, [pc, #424]	; (c7f8 <SdioCard::begin(SdioConfig)+0x280>)
    c64e:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    c652:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c654:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    c656:	e7af      	b.n	c5b8 <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    c658:	f7ff fa74 	bl	bb44 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    c65c:	4629      	mov	r1, r5
    c65e:	4628      	mov	r0, r5
    c660:	f7ff fba2 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    c664:	7833      	ldrb	r3, [r6, #0]
    c666:	2b00      	cmp	r3, #0
    c668:	d1b8      	bne.n	c5dc <SdioCard::begin(SdioConfig)+0x64>
    c66a:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    c66e:	e7b7      	b.n	c5e0 <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    c670:	4b65      	ldr	r3, [pc, #404]	; (c808 <SdioCard::begin(SdioConfig)+0x290>)
    c672:	691b      	ldr	r3, [r3, #16]
    c674:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    c678:	d007      	beq.n	c68a <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    c67a:	2106      	movs	r1, #6
  m_errorLine = line;
    c67c:	4b5e      	ldr	r3, [pc, #376]	; (c7f8 <SdioCard::begin(SdioConfig)+0x280>)
    c67e:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    c682:	2500      	movs	r5, #0
  m_errorCode = code;
    c684:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c686:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    c688:	e796      	b.n	c5b8 <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    c68a:	2301      	movs	r3, #1
    c68c:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    c68e:	e7a5      	b.n	c5dc <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    c690:	2100      	movs	r1, #0
    c692:	4860      	ldr	r0, [pc, #384]	; (c814 <SdioCard::begin(SdioConfig)+0x29c>)
    c694:	f7ff fb88 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c698:	4605      	mov	r5, r0
    c69a:	b930      	cbnz	r0, c6aa <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    c69c:	2103      	movs	r1, #3
  m_errorLine = line;
    c69e:	4b56      	ldr	r3, [pc, #344]	; (c7f8 <SdioCard::begin(SdioConfig)+0x280>)
    c6a0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    c6a4:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c6a6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    c6a8:	e786      	b.n	c5b8 <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    c6aa:	4e57      	ldr	r6, [pc, #348]	; (c808 <SdioCard::begin(SdioConfig)+0x290>)
    c6ac:	4b5a      	ldr	r3, [pc, #360]	; (c818 <SdioCard::begin(SdioConfig)+0x2a0>)
    c6ae:	6932      	ldr	r2, [r6, #16]
    c6b0:	4f5a      	ldr	r7, [pc, #360]	; (c81c <SdioCard::begin(SdioConfig)+0x2a4>)
    c6b2:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    c6b4:	495a      	ldr	r1, [pc, #360]	; (c820 <SdioCard::begin(SdioConfig)+0x2a8>)
    c6b6:	485b      	ldr	r0, [pc, #364]	; (c824 <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    c6b8:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    c6ba:	f7ff fbc1 	bl	be40 <readReg16(unsigned long, void*)>
    c6be:	4605      	mov	r5, r0
    c6c0:	b930      	cbnz	r0, c6d0 <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    c6c2:	2107      	movs	r1, #7
  m_errorLine = line;
    c6c4:	4b4c      	ldr	r3, [pc, #304]	; (c7f8 <SdioCard::begin(SdioConfig)+0x280>)
    c6c6:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    c6ca:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c6cc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    c6ce:	e773      	b.n	c5b8 <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    c6d0:	4955      	ldr	r1, [pc, #340]	; (c828 <SdioCard::begin(SdioConfig)+0x2b0>)
    c6d2:	4856      	ldr	r0, [pc, #344]	; (c82c <SdioCard::begin(SdioConfig)+0x2b4>)
    c6d4:	f7ff fbb4 	bl	be40 <readReg16(unsigned long, void*)>
    c6d8:	4605      	mov	r5, r0
    c6da:	b930      	cbnz	r0, c6ea <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    c6dc:	2108      	movs	r1, #8
  m_errorLine = line;
    c6de:	4b46      	ldr	r3, [pc, #280]	; (c7f8 <SdioCard::begin(SdioConfig)+0x280>)
    c6e0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    c6e4:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c6e6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    c6e8:	e766      	b.n	c5b8 <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    c6ea:	6839      	ldr	r1, [r7, #0]
    c6ec:	4850      	ldr	r0, [pc, #320]	; (c830 <SdioCard::begin(SdioConfig)+0x2b8>)
    c6ee:	f7ff fb5b 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c6f2:	4605      	mov	r5, r0
    c6f4:	b930      	cbnz	r0, c704 <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    c6f6:	2105      	movs	r1, #5
  m_errorLine = line;
    c6f8:	4b3f      	ldr	r3, [pc, #252]	; (c7f8 <SdioCard::begin(SdioConfig)+0x280>)
    c6fa:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    c6fe:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c700:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    c702:	e759      	b.n	c5b8 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c704:	6839      	ldr	r1, [r7, #0]
    c706:	483e      	ldr	r0, [pc, #248]	; (c800 <SdioCard::begin(SdioConfig)+0x288>)
    c708:	f7ff fb4e 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c70c:	b938      	cbnz	r0, c71e <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    c70e:	2114      	movs	r1, #20
  m_errorLine = line;
    c710:	4b39      	ldr	r3, [pc, #228]	; (c7f8 <SdioCard::begin(SdioConfig)+0x280>)
    c712:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    c716:	2500      	movs	r5, #0
  m_errorCode = code;
    c718:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c71a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    c71c:	e74c      	b.n	c5b8 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c71e:	2102      	movs	r1, #2
    c720:	4844      	ldr	r0, [pc, #272]	; (c834 <SdioCard::begin(SdioConfig)+0x2bc>)
    c722:	f7ff fb41 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c726:	4605      	mov	r5, r0
    c728:	2800      	cmp	r0, #0
    c72a:	d0f0      	beq.n	c70e <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    c72c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    c72e:	4669      	mov	r1, sp
    c730:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    c734:	f023 0306 	bic.w	r3, r3, #6
    c738:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    c73a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    c73c:	f043 0302 	orr.w	r3, r3, #2
    c740:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    c742:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    c746:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    c748:	f7ff fcd4 	bl	c0f4 <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    c74c:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    c750:	079b      	lsls	r3, r3, #30
    c752:	d543      	bpl.n	c7dc <SdioCard::begin(SdioConfig)+0x264>
    c754:	2800      	cmp	r0, #0
    c756:	d041      	beq.n	c7dc <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    c758:	4e27      	ldr	r6, [pc, #156]	; (c7f8 <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    c75a:	4669      	mov	r1, sp
    c75c:	4836      	ldr	r0, [pc, #216]	; (c838 <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    c75e:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    c762:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    c764:	f7ff fcc6 	bl	c0f4 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    c768:	f89d 3010 	ldrb.w	r3, [sp, #16]
    c76c:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    c770:	2b01      	cmp	r3, #1
    c772:	d136      	bne.n	c7e2 <SdioCard::begin(SdioConfig)+0x26a>
    c774:	b3a8      	cbz	r0, c7e2 <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    c776:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c77a:	4c30      	ldr	r4, [pc, #192]	; (c83c <SdioCard::begin(SdioConfig)+0x2c4>)
    c77c:	2305      	movs	r3, #5
    c77e:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    c782:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    c786:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    c78a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    c78e:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    c792:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    c796:	f7ff f8eb 	bl	b970 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c79a:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    c79c:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c7a0:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    c7a4:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    c7a8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    c7ac:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    c7b0:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    c7b4:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    c7b8:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    c7bc:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    c7c0:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    c7c4:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    c7c8:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    c7cc:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    c7ce:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    c7d2:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    c7d6:	f889 3000 	strb.w	r3, [r9]
  return true;
    c7da:	e6ed      	b.n	c5b8 <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    c7dc:	f246 10a8 	movw	r0, #25000	; 0x61a8
    c7e0:	e7cb      	b.n	c77a <SdioCard::begin(SdioConfig)+0x202>
    c7e2:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    c7e6:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    c7ea:	6037      	str	r7, [r6, #0]
    c7ec:	e7c5      	b.n	c77a <SdioCard::begin(SdioConfig)+0x202>
    c7ee:	bf00      	nop
    c7f0:	20009426 	.word	0x20009426
    c7f4:	2001605b 	.word	0x2001605b
    c7f8:	2000e814 	.word	0x2000e814
    c7fc:	081a0000 	.word	0x081a0000
    c800:	371a0000 	.word	0x371a0000
    c804:	000f4240 	.word	0x000f4240
    c808:	402c0000 	.word	0x402c0000
    c80c:	20014a54 	.word	0x20014a54
    c810:	02090000 	.word	0x02090000
    c814:	031a0000 	.word	0x031a0000
    c818:	ffff0000 	.word	0xffff0000
    c81c:	20014a58 	.word	0x20014a58
    c820:	20014a44 	.word	0x20014a44
    c824:	09090000 	.word	0x09090000
    c828:	20014a34 	.word	0x20014a34
    c82c:	0a090000 	.word	0x0a090000
    c830:	071b0000 	.word	0x071b0000
    c834:	061a0000 	.word	0x061a0000
    c838:	80fffff1 	.word	0x80fffff1
    c83c:	401f8000 	.word	0x401f8000
    c840:	2001605a 	.word	0x2001605a
    c844:	2001605c 	.word	0x2001605c
    c848:	40300000 	.word	0x40300000
    c84c:	29020000 	.word	0x29020000

0000c850 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    c850:	4b37      	ldr	r3, [pc, #220]	; (c930 <SdioCard::readData(unsigned char*)+0xe0>)
    c852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c854:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    c856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c85a:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    c85c:	d40d      	bmi.n	c87a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c85e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    c864:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    c866:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    c868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c86a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c86e:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    c870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c872:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    c876:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    c878:	b662      	cpsie	i
  uint32_t m = micros();
    c87a:	f001 fc1b 	bl	e0b4 <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    c87e:	4e2c      	ldr	r6, [pc, #176]	; (c930 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c880:	f8df 80c4 	ldr.w	r8, [pc, #196]	; c948 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    c884:	4605      	mov	r5, r0
  while (fcn()) {
    c886:	e004      	b.n	c892 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c888:	f001 fc14 	bl	e0b4 <micros>
    c88c:	1b43      	subs	r3, r0, r5
    c88e:	4543      	cmp	r3, r8
    c890:	d837      	bhi.n	c902 <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    c892:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    c894:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    c898:	d0f6      	beq.n	c888 <SdioCard::readData(unsigned char*)+0x38>
    c89a:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    c89e:	4824      	ldr	r0, [pc, #144]	; (c930 <SdioCard::readData(unsigned char*)+0xe0>)
    c8a0:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    c8a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c8a6:	051b      	lsls	r3, r3, #20
    c8a8:	d5fc      	bpl.n	c8a4 <SdioCard::readData(unsigned char*)+0x54>
    c8aa:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    c8ae:	6a02      	ldr	r2, [r0, #32]
    c8b0:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    c8b4:	459c      	cmp	ip, r3
    c8b6:	d1fa      	bne.n	c8ae <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    c8b8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    c8bc:	4567      	cmp	r7, ip
    c8be:	d1f1      	bne.n	c8a4 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    c8c0:	f001 fbf8 	bl	e0b4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    c8c4:	4f1a      	ldr	r7, [pc, #104]	; (c930 <SdioCard::readData(unsigned char*)+0xe0>)
    c8c6:	4d1b      	ldr	r5, [pc, #108]	; (c934 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    c8c8:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c8ca:	f8df 807c 	ldr.w	r8, [pc, #124]	; c948 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    c8ce:	e004      	b.n	c8da <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c8d0:	f001 fbf0 	bl	e0b4 <micros>
    c8d4:	1b83      	subs	r3, r0, r6
    c8d6:	4543      	cmp	r3, r8
    c8d8:	d81d      	bhi.n	c916 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    c8da:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    c8dc:	402c      	ands	r4, r5
    c8de:	d0f7      	beq.n	c8d0 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c8e2:	4a15      	ldr	r2, [pc, #84]	; (c938 <SdioCard::readData(unsigned char*)+0xe8>)
    c8e4:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    c8e6:	6813      	ldr	r3, [r2, #0]
    c8e8:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c8ea:	6813      	ldr	r3, [r2, #0]
    c8ec:	f013 0302 	ands.w	r3, r3, #2
    c8f0:	d01b      	beq.n	c92a <SdioCard::readData(unsigned char*)+0xda>
    c8f2:	6812      	ldr	r2, [r2, #0]
    c8f4:	4b11      	ldr	r3, [pc, #68]	; (c93c <SdioCard::readData(unsigned char*)+0xec>)
    c8f6:	421a      	tst	r2, r3
    c8f8:	bf0c      	ite	eq
    c8fa:	2001      	moveq	r0, #1
    c8fc:	2000      	movne	r0, #0
}
    c8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    c902:	490f      	ldr	r1, [pc, #60]	; (c940 <SdioCard::readData(unsigned char*)+0xf0>)
    c904:	251a      	movs	r5, #26
  m_errorLine = line;
    c906:	4b0f      	ldr	r3, [pc, #60]	; (c944 <SdioCard::readData(unsigned char*)+0xf4>)
    c908:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    c90c:	4620      	mov	r0, r4
  m_errorCode = code;
    c90e:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    c910:	601a      	str	r2, [r3, #0]
}
    c912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    c916:	490a      	ldr	r1, [pc, #40]	; (c940 <SdioCard::readData(unsigned char*)+0xf0>)
    c918:	251d      	movs	r5, #29
  m_errorLine = line;
    c91a:	4b0a      	ldr	r3, [pc, #40]	; (c944 <SdioCard::readData(unsigned char*)+0xf4>)
    c91c:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    c920:	4620      	mov	r0, r4
  m_errorCode = code;
    c922:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    c924:	601a      	str	r2, [r3, #0]
}
    c926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c92a:	4618      	mov	r0, r3
}
    c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c930:	402c0000 	.word	0x402c0000
    c934:	117f0002 	.word	0x117f0002
    c938:	2001512c 	.word	0x2001512c
    c93c:	117f0000 	.word	0x117f0000
    c940:	20009426 	.word	0x20009426
    c944:	2000e814 	.word	0x2000e814
    c948:	000f4240 	.word	0x000f4240

0000c94c <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    c94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    c950:	4b29      	ldr	r3, [pc, #164]	; (c9f8 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    c952:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    c954:	f8df a0c0 	ldr.w	sl, [pc, #192]	; ca18 <SdioCard::readStart(unsigned long)+0xcc>
    c958:	4e28      	ldr	r6, [pc, #160]	; (c9fc <SdioCard::readStart(unsigned long)+0xb0>)
    c95a:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    c95e:	f001 fba9 	bl	e0b4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c962:	4d27      	ldr	r5, [pc, #156]	; (ca00 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    c964:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c966:	f8df 80b4 	ldr.w	r8, [pc, #180]	; ca1c <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c96a:	4f26      	ldr	r7, [pc, #152]	; (ca04 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    c96c:	e006      	b.n	c97c <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c96e:	f001 fba1 	bl	e0b4 <micros>
    c972:	1b00      	subs	r0, r0, r4
    c974:	42b8      	cmp	r0, r7
    c976:	d829      	bhi.n	c9cc <SdioCard::readStart(unsigned long)+0x80>
    yield();
    c978:	f003 fc4a 	bl	10210 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c97c:	6831      	ldr	r1, [r6, #0]
    c97e:	4628      	mov	r0, r5
    c980:	f7ff fa12 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c984:	2800      	cmp	r0, #0
    c986:	d0f2      	beq.n	c96e <SdioCard::readStart(unsigned long)+0x22>
    c988:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    c98c:	05db      	lsls	r3, r3, #23
    c98e:	d5ee      	bpl.n	c96e <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    c990:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    c992:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    c996:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    c99a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    c99e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c9a2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c9a6:	4b18      	ldr	r3, [pc, #96]	; (ca08 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    c9a8:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c9ac:	781b      	ldrb	r3, [r3, #0]
    c9ae:	b1cb      	cbz	r3, c9e4 <SdioCard::readStart(unsigned long)+0x98>
    c9b0:	4649      	mov	r1, r9
    c9b2:	4816      	ldr	r0, [pc, #88]	; (ca0c <SdioCard::readStart(unsigned long)+0xc0>)
    c9b4:	f7ff f9f8 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c9b8:	b930      	cbnz	r0, c9c8 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    c9ba:	4915      	ldr	r1, [pc, #84]	; (ca10 <SdioCard::readStart(unsigned long)+0xc4>)
    c9bc:	240c      	movs	r4, #12
  m_errorLine = line;
    c9be:	4b15      	ldr	r3, [pc, #84]	; (ca14 <SdioCard::readStart(unsigned long)+0xc8>)
    c9c0:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    c9c4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c9c6:	601a      	str	r2, [r3, #0]
}
    c9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    c9cc:	4a10      	ldr	r2, [pc, #64]	; (ca10 <SdioCard::readStart(unsigned long)+0xc4>)
    c9ce:	210a      	movs	r1, #10
      m_busyFcn = 0;
    c9d0:	2000      	movs	r0, #0
  m_errorLine = line;
    c9d2:	4b10      	ldr	r3, [pc, #64]	; (ca14 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    c9d4:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    c9d6:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    c9da:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    c9de:	601a      	str	r2, [r3, #0]
}
    c9e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c9e4:	ea4f 2949 	mov.w	r9, r9, lsl #9
    c9e8:	4808      	ldr	r0, [pc, #32]	; (ca0c <SdioCard::readStart(unsigned long)+0xc0>)
    c9ea:	4649      	mov	r1, r9
    c9ec:	f7ff f9dc 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    c9f0:	2800      	cmp	r0, #0
    c9f2:	d1e9      	bne.n	c9c8 <SdioCard::readStart(unsigned long)+0x7c>
    c9f4:	e7e1      	b.n	c9ba <SdioCard::readStart(unsigned long)+0x6e>
    c9f6:	bf00      	nop
    c9f8:	0000bf3d 	.word	0x0000bf3d
    c9fc:	20014a58 	.word	0x20014a58
    ca00:	0d1a0000 	.word	0x0d1a0000
    ca04:	000f4240 	.word	0x000f4240
    ca08:	2001605c 	.word	0x2001605c
    ca0c:	123a0030 	.word	0x123a0030
    ca10:	20009426 	.word	0x20009426
    ca14:	2000e814 	.word	0x2000e814
    ca18:	20015128 	.word	0x20015128
    ca1c:	402c0000 	.word	0x402c0000

0000ca20 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    ca20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    ca24:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ca26:	4c1d      	ldr	r4, [pc, #116]	; (ca9c <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    ca28:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    ca2a:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    ca2c:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ca2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    ca30:	481b      	ldr	r0, [pc, #108]	; (caa0 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ca32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    ca36:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    ca38:	f7ff f9b6 	bl	bda8 <cardCommand(unsigned long, unsigned long)>
    ca3c:	b940      	cbnz	r0, ca50 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    ca3e:	4919      	ldr	r1, [pc, #100]	; (caa4 <SdioCard::stopTransmission(bool)+0x84>)
    ca40:	2409      	movs	r4, #9
  m_errorLine = line;
    ca42:	4b19      	ldr	r3, [pc, #100]	; (caa8 <SdioCard::stopTransmission(bool)+0x88>)
    ca44:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    ca48:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    ca4a:	601a      	str	r2, [r3, #0]
}
    ca4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    ca50:	2d00      	cmp	r5, #0
    ca52:	d0fb      	beq.n	ca4c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    ca54:	4b15      	ldr	r3, [pc, #84]	; (caac <SdioCard::stopTransmission(bool)+0x8c>)
    ca56:	4e16      	ldr	r6, [pc, #88]	; (cab0 <SdioCard::stopTransmission(bool)+0x90>)
    ca58:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    ca5a:	f001 fb2b 	bl	e0b4 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    ca5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    ca60:	4607      	mov	r7, r0
  while (fcn()) {
    ca62:	01da      	lsls	r2, r3, #7
    ca64:	d416      	bmi.n	ca94 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ca66:	f8df 804c 	ldr.w	r8, [pc, #76]	; cab4 <SdioCard::stopTransmission(bool)+0x94>
    ca6a:	e004      	b.n	ca76 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    ca6c:	f003 fbd0 	bl	10210 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    ca70:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    ca72:	01db      	lsls	r3, r3, #7
    ca74:	d40e      	bmi.n	ca94 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ca76:	f001 fb1d 	bl	e0b4 <micros>
    ca7a:	1bc0      	subs	r0, r0, r7
    ca7c:	4540      	cmp	r0, r8
    ca7e:	d9f5      	bls.n	ca6c <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    ca80:	4a08      	ldr	r2, [pc, #32]	; (caa4 <SdioCard::stopTransmission(bool)+0x84>)
    ca82:	210a      	movs	r1, #10
      m_busyFcn = 0;
    ca84:	2000      	movs	r0, #0
  m_errorLine = line;
    ca86:	4b08      	ldr	r3, [pc, #32]	; (caa8 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    ca88:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    ca8a:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    ca8e:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    ca90:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    ca92:	e7db      	b.n	ca4c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    ca94:	2300      	movs	r3, #0
  return true;
    ca96:	4628      	mov	r0, r5
  m_busyFcn = 0;
    ca98:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    ca9a:	e7d7      	b.n	ca4c <SdioCard::stopTransmission(bool)+0x2c>
    ca9c:	402c0000 	.word	0x402c0000
    caa0:	0cdb0000 	.word	0x0cdb0000
    caa4:	20009426 	.word	0x20009426
    caa8:	2000e814 	.word	0x2000e814
    caac:	0000b951 	.word	0x0000b951
    cab0:	20015128 	.word	0x20015128
    cab4:	000f4240 	.word	0x000f4240

0000cab8 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    cab8:	4b0a      	ldr	r3, [pc, #40]	; (cae4 <SdioCard::syncDevice()+0x2c>)
    caba:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    cabc:	b510      	push	{r4, lr}
    cabe:	4604      	mov	r4, r0
  if (!m_transferActive) {
    cac0:	b91b      	cbnz	r3, caca <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    cac2:	7a63      	ldrb	r3, [r4, #9]
    cac4:	b943      	cbnz	r3, cad8 <SdioCard::syncDevice()+0x20>
  return true;
    cac6:	2001      	movs	r0, #1
}
    cac8:	bd10      	pop	{r4, pc}
    caca:	f7ff f8cf 	bl	bc6c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    cace:	2800      	cmp	r0, #0
    cad0:	d0fa      	beq.n	cac8 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    cad2:	7a63      	ldrb	r3, [r4, #9]
    cad4:	2b00      	cmp	r3, #0
    cad6:	d0f6      	beq.n	cac6 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    cad8:	4620      	mov	r0, r4
    cada:	2101      	movs	r1, #1
}
    cadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    cae0:	f7ff bf9e 	b.w	ca20 <SdioCard::stopTransmission(bool)>
    cae4:	2001605d 	.word	0x2001605d

0000cae8 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    cae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    caec:	4604      	mov	r4, r0
    caee:	7a00      	ldrb	r0, [r0, #8]
    caf0:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    caf4:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    caf6:	f010 0501 	ands.w	r5, r0, #1
    cafa:	d013      	beq.n	cb24 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    cafc:	0793      	lsls	r3, r2, #30
    cafe:	d03c      	beq.n	cb7a <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    cb00:	2301      	movs	r3, #1
    cb02:	4838      	ldr	r0, [pc, #224]	; (cbe4 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    cb04:	466a      	mov	r2, sp
    cb06:	f7ff fc01 	bl	c30c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    cb0a:	2800      	cmp	r0, #0
    cb0c:	d03a      	beq.n	cb84 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    cb0e:	f44f 7200 	mov.w	r2, #512	; 0x200
    cb12:	4669      	mov	r1, sp
    cb14:	4630      	mov	r0, r6
    cb16:	f001 fd7d 	bl	e614 <memcpy>
}
    cb1a:	4628      	mov	r0, r5
    cb1c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    cb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    cb24:	f8df 80cc 	ldr.w	r8, [pc, #204]	; cbf4 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    cb28:	460f      	mov	r7, r1
    cb2a:	f898 3000 	ldrb.w	r3, [r8]
    cb2e:	2b00      	cmp	r3, #0
    cb30:	d135      	bne.n	cb9e <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    cb32:	7a63      	ldrb	r3, [r4, #9]
    cb34:	2b01      	cmp	r3, #1
    cb36:	d039      	beq.n	cbac <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    cb38:	6822      	ldr	r2, [r4, #0]
    cb3a:	492b      	ldr	r1, [pc, #172]	; (cbe8 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    cb3c:	6a12      	ldr	r2, [r2, #32]
    cb3e:	428a      	cmp	r2, r1
    cb40:	d14a      	bne.n	cbd8 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    cb42:	f898 2000 	ldrb.w	r2, [r8]
    cb46:	2a00      	cmp	r2, #0
    cb48:	d134      	bne.n	cbb4 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    cb4a:	2b00      	cmp	r3, #0
    cb4c:	d139      	bne.n	cbc2 <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    cb4e:	4639      	mov	r1, r7
    cb50:	4620      	mov	r0, r4
    cb52:	f7ff fefb 	bl	c94c <SdioCard::readStart(unsigned long)>
    cb56:	b1e8      	cbz	r0, cb94 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    cb58:	2301      	movs	r3, #1
      m_curSector = sector;
    cb5a:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    cb5c:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    cb5e:	4631      	mov	r1, r6
    cb60:	4620      	mov	r0, r4
    cb62:	f7ff fe75 	bl	c850 <SdioCard::readData(unsigned char*)>
    cb66:	b1a8      	cbz	r0, cb94 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    cb68:	6863      	ldr	r3, [r4, #4]
  return true;
    cb6a:	4605      	mov	r5, r0
    m_curSector++;
    cb6c:	3301      	adds	r3, #1
}
    cb6e:	4628      	mov	r0, r5
    m_curSector++;
    cb70:	6063      	str	r3, [r4, #4]
}
    cb72:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    cb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    cb7a:	2301      	movs	r3, #1
    cb7c:	4819      	ldr	r0, [pc, #100]	; (cbe4 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    cb7e:	f7ff fbc5 	bl	c30c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    cb82:	b938      	cbnz	r0, cb94 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    cb84:	4919      	ldr	r1, [pc, #100]	; (cbec <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    cb86:	200b      	movs	r0, #11
  m_errorLine = line;
    cb88:	4b19      	ldr	r3, [pc, #100]	; (cbf0 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    cb8a:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    cb8e:	2500      	movs	r5, #0
  m_errorCode = code;
    cb90:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    cb92:	601a      	str	r2, [r3, #0]
}
    cb94:	4628      	mov	r0, r5
    cb96:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    cb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb9e:	f7ff f865 	bl	bc6c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    cba2:	2800      	cmp	r0, #0
    cba4:	d0f6      	beq.n	cb94 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    cba6:	7a63      	ldrb	r3, [r4, #9]
    cba8:	2b01      	cmp	r3, #1
    cbaa:	d1c5      	bne.n	cb38 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    cbac:	6862      	ldr	r2, [r4, #4]
    cbae:	42ba      	cmp	r2, r7
    cbb0:	d1c2      	bne.n	cb38 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    cbb2:	e7d4      	b.n	cb5e <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    cbb4:	f7ff f85a 	bl	bc6c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    cbb8:	2800      	cmp	r0, #0
    cbba:	d0eb      	beq.n	cb94 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    cbbc:	7a63      	ldrb	r3, [r4, #9]
    cbbe:	2b00      	cmp	r3, #0
    cbc0:	d0c5      	beq.n	cb4e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    cbc2:	2101      	movs	r1, #1
    cbc4:	4620      	mov	r0, r4
    cbc6:	f7ff ff2b 	bl	ca20 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    cbca:	2800      	cmp	r0, #0
    cbcc:	d1bf      	bne.n	cb4e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    cbce:	4628      	mov	r0, r5
    cbd0:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    cbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    cbd8:	4620      	mov	r0, r4
    cbda:	4790      	blx	r2
    cbdc:	2800      	cmp	r0, #0
    cbde:	d0f6      	beq.n	cbce <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    cbe0:	e7b5      	b.n	cb4e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    cbe2:	bf00      	nop
    cbe4:	113a0011 	.word	0x113a0011
    cbe8:	0000cab9 	.word	0x0000cab9
    cbec:	20009426 	.word	0x20009426
    cbf0:	2000e814 	.word	0x2000e814
    cbf4:	2001605d 	.word	0x2001605d

0000cbf8 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    cbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbfc:	7a04      	ldrb	r4, [r0, #8]
    cbfe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    cc02:	460f      	mov	r7, r1
    cc04:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    cc06:	f014 0401 	ands.w	r4, r4, #1
    cc0a:	d01d      	beq.n	cc48 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    cc0c:	f012 0f03 	tst.w	r2, #3
    cc10:	d006      	beq.n	cc20 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    cc12:	4668      	mov	r0, sp
    cc14:	4611      	mov	r1, r2
    cc16:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    cc1a:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    cc1c:	f001 fcfa 	bl	e614 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    cc20:	2301      	movs	r3, #1
    cc22:	4642      	mov	r2, r8
    cc24:	4639      	mov	r1, r7
    cc26:	482c      	ldr	r0, [pc, #176]	; (ccd8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    cc28:	f7ff fb70 	bl	c30c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    cc2c:	4604      	mov	r4, r0
    cc2e:	b930      	cbnz	r0, cc3e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    cc30:	492a      	ldr	r1, [pc, #168]	; (ccdc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    cc32:	200d      	movs	r0, #13
  m_errorLine = line;
    cc34:	4b2a      	ldr	r3, [pc, #168]	; (cce0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    cc36:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    cc3a:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    cc3c:	601a      	str	r2, [r3, #0]
}
    cc3e:	4620      	mov	r0, r4
    cc40:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    cc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    cc48:	4d26      	ldr	r5, [pc, #152]	; (cce4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    cc4a:	4606      	mov	r6, r0
    cc4c:	782b      	ldrb	r3, [r5, #0]
    cc4e:	bb2b      	cbnz	r3, cc9c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    cc50:	7a73      	ldrb	r3, [r6, #9]
    cc52:	2b02      	cmp	r3, #2
    cc54:	d029      	beq.n	ccaa <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    cc56:	6832      	ldr	r2, [r6, #0]
    cc58:	4923      	ldr	r1, [pc, #140]	; (cce8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    cc5a:	6a12      	ldr	r2, [r2, #32]
    cc5c:	428a      	cmp	r2, r1
    cc5e:	d136      	bne.n	ccce <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    cc60:	782a      	ldrb	r2, [r5, #0]
    cc62:	bb32      	cbnz	r2, ccb2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    cc64:	2b00      	cmp	r3, #0
    cc66:	d12b      	bne.n	ccc0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    cc68:	6833      	ldr	r3, [r6, #0]
    cc6a:	4639      	mov	r1, r7
    cc6c:	4630      	mov	r0, r6
    cc6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    cc70:	4798      	blx	r3
    cc72:	2800      	cmp	r0, #0
    cc74:	d0e3      	beq.n	cc3e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    cc76:	2302      	movs	r3, #2
      m_curSector = sector;
    cc78:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    cc7a:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    cc7c:	6833      	ldr	r3, [r6, #0]
    cc7e:	4641      	mov	r1, r8
    cc80:	4630      	mov	r0, r6
    cc82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    cc84:	4798      	blx	r3
    cc86:	2800      	cmp	r0, #0
    cc88:	d0d9      	beq.n	cc3e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    cc8a:	6873      	ldr	r3, [r6, #4]
  return true;
    cc8c:	4604      	mov	r4, r0
    m_curSector++;
    cc8e:	3301      	adds	r3, #1
}
    cc90:	4620      	mov	r0, r4
    m_curSector++;
    cc92:	6073      	str	r3, [r6, #4]
}
    cc94:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc9c:	f7fe ffe6 	bl	bc6c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    cca0:	2800      	cmp	r0, #0
    cca2:	d0cc      	beq.n	cc3e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    cca4:	7a73      	ldrb	r3, [r6, #9]
    cca6:	2b02      	cmp	r3, #2
    cca8:	d1d5      	bne.n	cc56 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    ccaa:	6872      	ldr	r2, [r6, #4]
    ccac:	42ba      	cmp	r2, r7
    ccae:	d1d2      	bne.n	cc56 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    ccb0:	e7e4      	b.n	cc7c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    ccb2:	f7fe ffdb 	bl	bc6c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    ccb6:	2800      	cmp	r0, #0
    ccb8:	d0c1      	beq.n	cc3e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    ccba:	7a73      	ldrb	r3, [r6, #9]
    ccbc:	2b00      	cmp	r3, #0
    ccbe:	d0d3      	beq.n	cc68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    ccc0:	2101      	movs	r1, #1
    ccc2:	4630      	mov	r0, r6
    ccc4:	f7ff feac 	bl	ca20 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    ccc8:	2800      	cmp	r0, #0
    ccca:	d0b8      	beq.n	cc3e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    cccc:	e7cc      	b.n	cc68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    ccce:	4630      	mov	r0, r6
    ccd0:	4790      	blx	r2
    ccd2:	2800      	cmp	r0, #0
    ccd4:	d0b3      	beq.n	cc3e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    ccd6:	e7c7      	b.n	cc68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    ccd8:	183a0001 	.word	0x183a0001
    ccdc:	20009426 	.word	0x20009426
    cce0:	2000e814 	.word	0x2000e814
    cce4:	2001605d 	.word	0x2001605d
    cce8:	0000cab9 	.word	0x0000cab9

0000ccec <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    ccec:	f001 ba0c 	b.w	e108 <digitalWrite>

0000ccf0 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    ccf0:	b430      	push	{r4, r5}
    ccf2:	b082      	sub	sp, #8
    ccf4:	460c      	mov	r4, r1
    ccf6:	ab02      	add	r3, sp, #8
    ccf8:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    ccfc:	7cc3      	ldrb	r3, [r0, #19]
    ccfe:	2b00      	cmp	r3, #0
    cd00:	d030      	beq.n	cd64 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    cd02:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    cd04:	7cc3      	ldrb	r3, [r0, #19]
    cd06:	07da      	lsls	r2, r3, #31
    cd08:	d508      	bpl.n	cd1c <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    cd0a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cd0e:	6945      	ldr	r5, [r0, #20]
    cd10:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    cd14:	402a      	ands	r2, r5
    cd16:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    cd18:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    cd1c:	079d      	lsls	r5, r3, #30
    cd1e:	d508      	bpl.n	cd32 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    cd20:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cd24:	6985      	ldr	r5, [r0, #24]
    cd26:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    cd2a:	402a      	ands	r2, r5
    cd2c:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    cd2e:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    cd32:	0759      	lsls	r1, r3, #29
    cd34:	d508      	bpl.n	cd48 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    cd36:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cd3a:	69c5      	ldr	r5, [r0, #28]
    cd3c:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    cd40:	402a      	ands	r2, r5
    cd42:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    cd44:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    cd48:	071a      	lsls	r2, r3, #28
    cd4a:	d508      	bpl.n	cd5e <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    cd4c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cd50:	6a05      	ldr	r5, [r0, #32]
    cd52:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    cd56:	402a      	ands	r2, r5
    cd58:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    cd5a:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    cd5e:	06db      	lsls	r3, r3, #27
    cd60:	d42f      	bmi.n	cdc2 <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    cd62:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    cd64:	6883      	ldr	r3, [r0, #8]
    cd66:	429c      	cmp	r4, r3
    cd68:	d035      	beq.n	cdd6 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    cd6a:	4b22      	ldr	r3, [pc, #136]	; (cdf4 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    cd6c:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    cd6e:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    cd70:	4a21      	ldr	r2, [pc, #132]	; (cdf8 <SPIClass::beginTransaction(SPISettings)+0x108>)
    cd72:	f3c3 1101 	ubfx	r1, r3, #4, #2
    cd76:	f3c3 6382 	ubfx	r3, r3, #26, #3
    cd7a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    cd7e:	3301      	adds	r3, #1
    cd80:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    cd84:	b1cc      	cbz	r4, cdba <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    cd86:	4294      	cmp	r4, r2
    cd88:	d827      	bhi.n	cdda <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    cd8a:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    cd8e:	fbb2 f2f3 	udiv	r2, r2, r3
    cd92:	4294      	cmp	r4, r2
    cd94:	d32c      	bcc.n	cdf0 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    cd96:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    cd9a:	d320      	bcc.n	cdde <SPIClass::beginTransaction(SPISettings)+0xee>
    cd9c:	4c17      	ldr	r4, [pc, #92]	; (cdfc <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    cd9e:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cda0:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    cda2:	2203      	movs	r2, #3
		port().CR = 0;
    cda4:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    cda6:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    cda8:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    cdaa:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    cdac:	2201      	movs	r2, #1
		port().CCR = _ccr;
    cdae:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    cdb0:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    cdb2:	611a      	str	r2, [r3, #16]
	}
    cdb4:	b002      	add	sp, #8
    cdb6:	bc30      	pop	{r4, r5}
    cdb8:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    cdba:	4299      	cmp	r1, r3
    cdbc:	d3ef      	bcc.n	cd9e <SPIClass::beginTransaction(SPISettings)+0xae>
    cdbe:	1c53      	adds	r3, r2, #1
    cdc0:	e7e9      	b.n	cd96 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    cdc2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cdc6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    cdc8:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    cdcc:	400b      	ands	r3, r1
    cdce:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    cdd0:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    cdd4:	e7c5      	b.n	cd62 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    cdd6:	68c4      	ldr	r4, [r0, #12]
    cdd8:	e7e2      	b.n	cda0 <SPIClass::beginTransaction(SPISettings)+0xb0>
    cdda:	2400      	movs	r4, #0
    cddc:	e7df      	b.n	cd9e <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    cdde:	2b02      	cmp	r3, #2
    cde0:	d9fb      	bls.n	cdda <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    cde2:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    cde4:	085a      	lsrs	r2, r3, #1
    cde6:	0214      	lsls	r4, r2, #8
    cde8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    cdec:	431c      	orrs	r4, r3
    cdee:	e7d6      	b.n	cd9e <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    cdf0:	461a      	mov	r2, r3
    cdf2:	e7e4      	b.n	cdbe <SPIClass::beginTransaction(SPISettings)+0xce>
    cdf4:	400fc000 	.word	0x400fc000
    cdf8:	20000d10 	.word	0x20000d10
    cdfc:	007f7fff 	.word	0x007f7fff

0000ce00 <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() {
    ce00:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    ce02:	4603      	mov	r3, r0
    ce04:	f853 0b04 	ldr.w	r0, [r3], #4
    ce08:	e893 0006 	ldmia.w	r3, {r1, r2}
    ce0c:	f7ff ff70 	bl	ccf0 <SPIClass::beginTransaction(SPISettings)>
}
    ce10:	bd08      	pop	{r3, pc}
    ce12:	bf00      	nop

0000ce14 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    ce14:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    ce16:	7cd3      	ldrb	r3, [r2, #19]
    ce18:	b313      	cbz	r3, ce60 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    ce1a:	07d8      	lsls	r0, r3, #31
    ce1c:	d504      	bpl.n	ce28 <SdSpiArduinoDriver::deactivate()+0x14>
    ce1e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    ce20:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ce24:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    ce28:	0799      	lsls	r1, r3, #30
    ce2a:	d504      	bpl.n	ce36 <SdSpiArduinoDriver::deactivate()+0x22>
    ce2c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    ce2e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ce32:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    ce36:	0758      	lsls	r0, r3, #29
    ce38:	d504      	bpl.n	ce44 <SdSpiArduinoDriver::deactivate()+0x30>
    ce3a:	6b10      	ldr	r0, [r2, #48]	; 0x30
    ce3c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ce40:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    ce44:	0719      	lsls	r1, r3, #28
    ce46:	d504      	bpl.n	ce52 <SdSpiArduinoDriver::deactivate()+0x3e>
    ce48:	6b50      	ldr	r0, [r2, #52]	; 0x34
    ce4a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ce4e:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    ce52:	06db      	lsls	r3, r3, #27
    ce54:	d504      	bpl.n	ce60 <SdSpiArduinoDriver::deactivate()+0x4c>
    ce56:	6b92      	ldr	r2, [r2, #56]	; 0x38
    ce58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ce5c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    ce60:	4770      	bx	lr
    ce62:	bf00      	nop

0000ce64 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    ce64:	6800      	ldr	r0, [r0, #0]
    ce66:	f000 b9f9 	b.w	d25c <SPIClass::end()>
    ce6a:	bf00      	nop

0000ce6c <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    ce6c:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    ce6e:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    ce70:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    ce72:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    ce74:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    ce76:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    ce7a:	d0fb      	beq.n	ce74 <SdSpiArduinoDriver::receive()+0x8>
    ce7c:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    ce7e:	b2c0      	uxtb	r0, r0
    ce80:	4770      	bx	lr
    ce82:	bf00      	nop

0000ce84 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    ce84:	b530      	push	{r4, r5, lr}
    ce86:	460c      	mov	r4, r1
    ce88:	b083      	sub	sp, #12
    ce8a:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    ce8c:	21ff      	movs	r1, #255	; 0xff
    ce8e:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    ce90:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    ce92:	f005 fc4d 	bl	12730 <memset>
		transfer(buf, buf, count);
    ce96:	6828      	ldr	r0, [r5, #0]
    ce98:	9b01      	ldr	r3, [sp, #4]
    ce9a:	4622      	mov	r2, r4
    ce9c:	4621      	mov	r1, r4
    ce9e:	f000 f9d9 	bl	d254 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    cea2:	2000      	movs	r0, #0
    cea4:	b003      	add	sp, #12
    cea6:	bd30      	pop	{r4, r5, pc}

0000cea8 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cea8:	6803      	ldr	r3, [r0, #0]
    ceaa:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    ceac:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    ceae:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    ceb0:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    ceb4:	d0fb      	beq.n	ceae <SdSpiArduinoDriver::send(unsigned char)+0x6>
    ceb6:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    ceb8:	4770      	bx	lr
    ceba:	bf00      	nop

0000cebc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    cebc:	1e53      	subs	r3, r2, #1
    cebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    cec2:	b530      	push	{r4, r5, lr}
    cec4:	4614      	mov	r4, r2
    cec6:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    ceca:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    cecc:	d311      	bcc.n	cef2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    cece:	b16a      	cbz	r2, ceec <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    ced0:	6803      	ldr	r3, [r0, #0]
    ced2:	1e48      	subs	r0, r1, #1
    ced4:	6819      	ldr	r1, [r3, #0]
    ced6:	1882      	adds	r2, r0, r2
		port().TDR = data;
    ced8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    cedc:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    cede:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    cee0:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    cee4:	d0fb      	beq.n	cede <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    cee6:	4290      	cmp	r0, r2
    cee8:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    ceea:	d1f5      	bne.n	ced8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    ceec:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    cef0:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    cef2:	4668      	mov	r0, sp
    cef4:	f001 fb8e 	bl	e614 <memcpy>
		transfer(buf, buf, count);
    cef8:	466a      	mov	r2, sp
    cefa:	4623      	mov	r3, r4
    cefc:	6828      	ldr	r0, [r5, #0]
    cefe:	4611      	mov	r1, r2
    cf00:	f000 f9a8 	bl	d254 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    cf04:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    cf08:	bd30      	pop	{r4, r5, pc}
    cf0a:	bf00      	nop

0000cf0c <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    cf0c:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    cf0e:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    cf10:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    cf12:	07dc      	lsls	r4, r3, #31
    cf14:	d51d      	bpl.n	cf52 <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    cf16:	4604      	mov	r4, r0
    cf18:	6840      	ldr	r0, [r0, #4]
    cf1a:	f104 0210 	add.w	r2, r4, #16
    cf1e:	6803      	ldr	r3, [r0, #0]
    cf20:	68e1      	ldr	r1, [r4, #12]
    cf22:	9201      	str	r2, [sp, #4]
    cf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cf26:	4798      	blx	r3
    cf28:	9a01      	ldr	r2, [sp, #4]
    cf2a:	4605      	mov	r5, r0
    cf2c:	b1a8      	cbz	r0, cf5a <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    cf2e:	7823      	ldrb	r3, [r4, #0]
    cf30:	0799      	lsls	r1, r3, #30
    cf32:	d508      	bpl.n	cf46 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    cf34:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    cf36:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    cf3a:	4419      	add	r1, r3
    cf3c:	6803      	ldr	r3, [r0, #0]
    cf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cf40:	4798      	blx	r3
    cf42:	b150      	cbz	r0, cf5a <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    cf44:	7823      	ldrb	r3, [r4, #0]
    cf46:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    cf4a:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    cf4c:	7023      	strb	r3, [r4, #0]
}
    cf4e:	b003      	add	sp, #12
    cf50:	bd30      	pop	{r4, r5, pc}
  return true;
    cf52:	2501      	movs	r5, #1
}
    cf54:	4628      	mov	r0, r5
    cf56:	b003      	add	sp, #12
    cf58:	bd30      	pop	{r4, r5, pc}
  return false;
    cf5a:	2500      	movs	r5, #0
}
    cf5c:	4628      	mov	r0, r5
    cf5e:	b003      	add	sp, #12
    cf60:	bd30      	pop	{r4, r5, pc}
    cf62:	bf00      	nop

0000cf64 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    cf66:	6843      	ldr	r3, [r0, #4]
    cf68:	b30b      	cbz	r3, cfae <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    cf6a:	68c3      	ldr	r3, [r0, #12]
    cf6c:	4604      	mov	r4, r0
    cf6e:	460f      	mov	r7, r1
    cf70:	4615      	mov	r5, r2
    cf72:	428b      	cmp	r3, r1
    cf74:	d106      	bne.n	cf84 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    cf76:	f810 3b10 	ldrb.w	r3, [r0], #16
    cf7a:	f005 0503 	and.w	r5, r5, #3
    cf7e:	432b      	orrs	r3, r5
    cf80:	7023      	strb	r3, [r4, #0]
}
    cf82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    cf84:	f7ff ffc2 	bl	cf0c <FsCache::sync()>
    cf88:	b188      	cbz	r0, cfae <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    cf8a:	076b      	lsls	r3, r5, #29
    cf8c:	d505      	bpl.n	cf9a <FsCache::prepare(unsigned long, unsigned char)+0x36>
    cf8e:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    cf92:	4630      	mov	r0, r6
    m_sector = sector;
    cf94:	2300      	movs	r3, #0
    cf96:	60e7      	str	r7, [r4, #12]
    cf98:	e7ef      	b.n	cf7a <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    cf9a:	6860      	ldr	r0, [r4, #4]
    cf9c:	f104 0610 	add.w	r6, r4, #16
    cfa0:	4639      	mov	r1, r7
    cfa2:	6803      	ldr	r3, [r0, #0]
    cfa4:	4632      	mov	r2, r6
    cfa6:	691b      	ldr	r3, [r3, #16]
    cfa8:	4798      	blx	r3
    cfaa:	2800      	cmp	r0, #0
    cfac:	d1f1      	bne.n	cf92 <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    cfae:	2000      	movs	r0, #0
}
    cfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cfb2:	bf00      	nop

0000cfb4 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    cfb4:	b510      	push	{r4, lr}
    cfb6:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    cfb8:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    cfba:	b082      	sub	sp, #8
  if (ls) {
    cfbc:	b118      	cbz	r0, cfc6 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    cfbe:	2300      	movs	r3, #0
    cfc0:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    cfc2:	b002      	add	sp, #8
    cfc4:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    cfc6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    cfca:	428b      	cmp	r3, r1
    cfcc:	d2f9      	bcs.n	cfc2 <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    cfce:	aa01      	add	r2, sp, #4
    cfd0:	4618      	mov	r0, r3
    cfd2:	f000 f867 	bl	d0a4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    cfd6:	b180      	cbz	r0, cffa <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    cfd8:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    cfda:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    cfdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    cfe0:	d201      	bcs.n	cfe6 <FsName::get16()+0x32>
      rtn = cp;
    cfe2:	b298      	uxth	r0, r3
    cfe4:	e7ed      	b.n	cfc2 <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    cfe6:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
    cfe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    cfec:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    cff0:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    cff4:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    cff6:	81a3      	strh	r3, [r4, #12]
    cff8:	e7e3      	b.n	cfc2 <FsName::get16()+0xe>
  return 0XFFFF;
    cffa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cffe:	e7e0      	b.n	cfc2 <FsName::get16()+0xe>

0000d000 <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
    d000:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
    d002:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
    d006:	d805      	bhi.n	d014 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    d008:	b112      	cbz	r2, d010 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
    d00a:	460a      	mov	r2, r1
    d00c:	f802 0b01 	strb.w	r0, [r2], #1
  }
    d010:	4610      	mov	r0, r2
    d012:	4770      	bx	lr
    } else if (cp < 0X800) {
    d014:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    d018:	d20f      	bcs.n	d03a <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
    d01a:	2a01      	cmp	r2, #1
    d01c:	d940      	bls.n	d0a0 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    d01e:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d022:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    d026:	460a      	mov	r2, r1
    d028:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d02c:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    d030:	f802 0b02 	strb.w	r0, [r2], #2
  }
    d034:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d036:	704b      	strb	r3, [r1, #1]
  }
    d038:	4770      	bx	lr
    } else if (cp < 0X10000) {
    d03a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    d03e:	d216      	bcs.n	d06e <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
    d040:	2a02      	cmp	r2, #2
    d042:	d92d      	bls.n	d0a0 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    d044:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d048:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    d04c:	1cca      	adds	r2, r1, #3
    d04e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
    d052:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    d054:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    d058:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d05c:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    d05e:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    d062:	7048      	strb	r0, [r1, #1]
  }
    d064:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    d066:	f881 e000 	strb.w	lr, [r1]
  }
    d06a:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
    d06e:	2a03      	cmp	r2, #3
    d070:	d916      	bls.n	d0a0 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    d072:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    d076:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    d07a:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d07e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    d082:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    d086:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    d08a:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d08e:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    d092:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d094:	1d0a      	adds	r2, r1, #4
    d096:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    d098:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    d09c:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d09e:	e7b7      	b.n	d010 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
    d0a0:	2200      	movs	r2, #0
    d0a2:	e7b5      	b.n	d010 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

0000d0a4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    d0a4:	4288      	cmp	r0, r1
    d0a6:	d23d      	bcs.n	d124 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    d0a8:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    d0aa:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
    d0ac:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    d0b0:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    d0b2:	2800      	cmp	r0, #0
    d0b4:	da2d      	bge.n	d112 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
    d0b6:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    d0ba:	28c0      	cmp	r0, #192	; 0xc0
    d0bc:	d034      	beq.n	d128 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
    d0be:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    d0c2:	28e0      	cmp	r0, #224	; 0xe0
    d0c4:	d034      	beq.n	d130 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
    d0c6:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    d0ca:	28f0      	cmp	r0, #240	; 0xf0
    d0cc:	d126      	bne.n	d11c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    d0ce:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    d0d2:	2004      	movs	r0, #4
    if ((str + n) > end) {
    d0d4:	4418      	add	r0, r3
    d0d6:	4288      	cmp	r0, r1
    d0d8:	d820      	bhi.n	d11c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    d0da:	3301      	adds	r3, #1
      ch = str[i];
    d0dc:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    d0e0:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
    d0e4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    d0e8:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    d0ec:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    d0f0:	d114      	bne.n	d11c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    d0f2:	4283      	cmp	r3, r0
    d0f4:	d1f2      	bne.n	d0dc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
    d0f6:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    d0fa:	4b0f      	ldr	r3, [pc, #60]	; (d138 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    d0fc:	4299      	cmp	r1, r3
    d0fe:	d80d      	bhi.n	d11c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    d100:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    d104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    d108:	d308      	bcc.n	d11c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
    d10a:	6014      	str	r4, [r2, #0]
  }
    d10c:	f85d 4b04 	ldr.w	r4, [sp], #4
    d110:	4770      	bx	lr
      return str + 1;
    d112:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    d114:	6014      	str	r4, [r2, #0]
  }
    d116:	f85d 4b04 	ldr.w	r4, [sp], #4
    d11a:	4770      	bx	lr
      return nullptr;
    d11c:	2000      	movs	r0, #0
  }
    d11e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d122:	4770      	bx	lr
      return nullptr;
    d124:	2000      	movs	r0, #0
  }
    d126:	4770      	bx	lr
      cp = ch & 0X1F;
    d128:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    d12c:	2002      	movs	r0, #2
    d12e:	e7d1      	b.n	d0d4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    d130:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    d134:	2003      	movs	r0, #3
    d136:	e7cd      	b.n	d0d4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    d138:	0010ff7f 	.word	0x0010ff7f

0000d13c <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    d13c:	287e      	cmp	r0, #126	; 0x7e
    d13e:	d93e      	bls.n	d1be <toUpcase(unsigned short)+0x82>
  size_t right = size;
    d140:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    d144:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    d146:	b430      	push	{r4, r5}
    d148:	4c28      	ldr	r4, [pc, #160]	; (d1ec <toUpcase(unsigned short)+0xb0>)
    d14a:	e004      	b.n	d156 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    d14c:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    d150:	4282      	cmp	r2, r0
    d152:	d820      	bhi.n	d196 <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    d154:	460b      	mov	r3, r1
  while (right - left > 1) {
    d156:	ebac 0203 	sub.w	r2, ip, r3
    d15a:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    d15c:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    d160:	d8f4      	bhi.n	d14c <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    d162:	b29b      	uxth	r3, r3
    d164:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    d168:	4290      	cmp	r0, r2
    d16a:	d216      	bcs.n	d19a <toUpcase(unsigned short)+0x5e>
    d16c:	244b      	movs	r4, #75	; 0x4b
    d16e:	2300      	movs	r3, #0
    d170:	4d1f      	ldr	r5, [pc, #124]	; (d1f0 <toUpcase(unsigned short)+0xb4>)
    d172:	e004      	b.n	d17e <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    d174:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    d178:	4282      	cmp	r2, r0
    d17a:	d81e      	bhi.n	d1ba <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    d17c:	460b      	mov	r3, r1
  while (right - left > 1) {
    d17e:	1ae2      	subs	r2, r4, r3
    d180:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    d182:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    d186:	d8f5      	bhi.n	d174 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    d188:	b29b      	uxth	r3, r3
    d18a:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    d18e:	4282      	cmp	r2, r0
    d190:	d01f      	beq.n	d1d2 <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    d192:	bc30      	pop	{r4, r5}
    d194:	4770      	bx	lr
    mid = left + (right - left)/2;
    d196:	468c      	mov	ip, r1
    d198:	e7dd      	b.n	d156 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    d19a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    d19e:	1a82      	subs	r2, r0, r2
    d1a0:	78e3      	ldrb	r3, [r4, #3]
    d1a2:	429a      	cmp	r2, r3
    d1a4:	dae2      	bge.n	d16c <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    d1a6:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    d1aa:	2b01      	cmp	r3, #1
    d1ac:	d016      	beq.n	d1dc <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    d1ae:	b1d3      	cbz	r3, d1e6 <toUpcase(unsigned short)+0xaa>
    d1b0:	b29b      	uxth	r3, r3
    d1b2:	4403      	add	r3, r0
}
    d1b4:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    d1b6:	b298      	uxth	r0, r3
}
    d1b8:	4770      	bx	lr
    mid = left + (right - left)/2;
    d1ba:	460c      	mov	r4, r1
    d1bc:	e7df      	b.n	d17e <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    d1be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    d1c2:	2b19      	cmp	r3, #25
    d1c4:	bf8c      	ite	hi
    d1c6:	2300      	movhi	r3, #0
    d1c8:	2301      	movls	r3, #1
    d1ca:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    d1ce:	b298      	uxth	r0, r3
}
    d1d0:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    d1d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    d1d6:	8868      	ldrh	r0, [r5, #2]
}
    d1d8:	bc30      	pop	{r4, r5}
    d1da:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    d1dc:	f002 0201 	and.w	r2, r2, #1
    d1e0:	1a83      	subs	r3, r0, r2
    d1e2:	b298      	uxth	r0, r3
    d1e4:	e7d5      	b.n	d192 <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    d1e6:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    d1ea:	e7e2      	b.n	d1b2 <toUpcase(unsigned short)+0x76>
    d1ec:	200009f8 	.word	0x200009f8
    d1f0:	2000083c 	.word	0x2000083c

0000d1f4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    d1f4:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    d1f6:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    d1f8:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    d1fc:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    d1fe:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    d200:	b1a3      	cbz	r3, d22c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    d202:	b321      	cbz	r1, d24e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    d204:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    d208:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    d20a:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    d20c:	6f25      	ldr	r5, [r4, #112]	; 0x70
    d20e:	07af      	lsls	r7, r5, #30
    d210:	d407      	bmi.n	d222 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    d212:	4615      	mov	r5, r2
				count_read--;
    d214:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    d216:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    d218:	b11a      	cbz	r2, d222 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    d21a:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    d21e:	462a      	mov	r2, r5
    d220:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    d222:	6965      	ldr	r5, [r4, #20]
    d224:	07ed      	lsls	r5, r5, #31
    d226:	d5f1      	bpl.n	d20c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    d228:	2b00      	cmp	r3, #0
    d22a:	d1ea      	bne.n	d202 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    d22c:	b16e      	cbz	r6, d24a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    d22e:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    d230:	6f19      	ldr	r1, [r3, #112]	; 0x70
    d232:	0789      	lsls	r1, r1, #30
    d234:	d4fa      	bmi.n	d22c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    d236:	4611      	mov	r1, r2
			count_read--;
    d238:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    d23a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    d23c:	2a00      	cmp	r2, #0
    d23e:	d0f5      	beq.n	d22c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    d240:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    d244:	460a      	mov	r2, r1
	while (count_read) {
    d246:	2e00      	cmp	r6, #0
    d248:	d1f1      	bne.n	d22e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    d24a:	bcf0      	pop	{r4, r5, r6, r7}
    d24c:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    d24e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    d252:	e7d9      	b.n	d208 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

0000d254 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    d254:	b10b      	cbz	r3, d25a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    d256:	f7ff bfcd 	b.w	d1f4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    d25a:	4770      	bx	lr

0000d25c <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    d25c:	6843      	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    d25e:	e9d3 1200 	ldrd	r1, r2, [r3]
    d262:	6809      	ldr	r1, [r1, #0]
    d264:	4211      	tst	r1, r2
    d266:	d100      	bne.n	d26a <SPIClass::end()+0xe>
    d268:	4770      	bx	lr
void SPIClass::end() {
    d26a:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    d26c:	6802      	ldr	r2, [r0, #0]
    d26e:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    d270:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    d272:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    d274:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    d276:	7c22      	ldrb	r2, [r4, #16]
    d278:	4413      	add	r3, r2
    d27a:	7c18      	ldrb	r0, [r3, #16]
    d27c:	f000 ff6e 	bl	e15c <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    d280:	7c62      	ldrb	r2, [r4, #17]
    d282:	6863      	ldr	r3, [r4, #4]
    d284:	2105      	movs	r1, #5
    d286:	4413      	add	r3, r2
    d288:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    d28c:	f000 ff66 	bl	e15c <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    d290:	6863      	ldr	r3, [r4, #4]
    d292:	7ca2      	ldrb	r2, [r4, #18]
    d294:	2105      	movs	r1, #5
    d296:	4413      	add	r3, r2
	}
}
    d298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    d29c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    d2a0:	f000 bf5c 	b.w	e15c <pinMode>

0000d2a4 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    d2a4:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    d2a8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    d2ac:	429a      	cmp	r2, r3
    d2ae:	d902      	bls.n	d2b6 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    d2b0:	4418      	add	r0, r3
    d2b2:	7e80      	ldrb	r0, [r0, #26]
    d2b4:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    d2b6:	f04f 30ff 	mov.w	r0, #4294967295
	}
    d2ba:	4770      	bx	lr

0000d2bc <TwoWire::flush()>:
	virtual void flush(void) {
	}
    d2bc:	4770      	bx	lr
    d2be:	bf00      	nop

0000d2c0 <TwoWire::write(unsigned char)>:
{
    d2c0:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    d2c2:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    d2c6:	b178      	cbz	r0, d2e8 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    d2c8:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    d2cc:	2a88      	cmp	r2, #136	; 0x88
    d2ce:	d903      	bls.n	d2d8 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    d2d0:	2201      	movs	r2, #1
			return 0;
    d2d2:	2000      	movs	r0, #0
    d2d4:	605a      	str	r2, [r3, #4]
    d2d6:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    d2d8:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    d2dc:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    d2de:	441a      	add	r2, r3
    d2e0:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    d2e4:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    d2e8:	4770      	bx	lr
    d2ea:	bf00      	nop

0000d2ec <TwoWire::write(unsigned char const*, unsigned int)>:
{
    d2ec:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    d2ee:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    d2f2:	b90c      	cbnz	r4, d2f8 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    d2f4:	4620      	mov	r0, r4
    d2f6:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    d2f8:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    d2fc:	4605      	mov	r5, r0
    d2fe:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    d302:	42a2      	cmp	r2, r4
    d304:	d80d      	bhi.n	d322 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    d306:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    d308:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    d30c:	4622      	mov	r2, r4
    d30e:	4418      	add	r0, r3
    d310:	f001 f980 	bl	e614 <memcpy>
		txBufferLength += quantity;
    d314:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    d318:	4620      	mov	r0, r4
		txBufferLength += quantity;
    d31a:	4423      	add	r3, r4
    d31c:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    d320:	bd38      	pop	{r3, r4, r5, pc}
    d322:	2201      	movs	r2, #1
    d324:	6042      	str	r2, [r0, #4]
    d326:	e7ef      	b.n	d308 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

0000d328 <TwoWire::force_clock()>:
{
    d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d32c:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    d330:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d332:	7e01      	ldrb	r1, [r0, #24]
{
    d334:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    d336:	7e43      	ldrb	r3, [r0, #25]
{
    d338:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d33a:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    d33e:	4a38      	ldr	r2, [pc, #224]	; (d420 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    d340:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d344:	4f37      	ldr	r7, [pc, #220]	; (d424 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d346:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    d348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    d34c:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    d350:	0109      	lsls	r1, r1, #4
    d352:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    d354:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    d358:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    d35c:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    d360:	011b      	lsls	r3, r3, #4
    d362:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    d364:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    d366:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    d36a:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    d36e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    d372:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    d374:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    d376:	492c      	ldr	r1, [pc, #176]	; (d428 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    d378:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    d37a:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    d37e:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    d380:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    d384:	686b      	ldr	r3, [r5, #4]
    d386:	4333      	orrs	r3, r6
    d388:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d38a:	4b28      	ldr	r3, [pc, #160]	; (d42c <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    d38c:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d38e:	683a      	ldr	r2, [r7, #0]
    d390:	fba3 3202 	umull	r3, r2, r3, r2
    d394:	0c92      	lsrs	r2, r2, #18
    d396:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    d39a:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    d39c:	684b      	ldr	r3, [r1, #4]
    d39e:	1b1b      	subs	r3, r3, r4
    d3a0:	429a      	cmp	r2, r3
    d3a2:	d8fb      	bhi.n	d39c <TwoWire::force_clock()+0x74>
    d3a4:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    d3a8:	4a1f      	ldr	r2, [pc, #124]	; (d428 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d3aa:	f8df e080 	ldr.w	lr, [pc, #128]	; d42c <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    d3ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    d3b2:	4203      	tst	r3, r0
    d3b4:	d002      	beq.n	d3bc <TwoWire::force_clock()+0x94>
    d3b6:	68ab      	ldr	r3, [r5, #8]
    d3b8:	4233      	tst	r3, r6
    d3ba:	d12f      	bne.n	d41c <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    d3bc:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    d3c0:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d3c2:	6839      	ldr	r1, [r7, #0]
    d3c4:	fbae 3101 	umull	r3, r1, lr, r1
    d3c8:	0c89      	lsrs	r1, r1, #18
    d3ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    d3ce:	6853      	ldr	r3, [r2, #4]
    d3d0:	1b1b      	subs	r3, r3, r4
    d3d2:	4299      	cmp	r1, r3
    d3d4:	d8fb      	bhi.n	d3ce <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    d3d6:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    d3da:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d3dc:	6839      	ldr	r1, [r7, #0]
    d3de:	fbae 3101 	umull	r3, r1, lr, r1
    d3e2:	0c89      	lsrs	r1, r1, #18
    d3e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    d3e8:	6853      	ldr	r3, [r2, #4]
    d3ea:	1b1b      	subs	r3, r3, r4
    d3ec:	4299      	cmp	r1, r3
    d3ee:	d8fb      	bhi.n	d3e8 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    d3f0:	f1bc 0c01 	subs.w	ip, ip, #1
    d3f4:	d1db      	bne.n	d3ae <TwoWire::force_clock()+0x86>
	bool ret = false;
    d3f6:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    d3f8:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    d3fc:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    d3fe:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    d402:	68db      	ldr	r3, [r3, #12]
    d404:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    d408:	f899 3019 	ldrb.w	r3, [r9, #25]
    d40c:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    d410:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    d414:	6013      	str	r3, [r2, #0]
}
    d416:	b003      	add	sp, #12
    d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    d41c:	2001      	movs	r0, #1
    d41e:	e7eb      	b.n	d3f8 <TwoWire::force_clock()+0xd0>
    d420:	20007b44 	.word	0x20007b44
    d424:	20008a68 	.word	0x20008a68
    d428:	e0001000 	.word	0xe0001000
    d42c:	431bde83 	.word	0x431bde83

0000d430 <TwoWire::wait_idle()>:
	return systick_millis_count;
    d430:	4a0e      	ldr	r2, [pc, #56]	; (d46c <TwoWire::wait_idle()+0x3c>)
{
    d432:	b510      	push	{r4, lr}
    d434:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d436:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    d438:	e005      	b.n	d446 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    d43a:	01db      	lsls	r3, r3, #7
    d43c:	d407      	bmi.n	d44e <TwoWire::wait_idle()+0x1e>
    d43e:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    d440:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    d442:	2b10      	cmp	r3, #16
    d444:	d808      	bhi.n	d458 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    d446:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    d448:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    d44c:	d1f5      	bne.n	d43a <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    d44e:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    d452:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    d454:	6163      	str	r3, [r4, #20]
}
    d456:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    d458:	f7ff ff66 	bl	d328 <TwoWire::force_clock()>
    d45c:	2800      	cmp	r0, #0
    d45e:	d0fa      	beq.n	d456 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    d460:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    d464:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    d466:	6163      	str	r3, [r4, #20]
	return true;
    d468:	e7f5      	b.n	d456 <TwoWire::wait_idle()+0x26>
    d46a:	bf00      	nop
    d46c:	20016020 	.word	0x20016020

0000d470 <TwoWire::endTransmission(unsigned char)>:
{
    d470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    d474:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d478:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    d47a:	f1ba 0f00 	cmp.w	sl, #0
    d47e:	d04f      	beq.n	d520 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    d480:	4681      	mov	r9, r0
    d482:	4688      	mov	r8, r1
    d484:	f7ff ffd4 	bl	d430 <TwoWire::wait_idle()>
    d488:	2800      	cmp	r0, #0
    d48a:	d049      	beq.n	d520 <TwoWire::endTransmission(unsigned char)+0xb0>
    d48c:	4e37      	ldr	r6, [pc, #220]	; (d56c <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    d48e:	2400      	movs	r4, #0
    d490:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    d492:	e018      	b.n	d4c6 <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    d494:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    d496:	0519      	lsls	r1, r3, #20
    d498:	d451      	bmi.n	d53e <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    d49a:	04da      	lsls	r2, r3, #19
    d49c:	d455      	bmi.n	d54a <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    d49e:	0558      	lsls	r0, r3, #21
    d4a0:	d459      	bmi.n	d556 <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    d4a2:	0499      	lsls	r1, r3, #18
    d4a4:	d441      	bmi.n	d52a <TwoWire::endTransmission(unsigned char)+0xba>
    d4a6:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    d4a8:	1bd2      	subs	r2, r2, r7
    d4aa:	2a32      	cmp	r2, #50	; 0x32
    d4ac:	d83d      	bhi.n	d52a <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    d4ae:	4554      	cmp	r4, sl
    d4b0:	d907      	bls.n	d4c2 <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    d4b2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    d4b4:	0752      	lsls	r2, r2, #29
    d4b6:	d104      	bne.n	d4c2 <TwoWire::endTransmission(unsigned char)+0x52>
    d4b8:	059b      	lsls	r3, r3, #22
    d4ba:	d455      	bmi.n	d568 <TwoWire::endTransmission(unsigned char)+0xf8>
    d4bc:	f1b8 0f00 	cmp.w	r8, #0
    d4c0:	d052      	beq.n	d568 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    d4c2:	f002 fea5 	bl	10210 <yield>
		if (tx_index <= tx_len) {
    d4c6:	4554      	cmp	r4, sl
    d4c8:	d8e4      	bhi.n	d494 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    d4ca:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    d4cc:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    d4ce:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    d4d2:	d4df      	bmi.n	d494 <TwoWire::endTransmission(unsigned char)+0x24>
    d4d4:	e013      	b.n	d4fe <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    d4d6:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    d4da:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    d4dc:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    d4de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    d4e2:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    d4e4:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    d4e6:	d01e      	beq.n	d526 <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    d4e8:	458a      	cmp	sl, r1
				fifo_used++;
    d4ea:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d4ee:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    d4f2:	d90e      	bls.n	d512 <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d4f4:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    d4f8:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d4fa:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    d4fc:	d0ca      	beq.n	d494 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    d4fe:	2101      	movs	r1, #1
				if (tx_index == 0) {
    d500:	2c00      	cmp	r4, #0
    d502:	d0e8      	beq.n	d4d6 <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d504:	4621      	mov	r1, r4
				fifo_used++;
    d506:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d508:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    d50a:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d50c:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    d510:	d8f0      	bhi.n	d4f4 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    d512:	f1b8 0f00 	cmp.w	r8, #0
    d516:	d0bd      	beq.n	d494 <TwoWire::endTransmission(unsigned char)+0x24>
    d518:	f44f 7300 	mov.w	r3, #512	; 0x200
    d51c:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    d51e:	e7b9      	b.n	d494 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    d520:	2004      	movs	r0, #4
}
    d522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    d526:	2401      	movs	r4, #1
    d528:	e7b4      	b.n	d494 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d52a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d52c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    d530:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d532:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d536:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d538:	662a      	str	r2, [r5, #96]	; 0x60
}
    d53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d53e:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    d540:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d542:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d546:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    d548:	e7eb      	b.n	d522 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d54a:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    d54c:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d54e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d552:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    d554:	e7e5      	b.n	d522 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d556:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    d558:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    d55c:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d55e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d562:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    d564:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    d566:	e7dc      	b.n	d522 <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    d568:	2000      	movs	r0, #0
    d56a:	e7da      	b.n	d522 <TwoWire::endTransmission(unsigned char)+0xb2>
    d56c:	20016020 	.word	0x20016020

0000d570 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    d570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d574:	4683      	mov	fp, r0
    d576:	460c      	mov	r4, r1
    d578:	4615      	mov	r5, r2
    d57a:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d57c:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    d580:	f7ff ff56 	bl	d430 <TwoWire::wait_idle()>
    d584:	2800      	cmp	r0, #0
    d586:	f000 809e 	beq.w	d6c6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    d58a:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    d58c:	2d01      	cmp	r5, #1
    d58e:	f8df 813c 	ldr.w	r8, [pc, #316]	; d6cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    d592:	f240 4601 	movw	r6, #1025	; 0x401
    d596:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    d598:	f04f 0100 	mov.w	r1, #0
    d59c:	bf38      	it	cc
    d59e:	2501      	movcc	r5, #1
    d5a0:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    d5a4:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    d5a6:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    d5a8:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    d5ac:	e020      	b.n	d5f0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    d5ae:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    d5b2:	2b87      	cmp	r3, #135	; 0x87
    d5b4:	d93f      	bls.n	d636 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    d5b6:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    d5ba:	0510      	lsls	r0, r2, #20
    d5bc:	d45a      	bmi.n	d674 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    d5be:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    d5c2:	d170      	bne.n	d6a6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    d5c4:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    d5c8:	eba3 0309 	sub.w	r3, r3, r9
    d5cc:	2b32      	cmp	r3, #50	; 0x32
    d5ce:	d86a      	bhi.n	d6a6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    d5d0:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    d5d4:	42ab      	cmp	r3, r5
    d5d6:	d309      	bcc.n	d5ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    d5d8:	2c02      	cmp	r4, #2
    d5da:	d907      	bls.n	d5ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    d5dc:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    d5e0:	0759      	lsls	r1, r3, #29
    d5e2:	d103      	bne.n	d5ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    d5e4:	0593      	lsls	r3, r2, #22
    d5e6:	d44b      	bmi.n	d680 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    d5e8:	2f00      	cmp	r7, #0
    d5ea:	d049      	beq.n	d680 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    d5ec:	f002 fe10 	bl	10210 <yield>
		if (tx_state < 3) {
    d5f0:	2c02      	cmp	r4, #2
    d5f2:	d8dc      	bhi.n	d5ae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    d5f4:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    d5f8:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    d5fc:	075b      	lsls	r3, r3, #29
    d5fe:	d4d6      	bmi.n	d5ae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    d600:	1e68      	subs	r0, r5, #1
    d602:	4422      	add	r2, r4
    d604:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    d608:	b94c      	cbnz	r4, d61e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    d60a:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    d60e:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    d610:	1b13      	subs	r3, r2, r4
    d612:	2b03      	cmp	r3, #3
    d614:	d8cb      	bhi.n	d5ae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    d616:	2c02      	cmp	r4, #2
    d618:	d8c9      	bhi.n	d5ae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    d61a:	2c00      	cmp	r4, #0
    d61c:	d0f5      	beq.n	d60a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    d61e:	2c01      	cmp	r4, #1
    d620:	d037      	beq.n	d692 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    d622:	b11f      	cbz	r7, d62c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    d624:	f44f 7300 	mov.w	r3, #512	; 0x200
    d628:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    d62c:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    d630:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    d632:	2b87      	cmp	r3, #135	; 0x87
    d634:	d8bf      	bhi.n	d5b6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d636:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d63a:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d63e:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d642:	d0b8      	beq.n	d5b6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    d644:	1c59      	adds	r1, r3, #1
    d646:	449c      	add	ip, r3
    d648:	3319      	adds	r3, #25
    d64a:	b2c9      	uxtb	r1, r1
    d64c:	fa5f fc8c 	uxtb.w	ip, ip
    d650:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    d654:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d658:	1c4a      	adds	r2, r1, #1
    d65a:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    d65c:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d660:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    d662:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d666:	d0a6      	beq.n	d5b6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    d668:	2989      	cmp	r1, #137	; 0x89
    d66a:	d1f3      	bne.n	d654 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    d66c:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    d670:	0510      	lsls	r0, r2, #20
    d672:	d5a4      	bpl.n	d5be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d674:	f8da 3010 	ldr.w	r3, [sl, #16]
    d678:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d67c:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d680:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    d684:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    d688:	d106      	bne.n	d698 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    d68a:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    d68e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    d692:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    d696:	e7ba      	b.n	d60e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    d698:	f8da 3010 	ldr.w	r3, [sl, #16]
    d69c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d6a0:	f8ca 3010 	str.w	r3, [sl, #16]
    d6a4:	e7f1      	b.n	d68a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d6a6:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d6aa:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d6ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d6b2:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d6b6:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d6ba:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    d6be:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    d6c2:	d0e2      	beq.n	d68a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    d6c4:	e7e8      	b.n	d698 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    d6c6:	2004      	movs	r0, #4
}
    d6c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6cc:	20016020 	.word	0x20016020

0000d6d0 <TwoWire::isr()>:
{
    d6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d6d2:	6906      	ldr	r6, [r0, #16]
{
    d6d4:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    d6d6:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    d6da:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    d6de:	d001      	beq.n	d6e4 <TwoWire::isr()+0x14>
    d6e0:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    d6e4:	07a8      	lsls	r0, r5, #30
    d6e6:	d50b      	bpl.n	d700 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    d6e8:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    d6ec:	0411      	lsls	r1, r2, #16
    d6ee:	d53d      	bpl.n	d76c <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    d6f0:	2300      	movs	r3, #0
    d6f2:	2101      	movs	r1, #1
    d6f4:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    d6f8:	4423      	add	r3, r4
    d6fa:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    d6fe:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    d700:	07ea      	lsls	r2, r5, #31
    d702:	d510      	bpl.n	d726 <TwoWire::isr()+0x56>
		if (!transmitting) {
    d704:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    d708:	b1f7      	cbz	r7, d748 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    d70a:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    d70e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    d712:	42bb      	cmp	r3, r7
    d714:	d926      	bls.n	d764 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    d716:	1c7b      	adds	r3, r7, #1
    d718:	4427      	add	r7, r4
    d71a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    d71e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    d722:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    d726:	05ab      	lsls	r3, r5, #22
    d728:	d50d      	bpl.n	d746 <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    d72a:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    d72e:	b118      	cbz	r0, d738 <TwoWire::isr()+0x68>
    d730:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    d734:	b103      	cbz	r3, d738 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    d736:	4798      	blx	r3
		rxBufferIndex = 0;
    d738:	2300      	movs	r3, #0
    d73a:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    d73e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    d742:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    d746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    d748:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    d74c:	b103      	cbz	r3, d750 <TwoWire::isr()+0x80>
				(*user_onRequest)();
    d74e:	4798      	blx	r3
			txBufferIndex = 0;
    d750:	2300      	movs	r3, #0
    d752:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    d756:	2301      	movs	r3, #1
    d758:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    d75c:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    d760:	42bb      	cmp	r3, r7
    d762:	d8d8      	bhi.n	d716 <TwoWire::isr()+0x46>
			port->STDR = 0;
    d764:	2300      	movs	r3, #0
    d766:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    d76a:	e7dc      	b.n	d726 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    d76c:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    d770:	2b87      	cmp	r3, #135	; 0x87
    d772:	d8c5      	bhi.n	d700 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    d774:	1c59      	adds	r1, r3, #1
    d776:	b2c9      	uxtb	r1, r1
    d778:	e7be      	b.n	d6f8 <TwoWire::isr()+0x28>
    d77a:	bf00      	nop

0000d77c <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    d77c:	4801      	ldr	r0, [pc, #4]	; (d784 <lpi2c1_isr()+0x8>)
    d77e:	f7ff bfa7 	b.w	d6d0 <TwoWire::isr()>
    d782:	bf00      	nop
    d784:	20008a7c 	.word	0x20008a7c

0000d788 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    d788:	4801      	ldr	r0, [pc, #4]	; (d790 <lpi2c3_isr()+0x8>)
    d78a:	f7ff bfa1 	b.w	d6d0 <TwoWire::isr()>
    d78e:	bf00      	nop
    d790:	20008bbc 	.word	0x20008bbc

0000d794 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    d794:	4801      	ldr	r0, [pc, #4]	; (d79c <lpi2c4_isr()+0x8>)
    d796:	f7ff bf9b 	b.w	d6d0 <TwoWire::isr()>
    d79a:	bf00      	nop
    d79c:	20008cfc 	.word	0x20008cfc

0000d7a0 <TwoWire::setClock(unsigned long)>:
{
    d7a0:	b410      	push	{r4}
	if (frequency < 400000) {
    d7a2:	4c14      	ldr	r4, [pc, #80]	; (d7f4 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    d7a4:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d7a6:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    d7a8:	42a1      	cmp	r1, r4
	port->MCR = 0;
    d7aa:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    d7ac:	d814      	bhi.n	d7d8 <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    d7ae:	4c12      	ldr	r4, [pc, #72]	; (d7f8 <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    d7b0:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    d7b2:	4912      	ldr	r1, [pc, #72]	; (d7fc <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    d7b4:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    d7b8:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    d7ba:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    d7bc:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    d7be:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
    d7c0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    d7c2:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    d7c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    d7c8:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    d7ca:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    d7cc:	6218      	str	r0, [r3, #32]
}
    d7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    d7d2:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    d7d4:	611a      	str	r2, [r3, #16]
}
    d7d6:	4770      	bx	lr
	} else if (frequency < 1000000) {
    d7d8:	4809      	ldr	r0, [pc, #36]	; (d800 <TwoWire::setClock(unsigned long)+0x60>)
    d7da:	4281      	cmp	r1, r0
    d7dc:	d907      	bls.n	d7ee <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    d7de:	4c09      	ldr	r4, [pc, #36]	; (d804 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    d7e0:	4809      	ldr	r0, [pc, #36]	; (d808 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    d7e2:	490a      	ldr	r1, [pc, #40]	; (d80c <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    d7e4:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    d7e6:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    d7e8:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    d7ea:	62d9      	str	r1, [r3, #44]	; 0x2c
    d7ec:	e7e8      	b.n	d7c0 <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    d7ee:	4c08      	ldr	r4, [pc, #32]	; (d810 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    d7f0:	4808      	ldr	r0, [pc, #32]	; (d814 <TwoWire::setClock(unsigned long)+0x74>)
    d7f2:	e7f6      	b.n	d7e2 <TwoWire::setClock(unsigned long)+0x42>
    d7f4:	00061a7f 	.word	0x00061a7f
    d7f8:	1928373b 	.word	0x1928373b
    d7fc:	05050bb8 	.word	0x05050bb8
    d800:	000f423f 	.word	0x000f423f
    d804:	0407090a 	.word	0x0407090a
    d808:	01010960 	.word	0x01010960
    d80c:	00057f00 	.word	0x00057f00
    d810:	0c121a1c 	.word	0x0c121a1c
    d814:	02020e10 	.word	0x02020e10

0000d818 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    d818:	b430      	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    d81a:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    d81c:	b921      	cbnz	r1, d828 <DMAChannel::begin(bool)+0x10>
    d81e:	6803      	ldr	r3, [r0, #0]
    d820:	b113      	cbz	r3, d828 <DMAChannel::begin(bool)+0x10>
    d822:	7902      	ldrb	r2, [r0, #4]
    d824:	2a0f      	cmp	r2, #15
    d826:	d93b      	bls.n	d8a0 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    d828:	4c24      	ldr	r4, [pc, #144]	; (d8bc <DMAChannel::begin(bool)+0xa4>)
    d82a:	8821      	ldrh	r1, [r4, #0]
{
    d82c:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    d82e:	fa41 f203 	asr.w	r2, r1, r3
    d832:	f012 0201 	ands.w	r2, r2, #1
    d836:	d008      	beq.n	d84a <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    d838:	3301      	adds	r3, #1
    d83a:	2b10      	cmp	r3, #16
    d83c:	d1f7      	bne.n	d82e <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    d83e:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    d840:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    d842:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    d844:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    d846:	bc30      	pop	{r4, r5}
    d848:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    d84a:	f04f 0c01 	mov.w	ip, #1
    d84e:	fa0c fc03 	lsl.w	ip, ip, r3
    d852:	ea41 010c 	orr.w	r1, r1, ip
    d856:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    d858:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d85a:	4919      	ldr	r1, [pc, #100]	; (d8c0 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    d85c:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    d860:	4c18      	ldr	r4, [pc, #96]	; (d8c4 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d862:	4419      	add	r1, r3
	channel = ch;
    d864:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d868:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    d86a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    d86c:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    d870:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    d872:	f240 4482 	movw	r4, #1154	; 0x482
    d876:	4914      	ldr	r1, [pc, #80]	; (d8c8 <DMAChannel::begin(bool)+0xb0>)
    d878:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    d87a:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    d87e:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    d882:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    d886:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d88a:	6003      	str	r3, [r0, #0]
}
    d88c:	bc30      	pop	{r4, r5}
	*p++ = 0;
    d88e:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    d892:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    d896:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    d89a:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    d89e:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    d8a0:	4c06      	ldr	r4, [pc, #24]	; (d8bc <DMAChannel::begin(bool)+0xa4>)
    d8a2:	8821      	ldrh	r1, [r4, #0]
    d8a4:	fa41 f502 	asr.w	r5, r1, r2
    d8a8:	07ed      	lsls	r5, r5, #31
    d8aa:	d5bf      	bpl.n	d82c <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    d8ac:	4d04      	ldr	r5, [pc, #16]	; (d8c0 <DMAChannel::begin(bool)+0xa8>)
    d8ae:	4415      	add	r5, r2
    d8b0:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    d8b4:	d1ba      	bne.n	d82c <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    d8b6:	b662      	cpsie	i
		return;
    d8b8:	e7c5      	b.n	d846 <DMAChannel::begin(bool)+0x2e>
    d8ba:	bf00      	nop
    d8bc:	20016044 	.word	0x20016044
    d8c0:	02007480 	.word	0x02007480
    d8c4:	400fc000 	.word	0x400fc000
    d8c8:	400e8000 	.word	0x400e8000

0000d8cc <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    d8cc:	7903      	ldrb	r3, [r0, #4]
    d8ce:	2b0f      	cmp	r3, #15
    d8d0:	d811      	bhi.n	d8f6 <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    d8d2:	4a09      	ldr	r2, [pc, #36]	; (d8f8 <DMAChannel::release()+0x2c>)
    d8d4:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    d8d6:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    d8d8:	4908      	ldr	r1, [pc, #32]	; (d8fc <DMAChannel::release()+0x30>)
    d8da:	2201      	movs	r2, #1
    d8dc:	f890 c004 	ldrb.w	ip, [r0, #4]
    d8e0:	880b      	ldrh	r3, [r1, #0]
    d8e2:	fa02 f20c 	lsl.w	r2, r2, ip
    d8e6:	ea23 0302 	bic.w	r3, r3, r2
    d8ea:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    d8ec:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    d8ee:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    d8f0:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    d8f2:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    d8f4:	6003      	str	r3, [r0, #0]
}
    d8f6:	4770      	bx	lr
    d8f8:	400e8000 	.word	0x400e8000
    d8fc:	20016044 	.word	0x20016044

0000d900 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    d900:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d902:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d906:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    d908:	4c0c      	ldr	r4, [pc, #48]	; (d93c <EventResponder::runFromInterrupt()+0x3c>)
    d90a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    d90c:	b180      	cbz	r0, d930 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    d90e:	4e0c      	ldr	r6, [pc, #48]	; (d940 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    d910:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    d912:	6943      	ldr	r3, [r0, #20]
    d914:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    d916:	b173      	cbz	r3, d936 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    d918:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d91a:	b902      	cbnz	r2, d91e <EventResponder::runFromInterrupt()+0x1e>
    d91c:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    d91e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    d920:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    d922:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d924:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d928:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    d92a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    d92c:	2800      	cmp	r0, #0
    d92e:	d1f0      	bne.n	d912 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    d930:	b902      	cbnz	r2, d934 <EventResponder::runFromInterrupt()+0x34>
    d932:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    d934:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    d936:	6033      	str	r3, [r6, #0]
    d938:	e7ef      	b.n	d91a <EventResponder::runFromInterrupt()+0x1a>
    d93a:	bf00      	nop
    d93c:	20015140 	.word	0x20015140
    d940:	2001513c 	.word	0x2001513c

0000d944 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    d944:	f7ff bfdc 	b.w	d900 <EventResponder::runFromInterrupt()>

0000d948 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    d948:	4904      	ldr	r1, [pc, #16]	; (d95c <systick_isr+0x14>)
	systick_millis_count++;
    d94a:	4a05      	ldr	r2, [pc, #20]	; (d960 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    d94c:	6849      	ldr	r1, [r1, #4]
    d94e:	4b05      	ldr	r3, [pc, #20]	; (d964 <systick_isr+0x1c>)
    d950:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    d952:	6813      	ldr	r3, [r2, #0]
    d954:	3301      	adds	r3, #1
    d956:	6013      	str	r3, [r2, #0]
}
    d958:	4770      	bx	lr
    d95a:	bf00      	nop
    d95c:	e0001000 	.word	0xe0001000
    d960:	20016020 	.word	0x20016020
    d964:	2001601c 	.word	0x2001601c

0000d968 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d968:	4608      	mov	r0, r1
    d96a:	f002 bbbd 	b.w	100e8 <usb_serial_putchar>
    d96e:	bf00      	nop

0000d970 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    d970:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    d972:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    d974:	bf08      	it	eq
    d976:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    d978:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    d97a:	b391      	cbz	r1, d9e2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    d97c:	f04f 0e21 	mov.w	lr, #33	; 0x21
    d980:	e001      	b.n	d986 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    d982:	fa5f fe86 	uxtb.w	lr, r6
    d986:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    d98a:	fbb1 f5f2 	udiv	r5, r1, r2
    d98e:	fb02 1415 	mls	r4, r2, r5, r1
    d992:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d996:	2c09      	cmp	r4, #9
    d998:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    d99c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    d9a0:	bf98      	it	ls
    d9a2:	fa5f f48c 	uxtbls.w	r4, ip
    d9a6:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    d9aa:	bf88      	it	hi
    d9ac:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    d9ae:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d9b0:	44ec      	add	ip, sp
			n /= base;
    d9b2:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d9b4:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    d9b8:	d2e3      	bcs.n	d982 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    d9ba:	b14b      	cbz	r3, d9d0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    d9bc:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    d9c0:	222d      	movs	r2, #45	; 0x2d
		i--;
    d9c2:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    d9c6:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    d9ca:	446b      	add	r3, sp
    d9cc:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    d9d0:	6803      	ldr	r3, [r0, #0]
    d9d2:	a901      	add	r1, sp, #4
    d9d4:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    d9d8:	685b      	ldr	r3, [r3, #4]
    d9da:	4471      	add	r1, lr
    d9dc:	4798      	blx	r3
}
    d9de:	b00a      	add	sp, #40	; 0x28
    d9e0:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    d9e2:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    d9e4:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    d9e8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    d9ec:	e7e5      	b.n	d9ba <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    d9ee:	bf00      	nop

0000d9f0 <Print::print(long)>:
	if (n < 0) {
    d9f0:	2900      	cmp	r1, #0
    d9f2:	db03      	blt.n	d9fc <Print::print(long)+0xc>
	uint8_t sign=0;
    d9f4:	2300      	movs	r3, #0
	if (base == 0) {
    d9f6:	220a      	movs	r2, #10
    d9f8:	f7ff bfba 	b.w	d970 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    d9fc:	4249      	negs	r1, r1
		sign = '-';
    d9fe:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    da00:	220a      	movs	r2, #10
    da02:	f7ff bfb5 	b.w	d970 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    da06:	bf00      	nop

0000da08 <Print::println()>:
{
    da08:	b500      	push	{lr}
	return write(buf, 2);
    da0a:	6803      	ldr	r3, [r0, #0]
{
    da0c:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    da0e:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    da12:	2202      	movs	r2, #2
    da14:	a901      	add	r1, sp, #4
    da16:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    da18:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    da1c:	4798      	blx	r3
}
    da1e:	b003      	add	sp, #12
    da20:	f85d fb04 	ldr.w	pc, [sp], #4

0000da24 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    da24:	4b05      	ldr	r3, [pc, #20]	; (da3c <_write+0x18>)
    da26:	2802      	cmp	r0, #2
    da28:	bf88      	it	hi
    da2a:	4603      	movhi	r3, r0
{
    da2c:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    da2e:	681c      	ldr	r4, [r3, #0]
    da30:	4618      	mov	r0, r3
    da32:	6863      	ldr	r3, [r4, #4]
}
    da34:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    da38:	4718      	bx	r3
    da3a:	bf00      	nop
    da3c:	20008a6c 	.word	0x20008a6c

0000da40 <Print::printf(char const*, ...)>:
{
    da40:	b40e      	push	{r1, r2, r3}
    da42:	b500      	push	{lr}
    da44:	b082      	sub	sp, #8
    da46:	aa03      	add	r2, sp, #12
    da48:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    da4c:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    da4e:	f004 fd83 	bl	12558 <vdprintf>
}
    da52:	b002      	add	sp, #8
    da54:	f85d eb04 	ldr.w	lr, [sp], #4
    da58:	b003      	add	sp, #12
    da5a:	4770      	bx	lr

0000da5c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    da5c:	b95a      	cbnz	r2, da76 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    da5e:	6803      	ldr	r3, [r0, #0]
    da60:	b2c9      	uxtb	r1, r1
    da62:	4a07      	ldr	r2, [pc, #28]	; (da80 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    da64:	681b      	ldr	r3, [r3, #0]
    da66:	4293      	cmp	r3, r2
{
    da68:	b500      	push	{lr}
    da6a:	d106      	bne.n	da7a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    da6c:	4608      	mov	r0, r1
}
    da6e:	f85d eb04 	ldr.w	lr, [sp], #4
    da72:	f002 bb39 	b.w	100e8 <usb_serial_putchar>
    da76:	f7ff bf7b 	b.w	d970 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    da7a:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    da7e:	4718      	bx	r3
    da80:	0000d969 	.word	0x0000d969

0000da84 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    da84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    da88:	b093      	sub	sp, #76	; 0x4c
    da8a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
    da8e:	f89d 906c 	ldrb.w	r9, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    da92:	2f01      	cmp	r7, #1
    da94:	d944      	bls.n	db20 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x9c>
    da96:	461c      	mov	r4, r3
	if (n == 0) {
    da98:	4680      	mov	r8, r0
    da9a:	4615      	mov	r5, r2
    da9c:	ea52 0304 	orrs.w	r3, r2, r4
    daa0:	d039      	beq.n	db16 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x92>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    daa2:	2641      	movs	r6, #65	; 0x41
    daa4:	e001      	b.n	daaa <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x26>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    daa6:	fa5f f68c 	uxtb.w	r6, ip
			digit = n % base;
    daaa:	4621      	mov	r1, r4
    daac:	4628      	mov	r0, r5
    daae:	463a      	mov	r2, r7
    dab0:	2300      	movs	r3, #0
    dab2:	f002 fd3f 	bl	10534 <__aeabi_uldivmod>
    dab6:	fa5f fc82 	uxtb.w	ip, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    daba:	f106 0248 	add.w	r2, r6, #72	; 0x48
    dabe:	f1bc 0f09 	cmp.w	ip, #9
    dac2:	f10c 0337 	add.w	r3, ip, #55	; 0x37
    dac6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    daca:	446a      	add	r2, sp
    dacc:	b2db      	uxtb	r3, r3
    dace:	bf98      	it	ls
    dad0:	fa5f f38c 	uxtbls.w	r3, ip
			if (n == 0) break;
    dad4:	42bd      	cmp	r5, r7
			i--;
    dad6:	f106 3cff 	add.w	ip, r6, #4294967295
			n /= base;
    dada:	4605      	mov	r5, r0
			if (n == 0) break;
    dadc:	f174 0400 	sbcs.w	r4, r4, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    dae0:	f802 3c44 	strb.w	r3, [r2, #-68]
			n /= base;
    dae4:	460c      	mov	r4, r1
			if (n == 0) break;
    dae6:	d2de      	bcs.n	daa6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x22>
		}
	}
	if (sign) {
    dae8:	f1b9 0f00 	cmp.w	r9, #0
    daec:	d007      	beq.n	dafe <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x7a>
		i--;
    daee:	3e01      	subs	r6, #1
		buf[i] = '-';
    daf0:	222d      	movs	r2, #45	; 0x2d
		i--;
    daf2:	b2f6      	uxtb	r6, r6
		buf[i] = '-';
    daf4:	f106 0348 	add.w	r3, r6, #72	; 0x48
    daf8:	446b      	add	r3, sp
    dafa:	f803 2c44 	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    dafe:	f8d8 3000 	ldr.w	r3, [r8]
    db02:	a901      	add	r1, sp, #4
    db04:	f1c6 0242 	rsb	r2, r6, #66	; 0x42
    db08:	4640      	mov	r0, r8
    db0a:	685b      	ldr	r3, [r3, #4]
    db0c:	4431      	add	r1, r6
    db0e:	4798      	blx	r3
}
    db10:	b013      	add	sp, #76	; 0x4c
    db12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf[sizeof(buf) - 1] = '0';
    db16:	2330      	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    db18:	2641      	movs	r6, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    db1a:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    db1e:	e7e3      	b.n	dae8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x64>
	if (base < 2) return 0;
    db20:	2000      	movs	r0, #0
}
    db22:	b013      	add	sp, #76	; 0x4c
    db24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000db28 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    db28:	eeb4 0b40 	vcmp.f64	d0, d0
{
    db2c:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    db2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    db32:	4605      	mov	r5, r0
    db34:	ed2d 8b02 	vpush	{d8}
    db38:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    db3a:	d67c      	bvs.n	dc36 <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    db3c:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    db40:	ed9f 6b47 	vldr	d6, [pc, #284]	; dc60 <Print::printFloat(double, unsigned char)+0x138>
    db44:	eeb4 7b46 	vcmp.f64	d7, d6
    db48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db4c:	dc6b      	bgt.n	dc26 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    db4e:	ed9f 7b46 	vldr	d7, [pc, #280]	; dc68 <Print::printFloat(double, unsigned char)+0x140>
    db52:	eeb4 0bc7 	vcmpe.f64	d0, d7
    db56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db5a:	dc5a      	bgt.n	dc12 <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    db5c:	ed9f 7b44 	vldr	d7, [pc, #272]	; dc70 <Print::printFloat(double, unsigned char)+0x148>
    db60:	eeb4 0bc7 	vcmpe.f64	d0, d7
    db64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db68:	d453      	bmi.n	dc12 <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    db6a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    db6e:	460c      	mov	r4, r1
    db70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db74:	d45b      	bmi.n	dc2e <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    db76:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    db78:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    db7c:	2c00      	cmp	r4, #0
    db7e:	d05e      	beq.n	dc3e <Print::printFloat(double, unsigned char)+0x116>
    db80:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    db84:	ed9f 6b3c 	vldr	d6, [pc, #240]	; dc78 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    db88:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    db8c:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    db90:	fa5f f28c 	uxtb.w	r2, ip
    db94:	42a2      	cmp	r2, r4
    db96:	d3f7      	bcc.n	db88 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    db98:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    db9c:	220a      	movs	r2, #10
    db9e:	4628      	mov	r0, r5
    dba0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    dba4:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    dba8:	ee17 1a90 	vmov	r1, s15
    dbac:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    dbb0:	f7ff fede 	bl	d970 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    dbb4:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    dbb6:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    dbba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    dbbe:	4606      	mov	r6, r0
		buf[0] = '.';
    dbc0:	bf28      	it	cs
    dbc2:	240f      	movcs	r4, #15
    dbc4:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    dbc8:	f10d 0309 	add.w	r3, sp, #9
    dbcc:	aa02      	add	r2, sp, #8
    dbce:	1e61      	subs	r1, r4, #1
    dbd0:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    dbd4:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    dbd8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    dbdc:	edcd 7a01 	vstr	s15, [sp, #4]
    dbe0:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    dbe4:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    dbe8:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    dbea:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    dbee:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    dbf2:	4291      	cmp	r1, r2
			remainder -= n; 
    dbf4:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    dbf8:	d1ec      	bne.n	dbd4 <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    dbfa:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    dbfc:	3401      	adds	r4, #1
		count += write(buf, count);
    dbfe:	a902      	add	r1, sp, #8
    dc00:	4628      	mov	r0, r5
    dc02:	685b      	ldr	r3, [r3, #4]
    dc04:	b2e2      	uxtb	r2, r4
    dc06:	4798      	blx	r3
	}
	return count;
}
    dc08:	4630      	mov	r0, r6
    dc0a:	b006      	add	sp, #24
    dc0c:	ecbd 8b02 	vpop	{d8}
    dc10:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    dc12:	682b      	ldr	r3, [r5, #0]
    dc14:	2203      	movs	r2, #3
    dc16:	491a      	ldr	r1, [pc, #104]	; (dc80 <Print::printFloat(double, unsigned char)+0x158>)
    dc18:	685b      	ldr	r3, [r3, #4]
    dc1a:	b006      	add	sp, #24
    dc1c:	ecbd 8b02 	vpop	{d8}
    dc20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dc24:	4718      	bx	r3
    dc26:	6803      	ldr	r3, [r0, #0]
    dc28:	2203      	movs	r2, #3
    dc2a:	4916      	ldr	r1, [pc, #88]	; (dc84 <Print::printFloat(double, unsigned char)+0x15c>)
    dc2c:	e7f4      	b.n	dc18 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    dc2e:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    dc32:	2301      	movs	r3, #1
    dc34:	e7a0      	b.n	db78 <Print::printFloat(double, unsigned char)+0x50>
    dc36:	6803      	ldr	r3, [r0, #0]
    dc38:	2203      	movs	r2, #3
    dc3a:	4913      	ldr	r1, [pc, #76]	; (dc88 <Print::printFloat(double, unsigned char)+0x160>)
    dc3c:	e7ec      	b.n	dc18 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    dc3e:	ee30 0b07 	vadd.f64	d0, d0, d7
    dc42:	220a      	movs	r2, #10
    dc44:	4628      	mov	r0, r5
    dc46:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    dc4a:	ee17 1a90 	vmov	r1, s15
}
    dc4e:	b006      	add	sp, #24
    dc50:	ecbd 8b02 	vpop	{d8}
    dc54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dc58:	f7ff be8a 	b.w	d970 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    dc5c:	f3af 8000 	nop.w
    dc60:	ffffffff 	.word	0xffffffff
    dc64:	7fefffff 	.word	0x7fefffff
    dc68:	e0000000 	.word	0xe0000000
    dc6c:	41efffff 	.word	0x41efffff
    dc70:	e0000000 	.word	0xe0000000
    dc74:	c1efffff 	.word	0xc1efffff
    dc78:	9999999a 	.word	0x9999999a
    dc7c:	3fb99999 	.word	0x3fb99999
    dc80:	20000b8c 	.word	0x20000b8c
    dc84:	20000b88 	.word	0x20000b88
    dc88:	20000b84 	.word	0x20000b84

0000dc8c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    dc8c:	f002 ba1c 	b.w	100c8 <usb_serial_getchar>

0000dc90 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    dc90:	f002 b9b4 	b.w	fffc <usb_serial_peekchar>

0000dc94 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    dc94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    dc98:	b392      	cbz	r2, dd00 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    dc9a:	4617      	mov	r7, r2
    dc9c:	fab3 f283 	clz	r2, r3
    dca0:	0952      	lsrs	r2, r2, #5
    dca2:	b36b      	cbz	r3, dd00 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    dca4:	f1b3 0801 	subs.w	r8, r3, #1
    dca8:	d025      	beq.n	dcf6 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    dcaa:	eb07 0a08 	add.w	sl, r7, r8
    dcae:	4683      	mov	fp, r0
    dcb0:	4689      	mov	r9, r1
	size_t index = 0;
    dcb2:	4690      	mov	r8, r2
    dcb4:	4c17      	ldr	r4, [pc, #92]	; (dd14 <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    dcb6:	4e18      	ldr	r6, [pc, #96]	; (dd18 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    dcb8:	6825      	ldr	r5, [r4, #0]
    dcba:	e00b      	b.n	dcd4 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    dcbc:	f002 fa04 	bl	100c8 <usb_serial_getchar>
    if (c >= 0) return c;
    dcc0:	2800      	cmp	r0, #0
    dcc2:	da10      	bge.n	dce6 <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    dcc4:	f002 faa4 	bl	10210 <yield>
    dcc8:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    dcca:	f8db 2008 	ldr.w	r2, [fp, #8]
    dcce:	1b5b      	subs	r3, r3, r5
    dcd0:	4293      	cmp	r3, r2
    dcd2:	d21a      	bcs.n	dd0a <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    dcd4:	f8db 3000 	ldr.w	r3, [fp]
    dcd8:	695b      	ldr	r3, [r3, #20]
    dcda:	42b3      	cmp	r3, r6
    dcdc:	d0ee      	beq.n	dcbc <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    dcde:	4658      	mov	r0, fp
    dce0:	4798      	blx	r3
    if (c >= 0) return c;
    dce2:	2800      	cmp	r0, #0
    dce4:	dbee      	blt.n	dcc4 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    dce6:	4548      	cmp	r0, r9
    dce8:	d005      	beq.n	dcf6 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    dcea:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    dcee:	45ba      	cmp	sl, r7
		index++;
    dcf0:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    dcf4:	d1e0      	bne.n	dcb8 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    dcf6:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    dcf8:	4640      	mov	r0, r8
	*buffer = 0;
    dcfa:	703b      	strb	r3, [r7, #0]
}
    dcfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    dd00:	f04f 0800 	mov.w	r8, #0
}
    dd04:	4640      	mov	r0, r8
    dd06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    dd0a:	2301      	movs	r3, #1
    dd0c:	f88b 300c 	strb.w	r3, [fp, #12]
    dd10:	e7f1      	b.n	dcf6 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    dd12:	bf00      	nop
    dd14:	20016020 	.word	0x20016020
    dd18:	0000dc8d 	.word	0x0000dc8d

0000dd1c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    dd1c:	49a2      	ldr	r1, [pc, #648]	; (dfa8 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    dd1e:	4ba3      	ldr	r3, [pc, #652]	; (dfac <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    dd20:	4288      	cmp	r0, r1
{
    dd22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    dd26:	4ca2      	ldr	r4, [pc, #648]	; (dfb0 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    dd28:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    dd2a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    dd2c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    dd30:	d91b      	bls.n	dd6a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    dd32:	4ba0      	ldr	r3, [pc, #640]	; (dfb4 <set_arm_clock+0x298>)
    dd34:	4298      	cmp	r0, r3
    dd36:	f240 8102 	bls.w	df3e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    dd3a:	1ac3      	subs	r3, r0, r3
    dd3c:	499e      	ldr	r1, [pc, #632]	; (dfb8 <set_arm_clock+0x29c>)
    dd3e:	0a1b      	lsrs	r3, r3, #8
    dd40:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    dd44:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    dd48:	09db      	lsrs	r3, r3, #7
    dd4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    dd4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    dd52:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    dd56:	428b      	cmp	r3, r1
    dd58:	bf28      	it	cs
    dd5a:	460b      	movcs	r3, r1
    dd5c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    dd60:	4b96      	ldr	r3, [pc, #600]	; (dfbc <set_arm_clock+0x2a0>)
    dd62:	fba3 3707 	umull	r3, r7, r3, r7
    dd66:	08ff      	lsrs	r7, r7, #3
    dd68:	e004      	b.n	dd74 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    dd6a:	4f95      	ldr	r7, [pc, #596]	; (dfc0 <set_arm_clock+0x2a4>)
    dd6c:	42b8      	cmp	r0, r7
    dd6e:	bf8c      	ite	hi
    dd70:	270e      	movhi	r7, #14
    dd72:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    dd74:	498d      	ldr	r1, [pc, #564]	; (dfac <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    dd76:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    dd7a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    dd7e:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    dd80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    dd84:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    dd88:	d20c      	bcs.n	dda4 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    dd8a:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    dd8e:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    dd92:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    dd96:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    dd9a:	680b      	ldr	r3, [r1, #0]
    dd9c:	2b00      	cmp	r3, #0
    dd9e:	dafc      	bge.n	dd9a <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    dda0:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    dda4:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    dda8:	d124      	bne.n	ddf4 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    ddaa:	4986      	ldr	r1, [pc, #536]	; (dfc4 <set_arm_clock+0x2a8>)
    ddac:	690c      	ldr	r4, [r1, #16]
    ddae:	4986      	ldr	r1, [pc, #536]	; (dfc8 <set_arm_clock+0x2ac>)
    ddb0:	43a1      	bics	r1, r4
    ddb2:	f000 80ea 	beq.w	df8a <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    ddb6:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    ddba:	4634      	mov	r4, r6
    ddbc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    ddc0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    ddc4:	d004      	beq.n	ddd0 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    ddc6:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    ddca:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    ddcc:	4b77      	ldr	r3, [pc, #476]	; (dfac <set_arm_clock+0x290>)
    ddce:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    ddd0:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    ddd4:	d007      	beq.n	dde6 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    ddd6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    ddda:	4974      	ldr	r1, [pc, #464]	; (dfac <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    dddc:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    ddde:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    dde0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    dde2:	071a      	lsls	r2, r3, #28
    dde4:	d4fc      	bmi.n	dde0 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    dde6:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    ddea:	4a70      	ldr	r2, [pc, #448]	; (dfac <set_arm_clock+0x290>)
    ddec:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ddee:	6c93      	ldr	r3, [r2, #72]	; 0x48
    ddf0:	069b      	lsls	r3, r3, #26
    ddf2:	d4fc      	bmi.n	ddee <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    ddf4:	4c75      	ldr	r4, [pc, #468]	; (dfcc <set_arm_clock+0x2b0>)
    ddf6:	42a0      	cmp	r0, r4
    ddf8:	f200 80ce 	bhi.w	df98 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    ddfc:	f04f 0c01 	mov.w	ip, #1
    de00:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    de02:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    de04:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    de08:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    de0c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    de10:	42a2      	cmp	r2, r4
    de12:	d818      	bhi.n	de46 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    de14:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    de18:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    de1c:	f040 808d 	bne.w	df3a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    de20:	f1bc 0f04 	cmp.w	ip, #4
    de24:	f200 8091 	bhi.w	df4a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    de28:	180a      	adds	r2, r1, r0
    de2a:	42a2      	cmp	r2, r4
    de2c:	f200 80a4 	bhi.w	df78 <set_arm_clock+0x25c>
    de30:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    de34:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    de36:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    de3a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    de3e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    de42:	42a2      	cmp	r2, r4
    de44:	d9e6      	bls.n	de14 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    de46:	f10c 31ff 	add.w	r1, ip, #4294967295
    de4a:	028c      	lsls	r4, r1, #10
    de4c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    de50:	485f      	ldr	r0, [pc, #380]	; (dfd0 <set_arm_clock+0x2b4>)
    de52:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    de54:	4a5f      	ldr	r2, [pc, #380]	; (dfd4 <set_arm_clock+0x2b8>)
    de56:	4290      	cmp	r0, r2
    de58:	d97f      	bls.n	df5a <set_arm_clock+0x23e>
    de5a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; e000 <set_arm_clock+0x2e4>
    de5e:	226c      	movs	r2, #108	; 0x6c
    de60:	485d      	ldr	r0, [pc, #372]	; (dfd8 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    de62:	4d58      	ldr	r5, [pc, #352]	; (dfc4 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    de64:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    de68:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    de6c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    de70:	f8df c190 	ldr.w	ip, [pc, #400]	; e004 <set_arm_clock+0x2e8>
    de74:	ea0e 0c0c 	and.w	ip, lr, ip
    de78:	45d4      	cmp	ip, sl
    de7a:	d009      	beq.n	de90 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    de7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    de80:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    de84:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    de88:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    de8a:	682a      	ldr	r2, [r5, #0]
    de8c:	2a00      	cmp	r2, #0
    de8e:	dafc      	bge.n	de8a <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    de90:	4a46      	ldr	r2, [pc, #280]	; (dfac <set_arm_clock+0x290>)
    de92:	6915      	ldr	r5, [r2, #16]
    de94:	f005 0507 	and.w	r5, r5, #7
    de98:	429d      	cmp	r5, r3
    de9a:	d003      	beq.n	dea4 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    de9c:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    de9e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dea0:	03dd      	lsls	r5, r3, #15
    dea2:	d4fc      	bmi.n	de9e <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    dea4:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    dea8:	d009      	beq.n	debe <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    deaa:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    deae:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    deb2:	4a3e      	ldr	r2, [pc, #248]	; (dfac <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    deb4:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    deb6:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    deb8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    deba:	0799      	lsls	r1, r3, #30
    debc:	d4fc      	bmi.n	deb8 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    debe:	4947      	ldr	r1, [pc, #284]	; (dfdc <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    dec0:	4a47      	ldr	r2, [pc, #284]	; (dfe0 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    dec2:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    dec4:	4291      	cmp	r1, r2
    dec6:	d83c      	bhi.n	df42 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    dec8:	4b46      	ldr	r3, [pc, #280]	; (dfe4 <set_arm_clock+0x2c8>)
    deca:	09c9      	lsrs	r1, r1, #7
    decc:	fba3 3101 	umull	r3, r1, r3, r1
    ded0:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    ded2:	1e4b      	subs	r3, r1, #1
    ded4:	021b      	lsls	r3, r3, #8
    ded6:	ea86 0203 	eor.w	r2, r6, r3
    deda:	f412 7f40 	tst.w	r2, #768	; 0x300
    dede:	d006      	beq.n	deee <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    dee0:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    dee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    dee8:	4a30      	ldr	r2, [pc, #192]	; (dfac <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    deea:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    deec:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    deee:	4a2f      	ldr	r2, [pc, #188]	; (dfac <set_arm_clock+0x290>)
    def0:	6953      	ldr	r3, [r2, #20]
    def2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    def6:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    def8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    defa:	069b      	lsls	r3, r3, #26
    defc:	d4fc      	bmi.n	def8 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    defe:	4b3a      	ldr	r3, [pc, #232]	; (dfe8 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    df00:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    df02:	fba3 2300 	umull	r2, r3, r3, r0
    df06:	f04f 32ff 	mov.w	r2, #4294967295
    df0a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    df0e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    df12:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    df16:	4a35      	ldr	r2, [pc, #212]	; (dfec <set_arm_clock+0x2d0>)
    df18:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    df1a:	4a35      	ldr	r2, [pc, #212]	; (dff0 <set_arm_clock+0x2d4>)
    df1c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    df1e:	4a35      	ldr	r2, [pc, #212]	; (dff4 <set_arm_clock+0x2d8>)
    df20:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    df22:	d208      	bcs.n	df36 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    df24:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    df28:	4a21      	ldr	r2, [pc, #132]	; (dfb0 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    df2a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    df2e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    df30:	6813      	ldr	r3, [r2, #0]
    df32:	2b00      	cmp	r3, #0
    df34:	dafc      	bge.n	df30 <set_arm_clock+0x214>
	}

	return frequency;
}
    df36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df3a:	4673      	mov	r3, lr
    df3c:	e762      	b.n	de04 <set_arm_clock+0xe8>
    df3e:	2712      	movs	r7, #18
    df40:	e718      	b.n	dd74 <set_arm_clock+0x58>
    df42:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    df46:	2104      	movs	r1, #4
    df48:	e7c5      	b.n	ded6 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    df4a:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    df4e:	4820      	ldr	r0, [pc, #128]	; (dfd0 <set_arm_clock+0x2b4>)
    df50:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    df52:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    df54:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    df56:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    df5a:	4a27      	ldr	r2, [pc, #156]	; (dff8 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    df5c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; e008 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    df60:	fba2 2000 	umull	r2, r0, r2, r0
    df64:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    df66:	4825      	ldr	r0, [pc, #148]	; (dffc <set_arm_clock+0x2e0>)
    df68:	2a36      	cmp	r2, #54	; 0x36
    df6a:	bf38      	it	cc
    df6c:	2236      	movcc	r2, #54	; 0x36
    df6e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    df72:	ea42 0a0a 	orr.w	sl, r2, sl
    df76:	e774      	b.n	de62 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    df78:	ea4f 248c 	mov.w	r4, ip, lsl #10
    df7c:	2300      	movs	r3, #0
    df7e:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    df82:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    df86:	46ac      	mov	ip, r5
    df88:	e762      	b.n	de50 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    df8a:	461d      	mov	r5, r3
    df8c:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    df90:	4611      	mov	r1, r2
    df92:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    df96:	e713      	b.n	ddc0 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    df98:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    df9a:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    df9e:	4602      	mov	r2, r0
    dfa0:	4631      	mov	r1, r6
    dfa2:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    dfa4:	46e6      	mov	lr, ip
    dfa6:	e753      	b.n	de50 <set_arm_clock+0x134>
    dfa8:	1f78a400 	.word	0x1f78a400
    dfac:	400fc000 	.word	0x400fc000
    dfb0:	40080000 	.word	0x40080000
    dfb4:	23c34600 	.word	0x23c34600
    dfb8:	004cb223 	.word	0x004cb223
    dfbc:	51eb851f 	.word	0x51eb851f
    dfc0:	016e3600 	.word	0x016e3600
    dfc4:	400d8000 	.word	0x400d8000
    dfc8:	80003040 	.word	0x80003040
    dfcc:	269fb1ff 	.word	0x269fb1ff
    dfd0:	005b8d80 	.word	0x005b8d80
    dfd4:	4df67eff 	.word	0x4df67eff
    dfd8:	4d3f6400 	.word	0x4d3f6400
    dfdc:	08f0d17f 	.word	0x08f0d17f
    dfe0:	2cb4177f 	.word	0x2cb4177f
    dfe4:	00e5109f 	.word	0x00e5109f
    dfe8:	431bde83 	.word	0x431bde83
    dfec:	20008a68 	.word	0x20008a68
    dff0:	20008a64 	.word	0x20008a64
    dff4:	20015910 	.word	0x20015910
    dff8:	165e9f81 	.word	0x165e9f81
    dffc:	00b71b00 	.word	0x00b71b00
    e000:	8000206c 	.word	0x8000206c
    e004:	8001307f 	.word	0x8001307f
    e008:	80002000 	.word	0x80002000

0000e00c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    e00c:	b900      	cbnz	r0, e010 <delay+0x4>
    e00e:	4770      	bx	lr
{
    e010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e014:	2101      	movs	r1, #1
    e016:	4681      	mov	r9, r0
    e018:	4c21      	ldr	r4, [pc, #132]	; (e0a0 <delay+0x94>)
    e01a:	4d22      	ldr	r5, [pc, #136]	; (e0a4 <delay+0x98>)
    e01c:	4e22      	ldr	r6, [pc, #136]	; (e0a8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    e01e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    e022:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    e024:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e026:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    e02a:	2b00      	cmp	r3, #0
    e02c:	d1f7      	bne.n	e01e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    e02e:	491f      	ldr	r1, [pc, #124]	; (e0ac <delay+0xa0>)
    e030:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    e032:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e036:	f8df a078 	ldr.w	sl, [pc, #120]	; e0b0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    e03a:	1a1b      	subs	r3, r3, r0
    e03c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    e03e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e042:	f8da 2000 	ldr.w	r2, [sl]
    e046:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    e04a:	455a      	cmp	r2, fp
    e04c:	bf94      	ite	ls
    e04e:	4490      	addls	r8, r2
    e050:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    e052:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    e056:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    e058:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e05a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    e05e:	2b00      	cmp	r3, #0
    e060:	d1f7      	bne.n	e052 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    e062:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e064:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    e068:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    e06a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e06e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    e072:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    e076:	bf94      	ite	ls
    e078:	4462      	addls	r2, ip
    e07a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    e07e:	eba2 0208 	sub.w	r2, r2, r8
    e082:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    e086:	d306      	bcc.n	e096 <delay+0x8a>
			if (--msec == 0) return;
    e088:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    e08c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    e090:	d1df      	bne.n	e052 <delay+0x46>
}
    e092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    e096:	f002 f8bb 	bl	10210 <yield>
		while ((micros() - start) >= 1000) {
    e09a:	4904      	ldr	r1, [pc, #16]	; (e0ac <delay+0xa0>)
    e09c:	e7d9      	b.n	e052 <delay+0x46>
    e09e:	bf00      	nop
    e0a0:	20016024 	.word	0x20016024
    e0a4:	20016020 	.word	0x20016020
    e0a8:	2001601c 	.word	0x2001601c
    e0ac:	e0001000 	.word	0xe0001000
    e0b0:	20015910 	.word	0x20015910

0000e0b4 <micros>:
{
    e0b4:	b430      	push	{r4, r5}
    e0b6:	4b0f      	ldr	r3, [pc, #60]	; (e0f4 <micros+0x40>)
    e0b8:	f04f 0c01 	mov.w	ip, #1
    e0bc:	4d0e      	ldr	r5, [pc, #56]	; (e0f8 <micros+0x44>)
    e0be:	4c0f      	ldr	r4, [pc, #60]	; (e0fc <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    e0c0:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    e0c4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    e0c6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e0c8:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    e0cc:	2a00      	cmp	r2, #0
    e0ce:	d1f7      	bne.n	e0c0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    e0d0:	4b0b      	ldr	r3, [pc, #44]	; (e100 <micros+0x4c>)
    e0d2:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e0d4:	4a0b      	ldr	r2, [pc, #44]	; (e104 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    e0d6:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    e0d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e0dc:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    e0de:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e0e2:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    e0e6:	bc30      	pop	{r4, r5}
    e0e8:	428a      	cmp	r2, r1
    e0ea:	bf94      	ite	ls
    e0ec:	1880      	addls	r0, r0, r2
    e0ee:	1840      	addhi	r0, r0, r1
    e0f0:	4770      	bx	lr
    e0f2:	bf00      	nop
    e0f4:	20016024 	.word	0x20016024
    e0f8:	20016020 	.word	0x20016020
    e0fc:	2001601c 	.word	0x2001601c
    e100:	e0001000 	.word	0xe0001000
    e104:	20015910 	.word	0x20015910

0000e108 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    e108:	2836      	cmp	r0, #54	; 0x36
    e10a:	d816      	bhi.n	e13a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    e10c:	0102      	lsls	r2, r0, #4
    e10e:	4b10      	ldr	r3, [pc, #64]	; (e150 <digitalWrite+0x48>)
    e110:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    e114:	589b      	ldr	r3, [r3, r2]
{
    e116:	b410      	push	{r4}
	mask = p->mask;
    e118:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    e11a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    e11c:	4214      	tst	r4, r2
    e11e:	d005      	beq.n	e12c <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    e120:	b961      	cbnz	r1, e13c <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    e122:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    e126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    e12a:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e12c:	6883      	ldr	r3, [r0, #8]
		if (val) {
    e12e:	b151      	cbz	r1, e146 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e130:	4a08      	ldr	r2, [pc, #32]	; (e154 <digitalWrite+0x4c>)
}
    e132:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e136:	601a      	str	r2, [r3, #0]
}
    e138:	4770      	bx	lr
    e13a:	4770      	bx	lr
    e13c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    e140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    e144:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    e146:	4a04      	ldr	r2, [pc, #16]	; (e158 <digitalWrite+0x50>)
}
    e148:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    e14c:	601a      	str	r2, [r3, #0]
}
    e14e:	4770      	bx	lr
    e150:	20007b44 	.word	0x20007b44
    e154:	0001f038 	.word	0x0001f038
    e158:	00013038 	.word	0x00013038

0000e15c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    e15c:	2836      	cmp	r0, #54	; 0x36
    e15e:	d829      	bhi.n	e1b4 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    e160:	4b16      	ldr	r3, [pc, #88]	; (e1bc <pinMode+0x60>)
    e162:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    e164:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    e166:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    e16a:	589a      	ldr	r2, [r3, r2]
{
    e16c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    e16e:	6853      	ldr	r3, [r2, #4]
    e170:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    e172:	d00e      	beq.n	e192 <pinMode+0x36>
    e174:	2904      	cmp	r1, #4
    e176:	d00c      	beq.n	e192 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    e178:	ea23 0304 	bic.w	r3, r3, r4
    e17c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    e17e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    e180:	b1a9      	cbz	r1, e1ae <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    e182:	2902      	cmp	r1, #2
    e184:	d017      	beq.n	e1b6 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    e186:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    e188:	bf0c      	ite	eq
    e18a:	4a0d      	ldreq	r2, [pc, #52]	; (e1c0 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    e18c:	4a0d      	ldrne	r2, [pc, #52]	; (e1c4 <pinMode+0x68>)
    e18e:	601a      	str	r2, [r3, #0]
    e190:	e007      	b.n	e1a2 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    e192:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    e194:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    e196:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    e198:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    e19a:	d008      	beq.n	e1ae <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    e19c:	f640 0238 	movw	r2, #2104	; 0x838
    e1a0:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    e1a2:	6843      	ldr	r3, [r0, #4]
    e1a4:	2215      	movs	r2, #21
}
    e1a6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    e1aa:	601a      	str	r2, [r3, #0]
}
    e1ac:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    e1ae:	2238      	movs	r2, #56	; 0x38
    e1b0:	601a      	str	r2, [r3, #0]
    e1b2:	e7f6      	b.n	e1a2 <pinMode+0x46>
    e1b4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e1b6:	4a04      	ldr	r2, [pc, #16]	; (e1c8 <pinMode+0x6c>)
    e1b8:	601a      	str	r2, [r3, #0]
    e1ba:	e7f2      	b.n	e1a2 <pinMode+0x46>
    e1bc:	20007b44 	.word	0x20007b44
    e1c0:	00013038 	.word	0x00013038
    e1c4:	00010038 	.word	0x00010038
    e1c8:	0001f038 	.word	0x0001f038

0000e1cc <flash_wait>:
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    e1cc:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    e1ce:	4a12      	ldr	r2, [pc, #72]	; (e218 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    e1d0:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    e1d2:	4b12      	ldr	r3, [pc, #72]	; (e21c <flash_wait+0x50>)
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    e1d4:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    e1d6:	4d12      	ldr	r5, [pc, #72]	; (e220 <flash_wait+0x54>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    e1d8:	4c12      	ldr	r4, [pc, #72]	; (e224 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    e1da:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    e1de:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    e1e2:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    e1e6:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    e1ea:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e1ee:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    e1f2:	6953      	ldr	r3, [r2, #20]
    e1f4:	07db      	lsls	r3, r3, #31
    e1f6:	d5fc      	bpl.n	e1f2 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e1f8:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    e1fa:	7823      	ldrb	r3, [r4, #0]
    e1fc:	07db      	lsls	r3, r3, #31
    e1fe:	d4f0      	bmi.n	e1e2 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    e200:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    e202:	4905      	ldr	r1, [pc, #20]	; (e218 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    e204:	f043 0301 	orr.w	r3, r3, #1
    e208:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    e20a:	680b      	ldr	r3, [r1, #0]
    e20c:	07db      	lsls	r3, r3, #31
    e20e:	d4fc      	bmi.n	e20a <flash_wait+0x3e>
	__enable_irq();
    e210:	b662      	cpsie	i
}
    e212:	bc30      	pop	{r4, r5}
    e214:	4770      	bx	lr
    e216:	bf00      	nop
    e218:	402a8000 	.word	0x402a8000
    e21c:	24010405 	.word	0x24010405
    e220:	000f0001 	.word	0x000f0001
    e224:	402a8100 	.word	0x402a8100

0000e228 <eeprom_initialize>:
{
    e228:	b570      	push	{r4, r5, r6, lr}
    e22a:	4c0e      	ldr	r4, [pc, #56]	; (e264 <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
    e22c:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
    e230:	4e0d      	ldr	r6, [pc, #52]	; (e268 <eeprom_initialize+0x40>)
    e232:	f104 057e 	add.w	r5, r4, #126	; 0x7e
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e236:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
    e23a:	2100      	movs	r1, #0
    e23c:	e002      	b.n	e244 <eeprom_initialize+0x1c>
		} while (p < end);
    e23e:	42b3      	cmp	r3, r6
			index++;
    e240:	b281      	uxth	r1, r0
		} while (p < end);
    e242:	d204      	bcs.n	e24e <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
    e244:	881a      	ldrh	r2, [r3, #0]
			index++;
    e246:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
    e248:	3302      	adds	r3, #2
    e24a:	4572      	cmp	r2, lr
    e24c:	d1f7      	bne.n	e23e <eeprom_initialize+0x16>
		sector_index[sector] = index;
    e24e:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    e252:	42ac      	cmp	r4, r5
    e254:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    e258:	d1ed      	bne.n	e236 <eeprom_initialize+0xe>
	initialized = 1;
    e25a:	4b04      	ldr	r3, [pc, #16]	; (e26c <eeprom_initialize+0x44>)
    e25c:	2201      	movs	r2, #1
    e25e:	701a      	strb	r2, [r3, #0]
}
    e260:	bd70      	pop	{r4, r5, r6, pc}
    e262:	bf00      	nop
    e264:	20015de2 	.word	0x20015de2
    e268:	607c1000 	.word	0x607c1000
    e26c:	20016064 	.word	0x20016064

0000e270 <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
    e270:	f241 03bb 	movw	r3, #4283	; 0x10bb
    e274:	4298      	cmp	r0, r3
    e276:	d82f      	bhi.n	e2d8 <eeprom_read_byte+0x68>
	if (!initialized) eeprom_initialize();
    e278:	4b18      	ldr	r3, [pc, #96]	; (e2dc <eeprom_read_byte+0x6c>)
{
    e27a:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
    e27c:	781b      	ldrb	r3, [r3, #0]
    e27e:	4604      	mov	r4, r0
    e280:	b33b      	cbz	r3, e2d2 <eeprom_read_byte+0x62>
	sector = (addr >> 2) % FLASH_SECTORS;
    e282:	08a0      	lsrs	r0, r4, #2
    e284:	4b16      	ldr	r3, [pc, #88]	; (e2e0 <eeprom_read_byte+0x70>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    e286:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
    e28a:	4c16      	ldr	r4, [pc, #88]	; (e2e4 <eeprom_read_byte+0x74>)
	sector = (addr >> 2) % FLASH_SECTORS;
    e28c:	fba3 2300 	umull	r2, r3, r3, r0
    e290:	1ac2      	subs	r2, r0, r3
    e292:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e296:	4a14      	ldr	r2, [pc, #80]	; (e2e8 <eeprom_read_byte+0x78>)
	sector = (addr >> 2) % FLASH_SECTORS;
    e298:	095b      	lsrs	r3, r3, #5
    e29a:	ebc3 1e83 	rsb	lr, r3, r3, lsl #6
    e29e:	469c      	mov	ip, r3
    e2a0:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    e2a4:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
    e2a8:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
    e2aa:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e2ae:	441a      	add	r2, r3
	end = p + sector_index[sector];
    e2b0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e2b4:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
    e2b6:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
    e2ba:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
    e2be:	d907      	bls.n	e2d0 <eeprom_read_byte+0x60>
		uint32_t val = *p++;
    e2c0:	881a      	ldrh	r2, [r3, #0]
    e2c2:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
    e2c4:	b2d4      	uxtb	r4, r2
    e2c6:	428c      	cmp	r4, r1
    e2c8:	bf08      	it	eq
    e2ca:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
    e2cc:	459c      	cmp	ip, r3
    e2ce:	d8f7      	bhi.n	e2c0 <eeprom_read_byte+0x50>
}
    e2d0:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
    e2d2:	f7ff ffa9 	bl	e228 <eeprom_initialize>
    e2d6:	e7d4      	b.n	e282 <eeprom_read_byte+0x12>
	if (addr > E2END) return 0xFF;
    e2d8:	20ff      	movs	r0, #255	; 0xff
}
    e2da:	4770      	bx	lr
    e2dc:	20016064 	.word	0x20016064
    e2e0:	04104105 	.word	0x04104105
    e2e4:	20015de4 	.word	0x20015de4
    e2e8:	000607c0 	.word	0x000607c0

0000e2ec <eeprom_read_block>:
	while (len--) {
    e2ec:	b162      	cbz	r2, e308 <eeprom_read_block+0x1c>
{
    e2ee:	b570      	push	{r4, r5, r6, lr}
    e2f0:	4605      	mov	r5, r0
    e2f2:	460c      	mov	r4, r1
    e2f4:	188e      	adds	r6, r1, r2
		*dest++ = eeprom_read_byte(p++);
    e2f6:	4620      	mov	r0, r4
    e2f8:	3401      	adds	r4, #1
    e2fa:	f7ff ffb9 	bl	e270 <eeprom_read_byte>
    e2fe:	f805 0b01 	strb.w	r0, [r5], #1
	while (len--) {
    e302:	42b4      	cmp	r4, r6
    e304:	d1f7      	bne.n	e2f6 <eeprom_read_block+0xa>
}
    e306:	bd70      	pop	{r4, r5, r6, pc}
    e308:	4770      	bx	lr
    e30a:	bf00      	nop

0000e30c <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    e30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e30e:	460f      	mov	r7, r1
    e310:	4616      	mov	r6, r2
	__disable_irq();
    e312:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e314:	4b34      	ldr	r3, [pc, #208]	; (e3e8 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    e316:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e31a:	4a34      	ldr	r2, [pc, #208]	; (e3ec <eepromemu_flash_write+0xe0>)
    e31c:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    e31e:	2202      	movs	r2, #2
    e320:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    e322:	2200      	movs	r2, #0
    e324:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    e328:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    e32c:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    e330:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    e334:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e338:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    e33c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e340:	2201      	movs	r2, #1
    e342:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e346:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e34a:	1982      	adds	r2, r0, r6
	asm("dsb");
    e34c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    e350:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    e354:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    e358:	3320      	adds	r3, #32
	} while (location < end_addr);
    e35a:	429a      	cmp	r2, r3
    e35c:	d8fa      	bhi.n	e354 <eepromemu_flash_write+0x48>
	asm("dsb");
    e35e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e362:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e366:	4d20      	ldr	r5, [pc, #128]	; (e3e8 <eepromemu_flash_write+0xdc>)
    e368:	696b      	ldr	r3, [r5, #20]
    e36a:	07da      	lsls	r2, r3, #31
    e36c:	d5fc      	bpl.n	e368 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e36e:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    e370:	491f      	ldr	r1, [pc, #124]	; (e3f0 <eepromemu_flash_write+0xe4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    e372:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    e374:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e378:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    e37a:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    e37e:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    e382:	f242 2101 	movw	r1, #8705	; 0x2201
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    e386:	4c18      	ldr	r4, [pc, #96]	; (e3e8 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    e388:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    e38c:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    e390:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    e394:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e398:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e39c:	4d15      	ldr	r5, [pc, #84]	; (e3f4 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    e39e:	e001      	b.n	e3a4 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    e3a0:	065b      	lsls	r3, r3, #25
    e3a2:	d409      	bmi.n	e3b8 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    e3a4:	6963      	ldr	r3, [r4, #20]
    e3a6:	f013 0001 	ands.w	r0, r3, #1
    e3aa:	d0f9      	beq.n	e3a0 <eepromemu_flash_write+0x94>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    e3ac:	2341      	movs	r3, #65	; 0x41
    e3ae:	6163      	str	r3, [r4, #20]
	flash_wait();
}
    e3b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    e3b4:	f7ff bf0a 	b.w	e1cc <flash_wait>
			if (wrlen > 8) wrlen = 8;
    e3b8:	2e08      	cmp	r6, #8
    e3ba:	d80a      	bhi.n	e3d2 <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    e3bc:	b136      	cbz	r6, e3cc <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e3be:	4632      	mov	r2, r6
    e3c0:	4639      	mov	r1, r7
				src += wrlen;
    e3c2:	4437      	add	r7, r6
				len -= wrlen;
    e3c4:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e3c6:	4628      	mov	r0, r5
    e3c8:	f000 f924 	bl	e614 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    e3cc:	2340      	movs	r3, #64	; 0x40
    e3ce:	6163      	str	r3, [r4, #20]
    e3d0:	e7e8      	b.n	e3a4 <eepromemu_flash_write+0x98>
    e3d2:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    e3d6:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e3d8:	4639      	mov	r1, r7
    e3da:	4632      	mov	r2, r6
				src += wrlen;
    e3dc:	4437      	add	r7, r6
				len -= wrlen;
    e3de:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e3e0:	4628      	mov	r0, r5
    e3e2:	f000 f917 	bl	e614 <memcpy>
				len -= wrlen;
    e3e6:	e7f1      	b.n	e3cc <eepromemu_flash_write+0xc0>
    e3e8:	402a8000 	.word	0x402a8000
    e3ec:	5af05af0 	.word	0x5af05af0
    e3f0:	08180432 	.word	0x08180432
    e3f4:	402a8180 	.word	0x402a8180

0000e3f8 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    e3f8:	b410      	push	{r4}
	__disable_irq();
    e3fa:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e3fc:	4b28      	ldr	r3, [pc, #160]	; (e4a0 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    e3fe:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e400:	4c28      	ldr	r4, [pc, #160]	; (e4a4 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    e402:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e404:	619c      	str	r4, [r3, #24]
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e406:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    e40a:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    e40c:	f240 4106 	movw	r1, #1030	; 0x406
    e410:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e414:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    e416:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    e41a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    e41e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    e422:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    e426:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e42a:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    e42e:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e430:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    e434:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    e438:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    e43c:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    e440:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    e444:	4299      	cmp	r1, r3
    e446:	bf34      	ite	cc
    e448:	2101      	movcc	r1, #1
    e44a:	2180      	movcs	r1, #128	; 0x80
    e44c:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    e450:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    e452:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    e456:	461a      	mov	r2, r3
	} while (location < end_addr);
    e458:	f103 0320 	add.w	r3, r3, #32
    e45c:	d1f8      	bne.n	e450 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    e45e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e462:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e466:	4a0e      	ldr	r2, [pc, #56]	; (e4a0 <eepromemu_flash_erase_sector+0xa8>)
    e468:	6953      	ldr	r3, [r2, #20]
    e46a:	07d9      	lsls	r1, r3, #31
    e46c:	d5fc      	bpl.n	e468 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e46e:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    e470:	490d      	ldr	r1, [pc, #52]	; (e4a8 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    e472:	4b0e      	ldr	r3, [pc, #56]	; (e4ac <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e474:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    e476:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    e478:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e47c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e480:	4907      	ldr	r1, [pc, #28]	; (e4a0 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    e482:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e486:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e48a:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e48e:	694b      	ldr	r3, [r1, #20]
    e490:	07db      	lsls	r3, r3, #31
    e492:	d5fc      	bpl.n	e48e <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e494:	2301      	movs	r3, #1
	flash_wait();
}
    e496:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e49a:	614b      	str	r3, [r1, #20]
	flash_wait();
    e49c:	f7ff be96 	b.w	e1cc <flash_wait>
    e4a0:	402a8000 	.word	0x402a8000
    e4a4:	5af05af0 	.word	0x5af05af0
    e4a8:	08180420 	.word	0x08180420
    e4ac:	00fff000 	.word	0x00fff000

0000e4b0 <eeprom_write_byte>:
	if (addr > E2END) return;
    e4b0:	f241 03bb 	movw	r3, #4283	; 0x10bb
    e4b4:	4298      	cmp	r0, r3
    e4b6:	f200 8089 	bhi.w	e5cc <eeprom_write_byte+0x11c>
	if (!initialized) eeprom_initialize();
    e4ba:	4b46      	ldr	r3, [pc, #280]	; (e5d4 <eeprom_write_byte+0x124>)
{
    e4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
    e4c0:	781b      	ldrb	r3, [r3, #0]
{
    e4c2:	b0c2      	sub	sp, #264	; 0x108
    e4c4:	4605      	mov	r5, r0
    e4c6:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d07c      	beq.n	e5c6 <eeprom_write_byte+0x116>
	sector = (addr >> 2) % FLASH_SECTORS; 
    e4cc:	08ab      	lsrs	r3, r5, #2
    e4ce:	4e42      	ldr	r6, [pc, #264]	; (e5d8 <eeprom_write_byte+0x128>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    e4d0:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
    e4d4:	4f41      	ldr	r7, [pc, #260]	; (e5dc <eeprom_write_byte+0x12c>)
	sector = (addr >> 2) % FLASH_SECTORS; 
    e4d6:	fba6 2603 	umull	r2, r6, r6, r3
    e4da:	1b9a      	subs	r2, r3, r6
    e4dc:	eb06 0652 	add.w	r6, r6, r2, lsr #1
    e4e0:	0976      	lsrs	r6, r6, #5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    e4e2:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    e4e6:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
    e4ea:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e4ec:	4b3c      	ldr	r3, [pc, #240]	; (e5e0 <eeprom_write_byte+0x130>)
	end = p + sector_index[sector];
    e4ee:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e4f2:	4433      	add	r3, r6
	end = p + sector_index[sector];
    e4f4:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e4f6:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
    e4fa:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
    e4fe:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
    e502:	d964      	bls.n	e5ce <eeprom_write_byte+0x11e>
    e504:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
    e506:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
    e50a:	881a      	ldrh	r2, [r3, #0]
    e50c:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
    e50e:	b2d1      	uxtb	r1, r2
    e510:	42a9      	cmp	r1, r5
    e512:	bf08      	it	eq
    e514:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
    e518:	4298      	cmp	r0, r3
    e51a:	d8f6      	bhi.n	e50a <eeprom_write_byte+0x5a>
	if (data == olddata) return;
    e51c:	45e1      	cmp	r9, ip
    e51e:	d041      	beq.n	e5a4 <eeprom_write_byte+0xf4>
	if (sector_index[sector] < 2048) {
    e520:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    e524:	d341      	bcc.n	e5aa <eeprom_write_byte+0xfa>
		memset(buf, 0xFF, sizeof(buf));
    e526:	ac02      	add	r4, sp, #8
    e528:	f44f 7280 	mov.w	r2, #256	; 0x100
    e52c:	21ff      	movs	r1, #255	; 0xff
    e52e:	4620      	mov	r0, r4
    e530:	f004 f8fe 	bl	12730 <memset>
		while (p < end) {
    e534:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    e538:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e53c:	4642      	mov	r2, r8
    e53e:	4298      	cmp	r0, r3
    e540:	bf34      	ite	cc
    e542:	2001      	movcc	r0, #1
    e544:	f44f 6000 	movcs.w	r0, #2048	; 0x800
    e548:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
    e54c:	4613      	mov	r3, r2
    e54e:	3202      	adds	r2, #2
    e550:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
    e552:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
    e554:	b2d9      	uxtb	r1, r3
    e556:	ea4f 2313 	mov.w	r3, r3, lsr #8
    e55a:	5463      	strb	r3, [r4, r1]
		while (p < end) {
    e55c:	d1f6      	bne.n	e54c <eeprom_write_byte+0x9c>
		buf[offset] = data;
    e55e:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
    e562:	f10d 0907 	add.w	r9, sp, #7
    e566:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
    e56a:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    e56c:	464c      	mov	r4, r9
    e56e:	4640      	mov	r0, r8
    e570:	f7ff ff42 	bl	e3f8 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    e574:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
    e578:	eb08 0045 	add.w	r0, r8, r5, lsl #1
    e57c:	2202      	movs	r2, #2
    e57e:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    e582:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
    e584:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
    e588:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
    e58c:	d006      	beq.n	e59c <eeprom_write_byte+0xec>
				uint16_t newval = i | (buf[i] << 8);
    e58e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
    e592:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
    e594:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    e598:	f7ff feb8 	bl	e30c <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    e59c:	45a2      	cmp	sl, r4
    e59e:	d1e9      	bne.n	e574 <eeprom_write_byte+0xc4>
		sector_index[sector] = index;
    e5a0:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
    e5a4:	b042      	add	sp, #264	; 0x108
    e5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
    e5aa:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
    e5ae:	a902      	add	r1, sp, #8
    e5b0:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
    e5b2:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
    e5b4:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    e5b8:	f7ff fea8 	bl	e30c <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    e5bc:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
    e5c0:	b042      	add	sp, #264	; 0x108
    e5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
    e5c6:	f7ff fe2f 	bl	e228 <eeprom_initialize>
    e5ca:	e77f      	b.n	e4cc <eeprom_write_byte+0x1c>
    e5cc:	4770      	bx	lr
	uint8_t olddata=0xFF;
    e5ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
    e5d2:	e7a3      	b.n	e51c <eeprom_write_byte+0x6c>
    e5d4:	20016064 	.word	0x20016064
    e5d8:	04104105 	.word	0x04104105
    e5dc:	20015de4 	.word	0x20015de4
    e5e0:	000607c0 	.word	0x000607c0

0000e5e4 <eeprom_write_block>:
	while (len--) {
    e5e4:	b162      	cbz	r2, e600 <eeprom_write_block+0x1c>
{
    e5e6:	b570      	push	{r4, r5, r6, lr}
    e5e8:	4605      	mov	r5, r0
    e5ea:	460c      	mov	r4, r1
    e5ec:	188e      	adds	r6, r1, r2
		eeprom_write_byte(p++, *src++);
    e5ee:	4620      	mov	r0, r4
    e5f0:	3401      	adds	r4, #1
    e5f2:	f815 1b01 	ldrb.w	r1, [r5], #1
    e5f6:	f7ff ff5b 	bl	e4b0 <eeprom_write_byte>
	while (len--) {
    e5fa:	42b4      	cmp	r4, r6
    e5fc:	d1f7      	bne.n	e5ee <eeprom_write_block+0xa>
}
    e5fe:	bd70      	pop	{r4, r5, r6, pc}
    e600:	4770      	bx	lr
    e602:	bf00      	nop

0000e604 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    e604:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    e606:	f7f2 f903 	bl	810 <setup>
	while (1) {
		loop();
    e60a:	f7f1 fe2b 	bl	264 <loop>
		yield();
    e60e:	f001 fdff 	bl	10210 <yield>
	while (1) {
    e612:	e7fa      	b.n	e60a <main+0x6>

0000e614 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    e614:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    e616:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    e61a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    e61e:	d16d      	bne.n	e6fc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e620:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    e622:	d341      	bcc.n	e6a8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e624:	f851 3b04 	ldr.w	r3, [r1], #4
    e628:	f840 3b04 	str.w	r3, [r0], #4
    e62c:	f851 3b04 	ldr.w	r3, [r1], #4
    e630:	f840 3b04 	str.w	r3, [r0], #4
    e634:	f851 3b04 	ldr.w	r3, [r1], #4
    e638:	f840 3b04 	str.w	r3, [r0], #4
    e63c:	f851 3b04 	ldr.w	r3, [r1], #4
    e640:	f840 3b04 	str.w	r3, [r0], #4
    e644:	f851 3b04 	ldr.w	r3, [r1], #4
    e648:	f840 3b04 	str.w	r3, [r0], #4
    e64c:	f851 3b04 	ldr.w	r3, [r1], #4
    e650:	f840 3b04 	str.w	r3, [r0], #4
    e654:	f851 3b04 	ldr.w	r3, [r1], #4
    e658:	f840 3b04 	str.w	r3, [r0], #4
    e65c:	f851 3b04 	ldr.w	r3, [r1], #4
    e660:	f840 3b04 	str.w	r3, [r0], #4
    e664:	f851 3b04 	ldr.w	r3, [r1], #4
    e668:	f840 3b04 	str.w	r3, [r0], #4
    e66c:	f851 3b04 	ldr.w	r3, [r1], #4
    e670:	f840 3b04 	str.w	r3, [r0], #4
    e674:	f851 3b04 	ldr.w	r3, [r1], #4
    e678:	f840 3b04 	str.w	r3, [r0], #4
    e67c:	f851 3b04 	ldr.w	r3, [r1], #4
    e680:	f840 3b04 	str.w	r3, [r0], #4
    e684:	f851 3b04 	ldr.w	r3, [r1], #4
    e688:	f840 3b04 	str.w	r3, [r0], #4
    e68c:	f851 3b04 	ldr.w	r3, [r1], #4
    e690:	f840 3b04 	str.w	r3, [r0], #4
    e694:	f851 3b04 	ldr.w	r3, [r1], #4
    e698:	f840 3b04 	str.w	r3, [r0], #4
    e69c:	f851 3b04 	ldr.w	r3, [r1], #4
    e6a0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e6a4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    e6a6:	d2bd      	bcs.n	e624 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    e6a8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    e6aa:	d311      	bcc.n	e6d0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e6ac:	f851 3b04 	ldr.w	r3, [r1], #4
    e6b0:	f840 3b04 	str.w	r3, [r0], #4
    e6b4:	f851 3b04 	ldr.w	r3, [r1], #4
    e6b8:	f840 3b04 	str.w	r3, [r0], #4
    e6bc:	f851 3b04 	ldr.w	r3, [r1], #4
    e6c0:	f840 3b04 	str.w	r3, [r0], #4
    e6c4:	f851 3b04 	ldr.w	r3, [r1], #4
    e6c8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    e6cc:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    e6ce:	d2ed      	bcs.n	e6ac <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    e6d0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    e6d2:	d305      	bcc.n	e6e0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    e6d4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    e6d8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    e6dc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    e6de:	d2f9      	bcs.n	e6d4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    e6e0:	3204      	adds	r2, #4
	beq	.Ldone
    e6e2:	d008      	beq.n	e6f6 <memcpy+0xe2>

	lsls	r2, r2, #31
    e6e4:	07d2      	lsls	r2, r2, #31
	itt ne
    e6e6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e6e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e6ec:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    e6f0:	d301      	bcc.n	e6f6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    e6f2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    e6f4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e6f6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e6f8:	4770      	bx	lr
    e6fa:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    e6fc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    e6fe:	d313      	bcc.n	e728 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    e700:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    e702:	d08d      	beq.n	e620 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    e704:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    e708:	d08a      	beq.n	e620 <memcpy+0xc>

	rsb	r3, #4
    e70a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    e70e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    e710:	07db      	lsls	r3, r3, #31
	itt ne
    e712:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e714:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e718:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    e71c:	d380      	bcc.n	e620 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    e71e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    e722:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    e726:	e77b      	b.n	e620 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    e728:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    e72a:	d3d9      	bcc.n	e6e0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    e72c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    e72e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    e732:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    e736:	d2f9      	bcs.n	e72c <memcpy+0x118>

	ldrb	r3, [r1]
    e738:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    e73a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    e73c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    e73e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    e740:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    e742:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e744:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e746:	4770      	bx	lr

0000e748 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    e748:	f002 b87a 	b.w	10840 <free>

0000e74c <ultoa>:
	int i=0, j;
    e74c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    e750:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    e752:	4666      	mov	r6, ip
	int i=0, j;
    e754:	2400      	movs	r4, #0
    e756:	e000      	b.n	e75a <ultoa+0xe>
		i++;
    e758:	3401      	adds	r4, #1
		digit = val % radix;
    e75a:	fbb0 f5f2 	udiv	r5, r0, r2
    e75e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e762:	2b09      	cmp	r3, #9
    e764:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    e768:	f103 0330 	add.w	r3, r3, #48	; 0x30
    e76c:	fa5f fe8e 	uxtb.w	lr, lr
    e770:	bf98      	it	ls
    e772:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    e776:	4290      	cmp	r0, r2
		val /= radix;
    e778:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e77a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    e77e:	d2eb      	bcs.n	e758 <ultoa+0xc>
	buf[i + 1] = 0;
    e780:	1c63      	adds	r3, r4, #1
    e782:	2200      	movs	r2, #0
    e784:	18c8      	adds	r0, r1, r3
    e786:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    e788:	b17c      	cbz	r4, e7aa <ultoa+0x5e>
		t = buf[j];
    e78a:	4662      	mov	r2, ip
    e78c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    e790:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    e794:	eba1 030c 	sub.w	r3, r1, ip
    e798:	3202      	adds	r2, #2
		buf[j] = buf[i];
    e79a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    e79e:	3b01      	subs	r3, #1
    e7a0:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    e7a2:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    e7a4:	4423      	add	r3, r4
    e7a6:	429a      	cmp	r2, r3
    e7a8:	dbef      	blt.n	e78a <ultoa+0x3e>
}
    e7aa:	4608      	mov	r0, r1
    e7ac:	bd70      	pop	{r4, r5, r6, pc}
    e7ae:	bf00      	nop

0000e7b0 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    e7b0:	eeb4 0a40 	vcmp.f32	s0, s0
{
    e7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    e7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    e7bc:	4616      	mov	r6, r2
	int awidth = abs(width);
    e7be:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    e7c2:	4607      	mov	r7, r0
    e7c4:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    e7c8:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    e7cc:	eeb0 8a40 	vmov.f32	s16, s0
    e7d0:	b085      	sub	sp, #20
	if (isnanf(val)) {
    e7d2:	f180 8148 	bvs.w	ea66 <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    e7d6:	eef0 7ac0 	vabs.f32	s15, s0
    e7da:	ed9f 7ac5 	vldr	s14, [pc, #788]	; eaf0 <dtostrf+0x340>
    e7de:	eef4 7a47 	vcmp.f32	s15, s14
    e7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e7e6:	dd29      	ble.n	e83c <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    e7e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    e7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e7f0:	f100 80ed 	bmi.w	e9ce <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e7f4:	2a03      	cmp	r2, #3
    e7f6:	f340 8091 	ble.w	e91c <dtostrf+0x16c>
    e7fa:	2303      	movs	r3, #3
		if (width<0) {
    e7fc:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e7fe:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    e802:	f2c0 8085 	blt.w	e910 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    e806:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    e80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e80e:	f100 816a 	bmi.w	eae6 <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e812:	2149      	movs	r1, #73	; 0x49
    e814:	234e      	movs	r3, #78	; 0x4e
    e816:	2046      	movs	r0, #70	; 0x46
    e818:	1cf4      	adds	r4, r6, #3
    e81a:	7031      	strb	r1, [r6, #0]
    e81c:	70b0      	strb	r0, [r6, #2]
    e81e:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    e820:	b122      	cbz	r2, e82c <dtostrf+0x7c>
			*buf++ = ' ';
    e822:	4620      	mov	r0, r4
    e824:	2120      	movs	r1, #32
    e826:	4414      	add	r4, r2
    e828:	f003 ff82 	bl	12730 <memset>
			awidth--;
		}
		*buf = 0;
    e82c:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    e82e:	4620      	mov	r0, r4
		*buf = 0;
    e830:	7023      	strb	r3, [r4, #0]
}
    e832:	b005      	add	sp, #20
    e834:	ecbd 8b02 	vpop	{d8}
    e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    e83c:	4689      	mov	r9, r1
    e83e:	460d      	mov	r5, r1
    e840:	aa02      	add	r2, sp, #8
    e842:	a901      	add	r1, sp, #4
    e844:	4648      	mov	r0, r9
    e846:	f003 fc9f 	bl	12188 <fcvtf>
	if (precision == 0 && decpt == 0) {
    e84a:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    e84e:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    e850:	ea59 030a 	orrs.w	r3, r9, sl
    e854:	d172      	bne.n	e93c <dtostrf+0x18c>
		decpt++;
    e856:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    e858:	7802      	ldrb	r2, [r0, #0]
    e85a:	4ca6      	ldr	r4, [pc, #664]	; (eaf4 <dtostrf+0x344>)
		decpt++;
    e85c:	469a      	mov	sl, r3
    e85e:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    e860:	4ba5      	ldr	r3, [pc, #660]	; (eaf8 <dtostrf+0x348>)
		decpt++;
    e862:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    e864:	2a34      	cmp	r2, #52	; 0x34
    e866:	bf88      	it	hi
    e868:	461c      	movhi	r4, r3
	if (sign) reqd++;
    e86a:	9b02      	ldr	r3, [sp, #8]
    e86c:	2b00      	cmp	r3, #0
    e86e:	d07d      	beq.n	e96c <dtostrf+0x1bc>
    e870:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    e874:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    e878:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    e87c:	f1bb 0f00 	cmp.w	fp, #0
    e880:	f340 80a1 	ble.w	e9c6 <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    e884:	465a      	mov	r2, fp
    e886:	2120      	movs	r1, #32
    e888:	4630      	mov	r0, r6
		e += pad;
    e88a:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    e88c:	f003 ff50 	bl	12730 <memset>
    e890:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    e894:	222d      	movs	r2, #45	; 0x2d
    e896:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    e89a:	f1ba 0f00 	cmp.w	sl, #0
    e89e:	d177      	bne.n	e990 <dtostrf+0x1e0>
    e8a0:	f1b9 0f00 	cmp.w	r9, #0
    e8a4:	d006      	beq.n	e8b4 <dtostrf+0x104>
		*p++ = '0';
    e8a6:	461a      	mov	r2, r3
    e8a8:	2130      	movs	r1, #48	; 0x30
    e8aa:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    e8ae:	212e      	movs	r1, #46	; 0x2e
    e8b0:	7059      	strb	r1, [r3, #1]
    e8b2:	4613      	mov	r3, r2
	while (p < e) {
    e8b4:	42ab      	cmp	r3, r5
    e8b6:	d21f      	bcs.n	e8f8 <dtostrf+0x148>
		*p++ = *s++;
    e8b8:	46a4      	mov	ip, r4
    e8ba:	4619      	mov	r1, r3
    e8bc:	f81c 2b01 	ldrb.w	r2, [ip], #1
    e8c0:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    e8c4:	42a9      	cmp	r1, r5
    e8c6:	d018      	beq.n	e8fa <dtostrf+0x14a>
    e8c8:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    e8ca:	202e      	movs	r0, #46	; 0x2e
    e8cc:	3c01      	subs	r4, #1
    e8ce:	e00b      	b.n	e8e8 <dtostrf+0x138>
    e8d0:	7058      	strb	r0, [r3, #1]
    e8d2:	3302      	adds	r3, #2
		if (p == e) break;
    e8d4:	3c01      	subs	r4, #1
	while (p < e) {
    e8d6:	42ab      	cmp	r3, r5
		*p++ = *s++;
    e8d8:	4619      	mov	r1, r3
	while (p < e) {
    e8da:	d20d      	bcs.n	e8f8 <dtostrf+0x148>
		*p++ = *s++;
    e8dc:	f81c 2b01 	ldrb.w	r2, [ip], #1
    e8e0:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    e8e4:	42a9      	cmp	r1, r5
    e8e6:	d008      	beq.n	e8fa <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    e8e8:	9401      	str	r4, [sp, #4]
    e8ea:	2c00      	cmp	r4, #0
    e8ec:	d0f0      	beq.n	e8d0 <dtostrf+0x120>
    e8ee:	460b      	mov	r3, r1
		if (p == e) break;
    e8f0:	3c01      	subs	r4, #1
	while (p < e) {
    e8f2:	42ab      	cmp	r3, r5
		*p++ = *s++;
    e8f4:	4619      	mov	r1, r3
	while (p < e) {
    e8f6:	d3f1      	bcc.n	e8dc <dtostrf+0x12c>
    e8f8:	461d      	mov	r5, r3
	if (width < 0) {
    e8fa:	2f00      	cmp	r7, #0
    e8fc:	db6b      	blt.n	e9d6 <dtostrf+0x226>
	return buf;
    e8fe:	4634      	mov	r4, r6
	*p = 0;
    e900:	2300      	movs	r3, #0
}
    e902:	4620      	mov	r0, r4
	*p = 0;
    e904:	702b      	strb	r3, [r5, #0]
}
    e906:	b005      	add	sp, #20
    e908:	ecbd 8b02 	vpop	{d8}
    e90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    e910:	b122      	cbz	r2, e91c <dtostrf+0x16c>
				*buf++ = ' ';
    e912:	4630      	mov	r0, r6
    e914:	2120      	movs	r1, #32
    e916:	4416      	add	r6, r2
    e918:	f003 ff0a 	bl	12730 <memset>
		if (val<0) *buf++ = '-';
    e91c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    e920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e924:	f140 80bd 	bpl.w	eaa2 <dtostrf+0x2f2>
    e928:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e92a:	2249      	movs	r2, #73	; 0x49
    e92c:	234e      	movs	r3, #78	; 0x4e
    e92e:	2046      	movs	r0, #70	; 0x46
    e930:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    e932:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e934:	70f0      	strb	r0, [r6, #3]
    e936:	7072      	strb	r2, [r6, #1]
    e938:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    e93a:	e777      	b.n	e82c <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    e93c:	f1ca 0300 	rsb	r3, sl, #0
    e940:	4599      	cmp	r9, r3
    e942:	da57      	bge.n	e9f4 <dtostrf+0x244>
		decpt = -precision;
    e944:	f04f 0801 	mov.w	r8, #1
    e948:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    e94c:	4c69      	ldr	r4, [pc, #420]	; (eaf4 <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    e94e:	45c2      	cmp	sl, r8
		decpt = -precision;
    e950:	4640      	mov	r0, r8
    e952:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    e956:	bfb8      	it	lt
    e958:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    e95c:	f1ba 0f00 	cmp.w	sl, #0
    e960:	d152      	bne.n	ea08 <dtostrf+0x258>
	if (sign) reqd++;
    e962:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    e964:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    e968:	2b00      	cmp	r3, #0
    e96a:	d181      	bne.n	e870 <dtostrf+0xc0>
	pad = width - reqd;
    e96c:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    e970:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    e974:	f1bb 0f00 	cmp.w	fp, #0
    e978:	dd27      	ble.n	e9ca <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    e97a:	465a      	mov	r2, fp
    e97c:	2120      	movs	r1, #32
    e97e:	4630      	mov	r0, r6
		e += pad;
    e980:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    e982:	f003 fed5 	bl	12730 <memset>
    e986:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    e98a:	f1ba 0f00 	cmp.w	sl, #0
    e98e:	d087      	beq.n	e8a0 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    e990:	f1ba 0f00 	cmp.w	sl, #0
    e994:	da8e      	bge.n	e8b4 <dtostrf+0x104>
    e996:	f1b9 0f00 	cmp.w	r9, #0
    e99a:	d08b      	beq.n	e8b4 <dtostrf+0x104>
		*p++ = '0';
    e99c:	4618      	mov	r0, r3
		*p++ = '.';
    e99e:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    e9a0:	2130      	movs	r1, #48	; 0x30
    e9a2:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    e9a6:	705a      	strb	r2, [r3, #1]
    e9a8:	4602      	mov	r2, r0
    e9aa:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    e9ac:	3301      	adds	r3, #1
			*p++ = '0';
    e9ae:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    e9b2:	d1fb      	bne.n	e9ac <dtostrf+0x1fc>
			*p++ = '0';
    e9b4:	f1ba 0f00 	cmp.w	sl, #0
    e9b8:	9301      	str	r3, [sp, #4]
    e9ba:	f1ca 0300 	rsb	r3, sl, #0
    e9be:	bfa8      	it	ge
    e9c0:	2301      	movge	r3, #1
    e9c2:	4403      	add	r3, r0
    e9c4:	e776      	b.n	e8b4 <dtostrf+0x104>
	if (pad > 0) {
    e9c6:	4633      	mov	r3, r6
    e9c8:	e764      	b.n	e894 <dtostrf+0xe4>
    e9ca:	4633      	mov	r3, r6
    e9cc:	e765      	b.n	e89a <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e9ce:	2a04      	cmp	r2, #4
    e9d0:	ddaa      	ble.n	e928 <dtostrf+0x178>
    e9d2:	2304      	movs	r3, #4
    e9d4:	e712      	b.n	e7fc <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    e9d6:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    e9d8:	f1b8 0f00 	cmp.w	r8, #0
    e9dc:	ea6f 0208 	mvn.w	r2, r8
    e9e0:	da8d      	bge.n	e8fe <dtostrf+0x14e>
    e9e2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e9e6:	2120      	movs	r1, #32
    e9e8:	4628      	mov	r0, r5
    e9ea:	3201      	adds	r2, #1
    e9ec:	4415      	add	r5, r2
    e9ee:	f003 fe9f 	bl	12730 <memset>
    e9f2:	e784      	b.n	e8fe <dtostrf+0x14e>
	reqd = strlen(s);
    e9f4:	f004 fa84 	bl	12f00 <strlen>
    e9f8:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    e9fa:	45c2      	cmp	sl, r8
    e9fc:	bfb8      	it	lt
    e9fe:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    ea02:	f1ba 0f00 	cmp.w	sl, #0
    ea06:	d0ac      	beq.n	e962 <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    ea08:	f1ba 0f00 	cmp.w	sl, #0
    ea0c:	f6bf af2d 	bge.w	e86a <dtostrf+0xba>
    ea10:	f1b9 0f00 	cmp.w	r9, #0
    ea14:	f43f af29 	beq.w	e86a <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    ea18:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    ea1c:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    ea20:	4283      	cmp	r3, r0
    ea22:	f4bf af22 	bcs.w	e86a <dtostrf+0xba>
			while (newPrecision > 0) {
    ea26:	f1b9 0f00 	cmp.w	r9, #0
    ea2a:	dd05      	ble.n	ea38 <dtostrf+0x288>
				val *= 10.0f;
    ea2c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    ea30:	3d01      	subs	r5, #1
				val *= 10.0f;
    ea32:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    ea36:	d1fb      	bne.n	ea30 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    ea38:	aa02      	add	r2, sp, #8
    ea3a:	eeb0 0a48 	vmov.f32	s0, s16
    ea3e:	4628      	mov	r0, r5
    ea40:	a903      	add	r1, sp, #12
    ea42:	f003 fba1 	bl	12188 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    ea46:	f8dd a004 	ldr.w	sl, [sp, #4]
    ea4a:	9b03      	ldr	r3, [sp, #12]
    ea4c:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    ea50:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    ea52:	eba3 030a 	sub.w	r3, r3, sl
    ea56:	4293      	cmp	r3, r2
    ea58:	f47f af07 	bne.w	e86a <dtostrf+0xba>
    ea5c:	f10a 0a01 	add.w	sl, sl, #1
    ea60:	f8cd a004 	str.w	sl, [sp, #4]
    ea64:	e701      	b.n	e86a <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    ea66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    ea6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ea6e:	bf4c      	ite	mi
    ea70:	2304      	movmi	r3, #4
    ea72:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    ea74:	4293      	cmp	r3, r2
    ea76:	da22      	bge.n	eabe <dtostrf+0x30e>
		if (width<0) {
    ea78:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    ea7a:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    ea7e:	db18      	blt.n	eab2 <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ea80:	ee10 3a10 	vmov	r3, s0
    ea84:	2b00      	cmp	r3, #0
    ea86:	da02      	bge.n	ea8e <dtostrf+0x2de>
    ea88:	232d      	movs	r3, #45	; 0x2d
    ea8a:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    ea8e:	234e      	movs	r3, #78	; 0x4e
    ea90:	2141      	movs	r1, #65	; 0x41
    ea92:	1cf4      	adds	r4, r6, #3
    ea94:	7033      	strb	r3, [r6, #0]
    ea96:	7071      	strb	r1, [r6, #1]
    ea98:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    ea9a:	2a00      	cmp	r2, #0
    ea9c:	f47f aec1 	bne.w	e822 <dtostrf+0x72>
    eaa0:	e6c4      	b.n	e82c <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    eaa2:	2149      	movs	r1, #73	; 0x49
    eaa4:	224e      	movs	r2, #78	; 0x4e
    eaa6:	2346      	movs	r3, #70	; 0x46
    eaa8:	1cf4      	adds	r4, r6, #3
    eaaa:	7031      	strb	r1, [r6, #0]
    eaac:	7072      	strb	r2, [r6, #1]
    eaae:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    eab0:	e6bc      	b.n	e82c <dtostrf+0x7c>
			while (awidth) {
    eab2:	b122      	cbz	r2, eabe <dtostrf+0x30e>
				*buf++ = ' ';
    eab4:	4630      	mov	r0, r6
    eab6:	2120      	movs	r1, #32
    eab8:	4416      	add	r6, r2
    eaba:	f003 fe39 	bl	12730 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    eabe:	ee18 3a10 	vmov	r3, s16
    eac2:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    eac4:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    eac8:	db05      	blt.n	ead6 <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    eaca:	2241      	movs	r2, #65	; 0x41
    eacc:	1cf4      	adds	r4, r6, #3
    eace:	7033      	strb	r3, [r6, #0]
    ead0:	7072      	strb	r2, [r6, #1]
    ead2:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    ead4:	e6aa      	b.n	e82c <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ead6:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    ead8:	2241      	movs	r2, #65	; 0x41
    eada:	1d34      	adds	r4, r6, #4
    eadc:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    eade:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    eae0:	70b2      	strb	r2, [r6, #2]
    eae2:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    eae4:	e6a2      	b.n	e82c <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    eae6:	232d      	movs	r3, #45	; 0x2d
    eae8:	f806 3b01 	strb.w	r3, [r6], #1
    eaec:	e691      	b.n	e812 <dtostrf+0x62>
    eaee:	bf00      	nop
    eaf0:	7f7fffff 	.word	0x7f7fffff
    eaf4:	20007eb4 	.word	0x20007eb4
    eaf8:	20007eb8 	.word	0x20007eb8

0000eafc <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    eafc:	4a07      	ldr	r2, [pc, #28]	; (eb1c <rtc_get+0x20>)
    eafe:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    eb00:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    eb02:	4619      	mov	r1, r3
    eb04:	4684      	mov	ip, r0
    eb06:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    eb08:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    eb0a:	4299      	cmp	r1, r3
    eb0c:	d1f9      	bne.n	eb02 <rtc_get+0x6>
    eb0e:	4584      	cmp	ip, r0
    eb10:	d1f7      	bne.n	eb02 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    eb12:	0bdb      	lsrs	r3, r3, #15
}
    eb14:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    eb18:	4770      	bx	lr
    eb1a:	bf00      	nop
    eb1c:	400d4000 	.word	0x400d4000

0000eb20 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    eb20:	4910      	ldr	r1, [pc, #64]	; (eb64 <rtc_set+0x44>)
    eb22:	688b      	ldr	r3, [r1, #8]
    eb24:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    eb28:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    eb2a:	688b      	ldr	r3, [r1, #8]
    eb2c:	07db      	lsls	r3, r3, #31
    eb2e:	d4fc      	bmi.n	eb2a <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    eb30:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    eb32:	4a0c      	ldr	r2, [pc, #48]	; (eb64 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    eb34:	f023 0301 	bic.w	r3, r3, #1
    eb38:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    eb3a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    eb3c:	07d9      	lsls	r1, r3, #31
    eb3e:	d4fc      	bmi.n	eb3a <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    eb40:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    eb42:	4908      	ldr	r1, [pc, #32]	; (eb64 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    eb44:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    eb46:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    eb48:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    eb4a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    eb4c:	f043 0301 	orr.w	r3, r3, #1
    eb50:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    eb52:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    eb54:	07db      	lsls	r3, r3, #31
    eb56:	d5fc      	bpl.n	eb52 <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    eb58:	688b      	ldr	r3, [r1, #8]
    eb5a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    eb5e:	608b      	str	r3, [r1, #8]
}
    eb60:	4770      	bx	lr
    eb62:	bf00      	nop
    eb64:	400d4000 	.word	0x400d4000

0000eb68 <unused_interrupt_vector>:
	__disable_irq();
    eb68:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    eb6a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    eb6e:	4c52      	ldr	r4, [pc, #328]	; (ecb8 <unused_interrupt_vector+0x150>)
    eb70:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    eb74:	f01e 0f04 	tst.w	lr, #4
    eb78:	bf0c      	ite	eq
    eb7a:	f3ef 8208 	mrseq	r2, MSP
    eb7e:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    eb82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    eb86:	4e4d      	ldr	r6, [pc, #308]	; (ecbc <unused_interrupt_vector+0x154>)
	while (p < end) {
    eb88:	4d4d      	ldr	r5, [pc, #308]	; (ecc0 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    eb8a:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    eb8e:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    eb92:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    eb96:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    eb9a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    eb9e:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    eba2:	6993      	ldr	r3, [r2, #24]
    eba4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    eba8:	69d3      	ldr	r3, [r2, #28]
    ebaa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    ebae:	f000 f8d1 	bl	ed54 <tempmonGetTemp>
    ebb2:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    ebb6:	f7ff ffa1 	bl	eafc <rtc_get>
	info->len = sizeof(*info) / 4;
    ebba:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    ebbc:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    ebc0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    ebc4:	460b      	mov	r3, r1
    ebc6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    ebca:	493e      	ldr	r1, [pc, #248]	; (ecc4 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    ebcc:	1d30      	adds	r0, r6, #4
    ebce:	405a      	eors	r2, r3
    ebd0:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    ebd2:	f002 0301 	and.w	r3, r2, #1
    ebd6:	3c01      	subs	r4, #1
    ebd8:	fb01 f303 	mul.w	r3, r1, r3
    ebdc:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    ebe0:	d1f7      	bne.n	ebd2 <unused_interrupt_vector+0x6a>
	while (p < end) {
    ebe2:	42a8      	cmp	r0, r5
    ebe4:	d002      	beq.n	ebec <unused_interrupt_vector+0x84>
		crc ^= *p++;
    ebe6:	6873      	ldr	r3, [r6, #4]
    ebe8:	4606      	mov	r6, r0
    ebea:	e7ef      	b.n	ebcc <unused_interrupt_vector+0x64>
	info->crc = crc;
    ebec:	4b32      	ldr	r3, [pc, #200]	; (ecb8 <unused_interrupt_vector+0x150>)
    ebee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    ebf2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ebf6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ebfa:	4930      	ldr	r1, [pc, #192]	; (ecbc <unused_interrupt_vector+0x154>)
    ebfc:	4a32      	ldr	r2, [pc, #200]	; (ecc8 <unused_interrupt_vector+0x160>)
    ebfe:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    ec02:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    ec06:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ec0a:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    ec0e:	4a2f      	ldr	r2, [pc, #188]	; (eccc <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    ec10:	2502      	movs	r5, #2
    ec12:	482f      	ldr	r0, [pc, #188]	; (ecd0 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    ec14:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ec16:	492f      	ldr	r1, [pc, #188]	; (ecd4 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    ec18:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    ec1c:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    ec1e:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    ec20:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ec22:	482d      	ldr	r0, [pc, #180]	; (ecd8 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    ec24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ec28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ec2c:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ec2e:	680b      	ldr	r3, [r1, #0]
    ec30:	4283      	cmp	r3, r0
    ec32:	d83d      	bhi.n	ecb0 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    ec34:	4d26      	ldr	r5, [pc, #152]	; (ecd0 <unused_interrupt_vector+0x168>)
    ec36:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    ec38:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ec3c:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    ec40:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    ec42:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    ec44:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    ec48:	4924      	ldr	r1, [pc, #144]	; (ecdc <unused_interrupt_vector+0x174>)
    ec4a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    ec4e:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    ec52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    ec56:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    ec5a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    ec5e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    ec62:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    ec66:	e001      	b.n	ec6c <unused_interrupt_vector+0x104>
		usb_isr();
    ec68:	f000 f9ca 	bl	f000 <usb_isr>
		if (PIT_TFLG0) {
    ec6c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    ec70:	2b00      	cmp	r3, #0
    ec72:	d0f9      	beq.n	ec68 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    ec74:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    ec76:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    ec7a:	2c4f      	cmp	r4, #79	; 0x4f
    ec7c:	d9f4      	bls.n	ec68 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ec7e:	4b18      	ldr	r3, [pc, #96]	; (ece0 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    ec80:	2002      	movs	r0, #2
    ec82:	4918      	ldr	r1, [pc, #96]	; (ece4 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ec84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    ec88:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ec8c:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ec8e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    ec92:	b93b      	cbnz	r3, eca4 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    ec94:	4814      	ldr	r0, [pc, #80]	; (ece8 <unused_interrupt_vector+0x180>)
    ec96:	4915      	ldr	r1, [pc, #84]	; (ecec <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ec98:	4a0d      	ldr	r2, [pc, #52]	; (ecd0 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    ec9a:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ec9c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    eca0:	2b00      	cmp	r3, #0
    eca2:	d0fa      	beq.n	ec9a <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    eca4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    eca8:	4a11      	ldr	r2, [pc, #68]	; (ecf0 <unused_interrupt_vector+0x188>)
    ecaa:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    ecae:	e7fe      	b.n	ecae <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ecb0:	f7ff f834 	bl	dd1c <set_arm_clock>
    ecb4:	e7be      	b.n	ec34 <unused_interrupt_vector+0xcc>
    ecb6:	bf00      	nop
    ecb8:	2027ff00 	.word	0x2027ff00
    ecbc:	2027ff80 	.word	0x2027ff80
    ecc0:	2027ffa8 	.word	0x2027ffa8
    ecc4:	edb88320 	.word	0xedb88320
    ecc8:	2027ffa0 	.word	0x2027ffa0
    eccc:	400fc000 	.word	0x400fc000
    ecd0:	40084000 	.word	0x40084000
    ecd4:	20008a68 	.word	0x20008a68
    ecd8:	0bcd3d80 	.word	0x0bcd3d80
    ecdc:	00249f00 	.word	0x00249f00
    ece0:	400d9000 	.word	0x400d9000
    ece4:	402e0000 	.word	0x402e0000
    ece8:	400f8000 	.word	0x400f8000
    ecec:	0bad00f1 	.word	0x0bad00f1
    ecf0:	05fa0004 	.word	0x05fa0004

0000ecf4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    ecf4:	490a      	ldr	r1, [pc, #40]	; (ed20 <_sbrk+0x2c>)
    ecf6:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    ecf8:	b138      	cbz	r0, ed0a <_sbrk+0x16>
{
    ecfa:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    ecfc:	1813      	adds	r3, r2, r0
    ecfe:	4809      	ldr	r0, [pc, #36]	; (ed24 <_sbrk+0x30>)
    ed00:	4283      	cmp	r3, r0
    ed02:	d804      	bhi.n	ed0e <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ed04:	4610      	mov	r0, r2
                __brkval = prev + incr;
    ed06:	600b      	str	r3, [r1, #0]
}
    ed08:	bd08      	pop	{r3, pc}
    ed0a:	4610      	mov	r0, r2
    ed0c:	4770      	bx	lr
                        errno = ENOMEM;
    ed0e:	f003 fe9b 	bl	12a48 <__errno>
    ed12:	230c      	movs	r3, #12
                        return (void *)-1;
    ed14:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    ed18:	6003      	str	r3, [r0, #0]
}
    ed1a:	4610      	mov	r0, r2
    ed1c:	bd08      	pop	{r3, pc}
    ed1e:	bf00      	nop
    ed20:	20008e44 	.word	0x20008e44
    ed24:	20280000 	.word	0x20280000

0000ed28 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    ed28:	2000      	movs	r0, #0
    ed2a:	4770      	bx	lr

0000ed2c <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    ed2c:	f04f 30ff 	mov.w	r0, #4294967295
    ed30:	4770      	bx	lr
    ed32:	bf00      	nop

0000ed34 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    ed34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    ed38:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    ed3a:	604b      	str	r3, [r1, #4]
}
    ed3c:	4770      	bx	lr
    ed3e:	bf00      	nop

0000ed40 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    ed40:	2001      	movs	r0, #1
    ed42:	4770      	bx	lr

0000ed44 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    ed44:	f04f 30ff 	mov.w	r0, #4294967295
    ed48:	4770      	bx	lr
    ed4a:	bf00      	nop

0000ed4c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    ed4c:	bf30      	wfi
    ed4e:	e7fd      	b.n	ed4c <abort>

0000ed50 <Panic_Temp_isr>:
  unused_interrupt_vector();
    ed50:	f7ff bf0a 	b.w	eb68 <unused_interrupt_vector>

0000ed54 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    ed54:	4a12      	ldr	r2, [pc, #72]	; (eda0 <tempmonGetTemp+0x4c>)
    ed56:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    ed5a:	075b      	lsls	r3, r3, #29
    ed5c:	d5fb      	bpl.n	ed56 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ed5e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ed62:	4810      	ldr	r0, [pc, #64]	; (eda4 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ed64:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ed68:	490f      	ldr	r1, [pc, #60]	; (eda8 <tempmonGetTemp+0x54>)
    ed6a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ed6e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ed72:	ed91 6a00 	vldr	s12, [r1]
    ed76:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    ed7a:	4a0c      	ldr	r2, [pc, #48]	; (edac <tempmonGetTemp+0x58>)
    ed7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    ed80:	4b0b      	ldr	r3, [pc, #44]	; (edb0 <tempmonGetTemp+0x5c>)
    ed82:	edd2 6a00 	vldr	s13, [r2]
    ed86:	ee77 7ac7 	vsub.f32	s15, s15, s14
    ed8a:	ed93 7a00 	vldr	s14, [r3]
    ed8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    ed92:	ee67 7a86 	vmul.f32	s15, s15, s12
    ed96:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    ed9a:	ee37 0a40 	vsub.f32	s0, s14, s0
    ed9e:	4770      	bx	lr
    eda0:	400d8100 	.word	0x400d8100
    eda4:	20015900 	.word	0x20015900
    eda8:	20015908 	.word	0x20015908
    edac:	2001590c 	.word	0x2001590c
    edb0:	20015904 	.word	0x20015904

0000edb4 <endpoint0_receive>:
{
    edb4:	b430      	push	{r4, r5}
	if (len > 0) {
    edb6:	2900      	cmp	r1, #0
    edb8:	d131      	bne.n	ee1e <endpoint0_receive+0x6a>
    edba:	4c2b      	ldr	r4, [pc, #172]	; (ee68 <endpoint0_receive+0xb4>)
	endpoint0_transfer_ack.next = 1;
    edbc:	4b2b      	ldr	r3, [pc, #172]	; (ee6c <endpoint0_receive+0xb8>)
    edbe:	2101      	movs	r1, #1
    edc0:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    edc2:	b1da      	cbz	r2, edfc <endpoint0_receive+0x48>
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    edc4:	492a      	ldr	r1, [pc, #168]	; (ee70 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    edc6:	2200      	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    edc8:	f248 0580 	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    edcc:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    edd0:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    edd2:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    edd4:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    edd8:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    eddc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    ede0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    ede4:	4313      	orrs	r3, r2
    ede6:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    edea:	4b22      	ldr	r3, [pc, #136]	; (ee74 <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    edec:	4920      	ldr	r1, [pc, #128]	; (ee70 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    edee:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    edf0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    edf4:	2b00      	cmp	r3, #0
    edf6:	d1fb      	bne.n	edf0 <endpoint0_receive+0x3c>
}
    edf8:	bc30      	pop	{r4, r5}
    edfa:	4770      	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    edfc:	491c      	ldr	r1, [pc, #112]	; (ee70 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    edfe:	2580      	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ee00:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ee04:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ee06:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    ee08:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ee0c:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ee10:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    ee14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ee18:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ee1c:	e7e5      	b.n	edea <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ee1e:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ee20:	4b15      	ldr	r3, [pc, #84]	; (ee78 <endpoint0_receive+0xc4>)
    ee22:	2401      	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    ee24:	2500      	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ee26:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ee2a:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    ee2c:	601c      	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ee2e:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ee30:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ee34:	4c0c      	ldr	r4, [pc, #48]	; (ee68 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ee36:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ee38:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    ee3c:	60e5      	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ee3e:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ee40:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ee44:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ee48:	60a3      	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ee4a:	6159      	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    ee4c:	4908      	ldr	r1, [pc, #32]	; (ee70 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ee4e:	6198      	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    ee50:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    ee54:	f043 0301 	orr.w	r3, r3, #1
    ee58:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ee5c:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    ee60:	2b00      	cmp	r3, #0
    ee62:	d1fb      	bne.n	ee5c <endpoint0_receive+0xa8>
    ee64:	e7aa      	b.n	edbc <endpoint0_receive+0x8>
    ee66:	bf00      	nop
    ee68:	20000000 	.word	0x20000000
    ee6c:	20009b00 	.word	0x20009b00
    ee70:	402e0000 	.word	0x402e0000
    ee74:	20015744 	.word	0x20015744
    ee78:	20009b20 	.word	0x20009b20

0000ee7c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    ee7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    ee7e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    ee80:	b11b      	cbz	r3, ee8a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    ee82:	6853      	ldr	r3, [r2, #4]
    ee84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ee88:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    ee8a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    ee8c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    ee8e:	b33c      	cbz	r4, eee0 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    ee90:	4b1a      	ldr	r3, [pc, #104]	; (eefc <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    ee92:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    ee94:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    ee98:	420c      	tst	r4, r1
    ee9a:	d11d      	bne.n	eed8 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    ee9c:	4e18      	ldr	r6, [pc, #96]	; (ef00 <schedule_transfer+0x84>)
    ee9e:	6877      	ldr	r7, [r6, #4]
    eea0:	e004      	b.n	eeac <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    eea2:	6874      	ldr	r4, [r6, #4]
    eea4:	1be4      	subs	r4, r4, r7
    eea6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    eeaa:	d20b      	bcs.n	eec4 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    eeac:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    eeb0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    eeb4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    eeb8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    eebc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    eec0:	0464      	lsls	r4, r4, #17
    eec2:	d5ee      	bpl.n	eea2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    eec4:	400d      	ands	r5, r1
    eec6:	d107      	bne.n	eed8 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    eec8:	4c0c      	ldr	r4, [pc, #48]	; (eefc <schedule_transfer+0x80>)
		endpoint->status = 0;
    eeca:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    eece:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    eed2:	430b      	orrs	r3, r1
    eed4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    eed8:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    eeda:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    eedc:	bcf0      	pop	{r4, r5, r6, r7}
    eede:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    eee0:	4d06      	ldr	r5, [pc, #24]	; (eefc <schedule_transfer+0x80>)
	endpoint->status = 0;
    eee2:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    eee6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    eeea:	430b      	orrs	r3, r1
    eeec:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    eef0:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    eef2:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    eef4:	b662      	cpsie	i
}
    eef6:	bcf0      	pop	{r4, r5, r6, r7}
    eef8:	4770      	bx	lr
    eefa:	bf00      	nop
    eefc:	402e0000 	.word	0x402e0000
    ef00:	e0001000 	.word	0xe0001000

0000ef04 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    ef04:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    ef06:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    ef08:	b19d      	cbz	r5, ef32 <run_callbacks+0x2e>
    ef0a:	4606      	mov	r6, r0
    ef0c:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    ef0e:	2400      	movs	r4, #0
    ef10:	e003      	b.n	ef1a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    ef12:	6812      	ldr	r2, [r2, #0]
		count++;
    ef14:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    ef16:	2a01      	cmp	r2, #1
    ef18:	d00c      	beq.n	ef34 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    ef1a:	6853      	ldr	r3, [r2, #4]
    ef1c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    ef20:	d0f7      	beq.n	ef12 <run_callbacks+0xe>
			ep->first_transfer = t;
    ef22:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    ef24:	b12c      	cbz	r4, ef32 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    ef26:	4628      	mov	r0, r5
		ep->callback_function(first);
    ef28:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    ef2a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    ef2c:	4798      	blx	r3
	while (count) {
    ef2e:	3c01      	subs	r4, #1
    ef30:	d1f9      	bne.n	ef26 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    ef32:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    ef34:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    ef38:	e7f4      	b.n	ef24 <run_callbacks+0x20>
    ef3a:	bf00      	nop

0000ef3c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    ef3c:	b430      	push	{r4, r5}
	if (len > 0) {
    ef3e:	b9d9      	cbnz	r1, ef78 <endpoint0_transmit.constprop.0+0x3c>
    ef40:	4c1f      	ldr	r4, [pc, #124]	; (efc0 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    ef42:	4b20      	ldr	r3, [pc, #128]	; (efc4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    ef44:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ef46:	4a20      	ldr	r2, [pc, #128]	; (efc8 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    ef48:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ef4a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ef4e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    ef50:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    ef52:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ef56:	2480      	movs	r4, #128	; 0x80
    ef58:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ef5a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    ef5e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    ef62:	481a      	ldr	r0, [pc, #104]	; (efcc <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    ef64:	432b      	orrs	r3, r5
    ef66:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    ef6a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    ef6c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    ef70:	2b00      	cmp	r3, #0
    ef72:	d1fb      	bne.n	ef6c <endpoint0_transmit.constprop.0+0x30>
}
    ef74:	bc30      	pop	{r4, r5}
    ef76:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ef78:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ef7a:	4b15      	ldr	r3, [pc, #84]	; (efd0 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ef7c:	4c10      	ldr	r4, [pc, #64]	; (efc0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    ef7e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ef80:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ef84:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    ef86:	4a10      	ldr	r2, [pc, #64]	; (efc8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ef88:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ef8a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    ef8e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ef90:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ef92:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ef96:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ef98:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ef9a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ef9e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    efa2:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    efa4:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    efa6:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    efa8:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    efaa:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    efae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    efb2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    efb6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    efba:	2b00      	cmp	r3, #0
    efbc:	d1fb      	bne.n	efb6 <endpoint0_transmit.constprop.0+0x7a>
    efbe:	e7c0      	b.n	ef42 <endpoint0_transmit.constprop.0+0x6>
    efc0:	20000000 	.word	0x20000000
    efc4:	20009b00 	.word	0x20009b00
    efc8:	402e0000 	.word	0x402e0000
    efcc:	20015744 	.word	0x20015744
    efd0:	20009b20 	.word	0x20009b20

0000efd4 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    efd4:	4908      	ldr	r1, [pc, #32]	; (eff8 <usb_stop_sof_interrupts+0x24>)
    efd6:	2201      	movs	r2, #1
    efd8:	780b      	ldrb	r3, [r1, #0]
    efda:	fa02 f000 	lsl.w	r0, r2, r0
    efde:	ea23 0000 	bic.w	r0, r3, r0
    efe2:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    efe4:	b930      	cbnz	r0, eff4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    efe6:	4a05      	ldr	r2, [pc, #20]	; (effc <usb_stop_sof_interrupts+0x28>)
    efe8:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    efec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    eff0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    eff4:	4770      	bx	lr
    eff6:	bf00      	nop
    eff8:	20016069 	.word	0x20016069
    effc:	402e0000 	.word	0x402e0000

0000f000 <usb_isr>:
{
    f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    f004:	4caa      	ldr	r4, [pc, #680]	; (f2b0 <usb_isr+0x2b0>)
{
    f006:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    f008:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    f00c:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
    f00e:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    f012:	d54f      	bpl.n	f0b4 <usb_isr+0xb4>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    f014:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    f018:	2b00      	cmp	r3, #0
    f01a:	d046      	beq.n	f0aa <usb_isr+0xaa>
    f01c:	4da5      	ldr	r5, [pc, #660]	; (f2b4 <usb_isr+0x2b4>)
    f01e:	f8df 92b0 	ldr.w	r9, [pc, #688]	; f2d0 <usb_isr+0x2d0>
		reply_buffer[0] = usb_configuration;
    f022:	f8df 82c8 	ldr.w	r8, [pc, #712]	; f2ec <usb_isr+0x2ec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    f026:	4fa4      	ldr	r7, [pc, #656]	; (f2b8 <usb_isr+0x2b8>)
			USB1_ENDPTSETUPSTAT = setupstatus;
    f028:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    f02c:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    f030:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    f034:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f038:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    f03c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    f040:	049b      	lsls	r3, r3, #18
    f042:	d5f5      	bpl.n	f030 <usb_isr+0x30>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    f044:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    f048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    f04c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f050:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    f054:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    f058:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    f05c:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    f060:	d1fa      	bne.n	f058 <usb_isr+0x58>
			endpoint0_notify_mask = 0;
    f062:	b291      	uxth	r1, r2
    f064:	f8c9 3000 	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    f068:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    f06c:	f000 81b8 	beq.w	f3e0 <usb_isr+0x3e0>
    f070:	f200 80f3 	bhi.w	f25a <usb_isr+0x25a>
    f074:	f240 3c02 	movw	ip, #770	; 0x302
    f078:	4561      	cmp	r1, ip
    f07a:	f000 81cf 	beq.w	f41c <usb_isr+0x41c>
    f07e:	f200 809a 	bhi.w	f1b6 <usb_isr+0x1b6>
    f082:	2982      	cmp	r1, #130	; 0x82
    f084:	f000 81b4 	beq.w	f3f0 <usb_isr+0x3f0>
    f088:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    f08c:	f040 808a 	bne.w	f1a4 <usb_isr+0x1a4>
		if (endpoint > 7) break;
    f090:	f010 0f78 	tst.w	r0, #120	; 0x78
    f094:	b283      	uxth	r3, r0
    f096:	f000 81f4 	beq.w	f482 <usb_isr+0x482>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    f09a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f09e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    f0a2:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    f0a6:	2b00      	cmp	r3, #0
    f0a8:	d1be      	bne.n	f028 <usb_isr+0x28>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    f0aa:	4a81      	ldr	r2, [pc, #516]	; (f2b0 <usb_isr+0x2b0>)
    f0ac:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    f0b0:	2b00      	cmp	r3, #0
    f0b2:	d142      	bne.n	f13a <usb_isr+0x13a>
	if (status & USB_USBSTS_URI) { // page 3164
    f0b4:	0672      	lsls	r2, r6, #25
    f0b6:	d516      	bpl.n	f0e6 <usb_isr+0xe6>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    f0b8:	4b7d      	ldr	r3, [pc, #500]	; (f2b0 <usb_isr+0x2b0>)
    f0ba:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    f0be:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    f0c2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    f0c6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    f0ca:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    f0ce:	2c00      	cmp	r4, #0
    f0d0:	d1fb      	bne.n	f0ca <usb_isr+0xca>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    f0d2:	f04f 32ff 	mov.w	r2, #4294967295
    f0d6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    f0da:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    f0de:	f000 fe9b 	bl	fe18 <usb_serial_reset>
		endpointN_notify_mask = 0;
    f0e2:	4b76      	ldr	r3, [pc, #472]	; (f2bc <usb_isr+0x2bc>)
    f0e4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    f0e6:	01f4      	lsls	r4, r6, #7
    f0e8:	d503      	bpl.n	f0f2 <usb_isr+0xf2>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    f0ea:	4b75      	ldr	r3, [pc, #468]	; (f2c0 <usb_isr+0x2c0>)
    f0ec:	681b      	ldr	r3, [r3, #0]
    f0ee:	b103      	cbz	r3, f0f2 <usb_isr+0xf2>
    f0f0:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    f0f2:	01b0      	lsls	r0, r6, #6
    f0f4:	d503      	bpl.n	f0fe <usb_isr+0xfe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    f0f6:	4b73      	ldr	r3, [pc, #460]	; (f2c4 <usb_isr+0x2c4>)
    f0f8:	681b      	ldr	r3, [r3, #0]
    f0fa:	b103      	cbz	r3, f0fe <usb_isr+0xfe>
    f0fc:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    f0fe:	0771      	lsls	r1, r6, #29
    f100:	d508      	bpl.n	f114 <usb_isr+0x114>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    f102:	4b6b      	ldr	r3, [pc, #428]	; (f2b0 <usb_isr+0x2b0>)
    f104:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    f108:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    f10c:	d047      	beq.n	f19e <usb_isr+0x19e>
			usb_high_speed = 1;
    f10e:	4b6e      	ldr	r3, [pc, #440]	; (f2c8 <usb_isr+0x2c8>)
    f110:	2201      	movs	r2, #1
    f112:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    f114:	4b66      	ldr	r3, [pc, #408]	; (f2b0 <usb_isr+0x2b0>)
    f116:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    f11a:	061a      	lsls	r2, r3, #24
    f11c:	d50a      	bpl.n	f134 <usb_isr+0x134>
    f11e:	0633      	lsls	r3, r6, #24
    f120:	d508      	bpl.n	f134 <usb_isr+0x134>
		if (usb_reboot_timer) {
    f122:	4a6a      	ldr	r2, [pc, #424]	; (f2cc <usb_isr+0x2cc>)
    f124:	7813      	ldrb	r3, [r2, #0]
    f126:	b12b      	cbz	r3, f134 <usb_isr+0x134>
			if (--usb_reboot_timer == 0) {
    f128:	3b01      	subs	r3, #1
    f12a:	b2db      	uxtb	r3, r3
    f12c:	7013      	strb	r3, [r2, #0]
    f12e:	2b00      	cmp	r3, #0
    f130:	f000 8230 	beq.w	f594 <usb_isr+0x594>
}
    f134:	b003      	add	sp, #12
    f136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    f13a:	4965      	ldr	r1, [pc, #404]	; (f2d0 <usb_isr+0x2d0>)
			USB1_ENDPTCOMPLETE = completestatus;
    f13c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    f140:	6808      	ldr	r0, [r1, #0]
    f142:	4203      	tst	r3, r0
    f144:	f040 81c2 	bne.w	f4cc <usb_isr+0x4cc>
			completestatus &= endpointN_notify_mask;
    f148:	4a5c      	ldr	r2, [pc, #368]	; (f2bc <usb_isr+0x2bc>)
    f14a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    f14c:	401c      	ands	r4, r3
    f14e:	d0b1      	beq.n	f0b4 <usb_isr+0xb4>
				while (tx) {
    f150:	ea5f 4814 	movs.w	r8, r4, lsr #16
    f154:	d010      	beq.n	f178 <usb_isr+0x178>
    f156:	4d57      	ldr	r5, [pc, #348]	; (f2b4 <usb_isr+0x2b4>)
					tx &= ~(1<<p);
    f158:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    f15c:	fa98 f7a8 	rbit	r7, r8
    f160:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    f164:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    f168:	fa09 f707 	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    f16c:	3040      	adds	r0, #64	; 0x40
    f16e:	f7ff fec9 	bl	ef04 <run_callbacks>
				while (tx) {
    f172:	ea38 0807 	bics.w	r8, r8, r7
    f176:	d1f1      	bne.n	f15c <usb_isr+0x15c>
				uint32_t rx = completestatus & 0xffff;
    f178:	b2a4      	uxth	r4, r4
				while(rx) {
    f17a:	2c00      	cmp	r4, #0
    f17c:	d09a      	beq.n	f0b4 <usb_isr+0xb4>
    f17e:	4d4d      	ldr	r5, [pc, #308]	; (f2b4 <usb_isr+0x2b4>)
					rx &= ~(1<<p);
    f180:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    f184:	fa94 f7a4 	rbit	r7, r4
    f188:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    f18c:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    f190:	fa08 f707 	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    f194:	f7ff feb6 	bl	ef04 <run_callbacks>
				while(rx) {
    f198:	43bc      	bics	r4, r7
    f19a:	d1f3      	bne.n	f184 <usb_isr+0x184>
    f19c:	e78a      	b.n	f0b4 <usb_isr+0xb4>
			usb_high_speed = 0;
    f19e:	4a4a      	ldr	r2, [pc, #296]	; (f2c8 <usb_isr+0x2c8>)
    f1a0:	7013      	strb	r3, [r2, #0]
    f1a2:	e7b7      	b.n	f114 <usb_isr+0x114>
	switch (setup.wRequestAndType) {
    f1a4:	2980      	cmp	r1, #128	; 0x80
    f1a6:	f47f af78 	bne.w	f09a <usb_isr+0x9a>
		reply_buffer[0] = 0;
    f1aa:	484a      	ldr	r0, [pc, #296]	; (f2d4 <usb_isr+0x2d4>)
		endpoint0_transmit(reply_buffer, 2, 0);
    f1ac:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    f1ae:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    f1b0:	f7ff fec4 	bl	ef3c <endpoint0_transmit.constprop.0>
		return;
    f1b4:	e775      	b.n	f0a2 <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    f1b6:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    f1ba:	f000 80f4 	beq.w	f3a6 <usb_isr+0x3a6>
    f1be:	f5a1 61d0 	sub.w	r1, r1, #1664	; 0x680
    f1c2:	2901      	cmp	r1, #1
    f1c4:	f63f af69 	bhi.w	f09a <usb_isr+0x9a>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    f1c8:	4b43      	ldr	r3, [pc, #268]	; (f2d8 <usb_isr+0x2d8>)
    f1ca:	6859      	ldr	r1, [r3, #4]
    f1cc:	2900      	cmp	r1, #0
    f1ce:	f43f af64 	beq.w	f09a <usb_isr+0x9a>
    f1d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    f1d6:	fa1f fa80 	uxth.w	sl, r0
    f1da:	e004      	b.n	f1e6 <usb_isr+0x1e6>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    f1dc:	6919      	ldr	r1, [r3, #16]
    f1de:	330c      	adds	r3, #12
    f1e0:	2900      	cmp	r1, #0
    f1e2:	f43f af5a 	beq.w	f09a <usb_isr+0x9a>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    f1e6:	f8b3 c000 	ldrh.w	ip, [r3]
    f1ea:	45f4      	cmp	ip, lr
    f1ec:	d1f6      	bne.n	f1dc <usb_isr+0x1dc>
    f1ee:	885a      	ldrh	r2, [r3, #2]
    f1f0:	4552      	cmp	r2, sl
    f1f2:	d1f3      	bne.n	f1dc <usb_isr+0x1dc>
				if ((setup.wValue >> 8) == 3) {
    f1f4:	ea4f 221e 	mov.w	r2, lr, lsr #8
    f1f8:	2a03      	cmp	r2, #3
    f1fa:	f000 8185 	beq.w	f508 <usb_isr+0x508>
					datalen = list->length;
    f1fe:	f8b3 a008 	ldrh.w	sl, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    f202:	0c00      	lsrs	r0, r0, #16
    f204:	4582      	cmp	sl, r0
    f206:	bf28      	it	cs
    f208:	4682      	movcs	sl, r0
				if (setup.wValue == 0x200) {
    f20a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    f20e:	f040 8181 	bne.w	f514 <usb_isr+0x514>
					if (usb_high_speed) src = usb_config_descriptor_480;
    f212:	4b2d      	ldr	r3, [pc, #180]	; (f2c8 <usb_isr+0x2c8>)
    f214:	4a31      	ldr	r2, [pc, #196]	; (f2dc <usb_isr+0x2dc>)
    f216:	7819      	ldrb	r1, [r3, #0]
    f218:	4b31      	ldr	r3, [pc, #196]	; (f2e0 <usb_isr+0x2e0>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f21a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; f2e4 <usb_isr+0x2e4>
    f21e:	2900      	cmp	r1, #0
    f220:	bf0c      	ite	eq
    f222:	4611      	moveq	r1, r2
    f224:	4619      	movne	r1, r3
    f226:	482f      	ldr	r0, [pc, #188]	; (f2e4 <usb_isr+0x2e4>)
    f228:	4652      	mov	r2, sl
    f22a:	f7ff f9f3 	bl	e614 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f22e:	f02b 031f 	bic.w	r3, fp, #31
	uint32_t end_addr = (uint32_t)addr + size;
    f232:	eb0b 020a 	add.w	r2, fp, sl
	asm("dsb");
    f236:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f23a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f23e:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    f242:	3320      	adds	r3, #32
	} while (location < end_addr);
    f244:	429a      	cmp	r2, r3
    f246:	d8fa      	bhi.n	f23e <usb_isr+0x23e>
	asm("dsb");
    f248:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f24c:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    f250:	4824      	ldr	r0, [pc, #144]	; (f2e4 <usb_isr+0x2e4>)
    f252:	4651      	mov	r1, sl
    f254:	f7ff fe72 	bl	ef3c <endpoint0_transmit.constprop.0>
				return;
    f258:	e723      	b.n	f0a2 <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    f25a:	f242 3c21 	movw	ip, #8993	; 0x2321
    f25e:	4561      	cmp	r1, ip
    f260:	d00d      	beq.n	f27e <usb_isr+0x27e>
    f262:	d877      	bhi.n	f354 <usb_isr+0x354>
    f264:	f242 0c21 	movw	ip, #8225	; 0x2021
    f268:	4561      	cmp	r1, ip
    f26a:	f000 808b 	beq.w	f384 <usb_isr+0x384>
    f26e:	f242 2c21 	movw	ip, #8737	; 0x2221
    f272:	4561      	cmp	r1, ip
    f274:	d13c      	bne.n	f2f0 <usb_isr+0x2f0>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    f276:	b280      	uxth	r0, r0
    f278:	2800      	cmp	r0, #0
    f27a:	f000 80f9 	beq.w	f470 <usb_isr+0x470>
	endpoint0_transfer_ack.next = 1;
    f27e:	4b1a      	ldr	r3, [pc, #104]	; (f2e8 <usb_isr+0x2e8>)
	endpoint0_transfer_ack.pointer0 = 0;
    f280:	2200      	movs	r2, #0
    f282:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    f284:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    f286:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f288:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f28a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f28c:	2280      	movs	r2, #128	; 0x80
    f28e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f290:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f294:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f298:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f29c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f2a0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f2a4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f2a8:	2b00      	cmp	r3, #0
    f2aa:	d1fb      	bne.n	f2a4 <usb_isr+0x2a4>
    f2ac:	e6f9      	b.n	f0a2 <usb_isr+0xa2>
    f2ae:	bf00      	nop
    f2b0:	402e0000 	.word	0x402e0000
    f2b4:	20000000 	.word	0x20000000
    f2b8:	402e01c0 	.word	0x402e01c0
    f2bc:	20015748 	.word	0x20015748
    f2c0:	20016034 	.word	0x20016034
    f2c4:	20016038 	.word	0x20016038
    f2c8:	20016070 	.word	0x20016070
    f2cc:	20016071 	.word	0x20016071
    f2d0:	20015744 	.word	0x20015744
    f2d4:	200158ac 	.word	0x200158ac
    f2d8:	200088a8 	.word	0x200088a8
    f2dc:	600029cc 	.word	0x600029cc
    f2e0:	60002a38 	.word	0x60002a38
    f2e4:	20201000 	.word	0x20201000
    f2e8:	20009b00 	.word	0x20009b00
    f2ec:	2001606f 	.word	0x2001606f
	switch (setup.wRequestAndType) {
    f2f0:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    f2f4:	f47f aed1 	bne.w	f09a <usb_isr+0x9a>
		usb_configuration = setup.wValue;
    f2f8:	f3c2 4207 	ubfx	r2, r2, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    f2fc:	f04f 11c8 	mov.w	r1, #13107400	; 0xc800c8
    f300:	9301      	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    f302:	f888 2000 	strb.w	r2, [r8]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    f306:	4aa6      	ldr	r2, [pc, #664]	; (f5a0 <usb_isr+0x5a0>)
    f308:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    f30c:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    f310:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    f314:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
		usb_serial_configure();
    f318:	f000 fd80 	bl	fe1c <usb_serial_configure>
		usb_mtp_configure();
    f31c:	f000 faaa 	bl	f874 <usb_mtp_configure>
	endpoint0_transfer_ack.next = 1;
    f320:	4aa0      	ldr	r2, [pc, #640]	; (f5a4 <usb_isr+0x5a4>)
    f322:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    f324:	9b01      	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f326:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f328:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f32a:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    f32c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f32e:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f330:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    f334:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f336:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f33a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    f33e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    f342:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    f346:	f8c9 3000 	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    f34a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f34e:	2b00      	cmp	r3, #0
    f350:	d1fb      	bne.n	f34a <usb_isr+0x34a>
    f352:	e6a6      	b.n	f0a2 <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    f354:	f246 4321 	movw	r3, #25633	; 0x6421
    f358:	4299      	cmp	r1, r3
    f35a:	d01f      	beq.n	f39c <usb_isr+0x39c>
    f35c:	f246 73a1 	movw	r3, #26529	; 0x67a1
    f360:	4299      	cmp	r1, r3
    f362:	f47f ae9a 	bne.w	f09a <usb_isr+0x9a>
		if (setup.wLength >= 4) {
    f366:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
    f36a:	f4ff ae96 	bcc.w	f09a <usb_isr+0x9a>
			endpoint0_buffer[2] = usb_mtp_status;
    f36e:	4b8e      	ldr	r3, [pc, #568]	; (f5a8 <usb_isr+0x5a8>)
			endpoint0_buffer[0] = 4;
    f370:	2104      	movs	r1, #4
    f372:	488e      	ldr	r0, [pc, #568]	; (f5ac <usb_isr+0x5ac>)
			endpoint0_buffer[2] = usb_mtp_status;
    f374:	781b      	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    f376:	8001      	strh	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    f378:	7083      	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    f37a:	2320      	movs	r3, #32
    f37c:	70c3      	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    f37e:	f7ff fddd 	bl	ef3c <endpoint0_transmit.constprop.0>
			return;
    f382:	e68e      	b.n	f0a2 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    f384:	0c01      	lsrs	r1, r0, #16
    f386:	2907      	cmp	r1, #7
    f388:	f47f ae87 	bne.w	f09a <usb_isr+0x9a>
			endpoint0_setupdata.bothwords = setupdata;
    f38c:	4b88      	ldr	r3, [pc, #544]	; (f5b0 <usb_isr+0x5b0>)
    f38e:	e9c3 2000 	strd	r2, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    f392:	2201      	movs	r2, #1
    f394:	4885      	ldr	r0, [pc, #532]	; (f5ac <usb_isr+0x5ac>)
    f396:	f7ff fd0d 	bl	edb4 <endpoint0_receive>
			return;
    f39a:	e682      	b.n	f0a2 <usb_isr+0xa2>
		if (setup.wLength == 6) {
    f39c:	0c01      	lsrs	r1, r0, #16
    f39e:	2906      	cmp	r1, #6
    f3a0:	f47f ae7b 	bne.w	f09a <usb_isr+0x9a>
    f3a4:	e7f2      	b.n	f38c <usb_isr+0x38c>
	endpoint0_transfer_ack.next = 1;
    f3a6:	497f      	ldr	r1, [pc, #508]	; (f5a4 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    f3a8:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    f3aa:	608b      	str	r3, [r1, #8]
	endpoint0_transfer_ack.next = 1;
    f3ac:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f3ae:	64a9      	str	r1, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f3b0:	600b      	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f3b2:	2380      	movs	r3, #128	; 0x80
    f3b4:	604b      	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f3b6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f3ba:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f3be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f3c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f3c6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f3ca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f3ce:	2b00      	cmp	r3, #0
    f3d0:	d1fb      	bne.n	f3ca <usb_isr+0x3ca>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    f3d2:	0c13      	lsrs	r3, r2, #16
    f3d4:	065b      	lsls	r3, r3, #25
    f3d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    f3da:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    f3de:	e660      	b.n	f0a2 <usb_isr+0xa2>
		reply_buffer[0] = usb_configuration;
    f3e0:	4874      	ldr	r0, [pc, #464]	; (f5b4 <usb_isr+0x5b4>)
		endpoint0_transmit(reply_buffer, 1, 0);
    f3e2:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    f3e4:	f898 3000 	ldrb.w	r3, [r8]
    f3e8:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    f3ea:	f7ff fda7 	bl	ef3c <endpoint0_transmit.constprop.0>
		return;
    f3ee:	e658      	b.n	f0a2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    f3f0:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    f3f2:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    f3f6:	f47f ae50 	bne.w	f09a <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    f3fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    f3fe:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    f402:	4a6c      	ldr	r2, [pc, #432]	; (f5b4 <usb_isr+0x5b4>)
    f404:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    f406:	0618      	lsls	r0, r3, #24
    f408:	d47b      	bmi.n	f502 <usb_isr+0x502>
    f40a:	07cb      	lsls	r3, r1, #31
    f40c:	d501      	bpl.n	f412 <usb_isr+0x412>
			reply_buffer[0] = 1;
    f40e:	2301      	movs	r3, #1
    f410:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    f412:	2102      	movs	r1, #2
    f414:	4867      	ldr	r0, [pc, #412]	; (f5b4 <usb_isr+0x5b4>)
    f416:	f7ff fd91 	bl	ef3c <endpoint0_transmit.constprop.0>
		return;
    f41a:	e642      	b.n	f0a2 <usb_isr+0xa2>
		if (endpoint > 7) break;
    f41c:	f010 0f78 	tst.w	r0, #120	; 0x78
    f420:	b283      	uxth	r3, r0
    f422:	f47f ae3a 	bne.w	f09a <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    f426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    f42a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    f42e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    f432:	bf14      	ite	ne
    f434:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    f438:	f043 0301 	orreq.w	r3, r3, #1
    f43c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    f440:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    f442:	4b58      	ldr	r3, [pc, #352]	; (f5a4 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    f444:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    f446:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    f448:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f44a:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f44c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f44e:	2280      	movs	r2, #128	; 0x80
    f450:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f452:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f456:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f45a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f45e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f462:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f466:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f46a:	2b00      	cmp	r3, #0
    f46c:	d1fb      	bne.n	f466 <usb_isr+0x466>
    f46e:	e618      	b.n	f0a2 <usb_isr+0xa2>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f470:	4b51      	ldr	r3, [pc, #324]	; (f5b8 <usb_isr+0x5b8>)
			usb_cdc_line_rtsdtr = setup.wValue;
    f472:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f476:	6819      	ldr	r1, [r3, #0]
    f478:	4b50      	ldr	r3, [pc, #320]	; (f5bc <usb_isr+0x5bc>)
    f47a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    f47c:	4b50      	ldr	r3, [pc, #320]	; (f5c0 <usb_isr+0x5c0>)
    f47e:	701a      	strb	r2, [r3, #0]
    f480:	e6fd      	b.n	f27e <usb_isr+0x27e>
		endpoint = setup.wIndex & 0x7F;
    f482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    f486:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    f48a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    f48e:	bf14      	ite	ne
    f490:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    f494:	f023 0301 	biceq.w	r3, r3, #1
    f498:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    f49c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    f49e:	4b41      	ldr	r3, [pc, #260]	; (f5a4 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    f4a0:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    f4a2:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    f4a4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f4a6:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f4a8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f4aa:	2280      	movs	r2, #128	; 0x80
    f4ac:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f4ae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f4b2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f4b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f4ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f4be:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f4c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f4c6:	2b00      	cmp	r3, #0
    f4c8:	d1fb      	bne.n	f4c2 <usb_isr+0x4c2>
    f4ca:	e5ea      	b.n	f0a2 <usb_isr+0xa2>
				endpoint0_notify_mask = 0;
    f4cc:	2000      	movs	r0, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    f4ce:	f242 0421 	movw	r4, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    f4d2:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    f4d4:	4936      	ldr	r1, [pc, #216]	; (f5b0 <usb_isr+0x5b0>)
    f4d6:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    f4d8:	8809      	ldrh	r1, [r1, #0]
    f4da:	42a1      	cmp	r1, r4
    f4dc:	d02f      	beq.n	f53e <usb_isr+0x53e>
	if (setup.wRequestAndType == 0x6421) {
    f4de:	f246 4221 	movw	r2, #25633	; 0x6421
    f4e2:	4291      	cmp	r1, r2
    f4e4:	f47f ae30 	bne.w	f148 <usb_isr+0x148>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    f4e8:	4a30      	ldr	r2, [pc, #192]	; (f5ac <usb_isr+0x5ac>)
    f4ea:	7811      	ldrb	r1, [r2, #0]
    f4ec:	2901      	cmp	r1, #1
    f4ee:	f47f ae2b 	bne.w	f148 <usb_isr+0x148>
    f4f2:	7852      	ldrb	r2, [r2, #1]
    f4f4:	2a40      	cmp	r2, #64	; 0x40
    f4f6:	f47f ae27 	bne.w	f148 <usb_isr+0x148>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    f4fa:	4a2b      	ldr	r2, [pc, #172]	; (f5a8 <usb_isr+0x5a8>)
    f4fc:	2119      	movs	r1, #25
    f4fe:	7011      	strb	r1, [r2, #0]
    f500:	e622      	b.n	f148 <usb_isr+0x148>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    f502:	03c9      	lsls	r1, r1, #15
    f504:	d483      	bmi.n	f40e <usb_isr+0x40e>
    f506:	e784      	b.n	f412 <usb_isr+0x412>
				if (datalen > setup.wLength) datalen = setup.wLength;
    f508:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    f50a:	f891 a000 	ldrb.w	sl, [r1]
    f50e:	4582      	cmp	sl, r0
    f510:	bf28      	it	cs
    f512:	4682      	movcs	sl, r0
				} else if (setup.wValue == 0x700) {
    f514:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    f518:	d135      	bne.n	f586 <usb_isr+0x586>
					if (usb_high_speed) src = usb_config_descriptor_12;
    f51a:	4b2a      	ldr	r3, [pc, #168]	; (f5c4 <usb_isr+0x5c4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f51c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; f5dc <usb_isr+0x5dc>
					if (usb_high_speed) src = usb_config_descriptor_12;
    f520:	7819      	ldrb	r1, [r3, #0]
    f522:	4a29      	ldr	r2, [pc, #164]	; (f5c8 <usb_isr+0x5c8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f524:	4658      	mov	r0, fp
					if (usb_high_speed) src = usb_config_descriptor_12;
    f526:	4b29      	ldr	r3, [pc, #164]	; (f5cc <usb_isr+0x5cc>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f528:	2900      	cmp	r1, #0
    f52a:	bf0c      	ite	eq
    f52c:	4611      	moveq	r1, r2
    f52e:	4619      	movne	r1, r3
    f530:	4652      	mov	r2, sl
    f532:	f7ff f86f 	bl	e614 <memcpy>
					usb_descriptor_buffer[1] = 7;
    f536:	2307      	movs	r3, #7
    f538:	f88b 3001 	strb.w	r3, [fp, #1]
    f53c:	e677      	b.n	f22e <usb_isr+0x22e>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    f53e:	b280      	uxth	r0, r0
    f540:	2800      	cmp	r0, #0
    f542:	f47f ae01 	bne.w	f148 <usb_isr+0x148>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    f546:	4919      	ldr	r1, [pc, #100]	; (f5ac <usb_isr+0x5ac>)
    f548:	4c21      	ldr	r4, [pc, #132]	; (f5d0 <usb_isr+0x5d0>)
    f54a:	c903      	ldmia	r1, {r0, r1}
    f54c:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    f54e:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    f550:	ea4f 4111 	mov.w	r1, r1, lsr #16
    f554:	6020      	str	r0, [r4, #0]
    f556:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    f558:	f47f adf6 	bne.w	f148 <usb_isr+0x148>
	__disable_irq();
    f55c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    f55e:	481d      	ldr	r0, [pc, #116]	; (f5d4 <usb_isr+0x5d4>)
    f560:	7801      	ldrb	r1, [r0, #0]
    f562:	f041 0108 	orr.w	r1, r1, #8
    f566:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    f568:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    f56c:	060d      	lsls	r5, r1, #24
    f56e:	d405      	bmi.n	f57c <usb_isr+0x57c>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    f570:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    f572:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    f574:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    f578:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    f57c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    f57e:	4a16      	ldr	r2, [pc, #88]	; (f5d8 <usb_isr+0x5d8>)
    f580:	2150      	movs	r1, #80	; 0x50
    f582:	7011      	strb	r1, [r2, #0]
    f584:	e5e0      	b.n	f148 <usb_isr+0x148>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    f586:	f8df b054 	ldr.w	fp, [pc, #84]	; f5dc <usb_isr+0x5dc>
    f58a:	4652      	mov	r2, sl
    f58c:	4658      	mov	r0, fp
    f58e:	f7ff f841 	bl	e614 <memcpy>
    f592:	e64c      	b.n	f22e <usb_isr+0x22e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    f594:	2003      	movs	r0, #3
    f596:	f7ff fd1d 	bl	efd4 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    f59a:	f00b fee5 	bl	1b368 <___reboot_Teensyduino__veneer>
    f59e:	bf00      	nop
    f5a0:	00cc0002 	.word	0x00cc0002
    f5a4:	20009b00 	.word	0x20009b00
    f5a8:	20009427 	.word	0x20009427
    f5ac:	2001573c 	.word	0x2001573c
    f5b0:	2000b200 	.word	0x2000b200
    f5b4:	200158ac 	.word	0x200158ac
    f5b8:	20016020 	.word	0x20016020
    f5bc:	20016030 	.word	0x20016030
    f5c0:	2001606e 	.word	0x2001606e
    f5c4:	20016070 	.word	0x20016070
    f5c8:	60002a38 	.word	0x60002a38
    f5cc:	600029cc 	.word	0x600029cc
    f5d0:	20016028 	.word	0x20016028
    f5d4:	20016069 	.word	0x20016069
    f5d8:	20016071 	.word	0x20016071
    f5dc:	20201000 	.word	0x20201000

0000f5e0 <usb_config_rx>:
{
    f5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f5e4:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    f5e6:	1e83      	subs	r3, r0, #2
    f5e8:	2b03      	cmp	r3, #3
    f5ea:	d901      	bls.n	f5f0 <usb_config_rx+0x10>
}
    f5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f5f0:	f8df 904c 	ldr.w	r9, [pc, #76]	; f640 <usb_config_rx+0x60>
    f5f4:	4615      	mov	r5, r2
    f5f6:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    f5f8:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f5fa:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    f5fe:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f600:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    f604:	2100      	movs	r1, #0
    f606:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f60a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    f60c:	f003 f890 	bl	12730 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f610:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    f614:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f616:	0952      	lsrs	r2, r2, #5
    f618:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    f61c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    f620:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    f624:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    f628:	2f00      	cmp	r7, #0
    f62a:	d0df      	beq.n	f5ec <usb_config_rx+0xc>
    f62c:	4a03      	ldr	r2, [pc, #12]	; (f63c <usb_config_rx+0x5c>)
    f62e:	40b3      	lsls	r3, r6
    f630:	6811      	ldr	r1, [r2, #0]
    f632:	430b      	orrs	r3, r1
    f634:	6013      	str	r3, [r2, #0]
}
    f636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f63a:	bf00      	nop
    f63c:	20015748 	.word	0x20015748
    f640:	20000000 	.word	0x20000000

0000f644 <usb_config_tx>:
{
    f644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f648:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    f64a:	1e81      	subs	r1, r0, #2
    f64c:	2903      	cmp	r1, #3
    f64e:	d901      	bls.n	f654 <usb_config_tx+0x10>
}
    f650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    f654:	01c7      	lsls	r7, r0, #7
    f656:	f8df 904c 	ldr.w	r9, [pc, #76]	; f6a4 <usb_config_tx+0x60>
    f65a:	4692      	mov	sl, r2
    f65c:	4604      	mov	r4, r0
    f65e:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    f660:	223c      	movs	r2, #60	; 0x3c
    f662:	2100      	movs	r1, #0
    f664:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    f666:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f66a:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    f66c:	f108 0004 	add.w	r0, r8, #4
    f670:	f003 f85e 	bl	12730 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f674:	faba f28a 	clz	r2, sl
    f678:	0952      	lsrs	r2, r2, #5
    f67a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    f67e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    f682:	2201      	movs	r2, #1
	qh->callback_function = callback;
    f684:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    f688:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    f68c:	2e00      	cmp	r6, #0
    f68e:	d0df      	beq.n	f650 <usb_config_tx+0xc>
    f690:	4b03      	ldr	r3, [pc, #12]	; (f6a0 <usb_config_tx+0x5c>)
    f692:	3410      	adds	r4, #16
    f694:	6819      	ldr	r1, [r3, #0]
    f696:	40a2      	lsls	r2, r4
    f698:	430a      	orrs	r2, r1
    f69a:	601a      	str	r2, [r3, #0]
}
    f69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f6a0:	20015748 	.word	0x20015748
    f6a4:	20000000 	.word	0x20000000

0000f6a8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    f6a8:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    f6aa:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    f6ac:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    f6ae:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    f6b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    f6b6:	b410      	push	{r4}
	transfer->next = 1;
    f6b8:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    f6ba:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    f6bc:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    f6c0:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    f6c2:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    f6c6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    f6ca:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    f6cc:	6181      	str	r1, [r0, #24]
}
    f6ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    f6d2:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    f6d6:	4770      	bx	lr

0000f6d8 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f6d8:	1e83      	subs	r3, r0, #2
{
    f6da:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f6dc:	2b03      	cmp	r3, #3
    f6de:	d900      	bls.n	f6e2 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    f6e0:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    f6e2:	4b06      	ldr	r3, [pc, #24]	; (f6fc <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    f6e4:	f100 0110 	add.w	r1, r0, #16
    f6e8:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    f6ec:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    f6f0:	fa0c f101 	lsl.w	r1, ip, r1
    f6f4:	3040      	adds	r0, #64	; 0x40
    f6f6:	f7ff bbc1 	b.w	ee7c <schedule_transfer>
    f6fa:	bf00      	nop
    f6fc:	20000000 	.word	0x20000000

0000f700 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f700:	1e83      	subs	r3, r0, #2
{
    f702:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f704:	2b03      	cmp	r3, #3
    f706:	d900      	bls.n	f70a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    f708:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    f70a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    f70c:	4b02      	ldr	r3, [pc, #8]	; (f718 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    f70e:	4081      	lsls	r1, r0
    f710:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    f714:	f7ff bbb2 	b.w	ee7c <schedule_transfer>
    f718:	20000000 	.word	0x20000000

0000f71c <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    f71c:	4a08      	ldr	r2, [pc, #32]	; (f740 <usb_transfer_status+0x24>)
    f71e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    f722:	b672      	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    f724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f728:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    f72c:	6841      	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    f72e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    f732:	b662      	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    f734:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    f738:	d0f3      	beq.n	f722 <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    f73a:	4608      	mov	r0, r1
    f73c:	4770      	bx	lr
    f73e:	bf00      	nop
    f740:	402e0000 	.word	0x402e0000

0000f744 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f744:	4a12      	ldr	r2, [pc, #72]	; (f790 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    f746:	4b13      	ldr	r3, [pc, #76]	; (f794 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f748:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    f74c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    f750:	4298      	cmp	r0, r3
{
    f752:	b510      	push	{r4, lr}
    f754:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    f756:	d202      	bcs.n	f75e <usb_init_serialnumber+0x1a>
    f758:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f75c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    f75e:	4c0e      	ldr	r4, [pc, #56]	; (f798 <usb_init_serialnumber+0x54>)
    f760:	a901      	add	r1, sp, #4
    f762:	220a      	movs	r2, #10
    f764:	f7fe fff2 	bl	e74c <ultoa>
	for (i=0; i<10; i++) {
    f768:	a901      	add	r1, sp, #4
    f76a:	2300      	movs	r3, #0
    f76c:	4620      	mov	r0, r4
		char c = buf[i];
    f76e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    f772:	3301      	adds	r3, #1
		if (!c) break;
    f774:	b13a      	cbz	r2, f786 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    f776:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    f778:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    f77c:	d1f7      	bne.n	f76e <usb_init_serialnumber+0x2a>
    f77e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f780:	7023      	strb	r3, [r4, #0]
}
    f782:	b004      	add	sp, #16
    f784:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f786:	005b      	lsls	r3, r3, #1
    f788:	b2db      	uxtb	r3, r3
    f78a:	7023      	strb	r3, [r4, #0]
}
    f78c:	b004      	add	sp, #16
    f78e:	bd10      	pop	{r4, pc}
    f790:	401f4400 	.word	0x401f4400
    f794:	00989680 	.word	0x00989680
    f798:	20009400 	.word	0x20009400

0000f79c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    f79c:	f000 bc5c 	b.w	10058 <usb_serial_flush_input>

0000f7a0 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    f7a0:	f000 bc4e 	b.w	10040 <usb_serial_available>

0000f7a4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    f7a4:	f000 bcea 	b.w	1017c <usb_serial_flush_output>

0000f7a8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    f7a8:	f000 bcc0 	b.w	1012c <usb_serial_write_buffer_free>

0000f7ac <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    f7ac:	4608      	mov	r0, r1
    f7ae:	4611      	mov	r1, r2
    f7b0:	f000 bcb0 	b.w	10114 <usb_serial_write>

0000f7b4 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    f7b4:	4a02      	ldr	r2, [pc, #8]	; (f7c0 <txEvent_event+0xc>)
    f7b6:	6813      	ldr	r3, [r2, #0]
    f7b8:	3301      	adds	r3, #1
    f7ba:	6013      	str	r3, [r2, #0]
    f7bc:	4770      	bx	lr
    f7be:	bf00      	nop
    f7c0:	200157fc 	.word	0x200157fc

0000f7c4 <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    f7c4:	4a0e      	ldr	r2, [pc, #56]	; (f800 <rx_event+0x3c>)
{
    f7c6:	b410      	push	{r4}
	uint32_t head = rx_head;
    f7c8:	7813      	ldrb	r3, [r2, #0]
	int i = t->callback_param;
    f7ca:	69c4      	ldr	r4, [r0, #28]
	if (++head > RX_NUM) head = 0;
    f7cc:	3301      	adds	r3, #1
    f7ce:	2b04      	cmp	r3, #4
    f7d0:	d811      	bhi.n	f7f6 <rx_event+0x32>
	rx_list[head] = i;
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	rx_list_transfer_len[head] = len;
	rx_head = head;
    f7d2:	fa5f fc83 	uxtb.w	ip, r3
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f7d6:	6841      	ldr	r1, [r0, #4]
	rx_head = head;
    f7d8:	f882 c000 	strb.w	ip, [r2]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f7dc:	4a09      	ldr	r2, [pc, #36]	; (f804 <rx_event+0x40>)
    f7de:	f3c1 410e 	ubfx	r1, r1, #16, #15
	rx_list_transfer_len[head] = len;
    f7e2:	4809      	ldr	r0, [pc, #36]	; (f808 <rx_event+0x44>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f7e4:	8812      	ldrh	r2, [r2, #0]
    f7e6:	1a52      	subs	r2, r2, r1
	rx_list[head] = i;
    f7e8:	4908      	ldr	r1, [pc, #32]	; (f80c <rx_event+0x48>)
    f7ea:	54cc      	strb	r4, [r1, r3]
}
    f7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	rx_list_transfer_len[head] = len;
    f7f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    f7f4:	4770      	bx	lr
    f7f6:	f04f 0c00 	mov.w	ip, #0
	if (++head > RX_NUM) head = 0;
    f7fa:	4663      	mov	r3, ip
    f7fc:	e7eb      	b.n	f7d6 <rx_event+0x12>
    f7fe:	bf00      	nop
    f800:	20016065 	.word	0x20016065
    f804:	2001604c 	.word	0x2001604c
    f808:	200158ec 	.word	0x200158ec
    f80c:	200158d8 	.word	0x200158d8

0000f810 <rx_queue_transfer>:
{
    f810:	b570      	push	{r4, r5, r6, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    f812:	4915      	ldr	r1, [pc, #84]	; (f868 <rx_queue_transfer+0x58>)
{
    f814:	4603      	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    f816:	4d15      	ldr	r5, [pc, #84]	; (f86c <rx_queue_transfer+0x5c>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    f818:	eb01 2140 	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    f81c:	f8b5 c000 	ldrh.w	ip, [r5]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f820:	460a      	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    f822:	448c      	add	ip, r1
	asm("dsb");
    f824:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    f828:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    f82c:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    f830:	3220      	adds	r2, #32
	} while (location < end_addr);
    f832:	4594      	cmp	ip, r2
    f834:	d8fa      	bhi.n	f82c <rx_queue_transfer+0x1c>
	asm("dsb");
    f836:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f83a:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f83e:	882a      	ldrh	r2, [r5, #0]
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f840:	f44f 3600 	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f844:	4d0a      	ldr	r5, [pc, #40]	; (f870 <rx_queue_transfer+0x60>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f846:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f84a:	eb05 1543 	add.w	r5, r5, r3, lsl #5
    f84e:	4628      	mov	r0, r5
    f850:	f7ff ff2a 	bl	f6a8 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    f854:	4629      	mov	r1, r5
    f856:	2004      	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f858:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    f85c:	f7ff ff50 	bl	f700 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    f860:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
}
    f864:	bd70      	pop	{r4, r5, r6, pc}
    f866:	bf00      	nop
    f868:	20201080 	.word	0x20201080
    f86c:	2001604c 	.word	0x2001604c
    f870:	2000af80 	.word	0x2000af80

0000f874 <usb_mtp_configure>:
	if (usb_high_speed) {
    f874:	4b1f      	ldr	r3, [pc, #124]	; (f8f4 <usb_mtp_configure+0x80>)
{
    f876:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    f878:	781b      	ldrb	r3, [r3, #0]
    f87a:	2b00      	cmp	r3, #0
    f87c:	d037      	beq.n	f8ee <usb_mtp_configure+0x7a>
    f87e:	f44f 7300 	mov.w	r3, #512	; 0x200
    f882:	461e      	mov	r6, r3
		tx_packet_size = MTP_TX_SIZE_480;
    f884:	491c      	ldr	r1, [pc, #112]	; (f8f8 <usb_mtp_configure+0x84>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f886:	2280      	movs	r2, #128	; 0x80
		rx_packet_size = MTP_RX_SIZE_480;
    f888:	4d1c      	ldr	r5, [pc, #112]	; (f8fc <usb_mtp_configure+0x88>)
	tx_head = 0;
    f88a:	2400      	movs	r4, #0
		tx_packet_size = MTP_TX_SIZE_480;
    f88c:	800b      	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f88e:	2100      	movs	r1, #0
    f890:	481b      	ldr	r0, [pc, #108]	; (f900 <usb_mtp_configure+0x8c>)
		rx_packet_size = MTP_RX_SIZE_480;
    f892:	802b      	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f894:	f002 ff4c 	bl	12730 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f898:	2280      	movs	r2, #128	; 0x80
    f89a:	2100      	movs	r1, #0
    f89c:	4819      	ldr	r0, [pc, #100]	; (f904 <usb_mtp_configure+0x90>)
    f89e:	f002 ff47 	bl	12730 <memset>
	rx_head = 0;
    f8a2:	4b19      	ldr	r3, [pc, #100]	; (f908 <usb_mtp_configure+0x94>)
	tx_head = 0;
    f8a4:	4a19      	ldr	r2, [pc, #100]	; (f90c <usb_mtp_configure+0x98>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f8a6:	4631      	mov	r1, r6
	rx_head = 0;
    f8a8:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f8aa:	2004      	movs	r0, #4
	rx_tail = 0;
    f8ac:	4b18      	ldr	r3, [pc, #96]	; (f910 <usb_mtp_configure+0x9c>)
	tx_head = 0;
    f8ae:	7014      	strb	r4, [r2, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f8b0:	4622      	mov	r2, r4
	rx_tail = 0;
    f8b2:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f8b4:	4623      	mov	r3, r4
    f8b6:	f7ff fec5 	bl	f644 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    f8ba:	4622      	mov	r2, r4
    f8bc:	8829      	ldrh	r1, [r5, #0]
    f8be:	2004      	movs	r0, #4
    f8c0:	4b14      	ldr	r3, [pc, #80]	; (f914 <usb_mtp_configure+0xa0>)
    f8c2:	f7ff fe8d 	bl	f5e0 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    f8c6:	4622      	mov	r2, r4
    f8c8:	4b13      	ldr	r3, [pc, #76]	; (f918 <usb_mtp_configure+0xa4>)
    f8ca:	2120      	movs	r1, #32
    f8cc:	2005      	movs	r0, #5
    f8ce:	f7ff feb9 	bl	f644 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    f8d2:	4620      	mov	r0, r4
    f8d4:	f7ff ff9c 	bl	f810 <rx_queue_transfer>
    f8d8:	2001      	movs	r0, #1
    f8da:	f7ff ff99 	bl	f810 <rx_queue_transfer>
    f8de:	2002      	movs	r0, #2
    f8e0:	f7ff ff96 	bl	f810 <rx_queue_transfer>
    f8e4:	2003      	movs	r0, #3
}
    f8e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    f8ea:	f7ff bf91 	b.w	f810 <rx_queue_transfer>
    f8ee:	2340      	movs	r3, #64	; 0x40
    f8f0:	461e      	mov	r6, r3
    f8f2:	e7c7      	b.n	f884 <usb_mtp_configure+0x10>
    f8f4:	20016070 	.word	0x20016070
    f8f8:	20016056 	.word	0x20016056
    f8fc:	2001604c 	.word	0x2001604c
    f900:	2000b100 	.word	0x2000b100
    f904:	2000af80 	.word	0x2000af80
    f908:	20016065 	.word	0x20016065
    f90c:	2001606b 	.word	0x2001606b
    f910:	20016067 	.word	0x20016067
    f914:	0000f7c5 	.word	0x0000f7c5
    f918:	0000f7b5 	.word	0x0000f7b5

0000f91c <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    f91c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    f920:	4e20      	ldr	r6, [pc, #128]	; (f9a4 <usb_mtp_recv+0x88>)
	uint32_t tail = rx_tail;
    f922:	f8df b094 	ldr.w	fp, [pc, #148]	; f9b8 <usb_mtp_recv+0x9c>
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f926:	4f20      	ldr	r7, [pc, #128]	; (f9a8 <usb_mtp_recv+0x8c>)
	uint32_t wait_begin_at = systick_millis_count;
    f928:	f8d6 9000 	ldr.w	r9, [r6]
	uint32_t tail = rx_tail;
    f92c:	f89b 4000 	ldrb.w	r4, [fp]
		if (!usb_configuration) return -1; // usb not enumerated by host
    f930:	783b      	ldrb	r3, [r7, #0]
    f932:	b353      	cbz	r3, f98a <usb_mtp_recv+0x6e>
    f934:	4682      	mov	sl, r0
    f936:	460d      	mov	r5, r1
    f938:	b2e4      	uxtb	r4, r4
    f93a:	f8df 8080 	ldr.w	r8, [pc, #128]	; f9bc <usb_mtp_recv+0xa0>
    f93e:	e008      	b.n	f952 <usb_mtp_recv+0x36>
		if (tail != rx_head) break;
		if (systick_millis_count - wait_begin_at >= timeout)  {
    f940:	6833      	ldr	r3, [r6, #0]
    f942:	eba3 0309 	sub.w	r3, r3, r9
    f946:	42ab      	cmp	r3, r5
    f948:	d224      	bcs.n	f994 <usb_mtp_recv+0x78>
			return 0;
		}
		yield();
    f94a:	f000 fc61 	bl	10210 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    f94e:	783b      	ldrb	r3, [r7, #0]
    f950:	b1db      	cbz	r3, f98a <usb_mtp_recv+0x6e>
		if (tail != rx_head) break;
    f952:	f898 3000 	ldrb.w	r3, [r8]
    f956:	429c      	cmp	r4, r3
    f958:	d0f2      	beq.n	f940 <usb_mtp_recv+0x24>
	}
	if (++tail > RX_NUM) tail = 0;
    f95a:	3401      	adds	r4, #1
    f95c:	2c04      	cmp	r4, #4
    f95e:	d81d      	bhi.n	f99c <usb_mtp_recv+0x80>
	uint32_t i = rx_list[tail];
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;
    f960:	b2e3      	uxtb	r3, r4
    f962:	f88b 3000 	strb.w	r3, [fp]

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    f966:	4650      	mov	r0, sl
	int len = rx_list_transfer_len[tail];
    f968:	4b10      	ldr	r3, [pc, #64]	; (f9ac <usb_mtp_recv+0x90>)
	uint32_t i = rx_list[tail];
    f96a:	4a11      	ldr	r2, [pc, #68]	; (f9b0 <usb_mtp_recv+0x94>)
	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
    f96c:	4911      	ldr	r1, [pc, #68]	; (f9b4 <usb_mtp_recv+0x98>)
	uint32_t i = rx_list[tail];
    f96e:	5d15      	ldrb	r5, [r2, r4]
	int len = rx_list_transfer_len[tail];
    f970:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
	memcpy(buffer,  rx_item_buffer, len);
    f974:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    f978:	4622      	mov	r2, r4
    f97a:	f7fe fe4b 	bl	e614 <memcpy>
	rx_queue_transfer(i);
    f97e:	4628      	mov	r0, r5
    f980:	f7ff ff46 	bl	f810 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    f984:	4620      	mov	r0, r4
    f986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    f98a:	f04f 34ff 	mov.w	r4, #4294967295
}
    f98e:	4620      	mov	r0, r4
    f990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return 0;
    f994:	2400      	movs	r4, #0
}
    f996:	4620      	mov	r0, r4
    f998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f99c:	2300      	movs	r3, #0
	if (++tail > RX_NUM) tail = 0;
    f99e:	461c      	mov	r4, r3
    f9a0:	e7df      	b.n	f962 <usb_mtp_recv+0x46>
    f9a2:	bf00      	nop
    f9a4:	20016020 	.word	0x20016020
    f9a8:	2001606f 	.word	0x2001606f
    f9ac:	200158ec 	.word	0x200158ec
    f9b0:	200158d8 	.word	0x200158d8
    f9b4:	20201080 	.word	0x20201080
    f9b8:	20016067 	.word	0x20016067
    f9bc:	20016065 	.word	0x20016065

0000f9c0 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    f9c0:	4b07      	ldr	r3, [pc, #28]	; (f9e0 <usb_mtp_available+0x20>)
    f9c2:	781b      	ldrb	r3, [r3, #0]
    f9c4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    f9c8:	b14b      	cbz	r3, f9de <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    f9ca:	4a06      	ldr	r2, [pc, #24]	; (f9e4 <usb_mtp_available+0x24>)
    f9cc:	4b06      	ldr	r3, [pc, #24]	; (f9e8 <usb_mtp_available+0x28>)
    f9ce:	7812      	ldrb	r2, [r2, #0]
    f9d0:	781b      	ldrb	r3, [r3, #0]
    f9d2:	429a      	cmp	r2, r3
    f9d4:	d002      	beq.n	f9dc <usb_mtp_available+0x1c>
    f9d6:	4b05      	ldr	r3, [pc, #20]	; (f9ec <usb_mtp_available+0x2c>)
    f9d8:	8818      	ldrh	r0, [r3, #0]
    f9da:	4770      	bx	lr
	if (!usb_configuration) return 0;
    f9dc:	2000      	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    f9de:	4770      	bx	lr
    f9e0:	2001606f 	.word	0x2001606f
    f9e4:	20016065 	.word	0x20016065
    f9e8:	20016067 	.word	0x20016067
    f9ec:	2001604c 	.word	0x2001604c

0000f9f0 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    f9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    f9f4:	f8df b0c0 	ldr.w	fp, [pc, #192]	; fab8 <usb_mtp_send+0xc8>
    f9f8:	4c2a      	ldr	r4, [pc, #168]	; (faa4 <usb_mtp_send+0xb4>)
    f9fa:	f89b 3000 	ldrb.w	r3, [fp]
	uint32_t wait_begin_at = systick_millis_count;
    f9fe:	4e2a      	ldr	r6, [pc, #168]	; (faa8 <usb_mtp_send+0xb8>)

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    fa00:	4f2a      	ldr	r7, [pc, #168]	; (faac <usb_mtp_send+0xbc>)
	transfer_t *xfer = tx_transfer + tx_head;
    fa02:	eb04 1443 	add.w	r4, r4, r3, lsl #5
	uint32_t wait_begin_at = systick_millis_count;
    fa06:	f8d6 8000 	ldr.w	r8, [r6]
		if (!usb_configuration) return -1; // usb not enumerated by host
    fa0a:	783b      	ldrb	r3, [r7, #0]
    fa0c:	2b00      	cmp	r3, #0
    fa0e:	d042      	beq.n	fa96 <usb_mtp_send+0xa6>
    fa10:	4682      	mov	sl, r0
    fa12:	4689      	mov	r9, r1
    fa14:	4615      	mov	r5, r2
    fa16:	e008      	b.n	fa2a <usb_mtp_send+0x3a>
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    fa18:	6833      	ldr	r3, [r6, #0]
    fa1a:	eba3 0308 	sub.w	r3, r3, r8
    fa1e:	42ab      	cmp	r3, r5
    fa20:	d83d      	bhi.n	fa9e <usb_mtp_send+0xae>
		yield();
    fa22:	f000 fbf5 	bl	10210 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    fa26:	783b      	ldrb	r3, [r7, #0]
    fa28:	b3ab      	cbz	r3, fa96 <usb_mtp_send+0xa6>
		uint32_t status = usb_transfer_status(xfer);
    fa2a:	4620      	mov	r0, r4
    fa2c:	f7ff fe76 	bl	f71c <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    fa30:	0603      	lsls	r3, r0, #24
    fa32:	d4f1      	bmi.n	fa18 <usb_mtp_send+0x28>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    fa34:	f89b 3000 	ldrb.w	r3, [fp]
	memcpy(txdata, buffer, len);
    fa38:	464a      	mov	r2, r9
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    fa3a:	4d1d      	ldr	r5, [pc, #116]	; (fab0 <usb_mtp_send+0xc0>)
	memcpy(txdata, buffer, len);
    fa3c:	4651      	mov	r1, sl
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    fa3e:	eb05 2543 	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    fa42:	4628      	mov	r0, r5
    fa44:	f7fe fde6 	bl	e614 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    fa48:	4a1a      	ldr	r2, [pc, #104]	; (fab4 <usb_mtp_send+0xc4>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    fa4a:	462b      	mov	r3, r5
    fa4c:	8812      	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    fa4e:	442a      	add	r2, r5
	asm("dsb");
    fa50:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    fa54:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fa58:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    fa5c:	3320      	adds	r3, #32
	} while (location < end_addr);
    fa5e:	429a      	cmp	r2, r3
    fa60:	d8fa      	bhi.n	fa58 <usb_mtp_send+0x68>
	asm("dsb");
    fa62:	f3bf 8f4f 	dsb	sy
	asm("isb");
    fa66:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    fa6a:	2300      	movs	r3, #0
    fa6c:	4629      	mov	r1, r5
    fa6e:	464a      	mov	r2, r9
    fa70:	4620      	mov	r0, r4
    fa72:	f7ff fe19 	bl	f6a8 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    fa76:	4621      	mov	r1, r4
    fa78:	2004      	movs	r0, #4
    fa7a:	f7ff fe2d 	bl	f6d8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    fa7e:	f89b 3000 	ldrb.w	r3, [fp]
	return len;
    fa82:	4648      	mov	r0, r9
	if (++tx_head >= TX_NUM) tx_head = 0;
    fa84:	3301      	adds	r3, #1
    fa86:	b2db      	uxtb	r3, r3
    fa88:	2b03      	cmp	r3, #3
    fa8a:	bf88      	it	hi
    fa8c:	2300      	movhi	r3, #0
    fa8e:	f88b 3000 	strb.w	r3, [fp]
}
    fa92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    fa96:	f04f 30ff 	mov.w	r0, #4294967295
}
    fa9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    fa9e:	2000      	movs	r0, #0
}
    faa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    faa4:	2000b100 	.word	0x2000b100
    faa8:	20016020 	.word	0x20016020
    faac:	2001606f 	.word	0x2001606f
    fab0:	20201880 	.word	0x20201880
    fab4:	20016056 	.word	0x20016056
    fab8:	2001606b 	.word	0x2001606b

0000fabc <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    fabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    fabe:	4c14      	ldr	r4, [pc, #80]	; (fb10 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    fac0:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    fac4:	4e13      	ldr	r6, [pc, #76]	; (fb14 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    fac6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    faca:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    face:	4f12      	ldr	r7, [pc, #72]	; (fb18 <rx_queue_transfer+0x5c>)
    fad0:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    fad4:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    fad6:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    fada:	4621      	mov	r1, r4
    fadc:	883a      	ldrh	r2, [r7, #0]
    fade:	4630      	mov	r0, r6
    fae0:	f7ff fde2 	bl	f6a8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    fae4:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    fae6:	4423      	add	r3, r4
	asm("dsb");
    fae8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    faec:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    faf0:	3420      	adds	r4, #32
	} while (location < end_addr);
    faf2:	42a3      	cmp	r3, r4
    faf4:	d8fa      	bhi.n	faec <rx_queue_transfer+0x30>
	asm("dsb");
    faf6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    fafa:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    fafe:	2003      	movs	r0, #3
    fb00:	4631      	mov	r1, r6
    fb02:	f7ff fdfd 	bl	f700 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    fb06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    fb0a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    fb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb10:	20202080 	.word	0x20202080
    fb14:	2000b000 	.word	0x2000b000
    fb18:	2001604e 	.word	0x2001604e

0000fb1c <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    fb1c:	4b24      	ldr	r3, [pc, #144]	; (fbb0 <rx_event+0x94>)
{
    fb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    fb22:	881c      	ldrh	r4, [r3, #0]
    fb24:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    fb26:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    fb28:	f3c3 430e 	ubfx	r3, r3, #16, #15
    fb2c:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    fb2e:	2c00      	cmp	r4, #0
    fb30:	dd24      	ble.n	fb7c <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    fb32:	4920      	ldr	r1, [pc, #128]	; (fbb4 <rx_event+0x98>)
		if (head != rx_tail) {
    fb34:	4820      	ldr	r0, [pc, #128]	; (fbb8 <rx_event+0x9c>)
		uint32_t head = rx_head;
    fb36:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    fb38:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    fb3a:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    fb3c:	4e1f      	ldr	r6, [pc, #124]	; (fbbc <rx_event+0xa0>)
		if (head != rx_tail) {
    fb3e:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    fb40:	481f      	ldr	r0, [pc, #124]	; (fbc0 <rx_event+0xa4>)
		if (head != rx_tail) {
    fb42:	d007      	beq.n	fb54 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    fb44:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    fb48:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    fb4c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    fb50:	4294      	cmp	r4, r2
    fb52:	d918      	bls.n	fb86 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    fb54:	3301      	adds	r3, #1
		rx_index[i] = 0;
    fb56:	2200      	movs	r2, #0
		rx_count[i] = len;
    fb58:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    fb5c:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    fb5e:	4e19      	ldr	r6, [pc, #100]	; (fbc4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    fb60:	bf88      	it	hi
    fb62:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    fb64:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    fb68:	bf98      	it	ls
    fb6a:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    fb6c:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    fb6e:	4b16      	ldr	r3, [pc, #88]	; (fbc8 <rx_event+0xac>)
		rx_head = head;
    fb70:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    fb72:	681a      	ldr	r2, [r3, #0]
    fb74:	4414      	add	r4, r2
    fb76:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    fb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    fb7c:	4628      	mov	r0, r5
}
    fb7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    fb82:	f7ff bf9b 	b.w	fabc <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    fb86:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    fb8a:	4910      	ldr	r1, [pc, #64]	; (fbcc <rx_event+0xb0>)
    fb8c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    fb8e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    fb90:	4408      	add	r0, r1
    fb92:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    fb96:	f7fe fd3d 	bl	e614 <memcpy>
				rx_available += len;
    fb9a:	4a0b      	ldr	r2, [pc, #44]	; (fbc8 <rx_event+0xac>)
				rx_queue_transfer(i);
    fb9c:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    fb9e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    fba2:	6813      	ldr	r3, [r2, #0]
    fba4:	4423      	add	r3, r4
}
    fba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    fbaa:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    fbac:	f7ff bf86 	b.w	fabc <rx_queue_transfer>
    fbb0:	2001604e 	.word	0x2001604e
    fbb4:	20016066 	.word	0x20016066
    fbb8:	20016068 	.word	0x20016068
    fbbc:	200158b8 	.word	0x200158b8
    fbc0:	200158e0 	.word	0x200158e0
    fbc4:	200158c8 	.word	0x200158c8
    fbc8:	200158b4 	.word	0x200158b4
    fbcc:	20202080 	.word	0x20202080

0000fbd0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    fbd0:	4b1d      	ldr	r3, [pc, #116]	; (fc48 <usb_serial_flush_callback+0x78>)
    fbd2:	781a      	ldrb	r2, [r3, #0]
    fbd4:	2a00      	cmp	r2, #0
    fbd6:	d136      	bne.n	fc46 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    fbd8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    fbdc:	4a1b      	ldr	r2, [pc, #108]	; (fc4c <usb_serial_flush_callback+0x7c>)
    fbde:	7812      	ldrb	r2, [r2, #0]
    fbe0:	b38a      	cbz	r2, fc46 <usb_serial_flush_callback+0x76>
{
    fbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    fbe6:	4d1a      	ldr	r5, [pc, #104]	; (fc50 <usb_serial_flush_callback+0x80>)
    fbe8:	882a      	ldrh	r2, [r5, #0]
    fbea:	b352      	cbz	r2, fc42 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    fbec:	4e19      	ldr	r6, [pc, #100]	; (fc54 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    fbee:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    fbf2:	4f19      	ldr	r7, [pc, #100]	; (fc58 <usb_serial_flush_callback+0x88>)
    fbf4:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    fbf6:	4c19      	ldr	r4, [pc, #100]	; (fc5c <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    fbf8:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    fbfc:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    fc00:	4642      	mov	r2, r8
    fc02:	4638      	mov	r0, r7
    fc04:	4621      	mov	r1, r4
    fc06:	f7ff fd4f 	bl	f6a8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    fc0a:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    fc0e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    fc12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fc16:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    fc1a:	3420      	adds	r4, #32
	} while (location < end_addr);
    fc1c:	42a2      	cmp	r2, r4
    fc1e:	d8fa      	bhi.n	fc16 <usb_serial_flush_callback+0x46>
	asm("dsb");
    fc20:	f3bf 8f4f 	dsb	sy
	asm("isb");
    fc24:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    fc28:	2003      	movs	r0, #3
    fc2a:	4639      	mov	r1, r7
    fc2c:	f7ff fd54 	bl	f6d8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    fc30:	7833      	ldrb	r3, [r6, #0]
    fc32:	3301      	adds	r3, #1
    fc34:	b2db      	uxtb	r3, r3
    fc36:	2b03      	cmp	r3, #3
    fc38:	bf88      	it	hi
    fc3a:	2300      	movhi	r3, #0
    fc3c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    fc3e:	2300      	movs	r3, #0
    fc40:	802b      	strh	r3, [r5, #0]
}
    fc42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc46:	4770      	bx	lr
    fc48:	2001606d 	.word	0x2001606d
    fc4c:	2001606f 	.word	0x2001606f
    fc50:	20016054 	.word	0x20016054
    fc54:	2001606c 	.word	0x2001606c
    fc58:	2000b180 	.word	0x2000b180
    fc5c:	20203080 	.word	0x20203080

0000fc60 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    fc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc64:	b085      	sub	sp, #20
	while (size > 0) {
    fc66:	e9cd 1001 	strd	r1, r0, [sp, #4]
    fc6a:	2900      	cmp	r1, #0
    fc6c:	f000 80bf 	beq.w	fdee <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    fc70:	2300      	movs	r3, #0
    fc72:	4c60      	ldr	r4, [pc, #384]	; (fdf4 <usb_serial_write.part.0+0x194>)
    fc74:	f8df 8198 	ldr.w	r8, [pc, #408]	; fe10 <usb_serial_write.part.0+0x1b0>
    fc78:	f8df a198 	ldr.w	sl, [pc, #408]	; fe14 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    fc7c:	4f5e      	ldr	r7, [pc, #376]	; (fdf8 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    fc7e:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    fc80:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    fc82:	4a5e      	ldr	r2, [pc, #376]	; (fdfc <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    fc84:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    fc86:	4b5e      	ldr	r3, [pc, #376]	; (fe00 <usb_serial_write.part.0+0x1a0>)
    fc88:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    fc8a:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    fc8e:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    fc92:	2b00      	cmp	r3, #0
    fc94:	f040 80a7 	bne.w	fde6 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    fc98:	461e      	mov	r6, r3
		int waiting=0;
    fc9a:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    fc9c:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    fc9e:	4648      	mov	r0, r9
    fca0:	f7ff fd3c 	bl	f71c <usb_transfer_status>
			if (!(status & 0x80)) {
    fca4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    fca8:	f000 808c 	beq.w	fdc4 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    fcac:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    fcb0:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    fcb4:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    fcb8:	b905      	cbnz	r5, fcbc <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    fcba:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    fcbc:	2b00      	cmp	r3, #0
    fcbe:	d17d      	bne.n	fdbc <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    fcc0:	683b      	ldr	r3, [r7, #0]
    fcc2:	1b9b      	subs	r3, r3, r6
    fcc4:	2b78      	cmp	r3, #120	; 0x78
    fcc6:	f200 8087 	bhi.w	fdd8 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    fcca:	4b4e      	ldr	r3, [pc, #312]	; (fe04 <usb_serial_write.part.0+0x1a4>)
    fccc:	781b      	ldrb	r3, [r3, #0]
    fcce:	2b00      	cmp	r3, #0
    fcd0:	d074      	beq.n	fdbc <usb_serial_write.part.0+0x15c>
			yield();
    fcd2:	f000 fa9d 	bl	10210 <yield>
			tx_noautoflush = 1;
    fcd6:	2201      	movs	r2, #1
		while (!tx_available) {
    fcd8:	f8b8 3000 	ldrh.w	r3, [r8]
    fcdc:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    fcde:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    fce0:	2b00      	cmp	r3, #0
    fce2:	d0dc      	beq.n	fc9e <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    fce4:	4a46      	ldr	r2, [pc, #280]	; (fe00 <usb_serial_write.part.0+0x1a0>)
    fce6:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    fcea:	7811      	ldrb	r1, [r2, #0]
    fcec:	461a      	mov	r2, r3
    fcee:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    fcf2:	4d45      	ldr	r5, [pc, #276]	; (fe08 <usb_serial_write.part.0+0x1a8>)
    fcf4:	02c9      	lsls	r1, r1, #11
    fcf6:	4428      	add	r0, r5
		if (size >= tx_available) {
    fcf8:	9d01      	ldr	r5, [sp, #4]
    fcfa:	4295      	cmp	r5, r2
    fcfc:	d217      	bcs.n	fd2e <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    fcfe:	9303      	str	r3, [sp, #12]
    fd00:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    fd04:	462a      	mov	r2, r5
    fd06:	f7fe fc85 	bl	e614 <memcpy>
			tx_available -= size;
    fd0a:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    fd0c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    fd10:	1b5b      	subs	r3, r3, r5
    fd12:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    fd16:	4b3d      	ldr	r3, [pc, #244]	; (fe0c <usb_serial_write.part.0+0x1ac>)
    fd18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    fd1c:	f3bf 8f4f 	dsb	sy
			sent += size;
    fd20:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    fd22:	2300      	movs	r3, #0
			sent += size;
    fd24:	4428      	add	r0, r5
		tx_noautoflush = 0;
    fd26:	7023      	strb	r3, [r4, #0]
}
    fd28:	b005      	add	sp, #20
    fd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    fd2e:	4b36      	ldr	r3, [pc, #216]	; (fe08 <usb_serial_write.part.0+0x1a8>)
    fd30:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    fd32:	9902      	ldr	r1, [sp, #8]
    fd34:	f7fe fc6e 	bl	e614 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    fd38:	2300      	movs	r3, #0
    fd3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fd3e:	4629      	mov	r1, r5
    fd40:	4648      	mov	r0, r9
    fd42:	f7ff fcb1 	bl	f6a8 <usb_prepare_transfer>
	asm("dsb");
    fd46:	f3bf 8f4f 	dsb	sy
    fd4a:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    fd4e:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    fd52:	4293      	cmp	r3, r2
    fd54:	bf34      	ite	cc
    fd56:	2301      	movcc	r3, #1
    fd58:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    fd5a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fd5e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    fd62:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    fd66:	3520      	adds	r5, #32
	} while (location < end_addr);
    fd68:	42ab      	cmp	r3, r5
    fd6a:	d1fa      	bne.n	fd62 <usb_serial_write.part.0+0x102>
	asm("dsb");
    fd6c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    fd70:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    fd74:	2003      	movs	r0, #3
    fd76:	4649      	mov	r1, r9
    fd78:	f7ff fcae 	bl	f6d8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    fd7c:	4a20      	ldr	r2, [pc, #128]	; (fe00 <usb_serial_write.part.0+0x1a0>)
    fd7e:	7813      	ldrb	r3, [r2, #0]
    fd80:	3301      	adds	r3, #1
    fd82:	b2db      	uxtb	r3, r3
    fd84:	2b03      	cmp	r3, #3
    fd86:	bf84      	itt	hi
    fd88:	2300      	movhi	r3, #0
    fd8a:	4a1d      	ldrhi	r2, [pc, #116]	; (fe00 <usb_serial_write.part.0+0x1a0>)
    fd8c:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    fd8e:	f8b8 3000 	ldrh.w	r3, [r8]
    fd92:	9a01      	ldr	r2, [sp, #4]
    fd94:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    fd96:	9a00      	ldr	r2, [sp, #0]
    fd98:	441a      	add	r2, r3
			size -= tx_available;
    fd9a:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    fd9c:	9200      	str	r2, [sp, #0]
			data += tx_available;
    fd9e:	9a02      	ldr	r2, [sp, #8]
    fda0:	441a      	add	r2, r3
			tx_available = 0;
    fda2:	2300      	movs	r3, #0
			data += tx_available;
    fda4:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    fda6:	4a19      	ldr	r2, [pc, #100]	; (fe0c <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    fda8:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    fdac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    fdb0:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    fdb4:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    fdb6:	2900      	cmp	r1, #0
    fdb8:	f47f af62 	bne.w	fc80 <usb_serial_write.part.0+0x20>
	return sent;
    fdbc:	9800      	ldr	r0, [sp, #0]
}
    fdbe:	b005      	add	sp, #20
    fdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    fdc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    fdc8:	4b0d      	ldr	r3, [pc, #52]	; (fe00 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    fdca:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    fdce:	7819      	ldrb	r1, [r3, #0]
				break;
    fdd0:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    fdd2:	f8a8 2000 	strh.w	r2, [r8]
				break;
    fdd6:	e78a      	b.n	fcee <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    fdd8:	2301      	movs	r3, #1
				return sent;
    fdda:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    fddc:	f88a 3000 	strb.w	r3, [sl]
}
    fde0:	b005      	add	sp, #20
    fde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    fde6:	461a      	mov	r2, r3
    fde8:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    fdec:	e77f      	b.n	fcee <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    fdee:	9801      	ldr	r0, [sp, #4]
	return sent;
    fdf0:	e7e5      	b.n	fdbe <usb_serial_write.part.0+0x15e>
    fdf2:	bf00      	nop
    fdf4:	2001606d 	.word	0x2001606d
    fdf8:	20016020 	.word	0x20016020
    fdfc:	2000b180 	.word	0x2000b180
    fe00:	2001606c 	.word	0x2001606c
    fe04:	2001606f 	.word	0x2001606f
    fe08:	20203080 	.word	0x20203080
    fe0c:	402e0000 	.word	0x402e0000
    fe10:	20016054 	.word	0x20016054
    fe14:	2001606a 	.word	0x2001606a

0000fe18 <usb_serial_reset>:
}
    fe18:	4770      	bx	lr
    fe1a:	bf00      	nop

0000fe1c <usb_serial_configure>:
	if (usb_high_speed) {
    fe1c:	4b2d      	ldr	r3, [pc, #180]	; (fed4 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    fe1e:	2100      	movs	r1, #0
    fe20:	2280      	movs	r2, #128	; 0x80
    fe22:	482d      	ldr	r0, [pc, #180]	; (fed8 <usb_serial_configure+0xbc>)
{
    fe24:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    fe26:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    fe28:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    fe2a:	4d2c      	ldr	r5, [pc, #176]	; (fedc <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    fe2c:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    fe2e:	4e2c      	ldr	r6, [pc, #176]	; (fee0 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    fe30:	bf0c      	ite	eq
    fe32:	2340      	moveq	r3, #64	; 0x40
    fe34:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    fe38:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    fe3a:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    fe3c:	f002 fc78 	bl	12730 <memset>
	tx_head = 0;
    fe40:	4a28      	ldr	r2, [pc, #160]	; (fee4 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    fe42:	4621      	mov	r1, r4
	tx_available = 0;
    fe44:	4b28      	ldr	r3, [pc, #160]	; (fee8 <usb_serial_configure+0xcc>)
	tx_head = 0;
    fe46:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    fe48:	f44f 7280 	mov.w	r2, #256	; 0x100
    fe4c:	4827      	ldr	r0, [pc, #156]	; (feec <usb_serial_configure+0xd0>)
	tx_available = 0;
    fe4e:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    fe50:	f002 fc6e 	bl	12730 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    fe54:	4a26      	ldr	r2, [pc, #152]	; (fef0 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fe56:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    fe58:	4b26      	ldr	r3, [pc, #152]	; (fef4 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fe5a:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    fe5c:	e9c2 4400 	strd	r4, r4, [r2]
    fe60:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    fe64:	4a24      	ldr	r2, [pc, #144]	; (fef8 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    fe66:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    fe6a:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    fe6c:	4a23      	ldr	r2, [pc, #140]	; (fefc <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    fe6e:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    fe72:	4b23      	ldr	r3, [pc, #140]	; (ff00 <usb_serial_configure+0xe4>)
    fe74:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fe76:	4623      	mov	r3, r4
	rx_available = 0;
    fe78:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fe7a:	4622      	mov	r2, r4
    fe7c:	f7ff fbe2 	bl	f644 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    fe80:	4622      	mov	r2, r4
    fe82:	8831      	ldrh	r1, [r6, #0]
    fe84:	2003      	movs	r0, #3
    fe86:	4b1f      	ldr	r3, [pc, #124]	; (ff04 <usb_serial_configure+0xe8>)
    fe88:	f7ff fbaa 	bl	f5e0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    fe8c:	4623      	mov	r3, r4
    fe8e:	2201      	movs	r2, #1
    fe90:	8829      	ldrh	r1, [r5, #0]
    fe92:	2003      	movs	r0, #3
    fe94:	f7ff fbd6 	bl	f644 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    fe98:	4620      	mov	r0, r4
    fe9a:	3401      	adds	r4, #1
    fe9c:	f7ff fe0e 	bl	fabc <rx_queue_transfer>
    fea0:	2c08      	cmp	r4, #8
    fea2:	d1f9      	bne.n	fe98 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    fea4:	4b18      	ldr	r3, [pc, #96]	; (ff08 <usb_serial_configure+0xec>)
    fea6:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    fea8:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    feaa:	4818      	ldr	r0, [pc, #96]	; (ff0c <usb_serial_configure+0xf0>)
    feac:	4c18      	ldr	r4, [pc, #96]	; (ff10 <usb_serial_configure+0xf4>)
    feae:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    feb0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    feb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    feb8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    febc:	4915      	ldr	r1, [pc, #84]	; (ff14 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    febe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    fec2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    fec6:	b121      	cbz	r1, fed2 <usb_serial_configure+0xb6>
    fec8:	4a13      	ldr	r2, [pc, #76]	; (ff18 <usb_serial_configure+0xfc>)
    feca:	7813      	ldrb	r3, [r2, #0]
    fecc:	f043 0301 	orr.w	r3, r3, #1
    fed0:	7013      	strb	r3, [r2, #0]
}
    fed2:	bd70      	pop	{r4, r5, r6, pc}
    fed4:	20016070 	.word	0x20016070
    fed8:	2000b180 	.word	0x2000b180
    fedc:	20016058 	.word	0x20016058
    fee0:	2001604e 	.word	0x2001604e
    fee4:	2001606c 	.word	0x2001606c
    fee8:	20016054 	.word	0x20016054
    feec:	2000b000 	.word	0x2000b000
    fef0:	200158b8 	.word	0x200158b8
    fef4:	200158c8 	.word	0x200158c8
    fef8:	20016066 	.word	0x20016066
    fefc:	200158b4 	.word	0x200158b4
    ff00:	20016068 	.word	0x20016068
    ff04:	0000fb1d 	.word	0x0000fb1d
    ff08:	402e0000 	.word	0x402e0000
    ff0c:	20016034 	.word	0x20016034
    ff10:	0000fbd1 	.word	0x0000fbd1
    ff14:	00000000 	.word	0x00000000
    ff18:	20016072 	.word	0x20016072

0000ff1c <usb_serial_read>:
{
    ff1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ff20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ff24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    ff28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; fff4 <usb_serial_read+0xd8>
{
    ff2c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ff2e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    ff32:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    ff34:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    ff38:	2900      	cmp	r1, #0
    ff3a:	d04f      	beq.n	ffdc <usb_serial_read+0xc0>
    ff3c:	4680      	mov	r8, r0
    ff3e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    ff40:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    ff42:	f8df 90b4 	ldr.w	r9, [pc, #180]	; fff8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    ff46:	4b26      	ldr	r3, [pc, #152]	; (ffe0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    ff48:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ff4c:	4925      	ldr	r1, [pc, #148]	; (ffe4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    ff4e:	781b      	ldrb	r3, [r3, #0]
    ff50:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    ff52:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    ff56:	d03f      	beq.n	ffd8 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    ff58:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    ff5a:	4b23      	ldr	r3, [pc, #140]	; (ffe8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ff5c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    ff5e:	bf28      	it	cs
    ff60:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    ff62:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    ff64:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ff68:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    ff6c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    ff6e:	4b1f      	ldr	r3, [pc, #124]	; (ffec <usb_serial_read+0xd0>)
    ff70:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    ff74:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    ff78:	42aa      	cmp	r2, r5
    ff7a:	d21c      	bcs.n	ffb6 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ff7c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    ff80:	4918      	ldr	r1, [pc, #96]	; (ffe4 <usb_serial_read+0xc8>)
			rx_available -= len;
    ff82:	4c1b      	ldr	r4, [pc, #108]	; (fff0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ff84:	4461      	add	r1, ip
    ff86:	9201      	str	r2, [sp, #4]
    ff88:	f7fe fb44 	bl	e614 <memcpy>
			rx_available -= len;
    ff8c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    ff8e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    ff92:	4658      	mov	r0, fp
			rx_index[i] += len;
    ff94:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    ff96:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    ff9a:	442a      	add	r2, r5
			rx_available -= len;
    ff9c:	4439      	add	r1, r7
			rx_index[i] += len;
    ff9e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    ffa2:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    ffa4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ffa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ffac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    ffb0:	b003      	add	sp, #12
    ffb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ffb6:	462a      	mov	r2, r5
			count += avail;
    ffb8:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ffba:	f7fe fb2b 	bl	e614 <memcpy>
			rx_available -= avail;
    ffbe:	490c      	ldr	r1, [pc, #48]	; (fff0 <usb_serial_read+0xd4>)
			rx_tail = tail;
    ffc0:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    ffc2:	4630      	mov	r0, r6
			rx_available -= avail;
    ffc4:	680a      	ldr	r2, [r1, #0]
			p += avail;
    ffc6:	44a8      	add	r8, r5
			rx_available -= avail;
    ffc8:	1b52      	subs	r2, r2, r5
    ffca:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    ffcc:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    ffd0:	f7ff fd74 	bl	fabc <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    ffd4:	45bb      	cmp	fp, r7
    ffd6:	d8b6      	bhi.n	ff46 <usb_serial_read+0x2a>
	return count;
    ffd8:	4638      	mov	r0, r7
    ffda:	e7e3      	b.n	ffa4 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    ffdc:	4608      	mov	r0, r1
    ffde:	e7e1      	b.n	ffa4 <usb_serial_read+0x88>
    ffe0:	20016066 	.word	0x20016066
    ffe4:	20202080 	.word	0x20202080
    ffe8:	200158e0 	.word	0x200158e0
    ffec:	200158b8 	.word	0x200158b8
    fff0:	200158b4 	.word	0x200158b4
    fff4:	20016068 	.word	0x20016068
    fff8:	200158c8 	.word	0x200158c8

0000fffc <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    fffc:	4b0b      	ldr	r3, [pc, #44]	; (1002c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    fffe:	4a0c      	ldr	r2, [pc, #48]	; (10030 <usb_serial_peekchar+0x34>)
   10000:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
   10002:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
   10004:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
   10006:	428a      	cmp	r2, r1
   10008:	d00d      	beq.n	10026 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
   1000a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
   1000c:	4809      	ldr	r0, [pc, #36]	; (10034 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   1000e:	4a0a      	ldr	r2, [pc, #40]	; (10038 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
   10010:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   10012:	490a      	ldr	r1, [pc, #40]	; (1003c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
   10014:	bf28      	it	cs
   10016:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
   10018:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   1001a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
   1001e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
   10022:	5c58      	ldrb	r0, [r3, r1]
   10024:	4770      	bx	lr
	if (tail == rx_head) return -1;
   10026:	f04f 30ff 	mov.w	r0, #4294967295
}
   1002a:	4770      	bx	lr
   1002c:	20016066 	.word	0x20016066
   10030:	20016068 	.word	0x20016068
   10034:	200158e0 	.word	0x200158e0
   10038:	20202080 	.word	0x20202080
   1003c:	200158c8 	.word	0x200158c8

00010040 <usb_serial_available>:
	uint32_t n = rx_available;
   10040:	4b04      	ldr	r3, [pc, #16]	; (10054 <usb_serial_available+0x14>)
{
   10042:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
   10044:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
   10046:	b10c      	cbz	r4, 1004c <usb_serial_available+0xc>
}
   10048:	4620      	mov	r0, r4
   1004a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
   1004c:	f000 f8e0 	bl	10210 <yield>
}
   10050:	4620      	mov	r0, r4
   10052:	bd10      	pop	{r4, pc}
   10054:	200158b4 	.word	0x200158b4

00010058 <usb_serial_flush_input>:
{
   10058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
   1005c:	4e14      	ldr	r6, [pc, #80]	; (100b0 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
   1005e:	4d15      	ldr	r5, [pc, #84]	; (100b4 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
   10060:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
   10062:	782a      	ldrb	r2, [r5, #0]
   10064:	4293      	cmp	r3, r2
   10066:	d021      	beq.n	100ac <usb_serial_flush_input+0x54>
   10068:	b2dc      	uxtb	r4, r3
   1006a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 100bc <usb_serial_flush_input+0x64>
   1006e:	f8df b050 	ldr.w	fp, [pc, #80]	; 100c0 <usb_serial_flush_input+0x68>
   10072:	f8df 8050 	ldr.w	r8, [pc, #80]	; 100c4 <usb_serial_flush_input+0x6c>
   10076:	4f10      	ldr	r7, [pc, #64]	; (100b8 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
   10078:	3401      	adds	r4, #1
   1007a:	2c08      	cmp	r4, #8
		rx_tail = tail;
   1007c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
   10080:	d901      	bls.n	10086 <usb_serial_flush_input+0x2e>
   10082:	2400      	movs	r4, #0
   10084:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
   10086:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
   1008a:	f8db 3000 	ldr.w	r3, [fp]
   1008e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
   10092:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
   10096:	1a52      	subs	r2, r2, r1
   10098:	1a9b      	subs	r3, r3, r2
   1009a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
   1009e:	f7ff fd0d 	bl	fabc <rx_queue_transfer>
		rx_tail = tail;
   100a2:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
   100a6:	782b      	ldrb	r3, [r5, #0]
   100a8:	42a3      	cmp	r3, r4
   100aa:	d1e5      	bne.n	10078 <usb_serial_flush_input+0x20>
}
   100ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100b0:	20016068 	.word	0x20016068
   100b4:	20016066 	.word	0x20016066
   100b8:	200158c8 	.word	0x200158c8
   100bc:	200158e0 	.word	0x200158e0
   100c0:	200158b4 	.word	0x200158b4
   100c4:	200158b8 	.word	0x200158b8

000100c8 <usb_serial_getchar>:
{
   100c8:	b500      	push	{lr}
   100ca:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
   100cc:	2101      	movs	r1, #1
   100ce:	f10d 0007 	add.w	r0, sp, #7
   100d2:	f7ff ff23 	bl	ff1c <usb_serial_read>
   100d6:	b120      	cbz	r0, 100e2 <usb_serial_getchar+0x1a>
   100d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   100dc:	b003      	add	sp, #12
   100de:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   100e2:	f04f 30ff 	mov.w	r0, #4294967295
   100e6:	e7f9      	b.n	100dc <usb_serial_getchar+0x14>

000100e8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
   100e8:	4b09      	ldr	r3, [pc, #36]	; (10110 <usb_serial_putchar+0x28>)
{
   100ea:	b500      	push	{lr}
   100ec:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
   100ee:	781b      	ldrb	r3, [r3, #0]
{
   100f0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
   100f4:	b13b      	cbz	r3, 10106 <usb_serial_putchar+0x1e>
   100f6:	2101      	movs	r1, #1
   100f8:	f10d 0007 	add.w	r0, sp, #7
   100fc:	f7ff fdb0 	bl	fc60 <usb_serial_write.part.0>
}
   10100:	b003      	add	sp, #12
   10102:	f85d fb04 	ldr.w	pc, [sp], #4
   10106:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1010a:	b003      	add	sp, #12
   1010c:	f85d fb04 	ldr.w	pc, [sp], #4
   10110:	2001606f 	.word	0x2001606f

00010114 <usb_serial_write>:
	if (!usb_configuration) return 0;
   10114:	4b04      	ldr	r3, [pc, #16]	; (10128 <usb_serial_write+0x14>)
   10116:	781b      	ldrb	r3, [r3, #0]
   10118:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1011c:	b10b      	cbz	r3, 10122 <usb_serial_write+0xe>
   1011e:	f7ff bd9f 	b.w	fc60 <usb_serial_write.part.0>
}
   10122:	4610      	mov	r0, r2
   10124:	4770      	bx	lr
   10126:	bf00      	nop
   10128:	2001606f 	.word	0x2001606f

0001012c <usb_serial_write_buffer_free>:
{
   1012c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
   10130:	2400      	movs	r4, #0
	tx_noautoflush = 1;
   10132:	f8df 8044 	ldr.w	r8, [pc, #68]	; 10178 <usb_serial_write_buffer_free+0x4c>
   10136:	2301      	movs	r3, #1
   10138:	4d0d      	ldr	r5, [pc, #52]	; (10170 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
   1013a:	4627      	mov	r7, r4
   1013c:	4e0d      	ldr	r6, [pc, #52]	; (10174 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
   1013e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
   10142:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   10144:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
   10146:	3520      	adds	r5, #32
		if (i == tx_head) continue;
   10148:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
   1014a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
   1014e:	d005      	beq.n	1015c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   10150:	f7ff fae4 	bl	f71c <usb_transfer_status>
   10154:	0603      	lsls	r3, r0, #24
   10156:	bf58      	it	pl
   10158:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
   1015c:	2c04      	cmp	r4, #4
   1015e:	d1f0      	bne.n	10142 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
   10160:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   10164:	2300      	movs	r3, #0
}
   10166:	4638      	mov	r0, r7
	tx_noautoflush = 0;
   10168:	f888 3000 	strb.w	r3, [r8]
}
   1016c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10170:	2000b180 	.word	0x2000b180
   10174:	2001606c 	.word	0x2001606c
   10178:	2001606d 	.word	0x2001606d

0001017c <usb_serial_flush_output>:
{
   1017c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
   10180:	4b1d      	ldr	r3, [pc, #116]	; (101f8 <usb_serial_flush_output+0x7c>)
   10182:	781b      	ldrb	r3, [r3, #0]
   10184:	b113      	cbz	r3, 1018c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
   10186:	4d1d      	ldr	r5, [pc, #116]	; (101fc <usb_serial_flush_output+0x80>)
   10188:	882a      	ldrh	r2, [r5, #0]
   1018a:	b90a      	cbnz	r2, 10190 <usb_serial_flush_output+0x14>
}
   1018c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
   10190:	4e1b      	ldr	r6, [pc, #108]	; (10200 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
   10192:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   10196:	491b      	ldr	r1, [pc, #108]	; (10204 <usb_serial_flush_output+0x88>)
   10198:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   1019a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   1019c:	4c1a      	ldr	r4, [pc, #104]	; (10208 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   1019e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
   101a2:	4f1a      	ldr	r7, [pc, #104]	; (1020c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   101a4:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
   101a8:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   101aa:	4640      	mov	r0, r8
	tx_noautoflush = 1;
   101ac:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   101ae:	4621      	mov	r1, r4
   101b0:	2300      	movs	r3, #0
   101b2:	f7ff fa79 	bl	f6a8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   101b6:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
   101ba:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   101be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   101c2:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   101c6:	3420      	adds	r4, #32
	} while (location < end_addr);
   101c8:	42a2      	cmp	r2, r4
   101ca:	d8fa      	bhi.n	101c2 <usb_serial_flush_output+0x46>
	asm("dsb");
   101cc:	f3bf 8f4f 	dsb	sy
	asm("isb");
   101d0:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   101d4:	2003      	movs	r0, #3
   101d6:	4641      	mov	r1, r8
   101d8:	f7ff fa7e 	bl	f6d8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   101dc:	7833      	ldrb	r3, [r6, #0]
   101de:	3301      	adds	r3, #1
   101e0:	b2db      	uxtb	r3, r3
   101e2:	2b03      	cmp	r3, #3
   101e4:	bf88      	it	hi
   101e6:	2300      	movhi	r3, #0
   101e8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   101ea:	2300      	movs	r3, #0
   101ec:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
   101ee:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   101f2:	703b      	strb	r3, [r7, #0]
}
   101f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   101f8:	2001606f 	.word	0x2001606f
   101fc:	20016054 	.word	0x20016054
   10200:	2001606c 	.word	0x2001606c
   10204:	2000b180 	.word	0x2000b180
   10208:	20203080 	.word	0x20203080
   1020c:	2001606d 	.word	0x2001606d

00010210 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
   10210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
   10214:	4b2d      	ldr	r3, [pc, #180]	; (102cc <yield+0xbc>)
   10216:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
   10218:	b166      	cbz	r6, 10234 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
   1021a:	4f2d      	ldr	r7, [pc, #180]	; (102d0 <yield+0xc0>)
   1021c:	783b      	ldrb	r3, [r7, #0]
   1021e:	b94b      	cbnz	r3, 10234 <yield+0x24>
	running = 1;
   10220:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   10222:	07f1      	lsls	r1, r6, #31
	running = 1;
   10224:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   10226:	d443      	bmi.n	102b0 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
   10228:	07b2      	lsls	r2, r6, #30
   1022a:	d426      	bmi.n	1027a <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
   1022c:	2300      	movs	r3, #0
   1022e:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
   10230:	0773      	lsls	r3, r6, #29
   10232:	d401      	bmi.n	10238 <yield+0x28>
		EventResponder::runFromYield();
	}
};
   10234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
   10238:	4b26      	ldr	r3, [pc, #152]	; (102d4 <yield+0xc4>)
   1023a:	681a      	ldr	r2, [r3, #0]
   1023c:	2a00      	cmp	r2, #0
   1023e:	d0f9      	beq.n	10234 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   10240:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
   10244:	2a00      	cmp	r2, #0
   10246:	d1f5      	bne.n	10234 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   10248:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
   1024c:	b672      	cpsid	i
		EventResponder *first = firstYield;
   1024e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
   10250:	2800      	cmp	r0, #0
   10252:	d034      	beq.n	102be <yield+0xae>
		if (runningFromYield) {
   10254:	4c20      	ldr	r4, [pc, #128]	; (102d8 <yield+0xc8>)
   10256:	7821      	ldrb	r1, [r4, #0]
   10258:	2900      	cmp	r1, #0
   1025a:	d130      	bne.n	102be <yield+0xae>
		runningFromYield = true;
   1025c:	2201      	movs	r2, #1
   1025e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
   10260:	6942      	ldr	r2, [r0, #20]
   10262:	601a      	str	r2, [r3, #0]
		if (firstYield) {
   10264:	2a00      	cmp	r2, #0
   10266:	d02e      	beq.n	102c6 <yield+0xb6>
			firstYield->_prev = nullptr;
   10268:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
   1026a:	b905      	cbnz	r5, 1026e <yield+0x5e>
   1026c:	b662      	cpsie	i
		first->_triggered = false;
   1026e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
   10270:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
   10272:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   10274:	4798      	blx	r3
		runningFromYield = false;
   10276:	7025      	strb	r5, [r4, #0]
   10278:	e7dc      	b.n	10234 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   1027a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 102e0 <yield+0xd0>
   1027e:	f898 3000 	ldrb.w	r3, [r8]
   10282:	2b00      	cmp	r3, #0
   10284:	d0d2      	beq.n	1022c <yield+0x1c>
   10286:	2500      	movs	r5, #0
   10288:	f8df 9058 	ldr.w	r9, [pc, #88]	; 102e4 <yield+0xd4>
   1028c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
   1028e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   10292:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
   10294:	6823      	ldr	r3, [r4, #0]
   10296:	4620      	mov	r0, r4
   10298:	691b      	ldr	r3, [r3, #16]
   1029a:	4798      	blx	r3
   1029c:	b110      	cbz	r0, 102a4 <yield+0x94>
   1029e:	6963      	ldr	r3, [r4, #20]
   102a0:	689b      	ldr	r3, [r3, #8]
   102a2:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   102a4:	f898 2000 	ldrb.w	r2, [r8]
   102a8:	b2eb      	uxtb	r3, r5
   102aa:	429a      	cmp	r2, r3
   102ac:	d8ef      	bhi.n	1028e <yield+0x7e>
   102ae:	e7bd      	b.n	1022c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
   102b0:	f7ff fec6 	bl	10040 <usb_serial_available>
		if (Serial.available()) serialEvent();
   102b4:	2800      	cmp	r0, #0
   102b6:	d0b7      	beq.n	10228 <yield+0x18>
   102b8:	f3af 8000 	nop.w
   102bc:	e7b4      	b.n	10228 <yield+0x18>
		if (doit) __enable_irq();
   102be:	2d00      	cmp	r5, #0
   102c0:	d1b8      	bne.n	10234 <yield+0x24>
   102c2:	b662      	cpsie	i
   102c4:	e7b6      	b.n	10234 <yield+0x24>
			lastYield = nullptr;
   102c6:	4b05      	ldr	r3, [pc, #20]	; (102dc <yield+0xcc>)
   102c8:	601a      	str	r2, [r3, #0]
   102ca:	e7ce      	b.n	1026a <yield+0x5a>
   102cc:	20016072 	.word	0x20016072
   102d0:	20016061 	.word	0x20016061
   102d4:	20015138 	.word	0x20015138
   102d8:	2001605f 	.word	0x2001605f
   102dc:	20015144 	.word	0x20015144
   102e0:	20016060 	.word	0x20016060
   102e4:	20015148 	.word	0x20015148

000102e8 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   102e8:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
   102ea:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   102ec:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
   102f0:	4619      	mov	r1, r3
{
   102f2:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   102f4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   102f8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   102fc:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   10300:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
   10304:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
   10308:	460a      	mov	r2, r1
	p->FFILT0 = 0;
   1030a:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   1030e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   10312:	b29b      	uxth	r3, r3
   10314:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   10318:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1031c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
   10320:	3101      	adds	r1, #1
   10322:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   10326:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   10328:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   1032a:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   1032e:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   10330:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   10332:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   10334:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   10336:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
   1033a:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   1033c:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   1033e:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   10340:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
   10342:	d1eb      	bne.n	1031c <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10344:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   10348:	b29b      	uxth	r3, r3
   1034a:	f043 030f 	orr.w	r3, r3, #15
   1034e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   10352:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   10356:	b29b      	uxth	r3, r3
   10358:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
   1035c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   10360:	bd10      	pop	{r4, pc}
   10362:	bf00      	nop

00010364 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   10364:	4b37      	ldr	r3, [pc, #220]	; (10444 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10366:	4a38      	ldr	r2, [pc, #224]	; (10448 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   10368:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
   1036a:	4838      	ldr	r0, [pc, #224]	; (1044c <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   1036c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
   10370:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   10372:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10374:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10378:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1037c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10380:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10384:	430a      	orrs	r2, r1
   10386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
   1038a:	f7ff ffad 	bl	102e8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
   1038e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   10392:	f7ff ffa9 	bl	102e8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
   10396:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   1039a:	f7ff ffa5 	bl	102e8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
   1039e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   103a2:	f7ff ffa1 	bl	102e8 <flexpwm_init>
	for (i=0; i < 4; i++) {
   103a6:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   103a8:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   103ac:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
   103b0:	4611      	mov	r1, r2
   103b2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   103b6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   103ba:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   103bc:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   103be:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   103c0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   103c2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   103c6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   103c8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   103ca:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   103ce:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   103d0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   103d2:	d1ee      	bne.n	103b2 <pwm_init+0x4e>
   103d4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   103d6:	481e      	ldr	r0, [pc, #120]	; (10450 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   103d8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   103dc:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   103e0:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   103e2:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   103e6:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   103ea:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   103ee:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   103f2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   103f4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   103f6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   103f8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   103fa:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   103fe:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10400:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   10402:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   10406:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10408:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   1040a:	d1ee      	bne.n	103ea <pwm_init+0x86>
   1040c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   1040e:	4811      	ldr	r0, [pc, #68]	; (10454 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10410:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10412:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   10416:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10418:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1041c:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   10420:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   10424:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   10428:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   1042a:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   1042c:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   1042e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10430:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10432:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10434:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   10436:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   1043a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1043c:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
   10440:	d1ee      	bne.n	10420 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   10442:	bd70      	pop	{r4, r5, r6, pc}
   10444:	400fc000 	.word	0x400fc000
   10448:	fc030000 	.word	0xfc030000
   1044c:	403dc000 	.word	0x403dc000
   10450:	401e0000 	.word	0x401e0000
   10454:	401e4000 	.word	0x401e4000

00010458 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
   10458:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
   1045a:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
   1045e:	b15b      	cbz	r3, 10478 <sm_align_pool+0x20>
   10460:	b1ba      	cbz	r2, 10492 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
   10462:	4b0f      	ldr	r3, [pc, #60]	; (104a0 <sm_align_pool+0x48>)
   10464:	fba3 1302 	umull	r1, r3, r3, r2
   10468:	08db      	lsrs	r3, r3, #3
   1046a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1046e:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   10472:	d10a      	bne.n	1048a <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
   10474:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
   10476:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
   10478:	4b09      	ldr	r3, [pc, #36]	; (104a0 <sm_align_pool+0x48>)
   1047a:	fba3 1302 	umull	r1, r3, r3, r2
   1047e:	08db      	lsrs	r3, r3, #3
   10480:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
   10484:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   10488:	d001      	beq.n	1048e <sm_align_pool+0x36>
   1048a:	1ad2      	subs	r2, r2, r3
   1048c:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
   1048e:	2af0      	cmp	r2, #240	; 0xf0
   10490:	d8f0      	bhi.n	10474 <sm_align_pool+0x1c>
		errno = ENOSPC;
   10492:	f002 fad9 	bl	12a48 <__errno>
   10496:	221c      	movs	r2, #28
   10498:	4603      	mov	r3, r0
   1049a:	2000      	movs	r0, #0
   1049c:	601a      	str	r2, [r3, #0]
}
   1049e:	bd08      	pop	{r3, pc}
   104a0:	aaaaaaab 	.word	0xaaaaaaab

000104a4 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
   104a4:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
   104a6:	4604      	mov	r4, r0
   104a8:	b338      	cbz	r0, 104fa <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
   104aa:	b119      	cbz	r1, 104b4 <sm_set_pool+0x10>
   104ac:	fab2 f682 	clz	r6, r2
   104b0:	0976      	lsrs	r6, r6, #5
   104b2:	b9a2      	cbnz	r2, 104de <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
   104b4:	6820      	ldr	r0, [r4, #0]
   104b6:	b300      	cbz	r0, 104fa <sm_set_pool+0x56>
   104b8:	6862      	ldr	r2, [r4, #4]
   104ba:	b1f2      	cbz	r2, 104fa <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
   104bc:	4b18      	ldr	r3, [pc, #96]	; (10520 <sm_set_pool+0x7c>)
   104be:	4919      	ldr	r1, [pc, #100]	; (10524 <sm_set_pool+0x80>)
   104c0:	fb02 f303 	mul.w	r3, r2, r3
   104c4:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
   104c8:	d317      	bcc.n	104fa <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   104ca:	68a3      	ldr	r3, [r4, #8]
   104cc:	b9e3      	cbnz	r3, 10508 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
   104ce:	2200      	movs	r2, #0
			return 1;
   104d0:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
   104d2:	6022      	str	r2, [r4, #0]
   104d4:	6062      	str	r2, [r4, #4]
   104d6:	60a2      	str	r2, [r4, #8]
   104d8:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
   104da:	4618      	mov	r0, r3
   104dc:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
   104de:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
   104e0:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
   104e2:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
   104e6:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
   104e8:	f7ff ffb6 	bl	10458 <sm_align_pool>
   104ec:	4603      	mov	r3, r0
   104ee:	2800      	cmp	r0, #0
   104f0:	d0f3      	beq.n	104da <sm_set_pool+0x36>
	if (do_zero) {
   104f2:	b96d      	cbnz	r5, 10510 <sm_set_pool+0x6c>
	return 1;
   104f4:	2301      	movs	r3, #1
}
   104f6:	4618      	mov	r0, r3
   104f8:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
   104fa:	f002 faa5 	bl	12a48 <__errno>
   104fe:	2216      	movs	r2, #22
		return 0;
   10500:	2300      	movs	r3, #0
		errno = EINVAL;
   10502:	6002      	str	r2, [r0, #0]
}
   10504:	4618      	mov	r0, r3
   10506:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   10508:	2100      	movs	r1, #0
   1050a:	f002 f911 	bl	12730 <memset>
   1050e:	e7de      	b.n	104ce <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
   10510:	6862      	ldr	r2, [r4, #4]
   10512:	4631      	mov	r1, r6
   10514:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
   10516:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
   10518:	f002 f90a 	bl	12730 <memset>
	return 1;
   1051c:	2301      	movs	r3, #1
   1051e:	e7dc      	b.n	104da <sm_set_pool+0x36>
   10520:	aaaaaaab 	.word	0xaaaaaaab
   10524:	15555555 	.word	0x15555555

00010528 <__aeabi_atexit>:
   10528:	4603      	mov	r3, r0
   1052a:	4608      	mov	r0, r1
   1052c:	4619      	mov	r1, r3
   1052e:	f001 be25 	b.w	1217c <__cxa_atexit>
   10532:	bf00      	nop

00010534 <__aeabi_uldivmod>:
   10534:	b953      	cbnz	r3, 1054c <__aeabi_uldivmod+0x18>
   10536:	b94a      	cbnz	r2, 1054c <__aeabi_uldivmod+0x18>
   10538:	2900      	cmp	r1, #0
   1053a:	bf08      	it	eq
   1053c:	2800      	cmpeq	r0, #0
   1053e:	bf1c      	itt	ne
   10540:	f04f 31ff 	movne.w	r1, #4294967295
   10544:	f04f 30ff 	movne.w	r0, #4294967295
   10548:	f000 b970 	b.w	1082c <__aeabi_idiv0>
   1054c:	f1ad 0c08 	sub.w	ip, sp, #8
   10550:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10554:	f000 f806 	bl	10564 <__udivmoddi4>
   10558:	f8dd e004 	ldr.w	lr, [sp, #4]
   1055c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10560:	b004      	add	sp, #16
   10562:	4770      	bx	lr

00010564 <__udivmoddi4>:
   10564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10568:	9e08      	ldr	r6, [sp, #32]
   1056a:	460d      	mov	r5, r1
   1056c:	4604      	mov	r4, r0
   1056e:	460f      	mov	r7, r1
   10570:	2b00      	cmp	r3, #0
   10572:	d14a      	bne.n	1060a <__udivmoddi4+0xa6>
   10574:	428a      	cmp	r2, r1
   10576:	4694      	mov	ip, r2
   10578:	d965      	bls.n	10646 <__udivmoddi4+0xe2>
   1057a:	fab2 f382 	clz	r3, r2
   1057e:	b143      	cbz	r3, 10592 <__udivmoddi4+0x2e>
   10580:	fa02 fc03 	lsl.w	ip, r2, r3
   10584:	f1c3 0220 	rsb	r2, r3, #32
   10588:	409f      	lsls	r7, r3
   1058a:	fa20 f202 	lsr.w	r2, r0, r2
   1058e:	4317      	orrs	r7, r2
   10590:	409c      	lsls	r4, r3
   10592:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   10596:	fa1f f58c 	uxth.w	r5, ip
   1059a:	fbb7 f1fe 	udiv	r1, r7, lr
   1059e:	0c22      	lsrs	r2, r4, #16
   105a0:	fb0e 7711 	mls	r7, lr, r1, r7
   105a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   105a8:	fb01 f005 	mul.w	r0, r1, r5
   105ac:	4290      	cmp	r0, r2
   105ae:	d90a      	bls.n	105c6 <__udivmoddi4+0x62>
   105b0:	eb1c 0202 	adds.w	r2, ip, r2
   105b4:	f101 37ff 	add.w	r7, r1, #4294967295
   105b8:	f080 811c 	bcs.w	107f4 <__udivmoddi4+0x290>
   105bc:	4290      	cmp	r0, r2
   105be:	f240 8119 	bls.w	107f4 <__udivmoddi4+0x290>
   105c2:	3902      	subs	r1, #2
   105c4:	4462      	add	r2, ip
   105c6:	1a12      	subs	r2, r2, r0
   105c8:	b2a4      	uxth	r4, r4
   105ca:	fbb2 f0fe 	udiv	r0, r2, lr
   105ce:	fb0e 2210 	mls	r2, lr, r0, r2
   105d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   105d6:	fb00 f505 	mul.w	r5, r0, r5
   105da:	42a5      	cmp	r5, r4
   105dc:	d90a      	bls.n	105f4 <__udivmoddi4+0x90>
   105de:	eb1c 0404 	adds.w	r4, ip, r4
   105e2:	f100 32ff 	add.w	r2, r0, #4294967295
   105e6:	f080 8107 	bcs.w	107f8 <__udivmoddi4+0x294>
   105ea:	42a5      	cmp	r5, r4
   105ec:	f240 8104 	bls.w	107f8 <__udivmoddi4+0x294>
   105f0:	4464      	add	r4, ip
   105f2:	3802      	subs	r0, #2
   105f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   105f8:	1b64      	subs	r4, r4, r5
   105fa:	2100      	movs	r1, #0
   105fc:	b11e      	cbz	r6, 10606 <__udivmoddi4+0xa2>
   105fe:	40dc      	lsrs	r4, r3
   10600:	2300      	movs	r3, #0
   10602:	e9c6 4300 	strd	r4, r3, [r6]
   10606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1060a:	428b      	cmp	r3, r1
   1060c:	d908      	bls.n	10620 <__udivmoddi4+0xbc>
   1060e:	2e00      	cmp	r6, #0
   10610:	f000 80ed 	beq.w	107ee <__udivmoddi4+0x28a>
   10614:	2100      	movs	r1, #0
   10616:	e9c6 0500 	strd	r0, r5, [r6]
   1061a:	4608      	mov	r0, r1
   1061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10620:	fab3 f183 	clz	r1, r3
   10624:	2900      	cmp	r1, #0
   10626:	d149      	bne.n	106bc <__udivmoddi4+0x158>
   10628:	42ab      	cmp	r3, r5
   1062a:	d302      	bcc.n	10632 <__udivmoddi4+0xce>
   1062c:	4282      	cmp	r2, r0
   1062e:	f200 80f8 	bhi.w	10822 <__udivmoddi4+0x2be>
   10632:	1a84      	subs	r4, r0, r2
   10634:	eb65 0203 	sbc.w	r2, r5, r3
   10638:	2001      	movs	r0, #1
   1063a:	4617      	mov	r7, r2
   1063c:	2e00      	cmp	r6, #0
   1063e:	d0e2      	beq.n	10606 <__udivmoddi4+0xa2>
   10640:	e9c6 4700 	strd	r4, r7, [r6]
   10644:	e7df      	b.n	10606 <__udivmoddi4+0xa2>
   10646:	b902      	cbnz	r2, 1064a <__udivmoddi4+0xe6>
   10648:	deff      	udf	#255	; 0xff
   1064a:	fab2 f382 	clz	r3, r2
   1064e:	2b00      	cmp	r3, #0
   10650:	f040 8090 	bne.w	10774 <__udivmoddi4+0x210>
   10654:	1a8a      	subs	r2, r1, r2
   10656:	ea4f 471c 	mov.w	r7, ip, lsr #16
   1065a:	fa1f fe8c 	uxth.w	lr, ip
   1065e:	2101      	movs	r1, #1
   10660:	fbb2 f5f7 	udiv	r5, r2, r7
   10664:	fb07 2015 	mls	r0, r7, r5, r2
   10668:	0c22      	lsrs	r2, r4, #16
   1066a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   1066e:	fb0e f005 	mul.w	r0, lr, r5
   10672:	4290      	cmp	r0, r2
   10674:	d908      	bls.n	10688 <__udivmoddi4+0x124>
   10676:	eb1c 0202 	adds.w	r2, ip, r2
   1067a:	f105 38ff 	add.w	r8, r5, #4294967295
   1067e:	d202      	bcs.n	10686 <__udivmoddi4+0x122>
   10680:	4290      	cmp	r0, r2
   10682:	f200 80cb 	bhi.w	1081c <__udivmoddi4+0x2b8>
   10686:	4645      	mov	r5, r8
   10688:	1a12      	subs	r2, r2, r0
   1068a:	b2a4      	uxth	r4, r4
   1068c:	fbb2 f0f7 	udiv	r0, r2, r7
   10690:	fb07 2210 	mls	r2, r7, r0, r2
   10694:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   10698:	fb0e fe00 	mul.w	lr, lr, r0
   1069c:	45a6      	cmp	lr, r4
   1069e:	d908      	bls.n	106b2 <__udivmoddi4+0x14e>
   106a0:	eb1c 0404 	adds.w	r4, ip, r4
   106a4:	f100 32ff 	add.w	r2, r0, #4294967295
   106a8:	d202      	bcs.n	106b0 <__udivmoddi4+0x14c>
   106aa:	45a6      	cmp	lr, r4
   106ac:	f200 80bb 	bhi.w	10826 <__udivmoddi4+0x2c2>
   106b0:	4610      	mov	r0, r2
   106b2:	eba4 040e 	sub.w	r4, r4, lr
   106b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   106ba:	e79f      	b.n	105fc <__udivmoddi4+0x98>
   106bc:	f1c1 0720 	rsb	r7, r1, #32
   106c0:	408b      	lsls	r3, r1
   106c2:	fa22 fc07 	lsr.w	ip, r2, r7
   106c6:	ea4c 0c03 	orr.w	ip, ip, r3
   106ca:	fa05 f401 	lsl.w	r4, r5, r1
   106ce:	fa20 f307 	lsr.w	r3, r0, r7
   106d2:	40fd      	lsrs	r5, r7
   106d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
   106d8:	4323      	orrs	r3, r4
   106da:	fbb5 f8f9 	udiv	r8, r5, r9
   106de:	fa1f fe8c 	uxth.w	lr, ip
   106e2:	fb09 5518 	mls	r5, r9, r8, r5
   106e6:	0c1c      	lsrs	r4, r3, #16
   106e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   106ec:	fb08 f50e 	mul.w	r5, r8, lr
   106f0:	42a5      	cmp	r5, r4
   106f2:	fa02 f201 	lsl.w	r2, r2, r1
   106f6:	fa00 f001 	lsl.w	r0, r0, r1
   106fa:	d90b      	bls.n	10714 <__udivmoddi4+0x1b0>
   106fc:	eb1c 0404 	adds.w	r4, ip, r4
   10700:	f108 3aff 	add.w	sl, r8, #4294967295
   10704:	f080 8088 	bcs.w	10818 <__udivmoddi4+0x2b4>
   10708:	42a5      	cmp	r5, r4
   1070a:	f240 8085 	bls.w	10818 <__udivmoddi4+0x2b4>
   1070e:	f1a8 0802 	sub.w	r8, r8, #2
   10712:	4464      	add	r4, ip
   10714:	1b64      	subs	r4, r4, r5
   10716:	b29d      	uxth	r5, r3
   10718:	fbb4 f3f9 	udiv	r3, r4, r9
   1071c:	fb09 4413 	mls	r4, r9, r3, r4
   10720:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   10724:	fb03 fe0e 	mul.w	lr, r3, lr
   10728:	45a6      	cmp	lr, r4
   1072a:	d908      	bls.n	1073e <__udivmoddi4+0x1da>
   1072c:	eb1c 0404 	adds.w	r4, ip, r4
   10730:	f103 35ff 	add.w	r5, r3, #4294967295
   10734:	d26c      	bcs.n	10810 <__udivmoddi4+0x2ac>
   10736:	45a6      	cmp	lr, r4
   10738:	d96a      	bls.n	10810 <__udivmoddi4+0x2ac>
   1073a:	3b02      	subs	r3, #2
   1073c:	4464      	add	r4, ip
   1073e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   10742:	fba3 9502 	umull	r9, r5, r3, r2
   10746:	eba4 040e 	sub.w	r4, r4, lr
   1074a:	42ac      	cmp	r4, r5
   1074c:	46c8      	mov	r8, r9
   1074e:	46ae      	mov	lr, r5
   10750:	d356      	bcc.n	10800 <__udivmoddi4+0x29c>
   10752:	d053      	beq.n	107fc <__udivmoddi4+0x298>
   10754:	b156      	cbz	r6, 1076c <__udivmoddi4+0x208>
   10756:	ebb0 0208 	subs.w	r2, r0, r8
   1075a:	eb64 040e 	sbc.w	r4, r4, lr
   1075e:	fa04 f707 	lsl.w	r7, r4, r7
   10762:	40ca      	lsrs	r2, r1
   10764:	40cc      	lsrs	r4, r1
   10766:	4317      	orrs	r7, r2
   10768:	e9c6 7400 	strd	r7, r4, [r6]
   1076c:	4618      	mov	r0, r3
   1076e:	2100      	movs	r1, #0
   10770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10774:	f1c3 0120 	rsb	r1, r3, #32
   10778:	fa02 fc03 	lsl.w	ip, r2, r3
   1077c:	fa20 f201 	lsr.w	r2, r0, r1
   10780:	fa25 f101 	lsr.w	r1, r5, r1
   10784:	409d      	lsls	r5, r3
   10786:	432a      	orrs	r2, r5
   10788:	ea4f 471c 	mov.w	r7, ip, lsr #16
   1078c:	fa1f fe8c 	uxth.w	lr, ip
   10790:	fbb1 f0f7 	udiv	r0, r1, r7
   10794:	fb07 1510 	mls	r5, r7, r0, r1
   10798:	0c11      	lsrs	r1, r2, #16
   1079a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
   1079e:	fb00 f50e 	mul.w	r5, r0, lr
   107a2:	428d      	cmp	r5, r1
   107a4:	fa04 f403 	lsl.w	r4, r4, r3
   107a8:	d908      	bls.n	107bc <__udivmoddi4+0x258>
   107aa:	eb1c 0101 	adds.w	r1, ip, r1
   107ae:	f100 38ff 	add.w	r8, r0, #4294967295
   107b2:	d22f      	bcs.n	10814 <__udivmoddi4+0x2b0>
   107b4:	428d      	cmp	r5, r1
   107b6:	d92d      	bls.n	10814 <__udivmoddi4+0x2b0>
   107b8:	3802      	subs	r0, #2
   107ba:	4461      	add	r1, ip
   107bc:	1b49      	subs	r1, r1, r5
   107be:	b292      	uxth	r2, r2
   107c0:	fbb1 f5f7 	udiv	r5, r1, r7
   107c4:	fb07 1115 	mls	r1, r7, r5, r1
   107c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   107cc:	fb05 f10e 	mul.w	r1, r5, lr
   107d0:	4291      	cmp	r1, r2
   107d2:	d908      	bls.n	107e6 <__udivmoddi4+0x282>
   107d4:	eb1c 0202 	adds.w	r2, ip, r2
   107d8:	f105 38ff 	add.w	r8, r5, #4294967295
   107dc:	d216      	bcs.n	1080c <__udivmoddi4+0x2a8>
   107de:	4291      	cmp	r1, r2
   107e0:	d914      	bls.n	1080c <__udivmoddi4+0x2a8>
   107e2:	3d02      	subs	r5, #2
   107e4:	4462      	add	r2, ip
   107e6:	1a52      	subs	r2, r2, r1
   107e8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
   107ec:	e738      	b.n	10660 <__udivmoddi4+0xfc>
   107ee:	4631      	mov	r1, r6
   107f0:	4630      	mov	r0, r6
   107f2:	e708      	b.n	10606 <__udivmoddi4+0xa2>
   107f4:	4639      	mov	r1, r7
   107f6:	e6e6      	b.n	105c6 <__udivmoddi4+0x62>
   107f8:	4610      	mov	r0, r2
   107fa:	e6fb      	b.n	105f4 <__udivmoddi4+0x90>
   107fc:	4548      	cmp	r0, r9
   107fe:	d2a9      	bcs.n	10754 <__udivmoddi4+0x1f0>
   10800:	ebb9 0802 	subs.w	r8, r9, r2
   10804:	eb65 0e0c 	sbc.w	lr, r5, ip
   10808:	3b01      	subs	r3, #1
   1080a:	e7a3      	b.n	10754 <__udivmoddi4+0x1f0>
   1080c:	4645      	mov	r5, r8
   1080e:	e7ea      	b.n	107e6 <__udivmoddi4+0x282>
   10810:	462b      	mov	r3, r5
   10812:	e794      	b.n	1073e <__udivmoddi4+0x1da>
   10814:	4640      	mov	r0, r8
   10816:	e7d1      	b.n	107bc <__udivmoddi4+0x258>
   10818:	46d0      	mov	r8, sl
   1081a:	e77b      	b.n	10714 <__udivmoddi4+0x1b0>
   1081c:	3d02      	subs	r5, #2
   1081e:	4462      	add	r2, ip
   10820:	e732      	b.n	10688 <__udivmoddi4+0x124>
   10822:	4608      	mov	r0, r1
   10824:	e70a      	b.n	1063c <__udivmoddi4+0xd8>
   10826:	4464      	add	r4, ip
   10828:	3802      	subs	r0, #2
   1082a:	e742      	b.n	106b2 <__udivmoddi4+0x14e>

0001082c <__aeabi_idiv0>:
   1082c:	4770      	bx	lr
   1082e:	bf00      	nop

00010830 <malloc>:
   10830:	4b02      	ldr	r3, [pc, #8]	; (1083c <malloc+0xc>)
   10832:	4601      	mov	r1, r0
   10834:	6818      	ldr	r0, [r3, #0]
   10836:	f000 b80b 	b.w	10850 <_malloc_r>
   1083a:	bf00      	nop
   1083c:	200093d4 	.word	0x200093d4

00010840 <free>:
   10840:	4b02      	ldr	r3, [pc, #8]	; (1084c <free+0xc>)
   10842:	4601      	mov	r1, r0
   10844:	6818      	ldr	r0, [r3, #0]
   10846:	f002 bc6d 	b.w	13124 <_free_r>
   1084a:	bf00      	nop
   1084c:	200093d4 	.word	0x200093d4

00010850 <_malloc_r>:
   10850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10854:	f101 060b 	add.w	r6, r1, #11
   10858:	2e16      	cmp	r6, #22
   1085a:	b083      	sub	sp, #12
   1085c:	4604      	mov	r4, r0
   1085e:	d824      	bhi.n	108aa <_malloc_r+0x5a>
   10860:	2910      	cmp	r1, #16
   10862:	f200 80ba 	bhi.w	109da <_malloc_r+0x18a>
   10866:	f000 faa3 	bl	10db0 <__malloc_lock>
   1086a:	2610      	movs	r6, #16
   1086c:	2218      	movs	r2, #24
   1086e:	2002      	movs	r0, #2
   10870:	4fb5      	ldr	r7, [pc, #724]	; (10b48 <_malloc_r+0x2f8>)
   10872:	443a      	add	r2, r7
   10874:	f1a2 0108 	sub.w	r1, r2, #8
   10878:	6853      	ldr	r3, [r2, #4]
   1087a:	428b      	cmp	r3, r1
   1087c:	f000 80ba 	beq.w	109f4 <_malloc_r+0x1a4>
   10880:	685a      	ldr	r2, [r3, #4]
   10882:	68d9      	ldr	r1, [r3, #12]
   10884:	f022 0203 	bic.w	r2, r2, #3
   10888:	441a      	add	r2, r3
   1088a:	689d      	ldr	r5, [r3, #8]
   1088c:	60e9      	str	r1, [r5, #12]
   1088e:	608d      	str	r5, [r1, #8]
   10890:	6851      	ldr	r1, [r2, #4]
   10892:	f041 0101 	orr.w	r1, r1, #1
   10896:	4620      	mov	r0, r4
   10898:	6051      	str	r1, [r2, #4]
   1089a:	f103 0508 	add.w	r5, r3, #8
   1089e:	f000 fa8d 	bl	10dbc <__malloc_unlock>
   108a2:	4628      	mov	r0, r5
   108a4:	b003      	add	sp, #12
   108a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108aa:	f036 0607 	bics.w	r6, r6, #7
   108ae:	f100 8094 	bmi.w	109da <_malloc_r+0x18a>
   108b2:	42b1      	cmp	r1, r6
   108b4:	f200 8091 	bhi.w	109da <_malloc_r+0x18a>
   108b8:	f000 fa7a 	bl	10db0 <__malloc_lock>
   108bc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   108c0:	f0c0 819a 	bcc.w	10bf8 <_malloc_r+0x3a8>
   108c4:	0a73      	lsrs	r3, r6, #9
   108c6:	f000 808f 	beq.w	109e8 <_malloc_r+0x198>
   108ca:	2b04      	cmp	r3, #4
   108cc:	f200 816f 	bhi.w	10bae <_malloc_r+0x35e>
   108d0:	09b3      	lsrs	r3, r6, #6
   108d2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   108d6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   108da:	00c3      	lsls	r3, r0, #3
   108dc:	4f9a      	ldr	r7, [pc, #616]	; (10b48 <_malloc_r+0x2f8>)
   108de:	443b      	add	r3, r7
   108e0:	f1a3 0508 	sub.w	r5, r3, #8
   108e4:	685b      	ldr	r3, [r3, #4]
   108e6:	429d      	cmp	r5, r3
   108e8:	d106      	bne.n	108f8 <_malloc_r+0xa8>
   108ea:	e00c      	b.n	10906 <_malloc_r+0xb6>
   108ec:	2900      	cmp	r1, #0
   108ee:	f280 8127 	bge.w	10b40 <_malloc_r+0x2f0>
   108f2:	68db      	ldr	r3, [r3, #12]
   108f4:	429d      	cmp	r5, r3
   108f6:	d006      	beq.n	10906 <_malloc_r+0xb6>
   108f8:	685a      	ldr	r2, [r3, #4]
   108fa:	f022 0203 	bic.w	r2, r2, #3
   108fe:	1b91      	subs	r1, r2, r6
   10900:	290f      	cmp	r1, #15
   10902:	ddf3      	ble.n	108ec <_malloc_r+0x9c>
   10904:	4660      	mov	r0, ip
   10906:	693d      	ldr	r5, [r7, #16]
   10908:	f8df c250 	ldr.w	ip, [pc, #592]	; 10b5c <_malloc_r+0x30c>
   1090c:	4565      	cmp	r5, ip
   1090e:	d07c      	beq.n	10a0a <_malloc_r+0x1ba>
   10910:	686a      	ldr	r2, [r5, #4]
   10912:	f022 0203 	bic.w	r2, r2, #3
   10916:	1b93      	subs	r3, r2, r6
   10918:	2b0f      	cmp	r3, #15
   1091a:	f300 817b 	bgt.w	10c14 <_malloc_r+0x3c4>
   1091e:	2b00      	cmp	r3, #0
   10920:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   10924:	f280 816c 	bge.w	10c00 <_malloc_r+0x3b0>
   10928:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1092c:	f080 811a 	bcs.w	10b64 <_malloc_r+0x314>
   10930:	08d3      	lsrs	r3, r2, #3
   10932:	6879      	ldr	r1, [r7, #4]
   10934:	3301      	adds	r3, #1
   10936:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   1093a:	2201      	movs	r2, #1
   1093c:	fa02 f20e 	lsl.w	r2, r2, lr
   10940:	430a      	orrs	r2, r1
   10942:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   10946:	f8c5 e008 	str.w	lr, [r5, #8]
   1094a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1094e:	3908      	subs	r1, #8
   10950:	60e9      	str	r1, [r5, #12]
   10952:	607a      	str	r2, [r7, #4]
   10954:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   10958:	f8ce 500c 	str.w	r5, [lr, #12]
   1095c:	1083      	asrs	r3, r0, #2
   1095e:	2101      	movs	r1, #1
   10960:	4099      	lsls	r1, r3
   10962:	4291      	cmp	r1, r2
   10964:	d857      	bhi.n	10a16 <_malloc_r+0x1c6>
   10966:	4211      	tst	r1, r2
   10968:	d106      	bne.n	10978 <_malloc_r+0x128>
   1096a:	f020 0003 	bic.w	r0, r0, #3
   1096e:	0049      	lsls	r1, r1, #1
   10970:	4211      	tst	r1, r2
   10972:	f100 0004 	add.w	r0, r0, #4
   10976:	d0fa      	beq.n	1096e <_malloc_r+0x11e>
   10978:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1097c:	464d      	mov	r5, r9
   1097e:	4686      	mov	lr, r0
   10980:	f8d5 800c 	ldr.w	r8, [r5, #12]
   10984:	4545      	cmp	r5, r8
   10986:	d108      	bne.n	1099a <_malloc_r+0x14a>
   10988:	e11d      	b.n	10bc6 <_malloc_r+0x376>
   1098a:	2b00      	cmp	r3, #0
   1098c:	f280 8124 	bge.w	10bd8 <_malloc_r+0x388>
   10990:	f8d8 800c 	ldr.w	r8, [r8, #12]
   10994:	4545      	cmp	r5, r8
   10996:	f000 8116 	beq.w	10bc6 <_malloc_r+0x376>
   1099a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1099e:	f022 0203 	bic.w	r2, r2, #3
   109a2:	1b93      	subs	r3, r2, r6
   109a4:	2b0f      	cmp	r3, #15
   109a6:	ddf0      	ble.n	1098a <_malloc_r+0x13a>
   109a8:	4620      	mov	r0, r4
   109aa:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   109ae:	eb08 0106 	add.w	r1, r8, r6
   109b2:	f046 0601 	orr.w	r6, r6, #1
   109b6:	f8c8 6004 	str.w	r6, [r8, #4]
   109ba:	60ec      	str	r4, [r5, #12]
   109bc:	60a5      	str	r5, [r4, #8]
   109be:	f043 0401 	orr.w	r4, r3, #1
   109c2:	e9c7 1104 	strd	r1, r1, [r7, #16]
   109c6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   109ca:	604c      	str	r4, [r1, #4]
   109cc:	f848 3002 	str.w	r3, [r8, r2]
   109d0:	f000 f9f4 	bl	10dbc <__malloc_unlock>
   109d4:	f108 0508 	add.w	r5, r8, #8
   109d8:	e002      	b.n	109e0 <_malloc_r+0x190>
   109da:	230c      	movs	r3, #12
   109dc:	6023      	str	r3, [r4, #0]
   109de:	2500      	movs	r5, #0
   109e0:	4628      	mov	r0, r5
   109e2:	b003      	add	sp, #12
   109e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109e8:	f44f 7300 	mov.w	r3, #512	; 0x200
   109ec:	2040      	movs	r0, #64	; 0x40
   109ee:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   109f2:	e773      	b.n	108dc <_malloc_r+0x8c>
   109f4:	68d3      	ldr	r3, [r2, #12]
   109f6:	429a      	cmp	r2, r3
   109f8:	bf08      	it	eq
   109fa:	3002      	addeq	r0, #2
   109fc:	f47f af40 	bne.w	10880 <_malloc_r+0x30>
   10a00:	693d      	ldr	r5, [r7, #16]
   10a02:	f8df c158 	ldr.w	ip, [pc, #344]	; 10b5c <_malloc_r+0x30c>
   10a06:	4565      	cmp	r5, ip
   10a08:	d182      	bne.n	10910 <_malloc_r+0xc0>
   10a0a:	687a      	ldr	r2, [r7, #4]
   10a0c:	1083      	asrs	r3, r0, #2
   10a0e:	2101      	movs	r1, #1
   10a10:	4099      	lsls	r1, r3
   10a12:	4291      	cmp	r1, r2
   10a14:	d9a7      	bls.n	10966 <_malloc_r+0x116>
   10a16:	68bd      	ldr	r5, [r7, #8]
   10a18:	686b      	ldr	r3, [r5, #4]
   10a1a:	f023 0903 	bic.w	r9, r3, #3
   10a1e:	454e      	cmp	r6, r9
   10a20:	d803      	bhi.n	10a2a <_malloc_r+0x1da>
   10a22:	eba9 0306 	sub.w	r3, r9, r6
   10a26:	2b0f      	cmp	r3, #15
   10a28:	dc7a      	bgt.n	10b20 <_malloc_r+0x2d0>
   10a2a:	f8df b134 	ldr.w	fp, [pc, #308]	; 10b60 <_malloc_r+0x310>
   10a2e:	4b47      	ldr	r3, [pc, #284]	; (10b4c <_malloc_r+0x2fc>)
   10a30:	f8db 2000 	ldr.w	r2, [fp]
   10a34:	681b      	ldr	r3, [r3, #0]
   10a36:	3201      	adds	r2, #1
   10a38:	4433      	add	r3, r6
   10a3a:	eb05 0a09 	add.w	sl, r5, r9
   10a3e:	f000 8133 	beq.w	10ca8 <_malloc_r+0x458>
   10a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   10a46:	330f      	adds	r3, #15
   10a48:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   10a4c:	f028 080f 	bic.w	r8, r8, #15
   10a50:	4641      	mov	r1, r8
   10a52:	4620      	mov	r0, r4
   10a54:	f001 ffd0 	bl	129f8 <_sbrk_r>
   10a58:	1c41      	adds	r1, r0, #1
   10a5a:	4602      	mov	r2, r0
   10a5c:	f000 80f3 	beq.w	10c46 <_malloc_r+0x3f6>
   10a60:	4582      	cmp	sl, r0
   10a62:	f200 80ee 	bhi.w	10c42 <_malloc_r+0x3f2>
   10a66:	4b3a      	ldr	r3, [pc, #232]	; (10b50 <_malloc_r+0x300>)
   10a68:	6819      	ldr	r1, [r3, #0]
   10a6a:	4441      	add	r1, r8
   10a6c:	6019      	str	r1, [r3, #0]
   10a6e:	4608      	mov	r0, r1
   10a70:	f000 814e 	beq.w	10d10 <_malloc_r+0x4c0>
   10a74:	f8db 1000 	ldr.w	r1, [fp]
   10a78:	9301      	str	r3, [sp, #4]
   10a7a:	3101      	adds	r1, #1
   10a7c:	bf1b      	ittet	ne
   10a7e:	eba2 010a 	subne.w	r1, r2, sl
   10a82:	1809      	addne	r1, r1, r0
   10a84:	f8cb 2000 	streq.w	r2, [fp]
   10a88:	6019      	strne	r1, [r3, #0]
   10a8a:	f012 0b07 	ands.w	fp, r2, #7
   10a8e:	f000 8117 	beq.w	10cc0 <_malloc_r+0x470>
   10a92:	f1cb 0108 	rsb	r1, fp, #8
   10a96:	440a      	add	r2, r1
   10a98:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   10a9c:	4490      	add	r8, r2
   10a9e:	3108      	adds	r1, #8
   10aa0:	eba1 0108 	sub.w	r1, r1, r8
   10aa4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   10aa8:	4651      	mov	r1, sl
   10aaa:	4620      	mov	r0, r4
   10aac:	9200      	str	r2, [sp, #0]
   10aae:	f001 ffa3 	bl	129f8 <_sbrk_r>
   10ab2:	1c42      	adds	r2, r0, #1
   10ab4:	e9dd 2300 	ldrd	r2, r3, [sp]
   10ab8:	f000 814f 	beq.w	10d5a <_malloc_r+0x50a>
   10abc:	1a80      	subs	r0, r0, r2
   10abe:	eb00 080a 	add.w	r8, r0, sl
   10ac2:	6819      	ldr	r1, [r3, #0]
   10ac4:	60ba      	str	r2, [r7, #8]
   10ac6:	f048 0001 	orr.w	r0, r8, #1
   10aca:	4451      	add	r1, sl
   10acc:	42bd      	cmp	r5, r7
   10ace:	6050      	str	r0, [r2, #4]
   10ad0:	6019      	str	r1, [r3, #0]
   10ad2:	f000 8129 	beq.w	10d28 <_malloc_r+0x4d8>
   10ad6:	f1b9 0f0f 	cmp.w	r9, #15
   10ada:	f240 8127 	bls.w	10d2c <_malloc_r+0x4dc>
   10ade:	6868      	ldr	r0, [r5, #4]
   10ae0:	f1a9 0c0c 	sub.w	ip, r9, #12
   10ae4:	f02c 0c07 	bic.w	ip, ip, #7
   10ae8:	f000 0001 	and.w	r0, r0, #1
   10aec:	ea40 000c 	orr.w	r0, r0, ip
   10af0:	6068      	str	r0, [r5, #4]
   10af2:	f04f 0e05 	mov.w	lr, #5
   10af6:	eb05 000c 	add.w	r0, r5, ip
   10afa:	f1bc 0f0f 	cmp.w	ip, #15
   10afe:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   10b02:	f200 8132 	bhi.w	10d6a <_malloc_r+0x51a>
   10b06:	6850      	ldr	r0, [r2, #4]
   10b08:	4615      	mov	r5, r2
   10b0a:	4b12      	ldr	r3, [pc, #72]	; (10b54 <_malloc_r+0x304>)
   10b0c:	681a      	ldr	r2, [r3, #0]
   10b0e:	428a      	cmp	r2, r1
   10b10:	bf38      	it	cc
   10b12:	6019      	strcc	r1, [r3, #0]
   10b14:	4b10      	ldr	r3, [pc, #64]	; (10b58 <_malloc_r+0x308>)
   10b16:	681a      	ldr	r2, [r3, #0]
   10b18:	428a      	cmp	r2, r1
   10b1a:	bf38      	it	cc
   10b1c:	6019      	strcc	r1, [r3, #0]
   10b1e:	e094      	b.n	10c4a <_malloc_r+0x3fa>
   10b20:	19aa      	adds	r2, r5, r6
   10b22:	f043 0301 	orr.w	r3, r3, #1
   10b26:	f046 0601 	orr.w	r6, r6, #1
   10b2a:	606e      	str	r6, [r5, #4]
   10b2c:	4620      	mov	r0, r4
   10b2e:	60ba      	str	r2, [r7, #8]
   10b30:	6053      	str	r3, [r2, #4]
   10b32:	f000 f943 	bl	10dbc <__malloc_unlock>
   10b36:	3508      	adds	r5, #8
   10b38:	4628      	mov	r0, r5
   10b3a:	b003      	add	sp, #12
   10b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b40:	68d9      	ldr	r1, [r3, #12]
   10b42:	441a      	add	r2, r3
   10b44:	e6a1      	b.n	1088a <_malloc_r+0x3a>
   10b46:	bf00      	nop
   10b48:	20008fb8 	.word	0x20008fb8
   10b4c:	200153d0 	.word	0x200153d0
   10b50:	200153a0 	.word	0x200153a0
   10b54:	200153c8 	.word	0x200153c8
   10b58:	200153cc 	.word	0x200153cc
   10b5c:	20008fc0 	.word	0x20008fc0
   10b60:	200093c0 	.word	0x200093c0
   10b64:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   10b68:	ea4f 2352 	mov.w	r3, r2, lsr #9
   10b6c:	d363      	bcc.n	10c36 <_malloc_r+0x3e6>
   10b6e:	2b14      	cmp	r3, #20
   10b70:	f200 80b7 	bhi.w	10ce2 <_malloc_r+0x492>
   10b74:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   10b78:	00c9      	lsls	r1, r1, #3
   10b7a:	335b      	adds	r3, #91	; 0x5b
   10b7c:	eb07 0e01 	add.w	lr, r7, r1
   10b80:	5879      	ldr	r1, [r7, r1]
   10b82:	f1ae 0e08 	sub.w	lr, lr, #8
   10b86:	458e      	cmp	lr, r1
   10b88:	f000 8091 	beq.w	10cae <_malloc_r+0x45e>
   10b8c:	684b      	ldr	r3, [r1, #4]
   10b8e:	f023 0303 	bic.w	r3, r3, #3
   10b92:	4293      	cmp	r3, r2
   10b94:	d902      	bls.n	10b9c <_malloc_r+0x34c>
   10b96:	6889      	ldr	r1, [r1, #8]
   10b98:	458e      	cmp	lr, r1
   10b9a:	d1f7      	bne.n	10b8c <_malloc_r+0x33c>
   10b9c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   10ba0:	687a      	ldr	r2, [r7, #4]
   10ba2:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   10ba6:	f8ce 5008 	str.w	r5, [lr, #8]
   10baa:	60cd      	str	r5, [r1, #12]
   10bac:	e6d6      	b.n	1095c <_malloc_r+0x10c>
   10bae:	2b14      	cmp	r3, #20
   10bb0:	d959      	bls.n	10c66 <_malloc_r+0x416>
   10bb2:	2b54      	cmp	r3, #84	; 0x54
   10bb4:	f200 809d 	bhi.w	10cf2 <_malloc_r+0x4a2>
   10bb8:	0b33      	lsrs	r3, r6, #12
   10bba:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   10bbe:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   10bc2:	00c3      	lsls	r3, r0, #3
   10bc4:	e68a      	b.n	108dc <_malloc_r+0x8c>
   10bc6:	f10e 0e01 	add.w	lr, lr, #1
   10bca:	f01e 0f03 	tst.w	lr, #3
   10bce:	f105 0508 	add.w	r5, r5, #8
   10bd2:	f47f aed5 	bne.w	10980 <_malloc_r+0x130>
   10bd6:	e051      	b.n	10c7c <_malloc_r+0x42c>
   10bd8:	4442      	add	r2, r8
   10bda:	4645      	mov	r5, r8
   10bdc:	6853      	ldr	r3, [r2, #4]
   10bde:	f8d8 100c 	ldr.w	r1, [r8, #12]
   10be2:	f043 0301 	orr.w	r3, r3, #1
   10be6:	6053      	str	r3, [r2, #4]
   10be8:	f855 3f08 	ldr.w	r3, [r5, #8]!
   10bec:	4620      	mov	r0, r4
   10bee:	60d9      	str	r1, [r3, #12]
   10bf0:	608b      	str	r3, [r1, #8]
   10bf2:	f000 f8e3 	bl	10dbc <__malloc_unlock>
   10bf6:	e6f3      	b.n	109e0 <_malloc_r+0x190>
   10bf8:	08f0      	lsrs	r0, r6, #3
   10bfa:	f106 0208 	add.w	r2, r6, #8
   10bfe:	e637      	b.n	10870 <_malloc_r+0x20>
   10c00:	442a      	add	r2, r5
   10c02:	4620      	mov	r0, r4
   10c04:	6853      	ldr	r3, [r2, #4]
   10c06:	f043 0301 	orr.w	r3, r3, #1
   10c0a:	6053      	str	r3, [r2, #4]
   10c0c:	3508      	adds	r5, #8
   10c0e:	f000 f8d5 	bl	10dbc <__malloc_unlock>
   10c12:	e6e5      	b.n	109e0 <_malloc_r+0x190>
   10c14:	19a9      	adds	r1, r5, r6
   10c16:	4620      	mov	r0, r4
   10c18:	f046 0601 	orr.w	r6, r6, #1
   10c1c:	f043 0401 	orr.w	r4, r3, #1
   10c20:	606e      	str	r6, [r5, #4]
   10c22:	e9c7 1104 	strd	r1, r1, [r7, #16]
   10c26:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   10c2a:	604c      	str	r4, [r1, #4]
   10c2c:	50ab      	str	r3, [r5, r2]
   10c2e:	f000 f8c5 	bl	10dbc <__malloc_unlock>
   10c32:	3508      	adds	r5, #8
   10c34:	e6d4      	b.n	109e0 <_malloc_r+0x190>
   10c36:	0993      	lsrs	r3, r2, #6
   10c38:	f103 0139 	add.w	r1, r3, #57	; 0x39
   10c3c:	00c9      	lsls	r1, r1, #3
   10c3e:	3338      	adds	r3, #56	; 0x38
   10c40:	e79c      	b.n	10b7c <_malloc_r+0x32c>
   10c42:	42bd      	cmp	r5, r7
   10c44:	d05f      	beq.n	10d06 <_malloc_r+0x4b6>
   10c46:	68bd      	ldr	r5, [r7, #8]
   10c48:	6868      	ldr	r0, [r5, #4]
   10c4a:	f020 0803 	bic.w	r8, r0, #3
   10c4e:	4546      	cmp	r6, r8
   10c50:	eba8 0306 	sub.w	r3, r8, r6
   10c54:	d802      	bhi.n	10c5c <_malloc_r+0x40c>
   10c56:	2b0f      	cmp	r3, #15
   10c58:	f73f af62 	bgt.w	10b20 <_malloc_r+0x2d0>
   10c5c:	4620      	mov	r0, r4
   10c5e:	f000 f8ad 	bl	10dbc <__malloc_unlock>
   10c62:	2500      	movs	r5, #0
   10c64:	e6bc      	b.n	109e0 <_malloc_r+0x190>
   10c66:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   10c6a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   10c6e:	00c3      	lsls	r3, r0, #3
   10c70:	e634      	b.n	108dc <_malloc_r+0x8c>
   10c72:	f859 3908 	ldr.w	r3, [r9], #-8
   10c76:	454b      	cmp	r3, r9
   10c78:	f040 8096 	bne.w	10da8 <_malloc_r+0x558>
   10c7c:	f010 0f03 	tst.w	r0, #3
   10c80:	f100 30ff 	add.w	r0, r0, #4294967295
   10c84:	d1f5      	bne.n	10c72 <_malloc_r+0x422>
   10c86:	687b      	ldr	r3, [r7, #4]
   10c88:	ea23 0301 	bic.w	r3, r3, r1
   10c8c:	607b      	str	r3, [r7, #4]
   10c8e:	0049      	lsls	r1, r1, #1
   10c90:	4299      	cmp	r1, r3
   10c92:	f63f aec0 	bhi.w	10a16 <_malloc_r+0x1c6>
   10c96:	b919      	cbnz	r1, 10ca0 <_malloc_r+0x450>
   10c98:	e6bd      	b.n	10a16 <_malloc_r+0x1c6>
   10c9a:	0049      	lsls	r1, r1, #1
   10c9c:	f10e 0e04 	add.w	lr, lr, #4
   10ca0:	4219      	tst	r1, r3
   10ca2:	d0fa      	beq.n	10c9a <_malloc_r+0x44a>
   10ca4:	4670      	mov	r0, lr
   10ca6:	e667      	b.n	10978 <_malloc_r+0x128>
   10ca8:	f103 0810 	add.w	r8, r3, #16
   10cac:	e6d0      	b.n	10a50 <_malloc_r+0x200>
   10cae:	109a      	asrs	r2, r3, #2
   10cb0:	f04f 0801 	mov.w	r8, #1
   10cb4:	687b      	ldr	r3, [r7, #4]
   10cb6:	fa08 f202 	lsl.w	r2, r8, r2
   10cba:	431a      	orrs	r2, r3
   10cbc:	607a      	str	r2, [r7, #4]
   10cbe:	e770      	b.n	10ba2 <_malloc_r+0x352>
   10cc0:	eb02 0108 	add.w	r1, r2, r8
   10cc4:	4249      	negs	r1, r1
   10cc6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   10cca:	4651      	mov	r1, sl
   10ccc:	4620      	mov	r0, r4
   10cce:	9200      	str	r2, [sp, #0]
   10cd0:	f001 fe92 	bl	129f8 <_sbrk_r>
   10cd4:	1c43      	adds	r3, r0, #1
   10cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
   10cda:	f47f aeef 	bne.w	10abc <_malloc_r+0x26c>
   10cde:	46da      	mov	sl, fp
   10ce0:	e6ef      	b.n	10ac2 <_malloc_r+0x272>
   10ce2:	2b54      	cmp	r3, #84	; 0x54
   10ce4:	d825      	bhi.n	10d32 <_malloc_r+0x4e2>
   10ce6:	0b13      	lsrs	r3, r2, #12
   10ce8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   10cec:	00c9      	lsls	r1, r1, #3
   10cee:	336e      	adds	r3, #110	; 0x6e
   10cf0:	e744      	b.n	10b7c <_malloc_r+0x32c>
   10cf2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   10cf6:	d825      	bhi.n	10d44 <_malloc_r+0x4f4>
   10cf8:	0bf3      	lsrs	r3, r6, #15
   10cfa:	f103 0078 	add.w	r0, r3, #120	; 0x78
   10cfe:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   10d02:	00c3      	lsls	r3, r0, #3
   10d04:	e5ea      	b.n	108dc <_malloc_r+0x8c>
   10d06:	4b29      	ldr	r3, [pc, #164]	; (10dac <_malloc_r+0x55c>)
   10d08:	6818      	ldr	r0, [r3, #0]
   10d0a:	4440      	add	r0, r8
   10d0c:	6018      	str	r0, [r3, #0]
   10d0e:	e6b1      	b.n	10a74 <_malloc_r+0x224>
   10d10:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   10d14:	f1bc 0f00 	cmp.w	ip, #0
   10d18:	f47f aeac 	bne.w	10a74 <_malloc_r+0x224>
   10d1c:	68bd      	ldr	r5, [r7, #8]
   10d1e:	44c8      	add	r8, r9
   10d20:	f048 0001 	orr.w	r0, r8, #1
   10d24:	6068      	str	r0, [r5, #4]
   10d26:	e6f0      	b.n	10b0a <_malloc_r+0x2ba>
   10d28:	4615      	mov	r5, r2
   10d2a:	e6ee      	b.n	10b0a <_malloc_r+0x2ba>
   10d2c:	2301      	movs	r3, #1
   10d2e:	6053      	str	r3, [r2, #4]
   10d30:	e794      	b.n	10c5c <_malloc_r+0x40c>
   10d32:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   10d36:	d823      	bhi.n	10d80 <_malloc_r+0x530>
   10d38:	0bd3      	lsrs	r3, r2, #15
   10d3a:	f103 0178 	add.w	r1, r3, #120	; 0x78
   10d3e:	00c9      	lsls	r1, r1, #3
   10d40:	3377      	adds	r3, #119	; 0x77
   10d42:	e71b      	b.n	10b7c <_malloc_r+0x32c>
   10d44:	f240 5254 	movw	r2, #1364	; 0x554
   10d48:	4293      	cmp	r3, r2
   10d4a:	d823      	bhi.n	10d94 <_malloc_r+0x544>
   10d4c:	0cb3      	lsrs	r3, r6, #18
   10d4e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   10d52:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   10d56:	00c3      	lsls	r3, r0, #3
   10d58:	e5c0      	b.n	108dc <_malloc_r+0x8c>
   10d5a:	f1ab 0b08 	sub.w	fp, fp, #8
   10d5e:	44d8      	add	r8, fp
   10d60:	eba8 0802 	sub.w	r8, r8, r2
   10d64:	f04f 0a00 	mov.w	sl, #0
   10d68:	e6ab      	b.n	10ac2 <_malloc_r+0x272>
   10d6a:	f105 0108 	add.w	r1, r5, #8
   10d6e:	4620      	mov	r0, r4
   10d70:	9300      	str	r3, [sp, #0]
   10d72:	f002 f9d7 	bl	13124 <_free_r>
   10d76:	68bd      	ldr	r5, [r7, #8]
   10d78:	9b00      	ldr	r3, [sp, #0]
   10d7a:	6868      	ldr	r0, [r5, #4]
   10d7c:	6819      	ldr	r1, [r3, #0]
   10d7e:	e6c4      	b.n	10b0a <_malloc_r+0x2ba>
   10d80:	f240 5154 	movw	r1, #1364	; 0x554
   10d84:	428b      	cmp	r3, r1
   10d86:	d80b      	bhi.n	10da0 <_malloc_r+0x550>
   10d88:	0c93      	lsrs	r3, r2, #18
   10d8a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   10d8e:	00c9      	lsls	r1, r1, #3
   10d90:	337c      	adds	r3, #124	; 0x7c
   10d92:	e6f3      	b.n	10b7c <_malloc_r+0x32c>
   10d94:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   10d98:	207f      	movs	r0, #127	; 0x7f
   10d9a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   10d9e:	e59d      	b.n	108dc <_malloc_r+0x8c>
   10da0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   10da4:	237e      	movs	r3, #126	; 0x7e
   10da6:	e6e9      	b.n	10b7c <_malloc_r+0x32c>
   10da8:	687b      	ldr	r3, [r7, #4]
   10daa:	e770      	b.n	10c8e <_malloc_r+0x43e>
   10dac:	200153a0 	.word	0x200153a0

00010db0 <__malloc_lock>:
   10db0:	4801      	ldr	r0, [pc, #4]	; (10db8 <__malloc_lock+0x8>)
   10db2:	f001 be77 	b.w	12aa4 <__retarget_lock_acquire_recursive>
   10db6:	bf00      	nop
   10db8:	20015398 	.word	0x20015398

00010dbc <__malloc_unlock>:
   10dbc:	4801      	ldr	r0, [pc, #4]	; (10dc4 <__malloc_unlock+0x8>)
   10dbe:	f001 be73 	b.w	12aa8 <__retarget_lock_release_recursive>
   10dc2:	bf00      	nop
   10dc4:	20015398 	.word	0x20015398

00010dc8 <realloc>:
   10dc8:	b410      	push	{r4}
   10dca:	4c04      	ldr	r4, [pc, #16]	; (10ddc <realloc+0x14>)
   10dcc:	4603      	mov	r3, r0
   10dce:	460a      	mov	r2, r1
   10dd0:	6820      	ldr	r0, [r4, #0]
   10dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
   10dd6:	4619      	mov	r1, r3
   10dd8:	f000 b802 	b.w	10de0 <_realloc_r>
   10ddc:	200093d4 	.word	0x200093d4

00010de0 <_realloc_r>:
   10de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10de4:	4617      	mov	r7, r2
   10de6:	2900      	cmp	r1, #0
   10de8:	f000 8098 	beq.w	10f1c <_realloc_r+0x13c>
   10dec:	460c      	mov	r4, r1
   10dee:	f107 050b 	add.w	r5, r7, #11
   10df2:	4680      	mov	r8, r0
   10df4:	f7ff ffdc 	bl	10db0 <__malloc_lock>
   10df8:	2d16      	cmp	r5, #22
   10dfa:	f854 1c04 	ldr.w	r1, [r4, #-4]
   10dfe:	d85b      	bhi.n	10eb8 <_realloc_r+0xd8>
   10e00:	2510      	movs	r5, #16
   10e02:	462a      	mov	r2, r5
   10e04:	42af      	cmp	r7, r5
   10e06:	d85c      	bhi.n	10ec2 <_realloc_r+0xe2>
   10e08:	f021 0603 	bic.w	r6, r1, #3
   10e0c:	4296      	cmp	r6, r2
   10e0e:	f1a4 0908 	sub.w	r9, r4, #8
   10e12:	da62      	bge.n	10eda <_realloc_r+0xfa>
   10e14:	4bbc      	ldr	r3, [pc, #752]	; (11108 <_realloc_r+0x328>)
   10e16:	f8d3 c008 	ldr.w	ip, [r3, #8]
   10e1a:	eb09 0006 	add.w	r0, r9, r6
   10e1e:	4584      	cmp	ip, r0
   10e20:	f000 8097 	beq.w	10f52 <_realloc_r+0x172>
   10e24:	f8d0 c004 	ldr.w	ip, [r0, #4]
   10e28:	f02c 0301 	bic.w	r3, ip, #1
   10e2c:	4403      	add	r3, r0
   10e2e:	685b      	ldr	r3, [r3, #4]
   10e30:	07db      	lsls	r3, r3, #31
   10e32:	d468      	bmi.n	10f06 <_realloc_r+0x126>
   10e34:	f02c 0c03 	bic.w	ip, ip, #3
   10e38:	eb06 030c 	add.w	r3, r6, ip
   10e3c:	4293      	cmp	r3, r2
   10e3e:	da47      	bge.n	10ed0 <_realloc_r+0xf0>
   10e40:	07cb      	lsls	r3, r1, #31
   10e42:	d410      	bmi.n	10e66 <_realloc_r+0x86>
   10e44:	f854 3c08 	ldr.w	r3, [r4, #-8]
   10e48:	eba9 0a03 	sub.w	sl, r9, r3
   10e4c:	f8da 3004 	ldr.w	r3, [sl, #4]
   10e50:	f023 0103 	bic.w	r1, r3, #3
   10e54:	448c      	add	ip, r1
   10e56:	44b4      	add	ip, r6
   10e58:	4594      	cmp	ip, r2
   10e5a:	f280 8111 	bge.w	11080 <_realloc_r+0x2a0>
   10e5e:	1873      	adds	r3, r6, r1
   10e60:	4293      	cmp	r3, r2
   10e62:	f280 80e8 	bge.w	11036 <_realloc_r+0x256>
   10e66:	4639      	mov	r1, r7
   10e68:	4640      	mov	r0, r8
   10e6a:	f7ff fcf1 	bl	10850 <_malloc_r>
   10e6e:	4607      	mov	r7, r0
   10e70:	b1e0      	cbz	r0, 10eac <_realloc_r+0xcc>
   10e72:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10e76:	f023 0301 	bic.w	r3, r3, #1
   10e7a:	444b      	add	r3, r9
   10e7c:	f1a0 0208 	sub.w	r2, r0, #8
   10e80:	4293      	cmp	r3, r2
   10e82:	f000 80d2 	beq.w	1102a <_realloc_r+0x24a>
   10e86:	1f32      	subs	r2, r6, #4
   10e88:	2a24      	cmp	r2, #36	; 0x24
   10e8a:	f200 80f5 	bhi.w	11078 <_realloc_r+0x298>
   10e8e:	2a13      	cmp	r2, #19
   10e90:	f200 80ac 	bhi.w	10fec <_realloc_r+0x20c>
   10e94:	4603      	mov	r3, r0
   10e96:	4622      	mov	r2, r4
   10e98:	6811      	ldr	r1, [r2, #0]
   10e9a:	6019      	str	r1, [r3, #0]
   10e9c:	6851      	ldr	r1, [r2, #4]
   10e9e:	6059      	str	r1, [r3, #4]
   10ea0:	6892      	ldr	r2, [r2, #8]
   10ea2:	609a      	str	r2, [r3, #8]
   10ea4:	4621      	mov	r1, r4
   10ea6:	4640      	mov	r0, r8
   10ea8:	f002 f93c 	bl	13124 <_free_r>
   10eac:	4640      	mov	r0, r8
   10eae:	f7ff ff85 	bl	10dbc <__malloc_unlock>
   10eb2:	4638      	mov	r0, r7
   10eb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10eb8:	f025 0507 	bic.w	r5, r5, #7
   10ebc:	2d00      	cmp	r5, #0
   10ebe:	462a      	mov	r2, r5
   10ec0:	daa0      	bge.n	10e04 <_realloc_r+0x24>
   10ec2:	230c      	movs	r3, #12
   10ec4:	f8c8 3000 	str.w	r3, [r8]
   10ec8:	2700      	movs	r7, #0
   10eca:	4638      	mov	r0, r7
   10ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ed0:	461e      	mov	r6, r3
   10ed2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   10ed6:	60d3      	str	r3, [r2, #12]
   10ed8:	609a      	str	r2, [r3, #8]
   10eda:	1b73      	subs	r3, r6, r5
   10edc:	2b0f      	cmp	r3, #15
   10ede:	d822      	bhi.n	10f26 <_realloc_r+0x146>
   10ee0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   10ee4:	f003 0301 	and.w	r3, r3, #1
   10ee8:	4333      	orrs	r3, r6
   10eea:	444e      	add	r6, r9
   10eec:	f8c9 3004 	str.w	r3, [r9, #4]
   10ef0:	6873      	ldr	r3, [r6, #4]
   10ef2:	f043 0301 	orr.w	r3, r3, #1
   10ef6:	6073      	str	r3, [r6, #4]
   10ef8:	4640      	mov	r0, r8
   10efa:	4627      	mov	r7, r4
   10efc:	f7ff ff5e 	bl	10dbc <__malloc_unlock>
   10f00:	4638      	mov	r0, r7
   10f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f06:	07c9      	lsls	r1, r1, #31
   10f08:	d4ad      	bmi.n	10e66 <_realloc_r+0x86>
   10f0a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   10f0e:	eba9 0a03 	sub.w	sl, r9, r3
   10f12:	f8da 1004 	ldr.w	r1, [sl, #4]
   10f16:	f021 0103 	bic.w	r1, r1, #3
   10f1a:	e7a0      	b.n	10e5e <_realloc_r+0x7e>
   10f1c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f20:	4611      	mov	r1, r2
   10f22:	f7ff bc95 	b.w	10850 <_malloc_r>
   10f26:	f8d9 2004 	ldr.w	r2, [r9, #4]
   10f2a:	eb09 0105 	add.w	r1, r9, r5
   10f2e:	f002 0201 	and.w	r2, r2, #1
   10f32:	444e      	add	r6, r9
   10f34:	f043 0301 	orr.w	r3, r3, #1
   10f38:	432a      	orrs	r2, r5
   10f3a:	f8c9 2004 	str.w	r2, [r9, #4]
   10f3e:	604b      	str	r3, [r1, #4]
   10f40:	6873      	ldr	r3, [r6, #4]
   10f42:	f043 0301 	orr.w	r3, r3, #1
   10f46:	3108      	adds	r1, #8
   10f48:	6073      	str	r3, [r6, #4]
   10f4a:	4640      	mov	r0, r8
   10f4c:	f002 f8ea 	bl	13124 <_free_r>
   10f50:	e7d2      	b.n	10ef8 <_realloc_r+0x118>
   10f52:	f8dc 0004 	ldr.w	r0, [ip, #4]
   10f56:	f020 0b03 	bic.w	fp, r0, #3
   10f5a:	eb06 0c0b 	add.w	ip, r6, fp
   10f5e:	f105 0010 	add.w	r0, r5, #16
   10f62:	4584      	cmp	ip, r0
   10f64:	da4d      	bge.n	11002 <_realloc_r+0x222>
   10f66:	07c9      	lsls	r1, r1, #31
   10f68:	f53f af7d 	bmi.w	10e66 <_realloc_r+0x86>
   10f6c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   10f70:	eba9 0a01 	sub.w	sl, r9, r1
   10f74:	f8da 1004 	ldr.w	r1, [sl, #4]
   10f78:	f021 0103 	bic.w	r1, r1, #3
   10f7c:	448b      	add	fp, r1
   10f7e:	44b3      	add	fp, r6
   10f80:	4558      	cmp	r0, fp
   10f82:	f73f af6c 	bgt.w	10e5e <_realloc_r+0x7e>
   10f86:	4657      	mov	r7, sl
   10f88:	f8da 100c 	ldr.w	r1, [sl, #12]
   10f8c:	f857 0f08 	ldr.w	r0, [r7, #8]!
   10f90:	1f32      	subs	r2, r6, #4
   10f92:	2a24      	cmp	r2, #36	; 0x24
   10f94:	60c1      	str	r1, [r0, #12]
   10f96:	6088      	str	r0, [r1, #8]
   10f98:	f200 80db 	bhi.w	11152 <_realloc_r+0x372>
   10f9c:	2a13      	cmp	r2, #19
   10f9e:	f240 80d6 	bls.w	1114e <_realloc_r+0x36e>
   10fa2:	6821      	ldr	r1, [r4, #0]
   10fa4:	f8ca 1008 	str.w	r1, [sl, #8]
   10fa8:	6861      	ldr	r1, [r4, #4]
   10faa:	f8ca 100c 	str.w	r1, [sl, #12]
   10fae:	2a1b      	cmp	r2, #27
   10fb0:	f200 80df 	bhi.w	11172 <_realloc_r+0x392>
   10fb4:	3408      	adds	r4, #8
   10fb6:	f10a 0210 	add.w	r2, sl, #16
   10fba:	6821      	ldr	r1, [r4, #0]
   10fbc:	6011      	str	r1, [r2, #0]
   10fbe:	6861      	ldr	r1, [r4, #4]
   10fc0:	6051      	str	r1, [r2, #4]
   10fc2:	68a1      	ldr	r1, [r4, #8]
   10fc4:	6091      	str	r1, [r2, #8]
   10fc6:	eb0a 0105 	add.w	r1, sl, r5
   10fca:	ebab 0205 	sub.w	r2, fp, r5
   10fce:	f042 0201 	orr.w	r2, r2, #1
   10fd2:	6099      	str	r1, [r3, #8]
   10fd4:	604a      	str	r2, [r1, #4]
   10fd6:	f8da 3004 	ldr.w	r3, [sl, #4]
   10fda:	f003 0301 	and.w	r3, r3, #1
   10fde:	432b      	orrs	r3, r5
   10fe0:	4640      	mov	r0, r8
   10fe2:	f8ca 3004 	str.w	r3, [sl, #4]
   10fe6:	f7ff fee9 	bl	10dbc <__malloc_unlock>
   10fea:	e76e      	b.n	10eca <_realloc_r+0xea>
   10fec:	6823      	ldr	r3, [r4, #0]
   10fee:	6003      	str	r3, [r0, #0]
   10ff0:	6863      	ldr	r3, [r4, #4]
   10ff2:	6043      	str	r3, [r0, #4]
   10ff4:	2a1b      	cmp	r2, #27
   10ff6:	d868      	bhi.n	110ca <_realloc_r+0x2ea>
   10ff8:	f104 0208 	add.w	r2, r4, #8
   10ffc:	f100 0308 	add.w	r3, r0, #8
   11000:	e74a      	b.n	10e98 <_realloc_r+0xb8>
   11002:	eb09 0205 	add.w	r2, r9, r5
   11006:	609a      	str	r2, [r3, #8]
   11008:	ebac 0305 	sub.w	r3, ip, r5
   1100c:	f043 0301 	orr.w	r3, r3, #1
   11010:	6053      	str	r3, [r2, #4]
   11012:	f854 3c04 	ldr.w	r3, [r4, #-4]
   11016:	f003 0301 	and.w	r3, r3, #1
   1101a:	432b      	orrs	r3, r5
   1101c:	4640      	mov	r0, r8
   1101e:	f844 3c04 	str.w	r3, [r4, #-4]
   11022:	f7ff fecb 	bl	10dbc <__malloc_unlock>
   11026:	4627      	mov	r7, r4
   11028:	e74f      	b.n	10eca <_realloc_r+0xea>
   1102a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1102e:	f023 0303 	bic.w	r3, r3, #3
   11032:	441e      	add	r6, r3
   11034:	e751      	b.n	10eda <_realloc_r+0xfa>
   11036:	4657      	mov	r7, sl
   11038:	f8da 100c 	ldr.w	r1, [sl, #12]
   1103c:	f857 0f08 	ldr.w	r0, [r7, #8]!
   11040:	1f32      	subs	r2, r6, #4
   11042:	2a24      	cmp	r2, #36	; 0x24
   11044:	60c1      	str	r1, [r0, #12]
   11046:	6088      	str	r0, [r1, #8]
   11048:	d84c      	bhi.n	110e4 <_realloc_r+0x304>
   1104a:	2a13      	cmp	r2, #19
   1104c:	d948      	bls.n	110e0 <_realloc_r+0x300>
   1104e:	6821      	ldr	r1, [r4, #0]
   11050:	f8ca 1008 	str.w	r1, [sl, #8]
   11054:	6861      	ldr	r1, [r4, #4]
   11056:	f8ca 100c 	str.w	r1, [sl, #12]
   1105a:	2a1b      	cmp	r2, #27
   1105c:	d856      	bhi.n	1110c <_realloc_r+0x32c>
   1105e:	3408      	adds	r4, #8
   11060:	f10a 0210 	add.w	r2, sl, #16
   11064:	461e      	mov	r6, r3
   11066:	6823      	ldr	r3, [r4, #0]
   11068:	6013      	str	r3, [r2, #0]
   1106a:	6863      	ldr	r3, [r4, #4]
   1106c:	6053      	str	r3, [r2, #4]
   1106e:	68a3      	ldr	r3, [r4, #8]
   11070:	6093      	str	r3, [r2, #8]
   11072:	46d1      	mov	r9, sl
   11074:	463c      	mov	r4, r7
   11076:	e730      	b.n	10eda <_realloc_r+0xfa>
   11078:	4621      	mov	r1, r4
   1107a:	f001 fadd 	bl	12638 <memmove>
   1107e:	e711      	b.n	10ea4 <_realloc_r+0xc4>
   11080:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   11084:	4657      	mov	r7, sl
   11086:	60cb      	str	r3, [r1, #12]
   11088:	6099      	str	r1, [r3, #8]
   1108a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1108e:	f8da 300c 	ldr.w	r3, [sl, #12]
   11092:	60cb      	str	r3, [r1, #12]
   11094:	1f32      	subs	r2, r6, #4
   11096:	2a24      	cmp	r2, #36	; 0x24
   11098:	6099      	str	r1, [r3, #8]
   1109a:	d82d      	bhi.n	110f8 <_realloc_r+0x318>
   1109c:	2a13      	cmp	r2, #19
   1109e:	d929      	bls.n	110f4 <_realloc_r+0x314>
   110a0:	6823      	ldr	r3, [r4, #0]
   110a2:	f8ca 3008 	str.w	r3, [sl, #8]
   110a6:	6863      	ldr	r3, [r4, #4]
   110a8:	f8ca 300c 	str.w	r3, [sl, #12]
   110ac:	2a1b      	cmp	r2, #27
   110ae:	d842      	bhi.n	11136 <_realloc_r+0x356>
   110b0:	3408      	adds	r4, #8
   110b2:	f10a 0310 	add.w	r3, sl, #16
   110b6:	6822      	ldr	r2, [r4, #0]
   110b8:	601a      	str	r2, [r3, #0]
   110ba:	6862      	ldr	r2, [r4, #4]
   110bc:	605a      	str	r2, [r3, #4]
   110be:	68a2      	ldr	r2, [r4, #8]
   110c0:	609a      	str	r2, [r3, #8]
   110c2:	4666      	mov	r6, ip
   110c4:	46d1      	mov	r9, sl
   110c6:	463c      	mov	r4, r7
   110c8:	e707      	b.n	10eda <_realloc_r+0xfa>
   110ca:	68a3      	ldr	r3, [r4, #8]
   110cc:	6083      	str	r3, [r0, #8]
   110ce:	68e3      	ldr	r3, [r4, #12]
   110d0:	60c3      	str	r3, [r0, #12]
   110d2:	2a24      	cmp	r2, #36	; 0x24
   110d4:	d026      	beq.n	11124 <_realloc_r+0x344>
   110d6:	f104 0210 	add.w	r2, r4, #16
   110da:	f100 0310 	add.w	r3, r0, #16
   110de:	e6db      	b.n	10e98 <_realloc_r+0xb8>
   110e0:	463a      	mov	r2, r7
   110e2:	e7bf      	b.n	11064 <_realloc_r+0x284>
   110e4:	4621      	mov	r1, r4
   110e6:	4638      	mov	r0, r7
   110e8:	461e      	mov	r6, r3
   110ea:	46d1      	mov	r9, sl
   110ec:	f001 faa4 	bl	12638 <memmove>
   110f0:	463c      	mov	r4, r7
   110f2:	e6f2      	b.n	10eda <_realloc_r+0xfa>
   110f4:	463b      	mov	r3, r7
   110f6:	e7de      	b.n	110b6 <_realloc_r+0x2d6>
   110f8:	4621      	mov	r1, r4
   110fa:	4638      	mov	r0, r7
   110fc:	4666      	mov	r6, ip
   110fe:	46d1      	mov	r9, sl
   11100:	f001 fa9a 	bl	12638 <memmove>
   11104:	463c      	mov	r4, r7
   11106:	e6e8      	b.n	10eda <_realloc_r+0xfa>
   11108:	20008fb8 	.word	0x20008fb8
   1110c:	68a1      	ldr	r1, [r4, #8]
   1110e:	f8ca 1010 	str.w	r1, [sl, #16]
   11112:	68e1      	ldr	r1, [r4, #12]
   11114:	f8ca 1014 	str.w	r1, [sl, #20]
   11118:	2a24      	cmp	r2, #36	; 0x24
   1111a:	d020      	beq.n	1115e <_realloc_r+0x37e>
   1111c:	3410      	adds	r4, #16
   1111e:	f10a 0218 	add.w	r2, sl, #24
   11122:	e79f      	b.n	11064 <_realloc_r+0x284>
   11124:	6923      	ldr	r3, [r4, #16]
   11126:	6103      	str	r3, [r0, #16]
   11128:	6961      	ldr	r1, [r4, #20]
   1112a:	6141      	str	r1, [r0, #20]
   1112c:	f104 0218 	add.w	r2, r4, #24
   11130:	f100 0318 	add.w	r3, r0, #24
   11134:	e6b0      	b.n	10e98 <_realloc_r+0xb8>
   11136:	68a3      	ldr	r3, [r4, #8]
   11138:	f8ca 3010 	str.w	r3, [sl, #16]
   1113c:	68e3      	ldr	r3, [r4, #12]
   1113e:	f8ca 3014 	str.w	r3, [sl, #20]
   11142:	2a24      	cmp	r2, #36	; 0x24
   11144:	d021      	beq.n	1118a <_realloc_r+0x3aa>
   11146:	3410      	adds	r4, #16
   11148:	f10a 0318 	add.w	r3, sl, #24
   1114c:	e7b3      	b.n	110b6 <_realloc_r+0x2d6>
   1114e:	463a      	mov	r2, r7
   11150:	e733      	b.n	10fba <_realloc_r+0x1da>
   11152:	4621      	mov	r1, r4
   11154:	4638      	mov	r0, r7
   11156:	f001 fa6f 	bl	12638 <memmove>
   1115a:	4b16      	ldr	r3, [pc, #88]	; (111b4 <_realloc_r+0x3d4>)
   1115c:	e733      	b.n	10fc6 <_realloc_r+0x1e6>
   1115e:	6922      	ldr	r2, [r4, #16]
   11160:	f8ca 2018 	str.w	r2, [sl, #24]
   11164:	6962      	ldr	r2, [r4, #20]
   11166:	f8ca 201c 	str.w	r2, [sl, #28]
   1116a:	3418      	adds	r4, #24
   1116c:	f10a 0220 	add.w	r2, sl, #32
   11170:	e778      	b.n	11064 <_realloc_r+0x284>
   11172:	68a1      	ldr	r1, [r4, #8]
   11174:	f8ca 1010 	str.w	r1, [sl, #16]
   11178:	68e1      	ldr	r1, [r4, #12]
   1117a:	f8ca 1014 	str.w	r1, [sl, #20]
   1117e:	2a24      	cmp	r2, #36	; 0x24
   11180:	d00d      	beq.n	1119e <_realloc_r+0x3be>
   11182:	3410      	adds	r4, #16
   11184:	f10a 0218 	add.w	r2, sl, #24
   11188:	e717      	b.n	10fba <_realloc_r+0x1da>
   1118a:	6923      	ldr	r3, [r4, #16]
   1118c:	f8ca 3018 	str.w	r3, [sl, #24]
   11190:	6963      	ldr	r3, [r4, #20]
   11192:	f8ca 301c 	str.w	r3, [sl, #28]
   11196:	3418      	adds	r4, #24
   11198:	f10a 0320 	add.w	r3, sl, #32
   1119c:	e78b      	b.n	110b6 <_realloc_r+0x2d6>
   1119e:	6922      	ldr	r2, [r4, #16]
   111a0:	f8ca 2018 	str.w	r2, [sl, #24]
   111a4:	6962      	ldr	r2, [r4, #20]
   111a6:	f8ca 201c 	str.w	r2, [sl, #28]
   111aa:	3418      	adds	r4, #24
   111ac:	f10a 0220 	add.w	r2, sl, #32
   111b0:	e703      	b.n	10fba <_realloc_r+0x1da>
   111b2:	bf00      	nop
   111b4:	20008fb8 	.word	0x20008fb8

000111b8 <_strtod_l>:
   111b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111bc:	ed2d 8b10 	vpush	{d8-d15}
   111c0:	b097      	sub	sp, #92	; 0x5c
   111c2:	468a      	mov	sl, r1
   111c4:	2100      	movs	r1, #0
   111c6:	9207      	str	r2, [sp, #28]
   111c8:	9112      	str	r1, [sp, #72]	; 0x48
   111ca:	2200      	movs	r2, #0
   111cc:	2100      	movs	r1, #0
   111ce:	e9cd 1204 	strd	r1, r2, [sp, #16]
   111d2:	4680      	mov	r8, r0
   111d4:	4651      	mov	r1, sl
   111d6:	9111      	str	r1, [sp, #68]	; 0x44
   111d8:	460f      	mov	r7, r1
   111da:	f811 2b01 	ldrb.w	r2, [r1], #1
   111de:	2a2d      	cmp	r2, #45	; 0x2d
   111e0:	d85e      	bhi.n	112a0 <_strtod_l+0xe8>
   111e2:	a001      	add	r0, pc, #4	; (adr r0, 111e8 <_strtod_l+0x30>)
   111e4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   111e8:	00011389 	.word	0x00011389
   111ec:	000112a1 	.word	0x000112a1
   111f0:	000112a1 	.word	0x000112a1
   111f4:	000112a1 	.word	0x000112a1
   111f8:	000112a1 	.word	0x000112a1
   111fc:	000112a1 	.word	0x000112a1
   11200:	000112a1 	.word	0x000112a1
   11204:	000112a1 	.word	0x000112a1
   11208:	000112a1 	.word	0x000112a1
   1120c:	000111d7 	.word	0x000111d7
   11210:	000111d7 	.word	0x000111d7
   11214:	000111d7 	.word	0x000111d7
   11218:	000111d7 	.word	0x000111d7
   1121c:	000111d7 	.word	0x000111d7
   11220:	000112a1 	.word	0x000112a1
   11224:	000112a1 	.word	0x000112a1
   11228:	000112a1 	.word	0x000112a1
   1122c:	000112a1 	.word	0x000112a1
   11230:	000112a1 	.word	0x000112a1
   11234:	000112a1 	.word	0x000112a1
   11238:	000112a1 	.word	0x000112a1
   1123c:	000112a1 	.word	0x000112a1
   11240:	000112a1 	.word	0x000112a1
   11244:	000112a1 	.word	0x000112a1
   11248:	000112a1 	.word	0x000112a1
   1124c:	000112a1 	.word	0x000112a1
   11250:	000112a1 	.word	0x000112a1
   11254:	000112a1 	.word	0x000112a1
   11258:	000112a1 	.word	0x000112a1
   1125c:	000112a1 	.word	0x000112a1
   11260:	000112a1 	.word	0x000112a1
   11264:	000112a1 	.word	0x000112a1
   11268:	000111d7 	.word	0x000111d7
   1126c:	000112a1 	.word	0x000112a1
   11270:	000112a1 	.word	0x000112a1
   11274:	000112a1 	.word	0x000112a1
   11278:	000112a1 	.word	0x000112a1
   1127c:	000112a1 	.word	0x000112a1
   11280:	000112a1 	.word	0x000112a1
   11284:	000112a1 	.word	0x000112a1
   11288:	000112a1 	.word	0x000112a1
   1128c:	000112a1 	.word	0x000112a1
   11290:	000112a1 	.word	0x000112a1
   11294:	000119c3 	.word	0x000119c3
   11298:	000112a1 	.word	0x000112a1
   1129c:	000119af 	.word	0x000119af
   112a0:	2100      	movs	r1, #0
   112a2:	9109      	str	r1, [sp, #36]	; 0x24
   112a4:	2a30      	cmp	r2, #48	; 0x30
   112a6:	d07d      	beq.n	113a4 <_strtod_l+0x1ec>
   112a8:	2300      	movs	r3, #0
   112aa:	9308      	str	r3, [sp, #32]
   112ac:	2a2f      	cmp	r2, #47	; 0x2f
   112ae:	4614      	mov	r4, r2
   112b0:	f240 84cd 	bls.w	11c4e <_strtod_l+0xa96>
   112b4:	f04f 0900 	mov.w	r9, #0
   112b8:	4638      	mov	r0, r7
   112ba:	464e      	mov	r6, r9
   112bc:	464d      	mov	r5, r9
   112be:	e012      	b.n	112e6 <_strtod_l+0x12e>
   112c0:	3001      	adds	r0, #1
   112c2:	2d08      	cmp	r5, #8
   112c4:	9011      	str	r0, [sp, #68]	; 0x44
   112c6:	bfc8      	it	gt
   112c8:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
   112cc:	7804      	ldrb	r4, [r0, #0]
   112ce:	bfc6      	itte	gt
   112d0:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
   112d4:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
   112d8:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
   112dc:	2c2f      	cmp	r4, #47	; 0x2f
   112de:	f105 0501 	add.w	r5, r5, #1
   112e2:	4622      	mov	r2, r4
   112e4:	dd6f      	ble.n	113c6 <_strtod_l+0x20e>
   112e6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   112ea:	2c39      	cmp	r4, #57	; 0x39
   112ec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   112f0:	dde6      	ble.n	112c0 <_strtod_l+0x108>
   112f2:	499f      	ldr	r1, [pc, #636]	; (11570 <_strtod_l+0x3b8>)
   112f4:	2201      	movs	r2, #1
   112f6:	f001 fac3 	bl	12880 <strncmp>
   112fa:	2800      	cmp	r0, #0
   112fc:	d137      	bne.n	1136e <_strtod_l+0x1b6>
   112fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11300:	461a      	mov	r2, r3
   11302:	3301      	adds	r3, #1
   11304:	9311      	str	r3, [sp, #68]	; 0x44
   11306:	7854      	ldrb	r4, [r2, #1]
   11308:	2d00      	cmp	r5, #0
   1130a:	f040 8543 	bne.w	11d94 <_strtod_l+0xbdc>
   1130e:	2c30      	cmp	r4, #48	; 0x30
   11310:	f040 8524 	bne.w	11d5c <_strtod_l+0xba4>
   11314:	f1c3 0201 	rsb	r2, r3, #1
   11318:	1898      	adds	r0, r3, r2
   1131a:	3301      	adds	r3, #1
   1131c:	9311      	str	r3, [sp, #68]	; 0x44
   1131e:	781c      	ldrb	r4, [r3, #0]
   11320:	2c30      	cmp	r4, #48	; 0x30
   11322:	d0f9      	beq.n	11318 <_strtod_l+0x160>
   11324:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   11328:	2b08      	cmp	r3, #8
   1132a:	f200 8301 	bhi.w	11930 <_strtod_l+0x778>
   1132e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   11330:	1c43      	adds	r3, r0, #1
   11332:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   11336:	930b      	str	r3, [sp, #44]	; 0x2c
   11338:	2501      	movs	r5, #1
   1133a:	46bc      	mov	ip, r7
   1133c:	f04f 0e00 	mov.w	lr, #0
   11340:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   11344:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
   11348:	2000      	movs	r0, #0
   1134a:	f10c 0301 	add.w	r3, ip, #1
   1134e:	9311      	str	r3, [sp, #68]	; 0x44
   11350:	f89c 4001 	ldrb.w	r4, [ip, #1]
   11354:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   11358:	2909      	cmp	r1, #9
   1135a:	f200 82bb 	bhi.w	118d4 <_strtod_l+0x71c>
   1135e:	3001      	adds	r0, #1
   11360:	468b      	mov	fp, r1
   11362:	2900      	cmp	r1, #0
   11364:	f040 844f 	bne.w	11c06 <_strtod_l+0xa4e>
   11368:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   1136c:	e7ed      	b.n	1134a <_strtod_l+0x192>
   1136e:	2000      	movs	r0, #0
   11370:	2c65      	cmp	r4, #101	; 0x65
   11372:	46ae      	mov	lr, r5
   11374:	900b      	str	r0, [sp, #44]	; 0x2c
   11376:	4684      	mov	ip, r0
   11378:	d001      	beq.n	1137e <_strtod_l+0x1c6>
   1137a:	2c45      	cmp	r4, #69	; 0x45
   1137c:	d130      	bne.n	113e0 <_strtod_l+0x228>
   1137e:	2d00      	cmp	r5, #0
   11380:	d16b      	bne.n	1145a <_strtod_l+0x2a2>
   11382:	9b08      	ldr	r3, [sp, #32]
   11384:	4303      	orrs	r3, r0
   11386:	d167      	bne.n	11458 <_strtod_l+0x2a0>
   11388:	9b07      	ldr	r3, [sp, #28]
   1138a:	ed9f 8b77 	vldr	d8, [pc, #476]	; 11568 <_strtod_l+0x3b0>
   1138e:	b113      	cbz	r3, 11396 <_strtod_l+0x1de>
   11390:	9b07      	ldr	r3, [sp, #28]
   11392:	f8c3 a000 	str.w	sl, [r3]
   11396:	eeb0 0b48 	vmov.f64	d0, d8
   1139a:	b017      	add	sp, #92	; 0x5c
   1139c:	ecbd 8b10 	vpop	{d8-d15}
   113a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113a4:	787a      	ldrb	r2, [r7, #1]
   113a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   113aa:	2a58      	cmp	r2, #88	; 0x58
   113ac:	f000 840c 	beq.w	11bc8 <_strtod_l+0xa10>
   113b0:	3701      	adds	r7, #1
   113b2:	9711      	str	r7, [sp, #68]	; 0x44
   113b4:	783a      	ldrb	r2, [r7, #0]
   113b6:	2a30      	cmp	r2, #48	; 0x30
   113b8:	d0fa      	beq.n	113b0 <_strtod_l+0x1f8>
   113ba:	2a00      	cmp	r2, #0
   113bc:	f000 80b7 	beq.w	1152e <_strtod_l+0x376>
   113c0:	2301      	movs	r3, #1
   113c2:	9308      	str	r3, [sp, #32]
   113c4:	e772      	b.n	112ac <_strtod_l+0xf4>
   113c6:	496a      	ldr	r1, [pc, #424]	; (11570 <_strtod_l+0x3b8>)
   113c8:	2201      	movs	r2, #1
   113ca:	f001 fa59 	bl	12880 <strncmp>
   113ce:	2800      	cmp	r0, #0
   113d0:	f000 80c0 	beq.w	11554 <_strtod_l+0x39c>
   113d4:	46ae      	mov	lr, r5
   113d6:	f04f 0c00 	mov.w	ip, #0
   113da:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   113de:	4660      	mov	r0, ip
   113e0:	f04f 0b00 	mov.w	fp, #0
   113e4:	2d00      	cmp	r5, #0
   113e6:	d07e      	beq.n	114e6 <_strtod_l+0x32e>
   113e8:	ee07 6a90 	vmov	s15, r6
   113ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   113ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   113f2:	ebab 0303 	sub.w	r3, fp, r3
   113f6:	f1be 0f00 	cmp.w	lr, #0
   113fa:	bf08      	it	eq
   113fc:	46ae      	moveq	lr, r5
   113fe:	2d10      	cmp	r5, #16
   11400:	930a      	str	r3, [sp, #40]	; 0x28
   11402:	462b      	mov	r3, r5
   11404:	bfa8      	it	ge
   11406:	2310      	movge	r3, #16
   11408:	2d09      	cmp	r5, #9
   1140a:	ed8d 7b04 	vstr	d7, [sp, #16]
   1140e:	dd0c      	ble.n	1142a <_strtod_l+0x272>
   11410:	4a58      	ldr	r2, [pc, #352]	; (11574 <_strtod_l+0x3bc>)
   11412:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   11416:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
   1141a:	ee06 9a90 	vmov	s13, r9
   1141e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
   11422:	eea7 6b05 	vfma.f64	d6, d7, d5
   11426:	ed8d 6b04 	vstr	d6, [sp, #16]
   1142a:	2d0f      	cmp	r5, #15
   1142c:	f300 80a8 	bgt.w	11580 <_strtod_l+0x3c8>
   11430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11432:	2a00      	cmp	r2, #0
   11434:	f000 83e4 	beq.w	11c00 <_strtod_l+0xa48>
   11438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1143a:	f340 833c 	ble.w	11ab6 <_strtod_l+0x8fe>
   1143e:	2a16      	cmp	r2, #22
   11440:	f340 8498 	ble.w	11d74 <_strtod_l+0xbbc>
   11444:	990a      	ldr	r1, [sp, #40]	; 0x28
   11446:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   1144a:	428a      	cmp	r2, r1
   1144c:	f280 84a6 	bge.w	11d9c <_strtod_l+0xbe4>
   11450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11452:	1aeb      	subs	r3, r5, r3
   11454:	4413      	add	r3, r2
   11456:	e099      	b.n	1158c <_strtod_l+0x3d4>
   11458:	2500      	movs	r5, #0
   1145a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   1145e:	f10a 0301 	add.w	r3, sl, #1
   11462:	9311      	str	r3, [sp, #68]	; 0x44
   11464:	f89a 4001 	ldrb.w	r4, [sl, #1]
   11468:	2c2b      	cmp	r4, #43	; 0x2b
   1146a:	f000 825e 	beq.w	1192a <_strtod_l+0x772>
   1146e:	2c2d      	cmp	r4, #45	; 0x2d
   11470:	f000 81f7 	beq.w	11862 <_strtod_l+0x6aa>
   11474:	2300      	movs	r3, #0
   11476:	930a      	str	r3, [sp, #40]	; 0x28
   11478:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1147c:	2b09      	cmp	r3, #9
   1147e:	f200 81eb 	bhi.w	11858 <_strtod_l+0x6a0>
   11482:	2c30      	cmp	r4, #48	; 0x30
   11484:	d105      	bne.n	11492 <_strtod_l+0x2da>
   11486:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11488:	3301      	adds	r3, #1
   1148a:	9311      	str	r3, [sp, #68]	; 0x44
   1148c:	781c      	ldrb	r4, [r3, #0]
   1148e:	2c30      	cmp	r4, #48	; 0x30
   11490:	d0fa      	beq.n	11488 <_strtod_l+0x2d0>
   11492:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   11496:	2b08      	cmp	r3, #8
   11498:	d8a2      	bhi.n	113e0 <_strtod_l+0x228>
   1149a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1149c:	920c      	str	r2, [sp, #48]	; 0x30
   1149e:	1c53      	adds	r3, r2, #1
   114a0:	9311      	str	r3, [sp, #68]	; 0x44
   114a2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   114a6:	7854      	ldrb	r4, [r2, #1]
   114a8:	2c2f      	cmp	r4, #47	; 0x2f
   114aa:	dc07      	bgt.n	114bc <_strtod_l+0x304>
   114ac:	e3de      	b.n	11c6c <_strtod_l+0xab4>
   114ae:	3301      	adds	r3, #1
   114b0:	9311      	str	r3, [sp, #68]	; 0x44
   114b2:	784c      	ldrb	r4, [r1, #1]
   114b4:	2c2f      	cmp	r4, #47	; 0x2f
   114b6:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
   114ba:	dd06      	ble.n	114ca <_strtod_l+0x312>
   114bc:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   114c0:	2c39      	cmp	r4, #57	; 0x39
   114c2:	4619      	mov	r1, r3
   114c4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   114c8:	ddf1      	ble.n	114ae <_strtod_l+0x2f6>
   114ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   114cc:	1a9b      	subs	r3, r3, r2
   114ce:	2b08      	cmp	r3, #8
   114d0:	f340 83cc 	ble.w	11c6c <_strtod_l+0xab4>
   114d4:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
   114d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   114da:	2b00      	cmp	r3, #0
   114dc:	d082      	beq.n	113e4 <_strtod_l+0x22c>
   114de:	f1cb 0b00 	rsb	fp, fp, #0
   114e2:	2d00      	cmp	r5, #0
   114e4:	d180      	bne.n	113e8 <_strtod_l+0x230>
   114e6:	9b08      	ldr	r3, [sp, #32]
   114e8:	4303      	orrs	r3, r0
   114ea:	d120      	bne.n	1152e <_strtod_l+0x376>
   114ec:	f1bc 0f00 	cmp.w	ip, #0
   114f0:	f47f af4a 	bne.w	11388 <_strtod_l+0x1d0>
   114f4:	2c69      	cmp	r4, #105	; 0x69
   114f6:	f000 83cf 	beq.w	11c98 <_strtod_l+0xae0>
   114fa:	f300 82f3 	bgt.w	11ae4 <_strtod_l+0x92c>
   114fe:	2c49      	cmp	r4, #73	; 0x49
   11500:	f000 83ca 	beq.w	11c98 <_strtod_l+0xae0>
   11504:	2c4e      	cmp	r4, #78	; 0x4e
   11506:	f47f af3f 	bne.w	11388 <_strtod_l+0x1d0>
   1150a:	491b      	ldr	r1, [pc, #108]	; (11578 <_strtod_l+0x3c0>)
   1150c:	a811      	add	r0, sp, #68	; 0x44
   1150e:	f002 fa2b 	bl	13968 <__match>
   11512:	2800      	cmp	r0, #0
   11514:	f43f af38 	beq.w	11388 <_strtod_l+0x1d0>
   11518:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1151a:	781b      	ldrb	r3, [r3, #0]
   1151c:	2b28      	cmp	r3, #40	; 0x28
   1151e:	f000 84f2 	beq.w	11f06 <_strtod_l+0xd4e>
   11522:	4816      	ldr	r0, [pc, #88]	; (1157c <_strtod_l+0x3c4>)
   11524:	f001 fd5c 	bl	12fe0 <nan>
   11528:	eeb0 8b40 	vmov.f64	d8, d0
   1152c:	e001      	b.n	11532 <_strtod_l+0x37a>
   1152e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 11568 <_strtod_l+0x3b0>
   11532:	9a07      	ldr	r2, [sp, #28]
   11534:	b10a      	cbz	r2, 1153a <_strtod_l+0x382>
   11536:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11538:	6013      	str	r3, [r2, #0]
   1153a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1153c:	2b00      	cmp	r3, #0
   1153e:	f43f af2a 	beq.w	11396 <_strtod_l+0x1de>
   11542:	eeb1 8b48 	vneg.f64	d8, d8
   11546:	eeb0 0b48 	vmov.f64	d0, d8
   1154a:	b017      	add	sp, #92	; 0x5c
   1154c:	ecbd 8b10 	vpop	{d8-d15}
   11550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11554:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11556:	900b      	str	r0, [sp, #44]	; 0x2c
   11558:	1c5a      	adds	r2, r3, #1
   1155a:	9211      	str	r2, [sp, #68]	; 0x44
   1155c:	785c      	ldrb	r4, [r3, #1]
   1155e:	46ae      	mov	lr, r5
   11560:	e6f8      	b.n	11354 <_strtod_l+0x19c>
   11562:	bf00      	nop
   11564:	f3af 8000 	nop.w
	...
   11570:	200081dc 	.word	0x200081dc
   11574:	20000328 	.word	0x20000328
   11578:	200010cc 	.word	0x200010cc
   1157c:	200004ec 	.word	0x200004ec
   11580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11582:	1aeb      	subs	r3, r5, r3
   11584:	4413      	add	r3, r2
   11586:	2b00      	cmp	r3, #0
   11588:	f340 82b0 	ble.w	11aec <_strtod_l+0x934>
   1158c:	f013 010f 	ands.w	r1, r3, #15
   11590:	d00a      	beq.n	115a8 <_strtod_l+0x3f0>
   11592:	4ac3      	ldr	r2, [pc, #780]	; (118a0 <_strtod_l+0x6e8>)
   11594:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11598:	ed9d 6b04 	vldr	d6, [sp, #16]
   1159c:	ed92 7b00 	vldr	d7, [r2]
   115a0:	ee27 7b06 	vmul.f64	d7, d7, d6
   115a4:	ed8d 7b04 	vstr	d7, [sp, #16]
   115a8:	f033 020f 	bics.w	r2, r3, #15
   115ac:	f040 8238 	bne.w	11a20 <_strtod_l+0x868>
   115b0:	2300      	movs	r3, #0
   115b2:	9308      	str	r3, [sp, #32]
   115b4:	9600      	str	r6, [sp, #0]
   115b6:	462b      	mov	r3, r5
   115b8:	4672      	mov	r2, lr
   115ba:	4639      	mov	r1, r7
   115bc:	4640      	mov	r0, r8
   115be:	f002 fb5f 	bl	13c80 <__s2b>
   115c2:	4681      	mov	r9, r0
   115c4:	2800      	cmp	r0, #0
   115c6:	f000 82e1 	beq.w	11b8c <_strtod_l+0x9d4>
   115ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   115cc:	eba3 0b0b 	sub.w	fp, r3, fp
   115d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   115d2:	ed9f eba9 	vldr	d14, [pc, #676]	; 11878 <_strtod_l+0x6c0>
   115d6:	2b00      	cmp	r3, #0
   115d8:	ed9f cba9 	vldr	d12, [pc, #676]	; 11880 <_strtod_l+0x6c8>
   115dc:	ed9f dbaa 	vldr	d13, [pc, #680]	; 11888 <_strtod_l+0x6d0>
   115e0:	ed9f bbab 	vldr	d11, [pc, #684]	; 11890 <_strtod_l+0x6d8>
   115e4:	bfb4      	ite	lt
   115e6:	465a      	movlt	r2, fp
   115e8:	2200      	movge	r2, #0
   115ea:	f04f 0a00 	mov.w	sl, #0
   115ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   115f2:	920b      	str	r2, [sp, #44]	; 0x2c
   115f4:	930c      	str	r3, [sp, #48]	; 0x30
   115f6:	4654      	mov	r4, sl
   115f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   115fc:	4640      	mov	r0, r8
   115fe:	f002 fabd 	bl	13b7c <_Balloc>
   11602:	4606      	mov	r6, r0
   11604:	2800      	cmp	r0, #0
   11606:	f000 810e 	beq.w	11826 <_strtod_l+0x66e>
   1160a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1160e:	ed9d 8b04 	vldr	d8, [sp, #16]
   11612:	3202      	adds	r2, #2
   11614:	0092      	lsls	r2, r2, #2
   11616:	f109 010c 	add.w	r1, r9, #12
   1161a:	300c      	adds	r0, #12
   1161c:	f7fc fffa 	bl	e614 <memcpy>
   11620:	eeb0 0b48 	vmov.f64	d0, d8
   11624:	aa14      	add	r2, sp, #80	; 0x50
   11626:	a913      	add	r1, sp, #76	; 0x4c
   11628:	4640      	mov	r0, r8
   1162a:	f002 fee5 	bl	143f8 <__d2b>
   1162e:	9012      	str	r0, [sp, #72]	; 0x48
   11630:	2800      	cmp	r0, #0
   11632:	f000 80e4 	beq.w	117fe <_strtod_l+0x646>
   11636:	2101      	movs	r1, #1
   11638:	4640      	mov	r0, r8
   1163a:	f002 fbc9 	bl	13dd0 <__i2b>
   1163e:	4604      	mov	r4, r0
   11640:	2800      	cmp	r0, #0
   11642:	f000 80f0 	beq.w	11826 <_strtod_l+0x66e>
   11646:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11648:	2a00      	cmp	r2, #0
   1164a:	f2c0 80de 	blt.w	1180a <_strtod_l+0x652>
   1164e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11650:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   11652:	eb02 0b03 	add.w	fp, r2, r3
   11656:	9b08      	ldr	r3, [sp, #32]
   11658:	9d14      	ldr	r5, [sp, #80]	; 0x50
   1165a:	1ad2      	subs	r2, r2, r3
   1165c:	442a      	add	r2, r5
   1165e:	4b91      	ldr	r3, [pc, #580]	; (118a4 <_strtod_l+0x6ec>)
   11660:	3a01      	subs	r2, #1
   11662:	429a      	cmp	r2, r3
   11664:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
   11668:	f280 8098 	bge.w	1179c <_strtod_l+0x5e4>
   1166c:	1a99      	subs	r1, r3, r2
   1166e:	291f      	cmp	r1, #31
   11670:	eba5 0501 	sub.w	r5, r5, r1
   11674:	f300 80e3 	bgt.w	1183e <_strtod_l+0x686>
   11678:	2201      	movs	r2, #1
   1167a:	fa02 f301 	lsl.w	r3, r2, r1
   1167e:	930d      	str	r3, [sp, #52]	; 0x34
   11680:	2300      	movs	r3, #0
   11682:	930e      	str	r3, [sp, #56]	; 0x38
   11684:	442f      	add	r7, r5
   11686:	9b08      	ldr	r3, [sp, #32]
   11688:	445d      	add	r5, fp
   1168a:	45ab      	cmp	fp, r5
   1168c:	465a      	mov	r2, fp
   1168e:	441f      	add	r7, r3
   11690:	bfa8      	it	ge
   11692:	462a      	movge	r2, r5
   11694:	42ba      	cmp	r2, r7
   11696:	bfa8      	it	ge
   11698:	463a      	movge	r2, r7
   1169a:	2a00      	cmp	r2, #0
   1169c:	dd03      	ble.n	116a6 <_strtod_l+0x4ee>
   1169e:	1aad      	subs	r5, r5, r2
   116a0:	1abf      	subs	r7, r7, r2
   116a2:	ebab 0b02 	sub.w	fp, fp, r2
   116a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   116a8:	2b00      	cmp	r3, #0
   116aa:	f300 8088 	bgt.w	117be <_strtod_l+0x606>
   116ae:	2d00      	cmp	r5, #0
   116b0:	f300 809c 	bgt.w	117ec <_strtod_l+0x634>
   116b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   116b6:	2b00      	cmp	r3, #0
   116b8:	f300 80b7 	bgt.w	1182a <_strtod_l+0x672>
   116bc:	2f00      	cmp	r7, #0
   116be:	f300 80a9 	bgt.w	11814 <_strtod_l+0x65c>
   116c2:	f1bb 0f00 	cmp.w	fp, #0
   116c6:	dd08      	ble.n	116da <_strtod_l+0x522>
   116c8:	4621      	mov	r1, r4
   116ca:	465a      	mov	r2, fp
   116cc:	4640      	mov	r0, r8
   116ce:	f002 fcbb 	bl	14048 <__lshift>
   116d2:	4604      	mov	r4, r0
   116d4:	2800      	cmp	r0, #0
   116d6:	f000 80a6 	beq.w	11826 <_strtod_l+0x66e>
   116da:	9912      	ldr	r1, [sp, #72]	; 0x48
   116dc:	4632      	mov	r2, r6
   116de:	4640      	mov	r0, r8
   116e0:	f002 fd4c 	bl	1417c <__mdiff>
   116e4:	4682      	mov	sl, r0
   116e6:	2800      	cmp	r0, #0
   116e8:	f000 809d 	beq.w	11826 <_strtod_l+0x66e>
   116ec:	2300      	movs	r3, #0
   116ee:	68c5      	ldr	r5, [r0, #12]
   116f0:	60c3      	str	r3, [r0, #12]
   116f2:	4621      	mov	r1, r4
   116f4:	f002 fd20 	bl	14138 <__mcmp>
   116f8:	2800      	cmp	r0, #0
   116fa:	f2c0 83c7 	blt.w	11e8c <_strtod_l+0xcd4>
   116fe:	f000 8361 	beq.w	11dc4 <_strtod_l+0xc0c>
   11702:	4621      	mov	r1, r4
   11704:	4650      	mov	r0, sl
   11706:	f002 fee1 	bl	144cc <__ratio>
   1170a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   1170e:	eeb4 0bc7 	vcmpe.f64	d0, d7
   11712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11716:	d846      	bhi.n	117a6 <_strtod_l+0x5ee>
   11718:	2d00      	cmp	r5, #0
   1171a:	f000 80cb 	beq.w	118b4 <_strtod_l+0x6fc>
   1171e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   11722:	9805      	ldr	r0, [sp, #20]
   11724:	4b60      	ldr	r3, [pc, #384]	; (118a8 <_strtod_l+0x6f0>)
   11726:	2200      	movs	r2, #0
   11728:	4960      	ldr	r1, [pc, #384]	; (118ac <_strtod_l+0x6f4>)
   1172a:	f8df c184 	ldr.w	ip, [pc, #388]	; 118b0 <_strtod_l+0x6f8>
   1172e:	ea00 0701 	and.w	r7, r0, r1
   11732:	4567      	cmp	r7, ip
   11734:	f000 80d4 	beq.w	118e0 <_strtod_l+0x728>
   11738:	9908      	ldr	r1, [sp, #32]
   1173a:	b159      	cbz	r1, 11754 <_strtod_l+0x59c>
   1173c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
   11740:	d808      	bhi.n	11754 <_strtod_l+0x59c>
   11742:	eeb4 9bcb 	vcmpe.f64	d9, d11
   11746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1174a:	f240 8156 	bls.w	119fa <_strtod_l+0x842>
   1174e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   11752:	1bcb      	subs	r3, r1, r7
   11754:	eeb0 0b48 	vmov.f64	d0, d8
   11758:	ec43 2b1a 	vmov	d10, r2, r3
   1175c:	f002 fdb8 	bl	142d0 <__ulp>
   11760:	eeaa 8b00 	vfma.f64	d8, d10, d0
   11764:	ed8d 8b04 	vstr	d8, [sp, #16]
   11768:	ee18 3a90 	vmov	r3, s17
   1176c:	9a08      	ldr	r2, [sp, #32]
   1176e:	b922      	cbnz	r2, 1177a <_strtod_l+0x5c2>
   11770:	4a4e      	ldr	r2, [pc, #312]	; (118ac <_strtod_l+0x6f4>)
   11772:	401a      	ands	r2, r3
   11774:	4297      	cmp	r7, r2
   11776:	f000 80e4 	beq.w	11942 <_strtod_l+0x78a>
   1177a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1177c:	4640      	mov	r0, r8
   1177e:	f002 fa23 	bl	13bc8 <_Bfree>
   11782:	4631      	mov	r1, r6
   11784:	4640      	mov	r0, r8
   11786:	f002 fa1f 	bl	13bc8 <_Bfree>
   1178a:	4621      	mov	r1, r4
   1178c:	4640      	mov	r0, r8
   1178e:	f002 fa1b 	bl	13bc8 <_Bfree>
   11792:	4651      	mov	r1, sl
   11794:	4640      	mov	r0, r8
   11796:	f002 fa17 	bl	13bc8 <_Bfree>
   1179a:	e72d      	b.n	115f8 <_strtod_l+0x440>
   1179c:	2301      	movs	r3, #1
   1179e:	2100      	movs	r1, #0
   117a0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
   117a4:	e76e      	b.n	11684 <_strtod_l+0x4cc>
   117a6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   117aa:	ee20 9b09 	vmul.f64	d9, d0, d9
   117ae:	2d00      	cmp	r5, #0
   117b0:	d15f      	bne.n	11872 <_strtod_l+0x6ba>
   117b2:	eeb1 7b49 	vneg.f64	d7, d9
   117b6:	9805      	ldr	r0, [sp, #20]
   117b8:	ec53 2b17 	vmov	r2, r3, d7
   117bc:	e7b4      	b.n	11728 <_strtod_l+0x570>
   117be:	4621      	mov	r1, r4
   117c0:	461a      	mov	r2, r3
   117c2:	4640      	mov	r0, r8
   117c4:	f002 fbe0 	bl	13f88 <__pow5mult>
   117c8:	4604      	mov	r4, r0
   117ca:	b360      	cbz	r0, 11826 <_strtod_l+0x66e>
   117cc:	4601      	mov	r1, r0
   117ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
   117d0:	4640      	mov	r0, r8
   117d2:	f002 fb2b 	bl	13e2c <__multiply>
   117d6:	b330      	cbz	r0, 11826 <_strtod_l+0x66e>
   117d8:	900f      	str	r0, [sp, #60]	; 0x3c
   117da:	9912      	ldr	r1, [sp, #72]	; 0x48
   117dc:	4640      	mov	r0, r8
   117de:	f002 f9f3 	bl	13bc8 <_Bfree>
   117e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   117e4:	9212      	str	r2, [sp, #72]	; 0x48
   117e6:	2d00      	cmp	r5, #0
   117e8:	f77f af64 	ble.w	116b4 <_strtod_l+0x4fc>
   117ec:	9912      	ldr	r1, [sp, #72]	; 0x48
   117ee:	462a      	mov	r2, r5
   117f0:	4640      	mov	r0, r8
   117f2:	f002 fc29 	bl	14048 <__lshift>
   117f6:	9012      	str	r0, [sp, #72]	; 0x48
   117f8:	2800      	cmp	r0, #0
   117fa:	f47f af5b 	bne.w	116b4 <_strtod_l+0x4fc>
   117fe:	2322      	movs	r3, #34	; 0x22
   11800:	ed9f 8b25 	vldr	d8, [pc, #148]	; 11898 <_strtod_l+0x6e0>
   11804:	f8c8 3000 	str.w	r3, [r8]
   11808:	e0bc      	b.n	11984 <_strtod_l+0x7cc>
   1180a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1180c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   11810:	1a9f      	subs	r7, r3, r2
   11812:	e720      	b.n	11656 <_strtod_l+0x49e>
   11814:	4631      	mov	r1, r6
   11816:	463a      	mov	r2, r7
   11818:	4640      	mov	r0, r8
   1181a:	f002 fc15 	bl	14048 <__lshift>
   1181e:	4606      	mov	r6, r0
   11820:	2800      	cmp	r0, #0
   11822:	f47f af4e 	bne.w	116c2 <_strtod_l+0x50a>
   11826:	9812      	ldr	r0, [sp, #72]	; 0x48
   11828:	e7e9      	b.n	117fe <_strtod_l+0x646>
   1182a:	4631      	mov	r1, r6
   1182c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1182e:	4640      	mov	r0, r8
   11830:	f002 fbaa 	bl	13f88 <__pow5mult>
   11834:	4606      	mov	r6, r0
   11836:	2800      	cmp	r0, #0
   11838:	f47f af40 	bne.w	116bc <_strtod_l+0x504>
   1183c:	e7f3      	b.n	11826 <_strtod_l+0x66e>
   1183e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
   11842:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   11846:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
   1184a:	2101      	movs	r1, #1
   1184c:	32e2      	adds	r2, #226	; 0xe2
   1184e:	fa01 f302 	lsl.w	r3, r1, r2
   11852:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   11856:	e715      	b.n	11684 <_strtod_l+0x4cc>
   11858:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   1185c:	f04f 0b00 	mov.w	fp, #0
   11860:	e5c0      	b.n	113e4 <_strtod_l+0x22c>
   11862:	2301      	movs	r3, #1
   11864:	930a      	str	r3, [sp, #40]	; 0x28
   11866:	f10a 0302 	add.w	r3, sl, #2
   1186a:	9311      	str	r3, [sp, #68]	; 0x44
   1186c:	f89a 4002 	ldrb.w	r4, [sl, #2]
   11870:	e602      	b.n	11478 <_strtod_l+0x2c0>
   11872:	eeb0 7b49 	vmov.f64	d7, d9
   11876:	e79e      	b.n	117b6 <_strtod_l+0x5fe>
   11878:	94a03595 	.word	0x94a03595
   1187c:	3fcfffff 	.word	0x3fcfffff
   11880:	94a03595 	.word	0x94a03595
   11884:	3fdfffff 	.word	0x3fdfffff
   11888:	35afe535 	.word	0x35afe535
   1188c:	3fe00000 	.word	0x3fe00000
   11890:	ffc00000 	.word	0xffc00000
   11894:	41dfffff 	.word	0x41dfffff
   11898:	00000000 	.word	0x00000000
   1189c:	7ff00000 	.word	0x7ff00000
   118a0:	20000328 	.word	0x20000328
   118a4:	fffffc02 	.word	0xfffffc02
   118a8:	3ff00000 	.word	0x3ff00000
   118ac:	7ff00000 	.word	0x7ff00000
   118b0:	7fe00000 	.word	0x7fe00000
   118b4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   118b8:	2900      	cmp	r1, #0
   118ba:	f000 8085 	beq.w	119c8 <_strtod_l+0x810>
   118be:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   118c2:	2901      	cmp	r1, #1
   118c4:	f000 81d8 	beq.w	11c78 <_strtod_l+0xac0>
   118c8:	4610      	mov	r0, r2
   118ca:	4bb7      	ldr	r3, [pc, #732]	; (11ba8 <_strtod_l+0x9f0>)
   118cc:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   118d0:	2200      	movs	r2, #0
   118d2:	e729      	b.n	11728 <_strtod_l+0x570>
   118d4:	2c65      	cmp	r4, #101	; 0x65
   118d6:	f04f 0c01 	mov.w	ip, #1
   118da:	f43f adbe 	beq.w	1145a <_strtod_l+0x2a2>
   118de:	e54c      	b.n	1137a <_strtod_l+0x1c2>
   118e0:	ec43 2b1a 	vmov	d10, r2, r3
   118e4:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
   118e8:	9305      	str	r3, [sp, #20]
   118ea:	ed9d fb04 	vldr	d15, [sp, #16]
   118ee:	eeb0 0b4f 	vmov.f64	d0, d15
   118f2:	f002 fced 	bl	142d0 <__ulp>
   118f6:	49ad      	ldr	r1, [pc, #692]	; (11bac <_strtod_l+0x9f4>)
   118f8:	eeaa fb00 	vfma.f64	d15, d10, d0
   118fc:	ee1f 3a90 	vmov	r3, s31
   11900:	4aab      	ldr	r2, [pc, #684]	; (11bb0 <_strtod_l+0x9f8>)
   11902:	4019      	ands	r1, r3
   11904:	4291      	cmp	r1, r2
   11906:	ed8d fb04 	vstr	d15, [sp, #16]
   1190a:	d972      	bls.n	119f2 <_strtod_l+0x83a>
   1190c:	4ba9      	ldr	r3, [pc, #676]	; (11bb4 <_strtod_l+0x9fc>)
   1190e:	ee18 2a90 	vmov	r2, s17
   11912:	429a      	cmp	r2, r3
   11914:	d103      	bne.n	1191e <_strtod_l+0x766>
   11916:	ee18 3a10 	vmov	r3, s16
   1191a:	3301      	adds	r3, #1
   1191c:	d083      	beq.n	11826 <_strtod_l+0x66e>
   1191e:	4aa5      	ldr	r2, [pc, #660]	; (11bb4 <_strtod_l+0x9fc>)
   11920:	f04f 33ff 	mov.w	r3, #4294967295
   11924:	e9cd 3204 	strd	r3, r2, [sp, #16]
   11928:	e727      	b.n	1177a <_strtod_l+0x5c2>
   1192a:	2300      	movs	r3, #0
   1192c:	930a      	str	r3, [sp, #40]	; 0x28
   1192e:	e79a      	b.n	11866 <_strtod_l+0x6ae>
   11930:	2c65      	cmp	r4, #101	; 0x65
   11932:	f000 80d0 	beq.w	11ad6 <_strtod_l+0x91e>
   11936:	2c45      	cmp	r4, #69	; 0x45
   11938:	f000 80cd 	beq.w	11ad6 <_strtod_l+0x91e>
   1193c:	f04f 0c01 	mov.w	ip, #1
   11940:	e5d1      	b.n	114e6 <_strtod_l+0x32e>
   11942:	ec51 0b19 	vmov	r0, r1, d9
   11946:	930d      	str	r3, [sp, #52]	; 0x34
   11948:	f009 fccc 	bl	1b2e4 <__aeabi_d2lz>
   1194c:	f009 fc9c 	bl	1b288 <__aeabi_l2d>
   11950:	9b04      	ldr	r3, [sp, #16]
   11952:	431d      	orrs	r5, r3
   11954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11956:	ec41 0b17 	vmov	d7, r0, r1
   1195a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1195e:	431d      	orrs	r5, r3
   11960:	ee39 9b47 	vsub.f64	d9, d9, d7
   11964:	f000 80a0 	beq.w	11aa8 <_strtod_l+0x8f0>
   11968:	eeb4 9bcc 	vcmpe.f64	d9, d12
   1196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11970:	d405      	bmi.n	1197e <_strtod_l+0x7c6>
   11972:	eeb4 9bcd 	vcmpe.f64	d9, d13
   11976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1197a:	f77f aefe 	ble.w	1177a <_strtod_l+0x5c2>
   1197e:	ed9d 8b04 	vldr	d8, [sp, #16]
   11982:	9812      	ldr	r0, [sp, #72]	; 0x48
   11984:	4601      	mov	r1, r0
   11986:	4640      	mov	r0, r8
   11988:	f002 f91e 	bl	13bc8 <_Bfree>
   1198c:	4631      	mov	r1, r6
   1198e:	4640      	mov	r0, r8
   11990:	f002 f91a 	bl	13bc8 <_Bfree>
   11994:	4621      	mov	r1, r4
   11996:	4640      	mov	r0, r8
   11998:	f002 f916 	bl	13bc8 <_Bfree>
   1199c:	4649      	mov	r1, r9
   1199e:	4640      	mov	r0, r8
   119a0:	f002 f912 	bl	13bc8 <_Bfree>
   119a4:	4651      	mov	r1, sl
   119a6:	4640      	mov	r0, r8
   119a8:	f002 f90e 	bl	13bc8 <_Bfree>
   119ac:	e5c1      	b.n	11532 <_strtod_l+0x37a>
   119ae:	2201      	movs	r2, #1
   119b0:	9209      	str	r2, [sp, #36]	; 0x24
   119b2:	1c79      	adds	r1, r7, #1
   119b4:	9111      	str	r1, [sp, #68]	; 0x44
   119b6:	787a      	ldrb	r2, [r7, #1]
   119b8:	2a00      	cmp	r2, #0
   119ba:	f43f ace5 	beq.w	11388 <_strtod_l+0x1d0>
   119be:	460f      	mov	r7, r1
   119c0:	e470      	b.n	112a4 <_strtod_l+0xec>
   119c2:	2200      	movs	r2, #0
   119c4:	9209      	str	r2, [sp, #36]	; 0x24
   119c6:	e7f4      	b.n	119b2 <_strtod_l+0x7fa>
   119c8:	f3c2 0313 	ubfx	r3, r2, #0, #20
   119cc:	4610      	mov	r0, r2
   119ce:	2b00      	cmp	r3, #0
   119d0:	f47f af7b 	bne.w	118ca <_strtod_l+0x712>
   119d4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   119d8:	eeb4 0bc7 	vcmpe.f64	d0, d7
   119dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   119e0:	f100 81d3 	bmi.w	11d8a <_strtod_l+0xbd2>
   119e4:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   119e8:	ee20 9b09 	vmul.f64	d9, d0, d9
   119ec:	eeb1 7b49 	vneg.f64	d7, d9
   119f0:	e6e2      	b.n	117b8 <_strtod_l+0x600>
   119f2:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
   119f6:	9305      	str	r3, [sp, #20]
   119f8:	e6b8      	b.n	1176c <_strtod_l+0x5b4>
   119fa:	eebc 9bc9 	vcvt.u32.f64	s18, d9
   119fe:	ee19 3a10 	vmov	r3, s18
   11a02:	2b01      	cmp	r3, #1
   11a04:	bf38      	it	cc
   11a06:	2301      	movcc	r3, #1
   11a08:	ee09 3a10 	vmov	s18, r3
   11a0c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
   11a10:	2d00      	cmp	r5, #0
   11a12:	f040 813e 	bne.w	11c92 <_strtod_l+0xada>
   11a16:	eeb1 7b49 	vneg.f64	d7, d9
   11a1a:	ec53 2b17 	vmov	r2, r3, d7
   11a1e:	e696      	b.n	1174e <_strtod_l+0x596>
   11a20:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   11a24:	f300 80b2 	bgt.w	11b8c <_strtod_l+0x9d4>
   11a28:	2a10      	cmp	r2, #16
   11a2a:	ea4f 1322 	mov.w	r3, r2, asr #4
   11a2e:	f340 8286 	ble.w	11f3e <_strtod_l+0xd86>
   11a32:	4c61      	ldr	r4, [pc, #388]	; (11bb8 <_strtod_l+0xa00>)
   11a34:	ed9d 7b04 	vldr	d7, [sp, #16]
   11a38:	2000      	movs	r0, #0
   11a3a:	4622      	mov	r2, r4
   11a3c:	4601      	mov	r1, r0
   11a3e:	f013 0f01 	tst.w	r3, #1
   11a42:	f101 0101 	add.w	r1, r1, #1
   11a46:	ea4f 0363 	mov.w	r3, r3, asr #1
   11a4a:	d004      	beq.n	11a56 <_strtod_l+0x89e>
   11a4c:	ed92 6b00 	vldr	d6, [r2]
   11a50:	2001      	movs	r0, #1
   11a52:	ee27 7b06 	vmul.f64	d7, d7, d6
   11a56:	2b01      	cmp	r3, #1
   11a58:	f102 0208 	add.w	r2, r2, #8
   11a5c:	d1ef      	bne.n	11a3e <_strtod_l+0x886>
   11a5e:	b108      	cbz	r0, 11a64 <_strtod_l+0x8ac>
   11a60:	ed8d 7b04 	vstr	d7, [sp, #16]
   11a64:	9b05      	ldr	r3, [sp, #20]
   11a66:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   11a6a:	9305      	str	r3, [sp, #20]
   11a6c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   11a70:	ed9d 6b04 	vldr	d6, [sp, #16]
   11a74:	ed94 7b00 	vldr	d7, [r4]
   11a78:	4b4c      	ldr	r3, [pc, #304]	; (11bac <_strtod_l+0x9f4>)
   11a7a:	ee27 7b06 	vmul.f64	d7, d7, d6
   11a7e:	ee17 2a90 	vmov	r2, s15
   11a82:	494e      	ldr	r1, [pc, #312]	; (11bbc <_strtod_l+0xa04>)
   11a84:	4013      	ands	r3, r2
   11a86:	428b      	cmp	r3, r1
   11a88:	ed8d 7b04 	vstr	d7, [sp, #16]
   11a8c:	d87e      	bhi.n	11b8c <_strtod_l+0x9d4>
   11a8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   11a92:	428b      	cmp	r3, r1
   11a94:	f240 81d6 	bls.w	11e44 <_strtod_l+0xc8c>
   11a98:	4c46      	ldr	r4, [pc, #280]	; (11bb4 <_strtod_l+0x9fc>)
   11a9a:	f04f 33ff 	mov.w	r3, #4294967295
   11a9e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   11aa2:	2300      	movs	r3, #0
   11aa4:	9308      	str	r3, [sp, #32]
   11aa6:	e585      	b.n	115b4 <_strtod_l+0x3fc>
   11aa8:	eeb4 9bce 	vcmpe.f64	d9, d14
   11aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11ab0:	f57f ae63 	bpl.w	1177a <_strtod_l+0x5c2>
   11ab4:	e763      	b.n	1197e <_strtod_l+0x7c6>
   11ab6:	3216      	adds	r2, #22
   11ab8:	f6ff ad62 	blt.w	11580 <_strtod_l+0x3c8>
   11abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11abe:	eba3 0b0b 	sub.w	fp, r3, fp
   11ac2:	4b3f      	ldr	r3, [pc, #252]	; (11bc0 <_strtod_l+0xa08>)
   11ac4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   11ac8:	ed93 7b00 	vldr	d7, [r3]
   11acc:	ed9d 6b04 	vldr	d6, [sp, #16]
   11ad0:	ee86 8b07 	vdiv.f64	d8, d6, d7
   11ad4:	e52d      	b.n	11532 <_strtod_l+0x37a>
   11ad6:	f04f 0e00 	mov.w	lr, #0
   11ada:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   11ade:	f04f 0c01 	mov.w	ip, #1
   11ae2:	e44e      	b.n	11382 <_strtod_l+0x1ca>
   11ae4:	2c6e      	cmp	r4, #110	; 0x6e
   11ae6:	f43f ad10 	beq.w	1150a <_strtod_l+0x352>
   11aea:	e44d      	b.n	11388 <_strtod_l+0x1d0>
   11aec:	f43f ad60 	beq.w	115b0 <_strtod_l+0x3f8>
   11af0:	425b      	negs	r3, r3
   11af2:	f013 010f 	ands.w	r1, r3, #15
   11af6:	d00a      	beq.n	11b0e <_strtod_l+0x956>
   11af8:	4a31      	ldr	r2, [pc, #196]	; (11bc0 <_strtod_l+0xa08>)
   11afa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11afe:	ed9d 6b04 	vldr	d6, [sp, #16]
   11b02:	ed92 7b00 	vldr	d7, [r2]
   11b06:	ee86 7b07 	vdiv.f64	d7, d6, d7
   11b0a:	ed8d 7b04 	vstr	d7, [sp, #16]
   11b0e:	111b      	asrs	r3, r3, #4
   11b10:	f43f ad4e 	beq.w	115b0 <_strtod_l+0x3f8>
   11b14:	2b1f      	cmp	r3, #31
   11b16:	dc33      	bgt.n	11b80 <_strtod_l+0x9c8>
   11b18:	f013 0210 	ands.w	r2, r3, #16
   11b1c:	bf18      	it	ne
   11b1e:	226a      	movne	r2, #106	; 0x6a
   11b20:	ed9d 7b04 	vldr	d7, [sp, #16]
   11b24:	9208      	str	r2, [sp, #32]
   11b26:	4a27      	ldr	r2, [pc, #156]	; (11bc4 <_strtod_l+0xa0c>)
   11b28:	2100      	movs	r1, #0
   11b2a:	07d8      	lsls	r0, r3, #31
   11b2c:	d504      	bpl.n	11b38 <_strtod_l+0x980>
   11b2e:	ed92 6b00 	vldr	d6, [r2]
   11b32:	2101      	movs	r1, #1
   11b34:	ee27 7b06 	vmul.f64	d7, d7, d6
   11b38:	105b      	asrs	r3, r3, #1
   11b3a:	f102 0208 	add.w	r2, r2, #8
   11b3e:	d1f4      	bne.n	11b2a <_strtod_l+0x972>
   11b40:	b109      	cbz	r1, 11b46 <_strtod_l+0x98e>
   11b42:	ed8d 7b04 	vstr	d7, [sp, #16]
   11b46:	9b08      	ldr	r3, [sp, #32]
   11b48:	b193      	cbz	r3, 11b70 <_strtod_l+0x9b8>
   11b4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11b4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
   11b52:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   11b56:	2b00      	cmp	r3, #0
   11b58:	dd0a      	ble.n	11b70 <_strtod_l+0x9b8>
   11b5a:	2b1f      	cmp	r3, #31
   11b5c:	f340 822f 	ble.w	11fbe <_strtod_l+0xe06>
   11b60:	2000      	movs	r0, #0
   11b62:	2b34      	cmp	r3, #52	; 0x34
   11b64:	9004      	str	r0, [sp, #16]
   11b66:	f340 8240 	ble.w	11fea <_strtod_l+0xe32>
   11b6a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   11b6e:	9305      	str	r3, [sp, #20]
   11b70:	ed9d 7b04 	vldr	d7, [sp, #16]
   11b74:	eeb5 7b40 	vcmp.f64	d7, #0.0
   11b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b7c:	f47f ad1a 	bne.w	115b4 <_strtod_l+0x3fc>
   11b80:	2322      	movs	r3, #34	; 0x22
   11b82:	ed9f 8b05 	vldr	d8, [pc, #20]	; 11b98 <_strtod_l+0x9e0>
   11b86:	f8c8 3000 	str.w	r3, [r8]
   11b8a:	e4d2      	b.n	11532 <_strtod_l+0x37a>
   11b8c:	2322      	movs	r3, #34	; 0x22
   11b8e:	ed9f 8b04 	vldr	d8, [pc, #16]	; 11ba0 <_strtod_l+0x9e8>
   11b92:	f8c8 3000 	str.w	r3, [r8]
   11b96:	e4cc      	b.n	11532 <_strtod_l+0x37a>
	...
   11ba4:	7ff00000 	.word	0x7ff00000
   11ba8:	bff00000 	.word	0xbff00000
   11bac:	7ff00000 	.word	0x7ff00000
   11bb0:	7c9fffff 	.word	0x7c9fffff
   11bb4:	7fefffff 	.word	0x7fefffff
   11bb8:	20000300 	.word	0x20000300
   11bbc:	7ca00000 	.word	0x7ca00000
   11bc0:	20000328 	.word	0x20000328
   11bc4:	200003f0 	.word	0x200003f0
   11bc8:	9302      	str	r3, [sp, #8]
   11bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11bcc:	9301      	str	r3, [sp, #4]
   11bce:	ab12      	add	r3, sp, #72	; 0x48
   11bd0:	9300      	str	r3, [sp, #0]
   11bd2:	4aa7      	ldr	r2, [pc, #668]	; (11e70 <_strtod_l+0xcb8>)
   11bd4:	ab13      	add	r3, sp, #76	; 0x4c
   11bd6:	a911      	add	r1, sp, #68	; 0x44
   11bd8:	4640      	mov	r0, r8
   11bda:	f001 fbfb 	bl	133d4 <__gethex>
   11bde:	f010 050f 	ands.w	r5, r0, #15
   11be2:	4604      	mov	r4, r0
   11be4:	f43f aca3 	beq.w	1152e <_strtod_l+0x376>
   11be8:	2d06      	cmp	r5, #6
   11bea:	d174      	bne.n	11cd6 <_strtod_l+0xb1e>
   11bec:	9b07      	ldr	r3, [sp, #28]
   11bee:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 11e58 <_strtod_l+0xca0>
   11bf2:	3701      	adds	r7, #1
   11bf4:	2b00      	cmp	r3, #0
   11bf6:	f43f abce 	beq.w	11396 <_strtod_l+0x1de>
   11bfa:	601f      	str	r7, [r3, #0]
   11bfc:	f7ff bbcb 	b.w	11396 <_strtod_l+0x1de>
   11c00:	ed9d 8b04 	vldr	d8, [sp, #16]
   11c04:	e495      	b.n	11532 <_strtod_l+0x37a>
   11c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11c08:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   11c0c:	4403      	add	r3, r0
   11c0e:	930b      	str	r3, [sp, #44]	; 0x2c
   11c10:	2801      	cmp	r0, #1
   11c12:	f105 0301 	add.w	r3, r5, #1
   11c16:	461a      	mov	r2, r3
   11c18:	d014      	beq.n	11c44 <_strtod_l+0xa8c>
   11c1a:	4428      	add	r0, r5
   11c1c:	1e44      	subs	r4, r0, #1
   11c1e:	e003      	b.n	11c28 <_strtod_l+0xa70>
   11c20:	0046      	lsls	r6, r0, #1
   11c22:	429c      	cmp	r4, r3
   11c24:	d00d      	beq.n	11c42 <_strtod_l+0xa8a>
   11c26:	3301      	adds	r3, #1
   11c28:	462a      	mov	r2, r5
   11c2a:	2a08      	cmp	r2, #8
   11c2c:	461d      	mov	r5, r3
   11c2e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   11c32:	d9f5      	bls.n	11c20 <_strtod_l+0xa68>
   11c34:	2b10      	cmp	r3, #16
   11c36:	bfdc      	itt	le
   11c38:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   11c3c:	ea4f 0949 	movle.w	r9, r9, lsl #1
   11c40:	e7ef      	b.n	11c22 <_strtod_l+0xa6a>
   11c42:	3202      	adds	r2, #2
   11c44:	2d08      	cmp	r5, #8
   11c46:	dc3c      	bgt.n	11cc2 <_strtod_l+0xb0a>
   11c48:	4615      	mov	r5, r2
   11c4a:	f7ff bb79 	b.w	11340 <_strtod_l+0x188>
   11c4e:	4989      	ldr	r1, [pc, #548]	; (11e74 <_strtod_l+0xcbc>)
   11c50:	2201      	movs	r2, #1
   11c52:	4638      	mov	r0, r7
   11c54:	f000 fe14 	bl	12880 <strncmp>
   11c58:	2800      	cmp	r0, #0
   11c5a:	f000 8082 	beq.w	11d62 <_strtod_l+0xbaa>
   11c5e:	f04f 0e00 	mov.w	lr, #0
   11c62:	46f1      	mov	r9, lr
   11c64:	4676      	mov	r6, lr
   11c66:	4675      	mov	r5, lr
   11c68:	f7ff bbb5 	b.w	113d6 <_strtod_l+0x21e>
   11c6c:	f644 631f 	movw	r3, #19999	; 0x4e1f
   11c70:	459b      	cmp	fp, r3
   11c72:	bfa8      	it	ge
   11c74:	469b      	movge	fp, r3
   11c76:	e42f      	b.n	114d8 <_strtod_l+0x320>
   11c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11c7c:	4618      	mov	r0, r3
   11c7e:	2b00      	cmp	r3, #0
   11c80:	f47f ae23 	bne.w	118ca <_strtod_l+0x712>
   11c84:	2322      	movs	r3, #34	; 0x22
   11c86:	ed9f 8b74 	vldr	d8, [pc, #464]	; 11e58 <_strtod_l+0xca0>
   11c8a:	9812      	ldr	r0, [sp, #72]	; 0x48
   11c8c:	f8c8 3000 	str.w	r3, [r8]
   11c90:	e678      	b.n	11984 <_strtod_l+0x7cc>
   11c92:	eeb0 7b49 	vmov.f64	d7, d9
   11c96:	e6c0      	b.n	11a1a <_strtod_l+0x862>
   11c98:	4977      	ldr	r1, [pc, #476]	; (11e78 <_strtod_l+0xcc0>)
   11c9a:	a811      	add	r0, sp, #68	; 0x44
   11c9c:	f001 fe64 	bl	13968 <__match>
   11ca0:	2800      	cmp	r0, #0
   11ca2:	f43f ab71 	beq.w	11388 <_strtod_l+0x1d0>
   11ca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11ca8:	4974      	ldr	r1, [pc, #464]	; (11e7c <_strtod_l+0xcc4>)
   11caa:	3b01      	subs	r3, #1
   11cac:	a811      	add	r0, sp, #68	; 0x44
   11cae:	9311      	str	r3, [sp, #68]	; 0x44
   11cb0:	f001 fe5a 	bl	13968 <__match>
   11cb4:	b910      	cbnz	r0, 11cbc <_strtod_l+0xb04>
   11cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11cb8:	3301      	adds	r3, #1
   11cba:	9311      	str	r3, [sp, #68]	; 0x44
   11cbc:	ed9f 8b68 	vldr	d8, [pc, #416]	; 11e60 <_strtod_l+0xca8>
   11cc0:	e437      	b.n	11532 <_strtod_l+0x37a>
   11cc2:	2a10      	cmp	r2, #16
   11cc4:	bfdc      	itt	le
   11cc6:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   11cca:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   11cce:	4615      	mov	r5, r2
   11cd0:	2000      	movs	r0, #0
   11cd2:	f7ff bb3a 	b.w	1134a <_strtod_l+0x192>
   11cd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11cd8:	b13a      	cbz	r2, 11cea <_strtod_l+0xb32>
   11cda:	2135      	movs	r1, #53	; 0x35
   11cdc:	a814      	add	r0, sp, #80	; 0x50
   11cde:	f002 fc27 	bl	14530 <__copybits>
   11ce2:	9912      	ldr	r1, [sp, #72]	; 0x48
   11ce4:	4640      	mov	r0, r8
   11ce6:	f001 ff6f 	bl	13bc8 <_Bfree>
   11cea:	3d01      	subs	r5, #1
   11cec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11cee:	2d04      	cmp	r5, #4
   11cf0:	f200 818f 	bhi.w	12012 <_strtod_l+0xe5a>
   11cf4:	e8df f005 	tbb	[pc, r5]
   11cf8:	1f2a2d03 	.word	0x1f2a2d03
   11cfc:	03          	.byte	0x03
   11cfd:	00          	.byte	0x00
   11cfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11d00:	9204      	str	r2, [sp, #16]
   11d02:	f203 4233 	addw	r2, r3, #1075	; 0x433
   11d06:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11d08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   11d0c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   11d10:	9305      	str	r3, [sp, #20]
   11d12:	05e5      	lsls	r5, r4, #23
   11d14:	d502      	bpl.n	11d1c <_strtod_l+0xb64>
   11d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11d1a:	9305      	str	r3, [sp, #20]
   11d1c:	4a58      	ldr	r2, [pc, #352]	; (11e80 <_strtod_l+0xcc8>)
   11d1e:	401a      	ands	r2, r3
   11d20:	ed9d 8b04 	vldr	d8, [sp, #16]
   11d24:	2a00      	cmp	r2, #0
   11d26:	f47f ac04 	bne.w	11532 <_strtod_l+0x37a>
   11d2a:	f000 fe8d 	bl	12a48 <__errno>
   11d2e:	2322      	movs	r3, #34	; 0x22
   11d30:	6003      	str	r3, [r0, #0]
   11d32:	f7ff bbfe 	b.w	11532 <_strtod_l+0x37a>
   11d36:	f04f 33ff 	mov.w	r3, #4294967295
   11d3a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   11d3e:	e9cd 3604 	strd	r3, r6, [sp, #16]
   11d42:	05e3      	lsls	r3, r4, #23
   11d44:	f57f af5c 	bpl.w	11c00 <_strtod_l+0xa48>
   11d48:	9b05      	ldr	r3, [sp, #20]
   11d4a:	e7e4      	b.n	11d16 <_strtod_l+0xb5e>
   11d4c:	4b4c      	ldr	r3, [pc, #304]	; (11e80 <_strtod_l+0xcc8>)
   11d4e:	9305      	str	r3, [sp, #20]
   11d50:	e7f7      	b.n	11d42 <_strtod_l+0xb8a>
   11d52:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11d54:	9304      	str	r3, [sp, #16]
   11d56:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11d58:	9305      	str	r3, [sp, #20]
   11d5a:	e7da      	b.n	11d12 <_strtod_l+0xb5a>
   11d5c:	2000      	movs	r0, #0
   11d5e:	f7ff bae1 	b.w	11324 <_strtod_l+0x16c>
   11d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11d64:	461a      	mov	r2, r3
   11d66:	3301      	adds	r3, #1
   11d68:	9311      	str	r3, [sp, #68]	; 0x44
   11d6a:	7854      	ldrb	r4, [r2, #1]
   11d6c:	4606      	mov	r6, r0
   11d6e:	4681      	mov	r9, r0
   11d70:	f7ff bacd 	b.w	1130e <_strtod_l+0x156>
   11d74:	4b43      	ldr	r3, [pc, #268]	; (11e84 <_strtod_l+0xccc>)
   11d76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11d7a:	ed93 8b00 	vldr	d8, [r3]
   11d7e:	ed9d 7b04 	vldr	d7, [sp, #16]
   11d82:	ee28 8b07 	vmul.f64	d8, d8, d7
   11d86:	f7ff bbd4 	b.w	11532 <_strtod_l+0x37a>
   11d8a:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   11d8e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   11d92:	e511      	b.n	117b8 <_strtod_l+0x600>
   11d94:	46ae      	mov	lr, r5
   11d96:	900b      	str	r0, [sp, #44]	; 0x2c
   11d98:	f7ff badc 	b.w	11354 <_strtod_l+0x19c>
   11d9c:	4b39      	ldr	r3, [pc, #228]	; (11e84 <_strtod_l+0xccc>)
   11d9e:	f1c5 050f 	rsb	r5, r5, #15
   11da2:	1b4a      	subs	r2, r1, r5
   11da4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   11da8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11dac:	ed95 8b00 	vldr	d8, [r5]
   11db0:	ed93 7b00 	vldr	d7, [r3]
   11db4:	ed9d 6b04 	vldr	d6, [sp, #16]
   11db8:	ee28 8b06 	vmul.f64	d8, d8, d6
   11dbc:	ee28 8b07 	vmul.f64	d8, d8, d7
   11dc0:	f7ff bbb7 	b.w	11532 <_strtod_l+0x37a>
   11dc4:	2d00      	cmp	r5, #0
   11dc6:	f000 8095 	beq.w	11ef4 <_strtod_l+0xd3c>
   11dca:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   11dce:	4b2e      	ldr	r3, [pc, #184]	; (11e88 <_strtod_l+0xcd0>)
   11dd0:	f3cc 0113 	ubfx	r1, ip, #0, #20
   11dd4:	4299      	cmp	r1, r3
   11dd6:	4662      	mov	r2, ip
   11dd8:	f000 80d2 	beq.w	11f80 <_strtod_l+0xdc8>
   11ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11dde:	2b00      	cmp	r3, #0
   11de0:	f000 80a5 	beq.w	11f2e <_strtod_l+0xd76>
   11de4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11de8:	4213      	tst	r3, r2
   11dea:	4617      	mov	r7, r2
   11dec:	d01a      	beq.n	11e24 <_strtod_l+0xc6c>
   11dee:	eeb0 0b48 	vmov.f64	d0, d8
   11df2:	2d00      	cmp	r5, #0
   11df4:	f000 80a6 	beq.w	11f44 <_strtod_l+0xd8c>
   11df8:	f002 fa6a 	bl	142d0 <__ulp>
   11dfc:	9b08      	ldr	r3, [sp, #32]
   11dfe:	b17b      	cbz	r3, 11e20 <_strtod_l+0xc68>
   11e00:	f3c7 530a 	ubfx	r3, r7, #20, #11
   11e04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11e08:	2b00      	cmp	r3, #0
   11e0a:	dd09      	ble.n	11e20 <_strtod_l+0xc68>
   11e0c:	051b      	lsls	r3, r3, #20
   11e0e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   11e12:	2000      	movs	r0, #0
   11e14:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   11e18:	ec41 0b17 	vmov	d7, r0, r1
   11e1c:	ee20 0b07 	vmul.f64	d0, d0, d7
   11e20:	ee38 8b00 	vadd.f64	d8, d8, d0
   11e24:	9b08      	ldr	r3, [sp, #32]
   11e26:	b15b      	cbz	r3, 11e40 <_strtod_l+0xc88>
   11e28:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 11e68 <_strtod_l+0xcb0>
   11e2c:	4b14      	ldr	r3, [pc, #80]	; (11e80 <_strtod_l+0xcc8>)
   11e2e:	ee28 8b07 	vmul.f64	d8, d8, d7
   11e32:	ee18 2a90 	vmov	r2, s17
   11e36:	4013      	ands	r3, r2
   11e38:	b913      	cbnz	r3, 11e40 <_strtod_l+0xc88>
   11e3a:	2322      	movs	r3, #34	; 0x22
   11e3c:	f8c8 3000 	str.w	r3, [r8]
   11e40:	9812      	ldr	r0, [sp, #72]	; 0x48
   11e42:	e59f      	b.n	11984 <_strtod_l+0x7cc>
   11e44:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   11e48:	9305      	str	r3, [sp, #20]
   11e4a:	2300      	movs	r3, #0
   11e4c:	9308      	str	r3, [sp, #32]
   11e4e:	f7ff bbb1 	b.w	115b4 <_strtod_l+0x3fc>
   11e52:	bf00      	nop
   11e54:	f3af 8000 	nop.w
	...
   11e64:	7ff00000 	.word	0x7ff00000
   11e68:	00000000 	.word	0x00000000
   11e6c:	39500000 	.word	0x39500000
   11e70:	20007ebc 	.word	0x20007ebc
   11e74:	200081dc 	.word	0x200081dc
   11e78:	200010c0 	.word	0x200010c0
   11e7c:	200010c4 	.word	0x200010c4
   11e80:	7ff00000 	.word	0x7ff00000
   11e84:	20000328 	.word	0x20000328
   11e88:	000fffff 	.word	0x000fffff
   11e8c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11e90:	430d      	orrs	r5, r1
   11e92:	d1c7      	bne.n	11e24 <_strtod_l+0xc6c>
   11e94:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11e98:	4617      	mov	r7, r2
   11e9a:	2b00      	cmp	r3, #0
   11e9c:	d1c2      	bne.n	11e24 <_strtod_l+0xc6c>
   11e9e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   11ea2:	0d1b      	lsrs	r3, r3, #20
   11ea4:	051b      	lsls	r3, r3, #20
   11ea6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11eaa:	d9bb      	bls.n	11e24 <_strtod_l+0xc6c>
   11eac:	f8da 3014 	ldr.w	r3, [sl, #20]
   11eb0:	b91b      	cbnz	r3, 11eba <_strtod_l+0xd02>
   11eb2:	f8da 3010 	ldr.w	r3, [sl, #16]
   11eb6:	2b01      	cmp	r3, #1
   11eb8:	ddb4      	ble.n	11e24 <_strtod_l+0xc6c>
   11eba:	4651      	mov	r1, sl
   11ebc:	2201      	movs	r2, #1
   11ebe:	4640      	mov	r0, r8
   11ec0:	f002 f8c2 	bl	14048 <__lshift>
   11ec4:	4621      	mov	r1, r4
   11ec6:	4682      	mov	sl, r0
   11ec8:	f002 f936 	bl	14138 <__mcmp>
   11ecc:	2800      	cmp	r0, #0
   11ece:	dda9      	ble.n	11e24 <_strtod_l+0xc6c>
   11ed0:	9b08      	ldr	r3, [sp, #32]
   11ed2:	2b00      	cmp	r3, #0
   11ed4:	d17e      	bne.n	11fd4 <_strtod_l+0xe1c>
   11ed6:	4b50      	ldr	r3, [pc, #320]	; (12018 <_strtod_l+0xe60>)
   11ed8:	403b      	ands	r3, r7
   11eda:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   11ede:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   11ee2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   11ee6:	9305      	str	r3, [sp, #20]
   11ee8:	f04f 33ff 	mov.w	r3, #4294967295
   11eec:	9304      	str	r3, [sp, #16]
   11eee:	ed9d 8b04 	vldr	d8, [sp, #16]
   11ef2:	e797      	b.n	11e24 <_strtod_l+0xc6c>
   11ef4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11ef8:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11efc:	430b      	orrs	r3, r1
   11efe:	4617      	mov	r7, r2
   11f00:	f47f af6c 	bne.w	11ddc <_strtod_l+0xc24>
   11f04:	e7e4      	b.n	11ed0 <_strtod_l+0xd18>
   11f06:	4945      	ldr	r1, [pc, #276]	; (1201c <_strtod_l+0xe64>)
   11f08:	a811      	add	r0, sp, #68	; 0x44
   11f0a:	aa14      	add	r2, sp, #80	; 0x50
   11f0c:	f001 fd48 	bl	139a0 <__hexnan>
   11f10:	2805      	cmp	r0, #5
   11f12:	f47f ab06 	bne.w	11522 <_strtod_l+0x36a>
   11f16:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11f18:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   11f1c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   11f20:	9305      	str	r3, [sp, #20]
   11f22:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11f24:	9304      	str	r3, [sp, #16]
   11f26:	ed9d 8b04 	vldr	d8, [sp, #16]
   11f2a:	f7ff bb02 	b.w	11532 <_strtod_l+0x37a>
   11f2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11f34:	4203      	tst	r3, r0
   11f36:	f43f af75 	beq.w	11e24 <_strtod_l+0xc6c>
   11f3a:	460f      	mov	r7, r1
   11f3c:	e757      	b.n	11dee <_strtod_l+0xc36>
   11f3e:	4c38      	ldr	r4, [pc, #224]	; (12020 <_strtod_l+0xe68>)
   11f40:	2100      	movs	r1, #0
   11f42:	e58f      	b.n	11a64 <_strtod_l+0x8ac>
   11f44:	f002 f9c4 	bl	142d0 <__ulp>
   11f48:	9b08      	ldr	r3, [sp, #32]
   11f4a:	2b00      	cmp	r3, #0
   11f4c:	d055      	beq.n	11ffa <_strtod_l+0xe42>
   11f4e:	f3c7 530a 	ubfx	r3, r7, #20, #11
   11f52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11f56:	2b00      	cmp	r3, #0
   11f58:	dd09      	ble.n	11f6e <_strtod_l+0xdb6>
   11f5a:	051b      	lsls	r3, r3, #20
   11f5c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   11f60:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   11f64:	4628      	mov	r0, r5
   11f66:	ec41 0b17 	vmov	d7, r0, r1
   11f6a:	ee20 0b07 	vmul.f64	d0, d0, d7
   11f6e:	ee38 8b40 	vsub.f64	d8, d8, d0
   11f72:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11f7a:	f47f af55 	bne.w	11e28 <_strtod_l+0xc70>
   11f7e:	e681      	b.n	11c84 <_strtod_l+0xacc>
   11f80:	9b08      	ldr	r3, [sp, #32]
   11f82:	9904      	ldr	r1, [sp, #16]
   11f84:	b31b      	cbz	r3, 11fce <_strtod_l+0xe16>
   11f86:	4b24      	ldr	r3, [pc, #144]	; (12018 <_strtod_l+0xe60>)
   11f88:	4013      	ands	r3, r2
   11f8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   11f8e:	d81e      	bhi.n	11fce <_strtod_l+0xe16>
   11f90:	0d1b      	lsrs	r3, r3, #20
   11f92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11f96:	f04f 30ff 	mov.w	r0, #4294967295
   11f9a:	fa00 f303 	lsl.w	r3, r0, r3
   11f9e:	4299      	cmp	r1, r3
   11fa0:	f47f af1c 	bne.w	11ddc <_strtod_l+0xc24>
   11fa4:	4b1f      	ldr	r3, [pc, #124]	; (12024 <_strtod_l+0xe6c>)
   11fa6:	429a      	cmp	r2, r3
   11fa8:	d030      	beq.n	1200c <_strtod_l+0xe54>
   11faa:	4b1b      	ldr	r3, [pc, #108]	; (12018 <_strtod_l+0xe60>)
   11fac:	4013      	ands	r3, r2
   11fae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   11fb2:	9305      	str	r3, [sp, #20]
   11fb4:	2300      	movs	r3, #0
   11fb6:	9304      	str	r3, [sp, #16]
   11fb8:	ed9d 8b04 	vldr	d8, [sp, #16]
   11fbc:	e732      	b.n	11e24 <_strtod_l+0xc6c>
   11fbe:	f04f 32ff 	mov.w	r2, #4294967295
   11fc2:	fa02 f303 	lsl.w	r3, r2, r3
   11fc6:	9a04      	ldr	r2, [sp, #16]
   11fc8:	401a      	ands	r2, r3
   11fca:	9204      	str	r2, [sp, #16]
   11fcc:	e5d0      	b.n	11b70 <_strtod_l+0x9b8>
   11fce:	f04f 33ff 	mov.w	r3, #4294967295
   11fd2:	e7e4      	b.n	11f9e <_strtod_l+0xde6>
   11fd4:	4b10      	ldr	r3, [pc, #64]	; (12018 <_strtod_l+0xe60>)
   11fd6:	403b      	ands	r3, r7
   11fd8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11fdc:	f73f af7d 	bgt.w	11eda <_strtod_l+0xd22>
   11fe0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   11fe4:	f73f af20 	bgt.w	11e28 <_strtod_l+0xc70>
   11fe8:	e64c      	b.n	11c84 <_strtod_l+0xacc>
   11fea:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   11fee:	f04f 33ff 	mov.w	r3, #4294967295
   11ff2:	4093      	lsls	r3, r2
   11ff4:	400b      	ands	r3, r1
   11ff6:	9305      	str	r3, [sp, #20]
   11ff8:	e5ba      	b.n	11b70 <_strtod_l+0x9b8>
   11ffa:	ee38 8b40 	vsub.f64	d8, d8, d0
   11ffe:	eeb5 8b40 	vcmp.f64	d8, #0.0
   12002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12006:	f47f af1b 	bne.w	11e40 <_strtod_l+0xc88>
   1200a:	e63b      	b.n	11c84 <_strtod_l+0xacc>
   1200c:	3101      	adds	r1, #1
   1200e:	d1cc      	bne.n	11faa <_strtod_l+0xdf2>
   12010:	e409      	b.n	11826 <_strtod_l+0x66e>
   12012:	2300      	movs	r3, #0
   12014:	e67d      	b.n	11d12 <_strtod_l+0xb5a>
   12016:	bf00      	nop
   12018:	7ff00000 	.word	0x7ff00000
   1201c:	20007ed0 	.word	0x20007ed0
   12020:	20000300 	.word	0x20000300
   12024:	7fefffff 	.word	0x7fefffff

00012028 <_strtod_r>:
   12028:	4b01      	ldr	r3, [pc, #4]	; (12030 <_strtod_r+0x8>)
   1202a:	f7ff b8c5 	b.w	111b8 <_strtod_l>
   1202e:	bf00      	nop
   12030:	20008e4c 	.word	0x20008e4c

00012034 <_strtol_l.constprop.0>:
   12034:	2b01      	cmp	r3, #1
   12036:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1203a:	d040      	beq.n	120be <_strtol_l.constprop.0+0x8a>
   1203c:	2b24      	cmp	r3, #36	; 0x24
   1203e:	4698      	mov	r8, r3
   12040:	d83d      	bhi.n	120be <_strtol_l.constprop.0+0x8a>
   12042:	4d4c      	ldr	r5, [pc, #304]	; (12174 <_strtol_l.constprop.0+0x140>)
   12044:	468e      	mov	lr, r1
   12046:	4676      	mov	r6, lr
   12048:	f81e bb01 	ldrb.w	fp, [lr], #1
   1204c:	f815 400b 	ldrb.w	r4, [r5, fp]
   12050:	f014 0408 	ands.w	r4, r4, #8
   12054:	d1f7      	bne.n	12046 <_strtol_l.constprop.0+0x12>
   12056:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1205a:	d072      	beq.n	12142 <_strtol_l.constprop.0+0x10e>
   1205c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   12060:	bf08      	it	eq
   12062:	f89e b000 	ldrbeq.w	fp, [lr]
   12066:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   1206a:	bf08      	it	eq
   1206c:	f106 0e02 	addeq.w	lr, r6, #2
   12070:	2b00      	cmp	r3, #0
   12072:	d042      	beq.n	120fa <_strtol_l.constprop.0+0xc6>
   12074:	2b10      	cmp	r3, #16
   12076:	d057      	beq.n	12128 <_strtol_l.constprop.0+0xf4>
   12078:	fbb9 f7f8 	udiv	r7, r9, r8
   1207c:	2500      	movs	r5, #0
   1207e:	462e      	mov	r6, r5
   12080:	fb08 9a17 	mls	sl, r8, r7, r9
   12084:	e005      	b.n	12092 <_strtol_l.constprop.0+0x5e>
   12086:	d033      	beq.n	120f0 <_strtol_l.constprop.0+0xbc>
   12088:	fb08 c606 	mla	r6, r8, r6, ip
   1208c:	2501      	movs	r5, #1
   1208e:	f81e bb01 	ldrb.w	fp, [lr], #1
   12092:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   12096:	f1bc 0f09 	cmp.w	ip, #9
   1209a:	d906      	bls.n	120aa <_strtol_l.constprop.0+0x76>
   1209c:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   120a0:	f1bc 0f19 	cmp.w	ip, #25
   120a4:	d812      	bhi.n	120cc <_strtol_l.constprop.0+0x98>
   120a6:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   120aa:	4563      	cmp	r3, ip
   120ac:	dd17      	ble.n	120de <_strtol_l.constprop.0+0xaa>
   120ae:	f1b5 3fff 	cmp.w	r5, #4294967295
   120b2:	d0ec      	beq.n	1208e <_strtol_l.constprop.0+0x5a>
   120b4:	42b7      	cmp	r7, r6
   120b6:	d2e6      	bcs.n	12086 <_strtol_l.constprop.0+0x52>
   120b8:	f04f 35ff 	mov.w	r5, #4294967295
   120bc:	e7e7      	b.n	1208e <_strtol_l.constprop.0+0x5a>
   120be:	f000 fcc3 	bl	12a48 <__errno>
   120c2:	2316      	movs	r3, #22
   120c4:	6003      	str	r3, [r0, #0]
   120c6:	2000      	movs	r0, #0
   120c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120cc:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   120d0:	f1bc 0f19 	cmp.w	ip, #25
   120d4:	d803      	bhi.n	120de <_strtol_l.constprop.0+0xaa>
   120d6:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   120da:	4563      	cmp	r3, ip
   120dc:	dce7      	bgt.n	120ae <_strtol_l.constprop.0+0x7a>
   120de:	1c6b      	adds	r3, r5, #1
   120e0:	d027      	beq.n	12132 <_strtol_l.constprop.0+0xfe>
   120e2:	b98c      	cbnz	r4, 12108 <_strtol_l.constprop.0+0xd4>
   120e4:	b10a      	cbz	r2, 120ea <_strtol_l.constprop.0+0xb6>
   120e6:	bba5      	cbnz	r5, 12152 <_strtol_l.constprop.0+0x11e>
   120e8:	6011      	str	r1, [r2, #0]
   120ea:	4630      	mov	r0, r6
   120ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120f0:	45e2      	cmp	sl, ip
   120f2:	dac9      	bge.n	12088 <_strtol_l.constprop.0+0x54>
   120f4:	f04f 35ff 	mov.w	r5, #4294967295
   120f8:	e7c9      	b.n	1208e <_strtol_l.constprop.0+0x5a>
   120fa:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   120fe:	d005      	beq.n	1210c <_strtol_l.constprop.0+0xd8>
   12100:	f04f 080a 	mov.w	r8, #10
   12104:	4643      	mov	r3, r8
   12106:	e7b7      	b.n	12078 <_strtol_l.constprop.0+0x44>
   12108:	4276      	negs	r6, r6
   1210a:	e7eb      	b.n	120e4 <_strtol_l.constprop.0+0xb0>
   1210c:	f89e 3000 	ldrb.w	r3, [lr]
   12110:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12114:	2b58      	cmp	r3, #88	; 0x58
   12116:	d121      	bne.n	1215c <_strtol_l.constprop.0+0x128>
   12118:	f04f 0810 	mov.w	r8, #16
   1211c:	f89e b001 	ldrb.w	fp, [lr, #1]
   12120:	4643      	mov	r3, r8
   12122:	f10e 0e02 	add.w	lr, lr, #2
   12126:	e7a7      	b.n	12078 <_strtol_l.constprop.0+0x44>
   12128:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1212c:	d01a      	beq.n	12164 <_strtol_l.constprop.0+0x130>
   1212e:	4698      	mov	r8, r3
   12130:	e7a2      	b.n	12078 <_strtol_l.constprop.0+0x44>
   12132:	2322      	movs	r3, #34	; 0x22
   12134:	6003      	str	r3, [r0, #0]
   12136:	b172      	cbz	r2, 12156 <_strtol_l.constprop.0+0x122>
   12138:	f10e 31ff 	add.w	r1, lr, #4294967295
   1213c:	464e      	mov	r6, r9
   1213e:	6011      	str	r1, [r2, #0]
   12140:	e7d3      	b.n	120ea <_strtol_l.constprop.0+0xb6>
   12142:	f89e b000 	ldrb.w	fp, [lr]
   12146:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   1214a:	f106 0e02 	add.w	lr, r6, #2
   1214e:	2401      	movs	r4, #1
   12150:	e78e      	b.n	12070 <_strtol_l.constprop.0+0x3c>
   12152:	46b1      	mov	r9, r6
   12154:	e7f0      	b.n	12138 <_strtol_l.constprop.0+0x104>
   12156:	464e      	mov	r6, r9
   12158:	4630      	mov	r0, r6
   1215a:	e7c7      	b.n	120ec <_strtol_l.constprop.0+0xb8>
   1215c:	f04f 0808 	mov.w	r8, #8
   12160:	4643      	mov	r3, r8
   12162:	e789      	b.n	12078 <_strtol_l.constprop.0+0x44>
   12164:	f89e 5000 	ldrb.w	r5, [lr]
   12168:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   1216c:	2d58      	cmp	r5, #88	; 0x58
   1216e:	d0d3      	beq.n	12118 <_strtol_l.constprop.0+0xe4>
   12170:	4698      	mov	r8, r3
   12172:	e781      	b.n	12078 <_strtol_l.constprop.0+0x44>
   12174:	20000f3d 	.word	0x20000f3d

00012178 <_strtol_r>:
   12178:	f7ff bf5c 	b.w	12034 <_strtol_l.constprop.0>

0001217c <__cxa_atexit>:
   1217c:	4613      	mov	r3, r2
   1217e:	460a      	mov	r2, r1
   12180:	4601      	mov	r1, r0
   12182:	2002      	movs	r0, #2
   12184:	f000 bf3a 	b.w	12ffc <__register_exitproc>

00012188 <fcvtf>:
   12188:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   1218c:	2300      	movs	r3, #0
   1218e:	f002 ba3d 	b.w	1460c <fcvtbuf>
   12192:	bf00      	nop

00012194 <stdio_exit_handler>:
   12194:	4a02      	ldr	r2, [pc, #8]	; (121a0 <stdio_exit_handler+0xc>)
   12196:	4903      	ldr	r1, [pc, #12]	; (121a4 <stdio_exit_handler+0x10>)
   12198:	4803      	ldr	r0, [pc, #12]	; (121a8 <stdio_exit_handler+0x14>)
   1219a:	f000 b8bb 	b.w	12314 <_fwalk_sglue>
   1219e:	bf00      	nop
   121a0:	200093c8 	.word	0x200093c8
   121a4:	00017a45 	.word	0x00017a45
   121a8:	20008940 	.word	0x20008940

000121ac <cleanup_stdio>:
   121ac:	4b0c      	ldr	r3, [pc, #48]	; (121e0 <cleanup_stdio+0x34>)
   121ae:	6841      	ldr	r1, [r0, #4]
   121b0:	4299      	cmp	r1, r3
   121b2:	b510      	push	{r4, lr}
   121b4:	4604      	mov	r4, r0
   121b6:	d001      	beq.n	121bc <cleanup_stdio+0x10>
   121b8:	f005 fc44 	bl	17a44 <_fclose_r>
   121bc:	68a1      	ldr	r1, [r4, #8]
   121be:	4b09      	ldr	r3, [pc, #36]	; (121e4 <cleanup_stdio+0x38>)
   121c0:	4299      	cmp	r1, r3
   121c2:	d002      	beq.n	121ca <cleanup_stdio+0x1e>
   121c4:	4620      	mov	r0, r4
   121c6:	f005 fc3d 	bl	17a44 <_fclose_r>
   121ca:	68e1      	ldr	r1, [r4, #12]
   121cc:	4b06      	ldr	r3, [pc, #24]	; (121e8 <cleanup_stdio+0x3c>)
   121ce:	4299      	cmp	r1, r3
   121d0:	d004      	beq.n	121dc <cleanup_stdio+0x30>
   121d2:	4620      	mov	r0, r4
   121d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   121d8:	f005 bc34 	b.w	17a44 <_fclose_r>
   121dc:	bd10      	pop	{r4, pc}
   121de:	bf00      	nop
   121e0:	200153d4 	.word	0x200153d4
   121e4:	2001543c 	.word	0x2001543c
   121e8:	200154a4 	.word	0x200154a4

000121ec <global_stdio_init.part.0>:
   121ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   121f0:	4c2a      	ldr	r4, [pc, #168]	; (1229c <global_stdio_init.part.0+0xb0>)
   121f2:	4b2b      	ldr	r3, [pc, #172]	; (122a0 <global_stdio_init.part.0+0xb4>)
   121f4:	482b      	ldr	r0, [pc, #172]	; (122a4 <global_stdio_init.part.0+0xb8>)
   121f6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 122b8 <global_stdio_init.part.0+0xcc>
   121fa:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 122bc <global_stdio_init.part.0+0xd0>
   121fe:	4f2a      	ldr	r7, [pc, #168]	; (122a8 <global_stdio_init.part.0+0xbc>)
   12200:	6018      	str	r0, [r3, #0]
   12202:	2500      	movs	r5, #0
   12204:	2304      	movs	r3, #4
   12206:	2208      	movs	r2, #8
   12208:	4629      	mov	r1, r5
   1220a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1220e:	4e27      	ldr	r6, [pc, #156]	; (122ac <global_stdio_init.part.0+0xc0>)
   12210:	6665      	str	r5, [r4, #100]	; 0x64
   12212:	e9c4 5302 	strd	r5, r3, [r4, #8]
   12216:	e9c4 5500 	strd	r5, r5, [r4]
   1221a:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1221e:	61a5      	str	r5, [r4, #24]
   12220:	f000 fa86 	bl	12730 <memset>
   12224:	4b22      	ldr	r3, [pc, #136]	; (122b0 <global_stdio_init.part.0+0xc4>)
   12226:	6763      	str	r3, [r4, #116]	; 0x74
   12228:	2208      	movs	r2, #8
   1222a:	4629      	mov	r1, r5
   1222c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   12230:	e9c4 4907 	strd	r4, r9, [r4, #28]
   12234:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   12238:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   1223c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   12240:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   12244:	6725      	str	r5, [r4, #112]	; 0x70
   12246:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   1224a:	62e6      	str	r6, [r4, #44]	; 0x2c
   1224c:	f000 fa70 	bl	12730 <memset>
   12250:	4b18      	ldr	r3, [pc, #96]	; (122b4 <global_stdio_init.part.0+0xc8>)
   12252:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   12256:	4629      	mov	r1, r5
   12258:	f104 0368 	add.w	r3, r4, #104	; 0x68
   1225c:	2208      	movs	r2, #8
   1225e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   12262:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   12266:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   1226a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   1226e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   12272:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   12276:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   1227a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   1227e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   12282:	f000 fa55 	bl	12730 <memset>
   12286:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   1228a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   1228e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   12292:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   12296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1229a:	bf00      	nop
   1229c:	200153d4 	.word	0x200153d4
   122a0:	2001550c 	.word	0x2001550c
   122a4:	00012195 	.word	0x00012195
   122a8:	000124e5 	.word	0x000124e5
   122ac:	00012505 	.word	0x00012505
   122b0:	00010009 	.word	0x00010009
   122b4:	00020012 	.word	0x00020012
   122b8:	0001247d 	.word	0x0001247d
   122bc:	000124a5 	.word	0x000124a5

000122c0 <__sinit>:
   122c0:	b510      	push	{r4, lr}
   122c2:	4604      	mov	r4, r0
   122c4:	480a      	ldr	r0, [pc, #40]	; (122f0 <__sinit+0x30>)
   122c6:	f000 fbed 	bl	12aa4 <__retarget_lock_acquire_recursive>
   122ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   122cc:	b923      	cbnz	r3, 122d8 <__sinit+0x18>
   122ce:	4b09      	ldr	r3, [pc, #36]	; (122f4 <__sinit+0x34>)
   122d0:	4a09      	ldr	r2, [pc, #36]	; (122f8 <__sinit+0x38>)
   122d2:	681b      	ldr	r3, [r3, #0]
   122d4:	6362      	str	r2, [r4, #52]	; 0x34
   122d6:	b123      	cbz	r3, 122e2 <__sinit+0x22>
   122d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   122dc:	4804      	ldr	r0, [pc, #16]	; (122f0 <__sinit+0x30>)
   122de:	f000 bbe3 	b.w	12aa8 <__retarget_lock_release_recursive>
   122e2:	f7ff ff83 	bl	121ec <global_stdio_init.part.0>
   122e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   122ea:	4801      	ldr	r0, [pc, #4]	; (122f0 <__sinit+0x30>)
   122ec:	f000 bbdc 	b.w	12aa8 <__retarget_lock_release_recursive>
   122f0:	2001539c 	.word	0x2001539c
   122f4:	2001550c 	.word	0x2001550c
   122f8:	000121ad 	.word	0x000121ad

000122fc <__sfp_lock_acquire>:
   122fc:	4801      	ldr	r0, [pc, #4]	; (12304 <__sfp_lock_acquire+0x8>)
   122fe:	f000 bbd1 	b.w	12aa4 <__retarget_lock_acquire_recursive>
   12302:	bf00      	nop
   12304:	2001539c 	.word	0x2001539c

00012308 <__sfp_lock_release>:
   12308:	4801      	ldr	r0, [pc, #4]	; (12310 <__sfp_lock_release+0x8>)
   1230a:	f000 bbcd 	b.w	12aa8 <__retarget_lock_release_recursive>
   1230e:	bf00      	nop
   12310:	2001539c 	.word	0x2001539c

00012314 <_fwalk_sglue>:
   12314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12318:	4680      	mov	r8, r0
   1231a:	460f      	mov	r7, r1
   1231c:	4616      	mov	r6, r2
   1231e:	f04f 0900 	mov.w	r9, #0
   12322:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   12326:	3d01      	subs	r5, #1
   12328:	d411      	bmi.n	1234e <_fwalk_sglue+0x3a>
   1232a:	89a3      	ldrh	r3, [r4, #12]
   1232c:	2b01      	cmp	r3, #1
   1232e:	f105 35ff 	add.w	r5, r5, #4294967295
   12332:	d908      	bls.n	12346 <_fwalk_sglue+0x32>
   12334:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   12338:	3301      	adds	r3, #1
   1233a:	4621      	mov	r1, r4
   1233c:	d003      	beq.n	12346 <_fwalk_sglue+0x32>
   1233e:	4640      	mov	r0, r8
   12340:	47b8      	blx	r7
   12342:	ea49 0900 	orr.w	r9, r9, r0
   12346:	1c6b      	adds	r3, r5, #1
   12348:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1234c:	d1ed      	bne.n	1232a <_fwalk_sglue+0x16>
   1234e:	6836      	ldr	r6, [r6, #0]
   12350:	2e00      	cmp	r6, #0
   12352:	d1e6      	bne.n	12322 <_fwalk_sglue+0xe>
   12354:	4648      	mov	r0, r9
   12356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1235a:	bf00      	nop

0001235c <snprintf>:
   1235c:	b40c      	push	{r2, r3}
   1235e:	b510      	push	{r4, lr}
   12360:	4b1f      	ldr	r3, [pc, #124]	; (123e0 <snprintf+0x84>)
   12362:	2900      	cmp	r1, #0
   12364:	681c      	ldr	r4, [r3, #0]
   12366:	b09c      	sub	sp, #112	; 0x70
   12368:	db35      	blt.n	123d6 <snprintf+0x7a>
   1236a:	f44f 7302 	mov.w	r3, #520	; 0x208
   1236e:	f8ad 3014 	strh.w	r3, [sp, #20]
   12372:	9002      	str	r0, [sp, #8]
   12374:	9006      	str	r0, [sp, #24]
   12376:	ab1f      	add	r3, sp, #124	; 0x7c
   12378:	d018      	beq.n	123ac <snprintf+0x50>
   1237a:	3901      	subs	r1, #1
   1237c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12380:	9104      	str	r1, [sp, #16]
   12382:	9107      	str	r1, [sp, #28]
   12384:	f8ad 2016 	strh.w	r2, [sp, #22]
   12388:	a902      	add	r1, sp, #8
   1238a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1238c:	9301      	str	r3, [sp, #4]
   1238e:	4620      	mov	r0, r4
   12390:	f002 f98e 	bl	146b0 <_svfprintf_r>
   12394:	1c42      	adds	r2, r0, #1
   12396:	da01      	bge.n	1239c <snprintf+0x40>
   12398:	238b      	movs	r3, #139	; 0x8b
   1239a:	6023      	str	r3, [r4, #0]
   1239c:	9b02      	ldr	r3, [sp, #8]
   1239e:	2200      	movs	r2, #0
   123a0:	701a      	strb	r2, [r3, #0]
   123a2:	b01c      	add	sp, #112	; 0x70
   123a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   123a8:	b002      	add	sp, #8
   123aa:	4770      	bx	lr
   123ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   123b0:	9104      	str	r1, [sp, #16]
   123b2:	9107      	str	r1, [sp, #28]
   123b4:	f8ad 2016 	strh.w	r2, [sp, #22]
   123b8:	a902      	add	r1, sp, #8
   123ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   123bc:	9301      	str	r3, [sp, #4]
   123be:	4620      	mov	r0, r4
   123c0:	f002 f976 	bl	146b0 <_svfprintf_r>
   123c4:	1c43      	adds	r3, r0, #1
   123c6:	da01      	bge.n	123cc <snprintf+0x70>
   123c8:	238b      	movs	r3, #139	; 0x8b
   123ca:	6023      	str	r3, [r4, #0]
   123cc:	b01c      	add	sp, #112	; 0x70
   123ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   123d2:	b002      	add	sp, #8
   123d4:	4770      	bx	lr
   123d6:	238b      	movs	r3, #139	; 0x8b
   123d8:	6023      	str	r3, [r4, #0]
   123da:	f04f 30ff 	mov.w	r0, #4294967295
   123de:	e7f5      	b.n	123cc <snprintf+0x70>
   123e0:	200093d4 	.word	0x200093d4

000123e4 <sprintf>:
   123e4:	b40e      	push	{r1, r2, r3}
   123e6:	b510      	push	{r4, lr}
   123e8:	b09d      	sub	sp, #116	; 0x74
   123ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   123ee:	ab1f      	add	r3, sp, #124	; 0x7c
   123f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   123f4:	9104      	str	r1, [sp, #16]
   123f6:	4909      	ldr	r1, [pc, #36]	; (1241c <sprintf+0x38>)
   123f8:	f853 2b04 	ldr.w	r2, [r3], #4
   123fc:	9002      	str	r0, [sp, #8]
   123fe:	4c08      	ldr	r4, [pc, #32]	; (12420 <sprintf+0x3c>)
   12400:	6808      	ldr	r0, [r1, #0]
   12402:	9301      	str	r3, [sp, #4]
   12404:	a902      	add	r1, sp, #8
   12406:	9405      	str	r4, [sp, #20]
   12408:	f002 f952 	bl	146b0 <_svfprintf_r>
   1240c:	9b02      	ldr	r3, [sp, #8]
   1240e:	2200      	movs	r2, #0
   12410:	701a      	strb	r2, [r3, #0]
   12412:	b01d      	add	sp, #116	; 0x74
   12414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12418:	b003      	add	sp, #12
   1241a:	4770      	bx	lr
   1241c:	200093d4 	.word	0x200093d4
   12420:	ffff0208 	.word	0xffff0208

00012424 <sscanf>:
   12424:	b40e      	push	{r1, r2, r3}
   12426:	b510      	push	{r4, lr}
   12428:	b09f      	sub	sp, #124	; 0x7c
   1242a:	ac21      	add	r4, sp, #132	; 0x84
   1242c:	f44f 7101 	mov.w	r1, #516	; 0x204
   12430:	f854 2b04 	ldr.w	r2, [r4], #4
   12434:	9201      	str	r2, [sp, #4]
   12436:	f8ad 101c 	strh.w	r1, [sp, #28]
   1243a:	9004      	str	r0, [sp, #16]
   1243c:	9008      	str	r0, [sp, #32]
   1243e:	f000 fd5f 	bl	12f00 <strlen>
   12442:	9005      	str	r0, [sp, #20]
   12444:	9009      	str	r0, [sp, #36]	; 0x24
   12446:	480b      	ldr	r0, [pc, #44]	; (12474 <sscanf+0x50>)
   12448:	490b      	ldr	r1, [pc, #44]	; (12478 <sscanf+0x54>)
   1244a:	910c      	str	r1, [sp, #48]	; 0x30
   1244c:	2300      	movs	r3, #0
   1244e:	f64f 7cff 	movw	ip, #65535	; 0xffff
   12452:	9310      	str	r3, [sp, #64]	; 0x40
   12454:	9315      	str	r3, [sp, #84]	; 0x54
   12456:	9a01      	ldr	r2, [sp, #4]
   12458:	6800      	ldr	r0, [r0, #0]
   1245a:	f8ad c01e 	strh.w	ip, [sp, #30]
   1245e:	4623      	mov	r3, r4
   12460:	a904      	add	r1, sp, #16
   12462:	9403      	str	r4, [sp, #12]
   12464:	f003 fec6 	bl	161f4 <__ssvfscanf_r>
   12468:	b01f      	add	sp, #124	; 0x7c
   1246a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1246e:	b003      	add	sp, #12
   12470:	4770      	bx	lr
   12472:	bf00      	nop
   12474:	200093d4 	.word	0x200093d4
   12478:	000124a1 	.word	0x000124a1

0001247c <__sread>:
   1247c:	b510      	push	{r4, lr}
   1247e:	460c      	mov	r4, r1
   12480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12484:	f000 faa2 	bl	129cc <_read_r>
   12488:	2800      	cmp	r0, #0
   1248a:	db03      	blt.n	12494 <__sread+0x18>
   1248c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1248e:	4403      	add	r3, r0
   12490:	6523      	str	r3, [r4, #80]	; 0x50
   12492:	bd10      	pop	{r4, pc}
   12494:	89a3      	ldrh	r3, [r4, #12]
   12496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1249a:	81a3      	strh	r3, [r4, #12]
   1249c:	bd10      	pop	{r4, pc}
   1249e:	bf00      	nop

000124a0 <__seofread>:
   124a0:	2000      	movs	r0, #0
   124a2:	4770      	bx	lr

000124a4 <__swrite>:
   124a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   124a8:	460c      	mov	r4, r1
   124aa:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   124ae:	461f      	mov	r7, r3
   124b0:	05cb      	lsls	r3, r1, #23
   124b2:	4605      	mov	r5, r0
   124b4:	4616      	mov	r6, r2
   124b6:	d40b      	bmi.n	124d0 <__swrite+0x2c>
   124b8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   124bc:	81a1      	strh	r1, [r4, #12]
   124be:	463b      	mov	r3, r7
   124c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   124c4:	4632      	mov	r2, r6
   124c6:	4628      	mov	r0, r5
   124c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   124cc:	f000 baa6 	b.w	12a1c <_write_r>
   124d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   124d4:	2302      	movs	r3, #2
   124d6:	2200      	movs	r2, #0
   124d8:	f000 fa62 	bl	129a0 <_lseek_r>
   124dc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   124e0:	e7ea      	b.n	124b8 <__swrite+0x14>
   124e2:	bf00      	nop

000124e4 <__sseek>:
   124e4:	b510      	push	{r4, lr}
   124e6:	460c      	mov	r4, r1
   124e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   124ec:	f000 fa58 	bl	129a0 <_lseek_r>
   124f0:	89a3      	ldrh	r3, [r4, #12]
   124f2:	1c42      	adds	r2, r0, #1
   124f4:	bf0e      	itee	eq
   124f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   124fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   124fe:	6520      	strne	r0, [r4, #80]	; 0x50
   12500:	81a3      	strh	r3, [r4, #12]
   12502:	bd10      	pop	{r4, pc}

00012504 <__sclose>:
   12504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12508:	f000 ba38 	b.w	1297c <_close_r>

0001250c <_vdprintf_r>:
   1250c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1250e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   12512:	af04      	add	r7, sp, #16
   12514:	9300      	str	r3, [sp, #0]
   12516:	4613      	mov	r3, r2
   12518:	f44f 7200 	mov.w	r2, #512	; 0x200
   1251c:	460e      	mov	r6, r1
   1251e:	9203      	str	r2, [sp, #12]
   12520:	4639      	mov	r1, r7
   12522:	aa03      	add	r2, sp, #12
   12524:	4605      	mov	r5, r0
   12526:	f000 f825 	bl	12574 <_vasnprintf_r>
   1252a:	b188      	cbz	r0, 12550 <_vdprintf_r+0x44>
   1252c:	4604      	mov	r4, r0
   1252e:	4602      	mov	r2, r0
   12530:	9b03      	ldr	r3, [sp, #12]
   12532:	4631      	mov	r1, r6
   12534:	4628      	mov	r0, r5
   12536:	f000 fa71 	bl	12a1c <_write_r>
   1253a:	42bc      	cmp	r4, r7
   1253c:	9003      	str	r0, [sp, #12]
   1253e:	d004      	beq.n	1254a <_vdprintf_r+0x3e>
   12540:	4628      	mov	r0, r5
   12542:	4621      	mov	r1, r4
   12544:	f000 fdee 	bl	13124 <_free_r>
   12548:	9803      	ldr	r0, [sp, #12]
   1254a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   1254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12550:	f04f 30ff 	mov.w	r0, #4294967295
   12554:	e7f9      	b.n	1254a <_vdprintf_r+0x3e>
   12556:	bf00      	nop

00012558 <vdprintf>:
   12558:	b410      	push	{r4}
   1255a:	4c05      	ldr	r4, [pc, #20]	; (12570 <vdprintf+0x18>)
   1255c:	4684      	mov	ip, r0
   1255e:	4613      	mov	r3, r2
   12560:	6820      	ldr	r0, [r4, #0]
   12562:	f85d 4b04 	ldr.w	r4, [sp], #4
   12566:	460a      	mov	r2, r1
   12568:	4661      	mov	r1, ip
   1256a:	f7ff bfcf 	b.w	1250c <_vdprintf_r>
   1256e:	bf00      	nop
   12570:	200093d4 	.word	0x200093d4

00012574 <_vasnprintf_r>:
   12574:	b530      	push	{r4, r5, lr}
   12576:	6814      	ldr	r4, [r2, #0]
   12578:	4615      	mov	r5, r2
   1257a:	b09b      	sub	sp, #108	; 0x6c
   1257c:	461a      	mov	r2, r3
   1257e:	b109      	cbz	r1, 12584 <_vasnprintf_r+0x10>
   12580:	2c00      	cmp	r4, #0
   12582:	d119      	bne.n	125b8 <_vasnprintf_r+0x44>
   12584:	2100      	movs	r1, #0
   12586:	f44f 7322 	mov.w	r3, #648	; 0x288
   1258a:	f8ad 300c 	strh.w	r3, [sp, #12]
   1258e:	9100      	str	r1, [sp, #0]
   12590:	9104      	str	r1, [sp, #16]
   12592:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12596:	9102      	str	r1, [sp, #8]
   12598:	9105      	str	r1, [sp, #20]
   1259a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1259e:	4669      	mov	r1, sp
   125a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   125a2:	f002 f885 	bl	146b0 <_svfprintf_r>
   125a6:	2800      	cmp	r0, #0
   125a8:	db13      	blt.n	125d2 <_vasnprintf_r+0x5e>
   125aa:	9b00      	ldr	r3, [sp, #0]
   125ac:	6028      	str	r0, [r5, #0]
   125ae:	2200      	movs	r2, #0
   125b0:	701a      	strb	r2, [r3, #0]
   125b2:	9804      	ldr	r0, [sp, #16]
   125b4:	b01b      	add	sp, #108	; 0x6c
   125b6:	bd30      	pop	{r4, r5, pc}
   125b8:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   125bc:	9100      	str	r1, [sp, #0]
   125be:	9104      	str	r1, [sp, #16]
   125c0:	f8ad 300c 	strh.w	r3, [sp, #12]
   125c4:	4621      	mov	r1, r4
   125c6:	dae4      	bge.n	12592 <_vasnprintf_r+0x1e>
   125c8:	238b      	movs	r3, #139	; 0x8b
   125ca:	6003      	str	r3, [r0, #0]
   125cc:	2000      	movs	r0, #0
   125ce:	b01b      	add	sp, #108	; 0x6c
   125d0:	bd30      	pop	{r4, r5, pc}
   125d2:	2000      	movs	r0, #0
   125d4:	e7ee      	b.n	125b4 <_vasnprintf_r+0x40>
   125d6:	bf00      	nop

000125d8 <memcmp>:
   125d8:	2a03      	cmp	r2, #3
   125da:	b570      	push	{r4, r5, r6, lr}
   125dc:	d914      	bls.n	12608 <memcmp+0x30>
   125de:	ea40 0301 	orr.w	r3, r0, r1
   125e2:	079b      	lsls	r3, r3, #30
   125e4:	d122      	bne.n	1262c <memcmp+0x54>
   125e6:	4604      	mov	r4, r0
   125e8:	460b      	mov	r3, r1
   125ea:	4619      	mov	r1, r3
   125ec:	4620      	mov	r0, r4
   125ee:	680e      	ldr	r6, [r1, #0]
   125f0:	6805      	ldr	r5, [r0, #0]
   125f2:	42b5      	cmp	r5, r6
   125f4:	f104 0404 	add.w	r4, r4, #4
   125f8:	f103 0304 	add.w	r3, r3, #4
   125fc:	d116      	bne.n	1262c <memcmp+0x54>
   125fe:	3a04      	subs	r2, #4
   12600:	2a03      	cmp	r2, #3
   12602:	4620      	mov	r0, r4
   12604:	4619      	mov	r1, r3
   12606:	d8f0      	bhi.n	125ea <memcmp+0x12>
   12608:	1e54      	subs	r4, r2, #1
   1260a:	b19a      	cbz	r2, 12634 <memcmp+0x5c>
   1260c:	1e42      	subs	r2, r0, #1
   1260e:	3901      	subs	r1, #1
   12610:	e001      	b.n	12616 <memcmp+0x3e>
   12612:	18c3      	adds	r3, r0, r3
   12614:	d00c      	beq.n	12630 <memcmp+0x58>
   12616:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   1261a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1261e:	45e6      	cmp	lr, ip
   12620:	eba4 0302 	sub.w	r3, r4, r2
   12624:	d0f5      	beq.n	12612 <memcmp+0x3a>
   12626:	ebae 000c 	sub.w	r0, lr, ip
   1262a:	bd70      	pop	{r4, r5, r6, pc}
   1262c:	1e54      	subs	r4, r2, #1
   1262e:	e7ed      	b.n	1260c <memcmp+0x34>
   12630:	4618      	mov	r0, r3
   12632:	bd70      	pop	{r4, r5, r6, pc}
   12634:	4610      	mov	r0, r2
   12636:	bd70      	pop	{r4, r5, r6, pc}

00012638 <memmove>:
   12638:	4288      	cmp	r0, r1
   1263a:	d90d      	bls.n	12658 <memmove+0x20>
   1263c:	188b      	adds	r3, r1, r2
   1263e:	4283      	cmp	r3, r0
   12640:	d90a      	bls.n	12658 <memmove+0x20>
   12642:	eb00 0c02 	add.w	ip, r0, r2
   12646:	b1ba      	cbz	r2, 12678 <memmove+0x40>
   12648:	4662      	mov	r2, ip
   1264a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   1264e:	f802 cd01 	strb.w	ip, [r2, #-1]!
   12652:	4299      	cmp	r1, r3
   12654:	d1f9      	bne.n	1264a <memmove+0x12>
   12656:	4770      	bx	lr
   12658:	2a0f      	cmp	r2, #15
   1265a:	d80e      	bhi.n	1267a <memmove+0x42>
   1265c:	4603      	mov	r3, r0
   1265e:	f102 3cff 	add.w	ip, r2, #4294967295
   12662:	b14a      	cbz	r2, 12678 <memmove+0x40>
   12664:	f10c 0c01 	add.w	ip, ip, #1
   12668:	3b01      	subs	r3, #1
   1266a:	448c      	add	ip, r1
   1266c:	f811 2b01 	ldrb.w	r2, [r1], #1
   12670:	f803 2f01 	strb.w	r2, [r3, #1]!
   12674:	4561      	cmp	r1, ip
   12676:	d1f9      	bne.n	1266c <memmove+0x34>
   12678:	4770      	bx	lr
   1267a:	ea40 0301 	orr.w	r3, r0, r1
   1267e:	079b      	lsls	r3, r3, #30
   12680:	d150      	bne.n	12724 <memmove+0xec>
   12682:	f1a2 0310 	sub.w	r3, r2, #16
   12686:	b570      	push	{r4, r5, r6, lr}
   12688:	f101 0c20 	add.w	ip, r1, #32
   1268c:	f023 050f 	bic.w	r5, r3, #15
   12690:	f101 0e10 	add.w	lr, r1, #16
   12694:	f100 0410 	add.w	r4, r0, #16
   12698:	44ac      	add	ip, r5
   1269a:	091b      	lsrs	r3, r3, #4
   1269c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   126a0:	f844 5c10 	str.w	r5, [r4, #-16]
   126a4:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   126a8:	f844 5c0c 	str.w	r5, [r4, #-12]
   126ac:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   126b0:	f844 5c08 	str.w	r5, [r4, #-8]
   126b4:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   126b8:	f844 5c04 	str.w	r5, [r4, #-4]
   126bc:	f10e 0e10 	add.w	lr, lr, #16
   126c0:	45e6      	cmp	lr, ip
   126c2:	f104 0410 	add.w	r4, r4, #16
   126c6:	d1e9      	bne.n	1269c <memmove+0x64>
   126c8:	3301      	adds	r3, #1
   126ca:	f012 0f0c 	tst.w	r2, #12
   126ce:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   126d2:	f002 040f 	and.w	r4, r2, #15
   126d6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   126da:	d027      	beq.n	1272c <memmove+0xf4>
   126dc:	3c04      	subs	r4, #4
   126de:	f024 0603 	bic.w	r6, r4, #3
   126e2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   126e6:	441e      	add	r6, r3
   126e8:	1f1c      	subs	r4, r3, #4
   126ea:	468e      	mov	lr, r1
   126ec:	f85e 5b04 	ldr.w	r5, [lr], #4
   126f0:	f844 5f04 	str.w	r5, [r4, #4]!
   126f4:	42b4      	cmp	r4, r6
   126f6:	d1f9      	bne.n	126ec <memmove+0xb4>
   126f8:	f10c 0401 	add.w	r4, ip, #1
   126fc:	f002 0203 	and.w	r2, r2, #3
   12700:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   12704:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   12708:	f102 3cff 	add.w	ip, r2, #4294967295
   1270c:	b14a      	cbz	r2, 12722 <memmove+0xea>
   1270e:	f10c 0c01 	add.w	ip, ip, #1
   12712:	3b01      	subs	r3, #1
   12714:	448c      	add	ip, r1
   12716:	f811 2b01 	ldrb.w	r2, [r1], #1
   1271a:	f803 2f01 	strb.w	r2, [r3, #1]!
   1271e:	4561      	cmp	r1, ip
   12720:	d1f9      	bne.n	12716 <memmove+0xde>
   12722:	bd70      	pop	{r4, r5, r6, pc}
   12724:	f102 3cff 	add.w	ip, r2, #4294967295
   12728:	4603      	mov	r3, r0
   1272a:	e79b      	b.n	12664 <memmove+0x2c>
   1272c:	4622      	mov	r2, r4
   1272e:	e7eb      	b.n	12708 <memmove+0xd0>

00012730 <memset>:
   12730:	0783      	lsls	r3, r0, #30
   12732:	b530      	push	{r4, r5, lr}
   12734:	d048      	beq.n	127c8 <memset+0x98>
   12736:	1e54      	subs	r4, r2, #1
   12738:	2a00      	cmp	r2, #0
   1273a:	d03f      	beq.n	127bc <memset+0x8c>
   1273c:	b2ca      	uxtb	r2, r1
   1273e:	4603      	mov	r3, r0
   12740:	e001      	b.n	12746 <memset+0x16>
   12742:	3c01      	subs	r4, #1
   12744:	d33a      	bcc.n	127bc <memset+0x8c>
   12746:	f803 2b01 	strb.w	r2, [r3], #1
   1274a:	079d      	lsls	r5, r3, #30
   1274c:	d1f9      	bne.n	12742 <memset+0x12>
   1274e:	2c03      	cmp	r4, #3
   12750:	d92d      	bls.n	127ae <memset+0x7e>
   12752:	b2cd      	uxtb	r5, r1
   12754:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12758:	2c0f      	cmp	r4, #15
   1275a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1275e:	d936      	bls.n	127ce <memset+0x9e>
   12760:	f1a4 0210 	sub.w	r2, r4, #16
   12764:	f022 0c0f 	bic.w	ip, r2, #15
   12768:	f103 0e20 	add.w	lr, r3, #32
   1276c:	44e6      	add	lr, ip
   1276e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   12772:	f103 0210 	add.w	r2, r3, #16
   12776:	e942 5504 	strd	r5, r5, [r2, #-16]
   1277a:	e942 5502 	strd	r5, r5, [r2, #-8]
   1277e:	3210      	adds	r2, #16
   12780:	4572      	cmp	r2, lr
   12782:	d1f8      	bne.n	12776 <memset+0x46>
   12784:	f10c 0201 	add.w	r2, ip, #1
   12788:	f014 0f0c 	tst.w	r4, #12
   1278c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   12790:	f004 0c0f 	and.w	ip, r4, #15
   12794:	d013      	beq.n	127be <memset+0x8e>
   12796:	f1ac 0304 	sub.w	r3, ip, #4
   1279a:	f023 0303 	bic.w	r3, r3, #3
   1279e:	3304      	adds	r3, #4
   127a0:	4413      	add	r3, r2
   127a2:	f842 5b04 	str.w	r5, [r2], #4
   127a6:	4293      	cmp	r3, r2
   127a8:	d1fb      	bne.n	127a2 <memset+0x72>
   127aa:	f00c 0403 	and.w	r4, ip, #3
   127ae:	b12c      	cbz	r4, 127bc <memset+0x8c>
   127b0:	b2c9      	uxtb	r1, r1
   127b2:	441c      	add	r4, r3
   127b4:	f803 1b01 	strb.w	r1, [r3], #1
   127b8:	429c      	cmp	r4, r3
   127ba:	d1fb      	bne.n	127b4 <memset+0x84>
   127bc:	bd30      	pop	{r4, r5, pc}
   127be:	4664      	mov	r4, ip
   127c0:	4613      	mov	r3, r2
   127c2:	2c00      	cmp	r4, #0
   127c4:	d1f4      	bne.n	127b0 <memset+0x80>
   127c6:	e7f9      	b.n	127bc <memset+0x8c>
   127c8:	4603      	mov	r3, r0
   127ca:	4614      	mov	r4, r2
   127cc:	e7bf      	b.n	1274e <memset+0x1e>
   127ce:	461a      	mov	r2, r3
   127d0:	46a4      	mov	ip, r4
   127d2:	e7e0      	b.n	12796 <memset+0x66>

000127d4 <strlcat>:
   127d4:	b570      	push	{r4, r5, r6, lr}
   127d6:	b34a      	cbz	r2, 1282c <strlcat+0x58>
   127d8:	4603      	mov	r3, r0
   127da:	1815      	adds	r5, r2, r0
   127dc:	e002      	b.n	127e4 <strlcat+0x10>
   127de:	429d      	cmp	r5, r3
   127e0:	469c      	mov	ip, r3
   127e2:	d005      	beq.n	127f0 <strlcat+0x1c>
   127e4:	469c      	mov	ip, r3
   127e6:	3301      	adds	r3, #1
   127e8:	f89c 4000 	ldrb.w	r4, [ip]
   127ec:	2c00      	cmp	r4, #0
   127ee:	d1f6      	bne.n	127de <strlcat+0xa>
   127f0:	ebac 0600 	sub.w	r6, ip, r0
   127f4:	1b92      	subs	r2, r2, r6
   127f6:	1e55      	subs	r5, r2, #1
   127f8:	b1ca      	cbz	r2, 1282e <strlcat+0x5a>
   127fa:	780c      	ldrb	r4, [r1, #0]
   127fc:	460b      	mov	r3, r1
   127fe:	b93c      	cbnz	r4, 12810 <strlcat+0x3c>
   12800:	e00f      	b.n	12822 <strlcat+0x4e>
   12802:	f802 4b01 	strb.w	r4, [r2], #1
   12806:	3d01      	subs	r5, #1
   12808:	4694      	mov	ip, r2
   1280a:	785c      	ldrb	r4, [r3, #1]
   1280c:	3301      	adds	r3, #1
   1280e:	b134      	cbz	r4, 1281e <strlcat+0x4a>
   12810:	4662      	mov	r2, ip
   12812:	2d00      	cmp	r5, #0
   12814:	d1f5      	bne.n	12802 <strlcat+0x2e>
   12816:	785a      	ldrb	r2, [r3, #1]
   12818:	3301      	adds	r3, #1
   1281a:	2a00      	cmp	r2, #0
   1281c:	d1f5      	bne.n	1280a <strlcat+0x36>
   1281e:	1a5b      	subs	r3, r3, r1
   12820:	441e      	add	r6, r3
   12822:	2300      	movs	r3, #0
   12824:	f88c 3000 	strb.w	r3, [ip]
   12828:	4630      	mov	r0, r6
   1282a:	bd70      	pop	{r4, r5, r6, pc}
   1282c:	4616      	mov	r6, r2
   1282e:	4608      	mov	r0, r1
   12830:	f000 fb66 	bl	12f00 <strlen>
   12834:	4406      	add	r6, r0
   12836:	4630      	mov	r0, r6
   12838:	bd70      	pop	{r4, r5, r6, pc}
   1283a:	bf00      	nop

0001283c <strlcpy>:
   1283c:	b1c2      	cbz	r2, 12870 <strlcpy+0x34>
   1283e:	eb00 0c02 	add.w	ip, r0, r2
   12842:	b500      	push	{lr}
   12844:	460b      	mov	r3, r1
   12846:	f10c 3eff 	add.w	lr, ip, #4294967295
   1284a:	e004      	b.n	12856 <strlcpy+0x1a>
   1284c:	f813 2b01 	ldrb.w	r2, [r3], #1
   12850:	f800 2b01 	strb.w	r2, [r0], #1
   12854:	b142      	cbz	r2, 12868 <strlcpy+0x2c>
   12856:	4586      	cmp	lr, r0
   12858:	d1f8      	bne.n	1284c <strlcpy+0x10>
   1285a:	2200      	movs	r2, #0
   1285c:	f80c 2c01 	strb.w	r2, [ip, #-1]
   12860:	f813 2b01 	ldrb.w	r2, [r3], #1
   12864:	2a00      	cmp	r2, #0
   12866:	d1fb      	bne.n	12860 <strlcpy+0x24>
   12868:	1a59      	subs	r1, r3, r1
   1286a:	1e48      	subs	r0, r1, #1
   1286c:	f85d fb04 	ldr.w	pc, [sp], #4
   12870:	460b      	mov	r3, r1
   12872:	f813 2b01 	ldrb.w	r2, [r3], #1
   12876:	2a00      	cmp	r2, #0
   12878:	d1fb      	bne.n	12872 <strlcpy+0x36>
   1287a:	1a59      	subs	r1, r3, r1
   1287c:	1e48      	subs	r0, r1, #1
   1287e:	4770      	bx	lr

00012880 <strncmp>:
   12880:	2a00      	cmp	r2, #0
   12882:	d03e      	beq.n	12902 <strncmp+0x82>
   12884:	ea40 0301 	orr.w	r3, r0, r1
   12888:	079b      	lsls	r3, r3, #30
   1288a:	b530      	push	{r4, r5, lr}
   1288c:	4684      	mov	ip, r0
   1288e:	d12f      	bne.n	128f0 <strncmp+0x70>
   12890:	2a03      	cmp	r2, #3
   12892:	d92d      	bls.n	128f0 <strncmp+0x70>
   12894:	460b      	mov	r3, r1
   12896:	e008      	b.n	128aa <strncmp+0x2a>
   12898:	3a04      	subs	r2, #4
   1289a:	4684      	mov	ip, r0
   1289c:	4619      	mov	r1, r3
   1289e:	d025      	beq.n	128ec <strncmp+0x6c>
   128a0:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   128a4:	d122      	bne.n	128ec <strncmp+0x6c>
   128a6:	2a03      	cmp	r2, #3
   128a8:	d922      	bls.n	128f0 <strncmp+0x70>
   128aa:	6804      	ldr	r4, [r0, #0]
   128ac:	4619      	mov	r1, r3
   128ae:	f853 5b04 	ldr.w	r5, [r3], #4
   128b2:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   128b6:	42ac      	cmp	r4, r5
   128b8:	4684      	mov	ip, r0
   128ba:	ea2e 0e04 	bic.w	lr, lr, r4
   128be:	f100 0004 	add.w	r0, r0, #4
   128c2:	d0e9      	beq.n	12898 <strncmp+0x18>
   128c4:	f89c 0000 	ldrb.w	r0, [ip]
   128c8:	780c      	ldrb	r4, [r1, #0]
   128ca:	42a0      	cmp	r0, r4
   128cc:	d11b      	bne.n	12906 <strncmp+0x86>
   128ce:	46e6      	mov	lr, ip
   128d0:	b168      	cbz	r0, 128ee <strncmp+0x6e>
   128d2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   128d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   128da:	eba2 030e 	sub.w	r3, r2, lr
   128de:	42a0      	cmp	r0, r4
   128e0:	f103 33ff 	add.w	r3, r3, #4294967295
   128e4:	d10f      	bne.n	12906 <strncmp+0x86>
   128e6:	eb1c 0303 	adds.w	r3, ip, r3
   128ea:	d1f1      	bne.n	128d0 <strncmp+0x50>
   128ec:	2000      	movs	r0, #0
   128ee:	bd30      	pop	{r4, r5, pc}
   128f0:	f89c 0000 	ldrb.w	r0, [ip]
   128f4:	780c      	ldrb	r4, [r1, #0]
   128f6:	4284      	cmp	r4, r0
   128f8:	d105      	bne.n	12906 <strncmp+0x86>
   128fa:	2a01      	cmp	r2, #1
   128fc:	d0f6      	beq.n	128ec <strncmp+0x6c>
   128fe:	46e6      	mov	lr, ip
   12900:	e7e6      	b.n	128d0 <strncmp+0x50>
   12902:	4610      	mov	r0, r2
   12904:	4770      	bx	lr
   12906:	1b00      	subs	r0, r0, r4
   12908:	bd30      	pop	{r4, r5, pc}
   1290a:	bf00      	nop

0001290c <strncpy>:
   1290c:	ea40 0301 	orr.w	r3, r0, r1
   12910:	079b      	lsls	r3, r3, #30
   12912:	b530      	push	{r4, r5, lr}
   12914:	d101      	bne.n	1291a <strncpy+0xe>
   12916:	2a03      	cmp	r2, #3
   12918:	d80f      	bhi.n	1293a <strncpy+0x2e>
   1291a:	4684      	mov	ip, r0
   1291c:	f101 3eff 	add.w	lr, r1, #4294967295
   12920:	e007      	b.n	12932 <strncpy+0x26>
   12922:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   12926:	f803 1b01 	strb.w	r1, [r3], #1
   1292a:	1e54      	subs	r4, r2, #1
   1292c:	b1c1      	cbz	r1, 12960 <strncpy+0x54>
   1292e:	469c      	mov	ip, r3
   12930:	4622      	mov	r2, r4
   12932:	4663      	mov	r3, ip
   12934:	2a00      	cmp	r2, #0
   12936:	d1f4      	bne.n	12922 <strncpy+0x16>
   12938:	bd30      	pop	{r4, r5, pc}
   1293a:	460b      	mov	r3, r1
   1293c:	4684      	mov	ip, r0
   1293e:	4619      	mov	r1, r3
   12940:	f853 5b04 	ldr.w	r5, [r3], #4
   12944:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   12948:	ea24 0405 	bic.w	r4, r4, r5
   1294c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   12950:	d1e4      	bne.n	1291c <strncpy+0x10>
   12952:	3a04      	subs	r2, #4
   12954:	2a03      	cmp	r2, #3
   12956:	f84c 5b04 	str.w	r5, [ip], #4
   1295a:	4619      	mov	r1, r3
   1295c:	d8ef      	bhi.n	1293e <strncpy+0x32>
   1295e:	e7dd      	b.n	1291c <strncpy+0x10>
   12960:	4494      	add	ip, r2
   12962:	2c00      	cmp	r4, #0
   12964:	d0e8      	beq.n	12938 <strncpy+0x2c>
   12966:	f803 1b01 	strb.w	r1, [r3], #1
   1296a:	4563      	cmp	r3, ip
   1296c:	d1fb      	bne.n	12966 <strncpy+0x5a>
   1296e:	bd30      	pop	{r4, r5, pc}

00012970 <__locale_mb_cur_max>:
   12970:	4b01      	ldr	r3, [pc, #4]	; (12978 <__locale_mb_cur_max+0x8>)
   12972:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   12976:	4770      	bx	lr
   12978:	20008e4c 	.word	0x20008e4c

0001297c <_close_r>:
   1297c:	b538      	push	{r3, r4, r5, lr}
   1297e:	4d07      	ldr	r5, [pc, #28]	; (1299c <_close_r+0x20>)
   12980:	2200      	movs	r2, #0
   12982:	4604      	mov	r4, r0
   12984:	4608      	mov	r0, r1
   12986:	602a      	str	r2, [r5, #0]
   12988:	f7fc f9d0 	bl	ed2c <_close>
   1298c:	1c43      	adds	r3, r0, #1
   1298e:	d000      	beq.n	12992 <_close_r+0x16>
   12990:	bd38      	pop	{r3, r4, r5, pc}
   12992:	682b      	ldr	r3, [r5, #0]
   12994:	2b00      	cmp	r3, #0
   12996:	d0fb      	beq.n	12990 <_close_r+0x14>
   12998:	6023      	str	r3, [r4, #0]
   1299a:	bd38      	pop	{r3, r4, r5, pc}
   1299c:	2001574c 	.word	0x2001574c

000129a0 <_lseek_r>:
   129a0:	b538      	push	{r3, r4, r5, lr}
   129a2:	460c      	mov	r4, r1
   129a4:	4d08      	ldr	r5, [pc, #32]	; (129c8 <_lseek_r+0x28>)
   129a6:	4684      	mov	ip, r0
   129a8:	4611      	mov	r1, r2
   129aa:	4620      	mov	r0, r4
   129ac:	461a      	mov	r2, r3
   129ae:	2300      	movs	r3, #0
   129b0:	602b      	str	r3, [r5, #0]
   129b2:	4664      	mov	r4, ip
   129b4:	f7fc f9c6 	bl	ed44 <_lseek>
   129b8:	1c43      	adds	r3, r0, #1
   129ba:	d000      	beq.n	129be <_lseek_r+0x1e>
   129bc:	bd38      	pop	{r3, r4, r5, pc}
   129be:	682b      	ldr	r3, [r5, #0]
   129c0:	2b00      	cmp	r3, #0
   129c2:	d0fb      	beq.n	129bc <_lseek_r+0x1c>
   129c4:	6023      	str	r3, [r4, #0]
   129c6:	bd38      	pop	{r3, r4, r5, pc}
   129c8:	2001574c 	.word	0x2001574c

000129cc <_read_r>:
   129cc:	b538      	push	{r3, r4, r5, lr}
   129ce:	460c      	mov	r4, r1
   129d0:	4d08      	ldr	r5, [pc, #32]	; (129f4 <_read_r+0x28>)
   129d2:	4684      	mov	ip, r0
   129d4:	4611      	mov	r1, r2
   129d6:	4620      	mov	r0, r4
   129d8:	461a      	mov	r2, r3
   129da:	2300      	movs	r3, #0
   129dc:	602b      	str	r3, [r5, #0]
   129de:	4664      	mov	r4, ip
   129e0:	f7fc f9a2 	bl	ed28 <_read>
   129e4:	1c43      	adds	r3, r0, #1
   129e6:	d000      	beq.n	129ea <_read_r+0x1e>
   129e8:	bd38      	pop	{r3, r4, r5, pc}
   129ea:	682b      	ldr	r3, [r5, #0]
   129ec:	2b00      	cmp	r3, #0
   129ee:	d0fb      	beq.n	129e8 <_read_r+0x1c>
   129f0:	6023      	str	r3, [r4, #0]
   129f2:	bd38      	pop	{r3, r4, r5, pc}
   129f4:	2001574c 	.word	0x2001574c

000129f8 <_sbrk_r>:
   129f8:	b538      	push	{r3, r4, r5, lr}
   129fa:	4d07      	ldr	r5, [pc, #28]	; (12a18 <_sbrk_r+0x20>)
   129fc:	2200      	movs	r2, #0
   129fe:	4604      	mov	r4, r0
   12a00:	4608      	mov	r0, r1
   12a02:	602a      	str	r2, [r5, #0]
   12a04:	f7fc f976 	bl	ecf4 <_sbrk>
   12a08:	1c43      	adds	r3, r0, #1
   12a0a:	d000      	beq.n	12a0e <_sbrk_r+0x16>
   12a0c:	bd38      	pop	{r3, r4, r5, pc}
   12a0e:	682b      	ldr	r3, [r5, #0]
   12a10:	2b00      	cmp	r3, #0
   12a12:	d0fb      	beq.n	12a0c <_sbrk_r+0x14>
   12a14:	6023      	str	r3, [r4, #0]
   12a16:	bd38      	pop	{r3, r4, r5, pc}
   12a18:	2001574c 	.word	0x2001574c

00012a1c <_write_r>:
   12a1c:	b538      	push	{r3, r4, r5, lr}
   12a1e:	460c      	mov	r4, r1
   12a20:	4d08      	ldr	r5, [pc, #32]	; (12a44 <_write_r+0x28>)
   12a22:	4684      	mov	ip, r0
   12a24:	4611      	mov	r1, r2
   12a26:	4620      	mov	r0, r4
   12a28:	461a      	mov	r2, r3
   12a2a:	2300      	movs	r3, #0
   12a2c:	602b      	str	r3, [r5, #0]
   12a2e:	4664      	mov	r4, ip
   12a30:	f7fa fff8 	bl	da24 <_write>
   12a34:	1c43      	adds	r3, r0, #1
   12a36:	d000      	beq.n	12a3a <_write_r+0x1e>
   12a38:	bd38      	pop	{r3, r4, r5, pc}
   12a3a:	682b      	ldr	r3, [r5, #0]
   12a3c:	2b00      	cmp	r3, #0
   12a3e:	d0fb      	beq.n	12a38 <_write_r+0x1c>
   12a40:	6023      	str	r3, [r4, #0]
   12a42:	bd38      	pop	{r3, r4, r5, pc}
   12a44:	2001574c 	.word	0x2001574c

00012a48 <__errno>:
   12a48:	4b01      	ldr	r3, [pc, #4]	; (12a50 <__errno+0x8>)
   12a4a:	6818      	ldr	r0, [r3, #0]
   12a4c:	4770      	bx	lr
   12a4e:	bf00      	nop
   12a50:	200093d4 	.word	0x200093d4

00012a54 <__libc_init_array>:
   12a54:	b570      	push	{r4, r5, r6, lr}
   12a56:	4e0d      	ldr	r6, [pc, #52]	; (12a8c <__libc_init_array+0x38>)
   12a58:	4d0d      	ldr	r5, [pc, #52]	; (12a90 <__libc_init_array+0x3c>)
   12a5a:	1b76      	subs	r6, r6, r5
   12a5c:	10b6      	asrs	r6, r6, #2
   12a5e:	d006      	beq.n	12a6e <__libc_init_array+0x1a>
   12a60:	2400      	movs	r4, #0
   12a62:	f855 3b04 	ldr.w	r3, [r5], #4
   12a66:	3401      	adds	r4, #1
   12a68:	4798      	blx	r3
   12a6a:	42a6      	cmp	r6, r4
   12a6c:	d1f9      	bne.n	12a62 <__libc_init_array+0xe>
   12a6e:	4e09      	ldr	r6, [pc, #36]	; (12a94 <__libc_init_array+0x40>)
   12a70:	4d09      	ldr	r5, [pc, #36]	; (12a98 <__libc_init_array+0x44>)
   12a72:	1b76      	subs	r6, r6, r5
   12a74:	f008 fc88 	bl	1b388 <___init_veneer>
   12a78:	10b6      	asrs	r6, r6, #2
   12a7a:	d006      	beq.n	12a8a <__libc_init_array+0x36>
   12a7c:	2400      	movs	r4, #0
   12a7e:	f855 3b04 	ldr.w	r3, [r5], #4
   12a82:	3401      	adds	r4, #1
   12a84:	4798      	blx	r3
   12a86:	42a6      	cmp	r6, r4
   12a88:	d1f9      	bne.n	12a7e <__libc_init_array+0x2a>
   12a8a:	bd70      	pop	{r4, r5, r6, pc}
   12a8c:	60002888 	.word	0x60002888
   12a90:	60002888 	.word	0x60002888
   12a94:	60002898 	.word	0x60002898
   12a98:	60002888 	.word	0x60002888

00012a9c <__retarget_lock_init_recursive>:
   12a9c:	4770      	bx	lr
   12a9e:	bf00      	nop

00012aa0 <__retarget_lock_close_recursive>:
   12aa0:	4770      	bx	lr
   12aa2:	bf00      	nop

00012aa4 <__retarget_lock_acquire_recursive>:
   12aa4:	4770      	bx	lr
   12aa6:	bf00      	nop

00012aa8 <__retarget_lock_release_recursive>:
   12aa8:	4770      	bx	lr
   12aaa:	bf00      	nop
	...
   12ac0:	eba2 0003 	sub.w	r0, r2, r3
   12ac4:	4770      	bx	lr
   12ac6:	bf00      	nop

00012ac8 <strcmp>:
   12ac8:	7802      	ldrb	r2, [r0, #0]
   12aca:	780b      	ldrb	r3, [r1, #0]
   12acc:	2a01      	cmp	r2, #1
   12ace:	bf28      	it	cs
   12ad0:	429a      	cmpcs	r2, r3
   12ad2:	d1f5      	bne.n	12ac0 <__retarget_lock_release_recursive+0x18>
   12ad4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   12ad8:	ea40 0401 	orr.w	r4, r0, r1
   12adc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   12ae0:	f06f 0c00 	mvn.w	ip, #0
   12ae4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   12ae8:	b312      	cbz	r2, 12b30 <strcmp+0x68>
   12aea:	ea80 0401 	eor.w	r4, r0, r1
   12aee:	f014 0f07 	tst.w	r4, #7
   12af2:	d16a      	bne.n	12bca <strcmp+0x102>
   12af4:	f000 0407 	and.w	r4, r0, #7
   12af8:	f020 0007 	bic.w	r0, r0, #7
   12afc:	f004 0503 	and.w	r5, r4, #3
   12b00:	f021 0107 	bic.w	r1, r1, #7
   12b04:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   12b08:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   12b0c:	f014 0f04 	tst.w	r4, #4
   12b10:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   12b14:	fa0c f405 	lsl.w	r4, ip, r5
   12b18:	ea62 0204 	orn	r2, r2, r4
   12b1c:	ea66 0604 	orn	r6, r6, r4
   12b20:	d00a      	beq.n	12b38 <strcmp+0x70>
   12b22:	ea63 0304 	orn	r3, r3, r4
   12b26:	4662      	mov	r2, ip
   12b28:	ea67 0704 	orn	r7, r7, r4
   12b2c:	4666      	mov	r6, ip
   12b2e:	e003      	b.n	12b38 <strcmp+0x70>
   12b30:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   12b34:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   12b38:	fa82 f54c 	uadd8	r5, r2, ip
   12b3c:	ea82 0406 	eor.w	r4, r2, r6
   12b40:	faa4 f48c 	sel	r4, r4, ip
   12b44:	bb6c      	cbnz	r4, 12ba2 <strcmp+0xda>
   12b46:	fa83 f54c 	uadd8	r5, r3, ip
   12b4a:	ea83 0507 	eor.w	r5, r3, r7
   12b4e:	faa5 f58c 	sel	r5, r5, ip
   12b52:	b995      	cbnz	r5, 12b7a <strcmp+0xb2>
   12b54:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   12b58:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   12b5c:	fa82 f54c 	uadd8	r5, r2, ip
   12b60:	ea82 0406 	eor.w	r4, r2, r6
   12b64:	faa4 f48c 	sel	r4, r4, ip
   12b68:	fa83 f54c 	uadd8	r5, r3, ip
   12b6c:	ea83 0507 	eor.w	r5, r3, r7
   12b70:	faa5 f58c 	sel	r5, r5, ip
   12b74:	4325      	orrs	r5, r4
   12b76:	d0db      	beq.n	12b30 <strcmp+0x68>
   12b78:	b99c      	cbnz	r4, 12ba2 <strcmp+0xda>
   12b7a:	ba2d      	rev	r5, r5
   12b7c:	fab5 f485 	clz	r4, r5
   12b80:	f024 0407 	bic.w	r4, r4, #7
   12b84:	fa27 f104 	lsr.w	r1, r7, r4
   12b88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   12b8c:	fa23 f304 	lsr.w	r3, r3, r4
   12b90:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   12b94:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12b98:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12b9c:	eba0 0001 	sub.w	r0, r0, r1
   12ba0:	4770      	bx	lr
   12ba2:	ba24      	rev	r4, r4
   12ba4:	fab4 f484 	clz	r4, r4
   12ba8:	f024 0407 	bic.w	r4, r4, #7
   12bac:	fa26 f104 	lsr.w	r1, r6, r4
   12bb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   12bb4:	fa22 f204 	lsr.w	r2, r2, r4
   12bb8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   12bbc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12bc0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12bc4:	eba0 0001 	sub.w	r0, r0, r1
   12bc8:	4770      	bx	lr
   12bca:	f014 0f03 	tst.w	r4, #3
   12bce:	d13c      	bne.n	12c4a <strcmp+0x182>
   12bd0:	f010 0403 	ands.w	r4, r0, #3
   12bd4:	d128      	bne.n	12c28 <strcmp+0x160>
   12bd6:	f850 2b08 	ldr.w	r2, [r0], #8
   12bda:	f851 3b08 	ldr.w	r3, [r1], #8
   12bde:	fa82 f54c 	uadd8	r5, r2, ip
   12be2:	ea82 0503 	eor.w	r5, r2, r3
   12be6:	faa5 f58c 	sel	r5, r5, ip
   12bea:	b95d      	cbnz	r5, 12c04 <strcmp+0x13c>
   12bec:	f850 2c04 	ldr.w	r2, [r0, #-4]
   12bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12bf4:	fa82 f54c 	uadd8	r5, r2, ip
   12bf8:	ea82 0503 	eor.w	r5, r2, r3
   12bfc:	faa5 f58c 	sel	r5, r5, ip
   12c00:	2d00      	cmp	r5, #0
   12c02:	d0e8      	beq.n	12bd6 <strcmp+0x10e>
   12c04:	ba2d      	rev	r5, r5
   12c06:	fab5 f485 	clz	r4, r5
   12c0a:	f024 0407 	bic.w	r4, r4, #7
   12c0e:	fa23 f104 	lsr.w	r1, r3, r4
   12c12:	fa22 f204 	lsr.w	r2, r2, r4
   12c16:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   12c1a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12c1e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12c22:	eba0 0001 	sub.w	r0, r0, r1
   12c26:	4770      	bx	lr
   12c28:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   12c2c:	f020 0003 	bic.w	r0, r0, #3
   12c30:	f850 2b08 	ldr.w	r2, [r0], #8
   12c34:	f021 0103 	bic.w	r1, r1, #3
   12c38:	f851 3b08 	ldr.w	r3, [r1], #8
   12c3c:	fa0c f404 	lsl.w	r4, ip, r4
   12c40:	ea62 0204 	orn	r2, r2, r4
   12c44:	ea63 0304 	orn	r3, r3, r4
   12c48:	e7c9      	b.n	12bde <strcmp+0x116>
   12c4a:	f010 0403 	ands.w	r4, r0, #3
   12c4e:	d01a      	beq.n	12c86 <strcmp+0x1be>
   12c50:	eba1 0104 	sub.w	r1, r1, r4
   12c54:	f020 0003 	bic.w	r0, r0, #3
   12c58:	07e4      	lsls	r4, r4, #31
   12c5a:	f850 2b04 	ldr.w	r2, [r0], #4
   12c5e:	d006      	beq.n	12c6e <strcmp+0x1a6>
   12c60:	d20f      	bcs.n	12c82 <strcmp+0x1ba>
   12c62:	788b      	ldrb	r3, [r1, #2]
   12c64:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   12c68:	1ae4      	subs	r4, r4, r3
   12c6a:	d106      	bne.n	12c7a <strcmp+0x1b2>
   12c6c:	b12b      	cbz	r3, 12c7a <strcmp+0x1b2>
   12c6e:	78cb      	ldrb	r3, [r1, #3]
   12c70:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   12c74:	1ae4      	subs	r4, r4, r3
   12c76:	d100      	bne.n	12c7a <strcmp+0x1b2>
   12c78:	b91b      	cbnz	r3, 12c82 <strcmp+0x1ba>
   12c7a:	4620      	mov	r0, r4
   12c7c:	f85d 4b10 	ldr.w	r4, [sp], #16
   12c80:	4770      	bx	lr
   12c82:	f101 0104 	add.w	r1, r1, #4
   12c86:	f850 2b04 	ldr.w	r2, [r0], #4
   12c8a:	07cc      	lsls	r4, r1, #31
   12c8c:	f021 0103 	bic.w	r1, r1, #3
   12c90:	f851 3b04 	ldr.w	r3, [r1], #4
   12c94:	d848      	bhi.n	12d28 <strcmp+0x260>
   12c96:	d224      	bcs.n	12ce2 <strcmp+0x21a>
   12c98:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   12c9c:	fa82 f54c 	uadd8	r5, r2, ip
   12ca0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   12ca4:	faa5 f58c 	sel	r5, r5, ip
   12ca8:	d10a      	bne.n	12cc0 <strcmp+0x1f8>
   12caa:	b965      	cbnz	r5, 12cc6 <strcmp+0x1fe>
   12cac:	f851 3b04 	ldr.w	r3, [r1], #4
   12cb0:	ea84 0402 	eor.w	r4, r4, r2
   12cb4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   12cb8:	d10e      	bne.n	12cd8 <strcmp+0x210>
   12cba:	f850 2b04 	ldr.w	r2, [r0], #4
   12cbe:	e7eb      	b.n	12c98 <strcmp+0x1d0>
   12cc0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   12cc4:	e055      	b.n	12d72 <strcmp+0x2aa>
   12cc6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   12cca:	d14d      	bne.n	12d68 <strcmp+0x2a0>
   12ccc:	7808      	ldrb	r0, [r1, #0]
   12cce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12cd2:	f1c0 0000 	rsb	r0, r0, #0
   12cd6:	4770      	bx	lr
   12cd8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   12cdc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   12ce0:	e047      	b.n	12d72 <strcmp+0x2aa>
   12ce2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   12ce6:	fa82 f54c 	uadd8	r5, r2, ip
   12cea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   12cee:	faa5 f58c 	sel	r5, r5, ip
   12cf2:	d10a      	bne.n	12d0a <strcmp+0x242>
   12cf4:	b965      	cbnz	r5, 12d10 <strcmp+0x248>
   12cf6:	f851 3b04 	ldr.w	r3, [r1], #4
   12cfa:	ea84 0402 	eor.w	r4, r4, r2
   12cfe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   12d02:	d10c      	bne.n	12d1e <strcmp+0x256>
   12d04:	f850 2b04 	ldr.w	r2, [r0], #4
   12d08:	e7eb      	b.n	12ce2 <strcmp+0x21a>
   12d0a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   12d0e:	e030      	b.n	12d72 <strcmp+0x2aa>
   12d10:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   12d14:	d128      	bne.n	12d68 <strcmp+0x2a0>
   12d16:	880b      	ldrh	r3, [r1, #0]
   12d18:	ea4f 4212 	mov.w	r2, r2, lsr #16
   12d1c:	e029      	b.n	12d72 <strcmp+0x2aa>
   12d1e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   12d22:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   12d26:	e024      	b.n	12d72 <strcmp+0x2aa>
   12d28:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   12d2c:	fa82 f54c 	uadd8	r5, r2, ip
   12d30:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   12d34:	faa5 f58c 	sel	r5, r5, ip
   12d38:	d10a      	bne.n	12d50 <strcmp+0x288>
   12d3a:	b965      	cbnz	r5, 12d56 <strcmp+0x28e>
   12d3c:	f851 3b04 	ldr.w	r3, [r1], #4
   12d40:	ea84 0402 	eor.w	r4, r4, r2
   12d44:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   12d48:	d109      	bne.n	12d5e <strcmp+0x296>
   12d4a:	f850 2b04 	ldr.w	r2, [r0], #4
   12d4e:	e7eb      	b.n	12d28 <strcmp+0x260>
   12d50:	ea4f 6313 	mov.w	r3, r3, lsr #24
   12d54:	e00d      	b.n	12d72 <strcmp+0x2aa>
   12d56:	f015 0fff 	tst.w	r5, #255	; 0xff
   12d5a:	d105      	bne.n	12d68 <strcmp+0x2a0>
   12d5c:	680b      	ldr	r3, [r1, #0]
   12d5e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   12d62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   12d66:	e004      	b.n	12d72 <strcmp+0x2aa>
   12d68:	f04f 0000 	mov.w	r0, #0
   12d6c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12d70:	4770      	bx	lr
   12d72:	ba12      	rev	r2, r2
   12d74:	ba1b      	rev	r3, r3
   12d76:	fa82 f44c 	uadd8	r4, r2, ip
   12d7a:	ea82 0403 	eor.w	r4, r2, r3
   12d7e:	faa4 f58c 	sel	r5, r4, ip
   12d82:	fab5 f485 	clz	r4, r5
   12d86:	fa02 f204 	lsl.w	r2, r2, r4
   12d8a:	fa03 f304 	lsl.w	r3, r3, r4
   12d8e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   12d92:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12d96:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   12d9a:	4770      	bx	lr

00012d9c <strcpy>:
   12d9c:	ea80 0201 	eor.w	r2, r0, r1
   12da0:	4684      	mov	ip, r0
   12da2:	f012 0f03 	tst.w	r2, #3
   12da6:	d14f      	bne.n	12e48 <strcpy+0xac>
   12da8:	f011 0f03 	tst.w	r1, #3
   12dac:	d132      	bne.n	12e14 <strcpy+0x78>
   12dae:	f84d 4d04 	str.w	r4, [sp, #-4]!
   12db2:	f011 0f04 	tst.w	r1, #4
   12db6:	f851 3b04 	ldr.w	r3, [r1], #4
   12dba:	d00b      	beq.n	12dd4 <strcpy+0x38>
   12dbc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12dc0:	439a      	bics	r2, r3
   12dc2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12dc6:	bf04      	itt	eq
   12dc8:	f84c 3b04 	streq.w	r3, [ip], #4
   12dcc:	f851 3b04 	ldreq.w	r3, [r1], #4
   12dd0:	d116      	bne.n	12e00 <strcpy+0x64>
   12dd2:	bf00      	nop
   12dd4:	f851 4b04 	ldr.w	r4, [r1], #4
   12dd8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12ddc:	439a      	bics	r2, r3
   12dde:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12de2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   12de6:	d10b      	bne.n	12e00 <strcpy+0x64>
   12de8:	f84c 3b04 	str.w	r3, [ip], #4
   12dec:	43a2      	bics	r2, r4
   12dee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12df2:	bf04      	itt	eq
   12df4:	f851 3b04 	ldreq.w	r3, [r1], #4
   12df8:	f84c 4b04 	streq.w	r4, [ip], #4
   12dfc:	d0ea      	beq.n	12dd4 <strcpy+0x38>
   12dfe:	4623      	mov	r3, r4
   12e00:	f80c 3b01 	strb.w	r3, [ip], #1
   12e04:	f013 0fff 	tst.w	r3, #255	; 0xff
   12e08:	ea4f 2333 	mov.w	r3, r3, ror #8
   12e0c:	d1f8      	bne.n	12e00 <strcpy+0x64>
   12e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
   12e12:	4770      	bx	lr
   12e14:	f011 0f01 	tst.w	r1, #1
   12e18:	d006      	beq.n	12e28 <strcpy+0x8c>
   12e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
   12e1e:	f80c 2b01 	strb.w	r2, [ip], #1
   12e22:	2a00      	cmp	r2, #0
   12e24:	bf08      	it	eq
   12e26:	4770      	bxeq	lr
   12e28:	f011 0f02 	tst.w	r1, #2
   12e2c:	d0bf      	beq.n	12dae <strcpy+0x12>
   12e2e:	f831 2b02 	ldrh.w	r2, [r1], #2
   12e32:	f012 0fff 	tst.w	r2, #255	; 0xff
   12e36:	bf16      	itet	ne
   12e38:	f82c 2b02 	strhne.w	r2, [ip], #2
   12e3c:	f88c 2000 	strbeq.w	r2, [ip]
   12e40:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   12e44:	d1b3      	bne.n	12dae <strcpy+0x12>
   12e46:	4770      	bx	lr
   12e48:	f811 2b01 	ldrb.w	r2, [r1], #1
   12e4c:	f80c 2b01 	strb.w	r2, [ip], #1
   12e50:	2a00      	cmp	r2, #0
   12e52:	d1f9      	bne.n	12e48 <strcpy+0xac>
   12e54:	4770      	bx	lr
   12e56:	bf00      	nop
	...

00012e60 <memchr>:
   12e60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12e64:	2a10      	cmp	r2, #16
   12e66:	db2b      	blt.n	12ec0 <memchr+0x60>
   12e68:	f010 0f07 	tst.w	r0, #7
   12e6c:	d008      	beq.n	12e80 <memchr+0x20>
   12e6e:	f810 3b01 	ldrb.w	r3, [r0], #1
   12e72:	3a01      	subs	r2, #1
   12e74:	428b      	cmp	r3, r1
   12e76:	d02d      	beq.n	12ed4 <memchr+0x74>
   12e78:	f010 0f07 	tst.w	r0, #7
   12e7c:	b342      	cbz	r2, 12ed0 <memchr+0x70>
   12e7e:	d1f6      	bne.n	12e6e <memchr+0xe>
   12e80:	b4f0      	push	{r4, r5, r6, r7}
   12e82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   12e86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   12e8a:	f022 0407 	bic.w	r4, r2, #7
   12e8e:	f07f 0700 	mvns.w	r7, #0
   12e92:	2300      	movs	r3, #0
   12e94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   12e98:	3c08      	subs	r4, #8
   12e9a:	ea85 0501 	eor.w	r5, r5, r1
   12e9e:	ea86 0601 	eor.w	r6, r6, r1
   12ea2:	fa85 f547 	uadd8	r5, r5, r7
   12ea6:	faa3 f587 	sel	r5, r3, r7
   12eaa:	fa86 f647 	uadd8	r6, r6, r7
   12eae:	faa5 f687 	sel	r6, r5, r7
   12eb2:	b98e      	cbnz	r6, 12ed8 <memchr+0x78>
   12eb4:	d1ee      	bne.n	12e94 <memchr+0x34>
   12eb6:	bcf0      	pop	{r4, r5, r6, r7}
   12eb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12ebc:	f002 0207 	and.w	r2, r2, #7
   12ec0:	b132      	cbz	r2, 12ed0 <memchr+0x70>
   12ec2:	f810 3b01 	ldrb.w	r3, [r0], #1
   12ec6:	3a01      	subs	r2, #1
   12ec8:	ea83 0301 	eor.w	r3, r3, r1
   12ecc:	b113      	cbz	r3, 12ed4 <memchr+0x74>
   12ece:	d1f8      	bne.n	12ec2 <memchr+0x62>
   12ed0:	2000      	movs	r0, #0
   12ed2:	4770      	bx	lr
   12ed4:	3801      	subs	r0, #1
   12ed6:	4770      	bx	lr
   12ed8:	2d00      	cmp	r5, #0
   12eda:	bf06      	itte	eq
   12edc:	4635      	moveq	r5, r6
   12ede:	3803      	subeq	r0, #3
   12ee0:	3807      	subne	r0, #7
   12ee2:	f015 0f01 	tst.w	r5, #1
   12ee6:	d107      	bne.n	12ef8 <memchr+0x98>
   12ee8:	3001      	adds	r0, #1
   12eea:	f415 7f80 	tst.w	r5, #256	; 0x100
   12eee:	bf02      	ittt	eq
   12ef0:	3001      	addeq	r0, #1
   12ef2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   12ef6:	3001      	addeq	r0, #1
   12ef8:	bcf0      	pop	{r4, r5, r6, r7}
   12efa:	3801      	subs	r0, #1
   12efc:	4770      	bx	lr
   12efe:	bf00      	nop

00012f00 <strlen>:
   12f00:	f890 f000 	pld	[r0]
   12f04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12f08:	f020 0107 	bic.w	r1, r0, #7
   12f0c:	f06f 0c00 	mvn.w	ip, #0
   12f10:	f010 0407 	ands.w	r4, r0, #7
   12f14:	f891 f020 	pld	[r1, #32]
   12f18:	f040 8049 	bne.w	12fae <strlen+0xae>
   12f1c:	f04f 0400 	mov.w	r4, #0
   12f20:	f06f 0007 	mvn.w	r0, #7
   12f24:	e9d1 2300 	ldrd	r2, r3, [r1]
   12f28:	f891 f040 	pld	[r1, #64]	; 0x40
   12f2c:	f100 0008 	add.w	r0, r0, #8
   12f30:	fa82 f24c 	uadd8	r2, r2, ip
   12f34:	faa4 f28c 	sel	r2, r4, ip
   12f38:	fa83 f34c 	uadd8	r3, r3, ip
   12f3c:	faa2 f38c 	sel	r3, r2, ip
   12f40:	bb4b      	cbnz	r3, 12f96 <strlen+0x96>
   12f42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12f46:	fa82 f24c 	uadd8	r2, r2, ip
   12f4a:	f100 0008 	add.w	r0, r0, #8
   12f4e:	faa4 f28c 	sel	r2, r4, ip
   12f52:	fa83 f34c 	uadd8	r3, r3, ip
   12f56:	faa2 f38c 	sel	r3, r2, ip
   12f5a:	b9e3      	cbnz	r3, 12f96 <strlen+0x96>
   12f5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   12f60:	fa82 f24c 	uadd8	r2, r2, ip
   12f64:	f100 0008 	add.w	r0, r0, #8
   12f68:	faa4 f28c 	sel	r2, r4, ip
   12f6c:	fa83 f34c 	uadd8	r3, r3, ip
   12f70:	faa2 f38c 	sel	r3, r2, ip
   12f74:	b97b      	cbnz	r3, 12f96 <strlen+0x96>
   12f76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   12f7a:	f101 0120 	add.w	r1, r1, #32
   12f7e:	fa82 f24c 	uadd8	r2, r2, ip
   12f82:	f100 0008 	add.w	r0, r0, #8
   12f86:	faa4 f28c 	sel	r2, r4, ip
   12f8a:	fa83 f34c 	uadd8	r3, r3, ip
   12f8e:	faa2 f38c 	sel	r3, r2, ip
   12f92:	2b00      	cmp	r3, #0
   12f94:	d0c6      	beq.n	12f24 <strlen+0x24>
   12f96:	2a00      	cmp	r2, #0
   12f98:	bf04      	itt	eq
   12f9a:	3004      	addeq	r0, #4
   12f9c:	461a      	moveq	r2, r3
   12f9e:	ba12      	rev	r2, r2
   12fa0:	fab2 f282 	clz	r2, r2
   12fa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   12fa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   12fac:	4770      	bx	lr
   12fae:	e9d1 2300 	ldrd	r2, r3, [r1]
   12fb2:	f004 0503 	and.w	r5, r4, #3
   12fb6:	f1c4 0000 	rsb	r0, r4, #0
   12fba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   12fbe:	f014 0f04 	tst.w	r4, #4
   12fc2:	f891 f040 	pld	[r1, #64]	; 0x40
   12fc6:	fa0c f505 	lsl.w	r5, ip, r5
   12fca:	ea62 0205 	orn	r2, r2, r5
   12fce:	bf1c      	itt	ne
   12fd0:	ea63 0305 	ornne	r3, r3, r5
   12fd4:	4662      	movne	r2, ip
   12fd6:	f04f 0400 	mov.w	r4, #0
   12fda:	e7a9      	b.n	12f30 <strlen+0x30>
   12fdc:	0000      	movs	r0, r0
	...

00012fe0 <nan>:
   12fe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 12fe8 <nan+0x8>
   12fe4:	4770      	bx	lr
   12fe6:	bf00      	nop
   12fe8:	00000000 	.word	0x00000000
   12fec:	7ff80000 	.word	0x7ff80000

00012ff0 <nanf>:
   12ff0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 12ff8 <nanf+0x8>
   12ff4:	4770      	bx	lr
   12ff6:	bf00      	nop
   12ff8:	7fc00000 	.word	0x7fc00000

00012ffc <__register_exitproc>:
   12ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13000:	f8df a07c 	ldr.w	sl, [pc, #124]	; 13080 <__register_exitproc+0x84>
   13004:	4606      	mov	r6, r0
   13006:	f8da 0000 	ldr.w	r0, [sl]
   1300a:	4698      	mov	r8, r3
   1300c:	460f      	mov	r7, r1
   1300e:	4691      	mov	r9, r2
   13010:	f7ff fd48 	bl	12aa4 <__retarget_lock_acquire_recursive>
   13014:	4b18      	ldr	r3, [pc, #96]	; (13078 <__register_exitproc+0x7c>)
   13016:	681c      	ldr	r4, [r3, #0]
   13018:	b324      	cbz	r4, 13064 <__register_exitproc+0x68>
   1301a:	6865      	ldr	r5, [r4, #4]
   1301c:	2d1f      	cmp	r5, #31
   1301e:	dc24      	bgt.n	1306a <__register_exitproc+0x6e>
   13020:	b95e      	cbnz	r6, 1303a <__register_exitproc+0x3e>
   13022:	1c6b      	adds	r3, r5, #1
   13024:	3502      	adds	r5, #2
   13026:	f8da 0000 	ldr.w	r0, [sl]
   1302a:	6063      	str	r3, [r4, #4]
   1302c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   13030:	f7ff fd3a 	bl	12aa8 <__retarget_lock_release_recursive>
   13034:	2000      	movs	r0, #0
   13036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1303a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   1303e:	2301      	movs	r3, #1
   13040:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   13044:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   13048:	40ab      	lsls	r3, r5
   1304a:	431a      	orrs	r2, r3
   1304c:	2e02      	cmp	r6, #2
   1304e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   13052:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   13056:	d1e4      	bne.n	13022 <__register_exitproc+0x26>
   13058:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   1305c:	431a      	orrs	r2, r3
   1305e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   13062:	e7de      	b.n	13022 <__register_exitproc+0x26>
   13064:	4c05      	ldr	r4, [pc, #20]	; (1307c <__register_exitproc+0x80>)
   13066:	601c      	str	r4, [r3, #0]
   13068:	e7d7      	b.n	1301a <__register_exitproc+0x1e>
   1306a:	f8da 0000 	ldr.w	r0, [sl]
   1306e:	f7ff fd1b 	bl	12aa8 <__retarget_lock_release_recursive>
   13072:	f04f 30ff 	mov.w	r0, #4294967295
   13076:	e7de      	b.n	13036 <__register_exitproc+0x3a>
   13078:	20015200 	.word	0x20015200
   1307c:	20015204 	.word	0x20015204
   13080:	20008e40 	.word	0x20008e40

00013084 <_malloc_trim_r>:
   13084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13086:	4f24      	ldr	r7, [pc, #144]	; (13118 <_malloc_trim_r+0x94>)
   13088:	460c      	mov	r4, r1
   1308a:	4606      	mov	r6, r0
   1308c:	f7fd fe90 	bl	10db0 <__malloc_lock>
   13090:	68bb      	ldr	r3, [r7, #8]
   13092:	685d      	ldr	r5, [r3, #4]
   13094:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   13098:	310f      	adds	r1, #15
   1309a:	f025 0503 	bic.w	r5, r5, #3
   1309e:	194b      	adds	r3, r1, r5
   130a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   130a4:	f023 030f 	bic.w	r3, r3, #15
   130a8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   130ac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   130b0:	db07      	blt.n	130c2 <_malloc_trim_r+0x3e>
   130b2:	2100      	movs	r1, #0
   130b4:	4630      	mov	r0, r6
   130b6:	f7ff fc9f 	bl	129f8 <_sbrk_r>
   130ba:	68bb      	ldr	r3, [r7, #8]
   130bc:	442b      	add	r3, r5
   130be:	4298      	cmp	r0, r3
   130c0:	d004      	beq.n	130cc <_malloc_trim_r+0x48>
   130c2:	4630      	mov	r0, r6
   130c4:	f7fd fe7a 	bl	10dbc <__malloc_unlock>
   130c8:	2000      	movs	r0, #0
   130ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   130cc:	4261      	negs	r1, r4
   130ce:	4630      	mov	r0, r6
   130d0:	f7ff fc92 	bl	129f8 <_sbrk_r>
   130d4:	3001      	adds	r0, #1
   130d6:	d00d      	beq.n	130f4 <_malloc_trim_r+0x70>
   130d8:	4a10      	ldr	r2, [pc, #64]	; (1311c <_malloc_trim_r+0x98>)
   130da:	68bb      	ldr	r3, [r7, #8]
   130dc:	1b2d      	subs	r5, r5, r4
   130de:	f045 0501 	orr.w	r5, r5, #1
   130e2:	605d      	str	r5, [r3, #4]
   130e4:	6813      	ldr	r3, [r2, #0]
   130e6:	4630      	mov	r0, r6
   130e8:	1b1b      	subs	r3, r3, r4
   130ea:	6013      	str	r3, [r2, #0]
   130ec:	f7fd fe66 	bl	10dbc <__malloc_unlock>
   130f0:	2001      	movs	r0, #1
   130f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   130f4:	2100      	movs	r1, #0
   130f6:	4630      	mov	r0, r6
   130f8:	f7ff fc7e 	bl	129f8 <_sbrk_r>
   130fc:	68ba      	ldr	r2, [r7, #8]
   130fe:	1a83      	subs	r3, r0, r2
   13100:	2b0f      	cmp	r3, #15
   13102:	ddde      	ble.n	130c2 <_malloc_trim_r+0x3e>
   13104:	f043 0301 	orr.w	r3, r3, #1
   13108:	6053      	str	r3, [r2, #4]
   1310a:	4b05      	ldr	r3, [pc, #20]	; (13120 <_malloc_trim_r+0x9c>)
   1310c:	4903      	ldr	r1, [pc, #12]	; (1311c <_malloc_trim_r+0x98>)
   1310e:	681b      	ldr	r3, [r3, #0]
   13110:	1ac0      	subs	r0, r0, r3
   13112:	6008      	str	r0, [r1, #0]
   13114:	e7d5      	b.n	130c2 <_malloc_trim_r+0x3e>
   13116:	bf00      	nop
   13118:	20008fb8 	.word	0x20008fb8
   1311c:	200153a0 	.word	0x200153a0
   13120:	200093c0 	.word	0x200093c0

00013124 <_free_r>:
   13124:	2900      	cmp	r1, #0
   13126:	d061      	beq.n	131ec <_free_r+0xc8>
   13128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1312a:	460c      	mov	r4, r1
   1312c:	4606      	mov	r6, r0
   1312e:	f7fd fe3f 	bl	10db0 <__malloc_lock>
   13132:	f854 2c04 	ldr.w	r2, [r4, #-4]
   13136:	4f7b      	ldr	r7, [pc, #492]	; (13324 <_free_r+0x200>)
   13138:	f1a4 0508 	sub.w	r5, r4, #8
   1313c:	f022 0101 	bic.w	r1, r2, #1
   13140:	eb05 0c01 	add.w	ip, r5, r1
   13144:	68b8      	ldr	r0, [r7, #8]
   13146:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1314a:	4560      	cmp	r0, ip
   1314c:	f023 0303 	bic.w	r3, r3, #3
   13150:	f000 808b 	beq.w	1326a <_free_r+0x146>
   13154:	07d2      	lsls	r2, r2, #31
   13156:	f8cc 3004 	str.w	r3, [ip, #4]
   1315a:	d432      	bmi.n	131c2 <_free_r+0x9e>
   1315c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   13160:	1aad      	subs	r5, r5, r2
   13162:	4411      	add	r1, r2
   13164:	68aa      	ldr	r2, [r5, #8]
   13166:	f107 0008 	add.w	r0, r7, #8
   1316a:	4282      	cmp	r2, r0
   1316c:	d06a      	beq.n	13244 <_free_r+0x120>
   1316e:	eb0c 0403 	add.w	r4, ip, r3
   13172:	f8d4 e004 	ldr.w	lr, [r4, #4]
   13176:	68ec      	ldr	r4, [r5, #12]
   13178:	60d4      	str	r4, [r2, #12]
   1317a:	f01e 0f01 	tst.w	lr, #1
   1317e:	60a2      	str	r2, [r4, #8]
   13180:	f000 8097 	beq.w	132b2 <_free_r+0x18e>
   13184:	f041 0301 	orr.w	r3, r1, #1
   13188:	606b      	str	r3, [r5, #4]
   1318a:	f8cc 1000 	str.w	r1, [ip]
   1318e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   13192:	d235      	bcs.n	13200 <_free_r+0xdc>
   13194:	6878      	ldr	r0, [r7, #4]
   13196:	08cb      	lsrs	r3, r1, #3
   13198:	2201      	movs	r2, #1
   1319a:	0949      	lsrs	r1, r1, #5
   1319c:	3301      	adds	r3, #1
   1319e:	408a      	lsls	r2, r1
   131a0:	4302      	orrs	r2, r0
   131a2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   131a6:	607a      	str	r2, [r7, #4]
   131a8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   131ac:	3a08      	subs	r2, #8
   131ae:	e9c5 1202 	strd	r1, r2, [r5, #8]
   131b2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   131b6:	60cd      	str	r5, [r1, #12]
   131b8:	4630      	mov	r0, r6
   131ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   131be:	f7fd bdfd 	b.w	10dbc <__malloc_unlock>
   131c2:	eb0c 0203 	add.w	r2, ip, r3
   131c6:	6852      	ldr	r2, [r2, #4]
   131c8:	07d0      	lsls	r0, r2, #31
   131ca:	d410      	bmi.n	131ee <_free_r+0xca>
   131cc:	4419      	add	r1, r3
   131ce:	f107 0008 	add.w	r0, r7, #8
   131d2:	f8dc 3008 	ldr.w	r3, [ip, #8]
   131d6:	4283      	cmp	r3, r0
   131d8:	d073      	beq.n	132c2 <_free_r+0x19e>
   131da:	f8dc 200c 	ldr.w	r2, [ip, #12]
   131de:	60da      	str	r2, [r3, #12]
   131e0:	6093      	str	r3, [r2, #8]
   131e2:	f041 0301 	orr.w	r3, r1, #1
   131e6:	606b      	str	r3, [r5, #4]
   131e8:	5069      	str	r1, [r5, r1]
   131ea:	e7d0      	b.n	1318e <_free_r+0x6a>
   131ec:	4770      	bx	lr
   131ee:	f041 0301 	orr.w	r3, r1, #1
   131f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   131f6:	f844 3c04 	str.w	r3, [r4, #-4]
   131fa:	f8cc 1000 	str.w	r1, [ip]
   131fe:	d3c9      	bcc.n	13194 <_free_r+0x70>
   13200:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   13204:	ea4f 2351 	mov.w	r3, r1, lsr #9
   13208:	d248      	bcs.n	1329c <_free_r+0x178>
   1320a:	098b      	lsrs	r3, r1, #6
   1320c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   13210:	f103 0238 	add.w	r2, r3, #56	; 0x38
   13214:	00c3      	lsls	r3, r0, #3
   13216:	18f8      	adds	r0, r7, r3
   13218:	58fb      	ldr	r3, [r7, r3]
   1321a:	3808      	subs	r0, #8
   1321c:	4298      	cmp	r0, r3
   1321e:	d059      	beq.n	132d4 <_free_r+0x1b0>
   13220:	685a      	ldr	r2, [r3, #4]
   13222:	f022 0203 	bic.w	r2, r2, #3
   13226:	428a      	cmp	r2, r1
   13228:	d902      	bls.n	13230 <_free_r+0x10c>
   1322a:	689b      	ldr	r3, [r3, #8]
   1322c:	4298      	cmp	r0, r3
   1322e:	d1f7      	bne.n	13220 <_free_r+0xfc>
   13230:	68d8      	ldr	r0, [r3, #12]
   13232:	e9c5 3002 	strd	r3, r0, [r5, #8]
   13236:	6085      	str	r5, [r0, #8]
   13238:	60dd      	str	r5, [r3, #12]
   1323a:	4630      	mov	r0, r6
   1323c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   13240:	f7fd bdbc 	b.w	10dbc <__malloc_unlock>
   13244:	eb0c 0203 	add.w	r2, ip, r3
   13248:	6852      	ldr	r2, [r2, #4]
   1324a:	07d2      	lsls	r2, r2, #31
   1324c:	d463      	bmi.n	13316 <_free_r+0x1f2>
   1324e:	440b      	add	r3, r1
   13250:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   13254:	60ca      	str	r2, [r1, #12]
   13256:	6091      	str	r1, [r2, #8]
   13258:	f043 0201 	orr.w	r2, r3, #1
   1325c:	606a      	str	r2, [r5, #4]
   1325e:	4630      	mov	r0, r6
   13260:	50eb      	str	r3, [r5, r3]
   13262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   13266:	f7fd bda9 	b.w	10dbc <__malloc_unlock>
   1326a:	440b      	add	r3, r1
   1326c:	07d1      	lsls	r1, r2, #31
   1326e:	d407      	bmi.n	13280 <_free_r+0x15c>
   13270:	f854 2c08 	ldr.w	r2, [r4, #-8]
   13274:	1aad      	subs	r5, r5, r2
   13276:	4413      	add	r3, r2
   13278:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   1327c:	60ca      	str	r2, [r1, #12]
   1327e:	6091      	str	r1, [r2, #8]
   13280:	f043 0201 	orr.w	r2, r3, #1
   13284:	606a      	str	r2, [r5, #4]
   13286:	4a28      	ldr	r2, [pc, #160]	; (13328 <_free_r+0x204>)
   13288:	60bd      	str	r5, [r7, #8]
   1328a:	6812      	ldr	r2, [r2, #0]
   1328c:	429a      	cmp	r2, r3
   1328e:	d893      	bhi.n	131b8 <_free_r+0x94>
   13290:	4b26      	ldr	r3, [pc, #152]	; (1332c <_free_r+0x208>)
   13292:	4630      	mov	r0, r6
   13294:	6819      	ldr	r1, [r3, #0]
   13296:	f7ff fef5 	bl	13084 <_malloc_trim_r>
   1329a:	e78d      	b.n	131b8 <_free_r+0x94>
   1329c:	2b14      	cmp	r3, #20
   1329e:	d90a      	bls.n	132b6 <_free_r+0x192>
   132a0:	2b54      	cmp	r3, #84	; 0x54
   132a2:	d81f      	bhi.n	132e4 <_free_r+0x1c0>
   132a4:	0b0b      	lsrs	r3, r1, #12
   132a6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   132aa:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   132ae:	00c3      	lsls	r3, r0, #3
   132b0:	e7b1      	b.n	13216 <_free_r+0xf2>
   132b2:	4419      	add	r1, r3
   132b4:	e78d      	b.n	131d2 <_free_r+0xae>
   132b6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   132ba:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   132be:	00c3      	lsls	r3, r0, #3
   132c0:	e7a9      	b.n	13216 <_free_r+0xf2>
   132c2:	f041 0301 	orr.w	r3, r1, #1
   132c6:	e9c7 5504 	strd	r5, r5, [r7, #16]
   132ca:	e9c5 0002 	strd	r0, r0, [r5, #8]
   132ce:	606b      	str	r3, [r5, #4]
   132d0:	5069      	str	r1, [r5, r1]
   132d2:	e771      	b.n	131b8 <_free_r+0x94>
   132d4:	6879      	ldr	r1, [r7, #4]
   132d6:	1092      	asrs	r2, r2, #2
   132d8:	2401      	movs	r4, #1
   132da:	fa04 f202 	lsl.w	r2, r4, r2
   132de:	430a      	orrs	r2, r1
   132e0:	607a      	str	r2, [r7, #4]
   132e2:	e7a6      	b.n	13232 <_free_r+0x10e>
   132e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   132e8:	d806      	bhi.n	132f8 <_free_r+0x1d4>
   132ea:	0bcb      	lsrs	r3, r1, #15
   132ec:	f103 0078 	add.w	r0, r3, #120	; 0x78
   132f0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   132f4:	00c3      	lsls	r3, r0, #3
   132f6:	e78e      	b.n	13216 <_free_r+0xf2>
   132f8:	f240 5254 	movw	r2, #1364	; 0x554
   132fc:	4293      	cmp	r3, r2
   132fe:	d806      	bhi.n	1330e <_free_r+0x1ea>
   13300:	0c8b      	lsrs	r3, r1, #18
   13302:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   13306:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1330a:	00c3      	lsls	r3, r0, #3
   1330c:	e783      	b.n	13216 <_free_r+0xf2>
   1330e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   13312:	227e      	movs	r2, #126	; 0x7e
   13314:	e77f      	b.n	13216 <_free_r+0xf2>
   13316:	f041 0301 	orr.w	r3, r1, #1
   1331a:	606b      	str	r3, [r5, #4]
   1331c:	f8cc 1000 	str.w	r1, [ip]
   13320:	e74a      	b.n	131b8 <_free_r+0x94>
   13322:	bf00      	nop
   13324:	20008fb8 	.word	0x20008fb8
   13328:	200093c4 	.word	0x200093c4
   1332c:	200153d0 	.word	0x200153d0

00013330 <rshift>:
   13330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13334:	6904      	ldr	r4, [r0, #16]
   13336:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   1333a:	dd2f      	ble.n	1339c <rshift+0x6c>
   1333c:	f100 0e14 	add.w	lr, r0, #20
   13340:	114e      	asrs	r6, r1, #5
   13342:	f011 0c1f 	ands.w	ip, r1, #31
   13346:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   1334a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   1334e:	d02b      	beq.n	133a8 <rshift+0x78>
   13350:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   13354:	3304      	adds	r3, #4
   13356:	429d      	cmp	r5, r3
   13358:	fa21 f10c 	lsr.w	r1, r1, ip
   1335c:	f1cc 0820 	rsb	r8, ip, #32
   13360:	d918      	bls.n	13394 <rshift+0x64>
   13362:	4677      	mov	r7, lr
   13364:	681a      	ldr	r2, [r3, #0]
   13366:	fa02 f208 	lsl.w	r2, r2, r8
   1336a:	430a      	orrs	r2, r1
   1336c:	f847 2b04 	str.w	r2, [r7], #4
   13370:	f853 1b04 	ldr.w	r1, [r3], #4
   13374:	429d      	cmp	r5, r3
   13376:	fa21 f10c 	lsr.w	r1, r1, ip
   1337a:	d8f3      	bhi.n	13364 <rshift+0x34>
   1337c:	1ba3      	subs	r3, r4, r6
   1337e:	009b      	lsls	r3, r3, #2
   13380:	3b05      	subs	r3, #5
   13382:	089b      	lsrs	r3, r3, #2
   13384:	3301      	adds	r3, #1
   13386:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   1338a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   1338e:	b1c9      	cbz	r1, 133c4 <rshift+0x94>
   13390:	3404      	adds	r4, #4
   13392:	e017      	b.n	133c4 <rshift+0x94>
   13394:	6141      	str	r1, [r0, #20]
   13396:	4674      	mov	r4, lr
   13398:	2900      	cmp	r1, #0
   1339a:	d1f9      	bne.n	13390 <rshift+0x60>
   1339c:	2300      	movs	r3, #0
   1339e:	6103      	str	r3, [r0, #16]
   133a0:	2300      	movs	r3, #0
   133a2:	6143      	str	r3, [r0, #20]
   133a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   133a8:	429d      	cmp	r5, r3
   133aa:	bf88      	it	hi
   133ac:	f100 0210 	addhi.w	r2, r0, #16
   133b0:	d9f4      	bls.n	1339c <rshift+0x6c>
   133b2:	f853 1b04 	ldr.w	r1, [r3], #4
   133b6:	f842 1f04 	str.w	r1, [r2, #4]!
   133ba:	429d      	cmp	r5, r3
   133bc:	d8f9      	bhi.n	133b2 <rshift+0x82>
   133be:	1ba4      	subs	r4, r4, r6
   133c0:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   133c4:	eba4 030e 	sub.w	r3, r4, lr
   133c8:	109b      	asrs	r3, r3, #2
   133ca:	4574      	cmp	r4, lr
   133cc:	6103      	str	r3, [r0, #16]
   133ce:	d0e7      	beq.n	133a0 <rshift+0x70>
   133d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000133d4 <__gethex>:
   133d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133d8:	ed2d 8b02 	vpush	{d8}
   133dc:	680c      	ldr	r4, [r1, #0]
   133de:	468b      	mov	fp, r1
   133e0:	78a1      	ldrb	r1, [r4, #2]
   133e2:	b085      	sub	sp, #20
   133e4:	2930      	cmp	r1, #48	; 0x30
   133e6:	ee08 0a10 	vmov	s16, r0
   133ea:	4692      	mov	sl, r2
   133ec:	9302      	str	r3, [sp, #8]
   133ee:	f040 81ce 	bne.w	1378e <__gethex+0x3ba>
   133f2:	f06f 0001 	mvn.w	r0, #1
   133f6:	1b00      	subs	r0, r0, r4
   133f8:	1ce2      	adds	r2, r4, #3
   133fa:	1883      	adds	r3, r0, r2
   133fc:	4614      	mov	r4, r2
   133fe:	f812 1b01 	ldrb.w	r1, [r2], #1
   13402:	2930      	cmp	r1, #48	; 0x30
   13404:	d0f9      	beq.n	133fa <__gethex+0x26>
   13406:	f8df 8300 	ldr.w	r8, [pc, #768]	; 13708 <__gethex+0x334>
   1340a:	f818 2001 	ldrb.w	r2, [r8, r1]
   1340e:	2a00      	cmp	r2, #0
   13410:	f000 80e5 	beq.w	135de <__gethex+0x20a>
   13414:	7822      	ldrb	r2, [r4, #0]
   13416:	2700      	movs	r7, #0
   13418:	f818 2002 	ldrb.w	r2, [r8, r2]
   1341c:	463d      	mov	r5, r7
   1341e:	4626      	mov	r6, r4
   13420:	b12a      	cbz	r2, 1342e <__gethex+0x5a>
   13422:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   13426:	f818 2002 	ldrb.w	r2, [r8, r2]
   1342a:	2a00      	cmp	r2, #0
   1342c:	d1f9      	bne.n	13422 <__gethex+0x4e>
   1342e:	49b5      	ldr	r1, [pc, #724]	; (13704 <__gethex+0x330>)
   13430:	9301      	str	r3, [sp, #4]
   13432:	2201      	movs	r2, #1
   13434:	4630      	mov	r0, r6
   13436:	f7ff fa23 	bl	12880 <strncmp>
   1343a:	9b01      	ldr	r3, [sp, #4]
   1343c:	4681      	mov	r9, r0
   1343e:	2800      	cmp	r0, #0
   13440:	d04d      	beq.n	134de <__gethex+0x10a>
   13442:	2d00      	cmp	r5, #0
   13444:	d14e      	bne.n	134e4 <__gethex+0x110>
   13446:	7832      	ldrb	r2, [r6, #0]
   13448:	46a9      	mov	r9, r5
   1344a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1344e:	2a50      	cmp	r2, #80	; 0x50
   13450:	4635      	mov	r5, r6
   13452:	d050      	beq.n	134f6 <__gethex+0x122>
   13454:	f8cb 6000 	str.w	r6, [fp]
   13458:	2f00      	cmp	r7, #0
   1345a:	d169      	bne.n	13530 <__gethex+0x15c>
   1345c:	1b2b      	subs	r3, r5, r4
   1345e:	3b01      	subs	r3, #1
   13460:	2b07      	cmp	r3, #7
   13462:	4639      	mov	r1, r7
   13464:	dd04      	ble.n	13470 <__gethex+0x9c>
   13466:	105b      	asrs	r3, r3, #1
   13468:	2b07      	cmp	r3, #7
   1346a:	f101 0101 	add.w	r1, r1, #1
   1346e:	dcfa      	bgt.n	13466 <__gethex+0x92>
   13470:	ee18 0a10 	vmov	r0, s16
   13474:	f000 fb82 	bl	13b7c <_Balloc>
   13478:	4683      	mov	fp, r0
   1347a:	2800      	cmp	r0, #0
   1347c:	f000 8266 	beq.w	1394c <__gethex+0x578>
   13480:	f100 0614 	add.w	r6, r0, #20
   13484:	42ac      	cmp	r4, r5
   13486:	9601      	str	r6, [sp, #4]
   13488:	f080 81d2 	bcs.w	13830 <__gethex+0x45c>
   1348c:	2700      	movs	r7, #0
   1348e:	f8cd 900c 	str.w	r9, [sp, #12]
   13492:	499c      	ldr	r1, [pc, #624]	; (13704 <__gethex+0x330>)
   13494:	46a1      	mov	r9, r4
   13496:	463c      	mov	r4, r7
   13498:	e00c      	b.n	134b4 <__gethex+0xe0>
   1349a:	2f20      	cmp	r7, #32
   1349c:	d019      	beq.n	134d2 <__gethex+0xfe>
   1349e:	4638      	mov	r0, r7
   134a0:	3704      	adds	r7, #4
   134a2:	782a      	ldrb	r2, [r5, #0]
   134a4:	f818 2002 	ldrb.w	r2, [r8, r2]
   134a8:	f002 020f 	and.w	r2, r2, #15
   134ac:	4082      	lsls	r2, r0
   134ae:	4314      	orrs	r4, r2
   134b0:	454d      	cmp	r5, r9
   134b2:	d047      	beq.n	13544 <__gethex+0x170>
   134b4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   134b8:	2a2e      	cmp	r2, #46	; 0x2e
   134ba:	d1ee      	bne.n	1349a <__gethex+0xc6>
   134bc:	454d      	cmp	r5, r9
   134be:	d3ec      	bcc.n	1349a <__gethex+0xc6>
   134c0:	2201      	movs	r2, #1
   134c2:	4628      	mov	r0, r5
   134c4:	f7ff f9dc 	bl	12880 <strncmp>
   134c8:	498e      	ldr	r1, [pc, #568]	; (13704 <__gethex+0x330>)
   134ca:	2800      	cmp	r0, #0
   134cc:	d0f0      	beq.n	134b0 <__gethex+0xdc>
   134ce:	2f20      	cmp	r7, #32
   134d0:	d1e5      	bne.n	1349e <__gethex+0xca>
   134d2:	2000      	movs	r0, #0
   134d4:	f846 4b04 	str.w	r4, [r6], #4
   134d8:	2704      	movs	r7, #4
   134da:	4604      	mov	r4, r0
   134dc:	e7e1      	b.n	134a2 <__gethex+0xce>
   134de:	2d00      	cmp	r5, #0
   134e0:	f000 8142 	beq.w	13768 <__gethex+0x394>
   134e4:	7832      	ldrb	r2, [r6, #0]
   134e6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   134ea:	1bad      	subs	r5, r5, r6
   134ec:	2a50      	cmp	r2, #80	; 0x50
   134ee:	ea4f 0985 	mov.w	r9, r5, lsl #2
   134f2:	4635      	mov	r5, r6
   134f4:	d1ae      	bne.n	13454 <__gethex+0x80>
   134f6:	786a      	ldrb	r2, [r5, #1]
   134f8:	2a2b      	cmp	r2, #43	; 0x2b
   134fa:	f000 8125 	beq.w	13748 <__gethex+0x374>
   134fe:	2a2d      	cmp	r2, #45	; 0x2d
   13500:	f000 80a5 	beq.w	1364e <__gethex+0x27a>
   13504:	1c6e      	adds	r6, r5, #1
   13506:	2000      	movs	r0, #0
   13508:	f818 1002 	ldrb.w	r1, [r8, r2]
   1350c:	1e4a      	subs	r2, r1, #1
   1350e:	2a18      	cmp	r2, #24
   13510:	f200 809b 	bhi.w	1364a <__gethex+0x276>
   13514:	7872      	ldrb	r2, [r6, #1]
   13516:	f818 2002 	ldrb.w	r2, [r8, r2]
   1351a:	3910      	subs	r1, #16
   1351c:	3601      	adds	r6, #1
   1351e:	2a00      	cmp	r2, #0
   13520:	d15a      	bne.n	135d8 <__gethex+0x204>
   13522:	b100      	cbz	r0, 13526 <__gethex+0x152>
   13524:	4249      	negs	r1, r1
   13526:	4489      	add	r9, r1
   13528:	f8cb 6000 	str.w	r6, [fp]
   1352c:	2f00      	cmp	r7, #0
   1352e:	d095      	beq.n	1345c <__gethex+0x88>
   13530:	2b00      	cmp	r3, #0
   13532:	bf14      	ite	ne
   13534:	2500      	movne	r5, #0
   13536:	2506      	moveq	r5, #6
   13538:	4628      	mov	r0, r5
   1353a:	b005      	add	sp, #20
   1353c:	ecbd 8b02 	vpop	{d8}
   13540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13544:	f8dd 900c 	ldr.w	r9, [sp, #12]
   13548:	4623      	mov	r3, r4
   1354a:	f846 3b04 	str.w	r3, [r6], #4
   1354e:	4618      	mov	r0, r3
   13550:	9b01      	ldr	r3, [sp, #4]
   13552:	1af6      	subs	r6, r6, r3
   13554:	10b6      	asrs	r6, r6, #2
   13556:	f8cb 6010 	str.w	r6, [fp, #16]
   1355a:	f000 fbe9 	bl	13d30 <__hi0bits>
   1355e:	0176      	lsls	r6, r6, #5
   13560:	f8da 4000 	ldr.w	r4, [sl]
   13564:	1a30      	subs	r0, r6, r0
   13566:	42a0      	cmp	r0, r4
   13568:	dc75      	bgt.n	13656 <__gethex+0x282>
   1356a:	f2c0 80ef 	blt.w	1374c <__gethex+0x378>
   1356e:	2700      	movs	r7, #0
   13570:	f8da 3008 	ldr.w	r3, [sl, #8]
   13574:	454b      	cmp	r3, r9
   13576:	f2c0 8151 	blt.w	1381c <__gethex+0x448>
   1357a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1357e:	454b      	cmp	r3, r9
   13580:	dd4a      	ble.n	13618 <__gethex+0x244>
   13582:	eba3 0909 	sub.w	r9, r3, r9
   13586:	454c      	cmp	r4, r9
   13588:	f300 8082 	bgt.w	13690 <__gethex+0x2bc>
   1358c:	f8da 200c 	ldr.w	r2, [sl, #12]
   13590:	2a02      	cmp	r2, #2
   13592:	f000 8165 	beq.w	13860 <__gethex+0x48c>
   13596:	2a03      	cmp	r2, #3
   13598:	f000 8181 	beq.w	1389e <__gethex+0x4ca>
   1359c:	2a01      	cmp	r2, #1
   1359e:	f000 816f 	beq.w	13880 <__gethex+0x4ac>
   135a2:	ee18 0a10 	vmov	r0, s16
   135a6:	4659      	mov	r1, fp
   135a8:	f000 fb0e 	bl	13bc8 <_Bfree>
   135ac:	2550      	movs	r5, #80	; 0x50
   135ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   135b0:	2300      	movs	r3, #0
   135b2:	4628      	mov	r0, r5
   135b4:	6013      	str	r3, [r2, #0]
   135b6:	b005      	add	sp, #20
   135b8:	ecbd 8b02 	vpop	{d8}
   135bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   135c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   135c8:	f1a2 0110 	sub.w	r1, r2, #16
   135cc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   135d0:	f818 2002 	ldrb.w	r2, [r8, r2]
   135d4:	2a00      	cmp	r2, #0
   135d6:	d0a4      	beq.n	13522 <__gethex+0x14e>
   135d8:	2a19      	cmp	r2, #25
   135da:	ddf1      	ble.n	135c0 <__gethex+0x1ec>
   135dc:	e7a1      	b.n	13522 <__gethex+0x14e>
   135de:	4949      	ldr	r1, [pc, #292]	; (13704 <__gethex+0x330>)
   135e0:	9301      	str	r3, [sp, #4]
   135e2:	2201      	movs	r2, #1
   135e4:	4620      	mov	r0, r4
   135e6:	f7ff f94b 	bl	12880 <strncmp>
   135ea:	9b01      	ldr	r3, [sp, #4]
   135ec:	2800      	cmp	r0, #0
   135ee:	d16d      	bne.n	136cc <__gethex+0x2f8>
   135f0:	7861      	ldrb	r1, [r4, #1]
   135f2:	f818 2001 	ldrb.w	r2, [r8, r1]
   135f6:	1c65      	adds	r5, r4, #1
   135f8:	2a00      	cmp	r2, #0
   135fa:	d069      	beq.n	136d0 <__gethex+0x2fc>
   135fc:	2930      	cmp	r1, #48	; 0x30
   135fe:	462c      	mov	r4, r5
   13600:	d105      	bne.n	1360e <__gethex+0x23a>
   13602:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   13606:	2b30      	cmp	r3, #48	; 0x30
   13608:	d0fb      	beq.n	13602 <__gethex+0x22e>
   1360a:	f818 2003 	ldrb.w	r2, [r8, r3]
   1360e:	fab2 f782 	clz	r7, r2
   13612:	097f      	lsrs	r7, r7, #5
   13614:	2301      	movs	r3, #1
   13616:	e702      	b.n	1341e <__gethex+0x4a>
   13618:	2501      	movs	r5, #1
   1361a:	b157      	cbz	r7, 13632 <__gethex+0x25e>
   1361c:	f8da 300c 	ldr.w	r3, [sl, #12]
   13620:	2b02      	cmp	r3, #2
   13622:	d05d      	beq.n	136e0 <__gethex+0x30c>
   13624:	2b03      	cmp	r3, #3
   13626:	d05f      	beq.n	136e8 <__gethex+0x314>
   13628:	2b01      	cmp	r3, #1
   1362a:	f000 8084 	beq.w	13736 <__gethex+0x362>
   1362e:	f045 0510 	orr.w	r5, r5, #16
   13632:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13634:	f8c3 b000 	str.w	fp, [r3]
   13638:	9b02      	ldr	r3, [sp, #8]
   1363a:	4628      	mov	r0, r5
   1363c:	f8c3 9000 	str.w	r9, [r3]
   13640:	b005      	add	sp, #20
   13642:	ecbd 8b02 	vpop	{d8}
   13646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1364a:	462e      	mov	r6, r5
   1364c:	e702      	b.n	13454 <__gethex+0x80>
   1364e:	2001      	movs	r0, #1
   13650:	78aa      	ldrb	r2, [r5, #2]
   13652:	1cae      	adds	r6, r5, #2
   13654:	e758      	b.n	13508 <__gethex+0x134>
   13656:	1b06      	subs	r6, r0, r4
   13658:	4631      	mov	r1, r6
   1365a:	4658      	mov	r0, fp
   1365c:	f000 ff96 	bl	1458c <__any_on>
   13660:	4607      	mov	r7, r0
   13662:	b178      	cbz	r0, 13684 <__gethex+0x2b0>
   13664:	1e72      	subs	r2, r6, #1
   13666:	1153      	asrs	r3, r2, #5
   13668:	9901      	ldr	r1, [sp, #4]
   1366a:	2701      	movs	r7, #1
   1366c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   13670:	f002 031f 	and.w	r3, r2, #31
   13674:	fa07 f303 	lsl.w	r3, r7, r3
   13678:	420b      	tst	r3, r1
   1367a:	d003      	beq.n	13684 <__gethex+0x2b0>
   1367c:	42ba      	cmp	r2, r7
   1367e:	f300 80e2 	bgt.w	13846 <__gethex+0x472>
   13682:	2702      	movs	r7, #2
   13684:	4631      	mov	r1, r6
   13686:	4658      	mov	r0, fp
   13688:	44b1      	add	r9, r6
   1368a:	f7ff fe51 	bl	13330 <rshift>
   1368e:	e76f      	b.n	13570 <__gethex+0x19c>
   13690:	f109 35ff 	add.w	r5, r9, #4294967295
   13694:	2f00      	cmp	r7, #0
   13696:	f040 80ce 	bne.w	13836 <__gethex+0x462>
   1369a:	2d00      	cmp	r5, #0
   1369c:	f040 80cd 	bne.w	1383a <__gethex+0x466>
   136a0:	116b      	asrs	r3, r5, #5
   136a2:	9a01      	ldr	r2, [sp, #4]
   136a4:	f005 051f 	and.w	r5, r5, #31
   136a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   136ac:	2301      	movs	r3, #1
   136ae:	40ab      	lsls	r3, r5
   136b0:	4213      	tst	r3, r2
   136b2:	4649      	mov	r1, r9
   136b4:	4658      	mov	r0, fp
   136b6:	bf18      	it	ne
   136b8:	f047 0702 	orrne.w	r7, r7, #2
   136bc:	eba4 0409 	sub.w	r4, r4, r9
   136c0:	f7ff fe36 	bl	13330 <rshift>
   136c4:	2502      	movs	r5, #2
   136c6:	f8da 9004 	ldr.w	r9, [sl, #4]
   136ca:	e7a6      	b.n	1361a <__gethex+0x246>
   136cc:	7821      	ldrb	r1, [r4, #0]
   136ce:	4625      	mov	r5, r4
   136d0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   136d4:	2950      	cmp	r1, #80	; 0x50
   136d6:	f000 80bf 	beq.w	13858 <__gethex+0x484>
   136da:	f8cb 5000 	str.w	r5, [fp]
   136de:	e727      	b.n	13530 <__gethex+0x15c>
   136e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   136e2:	f1c3 0301 	rsb	r3, r3, #1
   136e6:	9311      	str	r3, [sp, #68]	; 0x44
   136e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   136ea:	2b00      	cmp	r3, #0
   136ec:	d09f      	beq.n	1362e <__gethex+0x25a>
   136ee:	f8db 7010 	ldr.w	r7, [fp, #16]
   136f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   136f6:	00ba      	lsls	r2, r7, #2
   136f8:	4643      	mov	r3, r8
   136fa:	9201      	str	r2, [sp, #4]
   136fc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   13700:	2100      	movs	r1, #0
   13702:	e007      	b.n	13714 <__gethex+0x340>
   13704:	200081dc 	.word	0x200081dc
   13708:	20000dd8 	.word	0x20000dd8
   1370c:	4298      	cmp	r0, r3
   1370e:	f843 1c04 	str.w	r1, [r3, #-4]
   13712:	d93f      	bls.n	13794 <__gethex+0x3c0>
   13714:	461e      	mov	r6, r3
   13716:	f853 2b04 	ldr.w	r2, [r3], #4
   1371a:	f1b2 3fff 	cmp.w	r2, #4294967295
   1371e:	d0f5      	beq.n	1370c <__gethex+0x338>
   13720:	3201      	adds	r2, #1
   13722:	2d02      	cmp	r5, #2
   13724:	6032      	str	r2, [r6, #0]
   13726:	f000 80bf 	beq.w	138a8 <__gethex+0x4d4>
   1372a:	f014 041f 	ands.w	r4, r4, #31
   1372e:	f040 80e7 	bne.w	13900 <__gethex+0x52c>
   13732:	2521      	movs	r5, #33	; 0x21
   13734:	e77d      	b.n	13632 <__gethex+0x25e>
   13736:	07ba      	lsls	r2, r7, #30
   13738:	f57f af79 	bpl.w	1362e <__gethex+0x25a>
   1373c:	9b01      	ldr	r3, [sp, #4]
   1373e:	681b      	ldr	r3, [r3, #0]
   13740:	431f      	orrs	r7, r3
   13742:	07fb      	lsls	r3, r7, #31
   13744:	d4d3      	bmi.n	136ee <__gethex+0x31a>
   13746:	e772      	b.n	1362e <__gethex+0x25a>
   13748:	2000      	movs	r0, #0
   1374a:	e781      	b.n	13650 <__gethex+0x27c>
   1374c:	1a22      	subs	r2, r4, r0
   1374e:	4659      	mov	r1, fp
   13750:	ee18 0a10 	vmov	r0, s16
   13754:	eba9 0902 	sub.w	r9, r9, r2
   13758:	f000 fc76 	bl	14048 <__lshift>
   1375c:	f100 0314 	add.w	r3, r0, #20
   13760:	4683      	mov	fp, r0
   13762:	9301      	str	r3, [sp, #4]
   13764:	2700      	movs	r7, #0
   13766:	e703      	b.n	13570 <__gethex+0x19c>
   13768:	7872      	ldrb	r2, [r6, #1]
   1376a:	f818 0002 	ldrb.w	r0, [r8, r2]
   1376e:	1c71      	adds	r1, r6, #1
   13770:	2800      	cmp	r0, #0
   13772:	f000 80a0 	beq.w	138b6 <__gethex+0x4e2>
   13776:	460d      	mov	r5, r1
   13778:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1377c:	f818 0002 	ldrb.w	r0, [r8, r2]
   13780:	2800      	cmp	r0, #0
   13782:	d1f8      	bne.n	13776 <__gethex+0x3a2>
   13784:	1b75      	subs	r5, r6, r5
   13786:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1378a:	460e      	mov	r6, r1
   1378c:	e65d      	b.n	1344a <__gethex+0x76>
   1378e:	3402      	adds	r4, #2
   13790:	2300      	movs	r3, #0
   13792:	e638      	b.n	13406 <__gethex+0x32>
   13794:	f8db 3008 	ldr.w	r3, [fp, #8]
   13798:	429f      	cmp	r7, r3
   1379a:	f280 808e 	bge.w	138ba <__gethex+0x4e6>
   1379e:	463b      	mov	r3, r7
   137a0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   137a4:	2101      	movs	r1, #1
   137a6:	3301      	adds	r3, #1
   137a8:	2d02      	cmp	r5, #2
   137aa:	f8cb 3010 	str.w	r3, [fp, #16]
   137ae:	6151      	str	r1, [r2, #20]
   137b0:	d07a      	beq.n	138a8 <__gethex+0x4d4>
   137b2:	429f      	cmp	r7, r3
   137b4:	dab9      	bge.n	1372a <__gethex+0x356>
   137b6:	2b00      	cmp	r3, #0
   137b8:	f340 809b 	ble.w	138f2 <__gethex+0x51e>
   137bc:	f8db 2014 	ldr.w	r2, [fp, #20]
   137c0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   137c4:	f10b 0018 	add.w	r0, fp, #24
   137c8:	4283      	cmp	r3, r0
   137ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
   137ce:	f240 80b1 	bls.w	13934 <__gethex+0x560>
   137d2:	4644      	mov	r4, r8
   137d4:	6801      	ldr	r1, [r0, #0]
   137d6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   137da:	f844 2b04 	str.w	r2, [r4], #4
   137de:	f850 2b04 	ldr.w	r2, [r0], #4
   137e2:	4283      	cmp	r3, r0
   137e4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   137e8:	d8f4      	bhi.n	137d4 <__gethex+0x400>
   137ea:	eba3 030b 	sub.w	r3, r3, fp
   137ee:	3b19      	subs	r3, #25
   137f0:	089b      	lsrs	r3, r3, #2
   137f2:	3301      	adds	r3, #1
   137f4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   137f8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   137fc:	2a00      	cmp	r2, #0
   137fe:	f040 809d 	bne.w	1393c <__gethex+0x568>
   13802:	eba3 0208 	sub.w	r2, r3, r8
   13806:	1092      	asrs	r2, r2, #2
   13808:	4543      	cmp	r3, r8
   1380a:	f8cb 2010 	str.w	r2, [fp, #16]
   1380e:	d073      	beq.n	138f8 <__gethex+0x524>
   13810:	f8da 3008 	ldr.w	r3, [sl, #8]
   13814:	f109 0901 	add.w	r9, r9, #1
   13818:	454b      	cmp	r3, r9
   1381a:	da8a      	bge.n	13732 <__gethex+0x35e>
   1381c:	ee18 0a10 	vmov	r0, s16
   13820:	4659      	mov	r1, fp
   13822:	f000 f9d1 	bl	13bc8 <_Bfree>
   13826:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13828:	2300      	movs	r3, #0
   1382a:	6013      	str	r3, [r2, #0]
   1382c:	25a3      	movs	r5, #163	; 0xa3
   1382e:	e683      	b.n	13538 <__gethex+0x164>
   13830:	9e01      	ldr	r6, [sp, #4]
   13832:	2300      	movs	r3, #0
   13834:	e689      	b.n	1354a <__gethex+0x176>
   13836:	2701      	movs	r7, #1
   13838:	e732      	b.n	136a0 <__gethex+0x2cc>
   1383a:	4629      	mov	r1, r5
   1383c:	4658      	mov	r0, fp
   1383e:	f000 fea5 	bl	1458c <__any_on>
   13842:	4607      	mov	r7, r0
   13844:	e72c      	b.n	136a0 <__gethex+0x2cc>
   13846:	1eb1      	subs	r1, r6, #2
   13848:	4658      	mov	r0, fp
   1384a:	f000 fe9f 	bl	1458c <__any_on>
   1384e:	2800      	cmp	r0, #0
   13850:	f43f af17 	beq.w	13682 <__gethex+0x2ae>
   13854:	2703      	movs	r7, #3
   13856:	e715      	b.n	13684 <__gethex+0x2b0>
   13858:	f04f 0900 	mov.w	r9, #0
   1385c:	2701      	movs	r7, #1
   1385e:	e64a      	b.n	134f6 <__gethex+0x122>
   13860:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13862:	2a00      	cmp	r2, #0
   13864:	f47f ae9d 	bne.w	135a2 <__gethex+0x1ce>
   13868:	9902      	ldr	r1, [sp, #8]
   1386a:	600b      	str	r3, [r1, #0]
   1386c:	9b01      	ldr	r3, [sp, #4]
   1386e:	2201      	movs	r2, #1
   13870:	f8cb 2010 	str.w	r2, [fp, #16]
   13874:	601a      	str	r2, [r3, #0]
   13876:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13878:	2562      	movs	r5, #98	; 0x62
   1387a:	f8c3 b000 	str.w	fp, [r3]
   1387e:	e65b      	b.n	13538 <__gethex+0x164>
   13880:	454c      	cmp	r4, r9
   13882:	f47f ae8e 	bne.w	135a2 <__gethex+0x1ce>
   13886:	2c01      	cmp	r4, #1
   13888:	d0ee      	beq.n	13868 <__gethex+0x494>
   1388a:	1e61      	subs	r1, r4, #1
   1388c:	4658      	mov	r0, fp
   1388e:	f000 fe7d 	bl	1458c <__any_on>
   13892:	2800      	cmp	r0, #0
   13894:	f43f ae85 	beq.w	135a2 <__gethex+0x1ce>
   13898:	f8da 3004 	ldr.w	r3, [sl, #4]
   1389c:	e7e4      	b.n	13868 <__gethex+0x494>
   1389e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   138a0:	2a00      	cmp	r2, #0
   138a2:	f43f ae7e 	beq.w	135a2 <__gethex+0x1ce>
   138a6:	e7df      	b.n	13868 <__gethex+0x494>
   138a8:	f8da 3000 	ldr.w	r3, [sl]
   138ac:	3b01      	subs	r3, #1
   138ae:	42a3      	cmp	r3, r4
   138b0:	d034      	beq.n	1391c <__gethex+0x548>
   138b2:	2522      	movs	r5, #34	; 0x22
   138b4:	e6bd      	b.n	13632 <__gethex+0x25e>
   138b6:	460e      	mov	r6, r1
   138b8:	e5c7      	b.n	1344a <__gethex+0x76>
   138ba:	f8db 1004 	ldr.w	r1, [fp, #4]
   138be:	ee18 0a10 	vmov	r0, s16
   138c2:	3101      	adds	r1, #1
   138c4:	f000 f95a 	bl	13b7c <_Balloc>
   138c8:	4606      	mov	r6, r0
   138ca:	b3c8      	cbz	r0, 13940 <__gethex+0x56c>
   138cc:	f8db 3010 	ldr.w	r3, [fp, #16]
   138d0:	3302      	adds	r3, #2
   138d2:	009a      	lsls	r2, r3, #2
   138d4:	f10b 010c 	add.w	r1, fp, #12
   138d8:	300c      	adds	r0, #12
   138da:	f7fa fe9b 	bl	e614 <memcpy>
   138de:	4659      	mov	r1, fp
   138e0:	ee18 0a10 	vmov	r0, s16
   138e4:	f000 f970 	bl	13bc8 <_Bfree>
   138e8:	f106 0814 	add.w	r8, r6, #20
   138ec:	6933      	ldr	r3, [r6, #16]
   138ee:	46b3      	mov	fp, r6
   138f0:	e756      	b.n	137a0 <__gethex+0x3cc>
   138f2:	2300      	movs	r3, #0
   138f4:	f8cb 3010 	str.w	r3, [fp, #16]
   138f8:	2300      	movs	r3, #0
   138fa:	f8cb 3014 	str.w	r3, [fp, #20]
   138fe:	e787      	b.n	13810 <__gethex+0x43c>
   13900:	9b01      	ldr	r3, [sp, #4]
   13902:	4443      	add	r3, r8
   13904:	f1c4 0420 	rsb	r4, r4, #32
   13908:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1390c:	f000 fa10 	bl	13d30 <__hi0bits>
   13910:	42a0      	cmp	r0, r4
   13912:	f6bf af0e 	bge.w	13732 <__gethex+0x35e>
   13916:	f8db 3010 	ldr.w	r3, [fp, #16]
   1391a:	e74c      	b.n	137b6 <__gethex+0x3e2>
   1391c:	1163      	asrs	r3, r4, #5
   1391e:	f004 041f 	and.w	r4, r4, #31
   13922:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   13926:	2301      	movs	r3, #1
   13928:	40a3      	lsls	r3, r4
   1392a:	4213      	tst	r3, r2
   1392c:	bf0c      	ite	eq
   1392e:	2522      	moveq	r5, #34	; 0x22
   13930:	2521      	movne	r5, #33	; 0x21
   13932:	e67e      	b.n	13632 <__gethex+0x25e>
   13934:	f8c8 2000 	str.w	r2, [r8]
   13938:	4643      	mov	r3, r8
   1393a:	b16a      	cbz	r2, 13958 <__gethex+0x584>
   1393c:	3304      	adds	r3, #4
   1393e:	e760      	b.n	13802 <__gethex+0x42e>
   13940:	4b07      	ldr	r3, [pc, #28]	; (13960 <__gethex+0x58c>)
   13942:	4808      	ldr	r0, [pc, #32]	; (13964 <__gethex+0x590>)
   13944:	4632      	mov	r2, r6
   13946:	2184      	movs	r1, #132	; 0x84
   13948:	f004 fa5a 	bl	17e00 <__assert_func>
   1394c:	4b04      	ldr	r3, [pc, #16]	; (13960 <__gethex+0x58c>)
   1394e:	4805      	ldr	r0, [pc, #20]	; (13964 <__gethex+0x590>)
   13950:	465a      	mov	r2, fp
   13952:	21e4      	movs	r1, #228	; 0xe4
   13954:	f004 fa54 	bl	17e00 <__assert_func>
   13958:	f8cb 2010 	str.w	r2, [fp, #16]
   1395c:	e7cc      	b.n	138f8 <__gethex+0x524>
   1395e:	bf00      	nop
   13960:	20000d60 	.word	0x20000d60
   13964:	20000d74 	.word	0x20000d74

00013968 <__match>:
   13968:	b410      	push	{r4}
   1396a:	6804      	ldr	r4, [r0, #0]
   1396c:	e009      	b.n	13982 <__match+0x1a>
   1396e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   13972:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   13976:	f1bc 0f19 	cmp.w	ip, #25
   1397a:	bf98      	it	ls
   1397c:	3320      	addls	r3, #32
   1397e:	4293      	cmp	r3, r2
   13980:	d109      	bne.n	13996 <__match+0x2e>
   13982:	f811 2b01 	ldrb.w	r2, [r1], #1
   13986:	2a00      	cmp	r2, #0
   13988:	d1f1      	bne.n	1396e <__match+0x6>
   1398a:	3401      	adds	r4, #1
   1398c:	6004      	str	r4, [r0, #0]
   1398e:	2001      	movs	r0, #1
   13990:	f85d 4b04 	ldr.w	r4, [sp], #4
   13994:	4770      	bx	lr
   13996:	2000      	movs	r0, #0
   13998:	f85d 4b04 	ldr.w	r4, [sp], #4
   1399c:	4770      	bx	lr
   1399e:	bf00      	nop

000139a0 <__hexnan>:
   139a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139a4:	6809      	ldr	r1, [r1, #0]
   139a6:	b085      	sub	sp, #20
   139a8:	114b      	asrs	r3, r1, #5
   139aa:	f011 011f 	ands.w	r1, r1, #31
   139ae:	9002      	str	r0, [sp, #8]
   139b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   139b4:	9103      	str	r1, [sp, #12]
   139b6:	f040 808f 	bne.w	13ad8 <__hexnan+0x138>
   139ba:	1f1d      	subs	r5, r3, #4
   139bc:	9301      	str	r3, [sp, #4]
   139be:	9b02      	ldr	r3, [sp, #8]
   139c0:	9901      	ldr	r1, [sp, #4]
   139c2:	681c      	ldr	r4, [r3, #0]
   139c4:	2300      	movs	r3, #0
   139c6:	f841 3c04 	str.w	r3, [r1, #-4]
   139ca:	7861      	ldrb	r1, [r4, #1]
   139cc:	3401      	adds	r4, #1
   139ce:	2900      	cmp	r1, #0
   139d0:	f000 8098 	beq.w	13b04 <__hexnan+0x164>
   139d4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 13b4c <__hexnan+0x1ac>
   139d8:	46a8      	mov	r8, r5
   139da:	46ac      	mov	ip, r5
   139dc:	469a      	mov	sl, r3
   139de:	461e      	mov	r6, r3
   139e0:	e00e      	b.n	13a00 <__hexnan+0x60>
   139e2:	2920      	cmp	r1, #32
   139e4:	f200 808c 	bhi.w	13b00 <__hexnan+0x160>
   139e8:	4556      	cmp	r6, sl
   139ea:	dd06      	ble.n	139fa <__hexnan+0x5a>
   139ec:	45c4      	cmp	ip, r8
   139ee:	d201      	bcs.n	139f4 <__hexnan+0x54>
   139f0:	2b07      	cmp	r3, #7
   139f2:	dd5b      	ble.n	13aac <__hexnan+0x10c>
   139f4:	4562      	cmp	r2, ip
   139f6:	d351      	bcc.n	13a9c <__hexnan+0xfc>
   139f8:	2308      	movs	r3, #8
   139fa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   139fe:	b1a1      	cbz	r1, 13a2a <__hexnan+0x8a>
   13a00:	f819 0001 	ldrb.w	r0, [r9, r1]
   13a04:	2800      	cmp	r0, #0
   13a06:	d0ec      	beq.n	139e2 <__hexnan+0x42>
   13a08:	3301      	adds	r3, #1
   13a0a:	2b08      	cmp	r3, #8
   13a0c:	f106 0601 	add.w	r6, r6, #1
   13a10:	dc3a      	bgt.n	13a88 <__hexnan+0xe8>
   13a12:	f8dc 1000 	ldr.w	r1, [ip]
   13a16:	0109      	lsls	r1, r1, #4
   13a18:	f000 000f 	and.w	r0, r0, #15
   13a1c:	4308      	orrs	r0, r1
   13a1e:	f8cc 0000 	str.w	r0, [ip]
   13a22:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   13a26:	2900      	cmp	r1, #0
   13a28:	d1ea      	bne.n	13a00 <__hexnan+0x60>
   13a2a:	2e00      	cmp	r6, #0
   13a2c:	d06a      	beq.n	13b04 <__hexnan+0x164>
   13a2e:	45c4      	cmp	ip, r8
   13a30:	d201      	bcs.n	13a36 <__hexnan+0x96>
   13a32:	2b07      	cmp	r3, #7
   13a34:	dd74      	ble.n	13b20 <__hexnan+0x180>
   13a36:	4562      	cmp	r2, ip
   13a38:	d252      	bcs.n	13ae0 <__hexnan+0x140>
   13a3a:	1f11      	subs	r1, r2, #4
   13a3c:	4663      	mov	r3, ip
   13a3e:	f853 0b04 	ldr.w	r0, [r3], #4
   13a42:	f841 0f04 	str.w	r0, [r1, #4]!
   13a46:	42ab      	cmp	r3, r5
   13a48:	d9f9      	bls.n	13a3e <__hexnan+0x9e>
   13a4a:	eba5 030c 	sub.w	r3, r5, ip
   13a4e:	f023 0303 	bic.w	r3, r3, #3
   13a52:	1c69      	adds	r1, r5, #1
   13a54:	3304      	adds	r3, #4
   13a56:	f10c 0c01 	add.w	ip, ip, #1
   13a5a:	4561      	cmp	r1, ip
   13a5c:	bf38      	it	cc
   13a5e:	2304      	movcc	r3, #4
   13a60:	4413      	add	r3, r2
   13a62:	2100      	movs	r1, #0
   13a64:	f843 1b04 	str.w	r1, [r3], #4
   13a68:	42ab      	cmp	r3, r5
   13a6a:	d9fb      	bls.n	13a64 <__hexnan+0xc4>
   13a6c:	9b01      	ldr	r3, [sp, #4]
   13a6e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   13a72:	b92b      	cbnz	r3, 13a80 <__hexnan+0xe0>
   13a74:	42aa      	cmp	r2, r5
   13a76:	d049      	beq.n	13b0c <__hexnan+0x16c>
   13a78:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   13a7c:	2b00      	cmp	r3, #0
   13a7e:	d0f9      	beq.n	13a74 <__hexnan+0xd4>
   13a80:	2005      	movs	r0, #5
   13a82:	b005      	add	sp, #20
   13a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a88:	4562      	cmp	r2, ip
   13a8a:	d2b6      	bcs.n	139fa <__hexnan+0x5a>
   13a8c:	2300      	movs	r3, #0
   13a8e:	f84c 3c04 	str.w	r3, [ip, #-4]
   13a92:	4619      	mov	r1, r3
   13a94:	f1ac 0c04 	sub.w	ip, ip, #4
   13a98:	2301      	movs	r3, #1
   13a9a:	e7bd      	b.n	13a18 <__hexnan+0x78>
   13a9c:	2300      	movs	r3, #0
   13a9e:	f1ac 0804 	sub.w	r8, ip, #4
   13aa2:	f84c 3c04 	str.w	r3, [ip, #-4]
   13aa6:	46b2      	mov	sl, r6
   13aa8:	46c4      	mov	ip, r8
   13aaa:	e7a6      	b.n	139fa <__hexnan+0x5a>
   13aac:	f1c3 0108 	rsb	r1, r3, #8
   13ab0:	f8dc 3000 	ldr.w	r3, [ip]
   13ab4:	0089      	lsls	r1, r1, #2
   13ab6:	f1c1 0e20 	rsb	lr, r1, #32
   13aba:	4660      	mov	r0, ip
   13abc:	469b      	mov	fp, r3
   13abe:	6847      	ldr	r7, [r0, #4]
   13ac0:	fa07 f30e 	lsl.w	r3, r7, lr
   13ac4:	ea43 030b 	orr.w	r3, r3, fp
   13ac8:	fa27 fb01 	lsr.w	fp, r7, r1
   13acc:	6003      	str	r3, [r0, #0]
   13ace:	f840 bf04 	str.w	fp, [r0, #4]!
   13ad2:	4540      	cmp	r0, r8
   13ad4:	d3f3      	bcc.n	13abe <__hexnan+0x11e>
   13ad6:	e78d      	b.n	139f4 <__hexnan+0x54>
   13ad8:	1d19      	adds	r1, r3, #4
   13ada:	9101      	str	r1, [sp, #4]
   13adc:	461d      	mov	r5, r3
   13ade:	e76e      	b.n	139be <__hexnan+0x1e>
   13ae0:	9b03      	ldr	r3, [sp, #12]
   13ae2:	2b00      	cmp	r3, #0
   13ae4:	d0c2      	beq.n	13a6c <__hexnan+0xcc>
   13ae6:	9b03      	ldr	r3, [sp, #12]
   13ae8:	9801      	ldr	r0, [sp, #4]
   13aea:	f1c3 0120 	rsb	r1, r3, #32
   13aee:	f04f 33ff 	mov.w	r3, #4294967295
   13af2:	40cb      	lsrs	r3, r1
   13af4:	f850 1c04 	ldr.w	r1, [r0, #-4]
   13af8:	400b      	ands	r3, r1
   13afa:	f840 3c04 	str.w	r3, [r0, #-4]
   13afe:	e7b8      	b.n	13a72 <__hexnan+0xd2>
   13b00:	2929      	cmp	r1, #41	; 0x29
   13b02:	d009      	beq.n	13b18 <__hexnan+0x178>
   13b04:	2004      	movs	r0, #4
   13b06:	b005      	add	sp, #20
   13b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b0c:	2301      	movs	r3, #1
   13b0e:	2005      	movs	r0, #5
   13b10:	602b      	str	r3, [r5, #0]
   13b12:	b005      	add	sp, #20
   13b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b18:	9902      	ldr	r1, [sp, #8]
   13b1a:	3401      	adds	r4, #1
   13b1c:	600c      	str	r4, [r1, #0]
   13b1e:	e784      	b.n	13a2a <__hexnan+0x8a>
   13b20:	f8dc 1000 	ldr.w	r1, [ip]
   13b24:	f1c3 0308 	rsb	r3, r3, #8
   13b28:	009b      	lsls	r3, r3, #2
   13b2a:	f1c3 0720 	rsb	r7, r3, #32
   13b2e:	4664      	mov	r4, ip
   13b30:	4608      	mov	r0, r1
   13b32:	6866      	ldr	r6, [r4, #4]
   13b34:	fa06 f107 	lsl.w	r1, r6, r7
   13b38:	4301      	orrs	r1, r0
   13b3a:	fa26 f003 	lsr.w	r0, r6, r3
   13b3e:	6021      	str	r1, [r4, #0]
   13b40:	f844 0f04 	str.w	r0, [r4, #4]!
   13b44:	4544      	cmp	r4, r8
   13b46:	d3f4      	bcc.n	13b32 <__hexnan+0x192>
   13b48:	e775      	b.n	13a36 <__hexnan+0x96>
   13b4a:	bf00      	nop
   13b4c:	20000dd8 	.word	0x20000dd8

00013b50 <__ascii_mbtowc>:
   13b50:	b082      	sub	sp, #8
   13b52:	b149      	cbz	r1, 13b68 <__ascii_mbtowc+0x18>
   13b54:	b15a      	cbz	r2, 13b6e <__ascii_mbtowc+0x1e>
   13b56:	b16b      	cbz	r3, 13b74 <__ascii_mbtowc+0x24>
   13b58:	7813      	ldrb	r3, [r2, #0]
   13b5a:	600b      	str	r3, [r1, #0]
   13b5c:	7812      	ldrb	r2, [r2, #0]
   13b5e:	1e10      	subs	r0, r2, #0
   13b60:	bf18      	it	ne
   13b62:	2001      	movne	r0, #1
   13b64:	b002      	add	sp, #8
   13b66:	4770      	bx	lr
   13b68:	a901      	add	r1, sp, #4
   13b6a:	2a00      	cmp	r2, #0
   13b6c:	d1f3      	bne.n	13b56 <__ascii_mbtowc+0x6>
   13b6e:	4610      	mov	r0, r2
   13b70:	b002      	add	sp, #8
   13b72:	4770      	bx	lr
   13b74:	f06f 0001 	mvn.w	r0, #1
   13b78:	e7f4      	b.n	13b64 <__ascii_mbtowc+0x14>
   13b7a:	bf00      	nop

00013b7c <_Balloc>:
   13b7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   13b7e:	b570      	push	{r4, r5, r6, lr}
   13b80:	4605      	mov	r5, r0
   13b82:	460c      	mov	r4, r1
   13b84:	b14b      	cbz	r3, 13b9a <_Balloc+0x1e>
   13b86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   13b8a:	b180      	cbz	r0, 13bae <_Balloc+0x32>
   13b8c:	6802      	ldr	r2, [r0, #0]
   13b8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   13b92:	2300      	movs	r3, #0
   13b94:	e9c0 3303 	strd	r3, r3, [r0, #12]
   13b98:	bd70      	pop	{r4, r5, r6, pc}
   13b9a:	2221      	movs	r2, #33	; 0x21
   13b9c:	2104      	movs	r1, #4
   13b9e:	f004 f94f 	bl	17e40 <_calloc_r>
   13ba2:	4603      	mov	r3, r0
   13ba4:	6468      	str	r0, [r5, #68]	; 0x44
   13ba6:	2800      	cmp	r0, #0
   13ba8:	d1ed      	bne.n	13b86 <_Balloc+0xa>
   13baa:	2000      	movs	r0, #0
   13bac:	bd70      	pop	{r4, r5, r6, pc}
   13bae:	2101      	movs	r1, #1
   13bb0:	fa01 f604 	lsl.w	r6, r1, r4
   13bb4:	1d72      	adds	r2, r6, #5
   13bb6:	0092      	lsls	r2, r2, #2
   13bb8:	4628      	mov	r0, r5
   13bba:	f004 f941 	bl	17e40 <_calloc_r>
   13bbe:	2800      	cmp	r0, #0
   13bc0:	d0f3      	beq.n	13baa <_Balloc+0x2e>
   13bc2:	e9c0 4601 	strd	r4, r6, [r0, #4]
   13bc6:	e7e4      	b.n	13b92 <_Balloc+0x16>

00013bc8 <_Bfree>:
   13bc8:	b131      	cbz	r1, 13bd8 <_Bfree+0x10>
   13bca:	6c43      	ldr	r3, [r0, #68]	; 0x44
   13bcc:	684a      	ldr	r2, [r1, #4]
   13bce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13bd2:	6008      	str	r0, [r1, #0]
   13bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   13bd8:	4770      	bx	lr
   13bda:	bf00      	nop

00013bdc <__multadd>:
   13bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13be0:	690e      	ldr	r6, [r1, #16]
   13be2:	4680      	mov	r8, r0
   13be4:	460f      	mov	r7, r1
   13be6:	461d      	mov	r5, r3
   13be8:	f101 0e14 	add.w	lr, r1, #20
   13bec:	2000      	movs	r0, #0
   13bee:	f8de 1000 	ldr.w	r1, [lr]
   13bf2:	b28c      	uxth	r4, r1
   13bf4:	fb02 5304 	mla	r3, r2, r4, r5
   13bf8:	0c09      	lsrs	r1, r1, #16
   13bfa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   13bfe:	fb02 cc01 	mla	ip, r2, r1, ip
   13c02:	3001      	adds	r0, #1
   13c04:	b29c      	uxth	r4, r3
   13c06:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   13c0a:	4286      	cmp	r6, r0
   13c0c:	f84e 4b04 	str.w	r4, [lr], #4
   13c10:	ea4f 451c 	mov.w	r5, ip, lsr #16
   13c14:	dceb      	bgt.n	13bee <__multadd+0x12>
   13c16:	b13d      	cbz	r5, 13c28 <__multadd+0x4c>
   13c18:	68bb      	ldr	r3, [r7, #8]
   13c1a:	42b3      	cmp	r3, r6
   13c1c:	dd07      	ble.n	13c2e <__multadd+0x52>
   13c1e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   13c22:	3601      	adds	r6, #1
   13c24:	615d      	str	r5, [r3, #20]
   13c26:	613e      	str	r6, [r7, #16]
   13c28:	4638      	mov	r0, r7
   13c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c2e:	6879      	ldr	r1, [r7, #4]
   13c30:	4640      	mov	r0, r8
   13c32:	3101      	adds	r1, #1
   13c34:	f7ff ffa2 	bl	13b7c <_Balloc>
   13c38:	4604      	mov	r4, r0
   13c3a:	b1b0      	cbz	r0, 13c6a <__multadd+0x8e>
   13c3c:	693a      	ldr	r2, [r7, #16]
   13c3e:	3202      	adds	r2, #2
   13c40:	f107 010c 	add.w	r1, r7, #12
   13c44:	0092      	lsls	r2, r2, #2
   13c46:	300c      	adds	r0, #12
   13c48:	f7fa fce4 	bl	e614 <memcpy>
   13c4c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   13c50:	687a      	ldr	r2, [r7, #4]
   13c52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   13c56:	6039      	str	r1, [r7, #0]
   13c58:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   13c5c:	4627      	mov	r7, r4
   13c5e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   13c62:	3601      	adds	r6, #1
   13c64:	615d      	str	r5, [r3, #20]
   13c66:	613e      	str	r6, [r7, #16]
   13c68:	e7de      	b.n	13c28 <__multadd+0x4c>
   13c6a:	4b03      	ldr	r3, [pc, #12]	; (13c78 <__multadd+0x9c>)
   13c6c:	4803      	ldr	r0, [pc, #12]	; (13c7c <__multadd+0xa0>)
   13c6e:	4622      	mov	r2, r4
   13c70:	21ba      	movs	r1, #186	; 0xba
   13c72:	f004 f8c5 	bl	17e00 <__assert_func>
   13c76:	bf00      	nop
   13c78:	20000d60 	.word	0x20000d60
   13c7c:	20000ed8 	.word	0x20000ed8

00013c80 <__s2b>:
   13c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13c84:	4617      	mov	r7, r2
   13c86:	4a27      	ldr	r2, [pc, #156]	; (13d24 <__s2b+0xa4>)
   13c88:	461e      	mov	r6, r3
   13c8a:	3308      	adds	r3, #8
   13c8c:	460c      	mov	r4, r1
   13c8e:	2e09      	cmp	r6, #9
   13c90:	fb82 1203 	smull	r1, r2, r2, r3
   13c94:	ea4f 73e3 	mov.w	r3, r3, asr #31
   13c98:	4605      	mov	r5, r0
   13c9a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   13c9e:	dd39      	ble.n	13d14 <__s2b+0x94>
   13ca0:	f04f 0c01 	mov.w	ip, #1
   13ca4:	2100      	movs	r1, #0
   13ca6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   13caa:	4563      	cmp	r3, ip
   13cac:	f101 0101 	add.w	r1, r1, #1
   13cb0:	dcf9      	bgt.n	13ca6 <__s2b+0x26>
   13cb2:	4628      	mov	r0, r5
   13cb4:	f7ff ff62 	bl	13b7c <_Balloc>
   13cb8:	4601      	mov	r1, r0
   13cba:	b368      	cbz	r0, 13d18 <__s2b+0x98>
   13cbc:	9b08      	ldr	r3, [sp, #32]
   13cbe:	6143      	str	r3, [r0, #20]
   13cc0:	2f09      	cmp	r7, #9
   13cc2:	f04f 0301 	mov.w	r3, #1
   13cc6:	6103      	str	r3, [r0, #16]
   13cc8:	dc12      	bgt.n	13cf0 <__s2b+0x70>
   13cca:	340a      	adds	r4, #10
   13ccc:	2709      	movs	r7, #9
   13cce:	42be      	cmp	r6, r7
   13cd0:	dd0b      	ble.n	13cea <__s2b+0x6a>
   13cd2:	1bf2      	subs	r2, r6, r7
   13cd4:	18a6      	adds	r6, r4, r2
   13cd6:	f814 3b01 	ldrb.w	r3, [r4], #1
   13cda:	220a      	movs	r2, #10
   13cdc:	3b30      	subs	r3, #48	; 0x30
   13cde:	4628      	mov	r0, r5
   13ce0:	f7ff ff7c 	bl	13bdc <__multadd>
   13ce4:	42a6      	cmp	r6, r4
   13ce6:	4601      	mov	r1, r0
   13ce8:	d1f5      	bne.n	13cd6 <__s2b+0x56>
   13cea:	4608      	mov	r0, r1
   13cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13cf0:	f104 0909 	add.w	r9, r4, #9
   13cf4:	46c8      	mov	r8, r9
   13cf6:	443c      	add	r4, r7
   13cf8:	f818 3b01 	ldrb.w	r3, [r8], #1
   13cfc:	220a      	movs	r2, #10
   13cfe:	3b30      	subs	r3, #48	; 0x30
   13d00:	4628      	mov	r0, r5
   13d02:	f7ff ff6b 	bl	13bdc <__multadd>
   13d06:	45a0      	cmp	r8, r4
   13d08:	4601      	mov	r1, r0
   13d0a:	d1f5      	bne.n	13cf8 <__s2b+0x78>
   13d0c:	f1a7 0408 	sub.w	r4, r7, #8
   13d10:	444c      	add	r4, r9
   13d12:	e7dc      	b.n	13cce <__s2b+0x4e>
   13d14:	2100      	movs	r1, #0
   13d16:	e7cc      	b.n	13cb2 <__s2b+0x32>
   13d18:	460a      	mov	r2, r1
   13d1a:	4b03      	ldr	r3, [pc, #12]	; (13d28 <__s2b+0xa8>)
   13d1c:	4803      	ldr	r0, [pc, #12]	; (13d2c <__s2b+0xac>)
   13d1e:	21d3      	movs	r1, #211	; 0xd3
   13d20:	f004 f86e 	bl	17e00 <__assert_func>
   13d24:	38e38e39 	.word	0x38e38e39
   13d28:	20000d60 	.word	0x20000d60
   13d2c:	20000ed8 	.word	0x20000ed8

00013d30 <__hi0bits>:
   13d30:	0c03      	lsrs	r3, r0, #16
   13d32:	041b      	lsls	r3, r3, #16
   13d34:	b9d3      	cbnz	r3, 13d6c <__hi0bits+0x3c>
   13d36:	0400      	lsls	r0, r0, #16
   13d38:	2310      	movs	r3, #16
   13d3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   13d3e:	bf04      	itt	eq
   13d40:	0200      	lsleq	r0, r0, #8
   13d42:	3308      	addeq	r3, #8
   13d44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   13d48:	bf04      	itt	eq
   13d4a:	0100      	lsleq	r0, r0, #4
   13d4c:	3304      	addeq	r3, #4
   13d4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   13d52:	bf04      	itt	eq
   13d54:	0080      	lsleq	r0, r0, #2
   13d56:	3302      	addeq	r3, #2
   13d58:	2800      	cmp	r0, #0
   13d5a:	db05      	blt.n	13d68 <__hi0bits+0x38>
   13d5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   13d60:	f103 0301 	add.w	r3, r3, #1
   13d64:	bf08      	it	eq
   13d66:	2320      	moveq	r3, #32
   13d68:	4618      	mov	r0, r3
   13d6a:	4770      	bx	lr
   13d6c:	2300      	movs	r3, #0
   13d6e:	e7e4      	b.n	13d3a <__hi0bits+0xa>

00013d70 <__lo0bits>:
   13d70:	6803      	ldr	r3, [r0, #0]
   13d72:	f013 0207 	ands.w	r2, r3, #7
   13d76:	d008      	beq.n	13d8a <__lo0bits+0x1a>
   13d78:	07d9      	lsls	r1, r3, #31
   13d7a:	d41f      	bmi.n	13dbc <__lo0bits+0x4c>
   13d7c:	079a      	lsls	r2, r3, #30
   13d7e:	d522      	bpl.n	13dc6 <__lo0bits+0x56>
   13d80:	085b      	lsrs	r3, r3, #1
   13d82:	6003      	str	r3, [r0, #0]
   13d84:	2201      	movs	r2, #1
   13d86:	4610      	mov	r0, r2
   13d88:	4770      	bx	lr
   13d8a:	b299      	uxth	r1, r3
   13d8c:	b909      	cbnz	r1, 13d92 <__lo0bits+0x22>
   13d8e:	0c1b      	lsrs	r3, r3, #16
   13d90:	2210      	movs	r2, #16
   13d92:	b2d9      	uxtb	r1, r3
   13d94:	b909      	cbnz	r1, 13d9a <__lo0bits+0x2a>
   13d96:	3208      	adds	r2, #8
   13d98:	0a1b      	lsrs	r3, r3, #8
   13d9a:	0719      	lsls	r1, r3, #28
   13d9c:	bf04      	itt	eq
   13d9e:	091b      	lsreq	r3, r3, #4
   13da0:	3204      	addeq	r2, #4
   13da2:	0799      	lsls	r1, r3, #30
   13da4:	bf04      	itt	eq
   13da6:	089b      	lsreq	r3, r3, #2
   13da8:	3202      	addeq	r2, #2
   13daa:	07d9      	lsls	r1, r3, #31
   13dac:	d403      	bmi.n	13db6 <__lo0bits+0x46>
   13dae:	085b      	lsrs	r3, r3, #1
   13db0:	f102 0201 	add.w	r2, r2, #1
   13db4:	d005      	beq.n	13dc2 <__lo0bits+0x52>
   13db6:	6003      	str	r3, [r0, #0]
   13db8:	4610      	mov	r0, r2
   13dba:	4770      	bx	lr
   13dbc:	2200      	movs	r2, #0
   13dbe:	4610      	mov	r0, r2
   13dc0:	4770      	bx	lr
   13dc2:	2220      	movs	r2, #32
   13dc4:	e7df      	b.n	13d86 <__lo0bits+0x16>
   13dc6:	089b      	lsrs	r3, r3, #2
   13dc8:	2202      	movs	r2, #2
   13dca:	6003      	str	r3, [r0, #0]
   13dcc:	4610      	mov	r0, r2
   13dce:	4770      	bx	lr

00013dd0 <__i2b>:
   13dd0:	b538      	push	{r3, r4, r5, lr}
   13dd2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   13dd4:	4604      	mov	r4, r0
   13dd6:	460d      	mov	r5, r1
   13dd8:	b14b      	cbz	r3, 13dee <__i2b+0x1e>
   13dda:	6858      	ldr	r0, [r3, #4]
   13ddc:	b1b0      	cbz	r0, 13e0c <__i2b+0x3c>
   13dde:	6802      	ldr	r2, [r0, #0]
   13de0:	605a      	str	r2, [r3, #4]
   13de2:	2200      	movs	r2, #0
   13de4:	2301      	movs	r3, #1
   13de6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   13dea:	60c2      	str	r2, [r0, #12]
   13dec:	bd38      	pop	{r3, r4, r5, pc}
   13dee:	2221      	movs	r2, #33	; 0x21
   13df0:	2104      	movs	r1, #4
   13df2:	f004 f825 	bl	17e40 <_calloc_r>
   13df6:	4603      	mov	r3, r0
   13df8:	6460      	str	r0, [r4, #68]	; 0x44
   13dfa:	2800      	cmp	r0, #0
   13dfc:	d1ed      	bne.n	13dda <__i2b+0xa>
   13dfe:	4b09      	ldr	r3, [pc, #36]	; (13e24 <__i2b+0x54>)
   13e00:	4809      	ldr	r0, [pc, #36]	; (13e28 <__i2b+0x58>)
   13e02:	2200      	movs	r2, #0
   13e04:	f240 1145 	movw	r1, #325	; 0x145
   13e08:	f003 fffa 	bl	17e00 <__assert_func>
   13e0c:	221c      	movs	r2, #28
   13e0e:	2101      	movs	r1, #1
   13e10:	4620      	mov	r0, r4
   13e12:	f004 f815 	bl	17e40 <_calloc_r>
   13e16:	2800      	cmp	r0, #0
   13e18:	d0f1      	beq.n	13dfe <__i2b+0x2e>
   13e1a:	2201      	movs	r2, #1
   13e1c:	2302      	movs	r3, #2
   13e1e:	e9c0 2301 	strd	r2, r3, [r0, #4]
   13e22:	e7de      	b.n	13de2 <__i2b+0x12>
   13e24:	20000d60 	.word	0x20000d60
   13e28:	20000ed8 	.word	0x20000ed8

00013e2c <__multiply>:
   13e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e30:	690e      	ldr	r6, [r1, #16]
   13e32:	6915      	ldr	r5, [r2, #16]
   13e34:	42ae      	cmp	r6, r5
   13e36:	b085      	sub	sp, #20
   13e38:	4688      	mov	r8, r1
   13e3a:	4614      	mov	r4, r2
   13e3c:	db05      	blt.n	13e4a <__multiply+0x1e>
   13e3e:	462a      	mov	r2, r5
   13e40:	4623      	mov	r3, r4
   13e42:	4635      	mov	r5, r6
   13e44:	460c      	mov	r4, r1
   13e46:	4616      	mov	r6, r2
   13e48:	4698      	mov	r8, r3
   13e4a:	68a3      	ldr	r3, [r4, #8]
   13e4c:	6861      	ldr	r1, [r4, #4]
   13e4e:	19af      	adds	r7, r5, r6
   13e50:	42bb      	cmp	r3, r7
   13e52:	bfb8      	it	lt
   13e54:	3101      	addlt	r1, #1
   13e56:	f7ff fe91 	bl	13b7c <_Balloc>
   13e5a:	9001      	str	r0, [sp, #4]
   13e5c:	2800      	cmp	r0, #0
   13e5e:	f000 8087 	beq.w	13f70 <__multiply+0x144>
   13e62:	9b01      	ldr	r3, [sp, #4]
   13e64:	f103 0914 	add.w	r9, r3, #20
   13e68:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   13e6c:	45d1      	cmp	r9, sl
   13e6e:	d205      	bcs.n	13e7c <__multiply+0x50>
   13e70:	464b      	mov	r3, r9
   13e72:	2200      	movs	r2, #0
   13e74:	f843 2b04 	str.w	r2, [r3], #4
   13e78:	459a      	cmp	sl, r3
   13e7a:	d8fb      	bhi.n	13e74 <__multiply+0x48>
   13e7c:	f108 0814 	add.w	r8, r8, #20
   13e80:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   13e84:	f104 0314 	add.w	r3, r4, #20
   13e88:	45d8      	cmp	r8, fp
   13e8a:	461a      	mov	r2, r3
   13e8c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   13e90:	d25f      	bcs.n	13f52 <__multiply+0x126>
   13e92:	1b2b      	subs	r3, r5, r4
   13e94:	3b15      	subs	r3, #21
   13e96:	f023 0303 	bic.w	r3, r3, #3
   13e9a:	3304      	adds	r3, #4
   13e9c:	3415      	adds	r4, #21
   13e9e:	42a5      	cmp	r5, r4
   13ea0:	bf38      	it	cc
   13ea2:	2304      	movcc	r3, #4
   13ea4:	e9cd a702 	strd	sl, r7, [sp, #8]
   13ea8:	46ac      	mov	ip, r5
   13eaa:	461f      	mov	r7, r3
   13eac:	4692      	mov	sl, r2
   13eae:	e005      	b.n	13ebc <__multiply+0x90>
   13eb0:	0c09      	lsrs	r1, r1, #16
   13eb2:	d129      	bne.n	13f08 <__multiply+0xdc>
   13eb4:	45c3      	cmp	fp, r8
   13eb6:	f109 0904 	add.w	r9, r9, #4
   13eba:	d948      	bls.n	13f4e <__multiply+0x122>
   13ebc:	f858 1b04 	ldr.w	r1, [r8], #4
   13ec0:	b28d      	uxth	r5, r1
   13ec2:	2d00      	cmp	r5, #0
   13ec4:	d0f4      	beq.n	13eb0 <__multiply+0x84>
   13ec6:	4656      	mov	r6, sl
   13ec8:	464c      	mov	r4, r9
   13eca:	2300      	movs	r3, #0
   13ecc:	f856 1b04 	ldr.w	r1, [r6], #4
   13ed0:	6822      	ldr	r2, [r4, #0]
   13ed2:	fa1f fe81 	uxth.w	lr, r1
   13ed6:	b290      	uxth	r0, r2
   13ed8:	0c09      	lsrs	r1, r1, #16
   13eda:	fb05 000e 	mla	r0, r5, lr, r0
   13ede:	0c12      	lsrs	r2, r2, #16
   13ee0:	4403      	add	r3, r0
   13ee2:	fb05 2201 	mla	r2, r5, r1, r2
   13ee6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   13eea:	b29b      	uxth	r3, r3
   13eec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   13ef0:	45b4      	cmp	ip, r6
   13ef2:	f844 3b04 	str.w	r3, [r4], #4
   13ef6:	ea4f 4312 	mov.w	r3, r2, lsr #16
   13efa:	d8e7      	bhi.n	13ecc <__multiply+0xa0>
   13efc:	f849 3007 	str.w	r3, [r9, r7]
   13f00:	f858 1c04 	ldr.w	r1, [r8, #-4]
   13f04:	0c09      	lsrs	r1, r1, #16
   13f06:	d0d5      	beq.n	13eb4 <__multiply+0x88>
   13f08:	f8d9 3000 	ldr.w	r3, [r9]
   13f0c:	4650      	mov	r0, sl
   13f0e:	461a      	mov	r2, r3
   13f10:	464c      	mov	r4, r9
   13f12:	2600      	movs	r6, #0
   13f14:	8805      	ldrh	r5, [r0, #0]
   13f16:	0c12      	lsrs	r2, r2, #16
   13f18:	fb01 2205 	mla	r2, r1, r5, r2
   13f1c:	4416      	add	r6, r2
   13f1e:	b29b      	uxth	r3, r3
   13f20:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   13f24:	f844 3b04 	str.w	r3, [r4], #4
   13f28:	f850 5b04 	ldr.w	r5, [r0], #4
   13f2c:	6822      	ldr	r2, [r4, #0]
   13f2e:	0c2d      	lsrs	r5, r5, #16
   13f30:	b293      	uxth	r3, r2
   13f32:	fb01 3305 	mla	r3, r1, r5, r3
   13f36:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   13f3a:	4584      	cmp	ip, r0
   13f3c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   13f40:	d8e8      	bhi.n	13f14 <__multiply+0xe8>
   13f42:	45c3      	cmp	fp, r8
   13f44:	f849 3007 	str.w	r3, [r9, r7]
   13f48:	f109 0904 	add.w	r9, r9, #4
   13f4c:	d8b6      	bhi.n	13ebc <__multiply+0x90>
   13f4e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   13f52:	2f00      	cmp	r7, #0
   13f54:	dc02      	bgt.n	13f5c <__multiply+0x130>
   13f56:	e005      	b.n	13f64 <__multiply+0x138>
   13f58:	3f01      	subs	r7, #1
   13f5a:	d003      	beq.n	13f64 <__multiply+0x138>
   13f5c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   13f60:	2b00      	cmp	r3, #0
   13f62:	d0f9      	beq.n	13f58 <__multiply+0x12c>
   13f64:	9b01      	ldr	r3, [sp, #4]
   13f66:	4618      	mov	r0, r3
   13f68:	611f      	str	r7, [r3, #16]
   13f6a:	b005      	add	sp, #20
   13f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f70:	4b03      	ldr	r3, [pc, #12]	; (13f80 <__multiply+0x154>)
   13f72:	4804      	ldr	r0, [pc, #16]	; (13f84 <__multiply+0x158>)
   13f74:	9a01      	ldr	r2, [sp, #4]
   13f76:	f44f 71b1 	mov.w	r1, #354	; 0x162
   13f7a:	f003 ff41 	bl	17e00 <__assert_func>
   13f7e:	bf00      	nop
   13f80:	20000d60 	.word	0x20000d60
   13f84:	20000ed8 	.word	0x20000ed8

00013f88 <__pow5mult>:
   13f88:	f012 0303 	ands.w	r3, r2, #3
   13f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f90:	4614      	mov	r4, r2
   13f92:	4606      	mov	r6, r0
   13f94:	d132      	bne.n	13ffc <__pow5mult+0x74>
   13f96:	460d      	mov	r5, r1
   13f98:	10a4      	asrs	r4, r4, #2
   13f9a:	d020      	beq.n	13fde <__pow5mult+0x56>
   13f9c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   13fa0:	f1b8 0f00 	cmp.w	r8, #0
   13fa4:	d033      	beq.n	1400e <__pow5mult+0x86>
   13fa6:	07e3      	lsls	r3, r4, #31
   13fa8:	f04f 0700 	mov.w	r7, #0
   13fac:	d407      	bmi.n	13fbe <__pow5mult+0x36>
   13fae:	1064      	asrs	r4, r4, #1
   13fb0:	d015      	beq.n	13fde <__pow5mult+0x56>
   13fb2:	f8d8 0000 	ldr.w	r0, [r8]
   13fb6:	b1a8      	cbz	r0, 13fe4 <__pow5mult+0x5c>
   13fb8:	4680      	mov	r8, r0
   13fba:	07e3      	lsls	r3, r4, #31
   13fbc:	d5f7      	bpl.n	13fae <__pow5mult+0x26>
   13fbe:	4642      	mov	r2, r8
   13fc0:	4629      	mov	r1, r5
   13fc2:	4630      	mov	r0, r6
   13fc4:	f7ff ff32 	bl	13e2c <__multiply>
   13fc8:	b1b5      	cbz	r5, 13ff8 <__pow5mult+0x70>
   13fca:	6869      	ldr	r1, [r5, #4]
   13fcc:	6c73      	ldr	r3, [r6, #68]	; 0x44
   13fce:	1064      	asrs	r4, r4, #1
   13fd0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   13fd4:	602a      	str	r2, [r5, #0]
   13fd6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   13fda:	4605      	mov	r5, r0
   13fdc:	d1e9      	bne.n	13fb2 <__pow5mult+0x2a>
   13fde:	4628      	mov	r0, r5
   13fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fe4:	4642      	mov	r2, r8
   13fe6:	4641      	mov	r1, r8
   13fe8:	4630      	mov	r0, r6
   13fea:	f7ff ff1f 	bl	13e2c <__multiply>
   13fee:	f8c8 0000 	str.w	r0, [r8]
   13ff2:	6007      	str	r7, [r0, #0]
   13ff4:	4680      	mov	r8, r0
   13ff6:	e7e0      	b.n	13fba <__pow5mult+0x32>
   13ff8:	4605      	mov	r5, r0
   13ffa:	e7d8      	b.n	13fae <__pow5mult+0x26>
   13ffc:	3b01      	subs	r3, #1
   13ffe:	4a0f      	ldr	r2, [pc, #60]	; (1403c <__pow5mult+0xb4>)
   14000:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   14004:	2300      	movs	r3, #0
   14006:	f7ff fde9 	bl	13bdc <__multadd>
   1400a:	4605      	mov	r5, r0
   1400c:	e7c4      	b.n	13f98 <__pow5mult+0x10>
   1400e:	2101      	movs	r1, #1
   14010:	4630      	mov	r0, r6
   14012:	f7ff fdb3 	bl	13b7c <_Balloc>
   14016:	4680      	mov	r8, r0
   14018:	b140      	cbz	r0, 1402c <__pow5mult+0xa4>
   1401a:	2301      	movs	r3, #1
   1401c:	f240 2271 	movw	r2, #625	; 0x271
   14020:	e9c0 3204 	strd	r3, r2, [r0, #16]
   14024:	2300      	movs	r3, #0
   14026:	6430      	str	r0, [r6, #64]	; 0x40
   14028:	6003      	str	r3, [r0, #0]
   1402a:	e7bc      	b.n	13fa6 <__pow5mult+0x1e>
   1402c:	4b04      	ldr	r3, [pc, #16]	; (14040 <__pow5mult+0xb8>)
   1402e:	4805      	ldr	r0, [pc, #20]	; (14044 <__pow5mult+0xbc>)
   14030:	4642      	mov	r2, r8
   14032:	f240 1145 	movw	r1, #325	; 0x145
   14036:	f003 fee3 	bl	17e00 <__assert_func>
   1403a:	bf00      	nop
   1403c:	20007f28 	.word	0x20007f28
   14040:	20000d60 	.word	0x20000d60
   14044:	20000ed8 	.word	0x20000ed8

00014048 <__lshift>:
   14048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1404c:	460d      	mov	r5, r1
   1404e:	4614      	mov	r4, r2
   14050:	692f      	ldr	r7, [r5, #16]
   14052:	68ab      	ldr	r3, [r5, #8]
   14054:	6849      	ldr	r1, [r1, #4]
   14056:	eb07 1762 	add.w	r7, r7, r2, asr #5
   1405a:	1c7e      	adds	r6, r7, #1
   1405c:	429e      	cmp	r6, r3
   1405e:	4680      	mov	r8, r0
   14060:	ea4f 1962 	mov.w	r9, r2, asr #5
   14064:	dd04      	ble.n	14070 <__lshift+0x28>
   14066:	005b      	lsls	r3, r3, #1
   14068:	429e      	cmp	r6, r3
   1406a:	f101 0101 	add.w	r1, r1, #1
   1406e:	dcfa      	bgt.n	14066 <__lshift+0x1e>
   14070:	4640      	mov	r0, r8
   14072:	f7ff fd83 	bl	13b7c <_Balloc>
   14076:	4684      	mov	ip, r0
   14078:	2800      	cmp	r0, #0
   1407a:	d052      	beq.n	14122 <__lshift+0xda>
   1407c:	f1b9 0f00 	cmp.w	r9, #0
   14080:	f100 0214 	add.w	r2, r0, #20
   14084:	dd0e      	ble.n	140a4 <__lshift+0x5c>
   14086:	f109 0105 	add.w	r1, r9, #5
   1408a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   1408e:	4613      	mov	r3, r2
   14090:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   14094:	2000      	movs	r0, #0
   14096:	f843 0b04 	str.w	r0, [r3], #4
   1409a:	428b      	cmp	r3, r1
   1409c:	d1fb      	bne.n	14096 <__lshift+0x4e>
   1409e:	f1ae 0314 	sub.w	r3, lr, #20
   140a2:	441a      	add	r2, r3
   140a4:	6929      	ldr	r1, [r5, #16]
   140a6:	f105 0314 	add.w	r3, r5, #20
   140aa:	f014 0e1f 	ands.w	lr, r4, #31
   140ae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   140b2:	d02e      	beq.n	14112 <__lshift+0xca>
   140b4:	f1ce 0920 	rsb	r9, lr, #32
   140b8:	4610      	mov	r0, r2
   140ba:	f04f 0a00 	mov.w	sl, #0
   140be:	681c      	ldr	r4, [r3, #0]
   140c0:	fa04 f40e 	lsl.w	r4, r4, lr
   140c4:	ea44 040a 	orr.w	r4, r4, sl
   140c8:	f840 4b04 	str.w	r4, [r0], #4
   140cc:	f853 4b04 	ldr.w	r4, [r3], #4
   140d0:	4299      	cmp	r1, r3
   140d2:	fa24 fa09 	lsr.w	sl, r4, r9
   140d6:	d8f2      	bhi.n	140be <__lshift+0x76>
   140d8:	1b4b      	subs	r3, r1, r5
   140da:	3b15      	subs	r3, #21
   140dc:	f023 0303 	bic.w	r3, r3, #3
   140e0:	3304      	adds	r3, #4
   140e2:	f105 0015 	add.w	r0, r5, #21
   140e6:	4281      	cmp	r1, r0
   140e8:	bf38      	it	cc
   140ea:	2304      	movcc	r3, #4
   140ec:	f1ba 0f00 	cmp.w	sl, #0
   140f0:	bf18      	it	ne
   140f2:	4637      	movne	r7, r6
   140f4:	f842 a003 	str.w	sl, [r2, r3]
   140f8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   140fc:	686a      	ldr	r2, [r5, #4]
   140fe:	f8cc 7010 	str.w	r7, [ip, #16]
   14102:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   14106:	6029      	str	r1, [r5, #0]
   14108:	4660      	mov	r0, ip
   1410a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14112:	3a04      	subs	r2, #4
   14114:	f853 0b04 	ldr.w	r0, [r3], #4
   14118:	f842 0f04 	str.w	r0, [r2, #4]!
   1411c:	4299      	cmp	r1, r3
   1411e:	d8f9      	bhi.n	14114 <__lshift+0xcc>
   14120:	e7ea      	b.n	140f8 <__lshift+0xb0>
   14122:	4b03      	ldr	r3, [pc, #12]	; (14130 <__lshift+0xe8>)
   14124:	4803      	ldr	r0, [pc, #12]	; (14134 <__lshift+0xec>)
   14126:	4662      	mov	r2, ip
   14128:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   1412c:	f003 fe68 	bl	17e00 <__assert_func>
   14130:	20000d60 	.word	0x20000d60
   14134:	20000ed8 	.word	0x20000ed8

00014138 <__mcmp>:
   14138:	690b      	ldr	r3, [r1, #16]
   1413a:	4684      	mov	ip, r0
   1413c:	6900      	ldr	r0, [r0, #16]
   1413e:	1ac0      	subs	r0, r0, r3
   14140:	d116      	bne.n	14170 <__mcmp+0x38>
   14142:	f10c 0c14 	add.w	ip, ip, #20
   14146:	3114      	adds	r1, #20
   14148:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   1414c:	b410      	push	{r4}
   1414e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   14152:	e001      	b.n	14158 <__mcmp+0x20>
   14154:	4594      	cmp	ip, r2
   14156:	d208      	bcs.n	1416a <__mcmp+0x32>
   14158:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1415c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   14160:	428c      	cmp	r4, r1
   14162:	d0f7      	beq.n	14154 <__mcmp+0x1c>
   14164:	d205      	bcs.n	14172 <__mcmp+0x3a>
   14166:	f04f 30ff 	mov.w	r0, #4294967295
   1416a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1416e:	4770      	bx	lr
   14170:	4770      	bx	lr
   14172:	2001      	movs	r0, #1
   14174:	f85d 4b04 	ldr.w	r4, [sp], #4
   14178:	4770      	bx	lr
   1417a:	bf00      	nop

0001417c <__mdiff>:
   1417c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14180:	690f      	ldr	r7, [r1, #16]
   14182:	6913      	ldr	r3, [r2, #16]
   14184:	1aff      	subs	r7, r7, r3
   14186:	2f00      	cmp	r7, #0
   14188:	460e      	mov	r6, r1
   1418a:	4690      	mov	r8, r2
   1418c:	d17f      	bne.n	1428e <__mdiff+0x112>
   1418e:	f101 0514 	add.w	r5, r1, #20
   14192:	3214      	adds	r2, #20
   14194:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   14198:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1419c:	e001      	b.n	141a2 <__mdiff+0x26>
   1419e:	429d      	cmp	r5, r3
   141a0:	d278      	bcs.n	14294 <__mdiff+0x118>
   141a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   141a6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   141aa:	42a1      	cmp	r1, r4
   141ac:	d0f7      	beq.n	1419e <__mdiff+0x22>
   141ae:	d369      	bcc.n	14284 <__mdiff+0x108>
   141b0:	6871      	ldr	r1, [r6, #4]
   141b2:	f7ff fce3 	bl	13b7c <_Balloc>
   141b6:	4681      	mov	r9, r0
   141b8:	2800      	cmp	r0, #0
   141ba:	d077      	beq.n	142ac <__mdiff+0x130>
   141bc:	6935      	ldr	r5, [r6, #16]
   141be:	f8d8 2010 	ldr.w	r2, [r8, #16]
   141c2:	60c7      	str	r7, [r0, #12]
   141c4:	f108 0e14 	add.w	lr, r8, #20
   141c8:	f106 0014 	add.w	r0, r6, #20
   141cc:	f109 0a14 	add.w	sl, r9, #20
   141d0:	f106 0110 	add.w	r1, r6, #16
   141d4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   141d8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   141dc:	4656      	mov	r6, sl
   141de:	f04f 0c00 	mov.w	ip, #0
   141e2:	f85e 4b04 	ldr.w	r4, [lr], #4
   141e6:	f851 bf04 	ldr.w	fp, [r1, #4]!
   141ea:	b2a3      	uxth	r3, r4
   141ec:	fa1c fc8b 	uxtah	ip, ip, fp
   141f0:	ebac 0303 	sub.w	r3, ip, r3
   141f4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   141f8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   141fc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   14200:	b29b      	uxth	r3, r3
   14202:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   14206:	4572      	cmp	r2, lr
   14208:	f846 3b04 	str.w	r3, [r6], #4
   1420c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   14210:	d8e7      	bhi.n	141e2 <__mdiff+0x66>
   14212:	eba2 0108 	sub.w	r1, r2, r8
   14216:	3915      	subs	r1, #21
   14218:	f108 0815 	add.w	r8, r8, #21
   1421c:	4542      	cmp	r2, r8
   1421e:	f021 0403 	bic.w	r4, r1, #3
   14222:	f104 0404 	add.w	r4, r4, #4
   14226:	bf38      	it	cc
   14228:	2404      	movcc	r4, #4
   1422a:	4420      	add	r0, r4
   1422c:	f021 0203 	bic.w	r2, r1, #3
   14230:	bf38      	it	cc
   14232:	2200      	movcc	r2, #0
   14234:	4287      	cmp	r7, r0
   14236:	4452      	add	r2, sl
   14238:	4454      	add	r4, sl
   1423a:	d918      	bls.n	1426e <__mdiff+0xf2>
   1423c:	4626      	mov	r6, r4
   1423e:	4601      	mov	r1, r0
   14240:	f851 3b04 	ldr.w	r3, [r1], #4
   14244:	fa1c fc83 	uxtah	ip, ip, r3
   14248:	ea4f 422c 	mov.w	r2, ip, asr #16
   1424c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   14250:	fa1f fc8c 	uxth.w	ip, ip
   14254:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   14258:	428f      	cmp	r7, r1
   1425a:	f846 3b04 	str.w	r3, [r6], #4
   1425e:	ea4f 4c22 	mov.w	ip, r2, asr #16
   14262:	d8ed      	bhi.n	14240 <__mdiff+0xc4>
   14264:	3f01      	subs	r7, #1
   14266:	1a3f      	subs	r7, r7, r0
   14268:	f027 0703 	bic.w	r7, r7, #3
   1426c:	19e2      	adds	r2, r4, r7
   1426e:	b923      	cbnz	r3, 1427a <__mdiff+0xfe>
   14270:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   14274:	3d01      	subs	r5, #1
   14276:	2b00      	cmp	r3, #0
   14278:	d0fa      	beq.n	14270 <__mdiff+0xf4>
   1427a:	f8c9 5010 	str.w	r5, [r9, #16]
   1427e:	4648      	mov	r0, r9
   14280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14284:	4633      	mov	r3, r6
   14286:	2701      	movs	r7, #1
   14288:	4646      	mov	r6, r8
   1428a:	4698      	mov	r8, r3
   1428c:	e790      	b.n	141b0 <__mdiff+0x34>
   1428e:	dbf9      	blt.n	14284 <__mdiff+0x108>
   14290:	2700      	movs	r7, #0
   14292:	e78d      	b.n	141b0 <__mdiff+0x34>
   14294:	2100      	movs	r1, #0
   14296:	f7ff fc71 	bl	13b7c <_Balloc>
   1429a:	4681      	mov	r9, r0
   1429c:	b168      	cbz	r0, 142ba <__mdiff+0x13e>
   1429e:	2201      	movs	r2, #1
   142a0:	2300      	movs	r3, #0
   142a2:	e9c9 2304 	strd	r2, r3, [r9, #16]
   142a6:	4648      	mov	r0, r9
   142a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142ac:	4b06      	ldr	r3, [pc, #24]	; (142c8 <__mdiff+0x14c>)
   142ae:	4807      	ldr	r0, [pc, #28]	; (142cc <__mdiff+0x150>)
   142b0:	464a      	mov	r2, r9
   142b2:	f240 2145 	movw	r1, #581	; 0x245
   142b6:	f003 fda3 	bl	17e00 <__assert_func>
   142ba:	4b03      	ldr	r3, [pc, #12]	; (142c8 <__mdiff+0x14c>)
   142bc:	4803      	ldr	r0, [pc, #12]	; (142cc <__mdiff+0x150>)
   142be:	464a      	mov	r2, r9
   142c0:	f240 2137 	movw	r1, #567	; 0x237
   142c4:	f003 fd9c 	bl	17e00 <__assert_func>
   142c8:	20000d60 	.word	0x20000d60
   142cc:	20000ed8 	.word	0x20000ed8

000142d0 <__ulp>:
   142d0:	b082      	sub	sp, #8
   142d2:	ed8d 0b00 	vstr	d0, [sp]
   142d6:	4b16      	ldr	r3, [pc, #88]	; (14330 <__ulp+0x60>)
   142d8:	9a01      	ldr	r2, [sp, #4]
   142da:	4013      	ands	r3, r2
   142dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   142e0:	2b00      	cmp	r3, #0
   142e2:	dd06      	ble.n	142f2 <__ulp+0x22>
   142e4:	2200      	movs	r2, #0
   142e6:	4619      	mov	r1, r3
   142e8:	4610      	mov	r0, r2
   142ea:	ec41 0b10 	vmov	d0, r0, r1
   142ee:	b002      	add	sp, #8
   142f0:	4770      	bx	lr
   142f2:	425b      	negs	r3, r3
   142f4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   142f8:	ea4f 5223 	mov.w	r2, r3, asr #20
   142fc:	da09      	bge.n	14312 <__ulp+0x42>
   142fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   14302:	4113      	asrs	r3, r2
   14304:	2200      	movs	r2, #0
   14306:	4619      	mov	r1, r3
   14308:	4610      	mov	r0, r2
   1430a:	ec41 0b10 	vmov	d0, r0, r1
   1430e:	b002      	add	sp, #8
   14310:	4770      	bx	lr
   14312:	f1a2 0314 	sub.w	r3, r2, #20
   14316:	2b1e      	cmp	r3, #30
   14318:	bfda      	itte	le
   1431a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   1431e:	40da      	lsrle	r2, r3
   14320:	2201      	movgt	r2, #1
   14322:	2300      	movs	r3, #0
   14324:	4619      	mov	r1, r3
   14326:	4610      	mov	r0, r2
   14328:	ec41 0b10 	vmov	d0, r0, r1
   1432c:	b002      	add	sp, #8
   1432e:	4770      	bx	lr
   14330:	7ff00000 	.word	0x7ff00000

00014334 <__b2d>:
   14334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14336:	6904      	ldr	r4, [r0, #16]
   14338:	f100 0614 	add.w	r6, r0, #20
   1433c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   14340:	1f27      	subs	r7, r4, #4
   14342:	f854 5c04 	ldr.w	r5, [r4, #-4]
   14346:	4628      	mov	r0, r5
   14348:	f7ff fcf2 	bl	13d30 <__hi0bits>
   1434c:	f1c0 0320 	rsb	r3, r0, #32
   14350:	280a      	cmp	r0, #10
   14352:	600b      	str	r3, [r1, #0]
   14354:	dd1b      	ble.n	1438e <__b2d+0x5a>
   14356:	42be      	cmp	r6, r7
   14358:	d20b      	bcs.n	14372 <__b2d+0x3e>
   1435a:	380b      	subs	r0, #11
   1435c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   14360:	d12e      	bne.n	143c0 <__b2d+0x8c>
   14362:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   14366:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1436a:	460a      	mov	r2, r1
   1436c:	ec43 2b10 	vmov	d0, r2, r3
   14370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14372:	f1b0 010b 	subs.w	r1, r0, #11
   14376:	d0f4      	beq.n	14362 <__b2d+0x2e>
   14378:	fa05 f101 	lsl.w	r1, r5, r1
   1437c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   14380:	2100      	movs	r1, #0
   14382:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   14386:	460a      	mov	r2, r1
   14388:	ec43 2b10 	vmov	d0, r2, r3
   1438c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1438e:	f1c0 0c0b 	rsb	ip, r0, #11
   14392:	fa25 f10c 	lsr.w	r1, r5, ip
   14396:	42be      	cmp	r6, r7
   14398:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   1439c:	bf38      	it	cc
   1439e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   143a2:	f100 0015 	add.w	r0, r0, #21
   143a6:	bf34      	ite	cc
   143a8:	fa21 f10c 	lsrcc.w	r1, r1, ip
   143ac:	2100      	movcs	r1, #0
   143ae:	fa05 f000 	lsl.w	r0, r5, r0
   143b2:	4301      	orrs	r1, r0
   143b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   143b8:	460a      	mov	r2, r1
   143ba:	ec43 2b10 	vmov	d0, r2, r3
   143be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143c0:	f1c0 0c20 	rsb	ip, r0, #32
   143c4:	4085      	lsls	r5, r0
   143c6:	fa21 f30c 	lsr.w	r3, r1, ip
   143ca:	ea45 0703 	orr.w	r7, r5, r3
   143ce:	f1a4 0508 	sub.w	r5, r4, #8
   143d2:	42ae      	cmp	r6, r5
   143d4:	fa01 f100 	lsl.w	r1, r1, r0
   143d8:	bf3c      	itt	cc
   143da:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   143de:	fa20 f00c 	lsrcc.w	r0, r0, ip
   143e2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   143e6:	bf38      	it	cc
   143e8:	4301      	orrcc	r1, r0
   143ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   143ee:	460a      	mov	r2, r1
   143f0:	ec43 2b10 	vmov	d0, r2, r3
   143f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143f6:	bf00      	nop

000143f8 <__d2b>:
   143f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   143fc:	4688      	mov	r8, r1
   143fe:	b083      	sub	sp, #12
   14400:	2101      	movs	r1, #1
   14402:	ec57 6b10 	vmov	r6, r7, d0
   14406:	4615      	mov	r5, r2
   14408:	f7ff fbb8 	bl	13b7c <_Balloc>
   1440c:	4604      	mov	r4, r0
   1440e:	2800      	cmp	r0, #0
   14410:	d051      	beq.n	144b6 <__d2b+0xbe>
   14412:	f3c7 590a 	ubfx	r9, r7, #20, #11
   14416:	f3c7 0313 	ubfx	r3, r7, #0, #20
   1441a:	f1b9 0f00 	cmp.w	r9, #0
   1441e:	d001      	beq.n	14424 <__d2b+0x2c>
   14420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   14424:	2e00      	cmp	r6, #0
   14426:	9301      	str	r3, [sp, #4]
   14428:	d118      	bne.n	1445c <__d2b+0x64>
   1442a:	a801      	add	r0, sp, #4
   1442c:	f7ff fca0 	bl	13d70 <__lo0bits>
   14430:	9a01      	ldr	r2, [sp, #4]
   14432:	6162      	str	r2, [r4, #20]
   14434:	2201      	movs	r2, #1
   14436:	f100 0320 	add.w	r3, r0, #32
   1443a:	6122      	str	r2, [r4, #16]
   1443c:	f1b9 0f00 	cmp.w	r9, #0
   14440:	d025      	beq.n	1448e <__d2b+0x96>
   14442:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   14446:	eb09 0203 	add.w	r2, r9, r3
   1444a:	4620      	mov	r0, r4
   1444c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   14450:	f8c8 2000 	str.w	r2, [r8]
   14454:	602b      	str	r3, [r5, #0]
   14456:	b003      	add	sp, #12
   14458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1445c:	4668      	mov	r0, sp
   1445e:	9600      	str	r6, [sp, #0]
   14460:	f7ff fc86 	bl	13d70 <__lo0bits>
   14464:	4603      	mov	r3, r0
   14466:	b310      	cbz	r0, 144ae <__d2b+0xb6>
   14468:	e9dd 0200 	ldrd	r0, r2, [sp]
   1446c:	f1c3 0120 	rsb	r1, r3, #32
   14470:	fa02 f101 	lsl.w	r1, r2, r1
   14474:	4301      	orrs	r1, r0
   14476:	40da      	lsrs	r2, r3
   14478:	6161      	str	r1, [r4, #20]
   1447a:	9201      	str	r2, [sp, #4]
   1447c:	2a00      	cmp	r2, #0
   1447e:	61a2      	str	r2, [r4, #24]
   14480:	bf14      	ite	ne
   14482:	2202      	movne	r2, #2
   14484:	2201      	moveq	r2, #1
   14486:	6122      	str	r2, [r4, #16]
   14488:	f1b9 0f00 	cmp.w	r9, #0
   1448c:	d1d9      	bne.n	14442 <__d2b+0x4a>
   1448e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   14492:	f8c8 3000 	str.w	r3, [r8]
   14496:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   1449a:	6918      	ldr	r0, [r3, #16]
   1449c:	f7ff fc48 	bl	13d30 <__hi0bits>
   144a0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   144a4:	4620      	mov	r0, r4
   144a6:	602b      	str	r3, [r5, #0]
   144a8:	b003      	add	sp, #12
   144aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   144ae:	9a00      	ldr	r2, [sp, #0]
   144b0:	6162      	str	r2, [r4, #20]
   144b2:	9a01      	ldr	r2, [sp, #4]
   144b4:	e7e2      	b.n	1447c <__d2b+0x84>
   144b6:	4b03      	ldr	r3, [pc, #12]	; (144c4 <__d2b+0xcc>)
   144b8:	4803      	ldr	r0, [pc, #12]	; (144c8 <__d2b+0xd0>)
   144ba:	4622      	mov	r2, r4
   144bc:	f240 310f 	movw	r1, #783	; 0x30f
   144c0:	f003 fc9e 	bl	17e00 <__assert_func>
   144c4:	20000d60 	.word	0x20000d60
   144c8:	20000ed8 	.word	0x20000ed8

000144cc <__ratio>:
   144cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   144ce:	b083      	sub	sp, #12
   144d0:	460e      	mov	r6, r1
   144d2:	4669      	mov	r1, sp
   144d4:	4607      	mov	r7, r0
   144d6:	f7ff ff2d 	bl	14334 <__b2d>
   144da:	a901      	add	r1, sp, #4
   144dc:	4630      	mov	r0, r6
   144de:	ec55 4b10 	vmov	r4, r5, d0
   144e2:	eeb0 7b40 	vmov.f64	d7, d0
   144e6:	f7ff ff25 	bl	14334 <__b2d>
   144ea:	6933      	ldr	r3, [r6, #16]
   144ec:	693a      	ldr	r2, [r7, #16]
   144ee:	1ad2      	subs	r2, r2, r3
   144f0:	e9dd 3100 	ldrd	r3, r1, [sp]
   144f4:	1a5b      	subs	r3, r3, r1
   144f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   144fa:	2b00      	cmp	r3, #0
   144fc:	dd09      	ble.n	14512 <__ratio+0x46>
   144fe:	ee17 2a90 	vmov	r2, s15
   14502:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   14506:	ec45 4b17 	vmov	d7, r4, r5
   1450a:	ee87 0b00 	vdiv.f64	d0, d7, d0
   1450e:	b003      	add	sp, #12
   14510:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14512:	ee10 2a90 	vmov	r2, s1
   14516:	ec51 0b10 	vmov	r0, r1, d0
   1451a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   1451e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   14522:	ec41 0b10 	vmov	d0, r0, r1
   14526:	ee87 0b00 	vdiv.f64	d0, d7, d0
   1452a:	b003      	add	sp, #12
   1452c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1452e:	bf00      	nop

00014530 <__copybits>:
   14530:	3901      	subs	r1, #1
   14532:	1149      	asrs	r1, r1, #5
   14534:	f101 0c01 	add.w	ip, r1, #1
   14538:	6911      	ldr	r1, [r2, #16]
   1453a:	f102 0314 	add.w	r3, r2, #20
   1453e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   14542:	428b      	cmp	r3, r1
   14544:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   14548:	d217      	bcs.n	1457a <__copybits+0x4a>
   1454a:	b510      	push	{r4, lr}
   1454c:	f1a0 0e04 	sub.w	lr, r0, #4
   14550:	f853 4b04 	ldr.w	r4, [r3], #4
   14554:	f84e 4f04 	str.w	r4, [lr, #4]!
   14558:	4299      	cmp	r1, r3
   1455a:	d8f9      	bhi.n	14550 <__copybits+0x20>
   1455c:	1a8a      	subs	r2, r1, r2
   1455e:	f1a2 0315 	sub.w	r3, r2, #21
   14562:	f023 0303 	bic.w	r3, r3, #3
   14566:	3304      	adds	r3, #4
   14568:	4418      	add	r0, r3
   1456a:	4584      	cmp	ip, r0
   1456c:	d904      	bls.n	14578 <__copybits+0x48>
   1456e:	2300      	movs	r3, #0
   14570:	f840 3b04 	str.w	r3, [r0], #4
   14574:	4584      	cmp	ip, r0
   14576:	d8fb      	bhi.n	14570 <__copybits+0x40>
   14578:	bd10      	pop	{r4, pc}
   1457a:	4584      	cmp	ip, r0
   1457c:	d905      	bls.n	1458a <__copybits+0x5a>
   1457e:	2300      	movs	r3, #0
   14580:	f840 3b04 	str.w	r3, [r0], #4
   14584:	4584      	cmp	ip, r0
   14586:	d8fb      	bhi.n	14580 <__copybits+0x50>
   14588:	4770      	bx	lr
   1458a:	4770      	bx	lr

0001458c <__any_on>:
   1458c:	6903      	ldr	r3, [r0, #16]
   1458e:	114a      	asrs	r2, r1, #5
   14590:	4293      	cmp	r3, r2
   14592:	f100 0014 	add.w	r0, r0, #20
   14596:	da09      	bge.n	145ac <__any_on+0x20>
   14598:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1459c:	e002      	b.n	145a4 <__any_on+0x18>
   1459e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   145a2:	b9c2      	cbnz	r2, 145d6 <__any_on+0x4a>
   145a4:	4283      	cmp	r3, r0
   145a6:	d8fa      	bhi.n	1459e <__any_on+0x12>
   145a8:	2000      	movs	r0, #0
   145aa:	4770      	bx	lr
   145ac:	dd10      	ble.n	145d0 <__any_on+0x44>
   145ae:	f011 011f 	ands.w	r1, r1, #31
   145b2:	d00d      	beq.n	145d0 <__any_on+0x44>
   145b4:	b410      	push	{r4}
   145b6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   145ba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   145be:	fa24 f201 	lsr.w	r2, r4, r1
   145c2:	408a      	lsls	r2, r1
   145c4:	4294      	cmp	r4, r2
   145c6:	d00c      	beq.n	145e2 <__any_on+0x56>
   145c8:	2001      	movs	r0, #1
   145ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   145ce:	4770      	bx	lr
   145d0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   145d4:	e7e6      	b.n	145a4 <__any_on+0x18>
   145d6:	2001      	movs	r0, #1
   145d8:	4770      	bx	lr
   145da:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   145de:	2a00      	cmp	r2, #0
   145e0:	d1f2      	bne.n	145c8 <__any_on+0x3c>
   145e2:	4283      	cmp	r3, r0
   145e4:	d8f9      	bhi.n	145da <__any_on+0x4e>
   145e6:	2000      	movs	r0, #0
   145e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   145ec:	4770      	bx	lr
   145ee:	bf00      	nop

000145f0 <__ascii_wctomb>:
   145f0:	b149      	cbz	r1, 14606 <__ascii_wctomb+0x16>
   145f2:	2aff      	cmp	r2, #255	; 0xff
   145f4:	d802      	bhi.n	145fc <__ascii_wctomb+0xc>
   145f6:	700a      	strb	r2, [r1, #0]
   145f8:	2001      	movs	r0, #1
   145fa:	4770      	bx	lr
   145fc:	238a      	movs	r3, #138	; 0x8a
   145fe:	6003      	str	r3, [r0, #0]
   14600:	f04f 30ff 	mov.w	r0, #4294967295
   14604:	4770      	bx	lr
   14606:	4608      	mov	r0, r1
   14608:	4770      	bx	lr
   1460a:	bf00      	nop

0001460c <fcvtbuf>:
   1460c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14610:	460e      	mov	r6, r1
   14612:	4926      	ldr	r1, [pc, #152]	; (146ac <fcvtbuf+0xa0>)
   14614:	b087      	sub	sp, #28
   14616:	680f      	ldr	r7, [r1, #0]
   14618:	4604      	mov	r4, r0
   1461a:	4690      	mov	r8, r2
   1461c:	461d      	mov	r5, r3
   1461e:	b353      	cbz	r3, 14676 <fcvtbuf+0x6a>
   14620:	aa05      	add	r2, sp, #20
   14622:	4633      	mov	r3, r6
   14624:	9201      	str	r2, [sp, #4]
   14626:	2103      	movs	r1, #3
   14628:	4622      	mov	r2, r4
   1462a:	f8cd 8000 	str.w	r8, [sp]
   1462e:	4638      	mov	r0, r7
   14630:	f003 fcd6 	bl	17fe0 <_dtoa_r>
   14634:	9b05      	ldr	r3, [sp, #20]
   14636:	6832      	ldr	r2, [r6, #0]
   14638:	4298      	cmp	r0, r3
   1463a:	4684      	mov	ip, r0
   1463c:	f1c2 0200 	rsb	r2, r2, #0
   14640:	4629      	mov	r1, r5
   14642:	d209      	bcs.n	14658 <fcvtbuf+0x4c>
   14644:	1a10      	subs	r0, r2, r0
   14646:	f81c 3b01 	ldrb.w	r3, [ip], #1
   1464a:	f801 3b01 	strb.w	r3, [r1], #1
   1464e:	9b05      	ldr	r3, [sp, #20]
   14650:	4563      	cmp	r3, ip
   14652:	eb00 020c 	add.w	r2, r0, ip
   14656:	d8f6      	bhi.n	14646 <fcvtbuf+0x3a>
   14658:	4294      	cmp	r4, r2
   1465a:	dd24      	ble.n	146a6 <fcvtbuf+0x9a>
   1465c:	1aa2      	subs	r2, r4, r2
   1465e:	440a      	add	r2, r1
   14660:	2330      	movs	r3, #48	; 0x30
   14662:	f801 3b01 	strb.w	r3, [r1], #1
   14666:	4291      	cmp	r1, r2
   14668:	d1fb      	bne.n	14662 <fcvtbuf+0x56>
   1466a:	2300      	movs	r3, #0
   1466c:	7013      	strb	r3, [r2, #0]
   1466e:	4628      	mov	r0, r5
   14670:	b007      	add	sp, #28
   14672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14676:	6cba      	ldr	r2, [r7, #72]	; 0x48
   14678:	f100 0323 	add.w	r3, r0, #35	; 0x23
   1467c:	429a      	cmp	r2, r3
   1467e:	dd01      	ble.n	14684 <fcvtbuf+0x78>
   14680:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   14682:	e7cd      	b.n	14620 <fcvtbuf+0x14>
   14684:	f100 0924 	add.w	r9, r0, #36	; 0x24
   14688:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1468a:	464a      	mov	r2, r9
   1468c:	4638      	mov	r0, r7
   1468e:	ed8d 0b02 	vstr	d0, [sp, #8]
   14692:	f7fc fba5 	bl	10de0 <_realloc_r>
   14696:	4605      	mov	r5, r0
   14698:	2800      	cmp	r0, #0
   1469a:	d0e8      	beq.n	1466e <fcvtbuf+0x62>
   1469c:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   146a0:	ed9d 0b02 	vldr	d0, [sp, #8]
   146a4:	e7bc      	b.n	14620 <fcvtbuf+0x14>
   146a6:	460a      	mov	r2, r1
   146a8:	e7df      	b.n	1466a <fcvtbuf+0x5e>
   146aa:	bf00      	nop
   146ac:	200093d4 	.word	0x200093d4

000146b0 <_svfprintf_r>:
   146b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146b4:	ed2d 8b08 	vpush	{d8-d11}
   146b8:	b0d1      	sub	sp, #324	; 0x144
   146ba:	460c      	mov	r4, r1
   146bc:	ee0b 1a10 	vmov	s22, r1
   146c0:	4690      	mov	r8, r2
   146c2:	9308      	str	r3, [sp, #32]
   146c4:	4683      	mov	fp, r0
   146c6:	f003 fb59 	bl	17d7c <_localeconv_r>
   146ca:	6803      	ldr	r3, [r0, #0]
   146cc:	9312      	str	r3, [sp, #72]	; 0x48
   146ce:	4618      	mov	r0, r3
   146d0:	f7fe fc16 	bl	12f00 <strlen>
   146d4:	af20      	add	r7, sp, #128	; 0x80
   146d6:	9010      	str	r0, [sp, #64]	; 0x40
   146d8:	2208      	movs	r2, #8
   146da:	2100      	movs	r1, #0
   146dc:	4638      	mov	r0, r7
   146de:	f7fe f827 	bl	12730 <memset>
   146e2:	89a3      	ldrh	r3, [r4, #12]
   146e4:	061b      	lsls	r3, r3, #24
   146e6:	d503      	bpl.n	146f0 <_svfprintf_r+0x40>
   146e8:	6923      	ldr	r3, [r4, #16]
   146ea:	2b00      	cmp	r3, #0
   146ec:	f000 8755 	beq.w	1559a <_svfprintf_r+0xeea>
   146f0:	2300      	movs	r3, #0
   146f2:	ed9f 8b83 	vldr	d8, [pc, #524]	; 14900 <_svfprintf_r+0x250>
   146f6:	ed9f 9b84 	vldr	d9, [pc, #528]	; 14908 <_svfprintf_r+0x258>
   146fa:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   146fe:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   14702:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   14706:	aa27      	add	r2, sp, #156	; 0x9c
   14708:	930e      	str	r3, [sp, #56]	; 0x38
   1470a:	9224      	str	r2, [sp, #144]	; 0x90
   1470c:	4692      	mov	sl, r2
   1470e:	9311      	str	r3, [sp, #68]	; 0x44
   14710:	9304      	str	r3, [sp, #16]
   14712:	4644      	mov	r4, r8
   14714:	46a1      	mov	r9, r4
   14716:	4b7e      	ldr	r3, [pc, #504]	; (14910 <_svfprintf_r+0x260>)
   14718:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1471c:	f7fe f928 	bl	12970 <__locale_mb_cur_max>
   14720:	464a      	mov	r2, r9
   14722:	4603      	mov	r3, r0
   14724:	a91c      	add	r1, sp, #112	; 0x70
   14726:	9700      	str	r7, [sp, #0]
   14728:	4658      	mov	r0, fp
   1472a:	47a8      	blx	r5
   1472c:	2800      	cmp	r0, #0
   1472e:	f000 80b0 	beq.w	14892 <_svfprintf_r+0x1e2>
   14732:	f2c0 80a6 	blt.w	14882 <_svfprintf_r+0x1d2>
   14736:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   14738:	2a25      	cmp	r2, #37	; 0x25
   1473a:	4603      	mov	r3, r0
   1473c:	d001      	beq.n	14742 <_svfprintf_r+0x92>
   1473e:	4499      	add	r9, r3
   14740:	e7e9      	b.n	14716 <_svfprintf_r+0x66>
   14742:	ebb9 0504 	subs.w	r5, r9, r4
   14746:	4606      	mov	r6, r0
   14748:	f040 80a7 	bne.w	1489a <_svfprintf_r+0x1ea>
   1474c:	2300      	movs	r3, #0
   1474e:	f04f 32ff 	mov.w	r2, #4294967295
   14752:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   14756:	4698      	mov	r8, r3
   14758:	9306      	str	r3, [sp, #24]
   1475a:	f109 0901 	add.w	r9, r9, #1
   1475e:	f899 3000 	ldrb.w	r3, [r9]
   14762:	9203      	str	r2, [sp, #12]
   14764:	252b      	movs	r5, #43	; 0x2b
   14766:	2620      	movs	r6, #32
   14768:	f109 0901 	add.w	r9, r9, #1
   1476c:	f1a3 0220 	sub.w	r2, r3, #32
   14770:	2a5a      	cmp	r2, #90	; 0x5a
   14772:	f200 80cf 	bhi.w	14914 <_svfprintf_r+0x264>
   14776:	e8df f012 	tbh	[pc, r2, lsl #1]
   1477a:	02e8      	.short	0x02e8
   1477c:	00cd00cd 	.word	0x00cd00cd
   14780:	00cd02e3 	.word	0x00cd02e3
   14784:	00cd00cd 	.word	0x00cd00cd
   14788:	00cd006a 	.word	0x00cd006a
   1478c:	020500cd 	.word	0x020500cd
   14790:	00cd0284 	.word	0x00cd0284
   14794:	02c90210 	.word	0x02c90210
   14798:	02bd00cd 	.word	0x02bd00cd
   1479c:	005b005b 	.word	0x005b005b
   147a0:	005b005b 	.word	0x005b005b
   147a4:	005b005b 	.word	0x005b005b
   147a8:	005b005b 	.word	0x005b005b
   147ac:	00cd005b 	.word	0x00cd005b
   147b0:	00cd00cd 	.word	0x00cd00cd
   147b4:	00cd00cd 	.word	0x00cd00cd
   147b8:	00cd00cd 	.word	0x00cd00cd
   147bc:	00cd0153 	.word	0x00cd0153
   147c0:	021a0183 	.word	0x021a0183
   147c4:	01530153 	.word	0x01530153
   147c8:	00cd0153 	.word	0x00cd0153
   147cc:	00cd00cd 	.word	0x00cd00cd
   147d0:	021500cd 	.word	0x021500cd
   147d4:	00cd00cd 	.word	0x00cd00cd
   147d8:	00cd0296 	.word	0x00cd0296
   147dc:	00cd00cd 	.word	0x00cd00cd
   147e0:	00cd01ab 	.word	0x00cd01ab
   147e4:	00cd02aa 	.word	0x00cd02aa
   147e8:	06e300cd 	.word	0x06e300cd
   147ec:	00cd00cd 	.word	0x00cd00cd
   147f0:	00cd00cd 	.word	0x00cd00cd
   147f4:	00cd00cd 	.word	0x00cd00cd
   147f8:	00cd00cd 	.word	0x00cd00cd
   147fc:	00cd0153 	.word	0x00cd0153
   14800:	01de0183 	.word	0x01de0183
   14804:	01530153 	.word	0x01530153
   14808:	02770153 	.word	0x02770153
   1480c:	007f01de 	.word	0x007f01de
   14810:	028900cd 	.word	0x028900cd
   14814:	025f00cd 	.word	0x025f00cd
   14818:	022f06e0 	.word	0x022f06e0
   1481c:	00cd007f 	.word	0x00cd007f
   14820:	007c01ab 	.word	0x007c01ab
   14824:	00cd06b8 	.word	0x00cd06b8
   14828:	06bd00cd 	.word	0x06bd00cd
   1482c:	007c00cd 	.word	0x007c00cd
   14830:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14834:	2100      	movs	r1, #0
   14836:	f819 3b01 	ldrb.w	r3, [r9], #1
   1483a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1483e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   14842:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14846:	2a09      	cmp	r2, #9
   14848:	d9f5      	bls.n	14836 <_svfprintf_r+0x186>
   1484a:	9106      	str	r1, [sp, #24]
   1484c:	e78e      	b.n	1476c <_svfprintf_r+0xbc>
   1484e:	4658      	mov	r0, fp
   14850:	f003 fa94 	bl	17d7c <_localeconv_r>
   14854:	6843      	ldr	r3, [r0, #4]
   14856:	9315      	str	r3, [sp, #84]	; 0x54
   14858:	4618      	mov	r0, r3
   1485a:	f7fe fb51 	bl	12f00 <strlen>
   1485e:	9016      	str	r0, [sp, #88]	; 0x58
   14860:	4658      	mov	r0, fp
   14862:	f003 fa8b 	bl	17d7c <_localeconv_r>
   14866:	6883      	ldr	r3, [r0, #8]
   14868:	9313      	str	r3, [sp, #76]	; 0x4c
   1486a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1486c:	2b00      	cmp	r3, #0
   1486e:	f040 862d 	bne.w	154cc <_svfprintf_r+0xe1c>
   14872:	f899 3000 	ldrb.w	r3, [r9]
   14876:	e777      	b.n	14768 <_svfprintf_r+0xb8>
   14878:	f899 3000 	ldrb.w	r3, [r9]
   1487c:	f048 0820 	orr.w	r8, r8, #32
   14880:	e772      	b.n	14768 <_svfprintf_r+0xb8>
   14882:	2208      	movs	r2, #8
   14884:	2100      	movs	r1, #0
   14886:	4638      	mov	r0, r7
   14888:	f7fd ff52 	bl	12730 <memset>
   1488c:	2301      	movs	r3, #1
   1488e:	4499      	add	r9, r3
   14890:	e741      	b.n	14716 <_svfprintf_r+0x66>
   14892:	ebb9 0504 	subs.w	r5, r9, r4
   14896:	4606      	mov	r6, r0
   14898:	d011      	beq.n	148be <_svfprintf_r+0x20e>
   1489a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1489c:	442b      	add	r3, r5
   1489e:	9326      	str	r3, [sp, #152]	; 0x98
   148a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   148a2:	3301      	adds	r3, #1
   148a4:	2b07      	cmp	r3, #7
   148a6:	e9ca 4500 	strd	r4, r5, [sl]
   148aa:	9325      	str	r3, [sp, #148]	; 0x94
   148ac:	dc1c      	bgt.n	148e8 <_svfprintf_r+0x238>
   148ae:	f10a 0a08 	add.w	sl, sl, #8
   148b2:	9b04      	ldr	r3, [sp, #16]
   148b4:	442b      	add	r3, r5
   148b6:	9304      	str	r3, [sp, #16]
   148b8:	2e00      	cmp	r6, #0
   148ba:	f47f af47 	bne.w	1474c <_svfprintf_r+0x9c>
   148be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   148c0:	2b00      	cmp	r3, #0
   148c2:	f041 820b 	bne.w	15cdc <_svfprintf_r+0x162c>
   148c6:	ee1b 3a10 	vmov	r3, s22
   148ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   148ce:	f013 0f40 	tst.w	r3, #64	; 0x40
   148d2:	9b04      	ldr	r3, [sp, #16]
   148d4:	bf18      	it	ne
   148d6:	f04f 33ff 	movne.w	r3, #4294967295
   148da:	9304      	str	r3, [sp, #16]
   148dc:	9804      	ldr	r0, [sp, #16]
   148de:	b051      	add	sp, #324	; 0x144
   148e0:	ecbd 8b08 	vpop	{d8-d11}
   148e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148e8:	ee1b 1a10 	vmov	r1, s22
   148ec:	aa24      	add	r2, sp, #144	; 0x90
   148ee:	4658      	mov	r0, fp
   148f0:	f004 fd6a 	bl	193c8 <__ssprint_r>
   148f4:	2800      	cmp	r0, #0
   148f6:	d1e6      	bne.n	148c6 <_svfprintf_r+0x216>
   148f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   148fc:	e7d9      	b.n	148b2 <_svfprintf_r+0x202>
   148fe:	bf00      	nop
	...
   14908:	ffffffff 	.word	0xffffffff
   1490c:	7fefffff 	.word	0x7fefffff
   14910:	20008e4c 	.word	0x20008e4c
   14914:	930b      	str	r3, [sp, #44]	; 0x2c
   14916:	2b00      	cmp	r3, #0
   14918:	d0d1      	beq.n	148be <_svfprintf_r+0x20e>
   1491a:	2100      	movs	r1, #0
   1491c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   14920:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   14924:	2301      	movs	r3, #1
   14926:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   1492a:	9302      	str	r3, [sp, #8]
   1492c:	9107      	str	r1, [sp, #28]
   1492e:	9305      	str	r3, [sp, #20]
   14930:	9103      	str	r1, [sp, #12]
   14932:	910f      	str	r1, [sp, #60]	; 0x3c
   14934:	ac37      	add	r4, sp, #220	; 0xdc
   14936:	f018 0302 	ands.w	r3, r8, #2
   1493a:	9309      	str	r3, [sp, #36]	; 0x24
   1493c:	d002      	beq.n	14944 <_svfprintf_r+0x294>
   1493e:	9b02      	ldr	r3, [sp, #8]
   14940:	3302      	adds	r3, #2
   14942:	9302      	str	r3, [sp, #8]
   14944:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   14948:	930a      	str	r3, [sp, #40]	; 0x28
   1494a:	d105      	bne.n	14958 <_svfprintf_r+0x2a8>
   1494c:	9b06      	ldr	r3, [sp, #24]
   1494e:	9a02      	ldr	r2, [sp, #8]
   14950:	1a9d      	subs	r5, r3, r2
   14952:	2d00      	cmp	r5, #0
   14954:	f300 8369 	bgt.w	1502a <_svfprintf_r+0x97a>
   14958:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1495a:	b189      	cbz	r1, 14980 <_svfprintf_r+0x2d0>
   1495c:	9925      	ldr	r1, [sp, #148]	; 0x94
   1495e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   14962:	3101      	adds	r1, #1
   14964:	3201      	adds	r2, #1
   14966:	f8ca 0000 	str.w	r0, [sl]
   1496a:	2907      	cmp	r1, #7
   1496c:	f04f 0001 	mov.w	r0, #1
   14970:	9226      	str	r2, [sp, #152]	; 0x98
   14972:	9125      	str	r1, [sp, #148]	; 0x94
   14974:	f8ca 0004 	str.w	r0, [sl, #4]
   14978:	f300 83a2 	bgt.w	150c0 <_svfprintf_r+0xa10>
   1497c:	f10a 0a08 	add.w	sl, sl, #8
   14980:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14982:	b183      	cbz	r3, 149a6 <_svfprintf_r+0x2f6>
   14984:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14986:	a91a      	add	r1, sp, #104	; 0x68
   14988:	3301      	adds	r3, #1
   1498a:	3202      	adds	r2, #2
   1498c:	f8ca 1000 	str.w	r1, [sl]
   14990:	2b07      	cmp	r3, #7
   14992:	f04f 0102 	mov.w	r1, #2
   14996:	9226      	str	r2, [sp, #152]	; 0x98
   14998:	9325      	str	r3, [sp, #148]	; 0x94
   1499a:	f8ca 1004 	str.w	r1, [sl, #4]
   1499e:	f300 83a3 	bgt.w	150e8 <_svfprintf_r+0xa38>
   149a2:	f10a 0a08 	add.w	sl, sl, #8
   149a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   149a8:	2b80      	cmp	r3, #128	; 0x80
   149aa:	f000 826c 	beq.w	14e86 <_svfprintf_r+0x7d6>
   149ae:	9b03      	ldr	r3, [sp, #12]
   149b0:	9905      	ldr	r1, [sp, #20]
   149b2:	1a5d      	subs	r5, r3, r1
   149b4:	2d00      	cmp	r5, #0
   149b6:	f300 82a5 	bgt.w	14f04 <_svfprintf_r+0x854>
   149ba:	f418 7f80 	tst.w	r8, #256	; 0x100
   149be:	f040 820d 	bne.w	14ddc <_svfprintf_r+0x72c>
   149c2:	9b05      	ldr	r3, [sp, #20]
   149c4:	f8ca 3004 	str.w	r3, [sl, #4]
   149c8:	441a      	add	r2, r3
   149ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   149cc:	f8ca 4000 	str.w	r4, [sl]
   149d0:	3301      	adds	r3, #1
   149d2:	2b07      	cmp	r3, #7
   149d4:	9226      	str	r2, [sp, #152]	; 0x98
   149d6:	9325      	str	r3, [sp, #148]	; 0x94
   149d8:	f300 831b 	bgt.w	15012 <_svfprintf_r+0x962>
   149dc:	f10a 0a08 	add.w	sl, sl, #8
   149e0:	f018 0f04 	tst.w	r8, #4
   149e4:	d005      	beq.n	149f2 <_svfprintf_r+0x342>
   149e6:	9b06      	ldr	r3, [sp, #24]
   149e8:	9902      	ldr	r1, [sp, #8]
   149ea:	1a5c      	subs	r4, r3, r1
   149ec:	2c00      	cmp	r4, #0
   149ee:	f300 8388 	bgt.w	15102 <_svfprintf_r+0xa52>
   149f2:	9b04      	ldr	r3, [sp, #16]
   149f4:	9906      	ldr	r1, [sp, #24]
   149f6:	9802      	ldr	r0, [sp, #8]
   149f8:	4281      	cmp	r1, r0
   149fa:	bfac      	ite	ge
   149fc:	185b      	addge	r3, r3, r1
   149fe:	181b      	addlt	r3, r3, r0
   14a00:	9304      	str	r3, [sp, #16]
   14a02:	2a00      	cmp	r2, #0
   14a04:	f040 82b0 	bne.w	14f68 <_svfprintf_r+0x8b8>
   14a08:	2300      	movs	r3, #0
   14a0a:	9325      	str	r3, [sp, #148]	; 0x94
   14a0c:	9b07      	ldr	r3, [sp, #28]
   14a0e:	b11b      	cbz	r3, 14a18 <_svfprintf_r+0x368>
   14a10:	9907      	ldr	r1, [sp, #28]
   14a12:	4658      	mov	r0, fp
   14a14:	f7fe fb86 	bl	13124 <_free_r>
   14a18:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14a1c:	464c      	mov	r4, r9
   14a1e:	e679      	b.n	14714 <_svfprintf_r+0x64>
   14a20:	930b      	str	r3, [sp, #44]	; 0x2c
   14a22:	9b08      	ldr	r3, [sp, #32]
   14a24:	3307      	adds	r3, #7
   14a26:	f023 0307 	bic.w	r3, r3, #7
   14a2a:	ecb3 8b02 	vldmia	r3!, {d8}
   14a2e:	eeb0 7bc8 	vabs.f64	d7, d8
   14a32:	eeb4 7b49 	vcmp.f64	d7, d9
   14a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a3a:	9308      	str	r3, [sp, #32]
   14a3c:	f340 84e9 	ble.w	15412 <_svfprintf_r+0xd62>
   14a40:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   14a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a48:	f101 8059 	bmi.w	15afe <_svfprintf_r+0x144e>
   14a4c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14a50:	4cab      	ldr	r4, [pc, #684]	; (14d00 <_svfprintf_r+0x650>)
   14a52:	4bac      	ldr	r3, [pc, #688]	; (14d04 <_svfprintf_r+0x654>)
   14a54:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   14a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14a5a:	2a47      	cmp	r2, #71	; 0x47
   14a5c:	bfc8      	it	gt
   14a5e:	461c      	movgt	r4, r3
   14a60:	2300      	movs	r3, #0
   14a62:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14a66:	2203      	movs	r2, #3
   14a68:	9307      	str	r3, [sp, #28]
   14a6a:	9202      	str	r2, [sp, #8]
   14a6c:	9205      	str	r2, [sp, #20]
   14a6e:	9303      	str	r3, [sp, #12]
   14a70:	930f      	str	r3, [sp, #60]	; 0x3c
   14a72:	2900      	cmp	r1, #0
   14a74:	f43f af5f 	beq.w	14936 <_svfprintf_r+0x286>
   14a78:	9b02      	ldr	r3, [sp, #8]
   14a7a:	3301      	adds	r3, #1
   14a7c:	9302      	str	r3, [sp, #8]
   14a7e:	e75a      	b.n	14936 <_svfprintf_r+0x286>
   14a80:	2b43      	cmp	r3, #67	; 0x43
   14a82:	930b      	str	r3, [sp, #44]	; 0x2c
   14a84:	d003      	beq.n	14a8e <_svfprintf_r+0x3de>
   14a86:	f018 0f10 	tst.w	r8, #16
   14a8a:	f000 855d 	beq.w	15548 <_svfprintf_r+0xe98>
   14a8e:	9d08      	ldr	r5, [sp, #32]
   14a90:	2208      	movs	r2, #8
   14a92:	2100      	movs	r1, #0
   14a94:	a822      	add	r0, sp, #136	; 0x88
   14a96:	ac37      	add	r4, sp, #220	; 0xdc
   14a98:	f7fd fe4a 	bl	12730 <memset>
   14a9c:	ab22      	add	r3, sp, #136	; 0x88
   14a9e:	f855 2b04 	ldr.w	r2, [r5], #4
   14aa2:	4621      	mov	r1, r4
   14aa4:	4658      	mov	r0, fp
   14aa6:	f004 fb65 	bl	19174 <_wcrtomb_r>
   14aaa:	4603      	mov	r3, r0
   14aac:	3301      	adds	r3, #1
   14aae:	9005      	str	r0, [sp, #20]
   14ab0:	f001 82ee 	beq.w	16090 <_svfprintf_r+0x19e0>
   14ab4:	9b05      	ldr	r3, [sp, #20]
   14ab6:	9508      	str	r5, [sp, #32]
   14ab8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14abc:	9302      	str	r3, [sp, #8]
   14abe:	2100      	movs	r1, #0
   14ac0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   14ac4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   14ac8:	9107      	str	r1, [sp, #28]
   14aca:	9103      	str	r1, [sp, #12]
   14acc:	910f      	str	r1, [sp, #60]	; 0x3c
   14ace:	e732      	b.n	14936 <_svfprintf_r+0x286>
   14ad0:	930b      	str	r3, [sp, #44]	; 0x2c
   14ad2:	9b08      	ldr	r3, [sp, #32]
   14ad4:	461a      	mov	r2, r3
   14ad6:	2300      	movs	r3, #0
   14ad8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   14adc:	4613      	mov	r3, r2
   14ade:	f853 4b04 	ldr.w	r4, [r3], #4
   14ae2:	9308      	str	r3, [sp, #32]
   14ae4:	2c00      	cmp	r4, #0
   14ae6:	f000 8548 	beq.w	1557a <_svfprintf_r+0xeca>
   14aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14aec:	2b53      	cmp	r3, #83	; 0x53
   14aee:	f000 86ec 	beq.w	158ca <_svfprintf_r+0x121a>
   14af2:	f018 0310 	ands.w	r3, r8, #16
   14af6:	930c      	str	r3, [sp, #48]	; 0x30
   14af8:	f040 86e7 	bne.w	158ca <_svfprintf_r+0x121a>
   14afc:	9b03      	ldr	r3, [sp, #12]
   14afe:	1c5d      	adds	r5, r3, #1
   14b00:	f001 80e5 	beq.w	15cce <_svfprintf_r+0x161e>
   14b04:	990c      	ldr	r1, [sp, #48]	; 0x30
   14b06:	461a      	mov	r2, r3
   14b08:	4620      	mov	r0, r4
   14b0a:	f7fe f9a9 	bl	12e60 <memchr>
   14b0e:	9007      	str	r0, [sp, #28]
   14b10:	2800      	cmp	r0, #0
   14b12:	f001 8328 	beq.w	16166 <_svfprintf_r+0x1ab6>
   14b16:	9b07      	ldr	r3, [sp, #28]
   14b18:	1b1a      	subs	r2, r3, r4
   14b1a:	9205      	str	r2, [sp, #20]
   14b1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14b1e:	9303      	str	r3, [sp, #12]
   14b20:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   14b24:	930f      	str	r3, [sp, #60]	; 0x3c
   14b26:	930d      	str	r3, [sp, #52]	; 0x34
   14b28:	9307      	str	r3, [sp, #28]
   14b2a:	2373      	movs	r3, #115	; 0x73
   14b2c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14b30:	9202      	str	r2, [sp, #8]
   14b32:	930b      	str	r3, [sp, #44]	; 0x2c
   14b34:	e79d      	b.n	14a72 <_svfprintf_r+0x3c2>
   14b36:	f018 0f20 	tst.w	r8, #32
   14b3a:	930b      	str	r3, [sp, #44]	; 0x2c
   14b3c:	9b08      	ldr	r3, [sp, #32]
   14b3e:	d03d      	beq.n	14bbc <_svfprintf_r+0x50c>
   14b40:	3307      	adds	r3, #7
   14b42:	f023 0307 	bic.w	r3, r3, #7
   14b46:	461a      	mov	r2, r3
   14b48:	4611      	mov	r1, r2
   14b4a:	685b      	ldr	r3, [r3, #4]
   14b4c:	f851 2b08 	ldr.w	r2, [r1], #8
   14b50:	9108      	str	r1, [sp, #32]
   14b52:	4619      	mov	r1, r3
   14b54:	2b00      	cmp	r3, #0
   14b56:	f2c0 840c 	blt.w	15372 <_svfprintf_r+0xcc2>
   14b5a:	9b03      	ldr	r3, [sp, #12]
   14b5c:	3301      	adds	r3, #1
   14b5e:	f000 829e 	beq.w	1509e <_svfprintf_r+0x9ee>
   14b62:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   14b66:	ea52 0301 	orrs.w	r3, r2, r1
   14b6a:	9002      	str	r0, [sp, #8]
   14b6c:	f040 8299 	bne.w	150a2 <_svfprintf_r+0x9f2>
   14b70:	9b03      	ldr	r3, [sp, #12]
   14b72:	2b00      	cmp	r3, #0
   14b74:	f040 829a 	bne.w	150ac <_svfprintf_r+0x9fc>
   14b78:	4680      	mov	r8, r0
   14b7a:	2300      	movs	r3, #0
   14b7c:	9303      	str	r3, [sp, #12]
   14b7e:	9305      	str	r3, [sp, #20]
   14b80:	ac50      	add	r4, sp, #320	; 0x140
   14b82:	e106      	b.n	14d92 <_svfprintf_r+0x6e2>
   14b84:	9b08      	ldr	r3, [sp, #32]
   14b86:	f853 2b04 	ldr.w	r2, [r3], #4
   14b8a:	9206      	str	r2, [sp, #24]
   14b8c:	2a00      	cmp	r2, #0
   14b8e:	f280 8419 	bge.w	153c4 <_svfprintf_r+0xd14>
   14b92:	9a06      	ldr	r2, [sp, #24]
   14b94:	9308      	str	r3, [sp, #32]
   14b96:	4252      	negs	r2, r2
   14b98:	9206      	str	r2, [sp, #24]
   14b9a:	f899 3000 	ldrb.w	r3, [r9]
   14b9e:	f048 0804 	orr.w	r8, r8, #4
   14ba2:	e5e1      	b.n	14768 <_svfprintf_r+0xb8>
   14ba4:	f899 3000 	ldrb.w	r3, [r9]
   14ba8:	f048 0808 	orr.w	r8, r8, #8
   14bac:	e5dc      	b.n	14768 <_svfprintf_r+0xb8>
   14bae:	f048 0810 	orr.w	r8, r8, #16
   14bb2:	f018 0f20 	tst.w	r8, #32
   14bb6:	930b      	str	r3, [sp, #44]	; 0x2c
   14bb8:	9b08      	ldr	r3, [sp, #32]
   14bba:	d1c1      	bne.n	14b40 <_svfprintf_r+0x490>
   14bbc:	f018 0f10 	tst.w	r8, #16
   14bc0:	f040 840b 	bne.w	153da <_svfprintf_r+0xd2a>
   14bc4:	f018 0f40 	tst.w	r8, #64	; 0x40
   14bc8:	f000 8403 	beq.w	153d2 <_svfprintf_r+0xd22>
   14bcc:	f933 2b04 	ldrsh.w	r2, [r3], #4
   14bd0:	9308      	str	r3, [sp, #32]
   14bd2:	17d1      	asrs	r1, r2, #31
   14bd4:	460b      	mov	r3, r1
   14bd6:	e7bd      	b.n	14b54 <_svfprintf_r+0x4a4>
   14bd8:	9b08      	ldr	r3, [sp, #32]
   14bda:	f048 0202 	orr.w	r2, r8, #2
   14bde:	9202      	str	r2, [sp, #8]
   14be0:	f853 2b04 	ldr.w	r2, [r3], #4
   14be4:	9308      	str	r3, [sp, #32]
   14be6:	f647 0330 	movw	r3, #30768	; 0x7830
   14bea:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   14bee:	2078      	movs	r0, #120	; 0x78
   14bf0:	4b45      	ldr	r3, [pc, #276]	; (14d08 <_svfprintf_r+0x658>)
   14bf2:	9311      	str	r3, [sp, #68]	; 0x44
   14bf4:	2100      	movs	r1, #0
   14bf6:	2302      	movs	r3, #2
   14bf8:	900b      	str	r0, [sp, #44]	; 0x2c
   14bfa:	2000      	movs	r0, #0
   14bfc:	9c03      	ldr	r4, [sp, #12]
   14bfe:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   14c02:	1c60      	adds	r0, r4, #1
   14c04:	f000 80ad 	beq.w	14d62 <_svfprintf_r+0x6b2>
   14c08:	9802      	ldr	r0, [sp, #8]
   14c0a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   14c0e:	ea52 0001 	orrs.w	r0, r2, r1
   14c12:	f040 80a4 	bne.w	14d5e <_svfprintf_r+0x6ae>
   14c16:	2c00      	cmp	r4, #0
   14c18:	f040 86ae 	bne.w	15978 <_svfprintf_r+0x12c8>
   14c1c:	2b00      	cmp	r3, #0
   14c1e:	d1ac      	bne.n	14b7a <_svfprintf_r+0x4ca>
   14c20:	9b02      	ldr	r3, [sp, #8]
   14c22:	f013 0301 	ands.w	r3, r3, #1
   14c26:	9305      	str	r3, [sp, #20]
   14c28:	f000 83d1 	beq.w	153ce <_svfprintf_r+0xd1e>
   14c2c:	2330      	movs	r3, #48	; 0x30
   14c2e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   14c32:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   14c36:	e0ac      	b.n	14d92 <_svfprintf_r+0x6e2>
   14c38:	f018 0f20 	tst.w	r8, #32
   14c3c:	f040 83d4 	bne.w	153e8 <_svfprintf_r+0xd38>
   14c40:	f018 0f10 	tst.w	r8, #16
   14c44:	f040 869f 	bne.w	15986 <_svfprintf_r+0x12d6>
   14c48:	f018 0f40 	tst.w	r8, #64	; 0x40
   14c4c:	f040 8797 	bne.w	15b7e <_svfprintf_r+0x14ce>
   14c50:	f418 7f00 	tst.w	r8, #512	; 0x200
   14c54:	f000 8697 	beq.w	15986 <_svfprintf_r+0x12d6>
   14c58:	9b08      	ldr	r3, [sp, #32]
   14c5a:	9904      	ldr	r1, [sp, #16]
   14c5c:	f853 2b04 	ldr.w	r2, [r3], #4
   14c60:	9308      	str	r3, [sp, #32]
   14c62:	7011      	strb	r1, [r2, #0]
   14c64:	464c      	mov	r4, r9
   14c66:	e555      	b.n	14714 <_svfprintf_r+0x64>
   14c68:	f899 3000 	ldrb.w	r3, [r9]
   14c6c:	2b68      	cmp	r3, #104	; 0x68
   14c6e:	bf03      	ittte	eq
   14c70:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   14c74:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   14c78:	f109 0901 	addeq.w	r9, r9, #1
   14c7c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   14c80:	e572      	b.n	14768 <_svfprintf_r+0xb8>
   14c82:	f899 3000 	ldrb.w	r3, [r9]
   14c86:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   14c8a:	e56d      	b.n	14768 <_svfprintf_r+0xb8>
   14c8c:	f899 3000 	ldrb.w	r3, [r9]
   14c90:	2b6c      	cmp	r3, #108	; 0x6c
   14c92:	bf03      	ittte	eq
   14c94:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   14c98:	f048 0820 	orreq.w	r8, r8, #32
   14c9c:	f109 0901 	addeq.w	r9, r9, #1
   14ca0:	f048 0810 	orrne.w	r8, r8, #16
   14ca4:	e560      	b.n	14768 <_svfprintf_r+0xb8>
   14ca6:	930b      	str	r3, [sp, #44]	; 0x2c
   14ca8:	f048 0810 	orr.w	r8, r8, #16
   14cac:	f018 0120 	ands.w	r1, r8, #32
   14cb0:	f000 8351 	beq.w	15356 <_svfprintf_r+0xca6>
   14cb4:	9b08      	ldr	r3, [sp, #32]
   14cb6:	3307      	adds	r3, #7
   14cb8:	f023 0307 	bic.w	r3, r3, #7
   14cbc:	6859      	ldr	r1, [r3, #4]
   14cbe:	f853 2b08 	ldr.w	r2, [r3], #8
   14cc2:	9308      	str	r3, [sp, #32]
   14cc4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   14cc8:	9302      	str	r3, [sp, #8]
   14cca:	2300      	movs	r3, #0
   14ccc:	e795      	b.n	14bfa <_svfprintf_r+0x54a>
   14cce:	930b      	str	r3, [sp, #44]	; 0x2c
   14cd0:	f048 0310 	orr.w	r3, r8, #16
   14cd4:	9302      	str	r3, [sp, #8]
   14cd6:	9b02      	ldr	r3, [sp, #8]
   14cd8:	f013 0120 	ands.w	r1, r3, #32
   14cdc:	f000 8329 	beq.w	15332 <_svfprintf_r+0xc82>
   14ce0:	9b08      	ldr	r3, [sp, #32]
   14ce2:	3307      	adds	r3, #7
   14ce4:	f023 0307 	bic.w	r3, r3, #7
   14ce8:	6859      	ldr	r1, [r3, #4]
   14cea:	f853 2b08 	ldr.w	r2, [r3], #8
   14cee:	9308      	str	r3, [sp, #32]
   14cf0:	2301      	movs	r3, #1
   14cf2:	e782      	b.n	14bfa <_svfprintf_r+0x54a>
   14cf4:	f899 3000 	ldrb.w	r3, [r9]
   14cf8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   14cfc:	e534      	b.n	14768 <_svfprintf_r+0xb8>
   14cfe:	bf00      	nop
   14d00:	200010d0 	.word	0x200010d0
   14d04:	20000b88 	.word	0x20000b88
   14d08:	200010d8 	.word	0x200010d8
   14d0c:	4649      	mov	r1, r9
   14d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
   14d12:	2b2a      	cmp	r3, #42	; 0x2a
   14d14:	f001 8249 	beq.w	161aa <_svfprintf_r+0x1afa>
   14d18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14d1c:	2a09      	cmp	r2, #9
   14d1e:	4689      	mov	r9, r1
   14d20:	bf98      	it	ls
   14d22:	2100      	movls	r1, #0
   14d24:	f201 8144 	bhi.w	15fb0 <_svfprintf_r+0x1900>
   14d28:	f819 3b01 	ldrb.w	r3, [r9], #1
   14d2c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   14d30:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   14d34:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14d38:	2a09      	cmp	r2, #9
   14d3a:	d9f5      	bls.n	14d28 <_svfprintf_r+0x678>
   14d3c:	9103      	str	r1, [sp, #12]
   14d3e:	e515      	b.n	1476c <_svfprintf_r+0xbc>
   14d40:	f899 3000 	ldrb.w	r3, [r9]
   14d44:	f048 0801 	orr.w	r8, r8, #1
   14d48:	e50e      	b.n	14768 <_svfprintf_r+0xb8>
   14d4a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   14d4e:	2b00      	cmp	r3, #0
   14d50:	f47f ad8f 	bne.w	14872 <_svfprintf_r+0x1c2>
   14d54:	f899 3000 	ldrb.w	r3, [r9]
   14d58:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   14d5c:	e504      	b.n	14768 <_svfprintf_r+0xb8>
   14d5e:	f8cd 8008 	str.w	r8, [sp, #8]
   14d62:	2b01      	cmp	r3, #1
   14d64:	f000 819d 	beq.w	150a2 <_svfprintf_r+0x9f2>
   14d68:	2b02      	cmp	r3, #2
   14d6a:	ac50      	add	r4, sp, #320	; 0x140
   14d6c:	d120      	bne.n	14db0 <_svfprintf_r+0x700>
   14d6e:	9811      	ldr	r0, [sp, #68]	; 0x44
   14d70:	f002 030f 	and.w	r3, r2, #15
   14d74:	0912      	lsrs	r2, r2, #4
   14d76:	5cc3      	ldrb	r3, [r0, r3]
   14d78:	f804 3d01 	strb.w	r3, [r4, #-1]!
   14d7c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   14d80:	0909      	lsrs	r1, r1, #4
   14d82:	ea52 0301 	orrs.w	r3, r2, r1
   14d86:	d1f3      	bne.n	14d70 <_svfprintf_r+0x6c0>
   14d88:	ab50      	add	r3, sp, #320	; 0x140
   14d8a:	1b1b      	subs	r3, r3, r4
   14d8c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14d90:	9305      	str	r3, [sp, #20]
   14d92:	9a05      	ldr	r2, [sp, #20]
   14d94:	9803      	ldr	r0, [sp, #12]
   14d96:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14d9a:	4282      	cmp	r2, r0
   14d9c:	f04f 0300 	mov.w	r3, #0
   14da0:	bfb8      	it	lt
   14da2:	4602      	movlt	r2, r0
   14da4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14da8:	9307      	str	r3, [sp, #28]
   14daa:	9202      	str	r2, [sp, #8]
   14dac:	930f      	str	r3, [sp, #60]	; 0x3c
   14dae:	e660      	b.n	14a72 <_svfprintf_r+0x3c2>
   14db0:	f002 0307 	and.w	r3, r2, #7
   14db4:	08d2      	lsrs	r2, r2, #3
   14db6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   14dba:	08c9      	lsrs	r1, r1, #3
   14dbc:	3330      	adds	r3, #48	; 0x30
   14dbe:	ea52 0501 	orrs.w	r5, r2, r1
   14dc2:	4620      	mov	r0, r4
   14dc4:	f804 3d01 	strb.w	r3, [r4, #-1]!
   14dc8:	d1f2      	bne.n	14db0 <_svfprintf_r+0x700>
   14dca:	9a02      	ldr	r2, [sp, #8]
   14dcc:	07d1      	lsls	r1, r2, #31
   14dce:	f100 824d 	bmi.w	1526c <_svfprintf_r+0xbbc>
   14dd2:	ab50      	add	r3, sp, #320	; 0x140
   14dd4:	1b1b      	subs	r3, r3, r4
   14dd6:	4690      	mov	r8, r2
   14dd8:	9305      	str	r3, [sp, #20]
   14dda:	e7da      	b.n	14d92 <_svfprintf_r+0x6e2>
   14ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14dde:	2b65      	cmp	r3, #101	; 0x65
   14de0:	f340 80d4 	ble.w	14f8c <_svfprintf_r+0x8dc>
   14de4:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14dec:	f040 81c1 	bne.w	15172 <_svfprintf_r+0xac2>
   14df0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14df2:	49ba      	ldr	r1, [pc, #744]	; (150dc <_svfprintf_r+0xa2c>)
   14df4:	f8ca 1000 	str.w	r1, [sl]
   14df8:	3301      	adds	r3, #1
   14dfa:	3201      	adds	r2, #1
   14dfc:	2101      	movs	r1, #1
   14dfe:	2b07      	cmp	r3, #7
   14e00:	9226      	str	r2, [sp, #152]	; 0x98
   14e02:	9325      	str	r3, [sp, #148]	; 0x94
   14e04:	f8ca 1004 	str.w	r1, [sl, #4]
   14e08:	f300 8551 	bgt.w	158ae <_svfprintf_r+0x11fe>
   14e0c:	f10a 0a08 	add.w	sl, sl, #8
   14e10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14e12:	990e      	ldr	r1, [sp, #56]	; 0x38
   14e14:	428b      	cmp	r3, r1
   14e16:	f280 82d0 	bge.w	153ba <_svfprintf_r+0xd0a>
   14e1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14e1c:	9912      	ldr	r1, [sp, #72]	; 0x48
   14e1e:	441a      	add	r2, r3
   14e20:	e9ca 1300 	strd	r1, r3, [sl]
   14e24:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14e26:	9226      	str	r2, [sp, #152]	; 0x98
   14e28:	3301      	adds	r3, #1
   14e2a:	2b07      	cmp	r3, #7
   14e2c:	9325      	str	r3, [sp, #148]	; 0x94
   14e2e:	f300 8397 	bgt.w	15560 <_svfprintf_r+0xeb0>
   14e32:	f10a 0a08 	add.w	sl, sl, #8
   14e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14e38:	1e5c      	subs	r4, r3, #1
   14e3a:	2c00      	cmp	r4, #0
   14e3c:	f77f add0 	ble.w	149e0 <_svfprintf_r+0x330>
   14e40:	2c10      	cmp	r4, #16
   14e42:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14e44:	f340 856e 	ble.w	15924 <_svfprintf_r+0x1274>
   14e48:	ee1b 6a10 	vmov	r6, s22
   14e4c:	2510      	movs	r5, #16
   14e4e:	e005      	b.n	14e5c <_svfprintf_r+0x7ac>
   14e50:	f10a 0a08 	add.w	sl, sl, #8
   14e54:	3c10      	subs	r4, #16
   14e56:	2c10      	cmp	r4, #16
   14e58:	f340 8564 	ble.w	15924 <_svfprintf_r+0x1274>
   14e5c:	3301      	adds	r3, #1
   14e5e:	49a0      	ldr	r1, [pc, #640]	; (150e0 <_svfprintf_r+0xa30>)
   14e60:	3210      	adds	r2, #16
   14e62:	2b07      	cmp	r3, #7
   14e64:	e9ca 1500 	strd	r1, r5, [sl]
   14e68:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14e6c:	ddf0      	ble.n	14e50 <_svfprintf_r+0x7a0>
   14e6e:	aa24      	add	r2, sp, #144	; 0x90
   14e70:	4631      	mov	r1, r6
   14e72:	4658      	mov	r0, fp
   14e74:	f004 faa8 	bl	193c8 <__ssprint_r>
   14e78:	2800      	cmp	r0, #0
   14e7a:	d17e      	bne.n	14f7a <_svfprintf_r+0x8ca>
   14e7c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14e80:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14e84:	e7e6      	b.n	14e54 <_svfprintf_r+0x7a4>
   14e86:	9b06      	ldr	r3, [sp, #24]
   14e88:	9902      	ldr	r1, [sp, #8]
   14e8a:	1a5d      	subs	r5, r3, r1
   14e8c:	2d00      	cmp	r5, #0
   14e8e:	f77f ad8e 	ble.w	149ae <_svfprintf_r+0x2fe>
   14e92:	2d10      	cmp	r5, #16
   14e94:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14e96:	dd21      	ble.n	14edc <_svfprintf_r+0x82c>
   14e98:	9409      	str	r4, [sp, #36]	; 0x24
   14e9a:	2610      	movs	r6, #16
   14e9c:	ee1b 4a10 	vmov	r4, s22
   14ea0:	e004      	b.n	14eac <_svfprintf_r+0x7fc>
   14ea2:	3d10      	subs	r5, #16
   14ea4:	2d10      	cmp	r5, #16
   14ea6:	f10a 0a08 	add.w	sl, sl, #8
   14eaa:	dd16      	ble.n	14eda <_svfprintf_r+0x82a>
   14eac:	3301      	adds	r3, #1
   14eae:	498c      	ldr	r1, [pc, #560]	; (150e0 <_svfprintf_r+0xa30>)
   14eb0:	3210      	adds	r2, #16
   14eb2:	2b07      	cmp	r3, #7
   14eb4:	e9ca 1600 	strd	r1, r6, [sl]
   14eb8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14ebc:	ddf1      	ble.n	14ea2 <_svfprintf_r+0x7f2>
   14ebe:	aa24      	add	r2, sp, #144	; 0x90
   14ec0:	4621      	mov	r1, r4
   14ec2:	4658      	mov	r0, fp
   14ec4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14ec8:	f004 fa7e 	bl	193c8 <__ssprint_r>
   14ecc:	2800      	cmp	r0, #0
   14ece:	d154      	bne.n	14f7a <_svfprintf_r+0x8ca>
   14ed0:	3d10      	subs	r5, #16
   14ed2:	2d10      	cmp	r5, #16
   14ed4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14ed8:	dce8      	bgt.n	14eac <_svfprintf_r+0x7fc>
   14eda:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14edc:	4980      	ldr	r1, [pc, #512]	; (150e0 <_svfprintf_r+0xa30>)
   14ede:	f8ca 5004 	str.w	r5, [sl, #4]
   14ee2:	3301      	adds	r3, #1
   14ee4:	442a      	add	r2, r5
   14ee6:	2b07      	cmp	r3, #7
   14ee8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14eec:	f8ca 1000 	str.w	r1, [sl]
   14ef0:	f300 8526 	bgt.w	15940 <_svfprintf_r+0x1290>
   14ef4:	9b03      	ldr	r3, [sp, #12]
   14ef6:	9905      	ldr	r1, [sp, #20]
   14ef8:	1a5d      	subs	r5, r3, r1
   14efa:	2d00      	cmp	r5, #0
   14efc:	f10a 0a08 	add.w	sl, sl, #8
   14f00:	f77f ad5b 	ble.w	149ba <_svfprintf_r+0x30a>
   14f04:	2d10      	cmp	r5, #16
   14f06:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14f08:	dd1f      	ble.n	14f4a <_svfprintf_r+0x89a>
   14f0a:	4651      	mov	r1, sl
   14f0c:	2610      	movs	r6, #16
   14f0e:	ee1b aa10 	vmov	sl, s22
   14f12:	e004      	b.n	14f1e <_svfprintf_r+0x86e>
   14f14:	3d10      	subs	r5, #16
   14f16:	2d10      	cmp	r5, #16
   14f18:	f101 0108 	add.w	r1, r1, #8
   14f1c:	dd14      	ble.n	14f48 <_svfprintf_r+0x898>
   14f1e:	3301      	adds	r3, #1
   14f20:	486f      	ldr	r0, [pc, #444]	; (150e0 <_svfprintf_r+0xa30>)
   14f22:	3210      	adds	r2, #16
   14f24:	2b07      	cmp	r3, #7
   14f26:	e9c1 0600 	strd	r0, r6, [r1]
   14f2a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14f2e:	ddf1      	ble.n	14f14 <_svfprintf_r+0x864>
   14f30:	aa24      	add	r2, sp, #144	; 0x90
   14f32:	4651      	mov	r1, sl
   14f34:	4658      	mov	r0, fp
   14f36:	f004 fa47 	bl	193c8 <__ssprint_r>
   14f3a:	b9f0      	cbnz	r0, 14f7a <_svfprintf_r+0x8ca>
   14f3c:	3d10      	subs	r5, #16
   14f3e:	2d10      	cmp	r5, #16
   14f40:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14f44:	a927      	add	r1, sp, #156	; 0x9c
   14f46:	dcea      	bgt.n	14f1e <_svfprintf_r+0x86e>
   14f48:	468a      	mov	sl, r1
   14f4a:	3301      	adds	r3, #1
   14f4c:	4964      	ldr	r1, [pc, #400]	; (150e0 <_svfprintf_r+0xa30>)
   14f4e:	f8ca 5004 	str.w	r5, [sl, #4]
   14f52:	442a      	add	r2, r5
   14f54:	2b07      	cmp	r3, #7
   14f56:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14f5a:	f8ca 1000 	str.w	r1, [sl]
   14f5e:	f300 81da 	bgt.w	15316 <_svfprintf_r+0xc66>
   14f62:	f10a 0a08 	add.w	sl, sl, #8
   14f66:	e528      	b.n	149ba <_svfprintf_r+0x30a>
   14f68:	ee1b 1a10 	vmov	r1, s22
   14f6c:	aa24      	add	r2, sp, #144	; 0x90
   14f6e:	4658      	mov	r0, fp
   14f70:	f004 fa2a 	bl	193c8 <__ssprint_r>
   14f74:	2800      	cmp	r0, #0
   14f76:	f43f ad47 	beq.w	14a08 <_svfprintf_r+0x358>
   14f7a:	9b07      	ldr	r3, [sp, #28]
   14f7c:	2b00      	cmp	r3, #0
   14f7e:	f43f aca2 	beq.w	148c6 <_svfprintf_r+0x216>
   14f82:	9907      	ldr	r1, [sp, #28]
   14f84:	4658      	mov	r0, fp
   14f86:	f7fe f8cd 	bl	13124 <_free_r>
   14f8a:	e49c      	b.n	148c6 <_svfprintf_r+0x216>
   14f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14f8e:	2b01      	cmp	r3, #1
   14f90:	f340 817a 	ble.w	15288 <_svfprintf_r+0xbd8>
   14f94:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14f96:	f8ca 4000 	str.w	r4, [sl]
   14f9a:	3301      	adds	r3, #1
   14f9c:	3201      	adds	r2, #1
   14f9e:	2101      	movs	r1, #1
   14fa0:	2b07      	cmp	r3, #7
   14fa2:	9226      	str	r2, [sp, #152]	; 0x98
   14fa4:	9325      	str	r3, [sp, #148]	; 0x94
   14fa6:	f8ca 1004 	str.w	r1, [sl, #4]
   14faa:	f300 81f8 	bgt.w	1539e <_svfprintf_r+0xcee>
   14fae:	f10a 0a08 	add.w	sl, sl, #8
   14fb2:	9910      	ldr	r1, [sp, #64]	; 0x40
   14fb4:	9812      	ldr	r0, [sp, #72]	; 0x48
   14fb6:	3301      	adds	r3, #1
   14fb8:	440a      	add	r2, r1
   14fba:	2b07      	cmp	r3, #7
   14fbc:	e9ca 0100 	strd	r0, r1, [sl]
   14fc0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14fc4:	f300 81dd 	bgt.w	15382 <_svfprintf_r+0xcd2>
   14fc8:	f10a 0a08 	add.w	sl, sl, #8
   14fcc:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14fd4:	f000 8177 	beq.w	152c6 <_svfprintf_r+0xc16>
   14fd8:	990e      	ldr	r1, [sp, #56]	; 0x38
   14fda:	3301      	adds	r3, #1
   14fdc:	3901      	subs	r1, #1
   14fde:	3401      	adds	r4, #1
   14fe0:	440a      	add	r2, r1
   14fe2:	2b07      	cmp	r3, #7
   14fe4:	f8ca 4000 	str.w	r4, [sl]
   14fe8:	9325      	str	r3, [sp, #148]	; 0x94
   14fea:	f8ca 1004 	str.w	r1, [sl, #4]
   14fee:	9226      	str	r2, [sp, #152]	; 0x98
   14ff0:	f300 815b 	bgt.w	152aa <_svfprintf_r+0xbfa>
   14ff4:	f10a 0a08 	add.w	sl, sl, #8
   14ff8:	9914      	ldr	r1, [sp, #80]	; 0x50
   14ffa:	f8ca 1004 	str.w	r1, [sl, #4]
   14ffe:	3301      	adds	r3, #1
   15000:	440a      	add	r2, r1
   15002:	2b07      	cmp	r3, #7
   15004:	a91e      	add	r1, sp, #120	; 0x78
   15006:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1500a:	f8ca 1000 	str.w	r1, [sl]
   1500e:	f77f ace5 	ble.w	149dc <_svfprintf_r+0x32c>
   15012:	ee1b 1a10 	vmov	r1, s22
   15016:	aa24      	add	r2, sp, #144	; 0x90
   15018:	4658      	mov	r0, fp
   1501a:	f004 f9d5 	bl	193c8 <__ssprint_r>
   1501e:	2800      	cmp	r0, #0
   15020:	d1ab      	bne.n	14f7a <_svfprintf_r+0x8ca>
   15022:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15024:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15028:	e4da      	b.n	149e0 <_svfprintf_r+0x330>
   1502a:	2d10      	cmp	r5, #16
   1502c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   15030:	4e2c      	ldr	r6, [pc, #176]	; (150e4 <_svfprintf_r+0xa34>)
   15032:	dd24      	ble.n	1507e <_svfprintf_r+0x9ce>
   15034:	9417      	str	r4, [sp, #92]	; 0x5c
   15036:	2310      	movs	r3, #16
   15038:	ee1b 4a10 	vmov	r4, s22
   1503c:	4608      	mov	r0, r1
   1503e:	e004      	b.n	1504a <_svfprintf_r+0x99a>
   15040:	3d10      	subs	r5, #16
   15042:	2d10      	cmp	r5, #16
   15044:	f10a 0a08 	add.w	sl, sl, #8
   15048:	dd17      	ble.n	1507a <_svfprintf_r+0x9ca>
   1504a:	3001      	adds	r0, #1
   1504c:	3210      	adds	r2, #16
   1504e:	2807      	cmp	r0, #7
   15050:	e9ca 6300 	strd	r6, r3, [sl]
   15054:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   15058:	ddf2      	ble.n	15040 <_svfprintf_r+0x990>
   1505a:	aa24      	add	r2, sp, #144	; 0x90
   1505c:	4621      	mov	r1, r4
   1505e:	4658      	mov	r0, fp
   15060:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15064:	f004 f9b0 	bl	193c8 <__ssprint_r>
   15068:	2800      	cmp	r0, #0
   1506a:	d186      	bne.n	14f7a <_svfprintf_r+0x8ca>
   1506c:	3d10      	subs	r5, #16
   1506e:	2d10      	cmp	r5, #16
   15070:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   15074:	f04f 0310 	mov.w	r3, #16
   15078:	dce7      	bgt.n	1504a <_svfprintf_r+0x99a>
   1507a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   1507c:	4601      	mov	r1, r0
   1507e:	3101      	adds	r1, #1
   15080:	442a      	add	r2, r5
   15082:	2907      	cmp	r1, #7
   15084:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   15088:	f8ca 6000 	str.w	r6, [sl]
   1508c:	f8ca 5004 	str.w	r5, [sl, #4]
   15090:	f300 83bd 	bgt.w	1580e <_svfprintf_r+0x115e>
   15094:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15098:	f10a 0a08 	add.w	sl, sl, #8
   1509c:	e45d      	b.n	1495a <_svfprintf_r+0x2aa>
   1509e:	f8cd 8008 	str.w	r8, [sp, #8]
   150a2:	2a0a      	cmp	r2, #10
   150a4:	f171 0300 	sbcs.w	r3, r1, #0
   150a8:	f080 8345 	bcs.w	15736 <_svfprintf_r+0x1086>
   150ac:	3230      	adds	r2, #48	; 0x30
   150ae:	2301      	movs	r3, #1
   150b0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   150b4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   150b8:	9305      	str	r3, [sp, #20]
   150ba:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   150be:	e668      	b.n	14d92 <_svfprintf_r+0x6e2>
   150c0:	ee1b 1a10 	vmov	r1, s22
   150c4:	aa24      	add	r2, sp, #144	; 0x90
   150c6:	4658      	mov	r0, fp
   150c8:	f004 f97e 	bl	193c8 <__ssprint_r>
   150cc:	2800      	cmp	r0, #0
   150ce:	f47f af54 	bne.w	14f7a <_svfprintf_r+0x8ca>
   150d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   150d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   150d8:	e452      	b.n	14980 <_svfprintf_r+0x2d0>
   150da:	bf00      	nop
   150dc:	20007eb4 	.word	0x20007eb4
   150e0:	20008920 	.word	0x20008920
   150e4:	20002b80 	.word	0x20002b80
   150e8:	ee1b 1a10 	vmov	r1, s22
   150ec:	aa24      	add	r2, sp, #144	; 0x90
   150ee:	4658      	mov	r0, fp
   150f0:	f004 f96a 	bl	193c8 <__ssprint_r>
   150f4:	2800      	cmp	r0, #0
   150f6:	f47f af40 	bne.w	14f7a <_svfprintf_r+0x8ca>
   150fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
   150fc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15100:	e451      	b.n	149a6 <_svfprintf_r+0x2f6>
   15102:	2c10      	cmp	r4, #16
   15104:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15106:	4ebe      	ldr	r6, [pc, #760]	; (15400 <_svfprintf_r+0xd50>)
   15108:	dd1f      	ble.n	1514a <_svfprintf_r+0xa9a>
   1510a:	ee1b 8a10 	vmov	r8, s22
   1510e:	2510      	movs	r5, #16
   15110:	e004      	b.n	1511c <_svfprintf_r+0xa6c>
   15112:	3c10      	subs	r4, #16
   15114:	2c10      	cmp	r4, #16
   15116:	f10a 0a08 	add.w	sl, sl, #8
   1511a:	dd16      	ble.n	1514a <_svfprintf_r+0xa9a>
   1511c:	3301      	adds	r3, #1
   1511e:	3210      	adds	r2, #16
   15120:	2b07      	cmp	r3, #7
   15122:	e9ca 6500 	strd	r6, r5, [sl]
   15126:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1512a:	ddf2      	ble.n	15112 <_svfprintf_r+0xa62>
   1512c:	aa24      	add	r2, sp, #144	; 0x90
   1512e:	4641      	mov	r1, r8
   15130:	4658      	mov	r0, fp
   15132:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15136:	f004 f947 	bl	193c8 <__ssprint_r>
   1513a:	2800      	cmp	r0, #0
   1513c:	f47f af1d 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15140:	3c10      	subs	r4, #16
   15142:	2c10      	cmp	r4, #16
   15144:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15148:	dce8      	bgt.n	1511c <_svfprintf_r+0xa6c>
   1514a:	3301      	adds	r3, #1
   1514c:	4422      	add	r2, r4
   1514e:	2b07      	cmp	r3, #7
   15150:	e9ca 6400 	strd	r6, r4, [sl]
   15154:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15158:	f77f ac4b 	ble.w	149f2 <_svfprintf_r+0x342>
   1515c:	ee1b 1a10 	vmov	r1, s22
   15160:	aa24      	add	r2, sp, #144	; 0x90
   15162:	4658      	mov	r0, fp
   15164:	f004 f930 	bl	193c8 <__ssprint_r>
   15168:	2800      	cmp	r0, #0
   1516a:	f47f af06 	bne.w	14f7a <_svfprintf_r+0x8ca>
   1516e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15170:	e43f      	b.n	149f2 <_svfprintf_r+0x342>
   15172:	991b      	ldr	r1, [sp, #108]	; 0x6c
   15174:	2900      	cmp	r1, #0
   15176:	f340 835a 	ble.w	1582e <_svfprintf_r+0x117e>
   1517a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1517c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1517e:	429e      	cmp	r6, r3
   15180:	bfa8      	it	ge
   15182:	461e      	movge	r6, r3
   15184:	2e00      	cmp	r6, #0
   15186:	dd0b      	ble.n	151a0 <_svfprintf_r+0xaf0>
   15188:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1518a:	3301      	adds	r3, #1
   1518c:	4432      	add	r2, r6
   1518e:	2b07      	cmp	r3, #7
   15190:	e9ca 4600 	strd	r4, r6, [sl]
   15194:	9226      	str	r2, [sp, #152]	; 0x98
   15196:	9325      	str	r3, [sp, #148]	; 0x94
   15198:	f300 8689 	bgt.w	15eae <_svfprintf_r+0x17fe>
   1519c:	f10a 0a08 	add.w	sl, sl, #8
   151a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   151a2:	2e00      	cmp	r6, #0
   151a4:	bfa8      	it	ge
   151a6:	1bad      	subge	r5, r5, r6
   151a8:	2d00      	cmp	r5, #0
   151aa:	f300 8203 	bgt.w	155b4 <_svfprintf_r+0xf04>
   151ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   151b0:	f418 6f80 	tst.w	r8, #1024	; 0x400
   151b4:	4423      	add	r3, r4
   151b6:	9305      	str	r3, [sp, #20]
   151b8:	f040 821f 	bne.w	155fa <_svfprintf_r+0xf4a>
   151bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   151be:	990e      	ldr	r1, [sp, #56]	; 0x38
   151c0:	428b      	cmp	r3, r1
   151c2:	db03      	blt.n	151cc <_svfprintf_r+0xb1c>
   151c4:	f018 0f01 	tst.w	r8, #1
   151c8:	f000 84cf 	beq.w	15b6a <_svfprintf_r+0x14ba>
   151cc:	9910      	ldr	r1, [sp, #64]	; 0x40
   151ce:	9812      	ldr	r0, [sp, #72]	; 0x48
   151d0:	440a      	add	r2, r1
   151d2:	e9ca 0100 	strd	r0, r1, [sl]
   151d6:	9925      	ldr	r1, [sp, #148]	; 0x94
   151d8:	9226      	str	r2, [sp, #152]	; 0x98
   151da:	3101      	adds	r1, #1
   151dc:	2907      	cmp	r1, #7
   151de:	9125      	str	r1, [sp, #148]	; 0x94
   151e0:	f300 86a5 	bgt.w	15f2e <_svfprintf_r+0x187e>
   151e4:	f10a 0a08 	add.w	sl, sl, #8
   151e8:	990e      	ldr	r1, [sp, #56]	; 0x38
   151ea:	1865      	adds	r5, r4, r1
   151ec:	1acc      	subs	r4, r1, r3
   151ee:	9b05      	ldr	r3, [sp, #20]
   151f0:	1aed      	subs	r5, r5, r3
   151f2:	42a5      	cmp	r5, r4
   151f4:	bfa8      	it	ge
   151f6:	4625      	movge	r5, r4
   151f8:	2d00      	cmp	r5, #0
   151fa:	dd0d      	ble.n	15218 <_svfprintf_r+0xb68>
   151fc:	f8ca 3000 	str.w	r3, [sl]
   15200:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15202:	f8ca 5004 	str.w	r5, [sl, #4]
   15206:	3301      	adds	r3, #1
   15208:	442a      	add	r2, r5
   1520a:	2b07      	cmp	r3, #7
   1520c:	9226      	str	r2, [sp, #152]	; 0x98
   1520e:	9325      	str	r3, [sp, #148]	; 0x94
   15210:	f300 86bb 	bgt.w	15f8a <_svfprintf_r+0x18da>
   15214:	f10a 0a08 	add.w	sl, sl, #8
   15218:	2d00      	cmp	r5, #0
   1521a:	bfa8      	it	ge
   1521c:	1b64      	subge	r4, r4, r5
   1521e:	2c00      	cmp	r4, #0
   15220:	f77f abde 	ble.w	149e0 <_svfprintf_r+0x330>
   15224:	2c10      	cmp	r4, #16
   15226:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15228:	f340 837c 	ble.w	15924 <_svfprintf_r+0x1274>
   1522c:	ee1b 6a10 	vmov	r6, s22
   15230:	2510      	movs	r5, #16
   15232:	e005      	b.n	15240 <_svfprintf_r+0xb90>
   15234:	f10a 0a08 	add.w	sl, sl, #8
   15238:	3c10      	subs	r4, #16
   1523a:	2c10      	cmp	r4, #16
   1523c:	f340 8372 	ble.w	15924 <_svfprintf_r+0x1274>
   15240:	3301      	adds	r3, #1
   15242:	4970      	ldr	r1, [pc, #448]	; (15404 <_svfprintf_r+0xd54>)
   15244:	3210      	adds	r2, #16
   15246:	2b07      	cmp	r3, #7
   15248:	e9ca 1500 	strd	r1, r5, [sl]
   1524c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15250:	ddf0      	ble.n	15234 <_svfprintf_r+0xb84>
   15252:	aa24      	add	r2, sp, #144	; 0x90
   15254:	4631      	mov	r1, r6
   15256:	4658      	mov	r0, fp
   15258:	f004 f8b6 	bl	193c8 <__ssprint_r>
   1525c:	2800      	cmp	r0, #0
   1525e:	f47f ae8c 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15262:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15266:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1526a:	e7e5      	b.n	15238 <_svfprintf_r+0xb88>
   1526c:	2b30      	cmp	r3, #48	; 0x30
   1526e:	f43f ad8b 	beq.w	14d88 <_svfprintf_r+0x6d8>
   15272:	2330      	movs	r3, #48	; 0x30
   15274:	3802      	subs	r0, #2
   15276:	f804 3c01 	strb.w	r3, [r4, #-1]
   1527a:	ab50      	add	r3, sp, #320	; 0x140
   1527c:	1a1b      	subs	r3, r3, r0
   1527e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   15282:	9305      	str	r3, [sp, #20]
   15284:	4604      	mov	r4, r0
   15286:	e584      	b.n	14d92 <_svfprintf_r+0x6e2>
   15288:	f018 0f01 	tst.w	r8, #1
   1528c:	f47f ae82 	bne.w	14f94 <_svfprintf_r+0x8e4>
   15290:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15292:	f8ca 4000 	str.w	r4, [sl]
   15296:	3301      	adds	r3, #1
   15298:	3201      	adds	r2, #1
   1529a:	2101      	movs	r1, #1
   1529c:	2b07      	cmp	r3, #7
   1529e:	9226      	str	r2, [sp, #152]	; 0x98
   152a0:	9325      	str	r3, [sp, #148]	; 0x94
   152a2:	f8ca 1004 	str.w	r1, [sl, #4]
   152a6:	f77f aea5 	ble.w	14ff4 <_svfprintf_r+0x944>
   152aa:	ee1b 1a10 	vmov	r1, s22
   152ae:	aa24      	add	r2, sp, #144	; 0x90
   152b0:	4658      	mov	r0, fp
   152b2:	f004 f889 	bl	193c8 <__ssprint_r>
   152b6:	2800      	cmp	r0, #0
   152b8:	f47f ae5f 	bne.w	14f7a <_svfprintf_r+0x8ca>
   152bc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   152c0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   152c4:	e698      	b.n	14ff8 <_svfprintf_r+0x948>
   152c6:	990e      	ldr	r1, [sp, #56]	; 0x38
   152c8:	1e4c      	subs	r4, r1, #1
   152ca:	2c00      	cmp	r4, #0
   152cc:	f77f ae94 	ble.w	14ff8 <_svfprintf_r+0x948>
   152d0:	2c10      	cmp	r4, #16
   152d2:	f340 8361 	ble.w	15998 <_svfprintf_r+0x12e8>
   152d6:	ee1b 6a10 	vmov	r6, s22
   152da:	2510      	movs	r5, #16
   152dc:	e005      	b.n	152ea <_svfprintf_r+0xc3a>
   152de:	f10a 0a08 	add.w	sl, sl, #8
   152e2:	3c10      	subs	r4, #16
   152e4:	2c10      	cmp	r4, #16
   152e6:	f340 8357 	ble.w	15998 <_svfprintf_r+0x12e8>
   152ea:	3301      	adds	r3, #1
   152ec:	4945      	ldr	r1, [pc, #276]	; (15404 <_svfprintf_r+0xd54>)
   152ee:	3210      	adds	r2, #16
   152f0:	2b07      	cmp	r3, #7
   152f2:	e9ca 1500 	strd	r1, r5, [sl]
   152f6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   152fa:	ddf0      	ble.n	152de <_svfprintf_r+0xc2e>
   152fc:	aa24      	add	r2, sp, #144	; 0x90
   152fe:	4631      	mov	r1, r6
   15300:	4658      	mov	r0, fp
   15302:	f004 f861 	bl	193c8 <__ssprint_r>
   15306:	2800      	cmp	r0, #0
   15308:	f47f ae37 	bne.w	14f7a <_svfprintf_r+0x8ca>
   1530c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15310:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15314:	e7e5      	b.n	152e2 <_svfprintf_r+0xc32>
   15316:	ee1b 1a10 	vmov	r1, s22
   1531a:	aa24      	add	r2, sp, #144	; 0x90
   1531c:	4658      	mov	r0, fp
   1531e:	f004 f853 	bl	193c8 <__ssprint_r>
   15322:	2800      	cmp	r0, #0
   15324:	f47f ae29 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15328:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1532a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1532e:	f7ff bb44 	b.w	149ba <_svfprintf_r+0x30a>
   15332:	9b02      	ldr	r3, [sp, #8]
   15334:	f013 0310 	ands.w	r3, r3, #16
   15338:	f040 80c1 	bne.w	154be <_svfprintf_r+0xe0e>
   1533c:	9a02      	ldr	r2, [sp, #8]
   1533e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   15342:	f000 837a 	beq.w	15a3a <_svfprintf_r+0x138a>
   15346:	9808      	ldr	r0, [sp, #32]
   15348:	f850 2b04 	ldr.w	r2, [r0], #4
   1534c:	9008      	str	r0, [sp, #32]
   1534e:	4619      	mov	r1, r3
   15350:	b292      	uxth	r2, r2
   15352:	2301      	movs	r3, #1
   15354:	e451      	b.n	14bfa <_svfprintf_r+0x54a>
   15356:	f018 0310 	ands.w	r3, r8, #16
   1535a:	d155      	bne.n	15408 <_svfprintf_r+0xd58>
   1535c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   15360:	f000 835d 	beq.w	15a1e <_svfprintf_r+0x136e>
   15364:	9808      	ldr	r0, [sp, #32]
   15366:	f850 2b04 	ldr.w	r2, [r0], #4
   1536a:	9008      	str	r0, [sp, #32]
   1536c:	4619      	mov	r1, r3
   1536e:	b292      	uxth	r2, r2
   15370:	e4a8      	b.n	14cc4 <_svfprintf_r+0x614>
   15372:	4252      	negs	r2, r2
   15374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15378:	f8cd 8008 	str.w	r8, [sp, #8]
   1537c:	202d      	movs	r0, #45	; 0x2d
   1537e:	2301      	movs	r3, #1
   15380:	e43c      	b.n	14bfc <_svfprintf_r+0x54c>
   15382:	ee1b 1a10 	vmov	r1, s22
   15386:	aa24      	add	r2, sp, #144	; 0x90
   15388:	4658      	mov	r0, fp
   1538a:	f004 f81d 	bl	193c8 <__ssprint_r>
   1538e:	2800      	cmp	r0, #0
   15390:	f47f adf3 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15394:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15398:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1539c:	e616      	b.n	14fcc <_svfprintf_r+0x91c>
   1539e:	ee1b 1a10 	vmov	r1, s22
   153a2:	aa24      	add	r2, sp, #144	; 0x90
   153a4:	4658      	mov	r0, fp
   153a6:	f004 f80f 	bl	193c8 <__ssprint_r>
   153aa:	2800      	cmp	r0, #0
   153ac:	f47f ade5 	bne.w	14f7a <_svfprintf_r+0x8ca>
   153b0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   153b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   153b8:	e5fb      	b.n	14fb2 <_svfprintf_r+0x902>
   153ba:	f018 0f01 	tst.w	r8, #1
   153be:	f43f ab0f 	beq.w	149e0 <_svfprintf_r+0x330>
   153c2:	e52a      	b.n	14e1a <_svfprintf_r+0x76a>
   153c4:	9308      	str	r3, [sp, #32]
   153c6:	f899 3000 	ldrb.w	r3, [r9]
   153ca:	f7ff b9cd 	b.w	14768 <_svfprintf_r+0xb8>
   153ce:	ac50      	add	r4, sp, #320	; 0x140
   153d0:	e4df      	b.n	14d92 <_svfprintf_r+0x6e2>
   153d2:	f418 7f00 	tst.w	r8, #512	; 0x200
   153d6:	f040 83db 	bne.w	15b90 <_svfprintf_r+0x14e0>
   153da:	f853 2b04 	ldr.w	r2, [r3], #4
   153de:	9308      	str	r3, [sp, #32]
   153e0:	17d1      	asrs	r1, r2, #31
   153e2:	460b      	mov	r3, r1
   153e4:	f7ff bbb6 	b.w	14b54 <_svfprintf_r+0x4a4>
   153e8:	9b08      	ldr	r3, [sp, #32]
   153ea:	9804      	ldr	r0, [sp, #16]
   153ec:	f853 1b04 	ldr.w	r1, [r3], #4
   153f0:	9308      	str	r3, [sp, #32]
   153f2:	17c2      	asrs	r2, r0, #31
   153f4:	e9c1 0200 	strd	r0, r2, [r1]
   153f8:	464c      	mov	r4, r9
   153fa:	f7ff b98b 	b.w	14714 <_svfprintf_r+0x64>
   153fe:	bf00      	nop
   15400:	20002b80 	.word	0x20002b80
   15404:	20008920 	.word	0x20008920
   15408:	9b08      	ldr	r3, [sp, #32]
   1540a:	f853 2b04 	ldr.w	r2, [r3], #4
   1540e:	9308      	str	r3, [sp, #32]
   15410:	e458      	b.n	14cc4 <_svfprintf_r+0x614>
   15412:	eeb4 8b48 	vcmp.f64	d8, d8
   15416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1541a:	f180 8694 	bvs.w	16146 <_svfprintf_r+0x1a96>
   1541e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15420:	2b61      	cmp	r3, #97	; 0x61
   15422:	f000 8552 	beq.w	15eca <_svfprintf_r+0x181a>
   15426:	2b41      	cmp	r3, #65	; 0x41
   15428:	f000 85c0 	beq.w	15fac <_svfprintf_r+0x18fc>
   1542c:	9b03      	ldr	r3, [sp, #12]
   1542e:	3301      	adds	r3, #1
   15430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15432:	f023 0520 	bic.w	r5, r3, #32
   15436:	f000 8480 	beq.w	15d3a <_svfprintf_r+0x168a>
   1543a:	2d47      	cmp	r5, #71	; 0x47
   1543c:	d104      	bne.n	15448 <_svfprintf_r+0xd98>
   1543e:	9b03      	ldr	r3, [sp, #12]
   15440:	2b00      	cmp	r3, #0
   15442:	bf08      	it	eq
   15444:	2301      	moveq	r3, #1
   15446:	9303      	str	r3, [sp, #12]
   15448:	ee18 3a90 	vmov	r3, s17
   1544c:	2b00      	cmp	r3, #0
   1544e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   15452:	4646      	mov	r6, r8
   15454:	f2c0 8618 	blt.w	16088 <_svfprintf_r+0x19d8>
   15458:	eeb0 ab48 	vmov.f64	d10, d8
   1545c:	2300      	movs	r3, #0
   1545e:	4690      	mov	r8, r2
   15460:	9309      	str	r3, [sp, #36]	; 0x24
   15462:	9307      	str	r3, [sp, #28]
   15464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15466:	3b41      	subs	r3, #65	; 0x41
   15468:	2b25      	cmp	r3, #37	; 0x25
   1546a:	f200 8398 	bhi.w	15b9e <_svfprintf_r+0x14ee>
   1546e:	e8df f013 	tbh	[pc, r3, lsl #1]
   15472:	046f      	.short	0x046f
   15474:	03960396 	.word	0x03960396
   15478:	04680396 	.word	0x04680396
   1547c:	0396046c 	.word	0x0396046c
   15480:	03960396 	.word	0x03960396
   15484:	03960396 	.word	0x03960396
   15488:	03960396 	.word	0x03960396
   1548c:	03960396 	.word	0x03960396
   15490:	03960396 	.word	0x03960396
   15494:	03960396 	.word	0x03960396
   15498:	03960396 	.word	0x03960396
   1549c:	03960396 	.word	0x03960396
   154a0:	03960396 	.word	0x03960396
   154a4:	03960396 	.word	0x03960396
   154a8:	03960396 	.word	0x03960396
   154ac:	03960396 	.word	0x03960396
   154b0:	03960396 	.word	0x03960396
   154b4:	03960396 	.word	0x03960396
   154b8:	04680396 	.word	0x04680396
   154bc:	046c      	.short	0x046c
   154be:	9b08      	ldr	r3, [sp, #32]
   154c0:	f853 2b04 	ldr.w	r2, [r3], #4
   154c4:	9308      	str	r3, [sp, #32]
   154c6:	2301      	movs	r3, #1
   154c8:	f7ff bb97 	b.w	14bfa <_svfprintf_r+0x54a>
   154cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   154ce:	2b00      	cmp	r3, #0
   154d0:	f43f a9cf 	beq.w	14872 <_svfprintf_r+0x1c2>
   154d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   154d6:	781b      	ldrb	r3, [r3, #0]
   154d8:	2b00      	cmp	r3, #0
   154da:	f43f a9ca 	beq.w	14872 <_svfprintf_r+0x1c2>
   154de:	f899 3000 	ldrb.w	r3, [r9]
   154e2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   154e6:	f7ff b93f 	b.w	14768 <_svfprintf_r+0xb8>
   154ea:	930b      	str	r3, [sp, #44]	; 0x2c
   154ec:	f8cd 8008 	str.w	r8, [sp, #8]
   154f0:	f7ff bbf1 	b.w	14cd6 <_svfprintf_r+0x626>
   154f4:	930b      	str	r3, [sp, #44]	; 0x2c
   154f6:	4b9a      	ldr	r3, [pc, #616]	; (15760 <_svfprintf_r+0x10b0>)
   154f8:	9311      	str	r3, [sp, #68]	; 0x44
   154fa:	f018 0120 	ands.w	r1, r8, #32
   154fe:	f000 8105 	beq.w	1570c <_svfprintf_r+0x105c>
   15502:	9b08      	ldr	r3, [sp, #32]
   15504:	3307      	adds	r3, #7
   15506:	f023 0307 	bic.w	r3, r3, #7
   1550a:	6859      	ldr	r1, [r3, #4]
   1550c:	f853 2b08 	ldr.w	r2, [r3], #8
   15510:	9308      	str	r3, [sp, #32]
   15512:	f018 0f01 	tst.w	r8, #1
   15516:	d00a      	beq.n	1552e <_svfprintf_r+0xe7e>
   15518:	ea52 0301 	orrs.w	r3, r2, r1
   1551c:	d007      	beq.n	1552e <_svfprintf_r+0xe7e>
   1551e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15520:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   15524:	2330      	movs	r3, #48	; 0x30
   15526:	f048 0802 	orr.w	r8, r8, #2
   1552a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   1552e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   15532:	9302      	str	r3, [sp, #8]
   15534:	2302      	movs	r3, #2
   15536:	f7ff bb60 	b.w	14bfa <_svfprintf_r+0x54a>
   1553a:	930b      	str	r3, [sp, #44]	; 0x2c
   1553c:	f7ff bbb6 	b.w	14cac <_svfprintf_r+0x5fc>
   15540:	930b      	str	r3, [sp, #44]	; 0x2c
   15542:	4b88      	ldr	r3, [pc, #544]	; (15764 <_svfprintf_r+0x10b4>)
   15544:	9311      	str	r3, [sp, #68]	; 0x44
   15546:	e7d8      	b.n	154fa <_svfprintf_r+0xe4a>
   15548:	9b08      	ldr	r3, [sp, #32]
   1554a:	2101      	movs	r1, #1
   1554c:	f853 2b04 	ldr.w	r2, [r3], #4
   15550:	9102      	str	r1, [sp, #8]
   15552:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   15556:	9308      	str	r3, [sp, #32]
   15558:	9105      	str	r1, [sp, #20]
   1555a:	ac37      	add	r4, sp, #220	; 0xdc
   1555c:	f7ff baaf 	b.w	14abe <_svfprintf_r+0x40e>
   15560:	ee1b 1a10 	vmov	r1, s22
   15564:	aa24      	add	r2, sp, #144	; 0x90
   15566:	4658      	mov	r0, fp
   15568:	f003 ff2e 	bl	193c8 <__ssprint_r>
   1556c:	2800      	cmp	r0, #0
   1556e:	f47f ad04 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15572:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15574:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15578:	e45d      	b.n	14e36 <_svfprintf_r+0x786>
   1557a:	9b03      	ldr	r3, [sp, #12]
   1557c:	9407      	str	r4, [sp, #28]
   1557e:	2b06      	cmp	r3, #6
   15580:	4622      	mov	r2, r4
   15582:	bf28      	it	cs
   15584:	2306      	movcs	r3, #6
   15586:	9403      	str	r4, [sp, #12]
   15588:	4621      	mov	r1, r4
   1558a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   1558e:	4c76      	ldr	r4, [pc, #472]	; (15768 <_svfprintf_r+0x10b8>)
   15590:	9302      	str	r3, [sp, #8]
   15592:	9305      	str	r3, [sp, #20]
   15594:	920f      	str	r2, [sp, #60]	; 0x3c
   15596:	f7ff ba6c 	b.w	14a72 <_svfprintf_r+0x3c2>
   1559a:	2140      	movs	r1, #64	; 0x40
   1559c:	4658      	mov	r0, fp
   1559e:	f7fb f957 	bl	10850 <_malloc_r>
   155a2:	6020      	str	r0, [r4, #0]
   155a4:	6120      	str	r0, [r4, #16]
   155a6:	2800      	cmp	r0, #0
   155a8:	f000 860f 	beq.w	161ca <_svfprintf_r+0x1b1a>
   155ac:	2340      	movs	r3, #64	; 0x40
   155ae:	6163      	str	r3, [r4, #20]
   155b0:	f7ff b89e 	b.w	146f0 <_svfprintf_r+0x40>
   155b4:	2d10      	cmp	r5, #16
   155b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   155b8:	f340 825d 	ble.w	15a76 <_svfprintf_r+0x13c6>
   155bc:	4651      	mov	r1, sl
   155be:	2610      	movs	r6, #16
   155c0:	ee1b aa10 	vmov	sl, s22
   155c4:	e004      	b.n	155d0 <_svfprintf_r+0xf20>
   155c6:	3108      	adds	r1, #8
   155c8:	3d10      	subs	r5, #16
   155ca:	2d10      	cmp	r5, #16
   155cc:	f340 8252 	ble.w	15a74 <_svfprintf_r+0x13c4>
   155d0:	3301      	adds	r3, #1
   155d2:	4866      	ldr	r0, [pc, #408]	; (1576c <_svfprintf_r+0x10bc>)
   155d4:	3210      	adds	r2, #16
   155d6:	2b07      	cmp	r3, #7
   155d8:	e9c1 0600 	strd	r0, r6, [r1]
   155dc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   155e0:	ddf1      	ble.n	155c6 <_svfprintf_r+0xf16>
   155e2:	aa24      	add	r2, sp, #144	; 0x90
   155e4:	4651      	mov	r1, sl
   155e6:	4658      	mov	r0, fp
   155e8:	f003 feee 	bl	193c8 <__ssprint_r>
   155ec:	2800      	cmp	r0, #0
   155ee:	f47f acc4 	bne.w	14f7a <_svfprintf_r+0x8ca>
   155f2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   155f6:	a927      	add	r1, sp, #156	; 0x9c
   155f8:	e7e6      	b.n	155c8 <_svfprintf_r+0xf18>
   155fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   155fc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   15600:	18e3      	adds	r3, r4, r3
   15602:	9303      	str	r3, [sp, #12]
   15604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15606:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1560a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1560c:	9d05      	ldr	r5, [sp, #20]
   1560e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   15612:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   15616:	940b      	str	r4, [sp, #44]	; 0x2c
   15618:	ee1b 1a10 	vmov	r1, s22
   1561c:	4650      	mov	r0, sl
   1561e:	2b00      	cmp	r3, #0
   15620:	d034      	beq.n	1568c <_svfprintf_r+0xfdc>
   15622:	f1b8 0f00 	cmp.w	r8, #0
   15626:	d135      	bne.n	15694 <_svfprintf_r+0xfe4>
   15628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1562a:	3b01      	subs	r3, #1
   1562c:	3e01      	subs	r6, #1
   1562e:	930d      	str	r3, [sp, #52]	; 0x34
   15630:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15632:	e9c0 3900 	strd	r3, r9, [r0]
   15636:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15638:	3301      	adds	r3, #1
   1563a:	444a      	add	r2, r9
   1563c:	2b07      	cmp	r3, #7
   1563e:	9226      	str	r2, [sp, #152]	; 0x98
   15640:	9325      	str	r3, [sp, #148]	; 0x94
   15642:	dc6c      	bgt.n	1571e <_svfprintf_r+0x106e>
   15644:	3008      	adds	r0, #8
   15646:	9b03      	ldr	r3, [sp, #12]
   15648:	f896 c000 	ldrb.w	ip, [r6]
   1564c:	1b5b      	subs	r3, r3, r5
   1564e:	4563      	cmp	r3, ip
   15650:	bfa8      	it	ge
   15652:	4663      	movge	r3, ip
   15654:	2b00      	cmp	r3, #0
   15656:	469a      	mov	sl, r3
   15658:	dd0c      	ble.n	15674 <_svfprintf_r+0xfc4>
   1565a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1565c:	3401      	adds	r4, #1
   1565e:	441a      	add	r2, r3
   15660:	2c07      	cmp	r4, #7
   15662:	e9c0 5300 	strd	r5, r3, [r0]
   15666:	9226      	str	r2, [sp, #152]	; 0x98
   15668:	9425      	str	r4, [sp, #148]	; 0x94
   1566a:	f300 8177 	bgt.w	1595c <_svfprintf_r+0x12ac>
   1566e:	f896 c000 	ldrb.w	ip, [r6]
   15672:	3008      	adds	r0, #8
   15674:	f1ba 0f00 	cmp.w	sl, #0
   15678:	bfac      	ite	ge
   1567a:	ebac 040a 	subge.w	r4, ip, sl
   1567e:	4664      	movlt	r4, ip
   15680:	2c00      	cmp	r4, #0
   15682:	dc0a      	bgt.n	1569a <_svfprintf_r+0xfea>
   15684:	4465      	add	r5, ip
   15686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15688:	2b00      	cmp	r3, #0
   1568a:	d1ca      	bne.n	15622 <_svfprintf_r+0xf72>
   1568c:	f1b8 0f00 	cmp.w	r8, #0
   15690:	f000 83ac 	beq.w	15dec <_svfprintf_r+0x173c>
   15694:	f108 38ff 	add.w	r8, r8, #4294967295
   15698:	e7ca      	b.n	15630 <_svfprintf_r+0xf80>
   1569a:	2c10      	cmp	r4, #16
   1569c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   156a0:	dd24      	ble.n	156ec <_svfprintf_r+0x103c>
   156a2:	9505      	str	r5, [sp, #20]
   156a4:	f04f 0a10 	mov.w	sl, #16
   156a8:	4663      	mov	r3, ip
   156aa:	460d      	mov	r5, r1
   156ac:	e004      	b.n	156b8 <_svfprintf_r+0x1008>
   156ae:	3c10      	subs	r4, #16
   156b0:	2c10      	cmp	r4, #16
   156b2:	f100 0008 	add.w	r0, r0, #8
   156b6:	dd16      	ble.n	156e6 <_svfprintf_r+0x1036>
   156b8:	3301      	adds	r3, #1
   156ba:	492c      	ldr	r1, [pc, #176]	; (1576c <_svfprintf_r+0x10bc>)
   156bc:	3210      	adds	r2, #16
   156be:	2b07      	cmp	r3, #7
   156c0:	e9c0 1a00 	strd	r1, sl, [r0]
   156c4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   156c8:	ddf1      	ble.n	156ae <_svfprintf_r+0xffe>
   156ca:	aa24      	add	r2, sp, #144	; 0x90
   156cc:	4629      	mov	r1, r5
   156ce:	4658      	mov	r0, fp
   156d0:	f003 fe7a 	bl	193c8 <__ssprint_r>
   156d4:	2800      	cmp	r0, #0
   156d6:	f47f ac50 	bne.w	14f7a <_svfprintf_r+0x8ca>
   156da:	3c10      	subs	r4, #16
   156dc:	2c10      	cmp	r4, #16
   156de:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   156e2:	a827      	add	r0, sp, #156	; 0x9c
   156e4:	dce8      	bgt.n	156b8 <_svfprintf_r+0x1008>
   156e6:	4629      	mov	r1, r5
   156e8:	9d05      	ldr	r5, [sp, #20]
   156ea:	469c      	mov	ip, r3
   156ec:	f10c 0301 	add.w	r3, ip, #1
   156f0:	4422      	add	r2, r4
   156f2:	6044      	str	r4, [r0, #4]
   156f4:	2b07      	cmp	r3, #7
   156f6:	4c1d      	ldr	r4, [pc, #116]	; (1576c <_svfprintf_r+0x10bc>)
   156f8:	6004      	str	r4, [r0, #0]
   156fa:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   156fe:	f300 83c6 	bgt.w	15e8e <_svfprintf_r+0x17de>
   15702:	f896 c000 	ldrb.w	ip, [r6]
   15706:	3008      	adds	r0, #8
   15708:	4465      	add	r5, ip
   1570a:	e7bc      	b.n	15686 <_svfprintf_r+0xfd6>
   1570c:	f018 0310 	ands.w	r3, r8, #16
   15710:	f000 80c2 	beq.w	15898 <_svfprintf_r+0x11e8>
   15714:	9b08      	ldr	r3, [sp, #32]
   15716:	f853 2b04 	ldr.w	r2, [r3], #4
   1571a:	9308      	str	r3, [sp, #32]
   1571c:	e6f9      	b.n	15512 <_svfprintf_r+0xe62>
   1571e:	aa24      	add	r2, sp, #144	; 0x90
   15720:	4658      	mov	r0, fp
   15722:	9105      	str	r1, [sp, #20]
   15724:	f003 fe50 	bl	193c8 <__ssprint_r>
   15728:	2800      	cmp	r0, #0
   1572a:	f47f ac26 	bne.w	14f7a <_svfprintf_r+0x8ca>
   1572e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15730:	9905      	ldr	r1, [sp, #20]
   15732:	a827      	add	r0, sp, #156	; 0x9c
   15734:	e787      	b.n	15646 <_svfprintf_r+0xf96>
   15736:	9802      	ldr	r0, [sp, #8]
   15738:	f8cd a01c 	str.w	sl, [sp, #28]
   1573c:	ac50      	add	r4, sp, #320	; 0x140
   1573e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   15742:	2500      	movs	r5, #0
   15744:	ee0a ba10 	vmov	s20, fp
   15748:	4b09      	ldr	r3, [pc, #36]	; (15770 <_svfprintf_r+0x10c0>)
   1574a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1574e:	f8cd 9014 	str.w	r9, [sp, #20]
   15752:	46a3      	mov	fp, r4
   15754:	f04f 0805 	mov.w	r8, #5
   15758:	46ac      	mov	ip, r5
   1575a:	4604      	mov	r4, r0
   1575c:	e010      	b.n	15780 <_svfprintf_r+0x10d0>
   1575e:	bf00      	nop
   15760:	200010d8 	.word	0x200010d8
   15764:	200010ec 	.word	0x200010ec
   15768:	20001100 	.word	0x20001100
   1576c:	20008920 	.word	0x20008920
   15770:	cccccccd 	.word	0xcccccccd
   15774:	2a0a      	cmp	r2, #10
   15776:	f171 0100 	sbcs.w	r1, r1, #0
   1577a:	d336      	bcc.n	157ea <_svfprintf_r+0x113a>
   1577c:	464a      	mov	r2, r9
   1577e:	4631      	mov	r1, r6
   15780:	1850      	adds	r0, r2, r1
   15782:	f140 0000 	adc.w	r0, r0, #0
   15786:	fba3 5600 	umull	r5, r6, r3, r0
   1578a:	f026 0503 	bic.w	r5, r6, #3
   1578e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   15792:	1b40      	subs	r0, r0, r5
   15794:	1a15      	subs	r5, r2, r0
   15796:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   1579a:	f161 0e00 	sbc.w	lr, r1, #0
   1579e:	fb06 f605 	mul.w	r6, r6, r5
   157a2:	fba5 9503 	umull	r9, r5, r5, r3
   157a6:	fb03 660e 	mla	r6, r3, lr, r6
   157aa:	f009 0e01 	and.w	lr, r9, #1
   157ae:	442e      	add	r6, r5
   157b0:	fbae 5e08 	umull	r5, lr, lr, r8
   157b4:	182d      	adds	r5, r5, r0
   157b6:	ea4f 0959 	mov.w	r9, r9, lsr #1
   157ba:	3530      	adds	r5, #48	; 0x30
   157bc:	f80b 5c01 	strb.w	r5, [fp, #-1]
   157c0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   157c4:	f10c 0c01 	add.w	ip, ip, #1
   157c8:	f10b 3bff 	add.w	fp, fp, #4294967295
   157cc:	0876      	lsrs	r6, r6, #1
   157ce:	2c00      	cmp	r4, #0
   157d0:	d0d0      	beq.n	15774 <_svfprintf_r+0x10c4>
   157d2:	f89a 0000 	ldrb.w	r0, [sl]
   157d6:	4584      	cmp	ip, r0
   157d8:	d1cc      	bne.n	15774 <_svfprintf_r+0x10c4>
   157da:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   157de:	d0c9      	beq.n	15774 <_svfprintf_r+0x10c4>
   157e0:	2a0a      	cmp	r2, #10
   157e2:	f171 0100 	sbcs.w	r1, r1, #0
   157e6:	f080 818f 	bcs.w	15b08 <_svfprintf_r+0x1458>
   157ea:	465c      	mov	r4, fp
   157ec:	ab50      	add	r3, sp, #320	; 0x140
   157ee:	1b1b      	subs	r3, r3, r4
   157f0:	f8dd 9014 	ldr.w	r9, [sp, #20]
   157f4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   157f8:	ee1a ba10 	vmov	fp, s20
   157fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
   15800:	f8dd 8008 	ldr.w	r8, [sp, #8]
   15804:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   15808:	9305      	str	r3, [sp, #20]
   1580a:	f7ff bac2 	b.w	14d92 <_svfprintf_r+0x6e2>
   1580e:	ee1b 1a10 	vmov	r1, s22
   15812:	aa24      	add	r2, sp, #144	; 0x90
   15814:	4658      	mov	r0, fp
   15816:	f003 fdd7 	bl	193c8 <__ssprint_r>
   1581a:	2800      	cmp	r0, #0
   1581c:	f47f abad 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15820:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15824:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15826:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1582a:	f7ff b896 	b.w	1495a <_svfprintf_r+0x2aa>
   1582e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15830:	48be      	ldr	r0, [pc, #760]	; (15b2c <_svfprintf_r+0x147c>)
   15832:	f8ca 0000 	str.w	r0, [sl]
   15836:	3301      	adds	r3, #1
   15838:	3201      	adds	r2, #1
   1583a:	2001      	movs	r0, #1
   1583c:	2b07      	cmp	r3, #7
   1583e:	9226      	str	r2, [sp, #152]	; 0x98
   15840:	9325      	str	r3, [sp, #148]	; 0x94
   15842:	f8ca 0004 	str.w	r0, [sl, #4]
   15846:	f300 8177 	bgt.w	15b38 <_svfprintf_r+0x1488>
   1584a:	f10a 0a08 	add.w	sl, sl, #8
   1584e:	2900      	cmp	r1, #0
   15850:	f040 80af 	bne.w	159b2 <_svfprintf_r+0x1302>
   15854:	990e      	ldr	r1, [sp, #56]	; 0x38
   15856:	f008 0301 	and.w	r3, r8, #1
   1585a:	430b      	orrs	r3, r1
   1585c:	f43f a8c0 	beq.w	149e0 <_svfprintf_r+0x330>
   15860:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15862:	9912      	ldr	r1, [sp, #72]	; 0x48
   15864:	441a      	add	r2, r3
   15866:	e9ca 1300 	strd	r1, r3, [sl]
   1586a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1586c:	9226      	str	r2, [sp, #152]	; 0x98
   1586e:	3301      	adds	r3, #1
   15870:	2b07      	cmp	r3, #7
   15872:	9325      	str	r3, [sp, #148]	; 0x94
   15874:	f300 8252 	bgt.w	15d1c <_svfprintf_r+0x166c>
   15878:	f10a 0a08 	add.w	sl, sl, #8
   1587c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1587e:	f8ca 4000 	str.w	r4, [sl]
   15882:	3301      	adds	r3, #1
   15884:	440a      	add	r2, r1
   15886:	2b07      	cmp	r3, #7
   15888:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1588c:	f8ca 1004 	str.w	r1, [sl, #4]
   15890:	f77f a8a4 	ble.w	149dc <_svfprintf_r+0x32c>
   15894:	f7ff bbbd 	b.w	15012 <_svfprintf_r+0x962>
   15898:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   1589c:	f000 80dd 	beq.w	15a5a <_svfprintf_r+0x13aa>
   158a0:	9808      	ldr	r0, [sp, #32]
   158a2:	f850 2b04 	ldr.w	r2, [r0], #4
   158a6:	9008      	str	r0, [sp, #32]
   158a8:	4619      	mov	r1, r3
   158aa:	b292      	uxth	r2, r2
   158ac:	e631      	b.n	15512 <_svfprintf_r+0xe62>
   158ae:	ee1b 1a10 	vmov	r1, s22
   158b2:	aa24      	add	r2, sp, #144	; 0x90
   158b4:	4658      	mov	r0, fp
   158b6:	f003 fd87 	bl	193c8 <__ssprint_r>
   158ba:	2800      	cmp	r0, #0
   158bc:	f47f ab5d 	bne.w	14f7a <_svfprintf_r+0x8ca>
   158c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   158c2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   158c6:	f7ff baa3 	b.w	14e10 <_svfprintf_r+0x760>
   158ca:	ae22      	add	r6, sp, #136	; 0x88
   158cc:	2208      	movs	r2, #8
   158ce:	2100      	movs	r1, #0
   158d0:	4630      	mov	r0, r6
   158d2:	941d      	str	r4, [sp, #116]	; 0x74
   158d4:	f7fc ff2c 	bl	12730 <memset>
   158d8:	9b03      	ldr	r3, [sp, #12]
   158da:	1c5a      	adds	r2, r3, #1
   158dc:	f000 80db 	beq.w	15a96 <_svfprintf_r+0x13e6>
   158e0:	2500      	movs	r5, #0
   158e2:	f8cd 9008 	str.w	r9, [sp, #8]
   158e6:	f8cd 801c 	str.w	r8, [sp, #28]
   158ea:	4699      	mov	r9, r3
   158ec:	46a8      	mov	r8, r5
   158ee:	e00c      	b.n	1590a <_svfprintf_r+0x125a>
   158f0:	a937      	add	r1, sp, #220	; 0xdc
   158f2:	4658      	mov	r0, fp
   158f4:	f003 fc3e 	bl	19174 <_wcrtomb_r>
   158f8:	1c43      	adds	r3, r0, #1
   158fa:	4440      	add	r0, r8
   158fc:	f000 83c8 	beq.w	16090 <_svfprintf_r+0x19e0>
   15900:	4548      	cmp	r0, r9
   15902:	dc08      	bgt.n	15916 <_svfprintf_r+0x1266>
   15904:	f000 8418 	beq.w	16138 <_svfprintf_r+0x1a88>
   15908:	4680      	mov	r8, r0
   1590a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1590c:	5952      	ldr	r2, [r2, r5]
   1590e:	4633      	mov	r3, r6
   15910:	3504      	adds	r5, #4
   15912:	2a00      	cmp	r2, #0
   15914:	d1ec      	bne.n	158f0 <_svfprintf_r+0x1240>
   15916:	f8cd 8014 	str.w	r8, [sp, #20]
   1591a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1591e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   15922:	e0c5      	b.n	15ab0 <_svfprintf_r+0x1400>
   15924:	3301      	adds	r3, #1
   15926:	4982      	ldr	r1, [pc, #520]	; (15b30 <_svfprintf_r+0x1480>)
   15928:	f8ca 4004 	str.w	r4, [sl, #4]
   1592c:	4422      	add	r2, r4
   1592e:	2b07      	cmp	r3, #7
   15930:	f8ca 1000 	str.w	r1, [sl]
   15934:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15938:	f77f a850 	ble.w	149dc <_svfprintf_r+0x32c>
   1593c:	f7ff bb69 	b.w	15012 <_svfprintf_r+0x962>
   15940:	ee1b 1a10 	vmov	r1, s22
   15944:	aa24      	add	r2, sp, #144	; 0x90
   15946:	4658      	mov	r0, fp
   15948:	f003 fd3e 	bl	193c8 <__ssprint_r>
   1594c:	2800      	cmp	r0, #0
   1594e:	f47f ab14 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15952:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15954:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15958:	f7ff b829 	b.w	149ae <_svfprintf_r+0x2fe>
   1595c:	aa24      	add	r2, sp, #144	; 0x90
   1595e:	4658      	mov	r0, fp
   15960:	9105      	str	r1, [sp, #20]
   15962:	f003 fd31 	bl	193c8 <__ssprint_r>
   15966:	2800      	cmp	r0, #0
   15968:	f47f ab07 	bne.w	14f7a <_svfprintf_r+0x8ca>
   1596c:	f896 c000 	ldrb.w	ip, [r6]
   15970:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15972:	9905      	ldr	r1, [sp, #20]
   15974:	a827      	add	r0, sp, #156	; 0x9c
   15976:	e67d      	b.n	15674 <_svfprintf_r+0xfc4>
   15978:	2b01      	cmp	r3, #1
   1597a:	f8cd 8008 	str.w	r8, [sp, #8]
   1597e:	f47f a9f3 	bne.w	14d68 <_svfprintf_r+0x6b8>
   15982:	f7ff bb93 	b.w	150ac <_svfprintf_r+0x9fc>
   15986:	9b08      	ldr	r3, [sp, #32]
   15988:	9904      	ldr	r1, [sp, #16]
   1598a:	f853 2b04 	ldr.w	r2, [r3], #4
   1598e:	464c      	mov	r4, r9
   15990:	6011      	str	r1, [r2, #0]
   15992:	9308      	str	r3, [sp, #32]
   15994:	f7fe bebe 	b.w	14714 <_svfprintf_r+0x64>
   15998:	3301      	adds	r3, #1
   1599a:	4965      	ldr	r1, [pc, #404]	; (15b30 <_svfprintf_r+0x1480>)
   1599c:	f8ca 4004 	str.w	r4, [sl, #4]
   159a0:	4422      	add	r2, r4
   159a2:	2b07      	cmp	r3, #7
   159a4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   159a8:	f8ca 1000 	str.w	r1, [sl]
   159ac:	f77f ab22 	ble.w	14ff4 <_svfprintf_r+0x944>
   159b0:	e47b      	b.n	152aa <_svfprintf_r+0xbfa>
   159b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   159b4:	9812      	ldr	r0, [sp, #72]	; 0x48
   159b6:	441a      	add	r2, r3
   159b8:	e9ca 0300 	strd	r0, r3, [sl]
   159bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   159be:	9226      	str	r2, [sp, #152]	; 0x98
   159c0:	3301      	adds	r3, #1
   159c2:	2b07      	cmp	r3, #7
   159c4:	9325      	str	r3, [sp, #148]	; 0x94
   159c6:	f300 81a9 	bgt.w	15d1c <_svfprintf_r+0x166c>
   159ca:	f10a 0a08 	add.w	sl, sl, #8
   159ce:	2900      	cmp	r1, #0
   159d0:	f6bf af54 	bge.w	1587c <_svfprintf_r+0x11cc>
   159d4:	424d      	negs	r5, r1
   159d6:	3110      	adds	r1, #16
   159d8:	f280 830f 	bge.w	15ffa <_svfprintf_r+0x194a>
   159dc:	ee1b 1a10 	vmov	r1, s22
   159e0:	2610      	movs	r6, #16
   159e2:	e005      	b.n	159f0 <_svfprintf_r+0x1340>
   159e4:	f10a 0a08 	add.w	sl, sl, #8
   159e8:	3d10      	subs	r5, #16
   159ea:	2d10      	cmp	r5, #16
   159ec:	f340 8305 	ble.w	15ffa <_svfprintf_r+0x194a>
   159f0:	3301      	adds	r3, #1
   159f2:	484f      	ldr	r0, [pc, #316]	; (15b30 <_svfprintf_r+0x1480>)
   159f4:	3210      	adds	r2, #16
   159f6:	2b07      	cmp	r3, #7
   159f8:	e9ca 0600 	strd	r0, r6, [sl]
   159fc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15a00:	ddf0      	ble.n	159e4 <_svfprintf_r+0x1334>
   15a02:	aa24      	add	r2, sp, #144	; 0x90
   15a04:	4658      	mov	r0, fp
   15a06:	9103      	str	r1, [sp, #12]
   15a08:	f003 fcde 	bl	193c8 <__ssprint_r>
   15a0c:	2800      	cmp	r0, #0
   15a0e:	f47f aab4 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15a12:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15a16:	9903      	ldr	r1, [sp, #12]
   15a18:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15a1c:	e7e4      	b.n	159e8 <_svfprintf_r+0x1338>
   15a1e:	9b08      	ldr	r3, [sp, #32]
   15a20:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   15a24:	bf1a      	itte	ne
   15a26:	4611      	movne	r1, r2
   15a28:	f853 2b04 	ldrne.w	r2, [r3], #4
   15a2c:	f853 2b04 	ldreq.w	r2, [r3], #4
   15a30:	9308      	str	r3, [sp, #32]
   15a32:	bf18      	it	ne
   15a34:	b2d2      	uxtbne	r2, r2
   15a36:	f7ff b945 	b.w	14cc4 <_svfprintf_r+0x614>
   15a3a:	9b02      	ldr	r3, [sp, #8]
   15a3c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   15a40:	9b08      	ldr	r3, [sp, #32]
   15a42:	bf1a      	itte	ne
   15a44:	4611      	movne	r1, r2
   15a46:	f853 2b04 	ldrne.w	r2, [r3], #4
   15a4a:	f853 2b04 	ldreq.w	r2, [r3], #4
   15a4e:	9308      	str	r3, [sp, #32]
   15a50:	bf18      	it	ne
   15a52:	b2d2      	uxtbne	r2, r2
   15a54:	2301      	movs	r3, #1
   15a56:	f7ff b8d0 	b.w	14bfa <_svfprintf_r+0x54a>
   15a5a:	9b08      	ldr	r3, [sp, #32]
   15a5c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   15a60:	bf1a      	itte	ne
   15a62:	4611      	movne	r1, r2
   15a64:	f853 2b04 	ldrne.w	r2, [r3], #4
   15a68:	f853 2b04 	ldreq.w	r2, [r3], #4
   15a6c:	9308      	str	r3, [sp, #32]
   15a6e:	bf18      	it	ne
   15a70:	b2d2      	uxtbne	r2, r2
   15a72:	e54e      	b.n	15512 <_svfprintf_r+0xe62>
   15a74:	468a      	mov	sl, r1
   15a76:	3301      	adds	r3, #1
   15a78:	492d      	ldr	r1, [pc, #180]	; (15b30 <_svfprintf_r+0x1480>)
   15a7a:	f8ca 5004 	str.w	r5, [sl, #4]
   15a7e:	442a      	add	r2, r5
   15a80:	2b07      	cmp	r3, #7
   15a82:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15a86:	f8ca 1000 	str.w	r1, [sl]
   15a8a:	f300 8139 	bgt.w	15d00 <_svfprintf_r+0x1650>
   15a8e:	f10a 0a08 	add.w	sl, sl, #8
   15a92:	f7ff bb8c 	b.w	151ae <_svfprintf_r+0xafe>
   15a96:	2300      	movs	r3, #0
   15a98:	4619      	mov	r1, r3
   15a9a:	9600      	str	r6, [sp, #0]
   15a9c:	aa1d      	add	r2, sp, #116	; 0x74
   15a9e:	4658      	mov	r0, fp
   15aa0:	f003 fb8e 	bl	191c0 <_wcsrtombs_r>
   15aa4:	4603      	mov	r3, r0
   15aa6:	3301      	adds	r3, #1
   15aa8:	9005      	str	r0, [sp, #20]
   15aaa:	f000 82f1 	beq.w	16090 <_svfprintf_r+0x19e0>
   15aae:	941d      	str	r4, [sp, #116]	; 0x74
   15ab0:	9b05      	ldr	r3, [sp, #20]
   15ab2:	2b00      	cmp	r3, #0
   15ab4:	d04e      	beq.n	15b54 <_svfprintf_r+0x14a4>
   15ab6:	2b63      	cmp	r3, #99	; 0x63
   15ab8:	f300 8118 	bgt.w	15cec <_svfprintf_r+0x163c>
   15abc:	2300      	movs	r3, #0
   15abe:	9307      	str	r3, [sp, #28]
   15ac0:	ac37      	add	r4, sp, #220	; 0xdc
   15ac2:	2208      	movs	r2, #8
   15ac4:	2100      	movs	r1, #0
   15ac6:	4630      	mov	r0, r6
   15ac8:	f7fc fe32 	bl	12730 <memset>
   15acc:	9d05      	ldr	r5, [sp, #20]
   15ace:	9600      	str	r6, [sp, #0]
   15ad0:	462b      	mov	r3, r5
   15ad2:	aa1d      	add	r2, sp, #116	; 0x74
   15ad4:	4621      	mov	r1, r4
   15ad6:	4658      	mov	r0, fp
   15ad8:	f003 fb72 	bl	191c0 <_wcsrtombs_r>
   15adc:	4285      	cmp	r5, r0
   15ade:	f040 837c 	bne.w	161da <_svfprintf_r+0x1b2a>
   15ae2:	9a05      	ldr	r2, [sp, #20]
   15ae4:	2300      	movs	r3, #0
   15ae6:	54a3      	strb	r3, [r4, r2]
   15ae8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   15aec:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   15af0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15af4:	9303      	str	r3, [sp, #12]
   15af6:	9202      	str	r2, [sp, #8]
   15af8:	930f      	str	r3, [sp, #60]	; 0x3c
   15afa:	f7fe bfba 	b.w	14a72 <_svfprintf_r+0x3c2>
   15afe:	212d      	movs	r1, #45	; 0x2d
   15b00:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   15b04:	f7fe bfa4 	b.w	14a50 <_svfprintf_r+0x3a0>
   15b08:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15b0a:	9915      	ldr	r1, [sp, #84]	; 0x54
   15b0c:	ebab 0b03 	sub.w	fp, fp, r3
   15b10:	461a      	mov	r2, r3
   15b12:	4658      	mov	r0, fp
   15b14:	f7fc fefa 	bl	1290c <strncpy>
   15b18:	f89a 2001 	ldrb.w	r2, [sl, #1]
   15b1c:	4b05      	ldr	r3, [pc, #20]	; (15b34 <_svfprintf_r+0x1484>)
   15b1e:	b10a      	cbz	r2, 15b24 <_svfprintf_r+0x1474>
   15b20:	f10a 0a01 	add.w	sl, sl, #1
   15b24:	f04f 0c00 	mov.w	ip, #0
   15b28:	e628      	b.n	1577c <_svfprintf_r+0x10cc>
   15b2a:	bf00      	nop
   15b2c:	20007eb4 	.word	0x20007eb4
   15b30:	20008920 	.word	0x20008920
   15b34:	cccccccd 	.word	0xcccccccd
   15b38:	ee1b 1a10 	vmov	r1, s22
   15b3c:	aa24      	add	r2, sp, #144	; 0x90
   15b3e:	4658      	mov	r0, fp
   15b40:	f003 fc42 	bl	193c8 <__ssprint_r>
   15b44:	2800      	cmp	r0, #0
   15b46:	f47f aa18 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15b4a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   15b4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15b4e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15b52:	e67c      	b.n	1584e <_svfprintf_r+0x119e>
   15b54:	9b05      	ldr	r3, [sp, #20]
   15b56:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15b5a:	930f      	str	r3, [sp, #60]	; 0x3c
   15b5c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   15b60:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   15b64:	9307      	str	r3, [sp, #28]
   15b66:	f7fe bf84 	b.w	14a72 <_svfprintf_r+0x3c2>
   15b6a:	990e      	ldr	r1, [sp, #56]	; 0x38
   15b6c:	9805      	ldr	r0, [sp, #20]
   15b6e:	1865      	adds	r5, r4, r1
   15b70:	1a2d      	subs	r5, r5, r0
   15b72:	1acc      	subs	r4, r1, r3
   15b74:	42a5      	cmp	r5, r4
   15b76:	bfa8      	it	ge
   15b78:	4625      	movge	r5, r4
   15b7a:	f7ff bb4d 	b.w	15218 <_svfprintf_r+0xb68>
   15b7e:	9b08      	ldr	r3, [sp, #32]
   15b80:	9904      	ldr	r1, [sp, #16]
   15b82:	f853 2b04 	ldr.w	r2, [r3], #4
   15b86:	9308      	str	r3, [sp, #32]
   15b88:	8011      	strh	r1, [r2, #0]
   15b8a:	464c      	mov	r4, r9
   15b8c:	f7fe bdc2 	b.w	14714 <_svfprintf_r+0x64>
   15b90:	f913 2b04 	ldrsb.w	r2, [r3], #4
   15b94:	9308      	str	r3, [sp, #32]
   15b96:	17d1      	asrs	r1, r2, #31
   15b98:	460b      	mov	r3, r1
   15b9a:	f7fe bfdb 	b.w	14b54 <_svfprintf_r+0x4a4>
   15b9e:	9a03      	ldr	r2, [sp, #12]
   15ba0:	2102      	movs	r1, #2
   15ba2:	ab22      	add	r3, sp, #136	; 0x88
   15ba4:	9301      	str	r3, [sp, #4]
   15ba6:	ab1d      	add	r3, sp, #116	; 0x74
   15ba8:	9300      	str	r3, [sp, #0]
   15baa:	4658      	mov	r0, fp
   15bac:	ab1b      	add	r3, sp, #108	; 0x6c
   15bae:	eeb0 0b4a 	vmov.f64	d0, d10
   15bb2:	9202      	str	r2, [sp, #8]
   15bb4:	f002 fa14 	bl	17fe0 <_dtoa_r>
   15bb8:	2d47      	cmp	r5, #71	; 0x47
   15bba:	9a02      	ldr	r2, [sp, #8]
   15bbc:	4604      	mov	r4, r0
   15bbe:	f000 8161 	beq.w	15e84 <_svfprintf_r+0x17d4>
   15bc2:	2d46      	cmp	r5, #70	; 0x46
   15bc4:	4410      	add	r0, r2
   15bc6:	d105      	bne.n	15bd4 <_svfprintf_r+0x1524>
   15bc8:	7823      	ldrb	r3, [r4, #0]
   15bca:	2b30      	cmp	r3, #48	; 0x30
   15bcc:	f000 826f 	beq.w	160ae <_svfprintf_r+0x19fe>
   15bd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15bd2:	4410      	add	r0, r2
   15bd4:	eeb5 ab40 	vcmp.f64	d10, #0.0
   15bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15bdc:	f040 8146 	bne.w	15e6c <_svfprintf_r+0x17bc>
   15be0:	4603      	mov	r3, r0
   15be2:	1b1b      	subs	r3, r3, r4
   15be4:	930e      	str	r3, [sp, #56]	; 0x38
   15be6:	2d47      	cmp	r5, #71	; 0x47
   15be8:	f000 8110 	beq.w	15e0c <_svfprintf_r+0x175c>
   15bec:	2d46      	cmp	r5, #70	; 0x46
   15bee:	f000 81b5 	beq.w	15f5c <_svfprintf_r+0x18ac>
   15bf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15bf4:	930c      	str	r3, [sp, #48]	; 0x30
   15bf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15bf8:	2d41      	cmp	r5, #65	; 0x41
   15bfa:	f103 33ff 	add.w	r3, r3, #4294967295
   15bfe:	931b      	str	r3, [sp, #108]	; 0x6c
   15c00:	f000 81e5 	beq.w	15fce <_svfprintf_r+0x191e>
   15c04:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   15c08:	2100      	movs	r1, #0
   15c0a:	2b00      	cmp	r3, #0
   15c0c:	bfb8      	it	lt
   15c0e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   15c10:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   15c14:	bfba      	itte	lt
   15c16:	f1c3 0301 	rsblt	r3, r3, #1
   15c1a:	222d      	movlt	r2, #45	; 0x2d
   15c1c:	222b      	movge	r2, #43	; 0x2b
   15c1e:	2b09      	cmp	r3, #9
   15c20:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   15c24:	f340 81da 	ble.w	15fdc <_svfprintf_r+0x192c>
   15c28:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   15c2c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 1604c <_svfprintf_r+0x199c>
   15c30:	462a      	mov	r2, r5
   15c32:	4610      	mov	r0, r2
   15c34:	fb8c 2103 	smull	r2, r1, ip, r3
   15c38:	17da      	asrs	r2, r3, #31
   15c3a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   15c3e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   15c42:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   15c46:	3130      	adds	r1, #48	; 0x30
   15c48:	f800 1c01 	strb.w	r1, [r0, #-1]
   15c4c:	4619      	mov	r1, r3
   15c4e:	2963      	cmp	r1, #99	; 0x63
   15c50:	4613      	mov	r3, r2
   15c52:	f100 32ff 	add.w	r2, r0, #4294967295
   15c56:	dcec      	bgt.n	15c32 <_svfprintf_r+0x1582>
   15c58:	3330      	adds	r3, #48	; 0x30
   15c5a:	b2d9      	uxtb	r1, r3
   15c5c:	1e83      	subs	r3, r0, #2
   15c5e:	429d      	cmp	r5, r3
   15c60:	f802 1c01 	strb.w	r1, [r2, #-1]
   15c64:	f240 828b 	bls.w	1617e <_svfprintf_r+0x1ace>
   15c68:	4613      	mov	r3, r2
   15c6a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   15c6e:	e001      	b.n	15c74 <_svfprintf_r+0x15c4>
   15c70:	f813 1b01 	ldrb.w	r1, [r3], #1
   15c74:	f802 1b01 	strb.w	r1, [r2], #1
   15c78:	429d      	cmp	r5, r3
   15c7a:	d1f9      	bne.n	15c70 <_svfprintf_r+0x15c0>
   15c7c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   15c80:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   15c84:	1a1b      	subs	r3, r3, r0
   15c86:	4413      	add	r3, r2
   15c88:	aa1e      	add	r2, sp, #120	; 0x78
   15c8a:	1a9b      	subs	r3, r3, r2
   15c8c:	9314      	str	r3, [sp, #80]	; 0x50
   15c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15c90:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15c92:	2b01      	cmp	r3, #1
   15c94:	441a      	add	r2, r3
   15c96:	9205      	str	r2, [sp, #20]
   15c98:	f340 8203 	ble.w	160a2 <_svfprintf_r+0x19f2>
   15c9c:	9b05      	ldr	r3, [sp, #20]
   15c9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15ca0:	4413      	add	r3, r2
   15ca2:	9305      	str	r3, [sp, #20]
   15ca4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   15ca8:	9a05      	ldr	r2, [sp, #20]
   15caa:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   15cae:	2300      	movs	r3, #0
   15cb0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   15cb4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   15cb8:	930f      	str	r3, [sp, #60]	; 0x3c
   15cba:	9202      	str	r2, [sp, #8]
   15cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15cbe:	2b00      	cmp	r3, #0
   15cc0:	f040 80b1 	bne.w	15e26 <_svfprintf_r+0x1776>
   15cc4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15cc8:	9303      	str	r3, [sp, #12]
   15cca:	f7fe bed2 	b.w	14a72 <_svfprintf_r+0x3c2>
   15cce:	4620      	mov	r0, r4
   15cd0:	f7fd f916 	bl	12f00 <strlen>
   15cd4:	4602      	mov	r2, r0
   15cd6:	9005      	str	r0, [sp, #20]
   15cd8:	f7fe bf20 	b.w	14b1c <_svfprintf_r+0x46c>
   15cdc:	ee1b 1a10 	vmov	r1, s22
   15ce0:	aa24      	add	r2, sp, #144	; 0x90
   15ce2:	4658      	mov	r0, fp
   15ce4:	f003 fb70 	bl	193c8 <__ssprint_r>
   15ce8:	f7fe bded 	b.w	148c6 <_svfprintf_r+0x216>
   15cec:	1c59      	adds	r1, r3, #1
   15cee:	4658      	mov	r0, fp
   15cf0:	f7fa fdae 	bl	10850 <_malloc_r>
   15cf4:	4604      	mov	r4, r0
   15cf6:	2800      	cmp	r0, #0
   15cf8:	f000 81ca 	beq.w	16090 <_svfprintf_r+0x19e0>
   15cfc:	9007      	str	r0, [sp, #28]
   15cfe:	e6e0      	b.n	15ac2 <_svfprintf_r+0x1412>
   15d00:	ee1b 1a10 	vmov	r1, s22
   15d04:	aa24      	add	r2, sp, #144	; 0x90
   15d06:	4658      	mov	r0, fp
   15d08:	f003 fb5e 	bl	193c8 <__ssprint_r>
   15d0c:	2800      	cmp	r0, #0
   15d0e:	f47f a934 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15d12:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15d14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15d18:	f7ff ba49 	b.w	151ae <_svfprintf_r+0xafe>
   15d1c:	ee1b 1a10 	vmov	r1, s22
   15d20:	aa24      	add	r2, sp, #144	; 0x90
   15d22:	4658      	mov	r0, fp
   15d24:	f003 fb50 	bl	193c8 <__ssprint_r>
   15d28:	2800      	cmp	r0, #0
   15d2a:	f47f a926 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15d2e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15d32:	991b      	ldr	r1, [sp, #108]	; 0x6c
   15d34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15d38:	e649      	b.n	159ce <_svfprintf_r+0x131e>
   15d3a:	2306      	movs	r3, #6
   15d3c:	9303      	str	r3, [sp, #12]
   15d3e:	f7ff bb83 	b.w	15448 <_svfprintf_r+0xd98>
   15d42:	9b03      	ldr	r3, [sp, #12]
   15d44:	2102      	movs	r1, #2
   15d46:	1c5a      	adds	r2, r3, #1
   15d48:	e72b      	b.n	15ba2 <_svfprintf_r+0x14f2>
   15d4a:	9a03      	ldr	r2, [sp, #12]
   15d4c:	2103      	movs	r1, #3
   15d4e:	e728      	b.n	15ba2 <_svfprintf_r+0x14f2>
   15d50:	a81b      	add	r0, sp, #108	; 0x6c
   15d52:	eeb0 0b4a 	vmov.f64	d0, d10
   15d56:	f002 f817 	bl	17d88 <frexp>
   15d5a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   15d5e:	ee20 0b07 	vmul.f64	d0, d0, d7
   15d62:	eeb5 0b40 	vcmp.f64	d0, #0.0
   15d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15d6a:	d101      	bne.n	15d70 <_svfprintf_r+0x16c0>
   15d6c:	2301      	movs	r3, #1
   15d6e:	931b      	str	r3, [sp, #108]	; 0x6c
   15d70:	48b3      	ldr	r0, [pc, #716]	; (16040 <_svfprintf_r+0x1990>)
   15d72:	9b03      	ldr	r3, [sp, #12]
   15d74:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   15d78:	3b01      	subs	r3, #1
   15d7a:	4622      	mov	r2, r4
   15d7c:	e004      	b.n	15d88 <_svfprintf_r+0x16d8>
   15d7e:	eeb5 0b40 	vcmp.f64	d0, #0.0
   15d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15d86:	d013      	beq.n	15db0 <_svfprintf_r+0x1700>
   15d88:	ee20 0b05 	vmul.f64	d0, d0, d5
   15d8c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   15d90:	f1b3 3fff 	cmp.w	r3, #4294967295
   15d94:	ee17 1a90 	vmov	r1, s15
   15d98:	5c41      	ldrb	r1, [r0, r1]
   15d9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   15d9e:	4694      	mov	ip, r2
   15da0:	ee30 0b46 	vsub.f64	d0, d0, d6
   15da4:	f802 1b01 	strb.w	r1, [r2], #1
   15da8:	4619      	mov	r1, r3
   15daa:	f103 33ff 	add.w	r3, r3, #4294967295
   15dae:	d1e6      	bne.n	15d7e <_svfprintf_r+0x16ce>
   15db0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   15db4:	eeb4 0bc6 	vcmpe.f64	d0, d6
   15db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15dbc:	f300 8148 	bgt.w	16050 <_svfprintf_r+0x19a0>
   15dc0:	eeb4 0b46 	vcmp.f64	d0, d6
   15dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15dc8:	d104      	bne.n	15dd4 <_svfprintf_r+0x1724>
   15dca:	ee17 3a90 	vmov	r3, s15
   15dce:	07db      	lsls	r3, r3, #31
   15dd0:	f100 813e 	bmi.w	16050 <_svfprintf_r+0x19a0>
   15dd4:	2900      	cmp	r1, #0
   15dd6:	db06      	blt.n	15de6 <_svfprintf_r+0x1736>
   15dd8:	1c4b      	adds	r3, r1, #1
   15dda:	4413      	add	r3, r2
   15ddc:	2130      	movs	r1, #48	; 0x30
   15dde:	f802 1b01 	strb.w	r1, [r2], #1
   15de2:	4293      	cmp	r3, r2
   15de4:	d1fb      	bne.n	15dde <_svfprintf_r+0x172e>
   15de6:	1b13      	subs	r3, r2, r4
   15de8:	930e      	str	r3, [sp, #56]	; 0x38
   15dea:	e6fc      	b.n	15be6 <_svfprintf_r+0x1536>
   15dec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   15dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15df0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   15df4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   15df8:	9613      	str	r6, [sp, #76]	; 0x4c
   15dfa:	18e3      	adds	r3, r4, r3
   15dfc:	429d      	cmp	r5, r3
   15dfe:	4629      	mov	r1, r5
   15e00:	bf28      	it	cs
   15e02:	4619      	movcs	r1, r3
   15e04:	4682      	mov	sl, r0
   15e06:	9105      	str	r1, [sp, #20]
   15e08:	f7ff b9d8 	b.w	151bc <_svfprintf_r+0xb0c>
   15e0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15e0e:	930c      	str	r3, [sp, #48]	; 0x30
   15e10:	1cda      	adds	r2, r3, #3
   15e12:	db02      	blt.n	15e1a <_svfprintf_r+0x176a>
   15e14:	9a03      	ldr	r2, [sp, #12]
   15e16:	4293      	cmp	r3, r2
   15e18:	dd0c      	ble.n	15e34 <_svfprintf_r+0x1784>
   15e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15e1c:	3b02      	subs	r3, #2
   15e1e:	930b      	str	r3, [sp, #44]	; 0x2c
   15e20:	f023 0520 	bic.w	r5, r3, #32
   15e24:	e6e7      	b.n	15bf6 <_svfprintf_r+0x1546>
   15e26:	212d      	movs	r1, #45	; 0x2d
   15e28:	2300      	movs	r3, #0
   15e2a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   15e2e:	9303      	str	r3, [sp, #12]
   15e30:	f7fe be22 	b.w	14a78 <_svfprintf_r+0x3c8>
   15e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15e38:	4293      	cmp	r3, r2
   15e3a:	f2c0 80bd 	blt.w	15fb8 <_svfprintf_r+0x1908>
   15e3e:	07f0      	lsls	r0, r6, #31
   15e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15e42:	f140 8132 	bpl.w	160aa <_svfprintf_r+0x19fa>
   15e46:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15e48:	4413      	add	r3, r2
   15e4a:	9305      	str	r3, [sp, #20]
   15e4c:	0571      	lsls	r1, r6, #21
   15e4e:	d503      	bpl.n	15e58 <_svfprintf_r+0x17a8>
   15e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15e52:	2b00      	cmp	r3, #0
   15e54:	f300 8135 	bgt.w	160c2 <_svfprintf_r+0x1a12>
   15e58:	9b05      	ldr	r3, [sp, #20]
   15e5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15e5e:	9302      	str	r3, [sp, #8]
   15e60:	2367      	movs	r3, #103	; 0x67
   15e62:	930b      	str	r3, [sp, #44]	; 0x2c
   15e64:	2300      	movs	r3, #0
   15e66:	930f      	str	r3, [sp, #60]	; 0x3c
   15e68:	930d      	str	r3, [sp, #52]	; 0x34
   15e6a:	e727      	b.n	15cbc <_svfprintf_r+0x160c>
   15e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15e6e:	4283      	cmp	r3, r0
   15e70:	f4bf aeb7 	bcs.w	15be2 <_svfprintf_r+0x1532>
   15e74:	2130      	movs	r1, #48	; 0x30
   15e76:	1c5a      	adds	r2, r3, #1
   15e78:	9222      	str	r2, [sp, #136]	; 0x88
   15e7a:	7019      	strb	r1, [r3, #0]
   15e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15e7e:	4298      	cmp	r0, r3
   15e80:	d8f9      	bhi.n	15e76 <_svfprintf_r+0x17c6>
   15e82:	e6ae      	b.n	15be2 <_svfprintf_r+0x1532>
   15e84:	07f3      	lsls	r3, r6, #31
   15e86:	f100 80a7 	bmi.w	15fd8 <_svfprintf_r+0x1928>
   15e8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15e8c:	e6a9      	b.n	15be2 <_svfprintf_r+0x1532>
   15e8e:	aa24      	add	r2, sp, #144	; 0x90
   15e90:	4658      	mov	r0, fp
   15e92:	9105      	str	r1, [sp, #20]
   15e94:	f003 fa98 	bl	193c8 <__ssprint_r>
   15e98:	2800      	cmp	r0, #0
   15e9a:	f47f a86e 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15e9e:	f896 c000 	ldrb.w	ip, [r6]
   15ea2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15ea4:	9905      	ldr	r1, [sp, #20]
   15ea6:	a827      	add	r0, sp, #156	; 0x9c
   15ea8:	4465      	add	r5, ip
   15eaa:	f7ff bbec 	b.w	15686 <_svfprintf_r+0xfd6>
   15eae:	ee1b 1a10 	vmov	r1, s22
   15eb2:	aa24      	add	r2, sp, #144	; 0x90
   15eb4:	4658      	mov	r0, fp
   15eb6:	f003 fa87 	bl	193c8 <__ssprint_r>
   15eba:	2800      	cmp	r0, #0
   15ebc:	f47f a85d 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15ec0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15ec2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15ec6:	f7ff b96b 	b.w	151a0 <_svfprintf_r+0xaf0>
   15eca:	2378      	movs	r3, #120	; 0x78
   15ecc:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   15ed0:	2330      	movs	r3, #48	; 0x30
   15ed2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   15ed6:	9b03      	ldr	r3, [sp, #12]
   15ed8:	2b63      	cmp	r3, #99	; 0x63
   15eda:	f048 0602 	orr.w	r6, r8, #2
   15ede:	f300 80a6 	bgt.w	1602e <_svfprintf_r+0x197e>
   15ee2:	2300      	movs	r3, #0
   15ee4:	9307      	str	r3, [sp, #28]
   15ee6:	ac37      	add	r4, sp, #220	; 0xdc
   15ee8:	ee18 3a90 	vmov	r3, s17
   15eec:	2b00      	cmp	r3, #0
   15eee:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   15ef2:	db2b      	blt.n	15f4c <_svfprintf_r+0x189c>
   15ef4:	eeb0 ab48 	vmov.f64	d10, d8
   15ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15efa:	f023 0520 	bic.w	r5, r3, #32
   15efe:	2300      	movs	r3, #0
   15f00:	9309      	str	r3, [sp, #36]	; 0x24
   15f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15f04:	2b61      	cmp	r3, #97	; 0x61
   15f06:	f47f aaad 	bne.w	15464 <_svfprintf_r+0xdb4>
   15f0a:	eeb0 0b4a 	vmov.f64	d0, d10
   15f0e:	a81b      	add	r0, sp, #108	; 0x6c
   15f10:	f001 ff3a 	bl	17d88 <frexp>
   15f14:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   15f18:	ee20 0b07 	vmul.f64	d0, d0, d7
   15f1c:	eeb5 0b40 	vcmp.f64	d0, #0.0
   15f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15f24:	d101      	bne.n	15f2a <_svfprintf_r+0x187a>
   15f26:	2301      	movs	r3, #1
   15f28:	931b      	str	r3, [sp, #108]	; 0x6c
   15f2a:	4846      	ldr	r0, [pc, #280]	; (16044 <_svfprintf_r+0x1994>)
   15f2c:	e721      	b.n	15d72 <_svfprintf_r+0x16c2>
   15f2e:	ee1b 1a10 	vmov	r1, s22
   15f32:	aa24      	add	r2, sp, #144	; 0x90
   15f34:	4658      	mov	r0, fp
   15f36:	f003 fa47 	bl	193c8 <__ssprint_r>
   15f3a:	2800      	cmp	r0, #0
   15f3c:	f47f a81d 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15f40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15f42:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15f44:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15f48:	f7ff b94e 	b.w	151e8 <_svfprintf_r+0xb38>
   15f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15f4e:	f023 0520 	bic.w	r5, r3, #32
   15f52:	232d      	movs	r3, #45	; 0x2d
   15f54:	9309      	str	r3, [sp, #36]	; 0x24
   15f56:	eeb1 ab48 	vneg.f64	d10, d8
   15f5a:	e7d2      	b.n	15f02 <_svfprintf_r+0x1852>
   15f5c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15f5e:	920c      	str	r2, [sp, #48]	; 0x30
   15f60:	2a00      	cmp	r2, #0
   15f62:	f006 0301 	and.w	r3, r6, #1
   15f66:	f340 810d 	ble.w	16184 <_svfprintf_r+0x1ad4>
   15f6a:	9903      	ldr	r1, [sp, #12]
   15f6c:	430b      	orrs	r3, r1
   15f6e:	f040 80cf 	bne.w	16110 <_svfprintf_r+0x1a60>
   15f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15f74:	9305      	str	r3, [sp, #20]
   15f76:	2366      	movs	r3, #102	; 0x66
   15f78:	930b      	str	r3, [sp, #44]	; 0x2c
   15f7a:	0572      	lsls	r2, r6, #21
   15f7c:	f100 80a3 	bmi.w	160c6 <_svfprintf_r+0x1a16>
   15f80:	9b05      	ldr	r3, [sp, #20]
   15f82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15f86:	9302      	str	r3, [sp, #8]
   15f88:	e76c      	b.n	15e64 <_svfprintf_r+0x17b4>
   15f8a:	ee1b 1a10 	vmov	r1, s22
   15f8e:	aa24      	add	r2, sp, #144	; 0x90
   15f90:	4658      	mov	r0, fp
   15f92:	f003 fa19 	bl	193c8 <__ssprint_r>
   15f96:	2800      	cmp	r0, #0
   15f98:	f47e afef 	bne.w	14f7a <_svfprintf_r+0x8ca>
   15f9c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   15f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15fa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15fa2:	1b1c      	subs	r4, r3, r4
   15fa4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15fa8:	f7ff b936 	b.w	15218 <_svfprintf_r+0xb68>
   15fac:	2358      	movs	r3, #88	; 0x58
   15fae:	e78d      	b.n	15ecc <_svfprintf_r+0x181c>
   15fb0:	2200      	movs	r2, #0
   15fb2:	9203      	str	r2, [sp, #12]
   15fb4:	f7fe bbda 	b.w	1476c <_svfprintf_r+0xbc>
   15fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15fba:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15fbc:	189a      	adds	r2, r3, r2
   15fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15fc0:	9205      	str	r2, [sp, #20]
   15fc2:	2b00      	cmp	r3, #0
   15fc4:	f340 80ab 	ble.w	1611e <_svfprintf_r+0x1a6e>
   15fc8:	2367      	movs	r3, #103	; 0x67
   15fca:	930b      	str	r3, [sp, #44]	; 0x2c
   15fcc:	e7d5      	b.n	15f7a <_svfprintf_r+0x18ca>
   15fce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15fd0:	320f      	adds	r2, #15
   15fd2:	b2d2      	uxtb	r2, r2
   15fd4:	2101      	movs	r1, #1
   15fd6:	e618      	b.n	15c0a <_svfprintf_r+0x155a>
   15fd8:	18a0      	adds	r0, r4, r2
   15fda:	e5fb      	b.n	15bd4 <_svfprintf_r+0x1524>
   15fdc:	2900      	cmp	r1, #0
   15fde:	f040 80a8 	bne.w	16132 <_svfprintf_r+0x1a82>
   15fe2:	2230      	movs	r2, #48	; 0x30
   15fe4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   15fe8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   15fec:	3330      	adds	r3, #48	; 0x30
   15fee:	f802 3b01 	strb.w	r3, [r2], #1
   15ff2:	ab1e      	add	r3, sp, #120	; 0x78
   15ff4:	1ad3      	subs	r3, r2, r3
   15ff6:	9314      	str	r3, [sp, #80]	; 0x50
   15ff8:	e649      	b.n	15c8e <_svfprintf_r+0x15de>
   15ffa:	3301      	adds	r3, #1
   15ffc:	4912      	ldr	r1, [pc, #72]	; (16048 <_svfprintf_r+0x1998>)
   15ffe:	f8ca 5004 	str.w	r5, [sl, #4]
   16002:	442a      	add	r2, r5
   16004:	2b07      	cmp	r3, #7
   16006:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1600a:	f8ca 1000 	str.w	r1, [sl]
   1600e:	f77f ac33 	ble.w	15878 <_svfprintf_r+0x11c8>
   16012:	ee1b 1a10 	vmov	r1, s22
   16016:	aa24      	add	r2, sp, #144	; 0x90
   16018:	4658      	mov	r0, fp
   1601a:	f003 f9d5 	bl	193c8 <__ssprint_r>
   1601e:	2800      	cmp	r0, #0
   16020:	f47e afab 	bne.w	14f7a <_svfprintf_r+0x8ca>
   16024:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   16028:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1602c:	e426      	b.n	1587c <_svfprintf_r+0x11cc>
   1602e:	1c59      	adds	r1, r3, #1
   16030:	4658      	mov	r0, fp
   16032:	f7fa fc0d 	bl	10850 <_malloc_r>
   16036:	4604      	mov	r4, r0
   16038:	b350      	cbz	r0, 16090 <_svfprintf_r+0x19e0>
   1603a:	9007      	str	r0, [sp, #28]
   1603c:	e754      	b.n	15ee8 <_svfprintf_r+0x1838>
   1603e:	bf00      	nop
   16040:	200010ec 	.word	0x200010ec
   16044:	200010d8 	.word	0x200010d8
   16048:	20008920 	.word	0x20008920
   1604c:	66666667 	.word	0x66666667
   16050:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   16054:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   16058:	f890 c00f 	ldrb.w	ip, [r0, #15]
   1605c:	4561      	cmp	r1, ip
   1605e:	4613      	mov	r3, r2
   16060:	d10a      	bne.n	16078 <_svfprintf_r+0x19c8>
   16062:	f04f 0e30 	mov.w	lr, #48	; 0x30
   16066:	f803 ec01 	strb.w	lr, [r3, #-1]
   1606a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1606c:	1e59      	subs	r1, r3, #1
   1606e:	9122      	str	r1, [sp, #136]	; 0x88
   16070:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   16074:	458c      	cmp	ip, r1
   16076:	d0f6      	beq.n	16066 <_svfprintf_r+0x19b6>
   16078:	2939      	cmp	r1, #57	; 0x39
   1607a:	bf16      	itet	ne
   1607c:	3101      	addne	r1, #1
   1607e:	7a81      	ldrbeq	r1, [r0, #10]
   16080:	b2c9      	uxtbne	r1, r1
   16082:	f803 1c01 	strb.w	r1, [r3, #-1]
   16086:	e6ae      	b.n	15de6 <_svfprintf_r+0x1736>
   16088:	2300      	movs	r3, #0
   1608a:	4690      	mov	r8, r2
   1608c:	9307      	str	r3, [sp, #28]
   1608e:	e760      	b.n	15f52 <_svfprintf_r+0x18a2>
   16090:	ee1b 2a10 	vmov	r2, s22
   16094:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   16098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1609c:	8193      	strh	r3, [r2, #12]
   1609e:	f7fe bc16 	b.w	148ce <_svfprintf_r+0x21e>
   160a2:	07f5      	lsls	r5, r6, #31
   160a4:	f57f adfe 	bpl.w	15ca4 <_svfprintf_r+0x15f4>
   160a8:	e5f8      	b.n	15c9c <_svfprintf_r+0x15ec>
   160aa:	9305      	str	r3, [sp, #20]
   160ac:	e6ce      	b.n	15e4c <_svfprintf_r+0x179c>
   160ae:	eeb5 ab40 	vcmp.f64	d10, #0.0
   160b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   160b6:	f43f ad8b 	beq.w	15bd0 <_svfprintf_r+0x1520>
   160ba:	f1c2 0201 	rsb	r2, r2, #1
   160be:	921b      	str	r2, [sp, #108]	; 0x6c
   160c0:	e587      	b.n	15bd2 <_svfprintf_r+0x1522>
   160c2:	2367      	movs	r3, #103	; 0x67
   160c4:	930b      	str	r3, [sp, #44]	; 0x2c
   160c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   160c8:	780b      	ldrb	r3, [r1, #0]
   160ca:	2bff      	cmp	r3, #255	; 0xff
   160cc:	d079      	beq.n	161c2 <_svfprintf_r+0x1b12>
   160ce:	2500      	movs	r5, #0
   160d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   160d2:	4628      	mov	r0, r5
   160d4:	e003      	b.n	160de <_svfprintf_r+0x1a2e>
   160d6:	3001      	adds	r0, #1
   160d8:	3101      	adds	r1, #1
   160da:	2bff      	cmp	r3, #255	; 0xff
   160dc:	d008      	beq.n	160f0 <_svfprintf_r+0x1a40>
   160de:	4293      	cmp	r3, r2
   160e0:	da06      	bge.n	160f0 <_svfprintf_r+0x1a40>
   160e2:	1ad2      	subs	r2, r2, r3
   160e4:	784b      	ldrb	r3, [r1, #1]
   160e6:	2b00      	cmp	r3, #0
   160e8:	d1f5      	bne.n	160d6 <_svfprintf_r+0x1a26>
   160ea:	780b      	ldrb	r3, [r1, #0]
   160ec:	3501      	adds	r5, #1
   160ee:	e7f4      	b.n	160da <_svfprintf_r+0x1a2a>
   160f0:	920c      	str	r2, [sp, #48]	; 0x30
   160f2:	9113      	str	r1, [sp, #76]	; 0x4c
   160f4:	900d      	str	r0, [sp, #52]	; 0x34
   160f6:	950f      	str	r5, [sp, #60]	; 0x3c
   160f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   160fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   160fc:	9916      	ldr	r1, [sp, #88]	; 0x58
   160fe:	4413      	add	r3, r2
   16100:	9a05      	ldr	r2, [sp, #20]
   16102:	fb01 2303 	mla	r3, r1, r3, r2
   16106:	9305      	str	r3, [sp, #20]
   16108:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1610c:	9302      	str	r3, [sp, #8]
   1610e:	e5d5      	b.n	15cbc <_svfprintf_r+0x160c>
   16110:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16112:	18d3      	adds	r3, r2, r3
   16114:	4419      	add	r1, r3
   16116:	2366      	movs	r3, #102	; 0x66
   16118:	9105      	str	r1, [sp, #20]
   1611a:	930b      	str	r3, [sp, #44]	; 0x2c
   1611c:	e72d      	b.n	15f7a <_svfprintf_r+0x18ca>
   1611e:	f1c3 0301 	rsb	r3, r3, #1
   16122:	441a      	add	r2, r3
   16124:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   16128:	9302      	str	r3, [sp, #8]
   1612a:	2367      	movs	r3, #103	; 0x67
   1612c:	9205      	str	r2, [sp, #20]
   1612e:	930b      	str	r3, [sp, #44]	; 0x2c
   16130:	e698      	b.n	15e64 <_svfprintf_r+0x17b4>
   16132:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   16136:	e759      	b.n	15fec <_svfprintf_r+0x193c>
   16138:	9b03      	ldr	r3, [sp, #12]
   1613a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1613e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   16142:	9305      	str	r3, [sp, #20]
   16144:	e4b4      	b.n	15ab0 <_svfprintf_r+0x1400>
   16146:	ee18 3a90 	vmov	r3, s17
   1614a:	2b00      	cmp	r3, #0
   1614c:	bfb4      	ite	lt
   1614e:	212d      	movlt	r1, #45	; 0x2d
   16150:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   16154:	4c25      	ldr	r4, [pc, #148]	; (161ec <_svfprintf_r+0x1b3c>)
   16156:	4b26      	ldr	r3, [pc, #152]	; (161f0 <_svfprintf_r+0x1b40>)
   16158:	bfb8      	it	lt
   1615a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   1615e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   16162:	f7fe bc79 	b.w	14a58 <_svfprintf_r+0x3a8>
   16166:	9b03      	ldr	r3, [sp, #12]
   16168:	9302      	str	r3, [sp, #8]
   1616a:	9305      	str	r3, [sp, #20]
   1616c:	2373      	movs	r3, #115	; 0x73
   1616e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   16172:	9003      	str	r0, [sp, #12]
   16174:	900f      	str	r0, [sp, #60]	; 0x3c
   16176:	900d      	str	r0, [sp, #52]	; 0x34
   16178:	930b      	str	r3, [sp, #44]	; 0x2c
   1617a:	f7fe bc7a 	b.w	14a72 <_svfprintf_r+0x3c2>
   1617e:	2302      	movs	r3, #2
   16180:	9314      	str	r3, [sp, #80]	; 0x50
   16182:	e584      	b.n	15c8e <_svfprintf_r+0x15de>
   16184:	9a03      	ldr	r2, [sp, #12]
   16186:	4313      	orrs	r3, r2
   16188:	d105      	bne.n	16196 <_svfprintf_r+0x1ae6>
   1618a:	2301      	movs	r3, #1
   1618c:	2266      	movs	r2, #102	; 0x66
   1618e:	9302      	str	r3, [sp, #8]
   16190:	920b      	str	r2, [sp, #44]	; 0x2c
   16192:	9305      	str	r3, [sp, #20]
   16194:	e666      	b.n	15e64 <_svfprintf_r+0x17b4>
   16196:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16198:	3301      	adds	r3, #1
   1619a:	441a      	add	r2, r3
   1619c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   161a0:	9302      	str	r3, [sp, #8]
   161a2:	2366      	movs	r3, #102	; 0x66
   161a4:	9205      	str	r2, [sp, #20]
   161a6:	930b      	str	r3, [sp, #44]	; 0x2c
   161a8:	e65c      	b.n	15e64 <_svfprintf_r+0x17b4>
   161aa:	9a08      	ldr	r2, [sp, #32]
   161ac:	f899 3001 	ldrb.w	r3, [r9, #1]
   161b0:	4689      	mov	r9, r1
   161b2:	f852 1b04 	ldr.w	r1, [r2], #4
   161b6:	9208      	str	r2, [sp, #32]
   161b8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   161bc:	9103      	str	r1, [sp, #12]
   161be:	f7fe bad3 	b.w	14768 <_svfprintf_r+0xb8>
   161c2:	2300      	movs	r3, #0
   161c4:	930f      	str	r3, [sp, #60]	; 0x3c
   161c6:	930d      	str	r3, [sp, #52]	; 0x34
   161c8:	e796      	b.n	160f8 <_svfprintf_r+0x1a48>
   161ca:	230c      	movs	r3, #12
   161cc:	f8cb 3000 	str.w	r3, [fp]
   161d0:	f04f 33ff 	mov.w	r3, #4294967295
   161d4:	9304      	str	r3, [sp, #16]
   161d6:	f7fe bb81 	b.w	148dc <_svfprintf_r+0x22c>
   161da:	ee1b 2a10 	vmov	r2, s22
   161de:	8993      	ldrh	r3, [r2, #12]
   161e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   161e4:	8193      	strh	r3, [r2, #12]
   161e6:	f7fe bec8 	b.w	14f7a <_svfprintf_r+0x8ca>
   161ea:	bf00      	nop
   161ec:	200010d4 	.word	0x200010d4
   161f0:	20000b84 	.word	0x20000b84

000161f4 <__ssvfscanf_r>:
   161f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161f8:	ed2d 8b02 	vpush	{d8}
   161fc:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
   16200:	468b      	mov	fp, r1
   16202:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   16206:	af02      	add	r7, sp, #8
   16208:	048c      	lsls	r4, r1, #18
   1620a:	4681      	mov	r9, r0
   1620c:	64fa      	str	r2, [r7, #76]	; 0x4c
   1620e:	633b      	str	r3, [r7, #48]	; 0x30
   16210:	d409      	bmi.n	16226 <__ssvfscanf_r+0x32>
   16212:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   16216:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1621a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1621e:	f8ab 100c 	strh.w	r1, [fp, #12]
   16222:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   16226:	2300      	movs	r3, #0
   16228:	461c      	mov	r4, r3
   1622a:	2208      	movs	r2, #8
   1622c:	4619      	mov	r1, r3
   1622e:	f107 0058 	add.w	r0, r7, #88	; 0x58
   16232:	62fb      	str	r3, [r7, #44]	; 0x2c
   16234:	46a2      	mov	sl, r4
   16236:	f7fc fa7b 	bl	12730 <memset>
   1623a:	643c      	str	r4, [r7, #64]	; 0x40
   1623c:	627c      	str	r4, [r7, #36]	; 0x24
   1623e:	63bc      	str	r4, [r7, #56]	; 0x38
   16240:	647c      	str	r4, [r7, #68]	; 0x44
   16242:	4b83      	ldr	r3, [pc, #524]	; (16450 <__ssvfscanf_r+0x25c>)
   16244:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   16248:	f7fc fb92 	bl	12970 <__locale_mb_cur_max>
   1624c:	f107 0258 	add.w	r2, r7, #88	; 0x58
   16250:	4603      	mov	r3, r0
   16252:	9200      	str	r2, [sp, #0]
   16254:	f107 0154 	add.w	r1, r7, #84	; 0x54
   16258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1625a:	4648      	mov	r0, r9
   1625c:	47a0      	blx	r4
   1625e:	1e05      	subs	r5, r0, #0
   16260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16262:	db33      	blt.n	162cc <__ssvfscanf_r+0xd8>
   16264:	442b      	add	r3, r5
   16266:	64fb      	str	r3, [r7, #76]	; 0x4c
   16268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1626a:	462e      	mov	r6, r5
   1626c:	2b00      	cmp	r3, #0
   1626e:	f000 80b6 	beq.w	163de <__ssvfscanf_r+0x1ea>
   16272:	2d01      	cmp	r5, #1
   16274:	d038      	beq.n	162e8 <__ssvfscanf_r+0xf4>
   16276:	2b25      	cmp	r3, #37	; 0x25
   16278:	d040      	beq.n	162fc <__ssvfscanf_r+0x108>
   1627a:	2d00      	cmp	r5, #0
   1627c:	d0e1      	beq.n	16242 <__ssvfscanf_r+0x4e>
   1627e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16280:	1b9e      	subs	r6, r3, r6
   16282:	f8db 3004 	ldr.w	r3, [fp, #4]
   16286:	1e74      	subs	r4, r6, #1
   16288:	2b00      	cmp	r3, #0
   1628a:	f340 8098 	ble.w	163be <__ssvfscanf_r+0x1ca>
   1628e:	f8db 1000 	ldr.w	r1, [fp]
   16292:	f894 c001 	ldrb.w	ip, [r4, #1]
   16296:	f891 e000 	ldrb.w	lr, [r1]
   1629a:	1ca3      	adds	r3, r4, #2
   1629c:	eb0a 0003 	add.w	r0, sl, r3
   162a0:	45e6      	cmp	lr, ip
   162a2:	f101 0101 	add.w	r1, r1, #1
   162a6:	eba3 0206 	sub.w	r2, r3, r6
   162aa:	f104 0401 	add.w	r4, r4, #1
   162ae:	eba0 0006 	sub.w	r0, r0, r6
   162b2:	f040 8094 	bne.w	163de <__ssvfscanf_r+0x1ea>
   162b6:	f8db 3004 	ldr.w	r3, [fp, #4]
   162ba:	f8cb 1000 	str.w	r1, [fp]
   162be:	3b01      	subs	r3, #1
   162c0:	42aa      	cmp	r2, r5
   162c2:	f8cb 3004 	str.w	r3, [fp, #4]
   162c6:	dbdf      	blt.n	16288 <__ssvfscanf_r+0x94>
   162c8:	4682      	mov	sl, r0
   162ca:	e7ba      	b.n	16242 <__ssvfscanf_r+0x4e>
   162cc:	3301      	adds	r3, #1
   162ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   162d0:	2208      	movs	r2, #8
   162d2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   162d6:	2100      	movs	r1, #0
   162d8:	f107 0058 	add.w	r0, r7, #88	; 0x58
   162dc:	657b      	str	r3, [r7, #84]	; 0x54
   162de:	f7fc fa27 	bl	12730 <memset>
   162e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   162e4:	2b00      	cmp	r3, #0
   162e6:	d07a      	beq.n	163de <__ssvfscanf_r+0x1ea>
   162e8:	4e5a      	ldr	r6, [pc, #360]	; (16454 <__ssvfscanf_r+0x260>)
   162ea:	5cf2      	ldrb	r2, [r6, r3]
   162ec:	0710      	lsls	r0, r2, #28
   162ee:	f100 851c 	bmi.w	16d2a <__ssvfscanf_r+0xb36>
   162f2:	2b25      	cmp	r3, #37	; 0x25
   162f4:	f040 8086 	bne.w	16404 <__ssvfscanf_r+0x210>
   162f8:	2501      	movs	r5, #1
   162fa:	462e      	mov	r6, r5
   162fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   162fe:	2400      	movs	r4, #0
   16300:	7802      	ldrb	r2, [r0, #0]
   16302:	46a0      	mov	r8, r4
   16304:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   16308:	1c41      	adds	r1, r0, #1
   1630a:	2b55      	cmp	r3, #85	; 0x55
   1630c:	d867      	bhi.n	163de <__ssvfscanf_r+0x1ea>
   1630e:	e8df f013 	tbh	[pc, r3, lsl #1]
   16312:	070a      	.short	0x070a
   16314:	00660066 	.word	0x00660066
   16318:	00660066 	.word	0x00660066
   1631c:	00660701 	.word	0x00660701
   16320:	00660066 	.word	0x00660066
   16324:	00660066 	.word	0x00660066
   16328:	060c060c 	.word	0x060c060c
   1632c:	060c060c 	.word	0x060c060c
   16330:	060c060c 	.word	0x060c060c
   16334:	060c060c 	.word	0x060c060c
   16338:	060c060c 	.word	0x060c060c
   1633c:	00660066 	.word	0x00660066
   16340:	00660066 	.word	0x00660066
   16344:	00660066 	.word	0x00660066
   16348:	06180066 	.word	0x06180066
   1634c:	048e0066 	.word	0x048e0066
   16350:	061804c9 	.word	0x061804c9
   16354:	06180618 	.word	0x06180618
   16358:	00660066 	.word	0x00660066
   1635c:	00660066 	.word	0x00660066
   16360:	00660082 	.word	0x00660082
   16364:	04bf0066 	.word	0x04bf0066
   16368:	00660066 	.word	0x00660066
   1636c:	00890066 	.word	0x00890066
   16370:	00660066 	.word	0x00660066
   16374:	00660066 	.word	0x00660066
   16378:	0066066b 	.word	0x0066066b
   1637c:	06dd0066 	.word	0x06dd0066
   16380:	00660066 	.word	0x00660066
   16384:	00660066 	.word	0x00660066
   16388:	06180066 	.word	0x06180066
   1638c:	04900066 	.word	0x04900066
   16390:	061804cb 	.word	0x061804cb
   16394:	06180618 	.word	0x06180618
   16398:	06d206be 	.word	0x06d206be
   1639c:	00660082 	.word	0x00660082
   163a0:	06f306e7 	.word	0x06f306e7
   163a4:	04c106ac 	.word	0x04c106ac
   163a8:	006606da 	.word	0x006606da
   163ac:	008b0066 	.word	0x008b0066
   163b0:	06ca007d 	.word	0x06ca007d
   163b4:	00660066 	.word	0x00660066
   163b8:	0066066b 	.word	0x0066066b
   163bc:	007d      	.short	0x007d
   163be:	4659      	mov	r1, fp
   163c0:	4648      	mov	r0, r9
   163c2:	f003 f8c1 	bl	19548 <__ssrefill_r>
   163c6:	2800      	cmp	r0, #0
   163c8:	f43f af61 	beq.w	1628e <__ssvfscanf_r+0x9a>
   163cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   163ce:	2b00      	cmp	r3, #0
   163d0:	f001 8052 	beq.w	17478 <__ssvfscanf_r+0x1284>
   163d4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   163d8:	065a      	lsls	r2, r3, #25
   163da:	f101 804d 	bmi.w	17478 <__ssvfscanf_r+0x1284>
   163de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   163e0:	b143      	cbz	r3, 163f4 <__ssvfscanf_r+0x200>
   163e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   163e4:	f8d3 8000 	ldr.w	r8, [r3]
   163e8:	f1b8 0f00 	cmp.w	r8, #0
   163ec:	d002      	beq.n	163f4 <__ssvfscanf_r+0x200>
   163ee:	4640      	mov	r0, r8
   163f0:	f7fa fa26 	bl	10840 <free>
   163f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
   163f6:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
   163fa:	46bd      	mov	sp, r7
   163fc:	ecbd 8b02 	vpop	{d8}
   16400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16406:	2501      	movs	r5, #1
   16408:	1e5e      	subs	r6, r3, #1
   1640a:	e73a      	b.n	16282 <__ssvfscanf_r+0x8e>
   1640c:	0723      	lsls	r3, r4, #28
   1640e:	d1e6      	bne.n	163de <__ssvfscanf_r+0x1ea>
   16410:	7842      	ldrb	r2, [r0, #1]
   16412:	4608      	mov	r0, r1
   16414:	e776      	b.n	16304 <__ssvfscanf_r+0x110>
   16416:	0722      	lsls	r2, r4, #28
   16418:	d1e1      	bne.n	163de <__ssvfscanf_r+0x1ea>
   1641a:	7842      	ldrb	r2, [r0, #1]
   1641c:	f044 0402 	orr.w	r4, r4, #2
   16420:	4608      	mov	r0, r1
   16422:	e76f      	b.n	16304 <__ssvfscanf_r+0x110>
   16424:	f044 0401 	orr.w	r4, r4, #1
   16428:	64f9      	str	r1, [r7, #76]	; 0x4c
   1642a:	2502      	movs	r5, #2
   1642c:	f8db 3004 	ldr.w	r3, [fp, #4]
   16430:	2b00      	cmp	r3, #0
   16432:	f340 8408 	ble.w	16c46 <__ssvfscanf_r+0xa52>
   16436:	0660      	lsls	r0, r4, #25
   16438:	f140 840f 	bpl.w	16c5a <__ssvfscanf_r+0xa66>
   1643c:	1e6b      	subs	r3, r5, #1
   1643e:	2b03      	cmp	r3, #3
   16440:	f201 80eb 	bhi.w	1761a <__ssvfscanf_r+0x1426>
   16444:	e8df f013 	tbh	[pc, r3, lsl #1]
   16448:	01f1027b 	.word	0x01f1027b
   1644c:	0008014b 	.word	0x0008014b
   16450:	20008e4c 	.word	0x20008e4c
   16454:	20000f3d 	.word	0x20000f3d
   16458:	4648      	mov	r0, r9
   1645a:	f001 fc8f 	bl	17d7c <_localeconv_r>
   1645e:	6803      	ldr	r3, [r0, #0]
   16460:	623b      	str	r3, [r7, #32]
   16462:	f108 33ff 	add.w	r3, r8, #4294967295
   16466:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   1646a:	f240 855a 	bls.w	16f22 <__ssvfscanf_r+0xd2e>
   1646e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
   16472:	eb08 0305 	add.w	r3, r8, r5
   16476:	613b      	str	r3, [r7, #16]
   16478:	f240 185d 	movw	r8, #349	; 0x15d
   1647c:	2600      	movs	r6, #0
   1647e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   16482:	ee08 9a10 	vmov	s16, r9
   16486:	e9c7 6605 	strd	r6, r6, [r7, #20]
   1648a:	63fe      	str	r6, [r7, #60]	; 0x3c
   1648c:	637e      	str	r6, [r7, #52]	; 0x34
   1648e:	61fe      	str	r6, [r7, #28]
   16490:	64be      	str	r6, [r7, #72]	; 0x48
   16492:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   16496:	62bb      	str	r3, [r7, #40]	; 0x28
   16498:	461d      	mov	r5, r3
   1649a:	4646      	mov	r6, r8
   1649c:	f8db 1000 	ldr.w	r1, [fp]
   164a0:	780a      	ldrb	r2, [r1, #0]
   164a2:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   164a6:	2b4e      	cmp	r3, #78	; 0x4e
   164a8:	d850      	bhi.n	1654c <__ssvfscanf_r+0x358>
   164aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   164ae:	037e      	.short	0x037e
   164b0:	037e004f 	.word	0x037e004f
   164b4:	004f004f 	.word	0x004f004f
   164b8:	00a600a3 	.word	0x00a600a3
   164bc:	00a600a6 	.word	0x00a600a6
   164c0:	00a600a6 	.word	0x00a600a6
   164c4:	00a600a6 	.word	0x00a600a6
   164c8:	00a600a6 	.word	0x00a600a6
   164cc:	004f004f 	.word	0x004f004f
   164d0:	004f004f 	.word	0x004f004f
   164d4:	004f004f 	.word	0x004f004f
   164d8:	0374004f 	.word	0x0374004f
   164dc:	030b030b 	.word	0x030b030b
   164e0:	039e030b 	.word	0x039e030b
   164e4:	004f0394 	.word	0x004f0394
   164e8:	0384004f 	.word	0x0384004f
   164ec:	004f004f 	.word	0x004f004f
   164f0:	004f004f 	.word	0x004f004f
   164f4:	004f035d 	.word	0x004f035d
   164f8:	004f033a 	.word	0x004f033a
   164fc:	004f004f 	.word	0x004f004f
   16500:	004f0333 	.word	0x004f0333
   16504:	004f004f 	.word	0x004f004f
   16508:	036d031e 	.word	0x036d031e
   1650c:	004f004f 	.word	0x004f004f
   16510:	004f004f 	.word	0x004f004f
   16514:	004f004f 	.word	0x004f004f
   16518:	0374004f 	.word	0x0374004f
   1651c:	030b030b 	.word	0x030b030b
   16520:	039e030b 	.word	0x039e030b
   16524:	004f0394 	.word	0x004f0394
   16528:	0384004f 	.word	0x0384004f
   1652c:	004f004f 	.word	0x004f004f
   16530:	004f004f 	.word	0x004f004f
   16534:	004f035d 	.word	0x004f035d
   16538:	004f033a 	.word	0x004f033a
   1653c:	004f004f 	.word	0x004f004f
   16540:	004f0333 	.word	0x004f0333
   16544:	004f004f 	.word	0x004f004f
   16548:	036d031e 	.word	0x036d031e
   1654c:	05a0      	lsls	r0, r4, #22
   1654e:	d56f      	bpl.n	16630 <__ssvfscanf_r+0x43c>
   16550:	6a38      	ldr	r0, [r7, #32]
   16552:	7803      	ldrb	r3, [r0, #0]
   16554:	4293      	cmp	r3, r2
   16556:	d16b      	bne.n	16630 <__ssvfscanf_r+0x43c>
   16558:	e9c7 4502 	strd	r4, r5, [r7, #8]
   1655c:	607e      	str	r6, [r7, #4]
   1655e:	4681      	mov	r9, r0
   16560:	ee18 6a10 	vmov	r6, s16
   16564:	f04f 0800 	mov.w	r8, #0
   16568:	465c      	mov	r4, fp
   1656a:	e007      	b.n	1657c <__ssvfscanf_r+0x388>
   1656c:	6021      	str	r1, [r4, #0]
   1656e:	f891 e000 	ldrb.w	lr, [r1]
   16572:	f899 0000 	ldrb.w	r0, [r9]
   16576:	4586      	cmp	lr, r0
   16578:	d11c      	bne.n	165b4 <__ssvfscanf_r+0x3c0>
   1657a:	46da      	mov	sl, fp
   1657c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   16580:	4645      	mov	r5, r8
   16582:	f10a 0b01 	add.w	fp, sl, #1
   16586:	3101      	adds	r1, #1
   16588:	f108 0801 	add.w	r8, r8, #1
   1658c:	2800      	cmp	r0, #0
   1658e:	f000 8664 	beq.w	1725a <__ssvfscanf_r+0x1066>
   16592:	6860      	ldr	r0, [r4, #4]
   16594:	3801      	subs	r0, #1
   16596:	2800      	cmp	r0, #0
   16598:	6060      	str	r0, [r4, #4]
   1659a:	dce7      	bgt.n	1656c <__ssvfscanf_r+0x378>
   1659c:	4621      	mov	r1, r4
   1659e:	4630      	mov	r0, r6
   165a0:	f002 ffd2 	bl	19548 <__ssrefill_r>
   165a4:	b930      	cbnz	r0, 165b4 <__ssvfscanf_r+0x3c0>
   165a6:	6821      	ldr	r1, [r4, #0]
   165a8:	f899 0000 	ldrb.w	r0, [r9]
   165ac:	f891 e000 	ldrb.w	lr, [r1]
   165b0:	4586      	cmp	lr, r0
   165b2:	d0e2      	beq.n	1657a <__ssvfscanf_r+0x386>
   165b4:	46a3      	mov	fp, r4
   165b6:	6a3a      	ldr	r2, [r7, #32]
   165b8:	68bc      	ldr	r4, [r7, #8]
   165ba:	613d      	str	r5, [r7, #16]
   165bc:	462b      	mov	r3, r5
   165be:	46b1      	mov	r9, r6
   165c0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   165c2:	68fd      	ldr	r5, [r7, #12]
   165c4:	64bd      	str	r5, [r7, #72]	; 0x48
   165c6:	3301      	adds	r3, #1
   165c8:	465d      	mov	r5, fp
   165ca:	eb02 0803 	add.w	r8, r2, r3
   165ce:	46b3      	mov	fp, r6
   165d0:	4626      	mov	r6, r4
   165d2:	4614      	mov	r4, r2
   165d4:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
   165d8:	462a      	mov	r2, r5
   165da:	4648      	mov	r0, r9
   165dc:	f002 ff74 	bl	194c8 <_sungetc_r>
   165e0:	4544      	cmp	r4, r8
   165e2:	d1f7      	bne.n	165d4 <__ssvfscanf_r+0x3e0>
   165e4:	693b      	ldr	r3, [r7, #16]
   165e6:	4634      	mov	r4, r6
   165e8:	ebaa 0a03 	sub.w	sl, sl, r3
   165ec:	465e      	mov	r6, fp
   165ee:	46ab      	mov	fp, r5
   165f0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   165f2:	e020      	b.n	16636 <__ssvfscanf_r+0x442>
   165f4:	05e0      	lsls	r0, r4, #23
   165f6:	f100 8501 	bmi.w	16ffc <__ssvfscanf_r+0xe08>
   165fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   165fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   165fe:	42d9      	cmn	r1, r3
   16600:	d116      	bne.n	16630 <__ssvfscanf_r+0x43c>
   16602:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   16606:	f805 2b01 	strb.w	r2, [r5], #1
   1660a:	3e01      	subs	r6, #1
   1660c:	f8db 3004 	ldr.w	r3, [fp, #4]
   16610:	3b01      	subs	r3, #1
   16612:	2b00      	cmp	r3, #0
   16614:	f10a 0a01 	add.w	sl, sl, #1
   16618:	f8cb 3004 	str.w	r3, [fp, #4]
   1661c:	f340 836f 	ble.w	16cfe <__ssvfscanf_r+0xb0a>
   16620:	f8db 3000 	ldr.w	r3, [fp]
   16624:	3301      	adds	r3, #1
   16626:	f8cb 3000 	str.w	r3, [fp]
   1662a:	2e00      	cmp	r6, #0
   1662c:	f47f af36 	bne.w	1649c <__ssvfscanf_r+0x2a8>
   16630:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   16632:	ee18 9a10 	vmov	r9, s16
   16636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16638:	2b00      	cmp	r3, #0
   1663a:	f040 82dc 	bne.w	16bf6 <__ssvfscanf_r+0xa02>
   1663e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16640:	3b01      	subs	r3, #1
   16642:	2b01      	cmp	r3, #1
   16644:	f241 8016 	bls.w	17674 <__ssvfscanf_r+0x1480>
   16648:	1e73      	subs	r3, r6, #1
   1664a:	2b06      	cmp	r3, #6
   1664c:	f240 8627 	bls.w	1729e <__ssvfscanf_r+0x10aa>
   16650:	05e3      	lsls	r3, r4, #23
   16652:	d51b      	bpl.n	1668c <__ssvfscanf_r+0x498>
   16654:	0566      	lsls	r6, r4, #21
   16656:	f101 80b5 	bmi.w	177c4 <__ssvfscanf_r+0x15d0>
   1665a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1665e:	2965      	cmp	r1, #101	; 0x65
   16660:	f105 33ff 	add.w	r3, r5, #4294967295
   16664:	f10a 36ff 	add.w	r6, sl, #4294967295
   16668:	d00a      	beq.n	16680 <__ssvfscanf_r+0x48c>
   1666a:	2945      	cmp	r1, #69	; 0x45
   1666c:	d008      	beq.n	16680 <__ssvfscanf_r+0x48c>
   1666e:	465a      	mov	r2, fp
   16670:	4648      	mov	r0, r9
   16672:	f002 ff29 	bl	194c8 <_sungetc_r>
   16676:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   1667a:	f1aa 0602 	sub.w	r6, sl, #2
   1667e:	1eab      	subs	r3, r5, #2
   16680:	465a      	mov	r2, fp
   16682:	4648      	mov	r0, r9
   16684:	46b2      	mov	sl, r6
   16686:	461d      	mov	r5, r3
   16688:	f002 ff1e 	bl	194c8 <_sungetc_r>
   1668c:	f014 0210 	ands.w	r2, r4, #16
   16690:	f47f add7 	bne.w	16242 <__ssvfscanf_r+0x4e>
   16694:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   16698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1669c:	702a      	strb	r2, [r5, #0]
   1669e:	f000 84d2 	beq.w	17046 <__ssvfscanf_r+0xe52>
   166a2:	69bb      	ldr	r3, [r7, #24]
   166a4:	2b00      	cmp	r3, #0
   166a6:	f040 872c 	bne.w	17502 <__ssvfscanf_r+0x130e>
   166aa:	4648      	mov	r0, r9
   166ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   166ae:	2200      	movs	r2, #0
   166b0:	f7fb fcba 	bl	12028 <_strtod_r>
   166b4:	07e0      	lsls	r0, r4, #31
   166b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   166b8:	f100 85c9 	bmi.w	1724e <__ssvfscanf_r+0x105a>
   166bc:	07a1      	lsls	r1, r4, #30
   166be:	f100 85c6 	bmi.w	1724e <__ssvfscanf_r+0x105a>
   166c2:	eeb4 0b40 	vcmp.f64	d0, d0
   166c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   166ca:	f853 4b04 	ldr.w	r4, [r3], #4
   166ce:	f180 86f4 	bvs.w	174ba <__ssvfscanf_r+0x12c6>
   166d2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   166d6:	633b      	str	r3, [r7, #48]	; 0x30
   166d8:	ed84 0a00 	vstr	s0, [r4]
   166dc:	e3a2      	b.n	16e24 <__ssvfscanf_r+0xc30>
   166de:	f108 33ff 	add.w	r3, r8, #4294967295
   166e2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   166e6:	f240 83a2 	bls.w	16e2e <__ssvfscanf_r+0xc3a>
   166ea:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   166ee:	eb08 0302 	add.w	r3, r8, r2
   166f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   166f4:	f240 185d 	movw	r8, #349	; 0x15d
   166f8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   166fc:	2200      	movs	r2, #0
   166fe:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   16700:	62bb      	str	r3, [r7, #40]	; 0x28
   16702:	4659      	mov	r1, fp
   16704:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   16708:	46d3      	mov	fp, sl
   1670a:	461d      	mov	r5, r3
   1670c:	4692      	mov	sl, r2
   1670e:	680a      	ldr	r2, [r1, #0]
   16710:	7810      	ldrb	r0, [r2, #0]
   16712:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   16716:	2b4d      	cmp	r3, #77	; 0x4d
   16718:	d860      	bhi.n	167dc <__ssvfscanf_r+0x5e8>
   1671a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1671e:	0282      	.short	0x0282
   16720:	0282005f 	.word	0x0282005f
   16724:	005f005f 	.word	0x005f005f
   16728:	01e002cd 	.word	0x01e002cd
   1672c:	01e001e0 	.word	0x01e001e0
   16730:	01e001e0 	.word	0x01e001e0
   16734:	01e001e0 	.word	0x01e001e0
   16738:	026f026f 	.word	0x026f026f
   1673c:	005f005f 	.word	0x005f005f
   16740:	005f005f 	.word	0x005f005f
   16744:	005f005f 	.word	0x005f005f
   16748:	004e005f 	.word	0x004e005f
   1674c:	004e004e 	.word	0x004e004e
   16750:	004e004e 	.word	0x004e004e
   16754:	005f004e 	.word	0x005f004e
   16758:	005f005f 	.word	0x005f005f
   1675c:	005f005f 	.word	0x005f005f
   16760:	005f005f 	.word	0x005f005f
   16764:	005f005f 	.word	0x005f005f
   16768:	005f005f 	.word	0x005f005f
   1676c:	005f005f 	.word	0x005f005f
   16770:	005f005f 	.word	0x005f005f
   16774:	005f005f 	.word	0x005f005f
   16778:	005f0276 	.word	0x005f0276
   1677c:	005f005f 	.word	0x005f005f
   16780:	005f005f 	.word	0x005f005f
   16784:	005f005f 	.word	0x005f005f
   16788:	004e005f 	.word	0x004e005f
   1678c:	004e004e 	.word	0x004e004e
   16790:	004e004e 	.word	0x004e004e
   16794:	005f004e 	.word	0x005f004e
   16798:	005f005f 	.word	0x005f005f
   1679c:	005f005f 	.word	0x005f005f
   167a0:	005f005f 	.word	0x005f005f
   167a4:	005f005f 	.word	0x005f005f
   167a8:	005f005f 	.word	0x005f005f
   167ac:	005f005f 	.word	0x005f005f
   167b0:	005f005f 	.word	0x005f005f
   167b4:	005f005f 	.word	0x005f005f
   167b8:	0276      	.short	0x0276
   167ba:	2e0a      	cmp	r6, #10
   167bc:	dd0e      	ble.n	167dc <__ssvfscanf_r+0x5e8>
   167be:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   167c2:	684b      	ldr	r3, [r1, #4]
   167c4:	f805 0b01 	strb.w	r0, [r5], #1
   167c8:	3b01      	subs	r3, #1
   167ca:	2b00      	cmp	r3, #0
   167cc:	604b      	str	r3, [r1, #4]
   167ce:	f340 828d 	ble.w	16cec <__ssvfscanf_r+0xaf8>
   167d2:	3201      	adds	r2, #1
   167d4:	600a      	str	r2, [r1, #0]
   167d6:	f1b8 0801 	subs.w	r8, r8, #1
   167da:	d198      	bne.n	1670e <__ssvfscanf_r+0x51a>
   167dc:	05e0      	lsls	r0, r4, #23
   167de:	46d0      	mov	r8, sl
   167e0:	63be      	str	r6, [r7, #56]	; 0x38
   167e2:	46da      	mov	sl, fp
   167e4:	468b      	mov	fp, r1
   167e6:	d507      	bpl.n	167f8 <__ssvfscanf_r+0x604>
   167e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   167ea:	429d      	cmp	r5, r3
   167ec:	f200 8422 	bhi.w	17034 <__ssvfscanf_r+0xe40>
   167f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   167f2:	429d      	cmp	r5, r3
   167f4:	f43f adf3 	beq.w	163de <__ssvfscanf_r+0x1ea>
   167f8:	f014 0210 	ands.w	r2, r4, #16
   167fc:	d110      	bne.n	16820 <__ssvfscanf_r+0x62c>
   167fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16802:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   16804:	702a      	strb	r2, [r5, #0]
   16806:	4648      	mov	r0, r9
   16808:	47b0      	blx	r6
   1680a:	06a1      	lsls	r1, r4, #26
   1680c:	f140 8408 	bpl.w	17020 <__ssvfscanf_r+0xe2c>
   16810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16812:	f853 2b04 	ldr.w	r2, [r3], #4
   16816:	6010      	str	r0, [r2, #0]
   16818:	633b      	str	r3, [r7, #48]	; 0x30
   1681a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1681c:	3301      	adds	r3, #1
   1681e:	647b      	str	r3, [r7, #68]	; 0x44
   16820:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16822:	1aed      	subs	r5, r5, r3
   16824:	4445      	add	r5, r8
   16826:	44aa      	add	sl, r5
   16828:	e50b      	b.n	16242 <__ssvfscanf_r+0x4e>
   1682a:	f1b8 0f00 	cmp.w	r8, #0
   1682e:	bf08      	it	eq
   16830:	f04f 38ff 	moveq.w	r8, #4294967295
   16834:	07e0      	lsls	r0, r4, #31
   16836:	f140 8295 	bpl.w	16d64 <__ssvfscanf_r+0xb70>
   1683a:	f014 0310 	ands.w	r3, r4, #16
   1683e:	637b      	str	r3, [r7, #52]	; 0x34
   16840:	f040 8474 	bne.w	1712c <__ssvfscanf_r+0xf38>
   16844:	0621      	lsls	r1, r4, #24
   16846:	f140 8666 	bpl.w	17516 <__ssvfscanf_r+0x1322>
   1684a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1684c:	f854 3b04 	ldr.w	r3, [r4], #4
   16850:	63fb      	str	r3, [r7, #60]	; 0x3c
   16852:	2b00      	cmp	r3, #0
   16854:	f43f adc3 	beq.w	163de <__ssvfscanf_r+0x1ea>
   16858:	2080      	movs	r0, #128	; 0x80
   1685a:	f7f9 ffe9 	bl	10830 <malloc>
   1685e:	64b8      	str	r0, [r7, #72]	; 0x48
   16860:	2800      	cmp	r0, #0
   16862:	f000 8778 	beq.w	17756 <__ssvfscanf_r+0x1562>
   16866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16868:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1686a:	601a      	str	r2, [r3, #0]
   1686c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1686e:	88d5      	ldrh	r5, [r2, #6]
   16870:	8893      	ldrh	r3, [r2, #4]
   16872:	429d      	cmp	r5, r3
   16874:	f080 8552 	bcs.w	1731c <__ssvfscanf_r+0x1128>
   16878:	6810      	ldr	r0, [r2, #0]
   1687a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1687c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   16880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16882:	633c      	str	r4, [r7, #48]	; 0x30
   16884:	3501      	adds	r5, #1
   16886:	80dd      	strh	r5, [r3, #6]
   16888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1688a:	62bb      	str	r3, [r7, #40]	; 0x28
   1688c:	2320      	movs	r3, #32
   1688e:	623b      	str	r3, [r7, #32]
   16890:	f8db 3000 	ldr.w	r3, [fp]
   16894:	4eb1      	ldr	r6, [pc, #708]	; (16b5c <__ssvfscanf_r+0x968>)
   16896:	781b      	ldrb	r3, [r3, #0]
   16898:	5cf3      	ldrb	r3, [r6, r3]
   1689a:	f013 0308 	ands.w	r3, r3, #8
   1689e:	f040 84bb 	bne.w	17218 <__ssvfscanf_r+0x1024>
   168a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   168a4:	627e      	str	r6, [r7, #36]	; 0x24
   168a6:	461d      	mov	r5, r3
   168a8:	f7fc f862 	bl	12970 <__locale_mb_cur_max>
   168ac:	42a8      	cmp	r0, r5
   168ae:	f43f ad8d 	beq.w	163cc <__ssvfscanf_r+0x1d8>
   168b2:	e9db 3200 	ldrd	r3, r2, [fp]
   168b6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   168ba:	f813 1b01 	ldrb.w	r1, [r3], #1
   168be:	5541      	strb	r1, [r0, r5]
   168c0:	3a01      	subs	r2, #1
   168c2:	2c03      	cmp	r4, #3
   168c4:	e9cb 3200 	strd	r3, r2, [fp]
   168c8:	f105 0501 	add.w	r5, r5, #1
   168cc:	f107 0668 	add.w	r6, r7, #104	; 0x68
   168d0:	d102      	bne.n	168d8 <__ssvfscanf_r+0x6e4>
   168d2:	6833      	ldr	r3, [r6, #0]
   168d4:	2b04      	cmp	r3, #4
   168d6:	d004      	beq.n	168e2 <__ssvfscanf_r+0x6ee>
   168d8:	2208      	movs	r2, #8
   168da:	2100      	movs	r1, #0
   168dc:	4630      	mov	r0, r6
   168de:	f7fb ff27 	bl	12730 <memset>
   168e2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   168e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   168e8:	9600      	str	r6, [sp, #0]
   168ea:	462b      	mov	r3, r5
   168ec:	4648      	mov	r0, r9
   168ee:	f002 fc17 	bl	19120 <_mbrtowc_r>
   168f2:	1c42      	adds	r2, r0, #1
   168f4:	4604      	mov	r4, r0
   168f6:	f43f ad69 	beq.w	163cc <__ssvfscanf_r+0x1d8>
   168fa:	2800      	cmp	r0, #0
   168fc:	f040 8478 	bne.w	171f0 <__ssvfscanf_r+0xffc>
   16900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16902:	6018      	str	r0, [r3, #0]
   16904:	f002 fc68 	bl	191d8 <iswspace>
   16908:	2800      	cmp	r0, #0
   1690a:	f040 865c 	bne.w	175c6 <__ssvfscanf_r+0x13d2>
   1690e:	44aa      	add	sl, r5
   16910:	f108 38ff 	add.w	r8, r8, #4294967295
   16914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16916:	2b00      	cmp	r3, #0
   16918:	f040 8633 	bne.w	17582 <__ssvfscanf_r+0x138e>
   1691c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1691e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16920:	3304      	adds	r3, #4
   16922:	64bb      	str	r3, [r7, #72]	; 0x48
   16924:	2a00      	cmp	r2, #0
   16926:	f000 862c 	beq.w	17582 <__ssvfscanf_r+0x138e>
   1692a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1692c:	1a9d      	subs	r5, r3, r2
   1692e:	6a3b      	ldr	r3, [r7, #32]
   16930:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   16934:	f240 8756 	bls.w	177e4 <__ssvfscanf_r+0x15f0>
   16938:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1693a:	f000 bc5c 	b.w	171f6 <__ssvfscanf_r+0x1002>
   1693e:	f1b8 0f00 	cmp.w	r8, #0
   16942:	bf08      	it	eq
   16944:	f04f 38ff 	moveq.w	r8, #4294967295
   16948:	07e0      	lsls	r0, r4, #31
   1694a:	f140 827b 	bpl.w	16e44 <__ssvfscanf_r+0xc50>
   1694e:	f014 0310 	ands.w	r3, r4, #16
   16952:	62bb      	str	r3, [r7, #40]	; 0x28
   16954:	f040 83f3 	bne.w	1713e <__ssvfscanf_r+0xf4a>
   16958:	0621      	lsls	r1, r4, #24
   1695a:	f140 85ed 	bpl.w	17538 <__ssvfscanf_r+0x1344>
   1695e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   16960:	f856 3b04 	ldr.w	r3, [r6], #4
   16964:	623b      	str	r3, [r7, #32]
   16966:	2b00      	cmp	r3, #0
   16968:	f43f ad39 	beq.w	163de <__ssvfscanf_r+0x1ea>
   1696c:	2080      	movs	r0, #128	; 0x80
   1696e:	f7f9 ff5f 	bl	10830 <malloc>
   16972:	4604      	mov	r4, r0
   16974:	2800      	cmp	r0, #0
   16976:	f000 86ee 	beq.w	17756 <__ssvfscanf_r+0x1562>
   1697a:	6a3b      	ldr	r3, [r7, #32]
   1697c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1697e:	6018      	str	r0, [r3, #0]
   16980:	88d5      	ldrh	r5, [r2, #6]
   16982:	8893      	ldrh	r3, [r2, #4]
   16984:	429d      	cmp	r5, r3
   16986:	f080 84dd 	bcs.w	17344 <__ssvfscanf_r+0x1150>
   1698a:	6810      	ldr	r0, [r2, #0]
   1698c:	6a3b      	ldr	r3, [r7, #32]
   1698e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   16992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16994:	633e      	str	r6, [r7, #48]	; 0x30
   16996:	3501      	adds	r5, #1
   16998:	80dd      	strh	r5, [r3, #6]
   1699a:	2320      	movs	r3, #32
   1699c:	61fc      	str	r4, [r7, #28]
   1699e:	61bb      	str	r3, [r7, #24]
   169a0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   169a2:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   169a6:	2500      	movs	r5, #0
   169a8:	46c2      	mov	sl, r8
   169aa:	46a0      	mov	r8, r4
   169ac:	f7fb ffe0 	bl	12970 <__locale_mb_cur_max>
   169b0:	42a8      	cmp	r0, r5
   169b2:	f43f ad0b 	beq.w	163cc <__ssvfscanf_r+0x1d8>
   169b6:	e9db 3200 	ldrd	r3, r2, [fp]
   169ba:	f813 1b01 	ldrb.w	r1, [r3], #1
   169be:	3a01      	subs	r2, #1
   169c0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   169c4:	e9cb 3200 	strd	r3, r2, [fp]
   169c8:	2e03      	cmp	r6, #3
   169ca:	f105 0301 	add.w	r3, r5, #1
   169ce:	5541      	strb	r1, [r0, r5]
   169d0:	64bb      	str	r3, [r7, #72]	; 0x48
   169d2:	f107 0460 	add.w	r4, r7, #96	; 0x60
   169d6:	d102      	bne.n	169de <__ssvfscanf_r+0x7ea>
   169d8:	6823      	ldr	r3, [r4, #0]
   169da:	2b04      	cmp	r3, #4
   169dc:	d004      	beq.n	169e8 <__ssvfscanf_r+0x7f4>
   169de:	2208      	movs	r2, #8
   169e0:	2100      	movs	r1, #0
   169e2:	4620      	mov	r0, r4
   169e4:	f7fb fea4 	bl	12730 <memset>
   169e8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   169ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   169ee:	9400      	str	r4, [sp, #0]
   169f0:	4641      	mov	r1, r8
   169f2:	4648      	mov	r0, r9
   169f4:	f002 fb94 	bl	19120 <_mbrtowc_r>
   169f8:	1c42      	adds	r2, r0, #1
   169fa:	4606      	mov	r6, r0
   169fc:	f43f ace6 	beq.w	163cc <__ssvfscanf_r+0x1d8>
   16a00:	2800      	cmp	r0, #0
   16a02:	f040 82ca 	bne.w	16f9a <__ssvfscanf_r+0xda6>
   16a06:	f8c8 0000 	str.w	r0, [r8]
   16a0a:	4605      	mov	r5, r0
   16a0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
   16a10:	2208      	movs	r2, #8
   16a12:	2100      	movs	r1, #0
   16a14:	4618      	mov	r0, r3
   16a16:	637b      	str	r3, [r7, #52]	; 0x34
   16a18:	f7fb fe8a 	bl	12730 <memset>
   16a1c:	4950      	ldr	r1, [pc, #320]	; (16b60 <__ssvfscanf_r+0x96c>)
   16a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16a20:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
   16a24:	462a      	mov	r2, r5
   16a26:	4648      	mov	r0, r9
   16a28:	460d      	mov	r5, r1
   16a2a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   16a2e:	47a8      	blx	r5
   16a30:	2801      	cmp	r0, #1
   16a32:	f000 83d5 	beq.w	171e0 <__ssvfscanf_r+0xfec>
   16a36:	2200      	movs	r2, #0
   16a38:	f107 0370 	add.w	r3, r7, #112	; 0x70
   16a3c:	5c9b      	ldrb	r3, [r3, r2]
   16a3e:	2b00      	cmp	r3, #0
   16a40:	f000 85a1 	beq.w	17586 <__ssvfscanf_r+0x1392>
   16a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
   16a48:	2e03      	cmp	r6, #3
   16a4a:	4413      	add	r3, r2
   16a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   16a4e:	f000 83ca 	beq.w	171e6 <__ssvfscanf_r+0xff2>
   16a52:	f10a 3aff 	add.w	sl, sl, #4294967295
   16a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a58:	b95b      	cbnz	r3, 16a72 <__ssvfscanf_r+0x87e>
   16a5a:	6a3b      	ldr	r3, [r7, #32]
   16a5c:	f108 0804 	add.w	r8, r8, #4
   16a60:	b13b      	cbz	r3, 16a72 <__ssvfscanf_r+0x87e>
   16a62:	69fb      	ldr	r3, [r7, #28]
   16a64:	eba8 0403 	sub.w	r4, r8, r3
   16a68:	69bb      	ldr	r3, [r7, #24]
   16a6a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   16a6e:	f240 8405 	bls.w	1727c <__ssvfscanf_r+0x1088>
   16a72:	f8db 3004 	ldr.w	r3, [fp, #4]
   16a76:	2b00      	cmp	r3, #0
   16a78:	f04f 0500 	mov.w	r5, #0
   16a7c:	f340 8296 	ble.w	16fac <__ssvfscanf_r+0xdb8>
   16a80:	f1ba 0f00 	cmp.w	sl, #0
   16a84:	d192      	bne.n	169ac <__ssvfscanf_r+0x7b8>
   16a86:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16a8a:	627e      	str	r6, [r7, #36]	; 0x24
   16a8c:	4644      	mov	r4, r8
   16a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a90:	2b00      	cmp	r3, #0
   16a92:	f47f abd6 	bne.w	16242 <__ssvfscanf_r+0x4e>
   16a96:	6023      	str	r3, [r4, #0]
   16a98:	6a3b      	ldr	r3, [r7, #32]
   16a9a:	2b00      	cmp	r3, #0
   16a9c:	f000 81c2 	beq.w	16e24 <__ssvfscanf_r+0xc30>
   16aa0:	69fb      	ldr	r3, [r7, #28]
   16aa2:	69ba      	ldr	r2, [r7, #24]
   16aa4:	1ae1      	subs	r1, r4, r3
   16aa6:	108b      	asrs	r3, r1, #2
   16aa8:	3301      	adds	r3, #1
   16aaa:	429a      	cmp	r2, r3
   16aac:	f240 81ba 	bls.w	16e24 <__ssvfscanf_r+0xc30>
   16ab0:	6a3c      	ldr	r4, [r7, #32]
   16ab2:	3104      	adds	r1, #4
   16ab4:	6820      	ldr	r0, [r4, #0]
   16ab6:	f7fa f987 	bl	10dc8 <realloc>
   16aba:	2800      	cmp	r0, #0
   16abc:	f000 81b2 	beq.w	16e24 <__ssvfscanf_r+0xc30>
   16ac0:	6020      	str	r0, [r4, #0]
   16ac2:	e1af      	b.n	16e24 <__ssvfscanf_r+0xc30>
   16ac4:	0521      	lsls	r1, r4, #20
   16ac6:	f57f adb3 	bpl.w	16630 <__ssvfscanf_r+0x43c>
   16aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16acc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16ace:	185b      	adds	r3, r3, r1
   16ad0:	f47f adae 	bne.w	16630 <__ssvfscanf_r+0x43c>
   16ad4:	64bb      	str	r3, [r7, #72]	; 0x48
   16ad6:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   16ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   16adc:	e593      	b.n	16606 <__ssvfscanf_r+0x412>
   16ade:	4b21      	ldr	r3, [pc, #132]	; (16b64 <__ssvfscanf_r+0x970>)
   16ae0:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   16ae4:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   16ae8:	e66b      	b.n	167c2 <__ssvfscanf_r+0x5ce>
   16aea:	f404 6318 	and.w	r3, r4, #2432	; 0x980
   16aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   16af2:	f47f ad9d 	bne.w	16630 <__ssvfscanf_r+0x43c>
   16af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16af8:	2b01      	cmp	r3, #1
   16afa:	f47f ad99 	bne.w	16630 <__ssvfscanf_r+0x43c>
   16afe:	2330      	movs	r3, #48	; 0x30
   16b00:	f805 3b01 	strb.w	r3, [r5], #1
   16b04:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   16b08:	2300      	movs	r3, #0
   16b0a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   16b0e:	3e01      	subs	r6, #1
   16b10:	637b      	str	r3, [r7, #52]	; 0x34
   16b12:	e578      	b.n	16606 <__ssvfscanf_r+0x412>
   16b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16b16:	2b06      	cmp	r3, #6
   16b18:	f040 8574 	bne.w	17604 <__ssvfscanf_r+0x1410>
   16b1c:	2307      	movs	r3, #7
   16b1e:	64bb      	str	r3, [r7, #72]	; 0x48
   16b20:	e571      	b.n	16606 <__ssvfscanf_r+0x412>
   16b22:	0523      	lsls	r3, r4, #20
   16b24:	f57f ad84 	bpl.w	16630 <__ssvfscanf_r+0x43c>
   16b28:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
   16b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   16b30:	d005      	beq.n	16b3e <__ssvfscanf_r+0x94a>
   16b32:	0561      	lsls	r1, r4, #21
   16b34:	f57f ad7c 	bpl.w	16630 <__ssvfscanf_r+0x43c>
   16b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b3a:	2b00      	cmp	r3, #0
   16b3c:	d047      	beq.n	16bce <__ssvfscanf_r+0x9da>
   16b3e:	05a3      	lsls	r3, r4, #22
   16b40:	d404      	bmi.n	16b4c <__ssvfscanf_r+0x958>
   16b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b44:	69f9      	ldr	r1, [r7, #28]
   16b46:	1a5b      	subs	r3, r3, r1
   16b48:	e9c7 5305 	strd	r5, r3, [r7, #20]
   16b4c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
   16b50:	2300      	movs	r3, #0
   16b52:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
   16b56:	637b      	str	r3, [r7, #52]	; 0x34
   16b58:	e555      	b.n	16606 <__ssvfscanf_r+0x412>
   16b5a:	bf00      	nop
   16b5c:	20000f3d 	.word	0x20000f3d
   16b60:	20008e4c 	.word	0x20008e4c
   16b64:	20002b5c 	.word	0x20002b5c
   16b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b6a:	2b00      	cmp	r3, #0
   16b6c:	f000 81ff 	beq.w	16f6e <__ssvfscanf_r+0xd7a>
   16b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b72:	2b02      	cmp	r3, #2
   16b74:	f000 83b0 	beq.w	172d8 <__ssvfscanf_r+0x10e4>
   16b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16b7a:	2b01      	cmp	r3, #1
   16b7c:	f000 81f1 	beq.w	16f62 <__ssvfscanf_r+0xd6e>
   16b80:	2b04      	cmp	r3, #4
   16b82:	f000 81ee 	beq.w	16f62 <__ssvfscanf_r+0xd6e>
   16b86:	e553      	b.n	16630 <__ssvfscanf_r+0x43c>
   16b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16b8a:	2b07      	cmp	r3, #7
   16b8c:	f040 853a 	bne.w	17604 <__ssvfscanf_r+0x1410>
   16b90:	2308      	movs	r3, #8
   16b92:	64bb      	str	r3, [r7, #72]	; 0x48
   16b94:	e537      	b.n	16606 <__ssvfscanf_r+0x412>
   16b96:	0520      	lsls	r0, r4, #20
   16b98:	f100 81f9 	bmi.w	16f8e <__ssvfscanf_r+0xd9a>
   16b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b9e:	2b01      	cmp	r3, #1
   16ba0:	f47f ad46 	bne.w	16630 <__ssvfscanf_r+0x43c>
   16ba4:	2302      	movs	r3, #2
   16ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   16ba8:	e52d      	b.n	16606 <__ssvfscanf_r+0x412>
   16baa:	0623      	lsls	r3, r4, #24
   16bac:	f57f ad40 	bpl.w	16630 <__ssvfscanf_r+0x43c>
   16bb0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   16bb4:	e527      	b.n	16606 <__ssvfscanf_r+0x412>
   16bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16bb8:	2b00      	cmp	r3, #0
   16bba:	f040 81cc 	bne.w	16f56 <__ssvfscanf_r+0xd62>
   16bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16bc0:	b9b3      	cbnz	r3, 16bf0 <__ssvfscanf_r+0x9fc>
   16bc2:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   16bc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   16bca:	f000 8520 	beq.w	1760e <__ssvfscanf_r+0x141a>
   16bce:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   16bd0:	ee18 9a10 	vmov	r9, s16
   16bd4:	e533      	b.n	1663e <__ssvfscanf_r+0x44a>
   16bd6:	0521      	lsls	r1, r4, #20
   16bd8:	f100 81b7 	bmi.w	16f4a <__ssvfscanf_r+0xd56>
   16bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16bde:	2b02      	cmp	r3, #2
   16be0:	f040 8510 	bne.w	17604 <__ssvfscanf_r+0x1410>
   16be4:	2303      	movs	r3, #3
   16be6:	64bb      	str	r3, [r7, #72]	; 0x48
   16be8:	e50d      	b.n	16606 <__ssvfscanf_r+0x412>
   16bea:	0520      	lsls	r0, r4, #20
   16bec:	d59c      	bpl.n	16b28 <__ssvfscanf_r+0x934>
   16bee:	e76c      	b.n	16aca <__ssvfscanf_r+0x8d6>
   16bf0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   16bf2:	ee18 9a10 	vmov	r9, s16
   16bf6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   16bfa:	e520      	b.n	1663e <__ssvfscanf_r+0x44a>
   16bfc:	4b8d      	ldr	r3, [pc, #564]	; (16e34 <__ssvfscanf_r+0xc40>)
   16bfe:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   16c02:	2e08      	cmp	r6, #8
   16c04:	f73f addb 	bgt.w	167be <__ssvfscanf_r+0x5ca>
   16c08:	e5e8      	b.n	167dc <__ssvfscanf_r+0x5e8>
   16c0a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   16c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16c12:	f47f ade3 	bne.w	167dc <__ssvfscanf_r+0x5e8>
   16c16:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   16c1a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   16c1e:	2610      	movs	r6, #16
   16c20:	e5cf      	b.n	167c2 <__ssvfscanf_r+0x5ce>
   16c22:	0623      	lsls	r3, r4, #24
   16c24:	f57f adda 	bpl.w	167dc <__ssvfscanf_r+0x5e8>
   16c28:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   16c2c:	e5c9      	b.n	167c2 <__ssvfscanf_r+0x5ce>
   16c2e:	f044 0401 	orr.w	r4, r4, #1
   16c32:	f8db 3004 	ldr.w	r3, [fp, #4]
   16c36:	64f9      	str	r1, [r7, #76]	; 0x4c
   16c38:	2b00      	cmp	r3, #0
   16c3a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   16c3e:	f04f 0500 	mov.w	r5, #0
   16c42:	f73f abf8 	bgt.w	16436 <__ssvfscanf_r+0x242>
   16c46:	4659      	mov	r1, fp
   16c48:	4648      	mov	r0, r9
   16c4a:	f002 fc7d 	bl	19548 <__ssrefill_r>
   16c4e:	2800      	cmp	r0, #0
   16c50:	f47f abbc 	bne.w	163cc <__ssvfscanf_r+0x1d8>
   16c54:	0660      	lsls	r0, r4, #25
   16c56:	f53f abf1 	bmi.w	1643c <__ssvfscanf_r+0x248>
   16c5a:	f8db 2000 	ldr.w	r2, [fp]
   16c5e:	4e76      	ldr	r6, [pc, #472]	; (16e38 <__ssvfscanf_r+0xc44>)
   16c60:	7813      	ldrb	r3, [r2, #0]
   16c62:	5cf3      	ldrb	r3, [r6, r3]
   16c64:	0719      	lsls	r1, r3, #28
   16c66:	f57f abe9 	bpl.w	1643c <__ssvfscanf_r+0x248>
   16c6a:	f8db 3004 	ldr.w	r3, [fp, #4]
   16c6e:	3b01      	subs	r3, #1
   16c70:	2b00      	cmp	r3, #0
   16c72:	f10a 0a01 	add.w	sl, sl, #1
   16c76:	f8cb 3004 	str.w	r3, [fp, #4]
   16c7a:	f102 0201 	add.w	r2, r2, #1
   16c7e:	dd4a      	ble.n	16d16 <__ssvfscanf_r+0xb22>
   16c80:	f8cb 2000 	str.w	r2, [fp]
   16c84:	7813      	ldrb	r3, [r2, #0]
   16c86:	5cf3      	ldrb	r3, [r6, r3]
   16c88:	0719      	lsls	r1, r3, #28
   16c8a:	f57f abd7 	bpl.w	1643c <__ssvfscanf_r+0x248>
   16c8e:	e7ec      	b.n	16c6a <__ssvfscanf_r+0xa76>
   16c90:	f044 0401 	orr.w	r4, r4, #1
   16c94:	4b69      	ldr	r3, [pc, #420]	; (16e3c <__ssvfscanf_r+0xc48>)
   16c96:	62fb      	str	r3, [r7, #44]	; 0x2c
   16c98:	2308      	movs	r3, #8
   16c9a:	64f9      	str	r1, [r7, #76]	; 0x4c
   16c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   16c9e:	2503      	movs	r5, #3
   16ca0:	f7ff bbc4 	b.w	1642c <__ssvfscanf_r+0x238>
   16ca4:	f044 0401 	orr.w	r4, r4, #1
   16ca8:	4b65      	ldr	r3, [pc, #404]	; (16e40 <__ssvfscanf_r+0xc4c>)
   16caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   16cac:	230a      	movs	r3, #10
   16cae:	64f9      	str	r1, [r7, #76]	; 0x4c
   16cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   16cb2:	2503      	movs	r5, #3
   16cb4:	f7ff bbba 	b.w	1642c <__ssvfscanf_r+0x238>
   16cb8:	0523      	lsls	r3, r4, #20
   16cba:	f57f ad82 	bpl.w	167c2 <__ssvfscanf_r+0x5ce>
   16cbe:	b916      	cbnz	r6, 16cc6 <__ssvfscanf_r+0xad2>
   16cc0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   16cc4:	2608      	movs	r6, #8
   16cc6:	0563      	lsls	r3, r4, #21
   16cc8:	f100 81a6 	bmi.w	17018 <__ssvfscanf_r+0xe24>
   16ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16cce:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   16cd2:	b11b      	cbz	r3, 16cdc <__ssvfscanf_r+0xae8>
   16cd4:	3b01      	subs	r3, #1
   16cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   16cd8:	f108 0801 	add.w	r8, r8, #1
   16cdc:	684b      	ldr	r3, [r1, #4]
   16cde:	3b01      	subs	r3, #1
   16ce0:	2b00      	cmp	r3, #0
   16ce2:	f10a 0a01 	add.w	sl, sl, #1
   16ce6:	604b      	str	r3, [r1, #4]
   16ce8:	f73f ad73 	bgt.w	167d2 <__ssvfscanf_r+0x5de>
   16cec:	4648      	mov	r0, r9
   16cee:	64b9      	str	r1, [r7, #72]	; 0x48
   16cf0:	f002 fc2a 	bl	19548 <__ssrefill_r>
   16cf4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16cf6:	2800      	cmp	r0, #0
   16cf8:	f43f ad6d 	beq.w	167d6 <__ssvfscanf_r+0x5e2>
   16cfc:	e56e      	b.n	167dc <__ssvfscanf_r+0x5e8>
   16cfe:	ee18 0a10 	vmov	r0, s16
   16d02:	4659      	mov	r1, fp
   16d04:	f002 fc20 	bl	19548 <__ssrefill_r>
   16d08:	2800      	cmp	r0, #0
   16d0a:	f47f ac91 	bne.w	16630 <__ssvfscanf_r+0x43c>
   16d0e:	2e00      	cmp	r6, #0
   16d10:	f47f abc4 	bne.w	1649c <__ssvfscanf_r+0x2a8>
   16d14:	e48c      	b.n	16630 <__ssvfscanf_r+0x43c>
   16d16:	4659      	mov	r1, fp
   16d18:	4648      	mov	r0, r9
   16d1a:	f002 fc15 	bl	19548 <__ssrefill_r>
   16d1e:	2800      	cmp	r0, #0
   16d20:	f47f ab54 	bne.w	163cc <__ssvfscanf_r+0x1d8>
   16d24:	f8db 2000 	ldr.w	r2, [fp]
   16d28:	e79a      	b.n	16c60 <__ssvfscanf_r+0xa6c>
   16d2a:	f8db 2004 	ldr.w	r2, [fp, #4]
   16d2e:	e00f      	b.n	16d50 <__ssvfscanf_r+0xb5c>
   16d30:	f8db 3000 	ldr.w	r3, [fp]
   16d34:	781a      	ldrb	r2, [r3, #0]
   16d36:	5cb2      	ldrb	r2, [r6, r2]
   16d38:	0711      	lsls	r1, r2, #28
   16d3a:	f103 0301 	add.w	r3, r3, #1
   16d3e:	f57f aa80 	bpl.w	16242 <__ssvfscanf_r+0x4e>
   16d42:	f8db 2004 	ldr.w	r2, [fp, #4]
   16d46:	3a01      	subs	r2, #1
   16d48:	e9cb 3200 	strd	r3, r2, [fp]
   16d4c:	f10a 0a01 	add.w	sl, sl, #1
   16d50:	2a00      	cmp	r2, #0
   16d52:	dced      	bgt.n	16d30 <__ssvfscanf_r+0xb3c>
   16d54:	4659      	mov	r1, fp
   16d56:	4648      	mov	r0, r9
   16d58:	f002 fbf6 	bl	19548 <__ssrefill_r>
   16d5c:	2800      	cmp	r0, #0
   16d5e:	d0e7      	beq.n	16d30 <__ssvfscanf_r+0xb3c>
   16d60:	f7ff ba6f 	b.w	16242 <__ssvfscanf_r+0x4e>
   16d64:	06e1      	lsls	r1, r4, #27
   16d66:	f100 8349 	bmi.w	173fc <__ssvfscanf_r+0x1208>
   16d6a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   16d6e:	f000 83ab 	beq.w	174c8 <__ssvfscanf_r+0x12d4>
   16d72:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   16d74:	f854 6b04 	ldr.w	r6, [r4], #4
   16d78:	64be      	str	r6, [r7, #72]	; 0x48
   16d7a:	2e00      	cmp	r6, #0
   16d7c:	f43f ab2f 	beq.w	163de <__ssvfscanf_r+0x1ea>
   16d80:	2020      	movs	r0, #32
   16d82:	f7f9 fd55 	bl	10830 <malloc>
   16d86:	4605      	mov	r5, r0
   16d88:	2800      	cmp	r0, #0
   16d8a:	f000 8462 	beq.w	17652 <__ssvfscanf_r+0x145e>
   16d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16d90:	6030      	str	r0, [r6, #0]
   16d92:	8893      	ldrh	r3, [r2, #4]
   16d94:	88d6      	ldrh	r6, [r2, #6]
   16d96:	429e      	cmp	r6, r3
   16d98:	f080 82a8 	bcs.w	172ec <__ssvfscanf_r+0x10f8>
   16d9c:	6810      	ldr	r0, [r2, #0]
   16d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16da0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   16da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16da6:	633c      	str	r4, [r7, #48]	; 0x30
   16da8:	3601      	adds	r6, #1
   16daa:	80de      	strh	r6, [r3, #6]
   16dac:	2320      	movs	r3, #32
   16dae:	63fb      	str	r3, [r7, #60]	; 0x3c
   16db0:	f8db 2000 	ldr.w	r2, [fp]
   16db4:	4e20      	ldr	r6, [pc, #128]	; (16e38 <__ssvfscanf_r+0xc44>)
   16db6:	7811      	ldrb	r1, [r2, #0]
   16db8:	5c71      	ldrb	r1, [r6, r1]
   16dba:	0708      	lsls	r0, r1, #28
   16dbc:	f100 82ac 	bmi.w	17318 <__ssvfscanf_r+0x1124>
   16dc0:	4633      	mov	r3, r6
   16dc2:	462c      	mov	r4, r5
   16dc4:	4610      	mov	r0, r2
   16dc6:	462e      	mov	r6, r5
   16dc8:	f8db 1004 	ldr.w	r1, [fp, #4]
   16dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
   16dce:	3901      	subs	r1, #1
   16dd0:	f8cb 1004 	str.w	r1, [fp, #4]
   16dd4:	1c41      	adds	r1, r0, #1
   16dd6:	f8cb 1000 	str.w	r1, [fp]
   16dda:	4635      	mov	r5, r6
   16ddc:	7801      	ldrb	r1, [r0, #0]
   16dde:	f805 1b01 	strb.w	r1, [r5], #1
   16de2:	b122      	cbz	r2, 16dee <__ssvfscanf_r+0xbfa>
   16de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16de6:	1b2e      	subs	r6, r5, r4
   16de8:	4296      	cmp	r6, r2
   16dea:	f080 837a 	bcs.w	174e2 <__ssvfscanf_r+0x12ee>
   16dee:	f1b8 0801 	subs.w	r8, r8, #1
   16df2:	d00b      	beq.n	16e0c <__ssvfscanf_r+0xc18>
   16df4:	f8db 1004 	ldr.w	r1, [fp, #4]
   16df8:	2900      	cmp	r1, #0
   16dfa:	462e      	mov	r6, r5
   16dfc:	f340 83ae 	ble.w	1755c <__ssvfscanf_r+0x1368>
   16e00:	f8db 0000 	ldr.w	r0, [fp]
   16e04:	7801      	ldrb	r1, [r0, #0]
   16e06:	5c59      	ldrb	r1, [r3, r1]
   16e08:	0709      	lsls	r1, r1, #28
   16e0a:	d5dd      	bpl.n	16dc8 <__ssvfscanf_r+0xbd4>
   16e0c:	1b29      	subs	r1, r5, r4
   16e0e:	448a      	add	sl, r1
   16e10:	3101      	adds	r1, #1
   16e12:	f04f 0300 	mov.w	r3, #0
   16e16:	702b      	strb	r3, [r5, #0]
   16e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16e1a:	b11b      	cbz	r3, 16e24 <__ssvfscanf_r+0xc30>
   16e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e1e:	428b      	cmp	r3, r1
   16e20:	f200 8394 	bhi.w	1754c <__ssvfscanf_r+0x1358>
   16e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16e26:	3301      	adds	r3, #1
   16e28:	647b      	str	r3, [r7, #68]	; 0x44
   16e2a:	f7ff ba0a 	b.w	16242 <__ssvfscanf_r+0x4e>
   16e2e:	2300      	movs	r3, #0
   16e30:	63fb      	str	r3, [r7, #60]	; 0x3c
   16e32:	e461      	b.n	166f8 <__ssvfscanf_r+0x504>
   16e34:	20002b5c 	.word	0x20002b5c
   16e38:	20000f3d 	.word	0x20000f3d
   16e3c:	00018e0d 	.word	0x00018e0d
   16e40:	00012179 	.word	0x00012179
   16e44:	06e6      	lsls	r6, r4, #27
   16e46:	f100 8181 	bmi.w	1714c <__ssvfscanf_r+0xf58>
   16e4a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   16e4e:	f000 836d 	beq.w	1752c <__ssvfscanf_r+0x1338>
   16e52:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   16e54:	f854 6b04 	ldr.w	r6, [r4], #4
   16e58:	64be      	str	r6, [r7, #72]	; 0x48
   16e5a:	2e00      	cmp	r6, #0
   16e5c:	f43f aabf 	beq.w	163de <__ssvfscanf_r+0x1ea>
   16e60:	2020      	movs	r0, #32
   16e62:	f7f9 fce5 	bl	10830 <malloc>
   16e66:	4605      	mov	r5, r0
   16e68:	2800      	cmp	r0, #0
   16e6a:	f000 83f2 	beq.w	17652 <__ssvfscanf_r+0x145e>
   16e6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16e70:	6030      	str	r0, [r6, #0]
   16e72:	8893      	ldrh	r3, [r2, #4]
   16e74:	88d6      	ldrh	r6, [r2, #6]
   16e76:	429e      	cmp	r6, r3
   16e78:	f080 827a 	bcs.w	17370 <__ssvfscanf_r+0x117c>
   16e7c:	6810      	ldr	r0, [r2, #0]
   16e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16e80:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   16e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16e86:	633c      	str	r4, [r7, #48]	; 0x30
   16e88:	3601      	adds	r6, #1
   16e8a:	80de      	strh	r6, [r3, #6]
   16e8c:	2420      	movs	r4, #32
   16e8e:	f8db 2000 	ldr.w	r2, [fp]
   16e92:	f107 0370 	add.w	r3, r7, #112	; 0x70
   16e96:	4619      	mov	r1, r3
   16e98:	7813      	ldrb	r3, [r2, #0]
   16e9a:	5ccb      	ldrb	r3, [r1, r3]
   16e9c:	2b00      	cmp	r3, #0
   16e9e:	f43f aa9e 	beq.w	163de <__ssvfscanf_r+0x1ea>
   16ea2:	ee08 9a10 	vmov	s16, r9
   16ea6:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   16eaa:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   16eae:	462e      	mov	r6, r5
   16eb0:	46a2      	mov	sl, r4
   16eb2:	4610      	mov	r0, r2
   16eb4:	460c      	mov	r4, r1
   16eb6:	f8db 1004 	ldr.w	r1, [fp, #4]
   16eba:	1c43      	adds	r3, r0, #1
   16ebc:	3901      	subs	r1, #1
   16ebe:	e9cb 3100 	strd	r3, r1, [fp]
   16ec2:	4629      	mov	r1, r5
   16ec4:	7800      	ldrb	r0, [r0, #0]
   16ec6:	f801 0b01 	strb.w	r0, [r1], #1
   16eca:	f1b9 0f00 	cmp.w	r9, #0
   16ece:	d002      	beq.n	16ed6 <__ssvfscanf_r+0xce2>
   16ed0:	1b8d      	subs	r5, r1, r6
   16ed2:	4555      	cmp	r5, sl
   16ed4:	d27a      	bcs.n	16fcc <__ssvfscanf_r+0xdd8>
   16ed6:	460d      	mov	r5, r1
   16ed8:	f1b8 0801 	subs.w	r8, r8, #1
   16edc:	d00a      	beq.n	16ef4 <__ssvfscanf_r+0xd00>
   16ede:	f8db 1004 	ldr.w	r1, [fp, #4]
   16ee2:	2900      	cmp	r1, #0
   16ee4:	f340 816a 	ble.w	171bc <__ssvfscanf_r+0xfc8>
   16ee8:	f8db 0000 	ldr.w	r0, [fp]
   16eec:	7801      	ldrb	r1, [r0, #0]
   16eee:	5c61      	ldrb	r1, [r4, r1]
   16ef0:	2900      	cmp	r1, #0
   16ef2:	d1e0      	bne.n	16eb6 <__ssvfscanf_r+0xcc2>
   16ef4:	4654      	mov	r4, sl
   16ef6:	ee18 9a10 	vmov	r9, s16
   16efa:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16efe:	1bae      	subs	r6, r5, r6
   16f00:	f43f aa6d 	beq.w	163de <__ssvfscanf_r+0x1ea>
   16f04:	f04f 0300 	mov.w	r3, #0
   16f08:	702b      	strb	r3, [r5, #0]
   16f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16f0c:	b11b      	cbz	r3, 16f16 <__ssvfscanf_r+0xd22>
   16f0e:	1c71      	adds	r1, r6, #1
   16f10:	428c      	cmp	r4, r1
   16f12:	f200 832d 	bhi.w	17570 <__ssvfscanf_r+0x137c>
   16f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16f18:	3301      	adds	r3, #1
   16f1a:	44b2      	add	sl, r6
   16f1c:	647b      	str	r3, [r7, #68]	; 0x44
   16f1e:	f7ff b990 	b.w	16242 <__ssvfscanf_r+0x4e>
   16f22:	2300      	movs	r3, #0
   16f24:	613b      	str	r3, [r7, #16]
   16f26:	f7ff baa9 	b.w	1647c <__ssvfscanf_r+0x288>
   16f2a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   16f2e:	f47f aa56 	bne.w	163de <__ssvfscanf_r+0x1ea>
   16f32:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   16f36:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   16f3a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   16f3e:	f7ff ba67 	b.w	16410 <__ssvfscanf_r+0x21c>
   16f42:	64f9      	str	r1, [r7, #76]	; 0x4c
   16f44:	2504      	movs	r5, #4
   16f46:	f7ff ba71 	b.w	1642c <__ssvfscanf_r+0x238>
   16f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16f4e:	185b      	adds	r3, r3, r1
   16f50:	f47f ae44 	bne.w	16bdc <__ssvfscanf_r+0x9e8>
   16f54:	e5be      	b.n	16ad4 <__ssvfscanf_r+0x8e0>
   16f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16f58:	2b03      	cmp	r3, #3
   16f5a:	d002      	beq.n	16f62 <__ssvfscanf_r+0xd6e>
   16f5c:	2b05      	cmp	r3, #5
   16f5e:	f47f ab67 	bne.w	16630 <__ssvfscanf_r+0x43c>
   16f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16f64:	3301      	adds	r3, #1
   16f66:	b2db      	uxtb	r3, r3
   16f68:	64bb      	str	r3, [r7, #72]	; 0x48
   16f6a:	f7ff bb4c 	b.w	16606 <__ssvfscanf_r+0x412>
   16f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f70:	2b00      	cmp	r3, #0
   16f72:	f47f ae01 	bne.w	16b78 <__ssvfscanf_r+0x984>
   16f76:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   16f7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   16f7e:	f47f adfb 	bne.w	16b78 <__ssvfscanf_r+0x984>
   16f82:	2301      	movs	r3, #1
   16f84:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   16f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   16f8a:	f7ff bb3c 	b.w	16606 <__ssvfscanf_r+0x412>
   16f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f90:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16f92:	185b      	adds	r3, r3, r1
   16f94:	f47f ae02 	bne.w	16b9c <__ssvfscanf_r+0x9a8>
   16f98:	e59c      	b.n	16ad4 <__ssvfscanf_r+0x8e0>
   16f9a:	1c83      	adds	r3, r0, #2
   16f9c:	f040 845b 	bne.w	17856 <__ssvfscanf_r+0x1662>
   16fa0:	f8db 3004 	ldr.w	r3, [fp, #4]
   16fa4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   16fa6:	2b00      	cmp	r3, #0
   16fa8:	f73f ad00 	bgt.w	169ac <__ssvfscanf_r+0x7b8>
   16fac:	4659      	mov	r1, fp
   16fae:	4648      	mov	r0, r9
   16fb0:	f002 faca 	bl	19548 <__ssrefill_r>
   16fb4:	2800      	cmp	r0, #0
   16fb6:	f43f ad63 	beq.w	16a80 <__ssvfscanf_r+0x88c>
   16fba:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16fbe:	627e      	str	r6, [r7, #36]	; 0x24
   16fc0:	4644      	mov	r4, r8
   16fc2:	2d00      	cmp	r5, #0
   16fc4:	f43f ad63 	beq.w	16a8e <__ssvfscanf_r+0x89a>
   16fc8:	f7ff ba00 	b.w	163cc <__ssvfscanf_r+0x1d8>
   16fcc:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   16fd0:	4630      	mov	r0, r6
   16fd2:	4651      	mov	r1, sl
   16fd4:	f7f9 fef8 	bl	10dc8 <realloc>
   16fd8:	4606      	mov	r6, r0
   16fda:	2800      	cmp	r0, #0
   16fdc:	f000 8339 	beq.w	17652 <__ssvfscanf_r+0x145e>
   16fe0:	4405      	add	r5, r0
   16fe2:	f8c9 0000 	str.w	r0, [r9]
   16fe6:	e777      	b.n	16ed8 <__ssvfscanf_r+0xce4>
   16fe8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   16fec:	4bbc      	ldr	r3, [pc, #752]	; (172e0 <__ssvfscanf_r+0x10ec>)
   16fee:	62fb      	str	r3, [r7, #44]	; 0x2c
   16ff0:	2310      	movs	r3, #16
   16ff2:	64f9      	str	r1, [r7, #76]	; 0x4c
   16ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   16ff6:	2503      	movs	r5, #3
   16ff8:	f7ff ba18 	b.w	1642c <__ssvfscanf_r+0x238>
   16ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ffe:	3301      	adds	r3, #1
   17000:	637b      	str	r3, [r7, #52]	; 0x34
   17002:	693b      	ldr	r3, [r7, #16]
   17004:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   17008:	2b00      	cmp	r3, #0
   1700a:	f43f aafe 	beq.w	1660a <__ssvfscanf_r+0x416>
   1700e:	693b      	ldr	r3, [r7, #16]
   17010:	3b01      	subs	r3, #1
   17012:	613b      	str	r3, [r7, #16]
   17014:	f7ff bafa 	b.w	1660c <__ssvfscanf_r+0x418>
   17018:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   1701c:	f7ff bbd1 	b.w	167c2 <__ssvfscanf_r+0x5ce>
   17020:	0722      	lsls	r2, r4, #28
   17022:	f140 81c7 	bpl.w	173b4 <__ssvfscanf_r+0x11c0>
   17026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17028:	f853 2b04 	ldr.w	r2, [r3], #4
   1702c:	633b      	str	r3, [r7, #48]	; 0x30
   1702e:	7010      	strb	r0, [r2, #0]
   17030:	f7ff bbf3 	b.w	1681a <__ssvfscanf_r+0x626>
   17034:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   17038:	465a      	mov	r2, fp
   1703a:	4648      	mov	r0, r9
   1703c:	3d01      	subs	r5, #1
   1703e:	f002 fa43 	bl	194c8 <_sungetc_r>
   17042:	f7ff bbd5 	b.w	167f0 <__ssvfscanf_r+0x5fc>
   17046:	69fb      	ldr	r3, [r7, #28]
   17048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1704a:	4293      	cmp	r3, r2
   1704c:	f43f ab2d 	beq.w	166aa <__ssvfscanf_r+0x4b6>
   17050:	1a9a      	subs	r2, r3, r2
   17052:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   17056:	429d      	cmp	r5, r3
   17058:	bf28      	it	cs
   1705a:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   1705e:	49a1      	ldr	r1, [pc, #644]	; (172e4 <__ssvfscanf_r+0x10f0>)
   17060:	4628      	mov	r0, r5
   17062:	f7fb f9bf 	bl	123e4 <sprintf>
   17066:	f7ff bb20 	b.w	166aa <__ssvfscanf_r+0x4b6>
   1706a:	06e2      	lsls	r2, r4, #27
   1706c:	f100 8131 	bmi.w	172d2 <__ssvfscanf_r+0x10de>
   17070:	0723      	lsls	r3, r4, #28
   17072:	f100 81ba 	bmi.w	173ea <__ssvfscanf_r+0x11f6>
   17076:	0766      	lsls	r6, r4, #29
   17078:	f140 82b4 	bpl.w	175e4 <__ssvfscanf_r+0x13f0>
   1707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1707e:	64f9      	str	r1, [r7, #76]	; 0x4c
   17080:	f853 2b04 	ldr.w	r2, [r3], #4
   17084:	633b      	str	r3, [r7, #48]	; 0x30
   17086:	f8a2 a000 	strh.w	sl, [r2]
   1708a:	f7ff b8da 	b.w	16242 <__ssvfscanf_r+0x4e>
   1708e:	0723      	lsls	r3, r4, #28
   17090:	f47f a9a5 	bne.w	163de <__ssvfscanf_r+0x1ea>
   17094:	7842      	ldrb	r2, [r0, #1]
   17096:	2a68      	cmp	r2, #104	; 0x68
   17098:	f000 8186 	beq.w	173a8 <__ssvfscanf_r+0x11b4>
   1709c:	f044 0404 	orr.w	r4, r4, #4
   170a0:	4608      	mov	r0, r1
   170a2:	f7ff b92f 	b.w	16304 <__ssvfscanf_r+0x110>
   170a6:	4b8e      	ldr	r3, [pc, #568]	; (172e0 <__ssvfscanf_r+0x10ec>)
   170a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   170aa:	230a      	movs	r3, #10
   170ac:	64f9      	str	r1, [r7, #76]	; 0x4c
   170ae:	63bb      	str	r3, [r7, #56]	; 0x38
   170b0:	2503      	movs	r5, #3
   170b2:	f7ff b9bb 	b.w	1642c <__ssvfscanf_r+0x238>
   170b6:	4b8c      	ldr	r3, [pc, #560]	; (172e8 <__ssvfscanf_r+0x10f4>)
   170b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   170ba:	2300      	movs	r3, #0
   170bc:	64f9      	str	r1, [r7, #76]	; 0x4c
   170be:	63bb      	str	r3, [r7, #56]	; 0x38
   170c0:	2503      	movs	r5, #3
   170c2:	f7ff b9b3 	b.w	1642c <__ssvfscanf_r+0x238>
   170c6:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   170ca:	e78f      	b.n	16fec <__ssvfscanf_r+0xdf8>
   170cc:	f107 0070 	add.w	r0, r7, #112	; 0x70
   170d0:	f000 fdde 	bl	17c90 <__sccl>
   170d4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   170d8:	64f8      	str	r0, [r7, #76]	; 0x4c
   170da:	2501      	movs	r5, #1
   170dc:	f7ff b9a6 	b.w	1642c <__ssvfscanf_r+0x238>
   170e0:	0722      	lsls	r2, r4, #28
   170e2:	f47f a97c 	bne.w	163de <__ssvfscanf_r+0x1ea>
   170e6:	7842      	ldrb	r2, [r0, #1]
   170e8:	2a6c      	cmp	r2, #108	; 0x6c
   170ea:	f000 8157 	beq.w	1739c <__ssvfscanf_r+0x11a8>
   170ee:	f044 0401 	orr.w	r4, r4, #1
   170f2:	4608      	mov	r0, r1
   170f4:	f7ff b906 	b.w	16304 <__ssvfscanf_r+0x110>
   170f8:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   170fc:	f47f a96f 	bne.w	163de <__ssvfscanf_r+0x1ea>
   17100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17102:	2a00      	cmp	r2, #0
   17104:	f000 81e7 	beq.w	174d6 <__ssvfscanf_r+0x12e2>
   17108:	7842      	ldrb	r2, [r0, #1]
   1710a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1710e:	4608      	mov	r0, r1
   17110:	f7ff b8f8 	b.w	16304 <__ssvfscanf_r+0x110>
   17114:	ea58 0804 	orrs.w	r8, r8, r4
   17118:	f47f a961 	bne.w	163de <__ssvfscanf_r+0x1ea>
   1711c:	7842      	ldrb	r2, [r0, #1]
   1711e:	2410      	movs	r4, #16
   17120:	4608      	mov	r0, r1
   17122:	f7ff b8ef 	b.w	16304 <__ssvfscanf_r+0x110>
   17126:	64f9      	str	r1, [r7, #76]	; 0x4c
   17128:	f7ff b8a7 	b.w	1627a <__ssvfscanf_r+0x86>
   1712c:	2300      	movs	r3, #0
   1712e:	623b      	str	r3, [r7, #32]
   17130:	62bb      	str	r3, [r7, #40]	; 0x28
   17132:	63fb      	str	r3, [r7, #60]	; 0x3c
   17134:	f107 0354 	add.w	r3, r7, #84	; 0x54
   17138:	64bb      	str	r3, [r7, #72]	; 0x48
   1713a:	f7ff bba9 	b.w	16890 <__ssvfscanf_r+0x69c>
   1713e:	2300      	movs	r3, #0
   17140:	e9c7 3306 	strd	r3, r3, [r7, #24]
   17144:	623b      	str	r3, [r7, #32]
   17146:	f107 0454 	add.w	r4, r7, #84	; 0x54
   1714a:	e429      	b.n	169a0 <__ssvfscanf_r+0x7ac>
   1714c:	f8db 3000 	ldr.w	r3, [fp]
   17150:	f107 0270 	add.w	r2, r7, #112	; 0x70
   17154:	4611      	mov	r1, r2
   17156:	781a      	ldrb	r2, [r3, #0]
   17158:	5c8a      	ldrb	r2, [r1, r2]
   1715a:	2a00      	cmp	r2, #0
   1715c:	f43f a93f 	beq.w	163de <__ssvfscanf_r+0x1ea>
   17160:	3301      	adds	r3, #1
   17162:	f8cb 3000 	str.w	r3, [fp]
   17166:	f8db 3004 	ldr.w	r3, [fp, #4]
   1716a:	f1b8 0f01 	cmp.w	r8, #1
   1716e:	f103 33ff 	add.w	r3, r3, #4294967295
   17172:	f8cb 3004 	str.w	r3, [fp, #4]
   17176:	bf18      	it	ne
   17178:	460c      	movne	r4, r1
   1717a:	d114      	bne.n	171a6 <__ssvfscanf_r+0xfb2>
   1717c:	f7ff bb53 	b.w	16826 <__ssvfscanf_r+0x632>
   17180:	f8db 3000 	ldr.w	r3, [fp]
   17184:	781a      	ldrb	r2, [r3, #0]
   17186:	5ca2      	ldrb	r2, [r4, r2]
   17188:	3301      	adds	r3, #1
   1718a:	2a00      	cmp	r2, #0
   1718c:	f43f ab4b 	beq.w	16826 <__ssvfscanf_r+0x632>
   17190:	f8cb 3000 	str.w	r3, [fp]
   17194:	f8db 3004 	ldr.w	r3, [fp, #4]
   17198:	3501      	adds	r5, #1
   1719a:	3b01      	subs	r3, #1
   1719c:	4545      	cmp	r5, r8
   1719e:	f8cb 3004 	str.w	r3, [fp, #4]
   171a2:	f43f ab40 	beq.w	16826 <__ssvfscanf_r+0x632>
   171a6:	2b00      	cmp	r3, #0
   171a8:	dcea      	bgt.n	17180 <__ssvfscanf_r+0xf8c>
   171aa:	4659      	mov	r1, fp
   171ac:	4648      	mov	r0, r9
   171ae:	f002 f9cb 	bl	19548 <__ssrefill_r>
   171b2:	2800      	cmp	r0, #0
   171b4:	d0e4      	beq.n	17180 <__ssvfscanf_r+0xf8c>
   171b6:	44aa      	add	sl, r5
   171b8:	f7ff b843 	b.w	16242 <__ssvfscanf_r+0x4e>
   171bc:	ee18 0a10 	vmov	r0, s16
   171c0:	4659      	mov	r1, fp
   171c2:	f002 f9c1 	bl	19548 <__ssrefill_r>
   171c6:	2800      	cmp	r0, #0
   171c8:	f43f ae8e 	beq.w	16ee8 <__ssvfscanf_r+0xcf4>
   171cc:	42b5      	cmp	r5, r6
   171ce:	4654      	mov	r4, sl
   171d0:	ee18 9a10 	vmov	r9, s16
   171d4:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   171d8:	f47f ae91 	bne.w	16efe <__ssvfscanf_r+0xd0a>
   171dc:	f7ff b8f6 	b.w	163cc <__ssvfscanf_r+0x1d8>
   171e0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   171e4:	e428      	b.n	16a38 <__ssvfscanf_r+0x844>
   171e6:	6823      	ldr	r3, [r4, #0]
   171e8:	2b04      	cmp	r3, #4
   171ea:	f47f ac32 	bne.w	16a52 <__ssvfscanf_r+0x85e>
   171ee:	e432      	b.n	16a56 <__ssvfscanf_r+0x862>
   171f0:	1c83      	adds	r3, r0, #2
   171f2:	f040 8339 	bne.w	17868 <__ssvfscanf_r+0x1674>
   171f6:	f8db 3004 	ldr.w	r3, [fp, #4]
   171fa:	2b00      	cmp	r3, #0
   171fc:	f340 81d7 	ble.w	175ae <__ssvfscanf_r+0x13ba>
   17200:	f8db 3000 	ldr.w	r3, [fp]
   17204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17206:	781b      	ldrb	r3, [r3, #0]
   17208:	5cd3      	ldrb	r3, [r2, r3]
   1720a:	0718      	lsls	r0, r3, #28
   1720c:	d403      	bmi.n	17216 <__ssvfscanf_r+0x1022>
   1720e:	f1b8 0f00 	cmp.w	r8, #0
   17212:	f47f ab49 	bne.w	168a8 <__ssvfscanf_r+0x6b4>
   17216:	627c      	str	r4, [r7, #36]	; 0x24
   17218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1721a:	2b00      	cmp	r3, #0
   1721c:	f47f a811 	bne.w	16242 <__ssvfscanf_r+0x4e>
   17220:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17222:	6013      	str	r3, [r2, #0]
   17224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17226:	2b00      	cmp	r3, #0
   17228:	f43f adfc 	beq.w	16e24 <__ssvfscanf_r+0xc30>
   1722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1722e:	1ad1      	subs	r1, r2, r3
   17230:	108b      	asrs	r3, r1, #2
   17232:	6a3a      	ldr	r2, [r7, #32]
   17234:	3301      	adds	r3, #1
   17236:	429a      	cmp	r2, r3
   17238:	f67f adf4 	bls.w	16e24 <__ssvfscanf_r+0xc30>
   1723c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   1723e:	3104      	adds	r1, #4
   17240:	6820      	ldr	r0, [r4, #0]
   17242:	f7f9 fdc1 	bl	10dc8 <realloc>
   17246:	2800      	cmp	r0, #0
   17248:	f47f ac3a 	bne.w	16ac0 <__ssvfscanf_r+0x8cc>
   1724c:	e5ea      	b.n	16e24 <__ssvfscanf_r+0xc30>
   1724e:	f853 2b04 	ldr.w	r2, [r3], #4
   17252:	ed82 0b00 	vstr	d0, [r2]
   17256:	633b      	str	r3, [r7, #48]	; 0x30
   17258:	e5e4      	b.n	16e24 <__ssvfscanf_r+0xc30>
   1725a:	68fd      	ldr	r5, [r7, #12]
   1725c:	6a39      	ldr	r1, [r7, #32]
   1725e:	687e      	ldr	r6, [r7, #4]
   17260:	4628      	mov	r0, r5
   17262:	4642      	mov	r2, r8
   17264:	46a3      	mov	fp, r4
   17266:	68bc      	ldr	r4, [r7, #8]
   17268:	f000 fd56 	bl	17d18 <stpncpy>
   1726c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1726e:	61fb      	str	r3, [r7, #28]
   17270:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   17274:	3e01      	subs	r6, #1
   17276:	4605      	mov	r5, r0
   17278:	f7ff b9c8 	b.w	1660c <__ssvfscanf_r+0x418>
   1727c:	69f8      	ldr	r0, [r7, #28]
   1727e:	00d9      	lsls	r1, r3, #3
   17280:	461d      	mov	r5, r3
   17282:	f7f9 fda1 	bl	10dc8 <realloc>
   17286:	61f8      	str	r0, [r7, #28]
   17288:	2800      	cmp	r0, #0
   1728a:	f000 8264 	beq.w	17756 <__ssvfscanf_r+0x1562>
   1728e:	6a3a      	ldr	r2, [r7, #32]
   17290:	006b      	lsls	r3, r5, #1
   17292:	eb00 0804 	add.w	r8, r0, r4
   17296:	6010      	str	r0, [r2, #0]
   17298:	61bb      	str	r3, [r7, #24]
   1729a:	f7ff bbea 	b.w	16a72 <__ssvfscanf_r+0x87e>
   1729e:	2e02      	cmp	r6, #2
   172a0:	f240 82c4 	bls.w	1782c <__ssvfscanf_r+0x1638>
   172a4:	2e03      	cmp	r6, #3
   172a6:	f43f a9d3 	beq.w	16650 <__ssvfscanf_r+0x45c>
   172aa:	3e04      	subs	r6, #4
   172ac:	fa5f f886 	uxtb.w	r8, r6
   172b0:	ea6f 0308 	mvn.w	r3, r8
   172b4:	18ee      	adds	r6, r5, r3
   172b6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   172ba:	465a      	mov	r2, fp
   172bc:	4648      	mov	r0, r9
   172be:	f002 f903 	bl	194c8 <_sungetc_r>
   172c2:	42ae      	cmp	r6, r5
   172c4:	d1f7      	bne.n	172b6 <__ssvfscanf_r+0x10c2>
   172c6:	f10a 3aff 	add.w	sl, sl, #4294967295
   172ca:	ebaa 0a08 	sub.w	sl, sl, r8
   172ce:	f7ff b9bf 	b.w	16650 <__ssvfscanf_r+0x45c>
   172d2:	64f9      	str	r1, [r7, #76]	; 0x4c
   172d4:	f7fe bfb5 	b.w	16242 <__ssvfscanf_r+0x4e>
   172d8:	2303      	movs	r3, #3
   172da:	63fb      	str	r3, [r7, #60]	; 0x3c
   172dc:	f7ff b993 	b.w	16606 <__ssvfscanf_r+0x412>
   172e0:	00018e0d 	.word	0x00018e0d
   172e4:	20000f34 	.word	0x20000f34
   172e8:	00012179 	.word	0x00012179
   172ec:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   172f0:	4293      	cmp	r3, r2
   172f2:	f200 8297 	bhi.w	17824 <__ssvfscanf_r+0x1630>
   172f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   172f8:	3308      	adds	r3, #8
   172fa:	b29b      	uxth	r3, r3
   172fc:	6810      	ldr	r0, [r2, #0]
   172fe:	63f8      	str	r0, [r7, #60]	; 0x3c
   17300:	0099      	lsls	r1, r3, #2
   17302:	637b      	str	r3, [r7, #52]	; 0x34
   17304:	f7f9 fd60 	bl	10dc8 <realloc>
   17308:	2800      	cmp	r0, #0
   1730a:	f000 827b 	beq.w	17804 <__ssvfscanf_r+0x1610>
   1730e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17312:	8093      	strh	r3, [r2, #4]
   17314:	6010      	str	r0, [r2, #0]
   17316:	e542      	b.n	16d9e <__ssvfscanf_r+0xbaa>
   17318:	2101      	movs	r1, #1
   1731a:	e57a      	b.n	16e12 <__ssvfscanf_r+0xc1e>
   1731c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   17320:	4293      	cmp	r3, r2
   17322:	f200 8293 	bhi.w	1784c <__ssvfscanf_r+0x1658>
   17326:	3308      	adds	r3, #8
   17328:	b29e      	uxth	r6, r3
   1732a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1732c:	00b1      	lsls	r1, r6, #2
   1732e:	6818      	ldr	r0, [r3, #0]
   17330:	f7f9 fd4a 	bl	10dc8 <realloc>
   17334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17336:	2800      	cmp	r0, #0
   17338:	f000 823e 	beq.w	177b8 <__ssvfscanf_r+0x15c4>
   1733c:	809e      	strh	r6, [r3, #4]
   1733e:	6018      	str	r0, [r3, #0]
   17340:	f7ff ba9b 	b.w	1687a <__ssvfscanf_r+0x686>
   17344:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   17348:	4293      	cmp	r3, r2
   1734a:	f200 827f 	bhi.w	1784c <__ssvfscanf_r+0x1658>
   1734e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17350:	3308      	adds	r3, #8
   17352:	b29b      	uxth	r3, r3
   17354:	0099      	lsls	r1, r3, #2
   17356:	6810      	ldr	r0, [r2, #0]
   17358:	64bb      	str	r3, [r7, #72]	; 0x48
   1735a:	f7f9 fd35 	bl	10dc8 <realloc>
   1735e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17360:	2800      	cmp	r0, #0
   17362:	f000 8228 	beq.w	177b6 <__ssvfscanf_r+0x15c2>
   17366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17368:	8093      	strh	r3, [r2, #4]
   1736a:	6010      	str	r0, [r2, #0]
   1736c:	f7ff bb0e 	b.w	1698c <__ssvfscanf_r+0x798>
   17370:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   17374:	4293      	cmp	r3, r2
   17376:	f200 8255 	bhi.w	17824 <__ssvfscanf_r+0x1630>
   1737a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1737c:	3308      	adds	r3, #8
   1737e:	b29b      	uxth	r3, r3
   17380:	6810      	ldr	r0, [r2, #0]
   17382:	63f8      	str	r0, [r7, #60]	; 0x3c
   17384:	0099      	lsls	r1, r3, #2
   17386:	637b      	str	r3, [r7, #52]	; 0x34
   17388:	f7f9 fd1e 	bl	10dc8 <realloc>
   1738c:	2800      	cmp	r0, #0
   1738e:	f000 8239 	beq.w	17804 <__ssvfscanf_r+0x1610>
   17392:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17396:	8093      	strh	r3, [r2, #4]
   17398:	6010      	str	r0, [r2, #0]
   1739a:	e570      	b.n	16e7e <__ssvfscanf_r+0xc8a>
   1739c:	7882      	ldrb	r2, [r0, #2]
   1739e:	f044 0402 	orr.w	r4, r4, #2
   173a2:	3002      	adds	r0, #2
   173a4:	f7fe bfae 	b.w	16304 <__ssvfscanf_r+0x110>
   173a8:	7882      	ldrb	r2, [r0, #2]
   173aa:	f044 0408 	orr.w	r4, r4, #8
   173ae:	3002      	adds	r0, #2
   173b0:	f7fe bfa8 	b.w	16304 <__ssvfscanf_r+0x110>
   173b4:	0763      	lsls	r3, r4, #29
   173b6:	d458      	bmi.n	1746a <__ssvfscanf_r+0x1276>
   173b8:	f014 0201 	ands.w	r2, r4, #1
   173bc:	f47f aa28 	bne.w	16810 <__ssvfscanf_r+0x61c>
   173c0:	07a6      	lsls	r6, r4, #30
   173c2:	f57f aa25 	bpl.w	16810 <__ssvfscanf_r+0x61c>
   173c6:	4bb3      	ldr	r3, [pc, #716]	; (17694 <__ssvfscanf_r+0x14a0>)
   173c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   173ca:	4299      	cmp	r1, r3
   173cc:	4648      	mov	r0, r9
   173ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   173d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   173d2:	f000 823d 	beq.w	17850 <__ssvfscanf_r+0x165c>
   173d6:	f001 fdd1 	bl	18f7c <_strtoll_r>
   173da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   173dc:	f853 2b04 	ldr.w	r2, [r3], #4
   173e0:	633b      	str	r3, [r7, #48]	; 0x30
   173e2:	e9c2 0100 	strd	r0, r1, [r2]
   173e6:	f7ff ba18 	b.w	1681a <__ssvfscanf_r+0x626>
   173ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   173ec:	64f9      	str	r1, [r7, #76]	; 0x4c
   173ee:	f853 2b04 	ldr.w	r2, [r3], #4
   173f2:	633b      	str	r3, [r7, #48]	; 0x30
   173f4:	f882 a000 	strb.w	sl, [r2]
   173f8:	f7fe bf23 	b.w	16242 <__ssvfscanf_r+0x4e>
   173fc:	f8db 3000 	ldr.w	r3, [fp]
   17400:	4ea5      	ldr	r6, [pc, #660]	; (17698 <__ssvfscanf_r+0x14a4>)
   17402:	781a      	ldrb	r2, [r3, #0]
   17404:	5cb2      	ldrb	r2, [r6, r2]
   17406:	0712      	lsls	r2, r2, #28
   17408:	f53e af1b 	bmi.w	16242 <__ssvfscanf_r+0x4e>
   1740c:	3301      	adds	r3, #1
   1740e:	f8cb 3000 	str.w	r3, [fp]
   17412:	f8db 3004 	ldr.w	r3, [fp, #4]
   17416:	f1b8 0f01 	cmp.w	r8, #1
   1741a:	f103 33ff 	add.w	r3, r3, #4294967295
   1741e:	f8cb 3004 	str.w	r3, [fp, #4]
   17422:	bf08      	it	eq
   17424:	f10a 0a01 	addeq.w	sl, sl, #1
   17428:	f43e af0b 	beq.w	16242 <__ssvfscanf_r+0x4e>
   1742c:	2401      	movs	r4, #1
   1742e:	e011      	b.n	17454 <__ssvfscanf_r+0x1260>
   17430:	f8db 3000 	ldr.w	r3, [fp]
   17434:	781a      	ldrb	r2, [r3, #0]
   17436:	5cb2      	ldrb	r2, [r6, r2]
   17438:	0715      	lsls	r5, r2, #28
   1743a:	f103 0301 	add.w	r3, r3, #1
   1743e:	d411      	bmi.n	17464 <__ssvfscanf_r+0x1270>
   17440:	f8cb 3000 	str.w	r3, [fp]
   17444:	f8db 3004 	ldr.w	r3, [fp, #4]
   17448:	3401      	adds	r4, #1
   1744a:	3b01      	subs	r3, #1
   1744c:	4544      	cmp	r4, r8
   1744e:	f8cb 3004 	str.w	r3, [fp, #4]
   17452:	d007      	beq.n	17464 <__ssvfscanf_r+0x1270>
   17454:	2b00      	cmp	r3, #0
   17456:	dceb      	bgt.n	17430 <__ssvfscanf_r+0x123c>
   17458:	4659      	mov	r1, fp
   1745a:	4648      	mov	r0, r9
   1745c:	f002 f874 	bl	19548 <__ssrefill_r>
   17460:	2800      	cmp	r0, #0
   17462:	d0e5      	beq.n	17430 <__ssvfscanf_r+0x123c>
   17464:	44a2      	add	sl, r4
   17466:	f7fe beec 	b.w	16242 <__ssvfscanf_r+0x4e>
   1746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1746c:	f853 2b04 	ldr.w	r2, [r3], #4
   17470:	633b      	str	r3, [r7, #48]	; 0x30
   17472:	8010      	strh	r0, [r2, #0]
   17474:	f7ff b9d1 	b.w	1681a <__ssvfscanf_r+0x626>
   17478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1747a:	2b00      	cmp	r3, #0
   1747c:	f000 816e 	beq.w	1775c <__ssvfscanf_r+0x1568>
   17480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17482:	f8d3 8000 	ldr.w	r8, [r3]
   17486:	88de      	ldrh	r6, [r3, #6]
   17488:	b176      	cbz	r6, 174a8 <__ssvfscanf_r+0x12b4>
   1748a:	2400      	movs	r4, #0
   1748c:	f1a8 0504 	sub.w	r5, r8, #4
   17490:	46a1      	mov	r9, r4
   17492:	f855 3f04 	ldr.w	r3, [r5, #4]!
   17496:	6818      	ldr	r0, [r3, #0]
   17498:	f7f9 f9d2 	bl	10840 <free>
   1749c:	3401      	adds	r4, #1
   1749e:	682b      	ldr	r3, [r5, #0]
   174a0:	42a6      	cmp	r6, r4
   174a2:	f8c3 9000 	str.w	r9, [r3]
   174a6:	d1f4      	bne.n	17492 <__ssvfscanf_r+0x129e>
   174a8:	f04f 33ff 	mov.w	r3, #4294967295
   174ac:	647b      	str	r3, [r7, #68]	; 0x44
   174ae:	f1b8 0f00 	cmp.w	r8, #0
   174b2:	f47e af9c 	bne.w	163ee <__ssvfscanf_r+0x1fa>
   174b6:	f7fe bf9d 	b.w	163f4 <__ssvfscanf_r+0x200>
   174ba:	4878      	ldr	r0, [pc, #480]	; (1769c <__ssvfscanf_r+0x14a8>)
   174bc:	633b      	str	r3, [r7, #48]	; 0x30
   174be:	f7fb fd97 	bl	12ff0 <nanf>
   174c2:	ed84 0a00 	vstr	s0, [r4]
   174c6:	e4ad      	b.n	16e24 <__ssvfscanf_r+0xc30>
   174c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   174ca:	63fc      	str	r4, [r7, #60]	; 0x3c
   174cc:	f852 5b04 	ldr.w	r5, [r2], #4
   174d0:	633a      	str	r2, [r7, #48]	; 0x30
   174d2:	64bc      	str	r4, [r7, #72]	; 0x48
   174d4:	e46c      	b.n	16db0 <__ssvfscanf_r+0xbbc>
   174d6:	b082      	sub	sp, #8
   174d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   174dc:	ab02      	add	r3, sp, #8
   174de:	643b      	str	r3, [r7, #64]	; 0x40
   174e0:	e612      	b.n	17108 <__ssvfscanf_r+0xf14>
   174e2:	637b      	str	r3, [r7, #52]	; 0x34
   174e4:	0053      	lsls	r3, r2, #1
   174e6:	4620      	mov	r0, r4
   174e8:	4619      	mov	r1, r3
   174ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   174ec:	f7f9 fc6c 	bl	10dc8 <realloc>
   174f0:	4604      	mov	r4, r0
   174f2:	2800      	cmp	r0, #0
   174f4:	f000 80ad 	beq.w	17652 <__ssvfscanf_r+0x145e>
   174f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   174fa:	1985      	adds	r5, r0, r6
   174fc:	6018      	str	r0, [r3, #0]
   174fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17500:	e475      	b.n	16dee <__ssvfscanf_r+0xbfa>
   17502:	697d      	ldr	r5, [r7, #20]
   17504:	4629      	mov	r1, r5
   17506:	230a      	movs	r3, #10
   17508:	3101      	adds	r1, #1
   1750a:	4648      	mov	r0, r9
   1750c:	f7fa fe34 	bl	12178 <_strtol_r>
   17510:	69bb      	ldr	r3, [r7, #24]
   17512:	1ac2      	subs	r2, r0, r3
   17514:	e59d      	b.n	17052 <__ssvfscanf_r+0xe5e>
   17516:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1751a:	f853 1b04 	ldr.w	r1, [r3], #4
   1751e:	623a      	str	r2, [r7, #32]
   17520:	64b9      	str	r1, [r7, #72]	; 0x48
   17522:	633b      	str	r3, [r7, #48]	; 0x30
   17524:	62ba      	str	r2, [r7, #40]	; 0x28
   17526:	63fa      	str	r2, [r7, #60]	; 0x3c
   17528:	f7ff b9b2 	b.w	16890 <__ssvfscanf_r+0x69c>
   1752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1752e:	64bc      	str	r4, [r7, #72]	; 0x48
   17530:	f853 5b04 	ldr.w	r5, [r3], #4
   17534:	633b      	str	r3, [r7, #48]	; 0x30
   17536:	e4aa      	b.n	16e8e <__ssvfscanf_r+0xc9a>
   17538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1753a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1753c:	f853 4b04 	ldr.w	r4, [r3], #4
   17540:	61ba      	str	r2, [r7, #24]
   17542:	e9c7 2207 	strd	r2, r2, [r7, #28]
   17546:	633b      	str	r3, [r7, #48]	; 0x30
   17548:	f7ff ba2a 	b.w	169a0 <__ssvfscanf_r+0x7ac>
   1754c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1754e:	6820      	ldr	r0, [r4, #0]
   17550:	f7f9 fc3a 	bl	10dc8 <realloc>
   17554:	2800      	cmp	r0, #0
   17556:	f47f aab3 	bne.w	16ac0 <__ssvfscanf_r+0x8cc>
   1755a:	e463      	b.n	16e24 <__ssvfscanf_r+0xc30>
   1755c:	4659      	mov	r1, fp
   1755e:	4648      	mov	r0, r9
   17560:	637b      	str	r3, [r7, #52]	; 0x34
   17562:	f001 fff1 	bl	19548 <__ssrefill_r>
   17566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17568:	2800      	cmp	r0, #0
   1756a:	f43f ac49 	beq.w	16e00 <__ssvfscanf_r+0xc0c>
   1756e:	e44d      	b.n	16e0c <__ssvfscanf_r+0xc18>
   17570:	6818      	ldr	r0, [r3, #0]
   17572:	461c      	mov	r4, r3
   17574:	f7f9 fc28 	bl	10dc8 <realloc>
   17578:	2800      	cmp	r0, #0
   1757a:	f43f accc 	beq.w	16f16 <__ssvfscanf_r+0xd22>
   1757e:	6020      	str	r0, [r4, #0]
   17580:	e4c9      	b.n	16f16 <__ssvfscanf_r+0xd22>
   17582:	2500      	movs	r5, #0
   17584:	e637      	b.n	171f6 <__ssvfscanf_r+0x1002>
   17586:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   17588:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1758c:	627e      	str	r6, [r7, #36]	; 0x24
   1758e:	4644      	mov	r4, r8
   17590:	2d00      	cmp	r5, #0
   17592:	f43f aa7c 	beq.w	16a8e <__ssvfscanf_r+0x89a>
   17596:	3d01      	subs	r5, #1
   17598:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1759c:	465a      	mov	r2, fp
   1759e:	5d59      	ldrb	r1, [r3, r5]
   175a0:	4648      	mov	r0, r9
   175a2:	f001 ff91 	bl	194c8 <_sungetc_r>
   175a6:	2d00      	cmp	r5, #0
   175a8:	d1f5      	bne.n	17596 <__ssvfscanf_r+0x13a2>
   175aa:	f7ff ba70 	b.w	16a8e <__ssvfscanf_r+0x89a>
   175ae:	4659      	mov	r1, fp
   175b0:	4648      	mov	r0, r9
   175b2:	f001 ffc9 	bl	19548 <__ssrefill_r>
   175b6:	2800      	cmp	r0, #0
   175b8:	f43f ae22 	beq.w	17200 <__ssvfscanf_r+0x100c>
   175bc:	627c      	str	r4, [r7, #36]	; 0x24
   175be:	2d00      	cmp	r5, #0
   175c0:	f47e af04 	bne.w	163cc <__ssvfscanf_r+0x1d8>
   175c4:	e628      	b.n	17218 <__ssvfscanf_r+0x1024>
   175c6:	627c      	str	r4, [r7, #36]	; 0x24
   175c8:	2d00      	cmp	r5, #0
   175ca:	f43f ae25 	beq.w	17218 <__ssvfscanf_r+0x1024>
   175ce:	3d01      	subs	r5, #1
   175d0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   175d4:	465a      	mov	r2, fp
   175d6:	5d59      	ldrb	r1, [r3, r5]
   175d8:	4648      	mov	r0, r9
   175da:	f001 ff75 	bl	194c8 <_sungetc_r>
   175de:	2d00      	cmp	r5, #0
   175e0:	d1f5      	bne.n	175ce <__ssvfscanf_r+0x13da>
   175e2:	e619      	b.n	17218 <__ssvfscanf_r+0x1024>
   175e4:	07e5      	lsls	r5, r4, #31
   175e6:	d43c      	bmi.n	17662 <__ssvfscanf_r+0x146e>
   175e8:	07a4      	lsls	r4, r4, #30
   175ea:	d53a      	bpl.n	17662 <__ssvfscanf_r+0x146e>
   175ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   175ee:	64f9      	str	r1, [r7, #76]	; 0x4c
   175f0:	f853 2b04 	ldr.w	r2, [r3], #4
   175f4:	633b      	str	r3, [r7, #48]	; 0x30
   175f6:	ea4f 73ea 	mov.w	r3, sl, asr #31
   175fa:	f8c2 a000 	str.w	sl, [r2]
   175fe:	6053      	str	r3, [r2, #4]
   17600:	f7fe be1f 	b.w	16242 <__ssvfscanf_r+0x4e>
   17604:	ee18 9a10 	vmov	r9, s16
   17608:	461e      	mov	r6, r3
   1760a:	f7ff b814 	b.w	16636 <__ssvfscanf_r+0x442>
   1760e:	2301      	movs	r3, #1
   17610:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   17614:	64bb      	str	r3, [r7, #72]	; 0x48
   17616:	f7fe bff6 	b.w	16606 <__ssvfscanf_r+0x412>
   1761a:	f1b8 0f01 	cmp.w	r8, #1
   1761e:	bf38      	it	cc
   17620:	f04f 0801 	movcc.w	r8, #1
   17624:	f014 0301 	ands.w	r3, r4, #1
   17628:	d13a      	bne.n	176a0 <__ssvfscanf_r+0x14ac>
   1762a:	06e5      	lsls	r5, r4, #27
   1762c:	f100 8136 	bmi.w	1789c <__ssvfscanf_r+0x16a8>
   17630:	0624      	lsls	r4, r4, #24
   17632:	f140 814c 	bpl.w	178ce <__ssvfscanf_r+0x16da>
   17636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17638:	f853 5b04 	ldr.w	r5, [r3], #4
   1763c:	64bb      	str	r3, [r7, #72]	; 0x48
   1763e:	2d00      	cmp	r5, #0
   17640:	f43e aecd 	beq.w	163de <__ssvfscanf_r+0x1ea>
   17644:	4640      	mov	r0, r8
   17646:	f7f9 f8f3 	bl	10830 <malloc>
   1764a:	4603      	mov	r3, r0
   1764c:	2800      	cmp	r0, #0
   1764e:	f040 80dc 	bne.w	1780a <__ssvfscanf_r+0x1616>
   17652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17654:	2b00      	cmp	r3, #0
   17656:	f000 8081 	beq.w	1775c <__ssvfscanf_r+0x1568>
   1765a:	f8d3 8000 	ldr.w	r8, [r3]
   1765e:	88de      	ldrh	r6, [r3, #6]
   17660:	e712      	b.n	17488 <__ssvfscanf_r+0x1294>
   17662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17664:	64f9      	str	r1, [r7, #76]	; 0x4c
   17666:	f853 2b04 	ldr.w	r2, [r3], #4
   1766a:	f8c2 a000 	str.w	sl, [r2]
   1766e:	633b      	str	r3, [r7, #48]	; 0x30
   17670:	f7fe bde7 	b.w	16242 <__ssvfscanf_r+0x4e>
   17674:	462b      	mov	r3, r5
   17676:	6abd      	ldr	r5, [r7, #40]	; 0x28
   17678:	42ab      	cmp	r3, r5
   1767a:	f67e aeb0 	bls.w	163de <__ssvfscanf_r+0x1ea>
   1767e:	461c      	mov	r4, r3
   17680:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   17684:	465a      	mov	r2, fp
   17686:	4648      	mov	r0, r9
   17688:	f001 ff1e 	bl	194c8 <_sungetc_r>
   1768c:	42ac      	cmp	r4, r5
   1768e:	d1f7      	bne.n	17680 <__ssvfscanf_r+0x148c>
   17690:	f7fe bea5 	b.w	163de <__ssvfscanf_r+0x1ea>
   17694:	00018e0d 	.word	0x00018e0d
   17698:	20000f3d 	.word	0x20000f3d
   1769c:	200004ec 	.word	0x200004ec
   176a0:	f014 0310 	ands.w	r3, r4, #16
   176a4:	637b      	str	r3, [r7, #52]	; 0x34
   176a6:	d05e      	beq.n	17766 <__ssvfscanf_r+0x1572>
   176a8:	2500      	movs	r5, #0
   176aa:	63fd      	str	r5, [r7, #60]	; 0x3c
   176ac:	64bd      	str	r5, [r7, #72]	; 0x48
   176ae:	462e      	mov	r6, r5
   176b0:	2400      	movs	r4, #0
   176b2:	464b      	mov	r3, r9
   176b4:	46c1      	mov	r9, r8
   176b6:	46a8      	mov	r8, r5
   176b8:	4625      	mov	r5, r4
   176ba:	461c      	mov	r4, r3
   176bc:	f7fb f958 	bl	12970 <__locale_mb_cur_max>
   176c0:	42a8      	cmp	r0, r5
   176c2:	f43e ae83 	beq.w	163cc <__ssvfscanf_r+0x1d8>
   176c6:	e9db 3200 	ldrd	r3, r2, [fp]
   176ca:	f813 1b01 	ldrb.w	r1, [r3], #1
   176ce:	3a01      	subs	r2, #1
   176d0:	e9cb 3200 	strd	r3, r2, [fp]
   176d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   176d6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   176da:	2a03      	cmp	r2, #3
   176dc:	5541      	strb	r1, [r0, r5]
   176de:	f105 0301 	add.w	r3, r5, #1
   176e2:	f107 0568 	add.w	r5, r7, #104	; 0x68
   176e6:	d102      	bne.n	176ee <__ssvfscanf_r+0x14fa>
   176e8:	682a      	ldr	r2, [r5, #0]
   176ea:	2a04      	cmp	r2, #4
   176ec:	d006      	beq.n	176fc <__ssvfscanf_r+0x1508>
   176ee:	2208      	movs	r2, #8
   176f0:	2100      	movs	r1, #0
   176f2:	4628      	mov	r0, r5
   176f4:	62bb      	str	r3, [r7, #40]	; 0x28
   176f6:	f7fb f81b 	bl	12730 <memset>
   176fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   176fc:	9500      	str	r5, [sp, #0]
   176fe:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   17702:	4631      	mov	r1, r6
   17704:	4620      	mov	r0, r4
   17706:	62bb      	str	r3, [r7, #40]	; 0x28
   17708:	f001 fd0a 	bl	19120 <_mbrtowc_r>
   1770c:	1c43      	adds	r3, r0, #1
   1770e:	6278      	str	r0, [r7, #36]	; 0x24
   17710:	f43e ae5c 	beq.w	163cc <__ssvfscanf_r+0x1d8>
   17714:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17716:	2800      	cmp	r0, #0
   17718:	f040 8147 	bne.w	179aa <__ssvfscanf_r+0x17b6>
   1771c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1771e:	b902      	cbnz	r2, 17722 <__ssvfscanf_r+0x152e>
   17720:	6032      	str	r2, [r6, #0]
   17722:	449a      	add	sl, r3
   17724:	f109 39ff 	add.w	r9, r9, #4294967295
   17728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1772a:	2b00      	cmp	r3, #0
   1772c:	f040 8175 	bne.w	17a1a <__ssvfscanf_r+0x1826>
   17730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17732:	2b00      	cmp	r3, #0
   17734:	f000 8170 	beq.w	17a18 <__ssvfscanf_r+0x1824>
   17738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1773a:	1af5      	subs	r5, r6, r3
   1773c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   17740:	f200 816a 	bhi.w	17a18 <__ssvfscanf_r+0x1824>
   17744:	4618      	mov	r0, r3
   17746:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   1774a:	f7f9 fb3d 	bl	10dc8 <realloc>
   1774e:	63f8      	str	r0, [r7, #60]	; 0x3c
   17750:	2800      	cmp	r0, #0
   17752:	f040 815c 	bne.w	17a0e <__ssvfscanf_r+0x181a>
   17756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17758:	2b00      	cmp	r3, #0
   1775a:	d12d      	bne.n	177b8 <__ssvfscanf_r+0x15c4>
   1775c:	f04f 33ff 	mov.w	r3, #4294967295
   17760:	647b      	str	r3, [r7, #68]	; 0x44
   17762:	f7fe be47 	b.w	163f4 <__ssvfscanf_r+0x200>
   17766:	0622      	lsls	r2, r4, #24
   17768:	f140 808f 	bpl.w	1788a <__ssvfscanf_r+0x1696>
   1776c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1776e:	f854 3b04 	ldr.w	r3, [r4], #4
   17772:	64bb      	str	r3, [r7, #72]	; 0x48
   17774:	2b00      	cmp	r3, #0
   17776:	f43e ae32 	beq.w	163de <__ssvfscanf_r+0x1ea>
   1777a:	2080      	movs	r0, #128	; 0x80
   1777c:	f7f9 f858 	bl	10830 <malloc>
   17780:	4606      	mov	r6, r0
   17782:	2800      	cmp	r0, #0
   17784:	d0e7      	beq.n	17756 <__ssvfscanf_r+0x1562>
   17786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17788:	6018      	str	r0, [r3, #0]
   1778a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1778c:	88dd      	ldrh	r5, [r3, #6]
   1778e:	889a      	ldrh	r2, [r3, #4]
   17790:	4295      	cmp	r5, r2
   17792:	f0c0 80b3 	bcc.w	178fc <__ssvfscanf_r+0x1708>
   17796:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1779a:	428a      	cmp	r2, r1
   1779c:	d856      	bhi.n	1784c <__ssvfscanf_r+0x1658>
   1779e:	3208      	adds	r2, #8
   177a0:	b293      	uxth	r3, r2
   177a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   177a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   177a6:	0099      	lsls	r1, r3, #2
   177a8:	6810      	ldr	r0, [r2, #0]
   177aa:	f7f9 fb0d 	bl	10dc8 <realloc>
   177ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   177b0:	2800      	cmp	r0, #0
   177b2:	f040 80ae 	bne.w	17912 <__ssvfscanf_r+0x171e>
   177b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   177b8:	88db      	ldrh	r3, [r3, #6]
   177ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   177bc:	461e      	mov	r6, r3
   177be:	f8d2 8000 	ldr.w	r8, [r2]
   177c2:	e661      	b.n	17488 <__ssvfscanf_r+0x1294>
   177c4:	462b      	mov	r3, r5
   177c6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   177c8:	42ab      	cmp	r3, r5
   177ca:	f67e ae08 	bls.w	163de <__ssvfscanf_r+0x1ea>
   177ce:	461c      	mov	r4, r3
   177d0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   177d4:	465a      	mov	r2, fp
   177d6:	4648      	mov	r0, r9
   177d8:	f001 fe76 	bl	194c8 <_sungetc_r>
   177dc:	42ac      	cmp	r4, r5
   177de:	d1f7      	bne.n	177d0 <__ssvfscanf_r+0x15dc>
   177e0:	f7fe bdfd 	b.w	163de <__ssvfscanf_r+0x1ea>
   177e4:	4610      	mov	r0, r2
   177e6:	00d9      	lsls	r1, r3, #3
   177e8:	461e      	mov	r6, r3
   177ea:	f7f9 faed 	bl	10dc8 <realloc>
   177ee:	62b8      	str	r0, [r7, #40]	; 0x28
   177f0:	2800      	cmp	r0, #0
   177f2:	d0b0      	beq.n	17756 <__ssvfscanf_r+0x1562>
   177f4:	1942      	adds	r2, r0, r5
   177f6:	64ba      	str	r2, [r7, #72]	; 0x48
   177f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   177fa:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   177fc:	6010      	str	r0, [r2, #0]
   177fe:	0073      	lsls	r3, r6, #1
   17800:	623b      	str	r3, [r7, #32]
   17802:	e4f8      	b.n	171f6 <__ssvfscanf_r+0x1002>
   17804:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   17808:	e63e      	b.n	17488 <__ssvfscanf_r+0x1294>
   1780a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1780c:	6028      	str	r0, [r5, #0]
   1780e:	88ce      	ldrh	r6, [r1, #6]
   17810:	888a      	ldrh	r2, [r1, #4]
   17812:	4296      	cmp	r6, r2
   17814:	f0c0 808e 	bcc.w	17934 <__ssvfscanf_r+0x1740>
   17818:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1781c:	428a      	cmp	r2, r1
   1781e:	6338      	str	r0, [r7, #48]	; 0x30
   17820:	f240 80a5 	bls.w	1796e <__ssvfscanf_r+0x177a>
   17824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17826:	f8d3 8000 	ldr.w	r8, [r3]
   1782a:	e62d      	b.n	17488 <__ssvfscanf_r+0x1294>
   1782c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1782e:	4295      	cmp	r5, r2
   17830:	f67e add5 	bls.w	163de <__ssvfscanf_r+0x1ea>
   17834:	462c      	mov	r4, r5
   17836:	6abd      	ldr	r5, [r7, #40]	; 0x28
   17838:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   1783c:	465a      	mov	r2, fp
   1783e:	4648      	mov	r0, r9
   17840:	f001 fe42 	bl	194c8 <_sungetc_r>
   17844:	42ac      	cmp	r4, r5
   17846:	d1f7      	bne.n	17838 <__ssvfscanf_r+0x1644>
   17848:	f7fe bdc9 	b.w	163de <__ssvfscanf_r+0x1ea>
   1784c:	462b      	mov	r3, r5
   1784e:	e7b4      	b.n	177ba <__ssvfscanf_r+0x15c6>
   17850:	f001 fc64 	bl	1911c <_strtoull_r>
   17854:	e5c1      	b.n	173da <__ssvfscanf_r+0x11e6>
   17856:	f8d8 3000 	ldr.w	r3, [r8]
   1785a:	461d      	mov	r5, r3
   1785c:	3301      	adds	r3, #1
   1785e:	f47f a8d5 	bne.w	16a0c <__ssvfscanf_r+0x818>
   17862:	462a      	mov	r2, r5
   17864:	f7ff b8e8 	b.w	16a38 <__ssvfscanf_r+0x844>
   17868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1786a:	6818      	ldr	r0, [r3, #0]
   1786c:	f001 fcb4 	bl	191d8 <iswspace>
   17870:	2800      	cmp	r0, #0
   17872:	f47f aea8 	bne.w	175c6 <__ssvfscanf_r+0x13d2>
   17876:	2c03      	cmp	r4, #3
   17878:	44aa      	add	sl, r5
   1787a:	f47f a849 	bne.w	16910 <__ssvfscanf_r+0x71c>
   1787e:	6833      	ldr	r3, [r6, #0]
   17880:	2b04      	cmp	r3, #4
   17882:	f47f a845 	bne.w	16910 <__ssvfscanf_r+0x71c>
   17886:	f7ff b845 	b.w	16914 <__ssvfscanf_r+0x720>
   1788a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1788e:	f853 6b04 	ldr.w	r6, [r3], #4
   17892:	633b      	str	r3, [r7, #48]	; 0x30
   17894:	4615      	mov	r5, r2
   17896:	63fa      	str	r2, [r7, #60]	; 0x3c
   17898:	64ba      	str	r2, [r7, #72]	; 0x48
   1789a:	e709      	b.n	176b0 <__ssvfscanf_r+0x14bc>
   1789c:	461c      	mov	r4, r3
   1789e:	f8db 3004 	ldr.w	r3, [fp, #4]
   178a2:	4598      	cmp	r8, r3
   178a4:	dd39      	ble.n	1791a <__ssvfscanf_r+0x1726>
   178a6:	f8db 2000 	ldr.w	r2, [fp]
   178aa:	441a      	add	r2, r3
   178ac:	f8cb 2000 	str.w	r2, [fp]
   178b0:	4659      	mov	r1, fp
   178b2:	4648      	mov	r0, r9
   178b4:	441c      	add	r4, r3
   178b6:	eba8 0803 	sub.w	r8, r8, r3
   178ba:	f001 fe45 	bl	19548 <__ssrefill_r>
   178be:	2800      	cmp	r0, #0
   178c0:	d0ed      	beq.n	1789e <__ssvfscanf_r+0x16aa>
   178c2:	2c00      	cmp	r4, #0
   178c4:	f43e ad82 	beq.w	163cc <__ssvfscanf_r+0x1d8>
   178c8:	44a2      	add	sl, r4
   178ca:	f7fe bcba 	b.w	16242 <__ssvfscanf_r+0x4e>
   178ce:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   178d0:	4643      	mov	r3, r8
   178d2:	6829      	ldr	r1, [r5, #0]
   178d4:	f8cd b000 	str.w	fp, [sp]
   178d8:	2201      	movs	r2, #1
   178da:	4648      	mov	r0, r9
   178dc:	f001 fe52 	bl	19584 <_sfread_r>
   178e0:	4604      	mov	r4, r0
   178e2:	2800      	cmp	r0, #0
   178e4:	f43e ad72 	beq.w	163cc <__ssvfscanf_r+0x1d8>
   178e8:	3504      	adds	r5, #4
   178ea:	64bd      	str	r5, [r7, #72]	; 0x48
   178ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   178ee:	3301      	adds	r3, #1
   178f0:	647b      	str	r3, [r7, #68]	; 0x44
   178f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   178f4:	633b      	str	r3, [r7, #48]	; 0x30
   178f6:	44a2      	add	sl, r4
   178f8:	f7fe bca3 	b.w	16242 <__ssvfscanf_r+0x4e>
   178fc:	6818      	ldr	r0, [r3, #0]
   178fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17900:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   17904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17906:	633c      	str	r4, [r7, #48]	; 0x30
   17908:	3501      	adds	r5, #1
   1790a:	80dd      	strh	r5, [r3, #6]
   1790c:	63fe      	str	r6, [r7, #60]	; 0x3c
   1790e:	2520      	movs	r5, #32
   17910:	e6ce      	b.n	176b0 <__ssvfscanf_r+0x14bc>
   17912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17914:	8093      	strh	r3, [r2, #4]
   17916:	6010      	str	r0, [r2, #0]
   17918:	e7f1      	b.n	178fe <__ssvfscanf_r+0x170a>
   1791a:	eba3 0308 	sub.w	r3, r3, r8
   1791e:	f8cb 3004 	str.w	r3, [fp, #4]
   17922:	f8db 3000 	ldr.w	r3, [fp]
   17926:	4444      	add	r4, r8
   17928:	4443      	add	r3, r8
   1792a:	f8cb 3000 	str.w	r3, [fp]
   1792e:	44a2      	add	sl, r4
   17930:	f7fe bc87 	b.w	16242 <__ssvfscanf_r+0x4e>
   17934:	680a      	ldr	r2, [r1, #0]
   17936:	63fa      	str	r2, [r7, #60]	; 0x3c
   17938:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1793a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   1793e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17940:	3601      	adds	r6, #1
   17942:	b2b6      	uxth	r6, r6
   17944:	80d6      	strh	r6, [r2, #6]
   17946:	4619      	mov	r1, r3
   17948:	f8cd b000 	str.w	fp, [sp]
   1794c:	4643      	mov	r3, r8
   1794e:	2201      	movs	r2, #1
   17950:	4648      	mov	r0, r9
   17952:	f001 fe17 	bl	19584 <_sfread_r>
   17956:	4604      	mov	r4, r0
   17958:	b1d8      	cbz	r0, 17992 <__ssvfscanf_r+0x179e>
   1795a:	4580      	cmp	r8, r0
   1795c:	d9c6      	bls.n	178ec <__ssvfscanf_r+0x16f8>
   1795e:	6828      	ldr	r0, [r5, #0]
   17960:	4621      	mov	r1, r4
   17962:	f7f9 fa31 	bl	10dc8 <realloc>
   17966:	2800      	cmp	r0, #0
   17968:	d0c0      	beq.n	178ec <__ssvfscanf_r+0x16f8>
   1796a:	6028      	str	r0, [r5, #0]
   1796c:	e7be      	b.n	178ec <__ssvfscanf_r+0x16f8>
   1796e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17970:	3208      	adds	r2, #8
   17972:	b294      	uxth	r4, r2
   17974:	681a      	ldr	r2, [r3, #0]
   17976:	637a      	str	r2, [r7, #52]	; 0x34
   17978:	4610      	mov	r0, r2
   1797a:	00a1      	lsls	r1, r4, #2
   1797c:	f7f9 fa24 	bl	10dc8 <realloc>
   17980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17982:	63f8      	str	r0, [r7, #60]	; 0x3c
   17984:	2800      	cmp	r0, #0
   17986:	d05b      	beq.n	17a40 <__ssvfscanf_r+0x184c>
   17988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1798a:	809c      	strh	r4, [r3, #4]
   1798c:	6018      	str	r0, [r3, #0]
   1798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17990:	e7d2      	b.n	17938 <__ssvfscanf_r+0x1744>
   17992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17994:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   17998:	2b00      	cmp	r3, #0
   1799a:	f43f ad75 	beq.w	17488 <__ssvfscanf_r+0x1294>
   1799e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   179a2:	065b      	lsls	r3, r3, #25
   179a4:	f57e ad1d 	bpl.w	163e2 <__ssvfscanf_r+0x1ee>
   179a8:	e56a      	b.n	17480 <__ssvfscanf_r+0x128c>
   179aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   179ac:	3202      	adds	r2, #2
   179ae:	d11d      	bne.n	179ec <__ssvfscanf_r+0x17f8>
   179b0:	f8db 2004 	ldr.w	r2, [fp, #4]
   179b4:	2a00      	cmp	r2, #0
   179b6:	461d      	mov	r5, r3
   179b8:	f73f ae80 	bgt.w	176bc <__ssvfscanf_r+0x14c8>
   179bc:	4659      	mov	r1, fp
   179be:	4620      	mov	r0, r4
   179c0:	f001 fdc2 	bl	19548 <__ssrefill_r>
   179c4:	b9e0      	cbnz	r0, 17a00 <__ssvfscanf_r+0x180c>
   179c6:	f1b9 0f00 	cmp.w	r9, #0
   179ca:	f47f ae77 	bne.w	176bc <__ssvfscanf_r+0x14c8>
   179ce:	4645      	mov	r5, r8
   179d0:	46a1      	mov	r9, r4
   179d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   179d4:	b123      	cbz	r3, 179e0 <__ssvfscanf_r+0x17ec>
   179d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   179d8:	1af1      	subs	r1, r6, r3
   179da:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   179de:	d827      	bhi.n	17a30 <__ssvfscanf_r+0x183c>
   179e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   179e2:	2b00      	cmp	r3, #0
   179e4:	f47e ac2d 	bne.w	16242 <__ssvfscanf_r+0x4e>
   179e8:	f7ff ba1c 	b.w	16e24 <__ssvfscanf_r+0xc30>
   179ec:	449a      	add	sl, r3
   179ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   179f0:	2b03      	cmp	r3, #3
   179f2:	f47f ae97 	bne.w	17724 <__ssvfscanf_r+0x1530>
   179f6:	682b      	ldr	r3, [r5, #0]
   179f8:	2b04      	cmp	r3, #4
   179fa:	f47f ae93 	bne.w	17724 <__ssvfscanf_r+0x1530>
   179fe:	e693      	b.n	17728 <__ssvfscanf_r+0x1534>
   17a00:	46a1      	mov	r9, r4
   17a02:	462c      	mov	r4, r5
   17a04:	4645      	mov	r5, r8
   17a06:	2c00      	cmp	r4, #0
   17a08:	d0e3      	beq.n	179d2 <__ssvfscanf_r+0x17de>
   17a0a:	f7fe bcdf 	b.w	163cc <__ssvfscanf_r+0x1d8>
   17a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17a10:	1946      	adds	r6, r0, r5
   17a12:	6010      	str	r0, [r2, #0]
   17a14:	ea4f 0848 	mov.w	r8, r8, lsl #1
   17a18:	3604      	adds	r6, #4
   17a1a:	f8db 3004 	ldr.w	r3, [fp, #4]
   17a1e:	2b00      	cmp	r3, #0
   17a20:	f04f 0500 	mov.w	r5, #0
   17a24:	ddca      	ble.n	179bc <__ssvfscanf_r+0x17c8>
   17a26:	f1b9 0f00 	cmp.w	r9, #0
   17a2a:	f47f ae47 	bne.w	176bc <__ssvfscanf_r+0x14c8>
   17a2e:	e7ce      	b.n	179ce <__ssvfscanf_r+0x17da>
   17a30:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   17a32:	6820      	ldr	r0, [r4, #0]
   17a34:	f7f9 f9c8 	bl	10dc8 <realloc>
   17a38:	2800      	cmp	r0, #0
   17a3a:	d0d1      	beq.n	179e0 <__ssvfscanf_r+0x17ec>
   17a3c:	6020      	str	r0, [r4, #0]
   17a3e:	e7cf      	b.n	179e0 <__ssvfscanf_r+0x17ec>
   17a40:	4690      	mov	r8, r2
   17a42:	e521      	b.n	17488 <__ssvfscanf_r+0x1294>

00017a44 <_fclose_r>:
   17a44:	b570      	push	{r4, r5, r6, lr}
   17a46:	2900      	cmp	r1, #0
   17a48:	d04b      	beq.n	17ae2 <_fclose_r+0x9e>
   17a4a:	4606      	mov	r6, r0
   17a4c:	460c      	mov	r4, r1
   17a4e:	b110      	cbz	r0, 17a56 <_fclose_r+0x12>
   17a50:	6b43      	ldr	r3, [r0, #52]	; 0x34
   17a52:	2b00      	cmp	r3, #0
   17a54:	d048      	beq.n	17ae8 <_fclose_r+0xa4>
   17a56:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17a58:	07d8      	lsls	r0, r3, #31
   17a5a:	d534      	bpl.n	17ac6 <_fclose_r+0x82>
   17a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17a60:	2b00      	cmp	r3, #0
   17a62:	d03e      	beq.n	17ae2 <_fclose_r+0x9e>
   17a64:	4621      	mov	r1, r4
   17a66:	4630      	mov	r0, r6
   17a68:	f000 f850 	bl	17b0c <__sflush_r>
   17a6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17a6e:	4605      	mov	r5, r0
   17a70:	b133      	cbz	r3, 17a80 <_fclose_r+0x3c>
   17a72:	69e1      	ldr	r1, [r4, #28]
   17a74:	4630      	mov	r0, r6
   17a76:	4798      	blx	r3
   17a78:	2800      	cmp	r0, #0
   17a7a:	bfb8      	it	lt
   17a7c:	f04f 35ff 	movlt.w	r5, #4294967295
   17a80:	89a3      	ldrh	r3, [r4, #12]
   17a82:	061a      	lsls	r2, r3, #24
   17a84:	d43c      	bmi.n	17b00 <_fclose_r+0xbc>
   17a86:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17a88:	b141      	cbz	r1, 17a9c <_fclose_r+0x58>
   17a8a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17a8e:	4299      	cmp	r1, r3
   17a90:	d002      	beq.n	17a98 <_fclose_r+0x54>
   17a92:	4630      	mov	r0, r6
   17a94:	f7fb fb46 	bl	13124 <_free_r>
   17a98:	2300      	movs	r3, #0
   17a9a:	6323      	str	r3, [r4, #48]	; 0x30
   17a9c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   17a9e:	b121      	cbz	r1, 17aaa <_fclose_r+0x66>
   17aa0:	4630      	mov	r0, r6
   17aa2:	f7fb fb3f 	bl	13124 <_free_r>
   17aa6:	2300      	movs	r3, #0
   17aa8:	6463      	str	r3, [r4, #68]	; 0x44
   17aaa:	f7fa fc27 	bl	122fc <__sfp_lock_acquire>
   17aae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17ab0:	2200      	movs	r2, #0
   17ab2:	07db      	lsls	r3, r3, #31
   17ab4:	81a2      	strh	r2, [r4, #12]
   17ab6:	d51f      	bpl.n	17af8 <_fclose_r+0xb4>
   17ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17aba:	f7fa fff1 	bl	12aa0 <__retarget_lock_close_recursive>
   17abe:	f7fa fc23 	bl	12308 <__sfp_lock_release>
   17ac2:	4628      	mov	r0, r5
   17ac4:	bd70      	pop	{r4, r5, r6, pc}
   17ac6:	89a3      	ldrh	r3, [r4, #12]
   17ac8:	0599      	lsls	r1, r3, #22
   17aca:	d4cb      	bmi.n	17a64 <_fclose_r+0x20>
   17acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17ace:	f7fa ffe9 	bl	12aa4 <__retarget_lock_acquire_recursive>
   17ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17ad6:	2b00      	cmp	r3, #0
   17ad8:	d1c4      	bne.n	17a64 <_fclose_r+0x20>
   17ada:	6e65      	ldr	r5, [r4, #100]	; 0x64
   17adc:	f015 0501 	ands.w	r5, r5, #1
   17ae0:	d005      	beq.n	17aee <_fclose_r+0xaa>
   17ae2:	2500      	movs	r5, #0
   17ae4:	4628      	mov	r0, r5
   17ae6:	bd70      	pop	{r4, r5, r6, pc}
   17ae8:	f7fa fbea 	bl	122c0 <__sinit>
   17aec:	e7b3      	b.n	17a56 <_fclose_r+0x12>
   17aee:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17af0:	f7fa ffda 	bl	12aa8 <__retarget_lock_release_recursive>
   17af4:	4628      	mov	r0, r5
   17af6:	bd70      	pop	{r4, r5, r6, pc}
   17af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17afa:	f7fa ffd5 	bl	12aa8 <__retarget_lock_release_recursive>
   17afe:	e7db      	b.n	17ab8 <_fclose_r+0x74>
   17b00:	6921      	ldr	r1, [r4, #16]
   17b02:	4630      	mov	r0, r6
   17b04:	f7fb fb0e 	bl	13124 <_free_r>
   17b08:	e7bd      	b.n	17a86 <_fclose_r+0x42>
   17b0a:	bf00      	nop

00017b0c <__sflush_r>:
   17b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   17b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b14:	460c      	mov	r4, r1
   17b16:	0711      	lsls	r1, r2, #28
   17b18:	4680      	mov	r8, r0
   17b1a:	d447      	bmi.n	17bac <__sflush_r+0xa0>
   17b1c:	6863      	ldr	r3, [r4, #4]
   17b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   17b22:	2b00      	cmp	r3, #0
   17b24:	81a2      	strh	r2, [r4, #12]
   17b26:	dd5e      	ble.n	17be6 <__sflush_r+0xda>
   17b28:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   17b2a:	2d00      	cmp	r5, #0
   17b2c:	d058      	beq.n	17be0 <__sflush_r+0xd4>
   17b2e:	2300      	movs	r3, #0
   17b30:	f8d8 6000 	ldr.w	r6, [r8]
   17b34:	f8c8 3000 	str.w	r3, [r8]
   17b38:	b293      	uxth	r3, r2
   17b3a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   17b3e:	d156      	bne.n	17bee <__sflush_r+0xe2>
   17b40:	2301      	movs	r3, #1
   17b42:	69e1      	ldr	r1, [r4, #28]
   17b44:	4640      	mov	r0, r8
   17b46:	47a8      	blx	r5
   17b48:	1c43      	adds	r3, r0, #1
   17b4a:	d067      	beq.n	17c1c <__sflush_r+0x110>
   17b4c:	89a3      	ldrh	r3, [r4, #12]
   17b4e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   17b50:	075f      	lsls	r7, r3, #29
   17b52:	d505      	bpl.n	17b60 <__sflush_r+0x54>
   17b54:	6863      	ldr	r3, [r4, #4]
   17b56:	1ac0      	subs	r0, r0, r3
   17b58:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17b5a:	b10b      	cbz	r3, 17b60 <__sflush_r+0x54>
   17b5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17b5e:	1ac0      	subs	r0, r0, r3
   17b60:	69e1      	ldr	r1, [r4, #28]
   17b62:	4602      	mov	r2, r0
   17b64:	2300      	movs	r3, #0
   17b66:	4640      	mov	r0, r8
   17b68:	47a8      	blx	r5
   17b6a:	1c41      	adds	r1, r0, #1
   17b6c:	d141      	bne.n	17bf2 <__sflush_r+0xe6>
   17b6e:	f8d8 3000 	ldr.w	r3, [r8]
   17b72:	2b00      	cmp	r3, #0
   17b74:	d03d      	beq.n	17bf2 <__sflush_r+0xe6>
   17b76:	2b1d      	cmp	r3, #29
   17b78:	d001      	beq.n	17b7e <__sflush_r+0x72>
   17b7a:	2b16      	cmp	r3, #22
   17b7c:	d156      	bne.n	17c2c <__sflush_r+0x120>
   17b7e:	89a3      	ldrh	r3, [r4, #12]
   17b80:	6922      	ldr	r2, [r4, #16]
   17b82:	6022      	str	r2, [r4, #0]
   17b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   17b88:	2100      	movs	r1, #0
   17b8a:	6061      	str	r1, [r4, #4]
   17b8c:	81a3      	strh	r3, [r4, #12]
   17b8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17b90:	f8c8 6000 	str.w	r6, [r8]
   17b94:	b321      	cbz	r1, 17be0 <__sflush_r+0xd4>
   17b96:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17b9a:	4299      	cmp	r1, r3
   17b9c:	d002      	beq.n	17ba4 <__sflush_r+0x98>
   17b9e:	4640      	mov	r0, r8
   17ba0:	f7fb fac0 	bl	13124 <_free_r>
   17ba4:	2000      	movs	r0, #0
   17ba6:	6320      	str	r0, [r4, #48]	; 0x30
   17ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17bac:	6926      	ldr	r6, [r4, #16]
   17bae:	b1be      	cbz	r6, 17be0 <__sflush_r+0xd4>
   17bb0:	b293      	uxth	r3, r2
   17bb2:	6825      	ldr	r5, [r4, #0]
   17bb4:	6026      	str	r6, [r4, #0]
   17bb6:	079a      	lsls	r2, r3, #30
   17bb8:	bf0c      	ite	eq
   17bba:	6963      	ldreq	r3, [r4, #20]
   17bbc:	2300      	movne	r3, #0
   17bbe:	1bad      	subs	r5, r5, r6
   17bc0:	60a3      	str	r3, [r4, #8]
   17bc2:	e00b      	b.n	17bdc <__sflush_r+0xd0>
   17bc4:	462b      	mov	r3, r5
   17bc6:	4632      	mov	r2, r6
   17bc8:	69e1      	ldr	r1, [r4, #28]
   17bca:	6a67      	ldr	r7, [r4, #36]	; 0x24
   17bcc:	4640      	mov	r0, r8
   17bce:	47b8      	blx	r7
   17bd0:	f1b0 0c00 	subs.w	ip, r0, #0
   17bd4:	eba5 050c 	sub.w	r5, r5, ip
   17bd8:	4466      	add	r6, ip
   17bda:	dd17      	ble.n	17c0c <__sflush_r+0x100>
   17bdc:	2d00      	cmp	r5, #0
   17bde:	dcf1      	bgt.n	17bc4 <__sflush_r+0xb8>
   17be0:	2000      	movs	r0, #0
   17be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17be6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17be8:	2b00      	cmp	r3, #0
   17bea:	dc9d      	bgt.n	17b28 <__sflush_r+0x1c>
   17bec:	e7f8      	b.n	17be0 <__sflush_r+0xd4>
   17bee:	6d20      	ldr	r0, [r4, #80]	; 0x50
   17bf0:	e7ae      	b.n	17b50 <__sflush_r+0x44>
   17bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17bf6:	6922      	ldr	r2, [r4, #16]
   17bf8:	6022      	str	r2, [r4, #0]
   17bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   17bfe:	81a3      	strh	r3, [r4, #12]
   17c00:	2200      	movs	r2, #0
   17c02:	04db      	lsls	r3, r3, #19
   17c04:	6062      	str	r2, [r4, #4]
   17c06:	d5c2      	bpl.n	17b8e <__sflush_r+0x82>
   17c08:	6520      	str	r0, [r4, #80]	; 0x50
   17c0a:	e7c0      	b.n	17b8e <__sflush_r+0x82>
   17c0c:	89a3      	ldrh	r3, [r4, #12]
   17c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17c12:	f04f 30ff 	mov.w	r0, #4294967295
   17c16:	81a3      	strh	r3, [r4, #12]
   17c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17c1c:	f8d8 3000 	ldr.w	r3, [r8]
   17c20:	2b00      	cmp	r3, #0
   17c22:	d093      	beq.n	17b4c <__sflush_r+0x40>
   17c24:	2b1d      	cmp	r3, #29
   17c26:	d006      	beq.n	17c36 <__sflush_r+0x12a>
   17c28:	2b16      	cmp	r3, #22
   17c2a:	d004      	beq.n	17c36 <__sflush_r+0x12a>
   17c2c:	89a3      	ldrh	r3, [r4, #12]
   17c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17c32:	81a3      	strh	r3, [r4, #12]
   17c34:	e7d5      	b.n	17be2 <__sflush_r+0xd6>
   17c36:	f8c8 6000 	str.w	r6, [r8]
   17c3a:	e7d1      	b.n	17be0 <__sflush_r+0xd4>

00017c3c <_fflush_r>:
   17c3c:	b538      	push	{r3, r4, r5, lr}
   17c3e:	460c      	mov	r4, r1
   17c40:	4605      	mov	r5, r0
   17c42:	b108      	cbz	r0, 17c48 <_fflush_r+0xc>
   17c44:	6b43      	ldr	r3, [r0, #52]	; 0x34
   17c46:	b303      	cbz	r3, 17c8a <_fflush_r+0x4e>
   17c48:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   17c4c:	b188      	cbz	r0, 17c72 <_fflush_r+0x36>
   17c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17c50:	07db      	lsls	r3, r3, #31
   17c52:	d401      	bmi.n	17c58 <_fflush_r+0x1c>
   17c54:	0581      	lsls	r1, r0, #22
   17c56:	d50f      	bpl.n	17c78 <_fflush_r+0x3c>
   17c58:	4628      	mov	r0, r5
   17c5a:	4621      	mov	r1, r4
   17c5c:	f7ff ff56 	bl	17b0c <__sflush_r>
   17c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17c62:	07da      	lsls	r2, r3, #31
   17c64:	4605      	mov	r5, r0
   17c66:	d402      	bmi.n	17c6e <_fflush_r+0x32>
   17c68:	89a3      	ldrh	r3, [r4, #12]
   17c6a:	059b      	lsls	r3, r3, #22
   17c6c:	d508      	bpl.n	17c80 <_fflush_r+0x44>
   17c6e:	4628      	mov	r0, r5
   17c70:	bd38      	pop	{r3, r4, r5, pc}
   17c72:	4605      	mov	r5, r0
   17c74:	4628      	mov	r0, r5
   17c76:	bd38      	pop	{r3, r4, r5, pc}
   17c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17c7a:	f7fa ff13 	bl	12aa4 <__retarget_lock_acquire_recursive>
   17c7e:	e7eb      	b.n	17c58 <_fflush_r+0x1c>
   17c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17c82:	f7fa ff11 	bl	12aa8 <__retarget_lock_release_recursive>
   17c86:	4628      	mov	r0, r5
   17c88:	bd38      	pop	{r3, r4, r5, pc}
   17c8a:	f7fa fb19 	bl	122c0 <__sinit>
   17c8e:	e7db      	b.n	17c48 <_fflush_r+0xc>

00017c90 <__sccl>:
   17c90:	b570      	push	{r4, r5, r6, lr}
   17c92:	780c      	ldrb	r4, [r1, #0]
   17c94:	2c5e      	cmp	r4, #94	; 0x5e
   17c96:	4686      	mov	lr, r0
   17c98:	d01e      	beq.n	17cd8 <__sccl+0x48>
   17c9a:	2200      	movs	r2, #0
   17c9c:	1c48      	adds	r0, r1, #1
   17c9e:	4694      	mov	ip, r2
   17ca0:	f10e 33ff 	add.w	r3, lr, #4294967295
   17ca4:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   17ca8:	f803 2f01 	strb.w	r2, [r3, #1]!
   17cac:	428b      	cmp	r3, r1
   17cae:	d1fb      	bne.n	17ca8 <__sccl+0x18>
   17cb0:	b184      	cbz	r4, 17cd4 <__sccl+0x44>
   17cb2:	f08c 0101 	eor.w	r1, ip, #1
   17cb6:	f80e 1004 	strb.w	r1, [lr, r4]
   17cba:	1c45      	adds	r5, r0, #1
   17cbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   17cc0:	2b2d      	cmp	r3, #45	; 0x2d
   17cc2:	d00e      	beq.n	17ce2 <__sccl+0x52>
   17cc4:	2b5d      	cmp	r3, #93	; 0x5d
   17cc6:	d003      	beq.n	17cd0 <__sccl+0x40>
   17cc8:	b11b      	cbz	r3, 17cd2 <__sccl+0x42>
   17cca:	461c      	mov	r4, r3
   17ccc:	4628      	mov	r0, r5
   17cce:	e7f2      	b.n	17cb6 <__sccl+0x26>
   17cd0:	4628      	mov	r0, r5
   17cd2:	bd70      	pop	{r4, r5, r6, pc}
   17cd4:	3801      	subs	r0, #1
   17cd6:	bd70      	pop	{r4, r5, r6, pc}
   17cd8:	2201      	movs	r2, #1
   17cda:	784c      	ldrb	r4, [r1, #1]
   17cdc:	1c88      	adds	r0, r1, #2
   17cde:	4694      	mov	ip, r2
   17ce0:	e7de      	b.n	17ca0 <__sccl+0x10>
   17ce2:	f890 c001 	ldrb.w	ip, [r0, #1]
   17ce6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   17cea:	d0ee      	beq.n	17cca <__sccl+0x3a>
   17cec:	4564      	cmp	r4, ip
   17cee:	dcec      	bgt.n	17cca <__sccl+0x3a>
   17cf0:	1c66      	adds	r6, r4, #1
   17cf2:	3002      	adds	r0, #2
   17cf4:	eb0e 0206 	add.w	r2, lr, r6
   17cf8:	f802 1b01 	strb.w	r1, [r2], #1
   17cfc:	eba2 030e 	sub.w	r3, r2, lr
   17d00:	3b01      	subs	r3, #1
   17d02:	459c      	cmp	ip, r3
   17d04:	dcf8      	bgt.n	17cf8 <__sccl+0x68>
   17d06:	ebac 0304 	sub.w	r3, ip, r4
   17d0a:	3b01      	subs	r3, #1
   17d0c:	4564      	cmp	r4, ip
   17d0e:	bfa8      	it	ge
   17d10:	2300      	movge	r3, #0
   17d12:	3502      	adds	r5, #2
   17d14:	199c      	adds	r4, r3, r6
   17d16:	e7d1      	b.n	17cbc <__sccl+0x2c>

00017d18 <stpncpy>:
   17d18:	ea41 0300 	orr.w	r3, r1, r0
   17d1c:	079b      	lsls	r3, r3, #30
   17d1e:	b430      	push	{r4, r5}
   17d20:	d101      	bne.n	17d26 <stpncpy+0xe>
   17d22:	2a03      	cmp	r2, #3
   17d24:	d80f      	bhi.n	17d46 <stpncpy+0x2e>
   17d26:	f101 3cff 	add.w	ip, r1, #4294967295
   17d2a:	e007      	b.n	17d3c <stpncpy+0x24>
   17d2c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   17d30:	f803 1b01 	strb.w	r1, [r3], #1
   17d34:	1e54      	subs	r4, r2, #1
   17d36:	b1c1      	cbz	r1, 17d6a <stpncpy+0x52>
   17d38:	4622      	mov	r2, r4
   17d3a:	4618      	mov	r0, r3
   17d3c:	4603      	mov	r3, r0
   17d3e:	2a00      	cmp	r2, #0
   17d40:	d1f4      	bne.n	17d2c <stpncpy+0x14>
   17d42:	bc30      	pop	{r4, r5}
   17d44:	4770      	bx	lr
   17d46:	460b      	mov	r3, r1
   17d48:	4619      	mov	r1, r3
   17d4a:	f853 5b04 	ldr.w	r5, [r3], #4
   17d4e:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   17d52:	ea24 0405 	bic.w	r4, r4, r5
   17d56:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   17d5a:	d1e4      	bne.n	17d26 <stpncpy+0xe>
   17d5c:	3a04      	subs	r2, #4
   17d5e:	2a03      	cmp	r2, #3
   17d60:	f840 5b04 	str.w	r5, [r0], #4
   17d64:	4619      	mov	r1, r3
   17d66:	d8ef      	bhi.n	17d48 <stpncpy+0x30>
   17d68:	e7dd      	b.n	17d26 <stpncpy+0xe>
   17d6a:	4402      	add	r2, r0
   17d6c:	2c00      	cmp	r4, #0
   17d6e:	d0e8      	beq.n	17d42 <stpncpy+0x2a>
   17d70:	f803 1b01 	strb.w	r1, [r3], #1
   17d74:	4293      	cmp	r3, r2
   17d76:	d1fb      	bne.n	17d70 <stpncpy+0x58>
   17d78:	bc30      	pop	{r4, r5}
   17d7a:	4770      	bx	lr

00017d7c <_localeconv_r>:
   17d7c:	4800      	ldr	r0, [pc, #0]	; (17d80 <_localeconv_r+0x4>)
   17d7e:	4770      	bx	lr
   17d80:	20008f3c 	.word	0x20008f3c
   17d84:	00000000 	.word	0x00000000

00017d88 <frexp>:
   17d88:	b430      	push	{r4, r5}
   17d8a:	b082      	sub	sp, #8
   17d8c:	ed8d 0b00 	vstr	d0, [sp]
   17d90:	9a01      	ldr	r2, [sp, #4]
   17d92:	4c19      	ldr	r4, [pc, #100]	; (17df8 <frexp+0x70>)
   17d94:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   17d98:	2100      	movs	r1, #0
   17d9a:	42a3      	cmp	r3, r4
   17d9c:	6001      	str	r1, [r0, #0]
   17d9e:	dc21      	bgt.n	17de4 <frexp+0x5c>
   17da0:	9c00      	ldr	r4, [sp, #0]
   17da2:	431c      	orrs	r4, r3
   17da4:	d01e      	beq.n	17de4 <frexp+0x5c>
   17da6:	4c15      	ldr	r4, [pc, #84]	; (17dfc <frexp+0x74>)
   17da8:	4014      	ands	r4, r2
   17daa:	b954      	cbnz	r4, 17dc2 <frexp+0x3a>
   17dac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 17df0 <frexp+0x68>
   17db0:	ee20 7b07 	vmul.f64	d7, d0, d7
   17db4:	ed8d 7b00 	vstr	d7, [sp]
   17db8:	9a01      	ldr	r2, [sp, #4]
   17dba:	f06f 0135 	mvn.w	r1, #53	; 0x35
   17dbe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   17dc2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   17dc6:	e9dd 4500 	ldrd	r4, r5, [sp]
   17dca:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   17dce:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   17dd2:	151b      	asrs	r3, r3, #20
   17dd4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   17dd8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   17ddc:	e9cd 4500 	strd	r4, r5, [sp]
   17de0:	440b      	add	r3, r1
   17de2:	6003      	str	r3, [r0, #0]
   17de4:	ed9d 0b00 	vldr	d0, [sp]
   17de8:	b002      	add	sp, #8
   17dea:	bc30      	pop	{r4, r5}
   17dec:	4770      	bx	lr
   17dee:	bf00      	nop
   17df0:	00000000 	.word	0x00000000
   17df4:	43500000 	.word	0x43500000
   17df8:	7fefffff 	.word	0x7fefffff
   17dfc:	7ff00000 	.word	0x7ff00000

00017e00 <__assert_func>:
   17e00:	b500      	push	{lr}
   17e02:	4c0b      	ldr	r4, [pc, #44]	; (17e30 <__assert_func+0x30>)
   17e04:	6825      	ldr	r5, [r4, #0]
   17e06:	4614      	mov	r4, r2
   17e08:	68ee      	ldr	r6, [r5, #12]
   17e0a:	461a      	mov	r2, r3
   17e0c:	b085      	sub	sp, #20
   17e0e:	4603      	mov	r3, r0
   17e10:	460d      	mov	r5, r1
   17e12:	b14c      	cbz	r4, 17e28 <__assert_func+0x28>
   17e14:	4907      	ldr	r1, [pc, #28]	; (17e34 <__assert_func+0x34>)
   17e16:	9500      	str	r5, [sp, #0]
   17e18:	e9cd 1401 	strd	r1, r4, [sp, #4]
   17e1c:	4630      	mov	r0, r6
   17e1e:	4906      	ldr	r1, [pc, #24]	; (17e38 <__assert_func+0x38>)
   17e20:	f001 fabe 	bl	193a0 <fiprintf>
   17e24:	f7f6 ff92 	bl	ed4c <abort>
   17e28:	4904      	ldr	r1, [pc, #16]	; (17e3c <__assert_func+0x3c>)
   17e2a:	460c      	mov	r4, r1
   17e2c:	e7f3      	b.n	17e16 <__assert_func+0x16>
   17e2e:	bf00      	nop
   17e30:	200093d4 	.word	0x200093d4
   17e34:	20000d20 	.word	0x20000d20
   17e38:	20000d30 	.word	0x20000d30
   17e3c:	200004ec 	.word	0x200004ec

00017e40 <_calloc_r>:
   17e40:	b538      	push	{r3, r4, r5, lr}
   17e42:	fba1 1402 	umull	r1, r4, r1, r2
   17e46:	bb8c      	cbnz	r4, 17eac <_calloc_r+0x6c>
   17e48:	f7f8 fd02 	bl	10850 <_malloc_r>
   17e4c:	4605      	mov	r5, r0
   17e4e:	b1e0      	cbz	r0, 17e8a <_calloc_r+0x4a>
   17e50:	f850 2c04 	ldr.w	r2, [r0, #-4]
   17e54:	f022 0203 	bic.w	r2, r2, #3
   17e58:	3a04      	subs	r2, #4
   17e5a:	2a24      	cmp	r2, #36	; 0x24
   17e5c:	d817      	bhi.n	17e8e <_calloc_r+0x4e>
   17e5e:	2a13      	cmp	r2, #19
   17e60:	d91a      	bls.n	17e98 <_calloc_r+0x58>
   17e62:	2a1b      	cmp	r2, #27
   17e64:	e9c0 4400 	strd	r4, r4, [r0]
   17e68:	d91d      	bls.n	17ea6 <_calloc_r+0x66>
   17e6a:	2a24      	cmp	r2, #36	; 0x24
   17e6c:	bf14      	ite	ne
   17e6e:	f100 0210 	addne.w	r2, r0, #16
   17e72:	f100 0218 	addeq.w	r2, r0, #24
   17e76:	f04f 0300 	mov.w	r3, #0
   17e7a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   17e7e:	bf04      	itt	eq
   17e80:	6104      	streq	r4, [r0, #16]
   17e82:	6144      	streq	r4, [r0, #20]
   17e84:	e9c2 3300 	strd	r3, r3, [r2]
   17e88:	6093      	str	r3, [r2, #8]
   17e8a:	4628      	mov	r0, r5
   17e8c:	bd38      	pop	{r3, r4, r5, pc}
   17e8e:	4621      	mov	r1, r4
   17e90:	f7fa fc4e 	bl	12730 <memset>
   17e94:	4628      	mov	r0, r5
   17e96:	bd38      	pop	{r3, r4, r5, pc}
   17e98:	4602      	mov	r2, r0
   17e9a:	2300      	movs	r3, #0
   17e9c:	e9c2 3300 	strd	r3, r3, [r2]
   17ea0:	6093      	str	r3, [r2, #8]
   17ea2:	4628      	mov	r0, r5
   17ea4:	bd38      	pop	{r3, r4, r5, pc}
   17ea6:	f100 0208 	add.w	r2, r0, #8
   17eaa:	e7f6      	b.n	17e9a <_calloc_r+0x5a>
   17eac:	f7fa fdcc 	bl	12a48 <__errno>
   17eb0:	230c      	movs	r3, #12
   17eb2:	2500      	movs	r5, #0
   17eb4:	6003      	str	r3, [r0, #0]
   17eb6:	e7e8      	b.n	17e8a <_calloc_r+0x4a>

00017eb8 <quorem>:
   17eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ebc:	6903      	ldr	r3, [r0, #16]
   17ebe:	690c      	ldr	r4, [r1, #16]
   17ec0:	42a3      	cmp	r3, r4
   17ec2:	b083      	sub	sp, #12
   17ec4:	f2c0 8087 	blt.w	17fd6 <quorem+0x11e>
   17ec8:	3c01      	subs	r4, #1
   17eca:	f101 0514 	add.w	r5, r1, #20
   17ece:	00a3      	lsls	r3, r4, #2
   17ed0:	f100 0814 	add.w	r8, r0, #20
   17ed4:	9300      	str	r3, [sp, #0]
   17ed6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   17eda:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   17ede:	3301      	adds	r3, #1
   17ee0:	4681      	mov	r9, r0
   17ee2:	429a      	cmp	r2, r3
   17ee4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   17ee8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   17eec:	9001      	str	r0, [sp, #4]
   17eee:	fbb2 f6f3 	udiv	r6, r2, r3
   17ef2:	d33b      	bcc.n	17f6c <quorem+0xb4>
   17ef4:	f04f 0c00 	mov.w	ip, #0
   17ef8:	46ae      	mov	lr, r5
   17efa:	4640      	mov	r0, r8
   17efc:	46e2      	mov	sl, ip
   17efe:	4663      	mov	r3, ip
   17f00:	f85e bb04 	ldr.w	fp, [lr], #4
   17f04:	6802      	ldr	r2, [r0, #0]
   17f06:	fa1f fc8b 	uxth.w	ip, fp
   17f0a:	fb06 330c 	mla	r3, r6, ip, r3
   17f0e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   17f12:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   17f16:	fb06 cc0b 	mla	ip, r6, fp, ip
   17f1a:	b29b      	uxth	r3, r3
   17f1c:	ebaa 0303 	sub.w	r3, sl, r3
   17f20:	fa1f fa8c 	uxth.w	sl, ip
   17f24:	fa13 f382 	uxtah	r3, r3, r2
   17f28:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   17f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   17f30:	b29b      	uxth	r3, r3
   17f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   17f36:	4577      	cmp	r7, lr
   17f38:	f840 3b04 	str.w	r3, [r0], #4
   17f3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   17f40:	ea4f 431c 	mov.w	r3, ip, lsr #16
   17f44:	d2dc      	bcs.n	17f00 <quorem+0x48>
   17f46:	9b00      	ldr	r3, [sp, #0]
   17f48:	f858 3003 	ldr.w	r3, [r8, r3]
   17f4c:	b973      	cbnz	r3, 17f6c <quorem+0xb4>
   17f4e:	9b01      	ldr	r3, [sp, #4]
   17f50:	3b04      	subs	r3, #4
   17f52:	4598      	cmp	r8, r3
   17f54:	d304      	bcc.n	17f60 <quorem+0xa8>
   17f56:	e007      	b.n	17f68 <quorem+0xb0>
   17f58:	4598      	cmp	r8, r3
   17f5a:	f104 34ff 	add.w	r4, r4, #4294967295
   17f5e:	d203      	bcs.n	17f68 <quorem+0xb0>
   17f60:	f853 2904 	ldr.w	r2, [r3], #-4
   17f64:	2a00      	cmp	r2, #0
   17f66:	d0f7      	beq.n	17f58 <quorem+0xa0>
   17f68:	f8c9 4010 	str.w	r4, [r9, #16]
   17f6c:	4648      	mov	r0, r9
   17f6e:	f7fc f8e3 	bl	14138 <__mcmp>
   17f72:	2800      	cmp	r0, #0
   17f74:	db2b      	blt.n	17fce <quorem+0x116>
   17f76:	3601      	adds	r6, #1
   17f78:	4641      	mov	r1, r8
   17f7a:	2300      	movs	r3, #0
   17f7c:	f855 0b04 	ldr.w	r0, [r5], #4
   17f80:	f8d1 c000 	ldr.w	ip, [r1]
   17f84:	b282      	uxth	r2, r0
   17f86:	1a9a      	subs	r2, r3, r2
   17f88:	0c03      	lsrs	r3, r0, #16
   17f8a:	fa12 f28c 	uxtah	r2, r2, ip
   17f8e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   17f92:	eb03 4322 	add.w	r3, r3, r2, asr #16
   17f96:	b292      	uxth	r2, r2
   17f98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   17f9c:	42af      	cmp	r7, r5
   17f9e:	f841 2b04 	str.w	r2, [r1], #4
   17fa2:	ea4f 4323 	mov.w	r3, r3, asr #16
   17fa6:	d2e9      	bcs.n	17f7c <quorem+0xc4>
   17fa8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   17fac:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   17fb0:	b96a      	cbnz	r2, 17fce <quorem+0x116>
   17fb2:	3b04      	subs	r3, #4
   17fb4:	4598      	cmp	r8, r3
   17fb6:	d304      	bcc.n	17fc2 <quorem+0x10a>
   17fb8:	e007      	b.n	17fca <quorem+0x112>
   17fba:	4598      	cmp	r8, r3
   17fbc:	f104 34ff 	add.w	r4, r4, #4294967295
   17fc0:	d203      	bcs.n	17fca <quorem+0x112>
   17fc2:	f853 2904 	ldr.w	r2, [r3], #-4
   17fc6:	2a00      	cmp	r2, #0
   17fc8:	d0f7      	beq.n	17fba <quorem+0x102>
   17fca:	f8c9 4010 	str.w	r4, [r9, #16]
   17fce:	4630      	mov	r0, r6
   17fd0:	b003      	add	sp, #12
   17fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fd6:	2000      	movs	r0, #0
   17fd8:	b003      	add	sp, #12
   17fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fde:	bf00      	nop

00017fe0 <_dtoa_r>:
   17fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fe4:	ed2d 8b02 	vpush	{d8}
   17fe8:	b08f      	sub	sp, #60	; 0x3c
   17fea:	ed8d 0b02 	vstr	d0, [sp, #8]
   17fee:	9101      	str	r1, [sp, #4]
   17ff0:	6b81      	ldr	r1, [r0, #56]	; 0x38
   17ff2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   17ff4:	9305      	str	r3, [sp, #20]
   17ff6:	ec57 6b10 	vmov	r6, r7, d0
   17ffa:	4604      	mov	r4, r0
   17ffc:	4693      	mov	fp, r2
   17ffe:	b141      	cbz	r1, 18012 <_dtoa_r+0x32>
   18000:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   18002:	604a      	str	r2, [r1, #4]
   18004:	2301      	movs	r3, #1
   18006:	4093      	lsls	r3, r2
   18008:	608b      	str	r3, [r1, #8]
   1800a:	f7fb fddd 	bl	13bc8 <_Bfree>
   1800e:	2300      	movs	r3, #0
   18010:	63a3      	str	r3, [r4, #56]	; 0x38
   18012:	f1b7 0800 	subs.w	r8, r7, #0
   18016:	bfb4      	ite	lt
   18018:	2301      	movlt	r3, #1
   1801a:	2300      	movge	r3, #0
   1801c:	602b      	str	r3, [r5, #0]
   1801e:	4bbe      	ldr	r3, [pc, #760]	; (18318 <_dtoa_r+0x338>)
   18020:	bfbc      	itt	lt
   18022:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   18026:	f8cd 800c 	strlt.w	r8, [sp, #12]
   1802a:	ea33 0308 	bics.w	r3, r3, r8
   1802e:	f000 809f 	beq.w	18170 <_dtoa_r+0x190>
   18032:	ed9d 8b02 	vldr	d8, [sp, #8]
   18036:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1803a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1803e:	d111      	bne.n	18064 <_dtoa_r+0x84>
   18040:	9a05      	ldr	r2, [sp, #20]
   18042:	2301      	movs	r3, #1
   18044:	6013      	str	r3, [r2, #0]
   18046:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18048:	2b00      	cmp	r3, #0
   1804a:	f000 823f 	beq.w	184cc <_dtoa_r+0x4ec>
   1804e:	4bb3      	ldr	r3, [pc, #716]	; (1831c <_dtoa_r+0x33c>)
   18050:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   18052:	6013      	str	r3, [r2, #0]
   18054:	3b01      	subs	r3, #1
   18056:	9300      	str	r3, [sp, #0]
   18058:	9800      	ldr	r0, [sp, #0]
   1805a:	b00f      	add	sp, #60	; 0x3c
   1805c:	ecbd 8b02 	vpop	{d8}
   18060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18064:	aa0c      	add	r2, sp, #48	; 0x30
   18066:	a90d      	add	r1, sp, #52	; 0x34
   18068:	4620      	mov	r0, r4
   1806a:	eeb0 0b48 	vmov.f64	d0, d8
   1806e:	f7fc f9c3 	bl	143f8 <__d2b>
   18072:	ea5f 5318 	movs.w	r3, r8, lsr #20
   18076:	4605      	mov	r5, r0
   18078:	f040 8092 	bne.w	181a0 <_dtoa_r+0x1c0>
   1807c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   18080:	440b      	add	r3, r1
   18082:	f203 4232 	addw	r2, r3, #1074	; 0x432
   18086:	2a20      	cmp	r2, #32
   18088:	f340 82fa 	ble.w	18680 <_dtoa_r+0x6a0>
   1808c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   18090:	fa08 f802 	lsl.w	r8, r8, r2
   18094:	f203 4212 	addw	r2, r3, #1042	; 0x412
   18098:	40d6      	lsrs	r6, r2
   1809a:	ea48 0206 	orr.w	r2, r8, r6
   1809e:	ee07 2a10 	vmov	s14, r2
   180a2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   180a6:	1e58      	subs	r0, r3, #1
   180a8:	ee17 6a90 	vmov	r6, s15
   180ac:	ec53 2b17 	vmov	r2, r3, d7
   180b0:	f04f 0a01 	mov.w	sl, #1
   180b4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   180b8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 18300 <_dtoa_r+0x320>
   180bc:	ed9f 7b92 	vldr	d7, [pc, #584]	; 18308 <_dtoa_r+0x328>
   180c0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 18310 <_dtoa_r+0x330>
   180c4:	ee06 0a90 	vmov	s13, r0
   180c8:	ec43 2b12 	vmov	d2, r2, r3
   180cc:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   180d0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   180d4:	ee32 6b46 	vsub.f64	d6, d2, d6
   180d8:	eea6 7b03 	vfma.f64	d7, d6, d3
   180dc:	eea4 7b05 	vfma.f64	d7, d4, d5
   180e0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   180e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   180e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   180ec:	ee16 7a90 	vmov	r7, s13
   180f0:	d508      	bpl.n	18104 <_dtoa_r+0x124>
   180f2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   180f6:	eeb4 6b47 	vcmp.f64	d6, d7
   180fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   180fe:	bf18      	it	ne
   18100:	f107 37ff 	addne.w	r7, r7, #4294967295
   18104:	2f16      	cmp	r7, #22
   18106:	f200 8145 	bhi.w	18394 <_dtoa_r+0x3b4>
   1810a:	4b85      	ldr	r3, [pc, #532]	; (18320 <_dtoa_r+0x340>)
   1810c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   18110:	ed93 7b00 	vldr	d7, [r3]
   18114:	eeb4 8bc7 	vcmpe.f64	d8, d7
   18118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1811c:	d557      	bpl.n	181ce <_dtoa_r+0x1ee>
   1811e:	1a09      	subs	r1, r1, r0
   18120:	2300      	movs	r3, #0
   18122:	f1b1 0801 	subs.w	r8, r1, #1
   18126:	f107 37ff 	add.w	r7, r7, #4294967295
   1812a:	930a      	str	r3, [sp, #40]	; 0x28
   1812c:	f100 8139 	bmi.w	183a2 <_dtoa_r+0x3c2>
   18130:	2300      	movs	r3, #0
   18132:	9306      	str	r3, [sp, #24]
   18134:	2f00      	cmp	r7, #0
   18136:	da52      	bge.n	181de <_dtoa_r+0x1fe>
   18138:	9b06      	ldr	r3, [sp, #24]
   1813a:	9704      	str	r7, [sp, #16]
   1813c:	1bdb      	subs	r3, r3, r7
   1813e:	9306      	str	r3, [sp, #24]
   18140:	427b      	negs	r3, r7
   18142:	9308      	str	r3, [sp, #32]
   18144:	9b01      	ldr	r3, [sp, #4]
   18146:	2b09      	cmp	r3, #9
   18148:	f04f 0700 	mov.w	r7, #0
   1814c:	d84e      	bhi.n	181ec <_dtoa_r+0x20c>
   1814e:	2b05      	cmp	r3, #5
   18150:	f340 829d 	ble.w	1868e <_dtoa_r+0x6ae>
   18154:	3b04      	subs	r3, #4
   18156:	9301      	str	r3, [sp, #4]
   18158:	2600      	movs	r6, #0
   1815a:	9b01      	ldr	r3, [sp, #4]
   1815c:	1e9a      	subs	r2, r3, #2
   1815e:	2a03      	cmp	r2, #3
   18160:	f200 8125 	bhi.w	183ae <_dtoa_r+0x3ce>
   18164:	e8df f012 	tbh	[pc, r2, lsl #1]
   18168:	03a703aa 	.word	0x03a703aa
   1816c:	037e039d 	.word	0x037e039d
   18170:	9a05      	ldr	r2, [sp, #20]
   18172:	f3c8 0813 	ubfx	r8, r8, #0, #20
   18176:	f242 730f 	movw	r3, #9999	; 0x270f
   1817a:	ea58 0806 	orrs.w	r8, r8, r6
   1817e:	6013      	str	r3, [r2, #0]
   18180:	d11e      	bne.n	181c0 <_dtoa_r+0x1e0>
   18182:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18184:	2b00      	cmp	r3, #0
   18186:	f000 8591 	beq.w	18cac <_dtoa_r+0xccc>
   1818a:	4b66      	ldr	r3, [pc, #408]	; (18324 <_dtoa_r+0x344>)
   1818c:	9300      	str	r3, [sp, #0]
   1818e:	3308      	adds	r3, #8
   18190:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   18192:	9800      	ldr	r0, [sp, #0]
   18194:	6013      	str	r3, [r2, #0]
   18196:	b00f      	add	sp, #60	; 0x3c
   18198:	ecbd 8b02 	vpop	{d8}
   1819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181a0:	ee18 6a90 	vmov	r6, s17
   181a4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   181a8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   181ac:	ec53 2b18 	vmov	r2, r3, d8
   181b0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   181b4:	990c      	ldr	r1, [sp, #48]	; 0x30
   181b6:	f04f 0a00 	mov.w	sl, #0
   181ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   181be:	e77b      	b.n	180b8 <_dtoa_r+0xd8>
   181c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   181c2:	2b00      	cmp	r3, #0
   181c4:	f040 833b 	bne.w	1883e <_dtoa_r+0x85e>
   181c8:	4b57      	ldr	r3, [pc, #348]	; (18328 <_dtoa_r+0x348>)
   181ca:	9300      	str	r3, [sp, #0]
   181cc:	e744      	b.n	18058 <_dtoa_r+0x78>
   181ce:	1a09      	subs	r1, r1, r0
   181d0:	2300      	movs	r3, #0
   181d2:	f1b1 0801 	subs.w	r8, r1, #1
   181d6:	930a      	str	r3, [sp, #40]	; 0x28
   181d8:	f100 80e3 	bmi.w	183a2 <_dtoa_r+0x3c2>
   181dc:	9306      	str	r3, [sp, #24]
   181de:	2300      	movs	r3, #0
   181e0:	9308      	str	r3, [sp, #32]
   181e2:	9b01      	ldr	r3, [sp, #4]
   181e4:	9704      	str	r7, [sp, #16]
   181e6:	2b09      	cmp	r3, #9
   181e8:	44b8      	add	r8, r7
   181ea:	d9b0      	bls.n	1814e <_dtoa_r+0x16e>
   181ec:	2300      	movs	r3, #0
   181ee:	2601      	movs	r6, #1
   181f0:	9301      	str	r3, [sp, #4]
   181f2:	9607      	str	r6, [sp, #28]
   181f4:	f04f 39ff 	mov.w	r9, #4294967295
   181f8:	469b      	mov	fp, r3
   181fa:	2100      	movs	r1, #0
   181fc:	63e1      	str	r1, [r4, #60]	; 0x3c
   181fe:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   18202:	4620      	mov	r0, r4
   18204:	f7fb fcba 	bl	13b7c <_Balloc>
   18208:	9000      	str	r0, [sp, #0]
   1820a:	2800      	cmp	r0, #0
   1820c:	f000 8540 	beq.w	18c90 <_dtoa_r+0xcb0>
   18210:	9b00      	ldr	r3, [sp, #0]
   18212:	63a3      	str	r3, [r4, #56]	; 0x38
   18214:	f1b9 0f0e 	cmp.w	r9, #14
   18218:	f200 80dc 	bhi.w	183d4 <_dtoa_r+0x3f4>
   1821c:	2e00      	cmp	r6, #0
   1821e:	f000 80d9 	beq.w	183d4 <_dtoa_r+0x3f4>
   18222:	9b04      	ldr	r3, [sp, #16]
   18224:	2b00      	cmp	r3, #0
   18226:	f340 83de 	ble.w	189e6 <_dtoa_r+0xa06>
   1822a:	4a3d      	ldr	r2, [pc, #244]	; (18320 <_dtoa_r+0x340>)
   1822c:	f003 010f 	and.w	r1, r3, #15
   18230:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   18234:	ed92 7b00 	vldr	d7, [r2]
   18238:	111a      	asrs	r2, r3, #4
   1823a:	05db      	lsls	r3, r3, #23
   1823c:	f140 8382 	bpl.w	18944 <_dtoa_r+0x964>
   18240:	493a      	ldr	r1, [pc, #232]	; (1832c <_dtoa_r+0x34c>)
   18242:	ed91 6b08 	vldr	d6, [r1, #32]
   18246:	f002 020f 	and.w	r2, r2, #15
   1824a:	2003      	movs	r0, #3
   1824c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   18250:	b15a      	cbz	r2, 1826a <_dtoa_r+0x28a>
   18252:	4936      	ldr	r1, [pc, #216]	; (1832c <_dtoa_r+0x34c>)
   18254:	07d6      	lsls	r6, r2, #31
   18256:	d504      	bpl.n	18262 <_dtoa_r+0x282>
   18258:	ed91 6b00 	vldr	d6, [r1]
   1825c:	3001      	adds	r0, #1
   1825e:	ee27 7b06 	vmul.f64	d7, d7, d6
   18262:	1052      	asrs	r2, r2, #1
   18264:	f101 0108 	add.w	r1, r1, #8
   18268:	d1f4      	bne.n	18254 <_dtoa_r+0x274>
   1826a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1826e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18270:	b13b      	cbz	r3, 18282 <_dtoa_r+0x2a2>
   18272:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   18276:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1827a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1827e:	f100 84ae 	bmi.w	18bde <_dtoa_r+0xbfe>
   18282:	ee07 0a90 	vmov	s15, r0
   18286:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1828a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1828e:	eea5 7b06 	vfma.f64	d7, d5, d6
   18292:	ee17 2a90 	vmov	r2, s15
   18296:	ec51 0b17 	vmov	r0, r1, d7
   1829a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1829e:	f1b9 0f00 	cmp.w	r9, #0
   182a2:	f000 8388 	beq.w	189b6 <_dtoa_r+0x9d6>
   182a6:	9e04      	ldr	r6, [sp, #16]
   182a8:	464a      	mov	r2, r9
   182aa:	9b07      	ldr	r3, [sp, #28]
   182ac:	2b00      	cmp	r3, #0
   182ae:	f000 8447 	beq.w	18b40 <_dtoa_r+0xb60>
   182b2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   182b6:	4b1a      	ldr	r3, [pc, #104]	; (18320 <_dtoa_r+0x340>)
   182b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   182bc:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   182c0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   182c4:	ee36 7b47 	vsub.f64	d7, d6, d7
   182c8:	ed1c 6b02 	vldr	d6, [ip, #-8]
   182cc:	ee83 5b06 	vdiv.f64	d5, d3, d6
   182d0:	ec41 0b16 	vmov	d6, r0, r1
   182d4:	ee14 0a90 	vmov	r0, s9
   182d8:	ee35 5b46 	vsub.f64	d5, d5, d6
   182dc:	9900      	ldr	r1, [sp, #0]
   182de:	eeb4 5bc7 	vcmpe.f64	d5, d7
   182e2:	3030      	adds	r0, #48	; 0x30
   182e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   182e8:	f801 0b01 	strb.w	r0, [r1], #1
   182ec:	f300 84ac 	bgt.w	18c48 <_dtoa_r+0xc68>
   182f0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   182f4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   182f8:	f04f 0c00 	mov.w	ip, #0
   182fc:	e031      	b.n	18362 <_dtoa_r+0x382>
   182fe:	bf00      	nop
   18300:	636f4361 	.word	0x636f4361
   18304:	3fd287a7 	.word	0x3fd287a7
   18308:	8b60c8b3 	.word	0x8b60c8b3
   1830c:	3fc68a28 	.word	0x3fc68a28
   18310:	509f79fb 	.word	0x509f79fb
   18314:	3fd34413 	.word	0x3fd34413
   18318:	7ff00000 	.word	0x7ff00000
   1831c:	20007eb5 	.word	0x20007eb5
   18320:	20000328 	.word	0x20000328
   18324:	20001040 	.word	0x20001040
   18328:	2000104c 	.word	0x2000104c
   1832c:	20000300 	.word	0x20000300
   18330:	f10c 0c01 	add.w	ip, ip, #1
   18334:	4594      	cmp	ip, r2
   18336:	da4d      	bge.n	183d4 <_dtoa_r+0x3f4>
   18338:	ee27 7b04 	vmul.f64	d7, d7, d4
   1833c:	ee25 5b04 	vmul.f64	d5, d5, d4
   18340:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   18344:	ee16 3a90 	vmov	r3, s13
   18348:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1834c:	3330      	adds	r3, #48	; 0x30
   1834e:	ee37 7b43 	vsub.f64	d7, d7, d3
   18352:	eeb4 7bc5 	vcmpe.f64	d7, d5
   18356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1835a:	f801 3b01 	strb.w	r3, [r1], #1
   1835e:	f100 8473 	bmi.w	18c48 <_dtoa_r+0xc68>
   18362:	ee32 6b47 	vsub.f64	d6, d2, d7
   18366:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1836a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1836e:	d5df      	bpl.n	18330 <_dtoa_r+0x350>
   18370:	9a00      	ldr	r2, [sp, #0]
   18372:	9604      	str	r6, [sp, #16]
   18374:	e002      	b.n	1837c <_dtoa_r+0x39c>
   18376:	428a      	cmp	r2, r1
   18378:	f000 8450 	beq.w	18c1c <_dtoa_r+0xc3c>
   1837c:	4689      	mov	r9, r1
   1837e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   18382:	2b39      	cmp	r3, #57	; 0x39
   18384:	d0f7      	beq.n	18376 <_dtoa_r+0x396>
   18386:	3301      	adds	r3, #1
   18388:	b2db      	uxtb	r3, r3
   1838a:	700b      	strb	r3, [r1, #0]
   1838c:	9b04      	ldr	r3, [sp, #16]
   1838e:	3301      	adds	r3, #1
   18390:	9304      	str	r3, [sp, #16]
   18392:	e155      	b.n	18640 <_dtoa_r+0x660>
   18394:	1a09      	subs	r1, r1, r0
   18396:	2301      	movs	r3, #1
   18398:	f1b1 0801 	subs.w	r8, r1, #1
   1839c:	930a      	str	r3, [sp, #40]	; 0x28
   1839e:	f57f aec7 	bpl.w	18130 <_dtoa_r+0x150>
   183a2:	f1c1 0301 	rsb	r3, r1, #1
   183a6:	9306      	str	r3, [sp, #24]
   183a8:	f04f 0800 	mov.w	r8, #0
   183ac:	e6c2      	b.n	18134 <_dtoa_r+0x154>
   183ae:	2600      	movs	r6, #0
   183b0:	63e6      	str	r6, [r4, #60]	; 0x3c
   183b2:	4631      	mov	r1, r6
   183b4:	4620      	mov	r0, r4
   183b6:	f7fb fbe1 	bl	13b7c <_Balloc>
   183ba:	9000      	str	r0, [sp, #0]
   183bc:	2800      	cmp	r0, #0
   183be:	f000 8467 	beq.w	18c90 <_dtoa_r+0xcb0>
   183c2:	9b00      	ldr	r3, [sp, #0]
   183c4:	63a3      	str	r3, [r4, #56]	; 0x38
   183c6:	f04f 33ff 	mov.w	r3, #4294967295
   183ca:	930b      	str	r3, [sp, #44]	; 0x2c
   183cc:	4699      	mov	r9, r3
   183ce:	2301      	movs	r3, #1
   183d0:	46b3      	mov	fp, r6
   183d2:	9307      	str	r3, [sp, #28]
   183d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   183d6:	2a00      	cmp	r2, #0
   183d8:	db55      	blt.n	18486 <_dtoa_r+0x4a6>
   183da:	9904      	ldr	r1, [sp, #16]
   183dc:	290e      	cmp	r1, #14
   183de:	dc52      	bgt.n	18486 <_dtoa_r+0x4a6>
   183e0:	4bb7      	ldr	r3, [pc, #732]	; (186c0 <_dtoa_r+0x6e0>)
   183e2:	f1bb 0f00 	cmp.w	fp, #0
   183e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   183ea:	ed93 6b00 	vldr	d6, [r3]
   183ee:	da15      	bge.n	1841c <_dtoa_r+0x43c>
   183f0:	f1b9 0f00 	cmp.w	r9, #0
   183f4:	dc12      	bgt.n	1841c <_dtoa_r+0x43c>
   183f6:	f040 82f2 	bne.w	189de <_dtoa_r+0x9fe>
   183fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   183fe:	ee26 7b07 	vmul.f64	d7, d6, d7
   18402:	eeb4 8bc7 	vcmpe.f64	d8, d7
   18406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1840a:	46ca      	mov	sl, r9
   1840c:	464e      	mov	r6, r9
   1840e:	f200 826d 	bhi.w	188ec <_dtoa_r+0x90c>
   18412:	f8dd 8000 	ldr.w	r8, [sp]
   18416:	ea6f 0b0b 	mvn.w	fp, fp
   1841a:	e270      	b.n	188fe <_dtoa_r+0x91e>
   1841c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   18420:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   18424:	9900      	ldr	r1, [sp, #0]
   18426:	ee17 3a10 	vmov	r3, s14
   1842a:	f1b9 0f01 	cmp.w	r9, #1
   1842e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   18432:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   18436:	f801 3b01 	strb.w	r3, [r1], #1
   1843a:	eea5 8b46 	vfms.f64	d8, d5, d6
   1843e:	f000 8334 	beq.w	18aaa <_dtoa_r+0xaca>
   18442:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   18446:	2301      	movs	r3, #1
   18448:	e011      	b.n	1846e <_dtoa_r+0x48e>
   1844a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   1844e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   18452:	3301      	adds	r3, #1
   18454:	ee17 2a10 	vmov	r2, s14
   18458:	454b      	cmp	r3, r9
   1845a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1845e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   18462:	f801 2b01 	strb.w	r2, [r1], #1
   18466:	eea5 8b46 	vfms.f64	d8, d5, d6
   1846a:	f000 831e 	beq.w	18aaa <_dtoa_r+0xaca>
   1846e:	ee28 8b04 	vmul.f64	d8, d8, d4
   18472:	eeb5 8b40 	vcmp.f64	d8, #0.0
   18476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1847a:	d1e6      	bne.n	1844a <_dtoa_r+0x46a>
   1847c:	9b04      	ldr	r3, [sp, #16]
   1847e:	3301      	adds	r3, #1
   18480:	9304      	str	r3, [sp, #16]
   18482:	4689      	mov	r9, r1
   18484:	e0dc      	b.n	18640 <_dtoa_r+0x660>
   18486:	9b07      	ldr	r3, [sp, #28]
   18488:	b343      	cbz	r3, 184dc <_dtoa_r+0x4fc>
   1848a:	9b01      	ldr	r3, [sp, #4]
   1848c:	2b01      	cmp	r3, #1
   1848e:	f340 8276 	ble.w	1897e <_dtoa_r+0x99e>
   18492:	9b08      	ldr	r3, [sp, #32]
   18494:	f109 3aff 	add.w	sl, r9, #4294967295
   18498:	4553      	cmp	r3, sl
   1849a:	f280 823f 	bge.w	1891c <_dtoa_r+0x93c>
   1849e:	9b08      	ldr	r3, [sp, #32]
   184a0:	f8cd a020 	str.w	sl, [sp, #32]
   184a4:	ebaa 0203 	sub.w	r2, sl, r3
   184a8:	4417      	add	r7, r2
   184aa:	f04f 0a00 	mov.w	sl, #0
   184ae:	f1b9 0f00 	cmp.w	r9, #0
   184b2:	f2c0 8325 	blt.w	18b00 <_dtoa_r+0xb20>
   184b6:	9b06      	ldr	r3, [sp, #24]
   184b8:	9309      	str	r3, [sp, #36]	; 0x24
   184ba:	444b      	add	r3, r9
   184bc:	44c8      	add	r8, r9
   184be:	9306      	str	r3, [sp, #24]
   184c0:	2101      	movs	r1, #1
   184c2:	4620      	mov	r0, r4
   184c4:	f7fb fc84 	bl	13dd0 <__i2b>
   184c8:	4606      	mov	r6, r0
   184ca:	e00c      	b.n	184e6 <_dtoa_r+0x506>
   184cc:	4b7d      	ldr	r3, [pc, #500]	; (186c4 <_dtoa_r+0x6e4>)
   184ce:	9300      	str	r3, [sp, #0]
   184d0:	9800      	ldr	r0, [sp, #0]
   184d2:	b00f      	add	sp, #60	; 0x3c
   184d4:	ecbd 8b02 	vpop	{d8}
   184d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184dc:	9b06      	ldr	r3, [sp, #24]
   184de:	f8dd a020 	ldr.w	sl, [sp, #32]
   184e2:	9e07      	ldr	r6, [sp, #28]
   184e4:	9309      	str	r3, [sp, #36]	; 0x24
   184e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   184e8:	b16b      	cbz	r3, 18506 <_dtoa_r+0x526>
   184ea:	f1b8 0f00 	cmp.w	r8, #0
   184ee:	dd0a      	ble.n	18506 <_dtoa_r+0x526>
   184f0:	4543      	cmp	r3, r8
   184f2:	9906      	ldr	r1, [sp, #24]
   184f4:	461a      	mov	r2, r3
   184f6:	bfa8      	it	ge
   184f8:	4642      	movge	r2, r8
   184fa:	1a89      	subs	r1, r1, r2
   184fc:	1a9b      	subs	r3, r3, r2
   184fe:	9106      	str	r1, [sp, #24]
   18500:	9309      	str	r3, [sp, #36]	; 0x24
   18502:	eba8 0802 	sub.w	r8, r8, r2
   18506:	9b08      	ldr	r3, [sp, #32]
   18508:	b163      	cbz	r3, 18524 <_dtoa_r+0x544>
   1850a:	9b07      	ldr	r3, [sp, #28]
   1850c:	2b00      	cmp	r3, #0
   1850e:	f000 82a7 	beq.w	18a60 <_dtoa_r+0xa80>
   18512:	f1ba 0f00 	cmp.w	sl, #0
   18516:	f300 8204 	bgt.w	18922 <_dtoa_r+0x942>
   1851a:	9b08      	ldr	r3, [sp, #32]
   1851c:	ebb3 020a 	subs.w	r2, r3, sl
   18520:	f040 82ff 	bne.w	18b22 <_dtoa_r+0xb42>
   18524:	2101      	movs	r1, #1
   18526:	4620      	mov	r0, r4
   18528:	f7fb fc52 	bl	13dd0 <__i2b>
   1852c:	2f00      	cmp	r7, #0
   1852e:	4682      	mov	sl, r0
   18530:	f300 80af 	bgt.w	18692 <_dtoa_r+0x6b2>
   18534:	9b01      	ldr	r3, [sp, #4]
   18536:	2b01      	cmp	r3, #1
   18538:	f340 8187 	ble.w	1884a <_dtoa_r+0x86a>
   1853c:	2300      	movs	r3, #0
   1853e:	9308      	str	r3, [sp, #32]
   18540:	2001      	movs	r0, #1
   18542:	2f00      	cmp	r7, #0
   18544:	f040 80b1 	bne.w	186aa <_dtoa_r+0x6ca>
   18548:	4440      	add	r0, r8
   1854a:	f010 001f 	ands.w	r0, r0, #31
   1854e:	f000 817a 	beq.w	18846 <_dtoa_r+0x866>
   18552:	f1c0 0220 	rsb	r2, r0, #32
   18556:	2a04      	cmp	r2, #4
   18558:	f300 8088 	bgt.w	1866c <_dtoa_r+0x68c>
   1855c:	f040 81f6 	bne.w	1894c <_dtoa_r+0x96c>
   18560:	9b06      	ldr	r3, [sp, #24]
   18562:	2b00      	cmp	r3, #0
   18564:	dd05      	ble.n	18572 <_dtoa_r+0x592>
   18566:	4629      	mov	r1, r5
   18568:	461a      	mov	r2, r3
   1856a:	4620      	mov	r0, r4
   1856c:	f7fb fd6c 	bl	14048 <__lshift>
   18570:	4605      	mov	r5, r0
   18572:	f1b8 0f00 	cmp.w	r8, #0
   18576:	dd05      	ble.n	18584 <_dtoa_r+0x5a4>
   18578:	4651      	mov	r1, sl
   1857a:	4642      	mov	r2, r8
   1857c:	4620      	mov	r0, r4
   1857e:	f7fb fd63 	bl	14048 <__lshift>
   18582:	4682      	mov	sl, r0
   18584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18586:	2b00      	cmp	r3, #0
   18588:	f040 813f 	bne.w	1880a <_dtoa_r+0x82a>
   1858c:	f1b9 0f00 	cmp.w	r9, #0
   18590:	f340 8125 	ble.w	187de <_dtoa_r+0x7fe>
   18594:	9b07      	ldr	r3, [sp, #28]
   18596:	2b00      	cmp	r3, #0
   18598:	f040 80a3 	bne.w	186e2 <_dtoa_r+0x702>
   1859c:	9b04      	ldr	r3, [sp, #16]
   1859e:	3301      	adds	r3, #1
   185a0:	9304      	str	r3, [sp, #16]
   185a2:	f8dd 8000 	ldr.w	r8, [sp]
   185a6:	2701      	movs	r7, #1
   185a8:	e007      	b.n	185ba <_dtoa_r+0x5da>
   185aa:	4629      	mov	r1, r5
   185ac:	2300      	movs	r3, #0
   185ae:	220a      	movs	r2, #10
   185b0:	4620      	mov	r0, r4
   185b2:	f7fb fb13 	bl	13bdc <__multadd>
   185b6:	3701      	adds	r7, #1
   185b8:	4605      	mov	r5, r0
   185ba:	4651      	mov	r1, sl
   185bc:	4628      	mov	r0, r5
   185be:	f7ff fc7b 	bl	17eb8 <quorem>
   185c2:	45b9      	cmp	r9, r7
   185c4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   185c8:	f808 0b01 	strb.w	r0, [r8], #1
   185cc:	dced      	bgt.n	185aa <_dtoa_r+0x5ca>
   185ce:	f1b9 0f00 	cmp.w	r9, #0
   185d2:	9a00      	ldr	r2, [sp, #0]
   185d4:	bfcc      	ite	gt
   185d6:	46cb      	movgt	fp, r9
   185d8:	f04f 0b01 	movle.w	fp, #1
   185dc:	4603      	mov	r3, r0
   185de:	4493      	add	fp, r2
   185e0:	2700      	movs	r7, #0
   185e2:	4629      	mov	r1, r5
   185e4:	2201      	movs	r2, #1
   185e6:	4620      	mov	r0, r4
   185e8:	9301      	str	r3, [sp, #4]
   185ea:	f7fb fd2d 	bl	14048 <__lshift>
   185ee:	4651      	mov	r1, sl
   185f0:	4605      	mov	r5, r0
   185f2:	f7fb fda1 	bl	14138 <__mcmp>
   185f6:	2800      	cmp	r0, #0
   185f8:	f340 81af 	ble.w	1895a <_dtoa_r+0x97a>
   185fc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   18600:	9a00      	ldr	r2, [sp, #0]
   18602:	f10b 3bff 	add.w	fp, fp, #4294967295
   18606:	e004      	b.n	18612 <_dtoa_r+0x632>
   18608:	455a      	cmp	r2, fp
   1860a:	f000 81b1 	beq.w	18970 <_dtoa_r+0x990>
   1860e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   18612:	2b39      	cmp	r3, #57	; 0x39
   18614:	f10b 0901 	add.w	r9, fp, #1
   18618:	d0f6      	beq.n	18608 <_dtoa_r+0x628>
   1861a:	3301      	adds	r3, #1
   1861c:	f88b 3000 	strb.w	r3, [fp]
   18620:	4651      	mov	r1, sl
   18622:	4620      	mov	r0, r4
   18624:	f7fb fad0 	bl	13bc8 <_Bfree>
   18628:	b156      	cbz	r6, 18640 <_dtoa_r+0x660>
   1862a:	b12f      	cbz	r7, 18638 <_dtoa_r+0x658>
   1862c:	42b7      	cmp	r7, r6
   1862e:	d003      	beq.n	18638 <_dtoa_r+0x658>
   18630:	4639      	mov	r1, r7
   18632:	4620      	mov	r0, r4
   18634:	f7fb fac8 	bl	13bc8 <_Bfree>
   18638:	4631      	mov	r1, r6
   1863a:	4620      	mov	r0, r4
   1863c:	f7fb fac4 	bl	13bc8 <_Bfree>
   18640:	4629      	mov	r1, r5
   18642:	4620      	mov	r0, r4
   18644:	f7fb fac0 	bl	13bc8 <_Bfree>
   18648:	2300      	movs	r3, #0
   1864a:	f889 3000 	strb.w	r3, [r9]
   1864e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   18652:	601a      	str	r2, [r3, #0]
   18654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18656:	2b00      	cmp	r3, #0
   18658:	f43f acfe 	beq.w	18058 <_dtoa_r+0x78>
   1865c:	9800      	ldr	r0, [sp, #0]
   1865e:	f8c3 9000 	str.w	r9, [r3]
   18662:	b00f      	add	sp, #60	; 0x3c
   18664:	ecbd 8b02 	vpop	{d8}
   18668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1866c:	f1c0 001c 	rsb	r0, r0, #28
   18670:	9b06      	ldr	r3, [sp, #24]
   18672:	4403      	add	r3, r0
   18674:	9306      	str	r3, [sp, #24]
   18676:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18678:	4403      	add	r3, r0
   1867a:	9309      	str	r3, [sp, #36]	; 0x24
   1867c:	4480      	add	r8, r0
   1867e:	e76f      	b.n	18560 <_dtoa_r+0x580>
   18680:	f1c2 0220 	rsb	r2, r2, #32
   18684:	fa06 f202 	lsl.w	r2, r6, r2
   18688:	ee07 2a10 	vmov	s14, r2
   1868c:	e509      	b.n	180a2 <_dtoa_r+0xc2>
   1868e:	2601      	movs	r6, #1
   18690:	e563      	b.n	1815a <_dtoa_r+0x17a>
   18692:	4601      	mov	r1, r0
   18694:	463a      	mov	r2, r7
   18696:	4620      	mov	r0, r4
   18698:	f7fb fc76 	bl	13f88 <__pow5mult>
   1869c:	9b01      	ldr	r3, [sp, #4]
   1869e:	2b01      	cmp	r3, #1
   186a0:	4682      	mov	sl, r0
   186a2:	f340 81c5 	ble.w	18a30 <_dtoa_r+0xa50>
   186a6:	2300      	movs	r3, #0
   186a8:	9308      	str	r3, [sp, #32]
   186aa:	f8da 2010 	ldr.w	r2, [sl, #16]
   186ae:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   186b2:	6910      	ldr	r0, [r2, #16]
   186b4:	f7fb fb3c 	bl	13d30 <__hi0bits>
   186b8:	f1c0 0020 	rsb	r0, r0, #32
   186bc:	e744      	b.n	18548 <_dtoa_r+0x568>
   186be:	bf00      	nop
   186c0:	20000328 	.word	0x20000328
   186c4:	20007eb4 	.word	0x20007eb4
   186c8:	4631      	mov	r1, r6
   186ca:	2300      	movs	r3, #0
   186cc:	220a      	movs	r2, #10
   186ce:	4620      	mov	r0, r4
   186d0:	f7fb fa84 	bl	13bdc <__multadd>
   186d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   186d6:	2b00      	cmp	r3, #0
   186d8:	4606      	mov	r6, r0
   186da:	f340 82ce 	ble.w	18c7a <_dtoa_r+0xc9a>
   186de:	9704      	str	r7, [sp, #16]
   186e0:	4699      	mov	r9, r3
   186e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   186e4:	2b00      	cmp	r3, #0
   186e6:	dd05      	ble.n	186f4 <_dtoa_r+0x714>
   186e8:	4631      	mov	r1, r6
   186ea:	461a      	mov	r2, r3
   186ec:	4620      	mov	r0, r4
   186ee:	f7fb fcab 	bl	14048 <__lshift>
   186f2:	4606      	mov	r6, r0
   186f4:	9b08      	ldr	r3, [sp, #32]
   186f6:	2b00      	cmp	r3, #0
   186f8:	f040 81eb 	bne.w	18ad2 <_dtoa_r+0xaf2>
   186fc:	46b0      	mov	r8, r6
   186fe:	9b02      	ldr	r3, [sp, #8]
   18700:	9f00      	ldr	r7, [sp, #0]
   18702:	f003 0201 	and.w	r2, r3, #1
   18706:	1e7b      	subs	r3, r7, #1
   18708:	444b      	add	r3, r9
   1870a:	9308      	str	r3, [sp, #32]
   1870c:	9b01      	ldr	r3, [sp, #4]
   1870e:	920a      	str	r2, [sp, #40]	; 0x28
   18710:	4313      	orrs	r3, r2
   18712:	9309      	str	r3, [sp, #36]	; 0x24
   18714:	4651      	mov	r1, sl
   18716:	4628      	mov	r0, r5
   18718:	f7ff fbce 	bl	17eb8 <quorem>
   1871c:	4631      	mov	r1, r6
   1871e:	4683      	mov	fp, r0
   18720:	4628      	mov	r0, r5
   18722:	f7fb fd09 	bl	14138 <__mcmp>
   18726:	4642      	mov	r2, r8
   18728:	4651      	mov	r1, sl
   1872a:	4681      	mov	r9, r0
   1872c:	4620      	mov	r0, r4
   1872e:	f7fb fd25 	bl	1417c <__mdiff>
   18732:	68c2      	ldr	r2, [r0, #12]
   18734:	4601      	mov	r1, r0
   18736:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1873a:	2a00      	cmp	r2, #0
   1873c:	d142      	bne.n	187c4 <_dtoa_r+0x7e4>
   1873e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   18742:	4628      	mov	r0, r5
   18744:	f7fb fcf8 	bl	14138 <__mcmp>
   18748:	9906      	ldr	r1, [sp, #24]
   1874a:	9002      	str	r0, [sp, #8]
   1874c:	4620      	mov	r0, r4
   1874e:	f7fb fa3b 	bl	13bc8 <_Bfree>
   18752:	9a02      	ldr	r2, [sp, #8]
   18754:	9b07      	ldr	r3, [sp, #28]
   18756:	b91a      	cbnz	r2, 18760 <_dtoa_r+0x780>
   18758:	9909      	ldr	r1, [sp, #36]	; 0x24
   1875a:	2900      	cmp	r1, #0
   1875c:	f000 827e 	beq.w	18c5c <_dtoa_r+0xc7c>
   18760:	f1b9 0f00 	cmp.w	r9, #0
   18764:	f2c0 8183 	blt.w	18a6e <_dtoa_r+0xa8e>
   18768:	9901      	ldr	r1, [sp, #4]
   1876a:	ea49 0901 	orr.w	r9, r9, r1
   1876e:	990a      	ldr	r1, [sp, #40]	; 0x28
   18770:	ea51 0909 	orrs.w	r9, r1, r9
   18774:	f000 817b 	beq.w	18a6e <_dtoa_r+0xa8e>
   18778:	2a00      	cmp	r2, #0
   1877a:	f300 81c6 	bgt.w	18b0a <_dtoa_r+0xb2a>
   1877e:	9a08      	ldr	r2, [sp, #32]
   18780:	703b      	strb	r3, [r7, #0]
   18782:	f107 0901 	add.w	r9, r7, #1
   18786:	4297      	cmp	r7, r2
   18788:	46cb      	mov	fp, r9
   1878a:	f000 81c4 	beq.w	18b16 <_dtoa_r+0xb36>
   1878e:	4629      	mov	r1, r5
   18790:	2300      	movs	r3, #0
   18792:	220a      	movs	r2, #10
   18794:	4620      	mov	r0, r4
   18796:	f7fb fa21 	bl	13bdc <__multadd>
   1879a:	4546      	cmp	r6, r8
   1879c:	4605      	mov	r5, r0
   1879e:	4631      	mov	r1, r6
   187a0:	f04f 0300 	mov.w	r3, #0
   187a4:	f04f 020a 	mov.w	r2, #10
   187a8:	4620      	mov	r0, r4
   187aa:	d012      	beq.n	187d2 <_dtoa_r+0x7f2>
   187ac:	f7fb fa16 	bl	13bdc <__multadd>
   187b0:	4641      	mov	r1, r8
   187b2:	4606      	mov	r6, r0
   187b4:	2300      	movs	r3, #0
   187b6:	220a      	movs	r2, #10
   187b8:	4620      	mov	r0, r4
   187ba:	f7fb fa0f 	bl	13bdc <__multadd>
   187be:	464f      	mov	r7, r9
   187c0:	4680      	mov	r8, r0
   187c2:	e7a7      	b.n	18714 <_dtoa_r+0x734>
   187c4:	4620      	mov	r0, r4
   187c6:	9302      	str	r3, [sp, #8]
   187c8:	f7fb f9fe 	bl	13bc8 <_Bfree>
   187cc:	9b02      	ldr	r3, [sp, #8]
   187ce:	2201      	movs	r2, #1
   187d0:	e7c6      	b.n	18760 <_dtoa_r+0x780>
   187d2:	f7fb fa03 	bl	13bdc <__multadd>
   187d6:	464f      	mov	r7, r9
   187d8:	4606      	mov	r6, r0
   187da:	4680      	mov	r8, r0
   187dc:	e79a      	b.n	18714 <_dtoa_r+0x734>
   187de:	9b01      	ldr	r3, [sp, #4]
   187e0:	2b02      	cmp	r3, #2
   187e2:	dc71      	bgt.n	188c8 <_dtoa_r+0x8e8>
   187e4:	9b07      	ldr	r3, [sp, #28]
   187e6:	2b00      	cmp	r3, #0
   187e8:	f47f af7b 	bne.w	186e2 <_dtoa_r+0x702>
   187ec:	9b04      	ldr	r3, [sp, #16]
   187ee:	4651      	mov	r1, sl
   187f0:	3301      	adds	r3, #1
   187f2:	4628      	mov	r0, r5
   187f4:	9304      	str	r3, [sp, #16]
   187f6:	f7ff fb5f 	bl	17eb8 <quorem>
   187fa:	f8dd b000 	ldr.w	fp, [sp]
   187fe:	f100 0330 	add.w	r3, r0, #48	; 0x30
   18802:	f80b 3b01 	strb.w	r3, [fp], #1
   18806:	2700      	movs	r7, #0
   18808:	e6eb      	b.n	185e2 <_dtoa_r+0x602>
   1880a:	4651      	mov	r1, sl
   1880c:	4628      	mov	r0, r5
   1880e:	f7fb fc93 	bl	14138 <__mcmp>
   18812:	2800      	cmp	r0, #0
   18814:	f6bf aeba 	bge.w	1858c <_dtoa_r+0x5ac>
   18818:	4629      	mov	r1, r5
   1881a:	2300      	movs	r3, #0
   1881c:	220a      	movs	r2, #10
   1881e:	4620      	mov	r0, r4
   18820:	f7fb f9dc 	bl	13bdc <__multadd>
   18824:	9b04      	ldr	r3, [sp, #16]
   18826:	1e5f      	subs	r7, r3, #1
   18828:	9b07      	ldr	r3, [sp, #28]
   1882a:	4605      	mov	r5, r0
   1882c:	2b00      	cmp	r3, #0
   1882e:	f47f af4b 	bne.w	186c8 <_dtoa_r+0x6e8>
   18832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18834:	2b00      	cmp	r3, #0
   18836:	f340 8218 	ble.w	18c6a <_dtoa_r+0xc8a>
   1883a:	4699      	mov	r9, r3
   1883c:	e6b1      	b.n	185a2 <_dtoa_r+0x5c2>
   1883e:	4bbc      	ldr	r3, [pc, #752]	; (18b30 <_dtoa_r+0xb50>)
   18840:	9300      	str	r3, [sp, #0]
   18842:	3303      	adds	r3, #3
   18844:	e4a4      	b.n	18190 <_dtoa_r+0x1b0>
   18846:	201c      	movs	r0, #28
   18848:	e712      	b.n	18670 <_dtoa_r+0x690>
   1884a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1884e:	2800      	cmp	r0, #0
   18850:	f47f ae74 	bne.w	1853c <_dtoa_r+0x55c>
   18854:	f3c1 0213 	ubfx	r2, r1, #0, #20
   18858:	2a00      	cmp	r2, #0
   1885a:	f000 80f4 	beq.w	18a46 <_dtoa_r+0xa66>
   1885e:	9b02      	ldr	r3, [sp, #8]
   18860:	9308      	str	r3, [sp, #32]
   18862:	e66d      	b.n	18540 <_dtoa_r+0x560>
   18864:	2301      	movs	r3, #1
   18866:	9307      	str	r3, [sp, #28]
   18868:	9b04      	ldr	r3, [sp, #16]
   1886a:	445b      	add	r3, fp
   1886c:	f103 0901 	add.w	r9, r3, #1
   18870:	f1b9 0f01 	cmp.w	r9, #1
   18874:	46cc      	mov	ip, r9
   18876:	930b      	str	r3, [sp, #44]	; 0x2c
   18878:	bfb8      	it	lt
   1887a:	f04f 0c01 	movlt.w	ip, #1
   1887e:	2100      	movs	r1, #0
   18880:	f1bc 0f17 	cmp.w	ip, #23
   18884:	63e1      	str	r1, [r4, #60]	; 0x3c
   18886:	f77f acbc 	ble.w	18202 <_dtoa_r+0x222>
   1888a:	2001      	movs	r0, #1
   1888c:	2204      	movs	r2, #4
   1888e:	0052      	lsls	r2, r2, #1
   18890:	f102 0314 	add.w	r3, r2, #20
   18894:	4563      	cmp	r3, ip
   18896:	4601      	mov	r1, r0
   18898:	f100 0001 	add.w	r0, r0, #1
   1889c:	d9f7      	bls.n	1888e <_dtoa_r+0x8ae>
   1889e:	63e1      	str	r1, [r4, #60]	; 0x3c
   188a0:	e4af      	b.n	18202 <_dtoa_r+0x222>
   188a2:	2301      	movs	r3, #1
   188a4:	9307      	str	r3, [sp, #28]
   188a6:	f1bb 0f00 	cmp.w	fp, #0
   188aa:	dd52      	ble.n	18952 <_dtoa_r+0x972>
   188ac:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   188b0:	46d9      	mov	r9, fp
   188b2:	46dc      	mov	ip, fp
   188b4:	e7e3      	b.n	1887e <_dtoa_r+0x89e>
   188b6:	2300      	movs	r3, #0
   188b8:	9307      	str	r3, [sp, #28]
   188ba:	e7d5      	b.n	18868 <_dtoa_r+0x888>
   188bc:	2300      	movs	r3, #0
   188be:	9307      	str	r3, [sp, #28]
   188c0:	e7f1      	b.n	188a6 <_dtoa_r+0x8c6>
   188c2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   188c6:	9704      	str	r7, [sp, #16]
   188c8:	f1b9 0f00 	cmp.w	r9, #0
   188cc:	f47f ada1 	bne.w	18412 <_dtoa_r+0x432>
   188d0:	4651      	mov	r1, sl
   188d2:	464b      	mov	r3, r9
   188d4:	2205      	movs	r2, #5
   188d6:	4620      	mov	r0, r4
   188d8:	f7fb f980 	bl	13bdc <__multadd>
   188dc:	4601      	mov	r1, r0
   188de:	4682      	mov	sl, r0
   188e0:	4628      	mov	r0, r5
   188e2:	f7fb fc29 	bl	14138 <__mcmp>
   188e6:	2800      	cmp	r0, #0
   188e8:	f77f ad93 	ble.w	18412 <_dtoa_r+0x432>
   188ec:	9b04      	ldr	r3, [sp, #16]
   188ee:	f103 0b01 	add.w	fp, r3, #1
   188f2:	9b00      	ldr	r3, [sp, #0]
   188f4:	2231      	movs	r2, #49	; 0x31
   188f6:	4698      	mov	r8, r3
   188f8:	f803 2b01 	strb.w	r2, [r3], #1
   188fc:	9300      	str	r3, [sp, #0]
   188fe:	4651      	mov	r1, sl
   18900:	4620      	mov	r0, r4
   18902:	f7fb f961 	bl	13bc8 <_Bfree>
   18906:	f10b 0301 	add.w	r3, fp, #1
   1890a:	f8dd 9000 	ldr.w	r9, [sp]
   1890e:	9304      	str	r3, [sp, #16]
   18910:	f8cd 8000 	str.w	r8, [sp]
   18914:	2e00      	cmp	r6, #0
   18916:	f47f ae8f 	bne.w	18638 <_dtoa_r+0x658>
   1891a:	e691      	b.n	18640 <_dtoa_r+0x660>
   1891c:	eba3 0a0a 	sub.w	sl, r3, sl
   18920:	e5c5      	b.n	184ae <_dtoa_r+0x4ce>
   18922:	4631      	mov	r1, r6
   18924:	4652      	mov	r2, sl
   18926:	4620      	mov	r0, r4
   18928:	f7fb fb2e 	bl	13f88 <__pow5mult>
   1892c:	462a      	mov	r2, r5
   1892e:	4601      	mov	r1, r0
   18930:	4606      	mov	r6, r0
   18932:	4620      	mov	r0, r4
   18934:	f7fb fa7a 	bl	13e2c <__multiply>
   18938:	4629      	mov	r1, r5
   1893a:	4605      	mov	r5, r0
   1893c:	4620      	mov	r0, r4
   1893e:	f7fb f943 	bl	13bc8 <_Bfree>
   18942:	e5ea      	b.n	1851a <_dtoa_r+0x53a>
   18944:	2002      	movs	r0, #2
   18946:	eeb0 5b48 	vmov.f64	d5, d8
   1894a:	e481      	b.n	18250 <_dtoa_r+0x270>
   1894c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   18950:	e68e      	b.n	18670 <_dtoa_r+0x690>
   18952:	f04f 0b01 	mov.w	fp, #1
   18956:	46d9      	mov	r9, fp
   18958:	e44f      	b.n	181fa <_dtoa_r+0x21a>
   1895a:	d103      	bne.n	18964 <_dtoa_r+0x984>
   1895c:	9b01      	ldr	r3, [sp, #4]
   1895e:	07db      	lsls	r3, r3, #31
   18960:	f53f ae4c 	bmi.w	185fc <_dtoa_r+0x61c>
   18964:	46d9      	mov	r9, fp
   18966:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1896a:	2b30      	cmp	r3, #48	; 0x30
   1896c:	d0fa      	beq.n	18964 <_dtoa_r+0x984>
   1896e:	e657      	b.n	18620 <_dtoa_r+0x640>
   18970:	9b04      	ldr	r3, [sp, #16]
   18972:	9a00      	ldr	r2, [sp, #0]
   18974:	3301      	adds	r3, #1
   18976:	9304      	str	r3, [sp, #16]
   18978:	2331      	movs	r3, #49	; 0x31
   1897a:	7013      	strb	r3, [r2, #0]
   1897c:	e650      	b.n	18620 <_dtoa_r+0x640>
   1897e:	f1ba 0f00 	cmp.w	sl, #0
   18982:	f000 8123 	beq.w	18bcc <_dtoa_r+0xbec>
   18986:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1898a:	9b06      	ldr	r3, [sp, #24]
   1898c:	9309      	str	r3, [sp, #36]	; 0x24
   1898e:	4413      	add	r3, r2
   18990:	f8dd a020 	ldr.w	sl, [sp, #32]
   18994:	9306      	str	r3, [sp, #24]
   18996:	4490      	add	r8, r2
   18998:	e592      	b.n	184c0 <_dtoa_r+0x4e0>
   1899a:	ee07 0a90 	vmov	s15, r0
   1899e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   189a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   189a6:	eea6 5b07 	vfma.f64	d5, d6, d7
   189aa:	ee15 2a90 	vmov	r2, s11
   189ae:	ec51 0b15 	vmov	r0, r1, d5
   189b2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   189b6:	ec41 0b15 	vmov	d5, r0, r1
   189ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   189be:	ee36 7b47 	vsub.f64	d7, d6, d7
   189c2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   189c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   189ca:	f300 8137 	bgt.w	18c3c <_dtoa_r+0xc5c>
   189ce:	eeb1 5b45 	vneg.f64	d5, d5
   189d2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   189d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   189da:	f57f acfb 	bpl.w	183d4 <_dtoa_r+0x3f4>
   189de:	f04f 0a00 	mov.w	sl, #0
   189e2:	4656      	mov	r6, sl
   189e4:	e515      	b.n	18412 <_dtoa_r+0x432>
   189e6:	f000 80f5 	beq.w	18bd4 <_dtoa_r+0xbf4>
   189ea:	9b04      	ldr	r3, [sp, #16]
   189ec:	4951      	ldr	r1, [pc, #324]	; (18b34 <_dtoa_r+0xb54>)
   189ee:	425a      	negs	r2, r3
   189f0:	f002 000f 	and.w	r0, r2, #15
   189f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   189f8:	ed91 6b00 	vldr	d6, [r1]
   189fc:	1112      	asrs	r2, r2, #4
   189fe:	ee28 6b06 	vmul.f64	d6, d8, d6
   18a02:	f000 8142 	beq.w	18c8a <_dtoa_r+0xcaa>
   18a06:	eeb0 7b46 	vmov.f64	d7, d6
   18a0a:	494b      	ldr	r1, [pc, #300]	; (18b38 <_dtoa_r+0xb58>)
   18a0c:	2600      	movs	r6, #0
   18a0e:	2002      	movs	r0, #2
   18a10:	07d3      	lsls	r3, r2, #31
   18a12:	d505      	bpl.n	18a20 <_dtoa_r+0xa40>
   18a14:	ed91 5b00 	vldr	d5, [r1]
   18a18:	3001      	adds	r0, #1
   18a1a:	2601      	movs	r6, #1
   18a1c:	ee27 7b05 	vmul.f64	d7, d7, d5
   18a20:	1052      	asrs	r2, r2, #1
   18a22:	f101 0108 	add.w	r1, r1, #8
   18a26:	d1f3      	bne.n	18a10 <_dtoa_r+0xa30>
   18a28:	2e00      	cmp	r6, #0
   18a2a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   18a2e:	e41e      	b.n	1826e <_dtoa_r+0x28e>
   18a30:	9b02      	ldr	r3, [sp, #8]
   18a32:	2b00      	cmp	r3, #0
   18a34:	f47f ae37 	bne.w	186a6 <_dtoa_r+0x6c6>
   18a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   18a3c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   18a40:	2a00      	cmp	r2, #0
   18a42:	f040 8137 	bne.w	18cb4 <_dtoa_r+0xcd4>
   18a46:	4a3d      	ldr	r2, [pc, #244]	; (18b3c <_dtoa_r+0xb5c>)
   18a48:	400a      	ands	r2, r1
   18a4a:	2a00      	cmp	r2, #0
   18a4c:	f000 80fa 	beq.w	18c44 <_dtoa_r+0xc64>
   18a50:	9b06      	ldr	r3, [sp, #24]
   18a52:	3301      	adds	r3, #1
   18a54:	9306      	str	r3, [sp, #24]
   18a56:	2301      	movs	r3, #1
   18a58:	f108 0801 	add.w	r8, r8, #1
   18a5c:	9308      	str	r3, [sp, #32]
   18a5e:	e56f      	b.n	18540 <_dtoa_r+0x560>
   18a60:	4629      	mov	r1, r5
   18a62:	9a08      	ldr	r2, [sp, #32]
   18a64:	4620      	mov	r0, r4
   18a66:	f7fb fa8f 	bl	13f88 <__pow5mult>
   18a6a:	4605      	mov	r5, r0
   18a6c:	e55a      	b.n	18524 <_dtoa_r+0x544>
   18a6e:	2a00      	cmp	r2, #0
   18a70:	dd12      	ble.n	18a98 <_dtoa_r+0xab8>
   18a72:	4629      	mov	r1, r5
   18a74:	2201      	movs	r2, #1
   18a76:	4620      	mov	r0, r4
   18a78:	9301      	str	r3, [sp, #4]
   18a7a:	f7fb fae5 	bl	14048 <__lshift>
   18a7e:	4651      	mov	r1, sl
   18a80:	4605      	mov	r5, r0
   18a82:	f7fb fb59 	bl	14138 <__mcmp>
   18a86:	2800      	cmp	r0, #0
   18a88:	9b01      	ldr	r3, [sp, #4]
   18a8a:	f340 80e1 	ble.w	18c50 <_dtoa_r+0xc70>
   18a8e:	2b39      	cmp	r3, #57	; 0x39
   18a90:	f000 80ca 	beq.w	18c28 <_dtoa_r+0xc48>
   18a94:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   18a98:	46b9      	mov	r9, r7
   18a9a:	f809 3b01 	strb.w	r3, [r9], #1
   18a9e:	9b04      	ldr	r3, [sp, #16]
   18aa0:	3301      	adds	r3, #1
   18aa2:	4637      	mov	r7, r6
   18aa4:	9304      	str	r3, [sp, #16]
   18aa6:	4646      	mov	r6, r8
   18aa8:	e5ba      	b.n	18620 <_dtoa_r+0x640>
   18aaa:	ee38 8b08 	vadd.f64	d8, d8, d8
   18aae:	eeb4 8bc6 	vcmpe.f64	d8, d6
   18ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18ab6:	dc0a      	bgt.n	18ace <_dtoa_r+0xaee>
   18ab8:	eeb4 8b46 	vcmp.f64	d8, d6
   18abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18ac0:	f47f acdc 	bne.w	1847c <_dtoa_r+0x49c>
   18ac4:	ee17 3a10 	vmov	r3, s14
   18ac8:	07d8      	lsls	r0, r3, #31
   18aca:	f57f acd7 	bpl.w	1847c <_dtoa_r+0x49c>
   18ace:	9a00      	ldr	r2, [sp, #0]
   18ad0:	e454      	b.n	1837c <_dtoa_r+0x39c>
   18ad2:	6871      	ldr	r1, [r6, #4]
   18ad4:	4620      	mov	r0, r4
   18ad6:	f7fb f851 	bl	13b7c <_Balloc>
   18ada:	4607      	mov	r7, r0
   18adc:	2800      	cmp	r0, #0
   18ade:	f000 80de 	beq.w	18c9e <_dtoa_r+0xcbe>
   18ae2:	6933      	ldr	r3, [r6, #16]
   18ae4:	3302      	adds	r3, #2
   18ae6:	009a      	lsls	r2, r3, #2
   18ae8:	f106 010c 	add.w	r1, r6, #12
   18aec:	300c      	adds	r0, #12
   18aee:	f7f5 fd91 	bl	e614 <memcpy>
   18af2:	4639      	mov	r1, r7
   18af4:	2201      	movs	r2, #1
   18af6:	4620      	mov	r0, r4
   18af8:	f7fb faa6 	bl	14048 <__lshift>
   18afc:	4680      	mov	r8, r0
   18afe:	e5fe      	b.n	186fe <_dtoa_r+0x71e>
   18b00:	9b06      	ldr	r3, [sp, #24]
   18b02:	eba3 0309 	sub.w	r3, r3, r9
   18b06:	9309      	str	r3, [sp, #36]	; 0x24
   18b08:	e4da      	b.n	184c0 <_dtoa_r+0x4e0>
   18b0a:	2b39      	cmp	r3, #57	; 0x39
   18b0c:	f000 808c 	beq.w	18c28 <_dtoa_r+0xc48>
   18b10:	46b9      	mov	r9, r7
   18b12:	3301      	adds	r3, #1
   18b14:	e7c1      	b.n	18a9a <_dtoa_r+0xaba>
   18b16:	9a04      	ldr	r2, [sp, #16]
   18b18:	3201      	adds	r2, #1
   18b1a:	4637      	mov	r7, r6
   18b1c:	9204      	str	r2, [sp, #16]
   18b1e:	4646      	mov	r6, r8
   18b20:	e55f      	b.n	185e2 <_dtoa_r+0x602>
   18b22:	4629      	mov	r1, r5
   18b24:	4620      	mov	r0, r4
   18b26:	f7fb fa2f 	bl	13f88 <__pow5mult>
   18b2a:	4605      	mov	r5, r0
   18b2c:	e4fa      	b.n	18524 <_dtoa_r+0x544>
   18b2e:	bf00      	nop
   18b30:	2000104c 	.word	0x2000104c
   18b34:	20000328 	.word	0x20000328
   18b38:	20000300 	.word	0x20000300
   18b3c:	7ff00000 	.word	0x7ff00000
   18b40:	4b5e      	ldr	r3, [pc, #376]	; (18cbc <_dtoa_r+0xcdc>)
   18b42:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   18b46:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   18b4a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   18b4e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   18b52:	ee36 7b47 	vsub.f64	d7, d6, d7
   18b56:	ec41 0b16 	vmov	d6, r0, r1
   18b5a:	ee15 1a90 	vmov	r1, s11
   18b5e:	ee23 3b06 	vmul.f64	d3, d3, d6
   18b62:	9800      	ldr	r0, [sp, #0]
   18b64:	3130      	adds	r1, #48	; 0x30
   18b66:	2a01      	cmp	r2, #1
   18b68:	f800 1b01 	strb.w	r1, [r0], #1
   18b6c:	f000 8083 	beq.w	18c76 <_dtoa_r+0xc96>
   18b70:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   18b74:	9b00      	ldr	r3, [sp, #0]
   18b76:	1899      	adds	r1, r3, r2
   18b78:	ee27 7b04 	vmul.f64	d7, d7, d4
   18b7c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   18b80:	ee16 3a90 	vmov	r3, s13
   18b84:	3330      	adds	r3, #48	; 0x30
   18b86:	f800 3b01 	strb.w	r3, [r0], #1
   18b8a:	4281      	cmp	r1, r0
   18b8c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   18b90:	ee37 7b45 	vsub.f64	d7, d7, d5
   18b94:	d1f0      	bne.n	18b78 <_dtoa_r+0xb98>
   18b96:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   18b9a:	ee33 5b06 	vadd.f64	d5, d3, d6
   18b9e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   18ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18ba6:	f53f abe3 	bmi.w	18370 <_dtoa_r+0x390>
   18baa:	ee36 6b43 	vsub.f64	d6, d6, d3
   18bae:	eeb4 6bc7 	vcmpe.f64	d6, d7
   18bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18bb6:	f77f ac0d 	ble.w	183d4 <_dtoa_r+0x3f4>
   18bba:	4689      	mov	r9, r1
   18bbc:	3901      	subs	r1, #1
   18bbe:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   18bc2:	2b30      	cmp	r3, #48	; 0x30
   18bc4:	d0f9      	beq.n	18bba <_dtoa_r+0xbda>
   18bc6:	1c73      	adds	r3, r6, #1
   18bc8:	9304      	str	r3, [sp, #16]
   18bca:	e539      	b.n	18640 <_dtoa_r+0x660>
   18bcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18bce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   18bd2:	e6da      	b.n	1898a <_dtoa_r+0x9aa>
   18bd4:	2002      	movs	r0, #2
   18bd6:	eeb0 6b48 	vmov.f64	d6, d8
   18bda:	f7ff bb48 	b.w	1826e <_dtoa_r+0x28e>
   18bde:	f1b9 0f00 	cmp.w	r9, #0
   18be2:	f43f aeda 	beq.w	1899a <_dtoa_r+0x9ba>
   18be6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18be8:	2a00      	cmp	r2, #0
   18bea:	f77f abf3 	ble.w	183d4 <_dtoa_r+0x3f4>
   18bee:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   18bf2:	ee26 6b04 	vmul.f64	d6, d6, d4
   18bf6:	3001      	adds	r0, #1
   18bf8:	ee07 0a90 	vmov	s15, r0
   18bfc:	9b04      	ldr	r3, [sp, #16]
   18bfe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   18c02:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   18c06:	eea6 7b05 	vfma.f64	d7, d6, d5
   18c0a:	ee17 ca90 	vmov	ip, s15
   18c0e:	ec51 0b17 	vmov	r0, r1, d7
   18c12:	1e5e      	subs	r6, r3, #1
   18c14:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   18c18:	f7ff bb47 	b.w	182aa <_dtoa_r+0x2ca>
   18c1c:	9b04      	ldr	r3, [sp, #16]
   18c1e:	3301      	adds	r3, #1
   18c20:	9304      	str	r3, [sp, #16]
   18c22:	2331      	movs	r3, #49	; 0x31
   18c24:	f7ff bbb1 	b.w	1838a <_dtoa_r+0x3aa>
   18c28:	9b04      	ldr	r3, [sp, #16]
   18c2a:	46bb      	mov	fp, r7
   18c2c:	3301      	adds	r3, #1
   18c2e:	9304      	str	r3, [sp, #16]
   18c30:	2339      	movs	r3, #57	; 0x39
   18c32:	4637      	mov	r7, r6
   18c34:	f80b 3b01 	strb.w	r3, [fp], #1
   18c38:	4646      	mov	r6, r8
   18c3a:	e4e1      	b.n	18600 <_dtoa_r+0x620>
   18c3c:	f04f 0a00 	mov.w	sl, #0
   18c40:	4656      	mov	r6, sl
   18c42:	e653      	b.n	188ec <_dtoa_r+0x90c>
   18c44:	9208      	str	r2, [sp, #32]
   18c46:	e47b      	b.n	18540 <_dtoa_r+0x560>
   18c48:	1c73      	adds	r3, r6, #1
   18c4a:	9304      	str	r3, [sp, #16]
   18c4c:	4689      	mov	r9, r1
   18c4e:	e4f7      	b.n	18640 <_dtoa_r+0x660>
   18c50:	f47f af22 	bne.w	18a98 <_dtoa_r+0xab8>
   18c54:	07da      	lsls	r2, r3, #31
   18c56:	f57f af1f 	bpl.w	18a98 <_dtoa_r+0xab8>
   18c5a:	e718      	b.n	18a8e <_dtoa_r+0xaae>
   18c5c:	2b39      	cmp	r3, #57	; 0x39
   18c5e:	d0e3      	beq.n	18c28 <_dtoa_r+0xc48>
   18c60:	f1b9 0f00 	cmp.w	r9, #0
   18c64:	f73f af16 	bgt.w	18a94 <_dtoa_r+0xab4>
   18c68:	e716      	b.n	18a98 <_dtoa_r+0xab8>
   18c6a:	9b01      	ldr	r3, [sp, #4]
   18c6c:	2b02      	cmp	r3, #2
   18c6e:	f73f ae28 	bgt.w	188c2 <_dtoa_r+0x8e2>
   18c72:	9704      	str	r7, [sp, #16]
   18c74:	e5ba      	b.n	187ec <_dtoa_r+0x80c>
   18c76:	4601      	mov	r1, r0
   18c78:	e78d      	b.n	18b96 <_dtoa_r+0xbb6>
   18c7a:	9b01      	ldr	r3, [sp, #4]
   18c7c:	2b02      	cmp	r3, #2
   18c7e:	f73f ae20 	bgt.w	188c2 <_dtoa_r+0x8e2>
   18c82:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   18c86:	9704      	str	r7, [sp, #16]
   18c88:	e52b      	b.n	186e2 <_dtoa_r+0x702>
   18c8a:	2002      	movs	r0, #2
   18c8c:	f7ff baef 	b.w	1826e <_dtoa_r+0x28e>
   18c90:	4b0b      	ldr	r3, [pc, #44]	; (18cc0 <_dtoa_r+0xce0>)
   18c92:	480c      	ldr	r0, [pc, #48]	; (18cc4 <_dtoa_r+0xce4>)
   18c94:	2200      	movs	r2, #0
   18c96:	f240 11af 	movw	r1, #431	; 0x1af
   18c9a:	f7ff f8b1 	bl	17e00 <__assert_func>
   18c9e:	4b08      	ldr	r3, [pc, #32]	; (18cc0 <_dtoa_r+0xce0>)
   18ca0:	4808      	ldr	r0, [pc, #32]	; (18cc4 <_dtoa_r+0xce4>)
   18ca2:	463a      	mov	r2, r7
   18ca4:	f240 21ef 	movw	r1, #751	; 0x2ef
   18ca8:	f7ff f8aa 	bl	17e00 <__assert_func>
   18cac:	4b06      	ldr	r3, [pc, #24]	; (18cc8 <_dtoa_r+0xce8>)
   18cae:	9300      	str	r3, [sp, #0]
   18cb0:	f7ff b9d2 	b.w	18058 <_dtoa_r+0x78>
   18cb4:	9b02      	ldr	r3, [sp, #8]
   18cb6:	9308      	str	r3, [sp, #32]
   18cb8:	e4f7      	b.n	186aa <_dtoa_r+0x6ca>
   18cba:	bf00      	nop
   18cbc:	20000328 	.word	0x20000328
   18cc0:	20000d60 	.word	0x20000d60
   18cc4:	20001050 	.word	0x20001050
   18cc8:	20001040 	.word	0x20001040

00018ccc <_strtoul_l.constprop.0>:
   18ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18cd0:	4607      	mov	r7, r0
   18cd2:	484c      	ldr	r0, [pc, #304]	; (18e04 <_strtoul_l.constprop.0+0x138>)
   18cd4:	460e      	mov	r6, r1
   18cd6:	4635      	mov	r5, r6
   18cd8:	f816 eb01 	ldrb.w	lr, [r6], #1
   18cdc:	f810 c00e 	ldrb.w	ip, [r0, lr]
   18ce0:	f01c 0c08 	ands.w	ip, ip, #8
   18ce4:	d1f7      	bne.n	18cd6 <_strtoul_l.constprop.0+0xa>
   18ce6:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   18cea:	d05a      	beq.n	18da2 <_strtoul_l.constprop.0+0xd6>
   18cec:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   18cf0:	bf03      	ittte	eq
   18cf2:	f896 e000 	ldrbeq.w	lr, [r6]
   18cf6:	4664      	moveq	r4, ip
   18cf8:	1cae      	addeq	r6, r5, #2
   18cfa:	4664      	movne	r4, ip
   18cfc:	b15b      	cbz	r3, 18d16 <_strtoul_l.constprop.0+0x4a>
   18cfe:	2b10      	cmp	r3, #16
   18d00:	d054      	beq.n	18dac <_strtoul_l.constprop.0+0xe0>
   18d02:	f04f 38ff 	mov.w	r8, #4294967295
   18d06:	fbb8 f8f3 	udiv	r8, r8, r3
   18d0a:	fb03 fa08 	mul.w	sl, r3, r8
   18d0e:	ea6f 0a0a 	mvn.w	sl, sl
   18d12:	4699      	mov	r9, r3
   18d14:	e008      	b.n	18d28 <_strtoul_l.constprop.0+0x5c>
   18d16:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   18d1a:	d05a      	beq.n	18dd2 <_strtoul_l.constprop.0+0x106>
   18d1c:	230a      	movs	r3, #10
   18d1e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 18e08 <_strtoul_l.constprop.0+0x13c>
   18d22:	f04f 0a05 	mov.w	sl, #5
   18d26:	4699      	mov	r9, r3
   18d28:	2500      	movs	r5, #0
   18d2a:	4628      	mov	r0, r5
   18d2c:	e005      	b.n	18d3a <_strtoul_l.constprop.0+0x6e>
   18d2e:	d02c      	beq.n	18d8a <_strtoul_l.constprop.0+0xbe>
   18d30:	fb09 c000 	mla	r0, r9, r0, ip
   18d34:	2501      	movs	r5, #1
   18d36:	f816 eb01 	ldrb.w	lr, [r6], #1
   18d3a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   18d3e:	f1bc 0f09 	cmp.w	ip, #9
   18d42:	d906      	bls.n	18d52 <_strtoul_l.constprop.0+0x86>
   18d44:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   18d48:	f1bc 0f19 	cmp.w	ip, #25
   18d4c:	d80b      	bhi.n	18d66 <_strtoul_l.constprop.0+0x9a>
   18d4e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   18d52:	4563      	cmp	r3, ip
   18d54:	dd10      	ble.n	18d78 <_strtoul_l.constprop.0+0xac>
   18d56:	f1b5 3fff 	cmp.w	r5, #4294967295
   18d5a:	d0ec      	beq.n	18d36 <_strtoul_l.constprop.0+0x6a>
   18d5c:	4540      	cmp	r0, r8
   18d5e:	d9e6      	bls.n	18d2e <_strtoul_l.constprop.0+0x62>
   18d60:	f04f 35ff 	mov.w	r5, #4294967295
   18d64:	e7e7      	b.n	18d36 <_strtoul_l.constprop.0+0x6a>
   18d66:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   18d6a:	f1bc 0f19 	cmp.w	ip, #25
   18d6e:	d803      	bhi.n	18d78 <_strtoul_l.constprop.0+0xac>
   18d70:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   18d74:	4563      	cmp	r3, ip
   18d76:	dcee      	bgt.n	18d56 <_strtoul_l.constprop.0+0x8a>
   18d78:	1c6b      	adds	r3, r5, #1
   18d7a:	d00b      	beq.n	18d94 <_strtoul_l.constprop.0+0xc8>
   18d7c:	b104      	cbz	r4, 18d80 <_strtoul_l.constprop.0+0xb4>
   18d7e:	4240      	negs	r0, r0
   18d80:	b10a      	cbz	r2, 18d86 <_strtoul_l.constprop.0+0xba>
   18d82:	b965      	cbnz	r5, 18d9e <_strtoul_l.constprop.0+0xd2>
   18d84:	6011      	str	r1, [r2, #0]
   18d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d8a:	45d4      	cmp	ip, sl
   18d8c:	ddd0      	ble.n	18d30 <_strtoul_l.constprop.0+0x64>
   18d8e:	f04f 35ff 	mov.w	r5, #4294967295
   18d92:	e7d0      	b.n	18d36 <_strtoul_l.constprop.0+0x6a>
   18d94:	2322      	movs	r3, #34	; 0x22
   18d96:	603b      	str	r3, [r7, #0]
   18d98:	4628      	mov	r0, r5
   18d9a:	2a00      	cmp	r2, #0
   18d9c:	d0f3      	beq.n	18d86 <_strtoul_l.constprop.0+0xba>
   18d9e:	1e71      	subs	r1, r6, #1
   18da0:	e7f0      	b.n	18d84 <_strtoul_l.constprop.0+0xb8>
   18da2:	f896 e000 	ldrb.w	lr, [r6]
   18da6:	2401      	movs	r4, #1
   18da8:	1cae      	adds	r6, r5, #2
   18daa:	e7a7      	b.n	18cfc <_strtoul_l.constprop.0+0x30>
   18dac:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   18db0:	d121      	bne.n	18df6 <_strtoul_l.constprop.0+0x12a>
   18db2:	7830      	ldrb	r0, [r6, #0]
   18db4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   18db8:	2858      	cmp	r0, #88	; 0x58
   18dba:	d116      	bne.n	18dea <_strtoul_l.constprop.0+0x11e>
   18dbc:	f04f 0910 	mov.w	r9, #16
   18dc0:	f896 e001 	ldrb.w	lr, [r6, #1]
   18dc4:	f04f 0a0f 	mov.w	sl, #15
   18dc8:	3602      	adds	r6, #2
   18dca:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18dce:	464b      	mov	r3, r9
   18dd0:	e7aa      	b.n	18d28 <_strtoul_l.constprop.0+0x5c>
   18dd2:	7833      	ldrb	r3, [r6, #0]
   18dd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18dd8:	2b58      	cmp	r3, #88	; 0x58
   18dda:	d0ef      	beq.n	18dbc <_strtoul_l.constprop.0+0xf0>
   18ddc:	2308      	movs	r3, #8
   18dde:	f04f 0a07 	mov.w	sl, #7
   18de2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   18de6:	4699      	mov	r9, r3
   18de8:	e79e      	b.n	18d28 <_strtoul_l.constprop.0+0x5c>
   18dea:	4699      	mov	r9, r3
   18dec:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18df0:	f04f 0a0f 	mov.w	sl, #15
   18df4:	e798      	b.n	18d28 <_strtoul_l.constprop.0+0x5c>
   18df6:	f04f 0a0f 	mov.w	sl, #15
   18dfa:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18dfe:	4699      	mov	r9, r3
   18e00:	e792      	b.n	18d28 <_strtoul_l.constprop.0+0x5c>
   18e02:	bf00      	nop
   18e04:	20000f3d 	.word	0x20000f3d
   18e08:	19999999 	.word	0x19999999

00018e0c <_strtoul_r>:
   18e0c:	f7ff bf5e 	b.w	18ccc <_strtoul_l.constprop.0>

00018e10 <_strtoll_l.constprop.0>:
   18e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e14:	b085      	sub	sp, #20
   18e16:	461f      	mov	r7, r3
   18e18:	4b57      	ldr	r3, [pc, #348]	; (18f78 <_strtoll_l.constprop.0+0x168>)
   18e1a:	9003      	str	r0, [sp, #12]
   18e1c:	468a      	mov	sl, r1
   18e1e:	9200      	str	r2, [sp, #0]
   18e20:	460d      	mov	r5, r1
   18e22:	462a      	mov	r2, r5
   18e24:	f815 4b01 	ldrb.w	r4, [r5], #1
   18e28:	5d1e      	ldrb	r6, [r3, r4]
   18e2a:	f016 0608 	ands.w	r6, r6, #8
   18e2e:	d1f8      	bne.n	18e22 <_strtoll_l.constprop.0+0x12>
   18e30:	2c2d      	cmp	r4, #45	; 0x2d
   18e32:	d075      	beq.n	18f20 <_strtoll_l.constprop.0+0x110>
   18e34:	2c2b      	cmp	r4, #43	; 0x2b
   18e36:	bf05      	ittet	eq
   18e38:	782c      	ldrbeq	r4, [r5, #0]
   18e3a:	9602      	streq	r6, [sp, #8]
   18e3c:	9602      	strne	r6, [sp, #8]
   18e3e:	1c95      	addeq	r5, r2, #2
   18e40:	f04f 36ff 	mov.w	r6, #4294967295
   18e44:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   18e48:	b12f      	cbz	r7, 18e56 <_strtoll_l.constprop.0+0x46>
   18e4a:	2f10      	cmp	r7, #16
   18e4c:	d06f      	beq.n	18f2e <_strtoll_l.constprop.0+0x11e>
   18e4e:	46b8      	mov	r8, r7
   18e50:	ea4f 79e7 	mov.w	r9, r7, asr #31
   18e54:	e005      	b.n	18e62 <_strtoll_l.constprop.0+0x52>
   18e56:	2c30      	cmp	r4, #48	; 0x30
   18e58:	d074      	beq.n	18f44 <_strtoll_l.constprop.0+0x134>
   18e5a:	f04f 080a 	mov.w	r8, #10
   18e5e:	46b9      	mov	r9, r7
   18e60:	4647      	mov	r7, r8
   18e62:	4642      	mov	r2, r8
   18e64:	464b      	mov	r3, r9
   18e66:	4630      	mov	r0, r6
   18e68:	4659      	mov	r1, fp
   18e6a:	f7f7 fb63 	bl	10534 <__aeabi_uldivmod>
   18e6e:	2300      	movs	r3, #0
   18e70:	9201      	str	r2, [sp, #4]
   18e72:	4684      	mov	ip, r0
   18e74:	460a      	mov	r2, r1
   18e76:	4618      	mov	r0, r3
   18e78:	4619      	mov	r1, r3
   18e7a:	e011      	b.n	18ea0 <_strtoll_l.constprop.0+0x90>
   18e7c:	428a      	cmp	r2, r1
   18e7e:	bf08      	it	eq
   18e80:	4584      	cmpeq	ip, r0
   18e82:	d03d      	beq.n	18f00 <_strtoll_l.constprop.0+0xf0>
   18e84:	fb00 f309 	mul.w	r3, r0, r9
   18e88:	fb08 3301 	mla	r3, r8, r1, r3
   18e8c:	fba0 0108 	umull	r0, r1, r0, r8
   18e90:	440b      	add	r3, r1
   18e92:	eb1e 0000 	adds.w	r0, lr, r0
   18e96:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   18e9a:	2301      	movs	r3, #1
   18e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
   18ea0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   18ea4:	f1be 0f09 	cmp.w	lr, #9
   18ea8:	d906      	bls.n	18eb8 <_strtoll_l.constprop.0+0xa8>
   18eaa:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   18eae:	f1be 0f19 	cmp.w	lr, #25
   18eb2:	d80c      	bhi.n	18ece <_strtoll_l.constprop.0+0xbe>
   18eb4:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   18eb8:	4577      	cmp	r7, lr
   18eba:	dd11      	ble.n	18ee0 <_strtoll_l.constprop.0+0xd0>
   18ebc:	1c5c      	adds	r4, r3, #1
   18ebe:	d0ed      	beq.n	18e9c <_strtoll_l.constprop.0+0x8c>
   18ec0:	4584      	cmp	ip, r0
   18ec2:	eb72 0301 	sbcs.w	r3, r2, r1
   18ec6:	d2d9      	bcs.n	18e7c <_strtoll_l.constprop.0+0x6c>
   18ec8:	f04f 33ff 	mov.w	r3, #4294967295
   18ecc:	e7e6      	b.n	18e9c <_strtoll_l.constprop.0+0x8c>
   18ece:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   18ed2:	f1be 0f19 	cmp.w	lr, #25
   18ed6:	d803      	bhi.n	18ee0 <_strtoll_l.constprop.0+0xd0>
   18ed8:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   18edc:	4577      	cmp	r7, lr
   18ede:	dced      	bgt.n	18ebc <_strtoll_l.constprop.0+0xac>
   18ee0:	1c5a      	adds	r2, r3, #1
   18ee2:	d013      	beq.n	18f0c <_strtoll_l.constprop.0+0xfc>
   18ee4:	9a02      	ldr	r2, [sp, #8]
   18ee6:	b112      	cbz	r2, 18eee <_strtoll_l.constprop.0+0xde>
   18ee8:	4240      	negs	r0, r0
   18eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18eee:	9a00      	ldr	r2, [sp, #0]
   18ef0:	b11a      	cbz	r2, 18efa <_strtoll_l.constprop.0+0xea>
   18ef2:	bba3      	cbnz	r3, 18f5e <_strtoll_l.constprop.0+0x14e>
   18ef4:	9b00      	ldr	r3, [sp, #0]
   18ef6:	f8c3 a000 	str.w	sl, [r3]
   18efa:	b005      	add	sp, #20
   18efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f00:	9b01      	ldr	r3, [sp, #4]
   18f02:	4573      	cmp	r3, lr
   18f04:	dabe      	bge.n	18e84 <_strtoll_l.constprop.0+0x74>
   18f06:	f04f 33ff 	mov.w	r3, #4294967295
   18f0a:	e7c7      	b.n	18e9c <_strtoll_l.constprop.0+0x8c>
   18f0c:	9a03      	ldr	r2, [sp, #12]
   18f0e:	2322      	movs	r3, #34	; 0x22
   18f10:	6013      	str	r3, [r2, #0]
   18f12:	9b00      	ldr	r3, [sp, #0]
   18f14:	b333      	cbz	r3, 18f64 <_strtoll_l.constprop.0+0x154>
   18f16:	f105 3aff 	add.w	sl, r5, #4294967295
   18f1a:	4630      	mov	r0, r6
   18f1c:	4659      	mov	r1, fp
   18f1e:	e7e9      	b.n	18ef4 <_strtoll_l.constprop.0+0xe4>
   18f20:	2301      	movs	r3, #1
   18f22:	782c      	ldrb	r4, [r5, #0]
   18f24:	9302      	str	r3, [sp, #8]
   18f26:	1c95      	adds	r5, r2, #2
   18f28:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   18f2c:	e78c      	b.n	18e48 <_strtoll_l.constprop.0+0x38>
   18f2e:	2c30      	cmp	r4, #48	; 0x30
   18f30:	d104      	bne.n	18f3c <_strtoll_l.constprop.0+0x12c>
   18f32:	782b      	ldrb	r3, [r5, #0]
   18f34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18f38:	2b58      	cmp	r3, #88	; 0x58
   18f3a:	d008      	beq.n	18f4e <_strtoll_l.constprop.0+0x13e>
   18f3c:	46b8      	mov	r8, r7
   18f3e:	f04f 0900 	mov.w	r9, #0
   18f42:	e78e      	b.n	18e62 <_strtoll_l.constprop.0+0x52>
   18f44:	782b      	ldrb	r3, [r5, #0]
   18f46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18f4a:	2b58      	cmp	r3, #88	; 0x58
   18f4c:	d10f      	bne.n	18f6e <_strtoll_l.constprop.0+0x15e>
   18f4e:	f04f 0810 	mov.w	r8, #16
   18f52:	786c      	ldrb	r4, [r5, #1]
   18f54:	f04f 0900 	mov.w	r9, #0
   18f58:	3502      	adds	r5, #2
   18f5a:	4647      	mov	r7, r8
   18f5c:	e781      	b.n	18e62 <_strtoll_l.constprop.0+0x52>
   18f5e:	4606      	mov	r6, r0
   18f60:	468b      	mov	fp, r1
   18f62:	e7d8      	b.n	18f16 <_strtoll_l.constprop.0+0x106>
   18f64:	4630      	mov	r0, r6
   18f66:	4659      	mov	r1, fp
   18f68:	b005      	add	sp, #20
   18f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f6e:	f04f 0808 	mov.w	r8, #8
   18f72:	46b9      	mov	r9, r7
   18f74:	4647      	mov	r7, r8
   18f76:	e774      	b.n	18e62 <_strtoll_l.constprop.0+0x52>
   18f78:	20000f3d 	.word	0x20000f3d

00018f7c <_strtoll_r>:
   18f7c:	f7ff bf48 	b.w	18e10 <_strtoll_l.constprop.0>

00018f80 <_strtoull_l.constprop.0>:
   18f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f84:	b085      	sub	sp, #20
   18f86:	468b      	mov	fp, r1
   18f88:	9201      	str	r2, [sp, #4]
   18f8a:	4a62      	ldr	r2, [pc, #392]	; (19114 <_strtoull_l.constprop.0+0x194>)
   18f8c:	9003      	str	r0, [sp, #12]
   18f8e:	461e      	mov	r6, r3
   18f90:	460d      	mov	r5, r1
   18f92:	4629      	mov	r1, r5
   18f94:	f815 4b01 	ldrb.w	r4, [r5], #1
   18f98:	5d13      	ldrb	r3, [r2, r4]
   18f9a:	f013 0308 	ands.w	r3, r3, #8
   18f9e:	d1f8      	bne.n	18f92 <_strtoull_l.constprop.0+0x12>
   18fa0:	2c2d      	cmp	r4, #45	; 0x2d
   18fa2:	f000 8082 	beq.w	190aa <_strtoull_l.constprop.0+0x12a>
   18fa6:	2c2b      	cmp	r4, #43	; 0x2b
   18fa8:	bf03      	ittte	eq
   18faa:	782c      	ldrbeq	r4, [r5, #0]
   18fac:	9302      	streq	r3, [sp, #8]
   18fae:	1c8d      	addeq	r5, r1, #2
   18fb0:	9302      	strne	r3, [sp, #8]
   18fb2:	b1be      	cbz	r6, 18fe4 <_strtoull_l.constprop.0+0x64>
   18fb4:	2e10      	cmp	r6, #16
   18fb6:	d07d      	beq.n	190b4 <_strtoull_l.constprop.0+0x134>
   18fb8:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   18fbc:	4632      	mov	r2, r6
   18fbe:	4653      	mov	r3, sl
   18fc0:	f04f 30ff 	mov.w	r0, #4294967295
   18fc4:	f04f 31ff 	mov.w	r1, #4294967295
   18fc8:	f7f7 fab4 	bl	10534 <__aeabi_uldivmod>
   18fcc:	4632      	mov	r2, r6
   18fce:	4607      	mov	r7, r0
   18fd0:	4688      	mov	r8, r1
   18fd2:	4653      	mov	r3, sl
   18fd4:	f04f 30ff 	mov.w	r0, #4294967295
   18fd8:	f04f 31ff 	mov.w	r1, #4294967295
   18fdc:	46b1      	mov	r9, r6
   18fde:	f7f7 faa9 	bl	10534 <__aeabi_uldivmod>
   18fe2:	e00a      	b.n	18ffa <_strtoull_l.constprop.0+0x7a>
   18fe4:	2c30      	cmp	r4, #48	; 0x30
   18fe6:	d079      	beq.n	190dc <_strtoull_l.constprop.0+0x15c>
   18fe8:	f04f 090a 	mov.w	r9, #10
   18fec:	f8df 8128 	ldr.w	r8, [pc, #296]	; 19118 <_strtoull_l.constprop.0+0x198>
   18ff0:	46b2      	mov	sl, r6
   18ff2:	2205      	movs	r2, #5
   18ff4:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   18ff8:	464e      	mov	r6, r9
   18ffa:	f04f 0c00 	mov.w	ip, #0
   18ffe:	4660      	mov	r0, ip
   19000:	4661      	mov	r1, ip
   19002:	e011      	b.n	19028 <_strtoull_l.constprop.0+0xa8>
   19004:	4541      	cmp	r1, r8
   19006:	bf08      	it	eq
   19008:	42b8      	cmpeq	r0, r7
   1900a:	d03e      	beq.n	1908a <_strtoull_l.constprop.0+0x10a>
   1900c:	fb00 f40a 	mul.w	r4, r0, sl
   19010:	fb09 4101 	mla	r1, r9, r1, r4
   19014:	fba0 0409 	umull	r0, r4, r0, r9
   19018:	4421      	add	r1, r4
   1901a:	1818      	adds	r0, r3, r0
   1901c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   19020:	f04f 0c01 	mov.w	ip, #1
   19024:	f815 4b01 	ldrb.w	r4, [r5], #1
   19028:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1902c:	2b09      	cmp	r3, #9
   1902e:	d905      	bls.n	1903c <_strtoull_l.constprop.0+0xbc>
   19030:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   19034:	2b19      	cmp	r3, #25
   19036:	d80d      	bhi.n	19054 <_strtoull_l.constprop.0+0xd4>
   19038:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1903c:	429e      	cmp	r6, r3
   1903e:	dd11      	ble.n	19064 <_strtoull_l.constprop.0+0xe4>
   19040:	f1bc 3fff 	cmp.w	ip, #4294967295
   19044:	d0ee      	beq.n	19024 <_strtoull_l.constprop.0+0xa4>
   19046:	4287      	cmp	r7, r0
   19048:	eb78 0401 	sbcs.w	r4, r8, r1
   1904c:	d2da      	bcs.n	19004 <_strtoull_l.constprop.0+0x84>
   1904e:	f04f 3cff 	mov.w	ip, #4294967295
   19052:	e7e7      	b.n	19024 <_strtoull_l.constprop.0+0xa4>
   19054:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   19058:	2b19      	cmp	r3, #25
   1905a:	d803      	bhi.n	19064 <_strtoull_l.constprop.0+0xe4>
   1905c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   19060:	429e      	cmp	r6, r3
   19062:	dced      	bgt.n	19040 <_strtoull_l.constprop.0+0xc0>
   19064:	f1bc 3fff 	cmp.w	ip, #4294967295
   19068:	d014      	beq.n	19094 <_strtoull_l.constprop.0+0x114>
   1906a:	9b02      	ldr	r3, [sp, #8]
   1906c:	b113      	cbz	r3, 19074 <_strtoull_l.constprop.0+0xf4>
   1906e:	4240      	negs	r0, r0
   19070:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19074:	9b01      	ldr	r3, [sp, #4]
   19076:	b12b      	cbz	r3, 19084 <_strtoull_l.constprop.0+0x104>
   19078:	f1bc 0f00 	cmp.w	ip, #0
   1907c:	d112      	bne.n	190a4 <_strtoull_l.constprop.0+0x124>
   1907e:	9b01      	ldr	r3, [sp, #4]
   19080:	f8c3 b000 	str.w	fp, [r3]
   19084:	b005      	add	sp, #20
   19086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1908a:	4293      	cmp	r3, r2
   1908c:	ddbe      	ble.n	1900c <_strtoull_l.constprop.0+0x8c>
   1908e:	f04f 3cff 	mov.w	ip, #4294967295
   19092:	e7c7      	b.n	19024 <_strtoull_l.constprop.0+0xa4>
   19094:	9a03      	ldr	r2, [sp, #12]
   19096:	2322      	movs	r3, #34	; 0x22
   19098:	6013      	str	r3, [r2, #0]
   1909a:	9b01      	ldr	r3, [sp, #4]
   1909c:	4660      	mov	r0, ip
   1909e:	4661      	mov	r1, ip
   190a0:	2b00      	cmp	r3, #0
   190a2:	d0ef      	beq.n	19084 <_strtoull_l.constprop.0+0x104>
   190a4:	f105 3bff 	add.w	fp, r5, #4294967295
   190a8:	e7e9      	b.n	1907e <_strtoull_l.constprop.0+0xfe>
   190aa:	2301      	movs	r3, #1
   190ac:	782c      	ldrb	r4, [r5, #0]
   190ae:	9302      	str	r3, [sp, #8]
   190b0:	1c8d      	adds	r5, r1, #2
   190b2:	e77e      	b.n	18fb2 <_strtoull_l.constprop.0+0x32>
   190b4:	2c30      	cmp	r4, #48	; 0x30
   190b6:	d123      	bne.n	19100 <_strtoull_l.constprop.0+0x180>
   190b8:	782b      	ldrb	r3, [r5, #0]
   190ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   190be:	2b58      	cmp	r3, #88	; 0x58
   190c0:	d11b      	bne.n	190fa <_strtoull_l.constprop.0+0x17a>
   190c2:	f04f 0910 	mov.w	r9, #16
   190c6:	786c      	ldrb	r4, [r5, #1]
   190c8:	220f      	movs	r2, #15
   190ca:	3502      	adds	r5, #2
   190cc:	f04f 37ff 	mov.w	r7, #4294967295
   190d0:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   190d4:	f04f 0a00 	mov.w	sl, #0
   190d8:	464e      	mov	r6, r9
   190da:	e78e      	b.n	18ffa <_strtoull_l.constprop.0+0x7a>
   190dc:	782b      	ldrb	r3, [r5, #0]
   190de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   190e2:	2b58      	cmp	r3, #88	; 0x58
   190e4:	d0ed      	beq.n	190c2 <_strtoull_l.constprop.0+0x142>
   190e6:	f04f 0908 	mov.w	r9, #8
   190ea:	46b2      	mov	sl, r6
   190ec:	2207      	movs	r2, #7
   190ee:	f04f 37ff 	mov.w	r7, #4294967295
   190f2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   190f6:	464e      	mov	r6, r9
   190f8:	e77f      	b.n	18ffa <_strtoull_l.constprop.0+0x7a>
   190fa:	f04f 0a00 	mov.w	sl, #0
   190fe:	e75d      	b.n	18fbc <_strtoull_l.constprop.0+0x3c>
   19100:	220f      	movs	r2, #15
   19102:	f04f 37ff 	mov.w	r7, #4294967295
   19106:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1910a:	46b1      	mov	r9, r6
   1910c:	f04f 0a00 	mov.w	sl, #0
   19110:	e773      	b.n	18ffa <_strtoull_l.constprop.0+0x7a>
   19112:	bf00      	nop
   19114:	20000f3d 	.word	0x20000f3d
   19118:	19999999 	.word	0x19999999

0001911c <_strtoull_r>:
   1911c:	f7ff bf30 	b.w	18f80 <_strtoull_l.constprop.0>

00019120 <_mbrtowc_r>:
   19120:	b570      	push	{r4, r5, r6, lr}
   19122:	b082      	sub	sp, #8
   19124:	4604      	mov	r4, r0
   19126:	9d06      	ldr	r5, [sp, #24]
   19128:	b155      	cbz	r5, 19140 <_mbrtowc_r+0x20>
   1912a:	b16a      	cbz	r2, 19148 <_mbrtowc_r+0x28>
   1912c:	480f      	ldr	r0, [pc, #60]	; (1916c <_mbrtowc_r+0x4c>)
   1912e:	9500      	str	r5, [sp, #0]
   19130:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   19134:	4620      	mov	r0, r4
   19136:	47b0      	blx	r6
   19138:	1c43      	adds	r3, r0, #1
   1913a:	d010      	beq.n	1915e <_mbrtowc_r+0x3e>
   1913c:	b002      	add	sp, #8
   1913e:	bd70      	pop	{r4, r5, r6, pc}
   19140:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   19144:	2a00      	cmp	r2, #0
   19146:	d1f1      	bne.n	1912c <_mbrtowc_r+0xc>
   19148:	4b08      	ldr	r3, [pc, #32]	; (1916c <_mbrtowc_r+0x4c>)
   1914a:	9500      	str	r5, [sp, #0]
   1914c:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   19150:	4611      	mov	r1, r2
   19152:	2301      	movs	r3, #1
   19154:	4a06      	ldr	r2, [pc, #24]	; (19170 <_mbrtowc_r+0x50>)
   19156:	4620      	mov	r0, r4
   19158:	47b0      	blx	r6
   1915a:	1c43      	adds	r3, r0, #1
   1915c:	d1ee      	bne.n	1913c <_mbrtowc_r+0x1c>
   1915e:	2200      	movs	r2, #0
   19160:	238a      	movs	r3, #138	; 0x8a
   19162:	602a      	str	r2, [r5, #0]
   19164:	6023      	str	r3, [r4, #0]
   19166:	b002      	add	sp, #8
   19168:	bd70      	pop	{r4, r5, r6, pc}
   1916a:	bf00      	nop
   1916c:	20008e4c 	.word	0x20008e4c
   19170:	200004ec 	.word	0x200004ec

00019174 <_wcrtomb_r>:
   19174:	b570      	push	{r4, r5, r6, lr}
   19176:	4605      	mov	r5, r0
   19178:	b084      	sub	sp, #16
   1917a:	b15b      	cbz	r3, 19194 <_wcrtomb_r+0x20>
   1917c:	461c      	mov	r4, r3
   1917e:	b169      	cbz	r1, 1919c <_wcrtomb_r+0x28>
   19180:	4b0e      	ldr	r3, [pc, #56]	; (191bc <_wcrtomb_r+0x48>)
   19182:	4628      	mov	r0, r5
   19184:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   19188:	4623      	mov	r3, r4
   1918a:	47b0      	blx	r6
   1918c:	1c43      	adds	r3, r0, #1
   1918e:	d00f      	beq.n	191b0 <_wcrtomb_r+0x3c>
   19190:	b004      	add	sp, #16
   19192:	bd70      	pop	{r4, r5, r6, pc}
   19194:	f500 7482 	add.w	r4, r0, #260	; 0x104
   19198:	2900      	cmp	r1, #0
   1919a:	d1f1      	bne.n	19180 <_wcrtomb_r+0xc>
   1919c:	4a07      	ldr	r2, [pc, #28]	; (191bc <_wcrtomb_r+0x48>)
   1919e:	4623      	mov	r3, r4
   191a0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   191a4:	4628      	mov	r0, r5
   191a6:	460a      	mov	r2, r1
   191a8:	a901      	add	r1, sp, #4
   191aa:	47b0      	blx	r6
   191ac:	1c43      	adds	r3, r0, #1
   191ae:	d1ef      	bne.n	19190 <_wcrtomb_r+0x1c>
   191b0:	2200      	movs	r2, #0
   191b2:	238a      	movs	r3, #138	; 0x8a
   191b4:	6022      	str	r2, [r4, #0]
   191b6:	602b      	str	r3, [r5, #0]
   191b8:	b004      	add	sp, #16
   191ba:	bd70      	pop	{r4, r5, r6, pc}
   191bc:	20008e4c 	.word	0x20008e4c

000191c0 <_wcsrtombs_r>:
   191c0:	b510      	push	{r4, lr}
   191c2:	b082      	sub	sp, #8
   191c4:	9c04      	ldr	r4, [sp, #16]
   191c6:	e9cd 3400 	strd	r3, r4, [sp]
   191ca:	f04f 33ff 	mov.w	r3, #4294967295
   191ce:	f001 fd9f 	bl	1ad10 <_wcsnrtombs_r>
   191d2:	b002      	add	sp, #8
   191d4:	bd10      	pop	{r4, pc}
   191d6:	bf00      	nop

000191d8 <iswspace>:
   191d8:	2100      	movs	r1, #0
   191da:	f000 b801 	b.w	191e0 <iswspace_l>
   191de:	bf00      	nop

000191e0 <iswspace_l>:
   191e0:	b510      	push	{r4, lr}
   191e2:	f000 f8ab 	bl	1933c <_jp2uc_l>
   191e6:	4604      	mov	r4, r0
   191e8:	f001 fda4 	bl	1ad34 <category>
   191ec:	f1a0 031a 	sub.w	r3, r0, #26
   191f0:	b2db      	uxtb	r3, r3
   191f2:	2b02      	cmp	r3, #2
   191f4:	d906      	bls.n	19204 <iswspace_l+0x24>
   191f6:	f1a4 0009 	sub.w	r0, r4, #9
   191fa:	2804      	cmp	r0, #4
   191fc:	bf8c      	ite	hi
   191fe:	2000      	movhi	r0, #0
   19200:	2001      	movls	r0, #1
   19202:	bd10      	pop	{r4, pc}
   19204:	2001      	movs	r0, #1
   19206:	bd10      	pop	{r4, pc}

00019208 <__jp2uc>:
   19208:	2902      	cmp	r1, #2
   1920a:	d032      	beq.n	19272 <__jp2uc+0x6a>
   1920c:	2903      	cmp	r1, #3
   1920e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   19212:	bf1d      	ittte	ne
   19214:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   19218:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   1921c:	b2d2      	uxtbne	r2, r2
   1921e:	b2c2      	uxtbeq	r2, r0
   19220:	f103 0150 	add.w	r1, r3, #80	; 0x50
   19224:	b2c9      	uxtb	r1, r1
   19226:	291f      	cmp	r1, #31
   19228:	d806      	bhi.n	19238 <__jp2uc+0x30>
   1922a:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   1922e:	4288      	cmp	r0, r1
   19230:	d969      	bls.n	19306 <__jp2uc+0xfe>
   19232:	f04f 30ff 	mov.w	r0, #4294967295
   19236:	4770      	bx	lr
   19238:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1923c:	b2c9      	uxtb	r1, r1
   1923e:	2924      	cmp	r1, #36	; 0x24
   19240:	d80e      	bhi.n	19260 <__jp2uc+0x58>
   19242:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   19246:	4288      	cmp	r0, r1
   19248:	d8f3      	bhi.n	19232 <__jp2uc+0x2a>
   1924a:	3bd0      	subs	r3, #208	; 0xd0
   1924c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   19250:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   19254:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   19258:	4a30      	ldr	r2, [pc, #192]	; (1931c <__jp2uc+0x114>)
   1925a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1925e:	4770      	bx	lr
   19260:	3ba1      	subs	r3, #161	; 0xa1
   19262:	2b07      	cmp	r3, #7
   19264:	d8e5      	bhi.n	19232 <__jp2uc+0x2a>
   19266:	e8df f003 	tbb	[pc, r3]
   1926a:	3e48      	.short	0x3e48
   1926c:	25292e34 	.word	0x25292e34
   19270:	1921      	.short	0x1921
   19272:	b2c2      	uxtb	r2, r0
   19274:	2a9e      	cmp	r2, #158	; 0x9e
   19276:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1927a:	d90b      	bls.n	19294 <__jp2uc+0x8c>
   1927c:	3223      	adds	r2, #35	; 0x23
   1927e:	b2d2      	uxtb	r2, r2
   19280:	2380      	movs	r3, #128	; 0x80
   19282:	299f      	cmp	r1, #159	; 0x9f
   19284:	bf94      	ite	ls
   19286:	3970      	subls	r1, #112	; 0x70
   19288:	3150      	addhi	r1, #80	; 0x50
   1928a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1928e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   19292:	e7c5      	b.n	19220 <__jp2uc+0x18>
   19294:	3a7e      	subs	r2, #126	; 0x7e
   19296:	b2d2      	uxtb	r2, r2
   19298:	237f      	movs	r3, #127	; 0x7f
   1929a:	e7f2      	b.n	19282 <__jp2uc+0x7a>
   1929c:	2ac0      	cmp	r2, #192	; 0xc0
   1929e:	d8c8      	bhi.n	19232 <__jp2uc+0x2a>
   192a0:	4b1f      	ldr	r3, [pc, #124]	; (19320 <__jp2uc+0x118>)
   192a2:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   192a6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   192aa:	4770      	bx	lr
   192ac:	2af1      	cmp	r2, #241	; 0xf1
   192ae:	d8c0      	bhi.n	19232 <__jp2uc+0x2a>
   192b0:	4b1c      	ldr	r3, [pc, #112]	; (19324 <__jp2uc+0x11c>)
   192b2:	e019      	b.n	192e8 <__jp2uc+0xe0>
   192b4:	2ad8      	cmp	r2, #216	; 0xd8
   192b6:	d8bc      	bhi.n	19232 <__jp2uc+0x2a>
   192b8:	4b1b      	ldr	r3, [pc, #108]	; (19328 <__jp2uc+0x120>)
   192ba:	e015      	b.n	192e8 <__jp2uc+0xe0>
   192bc:	2af6      	cmp	r2, #246	; 0xf6
   192be:	d8b8      	bhi.n	19232 <__jp2uc+0x2a>
   192c0:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   192c4:	4770      	bx	lr
   192c6:	2af3      	cmp	r2, #243	; 0xf3
   192c8:	d8b3      	bhi.n	19232 <__jp2uc+0x2a>
   192ca:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   192ce:	3020      	adds	r0, #32
   192d0:	4770      	bx	lr
   192d2:	4b16      	ldr	r3, [pc, #88]	; (1932c <__jp2uc+0x124>)
   192d4:	4413      	add	r3, r2
   192d6:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   192da:	2b00      	cmp	r3, #0
   192dc:	d0a9      	beq.n	19232 <__jp2uc+0x2a>
   192de:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   192e2:	3060      	adds	r0, #96	; 0x60
   192e4:	4770      	bx	lr
   192e6:	4b12      	ldr	r3, [pc, #72]	; (19330 <__jp2uc+0x128>)
   192e8:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   192ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   192f0:	2800      	cmp	r0, #0
   192f2:	bf08      	it	eq
   192f4:	f04f 30ff 	moveq.w	r0, #4294967295
   192f8:	4770      	bx	lr
   192fa:	4b0e      	ldr	r3, [pc, #56]	; (19334 <__jp2uc+0x12c>)
   192fc:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   19300:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   19304:	4770      	bx	lr
   19306:	3bb0      	subs	r3, #176	; 0xb0
   19308:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   1930c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   19310:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   19314:	4a08      	ldr	r2, [pc, #32]	; (19338 <__jp2uc+0x130>)
   19316:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1931a:	4770      	bx	lr
   1931c:	200060c8 	.word	0x200060c8
   19320:	200013f0 	.word	0x200013f0
   19324:	2000134c 	.word	0x2000134c
   19328:	200012dc 	.word	0x200012dc
   1932c:	20001280 	.word	0x20001280
   19330:	200011c4 	.word	0x200011c4
   19334:	20001108 	.word	0x20001108
   19338:	20001430 	.word	0x20001430

0001933c <_jp2uc_l>:
   1933c:	b538      	push	{r3, r4, r5, lr}
   1933e:	4605      	mov	r5, r0
   19340:	b1b9      	cbz	r1, 19372 <_jp2uc_l+0x36>
   19342:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   19346:	4912      	ldr	r1, [pc, #72]	; (19390 <_jp2uc_l+0x54>)
   19348:	4620      	mov	r0, r4
   1934a:	f7f9 fbbd 	bl	12ac8 <strcmp>
   1934e:	b928      	cbnz	r0, 1935c <_jp2uc_l+0x20>
   19350:	4628      	mov	r0, r5
   19352:	2101      	movs	r1, #1
   19354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19358:	f7ff bf56 	b.w	19208 <__jp2uc>
   1935c:	490d      	ldr	r1, [pc, #52]	; (19394 <_jp2uc_l+0x58>)
   1935e:	4620      	mov	r0, r4
   19360:	f7f9 fbb2 	bl	12ac8 <strcmp>
   19364:	b938      	cbnz	r0, 19376 <_jp2uc_l+0x3a>
   19366:	4628      	mov	r0, r5
   19368:	2102      	movs	r1, #2
   1936a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1936e:	f7ff bf4b 	b.w	19208 <__jp2uc>
   19372:	4c09      	ldr	r4, [pc, #36]	; (19398 <_jp2uc_l+0x5c>)
   19374:	e7e7      	b.n	19346 <_jp2uc_l+0xa>
   19376:	4909      	ldr	r1, [pc, #36]	; (1939c <_jp2uc_l+0x60>)
   19378:	4620      	mov	r0, r4
   1937a:	f7f9 fba5 	bl	12ac8 <strcmp>
   1937e:	b928      	cbnz	r0, 1938c <_jp2uc_l+0x50>
   19380:	4628      	mov	r0, r5
   19382:	2103      	movs	r1, #3
   19384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19388:	f7ff bf3e 	b.w	19208 <__jp2uc>
   1938c:	4628      	mov	r0, r5
   1938e:	bd38      	pop	{r3, r4, r5, pc}
   19390:	200010ac 	.word	0x200010ac
   19394:	200010b0 	.word	0x200010b0
   19398:	20008f76 	.word	0x20008f76
   1939c:	200010b8 	.word	0x200010b8

000193a0 <fiprintf>:
   193a0:	b40e      	push	{r1, r2, r3}
   193a2:	b510      	push	{r4, lr}
   193a4:	b083      	sub	sp, #12
   193a6:	ab05      	add	r3, sp, #20
   193a8:	4c06      	ldr	r4, [pc, #24]	; (193c4 <fiprintf+0x24>)
   193aa:	f853 2b04 	ldr.w	r2, [r3], #4
   193ae:	9301      	str	r3, [sp, #4]
   193b0:	4601      	mov	r1, r0
   193b2:	6820      	ldr	r0, [r4, #0]
   193b4:	f000 f97c 	bl	196b0 <_vfiprintf_r>
   193b8:	b003      	add	sp, #12
   193ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   193be:	b003      	add	sp, #12
   193c0:	4770      	bx	lr
   193c2:	bf00      	nop
   193c4:	200093d4 	.word	0x200093d4

000193c8 <__ssprint_r>:
   193c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193cc:	6893      	ldr	r3, [r2, #8]
   193ce:	6817      	ldr	r7, [r2, #0]
   193d0:	b083      	sub	sp, #12
   193d2:	4692      	mov	sl, r2
   193d4:	2b00      	cmp	r3, #0
   193d6:	d070      	beq.n	194ba <__ssprint_r+0xf2>
   193d8:	4681      	mov	r9, r0
   193da:	688a      	ldr	r2, [r1, #8]
   193dc:	6808      	ldr	r0, [r1, #0]
   193de:	460c      	mov	r4, r1
   193e0:	3708      	adds	r7, #8
   193e2:	e043      	b.n	1946c <__ssprint_r+0xa4>
   193e4:	89a3      	ldrh	r3, [r4, #12]
   193e6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   193ea:	d02e      	beq.n	1944a <__ssprint_r+0x82>
   193ec:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   193f0:	eba0 0801 	sub.w	r8, r0, r1
   193f4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   193f8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   193fc:	f108 0001 	add.w	r0, r8, #1
   19400:	1076      	asrs	r6, r6, #1
   19402:	4428      	add	r0, r5
   19404:	42b0      	cmp	r0, r6
   19406:	4632      	mov	r2, r6
   19408:	bf84      	itt	hi
   1940a:	4606      	movhi	r6, r0
   1940c:	4632      	movhi	r2, r6
   1940e:	055b      	lsls	r3, r3, #21
   19410:	d537      	bpl.n	19482 <__ssprint_r+0xba>
   19412:	4611      	mov	r1, r2
   19414:	4648      	mov	r0, r9
   19416:	f7f7 fa1b 	bl	10850 <_malloc_r>
   1941a:	9001      	str	r0, [sp, #4]
   1941c:	2800      	cmp	r0, #0
   1941e:	d03a      	beq.n	19496 <__ssprint_r+0xce>
   19420:	4642      	mov	r2, r8
   19422:	6921      	ldr	r1, [r4, #16]
   19424:	f7f5 f8f6 	bl	e614 <memcpy>
   19428:	89a2      	ldrh	r2, [r4, #12]
   1942a:	9b01      	ldr	r3, [sp, #4]
   1942c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   19430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   19434:	81a2      	strh	r2, [r4, #12]
   19436:	eba6 0208 	sub.w	r2, r6, r8
   1943a:	eb03 0008 	add.w	r0, r3, r8
   1943e:	6166      	str	r6, [r4, #20]
   19440:	60a2      	str	r2, [r4, #8]
   19442:	6123      	str	r3, [r4, #16]
   19444:	6020      	str	r0, [r4, #0]
   19446:	462e      	mov	r6, r5
   19448:	46a8      	mov	r8, r5
   1944a:	4642      	mov	r2, r8
   1944c:	4659      	mov	r1, fp
   1944e:	f7f9 f8f3 	bl	12638 <memmove>
   19452:	f8da 3008 	ldr.w	r3, [sl, #8]
   19456:	68a2      	ldr	r2, [r4, #8]
   19458:	6820      	ldr	r0, [r4, #0]
   1945a:	1b92      	subs	r2, r2, r6
   1945c:	4440      	add	r0, r8
   1945e:	1b5b      	subs	r3, r3, r5
   19460:	60a2      	str	r2, [r4, #8]
   19462:	6020      	str	r0, [r4, #0]
   19464:	f8ca 3008 	str.w	r3, [sl, #8]
   19468:	b33b      	cbz	r3, 194ba <__ssprint_r+0xf2>
   1946a:	3708      	adds	r7, #8
   1946c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   19470:	2d00      	cmp	r5, #0
   19472:	d0fa      	beq.n	1946a <__ssprint_r+0xa2>
   19474:	42aa      	cmp	r2, r5
   19476:	4616      	mov	r6, r2
   19478:	4690      	mov	r8, r2
   1947a:	d9b3      	bls.n	193e4 <__ssprint_r+0x1c>
   1947c:	462e      	mov	r6, r5
   1947e:	46a8      	mov	r8, r5
   19480:	e7e3      	b.n	1944a <__ssprint_r+0x82>
   19482:	4648      	mov	r0, r9
   19484:	f7f7 fcac 	bl	10de0 <_realloc_r>
   19488:	4603      	mov	r3, r0
   1948a:	2800      	cmp	r0, #0
   1948c:	d1d3      	bne.n	19436 <__ssprint_r+0x6e>
   1948e:	6921      	ldr	r1, [r4, #16]
   19490:	4648      	mov	r0, r9
   19492:	f7f9 fe47 	bl	13124 <_free_r>
   19496:	89a3      	ldrh	r3, [r4, #12]
   19498:	220c      	movs	r2, #12
   1949a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1949e:	f8c9 2000 	str.w	r2, [r9]
   194a2:	f04f 30ff 	mov.w	r0, #4294967295
   194a6:	81a3      	strh	r3, [r4, #12]
   194a8:	2200      	movs	r2, #0
   194aa:	2300      	movs	r3, #0
   194ac:	f8ca 2008 	str.w	r2, [sl, #8]
   194b0:	f8ca 3004 	str.w	r3, [sl, #4]
   194b4:	b003      	add	sp, #12
   194b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194ba:	2000      	movs	r0, #0
   194bc:	2300      	movs	r3, #0
   194be:	f8ca 3004 	str.w	r3, [sl, #4]
   194c2:	b003      	add	sp, #12
   194c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000194c8 <_sungetc_r>:
   194c8:	b538      	push	{r3, r4, r5, lr}
   194ca:	1c4b      	adds	r3, r1, #1
   194cc:	d01a      	beq.n	19504 <_sungetc_r+0x3c>
   194ce:	8993      	ldrh	r3, [r2, #12]
   194d0:	4614      	mov	r4, r2
   194d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
   194d4:	f023 0320 	bic.w	r3, r3, #32
   194d8:	81a3      	strh	r3, [r4, #12]
   194da:	b2cd      	uxtb	r5, r1
   194dc:	b1aa      	cbz	r2, 1950a <_sungetc_r+0x42>
   194de:	6862      	ldr	r2, [r4, #4]
   194e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   194e2:	429a      	cmp	r2, r3
   194e4:	da09      	bge.n	194fa <_sungetc_r+0x32>
   194e6:	6823      	ldr	r3, [r4, #0]
   194e8:	1e5a      	subs	r2, r3, #1
   194ea:	6022      	str	r2, [r4, #0]
   194ec:	f803 5c01 	strb.w	r5, [r3, #-1]
   194f0:	6863      	ldr	r3, [r4, #4]
   194f2:	3301      	adds	r3, #1
   194f4:	6063      	str	r3, [r4, #4]
   194f6:	4628      	mov	r0, r5
   194f8:	bd38      	pop	{r3, r4, r5, pc}
   194fa:	4621      	mov	r1, r4
   194fc:	f001 fa58 	bl	1a9b0 <__submore>
   19500:	2800      	cmp	r0, #0
   19502:	d0f0      	beq.n	194e6 <_sungetc_r+0x1e>
   19504:	f04f 35ff 	mov.w	r5, #4294967295
   19508:	e7f5      	b.n	194f6 <_sungetc_r+0x2e>
   1950a:	6923      	ldr	r3, [r4, #16]
   1950c:	6822      	ldr	r2, [r4, #0]
   1950e:	b12b      	cbz	r3, 1951c <_sungetc_r+0x54>
   19510:	4293      	cmp	r3, r2
   19512:	d203      	bcs.n	1951c <_sungetc_r+0x54>
   19514:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   19518:	42ab      	cmp	r3, r5
   1951a:	d00f      	beq.n	1953c <_sungetc_r+0x74>
   1951c:	6861      	ldr	r1, [r4, #4]
   1951e:	63e1      	str	r1, [r4, #60]	; 0x3c
   19520:	4623      	mov	r3, r4
   19522:	63a2      	str	r2, [r4, #56]	; 0x38
   19524:	f104 0140 	add.w	r1, r4, #64	; 0x40
   19528:	2203      	movs	r2, #3
   1952a:	6362      	str	r2, [r4, #52]	; 0x34
   1952c:	6321      	str	r1, [r4, #48]	; 0x30
   1952e:	f803 5f42 	strb.w	r5, [r3, #66]!
   19532:	2201      	movs	r2, #1
   19534:	e9c4 3200 	strd	r3, r2, [r4]
   19538:	4628      	mov	r0, r5
   1953a:	bd38      	pop	{r3, r4, r5, pc}
   1953c:	6863      	ldr	r3, [r4, #4]
   1953e:	3a01      	subs	r2, #1
   19540:	3301      	adds	r3, #1
   19542:	e9c4 2300 	strd	r2, r3, [r4]
   19546:	e7d6      	b.n	194f6 <_sungetc_r+0x2e>

00019548 <__ssrefill_r>:
   19548:	b510      	push	{r4, lr}
   1954a:	460c      	mov	r4, r1
   1954c:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1954e:	b169      	cbz	r1, 1956c <__ssrefill_r+0x24>
   19550:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19554:	4299      	cmp	r1, r3
   19556:	d001      	beq.n	1955c <__ssrefill_r+0x14>
   19558:	f7f9 fde4 	bl	13124 <_free_r>
   1955c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1955e:	6063      	str	r3, [r4, #4]
   19560:	2000      	movs	r0, #0
   19562:	6320      	str	r0, [r4, #48]	; 0x30
   19564:	b113      	cbz	r3, 1956c <__ssrefill_r+0x24>
   19566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19568:	6023      	str	r3, [r4, #0]
   1956a:	bd10      	pop	{r4, pc}
   1956c:	89a3      	ldrh	r3, [r4, #12]
   1956e:	6921      	ldr	r1, [r4, #16]
   19570:	2200      	movs	r2, #0
   19572:	f043 0320 	orr.w	r3, r3, #32
   19576:	e9c4 1200 	strd	r1, r2, [r4]
   1957a:	81a3      	strh	r3, [r4, #12]
   1957c:	f04f 30ff 	mov.w	r0, #4294967295
   19580:	bd10      	pop	{r4, pc}
   19582:	bf00      	nop

00019584 <_sfread_r>:
   19584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19588:	b085      	sub	sp, #20
   1958a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1958e:	fb02 f303 	mul.w	r3, r2, r3
   19592:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   19594:	9301      	str	r3, [sp, #4]
   19596:	b3a3      	cbz	r3, 19602 <_sfread_r+0x7e>
   19598:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1959c:	9b01      	ldr	r3, [sp, #4]
   1959e:	4553      	cmp	r3, sl
   195a0:	468b      	mov	fp, r1
   195a2:	d946      	bls.n	19632 <_sfread_r+0xae>
   195a4:	46a0      	mov	r8, r4
   195a6:	9d01      	ldr	r5, [sp, #4]
   195a8:	f858 1b40 	ldr.w	r1, [r8], #64
   195ac:	4607      	mov	r7, r0
   195ae:	2600      	movs	r6, #0
   195b0:	4652      	mov	r2, sl
   195b2:	4658      	mov	r0, fp
   195b4:	f7f5 f82e 	bl	e614 <memcpy>
   195b8:	6823      	ldr	r3, [r4, #0]
   195ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
   195bc:	4453      	add	r3, sl
   195be:	46a9      	mov	r9, r5
   195c0:	e9c4 3600 	strd	r3, r6, [r4]
   195c4:	4611      	mov	r1, r2
   195c6:	4638      	mov	r0, r7
   195c8:	44d3      	add	fp, sl
   195ca:	eba5 050a 	sub.w	r5, r5, sl
   195ce:	b1e2      	cbz	r2, 1960a <_sfread_r+0x86>
   195d0:	4542      	cmp	r2, r8
   195d2:	d001      	beq.n	195d8 <_sfread_r+0x54>
   195d4:	f7f9 fda6 	bl	13124 <_free_r>
   195d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   195da:	6326      	str	r6, [r4, #48]	; 0x30
   195dc:	6063      	str	r3, [r4, #4]
   195de:	b1a3      	cbz	r3, 1960a <_sfread_r+0x86>
   195e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   195e2:	6021      	str	r1, [r4, #0]
   195e4:	42ab      	cmp	r3, r5
   195e6:	469a      	mov	sl, r3
   195e8:	d3e2      	bcc.n	195b0 <_sfread_r+0x2c>
   195ea:	9b02      	ldr	r3, [sp, #8]
   195ec:	9301      	str	r3, [sp, #4]
   195ee:	462a      	mov	r2, r5
   195f0:	4658      	mov	r0, fp
   195f2:	f7f5 f80f 	bl	e614 <memcpy>
   195f6:	e9d4 3200 	ldrd	r3, r2, [r4]
   195fa:	1b52      	subs	r2, r2, r5
   195fc:	442b      	add	r3, r5
   195fe:	e9c4 3200 	strd	r3, r2, [r4]
   19602:	9801      	ldr	r0, [sp, #4]
   19604:	b005      	add	sp, #20
   19606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1960a:	9a01      	ldr	r2, [sp, #4]
   1960c:	9b03      	ldr	r3, [sp, #12]
   1960e:	4452      	add	r2, sl
   19610:	eba2 0209 	sub.w	r2, r2, r9
   19614:	fbb2 f3f3 	udiv	r3, r2, r3
   19618:	9301      	str	r3, [sp, #4]
   1961a:	89a3      	ldrh	r3, [r4, #12]
   1961c:	6922      	ldr	r2, [r4, #16]
   1961e:	9801      	ldr	r0, [sp, #4]
   19620:	f043 0320 	orr.w	r3, r3, #32
   19624:	81a3      	strh	r3, [r4, #12]
   19626:	2300      	movs	r3, #0
   19628:	e9c4 2300 	strd	r2, r3, [r4]
   1962c:	b005      	add	sp, #20
   1962e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19632:	6821      	ldr	r1, [r4, #0]
   19634:	461d      	mov	r5, r3
   19636:	e7d8      	b.n	195ea <_sfread_r+0x66>

00019638 <__sprint_r.part.0>:
   19638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1963c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1963e:	049c      	lsls	r4, r3, #18
   19640:	4690      	mov	r8, r2
   19642:	d52d      	bpl.n	196a0 <__sprint_r.part.0+0x68>
   19644:	6893      	ldr	r3, [r2, #8]
   19646:	6812      	ldr	r2, [r2, #0]
   19648:	b343      	cbz	r3, 1969c <__sprint_r.part.0+0x64>
   1964a:	468b      	mov	fp, r1
   1964c:	4606      	mov	r6, r0
   1964e:	f102 0908 	add.w	r9, r2, #8
   19652:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   19656:	ea5f 079a 	movs.w	r7, sl, lsr #2
   1965a:	d015      	beq.n	19688 <__sprint_r.part.0+0x50>
   1965c:	3d04      	subs	r5, #4
   1965e:	2400      	movs	r4, #0
   19660:	e001      	b.n	19666 <__sprint_r.part.0+0x2e>
   19662:	42a7      	cmp	r7, r4
   19664:	d00e      	beq.n	19684 <__sprint_r.part.0+0x4c>
   19666:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1966a:	465a      	mov	r2, fp
   1966c:	4630      	mov	r0, r6
   1966e:	f001 fa97 	bl	1aba0 <_fputwc_r>
   19672:	1c43      	adds	r3, r0, #1
   19674:	f104 0401 	add.w	r4, r4, #1
   19678:	d1f3      	bne.n	19662 <__sprint_r.part.0+0x2a>
   1967a:	2300      	movs	r3, #0
   1967c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   19680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19684:	f8d8 3008 	ldr.w	r3, [r8, #8]
   19688:	f02a 0a03 	bic.w	sl, sl, #3
   1968c:	eba3 030a 	sub.w	r3, r3, sl
   19690:	f8c8 3008 	str.w	r3, [r8, #8]
   19694:	f109 0908 	add.w	r9, r9, #8
   19698:	2b00      	cmp	r3, #0
   1969a:	d1da      	bne.n	19652 <__sprint_r.part.0+0x1a>
   1969c:	2000      	movs	r0, #0
   1969e:	e7ec      	b.n	1967a <__sprint_r.part.0+0x42>
   196a0:	f001 f80c 	bl	1a6bc <__sfvwrite_r>
   196a4:	2300      	movs	r3, #0
   196a6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   196aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196ae:	bf00      	nop

000196b0 <_vfiprintf_r>:
   196b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196b4:	ed2d 8b02 	vpush	{d8}
   196b8:	b0c5      	sub	sp, #276	; 0x114
   196ba:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   196be:	4683      	mov	fp, r0
   196c0:	ee08 1a10 	vmov	s16, r1
   196c4:	4616      	mov	r6, r2
   196c6:	2100      	movs	r1, #0
   196c8:	2208      	movs	r2, #8
   196ca:	4650      	mov	r0, sl
   196cc:	461c      	mov	r4, r3
   196ce:	9307      	str	r3, [sp, #28]
   196d0:	f7f9 f82e 	bl	12730 <memset>
   196d4:	f1bb 0f00 	cmp.w	fp, #0
   196d8:	d004      	beq.n	196e4 <_vfiprintf_r+0x34>
   196da:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   196de:	2b00      	cmp	r3, #0
   196e0:	f000 86a0 	beq.w	1a424 <_vfiprintf_r+0xd74>
   196e4:	ee18 2a10 	vmov	r2, s16
   196e8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   196ea:	07db      	lsls	r3, r3, #31
   196ec:	f140 8513 	bpl.w	1a116 <_vfiprintf_r+0xa66>
   196f0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   196f4:	b28a      	uxth	r2, r1
   196f6:	0495      	lsls	r5, r2, #18
   196f8:	d40b      	bmi.n	19712 <_vfiprintf_r+0x62>
   196fa:	ee18 3a10 	vmov	r3, s16
   196fe:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   19702:	8199      	strh	r1, [r3, #12]
   19704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   19706:	b28a      	uxth	r2, r1
   19708:	ee18 1a10 	vmov	r1, s16
   1970c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   19710:	664b      	str	r3, [r1, #100]	; 0x64
   19712:	0710      	lsls	r0, r2, #28
   19714:	f140 8105 	bpl.w	19922 <_vfiprintf_r+0x272>
   19718:	ee18 3a10 	vmov	r3, s16
   1971c:	691b      	ldr	r3, [r3, #16]
   1971e:	2b00      	cmp	r3, #0
   19720:	f000 80ff 	beq.w	19922 <_vfiprintf_r+0x272>
   19724:	f002 031a 	and.w	r3, r2, #26
   19728:	2b0a      	cmp	r3, #10
   1972a:	f000 810a 	beq.w	19942 <_vfiprintf_r+0x292>
   1972e:	2300      	movs	r3, #0
   19730:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   19734:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   19738:	aa1b      	add	r2, sp, #108	; 0x6c
   1973a:	930c      	str	r3, [sp, #48]	; 0x30
   1973c:	9218      	str	r2, [sp, #96]	; 0x60
   1973e:	4691      	mov	r9, r2
   19740:	930b      	str	r3, [sp, #44]	; 0x2c
   19742:	9305      	str	r3, [sp, #20]
   19744:	46b0      	mov	r8, r6
   19746:	4644      	mov	r4, r8
   19748:	4ba8      	ldr	r3, [pc, #672]	; (199ec <_vfiprintf_r+0x33c>)
   1974a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1974e:	f7f9 f90f 	bl	12970 <__locale_mb_cur_max>
   19752:	4622      	mov	r2, r4
   19754:	4603      	mov	r3, r0
   19756:	a912      	add	r1, sp, #72	; 0x48
   19758:	f8cd a000 	str.w	sl, [sp]
   1975c:	4658      	mov	r0, fp
   1975e:	47a8      	blx	r5
   19760:	2800      	cmp	r0, #0
   19762:	f000 8145 	beq.w	199f0 <_vfiprintf_r+0x340>
   19766:	f2c0 8139 	blt.w	199dc <_vfiprintf_r+0x32c>
   1976a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1976c:	2a25      	cmp	r2, #37	; 0x25
   1976e:	4603      	mov	r3, r0
   19770:	d001      	beq.n	19776 <_vfiprintf_r+0xc6>
   19772:	441c      	add	r4, r3
   19774:	e7e8      	b.n	19748 <_vfiprintf_r+0x98>
   19776:	ebb4 0608 	subs.w	r6, r4, r8
   1977a:	4605      	mov	r5, r0
   1977c:	f040 813c 	bne.w	199f8 <_vfiprintf_r+0x348>
   19780:	2300      	movs	r3, #0
   19782:	7861      	ldrb	r1, [r4, #1]
   19784:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19788:	f104 0801 	add.w	r8, r4, #1
   1978c:	9306      	str	r3, [sp, #24]
   1978e:	f04f 37ff 	mov.w	r7, #4294967295
   19792:	461e      	mov	r6, r3
   19794:	242b      	movs	r4, #43	; 0x2b
   19796:	f108 0801 	add.w	r8, r8, #1
   1979a:	f1a1 0320 	sub.w	r3, r1, #32
   1979e:	2b5a      	cmp	r3, #90	; 0x5a
   197a0:	f200 8178 	bhi.w	19a94 <_vfiprintf_r+0x3e4>
   197a4:	e8df f013 	tbh	[pc, r3, lsl #1]
   197a8:	017602b5 	.word	0x017602b5
   197ac:	02b00176 	.word	0x02b00176
   197b0:	01760176 	.word	0x01760176
   197b4:	006a0176 	.word	0x006a0176
   197b8:	01760176 	.word	0x01760176
   197bc:	028d027d 	.word	0x028d027d
   197c0:	02880176 	.word	0x02880176
   197c4:	01760297 	.word	0x01760297
   197c8:	005b0292 	.word	0x005b0292
   197cc:	005b005b 	.word	0x005b005b
   197d0:	005b005b 	.word	0x005b005b
   197d4:	005b005b 	.word	0x005b005b
   197d8:	005b005b 	.word	0x005b005b
   197dc:	01760176 	.word	0x01760176
   197e0:	01760176 	.word	0x01760176
   197e4:	01760176 	.word	0x01760176
   197e8:	01760176 	.word	0x01760176
   197ec:	025c0176 	.word	0x025c0176
   197f0:	01760084 	.word	0x01760084
   197f4:	01760176 	.word	0x01760176
   197f8:	01760176 	.word	0x01760176
   197fc:	01760176 	.word	0x01760176
   19800:	01760176 	.word	0x01760176
   19804:	00e80176 	.word	0x00e80176
   19808:	01760176 	.word	0x01760176
   1980c:	02330176 	.word	0x02330176
   19810:	02da0176 	.word	0x02da0176
   19814:	01760176 	.word	0x01760176
   19818:	0176058b 	.word	0x0176058b
   1981c:	01760176 	.word	0x01760176
   19820:	01760176 	.word	0x01760176
   19824:	01760176 	.word	0x01760176
   19828:	01760176 	.word	0x01760176
   1982c:	025c0176 	.word	0x025c0176
   19830:	01760086 	.word	0x01760086
   19834:	01760176 	.word	0x01760176
   19838:	008602cd 	.word	0x008602cd
   1983c:	0176007f 	.word	0x0176007f
   19840:	017602c0 	.word	0x017602c0
   19844:	00ea02fd 	.word	0x00ea02fd
   19848:	007f02ed 	.word	0x007f02ed
   1984c:	02330176 	.word	0x02330176
   19850:	0569007c 	.word	0x0569007c
   19854:	01760176 	.word	0x01760176
   19858:	0176056b 	.word	0x0176056b
   1985c:	007c      	.short	0x007c
   1985e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19862:	2200      	movs	r2, #0
   19864:	f818 1b01 	ldrb.w	r1, [r8], #1
   19868:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1986c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   19870:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19874:	2b09      	cmp	r3, #9
   19876:	d9f5      	bls.n	19864 <_vfiprintf_r+0x1b4>
   19878:	9206      	str	r2, [sp, #24]
   1987a:	e78e      	b.n	1979a <_vfiprintf_r+0xea>
   1987c:	4658      	mov	r0, fp
   1987e:	f7fe fa7d 	bl	17d7c <_localeconv_r>
   19882:	6843      	ldr	r3, [r0, #4]
   19884:	930d      	str	r3, [sp, #52]	; 0x34
   19886:	4618      	mov	r0, r3
   19888:	f7f9 fb3a 	bl	12f00 <strlen>
   1988c:	900e      	str	r0, [sp, #56]	; 0x38
   1988e:	4605      	mov	r5, r0
   19890:	4658      	mov	r0, fp
   19892:	f7fe fa73 	bl	17d7c <_localeconv_r>
   19896:	6883      	ldr	r3, [r0, #8]
   19898:	930b      	str	r3, [sp, #44]	; 0x2c
   1989a:	2d00      	cmp	r5, #0
   1989c:	f040 84d6 	bne.w	1a24c <_vfiprintf_r+0xb9c>
   198a0:	f898 1000 	ldrb.w	r1, [r8]
   198a4:	e777      	b.n	19796 <_vfiprintf_r+0xe6>
   198a6:	f898 1000 	ldrb.w	r1, [r8]
   198aa:	f046 0620 	orr.w	r6, r6, #32
   198ae:	e772      	b.n	19796 <_vfiprintf_r+0xe6>
   198b0:	f046 0610 	orr.w	r6, r6, #16
   198b4:	06b4      	lsls	r4, r6, #26
   198b6:	f140 818e 	bpl.w	19bd6 <_vfiprintf_r+0x526>
   198ba:	9b07      	ldr	r3, [sp, #28]
   198bc:	3307      	adds	r3, #7
   198be:	f023 0307 	bic.w	r3, r3, #7
   198c2:	461a      	mov	r2, r3
   198c4:	6859      	ldr	r1, [r3, #4]
   198c6:	f852 3b08 	ldr.w	r3, [r2], #8
   198ca:	9207      	str	r2, [sp, #28]
   198cc:	460a      	mov	r2, r1
   198ce:	2900      	cmp	r1, #0
   198d0:	f2c0 8470 	blt.w	1a1b4 <_vfiprintf_r+0xb04>
   198d4:	1c79      	adds	r1, r7, #1
   198d6:	f000 85a2 	beq.w	1a41e <_vfiprintf_r+0xd6e>
   198da:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   198de:	9103      	str	r1, [sp, #12]
   198e0:	ea53 0102 	orrs.w	r1, r3, r2
   198e4:	f000 843f 	beq.w	1a166 <_vfiprintf_r+0xab6>
   198e8:	2b0a      	cmp	r3, #10
   198ea:	f172 0100 	sbcs.w	r1, r2, #0
   198ee:	f080 8541 	bcs.w	1a374 <_vfiprintf_r+0xcc4>
   198f2:	3330      	adds	r3, #48	; 0x30
   198f4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   198f8:	9e03      	ldr	r6, [sp, #12]
   198fa:	2301      	movs	r3, #1
   198fc:	9304      	str	r3, [sp, #16]
   198fe:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   19902:	9b04      	ldr	r3, [sp, #16]
   19904:	42bb      	cmp	r3, r7
   19906:	bfb8      	it	lt
   19908:	463b      	movlt	r3, r7
   1990a:	9303      	str	r3, [sp, #12]
   1990c:	2300      	movs	r3, #0
   1990e:	9308      	str	r3, [sp, #32]
   19910:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   19914:	2b00      	cmp	r3, #0
   19916:	f000 80cb 	beq.w	19ab0 <_vfiprintf_r+0x400>
   1991a:	9b03      	ldr	r3, [sp, #12]
   1991c:	3301      	adds	r3, #1
   1991e:	9303      	str	r3, [sp, #12]
   19920:	e0c6      	b.n	19ab0 <_vfiprintf_r+0x400>
   19922:	ee18 1a10 	vmov	r1, s16
   19926:	4658      	mov	r0, fp
   19928:	ee18 5a10 	vmov	r5, s16
   1992c:	f001 f87c 	bl	1aa28 <__swsetup_r>
   19930:	2800      	cmp	r0, #0
   19932:	f040 8652 	bne.w	1a5da <_vfiprintf_r+0xf2a>
   19936:	89aa      	ldrh	r2, [r5, #12]
   19938:	f002 031a 	and.w	r3, r2, #26
   1993c:	2b0a      	cmp	r3, #10
   1993e:	f47f aef6 	bne.w	1972e <_vfiprintf_r+0x7e>
   19942:	ee18 1a10 	vmov	r1, s16
   19946:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1994a:	2b00      	cmp	r3, #0
   1994c:	f6ff aeef 	blt.w	1972e <_vfiprintf_r+0x7e>
   19950:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   19952:	07db      	lsls	r3, r3, #31
   19954:	d402      	bmi.n	1995c <_vfiprintf_r+0x2ac>
   19956:	0597      	lsls	r7, r2, #22
   19958:	f140 8612 	bpl.w	1a580 <_vfiprintf_r+0xed0>
   1995c:	ee18 1a10 	vmov	r1, s16
   19960:	4623      	mov	r3, r4
   19962:	4632      	mov	r2, r6
   19964:	4658      	mov	r0, fp
   19966:	f000 fe69 	bl	1a63c <__sbprintf>
   1996a:	9005      	str	r0, [sp, #20]
   1996c:	9805      	ldr	r0, [sp, #20]
   1996e:	b045      	add	sp, #276	; 0x114
   19970:	ecbd 8b02 	vpop	{d8}
   19974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19978:	f046 0610 	orr.w	r6, r6, #16
   1997c:	f016 0220 	ands.w	r2, r6, #32
   19980:	f000 8136 	beq.w	19bf0 <_vfiprintf_r+0x540>
   19984:	9b07      	ldr	r3, [sp, #28]
   19986:	3307      	adds	r3, #7
   19988:	f023 0307 	bic.w	r3, r3, #7
   1998c:	4619      	mov	r1, r3
   1998e:	685a      	ldr	r2, [r3, #4]
   19990:	f851 3b08 	ldr.w	r3, [r1], #8
   19994:	9107      	str	r1, [sp, #28]
   19996:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1999a:	9103      	str	r1, [sp, #12]
   1999c:	2100      	movs	r1, #0
   1999e:	2000      	movs	r0, #0
   199a0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   199a4:	1c78      	adds	r0, r7, #1
   199a6:	f000 8210 	beq.w	19dca <_vfiprintf_r+0x71a>
   199aa:	9803      	ldr	r0, [sp, #12]
   199ac:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   199b0:	ea53 0002 	orrs.w	r0, r3, r2
   199b4:	f040 8208 	bne.w	19dc8 <_vfiprintf_r+0x718>
   199b8:	2f00      	cmp	r7, #0
   199ba:	f040 8538 	bne.w	1a42e <_vfiprintf_r+0xd7e>
   199be:	2900      	cmp	r1, #0
   199c0:	f040 83d5 	bne.w	1a16e <_vfiprintf_r+0xabe>
   199c4:	9b03      	ldr	r3, [sp, #12]
   199c6:	f013 0301 	ands.w	r3, r3, #1
   199ca:	9304      	str	r3, [sp, #16]
   199cc:	f000 8411 	beq.w	1a1f2 <_vfiprintf_r+0xb42>
   199d0:	2330      	movs	r3, #48	; 0x30
   199d2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   199d6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   199da:	e792      	b.n	19902 <_vfiprintf_r+0x252>
   199dc:	2208      	movs	r2, #8
   199de:	2100      	movs	r1, #0
   199e0:	4650      	mov	r0, sl
   199e2:	f7f8 fea5 	bl	12730 <memset>
   199e6:	2301      	movs	r3, #1
   199e8:	441c      	add	r4, r3
   199ea:	e6ad      	b.n	19748 <_vfiprintf_r+0x98>
   199ec:	20008e4c 	.word	0x20008e4c
   199f0:	ebb4 0608 	subs.w	r6, r4, r8
   199f4:	4605      	mov	r5, r0
   199f6:	d01b      	beq.n	19a30 <_vfiprintf_r+0x380>
   199f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   199fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   199fc:	3301      	adds	r3, #1
   199fe:	4432      	add	r2, r6
   19a00:	2b07      	cmp	r3, #7
   19a02:	e9c9 8600 	strd	r8, r6, [r9]
   19a06:	921a      	str	r2, [sp, #104]	; 0x68
   19a08:	9319      	str	r3, [sp, #100]	; 0x64
   19a0a:	dd1c      	ble.n	19a46 <_vfiprintf_r+0x396>
   19a0c:	2a00      	cmp	r2, #0
   19a0e:	f000 83a6 	beq.w	1a15e <_vfiprintf_r+0xaae>
   19a12:	ee18 1a10 	vmov	r1, s16
   19a16:	aa18      	add	r2, sp, #96	; 0x60
   19a18:	4658      	mov	r0, fp
   19a1a:	f7ff fe0d 	bl	19638 <__sprint_r.part.0>
   19a1e:	bb20      	cbnz	r0, 19a6a <_vfiprintf_r+0x3ba>
   19a20:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19a24:	9b05      	ldr	r3, [sp, #20]
   19a26:	4433      	add	r3, r6
   19a28:	9305      	str	r3, [sp, #20]
   19a2a:	2d00      	cmp	r5, #0
   19a2c:	f47f aea8 	bne.w	19780 <_vfiprintf_r+0xd0>
   19a30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19a32:	2b00      	cmp	r3, #0
   19a34:	f040 85c1 	bne.w	1a5ba <_vfiprintf_r+0xf0a>
   19a38:	ee18 3a10 	vmov	r3, s16
   19a3c:	2200      	movs	r2, #0
   19a3e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   19a42:	9219      	str	r2, [sp, #100]	; 0x64
   19a44:	e015      	b.n	19a72 <_vfiprintf_r+0x3c2>
   19a46:	f109 0908 	add.w	r9, r9, #8
   19a4a:	e7eb      	b.n	19a24 <_vfiprintf_r+0x374>
   19a4c:	ee18 1a10 	vmov	r1, s16
   19a50:	aa18      	add	r2, sp, #96	; 0x60
   19a52:	4658      	mov	r0, fp
   19a54:	f7ff fdf0 	bl	19638 <__sprint_r.part.0>
   19a58:	2800      	cmp	r0, #0
   19a5a:	f000 80a6 	beq.w	19baa <_vfiprintf_r+0x4fa>
   19a5e:	9b08      	ldr	r3, [sp, #32]
   19a60:	b11b      	cbz	r3, 19a6a <_vfiprintf_r+0x3ba>
   19a62:	9908      	ldr	r1, [sp, #32]
   19a64:	4658      	mov	r0, fp
   19a66:	f7f9 fb5d 	bl	13124 <_free_r>
   19a6a:	ee18 3a10 	vmov	r3, s16
   19a6e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   19a72:	ee18 2a10 	vmov	r2, s16
   19a76:	6e52      	ldr	r2, [r2, #100]	; 0x64
   19a78:	f012 0f01 	tst.w	r2, #1
   19a7c:	b29a      	uxth	r2, r3
   19a7e:	f000 80a0 	beq.w	19bc2 <_vfiprintf_r+0x512>
   19a82:	0650      	lsls	r0, r2, #25
   19a84:	f100 85b2 	bmi.w	1a5ec <_vfiprintf_r+0xf3c>
   19a88:	9805      	ldr	r0, [sp, #20]
   19a8a:	b045      	add	sp, #276	; 0x114
   19a8c:	ecbd 8b02 	vpop	{d8}
   19a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a94:	2900      	cmp	r1, #0
   19a96:	d0cb      	beq.n	19a30 <_vfiprintf_r+0x380>
   19a98:	2300      	movs	r3, #0
   19a9a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19a9e:	2301      	movs	r3, #1
   19aa0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   19aa4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   19aa8:	ac2b      	add	r4, sp, #172	; 0xac
   19aaa:	2300      	movs	r3, #0
   19aac:	9308      	str	r3, [sp, #32]
   19aae:	461f      	mov	r7, r3
   19ab0:	f016 0302 	ands.w	r3, r6, #2
   19ab4:	9309      	str	r3, [sp, #36]	; 0x24
   19ab6:	d002      	beq.n	19abe <_vfiprintf_r+0x40e>
   19ab8:	9b03      	ldr	r3, [sp, #12]
   19aba:	3302      	adds	r3, #2
   19abc:	9303      	str	r3, [sp, #12]
   19abe:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   19ac2:	930a      	str	r3, [sp, #40]	; 0x28
   19ac4:	d105      	bne.n	19ad2 <_vfiprintf_r+0x422>
   19ac6:	9b06      	ldr	r3, [sp, #24]
   19ac8:	9a03      	ldr	r2, [sp, #12]
   19aca:	1a9d      	subs	r5, r3, r2
   19acc:	2d00      	cmp	r5, #0
   19ace:	f300 827b 	bgt.w	19fc8 <_vfiprintf_r+0x918>
   19ad2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19ad6:	1c41      	adds	r1, r0, #1
   19ad8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   19adc:	b182      	cbz	r2, 19b00 <_vfiprintf_r+0x450>
   19ade:	2201      	movs	r2, #1
   19ae0:	3301      	adds	r3, #1
   19ae2:	f8c9 2004 	str.w	r2, [r9, #4]
   19ae6:	2907      	cmp	r1, #7
   19ae8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   19aec:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19af0:	f8c9 2000 	str.w	r2, [r9]
   19af4:	f300 824a 	bgt.w	19f8c <_vfiprintf_r+0x8dc>
   19af8:	4608      	mov	r0, r1
   19afa:	f109 0908 	add.w	r9, r9, #8
   19afe:	3101      	adds	r1, #1
   19b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19b02:	b1e2      	cbz	r2, 19b3e <_vfiprintf_r+0x48e>
   19b04:	aa11      	add	r2, sp, #68	; 0x44
   19b06:	3302      	adds	r3, #2
   19b08:	f8c9 2000 	str.w	r2, [r9]
   19b0c:	2907      	cmp	r1, #7
   19b0e:	f04f 0202 	mov.w	r2, #2
   19b12:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19b16:	f8c9 2004 	str.w	r2, [r9, #4]
   19b1a:	f340 8250 	ble.w	19fbe <_vfiprintf_r+0x90e>
   19b1e:	2b00      	cmp	r3, #0
   19b20:	f000 8343 	beq.w	1a1aa <_vfiprintf_r+0xafa>
   19b24:	ee18 1a10 	vmov	r1, s16
   19b28:	aa18      	add	r2, sp, #96	; 0x60
   19b2a:	4658      	mov	r0, fp
   19b2c:	f7ff fd84 	bl	19638 <__sprint_r.part.0>
   19b30:	2800      	cmp	r0, #0
   19b32:	d194      	bne.n	19a5e <_vfiprintf_r+0x3ae>
   19b34:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19b38:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19b3c:	1c41      	adds	r1, r0, #1
   19b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19b40:	2a80      	cmp	r2, #128	; 0x80
   19b42:	f000 8184 	beq.w	19e4e <_vfiprintf_r+0x79e>
   19b46:	9a04      	ldr	r2, [sp, #16]
   19b48:	1abd      	subs	r5, r7, r2
   19b4a:	2d00      	cmp	r5, #0
   19b4c:	f300 81d7 	bgt.w	19efe <_vfiprintf_r+0x84e>
   19b50:	9a04      	ldr	r2, [sp, #16]
   19b52:	f8c9 4000 	str.w	r4, [r9]
   19b56:	4413      	add	r3, r2
   19b58:	2907      	cmp	r1, #7
   19b5a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19b5e:	f8c9 2004 	str.w	r2, [r9, #4]
   19b62:	f340 816e 	ble.w	19e42 <_vfiprintf_r+0x792>
   19b66:	2b00      	cmp	r3, #0
   19b68:	f000 8275 	beq.w	1a056 <_vfiprintf_r+0x9a6>
   19b6c:	ee18 1a10 	vmov	r1, s16
   19b70:	aa18      	add	r2, sp, #96	; 0x60
   19b72:	4658      	mov	r0, fp
   19b74:	f7ff fd60 	bl	19638 <__sprint_r.part.0>
   19b78:	2800      	cmp	r0, #0
   19b7a:	f47f af70 	bne.w	19a5e <_vfiprintf_r+0x3ae>
   19b7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19b80:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19b84:	0775      	lsls	r5, r6, #29
   19b86:	d505      	bpl.n	19b94 <_vfiprintf_r+0x4e4>
   19b88:	9a06      	ldr	r2, [sp, #24]
   19b8a:	9903      	ldr	r1, [sp, #12]
   19b8c:	1a54      	subs	r4, r2, r1
   19b8e:	2c00      	cmp	r4, #0
   19b90:	f300 826b 	bgt.w	1a06a <_vfiprintf_r+0x9ba>
   19b94:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   19b98:	9803      	ldr	r0, [sp, #12]
   19b9a:	4281      	cmp	r1, r0
   19b9c:	bfac      	ite	ge
   19b9e:	1852      	addge	r2, r2, r1
   19ba0:	1812      	addlt	r2, r2, r0
   19ba2:	9205      	str	r2, [sp, #20]
   19ba4:	2b00      	cmp	r3, #0
   19ba6:	f47f af51 	bne.w	19a4c <_vfiprintf_r+0x39c>
   19baa:	9908      	ldr	r1, [sp, #32]
   19bac:	2300      	movs	r3, #0
   19bae:	9319      	str	r3, [sp, #100]	; 0x64
   19bb0:	2900      	cmp	r1, #0
   19bb2:	f000 8149 	beq.w	19e48 <_vfiprintf_r+0x798>
   19bb6:	4658      	mov	r0, fp
   19bb8:	f7f9 fab4 	bl	13124 <_free_r>
   19bbc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19bc0:	e5c1      	b.n	19746 <_vfiprintf_r+0x96>
   19bc2:	059c      	lsls	r4, r3, #22
   19bc4:	f53f af5d 	bmi.w	19a82 <_vfiprintf_r+0x3d2>
   19bc8:	ee18 4a10 	vmov	r4, s16
   19bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19bce:	f7f8 ff6b 	bl	12aa8 <__retarget_lock_release_recursive>
   19bd2:	89a2      	ldrh	r2, [r4, #12]
   19bd4:	e755      	b.n	19a82 <_vfiprintf_r+0x3d2>
   19bd6:	06f0      	lsls	r0, r6, #27
   19bd8:	9a07      	ldr	r2, [sp, #28]
   19bda:	f100 831f 	bmi.w	1a21c <_vfiprintf_r+0xb6c>
   19bde:	0671      	lsls	r1, r6, #25
   19be0:	f140 8319 	bpl.w	1a216 <_vfiprintf_r+0xb66>
   19be4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   19be8:	9207      	str	r2, [sp, #28]
   19bea:	17da      	asrs	r2, r3, #31
   19bec:	4611      	mov	r1, r2
   19bee:	e66e      	b.n	198ce <_vfiprintf_r+0x21e>
   19bf0:	f016 0310 	ands.w	r3, r6, #16
   19bf4:	9907      	ldr	r1, [sp, #28]
   19bf6:	f040 8309 	bne.w	1a20c <_vfiprintf_r+0xb5c>
   19bfa:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   19bfe:	f000 8301 	beq.w	1a204 <_vfiprintf_r+0xb54>
   19c02:	461a      	mov	r2, r3
   19c04:	f851 3b04 	ldr.w	r3, [r1], #4
   19c08:	9107      	str	r1, [sp, #28]
   19c0a:	b29b      	uxth	r3, r3
   19c0c:	e6c3      	b.n	19996 <_vfiprintf_r+0x2e6>
   19c0e:	9b07      	ldr	r3, [sp, #28]
   19c10:	461a      	mov	r2, r3
   19c12:	2300      	movs	r3, #0
   19c14:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19c18:	4613      	mov	r3, r2
   19c1a:	f853 4b04 	ldr.w	r4, [r3], #4
   19c1e:	9303      	str	r3, [sp, #12]
   19c20:	2c00      	cmp	r4, #0
   19c22:	f000 8412 	beq.w	1a44a <_vfiprintf_r+0xd9a>
   19c26:	2953      	cmp	r1, #83	; 0x53
   19c28:	f000 8365 	beq.w	1a2f6 <_vfiprintf_r+0xc46>
   19c2c:	f016 0510 	ands.w	r5, r6, #16
   19c30:	f040 8361 	bne.w	1a2f6 <_vfiprintf_r+0xc46>
   19c34:	1c7b      	adds	r3, r7, #1
   19c36:	f000 84b3 	beq.w	1a5a0 <_vfiprintf_r+0xef0>
   19c3a:	463a      	mov	r2, r7
   19c3c:	4629      	mov	r1, r5
   19c3e:	4620      	mov	r0, r4
   19c40:	f7f9 f90e 	bl	12e60 <memchr>
   19c44:	9008      	str	r0, [sp, #32]
   19c46:	2800      	cmp	r0, #0
   19c48:	f000 849f 	beq.w	1a58a <_vfiprintf_r+0xeda>
   19c4c:	1b03      	subs	r3, r0, r4
   19c4e:	9a03      	ldr	r2, [sp, #12]
   19c50:	9304      	str	r3, [sp, #16]
   19c52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19c56:	462f      	mov	r7, r5
   19c58:	9207      	str	r2, [sp, #28]
   19c5a:	9303      	str	r3, [sp, #12]
   19c5c:	9508      	str	r5, [sp, #32]
   19c5e:	e657      	b.n	19910 <_vfiprintf_r+0x260>
   19c60:	2943      	cmp	r1, #67	; 0x43
   19c62:	d002      	beq.n	19c6a <_vfiprintf_r+0x5ba>
   19c64:	06f5      	lsls	r5, r6, #27
   19c66:	f140 832d 	bpl.w	1a2c4 <_vfiprintf_r+0xc14>
   19c6a:	9d07      	ldr	r5, [sp, #28]
   19c6c:	2208      	movs	r2, #8
   19c6e:	2100      	movs	r1, #0
   19c70:	a816      	add	r0, sp, #88	; 0x58
   19c72:	ac2b      	add	r4, sp, #172	; 0xac
   19c74:	f7f8 fd5c 	bl	12730 <memset>
   19c78:	ab16      	add	r3, sp, #88	; 0x58
   19c7a:	f855 2b04 	ldr.w	r2, [r5], #4
   19c7e:	4621      	mov	r1, r4
   19c80:	4658      	mov	r0, fp
   19c82:	f7ff fa77 	bl	19174 <_wcrtomb_r>
   19c86:	4603      	mov	r3, r0
   19c88:	3301      	adds	r3, #1
   19c8a:	9004      	str	r0, [sp, #16]
   19c8c:	f000 84b3 	beq.w	1a5f6 <_vfiprintf_r+0xf46>
   19c90:	9b04      	ldr	r3, [sp, #16]
   19c92:	9507      	str	r5, [sp, #28]
   19c94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19c98:	9303      	str	r3, [sp, #12]
   19c9a:	2300      	movs	r3, #0
   19c9c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19ca0:	e703      	b.n	19aaa <_vfiprintf_r+0x3fa>
   19ca2:	9b07      	ldr	r3, [sp, #28]
   19ca4:	f853 2b04 	ldr.w	r2, [r3], #4
   19ca8:	9206      	str	r2, [sp, #24]
   19caa:	2a00      	cmp	r2, #0
   19cac:	f280 829c 	bge.w	1a1e8 <_vfiprintf_r+0xb38>
   19cb0:	9a06      	ldr	r2, [sp, #24]
   19cb2:	4252      	negs	r2, r2
   19cb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19cb8:	f898 1000 	ldrb.w	r1, [r8]
   19cbc:	f046 0604 	orr.w	r6, r6, #4
   19cc0:	e569      	b.n	19796 <_vfiprintf_r+0xe6>
   19cc2:	f898 1000 	ldrb.w	r1, [r8]
   19cc6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   19cca:	e564      	b.n	19796 <_vfiprintf_r+0xe6>
   19ccc:	f898 1000 	ldrb.w	r1, [r8]
   19cd0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   19cd4:	e55f      	b.n	19796 <_vfiprintf_r+0xe6>
   19cd6:	4642      	mov	r2, r8
   19cd8:	f812 1b01 	ldrb.w	r1, [r2], #1
   19cdc:	292a      	cmp	r1, #42	; 0x2a
   19cde:	f000 8496 	beq.w	1a60e <_vfiprintf_r+0xf5e>
   19ce2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19ce6:	2b09      	cmp	r3, #9
   19ce8:	4690      	mov	r8, r2
   19cea:	f04f 0700 	mov.w	r7, #0
   19cee:	f63f ad54 	bhi.w	1979a <_vfiprintf_r+0xea>
   19cf2:	f818 1b01 	ldrb.w	r1, [r8], #1
   19cf6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   19cfa:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   19cfe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19d02:	2b09      	cmp	r3, #9
   19d04:	d9f5      	bls.n	19cf2 <_vfiprintf_r+0x642>
   19d06:	e548      	b.n	1979a <_vfiprintf_r+0xea>
   19d08:	f898 1000 	ldrb.w	r1, [r8]
   19d0c:	f046 0601 	orr.w	r6, r6, #1
   19d10:	e541      	b.n	19796 <_vfiprintf_r+0xe6>
   19d12:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   19d16:	2b00      	cmp	r3, #0
   19d18:	f47f adc2 	bne.w	198a0 <_vfiprintf_r+0x1f0>
   19d1c:	2320      	movs	r3, #32
   19d1e:	f898 1000 	ldrb.w	r1, [r8]
   19d22:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19d26:	e536      	b.n	19796 <_vfiprintf_r+0xe6>
   19d28:	f898 1000 	ldrb.w	r1, [r8]
   19d2c:	296c      	cmp	r1, #108	; 0x6c
   19d2e:	bf03      	ittte	eq
   19d30:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   19d34:	f046 0620 	orreq.w	r6, r6, #32
   19d38:	f108 0801 	addeq.w	r8, r8, #1
   19d3c:	f046 0610 	orrne.w	r6, r6, #16
   19d40:	e529      	b.n	19796 <_vfiprintf_r+0xe6>
   19d42:	f898 1000 	ldrb.w	r1, [r8]
   19d46:	2968      	cmp	r1, #104	; 0x68
   19d48:	bf03      	ittte	eq
   19d4a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   19d4e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   19d52:	f108 0801 	addeq.w	r8, r8, #1
   19d56:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   19d5a:	e51c      	b.n	19796 <_vfiprintf_r+0xe6>
   19d5c:	f046 0310 	orr.w	r3, r6, #16
   19d60:	9303      	str	r3, [sp, #12]
   19d62:	9b03      	ldr	r3, [sp, #12]
   19d64:	f013 0220 	ands.w	r2, r3, #32
   19d68:	f000 8206 	beq.w	1a178 <_vfiprintf_r+0xac8>
   19d6c:	9b07      	ldr	r3, [sp, #28]
   19d6e:	3307      	adds	r3, #7
   19d70:	f023 0307 	bic.w	r3, r3, #7
   19d74:	4619      	mov	r1, r3
   19d76:	685a      	ldr	r2, [r3, #4]
   19d78:	f851 3b08 	ldr.w	r3, [r1], #8
   19d7c:	9107      	str	r1, [sp, #28]
   19d7e:	2101      	movs	r1, #1
   19d80:	e60d      	b.n	1999e <_vfiprintf_r+0x2ee>
   19d82:	9a07      	ldr	r2, [sp, #28]
   19d84:	f046 0302 	orr.w	r3, r6, #2
   19d88:	9303      	str	r3, [sp, #12]
   19d8a:	f852 3b04 	ldr.w	r3, [r2], #4
   19d8e:	9207      	str	r2, [sp, #28]
   19d90:	f647 0230 	movw	r2, #30768	; 0x7830
   19d94:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   19d98:	4ab8      	ldr	r2, [pc, #736]	; (1a07c <_vfiprintf_r+0x9cc>)
   19d9a:	920c      	str	r2, [sp, #48]	; 0x30
   19d9c:	2102      	movs	r1, #2
   19d9e:	2200      	movs	r2, #0
   19da0:	e5fd      	b.n	1999e <_vfiprintf_r+0x2ee>
   19da2:	06b7      	lsls	r7, r6, #26
   19da4:	f100 8248 	bmi.w	1a238 <_vfiprintf_r+0xb88>
   19da8:	06f5      	lsls	r5, r6, #27
   19daa:	f100 8346 	bmi.w	1a43a <_vfiprintf_r+0xd8a>
   19dae:	0674      	lsls	r4, r6, #25
   19db0:	f100 83d5 	bmi.w	1a55e <_vfiprintf_r+0xeae>
   19db4:	05b0      	lsls	r0, r6, #22
   19db6:	f140 8340 	bpl.w	1a43a <_vfiprintf_r+0xd8a>
   19dba:	9b07      	ldr	r3, [sp, #28]
   19dbc:	9905      	ldr	r1, [sp, #20]
   19dbe:	f853 2b04 	ldr.w	r2, [r3], #4
   19dc2:	9307      	str	r3, [sp, #28]
   19dc4:	7011      	strb	r1, [r2, #0]
   19dc6:	e4be      	b.n	19746 <_vfiprintf_r+0x96>
   19dc8:	9603      	str	r6, [sp, #12]
   19dca:	2901      	cmp	r1, #1
   19dcc:	f43f ad8c 	beq.w	198e8 <_vfiprintf_r+0x238>
   19dd0:	2902      	cmp	r1, #2
   19dd2:	ac44      	add	r4, sp, #272	; 0x110
   19dd4:	d111      	bne.n	19dfa <_vfiprintf_r+0x74a>
   19dd6:	980c      	ldr	r0, [sp, #48]	; 0x30
   19dd8:	f003 010f 	and.w	r1, r3, #15
   19ddc:	091b      	lsrs	r3, r3, #4
   19dde:	5c41      	ldrb	r1, [r0, r1]
   19de0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   19de4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   19de8:	0912      	lsrs	r2, r2, #4
   19dea:	ea53 0102 	orrs.w	r1, r3, r2
   19dee:	d1f3      	bne.n	19dd8 <_vfiprintf_r+0x728>
   19df0:	9e03      	ldr	r6, [sp, #12]
   19df2:	ab44      	add	r3, sp, #272	; 0x110
   19df4:	1b1b      	subs	r3, r3, r4
   19df6:	9304      	str	r3, [sp, #16]
   19df8:	e583      	b.n	19902 <_vfiprintf_r+0x252>
   19dfa:	f003 0107 	and.w	r1, r3, #7
   19dfe:	08db      	lsrs	r3, r3, #3
   19e00:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   19e04:	08d2      	lsrs	r2, r2, #3
   19e06:	3130      	adds	r1, #48	; 0x30
   19e08:	ea53 0502 	orrs.w	r5, r3, r2
   19e0c:	4620      	mov	r0, r4
   19e0e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   19e12:	d1f2      	bne.n	19dfa <_vfiprintf_r+0x74a>
   19e14:	9e03      	ldr	r6, [sp, #12]
   19e16:	07f3      	lsls	r3, r6, #31
   19e18:	d5eb      	bpl.n	19df2 <_vfiprintf_r+0x742>
   19e1a:	2930      	cmp	r1, #48	; 0x30
   19e1c:	d0e8      	beq.n	19df0 <_vfiprintf_r+0x740>
   19e1e:	2330      	movs	r3, #48	; 0x30
   19e20:	3802      	subs	r0, #2
   19e22:	f804 3c01 	strb.w	r3, [r4, #-1]
   19e26:	ab44      	add	r3, sp, #272	; 0x110
   19e28:	1a1b      	subs	r3, r3, r0
   19e2a:	9e03      	ldr	r6, [sp, #12]
   19e2c:	9304      	str	r3, [sp, #16]
   19e2e:	4604      	mov	r4, r0
   19e30:	e567      	b.n	19902 <_vfiprintf_r+0x252>
   19e32:	9b04      	ldr	r3, [sp, #16]
   19e34:	941b      	str	r4, [sp, #108]	; 0x6c
   19e36:	2201      	movs	r2, #1
   19e38:	931c      	str	r3, [sp, #112]	; 0x70
   19e3a:	931a      	str	r3, [sp, #104]	; 0x68
   19e3c:	9219      	str	r2, [sp, #100]	; 0x64
   19e3e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19e42:	f109 0908 	add.w	r9, r9, #8
   19e46:	e69d      	b.n	19b84 <_vfiprintf_r+0x4d4>
   19e48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19e4c:	e47b      	b.n	19746 <_vfiprintf_r+0x96>
   19e4e:	9a06      	ldr	r2, [sp, #24]
   19e50:	9d03      	ldr	r5, [sp, #12]
   19e52:	1b55      	subs	r5, r2, r5
   19e54:	2d00      	cmp	r5, #0
   19e56:	f77f ae76 	ble.w	19b46 <_vfiprintf_r+0x496>
   19e5a:	2d10      	cmp	r5, #16
   19e5c:	f340 83bb 	ble.w	1a5d6 <_vfiprintf_r+0xf26>
   19e60:	9409      	str	r4, [sp, #36]	; 0x24
   19e62:	ee18 4a10 	vmov	r4, s16
   19e66:	e007      	b.n	19e78 <_vfiprintf_r+0x7c8>
   19e68:	f100 0c02 	add.w	ip, r0, #2
   19e6c:	f109 0908 	add.w	r9, r9, #8
   19e70:	4610      	mov	r0, r2
   19e72:	3d10      	subs	r5, #16
   19e74:	2d10      	cmp	r5, #16
   19e76:	dd1e      	ble.n	19eb6 <_vfiprintf_r+0x806>
   19e78:	4981      	ldr	r1, [pc, #516]	; (1a080 <_vfiprintf_r+0x9d0>)
   19e7a:	f8c9 1000 	str.w	r1, [r9]
   19e7e:	1c42      	adds	r2, r0, #1
   19e80:	3310      	adds	r3, #16
   19e82:	2110      	movs	r1, #16
   19e84:	2a07      	cmp	r2, #7
   19e86:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   19e8a:	f8c9 1004 	str.w	r1, [r9, #4]
   19e8e:	ddeb      	ble.n	19e68 <_vfiprintf_r+0x7b8>
   19e90:	aa18      	add	r2, sp, #96	; 0x60
   19e92:	2b00      	cmp	r3, #0
   19e94:	d074      	beq.n	19f80 <_vfiprintf_r+0x8d0>
   19e96:	4621      	mov	r1, r4
   19e98:	4658      	mov	r0, fp
   19e9a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19e9e:	f7ff fbcb 	bl	19638 <__sprint_r.part.0>
   19ea2:	2800      	cmp	r0, #0
   19ea4:	f47f addb 	bne.w	19a5e <_vfiprintf_r+0x3ae>
   19ea8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19eac:	3d10      	subs	r5, #16
   19eae:	2d10      	cmp	r5, #16
   19eb0:	f100 0c01 	add.w	ip, r0, #1
   19eb4:	dce0      	bgt.n	19e78 <_vfiprintf_r+0x7c8>
   19eb6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19eb8:	4a71      	ldr	r2, [pc, #452]	; (1a080 <_vfiprintf_r+0x9d0>)
   19eba:	f8c9 5004 	str.w	r5, [r9, #4]
   19ebe:	442b      	add	r3, r5
   19ec0:	f1bc 0f07 	cmp.w	ip, #7
   19ec4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   19ec8:	f8c9 2000 	str.w	r2, [r9]
   19ecc:	f340 8194 	ble.w	1a1f8 <_vfiprintf_r+0xb48>
   19ed0:	2b00      	cmp	r3, #0
   19ed2:	f000 831f 	beq.w	1a514 <_vfiprintf_r+0xe64>
   19ed6:	ee18 1a10 	vmov	r1, s16
   19eda:	aa18      	add	r2, sp, #96	; 0x60
   19edc:	4658      	mov	r0, fp
   19ede:	f7ff fbab 	bl	19638 <__sprint_r.part.0>
   19ee2:	2800      	cmp	r0, #0
   19ee4:	f47f adbb 	bne.w	19a5e <_vfiprintf_r+0x3ae>
   19ee8:	9a04      	ldr	r2, [sp, #16]
   19eea:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19eee:	1abd      	subs	r5, r7, r2
   19ef0:	2d00      	cmp	r5, #0
   19ef2:	f100 0101 	add.w	r1, r0, #1
   19ef6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19efa:	f77f ae29 	ble.w	19b50 <_vfiprintf_r+0x4a0>
   19efe:	2d10      	cmp	r5, #16
   19f00:	dd29      	ble.n	19f56 <_vfiprintf_r+0x8a6>
   19f02:	9409      	str	r4, [sp, #36]	; 0x24
   19f04:	2710      	movs	r7, #16
   19f06:	ee18 4a10 	vmov	r4, s16
   19f0a:	e007      	b.n	19f1c <_vfiprintf_r+0x86c>
   19f0c:	f100 0c02 	add.w	ip, r0, #2
   19f10:	f109 0908 	add.w	r9, r9, #8
   19f14:	4610      	mov	r0, r2
   19f16:	3d10      	subs	r5, #16
   19f18:	2d10      	cmp	r5, #16
   19f1a:	dd1a      	ble.n	19f52 <_vfiprintf_r+0x8a2>
   19f1c:	1c42      	adds	r2, r0, #1
   19f1e:	4958      	ldr	r1, [pc, #352]	; (1a080 <_vfiprintf_r+0x9d0>)
   19f20:	3310      	adds	r3, #16
   19f22:	2a07      	cmp	r2, #7
   19f24:	e9c9 1700 	strd	r1, r7, [r9]
   19f28:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   19f2c:	ddee      	ble.n	19f0c <_vfiprintf_r+0x85c>
   19f2e:	aa18      	add	r2, sp, #96	; 0x60
   19f30:	b303      	cbz	r3, 19f74 <_vfiprintf_r+0x8c4>
   19f32:	4621      	mov	r1, r4
   19f34:	4658      	mov	r0, fp
   19f36:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19f3a:	f7ff fb7d 	bl	19638 <__sprint_r.part.0>
   19f3e:	2800      	cmp	r0, #0
   19f40:	f47f ad8d 	bne.w	19a5e <_vfiprintf_r+0x3ae>
   19f44:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19f48:	3d10      	subs	r5, #16
   19f4a:	2d10      	cmp	r5, #16
   19f4c:	f100 0c01 	add.w	ip, r0, #1
   19f50:	dce4      	bgt.n	19f1c <_vfiprintf_r+0x86c>
   19f52:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19f54:	4661      	mov	r1, ip
   19f56:	4a4a      	ldr	r2, [pc, #296]	; (1a080 <_vfiprintf_r+0x9d0>)
   19f58:	f8c9 5004 	str.w	r5, [r9, #4]
   19f5c:	442b      	add	r3, r5
   19f5e:	2907      	cmp	r1, #7
   19f60:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19f64:	f8c9 2000 	str.w	r2, [r9]
   19f68:	f300 80e7 	bgt.w	1a13a <_vfiprintf_r+0xa8a>
   19f6c:	f109 0908 	add.w	r9, r9, #8
   19f70:	3101      	adds	r1, #1
   19f72:	e5ed      	b.n	19b50 <_vfiprintf_r+0x4a0>
   19f74:	f04f 0c01 	mov.w	ip, #1
   19f78:	4618      	mov	r0, r3
   19f7a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19f7e:	e7ca      	b.n	19f16 <_vfiprintf_r+0x866>
   19f80:	f04f 0c01 	mov.w	ip, #1
   19f84:	4618      	mov	r0, r3
   19f86:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19f8a:	e772      	b.n	19e72 <_vfiprintf_r+0x7c2>
   19f8c:	2b00      	cmp	r3, #0
   19f8e:	f000 8104 	beq.w	1a19a <_vfiprintf_r+0xaea>
   19f92:	ee18 1a10 	vmov	r1, s16
   19f96:	aa18      	add	r2, sp, #96	; 0x60
   19f98:	4658      	mov	r0, fp
   19f9a:	f7ff fb4d 	bl	19638 <__sprint_r.part.0>
   19f9e:	2800      	cmp	r0, #0
   19fa0:	f47f ad5d 	bne.w	19a5e <_vfiprintf_r+0x3ae>
   19fa4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19fa8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19fac:	1c41      	adds	r1, r0, #1
   19fae:	e5a7      	b.n	19b00 <_vfiprintf_r+0x450>
   19fb0:	2302      	movs	r3, #2
   19fb2:	aa11      	add	r2, sp, #68	; 0x44
   19fb4:	931c      	str	r3, [sp, #112]	; 0x70
   19fb6:	921b      	str	r2, [sp, #108]	; 0x6c
   19fb8:	2101      	movs	r1, #1
   19fba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19fbe:	4608      	mov	r0, r1
   19fc0:	f109 0908 	add.w	r9, r9, #8
   19fc4:	1c41      	adds	r1, r0, #1
   19fc6:	e5ba      	b.n	19b3e <_vfiprintf_r+0x48e>
   19fc8:	2d10      	cmp	r5, #16
   19fca:	f340 82e5 	ble.w	1a598 <_vfiprintf_r+0xee8>
   19fce:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   19fd2:	940f      	str	r4, [sp, #60]	; 0x3c
   19fd4:	4608      	mov	r0, r1
   19fd6:	ee18 4a10 	vmov	r4, s16
   19fda:	e007      	b.n	19fec <_vfiprintf_r+0x93c>
   19fdc:	f100 0c02 	add.w	ip, r0, #2
   19fe0:	f109 0908 	add.w	r9, r9, #8
   19fe4:	4610      	mov	r0, r2
   19fe6:	3d10      	subs	r5, #16
   19fe8:	2d10      	cmp	r5, #16
   19fea:	dd1d      	ble.n	1a028 <_vfiprintf_r+0x978>
   19fec:	4925      	ldr	r1, [pc, #148]	; (1a084 <_vfiprintf_r+0x9d4>)
   19fee:	f8c9 1000 	str.w	r1, [r9]
   19ff2:	1c42      	adds	r2, r0, #1
   19ff4:	3310      	adds	r3, #16
   19ff6:	2110      	movs	r1, #16
   19ff8:	2a07      	cmp	r2, #7
   19ffa:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   19ffe:	f8c9 1004 	str.w	r1, [r9, #4]
   1a002:	ddeb      	ble.n	19fdc <_vfiprintf_r+0x92c>
   1a004:	aa18      	add	r2, sp, #96	; 0x60
   1a006:	b303      	cbz	r3, 1a04a <_vfiprintf_r+0x99a>
   1a008:	4621      	mov	r1, r4
   1a00a:	4658      	mov	r0, fp
   1a00c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a010:	f7ff fb12 	bl	19638 <__sprint_r.part.0>
   1a014:	2800      	cmp	r0, #0
   1a016:	f47f ad22 	bne.w	19a5e <_vfiprintf_r+0x3ae>
   1a01a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1a01e:	3d10      	subs	r5, #16
   1a020:	2d10      	cmp	r5, #16
   1a022:	f100 0c01 	add.w	ip, r0, #1
   1a026:	dce1      	bgt.n	19fec <_vfiprintf_r+0x93c>
   1a028:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1a02a:	4660      	mov	r0, ip
   1a02c:	4a15      	ldr	r2, [pc, #84]	; (1a084 <_vfiprintf_r+0x9d4>)
   1a02e:	f8c9 5004 	str.w	r5, [r9, #4]
   1a032:	442b      	add	r3, r5
   1a034:	2807      	cmp	r0, #7
   1a036:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1a03a:	f8c9 2000 	str.w	r2, [r9]
   1a03e:	f300 80c1 	bgt.w	1a1c4 <_vfiprintf_r+0xb14>
   1a042:	f109 0908 	add.w	r9, r9, #8
   1a046:	1c41      	adds	r1, r0, #1
   1a048:	e546      	b.n	19ad8 <_vfiprintf_r+0x428>
   1a04a:	4618      	mov	r0, r3
   1a04c:	f04f 0c01 	mov.w	ip, #1
   1a050:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a054:	e7c7      	b.n	19fe6 <_vfiprintf_r+0x936>
   1a056:	0776      	lsls	r6, r6, #29
   1a058:	9319      	str	r3, [sp, #100]	; 0x64
   1a05a:	d553      	bpl.n	1a104 <_vfiprintf_r+0xa54>
   1a05c:	9a06      	ldr	r2, [sp, #24]
   1a05e:	9903      	ldr	r1, [sp, #12]
   1a060:	1a54      	subs	r4, r2, r1
   1a062:	2c00      	cmp	r4, #0
   1a064:	dd4e      	ble.n	1a104 <_vfiprintf_r+0xa54>
   1a066:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a06a:	2c10      	cmp	r4, #16
   1a06c:	f340 82b0 	ble.w	1a5d0 <_vfiprintf_r+0xf20>
   1a070:	9919      	ldr	r1, [sp, #100]	; 0x64
   1a072:	ee18 6a10 	vmov	r6, s16
   1a076:	2510      	movs	r5, #16
   1a078:	e00d      	b.n	1a096 <_vfiprintf_r+0x9e6>
   1a07a:	bf00      	nop
   1a07c:	200010d8 	.word	0x200010d8
   1a080:	20008930 	.word	0x20008930
   1a084:	20002b90 	.word	0x20002b90
   1a088:	1c88      	adds	r0, r1, #2
   1a08a:	f109 0908 	add.w	r9, r9, #8
   1a08e:	4611      	mov	r1, r2
   1a090:	3c10      	subs	r4, #16
   1a092:	2c10      	cmp	r4, #16
   1a094:	dd1a      	ble.n	1a0cc <_vfiprintf_r+0xa1c>
   1a096:	1c4a      	adds	r2, r1, #1
   1a098:	48b3      	ldr	r0, [pc, #716]	; (1a368 <_vfiprintf_r+0xcb8>)
   1a09a:	3310      	adds	r3, #16
   1a09c:	2a07      	cmp	r2, #7
   1a09e:	e9c9 0500 	strd	r0, r5, [r9]
   1a0a2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1a0a6:	ddef      	ble.n	1a088 <_vfiprintf_r+0x9d8>
   1a0a8:	aa18      	add	r2, sp, #96	; 0x60
   1a0aa:	b333      	cbz	r3, 1a0fa <_vfiprintf_r+0xa4a>
   1a0ac:	4631      	mov	r1, r6
   1a0ae:	4658      	mov	r0, fp
   1a0b0:	f7ff fac2 	bl	19638 <__sprint_r.part.0>
   1a0b4:	2800      	cmp	r0, #0
   1a0b6:	f47f acd2 	bne.w	19a5e <_vfiprintf_r+0x3ae>
   1a0ba:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1a0be:	3c10      	subs	r4, #16
   1a0c0:	2c10      	cmp	r4, #16
   1a0c2:	f101 0001 	add.w	r0, r1, #1
   1a0c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a0ca:	dce4      	bgt.n	1a096 <_vfiprintf_r+0x9e6>
   1a0cc:	4aa6      	ldr	r2, [pc, #664]	; (1a368 <_vfiprintf_r+0xcb8>)
   1a0ce:	f8c9 4004 	str.w	r4, [r9, #4]
   1a0d2:	4423      	add	r3, r4
   1a0d4:	2807      	cmp	r0, #7
   1a0d6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1a0da:	f8c9 2000 	str.w	r2, [r9]
   1a0de:	f77f ad59 	ble.w	19b94 <_vfiprintf_r+0x4e4>
   1a0e2:	b17b      	cbz	r3, 1a104 <_vfiprintf_r+0xa54>
   1a0e4:	ee18 1a10 	vmov	r1, s16
   1a0e8:	aa18      	add	r2, sp, #96	; 0x60
   1a0ea:	4658      	mov	r0, fp
   1a0ec:	f7ff faa4 	bl	19638 <__sprint_r.part.0>
   1a0f0:	2800      	cmp	r0, #0
   1a0f2:	f47f acb4 	bne.w	19a5e <_vfiprintf_r+0x3ae>
   1a0f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1a0f8:	e54c      	b.n	19b94 <_vfiprintf_r+0x4e4>
   1a0fa:	2001      	movs	r0, #1
   1a0fc:	4619      	mov	r1, r3
   1a0fe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a102:	e7c5      	b.n	1a090 <_vfiprintf_r+0x9e0>
   1a104:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   1a108:	9903      	ldr	r1, [sp, #12]
   1a10a:	428a      	cmp	r2, r1
   1a10c:	bfac      	ite	ge
   1a10e:	189b      	addge	r3, r3, r2
   1a110:	185b      	addlt	r3, r3, r1
   1a112:	9305      	str	r3, [sp, #20]
   1a114:	e549      	b.n	19baa <_vfiprintf_r+0x4fa>
   1a116:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1a11a:	058f      	lsls	r7, r1, #22
   1a11c:	ee18 3a10 	vmov	r3, s16
   1a120:	b28a      	uxth	r2, r1
   1a122:	f53f aae8 	bmi.w	196f6 <_vfiprintf_r+0x46>
   1a126:	ee18 5a10 	vmov	r5, s16
   1a12a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a12c:	f7f8 fcba 	bl	12aa4 <__retarget_lock_acquire_recursive>
   1a130:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   1a134:	b28a      	uxth	r2, r1
   1a136:	f7ff bade 	b.w	196f6 <_vfiprintf_r+0x46>
   1a13a:	2b00      	cmp	r3, #0
   1a13c:	f43f ae79 	beq.w	19e32 <_vfiprintf_r+0x782>
   1a140:	ee18 1a10 	vmov	r1, s16
   1a144:	aa18      	add	r2, sp, #96	; 0x60
   1a146:	4658      	mov	r0, fp
   1a148:	f7ff fa76 	bl	19638 <__sprint_r.part.0>
   1a14c:	2800      	cmp	r0, #0
   1a14e:	f47f ac86 	bne.w	19a5e <_vfiprintf_r+0x3ae>
   1a152:	9919      	ldr	r1, [sp, #100]	; 0x64
   1a154:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1a156:	3101      	adds	r1, #1
   1a158:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a15c:	e4f8      	b.n	19b50 <_vfiprintf_r+0x4a0>
   1a15e:	9219      	str	r2, [sp, #100]	; 0x64
   1a160:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a164:	e45e      	b.n	19a24 <_vfiprintf_r+0x374>
   1a166:	2f00      	cmp	r7, #0
   1a168:	f47f abc3 	bne.w	198f2 <_vfiprintf_r+0x242>
   1a16c:	9e03      	ldr	r6, [sp, #12]
   1a16e:	2700      	movs	r7, #0
   1a170:	9704      	str	r7, [sp, #16]
   1a172:	ac44      	add	r4, sp, #272	; 0x110
   1a174:	f7ff bbc5 	b.w	19902 <_vfiprintf_r+0x252>
   1a178:	9b03      	ldr	r3, [sp, #12]
   1a17a:	f013 0310 	ands.w	r3, r3, #16
   1a17e:	d154      	bne.n	1a22a <_vfiprintf_r+0xb7a>
   1a180:	9a03      	ldr	r2, [sp, #12]
   1a182:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   1a186:	f000 816b 	beq.w	1a460 <_vfiprintf_r+0xdb0>
   1a18a:	9907      	ldr	r1, [sp, #28]
   1a18c:	461a      	mov	r2, r3
   1a18e:	f851 3b04 	ldr.w	r3, [r1], #4
   1a192:	9107      	str	r1, [sp, #28]
   1a194:	b29b      	uxth	r3, r3
   1a196:	2101      	movs	r1, #1
   1a198:	e401      	b.n	1999e <_vfiprintf_r+0x2ee>
   1a19a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a19c:	2a00      	cmp	r2, #0
   1a19e:	d164      	bne.n	1a26a <_vfiprintf_r+0xbba>
   1a1a0:	4618      	mov	r0, r3
   1a1a2:	2101      	movs	r1, #1
   1a1a4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a1a8:	e4c9      	b.n	19b3e <_vfiprintf_r+0x48e>
   1a1aa:	2101      	movs	r1, #1
   1a1ac:	4618      	mov	r0, r3
   1a1ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a1b2:	e4c4      	b.n	19b3e <_vfiprintf_r+0x48e>
   1a1b4:	425b      	negs	r3, r3
   1a1b6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1a1ba:	9603      	str	r6, [sp, #12]
   1a1bc:	202d      	movs	r0, #45	; 0x2d
   1a1be:	2101      	movs	r1, #1
   1a1c0:	f7ff bbee 	b.w	199a0 <_vfiprintf_r+0x2f0>
   1a1c4:	2b00      	cmp	r3, #0
   1a1c6:	f000 8088 	beq.w	1a2da <_vfiprintf_r+0xc2a>
   1a1ca:	ee18 1a10 	vmov	r1, s16
   1a1ce:	aa18      	add	r2, sp, #96	; 0x60
   1a1d0:	4658      	mov	r0, fp
   1a1d2:	f7ff fa31 	bl	19638 <__sprint_r.part.0>
   1a1d6:	2800      	cmp	r0, #0
   1a1d8:	f47f ac41 	bne.w	19a5e <_vfiprintf_r+0x3ae>
   1a1dc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1a1e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a1e4:	1c41      	adds	r1, r0, #1
   1a1e6:	e477      	b.n	19ad8 <_vfiprintf_r+0x428>
   1a1e8:	f898 1000 	ldrb.w	r1, [r8]
   1a1ec:	9307      	str	r3, [sp, #28]
   1a1ee:	f7ff bad2 	b.w	19796 <_vfiprintf_r+0xe6>
   1a1f2:	ac44      	add	r4, sp, #272	; 0x110
   1a1f4:	f7ff bb85 	b.w	19902 <_vfiprintf_r+0x252>
   1a1f8:	f109 0908 	add.w	r9, r9, #8
   1a1fc:	f10c 0101 	add.w	r1, ip, #1
   1a200:	4660      	mov	r0, ip
   1a202:	e4a0      	b.n	19b46 <_vfiprintf_r+0x496>
   1a204:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1a208:	f040 8197 	bne.w	1a53a <_vfiprintf_r+0xe8a>
   1a20c:	f851 3b04 	ldr.w	r3, [r1], #4
   1a210:	9107      	str	r1, [sp, #28]
   1a212:	f7ff bbc0 	b.w	19996 <_vfiprintf_r+0x2e6>
   1a216:	05b3      	lsls	r3, r6, #22
   1a218:	f100 8188 	bmi.w	1a52c <_vfiprintf_r+0xe7c>
   1a21c:	f852 3b04 	ldr.w	r3, [r2], #4
   1a220:	9207      	str	r2, [sp, #28]
   1a222:	17da      	asrs	r2, r3, #31
   1a224:	4611      	mov	r1, r2
   1a226:	f7ff bb52 	b.w	198ce <_vfiprintf_r+0x21e>
   1a22a:	9907      	ldr	r1, [sp, #28]
   1a22c:	f851 3b04 	ldr.w	r3, [r1], #4
   1a230:	9107      	str	r1, [sp, #28]
   1a232:	2101      	movs	r1, #1
   1a234:	f7ff bbb3 	b.w	1999e <_vfiprintf_r+0x2ee>
   1a238:	9b07      	ldr	r3, [sp, #28]
   1a23a:	9805      	ldr	r0, [sp, #20]
   1a23c:	f853 1b04 	ldr.w	r1, [r3], #4
   1a240:	9307      	str	r3, [sp, #28]
   1a242:	17c2      	asrs	r2, r0, #31
   1a244:	e9c1 0200 	strd	r0, r2, [r1]
   1a248:	f7ff ba7d 	b.w	19746 <_vfiprintf_r+0x96>
   1a24c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a24e:	2b00      	cmp	r3, #0
   1a250:	f43f ab26 	beq.w	198a0 <_vfiprintf_r+0x1f0>
   1a254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a256:	781b      	ldrb	r3, [r3, #0]
   1a258:	2b00      	cmp	r3, #0
   1a25a:	f43f ab21 	beq.w	198a0 <_vfiprintf_r+0x1f0>
   1a25e:	f898 1000 	ldrb.w	r1, [r8]
   1a262:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   1a266:	f7ff ba96 	b.w	19796 <_vfiprintf_r+0xe6>
   1a26a:	2302      	movs	r3, #2
   1a26c:	aa11      	add	r2, sp, #68	; 0x44
   1a26e:	931c      	str	r3, [sp, #112]	; 0x70
   1a270:	921b      	str	r2, [sp, #108]	; 0x6c
   1a272:	2001      	movs	r0, #1
   1a274:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a278:	e6a2      	b.n	19fc0 <_vfiprintf_r+0x910>
   1a27a:	9603      	str	r6, [sp, #12]
   1a27c:	e571      	b.n	19d62 <_vfiprintf_r+0x6b2>
   1a27e:	4b3b      	ldr	r3, [pc, #236]	; (1a36c <_vfiprintf_r+0xcbc>)
   1a280:	930c      	str	r3, [sp, #48]	; 0x30
   1a282:	f016 0220 	ands.w	r2, r6, #32
   1a286:	d059      	beq.n	1a33c <_vfiprintf_r+0xc8c>
   1a288:	9b07      	ldr	r3, [sp, #28]
   1a28a:	3307      	adds	r3, #7
   1a28c:	f023 0307 	bic.w	r3, r3, #7
   1a290:	4618      	mov	r0, r3
   1a292:	685a      	ldr	r2, [r3, #4]
   1a294:	f850 3b08 	ldr.w	r3, [r0], #8
   1a298:	9007      	str	r0, [sp, #28]
   1a29a:	07f4      	lsls	r4, r6, #31
   1a29c:	d509      	bpl.n	1a2b2 <_vfiprintf_r+0xc02>
   1a29e:	ea53 0002 	orrs.w	r0, r3, r2
   1a2a2:	d006      	beq.n	1a2b2 <_vfiprintf_r+0xc02>
   1a2a4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   1a2a8:	2130      	movs	r1, #48	; 0x30
   1a2aa:	f046 0602 	orr.w	r6, r6, #2
   1a2ae:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   1a2b2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1a2b6:	9103      	str	r1, [sp, #12]
   1a2b8:	2102      	movs	r1, #2
   1a2ba:	f7ff bb70 	b.w	1999e <_vfiprintf_r+0x2ee>
   1a2be:	4b2c      	ldr	r3, [pc, #176]	; (1a370 <_vfiprintf_r+0xcc0>)
   1a2c0:	930c      	str	r3, [sp, #48]	; 0x30
   1a2c2:	e7de      	b.n	1a282 <_vfiprintf_r+0xbd2>
   1a2c4:	9b07      	ldr	r3, [sp, #28]
   1a2c6:	2101      	movs	r1, #1
   1a2c8:	f853 2b04 	ldr.w	r2, [r3], #4
   1a2cc:	9103      	str	r1, [sp, #12]
   1a2ce:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   1a2d2:	9307      	str	r3, [sp, #28]
   1a2d4:	9104      	str	r1, [sp, #16]
   1a2d6:	ac2b      	add	r4, sp, #172	; 0xac
   1a2d8:	e4df      	b.n	19c9a <_vfiprintf_r+0x5ea>
   1a2da:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1a2de:	2a00      	cmp	r2, #0
   1a2e0:	f040 8132 	bne.w	1a548 <_vfiprintf_r+0xe98>
   1a2e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a2e6:	2a00      	cmp	r2, #0
   1a2e8:	f47f ae62 	bne.w	19fb0 <_vfiprintf_r+0x900>
   1a2ec:	4618      	mov	r0, r3
   1a2ee:	2101      	movs	r1, #1
   1a2f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a2f4:	e427      	b.n	19b46 <_vfiprintf_r+0x496>
   1a2f6:	2100      	movs	r1, #0
   1a2f8:	2208      	movs	r2, #8
   1a2fa:	a816      	add	r0, sp, #88	; 0x58
   1a2fc:	9413      	str	r4, [sp, #76]	; 0x4c
   1a2fe:	f7f8 fa17 	bl	12730 <memset>
   1a302:	1c79      	adds	r1, r7, #1
   1a304:	f000 80bc 	beq.w	1a480 <_vfiprintf_r+0xdd0>
   1a308:	2500      	movs	r5, #0
   1a30a:	9407      	str	r4, [sp, #28]
   1a30c:	462c      	mov	r4, r5
   1a30e:	e00c      	b.n	1a32a <_vfiprintf_r+0xc7a>
   1a310:	a92b      	add	r1, sp, #172	; 0xac
   1a312:	4658      	mov	r0, fp
   1a314:	f7fe ff2e 	bl	19174 <_wcrtomb_r>
   1a318:	1c42      	adds	r2, r0, #1
   1a31a:	4420      	add	r0, r4
   1a31c:	f000 816b 	beq.w	1a5f6 <_vfiprintf_r+0xf46>
   1a320:	42b8      	cmp	r0, r7
   1a322:	dc08      	bgt.n	1a336 <_vfiprintf_r+0xc86>
   1a324:	f000 8170 	beq.w	1a608 <_vfiprintf_r+0xf58>
   1a328:	4604      	mov	r4, r0
   1a32a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a32c:	5952      	ldr	r2, [r2, r5]
   1a32e:	ab16      	add	r3, sp, #88	; 0x58
   1a330:	3504      	adds	r5, #4
   1a332:	2a00      	cmp	r2, #0
   1a334:	d1ec      	bne.n	1a310 <_vfiprintf_r+0xc60>
   1a336:	9404      	str	r4, [sp, #16]
   1a338:	9c07      	ldr	r4, [sp, #28]
   1a33a:	e0af      	b.n	1a49c <_vfiprintf_r+0xdec>
   1a33c:	f016 0310 	ands.w	r3, r6, #16
   1a340:	9807      	ldr	r0, [sp, #28]
   1a342:	d10c      	bne.n	1a35e <_vfiprintf_r+0xcae>
   1a344:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   1a348:	d005      	beq.n	1a356 <_vfiprintf_r+0xca6>
   1a34a:	461a      	mov	r2, r3
   1a34c:	f850 3b04 	ldr.w	r3, [r0], #4
   1a350:	9007      	str	r0, [sp, #28]
   1a352:	b29b      	uxth	r3, r3
   1a354:	e7a1      	b.n	1a29a <_vfiprintf_r+0xbea>
   1a356:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1a35a:	f040 80e1 	bne.w	1a520 <_vfiprintf_r+0xe70>
   1a35e:	f850 3b04 	ldr.w	r3, [r0], #4
   1a362:	9007      	str	r0, [sp, #28]
   1a364:	e799      	b.n	1a29a <_vfiprintf_r+0xbea>
   1a366:	bf00      	nop
   1a368:	20002b90 	.word	0x20002b90
   1a36c:	200010d8 	.word	0x200010d8
   1a370:	200010ec 	.word	0x200010ec
   1a374:	9903      	ldr	r1, [sp, #12]
   1a376:	9704      	str	r7, [sp, #16]
   1a378:	ac44      	add	r4, sp, #272	; 0x110
   1a37a:	469e      	mov	lr, r3
   1a37c:	ee08 ba90 	vmov	s17, fp
   1a380:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   1a384:	f04f 0c00 	mov.w	ip, #0
   1a388:	4623      	mov	r3, r4
   1a38a:	e006      	b.n	1a39a <_vfiprintf_r+0xcea>
   1a38c:	f1be 0f0a 	cmp.w	lr, #10
   1a390:	f172 0200 	sbcs.w	r2, r2, #0
   1a394:	d339      	bcc.n	1a40a <_vfiprintf_r+0xd5a>
   1a396:	46a6      	mov	lr, r4
   1a398:	462a      	mov	r2, r5
   1a39a:	49a6      	ldr	r1, [pc, #664]	; (1a634 <_vfiprintf_r+0xf84>)
   1a39c:	eb1e 0002 	adds.w	r0, lr, r2
   1a3a0:	f140 0000 	adc.w	r0, r0, #0
   1a3a4:	460f      	mov	r7, r1
   1a3a6:	fba1 1400 	umull	r1, r4, r1, r0
   1a3aa:	f024 0103 	bic.w	r1, r4, #3
   1a3ae:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   1a3b2:	1a40      	subs	r0, r0, r1
   1a3b4:	ebbe 0100 	subs.w	r1, lr, r0
   1a3b8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1a3bc:	f162 0400 	sbc.w	r4, r2, #0
   1a3c0:	fb05 f501 	mul.w	r5, r5, r1
   1a3c4:	fb07 5504 	mla	r5, r7, r4, r5
   1a3c8:	fba1 4107 	umull	r4, r1, r1, r7
   1a3cc:	440d      	add	r5, r1
   1a3ce:	2705      	movs	r7, #5
   1a3d0:	f004 0101 	and.w	r1, r4, #1
   1a3d4:	fba1 1b07 	umull	r1, fp, r1, r7
   1a3d8:	1809      	adds	r1, r1, r0
   1a3da:	0864      	lsrs	r4, r4, #1
   1a3dc:	3130      	adds	r1, #48	; 0x30
   1a3de:	f803 1c01 	strb.w	r1, [r3, #-1]
   1a3e2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   1a3e6:	f10c 0c01 	add.w	ip, ip, #1
   1a3ea:	3b01      	subs	r3, #1
   1a3ec:	086d      	lsrs	r5, r5, #1
   1a3ee:	2e00      	cmp	r6, #0
   1a3f0:	d0cc      	beq.n	1a38c <_vfiprintf_r+0xcdc>
   1a3f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a3f4:	7809      	ldrb	r1, [r1, #0]
   1a3f6:	4561      	cmp	r1, ip
   1a3f8:	d1c8      	bne.n	1a38c <_vfiprintf_r+0xcdc>
   1a3fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a3fe:	d0c5      	beq.n	1a38c <_vfiprintf_r+0xcdc>
   1a400:	f1be 0f0a 	cmp.w	lr, #10
   1a404:	f172 0200 	sbcs.w	r2, r2, #0
   1a408:	d26c      	bcs.n	1a4e4 <_vfiprintf_r+0xe34>
   1a40a:	461c      	mov	r4, r3
   1a40c:	ab44      	add	r3, sp, #272	; 0x110
   1a40e:	1b1b      	subs	r3, r3, r4
   1a410:	9f04      	ldr	r7, [sp, #16]
   1a412:	9e03      	ldr	r6, [sp, #12]
   1a414:	9304      	str	r3, [sp, #16]
   1a416:	ee18 ba90 	vmov	fp, s17
   1a41a:	f7ff ba72 	b.w	19902 <_vfiprintf_r+0x252>
   1a41e:	9603      	str	r6, [sp, #12]
   1a420:	f7ff ba62 	b.w	198e8 <_vfiprintf_r+0x238>
   1a424:	4658      	mov	r0, fp
   1a426:	f7f7 ff4b 	bl	122c0 <__sinit>
   1a42a:	f7ff b95b 	b.w	196e4 <_vfiprintf_r+0x34>
   1a42e:	2901      	cmp	r1, #1
   1a430:	9603      	str	r6, [sp, #12]
   1a432:	f47f accd 	bne.w	19dd0 <_vfiprintf_r+0x720>
   1a436:	f7ff ba5c 	b.w	198f2 <_vfiprintf_r+0x242>
   1a43a:	9b07      	ldr	r3, [sp, #28]
   1a43c:	9905      	ldr	r1, [sp, #20]
   1a43e:	f853 2b04 	ldr.w	r2, [r3], #4
   1a442:	6011      	str	r1, [r2, #0]
   1a444:	9307      	str	r3, [sp, #28]
   1a446:	f7ff b97e 	b.w	19746 <_vfiprintf_r+0x96>
   1a44a:	2f06      	cmp	r7, #6
   1a44c:	463b      	mov	r3, r7
   1a44e:	9a03      	ldr	r2, [sp, #12]
   1a450:	4c79      	ldr	r4, [pc, #484]	; (1a638 <_vfiprintf_r+0xf88>)
   1a452:	9207      	str	r2, [sp, #28]
   1a454:	bf28      	it	cs
   1a456:	2306      	movcs	r3, #6
   1a458:	9304      	str	r3, [sp, #16]
   1a45a:	9303      	str	r3, [sp, #12]
   1a45c:	f7ff bb25 	b.w	19aaa <_vfiprintf_r+0x3fa>
   1a460:	9b03      	ldr	r3, [sp, #12]
   1a462:	9907      	ldr	r1, [sp, #28]
   1a464:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   1a468:	bf14      	ite	ne
   1a46a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1a46e:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a472:	9107      	str	r1, [sp, #28]
   1a474:	bf1c      	itt	ne
   1a476:	4602      	movne	r2, r0
   1a478:	b2db      	uxtbne	r3, r3
   1a47a:	2101      	movs	r1, #1
   1a47c:	f7ff ba8f 	b.w	1999e <_vfiprintf_r+0x2ee>
   1a480:	ab16      	add	r3, sp, #88	; 0x58
   1a482:	9300      	str	r3, [sp, #0]
   1a484:	2300      	movs	r3, #0
   1a486:	4619      	mov	r1, r3
   1a488:	aa13      	add	r2, sp, #76	; 0x4c
   1a48a:	4658      	mov	r0, fp
   1a48c:	f7fe fe98 	bl	191c0 <_wcsrtombs_r>
   1a490:	4603      	mov	r3, r0
   1a492:	3301      	adds	r3, #1
   1a494:	9004      	str	r0, [sp, #16]
   1a496:	f000 80ae 	beq.w	1a5f6 <_vfiprintf_r+0xf46>
   1a49a:	9413      	str	r4, [sp, #76]	; 0x4c
   1a49c:	9b04      	ldr	r3, [sp, #16]
   1a49e:	2b00      	cmp	r3, #0
   1a4a0:	d030      	beq.n	1a504 <_vfiprintf_r+0xe54>
   1a4a2:	2b63      	cmp	r3, #99	; 0x63
   1a4a4:	dc63      	bgt.n	1a56e <_vfiprintf_r+0xebe>
   1a4a6:	2300      	movs	r3, #0
   1a4a8:	9308      	str	r3, [sp, #32]
   1a4aa:	ac2b      	add	r4, sp, #172	; 0xac
   1a4ac:	2208      	movs	r2, #8
   1a4ae:	2100      	movs	r1, #0
   1a4b0:	a816      	add	r0, sp, #88	; 0x58
   1a4b2:	f7f8 f93d 	bl	12730 <memset>
   1a4b6:	9d04      	ldr	r5, [sp, #16]
   1a4b8:	ab16      	add	r3, sp, #88	; 0x58
   1a4ba:	9300      	str	r3, [sp, #0]
   1a4bc:	aa13      	add	r2, sp, #76	; 0x4c
   1a4be:	462b      	mov	r3, r5
   1a4c0:	4621      	mov	r1, r4
   1a4c2:	4658      	mov	r0, fp
   1a4c4:	f7fe fe7c 	bl	191c0 <_wcsrtombs_r>
   1a4c8:	4285      	cmp	r5, r0
   1a4ca:	f040 80ab 	bne.w	1a624 <_vfiprintf_r+0xf74>
   1a4ce:	9b03      	ldr	r3, [sp, #12]
   1a4d0:	9a04      	ldr	r2, [sp, #16]
   1a4d2:	9307      	str	r3, [sp, #28]
   1a4d4:	2300      	movs	r3, #0
   1a4d6:	54a3      	strb	r3, [r4, r2]
   1a4d8:	461f      	mov	r7, r3
   1a4da:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1a4de:	9303      	str	r3, [sp, #12]
   1a4e0:	f7ff ba16 	b.w	19910 <_vfiprintf_r+0x260>
   1a4e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a4e6:	990d      	ldr	r1, [sp, #52]	; 0x34
   1a4e8:	1a9b      	subs	r3, r3, r2
   1a4ea:	4618      	mov	r0, r3
   1a4ec:	9308      	str	r3, [sp, #32]
   1a4ee:	f7f8 fa0d 	bl	1290c <strncpy>
   1a4f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a4f4:	9b08      	ldr	r3, [sp, #32]
   1a4f6:	784a      	ldrb	r2, [r1, #1]
   1a4f8:	b10a      	cbz	r2, 1a4fe <_vfiprintf_r+0xe4e>
   1a4fa:	3101      	adds	r1, #1
   1a4fc:	910b      	str	r1, [sp, #44]	; 0x2c
   1a4fe:	f04f 0c00 	mov.w	ip, #0
   1a502:	e748      	b.n	1a396 <_vfiprintf_r+0xce6>
   1a504:	9b03      	ldr	r3, [sp, #12]
   1a506:	9307      	str	r3, [sp, #28]
   1a508:	9b04      	ldr	r3, [sp, #16]
   1a50a:	9303      	str	r3, [sp, #12]
   1a50c:	461f      	mov	r7, r3
   1a50e:	9308      	str	r3, [sp, #32]
   1a510:	f7ff b9fe 	b.w	19910 <_vfiprintf_r+0x260>
   1a514:	2101      	movs	r1, #1
   1a516:	4618      	mov	r0, r3
   1a518:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a51c:	f7ff bb13 	b.w	19b46 <_vfiprintf_r+0x496>
   1a520:	f850 3b04 	ldr.w	r3, [r0], #4
   1a524:	9007      	str	r0, [sp, #28]
   1a526:	4622      	mov	r2, r4
   1a528:	b2db      	uxtb	r3, r3
   1a52a:	e6b6      	b.n	1a29a <_vfiprintf_r+0xbea>
   1a52c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   1a530:	9207      	str	r2, [sp, #28]
   1a532:	17da      	asrs	r2, r3, #31
   1a534:	4611      	mov	r1, r2
   1a536:	f7ff b9ca 	b.w	198ce <_vfiprintf_r+0x21e>
   1a53a:	f851 3b04 	ldr.w	r3, [r1], #4
   1a53e:	9107      	str	r1, [sp, #28]
   1a540:	4602      	mov	r2, r0
   1a542:	b2db      	uxtb	r3, r3
   1a544:	f7ff ba27 	b.w	19996 <_vfiprintf_r+0x2e6>
   1a548:	2301      	movs	r3, #1
   1a54a:	931c      	str	r3, [sp, #112]	; 0x70
   1a54c:	2101      	movs	r1, #1
   1a54e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   1a552:	931b      	str	r3, [sp, #108]	; 0x6c
   1a554:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a558:	460b      	mov	r3, r1
   1a55a:	f7ff bacd 	b.w	19af8 <_vfiprintf_r+0x448>
   1a55e:	9b07      	ldr	r3, [sp, #28]
   1a560:	9905      	ldr	r1, [sp, #20]
   1a562:	f853 2b04 	ldr.w	r2, [r3], #4
   1a566:	9307      	str	r3, [sp, #28]
   1a568:	8011      	strh	r1, [r2, #0]
   1a56a:	f7ff b8ec 	b.w	19746 <_vfiprintf_r+0x96>
   1a56e:	1c59      	adds	r1, r3, #1
   1a570:	4658      	mov	r0, fp
   1a572:	f7f6 f96d 	bl	10850 <_malloc_r>
   1a576:	4604      	mov	r4, r0
   1a578:	2800      	cmp	r0, #0
   1a57a:	d03c      	beq.n	1a5f6 <_vfiprintf_r+0xf46>
   1a57c:	9008      	str	r0, [sp, #32]
   1a57e:	e795      	b.n	1a4ac <_vfiprintf_r+0xdfc>
   1a580:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1a582:	f7f8 fa91 	bl	12aa8 <__retarget_lock_release_recursive>
   1a586:	f7ff b9e9 	b.w	1995c <_vfiprintf_r+0x2ac>
   1a58a:	9b03      	ldr	r3, [sp, #12]
   1a58c:	9307      	str	r3, [sp, #28]
   1a58e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1a592:	9f08      	ldr	r7, [sp, #32]
   1a594:	f7ff b9bc 	b.w	19910 <_vfiprintf_r+0x260>
   1a598:	9819      	ldr	r0, [sp, #100]	; 0x64
   1a59a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1a59c:	3001      	adds	r0, #1
   1a59e:	e545      	b.n	1a02c <_vfiprintf_r+0x97c>
   1a5a0:	9b03      	ldr	r3, [sp, #12]
   1a5a2:	9307      	str	r3, [sp, #28]
   1a5a4:	4620      	mov	r0, r4
   1a5a6:	f7f8 fcab 	bl	12f00 <strlen>
   1a5aa:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1a5ae:	462f      	mov	r7, r5
   1a5b0:	9004      	str	r0, [sp, #16]
   1a5b2:	9303      	str	r3, [sp, #12]
   1a5b4:	9508      	str	r5, [sp, #32]
   1a5b6:	f7ff b9ab 	b.w	19910 <_vfiprintf_r+0x260>
   1a5ba:	ee18 1a10 	vmov	r1, s16
   1a5be:	aa18      	add	r2, sp, #96	; 0x60
   1a5c0:	4658      	mov	r0, fp
   1a5c2:	f7ff f839 	bl	19638 <__sprint_r.part.0>
   1a5c6:	2800      	cmp	r0, #0
   1a5c8:	f43f aa36 	beq.w	19a38 <_vfiprintf_r+0x388>
   1a5cc:	f7ff ba4d 	b.w	19a6a <_vfiprintf_r+0x3ba>
   1a5d0:	9819      	ldr	r0, [sp, #100]	; 0x64
   1a5d2:	3001      	adds	r0, #1
   1a5d4:	e57a      	b.n	1a0cc <_vfiprintf_r+0xa1c>
   1a5d6:	468c      	mov	ip, r1
   1a5d8:	e46e      	b.n	19eb8 <_vfiprintf_r+0x808>
   1a5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1a5dc:	07d9      	lsls	r1, r3, #31
   1a5de:	d405      	bmi.n	1a5ec <_vfiprintf_r+0xf3c>
   1a5e0:	89ab      	ldrh	r3, [r5, #12]
   1a5e2:	059a      	lsls	r2, r3, #22
   1a5e4:	d402      	bmi.n	1a5ec <_vfiprintf_r+0xf3c>
   1a5e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1a5e8:	f7f8 fa5e 	bl	12aa8 <__retarget_lock_release_recursive>
   1a5ec:	f04f 33ff 	mov.w	r3, #4294967295
   1a5f0:	9305      	str	r3, [sp, #20]
   1a5f2:	f7ff ba49 	b.w	19a88 <_vfiprintf_r+0x3d8>
   1a5f6:	ee18 2a10 	vmov	r2, s16
   1a5fa:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1a5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a602:	8193      	strh	r3, [r2, #12]
   1a604:	f7ff ba35 	b.w	19a72 <_vfiprintf_r+0x3c2>
   1a608:	9c07      	ldr	r4, [sp, #28]
   1a60a:	9704      	str	r7, [sp, #16]
   1a60c:	e746      	b.n	1a49c <_vfiprintf_r+0xdec>
   1a60e:	9b07      	ldr	r3, [sp, #28]
   1a610:	f898 1001 	ldrb.w	r1, [r8, #1]
   1a614:	f853 7b04 	ldr.w	r7, [r3], #4
   1a618:	9307      	str	r3, [sp, #28]
   1a61a:	4690      	mov	r8, r2
   1a61c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   1a620:	f7ff b8b9 	b.w	19796 <_vfiprintf_r+0xe6>
   1a624:	ee18 2a10 	vmov	r2, s16
   1a628:	8993      	ldrh	r3, [r2, #12]
   1a62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a62e:	8193      	strh	r3, [r2, #12]
   1a630:	f7ff ba15 	b.w	19a5e <_vfiprintf_r+0x3ae>
   1a634:	cccccccd 	.word	0xcccccccd
   1a638:	20001100 	.word	0x20001100

0001a63c <__sbprintf>:
   1a63c:	b570      	push	{r4, r5, r6, lr}
   1a63e:	460c      	mov	r4, r1
   1a640:	8989      	ldrh	r1, [r1, #12]
   1a642:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   1a646:	f021 0102 	bic.w	r1, r1, #2
   1a64a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1a64e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1a650:	911b      	str	r1, [sp, #108]	; 0x6c
   1a652:	89e1      	ldrh	r1, [r4, #14]
   1a654:	f8ad 1016 	strh.w	r1, [sp, #22]
   1a658:	69e1      	ldr	r1, [r4, #28]
   1a65a:	9109      	str	r1, [sp, #36]	; 0x24
   1a65c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1a65e:	910b      	str	r1, [sp, #44]	; 0x2c
   1a660:	a91c      	add	r1, sp, #112	; 0x70
   1a662:	9102      	str	r1, [sp, #8]
   1a664:	9106      	str	r1, [sp, #24]
   1a666:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a66a:	4606      	mov	r6, r0
   1a66c:	9104      	str	r1, [sp, #16]
   1a66e:	9107      	str	r1, [sp, #28]
   1a670:	a818      	add	r0, sp, #96	; 0x60
   1a672:	2100      	movs	r1, #0
   1a674:	e9cd 3200 	strd	r3, r2, [sp]
   1a678:	9108      	str	r1, [sp, #32]
   1a67a:	f7f8 fa0f 	bl	12a9c <__retarget_lock_init_recursive>
   1a67e:	e9dd 3200 	ldrd	r3, r2, [sp]
   1a682:	a902      	add	r1, sp, #8
   1a684:	4630      	mov	r0, r6
   1a686:	f7ff f813 	bl	196b0 <_vfiprintf_r>
   1a68a:	1e05      	subs	r5, r0, #0
   1a68c:	db07      	blt.n	1a69e <__sbprintf+0x62>
   1a68e:	a902      	add	r1, sp, #8
   1a690:	4630      	mov	r0, r6
   1a692:	f7fd fad3 	bl	17c3c <_fflush_r>
   1a696:	2800      	cmp	r0, #0
   1a698:	bf18      	it	ne
   1a69a:	f04f 35ff 	movne.w	r5, #4294967295
   1a69e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1a6a2:	065b      	lsls	r3, r3, #25
   1a6a4:	d503      	bpl.n	1a6ae <__sbprintf+0x72>
   1a6a6:	89a3      	ldrh	r3, [r4, #12]
   1a6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a6ac:	81a3      	strh	r3, [r4, #12]
   1a6ae:	9818      	ldr	r0, [sp, #96]	; 0x60
   1a6b0:	f7f8 f9f6 	bl	12aa0 <__retarget_lock_close_recursive>
   1a6b4:	4628      	mov	r0, r5
   1a6b6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1a6ba:	bd70      	pop	{r4, r5, r6, pc}

0001a6bc <__sfvwrite_r>:
   1a6bc:	6893      	ldr	r3, [r2, #8]
   1a6be:	2b00      	cmp	r3, #0
   1a6c0:	f000 8085 	beq.w	1a7ce <__sfvwrite_r+0x112>
   1a6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6c8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1a6cc:	460c      	mov	r4, r1
   1a6ce:	0719      	lsls	r1, r3, #28
   1a6d0:	4680      	mov	r8, r0
   1a6d2:	b083      	sub	sp, #12
   1a6d4:	4617      	mov	r7, r2
   1a6d6:	b298      	uxth	r0, r3
   1a6d8:	d525      	bpl.n	1a726 <__sfvwrite_r+0x6a>
   1a6da:	6923      	ldr	r3, [r4, #16]
   1a6dc:	b31b      	cbz	r3, 1a726 <__sfvwrite_r+0x6a>
   1a6de:	f010 0302 	ands.w	r3, r0, #2
   1a6e2:	683d      	ldr	r5, [r7, #0]
   1a6e4:	d02d      	beq.n	1a742 <__sfvwrite_r+0x86>
   1a6e6:	f04f 0a00 	mov.w	sl, #0
   1a6ea:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 1a9ac <__sfvwrite_r+0x2f0>
   1a6ee:	4656      	mov	r6, sl
   1a6f0:	46b9      	mov	r9, r7
   1a6f2:	455e      	cmp	r6, fp
   1a6f4:	4633      	mov	r3, r6
   1a6f6:	4652      	mov	r2, sl
   1a6f8:	bf28      	it	cs
   1a6fa:	465b      	movcs	r3, fp
   1a6fc:	4640      	mov	r0, r8
   1a6fe:	2e00      	cmp	r6, #0
   1a700:	d052      	beq.n	1a7a8 <__sfvwrite_r+0xec>
   1a702:	69e1      	ldr	r1, [r4, #28]
   1a704:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1a706:	47b8      	blx	r7
   1a708:	2800      	cmp	r0, #0
   1a70a:	dd56      	ble.n	1a7ba <__sfvwrite_r+0xfe>
   1a70c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1a710:	1a1b      	subs	r3, r3, r0
   1a712:	4482      	add	sl, r0
   1a714:	1a36      	subs	r6, r6, r0
   1a716:	f8c9 3008 	str.w	r3, [r9, #8]
   1a71a:	2b00      	cmp	r3, #0
   1a71c:	d1e9      	bne.n	1a6f2 <__sfvwrite_r+0x36>
   1a71e:	2000      	movs	r0, #0
   1a720:	b003      	add	sp, #12
   1a722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a726:	4621      	mov	r1, r4
   1a728:	4640      	mov	r0, r8
   1a72a:	f000 f97d 	bl	1aa28 <__swsetup_r>
   1a72e:	2800      	cmp	r0, #0
   1a730:	f040 8138 	bne.w	1a9a4 <__sfvwrite_r+0x2e8>
   1a734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a738:	683d      	ldr	r5, [r7, #0]
   1a73a:	b298      	uxth	r0, r3
   1a73c:	f010 0302 	ands.w	r3, r0, #2
   1a740:	d1d1      	bne.n	1a6e6 <__sfvwrite_r+0x2a>
   1a742:	f010 0901 	ands.w	r9, r0, #1
   1a746:	d144      	bne.n	1a7d2 <__sfvwrite_r+0x116>
   1a748:	464e      	mov	r6, r9
   1a74a:	9700      	str	r7, [sp, #0]
   1a74c:	b346      	cbz	r6, 1a7a0 <__sfvwrite_r+0xe4>
   1a74e:	0582      	lsls	r2, r0, #22
   1a750:	f8d4 b008 	ldr.w	fp, [r4, #8]
   1a754:	f140 8085 	bpl.w	1a862 <__sfvwrite_r+0x1a6>
   1a758:	45b3      	cmp	fp, r6
   1a75a:	465a      	mov	r2, fp
   1a75c:	f200 80b4 	bhi.w	1a8c8 <__sfvwrite_r+0x20c>
   1a760:	f410 6f90 	tst.w	r0, #1152	; 0x480
   1a764:	f040 80c1 	bne.w	1a8ea <__sfvwrite_r+0x22e>
   1a768:	6820      	ldr	r0, [r4, #0]
   1a76a:	9201      	str	r2, [sp, #4]
   1a76c:	4649      	mov	r1, r9
   1a76e:	f7f7 ff63 	bl	12638 <memmove>
   1a772:	68a3      	ldr	r3, [r4, #8]
   1a774:	9a01      	ldr	r2, [sp, #4]
   1a776:	eba3 010b 	sub.w	r1, r3, fp
   1a77a:	6823      	ldr	r3, [r4, #0]
   1a77c:	60a1      	str	r1, [r4, #8]
   1a77e:	4413      	add	r3, r2
   1a780:	46b2      	mov	sl, r6
   1a782:	6023      	str	r3, [r4, #0]
   1a784:	2600      	movs	r6, #0
   1a786:	9a00      	ldr	r2, [sp, #0]
   1a788:	6893      	ldr	r3, [r2, #8]
   1a78a:	eba3 030a 	sub.w	r3, r3, sl
   1a78e:	44d1      	add	r9, sl
   1a790:	6093      	str	r3, [r2, #8]
   1a792:	2b00      	cmp	r3, #0
   1a794:	d0c3      	beq.n	1a71e <__sfvwrite_r+0x62>
   1a796:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1a79a:	b280      	uxth	r0, r0
   1a79c:	2e00      	cmp	r6, #0
   1a79e:	d1d6      	bne.n	1a74e <__sfvwrite_r+0x92>
   1a7a0:	e9d5 9600 	ldrd	r9, r6, [r5]
   1a7a4:	3508      	adds	r5, #8
   1a7a6:	e7d1      	b.n	1a74c <__sfvwrite_r+0x90>
   1a7a8:	e9d5 a600 	ldrd	sl, r6, [r5]
   1a7ac:	3508      	adds	r5, #8
   1a7ae:	e7a0      	b.n	1a6f2 <__sfvwrite_r+0x36>
   1a7b0:	4621      	mov	r1, r4
   1a7b2:	4640      	mov	r0, r8
   1a7b4:	f7fd fa42 	bl	17c3c <_fflush_r>
   1a7b8:	b388      	cbz	r0, 1a81e <__sfvwrite_r+0x162>
   1a7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a7be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a7c2:	f04f 30ff 	mov.w	r0, #4294967295
   1a7c6:	81a3      	strh	r3, [r4, #12]
   1a7c8:	b003      	add	sp, #12
   1a7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7ce:	2000      	movs	r0, #0
   1a7d0:	4770      	bx	lr
   1a7d2:	461e      	mov	r6, r3
   1a7d4:	46ba      	mov	sl, r7
   1a7d6:	4699      	mov	r9, r3
   1a7d8:	4618      	mov	r0, r3
   1a7da:	9500      	str	r5, [sp, #0]
   1a7dc:	461f      	mov	r7, r3
   1a7de:	b366      	cbz	r6, 1a83a <__sfvwrite_r+0x17e>
   1a7e0:	2800      	cmp	r0, #0
   1a7e2:	d032      	beq.n	1a84a <__sfvwrite_r+0x18e>
   1a7e4:	464a      	mov	r2, r9
   1a7e6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   1a7ea:	6820      	ldr	r0, [r4, #0]
   1a7ec:	68a5      	ldr	r5, [r4, #8]
   1a7ee:	42b2      	cmp	r2, r6
   1a7f0:	bf28      	it	cs
   1a7f2:	4632      	movcs	r2, r6
   1a7f4:	4288      	cmp	r0, r1
   1a7f6:	d904      	bls.n	1a802 <__sfvwrite_r+0x146>
   1a7f8:	eb05 0b03 	add.w	fp, r5, r3
   1a7fc:	455a      	cmp	r2, fp
   1a7fe:	f300 80a7 	bgt.w	1a950 <__sfvwrite_r+0x294>
   1a802:	4293      	cmp	r3, r2
   1a804:	dc64      	bgt.n	1a8d0 <__sfvwrite_r+0x214>
   1a806:	69e1      	ldr	r1, [r4, #28]
   1a808:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1a80a:	463a      	mov	r2, r7
   1a80c:	4640      	mov	r0, r8
   1a80e:	47a8      	blx	r5
   1a810:	f1b0 0b00 	subs.w	fp, r0, #0
   1a814:	ddd1      	ble.n	1a7ba <__sfvwrite_r+0xfe>
   1a816:	ebb9 090b 	subs.w	r9, r9, fp
   1a81a:	d0c9      	beq.n	1a7b0 <__sfvwrite_r+0xf4>
   1a81c:	2001      	movs	r0, #1
   1a81e:	f8da 3008 	ldr.w	r3, [sl, #8]
   1a822:	eba3 030b 	sub.w	r3, r3, fp
   1a826:	445f      	add	r7, fp
   1a828:	eba6 060b 	sub.w	r6, r6, fp
   1a82c:	f8ca 3008 	str.w	r3, [sl, #8]
   1a830:	2b00      	cmp	r3, #0
   1a832:	f43f af74 	beq.w	1a71e <__sfvwrite_r+0x62>
   1a836:	2e00      	cmp	r6, #0
   1a838:	d1d2      	bne.n	1a7e0 <__sfvwrite_r+0x124>
   1a83a:	9a00      	ldr	r2, [sp, #0]
   1a83c:	6856      	ldr	r6, [r2, #4]
   1a83e:	4613      	mov	r3, r2
   1a840:	3208      	adds	r2, #8
   1a842:	9200      	str	r2, [sp, #0]
   1a844:	2e00      	cmp	r6, #0
   1a846:	d0f8      	beq.n	1a83a <__sfvwrite_r+0x17e>
   1a848:	681f      	ldr	r7, [r3, #0]
   1a84a:	4632      	mov	r2, r6
   1a84c:	210a      	movs	r1, #10
   1a84e:	4638      	mov	r0, r7
   1a850:	f7f8 fb06 	bl	12e60 <memchr>
   1a854:	2800      	cmp	r0, #0
   1a856:	f000 809c 	beq.w	1a992 <__sfvwrite_r+0x2d6>
   1a85a:	3001      	adds	r0, #1
   1a85c:	eba0 0907 	sub.w	r9, r0, r7
   1a860:	e7c0      	b.n	1a7e4 <__sfvwrite_r+0x128>
   1a862:	6820      	ldr	r0, [r4, #0]
   1a864:	6923      	ldr	r3, [r4, #16]
   1a866:	4298      	cmp	r0, r3
   1a868:	d816      	bhi.n	1a898 <__sfvwrite_r+0x1dc>
   1a86a:	6962      	ldr	r2, [r4, #20]
   1a86c:	42b2      	cmp	r2, r6
   1a86e:	d813      	bhi.n	1a898 <__sfvwrite_r+0x1dc>
   1a870:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1a874:	42b3      	cmp	r3, r6
   1a876:	bf28      	it	cs
   1a878:	4633      	movcs	r3, r6
   1a87a:	69e1      	ldr	r1, [r4, #28]
   1a87c:	fb93 f3f2 	sdiv	r3, r3, r2
   1a880:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1a882:	fb02 f303 	mul.w	r3, r2, r3
   1a886:	4640      	mov	r0, r8
   1a888:	464a      	mov	r2, r9
   1a88a:	47b8      	blx	r7
   1a88c:	f1b0 0a00 	subs.w	sl, r0, #0
   1a890:	dd93      	ble.n	1a7ba <__sfvwrite_r+0xfe>
   1a892:	eba6 060a 	sub.w	r6, r6, sl
   1a896:	e776      	b.n	1a786 <__sfvwrite_r+0xca>
   1a898:	45b3      	cmp	fp, r6
   1a89a:	46da      	mov	sl, fp
   1a89c:	bf28      	it	cs
   1a89e:	46b2      	movcs	sl, r6
   1a8a0:	4652      	mov	r2, sl
   1a8a2:	4649      	mov	r1, r9
   1a8a4:	f7f7 fec8 	bl	12638 <memmove>
   1a8a8:	68a3      	ldr	r3, [r4, #8]
   1a8aa:	6822      	ldr	r2, [r4, #0]
   1a8ac:	eba3 030a 	sub.w	r3, r3, sl
   1a8b0:	4452      	add	r2, sl
   1a8b2:	60a3      	str	r3, [r4, #8]
   1a8b4:	6022      	str	r2, [r4, #0]
   1a8b6:	2b00      	cmp	r3, #0
   1a8b8:	d1eb      	bne.n	1a892 <__sfvwrite_r+0x1d6>
   1a8ba:	4621      	mov	r1, r4
   1a8bc:	4640      	mov	r0, r8
   1a8be:	f7fd f9bd 	bl	17c3c <_fflush_r>
   1a8c2:	2800      	cmp	r0, #0
   1a8c4:	d0e5      	beq.n	1a892 <__sfvwrite_r+0x1d6>
   1a8c6:	e778      	b.n	1a7ba <__sfvwrite_r+0xfe>
   1a8c8:	6820      	ldr	r0, [r4, #0]
   1a8ca:	46b3      	mov	fp, r6
   1a8cc:	4632      	mov	r2, r6
   1a8ce:	e74c      	b.n	1a76a <__sfvwrite_r+0xae>
   1a8d0:	4639      	mov	r1, r7
   1a8d2:	9201      	str	r2, [sp, #4]
   1a8d4:	f7f7 feb0 	bl	12638 <memmove>
   1a8d8:	9a01      	ldr	r2, [sp, #4]
   1a8da:	68a3      	ldr	r3, [r4, #8]
   1a8dc:	1a9b      	subs	r3, r3, r2
   1a8de:	60a3      	str	r3, [r4, #8]
   1a8e0:	6823      	ldr	r3, [r4, #0]
   1a8e2:	4413      	add	r3, r2
   1a8e4:	6023      	str	r3, [r4, #0]
   1a8e6:	4693      	mov	fp, r2
   1a8e8:	e795      	b.n	1a816 <__sfvwrite_r+0x15a>
   1a8ea:	6823      	ldr	r3, [r4, #0]
   1a8ec:	6921      	ldr	r1, [r4, #16]
   1a8ee:	eba3 0b01 	sub.w	fp, r3, r1
   1a8f2:	6963      	ldr	r3, [r4, #20]
   1a8f4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   1a8f8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   1a8fc:	f10b 0301 	add.w	r3, fp, #1
   1a900:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   1a904:	4433      	add	r3, r6
   1a906:	4553      	cmp	r3, sl
   1a908:	4652      	mov	r2, sl
   1a90a:	bf84      	itt	hi
   1a90c:	469a      	movhi	sl, r3
   1a90e:	4652      	movhi	r2, sl
   1a910:	0543      	lsls	r3, r0, #21
   1a912:	d52c      	bpl.n	1a96e <__sfvwrite_r+0x2b2>
   1a914:	4611      	mov	r1, r2
   1a916:	4640      	mov	r0, r8
   1a918:	f7f5 ff9a 	bl	10850 <_malloc_r>
   1a91c:	2800      	cmp	r0, #0
   1a91e:	d03b      	beq.n	1a998 <__sfvwrite_r+0x2dc>
   1a920:	465a      	mov	r2, fp
   1a922:	6921      	ldr	r1, [r4, #16]
   1a924:	9001      	str	r0, [sp, #4]
   1a926:	f7f3 fe75 	bl	e614 <memcpy>
   1a92a:	89a2      	ldrh	r2, [r4, #12]
   1a92c:	9b01      	ldr	r3, [sp, #4]
   1a92e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1a932:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1a936:	81a2      	strh	r2, [r4, #12]
   1a938:	eb03 000b 	add.w	r0, r3, fp
   1a93c:	6123      	str	r3, [r4, #16]
   1a93e:	ebaa 030b 	sub.w	r3, sl, fp
   1a942:	f8c4 a014 	str.w	sl, [r4, #20]
   1a946:	60a3      	str	r3, [r4, #8]
   1a948:	6020      	str	r0, [r4, #0]
   1a94a:	46b3      	mov	fp, r6
   1a94c:	4632      	mov	r2, r6
   1a94e:	e70c      	b.n	1a76a <__sfvwrite_r+0xae>
   1a950:	4639      	mov	r1, r7
   1a952:	465a      	mov	r2, fp
   1a954:	f7f7 fe70 	bl	12638 <memmove>
   1a958:	6823      	ldr	r3, [r4, #0]
   1a95a:	445b      	add	r3, fp
   1a95c:	6023      	str	r3, [r4, #0]
   1a95e:	4621      	mov	r1, r4
   1a960:	4640      	mov	r0, r8
   1a962:	f7fd f96b 	bl	17c3c <_fflush_r>
   1a966:	2800      	cmp	r0, #0
   1a968:	f43f af55 	beq.w	1a816 <__sfvwrite_r+0x15a>
   1a96c:	e725      	b.n	1a7ba <__sfvwrite_r+0xfe>
   1a96e:	4640      	mov	r0, r8
   1a970:	f7f6 fa36 	bl	10de0 <_realloc_r>
   1a974:	4603      	mov	r3, r0
   1a976:	2800      	cmp	r0, #0
   1a978:	d1de      	bne.n	1a938 <__sfvwrite_r+0x27c>
   1a97a:	6921      	ldr	r1, [r4, #16]
   1a97c:	4640      	mov	r0, r8
   1a97e:	f7f8 fbd1 	bl	13124 <_free_r>
   1a982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a986:	220c      	movs	r2, #12
   1a988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1a98c:	f8c8 2000 	str.w	r2, [r8]
   1a990:	e715      	b.n	1a7be <__sfvwrite_r+0x102>
   1a992:	1c72      	adds	r2, r6, #1
   1a994:	4691      	mov	r9, r2
   1a996:	e726      	b.n	1a7e6 <__sfvwrite_r+0x12a>
   1a998:	220c      	movs	r2, #12
   1a99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a99e:	f8c8 2000 	str.w	r2, [r8]
   1a9a2:	e70c      	b.n	1a7be <__sfvwrite_r+0x102>
   1a9a4:	f04f 30ff 	mov.w	r0, #4294967295
   1a9a8:	e6ba      	b.n	1a720 <__sfvwrite_r+0x64>
   1a9aa:	bf00      	nop
   1a9ac:	7ffffc00 	.word	0x7ffffc00

0001a9b0 <__submore>:
   1a9b0:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1a9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9b8:	460c      	mov	r4, r1
   1a9ba:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1a9bc:	4299      	cmp	r1, r3
   1a9be:	d014      	beq.n	1a9ea <__submore+0x3a>
   1a9c0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1a9c2:	0077      	lsls	r7, r6, #1
   1a9c4:	463a      	mov	r2, r7
   1a9c6:	f7f6 fa0b 	bl	10de0 <_realloc_r>
   1a9ca:	4605      	mov	r5, r0
   1a9cc:	b340      	cbz	r0, 1aa20 <__submore+0x70>
   1a9ce:	eb00 0806 	add.w	r8, r0, r6
   1a9d2:	4601      	mov	r1, r0
   1a9d4:	4632      	mov	r2, r6
   1a9d6:	4640      	mov	r0, r8
   1a9d8:	f7f3 fe1c 	bl	e614 <memcpy>
   1a9dc:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   1a9e0:	f8c4 8000 	str.w	r8, [r4]
   1a9e4:	2000      	movs	r0, #0
   1a9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a9ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a9ee:	f7f5 ff2f 	bl	10850 <_malloc_r>
   1a9f2:	b1a8      	cbz	r0, 1aa20 <__submore+0x70>
   1a9f4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1a9f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a9fc:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   1aa00:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1aa04:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1aa08:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1aa0c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   1aa10:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   1aa14:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   1aa18:	6023      	str	r3, [r4, #0]
   1aa1a:	2000      	movs	r0, #0
   1aa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aa20:	f04f 30ff 	mov.w	r0, #4294967295
   1aa24:	e7df      	b.n	1a9e6 <__submore+0x36>
   1aa26:	bf00      	nop

0001aa28 <__swsetup_r>:
   1aa28:	b538      	push	{r3, r4, r5, lr}
   1aa2a:	4b31      	ldr	r3, [pc, #196]	; (1aaf0 <__swsetup_r+0xc8>)
   1aa2c:	681b      	ldr	r3, [r3, #0]
   1aa2e:	4605      	mov	r5, r0
   1aa30:	460c      	mov	r4, r1
   1aa32:	b113      	cbz	r3, 1aa3a <__swsetup_r+0x12>
   1aa34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1aa36:	2a00      	cmp	r2, #0
   1aa38:	d04e      	beq.n	1aad8 <__swsetup_r+0xb0>
   1aa3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1aa3e:	0718      	lsls	r0, r3, #28
   1aa40:	b29a      	uxth	r2, r3
   1aa42:	d51c      	bpl.n	1aa7e <__swsetup_r+0x56>
   1aa44:	6921      	ldr	r1, [r4, #16]
   1aa46:	b329      	cbz	r1, 1aa94 <__swsetup_r+0x6c>
   1aa48:	f012 0001 	ands.w	r0, r2, #1
   1aa4c:	d007      	beq.n	1aa5e <__swsetup_r+0x36>
   1aa4e:	2000      	movs	r0, #0
   1aa50:	60a0      	str	r0, [r4, #8]
   1aa52:	6960      	ldr	r0, [r4, #20]
   1aa54:	4240      	negs	r0, r0
   1aa56:	61a0      	str	r0, [r4, #24]
   1aa58:	b139      	cbz	r1, 1aa6a <__swsetup_r+0x42>
   1aa5a:	2000      	movs	r0, #0
   1aa5c:	bd38      	pop	{r3, r4, r5, pc}
   1aa5e:	0795      	lsls	r5, r2, #30
   1aa60:	bf58      	it	pl
   1aa62:	6960      	ldrpl	r0, [r4, #20]
   1aa64:	60a0      	str	r0, [r4, #8]
   1aa66:	2900      	cmp	r1, #0
   1aa68:	d1f7      	bne.n	1aa5a <__swsetup_r+0x32>
   1aa6a:	0612      	lsls	r2, r2, #24
   1aa6c:	bf58      	it	pl
   1aa6e:	4608      	movpl	r0, r1
   1aa70:	d5f4      	bpl.n	1aa5c <__swsetup_r+0x34>
   1aa72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1aa76:	81a3      	strh	r3, [r4, #12]
   1aa78:	f04f 30ff 	mov.w	r0, #4294967295
   1aa7c:	bd38      	pop	{r3, r4, r5, pc}
   1aa7e:	06d1      	lsls	r1, r2, #27
   1aa80:	d52e      	bpl.n	1aae0 <__swsetup_r+0xb8>
   1aa82:	0752      	lsls	r2, r2, #29
   1aa84:	d414      	bmi.n	1aab0 <__swsetup_r+0x88>
   1aa86:	6921      	ldr	r1, [r4, #16]
   1aa88:	f043 0308 	orr.w	r3, r3, #8
   1aa8c:	81a3      	strh	r3, [r4, #12]
   1aa8e:	b29a      	uxth	r2, r3
   1aa90:	2900      	cmp	r1, #0
   1aa92:	d1d9      	bne.n	1aa48 <__swsetup_r+0x20>
   1aa94:	f402 7020 	and.w	r0, r2, #640	; 0x280
   1aa98:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1aa9c:	d0d4      	beq.n	1aa48 <__swsetup_r+0x20>
   1aa9e:	4621      	mov	r1, r4
   1aaa0:	4628      	mov	r0, r5
   1aaa2:	f000 f977 	bl	1ad94 <__smakebuf_r>
   1aaa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1aaaa:	6921      	ldr	r1, [r4, #16]
   1aaac:	b29a      	uxth	r2, r3
   1aaae:	e7cb      	b.n	1aa48 <__swsetup_r+0x20>
   1aab0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1aab2:	b151      	cbz	r1, 1aaca <__swsetup_r+0xa2>
   1aab4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1aab8:	4291      	cmp	r1, r2
   1aaba:	d004      	beq.n	1aac6 <__swsetup_r+0x9e>
   1aabc:	4628      	mov	r0, r5
   1aabe:	f7f8 fb31 	bl	13124 <_free_r>
   1aac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1aac6:	2200      	movs	r2, #0
   1aac8:	6322      	str	r2, [r4, #48]	; 0x30
   1aaca:	6921      	ldr	r1, [r4, #16]
   1aacc:	2200      	movs	r2, #0
   1aace:	e9c4 1200 	strd	r1, r2, [r4]
   1aad2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1aad6:	e7d7      	b.n	1aa88 <__swsetup_r+0x60>
   1aad8:	4618      	mov	r0, r3
   1aada:	f7f7 fbf1 	bl	122c0 <__sinit>
   1aade:	e7ac      	b.n	1aa3a <__swsetup_r+0x12>
   1aae0:	2209      	movs	r2, #9
   1aae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1aae6:	602a      	str	r2, [r5, #0]
   1aae8:	f04f 30ff 	mov.w	r0, #4294967295
   1aaec:	81a3      	strh	r3, [r4, #12]
   1aaee:	bd38      	pop	{r3, r4, r5, pc}
   1aaf0:	200093d4 	.word	0x200093d4

0001aaf4 <__fputwc>:
   1aaf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aaf8:	b082      	sub	sp, #8
   1aafa:	4682      	mov	sl, r0
   1aafc:	4688      	mov	r8, r1
   1aafe:	4614      	mov	r4, r2
   1ab00:	f7f7 ff36 	bl	12970 <__locale_mb_cur_max>
   1ab04:	2801      	cmp	r0, #1
   1ab06:	d103      	bne.n	1ab10 <__fputwc+0x1c>
   1ab08:	f108 33ff 	add.w	r3, r8, #4294967295
   1ab0c:	2bfe      	cmp	r3, #254	; 0xfe
   1ab0e:	d936      	bls.n	1ab7e <__fputwc+0x8a>
   1ab10:	f10d 0904 	add.w	r9, sp, #4
   1ab14:	4642      	mov	r2, r8
   1ab16:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1ab1a:	4649      	mov	r1, r9
   1ab1c:	4650      	mov	r0, sl
   1ab1e:	f7fe fb29 	bl	19174 <_wcrtomb_r>
   1ab22:	1c42      	adds	r2, r0, #1
   1ab24:	4606      	mov	r6, r0
   1ab26:	d032      	beq.n	1ab8e <__fputwc+0x9a>
   1ab28:	b320      	cbz	r0, 1ab74 <__fputwc+0x80>
   1ab2a:	f89d c004 	ldrb.w	ip, [sp, #4]
   1ab2e:	2500      	movs	r5, #0
   1ab30:	e009      	b.n	1ab46 <__fputwc+0x52>
   1ab32:	6823      	ldr	r3, [r4, #0]
   1ab34:	1c5a      	adds	r2, r3, #1
   1ab36:	6022      	str	r2, [r4, #0]
   1ab38:	f883 c000 	strb.w	ip, [r3]
   1ab3c:	3501      	adds	r5, #1
   1ab3e:	42b5      	cmp	r5, r6
   1ab40:	d218      	bcs.n	1ab74 <__fputwc+0x80>
   1ab42:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   1ab46:	68a3      	ldr	r3, [r4, #8]
   1ab48:	3b01      	subs	r3, #1
   1ab4a:	2b00      	cmp	r3, #0
   1ab4c:	60a3      	str	r3, [r4, #8]
   1ab4e:	daf0      	bge.n	1ab32 <__fputwc+0x3e>
   1ab50:	69a7      	ldr	r7, [r4, #24]
   1ab52:	42bb      	cmp	r3, r7
   1ab54:	4661      	mov	r1, ip
   1ab56:	4622      	mov	r2, r4
   1ab58:	4650      	mov	r0, sl
   1ab5a:	db02      	blt.n	1ab62 <__fputwc+0x6e>
   1ab5c:	f1bc 0f0a 	cmp.w	ip, #10
   1ab60:	d1e7      	bne.n	1ab32 <__fputwc+0x3e>
   1ab62:	f000 f983 	bl	1ae6c <__swbuf_r>
   1ab66:	1c43      	adds	r3, r0, #1
   1ab68:	d1e8      	bne.n	1ab3c <__fputwc+0x48>
   1ab6a:	4606      	mov	r6, r0
   1ab6c:	4630      	mov	r0, r6
   1ab6e:	b002      	add	sp, #8
   1ab70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ab74:	4646      	mov	r6, r8
   1ab76:	4630      	mov	r0, r6
   1ab78:	b002      	add	sp, #8
   1ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ab7e:	fa5f fc88 	uxtb.w	ip, r8
   1ab82:	f88d c004 	strb.w	ip, [sp, #4]
   1ab86:	4606      	mov	r6, r0
   1ab88:	f10d 0904 	add.w	r9, sp, #4
   1ab8c:	e7cf      	b.n	1ab2e <__fputwc+0x3a>
   1ab8e:	89a3      	ldrh	r3, [r4, #12]
   1ab90:	4630      	mov	r0, r6
   1ab92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ab96:	81a3      	strh	r3, [r4, #12]
   1ab98:	b002      	add	sp, #8
   1ab9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ab9e:	bf00      	nop

0001aba0 <_fputwc_r>:
   1aba0:	b530      	push	{r4, r5, lr}
   1aba2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1aba4:	f013 0f01 	tst.w	r3, #1
   1aba8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1abac:	4614      	mov	r4, r2
   1abae:	b083      	sub	sp, #12
   1abb0:	4605      	mov	r5, r0
   1abb2:	b29a      	uxth	r2, r3
   1abb4:	d101      	bne.n	1abba <_fputwc_r+0x1a>
   1abb6:	0598      	lsls	r0, r3, #22
   1abb8:	d51c      	bpl.n	1abf4 <_fputwc_r+0x54>
   1abba:	0490      	lsls	r0, r2, #18
   1abbc:	d406      	bmi.n	1abcc <_fputwc_r+0x2c>
   1abbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1abc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1abc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1abc8:	81a3      	strh	r3, [r4, #12]
   1abca:	6662      	str	r2, [r4, #100]	; 0x64
   1abcc:	4622      	mov	r2, r4
   1abce:	4628      	mov	r0, r5
   1abd0:	f7ff ff90 	bl	1aaf4 <__fputwc>
   1abd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1abd6:	07da      	lsls	r2, r3, #31
   1abd8:	4605      	mov	r5, r0
   1abda:	d402      	bmi.n	1abe2 <_fputwc_r+0x42>
   1abdc:	89a3      	ldrh	r3, [r4, #12]
   1abde:	059b      	lsls	r3, r3, #22
   1abe0:	d502      	bpl.n	1abe8 <_fputwc_r+0x48>
   1abe2:	4628      	mov	r0, r5
   1abe4:	b003      	add	sp, #12
   1abe6:	bd30      	pop	{r4, r5, pc}
   1abe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1abea:	f7f7 ff5d 	bl	12aa8 <__retarget_lock_release_recursive>
   1abee:	4628      	mov	r0, r5
   1abf0:	b003      	add	sp, #12
   1abf2:	bd30      	pop	{r4, r5, pc}
   1abf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1abf6:	9101      	str	r1, [sp, #4]
   1abf8:	f7f7 ff54 	bl	12aa4 <__retarget_lock_acquire_recursive>
   1abfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ac00:	9901      	ldr	r1, [sp, #4]
   1ac02:	b29a      	uxth	r2, r3
   1ac04:	e7d9      	b.n	1abba <_fputwc_r+0x1a>
   1ac06:	bf00      	nop

0001ac08 <_wcsnrtombs_l>:
   1ac08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac0c:	b08b      	sub	sp, #44	; 0x2c
   1ac0e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   1ac12:	9f14      	ldr	r7, [sp, #80]	; 0x50
   1ac14:	9103      	str	r1, [sp, #12]
   1ac16:	4681      	mov	r9, r0
   1ac18:	9205      	str	r2, [sp, #20]
   1ac1a:	461e      	mov	r6, r3
   1ac1c:	f1b8 0f00 	cmp.w	r8, #0
   1ac20:	d05c      	beq.n	1acdc <_wcsnrtombs_l+0xd4>
   1ac22:	9b03      	ldr	r3, [sp, #12]
   1ac24:	2b00      	cmp	r3, #0
   1ac26:	d05e      	beq.n	1ace6 <_wcsnrtombs_l+0xde>
   1ac28:	9b05      	ldr	r3, [sp, #20]
   1ac2a:	681d      	ldr	r5, [r3, #0]
   1ac2c:	2f00      	cmp	r7, #0
   1ac2e:	d06a      	beq.n	1ad06 <_wcsnrtombs_l+0xfe>
   1ac30:	1e74      	subs	r4, r6, #1
   1ac32:	b34e      	cbz	r6, 1ac88 <_wcsnrtombs_l+0x80>
   1ac34:	9b03      	ldr	r3, [sp, #12]
   1ac36:	9304      	str	r3, [sp, #16]
   1ac38:	3d04      	subs	r5, #4
   1ac3a:	2600      	movs	r6, #0
   1ac3c:	9501      	str	r5, [sp, #4]
   1ac3e:	e00b      	b.n	1ac58 <_wcsnrtombs_l+0x50>
   1ac40:	9b03      	ldr	r3, [sp, #12]
   1ac42:	bb2b      	cbnz	r3, 1ac90 <_wcsnrtombs_l+0x88>
   1ac44:	9b01      	ldr	r3, [sp, #4]
   1ac46:	681a      	ldr	r2, [r3, #0]
   1ac48:	2a00      	cmp	r2, #0
   1ac4a:	d03a      	beq.n	1acc2 <_wcsnrtombs_l+0xba>
   1ac4c:	45bc      	cmp	ip, r7
   1ac4e:	d25c      	bcs.n	1ad0a <_wcsnrtombs_l+0x102>
   1ac50:	3c01      	subs	r4, #1
   1ac52:	1c63      	adds	r3, r4, #1
   1ac54:	4666      	mov	r6, ip
   1ac56:	d017      	beq.n	1ac88 <_wcsnrtombs_l+0x80>
   1ac58:	f8d8 3000 	ldr.w	r3, [r8]
   1ac5c:	9302      	str	r3, [sp, #8]
   1ac5e:	9b01      	ldr	r3, [sp, #4]
   1ac60:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   1ac64:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1ac68:	9301      	str	r3, [sp, #4]
   1ac6a:	a907      	add	r1, sp, #28
   1ac6c:	4643      	mov	r3, r8
   1ac6e:	4648      	mov	r0, r9
   1ac70:	f8d8 b004 	ldr.w	fp, [r8, #4]
   1ac74:	47a8      	blx	r5
   1ac76:	1c42      	adds	r2, r0, #1
   1ac78:	d03a      	beq.n	1acf0 <_wcsnrtombs_l+0xe8>
   1ac7a:	eb00 0c06 	add.w	ip, r0, r6
   1ac7e:	45bc      	cmp	ip, r7
   1ac80:	d9de      	bls.n	1ac40 <_wcsnrtombs_l+0x38>
   1ac82:	9b02      	ldr	r3, [sp, #8]
   1ac84:	e9c8 3b00 	strd	r3, fp, [r8]
   1ac88:	4630      	mov	r0, r6
   1ac8a:	b00b      	add	sp, #44	; 0x2c
   1ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac90:	2800      	cmp	r0, #0
   1ac92:	dd0e      	ble.n	1acb2 <_wcsnrtombs_l+0xaa>
   1ac94:	9b04      	ldr	r3, [sp, #16]
   1ac96:	9d01      	ldr	r5, [sp, #4]
   1ac98:	4418      	add	r0, r3
   1ac9a:	1e5a      	subs	r2, r3, #1
   1ac9c:	a907      	add	r1, sp, #28
   1ac9e:	f100 3eff 	add.w	lr, r0, #4294967295
   1aca2:	f811 3b01 	ldrb.w	r3, [r1], #1
   1aca6:	f802 3f01 	strb.w	r3, [r2, #1]!
   1acaa:	4572      	cmp	r2, lr
   1acac:	d1f9      	bne.n	1aca2 <_wcsnrtombs_l+0x9a>
   1acae:	9501      	str	r5, [sp, #4]
   1acb0:	9004      	str	r0, [sp, #16]
   1acb2:	9b05      	ldr	r3, [sp, #20]
   1acb4:	681a      	ldr	r2, [r3, #0]
   1acb6:	3204      	adds	r2, #4
   1acb8:	601a      	str	r2, [r3, #0]
   1acba:	9b01      	ldr	r3, [sp, #4]
   1acbc:	681a      	ldr	r2, [r3, #0]
   1acbe:	2a00      	cmp	r2, #0
   1acc0:	d1c4      	bne.n	1ac4c <_wcsnrtombs_l+0x44>
   1acc2:	9b03      	ldr	r3, [sp, #12]
   1acc4:	b10b      	cbz	r3, 1acca <_wcsnrtombs_l+0xc2>
   1acc6:	9b05      	ldr	r3, [sp, #20]
   1acc8:	601a      	str	r2, [r3, #0]
   1acca:	f10c 36ff 	add.w	r6, ip, #4294967295
   1acce:	2200      	movs	r2, #0
   1acd0:	4630      	mov	r0, r6
   1acd2:	f8c8 2000 	str.w	r2, [r8]
   1acd6:	b00b      	add	sp, #44	; 0x2c
   1acd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acdc:	9b03      	ldr	r3, [sp, #12]
   1acde:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   1ace2:	2b00      	cmp	r3, #0
   1ace4:	d1a0      	bne.n	1ac28 <_wcsnrtombs_l+0x20>
   1ace6:	9b05      	ldr	r3, [sp, #20]
   1ace8:	f04f 37ff 	mov.w	r7, #4294967295
   1acec:	681d      	ldr	r5, [r3, #0]
   1acee:	e79f      	b.n	1ac30 <_wcsnrtombs_l+0x28>
   1acf0:	4606      	mov	r6, r0
   1acf2:	218a      	movs	r1, #138	; 0x8a
   1acf4:	2200      	movs	r2, #0
   1acf6:	4630      	mov	r0, r6
   1acf8:	f8c9 1000 	str.w	r1, [r9]
   1acfc:	f8c8 2000 	str.w	r2, [r8]
   1ad00:	b00b      	add	sp, #44	; 0x2c
   1ad02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad06:	463e      	mov	r6, r7
   1ad08:	e7be      	b.n	1ac88 <_wcsnrtombs_l+0x80>
   1ad0a:	4666      	mov	r6, ip
   1ad0c:	e7bc      	b.n	1ac88 <_wcsnrtombs_l+0x80>
   1ad0e:	bf00      	nop

0001ad10 <_wcsnrtombs_r>:
   1ad10:	b510      	push	{r4, lr}
   1ad12:	b084      	sub	sp, #16
   1ad14:	4c05      	ldr	r4, [pc, #20]	; (1ad2c <_wcsnrtombs_r+0x1c>)
   1ad16:	9806      	ldr	r0, [sp, #24]
   1ad18:	9000      	str	r0, [sp, #0]
   1ad1a:	9807      	ldr	r0, [sp, #28]
   1ad1c:	9001      	str	r0, [sp, #4]
   1ad1e:	4804      	ldr	r0, [pc, #16]	; (1ad30 <_wcsnrtombs_r+0x20>)
   1ad20:	6800      	ldr	r0, [r0, #0]
   1ad22:	9402      	str	r4, [sp, #8]
   1ad24:	f7ff ff70 	bl	1ac08 <_wcsnrtombs_l>
   1ad28:	b004      	add	sp, #16
   1ad2a:	bd10      	pop	{r4, pc}
   1ad2c:	20008e4c 	.word	0x20008e4c
   1ad30:	200093d4 	.word	0x200093d4

0001ad34 <category>:
   1ad34:	4b15      	ldr	r3, [pc, #84]	; (1ad8c <category+0x58>)
   1ad36:	4298      	cmp	r0, r3
   1ad38:	d823      	bhi.n	1ad82 <category+0x4e>
   1ad3a:	b570      	push	{r4, r5, r6, lr}
   1ad3c:	4e14      	ldr	r6, [pc, #80]	; (1ad90 <category+0x5c>)
   1ad3e:	f04f 0e00 	mov.w	lr, #0
   1ad42:	f640 04db 	movw	r4, #2267	; 0x8db
   1ad46:	e003      	b.n	1ad50 <category+0x1c>
   1ad48:	f102 0e01 	add.w	lr, r2, #1
   1ad4c:	45a6      	cmp	lr, r4
   1ad4e:	dc16      	bgt.n	1ad7e <category+0x4a>
   1ad50:	eb04 020e 	add.w	r2, r4, lr
   1ad54:	f022 0301 	bic.w	r3, r2, #1
   1ad58:	eb03 0362 	add.w	r3, r3, r2, asr #1
   1ad5c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   1ad60:	1052      	asrs	r2, r2, #1
   1ad62:	7859      	ldrb	r1, [r3, #1]
   1ad64:	885d      	ldrh	r5, [r3, #2]
   1ad66:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   1ad6a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1ad6e:	448c      	add	ip, r1
   1ad70:	4560      	cmp	r0, ip
   1ad72:	d8e9      	bhi.n	1ad48 <category+0x14>
   1ad74:	4288      	cmp	r0, r1
   1ad76:	d206      	bcs.n	1ad86 <category+0x52>
   1ad78:	1e54      	subs	r4, r2, #1
   1ad7a:	45a6      	cmp	lr, r4
   1ad7c:	dde8      	ble.n	1ad50 <category+0x1c>
   1ad7e:	20ff      	movs	r0, #255	; 0xff
   1ad80:	bd70      	pop	{r4, r5, r6, pc}
   1ad82:	20ff      	movs	r0, #255	; 0xff
   1ad84:	4770      	bx	lr
   1ad86:	7818      	ldrb	r0, [r3, #0]
   1ad88:	bd70      	pop	{r4, r5, r6, pc}
   1ad8a:	bf00      	nop
   1ad8c:	000e01ef 	.word	0x000e01ef
   1ad90:	20002ba0 	.word	0x20002ba0

0001ad94 <__smakebuf_r>:
   1ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad98:	898b      	ldrh	r3, [r1, #12]
   1ad9a:	460c      	mov	r4, r1
   1ad9c:	0799      	lsls	r1, r3, #30
   1ad9e:	b096      	sub	sp, #88	; 0x58
   1ada0:	d508      	bpl.n	1adb4 <__smakebuf_r+0x20>
   1ada2:	f104 0343 	add.w	r3, r4, #67	; 0x43
   1ada6:	2201      	movs	r2, #1
   1ada8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   1adac:	6023      	str	r3, [r4, #0]
   1adae:	b016      	add	sp, #88	; 0x58
   1adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1adb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1adb8:	2900      	cmp	r1, #0
   1adba:	4606      	mov	r6, r0
   1adbc:	db25      	blt.n	1ae0a <__smakebuf_r+0x76>
   1adbe:	466a      	mov	r2, sp
   1adc0:	f000 f8ac 	bl	1af1c <_fstat_r>
   1adc4:	2800      	cmp	r0, #0
   1adc6:	db1f      	blt.n	1ae08 <__smakebuf_r+0x74>
   1adc8:	9d01      	ldr	r5, [sp, #4]
   1adca:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1adce:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1add2:	fab5 f585 	clz	r5, r5
   1add6:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1adda:	096d      	lsrs	r5, r5, #5
   1addc:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1ade0:	4641      	mov	r1, r8
   1ade2:	4630      	mov	r0, r6
   1ade4:	f7f5 fd34 	bl	10850 <_malloc_r>
   1ade8:	b1e0      	cbz	r0, 1ae24 <__smakebuf_r+0x90>
   1adea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1adee:	f8c4 8014 	str.w	r8, [r4, #20]
   1adf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1adf6:	6020      	str	r0, [r4, #0]
   1adf8:	6120      	str	r0, [r4, #16]
   1adfa:	81a3      	strh	r3, [r4, #12]
   1adfc:	bb35      	cbnz	r5, 1ae4c <__smakebuf_r+0xb8>
   1adfe:	433b      	orrs	r3, r7
   1ae00:	81a3      	strh	r3, [r4, #12]
   1ae02:	b016      	add	sp, #88	; 0x58
   1ae04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ae08:	89a3      	ldrh	r3, [r4, #12]
   1ae0a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1ae0e:	d019      	beq.n	1ae44 <__smakebuf_r+0xb0>
   1ae10:	f04f 0840 	mov.w	r8, #64	; 0x40
   1ae14:	2500      	movs	r5, #0
   1ae16:	4641      	mov	r1, r8
   1ae18:	4630      	mov	r0, r6
   1ae1a:	462f      	mov	r7, r5
   1ae1c:	f7f5 fd18 	bl	10850 <_malloc_r>
   1ae20:	2800      	cmp	r0, #0
   1ae22:	d1e2      	bne.n	1adea <__smakebuf_r+0x56>
   1ae24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ae28:	059a      	lsls	r2, r3, #22
   1ae2a:	d4c0      	bmi.n	1adae <__smakebuf_r+0x1a>
   1ae2c:	f023 0303 	bic.w	r3, r3, #3
   1ae30:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1ae34:	f043 0302 	orr.w	r3, r3, #2
   1ae38:	2101      	movs	r1, #1
   1ae3a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1ae3e:	81a3      	strh	r3, [r4, #12]
   1ae40:	6022      	str	r2, [r4, #0]
   1ae42:	e7b4      	b.n	1adae <__smakebuf_r+0x1a>
   1ae44:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1ae48:	462f      	mov	r7, r5
   1ae4a:	e7c9      	b.n	1ade0 <__smakebuf_r+0x4c>
   1ae4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1ae50:	4630      	mov	r0, r6
   1ae52:	f000 f879 	bl	1af48 <_isatty_r>
   1ae56:	b910      	cbnz	r0, 1ae5e <__smakebuf_r+0xca>
   1ae58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ae5c:	e7cf      	b.n	1adfe <__smakebuf_r+0x6a>
   1ae5e:	89a3      	ldrh	r3, [r4, #12]
   1ae60:	f023 0303 	bic.w	r3, r3, #3
   1ae64:	f043 0301 	orr.w	r3, r3, #1
   1ae68:	b21b      	sxth	r3, r3
   1ae6a:	e7c8      	b.n	1adfe <__smakebuf_r+0x6a>

0001ae6c <__swbuf_r>:
   1ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae6e:	460d      	mov	r5, r1
   1ae70:	4614      	mov	r4, r2
   1ae72:	4606      	mov	r6, r0
   1ae74:	b110      	cbz	r0, 1ae7c <__swbuf_r+0x10>
   1ae76:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1ae78:	2b00      	cmp	r3, #0
   1ae7a:	d04c      	beq.n	1af16 <__swbuf_r+0xaa>
   1ae7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1ae80:	69a3      	ldr	r3, [r4, #24]
   1ae82:	60a3      	str	r3, [r4, #8]
   1ae84:	0717      	lsls	r7, r2, #28
   1ae86:	b290      	uxth	r0, r2
   1ae88:	d51b      	bpl.n	1aec2 <__swbuf_r+0x56>
   1ae8a:	6923      	ldr	r3, [r4, #16]
   1ae8c:	b1cb      	cbz	r3, 1aec2 <__swbuf_r+0x56>
   1ae8e:	b2ed      	uxtb	r5, r5
   1ae90:	0481      	lsls	r1, r0, #18
   1ae92:	462f      	mov	r7, r5
   1ae94:	d522      	bpl.n	1aedc <__swbuf_r+0x70>
   1ae96:	6822      	ldr	r2, [r4, #0]
   1ae98:	6961      	ldr	r1, [r4, #20]
   1ae9a:	1ad3      	subs	r3, r2, r3
   1ae9c:	4299      	cmp	r1, r3
   1ae9e:	dd29      	ble.n	1aef4 <__swbuf_r+0x88>
   1aea0:	3301      	adds	r3, #1
   1aea2:	68a1      	ldr	r1, [r4, #8]
   1aea4:	3901      	subs	r1, #1
   1aea6:	60a1      	str	r1, [r4, #8]
   1aea8:	1c51      	adds	r1, r2, #1
   1aeaa:	6021      	str	r1, [r4, #0]
   1aeac:	7015      	strb	r5, [r2, #0]
   1aeae:	6962      	ldr	r2, [r4, #20]
   1aeb0:	429a      	cmp	r2, r3
   1aeb2:	d027      	beq.n	1af04 <__swbuf_r+0x98>
   1aeb4:	89a3      	ldrh	r3, [r4, #12]
   1aeb6:	07db      	lsls	r3, r3, #31
   1aeb8:	d501      	bpl.n	1aebe <__swbuf_r+0x52>
   1aeba:	2d0a      	cmp	r5, #10
   1aebc:	d022      	beq.n	1af04 <__swbuf_r+0x98>
   1aebe:	4638      	mov	r0, r7
   1aec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aec2:	4621      	mov	r1, r4
   1aec4:	4630      	mov	r0, r6
   1aec6:	f7ff fdaf 	bl	1aa28 <__swsetup_r>
   1aeca:	bb08      	cbnz	r0, 1af10 <__swbuf_r+0xa4>
   1aecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1aed0:	6923      	ldr	r3, [r4, #16]
   1aed2:	b290      	uxth	r0, r2
   1aed4:	b2ed      	uxtb	r5, r5
   1aed6:	0481      	lsls	r1, r0, #18
   1aed8:	462f      	mov	r7, r5
   1aeda:	d4dc      	bmi.n	1ae96 <__swbuf_r+0x2a>
   1aedc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1aee0:	81a2      	strh	r2, [r4, #12]
   1aee2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1aee4:	6961      	ldr	r1, [r4, #20]
   1aee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1aeea:	6662      	str	r2, [r4, #100]	; 0x64
   1aeec:	6822      	ldr	r2, [r4, #0]
   1aeee:	1ad3      	subs	r3, r2, r3
   1aef0:	4299      	cmp	r1, r3
   1aef2:	dcd5      	bgt.n	1aea0 <__swbuf_r+0x34>
   1aef4:	4621      	mov	r1, r4
   1aef6:	4630      	mov	r0, r6
   1aef8:	f7fc fea0 	bl	17c3c <_fflush_r>
   1aefc:	b940      	cbnz	r0, 1af10 <__swbuf_r+0xa4>
   1aefe:	6822      	ldr	r2, [r4, #0]
   1af00:	2301      	movs	r3, #1
   1af02:	e7ce      	b.n	1aea2 <__swbuf_r+0x36>
   1af04:	4621      	mov	r1, r4
   1af06:	4630      	mov	r0, r6
   1af08:	f7fc fe98 	bl	17c3c <_fflush_r>
   1af0c:	2800      	cmp	r0, #0
   1af0e:	d0d6      	beq.n	1aebe <__swbuf_r+0x52>
   1af10:	f04f 37ff 	mov.w	r7, #4294967295
   1af14:	e7d3      	b.n	1aebe <__swbuf_r+0x52>
   1af16:	f7f7 f9d3 	bl	122c0 <__sinit>
   1af1a:	e7af      	b.n	1ae7c <__swbuf_r+0x10>

0001af1c <_fstat_r>:
   1af1c:	b570      	push	{r4, r5, r6, lr}
   1af1e:	460c      	mov	r4, r1
   1af20:	4d08      	ldr	r5, [pc, #32]	; (1af44 <_fstat_r+0x28>)
   1af22:	4603      	mov	r3, r0
   1af24:	2600      	movs	r6, #0
   1af26:	4620      	mov	r0, r4
   1af28:	4611      	mov	r1, r2
   1af2a:	461c      	mov	r4, r3
   1af2c:	602e      	str	r6, [r5, #0]
   1af2e:	f7f3 ff01 	bl	ed34 <_fstat>
   1af32:	1c43      	adds	r3, r0, #1
   1af34:	d000      	beq.n	1af38 <_fstat_r+0x1c>
   1af36:	bd70      	pop	{r4, r5, r6, pc}
   1af38:	682b      	ldr	r3, [r5, #0]
   1af3a:	2b00      	cmp	r3, #0
   1af3c:	d0fb      	beq.n	1af36 <_fstat_r+0x1a>
   1af3e:	6023      	str	r3, [r4, #0]
   1af40:	bd70      	pop	{r4, r5, r6, pc}
   1af42:	bf00      	nop
   1af44:	2001574c 	.word	0x2001574c

0001af48 <_isatty_r>:
   1af48:	b538      	push	{r3, r4, r5, lr}
   1af4a:	4d07      	ldr	r5, [pc, #28]	; (1af68 <_isatty_r+0x20>)
   1af4c:	2200      	movs	r2, #0
   1af4e:	4604      	mov	r4, r0
   1af50:	4608      	mov	r0, r1
   1af52:	602a      	str	r2, [r5, #0]
   1af54:	f7f3 fef4 	bl	ed40 <_isatty>
   1af58:	1c43      	adds	r3, r0, #1
   1af5a:	d000      	beq.n	1af5e <_isatty_r+0x16>
   1af5c:	bd38      	pop	{r3, r4, r5, pc}
   1af5e:	682b      	ldr	r3, [r5, #0]
   1af60:	2b00      	cmp	r3, #0
   1af62:	d0fb      	beq.n	1af5c <_isatty_r+0x14>
   1af64:	6023      	str	r3, [r4, #0]
   1af66:	bd38      	pop	{r3, r4, r5, pc}
   1af68:	2001574c 	.word	0x2001574c

0001af6c <__aeabi_drsub>:
   1af6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1af70:	e002      	b.n	1af78 <__adddf3>
   1af72:	bf00      	nop

0001af74 <__aeabi_dsub>:
   1af74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001af78 <__adddf3>:
   1af78:	b530      	push	{r4, r5, lr}
   1af7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1af7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1af82:	ea94 0f05 	teq	r4, r5
   1af86:	bf08      	it	eq
   1af88:	ea90 0f02 	teqeq	r0, r2
   1af8c:	bf1f      	itttt	ne
   1af8e:	ea54 0c00 	orrsne.w	ip, r4, r0
   1af92:	ea55 0c02 	orrsne.w	ip, r5, r2
   1af96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1af9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1af9e:	f000 80e2 	beq.w	1b166 <__adddf3+0x1ee>
   1afa2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1afa6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1afaa:	bfb8      	it	lt
   1afac:	426d      	neglt	r5, r5
   1afae:	dd0c      	ble.n	1afca <__adddf3+0x52>
   1afb0:	442c      	add	r4, r5
   1afb2:	ea80 0202 	eor.w	r2, r0, r2
   1afb6:	ea81 0303 	eor.w	r3, r1, r3
   1afba:	ea82 0000 	eor.w	r0, r2, r0
   1afbe:	ea83 0101 	eor.w	r1, r3, r1
   1afc2:	ea80 0202 	eor.w	r2, r0, r2
   1afc6:	ea81 0303 	eor.w	r3, r1, r3
   1afca:	2d36      	cmp	r5, #54	; 0x36
   1afcc:	bf88      	it	hi
   1afce:	bd30      	pophi	{r4, r5, pc}
   1afd0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1afd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1afd8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1afdc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1afe0:	d002      	beq.n	1afe8 <__adddf3+0x70>
   1afe2:	4240      	negs	r0, r0
   1afe4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1afe8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1afec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1aff0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1aff4:	d002      	beq.n	1affc <__adddf3+0x84>
   1aff6:	4252      	negs	r2, r2
   1aff8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1affc:	ea94 0f05 	teq	r4, r5
   1b000:	f000 80a7 	beq.w	1b152 <__adddf3+0x1da>
   1b004:	f1a4 0401 	sub.w	r4, r4, #1
   1b008:	f1d5 0e20 	rsbs	lr, r5, #32
   1b00c:	db0d      	blt.n	1b02a <__adddf3+0xb2>
   1b00e:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b012:	fa22 f205 	lsr.w	r2, r2, r5
   1b016:	1880      	adds	r0, r0, r2
   1b018:	f141 0100 	adc.w	r1, r1, #0
   1b01c:	fa03 f20e 	lsl.w	r2, r3, lr
   1b020:	1880      	adds	r0, r0, r2
   1b022:	fa43 f305 	asr.w	r3, r3, r5
   1b026:	4159      	adcs	r1, r3
   1b028:	e00e      	b.n	1b048 <__adddf3+0xd0>
   1b02a:	f1a5 0520 	sub.w	r5, r5, #32
   1b02e:	f10e 0e20 	add.w	lr, lr, #32
   1b032:	2a01      	cmp	r2, #1
   1b034:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b038:	bf28      	it	cs
   1b03a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b03e:	fa43 f305 	asr.w	r3, r3, r5
   1b042:	18c0      	adds	r0, r0, r3
   1b044:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b048:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b04c:	d507      	bpl.n	1b05e <__adddf3+0xe6>
   1b04e:	f04f 0e00 	mov.w	lr, #0
   1b052:	f1dc 0c00 	rsbs	ip, ip, #0
   1b056:	eb7e 0000 	sbcs.w	r0, lr, r0
   1b05a:	eb6e 0101 	sbc.w	r1, lr, r1
   1b05e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1b062:	d31b      	bcc.n	1b09c <__adddf3+0x124>
   1b064:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1b068:	d30c      	bcc.n	1b084 <__adddf3+0x10c>
   1b06a:	0849      	lsrs	r1, r1, #1
   1b06c:	ea5f 0030 	movs.w	r0, r0, rrx
   1b070:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1b074:	f104 0401 	add.w	r4, r4, #1
   1b078:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1b07c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b080:	f080 809a 	bcs.w	1b1b8 <__adddf3+0x240>
   1b084:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b088:	bf08      	it	eq
   1b08a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b08e:	f150 0000 	adcs.w	r0, r0, #0
   1b092:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b096:	ea41 0105 	orr.w	r1, r1, r5
   1b09a:	bd30      	pop	{r4, r5, pc}
   1b09c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b0a0:	4140      	adcs	r0, r0
   1b0a2:	eb41 0101 	adc.w	r1, r1, r1
   1b0a6:	3c01      	subs	r4, #1
   1b0a8:	bf28      	it	cs
   1b0aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1b0ae:	d2e9      	bcs.n	1b084 <__adddf3+0x10c>
   1b0b0:	f091 0f00 	teq	r1, #0
   1b0b4:	bf04      	itt	eq
   1b0b6:	4601      	moveq	r1, r0
   1b0b8:	2000      	moveq	r0, #0
   1b0ba:	fab1 f381 	clz	r3, r1
   1b0be:	bf08      	it	eq
   1b0c0:	3320      	addeq	r3, #32
   1b0c2:	f1a3 030b 	sub.w	r3, r3, #11
   1b0c6:	f1b3 0220 	subs.w	r2, r3, #32
   1b0ca:	da0c      	bge.n	1b0e6 <__adddf3+0x16e>
   1b0cc:	320c      	adds	r2, #12
   1b0ce:	dd08      	ble.n	1b0e2 <__adddf3+0x16a>
   1b0d0:	f102 0c14 	add.w	ip, r2, #20
   1b0d4:	f1c2 020c 	rsb	r2, r2, #12
   1b0d8:	fa01 f00c 	lsl.w	r0, r1, ip
   1b0dc:	fa21 f102 	lsr.w	r1, r1, r2
   1b0e0:	e00c      	b.n	1b0fc <__adddf3+0x184>
   1b0e2:	f102 0214 	add.w	r2, r2, #20
   1b0e6:	bfd8      	it	le
   1b0e8:	f1c2 0c20 	rsble	ip, r2, #32
   1b0ec:	fa01 f102 	lsl.w	r1, r1, r2
   1b0f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b0f4:	bfdc      	itt	le
   1b0f6:	ea41 010c 	orrle.w	r1, r1, ip
   1b0fa:	4090      	lslle	r0, r2
   1b0fc:	1ae4      	subs	r4, r4, r3
   1b0fe:	bfa2      	ittt	ge
   1b100:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b104:	4329      	orrge	r1, r5
   1b106:	bd30      	popge	{r4, r5, pc}
   1b108:	ea6f 0404 	mvn.w	r4, r4
   1b10c:	3c1f      	subs	r4, #31
   1b10e:	da1c      	bge.n	1b14a <__adddf3+0x1d2>
   1b110:	340c      	adds	r4, #12
   1b112:	dc0e      	bgt.n	1b132 <__adddf3+0x1ba>
   1b114:	f104 0414 	add.w	r4, r4, #20
   1b118:	f1c4 0220 	rsb	r2, r4, #32
   1b11c:	fa20 f004 	lsr.w	r0, r0, r4
   1b120:	fa01 f302 	lsl.w	r3, r1, r2
   1b124:	ea40 0003 	orr.w	r0, r0, r3
   1b128:	fa21 f304 	lsr.w	r3, r1, r4
   1b12c:	ea45 0103 	orr.w	r1, r5, r3
   1b130:	bd30      	pop	{r4, r5, pc}
   1b132:	f1c4 040c 	rsb	r4, r4, #12
   1b136:	f1c4 0220 	rsb	r2, r4, #32
   1b13a:	fa20 f002 	lsr.w	r0, r0, r2
   1b13e:	fa01 f304 	lsl.w	r3, r1, r4
   1b142:	ea40 0003 	orr.w	r0, r0, r3
   1b146:	4629      	mov	r1, r5
   1b148:	bd30      	pop	{r4, r5, pc}
   1b14a:	fa21 f004 	lsr.w	r0, r1, r4
   1b14e:	4629      	mov	r1, r5
   1b150:	bd30      	pop	{r4, r5, pc}
   1b152:	f094 0f00 	teq	r4, #0
   1b156:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1b15a:	bf06      	itte	eq
   1b15c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1b160:	3401      	addeq	r4, #1
   1b162:	3d01      	subne	r5, #1
   1b164:	e74e      	b.n	1b004 <__adddf3+0x8c>
   1b166:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b16a:	bf18      	it	ne
   1b16c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b170:	d029      	beq.n	1b1c6 <__adddf3+0x24e>
   1b172:	ea94 0f05 	teq	r4, r5
   1b176:	bf08      	it	eq
   1b178:	ea90 0f02 	teqeq	r0, r2
   1b17c:	d005      	beq.n	1b18a <__adddf3+0x212>
   1b17e:	ea54 0c00 	orrs.w	ip, r4, r0
   1b182:	bf04      	itt	eq
   1b184:	4619      	moveq	r1, r3
   1b186:	4610      	moveq	r0, r2
   1b188:	bd30      	pop	{r4, r5, pc}
   1b18a:	ea91 0f03 	teq	r1, r3
   1b18e:	bf1e      	ittt	ne
   1b190:	2100      	movne	r1, #0
   1b192:	2000      	movne	r0, #0
   1b194:	bd30      	popne	{r4, r5, pc}
   1b196:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1b19a:	d105      	bne.n	1b1a8 <__adddf3+0x230>
   1b19c:	0040      	lsls	r0, r0, #1
   1b19e:	4149      	adcs	r1, r1
   1b1a0:	bf28      	it	cs
   1b1a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1b1a6:	bd30      	pop	{r4, r5, pc}
   1b1a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1b1ac:	bf3c      	itt	cc
   1b1ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1b1b2:	bd30      	popcc	{r4, r5, pc}
   1b1b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b1b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1b1bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b1c0:	f04f 0000 	mov.w	r0, #0
   1b1c4:	bd30      	pop	{r4, r5, pc}
   1b1c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b1ca:	bf1a      	itte	ne
   1b1cc:	4619      	movne	r1, r3
   1b1ce:	4610      	movne	r0, r2
   1b1d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1b1d4:	bf1c      	itt	ne
   1b1d6:	460b      	movne	r3, r1
   1b1d8:	4602      	movne	r2, r0
   1b1da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b1de:	bf06      	itte	eq
   1b1e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1b1e4:	ea91 0f03 	teqeq	r1, r3
   1b1e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1b1ec:	bd30      	pop	{r4, r5, pc}
   1b1ee:	bf00      	nop

0001b1f0 <__aeabi_ui2d>:
   1b1f0:	f090 0f00 	teq	r0, #0
   1b1f4:	bf04      	itt	eq
   1b1f6:	2100      	moveq	r1, #0
   1b1f8:	4770      	bxeq	lr
   1b1fa:	b530      	push	{r4, r5, lr}
   1b1fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b200:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b204:	f04f 0500 	mov.w	r5, #0
   1b208:	f04f 0100 	mov.w	r1, #0
   1b20c:	e750      	b.n	1b0b0 <__adddf3+0x138>
   1b20e:	bf00      	nop

0001b210 <__aeabi_i2d>:
   1b210:	f090 0f00 	teq	r0, #0
   1b214:	bf04      	itt	eq
   1b216:	2100      	moveq	r1, #0
   1b218:	4770      	bxeq	lr
   1b21a:	b530      	push	{r4, r5, lr}
   1b21c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b220:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b224:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1b228:	bf48      	it	mi
   1b22a:	4240      	negmi	r0, r0
   1b22c:	f04f 0100 	mov.w	r1, #0
   1b230:	e73e      	b.n	1b0b0 <__adddf3+0x138>
   1b232:	bf00      	nop

0001b234 <__aeabi_f2d>:
   1b234:	0042      	lsls	r2, r0, #1
   1b236:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1b23a:	ea4f 0131 	mov.w	r1, r1, rrx
   1b23e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1b242:	bf1f      	itttt	ne
   1b244:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1b248:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b24c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1b250:	4770      	bxne	lr
   1b252:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1b256:	bf08      	it	eq
   1b258:	4770      	bxeq	lr
   1b25a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1b25e:	bf04      	itt	eq
   1b260:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1b264:	4770      	bxeq	lr
   1b266:	b530      	push	{r4, r5, lr}
   1b268:	f44f 7460 	mov.w	r4, #896	; 0x380
   1b26c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b270:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b274:	e71c      	b.n	1b0b0 <__adddf3+0x138>
   1b276:	bf00      	nop

0001b278 <__aeabi_ul2d>:
   1b278:	ea50 0201 	orrs.w	r2, r0, r1
   1b27c:	bf08      	it	eq
   1b27e:	4770      	bxeq	lr
   1b280:	b530      	push	{r4, r5, lr}
   1b282:	f04f 0500 	mov.w	r5, #0
   1b286:	e00a      	b.n	1b29e <__aeabi_l2d+0x16>

0001b288 <__aeabi_l2d>:
   1b288:	ea50 0201 	orrs.w	r2, r0, r1
   1b28c:	bf08      	it	eq
   1b28e:	4770      	bxeq	lr
   1b290:	b530      	push	{r4, r5, lr}
   1b292:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1b296:	d502      	bpl.n	1b29e <__aeabi_l2d+0x16>
   1b298:	4240      	negs	r0, r0
   1b29a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b29e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b2a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b2a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1b2aa:	f43f aed8 	beq.w	1b05e <__adddf3+0xe6>
   1b2ae:	f04f 0203 	mov.w	r2, #3
   1b2b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b2b6:	bf18      	it	ne
   1b2b8:	3203      	addne	r2, #3
   1b2ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b2be:	bf18      	it	ne
   1b2c0:	3203      	addne	r2, #3
   1b2c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1b2c6:	f1c2 0320 	rsb	r3, r2, #32
   1b2ca:	fa00 fc03 	lsl.w	ip, r0, r3
   1b2ce:	fa20 f002 	lsr.w	r0, r0, r2
   1b2d2:	fa01 fe03 	lsl.w	lr, r1, r3
   1b2d6:	ea40 000e 	orr.w	r0, r0, lr
   1b2da:	fa21 f102 	lsr.w	r1, r1, r2
   1b2de:	4414      	add	r4, r2
   1b2e0:	e6bd      	b.n	1b05e <__adddf3+0xe6>
   1b2e2:	bf00      	nop

0001b2e4 <__aeabi_d2lz>:
   1b2e4:	b508      	push	{r3, lr}
   1b2e6:	4602      	mov	r2, r0
   1b2e8:	460b      	mov	r3, r1
   1b2ea:	ec43 2b17 	vmov	d7, r2, r3
   1b2ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1b2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b2f6:	d403      	bmi.n	1b300 <__aeabi_d2lz+0x1c>
   1b2f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b2fc:	f000 b80c 	b.w	1b318 <__aeabi_d2ulz>
   1b300:	eeb1 7b47 	vneg.f64	d7, d7
   1b304:	ec51 0b17 	vmov	r0, r1, d7
   1b308:	f000 f806 	bl	1b318 <__aeabi_d2ulz>
   1b30c:	4240      	negs	r0, r0
   1b30e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b312:	bd08      	pop	{r3, pc}
   1b314:	0000      	movs	r0, r0
	...

0001b318 <__aeabi_d2ulz>:
   1b318:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 1b348 <__aeabi_d2ulz+0x30>
   1b31c:	ec41 0b17 	vmov	d7, r0, r1
   1b320:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 1b350 <__aeabi_d2ulz+0x38>
   1b324:	ee27 6b06 	vmul.f64	d6, d7, d6
   1b328:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   1b32c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   1b330:	eea4 7b45 	vfms.f64	d7, d4, d5
   1b334:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   1b338:	ee16 1a10 	vmov	r1, s12
   1b33c:	ee17 0a90 	vmov	r0, s15
   1b340:	4770      	bx	lr
   1b342:	bf00      	nop
   1b344:	f3af 8000 	nop.w
   1b348:	00000000 	.word	0x00000000
   1b34c:	3df00000 	.word	0x3df00000
   1b350:	00000000 	.word	0x00000000
   1b354:	41f00000 	.word	0x41f00000

0001b358 <__usb_init_veneer>:
   1b358:	f85f f000 	ldr.w	pc, [pc]	; 1b35c <__usb_init_veneer+0x4>
   1b35c:	60002681 	.word	0x60002681

0001b360 <___ZN16CrashReportClasscvbEv_veneer>:
   1b360:	f85f f000 	ldr.w	pc, [pc]	; 1b364 <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1b364:	60001ff5 	.word	0x60001ff5

0001b368 <___reboot_Teensyduino__veneer>:
   1b368:	f85f f000 	ldr.w	pc, [pc]	; 1b36c <___reboot_Teensyduino__veneer+0x4>
   1b36c:	60002769 	.word	0x60002769

0001b370 <___Z12do_hibernatev_veneer>:
   1b370:	f85f f000 	ldr.w	pc, [pc]	; 1b374 <___Z12do_hibernatev_veneer+0x4>
   1b374:	60001675 	.word	0x60001675

0001b378 <___ZN7TwoWire5beginEv_veneer>:
   1b378:	f85f f000 	ldr.w	pc, [pc]	; 1b37c <___ZN7TwoWire5beginEv_veneer+0x4>
   1b37c:	600017ed 	.word	0x600017ed

0001b380 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   1b380:	f85f f000 	ldr.w	pc, [pc]	; 1b384 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1b384:	600018f1 	.word	0x600018f1

0001b388 <___init_veneer>:
   1b388:	f85f f000 	ldr.w	pc, [pc]	; 1b38c <___init_veneer+0x4>
   1b38c:	60002811 	.word	0x60002811

Disassembly of section .fini:

0001b390 <_fini>:
   1b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b392:	bf00      	nop

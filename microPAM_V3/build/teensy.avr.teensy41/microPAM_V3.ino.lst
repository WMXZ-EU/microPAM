
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\A5394982E70389E0D0C97A4E173256C7/microPAM_V3.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200096c0 	.word	0x200096c0
6000142c:	200354a0 	.word	0x200354a0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 fd48 	bl	60001ed4 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 fce6 	bl	60001ee4 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 ff14 	bl	60002378 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f001 f8b9 	bl	600026d8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 fd22 	bl	60001ff4 <configure_external_ram>
	analog_init();
600015b0:	f001 f846 	bl	60002640 <analog_init>
	pwm_init();
600015b4:	f001 f874 	bl	600026a0 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 ff0c 	bl	600023d4 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 fc8c 	bl	60001ed8 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 ff9d 	bl	60002504 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 fc85 	bl	60001ee0 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 fc81 	bl	60001edc <startup_default_late_hook>
	__libc_init_array();
600015da:	f001 f875 	bl	600026c8 <____libc_init_array_veneer>
	main();
600015de:	f001 f86b 	bl	600026b8 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0001aa18 	.word	0x0001aa18
600015f0:	60002840 	.word	0x60002840
600015f4:	00000000 	.word	0x00000000
600015f8:	200096c0 	.word	0x200096c0
600015fc:	6001d25c 	.word	0x6001d25c
60001600:	20000000 	.word	0x20000000
60001604:	20009400 	.word	0x20009400
60001608:	0000e1f1 	.word	0x0000e1f1
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0000cfc9 	.word	0x0000cfc9
6000161c:	20035420 	.word	0x20035420
60001620:	0000cfcd 	.word	0x0000cfcd
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	016e3600 	.word	0x016e3600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20035424 	.word	0x20035424
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaff 	.word	0xaaaaaaff
6000166c:	00200007 	.word	0x00200007
60001670:	20060000 	.word	0x20060000

60001674 <do_hibernate()>:
  }
#else
FLASHMEM
void do_hibernate(void)
{
    uint32_t tmp = SNVS_LPCR; // save control register
60001674:	4a17      	ldr	r2, [pc, #92]	; (600016d4 <do_hibernate()+0x60>)
{
60001676:	b538      	push	{r3, r4, r5, lr}
    uint32_t tmp = SNVS_LPCR; // save control register
60001678:	6b95      	ldr	r5, [r2, #56]	; 0x38

    SNVS_LPSR |= 1;
6000167a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
6000167c:	f043 0301 	orr.w	r3, r3, #1
60001680:	64d3      	str	r3, [r2, #76]	; 0x4c

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
60001682:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001684:	f023 0302 	bic.w	r3, r3, #2
60001688:	6393      	str	r3, [r2, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
6000168a:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000168c:	0799      	lsls	r1, r3, #30
6000168e:	d4fc      	bmi.n	6000168a <do_hibernate()+0x16>

    __disable_irq();
60001690:	b672      	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
60001692:	4c10      	ldr	r4, [pc, #64]	; (600016d4 <do_hibernate()+0x60>)
60001694:	6d20      	ldr	r0, [r4, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
60001696:	6d63      	ldr	r3, [r4, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
60001698:	6d62      	ldr	r2, [r4, #84]	; 0x54
6000169a:	6d21      	ldr	r1, [r4, #80]	; 0x50
6000169c:	429a      	cmp	r2, r3
6000169e:	d1f9      	bne.n	60001694 <do_hibernate()+0x20>
600016a0:	4281      	cmp	r1, r0
600016a2:	d1f7      	bne.n	60001694 <do_hibernate()+0x20>
    uint32_t secso = (msb << 17) | (lsb >> 15);
600016a4:	0bdb      	lsrs	r3, r3, #15

    uint32_t secs = estAlarmTime(secso);
600016a6:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
600016aa:	f001 f811 	bl	600026d0 <___Z12estAlarmTimem_veneer>
    //set alarm
    //secs += nsec;
    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
600016ae:	4909      	ldr	r1, [pc, #36]	; (600016d4 <do_hibernate()+0x60>)
    SNVS_LPTAR = secs;
600016b0:	65a0      	str	r0, [r4, #88]	; 0x58
    while (SNVS_LPTAR != secs);
600016b2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
600016b4:	4283      	cmp	r3, r0
600016b6:	d1fc      	bne.n	600016b2 <do_hibernate()+0x3e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
600016b8:	f045 0502 	orr.w	r5, r5, #2
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
600016bc:	4a05      	ldr	r2, [pc, #20]	; (600016d4 <do_hibernate()+0x60>)
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
600016be:	638d      	str	r5, [r1, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
600016c0:	6b93      	ldr	r3, [r2, #56]	; 0x38
600016c2:	079b      	lsls	r3, r3, #30
600016c4:	d5fc      	bpl.n	600016c0 <do_hibernate()+0x4c>
//    NVIC_CLEAR_PENDING(IRQ_SNVS_ONOFF);
//    attachInterruptVector(IRQ_SNVS_ONOFF, &call_back);
//    NVIC_SET_PRIORITY(IRQ_SNVS_ONOFF, 255); //lowest priority
//    asm volatile ("dsb"); //make sure to write before interrupt-enable
//    NVIC_ENABLE_IRQ(IRQ_SNVS_ONOFF);
    __enable_irq();
600016c6:	b662      	cpsie	i
  
    SNVS_LPCR |= (1 << 6); // turn off power
600016c8:	6b93      	ldr	r3, [r2, #56]	; 0x38
600016ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600016ce:	6393      	str	r3, [r2, #56]	; 0x38
    while (1) asm("wfi");  
600016d0:	bf30      	wfi
600016d2:	e7fd      	b.n	600016d0 <do_hibernate()+0x5c>
600016d4:	400d4000 	.word	0x400d4000

600016d8 <CrashReportClass::clear()>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
600016d8:	4b20      	ldr	r3, [pc, #128]	; (6000175c <CrashReportClass::clear()+0x84>)
600016da:	2000      	movs	r0, #0
{
600016dc:	b430      	push	{r4, r5}
	info->ipsr  = 0;
600016de:	e9c3 0020 	strd	r0, r0, [r3, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
600016e2:	e9c3 0022 	strd	r0, r0, [r3, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
600016e6:	e9c3 0024 	strd	r0, r0, [r3, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
600016ea:	e9c3 0026 	strd	r0, r0, [r3, #152]	; 0x98
	info->crc = 0;
600016ee:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600016f2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
600016f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016fa:	4919      	ldr	r1, [pc, #100]	; (60001760 <CrashReportClass::clear()+0x88>)
600016fc:	4a19      	ldr	r2, [pc, #100]	; (60001764 <CrashReportClass::clear()+0x8c>)
600016fe:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
60001702:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001706:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000170a:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000170e:	4b16      	ldr	r3, [pc, #88]	; (60001768 <CrashReportClass::clear()+0x90>)
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60001710:	4601      	mov	r1, r0
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001712:	4c16      	ldr	r4, [pc, #88]	; (6000176c <CrashReportClass::clear()+0x94>)
60001714:	2201      	movs	r2, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001716:	689d      	ldr	r5, [r3, #8]
		while (len > 0) {
60001718:	f604 74dc 	addw	r4, r4, #4060	; 0xfdc
6000171c:	609d      	str	r5, [r3, #8]
	SRC_GPR5 = 0;
6000171e:	6318      	str	r0, [r3, #48]	; 0x30
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60001720:	4b13      	ldr	r3, [pc, #76]	; (60001770 <CrashReportClass::clear()+0x98>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001722:	f844 0c1c 	str.w	r0, [r4, #-28]
			a += *p++;
60001726:	4618      	mov	r0, r3
60001728:	3302      	adds	r3, #2
6000172a:	8800      	ldrh	r0, [r0, #0]
		while (len > 0) {
6000172c:	42a3      	cmp	r3, r4
			a += *p++;
6000172e:	fa12 f280 	uxtah	r2, r2, r0
			b += a;
60001732:	4411      	add	r1, r2
		while (len > 0) {
60001734:	d1f7      	bne.n	60001726 <CrashReportClass::clear()+0x4e>
			len -= 2;
		}
		a = a & 65535;
60001736:	b292      	uxth	r2, r2
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001738:	4b0c      	ldr	r3, [pc, #48]	; (6000176c <CrashReportClass::clear()+0x94>)
		b = b & 65535;
		return a | (b << 16);
6000173a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
6000173e:	f8c3 2fdc 	str.w	r2, [r3, #4060]	; 0xfdc
	asm("dsb");
60001742:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001746:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000174a:	4a09      	ldr	r2, [pc, #36]	; (60001770 <CrashReportClass::clear()+0x98>)
6000174c:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
	asm("dsb");
60001750:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001754:	f3bf 8f6f 	isb	sy
}
60001758:	bc30      	pop	{r4, r5}
6000175a:	4770      	bx	lr
6000175c:	2027ff00 	.word	0x2027ff00
60001760:	2027ff80 	.word	0x2027ff80
60001764:	2027ffa0 	.word	0x2027ffa0
60001768:	400f8000 	.word	0x400f8000
6000176c:	2027f000 	.word	0x2027f000
60001770:	2027ffc0 	.word	0x2027ffc0

60001774 <CrashReportClass::printTo(Print&) const>:
	if (info->len != sizeof(*info) / 4) return 0;
60001774:	4bb2      	ldr	r3, [pc, #712]	; (60001a40 <CrashReportClass::printTo(Print&) const+0x2cc>)
60001776:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
6000177a:	2a0b      	cmp	r2, #11
{
6000177c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001780:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
60001782:	d11b      	bne.n	600017bc <CrashReportClass::printTo(Print&) const+0x48>
	crc = 0xFFFFFFFF;
60001784:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001788:	49ae      	ldr	r1, [pc, #696]	; (60001a44 <CrashReportClass::printTo(Print&) const+0x2d0>)
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
6000178a:	4baf      	ldr	r3, [pc, #700]	; (60001a48 <CrashReportClass::printTo(Print&) const+0x2d4>)
	while (data < end) {
6000178c:	4eaf      	ldr	r6, [pc, #700]	; (60001a4c <CrashReportClass::printTo(Print&) const+0x2d8>)
		crc ^= *data++;
6000178e:	f101 0c04 	add.w	ip, r1, #4
60001792:	4050      	eors	r0, r2
60001794:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001796:	f000 0201 	and.w	r2, r0, #1
6000179a:	3c01      	subs	r4, #1
6000179c:	fb03 f202 	mul.w	r2, r3, r2
600017a0:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
600017a4:	d1f7      	bne.n	60001796 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
600017a6:	45b4      	cmp	ip, r6
600017a8:	d002      	beq.n	600017b0 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
600017aa:	684a      	ldr	r2, [r1, #4]
600017ac:	4661      	mov	r1, ip
600017ae:	e7ee      	b.n	6000178e <CrashReportClass::printTo(Print&) const+0x1a>
	if (crc != info->crc) return 0;
600017b0:	f8df 828c 	ldr.w	r8, [pc, #652]	; 60001a40 <CrashReportClass::printTo(Print&) const+0x2cc>
600017b4:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
600017b8:	4298      	cmp	r0, r3
600017ba:	d079      	beq.n	600018b0 <CrashReportClass::printTo(Print&) const+0x13c>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600017bc:	682b      	ldr	r3, [r5, #0]
600017be:	2217      	movs	r2, #23
600017c0:	49a3      	ldr	r1, [pc, #652]	; (60001a50 <CrashReportClass::printTo(Print&) const+0x2dc>)
600017c2:	4628      	mov	r0, r5
600017c4:	685b      	ldr	r3, [r3, #4]
600017c6:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600017c8:	4628      	mov	r0, r5
600017ca:	f000 ff71 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017ce:	682b      	ldr	r3, [r5, #0]
600017d0:	2248      	movs	r2, #72	; 0x48
600017d2:	49a0      	ldr	r1, [pc, #640]	; (60001a54 <CrashReportClass::printTo(Print&) const+0x2e0>)
600017d4:	685b      	ldr	r3, [r3, #4]
600017d6:	4628      	mov	r0, r5
600017d8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017da:	4628      	mov	r0, r5
600017dc:	f000 ff68 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017e0:	682b      	ldr	r3, [r5, #0]
600017e2:	2249      	movs	r2, #73	; 0x49
600017e4:	499c      	ldr	r1, [pc, #624]	; (60001a58 <CrashReportClass::printTo(Print&) const+0x2e4>)
600017e6:	685b      	ldr	r3, [r3, #4]
600017e8:	4628      	mov	r0, r5
600017ea:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017ec:	4628      	mov	r0, r5
600017ee:	f000 ff5f 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017f2:	682b      	ldr	r3, [r5, #0]
600017f4:	2224      	movs	r2, #36	; 0x24
600017f6:	4999      	ldr	r1, [pc, #612]	; (60001a5c <CrashReportClass::printTo(Print&) const+0x2e8>)
600017f8:	685b      	ldr	r3, [r3, #4]
600017fa:	4628      	mov	r0, r5
600017fc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017fe:	4628      	mov	r0, r5
60001800:	f000 ff56 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001804:	682b      	ldr	r3, [r5, #0]
60001806:	2247      	movs	r2, #71	; 0x47
60001808:	4995      	ldr	r1, [pc, #596]	; (60001a60 <CrashReportClass::printTo(Print&) const+0x2ec>)
6000180a:	685b      	ldr	r3, [r3, #4]
6000180c:	4628      	mov	r0, r5
6000180e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001810:	4628      	mov	r0, r5
60001812:	f000 ff4d 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001816:	682b      	ldr	r3, [r5, #0]
60001818:	223f      	movs	r2, #63	; 0x3f
6000181a:	4992      	ldr	r1, [pc, #584]	; (60001a64 <CrashReportClass::printTo(Print&) const+0x2f0>)
6000181c:	685b      	ldr	r3, [r3, #4]
6000181e:	4628      	mov	r0, r5
60001820:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001822:	4628      	mov	r0, r5
60001824:	f000 ff44 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
60001828:	4b8f      	ldr	r3, [pc, #572]	; (60001a68 <CrashReportClass::printTo(Print&) const+0x2f4>)
6000182a:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
6000182c:	07a2      	lsls	r2, r4, #30
6000182e:	d50d      	bpl.n	6000184c <CrashReportClass::printTo(Print&) const+0xd8>
    uint32_t gpr5 = SRC_GPR5;
60001830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001832:	4b8e      	ldr	r3, [pc, #568]	; (60001a6c <CrashReportClass::printTo(Print&) const+0x2f8>)
60001834:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
60001836:	682b      	ldr	r3, [r5, #0]
60001838:	f000 8174 	beq.w	60001b24 <CrashReportClass::printTo(Print&) const+0x3b0>
6000183c:	2240      	movs	r2, #64	; 0x40
6000183e:	498c      	ldr	r1, [pc, #560]	; (60001a70 <CrashReportClass::printTo(Print&) const+0x2fc>)
60001840:	685b      	ldr	r3, [r3, #4]
60001842:	4628      	mov	r0, r5
60001844:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001846:	4628      	mov	r0, r5
60001848:	f000 ff32 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
6000184c:	0767      	lsls	r7, r4, #29
6000184e:	f100 815f 	bmi.w	60001b10 <CrashReportClass::printTo(Print&) const+0x39c>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001852:	0726      	lsls	r6, r4, #28
60001854:	f100 8152 	bmi.w	60001afc <CrashReportClass::printTo(Print&) const+0x388>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001858:	06e0      	lsls	r0, r4, #27
6000185a:	f100 8145 	bmi.w	60001ae8 <CrashReportClass::printTo(Print&) const+0x374>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
6000185e:	06a1      	lsls	r1, r4, #26
60001860:	f100 8138 	bmi.w	60001ad4 <CrashReportClass::printTo(Print&) const+0x360>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001864:	0662      	lsls	r2, r4, #25
60001866:	f100 812b 	bmi.w	60001ac0 <CrashReportClass::printTo(Print&) const+0x34c>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000186a:	0623      	lsls	r3, r4, #24
6000186c:	f100 80dd 	bmi.w	60001a2a <CrashReportClass::printTo(Print&) const+0x2b6>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001870:	f414 7480 	ands.w	r4, r4, #256	; 0x100
60001874:	f040 80ad 	bne.w	600019d2 <CrashReportClass::printTo(Print&) const+0x25e>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
60001878:	4b71      	ldr	r3, [pc, #452]	; (60001a40 <CrashReportClass::printTo(Print&) const+0x2cc>)
6000187a:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
6000187e:	b196      	cbz	r6, 600018a6 <CrashReportClass::printTo(Print&) const+0x132>
60001880:	f8d3 70dc 	ldr.w	r7, [r3, #220]	; 0xdc
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60001884:	2201      	movs	r2, #1
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60001886:	33c0      	adds	r3, #192	; 0xc0
		while (len > 0) {
60001888:	487a      	ldr	r0, [pc, #488]	; (60001a74 <CrashReportClass::printTo(Print&) const+0x300>)
			a += *p++;
6000188a:	4619      	mov	r1, r3
6000188c:	3302      	adds	r3, #2
6000188e:	8809      	ldrh	r1, [r1, #0]
		while (len > 0) {
60001890:	4283      	cmp	r3, r0
			a += *p++;
60001892:	fa12 f281 	uxtah	r2, r2, r1
			b += a;
60001896:	4414      	add	r4, r2
		while (len > 0) {
60001898:	d1f7      	bne.n	6000188a <CrashReportClass::printTo(Print&) const+0x116>
		a = a & 65535;
6000189a:	b293      	uxth	r3, r2
		return a | (b << 16);
6000189c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
600018a0:	429f      	cmp	r7, r3
600018a2:	f000 817c 	beq.w	60001b9e <CrashReportClass::printTo(Print&) const+0x42a>
  clear();
600018a6:	f7ff ff17 	bl	600016d8 <CrashReportClass::clear()>
}
600018aa:	2001      	movs	r0, #1
600018ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							  return write((const uint8_t *)str, strlen(str)); }
600018b0:	682b      	ldr	r3, [r5, #0]
600018b2:	220c      	movs	r2, #12
600018b4:	4970      	ldr	r1, [pc, #448]	; (60001a78 <CrashReportClass::printTo(Print&) const+0x304>)
600018b6:	4628      	mov	r0, r5
600018b8:	685b      	ldr	r3, [r3, #4]
600018ba:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018bc:	4628      	mov	r0, r5
600018be:	f000 fef7 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018c2:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
600018c4:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
600018c8:	4628      	mov	r0, r5
    info->time /= 60;
600018ca:	4b6c      	ldr	r3, [pc, #432]	; (60001a7c <CrashReportClass::printTo(Print&) const+0x308>)
600018cc:	f8d2 a004 	ldr.w	sl, [r2, #4]
600018d0:	fba3 2709 	umull	r2, r7, r3, r9
600018d4:	496a      	ldr	r1, [pc, #424]	; (60001a80 <CrashReportClass::printTo(Print&) const+0x30c>)
600018d6:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
600018d8:	fba3 2307 	umull	r2, r3, r3, r7
600018dc:	2226      	movs	r2, #38	; 0x26
600018de:	095e      	lsrs	r6, r3, #5
600018e0:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
600018e4:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
600018e6:	4967      	ldr	r1, [pc, #412]	; (60001a84 <CrashReportClass::printTo(Print&) const+0x310>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018e8:	220a      	movs	r2, #10
600018ea:	4628      	mov	r0, r5
600018ec:	fba1 3106 	umull	r3, r1, r1, r6
600018f0:	4623      	mov	r3, r4
600018f2:	0909      	lsrs	r1, r1, #4
600018f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
600018f8:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
600018fc:	f000 fef0 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001900:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
60001902:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
60001906:	2201      	movs	r2, #1
60001908:	685b      	ldr	r3, [r3, #4]
6000190a:	4628      	mov	r0, r5
6000190c:	495e      	ldr	r1, [pc, #376]	; (60001a88 <CrashReportClass::printTo(Print&) const+0x314>)
6000190e:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001910:	4623      	mov	r3, r4
60001912:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
60001916:	220a      	movs	r2, #10
60001918:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
6000191a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
6000191e:	f000 fedf 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001922:	682b      	ldr	r3, [r5, #0]
60001924:	2201      	movs	r2, #1
60001926:	4958      	ldr	r1, [pc, #352]	; (60001a88 <CrashReportClass::printTo(Print&) const+0x314>)
60001928:	685b      	ldr	r3, [r3, #4]
6000192a:	4628      	mov	r0, r5
6000192c:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
6000192e:	4623      	mov	r3, r4
60001930:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
60001934:	220a      	movs	r2, #10
60001936:	4628      	mov	r0, r5
60001938:	f000 fed2 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
6000193c:	4628      	mov	r0, r5
6000193e:	f000 feb7 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001942:	682b      	ldr	r3, [r5, #0]
60001944:	2224      	movs	r2, #36	; 0x24
60001946:	4951      	ldr	r1, [pc, #324]	; (60001a8c <CrashReportClass::printTo(Print&) const+0x318>)
60001948:	685b      	ldr	r3, [r3, #4]
6000194a:	4628      	mov	r0, r5
6000194c:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000194e:	4623      	mov	r3, r4
60001950:	2210      	movs	r2, #16
60001952:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
60001956:	4628      	mov	r0, r5
60001958:	f000 fec2 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
6000195c:	4628      	mov	r0, r5
6000195e:	f000 fea7 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
60001962:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60001966:	2e00      	cmp	r6, #0
60001968:	f040 80df 	bne.w	60001b2a <CrashReportClass::printTo(Print&) const+0x3b6>
    uint32_t _HFSR = info->hfsr;
6000196c:	4e34      	ldr	r6, [pc, #208]	; (60001a40 <CrashReportClass::printTo(Print&) const+0x2cc>)
6000196e:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001972:	2c00      	cmp	r4, #0
60001974:	f040 80fa 	bne.w	60001b6c <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001978:	682b      	ldr	r3, [r5, #0]
6000197a:	2222      	movs	r2, #34	; 0x22
6000197c:	4944      	ldr	r1, [pc, #272]	; (60001a90 <CrashReportClass::printTo(Print&) const+0x31c>)
6000197e:	4628      	mov	r0, r5
60001980:	685b      	ldr	r3, [r3, #4]
60001982:	4798      	blx	r3
    p.print(info->temp);
60001984:	4b2e      	ldr	r3, [pc, #184]	; (60001a40 <CrashReportClass::printTo(Print&) const+0x2cc>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001986:	2102      	movs	r1, #2
60001988:	4628      	mov	r0, r5
6000198a:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
6000198e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
60001992:	f000 feb5 	bl	60002700 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001996:	682b      	ldr	r3, [r5, #0]
60001998:	2205      	movs	r2, #5
6000199a:	493e      	ldr	r1, [pc, #248]	; (60001a94 <CrashReportClass::printTo(Print&) const+0x320>)
6000199c:	685b      	ldr	r3, [r3, #4]
6000199e:	4628      	mov	r0, r5
600019a0:	4798      	blx	r3
600019a2:	682b      	ldr	r3, [r5, #0]
600019a4:	221d      	movs	r2, #29
600019a6:	493c      	ldr	r1, [pc, #240]	; (60001a98 <CrashReportClass::printTo(Print&) const+0x324>)
600019a8:	685b      	ldr	r3, [r3, #4]
600019aa:	4628      	mov	r0, r5
600019ac:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
600019ae:	4a3b      	ldr	r2, [pc, #236]	; (60001a9c <CrashReportClass::printTo(Print&) const+0x328>)
600019b0:	483b      	ldr	r0, [pc, #236]	; (60001aa0 <CrashReportClass::printTo(Print&) const+0x32c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600019b2:	2300      	movs	r3, #0
600019b4:	6811      	ldr	r1, [r2, #0]
600019b6:	220a      	movs	r2, #10
600019b8:	fba0 0101 	umull	r0, r1, r0, r1
600019bc:	4628      	mov	r0, r5
600019be:	0c89      	lsrs	r1, r1, #18
600019c0:	f000 fe8e 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019c4:	682b      	ldr	r3, [r5, #0]
600019c6:	2204      	movs	r2, #4
600019c8:	4936      	ldr	r1, [pc, #216]	; (60001aa4 <CrashReportClass::printTo(Print&) const+0x330>)
600019ca:	685b      	ldr	r3, [r3, #4]
600019cc:	4628      	mov	r0, r5
600019ce:	4798      	blx	r3
600019d0:	e72a      	b.n	60001828 <CrashReportClass::printTo(Print&) const+0xb4>
600019d2:	682b      	ldr	r3, [r5, #0]
600019d4:	2229      	movs	r2, #41	; 0x29
600019d6:	4934      	ldr	r1, [pc, #208]	; (60001aa8 <CrashReportClass::printTo(Print&) const+0x334>)
600019d8:	4628      	mov	r0, r5
600019da:	685b      	ldr	r3, [r3, #4]
600019dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019de:	4628      	mov	r0, r5
600019e0:	f000 fe66 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
600019e4:	4920      	ldr	r1, [pc, #128]	; (60001a68 <CrashReportClass::printTo(Print&) const+0x2f4>)
							  return write((const uint8_t *)str, strlen(str)); }
600019e6:	6828      	ldr	r0, [r5, #0]
600019e8:	2221      	movs	r2, #33	; 0x21
600019ea:	688b      	ldr	r3, [r1, #8]
600019ec:	6844      	ldr	r4, [r0, #4]
600019ee:	4628      	mov	r0, r5
600019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
600019f4:	608b      	str	r3, [r1, #8]
600019f6:	492d      	ldr	r1, [pc, #180]	; (60001aac <CrashReportClass::printTo(Print&) const+0x338>)
600019f8:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
600019fa:	4628      	mov	r0, r5
600019fc:	f000 fe58 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a00:	682b      	ldr	r3, [r5, #0]
60001a02:	2242      	movs	r2, #66	; 0x42
60001a04:	492a      	ldr	r1, [pc, #168]	; (60001ab0 <CrashReportClass::printTo(Print&) const+0x33c>)
60001a06:	685b      	ldr	r3, [r3, #4]
60001a08:	4628      	mov	r0, r5
60001a0a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a0c:	4628      	mov	r0, r5
60001a0e:	f000 fe4f 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a12:	4a28      	ldr	r2, [pc, #160]	; (60001ab4 <CrashReportClass::printTo(Print&) const+0x340>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001a14:	4b28      	ldr	r3, [pc, #160]	; (60001ab8 <CrashReportClass::printTo(Print&) const+0x344>)
60001a16:	2107      	movs	r1, #7
60001a18:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001a20:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001a22:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001a26:	bf30      	wfi
60001a28:	e7fd      	b.n	60001a26 <CrashReportClass::printTo(Print&) const+0x2b2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a2a:	682b      	ldr	r3, [r5, #0]
60001a2c:	2221      	movs	r2, #33	; 0x21
60001a2e:	4923      	ldr	r1, [pc, #140]	; (60001abc <CrashReportClass::printTo(Print&) const+0x348>)
60001a30:	4628      	mov	r0, r5
60001a32:	685b      	ldr	r3, [r3, #4]
60001a34:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a36:	4628      	mov	r0, r5
60001a38:	f000 fe3a 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
60001a3c:	e718      	b.n	60001870 <CrashReportClass::printTo(Print&) const+0xfc>
60001a3e:	bf00      	nop
60001a40:	2027ff00 	.word	0x2027ff00
60001a44:	2027ff80 	.word	0x2027ff80
60001a48:	edb88320 	.word	0xedb88320
60001a4c:	2027ffa8 	.word	0x2027ffa8
60001a50:	2000846c 	.word	0x2000846c
60001a54:	20008484 	.word	0x20008484
60001a58:	200084d0 	.word	0x200084d0
60001a5c:	2000851c 	.word	0x2000851c
60001a60:	20008544 	.word	0x20008544
60001a64:	2000858c 	.word	0x2000858c
60001a68:	400f8000 	.word	0x400f8000
60001a6c:	0bad00f1 	.word	0x0bad00f1
60001a70:	20008618 	.word	0x20008618
60001a74:	2027ffdc 	.word	0x2027ffdc
60001a78:	20007f54 	.word	0x20007f54
60001a7c:	88888889 	.word	0x88888889
60001a80:	20007f64 	.word	0x20007f64
60001a84:	aaaaaaab 	.word	0xaaaaaaab
60001a88:	20007f8c 	.word	0x20007f8c
60001a8c:	20007f90 	.word	0x20007f90
60001a90:	20008418 	.word	0x20008418
60001a94:	2000843c 	.word	0x2000843c
60001a98:	20008444 	.word	0x20008444
60001a9c:	20008a08 	.word	0x20008a08
60001aa0:	431bde83 	.word	0x431bde83
60001aa4:	20008464 	.word	0x20008464
60001aa8:	2000874c 	.word	0x2000874c
60001aac:	20008778 	.word	0x20008778
60001ab0:	2000879c 	.word	0x2000879c
60001ab4:	400d4000 	.word	0x400d4000
60001ab8:	400ac000 	.word	0x400ac000
60001abc:	20008728 	.word	0x20008728
							  return write((const uint8_t *)str, strlen(str)); }
60001ac0:	682b      	ldr	r3, [r5, #0]
60001ac2:	2221      	movs	r2, #33	; 0x21
60001ac4:	499c      	ldr	r1, [pc, #624]	; (60001d38 <CrashReportClass::printTo(Print&) const+0x5c4>)
60001ac6:	4628      	mov	r0, r5
60001ac8:	685b      	ldr	r3, [r3, #4]
60001aca:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001acc:	4628      	mov	r0, r5
60001ace:	f000 fdef 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
60001ad2:	e6ca      	b.n	6000186a <CrashReportClass::printTo(Print&) const+0xf6>
							  return write((const uint8_t *)str, strlen(str)); }
60001ad4:	682b      	ldr	r3, [r5, #0]
60001ad6:	2229      	movs	r2, #41	; 0x29
60001ad8:	4998      	ldr	r1, [pc, #608]	; (60001d3c <CrashReportClass::printTo(Print&) const+0x5c8>)
60001ada:	4628      	mov	r0, r5
60001adc:	685b      	ldr	r3, [r3, #4]
60001ade:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001ae0:	4628      	mov	r0, r5
60001ae2:	f000 fde5 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
60001ae6:	e6bd      	b.n	60001864 <CrashReportClass::printTo(Print&) const+0xf0>
							  return write((const uint8_t *)str, strlen(str)); }
60001ae8:	682b      	ldr	r3, [r5, #0]
60001aea:	2226      	movs	r2, #38	; 0x26
60001aec:	4994      	ldr	r1, [pc, #592]	; (60001d40 <CrashReportClass::printTo(Print&) const+0x5cc>)
60001aee:	4628      	mov	r0, r5
60001af0:	685b      	ldr	r3, [r3, #4]
60001af2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001af4:	4628      	mov	r0, r5
60001af6:	f000 fddb 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
60001afa:	e6b0      	b.n	6000185e <CrashReportClass::printTo(Print&) const+0xea>
							  return write((const uint8_t *)str, strlen(str)); }
60001afc:	682b      	ldr	r3, [r5, #0]
60001afe:	222a      	movs	r2, #42	; 0x2a
60001b00:	4990      	ldr	r1, [pc, #576]	; (60001d44 <CrashReportClass::printTo(Print&) const+0x5d0>)
60001b02:	4628      	mov	r0, r5
60001b04:	685b      	ldr	r3, [r3, #4]
60001b06:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b08:	4628      	mov	r0, r5
60001b0a:	f000 fdd1 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
60001b0e:	e6a3      	b.n	60001858 <CrashReportClass::printTo(Print&) const+0xe4>
							  return write((const uint8_t *)str, strlen(str)); }
60001b10:	682b      	ldr	r3, [r5, #0]
60001b12:	2227      	movs	r2, #39	; 0x27
60001b14:	498c      	ldr	r1, [pc, #560]	; (60001d48 <CrashReportClass::printTo(Print&) const+0x5d4>)
60001b16:	4628      	mov	r0, r5
60001b18:	685b      	ldr	r3, [r3, #4]
60001b1a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b1c:	4628      	mov	r0, r5
60001b1e:	f000 fdc7 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
60001b22:	e696      	b.n	60001852 <CrashReportClass::printTo(Print&) const+0xde>
							  return write((const uint8_t *)str, strlen(str)); }
60001b24:	2248      	movs	r2, #72	; 0x48
60001b26:	4989      	ldr	r1, [pc, #548]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x5d8>)
60001b28:	e68a      	b.n	60001840 <CrashReportClass::printTo(Print&) const+0xcc>
60001b2a:	682b      	ldr	r3, [r5, #0]
60001b2c:	2208      	movs	r2, #8
60001b2e:	4988      	ldr	r1, [pc, #544]	; (60001d50 <CrashReportClass::printTo(Print&) const+0x5dc>)
60001b30:	4628      	mov	r0, r5
60001b32:	685b      	ldr	r3, [r3, #4]
60001b34:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001b36:	4623      	mov	r3, r4
60001b38:	2210      	movs	r2, #16
60001b3a:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001b3e:	4628      	mov	r0, r5
60001b40:	f000 fdce 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001b44:	4628      	mov	r0, r5
60001b46:	f000 fdb3 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001b4a:	07f4      	lsls	r4, r6, #31
60001b4c:	d469      	bmi.n	60001c22 <CrashReportClass::printTo(Print&) const+0x4ae>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001b4e:	07b0      	lsls	r0, r6, #30
60001b50:	f100 8153 	bmi.w	60001dfa <CrashReportClass::printTo(Print&) const+0x686>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001b54:	0731      	lsls	r1, r6, #28
60001b56:	f100 8144 	bmi.w	60001de2 <CrashReportClass::printTo(Print&) const+0x66e>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001b5a:	06f2      	lsls	r2, r6, #27
60001b5c:	f100 815d 	bmi.w	60001e1a <CrashReportClass::printTo(Print&) const+0x6a6>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001b60:	06b3      	lsls	r3, r6, #26
60001b62:	d567      	bpl.n	60001c34 <CrashReportClass::printTo(Print&) const+0x4c0>
							  return write((const uint8_t *)str, strlen(str)); }
60001b64:	682b      	ldr	r3, [r5, #0]
60001b66:	222a      	movs	r2, #42	; 0x2a
60001b68:	497a      	ldr	r1, [pc, #488]	; (60001d54 <CrashReportClass::printTo(Print&) const+0x5e0>)
60001b6a:	e05d      	b.n	60001c28 <CrashReportClass::printTo(Print&) const+0x4b4>
60001b6c:	682b      	ldr	r3, [r5, #0]
60001b6e:	2208      	movs	r2, #8
60001b70:	4979      	ldr	r1, [pc, #484]	; (60001d58 <CrashReportClass::printTo(Print&) const+0x5e4>)
60001b72:	4628      	mov	r0, r5
60001b74:	685b      	ldr	r3, [r3, #4]
60001b76:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001b78:	2300      	movs	r3, #0
60001b7a:	2210      	movs	r2, #16
60001b7c:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001b80:	4628      	mov	r0, r5
60001b82:	f000 fdad 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001b86:	4628      	mov	r0, r5
60001b88:	f000 fd92 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001b8c:	07a0      	lsls	r0, r4, #30
60001b8e:	d467      	bmi.n	60001c60 <CrashReportClass::printTo(Print&) const+0x4ec>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001b90:	0061      	lsls	r1, r4, #1
60001b92:	f57f aef1 	bpl.w	60001978 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001b96:	682b      	ldr	r3, [r5, #0]
60001b98:	221b      	movs	r2, #27
60001b9a:	4970      	ldr	r1, [pc, #448]	; (60001d5c <CrashReportClass::printTo(Print&) const+0x5e8>)
60001b9c:	e063      	b.n	60001c66 <CrashReportClass::printTo(Print&) const+0x4f2>
60001b9e:	2401      	movs	r4, #1
60001ba0:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 60001d98 <CrashReportClass::printTo(Print&) const+0x624>
60001ba4:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 60001d9c <CrashReportClass::printTo(Print&) const+0x628>
      if (bc->bitmask & (1 << i)) {
60001ba8:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 60001d80 <CrashReportClass::printTo(Print&) const+0x60c>
60001bac:	e005      	b.n	60001bba <CrashReportClass::printTo(Print&) const+0x446>
    for (int i=0; i < 6; i++) {
60001bae:	3401      	adds	r4, #1
60001bb0:	2c07      	cmp	r4, #7
60001bb2:	f43f ae78 	beq.w	600018a6 <CrashReportClass::printTo(Print&) const+0x132>
      if (bc->bitmask & (1 << i)) {
60001bb6:	f8d8 60c0 	ldr.w	r6, [r8, #192]	; 0xc0
60001bba:	1e63      	subs	r3, r4, #1
60001bbc:	2701      	movs	r7, #1
60001bbe:	fa07 f203 	lsl.w	r2, r7, r3
60001bc2:	4232      	tst	r2, r6
60001bc4:	d0f3      	beq.n	60001bae <CrashReportClass::printTo(Print&) const+0x43a>
60001bc6:	eb09 0683 	add.w	r6, r9, r3, lsl #2
60001bca:	682b      	ldr	r3, [r5, #0]
60001bcc:	220e      	movs	r2, #14
60001bce:	4651      	mov	r1, sl
60001bd0:	685b      	ldr	r3, [r3, #4]
60001bd2:	4628      	mov	r0, r5
60001bd4:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001bd6:	4621      	mov	r1, r4
60001bd8:	4628      	mov	r0, r5
60001bda:	f000 fd65 	bl	600026a8 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001bde:	682b      	ldr	r3, [r5, #0]
60001be0:	2205      	movs	r2, #5
60001be2:	495f      	ldr	r1, [pc, #380]	; (60001d60 <CrashReportClass::printTo(Print&) const+0x5ec>)
60001be4:	685b      	ldr	r3, [r3, #4]
60001be6:	4628      	mov	r0, r5
60001be8:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001bea:	6871      	ldr	r1, [r6, #4]
60001bec:	2300      	movs	r3, #0
60001bee:	220a      	movs	r2, #10
60001bf0:	4628      	mov	r0, r5
60001bf2:	f000 fd75 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001bf6:	682b      	ldr	r3, [r5, #0]
60001bf8:	2204      	movs	r2, #4
60001bfa:	495a      	ldr	r1, [pc, #360]	; (60001d64 <CrashReportClass::printTo(Print&) const+0x5f0>)
60001bfc:	685b      	ldr	r3, [r3, #4]
60001bfe:	4628      	mov	r0, r5
60001c00:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c02:	6871      	ldr	r1, [r6, #4]
60001c04:	2300      	movs	r3, #0
60001c06:	2210      	movs	r2, #16
60001c08:	4628      	mov	r0, r5
60001c0a:	f000 fd69 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001c0e:	682b      	ldr	r3, [r5, #0]
60001c10:	463a      	mov	r2, r7
60001c12:	4955      	ldr	r1, [pc, #340]	; (60001d68 <CrashReportClass::printTo(Print&) const+0x5f4>)
60001c14:	685b      	ldr	r3, [r3, #4]
60001c16:	4628      	mov	r0, r5
60001c18:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c1a:	4628      	mov	r0, r5
60001c1c:	f000 fd48 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
60001c20:	e7c5      	b.n	60001bae <CrashReportClass::printTo(Print&) const+0x43a>
							  return write((const uint8_t *)str, strlen(str)); }
60001c22:	682b      	ldr	r3, [r5, #0]
60001c24:	2228      	movs	r2, #40	; 0x28
60001c26:	4951      	ldr	r1, [pc, #324]	; (60001d6c <CrashReportClass::printTo(Print&) const+0x5f8>)
60001c28:	685b      	ldr	r3, [r3, #4]
60001c2a:	4628      	mov	r0, r5
60001c2c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c2e:	4628      	mov	r0, r5
60001c30:	f000 fd3e 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001c34:	0637      	lsls	r7, r6, #24
60001c36:	d43c      	bmi.n	60001cb2 <CrashReportClass::printTo(Print&) const+0x53e>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001c38:	05f4      	lsls	r4, r6, #23
60001c3a:	d41b      	bmi.n	60001c74 <CrashReportClass::printTo(Print&) const+0x500>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001c3c:	05b0      	lsls	r0, r6, #22
60001c3e:	f100 80d8 	bmi.w	60001df2 <CrashReportClass::printTo(Print&) const+0x67e>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001c42:	0571      	lsls	r1, r6, #21
60001c44:	f100 80d1 	bmi.w	60001dea <CrashReportClass::printTo(Print&) const+0x676>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001c48:	0532      	lsls	r2, r6, #20
60001c4a:	f100 80e2 	bmi.w	60001e12 <CrashReportClass::printTo(Print&) const+0x69e>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001c4e:	04f3      	lsls	r3, r6, #19
60001c50:	f100 80db 	bmi.w	60001e0a <CrashReportClass::printTo(Print&) const+0x696>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001c54:	04b7      	lsls	r7, r6, #18
60001c56:	d516      	bpl.n	60001c86 <CrashReportClass::printTo(Print&) const+0x512>
							  return write((const uint8_t *)str, strlen(str)); }
60001c58:	682b      	ldr	r3, [r5, #0]
60001c5a:	2231      	movs	r2, #49	; 0x31
60001c5c:	4944      	ldr	r1, [pc, #272]	; (60001d70 <CrashReportClass::printTo(Print&) const+0x5fc>)
60001c5e:	e00c      	b.n	60001c7a <CrashReportClass::printTo(Print&) const+0x506>
60001c60:	682b      	ldr	r3, [r5, #0]
60001c62:	2226      	movs	r2, #38	; 0x26
60001c64:	4943      	ldr	r1, [pc, #268]	; (60001d74 <CrashReportClass::printTo(Print&) const+0x600>)
60001c66:	4628      	mov	r0, r5
60001c68:	685b      	ldr	r3, [r3, #4]
60001c6a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c6c:	4628      	mov	r0, r5
60001c6e:	f000 fd1f 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
60001c72:	e681      	b.n	60001978 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001c74:	682b      	ldr	r3, [r5, #0]
60001c76:	2220      	movs	r2, #32
60001c78:	493f      	ldr	r1, [pc, #252]	; (60001d78 <CrashReportClass::printTo(Print&) const+0x604>)
60001c7a:	685b      	ldr	r3, [r3, #4]
60001c7c:	4628      	mov	r0, r5
60001c7e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c80:	4628      	mov	r0, r5
60001c82:	f000 fd15 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001c86:	0434      	lsls	r4, r6, #16
60001c88:	d440      	bmi.n	60001d0c <CrashReportClass::printTo(Print&) const+0x598>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001c8a:	03f0      	lsls	r0, r6, #15
60001c8c:	d42e      	bmi.n	60001cec <CrashReportClass::printTo(Print&) const+0x578>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001c8e:	03b1      	lsls	r1, r6, #14
60001c90:	f100 80b7 	bmi.w	60001e02 <CrashReportClass::printTo(Print&) const+0x68e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001c94:	0372      	lsls	r2, r6, #13
60001c96:	d44b      	bmi.n	60001d30 <CrashReportClass::printTo(Print&) const+0x5bc>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001c98:	0333      	lsls	r3, r6, #12
60001c9a:	f100 80c6 	bmi.w	60001e2a <CrashReportClass::printTo(Print&) const+0x6b6>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001c9e:	01f7      	lsls	r7, r6, #7
60001ca0:	f100 80bf 	bmi.w	60001e22 <CrashReportClass::printTo(Print&) const+0x6ae>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001ca4:	01b4      	lsls	r4, r6, #6
60001ca6:	f57f ae61 	bpl.w	6000196c <CrashReportClass::printTo(Print&) const+0x1f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001caa:	682b      	ldr	r3, [r5, #0]
60001cac:	221b      	movs	r2, #27
60001cae:	4933      	ldr	r1, [pc, #204]	; (60001d7c <CrashReportClass::printTo(Print&) const+0x608>)
60001cb0:	e01f      	b.n	60001cf2 <CrashReportClass::printTo(Print&) const+0x57e>
60001cb2:	682b      	ldr	r3, [r5, #0]
60001cb4:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001cb6:	4c32      	ldr	r4, [pc, #200]	; (60001d80 <CrashReportClass::printTo(Print&) const+0x60c>)
60001cb8:	4628      	mov	r0, r5
60001cba:	4932      	ldr	r1, [pc, #200]	; (60001d84 <CrashReportClass::printTo(Print&) const+0x610>)
60001cbc:	685b      	ldr	r3, [r3, #4]
60001cbe:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cc0:	2210      	movs	r2, #16
60001cc2:	2300      	movs	r3, #0
60001cc4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001cc8:	4628      	mov	r0, r5
60001cca:	f000 fd09 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001cce:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001cd2:	2a1f      	cmp	r2, #31
60001cd4:	d964      	bls.n	60001da0 <CrashReportClass::printTo(Print&) const+0x62c>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001cd6:	4b2c      	ldr	r3, [pc, #176]	; (60001d88 <CrashReportClass::printTo(Print&) const+0x614>)
60001cd8:	429a      	cmp	r2, r3
60001cda:	d303      	bcc.n	60001ce4 <CrashReportClass::printTo(Print&) const+0x570>
60001cdc:	3320      	adds	r3, #32
60001cde:	429a      	cmp	r2, r3
60001ce0:	f0c0 80a7 	bcc.w	60001e32 <CrashReportClass::printTo(Print&) const+0x6be>
        p.println();
60001ce4:	4628      	mov	r0, r5
60001ce6:	f000 fce3 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
60001cea:	e7a5      	b.n	60001c38 <CrashReportClass::printTo(Print&) const+0x4c4>
							  return write((const uint8_t *)str, strlen(str)); }
60001cec:	682b      	ldr	r3, [r5, #0]
60001cee:	2223      	movs	r2, #35	; 0x23
60001cf0:	4926      	ldr	r1, [pc, #152]	; (60001d8c <CrashReportClass::printTo(Print&) const+0x618>)
60001cf2:	685b      	ldr	r3, [r3, #4]
60001cf4:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001cf6:	4e22      	ldr	r6, [pc, #136]	; (60001d80 <CrashReportClass::printTo(Print&) const+0x60c>)
60001cf8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001cfa:	4628      	mov	r0, r5
60001cfc:	f000 fcd8 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
60001d00:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001d04:	2c00      	cmp	r4, #0
60001d06:	f43f ae37 	beq.w	60001978 <CrashReportClass::printTo(Print&) const+0x204>
60001d0a:	e72f      	b.n	60001b6c <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001d0c:	682b      	ldr	r3, [r5, #0]
60001d0e:	2221      	movs	r2, #33	; 0x21
60001d10:	491f      	ldr	r1, [pc, #124]	; (60001d90 <CrashReportClass::printTo(Print&) const+0x61c>)
60001d12:	4628      	mov	r0, r5
60001d14:	685b      	ldr	r3, [r3, #4]
60001d16:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001d18:	4919      	ldr	r1, [pc, #100]	; (60001d80 <CrashReportClass::printTo(Print&) const+0x60c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d1a:	2300      	movs	r3, #0
60001d1c:	2210      	movs	r2, #16
60001d1e:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001d22:	4628      	mov	r0, r5
60001d24:	f000 fcdc 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001d28:	4628      	mov	r0, r5
60001d2a:	f000 fcc1 	bl	600026b0 <___ZN5Print7printlnEv_veneer>
60001d2e:	e7ac      	b.n	60001c8a <CrashReportClass::printTo(Print&) const+0x516>
							  return write((const uint8_t *)str, strlen(str)); }
60001d30:	682b      	ldr	r3, [r5, #0]
60001d32:	2228      	movs	r2, #40	; 0x28
60001d34:	4917      	ldr	r1, [pc, #92]	; (60001d94 <CrashReportClass::printTo(Print&) const+0x620>)
60001d36:	e7dc      	b.n	60001cf2 <CrashReportClass::printTo(Print&) const+0x57e>
60001d38:	20008704 	.word	0x20008704
60001d3c:	200086d8 	.word	0x200086d8
60001d40:	200086b0 	.word	0x200086b0
60001d44:	20008684 	.word	0x20008684
60001d48:	2000865c 	.word	0x2000865c
60001d4c:	200085cc 	.word	0x200085cc
60001d50:	20007fb8 	.word	0x20007fb8
60001d54:	20008068 	.word	0x20008068
60001d58:	200083c8 	.word	0x200083c8
60001d5c:	200083fc 	.word	0x200083fc
60001d60:	200087f0 	.word	0x200087f0
60001d64:	200087f8 	.word	0x200087f8
60001d68:	20008518 	.word	0x20008518
60001d6c:	20007fc4 	.word	0x20007fc4
60001d70:	2000828c 	.word	0x2000828c
60001d74:	200083d4 	.word	0x200083d4
60001d78:	2000817c 	.word	0x2000817c
60001d7c:	200083ac 	.word	0x200083ac
60001d80:	2027ff00 	.word	0x2027ff00
60001d84:	20008094 	.word	0x20008094
60001d88:	200354a0 	.word	0x200354a0
60001d8c:	200082e4 	.word	0x200082e4
60001d90:	200082c0 	.word	0x200082c0
60001d94:	2000833c 	.word	0x2000833c
60001d98:	200087e0 	.word	0x200087e0
60001d9c:	2027ffc0 	.word	0x2027ffc0
60001da0:	682b      	ldr	r3, [r5, #0]
60001da2:	221e      	movs	r2, #30
60001da4:	4926      	ldr	r1, [pc, #152]	; (60001e40 <CrashReportClass::printTo(Print&) const+0x6cc>)
60001da6:	4628      	mov	r0, r5
60001da8:	685b      	ldr	r3, [r3, #4]
60001daa:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001dac:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001db0:	2300      	movs	r3, #0
60001db2:	2210      	movs	r2, #16
60001db4:	4628      	mov	r0, r5
60001db6:	f000 fc93 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001dba:	682b      	ldr	r3, [r5, #0]
60001dbc:	223e      	movs	r2, #62	; 0x3e
60001dbe:	4921      	ldr	r1, [pc, #132]	; (60001e44 <CrashReportClass::printTo(Print&) const+0x6d0>)
60001dc0:	685b      	ldr	r3, [r3, #4]
60001dc2:	4628      	mov	r0, r5
60001dc4:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001dc6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001dca:	2300      	movs	r3, #0
60001dcc:	2210      	movs	r2, #16
60001dce:	4628      	mov	r0, r5
60001dd0:	f000 fc86 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001dd4:	682b      	ldr	r3, [r5, #0]
60001dd6:	221d      	movs	r2, #29
60001dd8:	491b      	ldr	r1, [pc, #108]	; (60001e48 <CrashReportClass::printTo(Print&) const+0x6d4>)
60001dda:	685b      	ldr	r3, [r3, #4]
60001ddc:	4628      	mov	r0, r5
60001dde:	4798      	blx	r3
60001de0:	e780      	b.n	60001ce4 <CrashReportClass::printTo(Print&) const+0x570>
60001de2:	682b      	ldr	r3, [r5, #0]
60001de4:	2229      	movs	r2, #41	; 0x29
60001de6:	4919      	ldr	r1, [pc, #100]	; (60001e4c <CrashReportClass::printTo(Print&) const+0x6d8>)
60001de8:	e71e      	b.n	60001c28 <CrashReportClass::printTo(Print&) const+0x4b4>
60001dea:	682b      	ldr	r3, [r5, #0]
60001dec:	2244      	movs	r2, #68	; 0x44
60001dee:	4918      	ldr	r1, [pc, #96]	; (60001e50 <CrashReportClass::printTo(Print&) const+0x6dc>)
60001df0:	e743      	b.n	60001c7a <CrashReportClass::printTo(Print&) const+0x506>
60001df2:	682b      	ldr	r3, [r5, #0]
60001df4:	222c      	movs	r2, #44	; 0x2c
60001df6:	4917      	ldr	r1, [pc, #92]	; (60001e54 <CrashReportClass::printTo(Print&) const+0x6e0>)
60001df8:	e73f      	b.n	60001c7a <CrashReportClass::printTo(Print&) const+0x506>
60001dfa:	682b      	ldr	r3, [r5, #0]
60001dfc:	2221      	movs	r2, #33	; 0x21
60001dfe:	4916      	ldr	r1, [pc, #88]	; (60001e58 <CrashReportClass::printTo(Print&) const+0x6e4>)
60001e00:	e712      	b.n	60001c28 <CrashReportClass::printTo(Print&) const+0x4b4>
60001e02:	682b      	ldr	r3, [r5, #0]
60001e04:	2232      	movs	r2, #50	; 0x32
60001e06:	4915      	ldr	r1, [pc, #84]	; (60001e5c <CrashReportClass::printTo(Print&) const+0x6e8>)
60001e08:	e773      	b.n	60001cf2 <CrashReportClass::printTo(Print&) const+0x57e>
60001e0a:	682b      	ldr	r3, [r5, #0]
60001e0c:	2233      	movs	r2, #51	; 0x33
60001e0e:	4914      	ldr	r1, [pc, #80]	; (60001e60 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001e10:	e733      	b.n	60001c7a <CrashReportClass::printTo(Print&) const+0x506>
60001e12:	682b      	ldr	r3, [r5, #0]
60001e14:	223f      	movs	r2, #63	; 0x3f
60001e16:	4913      	ldr	r1, [pc, #76]	; (60001e64 <CrashReportClass::printTo(Print&) const+0x6f0>)
60001e18:	e72f      	b.n	60001c7a <CrashReportClass::printTo(Print&) const+0x506>
60001e1a:	682b      	ldr	r3, [r5, #0]
60001e1c:	2225      	movs	r2, #37	; 0x25
60001e1e:	4912      	ldr	r1, [pc, #72]	; (60001e68 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001e20:	e702      	b.n	60001c28 <CrashReportClass::printTo(Print&) const+0x4b4>
60001e22:	682b      	ldr	r3, [r5, #0]
60001e24:	2228      	movs	r2, #40	; 0x28
60001e26:	4911      	ldr	r1, [pc, #68]	; (60001e6c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001e28:	e763      	b.n	60001cf2 <CrashReportClass::printTo(Print&) const+0x57e>
60001e2a:	682b      	ldr	r3, [r5, #0]
60001e2c:	2216      	movs	r2, #22
60001e2e:	4910      	ldr	r1, [pc, #64]	; (60001e70 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001e30:	e75f      	b.n	60001cf2 <CrashReportClass::printTo(Print&) const+0x57e>
60001e32:	682b      	ldr	r3, [r5, #0]
60001e34:	2241      	movs	r2, #65	; 0x41
60001e36:	490f      	ldr	r1, [pc, #60]	; (60001e74 <CrashReportClass::printTo(Print&) const+0x700>)
60001e38:	4628      	mov	r0, r5
60001e3a:	685b      	ldr	r3, [r3, #4]
60001e3c:	4798      	blx	r3
60001e3e:	e751      	b.n	60001ce4 <CrashReportClass::printTo(Print&) const+0x570>
60001e40:	200080b8 	.word	0x200080b8
60001e44:	200080d8 	.word	0x200080d8
60001e48:	20008118 	.word	0x20008118
60001e4c:	20008014 	.word	0x20008014
60001e50:	200081d0 	.word	0x200081d0
60001e54:	200081a0 	.word	0x200081a0
60001e58:	20007ff0 	.word	0x20007ff0
60001e5c:	20008308 	.word	0x20008308
60001e60:	20008258 	.word	0x20008258
60001e64:	20008218 	.word	0x20008218
60001e68:	20008040 	.word	0x20008040
60001e6c:	20008380 	.word	0x20008380
60001e70:	20008368 	.word	0x20008368
60001e74:	20008138 	.word	0x20008138

60001e78 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001e78:	4b12      	ldr	r3, [pc, #72]	; (60001ec4 <CrashReportClass::operator bool()+0x4c>)
60001e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001e7e:	2b0b      	cmp	r3, #11
60001e80:	d11e      	bne.n	60001ec0 <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001e82:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e86:	4810      	ldr	r0, [pc, #64]	; (60001ec8 <CrashReportClass::operator bool()+0x50>)
{
60001e88:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001e8a:	4d10      	ldr	r5, [pc, #64]	; (60001ecc <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001e8c:	4c10      	ldr	r4, [pc, #64]	; (60001ed0 <CrashReportClass::operator bool()+0x58>)
60001e8e:	e001      	b.n	60001e94 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001e90:	686b      	ldr	r3, [r5, #4]
60001e92:	4675      	mov	r5, lr
60001e94:	f105 0e04 	add.w	lr, r5, #4
60001e98:	405a      	eors	r2, r3
60001e9a:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e9c:	f002 0301 	and.w	r3, r2, #1
60001ea0:	3901      	subs	r1, #1
60001ea2:	fb00 f303 	mul.w	r3, r0, r3
60001ea6:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001eaa:	d1f7      	bne.n	60001e9c <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001eac:	45a6      	cmp	lr, r4
60001eae:	d1ef      	bne.n	60001e90 <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001eb0:	4b04      	ldr	r3, [pc, #16]	; (60001ec4 <CrashReportClass::operator bool()+0x4c>)
60001eb2:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001eb6:	1a80      	subs	r0, r0, r2
60001eb8:	fab0 f080 	clz	r0, r0
60001ebc:	0940      	lsrs	r0, r0, #5
}
60001ebe:	bd30      	pop	{r4, r5, pc}
	return false;
60001ec0:	2000      	movs	r0, #0
}
60001ec2:	4770      	bx	lr
60001ec4:	2027ff00 	.word	0x2027ff00
60001ec8:	edb88320 	.word	0xedb88320
60001ecc:	2027ff80 	.word	0x2027ff80
60001ed0:	2027ffa8 	.word	0x2027ffa8

60001ed4 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001ed4:	4770      	bx	lr
60001ed6:	bf00      	nop

60001ed8 <startup_default_middle_hook>:
60001ed8:	4770      	bx	lr
60001eda:	bf00      	nop

60001edc <startup_default_late_hook>:
60001edc:	4770      	bx	lr
60001ede:	bf00      	nop

60001ee0 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001ee0:	bf00      	nop
60001ee2:	4770      	bx	lr

60001ee4 <configure_cache>:
{
60001ee4:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001ee6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001eea:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001eec:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001eee:	4831      	ldr	r0, [pc, #196]	; (60001fb4 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001ef0:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001ef4:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001ef8:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001efa:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001efe:	482e      	ldr	r0, [pc, #184]	; (60001fb8 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001f00:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001f04:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001f06:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001f0a:	482c      	ldr	r0, [pc, #176]	; (60001fbc <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001f0c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f10:	4a2b      	ldr	r2, [pc, #172]	; (60001fc0 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001f12:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001f16:	4c2b      	ldr	r4, [pc, #172]	; (60001fc4 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f18:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001f1c:	482a      	ldr	r0, [pc, #168]	; (60001fc8 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001f1e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001f22:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001f26:	4c29      	ldr	r4, [pc, #164]	; (60001fcc <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001f28:	4829      	ldr	r0, [pc, #164]	; (60001fd0 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001f2a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001f2e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001f32:	4c28      	ldr	r4, [pc, #160]	; (60001fd4 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f34:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001f38:	4827      	ldr	r0, [pc, #156]	; (60001fd8 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001f3a:	4a28      	ldr	r2, [pc, #160]	; (60001fdc <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001f3c:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001f40:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001f44:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f48:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001f4c:	4c24      	ldr	r4, [pc, #144]	; (60001fe0 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f4e:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001f50:	4824      	ldr	r0, [pc, #144]	; (60001fe4 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001f52:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f56:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001f5a:	4a23      	ldr	r2, [pc, #140]	; (60001fe8 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001f5c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001f60:	4c22      	ldr	r4, [pc, #136]	; (60001fec <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001f62:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001f66:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001f6a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001f6e:	4820      	ldr	r0, [pc, #128]	; (60001ff0 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001f70:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001f74:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001f76:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001f7a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001f7e:	bf00      	nop
	asm("nop");
60001f80:	bf00      	nop
	asm("nop");
60001f82:	bf00      	nop
	asm("nop");
60001f84:	bf00      	nop
	asm("nop");
60001f86:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001f88:	2201      	movs	r2, #1
60001f8a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001f8e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001f92:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001f96:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001f9a:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001f9e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001fa2:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001faa:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001fae:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001fb2:	4770      	bx	lr
60001fb4:	1000003f 	.word	0x1000003f
60001fb8:	07080025 	.word	0x07080025
60001fbc:	00100009 	.word	0x00100009
60001fc0:	200354a0 	.word	0x200354a0
60001fc4:	00200013 	.word	0x00200013
60001fc8:	07020021 	.word	0x07020021
60001fcc:	20000014 	.word	0x20000014
60001fd0:	13080025 	.word	0x13080025
60001fd4:	10000009 	.word	0x10000009
60001fd8:	20200016 	.word	0x20200016
60001fdc:	130b0027 	.word	0x130b0027
60001fe0:	40000017 	.word	0x40000017
60001fe4:	60000018 	.word	0x60000018
60001fe8:	070b002f 	.word	0x070b002f
60001fec:	70000019 	.word	0x70000019
60001ff0:	8000001a 	.word	0x8000001a

60001ff4 <configure_external_ram>:
{
60001ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001ff6:	4bb8      	ldr	r3, [pc, #736]	; (600022d8 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001ff8:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001ffa:	4eb8      	ldr	r6, [pc, #736]	; (600022dc <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001ffc:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001ffe:	4fb8      	ldr	r7, [pc, #736]	; (600022e0 <configure_external_ram+0x2ec>)
{
60002000:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002002:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60002006:	49b7      	ldr	r1, [pc, #732]	; (600022e4 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002008:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000200c:	4db6      	ldr	r5, [pc, #728]	; (600022e8 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000200e:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60002012:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002016:	4cb5      	ldr	r4, [pc, #724]	; (600022ec <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60002018:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000201c:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002020:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002024:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002028:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000202c:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002030:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60002032:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60002034:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60002036:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60002038:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000203a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
6000203e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60002042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60002046:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000204a:	4aa9      	ldr	r2, [pc, #676]	; (600022f0 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
6000204c:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60002050:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60002054:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60002058:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
6000205c:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002060:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60002062:	4ba4      	ldr	r3, [pc, #656]	; (600022f4 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002064:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60002066:	48a4      	ldr	r0, [pc, #656]	; (600022f8 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002068:	49a4      	ldr	r1, [pc, #656]	; (600022fc <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000206a:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000206c:	4aa4      	ldr	r2, [pc, #656]	; (60002300 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000206e:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60002070:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60002074:	f043 030c 	orr.w	r3, r3, #12
60002078:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000207c:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60002080:	6803      	ldr	r3, [r0, #0]
60002082:	f043 0302 	orr.w	r3, r3, #2
60002086:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60002088:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000208a:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000208c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002090:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002092:	4b9c      	ldr	r3, [pc, #624]	; (60002304 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60002094:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60002096:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002098:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000209a:	4c9b      	ldr	r4, [pc, #620]	; (60002308 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000209c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000209e:	4a9b      	ldr	r2, [pc, #620]	; (6000230c <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600020a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020a4:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600020a6:	68c3      	ldr	r3, [r0, #12]
600020a8:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600020ac:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020ae:	6a03      	ldr	r3, [r0, #32]
600020b0:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600020b2:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020b4:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020b6:	6a03      	ldr	r3, [r0, #32]
600020b8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600020ba:	4a95      	ldr	r2, [pc, #596]	; (60002310 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600020bc:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600020be:	4c95      	ldr	r4, [pc, #596]	; (60002314 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020c0:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600020c2:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600020c4:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600020c6:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600020c8:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600020cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600020d0:	f043 0301 	orr.w	r3, r3, #1
600020d4:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600020d8:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600020dc:	498e      	ldr	r1, [pc, #568]	; (60002318 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600020de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600020e2:	f043 0301 	orr.w	r3, r3, #1
600020e6:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600020ea:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
600020ee:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600020f0:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600020f2:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600020f4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600020f8:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600020fa:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600020fc:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600020fe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60002102:	6803      	ldr	r3, [r0, #0]
60002104:	f023 0302 	bic.w	r3, r3, #2
60002108:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000210a:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000210c:	4b83      	ldr	r3, [pc, #524]	; (6000231c <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000210e:	4984      	ldr	r1, [pc, #528]	; (60002320 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002110:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60002112:	f843 2b04 	str.w	r2, [r3], #4
60002116:	428b      	cmp	r3, r1
60002118:	d1fb      	bne.n	60002112 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
6000211a:	4a77      	ldr	r2, [pc, #476]	; (600022f8 <configure_external_ram+0x304>)
6000211c:	6813      	ldr	r3, [r2, #0]
6000211e:	f043 0301 	orr.w	r3, r3, #1
60002122:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60002124:	6813      	ldr	r3, [r2, #0]
60002126:	f013 0301 	ands.w	r3, r3, #1
6000212a:	d1fb      	bne.n	60002124 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000212c:	487a      	ldr	r0, [pc, #488]	; (60002318 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000212e:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002130:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002134:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002136:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000213a:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000213c:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002140:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60002144:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002148:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
6000214c:	4975      	ldr	r1, [pc, #468]	; (60002324 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000214e:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60002152:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60002156:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000215a:	4873      	ldr	r0, [pc, #460]	; (60002328 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
6000215c:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60002160:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60002164:	4c71      	ldr	r4, [pc, #452]	; (6000232c <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60002166:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000216a:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000216e:	4970      	ldr	r1, [pc, #448]	; (60002330 <configure_external_ram+0x33c>)
60002170:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002174:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60002176:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000217a:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000217e:	485e      	ldr	r0, [pc, #376]	; (600022f8 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002180:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002184:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002188:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000218c:	6943      	ldr	r3, [r0, #20]
6000218e:	07da      	lsls	r2, r3, #31
60002190:	d5fc      	bpl.n	6000218c <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002192:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002194:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002196:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000219a:	4957      	ldr	r1, [pc, #348]	; (600022f8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000219c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000219e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a2:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021a6:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021aa:	694b      	ldr	r3, [r1, #20]
600021ac:	07db      	lsls	r3, r3, #31
600021ae:	d5fc      	bpl.n	600021aa <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b0:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b2:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021b8:	4a4f      	ldr	r2, [pc, #316]	; (600022f8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021ba:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600021bc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c0:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021c4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021c8:	6953      	ldr	r3, [r2, #20]
600021ca:	07df      	lsls	r7, r3, #31
600021cc:	d5fc      	bpl.n	600021c8 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021ce:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021d2:	4858      	ldr	r0, [pc, #352]	; (60002334 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021d4:	4948      	ldr	r1, [pc, #288]	; (600022f8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d6:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021d8:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021dc:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021e4:	694b      	ldr	r3, [r1, #20]
600021e6:	07de      	lsls	r6, r3, #31
600021e8:	d5fc      	bpl.n	600021e4 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
600021ea:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
600021ee:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021f2:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600021f4:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021f6:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
600021f8:	4293      	cmp	r3, r2
600021fa:	d165      	bne.n	600022c8 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
600021fc:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002202:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002204:	483c      	ldr	r0, [pc, #240]	; (600022f8 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002206:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000220a:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000220e:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002212:	6943      	ldr	r3, [r0, #20]
60002214:	07dd      	lsls	r5, r3, #31
60002216:	d5fc      	bpl.n	60002212 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002218:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000221a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000221e:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002220:	4a35      	ldr	r2, [pc, #212]	; (600022f8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002222:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60002224:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002228:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000222c:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002230:	6953      	ldr	r3, [r2, #20]
60002232:	07dc      	lsls	r4, r3, #31
60002234:	d5fc      	bpl.n	60002230 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002236:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002238:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000223c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002240:	492d      	ldr	r1, [pc, #180]	; (600022f8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002242:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002244:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002248:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000224c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002250:	694b      	ldr	r3, [r1, #20]
60002252:	07d8      	lsls	r0, r3, #31
60002254:	d5fc      	bpl.n	60002250 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002256:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002258:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000225c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002260:	4a25      	ldr	r2, [pc, #148]	; (600022f8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002262:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002264:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002268:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000226c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002270:	6953      	ldr	r3, [r2, #20]
60002272:	07d9      	lsls	r1, r3, #31
60002274:	d5fc      	bpl.n	60002270 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002276:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002278:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000227c:	482d      	ldr	r0, [pc, #180]	; (60002334 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000227e:	491e      	ldr	r1, [pc, #120]	; (600022f8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002280:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002282:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002286:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000228a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000228e:	694b      	ldr	r3, [r1, #20]
60002290:	07da      	lsls	r2, r3, #31
60002292:	d5fc      	bpl.n	6000228e <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60002294:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60002298:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000229c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000229e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600022a0:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600022a2:	4293      	cmp	r3, r2
600022a4:	d050      	beq.n	60002348 <configure_external_ram+0x354>
600022a6:	2508      	movs	r5, #8
600022a8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
600022ac:	4922      	ldr	r1, [pc, #136]	; (60002338 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022ae:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
600022b0:	4b22      	ldr	r3, [pc, #136]	; (6000233c <configure_external_ram+0x348>)
			external_psram_size = 16;
600022b2:	4a23      	ldr	r2, [pc, #140]	; (60002340 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022b4:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
600022b6:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
600022b8:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022ba:	2301      	movs	r3, #1
600022bc:	4821      	ldr	r0, [pc, #132]	; (60002344 <configure_external_ram+0x350>)
600022be:	4422      	add	r2, r4
600022c0:	f000 fa16 	bl	600026f0 <__sm_set_pool_veneer>
}
600022c4:	b003      	add	sp, #12
600022c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600022c8:	4b1e      	ldr	r3, [pc, #120]	; (60002344 <configure_external_ram+0x350>)
600022ca:	2200      	movs	r2, #0
600022cc:	e9c3 2200 	strd	r2, r2, [r3]
600022d0:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
600022d4:	b003      	add	sp, #12
600022d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
600022d8:	401f8000 	.word	0x401f8000
600022dc:	0001b0f9 	.word	0x0001b0f9
600022e0:	000110f9 	.word	0x000110f9
600022e4:	401f8400 	.word	0x401f8400
600022e8:	000170f9 	.word	0x000170f9
600022ec:	400fc000 	.word	0x400fc000
600022f0:	1ffffcff 	.word	0x1ffffcff
600022f4:	a0000300 	.word	0xa0000300
600022f8:	402a4000 	.word	0x402a4000
600022fc:	402a8000 	.word	0x402a8000
60002300:	ffff0012 	.word	0xffff0012
60002304:	00f737ff 	.word	0x00f737ff
60002308:	80000040 	.word	0x80000040
6000230c:	7cf0ff00 	.word	0x7cf0ff00
60002310:	830f00ff 	.word	0x830f00ff
60002314:	00020063 	.word	0x00020063
60002318:	5af05af0 	.word	0x5af05af0
6000231c:	402a4200 	.word	0x402a4200
60002320:	402a4300 	.word	0x402a4300
60002324:	3018049f 	.word	0x3018049f
60002328:	0a1806eb 	.word	0x0a1806eb
6000232c:	0a180638 	.word	0x0a180638
60002330:	26013206 	.word	0x26013206
60002334:	00030004 	.word	0x00030004
60002338:	70000000 	.word	0x70000000
6000233c:	70000000 	.word	0x70000000
60002340:	20035469 	.word	0x20035469
60002344:	20034b50 	.word	0x20034b50
	FLEXSPI2_IPCR0 = addr;
60002348:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000234c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002350:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002352:	4808      	ldr	r0, [pc, #32]	; (60002374 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60002354:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002358:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000235c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002360:	6943      	ldr	r3, [r0, #20]
60002362:	07db      	lsls	r3, r3, #31
60002364:	d5fc      	bpl.n	60002360 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002366:	2301      	movs	r3, #1
60002368:	2510      	movs	r5, #16
6000236a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
6000236e:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60002370:	e79c      	b.n	600022ac <configure_external_ram+0x2b8>
60002372:	bf00      	nop
60002374:	402a4000 	.word	0x402a4000

60002378 <usb_pll_start>:
{
60002378:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000237a:	4a15      	ldr	r2, [pc, #84]	; (600023d0 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000237c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000237e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60002382:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60002386:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000238a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000238e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60002392:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60002394:	f013 0f02 	tst.w	r3, #2
60002398:	d10e      	bne.n	600023b8 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000239a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
6000239e:	d00f      	beq.n	600023c0 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600023a0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600023a4:	d00e      	beq.n	600023c4 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600023a6:	2b00      	cmp	r3, #0
600023a8:	daf3      	bge.n	60002392 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600023aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600023ae:	d10b      	bne.n	600023c8 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600023b0:	065b      	lsls	r3, r3, #25
600023b2:	d50b      	bpl.n	600023cc <usb_pll_start+0x54>
}
600023b4:	bcf0      	pop	{r4, r5, r6, r7}
600023b6:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600023b8:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600023ba:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600023bc:	6190      	str	r0, [r2, #24]
			continue;
600023be:	e7e8      	b.n	60002392 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600023c0:	6155      	str	r5, [r2, #20]
			continue;
600023c2:	e7e6      	b.n	60002392 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600023c4:	6156      	str	r6, [r2, #20]
			continue;
600023c6:	e7e4      	b.n	60002392 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600023c8:	6191      	str	r1, [r2, #24]
			continue;
600023ca:	e7e2      	b.n	60002392 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600023cc:	6157      	str	r7, [r2, #20]
			continue;
600023ce:	e7e0      	b.n	60002392 <usb_pll_start+0x1a>
600023d0:	400d8000 	.word	0x400d8000

600023d4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600023d4:	4a3f      	ldr	r2, [pc, #252]	; (600024d4 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600023d6:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600023d8:	493f      	ldr	r1, [pc, #252]	; (600024d8 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023da:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600023de:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600023e2:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023e6:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600024dc <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600023ea:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023ee:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600024e0 <tempmon_init+0x10c>
{
600023f2:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600023f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600023f8:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
600023fc:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002400:	4d38      	ldr	r5, [pc, #224]	; (600024e4 <tempmon_init+0x110>)
60002402:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002404:	4c38      	ldr	r4, [pc, #224]	; (600024e8 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002406:	4839      	ldr	r0, [pc, #228]	; (600024ec <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002408:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000240a:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000240e:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002410:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002418:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000241c:	ee07 1a10 	vmov	s14, r1
60002420:	4b33      	ldr	r3, [pc, #204]	; (600024f0 <tempmon_init+0x11c>)
60002422:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002426:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002428:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000242c:	4931      	ldr	r1, [pc, #196]	; (600024f4 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000242e:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002432:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002436:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000243a:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000243e:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002442:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002446:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000244a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000244e:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002452:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002456:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000245a:	4827      	ldr	r0, [pc, #156]	; (600024f8 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000245c:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002460:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002464:	ee75 5a87 	vadd.f32	s11, s11, s14
60002468:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000246c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002470:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002474:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002478:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000247c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002484:	ee16 3a10 	vmov	r3, s12
60002488:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000248c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002490:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60002494:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002496:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000249a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000249e:	f3c3 030b 	ubfx	r3, r3, #0, #12
600024a2:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600024a6:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600024a8:	4914      	ldr	r1, [pc, #80]	; (600024fc <tempmon_init+0x128>)
600024aa:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600024ae:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600024b2:	f043 0302 	orr.w	r3, r3, #2
600024b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600024ba:	4b11      	ldr	r3, [pc, #68]	; (60002500 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600024bc:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600024c0:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600024c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600024c8:	2201      	movs	r2, #1
}
600024ca:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600024cc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600024d0:	4770      	bx	lr
600024d2:	bf00      	nop
600024d4:	400d8100 	.word	0x400d8100
600024d8:	401f4400 	.word	0x401f4400
600024dc:	42aa0000 	.word	0x42aa0000
600024e0:	42b40000 	.word	0x42b40000
600024e4:	20034d08 	.word	0x20034d08
600024e8:	20034d04 	.word	0x20034d04
600024ec:	20034d0c 	.word	0x20034d0c
600024f0:	20034d10 	.word	0x20034d10
600024f4:	0fff0000 	.word	0x0fff0000
600024f8:	e000e400 	.word	0xe000e400
600024fc:	20009400 	.word	0x20009400
60002500:	0000e3d9 	.word	0x0000e3d9

60002504 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002504:	4b31      	ldr	r3, [pc, #196]	; (600025cc <usb_init+0xc8>)
60002506:	f640 7261 	movw	r2, #3937	; 0xf61
{
6000250a:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000250c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60002510:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60002514:	f000 f8f0 	bl	600026f8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002518:	4a2d      	ldr	r2, [pc, #180]	; (600025d0 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000251a:	492e      	ldr	r1, [pc, #184]	; (600025d4 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000251c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002520:	482d      	ldr	r0, [pc, #180]	; (600025d8 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002522:	f043 0303 	orr.w	r3, r3, #3
60002526:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000252a:	4b2c      	ldr	r3, [pc, #176]	; (600025dc <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
6000252c:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002530:	6802      	ldr	r2, [r0, #0]
60002532:	421a      	tst	r2, r3
60002534:	d103      	bne.n	6000253e <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60002536:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
6000253a:	079a      	lsls	r2, r3, #30
6000253c:	d01b      	beq.n	60002576 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000253e:	4a25      	ldr	r2, [pc, #148]	; (600025d4 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60002540:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60002544:	4b24      	ldr	r3, [pc, #144]	; (600025d8 <usb_init+0xd4>)
60002546:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60002548:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
6000254c:	f043 0302 	orr.w	r3, r3, #2
60002550:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60002554:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002558:	079b      	lsls	r3, r3, #30
6000255a:	d4fb      	bmi.n	60002554 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000255c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60002560:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002564:	4b1c      	ldr	r3, [pc, #112]	; (600025d8 <usb_init+0xd4>)
60002566:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000256a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000256e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002570:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60002572:	f000 f8b9 	bl	600026e8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60002576:	4a18      	ldr	r2, [pc, #96]	; (600025d8 <usb_init+0xd4>)
60002578:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000257c:	4c15      	ldr	r4, [pc, #84]	; (600025d4 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
6000257e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60002580:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002582:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002584:	4b16      	ldr	r3, [pc, #88]	; (600025e0 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60002586:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002588:	f44f 7240 	mov.w	r2, #768	; 0x300
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000258c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002590:	4618      	mov	r0, r3
60002592:	f000 f895 	bl	600026c0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60002596:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000259a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000259c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600025a0:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600025a4:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600025a6:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600025aa:	641a      	str	r2, [r3, #64]	; 0x40
600025ac:	4b0d      	ldr	r3, [pc, #52]	; (600025e4 <usb_init+0xe0>)
600025ae:	4a0e      	ldr	r2, [pc, #56]	; (600025e8 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600025b0:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600025b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600025b8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600025bc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600025c0:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600025c2:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600025c6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600025ca:	bd10      	pop	{r4, pc}
600025cc:	400d8000 	.word	0x400d8000
600025d0:	400fc000 	.word	0x400fc000
600025d4:	402e0000 	.word	0x402e0000
600025d8:	400d9000 	.word	0x400d9000
600025dc:	001e1c00 	.word	0x001e1c00
600025e0:	20000000 	.word	0x20000000
600025e4:	20009400 	.word	0x20009400
600025e8:	0000e689 	.word	0x0000e689

600025ec <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
600025ec:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
600025ee:	4b0e      	ldr	r3, [pc, #56]	; (60002628 <_reboot_Teensyduino_+0x3c>)
600025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
600025f2:	079b      	lsls	r3, r3, #30
600025f4:	d400      	bmi.n	600025f8 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600025f6:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600025f8:	b672      	cpsid	i
		USB1_USBCMD = 0;
600025fa:	4b0c      	ldr	r3, [pc, #48]	; (6000262c <_reboot_Teensyduino_+0x40>)
600025fc:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
600025fe:	4a0c      	ldr	r2, [pc, #48]	; (60002630 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60002600:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002604:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002608:	490a      	ldr	r1, [pc, #40]	; (60002634 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000260a:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000260e:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002610:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60002612:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002616:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000261a:	4807      	ldr	r0, [pc, #28]	; (60002638 <_reboot_Teensyduino_+0x4c>)
6000261c:	4a07      	ldr	r2, [pc, #28]	; (6000263c <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000261e:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60002620:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002622:	689b      	ldr	r3, [r3, #8]
60002624:	4798      	blx	r3
	}
	__builtin_unreachable();
60002626:	bf00      	nop
60002628:	401f4400 	.word	0x401f4400
6000262c:	402e0000 	.word	0x402e0000
60002630:	400ac000 	.word	0x400ac000
60002634:	00200003 	.word	0x00200003
60002638:	20208000 	.word	0x20208000
6000263c:	eb120000 	.word	0xeb120000

60002640 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002640:	4b10      	ldr	r3, [pc, #64]	; (60002684 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002642:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002644:	4a10      	ldr	r2, [pc, #64]	; (60002688 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002646:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60002648:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
6000264c:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000264e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002650:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60002654:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60002656:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000265a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000265c:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000265e:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002660:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002662:	061b      	lsls	r3, r3, #24
60002664:	d4fc      	bmi.n	60002660 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002666:	4a09      	ldr	r2, [pc, #36]	; (6000268c <analog_init+0x4c>)
60002668:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000266c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000266e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002670:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002672:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002674:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60002678:	d1fb      	bne.n	60002672 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000267a:	4a05      	ldr	r2, [pc, #20]	; (60002690 <analog_init+0x50>)
6000267c:	7013      	strb	r3, [r2, #0]
}
6000267e:	f85d 4b04 	ldr.w	r4, [sp], #4
60002682:	4770      	bx	lr
60002684:	400fc000 	.word	0x400fc000
60002688:	400c4000 	.word	0x400c4000
6000268c:	400c8000 	.word	0x400c8000
60002690:	20035468 	.word	0x20035468

60002694 <_init>:
60002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60002696:	bf00      	nop
60002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000269a:	bc08      	pop	{r3}
6000269c:	469e      	mov	lr, r3
6000269e:	4770      	bx	lr

600026a0 <__pwm_init_veneer>:
600026a0:	f85f f000 	ldr.w	pc, [pc]	; 600026a4 <__pwm_init_veneer+0x4>
600026a4:	0000f9ed 	.word	0x0000f9ed

600026a8 <___ZN5Print5printEl_veneer>:
600026a8:	f85f f000 	ldr.w	pc, [pc]	; 600026ac <___ZN5Print5printEl_veneer+0x4>
600026ac:	0000d075 	.word	0x0000d075

600026b0 <___ZN5Print7printlnEv_veneer>:
600026b0:	f85f f000 	ldr.w	pc, [pc]	; 600026b4 <___ZN5Print7printlnEv_veneer+0x4>
600026b4:	0000d08d 	.word	0x0000d08d

600026b8 <__main_veneer>:
600026b8:	f85f f000 	ldr.w	pc, [pc]	; 600026bc <__main_veneer+0x4>
600026bc:	0000dc8d 	.word	0x0000dc8d

600026c0 <__memset_veneer>:
600026c0:	f85f f000 	ldr.w	pc, [pc]	; 600026c4 <__memset_veneer+0x4>
600026c4:	00011db9 	.word	0x00011db9

600026c8 <____libc_init_array_veneer>:
600026c8:	f85f f000 	ldr.w	pc, [pc]	; 600026cc <____libc_init_array_veneer+0x4>
600026cc:	000120dd 	.word	0x000120dd

600026d0 <___Z12estAlarmTimem_veneer>:
600026d0:	f85f f000 	ldr.w	pc, [pc]	; 600026d4 <___Z12estAlarmTimem_veneer+0x4>
600026d4:	00001ced 	.word	0x00001ced

600026d8 <__set_arm_clock_veneer>:
600026d8:	f85f f000 	ldr.w	pc, [pc]	; 600026dc <__set_arm_clock_veneer+0x4>
600026dc:	0000d3a5 	.word	0x0000d3a5

600026e0 <___ZN5Print11printNumberEmhh_veneer>:
600026e0:	f85f f000 	ldr.w	pc, [pc]	; 600026e4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600026e4:	0000d0e1 	.word	0x0000d0e1

600026e8 <__delay_veneer>:
600026e8:	f85f f000 	ldr.w	pc, [pc]	; 600026ec <__delay_veneer+0x4>
600026ec:	0000d695 	.word	0x0000d695

600026f0 <__sm_set_pool_veneer>:
600026f0:	f85f f000 	ldr.w	pc, [pc]	; 600026f4 <__sm_set_pool_veneer+0x4>
600026f4:	0000fb2d 	.word	0x0000fb2d

600026f8 <__usb_init_serialnumber_veneer>:
600026f8:	f85f f000 	ldr.w	pc, [pc]	; 600026fc <__usb_init_serialnumber_veneer+0x4>
600026fc:	0000edcd 	.word	0x0000edcd

60002700 <___ZN5Print10printFloatEdh_veneer>:
60002700:	f85f f000 	ldr.w	pc, [pc]	; 60002704 <___ZN5Print10printFloatEdh_veneer+0x4>
60002704:	0000d1b1 	.word	0x0000d1b1

60002708 <__frame_dummy_init_array_entry>:
60002708:	00000045 0000072d 00000dc9 00001e35     E...-.......5...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
}

void configGetString(char *txt, char *str)
{ while(*txt++ !='=') continue;
  while(*txt == ' ') txt++;
  while (*txt !=';') *str++=*txt++;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  *str='\0';
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
}
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
    }
    return ptr;
  }
      34:	4718      	bx	r3
      36:	4770      	bx	lr
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      38:	200096c0 	.word	0x200096c0
  #endif
}

static uint32_t have_disk=0;
void printBin(uint32_t x) 
{ for (int i = 31; i >= 0; i--) { Serial.print(bitRead(x, i)); if(!(i%8)) Serial.print(' '); }}
      3c:	200096c0 	.word	0x200096c0
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20034c30 	.word	0x20034c30
      64:	60027800 	.word	0x60027800

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration

  const int nsd = sizeof(sd_str)/sizeof(const char *);
  SdFs sdx[nsd];
      6c:	4770      	bx	lr
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
      6e:	bf00      	nop

00000070 <MTPStorage_SD::~MTPStorage_SD()>:
  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
//class MTPStorage_SD : public MTPStorageInterface, mSD_Base
class MTPStorage_SD : public mSD_Base
      70:	b538      	push	{r3, r4, r5, lr}
      72:	4604      	mov	r4, r0
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
      74:	4d0a      	ldr	r5, [pc, #40]	; (a0 <MTPStorage_SD::~MTPStorage_SD()+0x30>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
      76:	f500 70aa 	add.w	r0, r0, #340	; 0x154
      7a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
      7e:	f00a fb5d 	bl	a73c <FsBaseFile::close()>
      82:	f504 7082 	add.w	r0, r4, #260	; 0x104
      86:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
      8a:	f00a fb57 	bl	a73c <FsBaseFile::close()>
      8e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
      92:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
      96:	f00a fb51 	bl	a73c <FsBaseFile::close()>
      9a:	4620      	mov	r0, r4
      9c:	bd38      	pop	{r3, r4, r5, pc}
      9e:	bf00      	nop
      a0:	20000b58 	.word	0x20000b58

000000a4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
      a4:	b500      	push	{lr}
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
      a6:	6c83      	ldr	r3, [r0, #72]	; 0x48
      a8:	b083      	sub	sp, #12
      aa:	f88d 1007 	strb.w	r1, [sp, #7]
      ae:	b143      	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
      b0:	2201      	movs	r2, #1
      b2:	f10d 0107 	add.w	r1, sp, #7
      b6:	4618      	mov	r0, r3
      b8:	f009 f944 	bl	9344 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
      bc:	b003      	add	sp, #12
      be:	f85d fb04 	ldr.w	pc, [sp], #4
      c2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
      c4:	2800      	cmp	r0, #0
      c6:	d0f9      	beq.n	bc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
      c8:	2201      	movs	r2, #1
      ca:	f10d 0107 	add.w	r1, sp, #7
      ce:	f007 fddf 	bl	7c90 <ExFatFile::write(void const*, unsigned int)>
      d2:	b003      	add	sp, #12
      d4:	f85d fb04 	ldr.w	pc, [sp], #4

000000d8 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
      d8:	6c83      	ldr	r3, [r0, #72]	; 0x48
      da:	b113      	cbz	r3, e2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      dc:	4618      	mov	r0, r3
      de:	f009 b92b 	b.w	9338 <FatFile::sync()>
      e2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      e4:	b108      	cbz	r0, ea <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      e6:	f007 bbeb 	b.w	78c0 <ExFatFile::sync()>
  }
      ea:	4770      	bx	lr

000000ec <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
      ee:	b500      	push	{lr}
      f0:	b083      	sub	sp, #12
      f2:	b163      	cbz	r3, 10e <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
      f4:	2201      	movs	r2, #1
      f6:	f10d 0107 	add.w	r1, sp, #7
      fa:	4618      	mov	r0, r3
      fc:	f008 fda4 	bl	8c48 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     100:	2801      	cmp	r0, #1
     102:	d10c      	bne.n	11e <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     104:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     108:	b003      	add	sp, #12
     10a:	f85d fb04 	ldr.w	pc, [sp], #4
     10e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     110:	b128      	cbz	r0, 11e <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     112:	2201      	movs	r2, #1
     114:	f10d 0107 	add.w	r1, sp, #7
     118:	f006 fea4 	bl	6e64 <ExFatFile::read(void*, unsigned int)>
     11c:	e7f0      	b.n	100 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     11e:	f04f 30ff 	mov.w	r0, #4294967295
     122:	e7f1      	b.n	108 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000124 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     124:	6c83      	ldr	r3, [r0, #72]	; 0x48
     126:	b113      	cbz	r3, 12e <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     128:	4618      	mov	r0, r3
     12a:	f008 be61 	b.w	8df0 <FatFile::peek()>
     12e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     130:	b108      	cbz	r0, 136 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     132:	f006 bf67 	b.w	7004 <ExFatFile::peek()>
  }
     136:	f04f 30ff 	mov.w	r0, #4294967295
     13a:	4770      	bx	lr

0000013c <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     13c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     13e:	b153      	cbz	r3, 156 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     140:	7818      	ldrb	r0, [r3, #0]
     142:	f010 0008 	ands.w	r0, r0, #8
     146:	d00d      	beq.n	164 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     148:	69d8      	ldr	r0, [r3, #28]
     14a:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     14c:	1ac0      	subs	r0, r0, r3
     14e:	bf48      	it	mi
     150:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     154:	4770      	bx	lr
     156:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     158:	b1a3      	cbz	r3, 184 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     15a:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     15e:	f010 0008 	ands.w	r0, r0, #8
     162:	d100      	bne.n	166 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     164:	4770      	bx	lr
     166:	6918      	ldr	r0, [r3, #16]
     168:	6819      	ldr	r1, [r3, #0]
     16a:	695a      	ldr	r2, [r3, #20]
     16c:	1a40      	subs	r0, r0, r1
     16e:	685b      	ldr	r3, [r3, #4]
     170:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     174:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     178:	f173 0300 	sbcs.w	r3, r3, #0
     17c:	d3f2      	bcc.n	164 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     17e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     182:	4770      	bx	lr
     184:	4618      	mov	r0, r3
    return BaseFile::available();
     186:	e7ed      	b.n	164 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000188 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     188:	6c83      	ldr	r3, [r0, #72]	; 0x48
     18a:	b113      	cbz	r3, 192 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     18c:	4618      	mov	r0, r3
     18e:	f009 b8d9 	b.w	9344 <FatFile::write(void const*, unsigned int)>
     192:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     194:	b108      	cbz	r0, 19a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     196:	f007 bd7b 	b.w	7c90 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     19a:	4770      	bx	lr

0000019c <resetUSB()>:
  { USB1_USBCMD = 0;  // disconnect USB
     19c:	4b11      	ldr	r3, [pc, #68]	; (1e4 <resetUSB()+0x48>)
     19e:	2200      	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     1a0:	2064      	movs	r0, #100	; 0x64
  {
     1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     1a6:	4d10      	ldr	r5, [pc, #64]	; (1e8 <resetUSB()+0x4c>)
     1a8:	4e10      	ldr	r6, [pc, #64]	; (1ec <resetUSB()+0x50>)
     1aa:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1f8 <resetUSB()+0x5c>
     1ae:	4f10      	ldr	r7, [pc, #64]	; (1f0 <resetUSB()+0x54>)
      while(!Serial) mtpd.loop();
     1b0:	4c10      	ldr	r4, [pc, #64]	; (1f4 <resetUSB()+0x58>)
  { USB1_USBCMD = 0;  // disconnect USB
     1b2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     1b6:	f00d fa6d 	bl	d694 <delay>
    usb_init();
     1ba:	f01a fc15 	bl	1a9e8 <__usb_init_veneer>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     1be:	f00f fb6b 	bl	f898 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1c2:	782b      	ldrb	r3, [r5, #0]
      while(!Serial) mtpd.loop();
     1c4:	4620      	mov	r0, r4
     1c6:	b153      	cbz	r3, 1de <resetUSB()+0x42>
     1c8:	7833      	ldrb	r3, [r6, #0]
     1ca:	07db      	lsls	r3, r3, #31
     1cc:	d507      	bpl.n	1de <resetUSB()+0x42>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     1ce:	f8d8 3000 	ldr.w	r3, [r8]
     1d2:	683a      	ldr	r2, [r7, #0]
     1d4:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1d6:	2b0e      	cmp	r3, #14
     1d8:	d901      	bls.n	1de <resetUSB()+0x42>
  }
     1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      while(!Serial) mtpd.loop();
     1de:	f003 fa7f 	bl	36e0 <MTPD::loop()>
     1e2:	e7ec      	b.n	1be <resetUSB()+0x22>
     1e4:	402e0000 	.word	0x402e0000
     1e8:	20035475 	.word	0x20035475
     1ec:	20035474 	.word	0x20035474
     1f0:	20035434 	.word	0x20035434
     1f4:	20009740 	.word	0x20009740
     1f8:	20035424 	.word	0x20035424

000001fc <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     1fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <reboot()+0xc>)
     202:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
     206:	4770      	bx	lr
     208:	05fa0004 	.word	0x05fa0004

0000020c <lowPowerInit()>:
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     20c:	4b0c      	ldr	r3, [pc, #48]	; (240 <lowPowerInit()+0x34>)
     20e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
     210:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  {
     214:	b510      	push	{r4, lr}
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     216:	665a      	str	r2, [r3, #100]	; 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     21a:	f022 0223 	bic.w	r2, r2, #35	; 0x23
     21e:	655a      	str	r2, [r3, #84]	; 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     222:	f042 0201 	orr.w	r2, r2, #1
     226:	655a      	str	r2, [r3, #84]	; 0x54
    asm volatile("dsb");
     228:	f3bf 8f4f 	dsb	sy
    for(int ii=0;ii<41;ii++) { pinMode(ii,INPUT_DISABLE); }
     22c:	2400      	movs	r4, #0
     22e:	b2e0      	uxtb	r0, r4
     230:	3401      	adds	r4, #1
     232:	2105      	movs	r1, #5
     234:	f00d fad6 	bl	d7e4 <pinMode>
     238:	2c29      	cmp	r4, #41	; 0x29
     23a:	d1f8      	bne.n	22e <lowPowerInit()+0x22>
  }
     23c:	bd10      	pop	{r4, pc}
     23e:	bf00      	nop
     240:	400fc000 	.word	0x400fc000

00000244 <stopSystem()>:
  { //shutting down power
     244:	b508      	push	{r3, lr}
    stopSD(); 
     246:	f001 f8a9 	bl	139c <stopSD()>
    adc_exit();
     24a:	f000 fdd1 	bl	df0 <adc_exit()>
  { USB1_USBCMD = 0;  // disconnect USB
     24e:	4b04      	ldr	r3, [pc, #16]	; (260 <stopSystem()+0x1c>)
     250:	2200      	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     252:	2064      	movs	r0, #100	; 0x64
  { USB1_USBCMD = 0;  // disconnect USB
     254:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  }
     258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(100);       // long enough for PC+hubs to detect
     25c:	f00d ba1a 	b.w	d694 <delay>
     260:	402e0000 	.word	0x402e0000

00000264 <loop>:
{
     264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     268:	4c6d      	ldr	r4, [pc, #436]	; (420 <loop+0x1bc>)
{
     26a:	b08b      	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     26c:	4d6d      	ldr	r5, [pc, #436]	; (424 <loop+0x1c0>)
  loopCount++;
     26e:	6823      	ldr	r3, [r4, #0]
  if(status==-99) status = (termon==1)? STOPPED: CLOSED;
     270:	4f6d      	ldr	r7, [pc, #436]	; (428 <loop+0x1c4>)
  loopCount++;
     272:	3301      	adds	r3, #1
     274:	6023      	str	r3, [r4, #0]
  nb = getDataCount();
     276:	f004 ff23 	bl	50c0 <getDataCount()>
  if(nb>mxb) mxb=nb;
     27a:	882b      	ldrh	r3, [r5, #0]
     27c:	4283      	cmp	r3, r0
     27e:	bf38      	it	cc
     280:	8028      	strhcc	r0, [r5, #0]
  if(status==-99) status = (termon==1)? STOPPED: CLOSED;
     282:	f9b7 0000 	ldrsh.w	r0, [r7]
     286:	f110 0f63 	cmn.w	r0, #99	; 0x63
     28a:	d102      	bne.n	292 <loop+0x2e>
     28c:	2300      	movs	r3, #0
     28e:	4618      	mov	r0, r3
     290:	803b      	strh	r3, [r7, #0]
  status = menu(status);
     292:	f004 fc0d 	bl	4ab0 <menu(short)>
      if(status<0)
     296:	2800      	cmp	r0, #0
  status = menu(status);
     298:	8038      	strh	r0, [r7, #0]
      if(status<0)
     29a:	db22      	blt.n	2e2 <loop+0x7e>
    status=saveData(status);  
     29c:	f001 fca6 	bl	1bec <saveData(short)>
  if((t1=millis())>(t0+1000))
     2a0:	4e62      	ldr	r6, [pc, #392]	; (42c <loop+0x1c8>)
     2a2:	4b63      	ldr	r3, [pc, #396]	; (430 <loop+0x1cc>)
    status=saveData(status);  
     2a4:	8038      	strh	r0, [r7, #0]
     2a6:	681f      	ldr	r7, [r3, #0]
  if((t1=millis())>(t0+1000))
     2a8:	6833      	ldr	r3, [r6, #0]
     2aa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
     2ae:	42bb      	cmp	r3, r7
     2b0:	d213      	bcs.n	2da <loop+0x76>
    if(monitor)
     2b2:	4b60      	ldr	r3, [pc, #384]	; (434 <loop+0x1d0>)
     2b4:	f9b3 3000 	ldrsh.w	r3, [r3]
     2b8:	b9cb      	cbnz	r3, 2ee <loop+0x8a>
     2ba:	4b5f      	ldr	r3, [pc, #380]	; (438 <loop+0x1d4>)
     2bc:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 478 <loop+0x214>
     2c0:	9307      	str	r3, [sp, #28]
     2c2:	4b5e      	ldr	r3, [pc, #376]	; (43c <loop+0x1d8>)
     2c4:	9306      	str	r3, [sp, #24]
    loopCount=0;
     2c6:	2300      	movs	r3, #0
    procMiss=0;
     2c8:	9a07      	ldr	r2, [sp, #28]
    t0=t1;
     2ca:	6037      	str	r7, [r6, #0]
    procMiss=0;
     2cc:	6013      	str	r3, [r2, #0]
    disk_count=0;
     2ce:	9a06      	ldr	r2, [sp, #24]
    loopCount=0;
     2d0:	6023      	str	r3, [r4, #0]
    procCount=0;
     2d2:	f8cb 3000 	str.w	r3, [fp]
    mxb=0;
     2d6:	802b      	strh	r3, [r5, #0]
    disk_count=0;
     2d8:	6013      	str	r3, [r2, #0]
  asm("wfi");
     2da:	bf30      	wfi
}
     2dc:	b00b      	add	sp, #44	; 0x2c
     2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { mtpd.loop();
     2e2:	4857      	ldr	r0, [pc, #348]	; (440 <loop+0x1dc>)
     2e4:	f003 f9fc 	bl	36e0 <MTPD::loop()>
    status=saveData(status);  
     2e8:	f9b7 0000 	ldrsh.w	r0, [r7]
     2ec:	e7d6      	b.n	29c <loop+0x38>
      rtc_get_datetime(&t);
     2ee:	a808      	add	r0, sp, #32
      Serial.print(procCount);  Serial.print(" ");
     2f0:	f8df b184 	ldr.w	fp, [pc, #388]	; 478 <loop+0x214>
      rtc_get_datetime(&t);
     2f4:	f005 f890 	bl	5418 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     2f8:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
     2fc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
     300:	9304      	str	r3, [sp, #16]
     302:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     306:	494f      	ldr	r1, [pc, #316]	; (444 <loop+0x1e0>)
     308:	9303      	str	r3, [sp, #12]
     30a:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     30e:	484e      	ldr	r0, [pc, #312]	; (448 <loop+0x1e4>)
     310:	9302      	str	r3, [sp, #8]
     312:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     316:	9301      	str	r3, [sp, #4]
     318:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     31c:	9300      	str	r3, [sp, #0]
     31e:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
     322:	f00c fecf 	bl	d0c4 <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     326:	2103      	movs	r1, #3
     328:	4848      	ldr	r0, [pc, #288]	; (44c <loop+0x1e8>)
     32a:	f00f fa37 	bl	f79c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     32e:	2300      	movs	r3, #0
     330:	220a      	movs	r2, #10
     332:	6821      	ldr	r1, [r4, #0]
     334:	4844      	ldr	r0, [pc, #272]	; (448 <loop+0x1e4>)
     336:	f00c fed3 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     33a:	2101      	movs	r1, #1
     33c:	4844      	ldr	r0, [pc, #272]	; (450 <loop+0x1ec>)
     33e:	f00f fa2d 	bl	f79c <usb_serial_write>
      Serial.print(procMiss);   Serial.print(" ");
     342:	4b3d      	ldr	r3, [pc, #244]	; (438 <loop+0x1d4>)
     344:	220a      	movs	r2, #10
     346:	f8db 1000 	ldr.w	r1, [fp]
     34a:	9307      	str	r3, [sp, #28]
     34c:	2300      	movs	r3, #0
     34e:	483e      	ldr	r0, [pc, #248]	; (448 <loop+0x1e4>)
     350:	f00c fec6 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     354:	2101      	movs	r1, #1
     356:	483e      	ldr	r0, [pc, #248]	; (450 <loop+0x1ec>)
     358:	f00f fa20 	bl	f79c <usb_serial_write>
     35c:	9907      	ldr	r1, [sp, #28]
     35e:	2300      	movs	r3, #0
     360:	220a      	movs	r2, #10
     362:	6809      	ldr	r1, [r1, #0]
     364:	4838      	ldr	r0, [pc, #224]	; (448 <loop+0x1e4>)
     366:	f00c febb 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     36a:	2101      	movs	r1, #1
     36c:	4838      	ldr	r0, [pc, #224]	; (450 <loop+0x1ec>)
     36e:	f00f fa15 	bl	f79c <usb_serial_write>
      Serial.printf("%3d",mxb); Serial.print("  ");
     372:	882a      	ldrh	r2, [r5, #0]
     374:	4937      	ldr	r1, [pc, #220]	; (454 <loop+0x1f0>)
     376:	4834      	ldr	r0, [pc, #208]	; (448 <loop+0x1e4>)
     378:	f00c fea4 	bl	d0c4 <Print::printf(char const*, ...)>
     37c:	2102      	movs	r1, #2
     37e:	4836      	ldr	r0, [pc, #216]	; (458 <loop+0x1f4>)
     380:	f00f fa0c 	bl	f79c <usb_serial_write>
      Serial.print(have_disk);  Serial.print("  ");
     384:	4b35      	ldr	r3, [pc, #212]	; (45c <loop+0x1f8>)
     386:	220a      	movs	r2, #10
     388:	482f      	ldr	r0, [pc, #188]	; (448 <loop+0x1e4>)
     38a:	6819      	ldr	r1, [r3, #0]
     38c:	2300      	movs	r3, #0
     38e:	f00c fea7 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
      Serial.print(disk_count); Serial.print("; ");
     392:	4b2a      	ldr	r3, [pc, #168]	; (43c <loop+0x1d8>)
     394:	2102      	movs	r1, #2
     396:	4830      	ldr	r0, [pc, #192]	; (458 <loop+0x1f4>)
     398:	9306      	str	r3, [sp, #24]
     39a:	f00f f9ff 	bl	f79c <usb_serial_write>
     39e:	9906      	ldr	r1, [sp, #24]
     3a0:	2300      	movs	r3, #0
     3a2:	220a      	movs	r2, #10
     3a4:	4828      	ldr	r0, [pc, #160]	; (448 <loop+0x1e4>)
     3a6:	6809      	ldr	r1, [r1, #0]
     3a8:	f00c fe9a 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     3ac:	2102      	movs	r1, #2
     3ae:	482c      	ldr	r0, [pc, #176]	; (460 <loop+0x1fc>)
     3b0:	f00f f9f4 	bl	f79c <usb_serial_write>
      if(proc==0)
     3b4:	4b2b      	ldr	r3, [pc, #172]	; (464 <loop+0x200>)
     3b6:	881b      	ldrh	r3, [r3, #0]
     3b8:	b21b      	sxth	r3, r3
     3ba:	b98b      	cbnz	r3, 3e0 <loop+0x17c>
          for(int ii=0; ii<8;ii++) {Serial.printf("%9d",logBuffer[ii]);}
     3bc:	4699      	mov	r9, r3
     3be:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 47c <loop+0x218>
     3c2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 448 <loop+0x1e4>
     3c6:	4b28      	ldr	r3, [pc, #160]	; (468 <loop+0x204>)
     3c8:	4651      	mov	r1, sl
     3ca:	4640      	mov	r0, r8
     3cc:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     3d0:	f109 0901 	add.w	r9, r9, #1
     3d4:	f00c fe76 	bl	d0c4 <Print::printf(char const*, ...)>
     3d8:	f1b9 0f08 	cmp.w	r9, #8
     3dc:	d1f3      	bne.n	3c6 <loop+0x162>
     3de:	e772      	b.n	2c6 <loop+0x62>
     3e0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 480 <loop+0x21c>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3e4:	4921      	ldr	r1, [pc, #132]	; (46c <loop+0x208>)
     3e6:	f8df 9060 	ldr.w	r9, [pc, #96]	; 448 <loop+0x1e4>
     3ea:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     3ee:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     3f2:	4648      	mov	r0, r9
     3f4:	f00c fe66 	bl	d0c4 <Print::printf(char const*, ...)>
     3f8:	491c      	ldr	r1, [pc, #112]	; (46c <loop+0x208>)
     3fa:	45c2      	cmp	sl, r8
     3fc:	d1f7      	bne.n	3ee <loop+0x18a>
        Serial.printf("%2d",max_stat);
     3fe:	f8df 8084 	ldr.w	r8, [pc, #132]	; 484 <loop+0x220>
     402:	491b      	ldr	r1, [pc, #108]	; (470 <loop+0x20c>)
     404:	f8d8 2000 	ldr.w	r2, [r8]
     408:	480f      	ldr	r0, [pc, #60]	; (448 <loop+0x1e4>)
     40a:	f00c fe5b 	bl	d0c4 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     40e:	2260      	movs	r2, #96	; 0x60
     410:	2100      	movs	r1, #0
     412:	4818      	ldr	r0, [pc, #96]	; (474 <loop+0x210>)
     414:	f011 fcd0 	bl	11db8 <memset>
        max_stat=0;        
     418:	2300      	movs	r3, #0
     41a:	f8c8 3000 	str.w	r3, [r8]
     41e:	e752      	b.n	2c6 <loop+0x62>
     420:	20034778 	.word	0x20034778
     424:	20035440 	.word	0x20035440
     428:	20008ff6 	.word	0x20008ff6
     42c:	20034774 	.word	0x20034774
     430:	20035424 	.word	0x20035424
     434:	2003544e 	.word	0x2003544e
     438:	20034c4c 	.word	0x20034c4c
     43c:	20034b38 	.word	0x20034b38
     440:	20009740 	.word	0x20009740
     444:	20007e80 	.word	0x20007e80
     448:	20008a0c 	.word	0x20008a0c
     44c:	20007ea4 	.word	0x20007ea4
     450:	20000b38 	.word	0x20000b38
     454:	20007ea8 	.word	0x20007ea8
     458:	20007eac 	.word	0x20007eac
     45c:	20034724 	.word	0x20034724
     460:	20007eb0 	.word	0x20007eb0
     464:	20035450 	.word	0x20035450
     468:	20034bd8 	.word	0x20034bd8
     46c:	20007eb8 	.word	0x20007eb8
     470:	20007ec0 	.word	0x20007ec0
     474:	20034c50 	.word	0x20034c50
     478:	20034c48 	.word	0x20034c48
     47c:	20007eb4 	.word	0x20007eb4
     480:	20034c4c 	.word	0x20034c4c
     484:	20034bf8 	.word	0x20034bf8

00000488 <setup1()>:
{ delay(100);
     488:	b510      	push	{r4, lr}
  while(!setup_ready) {delay(10);} // wait for setup() to finish
     48a:	4c11      	ldr	r4, [pc, #68]	; (4d0 <setup1()+0x48>)
{ delay(100);
     48c:	2064      	movs	r0, #100	; 0x64
     48e:	f00d f901 	bl	d694 <delay>
  while(!setup_ready) {delay(10);} // wait for setup() to finish
     492:	6823      	ldr	r3, [r4, #0]
     494:	b92b      	cbnz	r3, 4a2 <setup1()+0x1a>
     496:	200a      	movs	r0, #10
     498:	f00d f8fc 	bl	d694 <delay>
     49c:	6823      	ldr	r3, [r4, #0]
     49e:	2b00      	cmp	r3, #0
     4a0:	d0f9      	beq.n	496 <setup1()+0xe>
     4a2:	2106      	movs	r1, #6
     4a4:	480b      	ldr	r0, [pc, #44]	; (4d4 <setup1()+0x4c>)
     4a6:	f00f f979 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     4aa:	480b      	ldr	r0, [pc, #44]	; (4d8 <setup1()+0x50>)
     4ac:	f00c fdee 	bl	d08c <Print::println()>
  i2s_setup();
     4b0:	f000 fbde 	bl	c70 <i2s_setup()>
  dma_setup();
     4b4:	f000 fc22 	bl	cfc <dma_setup()>
  adc_init();
     4b8:	f000 fc98 	bl	dec <adc_init()>
     4bc:	210b      	movs	r1, #11
     4be:	4807      	ldr	r0, [pc, #28]	; (4dc <setup1()+0x54>)
     4c0:	f00f f96c 	bl	f79c <usb_serial_write>
     4c4:	4804      	ldr	r0, [pc, #16]	; (4d8 <setup1()+0x50>)
}
     4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     4ca:	f00c bddf 	b.w	d08c <Print::println()>
     4ce:	bf00      	nop
     4d0:	20033c18 	.word	0x20033c18
     4d4:	200006a8 	.word	0x200006a8
     4d8:	20008a0c 	.word	0x20008a0c
     4dc:	200006b0 	.word	0x200006b0

000004e0 <storage_configure()>:

  void storage_configure()
  {
     4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     4e4:	4c86      	ldr	r4, [pc, #536]	; (700 <storage_configure()+0x220>)
     4e6:	b082      	sub	sp, #8
     4e8:	2505      	movs	r5, #5
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
     4ea:	27ff      	movs	r7, #255	; 0xff
     4ec:	f504 6692 	add.w	r6, r4, #1168	; 0x490
    sdioConfigBackup = sdioConfig;
     4f0:	2300      	movs	r3, #0
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     4f2:	4630      	mov	r0, r6
    spiConfigBackupPin = 255;
     4f4:	f884 74bc 	strb.w	r7, [r4, #1212]	; 0x4bc
     4f8:	4619      	mov	r1, r3
    sdioConfigBackup = sdioConfig;
     4fa:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
     4fe:	f00b fe37 	bl	c170 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
     502:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     504:	f8c4 648c 	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     508:	f00b f894 	bl	b634 <SdioCard::errorCode() const>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     50c:	2301      	movs	r3, #1
    return m_card && !m_card->errorCode();
     50e:	4601      	mov	r1, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     510:	4620      	mov	r0, r4
     512:	461a      	mov	r2, r3
    return m_card && !m_card->errorCode();
     514:	2900      	cmp	r1, #0
     516:	f040 808c 	bne.w	632 <storage_configure()+0x152>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     51a:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
     51e:	f00a f9b5 	bl	a88c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     522:	2800      	cmp	r0, #0
     524:	f000 8085 	beq.w	632 <storage_configure()+0x152>
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
     528:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     52c:	2b00      	cmp	r3, #0
     52e:	f000 80c2 	beq.w	6b6 <storage_configure()+0x1d6>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     532:	69da      	ldr	r2, [r3, #28]
     534:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
     538:	f102 38ff 	add.w	r8, r2, #4294967295
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     53c:	2800      	cmp	r0, #0
     53e:	f000 80d0 	beq.w	6e2 <storage_configure()+0x202>
     542:	6803      	ldr	r3, [r0, #0]
     544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     546:	4798      	blx	r3
     548:	2800      	cmp	r0, #0
     54a:	f040 808a 	bne.w	662 <storage_configure()+0x182>
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     54e:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     552:	2800      	cmp	r0, #0
     554:	f040 80be 	bne.w	6d4 <storage_configure()+0x1f4>
     558:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     55c:	2d00      	cmp	r5, #0
     55e:	f000 80c7 	beq.w	6f0 <storage_configure()+0x210>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     562:	4606      	mov	r6, r0
     564:	4628      	mov	r0, r5
     566:	f007 ff71 	bl	844c <ExFatPartition::freeClusterCount()>
     56a:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     56c:	b15e      	cbz	r6, 586 <storage_configure()+0xa6>
     56e:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     572:	2800      	cmp	r0, #0
     574:	f000 80b3 	beq.w	6de <storage_configure()+0x1fe>
      return m_card->setDedicatedSpi(value);
     578:	6803      	ldr	r3, [r0, #0]
     57a:	2100      	movs	r1, #0
     57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     57e:	4798      	blx	r3
          have_disk=0;
        }
        else
        {
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     580:	2800      	cmp	r0, #0
     582:	bf08      	it	eq
     584:	2500      	moveq	r5, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
     586:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     58a:	2b00      	cmp	r3, #0
     58c:	f000 808a 	beq.w	6a4 <storage_configure()+0x1c4>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     590:	799b      	ldrb	r3, [r3, #6]
     592:	f44f 7700 	mov.w	r7, #512	; 0x200
     596:	409f      	lsls	r7, r3
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
          Serial.print("; total clusters: "); Serial.print(totalSize); 
          Serial.print(" free clusters: "); Serial.print(freeSize);
          Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     598:	f3c7 2785 	ubfx	r7, r7, #10, #6
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     59c:	f8df a184 	ldr.w	sl, [pc, #388]	; 724 <storage_configure()+0x244>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     5a0:	2600      	movs	r6, #0
     5a2:	23fe      	movs	r3, #254	; 0xfe
     5a4:	f04f 090a 	mov.w	r9, #10
     5a8:	f8da 1000 	ldr.w	r1, [sl]
     5ac:	4632      	mov	r2, r6
     5ae:	4855      	ldr	r0, [pc, #340]	; (704 <storage_configure()+0x224>)
     5b0:	9100      	str	r1, [sp, #0]
     5b2:	4955      	ldr	r1, [pc, #340]	; (708 <storage_configure()+0x228>)
     5b4:	f00c fd86 	bl	d0c4 <Print::printf(char const*, ...)>
     5b8:	2112      	movs	r1, #18
     5ba:	4854      	ldr	r0, [pc, #336]	; (70c <storage_configure()+0x22c>)
     5bc:	f00f f8ee 	bl	f79c <usb_serial_write>
     5c0:	4642      	mov	r2, r8
     5c2:	4633      	mov	r3, r6
     5c4:	484f      	ldr	r0, [pc, #316]	; (704 <storage_configure()+0x224>)
     5c6:	e9cd 9600 	strd	r9, r6, [sp]
     5ca:	f00c fd9d 	bl	d108 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     5ce:	2110      	movs	r1, #16
     5d0:	484f      	ldr	r0, [pc, #316]	; (710 <storage_configure()+0x230>)
     5d2:	f00f f8e3 	bl	f79c <usb_serial_write>
     5d6:	462a      	mov	r2, r5
     5d8:	4633      	mov	r3, r6
     5da:	484a      	ldr	r0, [pc, #296]	; (704 <storage_configure()+0x224>)
     5dc:	e9cd 9600 	strd	r9, r6, [sp]
     5e0:	f00c fd92 	bl	d108 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     5e4:	210e      	movs	r1, #14
     5e6:	484b      	ldr	r0, [pc, #300]	; (714 <storage_configure()+0x234>)
     5e8:	f00f f8d8 	bl	f79c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     5ec:	4633      	mov	r3, r6
     5ee:	464a      	mov	r2, r9
     5f0:	4639      	mov	r1, r7
     5f2:	4844      	ldr	r0, [pc, #272]	; (704 <storage_configure()+0x224>)
     5f4:	f00c fd74 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     5f8:	2106      	movs	r1, #6
     5fa:	4847      	ldr	r0, [pc, #284]	; (718 <storage_configure()+0x238>)
     5fc:	f00f f8ce 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     600:	4840      	ldr	r0, [pc, #256]	; (704 <storage_configure()+0x224>)
     602:	f00c fd43 	bl	d08c <Print::println()>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     606:	4a45      	ldr	r2, [pc, #276]	; (71c <storage_configure()+0x23c>)
     608:	6813      	ldr	r3, [r2, #0]
     60a:	2b13      	cmp	r3, #19
     60c:	dc09      	bgt.n	622 <storage_configure()+0x142>
          sd_name[fsCount] = name;
     60e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
     612:	f8da 0000 	ldr.w	r0, [sl]
     616:	6048      	str	r0, [r1, #4]
          sdx[fsCount++] = &fs;
     618:	1c59      	adds	r1, r3, #1
     61a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     61e:	6011      	str	r1, [r2, #0]
     620:	655c      	str	r4, [r3, #84]	; 0x54
            #else
              mtpd.addFilesystem(sdx[ii], sd_str[ii]);
            #endif
          #endif

          filing_init();
     622:	f000 fe87 	bl	1334 <filing_init()>
     626:	2501      	movs	r5, #1
          have_disk=1;
     628:	4b3d      	ldr	r3, [pc, #244]	; (720 <storage_configure()+0x240>)
     62a:	601d      	str	r5, [r3, #0]
        }
      }
  }
     62c:	b002      	add	sp, #8
     62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for(jj=0;jj<5;jj++) if (sdx[ii].begin(SD_CONFIG)) break; else delay(1000);
     632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     636:	f00d f82d 	bl	d694 <delay>
     63a:	3d01      	subs	r5, #1
     63c:	f47f af58 	bne.w	4f0 <storage_configure()+0x10>
          Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     640:	4838      	ldr	r0, [pc, #224]	; (724 <storage_configure()+0x244>)
     642:	23fe      	movs	r3, #254	; 0xfe
     644:	462a      	mov	r2, r5
     646:	4938      	ldr	r1, [pc, #224]	; (728 <storage_configure()+0x248>)
     648:	6800      	ldr	r0, [r0, #0]
     64a:	9000      	str	r0, [sp, #0]
     64c:	482d      	ldr	r0, [pc, #180]	; (704 <storage_configure()+0x224>)
     64e:	f00c fd39 	bl	d0c4 <Print::printf(char const*, ...)>
     652:	482c      	ldr	r0, [pc, #176]	; (704 <storage_configure()+0x224>)
     654:	f00c fd1a 	bl	d08c <Print::println()>
          have_disk=1;
     658:	4b31      	ldr	r3, [pc, #196]	; (720 <storage_configure()+0x240>)
     65a:	601d      	str	r5, [r3, #0]
  }
     65c:	b002      	add	sp, #8
     65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     662:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     666:	2800      	cmp	r0, #0
     668:	d039      	beq.n	6de <storage_configure()+0x1fe>
     66a:	6803      	ldr	r3, [r0, #0]
     66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     66e:	4798      	blx	r3
     670:	2800      	cmp	r0, #0
     672:	f47f af6c 	bne.w	54e <storage_configure()+0x6e>
     676:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     67a:	b380      	cbz	r0, 6de <storage_configure()+0x1fe>
      return m_card->setDedicatedSpi(value);
     67c:	6803      	ldr	r3, [r0, #0]
     67e:	2101      	movs	r1, #1
     680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     682:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     684:	4606      	mov	r6, r0
     686:	b3c0      	cbz	r0, 6fa <storage_configure()+0x21a>
    return m_fVol ? m_fVol->freeClusterCount() :
     688:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     68c:	bb18      	cbnz	r0, 6d6 <storage_configure()+0x1f6>
     68e:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     692:	2d00      	cmp	r5, #0
     694:	f47f af66 	bne.w	564 <storage_configure()+0x84>
     698:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     69c:	2800      	cmp	r0, #0
     69e:	f47f af6b 	bne.w	578 <storage_configure()+0x98>
     6a2:	4605      	mov	r5, r0
     6a4:	f8d4 7484 	ldr.w	r7, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     6a8:	2f00      	cmp	r7, #0
     6aa:	f43f af77 	beq.w	59c <storage_configure()+0xbc>
          Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     6ae:	f8d7 743c 	ldr.w	r7, [r7, #1084]	; 0x43c
     6b2:	0abf      	lsrs	r7, r7, #10
     6b4:	e772      	b.n	59c <storage_configure()+0xbc>
     6b6:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
  uint32_t clusterCount() const {
     6ba:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
     6be:	b1ab      	cbz	r3, 6ec <storage_configure()+0x20c>
          uint64_t totalSize = sdx[ii].clusterCount();
     6c0:	f8d3 8430 	ldr.w	r8, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     6c4:	2800      	cmp	r0, #0
     6c6:	f47f af3c 	bne.w	542 <storage_configure()+0x62>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     6ca:	4618      	mov	r0, r3
     6cc:	f007 febe 	bl	844c <ExFatPartition::freeClusterCount()>
     6d0:	4605      	mov	r5, r0
     6d2:	e758      	b.n	586 <storage_configure()+0xa6>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     6d4:	2600      	movs	r6, #0
    return m_fVol ? m_fVol->freeClusterCount() :
     6d6:	f009 fe39 	bl	a34c <FatPartition::freeClusterCount()>
     6da:	4605      	mov	r5, r0
     6dc:	e746      	b.n	56c <storage_configure()+0x8c>
     6de:	4605      	mov	r5, r0
     6e0:	e751      	b.n	586 <storage_configure()+0xa6>
     6e2:	4618      	mov	r0, r3
     6e4:	f009 fe32 	bl	a34c <FatPartition::freeClusterCount()>
     6e8:	4605      	mov	r5, r0
     6ea:	e74c      	b.n	586 <storage_configure()+0xa6>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     6ec:	b918      	cbnz	r0, 6f6 <storage_configure()+0x216>
     6ee:	4680      	mov	r8, r0
  uint32_t bytesPerCluster() const {
     6f0:	2700      	movs	r7, #0
     6f2:	463d      	mov	r5, r7
     6f4:	e752      	b.n	59c <storage_configure()+0xbc>
     6f6:	4698      	mov	r8, r3
     6f8:	e723      	b.n	542 <storage_configure()+0x62>
     6fa:	4605      	mov	r5, r0
     6fc:	e743      	b.n	586 <storage_configure()+0xa6>
     6fe:	bf00      	nop
     700:	20034d1c 	.word	0x20034d1c
     704:	20008a0c 	.word	0x20008a0c
     708:	200004f4 	.word	0x200004f4
     70c:	2000050c 	.word	0x2000050c
     710:	20000520 	.word	0x20000520
     714:	20000534 	.word	0x20000534
     718:	20000544 	.word	0x20000544
     71c:	2003526c 	.word	0x2003526c
     720:	20034724 	.word	0x20034724
     724:	20008fd8 	.word	0x20008fd8
     728:	2000054c 	.word	0x2000054c

0000072c <_GLOBAL__sub_I_storage>:
  }
     72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     72e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
        fsCount = 0;
     732:	2400      	movs	r4, #0
     734:	4d35      	ldr	r5, [pc, #212]	; (80c <_GLOBAL__sub_I_storage+0xe0>)
class MTPStorage_SD : public mSD_Base
     736:	f06f 0101 	mvn.w	r1, #1
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     73a:	4b35      	ldr	r3, [pc, #212]	; (810 <_GLOBAL__sub_I_storage+0xe4>)
      MTPStorage_SD storage;
     73c:	4f35      	ldr	r7, [pc, #212]	; (814 <_GLOBAL__sub_I_storage+0xe8>)
     73e:	4628      	mov	r0, r5
// old MTP Responder.
class MTPD {
public:

//  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
  MTPD(MTPStorage_SD *storage): storage_(storage) {}
     740:	4e35      	ldr	r6, [pc, #212]	; (818 <_GLOBAL__sub_I_storage+0xec>)
     742:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
     746:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
     74a:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
        fsCount = 0;
     74e:	602c      	str	r4, [r5, #0]
     750:	f885 40b0 	strb.w	r4, [r5, #176]	; 0xb0
     754:	f885 4100 	strb.w	r4, [r5, #256]	; 0x100
     758:	f885 4150 	strb.w	r4, [r5, #336]	; 0x150
class MTPStorage_SD : public mSD_Base
     75c:	f8c5 419c 	str.w	r4, [r5, #412]	; 0x19c
     760:	f8a5 41a8 	strh.w	r4, [r5, #424]	; 0x1a8
     764:	e9c5 422a 	strd	r4, r2, [r5, #168]	; 0xa8
     768:	e9c5 423e 	strd	r4, r2, [r5, #248]	; 0xf8
     76c:	e9c5 4252 	strd	r4, r2, [r5, #328]	; 0x148
     770:	e9c5 1468 	strd	r1, r4, [r5, #416]	; 0x1a0
     774:	463a      	mov	r2, r7
     776:	4929      	ldr	r1, [pc, #164]	; (81c <_GLOBAL__sub_I_storage+0xf0>)
  FsBaseFile() {}
     778:	e9c5 443b 	strd	r4, r4, [r5, #236]	; 0xec
     77c:	e9c5 444f 	strd	r4, r4, [r5, #316]	; 0x13c
     780:	e9c5 4463 	strd	r4, r4, [r5, #396]	; 0x18c
     784:	e9c5 4465 	strd	r4, r4, [r5, #404]	; 0x194
     788:	f00f fa12 	bl	fbb0 <__aeabi_atexit>
     78c:	4630      	mov	r0, r6
     78e:	4621      	mov	r1, r4
     790:	f44f 7200 	mov.w	r2, #512	; 0x200
     794:	f840 5b20 	str.w	r5, [r0], #32
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     798:	2529      	movs	r5, #41	; 0x29
     79a:	f011 fb0d 	bl	11db8 <memset>
     79e:	4621      	mov	r1, r4
     7a0:	f44f 7200 	mov.w	r2, #512	; 0x200
     7a4:	f506 7008 	add.w	r0, r6, #544	; 0x220
     7a8:	f011 fb06 	bl	11db8 <memset>
     7ac:	f506 5180 	add.w	r1, r6, #4096	; 0x1000
     7b0:	f240 10ff 	movw	r0, #511	; 0x1ff
  FsVolume() {}
     7b4:	4b1a      	ldr	r3, [pc, #104]	; (820 <_GLOBAL__sub_I_storage+0xf4>)
     7b6:	f8c1 4424 	str.w	r4, [r1, #1060]	; 0x424
  SdFs sdx[nsd];
     7ba:	463a      	mov	r2, r7
     7bc:	f8a1 0420 	strh.w	r0, [r1, #1056]	; 0x420
     7c0:	f881 4428 	strb.w	r4, [r1, #1064]	; 0x428
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     7c4:	4817      	ldr	r0, [pc, #92]	; (824 <_GLOBAL__sub_I_storage+0xf8>)
     7c6:	f8c1 442c 	str.w	r4, [r1, #1068]	; 0x42c
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     7ca:	2107      	movs	r1, #7
     7cc:	f8c3 0490 	str.w	r0, [r3, #1168]	; 0x490
     7d0:	f8c3 14a8 	str.w	r1, [r3, #1192]	; 0x4a8
	SPISettings() : _clock(4000000) {
     7d4:	4814      	ldr	r0, [pc, #80]	; (828 <_GLOBAL__sub_I_storage+0xfc>)
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     7d6:	4915      	ldr	r1, [pc, #84]	; (82c <_GLOBAL__sub_I_storage+0x100>)
     7d8:	f8c3 04a4 	str.w	r0, [r3, #1188]	; 0x4a4
     7dc:	4620      	mov	r0, r4
     7de:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
     7e2:	f8c3 4480 	str.w	r4, [r3, #1152]	; 0x480
     7e6:	f8c3 4484 	str.w	r4, [r3, #1156]	; 0x484
class SdBase : public Vol {
     7ea:	f8c3 448c 	str.w	r4, [r3, #1164]	; 0x48c
  SdioConfig() {}
     7ee:	f8a3 4498 	strh.w	r4, [r3, #1176]	; 0x498
  SharedSpiCard() {}
     7f2:	f883 44b1 	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     7f6:	f883 44b8 	strb.w	r4, [r3, #1208]	; 0x4b8
     7fa:	f883 44c8 	strb.w	r4, [r3, #1224]	; 0x4c8
  SharedSpiCard() {}
     7fe:	f883 54ad 	strb.w	r5, [r3, #1197]	; 0x4ad
     802:	490b      	ldr	r1, [pc, #44]	; (830 <_GLOBAL__sub_I_storage+0x104>)
  }
     804:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  SdFs sdx[nsd];
     808:	f00f b9d2 	b.w	fbb0 <__aeabi_atexit>
     80c:	2003526c 	.word	0x2003526c
     810:	20000c20 	.word	0x20000c20
     814:	20008a28 	.word	0x20008a28
     818:	20009740 	.word	0x20009740
     81c:	00000071 	.word	0x00000071
     820:	20034d1c 	.word	0x20034d1c
     824:	20000c44 	.word	0x20000c44
     828:	003d0900 	.word	0x003d0900
     82c:	20000b88 	.word	0x20000b88
     830:	0000006d 	.word	0x0000006d

00000834 <setup>:
{
     834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     838:	4d5d      	ldr	r5, [pc, #372]	; (9b0 <setup+0x17c>)
     83a:	b087      	sub	sp, #28
    set_arm_clock(96'000'000);
     83c:	485d      	ldr	r0, [pc, #372]	; (9b4 <setup+0x180>)
				if (elapsed > 750) break;
     83e:	f240 28ee 	movw	r8, #750	; 0x2ee
     842:	f00c fdaf 	bl	d3a4 <set_arm_clock>
		uint32_t millis_begin = systick_millis_count;
     846:	4c5c      	ldr	r4, [pc, #368]	; (9b8 <setup+0x184>)
     848:	682e      	ldr	r6, [r5, #0]
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     84a:	4f5c      	ldr	r7, [pc, #368]	; (9bc <setup+0x188>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     84c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 9f4 <setup+0x1c0>
		yield();
     850:	f00f f822 	bl	f898 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     854:	7823      	ldrb	r3, [r4, #0]
     856:	2b00      	cmp	r3, #0
     858:	f000 808f 	beq.w	97a <setup+0x146>
     85c:	783b      	ldrb	r3, [r7, #0]
     85e:	07db      	lsls	r3, r3, #31
     860:	f140 808b 	bpl.w	97a <setup+0x146>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     864:	682b      	ldr	r3, [r5, #0]
     866:	f8d9 2000 	ldr.w	r2, [r9]
     86a:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     86c:	2b0e      	cmp	r3, #14
     86e:	f240 8084 	bls.w	97a <setup+0x146>
  uint16_t *params=loadParameters();  // get parameters from EEPROM
     872:	f003 fef5 	bl	4660 <loadParameters()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     876:	2106      	movs	r1, #6
     878:	4606      	mov	r6, r0
     87a:	4851      	ldr	r0, [pc, #324]	; (9c0 <setup+0x18c>)
     87c:	682b      	ldr	r3, [r5, #0]
     87e:	f00e ff8d 	bl	f79c <usb_serial_write>
     882:	4850      	ldr	r0, [pc, #320]	; (9c4 <setup+0x190>)
  for(int ii=0;ii<16;ii++) {Serial.print(ii); Serial.print(" "); Serial.println(params[ii]);}
     884:	2400      	movs	r4, #0
     886:	f00c fc01 	bl	d08c <Print::println()>
     88a:	210c      	movs	r1, #12
     88c:	484e      	ldr	r0, [pc, #312]	; (9c8 <setup+0x194>)
     88e:	f00e ff85 	bl	f79c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     892:	484c      	ldr	r0, [pc, #304]	; (9c4 <setup+0x190>)
     894:	f836 1902 	ldrh.w	r1, [r6], #-2
     898:	4605      	mov	r5, r0
     89a:	4f4c      	ldr	r7, [pc, #304]	; (9cc <setup+0x198>)
     89c:	f00c fbea 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     8a0:	4628      	mov	r0, r5
     8a2:	f00c fbf3 	bl	d08c <Print::println()>
	size_t print(int n)				{ return print((long)n); }
     8a6:	4621      	mov	r1, r4
     8a8:	4628      	mov	r0, r5
     8aa:	f00c fbe3 	bl	d074 <Print::print(long)>
     8ae:	2101      	movs	r1, #1
     8b0:	4638      	mov	r0, r7
     8b2:	440c      	add	r4, r1
     8b4:	f00e ff72 	bl	f79c <usb_serial_write>
     8b8:	f836 1f02 	ldrh.w	r1, [r6, #2]!
     8bc:	4628      	mov	r0, r5
     8be:	f00c fbd9 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     8c2:	4628      	mov	r0, r5
     8c4:	f00c fbe2 	bl	d08c <Print::println()>
     8c8:	2c10      	cmp	r4, #16
     8ca:	d1ec      	bne.n	8a6 <setup+0x72>
    if(CrashReport) Serial.print(CrashReport);
     8cc:	4840      	ldr	r0, [pc, #256]	; (9d0 <setup+0x19c>)
     8ce:	f01a f887 	bl	1a9e0 <___ZN16CrashReportClasscvbEv_veneer>
     8d2:	2800      	cmp	r0, #0
     8d4:	d15f      	bne.n	996 <setup+0x162>
        usb_init_events();
     8d6:	f003 fb67 	bl	3fa8 <usb_init_events>
    SerNum=HW_OCOTP_MAC0 & 0xFFFFFF;
     8da:	4c3e      	ldr	r4, [pc, #248]	; (9d4 <setup+0x1a0>)
    usbPowerSetup();  
     8dc:	f000 fa8a 	bl	df4 <usbPowerSetup()>
    lowPowerInit();
     8e0:	f7ff fc94 	bl	20c <lowPowerInit()>
    SerNum=HW_OCOTP_MAC0 & 0xFFFFFF;
     8e4:	4b3c      	ldr	r3, [pc, #240]	; (9d8 <setup+0x1a4>)
     8e6:	2108      	movs	r1, #8
     8e8:	483c      	ldr	r0, [pc, #240]	; (9dc <setup+0x1a8>)
     8ea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
     8ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     8f2:	6023      	str	r3, [r4, #0]
     8f4:	f00e ff52 	bl	f79c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     8f8:	2300      	movs	r3, #0
     8fa:	2210      	movs	r2, #16
     8fc:	6821      	ldr	r1, [r4, #0]
     8fe:	4831      	ldr	r0, [pc, #196]	; (9c4 <setup+0x190>)
     900:	f00c fbee 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
     904:	482f      	ldr	r0, [pc, #188]	; (9c4 <setup+0x190>)
     906:	f00c fbc1 	bl	d08c <Print::println()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     90a:	f00e ff7b 	bl	f804 <usb_serial_flush_output>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     90e:	a804      	add	r0, sp, #16
     910:	f004 fd82 	bl	5418 <rtc_get_datetime(datetime_t*)>
     914:	2800      	cmp	r0, #0
     916:	d043      	beq.n	9a0 <setup+0x16c>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     918:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     91c:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     920:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     924:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     928:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     92c:	e9cd 2102 	strd	r2, r1, [sp, #8]
     930:	e9cd 0400 	strd	r0, r4, [sp]
     934:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     938:	4929      	ldr	r1, [pc, #164]	; (9e0 <setup+0x1ac>)
     93a:	4822      	ldr	r0, [pc, #136]	; (9c4 <setup+0x190>)
     93c:	f00c fbc2 	bl	d0c4 <Print::printf(char const*, ...)>
  Serial.println();
     940:	4820      	ldr	r0, [pc, #128]	; (9c4 <setup+0x190>)
     942:	f00c fba3 	bl	d08c <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     946:	210b      	movs	r1, #11
     948:	4826      	ldr	r0, [pc, #152]	; (9e4 <setup+0x1b0>)
     94a:	f00e ff27 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     94e:	481d      	ldr	r0, [pc, #116]	; (9c4 <setup+0x190>)
     950:	f00c fb9c 	bl	d08c <Print::println()>
  storage_configure();  
     954:	f7ff fdc4 	bl	4e0 <storage_configure()>
     958:	210a      	movs	r1, #10
     95a:	4823      	ldr	r0, [pc, #140]	; (9e8 <setup+0x1b4>)
     95c:	f00e ff1e 	bl	f79c <usb_serial_write>
     960:	4818      	ldr	r0, [pc, #96]	; (9c4 <setup+0x190>)
     962:	f00c fb93 	bl	d08c <Print::println()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     966:	f00e ff4d 	bl	f804 <usb_serial_flush_output>
  setup_ready=1;
     96a:	4b20      	ldr	r3, [pc, #128]	; (9ec <setup+0x1b8>)
     96c:	2201      	movs	r2, #1
     96e:	601a      	str	r2, [r3, #0]
    setup1();
     970:	f7ff fd8a 	bl	488 <setup1()>
}
     974:	b007      	add	sp, #28
     976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     97a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     97c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     97e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     980:	b132      	cbz	r2, 990 <setup+0x15c>
				if (elapsed > 2000) break;
     982:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     986:	f63f af74 	bhi.w	872 <setup+0x3e>
			yield();
     98a:	f00e ff85 	bl	f898 <yield>
     98e:	e75f      	b.n	850 <setup+0x1c>
				if (elapsed > 750) break;
     990:	4543      	cmp	r3, r8
     992:	d9fa      	bls.n	98a <setup+0x156>
     994:	e76d      	b.n	872 <setup+0x3e>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     996:	490b      	ldr	r1, [pc, #44]	; (9c4 <setup+0x190>)
     998:	480d      	ldr	r0, [pc, #52]	; (9d0 <setup+0x19c>)
     99a:	f01a f81d 	bl	1a9d8 <___ZNK16CrashReportClass7printToER5Print_veneer>
     99e:	e79a      	b.n	8d6 <setup+0xa2>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     9a0:	2114      	movs	r1, #20
     9a2:	4813      	ldr	r0, [pc, #76]	; (9f0 <setup+0x1bc>)
     9a4:	f00e fefa 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     9a8:	4806      	ldr	r0, [pc, #24]	; (9c4 <setup+0x190>)
     9aa:	f00c fb6f 	bl	d08c <Print::println()>
     9ae:	e7b3      	b.n	918 <setup+0xe4>
     9b0:	20035424 	.word	0x20035424
     9b4:	05b8d800 	.word	0x05b8d800
     9b8:	20035475 	.word	0x20035475
     9bc:	20035474 	.word	0x20035474
     9c0:	20007ed0 	.word	0x20007ed0
     9c4:	20008a0c 	.word	0x20008a0c
     9c8:	20007ed8 	.word	0x20007ed8
     9cc:	20000b38 	.word	0x20000b38
     9d0:	20008a00 	.word	0x20008a00
     9d4:	2000de08 	.word	0x2000de08
     9d8:	401f4400 	.word	0x401f4400
     9dc:	20007ee8 	.word	0x20007ee8
     9e0:	20007f0c 	.word	0x20007f0c
     9e4:	20007f34 	.word	0x20007f34
     9e8:	20007f40 	.word	0x20007f40
     9ec:	20033c18 	.word	0x20033c18
     9f0:	20007ef4 	.word	0x20007ef4
     9f4:	20035434 	.word	0x20035434

000009f8 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     9f8:	b510      	push	{r4, lr}
     9fa:	4604      	mov	r4, r0
		release();
     9fc:	f00c faa8 	bl	cf50 <DMAChannel::release()>
	}
     a00:	4620      	mov	r0, r4
     a02:	bd10      	pop	{r4, pc}

00000a04 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     a04:	4b28      	ldr	r3, [pc, #160]	; (aa8 <acq_isr()+0xa4>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     a06:	4a29      	ldr	r2, [pc, #164]	; (aac <acq_isr()+0xa8>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     a08:	4929      	ldr	r1, [pc, #164]	; (ab0 <acq_isr()+0xac>)
  {
     a0a:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     a0c:	681c      	ldr	r4, [r3, #0]
     a0e:	7918      	ldrb	r0, [r3, #4]
     a10:	6923      	ldr	r3, [r4, #16]
     a12:	77c8      	strb	r0, [r1, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     a14:	4293      	cmp	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     a16:	bf28      	it	cs
     a18:	f5a2 6280 	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     a1c:	4694      	mov	ip, r2
	asm("dsb");
     a1e:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
     a22:	f502 6180 	add.w	r1, r2, #1024	; 0x400
     a26:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
     a2a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
     a2e:	4299      	cmp	r1, r3
     a30:	bf34      	ite	cc
     a32:	2101      	movcc	r1, #1
     a34:	2120      	movcs	r1, #32
     a36:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
     a3a:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
     a3c:	f8c0 2f5c 	str.w	r2, [r0, #3932]	; 0xf5c
		location += 32;
     a40:	461a      	mov	r2, r3
	} while (location < end_addr);
     a42:	f103 0320 	add.w	r3, r3, #32
     a46:	d1f8      	bne.n	a3a <acq_isr()+0x36>
	asm("dsb");
     a48:	f3bf 8f4f 	dsb	sy
	asm("isb");
     a4c:	f3bf 8f6f 	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     a50:	4918      	ldr	r1, [pc, #96]	; (ab4 <acq_isr()+0xb0>)
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     a52:	2300      	movs	r3, #0
     a54:	4818      	ldr	r0, [pc, #96]	; (ab8 <acq_isr()+0xb4>)
{ procCount++;
     a56:	680a      	ldr	r2, [r1, #0]
     a58:	4c18      	ldr	r4, [pc, #96]	; (abc <acq_isr()+0xb8>)
     a5a:	3201      	adds	r2, #1
     a5c:	600a      	str	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     a5e:	8821      	ldrh	r1, [r4, #0]
     a60:	f85c 2033 	ldr.w	r2, [ip, r3, lsl #3]
     a64:	3301      	adds	r3, #1
     a66:	b209      	sxth	r1, r1
     a68:	2b80      	cmp	r3, #128	; 0x80
     a6a:	fa42 f201 	asr.w	r2, r2, r1
     a6e:	f840 2f04 	str.w	r2, [r0, #4]!
     a72:	d1f4      	bne.n	a5e <acq_isr()+0x5a>
  extractBuffer(acqBuffer,buffer);
  //int32_t nz=0;
  //for(int ii=0;ii<NSAMP;ii++) if(acqBuffer[ii]==-1) nz++;
  //if(nz>0) Serial.println(nz);
  //
  if(proc==0)
     a74:	4a12      	ldr	r2, [pc, #72]	; (ac0 <acq_isr()+0xbc>)
     a76:	8813      	ldrh	r3, [r2, #0]
     a78:	b21b      	sxth	r3, r3
     a7a:	b123      	cbz	r3, a86 <acq_isr()+0x82>
  { if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     a7c:	8813      	ldrh	r3, [r2, #0]
     a7e:	b21b      	sxth	r3, r3
     a80:	2b01      	cmp	r3, #1
     a82:	d00a      	beq.n	a9a <acq_isr()+0x96>
  }
     a84:	bd10      	pop	{r4, pc}
  { if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     a86:	480f      	ldr	r0, [pc, #60]	; (ac4 <acq_isr()+0xc0>)
     a88:	f004 fb2e 	bl	50e8 <pushData(unsigned long*)>
     a8c:	2800      	cmp	r0, #0
     a8e:	d1f9      	bne.n	a84 <acq_isr()+0x80>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     a90:	4a0d      	ldr	r2, [pc, #52]	; (ac8 <acq_isr()+0xc4>)
     a92:	6813      	ldr	r3, [r2, #0]
     a94:	3301      	adds	r3, #1
     a96:	6013      	str	r3, [r2, #0]
  }
     a98:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     a9a:	480a      	ldr	r0, [pc, #40]	; (ac4 <acq_isr()+0xc0>)
     a9c:	f000 f9b0 	bl	e00 <compress(void*)>
     aa0:	2800      	cmp	r0, #0
     aa2:	d1ef      	bne.n	a84 <acq_isr()+0x80>
     aa4:	e7f4      	b.n	a90 <acq_isr()+0x8c>
     aa6:	bf00      	nop
     aa8:	20033c24 	.word	0x20033c24
     aac:	20200400 	.word	0x20200400
     ab0:	400e8000 	.word	0x400e8000
     ab4:	20034c48 	.word	0x20034c48
     ab8:	2003451c 	.word	0x2003451c
     abc:	20035456 	.word	0x20035456
     ac0:	20035450 	.word	0x20035450
     ac4:	20034520 	.word	0x20034520
     ac8:	20034c4c 	.word	0x20034c4c
     acc:	00000000 	.word	0x00000000

00000ad0 <setAudioFrequency(int)>:
  {
     ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ad4:	2105      	movs	r1, #5
     ad6:	4681      	mov	r9, r0
     ad8:	4859      	ldr	r0, [pc, #356]	; (c40 <setAudioFrequency(int)+0x170>)
	size_t println(int n)				{ return print(n) + println(); }
     ada:	4f5a      	ldr	r7, [pc, #360]	; (c44 <setAudioFrequency(int)+0x174>)
     adc:	ed2d 8b02 	vpush	{d8}
     ae0:	b083      	sub	sp, #12
     ae2:	f00e fe5b 	bl	f79c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     ae6:	2180      	movs	r1, #128	; 0x80
     ae8:	4857      	ldr	r0, [pc, #348]	; (c48 <setAudioFrequency(int)+0x178>)
     aea:	f00c fac3 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     aee:	4856      	ldr	r0, [pc, #344]	; (c48 <setAudioFrequency(int)+0x178>)
     af0:	f00c facc 	bl	d08c <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     af4:	231a      	movs	r3, #26
     af6:	ea4f 10c9 	mov.w	r0, r9, lsl #7
    } while ((n2>64 && n0<54));
     afa:	f8df c170 	ldr.w	ip, [pc, #368]	; c6c <setAudioFrequency(int)+0x19c>
    {   n0++;
     afe:	3301      	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     b00:	4602      	mov	r2, r0
        n1=0;
     b02:	2400      	movs	r4, #0
        {   n1++; 
     b04:	46a0      	mov	r8, r4
     b06:	3401      	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     b08:	fb97 f6f2 	sdiv	r6, r7, r2
     b0c:	1c75      	adds	r5, r6, #1
        } while ((n2>64) && (n1<=8));
     b0e:	4402      	add	r2, r0
     b10:	2d40      	cmp	r5, #64	; 0x40
     b12:	bfd4      	ite	le
     b14:	2100      	movle	r1, #0
     b16:	2101      	movgt	r1, #1
     b18:	2c08      	cmp	r4, #8
     b1a:	dc01      	bgt.n	b20 <setAudioFrequency(int)+0x50>
     b1c:	2900      	cmp	r1, #0
     b1e:	d1f1      	bne.n	b04 <setAudioFrequency(int)+0x34>
    } while ((n2>64 && n0<54));
     b20:	2b35      	cmp	r3, #53	; 0x35
     b22:	4467      	add	r7, ip
     b24:	dc01      	bgt.n	b2a <setAudioFrequency(int)+0x5a>
     b26:	2900      	cmp	r1, #0
     b28:	d1e9      	bne.n	afe <setAudioFrequency(int)+0x2e>
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     b2a:	464a      	mov	r2, r9
     b2c:	4947      	ldr	r1, [pc, #284]	; (c4c <setAudioFrequency(int)+0x17c>)
     b2e:	4846      	ldr	r0, [pc, #280]	; (c48 <setAudioFrequency(int)+0x178>)
     b30:	e9cd 4500 	strd	r4, r5, [sp]
     b34:	f00c fac6 	bl	d0c4 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     b38:	ee07 9a90 	vmov	s15, r9
     b3c:	ee06 5a90 	vmov	s13, r5
     b40:	2103      	movs	r1, #3
     b42:	eeb8 5be7 	vcvt.f64.s32	d5, s15
     b46:	ee07 4a90 	vmov	s15, r4
     b4a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
     b4e:	4840      	ldr	r0, [pc, #256]	; (c50 <setAudioFrequency(int)+0x180>)
     b50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     b54:	ed9f 3b34 	vldr	d3, [pc, #208]	; c28 <setAudioFrequency(int)+0x158>
     b58:	ed9f 4b35 	vldr	d4, [pc, #212]	; c30 <setAudioFrequency(int)+0x160>
     b5c:	ee25 5b03 	vmul.f64	d5, d5, d3
     b60:	ee25 7b07 	vmul.f64	d7, d5, d7
     b64:	ee27 7b06 	vmul.f64	d7, d7, d6
     b68:	ee87 8b04 	vdiv.f64	d8, d7, d4
     b6c:	f00e fe16 	bl	f79c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     b70:	2102      	movs	r1, #2
     b72:	4835      	ldr	r0, [pc, #212]	; (c48 <setAudioFrequency(int)+0x178>)
     b74:	eeb0 0b48 	vmov.f64	d0, d8
     b78:	f00c fb1a 	bl	d1b0 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     b7c:	4832      	ldr	r0, [pc, #200]	; (c48 <setAudioFrequency(int)+0x178>)
     b7e:	f00c fa85 	bl	d08c <Print::println()>
    int c0 = C;
     b82:	eefd 7bc8 	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     b86:	f242 7110 	movw	r1, #10000	; 0x2710
    int c0 = C;
     b8a:	ee17 3a90 	vmov	r3, s15
    int c1 = C * c2 - (c0 * c2);
     b8e:	fb01 f203 	mul.w	r2, r1, r3
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     b96:	ee07 2a10 	vmov	s14, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b9a:	f443 1389 	orr.w	r3, r3, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b9e:	4a2d      	ldr	r2, [pc, #180]	; (c54 <setAudioFrequency(int)+0x184>)
    int c1 = C * c2 - (c0 * c2);
     ba0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     ba4:	6713      	str	r3, [r2, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     ba6:	ed9f 6b24 	vldr	d6, [pc, #144]	; c38 <setAudioFrequency(int)+0x168>
     baa:	ee98 7b06 	vfnms.f64	d7, d8, d6
     bae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     bb2:	ee17 3a90 	vmov	r3, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     bb6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     bba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     bbe:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     bc2:	6f13      	ldr	r3, [r2, #112]	; 0x70
     bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     bc8:	6713      	str	r3, [r2, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     bca:	6f13      	ldr	r3, [r2, #112]	; 0x70
     bcc:	2b00      	cmp	r3, #0
     bce:	dafc      	bge.n	bca <setAudioFrequency(int)+0xfa>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bd0:	f8d2 1170 	ldr.w	r1, [r2, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bd4:	ea4f 1388 	mov.w	r3, r8, lsl #6
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bd8:	481f      	ldr	r0, [pc, #124]	; (c58 <setAudioFrequency(int)+0x188>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bda:	f006 063f 	and.w	r6, r6, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bde:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     be2:	4008      	ands	r0, r1
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     be4:	491d      	ldr	r1, [pc, #116]	; (c5c <setAudioFrequency(int)+0x18c>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     be6:	f8c2 0170 	str.w	r0, [r2, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     bea:	6f10      	ldr	r0, [r2, #112]	; 0x70
     bec:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
     bf0:	6710      	str	r0, [r2, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bf2:	69ca      	ldr	r2, [r1, #28]
     bf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bfc:	61ca      	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bfe:	4a18      	ldr	r2, [pc, #96]	; (c60 <setAudioFrequency(int)+0x190>)
     c00:	6a88      	ldr	r0, [r1, #40]	; 0x28
     c02:	4002      	ands	r2, r0
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     c04:	4817      	ldr	r0, [pc, #92]	; (c64 <setAudioFrequency(int)+0x194>)
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     c06:	4313      	orrs	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     c08:	4a17      	ldr	r2, [pc, #92]	; (c68 <setAudioFrequency(int)+0x198>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     c0a:	4333      	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     c0c:	628b      	str	r3, [r1, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     c0e:	6843      	ldr	r3, [r0, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     c10:	401a      	ands	r2, r3
     c12:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     c16:	6042      	str	r2, [r0, #4]
  }
     c18:	b003      	add	sp, #12
     c1a:	ecbd 8b02 	vpop	{d8}
     c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     c22:	bf00      	nop
     c24:	f3af 8000 	nop.w
     c28:	00000000 	.word	0x00000000
     c2c:	40600000 	.word	0x40600000
     c30:	00000000 	.word	0x00000000
     c34:	4176e360 	.word	0x4176e360
     c38:	00000000 	.word	0x00000000
     c3c:	40c38800 	.word	0x40c38800
     c40:	200004c8 	.word	0x200004c8
     c44:	269fb200 	.word	0x269fb200
     c48:	20008a0c 	.word	0x20008a0c
     c4c:	200004d0 	.word	0x200004d0
     c50:	200004f0 	.word	0x200004f0
     c54:	400d8000 	.word	0x400d8000
     c58:	ff7f7fff 	.word	0xff7f7fff
     c5c:	400fc000 	.word	0x400fc000
     c60:	fffffe00 	.word	0xfffffe00
     c64:	400ac000 	.word	0x400ac000
     c68:	fff7fff8 	.word	0xfff7fff8
     c6c:	016e3600 	.word	0x016e3600

00000c70 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c70:	4a1a      	ldr	r2, [pc, #104]	; (cdc <i2s_setup()+0x6c>)
     c72:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     c74:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c76:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c7a:	4c19      	ldr	r4, [pc, #100]	; (ce0 <i2s_setup()+0x70>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c7c:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c7e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     c82:	2b00      	cmp	r3, #0
     c84:	db28      	blt.n	cd8 <i2s_setup()+0x68>
    int fs = fsamp;
     c86:	4b17      	ldr	r3, [pc, #92]	; (ce4 <i2s_setup()+0x74>)
     c88:	6818      	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     c8a:	f7ff ff21 	bl	ad0 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c8e:	4b16      	ldr	r3, [pc, #88]	; (ce8 <i2s_setup()+0x78>)
     c90:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c92:	4916      	ldr	r1, [pc, #88]	; (cec <i2s_setup()+0x7c>)
     c94:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c96:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     c9a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     c9e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     ca2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     ca6:	2204      	movs	r2, #4
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     ca8:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     cb0:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     cb2:	f04f 60a0 	mov.w	r0, #83886080	; 0x5000000
    I2S1_RMR = 0;
     cb6:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     cba:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     cbe:	490c      	ldr	r1, [pc, #48]	; (cf0 <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     cc0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     cc4:	4a0b      	ldr	r2, [pc, #44]	; (cf4 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     cc6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cca:	4b0b      	ldr	r3, [pc, #44]	; (cf8 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     ccc:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     cd0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     cd8:	bd10      	pop	{r4, pc}
     cda:	bf00      	nop
     cdc:	400fc000 	.word	0x400fc000
     ce0:	40384000 	.word	0x40384000
     ce4:	20008fcc 	.word	0x20008fcc
     ce8:	401f8000 	.word	0x401f8000
     cec:	401f8400 	.word	0x401f8400
     cf0:	00011f1b 	.word	0x00011f1b
     cf4:	1f1f1f00 	.word	0x1f1f1f00
     cf8:	92000001 	.word	0x92000001

00000cfc <dma_setup()>:
  {
     cfc:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     cfe:	4c1c      	ldr	r4, [pc, #112]	; (d70 <dma_setup()+0x74>)
     d00:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     d02:	4d1c      	ldr	r5, [pc, #112]	; (d74 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     d04:	4620      	mov	r0, r4
     d06:	f00c f8c9 	bl	ce9c <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     d0a:	6823      	ldr	r3, [r4, #0]
     d0c:	481a      	ldr	r0, [pc, #104]	; (d78 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     d12:	491a      	ldr	r1, [pc, #104]	; (d7c <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     d14:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     d16:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     d18:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d1a:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     d1c:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d1e:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d20:	4d17      	ldr	r5, [pc, #92]	; (d80 <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     d22:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d24:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d26:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d28:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d2a:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     d2c:	2204      	movs	r2, #4
     d2e:	4915      	ldr	r1, [pc, #84]	; (d84 <dma_setup()+0x88>)
     d30:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     d32:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     d34:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d36:	4d14      	ldr	r5, [pc, #80]	; (d88 <dma_setup()+0x8c>)
     d38:	60da      	str	r2, [r3, #12]
		*mux = 0;
     d3a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d3e:	4b13      	ldr	r3, [pc, #76]	; (d8c <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d40:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d44:	2101      	movs	r1, #1
     d46:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d48:	4811      	ldr	r0, [pc, #68]	; (d90 <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d4a:	f002 051f 	and.w	r5, r2, #31
     d4e:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d52:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d56:	40a9      	lsls	r1, r5
     d58:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d5a:	4d0e      	ldr	r5, [pc, #56]	; (d94 <dma_setup()+0x98>)
     d5c:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d60:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d62:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d64:	490c      	ldr	r1, [pc, #48]	; (d98 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     d66:	4b0d      	ldr	r3, [pc, #52]	; (d9c <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d68:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     d6a:	7922      	ldrb	r2, [r4, #4]
     d6c:	76da      	strb	r2, [r3, #27]
  }
     d6e:	bd38      	pop	{r3, r4, r5, pc}
     d70:	20033c24 	.word	0x20033c24
     d74:	02020000 	.word	0x02020000
     d78:	403840a0 	.word	0x403840a0
     d7c:	20200000 	.word	0x20200000
     d80:	fffff800 	.word	0xfffff800
     d84:	400ec000 	.word	0x400ec000
     d88:	80000013 	.word	0x80000013
     d8c:	38003840 	.word	0x38003840
     d90:	20009400 	.word	0x20009400
     d94:	00000a05 	.word	0x00000a05
     d98:	e000e400 	.word	0xe000e400
     d9c:	400e8000 	.word	0x400e8000

00000da0 <acqModifyFrequency(unsigned long)>:
  {
     da0:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     da2:	4c08      	ldr	r4, [pc, #32]	; (dc4 <acqModifyFrequency(unsigned long)+0x24>)
     da4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     da8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     dac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     db0:	f7ff fe8e 	bl	ad0 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     db4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     db8:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     dbc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     dc0:	bd10      	pop	{r4, pc}
     dc2:	bf00      	nop
     dc4:	40384000 	.word	0x40384000

00000dc8 <_GLOBAL__sub_I_procCount>:
		begin();
     dc8:	4805      	ldr	r0, [pc, #20]	; (de0 <_GLOBAL__sub_I_procCount+0x18>)
     dca:	2100      	movs	r1, #0

  void acqStop(void)
  {
    i2s_stop();
    adc_exit();
     dcc:	b508      	push	{r3, lr}
     dce:	f00c f865 	bl	ce9c <DMAChannel::begin(bool)>
  static DMAChannel dma;
     dd2:	4a04      	ldr	r2, [pc, #16]	; (de4 <_GLOBAL__sub_I_procCount+0x1c>)
     dd4:	4904      	ldr	r1, [pc, #16]	; (de8 <_GLOBAL__sub_I_procCount+0x20>)
     dd6:	4802      	ldr	r0, [pc, #8]	; (de0 <_GLOBAL__sub_I_procCount+0x18>)
     dd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     ddc:	f00e bee8 	b.w	fbb0 <__aeabi_atexit>
     de0:	20033c24 	.word	0x20033c24
     de4:	20008a28 	.word	0x20008a28
     de8:	000009f9 	.word	0x000009f9

00000dec <adc_init()>:
        }
        Serial.println();
    }
#else
    // there is no ADC to be controlled
    void adc_init(void) {}
     dec:	4770      	bx	lr
     dee:	bf00      	nop

00000df0 <adc_exit()>:
     df0:	4770      	bx	lr
     df2:	bf00      	nop

00000df4 <usbPowerSetup()>:
     df4:	4770      	bx	lr
     df6:	bf00      	nop

00000df8 <setAGain(signed char)>:
    void adc_exit(void) {}
    void usbPowerSetup(void){}
    void acqPower(int flag) {(void) flag;}
    void adcReset(void) {}
    void adcStart(void) {}
    void setAGain(int8_t again) {(void) again;}
     df8:	4770      	bx	lr
     dfa:	bf00      	nop

00000dfc <adcStatus()>:
     dfc:	4770      	bx	lr
     dfe:	bf00      	nop

00000e00 <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e04:	b083      	sub	sp, #12
     e06:	4604      	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
     e08:	f00d f9bc 	bl	e184 <rtc_get>
     e0c:	4681      	mov	r9, r0
  uint32_t t1;
  t1 = micros();
     e0e:	f00c fc95 	bl	d73c <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy first sample 
  for (int  ii = 0; ii < NCHAN_ACQ; ii++) tempDatai[ii] = din[ii];
     e12:	4998      	ldr	r1, [pc, #608]	; (1074 <compress(void*)+0x274>)
     e14:	6822      	ldr	r2, [r4, #0]
     e16:	4623      	mov	r3, r4
     e18:	680d      	ldr	r5, [r1, #0]
     e1a:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
  t1 = micros();
     e1e:	4682      	mov	sl, r0
  for (int  ii = 0; ii < NCHAN_ACQ; ii++) tempDatai[ii] = din[ii];
     e20:	4629      	mov	r1, r5
     e22:	462c      	mov	r4, r5
     e24:	602a      	str	r2, [r5, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] =  din[ii] - din[ii - NCHAN_ACQ];
     e26:	4618      	mov	r0, r3
     e28:	3304      	adds	r3, #4
     e2a:	e9d0 0200 	ldrd	r0, r2, [r0]
     e2e:	429e      	cmp	r6, r3
     e30:	eba2 0200 	sub.w	r2, r2, r0
     e34:	f844 2f04 	str.w	r2, [r4, #4]!
     e38:	d1f5      	bne.n	e26 <compress(void*)+0x26>
     e3a:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc

  // find maximum in filtered data 
  int32_t mx = 0;
     e3e:	2200      	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
     e40:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
     e44:	2b00      	cmp	r3, #0
     e46:	bfb8      	it	lt
     e48:	425b      	neglt	r3, r3
     e4a:	429a      	cmp	r2, r3
     e4c:	bfb8      	it	lt
     e4e:	461a      	movlt	r2, r3
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
     e50:	4281      	cmp	r1, r0
     e52:	d1f5      	bne.n	e40 <compress(void*)+0x40>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     e54:	2702      	movs	r7, #2
     e56:	2001      	movs	r0, #1
     e58:	e003      	b.n	e62 <compress(void*)+0x62>
     e5a:	3701      	adds	r7, #1
     e5c:	2f18      	cmp	r7, #24
     e5e:	f000 8101 	beq.w	1064 <compress(void*)+0x264>
     e62:	1e7b      	subs	r3, r7, #1
     e64:	fa00 f103 	lsl.w	r1, r0, r3
     e68:	4291      	cmp	r1, r2
     e6a:	ddf6      	ble.n	e5a <compress(void*)+0x5a>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NBUF_ACQ*nb) / MBIT;
     e6c:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     e70:	40b8      	lsls	r0, r7
  outData[0] = 0xA5A5A5A5;
  outData[1] = nb | shift<<16;
  outData[2] = to;
  outData[3] = t1;
  outData[4] = NCHAN_ACQ;
  outData[5] = NCHAN_ACQ+ncmp; // number of data after header
     e72:	f108 0201 	add.w	r2, r8, #1
  uint32_t msk = (1 << nb) - 1;
     e76:	3801      	subs	r0, #1
  int ndat = NH + NCHAN_ACQ + ncmp;
     e78:	f108 0807 	add.w	r8, r8, #7
  outData[5] = NCHAN_ACQ+ncmp; // number of data after header
     e7c:	9201      	str	r2, [sp, #4]
  proc_stat[nb-1]++;
     e7e:	497e      	ldr	r1, [pc, #504]	; (1078 <compress(void*)+0x278>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     e80:	4c7e      	ldr	r4, [pc, #504]	; (107c <compress(void*)+0x27c>)
  proc_stat[nb-1]++;
     e82:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
     e86:	3201      	adds	r2, #1
     e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     e8c:	6823      	ldr	r3, [r4, #0]
     e8e:	42bb      	cmp	r3, r7
     e90:	bf38      	it	cc
     e92:	6027      	strcc	r7, [r4, #0]
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
     e94:	4c7a      	ldr	r4, [pc, #488]	; (1080 <compress(void*)+0x280>)
     e96:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     e9a:	46a3      	mov	fp, r4
     e9c:	4622      	mov	r2, r4
     e9e:	f852 1f04 	ldr.w	r1, [r2, #4]!
     ea2:	4001      	ands	r1, r0
     ea4:	42b2      	cmp	r2, r6
     ea6:	6011      	str	r1, [r2, #0]
     ea8:	d1f9      	bne.n	e9e <compress(void*)+0x9e>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     eaa:	4d76      	ldr	r5, [pc, #472]	; (1084 <compress(void*)+0x284>)
     eac:	f44f 7200 	mov.w	r2, #512	; 0x200
     eb0:	2100      	movs	r1, #0
     eb2:	4628      	mov	r0, r5
     eb4:	f010 ff80 	bl	11db8 <memset>
  outData[1] = nb | shift<<16;
     eb8:	4a73      	ldr	r2, [pc, #460]	; (1088 <compress(void*)+0x288>)
  outData[5] = NCHAN_ACQ+ncmp; // number of data after header
     eba:	9b01      	ldr	r3, [sp, #4]
    #error "NCH>8"
  #endif

  // pack data
  // 
  int nx = MBIT;
     ebc:	2020      	movs	r0, #32
  outData[1] = nb | shift<<16;
     ebe:	8812      	ldrh	r2, [r2, #0]
  outData[5] = NCHAN_ACQ+ncmp; // number of data after header
     ec0:	616b      	str	r3, [r5, #20]
  outData[0] = 0xA5A5A5A5;
     ec2:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
  outData[1] = nb | shift<<16;
     ec6:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
     eca:	f8db 1000 	ldr.w	r1, [fp]
  outData[0] = 0xA5A5A5A5;
     ece:	602b      	str	r3, [r5, #0]
  outData[4] = NCHAN_ACQ;
     ed0:	2301      	movs	r3, #1
  outData[1] = nb | shift<<16;
     ed2:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     ed4:	2200      	movs	r2, #0
     ed6:	61a9      	str	r1, [r5, #24]
     ed8:	2107      	movs	r1, #7
     eda:	f8cb 2000 	str.w	r2, [fp]
  outData[4] = NCHAN_ACQ;
     ede:	612b      	str	r3, [r5, #16]
  outData[3] = t1;
     ee0:	e9c5 9a02 	strd	r9, sl, [r5, #8]
     ee4:	e00a      	b.n	efc <compress(void*)+0xfc>
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     ee6:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
     eea:	4618      	mov	r0, r3
     eec:	ea42 020c 	orr.w	r2, r2, ip
     ef0:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
     ef4:	42a6      	cmp	r6, r4
     ef6:	d017      	beq.n	f28 <compress(void*)+0x128>
      {   outData[kk] |= (tempData[ii] << nx);
     ef8:	f854 2f04 	ldr.w	r2, [r4, #4]!
  {   nx -= nb;
     efc:	1bc3      	subs	r3, r0, r7
      if(nx > 0)
     efe:	2b00      	cmp	r3, #0
      {   outData[kk] |= (tempData[ii] << nx);
     f00:	fa02 fc03 	lsl.w	ip, r2, r3
      if(nx > 0)
     f04:	dcef      	bgt.n	ee6 <compress(void*)+0xe6>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     f06:	eba7 0c00 	sub.w	ip, r7, r0
     f0a:	f101 0e01 	add.w	lr, r1, #1
          nx += MBIT;
     f0e:	f103 0020 	add.w	r0, r3, #32
      {   outData[kk++] |= tempData[ii];
     f12:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
      else if(nx==0) 
     f16:	d131      	bne.n	f7c <compress(void*)+0x17c>
      {   outData[kk++] |= tempData[ii];
     f18:	4313      	orrs	r3, r2
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
     f1a:	42a6      	cmp	r6, r4
          nx=MBIT;
     f1c:	f04f 0020 	mov.w	r0, #32
      {   outData[kk++] |= tempData[ii];
     f20:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
     f24:	4671      	mov	r1, lr
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
     f26:	d1e7      	bne.n	ef8 <compress(void*)+0xf8>
          outData[kk] = (tempData[ii] << nx);
      }
  }
  // kk should be NH+NCHAN_ACQ+ncmp
  if(kk !=(NH+NCHAN_ACQ+ncmp)) Serial.println("compress error");
     f28:	4541      	cmp	r1, r8
     f2a:	d006      	beq.n	f3a <compress(void*)+0x13a>
     f2c:	210e      	movs	r1, #14
     f2e:	4857      	ldr	r0, [pc, #348]	; (108c <compress(void*)+0x28c>)
     f30:	f00e fc34 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     f34:	4856      	ldr	r0, [pc, #344]	; (1090 <compress(void*)+0x290>)
     f36:	f00c f8a9 	bl	d08c <Print::println()>
  //------------------------------- Compression done -------------------------------
  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
     f3a:	4e56      	ldr	r6, [pc, #344]	; (1094 <compress(void*)+0x294>)
     f3c:	6834      	ldr	r4, [r6, #0]
     f3e:	eb04 0308 	add.w	r3, r4, r8
     f42:	2b80      	cmp	r3, #128	; 0x80
     f44:	dc25      	bgt.n	f92 <compress(void*)+0x192>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     f46:	f1b8 0f00 	cmp.w	r8, #0
     f4a:	4853      	ldr	r0, [pc, #332]	; (1098 <compress(void*)+0x298>)
     f4c:	ea4f 0288 	mov.w	r2, r8, lsl #2
     f50:	494c      	ldr	r1, [pc, #304]	; (1084 <compress(void*)+0x284>)
     f52:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     f56:	bfd8      	it	le
     f58:	2204      	movle	r2, #4
     f5a:	f00c fe9f 	bl	dc9c <memcpy>
     f5e:	f1b8 0f00 	cmp.w	r8, #0
     f62:	f108 33ff 	add.w	r3, r8, #4294967295
     f66:	f104 0401 	add.w	r4, r4, #1
     f6a:	bfd8      	it	le
     f6c:	2300      	movle	r3, #0
  int ret=1;
     f6e:	2701      	movs	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     f70:	4423      	add	r3, r4
     f72:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     f74:	4638      	mov	r0, r7
     f76:	b003      	add	sp, #12
     f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     f7c:	fa22 fc0c 	lsr.w	ip, r2, ip
          outData[kk] = (tempData[ii] << nx);
     f80:	4082      	lsls	r2, r0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     f82:	ea4c 0303 	orr.w	r3, ip, r3
     f86:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
     f8a:	4671      	mov	r1, lr
          outData[kk] = (tempData[ii] << nx);
     f8c:	f845 202e 	str.w	r2, [r5, lr, lsl #2]
     f90:	e7b0      	b.n	ef4 <compress(void*)+0xf4>
  else if ((nout + NH) >= NBUF_OUT) //avoid partial or only header (special case)
     f92:	2c79      	cmp	r4, #121	; 0x79
     f94:	dd22      	ble.n	fdc <compress(void*)+0x1dc>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
     f96:	2c7f      	cmp	r4, #127	; 0x7f
     f98:	dc0a      	bgt.n	fb0 <compress(void*)+0x1b0>
     f9a:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
     f9e:	483e      	ldr	r0, [pc, #248]	; (1098 <compress(void*)+0x298>)
     fa0:	2100      	movs	r1, #0
     fa2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     fa6:	0092      	lsls	r2, r2, #2
     fa8:	f010 ff06 	bl	11db8 <memset>
     fac:	2380      	movs	r3, #128	; 0x80
     fae:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     fb0:	4839      	ldr	r0, [pc, #228]	; (1098 <compress(void*)+0x298>)
     fb2:	f004 f899 	bl	50e8 <pushData(unsigned long*)>
     fb6:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     fb8:	ea4f 0288 	mov.w	r2, r8, lsl #2
     fbc:	4931      	ldr	r1, [pc, #196]	; (1084 <compress(void*)+0x284>)
      if(!pushData(dout)) ret = 0;
     fbe:	bf18      	it	ne
     fc0:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     fc2:	f1b8 0f00 	cmp.w	r8, #0
     fc6:	4834      	ldr	r0, [pc, #208]	; (1098 <compress(void*)+0x298>)
     fc8:	bfd8      	it	le
     fca:	2204      	movle	r2, #4
     fcc:	f00c fe66 	bl	dc9c <memcpy>
}
     fd0:	4638      	mov	r0, r7
     fd2:	f8c6 8000 	str.w	r8, [r6]
     fd6:	b003      	add	sp, #12
     fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      outData[5] = (outData[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     fdc:	696a      	ldr	r2, [r5, #20]
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
     fde:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
      outData[5] = (outData[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     fe2:	f1c4 037a 	rsb	r3, r4, #122	; 0x7a
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
     fe6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1098 <compress(void*)+0x298>
     fea:	ea4f 0b89 	mov.w	fp, r9, lsl #2
     fee:	4925      	ldr	r1, [pc, #148]	; (1084 <compress(void*)+0x284>)
      outData[5] = (outData[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     ff0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
     ff4:	eb0a 0084 	add.w	r0, sl, r4, lsl #2
     ff8:	465a      	mov	r2, fp
      outData[5] = (outData[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     ffa:	616b      	str	r3, [r5, #20]
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
     ffc:	f00c fe4e 	bl	dc9c <memcpy>
    1000:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
    1002:	4650      	mov	r0, sl
    1004:	6033      	str	r3, [r6, #0]
    1006:	f004 f86f 	bl	50e8 <pushData(unsigned long*)>
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    100a:	696a      	ldr	r2, [r5, #20]
      if(!pushData(dout)) ret = 0;
    100c:	1e07      	subs	r7, r0, #0
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    100e:	4b23      	ldr	r3, [pc, #140]	; (109c <compress(void*)+0x29c>)
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    1010:	46d4      	mov	ip, sl
    1012:	f8df e070 	ldr.w	lr, [pc, #112]	; 1084 <compress(void*)+0x284>
      if(!pushData(dout)) ret = 0;
    1016:	bf18      	it	ne
    1018:	2701      	movne	r7, #1
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    101a:	4013      	ands	r3, r2
      nr=ndat-ii; // for header
    101c:	eba8 0209 	sub.w	r2, r8, r9
      while (ii < ndat) dout[nout++] = outData[ii++];
    1020:	45c1      	cmp	r9, r8
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    1022:	ea43 0302 	orr.w	r3, r3, r2
    1026:	616b      	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    1028:	f04f 0306 	mov.w	r3, #6
    102c:	6033      	str	r3, [r6, #0]
    102e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1032:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1036:	e89e 0003 	ldmia.w	lr, {r0, r1}
    103a:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
    103e:	da99      	bge.n	f74 <compress(void*)+0x174>
    1040:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
    1044:	eb05 010b 	add.w	r1, r5, fp
    1048:	f10a 0018 	add.w	r0, sl, #24
    104c:	4442      	add	r2, r8
    104e:	0092      	lsls	r2, r2, #2
    1050:	f00c fe24 	bl	dc9c <memcpy>
    1054:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
    1058:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
    105a:	4443      	add	r3, r8
    105c:	6033      	str	r3, [r6, #0]
}
    105e:	b003      	add	sp, #12
    1060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1064:	2361      	movs	r3, #97	; 0x61
    1066:	f04f 0867 	mov.w	r8, #103	; 0x67
    106a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    106e:	9301      	str	r3, [sp, #4]
    1070:	2317      	movs	r3, #23
    1072:	e704      	b.n	e7e <compress(void*)+0x7e>
    1074:	20008fdc 	.word	0x20008fdc
    1078:	20034c50 	.word	0x20034c50
    107c:	20034bf8 	.word	0x20034bf8
    1080:	20034320 	.word	0x20034320
    1084:	20033ecc 	.word	0x20033ecc
    1088:	20035456 	.word	0x20035456
    108c:	200006bc 	.word	0x200006bc
    1090:	20008a0c 	.word	0x20008a0c
    1094:	2003477c 	.word	0x2003477c
    1098:	20033c2c 	.word	0x20033c2c
    109c:	ffff0000 	.word	0xffff0000

000010a0 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
    10a0:	b570      	push	{r4, r5, r6, lr}
    10a2:	b082      	sub	sp, #8
    10a4:	4606      	mov	r6, r0
    10a6:	4614      	mov	r4, r2
    10a8:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
    10aa:	4668      	mov	r0, sp
    10ac:	f004 f9b4 	bl	5418 <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
    10b0:	f89d 2002 	ldrb.w	r2, [sp, #2]
    10b4:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    10b8:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0 :
    10bc:	2a0c      	cmp	r2, #12
    10be:	bf98      	it	ls
    10c0:	f1bc 0f1f 	cmpls.w	ip, #31
    10c4:	d804      	bhi.n	10d0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
    10c6:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
    10ca:	b29b      	uxth	r3, r3
    10cc:	2b7f      	cmp	r3, #127	; 0x7f
    10ce:	d920      	bls.n	1112 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
         year << 9 | month << 5 | day;
    10d0:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    10d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    10d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    10dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    10e0:	2a17      	cmp	r2, #23
    10e2:	bf98      	it	ls
    10e4:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
    10e6:	f8a6 c000 	strh.w	ip, [r6]
    10ea:	d801      	bhi.n	10f0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
    10ec:	293b      	cmp	r1, #59	; 0x3b
    10ee:	d905      	bls.n	10fc <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
         hour << 11 | minute << 5 | second >> 1;
    10f0:	2300      	movs	r3, #0
    *ms10 = 0;
    10f2:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    10f4:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    10f6:	7022      	strb	r2, [r4, #0]
}
    10f8:	b002      	add	sp, #8
    10fa:	bd70      	pop	{r4, r5, r6, pc}
    10fc:	015b      	lsls	r3, r3, #5
    10fe:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
    1102:	2200      	movs	r2, #0
    1104:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    1108:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    110a:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    110c:	7022      	strb	r2, [r4, #0]
}
    110e:	b002      	add	sp, #8
    1110:	bd70      	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    1112:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
    1116:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
    111a:	fa1f fc8c 	uxth.w	ip, ip
    111e:	e7d9      	b.n	10d4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

00001120 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
    1120:	4b04      	ldr	r3, [pc, #16]	; (1134 <FsFile::~FsFile()+0x14>)
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1122:	b510      	push	{r4, lr}
    1124:	4604      	mov	r4, r0
    1126:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
    112a:	f009 fb07 	bl	a73c <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    112e:	4620      	mov	r0, r4
    1130:	bd10      	pop	{r4, pc}
    1132:	bf00      	nop
    1134:	20000b58 	.word	0x20000b58

00001138 <checkEndOfFile(short) [clone .part.0]>:
    writeHeaderInfo((char *)&header[20],SerNum);
    header[127]=0x55555555;
    return 1;
}

int16_t checkEndOfFile(int16_t state)
    1138:	b510      	push	{r4, lr}
{ 
  static uint32_t dta=0;

  if(state==RUNNING)
  { 
    uint32_t tt = rtc_get();
    113a:	f00d f823 	bl	e184 <rtc_get>
    //
    uint32_t dt1 = tt % t_acq;
    113e:	4b32      	ldr	r3, [pc, #200]	; (1208 <checkEndOfFile(short) [clone .part.0]+0xd0>)
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    1140:	4932      	ldr	r1, [pc, #200]	; (120c <checkEndOfFile(short) [clone .part.0]+0xd4>)
    uint32_t dt1 = tt % t_acq;
    1142:	881a      	ldrh	r2, [r3, #0]
    1144:	b292      	uxth	r2, r2
    1146:	fbb0 f3f2 	udiv	r3, r0, r2
    114a:	fb02 0313 	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    114e:	680a      	ldr	r2, [r1, #0]
    1150:	4293      	cmp	r3, r2
    1152:	d214      	bcs.n	117e <checkEndOfFile(short) [clone .part.0]+0x46>
    dta = dt1;
    1154:	600b      	str	r3, [r1, #0]
    //
    // if file should be closed
    // check also if it should then hibernate 
    if(state == DOCLOSE)                // in case of DOCLOSE
    { 
      if(t_rep>t_on)                      // and if foreseen  check for hibernation
    1156:	4c2e      	ldr	r4, [pc, #184]	; (1210 <checkEndOfFile(short) [clone .part.0]+0xd8>)
    1158:	492e      	ldr	r1, [pc, #184]	; (1214 <checkEndOfFile(short) [clone .part.0]+0xdc>)
    115a:	8822      	ldrh	r2, [r4, #0]
    115c:	880b      	ldrh	r3, [r1, #0]
    115e:	b292      	uxth	r2, r2
    1160:	b29b      	uxth	r3, r3
    1162:	429a      	cmp	r2, r3
    1164:	d90e      	bls.n	1184 <checkEndOfFile(short) [clone .part.0]+0x4c>
      { uint32_t dt2 = (tt % t_rep);
    1166:	8823      	ldrh	r3, [r4, #0]
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    1168:	880a      	ldrh	r2, [r1, #0]
      { uint32_t dt2 = (tt % t_rep);
    116a:	b29b      	uxth	r3, r3
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    116c:	b292      	uxth	r2, r2
      { uint32_t dt2 = (tt % t_rep);
    116e:	fbb0 f1f3 	udiv	r1, r0, r3
    1172:	fb03 0311 	mls	r3, r3, r1, r0
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    1176:	4293      	cmp	r3, r2
    1178:	d304      	bcc.n	1184 <checkEndOfFile(short) [clone .part.0]+0x4c>
      }
    }
    if(state == DOCLOSE)                // in case of DOCLOSE check start day
    {
      uint32_t dd=tt/(24*3600);
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    117a:	2004      	movs	r0, #4
    }
  }
  return state;
}
    117c:	bd10      	pop	{r4, pc}
    dta = dt1;
    117e:	2002      	movs	r0, #2
    1180:	600b      	str	r3, [r1, #0]
}
    1182:	bd10      	pop	{r4, pc}
      if(d_rep>d_on)                      // and if foreseen  check for hibernation
    1184:	4c24      	ldr	r4, [pc, #144]	; (1218 <checkEndOfFile(short) [clone .part.0]+0xe0>)
    1186:	4925      	ldr	r1, [pc, #148]	; (121c <checkEndOfFile(short) [clone .part.0]+0xe4>)
    1188:	8822      	ldrh	r2, [r4, #0]
    118a:	880b      	ldrh	r3, [r1, #0]
    118c:	b292      	uxth	r2, r2
    118e:	b29b      	uxth	r3, r3
    1190:	429a      	cmp	r2, r3
    1192:	d90d      	bls.n	11b0 <checkEndOfFile(short) [clone .part.0]+0x78>
      { int32_t dd=tt/(24*3600);
    1194:	4b22      	ldr	r3, [pc, #136]	; (1220 <checkEndOfFile(short) [clone .part.0]+0xe8>)
        uint32_t dd2 = (dd % d_rep);
    1196:	8822      	ldrh	r2, [r4, #0]
      { int32_t dd=tt/(24*3600);
    1198:	fba3 4300 	umull	r4, r3, r3, r0
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    119c:	8809      	ldrh	r1, [r1, #0]
        uint32_t dd2 = (dd % d_rep);
    119e:	b292      	uxth	r2, r2
      { int32_t dd=tt/(24*3600);
    11a0:	0c1b      	lsrs	r3, r3, #16
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    11a2:	b289      	uxth	r1, r1
        uint32_t dd2 = (dd % d_rep);
    11a4:	fbb3 f4f2 	udiv	r4, r3, r2
    11a8:	fb02 3314 	mls	r3, r2, r4, r3
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    11ac:	428b      	cmp	r3, r1
    11ae:	d2e4      	bcs.n	117a <checkEndOfFile(short) [clone .part.0]+0x42>
      uint32_t hh=(tt%((24*3600)/3600));
    11b0:	4b1c      	ldr	r3, [pc, #112]	; (1224 <checkEndOfFile(short) [clone .part.0]+0xec>)
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    11b2:	4a1d      	ldr	r2, [pc, #116]	; (1228 <checkEndOfFile(short) [clone .part.0]+0xf0>)
      uint32_t hh=(tt%((24*3600)/3600));
    11b4:	fba3 1300 	umull	r1, r3, r3, r0
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    11b8:	8812      	ldrh	r2, [r2, #0]
      uint32_t hh=(tt%((24*3600)/3600));
    11ba:	091b      	lsrs	r3, r3, #4
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    11bc:	b292      	uxth	r2, r2
      uint32_t hh=(tt%((24*3600)/3600));
    11be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    11c2:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    11c6:	4293      	cmp	r3, r2
    11c8:	d313      	bcc.n	11f2 <checkEndOfFile(short) [clone .part.0]+0xba>
    11ca:	4a18      	ldr	r2, [pc, #96]	; (122c <checkEndOfFile(short) [clone .part.0]+0xf4>)
    11cc:	8812      	ldrh	r2, [r2, #0]
    11ce:	b292      	uxth	r2, r2
    11d0:	4293      	cmp	r3, r2
    11d2:	d20e      	bcs.n	11f2 <checkEndOfFile(short) [clone .part.0]+0xba>
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    11d4:	4b16      	ldr	r3, [pc, #88]	; (1230 <checkEndOfFile(short) [clone .part.0]+0xf8>)
    11d6:	f644 6120 	movw	r1, #20000	; 0x4e20
      uint32_t dd=tt/(24*3600);
    11da:	4a11      	ldr	r2, [pc, #68]	; (1220 <checkEndOfFile(short) [clone .part.0]+0xe8>)
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    11dc:	881b      	ldrh	r3, [r3, #0]
      uint32_t dd=tt/(24*3600);
    11de:	fba2 2000 	umull	r2, r0, r2, r0
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    11e2:	fa01 f383 	sxtah	r3, r1, r3
    11e6:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
    11ea:	bf8c      	ite	hi
    11ec:	2004      	movhi	r0, #4
    11ee:	2003      	movls	r0, #3
}
    11f0:	bd10      	pop	{r4, pc}
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    11f2:	4a10      	ldr	r2, [pc, #64]	; (1234 <checkEndOfFile(short) [clone .part.0]+0xfc>)
    11f4:	8812      	ldrh	r2, [r2, #0]
    11f6:	b292      	uxth	r2, r2
    11f8:	4293      	cmp	r3, r2
    11fa:	d3be      	bcc.n	117a <checkEndOfFile(short) [clone .part.0]+0x42>
    11fc:	4a0e      	ldr	r2, [pc, #56]	; (1238 <checkEndOfFile(short) [clone .part.0]+0x100>)
    11fe:	8812      	ldrh	r2, [r2, #0]
    1200:	b292      	uxth	r2, r2
    1202:	4293      	cmp	r3, r2
    1204:	d3e6      	bcc.n	11d4 <checkEndOfFile(short) [clone .part.0]+0x9c>
    1206:	e7b8      	b.n	117a <checkEndOfFile(short) [clone .part.0]+0x42>
    1208:	20009000 	.word	0x20009000
    120c:	20034770 	.word	0x20034770
    1210:	20035458 	.word	0x20035458
    1214:	20009002 	.word	0x20009002
    1218:	20035446 	.word	0x20035446
    121c:	20008ff8 	.word	0x20008ff8
    1220:	c22e4507 	.word	0xc22e4507
    1224:	aaaaaaab 	.word	0xaaaaaaab
    1228:	2003544c 	.word	0x2003544c
    122c:	20008ffa 	.word	0x20008ffa
    1230:	20035444 	.word	0x20035444
    1234:	20008ffc 	.word	0x20008ffc
    1238:	20008ffe 	.word	0x20008ffe

0000123c <Print::println(char const*) [clone .isra.0]>:
    123c:	b538      	push	{r3, r4, r5, lr}
    123e:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1240:	b149      	cbz	r1, 1256 <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    1242:	4608      	mov	r0, r1
    1244:	460d      	mov	r5, r1
    1246:	f011 f99b 	bl	12580 <strlen>
    124a:	6823      	ldr	r3, [r4, #0]
    124c:	4602      	mov	r2, r0
    124e:	4629      	mov	r1, r5
    1250:	685b      	ldr	r3, [r3, #4]
    1252:	4620      	mov	r0, r4
    1254:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1256:	4620      	mov	r0, r4
    1258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    125c:	f00b bf16 	b.w	d08c <Print::println()>

00001260 <loadConfigfromFile()>:
{
    1260:	b5f0      	push	{r4, r5, r6, r7, lr}
    file = sd->open("config.txt"); 
    1262:	492e      	ldr	r1, [pc, #184]	; (131c <loadConfigfromFile()+0xbc>)
{
    1264:	b095      	sub	sp, #84	; 0x54
    file = sd->open("config.txt"); 
    1266:	2300      	movs	r3, #0
    1268:	4a2d      	ldr	r2, [pc, #180]	; (1320 <loadConfigfromFile()+0xc0>)
    126a:	6809      	ldr	r1, [r1, #0]
    126c:	4668      	mov	r0, sp
    126e:	f009 fb7f 	bl	a970 <FsVolume::open(char const*, int)>
class Print
    1272:	4d2c      	ldr	r5, [pc, #176]	; (1324 <loadConfigfromFile()+0xc4>)
    1274:	a904      	add	r1, sp, #16
    1276:	f105 0010 	add.w	r0, r5, #16
class Stream : public Print
    127a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    127e:	e9c5 2301 	strd	r2, r3, [r5, #4]
    1282:	f89d 300c 	ldrb.w	r3, [sp, #12]
    1286:	732b      	strb	r3, [r5, #12]
    1288:	f009 f9fe 	bl	a688 <FsBaseFile::operator=(FsBaseFile const&)>
    128c:	4b26      	ldr	r3, [pc, #152]	; (1328 <loadConfigfromFile()+0xc8>)
  ~FsBaseFile() {close();}
    128e:	a804      	add	r0, sp, #16
    1290:	9300      	str	r3, [sp, #0]
    1292:	f009 fa53 	bl	a73c <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    1296:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1298:	2800      	cmp	r0, #0
    129a:	d039      	beq.n	1310 <loadConfigfromFile()+0xb0>
    129c:	4e23      	ldr	r6, [pc, #140]	; (132c <loadConfigfromFile()+0xcc>)
    129e:	2400      	movs	r4, #0
    return m_fFile ? m_fFile->available() :
    12a0:	b1e0      	cbz	r0, 12dc <loadConfigfromFile()+0x7c>
    return isFile() ? fileSize() - curPosition() : 0;
    12a2:	7803      	ldrb	r3, [r0, #0]
    12a4:	071a      	lsls	r2, r3, #28
    12a6:	d405      	bmi.n	12b4 <loadConfigfromFile()+0x54>
      file.close(); 
    12a8:	4821      	ldr	r0, [pc, #132]	; (1330 <loadConfigfromFile()+0xd0>)
    12aa:	f009 fa47 	bl	a73c <FsBaseFile::close()>
  return ii;
    12ae:	b220      	sxth	r0, r4
}
    12b0:	b015      	add	sp, #84	; 0x54
    12b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { while (file.available()) 
    12b4:	69c2      	ldr	r2, [r0, #28]
    12b6:	6943      	ldr	r3, [r0, #20]
    12b8:	429a      	cmp	r2, r3
    12ba:	d0f5      	beq.n	12a8 <loadConfigfromFile()+0x48>
    return m_fFile ? m_fFile->read(buf, count) :
    12bc:	2201      	movs	r2, #1
    12be:	4669      	mov	r1, sp
    12c0:	f007 fcc2 	bl	8c48 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
    12c4:	2801      	cmp	r0, #1
    return m_fFile ? m_fFile->available() :
    12c6:	6ca8      	ldr	r0, [r5, #72]	; 0x48
        configText[ii++]=file.read();
    12c8:	f104 0401 	add.w	r4, r4, #1
    return read(&b, 1) == 1 ? b : -1;
    12cc:	bf0c      	ite	eq
    12ce:	f89d 3000 	ldrbeq.w	r3, [sp]
    12d2:	23ff      	movne	r3, #255	; 0xff
    12d4:	f806 3b01 	strb.w	r3, [r6], #1
    return m_fFile ? m_fFile->available() :
    12d8:	2800      	cmp	r0, #0
    12da:	d1e2      	bne.n	12a2 <loadConfigfromFile()+0x42>
    12dc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
    12de:	2800      	cmp	r0, #0
    12e0:	d0e2      	beq.n	12a8 <loadConfigfromFile()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
    12e2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    12e6:	071b      	lsls	r3, r3, #28
    12e8:	d5de      	bpl.n	12a8 <loadConfigfromFile()+0x48>
    12ea:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
    12ee:	e9d0 7100 	ldrd	r7, r1, [r0]
    12f2:	1bdb      	subs	r3, r3, r7
    12f4:	eb62 0201 	sbc.w	r2, r2, r1
    return n > INT_MAX ? INT_MAX : n;
    12f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    12fc:	f172 0200 	sbcs.w	r2, r2, #0
    1300:	d201      	bcs.n	1306 <loadConfigfromFile()+0xa6>
    { while (file.available()) 
    1302:	2b00      	cmp	r3, #0
    1304:	d0d0      	beq.n	12a8 <loadConfigfromFile()+0x48>
           m_xFile ? m_xFile->read(buf, count) : -1;
    1306:	2201      	movs	r2, #1
    1308:	4669      	mov	r1, sp
    130a:	f005 fdab 	bl	6e64 <ExFatFile::read(void*, unsigned int)>
    130e:	e7d9      	b.n	12c4 <loadConfigfromFile()+0x64>
  bool isOpen() const {return m_fFile || m_xFile;}
    1310:	6cec      	ldr	r4, [r5, #76]	; 0x4c
    1312:	2c00      	cmp	r4, #0
    1314:	d1c2      	bne.n	129c <loadConfigfromFile()+0x3c>
    1316:	4620      	mov	r0, r4
    1318:	e7ca      	b.n	12b0 <loadConfigfromFile()+0x50>
    131a:	bf00      	nop
    131c:	20008fd4 	.word	0x20008fd4
    1320:	20000578 	.word	0x20000578
    1324:	20034b60 	.word	0x20034b60
    1328:	20000b58 	.word	0x20000b58
    132c:	2000de0c 	.word	0x2000de0c
    1330:	20034b70 	.word	0x20034b70

00001334 <filing_init()>:
  sdSectorCount=sd->card()->sectorCount();
    1334:	4b12      	ldr	r3, [pc, #72]	; (1380 <filing_init()+0x4c>)
  FsDateTime::callback = dateTime;
    1336:	4a13      	ldr	r2, [pc, #76]	; (1384 <filing_init()+0x50>)
  SdCard* card() {return m_card;}
    1338:	681b      	ldr	r3, [r3, #0]
    133a:	4913      	ldr	r1, [pc, #76]	; (1388 <filing_init()+0x54>)
    133c:	f8d3 048c 	ldr.w	r0, [r3, #1164]	; 0x48c
  sdSectorCount=sd->card()->sectorCount();
    1340:	6803      	ldr	r3, [r0, #0]
{
    1342:	b510      	push	{r4, lr}
  sdSectorCount=sd->card()->sectorCount();
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <filing_init()+0x58>)
  FsDateTime::callback = dateTime;
    1346:	6011      	str	r1, [r2, #0]
  sdSectorCount=sd->card()->sectorCount();
    1348:	69db      	ldr	r3, [r3, #28]
    134a:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    134c:	2300      	movs	r3, #0
    134e:	220a      	movs	r2, #10
    1350:	4601      	mov	r1, r0
    1352:	6020      	str	r0, [r4, #0]
    1354:	480e      	ldr	r0, [pc, #56]	; (1390 <filing_init()+0x5c>)
    1356:	f00b fec3 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    135a:	480d      	ldr	r0, [pc, #52]	; (1390 <filing_init()+0x5c>)
    135c:	f00b fe96 	bl	d08c <Print::println()>
  haveStore=1;
    1360:	4b0c      	ldr	r3, [pc, #48]	; (1394 <filing_init()+0x60>)
    1362:	2201      	movs	r2, #1
    1364:	601a      	str	r2, [r3, #0]
  if(loadConfigfromFile())              // is in Filing
    1366:	f7ff ff7b 	bl	1260 <loadConfigfromFile()>
    136a:	b928      	cbnz	r0, 1378 <filing_init()+0x44>
  pinMode(LED,OUTPUT);
    136c:	200d      	movs	r0, #13
    136e:	2101      	movs	r1, #1
    1370:	f00c fa38 	bl	d7e4 <pinMode>
}
    1374:	2001      	movs	r0, #1
    1376:	bd10      	pop	{r4, pc}
    decodeConfigfromFile(configText);   // in in Menu
    1378:	4807      	ldr	r0, [pc, #28]	; (1398 <filing_init()+0x64>)
    137a:	f003 fc31 	bl	4be0 <decodeConfigfromFile(char*)>
    137e:	e7f5      	b.n	136c <filing_init()+0x38>
    1380:	20008fd4 	.word	0x20008fd4
    1384:	20034730 	.word	0x20034730
    1388:	000010a1 	.word	0x000010a1
    138c:	20034d18 	.word	0x20034d18
    1390:	20008a0c 	.word	0x20008a0c
    1394:	20034720 	.word	0x20034720
    1398:	2000de0c 	.word	0x2000de0c

0000139c <stopSD()>:
  sd->card()->syncDevice();
    139c:	4b03      	ldr	r3, [pc, #12]	; (13ac <stopSD()+0x10>)
    139e:	681b      	ldr	r3, [r3, #0]
    13a0:	f8d3 048c 	ldr.w	r0, [r3, #1164]	; 0x48c
    13a4:	6803      	ldr	r3, [r0, #0]
    13a6:	6a1b      	ldr	r3, [r3, #32]
    13a8:	4718      	bx	r3
    13aa:	bf00      	nop
    13ac:	20008fd4 	.word	0x20008fd4

000013b0 <timeStamp()>:
{
    13b0:	b510      	push	{r4, lr}
    13b2:	b086      	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    13b4:	4c0d      	ldr	r4, [pc, #52]	; (13ec <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    13b6:	a804      	add	r0, sp, #16
    13b8:	f004 f82e 	bl	5418 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    13bc:	f99d 2017 	ldrsb.w	r2, [sp, #23]
    13c0:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    13c4:	f99d 0015 	ldrsb.w	r0, [sp, #21]
    13c8:	f99d 1013 	ldrsb.w	r1, [sp, #19]
    13cc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    13d0:	e9cd 1000 	strd	r1, r0, [sp]
    13d4:	f99d 3012 	ldrsb.w	r3, [sp, #18]
    13d8:	4620      	mov	r0, r4
    13da:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    13de:	4904      	ldr	r1, [pc, #16]	; (13f0 <timeStamp()+0x40>)
    13e0:	f010 fb44 	bl	11a6c <sprintf>
}
    13e4:	4620      	mov	r0, r4
    13e6:	b006      	add	sp, #24
    13e8:	bd10      	pop	{r4, pc}
    13ea:	bf00      	nop
    13ec:	20034780 	.word	0x20034780
    13f0:	200007ec 	.word	0x200007ec

000013f4 <writeHeaderInfo(char*, int)>:
{
    13f4:	b570      	push	{r4, r5, r6, lr}
  strcpy(&info[ih], MAGIC); ih+=4;              //4
    13f6:	4b46      	ldr	r3, [pc, #280]	; (1510 <writeHeaderInfo(char*, int)+0x11c>)
{
    13f8:	4604      	mov	r4, r0
    13fa:	4a46      	ldr	r2, [pc, #280]	; (1514 <writeHeaderInfo(char*, int)+0x120>)
    13fc:	b082      	sub	sp, #8
  strcpy(&info[ih], MAGIC); ih+=4;              //4
    13fe:	6818      	ldr	r0, [r3, #0]
    1400:	4625      	mov	r5, r4
    1402:	791b      	ldrb	r3, [r3, #4]
    1404:	6816      	ldr	r6, [r2, #0]
    1406:	6020      	str	r0, [r4, #0]
    1408:	f805 3f04 	strb.w	r3, [r5, #4]!
{
    140c:	9101      	str	r1, [sp, #4]
  strcpy(&info[ih], timeStamp()); ih +=16;      //20
    140e:	f7ff ffcf 	bl	13b0 <timeStamp()>
    1412:	4601      	mov	r1, r0
    1414:	4628      	mov	r0, r5
  memcpy(&info[ih], (char *)b_string,40); ih+=40;       //76
    1416:	4d40      	ldr	r5, [pc, #256]	; (1518 <writeHeaderInfo(char*, int)+0x124>)
  strcpy(&info[ih], timeStamp()); ih +=16;      //20
    1418:	f011 f800 	bl	1241c <strcpy>
  sprintf(&info[ih]," %8x",serNum); ih +=12;    //32
    141c:	9a01      	ldr	r2, [sp, #4]
    141e:	f104 0014 	add.w	r0, r4, #20
    1422:	493e      	ldr	r1, [pc, #248]	; (151c <writeHeaderInfo(char*, int)+0x128>)
    1424:	f010 fb22 	bl	11a6c <sprintf>
  memcpy(&info[ih], &tt,4); ih +=4;             //36
    1428:	6226      	str	r6, [r4, #32]
  memcpy(&info[ih], (char *)b_string,40); ih+=40;       //76
    142a:	f104 0c24 	add.w	ip, r4, #36	; 0x24
    142e:	f105 0620 	add.w	r6, r5, #32
    1432:	46ae      	mov	lr, r5
    1434:	f10c 0c10 	add.w	ip, ip, #16
    1438:	3510      	adds	r5, #16
    143a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    143e:	45b6      	cmp	lr, r6
    1440:	f84c 0c10 	str.w	r0, [ip, #-16]
    1444:	f84c 1c0c 	str.w	r1, [ip, #-12]
    1448:	f84c 2c08 	str.w	r2, [ip, #-8]
    144c:	f84c 3c04 	str.w	r3, [ip, #-4]
    1450:	d1ef      	bne.n	1432 <writeHeaderInfo(char*, int)+0x3e>
    1452:	462b      	mov	r3, r5
  memcpy(&info[ih], (char *)k_string,40); ih+=40;       //116
    1454:	4d32      	ldr	r5, [pc, #200]	; (1520 <writeHeaderInfo(char*, int)+0x12c>)
    1456:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
    145a:	f105 0620 	add.w	r6, r5, #32
  memcpy(&info[ih], (char *)b_string,40); ih+=40;       //76
    145e:	cb03      	ldmia	r3!, {r0, r1}
    1460:	f8cc 0000 	str.w	r0, [ip]
    1464:	f8cc 1004 	str.w	r1, [ip, #4]
  memcpy(&info[ih], (char *)k_string,40); ih+=40;       //116
    1468:	46ac      	mov	ip, r5
    146a:	f10e 0e10 	add.w	lr, lr, #16
    146e:	3510      	adds	r5, #16
    1470:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    1474:	45b4      	cmp	ip, r6
    1476:	f84e 0c10 	str.w	r0, [lr, #-16]
    147a:	f84e 1c0c 	str.w	r1, [lr, #-12]
    147e:	f84e 2c08 	str.w	r2, [lr, #-8]
    1482:	f84e 3c04 	str.w	r3, [lr, #-4]
    1486:	d1ef      	bne.n	1468 <writeHeaderInfo(char*, int)+0x74>
    1488:	462b      	mov	r3, r5
  memcpy(&info[ih], (char *)n_string,40); ih+=40;       //156
    148a:	4d26      	ldr	r5, [pc, #152]	; (1524 <writeHeaderInfo(char*, int)+0x130>)
    148c:	f104 0c74 	add.w	ip, r4, #116	; 0x74
    1490:	f105 0620 	add.w	r6, r5, #32
  memcpy(&info[ih], (char *)k_string,40); ih+=40;       //116
    1494:	cb03      	ldmia	r3!, {r0, r1}
    1496:	f8ce 0000 	str.w	r0, [lr]
    149a:	f8ce 1004 	str.w	r1, [lr, #4]
  memcpy(&info[ih], (char *)n_string,40); ih+=40;       //156
    149e:	46ae      	mov	lr, r5
    14a0:	f10c 0c10 	add.w	ip, ip, #16
    14a4:	3510      	adds	r5, #16
    14a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    14aa:	45b6      	cmp	lr, r6
    14ac:	f84c 0c10 	str.w	r0, [ip, #-16]
    14b0:	f84c 1c0c 	str.w	r1, [ip, #-12]
    14b4:	f84c 2c08 	str.w	r2, [ip, #-8]
    14b8:	f84c 3c04 	str.w	r3, [ip, #-4]
    14bc:	d1ef      	bne.n	149e <writeHeaderInfo(char*, int)+0xaa>
    14be:	cd03      	ldmia	r5!, {r0, r1}
    14c0:	f8cc 1004 	str.w	r1, [ip, #4]
    14c4:	f8cc 0000 	str.w	r0, [ip]
  memcpy(&info[ih], getStore(),16*2); ih +=32;  //188
    14c8:	f003 fb86 	bl	4bd8 <getStore()>
    14cc:	6805      	ldr	r5, [r0, #0]
    14ce:	6841      	ldr	r1, [r0, #4]
    14d0:	6882      	ldr	r2, [r0, #8]
    14d2:	68c3      	ldr	r3, [r0, #12]
    14d4:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
    14d8:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    14dc:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
    14e0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    14e4:	6905      	ldr	r5, [r0, #16]
    14e6:	6982      	ldr	r2, [r0, #24]
    14e8:	6941      	ldr	r1, [r0, #20]
    14ea:	69c3      	ldr	r3, [r0, #28]
    14ec:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
  strcpy(&info[ih]," end");                     //196
    14f0:	4d0d      	ldr	r5, [pc, #52]	; (1528 <writeHeaderInfo(char*, int)+0x134>)
  memcpy(&info[ih], getStore(),16*2); ih +=32;  //188
    14f2:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
  strcpy(&info[ih]," end");                     //196
    14f6:	6828      	ldr	r0, [r5, #0]
    14f8:	792a      	ldrb	r2, [r5, #4]
  memcpy(&info[ih], getStore(),16*2); ih +=32;  //188
    14fa:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    14fe:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  strcpy(&info[ih]," end");                     //196
    1502:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    1506:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
}
    150a:	b002      	add	sp, #8
    150c:	bd70      	pop	{r4, r5, r6, pc}
    150e:	bf00      	nop
    1510:	200004b0 	.word	0x200004b0
    1514:	20035424 	.word	0x20035424
    1518:	20034b10 	.word	0x20034b10
    151c:	200004b8 	.word	0x200004b8
    1520:	20034bb0 	.word	0x20034bb0
    1524:	20034c00 	.word	0x20034c00
    1528:	200004c0 	.word	0x200004c0

0000152c <wavHeaderWrite(char*)>:
{ 
    152c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile ? m_fFile->curPosition() :
    1530:	4c21      	ldr	r4, [pc, #132]	; (15b8 <wavHeaderWrite(char*)+0x8c>)
    1532:	4607      	mov	r7, r0
    1534:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1536:	b373      	cbz	r3, 1596 <wavHeaderWrite(char*)+0x6a>
    1538:	695e      	ldr	r6, [r3, #20]
    153a:	2500      	movs	r5, #0
  Serial.printf("; fpos=%d ",fpos);
    153c:	4632      	mov	r2, r6
    153e:	462b      	mov	r3, r5
    1540:	491e      	ldr	r1, [pc, #120]	; (15bc <wavHeaderWrite(char*)+0x90>)
    1542:	481f      	ldr	r0, [pc, #124]	; (15c0 <wavHeaderWrite(char*)+0x94>)
    1544:	f00b fdbe 	bl	d0c4 <Print::printf(char const*, ...)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1548:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    154a:	b1e0      	cbz	r0, 1586 <wavHeaderWrite(char*)+0x5a>
    154c:	2100      	movs	r1, #0
    154e:	f007 fdc3 	bl	90d8 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    1552:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1554:	b170      	cbz	r0, 1574 <wavHeaderWrite(char*)+0x48>
    1556:	4639      	mov	r1, r7
    1558:	f44f 7200 	mov.w	r2, #512	; 0x200
    155c:	f007 fef2 	bl	9344 <FatFile::write(void const*, unsigned int)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1560:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1562:	b1e8      	cbz	r0, 15a0 <wavHeaderWrite(char*)+0x74>
    1564:	b10d      	cbz	r5, 156a <wavHeaderWrite(char*)+0x3e>
}
    1566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    156a:	4631      	mov	r1, r6
    156c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1570:	f007 bdb2 	b.w	90d8 <FatFile::seekSet(unsigned long)>
    1574:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1576:	2800      	cmp	r0, #0
    1578:	d0f5      	beq.n	1566 <wavHeaderWrite(char*)+0x3a>
    157a:	4639      	mov	r1, r7
    157c:	f44f 7200 	mov.w	r2, #512	; 0x200
    1580:	f006 fb86 	bl	7c90 <ExFatFile::write(void const*, unsigned int)>
    1584:	e7ec      	b.n	1560 <wavHeaderWrite(char*)+0x34>
    1586:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    1588:	2800      	cmp	r0, #0
    158a:	d0ec      	beq.n	1566 <wavHeaderWrite(char*)+0x3a>
    158c:	2200      	movs	r2, #0
    158e:	2300      	movs	r3, #0
    1590:	f005 fd4e 	bl	7030 <ExFatFile::seekSet(unsigned long long)>
    1594:	e7dd      	b.n	1552 <wavHeaderWrite(char*)+0x26>
    1596:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    1598:	b15b      	cbz	r3, 15b2 <wavHeaderWrite(char*)+0x86>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
    159a:	e9d3 6500 	ldrd	r6, r5, [r3]
    159e:	e7cd      	b.n	153c <wavHeaderWrite(char*)+0x10>
    15a0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    15a2:	2800      	cmp	r0, #0
    15a4:	d0df      	beq.n	1566 <wavHeaderWrite(char*)+0x3a>
    15a6:	4632      	mov	r2, r6
    15a8:	462b      	mov	r3, r5
    15aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    15ae:	f005 bd3f 	b.w	7030 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->curPosition() : 0;
    15b2:	461e      	mov	r6, r3
    15b4:	461d      	mov	r5, r3
    15b6:	e7c1      	b.n	153c <wavHeaderWrite(char*)+0x10>
    15b8:	20034b60 	.word	0x20034b60
    15bc:	200004a4 	.word	0x200004a4
    15c0:	20008a0c 	.word	0x20008a0c

000015c4 <makeHeader(long*)>:
{
    15c4:	b530      	push	{r4, r5, lr}
    15c6:	b089      	sub	sp, #36	; 0x24
    15c8:	4604      	mov	r4, r0
    rtc_get_datetime(&t); 
    15ca:	a806      	add	r0, sp, #24
    15cc:	f003 ff24 	bl	5418 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    15d0:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    15d4:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    15d8:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    15dc:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    15e0:	e9cd 3003 	strd	r3, r0, [sp, #12]
    15e4:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    15e8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    15ec:	9000      	str	r0, [sp, #0]
    15ee:	4620      	mov	r0, r4
    15f0:	e9cd 2101 	strd	r2, r1, [sp, #4]
    15f4:	4a1b      	ldr	r2, [pc, #108]	; (1664 <makeHeader(long*)+0xa0>)
    15f6:	491c      	ldr	r1, [pc, #112]	; (1668 <makeHeader(long*)+0xa4>)
    15f8:	f010 fa38 	bl	11a6c <sprintf>
    header[7] = fsamp;
    15fc:	491b      	ldr	r1, [pc, #108]	; (166c <makeHeader(long*)+0xa8>)
    header[9] = t_acq;
    15fe:	481c      	ldr	r0, [pc, #112]	; (1670 <makeHeader(long*)+0xac>)
    header[10] = t_on;
    1600:	4a1c      	ldr	r2, [pc, #112]	; (1674 <makeHeader(long*)+0xb0>)
    header[7] = fsamp;
    1602:	680d      	ldr	r5, [r1, #0]
    header[9] = t_acq;
    1604:	8800      	ldrh	r0, [r0, #0]
    header[10] = t_on;
    1606:	8812      	ldrh	r2, [r2, #0]
    header[9] = t_acq;
    1608:	b280      	uxth	r0, r0
    header[11] = t_rep;
    160a:	4b1b      	ldr	r3, [pc, #108]	; (1678 <makeHeader(long*)+0xb4>)
    header[10] = t_on;
    160c:	b292      	uxth	r2, r2
    header[6] = SerNum;        // serial number
    160e:	491b      	ldr	r1, [pc, #108]	; (167c <makeHeader(long*)+0xb8>)
    header[11] = t_rep;
    1610:	881b      	ldrh	r3, [r3, #0]
    header[10] = t_on;
    1612:	62a2      	str	r2, [r4, #40]	; 0x28
    header[12] = proc;
    1614:	4a1a      	ldr	r2, [pc, #104]	; (1680 <makeHeader(long*)+0xbc>)
    header[11] = t_rep;
    1616:	b29b      	uxth	r3, r3
    header[6] = SerNum;        // serial number
    1618:	6809      	ldr	r1, [r1, #0]
    header[12] = proc;
    161a:	8812      	ldrh	r2, [r2, #0]
    header[9] = t_acq;
    161c:	6260      	str	r0, [r4, #36]	; 0x24
    header[5] = 30;            // SW version
    161e:	201e      	movs	r0, #30
    header[12] = proc;
    1620:	b212      	sxth	r2, r2
    header[11] = t_rep;
    1622:	62e3      	str	r3, [r4, #44]	; 0x2c
    header[7] = fsamp;
    1624:	61e5      	str	r5, [r4, #28]
    header[8] = NCHAN_ACQ;
    1626:	2501      	movs	r5, #1
    header[12] = proc;
    1628:	6322      	str	r2, [r4, #48]	; 0x30
    header[14] = again;
    162a:	4a16      	ldr	r2, [pc, #88]	; (1684 <makeHeader(long*)+0xc0>)
    header[8] = NCHAN_ACQ;
    162c:	6225      	str	r5, [r4, #32]
    header[5] = 30;            // SW version
    162e:	e9c4 0105 	strd	r0, r1, [r4, #20]
    header[13] = shift;
    1632:	4815      	ldr	r0, [pc, #84]	; (1688 <makeHeader(long*)+0xc4>)
    1634:	8803      	ldrh	r3, [r0, #0]
    header[14] = again;
    1636:	8812      	ldrh	r2, [r2, #0]
    header[13] = shift;
    1638:	b21b      	sxth	r3, r3
    header[15] = dgain;
    163a:	4814      	ldr	r0, [pc, #80]	; (168c <makeHeader(long*)+0xc8>)
    header[14] = again;
    163c:	b212      	sxth	r2, r2
    header[13] = shift;
    163e:	6363      	str	r3, [r4, #52]	; 0x34
    header[15] = dgain;
    1640:	8803      	ldrh	r3, [r0, #0]
    writeHeaderInfo((char *)&header[20],SerNum);
    1642:	f104 0050 	add.w	r0, r4, #80	; 0x50
    header[14] = again;
    1646:	63a2      	str	r2, [r4, #56]	; 0x38
    header[15] = dgain;
    1648:	b21b      	sxth	r3, r3
    164a:	4a11      	ldr	r2, [pc, #68]	; (1690 <makeHeader(long*)+0xcc>)
    164c:	63e3      	str	r3, [r4, #60]	; 0x3c
    164e:	6813      	ldr	r3, [r2, #0]
    header[16] = millis();
    1650:	6423      	str	r3, [r4, #64]	; 0x40
    writeHeaderInfo((char *)&header[20],SerNum);
    1652:	f7ff fecf 	bl	13f4 <writeHeaderInfo(char*, int)>
    header[127]=0x55555555;
    1656:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
}
    165a:	4628      	mov	r0, r5
    header[127]=0x55555555;
    165c:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
}
    1660:	b009      	add	sp, #36	; 0x24
    1662:	bd30      	pop	{r4, r5, pc}
    1664:	200004b0 	.word	0x200004b0
    1668:	20000418 	.word	0x20000418
    166c:	20008fcc 	.word	0x20008fcc
    1670:	20009000 	.word	0x20009000
    1674:	20009002 	.word	0x20009002
    1678:	20035458 	.word	0x20035458
    167c:	2000de08 	.word	0x2000de08
    1680:	20035450 	.word	0x20035450
    1684:	20035442 	.word	0x20035442
    1688:	20035456 	.word	0x20035456
    168c:	20035448 	.word	0x20035448
    1690:	20035424 	.word	0x20035424

00001694 <newDirectory(char*)>:
  d0=d;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    1694:	b510      	push	{r4, lr}
    1696:	b088      	sub	sp, #32
    1698:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    169a:	a806      	add	r0, sp, #24
    169c:	f003 febc 	bl	5418 <rtc_get_datetime(datetime_t*)>
  if(d==d0) return 0; // same day
    16a0:	4a17      	ldr	r2, [pc, #92]	; (1700 <newDirectory(char*)+0x6c>)

    if(HourDir)
    {
      if(newFolder(t.hour))
    16a2:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  if(d==d0) return 0; // same day
    16a6:	6811      	ldr	r1, [r2, #0]
    16a8:	428b      	cmp	r3, r1
    16aa:	d026      	beq.n	16fa <newDirectory(char*)+0x66>
      {   
          sprintf(dirName, "/%s_%s_%s_%06x_%04d%02d%02d/%02d/", 
    16ac:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    16b0:	4914      	ldr	r1, [pc, #80]	; (1704 <newDirectory(char*)+0x70>)
    16b2:	9305      	str	r3, [sp, #20]
  d0=d;
    16b4:	6013      	str	r3, [r2, #0]
          sprintf(dirName, "/%s_%s_%s_%06x_%04d%02d%02d/%02d/", 
    16b6:	6809      	ldr	r1, [r1, #0]
    16b8:	f99d 201a 	ldrsb.w	r2, [sp, #26]
    16bc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    16c0:	9004      	str	r0, [sp, #16]
    16c2:	4811      	ldr	r0, [pc, #68]	; (1708 <newDirectory(char*)+0x74>)
    16c4:	9101      	str	r1, [sp, #4]
    16c6:	9000      	str	r0, [sp, #0]
    16c8:	4620      	mov	r0, r4
    16ca:	4910      	ldr	r1, [pc, #64]	; (170c <newDirectory(char*)+0x78>)
    16cc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    16d0:	4b0f      	ldr	r3, [pc, #60]	; (1710 <newDirectory(char*)+0x7c>)
    16d2:	4a10      	ldr	r2, [pc, #64]	; (1714 <newDirectory(char*)+0x80>)
    16d4:	f010 f9ca 	bl	11a6c <sprintf>
              b_string,k_string,n_string,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    16d8:	480f      	ldr	r0, [pc, #60]	; (1718 <newDirectory(char*)+0x84>)
    16da:	f00b fcd7 	bl	d08c <Print::println()>
    16de:	2102      	movs	r1, #2
    16e0:	480e      	ldr	r0, [pc, #56]	; (171c <newDirectory(char*)+0x88>)
    16e2:	f00e f85b 	bl	f79c <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    16e6:	4620      	mov	r0, r4
    16e8:	f010 ff4a 	bl	12580 <strlen>
    16ec:	4601      	mov	r1, r0
    16ee:	4620      	mov	r0, r4
    16f0:	f00e f854 	bl	f79c <usb_serial_write>
          return 1;   // have new directory
    16f4:	2001      	movs	r0, #1
          Serial.println(); Serial.print(": "); Serial.print(dirName);
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory
}
    16f6:	b008      	add	sp, #32
    16f8:	bd10      	pop	{r4, pc}
    return 0;       // keep old directory
    16fa:	2000      	movs	r0, #0
}
    16fc:	b008      	add	sp, #32
    16fe:	bd10      	pop	{r4, pc}
    1700:	20008a1c 	.word	0x20008a1c
    1704:	2000de08 	.word	0x2000de08
    1708:	20034c00 	.word	0x20034c00
    170c:	20000478 	.word	0x20000478
    1710:	20034bb0 	.word	0x20034bb0
    1714:	20034b10 	.word	0x20034b10
    1718:	20008a0c 	.word	0x20008a0c
    171c:	200009a8 	.word	0x200009a8

00001720 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    1720:	b510      	push	{r4, lr}
    1722:	b088      	sub	sp, #32
    1724:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1726:	a806      	add	r0, sp, #24
    1728:	f003 fe76 	bl	5418 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    172c:	4b25      	ldr	r3, [pc, #148]	; (17c4 <newFileName(char*)+0xa4>)
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    172e:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    if(proc==0)
    1732:	881b      	ldrh	r3, [r3, #0]
    1734:	b21b      	sxth	r3, r3
    1736:	bb83      	cbnz	r3, 179a <newFileName(char*)+0x7a>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    1738:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    173c:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1740:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    1744:	e9cd 3003 	strd	r3, r0, [sp, #12]
    1748:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    174c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    1750:	9000      	str	r0, [sp, #0]
    1752:	4620      	mov	r0, r4
    1754:	e9cd 2101 	strd	r2, r1, [sp, #4]
    1758:	4a1b      	ldr	r2, [pc, #108]	; (17c8 <newFileName(char*)+0xa8>)
    175a:	491c      	ldr	r1, [pc, #112]	; (17cc <newFileName(char*)+0xac>)
    175c:	f010 f986 	bl	11a6c <sprintf>
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    1760:	481b      	ldr	r0, [pc, #108]	; (17d0 <newFileName(char*)+0xb0>)
    1762:	f00b fc93 	bl	d08c <Print::println()>
    1766:	2102      	movs	r1, #2
    1768:	481a      	ldr	r0, [pc, #104]	; (17d4 <newFileName(char*)+0xb4>)
    176a:	f00e f817 	bl	f79c <usb_serial_write>
    176e:	4620      	mov	r0, r4
    1770:	f010 ff06 	bl	12580 <strlen>
    1774:	4601      	mov	r1, r0
    1776:	4620      	mov	r0, r4
    1778:	f00e f810 	bl	f79c <usb_serial_write>
    177c:	2101      	movs	r1, #1
    177e:	4816      	ldr	r0, [pc, #88]	; (17d8 <newFileName(char*)+0xb8>)
    1780:	f00e f80c 	bl	f79c <usb_serial_write>
    Serial.print(" "); Serial.print(micros());
    1784:	f00b ffda 	bl	d73c <micros>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1788:	2300      	movs	r3, #0
    178a:	4601      	mov	r1, r0
    178c:	220a      	movs	r2, #10
    178e:	4810      	ldr	r0, [pc, #64]	; (17d0 <newFileName(char*)+0xb0>)
    1790:	f00b fca6 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

    return 1;
}
    1794:	2001      	movs	r0, #1
    1796:	b008      	add	sp, #32
    1798:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    179a:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    179e:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    17a2:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    17a6:	e9cd 3003 	strd	r3, r0, [sp, #12]
    17aa:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    17ae:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    17b2:	9000      	str	r0, [sp, #0]
    17b4:	4620      	mov	r0, r4
    17b6:	e9cd 2101 	strd	r2, r1, [sp, #4]
    17ba:	4a03      	ldr	r2, [pc, #12]	; (17c8 <newFileName(char*)+0xa8>)
    17bc:	4907      	ldr	r1, [pc, #28]	; (17dc <newFileName(char*)+0xbc>)
    17be:	f010 f955 	bl	11a6c <sprintf>
    17c2:	e7cd      	b.n	1760 <newFileName(char*)+0x40>
    17c4:	20035450 	.word	0x20035450
    17c8:	20000434 	.word	0x20000434
    17cc:	20000438 	.word	0x20000438
    17d0:	20008a0c 	.word	0x20008a0c
    17d4:	200009a8 	.word	0x200009a8
    17d8:	20000b38 	.word	0x20000b38
    17dc:	20000458 	.word	0x20000458

000017e0 <storeData(short)>:
uint32_t nbuf;
void do_hibernate(void);

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    17e0:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    17e2:	4604      	mov	r4, r0
{
    17e4:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    17e6:	2800      	cmp	r0, #0
    17e8:	f000 8081 	beq.w	18ee <storeData(short)+0x10e>
        {   //msc_activate(true);
            return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    17ec:	2801      	cmp	r0, #1
    17ee:	d00a      	beq.n	1806 <storeData(short)+0x26>
        { status = DOCLOSE;
        }
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open and header written: store data records
    17f0:	2802      	cmp	r0, #2
    17f2:	f000 813f 	beq.w	1a74 <storeData(short)+0x294>
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    17f6:	1ec3      	subs	r3, r0, #3
    17f8:	b29b      	uxth	r3, r3
    17fa:	2b02      	cmp	r3, #2
    17fc:	f240 80fd 	bls.w	19fa <storeData(short)+0x21a>
    1800:	4620      	mov	r0, r4
          adc_exit();
          digitalWrite(LED,LOW);
        }
    }
    return status;
}
    1802:	b014      	add	sp, #80	; 0x50
    1804:	bd70      	pop	{r4, r5, r6, pc}
    1806:	4da4      	ldr	r5, [pc, #656]	; (1a98 <storeData(short)+0x2b8>)
        if(proc==0)
    1808:	4ba4      	ldr	r3, [pc, #656]	; (1a9c <storeData(short)+0x2bc>)
    {   nbuf=0;
    180a:	2200      	movs	r2, #0
    180c:	4ea4      	ldr	r6, [pc, #656]	; (1aa0 <storeData(short)+0x2c0>)
        if(proc==0)
    180e:	881b      	ldrh	r3, [r3, #0]
    {   nbuf=0;
    1810:	6032      	str	r2, [r6, #0]
        if(proc==0)
    1812:	b21b      	sxth	r3, r3
    1814:	2b00      	cmp	r3, #0
    1816:	f040 80be 	bne.w	1996 <storeData(short)+0x1b6>
  memcpy(wav_hdr.rId,"RIFF",4);
    181a:	4ca2      	ldr	r4, [pc, #648]	; (1aa4 <storeData(short)+0x2c4>)
  wav_hdr.nFormatTag=1;
    181c:	f04f 0e10 	mov.w	lr, #16
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    1820:	4aa1      	ldr	r2, [pc, #644]	; (1aa8 <storeData(short)+0x2c8>)
  wav_hdr.dLen = 0; // will be updated at closing
    1822:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
  writeHeaderInfo(&wav_hdr.info[0],serNum);
    1826:	f104 002c 	add.w	r0, r4, #44	; 0x2c
  wav_hdr.nBlockAlign=nchan*nbytes;
    182a:	4ba0      	ldr	r3, [pc, #640]	; (1aac <storeData(short)+0x2cc>)
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    182c:	6812      	ldr	r2, [r2, #0]
  wav_hdr.nBlockAlign=nchan*nbytes;
    182e:	6223      	str	r3, [r4, #32]
  memcpy(wav_hdr.rId,"RIFF",4);
    1830:	f103 438c 	add.w	r3, r3, #1174405120	; 0x46000000
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    1834:	499e      	ldr	r1, [pc, #632]	; (1ab0 <storeData(short)+0x2d0>)
  memcpy(wav_hdr.rId,"RIFF",4);
    1836:	f503 1319 	add.w	r3, r3, #2506752	; 0x264000
  wav_hdr.nSamplesPerSec=fsamp;
    183a:	61a2      	str	r2, [r4, #24]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    183c:	0092      	lsls	r2, r2, #2
  writeHeaderInfo(&wav_hdr.info[0],serNum);
    183e:	6809      	ldr	r1, [r1, #0]
  memcpy(wav_hdr.rId,"RIFF",4);
    1840:	f603 134e 	addw	r3, r3, #2382	; 0x94e
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    1844:	61e2      	str	r2, [r4, #28]
  memcpy(wav_hdr.rId,"RIFF",4);
    1846:	6023      	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    1848:	f5a3 0370 	sub.w	r3, r3, #15728640	; 0xf00000
    184c:	f2a3 73fb 	subw	r3, r3, #2043	; 0x7fb
    1850:	60a3      	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    1852:	f103 435b 	add.w	r3, r3, #3674210304	; 0xdb000000
    1856:	f503 13f1 	add.w	r3, r3, #1974272	; 0x1e2000
    185a:	f603 430f 	addw	r3, r3, #3087	; 0xc0f
    185e:	60e3      	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    1860:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1864:	f6a3 4302 	subw	r3, r3, #3074	; 0xc02
    1868:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    186c:	f103 230d 	add.w	r3, r3, #218107136	; 0xd000d00
    1870:	f503 0372 	add.w	r3, r3, #15859712	; 0xf20000
    1874:	3305      	adds	r3, #5
    1876:	6263      	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    1878:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
    187c:	6063      	str	r3, [r4, #4]
  wav_hdr.iLen = 512 - 13*4;
    187e:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
    1882:	62a3      	str	r3, [r4, #40]	; 0x28
  wav_hdr.nFormatTag=1;
    1884:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1888:	e9c4 e304 	strd	lr, r3, [r4, #16]
  writeHeaderInfo(&wav_hdr.info[0],serNum);
    188c:	f7ff fdb2 	bl	13f4 <writeHeaderInfo(char*, int)>
    return m_fFile ? m_fFile->write(buf, count) :
    1890:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    1892:	4621      	mov	r1, r4
    1894:	2800      	cmp	r0, #0
    1896:	f000 8086 	beq.w	19a6 <storeData(short)+0x1c6>
    189a:	f44f 7200 	mov.w	r2, #512	; 0x200
    189e:	f007 fd51 	bl	9344 <FatFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    18a2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    18a6:	f2c0 808a 	blt.w	19be <storeData(short)+0x1de>
        if((nd=file.write((const uint8_t*)diskBuffer,4*nout_dat)) < 4*nout_dat) 
    18aa:	4c82      	ldr	r4, [pc, #520]	; (1ab4 <storeData(short)+0x2d4>)
    18ac:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    18ae:	6822      	ldr	r2, [r4, #0]
    18b0:	0092      	lsls	r2, r2, #2
    18b2:	2800      	cmp	r0, #0
    18b4:	f000 80a9 	beq.w	1a0a <storeData(short)+0x22a>
    18b8:	497f      	ldr	r1, [pc, #508]	; (1ab8 <storeData(short)+0x2d8>)
    18ba:	f007 fd43 	bl	9344 <FatFile::write(void const*, unsigned int)>
    18be:	6822      	ldr	r2, [r4, #0]
    18c0:	4604      	mov	r4, r0
    18c2:	0092      	lsls	r2, r2, #2
    18c4:	4294      	cmp	r4, r2
    18c6:	f0c0 80ac 	bcc.w	1a22 <storeData(short)+0x242>
        disk_count++;
    18ca:	497c      	ldr	r1, [pc, #496]	; (1abc <storeData(short)+0x2dc>)
          nbuf++;
    18cc:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    18ce:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    18d0:	3301      	adds	r3, #1
        disk_count++;
    18d2:	3201      	adds	r2, #1
          nbuf++;
    18d4:	6033      	str	r3, [r6, #0]
        disk_count++;
    18d6:	600a      	str	r2, [r1, #0]
    18d8:	4979      	ldr	r1, [pc, #484]	; (1ac0 <storeData(short)+0x2e0>)
        if((nbuf % 1000)==0 ) file.flush();
    18da:	4a7a      	ldr	r2, [pc, #488]	; (1ac4 <storeData(short)+0x2e4>)
        disk_count++;
    18dc:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    18e0:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    18e4:	f080 8081 	bcs.w	19ea <storeData(short)+0x20a>
           m_xFile ? m_xFile->sync() : false;
    18e8:	2002      	movs	r0, #2
}
    18ea:	b014      	add	sp, #80	; 0x50
    18ec:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    18ee:	4876      	ldr	r0, [pc, #472]	; (1ac8 <storeData(short)+0x2e8>)
    18f0:	f7ff fed0 	bl	1694 <newDirectory(char*)>
    18f4:	b1e8      	cbz	r0, 1932 <storeData(short)+0x152>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    18f6:	4d75      	ldr	r5, [pc, #468]	; (1acc <storeData(short)+0x2ec>)
    18f8:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    18fa:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    18fe:	2a00      	cmp	r2, #0
    1900:	f000 80f6 	beq.w	1af0 <storeData(short)+0x310>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1904:	466e      	mov	r6, sp
    1906:	4611      	mov	r1, r2
    1908:	4623      	mov	r3, r4
    190a:	4a6f      	ldr	r2, [pc, #444]	; (1ac8 <storeData(short)+0x2e8>)
    190c:	4630      	mov	r0, r6
  FatFile() {}
    190e:	9400      	str	r4, [sp, #0]
    1910:	f007 f946 	bl	8ba0 <FatFile::open(FatVolume*, char const*, int)>
    1914:	2800      	cmp	r0, #0
    1916:	f000 80f8 	beq.w	1b0a <storeData(short)+0x32a>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    191a:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    191c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    1920:	2800      	cmp	r0, #0
    1922:	f000 810a 	beq.w	1b3a <storeData(short)+0x35a>
    1926:	4968      	ldr	r1, [pc, #416]	; (1ac8 <storeData(short)+0x2e8>)
    1928:	f008 fe86 	bl	a638 <FatVolume::chdir(char const*)>
    192c:	2800      	cmp	r0, #0
    192e:	f000 810d 	beq.w	1b4c <storeData(short)+0x36c>
        if(newFileName(fileName))
    1932:	4867      	ldr	r0, [pc, #412]	; (1ad0 <storeData(short)+0x2f0>)
    1934:	f7ff fef4 	bl	1720 <newFileName(char*)>
    1938:	2800      	cmp	r0, #0
    193a:	f000 814b 	beq.w	1bd4 <storeData(short)+0x3f4>
            file = sd->open(fileName, FILE_WRITE); 
    193e:	4963      	ldr	r1, [pc, #396]	; (1acc <storeData(short)+0x2ec>)
    1940:	f244 2302 	movw	r3, #16898	; 0x4202
    1944:	4a62      	ldr	r2, [pc, #392]	; (1ad0 <storeData(short)+0x2f0>)
    1946:	4668      	mov	r0, sp
    1948:	6809      	ldr	r1, [r1, #0]
    194a:	f009 f811 	bl	a970 <FsVolume::open(char const*, int)>
class Print
    194e:	4d52      	ldr	r5, [pc, #328]	; (1a98 <storeData(short)+0x2b8>)
    1950:	f89d 300c 	ldrb.w	r3, [sp, #12]
    1954:	f105 0010 	add.w	r0, r5, #16
    1958:	732b      	strb	r3, [r5, #12]
    195a:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    195e:	e9c5 1201 	strd	r1, r2, [r5, #4]
    1962:	a904      	add	r1, sp, #16
    1964:	f008 fe90 	bl	a688 <FsBaseFile::operator=(FsBaseFile const&)>
    1968:	4b5a      	ldr	r3, [pc, #360]	; (1ad4 <storeData(short)+0x2f4>)
  ~FsBaseFile() {close();}
    196a:	a804      	add	r0, sp, #16
    196c:	9300      	str	r3, [sp, #0]
    196e:	f008 fee5 	bl	a73c <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    1972:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1974:	2b00      	cmp	r3, #0
    1976:	f47f af47 	bne.w	1808 <storeData(short)+0x28>
    197a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    197c:	2b00      	cmp	r3, #0
    197e:	f47f af43 	bne.w	1808 <storeData(short)+0x28>
    1982:	2111      	movs	r1, #17
    1984:	4854      	ldr	r0, [pc, #336]	; (1ad8 <storeData(short)+0x2f8>)
    1986:	f00d ff09 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    198a:	4854      	ldr	r0, [pc, #336]	; (1adc <storeData(short)+0x2fc>)
    198c:	f00b fb7e 	bl	d08c <Print::println()>
                return STOPPED; 
    1990:	f04f 30ff 	mov.w	r0, #4294967295
    1994:	e735      	b.n	1802 <storeData(short)+0x22>
          makeHeader(fileHeader);
    1996:	4852      	ldr	r0, [pc, #328]	; (1ae0 <storeData(short)+0x300>)
    1998:	f7ff fe14 	bl	15c4 <makeHeader(long*)>
    return m_fFile ? m_fFile->write(buf, count) :
    199c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    199e:	4950      	ldr	r1, [pc, #320]	; (1ae0 <storeData(short)+0x300>)
    19a0:	2800      	cmp	r0, #0
    19a2:	f47f af7a 	bne.w	189a <storeData(short)+0xba>
    19a6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    19a8:	2800      	cmp	r0, #0
    19aa:	f43f af2a 	beq.w	1802 <storeData(short)+0x22>
    19ae:	f44f 7200 	mov.w	r2, #512	; 0x200
    19b2:	f006 f96d 	bl	7c90 <ExFatFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    19b6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    19ba:	f6bf af76 	bge.w	18aa <storeData(short)+0xca>
  bool isOpen() const {return m_fFile || m_xFile;}
    19be:	6cab      	ldr	r3, [r5, #72]	; 0x48
    19c0:	2b00      	cmp	r3, #0
    19c2:	f000 80f5 	beq.w	1bb0 <storeData(short)+0x3d0>
    19c6:	2403      	movs	r4, #3
        {   if(proc==0)
    19c8:	4b34      	ldr	r3, [pc, #208]	; (1a9c <storeData(short)+0x2bc>)
    19ca:	881b      	ldrh	r3, [r3, #0]
    19cc:	b21b      	sxth	r3, r3
    19ce:	2b00      	cmp	r3, #0
    19d0:	d053      	beq.n	1a7a <storeData(short)+0x29a>
            file.close();
    19d2:	4844      	ldr	r0, [pc, #272]	; (1ae4 <storeData(short)+0x304>)
    19d4:	f008 feb2 	bl	a73c <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    19d8:	2c04      	cmp	r4, #4
    19da:	f000 80be 	beq.w	1b5a <storeData(short)+0x37a>
        else if(status==DOCLOSE)
    19de:	2c03      	cmp	r4, #3
    19e0:	f040 80eb 	bne.w	1bba <storeData(short)+0x3da>
          status=CLOSED;
    19e4:	2000      	movs	r0, #0
}
    19e6:	b014      	add	sp, #80	; 0x50
    19e8:	bd70      	pop	{r4, r5, r6, pc}
    return m_fFile ? m_fFile->sync() :
    19ea:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    19ec:	2800      	cmp	r0, #0
    19ee:	f000 80c1 	beq.w	1b74 <storeData(short)+0x394>
    19f2:	f007 fca1 	bl	9338 <FatFile::sync()>
    19f6:	2002      	movs	r0, #2
    19f8:	e703      	b.n	1802 <storeData(short)+0x22>
    19fa:	4d27      	ldr	r5, [pc, #156]	; (1a98 <storeData(short)+0x2b8>)
  bool isOpen() const {return m_fFile || m_xFile;}
    19fc:	6cab      	ldr	r3, [r5, #72]	; 0x48
    19fe:	2b00      	cmp	r3, #0
    1a00:	d1e2      	bne.n	19c8 <storeData(short)+0x1e8>
    1a02:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1a04:	2b00      	cmp	r3, #0
    1a06:	d1df      	bne.n	19c8 <storeData(short)+0x1e8>
    1a08:	e7e6      	b.n	19d8 <storeData(short)+0x1f8>
    1a0a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1a0c:	2800      	cmp	r0, #0
    1a0e:	d040      	beq.n	1a92 <storeData(short)+0x2b2>
    1a10:	4929      	ldr	r1, [pc, #164]	; (1ab8 <storeData(short)+0x2d8>)
    1a12:	f006 f93d 	bl	7c90 <ExFatFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)diskBuffer,4*nout_dat)) < 4*nout_dat) 
    1a16:	6822      	ldr	r2, [r4, #0]
    1a18:	4604      	mov	r4, r0
    1a1a:	0092      	lsls	r2, r2, #2
    1a1c:	4294      	cmp	r4, r2
    1a1e:	f4bf af54 	bcs.w	18ca <storeData(short)+0xea>
    1a22:	2101      	movs	r1, #1
    1a24:	4830      	ldr	r0, [pc, #192]	; (1ae8 <storeData(short)+0x308>)
    1a26:	f00d feb9 	bl	f79c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1a2a:	2300      	movs	r3, #0
    1a2c:	220a      	movs	r2, #10
    1a2e:	4621      	mov	r1, r4
    1a30:	482a      	ldr	r0, [pc, #168]	; (1adc <storeData(short)+0x2fc>)
    1a32:	f00b fb55 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1a36:	2101      	movs	r1, #1
    1a38:	482c      	ldr	r0, [pc, #176]	; (1aec <storeData(short)+0x30c>)
    1a3a:	f00d feaf 	bl	f79c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1a3e:	2102      	movs	r1, #2
    1a40:	4826      	ldr	r0, [pc, #152]	; (1adc <storeData(short)+0x2fc>)
    1a42:	f00b fb17 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1a46:	4825      	ldr	r0, [pc, #148]	; (1adc <storeData(short)+0x2fc>)
    1a48:	f00b fb20 	bl	d08c <Print::println()>
        disk_count++;
    1a4c:	491b      	ldr	r1, [pc, #108]	; (1abc <storeData(short)+0x2dc>)
    1a4e:	481c      	ldr	r0, [pc, #112]	; (1ac0 <storeData(short)+0x2e0>)
    1a50:	6833      	ldr	r3, [r6, #0]
    1a52:	680a      	ldr	r2, [r1, #0]
    1a54:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    1a58:	481a      	ldr	r0, [pc, #104]	; (1ac4 <storeData(short)+0x2e4>)
        disk_count++;
    1a5a:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    1a5c:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    1a60:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    1a62:	d3ac      	bcc.n	19be <storeData(short)+0x1de>
    return m_fFile ? m_fFile->sync() :
    1a64:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1a66:	2800      	cmp	r0, #0
    1a68:	f000 808b 	beq.w	1b82 <storeData(short)+0x3a2>
          status=DOCLOSE; 
    1a6c:	2403      	movs	r4, #3
    1a6e:	f007 fc63 	bl	9338 <FatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1a72:	e7c3      	b.n	19fc <storeData(short)+0x21c>
    1a74:	4d08      	ldr	r5, [pc, #32]	; (1a98 <storeData(short)+0x2b8>)
    1a76:	4e0a      	ldr	r6, [pc, #40]	; (1aa0 <storeData(short)+0x2c0>)
    1a78:	e717      	b.n	18aa <storeData(short)+0xca>
              char *hdr = wavHeaderUpdate(nout_dat*4);
    1a7a:	4b0e      	ldr	r3, [pc, #56]	; (1ab4 <storeData(short)+0x2d4>)
  wav_hdr.dLen = nbytes;
    1a7c:	4809      	ldr	r0, [pc, #36]	; (1aa4 <storeData(short)+0x2c4>)
              char *hdr = wavHeaderUpdate(nout_dat*4);
    1a7e:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    1a80:	6842      	ldr	r2, [r0, #4]
              char *hdr = wavHeaderUpdate(nout_dat*4);
    1a82:	009b      	lsls	r3, r3, #2
  wav_hdr.rLen += wav_hdr.dLen;
    1a84:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    1a86:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    1a8a:	6042      	str	r2, [r0, #4]
              wavHeaderWrite(hdr);
    1a8c:	f7ff fd4e 	bl	152c <wavHeaderWrite(char*)>
    1a90:	e79f      	b.n	19d2 <storeData(short)+0x1f2>
           m_xFile ? m_xFile->write(buf, count) : 0;
    1a92:	4604      	mov	r4, r0
    1a94:	e716      	b.n	18c4 <storeData(short)+0xe4>
    1a96:	bf00      	nop
    1a98:	20034b60 	.word	0x20034b60
    1a9c:	20035450 	.word	0x20035450
    1aa0:	20034c28 	.word	0x20034c28
    1aa4:	200340cc 	.word	0x200340cc
    1aa8:	20008fcc 	.word	0x20008fcc
    1aac:	00200004 	.word	0x00200004
    1ab0:	2000de08 	.word	0x2000de08
    1ab4:	20034c2c 	.word	0x20034c2c
    1ab8:	2000e20c 	.word	0x2000e20c
    1abc:	20034b38 	.word	0x20034b38
    1ac0:	26e978d5 	.word	0x26e978d5
    1ac4:	00418937 	.word	0x00418937
    1ac8:	20033e7c 	.word	0x20033e7c
    1acc:	20008fd4 	.word	0x20008fd4
    1ad0:	200342cc 	.word	0x200342cc
    1ad4:	20000b58 	.word	0x20000b58
    1ad8:	200007d4 	.word	0x200007d4
    1adc:	20008a0c 	.word	0x20008a0c
    1ae0:	2000fa0c 	.word	0x2000fa0c
    1ae4:	20034b70 	.word	0x20034b70
    1ae8:	200007e8 	.word	0x200007e8
    1aec:	20000b38 	.word	0x20000b38
    1af0:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    1af4:	b1d1      	cbz	r1, 1b2c <storeData(short)+0x34c>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1af6:	466e      	mov	r6, sp
    1af8:	4613      	mov	r3, r2
  ExFatFile() {}
    1afa:	920c      	str	r2, [sp, #48]	; 0x30
    1afc:	4630      	mov	r0, r6
    1afe:	4a37      	ldr	r2, [pc, #220]	; (1bdc <storeData(short)+0x3fc>)
    1b00:	f005 fd54 	bl	75ac <ExFatFile::open(ExFatVolume*, char const*, int)>
    1b04:	2800      	cmp	r0, #0
    1b06:	f47f af08 	bne.w	191a <storeData(short)+0x13a>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1b0a:	682b      	ldr	r3, [r5, #0]
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    1b0c:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    1b10:	2a00      	cmp	r2, #0
    1b12:	d03e      	beq.n	1b92 <storeData(short)+0x3b2>
    1b14:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1b16:	f502 6189 	add.w	r1, r2, #1096	; 0x448
    1b1a:	2301      	movs	r3, #1
    1b1c:	4630      	mov	r0, r6
    1b1e:	4a2f      	ldr	r2, [pc, #188]	; (1bdc <storeData(short)+0x3fc>)
    1b20:	9400      	str	r4, [sp, #0]
    1b22:	f006 ff45 	bl	89b0 <FatFile::mkdir(FatFile*, char const*, bool)>
    1b26:	2800      	cmp	r0, #0
    1b28:	f47f aef7 	bne.w	191a <storeData(short)+0x13a>
    1b2c:	482c      	ldr	r0, [pc, #176]	; (1be0 <storeData(short)+0x400>)
    1b2e:	492d      	ldr	r1, [pc, #180]	; (1be4 <storeData(short)+0x404>)
    1b30:	f7ff fb84 	bl	123c <Print::println(char const*) [clone .isra.0]>
    1b34:	f04f 30ff 	mov.w	r0, #4294967295
    1b38:	e663      	b.n	1802 <storeData(short)+0x22>
    1b3a:	f8d3 0484 	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    1b3e:	b128      	cbz	r0, 1b4c <storeData(short)+0x36c>
    1b40:	4926      	ldr	r1, [pc, #152]	; (1bdc <storeData(short)+0x3fc>)
    1b42:	f006 fd35 	bl	85b0 <ExFatVolume::chdir(char const*)>
    1b46:	2800      	cmp	r0, #0
    1b48:	f47f aef3 	bne.w	1932 <storeData(short)+0x152>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1b4c:	4824      	ldr	r0, [pc, #144]	; (1be0 <storeData(short)+0x400>)
    1b4e:	4926      	ldr	r1, [pc, #152]	; (1be8 <storeData(short)+0x408>)
    1b50:	f7ff fb74 	bl	123c <Print::println(char const*) [clone .isra.0]>
    1b54:	f04f 30ff 	mov.w	r0, #4294967295
    1b58:	e653      	b.n	1802 <storeData(short)+0x22>
  digitalWrite(LED,LOW);
    1b5a:	2100      	movs	r1, #0
    1b5c:	200d      	movs	r0, #13
    1b5e:	f00b fe17 	bl	d790 <digitalWrite>
          adc_exit();
    1b62:	f7ff f945 	bl	df0 <adc_exit()>
            digitalWrite(LED,LOW);
    1b66:	2100      	movs	r1, #0
    1b68:	200d      	movs	r0, #13
    1b6a:	f00b fe11 	bl	d790 <digitalWrite>
            do_hibernate();
    1b6e:	f018 ff43 	bl	1a9f8 <___Z12do_hibernatev_veneer>
    1b72:	e645      	b.n	1800 <storeData(short)+0x20>
    1b74:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
    1b76:	2800      	cmp	r0, #0
    1b78:	f43f aeb6 	beq.w	18e8 <storeData(short)+0x108>
    1b7c:	f005 fea0 	bl	78c0 <ExFatFile::sync()>
    1b80:	e6b2      	b.n	18e8 <storeData(short)+0x108>
    1b82:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1b84:	2800      	cmp	r0, #0
    1b86:	f43f ae3c 	beq.w	1802 <storeData(short)+0x22>
          status=DOCLOSE; 
    1b8a:	2403      	movs	r4, #3
    1b8c:	f005 fe98 	bl	78c0 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1b90:	e734      	b.n	19fc <storeData(short)+0x21c>
    1b92:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1b96:	2900      	cmp	r1, #0
    1b98:	d0c8      	beq.n	1b2c <storeData(short)+0x34c>
    1b9a:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1b9c:	2301      	movs	r3, #1
    1b9e:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    1ba2:	4630      	mov	r0, r6
    1ba4:	4a0d      	ldr	r2, [pc, #52]	; (1bdc <storeData(short)+0x3fc>)
    1ba6:	f005 ff95 	bl	7ad4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1baa:	2800      	cmp	r0, #0
    1bac:	d0be      	beq.n	1b2c <storeData(short)+0x34c>
    1bae:	e6b4      	b.n	191a <storeData(short)+0x13a>
  bool isOpen() const {return m_fFile || m_xFile;}
    1bb0:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1bb2:	2800      	cmp	r0, #0
    1bb4:	f47f af07 	bne.w	19c6 <storeData(short)+0x1e6>
    1bb8:	e623      	b.n	1802 <storeData(short)+0x22>
  digitalWrite(LED,LOW);
    1bba:	2100      	movs	r1, #0
    1bbc:	200d      	movs	r0, #13
    1bbe:	f00b fde7 	bl	d790 <digitalWrite>
          adc_exit();
    1bc2:	f7ff f915 	bl	df0 <adc_exit()>
          digitalWrite(LED,LOW);
    1bc6:	200d      	movs	r0, #13
    1bc8:	2100      	movs	r1, #0
    1bca:	f00b fde1 	bl	d790 <digitalWrite>
          status=STOPPED;
    1bce:	f04f 30ff 	mov.w	r0, #4294967295
    1bd2:	e616      	b.n	1802 <storeData(short)+0x22>
            return STOPPED; // if file open fails: don't do anything
    1bd4:	f04f 30ff 	mov.w	r0, #4294967295
    1bd8:	e613      	b.n	1802 <storeData(short)+0x22>
    1bda:	bf00      	nop
    1bdc:	20033e7c 	.word	0x20033e7c
    1be0:	20008a0c 	.word	0x20008a0c
    1be4:	200007bc 	.word	0x200007bc
    1be8:	200007c8 	.word	0x200007c8

00001bec <saveData(short)>:
//
volatile int32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    1bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bee:	4606      	mov	r6, r0
    if(status==STOPPED) 
    1bf0:	3001      	adds	r0, #1
    1bf2:	d051      	beq.n	1c98 <saveData(short)+0xac>
    { pullData((uint32_t*)diskBuffer);
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    }

    if(status<CLOSED) return status; // we are stopped: don't do anything
    1bf4:	2e00      	cmp	r6, #0
    1bf6:	db3a      	blt.n	1c6e <saveData(short)+0x82>
  if(state==RUNNING)
    1bf8:	2e02      	cmp	r6, #2
    1bfa:	d066      	beq.n	1cca <saveData(short)+0xde>

    status=checkEndOfFile(status);

    if(getDataCount() >= NDBL)
    1bfc:	f003 fa60 	bl	50c0 <getDataCount()>
    1c00:	280b      	cmp	r0, #11
    1c02:	d934      	bls.n	1c6e <saveData(short)+0x82>
    { 
      if(proc==0)
    1c04:	4b33      	ldr	r3, [pc, #204]	; (1cd4 <saveData(short)+0xe8>)
    1c06:	4c34      	ldr	r4, [pc, #208]	; (1cd8 <saveData(short)+0xec>)
    1c08:	881b      	ldrh	r3, [r3, #0]
    1c0a:	f504 57c0 	add.w	r7, r4, #6144	; 0x1800
    1c0e:	b21b      	sxth	r3, r3
    1c10:	bb9b      	cbnz	r3, 1c7a <saveData(short)+0x8e>
      { 
        for(int ii=0; ii<NDBL; ii++)
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1c12:	f003 fa63 	bl	50dc <queue_isBusy()>
    1c16:	4605      	mov	r5, r0
    1c18:	b110      	cbz	r0, 1c20 <saveData(short)+0x34>
    1c1a:	e7fa      	b.n	1c12 <saveData(short)+0x26>
          while(!pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ])) delay(1);
    1c1c:	f00b fd3a 	bl	d694 <delay>
    1c20:	4620      	mov	r0, r4
    1c22:	f003 fa91 	bl	5148 <pullData(unsigned long*)>
    1c26:	4603      	mov	r3, r0
    1c28:	2001      	movs	r0, #1
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d0f6      	beq.n	1c1c <saveData(short)+0x30>
        for(int ii=0; ii<NDBL; ii++)
    1c2e:	f504 7400 	add.w	r4, r4, #512	; 0x200
    1c32:	42a7      	cmp	r7, r4
    1c34:	d1ed      	bne.n	1c12 <saveData(short)+0x26>
    1c36:	4b29      	ldr	r3, [pc, #164]	; (1cdc <saveData(short)+0xf0>)
    1c38:	4a29      	ldr	r2, [pc, #164]	; (1ce0 <saveData(short)+0xf4>)
        }

        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1c3a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1c3e:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
    1c42:	3501      	adds	r5, #1
    1c44:	2d08      	cmp	r5, #8
    1c46:	d1f8      	bne.n	1c3a <saveData(short)+0x4e>

        nout_dat=MAX_DISK_BUFFER;
    1c48:	4b26      	ldr	r3, [pc, #152]	; (1ce4 <saveData(short)+0xf8>)
    1c4a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    1c4e:	601a      	str	r2, [r3, #0]
          while(!pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ])) delay(1);
        }
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      }
      //
      if(haveStore)
    1c50:	4b25      	ldr	r3, [pc, #148]	; (1ce8 <saveData(short)+0xfc>)
    1c52:	681b      	ldr	r3, [r3, #0]
    1c54:	b15b      	cbz	r3, 1c6e <saveData(short)+0x82>
      { digitalWrite(LED,HIGH);
    1c56:	2101      	movs	r1, #1
    1c58:	200d      	movs	r0, #13
    1c5a:	f00b fd99 	bl	d790 <digitalWrite>
        status=storeData(status);
    1c5e:	4630      	mov	r0, r6
    1c60:	f7ff fdbe 	bl	17e0 <storeData(short)>
        digitalWrite(LED,LOW);
    1c64:	2100      	movs	r1, #0
        status=storeData(status);
    1c66:	4606      	mov	r6, r0
        digitalWrite(LED,LOW);
    1c68:	200d      	movs	r0, #13
    1c6a:	f00b fd91 	bl	d790 <digitalWrite>
      }
    }

    return status;
}
    1c6e:	4630      	mov	r0, r6
    1c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(int ii=0; ii<NDBL; ii++)
    1c72:	f504 7400 	add.w	r4, r4, #512	; 0x200
    1c76:	42bc      	cmp	r4, r7
    1c78:	d01d      	beq.n	1cb6 <saveData(short)+0xca>
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1c7a:	f003 fa2f 	bl	50dc <queue_isBusy()>
    1c7e:	4605      	mov	r5, r0
    1c80:	b110      	cbz	r0, 1c88 <saveData(short)+0x9c>
    1c82:	e7fa      	b.n	1c7a <saveData(short)+0x8e>
          while(!pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ])) delay(1);
    1c84:	f00b fd06 	bl	d694 <delay>
    1c88:	4620      	mov	r0, r4
    1c8a:	f003 fa5d 	bl	5148 <pullData(unsigned long*)>
    1c8e:	4603      	mov	r3, r0
    1c90:	2001      	movs	r0, #1
    1c92:	2b00      	cmp	r3, #0
    1c94:	d0f6      	beq.n	1c84 <saveData(short)+0x98>
    1c96:	e7ec      	b.n	1c72 <saveData(short)+0x86>
    { pullData((uint32_t*)diskBuffer);
    1c98:	480f      	ldr	r0, [pc, #60]	; (1cd8 <saveData(short)+0xec>)
    1c9a:	f003 fa55 	bl	5148 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1c9e:	490f      	ldr	r1, [pc, #60]	; (1cdc <saveData(short)+0xf0>)
    1ca0:	2300      	movs	r3, #0
    1ca2:	4a0f      	ldr	r2, [pc, #60]	; (1ce0 <saveData(short)+0xf4>)
    1ca4:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1ca8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1cac:	3301      	adds	r3, #1
    1cae:	2b08      	cmp	r3, #8
    1cb0:	d1f8      	bne.n	1ca4 <saveData(short)+0xb8>
}
    1cb2:	4630      	mov	r0, r6
    1cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cb6:	4b09      	ldr	r3, [pc, #36]	; (1cdc <saveData(short)+0xf0>)
    1cb8:	4a09      	ldr	r2, [pc, #36]	; (1ce0 <saveData(short)+0xf4>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1cba:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1cbe:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
    1cc2:	3501      	adds	r5, #1
    1cc4:	2d08      	cmp	r5, #8
    1cc6:	d1f8      	bne.n	1cba <saveData(short)+0xce>
    1cc8:	e7c2      	b.n	1c50 <saveData(short)+0x64>
    1cca:	f7ff fa35 	bl	1138 <checkEndOfFile(short) [clone .part.0]>
    1cce:	4606      	mov	r6, r0
    1cd0:	e794      	b.n	1bfc <saveData(short)+0x10>
    1cd2:	bf00      	nop
    1cd4:	20035450 	.word	0x20035450
    1cd8:	2000e20c 	.word	0x2000e20c
    1cdc:	2000e208 	.word	0x2000e208
    1ce0:	20034bd8 	.word	0x20034bd8
    1ce4:	20034c2c 	.word	0x20034c2c
    1ce8:	20034720 	.word	0x20034720

00001cec <estAlarmTime(unsigned long)>:
      // input: actual time in s
      // output: next wakup time in s
      // wakeup is in absolute seconds
      // 
      // secs is actual time in s
      uint32_t dd = secs/(24*3600);       // full days so far
    1cec:	4b45      	ldr	r3, [pc, #276]	; (1e04 <estAlarmTime(unsigned long)+0x118>)
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day

      uint32_t d_x = (d_0+D_REF);
    1cee:	4a46      	ldr	r2, [pc, #280]	; (1e08 <estAlarmTime(unsigned long)+0x11c>)
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    1cf0:	4946      	ldr	r1, [pc, #280]	; (1e0c <estAlarmTime(unsigned long)+0x120>)
      uint32_t d_x = (d_0+D_REF);
    1cf2:	8812      	ldrh	r2, [r2, #0]
  {   // estimate the wakup-time in seconds 
    1cf4:	b470      	push	{r4, r5, r6}
      uint32_t dd = secs/(24*3600);       // full days so far
    1cf6:	fba3 5300 	umull	r5, r3, r3, r0
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    1cfa:	4c45      	ldr	r4, [pc, #276]	; (1e10 <estAlarmTime(unsigned long)+0x124>)
      { // we are too early
        secs=(d_x)*(24*3600);
        return secs;
      }
      //
      if(d_rep> d_on)
    1cfc:	4d45      	ldr	r5, [pc, #276]	; (1e14 <estAlarmTime(unsigned long)+0x128>)
      uint32_t dd = secs/(24*3600);       // full days so far
    1cfe:	0c1b      	lsrs	r3, r3, #16
      if(d_rep> d_on)
    1d00:	4e45      	ldr	r6, [pc, #276]	; (1e18 <estAlarmTime(unsigned long)+0x12c>)
    1d02:	f8b5 c000 	ldrh.w	ip, [r5]
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    1d06:	fb04 0213 	mls	r2, r4, r3, r0
      if(d_rep> d_on)
    1d0a:	fa1f fc8c 	uxth.w	ip, ip
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    1d0e:	fba1 1202 	umull	r1, r2, r1, r2
      if(d_rep> d_on)
    1d12:	8831      	ldrh	r1, [r6, #0]
    1d14:	b289      	uxth	r1, r1
      uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    1d16:	0ad2      	lsrs	r2, r2, #11
      if(d_rep> d_on)
    1d18:	458c      	cmp	ip, r1
    1d1a:	d909      	bls.n	1d30 <estAlarmTime(unsigned long)+0x44>
      {  // check if day is good for acqisition
        if(dd % d_rep >=d_on)
    1d1c:	8829      	ldrh	r1, [r5, #0]
    1d1e:	8836      	ldrh	r6, [r6, #0]
    1d20:	b289      	uxth	r1, r1
    1d22:	b2b6      	uxth	r6, r6
    1d24:	fbb3 fcf1 	udiv	ip, r3, r1
    1d28:	fb01 311c 	mls	r1, r1, ip, r3
    1d2c:	42b1      	cmp	r1, r6
    1d2e:	d253      	bcs.n	1dd8 <estAlarmTime(unsigned long)+0xec>
          secs = ((dd/d_rep)+1)*d_rep*(24*3600);  
          return secs;
        }
      }
      //
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)) )
    1d30:	4c3a      	ldr	r4, [pc, #232]	; (1e1c <estAlarmTime(unsigned long)+0x130>)
    1d32:	8821      	ldrh	r1, [r4, #0]
    1d34:	b289      	uxth	r1, r1
    1d36:	4291      	cmp	r1, r2
    1d38:	d81c      	bhi.n	1d74 <estAlarmTime(unsigned long)+0x88>
    1d3a:	4939      	ldr	r1, [pc, #228]	; (1e20 <estAlarmTime(unsigned long)+0x134>)
    1d3c:	8809      	ldrh	r1, [r1, #0]
    1d3e:	b289      	uxth	r1, r1
    1d40:	4291      	cmp	r1, r2
    1d42:	d917      	bls.n	1d74 <estAlarmTime(unsigned long)+0x88>
      { // are we between recording periods during acquisition day
        if(t_rep>t_on)
    1d44:	4e37      	ldr	r6, [pc, #220]	; (1e24 <estAlarmTime(unsigned long)+0x138>)
    1d46:	4938      	ldr	r1, [pc, #224]	; (1e28 <estAlarmTime(unsigned long)+0x13c>)
    1d48:	8835      	ldrh	r5, [r6, #0]
    1d4a:	8809      	ldrh	r1, [r1, #0]
    1d4c:	b2ad      	uxth	r5, r5
    1d4e:	b289      	uxth	r1, r1
    1d50:	428d      	cmp	r5, r1
    1d52:	d84d      	bhi.n	1df0 <estAlarmTime(unsigned long)+0x104>
          secs = ((secs/t_rep)+1)*t_rep;
          return secs;
        }
      }
      //
      if (hh<h_1)                // from mid-night to h_1 
    1d54:	8821      	ldrh	r1, [r4, #0]
    1d56:	b289      	uxth	r1, r1
    1d58:	4291      	cmp	r1, r2
    1d5a:	d916      	bls.n	1d8a <estAlarmTime(unsigned long)+0x9e>
      {
        secs = (dd*24+ h_1)*3600;     // next time is h1
    1d5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1d60:	8820      	ldrh	r0, [r4, #0]
    1d62:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1d66:	00db      	lsls	r3, r3, #3
    1d68:	fa13 f080 	uxtah	r0, r3, r0
    1d6c:	fb02 f000 	mul.w	r0, r2, r0
        secs = (dd*24+h_1)*3600;  // next time is next day at h_1
      }
      //
      // return start or actual time in seconds
      return secs;
  }
    1d70:	bc70      	pop	{r4, r5, r6}
    1d72:	4770      	bx	lr
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)) )
    1d74:	492d      	ldr	r1, [pc, #180]	; (1e2c <estAlarmTime(unsigned long)+0x140>)
    1d76:	8809      	ldrh	r1, [r1, #0]
    1d78:	b289      	uxth	r1, r1
    1d7a:	4291      	cmp	r1, r2
    1d7c:	d8ea      	bhi.n	1d54 <estAlarmTime(unsigned long)+0x68>
    1d7e:	492c      	ldr	r1, [pc, #176]	; (1e30 <estAlarmTime(unsigned long)+0x144>)
    1d80:	8809      	ldrh	r1, [r1, #0]
    1d82:	b289      	uxth	r1, r1
    1d84:	4291      	cmp	r1, r2
    1d86:	d9e5      	bls.n	1d54 <estAlarmTime(unsigned long)+0x68>
    1d88:	e7dc      	b.n	1d44 <estAlarmTime(unsigned long)+0x58>
      else if ((hh>=h_2) && (hh<h_3)) // between the two recording periods
    1d8a:	4925      	ldr	r1, [pc, #148]	; (1e20 <estAlarmTime(unsigned long)+0x134>)
    1d8c:	8809      	ldrh	r1, [r1, #0]
    1d8e:	b289      	uxth	r1, r1
    1d90:	4291      	cmp	r1, r2
    1d92:	d80f      	bhi.n	1db4 <estAlarmTime(unsigned long)+0xc8>
    1d94:	4d25      	ldr	r5, [pc, #148]	; (1e2c <estAlarmTime(unsigned long)+0x140>)
    1d96:	8829      	ldrh	r1, [r5, #0]
    1d98:	b289      	uxth	r1, r1
    1d9a:	4291      	cmp	r1, r2
    1d9c:	d90a      	bls.n	1db4 <estAlarmTime(unsigned long)+0xc8>
        secs = (dd*24+h_3)*3600;      // next time is h3
    1d9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1da2:	8828      	ldrh	r0, [r5, #0]
    1da4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1da8:	00db      	lsls	r3, r3, #3
    1daa:	fa13 f080 	uxtah	r0, r3, r0
    1dae:	fb02 f000 	mul.w	r0, r2, r0
    1db2:	e7dd      	b.n	1d70 <estAlarmTime(unsigned long)+0x84>
      else if (hh>=h_4) // after the second recording period (goes into next day)
    1db4:	491e      	ldr	r1, [pc, #120]	; (1e30 <estAlarmTime(unsigned long)+0x144>)
    1db6:	8809      	ldrh	r1, [r1, #0]
    1db8:	b289      	uxth	r1, r1
    1dba:	4291      	cmp	r1, r2
    1dbc:	d8d8      	bhi.n	1d70 <estAlarmTime(unsigned long)+0x84>
        dd++;
    1dbe:	3301      	adds	r3, #1
        secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    1dc0:	8820      	ldrh	r0, [r4, #0]
    1dc2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1dc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1dca:	00db      	lsls	r3, r3, #3
    1dcc:	fa13 f080 	uxtah	r0, r3, r0
  }
    1dd0:	bc70      	pop	{r4, r5, r6}
        secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    1dd2:	fb02 f000 	mul.w	r0, r2, r0
  }
    1dd6:	4770      	bx	lr
          secs = ((dd/d_rep)+1)*d_rep*(24*3600);  
    1dd8:	882a      	ldrh	r2, [r5, #0]
    1dda:	8828      	ldrh	r0, [r5, #0]
    1ddc:	b292      	uxth	r2, r2
    1dde:	b280      	uxth	r0, r0
    1de0:	fbb3 f3f2 	udiv	r3, r3, r2
    1de4:	fb03 0000 	mla	r0, r3, r0, r0
    1de8:	fb04 f000 	mul.w	r0, r4, r0
  }
    1dec:	bc70      	pop	{r4, r5, r6}
    1dee:	4770      	bx	lr
          secs = ((secs/t_rep)+1)*t_rep;
    1df0:	8833      	ldrh	r3, [r6, #0]
    1df2:	8832      	ldrh	r2, [r6, #0]
    1df4:	b29b      	uxth	r3, r3
    1df6:	b292      	uxth	r2, r2
    1df8:	fbb0 f3f3 	udiv	r3, r0, r3
  }
    1dfc:	bc70      	pop	{r4, r5, r6}
          secs = ((secs/t_rep)+1)*t_rep;
    1dfe:	fb03 2002 	mla	r0, r3, r2, r2
  }
    1e02:	4770      	bx	lr
    1e04:	c22e4507 	.word	0xc22e4507
    1e08:	20035444 	.word	0x20035444
    1e0c:	91a2b3c5 	.word	0x91a2b3c5
    1e10:	00015180 	.word	0x00015180
    1e14:	20035446 	.word	0x20035446
    1e18:	20008ff8 	.word	0x20008ff8
    1e1c:	2003544c 	.word	0x2003544c
    1e20:	20008ffa 	.word	0x20008ffa
    1e24:	20035458 	.word	0x20035458
    1e28:	20009002 	.word	0x20009002
    1e2c:	20008ffc 	.word	0x20008ffc
    1e30:	20008ffe 	.word	0x20008ffe

00001e34 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    1e34:	4808      	ldr	r0, [pc, #32]	; (1e58 <_GLOBAL__sub_I_t_acq+0x24>)
    1e36:	2300      	movs	r3, #0
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
FsFile file;
    1e3c:	4a07      	ldr	r2, [pc, #28]	; (1e5c <_GLOBAL__sub_I_t_acq+0x28>)
  #else
    rc = sd->card()->writeBlocks(lba, buffer, bufsize/512);
  #endif

    return rc ? bufsize : -1;
  }
    1e3e:	b410      	push	{r4}
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1e40:	4c07      	ldr	r4, [pc, #28]	; (1e60 <_GLOBAL__sub_I_t_acq+0x2c>)
    1e42:	7303      	strb	r3, [r0, #12]
    1e44:	6004      	str	r4, [r0, #0]
    1e46:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e4a:	e9c0 3101 	strd	r3, r1, [r0, #4]
  FsBaseFile() {}
    1e4e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
FsFile file;
    1e52:	4904      	ldr	r1, [pc, #16]	; (1e64 <_GLOBAL__sub_I_t_acq+0x30>)
    1e54:	f00d beac 	b.w	fbb0 <__aeabi_atexit>
    1e58:	20034b60 	.word	0x20034b60
    1e5c:	20008a28 	.word	0x20008a28
    1e60:	20000c20 	.word	0x20000c20
    1e64:	00001121 	.word	0x00001121

00001e68 <powerDown()>:
    SNVS_LPCR |= (1 << 6); // turn off power
    1e68:	4a03      	ldr	r2, [pc, #12]	; (1e78 <powerDown()+0x10>)
    1e6a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e70:	6393      	str	r3, [r2, #56]	; 0x38
    while (1) asm("wfi");      
    1e72:	bf30      	wfi
    1e74:	e7fd      	b.n	1e72 <powerDown()+0xa>
    1e76:	bf00      	nop
    1e78:	400d4000 	.word	0x400d4000

00001e7c <hibernate_init()>:
  {
    1e7c:	b508      	push	{r3, lr}
    stopSystem();
    1e7e:	f7fe f9e1 	bl	244 <stopSystem()>
    snvs_tmp = SNVS_LPCR;
    1e82:	4a0c      	ldr	r2, [pc, #48]	; (1eb4 <hibernate_init()+0x38>)
    1e84:	4b0c      	ldr	r3, [pc, #48]	; (1eb8 <hibernate_init()+0x3c>)
    1e86:	6b91      	ldr	r1, [r2, #56]	; 0x38
    1e88:	6019      	str	r1, [r3, #0]
    SNVS_LPSR |= 1;
    1e8a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    1e8c:	f043 0301 	orr.w	r3, r3, #1
    1e90:	64d3      	str	r3, [r2, #76]	; 0x4c
    asm volatile("DSB");
    1e92:	f3bf 8f4f 	dsb	sy
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    1e96:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1e98:	f023 0302 	bic.w	r3, r3, #2
    1e9c:	6393      	str	r3, [r2, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    1e9e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1ea0:	f013 0302 	ands.w	r3, r3, #2
    1ea4:	d1fb      	bne.n	1e9e <hibernate_init()+0x22>
    while (SNVS_LPTAR != 0);
    1ea6:	4903      	ldr	r1, [pc, #12]	; (1eb4 <hibernate_init()+0x38>)
    SNVS_LPTAR = 0;
    1ea8:	6593      	str	r3, [r2, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    1eaa:	6d8b      	ldr	r3, [r1, #88]	; 0x58
    1eac:	2b00      	cmp	r3, #0
    1eae:	d1fc      	bne.n	1eaa <hibernate_init()+0x2e>
  }
    1eb0:	bd08      	pop	{r3, pc}
    1eb2:	bf00      	nop
    1eb4:	400d4000 	.word	0x400d4000
    1eb8:	2003431c 	.word	0x2003431c

00001ebc <hibernate_now(unsigned long)>:
  {
    1ebc:	b508      	push	{r3, lr}
      __disable_irq();
    1ebe:	b672      	cpsid	i
      SNVS_LPTAR = secs;
    1ec0:	4a08      	ldr	r2, [pc, #32]	; (1ee4 <hibernate_now(unsigned long)+0x28>)
    1ec2:	6590      	str	r0, [r2, #88]	; 0x58
      while (SNVS_LPTAR != secs);
    1ec4:	6d93      	ldr	r3, [r2, #88]	; 0x58
    1ec6:	4283      	cmp	r3, r0
    1ec8:	d1fc      	bne.n	1ec4 <hibernate_now(unsigned long)+0x8>
      SNVS_LPCR = snvs_tmp | SNVS_LPCR_LPTA_EN_MASK; 
    1eca:	4b07      	ldr	r3, [pc, #28]	; (1ee8 <hibernate_now(unsigned long)+0x2c>)
      while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    1ecc:	4905      	ldr	r1, [pc, #20]	; (1ee4 <hibernate_now(unsigned long)+0x28>)
      SNVS_LPCR = snvs_tmp | SNVS_LPCR_LPTA_EN_MASK; 
    1ece:	681b      	ldr	r3, [r3, #0]
    1ed0:	f043 0302 	orr.w	r3, r3, #2
    1ed4:	6393      	str	r3, [r2, #56]	; 0x38
      while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    1ed6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    1ed8:	079b      	lsls	r3, r3, #30
    1eda:	d5fc      	bpl.n	1ed6 <hibernate_now(unsigned long)+0x1a>
      __enable_irq();
    1edc:	b662      	cpsie	i
      powerDown(); 
    1ede:	f7ff ffc3 	bl	1e68 <powerDown()>
    1ee2:	bf00      	nop
    1ee4:	400d4000 	.word	0x400d4000
    1ee8:	2003431c 	.word	0x2003431c

00001eec <txEvent_event>:
    static uint32_t mtp_rxEventcount=0;

    uint32_t get_mtp_txEventcount() {return mtp_txEventcount; }
    uint32_t get_mtp_rxEventcount() {return mtp_rxEventcount; }
    
    static void txEvent_event(transfer_t *t) { mtp_txEventcount++;}
    1eec:	4a02      	ldr	r2, [pc, #8]	; (1ef8 <txEvent_event+0xc>)
    1eee:	6813      	ldr	r3, [r2, #0]
    1ef0:	3301      	adds	r3, #1
    1ef2:	6013      	str	r3, [r2, #0]
    1ef4:	4770      	bx	lr
    1ef6:	bf00      	nop
    1ef8:	20033c20 	.word	0x20033c20

00001efc <rxEvent_event>:
    static void rxEvent_event(transfer_t *t) { mtp_rxEventcount++;}
    1efc:	4a02      	ldr	r2, [pc, #8]	; (1f08 <rxEvent_event+0xc>)
    1efe:	6813      	ldr	r3, [r2, #0]
    1f00:	3301      	adds	r3, #1
    1f02:	6013      	str	r3, [r2, #0]
    1f04:	4770      	bx	lr
    1f06:	bf00      	nop
    1f08:	20033c1c 	.word	0x20033c1c

00001f0c <MTPD::write(char const*, int) [clone .part.0]>:
    void MTPD::write(const char *data, int len) 
    1f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f10:	4616      	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    1f12:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
    void MTPD::write(const char *data, int len) 
    1f16:	460d      	mov	r5, r1
        if(!write_length_) dst=tx_data_buffer;   
    1f18:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    1f1c:	b91b      	cbnz	r3, 1f26 <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    1f1e:	4f19      	ldr	r7, [pc, #100]	; (1f84 <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    1f20:	f100 0120 	add.w	r1, r0, #32
    1f24:	6039      	str	r1, [r7, #0]
        write_length_ += len;
    1f26:	4433      	add	r3, r6
        while(pos<len)
    1f28:	2e00      	cmp	r6, #0
        write_length_ += len;
    1f2a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
        while(pos<len)
    1f2e:	dd27      	ble.n	1f80 <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    1f30:	f500 7908 	add.w	r9, r0, #544	; 0x220
        int pos = 0; // into data
    1f34:	2400      	movs	r4, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1f36:	f100 0820 	add.w	r8, r0, #32
    1f3a:	4f12      	ldr	r7, [pc, #72]	; (1f84 <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    1f3c:	e001      	b.n	1f42 <MTPD::write(char const*, int) [clone .part.0]+0x36>
        while(pos<len)
    1f3e:	42a6      	cmp	r6, r4
    1f40:	dd1e      	ble.n	1f80 <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    1f42:	683b      	ldr	r3, [r7, #0]
          int to_copy = min(len - pos, avail);
    1f44:	1b32      	subs	r2, r6, r4
          memcpy(dst,src,to_copy);
    1f46:	4629      	mov	r1, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    1f48:	eba9 0a03 	sub.w	sl, r9, r3
          memcpy(dst,src,to_copy);
    1f4c:	4618      	mov	r0, r3
    1f4e:	4592      	cmp	sl, r2
    1f50:	bfa8      	it	ge
    1f52:	4692      	movge	sl, r2
    1f54:	4652      	mov	r2, sl
          pos += to_copy;
    1f56:	4454      	add	r4, sl
          memcpy(dst,src,to_copy);
    1f58:	f00b fea0 	bl	dc9c <memcpy>
    1f5c:	4603      	mov	r3, r0
          src += to_copy;
    1f5e:	4455      	add	r5, sl
          dst += to_copy;
    1f60:	4453      	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f62:	454b      	cmp	r3, r9
          dst += to_copy;
    1f64:	603b      	str	r3, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f66:	d1ea      	bne.n	1f3e <MTPD::write(char const*, int) [clone .part.0]+0x32>

#elif defined(__IMXRT1062__)

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1f68:	223c      	movs	r2, #60	; 0x3c
    1f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
    1f6e:	4640      	mov	r0, r8
    1f70:	f00d f882 	bl	f078 <usb_mtp_send>
    1f74:	2800      	cmp	r0, #0
    1f76:	ddf7      	ble.n	1f68 <MTPD::write(char const*, int) [clone .part.0]+0x5c>
        while(pos<len)
    1f78:	42a6      	cmp	r6, r4
            dst=tx_data_buffer;
    1f7a:	f8c7 8000 	str.w	r8, [r7]
        while(pos<len)
    1f7e:	dce0      	bgt.n	1f42 <MTPD::write(char const*, int) [clone .part.0]+0x36>
    }
    1f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f84:	200347fc 	.word	0x200347fc

00001f88 <MTPD::writestring(char const*) [clone .part.0]>:
  void MTPD::writestring(const char* str) {
    1f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f8a:	4607      	mov	r7, r0
    1f8c:	b083      	sub	sp, #12
    { write8(strlen(str) + 1);
    1f8e:	4608      	mov	r0, r1
  void MTPD::writestring(const char* str) {
    1f90:	460c      	mov	r4, r1
    { if (write_get_length_) 
    1f92:	f507 5580 	add.w	r5, r7, #4096	; 0x1000
    { write8(strlen(str) + 1);
    1f96:	f010 faf3 	bl	12580 <strlen>
    1f9a:	3001      	adds	r0, #1
    { if (write_get_length_) 
    1f9c:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
    1fa0:	f88d 0006 	strb.w	r0, [sp, #6]
    1fa4:	b396      	cbz	r6, 200c <MTPD::writestring(char const*) [clone .part.0]+0x84>
        write_length_ += len;
    1fa6:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    1faa:	3301      	adds	r3, #1
    1fac:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1fb0:	7823      	ldrb	r3, [r4, #0]
    1fb2:	b973      	cbnz	r3, 1fd2 <MTPD::writestring(char const*) [clone .part.0]+0x4a>
        write_length_ += len;
    1fb4:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    1fb8:	3302      	adds	r3, #2
    1fba:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
  }
    1fbe:	b003      	add	sp, #12
    1fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        write_length_ += len;
    1fc2:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    1fc6:	4413      	add	r3, r2
    1fc8:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1fcc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    1fd0:	b17b      	cbz	r3, 1ff2 <MTPD::writestring(char const*) [clone .part.0]+0x6a>
        write_length_ += len;
    1fd2:	2202      	movs	r2, #2
    1fd4:	f10d 0106 	add.w	r1, sp, #6
    1fd8:	4638      	mov	r0, r7
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1fda:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    1fde:	2e00      	cmp	r6, #0
    1fe0:	d1ef      	bne.n	1fc2 <MTPD::writestring(char const*) [clone .part.0]+0x3a>
    1fe2:	f7ff ff93 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1fe6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    { if (write_get_length_) 
    1fea:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1fee:	2b00      	cmp	r3, #0
    1ff0:	d1ef      	bne.n	1fd2 <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    1ff2:	2300      	movs	r3, #0
    1ff4:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    1ff8:	2e00      	cmp	r6, #0
    1ffa:	d1db      	bne.n	1fb4 <MTPD::writestring(char const*) [clone .part.0]+0x2c>
    1ffc:	2202      	movs	r2, #2
    1ffe:	f10d 0106 	add.w	r1, sp, #6
    2002:	4638      	mov	r0, r7
    2004:	f7ff ff82 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
  }
    2008:	b003      	add	sp, #12
    200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    200c:	2201      	movs	r2, #1
    200e:	f10d 0106 	add.w	r1, sp, #6
    2012:	4638      	mov	r0, r7
    2014:	f7ff ff7a 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2018:	7823      	ldrb	r3, [r4, #0]
    { if (write_get_length_) 
    201a:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    201e:	2b00      	cmp	r3, #0
    2020:	d1d7      	bne.n	1fd2 <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    2022:	e7e6      	b.n	1ff2 <MTPD::writestring(char const*) [clone .part.0]+0x6a>

00002024 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>:
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    2024:	b570      	push	{r4, r5, r6, lr}
    2026:	f24d 4302 	movw	r3, #54274	; 0xd402
    202a:	b082      	sub	sp, #8
    { if (write_get_length_) 
    202c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    2030:	4605      	mov	r5, r0
    2032:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    2036:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    203a:	b31b      	cbz	r3, 2084 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x60>
        write_length_ += len;
    203c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2040:	3302      	adds	r3, #2
    2042:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2046:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    204a:	3302      	adds	r3, #2
    204c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2050:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2054:	3301      	adds	r3, #1
    2056:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    if (*str) 
    205a:	491e      	ldr	r1, [pc, #120]	; (20d4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    205c:	4628      	mov	r0, r5
    205e:	f7ff ff93 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    2062:	491c      	ldr	r1, [pc, #112]	; (20d4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    2064:	4628      	mov	r0, r5
    2066:	f7ff ff8f 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
        write8(0);       // no form
    206a:	2200      	movs	r2, #0
    { if (write_get_length_) 
    206c:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2070:	f88d 2006 	strb.w	r2, [sp, #6]
    2074:	b333      	cbz	r3, 20c4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xa0>
        write_length_ += len;
    2076:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    207a:	3301      	adds	r3, #1
    207c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
  }
    2080:	b002      	add	sp, #8
    2082:	bd70      	pop	{r4, r5, r6, pc}
    2084:	2202      	movs	r2, #2
    2086:	f10d 0106 	add.w	r1, sp, #6
    208a:	f7ff ff3f 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    208e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    { if (write_get_length_) 
    2092:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
        write16(0xFFFF); // string type
    2096:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    209a:	2e00      	cmp	r6, #0
    209c:	d1d3      	bne.n	2046 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x22>
    209e:	2202      	movs	r2, #2
    20a0:	f10d 0106 	add.w	r1, sp, #6
    20a4:	4628      	mov	r0, r5
    20a6:	f7ff ff31 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    20aa:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
        write8(0);       // read-only
    20ae:	f88d 6006 	strb.w	r6, [sp, #6]
    { if (write_get_length_) 
    20b2:	2b00      	cmp	r3, #0
    20b4:	d1cc      	bne.n	2050 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x2c>
    20b6:	2201      	movs	r2, #1
    20b8:	f10d 0106 	add.w	r1, sp, #6
    20bc:	4628      	mov	r0, r5
    20be:	f7ff ff25 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    20c2:	e7ca      	b.n	205a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x36>
    20c4:	2201      	movs	r2, #1
    20c6:	f10d 0106 	add.w	r1, sp, #6
    20ca:	4628      	mov	r0, r5
    20cc:	f7ff ff1e 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
  }
    20d0:	b002      	add	sp, #8
    20d2:	bd70      	pop	{r4, r5, r6, pc}
    20d4:	20000b24 	.word	0x20000b24

000020d8 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    20d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char msoft[]="microsoft.com: 1.0;";
    20dc:	4dc5      	ldr	r5, [pc, #788]	; (23f4 <MTPD::WriteDescriptor()+0x31c>)
  void MTPD::WriteDescriptor() {
    20de:	b090      	sub	sp, #64	; 0x40
    20e0:	4607      	mov	r7, r0
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf1);
    20e2:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 23f8 <MTPD::WriteDescriptor()+0x320>
    char msoft[]="microsoft.com: 1.0;";
    20e6:	ac01      	add	r4, sp, #4
    20e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    20ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    20ec:	682b      	ldr	r3, [r5, #0]
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf1);
    20ee:	aa06      	add	r2, sp, #24
    20f0:	2102      	movs	r1, #2
    20f2:	2003      	movs	r0, #3
    char msoft[]="microsoft.com: 1.0;";
    20f4:	6023      	str	r3, [r4, #0]
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf1);
    20f6:	f00b fe9f 	bl	de38 <dtostrf>
    strlcat(buf1, " / MTP " MTP_VERS, sizeof(buf1) );
    20fa:	2214      	movs	r2, #20
    20fc:	49bf      	ldr	r1, [pc, #764]	; (23fc <MTPD::WriteDescriptor()+0x324>)
    20fe:	a806      	add	r0, sp, #24
    2100:	f00f feac 	bl	11e5c <strlcat>
    for (size_t i=0; i<10; i++) buf2[i] = usb_string_serial_number.wString[i];
    2104:	4bbe      	ldr	r3, [pc, #760]	; (2400 <MTPD::WriteDescriptor()+0x328>)
    2106:	aa0b      	add	r2, sp, #44	; 0x2c
    2108:	f103 0014 	add.w	r0, r3, #20
    210c:	f833 1f02 	ldrh.w	r1, [r3, #2]!
    2110:	4298      	cmp	r0, r3
    2112:	f802 1b01 	strb.w	r1, [r2], #1
    2116:	d1f9      	bne.n	210c <MTPD::WriteDescriptor()+0x34>
    { if (write_get_length_) 
    2118:	f507 5580 	add.w	r5, r7, #4096	; 0x1000
    211c:	2464      	movs	r4, #100	; 0x64
    211e:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2122:	f8ad 4000 	strh.w	r4, [sp]
    2126:	2b00      	cmp	r3, #0
    2128:	f000 812f 	beq.w	238a <MTPD::WriteDescriptor()+0x2b2>
        write_length_ += len;
    212c:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2130:	3302      	adds	r3, #2
    2132:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2136:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    213a:	3304      	adds	r3, #4
    213c:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2140:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2144:	3302      	adds	r3, #2
    2146:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    if (*str) 
    214a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    214e:	2b00      	cmp	r3, #0
    2150:	f000 8105 	beq.w	235e <MTPD::WriteDescriptor()+0x286>
    2154:	a901      	add	r1, sp, #4
    2156:	4638      	mov	r0, r7
    2158:	f7ff ff16 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    215c:	f895 2428 	ldrb.w	r2, [r5, #1064]	; 0x428
    write16(0);    // functional mode
    2160:	2300      	movs	r3, #0
    2162:	f8ad 3000 	strh.w	r3, [sp]
    { if (write_get_length_) 
    2166:	2a00      	cmp	r2, #0
    2168:	f040 8103 	bne.w	2372 <MTPD::WriteDescriptor()+0x29a>
    216c:	2202      	movs	r2, #2
    216e:	4638      	mov	r0, r7
    2170:	4669      	mov	r1, sp
    2172:	f7ff fecb 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2176:	2314      	movs	r3, #20
    2178:	9300      	str	r3, [sp, #0]
    217a:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    217e:	2b00      	cmp	r3, #0
    2180:	f040 80fc 	bne.w	237c <MTPD::WriteDescriptor()+0x2a4>
    2184:	4669      	mov	r1, sp
    2186:	2204      	movs	r2, #4
    2188:	4638      	mov	r0, r7
    218a:	f7ff febf 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    218e:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    2192:	4c9c      	ldr	r4, [pc, #624]	; (2404 <MTPD::WriteDescriptor()+0x32c>)
    write32(supported_op_num);
    2194:	f241 0301 	movw	r3, #4097	; 0x1001
    2198:	f104 0826 	add.w	r8, r4, #38	; 0x26
    219c:	e008      	b.n	21b0 <MTPD::WriteDescriptor()+0xd8>
        write_length_ += len;
    219e:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    21a2:	45a0      	cmp	r8, r4
        write_length_ += len;
    21a4:	4413      	add	r3, r2
    21a6:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    21aa:	d00e      	beq.n	21ca <MTPD::WriteDescriptor()+0xf2>
    21ac:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    21b0:	2202      	movs	r2, #2
    21b2:	4669      	mov	r1, sp
    21b4:	4638      	mov	r0, r7
    21b6:	f8ad 3000 	strh.w	r3, [sp]
    { if (write_get_length_) 
    21ba:	2e00      	cmp	r6, #0
    21bc:	d1ef      	bne.n	219e <MTPD::WriteDescriptor()+0xc6>
    21be:	f7ff fea5 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    21c2:	45a0      	cmp	r8, r4
    { if (write_get_length_) 
    21c4:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    21c8:	d1f0      	bne.n	21ac <MTPD::WriteDescriptor()+0xd4>
    write32(supported_event_num);      
    21ca:	2204      	movs	r2, #4
    21cc:	9200      	str	r2, [sp, #0]
    { if (write_get_length_) 
    21ce:	2e00      	cmp	r6, #0
    21d0:	d060      	beq.n	2294 <MTPD::WriteDescriptor()+0x1bc>
        write_length_ += len;
    21d2:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    21d6:	4413      	add	r3, r2
    21d8:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    21dc:	4c8a      	ldr	r4, [pc, #552]	; (2408 <MTPD::WriteDescriptor()+0x330>)
    write32(supported_event_num);      
    21de:	f244 0304 	movw	r3, #16388	; 0x4004
    21e2:	2202      	movs	r2, #2
    21e4:	4669      	mov	r1, sp
    21e6:	f104 0806 	add.w	r8, r4, #6
    21ea:	4638      	mov	r0, r7
    21ec:	f8ad 3000 	strh.w	r3, [sp]
    { if (write_get_length_) 
    21f0:	b17e      	cbz	r6, 2212 <MTPD::WriteDescriptor()+0x13a>
        write_length_ += len;
    21f2:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    21f6:	4544      	cmp	r4, r8
        write_length_ += len;
    21f8:	4413      	add	r3, r2
    21fa:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    21fe:	d00e      	beq.n	221e <MTPD::WriteDescriptor()+0x146>
    2200:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    2204:	2202      	movs	r2, #2
    2206:	4669      	mov	r1, sp
    2208:	4638      	mov	r0, r7
    220a:	f8ad 3000 	strh.w	r3, [sp]
    { if (write_get_length_) 
    220e:	2e00      	cmp	r6, #0
    2210:	d1ef      	bne.n	21f2 <MTPD::WriteDescriptor()+0x11a>
    2212:	f7ff fe7b 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    2216:	4544      	cmp	r4, r8
    { if (write_get_length_) 
    2218:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    221c:	d1f0      	bne.n	2200 <MTPD::WriteDescriptor()+0x128>
    write32(1);       // Device properties (array of uint16)
    221e:	2301      	movs	r3, #1
    2220:	9300      	str	r3, [sp, #0]
    { if (write_get_length_) 
    2222:	2e00      	cmp	r6, #0
    2224:	d059      	beq.n	22da <MTPD::WriteDescriptor()+0x202>
        write_length_ += len;
    2226:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    222a:	3304      	adds	r3, #4
    222c:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2230:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2234:	3302      	adds	r3, #2
    2236:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    223a:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    223e:	3304      	adds	r3, #4
    2240:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2244:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2248:	3304      	adds	r3, #4
    224a:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    224e:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2252:	3302      	adds	r3, #2
    2254:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2258:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    225c:	3302      	adds	r3, #2
    225e:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    if (*str) 
    2262:	496a      	ldr	r1, [pc, #424]	; (240c <MTPD::WriteDescriptor()+0x334>)
    2264:	4638      	mov	r0, r7
    2266:	f7ff fe8f 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    226a:	4969      	ldr	r1, [pc, #420]	; (2410 <MTPD::WriteDescriptor()+0x338>)
    226c:	4638      	mov	r0, r7
    226e:	f7ff fe8b 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    2272:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2276:	b31b      	cbz	r3, 22c0 <MTPD::WriteDescriptor()+0x1e8>
    2278:	a906      	add	r1, sp, #24
    227a:	4638      	mov	r0, r7
    227c:	f7ff fe84 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    2280:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    2284:	b16b      	cbz	r3, 22a2 <MTPD::WriteDescriptor()+0x1ca>
    2286:	a90b      	add	r1, sp, #44	; 0x2c
    2288:	4638      	mov	r0, r7
    228a:	f7ff fe7d 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
  }
    228e:	b010      	add	sp, #64	; 0x40
    2290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2294:	4669      	mov	r1, sp
    2296:	4638      	mov	r0, r7
    2298:	f7ff fe38 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    229c:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
    22a0:	e79c      	b.n	21dc <MTPD::WriteDescriptor()+0x104>
    22a2:	f895 2428 	ldrb.w	r2, [r5, #1064]	; 0x428
    22a6:	f88d 3000 	strb.w	r3, [sp]
    22aa:	2a00      	cmp	r2, #0
    22ac:	f000 8099 	beq.w	23e2 <MTPD::WriteDescriptor()+0x30a>
        write_length_ += len;
    22b0:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    22b4:	3301      	adds	r3, #1
    22b6:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
  }
    22ba:	b010      	add	sp, #64	; 0x40
    22bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    { if (write_get_length_) 
    22c0:	f895 2428 	ldrb.w	r2, [r5, #1064]	; 0x428
    22c4:	f88d 3000 	strb.w	r3, [sp]
    22c8:	2a00      	cmp	r2, #0
    22ca:	f000 8084 	beq.w	23d6 <MTPD::WriteDescriptor()+0x2fe>
        write_length_ += len;
    22ce:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    22d2:	3301      	adds	r3, #1
    22d4:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    22d8:	e7d2      	b.n	2280 <MTPD::WriteDescriptor()+0x1a8>
    22da:	2204      	movs	r2, #4
    22dc:	4638      	mov	r0, r7
    22de:	4669      	mov	r1, sp
    22e0:	f7ff fe14 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    22e4:	f24d 4302 	movw	r3, #54274	; 0xd402
    22e8:	f8ad 3000 	strh.w	r3, [sp]
    { if (write_get_length_) 
    22ec:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    22f0:	2b00      	cmp	r3, #0
    22f2:	d19d      	bne.n	2230 <MTPD::WriteDescriptor()+0x158>
    22f4:	2202      	movs	r2, #2
    22f6:	4669      	mov	r1, sp
    22f8:	4638      	mov	r0, r7
    22fa:	f7ff fe07 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    22fe:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2302:	9600      	str	r6, [sp, #0]
    2304:	2b00      	cmp	r3, #0
    2306:	d198      	bne.n	223a <MTPD::WriteDescriptor()+0x162>
    2308:	2204      	movs	r2, #4
    230a:	4669      	mov	r1, sp
    230c:	4638      	mov	r0, r7
    230e:	2402      	movs	r4, #2
    2310:	f7ff fdfc 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2314:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2318:	9400      	str	r4, [sp, #0]
    231a:	2b00      	cmp	r3, #0
    231c:	d192      	bne.n	2244 <MTPD::WriteDescriptor()+0x16c>
    231e:	2204      	movs	r2, #4
    2320:	4669      	mov	r1, sp
    2322:	4638      	mov	r0, r7
    2324:	f7ff fdf2 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2328:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    232c:	f8ad 3000 	strh.w	r3, [sp]
    2330:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2334:	2b00      	cmp	r3, #0
    2336:	d18a      	bne.n	224e <MTPD::WriteDescriptor()+0x176>
    2338:	4622      	mov	r2, r4
    233a:	4669      	mov	r1, sp
    233c:	4638      	mov	r0, r7
    233e:	f7ff fde5 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2342:	f243 0301 	movw	r3, #12289	; 0x3001
    2346:	f8ad 3000 	strh.w	r3, [sp]
    234a:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    234e:	2b00      	cmp	r3, #0
    2350:	d182      	bne.n	2258 <MTPD::WriteDescriptor()+0x180>
    2352:	4622      	mov	r2, r4
    2354:	4669      	mov	r1, sp
    2356:	4638      	mov	r0, r7
    2358:	f7ff fdd8 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    235c:	e781      	b.n	2262 <MTPD::WriteDescriptor()+0x18a>
    { write8(0);
    235e:	f88d 3000 	strb.w	r3, [sp]
    { if (write_get_length_) 
    2362:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2366:	b373      	cbz	r3, 23c6 <MTPD::WriteDescriptor()+0x2ee>
        write_length_ += len;
    2368:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    236c:	3301      	adds	r3, #1
    236e:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2372:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2376:	3302      	adds	r3, #2
    2378:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    237c:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    2380:	2601      	movs	r6, #1
    2382:	3304      	adds	r3, #4
    2384:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    2388:	e703      	b.n	2192 <MTPD::WriteDescriptor()+0xba>
    238a:	2202      	movs	r2, #2
    238c:	4638      	mov	r0, r7
    238e:	4669      	mov	r1, sp
    2390:	f7ff fdbc 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2394:	2306      	movs	r3, #6
    2396:	9300      	str	r3, [sp, #0]
    { if (write_get_length_) 
    2398:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    239c:	2b00      	cmp	r3, #0
    239e:	f47f aeca 	bne.w	2136 <MTPD::WriteDescriptor()+0x5e>
    23a2:	2204      	movs	r2, #4
    23a4:	4669      	mov	r1, sp
    23a6:	4638      	mov	r0, r7
    23a8:	f7ff fdb0 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    23ac:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    23b0:	f8ad 4000 	strh.w	r4, [sp]
    23b4:	2b00      	cmp	r3, #0
    23b6:	f47f aec3 	bne.w	2140 <MTPD::WriteDescriptor()+0x68>
    23ba:	4669      	mov	r1, sp
    23bc:	2202      	movs	r2, #2
    23be:	4638      	mov	r0, r7
    23c0:	f7ff fda4 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    23c4:	e6c1      	b.n	214a <MTPD::WriteDescriptor()+0x72>
    23c6:	2201      	movs	r2, #1
    23c8:	4669      	mov	r1, sp
    23ca:	4638      	mov	r0, r7
    23cc:	f7ff fd9e 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    23d0:	f895 2428 	ldrb.w	r2, [r5, #1064]	; 0x428
    23d4:	e6c4      	b.n	2160 <MTPD::WriteDescriptor()+0x88>
    23d6:	2201      	movs	r2, #1
    23d8:	4669      	mov	r1, sp
    23da:	4638      	mov	r0, r7
    23dc:	f7ff fd96 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    23e0:	e74e      	b.n	2280 <MTPD::WriteDescriptor()+0x1a8>
    23e2:	2201      	movs	r2, #1
    23e4:	4669      	mov	r1, sp
    23e6:	4638      	mov	r0, r7
    23e8:	f7ff fd90 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
  }
    23ec:	b010      	add	sp, #64	; 0x40
    23ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23f2:	bf00      	nop
    23f4:	20000b10 	.word	0x20000b10
    23f8:	3fcccccd 	.word	0x3fcccccd
    23fc:	20000afc 	.word	0x20000afc
    2400:	20008fe0 	.word	0x20008fe0
    2404:	20000948 	.word	0x20000948
    2408:	20000970 	.word	0x20000970
    240c:	20000b08 	.word	0x20000b08
    2410:	20000b24 	.word	0x20000b24

00002414 <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    2414:	b5f0      	push	{r4, r5, r6, r7, lr}
      uint32_t sd_getFSCount(void) {return fsCount;}
    2416:	6803      	ldr	r3, [r0, #0]
    { if (write_get_length_) 
    2418:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
  void MTPD::WriteStorageIDs() {
    241c:	b083      	sub	sp, #12
    241e:	4606      	mov	r6, r0
    2420:	681f      	ldr	r7, [r3, #0]
    { if (write_get_length_) 
    2422:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2426:	9701      	str	r7, [sp, #4]
    2428:	b1f3      	cbz	r3, 2468 <MTPD::WriteStorageIDs()+0x54>
        write_length_ += len;
    242a:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    242e:	3304      	adds	r3, #4
    2430:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    2434:	b1b7      	cbz	r7, 2464 <MTPD::WriteStorageIDs()+0x50>
    2436:	2400      	movs	r4, #0
    2438:	e006      	b.n	2448 <MTPD::WriteStorageIDs()+0x34>
        write_length_ += len;
    243a:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    243e:	42bc      	cmp	r4, r7
        write_length_ += len;
    2440:	4413      	add	r3, r2
    2442:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    2446:	d00d      	beq.n	2464 <MTPD::WriteStorageIDs()+0x50>
    2448:	3401      	adds	r4, #1
    244a:	2204      	movs	r2, #4
    { if (write_get_length_) 
    244c:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2450:	4630      	mov	r0, r6
    2452:	eb0d 0102 	add.w	r1, sp, r2
    2456:	9401      	str	r4, [sp, #4]
    2458:	2b00      	cmp	r3, #0
    245a:	d1ee      	bne.n	243a <MTPD::WriteStorageIDs()+0x26>
    245c:	f7ff fd56 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    2460:	42bc      	cmp	r4, r7
    2462:	d1f1      	bne.n	2448 <MTPD::WriteStorageIDs()+0x34>
  }
    2464:	b003      	add	sp, #12
    2466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2468:	2204      	movs	r2, #4
    246a:	eb0d 0102 	add.w	r1, sp, r2
    246e:	f7ff fd4d 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2472:	e7df      	b.n	2434 <MTPD::WriteStorageIDs()+0x20>

00002474 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    2474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t store = Storage2Store(storage);
    2478:	1e4e      	subs	r6, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    247a:	4605      	mov	r5, r0
    247c:	b085      	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    247e:	6800      	ldr	r0, [r0, #0]
    2480:	4631      	mov	r1, r6
    { if (write_get_length_) 
    2482:	f505 5480 	add.w	r4, r5, #4096	; 0x1000
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2486:	f003 f85b 	bl	5540 <MTPStorage_SD::readonly(unsigned long)>
    248a:	2800      	cmp	r0, #0
    { if (write_get_length_) 
    248c:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2490:	bf14      	ite	ne
    2492:	2201      	movne	r2, #1
    2494:	2204      	moveq	r2, #4
    2496:	f8ad 2008 	strh.w	r2, [sp, #8]
    { if (write_get_length_) 
    249a:	2b00      	cmp	r3, #0
    249c:	d074      	beq.n	2588 <MTPD::GetStorageInfo(unsigned long)+0x114>
        write_length_ += len;
    249e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    24a2:	3302      	adds	r3, #2
    24a4:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    24a8:	4631      	mov	r1, r6
    24aa:	6828      	ldr	r0, [r5, #0]
    24ac:	f003 f84a 	bl	5544 <MTPStorage_SD::has_directories(unsigned long)>
    { if (write_get_length_) 
    24b0:	f894 7428 	ldrb.w	r7, [r4, #1064]	; 0x428
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    24b4:	3001      	adds	r0, #1
    24b6:	f8ad 0008 	strh.w	r0, [sp, #8]
    { if (write_get_length_) 
    24ba:	2f00      	cmp	r7, #0
    24bc:	f000 80a0 	beq.w	2600 <MTPD::GetStorageInfo(unsigned long)+0x18c>
        write_length_ += len;
    24c0:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    24c4:	3302      	adds	r3, #2
    24c6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    24ca:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    24ce:	3302      	adds	r3, #2
    24d0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    uint64_t ntotal = storage_->totalSize(store) ; 
    24d4:	4631      	mov	r1, r6
    24d6:	6828      	ldr	r0, [r5, #0]
    24d8:	f003 f836 	bl	5548 <MTPStorage_SD::totalSize(unsigned long)>
    24dc:	4607      	mov	r7, r0
    24de:	4688      	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    24e0:	6828      	ldr	r0, [r5, #0]
    24e2:	4631      	mov	r1, r6
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    24e4:	f04f 0b00 	mov.w	fp, #0
    24e8:	f003 f84a 	bl	5580 <MTPStorage_SD::usedSize(unsigned long)>
    24ec:	4681      	mov	r9, r0
    24ee:	468a      	mov	sl, r1
    24f0:	4850      	ldr	r0, [pc, #320]	; (2634 <MTPD::GetStorageInfo(unsigned long)+0x1c0>)
    24f2:	2105      	movs	r1, #5
    24f4:	f00d f952 	bl	f79c <usb_serial_write>
    24f8:	230a      	movs	r3, #10
    24fa:	463a      	mov	r2, r7
    24fc:	484e      	ldr	r0, [pc, #312]	; (2638 <MTPD::GetStorageInfo(unsigned long)+0x1c4>)
    24fe:	9300      	str	r3, [sp, #0]
    2500:	4643      	mov	r3, r8
    2502:	f8cd b004 	str.w	fp, [sp, #4]
    2506:	f00a fdff 	bl	d108 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    250a:	484b      	ldr	r0, [pc, #300]	; (2638 <MTPD::GetStorageInfo(unsigned long)+0x1c4>)
    250c:	f00a fdbe 	bl	d08c <Print::println()>
    2510:	2105      	movs	r1, #5
    2512:	484a      	ldr	r0, [pc, #296]	; (263c <MTPD::GetStorageInfo(unsigned long)+0x1c8>)
    2514:	f00d f942 	bl	f79c <usb_serial_write>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    2518:	230a      	movs	r3, #10
    251a:	464a      	mov	r2, r9
    251c:	4846      	ldr	r0, [pc, #280]	; (2638 <MTPD::GetStorageInfo(unsigned long)+0x1c4>)
    251e:	9300      	str	r3, [sp, #0]
    2520:	4653      	mov	r3, sl
    2522:	f8cd b004 	str.w	fp, [sp, #4]
    2526:	f00a fdef 	bl	d108 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    252a:	4843      	ldr	r0, [pc, #268]	; (2638 <MTPD::GetStorageInfo(unsigned long)+0x1c4>)
    252c:	f00a fdae 	bl	d08c <Print::println()>
    { if (write_get_length_) 
    2530:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2534:	e9cd 7802 	strd	r7, r8, [sp, #8]
    2538:	2b00      	cmp	r3, #0
    253a:	d03e      	beq.n	25ba <MTPD::GetStorageInfo(unsigned long)+0x146>
        write_length_ += len;
    253c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2540:	3308      	adds	r3, #8
    2542:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2546:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    254a:	3308      	adds	r3, #8
    254c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2550:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2554:	3304      	adds	r3, #4
    2556:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    255a:	682b      	ldr	r3, [r5, #0]
    255c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    2560:	6859      	ldr	r1, [r3, #4]
    if (*str) 
    2562:	780b      	ldrb	r3, [r1, #0]
    2564:	b1b3      	cbz	r3, 2594 <MTPD::GetStorageInfo(unsigned long)+0x120>
    2566:	4628      	mov	r0, r5
    2568:	f7ff fd0e 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    256c:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    { write8(0);
    2570:	2200      	movs	r2, #0
    2572:	f88d 2008 	strb.w	r2, [sp, #8]
    { if (write_get_length_) 
    2576:	b9c3      	cbnz	r3, 25aa <MTPD::GetStorageInfo(unsigned long)+0x136>
    2578:	2201      	movs	r2, #1
    257a:	a902      	add	r1, sp, #8
    257c:	4628      	mov	r0, r5
    257e:	f7ff fcc5 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
  }
    2582:	b005      	add	sp, #20
    2584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2588:	2202      	movs	r2, #2
    258a:	a902      	add	r1, sp, #8
    258c:	4628      	mov	r0, r5
    258e:	f7ff fcbd 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2592:	e789      	b.n	24a8 <MTPD::GetStorageInfo(unsigned long)+0x34>
    { if (write_get_length_) 
    2594:	f894 2428 	ldrb.w	r2, [r4, #1064]	; 0x428
    2598:	f88d 3008 	strb.w	r3, [sp, #8]
    259c:	2a00      	cmp	r2, #0
    259e:	d041      	beq.n	2624 <MTPD::GetStorageInfo(unsigned long)+0x1b0>
        write_length_ += len;
    25a0:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    25a4:	3301      	adds	r3, #1
    25a6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    25aa:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    25ae:	3301      	adds	r3, #1
    25b0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
  }
    25b4:	b005      	add	sp, #20
    25b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25ba:	2208      	movs	r2, #8
    25bc:	4628      	mov	r0, r5
    25be:	eb0d 0102 	add.w	r1, sp, r2
    25c2:	f7ff fca3 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    write64((ntotal-nused));  // free space (100M)
    25c6:	ebb7 0709 	subs.w	r7, r7, r9
    25ca:	eb68 030a 	sbc.w	r3, r8, sl
    25ce:	e9cd 7302 	strd	r7, r3, [sp, #8]
    { if (write_get_length_) 
    25d2:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    25d6:	2b00      	cmp	r3, #0
    25d8:	d1b5      	bne.n	2546 <MTPD::GetStorageInfo(unsigned long)+0xd2>
    25da:	2208      	movs	r2, #8
    25dc:	4628      	mov	r0, r5
    25de:	eb0d 0102 	add.w	r1, sp, r2
    25e2:	f7ff fc93 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    25e6:	f04f 32ff 	mov.w	r2, #4294967295
    25ea:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    write32(0xFFFFFFFFUL);  // free space (objects)
    25ee:	9202      	str	r2, [sp, #8]
    { if (write_get_length_) 
    25f0:	2b00      	cmp	r3, #0
    25f2:	d1ad      	bne.n	2550 <MTPD::GetStorageInfo(unsigned long)+0xdc>
    25f4:	2204      	movs	r2, #4
    25f6:	a902      	add	r1, sp, #8
    25f8:	4628      	mov	r0, r5
    25fa:	f7ff fc87 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    25fe:	e7ac      	b.n	255a <MTPD::GetStorageInfo(unsigned long)+0xe6>
    2600:	2202      	movs	r2, #2
    2602:	4628      	mov	r0, r5
    2604:	a902      	add	r1, sp, #8
    2606:	f7ff fc81 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    260a:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    260e:	f8ad 7008 	strh.w	r7, [sp, #8]
    2612:	2b00      	cmp	r3, #0
    2614:	f47f af59 	bne.w	24ca <MTPD::GetStorageInfo(unsigned long)+0x56>
    2618:	2202      	movs	r2, #2
    261a:	a902      	add	r1, sp, #8
    261c:	4628      	mov	r0, r5
    261e:	f7ff fc75 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2622:	e757      	b.n	24d4 <MTPD::GetStorageInfo(unsigned long)+0x60>
    2624:	2201      	movs	r2, #1
    2626:	a902      	add	r1, sp, #8
    2628:	4628      	mov	r0, r5
    262a:	f7ff fc6f 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    262e:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2632:	e79d      	b.n	2570 <MTPD::GetStorageInfo(unsigned long)+0xfc>
    2634:	20000aec 	.word	0x20000aec
    2638:	20008a0c 	.word	0x20008a0c
    263c:	20000af4 	.word	0x20000af4

00002640 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    2640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (write_get_length_) {
    2644:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
  { uint32_t store = Storage2Store(storage);
    2648:	b082      	sub	sp, #8
    264a:	4604      	mov	r4, r0
    264c:	1e4d      	subs	r5, r1, #1
    if (write_get_length_) {
    264e:	f896 7428 	ldrb.w	r7, [r6, #1064]	; 0x428
    2652:	b18f      	cbz	r7, 2678 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
    int num = 0;
    2654:	2700      	movs	r7, #0
    storage_->StartGetObjectHandles(store, parent);
    2656:	4629      	mov	r1, r5
    2658:	6800      	ldr	r0, [r0, #0]
    265a:	f003 fad7 	bl	5c0c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
    while (storage_->GetNextObjectHandle(store)) num++;
    265e:	4629      	mov	r1, r5
    2660:	6820      	ldr	r0, [r4, #0]
    2662:	3701      	adds	r7, #1
    2664:	f003 fb16 	bl	5c94 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    2668:	2800      	cmp	r0, #0
    266a:	d1f8      	bne.n	265e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ *= 4;
    266c:	00bf      	lsls	r7, r7, #2
    266e:	f8c6 742c 	str.w	r7, [r6, #1068]	; 0x42c
  }
    2672:	b002      	add	sp, #8
    2674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    storage_->StartGetObjectHandles(store, parent);
    2678:	4629      	mov	r1, r5
    267a:	6800      	ldr	r0, [r0, #0]
    267c:	4690      	mov	r8, r2
    267e:	f003 fac5 	bl	5c0c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
    while (storage_->GetNextObjectHandle(store)) num++;
    2682:	e000      	b.n	2686 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x46>
    2684:	3701      	adds	r7, #1
    2686:	4629      	mov	r1, r5
    2688:	6820      	ldr	r0, [r4, #0]
    268a:	f003 fb03 	bl	5c94 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    268e:	2800      	cmp	r0, #0
    2690:	d1f8      	bne.n	2684 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x44>
    { if (write_get_length_) 
    2692:	f896 3428 	ldrb.w	r3, [r6, #1064]	; 0x428
    2696:	9701      	str	r7, [sp, #4]
    2698:	b9fb      	cbnz	r3, 26da <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x9a>
    269a:	2204      	movs	r2, #4
    269c:	4620      	mov	r0, r4
    269e:	eb0d 0102 	add.w	r1, sp, r2
    26a2:	f7ff fc33 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
      storage_->StartGetObjectHandles(store, parent);
    26a6:	4642      	mov	r2, r8
    26a8:	4629      	mov	r1, r5
    26aa:	6820      	ldr	r0, [r4, #0]
    26ac:	f003 faae 	bl	5c0c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    26b0:	4629      	mov	r1, r5
    26b2:	6820      	ldr	r0, [r4, #0]
    26b4:	f003 faee 	bl	5c94 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
        write_length_ += len;
    26b8:	2204      	movs	r2, #4
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    26ba:	4603      	mov	r3, r0
    26bc:	4620      	mov	r0, r4
    26be:	eb0d 0102 	add.w	r1, sp, r2
    26c2:	2b00      	cmp	r3, #0
    26c4:	d0d5      	beq.n	2672 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x32>
    { if (write_get_length_) 
    26c6:	f896 7428 	ldrb.w	r7, [r6, #1064]	; 0x428
    26ca:	9301      	str	r3, [sp, #4]
    26cc:	b15f      	cbz	r7, 26e6 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0xa6>
        write_length_ += len;
    26ce:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    26d2:	3304      	adds	r3, #4
    26d4:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    26d8:	e7ea      	b.n	26b0 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x70>
    26da:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    26de:	3304      	adds	r3, #4
    26e0:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    26e4:	e7df      	b.n	26a6 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x66>
    26e6:	f7ff fc11 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    26ea:	e7e1      	b.n	26b0 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x70>

000026ec <MTPD::GetObjectInfo(unsigned long)>:
  {
    26ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26f0:	b0ea      	sub	sp, #424	; 0x1a8
    26f2:	4605      	mov	r5, r0
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    26f4:	f10d 0416 	add.w	r4, sp, #22
    26f8:	af1a      	add	r7, sp, #104	; 0x68
    26fa:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    26fe:	f10d 0918 	add.w	r9, sp, #24
    2702:	9401      	str	r4, [sp, #4]
    2704:	ab08      	add	r3, sp, #32
    2706:	9703      	str	r7, [sp, #12]
    2708:	aa2a      	add	r2, sp, #168	; 0xa8
    270a:	f8cd 8008 	str.w	r8, [sp, #8]
    { if (write_get_length_) 
    270e:	f505 5480 	add.w	r4, r5, #4096	; 0x1000
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    2712:	f8cd 9000 	str.w	r9, [sp]
    2716:	6800      	ldr	r0, [r0, #0]
    2718:	f003 faea 	bl	5cf0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>
    uint32_t storage = Store2Storage(store);
    271c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    { if (write_get_length_) 
    2720:	f894 a428 	ldrb.w	sl, [r4, #1064]	; 0x428
    uint32_t storage = Store2Storage(store);
    2724:	3301      	adds	r3, #1
    2726:	9307      	str	r3, [sp, #28]
    { if (write_get_length_) 
    2728:	f1ba 0f00 	cmp.w	sl, #0
    272c:	d074      	beq.n	2818 <MTPD::GetObjectInfo(unsigned long)+0x12c>
        write_length_ += len;
    272e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2732:	3304      	adds	r3, #4
    2734:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2738:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    273c:	3302      	adds	r3, #2
    273e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2742:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2746:	3302      	adds	r3, #2
    2748:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    274c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2750:	3304      	adds	r3, #4
    2752:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2756:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    275a:	3302      	adds	r3, #2
    275c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2760:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2764:	3304      	adds	r3, #4
    2766:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    276a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    276e:	3304      	adds	r3, #4
    2770:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2774:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2778:	3304      	adds	r3, #4
    277a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    277e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2782:	3304      	adds	r3, #4
    2784:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2788:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    278c:	3304      	adds	r3, #4
    278e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2792:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2796:	3304      	adds	r3, #4
    2798:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    279c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    27a0:	3304      	adds	r3, #4
    27a2:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    27a6:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    27aa:	3302      	adds	r3, #2
    27ac:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    27b0:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    27b4:	3304      	adds	r3, #4
    27b6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    27ba:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    27be:	3304      	adds	r3, #4
    27c0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    if (*str) 
    27c4:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
    27c8:	2b00      	cmp	r3, #0
    27ca:	f000 80e0 	beq.w	298e <MTPD::GetObjectInfo(unsigned long)+0x2a2>
    27ce:	a92a      	add	r1, sp, #168	; 0xa8
    27d0:	4628      	mov	r0, r5
    27d2:	f7ff fbd9 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    27d6:	f898 3000 	ldrb.w	r3, [r8]
    27da:	2b00      	cmp	r3, #0
    27dc:	f000 80e6 	beq.w	29ac <MTPD::GetObjectInfo(unsigned long)+0x2c0>
    27e0:	4641      	mov	r1, r8
    27e2:	4628      	mov	r0, r5
    27e4:	f7ff fbd0 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    27e8:	783b      	ldrb	r3, [r7, #0]
    27ea:	2b00      	cmp	r3, #0
    27ec:	f000 80ec 	beq.w	29c8 <MTPD::GetObjectInfo(unsigned long)+0x2dc>
    27f0:	4639      	mov	r1, r7
    27f2:	4628      	mov	r0, r5
    27f4:	f7ff fbc8 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    27f8:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    { write8(0);
    27fc:	2200      	movs	r2, #0
    27fe:	f88d 201c 	strb.w	r2, [sp, #28]
    { if (write_get_length_) 
    2802:	2b00      	cmp	r3, #0
    2804:	f040 80ea 	bne.w	29dc <MTPD::GetObjectInfo(unsigned long)+0x2f0>
    2808:	2201      	movs	r2, #1
    280a:	a907      	add	r1, sp, #28
    280c:	4628      	mov	r0, r5
    280e:	f7ff fb7d 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
  }
    2812:	b06a      	add	sp, #424	; 0x1a8
    2814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2818:	2204      	movs	r2, #4
    281a:	a907      	add	r1, sp, #28
    281c:	4628      	mov	r0, r5
    281e:	f7ff fb75 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    2822:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2826:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    282a:	4553      	cmp	r3, sl
    282c:	bf08      	it	eq
    282e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    2832:	bf08      	it	eq
    2834:	f243 0a01 	movweq	sl, #12289	; 0x3001
    2838:	f8ad a01c 	strh.w	sl, [sp, #28]
    { if (write_get_length_) 
    283c:	2e00      	cmp	r6, #0
    283e:	f47f af7b 	bne.w	2738 <MTPD::GetObjectInfo(unsigned long)+0x4c>
    2842:	2202      	movs	r2, #2
    2844:	a907      	add	r1, sp, #28
    2846:	4628      	mov	r0, r5
    2848:	f7ff fb60 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    284c:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2850:	f8ad 601c 	strh.w	r6, [sp, #28]
    2854:	2b00      	cmp	r3, #0
    2856:	f47f af74 	bne.w	2742 <MTPD::GetObjectInfo(unsigned long)+0x56>
    285a:	2202      	movs	r2, #2
    285c:	a907      	add	r1, sp, #28
    285e:	4628      	mov	r0, r5
    2860:	f7ff fb54 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    write32(size&0xffffffff); // size
    2864:	9b08      	ldr	r3, [sp, #32]
    2866:	9307      	str	r3, [sp, #28]
    { if (write_get_length_) 
    2868:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    286c:	2b00      	cmp	r3, #0
    286e:	f47f af6d 	bne.w	274c <MTPD::GetObjectInfo(unsigned long)+0x60>
    2872:	2204      	movs	r2, #4
    2874:	a907      	add	r1, sp, #28
    2876:	4628      	mov	r0, r5
    2878:	f7ff fb48 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    287c:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2880:	f8ad 601c 	strh.w	r6, [sp, #28]
    2884:	2b00      	cmp	r3, #0
    2886:	f47f af66 	bne.w	2756 <MTPD::GetObjectInfo(unsigned long)+0x6a>
    288a:	2202      	movs	r2, #2
    288c:	a907      	add	r1, sp, #28
    288e:	4628      	mov	r0, r5
    2890:	f7ff fb3c 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2894:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2898:	9607      	str	r6, [sp, #28]
    289a:	2b00      	cmp	r3, #0
    289c:	f47f af60 	bne.w	2760 <MTPD::GetObjectInfo(unsigned long)+0x74>
    28a0:	2204      	movs	r2, #4
    28a2:	a907      	add	r1, sp, #28
    28a4:	4628      	mov	r0, r5
    28a6:	f7ff fb31 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    28aa:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    28ae:	9607      	str	r6, [sp, #28]
    28b0:	2b00      	cmp	r3, #0
    28b2:	f47f af5a 	bne.w	276a <MTPD::GetObjectInfo(unsigned long)+0x7e>
    28b6:	2204      	movs	r2, #4
    28b8:	a907      	add	r1, sp, #28
    28ba:	4628      	mov	r0, r5
    28bc:	f7ff fb26 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    28c0:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    28c4:	9607      	str	r6, [sp, #28]
    28c6:	2b00      	cmp	r3, #0
    28c8:	f47f af54 	bne.w	2774 <MTPD::GetObjectInfo(unsigned long)+0x88>
    28cc:	2204      	movs	r2, #4
    28ce:	a907      	add	r1, sp, #28
    28d0:	4628      	mov	r0, r5
    28d2:	f7ff fb1b 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    28d6:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    28da:	9607      	str	r6, [sp, #28]
    28dc:	2b00      	cmp	r3, #0
    28de:	f47f af4e 	bne.w	277e <MTPD::GetObjectInfo(unsigned long)+0x92>
    28e2:	2204      	movs	r2, #4
    28e4:	a907      	add	r1, sp, #28
    28e6:	4628      	mov	r0, r5
    28e8:	f7ff fb10 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    28ec:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    28f0:	9607      	str	r6, [sp, #28]
    28f2:	2b00      	cmp	r3, #0
    28f4:	f47f af48 	bne.w	2788 <MTPD::GetObjectInfo(unsigned long)+0x9c>
    28f8:	2204      	movs	r2, #4
    28fa:	a907      	add	r1, sp, #28
    28fc:	4628      	mov	r0, r5
    28fe:	f7ff fb05 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2902:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2906:	9607      	str	r6, [sp, #28]
    2908:	2b00      	cmp	r3, #0
    290a:	f47f af42 	bne.w	2792 <MTPD::GetObjectInfo(unsigned long)+0xa6>
    290e:	2204      	movs	r2, #4
    2910:	a907      	add	r1, sp, #28
    2912:	4628      	mov	r0, r5
    2914:	f7ff fafa 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2918:	f8d9 3000 	ldr.w	r3, [r9]
    291c:	9307      	str	r3, [sp, #28]
    291e:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2922:	2b00      	cmp	r3, #0
    2924:	f47f af3a 	bne.w	279c <MTPD::GetObjectInfo(unsigned long)+0xb0>
    2928:	2204      	movs	r2, #4
    292a:	a907      	add	r1, sp, #28
    292c:	4628      	mov	r0, r5
    292e:	f7ff faed 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2932:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    2936:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    293a:	3301      	adds	r3, #1
    293c:	4313      	orrs	r3, r2
    293e:	bf0c      	ite	eq
    2940:	2301      	moveq	r3, #1
    2942:	2300      	movne	r3, #0
    2944:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    2948:	2e00      	cmp	r6, #0
    294a:	f47f af2c 	bne.w	27a6 <MTPD::GetObjectInfo(unsigned long)+0xba>
    294e:	2202      	movs	r2, #2
    2950:	a907      	add	r1, sp, #28
    2952:	4628      	mov	r0, r5
    2954:	f7ff fada 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2958:	9607      	str	r6, [sp, #28]
    295a:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    295e:	2e00      	cmp	r6, #0
    2960:	f47f af26 	bne.w	27b0 <MTPD::GetObjectInfo(unsigned long)+0xc4>
    2964:	2204      	movs	r2, #4
    2966:	a907      	add	r1, sp, #28
    2968:	4628      	mov	r0, r5
    296a:	f7ff facf 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    296e:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2972:	9607      	str	r6, [sp, #28]
    2974:	2b00      	cmp	r3, #0
    2976:	f47f af20 	bne.w	27ba <MTPD::GetObjectInfo(unsigned long)+0xce>
    297a:	2204      	movs	r2, #4
    297c:	a907      	add	r1, sp, #28
    297e:	4628      	mov	r0, r5
    2980:	f7ff fac4 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    if (*str) 
    2984:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
    2988:	2b00      	cmp	r3, #0
    298a:	f47f af20 	bne.w	27ce <MTPD::GetObjectInfo(unsigned long)+0xe2>
    { write8(0);
    298e:	f88d 301c 	strb.w	r3, [sp, #28]
    { if (write_get_length_) 
    2992:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2996:	b34b      	cbz	r3, 29ec <MTPD::GetObjectInfo(unsigned long)+0x300>
        write_length_ += len;
    2998:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    299c:	3301      	adds	r3, #1
    299e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    if (*str) 
    29a2:	f898 3000 	ldrb.w	r3, [r8]
    29a6:	2b00      	cmp	r3, #0
    29a8:	f47f af1a 	bne.w	27e0 <MTPD::GetObjectInfo(unsigned long)+0xf4>
    { write8(0);
    29ac:	f88d 301c 	strb.w	r3, [sp, #28]
    { if (write_get_length_) 
    29b0:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    29b4:	b303      	cbz	r3, 29f8 <MTPD::GetObjectInfo(unsigned long)+0x30c>
        write_length_ += len;
    29b6:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    29ba:	3301      	adds	r3, #1
    29bc:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    if (*str) 
    29c0:	783b      	ldrb	r3, [r7, #0]
    29c2:	2b00      	cmp	r3, #0
    29c4:	f47f af14 	bne.w	27f0 <MTPD::GetObjectInfo(unsigned long)+0x104>
    { if (write_get_length_) 
    29c8:	f894 2428 	ldrb.w	r2, [r4, #1064]	; 0x428
    29cc:	f88d 301c 	strb.w	r3, [sp, #28]
    29d0:	b1c2      	cbz	r2, 2a04 <MTPD::GetObjectInfo(unsigned long)+0x318>
        write_length_ += len;
    29d2:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    29d6:	3301      	adds	r3, #1
    29d8:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    29dc:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    29e0:	3301      	adds	r3, #1
    29e2:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
  }
    29e6:	b06a      	add	sp, #424	; 0x1a8
    29e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    29ec:	2201      	movs	r2, #1
    29ee:	a907      	add	r1, sp, #28
    29f0:	4628      	mov	r0, r5
    29f2:	f7ff fa8b 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    29f6:	e6ee      	b.n	27d6 <MTPD::GetObjectInfo(unsigned long)+0xea>
    29f8:	2201      	movs	r2, #1
    29fa:	a907      	add	r1, sp, #28
    29fc:	4628      	mov	r0, r5
    29fe:	f7ff fa85 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2a02:	e6f1      	b.n	27e8 <MTPD::GetObjectInfo(unsigned long)+0xfc>
    2a04:	2201      	movs	r2, #1
    2a06:	a907      	add	r1, sp, #28
    2a08:	4628      	mov	r0, r5
    2a0a:	f7ff fa7f 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    2a0e:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2a12:	e6f3      	b.n	27fc <MTPD::GetObjectInfo(unsigned long)+0x110>

00002a14 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    2a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      write32(propertyListNum);
    2a18:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2a98 <MTPD::getObjectPropsSupported(unsigned long)+0x84>
    { if (write_get_length_) 
    2a1c:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
    {
    2a20:	b082      	sub	sp, #8
    2a22:	4607      	mov	r7, r0
      write32(propertyListNum);
    2a24:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    2a28:	f895 2428 	ldrb.w	r2, [r5, #1064]	; 0x428
    2a2c:	9301      	str	r3, [sp, #4]
    2a2e:	b34a      	cbz	r2, 2a84 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
        write_length_ += len;
    2a30:	f8d5 242c 	ldr.w	r2, [r5, #1068]	; 0x42c
    2a34:	3204      	adds	r2, #4
    2a36:	f8c5 242c 	str.w	r2, [r5, #1068]	; 0x42c
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2a3a:	b303      	cbz	r3, 2a7e <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    2a3c:	4e15      	ldr	r6, [pc, #84]	; (2a94 <MTPD::getObjectPropsSupported(unsigned long)+0x80>)
    2a3e:	f64d 4c01 	movw	ip, #56321	; 0xdc01
    2a42:	2400      	movs	r4, #0
    2a44:	e00b      	b.n	2a5e <MTPD::getObjectPropsSupported(unsigned long)+0x4a>
        write_length_ += len;
    2a46:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2a4a:	3401      	adds	r4, #1
        write_length_ += len;
    2a4c:	4413      	add	r3, r2
    2a4e:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2a52:	f8d8 3000 	ldr.w	r3, [r8]
    2a56:	42a3      	cmp	r3, r4
    2a58:	d911      	bls.n	2a7e <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    2a5a:	f836 cf02 	ldrh.w	ip, [r6, #2]!
    { if (write_get_length_) 
    2a5e:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
    2a62:	2202      	movs	r2, #2
    2a64:	a901      	add	r1, sp, #4
    2a66:	4638      	mov	r0, r7
    2a68:	f8ad c004 	strh.w	ip, [sp, #4]
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d1ea      	bne.n	2a46 <MTPD::getObjectPropsSupported(unsigned long)+0x32>
    2a70:	f7ff fa4c 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2a74:	3401      	adds	r4, #1
    2a76:	f8d8 3000 	ldr.w	r3, [r8]
    2a7a:	42a3      	cmp	r3, r4
    2a7c:	d8ed      	bhi.n	2a5a <MTPD::getObjectPropsSupported(unsigned long)+0x46>
    }
    2a7e:	b002      	add	sp, #8
    2a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a84:	2204      	movs	r2, #4
    2a86:	eb0d 0102 	add.w	r1, sp, r2
    2a8a:	f7ff fa3f 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2a8e:	f8d8 3000 	ldr.w	r3, [r8]
    2a92:	e7d2      	b.n	2a3a <MTPD::getObjectPropsSupported(unsigned long)+0x26>
    2a94:	20000934 	.word	0x20000934
    2a98:	20008fd0 	.word	0x20008fd0

00002a9c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    2a9c:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
    2aa0:	440b      	add	r3, r1
    {
    2aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aa4:	b085      	sub	sp, #20
      switch(p1)
    2aa6:	2b43      	cmp	r3, #67	; 0x43
    2aa8:	f200 808e 	bhi.w	2bc8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>
    2aac:	e8df f013 	tbh	[pc, r3, lsl #1]
    2ab0:	010700b9 	.word	0x010700b9
    2ab4:	01610125 	.word	0x01610125
    2ab8:	008c008c 	.word	0x008c008c
    2abc:	0196008e 	.word	0x0196008e
    2ac0:	008c01a2 	.word	0x008c01a2
    2ac4:	008c00d7 	.word	0x008c00d7
    2ac8:	008c008c 	.word	0x008c008c
    2acc:	008c008c 	.word	0x008c008c
    2ad0:	008c008c 	.word	0x008c008c
    2ad4:	008c008c 	.word	0x008c008c
    2ad8:	008c008c 	.word	0x008c008c
    2adc:	008c008c 	.word	0x008c008c
    2ae0:	008c008c 	.word	0x008c008c
    2ae4:	008c008c 	.word	0x008c008c
    2ae8:	008c008c 	.word	0x008c008c
    2aec:	008c008c 	.word	0x008c008c
    2af0:	008c008c 	.word	0x008c008c
    2af4:	008c008c 	.word	0x008c008c
    2af8:	008c008c 	.word	0x008c008c
    2afc:	008c008c 	.word	0x008c008c
    2b00:	008c008c 	.word	0x008c008c
    2b04:	008c008c 	.word	0x008c008c
    2b08:	008c008c 	.word	0x008c008c
    2b0c:	008c008c 	.word	0x008c008c
    2b10:	008c008c 	.word	0x008c008c
    2b14:	008c008c 	.word	0x008c008c
    2b18:	008c008c 	.word	0x008c008c
    2b1c:	008c008c 	.word	0x008c008c
    2b20:	008c008c 	.word	0x008c008c
    2b24:	008c008c 	.word	0x008c008c
    2b28:	008c008c 	.word	0x008c008c
    2b2c:	008c008c 	.word	0x008c008c
    2b30:	008c01ae 	.word	0x008c01ae
    2b34:	0044008c 	.word	0x0044008c
    { if (write_get_length_) 
    2b38:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2b3c:	f64d 4244 	movw	r2, #56388	; 0xdc44
    2b40:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2b44:	f8ad 2008 	strh.w	r2, [sp, #8]
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d14a      	bne.n	2be2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2b4c:	2202      	movs	r2, #2
    2b4e:	a902      	add	r1, sp, #8
    2b50:	9001      	str	r0, [sp, #4]
    2b52:	f7ff f9db 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2b5a:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2b5e:	9801      	ldr	r0, [sp, #4]
    2b60:	f8ad 3008 	strh.w	r3, [sp, #8]
    2b64:	2e00      	cmp	r6, #0
    2b66:	d141      	bne.n	2bec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    2b68:	2202      	movs	r2, #2
    2b6a:	a902      	add	r1, sp, #8
    2b6c:	9001      	str	r0, [sp, #4]
    2b6e:	f7ff f9cd 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2b72:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    2b76:	9801      	ldr	r0, [sp, #4]
    2b78:	f88d 6008 	strb.w	r6, [sp, #8]
    2b7c:	2d00      	cmp	r5, #0
    2b7e:	d13a      	bne.n	2bf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    2b80:	2201      	movs	r2, #1
    2b82:	a902      	add	r1, sp, #8
    2b84:	9001      	str	r0, [sp, #4]
    2b86:	f7ff f9c1 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2b8a:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2b8e:	9801      	ldr	r0, [sp, #4]
    2b90:	f88d 5008 	strb.w	r5, [sp, #8]
    2b94:	bba6      	cbnz	r6, 2c00 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    2b96:	2201      	movs	r2, #1
    2b98:	a902      	add	r1, sp, #8
    2b9a:	9001      	str	r0, [sp, #4]
    2b9c:	f7ff f9b6 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2ba0:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    2ba4:	9801      	ldr	r0, [sp, #4]
    2ba6:	9602      	str	r6, [sp, #8]
    2ba8:	bb7d      	cbnz	r5, 2c0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2baa:	2204      	movs	r2, #4
    2bac:	a902      	add	r1, sp, #8
    2bae:	9001      	str	r0, [sp, #4]
    2bb0:	f7ff f9ac 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2bb4:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2bb8:	9801      	ldr	r0, [sp, #4]
    2bba:	f88d 5008 	strb.w	r5, [sp, #8]
    2bbe:	bb4b      	cbnz	r3, 2c14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
    2bc0:	2201      	movs	r2, #1
    2bc2:	a902      	add	r1, sp, #8
    2bc4:	f7ff f9a2 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    }
    2bc8:	b005      	add	sp, #20
    2bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    2bcc:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2bd0:	f64d 4207 	movw	r2, #56327	; 0xdc07
    2bd4:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2bd8:	f8ad 2008 	strh.w	r2, [sp, #8]
    2bdc:	2b00      	cmp	r3, #0
    2bde:	f000 8170 	beq.w	2ec2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x426>
        write_length_ += len;
    2be2:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2be6:	3302      	adds	r3, #2
    2be8:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2bec:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2bf0:	3302      	adds	r3, #2
    2bf2:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2bf6:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2bfa:	3301      	adds	r3, #1
    2bfc:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2c00:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2c04:	3301      	adds	r3, #1
    2c06:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2c0a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2c0e:	3304      	adds	r3, #4
    2c10:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2c14:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2c18:	3301      	adds	r3, #1
    2c1a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    }
    2c1e:	b005      	add	sp, #20
    2c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    2c22:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2c26:	f64d 4201 	movw	r2, #56321	; 0xdc01
    2c2a:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2c2e:	f8ad 2008 	strh.w	r2, [sp, #8]
    2c32:	b1f3      	cbz	r3, 2c72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d6>
        write_length_ += len;
    2c34:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2c38:	3302      	adds	r3, #2
    2c3a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2c3e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2c42:	3302      	adds	r3, #2
    2c44:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2c48:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2c4c:	3301      	adds	r3, #1
    2c4e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2c52:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2c56:	3304      	adds	r3, #4
    2c58:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    { if (write_get_length_) 
    2c5c:	e7d5      	b.n	2c0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2c5e:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2c62:	f64d 420b 	movw	r2, #56331	; 0xdc0b
    2c66:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2c6a:	f8ad 2008 	strh.w	r2, [sp, #8]
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d1e0      	bne.n	2c34 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x198>
    2c72:	2202      	movs	r2, #2
    2c74:	a902      	add	r1, sp, #8
    2c76:	9001      	str	r0, [sp, #4]
    2c78:	f7ff f948 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2c7c:	2306      	movs	r3, #6
    2c7e:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2c82:	9801      	ldr	r0, [sp, #4]
    2c84:	f8ad 3008 	strh.w	r3, [sp, #8]
    2c88:	2e00      	cmp	r6, #0
    2c8a:	d1d8      	bne.n	2c3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a2>
    2c8c:	2202      	movs	r2, #2
    2c8e:	a902      	add	r1, sp, #8
    2c90:	9001      	str	r0, [sp, #4]
    2c92:	f7ff f93b 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2c96:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    2c9a:	9801      	ldr	r0, [sp, #4]
    2c9c:	f88d 6008 	strb.w	r6, [sp, #8]
    2ca0:	2d00      	cmp	r5, #0
    2ca2:	d1d1      	bne.n	2c48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ac>
    2ca4:	2201      	movs	r2, #1
    2ca6:	a902      	add	r1, sp, #8
    2ca8:	9001      	str	r0, [sp, #4]
    2caa:	f7ff f92f 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2cae:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2cb2:	9801      	ldr	r0, [sp, #4]
    2cb4:	9502      	str	r5, [sp, #8]
    2cb6:	2e00      	cmp	r6, #0
    2cb8:	d1cb      	bne.n	2c52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b6>
    2cba:	2204      	movs	r2, #4
    2cbc:	e76c      	b.n	2b98 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    2cbe:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2cc2:	f64d 4202 	movw	r2, #56322	; 0xdc02
    2cc6:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2cca:	f8ad 2008 	strh.w	r2, [sp, #8]
    2cce:	b1f3      	cbz	r3, 2d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x272>
        write_length_ += len;
    2cd0:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2cd4:	3302      	adds	r3, #2
    2cd6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2cda:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2cde:	3302      	adds	r3, #2
    2ce0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2ce4:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2ce8:	3301      	adds	r3, #1
    2cea:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2cee:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2cf2:	3302      	adds	r3, #2
    2cf4:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    { if (write_get_length_) 
    2cf8:	e787      	b.n	2c0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2cfa:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2cfe:	f64d 4203 	movw	r2, #56323	; 0xdc03
    2d02:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2d06:	f8ad 2008 	strh.w	r2, [sp, #8]
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	d1e0      	bne.n	2cd0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x234>
    2d0e:	2202      	movs	r2, #2
    2d10:	a902      	add	r1, sp, #8
    2d12:	9001      	str	r0, [sp, #4]
    2d14:	2604      	movs	r6, #4
    2d16:	f7ff f8f9 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2d1a:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    2d1e:	9801      	ldr	r0, [sp, #4]
    2d20:	f8ad 6008 	strh.w	r6, [sp, #8]
    2d24:	2d00      	cmp	r5, #0
    2d26:	d1d8      	bne.n	2cda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x23e>
    2d28:	2202      	movs	r2, #2
    2d2a:	a902      	add	r1, sp, #8
    2d2c:	9001      	str	r0, [sp, #4]
    2d2e:	f7ff f8ed 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2d32:	f88d 5008 	strb.w	r5, [sp, #8]
    2d36:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    2d3a:	9801      	ldr	r0, [sp, #4]
    2d3c:	2d00      	cmp	r5, #0
    2d3e:	d1d1      	bne.n	2ce4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x248>
    2d40:	2201      	movs	r2, #1
    2d42:	a902      	add	r1, sp, #8
    2d44:	9001      	str	r0, [sp, #4]
    2d46:	f7ff f8e1 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2d4a:	f8ad 5008 	strh.w	r5, [sp, #8]
    2d4e:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    2d52:	9801      	ldr	r0, [sp, #4]
    2d54:	2d00      	cmp	r5, #0
    2d56:	d1ca      	bne.n	2cee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x252>
    2d58:	2202      	movs	r2, #2
    2d5a:	a902      	add	r1, sp, #8
    2d5c:	9001      	str	r0, [sp, #4]
    2d5e:	f7ff f8d5 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2d62:	9502      	str	r5, [sp, #8]
    2d64:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    2d68:	9801      	ldr	r0, [sp, #4]
    2d6a:	2d00      	cmp	r5, #0
    2d6c:	f43f af1d 	beq.w	2baa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10e>
    2d70:	e74b      	b.n	2c0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2d72:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2d76:	f64d 4204 	movw	r2, #56324	; 0xdc04
    2d7a:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2d7e:	f8ad 2008 	strh.w	r2, [sp, #8]
    2d82:	2b00      	cmp	r3, #0
    2d84:	f040 80e1 	bne.w	2f4a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4ae>
    2d88:	2202      	movs	r2, #2
    2d8a:	a902      	add	r1, sp, #8
    2d8c:	9001      	str	r0, [sp, #4]
    2d8e:	2508      	movs	r5, #8
    2d90:	f7ff f8bc 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2d94:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2d98:	9801      	ldr	r0, [sp, #4]
    2d9a:	f8ad 5008 	strh.w	r5, [sp, #8]
    2d9e:	2e00      	cmp	r6, #0
    2da0:	f040 80d8 	bne.w	2f54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4b8>
    2da4:	2202      	movs	r2, #2
    2da6:	a902      	add	r1, sp, #8
    2da8:	9001      	str	r0, [sp, #4]
    2daa:	f7ff f8af 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2dae:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2db2:	9801      	ldr	r0, [sp, #4]
    2db4:	f88d 6008 	strb.w	r6, [sp, #8]
    2db8:	2b00      	cmp	r3, #0
    2dba:	f040 80d0 	bne.w	2f5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4c2>
    2dbe:	2201      	movs	r2, #1
    2dc0:	a902      	add	r1, sp, #8
    2dc2:	9001      	str	r0, [sp, #4]
    2dc4:	f7ff f8a2 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2dc8:	2200      	movs	r2, #0
    2dca:	2300      	movs	r3, #0
    2dcc:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2dd0:	9801      	ldr	r0, [sp, #4]
    2dd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2dd6:	bbb6      	cbnz	r6, 2e46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2dd8:	462a      	mov	r2, r5
    2dda:	e6dd      	b.n	2b98 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    2ddc:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2de0:	f64d 4208 	movw	r2, #56328	; 0xdc08
    2de4:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2de8:	f8ad 2008 	strh.w	r2, [sp, #8]
    2dec:	2b00      	cmp	r3, #0
    2dee:	f43f aead 	beq.w	2b4c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    2df2:	e6f6      	b.n	2be2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2df4:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2df8:	f64d 4209 	movw	r2, #56329	; 0xdc09
    2dfc:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2e00:	f8ad 2008 	strh.w	r2, [sp, #8]
    2e04:	2b00      	cmp	r3, #0
    2e06:	f43f aea1 	beq.w	2b4c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    2e0a:	e6ea      	b.n	2be2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2e0c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    2e10:	f64d 4241 	movw	r2, #56385	; 0xdc41
    2e14:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2e18:	f8ad 2008 	strh.w	r2, [sp, #8]
    2e1c:	b1cb      	cbz	r3, 2e52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3b6>
        write_length_ += len;
    2e1e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2e22:	3302      	adds	r3, #2
    2e24:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2e28:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2e2c:	3302      	adds	r3, #2
    2e2e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2e32:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2e36:	3301      	adds	r3, #1
    2e38:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2e3c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2e40:	3308      	adds	r3, #8
    2e42:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2e46:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2e4a:	3308      	adds	r3, #8
    2e4c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    { if (write_get_length_) 
    2e50:	e6db      	b.n	2c0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2e52:	2202      	movs	r2, #2
    2e54:	a902      	add	r1, sp, #8
    2e56:	9001      	str	r0, [sp, #4]
    2e58:	f7ff f858 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2e5c:	230a      	movs	r3, #10
    2e5e:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
    2e62:	9801      	ldr	r0, [sp, #4]
    2e64:	f8ad 3008 	strh.w	r3, [sp, #8]
    2e68:	2d00      	cmp	r5, #0
    2e6a:	d1dd      	bne.n	2e28 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x38c>
    2e6c:	2202      	movs	r2, #2
    2e6e:	a902      	add	r1, sp, #8
    2e70:	9001      	str	r0, [sp, #4]
    2e72:	f7ff f84b 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2e76:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2e7a:	9801      	ldr	r0, [sp, #4]
    2e7c:	f88d 5008 	strb.w	r5, [sp, #8]
    2e80:	2b00      	cmp	r3, #0
    2e82:	d1d6      	bne.n	2e32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x396>
    2e84:	2201      	movs	r2, #1
    2e86:	a902      	add	r1, sp, #8
    2e88:	9001      	str	r0, [sp, #4]
    2e8a:	2600      	movs	r6, #0
    2e8c:	f7ff f83e 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2e90:	2700      	movs	r7, #0
    2e92:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2e96:	9801      	ldr	r0, [sp, #4]
    2e98:	e9cd 6702 	strd	r6, r7, [sp, #8]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d1cd      	bne.n	2e3c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>
    2ea0:	2208      	movs	r2, #8
    2ea2:	9001      	str	r0, [sp, #4]
    2ea4:	eb0d 0102 	add.w	r1, sp, r2
    2ea8:	f7ff f830 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2eac:	9801      	ldr	r0, [sp, #4]
    2eae:	e9cd 6702 	strd	r6, r7, [sp, #8]
    2eb2:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2eb6:	2e00      	cmp	r6, #0
    2eb8:	d1c5      	bne.n	2e46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2eba:	2208      	movs	r2, #8
    2ebc:	eb0d 0102 	add.w	r1, sp, r2
    2ec0:	e66b      	b.n	2b9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfe>
    2ec2:	2202      	movs	r2, #2
    2ec4:	a902      	add	r1, sp, #8
    2ec6:	9001      	str	r0, [sp, #4]
    2ec8:	f7ff f820 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2ed0:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2ed4:	9801      	ldr	r0, [sp, #4]
    2ed6:	f8ad 2008 	strh.w	r2, [sp, #8]
    2eda:	2b00      	cmp	r3, #0
    2edc:	f47f ae86 	bne.w	2bec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    2ee0:	2202      	movs	r2, #2
    2ee2:	a902      	add	r1, sp, #8
    2ee4:	9001      	str	r0, [sp, #4]
    2ee6:	2501      	movs	r5, #1
    2ee8:	f7ff f810 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2eec:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2ef0:	9801      	ldr	r0, [sp, #4]
    2ef2:	f88d 5008 	strb.w	r5, [sp, #8]
    2ef6:	2e00      	cmp	r6, #0
    2ef8:	f47f ae7d 	bne.w	2bf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    2efc:	462a      	mov	r2, r5
    2efe:	a902      	add	r1, sp, #8
    2f00:	9001      	str	r0, [sp, #4]
    2f02:	f7ff f803 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2f06:	f88d 6008 	strb.w	r6, [sp, #8]
    2f0a:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2f0e:	9801      	ldr	r0, [sp, #4]
    2f10:	2e00      	cmp	r6, #0
    2f12:	f47f ae75 	bne.w	2c00 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    2f16:	462a      	mov	r2, r5
    2f18:	a902      	add	r1, sp, #8
    2f1a:	9001      	str	r0, [sp, #4]
    2f1c:	f7fe fff6 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2f20:	9602      	str	r6, [sp, #8]
    2f22:	f894 6428 	ldrb.w	r6, [r4, #1064]	; 0x428
    2f26:	9801      	ldr	r0, [sp, #4]
    2f28:	2e00      	cmp	r6, #0
    2f2a:	f47f ae6e 	bne.w	2c0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2f2e:	2204      	movs	r2, #4
    2f30:	a902      	add	r1, sp, #8
    2f32:	9001      	str	r0, [sp, #4]
    2f34:	f7fe ffea 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    2f38:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    2f3c:	9801      	ldr	r0, [sp, #4]
    2f3e:	f88d 6008 	strb.w	r6, [sp, #8]
    2f42:	2b00      	cmp	r3, #0
    2f44:	f43f ae3c 	beq.w	2bc0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x124>
    2f48:	e664      	b.n	2c14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
        write_length_ += len;
    2f4a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2f4e:	3302      	adds	r3, #2
    2f50:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2f54:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2f58:	3302      	adds	r3, #2
    2f5a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2f5e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    2f62:	3301      	adds	r3, #1
    2f64:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    { if (write_get_length_) 
    2f68:	e76d      	b.n	2e46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2f6a:	bf00      	nop

00002f6c <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    2f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f70:	b0ea      	sub	sp, #424	; 0x1a8
    2f72:	4615      	mov	r5, r2
    2f74:	4604      	mov	r4, r0
    2f76:	460e      	mov	r6, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    2f78:	f10d 0716 	add.w	r7, sp, #22
    2f7c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
    2f80:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
    2f84:	f10d 0818 	add.w	r8, sp, #24
    2f88:	ab08      	add	r3, sp, #32
    2f8a:	aa2a      	add	r2, sp, #168	; 0xa8
    2f8c:	9701      	str	r7, [sp, #4]
    2f8e:	f8cd 900c 	str.w	r9, [sp, #12]
    2f92:	f8cd a008 	str.w	sl, [sp, #8]
    2f96:	f8cd 8000 	str.w	r8, [sp]
    2f9a:	6800      	ldr	r0, [r0, #0]
    2f9c:	f002 fea8 	bl	5cf0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>
      switch(p2)
    2fa0:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
      uint32_t storage = Store2Storage(store);
    2fa4:	883a      	ldrh	r2, [r7, #0]
      switch(p2)
    2fa6:	442b      	add	r3, r5
      dir = size == 0xFFFFFFFFUL;
    2fa8:	9908      	ldr	r1, [sp, #32]
    2faa:	9809      	ldr	r0, [sp, #36]	; 0x24
      uint32_t storage = Store2Storage(store);
    2fac:	1c55      	adds	r5, r2, #1
      switch(p2)
    2fae:	2b43      	cmp	r3, #67	; 0x43
    2fb0:	d851      	bhi.n	3056 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    2fb2:	e8df f003 	tbb	[pc, r3]
    2fb6:	a46e      	.short	0xa46e
    2fb8:	5050bb96 	.word	0x5050bb96
    2fbc:	508d5b53 	.word	0x508d5b53
    2fc0:	5050507b 	.word	0x5050507b
    2fc4:	50505050 	.word	0x50505050
    2fc8:	50505050 	.word	0x50505050
    2fcc:	50505050 	.word	0x50505050
    2fd0:	50505050 	.word	0x50505050
    2fd4:	50505050 	.word	0x50505050
    2fd8:	50505050 	.word	0x50505050
    2fdc:	50505050 	.word	0x50505050
    2fe0:	50505050 	.word	0x50505050
    2fe4:	50505050 	.word	0x50505050
    2fe8:	50505050 	.word	0x50505050
    2fec:	50505050 	.word	0x50505050
    2ff0:	50505050 	.word	0x50505050
    2ff4:	50225050 	.word	0x50225050
    2ff8:	5350      	.short	0x5350
          write32(p1);
    2ffa:	9607      	str	r6, [sp, #28]
    { if (write_get_length_) 
    2ffc:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    3000:	f896 3428 	ldrb.w	r3, [r6, #1064]	; 0x428
    3004:	2b00      	cmp	r3, #0
    3006:	f040 80b4 	bne.w	3172 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x206>
    300a:	2204      	movs	r2, #4
    300c:	a907      	add	r1, sp, #28
    300e:	4620      	mov	r0, r4
    3010:	f7fe ff7c 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    3014:	f8d8 3000 	ldr.w	r3, [r8]
    3018:	9307      	str	r3, [sp, #28]
    301a:	f896 3428 	ldrb.w	r3, [r6, #1064]	; 0x428
    301e:	2b00      	cmp	r3, #0
    3020:	f040 80ac 	bne.w	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x210>
    3024:	2204      	movs	r2, #4
    3026:	a907      	add	r1, sp, #28
    3028:	4620      	mov	r0, r4
    302a:	f7fe ff6f 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    302e:	f896 7428 	ldrb.w	r7, [r6, #1064]	; 0x428
          write32(storage);
    3032:	9507      	str	r5, [sp, #28]
    { if (write_get_length_) 
    3034:	2f00      	cmp	r7, #0
    3036:	d17f      	bne.n	3138 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1cc>
    3038:	2204      	movs	r2, #4
    303a:	a907      	add	r1, sp, #28
    303c:	4620      	mov	r0, r4
    303e:	f7fe ff65 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    3042:	f896 3428 	ldrb.w	r3, [r6, #1064]	; 0x428
          write32(0);
    3046:	9707      	str	r7, [sp, #28]
    { if (write_get_length_) 
    3048:	2b00      	cmp	r3, #0
    304a:	d17a      	bne.n	3142 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d6>
    304c:	2204      	movs	r2, #4
    304e:	a907      	add	r1, sp, #28
    3050:	4620      	mov	r0, r4
    3052:	f7fe ff5b 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    }
    3056:	b06a      	add	sp, #424	; 0x1a8
    3058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (*str) 
    305c:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
    3060:	b14b      	cbz	r3, 3076 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10a>
    3062:	a92a      	add	r1, sp, #168	; 0xa8
    3064:	4620      	mov	r0, r4
    3066:	f7fe ff8f 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    306a:	e7f4      	b.n	3056 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    306c:	f89a 3000 	ldrb.w	r3, [sl]
    3070:	2b00      	cmp	r3, #0
    3072:	f040 8089 	bne.w	3188 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x21c>
    { if (write_get_length_) 
    3076:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    307a:	f88d 301c 	strb.w	r3, [sp, #28]
    307e:	f892 1428 	ldrb.w	r1, [r2, #1064]	; 0x428
    3082:	2900      	cmp	r1, #0
    3084:	d063      	beq.n	314e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1e2>
        write_length_ += len;
    3086:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    308a:	3301      	adds	r3, #1
    308c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
    3090:	e7e1      	b.n	3056 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    { if (write_get_length_) 
    3092:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    3096:	9507      	str	r5, [sp, #28]
    3098:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
    309c:	2a00      	cmp	r2, #0
    309e:	d0d5      	beq.n	304c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe0>
        write_length_ += len;
    30a0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
    30a4:	3204      	adds	r2, #4
    30a6:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    30aa:	e7d4      	b.n	3056 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
          write32((store==parent)? 0: parent);
    30ac:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    30b0:	f504 5180 	add.w	r1, r4, #4096	; 0x1000
          write32((store==parent)? 0: parent);
    30b4:	429a      	cmp	r2, r3
    30b6:	bf08      	it	eq
    30b8:	2300      	moveq	r3, #0
    { if (write_get_length_) 
    30ba:	f891 2428 	ldrb.w	r2, [r1, #1064]	; 0x428
    30be:	9307      	str	r3, [sp, #28]
    30c0:	2a00      	cmp	r2, #0
    30c2:	d0c3      	beq.n	304c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe0>
        write_length_ += len;
    30c4:	f8d1 342c 	ldr.w	r3, [r1, #1068]	; 0x42c
    30c8:	3304      	adds	r3, #4
    30ca:	f8c1 342c 	str.w	r3, [r1, #1068]	; 0x42c
    30ce:	e7c2      	b.n	3056 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    if (*str) 
    30d0:	f899 3000 	ldrb.w	r3, [r9]
    30d4:	2b00      	cmp	r3, #0
    30d6:	d0ce      	beq.n	3076 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10a>
    30d8:	4649      	mov	r1, r9
    30da:	4620      	mov	r0, r4
    30dc:	f7fe ff54 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    30e0:	e7b9      	b.n	3056 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    { if (write_get_length_) 
    30e2:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    30e6:	2100      	movs	r1, #0
    30e8:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
    30ec:	f8ad 101c 	strh.w	r1, [sp, #28]
    30f0:	b1b2      	cbz	r2, 3120 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b4>
        write_length_ += len;
    30f2:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
    30f6:	3202      	adds	r2, #2
    30f8:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    30fc:	e7ab      	b.n	3056 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
          write16(dir?0x3001:0x3000);
    30fe:	2800      	cmp	r0, #0
    3100:	bf08      	it	eq
    3102:	f1b1 3fff 	cmpeq.w	r1, #4294967295
    { if (write_get_length_) 
    3106:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
          write16(dir?0x3001:0x3000);
    310a:	bf14      	ite	ne
    310c:	f44f 5140 	movne.w	r1, #12288	; 0x3000
    3110:	f243 0101 	movweq	r1, #12289	; 0x3001
    { if (write_get_length_) 
    3114:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
    3118:	f8ad 101c 	strh.w	r1, [sp, #28]
    311c:	2a00      	cmp	r2, #0
    311e:	d1e8      	bne.n	30f2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x186>
    3120:	2202      	movs	r2, #2
    3122:	a907      	add	r1, sp, #28
    3124:	4620      	mov	r0, r4
    3126:	f7fe fef1 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
          break;
    312a:	e794      	b.n	3056 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    { if (write_get_length_) 
    312c:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
          write32(size&0xffffffff);
    3130:	9107      	str	r1, [sp, #28]
    { if (write_get_length_) 
    3132:	f896 5428 	ldrb.w	r5, [r6, #1064]	; 0x428
    3136:	b185      	cbz	r5, 315a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ee>
        write_length_ += len;
    3138:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    313c:	3304      	adds	r3, #4
    313e:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    3142:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    3146:	3304      	adds	r3, #4
    3148:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    314c:	e783      	b.n	3056 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    314e:	2201      	movs	r2, #1
    3150:	a907      	add	r1, sp, #28
    3152:	4620      	mov	r0, r4
    3154:	f7fe feda 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    }
    3158:	e77d      	b.n	3056 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    315a:	2204      	movs	r2, #4
    315c:	a907      	add	r1, sp, #28
    315e:	4620      	mov	r0, r4
    3160:	f7fe fed4 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    3164:	f896 3428 	ldrb.w	r3, [r6, #1064]	; 0x428
          write32(0);
    3168:	9507      	str	r5, [sp, #28]
    { if (write_get_length_) 
    316a:	2b00      	cmp	r3, #0
    316c:	f43f af6e 	beq.w	304c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe0>
    3170:	e7e7      	b.n	3142 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d6>
        write_length_ += len;
    3172:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    3176:	3304      	adds	r3, #4
    3178:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    317c:	f8d6 342c 	ldr.w	r3, [r6, #1068]	; 0x42c
    3180:	3304      	adds	r3, #4
    3182:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    { if (write_get_length_) 
    3186:	e7d7      	b.n	3138 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1cc>
    3188:	4651      	mov	r1, sl
    318a:	4620      	mov	r0, r4
    318c:	f7fe fefc 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
    3190:	e761      	b.n	3056 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    3192:	bf00      	nop

00003194 <MTPD::GetObject(unsigned long)>:
    {
    3194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3198:	ed2d 8b02 	vpush	{d8}
    319c:	b085      	sub	sp, #20
      if (write_get_length_) {
    319e:	f500 5880 	add.w	r8, r0, #4096	; 0x1000
    {
    31a2:	ee08 1a10 	vmov	s16, r1
    31a6:	9003      	str	r0, [sp, #12]
      uint32_t size = storage_->GetSize(object_id);
    31a8:	6800      	ldr	r0, [r0, #0]
    31aa:	f002 fdfb 	bl	5da4 <MTPStorage_SD::GetSize(unsigned long)>
      if (write_get_length_) {
    31ae:	f898 6428 	ldrb.w	r6, [r8, #1064]	; 0x428
      uint32_t size = storage_->GetSize(object_id);
    31b2:	4682      	mov	sl, r0
      if (write_get_length_) {
    31b4:	b14e      	cbz	r6, 31ca <MTPD::GetObject(unsigned long)+0x36>
        write_length_ += size;
    31b6:	f8d8 342c 	ldr.w	r3, [r8, #1068]	; 0x42c
    31ba:	4403      	add	r3, r0
    31bc:	f8c8 342c 	str.w	r3, [r8, #1068]	; 0x42c
    }
    31c0:	b005      	add	sp, #20
    31c2:	ecbd 8b02 	vpop	{d8}
    31c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    31ca:	f44f 5480 	mov.w	r4, #4096	; 0x1000
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    31ce:	9b03      	ldr	r3, [sp, #12]
        disk_pos=DISK_BUFFER_SIZE;
    31d0:	f8c8 4424 	str.w	r4, [r8, #1060]	; 0x424
        while(pos<size)
    31d4:	2800      	cmp	r0, #0
    31d6:	d055      	beq.n	3284 <MTPD::GetObject(unsigned long)+0xf0>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    31d8:	f503 6b84 	add.w	fp, r3, #1056	; 0x420
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    31dc:	f103 0920 	add.w	r9, r3, #32
        uint32_t len = sizeof(MTPHeader);
    31e0:	250c      	movs	r5, #12
    31e2:	e01e      	b.n	3222 <MTPD::GetObject(unsigned long)+0x8e>
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    31e4:	f5c4 5380 	rsb	r3, r4, #4096	; 0x1000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    31e8:	eb0b 0104 	add.w	r1, fp, r4
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    31ec:	429f      	cmp	r7, r3
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    31ee:	f5c5 7200 	rsb	r2, r5, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    31f2:	eb09 0005 	add.w	r0, r9, r5
    31f6:	bf28      	it	cs
    31f8:	461f      	movcs	r7, r3
    31fa:	4297      	cmp	r7, r2
    31fc:	bf28      	it	cs
    31fe:	4617      	movcs	r7, r2
    3200:	463a      	mov	r2, r7
          len += to_copy;
    3202:	443d      	add	r5, r7
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3204:	f00a fd4a 	bl	dc9c <memcpy>
          disk_pos += to_copy;
    3208:	f8d8 3424 	ldr.w	r3, [r8, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    320c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
          pos += to_copy;
    3210:	443e      	add	r6, r7
          disk_pos += to_copy;
    3212:	443b      	add	r3, r7
    3214:	f8c8 3424 	str.w	r3, [r8, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    3218:	d01d      	beq.n	3256 <MTPD::GetObject(unsigned long)+0xc2>
        while(pos<size)
    321a:	45b2      	cmp	sl, r6
    321c:	d927      	bls.n	326e <MTPD::GetObject(unsigned long)+0xda>
          if(disk_pos==DISK_BUFFER_SIZE)
    321e:	f8d8 4424 	ldr.w	r4, [r8, #1060]	; 0x424
    3222:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3226:	ebaa 0706 	sub.w	r7, sl, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    322a:	d1db      	bne.n	31e4 <MTPD::GetObject(unsigned long)+0x50>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    322c:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3230:	465b      	mov	r3, fp
    3232:	4632      	mov	r2, r6
    3234:	ee18 1a10 	vmov	r1, s16
    3238:	bf34      	ite	cc
    323a:	4638      	movcc	r0, r7
    323c:	f44f 5080 	movcs.w	r0, #4096	; 0x1000
    3240:	9000      	str	r0, [sp, #0]
    3242:	9803      	ldr	r0, [sp, #12]
    3244:	6800      	ldr	r0, [r0, #0]
    3246:	f002 fdb9 	bl	5dbc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>
            disk_pos=0;
    324a:	2200      	movs	r2, #0
    324c:	4623      	mov	r3, r4
    324e:	4659      	mov	r1, fp
    3250:	f8c8 2424 	str.w	r2, [r8, #1060]	; 0x424
    3254:	e7ca      	b.n	31ec <MTPD::GetObject(unsigned long)+0x58>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3256:	223c      	movs	r2, #60	; 0x3c
    3258:	f44f 7100 	mov.w	r1, #512	; 0x200
    325c:	4648      	mov	r0, r9
    325e:	f00b ff0b 	bl	f078 <usb_mtp_send>
    3262:	2800      	cmp	r0, #0
    3264:	ddf7      	ble.n	3256 <MTPD::GetObject(unsigned long)+0xc2>
        while(pos<size)
    3266:	45b2      	cmp	sl, r6
            len=0;
    3268:	f04f 0500 	mov.w	r5, #0
        while(pos<size)
    326c:	d8d7      	bhi.n	321e <MTPD::GetObject(unsigned long)+0x8a>
        if(len>0)
    326e:	2d00      	cmp	r5, #0
    3270:	d0a6      	beq.n	31c0 <MTPD::GetObject(unsigned long)+0x2c>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3272:	223c      	movs	r2, #60	; 0x3c
    3274:	f44f 7100 	mov.w	r1, #512	; 0x200
    3278:	4648      	mov	r0, r9
    327a:	f00b fefd 	bl	f078 <usb_mtp_send>
    327e:	2800      	cmp	r0, #0
    3280:	ddf7      	ble.n	3272 <MTPD::GetObject(unsigned long)+0xde>
    3282:	e79d      	b.n	31c0 <MTPD::GetObject(unsigned long)+0x2c>
    3284:	f103 0920 	add.w	r9, r3, #32
    3288:	e7f3      	b.n	3272 <MTPD::GetObject(unsigned long)+0xde>
    328a:	bf00      	nop

0000328c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    {
    328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3290:	ed2d 8b02 	vpush	{d8}
    3294:	b085      	sub	sp, #20
    3296:	461c      	mov	r4, r3
    3298:	4615      	mov	r5, r2
    329a:	ee08 1a10 	vmov	s16, r1
    329e:	9002      	str	r0, [sp, #8]
      uint32_t size = storage_->GetSize(object_id);
    32a0:	6800      	ldr	r0, [r0, #0]
    32a2:	f002 fd7f 	bl	5da4 <MTPStorage_SD::GetSize(unsigned long)>
      if(NumBytes == 0xffffffff) NumBytes=size;
    32a6:	1c63      	adds	r3, r4, #1
      size -= offset;
    32a8:	eba0 0905 	sub.w	r9, r0, r5
      if(NumBytes == 0xffffffff) NumBytes=size;
    32ac:	d002      	beq.n	32b4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x28>
    32ae:	45a1      	cmp	r9, r4
    32b0:	bf28      	it	cs
    32b2:	46a1      	movcs	r9, r4
      if (write_get_length_) {
    32b4:	9b02      	ldr	r3, [sp, #8]
    32b6:	f503 5880 	add.w	r8, r3, #4096	; 0x1000
    32ba:	f898 3428 	ldrb.w	r3, [r8, #1064]	; 0x428
    32be:	9303      	str	r3, [sp, #12]
    32c0:	b153      	cbz	r3, 32d8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x4c>
        write_length_ += size;
    32c2:	f8d8 342c 	ldr.w	r3, [r8, #1068]	; 0x42c
    32c6:	444b      	add	r3, r9
    32c8:	f8c8 342c 	str.w	r3, [r8, #1068]	; 0x42c
    }
    32cc:	4648      	mov	r0, r9
    32ce:	b005      	add	sp, #20
    32d0:	ecbd 8b02 	vpop	{d8}
    32d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    32d8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
        while(pos<size)
    32dc:	454d      	cmp	r5, r9
        disk_pos=DISK_BUFFER_SIZE;
    32de:	f8c8 4424 	str.w	r4, [r8, #1060]	; 0x424
        while(pos<size)
    32e2:	d2f3      	bcs.n	32cc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    32e4:	9b02      	ldr	r3, [sp, #8]
        uint32_t len = sizeof(MTPHeader);
    32e6:	260c      	movs	r6, #12
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    32e8:	f503 6b84 	add.w	fp, r3, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    32ec:	f103 0a20 	add.w	sl, r3, #32
    32f0:	e01e      	b.n	3330 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa4>
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    32f2:	f5c4 5380 	rsb	r3, r4, #4096	; 0x1000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    32f6:	eb0b 0104 	add.w	r1, fp, r4
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    32fa:	429f      	cmp	r7, r3
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    32fc:	f5c6 7200 	rsb	r2, r6, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3300:	eb0a 0006 	add.w	r0, sl, r6
    3304:	bf28      	it	cs
    3306:	461f      	movcs	r7, r3
    3308:	4297      	cmp	r7, r2
    330a:	bf28      	it	cs
    330c:	4617      	movcs	r7, r2
    330e:	463a      	mov	r2, r7
          len += to_copy;
    3310:	443e      	add	r6, r7
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3312:	f00a fcc3 	bl	dc9c <memcpy>
          disk_pos += to_copy;
    3316:	f8d8 3424 	ldr.w	r3, [r8, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    331a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
          pos += to_copy;
    331e:	443d      	add	r5, r7
          disk_pos += to_copy;
    3320:	443b      	add	r3, r7
    3322:	f8c8 3424 	str.w	r3, [r8, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    3326:	d01d      	beq.n	3364 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xd8>
        while(pos<size)
    3328:	45a9      	cmp	r9, r5
    332a:	d9cf      	bls.n	32cc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
          if(disk_pos==DISK_BUFFER_SIZE)
    332c:	f8d8 4424 	ldr.w	r4, [r8, #1060]	; 0x424
    3330:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3334:	eba9 0705 	sub.w	r7, r9, r5
          if(disk_pos==DISK_BUFFER_SIZE)
    3338:	d1db      	bne.n	32f2 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>
    333a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    333e:	465b      	mov	r3, fp
    3340:	462a      	mov	r2, r5
    3342:	ee18 1a10 	vmov	r1, s16
    3346:	bf34      	ite	cc
    3348:	4638      	movcc	r0, r7
    334a:	f44f 5080 	movcs.w	r0, #4096	; 0x1000
    334e:	9000      	str	r0, [sp, #0]
    3350:	9802      	ldr	r0, [sp, #8]
    3352:	6800      	ldr	r0, [r0, #0]
    3354:	f002 fd32 	bl	5dbc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>
            disk_pos=0;
    3358:	9a03      	ldr	r2, [sp, #12]
    335a:	4623      	mov	r3, r4
    335c:	4659      	mov	r1, fp
    335e:	f8c8 2424 	str.w	r2, [r8, #1060]	; 0x424
    3362:	e7ca      	b.n	32fa <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x6e>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3364:	223c      	movs	r2, #60	; 0x3c
    3366:	f44f 7100 	mov.w	r1, #512	; 0x200
    336a:	4650      	mov	r0, sl
    336c:	f00b fe84 	bl	f078 <usb_mtp_send>
    3370:	2800      	cmp	r0, #0
    3372:	ddf7      	ble.n	3364 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xd8>
            len=0;
    3374:	2600      	movs	r6, #0
    3376:	e7d7      	b.n	3328 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x9c>

00003378 <MTPD::read(char*, unsigned long)>:
    {
    3378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      if(!size) 
    337c:	4616      	mov	r6, r2
    337e:	b36a      	cbz	r2, 33dc <MTPD::read(char*, unsigned long)+0x64>
    3380:	460f      	mov	r7, r1
    3382:	f8df 8060 	ldr.w	r8, [pc, #96]	; 33e4 <MTPD::read(char*, unsigned long)+0x6c>
          memcpy(data, rx_data_buffer + index, to_copy);
    3386:	f500 7908 	add.w	r9, r0, #544	; 0x220
          index=0;
    338a:	f04f 0a00 	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    338e:	f8d8 4000 	ldr.w	r4, [r8]
    3392:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    3396:	42b5      	cmp	r5, r6
    3398:	bf28      	it	cs
    339a:	4635      	movcs	r5, r6
        if (data) {
    339c:	b137      	cbz	r7, 33ac <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, rx_data_buffer + index, to_copy);
    339e:	4638      	mov	r0, r7
    33a0:	462a      	mov	r2, r5
    33a2:	eb09 0104 	add.w	r1, r9, r4
          data += to_copy;
    33a6:	442f      	add	r7, r5
          memcpy(data, rx_data_buffer + index, to_copy);
    33a8:	f00a fc78 	bl	dc9c <memcpy>
        index += to_copy;
    33ac:	442c      	add	r4, r5
        size -= to_copy;
    33ae:	1b76      	subs	r6, r6, r5
        if (index == MTP_RX_SIZE) {
    33b0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
        index += to_copy;
    33b4:	f8c8 4000 	str.w	r4, [r8]
        if (index == MTP_RX_SIZE) {
    33b8:	d003      	beq.n	33c2 <MTPD::read(char*, unsigned long)+0x4a>
      while (size) {
    33ba:	2e00      	cmp	r6, #0
    33bc:	d1e7      	bne.n	338e <MTPD::read(char*, unsigned long)+0x16>
    }
    33be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return 1;
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
      while(!usb_mtp_available());
    33c2:	f00b fe41 	bl	f048 <usb_mtp_available>
    33c6:	2800      	cmp	r0, #0
    33c8:	d0fb      	beq.n	33c2 <MTPD::read(char*, unsigned long)+0x4a>
      return usb_mtp_recv(data_buffer,60);
    33ca:	213c      	movs	r1, #60	; 0x3c
    33cc:	4648      	mov	r0, r9
    33ce:	f00b fde9 	bl	efa4 <usb_mtp_recv>
          index=0;
    33d2:	f8c8 a000 	str.w	sl, [r8]
      while (size) {
    33d6:	2e00      	cmp	r6, #0
    33d8:	d1d9      	bne.n	338e <MTPD::read(char*, unsigned long)+0x16>
    33da:	e7f0      	b.n	33be <MTPD::read(char*, unsigned long)+0x46>
        index=0;
    33dc:	4b01      	ldr	r3, [pc, #4]	; (33e4 <MTPD::read(char*, unsigned long)+0x6c>)
    33de:	601a      	str	r2, [r3, #0]
    }
    33e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    33e4:	200347f8 	.word	0x200347f8

000033e8 <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    33e8:	b570      	push	{r4, r5, r6, lr}
    33ea:	b082      	sub	sp, #8
    33ec:	460c      	mov	r4, r1
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    33ee:	2201      	movs	r2, #1
  void MTPD::readstring(char* buffer) {
    33f0:	4606      	mov	r6, r0
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    33f2:	f10d 0106 	add.w	r1, sp, #6
    33f6:	f7ff ffbf 	bl	3378 <MTPD::read(char*, unsigned long)>
    33fa:	f89d 5006 	ldrb.w	r5, [sp, #6]
    if (!buffer) {
    33fe:	b17c      	cbz	r4, 3420 <MTPD::readstring(char*)+0x38>
      for (int i = 0; i < len; i++) {
    3400:	b165      	cbz	r5, 341c <MTPD::readstring(char*)+0x34>
    3402:	4425      	add	r5, r4
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3404:	2202      	movs	r2, #2
    3406:	f10d 0106 	add.w	r1, sp, #6
    340a:	4630      	mov	r0, r6
    340c:	f7ff ffb4 	bl	3378 <MTPD::read(char*, unsigned long)>
    3410:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        *(buffer++) = c2 = read16();
    3414:	f804 3b01 	strb.w	r3, [r4], #1
      for (int i = 0; i < len; i++) {
    3418:	42a5      	cmp	r5, r4
    341a:	d1f3      	bne.n	3404 <MTPD::readstring(char*)+0x1c>
  }
    341c:	b002      	add	sp, #8
    341e:	bd70      	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    3420:	006a      	lsls	r2, r5, #1
    3422:	4621      	mov	r1, r4
    3424:	4630      	mov	r0, r6
  }
    3426:	b002      	add	sp, #8
    3428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    342c:	f7ff bfa4 	b.w	3378 <MTPD::read(char*, unsigned long)>

00003430 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    3430:	b530      	push	{r4, r5, lr}
    3432:	b0c1      	sub	sp, #260	; 0x104
    3434:	4604      	mov	r4, r0
    read((char *)&header, sizeof(MTPHeader));
    3436:	220c      	movs	r2, #12
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    3438:	460d      	mov	r5, r1
    read((char *)&header, sizeof(MTPHeader));
    343a:	4669      	mov	r1, sp
    343c:	f7ff ff9c 	bl	3378 <MTPD::read(char*, unsigned long)>
        readstring(filename);
    3440:	4669      	mov	r1, sp
    3442:	4620      	mov	r0, r4
    3444:	f7ff ffd0 	bl	33e8 <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    3448:	466a      	mov	r2, sp
    344a:	4629      	mov	r1, r5
    344c:	6820      	ldr	r0, [r4, #0]
    344e:	f002 ff4d 	bl	62ec <MTPStorage_SD::rename(unsigned long, char const*)>
    3452:	f242 0201 	movw	r2, #8193	; 0x2001
    3456:	f242 0305 	movw	r3, #8197	; 0x2005
    }
    345a:	2800      	cmp	r0, #0
    345c:	bf14      	ite	ne
    345e:	4610      	movne	r0, r2
    3460:	4618      	moveq	r0, r3
    3462:	b041      	add	sp, #260	; 0x104
    3464:	bd30      	pop	{r4, r5, pc}
    3466:	bf00      	nop

00003468 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    346c:	4605      	mov	r5, r0
    346e:	b0c5      	sub	sp, #276	; 0x114
    3470:	4689      	mov	r9, r1
    3472:	4692      	mov	sl, r2
      pull_packet(rx_data_buffer);
    3474:	f500 7408 	add.w	r4, r0, #544	; 0x220
      while(!usb_mtp_available());
    3478:	f00b fde6 	bl	f048 <usb_mtp_available>
    347c:	2800      	cmp	r0, #0
    347e:	d0fb      	beq.n	3478 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10>
      return usb_mtp_recv(data_buffer,60);
    3480:	213c      	movs	r1, #60	; 0x3c
    3482:	4620      	mov	r0, r4
    3484:	f00b fd8e 	bl	efa4 <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    3488:	ae04      	add	r6, sp, #16
        index=0;
    348a:	4b4b      	ldr	r3, [pc, #300]	; (35b8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x150>)
    348c:	2200      	movs	r2, #0
    read((char *)&header, sizeof(MTPHeader));
    348e:	4628      	mov	r0, r5
    3490:	4631      	mov	r1, r6
        index=0;
    3492:	601a      	str	r2, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    3494:	220c      	movs	r2, #12
    3496:	f7ff ff6f 	bl	3378 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    349a:	88b3      	ldrh	r3, [r6, #4]
      uint32_t store = Storage2Store(storage);
    349c:	f109 39ff 	add.w	r9, r9, #4294967295
    if(header.type==2)
    34a0:	2b02      	cmp	r3, #2
    34a2:	f000 8085 	beq.w	35b0 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x148>
    34a6:	f06f 0833 	mvn.w	r8, #51	; 0x33
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34aa:	2204      	movs	r2, #4
    34ac:	4631      	mov	r1, r6
    34ae:	4628      	mov	r0, r5
    34b0:	f7ff ff62 	bl	3378 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34b4:	2202      	movs	r2, #2
    34b6:	4631      	mov	r1, r6
    34b8:	4628      	mov	r0, r5
    34ba:	f7ff ff5d 	bl	3378 <MTPD::read(char*, unsigned long)>
      bool dir = (read16() == 0x3001); len -=2; // format
    34be:	f243 0301 	movw	r3, #12289	; 0x3001
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34c2:	f8b6 b000 	ldrh.w	fp, [r6]
    34c6:	2202      	movs	r2, #2
    34c8:	4631      	mov	r1, r6
    34ca:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    34cc:	ebab 0b03 	sub.w	fp, fp, r3
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34d0:	f7ff ff52 	bl	3378 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34d4:	2204      	movs	r2, #4
    34d6:	4631      	mov	r1, r6
    34d8:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    34da:	fabb fb8b 	clz	fp, fp
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34de:	f7ff ff4b 	bl	3378 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34e2:	2202      	movs	r2, #2
    34e4:	4631      	mov	r1, r6
    34e6:	4628      	mov	r0, r5
    34e8:	f7ff ff46 	bl	3378 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34ec:	2204      	movs	r2, #4
    34ee:	4631      	mov	r1, r6
    34f0:	4628      	mov	r0, r5
    34f2:	f7ff ff41 	bl	3378 <MTPD::read(char*, unsigned long)>
    34f6:	2204      	movs	r2, #4
    34f8:	4631      	mov	r1, r6
    34fa:	4628      	mov	r0, r5
    34fc:	f7ff ff3c 	bl	3378 <MTPD::read(char*, unsigned long)>
    3500:	2204      	movs	r2, #4
    3502:	4631      	mov	r1, r6
    3504:	4628      	mov	r0, r5
    3506:	f7ff ff37 	bl	3378 <MTPD::read(char*, unsigned long)>
    350a:	2204      	movs	r2, #4
    350c:	4631      	mov	r1, r6
    350e:	4628      	mov	r0, r5
    3510:	f7ff ff32 	bl	3378 <MTPD::read(char*, unsigned long)>
    3514:	2204      	movs	r2, #4
    3516:	4631      	mov	r1, r6
    3518:	4628      	mov	r0, r5
    351a:	f7ff ff2d 	bl	3378 <MTPD::read(char*, unsigned long)>
    351e:	2204      	movs	r2, #4
    3520:	4631      	mov	r1, r6
    3522:	4628      	mov	r0, r5
    3524:	f7ff ff28 	bl	3378 <MTPD::read(char*, unsigned long)>
    3528:	2204      	movs	r2, #4
    352a:	4631      	mov	r1, r6
    352c:	4628      	mov	r0, r5
    352e:	f7ff ff23 	bl	3378 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3532:	2202      	movs	r2, #2
    3534:	4631      	mov	r1, r6
    3536:	4628      	mov	r0, r5
    3538:	f7ff ff1e 	bl	3378 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    353c:	2204      	movs	r2, #4
    353e:	4631      	mov	r1, r6
    3540:	4628      	mov	r0, r5
    3542:	f7ff ff19 	bl	3378 <MTPD::read(char*, unsigned long)>
    3546:	2204      	movs	r2, #4
    3548:	4631      	mov	r1, r6
    354a:	4628      	mov	r0, r5
    354c:	f7ff ff14 	bl	3378 <MTPD::read(char*, unsigned long)>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    3550:	4631      	mov	r1, r6
    3552:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    3554:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    3558:	f7ff ff46 	bl	33e8 <MTPD::readstring(char*)>
    355c:	4630      	mov	r0, r6
    355e:	f00f f80f 	bl	12580 <strlen>
    3562:	3001      	adds	r0, #1
    3564:	eba8 0840 	sub.w	r8, r8, r0, lsl #1
    3568:	f108 34ff 	add.w	r4, r8, #4294967295
      while(len>=4) { read32(); len-=4;}
    356c:	2c03      	cmp	r4, #3
    356e:	dd0c      	ble.n	358a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x122>
    3570:	af03      	add	r7, sp, #12
    3572:	3c04      	subs	r4, #4
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3574:	2204      	movs	r2, #4
    3576:	4639      	mov	r1, r7
    3578:	4628      	mov	r0, r5
    357a:	f7ff fefd 	bl	3378 <MTPD::read(char*, unsigned long)>
      while(len>=4) { read32(); len-=4;}
    357e:	2c03      	cmp	r4, #3
    3580:	dcf7      	bgt.n	3572 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10a>
    3582:	f1a8 0805 	sub.w	r8, r8, #5
    3586:	f008 0403 	and.w	r4, r8, #3
      while(len) {read8(); len--;}
    358a:	b13c      	cbz	r4, 359c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x134>
    358c:	af03      	add	r7, sp, #12
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    358e:	2201      	movs	r2, #1
    3590:	4639      	mov	r1, r7
    3592:	4628      	mov	r0, r5
    3594:	f7ff fef0 	bl	3378 <MTPD::read(char*, unsigned long)>
      while(len) {read8(); len--;}
    3598:	3c01      	subs	r4, #1
    359a:	d1f8      	bne.n	358e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x126>
      return storage_->Create(store, parent, dir, filename);
    359c:	465b      	mov	r3, fp
    359e:	4652      	mov	r2, sl
    35a0:	4649      	mov	r1, r9
    35a2:	6828      	ldr	r0, [r5, #0]
    35a4:	9600      	str	r6, [sp, #0]
    35a6:	f002 fdb5 	bl	6114 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>
    }
    35aa:	b045      	add	sp, #276	; 0x114
    35ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    35b0:	6833      	ldr	r3, [r6, #0]
    35b2:	f1a3 0840 	sub.w	r8, r3, #64	; 0x40
    35b6:	e778      	b.n	34aa <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x42>
    35b8:	200347f8 	.word	0x200347f8

000035bc <MTPD::SendObject()>:
    { 
    35bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    35c0:	f500 7908 	add.w	r9, r0, #544	; 0x220
    { 
    35c4:	b087      	sub	sp, #28
    35c6:	9000      	str	r0, [sp, #0]
      while(!usb_mtp_available());
    35c8:	f00b fd3e 	bl	f048 <usb_mtp_available>
    35cc:	2800      	cmp	r0, #0
    35ce:	d0fb      	beq.n	35c8 <MTPD::SendObject()+0xc>
      return usb_mtp_recv(data_buffer,60);
    35d0:	213c      	movs	r1, #60	; 0x3c
    35d2:	4648      	mov	r0, r9
    35d4:	f00b fce6 	bl	efa4 <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    35d8:	220c      	movs	r2, #12
        index=0;
    35da:	4b40      	ldr	r3, [pc, #256]	; (36dc <MTPD::SendObject()+0x120>)
    35dc:	2400      	movs	r4, #0
    read((char *)&header, sizeof(MTPHeader));
    35de:	eb0d 0102 	add.w	r1, sp, r2
    35e2:	9800      	ldr	r0, [sp, #0]
        index=0;
    35e4:	601c      	str	r4, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    35e6:	f7ff fec7 	bl	3378 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    35ea:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    35ee:	2b02      	cmp	r3, #2
    35f0:	d00c      	beq.n	360c <MTPD::SendObject()+0x50>
      disk_pos=0;
    35f2:	9b00      	ldr	r3, [sp, #0]
    35f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    35f8:	f8c3 4424 	str.w	r4, [r3, #1060]	; 0x424
      storage_->close();
    35fc:	9b00      	ldr	r3, [sp, #0]
    35fe:	6818      	ldr	r0, [r3, #0]
    3600:	f002 fe08 	bl	6214 <MTPStorage_SD::close()>
      return true;
    3604:	2001      	movs	r0, #1
    }
    3606:	b007      	add	sp, #28
    3608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    360c:	9b03      	ldr	r3, [sp, #12]
      disk_pos=0;
    360e:	9a00      	ldr	r2, [sp, #0]
      return header.len - 12;
    3610:	f1a3 0b0c 	sub.w	fp, r3, #12
      disk_pos=0;
    3614:	f502 5780 	add.w	r7, r2, #4096	; 0x1000
      while((int)len>0)
    3618:	45a3      	cmp	fp, r4
      disk_pos=0;
    361a:	f8c7 4424 	str.w	r4, [r7, #1060]	; 0x424
      while((int)len>0)
    361e:	dded      	ble.n	35fc <MTPD::SendObject()+0x40>
      uint32_t index = sizeof(MTPHeader);
    3620:	250c      	movs	r5, #12
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3622:	4620      	mov	r0, r4
    3624:	f502 6a84 	add.w	sl, r2, #1056	; 0x420
          disk_pos =0;
    3628:	46a8      	mov	r8, r5
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    362a:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    362e:	f5c0 5480 	rsb	r4, r0, #4096	; 0x1000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3632:	eb09 0108 	add.w	r1, r9, r8
    3636:	4450      	add	r0, sl
    3638:	455e      	cmp	r6, fp
    363a:	bf28      	it	cs
    363c:	465e      	movcs	r6, fp
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    363e:	42b4      	cmp	r4, r6
    3640:	bf28      	it	cs
    3642:	4634      	movcs	r4, r6
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3644:	4622      	mov	r2, r4
        len -= to_copy;
    3646:	ebab 0504 	sub.w	r5, fp, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    364a:	f00a fb27 	bl	dc9c <memcpy>
        disk_pos += to_copy;
    364e:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
    3652:	4422      	add	r2, r4
        if(disk_pos==DISK_BUFFER_SIZE)
    3654:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
        disk_pos += to_copy;
    3658:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
        if(disk_pos==DISK_BUFFER_SIZE)
    365c:	d021      	beq.n	36a2 <MTPD::SendObject()+0xe6>
        if(len>0)  // we have still data to be transfered
    365e:	b985      	cbnz	r5, 3682 <MTPD::SendObject()+0xc6>
      if(disk_pos)
    3660:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
    3664:	2a00      	cmp	r2, #0
    3666:	d0c9      	beq.n	35fc <MTPD::SendObject()+0x40>
        if(storage_->write((const uint8_t *)disk_buffer, disk_pos)<disk_pos) return false;
    3668:	9b00      	ldr	r3, [sp, #0]
    366a:	4651      	mov	r1, sl
    366c:	6818      	ldr	r0, [r3, #0]
    366e:	f002 fdc5 	bl	61fc <MTPStorage_SD::write(unsigned char const*, unsigned long)>
    3672:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
    3676:	4298      	cmp	r0, r3
    3678:	d2c0      	bcs.n	35fc <MTPD::SendObject()+0x40>
          if(storage_->write((const uint8_t *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    367a:	2000      	movs	r0, #0
    }
    367c:	b007      	add	sp, #28
    367e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while(!usb_mtp_available());
    3682:	f00b fce1 	bl	f048 <usb_mtp_available>
    3686:	2800      	cmp	r0, #0
    3688:	d0fb      	beq.n	3682 <MTPD::SendObject()+0xc6>
      return usb_mtp_recv(data_buffer,60);
    368a:	213c      	movs	r1, #60	; 0x3c
    368c:	4648      	mov	r0, r9
    368e:	f00b fc89 	bl	efa4 <usb_mtp_recv>
      while((int)len>0)
    3692:	2d00      	cmp	r5, #0
    3694:	dde4      	ble.n	3660 <MTPD::SendObject()+0xa4>
      if(disk_pos)
    3696:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
    369a:	46ab      	mov	fp, r5
          index=0;
    369c:	f04f 0800 	mov.w	r8, #0
    36a0:	e7c3      	b.n	362a <MTPD::SendObject()+0x6e>
          if(storage_->write((const uint8_t *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    36a2:	9b00      	ldr	r3, [sp, #0]
    36a4:	4651      	mov	r1, sl
    36a6:	6818      	ldr	r0, [r3, #0]
    36a8:	f002 fda8 	bl	61fc <MTPStorage_SD::write(unsigned char const*, unsigned long)>
    36ac:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    36b0:	d3e3      	bcc.n	367a <MTPD::SendObject()+0xbe>
          disk_pos =0;
    36b2:	2300      	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    36b4:	1b32      	subs	r2, r6, r4
          disk_pos =0;
    36b6:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    36ba:	d0d0      	beq.n	365e <MTPD::SendObject()+0xa2>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    36bc:	eb04 0108 	add.w	r1, r4, r8
    36c0:	4650      	mov	r0, sl
    36c2:	9201      	str	r2, [sp, #4]
            len -= bytes;
    36c4:	ebab 0506 	sub.w	r5, fp, r6
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    36c8:	4449      	add	r1, r9
    36ca:	f00a fae7 	bl	dc9c <memcpy>
            disk_pos += bytes;
    36ce:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
    36d2:	9a01      	ldr	r2, [sp, #4]
    36d4:	4413      	add	r3, r2
    36d6:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
            len -= bytes;
    36da:	e7c0      	b.n	365e <MTPD::SendObject()+0xa2>
    36dc:	200347f8 	.word	0x200347f8

000036e0 <MTPD::loop()>:
    { if(!usb_mtp_available()) return;
    36e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36e4:	ed2d 8b02 	vpush	{d8}
    36e8:	b08f      	sub	sp, #60	; 0x3c
    36ea:	4604      	mov	r4, r0
    36ec:	f00b fcac 	bl	f048 <usb_mtp_available>
    36f0:	b920      	cbnz	r0, 36fc <MTPD::loop()+0x1c>
    }
    36f2:	b00f      	add	sp, #60	; 0x3c
    36f4:	ecbd 8b02 	vpop	{d8}
    36f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(fetch_packet(rx_data_buffer))
    36fc:	f504 7508 	add.w	r5, r4, #544	; 0x220
    }

    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    3700:	213c      	movs	r1, #60	; 0x3c
    3702:	4628      	mov	r0, r5
    3704:	f00b fc4e 	bl	efa4 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    3708:	2800      	cmp	r0, #0
    370a:	d0f2      	beq.n	36f2 <MTPD::loop()+0x12>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    370c:	f8d4 1228 	ldr.w	r1, [r4, #552]	; 0x228
    3710:	f8b4 2224 	ldrh.w	r2, [r4, #548]	; 0x224
    3714:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    3718:	48af      	ldr	r0, [pc, #700]	; (39d8 <MTPD::loop()+0x2f8>)
    371a:	e9cd 2100 	strd	r2, r1, [sp]
    371e:	49af      	ldr	r1, [pc, #700]	; (39dc <MTPD::loop()+0x2fc>)
    3720:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    3724:	f009 fcce 	bl	d0c4 <Print::printf(char const*, ...)>
    3728:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    372c:	2b0c      	cmp	r3, #12
    372e:	d86f      	bhi.n	3810 <MTPD::loop()+0x130>
    3730:	49ab      	ldr	r1, [pc, #684]	; (39e0 <MTPD::loop()+0x300>)
        TID=id;
    3732:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    3736:	48a8      	ldr	r0, [pc, #672]	; (39d8 <MTPD::loop()+0x2f8>)
    3738:	f009 fcc4 	bl	d0c4 <Print::printf(char const*, ...)>
        int typ= CONTAINER->type;
    373c:	f8b4 0224 	ldrh.w	r0, [r4, #548]	; 0x224
        if(typ==2) return_code=0x2005; // we should only get cmds
    3740:	f242 0305 	movw	r3, #8197	; 0x2005
    3744:	f242 0201 	movw	r2, #8193	; 0x2001
        int op = CONTAINER->op;
    3748:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
        if(typ==2) return_code=0x2005; // we should only get cmds
    374c:	2802      	cmp	r0, #2
    374e:	bf08      	it	eq
    3750:	461a      	moveq	r2, r3
        int p2 = CONTAINER->params[1];
    3752:	f8d4 8230 	ldr.w	r8, [r4, #560]	; 0x230
        int id = CONTAINER->transaction_id;
    3756:	f8d4 9228 	ldr.w	r9, [r4, #552]	; 0x228
        if(typ==2) return_code=0x2005; // we should only get cmds
    375a:	9203      	str	r2, [sp, #12]
        switch (op)
    375c:	f241 021b 	movw	r2, #4123	; 0x101b
        int p1 = CONTAINER->params[0];
    3760:	f8d4 a22c 	ldr.w	sl, [r4, #556]	; 0x22c
        int p2 = CONTAINER->params[1];
    3764:	46c3      	mov	fp, r8
        switch (op)
    3766:	4291      	cmp	r1, r2
        int p3 = CONTAINER->params[2];
    3768:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
        int len= CONTAINER->len;
    376c:	f8d4 6220 	ldr.w	r6, [r4, #544]	; 0x220
        TID=id;
    3770:	f8c7 9430 	str.w	r9, [r7, #1072]	; 0x430
        switch (op)
    3774:	d826      	bhi.n	37c4 <MTPD::loop()+0xe4>
    3776:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    377a:	f240 80d7 	bls.w	392c <MTPD::loop()+0x24c>
    377e:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
    3782:	440a      	add	r2, r1
    3784:	2a1a      	cmp	r2, #26
    3786:	f200 80d1 	bhi.w	392c <MTPD::loop()+0x24c>
    378a:	e8df f012 	tbh	[pc, r2, lsl #1]
    378e:	01cf      	.short	0x01cf
    3790:	00eb01c4 	.word	0x00eb01c4
    3794:	013100f0 	.word	0x013100f0
    3798:	02b6011b 	.word	0x02b6011b
    379c:	0303027f 	.word	0x0303027f
    37a0:	025600cf 	.word	0x025600cf
    37a4:	02660272 	.word	0x02660272
    37a8:	00cf00cf 	.word	0x00cf00cf
    37ac:	00cf00cf 	.word	0x00cf00cf
    37b0:	00cf00cf 	.word	0x00cf00cf
    37b4:	0204022d 	.word	0x0204022d
    37b8:	00cf00cf 	.word	0x00cf00cf
    37bc:	01b300cf 	.word	0x01b300cf
    37c0:	016801a4 	.word	0x016801a4
    37c4:	f246 73ff 	movw	r3, #26623	; 0x67ff
    37c8:	440b      	add	r3, r1
    37ca:	b29b      	uxth	r3, r3
    37cc:	2b03      	cmp	r3, #3
    37ce:	f200 80ad 	bhi.w	392c <MTPD::loop()+0x24c>
    37d2:	4b84      	ldr	r3, [pc, #528]	; (39e4 <MTPD::loop()+0x304>)
    37d4:	440b      	add	r3, r1
    37d6:	2b02      	cmp	r3, #2
    37d8:	f200 83ac 	bhi.w	3f34 <MTPD::loop()+0x854>
    37dc:	e8df f003 	tbb	[pc, r3]
    37e0:	346e      	.short	0x346e
    37e2:	02          	.byte	0x02
    37e3:	00          	.byte	0x00
      while(!usb_mtp_available());
    37e4:	f00b fc30 	bl	f048 <usb_mtp_available>
    37e8:	2800      	cmp	r0, #0
    37ea:	d0fb      	beq.n	37e4 <MTPD::loop()+0x104>
      return usb_mtp_recv(data_buffer,60);
    37ec:	213c      	movs	r1, #60	; 0x3c
    37ee:	4628      	mov	r0, r5
    37f0:	f00b fbd8 	bl	efa4 <usb_mtp_recv>
        index=0;
    37f4:	4b7c      	ldr	r3, [pc, #496]	; (39e8 <MTPD::loop()+0x308>)
    37f6:	2200      	movs	r2, #0
    37f8:	601a      	str	r2, [r3, #0]
      if(p2==0xDC07)
    37fa:	f64d 4307 	movw	r3, #56327	; 0xdc07
    37fe:	4598      	cmp	r8, r3
    3800:	f040 832e 	bne.w	3e60 <MTPD::loop()+0x780>
    3804:	4651      	mov	r1, sl
    3806:	4620      	mov	r0, r4
    3808:	f7ff fe12 	bl	3430 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
            CONTAINER->op=return_code;
    380c:	b283      	uxth	r3, r0
    380e:	e0ab      	b.n	3968 <MTPD::loop()+0x288>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    3810:	f8d4 222c 	ldr.w	r2, [r4, #556]	; 0x22c
    3814:	4975      	ldr	r1, [pc, #468]	; (39ec <MTPD::loop()+0x30c>)
    3816:	4870      	ldr	r0, [pc, #448]	; (39d8 <MTPD::loop()+0x2f8>)
    3818:	f009 fc54 	bl	d0c4 <Print::printf(char const*, ...)>
    381c:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    3820:	2b10      	cmp	r3, #16
    3822:	d985      	bls.n	3730 <MTPD::loop()+0x50>
    3824:	f8d4 2230 	ldr.w	r2, [r4, #560]	; 0x230
    3828:	4970      	ldr	r1, [pc, #448]	; (39ec <MTPD::loop()+0x30c>)
    382a:	486b      	ldr	r0, [pc, #428]	; (39d8 <MTPD::loop()+0x2f8>)
    382c:	f009 fc4a 	bl	d0c4 <Print::printf(char const*, ...)>
    3830:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    3834:	2b14      	cmp	r3, #20
    3836:	f67f af7b 	bls.w	3730 <MTPD::loop()+0x50>
    383a:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
    383e:	496b      	ldr	r1, [pc, #428]	; (39ec <MTPD::loop()+0x30c>)
    3840:	4865      	ldr	r0, [pc, #404]	; (39d8 <MTPD::loop()+0x2f8>)
    3842:	f009 fc3f 	bl	d0c4 <Print::printf(char const*, ...)>
    3846:	e773      	b.n	3730 <MTPD::loop()+0x50>
              TRANSMIT(getObjectPropValue(p1,p2));
    3848:	f04f 0b00 	mov.w	fp, #0
    384c:	2301      	movs	r3, #1
    384e:	4642      	mov	r2, r8
    3850:	4651      	mov	r1, sl
    3852:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    3856:	4620      	mov	r0, r4
    3858:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    385c:	f7ff fb86 	bl	2f6c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3860:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3864:	220c      	movs	r2, #12
    3866:	a906      	add	r1, sp, #24
    3868:	330c      	adds	r3, #12
    386a:	4620      	mov	r0, r4
    386c:	9306      	str	r3, [sp, #24]
    386e:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3872:	f8ad 301e 	strh.w	r3, [sp, #30]
    3876:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    387a:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    387e:	9308      	str	r3, [sp, #32]
    3880:	2302      	movs	r3, #2
    3882:	f887 b428 	strb.w	fp, [r7, #1064]	; 0x428
    3886:	f104 0720 	add.w	r7, r4, #32
    388a:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    388e:	f7fe fb3d 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    3892:	4642      	mov	r2, r8
    3894:	4651      	mov	r1, sl
    3896:	4620      	mov	r0, r4
    3898:	f7ff fb68 	bl	2f6c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    389c:	9b06      	ldr	r3, [sp, #24]
    389e:	f3c3 0808 	ubfx	r8, r3, #0, #9
    38a2:	f1b8 0f00 	cmp.w	r8, #0
    38a6:	d006      	beq.n	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    38a8:	223c      	movs	r2, #60	; 0x3c
    38aa:	4641      	mov	r1, r8
    38ac:	4638      	mov	r0, r7
    38ae:	f00b fbe3 	bl	f078 <usb_mtp_send>
    38b2:	2800      	cmp	r0, #0
    38b4:	ddf8      	ble.n	38a8 <MTPD::loop()+0x1c8>
            CONTAINER->op=return_code;
    38b6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
              break;
    38ba:	e03b      	b.n	3934 <MTPD::loop()+0x254>
              TRANSMIT(getObjectPropDesc(p1,p2));
    38bc:	f04f 0b00 	mov.w	fp, #0
    38c0:	2301      	movs	r3, #1
    38c2:	4642      	mov	r2, r8
    38c4:	4651      	mov	r1, sl
    38c6:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    38ca:	4620      	mov	r0, r4
    38cc:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    38d0:	f7ff f8e4 	bl	2a9c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    38d4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    38d8:	220c      	movs	r2, #12
    38da:	a906      	add	r1, sp, #24
    38dc:	330c      	adds	r3, #12
    38de:	4620      	mov	r0, r4
    38e0:	9306      	str	r3, [sp, #24]
    38e2:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    38e6:	f8ad 301e 	strh.w	r3, [sp, #30]
    38ea:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    38ee:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    38f2:	9308      	str	r3, [sp, #32]
    38f4:	2302      	movs	r3, #2
    38f6:	f887 b428 	strb.w	fp, [r7, #1064]	; 0x428
    38fa:	f104 0720 	add.w	r7, r4, #32
    38fe:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3902:	f7fe fb03 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    3906:	4642      	mov	r2, r8
    3908:	4651      	mov	r1, sl
    390a:	4620      	mov	r0, r4
    390c:	f7ff f8c6 	bl	2a9c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3910:	9b06      	ldr	r3, [sp, #24]
    3912:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3916:	f1b8 0f00 	cmp.w	r8, #0
    391a:	d0cc      	beq.n	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    391c:	223c      	movs	r2, #60	; 0x3c
    391e:	4641      	mov	r1, r8
    3920:	4638      	mov	r0, r7
    3922:	f00b fba9 	bl	f078 <usb_mtp_send>
    3926:	2800      	cmp	r0, #0
    3928:	ddf8      	ble.n	391c <MTPD::loop()+0x23c>
    392a:	e7c4      	b.n	38b6 <MTPD::loop()+0x1d6>
            TRANSMIT(WriteDescriptor());
    392c:	f104 0720 	add.w	r7, r4, #32
    3930:	f242 0305 	movw	r3, #8197	; 0x2005
            CONTAINER->op=return_code;
    3934:	f8a4 3226 	strh.w	r3, [r4, #550]	; 0x226
            CONTAINER->type=3;
    3938:	2303      	movs	r3, #3
            memcpy(tx_data_buffer,rx_data_buffer,len);
    393a:	4629      	mov	r1, r5
    393c:	4632      	mov	r2, r6
    393e:	4638      	mov	r0, r7
            CONTAINER->transaction_id=id;
    3940:	f8c4 9228 	str.w	r9, [r4, #552]	; 0x228
            CONTAINER->len=len;
    3944:	f8c4 6220 	str.w	r6, [r4, #544]	; 0x220
            CONTAINER->params[0]=p1;
    3948:	f8c4 a22c 	str.w	sl, [r4, #556]	; 0x22c
            CONTAINER->type=3;
    394c:	f8a4 3224 	strh.w	r3, [r4, #548]	; 0x224
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3950:	f00a f9a4 	bl	dc9c <memcpy>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3954:	223c      	movs	r2, #60	; 0x3c
    3956:	4631      	mov	r1, r6
    3958:	4638      	mov	r0, r7
    395a:	f00b fb8d 	bl	f078 <usb_mtp_send>
    395e:	2800      	cmp	r0, #0
    3960:	ddf8      	ble.n	3954 <MTPD::loop()+0x274>
    3962:	e6c6      	b.n	36f2 <MTPD::loop()+0x12>
            CONTAINER->op=return_code;
    3964:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            TRANSMIT(WriteDescriptor());
    3968:	f104 0720 	add.w	r7, r4, #32
    396c:	e7e2      	b.n	3934 <MTPD::loop()+0x254>
      uint32_t sd_getFSCount(void) {return fsCount;}
    396e:	6823      	ldr	r3, [r4, #0]
        write_length_ += len;
    3970:	2204      	movs	r2, #4
    3972:	f8d3 b000 	ldr.w	fp, [r3]
              TRANSMIT(WriteStorageIDs());
    3976:	2301      	movs	r3, #1
        write_length_ += len;
    3978:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
              TRANSMIT(WriteStorageIDs());
    397c:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3980:	f1bb 0f00 	cmp.w	fp, #0
    3984:	f000 82d4 	beq.w	3f30 <MTPD::loop()+0x850>
    3988:	f04f 0800 	mov.w	r8, #0
    398c:	4622      	mov	r2, r4
    398e:	a906      	add	r1, sp, #24
    3990:	ee08 5a10 	vmov	s16, r5
    3994:	4644      	mov	r4, r8
    3996:	4690      	mov	r8, r2
    3998:	460d      	mov	r5, r1
    399a:	e009      	b.n	39b0 <MTPD::loop()+0x2d0>
        write_length_ += len;
    399c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    39a0:	4413      	add	r3, r2
    39a2:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    39a6:	45a3      	cmp	fp, r4
    39a8:	f000 822b 	beq.w	3e02 <MTPD::loop()+0x722>
    { if (write_get_length_) 
    39ac:	f897 3428 	ldrb.w	r3, [r7, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    39b0:	3401      	adds	r4, #1
        write_length_ += len;
    39b2:	2204      	movs	r2, #4
    39b4:	9406      	str	r4, [sp, #24]
    { if (write_get_length_) 
    39b6:	2b00      	cmp	r3, #0
    39b8:	d1f0      	bne.n	399c <MTPD::loop()+0x2bc>
    39ba:	4629      	mov	r1, r5
    39bc:	4640      	mov	r0, r8
    39be:	f7fe faa5 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    39c2:	e7f0      	b.n	39a6 <MTPD::loop()+0x2c6>
            if (p2) 
    39c4:	f1b8 0f00 	cmp.w	r8, #0
    39c8:	f000 825e 	beq.w	3e88 <MTPD::loop()+0x7a8>
            TRANSMIT(WriteDescriptor());
    39cc:	f104 0720 	add.w	r7, r4, #32
    39d0:	f242 0314 	movw	r3, #8212	; 0x2014
    39d4:	e7ae      	b.n	3934 <MTPD::loop()+0x254>
    39d6:	bf00      	nop
    39d8:	20008a0c 	.word	0x20008a0c
    39dc:	20000b2c 	.word	0x20000b2c
    39e0:	20000b40 	.word	0x20000b40
    39e4:	ffff67fe 	.word	0xffff67fe
    39e8:	200347f8 	.word	0x200347f8
    39ec:	20000b3c 	.word	0x20000b3c
            TRANSMIT(GetStorageInfo(p1));
    39f0:	f04f 0800 	mov.w	r8, #0
    39f4:	2301      	movs	r3, #1
    39f6:	4651      	mov	r1, sl
    39f8:	4620      	mov	r0, r4
    39fa:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    39fe:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    3a02:	f7fe fd37 	bl	2474 <MTPD::GetStorageInfo(unsigned long)>
    3a06:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3a0a:	220c      	movs	r2, #12
    3a0c:	a906      	add	r1, sp, #24
    3a0e:	330c      	adds	r3, #12
    3a10:	4620      	mov	r0, r4
    3a12:	9306      	str	r3, [sp, #24]
    3a14:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3a18:	f8ad 301e 	strh.w	r3, [sp, #30]
    3a1c:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    3a20:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3a24:	9308      	str	r3, [sp, #32]
    3a26:	2302      	movs	r3, #2
    3a28:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3a2c:	f104 0720 	add.w	r7, r4, #32
    3a30:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3a34:	f7fe fa6a 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    3a38:	4651      	mov	r1, sl
    3a3a:	4620      	mov	r0, r4
    3a3c:	f7fe fd1a 	bl	2474 <MTPD::GetStorageInfo(unsigned long)>
    3a40:	9b06      	ldr	r3, [sp, #24]
    3a42:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3a46:	f1b8 0f00 	cmp.w	r8, #0
    3a4a:	f43f af34 	beq.w	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a4e:	223c      	movs	r2, #60	; 0x3c
    3a50:	4641      	mov	r1, r8
    3a52:	4638      	mov	r0, r7
    3a54:	f00b fb10 	bl	f078 <usb_mtp_send>
    3a58:	2800      	cmp	r0, #0
    3a5a:	ddf8      	ble.n	3a4e <MTPD::loop()+0x36e>
    3a5c:	e72b      	b.n	38b6 <MTPD::loop()+0x1d6>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    3a5e:	f04f 0b00 	mov.w	fp, #0
    3a62:	2201      	movs	r2, #1
    3a64:	4651      	mov	r1, sl
    3a66:	4620      	mov	r0, r4
    3a68:	f887 2428 	strb.w	r2, [r7, #1064]	; 0x428
    3a6c:	4642      	mov	r2, r8
    3a6e:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    3a72:	9304      	str	r3, [sp, #16]
    3a74:	f7ff fc0a 	bl	328c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    3a78:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
    3a7c:	a906      	add	r1, sp, #24
    3a7e:	9009      	str	r0, [sp, #36]	; 0x24
    3a80:	4620      	mov	r0, r4
    3a82:	320c      	adds	r2, #12
    3a84:	9206      	str	r2, [sp, #24]
    3a86:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    3a8a:	f8ad 201e 	strh.w	r2, [sp, #30]
    3a8e:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    3a92:	f8c7 b42c 	str.w	fp, [r7, #1068]	; 0x42c
    3a96:	9208      	str	r2, [sp, #32]
    3a98:	2202      	movs	r2, #2
    3a9a:	f887 b428 	strb.w	fp, [r7, #1064]	; 0x428
    3a9e:	f104 0720 	add.w	r7, r4, #32
    3aa2:	f8ad 201c 	strh.w	r2, [sp, #28]
    { if (write_get_length_) 
    3aa6:	2220      	movs	r2, #32
    3aa8:	f7fe fa30 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    3aac:	9b04      	ldr	r3, [sp, #16]
    3aae:	4642      	mov	r2, r8
    3ab0:	4651      	mov	r1, sl
    3ab2:	4620      	mov	r0, r4
    3ab4:	f7ff fbea 	bl	328c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    3ab8:	9b06      	ldr	r3, [sp, #24]
    3aba:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3abe:	f1b8 0f00 	cmp.w	r8, #0
    3ac2:	f43f aef8 	beq.w	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3ac6:	223c      	movs	r2, #60	; 0x3c
    3ac8:	4641      	mov	r1, r8
    3aca:	4638      	mov	r0, r7
    3acc:	f00b fad4 	bl	f078 <usb_mtp_send>
    3ad0:	2800      	cmp	r0, #0
    3ad2:	ddf8      	ble.n	3ac6 <MTPD::loop()+0x3e6>
    3ad4:	e6ef      	b.n	38b6 <MTPD::loop()+0x1d6>
      return storage_->copy(handle,store1,newHandle);
    3ad6:	f108 32ff 	add.w	r2, r8, #4294967295
    3ada:	4651      	mov	r1, sl
    3adc:	6820      	ldr	r0, [r4, #0]
            TRANSMIT(WriteDescriptor());
    3ade:	f104 0720 	add.w	r7, r4, #32
      return storage_->copy(handle,store1,newHandle);
    3ae2:	f002 fdc1 	bl	6668 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    3ae6:	2800      	cmp	r0, #0
    3ae8:	f040 81c3 	bne.w	3e72 <MTPD::loop()+0x792>
            TRANSMIT(WriteDescriptor());
    3aec:	f242 0305 	movw	r3, #8197	; 0x2005
    3af0:	260c      	movs	r6, #12
    3af2:	e71f      	b.n	3934 <MTPD::loop()+0x254>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3af4:	4627      	mov	r7, r4
    3af6:	f108 32ff 	add.w	r2, r8, #4294967295
    3afa:	4651      	mov	r1, sl
              break;
    3afc:	260c      	movs	r6, #12
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3afe:	f857 0b20 	ldr.w	r0, [r7], #32
    3b02:	f002 ffa5 	bl	6a50 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>
    3b06:	f242 0301 	movw	r3, #8193	; 0x2001
    3b0a:	f242 0205 	movw	r2, #8197	; 0x2005
    3b0e:	2800      	cmp	r0, #0
    3b10:	bf08      	it	eq
    3b12:	4613      	moveq	r3, r2
              break;
    3b14:	e70e      	b.n	3934 <MTPD::loop()+0x254>
      storage_->ResetIndex();
    3b16:	4627      	mov	r7, r4
      sessionID_ = id;
    3b18:	4bd8      	ldr	r3, [pc, #864]	; (3e7c <MTPD::loop()+0x79c>)
      storage_->ResetIndex();
    3b1a:	f857 0b20 	ldr.w	r0, [r7], #32
      sessionID_ = id;
    3b1e:	f8c3 a000 	str.w	sl, [r3]
      storage_->ResetIndex();
    3b22:	f001 fe13 	bl	574c <MTPStorage_SD::ResetIndex()>
            CONTAINER->op=return_code;
    3b26:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    }
    3b2a:	e703      	b.n	3934 <MTPD::loop()+0x254>
            TRANSMIT(WriteDescriptor());
    3b2c:	f04f 0800 	mov.w	r8, #0
    3b30:	2301      	movs	r3, #1
    3b32:	4620      	mov	r0, r4
    3b34:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3b38:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    3b3c:	f7fe facc 	bl	20d8 <MTPD::WriteDescriptor()>
    3b40:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3b44:	220c      	movs	r2, #12
    3b46:	a906      	add	r1, sp, #24
    3b48:	330c      	adds	r3, #12
    3b4a:	4620      	mov	r0, r4
    3b4c:	9306      	str	r3, [sp, #24]
    3b4e:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3b52:	f8ad 301e 	strh.w	r3, [sp, #30]
    3b56:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    3b5a:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3b5e:	9308      	str	r3, [sp, #32]
    3b60:	2302      	movs	r3, #2
    3b62:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3b66:	f104 0720 	add.w	r7, r4, #32
    3b6a:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3b6e:	f7fe f9cd 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    3b72:	4620      	mov	r0, r4
    3b74:	f7fe fab0 	bl	20d8 <MTPD::WriteDescriptor()>
    3b78:	9b06      	ldr	r3, [sp, #24]
    3b7a:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3b7e:	f1b8 0f00 	cmp.w	r8, #0
    3b82:	f43f ae98 	beq.w	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3b86:	223c      	movs	r2, #60	; 0x3c
    3b88:	4641      	mov	r1, r8
    3b8a:	4638      	mov	r0, r7
    3b8c:	f00b fa74 	bl	f078 <usb_mtp_send>
    3b90:	2800      	cmp	r0, #0
    3b92:	ddf8      	ble.n	3b86 <MTPD::loop()+0x4a6>
    3b94:	e68f      	b.n	38b6 <MTPD::loop()+0x1d6>
              TRANSMIT(GetDevicePropValue(p1));
    3b96:	2301      	movs	r3, #1
    3b98:	f04f 0800 	mov.w	r8, #0
    3b9c:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    switch (prop) {
    3ba0:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropValue(p1));
    3ba4:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    switch (prop) {
    3ba8:	459a      	cmp	sl, r3
    3baa:	f000 8183 	beq.w	3eb4 <MTPD::loop()+0x7d4>
              TRANSMIT(GetDevicePropValue(p1));
    3bae:	220c      	movs	r2, #12
    3bb0:	4bb3      	ldr	r3, [pc, #716]	; (3e80 <MTPD::loop()+0x7a0>)
    3bb2:	a906      	add	r1, sp, #24
    3bb4:	4620      	mov	r0, r4
    3bb6:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3bba:	f8cd 9020 	str.w	r9, [sp, #32]
    3bbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
    { if (write_get_length_) 
    3bc2:	f7fe f9a3 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    3bc6:	9b06      	ldr	r3, [sp, #24]
    3bc8:	f104 0720 	add.w	r7, r4, #32
    3bcc:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3bd0:	f1b8 0f00 	cmp.w	r8, #0
    3bd4:	f43f ae6f 	beq.w	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3bd8:	223c      	movs	r2, #60	; 0x3c
    3bda:	4641      	mov	r1, r8
    3bdc:	4638      	mov	r0, r7
    3bde:	f00b fa4b 	bl	f078 <usb_mtp_send>
    3be2:	2800      	cmp	r0, #0
    3be4:	ddf8      	ble.n	3bd8 <MTPD::loop()+0x4f8>
    3be6:	e666      	b.n	38b6 <MTPD::loop()+0x1d6>
              TRANSMIT(GetDevicePropDesc(p1));
    3be8:	2301      	movs	r3, #1
    3bea:	f04f 0800 	mov.w	r8, #0
    3bee:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    switch (prop) {
    3bf2:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropDesc(p1));
    3bf6:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    switch (prop) {
    3bfa:	459a      	cmp	sl, r3
    3bfc:	f000 817a 	beq.w	3ef4 <MTPD::loop()+0x814>
              TRANSMIT(GetDevicePropDesc(p1));
    3c00:	220c      	movs	r2, #12
    3c02:	4ba0      	ldr	r3, [pc, #640]	; (3e84 <MTPD::loop()+0x7a4>)
    3c04:	a906      	add	r1, sp, #24
    3c06:	4620      	mov	r0, r4
    3c08:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3c0c:	f8cd 9020 	str.w	r9, [sp, #32]
    3c10:	e9cd 2306 	strd	r2, r3, [sp, #24]
    { if (write_get_length_) 
    3c14:	f7fe f97a 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    3c18:	9b06      	ldr	r3, [sp, #24]
    3c1a:	f104 0720 	add.w	r7, r4, #32
    3c1e:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3c22:	f1b8 0f00 	cmp.w	r8, #0
    3c26:	f43f ae46 	beq.w	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3c2a:	223c      	movs	r2, #60	; 0x3c
    3c2c:	4641      	mov	r1, r8
    3c2e:	4638      	mov	r0, r7
    3c30:	f00b fa22 	bl	f078 <usb_mtp_send>
    3c34:	2800      	cmp	r0, #0
    3c36:	ddf8      	ble.n	3c2a <MTPD::loop()+0x54a>
    3c38:	e63d      	b.n	38b6 <MTPD::loop()+0x1d6>
              if (p2) {
    3c3a:	f1b8 0f00 	cmp.w	r8, #0
    3c3e:	f47f aec5 	bne.w	39cc <MTPD::loop()+0x2ec>
                if (!storage_->DeleteObject(p1)) {
    3c42:	4651      	mov	r1, sl
    3c44:	6820      	ldr	r0, [r4, #0]
    3c46:	f002 fa09 	bl	605c <MTPStorage_SD::DeleteObject(unsigned long)>
    3c4a:	2800      	cmp	r0, #0
    3c4c:	f47f ae8a 	bne.w	3964 <MTPD::loop()+0x284>
            TRANSMIT(WriteDescriptor());
    3c50:	f104 0720 	add.w	r7, r4, #32
    3c54:	f242 0312 	movw	r3, #8210	; 0x2012
    3c58:	e66c      	b.n	3934 <MTPD::loop()+0x254>
              if(!SendObject()) return_code = 0x2005;
    3c5a:	4620      	mov	r0, r4
    3c5c:	f7ff fcae 	bl	35bc <MTPD::SendObject()>
    3c60:	2800      	cmp	r0, #0
    3c62:	f040 8100 	bne.w	3e66 <MTPD::loop()+0x786>
            TRANSMIT(WriteDescriptor());
    3c66:	f104 0720 	add.w	r7, r4, #32
    3c6a:	f242 0305 	movw	r3, #8197	; 0x2005
    3c6e:	260c      	movs	r6, #12
    3c70:	e660      	b.n	3934 <MTPD::loop()+0x254>
              p3 = SendObjectInfo(p1, // storage
    3c72:	4642      	mov	r2, r8
    3c74:	4651      	mov	r1, sl
    3c76:	4620      	mov	r0, r4
            TRANSMIT(WriteDescriptor());
    3c78:	f104 0720 	add.w	r7, r4, #32
              p3 = SendObjectInfo(p1, // storage
    3c7c:	f7ff fbf4 	bl	3468 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              break;
    3c80:	2618      	movs	r6, #24
            CONTAINER->op=return_code;
    3c82:	f8bd 300c 	ldrh.w	r3, [sp, #12]
              CONTAINER->params[2]=p3;
    3c86:	e9c4 808c 	strd	r8, r0, [r4, #560]	; 0x230
              break;
    3c8a:	e653      	b.n	3934 <MTPD::loop()+0x254>
            TRANSMIT(GetObjectInfo(p1));
    3c8c:	f04f 0800 	mov.w	r8, #0
    3c90:	2301      	movs	r3, #1
    3c92:	4651      	mov	r1, sl
    3c94:	4620      	mov	r0, r4
    3c96:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3c9a:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    3c9e:	f7fe fd25 	bl	26ec <MTPD::GetObjectInfo(unsigned long)>
    3ca2:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3ca6:	220c      	movs	r2, #12
    3ca8:	a906      	add	r1, sp, #24
    3caa:	330c      	adds	r3, #12
    3cac:	4620      	mov	r0, r4
    3cae:	9306      	str	r3, [sp, #24]
    3cb0:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3cb4:	f8ad 301e 	strh.w	r3, [sp, #30]
    3cb8:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    3cbc:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3cc0:	9308      	str	r3, [sp, #32]
    3cc2:	2302      	movs	r3, #2
    3cc4:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3cc8:	f104 0720 	add.w	r7, r4, #32
    3ccc:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3cd0:	f7fe f91c 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    3cd4:	4651      	mov	r1, sl
    3cd6:	4620      	mov	r0, r4
    3cd8:	f7fe fd08 	bl	26ec <MTPD::GetObjectInfo(unsigned long)>
    3cdc:	9b06      	ldr	r3, [sp, #24]
    3cde:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3ce2:	f1b8 0f00 	cmp.w	r8, #0
    3ce6:	f43f ade6 	beq.w	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3cea:	223c      	movs	r2, #60	; 0x3c
    3cec:	4641      	mov	r1, r8
    3cee:	4638      	mov	r0, r7
    3cf0:	f00b f9c2 	bl	f078 <usb_mtp_send>
    3cf4:	2800      	cmp	r0, #0
    3cf6:	ddf8      	ble.n	3cea <MTPD::loop()+0x60a>
    3cf8:	e5dd      	b.n	38b6 <MTPD::loop()+0x1d6>
            if (p2) 
    3cfa:	f1b8 0f00 	cmp.w	r8, #0
    3cfe:	f47f ae65 	bne.w	39cc <MTPD::loop()+0x2ec>
              TRANSMIT(GetObjectHandles(p1, p3));
    3d02:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3d06:	2201      	movs	r2, #1
  { uint32_t store = Storage2Store(storage);
    3d08:	f10a 38ff 	add.w	r8, sl, #4294967295
    storage_->StartGetObjectHandles(store, parent);
    3d0c:	6820      	ldr	r0, [r4, #0]
              TRANSMIT(GetObjectHandles(p1, p3));
    3d0e:	f887 2428 	strb.w	r2, [r7, #1064]	; 0x428
    storage_->StartGetObjectHandles(store, parent);
    3d12:	461a      	mov	r2, r3
    3d14:	4641      	mov	r1, r8
    3d16:	9305      	str	r3, [sp, #20]
    3d18:	f001 ff78 	bl	5c0c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
    while (storage_->GetNextObjectHandle(store)) num++;
    3d1c:	9b05      	ldr	r3, [sp, #20]
    3d1e:	9704      	str	r7, [sp, #16]
    3d20:	461f      	mov	r7, r3
    3d22:	e001      	b.n	3d28 <MTPD::loop()+0x648>
    3d24:	f10b 0b01 	add.w	fp, fp, #1
    3d28:	4641      	mov	r1, r8
    3d2a:	6820      	ldr	r0, [r4, #0]
    3d2c:	f001 ffb2 	bl	5c94 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    3d30:	2800      	cmp	r0, #0
    3d32:	d1f7      	bne.n	3d24 <MTPD::loop()+0x644>
      write_length_ *= 4;
    3d34:	ea4f 028b 	mov.w	r2, fp, lsl #2
    3d38:	9705      	str	r7, [sp, #20]
    3d3a:	9f04      	ldr	r7, [sp, #16]
    3d3c:	a906      	add	r1, sp, #24
              TRANSMIT(GetObjectHandles(p1, p3));
    3d3e:	3210      	adds	r2, #16
    3d40:	9206      	str	r2, [sp, #24]
    3d42:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    3d46:	f8ad 201e 	strh.w	r2, [sp, #30]
    3d4a:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    3d4e:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
    3d52:	9208      	str	r2, [sp, #32]
    3d54:	2202      	movs	r2, #2
    3d56:	f887 0428 	strb.w	r0, [r7, #1064]	; 0x428
    3d5a:	4620      	mov	r0, r4
    3d5c:	f8ad 201c 	strh.w	r2, [sp, #28]
    { if (write_get_length_) 
    3d60:	220c      	movs	r2, #12
    3d62:	f7fe f8d3 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    3d66:	9b05      	ldr	r3, [sp, #20]
    3d68:	4651      	mov	r1, sl
    3d6a:	4620      	mov	r0, r4
    3d6c:	461a      	mov	r2, r3
    3d6e:	f104 0720 	add.w	r7, r4, #32
    3d72:	f7fe fc65 	bl	2640 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3d76:	9b06      	ldr	r3, [sp, #24]
    3d78:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3d7c:	f1b8 0f00 	cmp.w	r8, #0
    3d80:	f43f ad99 	beq.w	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d84:	223c      	movs	r2, #60	; 0x3c
    3d86:	4641      	mov	r1, r8
    3d88:	4638      	mov	r0, r7
    3d8a:	f00b f975 	bl	f078 <usb_mtp_send>
    3d8e:	2800      	cmp	r0, #0
    3d90:	ddf8      	ble.n	3d84 <MTPD::loop()+0x6a4>
    3d92:	e590      	b.n	38b6 <MTPD::loop()+0x1d6>
            TRANSMIT(GetObject(p1));
    3d94:	f04f 0800 	mov.w	r8, #0
    3d98:	2301      	movs	r3, #1
    3d9a:	4651      	mov	r1, sl
    3d9c:	4620      	mov	r0, r4
    3d9e:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3da2:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    3da6:	f7ff f9f5 	bl	3194 <MTPD::GetObject(unsigned long)>
    3daa:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3dae:	220c      	movs	r2, #12
    3db0:	a906      	add	r1, sp, #24
    3db2:	330c      	adds	r3, #12
    3db4:	4620      	mov	r0, r4
    3db6:	9306      	str	r3, [sp, #24]
    3db8:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3dbc:	f8ad 301e 	strh.w	r3, [sp, #30]
    3dc0:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    3dc4:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3dc8:	9308      	str	r3, [sp, #32]
    3dca:	2302      	movs	r3, #2
    3dcc:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3dd0:	f104 0720 	add.w	r7, r4, #32
    3dd4:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3dd8:	f7fe f898 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    3ddc:	4651      	mov	r1, sl
    3dde:	4620      	mov	r0, r4
    3de0:	f7ff f9d8 	bl	3194 <MTPD::GetObject(unsigned long)>
    3de4:	9b06      	ldr	r3, [sp, #24]
    3de6:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3dea:	f1b8 0f00 	cmp.w	r8, #0
    3dee:	f43f ad62 	beq.w	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3df2:	223c      	movs	r2, #60	; 0x3c
    3df4:	4641      	mov	r1, r8
    3df6:	4638      	mov	r0, r7
    3df8:	f00b f93e 	bl	f078 <usb_mtp_send>
    3dfc:	2800      	cmp	r0, #0
    3dfe:	ddf8      	ble.n	3df2 <MTPD::loop()+0x712>
    3e00:	e559      	b.n	38b6 <MTPD::loop()+0x1d6>
    3e02:	4629      	mov	r1, r5
    3e04:	4644      	mov	r4, r8
    3e06:	ee18 5a10 	vmov	r5, s16
              TRANSMIT(WriteStorageIDs());
    3e0a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3e0e:	4620      	mov	r0, r4
    3e10:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    3e14:	330c      	adds	r3, #12
    3e16:	f8ad 201e 	strh.w	r2, [sp, #30]
    3e1a:	9306      	str	r3, [sp, #24]
    3e1c:	2300      	movs	r3, #0
    3e1e:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    3e22:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    3e26:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    3e2a:	2302      	movs	r3, #2
    3e2c:	9208      	str	r2, [sp, #32]
    3e2e:	220c      	movs	r2, #12
    3e30:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3e34:	f7fe f86a 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    3e38:	4620      	mov	r0, r4
    3e3a:	f104 0720 	add.w	r7, r4, #32
    3e3e:	f7fe fae9 	bl	2414 <MTPD::WriteStorageIDs()>
    3e42:	9b06      	ldr	r3, [sp, #24]
    3e44:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3e48:	f1b8 0f00 	cmp.w	r8, #0
    3e4c:	f43f ad33 	beq.w	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3e50:	223c      	movs	r2, #60	; 0x3c
    3e52:	4641      	mov	r1, r8
    3e54:	4638      	mov	r0, r7
    3e56:	f00b f90f 	bl	f078 <usb_mtp_send>
    3e5a:	2800      	cmp	r0, #0
    3e5c:	ddf8      	ble.n	3e50 <MTPD::loop()+0x770>
    3e5e:	e52a      	b.n	38b6 <MTPD::loop()+0x1d6>
    3e60:	f242 0305 	movw	r3, #8197	; 0x2005
              break;
    3e64:	e580      	b.n	3968 <MTPD::loop()+0x288>
            CONTAINER->op=return_code;
    3e66:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            TRANSMIT(WriteDescriptor());
    3e6a:	f104 0720 	add.w	r7, r4, #32
            CONTAINER->op=return_code;
    3e6e:	260c      	movs	r6, #12
    3e70:	e560      	b.n	3934 <MTPD::loop()+0x254>
            TRANSMIT(WriteDescriptor());
    3e72:	4682      	mov	sl, r0
    3e74:	f242 0301 	movw	r3, #8193	; 0x2001
    3e78:	2610      	movs	r6, #16
    3e7a:	e55b      	b.n	3934 <MTPD::loop()+0x254>
    3e7c:	20035268 	.word	0x20035268
    3e80:	10150002 	.word	0x10150002
    3e84:	10140002 	.word	0x10140002
  { uint32_t store = Storage2Store(storage);
    3e88:	f10a 3aff 	add.w	sl, sl, #4294967295
    storage_->StartGetObjectHandles(store, parent);
    3e8c:	461a      	mov	r2, r3
    3e8e:	6820      	ldr	r0, [r4, #0]
    3e90:	4651      	mov	r1, sl
    3e92:	f001 febb 	bl	5c0c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
    while (storage_->GetNextObjectHandle(store)) num++;
    3e96:	e001      	b.n	3e9c <MTPD::loop()+0x7bc>
    3e98:	f10b 0b01 	add.w	fp, fp, #1
    3e9c:	4651      	mov	r1, sl
    3e9e:	6820      	ldr	r0, [r4, #0]
    3ea0:	f001 fef8 	bl	5c94 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    3ea4:	2800      	cmp	r0, #0
    3ea6:	d1f7      	bne.n	3e98 <MTPD::loop()+0x7b8>
            CONTAINER->op=return_code;
    3ea8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            CONTAINER->params[0]=p1;
    3eac:	46da      	mov	sl, fp
            TRANSMIT(WriteDescriptor());
    3eae:	f104 0720 	add.w	r7, r4, #32
    3eb2:	e53f      	b.n	3934 <MTPD::loop()+0x254>
    if (*str) 
    3eb4:	4620      	mov	r0, r4
    3eb6:	493b      	ldr	r1, [pc, #236]	; (3fa4 <MTPD::loop()+0x8c4>)
    3eb8:	f7fe f866 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    3ebc:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3ec0:	a906      	add	r1, sp, #24
    3ec2:	4620      	mov	r0, r4
    3ec4:	330c      	adds	r3, #12
    3ec6:	220c      	movs	r2, #12
    3ec8:	9306      	str	r3, [sp, #24]
    3eca:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3ece:	f8ad 301e 	strh.w	r3, [sp, #30]
    3ed2:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    3ed6:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3eda:	9308      	str	r3, [sp, #32]
    3edc:	2302      	movs	r3, #2
    3ede:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3ee2:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3ee6:	f7fe f811 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    if (*str) 
    3eea:	492e      	ldr	r1, [pc, #184]	; (3fa4 <MTPD::loop()+0x8c4>)
    3eec:	4620      	mov	r0, r4
    3eee:	f7fe f84b 	bl	1f88 <MTPD::writestring(char const*) [clone .part.0]>
  }
    3ef2:	e668      	b.n	3bc6 <MTPD::loop()+0x4e6>
    3ef4:	4620      	mov	r0, r4
    3ef6:	f7fe f895 	bl	2024 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    3efa:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3efe:	4620      	mov	r0, r4
    3f00:	220c      	movs	r2, #12
    3f02:	330c      	adds	r3, #12
    3f04:	a906      	add	r1, sp, #24
    3f06:	9306      	str	r3, [sp, #24]
    3f08:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3f0c:	f8ad 301e 	strh.w	r3, [sp, #30]
    3f10:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    3f14:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3f18:	9308      	str	r3, [sp, #32]
    3f1a:	2302      	movs	r3, #2
    3f1c:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3f20:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3f24:	f7fd fff2 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
    switch (prop) {
    3f28:	4620      	mov	r0, r4
    3f2a:	f7fe f87b 	bl	2024 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
    3f2e:	e673      	b.n	3c18 <MTPD::loop()+0x538>
    3f30:	a906      	add	r1, sp, #24
    3f32:	e76a      	b.n	3e0a <MTPD::loop()+0x72a>
              TRANSMIT(getObjectPropsSupported(p1));
    3f34:	f04f 0800 	mov.w	r8, #0
    3f38:	2301      	movs	r3, #1
    3f3a:	4651      	mov	r1, sl
    3f3c:	4620      	mov	r0, r4
    3f3e:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3f42:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
    3f46:	f7fe fd65 	bl	2a14 <MTPD::getObjectPropsSupported(unsigned long)>
    3f4a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    3f4e:	220c      	movs	r2, #12
    3f50:	a906      	add	r1, sp, #24
    3f52:	330c      	adds	r3, #12
    3f54:	4620      	mov	r0, r4
    3f56:	9306      	str	r3, [sp, #24]
    3f58:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
    3f5c:	f8ad 301e 	strh.w	r3, [sp, #30]
    3f60:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    3f64:	f8c7 842c 	str.w	r8, [r7, #1068]	; 0x42c
    3f68:	9308      	str	r3, [sp, #32]
    3f6a:	2302      	movs	r3, #2
    3f6c:	f887 8428 	strb.w	r8, [r7, #1064]	; 0x428
    3f70:	f104 0720 	add.w	r7, r4, #32
    3f74:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3f78:	f7fd ffc8 	bl	1f0c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    3f7c:	4651      	mov	r1, sl
    3f7e:	4620      	mov	r0, r4
    3f80:	f7fe fd48 	bl	2a14 <MTPD::getObjectPropsSupported(unsigned long)>
    3f84:	9b06      	ldr	r3, [sp, #24]
    3f86:	f3c3 0808 	ubfx	r8, r3, #0, #9
    3f8a:	f1b8 0f00 	cmp.w	r8, #0
    3f8e:	f43f ac92 	beq.w	38b6 <MTPD::loop()+0x1d6>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3f92:	223c      	movs	r2, #60	; 0x3c
    3f94:	4641      	mov	r1, r8
    3f96:	4638      	mov	r0, r7
    3f98:	f00b f86e 	bl	f078 <usb_mtp_send>
    3f9c:	2800      	cmp	r0, #0
    3f9e:	ddf8      	ble.n	3f92 <MTPD::loop()+0x8b2>
    3fa0:	e489      	b.n	38b6 <MTPD::loop()+0x1d6>
    3fa2:	bf00      	nop
    3fa4:	20000b24 	.word	0x20000b24

00003fa8 <usb_init_events>:
    {
    3fa8:	b510      	push	{r4, lr}
        usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    3faa:	4b0c      	ldr	r3, [pc, #48]	; (3fdc <usb_init_events+0x34>)
    3fac:	2200      	movs	r2, #0
        usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
    3fae:	4c0c      	ldr	r4, [pc, #48]	; (3fe0 <usb_init_events+0x38>)
        usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    3fb0:	2120      	movs	r1, #32
    3fb2:	2005      	movs	r0, #5
    3fb4:	f00a fe8a 	bl	eccc <usb_config_tx>
        usb_config_rx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, rxEvent_event);
    3fb8:	4b0a      	ldr	r3, [pc, #40]	; (3fe4 <usb_init_events+0x3c>)
    3fba:	2200      	movs	r2, #0
    3fbc:	2120      	movs	r1, #32
    3fbe:	2005      	movs	r0, #5
    3fc0:	f00a fe52 	bl	ec68 <usb_config_rx>
        usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
    3fc4:	2300      	movs	r3, #0
    3fc6:	2220      	movs	r2, #32
    3fc8:	4620      	mov	r0, r4
    3fca:	4907      	ldr	r1, [pc, #28]	; (3fe8 <usb_init_events+0x40>)
    3fcc:	f00a feb0 	bl	ed30 <usb_prepare_transfer>
        usb_receive(MTP_EVENT_ENDPOINT, rx_event_transfer + 0);
    3fd0:	4621      	mov	r1, r4
    3fd2:	2005      	movs	r0, #5
    3fd4:	f00a fed8 	bl	ed88 <usb_receive>
    }
    3fd8:	2001      	movs	r0, #1
    3fda:	bd10      	pop	{r4, pc}
    3fdc:	00001eed 	.word	0x00001eed
    3fe0:	200096e0 	.word	0x200096e0
    3fe4:	00001efd 	.word	0x00001efd
    3fe8:	200096c0 	.word	0x200096c0

00003fec <menuGetLine()>:
{
    3fec:	b538      	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    3fee:	f00b fb6b 	bl	f6c8 <usb_serial_available>
  while(!Serial.available()) continue;
    3ff2:	2800      	cmp	r0, #0
    3ff4:	d0fb      	beq.n	3fee <menuGetLine()+0x2>
  count = Serial.readBytesUntil('\r',buffer,40);
    3ff6:	4c0d      	ldr	r4, [pc, #52]	; (402c <menuGetLine()+0x40>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    3ff8:	f241 3188 	movw	r1, #5000	; 0x1388
    3ffc:	4d0c      	ldr	r5, [pc, #48]	; (4030 <menuGetLine()+0x44>)
    3ffe:	2328      	movs	r3, #40	; 0x28
    4000:	4622      	mov	r2, r4
    4002:	60a9      	str	r1, [r5, #8]
    4004:	4628      	mov	r0, r5
    4006:	210d      	movs	r1, #13
    4008:	f009 f988 	bl	d31c <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    400c:	2200      	movs	r2, #0
  count = Serial.readBytesUntil('\r',buffer,40);
    400e:	4603      	mov	r3, r0
							  return write((const uint8_t *)str, strlen(str)); }
    4010:	4620      	mov	r0, r4
  buffer[count]=0;
    4012:	54e2      	strb	r2, [r4, r3]
    4014:	f00e fab4 	bl	12580 <strlen>
    4018:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    401a:	4620      	mov	r0, r4
    401c:	f00b fbbe 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4020:	4628      	mov	r0, r5
    4022:	f009 f833 	bl	d08c <Print::println()>
}
    4026:	4620      	mov	r0, r4
    4028:	bd38      	pop	{r3, r4, r5, pc}
    402a:	bf00      	nop
    402c:	200347d0 	.word	0x200347d0
    4030:	20008a0c 	.word	0x20008a0c

00004034 <printPar()>:
{
    4034:	b510      	push	{r4, lr}
    4036:	210c      	movs	r1, #12
    4038:	4862      	ldr	r0, [pc, #392]	; (41c4 <printPar()+0x190>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    403a:	4c63      	ldr	r4, [pc, #396]	; (41c8 <printPar()+0x194>)
    403c:	f00b fbae 	bl	f79c <usb_serial_write>
      Serial.print("SerNum(h) = "); Serial.println(SerNum,HEX);
    4040:	4962      	ldr	r1, [pc, #392]	; (41cc <printPar()+0x198>)
    4042:	2210      	movs	r2, #16
    4044:	2300      	movs	r3, #0
    4046:	4620      	mov	r0, r4
    4048:	6809      	ldr	r1, [r1, #0]
    404a:	f009 f849 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    404e:	4620      	mov	r0, r4
    4050:	f009 f81c 	bl	d08c <Print::println()>
    4054:	210c      	movs	r1, #12
    4056:	485e      	ldr	r0, [pc, #376]	; (41d0 <printPar()+0x19c>)
    4058:	f00b fba0 	bl	f79c <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    405c:	4b5d      	ldr	r3, [pc, #372]	; (41d4 <printPar()+0x1a0>)
	size_t println(long n)				{ return print(n) + println(); }
    405e:	4620      	mov	r0, r4
    4060:	6819      	ldr	r1, [r3, #0]
    4062:	f009 f807 	bl	d074 <Print::print(long)>
    4066:	4620      	mov	r0, r4
    4068:	f009 f810 	bl	d08c <Print::println()>
    406c:	210c      	movs	r1, #12
    406e:	485a      	ldr	r0, [pc, #360]	; (41d8 <printPar()+0x1a4>)
    4070:	f00b fb94 	bl	f79c <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    4074:	4b59      	ldr	r3, [pc, #356]	; (41dc <printPar()+0x1a8>)
	size_t print(int n)				{ return print((long)n); }
    4076:	4620      	mov	r0, r4
    4078:	8819      	ldrh	r1, [r3, #0]
    407a:	b209      	sxth	r1, r1
    407c:	f008 fffa 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4080:	4620      	mov	r0, r4
    4082:	f009 f803 	bl	d08c <Print::println()>
    4086:	210c      	movs	r1, #12
    4088:	4855      	ldr	r0, [pc, #340]	; (41e0 <printPar()+0x1ac>)
    408a:	f00b fb87 	bl	f79c <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    408e:	4b55      	ldr	r3, [pc, #340]	; (41e4 <printPar()+0x1b0>)
	size_t print(int n)				{ return print((long)n); }
    4090:	4620      	mov	r0, r4
    4092:	8819      	ldrh	r1, [r3, #0]
    4094:	b209      	sxth	r1, r1
    4096:	f008 ffed 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    409a:	4620      	mov	r0, r4
    409c:	f008 fff6 	bl	d08c <Print::println()>
    40a0:	210c      	movs	r1, #12
    40a2:	4851      	ldr	r0, [pc, #324]	; (41e8 <printPar()+0x1b4>)
    40a4:	f00b fb7a 	bl	f79c <usb_serial_write>
      Serial.print("again (g) = "); Serial.println(again);
    40a8:	4b50      	ldr	r3, [pc, #320]	; (41ec <printPar()+0x1b8>)
	size_t print(int n)				{ return print((long)n); }
    40aa:	4620      	mov	r0, r4
    40ac:	8819      	ldrh	r1, [r3, #0]
    40ae:	b209      	sxth	r1, r1
    40b0:	f008 ffe0 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    40b4:	4620      	mov	r0, r4
    40b6:	f008 ffe9 	bl	d08c <Print::println()>
    40ba:	210c      	movs	r1, #12
    40bc:	484c      	ldr	r0, [pc, #304]	; (41f0 <printPar()+0x1bc>)
    40be:	f00b fb6d 	bl	f79c <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    40c2:	4b4c      	ldr	r3, [pc, #304]	; (41f4 <printPar()+0x1c0>)
	size_t print(int n)				{ return print((long)n); }
    40c4:	4620      	mov	r0, r4
    40c6:	8819      	ldrh	r1, [r3, #0]
    40c8:	b289      	uxth	r1, r1
    40ca:	f008 ffd3 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    40ce:	4620      	mov	r0, r4
    40d0:	f008 ffdc 	bl	d08c <Print::println()>
    40d4:	210c      	movs	r1, #12
    40d6:	4848      	ldr	r0, [pc, #288]	; (41f8 <printPar()+0x1c4>)
    40d8:	f00b fb60 	bl	f79c <usb_serial_write>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    40dc:	4b47      	ldr	r3, [pc, #284]	; (41fc <printPar()+0x1c8>)
	size_t print(int n)				{ return print((long)n); }
    40de:	4620      	mov	r0, r4
    40e0:	8819      	ldrh	r1, [r3, #0]
    40e2:	b289      	uxth	r1, r1
    40e4:	f008 ffc6 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    40e8:	4620      	mov	r0, r4
    40ea:	f008 ffcf 	bl	d08c <Print::println()>
    40ee:	210c      	movs	r1, #12
    40f0:	4843      	ldr	r0, [pc, #268]	; (4200 <printPar()+0x1cc>)
    40f2:	f00b fb53 	bl	f79c <usb_serial_write>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    40f6:	4b43      	ldr	r3, [pc, #268]	; (4204 <printPar()+0x1d0>)
	size_t print(int n)				{ return print((long)n); }
    40f8:	4620      	mov	r0, r4
    40fa:	8819      	ldrh	r1, [r3, #0]
    40fc:	b289      	uxth	r1, r1
    40fe:	f008 ffb9 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4102:	4620      	mov	r0, r4
    4104:	f008 ffc2 	bl	d08c <Print::println()>
    4108:	210c      	movs	r1, #12
    410a:	483f      	ldr	r0, [pc, #252]	; (4208 <printPar()+0x1d4>)
    410c:	f00b fb46 	bl	f79c <usb_serial_write>
      Serial.print("h_1   (1) = "); Serial.println(h_1);
    4110:	4b3e      	ldr	r3, [pc, #248]	; (420c <printPar()+0x1d8>)
	size_t print(int n)				{ return print((long)n); }
    4112:	4620      	mov	r0, r4
    4114:	8819      	ldrh	r1, [r3, #0]
    4116:	b289      	uxth	r1, r1
    4118:	f008 ffac 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    411c:	4620      	mov	r0, r4
    411e:	f008 ffb5 	bl	d08c <Print::println()>
    4122:	210c      	movs	r1, #12
    4124:	483a      	ldr	r0, [pc, #232]	; (4210 <printPar()+0x1dc>)
    4126:	f00b fb39 	bl	f79c <usb_serial_write>
      Serial.print("h_2   (2) = "); Serial.println(h_2);
    412a:	4b3a      	ldr	r3, [pc, #232]	; (4214 <printPar()+0x1e0>)
	size_t print(int n)				{ return print((long)n); }
    412c:	4620      	mov	r0, r4
    412e:	8819      	ldrh	r1, [r3, #0]
    4130:	b289      	uxth	r1, r1
    4132:	f008 ff9f 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4136:	4620      	mov	r0, r4
    4138:	f008 ffa8 	bl	d08c <Print::println()>
    413c:	210c      	movs	r1, #12
    413e:	4836      	ldr	r0, [pc, #216]	; (4218 <printPar()+0x1e4>)
    4140:	f00b fb2c 	bl	f79c <usb_serial_write>
      Serial.print("h_3   (3) = "); Serial.println(h_3);
    4144:	4b35      	ldr	r3, [pc, #212]	; (421c <printPar()+0x1e8>)
	size_t print(int n)				{ return print((long)n); }
    4146:	4620      	mov	r0, r4
    4148:	8819      	ldrh	r1, [r3, #0]
    414a:	b289      	uxth	r1, r1
    414c:	f008 ff92 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4150:	4620      	mov	r0, r4
    4152:	f008 ff9b 	bl	d08c <Print::println()>
    4156:	210c      	movs	r1, #12
    4158:	4831      	ldr	r0, [pc, #196]	; (4220 <printPar()+0x1ec>)
    415a:	f00b fb1f 	bl	f79c <usb_serial_write>
      Serial.print("h_4   (4) = "); Serial.println(h_4);
    415e:	4b31      	ldr	r3, [pc, #196]	; (4224 <printPar()+0x1f0>)
	size_t print(int n)				{ return print((long)n); }
    4160:	4620      	mov	r0, r4
    4162:	8819      	ldrh	r1, [r3, #0]
    4164:	b289      	uxth	r1, r1
    4166:	f008 ff85 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    416a:	4620      	mov	r0, r4
    416c:	f008 ff8e 	bl	d08c <Print::println()>
    4170:	210c      	movs	r1, #12
    4172:	482d      	ldr	r0, [pc, #180]	; (4228 <printPar()+0x1f4>)
    4174:	f00b fb12 	bl	f79c <usb_serial_write>
      Serial.print("d_on  (5) = "); Serial.println(d_on);
    4178:	4b2c      	ldr	r3, [pc, #176]	; (422c <printPar()+0x1f8>)
	size_t print(int n)				{ return print((long)n); }
    417a:	4620      	mov	r0, r4
    417c:	8819      	ldrh	r1, [r3, #0]
    417e:	b289      	uxth	r1, r1
    4180:	f008 ff78 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4184:	4620      	mov	r0, r4
    4186:	f008 ff81 	bl	d08c <Print::println()>
    418a:	210c      	movs	r1, #12
    418c:	4828      	ldr	r0, [pc, #160]	; (4230 <printPar()+0x1fc>)
    418e:	f00b fb05 	bl	f79c <usb_serial_write>
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    4192:	4b28      	ldr	r3, [pc, #160]	; (4234 <printPar()+0x200>)
	size_t print(int n)				{ return print((long)n); }
    4194:	4620      	mov	r0, r4
    4196:	8819      	ldrh	r1, [r3, #0]
    4198:	b289      	uxth	r1, r1
    419a:	f008 ff6b 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    419e:	4620      	mov	r0, r4
    41a0:	f008 ff74 	bl	d08c <Print::println()>
    41a4:	210c      	movs	r1, #12
    41a6:	4824      	ldr	r0, [pc, #144]	; (4238 <printPar()+0x204>)
    41a8:	f00b faf8 	bl	f79c <usb_serial_write>
      Serial.print("d_0   (0) = "); Serial.println(d_0);
    41ac:	4b23      	ldr	r3, [pc, #140]	; (423c <printPar()+0x208>)
	size_t print(int n)				{ return print((long)n); }
    41ae:	4620      	mov	r0, r4
    41b0:	8819      	ldrh	r1, [r3, #0]
    41b2:	b209      	sxth	r1, r1
    41b4:	f008 ff5e 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    41b8:	4620      	mov	r0, r4
}
    41ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    41be:	f008 bf65 	b.w	d08c <Print::println()>
    41c2:	bf00      	nop
    41c4:	200006cc 	.word	0x200006cc
    41c8:	20008a0c 	.word	0x20008a0c
    41cc:	2000de08 	.word	0x2000de08
    41d0:	200006dc 	.word	0x200006dc
    41d4:	20008fcc 	.word	0x20008fcc
    41d8:	200006ec 	.word	0x200006ec
    41dc:	20035456 	.word	0x20035456
    41e0:	200006fc 	.word	0x200006fc
    41e4:	20035450 	.word	0x20035450
    41e8:	2000070c 	.word	0x2000070c
    41ec:	20035442 	.word	0x20035442
    41f0:	2000071c 	.word	0x2000071c
    41f4:	20009000 	.word	0x20009000
    41f8:	2000072c 	.word	0x2000072c
    41fc:	20009002 	.word	0x20009002
    4200:	2000073c 	.word	0x2000073c
    4204:	20035458 	.word	0x20035458
    4208:	2000074c 	.word	0x2000074c
    420c:	2003544c 	.word	0x2003544c
    4210:	2000075c 	.word	0x2000075c
    4214:	20008ffa 	.word	0x20008ffa
    4218:	2000076c 	.word	0x2000076c
    421c:	20008ffc 	.word	0x20008ffc
    4220:	2000077c 	.word	0x2000077c
    4224:	20008ffe 	.word	0x20008ffe
    4228:	2000078c 	.word	0x2000078c
    422c:	20008ff8 	.word	0x20008ff8
    4230:	2000079c 	.word	0x2000079c
    4234:	20035446 	.word	0x20035446
    4238:	200007ac 	.word	0x200007ac
    423c:	20035444 	.word	0x20035444

00004240 <menu3()>:
{   // have '!'
    4240:	b530      	push	{r4, r5, lr}
    4242:	b089      	sub	sp, #36	; 0x24
        virtual int available() { return usb_serial_available(); }
    4244:	f00b fa40 	bl	f6c8 <usb_serial_available>
    while(!Serial.available()) ;
    4248:	2800      	cmp	r0, #0
    424a:	d0fb      	beq.n	4244 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    424c:	f00b fa80 	bl	f750 <usb_serial_getchar>
    ch=Serial.read();
    4250:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    4252:	2864      	cmp	r0, #100	; 0x64
    4254:	d04c      	beq.n	42f0 <menu3()+0xb0>
    else if(ch=='t') // set time
    4256:	3830      	subs	r0, #48	; 0x30
    4258:	2847      	cmp	r0, #71	; 0x47
    425a:	d85d      	bhi.n	4318 <menu3()+0xd8>
    425c:	e8df f010 	tbh	[pc, r0, lsl #1]
    4260:	01160120 	.word	0x01160120
    4264:	0102010c 	.word	0x0102010c
    4268:	00ee00f8 	.word	0x00ee00f8
    426c:	005c00e4 	.word	0x005c00e4
    4270:	005c005c 	.word	0x005c005c
    4274:	005c005c 	.word	0x005c005c
    4278:	005c005c 	.word	0x005c005c
    427c:	005c005c 	.word	0x005c005c
    4280:	005c005c 	.word	0x005c005c
    4284:	005c005c 	.word	0x005c005c
    4288:	005c005c 	.word	0x005c005c
    428c:	005c005c 	.word	0x005c005c
    4290:	005c005c 	.word	0x005c005c
    4294:	005c005c 	.word	0x005c005c
    4298:	005c005c 	.word	0x005c005c
    429c:	005c005c 	.word	0x005c005c
    42a0:	005c005c 	.word	0x005c005c
    42a4:	005c005c 	.word	0x005c005c
    42a8:	005c005c 	.word	0x005c005c
    42ac:	005c005c 	.word	0x005c005c
    42b0:	005c005c 	.word	0x005c005c
    42b4:	005c005c 	.word	0x005c005c
    42b8:	005c005c 	.word	0x005c005c
    42bc:	005c005c 	.word	0x005c005c
    42c0:	00da005c 	.word	0x00da005c
    42c4:	00cc00d6 	.word	0x00cc00d6
    42c8:	005c005c 	.word	0x005c005c
    42cc:	00ad00bd 	.word	0x00ad00bd
    42d0:	005c005c 	.word	0x005c005c
    42d4:	00a9005c 	.word	0x00a9005c
    42d8:	005c005c 	.word	0x005c005c
    42dc:	009600a0 	.word	0x009600a0
    42e0:	005c005c 	.word	0x005c005c
    42e4:	007d008c 	.word	0x007d008c
    42e8:	005c0068 	.word	0x005c0068
    42ec:	005e005c 	.word	0x005e005c
{ char *buffer=menuGetLine();
    42f0:	f7ff fe7c 	bl	3fec <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    42f4:	ad07      	add	r5, sp, #28
    42f6:	f10d 0113 	add.w	r1, sp, #19
    42fa:	ac06      	add	r4, sp, #24
    42fc:	aa05      	add	r2, sp, #20
    42fe:	f10d 0312 	add.w	r3, sp, #18
    4302:	9400      	str	r4, [sp, #0]
    4304:	e9cd 1501 	strd	r1, r5, [sp, #4]
    4308:	496a      	ldr	r1, [pc, #424]	; (44b4 <menu3()+0x274>)
    430a:	f00d fbcf 	bl	11aac <sscanf>
      rtcSetDate(year,month,day);
    430e:	9805      	ldr	r0, [sp, #20]
    4310:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    4314:	f001 f88c 	bl	5430 <rtcSetDate(int, int, int)>
}
    4318:	b009      	add	sp, #36	; 0x24
    431a:	bd30      	pop	{r4, r5, pc}
{ char *buffer=menuGetLine();
    431c:	f7ff fe66 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4320:	aa07      	add	r2, sp, #28
    4322:	4965      	ldr	r1, [pc, #404]	; (44b8 <menu3()+0x278>)
    4324:	f00d fbc2 	bl	11aac <sscanf>
    4328:	4b64      	ldr	r3, [pc, #400]	; (44bc <menu3()+0x27c>)
    432a:	9a07      	ldr	r2, [sp, #28]
    432c:	801a      	strh	r2, [r3, #0]
  return 1;
    432e:	e7f3      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4330:	f7ff fe5c 	bl	3fec <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    4334:	ad07      	add	r5, sp, #28
    4336:	f10d 0113 	add.w	r1, sp, #19
    433a:	ac06      	add	r4, sp, #24
    433c:	aa05      	add	r2, sp, #20
    433e:	f10d 0312 	add.w	r3, sp, #18
    4342:	9400      	str	r4, [sp, #0]
    4344:	e9cd 1501 	strd	r1, r5, [sp, #4]
    4348:	495a      	ldr	r1, [pc, #360]	; (44b4 <menu3()+0x274>)
    434a:	f00d fbaf 	bl	11aac <sscanf>
      rtcSetTime(hour,minutes,seconds);
    434e:	9805      	ldr	r0, [sp, #20]
    4350:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    4354:	f001 f884 	bl	5460 <rtcSetTime(int, int, int)>
    4358:	e7de      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    435a:	f7ff fe47 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    435e:	aa07      	add	r2, sp, #28
    4360:	4955      	ldr	r1, [pc, #340]	; (44b8 <menu3()+0x278>)
    4362:	f00d fba3 	bl	11aac <sscanf>
    4366:	4b56      	ldr	r3, [pc, #344]	; (44c0 <menu3()+0x280>)
    4368:	9a07      	ldr	r2, [sp, #28]
    436a:	801a      	strh	r2, [r3, #0]
    else if(ch=='s') { menuGetInt16((int16_t *)&shift); if(shift<0) shift=0; }
    436c:	881a      	ldrh	r2, [r3, #0]
    436e:	0412      	lsls	r2, r2, #16
    4370:	d5d2      	bpl.n	4318 <menu3()+0xd8>
    4372:	2200      	movs	r2, #0
    4374:	801a      	strh	r2, [r3, #0]
    4376:	e7cf      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4378:	f7ff fe38 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    437c:	aa07      	add	r2, sp, #28
    437e:	494e      	ldr	r1, [pc, #312]	; (44b8 <menu3()+0x278>)
    4380:	f00d fb94 	bl	11aac <sscanf>
    4384:	4b4f      	ldr	r3, [pc, #316]	; (44c4 <menu3()+0x284>)
    4386:	9a07      	ldr	r2, [sp, #28]
    4388:	801a      	strh	r2, [r3, #0]
  return 1;
    438a:	e7c5      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    438c:	f7ff fe2e 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4390:	aa07      	add	r2, sp, #28
    4392:	4949      	ldr	r1, [pc, #292]	; (44b8 <menu3()+0x278>)
    4394:	f00d fb8a 	bl	11aac <sscanf>
    4398:	4b4b      	ldr	r3, [pc, #300]	; (44c8 <menu3()+0x288>)
    439a:	9a07      	ldr	r2, [sp, #28]
    439c:	801a      	strh	r2, [r3, #0]
  return 1;
    439e:	e7bb      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    43a0:	f7ff fe24 	bl	3fec <menuGetLine()>
  return sscanf(buffer,"%s",txt);
    43a4:	4a49      	ldr	r2, [pc, #292]	; (44cc <menu3()+0x28c>)
    43a6:	494a      	ldr	r1, [pc, #296]	; (44d0 <menu3()+0x290>)
}
    43a8:	b009      	add	sp, #36	; 0x24
    43aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return sscanf(buffer,"%s",txt);
    43ae:	f00d bb7d 	b.w	11aac <sscanf>
{ char *buffer=menuGetLine();
    43b2:	f7ff fe1b 	bl	3fec <menuGetLine()>
  return sscanf(buffer,"%s",txt);
    43b6:	4a47      	ldr	r2, [pc, #284]	; (44d4 <menu3()+0x294>)
    43b8:	e7f5      	b.n	43a6 <menu3()+0x166>
{ char *buffer=menuGetLine();
    43ba:	f7ff fe17 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    43be:	aa07      	add	r2, sp, #28
    43c0:	493d      	ldr	r1, [pc, #244]	; (44b8 <menu3()+0x278>)
    43c2:	f00d fb73 	bl	11aac <sscanf>
    43c6:	4b44      	ldr	r3, [pc, #272]	; (44d8 <menu3()+0x298>)
    43c8:	9a07      	ldr	r2, [sp, #28]
    43ca:	801a      	strh	r2, [r3, #0]
    else if(ch=='g') { menuGetInt16((int16_t *)&again); setAGain(again); }
    43cc:	8818      	ldrh	r0, [r3, #0]
    43ce:	b240      	sxtb	r0, r0
}
    43d0:	b009      	add	sp, #36	; 0x24
    43d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    else if(ch=='g') { menuGetInt16((int16_t *)&again); setAGain(again); }
    43d6:	f7fc bd0f 	b.w	df8 <setAGain(signed char)>
{ char *buffer=menuGetLine();
    43da:	f7ff fe07 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    43de:	aa07      	add	r2, sp, #28
    43e0:	4935      	ldr	r1, [pc, #212]	; (44b8 <menu3()+0x278>)
    43e2:	f00d fb63 	bl	11aac <sscanf>
    43e6:	4b3d      	ldr	r3, [pc, #244]	; (44dc <menu3()+0x29c>)
    43e8:	9a07      	ldr	r2, [sp, #28]
    43ea:	601a      	str	r2, [r3, #0]
    else if(ch=='f') { menuGetInt32((int32_t *)&fsamp); acqModifyFrequency(fsamp); }
    43ec:	6818      	ldr	r0, [r3, #0]
}
    43ee:	b009      	add	sp, #36	; 0x24
    43f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    else if(ch=='f') { menuGetInt32((int32_t *)&fsamp); acqModifyFrequency(fsamp); }
    43f4:	f7fc bcd4 	b.w	da0 <acqModifyFrequency(unsigned long)>
{ char *buffer=menuGetLine();
    43f8:	f7ff fdf8 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    43fc:	aa07      	add	r2, sp, #28
    43fe:	492e      	ldr	r1, [pc, #184]	; (44b8 <menu3()+0x278>)
    4400:	f00d fb54 	bl	11aac <sscanf>
    4404:	4b36      	ldr	r3, [pc, #216]	; (44e0 <menu3()+0x2a0>)
    4406:	9a07      	ldr	r2, [sp, #28]
    4408:	801a      	strh	r2, [r3, #0]
  return 1;
    440a:	e785      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    440c:	f7ff fdee 	bl	3fec <menuGetLine()>
  return sscanf(buffer,"%s",txt);
    4410:	4a34      	ldr	r2, [pc, #208]	; (44e4 <menu3()+0x2a4>)
    4412:	e7c8      	b.n	43a6 <menu3()+0x166>
{ char *buffer=menuGetLine();
    4414:	f7ff fdea 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4418:	aa07      	add	r2, sp, #28
    441a:	4927      	ldr	r1, [pc, #156]	; (44b8 <menu3()+0x278>)
    441c:	f00d fb46 	bl	11aac <sscanf>
    4420:	4b31      	ldr	r3, [pc, #196]	; (44e8 <menu3()+0x2a8>)
    4422:	9a07      	ldr	r2, [sp, #28]
    4424:	801a      	strh	r2, [r3, #0]
  return 1;
    4426:	e777      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4428:	f7ff fde0 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    442c:	aa07      	add	r2, sp, #28
    442e:	4922      	ldr	r1, [pc, #136]	; (44b8 <menu3()+0x278>)
    4430:	f00d fb3c 	bl	11aac <sscanf>
    4434:	4b2d      	ldr	r3, [pc, #180]	; (44ec <menu3()+0x2ac>)
    4436:	9a07      	ldr	r2, [sp, #28]
    4438:	801a      	strh	r2, [r3, #0]
  return 1;
    443a:	e76d      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    443c:	f7ff fdd6 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4440:	aa07      	add	r2, sp, #28
    4442:	491d      	ldr	r1, [pc, #116]	; (44b8 <menu3()+0x278>)
    4444:	f00d fb32 	bl	11aac <sscanf>
    4448:	4b29      	ldr	r3, [pc, #164]	; (44f0 <menu3()+0x2b0>)
    444a:	9a07      	ldr	r2, [sp, #28]
    444c:	801a      	strh	r2, [r3, #0]
  return 1;
    444e:	e763      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4450:	f7ff fdcc 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4454:	aa07      	add	r2, sp, #28
    4456:	4918      	ldr	r1, [pc, #96]	; (44b8 <menu3()+0x278>)
    4458:	f00d fb28 	bl	11aac <sscanf>
    445c:	4b25      	ldr	r3, [pc, #148]	; (44f4 <menu3()+0x2b4>)
    445e:	9a07      	ldr	r2, [sp, #28]
    4460:	801a      	strh	r2, [r3, #0]
  return 1;
    4462:	e759      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4464:	f7ff fdc2 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4468:	aa07      	add	r2, sp, #28
    446a:	4913      	ldr	r1, [pc, #76]	; (44b8 <menu3()+0x278>)
    446c:	f00d fb1e 	bl	11aac <sscanf>
    4470:	4b21      	ldr	r3, [pc, #132]	; (44f8 <menu3()+0x2b8>)
    4472:	9a07      	ldr	r2, [sp, #28]
    4474:	801a      	strh	r2, [r3, #0]
  return 1;
    4476:	e74f      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    4478:	f7ff fdb8 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    447c:	aa07      	add	r2, sp, #28
    447e:	490e      	ldr	r1, [pc, #56]	; (44b8 <menu3()+0x278>)
    4480:	f00d fb14 	bl	11aac <sscanf>
    4484:	4b1d      	ldr	r3, [pc, #116]	; (44fc <menu3()+0x2bc>)
    4486:	9a07      	ldr	r2, [sp, #28]
    4488:	801a      	strh	r2, [r3, #0]
  return 1;
    448a:	e745      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    448c:	f7ff fdae 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4490:	aa07      	add	r2, sp, #28
    4492:	4909      	ldr	r1, [pc, #36]	; (44b8 <menu3()+0x278>)
    4494:	f00d fb0a 	bl	11aac <sscanf>
    4498:	4b19      	ldr	r3, [pc, #100]	; (4500 <menu3()+0x2c0>)
    449a:	9a07      	ldr	r2, [sp, #28]
    449c:	801a      	strh	r2, [r3, #0]
  return 1;
    449e:	e73b      	b.n	4318 <menu3()+0xd8>
{ char *buffer=menuGetLine();
    44a0:	f7ff fda4 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    44a4:	aa07      	add	r2, sp, #28
    44a6:	4904      	ldr	r1, [pc, #16]	; (44b8 <menu3()+0x278>)
    44a8:	f00d fb00 	bl	11aac <sscanf>
    44ac:	4b15      	ldr	r3, [pc, #84]	; (4504 <menu3()+0x2c4>)
    44ae:	9a07      	ldr	r2, [sp, #28]
    44b0:	801a      	strh	r2, [r3, #0]
  return 1;
    44b2:	e731      	b.n	4318 <menu3()+0xd8>
    44b4:	20000698 	.word	0x20000698
    44b8:	200006a0 	.word	0x200006a0
    44bc:	20033e5c 	.word	0x20033e5c
    44c0:	20035456 	.word	0x20035456
    44c4:	20035458 	.word	0x20035458
    44c8:	20009002 	.word	0x20009002
    44cc:	20034c00 	.word	0x20034c00
    44d0:	200006a4 	.word	0x200006a4
    44d4:	20034bb0 	.word	0x20034bb0
    44d8:	20035442 	.word	0x20035442
    44dc:	20008fcc 	.word	0x20008fcc
    44e0:	20035450 	.word	0x20035450
    44e4:	20034b10 	.word	0x20034b10
    44e8:	20009000 	.word	0x20009000
    44ec:	20035446 	.word	0x20035446
    44f0:	20008ff8 	.word	0x20008ff8
    44f4:	20008ffe 	.word	0x20008ffe
    44f8:	20008ffc 	.word	0x20008ffc
    44fc:	20008ffa 	.word	0x20008ffa
    4500:	2003544c 	.word	0x2003544c
    4504:	20035444 	.word	0x20035444

00004508 <saveParameters()>:
{
    4508:	b410      	push	{r4}
  store[4]  = proc;
    450a:	481f      	ldr	r0, [pc, #124]	; (4588 <saveParameters()+0x80>)
  store[1]  = t_acq;
    450c:	4c1f      	ldr	r4, [pc, #124]	; (458c <saveParameters()+0x84>)
  store[2]  = t_on;
    450e:	4a20      	ldr	r2, [pc, #128]	; (4590 <saveParameters()+0x88>)
  store[3]  = t_rep;
    4510:	4b20      	ldr	r3, [pc, #128]	; (4594 <saveParameters()+0x8c>)
  store[1]  = t_acq;
    4512:	f8b4 c000 	ldrh.w	ip, [r4]
  store[2]  = t_on;
    4516:	8812      	ldrh	r2, [r2, #0]
  store[3]  = t_rep;
    4518:	881b      	ldrh	r3, [r3, #0]
  store[4]  = proc;
    451a:	8804      	ldrh	r4, [r0, #0]
  store[1]  = t_acq;
    451c:	481e      	ldr	r0, [pc, #120]	; (4598 <saveParameters()+0x90>)
  store[5]  = shift;
    451e:	491f      	ldr	r1, [pc, #124]	; (459c <saveParameters()+0x94>)
  store[3]  = t_rep;
    4520:	80c3      	strh	r3, [r0, #6]
  store[6]  = h_1;
    4522:	4b1f      	ldr	r3, [pc, #124]	; (45a0 <saveParameters()+0x98>)
  store[5]  = shift;
    4524:	8809      	ldrh	r1, [r1, #0]
  store[6]  = h_1;
    4526:	881b      	ldrh	r3, [r3, #0]
  store[2]  = t_on;
    4528:	8082      	strh	r2, [r0, #4]
  store[6]  = h_1;
    452a:	8183      	strh	r3, [r0, #12]
  store[7]  = h_2;
    452c:	4a1d      	ldr	r2, [pc, #116]	; (45a4 <saveParameters()+0x9c>)
  store[8]  = h_3;
    452e:	4b1e      	ldr	r3, [pc, #120]	; (45a8 <saveParameters()+0xa0>)
  store[4]  = proc;
    4530:	8104      	strh	r4, [r0, #8]
  store[5]  = shift;
    4532:	8141      	strh	r1, [r0, #10]
  store[7]  = h_2;
    4534:	8814      	ldrh	r4, [r2, #0]
  store[9]  = h_4;
    4536:	491d      	ldr	r1, [pc, #116]	; (45ac <saveParameters()+0xa4>)
  store[8]  = h_3;
    4538:	881b      	ldrh	r3, [r3, #0]
  store[10] = d_on;
    453a:	4a1d      	ldr	r2, [pc, #116]	; (45b0 <saveParameters()+0xa8>)
  store[7]  = h_2;
    453c:	81c4      	strh	r4, [r0, #14]
  store[8]  = h_3;
    453e:	8203      	strh	r3, [r0, #16]
  store[9]  = h_4;
    4540:	880c      	ldrh	r4, [r1, #0]
  store[12] = fsamp/1000;
    4542:	4b1c      	ldr	r3, [pc, #112]	; (45b4 <saveParameters()+0xac>)
  store[10] = d_on;
    4544:	8811      	ldrh	r1, [r2, #0]
  store[11] = d_rep;
    4546:	4a1c      	ldr	r2, [pc, #112]	; (45b8 <saveParameters()+0xb0>)
  store[10] = d_on;
    4548:	8281      	strh	r1, [r0, #20]
  store[11] = d_rep;
    454a:	8812      	ldrh	r2, [r2, #0]
  store[12] = fsamp/1000;
    454c:	491b      	ldr	r1, [pc, #108]	; (45bc <saveParameters()+0xb4>)
    454e:	681b      	ldr	r3, [r3, #0]
  store[11] = d_rep;
    4550:	82c2      	strh	r2, [r0, #22]
  store[12] = fsamp/1000;
    4552:	17da      	asrs	r2, r3, #31
    4554:	fb81 1303 	smull	r1, r3, r1, r3
  store[9]  = h_4;
    4558:	8244      	strh	r4, [r0, #18]
  store[12] = fsamp/1000;
    455a:	ebc2 13a3 	rsb	r3, r2, r3, asr #6
  store[13] = again;
    455e:	4c18      	ldr	r4, [pc, #96]	; (45c0 <saveParameters()+0xb8>)
  store[15] = d_0;
    4560:	4918      	ldr	r1, [pc, #96]	; (45c4 <saveParameters()+0xbc>)
  store[14] = dgain;
    4562:	4a19      	ldr	r2, [pc, #100]	; (45c8 <saveParameters()+0xc0>)
  store[1]  = t_acq;
    4564:	f8a0 c002 	strh.w	ip, [r0, #2]
  store[12] = fsamp/1000;
    4568:	8303      	strh	r3, [r0, #24]
  store[13] = again;
    456a:	f8b4 c000 	ldrh.w	ip, [r4]
  store[14] = dgain;
    456e:	8812      	ldrh	r2, [r2, #0]
  store[15] = d_0;
    4570:	880b      	ldrh	r3, [r1, #0]
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    4572:	2100      	movs	r1, #0
  store[14] = dgain;
    4574:	8382      	strh	r2, [r0, #28]
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    4576:	2220      	movs	r2, #32
}
    4578:	f85d 4b04 	ldr.w	r4, [sp], #4
  store[13] = again;
    457c:	f8a0 c01a 	strh.w	ip, [r0, #26]
  store[15] = d_0;
    4580:	83c3      	strh	r3, [r0, #30]
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    4582:	f009 bb73 	b.w	dc6c <eeprom_write_block>
    4586:	bf00      	nop
    4588:	20035450 	.word	0x20035450
    458c:	20009000 	.word	0x20009000
    4590:	20009002 	.word	0x20009002
    4594:	20035458 	.word	0x20035458
    4598:	20033e5c 	.word	0x20033e5c
    459c:	20035456 	.word	0x20035456
    45a0:	2003544c 	.word	0x2003544c
    45a4:	20008ffa 	.word	0x20008ffa
    45a8:	20008ffc 	.word	0x20008ffc
    45ac:	20008ffe 	.word	0x20008ffe
    45b0:	20008ff8 	.word	0x20008ff8
    45b4:	20008fcc 	.word	0x20008fcc
    45b8:	20035446 	.word	0x20035446
    45bc:	10624dd3 	.word	0x10624dd3
    45c0:	20035442 	.word	0x20035442
    45c4:	20035444 	.word	0x20035444
    45c8:	20035448 	.word	0x20035448

000045cc <menu1(short)>:
{   // have ':'
    45cc:	b530      	push	{r4, r5, lr}
    45ce:	4605      	mov	r5, r0
    45d0:	b083      	sub	sp, #12
        virtual int available() { return usb_serial_available(); }
    45d2:	f00b f879 	bl	f6c8 <usb_serial_available>
    while(!Serial.available()) ;
    45d6:	2800      	cmp	r0, #0
    45d8:	d0fb      	beq.n	45d2 <menu1(short)+0x6>
        virtual int read() { return usb_serial_getchar(); }
    45da:	f00b f8b9 	bl	f750 <usb_serial_getchar>
    ch=Serial.read();
    45de:	b2c4      	uxtb	r4, r0
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    45e0:	4620      	mov	r0, r4
    45e2:	f00b f8c5 	bl	f770 <usb_serial_putchar>
	size_t println(char c)				{ return print(c) + println(); }
    45e6:	4819      	ldr	r0, [pc, #100]	; (464c <menu1(short)+0x80>)
    45e8:	f008 fd50 	bl	d08c <Print::println()>
    if(ch=='w') 
    45ec:	2c77      	cmp	r4, #119	; 0x77
    45ee:	d019      	beq.n	4624 <menu1(short)+0x58>
    else if(ch=='m') // control monitor (needed for gui)
    45f0:	2c6d      	cmp	r4, #109	; 0x6d
    45f2:	d021      	beq.n	4638 <menu1(short)+0x6c>
    else if(ch=='c') // transfer internal rtc to external rtc
    45f4:	2c63      	cmp	r4, #99	; 0x63
    45f6:	d00e      	beq.n	4616 <menu1(short)+0x4a>
    45f8:	4620      	mov	r0, r4
    45fa:	f00b f8b9 	bl	f770 <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    45fe:	210f      	movs	r1, #15
    4600:	4813      	ldr	r0, [pc, #76]	; (4650 <menu1(short)+0x84>)
    4602:	f00b f8cb 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4606:	4811      	ldr	r0, [pc, #68]	; (464c <menu1(short)+0x80>)
    4608:	f008 fd40 	bl	d08c <Print::println()>
        virtual int available() { return usb_serial_available(); }
    460c:	f00b f85c 	bl	f6c8 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    4610:	b128      	cbz	r0, 461e <menu1(short)+0x52>
        virtual int read() { return usb_serial_getchar(); }
    4612:	f00b f89d 	bl	f750 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4616:	f00b f857 	bl	f6c8 <usb_serial_available>
    461a:	2800      	cmp	r0, #0
    461c:	d1f9      	bne.n	4612 <menu1(short)+0x46>
}
    461e:	4628      	mov	r0, r5
    4620:	b003      	add	sp, #12
    4622:	bd30      	pop	{r4, r5, pc}
    { saveParameters();
    4624:	f7ff ff70 	bl	4508 <saveParameters()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4628:	210f      	movs	r1, #15
    462a:	480a      	ldr	r0, [pc, #40]	; (4654 <menu1(short)+0x88>)
    462c:	f00b f8b6 	bl	f79c <usb_serial_write>
    4630:	4806      	ldr	r0, [pc, #24]	; (464c <menu1(short)+0x80>)
    4632:	f008 fd2b 	bl	d08c <Print::println()>
    4636:	e7ee      	b.n	4616 <menu1(short)+0x4a>
{ char *buffer=menuGetLine();
    4638:	f7ff fcd8 	bl	3fec <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    463c:	aa01      	add	r2, sp, #4
    463e:	4906      	ldr	r1, [pc, #24]	; (4658 <menu1(short)+0x8c>)
    4640:	f00d fa34 	bl	11aac <sscanf>
    4644:	4b05      	ldr	r3, [pc, #20]	; (465c <menu1(short)+0x90>)
    4646:	9a01      	ldr	r2, [sp, #4]
    4648:	801a      	strh	r2, [r3, #0]
  return 1;
    464a:	e7e4      	b.n	4616 <menu1(short)+0x4a>
    464c:	20008a0c 	.word	0x20008a0c
    4650:	200005f4 	.word	0x200005f4
    4654:	200005e4 	.word	0x200005e4
    4658:	200006a0 	.word	0x200006a0
    465c:	2003544e 	.word	0x2003544e

00004660 <loadParameters()>:
{
    4660:	b538      	push	{r3, r4, r5, lr}
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    4662:	4c23      	ldr	r4, [pc, #140]	; (46f0 <loadParameters()+0x90>)
    4664:	2220      	movs	r2, #32
	size_t print(int n)				{ return print((long)n); }
    4666:	4d23      	ldr	r5, [pc, #140]	; (46f4 <loadParameters()+0x94>)
    4668:	2100      	movs	r1, #0
    466a:	4620      	mov	r0, r4
    466c:	f009 f982 	bl	d974 <eeprom_read_block>
    4670:	8821      	ldrh	r1, [r4, #0]
    4672:	4628      	mov	r0, r5
    4674:	f008 fcfe 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4678:	4628      	mov	r0, r5
    467a:	f008 fd07 	bl	d08c <Print::println()>
    store[2]  = t_on     = T_ON;
    467e:	4d1e      	ldr	r5, [pc, #120]	; (46f8 <loadParameters()+0x98>)
    store[1]  = t_acq    = T_ACQ;
    4680:	2214      	movs	r2, #20
    store[2]  = t_on     = T_ON;
    4682:	203c      	movs	r0, #60	; 0x3c
    store[1]  = t_acq    = T_ACQ;
    4684:	491d      	ldr	r1, [pc, #116]	; (46fc <loadParameters()+0x9c>)
  store[0]=0;
    4686:	2300      	movs	r3, #0
    store[2]  = t_on     = T_ON;
    4688:	80a0      	strh	r0, [r4, #4]
    store[1]  = t_acq    = T_ACQ;
    468a:	800a      	strh	r2, [r1, #0]
    store[9]  = h_4      = H_4;
    468c:	2118      	movs	r1, #24
    store[2]  = t_on     = T_ON;
    468e:	8028      	strh	r0, [r5, #0]
    store[3]  = t_rep    = T_REP;
    4690:	481b      	ldr	r0, [pc, #108]	; (4700 <loadParameters()+0xa0>)
    store[1]  = t_acq    = T_ACQ;
    4692:	8062      	strh	r2, [r4, #2]
    store[7]  = h_2      = H_2;
    4694:	220c      	movs	r2, #12
    store[3]  = t_rep    = T_REP;
    4696:	8003      	strh	r3, [r0, #0]
    store[4]  = proc     = PROC_MODE;
    4698:	481a      	ldr	r0, [pc, #104]	; (4704 <loadParameters()+0xa4>)
    store[7]  = h_2      = H_2;
    469a:	81e2      	strh	r2, [r4, #14]
    store[4]  = proc     = PROC_MODE;
    469c:	8003      	strh	r3, [r0, #0]
    store[5]  = shift    = SHIFT;
    469e:	481a      	ldr	r0, [pc, #104]	; (4708 <loadParameters()+0xa8>)
    store[8]  = h_3      = H_3;
    46a0:	8222      	strh	r2, [r4, #16]
    store[5]  = shift    = SHIFT;
    46a2:	8003      	strh	r3, [r0, #0]
    store[6]  = h_1      = H_1;
    46a4:	4819      	ldr	r0, [pc, #100]	; (470c <loadParameters()+0xac>)
    store[9]  = h_4      = H_4;
    46a6:	8261      	strh	r1, [r4, #18]
    store[6]  = h_1      = H_1;
    46a8:	8003      	strh	r3, [r0, #0]
    store[7]  = h_2      = H_2;
    46aa:	4819      	ldr	r0, [pc, #100]	; (4710 <loadParameters()+0xb0>)
  store[0]=0;
    46ac:	8023      	strh	r3, [r4, #0]
    store[7]  = h_2      = H_2;
    46ae:	8002      	strh	r2, [r0, #0]
    store[8]  = h_3      = H_3;
    46b0:	4818      	ldr	r0, [pc, #96]	; (4714 <loadParameters()+0xb4>)
    store[3]  = t_rep    = T_REP;
    46b2:	80e3      	strh	r3, [r4, #6]
    store[8]  = h_3      = H_3;
    46b4:	8002      	strh	r2, [r0, #0]
    store[10] = d_on     = D_ON;
    46b6:	2201      	movs	r2, #1
    store[9]  = h_4      = H_4;
    46b8:	4817      	ldr	r0, [pc, #92]	; (4718 <loadParameters()+0xb8>)
    store[10] = d_on     = D_ON;
    46ba:	82a2      	strh	r2, [r4, #20]
    store[9]  = h_4      = H_4;
    46bc:	8001      	strh	r1, [r0, #0]
    store[10] = d_on     = D_ON;
    46be:	4917      	ldr	r1, [pc, #92]	; (471c <loadParameters()+0xbc>)
    store[11] = d_rep    = D_REP;
    46c0:	4817      	ldr	r0, [pc, #92]	; (4720 <loadParameters()+0xc0>)
    store[10] = d_on     = D_ON;
    46c2:	800a      	strh	r2, [r1, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    46c4:	f64b 3180 	movw	r1, #48000	; 0xbb80
    46c8:	4a16      	ldr	r2, [pc, #88]	; (4724 <loadParameters()+0xc4>)
    store[11] = d_rep    = D_REP;
    46ca:	8003      	strh	r3, [r0, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    46cc:	2030      	movs	r0, #48	; 0x30
    46ce:	6011      	str	r1, [r2, #0]
    store[13] = again    = AGAIN;
    46d0:	4a15      	ldr	r2, [pc, #84]	; (4728 <loadParameters()+0xc8>)
    store[14] = dgain    = DGAIN;
    46d2:	4916      	ldr	r1, [pc, #88]	; (472c <loadParameters()+0xcc>)
    store[13] = again    = AGAIN;
    46d4:	8013      	strh	r3, [r2, #0]
    store[15] = d_0      = 0; 
    46d6:	4a16      	ldr	r2, [pc, #88]	; (4730 <loadParameters()+0xd0>)
    store[12] = (fsamp   = FSAMP)/1000; 
    46d8:	8320      	strh	r0, [r4, #24]
}
    46da:	4620      	mov	r0, r4
    store[14] = dgain    = DGAIN;
    46dc:	800b      	strh	r3, [r1, #0]
    store[4]  = proc     = PROC_MODE;
    46de:	8123      	strh	r3, [r4, #8]
    store[5]  = shift    = SHIFT;
    46e0:	8163      	strh	r3, [r4, #10]
    store[6]  = h_1      = H_1;
    46e2:	81a3      	strh	r3, [r4, #12]
    store[11] = d_rep    = D_REP;
    46e4:	82e3      	strh	r3, [r4, #22]
    store[13] = again    = AGAIN;
    46e6:	8363      	strh	r3, [r4, #26]
    store[14] = dgain    = DGAIN;
    46e8:	83a3      	strh	r3, [r4, #28]
    store[15] = d_0      = 0; 
    46ea:	83e3      	strh	r3, [r4, #30]
    46ec:	8013      	strh	r3, [r2, #0]
}
    46ee:	bd38      	pop	{r3, r4, r5, pc}
    46f0:	20033e5c 	.word	0x20033e5c
    46f4:	20008a0c 	.word	0x20008a0c
    46f8:	20009002 	.word	0x20009002
    46fc:	20009000 	.word	0x20009000
    4700:	20035458 	.word	0x20035458
    4704:	20035450 	.word	0x20035450
    4708:	20035456 	.word	0x20035456
    470c:	2003544c 	.word	0x2003544c
    4710:	20008ffa 	.word	0x20008ffa
    4714:	20008ffc 	.word	0x20008ffc
    4718:	20008ffe 	.word	0x20008ffe
    471c:	20008ff8 	.word	0x20008ff8
    4720:	20035446 	.word	0x20035446
    4724:	20008fcc 	.word	0x20008fcc
    4728:	20035442 	.word	0x20035442
    472c:	20035448 	.word	0x20035448
    4730:	20035444 	.word	0x20035444

00004734 <menu2()>:
{   // have '?'
    4734:	b510      	push	{r4, lr}
    4736:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    4738:	f00a ffc6 	bl	f6c8 <usb_serial_available>
    while(!Serial.available()) ;
    473c:	2800      	cmp	r0, #0
    473e:	d0fb      	beq.n	4738 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    4740:	f00b f806 	bl	f750 <usb_serial_getchar>
    ch=Serial.read();
    4744:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    4746:	2870      	cmp	r0, #112	; 0x70
    4748:	d054      	beq.n	47f4 <menu2()+0xc0>
    else if(ch=='d') // get date
    474a:	3830      	subs	r0, #48	; 0x30
    474c:	2847      	cmp	r0, #71	; 0x47
    474e:	d84b      	bhi.n	47e8 <menu2()+0xb4>
    4750:	e8df f010 	tbh	[pc, r0, lsl #1]
    4754:	01540086 	.word	0x01540086
    4758:	0148014e 	.word	0x0148014e
    475c:	013c0142 	.word	0x013c0142
    4760:	004a0136 	.word	0x004a0136
    4764:	004a004a 	.word	0x004a004a
    4768:	004a004a 	.word	0x004a004a
    476c:	004a004a 	.word	0x004a004a
    4770:	004a004a 	.word	0x004a004a
    4774:	004a004a 	.word	0x004a004a
    4778:	004a004a 	.word	0x004a004a
    477c:	004a004a 	.word	0x004a004a
    4780:	004a004a 	.word	0x004a004a
    4784:	004a004a 	.word	0x004a004a
    4788:	004a004a 	.word	0x004a004a
    478c:	004a004a 	.word	0x004a004a
    4790:	004a004a 	.word	0x004a004a
    4794:	004a004a 	.word	0x004a004a
    4798:	004a004a 	.word	0x004a004a
    479c:	004a004a 	.word	0x004a004a
    47a0:	004a004a 	.word	0x004a004a
    47a4:	004a004a 	.word	0x004a004a
    47a8:	004a004a 	.word	0x004a004a
    47ac:	004a004a 	.word	0x004a004a
    47b0:	004a004a 	.word	0x004a004a
    47b4:	0130004a 	.word	0x0130004a
    47b8:	011b0121 	.word	0x011b0121
    47bc:	004a010c 	.word	0x004a010c
    47c0:	00f900ff 	.word	0x00f900ff
    47c4:	004a00ea 	.word	0x004a00ea
    47c8:	00db004a 	.word	0x00db004a
    47cc:	004a004a 	.word	0x004a004a
    47d0:	00c600cc 	.word	0x00c600cc
    47d4:	004a004a 	.word	0x004a004a
    47d8:	00b200b8 	.word	0x00b200b8
    47dc:	004a00a3 	.word	0x004a00a3
    47e0:	0094004a 	.word	0x0094004a
    47e4:	f00a ffb4 	bl	f750 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    47e8:	f00a ff6e 	bl	f6c8 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    47ec:	2800      	cmp	r0, #0
    47ee:	d1f9      	bne.n	47e4 <menu2()+0xb0>
}
    47f0:	b008      	add	sp, #32
    47f2:	bd10      	pop	{r4, pc}
      Serial.println();
    47f4:	4884      	ldr	r0, [pc, #528]	; (4a08 <menu2()+0x2d4>)
    47f6:	f008 fc49 	bl	d08c <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    47fa:	2127      	movs	r1, #39	; 0x27
    47fc:	4883      	ldr	r0, [pc, #524]	; (4a0c <menu2()+0x2d8>)
    47fe:	f00a ffcd 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4802:	4881      	ldr	r0, [pc, #516]	; (4a08 <menu2()+0x2d4>)
    4804:	f008 fc42 	bl	d08c <Print::println()>
      rtc_get_datetime(&t);
    4808:	a806      	add	r0, sp, #24
    480a:	f000 fe05 	bl	5418 <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    480e:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    4812:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    4816:	f99d 001e 	ldrsb.w	r0, [sp, #30]
    481a:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    481e:	f99d 401b 	ldrsb.w	r4, [sp, #27]
    4822:	e9cd 3203 	strd	r3, r2, [sp, #12]
    4826:	e9cd 1001 	strd	r1, r0, [sp, #4]
    482a:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    482e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    4832:	4977      	ldr	r1, [pc, #476]	; (4a10 <menu2()+0x2dc>)
    4834:	9400      	str	r4, [sp, #0]
    4836:	4874      	ldr	r0, [pc, #464]	; (4a08 <menu2()+0x2d4>)
    4838:	f008 fc44 	bl	d0c4 <Print::printf(char const*, ...)>
      XRTCprintTime();
    483c:	f000 fe28 	bl	5490 <XRTCprintTime()>
      Serial.println(rtcGetTimestamp());
    4840:	f000 fde8 	bl	5414 <rtcGetTimestamp()>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    4844:	4604      	mov	r4, r0
    4846:	b128      	cbz	r0, 4854 <menu2()+0x120>
							  return write((const uint8_t *)str, strlen(str)); }
    4848:	f00d fe9a 	bl	12580 <strlen>
    484c:	4601      	mov	r1, r0
    484e:	4620      	mov	r0, r4
    4850:	f00a ffa4 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4854:	486c      	ldr	r0, [pc, #432]	; (4a08 <menu2()+0x2d4>)
    4856:	f008 fc19 	bl	d08c <Print::println()>
      printPar();
    485a:	f7ff fbeb 	bl	4034 <printPar()>
    485e:	e7c3      	b.n	47e8 <menu2()+0xb4>
    4860:	210c      	movs	r1, #12
    4862:	486c      	ldr	r0, [pc, #432]	; (4a14 <menu2()+0x2e0>)
    4864:	f00a ff9a 	bl	f79c <usb_serial_write>
    else if(ch=='0') { Serial.print("d_0   (0) = "); Serial.println(d_0); }
    4868:	4b6b      	ldr	r3, [pc, #428]	; (4a18 <menu2()+0x2e4>)
    else if(ch=='c') { Serial.print("proc  (c) = "); Serial.println(proc); }
    486a:	8819      	ldrh	r1, [r3, #0]
	size_t print(int n)				{ return print((long)n); }
    486c:	4866      	ldr	r0, [pc, #408]	; (4a08 <menu2()+0x2d4>)
    486e:	b209      	sxth	r1, r1
    4870:	f008 fc00 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4874:	4864      	ldr	r0, [pc, #400]	; (4a08 <menu2()+0x2d4>)
    4876:	f008 fc09 	bl	d08c <Print::println()>
    487a:	e7b5      	b.n	47e8 <menu2()+0xb4>
    else if(ch=='w') { uint16_t *params=loadParameters(); Serial.print("params[0]  = "); Serial.println(params[0]); }
    487c:	f7ff fef0 	bl	4660 <loadParameters()>
    4880:	4604      	mov	r4, r0
    4882:	210d      	movs	r1, #13
    4884:	4865      	ldr	r0, [pc, #404]	; (4a1c <menu2()+0x2e8>)
    4886:	f00a ff89 	bl	f79c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    488a:	8821      	ldrh	r1, [r4, #0]
    488c:	485e      	ldr	r0, [pc, #376]	; (4a08 <menu2()+0x2d4>)
    488e:	f008 fbf1 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4892:	485d      	ldr	r0, [pc, #372]	; (4a08 <menu2()+0x2d4>)
    4894:	f008 fbfa 	bl	d08c <Print::println()>
    4898:	e7a6      	b.n	47e8 <menu2()+0xb4>
      rtc_get_datetime(&t);
    489a:	a806      	add	r0, sp, #24
    489c:	f000 fdbc 	bl	5418 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec); 
    48a0:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    48a4:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    48a8:	9000      	str	r0, [sp, #0]
    48aa:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    48ae:	495c      	ldr	r1, [pc, #368]	; (4a20 <menu2()+0x2ec>)
    48b0:	4855      	ldr	r0, [pc, #340]	; (4a08 <menu2()+0x2d4>)
    48b2:	f008 fc07 	bl	d0c4 <Print::printf(char const*, ...)>
    48b6:	e797      	b.n	47e8 <menu2()+0xb4>
    48b8:	210c      	movs	r1, #12
    48ba:	485a      	ldr	r0, [pc, #360]	; (4a24 <menu2()+0x2f0>)
    48bc:	f00a ff6e 	bl	f79c <usb_serial_write>
    else if(ch=='s') { Serial.print("shift (s) = "); Serial.println(shift); }
    48c0:	4b59      	ldr	r3, [pc, #356]	; (4a28 <menu2()+0x2f4>)
    48c2:	e7d2      	b.n	486a <menu2()+0x136>
    48c4:	210c      	movs	r1, #12
    48c6:	4859      	ldr	r0, [pc, #356]	; (4a2c <menu2()+0x2f8>)
    48c8:	f00a ff68 	bl	f79c <usb_serial_write>
    else if(ch=='r') { Serial.print("t_rep (r) = "); Serial.println(t_rep); }
    48cc:	4b58      	ldr	r3, [pc, #352]	; (4a30 <menu2()+0x2fc>)
    else if(ch=='o') { Serial.print("t_on  (o) = "); Serial.println(t_on); }
    48ce:	8819      	ldrh	r1, [r3, #0]
	size_t print(int n)				{ return print((long)n); }
    48d0:	484d      	ldr	r0, [pc, #308]	; (4a08 <menu2()+0x2d4>)
    48d2:	b289      	uxth	r1, r1
    48d4:	f008 fbce 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    48d8:	484b      	ldr	r0, [pc, #300]	; (4a08 <menu2()+0x2d4>)
    48da:	f008 fbd7 	bl	d08c <Print::println()>
    48de:	e783      	b.n	47e8 <menu2()+0xb4>
    48e0:	210c      	movs	r1, #12
    48e2:	4854      	ldr	r0, [pc, #336]	; (4a34 <menu2()+0x300>)
    48e4:	f00a ff5a 	bl	f79c <usb_serial_write>
    48e8:	4b53      	ldr	r3, [pc, #332]	; (4a38 <menu2()+0x304>)
    48ea:	e7f0      	b.n	48ce <menu2()+0x19a>
    48ec:	210a      	movs	r1, #10
    48ee:	4853      	ldr	r0, [pc, #332]	; (4a3c <menu2()+0x308>)
    48f0:	f00a ff54 	bl	f79c <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    48f4:	4852      	ldr	r0, [pc, #328]	; (4a40 <menu2()+0x30c>)
    48f6:	f00d fe43 	bl	12580 <strlen>
    48fa:	4601      	mov	r1, r0
    48fc:	4850      	ldr	r0, [pc, #320]	; (4a40 <menu2()+0x30c>)
    48fe:	f00a ff4d 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4902:	4841      	ldr	r0, [pc, #260]	; (4a08 <menu2()+0x2d4>)
    4904:	f008 fbc2 	bl	d08c <Print::println()>
    4908:	e76e      	b.n	47e8 <menu2()+0xb4>
    490a:	210a      	movs	r1, #10
    490c:	484d      	ldr	r0, [pc, #308]	; (4a44 <menu2()+0x310>)
    490e:	f00a ff45 	bl	f79c <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    4912:	484d      	ldr	r0, [pc, #308]	; (4a48 <menu2()+0x314>)
    4914:	f00d fe34 	bl	12580 <strlen>
    4918:	4601      	mov	r1, r0
    491a:	484b      	ldr	r0, [pc, #300]	; (4a48 <menu2()+0x314>)
    491c:	f00a ff3e 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4920:	4839      	ldr	r0, [pc, #228]	; (4a08 <menu2()+0x2d4>)
    4922:	f008 fbb3 	bl	d08c <Print::println()>
    4926:	e75f      	b.n	47e8 <menu2()+0xb4>
    4928:	210c      	movs	r1, #12
    492a:	4848      	ldr	r0, [pc, #288]	; (4a4c <menu2()+0x318>)
    492c:	f00a ff36 	bl	f79c <usb_serial_write>
    else if(ch=='h') { Serial.print("SerNum(h) = "); Serial.println(SerNum,HEX); }
    4930:	4947      	ldr	r1, [pc, #284]	; (4a50 <menu2()+0x31c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    4932:	2300      	movs	r3, #0
    4934:	2210      	movs	r2, #16
    4936:	6809      	ldr	r1, [r1, #0]
    4938:	4833      	ldr	r0, [pc, #204]	; (4a08 <menu2()+0x2d4>)
    493a:	f008 fbd1 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    493e:	4832      	ldr	r0, [pc, #200]	; (4a08 <menu2()+0x2d4>)
    4940:	f008 fba4 	bl	d08c <Print::println()>
    4944:	e750      	b.n	47e8 <menu2()+0xb4>
    4946:	210c      	movs	r1, #12
    4948:	4842      	ldr	r0, [pc, #264]	; (4a54 <menu2()+0x320>)
    494a:	f00a ff27 	bl	f79c <usb_serial_write>
    else if(ch=='g') { Serial.print("again (g) = "); Serial.println(again); }
    494e:	4b42      	ldr	r3, [pc, #264]	; (4a58 <menu2()+0x324>)
    4950:	e78b      	b.n	486a <menu2()+0x136>
    4952:	210c      	movs	r1, #12
    4954:	4841      	ldr	r0, [pc, #260]	; (4a5c <menu2()+0x328>)
    4956:	f00a ff21 	bl	f79c <usb_serial_write>
    else if(ch=='f') { Serial.print("fsamp (f) = "); Serial.println(fsamp); }
    495a:	4b41      	ldr	r3, [pc, #260]	; (4a60 <menu2()+0x32c>)
	size_t println(long n)				{ return print(n) + println(); }
    495c:	482a      	ldr	r0, [pc, #168]	; (4a08 <menu2()+0x2d4>)
    495e:	6819      	ldr	r1, [r3, #0]
    4960:	f008 fb88 	bl	d074 <Print::print(long)>
    4964:	4828      	ldr	r0, [pc, #160]	; (4a08 <menu2()+0x2d4>)
    4966:	f008 fb91 	bl	d08c <Print::println()>
    496a:	e73d      	b.n	47e8 <menu2()+0xb4>
      rtc_get_datetime(&t);
    496c:	a806      	add	r0, sp, #24
    496e:	f000 fd53 	bl	5418 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    4972:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    4976:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    497a:	9000      	str	r0, [sp, #0]
    497c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    4980:	4938      	ldr	r1, [pc, #224]	; (4a64 <menu2()+0x330>)
    4982:	4821      	ldr	r0, [pc, #132]	; (4a08 <menu2()+0x2d4>)
    4984:	f008 fb9e 	bl	d0c4 <Print::printf(char const*, ...)>
    4988:	e72e      	b.n	47e8 <menu2()+0xb4>
    498a:	210c      	movs	r1, #12
    498c:	4836      	ldr	r0, [pc, #216]	; (4a68 <menu2()+0x334>)
    498e:	f00a ff05 	bl	f79c <usb_serial_write>
    else if(ch=='c') { Serial.print("proc  (c) = "); Serial.println(proc); }
    4992:	4b36      	ldr	r3, [pc, #216]	; (4a6c <menu2()+0x338>)
    4994:	e769      	b.n	486a <menu2()+0x136>
    4996:	210a      	movs	r1, #10
    4998:	4835      	ldr	r0, [pc, #212]	; (4a70 <menu2()+0x33c>)
    499a:	f00a feff 	bl	f79c <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    499e:	4835      	ldr	r0, [pc, #212]	; (4a74 <menu2()+0x340>)
    49a0:	f00d fdee 	bl	12580 <strlen>
    49a4:	4601      	mov	r1, r0
    49a6:	4833      	ldr	r0, [pc, #204]	; (4a74 <menu2()+0x340>)
    49a8:	f00a fef8 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    49ac:	4816      	ldr	r0, [pc, #88]	; (4a08 <menu2()+0x2d4>)
    49ae:	f008 fb6d 	bl	d08c <Print::println()>
    49b2:	e719      	b.n	47e8 <menu2()+0xb4>
    49b4:	210c      	movs	r1, #12
    49b6:	4830      	ldr	r0, [pc, #192]	; (4a78 <menu2()+0x344>)
    49b8:	f00a fef0 	bl	f79c <usb_serial_write>
    else if(ch=='a') { Serial.print("t_acq (a) = "); Serial.println(t_acq); }
    49bc:	4b2f      	ldr	r3, [pc, #188]	; (4a7c <menu2()+0x348>)
    49be:	e786      	b.n	48ce <menu2()+0x19a>
    49c0:	210c      	movs	r1, #12
    49c2:	482f      	ldr	r0, [pc, #188]	; (4a80 <menu2()+0x34c>)
    49c4:	f00a feea 	bl	f79c <usb_serial_write>
    else if(ch=='6') { Serial.print("d_rep (6) = "); Serial.println(d_rep); }
    49c8:	4b2e      	ldr	r3, [pc, #184]	; (4a84 <menu2()+0x350>)
    49ca:	e780      	b.n	48ce <menu2()+0x19a>
    49cc:	210c      	movs	r1, #12
    49ce:	482e      	ldr	r0, [pc, #184]	; (4a88 <menu2()+0x354>)
    49d0:	f00a fee4 	bl	f79c <usb_serial_write>
    else if(ch=='5') { Serial.print("d_on  (5) = "); Serial.println(d_on); }
    49d4:	4b2d      	ldr	r3, [pc, #180]	; (4a8c <menu2()+0x358>)
    49d6:	e77a      	b.n	48ce <menu2()+0x19a>
    49d8:	210c      	movs	r1, #12
    49da:	482d      	ldr	r0, [pc, #180]	; (4a90 <menu2()+0x35c>)
    49dc:	f00a fede 	bl	f79c <usb_serial_write>
    else if(ch=='4') { Serial.print("h_4   (4) = "); Serial.println(h_4); }
    49e0:	4b2c      	ldr	r3, [pc, #176]	; (4a94 <menu2()+0x360>)
    49e2:	e774      	b.n	48ce <menu2()+0x19a>
    49e4:	210c      	movs	r1, #12
    49e6:	482c      	ldr	r0, [pc, #176]	; (4a98 <menu2()+0x364>)
    49e8:	f00a fed8 	bl	f79c <usb_serial_write>
    else if(ch=='3') { Serial.print("h_3   (3) = "); Serial.println(h_3); }
    49ec:	4b2b      	ldr	r3, [pc, #172]	; (4a9c <menu2()+0x368>)
    49ee:	e76e      	b.n	48ce <menu2()+0x19a>
    49f0:	210c      	movs	r1, #12
    49f2:	482b      	ldr	r0, [pc, #172]	; (4aa0 <menu2()+0x36c>)
    49f4:	f00a fed2 	bl	f79c <usb_serial_write>
    else if(ch=='2') { Serial.print("h_2   (2) = "); Serial.println(h_2); }
    49f8:	4b2a      	ldr	r3, [pc, #168]	; (4aa4 <menu2()+0x370>)
    49fa:	e768      	b.n	48ce <menu2()+0x19a>
    49fc:	210c      	movs	r1, #12
    49fe:	482a      	ldr	r0, [pc, #168]	; (4aa8 <menu2()+0x374>)
    4a00:	f00a fecc 	bl	f79c <usb_serial_write>
    else if(ch=='1') { Serial.print("h_1   (1) = "); Serial.println(h_1); }
    4a04:	4b29      	ldr	r3, [pc, #164]	; (4aac <menu2()+0x378>)
    4a06:	e762      	b.n	48ce <menu2()+0x19a>
    4a08:	20008a0c 	.word	0x20008a0c
    4a0c:	20000978 	.word	0x20000978
    4a10:	20000604 	.word	0x20000604
    4a14:	200007ac 	.word	0x200007ac
    4a18:	20035444 	.word	0x20035444
    4a1c:	20000664 	.word	0x20000664
    4a20:	20000648 	.word	0x20000648
    4a24:	200006ec 	.word	0x200006ec
    4a28:	20035456 	.word	0x20035456
    4a2c:	2000073c 	.word	0x2000073c
    4a30:	20035458 	.word	0x20035458
    4a34:	2000072c 	.word	0x2000072c
    4a38:	20009002 	.word	0x20009002
    4a3c:	2000068c 	.word	0x2000068c
    4a40:	20034c00 	.word	0x20034c00
    4a44:	20000680 	.word	0x20000680
    4a48:	20034bb0 	.word	0x20034bb0
    4a4c:	200006cc 	.word	0x200006cc
    4a50:	2000de08 	.word	0x2000de08
    4a54:	2000070c 	.word	0x2000070c
    4a58:	20035442 	.word	0x20035442
    4a5c:	200006dc 	.word	0x200006dc
    4a60:	20008fcc 	.word	0x20008fcc
    4a64:	2000062c 	.word	0x2000062c
    4a68:	200006fc 	.word	0x200006fc
    4a6c:	20035450 	.word	0x20035450
    4a70:	20000674 	.word	0x20000674
    4a74:	20034b10 	.word	0x20034b10
    4a78:	2000071c 	.word	0x2000071c
    4a7c:	20009000 	.word	0x20009000
    4a80:	2000079c 	.word	0x2000079c
    4a84:	20035446 	.word	0x20035446
    4a88:	2000078c 	.word	0x2000078c
    4a8c:	20008ff8 	.word	0x20008ff8
    4a90:	2000077c 	.word	0x2000077c
    4a94:	20008ffe 	.word	0x20008ffe
    4a98:	2000076c 	.word	0x2000076c
    4a9c:	20008ffc 	.word	0x20008ffc
    4aa0:	2000075c 	.word	0x2000075c
    4aa4:	20008ffa 	.word	0x20008ffa
    4aa8:	2000074c 	.word	0x2000074c
    4aac:	2003544c 	.word	0x2003544c

00004ab0 <menu(short)>:
{
    4ab0:	b538      	push	{r3, r4, r5, lr}
    4ab2:	4604      	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    4ab4:	f00a fe08 	bl	f6c8 <usb_serial_available>
  if(Serial.available())
    4ab8:	b908      	cbnz	r0, 4abe <menu(short)+0xe>
}
    4aba:	4620      	mov	r0, r4
    4abc:	bd38      	pop	{r3, r4, r5, pc}
        virtual int read() { return usb_serial_getchar(); }
    4abe:	f00a fe47 	bl	f750 <usb_serial_getchar>
    char ch=Serial.read();
    4ac2:	b2c0      	uxtb	r0, r0
    if(ch=='s') {Serial.print("\n Start"); adc_init(); adcStatus(); status=CLOSED;}
    4ac4:	2873      	cmp	r0, #115	; 0x73
    4ac6:	d02a      	beq.n	4b1e <menu(short)+0x6e>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    4ac8:	2821      	cmp	r0, #33	; 0x21
    4aca:	d075      	beq.n	4bb8 <menu(short)+0x108>
    4acc:	f1a0 033a 	sub.w	r3, r0, #58	; 0x3a
    4ad0:	b2da      	uxtb	r2, r3
    4ad2:	2a3e      	cmp	r2, #62	; 0x3e
    4ad4:	d838      	bhi.n	4b48 <menu(short)+0x98>
    4ad6:	2b3e      	cmp	r3, #62	; 0x3e
    4ad8:	d836      	bhi.n	4b48 <menu(short)+0x98>
    4ada:	e8df f003 	tbb	[pc, r3]
    4ade:	353f      	.short	0x353f
    4ae0:	44353535 	.word	0x44353535
    4ae4:	35353535 	.word	0x35353535
    4ae8:	35353535 	.word	0x35353535
    4aec:	35353535 	.word	0x35353535
    4af0:	35353535 	.word	0x35353535
    4af4:	35353535 	.word	0x35353535
    4af8:	35353535 	.word	0x35353535
    4afc:	35353535 	.word	0x35353535
    4b00:	35353535 	.word	0x35353535
    4b04:	35473535 	.word	0x35473535
    4b08:	35354a35 	.word	0x35354a35
    4b0c:	35353535 	.word	0x35353535
    4b10:	35355035 	.word	0x35355035
    4b14:	355f3535 	.word	0x355f3535
    4b18:	35353562 	.word	0x35353562
    4b1c:	6a          	.byte	0x6a
    4b1d:	00          	.byte	0x00
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4b1e:	2107      	movs	r1, #7
    4b20:	4827      	ldr	r0, [pc, #156]	; (4bc0 <menu(short)+0x110>)
    4b22:	f00a fe3b 	bl	f79c <usb_serial_write>
    if(ch=='s') {Serial.print("\n Start"); adc_init(); adcStatus(); status=CLOSED;}
    4b26:	2400      	movs	r4, #0
    4b28:	f7fc f960 	bl	dec <adc_init()>
    4b2c:	f7fc f966 	bl	dfc <adcStatus()>
    4b30:	e004      	b.n	4b3c <menu(short)+0x8c>
        virtual int read() { return usb_serial_getchar(); }
    4b32:	f00a fe0d 	bl	f750 <usb_serial_getchar>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4b36:	b2c0      	uxtb	r0, r0
    4b38:	f00a fe1a 	bl	f770 <usb_serial_putchar>
        virtual int available() { return usb_serial_available(); }
    4b3c:	f00a fdc4 	bl	f6c8 <usb_serial_available>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    4b40:	2800      	cmp	r0, #0
    4b42:	d1f6      	bne.n	4b32 <menu(short)+0x82>
}
    4b44:	4620      	mov	r0, r4
    4b46:	bd38      	pop	{r3, r4, r5, pc}
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4b48:	f00a fe12 	bl	f770 <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4b4c:	2140      	movs	r1, #64	; 0x40
    4b4e:	481d      	ldr	r0, [pc, #116]	; (4bc4 <menu(short)+0x114>)
    4b50:	f00a fe24 	bl	f79c <usb_serial_write>
    4b54:	481c      	ldr	r0, [pc, #112]	; (4bc8 <menu(short)+0x118>)
    4b56:	f008 fa99 	bl	d08c <Print::println()>
    4b5a:	e7ef      	b.n	4b3c <menu(short)+0x8c>
    else if(ch==':') status=menu1(status); 
    4b5c:	4620      	mov	r0, r4
    4b5e:	f7ff fd35 	bl	45cc <menu1(short)>
    4b62:	4604      	mov	r4, r0
    4b64:	e7ea      	b.n	4b3c <menu(short)+0x8c>
    else if(ch=='?') menu2(); 
    4b66:	f7ff fde5 	bl	4734 <menu2()>
    4b6a:	e7e7      	b.n	4b3c <menu(short)+0x8c>
    else if(ch=='b') {reboot();}
    4b6c:	f7fb fb46 	bl	1fc <reboot()>
    4b70:	e7e4      	b.n	4b3c <menu(short)+0x8c>
    4b72:	2106      	movs	r1, #6
    4b74:	4815      	ldr	r0, [pc, #84]	; (4bcc <menu(short)+0x11c>)
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    4b76:	2405      	movs	r4, #5
    4b78:	f00a fe10 	bl	f79c <usb_serial_write>
    4b7c:	e7de      	b.n	4b3c <menu(short)+0x8c>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    4b7e:	4d14      	ldr	r5, [pc, #80]	; (4bd0 <menu(short)+0x120>)
    4b80:	210a      	movs	r1, #10
    4b82:	4814      	ldr	r0, [pc, #80]	; (4bd4 <menu(short)+0x124>)
    4b84:	882b      	ldrh	r3, [r5, #0]
    4b86:	f1c3 0301 	rsb	r3, r3, #1
    4b8a:	802b      	strh	r3, [r5, #0]
    4b8c:	f00a fe06 	bl	f79c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4b90:	f9b5 1000 	ldrsh.w	r1, [r5]
    4b94:	480c      	ldr	r0, [pc, #48]	; (4bc8 <menu(short)+0x118>)
    4b96:	f008 fa6d 	bl	d074 <Print::print(long)>
    4b9a:	e7cf      	b.n	4b3c <menu(short)+0x8c>
    else if(ch=='r') {resetUSB();}
    4b9c:	f7fb fafe 	bl	19c <resetUSB()>
    4ba0:	e7cc      	b.n	4b3c <menu(short)+0x8c>
    else if(ch=='t') {hibernate_init(); hibernate_now(rtc_get()+30);}
    4ba2:	f7fd f96b 	bl	1e7c <hibernate_init()>
    4ba6:	f009 faed 	bl	e184 <rtc_get>
    4baa:	301e      	adds	r0, #30
    4bac:	f7fd f986 	bl	1ebc <hibernate_now(unsigned long)>
    4bb0:	e7c4      	b.n	4b3c <menu(short)+0x8c>
    else if(ch=='x') {powerDown();}
    4bb2:	f7fd f959 	bl	1e68 <powerDown()>
    4bb6:	e7c1      	b.n	4b3c <menu(short)+0x8c>
    else if(ch=='!') menu3(); 
    4bb8:	f7ff fb42 	bl	4240 <menu3()>
    4bbc:	e7be      	b.n	4b3c <menu(short)+0x8c>
    4bbe:	bf00      	nop
    4bc0:	20000584 	.word	0x20000584
    4bc4:	200005a0 	.word	0x200005a0
    4bc8:	20008a0c 	.word	0x20008a0c
    4bcc:	2000058c 	.word	0x2000058c
    4bd0:	2003544e 	.word	0x2003544e
    4bd4:	20000594 	.word	0x20000594

00004bd8 <getStore()>:
uint16_t *getStore(void) {return store;}
    4bd8:	4800      	ldr	r0, [pc, #0]	; (4bdc <getStore()+0x4>)
    4bda:	4770      	bx	lr
    4bdc:	20033e5c 	.word	0x20033e5c

00004be0 <decodeConfigfromFile(char*)>:

char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }

void decodeConfigfromFile(char *configText)
{
  if(configText)
    4be0:	2800      	cmp	r0, #0
    4be2:	f000 8092 	beq.w	4d0a <decodeConfigfromFile(char*)+0x12a>
{
    4be6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4bea:	b083      	sub	sp, #12
    4bec:	4604      	mov	r4, r0
  {
    char *cptr=configText;
    char *eptr=cptr+strlen(configText);
    4bee:	f00d fcc7 	bl	12580 <strlen>
    4bf2:	4601      	mov	r1, r0
    4bf4:	4620      	mov	r0, r4
    4bf6:	1865      	adds	r5, r4, r1
    4bf8:	f00a fdd0 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4bfc:	4891      	ldr	r0, [pc, #580]	; (4e44 <decodeConfigfromFile(char*)+0x264>)
    4bfe:	f008 fa45 	bl	d08c <Print::println()>
    Serial.println(configText);
    while(cptr<eptr)
    4c02:	42ac      	cmp	r4, r5
    4c04:	d275      	bcs.n	4cf2 <decodeConfigfromFile(char*)+0x112>
  sscanf(txt,"%hd",&val);
    4c06:	4e90      	ldr	r6, [pc, #576]	; (4e48 <decodeConfigfromFile(char*)+0x268>)
      else if(ch=='4') { store[9]=h_4=  configGetInt16(cptr); cptr=skipEOL(cptr); }
      else if(ch=='5') { store[10]=d_on= configGetInt16(cptr); cptr=skipEOL(cptr); }
      else if(ch=='6') { store[11]=d_rep=configGetInt16(cptr); cptr=skipEOL(cptr); }
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
      else if(ch=='g') { store[13]=again= configGetInt16(cptr); cptr=skipEOL(cptr); setAGain(again);      }
      else if(ch=='0') { store[15]=d_0=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    4c08:	f8df 8260 	ldr.w	r8, [pc, #608]	; 4e6c <decodeConfigfromFile(char*)+0x28c>
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
    4c0c:	4f8f      	ldr	r7, [pc, #572]	; (4e4c <decodeConfigfromFile(char*)+0x26c>)
      char ch=*cptr++;
    4c0e:	f814 3b01 	ldrb.w	r3, [r4], #1
      if(ch<=' ') continue;
    4c12:	2b20      	cmp	r3, #32
    4c14:	d96b      	bls.n	4cee <decodeConfigfromFile(char*)+0x10e>
      else if(ch==';') cptr=skipEOL(cptr);
    4c16:	3b30      	subs	r3, #48	; 0x30
    4c18:	2b47      	cmp	r3, #71	; 0x47
    4c1a:	d868      	bhi.n	4cee <decodeConfigfromFile(char*)+0x10e>
    4c1c:	e8df f013 	tbh	[pc, r3, lsl #1]
    4c20:	020b0223 	.word	0x020b0223
    4c24:	01db01f3 	.word	0x01db01f3
    4c28:	01ab01c3 	.word	0x01ab01c3
    4c2c:	00670193 	.word	0x00670193
    4c30:	00670067 	.word	0x00670067
    4c34:	006e0067 	.word	0x006e0067
    4c38:	00670067 	.word	0x00670067
    4c3c:	00670067 	.word	0x00670067
    4c40:	00670067 	.word	0x00670067
    4c44:	00670067 	.word	0x00670067
    4c48:	00670067 	.word	0x00670067
    4c4c:	00670067 	.word	0x00670067
    4c50:	00670067 	.word	0x00670067
    4c54:	00670067 	.word	0x00670067
    4c58:	00670067 	.word	0x00670067
    4c5c:	00670067 	.word	0x00670067
    4c60:	00670067 	.word	0x00670067
    4c64:	00670067 	.word	0x00670067
    4c68:	00670067 	.word	0x00670067
    4c6c:	00670067 	.word	0x00670067
    4c70:	00670067 	.word	0x00670067
    4c74:	00670067 	.word	0x00670067
    4c78:	00670067 	.word	0x00670067
    4c7c:	00670067 	.word	0x00670067
    4c80:	017b0067 	.word	0x017b0067
    4c84:	0145015c 	.word	0x0145015c
    4c88:	00670067 	.word	0x00670067
    4c8c:	012a0048 	.word	0x012a0048
    4c90:	00670067 	.word	0x00670067
    4c94:	00f30067 	.word	0x00f30067
    4c98:	00670067 	.word	0x00670067
    4c9c:	00bc00d4 	.word	0x00bc00d4
    4ca0:	00670067 	.word	0x00670067
    4ca4:	008b00a4 	.word	0x008b00a4
    4ca8:	00670067 	.word	0x00670067
    4cac:	00760067 	.word	0x00760067
      if(ch<=' ') continue;
    4cb0:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4cb2:	f810 3b01 	ldrb.w	r3, [r0], #1
    4cb6:	2b3d      	cmp	r3, #61	; 0x3d
    4cb8:	d1fb      	bne.n	4cb2 <decodeConfigfromFile(char*)+0xd2>
  sscanf(txt,"%ld",&val);
    4cba:	aa01      	add	r2, sp, #4
    4cbc:	4964      	ldr	r1, [pc, #400]	; (4e50 <decodeConfigfromFile(char*)+0x270>)
    4cbe:	f00c fef5 	bl	11aac <sscanf>
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
    4cc2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 4e70 <decodeConfigfromFile(char*)+0x290>
  return val;
    4cc6:	9b01      	ldr	r3, [sp, #4]
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
    4cc8:	f8c9 3000 	str.w	r3, [r9]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4ccc:	f814 3b01 	ldrb.w	r3, [r4], #1
    4cd0:	2b1f      	cmp	r3, #31
    4cd2:	d8fb      	bhi.n	4ccc <decodeConfigfromFile(char*)+0xec>
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
    4cd4:	f8d9 0000 	ldr.w	r0, [r9]
    4cd8:	f7fc f862 	bl	da0 <acqModifyFrequency(unsigned long)>
    4cdc:	f8d9 3000 	ldr.w	r3, [r9]
    4ce0:	4a5c      	ldr	r2, [pc, #368]	; (4e54 <decodeConfigfromFile(char*)+0x274>)
    4ce2:	fb87 0103 	smull	r0, r1, r7, r3
    4ce6:	17db      	asrs	r3, r3, #31
    4ce8:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
    4cec:	8313      	strh	r3, [r2, #24]
    while(cptr<eptr)
    4cee:	42a5      	cmp	r5, r4
    4cf0:	d88d      	bhi.n	4c0e <decodeConfigfromFile(char*)+0x2e>
      else if(ch=='k') { configGetString(cptr,(char *)&k_string[0]); cptr=skipEOL(cptr); }
      else if(ch=='n') { configGetString(cptr,(char *)&n_string[0]); cptr=skipEOL(cptr); }
    }
    printPar();
  }
}
    4cf2:	b003      	add	sp, #12
    4cf4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    printPar();
    4cf8:	f7ff b99c 	b.w	4034 <printPar()>
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4cfc:	f814 3b01 	ldrb.w	r3, [r4], #1
    4d00:	2b1f      	cmp	r3, #31
    4d02:	d8fb      	bhi.n	4cfc <decodeConfigfromFile(char*)+0x11c>
    while(cptr<eptr)
    4d04:	42a5      	cmp	r5, r4
    4d06:	d882      	bhi.n	4c0e <decodeConfigfromFile(char*)+0x2e>
    4d08:	e7f3      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
    4d0a:	4770      	bx	lr
      if(ch<=' ') continue;
    4d0c:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4d0e:	f810 3b01 	ldrb.w	r3, [r0], #1
    4d12:	2b3d      	cmp	r3, #61	; 0x3d
    4d14:	d1fb      	bne.n	4d0e <decodeConfigfromFile(char*)+0x12e>
  sscanf(txt,"%hd",&val);
    4d16:	aa01      	add	r2, sp, #4
    4d18:	4631      	mov	r1, r6
    4d1a:	f00c fec7 	bl	11aac <sscanf>
  return val;
    4d1e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
      else if(ch=='w') { store[0]=configGetInt16(cptr); cptr=skipEOL(cptr); }
    4d22:	4b4c      	ldr	r3, [pc, #304]	; (4e54 <decodeConfigfromFile(char*)+0x274>)
    4d24:	801a      	strh	r2, [r3, #0]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4d26:	f814 3b01 	ldrb.w	r3, [r4], #1
    4d2a:	2b1f      	cmp	r3, #31
    4d2c:	d8fb      	bhi.n	4d26 <decodeConfigfromFile(char*)+0x146>
    while(cptr<eptr)
    4d2e:	42a5      	cmp	r5, r4
    4d30:	f63f af6d 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4d34:	e7dd      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    4d36:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4d38:	f810 3b01 	ldrb.w	r3, [r0], #1
    4d3c:	2b3d      	cmp	r3, #61	; 0x3d
    4d3e:	d1fb      	bne.n	4d38 <decodeConfigfromFile(char*)+0x158>
  sscanf(txt,"%hd",&val);
    4d40:	aa01      	add	r2, sp, #4
    4d42:	4631      	mov	r1, r6
    4d44:	f00c feb2 	bl	11aac <sscanf>
  return val;
    4d48:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
      else if(ch=='s') { store[5]=shift=configGetInt16(cptr); cptr=skipEOL(cptr);if(shift<0) shift=0; }
    4d4c:	4b42      	ldr	r3, [pc, #264]	; (4e58 <decodeConfigfromFile(char*)+0x278>)
    4d4e:	4941      	ldr	r1, [pc, #260]	; (4e54 <decodeConfigfromFile(char*)+0x274>)
    4d50:	801a      	strh	r2, [r3, #0]
    4d52:	814a      	strh	r2, [r1, #10]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4d54:	f814 2b01 	ldrb.w	r2, [r4], #1
    4d58:	2a1f      	cmp	r2, #31
    4d5a:	d8fb      	bhi.n	4d54 <decodeConfigfromFile(char*)+0x174>
      else if(ch=='s') { store[5]=shift=configGetInt16(cptr); cptr=skipEOL(cptr);if(shift<0) shift=0; }
    4d5c:	881a      	ldrh	r2, [r3, #0]
    4d5e:	0412      	lsls	r2, r2, #16
    4d60:	d5c5      	bpl.n	4cee <decodeConfigfromFile(char*)+0x10e>
    4d62:	2200      	movs	r2, #0
    4d64:	801a      	strh	r2, [r3, #0]
    4d66:	e7c2      	b.n	4cee <decodeConfigfromFile(char*)+0x10e>
      if(ch<=' ') continue;
    4d68:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4d6a:	f810 3b01 	ldrb.w	r3, [r0], #1
    4d6e:	2b3d      	cmp	r3, #61	; 0x3d
    4d70:	d1fb      	bne.n	4d6a <decodeConfigfromFile(char*)+0x18a>
  sscanf(txt,"%hd",&val);
    4d72:	aa01      	add	r2, sp, #4
    4d74:	4631      	mov	r1, r6
    4d76:	f00c fe99 	bl	11aac <sscanf>
  return val;
    4d7a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='r') { store[3]=t_rep=configGetInt16(cptr); cptr=skipEOL(cptr);}
    4d7e:	4a37      	ldr	r2, [pc, #220]	; (4e5c <decodeConfigfromFile(char*)+0x27c>)
    4d80:	b29b      	uxth	r3, r3
    4d82:	8013      	strh	r3, [r2, #0]
    4d84:	4a33      	ldr	r2, [pc, #204]	; (4e54 <decodeConfigfromFile(char*)+0x274>)
    4d86:	80d3      	strh	r3, [r2, #6]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4d88:	f814 3b01 	ldrb.w	r3, [r4], #1
    4d8c:	2b1f      	cmp	r3, #31
    4d8e:	d8fb      	bhi.n	4d88 <decodeConfigfromFile(char*)+0x1a8>
    while(cptr<eptr)
    4d90:	42a5      	cmp	r5, r4
    4d92:	f63f af3c 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4d96:	e7ac      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    4d98:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4d9a:	f810 3b01 	ldrb.w	r3, [r0], #1
    4d9e:	2b3d      	cmp	r3, #61	; 0x3d
    4da0:	d1fb      	bne.n	4d9a <decodeConfigfromFile(char*)+0x1ba>
  sscanf(txt,"%hd",&val);
    4da2:	aa01      	add	r2, sp, #4
    4da4:	4631      	mov	r1, r6
    4da6:	f00c fe81 	bl	11aac <sscanf>
  return val;
    4daa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='o') { store[2]=t_on= configGetInt16(cptr); cptr=skipEOL(cptr);}
    4dae:	4a2c      	ldr	r2, [pc, #176]	; (4e60 <decodeConfigfromFile(char*)+0x280>)
    4db0:	b29b      	uxth	r3, r3
    4db2:	8013      	strh	r3, [r2, #0]
    4db4:	4a27      	ldr	r2, [pc, #156]	; (4e54 <decodeConfigfromFile(char*)+0x274>)
    4db6:	8093      	strh	r3, [r2, #4]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4db8:	f814 3b01 	ldrb.w	r3, [r4], #1
    4dbc:	2b1f      	cmp	r3, #31
    4dbe:	d8fb      	bhi.n	4db8 <decodeConfigfromFile(char*)+0x1d8>
    while(cptr<eptr)
    4dc0:	42a5      	cmp	r5, r4
    4dc2:	f63f af24 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4dc6:	e794      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    4dc8:	4622      	mov	r2, r4
{ while(*txt++ !='=') continue;
    4dca:	f812 3b01 	ldrb.w	r3, [r2], #1
    4dce:	2b3d      	cmp	r3, #61	; 0x3d
    4dd0:	d1fb      	bne.n	4dca <decodeConfigfromFile(char*)+0x1ea>
  while(*txt == ' ') txt++;
    4dd2:	7813      	ldrb	r3, [r2, #0]
    4dd4:	2b20      	cmp	r3, #32
    4dd6:	d103      	bne.n	4de0 <decodeConfigfromFile(char*)+0x200>
    4dd8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    4ddc:	2b20      	cmp	r3, #32
    4dde:	d0fb      	beq.n	4dd8 <decodeConfigfromFile(char*)+0x1f8>
  while (*txt !=';') *str++=*txt++;
    4de0:	2b3b      	cmp	r3, #59	; 0x3b
    4de2:	4920      	ldr	r1, [pc, #128]	; (4e64 <decodeConfigfromFile(char*)+0x284>)
    4de4:	d005      	beq.n	4df2 <decodeConfigfromFile(char*)+0x212>
    4de6:	f801 3b01 	strb.w	r3, [r1], #1
    4dea:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    4dee:	2b3b      	cmp	r3, #59	; 0x3b
    4df0:	d1f9      	bne.n	4de6 <decodeConfigfromFile(char*)+0x206>
  *str='\0';
    4df2:	2300      	movs	r3, #0
    4df4:	700b      	strb	r3, [r1, #0]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4df6:	f814 3b01 	ldrb.w	r3, [r4], #1
    4dfa:	2b1f      	cmp	r3, #31
    4dfc:	d8fb      	bhi.n	4df6 <decodeConfigfromFile(char*)+0x216>
    while(cptr<eptr)
    4dfe:	42a5      	cmp	r5, r4
    4e00:	f63f af05 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4e04:	e775      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    4e06:	4622      	mov	r2, r4
{ while(*txt++ !='=') continue;
    4e08:	f812 3b01 	ldrb.w	r3, [r2], #1
    4e0c:	2b3d      	cmp	r3, #61	; 0x3d
    4e0e:	d1fb      	bne.n	4e08 <decodeConfigfromFile(char*)+0x228>
  while(*txt == ' ') txt++;
    4e10:	7813      	ldrb	r3, [r2, #0]
    4e12:	2b20      	cmp	r3, #32
    4e14:	d103      	bne.n	4e1e <decodeConfigfromFile(char*)+0x23e>
    4e16:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    4e1a:	2b20      	cmp	r3, #32
    4e1c:	d0fb      	beq.n	4e16 <decodeConfigfromFile(char*)+0x236>
  while (*txt !=';') *str++=*txt++;
    4e1e:	2b3b      	cmp	r3, #59	; 0x3b
    4e20:	4911      	ldr	r1, [pc, #68]	; (4e68 <decodeConfigfromFile(char*)+0x288>)
    4e22:	d005      	beq.n	4e30 <decodeConfigfromFile(char*)+0x250>
    4e24:	f801 3b01 	strb.w	r3, [r1], #1
    4e28:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    4e2c:	2b3b      	cmp	r3, #59	; 0x3b
    4e2e:	d1f9      	bne.n	4e24 <decodeConfigfromFile(char*)+0x244>
  *str='\0';
    4e30:	2300      	movs	r3, #0
    4e32:	700b      	strb	r3, [r1, #0]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4e34:	f814 3b01 	ldrb.w	r3, [r4], #1
    4e38:	2b1f      	cmp	r3, #31
    4e3a:	d8fb      	bhi.n	4e34 <decodeConfigfromFile(char*)+0x254>
    while(cptr<eptr)
    4e3c:	42a5      	cmp	r5, r4
    4e3e:	f63f aee6 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4e42:	e756      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
    4e44:	20008a0c 	.word	0x20008a0c
    4e48:	2000049c 	.word	0x2000049c
    4e4c:	10624dd3 	.word	0x10624dd3
    4e50:	200004a0 	.word	0x200004a0
    4e54:	20033e5c 	.word	0x20033e5c
    4e58:	20035456 	.word	0x20035456
    4e5c:	20035458 	.word	0x20035458
    4e60:	20009002 	.word	0x20009002
    4e64:	20034c00 	.word	0x20034c00
    4e68:	20034bb0 	.word	0x20034bb0
    4e6c:	20035444 	.word	0x20035444
    4e70:	20008fcc 	.word	0x20008fcc
      if(ch<=' ') continue;
    4e74:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4e76:	f810 3b01 	ldrb.w	r3, [r0], #1
    4e7a:	2b3d      	cmp	r3, #61	; 0x3d
    4e7c:	d1fb      	bne.n	4e76 <decodeConfigfromFile(char*)+0x296>
  sscanf(txt,"%hd",&val);
    4e7e:	aa01      	add	r2, sp, #4
    4e80:	4631      	mov	r1, r6
    4e82:	f00c fe13 	bl	11aac <sscanf>
  return val;
    4e86:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='g') { store[13]=again= configGetInt16(cptr); cptr=skipEOL(cptr); setAGain(again);      }
    4e8a:	4a82      	ldr	r2, [pc, #520]	; (5094 <decodeConfigfromFile(char*)+0x4b4>)
    4e8c:	4982      	ldr	r1, [pc, #520]	; (5098 <decodeConfigfromFile(char*)+0x4b8>)
    4e8e:	8013      	strh	r3, [r2, #0]
    4e90:	834b      	strh	r3, [r1, #26]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4e92:	f814 3b01 	ldrb.w	r3, [r4], #1
    4e96:	2b1f      	cmp	r3, #31
    4e98:	d8fb      	bhi.n	4e92 <decodeConfigfromFile(char*)+0x2b2>
      else if(ch=='g') { store[13]=again= configGetInt16(cptr); cptr=skipEOL(cptr); setAGain(again);      }
    4e9a:	8810      	ldrh	r0, [r2, #0]
    4e9c:	b240      	sxtb	r0, r0
    4e9e:	f7fb ffab 	bl	df8 <setAGain(signed char)>
    while(cptr<eptr)
    4ea2:	42a5      	cmp	r5, r4
    4ea4:	f63f aeb3 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4ea8:	e723      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    4eaa:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4eac:	f810 3b01 	ldrb.w	r3, [r0], #1
    4eb0:	2b3d      	cmp	r3, #61	; 0x3d
    4eb2:	d1fb      	bne.n	4eac <decodeConfigfromFile(char*)+0x2cc>
  sscanf(txt,"%hd",&val);
    4eb4:	aa01      	add	r2, sp, #4
    4eb6:	4631      	mov	r1, r6
    4eb8:	f00c fdf8 	bl	11aac <sscanf>
  return val;
    4ebc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='c') { store[4]=proc= configGetInt16(cptr); cptr=skipEOL(cptr);}
    4ec0:	4a76      	ldr	r2, [pc, #472]	; (509c <decodeConfigfromFile(char*)+0x4bc>)
    4ec2:	8013      	strh	r3, [r2, #0]
    4ec4:	4a74      	ldr	r2, [pc, #464]	; (5098 <decodeConfigfromFile(char*)+0x4b8>)
    4ec6:	8113      	strh	r3, [r2, #8]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4ec8:	f814 3b01 	ldrb.w	r3, [r4], #1
    4ecc:	2b1f      	cmp	r3, #31
    4ece:	d8fb      	bhi.n	4ec8 <decodeConfigfromFile(char*)+0x2e8>
    while(cptr<eptr)
    4ed0:	42a5      	cmp	r5, r4
    4ed2:	f63f ae9c 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4ed6:	e70c      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    4ed8:	4622      	mov	r2, r4
{ while(*txt++ !='=') continue;
    4eda:	f812 3b01 	ldrb.w	r3, [r2], #1
    4ede:	2b3d      	cmp	r3, #61	; 0x3d
    4ee0:	d1fb      	bne.n	4eda <decodeConfigfromFile(char*)+0x2fa>
  while(*txt == ' ') txt++;
    4ee2:	7813      	ldrb	r3, [r2, #0]
    4ee4:	2b20      	cmp	r3, #32
    4ee6:	d103      	bne.n	4ef0 <decodeConfigfromFile(char*)+0x310>
    4ee8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    4eec:	2b20      	cmp	r3, #32
    4eee:	d0fb      	beq.n	4ee8 <decodeConfigfromFile(char*)+0x308>
  while (*txt !=';') *str++=*txt++;
    4ef0:	2b3b      	cmp	r3, #59	; 0x3b
    4ef2:	496b      	ldr	r1, [pc, #428]	; (50a0 <decodeConfigfromFile(char*)+0x4c0>)
    4ef4:	d005      	beq.n	4f02 <decodeConfigfromFile(char*)+0x322>
    4ef6:	f801 3b01 	strb.w	r3, [r1], #1
    4efa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    4efe:	2b3b      	cmp	r3, #59	; 0x3b
    4f00:	d1f9      	bne.n	4ef6 <decodeConfigfromFile(char*)+0x316>
  *str='\0';
    4f02:	2300      	movs	r3, #0
    4f04:	700b      	strb	r3, [r1, #0]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4f06:	f814 3b01 	ldrb.w	r3, [r4], #1
    4f0a:	2b1f      	cmp	r3, #31
    4f0c:	d8fb      	bhi.n	4f06 <decodeConfigfromFile(char*)+0x326>
    while(cptr<eptr)
    4f0e:	42a5      	cmp	r5, r4
    4f10:	f63f ae7d 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4f14:	e6ed      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    4f16:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4f18:	f810 3b01 	ldrb.w	r3, [r0], #1
    4f1c:	2b3d      	cmp	r3, #61	; 0x3d
    4f1e:	d1fb      	bne.n	4f18 <decodeConfigfromFile(char*)+0x338>
  sscanf(txt,"%hd",&val);
    4f20:	aa01      	add	r2, sp, #4
    4f22:	4631      	mov	r1, r6
    4f24:	f00c fdc2 	bl	11aac <sscanf>
  return val;
    4f28:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='a') { store[1]=t_acq=configGetInt16(cptr); cptr=skipEOL(cptr);}
    4f2c:	4a5d      	ldr	r2, [pc, #372]	; (50a4 <decodeConfigfromFile(char*)+0x4c4>)
    4f2e:	b29b      	uxth	r3, r3
    4f30:	8013      	strh	r3, [r2, #0]
    4f32:	4a59      	ldr	r2, [pc, #356]	; (5098 <decodeConfigfromFile(char*)+0x4b8>)
    4f34:	8053      	strh	r3, [r2, #2]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4f36:	f814 3b01 	ldrb.w	r3, [r4], #1
    4f3a:	2b1f      	cmp	r3, #31
    4f3c:	d8fb      	bhi.n	4f36 <decodeConfigfromFile(char*)+0x356>
    while(cptr<eptr)
    4f3e:	42a5      	cmp	r5, r4
    4f40:	f63f ae65 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4f44:	e6d5      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    4f46:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4f48:	f810 3b01 	ldrb.w	r3, [r0], #1
    4f4c:	2b3d      	cmp	r3, #61	; 0x3d
    4f4e:	d1fb      	bne.n	4f48 <decodeConfigfromFile(char*)+0x368>
  sscanf(txt,"%hd",&val);
    4f50:	aa01      	add	r2, sp, #4
    4f52:	4631      	mov	r1, r6
    4f54:	f00c fdaa 	bl	11aac <sscanf>
  return val;
    4f58:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='6') { store[11]=d_rep=configGetInt16(cptr); cptr=skipEOL(cptr); }
    4f5c:	4a52      	ldr	r2, [pc, #328]	; (50a8 <decodeConfigfromFile(char*)+0x4c8>)
    4f5e:	b29b      	uxth	r3, r3
    4f60:	8013      	strh	r3, [r2, #0]
    4f62:	4a4d      	ldr	r2, [pc, #308]	; (5098 <decodeConfigfromFile(char*)+0x4b8>)
    4f64:	82d3      	strh	r3, [r2, #22]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4f66:	f814 3b01 	ldrb.w	r3, [r4], #1
    4f6a:	2b1f      	cmp	r3, #31
    4f6c:	d8fb      	bhi.n	4f66 <decodeConfigfromFile(char*)+0x386>
    while(cptr<eptr)
    4f6e:	42a5      	cmp	r5, r4
    4f70:	f63f ae4d 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4f74:	e6bd      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    4f76:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4f78:	f810 3b01 	ldrb.w	r3, [r0], #1
    4f7c:	2b3d      	cmp	r3, #61	; 0x3d
    4f7e:	d1fb      	bne.n	4f78 <decodeConfigfromFile(char*)+0x398>
  sscanf(txt,"%hd",&val);
    4f80:	aa01      	add	r2, sp, #4
    4f82:	4631      	mov	r1, r6
    4f84:	f00c fd92 	bl	11aac <sscanf>
  return val;
    4f88:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='5') { store[10]=d_on= configGetInt16(cptr); cptr=skipEOL(cptr); }
    4f8c:	4a47      	ldr	r2, [pc, #284]	; (50ac <decodeConfigfromFile(char*)+0x4cc>)
    4f8e:	b29b      	uxth	r3, r3
    4f90:	8013      	strh	r3, [r2, #0]
    4f92:	4a41      	ldr	r2, [pc, #260]	; (5098 <decodeConfigfromFile(char*)+0x4b8>)
    4f94:	8293      	strh	r3, [r2, #20]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4f96:	f814 3b01 	ldrb.w	r3, [r4], #1
    4f9a:	2b1f      	cmp	r3, #31
    4f9c:	d8fb      	bhi.n	4f96 <decodeConfigfromFile(char*)+0x3b6>
    while(cptr<eptr)
    4f9e:	42a5      	cmp	r5, r4
    4fa0:	f63f ae35 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4fa4:	e6a5      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    4fa6:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4fa8:	f810 3b01 	ldrb.w	r3, [r0], #1
    4fac:	2b3d      	cmp	r3, #61	; 0x3d
    4fae:	d1fb      	bne.n	4fa8 <decodeConfigfromFile(char*)+0x3c8>
  sscanf(txt,"%hd",&val);
    4fb0:	aa01      	add	r2, sp, #4
    4fb2:	4631      	mov	r1, r6
    4fb4:	f00c fd7a 	bl	11aac <sscanf>
  return val;
    4fb8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='4') { store[9]=h_4=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    4fbc:	4a3c      	ldr	r2, [pc, #240]	; (50b0 <decodeConfigfromFile(char*)+0x4d0>)
    4fbe:	b29b      	uxth	r3, r3
    4fc0:	8013      	strh	r3, [r2, #0]
    4fc2:	4a35      	ldr	r2, [pc, #212]	; (5098 <decodeConfigfromFile(char*)+0x4b8>)
    4fc4:	8253      	strh	r3, [r2, #18]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4fc6:	f814 3b01 	ldrb.w	r3, [r4], #1
    4fca:	2b1f      	cmp	r3, #31
    4fcc:	d8fb      	bhi.n	4fc6 <decodeConfigfromFile(char*)+0x3e6>
    while(cptr<eptr)
    4fce:	42a5      	cmp	r5, r4
    4fd0:	f63f ae1d 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    4fd4:	e68d      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    4fd6:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    4fd8:	f810 3b01 	ldrb.w	r3, [r0], #1
    4fdc:	2b3d      	cmp	r3, #61	; 0x3d
    4fde:	d1fb      	bne.n	4fd8 <decodeConfigfromFile(char*)+0x3f8>
  sscanf(txt,"%hd",&val);
    4fe0:	aa01      	add	r2, sp, #4
    4fe2:	4631      	mov	r1, r6
    4fe4:	f00c fd62 	bl	11aac <sscanf>
  return val;
    4fe8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='3') { store[8]=h_3=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    4fec:	4a31      	ldr	r2, [pc, #196]	; (50b4 <decodeConfigfromFile(char*)+0x4d4>)
    4fee:	b29b      	uxth	r3, r3
    4ff0:	8013      	strh	r3, [r2, #0]
    4ff2:	4a29      	ldr	r2, [pc, #164]	; (5098 <decodeConfigfromFile(char*)+0x4b8>)
    4ff4:	8213      	strh	r3, [r2, #16]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    4ff6:	f814 3b01 	ldrb.w	r3, [r4], #1
    4ffa:	2b1f      	cmp	r3, #31
    4ffc:	d8fb      	bhi.n	4ff6 <decodeConfigfromFile(char*)+0x416>
    while(cptr<eptr)
    4ffe:	42a5      	cmp	r5, r4
    5000:	f63f ae05 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    5004:	e675      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5006:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5008:	f810 3b01 	ldrb.w	r3, [r0], #1
    500c:	2b3d      	cmp	r3, #61	; 0x3d
    500e:	d1fb      	bne.n	5008 <decodeConfigfromFile(char*)+0x428>
  sscanf(txt,"%hd",&val);
    5010:	aa01      	add	r2, sp, #4
    5012:	4631      	mov	r1, r6
    5014:	f00c fd4a 	bl	11aac <sscanf>
  return val;
    5018:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='2') { store[7]=h_2=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    501c:	4a26      	ldr	r2, [pc, #152]	; (50b8 <decodeConfigfromFile(char*)+0x4d8>)
    501e:	b29b      	uxth	r3, r3
    5020:	8013      	strh	r3, [r2, #0]
    5022:	4a1d      	ldr	r2, [pc, #116]	; (5098 <decodeConfigfromFile(char*)+0x4b8>)
    5024:	81d3      	strh	r3, [r2, #14]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5026:	f814 3b01 	ldrb.w	r3, [r4], #1
    502a:	2b1f      	cmp	r3, #31
    502c:	d8fb      	bhi.n	5026 <decodeConfigfromFile(char*)+0x446>
    while(cptr<eptr)
    502e:	42a5      	cmp	r5, r4
    5030:	f63f aded 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    5034:	e65d      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5036:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5038:	f810 3b01 	ldrb.w	r3, [r0], #1
    503c:	2b3d      	cmp	r3, #61	; 0x3d
    503e:	d1fb      	bne.n	5038 <decodeConfigfromFile(char*)+0x458>
  sscanf(txt,"%hd",&val);
    5040:	aa01      	add	r2, sp, #4
    5042:	4631      	mov	r1, r6
    5044:	f00c fd32 	bl	11aac <sscanf>
  return val;
    5048:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='1') { store[6]=h_1=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    504c:	4a1b      	ldr	r2, [pc, #108]	; (50bc <decodeConfigfromFile(char*)+0x4dc>)
    504e:	b29b      	uxth	r3, r3
    5050:	8013      	strh	r3, [r2, #0]
    5052:	4a11      	ldr	r2, [pc, #68]	; (5098 <decodeConfigfromFile(char*)+0x4b8>)
    5054:	8193      	strh	r3, [r2, #12]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5056:	f814 3b01 	ldrb.w	r3, [r4], #1
    505a:	2b1f      	cmp	r3, #31
    505c:	d8fb      	bhi.n	5056 <decodeConfigfromFile(char*)+0x476>
    while(cptr<eptr)
    505e:	42a5      	cmp	r5, r4
    5060:	f63f add5 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    5064:	e645      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
      if(ch<=' ') continue;
    5066:	4620      	mov	r0, r4
{ while(*txt++ !='=') continue;
    5068:	f810 3b01 	ldrb.w	r3, [r0], #1
    506c:	2b3d      	cmp	r3, #61	; 0x3d
    506e:	d1fb      	bne.n	5068 <decodeConfigfromFile(char*)+0x488>
  sscanf(txt,"%hd",&val);
    5070:	aa01      	add	r2, sp, #4
    5072:	4631      	mov	r1, r6
    5074:	f00c fd1a 	bl	11aac <sscanf>
  return val;
    5078:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
      else if(ch=='0') { store[15]=d_0=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    507c:	4a06      	ldr	r2, [pc, #24]	; (5098 <decodeConfigfromFile(char*)+0x4b8>)
    507e:	f8a8 3000 	strh.w	r3, [r8]
    5082:	83d3      	strh	r3, [r2, #30]
char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    5084:	f814 3b01 	ldrb.w	r3, [r4], #1
    5088:	2b1f      	cmp	r3, #31
    508a:	d8fb      	bhi.n	5084 <decodeConfigfromFile(char*)+0x4a4>
    while(cptr<eptr)
    508c:	42a5      	cmp	r5, r4
    508e:	f63f adbe 	bhi.w	4c0e <decodeConfigfromFile(char*)+0x2e>
    5092:	e62e      	b.n	4cf2 <decodeConfigfromFile(char*)+0x112>
    5094:	20035442 	.word	0x20035442
    5098:	20033e5c 	.word	0x20033e5c
    509c:	20035450 	.word	0x20035450
    50a0:	20034b10 	.word	0x20034b10
    50a4:	20009000 	.word	0x20009000
    50a8:	20035446 	.word	0x20035446
    50ac:	20008ff8 	.word	0x20008ff8
    50b0:	20008ffe 	.word	0x20008ffe
    50b4:	20008ffc 	.word	0x20008ffc
    50b8:	20008ffa 	.word	0x20008ffa
    50bc:	2003544c 	.word	0x2003544c

000050c0 <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  static int head=0;
  static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    50c0:	4a04      	ldr	r2, [pc, #16]	; (50d4 <getDataCount()+0x14>)
    50c2:	4b05      	ldr	r3, [pc, #20]	; (50d8 <getDataCount()+0x18>)
    50c4:	6810      	ldr	r0, [r2, #0]
    50c6:	681b      	ldr	r3, [r3, #0]
    50c8:	1ac0      	subs	r0, r0, r3
    50ca:	bf48      	it	mi
    50cc:	f500 7090 	addmi.w	r0, r0, #288	; 0x120
    50d0:	b280      	uxth	r0, r0
    50d2:	4770      	bx	lr
    50d4:	20033e30 	.word	0x20033e30
    50d8:	20033e2c 	.word	0x20033e2c

000050dc <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    50dc:	4b01      	ldr	r3, [pc, #4]	; (50e4 <queue_isBusy()+0x8>)
    50de:	6818      	ldr	r0, [r3, #0]
    50e0:	4770      	bx	lr
    50e2:	bf00      	nop
    50e4:	2000fc10 	.word	0x2000fc10

000050e8 <pushData(unsigned long*)>:
        while(queue_busy); 
      #endif
  }

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    50e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    queue_lock();
    queue_busy=1;
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    50ea:	4d12      	ldr	r5, [pc, #72]	; (5134 <pushData(unsigned long*)+0x4c>)
  {
    50ec:	4601      	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    50ee:	4b12      	ldr	r3, [pc, #72]	; (5138 <pushData(unsigned long*)+0x50>)
    50f0:	682e      	ldr	r6, [r5, #0]
    50f2:	681f      	ldr	r7, [r3, #0]
    50f4:	4a11      	ldr	r2, [pc, #68]	; (513c <pushData(unsigned long*)+0x54>)
    50f6:	1c73      	adds	r3, r6, #1
    50f8:	fb82 0203 	smull	r0, r2, r2, r3
    50fc:	17dc      	asrs	r4, r3, #31
    50fe:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
    5102:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    5106:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
    510a:	42bc      	cmp	r4, r7
    510c:	d00c      	beq.n	5128 <pushData(unsigned long*)+0x40>
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    510e:	480c      	ldr	r0, [pc, #48]	; (5140 <pushData(unsigned long*)+0x58>)
    5110:	f44f 7200 	mov.w	r2, #512	; 0x200
    5114:	eb00 2046 	add.w	r0, r0, r6, lsl #9
    5118:	f008 fdc0 	bl	dc9c <memcpy>
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    511c:	4b09      	ldr	r3, [pc, #36]	; (5144 <pushData(unsigned long*)+0x5c>)
    511e:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
    5120:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    5122:	602c      	str	r4, [r5, #0]
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    5124:	601a      	str	r2, [r3, #0]
  }
    5126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    5128:	4b06      	ldr	r3, [pc, #24]	; (5144 <pushData(unsigned long*)+0x5c>)
    512a:	2200      	movs	r2, #0
    512c:	2000      	movs	r0, #0
    512e:	601a      	str	r2, [r3, #0]
  }
    5130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5132:	bf00      	nop
    5134:	20033e30 	.word	0x20033e30
    5138:	20033e2c 	.word	0x20033e2c
    513c:	38e38e39 	.word	0x38e38e39
    5140:	2000fc14 	.word	0x2000fc14
    5144:	2000fc10 	.word	0x2000fc10

00005148 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    5148:	b538      	push	{r3, r4, r5, lr}
    queue_lock();
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    514a:	4d11      	ldr	r5, [pc, #68]	; (5190 <pullData(unsigned long*)+0x48>)
    514c:	4b11      	ldr	r3, [pc, #68]	; (5194 <pullData(unsigned long*)+0x4c>)
    514e:	682c      	ldr	r4, [r5, #0]
    5150:	681b      	ldr	r3, [r3, #0]
    5152:	429c      	cmp	r4, r3
    5154:	d017      	beq.n	5186 <pullData(unsigned long*)+0x3e>
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    5156:	4910      	ldr	r1, [pc, #64]	; (5198 <pullData(unsigned long*)+0x50>)
    5158:	f44f 7200 	mov.w	r2, #512	; 0x200
    515c:	eb01 2144 	add.w	r1, r1, r4, lsl #9
    head = (head+1)%MAXBUF;
    5160:	3401      	adds	r4, #1
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    5162:	f008 fd9b 	bl	dc9c <memcpy>
    head = (head+1)%MAXBUF;
    5166:	4a0d      	ldr	r2, [pc, #52]	; (519c <pullData(unsigned long*)+0x54>)
    5168:	17e3      	asrs	r3, r4, #31
    queue_busy=0;
    return 1; // signal success.
    516a:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    516c:	fb82 1204 	smull	r1, r2, r2, r4
    5170:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    5174:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    5176:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    517a:	eba4 1443 	sub.w	r4, r4, r3, lsl #5
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    517e:	4b08      	ldr	r3, [pc, #32]	; (51a0 <pullData(unsigned long*)+0x58>)
    head = (head+1)%MAXBUF;
    5180:	602c      	str	r4, [r5, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    5182:	601a      	str	r2, [r3, #0]
  }
    5184:	bd38      	pop	{r3, r4, r5, pc}
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    5186:	4b06      	ldr	r3, [pc, #24]	; (51a0 <pullData(unsigned long*)+0x58>)
    5188:	2200      	movs	r2, #0
    518a:	2000      	movs	r0, #0
    518c:	601a      	str	r2, [r3, #0]
  }
    518e:	bd38      	pop	{r3, r4, r5, pc}
    5190:	20033e2c 	.word	0x20033e2c
    5194:	20033e30 	.word	0x20033e30
    5198:	2000fc14 	.word	0x2000fc14
    519c:	38e38e39 	.word	0x38e38e39
    51a0:	2000fc10 	.word	0x2000fc10

000051a4 <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now time is minutes
    51a4:	4a54      	ldr	r2, [pc, #336]	; (52f8 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    51a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now time is minutes
    51aa:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    51ae:	f240 196d 	movw	r9, #365	; 0x16d
    51b2:	4e52      	ldr	r6, [pc, #328]	; (52fc <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now time is minutes
    51b4:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    51b6:	4f52      	ldr	r7, [pc, #328]	; (5300 <time2date(unsigned long, datetime_t*)+0x15c>)
    51b8:	f8df 8158 	ldr.w	r8, [pc, #344]	; 5314 <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now time is hours
    51bc:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now time is minutes
    51c0:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now time is hours
    51c4:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now time is minutes
    51c6:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now time is days
    51ca:	4c4e      	ldr	r4, [pc, #312]	; (5304 <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now time is hours
    51cc:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now time is days
    51d0:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now time is hours
    51d4:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now time is minutes
    51d8:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now time is days
    51da:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now time is hours
    51de:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    51e0:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now time is days
    51e4:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    51e8:	4b47      	ldr	r3, [pc, #284]	; (5308 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now time is days
    51ea:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    51ee:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    51f2:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now time is days
    51f4:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    51f6:	1ae2      	subs	r2, r4, r3
    51f8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    51fc:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    51fe:	089b      	lsrs	r3, r3, #2
    5200:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    5204:	1ae4      	subs	r4, r4, r3
    5206:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    5208:	b2c3      	uxtb	r3, r0
    520a:	f240 1c6d 	movw	ip, #365	; 0x16d
    520e:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    5212:	f013 0403 	ands.w	r4, r3, #3
    5216:	fb06 f503 	mul.w	r5, r6, r3
    521a:	d108      	bne.n	522e <time2date(unsigned long, datetime_t*)+0x8a>
    521c:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    5220:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    5224:	d303      	bcc.n	522e <time2date(unsigned long, datetime_t*)+0x8a>
    5226:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    522a:	bf38      	it	cc
    522c:	46cc      	movcc	ip, r9
    522e:	4462      	add	r2, ip
    5230:	3001      	adds	r0, #1
    5232:	4596      	cmp	lr, r2
    5234:	d2e8      	bcs.n	5208 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    5236:	4d35      	ldr	r5, [pc, #212]	; (530c <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    5238:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    523a:	fba5 0503 	umull	r0, r5, r5, r3
    523e:	b3a4      	cbz	r4, 52aa <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    5240:	096e      	lsrs	r6, r5, #5
    5242:	2764      	movs	r7, #100	; 0x64
    5244:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5248:	09ed      	lsrs	r5, r5, #7
    524a:	fb07 3616 	mls	r6, r7, r6, r3
    524e:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    5252:	f240 106d 	movw	r0, #365	; 0x16d
    time -= days; // now time is days in this year, starting at 0
    5256:	ebae 0e02 	sub.w	lr, lr, r2
    525a:	2300      	movs	r3, #0
    525c:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    525e:	4f2c      	ldr	r7, [pc, #176]	; (5310 <time2date(unsigned long, datetime_t*)+0x16c>)
    time -= days; // now time is days in this year, starting at 0
    5260:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    5262:	e00a      	b.n	527a <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    5264:	f813 c007 	ldrb.w	ip, [r3, r7]
    5268:	4584      	cmp	ip, r0
    526a:	d837      	bhi.n	52dc <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    526c:	2a0c      	cmp	r2, #12
        time -= monthLength;
    526e:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    5272:	d012      	beq.n	529a <time2date(unsigned long, datetime_t*)+0xf6>
    5274:	3201      	adds	r2, #1
    5276:	3301      	adds	r3, #1
    5278:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    527a:	2b01      	cmp	r3, #1
    527c:	fa5f fe83 	uxtb.w	lr, r3
    5280:	d1f0      	bne.n	5264 <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    5282:	b91c      	cbnz	r4, 528c <time2date(unsigned long, datetime_t*)+0xe8>
    5284:	b1f6      	cbz	r6, 52c4 <time2date(unsigned long, datetime_t*)+0x120>
    5286:	f04f 0c1d 	mov.w	ip, #29
    528a:	e001      	b.n	5290 <time2date(unsigned long, datetime_t*)+0xec>
    528c:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    5290:	4560      	cmp	r0, ip
    5292:	d32d      	bcc.n	52f0 <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    5294:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    5298:	e7ec      	b.n	5274 <time2date(unsigned long, datetime_t*)+0xd0>
    529a:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    529e:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    52a0:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    52a4:	70c8      	strb	r0, [r1, #3]
  }
    52a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    52aa:	2064      	movs	r0, #100	; 0x64
    52ac:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    52ae:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    52b0:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    52b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    52b8:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    52bc:	b14e      	cbz	r6, 52d2 <time2date(unsigned long, datetime_t*)+0x12e>
    52be:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    52c2:	e7c8      	b.n	5256 <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    52c4:	2d00      	cmp	r5, #0
    52c6:	bf14      	ite	ne
    52c8:	f04f 0c1c 	movne.w	ip, #28
    52cc:	f04f 0c1d 	moveq.w	ip, #29
    52d0:	e7de      	b.n	5290 <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    52d2:	2d00      	cmp	r5, #0
    52d4:	d1bd      	bne.n	5252 <time2date(unsigned long, datetime_t*)+0xae>
    52d6:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    52da:	e7bc      	b.n	5256 <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    52dc:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    52e0:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    52e2:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    52e6:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    52e8:	f881 e002 	strb.w	lr, [r1, #2]
  }
    52ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    52f0:	f04f 0e02 	mov.w	lr, #2
    52f4:	e7d3      	b.n	529e <time2date(unsigned long, datetime_t*)+0xfa>
    52f6:	bf00      	nop
    52f8:	88888889 	.word	0x88888889
    52fc:	c28f5c29 	.word	0xc28f5c29
    5300:	028f5c28 	.word	0x028f5c28
    5304:	aaaaaaab 	.word	0xaaaaaaab
    5308:	24924925 	.word	0x24924925
    530c:	51eb851f 	.word	0x51eb851f
    5310:	20000a8c 	.word	0x20000a8c
    5314:	00a3d70a 	.word	0x00a3d70a

00005318 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    5318:	8801      	ldrh	r1, [r0, #0]
      if (LEAP_YEAR(ii)) {
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    #endif
    uint32_t days= year*365;
    531a:	f240 126d 	movw	r2, #365	; 0x16d
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    531e:	314e      	adds	r1, #78	; 0x4e
    5320:	b2c9      	uxtb	r1, r1
  {
    5322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t days= year*365;
    5326:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    532a:	b1d9      	cbz	r1, 5364 <date2time(datetime_t*)+0x4c>
    532c:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    5330:	f240 73b3 	movw	r3, #1971	; 0x7b3
    5334:	4d30      	ldr	r5, [pc, #192]	; (53f8 <date2time(datetime_t*)+0xe0>)
    5336:	4e31      	ldr	r6, [pc, #196]	; (53fc <date2time(datetime_t*)+0xe4>)
    5338:	4f31      	ldr	r7, [pc, #196]	; (5400 <date2time(datetime_t*)+0xe8>)
    533a:	4563      	cmp	r3, ip
    533c:	fb05 f403 	mul.w	r4, r5, r3
    5340:	d010      	beq.n	5364 <date2time(datetime_t*)+0x4c>
    5342:	f013 0f03 	tst.w	r3, #3
    5346:	f103 0301 	add.w	r3, r3, #1
    534a:	d1f6      	bne.n	533a <date2time(datetime_t*)+0x22>
    534c:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    5350:	d302      	bcc.n	5358 <date2time(datetime_t*)+0x40>
    5352:	ebb7 1f34 	cmp.w	r7, r4, ror #4
    5356:	d3f0      	bcc.n	533a <date2time(datetime_t*)+0x22>
    5358:	4563      	cmp	r3, ip
    535a:	f102 0201 	add.w	r2, r2, #1
    535e:	fb05 f403 	mul.w	r4, r5, r3
    5362:	d1ee      	bne.n	5342 <date2time(datetime_t*)+0x2a>
    seconds = days*SECS_PER_DAY;

    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    5364:	f990 e002 	ldrsb.w	lr, [r0, #2]
    seconds = days*SECS_PER_DAY;
    5368:	4d26      	ldr	r5, [pc, #152]	; (5404 <date2time(datetime_t*)+0xec>)
    for (ii = 1; ii < tm->month; ii++) {
    536a:	f1be 0f01 	cmp.w	lr, #1
    seconds = days*SECS_PER_DAY;
    536e:	fb05 f202 	mul.w	r2, r5, r2
    for (ii = 1; ii < tm->month; ii++) {
    5372:	dd29      	ble.n	53c8 <date2time(datetime_t*)+0xb0>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    5374:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    5378:	4e23      	ldr	r6, [pc, #140]	; (5408 <date2time(datetime_t*)+0xf0>)
    537a:	f44f 74c8 	mov.w	r4, #400	; 0x190
    537e:	f04f 0c64 	mov.w	ip, #100	; 0x64
    5382:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    5386:	f8df 8088 	ldr.w	r8, [pc, #136]	; 5410 <date2time(datetime_t*)+0xf8>
    538a:	4920      	ldr	r1, [pc, #128]	; (540c <date2time(datetime_t*)+0xf4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    538c:	0977      	lsrs	r7, r6, #5
    538e:	09f6      	lsrs	r6, r6, #7
    5390:	fb0c 3717 	mls	r7, ip, r7, r3
    5394:	fb04 3616 	mls	r6, r4, r6, r3
    5398:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    539c:	2301      	movs	r3, #1
    539e:	e007      	b.n	53b0 <date2time(datetime_t*)+0x98>
    53a0:	3301      	adds	r3, #1
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    53a2:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    53a6:	3101      	adds	r1, #1
    53a8:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    53aa:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    53ae:	d00b      	beq.n	53c8 <date2time(datetime_t*)+0xb0>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    53b0:	2b02      	cmp	r3, #2
    53b2:	d1f5      	bne.n	53a0 <date2time(datetime_t*)+0x88>
    53b4:	2c00      	cmp	r4, #0
    53b6:	d1f3      	bne.n	53a0 <date2time(datetime_t*)+0x88>
    53b8:	b90f      	cbnz	r7, 53be <date2time(datetime_t*)+0xa6>
    53ba:	2e00      	cmp	r6, #0
    53bc:	d1f0      	bne.n	53a0 <date2time(datetime_t*)+0x88>
    for (ii = 1; ii < tm->month; ii++) {
    53be:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    53c0:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    53c2:	3101      	adds	r1, #1
    53c4:	4573      	cmp	r3, lr
    53c6:	d1f3      	bne.n	53b0 <date2time(datetime_t*)+0x98>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    53c8:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    53cc:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    53d0:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    53d4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    53d8:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    53dc:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    53de:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    53e2:	f990 1003 	ldrsb.w	r1, [r0, #3]
    53e6:	4c07      	ldr	r4, [pc, #28]	; (5404 <date2time(datetime_t*)+0xec>)
    seconds+= tm->sec;
    53e8:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    53ea:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    53ec:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    53f0:	4410      	add	r0, r2
    53f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53f6:	bf00      	nop
    53f8:	c28f5c29 	.word	0xc28f5c29
    53fc:	028f5c28 	.word	0x028f5c28
    5400:	00a3d70a 	.word	0x00a3d70a
    5404:	00015180 	.word	0x00015180
    5408:	51eb851f 	.word	0x51eb851f
    540c:	20000a8c 	.word	0x20000a8c
    5410:	00263b80 	.word	0x00263b80

00005414 <rtcGetTimestamp()>:
      return xrtc.stringTimeStamp();
    }
    #else
      return 0;
    #endif
  }
    5414:	2000      	movs	r0, #0
    5416:	4770      	bx	lr

00005418 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    5418:	b500      	push	{lr}
    541a:	b083      	sub	sp, #12
    541c:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    541e:	f008 feb1 	bl	e184 <rtc_get>
    5422:	9901      	ldr	r1, [sp, #4]
    5424:	f7ff febe 	bl	51a4 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    5428:	2001      	movs	r0, #1
    542a:	b003      	add	sp, #12
    542c:	f85d fb04 	ldr.w	pc, [sp], #4

00005430 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    5430:	b570      	push	{r4, r5, r6, lr}
    5432:	b082      	sub	sp, #8
    5434:	4614      	mov	r4, r2
    5436:	460d      	mov	r5, r1
    5438:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    543a:	f008 fea3 	bl	e184 <rtc_get>
    543e:	4669      	mov	r1, sp
    5440:	f7ff feb0 	bl	51a4 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    5444:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    5448:	4608      	mov	r0, r1
    t.month=month;
    544a:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    544e:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    5452:	f7ff ff61 	bl	5318 <date2time(datetime_t*)>
    5456:	f008 fea7 	bl	e1a8 <rtc_set>
    rtc_set_datetime(&t);
  }
    545a:	b002      	add	sp, #8
    545c:	bd70      	pop	{r4, r5, r6, pc}
    545e:	bf00      	nop

00005460 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    5460:	b570      	push	{r4, r5, r6, lr}
    5462:	b082      	sub	sp, #8
    5464:	4614      	mov	r4, r2
    5466:	460d      	mov	r5, r1
    5468:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    546a:	f008 fe8b 	bl	e184 <rtc_get>
    546e:	4669      	mov	r1, sp
    5470:	f7ff fe98 	bl	51a4 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    5474:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    5478:	4608      	mov	r0, r1
    t.min=minutes;
    547a:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    547e:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    5482:	f7ff ff49 	bl	5318 <date2time(datetime_t*)>
    5486:	f008 fe8f 	bl	e1a8 <rtc_set>
    rtc_set_datetime(&t);
  }
    548a:	b002      	add	sp, #8
    548c:	bd70      	pop	{r4, r5, r6, pc}
    548e:	bf00      	nop

00005490 <XRTCprintTime()>:
    5490:	4770      	bx	lr
    5492:	bf00      	nop

00005494 <dbgPrint(unsigned short)>:
#endif

#define DBG_FILE "Storage.cpp"

#if USE_DBG_MACROS==1
  static void dbgPrint(uint16_t line) {
    5494:	b538      	push	{r3, r4, r5, lr}
    5496:	210a      	movs	r1, #10
    5498:	4604      	mov	r4, r0
    549a:	480a      	ldr	r0, [pc, #40]	; (54c4 <dbgPrint(unsigned short)+0x30>)
    549c:	f00a f97e 	bl	f79c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    54a0:	4d09      	ldr	r5, [pc, #36]	; (54c8 <dbgPrint(unsigned short)+0x34>)
    54a2:	210b      	movs	r1, #11
    54a4:	4809      	ldr	r0, [pc, #36]	; (54cc <dbgPrint(unsigned short)+0x38>)
    54a6:	f00a f979 	bl	f79c <usb_serial_write>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    54aa:	202e      	movs	r0, #46	; 0x2e
    54ac:	f00a f960 	bl	f770 <usb_serial_putchar>
    54b0:	4621      	mov	r1, r4
    54b2:	4628      	mov	r0, r5
    54b4:	f007 fdde 	bl	d074 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    54b8:	4628      	mov	r0, r5
    Serial.print(F("DBG_FAIL: "));
    Serial.print(F(DBG_FILE));
    Serial.write('.');
    Serial.println(line);
  }
    54ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    54be:	f007 bde5 	b.w	d08c <Print::println()>
    54c2:	bf00      	nop
    54c4:	200009a0 	.word	0x200009a0
    54c8:	20008a0c 	.word	0x20008a0c
    54cc:	200009ac 	.word	0x200009ac

000054d0 <MTPStorage_SD::OpenIndex() [clone .part.0]>:
    mtp_lock_storage(false);
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
    54d0:	b510      	push	{r4, lr}
    54d2:	4604      	mov	r4, r0
    54d4:	b094      	sub	sp, #80	; 0x50
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    54d6:	f240 2302 	movw	r3, #514	; 0x202
    54da:	4a15      	ldr	r2, [pc, #84]	; (5530 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x60>)
    54dc:	4668      	mov	r0, sp
    54de:	6d61      	ldr	r1, [r4, #84]	; 0x54
    54e0:	f005 fa46 	bl	a970 <FsVolume::open(char const*, int)>
class Stream : public Print
    54e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    54e8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    54ec:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    54f0:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    54f4:	e9c4 122a 	strd	r1, r2, [r4, #168]	; 0xa8
    54f8:	a904      	add	r1, sp, #16
    54fa:	f005 f8c5 	bl	a688 <FsBaseFile::operator=(FsBaseFile const&)>
    54fe:	4b0d      	ldr	r3, [pc, #52]	; (5534 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x64>)
  ~FsBaseFile() {close();}
    5500:	a804      	add	r0, sp, #16
    5502:	9300      	str	r3, [sp, #0]
    5504:	f005 f91a 	bl	a73c <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    5508:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    550c:	b10b      	cbz	r3, 5512 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x42>
    //
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, (O_RDWR | O_CREAT));
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    mtp_lock_storage(false);
  }
    550e:	b014      	add	sp, #80	; 0x50
    5510:	bd10      	pop	{r4, pc}
    5512:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    5516:	2b00      	cmp	r3, #0
    5518:	d1f9      	bne.n	550e <MTPStorage_SD::OpenIndex() [clone .part.0]+0x3e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    551a:	2117      	movs	r1, #23
    551c:	4806      	ldr	r0, [pc, #24]	; (5538 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x68>)
    551e:	f00a f93d 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5522:	4806      	ldr	r0, [pc, #24]	; (553c <MTPStorage_SD::OpenIndex() [clone .part.0]+0x6c>)
    5524:	b014      	add	sp, #80	; 0x50
    5526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    552a:	f007 bdaf 	b.w	d08c <Print::println()>
    552e:	bf00      	nop
    5530:	20000abc 	.word	0x20000abc
    5534:	20000b58 	.word	0x20000b58
    5538:	20000acc 	.word	0x20000acc
    553c:	20008a0c 	.word	0x20008a0c

00005540 <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    5540:	2000      	movs	r0, #0
    5542:	4770      	bx	lr

00005544 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    5544:	2001      	movs	r0, #1
    5546:	4770      	bx	lr

00005548 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
    5548:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    554c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->clusterCount() :
    554e:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    5552:	b14b      	cbz	r3, 5568 <MTPStorage_SD::totalSize(unsigned long)+0x20>
    5554:	799a      	ldrb	r2, [r3, #6]
    5556:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    555a:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    555c:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    555e:	3901      	subs	r1, #1
              *(uint64_t)sdx[store]->bytesPerCluster();  
    5560:	b280      	uxth	r0, r0
    5562:	fba0 0101 	umull	r0, r1, r0, r1
    5566:	4770      	bx	lr
    5568:	f8d2 0484 	ldr.w	r0, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    556c:	b130      	cbz	r0, 557c <MTPStorage_SD::totalSize(unsigned long)+0x34>
    556e:	f8d0 1430 	ldr.w	r1, [r0, #1072]	; 0x430
    5572:	f8d0 043c 	ldr.w	r0, [r0, #1084]	; 0x43c
    5576:	fba1 0100 	umull	r0, r1, r1, r0
    557a:	4770      	bx	lr
    557c:	4601      	mov	r1, r0
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
    557e:	4770      	bx	lr

00005580 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    5580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5584:	eb00 0681 	add.w	r6, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    5588:	6d72      	ldr	r2, [r6, #84]	; 0x54
    return m_fVol ? m_fVol->clusterCount() :
    558a:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    558e:	2b00      	cmp	r3, #0
    5590:	f000 80bc 	beq.w	570c <MTPStorage_SD::usedSize(unsigned long)+0x18c>
    5594:	69d9      	ldr	r1, [r3, #28]
    5596:	3901      	subs	r1, #1
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    5598:	2300      	movs	r3, #0
    559a:	220a      	movs	r2, #10
    559c:	486a      	ldr	r0, [pc, #424]	; (5748 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    559e:	f007 fd9f 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    55a2:	4869      	ldr	r0, [pc, #420]	; (5748 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    55a4:	f007 fd72 	bl	d08c <Print::println()>
        Serial.println(sdx[store]->freeClusterCount());
    55a8:	6d75      	ldr	r5, [r6, #84]	; 0x54
  uint32_t freeClusterCount() {
    55aa:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    55ae:	b120      	cbz	r0, 55ba <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    55b0:	6803      	ldr	r3, [r0, #0]
    55b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    55b4:	4798      	blx	r3
    55b6:	2800      	cmp	r0, #0
    55b8:	d16c      	bne.n	5694 <MTPStorage_SD::usedSize(unsigned long)+0x114>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    55ba:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    55bc:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    55c0:	2800      	cmp	r0, #0
    55c2:	f000 808e 	beq.w	56e2 <MTPStorage_SD::usedSize(unsigned long)+0x162>
    55c6:	f004 fec1 	bl	a34c <FatPartition::freeClusterCount()>
    55ca:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    55cc:	2f00      	cmp	r7, #0
    55ce:	f040 8091 	bne.w	56f4 <MTPStorage_SD::usedSize(unsigned long)+0x174>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    55d2:	2300      	movs	r3, #0
    55d4:	220a      	movs	r2, #10
    55d6:	4621      	mov	r1, r4
    55d8:	485b      	ldr	r0, [pc, #364]	; (5748 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    55da:	f007 fd81 	bl	d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    55de:	485a      	ldr	r0, [pc, #360]	; (5748 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    55e0:	f007 fd54 	bl	d08c <Print::println()>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    55e4:	6d75      	ldr	r5, [r6, #84]	; 0x54
    return m_fVol ? m_fVol->clusterCount() :
    55e6:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    55ea:	2b00      	cmp	r3, #0
    55ec:	f000 8096 	beq.w	571c <MTPStorage_SD::usedSize(unsigned long)+0x19c>
    55f0:	69dc      	ldr	r4, [r3, #28]
    55f2:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    55f6:	3c01      	subs	r4, #1
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    55f8:	2800      	cmp	r0, #0
    55fa:	d05f      	beq.n	56bc <MTPStorage_SD::usedSize(unsigned long)+0x13c>
    55fc:	6803      	ldr	r3, [r0, #0]
    55fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5600:	4798      	blx	r3
    5602:	bb38      	cbnz	r0, 5654 <MTPStorage_SD::usedSize(unsigned long)+0xd4>
    return m_fVol ? m_fVol->freeClusterCount() :
    5604:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5608:	f04f 0800 	mov.w	r8, #0
    560c:	2800      	cmp	r0, #0
    560e:	d139      	bne.n	5684 <MTPStorage_SD::usedSize(unsigned long)+0x104>
    5610:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5614:	b11f      	cbz	r7, 561e <MTPStorage_SD::usedSize(unsigned long)+0x9e>
    5616:	4638      	mov	r0, r7
    5618:	f002 ff18 	bl	844c <ExFatPartition::freeClusterCount()>
    561c:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    561e:	f1b8 0f00 	cmp.w	r8, #0
    5622:	d035      	beq.n	5690 <MTPStorage_SD::usedSize(unsigned long)+0x110>
    5624:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    5628:	b128      	cbz	r0, 5636 <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    562a:	6803      	ldr	r3, [r0, #0]
    562c:	2100      	movs	r1, #0
    562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5630:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    5632:	b100      	cbz	r0, 5636 <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    5634:	1be4      	subs	r4, r4, r7
    5636:	6d75      	ldr	r5, [r6, #84]	; 0x54
    return m_fVol ? m_fVol->bytesPerCluster() :
    5638:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    563c:	2b00      	cmp	r3, #0
    563e:	d147      	bne.n	56d0 <MTPStorage_SD::usedSize(unsigned long)+0x150>
    5640:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    5644:	2800      	cmp	r0, #0
    5646:	d07a      	beq.n	573e <MTPStorage_SD::usedSize(unsigned long)+0x1be>
              *(uint64_t)sdx[store]->bytesPerCluster();  
    5648:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    564c:	fba4 0101 	umull	r0, r1, r4, r1
    5650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5654:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    5658:	2800      	cmp	r0, #0
    565a:	d0ec      	beq.n	5636 <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    565c:	6803      	ldr	r3, [r0, #0]
    565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5660:	4798      	blx	r3
    5662:	2800      	cmp	r0, #0
    5664:	d1ce      	bne.n	5604 <MTPStorage_SD::usedSize(unsigned long)+0x84>
    5666:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    566a:	2800      	cmp	r0, #0
    566c:	d0e3      	beq.n	5636 <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    566e:	6803      	ldr	r3, [r0, #0]
    5670:	2101      	movs	r1, #1
    5672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5674:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    5676:	4680      	mov	r8, r0
    5678:	2800      	cmp	r0, #0
    567a:	d0dc      	beq.n	5636 <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    return m_fVol ? m_fVol->freeClusterCount() :
    567c:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    5680:	2800      	cmp	r0, #0
    5682:	d0c5      	beq.n	5610 <MTPStorage_SD::usedSize(unsigned long)+0x90>
    5684:	f004 fe62 	bl	a34c <FatPartition::freeClusterCount()>
    5688:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    568a:	f1b8 0f00 	cmp.w	r8, #0
    568e:	d1c9      	bne.n	5624 <MTPStorage_SD::usedSize(unsigned long)+0xa4>
    5690:	6d75      	ldr	r5, [r6, #84]	; 0x54
    5692:	e018      	b.n	56c6 <MTPStorage_SD::usedSize(unsigned long)+0x146>
    5694:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    5698:	b170      	cbz	r0, 56b8 <MTPStorage_SD::usedSize(unsigned long)+0x138>
    569a:	6803      	ldr	r3, [r0, #0]
    569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    569e:	4798      	blx	r3
    56a0:	2800      	cmp	r0, #0
    56a2:	d18a      	bne.n	55ba <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    56a4:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    56a8:	b130      	cbz	r0, 56b8 <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    56aa:	6803      	ldr	r3, [r0, #0]
    56ac:	2101      	movs	r1, #1
    56ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    56b0:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    56b2:	4607      	mov	r7, r0
    56b4:	2800      	cmp	r0, #0
    56b6:	d181      	bne.n	55bc <MTPStorage_SD::usedSize(unsigned long)+0x3c>
      return 0;
    56b8:	2400      	movs	r4, #0
    56ba:	e78a      	b.n	55d2 <MTPStorage_SD::usedSize(unsigned long)+0x52>
    56bc:	4618      	mov	r0, r3
    56be:	f004 fe45 	bl	a34c <FatPartition::freeClusterCount()>
    56c2:	6d75      	ldr	r5, [r6, #84]	; 0x54
    56c4:	4607      	mov	r7, r0
    return m_fVol ? m_fVol->bytesPerCluster() :
    56c6:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    56ca:	1be4      	subs	r4, r4, r7
    56cc:	2b00      	cmp	r3, #0
    56ce:	d0b7      	beq.n	5640 <MTPStorage_SD::usedSize(unsigned long)+0xc0>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    56d0:	799b      	ldrb	r3, [r3, #6]
    56d2:	f44f 7100 	mov.w	r1, #512	; 0x200
    56d6:	4099      	lsls	r1, r3
              *(uint64_t)sdx[store]->bytesPerCluster();  
    56d8:	b289      	uxth	r1, r1
    56da:	fba1 0104 	umull	r0, r1, r1, r4
    56de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56e2:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    56e6:	b328      	cbz	r0, 5734 <MTPStorage_SD::usedSize(unsigned long)+0x1b4>
    56e8:	f002 feb0 	bl	844c <ExFatPartition::freeClusterCount()>
    56ec:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    56ee:	2f00      	cmp	r7, #0
    56f0:	f43f af6f 	beq.w	55d2 <MTPStorage_SD::usedSize(unsigned long)+0x52>
    56f4:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    56f8:	2800      	cmp	r0, #0
    56fa:	d0dd      	beq.n	56b8 <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    56fc:	6803      	ldr	r3, [r0, #0]
    56fe:	2100      	movs	r1, #0
    5700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5702:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    5704:	2800      	cmp	r0, #0
    5706:	f47f af64 	bne.w	55d2 <MTPStorage_SD::usedSize(unsigned long)+0x52>
    570a:	e7d5      	b.n	56b8 <MTPStorage_SD::usedSize(unsigned long)+0x138>
    570c:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    5710:	2900      	cmp	r1, #0
    5712:	f43f af41 	beq.w	5598 <MTPStorage_SD::usedSize(unsigned long)+0x18>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    5716:	f8d1 1430 	ldr.w	r1, [r1, #1072]	; 0x430
    571a:	e73d      	b.n	5598 <MTPStorage_SD::usedSize(unsigned long)+0x18>
    571c:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
  uint32_t clusterCount() const {
    5720:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
    5724:	b147      	cbz	r7, 5738 <MTPStorage_SD::usedSize(unsigned long)+0x1b8>
    5726:	f8d7 4430 	ldr.w	r4, [r7, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    572a:	2800      	cmp	r0, #0
    572c:	f47f af66 	bne.w	55fc <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5730:	4680      	mov	r8, r0
    5732:	e770      	b.n	5616 <MTPStorage_SD::usedSize(unsigned long)+0x96>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5734:	4604      	mov	r4, r0
    5736:	e749      	b.n	55cc <MTPStorage_SD::usedSize(unsigned long)+0x4c>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5738:	b118      	cbz	r0, 5742 <MTPStorage_SD::usedSize(unsigned long)+0x1c2>
           m_xVol ? m_xVol->clusterCount() : 0;
    573a:	463c      	mov	r4, r7
    573c:	e75e      	b.n	55fc <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    573e:	4601      	mov	r1, r0
    5740:	e7cd      	b.n	56de <MTPStorage_SD::usedSize(unsigned long)+0x15e>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5742:	4607      	mov	r7, r0
    5744:	4604      	mov	r4, r0
    5746:	e7be      	b.n	56c6 <MTPStorage_SD::usedSize(unsigned long)+0x146>
    5748:	20008a0c 	.word	0x20008a0c

0000574c <MTPStorage_SD::ResetIndex()>:
    574c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec

  void MTPStorage_SD::ResetIndex() {
    5750:	b510      	push	{r4, lr}
    5752:	4604      	mov	r4, r0
    5754:	b1cb      	cbz	r3, 578a <MTPStorage_SD::ResetIndex()+0x3e>
    if(index_.isOpen()) {index_.close();}
    5756:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    575a:	f004 ffef 	bl	a73c <FsBaseFile::close()>
    index_entries_ = 0;
    575e:	2300      	movs	r3, #0
    if(!index_.isOpen()) return;
    CloseIndex();

    all_scanned_ = false;
    open_file_ = 0xFFFFFFFEUL;
    5760:	f06f 0101 	mvn.w	r1, #1
    5764:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
    index_entries_ = 0;
    5768:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
    index_generated = false;
    576c:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
    open_file_ = 0xFFFFFFFEUL;
    5770:	f8c4 11a0 	str.w	r1, [r4, #416]	; 0x1a0
    5774:	b102      	cbz	r2, 5778 <MTPStorage_SD::ResetIndex()+0x2c>

    OpenIndex();
  }
    5776:	bd10      	pop	{r4, pc}
    5778:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    577c:	2b00      	cmp	r3, #0
    577e:	d1fa      	bne.n	5776 <MTPStorage_SD::ResetIndex()+0x2a>
    5780:	4620      	mov	r0, r4
    5782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5786:	f7ff bea3 	b.w	54d0 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    578a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    578e:	2b00      	cmp	r3, #0
    5790:	d1e1      	bne.n	5756 <MTPStorage_SD::ResetIndex()+0xa>
    5792:	bd10      	pop	{r4, pc}

00005794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    5794:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    5798:	b570      	push	{r4, r5, r6, lr}
    579a:	4604      	mov	r4, r0
    579c:	b082      	sub	sp, #8
    579e:	4615      	mov	r5, r2
    57a0:	b1e3      	cbz	r3, 57dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x48>
    mtp_lock_storage(true);
    index_.seekSet((sizeof(r) * i));
    57a2:	f44f 728c 	mov.w	r2, #280	; 0x118
    57a6:	fb02 f101 	mul.w	r1, r2, r1
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    57aa:	4618      	mov	r0, r3
    57ac:	f003 fc94 	bl	90d8 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    57b0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    57b4:	b138      	cbz	r0, 57c6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x32>
    57b6:	f44f 728c 	mov.w	r2, #280	; 0x118
    57ba:	4629      	mov	r1, r5
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    57bc:	b002      	add	sp, #8
    57be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    57c2:	f003 bdbf 	b.w	9344 <FatFile::write(void const*, unsigned int)>
    57c6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
           m_xFile ? m_xFile->write(buf, count) : 0;
    57ca:	b320      	cbz	r0, 5816 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x82>
    57cc:	f44f 728c 	mov.w	r2, #280	; 0x118
    57d0:	4629      	mov	r1, r5
    57d2:	b002      	add	sp, #8
    57d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    57d8:	f002 ba5a 	b.w	7c90 <ExFatFile::write(void const*, unsigned int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    57dc:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
    57e0:	b146      	cbz	r6, 57f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x60>
    index_.seekSet((sizeof(r) * i));
    57e2:	f44f 728c 	mov.w	r2, #280	; 0x118
    57e6:	fb01 f202 	mul.w	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
    57ea:	2300      	movs	r3, #0
    57ec:	4630      	mov	r0, r6
    57ee:	f001 fc1f 	bl	7030 <ExFatFile::seekSet(unsigned long long)>
    57f2:	e7dd      	b.n	57b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x1c>
    57f4:	9101      	str	r1, [sp, #4]
    57f6:	f7ff fe6b 	bl	54d0 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    57fa:	9901      	ldr	r1, [sp, #4]
    57fc:	f44f 728c 	mov.w	r2, #280	; 0x118
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5800:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    5804:	fb01 f202 	mul.w	r2, r1, r2
    5808:	4611      	mov	r1, r2
    580a:	2b00      	cmp	r3, #0
    580c:	d1cd      	bne.n	57aa <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x16>
    580e:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
           m_xFile ? m_xFile->seekSet(pos) : false;
    5812:	2e00      	cmp	r6, #0
    5814:	d1e9      	bne.n	57ea <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x56>
  }
    5816:	b002      	add	sp, #8
    5818:	bd70      	pop	{r4, r5, r6, pc}
    581a:	bf00      	nop

0000581c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    581c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5820:	4605      	mov	r5, r0
  { if (index_generated) return; 
    index_generated = true;
    5822:	2601      	movs	r6, #1
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    5824:	b0c7      	sub	sp, #284	; 0x11c
    5826:	210d      	movs	r1, #13
    5828:	482a      	ldr	r0, [pc, #168]	; (58d4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    index_generated = true;
    582a:	f885 61a8 	strb.w	r6, [r5, #424]	; 0x1a8
    582e:	f009 ffb5 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5832:	4829      	ldr	r0, [pc, #164]	; (58d8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xbc>)
    5834:	f007 fc2a 	bl	d08c <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    5838:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  * \param[in] path A path with a valid 8.3 DOS name for the file.
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
    583a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    583e:	b3a2      	cbz	r2, 58aa <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x8e>
    5840:	466c      	mov	r4, sp
    5842:	2000      	movs	r0, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5844:	4611      	mov	r1, r2
    5846:	4633      	mov	r3, r6
    5848:	6020      	str	r0, [r4, #0]
    584a:	4620      	mov	r0, r4
    584c:	4a21      	ldr	r2, [pc, #132]	; (58d4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    584e:	f003 f9a7 	bl	8ba0 <FatFile::open(FatVolume*, char const*, int)>
    5852:	2800      	cmp	r0, #0
    5854:	d13a      	bne.n	58cc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb0>
      uint32_t sd_getFSCount(void) {return fsCount;}
    5856:	682b      	ldr	r3, [r5, #0]
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    5858:	2600      	movs	r6, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    585a:	42b3      	cmp	r3, r6
    num_storage = sd_getFSCount();
    585c:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
    index_entries_ = 0;
    5860:	f8c5 61a4 	str.w	r6, [r5, #420]	; 0x1a4
    for(int ii=0; ii<num_storage; ii++)
    5864:	dd1e      	ble.n	58a4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x88>
    5866:	466c      	mov	r4, sp
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    5868:	f04f 39ff 	mov.w	r9, #4294967295
      r.sibling = 0;
      r.child = 0;
    586c:	4637      	mov	r7, r6
      r.isdir = true;
    586e:	f04f 0801 	mov.w	r8, #1
  { uint32_t new_record = index_entries_++;
    5872:	f8d5 11a4 	ldr.w	r1, [r5, #420]	; 0x1a4
      r.scanned = false;
      strcpy(r.name, "/");
    5876:	232f      	movs	r3, #47	; 0x2f
    WriteIndexRecord(new_record, r);
    5878:	4622      	mov	r2, r4
    587a:	4628      	mov	r0, r5
  { uint32_t new_record = index_entries_++;
    587c:	f101 0c01 	add.w	ip, r1, #1
      r.store = ii; // 
    5880:	81e6      	strh	r6, [r4, #14]
      r.parent = 0xFFFFFFFFUL; // 
    5882:	f8c4 9000 	str.w	r9, [r4]
    for(int ii=0; ii<num_storage; ii++)
    5886:	3601      	adds	r6, #1
  { uint32_t new_record = index_entries_++;
    5888:	f8c5 c1a4 	str.w	ip, [r5, #420]	; 0x1a4
      r.isdir = true;
    588c:	f8a4 800c 	strh.w	r8, [r4, #12]
      r.sibling = 0;
    5890:	e9c4 7701 	strd	r7, r7, [r4, #4]
      strcpy(r.name, "/");
    5894:	f8ad 3018 	strh.w	r3, [sp, #24]
    WriteIndexRecord(new_record, r);
    5898:	f7ff ff7c 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    589c:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
    58a0:	429e      	cmp	r6, r3
    58a2:	dbe6      	blt.n	5872 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x56>
      AppendIndexRecord(r);
    }
  }
    58a4:	b047      	add	sp, #284	; 0x11c
    58a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    58aa:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    58ae:	2900      	cmp	r1, #0
    58b0:	d0d1      	beq.n	5856 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    58b2:	466c      	mov	r4, sp
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    58b4:	4633      	mov	r3, r6
    58b6:	6322      	str	r2, [r4, #48]	; 0x30
    58b8:	4620      	mov	r0, r4
    58ba:	4a06      	ldr	r2, [pc, #24]	; (58d4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    58bc:	f001 fe76 	bl	75ac <ExFatFile::open(ExFatVolume*, char const*, int)>
    58c0:	2800      	cmp	r0, #0
    58c2:	d0c8      	beq.n	5856 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    58c4:	4620      	mov	r0, r4
    58c6:	f001 fed5 	bl	7674 <ExFatFile::remove()>
    58ca:	e7c4      	b.n	5856 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    58cc:	4620      	mov	r0, r4
    58ce:	f004 f9c7 	bl	9c60 <FatFile::remove()>
    58d2:	e7c0      	b.n	5856 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    58d4:	20000abc 	.word	0x20000abc
    58d8:	20008a0c 	.word	0x20008a0c

000058dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    58dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    58de:	f44f 778c 	mov.w	r7, #280	; 0x118
  {
    58e2:	460c      	mov	r4, r1
    58e4:	4615      	mov	r5, r2
    memset(&ret, 0, sizeof(ret));
    58e6:	2100      	movs	r1, #0
    58e8:	463a      	mov	r2, r7
  {
    58ea:	4606      	mov	r6, r0
    memset(&ret, 0, sizeof(ret));
    58ec:	f00c fa64 	bl	11db8 <memset>
    if (i > index_entries_) 
    58f0:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    58f4:	42ab      	cmp	r3, r5
    58f6:	d201      	bcs.n	58fc <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20>
  }
    58f8:	4630      	mov	r0, r6
    58fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    58fc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    5900:	b1c0      	cbz	r0, 5934 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x58>
    index_.seekSet(sizeof(ret) * i);
    5902:	fb07 f105 	mul.w	r1, r7, r5
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5906:	f003 fbe7 	bl	90d8 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    590a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    590e:	b130      	cbz	r0, 591e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x42>
    5910:	f44f 728c 	mov.w	r2, #280	; 0x118
    5914:	4631      	mov	r1, r6
    5916:	f003 f997 	bl	8c48 <FatFile::read(void*, unsigned int)>
  }
    591a:	4630      	mov	r0, r6
    591c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    591e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
           m_xFile ? m_xFile->read(buf, count) : -1;
    5922:	2800      	cmp	r0, #0
    5924:	d0e8      	beq.n	58f8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c>
    5926:	f44f 728c 	mov.w	r2, #280	; 0x118
    592a:	4631      	mov	r1, r6
    592c:	f001 fa9a 	bl	6e64 <ExFatFile::read(void*, unsigned int)>
    5930:	4630      	mov	r0, r6
    5932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5934:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    5938:	b128      	cbz	r0, 5946 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x6a>
    index_.seekSet(sizeof(ret) * i);
    593a:	fb07 f205 	mul.w	r2, r7, r5
           m_xFile ? m_xFile->seekSet(pos) : false;
    593e:	2300      	movs	r3, #0
    5940:	f001 fb76 	bl	7030 <ExFatFile::seekSet(unsigned long long)>
    5944:	e7e1      	b.n	590a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2e>
    5946:	4620      	mov	r0, r4
    5948:	f7ff fdc2 	bl	54d0 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    594c:	fb07 f205 	mul.w	r2, r7, r5
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5950:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    5954:	4611      	mov	r1, r2
    5956:	2800      	cmp	r0, #0
    5958:	d1d5      	bne.n	5906 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2a>
    595a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
           m_xFile ? m_xFile->seekSet(pos) : false;
    595e:	2800      	cmp	r0, #0
    5960:	d0ca      	beq.n	58f8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c>
    5962:	e7ec      	b.n	593e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x62>

00005964 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    5964:	b570      	push	{r4, r5, r6, lr}
    5966:	b0c6      	sub	sp, #280	; 0x118
    5968:	4614      	mov	r4, r2
    596a:	4605      	mov	r5, r0
    Record tmp = ReadIndexRecord(i);
    596c:	460a      	mov	r2, r1
    596e:	4601      	mov	r1, r0
    5970:	4668      	mov	r0, sp
  {
    5972:	461e      	mov	r6, r3
    Record tmp = ReadIndexRecord(i);
    5974:	f7ff ffb2 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    5978:	9900      	ldr	r1, [sp, #0]
    597a:	1c4b      	adds	r3, r1, #1
    597c:	d01b      	beq.n	59b6 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x52>
    { ConstructFilename(tmp.parent, out, len);
    597e:	4633      	mov	r3, r6
    5980:	4622      	mov	r2, r4
    5982:	4628      	mov	r0, r5
    5984:	f7ff ffee 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    5988:	4620      	mov	r0, r4
    598a:	f00c fdf9 	bl	12580 <strlen>
    598e:	4420      	add	r0, r4
    5990:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    5994:	2b2f      	cmp	r3, #47	; 0x2f
    5996:	d108      	bne.n	59aa <MTPStorage_SD::ConstructFilename(int, char*, int)+0x46>
      strlcat(out, tmp.name,len);
    5998:	4632      	mov	r2, r6
    599a:	a906      	add	r1, sp, #24
    599c:	4620      	mov	r0, r4
    599e:	f00c fa5d 	bl	11e5c <strlcat>
      return tmp.store;
    59a2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
  }
    59a6:	b046      	add	sp, #280	; 0x118
    59a8:	bd70      	pop	{r4, r5, r6, pc}
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    59aa:	4632      	mov	r2, r6
    59ac:	4905      	ldr	r1, [pc, #20]	; (59c4 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    59ae:	4620      	mov	r0, r4
    59b0:	f00c fa54 	bl	11e5c <strlcat>
    59b4:	e7f0      	b.n	5998 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x34>
    { strcpy(out, "/");
    59b6:	4b03      	ldr	r3, [pc, #12]	; (59c4 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    59b8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    { strcpy(out, "/");
    59bc:	881b      	ldrh	r3, [r3, #0]
    59be:	8023      	strh	r3, [r4, #0]
  }
    59c0:	b046      	add	sp, #280	; 0x118
    59c2:	bd70      	pop	{r4, r5, r6, pc}
    59c4:	20000498 	.word	0x20000498

000059c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    59c8:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
    59cc:	428b      	cmp	r3, r1
  {
    59ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59d2:	4604      	mov	r4, r0
    59d4:	b0d4      	sub	sp, #336	; 0x150
    59d6:	460d      	mov	r5, r1
    59d8:	4617      	mov	r7, r2
    if (open_file_ == i && mode_ == mode) return;
    59da:	d103      	bne.n	59e4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    59dc:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    59e0:	4293      	cmp	r3, r2
    59e2:	d02c      	beq.n	5a3e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x76>
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    59e4:	f44f 7380 	mov.w	r3, #256	; 0x100
    59e8:	4629      	mov	r1, r5
    59ea:	4620      	mov	r0, r4
    59ec:	aa14      	add	r2, sp, #80	; 0x50
    59ee:	f7ff ffb9 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    59f2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    59f6:	4606      	mov	r6, r0
    if(file_.isOpen()) {file_.close();}
    59f8:	f504 7882 	add.w	r8, r4, #260	; 0x104
    59fc:	b313      	cbz	r3, 5a44 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x7c>
    59fe:	4640      	mov	r0, r8
    5a00:	f004 fe9c 	bl	a73c <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    5a04:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    5a08:	aa14      	add	r2, sp, #80	; 0x50
    5a0a:	463b      	mov	r3, r7
    5a0c:	4668      	mov	r0, sp
    5a0e:	6d71      	ldr	r1, [r6, #84]	; 0x54
    5a10:	f004 ffae 	bl	a970 <FsVolume::open(char const*, int)>
class Print
    5a14:	9b01      	ldr	r3, [sp, #4]
    5a16:	a904      	add	r1, sp, #16
    5a18:	4640      	mov	r0, r8
    5a1a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
    5a1e:	9b02      	ldr	r3, [sp, #8]
    5a20:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    5a24:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5a28:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    5a2c:	f004 fe2c 	bl	a688 <FsBaseFile::operator=(FsBaseFile const&)>
    5a30:	4b07      	ldr	r3, [pc, #28]	; (5a50 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x88>)
  ~FsBaseFile() {close();}
    5a32:	a804      	add	r0, sp, #16
    5a34:	9300      	str	r3, [sp, #0]
    5a36:	f004 fe81 	bl	a73c <FsBaseFile::close()>
    mode_ = mode;
    5a3a:	e9c4 7567 	strd	r7, r5, [r4, #412]	; 0x19c
  }
    5a3e:	b054      	add	sp, #336	; 0x150
    5a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5a44:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5a48:	2b00      	cmp	r3, #0
    5a4a:	d1d8      	bne.n	59fe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
    5a4c:	e7da      	b.n	5a04 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3c>
    5a4e:	bf00      	nop
    5a50:	20000b58 	.word	0x20000b58

00005a54 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    5a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a58:	f1b2 3fff 	cmp.w	r2, #4294967295
    5a5c:	bf14      	ite	ne
    5a5e:	4616      	movne	r6, r2
    5a60:	460e      	moveq	r6, r1
    5a62:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    5a66:	4601      	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    5a68:	4681      	mov	r9, r0
    Record record = ReadIndexRecord(i);
    5a6a:	4632      	mov	r2, r6
    5a6c:	4668      	mov	r0, sp
    5a6e:	f7ff ff35 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    5a72:	f89d 200c 	ldrb.w	r2, [sp, #12]
    5a76:	b112      	cbz	r2, 5a7e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    5a78:	f89d 200d 	ldrb.w	r2, [sp, #13]
    5a7c:	b11a      	cbz	r2, 5a86 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    5a7e:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
    5a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      OpenFileByIndex(i);
    5a86:	4631      	mov	r1, r6
    5a88:	4648      	mov	r0, r9
    5a8a:	f7ff ff9d 	bl	59c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    5a8e:	f8d9 213c 	ldr.w	r2, [r9, #316]	; 0x13c
    5a92:	2a00      	cmp	r2, #0
    5a94:	f000 80b0 	beq.w	5bf8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a4>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    5a98:	2400      	movs	r4, #0
    5a9a:	f509 77aa 	add.w	r7, r9, #340	; 0x154
    5a9e:	f509 7b82 	add.w	fp, r9, #260	; 0x104
    5aa2:	f8df a164 	ldr.w	sl, [pc, #356]	; 5c08 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b4>
	constexpr Print() : write_error(0) {}
    5aa6:	4625      	mov	r5, r4
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5aa8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    5aac:	2200      	movs	r2, #0
    5aae:	4659      	mov	r1, fp
    5ab0:	a84a      	add	r0, sp, #296	; 0x128
    5ab2:	f88d 5124 	strb.w	r5, [sp, #292]	; 0x124
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5ab6:	f8cd a118 	str.w	sl, [sp, #280]	; 0x118
    5aba:	e9cd 5847 	strd	r5, r8, [sp, #284]	; 0x11c
  FsBaseFile() {}
    5abe:	e9cd 5558 	strd	r5, r5, [sp, #352]	; 0x160
    tmpFile.openNext(this, oflag);
    5ac2:	f004 fea7 	bl	a814 <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    5ac6:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    5ac8:	a94a      	add	r1, sp, #296	; 0x128
    5aca:	4638      	mov	r0, r7
    5acc:	f8c9 2148 	str.w	r2, [r9, #328]	; 0x148
class Stream : public Print
    5ad0:	9a48      	ldr	r2, [sp, #288]	; 0x120
    5ad2:	f8c9 214c 	str.w	r2, [r9, #332]	; 0x14c
    5ad6:	f89d 2124 	ldrb.w	r2, [sp, #292]	; 0x124
    5ada:	f889 2150 	strb.w	r2, [r9, #336]	; 0x150
    5ade:	f004 fdd3 	bl	a688 <FsBaseFile::operator=(FsBaseFile const&)>
    5ae2:	4b48      	ldr	r3, [pc, #288]	; (5c04 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b0>)
  ~FsBaseFile() {close();}
    5ae4:	a84a      	add	r0, sp, #296	; 0x128
    5ae6:	9346      	str	r3, [sp, #280]	; 0x118
    5ae8:	f004 fe28 	bl	a73c <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    5aec:	f8d9 018c 	ldr.w	r0, [r9, #396]	; 0x18c
    5af0:	2800      	cmp	r0, #0
    5af2:	d051      	beq.n	5b98 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x144>
        r.store = record.store;
    5af4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
        r.sibling = sibling;
    5af8:	9448      	str	r4, [sp, #288]	; 0x120
        r.parent = i;
    5afa:	9646      	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    5afc:	f8ad 2126 	strh.w	r2, [sp, #294]	; 0x126
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    5b00:	7802      	ldrb	r2, [r0, #0]
    5b02:	f002 0270 	and.w	r2, r2, #112	; 0x70
    5b06:	2a00      	cmp	r2, #0
    5b08:	bf14      	ite	ne
    5b0a:	2201      	movne	r2, #1
    5b0c:	2200      	moveq	r2, #0
    5b0e:	f88d 2124 	strb.w	r2, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    5b12:	d03f      	beq.n	5b94 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x140>
    5b14:	2200      	movs	r2, #0
    5b16:	9247      	str	r2, [sp, #284]	; 0x11c
    return m_fFile ? m_fFile->getName(name, len) :
    5b18:	a94c      	add	r1, sp, #304	; 0x130
    5b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    5b1e:	f88d 5125 	strb.w	r5, [sp, #293]	; 0x125
    *name = 0;
    5b22:	f88d 5130 	strb.w	r5, [sp, #304]	; 0x130
    return m_fFile ? m_fFile->getName(name, len) :
    5b26:	f004 fa29 	bl	9f7c <FatFile::getName(char*, unsigned int)>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    5b2a:	f8d9 018c 	ldr.w	r0, [r9, #396]	; 0x18c
    5b2e:	b1d0      	cbz	r0, 5b66 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x112>
    5b30:	f50d 7295 	add.w	r2, sp, #298	; 0x12a
    5b34:	a94a      	add	r1, sp, #296	; 0x128
    5b36:	f002 fe65 	bl	8804 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    5b3a:	f8d9 018c 	ldr.w	r0, [r9, #396]	; 0x18c
    5b3e:	b1f8      	cbz	r0, 5b80 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x12c>
    5b40:	f50d 7297 	add.w	r2, sp, #302	; 0x12e
    5b44:	a94b      	add	r1, sp, #300	; 0x12c
    5b46:	f002 fe6d 	bl	8824 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
  { uint32_t new_record = index_entries_++;
    5b4a:	f8d9 41a4 	ldr.w	r4, [r9, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    5b4e:	4648      	mov	r0, r9
    5b50:	aa46      	add	r2, sp, #280	; 0x118
  { uint32_t new_record = index_entries_++;
    5b52:	1c61      	adds	r1, r4, #1
    5b54:	f8c9 11a4 	str.w	r1, [r9, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    5b58:	4621      	mov	r1, r4
    5b5a:	f7ff fe1b 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        child_.close();
    5b5e:	4638      	mov	r0, r7
    5b60:	f004 fdec 	bl	a73c <FsBaseFile::close()>
      }
    5b64:	e7a2      	b.n	5aac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x58>
    5b66:	f8d9 0190 	ldr.w	r0, [r9, #400]	; 0x190
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    5b6a:	2800      	cmp	r0, #0
    5b6c:	d0ed      	beq.n	5b4a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf6>
    5b6e:	f50d 7295 	add.w	r2, sp, #298	; 0x12a
    5b72:	a94a      	add	r1, sp, #296	; 0x128
    5b74:	f001 f8f0 	bl	6d58 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    5b78:	f8d9 018c 	ldr.w	r0, [r9, #396]	; 0x18c
    5b7c:	2800      	cmp	r0, #0
    5b7e:	d1df      	bne.n	5b40 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
    5b80:	f8d9 0190 	ldr.w	r0, [r9, #400]	; 0x190
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    5b84:	2800      	cmp	r0, #0
    5b86:	d0e0      	beq.n	5b4a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf6>
    5b88:	f50d 7297 	add.w	r2, sp, #302	; 0x12e
    5b8c:	a94b      	add	r1, sp, #300	; 0x12c
    5b8e:	f001 f8f5 	bl	6d7c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    5b92:	e7da      	b.n	5b4a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf6>
  uint32_t fileSize() const {return m_fileSize;}
    5b94:	69c2      	ldr	r2, [r0, #28]
    return m_fFile ? m_fFile->getName(name, len) :
    5b96:	e7be      	b.n	5b16 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xc2>
  bool isOpen() const {return m_fFile || m_xFile;}
    5b98:	f8d9 2190 	ldr.w	r2, [r9, #400]	; 0x190
    5b9c:	b1fa      	cbz	r2, 5bde <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x18a>
        r.store = record.store;
    5b9e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
        r.sibling = sibling;
    5ba2:	9448      	str	r4, [sp, #288]	; 0x120
        r.parent = i;
    5ba4:	9646      	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    5ba6:	f8ad 1126 	strh.w	r1, [sp, #294]	; 0x126
           m_xFile ? m_xFile->isDir() : false;
    5baa:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    5bae:	f011 0150 	ands.w	r1, r1, #80	; 0x50
    5bb2:	d010      	beq.n	5bd6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x182>
        r.isdir = child_.isDirectory();
    5bb4:	2101      	movs	r1, #1
    5bb6:	f88d 1124 	strb.w	r1, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    5bba:	9047      	str	r0, [sp, #284]	; 0x11c
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
    5bbc:	a94c      	add	r1, sp, #304	; 0x130
    5bbe:	4610      	mov	r0, r2
    5bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    5bc4:	f88d 5125 	strb.w	r5, [sp, #293]	; 0x125
    *name = 0;
    5bc8:	f88d 5130 	strb.w	r5, [sp, #304]	; 0x130
    5bcc:	f002 f9c6 	bl	7f5c <ExFatFile::getName8(char*, unsigned int)>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    5bd0:	f8d9 018c 	ldr.w	r0, [r9, #396]	; 0x18c
    5bd4:	e7ab      	b.n	5b2e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xda>
        r.isdir = child_.isDirectory();
    5bd6:	f88d 1124 	strb.w	r1, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    5bda:	6910      	ldr	r0, [r2, #16]
  size_t getName(char* name, size_t len) {
    5bdc:	e7ed      	b.n	5bba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x166>
      record.scanned = true;
    5bde:	2501      	movs	r5, #1
      WriteIndexRecord(i, record);
    5be0:	4631      	mov	r1, r6
    5be2:	4648      	mov	r0, r9
    5be4:	466a      	mov	r2, sp
      record.child = sibling;
    5be6:	9401      	str	r4, [sp, #4]
      record.scanned = true;
    5be8:	f88d 500d 	strb.w	r5, [sp, #13]
      WriteIndexRecord(i, record);
    5bec:	f7ff fdd2 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    5bf0:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
    5bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5bf8:	f8d9 2140 	ldr.w	r2, [r9, #320]	; 0x140
    5bfc:	2a00      	cmp	r2, #0
    5bfe:	f47f af4b 	bne.w	5a98 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x44>
    5c02:	e73c      	b.n	5a7e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    5c04:	20000b58 	.word	0x20000b58
    5c08:	20000c20 	.word	0x20000c20

00005c0c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { if (index_generated) return; 
    5c0c:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    5c10:	b570      	push	{r4, r5, r6, lr}
    5c12:	4606      	mov	r6, r0
    5c14:	b0c6      	sub	sp, #280	; 0x118
    5c16:	460d      	mov	r5, r1
    5c18:	4614      	mov	r4, r2
  { if (index_generated) return; 
    5c1a:	b3a3      	cbz	r3, 5c86 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x7a>
    GenerateIndex(store);
    if (parent) 
    5c1c:	b1ac      	cbz	r4, 5c4a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3e>
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    5c1e:	f1b4 3fff 	cmp.w	r4, #4294967295
    5c22:	bf08      	it	eq
    5c24:	462c      	moveq	r4, r5

      ScanDir(store, parent);
    5c26:	4629      	mov	r1, r5
    5c28:	4630      	mov	r0, r6
    5c2a:	4622      	mov	r2, r4
    5c2c:	f7ff ff12 	bl	5a54 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    5c30:	2301      	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    5c32:	4622      	mov	r2, r4
    5c34:	4631      	mov	r1, r6
      follow_sibling_ = true;
    5c36:	f886 31b0 	strb.w	r3, [r6, #432]	; 0x1b0
      next_ = ReadIndexRecord(parent).child;
    5c3a:	4668      	mov	r0, sp
    5c3c:	f7ff fe4e 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5c40:	9b01      	ldr	r3, [sp, #4]
    5c42:	f8c6 31ac 	str.w	r3, [r6, #428]	; 0x1ac
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    5c46:	b046      	add	sp, #280	; 0x118
    5c48:	bd70      	pop	{r4, r5, r6, pc}
  { if (all_scanned_) return;
    5c4a:	f896 31a9 	ldrb.w	r3, [r6, #425]	; 0x1a9
    5c4e:	b993      	cbnz	r3, 5c76 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x6a>
    all_scanned_ = true;
    5c50:	2201      	movs	r2, #1
  { if (index_generated) return; 
    5c52:	f896 31a8 	ldrb.w	r3, [r6, #424]	; 0x1a8
    all_scanned_ = true;
    5c56:	f886 21a9 	strb.w	r2, [r6, #425]	; 0x1a9
  { if (index_generated) return; 
    5c5a:	b1bb      	cbz	r3, 5c8c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x80>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    5c5c:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    5c60:	b14b      	cbz	r3, 5c76 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x6a>
    5c62:	4622      	mov	r2, r4
    5c64:	4629      	mov	r1, r5
    5c66:	4630      	mov	r0, r6
    5c68:	3401      	adds	r4, #1
    5c6a:	f7ff fef3 	bl	5a54 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    5c6e:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    5c72:	429c      	cmp	r4, r3
    5c74:	d3f5      	bcc.n	5c62 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x56>
      follow_sibling_ = false;
    5c76:	2200      	movs	r2, #0
      next_ = 1;
    5c78:	2301      	movs	r3, #1
      follow_sibling_ = false;
    5c7a:	f886 21b0 	strb.w	r2, [r6, #432]	; 0x1b0
      next_ = 1;
    5c7e:	f8c6 31ac 	str.w	r3, [r6, #428]	; 0x1ac
  }
    5c82:	b046      	add	sp, #280	; 0x118
    5c84:	bd70      	pop	{r4, r5, r6, pc}
    5c86:	f7ff fdc9 	bl	581c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    5c8a:	e7c7      	b.n	5c1c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x10>
    5c8c:	4630      	mov	r0, r6
    5c8e:	f7ff fdc5 	bl	581c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    5c92:	e7e3      	b.n	5c5c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x50>

00005c94 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    5c94:	b530      	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    5c96:	f8d0 51ac 	ldr.w	r5, [r0, #428]	; 0x1ac
  {
    5c9a:	b0c7      	sub	sp, #284	; 0x11c
    { if (next_ == 0) return 0;
    5c9c:	b325      	cbz	r5, 5ce8 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
    5c9e:	4604      	mov	r4, r0
    5ca0:	e008      	b.n	5cb4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    5ca2:	9b02      	ldr	r3, [sp, #8]
    5ca4:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    5ca8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5cac:	b9cb      	cbnz	r3, 5ce2 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x4e>
    { if (next_ == 0) return 0;
    5cae:	f8d4 51ac 	ldr.w	r5, [r4, #428]	; 0x1ac
    5cb2:	b1cd      	cbz	r5, 5ce8 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
      Record r = ReadIndexRecord(ret);
    5cb4:	462a      	mov	r2, r5
    5cb6:	4621      	mov	r1, r4
    5cb8:	4668      	mov	r0, sp
    5cba:	f7ff fe0f 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    5cbe:	f894 31b0 	ldrb.w	r3, [r4, #432]	; 0x1b0
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	d1ed      	bne.n	5ca2 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_++;
    5cc6:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
        if (next_ >= index_entries_) next_ = 0;
    5cca:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
      { next_++;
    5cce:	3201      	adds	r2, #1
        if (next_ >= index_entries_) next_ = 0;
    5cd0:	428a      	cmp	r2, r1
    5cd2:	bf38      	it	cc
    5cd4:	4613      	movcc	r3, r2
    5cd6:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
      if (r.name[0]) return ret;
    5cda:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5cde:	2b00      	cmp	r3, #0
    5ce0:	d0e5      	beq.n	5cae <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    5ce2:	4628      	mov	r0, r5
    5ce4:	b047      	add	sp, #284	; 0x11c
    5ce6:	bd30      	pop	{r4, r5, pc}
    { if (next_ == 0) return 0;
    5ce8:	2500      	movs	r5, #0
  }
    5cea:	4628      	mov	r0, r5
    5cec:	b047      	add	sp, #284	; 0x11c
    5cee:	bd30      	pop	{r4, r5, pc}

00005cf0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint64_t* size, uint32_t* parent, uint16_t *store, char *create, char *modify)
  {
    5cf0:	b530      	push	{r4, r5, lr}
    5cf2:	b0cd      	sub	sp, #308	; 0x134
    5cf4:	4615      	mov	r5, r2
    5cf6:	460a      	mov	r2, r1
    Record r = ReadIndexRecord(handle);
    5cf8:	4601      	mov	r1, r0
    5cfa:	a806      	add	r0, sp, #24
  {
    5cfc:	461c      	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    5cfe:	f7ff fded 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    5d02:	4628      	mov	r0, r5
    5d04:	a90c      	add	r1, sp, #48	; 0x30
    5d06:	f00c fb89 	bl	1241c <strcpy>
    *parent = r.parent;
    5d0a:	9b06      	ldr	r3, [sp, #24]
    5d0c:	9a50      	ldr	r2, [sp, #320]	; 0x140
    5d0e:	6013      	str	r3, [r2, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5d10:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    5d14:	2b00      	cmp	r3, #0
    5d16:	d13e      	bne.n	5d96 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xa6>
    5d18:	9a07      	ldr	r2, [sp, #28]
    5d1a:	6063      	str	r3, [r4, #4]
    *store = r.store;
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
          FS_HOUR(r.cptime),FS_MINUTE(r.cptime),FS_SECOND(r.cptime));
    5d1c:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    *store = r.store;
    5d20:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
    5d24:	9b51      	ldr	r3, [sp, #324]	; 0x144
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5d26:	6022      	str	r2, [r4, #0]
    *store = r.store;
    5d28:	8018      	strh	r0, [r3, #0]
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    5d2a:	f001 001f 	and.w	r0, r1, #31
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
    5d2e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    5d32:	0040      	lsls	r0, r0, #1
    5d34:	f002 041f 	and.w	r4, r2, #31
  return 1980 + (fatDate >> 9);
    5d38:	0a53      	lsrs	r3, r2, #9
    5d3a:	9004      	str	r0, [sp, #16]
    5d3c:	f3c1 1045 	ubfx	r0, r1, #5, #6
    5d40:	0ac9      	lsrs	r1, r1, #11
    5d42:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
    5d46:	9003      	str	r0, [sp, #12]
    5d48:	f3c2 1043 	ubfx	r0, r2, #5, #4
    5d4c:	4a14      	ldr	r2, [pc, #80]	; (5da0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xb0>)
    5d4e:	9000      	str	r0, [sp, #0]
    5d50:	9852      	ldr	r0, [sp, #328]	; 0x148
    5d52:	e9cd 4101 	strd	r4, r1, [sp, #4]
    5d56:	2120      	movs	r1, #32
    5d58:	f00b fe44 	bl	119e4 <snprintf>
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
          FS_HOUR(r.mptime),FS_MINUTE(r.mptime),FS_SECOND(r.mptime));
    5d5c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
    5d60:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
  return 2*(fatTime & 0X1F);
    5d64:	f000 041f 	and.w	r4, r0, #31
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
    5d68:	f3c0 1545 	ubfx	r5, r0, #5, #6
    5d6c:	0ac0      	lsrs	r0, r0, #11
    5d6e:	4a0c      	ldr	r2, [pc, #48]	; (5da0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xb0>)
    5d70:	0064      	lsls	r4, r4, #1
    5d72:	9503      	str	r5, [sp, #12]
  return 1980 + (fatDate >> 9);
    5d74:	0a4b      	lsrs	r3, r1, #9
    5d76:	9002      	str	r0, [sp, #8]
    5d78:	9404      	str	r4, [sp, #16]
    5d7a:	f3c1 1043 	ubfx	r0, r1, #5, #4
    5d7e:	f001 041f 	and.w	r4, r1, #31
    5d82:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
    5d86:	2120      	movs	r1, #32
    5d88:	e9cd 0400 	strd	r0, r4, [sp]
    5d8c:	9853      	ldr	r0, [sp, #332]	; 0x14c
    5d8e:	f00b fe29 	bl	119e4 <snprintf>
  }
    5d92:	b04d      	add	sp, #308	; 0x134
    5d94:	bd30      	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5d96:	f04f 32ff 	mov.w	r2, #4294967295
    5d9a:	2300      	movs	r3, #0
    5d9c:	e7bd      	b.n	5d1a <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0x2a>
    5d9e:	bf00      	nop
    5da0:	20000aa0 	.word	0x20000aa0

00005da4 <MTPStorage_SD::GetSize(unsigned long)>:
    WriteIndexRecord(handle, r); 
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    5da4:	b500      	push	{lr}
    5da6:	b0c7      	sub	sp, #284	; 0x11c
    5da8:	460a      	mov	r2, r1
    return ReadIndexRecord(handle).child;
    5daa:	4601      	mov	r1, r0
    5dac:	4668      	mov	r0, sp
    5dae:	f7ff fd95 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    5db2:	9801      	ldr	r0, [sp, #4]
    5db4:	b047      	add	sp, #284	; 0x11c
    5db6:	f85d fb04 	ldr.w	pc, [sp], #4
    5dba:	bf00      	nop

00005dbc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:

  size_t MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    5dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5dbe:	4604      	mov	r4, r0
    5dc0:	4616      	mov	r6, r2
    OpenFileByIndex(handle);
    5dc2:	2200      	movs	r2, #0
  {
    5dc4:	461d      	mov	r5, r3
    5dc6:	9f06      	ldr	r7, [sp, #24]
    OpenFileByIndex(handle);
    5dc8:	f7ff fdfe 	bl	59c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5dcc:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    5dd0:	b1b3      	cbz	r3, 5e00 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x44>
    5dd2:	4631      	mov	r1, r6
    5dd4:	4618      	mov	r0, r3
    5dd6:	f003 f97f 	bl	90d8 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    5dda:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    5dde:	b128      	cbz	r0, 5dec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x30>
    5de0:	463a      	mov	r2, r7
    5de2:	4629      	mov	r1, r5
    5de4:	f002 ff30 	bl	8c48 <FatFile::read(void*, unsigned int)>
    mtp_lock_storage(true);
    file_.seekSet(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
    return bytes;
  }
    5de8:	4638      	mov	r0, r7
    5dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5dec:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
           m_xFile ? m_xFile->read(buf, count) : -1;
    5df0:	2800      	cmp	r0, #0
    5df2:	d0f9      	beq.n	5de8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x2c>
    5df4:	463a      	mov	r2, r7
    5df6:	4629      	mov	r1, r5
    5df8:	f001 f834 	bl	6e64 <ExFatFile::read(void*, unsigned int)>
    5dfc:	4638      	mov	r0, r7
    5dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e00:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
           m_xFile ? m_xFile->seekSet(pos) : false;
    5e04:	2800      	cmp	r0, #0
    5e06:	d0ef      	beq.n	5de8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x2c>
    5e08:	4632      	mov	r2, r6
    5e0a:	f001 f911 	bl	7030 <ExFatFile::seekSet(unsigned long long)>
    5e0e:	e7e4      	b.n	5dda <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x1e>

00005e10 <MTPStorage_SD::removeFile(unsigned long, char*)>:

void MTPStorage_SD::removeFile(uint32_t store, char *file)
{ 
    5e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e14:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
    5e18:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
    5e1c:	2300      	movs	r3, #0
    5e1e:	4681      	mov	r9, r0
    5e20:	4688      	mov	r8, r1
    5e22:	a804      	add	r0, sp, #16
    5e24:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
    5e28:	4615      	mov	r5, r2
    5e2a:	f004 fda1 	bl	a970 <FsVolume::open(char const*, int)>
    return m_fFile ? m_fFile->isDir() :
    5e2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5e30:	2b00      	cmp	r3, #0
    5e32:	f000 80ca 	beq.w	5fca <MTPStorage_SD::removeFile(unsigned long, char*)+0x1ba>
  char tname[2*MAX_FILENAME_LEN];
  char fname[MAX_FILENAME_LEN];
  FsFile f1=sd_open(store,file,O_READ);
  if(f1.isDirectory())
    5e36:	781b      	ldrb	r3, [r3, #0]
    5e38:	f013 0f70 	tst.w	r3, #112	; 0x70
    5e3c:	f000 80cd 	beq.w	5fda <MTPStorage_SD::removeFile(unsigned long, char*)+0x1ca>
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5e40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
    5e44:	2400      	movs	r4, #0
    5e46:	af08      	add	r7, sp, #32
    5e48:	4e80      	ldr	r6, [pc, #512]	; (604c <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    5e4a:	931a      	str	r3, [sp, #104]	; 0x68
  {
    FsFile f2;
    while((f2=f1.openNextFile()))
    { f2.getName(fname,MAX_FILENAME_LEN);
      snprintf(tname,strlen(tname),"%s/%s",file,fname);
    5e4c:	f8df b208 	ldr.w	fp, [pc, #520]	; 6058 <MTPStorage_SD::removeFile(unsigned long, char*)+0x248>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5e50:	4b7f      	ldr	r3, [pc, #508]	; (6050 <MTPStorage_SD::removeFile(unsigned long, char*)+0x240>)
    5e52:	9419      	str	r4, [sp, #100]	; 0x64
    5e54:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    5e58:	9318      	str	r3, [sp, #96]	; 0x60
  FsBaseFile() {}
    5e5a:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5e5e:	4b7c      	ldr	r3, [pc, #496]	; (6050 <MTPStorage_SD::removeFile(unsigned long, char*)+0x240>)
    tmpFile.openNext(this, oflag);
    5e60:	2200      	movs	r2, #0
    5e62:	4639      	mov	r1, r7
    5e64:	a830      	add	r0, sp, #192	; 0xc0
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5e66:	932c      	str	r3, [sp, #176]	; 0xb0
    5e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5e6c:	942d      	str	r4, [sp, #180]	; 0xb4
    5e6e:	932e      	str	r3, [sp, #184]	; 0xb8
    5e70:	f88d 40bc 	strb.w	r4, [sp, #188]	; 0xbc
  FsBaseFile() {}
    5e74:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
    tmpFile.openNext(this, oflag);
    5e78:	f004 fccc 	bl	a814 <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    5e7c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    5e7e:	a930      	add	r1, sp, #192	; 0xc0
    5e80:	a81c      	add	r0, sp, #112	; 0x70
    5e82:	9319      	str	r3, [sp, #100]	; 0x64
class Stream : public Print
    5e84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    5e86:	931a      	str	r3, [sp, #104]	; 0x68
    5e88:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
    5e8c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    5e90:	f004 fbfa 	bl	a688 <FsBaseFile::operator=(FsBaseFile const&)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5e94:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    5e96:	2b00      	cmp	r3, #0
    5e98:	d052      	beq.n	5f40 <MTPStorage_SD::removeFile(unsigned long, char*)+0x130>
  ~FsBaseFile() {close();}
    5e9a:	a830      	add	r0, sp, #192	; 0xc0
    5e9c:	962c      	str	r6, [sp, #176]	; 0xb0
    5e9e:	f004 fc4d 	bl	a73c <FsBaseFile::close()>
    return m_fFile ? m_fFile->getName(name, len) :
    5ea2:	982a      	ldr	r0, [sp, #168]	; 0xa8
    *name = 0;
    5ea4:	f88d 4100 	strb.w	r4, [sp, #256]	; 0x100
    return m_fFile ? m_fFile->getName(name, len) :
    5ea8:	2800      	cmp	r0, #0
    5eaa:	d03f      	beq.n	5f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x11c>
    5eac:	f44f 7280 	mov.w	r2, #256	; 0x100
    5eb0:	eb0d 0102 	add.w	r1, sp, r2
    5eb4:	f004 f862 	bl	9f7c <FatFile::getName(char*, unsigned int)>
    5eb8:	a880      	add	r0, sp, #512	; 0x200
    5eba:	f00c fb61 	bl	12580 <strlen>
    5ebe:	ab40      	add	r3, sp, #256	; 0x100
    5ec0:	4601      	mov	r1, r0
    5ec2:	465a      	mov	r2, fp
    5ec4:	9300      	str	r3, [sp, #0]
    5ec6:	a880      	add	r0, sp, #512	; 0x200
    5ec8:	462b      	mov	r3, r5
    5eca:	f00b fd8b 	bl	119e4 <snprintf>
    return m_fFile ? m_fFile->isDir() :
    5ece:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    5ed0:	b14b      	cbz	r3, 5ee6 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd6>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    5ed2:	781b      	ldrb	r3, [r3, #0]
    5ed4:	f013 0f70 	tst.w	r3, #112	; 0x70
    5ed8:	d00c      	beq.n	5ef4 <MTPStorage_SD::removeFile(unsigned long, char*)+0xe4>
    5eda:	aa80      	add	r2, sp, #512	; 0x200
    5edc:	4641      	mov	r1, r8
    5ede:	4648      	mov	r0, r9
    5ee0:	f7ff ff96 	bl	5e10 <MTPStorage_SD::removeFile(unsigned long, char*)>
    5ee4:	e7bb      	b.n	5e5e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    5ee6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
           m_xFile ? m_xFile->isDir() : false;
    5ee8:	b123      	cbz	r3, 5ef4 <MTPStorage_SD::removeFile(unsigned long, char*)+0xe4>
    5eea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    5eee:	f013 0f50 	tst.w	r3, #80	; 0x50
    5ef2:	d1f2      	bne.n	5eda <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
							  return write((const uint8_t *)str, strlen(str)); }
    5ef4:	a880      	add	r0, sp, #512	; 0x200
    5ef6:	f00c fb43 	bl	12580 <strlen>
    5efa:	4601      	mov	r1, r0
    5efc:	a880      	add	r0, sp, #512	; 0x200
    5efe:	f009 fc4d 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5f02:	4854      	ldr	r0, [pc, #336]	; (6054 <MTPStorage_SD::removeFile(unsigned long, char*)+0x244>)
    5f04:	f007 f8c2 	bl	d08c <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    5f08:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    5f0c:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    5f10:	2900      	cmp	r1, #0
    5f12:	d037      	beq.n	5f84 <MTPStorage_SD::removeFile(unsigned long, char*)+0x174>
    5f14:	aa80      	add	r2, sp, #512	; 0x200
    5f16:	2301      	movs	r3, #1
    5f18:	a82c      	add	r0, sp, #176	; 0xb0
  FatFile() {}
    5f1a:	942c      	str	r4, [sp, #176]	; 0xb0
    5f1c:	f002 fe40 	bl	8ba0 <FatFile::open(FatVolume*, char const*, int)>
    5f20:	2800      	cmp	r0, #0
    5f22:	d09c      	beq.n	5e5e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    5f24:	a82c      	add	r0, sp, #176	; 0xb0
    5f26:	f003 fe9b 	bl	9c60 <FatFile::remove()>
    5f2a:	e798      	b.n	5e5e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    5f2c:	982b      	ldr	r0, [sp, #172]	; 0xac
           m_xFile ? m_xFile->getName(name, len) : 0;
    5f2e:	2800      	cmp	r0, #0
    5f30:	d0c2      	beq.n	5eb8 <MTPStorage_SD::removeFile(unsigned long, char*)+0xa8>
    5f32:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f36:	eb0d 0102 	add.w	r1, sp, r2
    5f3a:	f002 f80f 	bl	7f5c <ExFatFile::getName8(char*, unsigned int)>
    5f3e:	e7bb      	b.n	5eb8 <MTPStorage_SD::removeFile(unsigned long, char*)+0xa8>
  bool isOpen() const {return m_fFile || m_xFile;}
    5f40:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    5f42:	2b00      	cmp	r3, #0
    5f44:	d1a9      	bne.n	5e9a <MTPStorage_SD::removeFile(unsigned long, char*)+0x8a>
  ~FsBaseFile() {close();}
    5f46:	a830      	add	r0, sp, #192	; 0xc0
    5f48:	9303      	str	r3, [sp, #12]
    5f4a:	962c      	str	r6, [sp, #176]	; 0xb0
    5f4c:	f004 fbf6 	bl	a73c <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    5f50:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    5f54:	9b03      	ldr	r3, [sp, #12]
    5f56:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    5f5a:	b330      	cbz	r0, 5faa <MTPStorage_SD::removeFile(unsigned long, char*)+0x19a>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5f5c:	4601      	mov	r1, r0
    5f5e:	462a      	mov	r2, r5
    5f60:	a82c      	add	r0, sp, #176	; 0xb0
    5f62:	932c      	str	r3, [sp, #176]	; 0xb0
    5f64:	f002 fe1c 	bl	8ba0 <FatFile::open(FatVolume*, char const*, int)>
    5f68:	2800      	cmp	r0, #0
    5f6a:	d164      	bne.n	6036 <MTPStorage_SD::removeFile(unsigned long, char*)+0x226>
    5f6c:	a81c      	add	r0, sp, #112	; 0x70
    5f6e:	9618      	str	r6, [sp, #96]	; 0x60
    5f70:	f004 fbe4 	bl	a73c <FsBaseFile::close()>
    5f74:	4638      	mov	r0, r7
    5f76:	9604      	str	r6, [sp, #16]
    5f78:	f004 fbe0 	bl	a73c <FsBaseFile::close()>
  }
  else
  {
    sd_remove(store,file);
  }
}
    5f7c:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
    5f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f84:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    5f88:	2b00      	cmp	r3, #0
    5f8a:	f43f af68 	beq.w	5e5e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
  ExFatFile() {}
    5f8e:	9138      	str	r1, [sp, #224]	; 0xe0
    5f90:	aa80      	add	r2, sp, #512	; 0x200
    5f92:	4619      	mov	r1, r3
    5f94:	a82c      	add	r0, sp, #176	; 0xb0
    5f96:	2301      	movs	r3, #1
    5f98:	f001 fb08 	bl	75ac <ExFatFile::open(ExFatVolume*, char const*, int)>
    5f9c:	2800      	cmp	r0, #0
    5f9e:	f43f af5e 	beq.w	5e5e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    5fa2:	a82c      	add	r0, sp, #176	; 0xb0
    5fa4:	f001 fb66 	bl	7674 <ExFatFile::remove()>
    5fa8:	e759      	b.n	5e5e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    5faa:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    5fae:	2900      	cmp	r1, #0
    5fb0:	d0dc      	beq.n	5f6c <MTPStorage_SD::removeFile(unsigned long, char*)+0x15c>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5fb2:	4603      	mov	r3, r0
    5fb4:	9038      	str	r0, [sp, #224]	; 0xe0
    5fb6:	462a      	mov	r2, r5
    5fb8:	a82c      	add	r0, sp, #176	; 0xb0
    5fba:	f001 faf7 	bl	75ac <ExFatFile::open(ExFatVolume*, char const*, int)>
    5fbe:	2800      	cmp	r0, #0
    5fc0:	d0d4      	beq.n	5f6c <MTPStorage_SD::removeFile(unsigned long, char*)+0x15c>
    5fc2:	a82c      	add	r0, sp, #176	; 0xb0
    5fc4:	f001 fbb0 	bl	7728 <ExFatFile::rmdir()>
    5fc8:	e7d0      	b.n	5f6c <MTPStorage_SD::removeFile(unsigned long, char*)+0x15c>
    5fca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
           m_xFile ? m_xFile->isDir() : false;
    5fcc:	b12b      	cbz	r3, 5fda <MTPStorage_SD::removeFile(unsigned long, char*)+0x1ca>
    5fce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    5fd2:	f013 0f50 	tst.w	r3, #80	; 0x50
    5fd6:	f47f af33 	bne.w	5e40 <MTPStorage_SD::removeFile(unsigned long, char*)+0x30>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    5fda:	b135      	cbz	r5, 5fea <MTPStorage_SD::removeFile(unsigned long, char*)+0x1da>
							  return write((const uint8_t *)str, strlen(str)); }
    5fdc:	4628      	mov	r0, r5
    5fde:	f00c facf 	bl	12580 <strlen>
    5fe2:	4601      	mov	r1, r0
    5fe4:	4628      	mov	r0, r5
    5fe6:	f009 fbd9 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5fea:	481a      	ldr	r0, [pc, #104]	; (6054 <MTPStorage_SD::removeFile(unsigned long, char*)+0x244>)
    5fec:	f007 f84e 	bl	d08c <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    5ff0:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    5ff4:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    5ff8:	b15b      	cbz	r3, 6012 <MTPStorage_SD::removeFile(unsigned long, char*)+0x202>
    5ffa:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5ffc:	4619      	mov	r1, r3
    5ffe:	462a      	mov	r2, r5
    6000:	2301      	movs	r3, #1
    6002:	9080      	str	r0, [sp, #512]	; 0x200
    6004:	a880      	add	r0, sp, #512	; 0x200
    6006:	f002 fdcb 	bl	8ba0 <FatFile::open(FatVolume*, char const*, int)>
    600a:	b9c0      	cbnz	r0, 603e <MTPStorage_SD::removeFile(unsigned long, char*)+0x22e>
    600c:	af08      	add	r7, sp, #32
    600e:	4e0f      	ldr	r6, [pc, #60]	; (604c <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    6010:	e7b0      	b.n	5f74 <MTPStorage_SD::removeFile(unsigned long, char*)+0x164>
    6012:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    6016:	2900      	cmp	r1, #0
    6018:	d0f8      	beq.n	600c <MTPStorage_SD::removeFile(unsigned long, char*)+0x1fc>
    601a:	938c      	str	r3, [sp, #560]	; 0x230
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    601c:	462a      	mov	r2, r5
    601e:	2301      	movs	r3, #1
    6020:	a880      	add	r0, sp, #512	; 0x200
    6022:	af08      	add	r7, sp, #32
    6024:	4e09      	ldr	r6, [pc, #36]	; (604c <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    6026:	f001 fac1 	bl	75ac <ExFatFile::open(ExFatVolume*, char const*, int)>
    602a:	2800      	cmp	r0, #0
    602c:	d0a2      	beq.n	5f74 <MTPStorage_SD::removeFile(unsigned long, char*)+0x164>
    602e:	a880      	add	r0, sp, #512	; 0x200
    6030:	f001 fb20 	bl	7674 <ExFatFile::remove()>
    6034:	e79e      	b.n	5f74 <MTPStorage_SD::removeFile(unsigned long, char*)+0x164>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6036:	a82c      	add	r0, sp, #176	; 0xb0
    6038:	f003 f806 	bl	9048 <FatFile::rmdir()>
    603c:	e796      	b.n	5f6c <MTPStorage_SD::removeFile(unsigned long, char*)+0x15c>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    603e:	a880      	add	r0, sp, #512	; 0x200
    6040:	af08      	add	r7, sp, #32
    6042:	4e02      	ldr	r6, [pc, #8]	; (604c <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    6044:	f003 fe0c 	bl	9c60 <FatFile::remove()>
    6048:	e794      	b.n	5f74 <MTPStorage_SD::removeFile(unsigned long, char*)+0x164>
    604a:	bf00      	nop
    604c:	20000b58 	.word	0x20000b58
    6050:	20000c20 	.word	0x20000c20
    6054:	20008a0c 	.word	0x20008a0c
    6058:	20000a98 	.word	0x20000a98

0000605c <MTPStorage_SD::DeleteObject(unsigned long)>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    605c:	1c4b      	adds	r3, r1, #1
    605e:	d056      	beq.n	610e <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>

    // first create full filename
    char filename[MAX_FILENAME_LEN];
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    6060:	f44f 7380 	mov.w	r3, #256	; 0x100
  {
    6064:	b570      	push	{r4, r5, r6, lr}
    6066:	f5ad 6dac 	sub.w	sp, sp, #1376	; 0x560
    606a:	460d      	mov	r5, r1
    606c:	4604      	mov	r4, r0
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    606e:	aa46      	add	r2, sp, #280	; 0x118
    6070:	f7ff fc78 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    6074:	4621      	mov	r1, r4
    6076:	a886      	add	r0, sp, #536	; 0x218
    6078:	462a      	mov	r2, r5
    607a:	f7ff fc2f 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    // remove file from storage (assume it is always working)
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    607e:	aa46      	add	r2, sp, #280	; 0x118
    6080:	f8bd 1226 	ldrh.w	r1, [sp, #550]	; 0x226
    6084:	4620      	mov	r0, r4
    6086:	f7ff fec3 	bl	5e10 <MTPStorage_SD::removeFile(unsigned long, char*)>
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    608a:	2300      	movs	r3, #0
    WriteIndexRecord(object, r);
    608c:	aa86      	add	r2, sp, #536	; 0x218
    608e:	4629      	mov	r1, r5
    6090:	4620      	mov	r0, r4
    r.name[0]=0;
    6092:	f88d 3230 	strb.w	r3, [sp, #560]	; 0x230
    WriteIndexRecord(object, r);
    6096:	f7ff fb7d 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    609a:	9a86      	ldr	r2, [sp, #536]	; 0x218
    609c:	4621      	mov	r1, r4
    609e:	a8cc      	add	r0, sp, #816	; 0x330
    60a0:	f7ff fc1c 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    60a4:	9ecd      	ldr	r6, [sp, #820]	; 0x334
    60a6:	42ae      	cmp	r6, r5
    60a8:	d026      	beq.n	60f8 <MTPStorage_SD::DeleteObject(unsigned long)+0x9c>
    }
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
    60aa:	4632      	mov	r2, r6
    60ac:	4621      	mov	r1, r4
    60ae:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
    60b2:	f7ff fc13 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    60b6:	f8dd 2450 	ldr.w	r2, [sp, #1104]	; 0x450
    60ba:	4295      	cmp	r5, r2
    60bc:	d00f      	beq.n	60de <MTPStorage_SD::DeleteObject(unsigned long)+0x82>
    60be:	4621      	mov	r1, r4
    60c0:	4668      	mov	r0, sp
    60c2:	4616      	mov	r6, r2
    60c4:	f7ff fc0a 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    60c8:	f44f 728c 	mov.w	r2, #280	; 0x118
    60cc:	4669      	mov	r1, sp
    60ce:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
    60d2:	f007 fde3 	bl	dc9c <memcpy>
    60d6:	f8dd 2450 	ldr.w	r2, [sp, #1104]	; 0x450
    60da:	42aa      	cmp	r2, r5
    60dc:	d1ef      	bne.n	60be <MTPStorage_SD::DeleteObject(unsigned long)+0x62>
      // is points now to junder sibling
      x.sibling = r.sibling;
    60de:	9b88      	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(is, x);
    60e0:	4620      	mov	r0, r4
    60e2:	f50d 6289 	add.w	r2, sp, #1096	; 0x448
    60e6:	4631      	mov	r1, r6
      x.sibling = r.sibling;
    60e8:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
      WriteIndexRecord(is, x);
    60ec:	f7ff fb52 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
    return 1;
  }
    60f0:	2001      	movs	r0, #1
    60f2:	f50d 6dac 	add.w	sp, sp, #1376	; 0x560
    60f6:	bd70      	pop	{r4, r5, r6, pc}
      t.child = r.sibling;
    60f8:	9b88      	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(r.parent, t);
    60fa:	4620      	mov	r0, r4
    60fc:	aacc      	add	r2, sp, #816	; 0x330
    60fe:	9986      	ldr	r1, [sp, #536]	; 0x218
      t.child = r.sibling;
    6100:	93cd      	str	r3, [sp, #820]	; 0x334
      WriteIndexRecord(r.parent, t);
    6102:	f7ff fb47 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    6106:	2001      	movs	r0, #1
    6108:	f50d 6dac 	add.w	sp, sp, #1376	; 0x560
    610c:	bd70      	pop	{r4, r5, r6, pc}
    610e:	2001      	movs	r0, #1
    6110:	4770      	bx	lr
    6112:	bf00      	nop

00006114 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    6114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    6118:	f1b2 3fff 	cmp.w	r2, #4294967295
    611c:	bf14      	ite	ne
    611e:	4691      	movne	r9, r2
    6120:	4689      	moveq	r9, r1
  {
    6122:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
    6126:	4604      	mov	r4, r0
    6128:	460e      	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    612a:	464a      	mov	r2, r9
    612c:	4601      	mov	r1, r0
    612e:	a84e      	add	r0, sp, #312	; 0x138
  {
    6130:	461f      	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    6132:	f7ff fbd3 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    6136:	f44f 7280 	mov.w	r2, #256	; 0x100
    613a:	99e2      	ldr	r1, [sp, #904]	; 0x388
    613c:	a89a      	add	r0, sp, #616	; 0x268
    613e:	f00b fec1 	bl	11ec4 <strlcpy>
  { uint32_t new_record = index_entries_++;
    6142:	f8d4 51a4 	ldr.w	r5, [r4, #420]	; 0x1a4
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    6146:	f04f 0800 	mov.w	r8, #0
    r.cpdate = 0;
    r.cptime = 0;
    r.mpdate = 0;
    r.mptime = 0;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    614a:	f04f 0a01 	mov.w	sl, #1
  { uint32_t new_record = index_entries_++;
    614e:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    6150:	aa94      	add	r2, sp, #592	; 0x250
    6152:	4629      	mov	r1, r5
    6154:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    6156:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
    r.store = p.store;
    615a:	f8bd 3146 	ldrh.w	r3, [sp, #326]	; 0x146
    r.parent = parent;
    615e:	f8cd 9250 	str.w	r9, [sp, #592]	; 0x250
    r.store = p.store;
    6162:	f8ad 325e 	strh.w	r3, [sp, #606]	; 0x25e
    r.sibling = p.child;
    6166:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    r.isdir = folder;
    6168:	f88d 725c 	strb.w	r7, [sp, #604]	; 0x25c
    r.child = 0;
    616c:	f8cd 8254 	str.w	r8, [sp, #596]	; 0x254
    r.sibling = p.child;
    6170:	9396      	str	r3, [sp, #600]	; 0x258
    r.scanned = 1;
    6172:	f88d a25d 	strb.w	sl, [sp, #605]	; 0x25d
    r.mpdate = 0;
    6176:	e9cd 8898 	strd	r8, r8, [sp, #608]	; 0x260
    WriteIndexRecord(new_record, r);
    617a:	f7ff fb0b 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    617e:	4649      	mov	r1, r9
    6180:	aa4e      	add	r2, sp, #312	; 0x138
    6182:	4620      	mov	r0, r4
    ret = p.child = AppendIndexRecord(r);
    6184:	954f      	str	r5, [sp, #316]	; 0x13c
    WriteIndexRecord(parent, p);
    6186:	f7ff fb05 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    618a:	b1d7      	cbz	r7, 61c2 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xae>
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    618c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    6190:	f44f 7380 	mov.w	r3, #256	; 0x100
    6194:	4629      	mov	r1, r5
    6196:	4620      	mov	r0, r4
    6198:	aa0e      	add	r2, sp, #56	; 0x38
    619a:	f7ff fbe3 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    619e:	6d73      	ldr	r3, [r6, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    61a0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    61a4:	b1c0      	cbz	r0, 61d8 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xc4>
    return sub.mkdir(vwd(), path, pFlag);
    61a6:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    61aa:	4653      	mov	r3, sl
    61ac:	aa0e      	add	r2, sp, #56	; 0x38
    61ae:	4668      	mov	r0, sp
    61b0:	f8cd 8000 	str.w	r8, [sp]
    61b4:	f002 fbfc 	bl	89b0 <FatFile::mkdir(FatFile*, char const*, bool)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    61b8:	4628      	mov	r0, r5
    61ba:	f50d 7d5a 	add.w	sp, sp, #872	; 0x368
    61be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      OpenFileByIndex(ret, (O_RDWR | O_CREAT));
    61c2:	f240 2202 	movw	r2, #514	; 0x202
    61c6:	4629      	mov	r1, r5
    61c8:	4620      	mov	r0, r4
    61ca:	f7ff fbfd 	bl	59c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  }
    61ce:	4628      	mov	r0, r5
    61d0:	f50d 7d5a 	add.w	sp, sp, #872	; 0x368
    61d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61d8:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    61dc:	2900      	cmp	r1, #0
    61de:	d0f6      	beq.n	61ce <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xba>
    61e0:	900c      	str	r0, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    61e2:	4653      	mov	r3, sl
    61e4:	aa0e      	add	r2, sp, #56	; 0x38
    61e6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    61ea:	4668      	mov	r0, sp
    61ec:	f001 fc72 	bl	7ad4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    61f0:	4628      	mov	r0, r5
    61f2:	f50d 7d5a 	add.w	sp, sp, #872	; 0x368
    61f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61fa:	bf00      	nop

000061fc <MTPStorage_SD::write(unsigned char const*, unsigned long)>:
    return m_fFile ? m_fFile->write(buf, count) :
    61fc:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    6200:	b113      	cbz	r3, 6208 <MTPStorage_SD::write(unsigned char const*, unsigned long)+0xc>
    6202:	4618      	mov	r0, r3
    6204:	f003 b89e 	b.w	9344 <FatFile::write(void const*, unsigned int)>
    6208:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
           m_xFile ? m_xFile->write(buf, count) : 0;
    620c:	b108      	cbz	r0, 6212 <MTPStorage_SD::write(unsigned char const*, unsigned long)+0x16>
    620e:	f001 bd3f 	b.w	7c90 <ExFatFile::write(void const*, unsigned int)>
  {
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    6212:	4770      	bx	lr

00006214 <MTPStorage_SD::close()>:

  void MTPStorage_SD::close() 
  {
    6214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6218:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->fileSize() :
    621a:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
    621e:	b0c8      	sub	sp, #288	; 0x120
    6220:	2800      	cmp	r0, #0
    6222:	d03a      	beq.n	629a <MTPStorage_SD::close()+0x86>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    6224:	f10d 0602 	add.w	r6, sp, #2
    6228:	466d      	mov	r5, sp
  uint32_t fileSize() const {return m_fileSize;}
    622a:	f8d0 901c 	ldr.w	r9, [r0, #28]
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    uint16_t cpdate,cptime,mpdate,mptime;
    file_.getCreateDateTime(&cpdate,&cptime);
    622e:	f504 7a82 	add.w	sl, r4, #260	; 0x104
    6232:	4632      	mov	r2, r6
    6234:	4629      	mov	r1, r5
    6236:	f002 fae5 	bl	8804 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    623a:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    623e:	2800      	cmp	r0, #0
    6240:	d03d      	beq.n	62be <MTPStorage_SD::close()+0xaa>
    6242:	f10d 0806 	add.w	r8, sp, #6
    6246:	af01      	add	r7, sp, #4
    6248:	4642      	mov	r2, r8
    624a:	4639      	mov	r1, r7
    624c:	f002 fada 	bl	8804 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.getCreateDateTime(&mpdate,&mptime);
    file_.close();
    6250:	4650      	mov	r0, sl
    6252:	f004 fa73 	bl	a73c <FsBaseFile::close()>
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    6256:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    625a:	4621      	mov	r1, r4
    625c:	a802      	add	r0, sp, #8
    625e:	f7ff fb3d 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    r.cpdate=cpdate;
    6262:	882b      	ldrh	r3, [r5, #0]
    r.cptime=cptime;
    6264:	8832      	ldrh	r2, [r6, #0]
    r.mpdate=mpdate;
    r.mptime=mptime;
    WriteIndexRecord(open_file_, r);
    6266:	4620      	mov	r0, r4
    r.mpdate=mpdate;
    6268:	8839      	ldrh	r1, [r7, #0]
    r.cpdate=cpdate;
    626a:	f8ad 3018 	strh.w	r3, [sp, #24]
    r.mptime=mptime;
    626e:	f8b8 3000 	ldrh.w	r3, [r8]
    r.cptime=cptime;
    6272:	f8ad 201a 	strh.w	r2, [sp, #26]
    WriteIndexRecord(open_file_, r);
    6276:	aa02      	add	r2, sp, #8
    r.mpdate=mpdate;
    6278:	f8ad 101c 	strh.w	r1, [sp, #28]
    WriteIndexRecord(open_file_, r);
    627c:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    r.mptime=mptime;
    6280:	f8ad 301e 	strh.w	r3, [sp, #30]
    r.child = size;
    6284:	f8cd 900c 	str.w	r9, [sp, #12]
    WriteIndexRecord(open_file_, r);
    6288:	f7ff fa84 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    628c:	f06f 0301 	mvn.w	r3, #1
    6290:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
  }
    6294:	b048      	add	sp, #288	; 0x120
    6296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    629a:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
           m_xFile ? m_xFile->fileSize() : 0;
    629e:	b1d0      	cbz	r0, 62d6 <MTPStorage_SD::close()+0xc2>
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    62a0:	f10d 0602 	add.w	r6, sp, #2
    62a4:	466d      	mov	r5, sp
    uint32_t size = (uint32_t) file_.size();
    62a6:	f8d0 9010 	ldr.w	r9, [r0, #16]
    file_.getCreateDateTime(&cpdate,&cptime);
    62aa:	f504 7a82 	add.w	sl, r4, #260	; 0x104
    62ae:	4632      	mov	r2, r6
    62b0:	4629      	mov	r1, r5
    62b2:	f000 fd51 	bl	6d58 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    62b6:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    62ba:	2800      	cmp	r0, #0
    62bc:	d1c1      	bne.n	6242 <MTPStorage_SD::close()+0x2e>
    62be:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    62c2:	f10d 0806 	add.w	r8, sp, #6
    62c6:	af01      	add	r7, sp, #4
    62c8:	2800      	cmp	r0, #0
    62ca:	d0c1      	beq.n	6250 <MTPStorage_SD::close()+0x3c>
    62cc:	4642      	mov	r2, r8
    62ce:	4639      	mov	r1, r7
    62d0:	f000 fd42 	bl	6d58 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    62d4:	e7bc      	b.n	6250 <MTPStorage_SD::close()+0x3c>
    62d6:	f504 7a82 	add.w	sl, r4, #260	; 0x104
    uint32_t size = (uint32_t) file_.size();
    62da:	4681      	mov	r9, r0
    62dc:	f10d 0602 	add.w	r6, sp, #2
    62e0:	466d      	mov	r5, sp
    62e2:	f10d 0806 	add.w	r8, sp, #6
    62e6:	af01      	add	r7, sp, #4
    62e8:	e7b2      	b.n	6250 <MTPStorage_SD::close()+0x3c>
    62ea:	bf00      	nop

000062ec <MTPStorage_SD::rename(unsigned long, char const*)>:

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    62ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ee:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    62f2:	f44f 7380 	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    62f6:	4617      	mov	r7, r2
    62f8:	460d      	mov	r5, r1
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    62fa:	aa10      	add	r2, sp, #64	; 0x40
  { char oldName[MAX_FILENAME_LEN];
    62fc:	4604      	mov	r4, r0
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    62fe:	f7ff fb31 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    6302:	4606      	mov	r6, r0
							  return write((const uint8_t *)str, strlen(str)); }
    6304:	a810      	add	r0, sp, #64	; 0x40
    6306:	f00c f93b 	bl	12580 <strlen>
    630a:	4601      	mov	r1, r0
    630c:	a810      	add	r0, sp, #64	; 0x40
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    630e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    6312:	f009 fa43 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6316:	4832      	ldr	r0, [pc, #200]	; (63e0 <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    6318:	f006 feb8 	bl	d08c <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    631c:	462a      	mov	r2, r5
    631e:	4621      	mov	r1, r4
    6320:	a8d0      	add	r0, sp, #832	; 0x340
    6322:	f7ff fadb 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    6326:	f44f 7280 	mov.w	r2, #256	; 0x100
    632a:	a9d6      	add	r1, sp, #856	; 0x358
    632c:	a890      	add	r0, sp, #576	; 0x240
    632e:	f00b fdc9 	bl	11ec4 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    6332:	4639      	mov	r1, r7
    6334:	f44f 7280 	mov.w	r2, #256	; 0x100
    6338:	a8d6      	add	r0, sp, #856	; 0x358
    633a:	f00b fdc3 	bl	11ec4 <strlcpy>

    WriteIndexRecord(handle, p1);
    633e:	aad0      	add	r2, sp, #832	; 0x340
    6340:	4629      	mov	r1, r5
    6342:	4620      	mov	r0, r4
    6344:	f7ff fa26 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    6348:	f44f 7380 	mov.w	r3, #256	; 0x100
    634c:	aa50      	add	r2, sp, #320	; 0x140
    634e:	4629      	mov	r1, r5
    6350:	4620      	mov	r0, r4
    6352:	f7ff fb07 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>
							  return write((const uint8_t *)str, strlen(str)); }
    6356:	a850      	add	r0, sp, #320	; 0x140
    6358:	f00c f912 	bl	12580 <strlen>
    635c:	4601      	mov	r1, r0
    635e:	a850      	add	r0, sp, #320	; 0x140
    6360:	f009 fa1c 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6364:	481e      	ldr	r0, [pc, #120]	; (63e0 <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    6366:	f006 fe91 	bl	d08c <Print::println()>
    636a:	6d72      	ldr	r2, [r6, #84]	; 0x54
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    636c:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6370:	b1cb      	cbz	r3, 63a6 <MTPStorage_SD::rename(unsigned long, char const*)+0xba>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    6372:	f503 6189 	add.w	r1, r3, #1096	; 0x448
  FatFile() {}
    6376:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    6378:	aa10      	add	r2, sp, #64	; 0x40
    637a:	a802      	add	r0, sp, #8
    637c:	e9cd 1301 	strd	r1, r3, [sp, #4]
    6380:	f002 fb8c 	bl	8a9c <FatFile::open(FatFile*, char const*, int)>
    6384:	9901      	ldr	r1, [sp, #4]
    6386:	bb20      	cbnz	r0, 63d2 <MTPStorage_SD::rename(unsigned long, char const*)+0xe6>
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    6388:	a990      	add	r1, sp, #576	; 0x240
    638a:	f44f 7280 	mov.w	r2, #256	; 0x100
    638e:	a8d6      	add	r0, sp, #856	; 0x358
    6390:	f00b fd98 	bl	11ec4 <strlcpy>
    WriteIndexRecord(handle, p1);
    6394:	4620      	mov	r0, r4
    6396:	aad0      	add	r2, sp, #832	; 0x340
    6398:	4629      	mov	r1, r5
    639a:	f7ff f9fb 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    639e:	2000      	movs	r0, #0
  }
    63a0:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
    63a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63a6:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    63aa:	2900      	cmp	r1, #0
    63ac:	d0ec      	beq.n	6388 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    63ae:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    63b2:	aa10      	add	r2, sp, #64	; 0x40
    63b4:	a802      	add	r0, sp, #8
    63b6:	930e      	str	r3, [sp, #56]	; 0x38
    63b8:	9101      	str	r1, [sp, #4]
    63ba:	f001 f87b 	bl	74b4 <ExFatFile::open(ExFatFile*, char const*, int)>
    63be:	9901      	ldr	r1, [sp, #4]
    63c0:	2800      	cmp	r0, #0
    63c2:	d0e1      	beq.n	6388 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    63c4:	aa50      	add	r2, sp, #320	; 0x140
    63c6:	a802      	add	r0, sp, #8
    63c8:	f001 fb02 	bl	79d0 <ExFatFile::rename(ExFatFile*, char const*)>
    63cc:	2800      	cmp	r0, #0
    63ce:	d1e7      	bne.n	63a0 <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    63d0:	e7da      	b.n	6388 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    63d2:	aa50      	add	r2, sp, #320	; 0x140
    63d4:	a802      	add	r0, sp, #8
    63d6:	f002 fd41 	bl	8e5c <FatFile::rename(FatFile*, char const*)>
    63da:	2800      	cmp	r0, #0
    63dc:	d1e0      	bne.n	63a0 <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    63de:	e7d3      	b.n	6388 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    63e0:	20008a0c 	.word	0x20008a0c

000063e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    63e4:	b570      	push	{r4, r5, r6, lr}
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    63e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    63ea:	f5ad 6d0a 	sub.w	sp, sp, #2208	; 0x8a0
    63ee:	4605      	mov	r5, r0
    63f0:	461e      	mov	r6, r3
    63f2:	6d49      	ldr	r1, [r1, #84]	; 0x54
    63f4:	2300      	movs	r3, #0
    63f6:	4668      	mov	r0, sp
    63f8:	f004 faba 	bl	a970 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    63fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    63fe:	2b00      	cmp	r3, #0
    6400:	f000 8082 	beq.w	6508 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x124>
    6404:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    6408:	f240 2302 	movw	r3, #514	; 0x202
    640c:	f8dd 28b0 	ldr.w	r2, [sp, #2224]	; 0x8b0
    6410:	a814      	add	r0, sp, #80	; 0x50
    6412:	6d69      	ldr	r1, [r5, #84]	; 0x54
    6414:	f004 faac 	bl	a970 <FsVolume::open(char const*, int)>
    6418:	9b26      	ldr	r3, [sp, #152]	; 0x98
    641a:	2b00      	cmp	r3, #0
    641c:	d07f      	beq.n	651e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x13a>
    641e:	f04f 34ff 	mov.w	r4, #4294967295
    6422:	e006      	b.n	6432 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
    return m_fFile ? m_fFile->write(buf, count) :
    6424:	4622      	mov	r2, r4
    6426:	a928      	add	r1, sp, #160	; 0xa0
    6428:	f002 ff8c 	bl	9344 <FatFile::write(void const*, unsigned int)>
  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    642c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    6430:	db1e      	blt.n	6470 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8c>
    return m_fFile ? m_fFile->available() :
    6432:	9812      	ldr	r0, [sp, #72]	; 0x48
    6434:	2800      	cmp	r0, #0
    6436:	d03c      	beq.n	64b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xce>
    return isFile() ? fileSize() - curPosition() : 0;
    6438:	7803      	ldrb	r3, [r0, #0]
    643a:	071a      	lsls	r2, r3, #28
    643c:	d521      	bpl.n	6482 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
  while(f1.available()>0)
    643e:	69c2      	ldr	r2, [r0, #28]
    6440:	6943      	ldr	r3, [r0, #20]
    6442:	429a      	cmp	r2, r3
    6444:	d01d      	beq.n	6482 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return m_fFile ? m_fFile->read(buf, count) :
    6446:	f44f 6200 	mov.w	r2, #2048	; 0x800
    644a:	a928      	add	r1, sp, #160	; 0xa0
    644c:	f002 fbfc 	bl	8c48 <FatFile::read(void*, unsigned int)>
    6450:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    6452:	2c00      	cmp	r4, #0
    6454:	db4a      	blt.n	64ec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x108>
    return m_fFile ? m_fFile->write(buf, count) :
    6456:	9826      	ldr	r0, [sp, #152]	; 0x98
    6458:	2800      	cmp	r0, #0
    645a:	d1e3      	bne.n	6424 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x40>
    645c:	9827      	ldr	r0, [sp, #156]	; 0x9c
           m_xFile ? m_xFile->write(buf, count) : 0;
    645e:	2800      	cmp	r0, #0
    6460:	d0e4      	beq.n	642c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x48>
    6462:	4622      	mov	r2, r4
    6464:	a928      	add	r1, sp, #160	; 0xa0
    6466:	f001 fc13 	bl	7c90 <ExFatFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    646a:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    646e:	dae0      	bge.n	6432 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
  }
  // close all files
  f1.close();
    6470:	ad04      	add	r5, sp, #16
  f2.close();
    6472:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    6474:	4628      	mov	r0, r5
    6476:	f004 f961 	bl	a73c <FsBaseFile::close()>
  f2.close();
    647a:	4630      	mov	r0, r6
    647c:	f004 f95e 	bl	a73c <FsBaseFile::close()>
    6480:	e009      	b.n	6496 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb2>
  f1.close();
    6482:	ad04      	add	r5, sp, #16
  f2.close();
    6484:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    6486:	4628      	mov	r0, r5
    6488:	f004 f958 	bl	a73c <FsBaseFile::close()>
  f2.close();
    648c:	4630      	mov	r0, r6
    648e:	f004 f955 	bl	a73c <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    6492:	3401      	adds	r4, #1
    6494:	d032      	beq.n	64fc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x118>
  return true;
    6496:	2401      	movs	r4, #1
  ~FsBaseFile() {close();}
    6498:	4630      	mov	r0, r6
    649a:	4e28      	ldr	r6, [pc, #160]	; (653c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    649c:	9614      	str	r6, [sp, #80]	; 0x50
    649e:	f004 f94d 	bl	a73c <FsBaseFile::close()>
    64a2:	4628      	mov	r0, r5
    64a4:	9600      	str	r6, [sp, #0]
    64a6:	f004 f949 	bl	a73c <FsBaseFile::close()>
}
    64aa:	4620      	mov	r0, r4
    64ac:	f50d 6d0a 	add.w	sp, sp, #2208	; 0x8a0
    64b0:	bd70      	pop	{r4, r5, r6, pc}
    64b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
    64b4:	2800      	cmp	r0, #0
    64b6:	d0e4      	beq.n	6482 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return isFile() ? fileSize() - curPosition() : 0;
    64b8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    64bc:	071b      	lsls	r3, r3, #28
    64be:	d5e0      	bpl.n	6482 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    64c0:	6903      	ldr	r3, [r0, #16]
    64c2:	6801      	ldr	r1, [r0, #0]
    64c4:	6942      	ldr	r2, [r0, #20]
    64c6:	1a5b      	subs	r3, r3, r1
    64c8:	6845      	ldr	r5, [r0, #4]
    64ca:	eb62 0205 	sbc.w	r2, r2, r5
    return n > INT_MAX ? INT_MAX : n;
    64ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    64d2:	f172 0200 	sbcs.w	r2, r2, #0
    64d6:	d201      	bcs.n	64dc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xf8>
  while(f1.available()>0)
    64d8:	2b00      	cmp	r3, #0
    64da:	d0d2      	beq.n	6482 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
           m_xFile ? m_xFile->read(buf, count) : -1;
    64dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    64e0:	a928      	add	r1, sp, #160	; 0xa0
    64e2:	f000 fcbf 	bl	6e64 <ExFatFile::read(void*, unsigned int)>
    64e6:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    64e8:	2c00      	cmp	r4, #0
    64ea:	dab4      	bge.n	6456 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x72>
  f1.close();
    64ec:	ad04      	add	r5, sp, #16
  f2.close();
    64ee:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    64f0:	4628      	mov	r0, r5
    64f2:	f004 f923 	bl	a73c <FsBaseFile::close()>
  f2.close();
    64f6:	4630      	mov	r0, r6
    64f8:	f004 f920 	bl	a73c <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    64fc:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    6500:	2400      	movs	r4, #0
    6502:	f7fe ffc7 	bl	5494 <dbgPrint(unsigned short)>
    6506:	e7c7      	b.n	6498 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
  bool isOpen() const {return m_fFile || m_xFile;}
    6508:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    650a:	2c00      	cmp	r4, #0
    650c:	f47f af7a 	bne.w	6404 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x20>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    6510:	f240 20cd 	movw	r0, #717	; 0x2cd
    6514:	ad04      	add	r5, sp, #16
    6516:	4e09      	ldr	r6, [pc, #36]	; (653c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    6518:	f7fe ffbc 	bl	5494 <dbgPrint(unsigned short)>
    651c:	e7c1      	b.n	64a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xbe>
    651e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6520:	2c00      	cmp	r4, #0
    6522:	f47f af7c 	bne.w	641e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    6526:	ad04      	add	r5, sp, #16
    6528:	ae18      	add	r6, sp, #96	; 0x60
    652a:	4628      	mov	r0, r5
    652c:	f004 f906 	bl	a73c <FsBaseFile::close()>
    6530:	f44f 7034 	mov.w	r0, #720	; 0x2d0
    6534:	f7fe ffae 	bl	5494 <dbgPrint(unsigned short)>
    6538:	e7ae      	b.n	6498 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
    653a:	bf00      	nop
    653c:	20000b58 	.word	0x20000b58

00006540 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    6540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6544:	f5ad 6dd4 	sub.w	sp, sp, #1696	; 0x6a0
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    6548:	f1b3 3fff 	cmp.w	r3, #4294967295
    654c:	bf14      	ite	ne
    654e:	461f      	movne	r7, r3
    6550:	4617      	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    6552:	4604      	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    6554:	460a      	mov	r2, r1
    6556:	4601      	mov	r1, r0
    6558:	a890      	add	r0, sp, #576	; 0x240
    655a:	f7ff f9bf 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    655e:	463a      	mov	r2, r7
    6560:	4621      	mov	r1, r4
    6562:	a8d6      	add	r0, sp, #856	; 0x358
  Record p1=ReadIndexRecord(handle);
    6564:	f8bd 824e 	ldrh.w	r8, [sp, #590]	; 0x24e
  Record p2=ReadIndexRecord(newHandle);
    6568:	f7ff f9b8 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    656c:	9e91      	ldr	r6, [sp, #580]	; 0x244
  while(ix)
    656e:	2e00      	cmp	r6, #0
    6570:	d077      	beq.n	6662 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x122>
  uint32_t iy= 0;
    6572:	2500      	movs	r5, #0
    Record px = ReadIndexRecord(ix) ;
    6574:	4632      	mov	r2, r6
    6576:	4621      	mov	r1, r4
    6578:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
    657c:	f7ff f9ae 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    6580:	f50d 618e 	add.w	r1, sp, #1136	; 0x470
    6584:	f44f 728c 	mov.w	r2, #280	; 0x118
    6588:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    658c:	f007 fb86 	bl	dc9c <memcpy>
    py.sibling = iy;
    6590:	f8cd 5590 	str.w	r5, [sp, #1424]	; 0x590
  { uint32_t new_record = index_entries_++;
    6594:	f8d4 51a4 	ldr.w	r5, [r4, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    6598:	f50d 62b1 	add.w	r2, sp, #1416	; 0x588
    py.store = p2.store;
    659c:	f8bd 3366 	ldrh.w	r3, [sp, #870]	; 0x366
    WriteIndexRecord(new_record, r);
    65a0:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    65a2:	1c69      	adds	r1, r5, #1
    py.parent = newHandle;
    65a4:	f8cd 7588 	str.w	r7, [sp, #1416]	; 0x588
    py.store = p2.store;
    65a8:	f8ad 3596 	strh.w	r3, [sp, #1430]	; 0x596
  { uint32_t new_record = index_entries_++;
    65ac:	f8c4 11a4 	str.w	r1, [r4, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    65b0:	4629      	mov	r1, r5
    65b2:	f7ff f8ef 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    65b6:	aa10      	add	r2, sp, #64	; 0x40
    65b8:	4631      	mov	r1, r6
    65ba:	f44f 7380 	mov.w	r3, #256	; 0x100
    65be:	4620      	mov	r0, r4
    65c0:	f7ff f9d0 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    65c4:	aa50      	add	r2, sp, #320	; 0x140
    65c6:	f44f 7380 	mov.w	r3, #256	; 0x100
    65ca:	4629      	mov	r1, r5
    65cc:	4620      	mov	r0, r4
    65ce:	f7ff f9c9 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    65d2:	f89d 3594 	ldrb.w	r3, [sp, #1428]	; 0x594
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    65d6:	aa10      	add	r2, sp, #64	; 0x40
    if(py.isdir) 
    65d8:	b36b      	cbz	r3, 6636 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf6>
      sd_mkdir(py.store,newfilename);
    65da:	f8bd 3596 	ldrh.w	r3, [sp, #1430]	; 0x596
  FatFile() {}
    65de:	f04f 0c00 	mov.w	ip, #0
    return sub.mkdir(vwd(), path, pFlag);
    65e2:	aa50      	add	r2, sp, #320	; 0x140
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    65e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    65e8:	6d58      	ldr	r0, [r3, #84]	; 0x54
    65ea:	2301      	movs	r3, #1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    65ec:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
    65f0:	b351      	cbz	r1, 6648 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x108>
    65f2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    65f6:	a802      	add	r0, sp, #8
    65f8:	f8cd c008 	str.w	ip, [sp, #8]
    65fc:	f002 f9d8 	bl	89b0 <FatFile::mkdir(FatFile*, char const*, bool)>
      ScanDir(p1.store,ix); 
    6600:	4632      	mov	r2, r6
    6602:	4641      	mov	r1, r8
    6604:	4620      	mov	r0, r4
    6606:	f7ff fa25 	bl	5a54 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    660a:	462b      	mov	r3, r5
    660c:	4631      	mov	r1, r6
    660e:	f8bd 2366 	ldrh.w	r2, [sp, #870]	; 0x366
    6612:	4620      	mov	r0, r4
    6614:	f7ff ff94 	bl	6540 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>
    ix = px.sibling;
    6618:	f8dd 6478 	ldr.w	r6, [sp, #1144]	; 0x478
  while(ix)
    661c:	2e00      	cmp	r6, #0
    661e:	d1a9      	bne.n	6574 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x34>
  WriteIndexRecord(newHandle,p2);
    6620:	4620      	mov	r0, r4
    6622:	aad6      	add	r2, sp, #856	; 0x358
    6624:	4639      	mov	r1, r7
  p2.child=iy;
    6626:	95d7      	str	r5, [sp, #860]	; 0x35c
  WriteIndexRecord(newHandle,p2);
    6628:	f7ff f8b4 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    662c:	2001      	movs	r0, #1
    662e:	f50d 6dd4 	add.w	sp, sp, #1696	; 0x6a0
    6632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    6636:	ab50      	add	r3, sp, #320	; 0x140
    6638:	4641      	mov	r1, r8
    663a:	4620      	mov	r0, r4
    663c:	9300      	str	r3, [sp, #0]
    663e:	f8bd 3596 	ldrh.w	r3, [sp, #1430]	; 0x596
    6642:	f7ff fecf 	bl	63e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    6646:	e7e7      	b.n	6618 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd8>
    6648:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    664c:	2b00      	cmp	r3, #0
    664e:	d0d7      	beq.n	6600 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xc0>
  ExFatFile() {}
    6650:	910e      	str	r1, [sp, #56]	; 0x38
    return sub.mkdir(vwd(), path, pFlag);
    6652:	aa50      	add	r2, sp, #320	; 0x140
    6654:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    6658:	a802      	add	r0, sp, #8
    665a:	2301      	movs	r3, #1
    665c:	f001 fa3a 	bl	7ad4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    6660:	e7ce      	b.n	6600 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xc0>
  uint32_t iy= 0;
    6662:	4635      	mov	r5, r6
    6664:	e7dc      	b.n	6620 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xe0>
    6666:	bf00      	nop

00006668 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    6668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    666c:	f5ad 6daa 	sub.w	sp, sp, #1360	; 0x550
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    6670:	f1b3 3fff 	cmp.w	r3, #4294967295
    6674:	bf14      	ite	ne
    6676:	461f      	movne	r7, r3
    6678:	4617      	moveq	r7, r2
  { 
    667a:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    667c:	460a      	mov	r2, r1
  { 
    667e:	460e      	mov	r6, r1
    Record p1 = ReadIndexRecord(handle);
    6680:	4601      	mov	r1, r0
    6682:	a882      	add	r0, sp, #520	; 0x208
    6684:	f7ff f92a 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    6688:	463a      	mov	r2, r7
    668a:	4621      	mov	r1, r4
    668c:	a8c8      	add	r0, sp, #800	; 0x320
    668e:	f7ff f925 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    6692:	f89d 8214 	ldrb.w	r8, [sp, #532]	; 0x214
    6696:	f1b8 0f00 	cmp.w	r8, #0
    669a:	d020      	beq.n	66de <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    669c:	f8bd 1216 	ldrh.w	r1, [sp, #534]	; 0x216
    66a0:	4632      	mov	r2, r6
    66a2:	4620      	mov	r0, r4
    66a4:	3101      	adds	r1, #1
    66a6:	f7ff f9d5 	bl	5a54 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    66aa:	f89d 3214 	ldrb.w	r3, [sp, #532]	; 0x214
    66ae:	a988      	add	r1, sp, #544	; 0x220
    66b0:	463a      	mov	r2, r7
    66b2:	3b00      	subs	r3, #0
    66b4:	4620      	mov	r0, r4
    66b6:	9100      	str	r1, [sp, #0]
    66b8:	bf18      	it	ne
    66ba:	2301      	movne	r3, #1
    66bc:	f8bd 132e 	ldrh.w	r1, [sp, #814]	; 0x32e
    66c0:	f7ff fd28 	bl	6114 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>
    66c4:	4605      	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    66c6:	f8bd 232e 	ldrh.w	r2, [sp, #814]	; 0x32e
    66ca:	4631      	mov	r1, r6
    66cc:	4620      	mov	r0, r4
    66ce:	462b      	mov	r3, r5
    66d0:	f7ff ff36 	bl	6540 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>
  }
    66d4:	4628      	mov	r0, r5
    66d6:	f50d 6daa 	add.w	sp, sp, #1360	; 0x550
    66da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    66de:	a988      	add	r1, sp, #544	; 0x220
    66e0:	f44f 7280 	mov.w	r2, #256	; 0x100
    66e4:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
    66e8:	f00b fbec 	bl	11ec4 <strlcpy>
  { uint32_t new_record = index_entries_++;
    66ec:	f8d4 51a4 	ldr.w	r5, [r4, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    66f0:	f50d 6287 	add.w	r2, sp, #1080	; 0x438
    66f4:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    66f6:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    66f8:	4629      	mov	r1, r5
      r.parent = newParent;
    66fa:	f8cd 7438 	str.w	r7, [sp, #1080]	; 0x438
  { uint32_t new_record = index_entries_++;
    66fe:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
      r.store = p2.store;
    6702:	f8bd 332e 	ldrh.w	r3, [sp, #814]	; 0x32e
      r.child = 0;
    6706:	f8cd 843c 	str.w	r8, [sp, #1084]	; 0x43c
      r.store = p2.store;
    670a:	f8ad 3446 	strh.w	r3, [sp, #1094]	; 0x446
      r.sibling = p2.child;
    670e:	9bc9      	ldr	r3, [sp, #804]	; 0x324
      r.isdir = 0;
    6710:	f8ad 8444 	strh.w	r8, [sp, #1092]	; 0x444
      r.sibling = p2.child;
    6714:	f8cd 3440 	str.w	r3, [sp, #1088]	; 0x440
    WriteIndexRecord(new_record, r);
    6718:	f7ff f83c 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent, p2);
    671c:	4639      	mov	r1, r7
    671e:	aac8      	add	r2, sp, #800	; 0x320
    6720:	4620      	mov	r0, r4
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    6722:	af42      	add	r7, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
    6724:	95c9      	str	r5, [sp, #804]	; 0x324
      WriteIndexRecord(newParent, p2);
    6726:	f7ff f835 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    672a:	4631      	mov	r1, r6
    672c:	aa02      	add	r2, sp, #8
    672e:	f44f 7380 	mov.w	r3, #256	; 0x100
    6732:	4620      	mov	r0, r4
    6734:	f7ff f916 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    6738:	4606      	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    673a:	463a      	mov	r2, r7
    673c:	4629      	mov	r1, r5
    673e:	f44f 7380 	mov.w	r3, #256	; 0x100
    6742:	4620      	mov	r0, r4
    6744:	f7ff f90e 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    6748:	aa02      	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    674a:	4603      	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    674c:	4631      	mov	r1, r6
    674e:	4620      	mov	r0, r4
    6750:	9700      	str	r7, [sp, #0]
    6752:	f7ff fe47 	bl	63e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
  }
    6756:	4628      	mov	r0, r5
    6758:	f50d 6daa 	add.w	sp, sp, #1360	; 0x550
    675c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006760 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    6760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6764:	461d      	mov	r5, r3
    6766:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    676a:	b08e      	sub	sp, #56	; 0x38
    676c:	460e      	mov	r6, r1
    676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6770:	4604      	mov	r4, r0
    6772:	4690      	mov	r8, r2
    6774:	9f14      	ldr	r7, [sp, #80]	; 0x50
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    6776:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    677a:	b199      	cbz	r1, 67a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x44>
    677c:	2300      	movs	r3, #0
    677e:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    6782:	463a      	mov	r2, r7
    6784:	4668      	mov	r0, sp
    6786:	9300      	str	r3, [sp, #0]
    6788:	2301      	movs	r3, #1
    678a:	f002 f911 	bl	89b0 <FatFile::mkdir(FatFile*, char const*, bool)>

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    678e:	b1b0      	cbz	r0, 67be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    6790:	462b      	mov	r3, r5
    6792:	4642      	mov	r2, r8
    6794:	4631      	mov	r1, r6
    6796:	4620      	mov	r0, r4
    6798:	9714      	str	r7, [sp, #80]	; 0x50
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    679a:	b00e      	add	sp, #56	; 0x38
    679c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67a0:	f000 b816 	b.w	67d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
    67a4:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    67a8:	b14b      	cbz	r3, 67be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    67aa:	910c      	str	r1, [sp, #48]	; 0x30
    67ac:	463a      	mov	r2, r7
    67ae:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    67b2:	4668      	mov	r0, sp
    67b4:	2301      	movs	r3, #1
    67b6:	f001 f98d 	bl	7ad4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    67ba:	2800      	cmp	r0, #0
    67bc:	d1e8      	bne.n	6790 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x30>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    67be:	f240 20e6 	movw	r0, #742	; 0x2e6
    67c2:	f7fe fe67 	bl	5494 <dbgPrint(unsigned short)>
}
    67c6:	2000      	movs	r0, #0
    67c8:	b00e      	add	sp, #56	; 0x38
    67ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67ce:	bf00      	nop

000067d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    67d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67d4:	461f      	mov	r7, r3
    67d6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    67da:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
    67de:	460d      	mov	r5, r1
    67e0:	4619      	mov	r1, r3
    67e2:	4604      	mov	r4, r0
  FsFile f1=sd_open(store0,oldfilename,O_READ);
    67e4:	9302      	str	r3, [sp, #8]
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    67e6:	a812      	add	r0, sp, #72	; 0x48
    67e8:	2300      	movs	r3, #0
    67ea:	6d49      	ldr	r1, [r1, #84]	; 0x54
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    67ec:	4616      	mov	r6, r2
    67ee:	f8dd a310 	ldr.w	sl, [sp, #784]	; 0x310
    67f2:	f004 f8bd 	bl	a970 <FsVolume::open(char const*, int)>
    67f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    67f8:	2b00      	cmp	r3, #0
    67fa:	f000 8101 	beq.w	6a00 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x230>
    67fe:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    6802:	f8df 9244 	ldr.w	r9, [pc, #580]	; 6a48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    6806:	f8df b244 	ldr.w	fp, [pc, #580]	; 6a4c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x27c>
    680a:	e01b      	b.n	6844 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x74>
    return m_fFile ? m_fFile->getName(name, len) :
    680c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6810:	a97a      	add	r1, sp, #488	; 0x1e8
    6812:	f003 fbb3 	bl	9f7c <FatFile::getName(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    6816:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    6818:	2b00      	cmp	r3, #0
    681a:	d067      	beq.n	68ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11c>
        if(f2.isDirectory())
    681c:	781b      	ldrb	r3, [r3, #0]
    681e:	f013 0f70 	tst.w	r3, #112	; 0x70
    6822:	d06a      	beq.n	68fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6824:	ab7a      	add	r3, sp, #488	; 0x1e8
    6826:	aa3a      	add	r2, sp, #232	; 0xe8
    6828:	4629      	mov	r1, r5
    682a:	4620      	mov	r0, r4
    682c:	9300      	str	r3, [sp, #0]
    682e:	463b      	mov	r3, r7
    6830:	f7ff ff96 	bl	6760 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    6834:	2800      	cmp	r0, #0
    6836:	f000 80f6 	beq.w	6a26 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x256>
  ~FsBaseFile() {close();}
    683a:	a82a      	add	r0, sp, #168	; 0xa8
    683c:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    6840:	f003 ff7c 	bl	a73c <FsBaseFile::close()>
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    6844:	f44f 7280 	mov.w	r2, #256	; 0x100
    6848:	4631      	mov	r1, r6
    684a:	a83a      	add	r0, sp, #232	; 0xe8
    684c:	f00b fb3a 	bl	11ec4 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    6850:	a83a      	add	r0, sp, #232	; 0xe8
    6852:	f00b fe95 	bl	12580 <strlen>
    6856:	ab3a      	add	r3, sp, #232	; 0xe8
    6858:	4418      	add	r0, r3
    685a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    685e:	2b2f      	cmp	r3, #47	; 0x2f
    6860:	d005      	beq.n	686e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x9e>
    6862:	f44f 7280 	mov.w	r2, #256	; 0x100
    6866:	4659      	mov	r1, fp
    6868:	a83a      	add	r0, sp, #232	; 0xe8
    686a:	f00b faf7 	bl	11e5c <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    686e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6872:	4651      	mov	r1, sl
    6874:	a87a      	add	r0, sp, #488	; 0x1e8
    6876:	f00b fb25 	bl	11ec4 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    687a:	a87a      	add	r0, sp, #488	; 0x1e8
    687c:	f00b fe80 	bl	12580 <strlen>
    6880:	ab7a      	add	r3, sp, #488	; 0x1e8
    6882:	4418      	add	r0, r3
    6884:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6888:	2b2f      	cmp	r3, #47	; 0x2f
    688a:	d005      	beq.n	6898 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xc8>
    688c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6890:	4659      	mov	r1, fp
    6892:	a87a      	add	r0, sp, #488	; 0x1e8
    6894:	f00b fae2 	bl	11e5c <strlcat>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6898:	4b69      	ldr	r3, [pc, #420]	; (6a40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x270>)
	constexpr Print() : write_error(0) {}
    689a:	2200      	movs	r2, #0
    tmpFile.openNext(this, oflag);
    689c:	4641      	mov	r1, r8
    689e:	a82a      	add	r0, sp, #168	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    68a0:	9326      	str	r3, [sp, #152]	; 0x98
	constexpr Stream() : _timeout(1000), read_error(0) {}
    68a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    68a6:	9227      	str	r2, [sp, #156]	; 0x9c
    68a8:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
    68ac:	9328      	str	r3, [sp, #160]	; 0xa0
  FsBaseFile() {}
    68ae:	e9cd 2238 	strd	r2, r2, [sp, #224]	; 0xe0
    tmpFile.openNext(this, oflag);
    68b2:	f003 ffaf 	bl	a814 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    68b6:	9838      	ldr	r0, [sp, #224]	; 0xe0
    68b8:	2200      	movs	r2, #0
    68ba:	2800      	cmp	r0, #0
    68bc:	d055      	beq.n	696a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x19a>
    *name = 0;
    68be:	f88d 20e8 	strb.w	r2, [sp, #232]	; 0xe8
    return m_fFile ? m_fFile->getName(name, len) :
    68c2:	a93a      	add	r1, sp, #232	; 0xe8
    68c4:	f44f 7280 	mov.w	r2, #256	; 0x100
    68c8:	f003 fb58 	bl	9f7c <FatFile::getName(char*, unsigned int)>
    *name = 0;
    68cc:	2300      	movs	r3, #0
    return m_fFile ? m_fFile->getName(name, len) :
    68ce:	9838      	ldr	r0, [sp, #224]	; 0xe0
    *name = 0;
    68d0:	f88d 31e8 	strb.w	r3, [sp, #488]	; 0x1e8
    return m_fFile ? m_fFile->getName(name, len) :
    68d4:	2800      	cmp	r0, #0
    68d6:	d199      	bne.n	680c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x3c>
    68d8:	9839      	ldr	r0, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->getName(name, len) : 0;
    68da:	b170      	cbz	r0, 68fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    return getName8(name, size);
    68dc:	f44f 7280 	mov.w	r2, #256	; 0x100
    68e0:	a97a      	add	r1, sp, #488	; 0x1e8
    68e2:	f001 fb3b 	bl	7f5c <ExFatFile::getName8(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    68e6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    68e8:	2b00      	cmp	r3, #0
    68ea:	d197      	bne.n	681c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x4c>
    68ec:	9b39      	ldr	r3, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->isDir() : false;
    68ee:	b123      	cbz	r3, 68fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    68f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    68f4:	f013 0f50 	tst.w	r3, #80	; 0x50
    68f8:	d194      	bne.n	6824 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x54>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    68fa:	ab7a      	add	r3, sp, #488	; 0x1e8
    68fc:	aa3a      	add	r2, sp, #232	; 0xe8
    68fe:	4629      	mov	r1, r5
    6900:	4620      	mov	r0, r4
    6902:	9300      	str	r3, [sp, #0]
    6904:	463b      	mov	r3, r7
    6906:	f7ff fd6d 	bl	63e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    690a:	2800      	cmp	r0, #0
    690c:	f000 8086 	beq.w	6a1c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x24c>
							  return write((const uint8_t *)str, strlen(str)); }
    6910:	a83a      	add	r0, sp, #232	; 0xe8
    6912:	f00b fe35 	bl	12580 <strlen>
    6916:	4601      	mov	r1, r0
    6918:	a83a      	add	r0, sp, #232	; 0xe8
    691a:	f008 ff3f 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    691e:	4849      	ldr	r0, [pc, #292]	; (6a44 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x274>)
    6920:	f006 fbb4 	bl	d08c <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    6924:	9b02      	ldr	r3, [sp, #8]
    6926:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    6928:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    692c:	b343      	cbz	r3, 6980 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1b0>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    692e:	4619      	mov	r1, r3
    6930:	2300      	movs	r3, #0
    6932:	aa3a      	add	r2, sp, #232	; 0xe8
    6934:	a804      	add	r0, sp, #16
    6936:	9304      	str	r3, [sp, #16]
    6938:	2301      	movs	r3, #1
    693a:	f002 f931 	bl	8ba0 <FatFile::open(FatVolume*, char const*, int)>
    693e:	2800      	cmp	r0, #0
    6940:	d157      	bne.n	69f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x222>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    6942:	f240 3002 	movw	r0, #770	; 0x302
    6946:	f7fe fda5 	bl	5494 <dbgPrint(unsigned short)>
  ~FsBaseFile() {close();}
    694a:	a82a      	add	r0, sp, #168	; 0xa8
    694c:	2400      	movs	r4, #0
    694e:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    6952:	f003 fef3 	bl	a73c <FsBaseFile::close()>
    6956:	4640      	mov	r0, r8
    6958:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    695c:	f003 feee 	bl	a73c <FsBaseFile::close()>
}
    6960:	4620      	mov	r0, r4
    6962:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    6966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    696a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    696c:	b1db      	cbz	r3, 69a6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1d6>
    *name = 0;
    696e:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
    6972:	f44f 7280 	mov.w	r2, #256	; 0x100
    6976:	4618      	mov	r0, r3
    6978:	a93a      	add	r1, sp, #232	; 0xe8
    697a:	f001 faef 	bl	7f5c <ExFatFile::getName8(char*, unsigned int)>
    697e:	e7a5      	b.n	68cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xfc>
    6980:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    6984:	2900      	cmp	r1, #0
    6986:	d0dc      	beq.n	6942 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ExFatFile() {}
    6988:	9310      	str	r3, [sp, #64]	; 0x40
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    698a:	aa3a      	add	r2, sp, #232	; 0xe8
    698c:	2301      	movs	r3, #1
    698e:	a804      	add	r0, sp, #16
    6990:	f000 fe0c 	bl	75ac <ExFatFile::open(ExFatVolume*, char const*, int)>
    6994:	2800      	cmp	r0, #0
    6996:	d0d4      	beq.n	6942 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
    6998:	a804      	add	r0, sp, #16
    699a:	f000 fe6b 	bl	7674 <ExFatFile::remove()>
    699e:	2800      	cmp	r0, #0
    69a0:	f47f af4b 	bne.w	683a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    69a4:	e7cd      	b.n	6942 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ~FsBaseFile() {close();}
    69a6:	a82a      	add	r0, sp, #168	; 0xa8
    69a8:	9303      	str	r3, [sp, #12]
    69aa:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    69ae:	f003 fec5 	bl	a73c <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    69b2:	9b02      	ldr	r3, [sp, #8]
    69b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->rmdir(path) :
    69b6:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    69ba:	b170      	cbz	r0, 69da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x20a>
    69bc:	9b03      	ldr	r3, [sp, #12]
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    69be:	4601      	mov	r1, r0
    69c0:	4632      	mov	r2, r6
    69c2:	a826      	add	r0, sp, #152	; 0x98
    69c4:	9326      	str	r3, [sp, #152]	; 0x98
    69c6:	f002 f8eb 	bl	8ba0 <FatFile::open(FatVolume*, char const*, int)>
    69ca:	4604      	mov	r4, r0
    69cc:	2800      	cmp	r0, #0
    69ce:	d0c2      	beq.n	6956 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    69d0:	a826      	add	r0, sp, #152	; 0x98
    69d2:	f002 fb39 	bl	9048 <FatFile::rmdir()>
    69d6:	4604      	mov	r4, r0
    69d8:	e7bd      	b.n	6956 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    69da:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    69de:	b131      	cbz	r1, 69ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    69e0:	4603      	mov	r3, r0
    69e2:	9032      	str	r0, [sp, #200]	; 0xc8
    69e4:	4632      	mov	r2, r6
    69e6:	a826      	add	r0, sp, #152	; 0x98
    69e8:	f000 fde0 	bl	75ac <ExFatFile::open(ExFatVolume*, char const*, int)>
    69ec:	bb00      	cbnz	r0, 6a30 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x260>
    69ee:	2400      	movs	r4, #0
    69f0:	e7b1      	b.n	6956 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    69f2:	a804      	add	r0, sp, #16
    69f4:	f003 f934 	bl	9c60 <FatFile::remove()>
    69f8:	2800      	cmp	r0, #0
    69fa:	f47f af1e 	bne.w	683a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    69fe:	e7a0      	b.n	6942 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  bool isOpen() const {return m_fFile || m_xFile;}
    6a00:	9925      	ldr	r1, [sp, #148]	; 0x94
    6a02:	2900      	cmp	r1, #0
    6a04:	f47f aefb 	bne.w	67fe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2e>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    6a08:	f240 20e9 	movw	r0, #745	; 0x2e9
    6a0c:	460c      	mov	r4, r1
    6a0e:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    6a12:	f8df 9034 	ldr.w	r9, [pc, #52]	; 6a48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
    6a16:	f7fe fd3d 	bl	5494 <dbgPrint(unsigned short)>
    6a1a:	e79c      	b.n	6956 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6a1c:	f240 3001 	movw	r0, #769	; 0x301
    6a20:	f7fe fd38 	bl	5494 <dbgPrint(unsigned short)>
    6a24:	e791      	b.n	694a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6a26:	f240 20fd 	movw	r0, #765	; 0x2fd
    6a2a:	f7fe fd33 	bl	5494 <dbgPrint(unsigned short)>
    6a2e:	e78c      	b.n	694a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
    6a30:	a826      	add	r0, sp, #152	; 0x98
    6a32:	f000 fe79 	bl	7728 <ExFatFile::rmdir()>
    6a36:	4604      	mov	r4, r0
    6a38:	2800      	cmp	r0, #0
    6a3a:	d0d8      	beq.n	69ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    6a3c:	e78b      	b.n	6956 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    6a3e:	bf00      	nop
    6a40:	20000c20 	.word	0x20000c20
    6a44:	20008a0c 	.word	0x20008a0c
    6a48:	20000b58 	.word	0x20000b58
    6a4c:	20000498 	.word	0x20000498

00006a50 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    6a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6a54:	460d      	mov	r5, r1
    6a56:	f6ad 3d0c 	subw	sp, sp, #2828	; 0xb0c
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    6a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
    6a5e:	bf14      	ite	ne
    6a60:	461f      	movne	r7, r3
    6a62:	4617      	moveq	r7, r2
  { 
    6a64:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    6a66:	4601      	mov	r1, r0
    6a68:	462a      	mov	r2, r5
    6a6a:	a8d8      	add	r0, sp, #864	; 0x360
    6a6c:	f7fe ff36 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    6a70:	463a      	mov	r2, r7
    6a72:	4621      	mov	r1, r4
    6a74:	f50d 608f 	add.w	r0, sp, #1144	; 0x478
    6a78:	f7fe ff30 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    6a7c:	9ad8      	ldr	r2, [sp, #864]	; 0x360
    6a7e:	4621      	mov	r1, r4
    6a80:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
    6a84:	f7fe ff2a 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    6a88:	f89d 336c 	ldrb.w	r3, [sp, #876]	; 0x36c
    6a8c:	b123      	cbz	r3, 6a98 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    6a8e:	f89d 336d 	ldrb.w	r3, [sp, #877]	; 0x36d
    6a92:	2b00      	cmp	r3, #0
    6a94:	f000 80f2 	beq.w	6c7c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x22c>
    Record p1o = p1;
    6a98:	f44f 728c 	mov.w	r2, #280	; 0x118
    6a9c:	a9d8      	add	r1, sp, #864	; 0x360
    6a9e:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    6aa2:	f007 f8fb 	bl	dc9c <memcpy>
    Record p2o = p2;
    6aa6:	f44f 728c 	mov.w	r2, #280	; 0x118
    6aaa:	f50d 618f 	add.w	r1, sp, #1144	; 0x478
    6aae:	f50d 60f8 	add.w	r0, sp, #1984	; 0x7c0
    6ab2:	f007 f8f3 	bl	dc9c <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    6ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
    6aba:	aa58      	add	r2, sp, #352	; 0x160
    6abc:	4629      	mov	r1, r5
    6abe:	4620      	mov	r0, r4
    6ac0:	f7fe ff50 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    6ac4:	f8dd 6594 	ldr.w	r6, [sp, #1428]	; 0x594
    6ac8:	42ae      	cmp	r6, r5
    6aca:	f000 8096 	beq.w	6bfa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1aa>
        px = ReadIndexRecord(jx); 
    6ace:	4632      	mov	r2, r6
    6ad0:	4621      	mov	r1, r4
    6ad2:	a804      	add	r0, sp, #16
    6ad4:	f7fe ff02 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6ad8:	f44f 728c 	mov.w	r2, #280	; 0x118
    6adc:	a904      	add	r1, sp, #16
    6ade:	f50d 601f 	add.w	r0, sp, #2544	; 0x9f0
    6ae2:	f007 f8db 	bl	dc9c <memcpy>
        pxo = px;
    6ae6:	f44f 728c 	mov.w	r2, #280	; 0x118
    6aea:	f50d 611f 	add.w	r1, sp, #2544	; 0x9f0
    6aee:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
    6af2:	f007 f8d3 	bl	dc9c <memcpy>
        while(handle != px.sibling)
    6af6:	f8dd 29f8 	ldr.w	r2, [sp, #2552]	; 0x9f8
    6afa:	4295      	cmp	r5, r2
    6afc:	d017      	beq.n	6b2e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xde>
          px = ReadIndexRecord(jx); 
    6afe:	4621      	mov	r1, r4
    6b00:	a804      	add	r0, sp, #16
    6b02:	4616      	mov	r6, r2
    6b04:	f7fe feea 	bl	58dc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6b08:	f44f 728c 	mov.w	r2, #280	; 0x118
    6b0c:	a904      	add	r1, sp, #16
    6b0e:	f50d 601f 	add.w	r0, sp, #2544	; 0x9f0
    6b12:	f007 f8c3 	bl	dc9c <memcpy>
          pxo = px;
    6b16:	f44f 728c 	mov.w	r2, #280	; 0x118
    6b1a:	f50d 611f 	add.w	r1, sp, #2544	; 0x9f0
    6b1e:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
    6b22:	f007 f8bb 	bl	dc9c <memcpy>
        while(handle != px.sibling)
    6b26:	f8dd 29f8 	ldr.w	r2, [sp, #2552]	; 0x9f8
    6b2a:	42aa      	cmp	r2, r5
    6b2c:	d1e7      	bne.n	6afe <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xae>
        px.sibling = p1.sibling;
    6b2e:	9bda      	ldr	r3, [sp, #872]	; 0x368
        WriteIndexRecord(jx, px);
    6b30:	f50d 621f 	add.w	r2, sp, #2544	; 0x9f0
    6b34:	4631      	mov	r1, r6
    6b36:	4620      	mov	r0, r4
        px.sibling = p1.sibling;
    6b38:	f8cd 39f8 	str.w	r3, [sp, #2552]	; 0x9f8
        WriteIndexRecord(jx, px);
    6b3c:	f7fe fe2a 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.sibling = p2.child;
    6b40:	f8dd 347c 	ldr.w	r3, [sp, #1148]	; 0x47c
      WriteIndexRecord(handle, p1);
    6b44:	aad8      	add	r2, sp, #864	; 0x360
    6b46:	4629      	mov	r1, r5
    6b48:	4620      	mov	r0, r4
      p1.sibling = p2.child;
    6b4a:	93da      	str	r3, [sp, #872]	; 0x368
      p1.store = p2.store;
    6b4c:	f8bd 3486 	ldrh.w	r3, [sp, #1158]	; 0x486
      p1.parent = newParent;
    6b50:	97d8      	str	r7, [sp, #864]	; 0x360
      p1.store = p2.store;
    6b52:	f8ad 336e 	strh.w	r3, [sp, #878]	; 0x36e
      p2.child = handle;
    6b56:	f8cd 547c 	str.w	r5, [sp, #1148]	; 0x47c
      WriteIndexRecord(handle, p1);
    6b5a:	f7fe fe1b 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    6b5e:	f50d 628f 	add.w	r2, sp, #1144	; 0x478
    6b62:	4639      	mov	r1, r7
    6b64:	4620      	mov	r0, r4
    6b66:	f7fe fe15 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    6b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
    6b6e:	4629      	mov	r1, r5
    6b70:	aa98      	add	r2, sp, #608	; 0x260
    6b72:	4620      	mov	r0, r4
    6b74:	f7fe fef6 	bl	5964 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    6b78:	f8bd 16b6 	ldrh.w	r1, [sp, #1718]	; 0x6b6
    6b7c:	f8bd 37ce 	ldrh.w	r3, [sp, #1998]	; 0x7ce
    6b80:	4299      	cmp	r1, r3
    6b82:	d046      	beq.n	6c12 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6b84:	aa98      	add	r2, sp, #608	; 0x260
    else if(!p1o.isdir)
    6b86:	f89d 96b4 	ldrb.w	r9, [sp, #1716]	; 0x6b4
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6b8a:	4620      	mov	r0, r4
    6b8c:	9200      	str	r2, [sp, #0]
    6b8e:	aa58      	add	r2, sp, #352	; 0x160
    else if(!p1o.isdir)
    6b90:	f1b9 0f00 	cmp.w	r9, #0
    6b94:	d00b      	beq.n	6bae <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x15e>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    6b96:	f7ff fde3 	bl	6760 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    6b9a:	2800      	cmp	r0, #0
    6b9c:	f000 8092 	beq.w	6cc4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    6ba0:	f04f 0801 	mov.w	r8, #1
  }
    6ba4:	4640      	mov	r0, r8
    6ba6:	f60d 3d0c 	addw	sp, sp, #2828	; 0xb0c
    6baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6bae:	f7ff fc19 	bl	63e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    6bb2:	4680      	mov	r8, r0
    6bb4:	2800      	cmp	r0, #0
    6bb6:	d044      	beq.n	6c42 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f2>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    6bb8:	f8bd 57ce 	ldrh.w	r5, [sp, #1998]	; 0x7ce
							  return write((const uint8_t *)str, strlen(str)); }
    6bbc:	a858      	add	r0, sp, #352	; 0x160
    6bbe:	f00b fcdf 	bl	12580 <strlen>
    6bc2:	4601      	mov	r1, r0
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    6bc4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    6bc8:	a858      	add	r0, sp, #352	; 0x160
    6bca:	f008 fde7 	bl	f79c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6bce:	484d      	ldr	r0, [pc, #308]	; (6d04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2b4>)
    6bd0:	f006 fa5c 	bl	d08c <Print::println()>
    6bd4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    6bd6:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6bda:	2b00      	cmp	r3, #0
    6bdc:	d077      	beq.n	6cce <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x27e>
    6bde:	4619      	mov	r1, r3
    6be0:	aa58      	add	r2, sp, #352	; 0x160
    6be2:	2301      	movs	r3, #1
    6be4:	a84a      	add	r0, sp, #296	; 0x128
    6be6:	f8cd 9128 	str.w	r9, [sp, #296]	; 0x128
    6bea:	f001 ffd9 	bl	8ba0 <FatFile::open(FatVolume*, char const*, int)>
    6bee:	2800      	cmp	r0, #0
    6bf0:	d0d8      	beq.n	6ba4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6bf2:	a84a      	add	r0, sp, #296	; 0x128
    6bf4:	f003 f834 	bl	9c60 <FatFile::remove()>
    6bf8:	e7d4      	b.n	6ba4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
        p3.child = p1.sibling;
    6bfa:	9bda      	ldr	r3, [sp, #872]	; 0x368
        WriteIndexRecord(p1.parent, p3);    
    6bfc:	f50d 62b2 	add.w	r2, sp, #1424	; 0x590
    6c00:	99d8      	ldr	r1, [sp, #864]	; 0x360
    6c02:	4620      	mov	r0, r4
        p3.child = p1.sibling;
    6c04:	f8cd 3594 	str.w	r3, [sp, #1428]	; 0x594
    uint32_t jx=-1;
    6c08:	f04f 36ff 	mov.w	r6, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    6c0c:	f7fe fdc2 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    6c10:	e796      	b.n	6b40 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf0>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    6c12:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    6c16:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    6c18:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d039      	beq.n	6c94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x244>
  FatFile* vwd() {return &m_vwd;}
    6c20:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    6c24:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    6c26:	aa58      	add	r2, sp, #352	; 0x160
    6c28:	a84a      	add	r0, sp, #296	; 0x128
    6c2a:	9103      	str	r1, [sp, #12]
    6c2c:	934a      	str	r3, [sp, #296]	; 0x128
    6c2e:	f001 ff35 	bl	8a9c <FatFile::open(FatFile*, char const*, int)>
    6c32:	9903      	ldr	r1, [sp, #12]
    6c34:	2800      	cmp	r0, #0
    6c36:	d15c      	bne.n	6cf2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2a2>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    6c38:	f240 205e 	movw	r0, #606	; 0x25e
    6c3c:	f7fe fc2a 	bl	5494 <dbgPrint(unsigned short)>
    6c40:	e003      	b.n	6c4a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    6c42:	f240 2062 	movw	r0, #610	; 0x262
    6c46:	f7fe fc25 	bl	5494 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    6c4a:	4631      	mov	r1, r6
    6c4c:	f60d 02d8 	addw	r2, sp, #2264	; 0x8d8
    6c50:	4620      	mov	r0, r4
    return false;
    6c52:	f04f 0800 	mov.w	r8, #0
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    6c56:	f7fe fd9d 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    6c5a:	f50d 62d5 	add.w	r2, sp, #1704	; 0x6a8
    6c5e:	4629      	mov	r1, r5
    6c60:	4620      	mov	r0, r4
    6c62:	f7fe fd97 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    6c66:	4620      	mov	r0, r4
    6c68:	f50d 62f8 	add.w	r2, sp, #1984	; 0x7c0
    6c6c:	4639      	mov	r1, r7
    6c6e:	f7fe fd91 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    6c72:	4640      	mov	r0, r8
    6c74:	f60d 3d0c 	addw	sp, sp, #2828	; 0xb0c
    6c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { ScanDir(p1.store, handle) ; // in case scan directory
    6c7c:	462a      	mov	r2, r5
    6c7e:	f8bd 136e 	ldrh.w	r1, [sp, #878]	; 0x36e
    6c82:	4620      	mov	r0, r4
    6c84:	f7fe fee6 	bl	5a54 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    6c88:	aad8      	add	r2, sp, #864	; 0x360
    6c8a:	4629      	mov	r1, r5
    6c8c:	4620      	mov	r0, r4
    6c8e:	f7fe fd81 	bl	5794 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    6c92:	e701      	b.n	6a98 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    6c94:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    6c98:	2900      	cmp	r1, #0
    6c9a:	d0cd      	beq.n	6c38 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
  ExFatFile* vwd() {return &m_vwd;}
    6c9c:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    6ca0:	aa58      	add	r2, sp, #352	; 0x160
    6ca2:	a84a      	add	r0, sp, #296	; 0x128
    6ca4:	9356      	str	r3, [sp, #344]	; 0x158
    6ca6:	9103      	str	r1, [sp, #12]
    6ca8:	f000 fc04 	bl	74b4 <ExFatFile::open(ExFatFile*, char const*, int)>
    6cac:	9903      	ldr	r1, [sp, #12]
    6cae:	2800      	cmp	r0, #0
    6cb0:	d0c2      	beq.n	6c38 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    6cb2:	aa98      	add	r2, sp, #608	; 0x260
    6cb4:	a84a      	add	r0, sp, #296	; 0x128
    6cb6:	f000 fe8b 	bl	79d0 <ExFatFile::rename(ExFatFile*, char const*)>
    6cba:	4680      	mov	r8, r0
    6cbc:	2800      	cmp	r0, #0
    6cbe:	f47f af71 	bne.w	6ba4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6cc2:	e7b9      	b.n	6c38 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    6cc4:	f240 2066 	movw	r0, #614	; 0x266
    6cc8:	f7fe fbe4 	bl	5494 <dbgPrint(unsigned short)>
    6ccc:	e7bd      	b.n	6c4a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
    6cce:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    6cd2:	2900      	cmp	r1, #0
    6cd4:	f43f af64 	beq.w	6ba0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x150>
    6cd8:	9356      	str	r3, [sp, #344]	; 0x158
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6cda:	aa58      	add	r2, sp, #352	; 0x160
    6cdc:	2301      	movs	r3, #1
    6cde:	a84a      	add	r0, sp, #296	; 0x128
    6ce0:	f000 fc64 	bl	75ac <ExFatFile::open(ExFatVolume*, char const*, int)>
    6ce4:	2800      	cmp	r0, #0
    6ce6:	f43f af5d 	beq.w	6ba4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6cea:	a84a      	add	r0, sp, #296	; 0x128
    6cec:	f000 fcc2 	bl	7674 <ExFatFile::remove()>
    6cf0:	e758      	b.n	6ba4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6cf2:	aa98      	add	r2, sp, #608	; 0x260
    6cf4:	a84a      	add	r0, sp, #296	; 0x128
    6cf6:	f002 f8b1 	bl	8e5c <FatFile::rename(FatFile*, char const*)>
    6cfa:	4680      	mov	r8, r0
    6cfc:	2800      	cmp	r0, #0
    6cfe:	f47f af51 	bne.w	6ba4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6d02:	e799      	b.n	6c38 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    6d04:	20008a0c 	.word	0x20008a0c

00006d08 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    6d08:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    6d0a:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    6d0e:	b084      	sub	sp, #16
    6d10:	468c      	mov	ip, r1
    6d12:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    6d14:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    6d16:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    6d18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    6d1c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    6d20:	ea4f 124c 	mov.w	r2, ip, lsl #5
    6d24:	4629      	mov	r1, r5
    6d26:	6a20      	ldr	r0, [r4, #32]
    6d28:	f001 faac 	bl	8284 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    6d2c:	2801      	cmp	r0, #1
    6d2e:	d106      	bne.n	6d3e <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    6d30:	4632      	mov	r2, r6
    6d32:	4629      	mov	r1, r5
    6d34:	6a20      	ldr	r0, [r4, #32]
    6d36:	f001 fa89 	bl	824c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    6d3a:	b004      	add	sp, #16
    6d3c:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    6d3e:	2000      	movs	r0, #0
}
    6d40:	b004      	add	sp, #16
    6d42:	bd70      	pop	{r4, r5, r6, pc}

00006d44 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    6d44:	b510      	push	{r4, lr}
    6d46:	4604      	mov	r4, r0
  bool rtn = sync();
    6d48:	f000 fdba 	bl	78c0 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    6d4c:	2300      	movs	r3, #0
    6d4e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    6d52:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    6d56:	bd10      	pop	{r4, pc}

00006d58 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    6d58:	b538      	push	{r3, r4, r5, lr}
    6d5a:	4614      	mov	r4, r2
    6d5c:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    6d5e:	2200      	movs	r2, #0
    6d60:	f100 0124 	add.w	r1, r0, #36	; 0x24
    6d64:	6a00      	ldr	r0, [r0, #32]
    6d66:	f001 fa71 	bl	824c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6d6a:	4603      	mov	r3, r0
    6d6c:	b120      	cbz	r0, 6d78 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6d6e:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    6d70:	2001      	movs	r0, #1
  *pdate = getLe16(df->createDate);
    6d72:	802a      	strh	r2, [r5, #0]
    6d74:	891b      	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    6d76:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    6d78:	bd38      	pop	{r3, r4, r5, pc}
    6d7a:	bf00      	nop

00006d7c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    6d7c:	b538      	push	{r3, r4, r5, lr}
    6d7e:	4614      	mov	r4, r2
    6d80:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    6d82:	2200      	movs	r2, #0
    6d84:	f100 0124 	add.w	r1, r0, #36	; 0x24
    6d88:	6a00      	ldr	r0, [r0, #32]
    6d8a:	f001 fa5f 	bl	824c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6d8e:	4603      	mov	r3, r0
    6d90:	b120      	cbz	r0, 6d9c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    6d92:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    6d94:	2001      	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    6d96:	802a      	strh	r2, [r5, #0]
    6d98:	899b      	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    6d9a:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    6d9c:	bd38      	pop	{r3, r4, r5, pc}
    6d9e:	bf00      	nop

00006da0 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    6da0:	b538      	push	{r3, r4, r5, lr}
    6da2:	460d      	mov	r5, r1
  if (isOpen()) {
    6da4:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    6da8:	b109      	cbz	r1, 6dae <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    6daa:	2000      	movs	r0, #0
}
    6dac:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    6dae:	2238      	movs	r2, #56	; 0x38
    6db0:	4604      	mov	r4, r0
    6db2:	f00b f801 	bl	11db8 <memset>
  m_flags = FILE_FLAG_READ;
    6db6:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    6db8:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    6dba:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    6dbc:	4618      	mov	r0, r3
    6dbe:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    6dc2:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    6dc6:	bd38      	pop	{r3, r4, r5, pc}

00006dc8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    6dc8:	b4f0      	push	{r4, r5, r6, r7}
    6dca:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    6dcc:	7809      	ldrb	r1, [r1, #0]
    6dce:	2920      	cmp	r1, #32
    6dd0:	d103      	bne.n	6dda <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    6dd2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    6dd6:	2c20      	cmp	r4, #32
    6dd8:	d0fb      	beq.n	6dd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    6dda:	6015      	str	r5, [r2, #0]
  fname->end = path;
    6ddc:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    6dde:	782c      	ldrb	r4, [r5, #0]
    6de0:	2c2f      	cmp	r4, #47	; 0x2f
    6de2:	d011      	beq.n	6e08 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    6de4:	b184      	cbz	r4, 6e08 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    6de6:	1c6e      	adds	r6, r5, #1
    6de8:	2c3c      	cmp	r4, #60	; 0x3c
    6dea:	4f1d      	ldr	r7, [pc, #116]	; (6e60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    6dec:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    6dee:	d82a      	bhi.n	6e46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    6df0:	2c21      	cmp	r4, #33	; 0x21
    6df2:	d812      	bhi.n	6e1a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    6df4:	f104 3cff 	add.w	ip, r4, #4294967295
    6df8:	f1bc 0f1e 	cmp.w	ip, #30
    6dfc:	d816      	bhi.n	6e2c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    6dfe:	2000      	movs	r0, #0
    6e00:	bcf0      	pop	{r4, r5, r6, r7}
    6e02:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    6e04:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    6e08:	2c20      	cmp	r4, #32
    6e0a:	d0fb      	beq.n	6e04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    6e0c:	2c2f      	cmp	r4, #47	; 0x2f
    6e0e:	d0f9      	beq.n	6e04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    6e10:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    6e12:	4611      	mov	r1, r2
}
    6e14:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    6e16:	f001 b907 	b.w	8028 <ExFatFile::hashName(ExName_t*)>
    6e1a:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    6e1e:	fa5f fc8c 	uxtb.w	ip, ip
    6e22:	fa27 fc0c 	lsr.w	ip, r7, ip
    6e26:	f01c 0f01 	tst.w	ip, #1
    6e2a:	d1e8      	bne.n	6dfe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    6e2c:	2c2e      	cmp	r4, #46	; 0x2e
    6e2e:	d001      	beq.n	6e34 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    6e30:	2c20      	cmp	r4, #32
    6e32:	d10d      	bne.n	6e50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    6e34:	f816 4b01 	ldrb.w	r4, [r6], #1
    6e38:	2c00      	cmp	r4, #0
    6e3a:	d0e5      	beq.n	6e08 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    6e3c:	2c2f      	cmp	r4, #47	; 0x2f
    6e3e:	d0e3      	beq.n	6e08 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    6e40:	2c3c      	cmp	r4, #60	; 0x3c
    6e42:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    6e44:	d9d4      	bls.n	6df0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    6e46:	2c5c      	cmp	r4, #92	; 0x5c
    6e48:	d0d9      	beq.n	6dfe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    6e4a:	d903      	bls.n	6e54 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    6e4c:	2c7c      	cmp	r4, #124	; 0x7c
    6e4e:	d0d6      	beq.n	6dfe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    6e50:	6096      	str	r6, [r2, #8]
    6e52:	e7ef      	b.n	6e34 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    6e54:	3c3e      	subs	r4, #62	; 0x3e
    6e56:	2c01      	cmp	r4, #1
    6e58:	d8fa      	bhi.n	6e50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    6e5a:	2000      	movs	r0, #0
    6e5c:	bcf0      	pop	{r4, r5, r6, r7}
    6e5e:	4770      	bx	lr
    6e60:	05002101 	.word	0x05002101

00006e64 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    6e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    6e68:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    6e6c:	b083      	sub	sp, #12
    6e6e:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    6e70:	07dc      	lsls	r4, r3, #31
    6e72:	d574      	bpl.n	6f5e <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    6e74:	0658      	lsls	r0, r3, #25
    6e76:	460f      	mov	r7, r1
    6e78:	4690      	mov	r8, r2
    6e7a:	f140 80b0 	bpl.w	6fde <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    6e7e:	e9d5 2300 	ldrd	r2, r3, [r5]
    6e82:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    6e86:	eb18 0402 	adds.w	r4, r8, r2
    6e8a:	f143 0300 	adc.w	r3, r3, #0
    6e8e:	42a1      	cmp	r1, r4
    6e90:	eb70 0303 	sbcs.w	r3, r0, r3
    6e94:	f0c0 80a9 	bcc.w	6fea <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    6e98:	f1b8 0f00 	cmp.w	r8, #0
    6e9c:	d05b      	beq.n	6f56 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    6e9e:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6ea0:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    6ea4:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6ea8:	f8d5 a020 	ldr.w	sl, [r5, #32]
    6eac:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    6eb0:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6eb2:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    6eb6:	2c00      	cmp	r4, #0
    6eb8:	d170      	bne.n	6f9c <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    6eba:	4313      	orrs	r3, r2
    6ebc:	d170      	bne.n	6fa0 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    6ebe:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    6ec2:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    6ec4:	bf4c      	ite	mi
    6ec6:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    6eca:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    6ecc:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    6ece:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    6ed2:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    6ed4:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6ed8:	0a63      	lsrs	r3, r4, #9
    6eda:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    6edc:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    6ee0:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    6ee2:	f1bb 0f00 	cmp.w	fp, #0
    6ee6:	d145      	bne.n	6f74 <ExFatFile::read(void*, unsigned int)+0x110>
    6ee8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    6eec:	d342      	bcc.n	6f74 <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    6eee:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    6ef2:	4291      	cmp	r1, r2
    6ef4:	d03e      	beq.n	6f74 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6ef6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    6efa:	d358      	bcc.n	6fae <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6efc:	f04f 0b01 	mov.w	fp, #1
    6f00:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6f04:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    6f08:	0a73      	lsrs	r3, r6, #9
    6f0a:	459b      	cmp	fp, r3
    6f0c:	bf28      	it	cs
    6f0e:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    6f10:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    6f12:	ea4f 244b 	mov.w	r4, fp, lsl #9
    6f16:	d80a      	bhi.n	6f2e <ExFatFile::read(void*, unsigned int)+0xca>
    6f18:	eb01 030b 	add.w	r3, r1, fp
    6f1c:	429a      	cmp	r2, r3
    6f1e:	d206      	bcs.n	6f2e <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    6f20:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    6f24:	9101      	str	r1, [sp, #4]
    6f26:	f005 fded 	bl	cb04 <FsCache::sync()>
    6f2a:	9901      	ldr	r1, [sp, #4]
    6f2c:	b1b8      	cbz	r0, 6f5e <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    6f2e:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    6f32:	465b      	mov	r3, fp
    6f34:	6802      	ldr	r2, [r0, #0]
    6f36:	f8d2 a014 	ldr.w	sl, [r2, #20]
    6f3a:	463a      	mov	r2, r7
    6f3c:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    6f3e:	b170      	cbz	r0, 6f5e <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    6f40:	4623      	mov	r3, r4
    dst += n;
    6f42:	4427      	add	r7, r4
    m_curPosition += n;
    6f44:	e9d5 1200 	ldrd	r1, r2, [r5]
    6f48:	185b      	adds	r3, r3, r1
    6f4a:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    6f4e:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    6f50:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    6f54:	d1a8      	bne.n	6ea8 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    6f56:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    6f58:	b003      	add	sp, #12
    6f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    6f5e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    6f62:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    6f66:	f043 0302 	orr.w	r3, r3, #2
    6f6a:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    6f6e:	b003      	add	sp, #12
    6f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    6f74:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    6f78:	2200      	movs	r2, #0
    6f7a:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    6f7e:	42b4      	cmp	r4, r6
    6f80:	bf28      	it	cs
    6f82:	4634      	movcs	r4, r6
    6f84:	f005 fdea 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6f88:	2800      	cmp	r0, #0
    6f8a:	d0e8      	beq.n	6f5e <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    6f8c:	eb00 010b 	add.w	r1, r0, fp
    6f90:	4622      	mov	r2, r4
    6f92:	4638      	mov	r0, r7
    6f94:	f006 fe82 	bl	dc9c <memcpy>
    m_curPosition += n;
    6f98:	4623      	mov	r3, r4
    6f9a:	e7d2      	b.n	6f42 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    6f9c:	69aa      	ldr	r2, [r5, #24]
    6f9e:	e796      	b.n	6ece <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    6fa0:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    6fa4:	065b      	lsls	r3, r3, #25
    6fa6:	d50e      	bpl.n	6fc6 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    6fa8:	69aa      	ldr	r2, [r5, #24]
    6faa:	3201      	adds	r2, #1
    6fac:	e78e      	b.n	6ecc <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    6fae:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    6fb2:	463a      	mov	r2, r7
    6fb4:	6803      	ldr	r3, [r0, #0]
    6fb6:	691b      	ldr	r3, [r3, #16]
    6fb8:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    6fba:	2800      	cmp	r0, #0
    6fbc:	d0cf      	beq.n	6f5e <ExFatFile::read(void*, unsigned int)+0xfa>
    6fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    6fc2:	461c      	mov	r4, r3
    6fc4:	e7bd      	b.n	6f42 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6fc6:	464a      	mov	r2, r9
    6fc8:	4650      	mov	r0, sl
    6fca:	69a9      	ldr	r1, [r5, #24]
    6fcc:	f001 f99c 	bl	8308 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    6fd0:	2800      	cmp	r0, #0
    6fd2:	dbc4      	blt.n	6f5e <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    6fd4:	d00c      	beq.n	6ff0 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    6fd6:	f8d5 a020 	ldr.w	sl, [r5, #32]
    6fda:	69aa      	ldr	r2, [r5, #24]
    6fdc:	e777      	b.n	6ece <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    6fde:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    6fe2:	0719      	lsls	r1, r3, #28
    6fe4:	f57f af58 	bpl.w	6e98 <ExFatFile::read(void*, unsigned int)+0x34>
    6fe8:	e749      	b.n	6e7e <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    6fea:	eba1 0802 	sub.w	r8, r1, r2
    6fee:	e753      	b.n	6e98 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    6ff0:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    6ff4:	f013 0f50 	tst.w	r3, #80	; 0x50
    6ff8:	d0b1      	beq.n	6f5e <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    6ffa:	eba8 0806 	sub.w	r8, r8, r6
    6ffe:	4640      	mov	r0, r8
    7000:	e7aa      	b.n	6f58 <ExFatFile::read(void*, unsigned int)+0xf4>
    7002:	bf00      	nop

00007004 <ExFatFile::peek()>:
int ExFatFile::peek() {
    7004:	b5f0      	push	{r4, r5, r6, r7, lr}
    7006:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    7008:	2201      	movs	r2, #1
    700a:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    700c:	6985      	ldr	r5, [r0, #24]
    700e:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    7012:	e9d0 6700 	ldrd	r6, r7, [r0]
    7016:	f7ff ff25 	bl	6e64 <ExFatFile::read(void*, unsigned int)>
    701a:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    701c:	61a5      	str	r5, [r4, #24]
    701e:	bf0c      	ite	eq
    7020:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    7024:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    7028:	e9c4 6700 	strd	r6, r7, [r4]
}
    702c:	b003      	add	sp, #12
    702e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007030 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    7030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7034:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    7036:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    703a:	b083      	sub	sp, #12
    703c:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    703e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    7042:	2b00      	cmp	r3, #0
    7044:	d051      	beq.n	70ea <ExFatFile::seekSet(unsigned long long)+0xba>
    7046:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    7048:	e9d0 1c00 	ldrd	r1, ip, [r0]
    704c:	45bc      	cmp	ip, r7
    704e:	bf08      	it	eq
    7050:	4291      	cmpeq	r1, r2
    7052:	d05c      	beq.n	710e <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    7054:	ea56 0207 	orrs.w	r2, r6, r7
    7058:	d04d      	beq.n	70f6 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    705a:	071d      	lsls	r5, r3, #28
    705c:	d504      	bpl.n	7068 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    705e:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    7062:	42b0      	cmp	r0, r6
    7064:	41ba      	sbcs	r2, r7
    7066:	d340      	bcc.n	70ea <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    7068:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    706c:	1e75      	subs	r5, r6, #1
    706e:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    7072:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    7074:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7078:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    707c:	3209      	adds	r2, #9
    707e:	b2d2      	uxtb	r2, r2
    7080:	f1c2 0e20 	rsb	lr, r2, #32
    7084:	40d5      	lsrs	r5, r2
    7086:	f1a2 0920 	sub.w	r9, r2, #32
    708a:	fa00 fb0e 	lsl.w	fp, r0, lr
    708e:	fa20 f009 	lsr.w	r0, r0, r9
    7092:	ea45 050b 	orr.w	r5, r5, fp
    7096:	4305      	orrs	r5, r0
  if (isContiguous()) {
    7098:	9801      	ldr	r0, [sp, #4]
    709a:	0640      	lsls	r0, r0, #25
    709c:	d433      	bmi.n	7106 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    709e:	1e48      	subs	r0, r1, #1
    70a0:	fa20 f202 	lsr.w	r2, r0, r2
    70a4:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    70a8:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    70ac:	fa00 fe0e 	lsl.w	lr, r0, lr
    70b0:	fa20 f009 	lsr.w	r0, r0, r9
    70b4:	ea42 020e 	orr.w	r2, r2, lr
    70b8:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    70bc:	d001      	beq.n	70c2 <ExFatFile::seekSet(unsigned long long)+0x92>
    70be:	4295      	cmp	r5, r2
    70c0:	d229      	bcs.n	7116 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    70c2:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    70c4:	bf4c      	ite	mi
    70c6:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    70ca:	69e3      	ldrpl	r3, [r4, #28]
    70cc:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    70ce:	f104 0918 	add.w	r9, r4, #24
    70d2:	e006      	b.n	70e2 <ExFatFile::seekSet(unsigned long long)+0xb2>
    70d4:	69a1      	ldr	r1, [r4, #24]
    70d6:	3d01      	subs	r5, #1
    70d8:	6a20      	ldr	r0, [r4, #32]
    70da:	f001 f915 	bl	8308 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    70de:	2800      	cmp	r0, #0
    70e0:	dd03      	ble.n	70ea <ExFatFile::seekSet(unsigned long long)+0xba>
    70e2:	464a      	mov	r2, r9
  while (nNew--) {
    70e4:	2d00      	cmp	r5, #0
    70e6:	d1f5      	bne.n	70d4 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    70e8:	e007      	b.n	70fa <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    70ea:	2000      	movs	r0, #0
  m_curCluster = tmp;
    70ec:	f8c4 8018 	str.w	r8, [r4, #24]
}
    70f0:	b003      	add	sp, #12
    70f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    70f6:	2300      	movs	r3, #0
    70f8:	6183      	str	r3, [r0, #24]
  return true;
    70fa:	2001      	movs	r0, #1
  m_curPosition = pos;
    70fc:	e9c4 6700 	strd	r6, r7, [r4]
}
    7100:	b003      	add	sp, #12
    7102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    7106:	69e3      	ldr	r3, [r4, #28]
    7108:	442b      	add	r3, r5
    710a:	61a3      	str	r3, [r4, #24]
    goto done;
    710c:	e7f5      	b.n	70fa <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    710e:	2001      	movs	r0, #1
}
    7110:	b003      	add	sp, #12
    7112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    7116:	1aad      	subs	r5, r5, r2
    7118:	e7d9      	b.n	70ce <ExFatFile::seekSet(unsigned long long)+0x9e>
    711a:	bf00      	nop

0000711c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7120:	4617      	mov	r7, r2
    7122:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    7126:	b08f      	sub	sp, #60	; 0x3c
    7128:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    712a:	2a00      	cmp	r2, #0
    712c:	f040 80d7 	bne.w	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    7130:	468b      	mov	fp, r1
    7132:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    7136:	f011 0f50 	tst.w	r1, #80	; 0x50
    713a:	f000 80d0 	beq.w	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    713e:	f003 0103 	and.w	r1, r3, #3
    7142:	469a      	mov	sl, r3
    7144:	2903      	cmp	r1, #3
    7146:	f000 80ca 	beq.w	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    714a:	3101      	adds	r1, #1
    714c:	f003 0008 	and.w	r0, r3, #8
    7150:	ea41 0300 	orr.w	r3, r1, r0
    7154:	9302      	str	r3, [sp, #8]
  if (fname) {
    7156:	2f00      	cmp	r7, #0
    7158:	f000 80cb 	beq.w	72f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    715c:	6939      	ldr	r1, [r7, #16]
    715e:	f101 080e 	add.w	r8, r1, #14
    7162:	49b6      	ldr	r1, [pc, #728]	; (743c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    7164:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    7168:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    716c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    7170:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    7172:	f108 0802 	add.w	r8, r8, #2
    7176:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    717a:	d005      	beq.n	7188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    717c:	2000      	movs	r0, #0
    717e:	2100      	movs	r1, #0
    m_curCluster = 0;
    7180:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    7184:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    7188:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    718a:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    718c:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    718e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7192:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    7194:	2220      	movs	r2, #32
    7196:	a906      	add	r1, sp, #24
    7198:	4658      	mov	r0, fp
    719a:	f7ff fe63 	bl	6e64 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    719e:	b300      	cbz	r0, 71e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    71a0:	2820      	cmp	r0, #32
    71a2:	f040 809c 	bne.w	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    71a6:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    71aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
    71ae:	2a00      	cmp	r2, #0
    71b0:	f2c0 80a2 	blt.w	72f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    71b4:	b934      	cbnz	r4, 71c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    71b6:	f8db 2000 	ldr.w	r2, [fp]
    71ba:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    71be:	f8db 2018 	ldr.w	r2, [fp, #24]
    71c2:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    71c4:	4544      	cmp	r4, r8
    71c6:	d201      	bcs.n	71cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    71c8:	3401      	adds	r4, #1
    71ca:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    71cc:	2b00      	cmp	r3, #0
    71ce:	f000 8113 	beq.w	73f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    71d2:	2220      	movs	r2, #32
    71d4:	a906      	add	r1, sp, #24
    71d6:	4658      	mov	r0, fp
      inSet = false;
    71d8:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    71da:	f7ff fe43 	bl	6e64 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    71de:	2800      	cmp	r0, #0
    71e0:	d1de      	bne.n	71a0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    71e2:	f41a 7f00 	tst.w	sl, #512	; 0x200
    71e6:	d07a      	beq.n	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    71e8:	9b02      	ldr	r3, [sp, #8]
    71ea:	079b      	lsls	r3, r3, #30
    71ec:	d577      	bpl.n	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    71ee:	2f00      	cmp	r7, #0
    71f0:	d075      	beq.n	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    71f2:	4544      	cmp	r4, r8
    71f4:	d217      	bcs.n	7226 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    71f6:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    71fa:	2220      	movs	r2, #32
    71fc:	a906      	add	r1, sp, #24
    71fe:	4658      	mov	r0, fp
    7200:	f7ff fe30 	bl	6e64 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    7204:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    7206:	2800      	cmp	r0, #0
    7208:	d061      	beq.n	72ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    720a:	2820      	cmp	r0, #32
    720c:	d167      	bne.n	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    720e:	b92c      	cbnz	r4, 721c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    7210:	f8db 2000 	ldr.w	r2, [fp]
    7214:	f8db a018 	ldr.w	sl, [fp, #24]
    7218:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    721c:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    721e:	45a0      	cmp	r8, r4
    7220:	d8eb      	bhi.n	71fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    7222:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    7226:	2238      	movs	r2, #56	; 0x38
    7228:	2100      	movs	r1, #0
    722a:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    722c:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    7230:	f00a fdc2 	bl	11db8 <memset>
  ExFatVolume* volume() const {return m_vol;}
    7234:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    7238:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    723c:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    723e:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    7240:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    7242:	2600      	movs	r6, #0
  m_dirPos = freePos;
    7244:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    7248:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    724c:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    724e:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    7252:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    7254:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    7256:	f1b8 0f00 	cmp.w	r8, #0
    725a:	d033      	beq.n	72c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    725c:	f108 39ff 	add.w	r9, r8, #4294967295
    7260:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    7262:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 7440 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    7266:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    726a:	2201      	movs	r2, #1
    726c:	4659      	mov	r1, fp
    726e:	4628      	mov	r0, r5
    7270:	f7ff fd4a 	bl	6d08 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    7274:	4604      	mov	r4, r0
    7276:	b390      	cbz	r0, 72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    7278:	f990 2000 	ldrsb.w	r2, [r0]
    727c:	2a00      	cmp	r2, #0
    727e:	db2e      	blt.n	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    7280:	2220      	movs	r2, #32
    7282:	2100      	movs	r1, #0
    7284:	f00a fd98 	bl	11db8 <memset>
    if (i == 0) {
    7288:	2e00      	cmp	r6, #0
    728a:	f000 80bc 	beq.w	7406 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    728e:	f1bb 0f01 	cmp.w	fp, #1
    7292:	f000 80d7 	beq.w	7444 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    7296:	23c1      	movs	r3, #193	; 0xc1
    7298:	46a3      	mov	fp, r4
    729a:	341e      	adds	r4, #30
    729c:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    72a0:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    72a2:	4638      	mov	r0, r7
    72a4:	b91b      	cbnz	r3, 72ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    72a6:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    72aa:	429a      	cmp	r2, r3
    72ac:	d005      	beq.n	72ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    72ae:	f005 fc7d 	bl	cbac <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    72b2:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    72b6:	45a3      	cmp	fp, r4
    72b8:	d1f2      	bne.n	72a0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    72ba:	3601      	adds	r6, #1
    72bc:	fa5f fb86 	uxtb.w	fp, r6
    72c0:	45d8      	cmp	r8, fp
    72c2:	d8d2      	bhi.n	726a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    72c4:	4628      	mov	r0, r5
    72c6:	f000 fafb 	bl	78c0 <ExFatFile::sync()>
    72ca:	4606      	mov	r6, r0
    72cc:	e00d      	b.n	72ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    72ce:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    72d0:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    72d4:	f000 fb24 	bl	7920 <ExFatFile::addDirCluster()>
    72d8:	2800      	cmp	r0, #0
    72da:	f040 8091 	bne.w	7400 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    72de:	2300      	movs	r3, #0
  return false;
    72e0:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    72e2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    72e6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    72ea:	4630      	mov	r0, r6
    72ec:	b00f      	add	sp, #60	; 0x3c
    72ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    72f2:	f04f 0803 	mov.w	r8, #3
    72f6:	e747      	b.n	7188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    72f8:	bb56      	cbnz	r6, 7350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    72fa:	4544      	cmp	r4, r8
    72fc:	bf38      	it	cc
    72fe:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    7300:	2b85      	cmp	r3, #133	; 0x85
    7302:	f47f af47 	bne.w	7194 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    7306:	4631      	mov	r1, r6
    7308:	2238      	movs	r2, #56	; 0x38
    730a:	4628      	mov	r0, r5
      inSet = true;
    730c:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    730e:	f00a fd53 	bl	11db8 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    7312:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    7316:	f89d 3019 	ldrb.w	r3, [sp, #25]
    731a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    731e:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    7322:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    7324:	bf58      	it	pl
    7326:	f043 0308 	orrpl.w	r3, r3, #8
    732a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    732e:	f8db 3000 	ldr.w	r3, [fp]
    7332:	f8db 2020 	ldr.w	r2, [fp, #32]
    7336:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    7338:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    733a:	f8db 2018 	ldr.w	r2, [fp, #24]
    733e:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    7342:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    7346:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    734a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    734e:	e721      	b.n	7194 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    7350:	2bc0      	cmp	r3, #192	; 0xc0
    7352:	d028      	beq.n	73a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    7354:	2bc1      	cmp	r3, #193	; 0xc1
    7356:	f47f af3c 	bne.w	71d2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    735a:	463a      	mov	r2, r7
    735c:	a906      	add	r1, sp, #24
    735e:	4628      	mov	r0, r5
    7360:	f000 fdd6 	bl	7f10 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    7364:	b1e8      	cbz	r0, 73a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    7366:	89bb      	ldrh	r3, [r7, #12]
    7368:	b9db      	cbnz	r3, 73a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    736a:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    736e:	429a      	cmp	r2, r3
    7370:	d117      	bne.n	73a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    7372:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    7376:	d1b2      	bne.n	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    7378:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    737c:	d170      	bne.n	7460 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    737e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    7382:	0798      	lsls	r0, r3, #30
    7384:	d46c      	bmi.n	7460 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    7386:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    738a:	d1a8      	bne.n	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    738c:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    7390:	d0ab      	beq.n	72ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    7392:	4628      	mov	r0, r5
    7394:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    7398:	f7ff fe4a 	bl	7030 <ExFatFile::seekSet(unsigned long long)>
    739c:	2800      	cmp	r0, #0
    739e:	d1a4      	bne.n	72ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    73a0:	e79d      	b.n	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    73a2:	4606      	mov	r6, r0
    73a4:	e6f6      	b.n	7194 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    73a6:	9b02      	ldr	r3, [sp, #8]
    73a8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    73ac:	f89d 3019 	ldrb.w	r3, [sp, #25]
    73b0:	079b      	lsls	r3, r3, #30
    73b2:	d502      	bpl.n	73ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    73b4:	9b03      	ldr	r3, [sp, #12]
    73b6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    73ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    73bc:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    73be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    73c2:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    73c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    73ca:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    73ce:	2f00      	cmp	r7, #0
    73d0:	d0cf      	beq.n	7372 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    73d2:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    73d6:	693a      	ldr	r2, [r7, #16]
    73d8:	81bb      	strh	r3, [r7, #12]
    next = begin;
    73da:	683b      	ldr	r3, [r7, #0]
    73dc:	607b      	str	r3, [r7, #4]
    73de:	f89d 301b 	ldrb.w	r3, [sp, #27]
    73e2:	429a      	cmp	r2, r3
    73e4:	f47f aef5 	bne.w	71d2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    73e8:	8abe      	ldrh	r6, [r7, #20]
    73ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    73ee:	1af6      	subs	r6, r6, r3
    73f0:	fab6 f686 	clz	r6, r6
    73f4:	0976      	lsrs	r6, r6, #5
    73f6:	e6cd      	b.n	7194 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    73f8:	2f00      	cmp	r7, #0
    73fa:	f47f aef2 	bne.w	71e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    73fe:	e76e      	b.n	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    7400:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    7404:	e70b      	b.n	721e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    7406:	2385      	movs	r3, #133	; 0x85
    7408:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    740a:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    740e:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    7412:	f8da 3000 	ldr.w	r3, [sl]
    7416:	2b00      	cmp	r3, #0
    7418:	d046      	beq.n	74a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    741a:	f10d 0213 	add.w	r2, sp, #19
    741e:	f10d 0116 	add.w	r1, sp, #22
    7422:	a805      	add	r0, sp, #20
    7424:	4798      	blx	r3
    7426:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    742a:	8163      	strh	r3, [r4, #10]
    742c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7430:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    7432:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7436:	7523      	strb	r3, [r4, #20]
    7438:	e73f      	b.n	72ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    743a:	bf00      	nop
    743c:	88888889 	.word	0x88888889
    7440:	20034730 	.word	0x20034730
      dirStream->type = EXFAT_TYPE_STREAM;
    7444:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    7446:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    744a:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    744c:	9b02      	ldr	r3, [sp, #8]
    744e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7452:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    7456:	693b      	ldr	r3, [r7, #16]
    7458:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    745a:	8abb      	ldrh	r3, [r7, #20]
    745c:	80a3      	strh	r3, [r4, #4]
}
    745e:	e72c      	b.n	72ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    7460:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    7464:	06d9      	lsls	r1, r3, #27
    7466:	f53f af3a 	bmi.w	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    746a:	f013 0101 	ands.w	r1, r3, #1
    746e:	f47f af36 	bne.w	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    7472:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    7476:	d089      	beq.n	738c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    7478:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    747c:	0792      	lsls	r2, r2, #30
    747e:	f57f af2e 	bpl.w	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    7482:	2b00      	cmp	r3, #0
    7484:	f43f af2b 	beq.w	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    7488:	e9d5 3200 	ldrd	r3, r2, [r5]
    748c:	4313      	orrs	r3, r2
    748e:	d004      	beq.n	749a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    7490:	2200      	movs	r2, #0
    7492:	2300      	movs	r3, #0
    m_curCluster = 0;
    7494:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    7496:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    749a:	4628      	mov	r0, r5
    749c:	f000 fb86 	bl	7bac <ExFatFile::truncate()>
    74a0:	2800      	cmp	r0, #0
    74a2:	f43f af1c 	beq.w	72de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    74a6:	e720      	b.n	72ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    74a8:	f645 0321 	movw	r3, #22561	; 0x5821
    74ac:	8163      	strh	r3, [r4, #10]
    74ae:	81e3      	strh	r3, [r4, #14]
    74b0:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    74b2:	e702      	b.n	72ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

000074b4 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    74b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    74b8:	2500      	movs	r5, #0
    74ba:	b097      	sub	sp, #92	; 0x5c
    74bc:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    74be:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    74c2:	9201      	str	r2, [sp, #4]
    74c4:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    74c6:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    74ca:	2b00      	cmp	r3, #0
    74cc:	d13e      	bne.n	754c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    74ce:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    74d2:	460f      	mov	r7, r1
    74d4:	f013 0f50 	tst.w	r3, #80	; 0x50
    74d8:	d038      	beq.n	754c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    74da:	7813      	ldrb	r3, [r2, #0]
    74dc:	4604      	mov	r4, r0
    74de:	4616      	mov	r6, r2
    74e0:	2b2f      	cmp	r3, #47	; 0x2f
    74e2:	d037      	beq.n	7554 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    74e4:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    74e8:	ab01      	add	r3, sp, #4
    74ea:	aa02      	add	r2, sp, #8
    74ec:	4631      	mov	r1, r6
    74ee:	4620      	mov	r0, r4
    74f0:	f7ff fc6a 	bl	6dc8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    74f4:	b350      	cbz	r0, 754c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    74f6:	9e01      	ldr	r6, [sp, #4]
    74f8:	7833      	ldrb	r3, [r6, #0]
    74fa:	2b00      	cmp	r3, #0
    74fc:	d03e      	beq.n	757c <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    74fe:	2300      	movs	r3, #0
    7500:	aa02      	add	r2, sp, #8
    7502:	4639      	mov	r1, r7
    7504:	4620      	mov	r0, r4
    7506:	f7ff fe09 	bl	711c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    750a:	b1f8      	cbz	r0, 754c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    750c:	46a4      	mov	ip, r4
    750e:	ad08      	add	r5, sp, #32
    7510:	f104 0730 	add.w	r7, r4, #48	; 0x30
    7514:	f8dc 0000 	ldr.w	r0, [ip]
    7518:	f10c 0c10 	add.w	ip, ip, #16
    751c:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    7520:	46ae      	mov	lr, r5
    7522:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    7526:	3510      	adds	r5, #16
    7528:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    752c:	45bc      	cmp	ip, r7
    752e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7532:	d1ef      	bne.n	7514 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    7534:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    7538:	af08      	add	r7, sp, #32
    tmpDir = *this;
    753a:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    753c:	4620      	mov	r0, r4
    753e:	f000 f9bf 	bl	78c0 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7542:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    7546:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    754a:	e7cd      	b.n	74e8 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    754c:	2000      	movs	r0, #0
}
    754e:	b017      	add	sp, #92	; 0x5c
    7550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    7554:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    7558:	292f      	cmp	r1, #47	; 0x2f
    755a:	d0fb      	beq.n	7554 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    755c:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    755e:	b9b1      	cbnz	r1, 758e <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    7560:	2238      	movs	r2, #56	; 0x38
    7562:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    7564:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    7566:	f00a fc27 	bl	11db8 <memset>
  m_flags = FILE_FLAG_READ;
    756a:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    756c:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    756e:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    7570:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    7572:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    7576:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    757a:	e7e8      	b.n	754e <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    757c:	464b      	mov	r3, r9
    757e:	aa02      	add	r2, sp, #8
    7580:	4639      	mov	r1, r7
    7582:	4620      	mov	r0, r4
    7584:	f7ff fdca 	bl	711c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    7588:	b017      	add	sp, #92	; 0x5c
    758a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    758e:	2238      	movs	r2, #56	; 0x38
    7590:	2100      	movs	r1, #0
    7592:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7594:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    7596:	f00a fc0f 	bl	11db8 <memset>
  m_flags = FILE_FLAG_READ;
    759a:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    759c:	af08      	add	r7, sp, #32
  m_vol = vol;
    759e:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    75a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    75a4:	2340      	movs	r3, #64	; 0x40
    75a6:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    75aa:	e79b      	b.n	74e4 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

000075ac <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    75ac:	b119      	cbz	r1, 75b6 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    75ae:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    75b2:	f7ff bf7f 	b.w	74b4 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    75b6:	4608      	mov	r0, r1
    75b8:	4770      	bx	lr
    75ba:	bf00      	nop

000075bc <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    75bc:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    75c0:	b963      	cbnz	r3, 75dc <ExFatFile::openNext(ExFatFile*, int)+0x20>
    75c2:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    75c6:	f013 0f50 	tst.w	r3, #80	; 0x50
    75ca:	d007      	beq.n	75dc <ExFatFile::openNext(ExFatFile*, int)+0x20>
    75cc:	680b      	ldr	r3, [r1, #0]
    75ce:	f013 0c1f 	ands.w	ip, r3, #31
    75d2:	d103      	bne.n	75dc <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    75d4:	4613      	mov	r3, r2
    75d6:	4662      	mov	r2, ip
    75d8:	f7ff bda0 	b.w	711c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    75dc:	2000      	movs	r0, #0
    75de:	4770      	bx	lr

000075e0 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    75e0:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    75e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75e4:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    75e6:	6a00      	ldr	r0, [r0, #32]
    75e8:	b101      	cbz	r1, 75ec <ExFatFile::addCluster()+0xc>
    75ea:	3101      	adds	r1, #1
    75ec:	2201      	movs	r2, #1
    75ee:	f000 fd51 	bl	8094 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    75f2:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    75f4:	4605      	mov	r5, r0
  if (find < 2) {
    75f6:	d932      	bls.n	765e <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    75f8:	2301      	movs	r3, #1
    75fa:	4601      	mov	r1, r0
    75fc:	6a20      	ldr	r0, [r4, #32]
    75fe:	461a      	mov	r2, r3
    7600:	f000 fda8 	bl	8154 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7604:	4606      	mov	r6, r0
    7606:	b350      	cbz	r0, 765e <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    7608:	69a3      	ldr	r3, [r4, #24]
    760a:	b35b      	cbz	r3, 7664 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    760c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    7610:	0651      	lsls	r1, r2, #25
    7612:	d512      	bpl.n	763a <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    7614:	1c59      	adds	r1, r3, #1
    7616:	42a9      	cmp	r1, r5
    7618:	d018      	beq.n	764c <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    761a:	f022 0240 	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    761e:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7620:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    7624:	e005      	b.n	7632 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    7626:	6a20      	ldr	r0, [r4, #32]
    7628:	f000 fe90 	bl	834c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    762c:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    762e:	b1b0      	cbz	r0, 765e <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    7630:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    7632:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    7634:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    7636:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    7638:	d3f5      	bcc.n	7626 <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    763a:	f04f 32ff 	mov.w	r2, #4294967295
    763e:	4629      	mov	r1, r5
    7640:	6a20      	ldr	r0, [r4, #32]
    7642:	f000 fe83 	bl	834c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7646:	b150      	cbz	r0, 765e <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    7648:	69a1      	ldr	r1, [r4, #24]
    764a:	b911      	cbnz	r1, 7652 <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    764c:	4630      	mov	r0, r6
  m_curCluster = find;
    764e:	61a5      	str	r5, [r4, #24]
}
    7650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    7652:	462a      	mov	r2, r5
    7654:	6a20      	ldr	r0, [r4, #32]
    7656:	f000 fe79 	bl	834c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    765a:	2800      	cmp	r0, #0
    765c:	d1f6      	bne.n	764c <ExFatFile::addCluster()+0x6c>
  return false;
    765e:	2600      	movs	r6, #0
}
    7660:	4630      	mov	r0, r6
    7662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7664:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    766c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    7670:	e7ec      	b.n	764c <ExFatFile::addCluster()+0x6c>
    7672:	bf00      	nop

00007674 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7674:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    7678:	079a      	lsls	r2, r3, #30
    767a:	d536      	bpl.n	76ea <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    767c:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    767e:	b570      	push	{r4, r5, r6, lr}
    7680:	4605      	mov	r5, r0
  if (m_firstCluster) {
    7682:	b9a1      	cbnz	r1, 76ae <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    7684:	2400      	movs	r4, #0
    7686:	4621      	mov	r1, r4
    7688:	e007      	b.n	769a <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    768a:	7803      	ldrb	r3, [r0, #0]
    768c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7690:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    7692:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    7696:	428b      	cmp	r3, r1
    7698:	d329      	bcc.n	76ee <ExFatFile::remove()+0x7a>
    769a:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    769c:	2201      	movs	r2, #1
    769e:	4628      	mov	r0, r5
    76a0:	f7ff fb32 	bl	6d08 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    76a4:	b2e1      	uxtb	r1, r4
    if (!cache) {
    76a6:	2800      	cmp	r0, #0
    76a8:	d1ef      	bne.n	768a <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    76aa:	2000      	movs	r0, #0
    76ac:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    76ae:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    76b0:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    76b2:	d534      	bpl.n	771e <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    76b4:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    76b8:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    76bc:	3309      	adds	r3, #9
    76be:	3a01      	subs	r2, #1
    76c0:	b2db      	uxtb	r3, r3
    76c2:	f144 34ff 	adc.w	r4, r4, #4294967295
    76c6:	f1c3 0c20 	rsb	ip, r3, #32
    76ca:	40da      	lsrs	r2, r3
    76cc:	3b20      	subs	r3, #32
    76ce:	fa04 fc0c 	lsl.w	ip, r4, ip
    76d2:	fa24 f303 	lsr.w	r3, r4, r3
    76d6:	ea42 020c 	orr.w	r2, r2, ip
    76da:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    76dc:	2300      	movs	r3, #0
    76de:	3201      	adds	r2, #1
    76e0:	f000 fd38 	bl	8154 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    76e4:	2800      	cmp	r0, #0
    76e6:	d1cd      	bne.n	7684 <ExFatFile::remove()+0x10>
    76e8:	e7df      	b.n	76aa <ExFatFile::remove()+0x36>
}
    76ea:	2000      	movs	r0, #0
    76ec:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    76ee:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    76f0:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    76f2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    76f6:	4620      	mov	r0, r4
  m_flags = 0;
    76f8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    76fc:	f005 fa02 	bl	cb04 <FsCache::sync()>
    7700:	2800      	cmp	r0, #0
    7702:	d0d2      	beq.n	76aa <ExFatFile::remove()+0x36>
    7704:	f504 7004 	add.w	r0, r4, #528	; 0x210
    7708:	f005 f9fc 	bl	cb04 <FsCache::sync()>
    770c:	2800      	cmp	r0, #0
    770e:	d0cc      	beq.n	76aa <ExFatFile::remove()+0x36>
    7710:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7714:	6803      	ldr	r3, [r0, #0]
}
    7716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    771a:	6a1b      	ldr	r3, [r3, #32]
    771c:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    771e:	f000 fe35 	bl	838c <ExFatPartition::freeChain(unsigned long)>
    7722:	2800      	cmp	r0, #0
    7724:	d1ae      	bne.n	7684 <ExFatFile::remove()+0x10>
    7726:	e7c0      	b.n	76aa <ExFatFile::remove()+0x36>

00007728 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    7728:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    772c:	06db      	lsls	r3, r3, #27
    772e:	d401      	bmi.n	7734 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    7730:	2000      	movs	r0, #0
}
    7732:	4770      	bx	lr
bool ExFatFile::rmdir() {
    7734:	b510      	push	{r4, lr}
    seekSet(0);
    7736:	2200      	movs	r2, #0
    7738:	b088      	sub	sp, #32
    773a:	2300      	movs	r3, #0
    773c:	4604      	mov	r4, r0
    773e:	f7ff fc77 	bl	7030 <ExFatFile::seekSet(unsigned long long)>
  }
    7742:	e008      	b.n	7756 <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    7744:	2820      	cmp	r0, #32
    7746:	d11b      	bne.n	7780 <ExFatFile::rmdir()+0x58>
    7748:	f99d 3000 	ldrsb.w	r3, [sp]
    774c:	f89d 2000 	ldrb.w	r2, [sp]
    7750:	2b00      	cmp	r3, #0
    7752:	db15      	blt.n	7780 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    7754:	b132      	cbz	r2, 7764 <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    7756:	2220      	movs	r2, #32
    7758:	4669      	mov	r1, sp
    775a:	4620      	mov	r0, r4
    775c:	f7ff fb82 	bl	6e64 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    7760:	2800      	cmp	r0, #0
    7762:	d1ef      	bne.n	7744 <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    7764:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    7768:	2208      	movs	r2, #8
  return remove();
    776a:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    776c:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    7770:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    7774:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    7778:	f7ff ff7c 	bl	7674 <ExFatFile::remove()>
}
    777c:	b008      	add	sp, #32
    777e:	bd10      	pop	{r4, pc}
  return false;
    7780:	2000      	movs	r0, #0
}
    7782:	b008      	add	sp, #32
    7784:	bd10      	pop	{r4, pc}
    7786:	bf00      	nop

00007788 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    7788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    778c:	f04f 0800 	mov.w	r8, #0
    7790:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    7792:	4f4a      	ldr	r7, [pc, #296]	; (78bc <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    7794:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    7796:	4644      	mov	r4, r8
    7798:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    779a:	2200      	movs	r2, #0
    779c:	4630      	mov	r0, r6
    779e:	f7ff fab3 	bl	6d08 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    77a2:	4605      	mov	r5, r0
    77a4:	b130      	cbz	r0, 77b4 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    77a6:	7801      	ldrb	r1, [r0, #0]
    77a8:	29c0      	cmp	r1, #192	; 0xc0
    77aa:	d069      	beq.n	7880 <ExFatFile::syncDir()+0xf8>
    77ac:	29c1      	cmp	r1, #193	; 0xc1
    77ae:	d02b      	beq.n	7808 <ExFatFile::syncDir()+0x80>
    77b0:	2985      	cmp	r1, #133	; 0x85
    77b2:	d009      	beq.n	77c8 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    77b4:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    77b8:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    77ba:	f043 0301 	orr.w	r3, r3, #1
    77be:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    77c2:	b002      	add	sp, #8
    77c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    77c8:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    77cc:	f003 0337 	and.w	r3, r3, #55	; 0x37
    77d0:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    77d2:	683b      	ldr	r3, [r7, #0]
    77d4:	b183      	cbz	r3, 77f8 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    77d6:	f10d 0203 	add.w	r2, sp, #3
    77da:	f10d 0106 	add.w	r1, sp, #6
    77de:	a801      	add	r0, sp, #4
    77e0:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    77e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    77e6:	81ab      	strh	r3, [r5, #12]
    77e8:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    77ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    77ee:	81eb      	strh	r3, [r5, #14]
    77f0:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    77f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    77f6:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    77f8:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    77fa:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    77fe:	f043 0301 	orr.w	r3, r3, #1
    7802:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    7806:	7829      	ldrb	r1, [r5, #0]
    7808:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    780c:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    780e:	fab0 f080 	clz	r0, r0
    7812:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7814:	e001      	b.n	781a <ExFatFile::syncDir()+0x92>
    7816:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    7818:	5ca9      	ldrb	r1, [r5, r2]
    781a:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    781c:	2a01      	cmp	r2, #1
    781e:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    7822:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    7826:	fa11 f383 	uxtah	r3, r1, r3
    782a:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    782c:	d101      	bne.n	7832 <ExFatFile::syncDir()+0xaa>
    782e:	2800      	cmp	r0, #0
    7830:	d1f1      	bne.n	7816 <ExFatFile::syncDir()+0x8e>
    7832:	2a1f      	cmp	r2, #31
    7834:	d9f0      	bls.n	7818 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    7836:	f108 0801 	add.w	r8, r8, #1
    783a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    783e:	fa5f f188 	uxtb.w	r1, r8
    7842:	428b      	cmp	r3, r1
    7844:	d2a9      	bcs.n	779a <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    7846:	2201      	movs	r2, #1
    7848:	f106 0124 	add.w	r1, r6, #36	; 0x24
    784c:	6a30      	ldr	r0, [r6, #32]
    784e:	f000 fcfd 	bl	824c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    7852:	2800      	cmp	r0, #0
    7854:	d0ae      	beq.n	77b4 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    7856:	6a35      	ldr	r5, [r6, #32]
    7858:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    785a:	4628      	mov	r0, r5
    785c:	f005 f952 	bl	cb04 <FsCache::sync()>
    7860:	2800      	cmp	r0, #0
    7862:	d0a7      	beq.n	77b4 <ExFatFile::syncDir()+0x2c>
    7864:	f505 7004 	add.w	r0, r5, #528	; 0x210
    7868:	f005 f94c 	bl	cb04 <FsCache::sync()>
    786c:	2800      	cmp	r0, #0
    786e:	d0a1      	beq.n	77b4 <ExFatFile::syncDir()+0x2c>
    7870:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    7874:	6803      	ldr	r3, [r0, #0]
    7876:	6a1b      	ldr	r3, [r3, #32]
    7878:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    787a:	2800      	cmp	r0, #0
    787c:	d1a1      	bne.n	77c2 <ExFatFile::syncDir()+0x3a>
    787e:	e799      	b.n	77b4 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    7880:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    7884:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    7888:	7843      	ldrb	r3, [r0, #1]
    788a:	bf14      	ite	ne
    788c:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    7890:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    7894:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    7896:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    789a:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    789e:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    78a2:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    78a6:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    78a8:	e9c5 0106 	strd	r0, r1, [r5, #24]
    78ac:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    78b0:	f043 0301 	orr.w	r3, r3, #1
    78b4:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    78b8:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    78ba:	e7a5      	b.n	7808 <ExFatFile::syncDir()+0x80>
    78bc:	20034730 	.word	0x20034730

000078c0 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    78c0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    78c2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    78c6:	b343      	cbz	r3, 791a <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    78c8:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    78cc:	4604      	mov	r4, r0
    78ce:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    78d2:	2a00      	cmp	r2, #0
    78d4:	db0c      	blt.n	78f0 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    78d6:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    78d8:	4628      	mov	r0, r5
    78da:	f005 f913 	bl	cb04 <FsCache::sync()>
    78de:	b978      	cbnz	r0, 7900 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    78e0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    78e4:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    78e6:	f043 0301 	orr.w	r3, r3, #1
    78ea:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    78ee:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    78f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    78f4:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    78f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    78fc:	f7ff bf44 	b.w	7788 <ExFatFile::syncDir()>
    7900:	f505 7004 	add.w	r0, r5, #528	; 0x210
    7904:	f005 f8fe 	bl	cb04 <FsCache::sync()>
    7908:	2800      	cmp	r0, #0
    790a:	d0e9      	beq.n	78e0 <ExFatFile::sync()+0x20>
    790c:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    7910:	6803      	ldr	r3, [r0, #0]
    7912:	6a1b      	ldr	r3, [r3, #32]
    7914:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7916:	2800      	cmp	r0, #0
    7918:	d0e2      	beq.n	78e0 <ExFatFile::sync()+0x20>
    return true;
    791a:	2001      	movs	r0, #1
}
    791c:	bd38      	pop	{r3, r4, r5, pc}
    791e:	bf00      	nop

00007920 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    7920:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7922:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    7926:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7928:	065a      	lsls	r2, r3, #25
    792a:	d44c      	bmi.n	79c6 <ExFatFile::addDirCluster()+0xa6>
    792c:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    792e:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    7930:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    7934:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    7936:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    793a:	d301      	bcc.n	7940 <ExFatFile::addDirCluster()+0x20>
}
    793c:	2000      	movs	r0, #0
    793e:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    7940:	4628      	mov	r0, r5
    7942:	f7ff fe4d 	bl	75e0 <ExFatFile::addCluster()>
    7946:	2800      	cmp	r0, #0
    7948:	d0f8      	beq.n	793c <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    794a:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    794c:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    794e:	69ae      	ldr	r6, [r5, #24]
    7950:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    7954:	3e02      	subs	r6, #2
    7956:	409e      	lsls	r6, r3
    7958:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    795c:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    795e:	1931      	adds	r1, r6, r4
    7960:	2205      	movs	r2, #5
    7962:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7966:	3401      	adds	r4, #1
    7968:	f005 f8f8 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    796c:	f44f 7200 	mov.w	r2, #512	; 0x200
    7970:	2100      	movs	r1, #0
    if (!cache) {
    7972:	2800      	cmp	r0, #0
    7974:	d0e2      	beq.n	793c <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    7976:	f00a fa1f 	bl	11db8 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    797a:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    797c:	2301      	movs	r3, #1
    797e:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    7982:	4093      	lsls	r3, r2
    7984:	429c      	cmp	r4, r3
    7986:	d3ea      	bcc.n	795e <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    7988:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    798c:	065b      	lsls	r3, r3, #25
    798e:	d415      	bmi.n	79bc <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7990:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    7994:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    7998:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    799c:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    79a0:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    79a4:	189b      	adds	r3, r3, r2
    79a6:	f141 0000 	adc.w	r0, r1, #0
    79aa:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    79ac:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    79b0:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    79b2:	189b      	adds	r3, r3, r2
    79b4:	f141 0100 	adc.w	r1, r1, #0
    79b8:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    79bc:	4628      	mov	r0, r5
}
    79be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    79c2:	f7ff bf7d 	b.w	78c0 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    79c6:	6a00      	ldr	r0, [r0, #32]
    79c8:	f000 fde6 	bl	8598 <ExFatPartition::rootLength()>
    79cc:	e7af      	b.n	792e <ExFatFile::addDirCluster()+0xe>
    79ce:	bf00      	nop

000079d0 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    79d0:	b570      	push	{r4, r5, r6, lr}
    79d2:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    79d4:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    79d8:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    79da:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    79dc:	f010 0f18 	tst.w	r0, #24
    79e0:	930c      	str	r3, [sp, #48]	; 0x30
    79e2:	931a      	str	r3, [sp, #104]	; 0x68
    79e4:	d003      	beq.n	79ee <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    79e6:	6a20      	ldr	r0, [r4, #32]
    79e8:	6a0b      	ldr	r3, [r1, #32]
    79ea:	4298      	cmp	r0, r3
    79ec:	d002      	beq.n	79f4 <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    79ee:	2000      	movs	r0, #0
}
    79f0:	b01c      	add	sp, #112	; 0x70
    79f2:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    79f4:	f640 2301 	movw	r3, #2561	; 0xa01
    79f8:	4668      	mov	r0, sp
    79fa:	f7ff fd5b 	bl	74b4 <ExFatFile::open(ExFatFile*, char const*, int)>
    79fe:	2800      	cmp	r0, #0
    7a00:	d0f5      	beq.n	79ee <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    7a02:	46a4      	mov	ip, r4
    7a04:	f104 0630 	add.w	r6, r4, #48	; 0x30
    7a08:	ad0e      	add	r5, sp, #56	; 0x38
    7a0a:	f8dc 0000 	ldr.w	r0, [ip]
    7a0e:	f10c 0c10 	add.w	ip, ip, #16
    7a12:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    7a16:	46ae      	mov	lr, r5
    7a18:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    7a1c:	3510      	adds	r5, #16
    7a1e:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    7a22:	45b4      	cmp	ip, r6
    7a24:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7a28:	d1ef      	bne.n	7a0a <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    7a2a:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    7a2e:	aa09      	add	r2, sp, #36	; 0x24
    7a30:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    7a34:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    7a36:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    7a3a:	ca07      	ldmia	r2, {r0, r1, r2}
    7a3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7a40:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7a44:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    7a46:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7a4e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7a52:	f7ff ff35 	bl	78c0 <ExFatFile::sync()>
    7a56:	2800      	cmp	r0, #0
    7a58:	d0c9      	beq.n	79ee <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    7a5a:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    7a5c:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    7a5e:	2308      	movs	r3, #8
  return oldFile.remove();
    7a60:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    7a62:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    7a64:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    7a68:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    7a6c:	f7ff fe02 	bl	7674 <ExFatFile::remove()>
    7a70:	e7be      	b.n	79f0 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    7a72:	bf00      	nop

00007a74 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    7a74:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    7a76:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    7a7a:	f013 0f50 	tst.w	r3, #80	; 0x50
    7a7e:	d102      	bne.n	7a86 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    7a80:	2500      	movs	r5, #0
}
    7a82:	4628      	mov	r0, r5
    7a84:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7a86:	f640 2302 	movw	r3, #2562	; 0xa02
    7a8a:	4604      	mov	r4, r0
    7a8c:	f7ff fb46 	bl	711c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    7a90:	2800      	cmp	r0, #0
    7a92:	d0f5      	beq.n	7a80 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    7a94:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    7a96:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    7a98:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    7a9c:	f7ff ff40 	bl	7920 <ExFatFile::addDirCluster()>
    7aa0:	4605      	mov	r5, r0
    7aa2:	2800      	cmp	r0, #0
    7aa4:	d0ec      	beq.n	7a80 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    7aa6:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    7aa8:	2200      	movs	r2, #0
    7aaa:	2300      	movs	r3, #0
    7aac:	4620      	mov	r0, r4
    7aae:	61e1      	str	r1, [r4, #28]
    7ab0:	f7ff fabe 	bl	7030 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7ab4:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    7ab6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7aba:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    7abe:	2b00      	cmp	r3, #0
    7ac0:	d0df      	beq.n	7a82 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7ac2:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    7ac4:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7ac6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    7aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    7ace:	f7ff be5b 	b.w	7788 <ExFatFile::syncDir()>
    7ad2:	bf00      	nop

00007ad4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    7ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ad6:	2500      	movs	r5, #0
    7ad8:	b097      	sub	sp, #92	; 0x5c
    7ada:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    7adc:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    7ae0:	9201      	str	r2, [sp, #4]
    7ae2:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    7ae6:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    7ae8:	2b00      	cmp	r3, #0
    7aea:	d146      	bne.n	7b7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    7aec:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    7af0:	460e      	mov	r6, r1
    7af2:	f013 0f50 	tst.w	r3, #80	; 0x50
    7af6:	d040      	beq.n	7b7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    7af8:	7813      	ldrb	r3, [r2, #0]
    7afa:	4604      	mov	r4, r0
    7afc:	4611      	mov	r1, r2
    7afe:	2b2f      	cmp	r3, #47	; 0x2f
    7b00:	d03e      	beq.n	7b80 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    7b02:	ab01      	add	r3, sp, #4
    7b04:	aa02      	add	r2, sp, #8
    7b06:	4620      	mov	r0, r4
    7b08:	f7ff f95e 	bl	6dc8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7b0c:	2800      	cmp	r0, #0
    7b0e:	d034      	beq.n	7b7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    7b10:	9b01      	ldr	r3, [sp, #4]
    7b12:	781b      	ldrb	r3, [r3, #0]
    7b14:	2b00      	cmp	r3, #0
    7b16:	d041      	beq.n	7b9c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    7b18:	2300      	movs	r3, #0
    7b1a:	aa02      	add	r2, sp, #8
    7b1c:	4631      	mov	r1, r6
    7b1e:	4620      	mov	r0, r4
    7b20:	f7ff fafc 	bl	711c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    7b24:	b930      	cbnz	r0, 7b34 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    7b26:	b347      	cbz	r7, 7b7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    7b28:	aa02      	add	r2, sp, #8
    7b2a:	4631      	mov	r1, r6
    7b2c:	4620      	mov	r0, r4
    7b2e:	f7ff ffa1 	bl	7a74 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    7b32:	b310      	cbz	r0, 7b7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    7b34:	46a4      	mov	ip, r4
    7b36:	ad08      	add	r5, sp, #32
    7b38:	f104 0630 	add.w	r6, r4, #48	; 0x30
    7b3c:	f8dc 0000 	ldr.w	r0, [ip]
    7b40:	f10c 0c10 	add.w	ip, ip, #16
    7b44:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    7b48:	46ae      	mov	lr, r5
    7b4a:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    7b4e:	3510      	adds	r5, #16
    7b50:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    7b54:	45b4      	cmp	ip, r6
    7b56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7b5a:	d1ef      	bne.n	7b3c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    7b5c:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    7b60:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    7b62:	6028      	str	r0, [r5, #0]
    close();
    7b64:	4620      	mov	r0, r4
    7b66:	f7ff f8ed 	bl	6d44 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    7b6a:	9901      	ldr	r1, [sp, #4]
    7b6c:	ab01      	add	r3, sp, #4
    7b6e:	aa02      	add	r2, sp, #8
    7b70:	4620      	mov	r0, r4
    7b72:	f7ff f929 	bl	6dc8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7b76:	2800      	cmp	r0, #0
    7b78:	d1ca      	bne.n	7b10 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    7b7a:	2000      	movs	r0, #0
}
    7b7c:	b017      	add	sp, #92	; 0x5c
    7b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    7b80:	3101      	adds	r1, #1
    7b82:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    7b84:	780b      	ldrb	r3, [r1, #0]
    7b86:	2b2f      	cmp	r3, #47	; 0x2f
    7b88:	d0fa      	beq.n	7b80 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7b8a:	6a31      	ldr	r1, [r6, #32]
    7b8c:	a808      	add	r0, sp, #32
    7b8e:	f7ff f907 	bl	6da0 <ExFatFile::openRoot(ExFatVolume*)>
    7b92:	2800      	cmp	r0, #0
    7b94:	d0f1      	beq.n	7b7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    7b96:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    7b98:	ae08      	add	r6, sp, #32
    7b9a:	e7b2      	b.n	7b02 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    7b9c:	aa02      	add	r2, sp, #8
    7b9e:	4631      	mov	r1, r6
    7ba0:	4620      	mov	r0, r4
    7ba2:	f7ff ff67 	bl	7a74 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    7ba6:	b017      	add	sp, #92	; 0x5c
    7ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7baa:	bf00      	nop

00007bac <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7bac:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    7bb0:	079a      	lsls	r2, r3, #30
    7bb2:	d562      	bpl.n	7c7a <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    7bb4:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    7bb6:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    7bb8:	b082      	sub	sp, #8
    7bba:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    7bbc:	b3a5      	cbz	r5, 7c28 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    7bbe:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    7bc2:	d034      	beq.n	7c2e <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7bc4:	6a00      	ldr	r0, [r0, #32]
    7bc6:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7bc8:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    7bcc:	3a01      	subs	r2, #1
    7bce:	68e1      	ldr	r1, [r4, #12]
    7bd0:	f10c 0c09 	add.w	ip, ip, #9
    7bd4:	f141 31ff 	adc.w	r1, r1, #4294967295
    7bd8:	fa5f fc8c 	uxtb.w	ip, ip
    7bdc:	f1cc 0e20 	rsb	lr, ip, #32
    7be0:	fa22 f20c 	lsr.w	r2, r2, ip
    7be4:	f1ac 0c20 	sub.w	ip, ip, #32
    7be8:	fa01 fe0e 	lsl.w	lr, r1, lr
    7bec:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    7bf0:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7bf2:	ea42 020e 	orr.w	r2, r2, lr
    7bf6:	ea42 020c 	orr.w	r2, r2, ip
    7bfa:	3201      	adds	r2, #1
    if (m_curCluster) {
    7bfc:	b319      	cbz	r1, 7c46 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    7bfe:	3d01      	subs	r5, #1
    7c00:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    7c02:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    7c04:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    7c06:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    7c08:	bb72      	cbnz	r2, 7c68 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7c0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    7c0e:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    7c10:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7c14:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    7c18:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    7c1c:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    7c20:	f7ff fe4e 	bl	78c0 <ExFatFile::sync()>

 fail:
  return false;
}
    7c24:	b002      	add	sp, #8
    7c26:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    7c28:	2001      	movs	r0, #1
}
    7c2a:	b002      	add	sp, #8
    7c2c:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    7c2e:	6981      	ldr	r1, [r0, #24]
    7c30:	b961      	cbnz	r1, 7c4c <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    7c32:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    7c34:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    7c36:	4629      	mov	r1, r5
    7c38:	6a20      	ldr	r0, [r4, #32]
    7c3a:	f000 fba7 	bl	838c <ExFatPartition::freeChain(unsigned long)>
    7c3e:	b1c8      	cbz	r0, 7c74 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7c40:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7c44:	e7e1      	b.n	7c0a <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    7c46:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    7c48:	61e1      	str	r1, [r4, #28]
    7c4a:	e7dd      	b.n	7c08 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7c4c:	aa01      	add	r2, sp, #4
    7c4e:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    7c50:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7c52:	f000 fb59 	bl	8308 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    7c56:	2800      	cmp	r0, #0
    7c58:	db0c      	blt.n	7c74 <ExFatFile::truncate()+0xc8>
      if (fg) {
    7c5a:	d110      	bne.n	7c7e <ExFatFile::truncate()+0xd2>
    if (toFree) {
    7c5c:	9d01      	ldr	r5, [sp, #4]
    7c5e:	2d00      	cmp	r5, #0
    7c60:	d1e9      	bne.n	7c36 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7c62:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7c66:	e7d0      	b.n	7c0a <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    7c68:	2300      	movs	r3, #0
    7c6a:	9901      	ldr	r1, [sp, #4]
    7c6c:	f000 fa72 	bl	8154 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7c70:	2800      	cmp	r0, #0
    7c72:	d1e5      	bne.n	7c40 <ExFatFile::truncate()+0x94>
  return false;
    7c74:	2000      	movs	r0, #0
}
    7c76:	b002      	add	sp, #8
    7c78:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    7c7a:	2000      	movs	r0, #0
}
    7c7c:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    7c7e:	f04f 32ff 	mov.w	r2, #4294967295
    7c82:	69a1      	ldr	r1, [r4, #24]
    7c84:	6a20      	ldr	r0, [r4, #32]
    7c86:	f000 fb61 	bl	834c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7c8a:	2800      	cmp	r0, #0
    7c8c:	d1e6      	bne.n	7c5c <ExFatFile::truncate()+0xb0>
    7c8e:	e7f1      	b.n	7c74 <ExFatFile::truncate()+0xc8>

00007c90 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    7c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7c94:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    7c98:	b083      	sub	sp, #12
    7c9a:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    7c9c:	079d      	lsls	r5, r3, #30
    7c9e:	f140 80a1 	bpl.w	7de4 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7ca2:	4691      	mov	r9, r2
    7ca4:	071a      	lsls	r2, r3, #28
    7ca6:	460e      	mov	r6, r1
    7ca8:	f100 8095 	bmi.w	7dd6 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    7cac:	f1b9 0f00 	cmp.w	r9, #0
    7cb0:	f000 8128 	beq.w	7f04 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    7cb4:	6823      	ldr	r3, [r4, #0]
    7cb6:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7cb8:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    7cba:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7cbc:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    7cc0:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    7cc4:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    7cc8:	f1b8 0f00 	cmp.w	r8, #0
    7ccc:	f040 8094 	bne.w	7df8 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    7cd0:	2900      	cmp	r1, #0
    7cd2:	f000 80d4 	beq.w	7e7e <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    7cd6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7cda:	065b      	lsls	r3, r3, #25
    7cdc:	f140 80ec 	bpl.w	7eb8 <ExFatFile::write(void const*, unsigned int)+0x228>
    7ce0:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    7ce4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7ce8:	f10c 0c09 	add.w	ip, ip, #9
    7cec:	3b01      	subs	r3, #1
    7cee:	fa5f fc8c 	uxtb.w	ip, ip
    7cf2:	f142 32ff 	adc.w	r2, r2, #4294967295
    7cf6:	f1cc 0e20 	rsb	lr, ip, #32
    7cfa:	fa23 f30c 	lsr.w	r3, r3, ip
    7cfe:	f1ac 0c20 	sub.w	ip, ip, #32
    7d02:	fa02 fe0e 	lsl.w	lr, r2, lr
    7d06:	fa22 fc0c 	lsr.w	ip, r2, ip
    7d0a:	69e2      	ldr	r2, [r4, #28]
    7d0c:	ea43 030e 	orr.w	r3, r3, lr
    7d10:	ea43 030c 	orr.w	r3, r3, ip
    7d14:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    7d16:	4299      	cmp	r1, r3
    7d18:	f080 80d5 	bcs.w	7ec6 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    7d1c:	3101      	adds	r1, #1
    7d1e:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    7d20:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    7d24:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    7d26:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    7d2a:	4091      	lsls	r1, r2
    7d2c:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    7d2e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    7d32:	f0c0 808a 	bcc.w	7e4a <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    7d36:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    7d3a:	f0c0 80a6 	bcc.w	7e8a <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    7d3e:	2301      	movs	r3, #1
    7d40:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    7d42:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    7d44:	eba3 0308 	sub.w	r3, r3, r8
    7d48:	4293      	cmp	r3, r2
    7d4a:	bf28      	it	cs
    7d4c:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    7d4e:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    7d52:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    7d54:	ea4f 2843 	mov.w	r8, r3, lsl #9
    7d58:	d309      	bcc.n	7d6e <ExFatFile::write(void const*, unsigned int)+0xde>
    7d5a:	185f      	adds	r7, r3, r1
    7d5c:	42ba      	cmp	r2, r7
    7d5e:	d206      	bcs.n	7d6e <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    7d60:	2200      	movs	r2, #0
    7d62:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    7d66:	f04f 32ff 	mov.w	r2, #4294967295
    7d6a:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    7d6e:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    7d72:	4632      	mov	r2, r6
    7d74:	6807      	ldr	r7, [r0, #0]
    7d76:	6abf      	ldr	r7, [r7, #40]	; 0x28
    7d78:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    7d7a:	b398      	cbz	r0, 7de4 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    7d7c:	4643      	mov	r3, r8
    src += n;
    7d7e:	4446      	add	r6, r8
    toWrite -= n;
    7d80:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    7d84:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    7d88:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    7d8c:	19db      	adds	r3, r3, r7
    7d8e:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    7d92:	4298      	cmp	r0, r3
    7d94:	4191      	sbcs	r1, r2
    m_curPosition += n;
    7d96:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    7d9a:	d207      	bcs.n	7dac <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    7d9c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    7da0:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    7da4:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    7da8:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    7dac:	2d00      	cmp	r5, #0
    7dae:	d183      	bne.n	7cb8 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    7db0:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    7db4:	4298      	cmp	r0, r3
    7db6:	4191      	sbcs	r1, r2
    7db8:	f0c0 8096 	bcc.w	7ee8 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    7dbc:	4b53      	ldr	r3, [pc, #332]	; (7f0c <ExFatFile::write(void const*, unsigned int)+0x27c>)
    7dbe:	681b      	ldr	r3, [r3, #0]
    7dc0:	2b00      	cmp	r3, #0
    7dc2:	f000 809d 	beq.w	7f00 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7dc6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7dca:	4648      	mov	r0, r9
    7dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7dd0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    7dd4:	e00d      	b.n	7df2 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    7dd6:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    7dda:	f7ff f929 	bl	7030 <ExFatFile::seekSet(unsigned long long)>
    7dde:	2800      	cmp	r0, #0
    7de0:	f47f af64 	bne.w	7cac <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7de4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    7de8:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7dea:	f043 0301 	orr.w	r3, r3, #1
    7dee:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    7df2:	b003      	add	sp, #12
    7df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    7df8:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    7dfc:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    7dfe:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    7e02:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    7e06:	4091      	lsls	r1, r2
    7e08:	4441      	add	r1, r8
    7e0a:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    7e0c:	2f00      	cmp	r7, #0
    7e0e:	d08e      	beq.n	7d2e <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    7e10:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    7e14:	2201      	movs	r2, #1
    7e16:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7e1a:	45a8      	cmp	r8, r5
    7e1c:	bf28      	it	cs
    7e1e:	46a8      	movcs	r8, r5
    7e20:	f004 fe9c 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    7e24:	2800      	cmp	r0, #0
    7e26:	d0dd      	beq.n	7de4 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    7e28:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7e2a:	4447      	add	r7, r8
      memcpy(dst, src, n);
    7e2c:	4642      	mov	r2, r8
    7e2e:	4631      	mov	r1, r6
    7e30:	f005 ff34 	bl	dc9c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7e34:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    7e38:	6a20      	ldr	r0, [r4, #32]
    7e3a:	d19f      	bne.n	7d7c <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    7e3c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7e40:	f004 fe60 	bl	cb04 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    7e44:	2800      	cmp	r0, #0
    7e46:	d199      	bne.n	7d7c <ExFatFile::write(void const*, unsigned int)+0xec>
    7e48:	e7cc      	b.n	7de4 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    7e4a:	6862      	ldr	r2, [r4, #4]
    7e4c:	6963      	ldr	r3, [r4, #20]
    7e4e:	9200      	str	r2, [sp, #0]
    7e50:	9301      	str	r3, [sp, #4]
    7e52:	6922      	ldr	r2, [r4, #16]
    7e54:	6823      	ldr	r3, [r4, #0]
    7e56:	4293      	cmp	r3, r2
    7e58:	e9dd 2300 	ldrd	r2, r3, [sp]
    7e5c:	419a      	sbcs	r2, r3
    7e5e:	d212      	bcs.n	7e86 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7e60:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    7e62:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7e66:	f004 fe79 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    7e6a:	2800      	cmp	r0, #0
    7e6c:	d0ba      	beq.n	7de4 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    7e6e:	462a      	mov	r2, r5
    7e70:	4631      	mov	r1, r6
    7e72:	4438      	add	r0, r7
    m_curPosition += n;
    7e74:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    7e76:	f005 ff11 	bl	dc9c <memcpy>
    m_curPosition += n;
    7e7a:	462b      	mov	r3, r5
    7e7c:	e77f      	b.n	7d7e <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    7e7e:	69e1      	ldr	r1, [r4, #28]
    7e80:	b349      	cbz	r1, 7ed6 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    7e82:	61a1      	str	r1, [r4, #24]
    7e84:	e74c      	b.n	7d20 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7e86:	2205      	movs	r2, #5
    7e88:	e7eb      	b.n	7e62 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    7e8a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    7e8e:	428b      	cmp	r3, r1
    7e90:	d106      	bne.n	7ea0 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    7e92:	2300      	movs	r3, #0
    7e94:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    7e98:	f04f 33ff 	mov.w	r3, #4294967295
    7e9c:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    7ea0:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    7ea4:	4632      	mov	r2, r6
    7ea6:	6803      	ldr	r3, [r0, #0]
    7ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7eaa:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    7eac:	2800      	cmp	r0, #0
    7eae:	d099      	beq.n	7de4 <ExFatFile::write(void const*, unsigned int)+0x154>
    7eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    7eb4:	4698      	mov	r8, r3
    7eb6:	e762      	b.n	7d7e <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7eb8:	f104 0218 	add.w	r2, r4, #24
    7ebc:	f000 fa24 	bl	8308 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7ec0:	2800      	cmp	r0, #0
    7ec2:	db8f      	blt.n	7de4 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    7ec4:	d104      	bne.n	7ed0 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    7ec6:	4620      	mov	r0, r4
    7ec8:	f7ff fb8a 	bl	75e0 <ExFatFile::addCluster()>
    7ecc:	2800      	cmp	r0, #0
    7ece:	d089      	beq.n	7de4 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    7ed0:	69a1      	ldr	r1, [r4, #24]
    7ed2:	6a20      	ldr	r0, [r4, #32]
    7ed4:	e724      	b.n	7d20 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    7ed6:	4620      	mov	r0, r4
    7ed8:	f7ff fb82 	bl	75e0 <ExFatFile::addCluster()>
    7edc:	2800      	cmp	r0, #0
    7ede:	d081      	beq.n	7de4 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    7ee0:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    7ee2:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    7ee4:	61e1      	str	r1, [r4, #28]
    7ee6:	e71b      	b.n	7d20 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7ee8:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    7eec:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    7eee:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7ef2:	f061 037f 	orn	r3, r1, #127	; 0x7f
    7ef6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    7efa:	b003      	add	sp, #12
    7efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7f00:	4648      	mov	r0, r9
    7f02:	e776      	b.n	7df2 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    7f04:	e9d4 3200 	ldrd	r3, r2, [r4]
    7f08:	e752      	b.n	7db0 <ExFatFile::write(void const*, unsigned int)+0x120>
    7f0a:	bf00      	nop
    7f0c:	20034730 	.word	0x20034730

00007f10 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    7f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f14:	460c      	mov	r4, r1
    7f16:	4615      	mov	r5, r2
    7f18:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    7f1c:	89ab      	ldrh	r3, [r5, #12]
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    7f1e:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    7f20:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    7f24:	b91b      	cbnz	r3, 7f2e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    7f26:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    7f2a:	429a      	cmp	r2, r3
    7f2c:	d00e      	beq.n	7f4c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    7f2e:	f004 fe3d 	bl	cbac <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    7f32:	f004 feff 	bl	cd34 <toUpcase(unsigned short)>
    7f36:	4606      	mov	r6, r0
    7f38:	4638      	mov	r0, r7
    7f3a:	f004 fefb 	bl	cd34 <toUpcase(unsigned short)>
    7f3e:	4286      	cmp	r6, r0
    7f40:	d109      	bne.n	7f56 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    7f42:	4544      	cmp	r4, r8
    7f44:	d1ea      	bne.n	7f1c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    7f46:	2001      	movs	r0, #1
}
    7f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    7f4c:	fab7 f087 	clz	r0, r7
    7f50:	0940      	lsrs	r0, r0, #5
}
    7f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    7f56:	2000      	movs	r0, #0
}
    7f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007f5c <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    7f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    7f60:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    7f64:	b083      	sub	sp, #12
    7f66:	4688      	mov	r8, r1
  if (!isOpen()) {
    7f68:	2b00      	cmp	r3, #0
    7f6a:	d04f      	beq.n	800c <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    7f6c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    7f70:	4607      	mov	r7, r0
    7f72:	2b01      	cmp	r3, #1
    7f74:	d953      	bls.n	801e <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7f76:	3a01      	subs	r2, #1
  char* str = name;
    7f78:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    7f7a:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    7f7e:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7f80:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    7f82:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8024 <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    7f86:	2200      	movs	r2, #0
    7f88:	4651      	mov	r1, sl
    7f8a:	4638      	mov	r0, r7
    7f8c:	9301      	str	r3, [sp, #4]
    7f8e:	f7fe febb 	bl	6d08 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    7f92:	2800      	cmp	r0, #0
    7f94:	d03a      	beq.n	800c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    7f96:	7802      	ldrb	r2, [r0, #0]
    7f98:	2ac1      	cmp	r2, #193	; 0xc1
    7f9a:	d137      	bne.n	800c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    7f9c:	4605      	mov	r5, r0
    7f9e:	f100 091e 	add.w	r9, r0, #30
    7fa2:	9b01      	ldr	r3, [sp, #4]
    7fa4:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    7fa8:	b324      	cbz	r4, 7ff4 <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    7faa:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    7fae:	b292      	uxth	r2, r2
    7fb0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    7fb4:	d22a      	bcs.n	800c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    7fb6:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    7fba:	f3c0 0009 	ubfx	r0, r0, #0, #10
    7fbe:	4320      	orrs	r0, r4
    7fc0:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7fc4:	4619      	mov	r1, r3
    7fc6:	4632      	mov	r2, r6
    7fc8:	f004 fe16 	bl	cbf8 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    7fcc:	4603      	mov	r3, r0
    7fce:	b1e8      	cbz	r0, 800c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    7fd0:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    7fd2:	454d      	cmp	r5, r9
    7fd4:	d1e6      	bne.n	7fa4 <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    7fd6:	f10a 0a01 	add.w	sl, sl, #1
    7fda:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    7fde:	fa5f fa8a 	uxtb.w	sl, sl
    7fe2:	4552      	cmp	r2, sl
    7fe4:	d2cf      	bcs.n	7f86 <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    7fe6:	eba3 0008 	sub.w	r0, r3, r8
    7fea:	4698      	mov	r8, r3
  *str = '\0';
    7fec:	2300      	movs	r3, #0
    7fee:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    7ff2:	e00f      	b.n	8014 <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    7ff4:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    7ff8:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    7ffa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    7ffe:	d302      	bcc.n	8006 <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    8000:	2800      	cmp	r0, #0
    8002:	d1df      	bne.n	7fc4 <ExFatFile::getName8(char*, unsigned int)+0x68>
    8004:	e7ef      	b.n	7fe6 <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    8006:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    800a:	d306      	bcc.n	801a <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    800c:	2300      	movs	r3, #0
  return 0;
    800e:	4618      	mov	r0, r3
  *name = 0;
    8010:	f888 3000 	strb.w	r3, [r8]
}
    8014:	b003      	add	sp, #12
    8016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    801a:	4604      	mov	r4, r0
    801c:	e7d9      	b.n	7fd2 <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    801e:	2000      	movs	r0, #0
    8020:	e7e4      	b.n	7fec <ExFatFile::getName8(char*, unsigned int)+0x90>
    8022:	bf00      	nop
    8024:	000ffc00 	.word	0x000ffc00

00008028 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    8028:	b570      	push	{r4, r5, r6, lr}
    802a:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    802c:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    802e:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    8032:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    8034:	4619      	mov	r1, r3
  uint16_t hash = 0;
    8036:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    8038:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    803a:	6123      	str	r3, [r4, #16]
    next = begin;
    803c:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    803e:	e017      	b.n	8070 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    8040:	f004 fdb4 	bl	cbac <FsName::get16()>
    if (u == 0XFFFF) {
    8044:	42a8      	cmp	r0, r5
    8046:	d022      	beq.n	808e <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    8048:	f004 fe74 	bl	cd34 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    804c:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    804e:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    8050:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    8052:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    8054:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    8058:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    805a:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    805c:	fa52 f080 	uxtab	r0, r2, r0
    8060:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    8062:	f3c0 004e 	ubfx	r0, r0, #1, #15
    8066:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    806a:	fa16 f080 	uxtah	r0, r6, r0
    806e:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    8070:	4620      	mov	r0, r4
    8072:	2900      	cmp	r1, #0
    8074:	d1e4      	bne.n	8040 <ExFatFile::hashName(ExName_t*)+0x18>
    8076:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    807a:	429a      	cmp	r2, r3
    807c:	d1e0      	bne.n	8040 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    807e:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    8080:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    8082:	3801      	subs	r0, #1
    8084:	28fe      	cmp	r0, #254	; 0xfe
    8086:	bf8c      	ite	hi
    8088:	2000      	movhi	r0, #0
    808a:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    808c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    808e:	2000      	movs	r0, #0
}
    8090:	bd70      	pop	{r4, r5, r6, pc}
    8092:	bf00      	nop

00008094 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    8094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8098:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    809a:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    809c:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    809e:	2900      	cmp	r1, #0
    80a0:	d042      	beq.n	8128 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    80a2:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    80a6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    80aa:	4543      	cmp	r3, r8
    80ac:	d942      	bls.n	8134 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    80ae:	f008 0307 	and.w	r3, r8, #7
    80b2:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    80b4:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    80b8:	409d      	lsls	r5, r3
    80ba:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    80bc:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    80be:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    80c0:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    80c4:	2200      	movs	r2, #0
    80c6:	4638      	mov	r0, r7
    80c8:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    80cc:	f004 fd46 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    80d0:	b1e8      	cbz	r0, 810e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    80d2:	f10b 3bff 	add.w	fp, fp, #4294967295
    80d6:	4483      	add	fp, r0
    80d8:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    80dc:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    80e0:	e00a      	b.n	80f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    80e2:	454a      	cmp	r2, r9
    80e4:	d02b      	beq.n	813e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    80e6:	45a0      	cmp	r8, r4
    80e8:	d010      	beq.n	810c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    80ea:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    80ee:	42a5      	cmp	r5, r4
    80f0:	d914      	bls.n	811c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    80f2:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    80f6:	d00c      	beq.n	8112 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    80f8:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    80fa:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    80fc:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    8100:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    8104:	d0ed      	beq.n	80e2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    8106:	45a0      	cmp	r8, r4
        endAlloc++;
    8108:	4626      	mov	r6, r4
        if (endAlloc == start) {
    810a:	d1ee      	bne.n	80ea <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    810c:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    810e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    8112:	4558      	cmp	r0, fp
      mask = 1;
    8114:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    8118:	d1e0      	bne.n	80dc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    811a:	e001      	b.n	8120 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    811c:	2600      	movs	r6, #0
    811e:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    8120:	2501      	movs	r5, #1
    i = 0;
    8122:	f04f 0b00 	mov.w	fp, #0
    8126:	e7cb      	b.n	80c0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    8128:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    812c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    8130:	4543      	cmp	r3, r8
    8132:	d8bc      	bhi.n	80ae <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    8134:	f04f 0800 	mov.w	r8, #0
    8138:	2501      	movs	r5, #1
    start = 0;
    813a:	46c3      	mov	fp, r8
    813c:	e7be      	b.n	80bc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    813e:	f1ba 0f00 	cmp.w	sl, #0
    8142:	d104      	bne.n	814e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    8144:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    8148:	bf08      	it	eq
    814a:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    814e:	1cb0      	adds	r0, r6, #2
}
    8150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008154 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    8154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8158:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    815a:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    815c:	4615      	mov	r5, r2
    815e:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    8160:	1883      	adds	r3, r0, r2
    8162:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    8166:	4293      	cmp	r3, r2
    8168:	d837      	bhi.n	81da <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    816a:	bbce      	cbnz	r6, 81e0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    816c:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    8170:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    8172:	bf88      	it	hi
    8174:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    8178:	f000 0307 	and.w	r3, r0, #7
    817c:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    817e:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    8182:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    8186:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    8188:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    818c:	b2e4      	uxtb	r4, r4
    818e:	2201      	movs	r2, #1
    8190:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    8192:	188f      	adds	r7, r1, r2
    8194:	f004 fce2 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    8198:	b1f8      	cbz	r0, 81da <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    819a:	f109 3eff 	add.w	lr, r9, #4294967295
    819e:	4486      	add	lr, r0
    81a0:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    81a4:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    81a8:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    81ac:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    81b0:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    81b4:	bf14      	ite	ne
    81b6:	2201      	movne	r2, #1
    81b8:	2200      	moveq	r2, #0
    81ba:	42b2      	cmp	r2, r6
    81bc:	d00d      	beq.n	81da <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    81be:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    81c0:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    81c4:	d018      	beq.n	81f8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    81c6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    81ca:	d1ed      	bne.n	81a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    81cc:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    81ce:	46a1      	mov	r9, r4
    81d0:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    81d4:	d1e6      	bne.n	81a4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    81d6:	4639      	mov	r1, r7
    81d8:	e7d9      	b.n	818e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    81da:	2000      	movs	r0, #0
}
    81dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    81e0:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    81e4:	428b      	cmp	r3, r1
    81e6:	d9c7      	bls.n	8178 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    81e8:	4281      	cmp	r1, r0
    81ea:	d3c5      	bcc.n	8178 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    81ec:	4293      	cmp	r3, r2
    81ee:	bf28      	it	cs
    81f0:	2300      	movcs	r3, #0
    81f2:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    81f6:	e7bf      	b.n	8178 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    81f8:	2001      	movs	r0, #1
}
    81fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    81fe:	bf00      	nop

00008200 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    8200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    8202:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    8206:	3301      	adds	r3, #1
    8208:	428b      	cmp	r3, r1
    820a:	d201      	bcs.n	8210 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    820c:	2000      	movs	r0, #0
}
    820e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8210:	4607      	mov	r7, r0
    8212:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    8214:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    8218:	2500      	movs	r5, #0
    821a:	e005      	b.n	8228 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    821c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    8220:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    8222:	3301      	adds	r3, #1
    8224:	42a3      	cmp	r3, r4
    8226:	d3f1      	bcc.n	820c <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    8228:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    822c:	2200      	movs	r2, #0
    822e:	4630      	mov	r0, r6
    8230:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    8234:	f004 fc92 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    8238:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    823a:	2800      	cmp	r0, #0
    823c:	d0e6      	beq.n	820c <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    823e:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    8242:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    8244:	1c63      	adds	r3, r4, #1
    8246:	d1e9      	bne.n	821c <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    8248:	1c68      	adds	r0, r5, #1
}
    824a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000824c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    824c:	b538      	push	{r3, r4, r5, lr}
    824e:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    8250:	680b      	ldr	r3, [r1, #0]
    8252:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    8256:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    825a:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    825e:	3b02      	subs	r3, #2
    8260:	6865      	ldr	r5, [r4, #4]
    8262:	fa03 f30c 	lsl.w	r3, r3, ip
    8266:	4029      	ands	r1, r5
    8268:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    826c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    8270:	4419      	add	r1, r3
    8272:	f004 fc73 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    8276:	b118      	cbz	r0, 8280 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    8278:	6863      	ldr	r3, [r4, #4]
    827a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    827e:	4418      	add	r0, r3
}
    8280:	bd38      	pop	{r3, r4, r5, pc}
    8282:	bf00      	nop

00008284 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    8284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8288:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    828a:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    828e:	6849      	ldr	r1, [r1, #4]
    8290:	400b      	ands	r3, r1
  pos->position += offset;
    8292:	4411      	add	r1, r2
    8294:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    8296:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    8298:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    829c:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    82a0:	b2d2      	uxtb	r2, r2
    82a2:	40d3      	lsrs	r3, r2
  while (tmp--) {
    82a4:	b32b      	cbz	r3, 82f2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    82a6:	4680      	mov	r8, r0
    82a8:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    82aa:	f500 7904 	add.w	r9, r0, #528	; 0x210
    82ae:	e005      	b.n	82bc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    82b0:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    82b2:	3d01      	subs	r5, #1
      pos->cluster++;
    82b4:	f103 0301 	add.w	r3, r3, #1
    82b8:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    82ba:	d31a      	bcc.n	82f2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    82bc:	7a26      	ldrb	r6, [r4, #8]
    82be:	2e00      	cmp	r6, #0
    82c0:	d1f6      	bne.n	82b0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    82c2:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    82c6:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    82c8:	6827      	ldr	r7, [r4, #0]
    82ca:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    82cc:	3301      	adds	r3, #1
    82ce:	429f      	cmp	r7, r3
    82d0:	d812      	bhi.n	82f8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    82d2:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    82d6:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    82da:	f004 fc3f 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    82de:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    82e0:	b150      	cbz	r0, 82f8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    82e2:	f3c7 0708 	ubfx	r7, r7, #0, #9
    82e6:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    82e8:	1c5a      	adds	r2, r3, #1
    82ea:	d009      	beq.n	8300 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    82ec:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    82ee:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    82f0:	d2e4      	bcs.n	82bc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    82f2:	2001      	movs	r0, #1
}
    82f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    82f8:	f04f 30ff 	mov.w	r0, #4294967295
}
    82fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    8300:	4630      	mov	r0, r6
}
    8302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8306:	bf00      	nop

00008308 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    8308:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    830a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    830e:	3301      	adds	r3, #1
    8310:	428b      	cmp	r3, r1
    8312:	d202      	bcs.n	831a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    8314:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    8318:	bd38      	pop	{r3, r4, r5, pc}
    831a:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    831c:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    8320:	4615      	mov	r5, r2
    8322:	f500 7004 	add.w	r0, r0, #528	; 0x210
    8326:	2200      	movs	r2, #0
    8328:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    832c:	f004 fc16 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    8330:	2800      	cmp	r0, #0
    8332:	d0ef      	beq.n	8314 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    8334:	00a4      	lsls	r4, r4, #2
    8336:	f3c4 0408 	ubfx	r4, r4, #0, #9
    833a:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    833c:	1c5a      	adds	r2, r3, #1
    833e:	d002      	beq.n	8346 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    8340:	2001      	movs	r0, #1
  *value = next;
    8342:	602b      	str	r3, [r5, #0]
}
    8344:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    8346:	2000      	movs	r0, #0
}
    8348:	bd38      	pop	{r3, r4, r5, pc}
    834a:	bf00      	nop

0000834c <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    834c:	2901      	cmp	r1, #1
    834e:	d91b      	bls.n	8388 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    8350:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    8352:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    8356:	460c      	mov	r4, r1
    8358:	3301      	adds	r3, #1
    835a:	428b      	cmp	r3, r1
    835c:	d201      	bcs.n	8362 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    835e:	2000      	movs	r0, #0
}
    8360:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    8362:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    8366:	4615      	mov	r5, r2
    8368:	f500 7004 	add.w	r0, r0, #528	; 0x210
    836c:	2201      	movs	r2, #1
    836e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    8372:	f004 fbf3 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    8376:	4603      	mov	r3, r0
    8378:	2800      	cmp	r0, #0
    837a:	d0f0      	beq.n	835e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    837c:	00a4      	lsls	r4, r4, #2
  return true;
    837e:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    8380:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    8384:	511d      	str	r5, [r3, r4]
}
    8386:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    8388:	2000      	movs	r0, #0
}
    838a:	4770      	bx	lr

0000838c <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    838c:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    8390:	3301      	adds	r3, #1
    8392:	4299      	cmp	r1, r3
    8394:	d901      	bls.n	839a <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    8396:	2000      	movs	r0, #0
    8398:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    839a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    839e:	4605      	mov	r5, r0
    83a0:	b083      	sub	sp, #12
    83a2:	460c      	mov	r4, r1
    83a4:	f500 7904 	add.w	r9, r0, #528	; 0x210
    83a8:	460f      	mov	r7, r1
    83aa:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    83ae:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    83b2:	2200      	movs	r2, #0
    83b4:	4648      	mov	r0, r9
    83b6:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    83ba:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    83be:	f004 fbcd 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    83c2:	b190      	cbz	r0, 83ea <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    83c4:	00a3      	lsls	r3, r4, #2
    83c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    83ca:	58c2      	ldr	r2, [r0, r3]
    83cc:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    83ce:	1c53      	adds	r3, r2, #1
    83d0:	bf16      	itet	ne
    83d2:	4616      	movne	r6, r2
    83d4:	f04f 0a00 	moveq.w	sl, #0
    83d8:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    83dc:	2c01      	cmp	r4, #1
    83de:	d904      	bls.n	83ea <ExFatPartition::freeChain(unsigned long)+0x5e>
    83e0:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    83e4:	3201      	adds	r2, #1
    83e6:	4294      	cmp	r4, r2
    83e8:	d903      	bls.n	83f2 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    83ea:	2000      	movs	r0, #0
    83ec:	b003      	add	sp, #12
    83ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    83f2:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    83f6:	2201      	movs	r2, #1
    83f8:	4648      	mov	r0, r9
    83fa:	4459      	add	r1, fp
    83fc:	f004 fbae 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    8400:	2800      	cmp	r0, #0
    8402:	d0f2      	beq.n	83ea <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    8404:	9b01      	ldr	r3, [sp, #4]
    8406:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    840a:	f1ba 0f00 	cmp.w	sl, #0
    840e:	d012      	beq.n	8436 <ExFatPartition::freeChain(unsigned long)+0xaa>
    8410:	3401      	adds	r4, #1
    8412:	42b4      	cmp	r4, r6
    8414:	d008      	beq.n	8428 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    8416:	2300      	movs	r3, #0
    8418:	1be2      	subs	r2, r4, r7
    841a:	4639      	mov	r1, r7
    841c:	4628      	mov	r0, r5
    841e:	f7ff fe99 	bl	8154 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    8422:	2800      	cmp	r0, #0
    8424:	d0e1      	beq.n	83ea <ExFatPartition::freeChain(unsigned long)+0x5e>
    8426:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    8428:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    842c:	3301      	adds	r3, #1
    842e:	42b3      	cmp	r3, r6
    8430:	d3db      	bcc.n	83ea <ExFatPartition::freeChain(unsigned long)+0x5e>
    8432:	4634      	mov	r4, r6
    8434:	e7bb      	b.n	83ae <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    8436:	1c62      	adds	r2, r4, #1
    8438:	4653      	mov	r3, sl
    843a:	4639      	mov	r1, r7
    843c:	4628      	mov	r0, r5
    843e:	1bd2      	subs	r2, r2, r7
}
    8440:	b003      	add	sp, #12
    8442:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    8446:	f7ff be85 	b.w	8154 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    844a:	bf00      	nop

0000844c <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    8450:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    8452:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    8454:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    8458:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    845c:	462c      	mov	r4, r5
    845e:	2200      	movs	r2, #0
    8460:	4640      	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    8462:	1c4f      	adds	r7, r1, #1
    8464:	f004 fb7a 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    8468:	b1a8      	cbz	r0, 8496 <ExFatPartition::freeClusterCount()+0x4a>
    846a:	f100 3eff 	add.w	lr, r0, #4294967295
    846e:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    8472:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    8476:	e005      	b.n	8484 <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    8478:	b979      	cbnz	r1, 849a <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    847a:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    847c:	4284      	cmp	r4, r0
    847e:	d209      	bcs.n	8494 <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    8480:	454c      	cmp	r4, r9
    8482:	d016      	beq.n	84b2 <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    8484:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    8488:	29ff      	cmp	r1, #255	; 0xff
    848a:	d1f5      	bne.n	8478 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    848c:	3408      	adds	r4, #8
        usedCount+= 8;
    848e:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    8490:	4284      	cmp	r4, r0
    8492:	d3f5      	bcc.n	8480 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    8494:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    8496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    849a:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    849c:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    849e:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    84a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    84a4:	bf18      	it	ne
    84a6:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    84a8:	3a01      	subs	r2, #1
    84aa:	fa5f f38c 	uxtb.w	r3, ip
    84ae:	d1f6      	bne.n	849e <ExFatPartition::freeClusterCount()+0x52>
    84b0:	e7e3      	b.n	847a <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    84b2:	4639      	mov	r1, r7
    84b4:	e7d3      	b.n	845e <ExFatPartition::freeClusterCount()+0x12>
    84b6:	bf00      	nop

000084b8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    84b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    84ba:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    84bc:	f04f 36ff 	mov.w	r6, #4294967295
    84c0:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    84c4:	4615      	mov	r5, r2
  m_blockDev = dev;
    84c6:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    84ca:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    84cc:	6041      	str	r1, [r0, #4]
    84ce:	461a      	mov	r2, r3
    84d0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    84d4:	4619      	mov	r1, r3
  m_fatType = 0;
    84d6:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    84da:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    84dc:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    84de:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    84e2:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    84e6:	4638      	mov	r0, r7
    84e8:	f004 fb38 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    84ec:	2d04      	cmp	r5, #4
    84ee:	d80d      	bhi.n	850c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    84f0:	4606      	mov	r6, r0
    84f2:	b158      	cbz	r0, 850c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    84f4:	b1bd      	cbz	r5, 8526 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    84f6:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    84f8:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    84fc:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    8500:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    8504:	d102      	bne.n	850c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    8506:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    850a:	b90b      	cbnz	r3, 8510 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    850c:	2000      	movs	r0, #0
}
    850e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    8510:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    8514:	4638      	mov	r0, r7
    8516:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    851a:	4629      	mov	r1, r5
    851c:	f004 fb1e 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    8520:	4606      	mov	r6, r0
    8522:	2800      	cmp	r0, #0
    8524:	d0f2      	beq.n	850c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    8526:	2205      	movs	r2, #5
    8528:	491a      	ldr	r1, [pc, #104]	; (8594 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    852a:	1cf0      	adds	r0, r6, #3
    852c:	f009 fcec 	bl	11f08 <strncmp>
    8530:	2800      	cmp	r0, #0
    8532:	d1eb      	bne.n	850c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    8534:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    8538:	2b09      	cmp	r3, #9
    853a:	d1e7      	bne.n	850c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    853c:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    853e:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    8540:	442b      	add	r3, r5
    8542:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    8546:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    8548:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    854c:	6db3      	ldr	r3, [r6, #88]	; 0x58
    854e:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8550:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    8552:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    8556:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    8558:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    855c:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    855e:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    8562:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    8566:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    856a:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    856c:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    8570:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8574:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    8578:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    857a:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    857e:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    8582:	462a      	mov	r2, r5
    8584:	f7ff fd86 	bl	8094 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    8588:	2340      	movs	r3, #64	; 0x40
  return true;
    858a:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    858c:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    8590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8592:	bf00      	nop
    8594:	20000ae4 	.word	0x20000ae4

00008598 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    8598:	b510      	push	{r4, lr}
    859a:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    859c:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    85a0:	f7ff fe2e 	bl	8200 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    85a4:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    85a8:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    85aa:	b2db      	uxtb	r3, r3
}
    85ac:	4098      	lsls	r0, r3
    85ae:	bd10      	pop	{r4, pc}

000085b0 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    85b0:	b570      	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    85b2:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    85b6:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    85b8:	2300      	movs	r3, #0
    85ba:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    85bc:	4668      	mov	r0, sp
    85be:	4621      	mov	r1, r4
    85c0:	930c      	str	r3, [sp, #48]	; 0x30
    85c2:	f7fe ff77 	bl	74b4 <ExFatFile::open(ExFatFile*, char const*, int)>
    85c6:	4605      	mov	r5, r0
    85c8:	b1d8      	cbz	r0, 8602 <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    85ca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    85ce:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    85d2:	d019      	beq.n	8608 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    85d4:	46ee      	mov	lr, sp
    85d6:	46a4      	mov	ip, r4
    85d8:	ae0c      	add	r6, sp, #48	; 0x30
    85da:	4674      	mov	r4, lr
    85dc:	f10c 0c10 	add.w	ip, ip, #16
    85e0:	f10e 0e10 	add.w	lr, lr, #16
    85e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    85e6:	42b4      	cmp	r4, r6
    85e8:	f84c 0c10 	str.w	r0, [ip, #-16]
    85ec:	f84c 1c0c 	str.w	r1, [ip, #-12]
    85f0:	f84c 2c08 	str.w	r2, [ip, #-8]
    85f4:	f84c 3c04 	str.w	r3, [ip, #-4]
    85f8:	d1ef      	bne.n	85da <ExFatVolume::chdir(char const*)+0x2a>
    85fa:	f8de 0000 	ldr.w	r0, [lr]
    85fe:	f8cc 0000 	str.w	r0, [ip]
  return true;

 fail:
  return false;
}
    8602:	4628      	mov	r0, r5
    8604:	b00e      	add	sp, #56	; 0x38
    8606:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    8608:	461d      	mov	r5, r3
}
    860a:	4628      	mov	r0, r5
    860c:	b00e      	add	sp, #56	; 0x38
    860e:	bd70      	pop	{r4, r5, r6, pc}

00008610 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    8610:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    8612:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    8616:	b082      	sub	sp, #8
    8618:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    861a:	2b00      	cmp	r3, #0
    861c:	db0d      	blt.n	863a <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    861e:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8620:	f105 0028 	add.w	r0, r5, #40	; 0x28
    8624:	f004 fa6e 	bl	cb04 <FsCache::sync()>
    8628:	2800      	cmp	r0, #0
    862a:	d13b      	bne.n	86a4 <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    862c:	7863      	ldrb	r3, [r4, #1]
  return false;
    862e:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    8630:	f043 0301 	orr.w	r3, r3, #1
    8634:	7063      	strb	r3, [r4, #1]
}
    8636:	b002      	add	sp, #8
    8638:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    863a:	6880      	ldr	r0, [r0, #8]
    863c:	2201      	movs	r2, #1
    863e:	69a1      	ldr	r1, [r4, #24]
    8640:	3028      	adds	r0, #40	; 0x28
    8642:	f004 fa8b 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8646:	2800      	cmp	r0, #0
    8648:	d0f0      	beq.n	862c <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    864a:	88a5      	ldrh	r5, [r4, #4]
    864c:	f005 050f 	and.w	r5, r5, #15
    8650:	016b      	lsls	r3, r5, #5
    8652:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    8656:	5cc3      	ldrb	r3, [r0, r3]
    8658:	2be5      	cmp	r3, #229	; 0xe5
    865a:	d0e7      	beq.n	862c <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    865c:	7823      	ldrb	r3, [r4, #0]
    865e:	071b      	lsls	r3, r3, #28
    8660:	d501      	bpl.n	8666 <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    8662:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8664:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    8666:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    8668:	4915      	ldr	r1, [pc, #84]	; (86c0 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    866a:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    866c:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    866e:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    8670:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    8672:	b166      	cbz	r6, 868e <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    8674:	f10d 0203 	add.w	r2, sp, #3
    8678:	f10d 0106 	add.w	r1, sp, #6
    867c:	a801      	add	r0, sp, #4
    867e:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    8680:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8684:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8688:	832b      	strh	r3, [r5, #24]
    868a:	826b      	strh	r3, [r5, #18]
    868c:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    868e:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    8690:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    8692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8696:	f105 0028 	add.w	r0, r5, #40	; 0x28
    869a:	70a3      	strb	r3, [r4, #2]
    869c:	f004 fa32 	bl	cb04 <FsCache::sync()>
    86a0:	2800      	cmp	r0, #0
    86a2:	d0c3      	beq.n	862c <FatFile::sync() [clone .part.0]+0x1c>
    86a4:	f505 700e 	add.w	r0, r5, #568	; 0x238
    86a8:	f004 fa2c 	bl	cb04 <FsCache::sync()>
    86ac:	2800      	cmp	r0, #0
    86ae:	d0bd      	beq.n	862c <FatFile::sync() [clone .part.0]+0x1c>
    86b0:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    86b2:	6803      	ldr	r3, [r0, #0]
    86b4:	6a1b      	ldr	r3, [r3, #32]
    86b6:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    86b8:	2800      	cmp	r0, #0
    86ba:	d0b7      	beq.n	862c <FatFile::sync() [clone .part.0]+0x1c>
    86bc:	e7bb      	b.n	8636 <FatFile::sync() [clone .part.0]+0x26>
    86be:	bf00      	nop
    86c0:	20034730 	.word	0x20034730

000086c4 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    86c4:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    86c6:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    86c8:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    86cc:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    86ce:	6880      	ldr	r0, [r0, #8]
    86d0:	4629      	mov	r1, r5
    86d2:	f001 fdaf 	bl	a234 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    86d6:	b150      	cbz	r0, 86ee <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    86d8:	b155      	cbz	r5, 86f0 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    86da:	6923      	ldr	r3, [r4, #16]
    86dc:	3501      	adds	r5, #1
    86de:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    86e0:	78a3      	ldrb	r3, [r4, #2]
    86e2:	bf18      	it	ne
    86e4:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    86e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    86ec:	70a3      	strb	r3, [r4, #2]
}
    86ee:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    86f0:	78a3      	ldrb	r3, [r4, #2]
    86f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    86f6:	e7f7      	b.n	86e8 <FatFile::addCluster()+0x24>

000086f8 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    86f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    86fa:	7804      	ldrb	r4, [r0, #0]
    86fc:	f014 0420 	ands.w	r4, r4, #32
    8700:	d104      	bne.n	870c <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    8702:	4b1a      	ldr	r3, [pc, #104]	; (876c <FatFile::addDirCluster()+0x74>)
    8704:	4605      	mov	r5, r0
    8706:	6942      	ldr	r2, [r0, #20]
    8708:	429a      	cmp	r2, r3
    870a:	d302      	bcc.n	8712 <FatFile::addDirCluster()+0x1a>
  return false;
    870c:	2700      	movs	r7, #0
}
    870e:	4638      	mov	r0, r7
    8710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    8712:	f7ff ffd7 	bl	86c4 <FatFile::addCluster()>
    8716:	4607      	mov	r7, r0
    8718:	2800      	cmp	r0, #0
    871a:	d0f7      	beq.n	870c <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    871c:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    871e:	692e      	ldr	r6, [r5, #16]
    8720:	7982      	ldrb	r2, [r0, #6]
    8722:	3e02      	subs	r6, #2
    8724:	6941      	ldr	r1, [r0, #20]
    8726:	4096      	lsls	r6, r2
    8728:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    872a:	7901      	ldrb	r1, [r0, #4]
    872c:	b1a9      	cbz	r1, 875a <FatFile::addDirCluster()+0x62>
    872e:	4621      	mov	r1, r4
    8730:	e006      	b.n	8740 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    8732:	f009 fb41 	bl	11db8 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    8736:	68a8      	ldr	r0, [r5, #8]
    8738:	b2e1      	uxtb	r1, r4
    873a:	7902      	ldrb	r2, [r0, #4]
    873c:	428a      	cmp	r2, r1
    873e:	d90b      	bls.n	8758 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    8740:	4431      	add	r1, r6
    8742:	2205      	movs	r2, #5
    8744:	3028      	adds	r0, #40	; 0x28
    8746:	3401      	adds	r4, #1
    8748:	f004 fa08 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    874c:	f44f 7200 	mov.w	r2, #512	; 0x200
    8750:	2100      	movs	r1, #0
    if (!pc) {
    8752:	2800      	cmp	r0, #0
    8754:	d1ed      	bne.n	8732 <FatFile::addDirCluster()+0x3a>
    8756:	e7d9      	b.n	870c <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    8758:	7982      	ldrb	r2, [r0, #6]
    875a:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    875e:	6969      	ldr	r1, [r5, #20]
}
    8760:	4638      	mov	r0, r7
    8762:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    8764:	fa11 f383 	uxtah	r3, r1, r3
    8768:	616b      	str	r3, [r5, #20]
}
    876a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    876c:	001ffe00 	.word	0x001ffe00

00008770 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    8770:	b510      	push	{r4, lr}
    8772:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    8774:	6880      	ldr	r0, [r0, #8]
    8776:	460a      	mov	r2, r1
    8778:	3028      	adds	r0, #40	; 0x28
    877a:	69a1      	ldr	r1, [r4, #24]
    877c:	f004 f9ee 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8780:	b120      	cbz	r0, 878c <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    8782:	88a3      	ldrh	r3, [r4, #4]
    8784:	f003 030f 	and.w	r3, r3, #15
    8788:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    878c:	bd10      	pop	{r4, pc}
    878e:	bf00      	nop

00008790 <FatFile::close()>:
bool FatFile::close() {
    8790:	b510      	push	{r4, lr}
  if (!isOpen()) {
    8792:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    8794:	4604      	mov	r4, r0
  if (!isOpen()) {
    8796:	b12b      	cbz	r3, 87a4 <FatFile::close()+0x14>
    8798:	f7ff ff3a 	bl	8610 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    879c:	2300      	movs	r3, #0
    879e:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    87a0:	70a3      	strb	r3, [r4, #2]
}
    87a2:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    87a4:	2300      	movs	r3, #0
    return true;
    87a6:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    87a8:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    87aa:	70a3      	strb	r3, [r4, #2]
}
    87ac:	bd10      	pop	{r4, pc}
    87ae:	bf00      	nop

000087b0 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    87b0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    87b2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    87b4:	4605      	mov	r5, r0
    87b6:	460c      	mov	r4, r1
  if (!isOpen()) {
    87b8:	b113      	cbz	r3, 87c0 <FatFile::dirEntry(DirFat_t*)+0x10>
    87ba:	f7ff ff29 	bl	8610 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    87be:	b1f0      	cbz	r0, 87fe <FatFile::dirEntry(DirFat_t*)+0x4e>
    87c0:	68a8      	ldr	r0, [r5, #8]
    87c2:	2200      	movs	r2, #0
    87c4:	69a9      	ldr	r1, [r5, #24]
    87c6:	3028      	adds	r0, #40	; 0x28
    87c8:	f004 f9c8 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    87cc:	b1b8      	cbz	r0, 87fe <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    87ce:	88aa      	ldrh	r2, [r5, #4]
    87d0:	f002 020f 	and.w	r2, r2, #15
    87d4:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    87d8:	0152      	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    87da:	685d      	ldr	r5, [r3, #4]
    87dc:	5880      	ldr	r0, [r0, r2]
    87de:	6899      	ldr	r1, [r3, #8]
    87e0:	68da      	ldr	r2, [r3, #12]
    87e2:	6020      	str	r0, [r4, #0]
    87e4:	6065      	str	r5, [r4, #4]
    87e6:	60a1      	str	r1, [r4, #8]
    87e8:	60e2      	str	r2, [r4, #12]
    87ea:	6918      	ldr	r0, [r3, #16]
    87ec:	695d      	ldr	r5, [r3, #20]
    87ee:	6999      	ldr	r1, [r3, #24]
    87f0:	69da      	ldr	r2, [r3, #28]
    87f2:	6120      	str	r0, [r4, #16]
  return true;
    87f4:	2001      	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    87f6:	6165      	str	r5, [r4, #20]
    87f8:	61a1      	str	r1, [r4, #24]
    87fa:	61e2      	str	r2, [r4, #28]
}
    87fc:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    87fe:	2000      	movs	r0, #0
}
    8800:	bd38      	pop	{r3, r4, r5, pc}
    8802:	bf00      	nop

00008804 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    8804:	b530      	push	{r4, r5, lr}
    8806:	b089      	sub	sp, #36	; 0x24
    8808:	460d      	mov	r5, r1
    880a:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    880c:	4669      	mov	r1, sp
    880e:	f7ff ffcf 	bl	87b0 <FatFile::dirEntry(DirFat_t*)>
    8812:	b128      	cbz	r0, 8820 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    8814:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    8818:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    881c:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    881e:	8023      	strh	r3, [r4, #0]
}
    8820:	b009      	add	sp, #36	; 0x24
    8822:	bd30      	pop	{r4, r5, pc}

00008824 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    8824:	b530      	push	{r4, r5, lr}
    8826:	b089      	sub	sp, #36	; 0x24
    8828:	460d      	mov	r5, r1
    882a:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    882c:	4669      	mov	r1, sp
    882e:	f7ff ffbf 	bl	87b0 <FatFile::dirEntry(DirFat_t*)>
    8832:	b128      	cbz	r0, 8840 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    8834:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    8838:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    883c:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    883e:	8023      	strh	r3, [r4, #0]
}
    8840:	b009      	add	sp, #36	; 0x24
    8842:	bd30      	pop	{r4, r5, pc}

00008844 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    8844:	780b      	ldrb	r3, [r1, #0]
    8846:	f013 0f70 	tst.w	r3, #112	; 0x70
    884a:	d101      	bne.n	8850 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    884c:	2000      	movs	r0, #0
    884e:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    8850:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    8852:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    8856:	b089      	sub	sp, #36	; 0x24
    8858:	460d      	mov	r5, r1
    885a:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    885c:	f001 f84a 	bl	98f4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    8860:	b138      	cbz	r0, 8872 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    8862:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    8864:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    8866:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    8868:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    886a:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    886c:	f7ff ff44 	bl	86f8 <FatFile::addDirCluster()>
    8870:	b910      	cbnz	r0, 8878 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    8872:	2000      	movs	r0, #0
    8874:	b009      	add	sp, #36	; 0x24
    8876:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    8878:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    887a:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    887c:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    887e:	b16b      	cbz	r3, 889c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    8880:	6963      	ldr	r3, [r4, #20]
    8882:	b133      	cbz	r3, 8892 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8884:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    8886:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8888:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    888c:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8890:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    8892:	4620      	mov	r0, r4
    8894:	f7ff febc 	bl	8610 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    8898:	2800      	cmp	r0, #0
    889a:	d0ea      	beq.n	8872 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    889c:	68a0      	ldr	r0, [r4, #8]
    889e:	2201      	movs	r2, #1
    88a0:	69a1      	ldr	r1, [r4, #24]
    88a2:	3028      	adds	r0, #40	; 0x28
    88a4:	f004 f95a 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    88a8:	2800      	cmp	r0, #0
    88aa:	d0e2      	beq.n	8872 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    88ac:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    88b0:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    88b2:	f00c 0c0f 	and.w	ip, ip, #15
    88b6:	ea4f 134c 	mov.w	r3, ip, lsl #5
    88ba:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    88be:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    88c2:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    88c4:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    88c6:	6a23      	ldr	r3, [r4, #32]
    88c8:	f897 e006 	ldrb.w	lr, [r7, #6]
    88cc:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    88ce:	f8dc 1004 	ldr.w	r1, [ip, #4]
    88d2:	f8dc 2008 	ldr.w	r2, [ip, #8]
    88d6:	f8dc 300c 	ldr.w	r3, [ip, #12]
    88da:	fa06 f60e 	lsl.w	r6, r6, lr
    88de:	46ee      	mov	lr, sp
    88e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    88e4:	f8dc 0010 	ldr.w	r0, [ip, #16]
    88e8:	f8dc 1014 	ldr.w	r1, [ip, #20]
    88ec:	f8dc 2018 	ldr.w	r2, [ip, #24]
    88f0:	f8dc 301c 	ldr.w	r3, [ip, #28]
    88f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    88f8:	697b      	ldr	r3, [r7, #20]
    88fa:	f107 0028 	add.w	r0, r7, #40	; 0x28
    88fe:	2201      	movs	r2, #1
    8900:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    8902:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    8906:	f8cd 3001 	str.w	r3, [sp, #1]
    890a:	f8cd 3005 	str.w	r3, [sp, #5]
    890e:	f8ad 3009 	strh.w	r3, [sp, #9]
    8912:	f004 f923 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8916:	4684      	mov	ip, r0
    8918:	2800      	cmp	r0, #0
    891a:	d0aa      	beq.n	8872 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    891c:	272e      	movs	r7, #46	; 0x2e
    891e:	46ee      	mov	lr, sp
    8920:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    8924:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    8926:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    892a:	f8cc 0000 	str.w	r0, [ip]
    892e:	f8cc 1004 	str.w	r1, [ip, #4]
    8932:	f8cc 2008 	str.w	r2, [ip, #8]
    8936:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    893a:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    893e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8942:	f8cc 0010 	str.w	r0, [ip, #16]
    8946:	f8cc 1014 	str.w	r1, [ip, #20]
    894a:	f8cc 2018 	str.w	r2, [ip, #24]
    894e:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8952:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    8954:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8956:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    895a:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    895e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8960:	f8cc 0020 	str.w	r0, [ip, #32]
    8964:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    8968:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    896c:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    8970:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8972:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    8976:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    897a:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    897e:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    8982:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8984:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8988:	f004 f8bc 	bl	cb04 <FsCache::sync()>
    898c:	2800      	cmp	r0, #0
    898e:	f43f af70 	beq.w	8872 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    8992:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8996:	f004 f8b5 	bl	cb04 <FsCache::sync()>
    899a:	2800      	cmp	r0, #0
    899c:	f43f af69 	beq.w	8872 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    89a0:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    89a2:	6803      	ldr	r3, [r0, #0]
    89a4:	6a1b      	ldr	r3, [r3, #32]
}
    89a6:	b009      	add	sp, #36	; 0x24
    89a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    89ac:	4718      	bx	r3
    89ae:	bf00      	nop

000089b0 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    89b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    89b4:	2600      	movs	r6, #0
    89b6:	b094      	sub	sp, #80	; 0x50
    89b8:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    89ba:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    89bc:	9201      	str	r2, [sp, #4]
    89be:	f8ad 6014 	strh.w	r6, [sp, #20]
    89c2:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    89c4:	2b00      	cmp	r3, #0
    89c6:	d141      	bne.n	8a4c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    89c8:	780b      	ldrb	r3, [r1, #0]
    89ca:	460d      	mov	r5, r1
    89cc:	f013 0f70 	tst.w	r3, #112	; 0x70
    89d0:	d03c      	beq.n	8a4c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    89d2:	7813      	ldrb	r3, [r2, #0]
    89d4:	4604      	mov	r4, r0
    89d6:	4616      	mov	r6, r2
    89d8:	2b2f      	cmp	r3, #47	; 0x2f
    89da:	d03b      	beq.n	8a54 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    89dc:	2700      	movs	r7, #0
    89de:	e028      	b.n	8a32 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    89e0:	9e01      	ldr	r6, [sp, #4]
    89e2:	7836      	ldrb	r6, [r6, #0]
    89e4:	2e00      	cmp	r6, #0
    89e6:	d050      	beq.n	8a8a <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    89e8:	f000 ff84 	bl	98f4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    89ec:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    89ee:	aa02      	add	r2, sp, #8
    89f0:	4629      	mov	r1, r5
    89f2:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    89f4:	b92b      	cbnz	r3, 8a02 <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    89f6:	f1b8 0f00 	cmp.w	r8, #0
    89fa:	d027      	beq.n	8a4c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    89fc:	f7ff ff22 	bl	8844 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    8a00:	b320      	cbz	r0, 8a4c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    8a02:	46a6      	mov	lr, r4
    8a04:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    8a08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8a0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8a10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8a14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8a18:	f8de 5000 	ldr.w	r5, [lr]
    8a1c:	4620      	mov	r0, r4
  if (!isOpen()) {
    8a1e:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    8a20:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    8a24:	b10b      	cbz	r3, 8a2a <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    8a26:	f7ff fdf3 	bl	8610 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    8a2a:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    8a2c:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    8a2e:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    8a30:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    8a32:	4631      	mov	r1, r6
    8a34:	ab01      	add	r3, sp, #4
    8a36:	aa02      	add	r2, sp, #8
    8a38:	4620      	mov	r0, r4
    8a3a:	f001 f8a7 	bl	9b8c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    8a3e:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    8a40:	aa02      	add	r2, sp, #8
    8a42:	4629      	mov	r1, r5
    8a44:	2300      	movs	r3, #0
    8a46:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    8a48:	2e00      	cmp	r6, #0
    8a4a:	d1c9      	bne.n	89e0 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    8a4c:	2000      	movs	r0, #0
}
    8a4e:	b014      	add	sp, #80	; 0x50
    8a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    8a54:	3601      	adds	r6, #1
    8a56:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    8a58:	7833      	ldrb	r3, [r6, #0]
    8a5a:	2b2f      	cmp	r3, #47	; 0x2f
    8a5c:	d0fa      	beq.n	8a54 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    8a5e:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    8a60:	2224      	movs	r2, #36	; 0x24
    8a62:	2100      	movs	r1, #0
    8a64:	a80b      	add	r0, sp, #44	; 0x2c
    8a66:	f009 f9a7 	bl	11db8 <memset>
  m_vol = vol;
    8a6a:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    8a6c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8a6e:	2b10      	cmp	r3, #16
    8a70:	d003      	beq.n	8a7a <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    8a72:	2b20      	cmp	r3, #32
    8a74:	d00f      	beq.n	8a96 <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    8a76:	2b0c      	cmp	r3, #12
    8a78:	d1e8      	bne.n	8a4c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    8a7a:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8a7c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    8a80:	2301      	movs	r3, #1
    parent = &tmpDir;
    8a82:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    8a84:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    8a88:	e7a8      	b.n	89dc <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    8a8a:	aa02      	add	r2, sp, #8
    8a8c:	f7ff feda 	bl	8844 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    8a90:	b014      	add	sp, #80	; 0x50
    8a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    8a96:	2340      	movs	r3, #64	; 0x40
    8a98:	e7f0      	b.n	8a7c <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    8a9a:	bf00      	nop

00008a9c <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    8a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8aa0:	2500      	movs	r5, #0
    8aa2:	b094      	sub	sp, #80	; 0x50
    8aa4:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    8aa6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    8aa8:	9201      	str	r2, [sp, #4]
    8aaa:	9502      	str	r5, [sp, #8]
    8aac:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    8ab0:	2b00      	cmp	r3, #0
    8ab2:	d137      	bne.n	8b24 <FatFile::open(FatFile*, char const*, int)+0x88>
    8ab4:	780b      	ldrb	r3, [r1, #0]
    8ab6:	460e      	mov	r6, r1
    8ab8:	f013 0f70 	tst.w	r3, #112	; 0x70
    8abc:	d032      	beq.n	8b24 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    8abe:	7813      	ldrb	r3, [r2, #0]
    8ac0:	4604      	mov	r4, r0
    8ac2:	4615      	mov	r5, r2
    8ac4:	2b2f      	cmp	r3, #47	; 0x2f
    8ac6:	d031      	beq.n	8b2c <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    8ac8:	2700      	movs	r7, #0
    8aca:	e01e      	b.n	8b0a <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    8acc:	9d01      	ldr	r5, [sp, #4]
    8ace:	782d      	ldrb	r5, [r5, #0]
    8ad0:	2d00      	cmp	r5, #0
    8ad2:	d040      	beq.n	8b56 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    8ad4:	f000 ff0e 	bl	98f4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    8ad8:	46a6      	mov	lr, r4
    8ada:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    8ade:	b308      	cbz	r0, 8b24 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    8ae0:	4666      	mov	r6, ip
  if (!isOpen()) {
    8ae2:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    8ae4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8ae8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8aec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8af0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8af4:	f8de 3000 	ldr.w	r3, [lr]
    8af8:	4620      	mov	r0, r4
    8afa:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    8afe:	b10d      	cbz	r5, 8b04 <FatFile::open(FatFile*, char const*, int)+0x68>
    8b00:	f7ff fd86 	bl	8610 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    8b04:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    8b06:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    8b08:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    8b0a:	4629      	mov	r1, r5
    8b0c:	ab01      	add	r3, sp, #4
    8b0e:	aa0b      	add	r2, sp, #44	; 0x2c
    8b10:	4620      	mov	r0, r4
    8b12:	f001 f83b 	bl	9b8c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    8b16:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    8b18:	aa0b      	add	r2, sp, #44	; 0x2c
    8b1a:	4631      	mov	r1, r6
    8b1c:	2300      	movs	r3, #0
    8b1e:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    8b20:	2d00      	cmp	r5, #0
    8b22:	d1d3      	bne.n	8acc <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    8b24:	2000      	movs	r0, #0
}
    8b26:	b014      	add	sp, #80	; 0x50
    8b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    8b2c:	3501      	adds	r5, #1
    8b2e:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    8b30:	7829      	ldrb	r1, [r5, #0]
    8b32:	292f      	cmp	r1, #47	; 0x2f
    8b34:	d0fa      	beq.n	8b2c <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    8b36:	b9a9      	cbnz	r1, 8b64 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    8b38:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    8b3a:	2224      	movs	r2, #36	; 0x24
    8b3c:	4620      	mov	r0, r4
    8b3e:	f009 f93b 	bl	11db8 <memset>
  m_vol = vol;
    8b42:	60a5      	str	r5, [r4, #8]
    8b44:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8b46:	2b10      	cmp	r3, #16
    8b48:	d003      	beq.n	8b52 <FatFile::open(FatFile*, char const*, int)+0xb6>
    8b4a:	2b20      	cmp	r3, #32
    8b4c:	d022      	beq.n	8b94 <FatFile::open(FatFile*, char const*, int)+0xf8>
    8b4e:	2b0c      	cmp	r3, #12
    8b50:	d1e8      	bne.n	8b24 <FatFile::open(FatFile*, char const*, int)+0x88>
    8b52:	2220      	movs	r2, #32
    8b54:	e01f      	b.n	8b96 <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    8b56:	4643      	mov	r3, r8
    8b58:	aa0b      	add	r2, sp, #44	; 0x2c
    8b5a:	f000 fecb 	bl	98f4 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    8b5e:	b014      	add	sp, #80	; 0x50
    8b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    8b64:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    8b66:	2224      	movs	r2, #36	; 0x24
    8b68:	2100      	movs	r1, #0
    8b6a:	a802      	add	r0, sp, #8
    8b6c:	f009 f924 	bl	11db8 <memset>
  m_vol = vol;
    8b70:	9604      	str	r6, [sp, #16]
    8b72:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    8b74:	2b10      	cmp	r3, #16
    8b76:	d003      	beq.n	8b80 <FatFile::open(FatFile*, char const*, int)+0xe4>
    8b78:	2b20      	cmp	r3, #32
    8b7a:	d003      	beq.n	8b84 <FatFile::open(FatFile*, char const*, int)+0xe8>
    8b7c:	2b0c      	cmp	r3, #12
    8b7e:	d1d1      	bne.n	8b24 <FatFile::open(FatFile*, char const*, int)+0x88>
    8b80:	2320      	movs	r3, #32
    8b82:	e000      	b.n	8b86 <FatFile::open(FatFile*, char const*, int)+0xea>
    8b84:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8b86:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    8b8a:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    8b8c:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    8b8e:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    8b92:	e799      	b.n	8ac8 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    8b94:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    8b96:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8b98:	7022      	strb	r2, [r4, #0]
  return true;
    8b9a:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    8b9c:	70a3      	strb	r3, [r4, #2]
  return true;
    8b9e:	e7c2      	b.n	8b26 <FatFile::open(FatFile*, char const*, int)+0x8a>

00008ba0 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    8ba0:	b119      	cbz	r1, 8baa <FatFile::open(FatVolume*, char const*, int)+0xa>
    8ba2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    8ba6:	f7ff bf79 	b.w	8a9c <FatFile::open(FatFile*, char const*, int)>
}
    8baa:	4608      	mov	r0, r1
    8bac:	4770      	bx	lr
    8bae:	bf00      	nop

00008bb0 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    8bb0:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    8bb2:	b570      	push	{r4, r5, r6, lr}
    8bb4:	460d      	mov	r5, r1
    8bb6:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    8bb8:	b993      	cbnz	r3, 8be0 <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    8bba:	7806      	ldrb	r6, [r0, #0]
    8bbc:	b10e      	cbz	r6, 8bc2 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    8bbe:	4618      	mov	r0, r3
}
    8bc0:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    8bc2:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    8bc4:	2224      	movs	r2, #36	; 0x24
    8bc6:	4631      	mov	r1, r6
    8bc8:	f009 f8f6 	bl	11db8 <memset>
  m_vol = vol;
    8bcc:	60a5      	str	r5, [r4, #8]
    8bce:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8bd0:	2b10      	cmp	r3, #16
    8bd2:	d018      	beq.n	8c06 <FatFile::openCluster(FatFile*)+0x56>
    8bd4:	2b20      	cmp	r3, #32
    8bd6:	d010      	beq.n	8bfa <FatFile::openCluster(FatFile*)+0x4a>
    8bd8:	2b0c      	cmp	r3, #12
    8bda:	d014      	beq.n	8c06 <FatFile::openCluster(FatFile*)+0x56>
    8bdc:	4630      	mov	r0, r6
}
    8bde:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    8be0:	2224      	movs	r2, #36	; 0x24
    8be2:	2100      	movs	r1, #0
    8be4:	f009 f8e8 	bl	11db8 <memset>
  m_flags = FILE_FLAG_READ;
    8be8:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    8bea:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    8bec:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    8bee:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    8bf0:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    8bf4:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    8bf6:	6223      	str	r3, [r4, #32]
}
    8bf8:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8bfa:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    8bfc:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8bfe:	7022      	strb	r2, [r4, #0]
  return true;
    8c00:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    8c02:	70a3      	strb	r3, [r4, #2]
}
    8c04:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8c06:	2220      	movs	r2, #32
    8c08:	e7f8      	b.n	8bfc <FatFile::openCluster(FatFile*)+0x4c>
    8c0a:	bf00      	nop

00008c0c <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    8c0c:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    8c0e:	7805      	ldrb	r5, [r0, #0]
    8c10:	b10d      	cbz	r5, 8c16 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    8c12:	2000      	movs	r0, #0
}
    8c14:	bd70      	pop	{r4, r5, r6, pc}
    8c16:	460e      	mov	r6, r1
    8c18:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    8c1a:	2224      	movs	r2, #36	; 0x24
    8c1c:	4629      	mov	r1, r5
    8c1e:	f009 f8cb 	bl	11db8 <memset>
  m_vol = vol;
    8c22:	60a6      	str	r6, [r4, #8]
    8c24:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    8c26:	2b10      	cmp	r3, #16
    8c28:	d00b      	beq.n	8c42 <FatFile::openRoot(FatVolume*)+0x36>
    8c2a:	2b20      	cmp	r3, #32
    8c2c:	d003      	beq.n	8c36 <FatFile::openRoot(FatVolume*)+0x2a>
    8c2e:	2b0c      	cmp	r3, #12
    8c30:	d007      	beq.n	8c42 <FatFile::openRoot(FatVolume*)+0x36>
    8c32:	4628      	mov	r0, r5
}
    8c34:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8c36:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    8c38:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8c3a:	7022      	strb	r2, [r4, #0]
  return true;
    8c3c:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    8c3e:	70a3      	strb	r3, [r4, #2]
}
    8c40:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8c42:	2220      	movs	r2, #32
    8c44:	e7f8      	b.n	8c38 <FatFile::openRoot(FatVolume*)+0x2c>
    8c46:	bf00      	nop

00008c48 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    8c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c4c:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const {return m_lfnOrd;}
  /** \return True if this is an open file/directory. */
  bool isOpen() const {return m_attributes;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    8c50:	7883      	ldrb	r3, [r0, #2]
    8c52:	b083      	sub	sp, #12
    8c54:	4605      	mov	r5, r0
  if (!isReadable()) {
    8c56:	07df      	lsls	r7, r3, #31
    8c58:	f140 808c 	bpl.w	8d74 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    8c5c:	4688      	mov	r8, r1
    8c5e:	7801      	ldrb	r1, [r0, #0]
    8c60:	4692      	mov	sl, r2
  if (isFile()) {
    8c62:	070e      	lsls	r6, r1, #28
    8c64:	f100 8091 	bmi.w	8d8a <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    8c68:	068c      	lsls	r4, r1, #26
    8c6a:	d508      	bpl.n	8c7e <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    8c6c:	6883      	ldr	r3, [r0, #8]
    8c6e:	895a      	ldrh	r2, [r3, #10]
    8c70:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    8c72:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    8c76:	b29b      	uxth	r3, r3
    8c78:	459a      	cmp	sl, r3
    8c7a:	bf28      	it	cs
    8c7c:	469a      	movcs	sl, r3
  while (toRead) {
    8c7e:	f1ba 0f00 	cmp.w	sl, #0
    8c82:	f000 80af 	beq.w	8de4 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    8c86:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8c88:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    8c8c:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    8c8e:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    8c90:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8c94:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    8c98:	68af      	ldr	r7, [r5, #8]
    8c9a:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    8c9e:	d53d      	bpl.n	8d1c <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    8ca0:	6a39      	ldr	r1, [r7, #32]
    8ca2:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    8ca6:	f1bb 0f00 	cmp.w	fp, #0
    8caa:	d151      	bne.n	8d50 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    8cac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8cb0:	d34e      	bcc.n	8d50 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    8cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    8cb4:	4291      	cmp	r1, r2
    8cb6:	d04b      	beq.n	8d50 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    8cb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    8cbc:	f0c0 8082 	bcc.w	8dc4 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    8cc0:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    8cc2:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    8cc4:	0680      	lsls	r0, r0, #26
    8cc6:	d405      	bmi.n	8cd4 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    8cc8:	7938      	ldrb	r0, [r7, #4]
    8cca:	eba0 0009 	sub.w	r0, r0, r9
    8cce:	4283      	cmp	r3, r0
    8cd0:	bf28      	it	cs
    8cd2:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    8cd4:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    8cd6:	ea4f 2443 	mov.w	r4, r3, lsl #9
    8cda:	d80c      	bhi.n	8cf6 <FatFile::read(void*, unsigned int)+0xae>
    8cdc:	18c8      	adds	r0, r1, r3
    8cde:	4282      	cmp	r2, r0
    8ce0:	d209      	bcs.n	8cf6 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    8ce2:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8ce6:	e9cd 1300 	strd	r1, r3, [sp]
    8cea:	f003 ff0b 	bl	cb04 <FsCache::sync()>
    8cee:	e9dd 1300 	ldrd	r1, r3, [sp]
    8cf2:	2800      	cmp	r0, #0
    8cf4:	d03e      	beq.n	8d74 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    8cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8cf8:	6802      	ldr	r2, [r0, #0]
    8cfa:	6957      	ldr	r7, [r2, #20]
    8cfc:	4642      	mov	r2, r8
    8cfe:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    8d00:	2800      	cmp	r0, #0
    8d02:	d037      	beq.n	8d74 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    8d04:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    8d06:	1b36      	subs	r6, r6, r4
    dst += n;
    8d08:	44a0      	add	r8, r4
    m_curPosition += n;
    8d0a:	4422      	add	r2, r4
    8d0c:	616a      	str	r2, [r5, #20]
  while (toRead) {
    8d0e:	d069      	beq.n	8de4 <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const {return m_attributes & FILE_ATTR_ROOT32;}
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    8d10:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    8d12:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    8d16:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    8d18:	0688      	lsls	r0, r1, #26
    8d1a:	d4c1      	bmi.n	8ca0 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    8d1c:	f897 9005 	ldrb.w	r9, [r7, #5]
    8d20:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    8d24:	f1bb 0f00 	cmp.w	fp, #0
    8d28:	d136      	bne.n	8d98 <FatFile::read(void*, unsigned int)+0x150>
    8d2a:	f1b9 0f00 	cmp.w	r9, #0
    8d2e:	d133      	bne.n	8d98 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    8d30:	2a00      	cmp	r2, #0
    8d32:	d133      	bne.n	8d9c <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    8d34:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    8d36:	bf4c      	ite	mi
    8d38:	6a3a      	ldrmi	r2, [r7, #32]
    8d3a:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    8d3c:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8d3e:	3a02      	subs	r2, #2
    8d40:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    8d42:	6979      	ldr	r1, [r7, #20]
    8d44:	4082      	lsls	r2, r0
    8d46:	4449      	add	r1, r9
    8d48:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    8d4a:	f1bb 0f00 	cmp.w	fp, #0
    8d4e:	d0ad      	beq.n	8cac <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    8d50:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    8d54:	2200      	movs	r2, #0
    8d56:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8d5a:	42b4      	cmp	r4, r6
    8d5c:	bf28      	it	cs
    8d5e:	4634      	movcs	r4, r6
    8d60:	f003 fefc 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    8d64:	b130      	cbz	r0, 8d74 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    8d66:	eb00 010b 	add.w	r1, r0, fp
    8d6a:	4622      	mov	r2, r4
    8d6c:	4640      	mov	r0, r8
    8d6e:	f004 ff95 	bl	dc9c <memcpy>
    8d72:	e7c7      	b.n	8d04 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    8d74:	786b      	ldrb	r3, [r5, #1]
  return -1;
    8d76:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    8d7a:	f043 0302 	orr.w	r3, r3, #2
    8d7e:	706b      	strb	r3, [r5, #1]
}
    8d80:	b003      	add	sp, #12
    8d82:	ecbd 8b02 	vpop	{d8}
    8d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    8d8a:	69c3      	ldr	r3, [r0, #28]
    8d8c:	6942      	ldr	r2, [r0, #20]
    8d8e:	1a9b      	subs	r3, r3, r2
    8d90:	459a      	cmp	sl, r3
    8d92:	bf28      	it	cs
    8d94:	469a      	movcs	sl, r3
    8d96:	e772      	b.n	8c7e <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    8d98:	692a      	ldr	r2, [r5, #16]
    8d9a:	e7d0      	b.n	8d3e <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    8d9c:	070b      	lsls	r3, r1, #28
    8d9e:	d505      	bpl.n	8dac <FatFile::read(void*, unsigned int)+0x164>
    8da0:	78aa      	ldrb	r2, [r5, #2]
    8da2:	0654      	lsls	r4, r2, #25
    8da4:	d502      	bpl.n	8dac <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    8da6:	692a      	ldr	r2, [r5, #16]
    8da8:	3201      	adds	r2, #1
    8daa:	e7c7      	b.n	8d3c <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8dac:	ee18 2a10 	vmov	r2, s16
    8db0:	4638      	mov	r0, r7
    8db2:	6929      	ldr	r1, [r5, #16]
    8db4:	f001 fa8c 	bl	a2d0 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    8db8:	2800      	cmp	r0, #0
    8dba:	dbdb      	blt.n	8d74 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    8dbc:	d00c      	beq.n	8dd8 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    8dbe:	68af      	ldr	r7, [r5, #8]
    8dc0:	692a      	ldr	r2, [r5, #16]
    8dc2:	e7bc      	b.n	8d3e <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    8dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8dc6:	4642      	mov	r2, r8
    8dc8:	6803      	ldr	r3, [r0, #0]
    8dca:	691b      	ldr	r3, [r3, #16]
    8dcc:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    8dce:	2800      	cmp	r0, #0
    8dd0:	d0d0      	beq.n	8d74 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    8dd2:	f44f 7400 	mov.w	r4, #512	; 0x200
    8dd6:	e795      	b.n	8d04 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    8dd8:	782b      	ldrb	r3, [r5, #0]
    8dda:	f013 0f70 	tst.w	r3, #112	; 0x70
    8dde:	d0c9      	beq.n	8d74 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    8de0:	ebaa 0a06 	sub.w	sl, sl, r6
    8de4:	4650      	mov	r0, sl
}
    8de6:	b003      	add	sp, #12
    8de8:	ecbd 8b02 	vpop	{d8}
    8dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008df0 <FatFile::peek()>:
int FatFile::peek() {
    8df0:	b570      	push	{r4, r5, r6, lr}
    8df2:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    8df4:	2201      	movs	r2, #1
    8df6:	4604      	mov	r4, r0
    8df8:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    8dfc:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    8e00:	f7ff ff22 	bl	8c48 <FatFile::read(void*, unsigned int)>
    8e04:	2801      	cmp	r0, #1
    8e06:	bf0c      	ite	eq
    8e08:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    8e0c:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    8e10:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    8e14:	b002      	add	sp, #8
    8e16:	bd70      	pop	{r4, r5, r6, pc}

00008e18 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    8e18:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    8e1a:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    8e1e:	b530      	push	{r4, r5, lr}
    8e20:	4604      	mov	r4, r0
    8e22:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    8e24:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    8e28:	d009      	beq.n	8e3e <FatFile::readDirCache(bool)+0x26>
    8e2a:	2901      	cmp	r1, #1
    8e2c:	d107      	bne.n	8e3e <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    8e2e:	3320      	adds	r3, #32
    8e30:	6143      	str	r3, [r0, #20]
    return m_buffer;
    8e32:	68a0      	ldr	r0, [r4, #8]
    8e34:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    8e36:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    8e3a:	b003      	add	sp, #12
    8e3c:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    8e3e:	2201      	movs	r2, #1
    8e40:	f10d 0107 	add.w	r1, sp, #7
    8e44:	4620      	mov	r0, r4
    8e46:	f7ff feff 	bl	8c48 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    8e4a:	b240      	sxtb	r0, r0
    8e4c:	2801      	cmp	r0, #1
    8e4e:	d103      	bne.n	8e58 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    8e50:	6963      	ldr	r3, [r4, #20]
    8e52:	331f      	adds	r3, #31
    8e54:	6163      	str	r3, [r4, #20]
    8e56:	e7ec      	b.n	8e32 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    8e58:	2000      	movs	r0, #0
    8e5a:	e7ee      	b.n	8e3a <FatFile::readDirCache(bool)+0x22>

00008e5c <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    8e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    8e60:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    8e62:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    8e64:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    8e66:	f013 0f18 	tst.w	r3, #24
    8e6a:	9608      	str	r6, [sp, #32]
    8e6c:	9611      	str	r6, [sp, #68]	; 0x44
    8e6e:	d006      	beq.n	8e7e <FatFile::rename(FatFile*, char const*)+0x22>
    8e70:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    8e72:	6883      	ldr	r3, [r0, #8]
    8e74:	688a      	ldr	r2, [r1, #8]
    8e76:	4604      	mov	r4, r0
    8e78:	460d      	mov	r5, r1
    8e7a:	429a      	cmp	r2, r3
    8e7c:	d003      	beq.n	8e86 <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    8e7e:	2000      	movs	r0, #0
}
    8e80:	b01a      	add	sp, #104	; 0x68
    8e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e86:	f7ff fbc3 	bl	8610 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    8e8a:	46a6      	mov	lr, r4
    8e8c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    8e90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8e94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8e98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8e9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8ea0:	f8de 3000 	ldr.w	r3, [lr]
    8ea4:	4632      	mov	r2, r6
    8ea6:	69a1      	ldr	r1, [r4, #24]
    8ea8:	f8cc 3000 	str.w	r3, [ip]
    8eac:	68a3      	ldr	r3, [r4, #8]
    8eae:	f103 0028 	add.w	r0, r3, #40	; 0x28
    8eb2:	f003 fe53 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8eb6:	2800      	cmp	r0, #0
    8eb8:	d0e1      	beq.n	8e7e <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    8eba:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    8ebc:	46ec      	mov	ip, sp
  if (isFile()) {
    8ebe:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    8ec2:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    8ec6:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    8eca:	0152      	lsls	r2, r2, #5
    8ecc:	f8de 1004 	ldr.w	r1, [lr, #4]
    8ed0:	5880      	ldr	r0, [r0, r2]
    8ed2:	f8de 300c 	ldr.w	r3, [lr, #12]
    8ed6:	f8de 2008 	ldr.w	r2, [lr, #8]
    8eda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8ede:	f8de 1014 	ldr.w	r1, [lr, #20]
    8ee2:	f8de 2018 	ldr.w	r2, [lr, #24]
    8ee6:	f8de 301c 	ldr.w	r3, [lr, #28]
    8eea:	f8de 0010 	ldr.w	r0, [lr, #16]
    8eee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    8ef2:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8ef6:	463a      	mov	r2, r7
    8ef8:	4629      	mov	r1, r5
  if (isFile()) {
    8efa:	f040 809b 	bne.w	9034 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    8efe:	a808      	add	r0, sp, #32
    8f00:	f7ff fd56 	bl	89b0 <FatFile::mkdir(FatFile*, char const*, bool)>
    8f04:	2800      	cmp	r0, #0
    8f06:	d0ba      	beq.n	8e7e <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    8f08:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    8f0a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    8f0e:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    8f10:	990e      	ldr	r1, [sp, #56]	; 0x38
    8f12:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    8f14:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    8f16:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8f1a:	68a0      	ldr	r0, [r4, #8]
    8f1c:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    8f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8f20:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    8f22:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    8f24:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    8f26:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    8f2a:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    8f2e:	f003 fe15 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8f32:	2800      	cmp	r0, #0
    8f34:	d0a3      	beq.n	8e7e <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    8f36:	88a3      	ldrh	r3, [r4, #4]
    8f38:	f003 030f 	and.w	r3, r3, #15
    8f3c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    8f40:	f8dd 300d 	ldr.w	r3, [sp, #13]
    8f44:	f8c0 300d 	str.w	r3, [r0, #13]
    8f48:	f8dd 3011 	ldr.w	r3, [sp, #17]
    8f4c:	f8c0 3011 	str.w	r3, [r0, #17]
    8f50:	f8dd 3015 	ldr.w	r3, [sp, #21]
    8f54:	f8c0 3015 	str.w	r3, [r0, #21]
    8f58:	f8dd 3019 	ldr.w	r3, [sp, #25]
    8f5c:	f8c0 3019 	str.w	r3, [r0, #25]
    8f60:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    8f64:	f8a0 301d 	strh.w	r3, [r0, #29]
    8f68:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8f6c:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    8f6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8f72:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    8f74:	2e00      	cmp	r6, #0
    8f76:	d03b      	beq.n	8ff0 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    8f78:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8f7a:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    8f7c:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8f7e:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    8f80:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8f82:	408b      	lsls	r3, r1
    8f84:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    8f88:	4419      	add	r1, r3
    8f8a:	f003 fde7 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    8f8e:	4605      	mov	r5, r0
    8f90:	2800      	cmp	r0, #0
    8f92:	f43f af74 	beq.w	8e7e <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    8f96:	6a00      	ldr	r0, [r0, #32]
    8f98:	466f      	mov	r7, sp
    8f9a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    8f9c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    8f9e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    8fa0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    8fa2:	6b28      	ldr	r0, [r5, #48]	; 0x30
    8fa4:	6b69      	ldr	r1, [r5, #52]	; 0x34
    8fa6:	6baa      	ldr	r2, [r5, #56]	; 0x38
    8fa8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    8faa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    8fac:	4631      	mov	r1, r6
    8fae:	68a0      	ldr	r0, [r4, #8]
    8fb0:	f001 f9a0 	bl	a2f4 <FatPartition::freeChain(unsigned long)>
    8fb4:	2800      	cmp	r0, #0
    8fb6:	f43f af62 	beq.w	8e7e <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    8fba:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8fbc:	6a23      	ldr	r3, [r4, #32]
    8fbe:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    8fc0:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8fc2:	3b02      	subs	r3, #2
    8fc4:	f850 1c14 	ldr.w	r1, [r0, #-20]
    8fc8:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    8fca:	2201      	movs	r2, #1
    8fcc:	4419      	add	r1, r3
    8fce:	f003 fdc5 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    8fd2:	4606      	mov	r6, r0
    8fd4:	2800      	cmp	r0, #0
    8fd6:	f43f af52 	beq.w	8e7e <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    8fda:	466d      	mov	r5, sp
    8fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8fde:	6230      	str	r0, [r6, #32]
    8fe0:	6271      	str	r1, [r6, #36]	; 0x24
    8fe2:	62b2      	str	r2, [r6, #40]	; 0x28
    8fe4:	62f3      	str	r3, [r6, #44]	; 0x2c
    8fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8fe8:	6330      	str	r0, [r6, #48]	; 0x30
    8fea:	6371      	str	r1, [r6, #52]	; 0x34
    8fec:	63b2      	str	r2, [r6, #56]	; 0x38
    8fee:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    8ff0:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    8ff2:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    8ff4:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    8ff6:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    8ff8:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    8ffa:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    8ffe:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    9002:	f000 fe2d 	bl	9c60 <FatFile::remove()>
    9006:	2800      	cmp	r0, #0
    9008:	f43f af39 	beq.w	8e7e <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    900c:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    900e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9012:	f003 fd77 	bl	cb04 <FsCache::sync()>
    9016:	2800      	cmp	r0, #0
    9018:	f43f af31 	beq.w	8e7e <FatFile::rename(FatFile*, char const*)+0x22>
    901c:	f504 700e 	add.w	r0, r4, #568	; 0x238
    9020:	f003 fd70 	bl	cb04 <FsCache::sync()>
    9024:	2800      	cmp	r0, #0
    9026:	f43f af2a 	beq.w	8e7e <FatFile::rename(FatFile*, char const*)+0x22>
    902a:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    902c:	6803      	ldr	r3, [r0, #0]
    902e:	6a1b      	ldr	r3, [r3, #32]
    9030:	4798      	blx	r3
    9032:	e725      	b.n	8e80 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    9034:	f640 2301 	movw	r3, #2561	; 0xa01
    9038:	4660      	mov	r0, ip
    903a:	f7ff fd2f 	bl	8a9c <FatFile::open(FatFile*, char const*, int)>
    903e:	2800      	cmp	r0, #0
    9040:	f47f af63 	bne.w	8f0a <FatFile::rename(FatFile*, char const*)+0xae>
    9044:	e71b      	b.n	8e7e <FatFile::rename(FatFile*, char const*)+0x22>
    9046:	bf00      	nop

00009048 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    9048:	7803      	ldrb	r3, [r0, #0]
    904a:	06da      	lsls	r2, r3, #27
    904c:	d401      	bmi.n	9052 <FatFile::rmdir()+0xa>
}
    904e:	2000      	movs	r0, #0
    9050:	4770      	bx	lr
  if (pos == m_curPosition) {
    9052:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    9054:	b530      	push	{r4, r5, lr}
    9056:	4604      	mov	r4, r0
    9058:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    905a:	b133      	cbz	r3, 906a <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    905c:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    905e:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9060:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    9064:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9068:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    906a:	2300      	movs	r3, #0
    906c:	e00f      	b.n	908e <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    906e:	6163      	str	r3, [r4, #20]
    9070:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    9072:	016a      	lsls	r2, r5, #5
    9074:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    9076:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    9078:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    907c:	b1ea      	cbz	r2, 90ba <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    907e:	2ae5      	cmp	r2, #229	; 0xe5
    9080:	d004      	beq.n	908c <FatFile::rmdir()+0x44>
    9082:	2a2e      	cmp	r2, #46	; 0x2e
    9084:	d002      	beq.n	908c <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    9086:	7adb      	ldrb	r3, [r3, #11]
    9088:	071b      	lsls	r3, r3, #28
    908a:	d522      	bpl.n	90d2 <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    908c:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    908e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    9092:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    9096:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    909a:	d1e8      	bne.n	906e <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    909c:	2201      	movs	r2, #1
    909e:	f10d 0107 	add.w	r1, sp, #7
    90a2:	4620      	mov	r0, r4
    90a4:	f7ff fdd0 	bl	8c48 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    90a8:	b240      	sxtb	r0, r0
    90aa:	2801      	cmp	r0, #1
    90ac:	d103      	bne.n	90b6 <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    90ae:	6963      	ldr	r3, [r4, #20]
    90b0:	331f      	adds	r3, #31
    90b2:	6163      	str	r3, [r4, #20]
    90b4:	e7dc      	b.n	9070 <FatFile::rmdir()+0x28>
      if (!getError()) {
    90b6:	7863      	ldrb	r3, [r4, #1]
    90b8:	b95b      	cbnz	r3, 90d2 <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    90ba:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    90bc:	2208      	movs	r2, #8
  return remove();
    90be:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    90c0:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    90c4:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    90c6:	70a3      	strb	r3, [r4, #2]
}
    90c8:	b003      	add	sp, #12
    90ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    90ce:	f000 bdc7 	b.w	9c60 <FatFile::remove()>
}
    90d2:	2000      	movs	r0, #0
    90d4:	b003      	add	sp, #12
    90d6:	bd30      	pop	{r4, r5, pc}

000090d8 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    90d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    90dc:	7803      	ldrb	r3, [r0, #0]
    90de:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    90e0:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    90e2:	2b00      	cmp	r3, #0
    90e4:	d039      	beq.n	915a <FatFile::seekSet(unsigned long)+0x82>
    90e6:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    90e8:	6941      	ldr	r1, [r0, #20]
    90ea:	42a9      	cmp	r1, r5
    90ec:	d042      	beq.n	9174 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    90ee:	2d00      	cmp	r5, #0
    90f0:	d037      	beq.n	9162 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    90f2:	0718      	lsls	r0, r3, #28
    90f4:	d52a      	bpl.n	914c <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    90f6:	69e2      	ldr	r2, [r4, #28]
    90f8:	42aa      	cmp	r2, r5
    90fa:	d32e      	bcc.n	915a <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    90fc:	f8d4 c008 	ldr.w	ip, [r4, #8]
    9100:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    9102:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    9104:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    9108:	f012 0f40 	tst.w	r2, #64	; 0x40
    910c:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    9110:	b2c0      	uxtb	r0, r0
    9112:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    9116:	d130      	bne.n	917a <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    9118:	1e4a      	subs	r2, r1, #1
    911a:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    911c:	b109      	cbz	r1, 9122 <FatFile::seekSet(unsigned long)+0x4a>
    911e:	4296      	cmp	r6, r2
    9120:	d22f      	bcs.n	9182 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    9122:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    9124:	bf4c      	ite	mi
    9126:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    912a:	6a23      	ldrpl	r3, [r4, #32]
    912c:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    912e:	f104 0810 	add.w	r8, r4, #16
    9132:	e006      	b.n	9142 <FatFile::seekSet(unsigned long)+0x6a>
    9134:	6921      	ldr	r1, [r4, #16]
    9136:	3e01      	subs	r6, #1
    9138:	68a0      	ldr	r0, [r4, #8]
    913a:	f001 f8c9 	bl	a2d0 <FatPartition::fatGet(unsigned long, unsigned long*)>
    913e:	2800      	cmp	r0, #0
    9140:	dd0b      	ble.n	915a <FatFile::seekSet(unsigned long)+0x82>
    9142:	4642      	mov	r2, r8
  while (nNew--) {
    9144:	2e00      	cmp	r6, #0
    9146:	d1f5      	bne.n	9134 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9148:	78a2      	ldrb	r2, [r4, #2]
    914a:	e00c      	b.n	9166 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    914c:	069a      	lsls	r2, r3, #26
    914e:	d5d5      	bpl.n	90fc <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    9150:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    9152:	895b      	ldrh	r3, [r3, #10]
    9154:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    9158:	d9f6      	bls.n	9148 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    915a:	2000      	movs	r0, #0
  m_curCluster = tmp;
    915c:	6127      	str	r7, [r4, #16]
}
    915e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9162:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    9164:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9166:	f022 0220 	bic.w	r2, r2, #32
  return true;
    916a:	2001      	movs	r0, #1
  m_curPosition = pos;
    916c:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    916e:	70a2      	strb	r2, [r4, #2]
}
    9170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    9174:	2001      	movs	r0, #1
}
    9176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    917a:	6a23      	ldr	r3, [r4, #32]
    917c:	4433      	add	r3, r6
    917e:	6123      	str	r3, [r4, #16]
    goto done;
    9180:	e7f1      	b.n	9166 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    9182:	1ab6      	subs	r6, r6, r2
    9184:	e7d3      	b.n	912e <FatFile::seekSet(unsigned long)+0x56>
    9186:	bf00      	nop

00009188 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    9188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    918c:	460e      	mov	r6, r1
    918e:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    9190:	2100      	movs	r1, #0
    9192:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    9194:	4604      	mov	r4, r0
    9196:	4698      	mov	r8, r3
    9198:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    919c:	f008 fe0c 	bl	11db8 <memset>
  m_vol = dirFile->m_vol;
    91a0:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    91a2:	6a33      	ldr	r3, [r6, #32]
    91a4:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    91a8:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    91aa:	f005 050f 	and.w	r5, r5, #15
    91ae:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    91b2:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    91b6:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    91b8:	070b      	lsls	r3, r1, #28
    91ba:	d411      	bmi.n	91e0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    91bc:	f001 0117 	and.w	r1, r1, #23
    91c0:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    91c2:	7ad3      	ldrb	r3, [r2, #11]
    91c4:	f013 0f18 	tst.w	r3, #24
    91c8:	d102      	bne.n	91d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    91ca:	f041 0108 	orr.w	r1, r1, #8
    91ce:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    91d0:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    91d4:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    91d6:	2b01      	cmp	r3, #1
    91d8:	d038      	beq.n	924c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    91da:	2b02      	cmp	r3, #2
    91dc:	d006      	beq.n	91ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    91de:	b1f3      	cbz	r3, 921e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    91e0:	2300      	movs	r3, #0
  return false;
    91e2:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    91e4:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    91e6:	70a3      	strb	r3, [r4, #2]
}
    91e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    91ec:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    91ee:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    91f0:	06cd      	lsls	r5, r1, #27
    91f2:	d4f5      	bmi.n	91e0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    91f4:	07ce      	lsls	r6, r1, #31
    91f6:	d4f3      	bmi.n	91e0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    91f8:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    91fc:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    9200:	ea43 0301 	orr.w	r3, r3, r1
    9204:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    9206:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    9208:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    920a:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    920c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    920e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    9212:	d012      	beq.n	923a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    9214:	bb19      	cbnz	r1, 925e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    9216:	f063 037f 	orn	r3, r3, #127	; 0x7f
    921a:	70a3      	strb	r3, [r4, #2]
    921c:	e010      	b.n	9240 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    921e:	f418 6f80 	tst.w	r8, #1024	; 0x400
    9222:	d1dd      	bne.n	91e0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    9224:	f008 0308 	and.w	r3, r8, #8
    9228:	f043 0301 	orr.w	r3, r3, #1
    922c:	70a3      	strb	r3, [r4, #2]
    922e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    9230:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    9232:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    9234:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    9236:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    923a:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    923c:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    923e:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    9240:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    9244:	d104      	bne.n	9250 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    9246:	2001      	movs	r0, #1
}
    9248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    924c:	2302      	movs	r3, #2
    924e:	e7ce      	b.n	91ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    9250:	69e1      	ldr	r1, [r4, #28]
    9252:	4620      	mov	r0, r4
    9254:	f7ff ff40 	bl	90d8 <FatFile::seekSet(unsigned long)>
    9258:	2800      	cmp	r0, #0
    925a:	d1f4      	bne.n	9246 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    925c:	e7c0      	b.n	91e0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    925e:	f001 f849 	bl	a2f4 <FatPartition::freeChain(unsigned long)>
    9262:	2800      	cmp	r0, #0
    9264:	d0bc      	beq.n	91e0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    9266:	78a3      	ldrb	r3, [r4, #2]
    9268:	e7d5      	b.n	9216 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    926a:	bf00      	nop

0000926c <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
    926c:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    926e:	2b00      	cmp	r3, #0
    9270:	d145      	bne.n	92fe <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    9272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    9276:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    9278:	b084      	sub	sp, #16
    927a:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    927c:	f013 0f70 	tst.w	r3, #112	; 0x70
    9280:	d030      	beq.n	92e4 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
    9282:	694b      	ldr	r3, [r1, #20]
    9284:	f013 051f 	ands.w	r5, r3, #31
    9288:	d12c      	bne.n	92e4 <FatFile::openNext(FatFile*, int)+0x78>
    928a:	4606      	mov	r6, r0
    928c:	4690      	mov	r8, r2
    928e:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
    9290:	2201      	movs	r2, #1
    9292:	f10d 010f 	add.w	r1, sp, #15
    9296:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    9298:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
    929c:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    929e:	f7ff fcd3 	bl	8c48 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    92a2:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    92a4:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
    92a8:	2801      	cmp	r0, #1
    92aa:	d11b      	bne.n	92e4 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    92ac:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
    92ae:	68a1      	ldr	r1, [r4, #8]
    92b0:	331f      	adds	r3, #31
    92b2:	f101 0c38 	add.w	ip, r1, #56	; 0x38
    92b6:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    92b8:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    92bc:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    92c0:	b182      	cbz	r2, 92e4 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    92c2:	2a2e      	cmp	r2, #46	; 0x2e
    92c4:	d012      	beq.n	92ec <FatFile::openNext(FatFile*, int)+0x80>
    92c6:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
    92ca:	fab0 f080 	clz	r0, r0
    92ce:	0940      	lsrs	r0, r0, #5
    92d0:	b960      	cbnz	r0, 92ec <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    92d2:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
    92d6:	f011 0e08 	ands.w	lr, r1, #8
    92da:	d012      	beq.n	9302 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
    92dc:	290f      	cmp	r1, #15
    92de:	d007      	beq.n	92f0 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    92e0:	4605      	mov	r5, r0
    92e2:	e7d5      	b.n	9290 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    92e4:	2000      	movs	r0, #0
}
    92e6:	b004      	add	sp, #16
    92e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    92ec:	2500      	movs	r5, #0
    92ee:	e7cf      	b.n	9290 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    92f0:	0651      	lsls	r1, r2, #25
    92f2:	d5cd      	bpl.n	9290 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    92f4:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
    92f8:	f89c 900d 	ldrb.w	r9, [ip, #13]
    92fc:	e7c8      	b.n	9290 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    92fe:	2000      	movs	r0, #0
}
    9300:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    9302:	b185      	cbz	r5, 9326 <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    9304:	f10c 010a 	add.w	r1, ip, #10
    9308:	e001      	b.n	930e <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    930a:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    930e:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    9312:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9314:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
    9318:	fa52 f383 	uxtab	r3, r2, r3
    931c:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    9320:	d1f3      	bne.n	930a <FatFile::openNext(FatFile*, int)+0x9e>
    9322:	45ce      	cmp	lr, r9
    9324:	d1de      	bne.n	92e4 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    9326:	4643      	mov	r3, r8
    9328:	b2ba      	uxth	r2, r7
    932a:	4621      	mov	r1, r4
    932c:	4630      	mov	r0, r6
    932e:	9500      	str	r5, [sp, #0]
    9330:	f7ff ff2a 	bl	9188 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    9334:	e7d7      	b.n	92e6 <FatFile::openNext(FatFile*, int)+0x7a>
    9336:	bf00      	nop

00009338 <FatFile::sync()>:
  if (!isOpen()) {
    9338:	7803      	ldrb	r3, [r0, #0]
    933a:	b10b      	cbz	r3, 9340 <FatFile::sync()+0x8>
    933c:	f7ff b968 	b.w	8610 <FatFile::sync() [clone .part.0]>
}
    9340:	2001      	movs	r0, #1
    9342:	4770      	bx	lr

00009344 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    9344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    9348:	7883      	ldrb	r3, [r0, #2]
    934a:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    934c:	079c      	lsls	r4, r3, #30
    934e:	d577      	bpl.n	9440 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    9350:	4688      	mov	r8, r1
    9352:	0719      	lsls	r1, r3, #28
    9354:	4691      	mov	r9, r2
    9356:	f100 80b5 	bmi.w	94c4 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    935a:	696b      	ldr	r3, [r5, #20]
    935c:	eb13 0209 	adds.w	r2, r3, r9
    9360:	d26e      	bcs.n	9440 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    9362:	f1b9 0f00 	cmp.w	r9, #0
    9366:	d040      	beq.n	93ea <FatFile::write(void const*, unsigned int)+0xa6>
    9368:	464f      	mov	r7, r9
    m_status = 0;
    936a:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    936e:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    9370:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    9374:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    9376:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    9378:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    937c:	d13f      	bne.n	93fe <FatFile::write(void const*, unsigned int)+0xba>
    937e:	2e00      	cmp	r6, #0
    9380:	d13d      	bne.n	93fe <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    9382:	2900      	cmp	r1, #0
    9384:	d06e      	beq.n	9464 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    9386:	78aa      	ldrb	r2, [r5, #2]
    9388:	0652      	lsls	r2, r2, #25
    938a:	d576      	bpl.n	947a <FatFile::write(void const*, unsigned int)+0x136>
    938c:	69ea      	ldr	r2, [r5, #28]
    938e:	429a      	cmp	r2, r3
    9390:	d973      	bls.n	947a <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    9392:	3101      	adds	r1, #1
    9394:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    9396:	3902      	subs	r1, #2
    9398:	7982      	ldrb	r2, [r0, #6]
    939a:	6943      	ldr	r3, [r0, #20]
    939c:	4091      	lsls	r1, r2
    939e:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    93a0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    93a4:	d353      	bcc.n	944e <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    93a6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    93aa:	d370      	bcc.n	948e <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    93ac:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    93ae:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    93b0:	1b1b      	subs	r3, r3, r4
    93b2:	4293      	cmp	r3, r2
    93b4:	bf28      	it	cs
    93b6:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    93b8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    93ba:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    93bc:	ea4f 2443 	mov.w	r4, r3, lsl #9
    93c0:	d307      	bcc.n	93d2 <FatFile::write(void const*, unsigned int)+0x8e>
    93c2:	185e      	adds	r6, r3, r1
    93c4:	42b2      	cmp	r2, r6
    93c6:	d204      	bcs.n	93d2 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    93c8:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    93cc:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    93d0:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    93d2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    93d4:	4642      	mov	r2, r8
    93d6:	6806      	ldr	r6, [r0, #0]
    93d8:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    93da:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    93dc:	b380      	cbz	r0, 9440 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    93de:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    93e0:	1b3f      	subs	r7, r7, r4
    src += n;
    93e2:	44a0      	add	r8, r4
    m_curPosition += n;
    93e4:	4423      	add	r3, r4
    93e6:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    93e8:	d1c1      	bne.n	936e <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    93ea:	69ea      	ldr	r2, [r5, #28]
    93ec:	429a      	cmp	r2, r3
    93ee:	d276      	bcs.n	94de <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    93f0:	78aa      	ldrb	r2, [r5, #2]
    93f2:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    93f4:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    93f6:	f062 037f 	orn	r3, r2, #127	; 0x7f
    93fa:	70ab      	strb	r3, [r5, #2]
    93fc:	e025      	b.n	944a <FatFile::write(void const*, unsigned int)+0x106>
    93fe:	7982      	ldrb	r2, [r0, #6]
    9400:	3902      	subs	r1, #2
    9402:	6943      	ldr	r3, [r0, #20]
    9404:	4091      	lsls	r1, r2
    9406:	4419      	add	r1, r3
                      + sectorOfCluster;
    9408:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    940a:	2e00      	cmp	r6, #0
    940c:	d0c8      	beq.n	93a0 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    940e:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    9412:	2201      	movs	r2, #1
    9414:	42bc      	cmp	r4, r7
    9416:	bf28      	it	cs
    9418:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    941a:	3028      	adds	r0, #40	; 0x28
    941c:	f003 fb9e 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9420:	b170      	cbz	r0, 9440 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    9422:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    9424:	4426      	add	r6, r4
      memcpy(dst, src, n);
    9426:	4622      	mov	r2, r4
    9428:	4641      	mov	r1, r8
    942a:	f004 fc37 	bl	dc9c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    942e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    9432:	68a8      	ldr	r0, [r5, #8]
    9434:	d1d3      	bne.n	93de <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    9436:	3028      	adds	r0, #40	; 0x28
    9438:	f003 fb64 	bl	cb04 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    943c:	2800      	cmp	r0, #0
    943e:	d1ce      	bne.n	93de <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    9440:	786b      	ldrb	r3, [r5, #1]
  return 0;
    9442:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    9444:	f043 0301 	orr.w	r3, r3, #1
    9448:	706b      	strb	r3, [r5, #1]
}
    944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    944e:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    9452:	696a      	ldr	r2, [r5, #20]
    9454:	69eb      	ldr	r3, [r5, #28]
    9456:	42bc      	cmp	r4, r7
    9458:	bf28      	it	cs
    945a:	463c      	movcs	r4, r7
    945c:	429a      	cmp	r2, r3
    945e:	d305      	bcc.n	946c <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    9460:	2205      	movs	r2, #5
    9462:	e7da      	b.n	941a <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    9464:	6a29      	ldr	r1, [r5, #32]
    9466:	b321      	cbz	r1, 94b2 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    9468:	6129      	str	r1, [r5, #16]
    946a:	e794      	b.n	9396 <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    946c:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    946e:	f013 0f20 	tst.w	r3, #32
    9472:	bf14      	ite	ne
    9474:	2205      	movne	r2, #5
    9476:	2201      	moveq	r2, #1
    9478:	e7cf      	b.n	941a <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    947a:	f105 0210 	add.w	r2, r5, #16
    947e:	f000 ff27 	bl	a2d0 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    9482:	2800      	cmp	r0, #0
    9484:	dbdc      	blt.n	9440 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    9486:	d024      	beq.n	94d2 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    9488:	68a8      	ldr	r0, [r5, #8]
    948a:	6929      	ldr	r1, [r5, #16]
    948c:	e783      	b.n	9396 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    948e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9490:	428b      	cmp	r3, r1
    9492:	d104      	bne.n	949e <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    9494:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    9498:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    949c:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    949e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    94a0:	4642      	mov	r2, r8
    94a2:	6803      	ldr	r3, [r0, #0]
    94a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    94a6:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    94a8:	2800      	cmp	r0, #0
    94aa:	d0c9      	beq.n	9440 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    94ac:	f44f 7400 	mov.w	r4, #512	; 0x200
    94b0:	e795      	b.n	93de <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    94b2:	4628      	mov	r0, r5
    94b4:	f7ff f906 	bl	86c4 <FatFile::addCluster()>
    94b8:	2800      	cmp	r0, #0
    94ba:	d0c1      	beq.n	9440 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    94bc:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    94be:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    94c0:	6229      	str	r1, [r5, #32]
    94c2:	e768      	b.n	9396 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    94c4:	69c1      	ldr	r1, [r0, #28]
    94c6:	f7ff fe07 	bl	90d8 <FatFile::seekSet(unsigned long)>
    94ca:	2800      	cmp	r0, #0
    94cc:	f47f af45 	bne.w	935a <FatFile::write(void const*, unsigned int)+0x16>
    94d0:	e7b6      	b.n	9440 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    94d2:	4628      	mov	r0, r5
    94d4:	f7ff f8f6 	bl	86c4 <FatFile::addCluster()>
    94d8:	2800      	cmp	r0, #0
    94da:	d1d5      	bne.n	9488 <FatFile::write(void const*, unsigned int)+0x144>
    94dc:	e7b0      	b.n	9440 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    94de:	4b05      	ldr	r3, [pc, #20]	; (94f4 <FatFile::write(void const*, unsigned int)+0x1b0>)
    94e0:	681b      	ldr	r3, [r3, #0]
    94e2:	b12b      	cbz	r3, 94f0 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    94e4:	78ab      	ldrb	r3, [r5, #2]
    94e6:	4648      	mov	r0, r9
    94e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    94ec:	70ab      	strb	r3, [r5, #2]
    94ee:	e7ac      	b.n	944a <FatFile::write(void const*, unsigned int)+0x106>
    94f0:	4648      	mov	r0, r9
    94f2:	e7aa      	b.n	944a <FatFile::write(void const*, unsigned int)+0x106>
    94f4:	20034730 	.word	0x20034730

000094f8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    94f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    94fc:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    94fe:	b08d      	sub	sp, #52	; 0x34
    9500:	4614      	mov	r4, r2
    next = begin;
    9502:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9504:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    9506:	4606      	mov	r6, r0
    9508:	4689      	mov	r9, r1
  FatFile dir = *this;
    950a:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    950c:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    950e:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    9512:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    9516:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    9518:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    951c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    951e:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    9522:	6065      	str	r5, [r4, #4]
    9524:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9526:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    9528:	f8a4 e00c 	strh.w	lr, [r4, #12]
    952c:	2b00      	cmp	r3, #0
    952e:	d03f      	beq.n	95b0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    9530:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    9534:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9538:	a803      	add	r0, sp, #12
    953a:	b289      	uxth	r1, r1
    953c:	0149      	lsls	r1, r1, #5
    953e:	f7ff fdcb 	bl	90d8 <FatFile::seekSet(unsigned long)>
    9542:	b350      	cbz	r0, 959a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    9544:	2100      	movs	r1, #0
    9546:	a803      	add	r0, sp, #12
    9548:	f7ff fc66 	bl	8e18 <FatFile::readDirCache(bool)>
    if (!ldir) {
    954c:	4607      	mov	r7, r0
    954e:	b320      	cbz	r0, 959a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    9550:	2500      	movs	r5, #0
    9552:	e00d      	b.n	9570 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    9554:	f003 fb2a 	bl	cbac <FsName::get16()>
    9558:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    955a:	4658      	mov	r0, fp
    955c:	f003 fbea 	bl	cd34 <toUpcase(unsigned short)>
    9560:	4683      	mov	fp, r0
    9562:	4640      	mov	r0, r8
    9564:	f003 fbe6 	bl	cd34 <toUpcase(unsigned short)>
    9568:	4583      	cmp	fp, r0
    956a:	d116      	bne.n	959a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    956c:	2d0d      	cmp	r5, #13
    956e:	d018      	beq.n	95a2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    9570:	b2ea      	uxtb	r2, r5
    9572:	4639      	mov	r1, r7
    9574:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    9576:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    9578:	f000 fc18 	bl	9dac <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    957c:	89a3      	ldrh	r3, [r4, #12]
    957e:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    9580:	4620      	mov	r0, r4
    9582:	2b00      	cmp	r3, #0
    9584:	d1e6      	bne.n	9554 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    9586:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    958a:	4293      	cmp	r3, r2
    958c:	d1e2      	bne.n	9554 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    958e:	fabb f08b 	clz	r0, fp
    9592:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    9594:	b00d      	add	sp, #52	; 0x34
    9596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    959a:	2000      	movs	r0, #0
}
    959c:	b00d      	add	sp, #52	; 0x34
    959e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    95a2:	f10a 0a01 	add.w	sl, sl, #1
    95a6:	9b01      	ldr	r3, [sp, #4]
    95a8:	fa5f fa8a 	uxtb.w	sl, sl
    95ac:	4553      	cmp	r3, sl
    95ae:	d2c1      	bcs.n	9534 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    95b0:	2001      	movs	r0, #1
    95b2:	e7ef      	b.n	9594 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

000095b4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    95b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    95b8:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    95ba:	b08d      	sub	sp, #52	; 0x34
    95bc:	4616      	mov	r6, r2
    95be:	469a      	mov	sl, r3
  FatFile dir = *this;
    95c0:	f10d 0c0c 	add.w	ip, sp, #12
    95c4:	f102 0415 	add.w	r4, r2, #21
    95c8:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    95cc:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
    95ce:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    95d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    95d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    95d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    95da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    95de:	683b      	ldr	r3, [r7, #0]
    95e0:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    95e4:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    95e8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    95ec:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    95f0:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    95f2:	fa52 f383 	uxtab	r3, r2, r3
    95f6:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    95fa:	d1f3      	bne.n	95e4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    95fc:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    95fe:	f04f 0800 	mov.w	r8, #0
    next = begin;
    9602:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    9604:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9608:	f1ba 0f00 	cmp.w	sl, #0
    960c:	d04e      	beq.n	96ac <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    960e:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    9610:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9612:	a803      	add	r0, sp, #12
    9614:	1bd9      	subs	r1, r3, r7
    9616:	b289      	uxth	r1, r1
    9618:	0149      	lsls	r1, r1, #5
    961a:	f7ff fd5d 	bl	90d8 <FatFile::seekSet(unsigned long)>
    961e:	2800      	cmp	r0, #0
    9620:	d055      	beq.n	96ce <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    9622:	2100      	movs	r1, #0
    9624:	a803      	add	r0, sp, #12
    9626:	f7ff fbf7 	bl	8e18 <FatFile::readDirCache(bool)>
    if (!ldir) {
    962a:	2800      	cmp	r0, #0
    962c:	d04f      	beq.n	96ce <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    962e:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    9630:	4557      	cmp	r7, sl
    9632:	f100 0b01 	add.w	fp, r0, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    9636:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    963a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    963e:	f04f 0500 	mov.w	r5, #0
    9642:	f043 0301 	orr.w	r3, r3, #1
    9646:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    964a:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    964e:	bf0c      	ite	eq
    9650:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    9654:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    9656:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    9658:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    965c:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    965e:	7303      	strb	r3, [r0, #12]
    9660:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    9664:	f880 900d 	strb.w	r9, [r0, #13]
    9668:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    966a:	e006      	b.n	967a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    966c:	f8ab 0000 	strh.w	r0, [fp]
    9670:	3401      	adds	r4, #1
    9672:	3501      	adds	r5, #1
    9674:	f10b 0b02 	add.w	fp, fp, #2
    9678:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    967a:	89b0      	ldrh	r0, [r6, #12]
    967c:	b918      	cbnz	r0, 9686 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    967e:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    9682:	429a      	cmp	r2, r3
    9684:	d016      	beq.n	96b4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    9686:	4630      	mov	r0, r6
    9688:	f003 fa90 	bl	cbac <FsName::get16()>
  if (i < 5) {
    968c:	2d04      	cmp	r5, #4
    968e:	b2eb      	uxtb	r3, r5
    9690:	d9ec      	bls.n	966c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    9692:	2b0a      	cmp	r3, #10
    9694:	d802      	bhi.n	969c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    9696:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    969a:	e7e9      	b.n	9670 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    969c:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    969e:	f8ab 0005 	strh.w	r0, [fp, #5]
    96a2:	d1e5      	bne.n	9670 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    96a4:	3701      	adds	r7, #1
    96a6:	b2ff      	uxtb	r7, r7
    96a8:	45ba      	cmp	sl, r7
    96aa:	d2b1      	bcs.n	9610 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    96ac:	2001      	movs	r0, #1

 fail:
  return false;
}
    96ae:	b00d      	add	sp, #52	; 0x34
    96b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    96b4:	f1b8 0f00 	cmp.w	r8, #0
    96b8:	d006      	beq.n	96c8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    96ba:	f108 0801 	add.w	r8, r8, #1
    96be:	f64f 70ff 	movw	r0, #65535	; 0xffff
    96c2:	fa5f f888 	uxtb.w	r8, r8
    96c6:	e7e1      	b.n	968c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    96c8:	f04f 0801 	mov.w	r8, #1
    96cc:	e7de      	b.n	968c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    96ce:	2000      	movs	r0, #0
}
    96d0:	b00d      	add	sp, #52	; 0x34
    96d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96d6:	bf00      	nop

000096d8 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    96d8:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    96da:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    96de:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    96e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    96e6:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    96ea:	4686      	mov	lr, r0
  const char* end = fname->end;
    96ec:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    96ee:	6051      	str	r1, [r2, #4]
    96f0:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    96f4:	781a      	ldrb	r2, [r3, #0]
    96f6:	2a2e      	cmp	r2, #46	; 0x2e
    96f8:	bf14      	ite	ne
    96fa:	2001      	movne	r0, #1
    96fc:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    96fe:	d103      	bne.n	9708 <FatFile::makeSFN(FatLfn_t*)+0x30>
    9700:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9704:	2a2e      	cmp	r2, #46	; 0x2e
    9706:	d0fb      	beq.n	9700 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    9708:	1e61      	subs	r1, r4, #1
    970a:	4299      	cmp	r1, r3
    970c:	d90b      	bls.n	9726 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    970e:	460a      	mov	r2, r1
    9710:	e002      	b.n	9718 <FatFile::makeSFN(FatLfn_t*)+0x40>
    9712:	4293      	cmp	r3, r2
    9714:	4611      	mov	r1, r2
    9716:	d006      	beq.n	9726 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    9718:	4611      	mov	r1, r2
    971a:	3a01      	subs	r2, #1
    971c:	f891 c000 	ldrb.w	ip, [r1]
    9720:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    9724:	d1f5      	bne.n	9712 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    9726:	429c      	cmp	r4, r3
    9728:	f04f 0500 	mov.w	r5, #0
    972c:	f240 8086 	bls.w	983c <FatFile::makeSFN(FatLfn_t*)+0x164>
    9730:	2607      	movs	r6, #7
    9732:	2708      	movs	r7, #8
    9734:	46a9      	mov	r9, r5
    9736:	46a8      	mov	r8, r5
    9738:	e006      	b.n	9748 <FatFile::makeSFN(FatLfn_t*)+0x70>
    973a:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    973c:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    973e:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    9742:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    9744:	429c      	cmp	r4, r3
    9746:	d95b      	bls.n	9800 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    9748:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    974a:	2a2e      	cmp	r2, #46	; 0x2e
    974c:	bf08      	it	eq
    974e:	4299      	cmpeq	r1, r3
    9750:	d0f3      	beq.n	973a <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    9752:	2a22      	cmp	r2, #34	; 0x22
    9754:	d00d      	beq.n	9772 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    9756:	2a7c      	cmp	r2, #124	; 0x7c
    9758:	d00b      	beq.n	9772 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    975a:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    975e:	f1bc 0f02 	cmp.w	ip, #2
    9762:	d906      	bls.n	9772 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    9764:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    9768:	f1bc 0f05 	cmp.w	ip, #5
    976c:	d821      	bhi.n	97b2 <FatFile::makeSFN(FatLfn_t*)+0xda>
    976e:	2a2d      	cmp	r2, #45	; 0x2d
    9770:	d01f      	beq.n	97b2 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    9772:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    9776:	2a80      	cmp	r2, #128	; 0x80
    9778:	d05d      	beq.n	9836 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    977a:	454e      	cmp	r6, r9
    977c:	d22f      	bcs.n	97de <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    977e:	4299      	cmp	r1, r3
    9780:	bf2c      	ite	cs
    9782:	2000      	movcs	r0, #0
    9784:	2001      	movcc	r0, #1
    9786:	2e0a      	cmp	r6, #10
    9788:	bf08      	it	eq
    978a:	f040 0001 	orreq.w	r0, r0, #1
    978e:	2800      	cmp	r0, #0
    9790:	d047      	beq.n	9822 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    9792:	f89e 3016 	ldrb.w	r3, [lr, #22]
    9796:	2b20      	cmp	r3, #32
    9798:	d040      	beq.n	981c <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    979a:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    979e:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    97a0:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    97a2:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    97a4:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    97a6:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    97aa:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    97ac:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    97ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    97b2:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    97b6:	f1bc 0f05 	cmp.w	ip, #5
    97ba:	d9da      	bls.n	9772 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    97bc:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    97c0:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    97c4:	d8d5      	bhi.n	9772 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    97c6:	454e      	cmp	r6, r9
    97c8:	d3d9      	bcc.n	977e <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    97ca:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    97ce:	f1bc 0f19 	cmp.w	ip, #25
    97d2:	d828      	bhi.n	9826 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    97d4:	3a20      	subs	r2, #32
        lc |= bit;
    97d6:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    97d8:	b2d2      	uxtb	r2, r2
        lc |= bit;
    97da:	b2ed      	uxtb	r5, r5
    97dc:	e001      	b.n	97e2 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    97de:	2000      	movs	r0, #0
        c = '_';
    97e0:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    97e2:	f109 0c01 	add.w	ip, r9, #1
    97e6:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    97e8:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    97ea:	f889 2016 	strb.w	r2, [r9, #22]
    97ee:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    97f2:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    97f4:	4691      	mov	r9, r2
    97f6:	bf98      	it	ls
    97f8:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    97fc:	429c      	cmp	r4, r3
    97fe:	d8a3      	bhi.n	9748 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    9800:	f89e 3016 	ldrb.w	r3, [lr, #22]
    9804:	2b20      	cmp	r3, #32
    9806:	d009      	beq.n	981c <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    9808:	2800      	cmp	r0, #0
    980a:	d0c6      	beq.n	979a <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    980c:	ea18 0f05 	tst.w	r8, r5
    9810:	bf18      	it	ne
    9812:	2502      	movne	r5, #2
    9814:	f88e 5015 	strb.w	r5, [lr, #21]
}
    9818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    981c:	2000      	movs	r0, #0
}
    981e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9822:	460b      	mov	r3, r1
    9824:	e78e      	b.n	9744 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    9826:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    982a:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    982e:	bf98      	it	ls
    9830:	ea47 0808 	orrls.w	r8, r7, r8
    9834:	e7d5      	b.n	97e2 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    9836:	3301      	adds	r3, #1
        is83 = false;
    9838:	2000      	movs	r0, #0
    983a:	e783      	b.n	9744 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    983c:	46a8      	mov	r8, r5
    983e:	e7df      	b.n	9800 <FatFile::makeSFN(FatLfn_t*)+0x128>

00009840 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    9840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    9844:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    9848:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    984a:	460f      	mov	r7, r1
    984c:	4604      	mov	r4, r0
    984e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 98f0 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    9852:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    9856:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    985a:	f101 0616 	add.w	r6, r1, #22
    985e:	f1b8 0f03 	cmp.w	r8, #3
    9862:	f8db 3000 	ldr.w	r3, [fp]
    9866:	bf28      	it	cs
    9868:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    986c:	442b      	add	r3, r5
    986e:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9870:	f108 0304 	add.w	r3, r8, #4
    9874:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    9876:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    987a:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    987c:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    987e:	2a09      	cmp	r2, #9
    9880:	f102 0137 	add.w	r1, r2, #55	; 0x37
    9884:	bf98      	it	ls
    9886:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    988a:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    988c:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    988e:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9890:	4598      	cmp	r8, r3
    9892:	d1f0      	bne.n	9876 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    9894:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    9898:	2100      	movs	r1, #0
    989a:	4620      	mov	r0, r4
    989c:	f883 a016 	strb.w	sl, [r3, #22]
    98a0:	f7ff fc1a 	bl	90d8 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    98a4:	2101      	movs	r1, #1
    98a6:	4620      	mov	r0, r4
    98a8:	f7ff fab6 	bl	8e18 <FatFile::readDirCache(bool)>
    98ac:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    98ae:	220b      	movs	r2, #11
    98b0:	4630      	mov	r0, r6
      if (!dir) {
    98b2:	b19b      	cbz	r3, 98dc <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    98b4:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    98b8:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    98ba:	f1bc 0f00 	cmp.w	ip, #0
    98be:	d013      	beq.n	98e8 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    98c0:	7adb      	ldrb	r3, [r3, #11]
    98c2:	071b      	lsls	r3, r3, #28
    98c4:	d4ee      	bmi.n	98a4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    98c6:	f008 f9cb 	bl	11c60 <memcmp>
    98ca:	2800      	cmp	r0, #0
    98cc:	d1ea      	bne.n	98a4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    98ce:	f109 39ff 	add.w	r9, r9, #4294967295
    98d2:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    98d6:	d1c2      	bne.n	985e <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    98d8:	4648      	mov	r0, r9
 fail:
    98da:	e003      	b.n	98e4 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    98dc:	7860      	ldrb	r0, [r4, #1]
    98de:	fab0 f080 	clz	r0, r0
    98e2:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    98e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    98e8:	2001      	movs	r0, #1
}
    98ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98ee:	bf00      	nop
    98f0:	20035424 	.word	0x20035424

000098f4 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    98f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98f8:	ed2d 8b02 	vpush	{d8}
    98fc:	b08b      	sub	sp, #44	; 0x2c
    98fe:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    9902:	688b      	ldr	r3, [r1, #8]
    9904:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    9906:	780b      	ldrb	r3, [r1, #0]
    9908:	f013 0f70 	tst.w	r3, #112	; 0x70
    990c:	d053      	beq.n	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    990e:	9b02      	ldr	r3, [sp, #8]
    9910:	781b      	ldrb	r3, [r3, #0]
    9912:	2b00      	cmp	r3, #0
    9914:	d14f      	bne.n	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    9916:	6913      	ldr	r3, [r2, #16]
    9918:	4690      	mov	r8, r2
    991a:	4a9a      	ldr	r2, [pc, #616]	; (9b84 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    991c:	460e      	mov	r6, r1
    991e:	330c      	adds	r3, #12
    9920:	fba2 2303 	umull	r2, r3, r2, r3
    9924:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9928:	f898 3015 	ldrb.w	r3, [r8, #21]
    992c:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    992e:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9930:	f000 80a7 	beq.w	9a82 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    9934:	1c57      	adds	r7, r2, #1
    9936:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    9938:	2300      	movs	r3, #0
    seekSet(0);
    993a:	4630      	mov	r0, r6
    993c:	4619      	mov	r1, r3
    993e:	461c      	mov	r4, r3
    9940:	9306      	str	r3, [sp, #24]
    9942:	f7ff fbc9 	bl	90d8 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9946:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    994a:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    994c:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    994e:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9950:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    9954:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9956:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    9958:	2100      	movs	r1, #0
    995a:	4630      	mov	r0, r6
    995c:	f7ff fa5c 	bl	8e18 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9960:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    9964:	4603      	mov	r3, r0
    9966:	b320      	cbz	r0, 99b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    9968:	7802      	ldrb	r2, [r0, #0]
    996a:	2ae5      	cmp	r2, #229	; 0xe5
    996c:	d029      	beq.n	99c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    996e:	b342      	cbz	r2, 99c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    9970:	42bc      	cmp	r4, r7
    9972:	bf38      	it	cc
    9974:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    9976:	2a2e      	cmp	r2, #46	; 0x2e
    9978:	d02b      	beq.n	99d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    997a:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    997e:	f1bc 0f0f 	cmp.w	ip, #15
    9982:	d054      	beq.n	9a2e <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    9984:	f01c 0c08 	ands.w	ip, ip, #8
    9988:	d123      	bne.n	99d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    998a:	f1b9 0f00 	cmp.w	r9, #0
    998e:	f040 80d5 	bne.w	9b3c <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9992:	220b      	movs	r2, #11
    9994:	ee18 1a10 	vmov	r1, s16
    9998:	f008 f962 	bl	11c60 <memcmp>
    999c:	2800      	cmp	r0, #0
    999e:	d1da      	bne.n	9956 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    99a0:	f898 3015 	ldrb.w	r3, [r8, #21]
    99a4:	f013 0301 	ands.w	r3, r3, #1
    99a8:	f000 80e4 	beq.w	9b74 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    99ac:	2301      	movs	r3, #1
    99ae:	9305      	str	r3, [sp, #20]
    99b0:	e7d1      	b.n	9956 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    99b2:	7873      	ldrb	r3, [r6, #1]
    99b4:	b183      	cbz	r3, 99d8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    99b6:	2000      	movs	r0, #0
}
    99b8:	b00b      	add	sp, #44	; 0x2c
    99ba:	ecbd 8b02 	vpop	{d8}
    99be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    99c2:	2c00      	cmp	r4, #0
    99c4:	bf08      	it	eq
    99c6:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    99c8:	42bc      	cmp	r4, r7
    99ca:	d201      	bcs.n	99d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    99cc:	3401      	adds	r4, #1
    99ce:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    99d0:	b112      	cbz	r2, 99d8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    99d2:	f04f 0900 	mov.w	r9, #0
    99d6:	e7be      	b.n	9956 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    99d8:	9b03      	ldr	r3, [sp, #12]
    99da:	059a      	lsls	r2, r3, #22
    99dc:	d5eb      	bpl.n	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    99de:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    99e2:	3b01      	subs	r3, #1
    99e4:	2b01      	cmp	r3, #1
    99e6:	d8e6      	bhi.n	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    99e8:	2c00      	cmp	r4, #0
    99ea:	bf08      	it	eq
    99ec:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    99ee:	42bc      	cmp	r4, r7
    99f0:	d303      	bcc.n	99fa <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    99f2:	e048      	b.n	9a86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    99f4:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    99f6:	42a7      	cmp	r7, r4
    99f8:	d045      	beq.n	9a86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    99fa:	2100      	movs	r1, #0
    99fc:	4630      	mov	r0, r6
    99fe:	f7ff fa0b 	bl	8e18 <FatFile::readDirCache(bool)>
    freeFound++;
    9a02:	1c63      	adds	r3, r4, #1
    if (!dir) {
    9a04:	2800      	cmp	r0, #0
    9a06:	d1f5      	bne.n	99f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    9a08:	7873      	ldrb	r3, [r6, #1]
    9a0a:	2b00      	cmp	r3, #0
    9a0c:	d1d3      	bne.n	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    9a0e:	42a7      	cmp	r7, r4
    9a10:	d939      	bls.n	9a86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    9a12:	9d07      	ldr	r5, [sp, #28]
    9a14:	e005      	b.n	9a22 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    9a16:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    9a18:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    9a1c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    9a1e:	42a7      	cmp	r7, r4
    9a20:	d931      	bls.n	9a86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    9a22:	4630      	mov	r0, r6
    9a24:	f7fe fe68 	bl	86f8 <FatFile::addDirCluster()>
    9a28:	2800      	cmp	r0, #0
    9a2a:	d1f4      	bne.n	9a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    9a2c:	e7c3      	b.n	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    9a2e:	f1b9 0f00 	cmp.w	r9, #0
    9a32:	d119      	bne.n	9a68 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    9a34:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    9a38:	9904      	ldr	r1, [sp, #16]
    9a3a:	4559      	cmp	r1, fp
    9a3c:	d18b      	bne.n	9956 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    9a3e:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    9a42:	d088      	beq.n	9956 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    9a44:	7b43      	ldrb	r3, [r0, #13]
    9a46:	4689      	mov	r9, r1
    9a48:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    9a4a:	f1bb 0f01 	cmp.w	fp, #1
    9a4e:	d182      	bne.n	9956 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    9a50:	1c69      	adds	r1, r5, #1
    9a52:	464b      	mov	r3, r9
    9a54:	4642      	mov	r2, r8
    9a56:	4630      	mov	r0, r6
    9a58:	b289      	uxth	r1, r1
    9a5a:	f7ff fd4d 	bl	94f8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    9a5e:	2800      	cmp	r0, #0
    9a60:	bf08      	it	eq
    9a62:	f04f 0900 	moveq.w	r9, #0
    9a66:	e776      	b.n	9956 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    9a68:	f10b 3bff 	add.w	fp, fp, #4294967295
    9a6c:	fa5f fb8b 	uxtb.w	fp, fp
    9a70:	455a      	cmp	r2, fp
    9a72:	d1ae      	bne.n	99d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    9a74:	7b43      	ldrb	r3, [r0, #13]
    9a76:	9a06      	ldr	r2, [sp, #24]
    9a78:	4293      	cmp	r3, r2
    9a7a:	d0e6      	beq.n	9a4a <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    9a7c:	f04f 0900 	mov.w	r9, #0
    9a80:	e769      	b.n	9956 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9a82:	2701      	movs	r7, #1
    9a84:	e758      	b.n	9938 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    9a86:	9b05      	ldr	r3, [sp, #20]
    9a88:	b12b      	cbz	r3, 9a96 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    9a8a:	4641      	mov	r1, r8
    9a8c:	4630      	mov	r0, r6
    9a8e:	f7ff fed7 	bl	9840 <FatFile::makeUniqueSfn(FatLfn_t*)>
    9a92:	2800      	cmp	r0, #0
    9a94:	d08f      	beq.n	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    9a96:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    9a98:	4642      	mov	r2, r8
    9a9a:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    9a9c:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    9a9e:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    9aa2:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    9aa4:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    9aa6:	4629      	mov	r1, r5
    9aa8:	f7ff fd84 	bl	95b4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    9aac:	2800      	cmp	r0, #0
    9aae:	d082      	beq.n	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9ab0:	0169      	lsls	r1, r5, #5
    9ab2:	4630      	mov	r0, r6
    9ab4:	f7ff fb10 	bl	90d8 <FatFile::seekSet(unsigned long)>
    9ab8:	2800      	cmp	r0, #0
    9aba:	f43f af7c 	beq.w	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9abe:	2100      	movs	r1, #0
    9ac0:	4630      	mov	r0, r6
    9ac2:	f7ff f9a9 	bl	8e18 <FatFile::readDirCache(bool)>
  if (!dir) {
    9ac6:	4604      	mov	r4, r0
    9ac8:	2800      	cmp	r0, #0
    9aca:	f43f af74 	beq.w	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    9ace:	2220      	movs	r2, #32
    9ad0:	2100      	movs	r1, #0
    9ad2:	f008 f971 	bl	11db8 <memset>
  memcpy(dir->name, fname->sfn, 11);
    9ad6:	f8d8 2016 	ldr.w	r2, [r8, #22]
    9ada:	f8d8 301a 	ldr.w	r3, [r8, #26]
    9ade:	6022      	str	r2, [r4, #0]
    9ae0:	6063      	str	r3, [r4, #4]
    9ae2:	f898 3020 	ldrb.w	r3, [r8, #32]
    9ae6:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    9aea:	72a3      	strb	r3, [r4, #10]
    9aec:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    9aee:	f898 3015 	ldrb.w	r3, [r8, #21]
    9af2:	f003 0318 	and.w	r3, r3, #24
    9af6:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    9af8:	4b23      	ldr	r3, [pc, #140]	; (9b88 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    9afa:	681b      	ldr	r3, [r3, #0]
    9afc:	2b00      	cmp	r3, #0
    9afe:	d03b      	beq.n	9b78 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    9b00:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    9b04:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    9b08:	a809      	add	r0, sp, #36	; 0x24
    9b0a:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    9b0c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9b10:	8223      	strh	r3, [r4, #16]
    9b12:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    9b16:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    9b18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9b1c:	7363      	strb	r3, [r4, #13]
    9b1e:	9a07      	ldr	r2, [sp, #28]
    9b20:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    9b24:	f043 0301 	orr.w	r3, r3, #1
    9b28:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    9b2c:	9b03      	ldr	r3, [sp, #12]
    9b2e:	462a      	mov	r2, r5
    9b30:	4631      	mov	r1, r6
    9b32:	9802      	ldr	r0, [sp, #8]
    9b34:	9700      	str	r7, [sp, #0]
    9b36:	f7ff fb27 	bl	9188 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    9b3a:	e73d      	b.n	99b8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    9b3c:	f1bb 0f01 	cmp.w	fp, #1
    9b40:	f47f af39 	bne.w	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    9b44:	300a      	adds	r0, #10
    9b46:	e001      	b.n	9b4c <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9b48:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9b4c:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    9b50:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9b52:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    9b56:	fa52 f281 	uxtab	r2, r2, r1
    9b5a:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    9b5e:	d1f3      	bne.n	9b48 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    9b60:	9b06      	ldr	r3, [sp, #24]
    9b62:	4563      	cmp	r3, ip
    9b64:	f47f af27 	bne.w	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9b68:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    9b6a:	9b03      	ldr	r3, [sp, #12]
    9b6c:	0519      	lsls	r1, r3, #20
    9b6e:	f53f af22 	bmi.w	99b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9b72:	e7db      	b.n	9b2c <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    9b74:	461f      	mov	r7, r3
    9b76:	e7f8      	b.n	9b6a <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    9b78:	f645 0321 	movw	r3, #22561	; 0x5821
    9b7c:	8223      	strh	r3, [r4, #16]
    9b7e:	8323      	strh	r3, [r4, #24]
    9b80:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    9b82:	e7cc      	b.n	9b1e <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    9b84:	4ec4ec4f 	.word	0x4ec4ec4f
    9b88:	20034730 	.word	0x20034730

00009b8c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    9b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b90:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    9b92:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    9b94:	b082      	sub	sp, #8
    9b96:	460c      	mov	r4, r1
  while (*path == ' ') {
    9b98:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    9b9a:	4615      	mov	r5, r2
  while (*path == ' ') {
    9b9c:	d103      	bne.n	9ba6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    9b9e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    9ba2:	2b20      	cmp	r3, #32
    9ba4:	d0fb      	beq.n	9b9e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    9ba6:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    9ba8:	7823      	ldrb	r3, [r4, #0]
    9baa:	b363      	cbz	r3, 9c06 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    9bac:	2b2f      	cmp	r3, #47	; 0x2f
    9bae:	d02a      	beq.n	9c06 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    9bb0:	f04f 0800 	mov.w	r8, #0
    9bb4:	4e29      	ldr	r6, [pc, #164]	; (9c5c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    9bb6:	1d21      	adds	r1, r4, #4
    9bb8:	4620      	mov	r0, r4
    9bba:	aa01      	add	r2, sp, #4
    9bbc:	f003 f86e 	bl	cc9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    9bc0:	4604      	mov	r4, r0
    9bc2:	b170      	cbz	r0, 9be2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    9bc4:	9b01      	ldr	r3, [sp, #4]
    9bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9bca:	d240      	bcs.n	9c4e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    9bcc:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    9bce:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    9bd2:	d831      	bhi.n	9c38 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    9bd4:	2b3c      	cmp	r3, #60	; 0x3c
    9bd6:	b2d9      	uxtb	r1, r3
    9bd8:	d829      	bhi.n	9c2e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    9bda:	2921      	cmp	r1, #33	; 0x21
    9bdc:	d805      	bhi.n	9bea <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    9bde:	291f      	cmp	r1, #31
    9be0:	d809      	bhi.n	9bf6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    9be2:	2000      	movs	r0, #0
    9be4:	b002      	add	sp, #8
    9be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bea:	3922      	subs	r1, #34	; 0x22
    9bec:	b2c9      	uxtb	r1, r1
    9bee:	fa26 f101 	lsr.w	r1, r6, r1
    9bf2:	07ca      	lsls	r2, r1, #31
    9bf4:	d4f5      	bmi.n	9be2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    9bf6:	2b2e      	cmp	r3, #46	; 0x2e
    9bf8:	d001      	beq.n	9bfe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    9bfa:	2b20      	cmp	r3, #32
    9bfc:	d11c      	bne.n	9c38 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    9bfe:	7823      	ldrb	r3, [r4, #0]
    9c00:	b10b      	cbz	r3, 9c06 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    9c02:	2b2f      	cmp	r3, #47	; 0x2f
    9c04:	d1d7      	bne.n	9bb6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    9c06:	692b      	ldr	r3, [r5, #16]
    9c08:	3b01      	subs	r3, #1
    9c0a:	2bfe      	cmp	r3, #254	; 0xfe
    9c0c:	d8e9      	bhi.n	9be2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    9c0e:	7823      	ldrb	r3, [r4, #0]
    9c10:	2b20      	cmp	r3, #32
    9c12:	d103      	bne.n	9c1c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    9c14:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    9c18:	2b20      	cmp	r3, #32
    9c1a:	d0fb      	beq.n	9c14 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    9c1c:	2b2f      	cmp	r3, #47	; 0x2f
    9c1e:	d0f9      	beq.n	9c14 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    9c20:	4628      	mov	r0, r5
  *ptr = path;
    9c22:	603c      	str	r4, [r7, #0]
}
    9c24:	b002      	add	sp, #8
    9c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    9c2a:	f7ff bd55 	b.w	96d8 <FatFile::makeSFN(FatLfn_t*)>
    9c2e:	295c      	cmp	r1, #92	; 0x5c
    9c30:	d0d7      	beq.n	9be2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    9c32:	d905      	bls.n	9c40 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    9c34:	297c      	cmp	r1, #124	; 0x7c
    9c36:	d0d4      	beq.n	9be2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    9c38:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    9c3c:	60ac      	str	r4, [r5, #8]
    9c3e:	e7de      	b.n	9bfe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    9c40:	393e      	subs	r1, #62	; 0x3e
    9c42:	2901      	cmp	r1, #1
    9c44:	d8f8      	bhi.n	9c38 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    9c46:	2000      	movs	r0, #0
    9c48:	b002      	add	sp, #8
    9c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    9c4e:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    9c52:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    9c54:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    9c58:	e7d1      	b.n	9bfe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    9c5a:	bf00      	nop
    9c5c:	05002101 	.word	0x05002101

00009c60 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    9c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    9c62:	2300      	movs	r3, #0
    9c64:	b08b      	sub	sp, #44	; 0x2c
    9c66:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    9c68:	7883      	ldrb	r3, [r0, #2]
    9c6a:	079a      	lsls	r2, r3, #30
    9c6c:	d524      	bpl.n	9cb8 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    9c6e:	6a01      	ldr	r1, [r0, #32]
    9c70:	4605      	mov	r5, r0
    9c72:	b119      	cbz	r1, 9c7c <FatFile::remove()+0x1c>
    9c74:	6880      	ldr	r0, [r0, #8]
    9c76:	f000 fb3d 	bl	a2f4 <FatPartition::freeChain(unsigned long)>
    9c7a:	b1e8      	cbz	r0, 9cb8 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    9c7c:	2101      	movs	r1, #1
    9c7e:	4628      	mov	r0, r5
    9c80:	f7fe fd76 	bl	8770 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9c84:	b1c0      	cbz	r0, 9cb8 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    9c86:	1e42      	subs	r2, r0, #1
    9c88:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
    9c8c:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9c8e:	01e3      	lsls	r3, r4, #7
    9c90:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    9c94:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    9c98:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9c9a:	fa51 f383 	uxtab	r3, r1, r3
    9c9e:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    9ca0:	d1f5      	bne.n	9c8e <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    9ca2:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    9ca4:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    9ca6:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    9ca8:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    9caa:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9cac:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
    9cb0:	70ab      	strb	r3, [r5, #2]
    9cb2:	f002 ff27 	bl	cb04 <FsCache::sync()>
    9cb6:	b910      	cbnz	r0, 9cbe <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    9cb8:	2000      	movs	r0, #0
}
    9cba:	b00b      	add	sp, #44	; 0x2c
    9cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cbe:	f507 700e 	add.w	r0, r7, #568	; 0x238
    9cc2:	f002 ff1f 	bl	cb04 <FsCache::sync()>
    9cc6:	2800      	cmp	r0, #0
    9cc8:	d0f6      	beq.n	9cb8 <FatFile::remove()+0x58>
    9cca:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
    9ccc:	6803      	ldr	r3, [r0, #0]
    9cce:	6a1b      	ldr	r3, [r3, #32]
    9cd0:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9cd2:	2800      	cmp	r0, #0
    9cd4:	d0f0      	beq.n	9cb8 <FatFile::remove()+0x58>
  if (!isLFN()) {
    9cd6:	78eb      	ldrb	r3, [r5, #3]
    9cd8:	2b00      	cmp	r3, #0
    9cda:	d0ee      	beq.n	9cba <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    9cdc:	4629      	mov	r1, r5
    9cde:	a801      	add	r0, sp, #4
    9ce0:	f7fe ff66 	bl	8bb0 <FatFile::openCluster(FatFile*)>
    9ce4:	2800      	cmp	r0, #0
    9ce6:	d0e7      	beq.n	9cb8 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9ce8:	78eb      	ldrb	r3, [r5, #3]
    9cea:	2b00      	cmp	r3, #0
    9cec:	d0e4      	beq.n	9cb8 <FatFile::remove()+0x58>
    9cee:	2701      	movs	r7, #1
    9cf0:	e021      	b.n	9d36 <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9cf2:	a801      	add	r0, sp, #4
    9cf4:	f7ff f890 	bl	8e18 <FatFile::readDirCache(bool)>
    9cf8:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9cfa:	b2f9      	uxtb	r1, r7
    if (!ldir) {
    9cfc:	2800      	cmp	r0, #0
    9cfe:	d0db      	beq.n	9cb8 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9d00:	7ac2      	ldrb	r2, [r0, #11]
    9d02:	2a0f      	cmp	r2, #15
    9d04:	d1d8      	bne.n	9cb8 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    9d06:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9d08:	fa5f fc83 	uxtb.w	ip, r3
    9d0c:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9d0e:	f002 031f 	and.w	r3, r2, #31
    9d12:	428b      	cmp	r3, r1
    9d14:	d1d0      	bne.n	9cb8 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    9d16:	7b43      	ldrb	r3, [r0, #13]
    9d18:	42a3      	cmp	r3, r4
    9d1a:	d1cd      	bne.n	9cb8 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    9d1c:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    9d1e:	68a9      	ldr	r1, [r5, #8]
    9d20:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    9d24:	f043 0301 	orr.w	r3, r3, #1
    9d28:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    9d2c:	0653      	lsls	r3, r2, #25
    9d2e:	d40d      	bmi.n	9d4c <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9d30:	78eb      	ldrb	r3, [r5, #3]
    9d32:	4563      	cmp	r3, ip
    9d34:	d3c0      	bcc.n	9cb8 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    9d36:	88a9      	ldrh	r1, [r5, #4]
    9d38:	a801      	add	r0, sp, #4
    9d3a:	1bc9      	subs	r1, r1, r7
    9d3c:	b289      	uxth	r1, r1
    9d3e:	0149      	lsls	r1, r1, #5
    9d40:	f7ff f9ca 	bl	90d8 <FatFile::seekSet(unsigned long)>
    9d44:	2100      	movs	r1, #0
    9d46:	2800      	cmp	r0, #0
    9d48:	d1d3      	bne.n	9cf2 <FatFile::remove()+0x92>
    9d4a:	e7b5      	b.n	9cb8 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    9d4c:	68ac      	ldr	r4, [r5, #8]
    9d4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9d52:	f002 fed7 	bl	cb04 <FsCache::sync()>
    9d56:	2800      	cmp	r0, #0
    9d58:	d0ae      	beq.n	9cb8 <FatFile::remove()+0x58>
    9d5a:	f504 700e 	add.w	r0, r4, #568	; 0x238
    9d5e:	f002 fed1 	bl	cb04 <FsCache::sync()>
    9d62:	2800      	cmp	r0, #0
    9d64:	d0a8      	beq.n	9cb8 <FatFile::remove()+0x58>
    9d66:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    9d68:	6803      	ldr	r3, [r0, #0]
    9d6a:	6a1b      	ldr	r3, [r3, #32]
    9d6c:	4798      	blx	r3
    9d6e:	e7a4      	b.n	9cba <FatFile::remove()+0x5a>

00009d70 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    9d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    9d78:	b1a2      	cbz	r2, 9da4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    9d7a:	4605      	mov	r5, r0
    9d7c:	460c      	mov	r4, r1
    9d7e:	4698      	mov	r8, r3
    9d80:	1857      	adds	r7, r2, r1
    9d82:	e001      	b.n	9d88 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    9d84:	42bc      	cmp	r4, r7
    9d86:	d00d      	beq.n	9da4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    9d88:	682b      	ldr	r3, [r5, #0]
    9d8a:	4620      	mov	r0, r4
    9d8c:	4649      	mov	r1, r9
    9d8e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    9d90:	47c0      	blx	r8
    9d92:	4621      	mov	r1, r4
    9d94:	4602      	mov	r2, r0
    9d96:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    9d98:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    9d9a:	47b0      	blx	r6
    9d9c:	2800      	cmp	r0, #0
    9d9e:	d1f1      	bne.n	9d84 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    9da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    9da4:	2001      	movs	r0, #1
  }
    9da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9daa:	bf00      	nop

00009dac <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    9dac:	2a04      	cmp	r2, #4
    9dae:	d804      	bhi.n	9dba <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    9db0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    9db4:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    9db8:	4770      	bx	lr
  } else if (i < 11) {
    9dba:	2a0a      	cmp	r2, #10
    9dbc:	d803      	bhi.n	9dc6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    9dbe:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    9dc2:	8890      	ldrh	r0, [r2, #4]
    9dc4:	4770      	bx	lr
  } else if (i < 13) {
    9dc6:	2a0c      	cmp	r2, #12
    9dc8:	d803      	bhi.n	9dd2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    9dca:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9dce:	88c8      	ldrh	r0, [r1, #6]
    9dd0:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    9dd2:	2000      	movs	r0, #0
}
    9dd4:	4770      	bx	lr
    9dd6:	bf00      	nop

00009dd8 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    9dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    9dda:	7804      	ldrb	r4, [r0, #0]
    9ddc:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    9dde:	b17c      	cbz	r4, 9e00 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    9de0:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    9de4:	4617      	mov	r7, r2
    9de6:	d007      	beq.n	9df8 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    9de8:	2a01      	cmp	r2, #1
    9dea:	d909      	bls.n	9e00 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    9dec:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
    9dee:	2300      	movs	r3, #0
    return 1;
    9df0:	2001      	movs	r0, #1
    name[0] = '/';
    9df2:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
    9df4:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    9df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    9df8:	4621      	mov	r1, r4
    9dfa:	f7fe fcb9 	bl	8770 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9dfe:	b918      	cbnz	r0, 9e08 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    9e00:	2300      	movs	r3, #0
  return 0;
    9e02:	4618      	mov	r0, r3
  name[0] = '\0';
    9e04:	7033      	strb	r3, [r6, #0]
}
    9e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    9e08:	4603      	mov	r3, r0
    9e0a:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    9e0c:	2108      	movs	r1, #8
    9e0e:	e011      	b.n	9e34 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    9e10:	7b02      	ldrb	r2, [r0, #12]
    9e12:	4211      	tst	r1, r2
    9e14:	d003      	beq.n	9e1e <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    9e16:	f10e 0e20 	add.w	lr, lr, #32
    9e1a:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    9e1e:	1c65      	adds	r5, r4, #1
    9e20:	42bd      	cmp	r5, r7
    9e22:	d2ed      	bcs.n	9e00 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    9e24:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
    9e28:	f806 e004 	strb.w	lr, [r6, r4]
    9e2c:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    9e2e:	f1bc 0f0c 	cmp.w	ip, #12
    9e32:	d010      	beq.n	9e56 <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    9e34:	f1bc 0f08 	cmp.w	ip, #8
    9e38:	d011      	beq.n	9e5e <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    9e3a:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    9e3e:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
    9e42:	2a19      	cmp	r2, #25
    9e44:	d9e4      	bls.n	9e10 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    9e46:	f1be 0f20 	cmp.w	lr, #32
    9e4a:	d1e8      	bne.n	9e1e <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    9e4c:	f10c 0c01 	add.w	ip, ip, #1
    9e50:	f1bc 0f0c 	cmp.w	ip, #12
    9e54:	d1ee      	bne.n	9e34 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    9e56:	2300      	movs	r3, #0
    9e58:	4620      	mov	r0, r4
    9e5a:	5533      	strb	r3, [r6, r4]
}
    9e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    9e5e:	781a      	ldrb	r2, [r3, #0]
    9e60:	2a20      	cmp	r2, #32
    9e62:	d0f8      	beq.n	9e56 <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    9e64:	2110      	movs	r1, #16
      c = '.';
    9e66:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    9e6a:	e7d8      	b.n	9e1e <FatFile::getSFN(char*, unsigned int)+0x46>

00009e6c <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    9e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    9e70:	2400      	movs	r4, #0
    9e72:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    9e74:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    9e76:	4689      	mov	r9, r1
    9e78:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
    9e7a:	2b00      	cmp	r3, #0
    9e7c:	d055      	beq.n	9f2a <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
    9e7e:	78c3      	ldrb	r3, [r0, #3]
    9e80:	4606      	mov	r6, r0
    9e82:	2b00      	cmp	r3, #0
    9e84:	d058      	beq.n	9f38 <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
    9e86:	4601      	mov	r1, r0
    9e88:	a801      	add	r0, sp, #4
    9e8a:	4690      	mov	r8, r2
    9e8c:	f7fe fe90 	bl	8bb0 <FatFile::openCluster(FatFile*)>
    9e90:	2800      	cmp	r0, #0
    9e92:	d04a      	beq.n	9f2a <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9e94:	78f0      	ldrb	r0, [r6, #3]
    9e96:	2800      	cmp	r0, #0
    9e98:	d043      	beq.n	9f22 <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9e9a:	f108 38ff 	add.w	r8, r8, #4294967295
  char* str = name;
    9e9e:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9ea0:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9ea4:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    9ea6:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9ea8:	a801      	add	r0, sp, #4
    9eaa:	eba1 010a 	sub.w	r1, r1, sl
    9eae:	b289      	uxth	r1, r1
    9eb0:	0149      	lsls	r1, r1, #5
    9eb2:	f7ff f911 	bl	90d8 <FatFile::seekSet(unsigned long)>
    9eb6:	b3c0      	cbz	r0, 9f2a <FatFile::getName8(char*, unsigned int)+0xbe>
    9eb8:	2100      	movs	r1, #0
    9eba:	a801      	add	r0, sp, #4
    9ebc:	f7fe ffac 	bl	8e18 <FatFile::readDirCache(bool)>
    if (!ldir) {
    9ec0:	b398      	cbz	r0, 9f2a <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9ec2:	7ac3      	ldrb	r3, [r0, #11]
    9ec4:	2b0f      	cmp	r3, #15
    9ec6:	d130      	bne.n	9f2a <FatFile::getName8(char*, unsigned int)+0xbe>
    9ec8:	7803      	ldrb	r3, [r0, #0]
    9eca:	fa5f f18a 	uxtb.w	r1, sl
    9ece:	f003 031f 	and.w	r3, r3, #31
    9ed2:	428b      	cmp	r3, r1
    9ed4:	d129      	bne.n	9f2a <FatFile::getName8(char*, unsigned int)+0xbe>
    9ed6:	1c47      	adds	r7, r0, #1
    9ed8:	2500      	movs	r5, #0
  if (i < 5) {
    9eda:	2d04      	cmp	r5, #4
    9edc:	b2eb      	uxtb	r3, r5
    9ede:	d83f      	bhi.n	9f60 <FatFile::getName8(char*, unsigned int)+0xf4>
    9ee0:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
    9ee2:	bb74      	cbnz	r4, 9f42 <FatFile::getName8(char*, unsigned int)+0xd6>
    9ee4:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
    9ee8:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
    9eea:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    9eee:	d33e      	bcc.n	9f6e <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
    9ef0:	b1a3      	cbz	r3, 9f1c <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
    9ef2:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9ef4:	4659      	mov	r1, fp
    9ef6:	4642      	mov	r2, r8
    9ef8:	f002 fe7e 	bl	cbf8 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    9efc:	4683      	mov	fp, r0
    9efe:	b1a0      	cbz	r0, 9f2a <FatFile::getName8(char*, unsigned int)+0xbe>
    9f00:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
    9f02:	3501      	adds	r5, #1
    9f04:	3702      	adds	r7, #2
    9f06:	2d0d      	cmp	r5, #13
    9f08:	d1e7      	bne.n	9eda <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9f0a:	f10a 0a01 	add.w	sl, sl, #1
    9f0e:	78f1      	ldrb	r1, [r6, #3]
    9f10:	fa5f f38a 	uxtb.w	r3, sl
    9f14:	fa1f fa8a 	uxth.w	sl, sl
    9f18:	4299      	cmp	r1, r3
    9f1a:	d2c4      	bcs.n	9ea6 <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
    9f1c:	ebab 0009 	sub.w	r0, fp, r9
    9f20:	46d9      	mov	r9, fp
  *str = '\0';
    9f22:	2300      	movs	r3, #0
    9f24:	f889 3000 	strb.w	r3, [r9]
  return str - name;
    9f28:	e003      	b.n	9f32 <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
    9f2a:	2300      	movs	r3, #0
  return 0;
    9f2c:	4618      	mov	r0, r3
  *name = 0;
    9f2e:	f889 3000 	strb.w	r3, [r9]
}
    9f32:	b00b      	add	sp, #44	; 0x2c
    9f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
    9f38:	f7ff ff4e 	bl	9dd8 <FatFile::getSFN(char*, unsigned int)>
}
    9f3c:	b00b      	add	sp, #44	; 0x2c
    9f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0XDC00 <= c && c <= 0XDFFF;
    9f42:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    9f46:	b289      	uxth	r1, r1
    9f48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    9f4c:	d2ed      	bcs.n	9f2a <FatFile::getName8(char*, unsigned int)+0xbe>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    9f4e:	4a0a      	ldr	r2, [pc, #40]	; (9f78 <FatFile::getName8(char*, unsigned int)+0x10c>)
    9f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
    9f54:	ea02 2084 	and.w	r0, r2, r4, lsl #10
    9f58:	4318      	orrs	r0, r3
    9f5a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
    9f5e:	e7c9      	b.n	9ef4 <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
    9f60:	2b0a      	cmp	r3, #10
    9f62:	bf94      	ite	ls
    9f64:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
    9f68:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
    9f6c:	e7b9      	b.n	9ee2 <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
    9f6e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    9f72:	d2da      	bcs.n	9f2a <FatFile::getName8(char*, unsigned int)+0xbe>
    9f74:	461c      	mov	r4, r3
    9f76:	e7c4      	b.n	9f02 <FatFile::getName8(char*, unsigned int)+0x96>
    9f78:	000ffc00 	.word	0x000ffc00

00009f7c <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    9f7c:	f7ff bf76 	b.w	9e6c <FatFile::getName8(char*, unsigned int)>

00009f80 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    9f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9f84:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    9f88:	b1c3      	cbz	r3, 9fbc <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    9f8a:	4681      	mov	r9, r0
    9f8c:	460c      	mov	r4, r1
    9f8e:	4615      	mov	r5, r2
    9f90:	185e      	adds	r6, r3, r1
    9f92:	e002      	b.n	9f9a <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    9f94:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    9f96:	42b4      	cmp	r4, r6
    9f98:	d010      	beq.n	9fbc <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    9f9a:	f8d9 3000 	ldr.w	r3, [r9]
    9f9e:	4621      	mov	r1, r4
    9fa0:	462a      	mov	r2, r5
    9fa2:	4648      	mov	r0, r9
    9fa4:	691b      	ldr	r3, [r3, #16]
    9fa6:	4798      	blx	r3
    9fa8:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    9faa:	463a      	mov	r2, r7
    9fac:	4620      	mov	r0, r4
    9fae:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    9fb0:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	d1ee      	bne.n	9f94 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    9fb6:	4618      	mov	r0, r3
    9fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    9fbc:	2301      	movs	r3, #1
  }
    9fbe:	4618      	mov	r0, r3
    9fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009fc4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    9fc4:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    9fc6:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    9fc8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    9fcc:	46a4      	mov	ip, r4
    9fce:	bf28      	it	cs
    9fd0:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    9fd4:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    9fd8:	4281      	cmp	r1, r0
    9fda:	d207      	bcs.n	9fec <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    9fdc:	f831 3b02 	ldrh.w	r3, [r1], #2
    9fe0:	b913      	cbnz	r3, 9fe8 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    9fe2:	6853      	ldr	r3, [r2, #4]
    9fe4:	3301      	adds	r3, #1
    9fe6:	6053      	str	r3, [r2, #4]
  while (p < e) {
    9fe8:	4288      	cmp	r0, r1
    9fea:	d8f7      	bhi.n	9fdc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  }
  state->clusters_to_do -= n;
    9fec:	eba4 040c 	sub.w	r4, r4, ip
    9ff0:	6014      	str	r4, [r2, #0]
}
    9ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
    9ff6:	4770      	bx	lr

00009ff8 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    9ff8:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    9ffa:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    9ffc:	2c80      	cmp	r4, #128	; 0x80
    9ffe:	46a4      	mov	ip, r4
    a000:	bf28      	it	cs
    a002:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    a006:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    a00a:	4281      	cmp	r1, r0
    a00c:	d207      	bcs.n	a01e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
    a00e:	f851 3b04 	ldr.w	r3, [r1], #4
    a012:	b913      	cbnz	r3, a01a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    a014:	6853      	ldr	r3, [r2, #4]
    a016:	3301      	adds	r3, #1
    a018:	6053      	str	r3, [r2, #4]
  while (p < e) {
    a01a:	4288      	cmp	r0, r1
    a01c:	d8f7      	bhi.n	a00e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  }
  state->clusters_to_do -= n;
    a01e:	eba4 040c 	sub.w	r4, r4, ip
    a022:	6014      	str	r4, [r2, #0]
}
    a024:	f85d 4b04 	ldr.w	r4, [sp], #4
    a028:	4770      	bx	lr
    a02a:	bf00      	nop

0000a02c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    a02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    a030:	79c3      	ldrb	r3, [r0, #7]
    a032:	4604      	mov	r4, r0
    a034:	460d      	mov	r5, r1
    a036:	4617      	mov	r7, r2
  if (fatType() == 32) {
    a038:	2b20      	cmp	r3, #32
    a03a:	d059      	beq.n	a0f0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    a03c:	2b10      	cmp	r3, #16
    a03e:	d030      	beq.n	a0a2 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    a040:	2b0c      	cmp	r3, #12
    a042:	d151      	bne.n	a0e8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a044:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    a046:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a04a:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a04c:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    a050:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a054:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a058:	4648      	mov	r0, r9
    a05a:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a05c:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a060:	f3c1 2146 	ubfx	r1, r1, #9, #7
    a064:	0952      	lsrs	r2, r2, #5
    a066:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    a06a:	0052      	lsls	r2, r2, #1
    a06c:	4641      	mov	r1, r8
    a06e:	f002 fd75 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a072:	2800      	cmp	r0, #0
    a074:	d038      	beq.n	a0e8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    a076:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    a07a:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    a07c:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    a07e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a082:	d023      	beq.n	a0cc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    a084:	4418      	add	r0, r3
    a086:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    a088:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    a08a:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    a08c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    a090:	bf4c      	ite	mi
    a092:	091b      	lsrmi	r3, r3, #4
    a094:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    a098:	429a      	cmp	r2, r3
    a09a:	d240      	bcs.n	a11e <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    a09c:	2000      	movs	r0, #0
}
    a09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a0a2:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    a0a4:	f3c1 2107 	ubfx	r1, r1, #8, #8
    a0a8:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a0aa:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a0ae:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a0b2:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a0b4:	fab2 f282 	clz	r2, r2
    a0b8:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a0ba:	0052      	lsls	r2, r2, #1
    a0bc:	f002 fd4e 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a0c0:	b190      	cbz	r0, a0e8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    a0c2:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    a0c4:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    a0c8:	5b43      	ldrh	r3, [r0, r5]
    a0ca:	e025      	b.n	a118 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a0cc:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    a0ce:	f108 0101 	add.w	r1, r8, #1
    a0d2:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a0d4:	f1a2 0202 	sub.w	r2, r2, #2
    a0d8:	fab2 f282 	clz	r2, r2
    a0dc:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a0de:	0052      	lsls	r2, r2, #1
    a0e0:	f002 fd3c 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    a0e4:	2800      	cmp	r0, #0
    a0e6:	d1ce      	bne.n	a086 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    a0e8:	f04f 30ff 	mov.w	r0, #4294967295
}
    a0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a0f0:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    a0f2:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a0f4:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a0f8:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a0fc:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a100:	fab2 f282 	clz	r2, r2
    a104:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a106:	0052      	lsls	r2, r2, #1
    a108:	f002 fd28 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a10c:	2800      	cmp	r0, #0
    a10e:	d0eb      	beq.n	a0e8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    a110:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    a112:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    a116:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    a118:	69e2      	ldr	r2, [r4, #28]
    a11a:	429a      	cmp	r2, r3
    a11c:	d3be      	bcc.n	a09c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    a11e:	2001      	movs	r0, #1
  *value = next;
    a120:	603b      	str	r3, [r7, #0]
}
    a122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a126:	bf00      	nop

0000a128 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    a12c:	79c3      	ldrb	r3, [r0, #7]
    a12e:	4605      	mov	r5, r0
    a130:	460c      	mov	r4, r1
    a132:	4616      	mov	r6, r2
  if (fatType() == 32) {
    a134:	2b20      	cmp	r3, #32
    a136:	d048      	beq.n	a1ca <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    a138:	2b10      	cmp	r3, #16
    a13a:	d02d      	beq.n	a198 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    a13c:	2b0c      	cmp	r3, #12
    a13e:	d141      	bne.n	a1c4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    a140:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a144:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a146:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    a14a:	fa11 f184 	uxtah	r1, r1, r4
    a14e:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a152:	f3c1 2146 	ubfx	r1, r1, #9, #7
    a156:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a158:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    a15a:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a15c:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a15e:	4639      	mov	r1, r7
    a160:	bf14      	ite	ne
    a162:	2201      	movne	r2, #1
    a164:	2203      	moveq	r2, #3
    a166:	f002 fcf9 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a16a:	b358      	cbz	r0, a1c4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    a16c:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    a170:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    a174:	d03f      	beq.n	a1f6 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    a176:	5cc2      	ldrb	r2, [r0, r3]
    a178:	f002 020f 	and.w	r2, r2, #15
    a17c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    a180:	54c2      	strb	r2, [r0, r3]
    index++;
    a182:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    a184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a188:	d03a      	beq.n	a200 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    a18a:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    a18e:	4403      	add	r3, r0
    return true;
    a190:	2001      	movs	r0, #1
    pc[index] = tmp;
    a192:	701a      	strb	r2, [r3, #0]
}
    a194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a198:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    a19a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    a19e:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a1a0:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a1a4:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    a1a6:	4419      	add	r1, r3
    a1a8:	bf14      	ite	ne
    a1aa:	2201      	movne	r2, #1
    a1ac:	2203      	moveq	r2, #3
    a1ae:	f002 fcd5 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a1b2:	4603      	mov	r3, r0
    a1b4:	b130      	cbz	r0, a1c4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    a1b6:	0064      	lsls	r4, r4, #1
    return true;
    a1b8:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    a1ba:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    a1be:	531e      	strh	r6, [r3, r4]
}
    a1c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    a1c4:	2000      	movs	r0, #0
}
    a1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a1ca:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    a1cc:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a1ce:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a1d2:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a1d4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    a1d8:	bf14      	ite	ne
    a1da:	2201      	movne	r2, #1
    a1dc:	2203      	moveq	r2, #3
    a1de:	f002 fcbd 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a1e2:	4603      	mov	r3, r0
    a1e4:	2800      	cmp	r0, #0
    a1e6:	d0ed      	beq.n	a1c4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    a1e8:	00a4      	lsls	r4, r4, #2
    return true;
    a1ea:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    a1ec:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    a1f0:	511e      	str	r6, [r3, r4]
}
    a1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    a1f6:	54c6      	strb	r6, [r0, r3]
    index++;
    a1f8:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    a1fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a1fe:	d115      	bne.n	a22c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a200:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    a202:	1c79      	adds	r1, r7, #1
    a204:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a206:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a208:	bf14      	ite	ne
    a20a:	2201      	movne	r2, #1
    a20c:	2203      	moveq	r2, #3
    a20e:	f002 fca5 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    a212:	4603      	mov	r3, r0
    a214:	2800      	cmp	r0, #0
    a216:	d0d5      	beq.n	a1c4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    a218:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    a21c:	2c00      	cmp	r4, #0
    a21e:	d1b7      	bne.n	a190 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    a220:	7819      	ldrb	r1, [r3, #0]
    a222:	f021 010f 	bic.w	r1, r1, #15
    a226:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    a22a:	e7b1      	b.n	a190 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    a22c:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    a230:	4403      	add	r3, r0
    a232:	e7f5      	b.n	a220 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

0000a234 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    a238:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a23a:	b082      	sub	sp, #8
    a23c:	4605      	mov	r5, r0
    a23e:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    a240:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a242:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    a244:	d340      	bcc.n	a2c8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    a246:	2701      	movs	r7, #1
    find++;
    a248:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    a24a:	69eb      	ldr	r3, [r5, #28]
    a24c:	aa01      	add	r2, sp, #4
    a24e:	4628      	mov	r0, r5
    a250:	42a3      	cmp	r3, r4
    a252:	d205      	bcs.n	a260 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    a254:	bb9f      	cbnz	r7, a2be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    a256:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    a258:	2701      	movs	r7, #1
    find++;
    a25a:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    a25c:	42a3      	cmp	r3, r4
    a25e:	d32e      	bcc.n	a2be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    a260:	42a6      	cmp	r6, r4
    a262:	bf18      	it	ne
    a264:	2c01      	cmpne	r4, #1
    a266:	4621      	mov	r1, r4
    a268:	d929      	bls.n	a2be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a26a:	f7ff fedf 	bl	a02c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    a26e:	2800      	cmp	r0, #0
    a270:	db25      	blt.n	a2be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    a272:	d0e9      	beq.n	a248 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    a274:	9b01      	ldr	r3, [sp, #4]
    a276:	2b00      	cmp	r3, #0
    a278:	d1e6      	bne.n	a248 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    a27a:	b107      	cbz	r7, a27e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    a27c:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    a27e:	69eb      	ldr	r3, [r5, #28]
    a280:	42a3      	cmp	r3, r4
    a282:	d31c      	bcc.n	a2be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a284:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    a288:	4621      	mov	r1, r4
    a28a:	4628      	mov	r0, r5
    a28c:	f7ff ff4c 	bl	a128 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    a290:	4607      	mov	r7, r0
    a292:	b1a0      	cbz	r0, a2be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    a294:	b93e      	cbnz	r6, a2a6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    a296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a298:	2b00      	cmp	r3, #0
    a29a:	db01      	blt.n	a2a0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    a29c:	3b01      	subs	r3, #1
    a29e:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    a2a0:	f8c8 4000 	str.w	r4, [r8]
  return true;
    a2a4:	e00c      	b.n	a2c0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    a2a6:	2e01      	cmp	r6, #1
    a2a8:	d009      	beq.n	a2be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a2aa:	69eb      	ldr	r3, [r5, #28]
    a2ac:	429e      	cmp	r6, r3
    a2ae:	d806      	bhi.n	a2be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a2b0:	4631      	mov	r1, r6
    a2b2:	4622      	mov	r2, r4
    a2b4:	4628      	mov	r0, r5
    a2b6:	f7ff ff37 	bl	a128 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    a2ba:	2800      	cmp	r0, #0
    a2bc:	d1eb      	bne.n	a296 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    a2be:	2700      	movs	r7, #0
}
    a2c0:	4638      	mov	r0, r7
    a2c2:	b002      	add	sp, #8
    a2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2c8:	460c      	mov	r4, r1
    setStart = false;
    a2ca:	2700      	movs	r7, #0
    a2cc:	e7bc      	b.n	a248 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    a2ce:	bf00      	nop

0000a2d0 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    a2d0:	2901      	cmp	r1, #1
    a2d2:	d90c      	bls.n	a2ee <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    a2d4:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    a2d6:	69c4      	ldr	r4, [r0, #28]
    a2d8:	428c      	cmp	r4, r1
    a2da:	d303      	bcc.n	a2e4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    a2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    a2e0:	f7ff bea4 	b.w	a02c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    a2e4:	f04f 30ff 	mov.w	r0, #4294967295
    a2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    a2ec:	4770      	bx	lr
    a2ee:	f04f 30ff 	mov.w	r0, #4294967295
    a2f2:	4770      	bx	lr

0000a2f4 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    a2f4:	b570      	push	{r4, r5, r6, lr}
    a2f6:	4605      	mov	r5, r0
    a2f8:	b082      	sub	sp, #8
    a2fa:	460c      	mov	r4, r1
    a2fc:	e01d      	b.n	a33a <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    a2fe:	69eb      	ldr	r3, [r5, #28]
    a300:	429c      	cmp	r4, r3
    a302:	d81f      	bhi.n	a344 <FatPartition::freeChain(unsigned long)+0x50>
    a304:	f7ff fe92 	bl	a02c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    a308:	4606      	mov	r6, r0
    if (fg < 0) {
    a30a:	4621      	mov	r1, r4
    a30c:	2200      	movs	r2, #0
    a30e:	2e00      	cmp	r6, #0
    a310:	4628      	mov	r0, r5
    a312:	db17      	blt.n	a344 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    a314:	69eb      	ldr	r3, [r5, #28]
    a316:	429c      	cmp	r4, r3
    a318:	d814      	bhi.n	a344 <FatPartition::freeChain(unsigned long)+0x50>
    a31a:	f7ff ff05 	bl	a128 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    a31e:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    a320:	b180      	cbz	r0, a344 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    a322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a324:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    a326:	f103 0301 	add.w	r3, r3, #1
    a32a:	bfa8      	it	ge
    a32c:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    a32e:	68eb      	ldr	r3, [r5, #12]
    a330:	42a3      	cmp	r3, r4
    cluster = next;
    a332:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    a334:	bf88      	it	hi
    a336:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    a338:	b12e      	cbz	r6, a346 <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    a33a:	2c01      	cmp	r4, #1
    a33c:	4621      	mov	r1, r4
    a33e:	aa01      	add	r2, sp, #4
    a340:	4628      	mov	r0, r5
    a342:	d8dc      	bhi.n	a2fe <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    a344:	2000      	movs	r0, #0
}
    a346:	b002      	add	sp, #8
    a348:	bd70      	pop	{r4, r5, r6, pc}
    a34a:	bf00      	nop

0000a34c <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    a34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a350:	4606      	mov	r6, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    a352:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    a354:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
    a356:	2800      	cmp	r0, #0
    a358:	da1b      	bge.n	a392 <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
    a35a:	79f2      	ldrb	r2, [r6, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    a35c:	2a0c      	cmp	r2, #12
    a35e:	d11b      	bne.n	a398 <FatPartition::freeClusterCount()+0x4c>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    a360:	69f7      	ldr	r7, [r6, #28]
    a362:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    a364:	2b02      	cmp	r3, #2
    a366:	f240 80cd 	bls.w	a504 <FatPartition::freeClusterCount()+0x1b8>
    a36a:	2402      	movs	r4, #2
    uint32_t free = 0;
    a36c:	2500      	movs	r5, #0
    a36e:	4621      	mov	r1, r4
    a370:	aa02      	add	r2, sp, #8
    a372:	4630      	mov	r0, r6
    a374:	f7ff fe5a 	bl	a02c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
    a378:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
    a37a:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
    a37e:	db06      	blt.n	a38e <FatPartition::freeClusterCount()+0x42>
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
    a380:	d157      	bne.n	a432 <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
    a382:	42a7      	cmp	r7, r4
    a384:	461c      	mov	r4, r3
    a386:	d05c      	beq.n	a442 <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
    a388:	69f2      	ldr	r2, [r6, #28]
    a38a:	4293      	cmp	r3, r2
    a38c:	d9ef      	bls.n	a36e <FatPartition::freeClusterCount()+0x22>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    a38e:	f04f 30ff 	mov.w	r0, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
    a392:	b004      	add	sp, #16
    a394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
    a398:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
    a39a:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
    a39c:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    a3a0:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
    a3a2:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
    a3a4:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
    a3a6:	e9cd 1002 	strd	r1, r0, [sp, #8]
    a3aa:	f100 8085 	bmi.w	a4b8 <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
    a3ae:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
    a3b0:	f04f 33ff 	mov.w	r3, #4294967295
  if (fatType() == FAT_TYPE_FAT32) {
    a3b4:	2a20      	cmp	r2, #32
    return m_buffer;
    a3b6:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
    a3ba:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    a3be:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
    a3c2:	d042      	beq.n	a44a <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    a3c4:	f8d6 8000 	ldr.w	r8, [r6]
    a3c8:	4b4f      	ldr	r3, [pc, #316]	; (a508 <FatPartition::freeClusterCount()+0x1bc>)
    a3ca:	f8d8 2000 	ldr.w	r2, [r8]
    a3ce:	f8d6 a018 	ldr.w	sl, [r6, #24]
    a3d2:	6995      	ldr	r5, [r2, #24]
    a3d4:	429d      	cmp	r5, r3
    a3d6:	d178      	bne.n	a4ca <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
    a3d8:	2c00      	cmp	r4, #0
    a3da:	f000 8082 	beq.w	a4e2 <FatPartition::freeClusterCount()+0x196>
    a3de:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
    a3e2:	6913      	ldr	r3, [r2, #16]
    a3e4:	4651      	mov	r1, sl
    a3e6:	463a      	mov	r2, r7
    a3e8:	4640      	mov	r0, r8
    a3ea:	4798      	blx	r3
    a3ec:	2800      	cmp	r0, #0
    a3ee:	d0ce      	beq.n	a38e <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    a3f0:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
    a3f2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    a3f6:	468e      	mov	lr, r1
    a3f8:	bf28      	it	cs
    a3fa:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
    a3fe:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
    a402:	45bc      	cmp	ip, r7
    a404:	d90b      	bls.n	a41e <FatPartition::freeClusterCount()+0xd2>
    a406:	9d03      	ldr	r5, [sp, #12]
    a408:	463b      	mov	r3, r7
    a40a:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
    a40c:	f833 4b02 	ldrh.w	r4, [r3], #2
    a410:	b90c      	cbnz	r4, a416 <FatPartition::freeClusterCount()+0xca>
    a412:	3501      	adds	r5, #1
    a414:	4602      	mov	r2, r0
  while (p < e) {
    a416:	459c      	cmp	ip, r3
    a418:	d8f8      	bhi.n	a40c <FatPartition::freeClusterCount()+0xc0>
    a41a:	b102      	cbz	r2, a41e <FatPartition::freeClusterCount()+0xd2>
    a41c:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    a41e:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
    a422:	eba1 010e 	sub.w	r1, r1, lr
    a426:	45d1      	cmp	r9, sl
    a428:	9102      	str	r1, [sp, #8]
    a42a:	d05a      	beq.n	a4e2 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    a42c:	f8d8 2000 	ldr.w	r2, [r8]
    a430:	e7d7      	b.n	a3e2 <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
    a432:	9a02      	ldr	r2, [sp, #8]
    a434:	2a00      	cmp	r2, #0
    a436:	d1a4      	bne.n	a382 <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
    a438:	42a7      	cmp	r7, r4
        free++;
    a43a:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
    a43e:	461c      	mov	r4, r3
    a440:	d1a2      	bne.n	a388 <FatPartition::freeClusterCount()+0x3c>
    return free;
    a442:	4628      	mov	r0, r5
}
    a444:	b004      	add	sp, #16
    a446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    a44a:	f8d6 a000 	ldr.w	sl, [r6]
    a44e:	4b2e      	ldr	r3, [pc, #184]	; (a508 <FatPartition::freeClusterCount()+0x1bc>)
    a450:	f8da 2000 	ldr.w	r2, [sl]
    a454:	f8d6 9018 	ldr.w	r9, [r6, #24]
    a458:	6995      	ldr	r5, [r2, #24]
    a45a:	429d      	cmp	r5, r3
    a45c:	d146      	bne.n	a4ec <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
    a45e:	2c00      	cmp	r4, #0
    a460:	d03f      	beq.n	a4e2 <FatPartition::freeClusterCount()+0x196>
    a462:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
    a466:	6913      	ldr	r3, [r2, #16]
    a468:	4649      	mov	r1, r9
    a46a:	463a      	mov	r2, r7
    a46c:	4650      	mov	r0, sl
    a46e:	4798      	blx	r3
    a470:	2800      	cmp	r0, #0
    a472:	d08c      	beq.n	a38e <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    a474:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
    a478:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    a47c:	46e6      	mov	lr, ip
    a47e:	bf28      	it	cs
    a480:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
    a484:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
    a488:	42ba      	cmp	r2, r7
    a48a:	d90b      	bls.n	a4a4 <FatPartition::freeClusterCount()+0x158>
    a48c:	9d03      	ldr	r5, [sp, #12]
    a48e:	463b      	mov	r3, r7
    a490:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
    a492:	f853 4b04 	ldr.w	r4, [r3], #4
    a496:	b90c      	cbnz	r4, a49c <FatPartition::freeClusterCount()+0x150>
    a498:	3501      	adds	r5, #1
    a49a:	4601      	mov	r1, r0
  while (p < e) {
    a49c:	429a      	cmp	r2, r3
    a49e:	d8f8      	bhi.n	a492 <FatPartition::freeClusterCount()+0x146>
    a4a0:	b101      	cbz	r1, a4a4 <FatPartition::freeClusterCount()+0x158>
    a4a2:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    a4a4:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
    a4a8:	ebac 030e 	sub.w	r3, ip, lr
    a4ac:	45c8      	cmp	r8, r9
    a4ae:	9302      	str	r3, [sp, #8]
    a4b0:	d017      	beq.n	a4e2 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    a4b2:	f8da 2000 	ldr.w	r2, [sl]
    a4b6:	e7d6      	b.n	a466 <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
    a4b8:	f506 700e 	add.w	r0, r6, #568	; 0x238
    a4bc:	f002 fb22 	bl	cb04 <FsCache::sync()>
    a4c0:	2800      	cmp	r0, #0
    a4c2:	f43f af64 	beq.w	a38e <FatPartition::freeClusterCount()+0x42>
    a4c6:	79f2      	ldrb	r2, [r6, #7]
    a4c8:	e771      	b.n	a3ae <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    a4ca:	4623      	mov	r3, r4
    a4cc:	ac02      	add	r4, sp, #8
    a4ce:	463a      	mov	r2, r7
    a4d0:	4651      	mov	r1, sl
    a4d2:	9401      	str	r4, [sp, #4]
    a4d4:	4640      	mov	r0, r8
    a4d6:	4c0d      	ldr	r4, [pc, #52]	; (a50c <FatPartition::freeClusterCount()+0x1c0>)
    a4d8:	9400      	str	r4, [sp, #0]
    a4da:	47a8      	blx	r5
    a4dc:	2800      	cmp	r0, #0
    a4de:	f43f af56 	beq.w	a38e <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
    a4e2:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    a4e4:	6270      	str	r0, [r6, #36]	; 0x24
}
    a4e6:	b004      	add	sp, #16
    a4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    a4ec:	4623      	mov	r3, r4
    a4ee:	ac02      	add	r4, sp, #8
    a4f0:	463a      	mov	r2, r7
    a4f2:	4649      	mov	r1, r9
    a4f4:	9401      	str	r4, [sp, #4]
    a4f6:	4650      	mov	r0, sl
    a4f8:	4c05      	ldr	r4, [pc, #20]	; (a510 <FatPartition::freeClusterCount()+0x1c4>)
    a4fa:	9400      	str	r4, [sp, #0]
    a4fc:	47a8      	blx	r5
    a4fe:	2800      	cmp	r0, #0
    a500:	d1ef      	bne.n	a4e2 <FatPartition::freeClusterCount()+0x196>
    a502:	e744      	b.n	a38e <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
    a504:	2000      	movs	r0, #0
    a506:	e744      	b.n	a392 <FatPartition::freeClusterCount()+0x46>
    a508:	00009f81 	.word	0x00009f81
    a50c:	00009fc5 	.word	0x00009fc5
    a510:	00009ff9 	.word	0x00009ff9

0000a514 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    a514:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    a516:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    a518:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    a51a:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    a51c:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    a51e:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    a522:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    a526:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    a528:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    a52a:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    a52c:	62e1      	str	r1, [r4, #44]	; 0x2c
    a52e:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    a532:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    a536:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    a53a:	6362      	str	r2, [r4, #52]	; 0x34
    a53c:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    a540:	b1cd      	cbz	r5, a576 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    a542:	2d04      	cmp	r5, #4
    a544:	d901      	bls.n	a54a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    a546:	2000      	movs	r0, #0
}
    a548:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    a54a:	461a      	mov	r2, r3
    a54c:	4619      	mov	r1, r3
    a54e:	4630      	mov	r0, r6
    a550:	f002 fb04 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    a554:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    a558:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    a55c:	442b      	add	r3, r5
    a55e:	011d      	lsls	r5, r3, #4
    a560:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    a564:	2800      	cmp	r0, #0
    a566:	d0ee      	beq.n	a546 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a568:	7919      	ldrb	r1, [r3, #4]
    a56a:	2900      	cmp	r1, #0
    a56c:	d0eb      	beq.n	a546 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a56e:	5d52      	ldrb	r2, [r2, r5]
    a570:	0652      	lsls	r2, r2, #25
    a572:	d1e8      	bne.n	a546 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    a574:	689d      	ldr	r5, [r3, #8]
    a576:	2200      	movs	r2, #0
    a578:	4629      	mov	r1, r5
    a57a:	4630      	mov	r0, r6
    a57c:	f002 faee 	bl	cb5c <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    a580:	2800      	cmp	r0, #0
    a582:	d0e0      	beq.n	a546 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a584:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    a588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a58c:	d1db      	bne.n	a546 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    a58e:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    a590:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    a592:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    a594:	2a01      	cmp	r2, #1
    a596:	d8d6      	bhi.n	a546 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    a598:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    a59a:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a59c:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    a59e:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    a5a0:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    a5a2:	f04f 0300 	mov.w	r3, #0
    a5a6:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a5a8:	d044      	beq.n	a634 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    a5aa:	2201      	movs	r2, #1
    a5ac:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    a5ae:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a5b0:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    a5b2:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a5b4:	4291      	cmp	r1, r2
    a5b6:	d004      	beq.n	a5c2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    a5b8:	2b08      	cmp	r3, #8
    a5ba:	d1f7      	bne.n	a5ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    a5bc:	2000      	movs	r0, #0
    a5be:	71a3      	strb	r3, [r4, #6]
}
    a5c0:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    a5c2:	461e      	mov	r6, r3
    a5c4:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    a5c6:	8ac1      	ldrh	r1, [r0, #22]
    a5c8:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    a5ca:	b909      	cbnz	r1, a5d0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    a5cc:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    a5ce:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    a5d0:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    a5d2:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    a5d6:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    a5d8:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    a5da:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    a5dc:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a5de:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    a5e2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a5e6:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    a5ea:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a5ee:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    a5f0:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    a5f4:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    a5f6:	b902      	cbnz	r2, a5fa <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    a5f8:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    a5fa:	1aed      	subs	r5, r5, r3
    a5fc:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    a5fe:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    a600:	1c5a      	adds	r2, r3, #1
    a602:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    a604:	f04f 32ff 	mov.w	r2, #4294967295
    a608:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    a60a:	f640 72f4 	movw	r2, #4084	; 0xff4
    a60e:	4293      	cmp	r3, r2
    a610:	d90c      	bls.n	a62c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    a612:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    a616:	4293      	cmp	r3, r2
    a618:	d90a      	bls.n	a630 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    a61a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    a61c:	2320      	movs	r3, #32
    a61e:	6222      	str	r2, [r4, #32]
  return true;
    a620:	2001      	movs	r0, #1
    m_fatType = 12;
    a622:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    a624:	6321      	str	r1, [r4, #48]	; 0x30
    a626:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    a62a:	bd70      	pop	{r4, r5, r6, pc}
    a62c:	230c      	movs	r3, #12
    a62e:	e7f7      	b.n	a620 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    a630:	2310      	movs	r3, #16
    a632:	e7f5      	b.n	a620 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a634:	461e      	mov	r6, r3
    a636:	e7c6      	b.n	a5c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

0000a638 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    a638:	b530      	push	{r4, r5, lr}
  FatFile* vwd() {return &m_vwd;}
    a63a:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    a63e:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    a640:	2300      	movs	r3, #0
    a642:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    a644:	a801      	add	r0, sp, #4
    a646:	4621      	mov	r1, r4
    a648:	9301      	str	r3, [sp, #4]
    a64a:	f7fe fa27 	bl	8a9c <FatFile::open(FatFile*, char const*, int)>
    a64e:	4605      	mov	r5, r0
    a650:	b198      	cbz	r0, a67a <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    a652:	f89d 3004 	ldrb.w	r3, [sp, #4]
    a656:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    a65a:	d011      	beq.n	a680 <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    a65c:	f10d 0e04 	add.w	lr, sp, #4
    a660:	46a4      	mov	ip, r4
    a662:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    a666:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a66a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    a66e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a672:	f8de 3000 	ldr.w	r3, [lr]
    a676:	f8cc 3000 	str.w	r3, [ip]
  return true;

 fail:
  return false;
}
    a67a:	4628      	mov	r0, r5
    a67c:	b00b      	add	sp, #44	; 0x2c
    a67e:	bd30      	pop	{r4, r5, pc}
  return false;
    a680:	461d      	mov	r5, r3
}
    a682:	4628      	mov	r0, r5
    a684:	b00b      	add	sp, #44	; 0x2c
    a686:	bd30      	pop	{r4, r5, pc}

0000a688 <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
    a688:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    a68a:	b570      	push	{r4, r5, r6, lr}
    a68c:	4604      	mov	r4, r0
  if (this == &from) return *this;
    a68e:	d021      	beq.n	a6d4 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  if (m_fFile && m_fFile->close()) {
    a690:	6b80      	ldr	r0, [r0, #56]	; 0x38
    a692:	460d      	mov	r5, r1
    a694:	b118      	cbz	r0, a69e <FsBaseFile::operator=(FsBaseFile const&)+0x16>
    a696:	f7fe f87b 	bl	8790 <FatFile::close()>
    a69a:	2800      	cmp	r0, #0
    a69c:	d141      	bne.n	a722 <FsBaseFile::operator=(FsBaseFile const&)+0x9a>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    a69e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a6a0:	b118      	cbz	r0, a6aa <FsBaseFile::operator=(FsBaseFile const&)+0x22>
    a6a2:	f7fc fb4f 	bl	6d44 <ExFatFile::close()>
    a6a6:	2800      	cmp	r0, #0
    a6a8:	d141      	bne.n	a72e <FsBaseFile::operator=(FsBaseFile const&)+0xa6>
  if (from.m_fFile) {
    a6aa:	6bae      	ldr	r6, [r5, #56]	; 0x38
    a6ac:	b1a6      	cbz	r6, a6d8 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    a6ae:	4621      	mov	r1, r4
    a6b0:	2024      	movs	r0, #36	; 0x24
    a6b2:	f000 f8e9 	bl	a888 <operator new(unsigned int, unsigned long*)>
    a6b6:	2300      	movs	r3, #0
    a6b8:	4684      	mov	ip, r0
    a6ba:	8003      	strh	r3, [r0, #0]
    a6bc:	7083      	strb	r3, [r0, #2]
    a6be:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    a6c0:	6bad      	ldr	r5, [r5, #56]	; 0x38
    a6c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a6c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a6c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a6ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a6ce:	682b      	ldr	r3, [r5, #0]
    a6d0:	f8cc 3000 	str.w	r3, [ip]
}
    a6d4:	4620      	mov	r0, r4
    a6d6:	bd70      	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    a6d8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a6da:	2b00      	cmp	r3, #0
    a6dc:	d0fa      	beq.n	a6d4 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
    m_xFile = new (m_fileMem) ExFatFile;
    a6de:	4621      	mov	r1, r4
    a6e0:	2038      	movs	r0, #56	; 0x38
    a6e2:	f000 f8d1 	bl	a888 <operator new(unsigned int, unsigned long*)>
    a6e6:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    a6ea:	8646      	strh	r6, [r0, #50]	; 0x32
    a6ec:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    a6ee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a6f0:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    a6f4:	681e      	ldr	r6, [r3, #0]
    a6f6:	3310      	adds	r3, #16
    a6f8:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    a6fc:	3010      	adds	r0, #16
    a6fe:	f853 1c08 	ldr.w	r1, [r3, #-8]
    a702:	f853 2c04 	ldr.w	r2, [r3, #-4]
    a706:	4563      	cmp	r3, ip
    a708:	f840 6c10 	str.w	r6, [r0, #-16]
    a70c:	f840 5c0c 	str.w	r5, [r0, #-12]
    a710:	f840 1c08 	str.w	r1, [r0, #-8]
    a714:	f840 2c04 	str.w	r2, [r0, #-4]
    a718:	d1ec      	bne.n	a6f4 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    a71a:	681b      	ldr	r3, [r3, #0]
    a71c:	6003      	str	r3, [r0, #0]
}
    a71e:	4620      	mov	r0, r4
    a720:	bd70      	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    a722:	2300      	movs	r3, #0
    a724:	63a3      	str	r3, [r4, #56]	; 0x38
  if (from.m_fFile) {
    a726:	6bae      	ldr	r6, [r5, #56]	; 0x38
    a728:	2e00      	cmp	r6, #0
    a72a:	d1c0      	bne.n	a6ae <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    a72c:	e7d4      	b.n	a6d8 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_xFile = nullptr;
    a72e:	2300      	movs	r3, #0
  if (from.m_fFile) {
    a730:	6bae      	ldr	r6, [r5, #56]	; 0x38
    m_xFile = nullptr;
    a732:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    a734:	2e00      	cmp	r6, #0
    a736:	d1ba      	bne.n	a6ae <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    a738:	e7ce      	b.n	a6d8 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    a73a:	bf00      	nop

0000a73c <FsBaseFile::close()>:
bool FsBaseFile::close() {
    a73c:	b510      	push	{r4, lr}
    a73e:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    a740:	6b80      	ldr	r0, [r0, #56]	; 0x38
    a742:	b110      	cbz	r0, a74a <FsBaseFile::close()+0xe>
    a744:	f7fe f824 	bl	8790 <FatFile::close()>
    a748:	b930      	cbnz	r0, a758 <FsBaseFile::close()+0x1c>
  if (m_xFile && m_xFile->close()) {
    a74a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a74c:	b110      	cbz	r0, a754 <FsBaseFile::close()+0x18>
    a74e:	f7fc faf9 	bl	6d44 <ExFatFile::close()>
    a752:	b920      	cbnz	r0, a75e <FsBaseFile::close()+0x22>
    return true;
  }
  return false;
    a754:	2000      	movs	r0, #0
}
    a756:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    a758:	2300      	movs	r3, #0
    a75a:	63a3      	str	r3, [r4, #56]	; 0x38
}
    a75c:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    a75e:	2300      	movs	r3, #0
    a760:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    a762:	bd10      	pop	{r4, pc}

0000a764 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    a764:	2900      	cmp	r1, #0
    a766:	d052      	beq.n	a80e <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    a768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a76c:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    a76e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    a770:	460d      	mov	r5, r1
    a772:	4617      	mov	r7, r2
    a774:	461e      	mov	r6, r3
    a776:	b110      	cbz	r0, a77e <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    a778:	f7fe f80a 	bl	8790 <FatFile::close()>
    a77c:	bba0      	cbnz	r0, a7e8 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    a77e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a780:	b110      	cbz	r0, a788 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    a782:	f7fc fadf 	bl	6d44 <ExFatFile::close()>
    a786:	bbb8      	cbnz	r0, a7f8 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
    a788:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    a78c:	f1b8 0f00 	cmp.w	r8, #0
    a790:	d011      	beq.n	a7b6 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    a792:	4621      	mov	r1, r4
    a794:	2024      	movs	r0, #36	; 0x24
    a796:	f000 f877 	bl	a888 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    a79a:	4633      	mov	r3, r6
    a79c:	2600      	movs	r6, #0
    a79e:	463a      	mov	r2, r7
    a7a0:	8006      	strh	r6, [r0, #0]
    a7a2:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    a7a4:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    a7a6:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    a7aa:	f7fe f9f9 	bl	8ba0 <FatFile::open(FatVolume*, char const*, int)>
    a7ae:	bb58      	cbnz	r0, a808 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
    a7b0:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    a7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    a7b6:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    a7ba:	b193      	cbz	r3, a7e2 <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    a7bc:	4621      	mov	r1, r4
    a7be:	2038      	movs	r0, #56	; 0x38
    a7c0:	f000 f862 	bl	a888 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    a7c4:	4633      	mov	r3, r6
    a7c6:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    a7ca:	463a      	mov	r2, r7
    a7cc:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    a7d0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    a7d2:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    a7d6:	f7fc fee9 	bl	75ac <ExFatFile::open(ExFatVolume*, char const*, int)>
    a7da:	b9a8      	cbnz	r0, a808 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    a7dc:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    a7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    a7e2:	2000      	movs	r0, #0
}
    a7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    a7e8:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    a7ea:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    a7ee:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    a7f0:	f1b8 0f00 	cmp.w	r8, #0
    a7f4:	d1cd      	bne.n	a792 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    a7f6:	e7de      	b.n	a7b6 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    a7f8:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    a7fa:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    a7fe:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    a800:	f1b8 0f00 	cmp.w	r8, #0
    a804:	d1c5      	bne.n	a792 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    a806:	e7d6      	b.n	a7b6 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    a808:	2001      	movs	r0, #1
}
    a80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    a80e:	2000      	movs	r0, #0
}
    a810:	4770      	bx	lr
    a812:	bf00      	nop

0000a814 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a816:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    a818:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    a81a:	460d      	mov	r5, r1
    a81c:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
    a81e:	b110      	cbz	r0, a826 <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    a820:	f7fd ffb6 	bl	8790 <FatFile::close()>
    a824:	bb38      	cbnz	r0, a876 <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
    a826:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a828:	b110      	cbz	r0, a830 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    a82a:	f7fc fa8b 	bl	6d44 <ExFatFile::close()>
    a82e:	bb38      	cbnz	r0, a880 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
    a830:	6bae      	ldr	r6, [r5, #56]	; 0x38
    a832:	b176      	cbz	r6, a852 <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
    a834:	4621      	mov	r1, r4
    a836:	2024      	movs	r0, #36	; 0x24
    a838:	f000 f826 	bl	a888 <operator new(unsigned int, unsigned long*)>
    a83c:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    a83e:	463a      	mov	r2, r7
    a840:	8001      	strh	r1, [r0, #0]
    a842:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    a844:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    a846:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    a848:	f7fe fd10 	bl	926c <FatFile::openNext(FatFile*, int)>
    a84c:	b988      	cbnz	r0, a872 <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
    a84e:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    a850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    a852:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    a854:	2800      	cmp	r0, #0
    a856:	d0fb      	beq.n	a850 <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
    a858:	4621      	mov	r1, r4
    a85a:	2038      	movs	r0, #56	; 0x38
    a85c:	f000 f814 	bl	a888 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    a860:	463a      	mov	r2, r7
    a862:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    a866:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    a868:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    a86a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    a86c:	f7fc fea6 	bl	75bc <ExFatFile::openNext(ExFatFile*, int)>
    a870:	b120      	cbz	r0, a87c <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
    a872:	2001      	movs	r0, #1
}
    a874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    a876:	2300      	movs	r3, #0
    a878:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    a87a:	e7d9      	b.n	a830 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
    a87c:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    a87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
    a880:	2300      	movs	r3, #0
    a882:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    a884:	e7d4      	b.n	a830 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    a886:	bf00      	nop

0000a888 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    a888:	4608      	mov	r0, r1
    a88a:	4770      	bx	lr

0000a88c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    a890:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    a892:	4604      	mov	r4, r0
    a894:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    a896:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    a89a:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    a89e:	4601      	mov	r1, r0
    a8a0:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    a8a4:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    a8a6:	f7ff ffef 	bl	a888 <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    a8aa:	4642      	mov	r2, r8
  ExFatPartition() {}
    a8ac:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    a8b0:	4605      	mov	r5, r0
    a8b2:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    a8b6:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    a8ba:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    a8be:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    a8c2:	f7fd fdf9 	bl	84b8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    a8c6:	bba0      	cbnz	r0, a932 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    a8c8:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    a8ca:	4621      	mov	r1, r4
    a8cc:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    a8d0:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    a8d4:	f7ff ffd8 	bl	a888 <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    a8d8:	2302      	movs	r3, #2
    a8da:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    a8dc:	4642      	mov	r2, r8
    a8de:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    a8e2:	4605      	mov	r5, r0
    a8e4:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    a8e8:	7203      	strb	r3, [r0, #8]
    a8ea:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    a8ee:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    a8f2:	f7ff fe0f 	bl	a514 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    a8f6:	b938      	cbnz	r0, a908 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    a8f8:	2300      	movs	r3, #0
    a8fa:	4a1a      	ldr	r2, [pc, #104]	; (a964 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    a8fc:	4618      	mov	r0, r3
  m_cwv = nullptr;
    a8fe:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    a900:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    a904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    a908:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    a90c:	4630      	mov	r0, r6
    a90e:	f7fd ff3f 	bl	8790 <FatFile::close()>
    return m_vwd.openRoot(this);
    a912:	4629      	mov	r1, r5
    a914:	4630      	mov	r0, r6
    a916:	f7fe f979 	bl	8c0c <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    a91a:	2800      	cmp	r0, #0
    a91c:	d0ec      	beq.n	a8f8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    a91e:	4b12      	ldr	r3, [pc, #72]	; (a968 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    a920:	681a      	ldr	r2, [r3, #0]
    a922:	b9aa      	cbnz	r2, a950 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    a924:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    a926:	4b0f      	ldr	r3, [pc, #60]	; (a964 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    a928:	b1af      	cbz	r7, a956 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    a92a:	2001      	movs	r0, #1
    m_cwv = this;
    a92c:	601c      	str	r4, [r3, #0]
}
    a92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    a932:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    a936:	4630      	mov	r0, r6
    a938:	f7fc fa04 	bl	6d44 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    a93c:	4629      	mov	r1, r5
    a93e:	4630      	mov	r0, r6
    a940:	f7fc fa2e 	bl	6da0 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    a944:	2800      	cmp	r0, #0
    a946:	d0bf      	beq.n	a8c8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    a948:	4b08      	ldr	r3, [pc, #32]	; (a96c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    a94a:	681a      	ldr	r2, [r3, #0]
    a94c:	2a00      	cmp	r2, #0
    a94e:	d0e9      	beq.n	a924 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    a950:	4b04      	ldr	r3, [pc, #16]	; (a964 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    a952:	2f00      	cmp	r7, #0
    a954:	d1e9      	bne.n	a92a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    a956:	681a      	ldr	r2, [r3, #0]
    a958:	2a00      	cmp	r2, #0
    a95a:	d0e6      	beq.n	a92a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    a95c:	2001      	movs	r0, #1
}
    a95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a962:	bf00      	nop
    a964:	20034768 	.word	0x20034768
    a968:	2003476c 	.word	0x2003476c
    a96c:	20034734 	.word	0x20034734

0000a970 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    a970:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    a972:	2500      	movs	r5, #0
    a974:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    a978:	4604      	mov	r4, r0
    a97a:	6045      	str	r5, [r0, #4]
    a97c:	7305      	strb	r5, [r0, #12]
    a97e:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
    a980:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    a984:	4d03      	ldr	r5, [pc, #12]	; (a994 <FsVolume::open(char const*, int)+0x24>)
    a986:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    a98a:	f7ff feeb 	bl	a764 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    a98e:	4620      	mov	r0, r4
    a990:	bd70      	pop	{r4, r5, r6, pc}
    a992:	bf00      	nop
    a994:	20000c20 	.word	0x20000c20

0000a998 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    a998:	f04f 30ff 	mov.w	r0, #4294967295
    a99c:	4770      	bx	lr
    a99e:	bf00      	nop

0000a9a0 <SharedSpiCard::errorCode() const>:
  }
    a9a0:	7c40      	ldrb	r0, [r0, #17]
    a9a2:	4770      	bx	lr

0000a9a4 <SharedSpiCard::errorData() const>:
  }
    a9a4:	7d00      	ldrb	r0, [r0, #20]
    a9a6:	4770      	bx	lr

0000a9a8 <SharedSpiCard::type() const>:
  }
    a9a8:	7d40      	ldrb	r0, [r0, #21]
    a9aa:	4770      	bx	lr

0000a9ac <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    a9ac:	2001      	movs	r0, #1
    a9ae:	4770      	bx	lr

0000a9b0 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    a9b0:	7f00      	ldrb	r0, [r0, #28]
    a9b2:	4770      	bx	lr

0000a9b4 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    a9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9b8:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a9ba:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    a9bc:	4605      	mov	r5, r0
    a9be:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a9c0:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    a9c2:	4691      	mov	r9, r2
    a9c4:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a9c6:	d028      	beq.n	aa1a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    a9c8:	682b      	ldr	r3, [r5, #0]
    a9ca:	4621      	mov	r1, r4
    a9cc:	4628      	mov	r0, r5
    a9ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a9d0:	4798      	blx	r3
    a9d2:	b198      	cbz	r0, a9fc <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    a9d4:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    a9d6:	f1b9 0f00 	cmp.w	r9, #0
    a9da:	d012      	beq.n	aa02 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    a9dc:	eb04 0809 	add.w	r8, r4, r9
    a9e0:	e001      	b.n	a9e6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    a9e2:	45a0      	cmp	r8, r4
    a9e4:	d00d      	beq.n	aa02 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    a9e6:	4639      	mov	r1, r7
    a9e8:	4620      	mov	r0, r4
    a9ea:	47b0      	blx	r6
    if (!writeData(src)) {
    a9ec:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    a9ee:	4601      	mov	r1, r0
    if (!writeData(src)) {
    a9f0:	4628      	mov	r0, r5
    a9f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    a9f4:	3401      	adds	r4, #1
    if (!writeData(src)) {
    a9f6:	4798      	blx	r3
    a9f8:	2800      	cmp	r0, #0
    a9fa:	d1f2      	bne.n	a9e2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    a9fc:	2000      	movs	r0, #0
}
    a9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    aa02:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    aa04:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    aa06:	444b      	add	r3, r9
    aa08:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    aa0a:	2800      	cmp	r0, #0
    aa0c:	d1f7      	bne.n	a9fe <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    aa0e:	682b      	ldr	r3, [r5, #0]
    aa10:	4628      	mov	r0, r5
    aa12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    aa14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    aa18:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    aa1a:	6983      	ldr	r3, [r0, #24]
    aa1c:	428b      	cmp	r3, r1
    aa1e:	d1d3      	bne.n	a9c8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    aa20:	e7d9      	b.n	a9d6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    aa22:	bf00      	nop

0000aa24 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    aa24:	4770      	bx	lr
    aa26:	bf00      	nop

0000aa28 <SharedSpiCard::end()>:
    m_spiDriver.end();
    aa28:	3004      	adds	r0, #4
    aa2a:	f002 b817 	b.w	ca5c <SdSpiArduinoDriver::end()>
    aa2e:	bf00      	nop

0000aa30 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    aa30:	b510      	push	{r4, lr}
    aa32:	4604      	mov	r4, r0
    aa34:	2120      	movs	r1, #32
    aa36:	f003 f9cb 	bl	ddd0 <operator delete(void*, unsigned int)>
    aa3a:	4620      	mov	r0, r4
    aa3c:	bd10      	pop	{r4, pc}
    aa3e:	bf00      	nop

0000aa40 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    aa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa44:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    aa46:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    aa48:	4605      	mov	r5, r0
    aa4a:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    aa4c:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    aa4e:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    aa50:	d024      	beq.n	aa9c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    aa52:	682b      	ldr	r3, [r5, #0]
    aa54:	4631      	mov	r1, r6
    aa56:	4628      	mov	r0, r5
    aa58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    aa5a:	4798      	blx	r3
    aa5c:	b178      	cbz	r0, aa7e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    aa5e:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    aa60:	b187      	cbz	r7, aa84 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    aa62:	2600      	movs	r6, #0
    aa64:	e001      	b.n	aa6a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    aa66:	42b7      	cmp	r7, r6
    aa68:	d00c      	beq.n	aa84 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    aa6a:	682a      	ldr	r2, [r5, #0]
    aa6c:	4621      	mov	r1, r4
    aa6e:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    aa70:	3601      	adds	r6, #1
    if (!writeData(src)) {
    aa72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    aa74:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    aa78:	4790      	blx	r2
    aa7a:	2800      	cmp	r0, #0
    aa7c:	d1f3      	bne.n	aa66 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    aa7e:	2000      	movs	r0, #0
}
    aa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    aa84:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    aa86:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    aa88:	443b      	add	r3, r7
    aa8a:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    aa8c:	2800      	cmp	r0, #0
    aa8e:	d1f7      	bne.n	aa80 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    aa90:	682b      	ldr	r3, [r5, #0]
    aa92:	4628      	mov	r0, r5
    aa94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    aa96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    aa9a:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    aa9c:	6983      	ldr	r3, [r0, #24]
    aa9e:	428b      	cmp	r3, r1
    aaa0:	d1d7      	bne.n	aa52 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    aaa2:	e7dd      	b.n	aa60 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

0000aaa4 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    aaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aaa8:	4e20      	ldr	r6, [pc, #128]	; (ab2c <SharedSpiCard::writeStop()+0x88>)
    aaaa:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    aaac:	f100 0804 	add.w	r8, r0, #4
    aab0:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    aab2:	f505 7516 	add.w	r5, r5, #600	; 0x258
    aab6:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    aab8:	e003      	b.n	aac2 <SharedSpiCard::writeStop()+0x1e>
    aaba:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    aabc:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    aabe:	041b      	lsls	r3, r3, #16
    aac0:	d410      	bmi.n	aae4 <SharedSpiCard::writeStop()+0x40>
    aac2:	4640      	mov	r0, r8
    aac4:	f001 ffce 	bl	ca64 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    aac8:	28ff      	cmp	r0, #255	; 0xff
    aaca:	4604      	mov	r4, r0
    aacc:	d1f5      	bne.n	aaba <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    aace:	21fd      	movs	r1, #253	; 0xfd
    aad0:	4640      	mov	r0, r8
    aad2:	f001 ffe5 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    aad6:	7cbb      	ldrb	r3, [r7, #18]
    aad8:	b9cb      	cbnz	r3, ab0e <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    aada:	2300      	movs	r3, #0
    aadc:	2001      	movs	r0, #1
    aade:	74fb      	strb	r3, [r7, #19]
}
    aae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    aae4:	231e      	movs	r3, #30
  if (m_spiActive) {
    aae6:	7cb8      	ldrb	r0, [r7, #18]
    aae8:	747b      	strb	r3, [r7, #17]
    aaea:	2800      	cmp	r0, #0
    aaec:	d0f8      	beq.n	aae0 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    aaee:	7c38      	ldrb	r0, [r7, #16]
    aaf0:	2101      	movs	r1, #1
    aaf2:	f001 fef7 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    aaf6:	21ff      	movs	r1, #255	; 0xff
    aaf8:	4640      	mov	r0, r8
    aafa:	f001 ffd1 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    aafe:	4640      	mov	r0, r8
    ab00:	f001 ff84 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    ab04:	2300      	movs	r3, #0
  return false;
    ab06:	4618      	mov	r0, r3
    m_spiActive = false;
    ab08:	74bb      	strb	r3, [r7, #18]
}
    ab0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    ab0e:	2101      	movs	r1, #1
    ab10:	7c38      	ldrb	r0, [r7, #16]
    ab12:	f001 fee7 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ab16:	4621      	mov	r1, r4
    ab18:	4640      	mov	r0, r8
    ab1a:	f001 ffc1 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ab1e:	4640      	mov	r0, r8
    ab20:	f001 ff74 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    ab24:	2300      	movs	r3, #0
    ab26:	74bb      	strb	r3, [r7, #18]
}
    ab28:	e7d7      	b.n	aada <SharedSpiCard::writeStop()+0x36>
    ab2a:	bf00      	nop
    ab2c:	20035424 	.word	0x20035424

0000ab30 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    ab30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    ab34:	7cc3      	ldrb	r3, [r0, #19]
    ab36:	2b01      	cmp	r3, #1
    ab38:	d035      	beq.n	aba6 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    ab3a:	7c86      	ldrb	r6, [r0, #18]
    ab3c:	4604      	mov	r4, r0
    ab3e:	b14e      	cbz	r6, ab54 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    ab40:	3004      	adds	r0, #4
    ab42:	f001 ff8f 	bl	ca64 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    ab46:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    ab4a:	bf18      	it	ne
    ab4c:	2501      	movne	r5, #1
}
    ab4e:	4628      	mov	r0, r5
    ab50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    ab54:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    ab56:	f04f 0801 	mov.w	r8, #1
    ab5a:	4638      	mov	r0, r7
    ab5c:	f001 ff4c 	bl	c9f8 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    ab60:	4631      	mov	r1, r6
    ab62:	7c20      	ldrb	r0, [r4, #16]
    ab64:	f001 febe 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ab68:	21ff      	movs	r1, #255	; 0xff
    ab6a:	4638      	mov	r0, r7
    ab6c:	f001 ff98 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    ab70:	4638      	mov	r0, r7
    ab72:	f884 8012 	strb.w	r8, [r4, #18]
    ab76:	f001 ff75 	bl	ca64 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    ab7a:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    ab7c:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    ab80:	bf18      	it	ne
    ab82:	2501      	movne	r5, #1
  if (m_spiActive) {
    ab84:	2b00      	cmp	r3, #0
    ab86:	d0e2      	beq.n	ab4e <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    ab88:	4641      	mov	r1, r8
    ab8a:	7c20      	ldrb	r0, [r4, #16]
    ab8c:	f001 feaa 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ab90:	21ff      	movs	r1, #255	; 0xff
    ab92:	4638      	mov	r0, r7
    ab94:	f001 ff84 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ab98:	4638      	mov	r0, r7
    ab9a:	f001 ff37 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
}
    ab9e:	4628      	mov	r0, r5
    m_spiActive = false;
    aba0:	74a6      	strb	r6, [r4, #18]
}
    aba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    aba6:	2500      	movs	r5, #0
}
    aba8:	4628      	mov	r0, r5
    abaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abae:	bf00      	nop

0000abb0 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    abb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    abb4:	4f20      	ldr	r7, [pc, #128]	; (ac38 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    abb6:	4604      	mov	r4, r0
    abb8:	4688      	mov	r8, r1
    abba:	4691      	mov	r9, r2
    abbc:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    abbe:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    abc0:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    abc4:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    abc6:	e003      	b.n	abd0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    abc8:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    abca:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    abcc:	041b      	lsls	r3, r3, #16
    abce:	d40d      	bmi.n	abec <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    abd0:	4630      	mov	r0, r6
    abd2:	f001 ff47 	bl	ca64 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    abd6:	28ff      	cmp	r0, #255	; 0xff
    abd8:	7520      	strb	r0, [r4, #20]
    abda:	d0f5      	beq.n	abc8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    abdc:	28fe      	cmp	r0, #254	; 0xfe
    abde:	d01a      	beq.n	ac16 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    abe0:	2318      	movs	r3, #24
  if (m_spiActive) {
    abe2:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    abe4:	7463      	strb	r3, [r4, #17]
    abe6:	b930      	cbnz	r0, abf6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    abe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    abec:	231d      	movs	r3, #29
  if (m_spiActive) {
    abee:	7ca0      	ldrb	r0, [r4, #18]
    abf0:	7463      	strb	r3, [r4, #17]
    abf2:	2800      	cmp	r0, #0
    abf4:	d0f8      	beq.n	abe8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    abf6:	7c20      	ldrb	r0, [r4, #16]
    abf8:	2101      	movs	r1, #1
    abfa:	f001 fe73 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    abfe:	21ff      	movs	r1, #255	; 0xff
    ac00:	4630      	mov	r0, r6
    ac02:	f001 ff4d 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ac06:	4630      	mov	r0, r6
    ac08:	f001 ff00 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    ac0c:	2300      	movs	r3, #0
  return false;
    ac0e:	4618      	mov	r0, r3
    m_spiActive = false;
    ac10:	74a3      	strb	r3, [r4, #18]
}
    ac12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    ac16:	464a      	mov	r2, r9
    ac18:	4641      	mov	r1, r8
    ac1a:	4630      	mov	r0, r6
    ac1c:	f001 ff2e 	bl	ca7c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    ac20:	7520      	strb	r0, [r4, #20]
    ac22:	b938      	cbnz	r0, ac34 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    ac24:	4630      	mov	r0, r6
    ac26:	f001 ff1d 	bl	ca64 <SdSpiArduinoDriver::receive()>
    ac2a:	4630      	mov	r0, r6
    ac2c:	f001 ff1a 	bl	ca64 <SdSpiArduinoDriver::receive()>
  return true;
    ac30:	2001      	movs	r0, #1
    ac32:	e7d9      	b.n	abe8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    ac34:	2325      	movs	r3, #37	; 0x25
    ac36:	e7d4      	b.n	abe2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    ac38:	20035424 	.word	0x20035424

0000ac3c <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    ac3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    ac3e:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    ac40:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    ac42:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    ac44:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    ac46:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    ac48:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    ac4a:	f000 f85b 	bl	ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    ac4e:	b9b0      	cbnz	r0, ac7e <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    ac50:	7ca6      	ldrb	r6, [r4, #18]
    ac52:	b91e      	cbnz	r6, ac5c <SharedSpiCard::readStop()+0x20>
  return true;
    ac54:	2601      	movs	r6, #1
}
    ac56:	4630      	mov	r0, r6
    ac58:	b003      	add	sp, #12
    ac5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    ac5c:	4605      	mov	r5, r0
    ac5e:	2101      	movs	r1, #1
    ac60:	7c20      	ldrb	r0, [r4, #16]
    ac62:	f001 fe3f 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ac66:	1d20      	adds	r0, r4, #4
    ac68:	21ff      	movs	r1, #255	; 0xff
    ac6a:	9001      	str	r0, [sp, #4]
    ac6c:	f001 ff18 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ac70:	9801      	ldr	r0, [sp, #4]
    ac72:	f001 fecb 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    ac76:	4630      	mov	r0, r6
    m_spiActive = false;
    ac78:	74a5      	strb	r5, [r4, #18]
}
    ac7a:	b003      	add	sp, #12
    ac7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    ac7e:	2309      	movs	r3, #9
  if (m_spiActive) {
    ac80:	7ca6      	ldrb	r6, [r4, #18]
    ac82:	7463      	strb	r3, [r4, #17]
    ac84:	2e00      	cmp	r6, #0
    ac86:	d0e6      	beq.n	ac56 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    ac88:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    ac8a:	7c20      	ldrb	r0, [r4, #16]
    ac8c:	2101      	movs	r1, #1
}
    ac8e:	463e      	mov	r6, r7
    ac90:	f001 fe28 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ac94:	21ff      	movs	r1, #255	; 0xff
    ac96:	4628      	mov	r0, r5
    ac98:	f001 ff02 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ac9c:	4628      	mov	r0, r5
    ac9e:	f001 feb5 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
}
    aca2:	4630      	mov	r0, r6
    m_spiActive = false;
    aca4:	74a7      	strb	r7, [r4, #18]
}
    aca6:	b003      	add	sp, #12
    aca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    acaa:	bf00      	nop

0000acac <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    acac:	7cc2      	ldrb	r2, [r0, #19]
    acae:	2a02      	cmp	r2, #2
    acb0:	d003      	beq.n	acba <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    acb2:	2a01      	cmp	r2, #1
    acb4:	d004      	beq.n	acc0 <SharedSpiCard::syncDevice()+0x14>
}
    acb6:	2001      	movs	r0, #1
    acb8:	4770      	bx	lr
    return writeStop();
    acba:	6803      	ldr	r3, [r0, #0]
    acbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    acbe:	4718      	bx	r3
    return readStop();
    acc0:	f7ff bfbc 	b.w	ac3c <SharedSpiCard::readStop()>

0000acc4 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    acc4:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    acc6:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    acc8:	460d      	mov	r5, r1
    acca:	490d      	ldr	r1, [pc, #52]	; (ad00 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    accc:	4604      	mov	r4, r0
  if (!syncDevice()) {
    acce:	6a1a      	ldr	r2, [r3, #32]
    acd0:	428a      	cmp	r2, r1
    acd2:	d10c      	bne.n	acee <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    acd4:	7cc2      	ldrb	r2, [r0, #19]
    acd6:	2a02      	cmp	r2, #2
    acd8:	d004      	beq.n	ace4 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    acda:	2a01      	cmp	r2, #1
    acdc:	d00b      	beq.n	acf6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    acde:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    ace0:	7725      	strb	r5, [r4, #28]
}
    ace2:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    ace4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ace6:	4798      	blx	r3
  if (!syncDevice()) {
    ace8:	2800      	cmp	r0, #0
    acea:	d1f8      	bne.n	acde <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    acec:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    acee:	4790      	blx	r2
    acf0:	2800      	cmp	r0, #0
    acf2:	d0fb      	beq.n	acec <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    acf4:	e7f3      	b.n	acde <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    acf6:	f7ff ffa1 	bl	ac3c <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    acfa:	2800      	cmp	r0, #0
    acfc:	d0f6      	beq.n	acec <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    acfe:	e7ee      	b.n	acde <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    ad00:	0000acad 	.word	0x0000acad

0000ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    ad04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    ad08:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    ad0a:	b082      	sub	sp, #8
    ad0c:	460f      	mov	r7, r1
    ad0e:	4935      	ldr	r1, [pc, #212]	; (ade4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    ad10:	9201      	str	r2, [sp, #4]
    ad12:	4606      	mov	r6, r0
  if (!syncDevice()) {
    ad14:	6a1a      	ldr	r2, [r3, #32]
    ad16:	428a      	cmp	r2, r1
    ad18:	d15e      	bne.n	add8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    ad1a:	7cc2      	ldrb	r2, [r0, #19]
    ad1c:	2a02      	cmp	r2, #2
    ad1e:	d041      	beq.n	ada4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    ad20:	2a01      	cmp	r2, #1
    ad22:	d05b      	beq.n	addc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    ad24:	7cb4      	ldrb	r4, [r6, #18]
    ad26:	2c00      	cmp	r4, #0
    ad28:	d047      	beq.n	adba <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    ad2a:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    ad2c:	2f0c      	cmp	r7, #12
    ad2e:	d011      	beq.n	ad54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    ad30:	f8df 80b4 	ldr.w	r8, [pc, #180]	; ade8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    ad34:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    ad38:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    ad3c:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    ad3e:	e004      	b.n	ad4a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    ad40:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    ad44:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    ad46:	041a      	lsls	r2, r3, #16
    ad48:	d434      	bmi.n	adb4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    ad4a:	4628      	mov	r0, r5
    ad4c:	f001 fe8a 	bl	ca64 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    ad50:	28ff      	cmp	r0, #255	; 0xff
    ad52:	d1f5      	bne.n	ad40 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    ad54:	f10d 0804 	add.w	r8, sp, #4
    ad58:	ac02      	add	r4, sp, #8
    ad5a:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    ad5e:	4628      	mov	r0, r5
    ad60:	f001 fe9e 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    ad64:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    ad68:	4628      	mov	r0, r5
    ad6a:	f001 fe99 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    ad6e:	45a0      	cmp	r8, r4
    ad70:	d1f8      	bne.n	ad64 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    ad72:	2f00      	cmp	r7, #0
    ad74:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    ad76:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    ad7a:	bf0c      	ite	eq
    ad7c:	2195      	moveq	r1, #149	; 0x95
    ad7e:	2187      	movne	r1, #135	; 0x87
    ad80:	f001 fe8e 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    ad84:	4628      	mov	r0, r5
    ad86:	f001 fe6d 	bl	ca64 <SdSpiArduinoDriver::receive()>
    ad8a:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    ad8c:	3c01      	subs	r4, #1
    ad8e:	f001 fe69 	bl	ca64 <SdSpiArduinoDriver::receive()>
    ad92:	0603      	lsls	r3, r0, #24
    ad94:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    ad96:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    ad98:	d501      	bpl.n	ad9e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    ad9a:	2c00      	cmp	r4, #0
    ad9c:	d1f5      	bne.n	ad8a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    ad9e:	b002      	add	sp, #8
    ada0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    ada4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ada6:	4798      	blx	r3
  if (!syncDevice()) {
    ada8:	2800      	cmp	r0, #0
    adaa:	d1bb      	bne.n	ad24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    adac:	20ff      	movs	r0, #255	; 0xff
}
    adae:	b002      	add	sp, #8
    adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    adb4:	2f00      	cmp	r7, #0
    adb6:	d0cd      	beq.n	ad54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    adb8:	e7f8      	b.n	adac <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    adba:	1d35      	adds	r5, r6, #4
    adbc:	4628      	mov	r0, r5
    adbe:	f001 fe1b 	bl	c9f8 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    adc2:	4621      	mov	r1, r4
    adc4:	7c30      	ldrb	r0, [r6, #16]
    adc6:	f001 fd8d 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    adca:	21ff      	movs	r1, #255	; 0xff
    adcc:	4628      	mov	r0, r5
    adce:	f001 fe67 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    add2:	2301      	movs	r3, #1
    add4:	74b3      	strb	r3, [r6, #18]
}
    add6:	e7a9      	b.n	ad2c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    add8:	4790      	blx	r2
    adda:	e7e5      	b.n	ada8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    addc:	f7ff ff2e 	bl	ac3c <SharedSpiCard::readStop()>
    ade0:	e7e2      	b.n	ada8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    ade2:	bf00      	nop
    ade4:	0000acad 	.word	0x0000acad
    ade8:	20035424 	.word	0x20035424

0000adec <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    adee:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    adf0:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    adf2:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    adf4:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    adf6:	f7ff ff85 	bl	ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    adfa:	b9e0      	cbnz	r0, ae36 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    adfc:	1d37      	adds	r7, r6, #4
    adfe:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    ae00:	4638      	mov	r0, r7
    ae02:	f001 fe2f 	bl	ca64 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    ae06:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    ae0a:	42a5      	cmp	r5, r4
    ae0c:	d1f8      	bne.n	ae00 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    ae0e:	7cb4      	ldrb	r4, [r6, #18]
    ae10:	b914      	cbnz	r4, ae18 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    ae12:	2401      	movs	r4, #1
}
    ae14:	4620      	mov	r0, r4
    ae16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    ae18:	7c30      	ldrb	r0, [r6, #16]
    ae1a:	2101      	movs	r1, #1
    ae1c:	f001 fd62 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ae20:	21ff      	movs	r1, #255	; 0xff
    ae22:	4638      	mov	r0, r7
    ae24:	f001 fe3c 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ae28:	4638      	mov	r0, r7
    ae2a:	f001 fdef 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    ae2e:	2300      	movs	r3, #0
}
    ae30:	4620      	mov	r0, r4
    m_spiActive = false;
    ae32:	74b3      	strb	r3, [r6, #18]
}
    ae34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    ae36:	2312      	movs	r3, #18
  if (m_spiActive) {
    ae38:	7cb4      	ldrb	r4, [r6, #18]
    ae3a:	7473      	strb	r3, [r6, #17]
    ae3c:	2c00      	cmp	r4, #0
    ae3e:	d0e9      	beq.n	ae14 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    ae40:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    ae42:	7c30      	ldrb	r0, [r6, #16]
    ae44:	2101      	movs	r1, #1
    ae46:	f001 fd4d 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ae4a:	21ff      	movs	r1, #255	; 0xff
    ae4c:	4620      	mov	r0, r4
    ae4e:	f001 fe27 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ae52:	4620      	mov	r0, r4
    ae54:	f001 fdda 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    ae58:	2300      	movs	r3, #0
  return false;
    ae5a:	461c      	mov	r4, r3
    m_spiActive = false;
    ae5c:	74b3      	strb	r3, [r6, #18]
}
    ae5e:	4620      	mov	r0, r4
    ae60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae62:	bf00      	nop

0000ae64 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    ae64:	b570      	push	{r4, r5, r6, lr}
    ae66:	4616      	mov	r6, r2
    ae68:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    ae6a:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    ae6c:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    ae6e:	f7ff ff49 	bl	ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    ae72:	b1b0      	cbz	r0, aea2 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    ae74:	231b      	movs	r3, #27
    ae76:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    ae78:	7ca0      	ldrb	r0, [r4, #18]
    ae7a:	b908      	cbnz	r0, ae80 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    ae7c:	b002      	add	sp, #8
    ae7e:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    ae80:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    ae82:	7c20      	ldrb	r0, [r4, #16]
    ae84:	2101      	movs	r1, #1
    ae86:	f001 fd2d 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ae8a:	21ff      	movs	r1, #255	; 0xff
    ae8c:	4628      	mov	r0, r5
    ae8e:	f001 fe07 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ae92:	4628      	mov	r0, r5
    ae94:	f001 fdba 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    ae98:	2300      	movs	r3, #0
  return false;
    ae9a:	4618      	mov	r0, r3
    m_spiActive = false;
    ae9c:	74a3      	strb	r3, [r4, #18]
}
    ae9e:	b002      	add	sp, #8
    aea0:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    aea2:	4605      	mov	r5, r0
    aea4:	2210      	movs	r2, #16
    aea6:	4631      	mov	r1, r6
    aea8:	4620      	mov	r0, r4
    aeaa:	f7ff fe81 	bl	abb0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    aeae:	2800      	cmp	r0, #0
    aeb0:	d0e2      	beq.n	ae78 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    aeb2:	7ca6      	ldrb	r6, [r4, #18]
    aeb4:	2e00      	cmp	r6, #0
    aeb6:	d0e1      	beq.n	ae7c <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    aeb8:	7c20      	ldrb	r0, [r4, #16]
    aeba:	2101      	movs	r1, #1
    aebc:	f001 fd12 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    aec0:	1d20      	adds	r0, r4, #4
    aec2:	21ff      	movs	r1, #255	; 0xff
    aec4:	9001      	str	r0, [sp, #4]
    aec6:	f001 fdeb 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    aeca:	9801      	ldr	r0, [sp, #4]
    aecc:	f001 fd9e 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
}
    aed0:	4630      	mov	r0, r6
    m_spiActive = false;
    aed2:	74a5      	strb	r5, [r4, #18]
}
    aed4:	b002      	add	sp, #8
    aed6:	bd70      	pop	{r4, r5, r6, pc}

0000aed8 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    aed8:	6803      	ldr	r3, [r0, #0]
    aeda:	4a25      	ldr	r2, [pc, #148]	; (af70 <SharedSpiCard::sectorCount()+0x98>)
    aedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    aede:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    aee0:	b500      	push	{lr}
    aee2:	b085      	sub	sp, #20
    aee4:	d10f      	bne.n	af06 <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    aee6:	466a      	mov	r2, sp
    aee8:	2109      	movs	r1, #9
    aeea:	f7ff ffbb 	bl	ae64 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    aeee:	b138      	cbz	r0, af00 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    aef0:	f89d 3000 	ldrb.w	r3, [sp]
    aef4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    aef8:	d008      	beq.n	af0c <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    aefa:	2b40      	cmp	r3, #64	; 0x40
    aefc:	d027      	beq.n	af4e <SharedSpiCard::sectorCount()+0x76>
    aefe:	2000      	movs	r0, #0
}
    af00:	b005      	add	sp, #20
    af02:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    af06:	4669      	mov	r1, sp
    af08:	4798      	blx	r3
    af0a:	e7f0      	b.n	aeee <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    af0c:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    af10:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    af14:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    af18:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    af1c:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    af20:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    af22:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    af26:	0080      	lsls	r0, r0, #2
    af28:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    af2c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    af30:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    af34:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    af38:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    af3c:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    af40:	4413      	add	r3, r2
    af42:	3001      	adds	r0, #1
    af44:	3b07      	subs	r3, #7
    af46:	4098      	lsls	r0, r3
}
    af48:	b005      	add	sp, #20
    af4a:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    af4e:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    af52:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    af56:	3001      	adds	r0, #1
    af58:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    af5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    af60:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    af64:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    af68:	0280      	lsls	r0, r0, #10
    af6a:	b005      	add	sp, #20
    af6c:	f85d fb04 	ldr.w	pc, [sp], #4
    af70:	0000b295 	.word	0x0000b295

0000af74 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    af74:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    af76:	460a      	mov	r2, r1
    af78:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    af7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    af7c:	b083      	sub	sp, #12
    af7e:	4d16      	ldr	r5, [pc, #88]	; (afd8 <SharedSpiCard::readStart(unsigned long)+0x64>)
    af80:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    af82:	42ab      	cmp	r3, r5
    af84:	d124      	bne.n	afd0 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    af86:	7d40      	ldrb	r0, [r0, #21]
    af88:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    af8a:	f04f 0112 	mov.w	r1, #18
    af8e:	4620      	mov	r0, r4
    sector <<= 9;
    af90:	bf18      	it	ne
    af92:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    af94:	f7ff feb6 	bl	ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    af98:	b920      	cbnz	r0, afa4 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    af9a:	2301      	movs	r3, #1
  return true;
    af9c:	4618      	mov	r0, r3
  m_state = READ_STATE;
    af9e:	74e3      	strb	r3, [r4, #19]
}
    afa0:	b003      	add	sp, #12
    afa2:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    afa4:	230c      	movs	r3, #12
  if (m_spiActive) {
    afa6:	7ca0      	ldrb	r0, [r4, #18]
    afa8:	7463      	strb	r3, [r4, #17]
    afaa:	2800      	cmp	r0, #0
    afac:	d0f8      	beq.n	afa0 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    afae:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    afb0:	7c20      	ldrb	r0, [r4, #16]
    afb2:	2101      	movs	r1, #1
    afb4:	f001 fc96 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    afb8:	21ff      	movs	r1, #255	; 0xff
    afba:	4628      	mov	r0, r5
    afbc:	f001 fd70 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    afc0:	4628      	mov	r0, r5
    afc2:	f001 fd23 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    afc6:	2300      	movs	r3, #0
}
    afc8:	4618      	mov	r0, r3
    m_spiActive = false;
    afca:	74a3      	strb	r3, [r4, #18]
}
    afcc:	b003      	add	sp, #12
    afce:	bd30      	pop	{r4, r5, pc}
    afd0:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    afd2:	4798      	blx	r3
    afd4:	9a01      	ldr	r2, [sp, #4]
    afd6:	e7d7      	b.n	af88 <SharedSpiCard::readStart(unsigned long)+0x14>
    afd8:	0000a9a9 	.word	0x0000a9a9

0000afdc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afde:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    afe0:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    afe2:	4606      	mov	r6, r0
    afe4:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    afe6:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    afe8:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    afea:	d102      	bne.n	aff2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    afec:	6983      	ldr	r3, [r0, #24]
    afee:	428b      	cmp	r3, r1
    aff0:	d005      	beq.n	affe <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    aff2:	4629      	mov	r1, r5
    aff4:	4630      	mov	r0, r6
    aff6:	f7ff ffbd 	bl	af74 <SharedSpiCard::readStart(unsigned long)>
    affa:	b180      	cbz	r0, b01e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    affc:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    affe:	b187      	cbz	r7, b022 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    b000:	2500      	movs	r5, #0
    b002:	e001      	b.n	b008 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    b004:	42af      	cmp	r7, r5
    b006:	d00c      	beq.n	b022 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    b008:	4621      	mov	r1, r4
    b00a:	f44f 7200 	mov.w	r2, #512	; 0x200
    b00e:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    b010:	3501      	adds	r5, #1
    b012:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    b016:	f7ff fdcb 	bl	abb0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    b01a:	2800      	cmp	r0, #0
    b01c:	d1f2      	bne.n	b004 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    b01e:	2000      	movs	r0, #0
}
    b020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    b022:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b024:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    b026:	443b      	add	r3, r7
    b028:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b02a:	2800      	cmp	r0, #0
    b02c:	d1f8      	bne.n	b020 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    b02e:	4630      	mov	r0, r6
}
    b030:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    b034:	f7ff be02 	b.w	ac3c <SharedSpiCard::readStop()>

0000b038 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b03c:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    b03e:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b040:	4606      	mov	r6, r0
    b042:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    b044:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b046:	4615      	mov	r5, r2
    b048:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    b04c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    b050:	d102      	bne.n	b058 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    b052:	6983      	ldr	r3, [r0, #24]
    b054:	428b      	cmp	r3, r1
    b056:	d005      	beq.n	b064 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    b058:	4621      	mov	r1, r4
    b05a:	4630      	mov	r0, r6
    b05c:	f7ff ff8a 	bl	af74 <SharedSpiCard::readStart(unsigned long)>
    b060:	b1b0      	cbz	r0, b090 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    b062:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    b064:	f1bb 0f00 	cmp.w	fp, #0
    b068:	d015      	beq.n	b096 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    b06a:	eb04 0a0b 	add.w	sl, r4, fp
    b06e:	e002      	b.n	b076 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    b070:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    b072:	45a2      	cmp	sl, r4
    b074:	d00f      	beq.n	b096 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    b076:	f44f 7200 	mov.w	r2, #512	; 0x200
    b07a:	4629      	mov	r1, r5
    b07c:	4630      	mov	r0, r6
    b07e:	f7ff fd97 	bl	abb0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b082:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    b084:	4642      	mov	r2, r8
    b086:	4620      	mov	r0, r4
    b088:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    b08a:	3401      	adds	r4, #1
    if (readData(dst)) {
    b08c:	2f00      	cmp	r7, #0
    b08e:	d1ef      	bne.n	b070 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    b090:	2000      	movs	r0, #0
}
    b092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    b096:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b098:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    b09a:	445b      	add	r3, fp
    b09c:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b09e:	2800      	cmp	r0, #0
    b0a0:	d1f7      	bne.n	b092 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    b0a2:	4630      	mov	r0, r6
}
    b0a4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    b0a8:	f7ff bdc8 	b.w	ac3c <SharedSpiCard::readStop()>

0000b0ac <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    b0ac:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    b0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    b0b2:	695f      	ldr	r7, [r3, #20]
    b0b4:	4b16      	ldr	r3, [pc, #88]	; (b110 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    b0b6:	429f      	cmp	r7, r3
    b0b8:	d11f      	bne.n	b0fa <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    b0ba:	7cc3      	ldrb	r3, [r0, #19]
    b0bc:	4604      	mov	r4, r0
    b0be:	460d      	mov	r5, r1
    b0c0:	4616      	mov	r6, r2
    b0c2:	2b01      	cmp	r3, #1
    b0c4:	d102      	bne.n	b0cc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    b0c6:	6983      	ldr	r3, [r0, #24]
    b0c8:	4299      	cmp	r1, r3
    b0ca:	d005      	beq.n	b0d8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    b0cc:	4629      	mov	r1, r5
    b0ce:	4620      	mov	r0, r4
    b0d0:	f7ff ff50 	bl	af74 <SharedSpiCard::readStart(unsigned long)>
    b0d4:	b170      	cbz	r0, b0f4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    b0d6:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    b0d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    b0dc:	4631      	mov	r1, r6
    b0de:	4620      	mov	r0, r4
    b0e0:	f7ff fd66 	bl	abb0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    b0e4:	b130      	cbz	r0, b0f4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    b0e6:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    b0e8:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    b0ea:	3301      	adds	r3, #1
    b0ec:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    b0ee:	b148      	cbz	r0, b104 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    b0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    b0f4:	2000      	movs	r0, #0
}
    b0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    b0fa:	46bc      	mov	ip, r7
    b0fc:	2301      	movs	r3, #1
}
    b0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    b102:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    b104:	4620      	mov	r0, r4
}
    b106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    b10a:	f7ff bd97 	b.w	ac3c <SharedSpiCard::readStop()>
    b10e:	bf00      	nop
    b110:	0000afdd 	.word	0x0000afdd

0000b114 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    b114:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    b116:	460a      	mov	r2, r1
    b118:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    b11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    b11c:	b083      	sub	sp, #12
    b11e:	4d16      	ldr	r5, [pc, #88]	; (b178 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    b120:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    b122:	42ab      	cmp	r3, r5
    b124:	d124      	bne.n	b170 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    b126:	7d40      	ldrb	r0, [r0, #21]
    b128:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    b12a:	f04f 0119 	mov.w	r1, #25
    b12e:	4620      	mov	r0, r4
    sector <<= 9;
    b130:	bf18      	it	ne
    b132:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    b134:	f7ff fde6 	bl	ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b138:	b920      	cbnz	r0, b144 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    b13a:	2302      	movs	r3, #2
  return true;
    b13c:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    b13e:	74e3      	strb	r3, [r4, #19]
}
    b140:	b003      	add	sp, #12
    b142:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    b144:	230e      	movs	r3, #14
  if (m_spiActive) {
    b146:	7ca0      	ldrb	r0, [r4, #18]
    b148:	7463      	strb	r3, [r4, #17]
    b14a:	2800      	cmp	r0, #0
    b14c:	d0f8      	beq.n	b140 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    b14e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b150:	7c20      	ldrb	r0, [r4, #16]
    b152:	2101      	movs	r1, #1
    b154:	f001 fbc6 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b158:	21ff      	movs	r1, #255	; 0xff
    b15a:	4628      	mov	r0, r5
    b15c:	f001 fca0 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b160:	4628      	mov	r0, r5
    b162:	f001 fc53 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b166:	2300      	movs	r3, #0
}
    b168:	4618      	mov	r0, r3
    m_spiActive = false;
    b16a:	74a3      	strb	r3, [r4, #18]
}
    b16c:	b003      	add	sp, #12
    b16e:	bd30      	pop	{r4, r5, pc}
    b170:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    b172:	4798      	blx	r3
    b174:	9a01      	ldr	r2, [sp, #4]
    b176:	e7d7      	b.n	b128 <SharedSpiCard::writeStart(unsigned long)+0x14>
    b178:	0000a9a9 	.word	0x0000a9a9

0000b17c <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    b17c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b17e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    b182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b184:	4617      	mov	r7, r2
    b186:	4a41      	ldr	r2, [pc, #260]	; (b28c <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    b188:	b085      	sub	sp, #20
    b18a:	4604      	mov	r4, r0
    b18c:	460e      	mov	r6, r1
    b18e:	4293      	cmp	r3, r2
    b190:	d145      	bne.n	b21e <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    b192:	466a      	mov	r2, sp
    b194:	2109      	movs	r1, #9
    b196:	f7ff fe65 	bl	ae64 <SharedSpiCard::readRegister(unsigned char, void*)>
    b19a:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    b19c:	b1b5      	cbz	r5, b1cc <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    b19e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b1a2:	065a      	lsls	r2, r3, #25
    b1a4:	d518      	bpl.n	b1d8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    b1a6:	7d63      	ldrb	r3, [r4, #21]
    b1a8:	2b03      	cmp	r3, #3
    b1aa:	d001      	beq.n	b1b0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    b1ac:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    b1ae:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    b1b0:	4632      	mov	r2, r6
    b1b2:	2120      	movs	r1, #32
    b1b4:	4620      	mov	r0, r4
    b1b6:	f7ff fda5 	bl	ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    b1ba:	b928      	cbnz	r0, b1c8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    b1bc:	463a      	mov	r2, r7
    b1be:	2121      	movs	r1, #33	; 0x21
    b1c0:	4620      	mov	r0, r4
    b1c2:	f7ff fd9f 	bl	ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b1c6:	b370      	cbz	r0, b226 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    b1c8:	2326      	movs	r3, #38	; 0x26
    b1ca:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b1cc:	7ca5      	ldrb	r5, [r4, #18]
    b1ce:	b99d      	cbnz	r5, b1f8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    b1d0:	4628      	mov	r0, r5
    b1d2:	b005      	add	sp, #20
    b1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    b1d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b1dc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b1e0:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    b1e2:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    b1e6:	1c7a      	adds	r2, r7, #1
    b1e8:	4332      	orrs	r2, r6
    b1ea:	4213      	tst	r3, r2
    b1ec:	d0db      	beq.n	b1a6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    b1ee:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    b1f0:	7ca5      	ldrb	r5, [r4, #18]
    b1f2:	7463      	strb	r3, [r4, #17]
    b1f4:	2d00      	cmp	r5, #0
    b1f6:	d0eb      	beq.n	b1d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    b1f8:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b1fa:	7c20      	ldrb	r0, [r4, #16]
    b1fc:	2101      	movs	r1, #1
    b1fe:	f001 fb71 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b202:	21ff      	movs	r1, #255	; 0xff
    b204:	4628      	mov	r0, r5
    b206:	f001 fc4b 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b20a:	4628      	mov	r0, r5
    b20c:	f001 fbfe 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b210:	2300      	movs	r3, #0
  return false;
    b212:	461d      	mov	r5, r3
    m_spiActive = false;
    b214:	74a3      	strb	r3, [r4, #18]
}
    b216:	4628      	mov	r0, r5
    b218:	b005      	add	sp, #20
    b21a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    b21e:	4669      	mov	r1, sp
    b220:	4798      	blx	r3
    b222:	4605      	mov	r5, r0
    b224:	e7ba      	b.n	b19c <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    b226:	4602      	mov	r2, r0
    b228:	2126      	movs	r1, #38	; 0x26
    b22a:	4620      	mov	r0, r4
    b22c:	f7ff fd6a 	bl	ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b230:	2800      	cmp	r0, #0
    b232:	d1c9      	bne.n	b1c8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    b234:	f8df 8058 	ldr.w	r8, [pc, #88]	; b290 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    b238:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    b23c:	f104 0904 	add.w	r9, r4, #4
    b240:	f8d8 3000 	ldr.w	r3, [r8]
    b244:	441f      	add	r7, r3
    b246:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    b248:	e004      	b.n	b254 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    b24a:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    b24e:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    b250:	041b      	lsls	r3, r3, #16
    b252:	d417      	bmi.n	b284 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    b254:	4648      	mov	r0, r9
    b256:	f001 fc05 	bl	ca64 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    b25a:	28ff      	cmp	r0, #255	; 0xff
    b25c:	4606      	mov	r6, r0
    b25e:	d1f4      	bne.n	b24a <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    b260:	7ca3      	ldrb	r3, [r4, #18]
    b262:	2b00      	cmp	r3, #0
    b264:	d0b4      	beq.n	b1d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    b266:	2101      	movs	r1, #1
    b268:	7c20      	ldrb	r0, [r4, #16]
  return true;
    b26a:	461d      	mov	r5, r3
    b26c:	f001 fb3a 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b270:	4631      	mov	r1, r6
    b272:	4648      	mov	r0, r9
    b274:	f001 fc14 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b278:	4648      	mov	r0, r9
    b27a:	f001 fbc7 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b27e:	2300      	movs	r3, #0
    b280:	74a3      	strb	r3, [r4, #18]
}
    b282:	e7a5      	b.n	b1d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    b284:	2328      	movs	r3, #40	; 0x28
    b286:	7463      	strb	r3, [r4, #17]
    goto fail;
    b288:	e7a0      	b.n	b1cc <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    b28a:	bf00      	nop
    b28c:	0000b295 	.word	0x0000b295
    b290:	20035424 	.word	0x20035424

0000b294 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    b294:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    b296:	2200      	movs	r2, #0
    b298:	b082      	sub	sp, #8
    b29a:	460e      	mov	r6, r1
    b29c:	2109      	movs	r1, #9
    b29e:	4604      	mov	r4, r0
    b2a0:	f7ff fd30 	bl	ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b2a4:	b1b0      	cbz	r0, b2d4 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    b2a6:	231b      	movs	r3, #27
    b2a8:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b2aa:	7ca0      	ldrb	r0, [r4, #18]
    b2ac:	b908      	cbnz	r0, b2b2 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    b2ae:	b002      	add	sp, #8
    b2b0:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b2b2:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b2b4:	7c20      	ldrb	r0, [r4, #16]
    b2b6:	2101      	movs	r1, #1
    b2b8:	f001 fb14 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b2bc:	21ff      	movs	r1, #255	; 0xff
    b2be:	4628      	mov	r0, r5
    b2c0:	f001 fbee 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b2c4:	4628      	mov	r0, r5
    b2c6:	f001 fba1 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b2ca:	2300      	movs	r3, #0
  return false;
    b2cc:	4618      	mov	r0, r3
    m_spiActive = false;
    b2ce:	74a3      	strb	r3, [r4, #18]
  }
    b2d0:	b002      	add	sp, #8
    b2d2:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    b2d4:	4605      	mov	r5, r0
    b2d6:	2210      	movs	r2, #16
    b2d8:	4631      	mov	r1, r6
    b2da:	4620      	mov	r0, r4
    b2dc:	f7ff fc68 	bl	abb0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b2e0:	2800      	cmp	r0, #0
    b2e2:	d0e2      	beq.n	b2aa <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    b2e4:	7ca6      	ldrb	r6, [r4, #18]
    b2e6:	2e00      	cmp	r6, #0
    b2e8:	d0e1      	beq.n	b2ae <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    b2ea:	7c20      	ldrb	r0, [r4, #16]
    b2ec:	2101      	movs	r1, #1
    b2ee:	f001 faf9 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b2f2:	1d20      	adds	r0, r4, #4
    b2f4:	21ff      	movs	r1, #255	; 0xff
    b2f6:	9001      	str	r0, [sp, #4]
    b2f8:	f001 fbd2 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b2fc:	9801      	ldr	r0, [sp, #4]
    b2fe:	f001 fb85 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
}
    b302:	4630      	mov	r0, r6
    m_spiActive = false;
    b304:	74a5      	strb	r5, [r4, #18]
  }
    b306:	b002      	add	sp, #8
    b308:	bd70      	pop	{r4, r5, r6, pc}
    b30a:	bf00      	nop

0000b30c <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    b30c:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    b30e:	2200      	movs	r2, #0
    b310:	b082      	sub	sp, #8
    b312:	460e      	mov	r6, r1
    b314:	210a      	movs	r1, #10
    b316:	4604      	mov	r4, r0
    b318:	f7ff fcf4 	bl	ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b31c:	b1b0      	cbz	r0, b34c <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    b31e:	231b      	movs	r3, #27
    b320:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b322:	7ca0      	ldrb	r0, [r4, #18]
    b324:	b908      	cbnz	r0, b32a <SharedSpiCard::readCID(CID*)+0x1e>
  }
    b326:	b002      	add	sp, #8
    b328:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b32a:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b32c:	7c20      	ldrb	r0, [r4, #16]
    b32e:	2101      	movs	r1, #1
    b330:	f001 fad8 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b334:	21ff      	movs	r1, #255	; 0xff
    b336:	4628      	mov	r0, r5
    b338:	f001 fbb2 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b33c:	4628      	mov	r0, r5
    b33e:	f001 fb65 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b342:	2300      	movs	r3, #0
  return false;
    b344:	4618      	mov	r0, r3
    m_spiActive = false;
    b346:	74a3      	strb	r3, [r4, #18]
  }
    b348:	b002      	add	sp, #8
    b34a:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    b34c:	4605      	mov	r5, r0
    b34e:	2210      	movs	r2, #16
    b350:	4631      	mov	r1, r6
    b352:	4620      	mov	r0, r4
    b354:	f7ff fc2c 	bl	abb0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b358:	2800      	cmp	r0, #0
    b35a:	d0e2      	beq.n	b322 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    b35c:	7ca6      	ldrb	r6, [r4, #18]
    b35e:	2e00      	cmp	r6, #0
    b360:	d0e1      	beq.n	b326 <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    b362:	7c20      	ldrb	r0, [r4, #16]
    b364:	2101      	movs	r1, #1
    b366:	f001 fabd 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b36a:	1d20      	adds	r0, r4, #4
    b36c:	21ff      	movs	r1, #255	; 0xff
    b36e:	9001      	str	r0, [sp, #4]
    b370:	f001 fb96 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b374:	9801      	ldr	r0, [sp, #4]
    b376:	f001 fb49 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
}
    b37a:	4630      	mov	r0, r6
    m_spiActive = false;
    b37c:	74a5      	strb	r5, [r4, #18]
  }
    b37e:	b002      	add	sp, #8
    b380:	bd70      	pop	{r4, r5, r6, pc}
    b382:	bf00      	nop

0000b384 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    b384:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    b386:	1d05      	adds	r5, r0, #4
    b388:	4616      	mov	r6, r2
    b38a:	4604      	mov	r4, r0
    b38c:	4628      	mov	r0, r5
    b38e:	f001 fb87 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    b392:	f44f 7200 	mov.w	r2, #512	; 0x200
    b396:	4631      	mov	r1, r6
    b398:	4628      	mov	r0, r5
    b39a:	f001 fb8b 	bl	cab4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    b39e:	21ff      	movs	r1, #255	; 0xff
    b3a0:	4628      	mov	r0, r5
    b3a2:	f001 fb7d 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    b3a6:	21ff      	movs	r1, #255	; 0xff
    b3a8:	4628      	mov	r0, r5
    b3aa:	f001 fb79 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    b3ae:	4628      	mov	r0, r5
    b3b0:	f001 fb58 	bl	ca64 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    b3b4:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    b3b8:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    b3ba:	2b05      	cmp	r3, #5
    b3bc:	d004      	beq.n	b3c8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    b3be:	2320      	movs	r3, #32
  if (m_spiActive) {
    b3c0:	7ca0      	ldrb	r0, [r4, #18]
    b3c2:	7463      	strb	r3, [r4, #17]
    b3c4:	b910      	cbnz	r0, b3cc <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    b3c6:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    b3c8:	2001      	movs	r0, #1
}
    b3ca:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    b3cc:	7c20      	ldrb	r0, [r4, #16]
    b3ce:	2101      	movs	r1, #1
    b3d0:	f001 fa88 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b3d4:	21ff      	movs	r1, #255	; 0xff
    b3d6:	4628      	mov	r0, r5
    b3d8:	f001 fb62 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b3dc:	4628      	mov	r0, r5
    b3de:	f001 fb15 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b3e2:	2300      	movs	r3, #0
}
    b3e4:	4618      	mov	r0, r3
    m_spiActive = false;
    b3e6:	74a3      	strb	r3, [r4, #18]
}
    b3e8:	bd70      	pop	{r4, r5, r6, pc}
    b3ea:	bf00      	nop

0000b3ec <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    b3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3f0:	4d17      	ldr	r5, [pc, #92]	; (b450 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    b3f2:	4606      	mov	r6, r0
    b3f4:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    b3f6:	f100 0804 	add.w	r8, r0, #4
    b3fa:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    b3fc:	f504 7416 	add.w	r4, r4, #600	; 0x258
    b400:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    b402:	e003      	b.n	b40c <SharedSpiCard::writeData(unsigned char const*)+0x20>
    b404:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    b406:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    b408:	041b      	lsls	r3, r3, #16
    b40a:	d40c      	bmi.n	b426 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    b40c:	4640      	mov	r0, r8
    b40e:	f001 fb29 	bl	ca64 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    b412:	28ff      	cmp	r0, #255	; 0xff
    b414:	d1f6      	bne.n	b404 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    b416:	463a      	mov	r2, r7
    b418:	21fc      	movs	r1, #252	; 0xfc
    b41a:	4630      	mov	r0, r6
    b41c:	f7ff ffb2 	bl	b384 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    b420:	b118      	cbz	r0, b42a <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    b422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    b426:	2324      	movs	r3, #36	; 0x24
    b428:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    b42a:	7cb0      	ldrb	r0, [r6, #18]
    b42c:	2800      	cmp	r0, #0
    b42e:	d0f8      	beq.n	b422 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    b430:	7c30      	ldrb	r0, [r6, #16]
    b432:	2101      	movs	r1, #1
    b434:	f001 fa56 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b438:	21ff      	movs	r1, #255	; 0xff
    b43a:	4640      	mov	r0, r8
    b43c:	f001 fb30 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b440:	4640      	mov	r0, r8
    b442:	f001 fae3 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b446:	2300      	movs	r3, #0
}
    b448:	4618      	mov	r0, r3
    m_spiActive = false;
    b44a:	74b3      	strb	r3, [r6, #18]
}
    b44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b450:	20035424 	.word	0x20035424

0000b454 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    b454:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b456:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    b458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b45a:	4616      	mov	r6, r2
    b45c:	4a22      	ldr	r2, [pc, #136]	; (b4e8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    b45e:	b082      	sub	sp, #8
    b460:	4604      	mov	r4, r0
    b462:	460d      	mov	r5, r1
    b464:	4293      	cmp	r3, r2
    b466:	d13c      	bne.n	b4e2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    b468:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    b46a:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    b46c:	f04f 0118 	mov.w	r1, #24
    b470:	4620      	mov	r0, r4
    sector <<= 9;
    b472:	bf18      	it	ne
    b474:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    b476:	462a      	mov	r2, r5
    b478:	f7ff fc44 	bl	ad04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b47c:	4605      	mov	r5, r0
    b47e:	b1b0      	cbz	r0, b4ae <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    b480:	230d      	movs	r3, #13
    b482:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b484:	7ca0      	ldrb	r0, [r4, #18]
    b486:	b908      	cbnz	r0, b48c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    b488:	b002      	add	sp, #8
    b48a:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b48c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b48e:	7c20      	ldrb	r0, [r4, #16]
    b490:	2101      	movs	r1, #1
    b492:	f001 fa27 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b496:	21ff      	movs	r1, #255	; 0xff
    b498:	4628      	mov	r0, r5
    b49a:	f001 fb01 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b49e:	4628      	mov	r0, r5
    b4a0:	f001 fab4 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b4a4:	2300      	movs	r3, #0
  return false;
    b4a6:	4618      	mov	r0, r3
    m_spiActive = false;
    b4a8:	74a3      	strb	r3, [r4, #18]
}
    b4aa:	b002      	add	sp, #8
    b4ac:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    b4ae:	4632      	mov	r2, r6
    b4b0:	21fe      	movs	r1, #254	; 0xfe
    b4b2:	4620      	mov	r0, r4
    b4b4:	f7ff ff66 	bl	b384 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    b4b8:	2800      	cmp	r0, #0
    b4ba:	d0e3      	beq.n	b484 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    b4bc:	7ca6      	ldrb	r6, [r4, #18]
    b4be:	2e00      	cmp	r6, #0
    b4c0:	d0e2      	beq.n	b488 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    b4c2:	7c20      	ldrb	r0, [r4, #16]
    b4c4:	2101      	movs	r1, #1
    b4c6:	f001 fa0d 	bl	c8e4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b4ca:	1d20      	adds	r0, r4, #4
    b4cc:	21ff      	movs	r1, #255	; 0xff
    b4ce:	9001      	str	r0, [sp, #4]
    b4d0:	f001 fae6 	bl	caa0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b4d4:	9801      	ldr	r0, [sp, #4]
    b4d6:	f001 fa99 	bl	ca0c <SdSpiArduinoDriver::deactivate()>
  return true;
    b4da:	4630      	mov	r0, r6
    m_spiActive = false;
    b4dc:	74a5      	strb	r5, [r4, #18]
}
    b4de:	b002      	add	sp, #8
    b4e0:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    b4e2:	4798      	blx	r3
    b4e4:	e7c1      	b.n	b46a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    b4e6:	bf00      	nop
    b4e8:	0000a9a9 	.word	0x0000a9a9

0000b4ec <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b4ec:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    b4ee:	7f04      	ldrb	r4, [r0, #28]
    b4f0:	b134      	cbz	r4, b500 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    b4f2:	6804      	ldr	r4, [r0, #0]
    b4f4:	2301      	movs	r3, #1
    b4f6:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    b4f8:	46a4      	mov	ip, r4
}
    b4fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    b4fe:	4760      	bx	ip
}
    b500:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    b504:	f7ff bfa6 	b.w	b454 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000b508 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    b508:	2000      	movs	r0, #0
    b50a:	4770      	bx	lr

0000b50c <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    b50c:	2000      	movs	r0, #0
    b50e:	4770      	bx	lr

0000b510 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    b510:	2000      	movs	r0, #0
    b512:	4770      	bx	lr

0000b514 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    b514:	4770      	bx	lr
    b516:	bf00      	nop

0000b518 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    b518:	4b08      	ldr	r3, [pc, #32]	; (b53c <sdIrs()+0x24>)
    b51a:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    b51c:	4a08      	ldr	r2, [pc, #32]	; (b540 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    b51e:	4809      	ldr	r0, [pc, #36]	; (b544 <sdIrs()+0x2c>)
static void sdIrs() {
    b520:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    b522:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    b524:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    b526:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    b528:	6812      	ldr	r2, [r2, #0]
}
    b52a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    b52e:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    b530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b532:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    b536:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    b538:	7001      	strb	r1, [r0, #0]
}
    b53a:	4770      	bx	lr
    b53c:	402c0000 	.word	0x402c0000
    b540:	2003472c 	.word	0x2003472c
    b544:	20035464 	.word	0x20035464

0000b548 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b548:	4b03      	ldr	r3, [pc, #12]	; (b558 <isBusyDat()+0x10>)
    b54a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    b54c:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    b550:	f3c0 6000 	ubfx	r0, r0, #24, #1
    b554:	4770      	bx	lr
    b556:	bf00      	nop
    b558:	402c0000 	.word	0x402c0000

0000b55c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    b55c:	4b01      	ldr	r3, [pc, #4]	; (b564 <isBusyDMA()+0x8>)
    b55e:	7818      	ldrb	r0, [r3, #0]
}
    b560:	4770      	bx	lr
    b562:	bf00      	nop
    b564:	20035464 	.word	0x20035464

0000b568 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b568:	4a2b      	ldr	r2, [pc, #172]	; (b618 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b56a:	4b2c      	ldr	r3, [pc, #176]	; (b61c <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b56c:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b56e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    b572:	492b      	ldr	r1, [pc, #172]	; (b620 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b574:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b57c:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    b57e:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b580:	4c28      	ldr	r4, [pc, #160]	; (b624 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    b582:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b586:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    b58a:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b58e:	089b      	lsrs	r3, r3, #2
    b590:	fbb1 fef3 	udiv	lr, r1, r3
    b594:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b598:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    b59c:	d235      	bcs.n	b60a <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    b59e:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    b5a0:	461e      	mov	r6, r3
    b5a2:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b5a4:	011a      	lsls	r2, r3, #4
    b5a6:	fbbe f2f2 	udiv	r2, lr, r2
    b5aa:	4282      	cmp	r2, r0
    b5ac:	d901      	bls.n	b5b2 <setSdclk(unsigned long)+0x4a>
    b5ae:	2bff      	cmp	r3, #255	; 0xff
    b5b0:	d9f6      	bls.n	b5a0 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b5b2:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    b5b6:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b5b8:	4290      	cmp	r0, r2
    b5ba:	d22a      	bcs.n	b612 <setSdclk(unsigned long)+0xaa>
    b5bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    b5c0:	2201      	movs	r2, #1
    b5c2:	e000      	b.n	b5c6 <setSdclk(unsigned long)+0x5e>
    b5c4:	46a4      	mov	ip, r4
    dvs++;
    b5c6:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b5c8:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    b5cc:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b5ce:	fbbe f1fc 	udiv	r1, lr, ip
    b5d2:	4281      	cmp	r1, r0
    b5d4:	d917      	bls.n	b606 <setSdclk(unsigned long)+0x9e>
    b5d6:	2a10      	cmp	r2, #16
    b5d8:	d1f4      	bne.n	b5c4 <setSdclk(unsigned long)+0x5c>
    b5da:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    b5dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b5e0:	4911      	ldr	r1, [pc, #68]	; (b628 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    b5e2:	4a12      	ldr	r2, [pc, #72]	; (b62c <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    b5e4:	fb03 fc0c 	mul.w	ip, r3, ip
    b5e8:	fbbe f3fc 	udiv	r3, lr, ip
    b5ec:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    b5ee:	4b10      	ldr	r3, [pc, #64]	; (b630 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    b5f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    b5f2:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    b5f4:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    b5f6:	4333      	orrs	r3, r6
    b5f8:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    b5fc:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    b5fe:	6a53      	ldr	r3, [r2, #36]	; 0x24
    b600:	071b      	lsls	r3, r3, #28
    b602:	d5fc      	bpl.n	b5fe <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    b604:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    b606:	012d      	lsls	r5, r5, #4
    b608:	e7e8      	b.n	b5dc <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b60a:	4672      	mov	r2, lr
    b60c:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    b60e:	2301      	movs	r3, #1
    b610:	e7d2      	b.n	b5b8 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b612:	469c      	mov	ip, r3
    b614:	2500      	movs	r5, #0
    b616:	e7e1      	b.n	b5dc <setSdclk(unsigned long)+0x74>
    b618:	400fc000 	.word	0x400fc000
    b61c:	400d8000 	.word	0x400d8000
    b620:	5e69ec00 	.word	0x5e69ec00
    b624:	aaaaaaab 	.word	0xaaaaaaab
    b628:	2000fc0c 	.word	0x2000fc0c
    b62c:	402c0000 	.word	0x402c0000
    b630:	fff0000f 	.word	0xfff0000f

0000b634 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    b634:	4b01      	ldr	r3, [pc, #4]	; (b63c <SdioCard::errorCode() const+0x8>)
}
    b636:	7818      	ldrb	r0, [r3, #0]
    b638:	4770      	bx	lr
    b63a:	bf00      	nop
    b63c:	20009004 	.word	0x20009004

0000b640 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    b640:	4b01      	ldr	r3, [pc, #4]	; (b648 <SdioCard::errorData() const+0x8>)
    b642:	6818      	ldr	r0, [r3, #0]
}
    b644:	4770      	bx	lr
    b646:	bf00      	nop
    b648:	2003472c 	.word	0x2003472c

0000b64c <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    b64c:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    b64e:	4c07      	ldr	r4, [pc, #28]	; (b66c <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    b650:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    b652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    b654:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    b658:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    b65a:	f8cc 1004 	str.w	r1, [ip, #4]
    b65e:	f8cc 2008 	str.w	r2, [ip, #8]
    b662:	f8cc 300c 	str.w	r3, [ip, #12]
}
    b666:	f85d 4b04 	ldr.w	r4, [sp], #4
    b66a:	4770      	bx	lr
    b66c:	20033e34 	.word	0x20033e34

0000b670 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    b670:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    b672:	4c07      	ldr	r4, [pc, #28]	; (b690 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    b674:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    b676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    b678:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    b67c:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    b67e:	f8cc 1004 	str.w	r1, [ip, #4]
    b682:	f8cc 2008 	str.w	r2, [ip, #8]
    b686:	f8cc 300c 	str.w	r3, [ip, #12]
}
    b68a:	f85d 4b04 	ldr.w	r4, [sp], #4
    b68e:	4770      	bx	lr
    b690:	20033e44 	.word	0x20033e44

0000b694 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    b694:	4b02      	ldr	r3, [pc, #8]	; (b6a0 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    b696:	2001      	movs	r0, #1
  *ocr = m_ocr;
    b698:	681b      	ldr	r3, [r3, #0]
    b69a:	600b      	str	r3, [r1, #0]
}
    b69c:	4770      	bx	lr
    b69e:	bf00      	nop
    b6a0:	20033e54 	.word	0x20033e54

0000b6a4 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    b6a4:	4770      	bx	lr
    b6a6:	bf00      	nop

0000b6a8 <SdioCard::~SdioCard()>:
    b6a8:	b510      	push	{r4, lr}
    b6aa:	4604      	mov	r4, r0
    b6ac:	210c      	movs	r1, #12
    b6ae:	f002 fb8f 	bl	ddd0 <operator delete(void*, unsigned int)>
    b6b2:	4620      	mov	r0, r4
    b6b4:	bd10      	pop	{r4, pc}
    b6b6:	bf00      	nop

0000b6b8 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    b6b8:	4b04      	ldr	r3, [pc, #16]	; (b6cc <SdioCard::type() const+0x14>)
    b6ba:	781b      	ldrb	r3, [r3, #0]
    b6bc:	b123      	cbz	r3, b6c8 <SdioCard::type() const+0x10>
    b6be:	4b04      	ldr	r3, [pc, #16]	; (b6d0 <SdioCard::type() const+0x18>)
    b6c0:	7818      	ldrb	r0, [r3, #0]
    b6c2:	3002      	adds	r0, #2
    b6c4:	b2c0      	uxtb	r0, r0
    b6c6:	4770      	bx	lr
    b6c8:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    b6ca:	4770      	bx	lr
    b6cc:	20035461 	.word	0x20035461
    b6d0:	20035462 	.word	0x20035462

0000b6d4 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    b6d4:	4b18      	ldr	r3, [pc, #96]	; (b738 <SdioCard::sectorCount()+0x64>)
    b6d6:	781a      	ldrb	r2, [r3, #0]
    b6d8:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    b6dc:	d00f      	beq.n	b6fe <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    b6de:	2a40      	cmp	r2, #64	; 0x40
    b6e0:	d001      	beq.n	b6e6 <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    b6e2:	2000      	movs	r0, #0
}
    b6e4:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b6e6:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    b6e8:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b6ea:	7a19      	ldrb	r1, [r3, #8]
    b6ec:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    b6ee:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b6f2:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    b6f6:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    b6fa:	0280      	lsls	r0, r0, #10
    b6fc:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    b6fe:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    b700:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b702:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    b704:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b708:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    b70c:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b710:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    b712:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b714:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    b718:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    b71a:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b71e:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    b722:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b724:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    b728:	3001      	adds	r0, #1
    b72a:	f003 030f 	and.w	r3, r3, #15
    b72e:	4413      	add	r3, r2
    b730:	3b07      	subs	r3, #7
    b732:	4098      	lsls	r0, r3
}
    b734:	f85d fb04 	ldr.w	pc, [sp], #4
    b738:	20033e44 	.word	0x20033e44

0000b73c <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b73c:	4a40      	ldr	r2, [pc, #256]	; (b840 <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b73e:	2005      	movs	r0, #5
    b740:	4940      	ldr	r1, [pc, #256]	; (b844 <initSDHC()+0x108>)
static void initSDHC() {
    b742:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b744:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    b748:	4b3f      	ldr	r3, [pc, #252]	; (b848 <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b74a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    b74e:	4d3f      	ldr	r5, [pc, #252]	; (b84c <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b750:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    b754:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    b758:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    b75c:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    b760:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    b764:	f044 0418 	orr.w	r4, r4, #24
    b768:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    b76c:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    b770:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    b774:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    b778:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    b77c:	f042 020c 	orr.w	r2, r2, #12
    b780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    b784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b786:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    b78a:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    b78c:	69da      	ldr	r2, [r3, #28]
    b78e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b792:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    b794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b79a:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b79c:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b7a0:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b7a4:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b7a8:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b7ac:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b7b0:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    b7b4:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    b7b6:	4b26      	ldr	r3, [pc, #152]	; (b850 <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    b7b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    b7bc:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    b7be:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    b7c0:	4313      	orrs	r3, r2
    b7c2:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    b7c4:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    b7c6:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    b7ca:	d1fb      	bne.n	b7c4 <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    b7cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b7d0:	f7ff feca 	bl	b568 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b7d4:	4b1b      	ldr	r3, [pc, #108]	; (b844 <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b7d6:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b7da:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b7de:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    b7e2:	481c      	ldr	r0, [pc, #112]	; (b854 <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b7e4:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b7e8:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b7ec:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b7f0:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b7f4:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b7f8:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b7fc:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b800:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b804:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b808:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    b80c:	4912      	ldr	r1, [pc, #72]	; (b858 <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b80e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    b812:	4b12      	ldr	r3, [pc, #72]	; (b85c <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    b814:	6368      	str	r0, [r5, #52]	; 0x34
    b816:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    b81a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b81e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    b822:	490f      	ldr	r1, [pc, #60]	; (b860 <initSDHC()+0x124>)
    b824:	2060      	movs	r0, #96	; 0x60
    b826:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    b82a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    b82e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    b830:	4a06      	ldr	r2, [pc, #24]	; (b84c <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    b832:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    b836:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    b838:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b83a:	011b      	lsls	r3, r3, #4
    b83c:	d4fc      	bmi.n	b838 <initSDHC()+0xfc>
}
    b83e:	bd38      	pop	{r3, r4, r5, pc}
    b840:	400d8000 	.word	0x400d8000
    b844:	401f8000 	.word	0x401f8000
    b848:	400fc000 	.word	0x400fc000
    b84c:	402c0000 	.word	0x402c0000
    b850:	01008000 	.word	0x01008000
    b854:	117f000b 	.word	0x117f000b
    b858:	20009400 	.word	0x20009400
    b85c:	0000b519 	.word	0x0000b519
    b860:	e000e400 	.word	0xe000e400

0000b864 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    b864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    b868:	f001 ff68 	bl	d73c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b86c:	4e17      	ldr	r6, [pc, #92]	; (b8cc <waitTransferComplete() [clone .part.0]+0x68>)
    b86e:	4d18      	ldr	r5, [pc, #96]	; (b8d0 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    b870:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b872:	f8df 8074 	ldr.w	r8, [pc, #116]	; b8e8 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    b876:	e004      	b.n	b882 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b878:	f001 ff60 	bl	d73c <micros>
    b87c:	1bc0      	subs	r0, r0, r7
    b87e:	4540      	cmp	r0, r8
    b880:	d81b      	bhi.n	b8ba <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b882:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    b884:	402c      	ands	r4, r5
    b886:	d0f7      	beq.n	b878 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    b888:	4a12      	ldr	r2, [pc, #72]	; (b8d4 <waitTransferComplete() [clone .part.0]+0x70>)
    b88a:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    b88c:	4b12      	ldr	r3, [pc, #72]	; (b8d8 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    b88e:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    b890:	6b32      	ldr	r2, [r6, #48]	; 0x30
    b892:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b894:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    b896:	4a11      	ldr	r2, [pc, #68]	; (b8dc <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    b898:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    b89a:	681b      	ldr	r3, [r3, #0]
    b89c:	4213      	tst	r3, r2
    b89e:	d009      	beq.n	b8b4 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    b8a0:	490f      	ldr	r1, [pc, #60]	; (b8e0 <waitTransferComplete() [clone .part.0]+0x7c>)
    b8a2:	241f      	movs	r4, #31
  m_errorLine = line;
    b8a4:	4b0f      	ldr	r3, [pc, #60]	; (b8e4 <waitTransferComplete() [clone .part.0]+0x80>)
    b8a6:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    b8aa:	2000      	movs	r0, #0
  m_errorCode = code;
    b8ac:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b8ae:	601a      	str	r2, [r3, #0]
}
    b8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    b8b4:	2001      	movs	r0, #1
}
    b8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    b8ba:	4a06      	ldr	r2, [pc, #24]	; (b8d4 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    b8bc:	4b06      	ldr	r3, [pc, #24]	; (b8d8 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    b8be:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    b8c0:	6b32      	ldr	r2, [r6, #48]	; 0x30
    b8c2:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b8c4:	681b      	ldr	r3, [r3, #0]
    b8c6:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    b8c8:	e7ea      	b.n	b8a0 <waitTransferComplete() [clone .part.0]+0x3c>
    b8ca:	bf00      	nop
    b8cc:	402c0000 	.word	0x402c0000
    b8d0:	117f0002 	.word	0x117f0002
    b8d4:	20035463 	.word	0x20035463
    b8d8:	2003472c 	.word	0x2003472c
    b8dc:	117f0000 	.word	0x117f0000
    b8e0:	20009004 	.word	0x20009004
    b8e4:	20033c14 	.word	0x20033c14
    b8e8:	000f4240 	.word	0x000f4240

0000b8ec <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    b8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    b8f0:	4c26      	ldr	r4, [pc, #152]	; (b98c <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    b8f2:	460f      	mov	r7, r1
  if (!m_transferActive) {
    b8f4:	7823      	ldrb	r3, [r4, #0]
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d138      	bne.n	b96c <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    b8fa:	4b25      	ldr	r3, [pc, #148]	; (b990 <SdioCard::writeData(unsigned char const*)+0xa4>)
    b8fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b8fe:	05d2      	lsls	r2, r2, #23
    b900:	d52b      	bpl.n	b95a <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b902:	4d23      	ldr	r5, [pc, #140]	; (b990 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b904:	f8df 8094 	ldr.w	r8, [pc, #148]	; b99c <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b908:	6aab      	ldr	r3, [r5, #40]	; 0x28
    b90a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b90e:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    b910:	f001 ff14 	bl	d73c <micros>
    b914:	4606      	mov	r6, r0
  while (fcn()) {
    b916:	e004      	b.n	b922 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b918:	f001 ff10 	bl	d73c <micros>
    b91c:	1b80      	subs	r0, r0, r6
    b91e:	4540      	cmp	r0, r8
    b920:	d82a      	bhi.n	b978 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    b922:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    b924:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    b928:	d0f6      	beq.n	b918 <SdioCard::writeData(unsigned char const*)+0x2c>
    b92a:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    b92e:	4818      	ldr	r0, [pc, #96]	; (b990 <SdioCard::writeData(unsigned char const*)+0xa4>)
    b930:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    b934:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b936:	055b      	lsls	r3, r3, #21
    b938:	d5fc      	bpl.n	b934 <SdioCard::writeData(unsigned char const*)+0x48>
    b93a:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    b93e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b942:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    b944:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b946:	d1fa      	bne.n	b93e <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b948:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    b94c:	45bc      	cmp	ip, r7
    b94e:	d1f1      	bne.n	b934 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    b950:	2301      	movs	r3, #1
  return true;
    b952:	4618      	mov	r0, r3
  m_transferActive = true;
    b954:	7023      	strb	r3, [r4, #0]
}
    b956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b95a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b95c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b960:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b964:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    b968:	629a      	str	r2, [r3, #40]	; 0x28
    b96a:	e7ca      	b.n	b902 <SdioCard::writeData(unsigned char const*)+0x16>
    b96c:	f7ff ff7a 	bl	b864 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    b970:	2800      	cmp	r0, #0
    b972:	d1c2      	bne.n	b8fa <SdioCard::writeData(unsigned char const*)+0xe>
}
    b974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    b978:	4906      	ldr	r1, [pc, #24]	; (b994 <SdioCard::writeData(unsigned char const*)+0xa8>)
    b97a:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    b97c:	4b06      	ldr	r3, [pc, #24]	; (b998 <SdioCard::writeData(unsigned char const*)+0xac>)
    b97e:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    b982:	4648      	mov	r0, r9
  m_errorCode = code;
    b984:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b986:	601a      	str	r2, [r3, #0]
}
    b988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b98c:	20035463 	.word	0x20035463
    b990:	402c0000 	.word	0x402c0000
    b994:	20009004 	.word	0x20009004
    b998:	20033c14 	.word	0x20033c14
    b99c:	000f4240 	.word	0x000f4240

0000b9a0 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    b9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9a4:	4607      	mov	r7, r0
    b9a6:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    b9a8:	4c1f      	ldr	r4, [pc, #124]	; (ba28 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    b9aa:	f001 fec7 	bl	d73c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b9ae:	4e1f      	ldr	r6, [pc, #124]	; (ba2c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    b9b0:	4605      	mov	r5, r0
  while (fcn()) {
    b9b2:	e004      	b.n	b9be <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b9b4:	f001 fec2 	bl	d73c <micros>
    b9b8:	1b43      	subs	r3, r0, r5
    b9ba:	42b3      	cmp	r3, r6
    b9bc:	d824      	bhi.n	ba08 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    b9be:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    b9c0:	07d9      	lsls	r1, r3, #31
    b9c2:	d4f7      	bmi.n	b9b4 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    b9c4:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    b9c6:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    b9ca:	d420      	bmi.n	ba0e <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    b9cc:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    b9d0:	4c15      	ldr	r4, [pc, #84]	; (ba28 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    b9d2:	4e17      	ldr	r6, [pc, #92]	; (ba30 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    b9d4:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    b9d6:	f001 feb1 	bl	d73c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b9da:	4f14      	ldr	r7, [pc, #80]	; (ba2c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    b9dc:	4605      	mov	r5, r0
  while (fcn()) {
    b9de:	e004      	b.n	b9ea <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b9e0:	f001 feac 	bl	d73c <micros>
    b9e4:	1b40      	subs	r0, r0, r5
    b9e6:	42b8      	cmp	r0, r7
    b9e8:	d80e      	bhi.n	ba08 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    b9ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    b9ec:	4233      	tst	r3, r6
    b9ee:	d0f7      	beq.n	b9e0 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    b9f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    b9f2:	4b10      	ldr	r3, [pc, #64]	; (ba34 <cardCommand(unsigned long, unsigned long)+0x94>)
    b9f4:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b9f6:	681a      	ldr	r2, [r3, #0]
    b9f8:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    b9fa:	681a      	ldr	r2, [r3, #0]
    b9fc:	07d2      	lsls	r2, r2, #31
    b9fe:	d503      	bpl.n	ba08 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    ba00:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ba02:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    ba06:	d00b      	beq.n	ba20 <cardCommand(unsigned long, unsigned long)+0x80>
    ba08:	2000      	movs	r0, #0
}
    ba0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    ba0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    ba10:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    ba12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    ba16:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    ba18:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    ba1a:	4313      	orrs	r3, r2
    ba1c:	64a3      	str	r3, [r4, #72]	; 0x48
    ba1e:	e7d5      	b.n	b9cc <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ba20:	2001      	movs	r0, #1
}
    ba22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba26:	bf00      	nop
    ba28:	402c0000 	.word	0x402c0000
    ba2c:	000f4240 	.word	0x000f4240
    ba30:	000f0001 	.word	0x000f0001
    ba34:	2003472c 	.word	0x2003472c

0000ba38 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    ba38:	4b15      	ldr	r3, [pc, #84]	; (ba90 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    ba3a:	b530      	push	{r4, r5, lr}
    ba3c:	460d      	mov	r5, r1
    ba3e:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    ba40:	6819      	ldr	r1, [r3, #0]
    ba42:	f7ff ffad 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    ba46:	b308      	cbz	r0, ba8c <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    ba48:	4b12      	ldr	r3, [pc, #72]	; (ba94 <readReg16(unsigned long, void*)+0x5c>)
    ba4a:	f105 040f 	add.w	r4, r5, #15
    ba4e:	691a      	ldr	r2, [r3, #16]
    ba50:	9200      	str	r2, [sp, #0]
    ba52:	6959      	ldr	r1, [r3, #20]
    ba54:	9101      	str	r1, [sp, #4]
    ba56:	6999      	ldr	r1, [r3, #24]
    ba58:	9102      	str	r1, [sp, #8]
    ba5a:	69db      	ldr	r3, [r3, #28]
    ba5c:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    ba5e:	2300      	movs	r3, #0
    ba60:	e001      	b.n	ba66 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ba62:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    ba66:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    ba6a:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ba6c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    ba70:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    ba74:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ba76:	fa22 f20c 	lsr.w	r2, r2, ip
    ba7a:	f10e 0110 	add.w	r1, lr, #16
    ba7e:	f804 2d01 	strb.w	r2, [r4, #-1]!
    ba82:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    ba86:	d1ec      	bne.n	ba62 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    ba88:	2300      	movs	r3, #0
    ba8a:	73eb      	strb	r3, [r5, #15]
}
    ba8c:	b005      	add	sp, #20
    ba8e:	bd30      	pop	{r4, r5, pc}
    ba90:	20033e58 	.word	0x20033e58
    ba94:	402c0000 	.word	0x402c0000

0000ba98 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    ba98:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    ba9a:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    ba9c:	07db      	lsls	r3, r3, #31
    ba9e:	d505      	bpl.n	baac <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    baa0:	4b15      	ldr	r3, [pc, #84]	; (baf8 <SdioCard::isBusy()+0x60>)
    baa2:	681b      	ldr	r3, [r3, #0]
    baa4:	b1b3      	cbz	r3, bad4 <SdioCard::isBusy()+0x3c>
}
    baa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    baaa:	4718      	bx	r3
    if (m_transferActive) {
    baac:	4b13      	ldr	r3, [pc, #76]	; (bafc <SdioCard::isBusy()+0x64>)
    baae:	781b      	ldrb	r3, [r3, #0]
    bab0:	b93b      	cbnz	r3, bac2 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    bab2:	4b13      	ldr	r3, [pc, #76]	; (bb00 <SdioCard::isBusy()+0x68>)
    bab4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    bab6:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    baba:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    babe:	4620      	mov	r0, r4
    bac0:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    bac2:	4b0f      	ldr	r3, [pc, #60]	; (bb00 <SdioCard::isBusy()+0x68>)
    bac4:	4c0f      	ldr	r4, [pc, #60]	; (bb04 <SdioCard::isBusy()+0x6c>)
    bac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bac8:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    baca:	fab4 f484 	clz	r4, r4
    bace:	0964      	lsrs	r4, r4, #5
}
    bad0:	4620      	mov	r0, r4
    bad2:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    bad4:	4b0c      	ldr	r3, [pc, #48]	; (bb08 <SdioCard::isBusy()+0x70>)
    bad6:	781c      	ldrb	r4, [r3, #0]
    bad8:	2c00      	cmp	r4, #0
    bada:	d0f0      	beq.n	babe <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    badc:	4b0b      	ldr	r3, [pc, #44]	; (bb0c <SdioCard::isBusy()+0x74>)
    bade:	480c      	ldr	r0, [pc, #48]	; (bb10 <SdioCard::isBusy()+0x78>)
    bae0:	6819      	ldr	r1, [r3, #0]
    bae2:	f7ff ff5d 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    bae6:	2800      	cmp	r0, #0
    bae8:	d0e9      	beq.n	babe <SdioCard::isBusy()+0x26>
    baea:	4b05      	ldr	r3, [pc, #20]	; (bb00 <SdioCard::isBusy()+0x68>)
    baec:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    baee:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    baf2:	f3c4 2400 	ubfx	r4, r4, #8, #1
    baf6:	e7e2      	b.n	babe <SdioCard::isBusy()+0x26>
    baf8:	20034728 	.word	0x20034728
    bafc:	20035463 	.word	0x20035463
    bb00:	402c0000 	.word	0x402c0000
    bb04:	117f0002 	.word	0x117f0002
    bb08:	20035460 	.word	0x20035460
    bb0c:	20033e58 	.word	0x20033e58
    bb10:	0d1a0000 	.word	0x0d1a0000

0000bb14 <SdioCard::status()>:
uint32_t SdioCard::status() {
    bb14:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bb16:	4b04      	ldr	r3, [pc, #16]	; (bb28 <SdioCard::status()+0x14>)
    bb18:	4804      	ldr	r0, [pc, #16]	; (bb2c <SdioCard::status()+0x18>)
    bb1a:	6819      	ldr	r1, [r3, #0]
    bb1c:	f7ff ff40 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    bb20:	b108      	cbz	r0, bb26 <SdioCard::status()+0x12>
    bb22:	4b03      	ldr	r3, [pc, #12]	; (bb30 <SdioCard::status()+0x1c>)
    bb24:	6918      	ldr	r0, [r3, #16]
}
    bb26:	bd08      	pop	{r3, pc}
    bb28:	20033e58 	.word	0x20033e58
    bb2c:	0d1a0000 	.word	0x0d1a0000
    bb30:	402c0000 	.word	0x402c0000

0000bb34 <isBusyCMD13()>:
static bool isBusyCMD13() {
    bb34:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bb36:	4b07      	ldr	r3, [pc, #28]	; (bb54 <isBusyCMD13()+0x20>)
    bb38:	4807      	ldr	r0, [pc, #28]	; (bb58 <isBusyCMD13()+0x24>)
    bb3a:	6819      	ldr	r1, [r3, #0]
    bb3c:	f7ff ff30 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    bb40:	b130      	cbz	r0, bb50 <isBusyCMD13()+0x1c>
    bb42:	4b06      	ldr	r3, [pc, #24]	; (bb5c <isBusyCMD13()+0x28>)
    bb44:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    bb46:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    bb4a:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    bb4e:	bd08      	pop	{r3, pc}
    bb50:	2001      	movs	r0, #1
    bb52:	bd08      	pop	{r3, pc}
    bb54:	20033e58 	.word	0x20033e58
    bb58:	0d1a0000 	.word	0x0d1a0000
    bb5c:	402c0000 	.word	0x402c0000

0000bb60 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    bb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    bb64:	4b29      	ldr	r3, [pc, #164]	; (bc0c <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    bb66:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    bb68:	f8df a0c0 	ldr.w	sl, [pc, #192]	; bc2c <SdioCard::writeStart(unsigned long)+0xcc>
    bb6c:	4e28      	ldr	r6, [pc, #160]	; (bc10 <SdioCard::writeStart(unsigned long)+0xb0>)
    bb6e:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    bb72:	f001 fde3 	bl	d73c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bb76:	4d27      	ldr	r5, [pc, #156]	; (bc14 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    bb78:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bb7a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; bc30 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bb7e:	4f26      	ldr	r7, [pc, #152]	; (bc18 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    bb80:	e006      	b.n	bb90 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bb82:	f001 fddb 	bl	d73c <micros>
    bb86:	1b00      	subs	r0, r0, r4
    bb88:	42b8      	cmp	r0, r7
    bb8a:	d829      	bhi.n	bbe0 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    bb8c:	f003 fe84 	bl	f898 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bb90:	6831      	ldr	r1, [r6, #0]
    bb92:	4628      	mov	r0, r5
    bb94:	f7ff ff04 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    bb98:	2800      	cmp	r0, #0
    bb9a:	d0f2      	beq.n	bb82 <SdioCard::writeStart(unsigned long)+0x22>
    bb9c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    bba0:	05db      	lsls	r3, r3, #23
    bba2:	d5ee      	bpl.n	bb82 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    bba4:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    bba6:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    bbaa:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bbae:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    bbb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    bbb6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bbba:	4b18      	ldr	r3, [pc, #96]	; (bc1c <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    bbbc:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bbc0:	781b      	ldrb	r3, [r3, #0]
    bbc2:	b1cb      	cbz	r3, bbf8 <SdioCard::writeStart(unsigned long)+0x98>
    bbc4:	4649      	mov	r1, r9
    bbc6:	4816      	ldr	r0, [pc, #88]	; (bc20 <SdioCard::writeStart(unsigned long)+0xc0>)
    bbc8:	f7ff feea 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    bbcc:	b930      	cbnz	r0, bbdc <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    bbce:	4915      	ldr	r1, [pc, #84]	; (bc24 <SdioCard::writeStart(unsigned long)+0xc4>)
    bbd0:	240e      	movs	r4, #14
  m_errorLine = line;
    bbd2:	4b15      	ldr	r3, [pc, #84]	; (bc28 <SdioCard::writeStart(unsigned long)+0xc8>)
    bbd4:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    bbd8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bbda:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    bbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    bbe0:	4a10      	ldr	r2, [pc, #64]	; (bc24 <SdioCard::writeStart(unsigned long)+0xc4>)
    bbe2:	210a      	movs	r1, #10
      m_busyFcn = 0;
    bbe4:	2000      	movs	r0, #0
  m_errorLine = line;
    bbe6:	4b10      	ldr	r3, [pc, #64]	; (bc28 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    bbe8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    bbea:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    bbee:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    bbf2:	601a      	str	r2, [r3, #0]
}
    bbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bbf8:	ea4f 2949 	mov.w	r9, r9, lsl #9
    bbfc:	4808      	ldr	r0, [pc, #32]	; (bc20 <SdioCard::writeStart(unsigned long)+0xc0>)
    bbfe:	4649      	mov	r1, r9
    bc00:	f7ff fece 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    bc04:	2800      	cmp	r0, #0
    bc06:	d1e9      	bne.n	bbdc <SdioCard::writeStart(unsigned long)+0x7c>
    bc08:	e7e1      	b.n	bbce <SdioCard::writeStart(unsigned long)+0x6e>
    bc0a:	bf00      	nop
    bc0c:	0000bb35 	.word	0x0000bb35
    bc10:	20033e58 	.word	0x20033e58
    bc14:	0d1a0000 	.word	0x0d1a0000
    bc18:	000f4240 	.word	0x000f4240
    bc1c:	20035462 	.word	0x20035462
    bc20:	193a0020 	.word	0x193a0020
    bc24:	20009004 	.word	0x20009004
    bc28:	20033c14 	.word	0x20033c14
    bc2c:	20034728 	.word	0x20034728
    bc30:	402c0000 	.word	0x402c0000

0000bc34 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    bc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bc38:	4c25      	ldr	r4, [pc, #148]	; (bcd0 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    bc3a:	2100      	movs	r1, #0
    bc3c:	4825      	ldr	r0, [pc, #148]	; (bcd4 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bc3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bc40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    bc44:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    bc46:	f7ff feab 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    bc4a:	4605      	mov	r5, r0
    bc4c:	b948      	cbnz	r0, bc62 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    bc4e:	4922      	ldr	r1, [pc, #136]	; (bcd8 <SdioCard::readStop()+0xa4>)
    bc50:	2009      	movs	r0, #9
  m_errorLine = line;
    bc52:	4b22      	ldr	r3, [pc, #136]	; (bcdc <SdioCard::readStop()+0xa8>)
    bc54:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    bc58:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    bc5a:	601a      	str	r2, [r3, #0]
}
    bc5c:	4628      	mov	r0, r5
    bc5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    bc62:	4b1f      	ldr	r3, [pc, #124]	; (bce0 <SdioCard::readStop()+0xac>)
    bc64:	f8df 8080 	ldr.w	r8, [pc, #128]	; bce8 <SdioCard::readStop()+0xb4>
    bc68:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    bc6c:	f001 fd66 	bl	d73c <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    bc70:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    bc72:	4606      	mov	r6, r0
  while (fcn()) {
    bc74:	01d8      	lsls	r0, r3, #7
    bc76:	d418      	bmi.n	bcaa <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bc78:	4f1a      	ldr	r7, [pc, #104]	; (bce4 <SdioCard::readStop()+0xb0>)
    bc7a:	e004      	b.n	bc86 <SdioCard::readStop()+0x52>
    yield();
    bc7c:	f003 fe0c 	bl	f898 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    bc80:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    bc82:	01d9      	lsls	r1, r3, #7
    bc84:	d411      	bmi.n	bcaa <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bc86:	f001 fd59 	bl	d73c <micros>
    bc8a:	1b83      	subs	r3, r0, r6
    bc8c:	42bb      	cmp	r3, r7
    bc8e:	d9f5      	bls.n	bc7c <SdioCard::readStop()+0x48>
  m_errorCode = code;
    bc90:	4a11      	ldr	r2, [pc, #68]	; (bcd8 <SdioCard::readStop()+0xa4>)
    bc92:	210a      	movs	r1, #10
      m_busyFcn = 0;
    bc94:	2500      	movs	r5, #0
  m_errorLine = line;
    bc96:	4b11      	ldr	r3, [pc, #68]	; (bcdc <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    bc98:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    bc9a:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    bc9e:	4628      	mov	r0, r5
      m_busyFcn = 0;
    bca0:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    bca4:	601a      	str	r2, [r3, #0]
}
    bca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    bcaa:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    bcac:	4b08      	ldr	r3, [pc, #32]	; (bcd0 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    bcae:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    bcb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bcb4:	0792      	lsls	r2, r2, #30
    bcb6:	d5d1      	bpl.n	bc5c <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    bcb8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    bcba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    bcbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    bcbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    bcc2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    bcc6:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    bcc8:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    bcca:	629a      	str	r2, [r3, #40]	; 0x28
    bccc:	e7c6      	b.n	bc5c <SdioCard::readStop()+0x28>
    bcce:	bf00      	nop
    bcd0:	402c0000 	.word	0x402c0000
    bcd4:	0cdb0000 	.word	0x0cdb0000
    bcd8:	20009004 	.word	0x20009004
    bcdc:	20033c14 	.word	0x20033c14
    bce0:	0000b549 	.word	0x0000b549
    bce4:	000f4240 	.word	0x000f4240
    bce8:	20034728 	.word	0x20034728

0000bcec <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    bcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bcf0:	4682      	mov	sl, r0
    bcf2:	4689      	mov	r9, r1
    bcf4:	4e36      	ldr	r6, [pc, #216]	; (bdd0 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    bcf6:	f001 fd21 	bl	d73c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bcfa:	4d36      	ldr	r5, [pc, #216]	; (bdd4 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    bcfc:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bcfe:	f8df 8100 	ldr.w	r8, [pc, #256]	; be00 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd02:	4f35      	ldr	r7, [pc, #212]	; (bdd8 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    bd04:	e004      	b.n	bd10 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd06:	f001 fd19 	bl	d73c <micros>
    bd0a:	1b03      	subs	r3, r0, r4
    bd0c:	42bb      	cmp	r3, r7
    bd0e:	d827      	bhi.n	bd60 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bd10:	6831      	ldr	r1, [r6, #0]
    bd12:	4628      	mov	r0, r5
    bd14:	f7ff fe44 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    bd18:	2800      	cmp	r0, #0
    bd1a:	d0f4      	beq.n	bd06 <cardCMD6(unsigned long, unsigned char*)+0x1a>
    bd1c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    bd20:	05da      	lsls	r2, r3, #23
    bd22:	d5f0      	bpl.n	bd06 <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    bd24:	2301      	movs	r3, #1
    bd26:	4d2d      	ldr	r5, [pc, #180]	; (bddc <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    bd28:	4f2d      	ldr	r7, [pc, #180]	; (bde0 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    bd2a:	4651      	mov	r1, sl
  m_dmaBusy = true;
    bd2c:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    bd2e:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    bd30:	482c      	ldr	r0, [pc, #176]	; (bde4 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    bd32:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    bd34:	4b2c      	ldr	r3, [pc, #176]	; (bde8 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    bd36:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    bd3a:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    bd3e:	4b2b      	ldr	r3, [pc, #172]	; (bdec <cardCMD6(unsigned long, unsigned char*)+0x100>)
    bd40:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    bd44:	f7ff fe2c 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    bd48:	4604      	mov	r4, r0
    bd4a:	b9a0      	cbnz	r0, bd76 <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    bd4c:	4928      	ldr	r1, [pc, #160]	; (bdf0 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    bd4e:	2004      	movs	r0, #4
  m_errorLine = line;
    bd50:	4b28      	ldr	r3, [pc, #160]	; (bdf4 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    bd52:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    bd56:	7008      	strb	r0, [r1, #0]
}
    bd58:	4620      	mov	r0, r4
  m_errorLine = line;
    bd5a:	601a      	str	r2, [r3, #0]
}
    bd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    bd60:	4923      	ldr	r1, [pc, #140]	; (bdf0 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    bd62:	200a      	movs	r0, #10
  m_errorLine = line;
    bd64:	4b23      	ldr	r3, [pc, #140]	; (bdf4 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    bd66:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    bd6a:	2400      	movs	r4, #0
  m_errorCode = code;
    bd6c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    bd6e:	601a      	str	r2, [r3, #0]
}
    bd70:	4620      	mov	r0, r4
    bd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    bd76:	4b20      	ldr	r3, [pc, #128]	; (bdf8 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    bd78:	f8df 9088 	ldr.w	r9, [pc, #136]	; be04 <cardCMD6(unsigned long, unsigned char*)+0x118>
    bd7c:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    bd80:	f001 fcdc 	bl	d73c <micros>
  return m_dmaBusy;
    bd84:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    bd86:	4606      	mov	r6, r0
  while (fcn()) {
    bd88:	b1bb      	cbz	r3, bdba <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd8a:	f8df 804c 	ldr.w	r8, [pc, #76]	; bdd8 <cardCMD6(unsigned long, unsigned char*)+0xec>
    bd8e:	e003      	b.n	bd98 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    bd90:	f003 fd82 	bl	f898 <yield>
  return m_dmaBusy;
    bd94:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    bd96:	b183      	cbz	r3, bdba <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd98:	f001 fcd0 	bl	d73c <micros>
    bd9c:	1b83      	subs	r3, r0, r6
    bd9e:	4543      	cmp	r3, r8
    bda0:	d9f6      	bls.n	bd90 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    bda2:	2300      	movs	r3, #0
    bda4:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    bda8:	4911      	ldr	r1, [pc, #68]	; (bdf0 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    bdaa:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    bdac:	4b11      	ldr	r3, [pc, #68]	; (bdf4 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    bdae:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    bdb2:	2400      	movs	r4, #0
  m_errorCode = code;
    bdb4:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    bdb6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    bdb8:	e7da      	b.n	bd70 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    bdba:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    bdbc:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    bdbe:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    bdc0:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    bdc4:	d5f0      	bpl.n	bda8 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    bdc6:	683a      	ldr	r2, [r7, #0]
    bdc8:	4b0c      	ldr	r3, [pc, #48]	; (bdfc <cardCMD6(unsigned long, unsigned char*)+0x110>)
    bdca:	421a      	tst	r2, r3
    bdcc:	d0d0      	beq.n	bd70 <cardCMD6(unsigned long, unsigned char*)+0x84>
    bdce:	e7eb      	b.n	bda8 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    bdd0:	20033e58 	.word	0x20033e58
    bdd4:	0d1a0000 	.word	0x0d1a0000
    bdd8:	000f4240 	.word	0x000f4240
    bddc:	20035464 	.word	0x20035464
    bde0:	2003472c 	.word	0x2003472c
    bde4:	063a0011 	.word	0x063a0011
    bde8:	00010040 	.word	0x00010040
    bdec:	117f0002 	.word	0x117f0002
    bdf0:	20009004 	.word	0x20009004
    bdf4:	20033c14 	.word	0x20033c14
    bdf8:	0000b55d 	.word	0x0000b55d
    bdfc:	117f0000 	.word	0x117f0000
    be00:	402c0000 	.word	0x402c0000
    be04:	20034728 	.word	0x20034728

0000be08 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    be08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    be0c:	4d32      	ldr	r5, [pc, #200]	; (bed8 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    be0e:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    be10:	7aab      	ldrb	r3, [r5, #10]
    be12:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    be16:	d112      	bne.n	be3e <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    be18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    be1c:	7aea      	ldrb	r2, [r5, #11]
    be1e:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    be20:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    be24:	1c62      	adds	r2, r4, #1
    be26:	430a      	orrs	r2, r1
    be28:	4213      	tst	r3, r2
    be2a:	d008      	beq.n	be3e <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    be2c:	492b      	ldr	r1, [pc, #172]	; (bedc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    be2e:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    be30:	4b2b      	ldr	r3, [pc, #172]	; (bee0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    be32:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    be36:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    be38:	601a      	str	r2, [r3, #0]
}
    be3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    be3e:	4b29      	ldr	r3, [pc, #164]	; (bee4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    be40:	781b      	ldrb	r3, [r3, #0]
    be42:	b90b      	cbnz	r3, be48 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    be44:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    be46:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    be48:	4827      	ldr	r0, [pc, #156]	; (bee8 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    be4a:	f7ff fda9 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    be4e:	b940      	cbnz	r0, be62 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    be50:	4922      	ldr	r1, [pc, #136]	; (bedc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    be52:	240f      	movs	r4, #15
  m_errorLine = line;
    be54:	4b22      	ldr	r3, [pc, #136]	; (bee0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    be56:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    be5a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    be5c:	601a      	str	r2, [r3, #0]
}
    be5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    be62:	4621      	mov	r1, r4
    be64:	4821      	ldr	r0, [pc, #132]	; (beec <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    be66:	f7ff fd9b 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    be6a:	b940      	cbnz	r0, be7e <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    be6c:	491b      	ldr	r1, [pc, #108]	; (bedc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    be6e:	2410      	movs	r4, #16
  m_errorLine = line;
    be70:	4b1b      	ldr	r3, [pc, #108]	; (bee0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    be72:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    be76:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    be78:	601a      	str	r2, [r3, #0]
}
    be7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    be7e:	2100      	movs	r1, #0
    be80:	481b      	ldr	r0, [pc, #108]	; (bef0 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    be82:	f7ff fd8d 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    be86:	b938      	cbnz	r0, be98 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    be88:	4914      	ldr	r1, [pc, #80]	; (bedc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    be8a:	2411      	movs	r4, #17
  m_errorLine = line;
    be8c:	4b14      	ldr	r3, [pc, #80]	; (bee0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    be8e:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    be92:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    be94:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    be96:	e7e2      	b.n	be5e <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    be98:	f001 fc50 	bl	d73c <micros>
    be9c:	4e15      	ldr	r6, [pc, #84]	; (bef4 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    be9e:	4d16      	ldr	r5, [pc, #88]	; (bef8 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    bea0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bea2:	f8df 805c 	ldr.w	r8, [pc, #92]	; bf00 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bea6:	4f15      	ldr	r7, [pc, #84]	; (befc <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bea8:	6831      	ldr	r1, [r6, #0]
    beaa:	4628      	mov	r0, r5
    beac:	f7ff fd78 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    beb0:	b118      	cbz	r0, beba <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    beb2:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    beb6:	05db      	lsls	r3, r3, #23
    beb8:	d4d1      	bmi.n	be5e <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    beba:	f001 fc3f 	bl	d73c <micros>
    bebe:	1b00      	subs	r0, r0, r4
    bec0:	42b8      	cmp	r0, r7
    bec2:	d9f1      	bls.n	bea8 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    bec4:	4905      	ldr	r1, [pc, #20]	; (bedc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    bec6:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    bec8:	4b05      	ldr	r3, [pc, #20]	; (bee0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    beca:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    bece:	2000      	movs	r0, #0
  m_errorCode = code;
    bed0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bed2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    bed4:	e7c3      	b.n	be5e <SdioCard::erase(unsigned long, unsigned long)+0x56>
    bed6:	bf00      	nop
    bed8:	20033e44 	.word	0x20033e44
    bedc:	20009004 	.word	0x20009004
    bee0:	20033c14 	.word	0x20033c14
    bee4:	20035462 	.word	0x20035462
    bee8:	201a0000 	.word	0x201a0000
    beec:	211a0000 	.word	0x211a0000
    bef0:	261b0000 	.word	0x261b0000
    bef4:	20033e58 	.word	0x20033e58
    bef8:	0d1a0000 	.word	0x0d1a0000
    befc:	000f4240 	.word	0x000f4240
    bf00:	402c0000 	.word	0x402c0000

0000bf04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    bf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    bf08:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    bf0c:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    bf0e:	bf18      	it	ne
    bf10:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    bf12:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    bf14:	9300      	str	r3, [sp, #0]
    bf16:	2b00      	cmp	r3, #0
    bf18:	bf08      	it	eq
    bf1a:	f044 0401 	orreq.w	r4, r4, #1
    bf1e:	b15c      	cbz	r4, bf38 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    bf20:	4940      	ldr	r1, [pc, #256]	; (c024 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    bf22:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    bf24:	4b40      	ldr	r3, [pc, #256]	; (c028 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    bf26:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    bf2a:	2400      	movs	r4, #0
  m_errorCode = code;
    bf2c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    bf2e:	601a      	str	r2, [r3, #0]
}
    bf30:	4620      	mov	r0, r4
    bf32:	b003      	add	sp, #12
    bf34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    bf38:	4b3c      	ldr	r3, [pc, #240]	; (c02c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    bf3a:	4615      	mov	r5, r2
    bf3c:	4a3c      	ldr	r2, [pc, #240]	; (c030 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    bf3e:	460e      	mov	r6, r1
    bf40:	f8df 910c 	ldr.w	r9, [pc, #268]	; c050 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    bf44:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    bf46:	f001 fbf9 	bl	d73c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bf4a:	f8df 8108 	ldr.w	r8, [pc, #264]	; c054 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    bf4e:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bf50:	f8df b104 	ldr.w	fp, [pc, #260]	; c058 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bf54:	f8df a0f0 	ldr.w	sl, [pc, #240]	; c048 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    bf58:	e006      	b.n	bf68 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bf5a:	f001 fbef 	bl	d73c <micros>
    bf5e:	1bc0      	subs	r0, r0, r7
    bf60:	4550      	cmp	r0, sl
    bf62:	d844      	bhi.n	bfee <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    bf64:	f003 fc98 	bl	f898 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bf68:	f8d9 1000 	ldr.w	r1, [r9]
    bf6c:	4640      	mov	r0, r8
    bf6e:	f7ff fd17 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    bf72:	2800      	cmp	r0, #0
    bf74:	d0f1      	beq.n	bf5a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    bf76:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    bf7a:	05da      	lsls	r2, r3, #23
    bf7c:	d5ed      	bpl.n	bf5a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    bf7e:	9a00      	ldr	r2, [sp, #0]
    bf80:	4b2c      	ldr	r3, [pc, #176]	; (c034 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    bf82:	492b      	ldr	r1, [pc, #172]	; (c030 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    bf84:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    bf88:	2200      	movs	r2, #0
  m_dmaBusy = true;
    bf8a:	4f2b      	ldr	r7, [pc, #172]	; (c038 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    bf8c:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    bf8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    bf92:	2101      	movs	r1, #1
  m_irqstat = 0;
    bf94:	f8df 80c4 	ldr.w	r8, [pc, #196]	; c05c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    bf98:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    bf9a:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    bf9e:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    bfa2:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    bfa6:	4b25      	ldr	r3, [pc, #148]	; (c03c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    bfa8:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    bfac:	4b24      	ldr	r3, [pc, #144]	; (c040 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    bfae:	781b      	ldrb	r3, [r3, #0]
    bfb0:	b343      	cbz	r3, c004 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    bfb2:	4631      	mov	r1, r6
    bfb4:	9801      	ldr	r0, [sp, #4]
    bfb6:	f7ff fcf3 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    bfba:	4681      	mov	r9, r0
    bfbc:	2800      	cmp	r0, #0
    bfbe:	d0b7      	beq.n	bf30 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    bfc0:	4b20      	ldr	r3, [pc, #128]	; (c044 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    bfc2:	4a1b      	ldr	r2, [pc, #108]	; (c030 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    bfc4:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    bfc6:	f001 fbb9 	bl	d73c <micros>
  return m_dmaBusy;
    bfca:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    bfcc:	4605      	mov	r5, r0
  while (fcn()) {
    bfce:	b1db      	cbz	r3, c008 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bfd0:	4e1d      	ldr	r6, [pc, #116]	; (c048 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    bfd2:	e003      	b.n	bfdc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    bfd4:	f003 fc60 	bl	f898 <yield>
  return m_dmaBusy;
    bfd8:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    bfda:	b1ab      	cbz	r3, c008 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bfdc:	f001 fbae 	bl	d73c <micros>
    bfe0:	1b40      	subs	r0, r0, r5
    bfe2:	42b0      	cmp	r0, r6
    bfe4:	d9f6      	bls.n	bfd4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    bfe6:	2300      	movs	r3, #0
    bfe8:	4a11      	ldr	r2, [pc, #68]	; (c030 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    bfea:	6013      	str	r3, [r2, #0]
      return true;
    bfec:	e7a0      	b.n	bf30 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    bfee:	4b0d      	ldr	r3, [pc, #52]	; (c024 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    bff0:	220a      	movs	r2, #10
      m_busyFcn = 0;
    bff2:	2100      	movs	r1, #0
    bff4:	480e      	ldr	r0, [pc, #56]	; (c030 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    bff6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    bff8:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    bffc:	4b0a      	ldr	r3, [pc, #40]	; (c028 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    bffe:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    c000:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    c002:	e795      	b.n	bf30 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    c004:	0276      	lsls	r6, r6, #9
    c006:	e7d4      	b.n	bfb2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    c008:	2300      	movs	r3, #0
    c00a:	4a09      	ldr	r2, [pc, #36]	; (c030 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c00c:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c00e:	f8d8 3000 	ldr.w	r3, [r8]
    c012:	079b      	lsls	r3, r3, #30
    c014:	d58c      	bpl.n	bf30 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    c016:	f8d8 2000 	ldr.w	r2, [r8]
    c01a:	4b0c      	ldr	r3, [pc, #48]	; (c04c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    c01c:	421a      	tst	r2, r3
    c01e:	bf08      	it	eq
    c020:	464c      	moveq	r4, r9
    c022:	e785      	b.n	bf30 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    c024:	20009004 	.word	0x20009004
    c028:	20033c14 	.word	0x20033c14
    c02c:	0000bb35 	.word	0x0000bb35
    c030:	20034728 	.word	0x20034728
    c034:	1fff0000 	.word	0x1fff0000
    c038:	20035464 	.word	0x20035464
    c03c:	117f0002 	.word	0x117f0002
    c040:	20035462 	.word	0x20035462
    c044:	0000b55d 	.word	0x0000b55d
    c048:	000f4240 	.word	0x000f4240
    c04c:	117f0000 	.word	0x117f0000
    c050:	20033e58 	.word	0x20033e58
    c054:	0d1a0000 	.word	0x0d1a0000
    c058:	402c0000 	.word	0x402c0000
    c05c:	2003472c 	.word	0x2003472c

0000c060 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c062:	4606      	mov	r6, r0
    c064:	7a00      	ldrb	r0, [r0, #8]
    c066:	460c      	mov	r4, r1
    c068:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    c06a:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    c06c:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    c06e:	d413      	bmi.n	c098 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    c070:	b183      	cbz	r3, c094 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    c072:	440f      	add	r7, r1
    c074:	e001      	b.n	c07a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    c076:	42bc      	cmp	r4, r7
    c078:	d00c      	beq.n	c094 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    c07a:	6833      	ldr	r3, [r6, #0]
    c07c:	462a      	mov	r2, r5
    c07e:	4621      	mov	r1, r4
    c080:	4630      	mov	r0, r6
    c082:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    c084:	3401      	adds	r4, #1
    c086:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    c08a:	4798      	blx	r3
    c08c:	2800      	cmp	r0, #0
    c08e:	d1f2      	bne.n	c076 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    c090:	2000      	movs	r0, #0
}
    c092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    c094:	2001      	movs	r0, #1
}
    c096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    c098:	0790      	lsls	r0, r2, #30
    c09a:	d012      	beq.n	c0c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    c09c:	2b00      	cmp	r3, #0
    c09e:	d0f9      	beq.n	c094 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    c0a0:	440f      	add	r7, r1
    c0a2:	e001      	b.n	c0a8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    c0a4:	42bc      	cmp	r4, r7
    c0a6:	d0f5      	beq.n	c094 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    c0a8:	6833      	ldr	r3, [r6, #0]
    c0aa:	462a      	mov	r2, r5
    c0ac:	4621      	mov	r1, r4
    c0ae:	4630      	mov	r0, r6
    c0b0:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    c0b2:	3401      	adds	r4, #1
    c0b4:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    c0b8:	4798      	blx	r3
    c0ba:	2800      	cmp	r0, #0
    c0bc:	d1f2      	bne.n	c0a4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    c0be:	2000      	movs	r0, #0
    c0c0:	e7e7      	b.n	c092 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    c0c2:	4806      	ldr	r0, [pc, #24]	; (c0dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    c0c4:	f7ff ff1e 	bl	bf04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c0c8:	2800      	cmp	r0, #0
    c0ca:	d1e3      	bne.n	c094 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    c0cc:	4904      	ldr	r1, [pc, #16]	; (c0e0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    c0ce:	240c      	movs	r4, #12
  m_errorLine = line;
    c0d0:	4b04      	ldr	r3, [pc, #16]	; (c0e4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    c0d2:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    c0d6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c0d8:	601a      	str	r2, [r3, #0]
}
    c0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0dc:	123a0037 	.word	0x123a0037
    c0e0:	20009004 	.word	0x20009004
    c0e4:	20033c14 	.word	0x20033c14

0000c0e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    c0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0ea:	4606      	mov	r6, r0
    c0ec:	7a00      	ldrb	r0, [r0, #8]
    c0ee:	460c      	mov	r4, r1
    c0f0:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    c0f2:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    c0f4:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    c0f6:	d413      	bmi.n	c120 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    c0f8:	b183      	cbz	r3, c11c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    c0fa:	440f      	add	r7, r1
    c0fc:	e001      	b.n	c102 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    c0fe:	42bc      	cmp	r4, r7
    c100:	d00c      	beq.n	c11c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    c102:	6833      	ldr	r3, [r6, #0]
    c104:	462a      	mov	r2, r5
    c106:	4621      	mov	r1, r4
    c108:	4630      	mov	r0, r6
    c10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    c10c:	3401      	adds	r4, #1
    c10e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    c112:	4798      	blx	r3
    c114:	2800      	cmp	r0, #0
    c116:	d1f2      	bne.n	c0fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    c118:	2000      	movs	r0, #0
}
    c11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    c11c:	2001      	movs	r0, #1
}
    c11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    c120:	0790      	lsls	r0, r2, #30
    c122:	d012      	beq.n	c14a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    c124:	2b00      	cmp	r3, #0
    c126:	d0f9      	beq.n	c11c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    c128:	440f      	add	r7, r1
    c12a:	e001      	b.n	c130 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    c12c:	42bc      	cmp	r4, r7
    c12e:	d0f5      	beq.n	c11c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    c130:	6833      	ldr	r3, [r6, #0]
    c132:	462a      	mov	r2, r5
    c134:	4621      	mov	r1, r4
    c136:	4630      	mov	r0, r6
    c138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    c13a:	3401      	adds	r4, #1
    c13c:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    c140:	4798      	blx	r3
    c142:	2800      	cmp	r0, #0
    c144:	d1f2      	bne.n	c12c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    c146:	2000      	movs	r0, #0
    c148:	e7e7      	b.n	c11a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    c14a:	4806      	ldr	r0, [pc, #24]	; (c164 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    c14c:	f7ff feda 	bl	bf04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c150:	2800      	cmp	r0, #0
    c152:	d1e3      	bne.n	c11c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    c154:	4904      	ldr	r1, [pc, #16]	; (c168 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    c156:	240e      	movs	r4, #14
  m_errorLine = line;
    c158:	4b04      	ldr	r3, [pc, #16]	; (c16c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    c15a:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    c15e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c160:	601a      	str	r2, [r3, #0]
}
    c162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c164:	193a0027 	.word	0x193a0027
    c168:	20009004 	.word	0x20009004
    c16c:	20033c14 	.word	0x20033c14

0000c170 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    c170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    c174:	2500      	movs	r5, #0
  m_initDone = false;
    c176:	f8df 92c0 	ldr.w	r9, [pc, #704]	; c438 <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    c17a:	4c9b      	ldr	r4, [pc, #620]	; (c3e8 <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    c17c:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    c17e:	f8df 82bc 	ldr.w	r8, [pc, #700]	; c43c <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    c182:	4e9a      	ldr	r6, [pc, #616]	; (c3ec <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    c184:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    c186:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    c188:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    c18c:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    c18e:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    c192:	7035      	strb	r5, [r6, #0]
  initSDHC();
    c194:	f7ff fad2 	bl	b73c <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    c198:	4629      	mov	r1, r5
    c19a:	4628      	mov	r0, r5
    c19c:	f7ff fc00 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c1a0:	b950      	cbnz	r0, c1b8 <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    c1a2:	2101      	movs	r1, #1
  m_errorLine = line;
    c1a4:	4b92      	ldr	r3, [pc, #584]	; (c3f0 <SdioCard::begin(SdioConfig)+0x280>)
    c1a6:	f240 228e 	movw	r2, #654	; 0x28e
    c1aa:	4605      	mov	r5, r0
  m_errorCode = code;
    c1ac:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c1ae:	601a      	str	r2, [r3, #0]
}
    c1b0:	4628      	mov	r0, r5
    c1b2:	b011      	add	sp, #68	; 0x44
    c1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1b8:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    c1ba:	4f8e      	ldr	r7, [pc, #568]	; (c3f4 <SdioCard::begin(SdioConfig)+0x284>)
    c1bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    c1c0:	4638      	mov	r0, r7
    c1c2:	f7ff fbed 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c1c6:	2800      	cmp	r0, #0
    c1c8:	d14e      	bne.n	c268 <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    c1ca:	3d01      	subs	r5, #1
    c1cc:	d1f6      	bne.n	c1bc <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    c1ce:	7833      	ldrb	r3, [r6, #0]
    c1d0:	2b00      	cmp	r3, #0
    c1d2:	d03d      	beq.n	c250 <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    c1d4:	f8df b268 	ldr.w	fp, [pc, #616]	; c440 <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    c1d8:	f001 fab0 	bl	d73c <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c1dc:	4e86      	ldr	r6, [pc, #536]	; (c3f8 <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    c1de:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c1e0:	f8df a260 	ldr.w	sl, [pc, #608]	; c444 <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    c1e4:	4f85      	ldr	r7, [pc, #532]	; (c3fc <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c1e6:	2100      	movs	r1, #0
    c1e8:	4630      	mov	r0, r6
    c1ea:	f7ff fbd9 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c1ee:	b950      	cbnz	r0, c206 <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    c1f0:	2500      	movs	r5, #0
  m_errorCode = code;
    c1f2:	2117      	movs	r1, #23
  m_errorLine = line;
    c1f4:	4b7e      	ldr	r3, [pc, #504]	; (c3f0 <SdioCard::begin(SdioConfig)+0x280>)
    c1f6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    c1fa:	4628      	mov	r0, r5
  m_errorCode = code;
    c1fc:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c1fe:	601a      	str	r2, [r3, #0]
}
    c200:	b011      	add	sp, #68	; 0x44
    c202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c206:	4659      	mov	r1, fp
    c208:	4650      	mov	r0, sl
    c20a:	f7ff fbc9 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c20e:	2800      	cmp	r0, #0
    c210:	d0ee      	beq.n	c1f0 <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    c212:	f001 fa93 	bl	d73c <micros>
    c216:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    c218:	4b79      	ldr	r3, [pc, #484]	; (c400 <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    c21a:	42b8      	cmp	r0, r7
    c21c:	d8e8      	bhi.n	c1f0 <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    c21e:	691a      	ldr	r2, [r3, #16]
    c220:	2a00      	cmp	r2, #0
    c222:	dae0      	bge.n	c1e6 <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    c224:	6919      	ldr	r1, [r3, #16]
    c226:	4a77      	ldr	r2, [pc, #476]	; (c404 <SdioCard::begin(SdioConfig)+0x294>)
    c228:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    c22a:	691b      	ldr	r3, [r3, #16]
    c22c:	005a      	lsls	r2, r3, #1
    c22e:	d502      	bpl.n	c236 <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    c230:	2301      	movs	r3, #1
    c232:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    c236:	2100      	movs	r1, #0
    c238:	4873      	ldr	r0, [pc, #460]	; (c408 <SdioCard::begin(SdioConfig)+0x298>)
    c23a:	f7ff fbb1 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c23e:	4605      	mov	r5, r0
    c240:	bb10      	cbnz	r0, c288 <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    c242:	2102      	movs	r1, #2
  m_errorLine = line;
    c244:	4b6a      	ldr	r3, [pc, #424]	; (c3f0 <SdioCard::begin(SdioConfig)+0x280>)
    c246:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    c24a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c24c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    c24e:	e7af      	b.n	c1b0 <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    c250:	f7ff fa74 	bl	b73c <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    c254:	4629      	mov	r1, r5
    c256:	4628      	mov	r0, r5
    c258:	f7ff fba2 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    c25c:	7833      	ldrb	r3, [r6, #0]
    c25e:	2b00      	cmp	r3, #0
    c260:	d1b8      	bne.n	c1d4 <SdioCard::begin(SdioConfig)+0x64>
    c262:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    c266:	e7b7      	b.n	c1d8 <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    c268:	4b65      	ldr	r3, [pc, #404]	; (c400 <SdioCard::begin(SdioConfig)+0x290>)
    c26a:	691b      	ldr	r3, [r3, #16]
    c26c:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    c270:	d007      	beq.n	c282 <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    c272:	2106      	movs	r1, #6
  m_errorLine = line;
    c274:	4b5e      	ldr	r3, [pc, #376]	; (c3f0 <SdioCard::begin(SdioConfig)+0x280>)
    c276:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    c27a:	2500      	movs	r5, #0
  m_errorCode = code;
    c27c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c27e:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    c280:	e796      	b.n	c1b0 <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    c282:	2301      	movs	r3, #1
    c284:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    c286:	e7a5      	b.n	c1d4 <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    c288:	2100      	movs	r1, #0
    c28a:	4860      	ldr	r0, [pc, #384]	; (c40c <SdioCard::begin(SdioConfig)+0x29c>)
    c28c:	f7ff fb88 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c290:	4605      	mov	r5, r0
    c292:	b930      	cbnz	r0, c2a2 <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    c294:	2103      	movs	r1, #3
  m_errorLine = line;
    c296:	4b56      	ldr	r3, [pc, #344]	; (c3f0 <SdioCard::begin(SdioConfig)+0x280>)
    c298:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    c29c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c29e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    c2a0:	e786      	b.n	c1b0 <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    c2a2:	4e57      	ldr	r6, [pc, #348]	; (c400 <SdioCard::begin(SdioConfig)+0x290>)
    c2a4:	4b5a      	ldr	r3, [pc, #360]	; (c410 <SdioCard::begin(SdioConfig)+0x2a0>)
    c2a6:	6932      	ldr	r2, [r6, #16]
    c2a8:	4f5a      	ldr	r7, [pc, #360]	; (c414 <SdioCard::begin(SdioConfig)+0x2a4>)
    c2aa:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    c2ac:	495a      	ldr	r1, [pc, #360]	; (c418 <SdioCard::begin(SdioConfig)+0x2a8>)
    c2ae:	485b      	ldr	r0, [pc, #364]	; (c41c <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    c2b0:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    c2b2:	f7ff fbc1 	bl	ba38 <readReg16(unsigned long, void*)>
    c2b6:	4605      	mov	r5, r0
    c2b8:	b930      	cbnz	r0, c2c8 <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    c2ba:	2107      	movs	r1, #7
  m_errorLine = line;
    c2bc:	4b4c      	ldr	r3, [pc, #304]	; (c3f0 <SdioCard::begin(SdioConfig)+0x280>)
    c2be:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    c2c2:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c2c4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    c2c6:	e773      	b.n	c1b0 <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    c2c8:	4955      	ldr	r1, [pc, #340]	; (c420 <SdioCard::begin(SdioConfig)+0x2b0>)
    c2ca:	4856      	ldr	r0, [pc, #344]	; (c424 <SdioCard::begin(SdioConfig)+0x2b4>)
    c2cc:	f7ff fbb4 	bl	ba38 <readReg16(unsigned long, void*)>
    c2d0:	4605      	mov	r5, r0
    c2d2:	b930      	cbnz	r0, c2e2 <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    c2d4:	2108      	movs	r1, #8
  m_errorLine = line;
    c2d6:	4b46      	ldr	r3, [pc, #280]	; (c3f0 <SdioCard::begin(SdioConfig)+0x280>)
    c2d8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    c2dc:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c2de:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    c2e0:	e766      	b.n	c1b0 <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    c2e2:	6839      	ldr	r1, [r7, #0]
    c2e4:	4850      	ldr	r0, [pc, #320]	; (c428 <SdioCard::begin(SdioConfig)+0x2b8>)
    c2e6:	f7ff fb5b 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c2ea:	4605      	mov	r5, r0
    c2ec:	b930      	cbnz	r0, c2fc <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    c2ee:	2105      	movs	r1, #5
  m_errorLine = line;
    c2f0:	4b3f      	ldr	r3, [pc, #252]	; (c3f0 <SdioCard::begin(SdioConfig)+0x280>)
    c2f2:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    c2f6:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c2f8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    c2fa:	e759      	b.n	c1b0 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c2fc:	6839      	ldr	r1, [r7, #0]
    c2fe:	483e      	ldr	r0, [pc, #248]	; (c3f8 <SdioCard::begin(SdioConfig)+0x288>)
    c300:	f7ff fb4e 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c304:	b938      	cbnz	r0, c316 <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    c306:	2114      	movs	r1, #20
  m_errorLine = line;
    c308:	4b39      	ldr	r3, [pc, #228]	; (c3f0 <SdioCard::begin(SdioConfig)+0x280>)
    c30a:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    c30e:	2500      	movs	r5, #0
  m_errorCode = code;
    c310:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c312:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    c314:	e74c      	b.n	c1b0 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c316:	2102      	movs	r1, #2
    c318:	4844      	ldr	r0, [pc, #272]	; (c42c <SdioCard::begin(SdioConfig)+0x2bc>)
    c31a:	f7ff fb41 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c31e:	4605      	mov	r5, r0
    c320:	2800      	cmp	r0, #0
    c322:	d0f0      	beq.n	c306 <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    c324:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    c326:	4669      	mov	r1, sp
    c328:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    c32c:	f023 0306 	bic.w	r3, r3, #6
    c330:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    c332:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    c334:	f043 0302 	orr.w	r3, r3, #2
    c338:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    c33a:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    c33e:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    c340:	f7ff fcd4 	bl	bcec <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    c344:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    c348:	079b      	lsls	r3, r3, #30
    c34a:	d543      	bpl.n	c3d4 <SdioCard::begin(SdioConfig)+0x264>
    c34c:	2800      	cmp	r0, #0
    c34e:	d041      	beq.n	c3d4 <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    c350:	4e27      	ldr	r6, [pc, #156]	; (c3f0 <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    c352:	4669      	mov	r1, sp
    c354:	4836      	ldr	r0, [pc, #216]	; (c430 <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    c356:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    c35a:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    c35c:	f7ff fcc6 	bl	bcec <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    c360:	f89d 3010 	ldrb.w	r3, [sp, #16]
    c364:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    c368:	2b01      	cmp	r3, #1
    c36a:	d136      	bne.n	c3da <SdioCard::begin(SdioConfig)+0x26a>
    c36c:	b3a8      	cbz	r0, c3da <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    c36e:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c372:	4c30      	ldr	r4, [pc, #192]	; (c434 <SdioCard::begin(SdioConfig)+0x2c4>)
    c374:	2305      	movs	r3, #5
    c376:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    c37a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    c37e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    c382:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    c386:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    c38a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    c38e:	f7ff f8eb 	bl	b568 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c392:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    c394:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c398:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    c39c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    c3a0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    c3a4:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    c3a8:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    c3ac:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    c3b0:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    c3b4:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    c3b8:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    c3bc:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    c3c0:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    c3c4:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    c3c6:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    c3ca:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    c3ce:	f889 3000 	strb.w	r3, [r9]
  return true;
    c3d2:	e6ed      	b.n	c1b0 <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    c3d4:	f246 10a8 	movw	r0, #25000	; 0x61a8
    c3d8:	e7cb      	b.n	c372 <SdioCard::begin(SdioConfig)+0x202>
    c3da:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    c3de:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    c3e2:	6037      	str	r7, [r6, #0]
    c3e4:	e7c5      	b.n	c372 <SdioCard::begin(SdioConfig)+0x202>
    c3e6:	bf00      	nop
    c3e8:	20009004 	.word	0x20009004
    c3ec:	20035461 	.word	0x20035461
    c3f0:	20033c14 	.word	0x20033c14
    c3f4:	081a0000 	.word	0x081a0000
    c3f8:	371a0000 	.word	0x371a0000
    c3fc:	000f4240 	.word	0x000f4240
    c400:	402c0000 	.word	0x402c0000
    c404:	20033e54 	.word	0x20033e54
    c408:	02090000 	.word	0x02090000
    c40c:	031a0000 	.word	0x031a0000
    c410:	ffff0000 	.word	0xffff0000
    c414:	20033e58 	.word	0x20033e58
    c418:	20033e44 	.word	0x20033e44
    c41c:	09090000 	.word	0x09090000
    c420:	20033e34 	.word	0x20033e34
    c424:	0a090000 	.word	0x0a090000
    c428:	071b0000 	.word	0x071b0000
    c42c:	061a0000 	.word	0x061a0000
    c430:	80fffff1 	.word	0x80fffff1
    c434:	401f8000 	.word	0x401f8000
    c438:	20035460 	.word	0x20035460
    c43c:	20035462 	.word	0x20035462
    c440:	40300000 	.word	0x40300000
    c444:	29020000 	.word	0x29020000

0000c448 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    c448:	4b37      	ldr	r3, [pc, #220]	; (c528 <SdioCard::readData(unsigned char*)+0xe0>)
    c44a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c44c:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    c44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c452:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    c454:	d40d      	bmi.n	c472 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c458:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    c45c:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    c45e:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    c460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c462:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c466:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    c468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c46a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    c46e:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    c470:	b662      	cpsie	i
  uint32_t m = micros();
    c472:	f001 f963 	bl	d73c <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    c476:	4e2c      	ldr	r6, [pc, #176]	; (c528 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c478:	f8df 80c4 	ldr.w	r8, [pc, #196]	; c540 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    c47c:	4605      	mov	r5, r0
  while (fcn()) {
    c47e:	e004      	b.n	c48a <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c480:	f001 f95c 	bl	d73c <micros>
    c484:	1b43      	subs	r3, r0, r5
    c486:	4543      	cmp	r3, r8
    c488:	d837      	bhi.n	c4fa <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    c48a:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    c48c:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    c490:	d0f6      	beq.n	c480 <SdioCard::readData(unsigned char*)+0x38>
    c492:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    c496:	4824      	ldr	r0, [pc, #144]	; (c528 <SdioCard::readData(unsigned char*)+0xe0>)
    c498:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    c49c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c49e:	051b      	lsls	r3, r3, #20
    c4a0:	d5fc      	bpl.n	c49c <SdioCard::readData(unsigned char*)+0x54>
    c4a2:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    c4a6:	6a02      	ldr	r2, [r0, #32]
    c4a8:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    c4ac:	459c      	cmp	ip, r3
    c4ae:	d1fa      	bne.n	c4a6 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    c4b0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    c4b4:	4567      	cmp	r7, ip
    c4b6:	d1f1      	bne.n	c49c <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    c4b8:	f001 f940 	bl	d73c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    c4bc:	4f1a      	ldr	r7, [pc, #104]	; (c528 <SdioCard::readData(unsigned char*)+0xe0>)
    c4be:	4d1b      	ldr	r5, [pc, #108]	; (c52c <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    c4c0:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c4c2:	f8df 807c 	ldr.w	r8, [pc, #124]	; c540 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    c4c6:	e004      	b.n	c4d2 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c4c8:	f001 f938 	bl	d73c <micros>
    c4cc:	1b83      	subs	r3, r0, r6
    c4ce:	4543      	cmp	r3, r8
    c4d0:	d81d      	bhi.n	c50e <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    c4d2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    c4d4:	402c      	ands	r4, r5
    c4d6:	d0f7      	beq.n	c4c8 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c4da:	4a15      	ldr	r2, [pc, #84]	; (c530 <SdioCard::readData(unsigned char*)+0xe8>)
    c4dc:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    c4de:	6813      	ldr	r3, [r2, #0]
    c4e0:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c4e2:	6813      	ldr	r3, [r2, #0]
    c4e4:	f013 0302 	ands.w	r3, r3, #2
    c4e8:	d01b      	beq.n	c522 <SdioCard::readData(unsigned char*)+0xda>
    c4ea:	6812      	ldr	r2, [r2, #0]
    c4ec:	4b11      	ldr	r3, [pc, #68]	; (c534 <SdioCard::readData(unsigned char*)+0xec>)
    c4ee:	421a      	tst	r2, r3
    c4f0:	bf0c      	ite	eq
    c4f2:	2001      	moveq	r0, #1
    c4f4:	2000      	movne	r0, #0
}
    c4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    c4fa:	490f      	ldr	r1, [pc, #60]	; (c538 <SdioCard::readData(unsigned char*)+0xf0>)
    c4fc:	251a      	movs	r5, #26
  m_errorLine = line;
    c4fe:	4b0f      	ldr	r3, [pc, #60]	; (c53c <SdioCard::readData(unsigned char*)+0xf4>)
    c500:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    c504:	4620      	mov	r0, r4
  m_errorCode = code;
    c506:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    c508:	601a      	str	r2, [r3, #0]
}
    c50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    c50e:	490a      	ldr	r1, [pc, #40]	; (c538 <SdioCard::readData(unsigned char*)+0xf0>)
    c510:	251d      	movs	r5, #29
  m_errorLine = line;
    c512:	4b0a      	ldr	r3, [pc, #40]	; (c53c <SdioCard::readData(unsigned char*)+0xf4>)
    c514:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    c518:	4620      	mov	r0, r4
  m_errorCode = code;
    c51a:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    c51c:	601a      	str	r2, [r3, #0]
}
    c51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c522:	4618      	mov	r0, r3
}
    c524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c528:	402c0000 	.word	0x402c0000
    c52c:	117f0002 	.word	0x117f0002
    c530:	2003472c 	.word	0x2003472c
    c534:	117f0000 	.word	0x117f0000
    c538:	20009004 	.word	0x20009004
    c53c:	20033c14 	.word	0x20033c14
    c540:	000f4240 	.word	0x000f4240

0000c544 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    c544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    c548:	4b29      	ldr	r3, [pc, #164]	; (c5f0 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    c54a:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    c54c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; c610 <SdioCard::readStart(unsigned long)+0xcc>
    c550:	4e28      	ldr	r6, [pc, #160]	; (c5f4 <SdioCard::readStart(unsigned long)+0xb0>)
    c552:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    c556:	f001 f8f1 	bl	d73c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c55a:	4d27      	ldr	r5, [pc, #156]	; (c5f8 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    c55c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c55e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; c614 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c562:	4f26      	ldr	r7, [pc, #152]	; (c5fc <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    c564:	e006      	b.n	c574 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c566:	f001 f8e9 	bl	d73c <micros>
    c56a:	1b00      	subs	r0, r0, r4
    c56c:	42b8      	cmp	r0, r7
    c56e:	d829      	bhi.n	c5c4 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    c570:	f003 f992 	bl	f898 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c574:	6831      	ldr	r1, [r6, #0]
    c576:	4628      	mov	r0, r5
    c578:	f7ff fa12 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c57c:	2800      	cmp	r0, #0
    c57e:	d0f2      	beq.n	c566 <SdioCard::readStart(unsigned long)+0x22>
    c580:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    c584:	05db      	lsls	r3, r3, #23
    c586:	d5ee      	bpl.n	c566 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    c588:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    c58a:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    c58e:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    c592:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    c596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c59a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c59e:	4b18      	ldr	r3, [pc, #96]	; (c600 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    c5a0:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c5a4:	781b      	ldrb	r3, [r3, #0]
    c5a6:	b1cb      	cbz	r3, c5dc <SdioCard::readStart(unsigned long)+0x98>
    c5a8:	4649      	mov	r1, r9
    c5aa:	4816      	ldr	r0, [pc, #88]	; (c604 <SdioCard::readStart(unsigned long)+0xc0>)
    c5ac:	f7ff f9f8 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c5b0:	b930      	cbnz	r0, c5c0 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    c5b2:	4915      	ldr	r1, [pc, #84]	; (c608 <SdioCard::readStart(unsigned long)+0xc4>)
    c5b4:	240c      	movs	r4, #12
  m_errorLine = line;
    c5b6:	4b15      	ldr	r3, [pc, #84]	; (c60c <SdioCard::readStart(unsigned long)+0xc8>)
    c5b8:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    c5bc:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c5be:	601a      	str	r2, [r3, #0]
}
    c5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    c5c4:	4a10      	ldr	r2, [pc, #64]	; (c608 <SdioCard::readStart(unsigned long)+0xc4>)
    c5c6:	210a      	movs	r1, #10
      m_busyFcn = 0;
    c5c8:	2000      	movs	r0, #0
  m_errorLine = line;
    c5ca:	4b10      	ldr	r3, [pc, #64]	; (c60c <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    c5cc:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    c5ce:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    c5d2:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    c5d6:	601a      	str	r2, [r3, #0]
}
    c5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c5dc:	ea4f 2949 	mov.w	r9, r9, lsl #9
    c5e0:	4808      	ldr	r0, [pc, #32]	; (c604 <SdioCard::readStart(unsigned long)+0xc0>)
    c5e2:	4649      	mov	r1, r9
    c5e4:	f7ff f9dc 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c5e8:	2800      	cmp	r0, #0
    c5ea:	d1e9      	bne.n	c5c0 <SdioCard::readStart(unsigned long)+0x7c>
    c5ec:	e7e1      	b.n	c5b2 <SdioCard::readStart(unsigned long)+0x6e>
    c5ee:	bf00      	nop
    c5f0:	0000bb35 	.word	0x0000bb35
    c5f4:	20033e58 	.word	0x20033e58
    c5f8:	0d1a0000 	.word	0x0d1a0000
    c5fc:	000f4240 	.word	0x000f4240
    c600:	20035462 	.word	0x20035462
    c604:	123a0030 	.word	0x123a0030
    c608:	20009004 	.word	0x20009004
    c60c:	20033c14 	.word	0x20033c14
    c610:	20034728 	.word	0x20034728
    c614:	402c0000 	.word	0x402c0000

0000c618 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    c61c:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c61e:	4c1d      	ldr	r4, [pc, #116]	; (c694 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    c620:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    c622:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c624:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c628:	481b      	ldr	r0, [pc, #108]	; (c698 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c62a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    c62e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c630:	f7ff f9b6 	bl	b9a0 <cardCommand(unsigned long, unsigned long)>
    c634:	b940      	cbnz	r0, c648 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    c636:	4919      	ldr	r1, [pc, #100]	; (c69c <SdioCard::stopTransmission(bool)+0x84>)
    c638:	2409      	movs	r4, #9
  m_errorLine = line;
    c63a:	4b19      	ldr	r3, [pc, #100]	; (c6a0 <SdioCard::stopTransmission(bool)+0x88>)
    c63c:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    c640:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c642:	601a      	str	r2, [r3, #0]
}
    c644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    c648:	2d00      	cmp	r5, #0
    c64a:	d0fb      	beq.n	c644 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    c64c:	4b15      	ldr	r3, [pc, #84]	; (c6a4 <SdioCard::stopTransmission(bool)+0x8c>)
    c64e:	4e16      	ldr	r6, [pc, #88]	; (c6a8 <SdioCard::stopTransmission(bool)+0x90>)
    c650:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    c652:	f001 f873 	bl	d73c <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    c656:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    c658:	4607      	mov	r7, r0
  while (fcn()) {
    c65a:	01da      	lsls	r2, r3, #7
    c65c:	d416      	bmi.n	c68c <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c65e:	f8df 804c 	ldr.w	r8, [pc, #76]	; c6ac <SdioCard::stopTransmission(bool)+0x94>
    c662:	e004      	b.n	c66e <SdioCard::stopTransmission(bool)+0x56>
    yield();
    c664:	f003 f918 	bl	f898 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    c668:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    c66a:	01db      	lsls	r3, r3, #7
    c66c:	d40e      	bmi.n	c68c <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c66e:	f001 f865 	bl	d73c <micros>
    c672:	1bc0      	subs	r0, r0, r7
    c674:	4540      	cmp	r0, r8
    c676:	d9f5      	bls.n	c664 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    c678:	4a08      	ldr	r2, [pc, #32]	; (c69c <SdioCard::stopTransmission(bool)+0x84>)
    c67a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    c67c:	2000      	movs	r0, #0
  m_errorLine = line;
    c67e:	4b08      	ldr	r3, [pc, #32]	; (c6a0 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    c680:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    c682:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    c686:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    c688:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    c68a:	e7db      	b.n	c644 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    c68c:	2300      	movs	r3, #0
  return true;
    c68e:	4628      	mov	r0, r5
  m_busyFcn = 0;
    c690:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    c692:	e7d7      	b.n	c644 <SdioCard::stopTransmission(bool)+0x2c>
    c694:	402c0000 	.word	0x402c0000
    c698:	0cdb0000 	.word	0x0cdb0000
    c69c:	20009004 	.word	0x20009004
    c6a0:	20033c14 	.word	0x20033c14
    c6a4:	0000b549 	.word	0x0000b549
    c6a8:	20034728 	.word	0x20034728
    c6ac:	000f4240 	.word	0x000f4240

0000c6b0 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    c6b0:	4b0a      	ldr	r3, [pc, #40]	; (c6dc <SdioCard::syncDevice()+0x2c>)
    c6b2:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    c6b4:	b510      	push	{r4, lr}
    c6b6:	4604      	mov	r4, r0
  if (!m_transferActive) {
    c6b8:	b91b      	cbnz	r3, c6c2 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    c6ba:	7a63      	ldrb	r3, [r4, #9]
    c6bc:	b943      	cbnz	r3, c6d0 <SdioCard::syncDevice()+0x20>
  return true;
    c6be:	2001      	movs	r0, #1
}
    c6c0:	bd10      	pop	{r4, pc}
    c6c2:	f7ff f8cf 	bl	b864 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    c6c6:	2800      	cmp	r0, #0
    c6c8:	d0fa      	beq.n	c6c0 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    c6ca:	7a63      	ldrb	r3, [r4, #9]
    c6cc:	2b00      	cmp	r3, #0
    c6ce:	d0f6      	beq.n	c6be <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    c6d0:	4620      	mov	r0, r4
    c6d2:	2101      	movs	r1, #1
}
    c6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    c6d8:	f7ff bf9e 	b.w	c618 <SdioCard::stopTransmission(bool)>
    c6dc:	20035463 	.word	0x20035463

0000c6e0 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    c6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6e4:	4604      	mov	r4, r0
    c6e6:	7a00      	ldrb	r0, [r0, #8]
    c6e8:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    c6ec:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    c6ee:	f010 0501 	ands.w	r5, r0, #1
    c6f2:	d013      	beq.n	c71c <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    c6f4:	0793      	lsls	r3, r2, #30
    c6f6:	d03c      	beq.n	c772 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    c6f8:	2301      	movs	r3, #1
    c6fa:	4838      	ldr	r0, [pc, #224]	; (c7dc <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    c6fc:	466a      	mov	r2, sp
    c6fe:	f7ff fc01 	bl	bf04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c702:	2800      	cmp	r0, #0
    c704:	d03a      	beq.n	c77c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    c706:	f44f 7200 	mov.w	r2, #512	; 0x200
    c70a:	4669      	mov	r1, sp
    c70c:	4630      	mov	r0, r6
    c70e:	f001 fac5 	bl	dc9c <memcpy>
}
    c712:	4628      	mov	r0, r5
    c714:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    c71c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; c7ec <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    c720:	460f      	mov	r7, r1
    c722:	f898 3000 	ldrb.w	r3, [r8]
    c726:	2b00      	cmp	r3, #0
    c728:	d135      	bne.n	c796 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    c72a:	7a63      	ldrb	r3, [r4, #9]
    c72c:	2b01      	cmp	r3, #1
    c72e:	d039      	beq.n	c7a4 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    c730:	6822      	ldr	r2, [r4, #0]
    c732:	492b      	ldr	r1, [pc, #172]	; (c7e0 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    c734:	6a12      	ldr	r2, [r2, #32]
    c736:	428a      	cmp	r2, r1
    c738:	d14a      	bne.n	c7d0 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    c73a:	f898 2000 	ldrb.w	r2, [r8]
    c73e:	2a00      	cmp	r2, #0
    c740:	d134      	bne.n	c7ac <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    c742:	2b00      	cmp	r3, #0
    c744:	d139      	bne.n	c7ba <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    c746:	4639      	mov	r1, r7
    c748:	4620      	mov	r0, r4
    c74a:	f7ff fefb 	bl	c544 <SdioCard::readStart(unsigned long)>
    c74e:	b1e8      	cbz	r0, c78c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    c750:	2301      	movs	r3, #1
      m_curSector = sector;
    c752:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    c754:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    c756:	4631      	mov	r1, r6
    c758:	4620      	mov	r0, r4
    c75a:	f7ff fe75 	bl	c448 <SdioCard::readData(unsigned char*)>
    c75e:	b1a8      	cbz	r0, c78c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    c760:	6863      	ldr	r3, [r4, #4]
  return true;
    c762:	4605      	mov	r5, r0
    m_curSector++;
    c764:	3301      	adds	r3, #1
}
    c766:	4628      	mov	r0, r5
    m_curSector++;
    c768:	6063      	str	r3, [r4, #4]
}
    c76a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    c772:	2301      	movs	r3, #1
    c774:	4819      	ldr	r0, [pc, #100]	; (c7dc <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    c776:	f7ff fbc5 	bl	bf04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c77a:	b938      	cbnz	r0, c78c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    c77c:	4919      	ldr	r1, [pc, #100]	; (c7e4 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    c77e:	200b      	movs	r0, #11
  m_errorLine = line;
    c780:	4b19      	ldr	r3, [pc, #100]	; (c7e8 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    c782:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    c786:	2500      	movs	r5, #0
  m_errorCode = code;
    c788:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c78a:	601a      	str	r2, [r3, #0]
}
    c78c:	4628      	mov	r0, r5
    c78e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c796:	f7ff f865 	bl	b864 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    c79a:	2800      	cmp	r0, #0
    c79c:	d0f6      	beq.n	c78c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    c79e:	7a63      	ldrb	r3, [r4, #9]
    c7a0:	2b01      	cmp	r3, #1
    c7a2:	d1c5      	bne.n	c730 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    c7a4:	6862      	ldr	r2, [r4, #4]
    c7a6:	42ba      	cmp	r2, r7
    c7a8:	d1c2      	bne.n	c730 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    c7aa:	e7d4      	b.n	c756 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    c7ac:	f7ff f85a 	bl	b864 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    c7b0:	2800      	cmp	r0, #0
    c7b2:	d0eb      	beq.n	c78c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    c7b4:	7a63      	ldrb	r3, [r4, #9]
    c7b6:	2b00      	cmp	r3, #0
    c7b8:	d0c5      	beq.n	c746 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    c7ba:	2101      	movs	r1, #1
    c7bc:	4620      	mov	r0, r4
    c7be:	f7ff ff2b 	bl	c618 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    c7c2:	2800      	cmp	r0, #0
    c7c4:	d1bf      	bne.n	c746 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    c7c6:	4628      	mov	r0, r5
    c7c8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    c7d0:	4620      	mov	r0, r4
    c7d2:	4790      	blx	r2
    c7d4:	2800      	cmp	r0, #0
    c7d6:	d0f6      	beq.n	c7c6 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    c7d8:	e7b5      	b.n	c746 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    c7da:	bf00      	nop
    c7dc:	113a0011 	.word	0x113a0011
    c7e0:	0000c6b1 	.word	0x0000c6b1
    c7e4:	20009004 	.word	0x20009004
    c7e8:	20033c14 	.word	0x20033c14
    c7ec:	20035463 	.word	0x20035463

0000c7f0 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    c7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7f4:	7a04      	ldrb	r4, [r0, #8]
    c7f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    c7fa:	460f      	mov	r7, r1
    c7fc:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    c7fe:	f014 0401 	ands.w	r4, r4, #1
    c802:	d01d      	beq.n	c840 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    c804:	f012 0f03 	tst.w	r2, #3
    c808:	d006      	beq.n	c818 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    c80a:	4668      	mov	r0, sp
    c80c:	4611      	mov	r1, r2
    c80e:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    c812:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    c814:	f001 fa42 	bl	dc9c <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    c818:	2301      	movs	r3, #1
    c81a:	4642      	mov	r2, r8
    c81c:	4639      	mov	r1, r7
    c81e:	482c      	ldr	r0, [pc, #176]	; (c8d0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    c820:	f7ff fb70 	bl	bf04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c824:	4604      	mov	r4, r0
    c826:	b930      	cbnz	r0, c836 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    c828:	492a      	ldr	r1, [pc, #168]	; (c8d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    c82a:	200d      	movs	r0, #13
  m_errorLine = line;
    c82c:	4b2a      	ldr	r3, [pc, #168]	; (c8d8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    c82e:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    c832:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c834:	601a      	str	r2, [r3, #0]
}
    c836:	4620      	mov	r0, r4
    c838:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    c840:	4d26      	ldr	r5, [pc, #152]	; (c8dc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    c842:	4606      	mov	r6, r0
    c844:	782b      	ldrb	r3, [r5, #0]
    c846:	bb2b      	cbnz	r3, c894 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    c848:	7a73      	ldrb	r3, [r6, #9]
    c84a:	2b02      	cmp	r3, #2
    c84c:	d029      	beq.n	c8a2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    c84e:	6832      	ldr	r2, [r6, #0]
    c850:	4923      	ldr	r1, [pc, #140]	; (c8e0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    c852:	6a12      	ldr	r2, [r2, #32]
    c854:	428a      	cmp	r2, r1
    c856:	d136      	bne.n	c8c6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    c858:	782a      	ldrb	r2, [r5, #0]
    c85a:	bb32      	cbnz	r2, c8aa <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    c85c:	2b00      	cmp	r3, #0
    c85e:	d12b      	bne.n	c8b8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    c860:	6833      	ldr	r3, [r6, #0]
    c862:	4639      	mov	r1, r7
    c864:	4630      	mov	r0, r6
    c866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    c868:	4798      	blx	r3
    c86a:	2800      	cmp	r0, #0
    c86c:	d0e3      	beq.n	c836 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    c86e:	2302      	movs	r3, #2
      m_curSector = sector;
    c870:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    c872:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    c874:	6833      	ldr	r3, [r6, #0]
    c876:	4641      	mov	r1, r8
    c878:	4630      	mov	r0, r6
    c87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    c87c:	4798      	blx	r3
    c87e:	2800      	cmp	r0, #0
    c880:	d0d9      	beq.n	c836 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    c882:	6873      	ldr	r3, [r6, #4]
  return true;
    c884:	4604      	mov	r4, r0
    m_curSector++;
    c886:	3301      	adds	r3, #1
}
    c888:	4620      	mov	r0, r4
    m_curSector++;
    c88a:	6073      	str	r3, [r6, #4]
}
    c88c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c894:	f7fe ffe6 	bl	b864 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    c898:	2800      	cmp	r0, #0
    c89a:	d0cc      	beq.n	c836 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    c89c:	7a73      	ldrb	r3, [r6, #9]
    c89e:	2b02      	cmp	r3, #2
    c8a0:	d1d5      	bne.n	c84e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    c8a2:	6872      	ldr	r2, [r6, #4]
    c8a4:	42ba      	cmp	r2, r7
    c8a6:	d1d2      	bne.n	c84e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    c8a8:	e7e4      	b.n	c874 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    c8aa:	f7fe ffdb 	bl	b864 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    c8ae:	2800      	cmp	r0, #0
    c8b0:	d0c1      	beq.n	c836 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    c8b2:	7a73      	ldrb	r3, [r6, #9]
    c8b4:	2b00      	cmp	r3, #0
    c8b6:	d0d3      	beq.n	c860 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    c8b8:	2101      	movs	r1, #1
    c8ba:	4630      	mov	r0, r6
    c8bc:	f7ff feac 	bl	c618 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    c8c0:	2800      	cmp	r0, #0
    c8c2:	d0b8      	beq.n	c836 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    c8c4:	e7cc      	b.n	c860 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    c8c6:	4630      	mov	r0, r6
    c8c8:	4790      	blx	r2
    c8ca:	2800      	cmp	r0, #0
    c8cc:	d0b3      	beq.n	c836 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    c8ce:	e7c7      	b.n	c860 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    c8d0:	183a0001 	.word	0x183a0001
    c8d4:	20009004 	.word	0x20009004
    c8d8:	20033c14 	.word	0x20033c14
    c8dc:	20035463 	.word	0x20035463
    c8e0:	0000c6b1 	.word	0x0000c6b1

0000c8e4 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    c8e4:	f000 bf54 	b.w	d790 <digitalWrite>

0000c8e8 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    c8e8:	b430      	push	{r4, r5}
    c8ea:	b082      	sub	sp, #8
    c8ec:	460c      	mov	r4, r1
    c8ee:	ab02      	add	r3, sp, #8
    c8f0:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    c8f4:	7cc3      	ldrb	r3, [r0, #19]
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d030      	beq.n	c95c <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    c8fa:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    c8fc:	7cc3      	ldrb	r3, [r0, #19]
    c8fe:	07da      	lsls	r2, r3, #31
    c900:	d508      	bpl.n	c914 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    c902:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c906:	6945      	ldr	r5, [r0, #20]
    c908:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    c90c:	402a      	ands	r2, r5
    c90e:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    c910:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    c914:	079d      	lsls	r5, r3, #30
    c916:	d508      	bpl.n	c92a <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    c918:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c91c:	6985      	ldr	r5, [r0, #24]
    c91e:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    c922:	402a      	ands	r2, r5
    c924:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    c926:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    c92a:	0759      	lsls	r1, r3, #29
    c92c:	d508      	bpl.n	c940 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    c92e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c932:	69c5      	ldr	r5, [r0, #28]
    c934:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    c938:	402a      	ands	r2, r5
    c93a:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    c93c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    c940:	071a      	lsls	r2, r3, #28
    c942:	d508      	bpl.n	c956 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    c944:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c948:	6a05      	ldr	r5, [r0, #32]
    c94a:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    c94e:	402a      	ands	r2, r5
    c950:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    c952:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    c956:	06db      	lsls	r3, r3, #27
    c958:	d42f      	bmi.n	c9ba <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    c95a:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    c95c:	6883      	ldr	r3, [r0, #8]
    c95e:	429c      	cmp	r4, r3
    c960:	d035      	beq.n	c9ce <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    c962:	4b22      	ldr	r3, [pc, #136]	; (c9ec <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    c964:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    c966:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    c968:	4a21      	ldr	r2, [pc, #132]	; (c9f0 <SPIClass::beginTransaction(SPISettings)+0x108>)
    c96a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    c96e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    c972:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    c976:	3301      	adds	r3, #1
    c978:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    c97c:	b1cc      	cbz	r4, c9b2 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    c97e:	4294      	cmp	r4, r2
    c980:	d827      	bhi.n	c9d2 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    c982:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    c986:	fbb2 f2f3 	udiv	r2, r2, r3
    c98a:	4294      	cmp	r4, r2
    c98c:	d32c      	bcc.n	c9e8 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    c98e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    c992:	d320      	bcc.n	c9d6 <SPIClass::beginTransaction(SPISettings)+0xee>
    c994:	4c17      	ldr	r4, [pc, #92]	; (c9f4 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    c996:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c998:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    c99a:	2203      	movs	r2, #3
		port().CR = 0;
    c99c:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    c99e:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    c9a0:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    c9a2:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    c9a4:	2201      	movs	r2, #1
		port().CCR = _ccr;
    c9a6:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    c9a8:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    c9aa:	611a      	str	r2, [r3, #16]
	}
    c9ac:	b002      	add	sp, #8
    c9ae:	bc30      	pop	{r4, r5}
    c9b0:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    c9b2:	4299      	cmp	r1, r3
    c9b4:	d3ef      	bcc.n	c996 <SPIClass::beginTransaction(SPISettings)+0xae>
    c9b6:	1c53      	adds	r3, r2, #1
    c9b8:	e7e9      	b.n	c98e <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    c9ba:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c9be:	6a41      	ldr	r1, [r0, #36]	; 0x24
    c9c0:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    c9c4:	400b      	ands	r3, r1
    c9c6:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    c9c8:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    c9cc:	e7c5      	b.n	c95a <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    c9ce:	68c4      	ldr	r4, [r0, #12]
    c9d0:	e7e2      	b.n	c998 <SPIClass::beginTransaction(SPISettings)+0xb0>
    c9d2:	2400      	movs	r4, #0
    c9d4:	e7df      	b.n	c996 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    c9d6:	2b02      	cmp	r3, #2
    c9d8:	d9fb      	bls.n	c9d2 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    c9da:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    c9dc:	085a      	lsrs	r2, r3, #1
    c9de:	0214      	lsls	r4, r2, #8
    c9e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    c9e4:	431c      	orrs	r4, r3
    c9e6:	e7d6      	b.n	c996 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    c9e8:	461a      	mov	r2, r3
    c9ea:	e7e4      	b.n	c9b6 <SPIClass::beginTransaction(SPISettings)+0xce>
    c9ec:	400fc000 	.word	0x400fc000
    c9f0:	20000cac 	.word	0x20000cac
    c9f4:	007f7fff 	.word	0x007f7fff

0000c9f8 <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() {
    c9f8:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    c9fa:	4603      	mov	r3, r0
    c9fc:	f853 0b04 	ldr.w	r0, [r3], #4
    ca00:	e893 0006 	ldmia.w	r3, {r1, r2}
    ca04:	f7ff ff70 	bl	c8e8 <SPIClass::beginTransaction(SPISettings)>
}
    ca08:	bd08      	pop	{r3, pc}
    ca0a:	bf00      	nop

0000ca0c <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    ca0c:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    ca0e:	7cd3      	ldrb	r3, [r2, #19]
    ca10:	b313      	cbz	r3, ca58 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    ca12:	07d8      	lsls	r0, r3, #31
    ca14:	d504      	bpl.n	ca20 <SdSpiArduinoDriver::deactivate()+0x14>
    ca16:	6a90      	ldr	r0, [r2, #40]	; 0x28
    ca18:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ca1c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    ca20:	0799      	lsls	r1, r3, #30
    ca22:	d504      	bpl.n	ca2e <SdSpiArduinoDriver::deactivate()+0x22>
    ca24:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    ca26:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ca2a:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    ca2e:	0758      	lsls	r0, r3, #29
    ca30:	d504      	bpl.n	ca3c <SdSpiArduinoDriver::deactivate()+0x30>
    ca32:	6b10      	ldr	r0, [r2, #48]	; 0x30
    ca34:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ca38:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    ca3c:	0719      	lsls	r1, r3, #28
    ca3e:	d504      	bpl.n	ca4a <SdSpiArduinoDriver::deactivate()+0x3e>
    ca40:	6b50      	ldr	r0, [r2, #52]	; 0x34
    ca42:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ca46:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    ca4a:	06db      	lsls	r3, r3, #27
    ca4c:	d504      	bpl.n	ca58 <SdSpiArduinoDriver::deactivate()+0x4c>
    ca4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
    ca50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ca54:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    ca58:	4770      	bx	lr
    ca5a:	bf00      	nop

0000ca5c <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    ca5c:	6800      	ldr	r0, [r0, #0]
    ca5e:	f000 b9f9 	b.w	ce54 <SPIClass::end()>
    ca62:	bf00      	nop

0000ca64 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    ca64:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    ca66:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    ca68:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    ca6a:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    ca6c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    ca6e:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    ca72:	d0fb      	beq.n	ca6c <SdSpiArduinoDriver::receive()+0x8>
    ca74:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    ca76:	b2c0      	uxtb	r0, r0
    ca78:	4770      	bx	lr
    ca7a:	bf00      	nop

0000ca7c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    ca7c:	b530      	push	{r4, r5, lr}
    ca7e:	460c      	mov	r4, r1
    ca80:	b083      	sub	sp, #12
    ca82:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    ca84:	21ff      	movs	r1, #255	; 0xff
    ca86:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    ca88:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    ca8a:	f005 f995 	bl	11db8 <memset>
		transfer(buf, buf, count);
    ca8e:	6828      	ldr	r0, [r5, #0]
    ca90:	9b01      	ldr	r3, [sp, #4]
    ca92:	4622      	mov	r2, r4
    ca94:	4621      	mov	r1, r4
    ca96:	f000 f9d9 	bl	ce4c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    ca9a:	2000      	movs	r0, #0
    ca9c:	b003      	add	sp, #12
    ca9e:	bd30      	pop	{r4, r5, pc}

0000caa0 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    caa0:	6803      	ldr	r3, [r0, #0]
    caa2:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    caa4:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    caa6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    caa8:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    caac:	d0fb      	beq.n	caa6 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    caae:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    cab0:	4770      	bx	lr
    cab2:	bf00      	nop

0000cab4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    cab4:	1e53      	subs	r3, r2, #1
    cab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    caba:	b530      	push	{r4, r5, lr}
    cabc:	4614      	mov	r4, r2
    cabe:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    cac2:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    cac4:	d311      	bcc.n	caea <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    cac6:	b16a      	cbz	r2, cae4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cac8:	6803      	ldr	r3, [r0, #0]
    caca:	1e48      	subs	r0, r1, #1
    cacc:	6819      	ldr	r1, [r3, #0]
    cace:	1882      	adds	r2, r0, r2
		port().TDR = data;
    cad0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    cad4:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    cad6:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    cad8:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    cadc:	d0fb      	beq.n	cad6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    cade:	4290      	cmp	r0, r2
    cae0:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    cae2:	d1f5      	bne.n	cad0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    cae4:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    cae8:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    caea:	4668      	mov	r0, sp
    caec:	f001 f8d6 	bl	dc9c <memcpy>
		transfer(buf, buf, count);
    caf0:	466a      	mov	r2, sp
    caf2:	4623      	mov	r3, r4
    caf4:	6828      	ldr	r0, [r5, #0]
    caf6:	4611      	mov	r1, r2
    caf8:	f000 f9a8 	bl	ce4c <SPIClass::transfer(void const*, void*, unsigned int)>
}
    cafc:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    cb00:	bd30      	pop	{r4, r5, pc}
    cb02:	bf00      	nop

0000cb04 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    cb04:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    cb06:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    cb08:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    cb0a:	07dc      	lsls	r4, r3, #31
    cb0c:	d51d      	bpl.n	cb4a <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    cb0e:	4604      	mov	r4, r0
    cb10:	6840      	ldr	r0, [r0, #4]
    cb12:	f104 0210 	add.w	r2, r4, #16
    cb16:	6803      	ldr	r3, [r0, #0]
    cb18:	68e1      	ldr	r1, [r4, #12]
    cb1a:	9201      	str	r2, [sp, #4]
    cb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb1e:	4798      	blx	r3
    cb20:	9a01      	ldr	r2, [sp, #4]
    cb22:	4605      	mov	r5, r0
    cb24:	b1a8      	cbz	r0, cb52 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    cb26:	7823      	ldrb	r3, [r4, #0]
    cb28:	0799      	lsls	r1, r3, #30
    cb2a:	d508      	bpl.n	cb3e <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    cb2c:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    cb2e:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    cb32:	4419      	add	r1, r3
    cb34:	6803      	ldr	r3, [r0, #0]
    cb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb38:	4798      	blx	r3
    cb3a:	b150      	cbz	r0, cb52 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    cb3c:	7823      	ldrb	r3, [r4, #0]
    cb3e:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    cb42:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    cb44:	7023      	strb	r3, [r4, #0]
}
    cb46:	b003      	add	sp, #12
    cb48:	bd30      	pop	{r4, r5, pc}
  return true;
    cb4a:	2501      	movs	r5, #1
}
    cb4c:	4628      	mov	r0, r5
    cb4e:	b003      	add	sp, #12
    cb50:	bd30      	pop	{r4, r5, pc}
  return false;
    cb52:	2500      	movs	r5, #0
}
    cb54:	4628      	mov	r0, r5
    cb56:	b003      	add	sp, #12
    cb58:	bd30      	pop	{r4, r5, pc}
    cb5a:	bf00      	nop

0000cb5c <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    cb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    cb5e:	6843      	ldr	r3, [r0, #4]
    cb60:	b30b      	cbz	r3, cba6 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    cb62:	68c3      	ldr	r3, [r0, #12]
    cb64:	4604      	mov	r4, r0
    cb66:	460f      	mov	r7, r1
    cb68:	4615      	mov	r5, r2
    cb6a:	428b      	cmp	r3, r1
    cb6c:	d106      	bne.n	cb7c <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    cb6e:	f810 3b10 	ldrb.w	r3, [r0], #16
    cb72:	f005 0503 	and.w	r5, r5, #3
    cb76:	432b      	orrs	r3, r5
    cb78:	7023      	strb	r3, [r4, #0]
}
    cb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    cb7c:	f7ff ffc2 	bl	cb04 <FsCache::sync()>
    cb80:	b188      	cbz	r0, cba6 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    cb82:	076b      	lsls	r3, r5, #29
    cb84:	d505      	bpl.n	cb92 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    cb86:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    cb8a:	4630      	mov	r0, r6
    m_sector = sector;
    cb8c:	2300      	movs	r3, #0
    cb8e:	60e7      	str	r7, [r4, #12]
    cb90:	e7ef      	b.n	cb72 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    cb92:	6860      	ldr	r0, [r4, #4]
    cb94:	f104 0610 	add.w	r6, r4, #16
    cb98:	4639      	mov	r1, r7
    cb9a:	6803      	ldr	r3, [r0, #0]
    cb9c:	4632      	mov	r2, r6
    cb9e:	691b      	ldr	r3, [r3, #16]
    cba0:	4798      	blx	r3
    cba2:	2800      	cmp	r0, #0
    cba4:	d1f1      	bne.n	cb8a <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    cba6:	2000      	movs	r0, #0
}
    cba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cbaa:	bf00      	nop

0000cbac <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    cbac:	b510      	push	{r4, lr}
    cbae:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    cbb0:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    cbb2:	b082      	sub	sp, #8
  if (ls) {
    cbb4:	b118      	cbz	r0, cbbe <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    cbb6:	2300      	movs	r3, #0
    cbb8:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    cbba:	b002      	add	sp, #8
    cbbc:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    cbbe:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    cbc2:	428b      	cmp	r3, r1
    cbc4:	d2f9      	bcs.n	cbba <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    cbc6:	aa01      	add	r2, sp, #4
    cbc8:	4618      	mov	r0, r3
    cbca:	f000 f867 	bl	cc9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    cbce:	b180      	cbz	r0, cbf2 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    cbd0:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    cbd2:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    cbd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    cbd8:	d201      	bcs.n	cbde <FsName::get16()+0x32>
      rtn = cp;
    cbda:	b298      	uxth	r0, r3
    cbdc:	e7ed      	b.n	cbba <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    cbde:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
    cbe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    cbe4:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    cbe8:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    cbec:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    cbee:	81a3      	strh	r3, [r4, #12]
    cbf0:	e7e3      	b.n	cbba <FsName::get16()+0xe>
  return 0XFFFF;
    cbf2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cbf6:	e7e0      	b.n	cbba <FsName::get16()+0xe>

0000cbf8 <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
    cbf8:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
    cbfa:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
    cbfe:	d805      	bhi.n	cc0c <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    cc00:	b112      	cbz	r2, cc08 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
    cc02:	460a      	mov	r2, r1
    cc04:	f802 0b01 	strb.w	r0, [r2], #1
  }
    cc08:	4610      	mov	r0, r2
    cc0a:	4770      	bx	lr
    } else if (cp < 0X800) {
    cc0c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    cc10:	d20f      	bcs.n	cc32 <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
    cc12:	2a01      	cmp	r2, #1
    cc14:	d940      	bls.n	cc98 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    cc16:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cc1a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    cc1e:	460a      	mov	r2, r1
    cc20:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cc24:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    cc28:	f802 0b02 	strb.w	r0, [r2], #2
  }
    cc2c:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cc2e:	704b      	strb	r3, [r1, #1]
  }
    cc30:	4770      	bx	lr
    } else if (cp < 0X10000) {
    cc32:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    cc36:	d216      	bcs.n	cc66 <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
    cc38:	2a02      	cmp	r2, #2
    cc3a:	d92d      	bls.n	cc98 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cc3c:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cc40:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    cc44:	1cca      	adds	r2, r1, #3
    cc46:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
    cc4a:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    cc4c:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cc50:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cc54:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    cc56:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cc5a:	7048      	strb	r0, [r1, #1]
  }
    cc5c:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    cc5e:	f881 e000 	strb.w	lr, [r1]
  }
    cc62:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
    cc66:	2a03      	cmp	r2, #3
    cc68:	d916      	bls.n	cc98 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    cc6a:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    cc6e:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cc72:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cc76:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    cc7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    cc7e:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cc82:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cc86:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    cc8a:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cc8c:	1d0a      	adds	r2, r1, #4
    cc8e:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    cc90:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cc94:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cc96:	e7b7      	b.n	cc08 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
    cc98:	2200      	movs	r2, #0
    cc9a:	e7b5      	b.n	cc08 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

0000cc9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    cc9c:	4288      	cmp	r0, r1
    cc9e:	d23d      	bcs.n	cd1c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    cca0:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    cca2:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
    cca4:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    cca8:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    ccaa:	2800      	cmp	r0, #0
    ccac:	da2d      	bge.n	cd0a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
    ccae:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    ccb2:	28c0      	cmp	r0, #192	; 0xc0
    ccb4:	d034      	beq.n	cd20 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
    ccb6:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    ccba:	28e0      	cmp	r0, #224	; 0xe0
    ccbc:	d034      	beq.n	cd28 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
    ccbe:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    ccc2:	28f0      	cmp	r0, #240	; 0xf0
    ccc4:	d126      	bne.n	cd14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    ccc6:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    ccca:	2004      	movs	r0, #4
    if ((str + n) > end) {
    cccc:	4418      	add	r0, r3
    ccce:	4288      	cmp	r0, r1
    ccd0:	d820      	bhi.n	cd14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    ccd2:	3301      	adds	r3, #1
      ch = str[i];
    ccd4:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    ccd8:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
    ccdc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    cce0:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    cce4:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    cce8:	d114      	bne.n	cd14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    ccea:	4283      	cmp	r3, r0
    ccec:	d1f2      	bne.n	ccd4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
    ccee:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    ccf2:	4b0f      	ldr	r3, [pc, #60]	; (cd30 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    ccf4:	4299      	cmp	r1, r3
    ccf6:	d80d      	bhi.n	cd14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    ccf8:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    ccfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    cd00:	d308      	bcc.n	cd14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
    cd02:	6014      	str	r4, [r2, #0]
  }
    cd04:	f85d 4b04 	ldr.w	r4, [sp], #4
    cd08:	4770      	bx	lr
      return str + 1;
    cd0a:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    cd0c:	6014      	str	r4, [r2, #0]
  }
    cd0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    cd12:	4770      	bx	lr
      return nullptr;
    cd14:	2000      	movs	r0, #0
  }
    cd16:	f85d 4b04 	ldr.w	r4, [sp], #4
    cd1a:	4770      	bx	lr
      return nullptr;
    cd1c:	2000      	movs	r0, #0
  }
    cd1e:	4770      	bx	lr
      cp = ch & 0X1F;
    cd20:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    cd24:	2002      	movs	r0, #2
    cd26:	e7d1      	b.n	cccc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    cd28:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    cd2c:	2003      	movs	r0, #3
    cd2e:	e7cd      	b.n	cccc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    cd30:	0010ff7f 	.word	0x0010ff7f

0000cd34 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    cd34:	287e      	cmp	r0, #126	; 0x7e
    cd36:	d93e      	bls.n	cdb6 <toUpcase(unsigned short)+0x82>
  size_t right = size;
    cd38:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    cd3c:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    cd3e:	b430      	push	{r4, r5}
    cd40:	4c28      	ldr	r4, [pc, #160]	; (cde4 <toUpcase(unsigned short)+0xb0>)
    cd42:	e004      	b.n	cd4e <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    cd44:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    cd48:	4282      	cmp	r2, r0
    cd4a:	d820      	bhi.n	cd8e <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    cd4c:	460b      	mov	r3, r1
  while (right - left > 1) {
    cd4e:	ebac 0203 	sub.w	r2, ip, r3
    cd52:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    cd54:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    cd58:	d8f4      	bhi.n	cd44 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    cd5a:	b29b      	uxth	r3, r3
    cd5c:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    cd60:	4290      	cmp	r0, r2
    cd62:	d216      	bcs.n	cd92 <toUpcase(unsigned short)+0x5e>
    cd64:	244b      	movs	r4, #75	; 0x4b
    cd66:	2300      	movs	r3, #0
    cd68:	4d1f      	ldr	r5, [pc, #124]	; (cde8 <toUpcase(unsigned short)+0xb4>)
    cd6a:	e004      	b.n	cd76 <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    cd6c:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    cd70:	4282      	cmp	r2, r0
    cd72:	d81e      	bhi.n	cdb2 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    cd74:	460b      	mov	r3, r1
  while (right - left > 1) {
    cd76:	1ae2      	subs	r2, r4, r3
    cd78:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    cd7a:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    cd7e:	d8f5      	bhi.n	cd6c <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    cd80:	b29b      	uxth	r3, r3
    cd82:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    cd86:	4282      	cmp	r2, r0
    cd88:	d01f      	beq.n	cdca <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    cd8a:	bc30      	pop	{r4, r5}
    cd8c:	4770      	bx	lr
    mid = left + (right - left)/2;
    cd8e:	468c      	mov	ip, r1
    cd90:	e7dd      	b.n	cd4e <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    cd92:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    cd96:	1a82      	subs	r2, r0, r2
    cd98:	78e3      	ldrb	r3, [r4, #3]
    cd9a:	429a      	cmp	r2, r3
    cd9c:	dae2      	bge.n	cd64 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    cd9e:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    cda2:	2b01      	cmp	r3, #1
    cda4:	d016      	beq.n	cdd4 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    cda6:	b1d3      	cbz	r3, cdde <toUpcase(unsigned short)+0xaa>
    cda8:	b29b      	uxth	r3, r3
    cdaa:	4403      	add	r3, r0
}
    cdac:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    cdae:	b298      	uxth	r0, r3
}
    cdb0:	4770      	bx	lr
    mid = left + (right - left)/2;
    cdb2:	460c      	mov	r4, r1
    cdb4:	e7df      	b.n	cd76 <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    cdb6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    cdba:	2b19      	cmp	r3, #25
    cdbc:	bf8c      	ite	hi
    cdbe:	2300      	movhi	r3, #0
    cdc0:	2301      	movls	r3, #1
    cdc2:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    cdc6:	b298      	uxth	r0, r3
}
    cdc8:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    cdca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    cdce:	8868      	ldrh	r0, [r5, #2]
}
    cdd0:	bc30      	pop	{r4, r5}
    cdd2:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    cdd4:	f002 0201 	and.w	r2, r2, #1
    cdd8:	1a83      	subs	r3, r0, r2
    cdda:	b298      	uxth	r0, r3
    cddc:	e7d5      	b.n	cd8a <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    cdde:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    cde2:	e7e2      	b.n	cdaa <toUpcase(unsigned short)+0x76>
    cde4:	200009b8 	.word	0x200009b8
    cde8:	20000808 	.word	0x20000808

0000cdec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    cdec:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cdee:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    cdf0:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    cdf4:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    cdf6:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    cdf8:	b1a3      	cbz	r3, ce24 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    cdfa:	b321      	cbz	r1, ce46 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    cdfc:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    ce00:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    ce02:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    ce04:	6f25      	ldr	r5, [r4, #112]	; 0x70
    ce06:	07af      	lsls	r7, r5, #30
    ce08:	d407      	bmi.n	ce1a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    ce0a:	4615      	mov	r5, r2
				count_read--;
    ce0c:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    ce0e:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    ce10:	b11a      	cbz	r2, ce1a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    ce12:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    ce16:	462a      	mov	r2, r5
    ce18:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    ce1a:	6965      	ldr	r5, [r4, #20]
    ce1c:	07ed      	lsls	r5, r5, #31
    ce1e:	d5f1      	bpl.n	ce04 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    ce20:	2b00      	cmp	r3, #0
    ce22:	d1ea      	bne.n	cdfa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    ce24:	b16e      	cbz	r6, ce42 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    ce26:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    ce28:	6f19      	ldr	r1, [r3, #112]	; 0x70
    ce2a:	0789      	lsls	r1, r1, #30
    ce2c:	d4fa      	bmi.n	ce24 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    ce2e:	4611      	mov	r1, r2
			count_read--;
    ce30:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    ce32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    ce34:	2a00      	cmp	r2, #0
    ce36:	d0f5      	beq.n	ce24 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    ce38:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    ce3c:	460a      	mov	r2, r1
	while (count_read) {
    ce3e:	2e00      	cmp	r6, #0
    ce40:	d1f1      	bne.n	ce26 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    ce42:	bcf0      	pop	{r4, r5, r6, r7}
    ce44:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    ce46:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    ce4a:	e7d9      	b.n	ce00 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

0000ce4c <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    ce4c:	b10b      	cbz	r3, ce52 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    ce4e:	f7ff bfcd 	b.w	cdec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    ce52:	4770      	bx	lr

0000ce54 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    ce54:	6843      	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    ce56:	e9d3 1200 	ldrd	r1, r2, [r3]
    ce5a:	6809      	ldr	r1, [r1, #0]
    ce5c:	4211      	tst	r1, r2
    ce5e:	d100      	bne.n	ce62 <SPIClass::end()+0xe>
    ce60:	4770      	bx	lr
void SPIClass::end() {
    ce62:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    ce64:	6802      	ldr	r2, [r0, #0]
    ce66:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    ce68:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    ce6a:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    ce6c:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    ce6e:	7c22      	ldrb	r2, [r4, #16]
    ce70:	4413      	add	r3, r2
    ce72:	7c18      	ldrb	r0, [r3, #16]
    ce74:	f000 fcb6 	bl	d7e4 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    ce78:	7c62      	ldrb	r2, [r4, #17]
    ce7a:	6863      	ldr	r3, [r4, #4]
    ce7c:	2105      	movs	r1, #5
    ce7e:	4413      	add	r3, r2
    ce80:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    ce84:	f000 fcae 	bl	d7e4 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    ce88:	6863      	ldr	r3, [r4, #4]
    ce8a:	7ca2      	ldrb	r2, [r4, #18]
    ce8c:	2105      	movs	r1, #5
    ce8e:	4413      	add	r3, r2
	}
}
    ce90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    ce94:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    ce98:	f000 bca4 	b.w	d7e4 <pinMode>

0000ce9c <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    ce9c:	b430      	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    ce9e:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    cea0:	b921      	cbnz	r1, ceac <DMAChannel::begin(bool)+0x10>
    cea2:	6803      	ldr	r3, [r0, #0]
    cea4:	b113      	cbz	r3, ceac <DMAChannel::begin(bool)+0x10>
    cea6:	7902      	ldrb	r2, [r0, #4]
    cea8:	2a0f      	cmp	r2, #15
    ceaa:	d93b      	bls.n	cf24 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    ceac:	4c24      	ldr	r4, [pc, #144]	; (cf40 <DMAChannel::begin(bool)+0xa4>)
    ceae:	8821      	ldrh	r1, [r4, #0]
{
    ceb0:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    ceb2:	fa41 f203 	asr.w	r2, r1, r3
    ceb6:	f012 0201 	ands.w	r2, r2, #1
    ceba:	d008      	beq.n	cece <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    cebc:	3301      	adds	r3, #1
    cebe:	2b10      	cmp	r3, #16
    cec0:	d1f7      	bne.n	ceb2 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    cec2:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    cec4:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    cec6:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    cec8:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    ceca:	bc30      	pop	{r4, r5}
    cecc:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    cece:	f04f 0c01 	mov.w	ip, #1
    ced2:	fa0c fc03 	lsl.w	ip, ip, r3
    ced6:	ea41 010c 	orr.w	r1, r1, ip
    ceda:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    cedc:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    cede:	4919      	ldr	r1, [pc, #100]	; (cf44 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    cee0:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    cee4:	4c18      	ldr	r4, [pc, #96]	; (cf48 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    cee6:	4419      	add	r1, r3
	channel = ch;
    cee8:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    ceec:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    ceee:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    cef0:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    cef4:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    cef6:	f240 4482 	movw	r4, #1154	; 0x482
    cefa:	4914      	ldr	r1, [pc, #80]	; (cf4c <DMAChannel::begin(bool)+0xb0>)
    cefc:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    cefe:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    cf02:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    cf06:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    cf0a:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    cf0e:	6003      	str	r3, [r0, #0]
}
    cf10:	bc30      	pop	{r4, r5}
	*p++ = 0;
    cf12:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    cf16:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    cf1a:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    cf1e:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    cf22:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    cf24:	4c06      	ldr	r4, [pc, #24]	; (cf40 <DMAChannel::begin(bool)+0xa4>)
    cf26:	8821      	ldrh	r1, [r4, #0]
    cf28:	fa41 f502 	asr.w	r5, r1, r2
    cf2c:	07ed      	lsls	r5, r5, #31
    cf2e:	d5bf      	bpl.n	ceb0 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    cf30:	4d04      	ldr	r5, [pc, #16]	; (cf44 <DMAChannel::begin(bool)+0xa8>)
    cf32:	4415      	add	r5, r2
    cf34:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    cf38:	d1ba      	bne.n	ceb0 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    cf3a:	b662      	cpsie	i
		return;
    cf3c:	e7c5      	b.n	ceca <DMAChannel::begin(bool)+0x2e>
    cf3e:	bf00      	nop
    cf40:	2003544a 	.word	0x2003544a
    cf44:	02007480 	.word	0x02007480
    cf48:	400fc000 	.word	0x400fc000
    cf4c:	400e8000 	.word	0x400e8000

0000cf50 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    cf50:	7903      	ldrb	r3, [r0, #4]
    cf52:	2b0f      	cmp	r3, #15
    cf54:	d811      	bhi.n	cf7a <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    cf56:	4a09      	ldr	r2, [pc, #36]	; (cf7c <DMAChannel::release()+0x2c>)
    cf58:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    cf5a:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    cf5c:	4908      	ldr	r1, [pc, #32]	; (cf80 <DMAChannel::release()+0x30>)
    cf5e:	2201      	movs	r2, #1
    cf60:	f890 c004 	ldrb.w	ip, [r0, #4]
    cf64:	880b      	ldrh	r3, [r1, #0]
    cf66:	fa02 f20c 	lsl.w	r2, r2, ip
    cf6a:	ea23 0302 	bic.w	r3, r3, r2
    cf6e:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    cf70:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    cf72:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    cf74:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    cf76:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    cf78:	6003      	str	r3, [r0, #0]
}
    cf7a:	4770      	bx	lr
    cf7c:	400e8000 	.word	0x400e8000
    cf80:	2003544a 	.word	0x2003544a

0000cf84 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    cf84:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cf86:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    cf8a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    cf8c:	4c0c      	ldr	r4, [pc, #48]	; (cfc0 <EventResponder::runFromInterrupt()+0x3c>)
    cf8e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    cf90:	b180      	cbz	r0, cfb4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    cf92:	4e0c      	ldr	r6, [pc, #48]	; (cfc4 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    cf94:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    cf96:	6943      	ldr	r3, [r0, #20]
    cf98:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    cf9a:	b173      	cbz	r3, cfba <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    cf9c:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    cf9e:	b902      	cbnz	r2, cfa2 <EventResponder::runFromInterrupt()+0x1e>
    cfa0:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    cfa2:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    cfa4:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    cfa6:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cfa8:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    cfac:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    cfae:	6820      	ldr	r0, [r4, #0]
		if (first) {
    cfb0:	2800      	cmp	r0, #0
    cfb2:	d1f0      	bne.n	cf96 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    cfb4:	b902      	cbnz	r2, cfb8 <EventResponder::runFromInterrupt()+0x34>
    cfb6:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    cfb8:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    cfba:	6033      	str	r3, [r6, #0]
    cfbc:	e7ef      	b.n	cf9e <EventResponder::runFromInterrupt()+0x1a>
    cfbe:	bf00      	nop
    cfc0:	20034740 	.word	0x20034740
    cfc4:	2003473c 	.word	0x2003473c

0000cfc8 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    cfc8:	f7ff bfdc 	b.w	cf84 <EventResponder::runFromInterrupt()>

0000cfcc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    cfcc:	4904      	ldr	r1, [pc, #16]	; (cfe0 <systick_isr+0x14>)
	systick_millis_count++;
    cfce:	4a05      	ldr	r2, [pc, #20]	; (cfe4 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    cfd0:	6849      	ldr	r1, [r1, #4]
    cfd2:	4b05      	ldr	r3, [pc, #20]	; (cfe8 <systick_isr+0x1c>)
    cfd4:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    cfd6:	6813      	ldr	r3, [r2, #0]
    cfd8:	3301      	adds	r3, #1
    cfda:	6013      	str	r3, [r2, #0]
}
    cfdc:	4770      	bx	lr
    cfde:	bf00      	nop
    cfe0:	e0001000 	.word	0xe0001000
    cfe4:	20035424 	.word	0x20035424
    cfe8:	20035420 	.word	0x20035420

0000cfec <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cfec:	4608      	mov	r0, r1
    cfee:	f002 bbbf 	b.w	f770 <usb_serial_putchar>
    cff2:	bf00      	nop

0000cff4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    cff4:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    cff6:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    cff8:	bf08      	it	eq
    cffa:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    cffc:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    cffe:	b391      	cbz	r1, d066 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    d000:	f04f 0e21 	mov.w	lr, #33	; 0x21
    d004:	e001      	b.n	d00a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    d006:	fa5f fe86 	uxtb.w	lr, r6
    d00a:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    d00e:	fbb1 f5f2 	udiv	r5, r1, r2
    d012:	fb02 1415 	mls	r4, r2, r5, r1
    d016:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d01a:	2c09      	cmp	r4, #9
    d01c:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    d020:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    d024:	bf98      	it	ls
    d026:	fa5f f48c 	uxtbls.w	r4, ip
    d02a:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    d02e:	bf88      	it	hi
    d030:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    d032:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d034:	44ec      	add	ip, sp
			n /= base;
    d036:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d038:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    d03c:	d2e3      	bcs.n	d006 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    d03e:	b14b      	cbz	r3, d054 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    d040:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    d044:	222d      	movs	r2, #45	; 0x2d
		i--;
    d046:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    d04a:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    d04e:	446b      	add	r3, sp
    d050:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    d054:	6803      	ldr	r3, [r0, #0]
    d056:	a901      	add	r1, sp, #4
    d058:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    d05c:	685b      	ldr	r3, [r3, #4]
    d05e:	4471      	add	r1, lr
    d060:	4798      	blx	r3
}
    d062:	b00a      	add	sp, #40	; 0x28
    d064:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    d066:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    d068:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    d06c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    d070:	e7e5      	b.n	d03e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    d072:	bf00      	nop

0000d074 <Print::print(long)>:
	if (n < 0) {
    d074:	2900      	cmp	r1, #0
    d076:	db03      	blt.n	d080 <Print::print(long)+0xc>
	uint8_t sign=0;
    d078:	2300      	movs	r3, #0
	if (base == 0) {
    d07a:	220a      	movs	r2, #10
    d07c:	f7ff bfba 	b.w	cff4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    d080:	4249      	negs	r1, r1
		sign = '-';
    d082:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    d084:	220a      	movs	r2, #10
    d086:	f7ff bfb5 	b.w	cff4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    d08a:	bf00      	nop

0000d08c <Print::println()>:
{
    d08c:	b500      	push	{lr}
	return write(buf, 2);
    d08e:	6803      	ldr	r3, [r0, #0]
{
    d090:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    d092:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    d096:	2202      	movs	r2, #2
    d098:	a901      	add	r1, sp, #4
    d09a:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    d09c:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    d0a0:	4798      	blx	r3
}
    d0a2:	b003      	add	sp, #12
    d0a4:	f85d fb04 	ldr.w	pc, [sp], #4

0000d0a8 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    d0a8:	4b05      	ldr	r3, [pc, #20]	; (d0c0 <_write+0x18>)
    d0aa:	2802      	cmp	r0, #2
    d0ac:	bf88      	it	hi
    d0ae:	4603      	movhi	r3, r0
{
    d0b0:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    d0b2:	681c      	ldr	r4, [r3, #0]
    d0b4:	4618      	mov	r0, r3
    d0b6:	6863      	ldr	r3, [r4, #4]
}
    d0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    d0bc:	4718      	bx	r3
    d0be:	bf00      	nop
    d0c0:	20008a0c 	.word	0x20008a0c

0000d0c4 <Print::printf(char const*, ...)>:
{
    d0c4:	b40e      	push	{r1, r2, r3}
    d0c6:	b500      	push	{lr}
    d0c8:	b082      	sub	sp, #8
    d0ca:	aa03      	add	r2, sp, #12
    d0cc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    d0d0:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    d0d2:	f004 fd85 	bl	11be0 <vdprintf>
}
    d0d6:	b002      	add	sp, #8
    d0d8:	f85d eb04 	ldr.w	lr, [sp], #4
    d0dc:	b003      	add	sp, #12
    d0de:	4770      	bx	lr

0000d0e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    d0e0:	b95a      	cbnz	r2, d0fa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    d0e2:	6803      	ldr	r3, [r0, #0]
    d0e4:	b2c9      	uxtb	r1, r1
    d0e6:	4a07      	ldr	r2, [pc, #28]	; (d104 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    d0e8:	681b      	ldr	r3, [r3, #0]
    d0ea:	4293      	cmp	r3, r2
{
    d0ec:	b500      	push	{lr}
    d0ee:	d106      	bne.n	d0fe <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    d0f0:	4608      	mov	r0, r1
}
    d0f2:	f85d eb04 	ldr.w	lr, [sp], #4
    d0f6:	f002 bb3b 	b.w	f770 <usb_serial_putchar>
    d0fa:	f7ff bf7b 	b.w	cff4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    d0fe:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    d102:	4718      	bx	r3
    d104:	0000cfed 	.word	0x0000cfed

0000d108 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    d108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d10c:	b093      	sub	sp, #76	; 0x4c
    d10e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
    d112:	f89d 906c 	ldrb.w	r9, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    d116:	2f01      	cmp	r7, #1
    d118:	d944      	bls.n	d1a4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x9c>
    d11a:	461c      	mov	r4, r3
	if (n == 0) {
    d11c:	4680      	mov	r8, r0
    d11e:	4615      	mov	r5, r2
    d120:	ea52 0304 	orrs.w	r3, r2, r4
    d124:	d039      	beq.n	d19a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x92>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    d126:	2641      	movs	r6, #65	; 0x41
    d128:	e001      	b.n	d12e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x26>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    d12a:	fa5f f68c 	uxtb.w	r6, ip
			digit = n % base;
    d12e:	4621      	mov	r1, r4
    d130:	4628      	mov	r0, r5
    d132:	463a      	mov	r2, r7
    d134:	2300      	movs	r3, #0
    d136:	f002 fd41 	bl	fbbc <__aeabi_uldivmod>
    d13a:	fa5f fc82 	uxtb.w	ip, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d13e:	f106 0248 	add.w	r2, r6, #72	; 0x48
    d142:	f1bc 0f09 	cmp.w	ip, #9
    d146:	f10c 0337 	add.w	r3, ip, #55	; 0x37
    d14a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    d14e:	446a      	add	r2, sp
    d150:	b2db      	uxtb	r3, r3
    d152:	bf98      	it	ls
    d154:	fa5f f38c 	uxtbls.w	r3, ip
			if (n == 0) break;
    d158:	42bd      	cmp	r5, r7
			i--;
    d15a:	f106 3cff 	add.w	ip, r6, #4294967295
			n /= base;
    d15e:	4605      	mov	r5, r0
			if (n == 0) break;
    d160:	f174 0400 	sbcs.w	r4, r4, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d164:	f802 3c44 	strb.w	r3, [r2, #-68]
			n /= base;
    d168:	460c      	mov	r4, r1
			if (n == 0) break;
    d16a:	d2de      	bcs.n	d12a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x22>
		}
	}
	if (sign) {
    d16c:	f1b9 0f00 	cmp.w	r9, #0
    d170:	d007      	beq.n	d182 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x7a>
		i--;
    d172:	3e01      	subs	r6, #1
		buf[i] = '-';
    d174:	222d      	movs	r2, #45	; 0x2d
		i--;
    d176:	b2f6      	uxtb	r6, r6
		buf[i] = '-';
    d178:	f106 0348 	add.w	r3, r6, #72	; 0x48
    d17c:	446b      	add	r3, sp
    d17e:	f803 2c44 	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    d182:	f8d8 3000 	ldr.w	r3, [r8]
    d186:	a901      	add	r1, sp, #4
    d188:	f1c6 0242 	rsb	r2, r6, #66	; 0x42
    d18c:	4640      	mov	r0, r8
    d18e:	685b      	ldr	r3, [r3, #4]
    d190:	4431      	add	r1, r6
    d192:	4798      	blx	r3
}
    d194:	b013      	add	sp, #76	; 0x4c
    d196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf[sizeof(buf) - 1] = '0';
    d19a:	2330      	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    d19c:	2641      	movs	r6, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    d19e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    d1a2:	e7e3      	b.n	d16c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x64>
	if (base < 2) return 0;
    d1a4:	2000      	movs	r0, #0
}
    d1a6:	b013      	add	sp, #76	; 0x4c
    d1a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d1ac:	0000      	movs	r0, r0
	...

0000d1b0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    d1b0:	eeb4 0b40 	vcmp.f64	d0, d0
{
    d1b4:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    d1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    d1ba:	4605      	mov	r5, r0
    d1bc:	ed2d 8b02 	vpush	{d8}
    d1c0:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    d1c2:	d67c      	bvs.n	d2be <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    d1c4:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    d1c8:	ed9f 6b47 	vldr	d6, [pc, #284]	; d2e8 <Print::printFloat(double, unsigned char)+0x138>
    d1cc:	eeb4 7b46 	vcmp.f64	d7, d6
    d1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1d4:	dc6b      	bgt.n	d2ae <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    d1d6:	ed9f 7b46 	vldr	d7, [pc, #280]	; d2f0 <Print::printFloat(double, unsigned char)+0x140>
    d1da:	eeb4 0bc7 	vcmpe.f64	d0, d7
    d1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1e2:	dc5a      	bgt.n	d29a <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    d1e4:	ed9f 7b44 	vldr	d7, [pc, #272]	; d2f8 <Print::printFloat(double, unsigned char)+0x148>
    d1e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    d1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1f0:	d453      	bmi.n	d29a <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    d1f2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    d1f6:	460c      	mov	r4, r1
    d1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1fc:	d45b      	bmi.n	d2b6 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    d1fe:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    d200:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    d204:	2c00      	cmp	r4, #0
    d206:	d05e      	beq.n	d2c6 <Print::printFloat(double, unsigned char)+0x116>
    d208:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    d20c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; d300 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    d210:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    d214:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    d218:	fa5f f28c 	uxtb.w	r2, ip
    d21c:	42a2      	cmp	r2, r4
    d21e:	d3f7      	bcc.n	d210 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    d220:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    d224:	220a      	movs	r2, #10
    d226:	4628      	mov	r0, r5
    d228:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    d22c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    d230:	ee17 1a90 	vmov	r1, s15
    d234:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    d238:	f7ff fedc 	bl	cff4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    d23c:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    d23e:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    d242:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    d246:	4606      	mov	r6, r0
		buf[0] = '.';
    d248:	bf28      	it	cs
    d24a:	240f      	movcs	r4, #15
    d24c:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    d250:	f10d 0309 	add.w	r3, sp, #9
    d254:	aa02      	add	r2, sp, #8
    d256:	1e61      	subs	r1, r4, #1
    d258:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    d25c:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    d260:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    d264:	edcd 7a01 	vstr	s15, [sp, #4]
    d268:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    d26c:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    d270:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    d272:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    d276:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    d27a:	4291      	cmp	r1, r2
			remainder -= n; 
    d27c:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    d280:	d1ec      	bne.n	d25c <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    d282:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    d284:	3401      	adds	r4, #1
		count += write(buf, count);
    d286:	a902      	add	r1, sp, #8
    d288:	4628      	mov	r0, r5
    d28a:	685b      	ldr	r3, [r3, #4]
    d28c:	b2e2      	uxtb	r2, r4
    d28e:	4798      	blx	r3
	}
	return count;
}
    d290:	4630      	mov	r0, r6
    d292:	b006      	add	sp, #24
    d294:	ecbd 8b02 	vpop	{d8}
    d298:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    d29a:	682b      	ldr	r3, [r5, #0]
    d29c:	2203      	movs	r2, #3
    d29e:	491a      	ldr	r1, [pc, #104]	; (d308 <Print::printFloat(double, unsigned char)+0x158>)
    d2a0:	685b      	ldr	r3, [r3, #4]
    d2a2:	b006      	add	sp, #24
    d2a4:	ecbd 8b02 	vpop	{d8}
    d2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d2ac:	4718      	bx	r3
    d2ae:	6803      	ldr	r3, [r0, #0]
    d2b0:	2203      	movs	r2, #3
    d2b2:	4916      	ldr	r1, [pc, #88]	; (d30c <Print::printFloat(double, unsigned char)+0x15c>)
    d2b4:	e7f4      	b.n	d2a0 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    d2b6:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    d2ba:	2301      	movs	r3, #1
    d2bc:	e7a0      	b.n	d200 <Print::printFloat(double, unsigned char)+0x50>
    d2be:	6803      	ldr	r3, [r0, #0]
    d2c0:	2203      	movs	r2, #3
    d2c2:	4913      	ldr	r1, [pc, #76]	; (d310 <Print::printFloat(double, unsigned char)+0x160>)
    d2c4:	e7ec      	b.n	d2a0 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    d2c6:	ee30 0b07 	vadd.f64	d0, d0, d7
    d2ca:	220a      	movs	r2, #10
    d2cc:	4628      	mov	r0, r5
    d2ce:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    d2d2:	ee17 1a90 	vmov	r1, s15
}
    d2d6:	b006      	add	sp, #24
    d2d8:	ecbd 8b02 	vpop	{d8}
    d2dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d2e0:	f7ff be88 	b.w	cff4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    d2e4:	f3af 8000 	nop.w
    d2e8:	ffffffff 	.word	0xffffffff
    d2ec:	7fefffff 	.word	0x7fefffff
    d2f0:	e0000000 	.word	0xe0000000
    d2f4:	41efffff 	.word	0x41efffff
    d2f8:	e0000000 	.word	0xe0000000
    d2fc:	c1efffff 	.word	0xc1efffff
    d300:	9999999a 	.word	0x9999999a
    d304:	3fb99999 	.word	0x3fb99999
    d308:	20000b4c 	.word	0x20000b4c
    d30c:	20000b48 	.word	0x20000b48
    d310:	20000b44 	.word	0x20000b44

0000d314 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    d314:	f002 ba1c 	b.w	f750 <usb_serial_getchar>

0000d318 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    d318:	f002 b9b4 	b.w	f684 <usb_serial_peekchar>

0000d31c <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    d31c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    d320:	b392      	cbz	r2, d388 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    d322:	4617      	mov	r7, r2
    d324:	fab3 f283 	clz	r2, r3
    d328:	0952      	lsrs	r2, r2, #5
    d32a:	b36b      	cbz	r3, d388 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    d32c:	f1b3 0801 	subs.w	r8, r3, #1
    d330:	d025      	beq.n	d37e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    d332:	eb07 0a08 	add.w	sl, r7, r8
    d336:	4683      	mov	fp, r0
    d338:	4689      	mov	r9, r1
	size_t index = 0;
    d33a:	4690      	mov	r8, r2
    d33c:	4c17      	ldr	r4, [pc, #92]	; (d39c <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    d33e:	4e18      	ldr	r6, [pc, #96]	; (d3a0 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    d340:	6825      	ldr	r5, [r4, #0]
    d342:	e00b      	b.n	d35c <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    d344:	f002 fa04 	bl	f750 <usb_serial_getchar>
    if (c >= 0) return c;
    d348:	2800      	cmp	r0, #0
    d34a:	da10      	bge.n	d36e <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    d34c:	f002 faa4 	bl	f898 <yield>
    d350:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    d352:	f8db 2008 	ldr.w	r2, [fp, #8]
    d356:	1b5b      	subs	r3, r3, r5
    d358:	4293      	cmp	r3, r2
    d35a:	d21a      	bcs.n	d392 <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    d35c:	f8db 3000 	ldr.w	r3, [fp]
    d360:	695b      	ldr	r3, [r3, #20]
    d362:	42b3      	cmp	r3, r6
    d364:	d0ee      	beq.n	d344 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    d366:	4658      	mov	r0, fp
    d368:	4798      	blx	r3
    if (c >= 0) return c;
    d36a:	2800      	cmp	r0, #0
    d36c:	dbee      	blt.n	d34c <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    d36e:	4548      	cmp	r0, r9
    d370:	d005      	beq.n	d37e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    d372:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    d376:	45ba      	cmp	sl, r7
		index++;
    d378:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    d37c:	d1e0      	bne.n	d340 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    d37e:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    d380:	4640      	mov	r0, r8
	*buffer = 0;
    d382:	703b      	strb	r3, [r7, #0]
}
    d384:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    d388:	f04f 0800 	mov.w	r8, #0
}
    d38c:	4640      	mov	r0, r8
    d38e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    d392:	2301      	movs	r3, #1
    d394:	f88b 300c 	strb.w	r3, [fp, #12]
    d398:	e7f1      	b.n	d37e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    d39a:	bf00      	nop
    d39c:	20035424 	.word	0x20035424
    d3a0:	0000d315 	.word	0x0000d315

0000d3a4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    d3a4:	49a2      	ldr	r1, [pc, #648]	; (d630 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    d3a6:	4ba3      	ldr	r3, [pc, #652]	; (d634 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    d3a8:	4288      	cmp	r0, r1
{
    d3aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    d3ae:	4ca2      	ldr	r4, [pc, #648]	; (d638 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    d3b0:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    d3b2:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    d3b4:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    d3b8:	d91b      	bls.n	d3f2 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    d3ba:	4ba0      	ldr	r3, [pc, #640]	; (d63c <set_arm_clock+0x298>)
    d3bc:	4298      	cmp	r0, r3
    d3be:	f240 8102 	bls.w	d5c6 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    d3c2:	1ac3      	subs	r3, r0, r3
    d3c4:	499e      	ldr	r1, [pc, #632]	; (d640 <set_arm_clock+0x29c>)
    d3c6:	0a1b      	lsrs	r3, r3, #8
    d3c8:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    d3cc:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    d3d0:	09db      	lsrs	r3, r3, #7
    d3d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d3d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d3da:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    d3de:	428b      	cmp	r3, r1
    d3e0:	bf28      	it	cs
    d3e2:	460b      	movcs	r3, r1
    d3e4:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    d3e8:	4b96      	ldr	r3, [pc, #600]	; (d644 <set_arm_clock+0x2a0>)
    d3ea:	fba3 3707 	umull	r3, r7, r3, r7
    d3ee:	08ff      	lsrs	r7, r7, #3
    d3f0:	e004      	b.n	d3fc <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    d3f2:	4f95      	ldr	r7, [pc, #596]	; (d648 <set_arm_clock+0x2a4>)
    d3f4:	42b8      	cmp	r0, r7
    d3f6:	bf8c      	ite	hi
    d3f8:	270e      	movhi	r7, #14
    d3fa:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    d3fc:	498d      	ldr	r1, [pc, #564]	; (d634 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    d3fe:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    d402:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    d406:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    d408:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    d40c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    d410:	d20c      	bcs.n	d42c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    d412:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    d416:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    d41a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    d41e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    d422:	680b      	ldr	r3, [r1, #0]
    d424:	2b00      	cmp	r3, #0
    d426:	dafc      	bge.n	d422 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    d428:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    d42c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    d430:	d124      	bne.n	d47c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    d432:	4986      	ldr	r1, [pc, #536]	; (d64c <set_arm_clock+0x2a8>)
    d434:	690c      	ldr	r4, [r1, #16]
    d436:	4986      	ldr	r1, [pc, #536]	; (d650 <set_arm_clock+0x2ac>)
    d438:	43a1      	bics	r1, r4
    d43a:	f000 80ea 	beq.w	d612 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    d43e:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    d442:	4634      	mov	r4, r6
    d444:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    d448:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    d44c:	d004      	beq.n	d458 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    d44e:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    d452:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    d454:	4b77      	ldr	r3, [pc, #476]	; (d634 <set_arm_clock+0x290>)
    d456:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    d458:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    d45c:	d007      	beq.n	d46e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    d45e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    d462:	4974      	ldr	r1, [pc, #464]	; (d634 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    d464:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    d466:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    d468:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    d46a:	071a      	lsls	r2, r3, #28
    d46c:	d4fc      	bmi.n	d468 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    d46e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    d472:	4a70      	ldr	r2, [pc, #448]	; (d634 <set_arm_clock+0x290>)
    d474:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    d476:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d478:	069b      	lsls	r3, r3, #26
    d47a:	d4fc      	bmi.n	d476 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    d47c:	4c75      	ldr	r4, [pc, #468]	; (d654 <set_arm_clock+0x2b0>)
    d47e:	42a0      	cmp	r0, r4
    d480:	f200 80ce 	bhi.w	d620 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    d484:	f04f 0c01 	mov.w	ip, #1
    d488:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    d48a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    d48c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    d490:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    d494:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    d498:	42a2      	cmp	r2, r4
    d49a:	d818      	bhi.n	d4ce <set_arm_clock+0x12a>
		if (div_arm < 8) {
    d49c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    d4a0:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    d4a4:	f040 808d 	bne.w	d5c2 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    d4a8:	f1bc 0f04 	cmp.w	ip, #4
    d4ac:	f200 8091 	bhi.w	d5d2 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    d4b0:	180a      	adds	r2, r1, r0
    d4b2:	42a2      	cmp	r2, r4
    d4b4:	f200 80a4 	bhi.w	d600 <set_arm_clock+0x25c>
    d4b8:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    d4bc:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    d4be:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    d4c2:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    d4c6:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    d4ca:	42a2      	cmp	r2, r4
    d4cc:	d9e6      	bls.n	d49c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d4ce:	f10c 31ff 	add.w	r1, ip, #4294967295
    d4d2:	028c      	lsls	r4, r1, #10
    d4d4:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d4d8:	485f      	ldr	r0, [pc, #380]	; (d658 <set_arm_clock+0x2b4>)
    d4da:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    d4dc:	4a5f      	ldr	r2, [pc, #380]	; (d65c <set_arm_clock+0x2b8>)
    d4de:	4290      	cmp	r0, r2
    d4e0:	d97f      	bls.n	d5e2 <set_arm_clock+0x23e>
    d4e2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; d688 <set_arm_clock+0x2e4>
    d4e6:	226c      	movs	r2, #108	; 0x6c
    d4e8:	485d      	ldr	r0, [pc, #372]	; (d660 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    d4ea:	4d58      	ldr	r5, [pc, #352]	; (d64c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    d4ec:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    d4f0:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    d4f4:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    d4f8:	f8df c190 	ldr.w	ip, [pc, #400]	; d68c <set_arm_clock+0x2e8>
    d4fc:	ea0e 0c0c 	and.w	ip, lr, ip
    d500:	45d4      	cmp	ip, sl
    d502:	d009      	beq.n	d518 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    d504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    d508:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    d50c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    d510:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    d512:	682a      	ldr	r2, [r5, #0]
    d514:	2a00      	cmp	r2, #0
    d516:	dafc      	bge.n	d512 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    d518:	4a46      	ldr	r2, [pc, #280]	; (d634 <set_arm_clock+0x290>)
    d51a:	6915      	ldr	r5, [r2, #16]
    d51c:	f005 0507 	and.w	r5, r5, #7
    d520:	429d      	cmp	r5, r3
    d522:	d003      	beq.n	d52c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    d524:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    d526:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d528:	03dd      	lsls	r5, r3, #15
    d52a:	d4fc      	bmi.n	d526 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d52c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    d530:	d009      	beq.n	d546 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    d532:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    d536:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    d53a:	4a3e      	ldr	r2, [pc, #248]	; (d634 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    d53c:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    d53e:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    d540:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d542:	0799      	lsls	r1, r3, #30
    d544:	d4fc      	bmi.n	d540 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    d546:	4947      	ldr	r1, [pc, #284]	; (d664 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    d548:	4a47      	ldr	r2, [pc, #284]	; (d668 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    d54a:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    d54c:	4291      	cmp	r1, r2
    d54e:	d83c      	bhi.n	d5ca <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    d550:	4b46      	ldr	r3, [pc, #280]	; (d66c <set_arm_clock+0x2c8>)
    d552:	09c9      	lsrs	r1, r1, #7
    d554:	fba3 3101 	umull	r3, r1, r3, r1
    d558:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    d55a:	1e4b      	subs	r3, r1, #1
    d55c:	021b      	lsls	r3, r3, #8
    d55e:	ea86 0203 	eor.w	r2, r6, r3
    d562:	f412 7f40 	tst.w	r2, #768	; 0x300
    d566:	d006      	beq.n	d576 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    d568:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    d56c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    d570:	4a30      	ldr	r2, [pc, #192]	; (d634 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    d572:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    d574:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    d576:	4a2f      	ldr	r2, [pc, #188]	; (d634 <set_arm_clock+0x290>)
    d578:	6953      	ldr	r3, [r2, #20]
    d57a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    d57e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    d580:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d582:	069b      	lsls	r3, r3, #26
    d584:	d4fc      	bmi.n	d580 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    d586:	4b3a      	ldr	r3, [pc, #232]	; (d670 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    d588:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    d58a:	fba3 2300 	umull	r2, r3, r3, r0
    d58e:	f04f 32ff 	mov.w	r2, #4294967295
    d592:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    d596:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    d59a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    d59e:	4a35      	ldr	r2, [pc, #212]	; (d674 <set_arm_clock+0x2d0>)
    d5a0:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    d5a2:	4a35      	ldr	r2, [pc, #212]	; (d678 <set_arm_clock+0x2d4>)
    d5a4:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    d5a6:	4a35      	ldr	r2, [pc, #212]	; (d67c <set_arm_clock+0x2d8>)
    d5a8:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    d5aa:	d208      	bcs.n	d5be <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    d5ac:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    d5b0:	4a21      	ldr	r2, [pc, #132]	; (d638 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    d5b2:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    d5b6:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    d5b8:	6813      	ldr	r3, [r2, #0]
    d5ba:	2b00      	cmp	r3, #0
    d5bc:	dafc      	bge.n	d5b8 <set_arm_clock+0x214>
	}

	return frequency;
}
    d5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d5c2:	4673      	mov	r3, lr
    d5c4:	e762      	b.n	d48c <set_arm_clock+0xe8>
    d5c6:	2712      	movs	r7, #18
    d5c8:	e718      	b.n	d3fc <set_arm_clock+0x58>
    d5ca:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    d5ce:	2104      	movs	r1, #4
    d5d0:	e7c5      	b.n	d55e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d5d2:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d5d6:	4820      	ldr	r0, [pc, #128]	; (d658 <set_arm_clock+0x2b4>)
    d5d8:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d5da:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d5dc:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d5de:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d5e2:	4a27      	ldr	r2, [pc, #156]	; (d680 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    d5e4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d690 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d5e8:	fba2 2000 	umull	r2, r0, r2, r0
    d5ec:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    d5ee:	4825      	ldr	r0, [pc, #148]	; (d684 <set_arm_clock+0x2e0>)
    d5f0:	2a36      	cmp	r2, #54	; 0x36
    d5f2:	bf38      	it	cc
    d5f4:	2236      	movcc	r2, #54	; 0x36
    d5f6:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    d5fa:	ea42 0a0a 	orr.w	sl, r2, sl
    d5fe:	e774      	b.n	d4ea <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d600:	ea4f 248c 	mov.w	r4, ip, lsl #10
    d604:	2300      	movs	r3, #0
    d606:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    d60a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    d60e:	46ac      	mov	ip, r5
    d610:	e762      	b.n	d4d8 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    d612:	461d      	mov	r5, r3
    d614:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    d618:	4611      	mov	r1, r2
    d61a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    d61e:	e713      	b.n	d448 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    d620:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    d622:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    d626:	4602      	mov	r2, r0
    d628:	4631      	mov	r1, r6
    d62a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    d62c:	46e6      	mov	lr, ip
    d62e:	e753      	b.n	d4d8 <set_arm_clock+0x134>
    d630:	1f78a400 	.word	0x1f78a400
    d634:	400fc000 	.word	0x400fc000
    d638:	40080000 	.word	0x40080000
    d63c:	23c34600 	.word	0x23c34600
    d640:	004cb223 	.word	0x004cb223
    d644:	51eb851f 	.word	0x51eb851f
    d648:	016e3600 	.word	0x016e3600
    d64c:	400d8000 	.word	0x400d8000
    d650:	80003040 	.word	0x80003040
    d654:	269fb1ff 	.word	0x269fb1ff
    d658:	005b8d80 	.word	0x005b8d80
    d65c:	4df67eff 	.word	0x4df67eff
    d660:	4d3f6400 	.word	0x4d3f6400
    d664:	08f0d17f 	.word	0x08f0d17f
    d668:	2cb4177f 	.word	0x2cb4177f
    d66c:	00e5109f 	.word	0x00e5109f
    d670:	431bde83 	.word	0x431bde83
    d674:	20008a08 	.word	0x20008a08
    d678:	20008a04 	.word	0x20008a04
    d67c:	20034d14 	.word	0x20034d14
    d680:	165e9f81 	.word	0x165e9f81
    d684:	00b71b00 	.word	0x00b71b00
    d688:	8000206c 	.word	0x8000206c
    d68c:	8001307f 	.word	0x8001307f
    d690:	80002000 	.word	0x80002000

0000d694 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    d694:	b900      	cbnz	r0, d698 <delay+0x4>
    d696:	4770      	bx	lr
{
    d698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d69c:	2101      	movs	r1, #1
    d69e:	4681      	mov	r9, r0
    d6a0:	4c21      	ldr	r4, [pc, #132]	; (d728 <delay+0x94>)
    d6a2:	4d22      	ldr	r5, [pc, #136]	; (d72c <delay+0x98>)
    d6a4:	4e22      	ldr	r6, [pc, #136]	; (d730 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d6a6:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    d6aa:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    d6ac:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d6ae:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d1f7      	bne.n	d6a6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    d6b6:	491f      	ldr	r1, [pc, #124]	; (d734 <delay+0xa0>)
    d6b8:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    d6ba:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d6be:	f8df a078 	ldr.w	sl, [pc, #120]	; d738 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    d6c2:	1a1b      	subs	r3, r3, r0
    d6c4:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    d6c6:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d6ca:	f8da 2000 	ldr.w	r2, [sl]
    d6ce:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    d6d2:	455a      	cmp	r2, fp
    d6d4:	bf94      	ite	ls
    d6d6:	4490      	addls	r8, r2
    d6d8:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d6da:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    d6de:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    d6e0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d6e2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    d6e6:	2b00      	cmp	r3, #0
    d6e8:	d1f7      	bne.n	d6da <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    d6ea:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d6ec:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    d6f0:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    d6f2:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d6f6:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    d6fa:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    d6fe:	bf94      	ite	ls
    d700:	4462      	addls	r2, ip
    d702:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    d706:	eba2 0208 	sub.w	r2, r2, r8
    d70a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    d70e:	d306      	bcc.n	d71e <delay+0x8a>
			if (--msec == 0) return;
    d710:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    d714:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    d718:	d1df      	bne.n	d6da <delay+0x46>
}
    d71a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    d71e:	f002 f8bb 	bl	f898 <yield>
		while ((micros() - start) >= 1000) {
    d722:	4904      	ldr	r1, [pc, #16]	; (d734 <delay+0xa0>)
    d724:	e7d9      	b.n	d6da <delay+0x46>
    d726:	bf00      	nop
    d728:	20035428 	.word	0x20035428
    d72c:	20035424 	.word	0x20035424
    d730:	20035420 	.word	0x20035420
    d734:	e0001000 	.word	0xe0001000
    d738:	20034d14 	.word	0x20034d14

0000d73c <micros>:
{
    d73c:	b430      	push	{r4, r5}
    d73e:	4b0f      	ldr	r3, [pc, #60]	; (d77c <micros+0x40>)
    d740:	f04f 0c01 	mov.w	ip, #1
    d744:	4d0e      	ldr	r5, [pc, #56]	; (d780 <micros+0x44>)
    d746:	4c0f      	ldr	r4, [pc, #60]	; (d784 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d748:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    d74c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    d74e:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d750:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    d754:	2a00      	cmp	r2, #0
    d756:	d1f7      	bne.n	d748 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    d758:	4b0b      	ldr	r3, [pc, #44]	; (d788 <micros+0x4c>)
    d75a:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d75c:	4a0b      	ldr	r2, [pc, #44]	; (d78c <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    d75e:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    d760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d764:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    d766:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d76a:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    d76e:	bc30      	pop	{r4, r5}
    d770:	428a      	cmp	r2, r1
    d772:	bf94      	ite	ls
    d774:	1880      	addls	r0, r0, r2
    d776:	1840      	addhi	r0, r0, r1
    d778:	4770      	bx	lr
    d77a:	bf00      	nop
    d77c:	20035428 	.word	0x20035428
    d780:	20035424 	.word	0x20035424
    d784:	20035420 	.word	0x20035420
    d788:	e0001000 	.word	0xe0001000
    d78c:	20034d14 	.word	0x20034d14

0000d790 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    d790:	2836      	cmp	r0, #54	; 0x36
    d792:	d816      	bhi.n	d7c2 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    d794:	0102      	lsls	r2, r0, #4
    d796:	4b10      	ldr	r3, [pc, #64]	; (d7d8 <digitalWrite+0x48>)
    d798:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    d79c:	589b      	ldr	r3, [r3, r2]
{
    d79e:	b410      	push	{r4}
	mask = p->mask;
    d7a0:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    d7a2:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    d7a4:	4214      	tst	r4, r2
    d7a6:	d005      	beq.n	d7b4 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    d7a8:	b961      	cbnz	r1, d7c4 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    d7aa:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    d7ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    d7b2:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d7b4:	6883      	ldr	r3, [r0, #8]
		if (val) {
    d7b6:	b151      	cbz	r1, d7ce <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d7b8:	4a08      	ldr	r2, [pc, #32]	; (d7dc <digitalWrite+0x4c>)
}
    d7ba:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d7be:	601a      	str	r2, [r3, #0]
}
    d7c0:	4770      	bx	lr
    d7c2:	4770      	bx	lr
    d7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    d7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    d7cc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d7ce:	4a04      	ldr	r2, [pc, #16]	; (d7e0 <digitalWrite+0x50>)
}
    d7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d7d4:	601a      	str	r2, [r3, #0]
}
    d7d6:	4770      	bx	lr
    d7d8:	20007ae0 	.word	0x20007ae0
    d7dc:	0001f038 	.word	0x0001f038
    d7e0:	00013038 	.word	0x00013038

0000d7e4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    d7e4:	2836      	cmp	r0, #54	; 0x36
    d7e6:	d829      	bhi.n	d83c <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    d7e8:	4b16      	ldr	r3, [pc, #88]	; (d844 <pinMode+0x60>)
    d7ea:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d7ec:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    d7ee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d7f2:	589a      	ldr	r2, [r3, r2]
{
    d7f4:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d7f6:	6853      	ldr	r3, [r2, #4]
    d7f8:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d7fa:	d00e      	beq.n	d81a <pinMode+0x36>
    d7fc:	2904      	cmp	r1, #4
    d7fe:	d00c      	beq.n	d81a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d800:	ea23 0304 	bic.w	r3, r3, r4
    d804:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d806:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    d808:	b1a9      	cbz	r1, d836 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    d80a:	2902      	cmp	r1, #2
    d80c:	d017      	beq.n	d83e <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    d80e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d810:	bf0c      	ite	eq
    d812:	4a0d      	ldreq	r2, [pc, #52]	; (d848 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    d814:	4a0d      	ldrne	r2, [pc, #52]	; (d84c <pinMode+0x68>)
    d816:	601a      	str	r2, [r3, #0]
    d818:	e007      	b.n	d82a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d81a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    d81c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d81e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d820:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    d822:	d008      	beq.n	d836 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    d824:	f640 0238 	movw	r2, #2104	; 0x838
    d828:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    d82a:	6843      	ldr	r3, [r0, #4]
    d82c:	2215      	movs	r2, #21
}
    d82e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    d832:	601a      	str	r2, [r3, #0]
}
    d834:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d836:	2238      	movs	r2, #56	; 0x38
    d838:	601a      	str	r2, [r3, #0]
    d83a:	e7f6      	b.n	d82a <pinMode+0x46>
    d83c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d83e:	4a04      	ldr	r2, [pc, #16]	; (d850 <pinMode+0x6c>)
    d840:	601a      	str	r2, [r3, #0]
    d842:	e7f2      	b.n	d82a <pinMode+0x46>
    d844:	20007ae0 	.word	0x20007ae0
    d848:	00013038 	.word	0x00013038
    d84c:	00010038 	.word	0x00010038
    d850:	0001f038 	.word	0x0001f038

0000d854 <flash_wait>:
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    d854:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    d856:	4a12      	ldr	r2, [pc, #72]	; (d8a0 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    d858:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    d85a:	4b12      	ldr	r3, [pc, #72]	; (d8a4 <flash_wait+0x50>)
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    d85c:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    d85e:	4d12      	ldr	r5, [pc, #72]	; (d8a8 <flash_wait+0x54>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    d860:	4c12      	ldr	r4, [pc, #72]	; (d8ac <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    d862:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    d866:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    d86a:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    d86e:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    d872:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d876:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    d87a:	6953      	ldr	r3, [r2, #20]
    d87c:	07db      	lsls	r3, r3, #31
    d87e:	d5fc      	bpl.n	d87a <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d880:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    d882:	7823      	ldrb	r3, [r4, #0]
    d884:	07db      	lsls	r3, r3, #31
    d886:	d4f0      	bmi.n	d86a <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    d888:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    d88a:	4905      	ldr	r1, [pc, #20]	; (d8a0 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    d88c:	f043 0301 	orr.w	r3, r3, #1
    d890:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    d892:	680b      	ldr	r3, [r1, #0]
    d894:	07db      	lsls	r3, r3, #31
    d896:	d4fc      	bmi.n	d892 <flash_wait+0x3e>
	__enable_irq();
    d898:	b662      	cpsie	i
}
    d89a:	bc30      	pop	{r4, r5}
    d89c:	4770      	bx	lr
    d89e:	bf00      	nop
    d8a0:	402a8000 	.word	0x402a8000
    d8a4:	24010405 	.word	0x24010405
    d8a8:	000f0001 	.word	0x000f0001
    d8ac:	402a8100 	.word	0x402a8100

0000d8b0 <eeprom_initialize>:
{
    d8b0:	b570      	push	{r4, r5, r6, lr}
    d8b2:	4c0e      	ldr	r4, [pc, #56]	; (d8ec <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
    d8b4:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
    d8b8:	4e0d      	ldr	r6, [pc, #52]	; (d8f0 <eeprom_initialize+0x40>)
    d8ba:	f104 057e 	add.w	r5, r4, #126	; 0x7e
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d8be:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
    d8c2:	2100      	movs	r1, #0
    d8c4:	e002      	b.n	d8cc <eeprom_initialize+0x1c>
		} while (p < end);
    d8c6:	42b3      	cmp	r3, r6
			index++;
    d8c8:	b281      	uxth	r1, r0
		} while (p < end);
    d8ca:	d204      	bcs.n	d8d6 <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
    d8cc:	881a      	ldrh	r2, [r3, #0]
			index++;
    d8ce:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
    d8d0:	3302      	adds	r3, #2
    d8d2:	4572      	cmp	r2, lr
    d8d4:	d1f7      	bne.n	d8c6 <eeprom_initialize+0x16>
		sector_index[sector] = index;
    d8d6:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    d8da:	42ac      	cmp	r4, r5
    d8dc:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    d8e0:	d1ed      	bne.n	d8be <eeprom_initialize+0xe>
	initialized = 1;
    d8e2:	4b04      	ldr	r3, [pc, #16]	; (d8f4 <eeprom_initialize+0x44>)
    d8e4:	2201      	movs	r2, #1
    d8e6:	701a      	strb	r2, [r3, #0]
}
    d8e8:	bd70      	pop	{r4, r5, r6, pc}
    d8ea:	bf00      	nop
    d8ec:	200351e6 	.word	0x200351e6
    d8f0:	607c1000 	.word	0x607c1000
    d8f4:	2003546a 	.word	0x2003546a

0000d8f8 <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
    d8f8:	f241 03bb 	movw	r3, #4283	; 0x10bb
    d8fc:	4298      	cmp	r0, r3
    d8fe:	d82f      	bhi.n	d960 <eeprom_read_byte+0x68>
	if (!initialized) eeprom_initialize();
    d900:	4b18      	ldr	r3, [pc, #96]	; (d964 <eeprom_read_byte+0x6c>)
{
    d902:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
    d904:	781b      	ldrb	r3, [r3, #0]
    d906:	4604      	mov	r4, r0
    d908:	b33b      	cbz	r3, d95a <eeprom_read_byte+0x62>
	sector = (addr >> 2) % FLASH_SECTORS;
    d90a:	08a0      	lsrs	r0, r4, #2
    d90c:	4b16      	ldr	r3, [pc, #88]	; (d968 <eeprom_read_byte+0x70>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    d90e:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
    d912:	4c16      	ldr	r4, [pc, #88]	; (d96c <eeprom_read_byte+0x74>)
	sector = (addr >> 2) % FLASH_SECTORS;
    d914:	fba3 2300 	umull	r2, r3, r3, r0
    d918:	1ac2      	subs	r2, r0, r3
    d91a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d91e:	4a14      	ldr	r2, [pc, #80]	; (d970 <eeprom_read_byte+0x78>)
	sector = (addr >> 2) % FLASH_SECTORS;
    d920:	095b      	lsrs	r3, r3, #5
    d922:	ebc3 1e83 	rsb	lr, r3, r3, lsl #6
    d926:	469c      	mov	ip, r3
    d928:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    d92c:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
    d930:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
    d932:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d936:	441a      	add	r2, r3
	end = p + sector_index[sector];
    d938:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d93c:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
    d93e:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
    d942:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
    d946:	d907      	bls.n	d958 <eeprom_read_byte+0x60>
		uint32_t val = *p++;
    d948:	881a      	ldrh	r2, [r3, #0]
    d94a:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
    d94c:	b2d4      	uxtb	r4, r2
    d94e:	428c      	cmp	r4, r1
    d950:	bf08      	it	eq
    d952:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
    d954:	459c      	cmp	ip, r3
    d956:	d8f7      	bhi.n	d948 <eeprom_read_byte+0x50>
}
    d958:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
    d95a:	f7ff ffa9 	bl	d8b0 <eeprom_initialize>
    d95e:	e7d4      	b.n	d90a <eeprom_read_byte+0x12>
	if (addr > E2END) return 0xFF;
    d960:	20ff      	movs	r0, #255	; 0xff
}
    d962:	4770      	bx	lr
    d964:	2003546a 	.word	0x2003546a
    d968:	04104105 	.word	0x04104105
    d96c:	200351e8 	.word	0x200351e8
    d970:	000607c0 	.word	0x000607c0

0000d974 <eeprom_read_block>:
	while (len--) {
    d974:	b162      	cbz	r2, d990 <eeprom_read_block+0x1c>
{
    d976:	b570      	push	{r4, r5, r6, lr}
    d978:	4605      	mov	r5, r0
    d97a:	460c      	mov	r4, r1
    d97c:	188e      	adds	r6, r1, r2
		*dest++ = eeprom_read_byte(p++);
    d97e:	4620      	mov	r0, r4
    d980:	3401      	adds	r4, #1
    d982:	f7ff ffb9 	bl	d8f8 <eeprom_read_byte>
    d986:	f805 0b01 	strb.w	r0, [r5], #1
	while (len--) {
    d98a:	42b4      	cmp	r4, r6
    d98c:	d1f7      	bne.n	d97e <eeprom_read_block+0xa>
}
    d98e:	bd70      	pop	{r4, r5, r6, pc}
    d990:	4770      	bx	lr
    d992:	bf00      	nop

0000d994 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    d994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d996:	460f      	mov	r7, r1
    d998:	4616      	mov	r6, r2
	__disable_irq();
    d99a:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d99c:	4b34      	ldr	r3, [pc, #208]	; (da70 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    d99e:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d9a2:	4a34      	ldr	r2, [pc, #208]	; (da74 <eepromemu_flash_write+0xe0>)
    d9a4:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    d9a6:	2202      	movs	r2, #2
    d9a8:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    d9aa:	2200      	movs	r2, #0
    d9ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    d9b0:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    d9b4:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    d9b8:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    d9bc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    d9c0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    d9c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d9c8:	2201      	movs	r2, #1
    d9ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    d9ce:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    d9d2:	1982      	adds	r2, r0, r6
	asm("dsb");
    d9d4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    d9d8:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    d9dc:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    d9e0:	3320      	adds	r3, #32
	} while (location < end_addr);
    d9e2:	429a      	cmp	r2, r3
    d9e4:	d8fa      	bhi.n	d9dc <eepromemu_flash_write+0x48>
	asm("dsb");
    d9e6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d9ea:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    d9ee:	4d20      	ldr	r5, [pc, #128]	; (da70 <eepromemu_flash_write+0xdc>)
    d9f0:	696b      	ldr	r3, [r5, #20]
    d9f2:	07da      	lsls	r2, r3, #31
    d9f4:	d5fc      	bpl.n	d9f0 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d9f6:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    d9f8:	491f      	ldr	r1, [pc, #124]	; (da78 <eepromemu_flash_write+0xe4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    d9fa:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    d9fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    da00:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    da02:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    da06:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    da0a:	f242 2101 	movw	r1, #8705	; 0x2201
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    da0e:	4c18      	ldr	r4, [pc, #96]	; (da70 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    da10:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    da14:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    da18:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    da1c:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    da20:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    da24:	4d15      	ldr	r5, [pc, #84]	; (da7c <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    da26:	e001      	b.n	da2c <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    da28:	065b      	lsls	r3, r3, #25
    da2a:	d409      	bmi.n	da40 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    da2c:	6963      	ldr	r3, [r4, #20]
    da2e:	f013 0001 	ands.w	r0, r3, #1
    da32:	d0f9      	beq.n	da28 <eepromemu_flash_write+0x94>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    da34:	2341      	movs	r3, #65	; 0x41
    da36:	6163      	str	r3, [r4, #20]
	flash_wait();
}
    da38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    da3c:	f7ff bf0a 	b.w	d854 <flash_wait>
			if (wrlen > 8) wrlen = 8;
    da40:	2e08      	cmp	r6, #8
    da42:	d80a      	bhi.n	da5a <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    da44:	b136      	cbz	r6, da54 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    da46:	4632      	mov	r2, r6
    da48:	4639      	mov	r1, r7
				src += wrlen;
    da4a:	4437      	add	r7, r6
				len -= wrlen;
    da4c:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    da4e:	4628      	mov	r0, r5
    da50:	f000 f924 	bl	dc9c <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    da54:	2340      	movs	r3, #64	; 0x40
    da56:	6163      	str	r3, [r4, #20]
    da58:	e7e8      	b.n	da2c <eepromemu_flash_write+0x98>
    da5a:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    da5e:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    da60:	4639      	mov	r1, r7
    da62:	4632      	mov	r2, r6
				src += wrlen;
    da64:	4437      	add	r7, r6
				len -= wrlen;
    da66:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    da68:	4628      	mov	r0, r5
    da6a:	f000 f917 	bl	dc9c <memcpy>
				len -= wrlen;
    da6e:	e7f1      	b.n	da54 <eepromemu_flash_write+0xc0>
    da70:	402a8000 	.word	0x402a8000
    da74:	5af05af0 	.word	0x5af05af0
    da78:	08180432 	.word	0x08180432
    da7c:	402a8180 	.word	0x402a8180

0000da80 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    da80:	b410      	push	{r4}
	__disable_irq();
    da82:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    da84:	4b28      	ldr	r3, [pc, #160]	; (db28 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    da86:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    da88:	4c28      	ldr	r4, [pc, #160]	; (db2c <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    da8a:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    da8c:	619c      	str	r4, [r3, #24]
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    da8e:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    da92:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    da94:	f240 4106 	movw	r1, #1030	; 0x406
    da98:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    da9c:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    da9e:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    daa2:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    daa6:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    daaa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    daae:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    dab2:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    dab6:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    dab8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    dabc:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    dac0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    dac4:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    dac8:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    dacc:	4299      	cmp	r1, r3
    dace:	bf34      	ite	cc
    dad0:	2101      	movcc	r1, #1
    dad2:	2180      	movcs	r1, #128	; 0x80
    dad4:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    dad8:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    dada:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    dade:	461a      	mov	r2, r3
	} while (location < end_addr);
    dae0:	f103 0320 	add.w	r3, r3, #32
    dae4:	d1f8      	bne.n	dad8 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    dae6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    daea:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    daee:	4a0e      	ldr	r2, [pc, #56]	; (db28 <eepromemu_flash_erase_sector+0xa8>)
    daf0:	6953      	ldr	r3, [r2, #20]
    daf2:	07d9      	lsls	r1, r3, #31
    daf4:	d5fc      	bpl.n	daf0 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    daf6:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    daf8:	490d      	ldr	r1, [pc, #52]	; (db30 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    dafa:	4b0e      	ldr	r3, [pc, #56]	; (db34 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    dafc:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    dafe:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    db00:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    db04:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    db08:	4907      	ldr	r1, [pc, #28]	; (db28 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    db0a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    db0e:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    db12:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    db16:	694b      	ldr	r3, [r1, #20]
    db18:	07db      	lsls	r3, r3, #31
    db1a:	d5fc      	bpl.n	db16 <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    db1c:	2301      	movs	r3, #1
	flash_wait();
}
    db1e:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    db22:	614b      	str	r3, [r1, #20]
	flash_wait();
    db24:	f7ff be96 	b.w	d854 <flash_wait>
    db28:	402a8000 	.word	0x402a8000
    db2c:	5af05af0 	.word	0x5af05af0
    db30:	08180420 	.word	0x08180420
    db34:	00fff000 	.word	0x00fff000

0000db38 <eeprom_write_byte>:
	if (addr > E2END) return;
    db38:	f241 03bb 	movw	r3, #4283	; 0x10bb
    db3c:	4298      	cmp	r0, r3
    db3e:	f200 8089 	bhi.w	dc54 <eeprom_write_byte+0x11c>
	if (!initialized) eeprom_initialize();
    db42:	4b46      	ldr	r3, [pc, #280]	; (dc5c <eeprom_write_byte+0x124>)
{
    db44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
    db48:	781b      	ldrb	r3, [r3, #0]
{
    db4a:	b0c2      	sub	sp, #264	; 0x108
    db4c:	4605      	mov	r5, r0
    db4e:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
    db50:	2b00      	cmp	r3, #0
    db52:	d07c      	beq.n	dc4e <eeprom_write_byte+0x116>
	sector = (addr >> 2) % FLASH_SECTORS; 
    db54:	08ab      	lsrs	r3, r5, #2
    db56:	4e42      	ldr	r6, [pc, #264]	; (dc60 <eeprom_write_byte+0x128>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    db58:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
    db5c:	4f41      	ldr	r7, [pc, #260]	; (dc64 <eeprom_write_byte+0x12c>)
	sector = (addr >> 2) % FLASH_SECTORS; 
    db5e:	fba6 2603 	umull	r2, r6, r6, r3
    db62:	1b9a      	subs	r2, r3, r6
    db64:	eb06 0652 	add.w	r6, r6, r2, lsr #1
    db68:	0976      	lsrs	r6, r6, #5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    db6a:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    db6e:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
    db72:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    db74:	4b3c      	ldr	r3, [pc, #240]	; (dc68 <eeprom_write_byte+0x130>)
	end = p + sector_index[sector];
    db76:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    db7a:	4433      	add	r3, r6
	end = p + sector_index[sector];
    db7c:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    db7e:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
    db82:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
    db86:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
    db8a:	d964      	bls.n	dc56 <eeprom_write_byte+0x11e>
    db8c:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
    db8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
    db92:	881a      	ldrh	r2, [r3, #0]
    db94:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
    db96:	b2d1      	uxtb	r1, r2
    db98:	42a9      	cmp	r1, r5
    db9a:	bf08      	it	eq
    db9c:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
    dba0:	4298      	cmp	r0, r3
    dba2:	d8f6      	bhi.n	db92 <eeprom_write_byte+0x5a>
	if (data == olddata) return;
    dba4:	45e1      	cmp	r9, ip
    dba6:	d041      	beq.n	dc2c <eeprom_write_byte+0xf4>
	if (sector_index[sector] < 2048) {
    dba8:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    dbac:	d341      	bcc.n	dc32 <eeprom_write_byte+0xfa>
		memset(buf, 0xFF, sizeof(buf));
    dbae:	ac02      	add	r4, sp, #8
    dbb0:	f44f 7280 	mov.w	r2, #256	; 0x100
    dbb4:	21ff      	movs	r1, #255	; 0xff
    dbb6:	4620      	mov	r0, r4
    dbb8:	f004 f8fe 	bl	11db8 <memset>
		while (p < end) {
    dbbc:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    dbc0:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    dbc4:	4642      	mov	r2, r8
    dbc6:	4298      	cmp	r0, r3
    dbc8:	bf34      	ite	cc
    dbca:	2001      	movcc	r0, #1
    dbcc:	f44f 6000 	movcs.w	r0, #2048	; 0x800
    dbd0:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
    dbd4:	4613      	mov	r3, r2
    dbd6:	3202      	adds	r2, #2
    dbd8:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
    dbda:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
    dbdc:	b2d9      	uxtb	r1, r3
    dbde:	ea4f 2313 	mov.w	r3, r3, lsr #8
    dbe2:	5463      	strb	r3, [r4, r1]
		while (p < end) {
    dbe4:	d1f6      	bne.n	dbd4 <eeprom_write_byte+0x9c>
		buf[offset] = data;
    dbe6:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
    dbea:	f10d 0907 	add.w	r9, sp, #7
    dbee:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
    dbf2:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    dbf4:	464c      	mov	r4, r9
    dbf6:	4640      	mov	r0, r8
    dbf8:	f7ff ff42 	bl	da80 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    dbfc:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
    dc00:	eb08 0045 	add.w	r0, r8, r5, lsl #1
    dc04:	2202      	movs	r2, #2
    dc06:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    dc0a:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
    dc0c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
    dc10:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
    dc14:	d006      	beq.n	dc24 <eeprom_write_byte+0xec>
				uint16_t newval = i | (buf[i] << 8);
    dc16:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
    dc1a:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
    dc1c:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    dc20:	f7ff feb8 	bl	d994 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    dc24:	45a2      	cmp	sl, r4
    dc26:	d1e9      	bne.n	dbfc <eeprom_write_byte+0xc4>
		sector_index[sector] = index;
    dc28:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
    dc2c:	b042      	add	sp, #264	; 0x108
    dc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
    dc32:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
    dc36:	a902      	add	r1, sp, #8
    dc38:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
    dc3a:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
    dc3c:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    dc40:	f7ff fea8 	bl	d994 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    dc44:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
    dc48:	b042      	add	sp, #264	; 0x108
    dc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
    dc4e:	f7ff fe2f 	bl	d8b0 <eeprom_initialize>
    dc52:	e77f      	b.n	db54 <eeprom_write_byte+0x1c>
    dc54:	4770      	bx	lr
	uint8_t olddata=0xFF;
    dc56:	f04f 0cff 	mov.w	ip, #255	; 0xff
    dc5a:	e7a3      	b.n	dba4 <eeprom_write_byte+0x6c>
    dc5c:	2003546a 	.word	0x2003546a
    dc60:	04104105 	.word	0x04104105
    dc64:	200351e8 	.word	0x200351e8
    dc68:	000607c0 	.word	0x000607c0

0000dc6c <eeprom_write_block>:
	while (len--) {
    dc6c:	b162      	cbz	r2, dc88 <eeprom_write_block+0x1c>
{
    dc6e:	b570      	push	{r4, r5, r6, lr}
    dc70:	4605      	mov	r5, r0
    dc72:	460c      	mov	r4, r1
    dc74:	188e      	adds	r6, r1, r2
		eeprom_write_byte(p++, *src++);
    dc76:	4620      	mov	r0, r4
    dc78:	3401      	adds	r4, #1
    dc7a:	f815 1b01 	ldrb.w	r1, [r5], #1
    dc7e:	f7ff ff5b 	bl	db38 <eeprom_write_byte>
	while (len--) {
    dc82:	42b4      	cmp	r4, r6
    dc84:	d1f7      	bne.n	dc76 <eeprom_write_block+0xa>
}
    dc86:	bd70      	pop	{r4, r5, r6, pc}
    dc88:	4770      	bx	lr
    dc8a:	bf00      	nop

0000dc8c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    dc8c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    dc8e:	f7f2 fdd1 	bl	834 <setup>
	while (1) {
		loop();
    dc92:	f7f2 fae7 	bl	264 <loop>
		yield();
    dc96:	f001 fdff 	bl	f898 <yield>
	while (1) {
    dc9a:	e7fa      	b.n	dc92 <main+0x6>

0000dc9c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    dc9c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    dc9e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    dca2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    dca6:	d16d      	bne.n	dd84 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    dca8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    dcaa:	d341      	bcc.n	dd30 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    dcac:	f851 3b04 	ldr.w	r3, [r1], #4
    dcb0:	f840 3b04 	str.w	r3, [r0], #4
    dcb4:	f851 3b04 	ldr.w	r3, [r1], #4
    dcb8:	f840 3b04 	str.w	r3, [r0], #4
    dcbc:	f851 3b04 	ldr.w	r3, [r1], #4
    dcc0:	f840 3b04 	str.w	r3, [r0], #4
    dcc4:	f851 3b04 	ldr.w	r3, [r1], #4
    dcc8:	f840 3b04 	str.w	r3, [r0], #4
    dccc:	f851 3b04 	ldr.w	r3, [r1], #4
    dcd0:	f840 3b04 	str.w	r3, [r0], #4
    dcd4:	f851 3b04 	ldr.w	r3, [r1], #4
    dcd8:	f840 3b04 	str.w	r3, [r0], #4
    dcdc:	f851 3b04 	ldr.w	r3, [r1], #4
    dce0:	f840 3b04 	str.w	r3, [r0], #4
    dce4:	f851 3b04 	ldr.w	r3, [r1], #4
    dce8:	f840 3b04 	str.w	r3, [r0], #4
    dcec:	f851 3b04 	ldr.w	r3, [r1], #4
    dcf0:	f840 3b04 	str.w	r3, [r0], #4
    dcf4:	f851 3b04 	ldr.w	r3, [r1], #4
    dcf8:	f840 3b04 	str.w	r3, [r0], #4
    dcfc:	f851 3b04 	ldr.w	r3, [r1], #4
    dd00:	f840 3b04 	str.w	r3, [r0], #4
    dd04:	f851 3b04 	ldr.w	r3, [r1], #4
    dd08:	f840 3b04 	str.w	r3, [r0], #4
    dd0c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd10:	f840 3b04 	str.w	r3, [r0], #4
    dd14:	f851 3b04 	ldr.w	r3, [r1], #4
    dd18:	f840 3b04 	str.w	r3, [r0], #4
    dd1c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd20:	f840 3b04 	str.w	r3, [r0], #4
    dd24:	f851 3b04 	ldr.w	r3, [r1], #4
    dd28:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    dd2c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    dd2e:	d2bd      	bcs.n	dcac <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    dd30:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    dd32:	d311      	bcc.n	dd58 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    dd34:	f851 3b04 	ldr.w	r3, [r1], #4
    dd38:	f840 3b04 	str.w	r3, [r0], #4
    dd3c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd40:	f840 3b04 	str.w	r3, [r0], #4
    dd44:	f851 3b04 	ldr.w	r3, [r1], #4
    dd48:	f840 3b04 	str.w	r3, [r0], #4
    dd4c:	f851 3b04 	ldr.w	r3, [r1], #4
    dd50:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    dd54:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    dd56:	d2ed      	bcs.n	dd34 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    dd58:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    dd5a:	d305      	bcc.n	dd68 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    dd5c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    dd60:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    dd64:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    dd66:	d2f9      	bcs.n	dd5c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    dd68:	3204      	adds	r2, #4
	beq	.Ldone
    dd6a:	d008      	beq.n	dd7e <memcpy+0xe2>

	lsls	r2, r2, #31
    dd6c:	07d2      	lsls	r2, r2, #31
	itt ne
    dd6e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    dd70:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    dd74:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    dd78:	d301      	bcc.n	dd7e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    dd7a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    dd7c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    dd7e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    dd80:	4770      	bx	lr
    dd82:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    dd84:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    dd86:	d313      	bcc.n	ddb0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    dd88:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    dd8a:	d08d      	beq.n	dca8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    dd8c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    dd90:	d08a      	beq.n	dca8 <memcpy+0xc>

	rsb	r3, #4
    dd92:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    dd96:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    dd98:	07db      	lsls	r3, r3, #31
	itt ne
    dd9a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    dd9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    dda0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    dda4:	d380      	bcc.n	dca8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    dda6:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    ddaa:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    ddae:	e77b      	b.n	dca8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    ddb0:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    ddb2:	d3d9      	bcc.n	dd68 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    ddb4:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    ddb6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    ddba:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    ddbe:	d2f9      	bcs.n	ddb4 <memcpy+0x118>

	ldrb	r3, [r1]
    ddc0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    ddc2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    ddc4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    ddc6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    ddc8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    ddca:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    ddcc:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    ddce:	4770      	bx	lr

0000ddd0 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    ddd0:	f002 b87a 	b.w	fec8 <free>

0000ddd4 <ultoa>:
	int i=0, j;
    ddd4:	f101 3cff 	add.w	ip, r1, #4294967295
{
    ddd8:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    ddda:	4666      	mov	r6, ip
	int i=0, j;
    dddc:	2400      	movs	r4, #0
    ddde:	e000      	b.n	dde2 <ultoa+0xe>
		i++;
    dde0:	3401      	adds	r4, #1
		digit = val % radix;
    dde2:	fbb0 f5f2 	udiv	r5, r0, r2
    dde6:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ddea:	2b09      	cmp	r3, #9
    ddec:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    ddf0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    ddf4:	fa5f fe8e 	uxtb.w	lr, lr
    ddf8:	bf98      	it	ls
    ddfa:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    ddfe:	4290      	cmp	r0, r2
		val /= radix;
    de00:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    de02:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    de06:	d2eb      	bcs.n	dde0 <ultoa+0xc>
	buf[i + 1] = 0;
    de08:	1c63      	adds	r3, r4, #1
    de0a:	2200      	movs	r2, #0
    de0c:	18c8      	adds	r0, r1, r3
    de0e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    de10:	b17c      	cbz	r4, de32 <ultoa+0x5e>
		t = buf[j];
    de12:	4662      	mov	r2, ip
    de14:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    de18:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    de1c:	eba1 030c 	sub.w	r3, r1, ip
    de20:	3202      	adds	r2, #2
		buf[j] = buf[i];
    de22:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    de26:	3b01      	subs	r3, #1
    de28:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    de2a:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    de2c:	4423      	add	r3, r4
    de2e:	429a      	cmp	r2, r3
    de30:	dbef      	blt.n	de12 <ultoa+0x3e>
}
    de32:	4608      	mov	r0, r1
    de34:	bd70      	pop	{r4, r5, r6, pc}
    de36:	bf00      	nop

0000de38 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    de38:	eeb4 0a40 	vcmp.f32	s0, s0
{
    de3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    de40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    de44:	4616      	mov	r6, r2
	int awidth = abs(width);
    de46:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    de4a:	4607      	mov	r7, r0
    de4c:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    de50:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    de54:	eeb0 8a40 	vmov.f32	s16, s0
    de58:	b085      	sub	sp, #20
	if (isnanf(val)) {
    de5a:	f180 8148 	bvs.w	e0ee <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    de5e:	eef0 7ac0 	vabs.f32	s15, s0
    de62:	ed9f 7ac5 	vldr	s14, [pc, #788]	; e178 <dtostrf+0x340>
    de66:	eef4 7a47 	vcmp.f32	s15, s14
    de6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    de6e:	dd29      	ble.n	dec4 <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    de70:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    de74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    de78:	f100 80ed 	bmi.w	e056 <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    de7c:	2a03      	cmp	r2, #3
    de7e:	f340 8091 	ble.w	dfa4 <dtostrf+0x16c>
    de82:	2303      	movs	r3, #3
		if (width<0) {
    de84:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    de86:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    de8a:	f2c0 8085 	blt.w	df98 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    de8e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    de92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    de96:	f100 816a 	bmi.w	e16e <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    de9a:	2149      	movs	r1, #73	; 0x49
    de9c:	234e      	movs	r3, #78	; 0x4e
    de9e:	2046      	movs	r0, #70	; 0x46
    dea0:	1cf4      	adds	r4, r6, #3
    dea2:	7031      	strb	r1, [r6, #0]
    dea4:	70b0      	strb	r0, [r6, #2]
    dea6:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    dea8:	b122      	cbz	r2, deb4 <dtostrf+0x7c>
			*buf++ = ' ';
    deaa:	4620      	mov	r0, r4
    deac:	2120      	movs	r1, #32
    deae:	4414      	add	r4, r2
    deb0:	f003 ff82 	bl	11db8 <memset>
			awidth--;
		}
		*buf = 0;
    deb4:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    deb6:	4620      	mov	r0, r4
		*buf = 0;
    deb8:	7023      	strb	r3, [r4, #0]
}
    deba:	b005      	add	sp, #20
    debc:	ecbd 8b02 	vpop	{d8}
    dec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    dec4:	4689      	mov	r9, r1
    dec6:	460d      	mov	r5, r1
    dec8:	aa02      	add	r2, sp, #8
    deca:	a901      	add	r1, sp, #4
    decc:	4648      	mov	r0, r9
    dece:	f003 fc9f 	bl	11810 <fcvtf>
	if (precision == 0 && decpt == 0) {
    ded2:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    ded6:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    ded8:	ea59 030a 	orrs.w	r3, r9, sl
    dedc:	d172      	bne.n	dfc4 <dtostrf+0x18c>
		decpt++;
    dede:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    dee0:	7802      	ldrb	r2, [r0, #0]
    dee2:	4ca6      	ldr	r4, [pc, #664]	; (e17c <dtostrf+0x344>)
		decpt++;
    dee4:	469a      	mov	sl, r3
    dee6:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    dee8:	4ba5      	ldr	r3, [pc, #660]	; (e180 <dtostrf+0x348>)
		decpt++;
    deea:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    deec:	2a34      	cmp	r2, #52	; 0x34
    deee:	bf88      	it	hi
    def0:	461c      	movhi	r4, r3
	if (sign) reqd++;
    def2:	9b02      	ldr	r3, [sp, #8]
    def4:	2b00      	cmp	r3, #0
    def6:	d07d      	beq.n	dff4 <dtostrf+0x1bc>
    def8:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    defc:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    df00:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    df04:	f1bb 0f00 	cmp.w	fp, #0
    df08:	f340 80a1 	ble.w	e04e <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    df0c:	465a      	mov	r2, fp
    df0e:	2120      	movs	r1, #32
    df10:	4630      	mov	r0, r6
		e += pad;
    df12:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    df14:	f003 ff50 	bl	11db8 <memset>
    df18:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    df1c:	222d      	movs	r2, #45	; 0x2d
    df1e:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    df22:	f1ba 0f00 	cmp.w	sl, #0
    df26:	d177      	bne.n	e018 <dtostrf+0x1e0>
    df28:	f1b9 0f00 	cmp.w	r9, #0
    df2c:	d006      	beq.n	df3c <dtostrf+0x104>
		*p++ = '0';
    df2e:	461a      	mov	r2, r3
    df30:	2130      	movs	r1, #48	; 0x30
    df32:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    df36:	212e      	movs	r1, #46	; 0x2e
    df38:	7059      	strb	r1, [r3, #1]
    df3a:	4613      	mov	r3, r2
	while (p < e) {
    df3c:	42ab      	cmp	r3, r5
    df3e:	d21f      	bcs.n	df80 <dtostrf+0x148>
		*p++ = *s++;
    df40:	46a4      	mov	ip, r4
    df42:	4619      	mov	r1, r3
    df44:	f81c 2b01 	ldrb.w	r2, [ip], #1
    df48:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    df4c:	42a9      	cmp	r1, r5
    df4e:	d018      	beq.n	df82 <dtostrf+0x14a>
    df50:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    df52:	202e      	movs	r0, #46	; 0x2e
    df54:	3c01      	subs	r4, #1
    df56:	e00b      	b.n	df70 <dtostrf+0x138>
    df58:	7058      	strb	r0, [r3, #1]
    df5a:	3302      	adds	r3, #2
		if (p == e) break;
    df5c:	3c01      	subs	r4, #1
	while (p < e) {
    df5e:	42ab      	cmp	r3, r5
		*p++ = *s++;
    df60:	4619      	mov	r1, r3
	while (p < e) {
    df62:	d20d      	bcs.n	df80 <dtostrf+0x148>
		*p++ = *s++;
    df64:	f81c 2b01 	ldrb.w	r2, [ip], #1
    df68:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    df6c:	42a9      	cmp	r1, r5
    df6e:	d008      	beq.n	df82 <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    df70:	9401      	str	r4, [sp, #4]
    df72:	2c00      	cmp	r4, #0
    df74:	d0f0      	beq.n	df58 <dtostrf+0x120>
    df76:	460b      	mov	r3, r1
		if (p == e) break;
    df78:	3c01      	subs	r4, #1
	while (p < e) {
    df7a:	42ab      	cmp	r3, r5
		*p++ = *s++;
    df7c:	4619      	mov	r1, r3
	while (p < e) {
    df7e:	d3f1      	bcc.n	df64 <dtostrf+0x12c>
    df80:	461d      	mov	r5, r3
	if (width < 0) {
    df82:	2f00      	cmp	r7, #0
    df84:	db6b      	blt.n	e05e <dtostrf+0x226>
	return buf;
    df86:	4634      	mov	r4, r6
	*p = 0;
    df88:	2300      	movs	r3, #0
}
    df8a:	4620      	mov	r0, r4
	*p = 0;
    df8c:	702b      	strb	r3, [r5, #0]
}
    df8e:	b005      	add	sp, #20
    df90:	ecbd 8b02 	vpop	{d8}
    df94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    df98:	b122      	cbz	r2, dfa4 <dtostrf+0x16c>
				*buf++ = ' ';
    df9a:	4630      	mov	r0, r6
    df9c:	2120      	movs	r1, #32
    df9e:	4416      	add	r6, r2
    dfa0:	f003 ff0a 	bl	11db8 <memset>
		if (val<0) *buf++ = '-';
    dfa4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    dfa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dfac:	f140 80bd 	bpl.w	e12a <dtostrf+0x2f2>
    dfb0:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    dfb2:	2249      	movs	r2, #73	; 0x49
    dfb4:	234e      	movs	r3, #78	; 0x4e
    dfb6:	2046      	movs	r0, #70	; 0x46
    dfb8:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    dfba:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    dfbc:	70f0      	strb	r0, [r6, #3]
    dfbe:	7072      	strb	r2, [r6, #1]
    dfc0:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    dfc2:	e777      	b.n	deb4 <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    dfc4:	f1ca 0300 	rsb	r3, sl, #0
    dfc8:	4599      	cmp	r9, r3
    dfca:	da57      	bge.n	e07c <dtostrf+0x244>
		decpt = -precision;
    dfcc:	f04f 0801 	mov.w	r8, #1
    dfd0:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    dfd4:	4c69      	ldr	r4, [pc, #420]	; (e17c <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    dfd6:	45c2      	cmp	sl, r8
		decpt = -precision;
    dfd8:	4640      	mov	r0, r8
    dfda:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    dfde:	bfb8      	it	lt
    dfe0:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    dfe4:	f1ba 0f00 	cmp.w	sl, #0
    dfe8:	d152      	bne.n	e090 <dtostrf+0x258>
	if (sign) reqd++;
    dfea:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    dfec:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    dff0:	2b00      	cmp	r3, #0
    dff2:	d181      	bne.n	def8 <dtostrf+0xc0>
	pad = width - reqd;
    dff4:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    dff8:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    dffc:	f1bb 0f00 	cmp.w	fp, #0
    e000:	dd27      	ble.n	e052 <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    e002:	465a      	mov	r2, fp
    e004:	2120      	movs	r1, #32
    e006:	4630      	mov	r0, r6
		e += pad;
    e008:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    e00a:	f003 fed5 	bl	11db8 <memset>
    e00e:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    e012:	f1ba 0f00 	cmp.w	sl, #0
    e016:	d087      	beq.n	df28 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    e018:	f1ba 0f00 	cmp.w	sl, #0
    e01c:	da8e      	bge.n	df3c <dtostrf+0x104>
    e01e:	f1b9 0f00 	cmp.w	r9, #0
    e022:	d08b      	beq.n	df3c <dtostrf+0x104>
		*p++ = '0';
    e024:	4618      	mov	r0, r3
		*p++ = '.';
    e026:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    e028:	2130      	movs	r1, #48	; 0x30
    e02a:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    e02e:	705a      	strb	r2, [r3, #1]
    e030:	4602      	mov	r2, r0
    e032:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    e034:	3301      	adds	r3, #1
			*p++ = '0';
    e036:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    e03a:	d1fb      	bne.n	e034 <dtostrf+0x1fc>
			*p++ = '0';
    e03c:	f1ba 0f00 	cmp.w	sl, #0
    e040:	9301      	str	r3, [sp, #4]
    e042:	f1ca 0300 	rsb	r3, sl, #0
    e046:	bfa8      	it	ge
    e048:	2301      	movge	r3, #1
    e04a:	4403      	add	r3, r0
    e04c:	e776      	b.n	df3c <dtostrf+0x104>
	if (pad > 0) {
    e04e:	4633      	mov	r3, r6
    e050:	e764      	b.n	df1c <dtostrf+0xe4>
    e052:	4633      	mov	r3, r6
    e054:	e765      	b.n	df22 <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e056:	2a04      	cmp	r2, #4
    e058:	ddaa      	ble.n	dfb0 <dtostrf+0x178>
    e05a:	2304      	movs	r3, #4
    e05c:	e712      	b.n	de84 <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    e05e:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    e060:	f1b8 0f00 	cmp.w	r8, #0
    e064:	ea6f 0208 	mvn.w	r2, r8
    e068:	da8d      	bge.n	df86 <dtostrf+0x14e>
    e06a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e06e:	2120      	movs	r1, #32
    e070:	4628      	mov	r0, r5
    e072:	3201      	adds	r2, #1
    e074:	4415      	add	r5, r2
    e076:	f003 fe9f 	bl	11db8 <memset>
    e07a:	e784      	b.n	df86 <dtostrf+0x14e>
	reqd = strlen(s);
    e07c:	f004 fa80 	bl	12580 <strlen>
    e080:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    e082:	45c2      	cmp	sl, r8
    e084:	bfb8      	it	lt
    e086:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    e08a:	f1ba 0f00 	cmp.w	sl, #0
    e08e:	d0ac      	beq.n	dfea <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    e090:	f1ba 0f00 	cmp.w	sl, #0
    e094:	f6bf af2d 	bge.w	def2 <dtostrf+0xba>
    e098:	f1b9 0f00 	cmp.w	r9, #0
    e09c:	f43f af29 	beq.w	def2 <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    e0a0:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    e0a4:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    e0a8:	4283      	cmp	r3, r0
    e0aa:	f4bf af22 	bcs.w	def2 <dtostrf+0xba>
			while (newPrecision > 0) {
    e0ae:	f1b9 0f00 	cmp.w	r9, #0
    e0b2:	dd05      	ble.n	e0c0 <dtostrf+0x288>
				val *= 10.0f;
    e0b4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    e0b8:	3d01      	subs	r5, #1
				val *= 10.0f;
    e0ba:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    e0be:	d1fb      	bne.n	e0b8 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e0c0:	aa02      	add	r2, sp, #8
    e0c2:	eeb0 0a48 	vmov.f32	s0, s16
    e0c6:	4628      	mov	r0, r5
    e0c8:	a903      	add	r1, sp, #12
    e0ca:	f003 fba1 	bl	11810 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e0ce:	f8dd a004 	ldr.w	sl, [sp, #4]
    e0d2:	9b03      	ldr	r3, [sp, #12]
    e0d4:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e0d8:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e0da:	eba3 030a 	sub.w	r3, r3, sl
    e0de:	4293      	cmp	r3, r2
    e0e0:	f47f af07 	bne.w	def2 <dtostrf+0xba>
    e0e4:	f10a 0a01 	add.w	sl, sl, #1
    e0e8:	f8cd a004 	str.w	sl, [sp, #4]
    e0ec:	e701      	b.n	def2 <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    e0ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    e0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e0f6:	bf4c      	ite	mi
    e0f8:	2304      	movmi	r3, #4
    e0fa:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e0fc:	4293      	cmp	r3, r2
    e0fe:	da22      	bge.n	e146 <dtostrf+0x30e>
		if (width<0) {
    e100:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e102:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    e106:	db18      	blt.n	e13a <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e108:	ee10 3a10 	vmov	r3, s0
    e10c:	2b00      	cmp	r3, #0
    e10e:	da02      	bge.n	e116 <dtostrf+0x2de>
    e110:	232d      	movs	r3, #45	; 0x2d
    e112:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e116:	234e      	movs	r3, #78	; 0x4e
    e118:	2141      	movs	r1, #65	; 0x41
    e11a:	1cf4      	adds	r4, r6, #3
    e11c:	7033      	strb	r3, [r6, #0]
    e11e:	7071      	strb	r1, [r6, #1]
    e120:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    e122:	2a00      	cmp	r2, #0
    e124:	f47f aec1 	bne.w	deaa <dtostrf+0x72>
    e128:	e6c4      	b.n	deb4 <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e12a:	2149      	movs	r1, #73	; 0x49
    e12c:	224e      	movs	r2, #78	; 0x4e
    e12e:	2346      	movs	r3, #70	; 0x46
    e130:	1cf4      	adds	r4, r6, #3
    e132:	7031      	strb	r1, [r6, #0]
    e134:	7072      	strb	r2, [r6, #1]
    e136:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    e138:	e6bc      	b.n	deb4 <dtostrf+0x7c>
			while (awidth) {
    e13a:	b122      	cbz	r2, e146 <dtostrf+0x30e>
				*buf++ = ' ';
    e13c:	4630      	mov	r0, r6
    e13e:	2120      	movs	r1, #32
    e140:	4416      	add	r6, r2
    e142:	f003 fe39 	bl	11db8 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e146:	ee18 3a10 	vmov	r3, s16
    e14a:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e14c:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e150:	db05      	blt.n	e15e <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e152:	2241      	movs	r2, #65	; 0x41
    e154:	1cf4      	adds	r4, r6, #3
    e156:	7033      	strb	r3, [r6, #0]
    e158:	7072      	strb	r2, [r6, #1]
    e15a:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    e15c:	e6aa      	b.n	deb4 <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e15e:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e160:	2241      	movs	r2, #65	; 0x41
    e162:	1d34      	adds	r4, r6, #4
    e164:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e166:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e168:	70b2      	strb	r2, [r6, #2]
    e16a:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    e16c:	e6a2      	b.n	deb4 <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    e16e:	232d      	movs	r3, #45	; 0x2d
    e170:	f806 3b01 	strb.w	r3, [r6], #1
    e174:	e691      	b.n	de9a <dtostrf+0x62>
    e176:	bf00      	nop
    e178:	7f7fffff 	.word	0x7f7fffff
    e17c:	20007e50 	.word	0x20007e50
    e180:	20007e54 	.word	0x20007e54

0000e184 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    e184:	4a07      	ldr	r2, [pc, #28]	; (e1a4 <rtc_get+0x20>)
    e186:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    e188:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    e18a:	4619      	mov	r1, r3
    e18c:	4684      	mov	ip, r0
    e18e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    e190:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    e192:	4299      	cmp	r1, r3
    e194:	d1f9      	bne.n	e18a <rtc_get+0x6>
    e196:	4584      	cmp	ip, r0
    e198:	d1f7      	bne.n	e18a <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    e19a:	0bdb      	lsrs	r3, r3, #15
}
    e19c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    e1a0:	4770      	bx	lr
    e1a2:	bf00      	nop
    e1a4:	400d4000 	.word	0x400d4000

0000e1a8 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    e1a8:	4910      	ldr	r1, [pc, #64]	; (e1ec <rtc_set+0x44>)
    e1aa:	688b      	ldr	r3, [r1, #8]
    e1ac:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    e1b0:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    e1b2:	688b      	ldr	r3, [r1, #8]
    e1b4:	07db      	lsls	r3, r3, #31
    e1b6:	d4fc      	bmi.n	e1b2 <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    e1b8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    e1ba:	4a0c      	ldr	r2, [pc, #48]	; (e1ec <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    e1bc:	f023 0301 	bic.w	r3, r3, #1
    e1c0:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    e1c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    e1c4:	07d9      	lsls	r1, r3, #31
    e1c6:	d4fc      	bmi.n	e1c2 <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    e1c8:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    e1ca:	4908      	ldr	r1, [pc, #32]	; (e1ec <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    e1cc:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    e1ce:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    e1d0:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    e1d2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    e1d4:	f043 0301 	orr.w	r3, r3, #1
    e1d8:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    e1da:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    e1dc:	07db      	lsls	r3, r3, #31
    e1de:	d5fc      	bpl.n	e1da <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    e1e0:	688b      	ldr	r3, [r1, #8]
    e1e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    e1e6:	608b      	str	r3, [r1, #8]
}
    e1e8:	4770      	bx	lr
    e1ea:	bf00      	nop
    e1ec:	400d4000 	.word	0x400d4000

0000e1f0 <unused_interrupt_vector>:
	__disable_irq();
    e1f0:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    e1f2:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    e1f6:	4c52      	ldr	r4, [pc, #328]	; (e340 <unused_interrupt_vector+0x150>)
    e1f8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    e1fc:	f01e 0f04 	tst.w	lr, #4
    e200:	bf0c      	ite	eq
    e202:	f3ef 8208 	mrseq	r2, MSP
    e206:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    e20a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    e20e:	4e4d      	ldr	r6, [pc, #308]	; (e344 <unused_interrupt_vector+0x154>)
	while (p < end) {
    e210:	4d4d      	ldr	r5, [pc, #308]	; (e348 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    e212:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    e216:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    e21a:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    e21e:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    e222:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    e226:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    e22a:	6993      	ldr	r3, [r2, #24]
    e22c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    e230:	69d3      	ldr	r3, [r2, #28]
    e232:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    e236:	f000 f8d1 	bl	e3dc <tempmonGetTemp>
    e23a:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    e23e:	f7ff ffa1 	bl	e184 <rtc_get>
	info->len = sizeof(*info) / 4;
    e242:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    e244:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    e248:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    e24c:	460b      	mov	r3, r1
    e24e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    e252:	493e      	ldr	r1, [pc, #248]	; (e34c <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    e254:	1d30      	adds	r0, r6, #4
    e256:	405a      	eors	r2, r3
    e258:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    e25a:	f002 0301 	and.w	r3, r2, #1
    e25e:	3c01      	subs	r4, #1
    e260:	fb01 f303 	mul.w	r3, r1, r3
    e264:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    e268:	d1f7      	bne.n	e25a <unused_interrupt_vector+0x6a>
	while (p < end) {
    e26a:	42a8      	cmp	r0, r5
    e26c:	d002      	beq.n	e274 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    e26e:	6873      	ldr	r3, [r6, #4]
    e270:	4606      	mov	r6, r0
    e272:	e7ef      	b.n	e254 <unused_interrupt_vector+0x64>
	info->crc = crc;
    e274:	4b32      	ldr	r3, [pc, #200]	; (e340 <unused_interrupt_vector+0x150>)
    e276:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    e27a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e27e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e282:	4930      	ldr	r1, [pc, #192]	; (e344 <unused_interrupt_vector+0x154>)
    e284:	4a32      	ldr	r2, [pc, #200]	; (e350 <unused_interrupt_vector+0x160>)
    e286:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    e28a:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    e28e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e292:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    e296:	4a2f      	ldr	r2, [pc, #188]	; (e354 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    e298:	2502      	movs	r5, #2
    e29a:	482f      	ldr	r0, [pc, #188]	; (e358 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    e29c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e29e:	492f      	ldr	r1, [pc, #188]	; (e35c <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    e2a0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    e2a4:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    e2a6:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    e2a8:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e2aa:	482d      	ldr	r0, [pc, #180]	; (e360 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    e2ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    e2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e2b4:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e2b6:	680b      	ldr	r3, [r1, #0]
    e2b8:	4283      	cmp	r3, r0
    e2ba:	d83d      	bhi.n	e338 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    e2bc:	4d26      	ldr	r5, [pc, #152]	; (e358 <unused_interrupt_vector+0x168>)
    e2be:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    e2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e2c4:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    e2c8:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    e2ca:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    e2cc:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    e2d0:	4924      	ldr	r1, [pc, #144]	; (e364 <unused_interrupt_vector+0x174>)
    e2d2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    e2d6:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    e2da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    e2de:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    e2e2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    e2e6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    e2ea:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    e2ee:	e001      	b.n	e2f4 <unused_interrupt_vector+0x104>
		usb_isr();
    e2f0:	f000 f9ca 	bl	e688 <usb_isr>
		if (PIT_TFLG0) {
    e2f4:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    e2f8:	2b00      	cmp	r3, #0
    e2fa:	d0f9      	beq.n	e2f0 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    e2fc:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    e2fe:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    e302:	2c4f      	cmp	r4, #79	; 0x4f
    e304:	d9f4      	bls.n	e2f0 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    e306:	4b18      	ldr	r3, [pc, #96]	; (e368 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    e308:	2002      	movs	r0, #2
    e30a:	4918      	ldr	r1, [pc, #96]	; (e36c <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    e30c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    e310:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    e314:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e316:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    e31a:	b93b      	cbnz	r3, e32c <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    e31c:	4814      	ldr	r0, [pc, #80]	; (e370 <unused_interrupt_vector+0x180>)
    e31e:	4915      	ldr	r1, [pc, #84]	; (e374 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e320:	4a0d      	ldr	r2, [pc, #52]	; (e358 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    e322:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e324:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    e328:	2b00      	cmp	r3, #0
    e32a:	d0fa      	beq.n	e322 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    e32c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e330:	4a11      	ldr	r2, [pc, #68]	; (e378 <unused_interrupt_vector+0x188>)
    e332:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    e336:	e7fe      	b.n	e336 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e338:	f7ff f834 	bl	d3a4 <set_arm_clock>
    e33c:	e7be      	b.n	e2bc <unused_interrupt_vector+0xcc>
    e33e:	bf00      	nop
    e340:	2027ff00 	.word	0x2027ff00
    e344:	2027ff80 	.word	0x2027ff80
    e348:	2027ffa8 	.word	0x2027ffa8
    e34c:	edb88320 	.word	0xedb88320
    e350:	2027ffa0 	.word	0x2027ffa0
    e354:	400fc000 	.word	0x400fc000
    e358:	40084000 	.word	0x40084000
    e35c:	20008a08 	.word	0x20008a08
    e360:	0bcd3d80 	.word	0x0bcd3d80
    e364:	00249f00 	.word	0x00249f00
    e368:	400d9000 	.word	0x400d9000
    e36c:	402e0000 	.word	0x402e0000
    e370:	400f8000 	.word	0x400f8000
    e374:	0bad00f1 	.word	0x0bad00f1
    e378:	05fa0004 	.word	0x05fa0004

0000e37c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    e37c:	490a      	ldr	r1, [pc, #40]	; (e3a8 <_sbrk+0x2c>)
    e37e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    e380:	b138      	cbz	r0, e392 <_sbrk+0x16>
{
    e382:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    e384:	1813      	adds	r3, r2, r0
    e386:	4809      	ldr	r0, [pc, #36]	; (e3ac <_sbrk+0x30>)
    e388:	4283      	cmp	r3, r0
    e38a:	d804      	bhi.n	e396 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    e38c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    e38e:	600b      	str	r3, [r1, #0]
}
    e390:	bd08      	pop	{r3, pc}
    e392:	4610      	mov	r0, r2
    e394:	4770      	bx	lr
                        errno = ENOMEM;
    e396:	f003 fe9b 	bl	120d0 <__errno>
    e39a:	230c      	movs	r3, #12
                        return (void *)-1;
    e39c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    e3a0:	6003      	str	r3, [r0, #0]
}
    e3a2:	4610      	mov	r0, r2
    e3a4:	bd08      	pop	{r3, pc}
    e3a6:	bf00      	nop
    e3a8:	20008a24 	.word	0x20008a24
    e3ac:	20280000 	.word	0x20280000

0000e3b0 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    e3b0:	2000      	movs	r0, #0
    e3b2:	4770      	bx	lr

0000e3b4 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    e3b4:	f04f 30ff 	mov.w	r0, #4294967295
    e3b8:	4770      	bx	lr
    e3ba:	bf00      	nop

0000e3bc <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    e3bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    e3c0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    e3c2:	604b      	str	r3, [r1, #4]
}
    e3c4:	4770      	bx	lr
    e3c6:	bf00      	nop

0000e3c8 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    e3c8:	2001      	movs	r0, #1
    e3ca:	4770      	bx	lr

0000e3cc <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    e3cc:	f04f 30ff 	mov.w	r0, #4294967295
    e3d0:	4770      	bx	lr
    e3d2:	bf00      	nop

0000e3d4 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    e3d4:	bf30      	wfi
    e3d6:	e7fd      	b.n	e3d4 <abort>

0000e3d8 <Panic_Temp_isr>:
  unused_interrupt_vector();
    e3d8:	f7ff bf0a 	b.w	e1f0 <unused_interrupt_vector>

0000e3dc <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    e3dc:	4a12      	ldr	r2, [pc, #72]	; (e428 <tempmonGetTemp+0x4c>)
    e3de:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    e3e2:	075b      	lsls	r3, r3, #29
    e3e4:	d5fb      	bpl.n	e3de <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    e3e6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    e3ea:	4810      	ldr	r0, [pc, #64]	; (e42c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    e3ec:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    e3f0:	490f      	ldr	r1, [pc, #60]	; (e430 <tempmonGetTemp+0x54>)
    e3f2:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    e3f6:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    e3fa:	ed91 6a00 	vldr	s12, [r1]
    e3fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    e402:	4a0c      	ldr	r2, [pc, #48]	; (e434 <tempmonGetTemp+0x58>)
    e404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e408:	4b0b      	ldr	r3, [pc, #44]	; (e438 <tempmonGetTemp+0x5c>)
    e40a:	edd2 6a00 	vldr	s13, [r2]
    e40e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    e412:	ed93 7a00 	vldr	s14, [r3]
    e416:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    e41a:	ee67 7a86 	vmul.f32	s15, s15, s12
    e41e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    e422:	ee37 0a40 	vsub.f32	s0, s14, s0
    e426:	4770      	bx	lr
    e428:	400d8100 	.word	0x400d8100
    e42c:	20034d04 	.word	0x20034d04
    e430:	20034d0c 	.word	0x20034d0c
    e434:	20034d10 	.word	0x20034d10
    e438:	20034d08 	.word	0x20034d08

0000e43c <endpoint0_receive>:
{
    e43c:	b430      	push	{r4, r5}
	if (len > 0) {
    e43e:	2900      	cmp	r1, #0
    e440:	d131      	bne.n	e4a6 <endpoint0_receive+0x6a>
    e442:	4c2b      	ldr	r4, [pc, #172]	; (e4f0 <endpoint0_receive+0xb4>)
	endpoint0_transfer_ack.next = 1;
    e444:	4b2b      	ldr	r3, [pc, #172]	; (e4f4 <endpoint0_receive+0xb8>)
    e446:	2101      	movs	r1, #1
    e448:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e44a:	b1da      	cbz	r2, e484 <endpoint0_receive+0x48>
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e44c:	492a      	ldr	r1, [pc, #168]	; (e4f8 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    e44e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e450:	f248 0580 	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e454:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    e458:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e45a:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    e45c:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e460:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e464:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    e468:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e46c:	4313      	orrs	r3, r2
    e46e:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e472:	4b22      	ldr	r3, [pc, #136]	; (e4fc <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    e474:	4920      	ldr	r1, [pc, #128]	; (e4f8 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e476:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    e478:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e47c:	2b00      	cmp	r3, #0
    e47e:	d1fb      	bne.n	e478 <endpoint0_receive+0x3c>
}
    e480:	bc30      	pop	{r4, r5}
    e482:	4770      	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e484:	491c      	ldr	r1, [pc, #112]	; (e4f8 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e486:	2580      	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e488:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    e48c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e48e:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    e490:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e494:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e498:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e49c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e4a0:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e4a4:	e7e5      	b.n	e472 <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e4a6:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    e4a8:	4b15      	ldr	r3, [pc, #84]	; (e500 <endpoint0_receive+0xc4>)
    e4aa:	2401      	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    e4ac:	2500      	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e4ae:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    e4b2:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    e4b4:	601c      	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e4b6:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e4b8:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    e4bc:	4c0c      	ldr	r4, [pc, #48]	; (e4f0 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e4be:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e4c0:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    e4c4:	60e5      	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e4c6:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e4c8:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e4cc:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    e4d0:	60a3      	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e4d2:	6159      	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    e4d4:	4908      	ldr	r1, [pc, #32]	; (e4f8 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e4d6:	6198      	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    e4d8:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e4dc:	f043 0301 	orr.w	r3, r3, #1
    e4e0:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    e4e4:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e4e8:	2b00      	cmp	r3, #0
    e4ea:	d1fb      	bne.n	e4e4 <endpoint0_receive+0xa8>
    e4ec:	e7aa      	b.n	e444 <endpoint0_receive+0x8>
    e4ee:	bf00      	nop
    e4f0:	20000000 	.word	0x20000000
    e4f4:	20009700 	.word	0x20009700
    e4f8:	402e0000 	.word	0x402e0000
    e4fc:	20034b44 	.word	0x20034b44
    e500:	20009720 	.word	0x20009720

0000e504 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    e504:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    e506:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    e508:	b11b      	cbz	r3, e512 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    e50a:	6853      	ldr	r3, [r2, #4]
    e50c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    e510:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    e512:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    e514:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    e516:	b33c      	cbz	r4, e568 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    e518:	4b1a      	ldr	r3, [pc, #104]	; (e584 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    e51a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    e51c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    e520:	420c      	tst	r4, r1
    e522:	d11d      	bne.n	e560 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    e524:	4e18      	ldr	r6, [pc, #96]	; (e588 <schedule_transfer+0x84>)
    e526:	6877      	ldr	r7, [r6, #4]
    e528:	e004      	b.n	e534 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    e52a:	6874      	ldr	r4, [r6, #4]
    e52c:	1be4      	subs	r4, r4, r7
    e52e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    e532:	d20b      	bcs.n	e54c <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    e534:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    e538:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    e53c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    e540:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    e544:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    e548:	0464      	lsls	r4, r4, #17
    e54a:	d5ee      	bpl.n	e52a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    e54c:	400d      	ands	r5, r1
    e54e:	d107      	bne.n	e560 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    e550:	4c0c      	ldr	r4, [pc, #48]	; (e584 <schedule_transfer+0x80>)
		endpoint->status = 0;
    e552:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    e556:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e55a:	430b      	orrs	r3, r1
    e55c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    e560:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    e562:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    e564:	bcf0      	pop	{r4, r5, r6, r7}
    e566:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    e568:	4d06      	ldr	r5, [pc, #24]	; (e584 <schedule_transfer+0x80>)
	endpoint->status = 0;
    e56a:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    e56e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    e572:	430b      	orrs	r3, r1
    e574:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    e578:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    e57a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    e57c:	b662      	cpsie	i
}
    e57e:	bcf0      	pop	{r4, r5, r6, r7}
    e580:	4770      	bx	lr
    e582:	bf00      	nop
    e584:	402e0000 	.word	0x402e0000
    e588:	e0001000 	.word	0xe0001000

0000e58c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    e58c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    e58e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    e590:	b19d      	cbz	r5, e5ba <run_callbacks+0x2e>
    e592:	4606      	mov	r6, r0
    e594:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    e596:	2400      	movs	r4, #0
    e598:	e003      	b.n	e5a2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    e59a:	6812      	ldr	r2, [r2, #0]
		count++;
    e59c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    e59e:	2a01      	cmp	r2, #1
    e5a0:	d00c      	beq.n	e5bc <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    e5a2:	6853      	ldr	r3, [r2, #4]
    e5a4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    e5a8:	d0f7      	beq.n	e59a <run_callbacks+0xe>
			ep->first_transfer = t;
    e5aa:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    e5ac:	b12c      	cbz	r4, e5ba <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    e5ae:	4628      	mov	r0, r5
		ep->callback_function(first);
    e5b0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    e5b2:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    e5b4:	4798      	blx	r3
	while (count) {
    e5b6:	3c01      	subs	r4, #1
    e5b8:	d1f9      	bne.n	e5ae <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    e5ba:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    e5bc:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    e5c0:	e7f4      	b.n	e5ac <run_callbacks+0x20>
    e5c2:	bf00      	nop

0000e5c4 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    e5c4:	b430      	push	{r4, r5}
	if (len > 0) {
    e5c6:	b9d9      	cbnz	r1, e600 <endpoint0_transmit.constprop.0+0x3c>
    e5c8:	4c1f      	ldr	r4, [pc, #124]	; (e648 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    e5ca:	4b20      	ldr	r3, [pc, #128]	; (e64c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    e5cc:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e5ce:	4a20      	ldr	r2, [pc, #128]	; (e650 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    e5d0:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e5d2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    e5d6:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    e5d8:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    e5da:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e5de:	2480      	movs	r4, #128	; 0x80
    e5e0:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e5e2:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    e5e6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    e5ea:	481a      	ldr	r0, [pc, #104]	; (e654 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    e5ec:	432b      	orrs	r3, r5
    e5ee:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    e5f2:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    e5f4:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e5f8:	2b00      	cmp	r3, #0
    e5fa:	d1fb      	bne.n	e5f4 <endpoint0_transmit.constprop.0+0x30>
}
    e5fc:	bc30      	pop	{r4, r5}
    e5fe:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e600:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    e602:	4b15      	ldr	r3, [pc, #84]	; (e658 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    e604:	4c10      	ldr	r4, [pc, #64]	; (e648 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    e606:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e608:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    e60c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    e60e:	4a10      	ldr	r2, [pc, #64]	; (e650 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e610:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e612:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    e616:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e618:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e61a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    e61e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e620:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e622:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e626:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e62a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    e62c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e62e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    e630:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    e632:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e63a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    e63e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e642:	2b00      	cmp	r3, #0
    e644:	d1fb      	bne.n	e63e <endpoint0_transmit.constprop.0+0x7a>
    e646:	e7c0      	b.n	e5ca <endpoint0_transmit.constprop.0+0x6>
    e648:	20000000 	.word	0x20000000
    e64c:	20009700 	.word	0x20009700
    e650:	402e0000 	.word	0x402e0000
    e654:	20034b44 	.word	0x20034b44
    e658:	20009720 	.word	0x20009720

0000e65c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    e65c:	4908      	ldr	r1, [pc, #32]	; (e680 <usb_stop_sof_interrupts+0x24>)
    e65e:	2201      	movs	r2, #1
    e660:	780b      	ldrb	r3, [r1, #0]
    e662:	fa02 f000 	lsl.w	r0, r2, r0
    e666:	ea23 0000 	bic.w	r0, r3, r0
    e66a:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    e66c:	b930      	cbnz	r0, e67c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    e66e:	4a05      	ldr	r2, [pc, #20]	; (e684 <usb_stop_sof_interrupts+0x28>)
    e670:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    e674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e678:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    e67c:	4770      	bx	lr
    e67e:	bf00      	nop
    e680:	2003546f 	.word	0x2003546f
    e684:	402e0000 	.word	0x402e0000

0000e688 <usb_isr>:
{
    e688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    e68c:	4caa      	ldr	r4, [pc, #680]	; (e938 <usb_isr+0x2b0>)
{
    e68e:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    e690:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    e694:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
    e696:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    e69a:	d54f      	bpl.n	e73c <usb_isr+0xb4>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    e69c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    e6a0:	2b00      	cmp	r3, #0
    e6a2:	d046      	beq.n	e732 <usb_isr+0xaa>
    e6a4:	4da5      	ldr	r5, [pc, #660]	; (e93c <usb_isr+0x2b4>)
    e6a6:	f8df 92b0 	ldr.w	r9, [pc, #688]	; e958 <usb_isr+0x2d0>
		reply_buffer[0] = usb_configuration;
    e6aa:	f8df 82c8 	ldr.w	r8, [pc, #712]	; e974 <usb_isr+0x2ec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e6ae:	4fa4      	ldr	r7, [pc, #656]	; (e940 <usb_isr+0x2b8>)
			USB1_ENDPTSETUPSTAT = setupstatus;
    e6b0:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    e6b4:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    e6b8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e6bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e6c0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    e6c4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e6c8:	049b      	lsls	r3, r3, #18
    e6ca:	d5f5      	bpl.n	e6b8 <usb_isr+0x30>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    e6cc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e6d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    e6d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    e6d8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e6dc:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    e6e0:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    e6e4:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    e6e8:	d1fa      	bne.n	e6e0 <usb_isr+0x58>
			endpoint0_notify_mask = 0;
    e6ea:	b291      	uxth	r1, r2
    e6ec:	f8c9 3000 	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    e6f0:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    e6f4:	f000 81b8 	beq.w	ea68 <usb_isr+0x3e0>
    e6f8:	f200 80f3 	bhi.w	e8e2 <usb_isr+0x25a>
    e6fc:	f240 3c02 	movw	ip, #770	; 0x302
    e700:	4561      	cmp	r1, ip
    e702:	f000 81cf 	beq.w	eaa4 <usb_isr+0x41c>
    e706:	f200 809a 	bhi.w	e83e <usb_isr+0x1b6>
    e70a:	2982      	cmp	r1, #130	; 0x82
    e70c:	f000 81b4 	beq.w	ea78 <usb_isr+0x3f0>
    e710:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    e714:	f040 808a 	bne.w	e82c <usb_isr+0x1a4>
		if (endpoint > 7) break;
    e718:	f010 0f78 	tst.w	r0, #120	; 0x78
    e71c:	b283      	uxth	r3, r0
    e71e:	f000 81f4 	beq.w	eb0a <usb_isr+0x482>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    e722:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e726:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e72a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    e72e:	2b00      	cmp	r3, #0
    e730:	d1be      	bne.n	e6b0 <usb_isr+0x28>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    e732:	4a81      	ldr	r2, [pc, #516]	; (e938 <usb_isr+0x2b0>)
    e734:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    e738:	2b00      	cmp	r3, #0
    e73a:	d142      	bne.n	e7c2 <usb_isr+0x13a>
	if (status & USB_USBSTS_URI) { // page 3164
    e73c:	0672      	lsls	r2, r6, #25
    e73e:	d516      	bpl.n	e76e <usb_isr+0xe6>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    e740:	4b7d      	ldr	r3, [pc, #500]	; (e938 <usb_isr+0x2b0>)
    e742:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    e746:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    e74a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    e74e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    e752:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    e756:	2c00      	cmp	r4, #0
    e758:	d1fb      	bne.n	e752 <usb_isr+0xca>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    e75a:	f04f 32ff 	mov.w	r2, #4294967295
    e75e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    e762:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    e766:	f000 fe9b 	bl	f4a0 <usb_serial_reset>
		endpointN_notify_mask = 0;
    e76a:	4b76      	ldr	r3, [pc, #472]	; (e944 <usb_isr+0x2bc>)
    e76c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    e76e:	01f4      	lsls	r4, r6, #7
    e770:	d503      	bpl.n	e77a <usb_isr+0xf2>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    e772:	4b75      	ldr	r3, [pc, #468]	; (e948 <usb_isr+0x2c0>)
    e774:	681b      	ldr	r3, [r3, #0]
    e776:	b103      	cbz	r3, e77a <usb_isr+0xf2>
    e778:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    e77a:	01b0      	lsls	r0, r6, #6
    e77c:	d503      	bpl.n	e786 <usb_isr+0xfe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    e77e:	4b73      	ldr	r3, [pc, #460]	; (e94c <usb_isr+0x2c4>)
    e780:	681b      	ldr	r3, [r3, #0]
    e782:	b103      	cbz	r3, e786 <usb_isr+0xfe>
    e784:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    e786:	0771      	lsls	r1, r6, #29
    e788:	d508      	bpl.n	e79c <usb_isr+0x114>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    e78a:	4b6b      	ldr	r3, [pc, #428]	; (e938 <usb_isr+0x2b0>)
    e78c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    e790:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    e794:	d047      	beq.n	e826 <usb_isr+0x19e>
			usb_high_speed = 1;
    e796:	4b6e      	ldr	r3, [pc, #440]	; (e950 <usb_isr+0x2c8>)
    e798:	2201      	movs	r2, #1
    e79a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    e79c:	4b66      	ldr	r3, [pc, #408]	; (e938 <usb_isr+0x2b0>)
    e79e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    e7a2:	061a      	lsls	r2, r3, #24
    e7a4:	d50a      	bpl.n	e7bc <usb_isr+0x134>
    e7a6:	0633      	lsls	r3, r6, #24
    e7a8:	d508      	bpl.n	e7bc <usb_isr+0x134>
		if (usb_reboot_timer) {
    e7aa:	4a6a      	ldr	r2, [pc, #424]	; (e954 <usb_isr+0x2cc>)
    e7ac:	7813      	ldrb	r3, [r2, #0]
    e7ae:	b12b      	cbz	r3, e7bc <usb_isr+0x134>
			if (--usb_reboot_timer == 0) {
    e7b0:	3b01      	subs	r3, #1
    e7b2:	b2db      	uxtb	r3, r3
    e7b4:	7013      	strb	r3, [r2, #0]
    e7b6:	2b00      	cmp	r3, #0
    e7b8:	f000 8230 	beq.w	ec1c <usb_isr+0x594>
}
    e7bc:	b003      	add	sp, #12
    e7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    e7c2:	4965      	ldr	r1, [pc, #404]	; (e958 <usb_isr+0x2d0>)
			USB1_ENDPTCOMPLETE = completestatus;
    e7c4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    e7c8:	6808      	ldr	r0, [r1, #0]
    e7ca:	4203      	tst	r3, r0
    e7cc:	f040 81c2 	bne.w	eb54 <usb_isr+0x4cc>
			completestatus &= endpointN_notify_mask;
    e7d0:	4a5c      	ldr	r2, [pc, #368]	; (e944 <usb_isr+0x2bc>)
    e7d2:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    e7d4:	401c      	ands	r4, r3
    e7d6:	d0b1      	beq.n	e73c <usb_isr+0xb4>
				while (tx) {
    e7d8:	ea5f 4814 	movs.w	r8, r4, lsr #16
    e7dc:	d010      	beq.n	e800 <usb_isr+0x178>
    e7de:	4d57      	ldr	r5, [pc, #348]	; (e93c <usb_isr+0x2b4>)
					tx &= ~(1<<p);
    e7e0:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    e7e4:	fa98 f7a8 	rbit	r7, r8
    e7e8:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e7ec:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    e7f0:	fa09 f707 	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e7f4:	3040      	adds	r0, #64	; 0x40
    e7f6:	f7ff fec9 	bl	e58c <run_callbacks>
				while (tx) {
    e7fa:	ea38 0807 	bics.w	r8, r8, r7
    e7fe:	d1f1      	bne.n	e7e4 <usb_isr+0x15c>
				uint32_t rx = completestatus & 0xffff;
    e800:	b2a4      	uxth	r4, r4
				while(rx) {
    e802:	2c00      	cmp	r4, #0
    e804:	d09a      	beq.n	e73c <usb_isr+0xb4>
    e806:	4d4d      	ldr	r5, [pc, #308]	; (e93c <usb_isr+0x2b4>)
					rx &= ~(1<<p);
    e808:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    e80c:	fa94 f7a4 	rbit	r7, r4
    e810:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    e814:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    e818:	fa08 f707 	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    e81c:	f7ff feb6 	bl	e58c <run_callbacks>
				while(rx) {
    e820:	43bc      	bics	r4, r7
    e822:	d1f3      	bne.n	e80c <usb_isr+0x184>
    e824:	e78a      	b.n	e73c <usb_isr+0xb4>
			usb_high_speed = 0;
    e826:	4a4a      	ldr	r2, [pc, #296]	; (e950 <usb_isr+0x2c8>)
    e828:	7013      	strb	r3, [r2, #0]
    e82a:	e7b7      	b.n	e79c <usb_isr+0x114>
	switch (setup.wRequestAndType) {
    e82c:	2980      	cmp	r1, #128	; 0x80
    e82e:	f47f af78 	bne.w	e722 <usb_isr+0x9a>
		reply_buffer[0] = 0;
    e832:	484a      	ldr	r0, [pc, #296]	; (e95c <usb_isr+0x2d4>)
		endpoint0_transmit(reply_buffer, 2, 0);
    e834:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    e836:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    e838:	f7ff fec4 	bl	e5c4 <endpoint0_transmit.constprop.0>
		return;
    e83c:	e775      	b.n	e72a <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    e83e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    e842:	f000 80f4 	beq.w	ea2e <usb_isr+0x3a6>
    e846:	f5a1 61d0 	sub.w	r1, r1, #1664	; 0x680
    e84a:	2901      	cmp	r1, #1
    e84c:	f63f af69 	bhi.w	e722 <usb_isr+0x9a>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e850:	4b43      	ldr	r3, [pc, #268]	; (e960 <usb_isr+0x2d8>)
    e852:	6859      	ldr	r1, [r3, #4]
    e854:	2900      	cmp	r1, #0
    e856:	f43f af64 	beq.w	e722 <usb_isr+0x9a>
    e85a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e85e:	fa1f fa80 	uxth.w	sl, r0
    e862:	e004      	b.n	e86e <usb_isr+0x1e6>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e864:	6919      	ldr	r1, [r3, #16]
    e866:	330c      	adds	r3, #12
    e868:	2900      	cmp	r1, #0
    e86a:	f43f af5a 	beq.w	e722 <usb_isr+0x9a>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e86e:	f8b3 c000 	ldrh.w	ip, [r3]
    e872:	45f4      	cmp	ip, lr
    e874:	d1f6      	bne.n	e864 <usb_isr+0x1dc>
    e876:	885a      	ldrh	r2, [r3, #2]
    e878:	4552      	cmp	r2, sl
    e87a:	d1f3      	bne.n	e864 <usb_isr+0x1dc>
				if ((setup.wValue >> 8) == 3) {
    e87c:	ea4f 221e 	mov.w	r2, lr, lsr #8
    e880:	2a03      	cmp	r2, #3
    e882:	f000 8185 	beq.w	eb90 <usb_isr+0x508>
					datalen = list->length;
    e886:	f8b3 a008 	ldrh.w	sl, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    e88a:	0c00      	lsrs	r0, r0, #16
    e88c:	4582      	cmp	sl, r0
    e88e:	bf28      	it	cs
    e890:	4682      	movcs	sl, r0
				if (setup.wValue == 0x200) {
    e892:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    e896:	f040 8181 	bne.w	eb9c <usb_isr+0x514>
					if (usb_high_speed) src = usb_config_descriptor_480;
    e89a:	4b2d      	ldr	r3, [pc, #180]	; (e950 <usb_isr+0x2c8>)
    e89c:	4a31      	ldr	r2, [pc, #196]	; (e964 <usb_isr+0x2dc>)
    e89e:	7819      	ldrb	r1, [r3, #0]
    e8a0:	4b31      	ldr	r3, [pc, #196]	; (e968 <usb_isr+0x2e0>)
					memcpy(usb_descriptor_buffer, src, datalen);
    e8a2:	f8df b0c8 	ldr.w	fp, [pc, #200]	; e96c <usb_isr+0x2e4>
    e8a6:	2900      	cmp	r1, #0
    e8a8:	bf0c      	ite	eq
    e8aa:	4611      	moveq	r1, r2
    e8ac:	4619      	movne	r1, r3
    e8ae:	482f      	ldr	r0, [pc, #188]	; (e96c <usb_isr+0x2e4>)
    e8b0:	4652      	mov	r2, sl
    e8b2:	f7ff f9f3 	bl	dc9c <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e8b6:	f02b 031f 	bic.w	r3, fp, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e8ba:	eb0b 020a 	add.w	r2, fp, sl
	asm("dsb");
    e8be:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e8c2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e8c6:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    e8ca:	3320      	adds	r3, #32
	} while (location < end_addr);
    e8cc:	429a      	cmp	r2, r3
    e8ce:	d8fa      	bhi.n	e8c6 <usb_isr+0x23e>
	asm("dsb");
    e8d0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e8d4:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    e8d8:	4824      	ldr	r0, [pc, #144]	; (e96c <usb_isr+0x2e4>)
    e8da:	4651      	mov	r1, sl
    e8dc:	f7ff fe72 	bl	e5c4 <endpoint0_transmit.constprop.0>
				return;
    e8e0:	e723      	b.n	e72a <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    e8e2:	f242 3c21 	movw	ip, #8993	; 0x2321
    e8e6:	4561      	cmp	r1, ip
    e8e8:	d00d      	beq.n	e906 <usb_isr+0x27e>
    e8ea:	d877      	bhi.n	e9dc <usb_isr+0x354>
    e8ec:	f242 0c21 	movw	ip, #8225	; 0x2021
    e8f0:	4561      	cmp	r1, ip
    e8f2:	f000 808b 	beq.w	ea0c <usb_isr+0x384>
    e8f6:	f242 2c21 	movw	ip, #8737	; 0x2221
    e8fa:	4561      	cmp	r1, ip
    e8fc:	d13c      	bne.n	e978 <usb_isr+0x2f0>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    e8fe:	b280      	uxth	r0, r0
    e900:	2800      	cmp	r0, #0
    e902:	f000 80f9 	beq.w	eaf8 <usb_isr+0x470>
	endpoint0_transfer_ack.next = 1;
    e906:	4b1a      	ldr	r3, [pc, #104]	; (e970 <usb_isr+0x2e8>)
	endpoint0_transfer_ack.pointer0 = 0;
    e908:	2200      	movs	r2, #0
    e90a:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    e90c:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    e90e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e910:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    e912:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e914:	2280      	movs	r2, #128	; 0x80
    e916:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e918:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e91c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e920:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e928:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    e92c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e930:	2b00      	cmp	r3, #0
    e932:	d1fb      	bne.n	e92c <usb_isr+0x2a4>
    e934:	e6f9      	b.n	e72a <usb_isr+0xa2>
    e936:	bf00      	nop
    e938:	402e0000 	.word	0x402e0000
    e93c:	20000000 	.word	0x20000000
    e940:	402e01c0 	.word	0x402e01c0
    e944:	20034b48 	.word	0x20034b48
    e948:	20035438 	.word	0x20035438
    e94c:	2003543c 	.word	0x2003543c
    e950:	20035476 	.word	0x20035476
    e954:	20035477 	.word	0x20035477
    e958:	20034b44 	.word	0x20034b44
    e95c:	20034cb0 	.word	0x20034cb0
    e960:	20008844 	.word	0x20008844
    e964:	6000275c 	.word	0x6000275c
    e968:	600027c8 	.word	0x600027c8
    e96c:	20200800 	.word	0x20200800
    e970:	20009700 	.word	0x20009700
    e974:	20035475 	.word	0x20035475
	switch (setup.wRequestAndType) {
    e978:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    e97c:	f47f aed1 	bne.w	e722 <usb_isr+0x9a>
		usb_configuration = setup.wValue;
    e980:	f3c2 4207 	ubfx	r2, r2, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    e984:	f04f 11c8 	mov.w	r1, #13107400	; 0xc800c8
    e988:	9301      	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    e98a:	f888 2000 	strb.w	r2, [r8]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    e98e:	4aa6      	ldr	r2, [pc, #664]	; (ec28 <usb_isr+0x5a0>)
    e990:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    e994:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    e998:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    e99c:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
		usb_serial_configure();
    e9a0:	f000 fd80 	bl	f4a4 <usb_serial_configure>
		usb_mtp_configure();
    e9a4:	f000 faaa 	bl	eefc <usb_mtp_configure>
	endpoint0_transfer_ack.next = 1;
    e9a8:	4aa0      	ldr	r2, [pc, #640]	; (ec2c <usb_isr+0x5a4>)
    e9aa:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    e9ac:	9b01      	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e9ae:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    e9b0:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e9b2:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    e9b4:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e9b6:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e9b8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    e9bc:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e9be:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e9c2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    e9c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    e9ca:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e9ce:	f8c9 3000 	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    e9d2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e9d6:	2b00      	cmp	r3, #0
    e9d8:	d1fb      	bne.n	e9d2 <usb_isr+0x34a>
    e9da:	e6a6      	b.n	e72a <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    e9dc:	f246 4321 	movw	r3, #25633	; 0x6421
    e9e0:	4299      	cmp	r1, r3
    e9e2:	d01f      	beq.n	ea24 <usb_isr+0x39c>
    e9e4:	f246 73a1 	movw	r3, #26529	; 0x67a1
    e9e8:	4299      	cmp	r1, r3
    e9ea:	f47f ae9a 	bne.w	e722 <usb_isr+0x9a>
		if (setup.wLength >= 4) {
    e9ee:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
    e9f2:	f4ff ae96 	bcc.w	e722 <usb_isr+0x9a>
			endpoint0_buffer[2] = usb_mtp_status;
    e9f6:	4b8e      	ldr	r3, [pc, #568]	; (ec30 <usb_isr+0x5a8>)
			endpoint0_buffer[0] = 4;
    e9f8:	2104      	movs	r1, #4
    e9fa:	488e      	ldr	r0, [pc, #568]	; (ec34 <usb_isr+0x5ac>)
			endpoint0_buffer[2] = usb_mtp_status;
    e9fc:	781b      	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    e9fe:	8001      	strh	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    ea00:	7083      	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    ea02:	2320      	movs	r3, #32
    ea04:	70c3      	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    ea06:	f7ff fddd 	bl	e5c4 <endpoint0_transmit.constprop.0>
			return;
    ea0a:	e68e      	b.n	e72a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    ea0c:	0c01      	lsrs	r1, r0, #16
    ea0e:	2907      	cmp	r1, #7
    ea10:	f47f ae87 	bne.w	e722 <usb_isr+0x9a>
			endpoint0_setupdata.bothwords = setupdata;
    ea14:	4b88      	ldr	r3, [pc, #544]	; (ec38 <usb_isr+0x5b0>)
    ea16:	e9c3 2000 	strd	r2, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    ea1a:	2201      	movs	r2, #1
    ea1c:	4885      	ldr	r0, [pc, #532]	; (ec34 <usb_isr+0x5ac>)
    ea1e:	f7ff fd0d 	bl	e43c <endpoint0_receive>
			return;
    ea22:	e682      	b.n	e72a <usb_isr+0xa2>
		if (setup.wLength == 6) {
    ea24:	0c01      	lsrs	r1, r0, #16
    ea26:	2906      	cmp	r1, #6
    ea28:	f47f ae7b 	bne.w	e722 <usb_isr+0x9a>
    ea2c:	e7f2      	b.n	ea14 <usb_isr+0x38c>
	endpoint0_transfer_ack.next = 1;
    ea2e:	497f      	ldr	r1, [pc, #508]	; (ec2c <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    ea30:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    ea32:	608b      	str	r3, [r1, #8]
	endpoint0_transfer_ack.next = 1;
    ea34:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ea36:	64a9      	str	r1, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    ea38:	600b      	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ea3a:	2380      	movs	r3, #128	; 0x80
    ea3c:	604b      	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ea3e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    ea42:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ea46:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ea4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ea4e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    ea52:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ea56:	2b00      	cmp	r3, #0
    ea58:	d1fb      	bne.n	ea52 <usb_isr+0x3ca>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    ea5a:	0c13      	lsrs	r3, r2, #16
    ea5c:	065b      	lsls	r3, r3, #25
    ea5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    ea62:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    ea66:	e660      	b.n	e72a <usb_isr+0xa2>
		reply_buffer[0] = usb_configuration;
    ea68:	4874      	ldr	r0, [pc, #464]	; (ec3c <usb_isr+0x5b4>)
		endpoint0_transmit(reply_buffer, 1, 0);
    ea6a:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    ea6c:	f898 3000 	ldrb.w	r3, [r8]
    ea70:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    ea72:	f7ff fda7 	bl	e5c4 <endpoint0_transmit.constprop.0>
		return;
    ea76:	e658      	b.n	e72a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    ea78:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    ea7a:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    ea7e:	f47f ae50 	bne.w	e722 <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    ea82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    ea86:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    ea8a:	4a6c      	ldr	r2, [pc, #432]	; (ec3c <usb_isr+0x5b4>)
    ea8c:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ea8e:	0618      	lsls	r0, r3, #24
    ea90:	d47b      	bmi.n	eb8a <usb_isr+0x502>
    ea92:	07cb      	lsls	r3, r1, #31
    ea94:	d501      	bpl.n	ea9a <usb_isr+0x412>
			reply_buffer[0] = 1;
    ea96:	2301      	movs	r3, #1
    ea98:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    ea9a:	2102      	movs	r1, #2
    ea9c:	4867      	ldr	r0, [pc, #412]	; (ec3c <usb_isr+0x5b4>)
    ea9e:	f7ff fd91 	bl	e5c4 <endpoint0_transmit.constprop.0>
		return;
    eaa2:	e642      	b.n	e72a <usb_isr+0xa2>
		if (endpoint > 7) break;
    eaa4:	f010 0f78 	tst.w	r0, #120	; 0x78
    eaa8:	b283      	uxth	r3, r0
    eaaa:	f47f ae3a 	bne.w	e722 <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    eaae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    eab2:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    eab6:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    eaba:	bf14      	ite	ne
    eabc:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    eac0:	f043 0301 	orreq.w	r3, r3, #1
    eac4:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    eac8:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    eaca:	4b58      	ldr	r3, [pc, #352]	; (ec2c <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    eacc:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    eace:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    ead0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ead2:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    ead4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ead6:	2280      	movs	r2, #128	; 0x80
    ead8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eada:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    eade:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    eae2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    eae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    eaea:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    eaee:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    eaf2:	2b00      	cmp	r3, #0
    eaf4:	d1fb      	bne.n	eaee <usb_isr+0x466>
    eaf6:	e618      	b.n	e72a <usb_isr+0xa2>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    eaf8:	4b51      	ldr	r3, [pc, #324]	; (ec40 <usb_isr+0x5b8>)
			usb_cdc_line_rtsdtr = setup.wValue;
    eafa:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    eafe:	6819      	ldr	r1, [r3, #0]
    eb00:	4b50      	ldr	r3, [pc, #320]	; (ec44 <usb_isr+0x5bc>)
    eb02:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    eb04:	4b50      	ldr	r3, [pc, #320]	; (ec48 <usb_isr+0x5c0>)
    eb06:	701a      	strb	r2, [r3, #0]
    eb08:	e6fd      	b.n	e906 <usb_isr+0x27e>
		endpoint = setup.wIndex & 0x7F;
    eb0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    eb0e:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    eb12:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    eb16:	bf14      	ite	ne
    eb18:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    eb1c:	f023 0301 	biceq.w	r3, r3, #1
    eb20:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    eb24:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    eb26:	4b41      	ldr	r3, [pc, #260]	; (ec2c <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    eb28:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    eb2a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    eb2c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    eb2e:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    eb30:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eb32:	2280      	movs	r2, #128	; 0x80
    eb34:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eb36:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    eb3a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    eb3e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    eb42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    eb46:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    eb4a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    eb4e:	2b00      	cmp	r3, #0
    eb50:	d1fb      	bne.n	eb4a <usb_isr+0x4c2>
    eb52:	e5ea      	b.n	e72a <usb_isr+0xa2>
				endpoint0_notify_mask = 0;
    eb54:	2000      	movs	r0, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    eb56:	f242 0421 	movw	r4, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    eb5a:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    eb5c:	4936      	ldr	r1, [pc, #216]	; (ec38 <usb_isr+0x5b0>)
    eb5e:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    eb60:	8809      	ldrh	r1, [r1, #0]
    eb62:	42a1      	cmp	r1, r4
    eb64:	d02f      	beq.n	ebc6 <usb_isr+0x53e>
	if (setup.wRequestAndType == 0x6421) {
    eb66:	f246 4221 	movw	r2, #25633	; 0x6421
    eb6a:	4291      	cmp	r1, r2
    eb6c:	f47f ae30 	bne.w	e7d0 <usb_isr+0x148>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    eb70:	4a30      	ldr	r2, [pc, #192]	; (ec34 <usb_isr+0x5ac>)
    eb72:	7811      	ldrb	r1, [r2, #0]
    eb74:	2901      	cmp	r1, #1
    eb76:	f47f ae2b 	bne.w	e7d0 <usb_isr+0x148>
    eb7a:	7852      	ldrb	r2, [r2, #1]
    eb7c:	2a40      	cmp	r2, #64	; 0x40
    eb7e:	f47f ae27 	bne.w	e7d0 <usb_isr+0x148>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    eb82:	4a2b      	ldr	r2, [pc, #172]	; (ec30 <usb_isr+0x5a8>)
    eb84:	2119      	movs	r1, #25
    eb86:	7011      	strb	r1, [r2, #0]
    eb88:	e622      	b.n	e7d0 <usb_isr+0x148>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    eb8a:	03c9      	lsls	r1, r1, #15
    eb8c:	d483      	bmi.n	ea96 <usb_isr+0x40e>
    eb8e:	e784      	b.n	ea9a <usb_isr+0x412>
				if (datalen > setup.wLength) datalen = setup.wLength;
    eb90:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    eb92:	f891 a000 	ldrb.w	sl, [r1]
    eb96:	4582      	cmp	sl, r0
    eb98:	bf28      	it	cs
    eb9a:	4682      	movcs	sl, r0
				} else if (setup.wValue == 0x700) {
    eb9c:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    eba0:	d135      	bne.n	ec0e <usb_isr+0x586>
					if (usb_high_speed) src = usb_config_descriptor_12;
    eba2:	4b2a      	ldr	r3, [pc, #168]	; (ec4c <usb_isr+0x5c4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    eba4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; ec64 <usb_isr+0x5dc>
					if (usb_high_speed) src = usb_config_descriptor_12;
    eba8:	7819      	ldrb	r1, [r3, #0]
    ebaa:	4a29      	ldr	r2, [pc, #164]	; (ec50 <usb_isr+0x5c8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ebac:	4658      	mov	r0, fp
					if (usb_high_speed) src = usb_config_descriptor_12;
    ebae:	4b29      	ldr	r3, [pc, #164]	; (ec54 <usb_isr+0x5cc>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ebb0:	2900      	cmp	r1, #0
    ebb2:	bf0c      	ite	eq
    ebb4:	4611      	moveq	r1, r2
    ebb6:	4619      	movne	r1, r3
    ebb8:	4652      	mov	r2, sl
    ebba:	f7ff f86f 	bl	dc9c <memcpy>
					usb_descriptor_buffer[1] = 7;
    ebbe:	2307      	movs	r3, #7
    ebc0:	f88b 3001 	strb.w	r3, [fp, #1]
    ebc4:	e677      	b.n	e8b6 <usb_isr+0x22e>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ebc6:	b280      	uxth	r0, r0
    ebc8:	2800      	cmp	r0, #0
    ebca:	f47f ae01 	bne.w	e7d0 <usb_isr+0x148>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ebce:	4919      	ldr	r1, [pc, #100]	; (ec34 <usb_isr+0x5ac>)
    ebd0:	4c21      	ldr	r4, [pc, #132]	; (ec58 <usb_isr+0x5d0>)
    ebd2:	c903      	ldmia	r1, {r0, r1}
    ebd4:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    ebd6:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ebd8:	ea4f 4111 	mov.w	r1, r1, lsr #16
    ebdc:	6020      	str	r0, [r4, #0]
    ebde:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    ebe0:	f47f adf6 	bne.w	e7d0 <usb_isr+0x148>
	__disable_irq();
    ebe4:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    ebe6:	481d      	ldr	r0, [pc, #116]	; (ec5c <usb_isr+0x5d4>)
    ebe8:	7801      	ldrb	r1, [r0, #0]
    ebea:	f041 0108 	orr.w	r1, r1, #8
    ebee:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    ebf0:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    ebf4:	060d      	lsls	r5, r1, #24
    ebf6:	d405      	bmi.n	ec04 <usb_isr+0x57c>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ebf8:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ebfa:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ebfc:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ec00:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    ec04:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ec06:	4a16      	ldr	r2, [pc, #88]	; (ec60 <usb_isr+0x5d8>)
    ec08:	2150      	movs	r1, #80	; 0x50
    ec0a:	7011      	strb	r1, [r2, #0]
    ec0c:	e5e0      	b.n	e7d0 <usb_isr+0x148>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    ec0e:	f8df b054 	ldr.w	fp, [pc, #84]	; ec64 <usb_isr+0x5dc>
    ec12:	4652      	mov	r2, sl
    ec14:	4658      	mov	r0, fp
    ec16:	f7ff f841 	bl	dc9c <memcpy>
    ec1a:	e64c      	b.n	e8b6 <usb_isr+0x22e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    ec1c:	2003      	movs	r0, #3
    ec1e:	f7ff fd1d 	bl	e65c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    ec22:	f00b fee5 	bl	1a9f0 <___reboot_Teensyduino__veneer>
    ec26:	bf00      	nop
    ec28:	00cc0002 	.word	0x00cc0002
    ec2c:	20009700 	.word	0x20009700
    ec30:	20009005 	.word	0x20009005
    ec34:	20034b3c 	.word	0x20034b3c
    ec38:	2000de00 	.word	0x2000de00
    ec3c:	20034cb0 	.word	0x20034cb0
    ec40:	20035424 	.word	0x20035424
    ec44:	20035434 	.word	0x20035434
    ec48:	20035474 	.word	0x20035474
    ec4c:	20035476 	.word	0x20035476
    ec50:	600027c8 	.word	0x600027c8
    ec54:	6000275c 	.word	0x6000275c
    ec58:	2003542c 	.word	0x2003542c
    ec5c:	2003546f 	.word	0x2003546f
    ec60:	20035477 	.word	0x20035477
    ec64:	20200800 	.word	0x20200800

0000ec68 <usb_config_rx>:
{
    ec68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec6c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ec6e:	1e83      	subs	r3, r0, #2
    ec70:	2b03      	cmp	r3, #3
    ec72:	d901      	bls.n	ec78 <usb_config_rx+0x10>
}
    ec74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ec78:	f8df 904c 	ldr.w	r9, [pc, #76]	; ecc8 <usb_config_rx+0x60>
    ec7c:	4615      	mov	r5, r2
    ec7e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    ec80:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ec82:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    ec86:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ec88:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    ec8c:	2100      	movs	r1, #0
    ec8e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ec92:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    ec94:	f003 f890 	bl	11db8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ec98:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    ec9c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ec9e:	0952      	lsrs	r2, r2, #5
    eca0:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    eca4:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    eca8:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    ecac:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    ecb0:	2f00      	cmp	r7, #0
    ecb2:	d0df      	beq.n	ec74 <usb_config_rx+0xc>
    ecb4:	4a03      	ldr	r2, [pc, #12]	; (ecc4 <usb_config_rx+0x5c>)
    ecb6:	40b3      	lsls	r3, r6
    ecb8:	6811      	ldr	r1, [r2, #0]
    ecba:	430b      	orrs	r3, r1
    ecbc:	6013      	str	r3, [r2, #0]
}
    ecbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ecc2:	bf00      	nop
    ecc4:	20034b48 	.word	0x20034b48
    ecc8:	20000000 	.word	0x20000000

0000eccc <usb_config_tx>:
{
    eccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ecd0:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ecd2:	1e81      	subs	r1, r0, #2
    ecd4:	2903      	cmp	r1, #3
    ecd6:	d901      	bls.n	ecdc <usb_config_tx+0x10>
}
    ecd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ecdc:	01c7      	lsls	r7, r0, #7
    ecde:	f8df 904c 	ldr.w	r9, [pc, #76]	; ed2c <usb_config_tx+0x60>
    ece2:	4692      	mov	sl, r2
    ece4:	4604      	mov	r4, r0
    ece6:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    ece8:	223c      	movs	r2, #60	; 0x3c
    ecea:	2100      	movs	r1, #0
    ecec:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ecee:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ecf2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    ecf4:	f108 0004 	add.w	r0, r8, #4
    ecf8:	f003 f85e 	bl	11db8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ecfc:	faba f28a 	clz	r2, sl
    ed00:	0952      	lsrs	r2, r2, #5
    ed02:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    ed06:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    ed0a:	2201      	movs	r2, #1
	qh->callback_function = callback;
    ed0c:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    ed10:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    ed14:	2e00      	cmp	r6, #0
    ed16:	d0df      	beq.n	ecd8 <usb_config_tx+0xc>
    ed18:	4b03      	ldr	r3, [pc, #12]	; (ed28 <usb_config_tx+0x5c>)
    ed1a:	3410      	adds	r4, #16
    ed1c:	6819      	ldr	r1, [r3, #0]
    ed1e:	40a2      	lsls	r2, r4
    ed20:	430a      	orrs	r2, r1
    ed22:	601a      	str	r2, [r3, #0]
}
    ed24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ed28:	20034b48 	.word	0x20034b48
    ed2c:	20000000 	.word	0x20000000

0000ed30 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    ed30:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    ed32:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    ed34:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    ed36:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    ed3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    ed3e:	b410      	push	{r4}
	transfer->next = 1;
    ed40:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    ed42:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    ed44:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    ed48:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    ed4a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    ed4e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    ed52:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    ed54:	6181      	str	r1, [r0, #24]
}
    ed56:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    ed5a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    ed5e:	4770      	bx	lr

0000ed60 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ed60:	1e83      	subs	r3, r0, #2
{
    ed62:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ed64:	2b03      	cmp	r3, #3
    ed66:	d900      	bls.n	ed6a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    ed68:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    ed6a:	4b06      	ldr	r3, [pc, #24]	; (ed84 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    ed6c:	f100 0110 	add.w	r1, r0, #16
    ed70:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    ed74:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    ed78:	fa0c f101 	lsl.w	r1, ip, r1
    ed7c:	3040      	adds	r0, #64	; 0x40
    ed7e:	f7ff bbc1 	b.w	e504 <schedule_transfer>
    ed82:	bf00      	nop
    ed84:	20000000 	.word	0x20000000

0000ed88 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ed88:	1e83      	subs	r3, r0, #2
{
    ed8a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ed8c:	2b03      	cmp	r3, #3
    ed8e:	d900      	bls.n	ed92 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    ed90:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    ed92:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    ed94:	4b02      	ldr	r3, [pc, #8]	; (eda0 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    ed96:	4081      	lsls	r1, r0
    ed98:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    ed9c:	f7ff bbb2 	b.w	e504 <schedule_transfer>
    eda0:	20000000 	.word	0x20000000

0000eda4 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    eda4:	4a08      	ldr	r2, [pc, #32]	; (edc8 <usb_transfer_status+0x24>)
    eda6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    edaa:	b672      	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    edac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    edb0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    edb4:	6841      	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    edb6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    edba:	b662      	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    edbc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    edc0:	d0f3      	beq.n	edaa <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    edc2:	4608      	mov	r0, r1
    edc4:	4770      	bx	lr
    edc6:	bf00      	nop
    edc8:	402e0000 	.word	0x402e0000

0000edcc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    edcc:	4a12      	ldr	r2, [pc, #72]	; (ee18 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    edce:	4b13      	ldr	r3, [pc, #76]	; (ee1c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    edd0:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    edd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    edd8:	4298      	cmp	r0, r3
{
    edda:	b510      	push	{r4, lr}
    eddc:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    edde:	d202      	bcs.n	ede6 <usb_init_serialnumber+0x1a>
    ede0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ede4:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    ede6:	4c0e      	ldr	r4, [pc, #56]	; (ee20 <usb_init_serialnumber+0x54>)
    ede8:	a901      	add	r1, sp, #4
    edea:	220a      	movs	r2, #10
    edec:	f7fe fff2 	bl	ddd4 <ultoa>
	for (i=0; i<10; i++) {
    edf0:	a901      	add	r1, sp, #4
    edf2:	2300      	movs	r3, #0
    edf4:	4620      	mov	r0, r4
		char c = buf[i];
    edf6:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    edfa:	3301      	adds	r3, #1
		if (!c) break;
    edfc:	b13a      	cbz	r2, ee0e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    edfe:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    ee00:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    ee04:	d1f7      	bne.n	edf6 <usb_init_serialnumber+0x2a>
    ee06:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    ee08:	7023      	strb	r3, [r4, #0]
}
    ee0a:	b004      	add	sp, #16
    ee0c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    ee0e:	005b      	lsls	r3, r3, #1
    ee10:	b2db      	uxtb	r3, r3
    ee12:	7023      	strb	r3, [r4, #0]
}
    ee14:	b004      	add	sp, #16
    ee16:	bd10      	pop	{r4, pc}
    ee18:	401f4400 	.word	0x401f4400
    ee1c:	00989680 	.word	0x00989680
    ee20:	20008fe0 	.word	0x20008fe0

0000ee24 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    ee24:	f000 bc5c 	b.w	f6e0 <usb_serial_flush_input>

0000ee28 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    ee28:	f000 bc4e 	b.w	f6c8 <usb_serial_available>

0000ee2c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ee2c:	f000 bcea 	b.w	f804 <usb_serial_flush_output>

0000ee30 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ee30:	f000 bcc0 	b.w	f7b4 <usb_serial_write_buffer_free>

0000ee34 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ee34:	4608      	mov	r0, r1
    ee36:	4611      	mov	r1, r2
    ee38:	f000 bcb0 	b.w	f79c <usb_serial_write>

0000ee3c <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    ee3c:	4a02      	ldr	r2, [pc, #8]	; (ee48 <txEvent_event+0xc>)
    ee3e:	6813      	ldr	r3, [r2, #0]
    ee40:	3301      	adds	r3, #1
    ee42:	6013      	str	r3, [r2, #0]
    ee44:	4770      	bx	lr
    ee46:	bf00      	nop
    ee48:	20034bfc 	.word	0x20034bfc

0000ee4c <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    ee4c:	4a0e      	ldr	r2, [pc, #56]	; (ee88 <rx_event+0x3c>)
{
    ee4e:	b410      	push	{r4}
	uint32_t head = rx_head;
    ee50:	7813      	ldrb	r3, [r2, #0]
	int i = t->callback_param;
    ee52:	69c4      	ldr	r4, [r0, #28]
	if (++head > RX_NUM) head = 0;
    ee54:	3301      	adds	r3, #1
    ee56:	2b04      	cmp	r3, #4
    ee58:	d811      	bhi.n	ee7e <rx_event+0x32>
	rx_list[head] = i;
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	rx_list_transfer_len[head] = len;
	rx_head = head;
    ee5a:	fa5f fc83 	uxtb.w	ip, r3
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ee5e:	6841      	ldr	r1, [r0, #4]
	rx_head = head;
    ee60:	f882 c000 	strb.w	ip, [r2]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ee64:	4a09      	ldr	r2, [pc, #36]	; (ee8c <rx_event+0x40>)
    ee66:	f3c1 410e 	ubfx	r1, r1, #16, #15
	rx_list_transfer_len[head] = len;
    ee6a:	4809      	ldr	r0, [pc, #36]	; (ee90 <rx_event+0x44>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ee6c:	8812      	ldrh	r2, [r2, #0]
    ee6e:	1a52      	subs	r2, r2, r1
	rx_list[head] = i;
    ee70:	4908      	ldr	r1, [pc, #32]	; (ee94 <rx_event+0x48>)
    ee72:	54cc      	strb	r4, [r1, r3]
}
    ee74:	f85d 4b04 	ldr.w	r4, [sp], #4
	rx_list_transfer_len[head] = len;
    ee78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    ee7c:	4770      	bx	lr
    ee7e:	f04f 0c00 	mov.w	ip, #0
	if (++head > RX_NUM) head = 0;
    ee82:	4663      	mov	r3, ip
    ee84:	e7eb      	b.n	ee5e <rx_event+0x12>
    ee86:	bf00      	nop
    ee88:	2003546b 	.word	0x2003546b
    ee8c:	20035452 	.word	0x20035452
    ee90:	20034cf0 	.word	0x20034cf0
    ee94:	20034cdc 	.word	0x20034cdc

0000ee98 <rx_queue_transfer>:
{
    ee98:	b570      	push	{r4, r5, r6, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    ee9a:	4915      	ldr	r1, [pc, #84]	; (eef0 <rx_queue_transfer+0x58>)
{
    ee9c:	4603      	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    ee9e:	4d15      	ldr	r5, [pc, #84]	; (eef4 <rx_queue_transfer+0x5c>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    eea0:	eb01 2140 	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    eea4:	f8b5 c000 	ldrh.w	ip, [r5]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    eea8:	460a      	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    eeaa:	448c      	add	ip, r1
	asm("dsb");
    eeac:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    eeb0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    eeb4:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    eeb8:	3220      	adds	r2, #32
	} while (location < end_addr);
    eeba:	4594      	cmp	ip, r2
    eebc:	d8fa      	bhi.n	eeb4 <rx_queue_transfer+0x1c>
	asm("dsb");
    eebe:	f3bf 8f4f 	dsb	sy
	asm("isb");
    eec2:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    eec6:	882a      	ldrh	r2, [r5, #0]
	NVIC_DISABLE_IRQ(IRQ_USB1);
    eec8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    eecc:	4d0a      	ldr	r5, [pc, #40]	; (eef8 <rx_queue_transfer+0x60>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    eece:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    eed2:	eb05 1543 	add.w	r5, r5, r3, lsl #5
    eed6:	4628      	mov	r0, r5
    eed8:	f7ff ff2a 	bl	ed30 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    eedc:	4629      	mov	r1, r5
    eede:	2004      	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    eee0:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    eee4:	f7ff ff50 	bl	ed88 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    eee8:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
}
    eeec:	bd70      	pop	{r4, r5, r6, pc}
    eeee:	bf00      	nop
    eef0:	20200880 	.word	0x20200880
    eef4:	20035452 	.word	0x20035452
    eef8:	2000bb80 	.word	0x2000bb80

0000eefc <usb_mtp_configure>:
	if (usb_high_speed) {
    eefc:	4b1f      	ldr	r3, [pc, #124]	; (ef7c <usb_mtp_configure+0x80>)
{
    eefe:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    ef00:	781b      	ldrb	r3, [r3, #0]
    ef02:	2b00      	cmp	r3, #0
    ef04:	d037      	beq.n	ef76 <usb_mtp_configure+0x7a>
    ef06:	f44f 7300 	mov.w	r3, #512	; 0x200
    ef0a:	461e      	mov	r6, r3
		tx_packet_size = MTP_TX_SIZE_480;
    ef0c:	491c      	ldr	r1, [pc, #112]	; (ef80 <usb_mtp_configure+0x84>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    ef0e:	2280      	movs	r2, #128	; 0x80
		rx_packet_size = MTP_RX_SIZE_480;
    ef10:	4d1c      	ldr	r5, [pc, #112]	; (ef84 <usb_mtp_configure+0x88>)
	tx_head = 0;
    ef12:	2400      	movs	r4, #0
		tx_packet_size = MTP_TX_SIZE_480;
    ef14:	800b      	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    ef16:	2100      	movs	r1, #0
    ef18:	481b      	ldr	r0, [pc, #108]	; (ef88 <usb_mtp_configure+0x8c>)
		rx_packet_size = MTP_RX_SIZE_480;
    ef1a:	802b      	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    ef1c:	f002 ff4c 	bl	11db8 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    ef20:	2280      	movs	r2, #128	; 0x80
    ef22:	2100      	movs	r1, #0
    ef24:	4819      	ldr	r0, [pc, #100]	; (ef8c <usb_mtp_configure+0x90>)
    ef26:	f002 ff47 	bl	11db8 <memset>
	rx_head = 0;
    ef2a:	4b19      	ldr	r3, [pc, #100]	; (ef90 <usb_mtp_configure+0x94>)
	tx_head = 0;
    ef2c:	4a19      	ldr	r2, [pc, #100]	; (ef94 <usb_mtp_configure+0x98>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    ef2e:	4631      	mov	r1, r6
	rx_head = 0;
    ef30:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    ef32:	2004      	movs	r0, #4
	rx_tail = 0;
    ef34:	4b18      	ldr	r3, [pc, #96]	; (ef98 <usb_mtp_configure+0x9c>)
	tx_head = 0;
    ef36:	7014      	strb	r4, [r2, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    ef38:	4622      	mov	r2, r4
	rx_tail = 0;
    ef3a:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    ef3c:	4623      	mov	r3, r4
    ef3e:	f7ff fec5 	bl	eccc <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    ef42:	4622      	mov	r2, r4
    ef44:	8829      	ldrh	r1, [r5, #0]
    ef46:	2004      	movs	r0, #4
    ef48:	4b14      	ldr	r3, [pc, #80]	; (ef9c <usb_mtp_configure+0xa0>)
    ef4a:	f7ff fe8d 	bl	ec68 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    ef4e:	4622      	mov	r2, r4
    ef50:	4b13      	ldr	r3, [pc, #76]	; (efa0 <usb_mtp_configure+0xa4>)
    ef52:	2120      	movs	r1, #32
    ef54:	2005      	movs	r0, #5
    ef56:	f7ff feb9 	bl	eccc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    ef5a:	4620      	mov	r0, r4
    ef5c:	f7ff ff9c 	bl	ee98 <rx_queue_transfer>
    ef60:	2001      	movs	r0, #1
    ef62:	f7ff ff99 	bl	ee98 <rx_queue_transfer>
    ef66:	2002      	movs	r0, #2
    ef68:	f7ff ff96 	bl	ee98 <rx_queue_transfer>
    ef6c:	2003      	movs	r0, #3
}
    ef6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    ef72:	f7ff bf91 	b.w	ee98 <rx_queue_transfer>
    ef76:	2340      	movs	r3, #64	; 0x40
    ef78:	461e      	mov	r6, r3
    ef7a:	e7c7      	b.n	ef0c <usb_mtp_configure+0x10>
    ef7c:	20035476 	.word	0x20035476
    ef80:	2003545c 	.word	0x2003545c
    ef84:	20035452 	.word	0x20035452
    ef88:	2000bd00 	.word	0x2000bd00
    ef8c:	2000bb80 	.word	0x2000bb80
    ef90:	2003546b 	.word	0x2003546b
    ef94:	20035471 	.word	0x20035471
    ef98:	2003546d 	.word	0x2003546d
    ef9c:	0000ee4d 	.word	0x0000ee4d
    efa0:	0000ee3d 	.word	0x0000ee3d

0000efa4 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    efa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    efa8:	4e20      	ldr	r6, [pc, #128]	; (f02c <usb_mtp_recv+0x88>)
	uint32_t tail = rx_tail;
    efaa:	f8df b094 	ldr.w	fp, [pc, #148]	; f040 <usb_mtp_recv+0x9c>
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    efae:	4f20      	ldr	r7, [pc, #128]	; (f030 <usb_mtp_recv+0x8c>)
	uint32_t wait_begin_at = systick_millis_count;
    efb0:	f8d6 9000 	ldr.w	r9, [r6]
	uint32_t tail = rx_tail;
    efb4:	f89b 4000 	ldrb.w	r4, [fp]
		if (!usb_configuration) return -1; // usb not enumerated by host
    efb8:	783b      	ldrb	r3, [r7, #0]
    efba:	b353      	cbz	r3, f012 <usb_mtp_recv+0x6e>
    efbc:	4682      	mov	sl, r0
    efbe:	460d      	mov	r5, r1
    efc0:	b2e4      	uxtb	r4, r4
    efc2:	f8df 8080 	ldr.w	r8, [pc, #128]	; f044 <usb_mtp_recv+0xa0>
    efc6:	e008      	b.n	efda <usb_mtp_recv+0x36>
		if (tail != rx_head) break;
		if (systick_millis_count - wait_begin_at >= timeout)  {
    efc8:	6833      	ldr	r3, [r6, #0]
    efca:	eba3 0309 	sub.w	r3, r3, r9
    efce:	42ab      	cmp	r3, r5
    efd0:	d224      	bcs.n	f01c <usb_mtp_recv+0x78>
			return 0;
		}
		yield();
    efd2:	f000 fc61 	bl	f898 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    efd6:	783b      	ldrb	r3, [r7, #0]
    efd8:	b1db      	cbz	r3, f012 <usb_mtp_recv+0x6e>
		if (tail != rx_head) break;
    efda:	f898 3000 	ldrb.w	r3, [r8]
    efde:	429c      	cmp	r4, r3
    efe0:	d0f2      	beq.n	efc8 <usb_mtp_recv+0x24>
	}
	if (++tail > RX_NUM) tail = 0;
    efe2:	3401      	adds	r4, #1
    efe4:	2c04      	cmp	r4, #4
    efe6:	d81d      	bhi.n	f024 <usb_mtp_recv+0x80>
	uint32_t i = rx_list[tail];
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;
    efe8:	b2e3      	uxtb	r3, r4
    efea:	f88b 3000 	strb.w	r3, [fp]

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    efee:	4650      	mov	r0, sl
	int len = rx_list_transfer_len[tail];
    eff0:	4b10      	ldr	r3, [pc, #64]	; (f034 <usb_mtp_recv+0x90>)
	uint32_t i = rx_list[tail];
    eff2:	4a11      	ldr	r2, [pc, #68]	; (f038 <usb_mtp_recv+0x94>)
	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
    eff4:	4911      	ldr	r1, [pc, #68]	; (f03c <usb_mtp_recv+0x98>)
	uint32_t i = rx_list[tail];
    eff6:	5d15      	ldrb	r5, [r2, r4]
	int len = rx_list_transfer_len[tail];
    eff8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
	memcpy(buffer,  rx_item_buffer, len);
    effc:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    f000:	4622      	mov	r2, r4
    f002:	f7fe fe4b 	bl	dc9c <memcpy>
	rx_queue_transfer(i);
    f006:	4628      	mov	r0, r5
    f008:	f7ff ff46 	bl	ee98 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    f00c:	4620      	mov	r0, r4
    f00e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    f012:	f04f 34ff 	mov.w	r4, #4294967295
}
    f016:	4620      	mov	r0, r4
    f018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return 0;
    f01c:	2400      	movs	r4, #0
}
    f01e:	4620      	mov	r0, r4
    f020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f024:	2300      	movs	r3, #0
	if (++tail > RX_NUM) tail = 0;
    f026:	461c      	mov	r4, r3
    f028:	e7df      	b.n	efea <usb_mtp_recv+0x46>
    f02a:	bf00      	nop
    f02c:	20035424 	.word	0x20035424
    f030:	20035475 	.word	0x20035475
    f034:	20034cf0 	.word	0x20034cf0
    f038:	20034cdc 	.word	0x20034cdc
    f03c:	20200880 	.word	0x20200880
    f040:	2003546d 	.word	0x2003546d
    f044:	2003546b 	.word	0x2003546b

0000f048 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    f048:	4b07      	ldr	r3, [pc, #28]	; (f068 <usb_mtp_available+0x20>)
    f04a:	781b      	ldrb	r3, [r3, #0]
    f04c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    f050:	b14b      	cbz	r3, f066 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    f052:	4a06      	ldr	r2, [pc, #24]	; (f06c <usb_mtp_available+0x24>)
    f054:	4b06      	ldr	r3, [pc, #24]	; (f070 <usb_mtp_available+0x28>)
    f056:	7812      	ldrb	r2, [r2, #0]
    f058:	781b      	ldrb	r3, [r3, #0]
    f05a:	429a      	cmp	r2, r3
    f05c:	d002      	beq.n	f064 <usb_mtp_available+0x1c>
    f05e:	4b05      	ldr	r3, [pc, #20]	; (f074 <usb_mtp_available+0x2c>)
    f060:	8818      	ldrh	r0, [r3, #0]
    f062:	4770      	bx	lr
	if (!usb_configuration) return 0;
    f064:	2000      	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    f066:	4770      	bx	lr
    f068:	20035475 	.word	0x20035475
    f06c:	2003546b 	.word	0x2003546b
    f070:	2003546d 	.word	0x2003546d
    f074:	20035452 	.word	0x20035452

0000f078 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    f078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    f07c:	f8df b0c0 	ldr.w	fp, [pc, #192]	; f140 <usb_mtp_send+0xc8>
    f080:	4c2a      	ldr	r4, [pc, #168]	; (f12c <usb_mtp_send+0xb4>)
    f082:	f89b 3000 	ldrb.w	r3, [fp]
	uint32_t wait_begin_at = systick_millis_count;
    f086:	4e2a      	ldr	r6, [pc, #168]	; (f130 <usb_mtp_send+0xb8>)

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f088:	4f2a      	ldr	r7, [pc, #168]	; (f134 <usb_mtp_send+0xbc>)
	transfer_t *xfer = tx_transfer + tx_head;
    f08a:	eb04 1443 	add.w	r4, r4, r3, lsl #5
	uint32_t wait_begin_at = systick_millis_count;
    f08e:	f8d6 8000 	ldr.w	r8, [r6]
		if (!usb_configuration) return -1; // usb not enumerated by host
    f092:	783b      	ldrb	r3, [r7, #0]
    f094:	2b00      	cmp	r3, #0
    f096:	d042      	beq.n	f11e <usb_mtp_send+0xa6>
    f098:	4682      	mov	sl, r0
    f09a:	4689      	mov	r9, r1
    f09c:	4615      	mov	r5, r2
    f09e:	e008      	b.n	f0b2 <usb_mtp_send+0x3a>
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    f0a0:	6833      	ldr	r3, [r6, #0]
    f0a2:	eba3 0308 	sub.w	r3, r3, r8
    f0a6:	42ab      	cmp	r3, r5
    f0a8:	d83d      	bhi.n	f126 <usb_mtp_send+0xae>
		yield();
    f0aa:	f000 fbf5 	bl	f898 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    f0ae:	783b      	ldrb	r3, [r7, #0]
    f0b0:	b3ab      	cbz	r3, f11e <usb_mtp_send+0xa6>
		uint32_t status = usb_transfer_status(xfer);
    f0b2:	4620      	mov	r0, r4
    f0b4:	f7ff fe76 	bl	eda4 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    f0b8:	0603      	lsls	r3, r0, #24
    f0ba:	d4f1      	bmi.n	f0a0 <usb_mtp_send+0x28>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f0bc:	f89b 3000 	ldrb.w	r3, [fp]
	memcpy(txdata, buffer, len);
    f0c0:	464a      	mov	r2, r9
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f0c2:	4d1d      	ldr	r5, [pc, #116]	; (f138 <usb_mtp_send+0xc0>)
	memcpy(txdata, buffer, len);
    f0c4:	4651      	mov	r1, sl
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f0c6:	eb05 2543 	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    f0ca:	4628      	mov	r0, r5
    f0cc:	f7fe fde6 	bl	dc9c <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    f0d0:	4a1a      	ldr	r2, [pc, #104]	; (f13c <usb_mtp_send+0xc4>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f0d2:	462b      	mov	r3, r5
    f0d4:	8812      	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    f0d6:	442a      	add	r2, r5
	asm("dsb");
    f0d8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f0dc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f0e0:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    f0e4:	3320      	adds	r3, #32
	} while (location < end_addr);
    f0e6:	429a      	cmp	r2, r3
    f0e8:	d8fa      	bhi.n	f0e0 <usb_mtp_send+0x68>
	asm("dsb");
    f0ea:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f0ee:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    f0f2:	2300      	movs	r3, #0
    f0f4:	4629      	mov	r1, r5
    f0f6:	464a      	mov	r2, r9
    f0f8:	4620      	mov	r0, r4
    f0fa:	f7ff fe19 	bl	ed30 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    f0fe:	4621      	mov	r1, r4
    f100:	2004      	movs	r0, #4
    f102:	f7ff fe2d 	bl	ed60 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f106:	f89b 3000 	ldrb.w	r3, [fp]
	return len;
    f10a:	4648      	mov	r0, r9
	if (++tx_head >= TX_NUM) tx_head = 0;
    f10c:	3301      	adds	r3, #1
    f10e:	b2db      	uxtb	r3, r3
    f110:	2b03      	cmp	r3, #3
    f112:	bf88      	it	hi
    f114:	2300      	movhi	r3, #0
    f116:	f88b 3000 	strb.w	r3, [fp]
}
    f11a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    f11e:	f04f 30ff 	mov.w	r0, #4294967295
}
    f122:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    f126:	2000      	movs	r0, #0
}
    f128:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f12c:	2000bd00 	.word	0x2000bd00
    f130:	20035424 	.word	0x20035424
    f134:	20035475 	.word	0x20035475
    f138:	20201080 	.word	0x20201080
    f13c:	2003545c 	.word	0x2003545c
    f140:	20035471 	.word	0x20035471

0000f144 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    f144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    f146:	4c14      	ldr	r4, [pc, #80]	; (f198 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f148:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f14c:	4e13      	ldr	r6, [pc, #76]	; (f19c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f14e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    f152:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f156:	4f12      	ldr	r7, [pc, #72]	; (f1a0 <rx_queue_transfer+0x5c>)
    f158:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    f15c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f15e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f162:	4621      	mov	r1, r4
    f164:	883a      	ldrh	r2, [r7, #0]
    f166:	4630      	mov	r0, r6
    f168:	f7ff fde2 	bl	ed30 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    f16c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    f16e:	4423      	add	r3, r4
	asm("dsb");
    f170:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    f174:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    f178:	3420      	adds	r4, #32
	} while (location < end_addr);
    f17a:	42a3      	cmp	r3, r4
    f17c:	d8fa      	bhi.n	f174 <rx_queue_transfer+0x30>
	asm("dsb");
    f17e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f182:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    f186:	2003      	movs	r0, #3
    f188:	4631      	mov	r1, r6
    f18a:	f7ff fdfd 	bl	ed88 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    f18e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    f192:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    f196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f198:	2000ab80 	.word	0x2000ab80
    f19c:	2000bc00 	.word	0x2000bc00
    f1a0:	20035454 	.word	0x20035454

0000f1a4 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f1a4:	4b24      	ldr	r3, [pc, #144]	; (f238 <rx_event+0x94>)
{
    f1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f1aa:	881c      	ldrh	r4, [r3, #0]
    f1ac:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    f1ae:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f1b0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    f1b4:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    f1b6:	2c00      	cmp	r4, #0
    f1b8:	dd24      	ble.n	f204 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    f1ba:	4920      	ldr	r1, [pc, #128]	; (f23c <rx_event+0x98>)
		if (head != rx_tail) {
    f1bc:	4820      	ldr	r0, [pc, #128]	; (f240 <rx_event+0x9c>)
		uint32_t head = rx_head;
    f1be:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    f1c0:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    f1c2:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    f1c4:	4e1f      	ldr	r6, [pc, #124]	; (f244 <rx_event+0xa0>)
		if (head != rx_tail) {
    f1c6:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    f1c8:	481f      	ldr	r0, [pc, #124]	; (f248 <rx_event+0xa4>)
		if (head != rx_tail) {
    f1ca:	d007      	beq.n	f1dc <rx_event+0x38>
			uint32_t ii = rx_list[head];
    f1cc:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    f1d0:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    f1d4:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    f1d8:	4294      	cmp	r4, r2
    f1da:	d918      	bls.n	f20e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    f1dc:	3301      	adds	r3, #1
		rx_index[i] = 0;
    f1de:	2200      	movs	r2, #0
		rx_count[i] = len;
    f1e0:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    f1e4:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    f1e6:	4e19      	ldr	r6, [pc, #100]	; (f24c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    f1e8:	bf88      	it	hi
    f1ea:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    f1ec:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    f1f0:	bf98      	it	ls
    f1f2:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    f1f4:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    f1f6:	4b16      	ldr	r3, [pc, #88]	; (f250 <rx_event+0xac>)
		rx_head = head;
    f1f8:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    f1fa:	681a      	ldr	r2, [r3, #0]
    f1fc:	4414      	add	r4, r2
    f1fe:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    f200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    f204:	4628      	mov	r0, r5
}
    f206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    f20a:	f7ff bf9b 	b.w	f144 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    f20e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    f212:	4910      	ldr	r1, [pc, #64]	; (f254 <rx_event+0xb0>)
    f214:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    f216:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    f218:	4408      	add	r0, r1
    f21a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    f21e:	f7fe fd3d 	bl	dc9c <memcpy>
				rx_available += len;
    f222:	4a0b      	ldr	r2, [pc, #44]	; (f250 <rx_event+0xac>)
				rx_queue_transfer(i);
    f224:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    f226:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    f22a:	6813      	ldr	r3, [r2, #0]
    f22c:	4423      	add	r3, r4
}
    f22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    f232:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    f234:	f7ff bf86 	b.w	f144 <rx_queue_transfer>
    f238:	20035454 	.word	0x20035454
    f23c:	2003546c 	.word	0x2003546c
    f240:	2003546e 	.word	0x2003546e
    f244:	20034cbc 	.word	0x20034cbc
    f248:	20034ce4 	.word	0x20034ce4
    f24c:	20034ccc 	.word	0x20034ccc
    f250:	20034cb8 	.word	0x20034cb8
    f254:	2000ab80 	.word	0x2000ab80

0000f258 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    f258:	4b1d      	ldr	r3, [pc, #116]	; (f2d0 <usb_serial_flush_callback+0x78>)
    f25a:	781a      	ldrb	r2, [r3, #0]
    f25c:	2a00      	cmp	r2, #0
    f25e:	d136      	bne.n	f2ce <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    f260:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    f264:	4a1b      	ldr	r2, [pc, #108]	; (f2d4 <usb_serial_flush_callback+0x7c>)
    f266:	7812      	ldrb	r2, [r2, #0]
    f268:	b38a      	cbz	r2, f2ce <usb_serial_flush_callback+0x76>
{
    f26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    f26e:	4d1a      	ldr	r5, [pc, #104]	; (f2d8 <usb_serial_flush_callback+0x80>)
    f270:	882a      	ldrh	r2, [r5, #0]
    f272:	b352      	cbz	r2, f2ca <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    f274:	4e19      	ldr	r6, [pc, #100]	; (f2dc <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    f276:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    f27a:	4f19      	ldr	r7, [pc, #100]	; (f2e0 <usb_serial_flush_callback+0x88>)
    f27c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f27e:	4c19      	ldr	r4, [pc, #100]	; (f2e4 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    f280:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f284:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    f288:	4642      	mov	r2, r8
    f28a:	4638      	mov	r0, r7
    f28c:	4621      	mov	r1, r4
    f28e:	f7ff fd4f 	bl	ed30 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    f292:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    f296:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f29a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f29e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    f2a2:	3420      	adds	r4, #32
	} while (location < end_addr);
    f2a4:	42a2      	cmp	r2, r4
    f2a6:	d8fa      	bhi.n	f29e <usb_serial_flush_callback+0x46>
	asm("dsb");
    f2a8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f2ac:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    f2b0:	2003      	movs	r0, #3
    f2b2:	4639      	mov	r1, r7
    f2b4:	f7ff fd54 	bl	ed60 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f2b8:	7833      	ldrb	r3, [r6, #0]
    f2ba:	3301      	adds	r3, #1
    f2bc:	b2db      	uxtb	r3, r3
    f2be:	2b03      	cmp	r3, #3
    f2c0:	bf88      	it	hi
    f2c2:	2300      	movhi	r3, #0
    f2c4:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    f2c6:	2300      	movs	r3, #0
    f2c8:	802b      	strh	r3, [r5, #0]
}
    f2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2ce:	4770      	bx	lr
    f2d0:	20035473 	.word	0x20035473
    f2d4:	20035475 	.word	0x20035475
    f2d8:	2003545a 	.word	0x2003545a
    f2dc:	20035472 	.word	0x20035472
    f2e0:	2000bd80 	.word	0x2000bd80
    f2e4:	2000be00 	.word	0x2000be00

0000f2e8 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    f2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2ec:	b085      	sub	sp, #20
	while (size > 0) {
    f2ee:	e9cd 1001 	strd	r1, r0, [sp, #4]
    f2f2:	2900      	cmp	r1, #0
    f2f4:	f000 80bf 	beq.w	f476 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    f2f8:	2300      	movs	r3, #0
    f2fa:	4c60      	ldr	r4, [pc, #384]	; (f47c <usb_serial_write.part.0+0x194>)
    f2fc:	f8df 8198 	ldr.w	r8, [pc, #408]	; f498 <usb_serial_write.part.0+0x1b0>
    f300:	f8df a198 	ldr.w	sl, [pc, #408]	; f49c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    f304:	4f5e      	ldr	r7, [pc, #376]	; (f480 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    f306:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    f308:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    f30a:	4a5e      	ldr	r2, [pc, #376]	; (f484 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    f30c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    f30e:	4b5e      	ldr	r3, [pc, #376]	; (f488 <usb_serial_write.part.0+0x1a0>)
    f310:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    f312:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    f316:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    f31a:	2b00      	cmp	r3, #0
    f31c:	f040 80a7 	bne.w	f46e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    f320:	461e      	mov	r6, r3
		int waiting=0;
    f322:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    f324:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    f326:	4648      	mov	r0, r9
    f328:	f7ff fd3c 	bl	eda4 <usb_transfer_status>
			if (!(status & 0x80)) {
    f32c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    f330:	f000 808c 	beq.w	f44c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    f334:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    f338:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    f33c:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    f340:	b905      	cbnz	r5, f344 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    f342:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    f344:	2b00      	cmp	r3, #0
    f346:	d17d      	bne.n	f444 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    f348:	683b      	ldr	r3, [r7, #0]
    f34a:	1b9b      	subs	r3, r3, r6
    f34c:	2b78      	cmp	r3, #120	; 0x78
    f34e:	f200 8087 	bhi.w	f460 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    f352:	4b4e      	ldr	r3, [pc, #312]	; (f48c <usb_serial_write.part.0+0x1a4>)
    f354:	781b      	ldrb	r3, [r3, #0]
    f356:	2b00      	cmp	r3, #0
    f358:	d074      	beq.n	f444 <usb_serial_write.part.0+0x15c>
			yield();
    f35a:	f000 fa9d 	bl	f898 <yield>
			tx_noautoflush = 1;
    f35e:	2201      	movs	r2, #1
		while (!tx_available) {
    f360:	f8b8 3000 	ldrh.w	r3, [r8]
    f364:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    f366:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    f368:	2b00      	cmp	r3, #0
    f36a:	d0dc      	beq.n	f326 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    f36c:	4a46      	ldr	r2, [pc, #280]	; (f488 <usb_serial_write.part.0+0x1a0>)
    f36e:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    f372:	7811      	ldrb	r1, [r2, #0]
    f374:	461a      	mov	r2, r3
    f376:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    f37a:	4d45      	ldr	r5, [pc, #276]	; (f490 <usb_serial_write.part.0+0x1a8>)
    f37c:	02c9      	lsls	r1, r1, #11
    f37e:	4428      	add	r0, r5
		if (size >= tx_available) {
    f380:	9d01      	ldr	r5, [sp, #4]
    f382:	4295      	cmp	r5, r2
    f384:	d217      	bcs.n	f3b6 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    f386:	9303      	str	r3, [sp, #12]
    f388:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    f38c:	462a      	mov	r2, r5
    f38e:	f7fe fc85 	bl	dc9c <memcpy>
			tx_available -= size;
    f392:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    f394:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    f398:	1b5b      	subs	r3, r3, r5
    f39a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    f39e:	4b3d      	ldr	r3, [pc, #244]	; (f494 <usb_serial_write.part.0+0x1ac>)
    f3a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    f3a4:	f3bf 8f4f 	dsb	sy
			sent += size;
    f3a8:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    f3aa:	2300      	movs	r3, #0
			sent += size;
    f3ac:	4428      	add	r0, r5
		tx_noautoflush = 0;
    f3ae:	7023      	strb	r3, [r4, #0]
}
    f3b0:	b005      	add	sp, #20
    f3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f3b6:	4b36      	ldr	r3, [pc, #216]	; (f490 <usb_serial_write.part.0+0x1a8>)
    f3b8:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    f3ba:	9902      	ldr	r1, [sp, #8]
    f3bc:	f7fe fc6e 	bl	dc9c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    f3c0:	2300      	movs	r3, #0
    f3c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f3c6:	4629      	mov	r1, r5
    f3c8:	4648      	mov	r0, r9
    f3ca:	f7ff fcb1 	bl	ed30 <usb_prepare_transfer>
	asm("dsb");
    f3ce:	f3bf 8f4f 	dsb	sy
    f3d2:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    f3d6:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    f3da:	4293      	cmp	r3, r2
    f3dc:	bf34      	ite	cc
    f3de:	2301      	movcc	r3, #1
    f3e0:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    f3e2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    f3e6:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    f3ea:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    f3ee:	3520      	adds	r5, #32
	} while (location < end_addr);
    f3f0:	42ab      	cmp	r3, r5
    f3f2:	d1fa      	bne.n	f3ea <usb_serial_write.part.0+0x102>
	asm("dsb");
    f3f4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f3f8:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    f3fc:	2003      	movs	r0, #3
    f3fe:	4649      	mov	r1, r9
    f400:	f7ff fcae 	bl	ed60 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    f404:	4a20      	ldr	r2, [pc, #128]	; (f488 <usb_serial_write.part.0+0x1a0>)
    f406:	7813      	ldrb	r3, [r2, #0]
    f408:	3301      	adds	r3, #1
    f40a:	b2db      	uxtb	r3, r3
    f40c:	2b03      	cmp	r3, #3
    f40e:	bf84      	itt	hi
    f410:	2300      	movhi	r3, #0
    f412:	4a1d      	ldrhi	r2, [pc, #116]	; (f488 <usb_serial_write.part.0+0x1a0>)
    f414:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    f416:	f8b8 3000 	ldrh.w	r3, [r8]
    f41a:	9a01      	ldr	r2, [sp, #4]
    f41c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    f41e:	9a00      	ldr	r2, [sp, #0]
    f420:	441a      	add	r2, r3
			size -= tx_available;
    f422:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    f424:	9200      	str	r2, [sp, #0]
			data += tx_available;
    f426:	9a02      	ldr	r2, [sp, #8]
    f428:	441a      	add	r2, r3
			tx_available = 0;
    f42a:	2300      	movs	r3, #0
			data += tx_available;
    f42c:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    f42e:	4a19      	ldr	r2, [pc, #100]	; (f494 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    f430:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    f434:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    f438:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    f43c:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    f43e:	2900      	cmp	r1, #0
    f440:	f47f af62 	bne.w	f308 <usb_serial_write.part.0+0x20>
	return sent;
    f444:	9800      	ldr	r0, [sp, #0]
}
    f446:	b005      	add	sp, #20
    f448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    f44c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    f450:	4b0d      	ldr	r3, [pc, #52]	; (f488 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    f452:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    f456:	7819      	ldrb	r1, [r3, #0]
				break;
    f458:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    f45a:	f8a8 2000 	strh.w	r2, [r8]
				break;
    f45e:	e78a      	b.n	f376 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    f460:	2301      	movs	r3, #1
				return sent;
    f462:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    f464:	f88a 3000 	strb.w	r3, [sl]
}
    f468:	b005      	add	sp, #20
    f46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    f46e:	461a      	mov	r2, r3
    f470:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    f474:	e77f      	b.n	f376 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    f476:	9801      	ldr	r0, [sp, #4]
	return sent;
    f478:	e7e5      	b.n	f446 <usb_serial_write.part.0+0x15e>
    f47a:	bf00      	nop
    f47c:	20035473 	.word	0x20035473
    f480:	20035424 	.word	0x20035424
    f484:	2000bd80 	.word	0x2000bd80
    f488:	20035472 	.word	0x20035472
    f48c:	20035475 	.word	0x20035475
    f490:	2000be00 	.word	0x2000be00
    f494:	402e0000 	.word	0x402e0000
    f498:	2003545a 	.word	0x2003545a
    f49c:	20035470 	.word	0x20035470

0000f4a0 <usb_serial_reset>:
}
    f4a0:	4770      	bx	lr
    f4a2:	bf00      	nop

0000f4a4 <usb_serial_configure>:
	if (usb_high_speed) {
    f4a4:	4b2d      	ldr	r3, [pc, #180]	; (f55c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f4a6:	2100      	movs	r1, #0
    f4a8:	2280      	movs	r2, #128	; 0x80
    f4aa:	482d      	ldr	r0, [pc, #180]	; (f560 <usb_serial_configure+0xbc>)
{
    f4ac:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    f4ae:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    f4b0:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    f4b2:	4d2c      	ldr	r5, [pc, #176]	; (f564 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    f4b4:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    f4b6:	4e2c      	ldr	r6, [pc, #176]	; (f568 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    f4b8:	bf0c      	ite	eq
    f4ba:	2340      	moveq	r3, #64	; 0x40
    f4bc:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    f4c0:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    f4c2:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f4c4:	f002 fc78 	bl	11db8 <memset>
	tx_head = 0;
    f4c8:	4a28      	ldr	r2, [pc, #160]	; (f56c <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f4ca:	4621      	mov	r1, r4
	tx_available = 0;
    f4cc:	4b28      	ldr	r3, [pc, #160]	; (f570 <usb_serial_configure+0xcc>)
	tx_head = 0;
    f4ce:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f4d0:	f44f 7280 	mov.w	r2, #256	; 0x100
    f4d4:	4827      	ldr	r0, [pc, #156]	; (f574 <usb_serial_configure+0xd0>)
	tx_available = 0;
    f4d6:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f4d8:	f002 fc6e 	bl	11db8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    f4dc:	4a26      	ldr	r2, [pc, #152]	; (f578 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    f4de:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    f4e0:	4b26      	ldr	r3, [pc, #152]	; (f57c <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    f4e2:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    f4e4:	e9c2 4400 	strd	r4, r4, [r2]
    f4e8:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    f4ec:	4a24      	ldr	r2, [pc, #144]	; (f580 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    f4ee:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    f4f2:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    f4f4:	4a23      	ldr	r2, [pc, #140]	; (f584 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    f4f6:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    f4fa:	4b23      	ldr	r3, [pc, #140]	; (f588 <usb_serial_configure+0xe4>)
    f4fc:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    f4fe:	4623      	mov	r3, r4
	rx_available = 0;
    f500:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    f502:	4622      	mov	r2, r4
    f504:	f7ff fbe2 	bl	eccc <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    f508:	4622      	mov	r2, r4
    f50a:	8831      	ldrh	r1, [r6, #0]
    f50c:	2003      	movs	r0, #3
    f50e:	4b1f      	ldr	r3, [pc, #124]	; (f58c <usb_serial_configure+0xe8>)
    f510:	f7ff fbaa 	bl	ec68 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    f514:	4623      	mov	r3, r4
    f516:	2201      	movs	r2, #1
    f518:	8829      	ldrh	r1, [r5, #0]
    f51a:	2003      	movs	r0, #3
    f51c:	f7ff fbd6 	bl	eccc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    f520:	4620      	mov	r0, r4
    f522:	3401      	adds	r4, #1
    f524:	f7ff fe0e 	bl	f144 <rx_queue_transfer>
    f528:	2c08      	cmp	r4, #8
    f52a:	d1f9      	bne.n	f520 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    f52c:	4b18      	ldr	r3, [pc, #96]	; (f590 <usb_serial_configure+0xec>)
    f52e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    f530:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    f532:	4818      	ldr	r0, [pc, #96]	; (f594 <usb_serial_configure+0xf0>)
    f534:	4c18      	ldr	r4, [pc, #96]	; (f598 <usb_serial_configure+0xf4>)
    f536:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    f538:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    f53c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    f540:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    f544:	4915      	ldr	r1, [pc, #84]	; (f59c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    f546:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    f54a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    f54e:	b121      	cbz	r1, f55a <usb_serial_configure+0xb6>
    f550:	4a13      	ldr	r2, [pc, #76]	; (f5a0 <usb_serial_configure+0xfc>)
    f552:	7813      	ldrb	r3, [r2, #0]
    f554:	f043 0301 	orr.w	r3, r3, #1
    f558:	7013      	strb	r3, [r2, #0]
}
    f55a:	bd70      	pop	{r4, r5, r6, pc}
    f55c:	20035476 	.word	0x20035476
    f560:	2000bd80 	.word	0x2000bd80
    f564:	2003545e 	.word	0x2003545e
    f568:	20035454 	.word	0x20035454
    f56c:	20035472 	.word	0x20035472
    f570:	2003545a 	.word	0x2003545a
    f574:	2000bc00 	.word	0x2000bc00
    f578:	20034cbc 	.word	0x20034cbc
    f57c:	20034ccc 	.word	0x20034ccc
    f580:	2003546c 	.word	0x2003546c
    f584:	20034cb8 	.word	0x20034cb8
    f588:	2003546e 	.word	0x2003546e
    f58c:	0000f1a5 	.word	0x0000f1a5
    f590:	402e0000 	.word	0x402e0000
    f594:	20035438 	.word	0x20035438
    f598:	0000f259 	.word	0x0000f259
    f59c:	00000000 	.word	0x00000000
    f5a0:	20035478 	.word	0x20035478

0000f5a4 <usb_serial_read>:
{
    f5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f5a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f5ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    f5b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; f67c <usb_serial_read+0xd8>
{
    f5b4:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f5b6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    f5ba:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    f5bc:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    f5c0:	2900      	cmp	r1, #0
    f5c2:	d04f      	beq.n	f664 <usb_serial_read+0xc0>
    f5c4:	4680      	mov	r8, r0
    f5c6:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    f5c8:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    f5ca:	f8df 90b4 	ldr.w	r9, [pc, #180]	; f680 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    f5ce:	4b26      	ldr	r3, [pc, #152]	; (f668 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    f5d0:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f5d4:	4925      	ldr	r1, [pc, #148]	; (f66c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    f5d6:	781b      	ldrb	r3, [r3, #0]
    f5d8:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    f5da:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    f5de:	d03f      	beq.n	f660 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    f5e0:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    f5e2:	4b23      	ldr	r3, [pc, #140]	; (f670 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f5e4:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    f5e6:	bf28      	it	cs
    f5e8:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    f5ea:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    f5ec:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f5f0:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    f5f4:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    f5f6:	4b1f      	ldr	r3, [pc, #124]	; (f674 <usb_serial_read+0xd0>)
    f5f8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    f5fc:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    f600:	42aa      	cmp	r2, r5
    f602:	d21c      	bcs.n	f63e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    f604:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    f608:	4918      	ldr	r1, [pc, #96]	; (f66c <usb_serial_read+0xc8>)
			rx_available -= len;
    f60a:	4c1b      	ldr	r4, [pc, #108]	; (f678 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    f60c:	4461      	add	r1, ip
    f60e:	9201      	str	r2, [sp, #4]
    f610:	f7fe fb44 	bl	dc9c <memcpy>
			rx_available -= len;
    f614:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    f616:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    f61a:	4658      	mov	r0, fp
			rx_index[i] += len;
    f61c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    f61e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    f622:	442a      	add	r2, r5
			rx_available -= len;
    f624:	4439      	add	r1, r7
			rx_index[i] += len;
    f626:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    f62a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    f62c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f630:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    f634:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    f638:	b003      	add	sp, #12
    f63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f63e:	462a      	mov	r2, r5
			count += avail;
    f640:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f642:	f7fe fb2b 	bl	dc9c <memcpy>
			rx_available -= avail;
    f646:	490c      	ldr	r1, [pc, #48]	; (f678 <usb_serial_read+0xd4>)
			rx_tail = tail;
    f648:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    f64a:	4630      	mov	r0, r6
			rx_available -= avail;
    f64c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    f64e:	44a8      	add	r8, r5
			rx_available -= avail;
    f650:	1b52      	subs	r2, r2, r5
    f652:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    f654:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    f658:	f7ff fd74 	bl	f144 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    f65c:	45bb      	cmp	fp, r7
    f65e:	d8b6      	bhi.n	f5ce <usb_serial_read+0x2a>
	return count;
    f660:	4638      	mov	r0, r7
    f662:	e7e3      	b.n	f62c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    f664:	4608      	mov	r0, r1
    f666:	e7e1      	b.n	f62c <usb_serial_read+0x88>
    f668:	2003546c 	.word	0x2003546c
    f66c:	2000ab80 	.word	0x2000ab80
    f670:	20034ce4 	.word	0x20034ce4
    f674:	20034cbc 	.word	0x20034cbc
    f678:	20034cb8 	.word	0x20034cb8
    f67c:	2003546e 	.word	0x2003546e
    f680:	20034ccc 	.word	0x20034ccc

0000f684 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    f684:	4b0b      	ldr	r3, [pc, #44]	; (f6b4 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    f686:	4a0c      	ldr	r2, [pc, #48]	; (f6b8 <usb_serial_peekchar+0x34>)
    f688:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    f68a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    f68c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    f68e:	428a      	cmp	r2, r1
    f690:	d00d      	beq.n	f6ae <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    f692:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    f694:	4809      	ldr	r0, [pc, #36]	; (f6bc <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    f696:	4a0a      	ldr	r2, [pc, #40]	; (f6c0 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    f698:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    f69a:	490a      	ldr	r1, [pc, #40]	; (f6c4 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    f69c:	bf28      	it	cs
    f69e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    f6a0:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    f6a2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    f6a6:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    f6aa:	5c58      	ldrb	r0, [r3, r1]
    f6ac:	4770      	bx	lr
	if (tail == rx_head) return -1;
    f6ae:	f04f 30ff 	mov.w	r0, #4294967295
}
    f6b2:	4770      	bx	lr
    f6b4:	2003546c 	.word	0x2003546c
    f6b8:	2003546e 	.word	0x2003546e
    f6bc:	20034ce4 	.word	0x20034ce4
    f6c0:	2000ab80 	.word	0x2000ab80
    f6c4:	20034ccc 	.word	0x20034ccc

0000f6c8 <usb_serial_available>:
	uint32_t n = rx_available;
    f6c8:	4b04      	ldr	r3, [pc, #16]	; (f6dc <usb_serial_available+0x14>)
{
    f6ca:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    f6cc:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    f6ce:	b10c      	cbz	r4, f6d4 <usb_serial_available+0xc>
}
    f6d0:	4620      	mov	r0, r4
    f6d2:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    f6d4:	f000 f8e0 	bl	f898 <yield>
}
    f6d8:	4620      	mov	r0, r4
    f6da:	bd10      	pop	{r4, pc}
    f6dc:	20034cb8 	.word	0x20034cb8

0000f6e0 <usb_serial_flush_input>:
{
    f6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    f6e4:	4e14      	ldr	r6, [pc, #80]	; (f738 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    f6e6:	4d15      	ldr	r5, [pc, #84]	; (f73c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    f6e8:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    f6ea:	782a      	ldrb	r2, [r5, #0]
    f6ec:	4293      	cmp	r3, r2
    f6ee:	d021      	beq.n	f734 <usb_serial_flush_input+0x54>
    f6f0:	b2dc      	uxtb	r4, r3
    f6f2:	f8df 9050 	ldr.w	r9, [pc, #80]	; f744 <usb_serial_flush_input+0x64>
    f6f6:	f8df b050 	ldr.w	fp, [pc, #80]	; f748 <usb_serial_flush_input+0x68>
    f6fa:	f8df 8050 	ldr.w	r8, [pc, #80]	; f74c <usb_serial_flush_input+0x6c>
    f6fe:	4f10      	ldr	r7, [pc, #64]	; (f740 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    f700:	3401      	adds	r4, #1
    f702:	2c08      	cmp	r4, #8
		rx_tail = tail;
    f704:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    f708:	d901      	bls.n	f70e <usb_serial_flush_input+0x2e>
    f70a:	2400      	movs	r4, #0
    f70c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    f70e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    f712:	f8db 3000 	ldr.w	r3, [fp]
    f716:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    f71a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    f71e:	1a52      	subs	r2, r2, r1
    f720:	1a9b      	subs	r3, r3, r2
    f722:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    f726:	f7ff fd0d 	bl	f144 <rx_queue_transfer>
		rx_tail = tail;
    f72a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    f72e:	782b      	ldrb	r3, [r5, #0]
    f730:	42a3      	cmp	r3, r4
    f732:	d1e5      	bne.n	f700 <usb_serial_flush_input+0x20>
}
    f734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f738:	2003546e 	.word	0x2003546e
    f73c:	2003546c 	.word	0x2003546c
    f740:	20034ccc 	.word	0x20034ccc
    f744:	20034ce4 	.word	0x20034ce4
    f748:	20034cb8 	.word	0x20034cb8
    f74c:	20034cbc 	.word	0x20034cbc

0000f750 <usb_serial_getchar>:
{
    f750:	b500      	push	{lr}
    f752:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    f754:	2101      	movs	r1, #1
    f756:	f10d 0007 	add.w	r0, sp, #7
    f75a:	f7ff ff23 	bl	f5a4 <usb_serial_read>
    f75e:	b120      	cbz	r0, f76a <usb_serial_getchar+0x1a>
    f760:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    f764:	b003      	add	sp, #12
    f766:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    f76a:	f04f 30ff 	mov.w	r0, #4294967295
    f76e:	e7f9      	b.n	f764 <usb_serial_getchar+0x14>

0000f770 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    f770:	4b09      	ldr	r3, [pc, #36]	; (f798 <usb_serial_putchar+0x28>)
{
    f772:	b500      	push	{lr}
    f774:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    f776:	781b      	ldrb	r3, [r3, #0]
{
    f778:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    f77c:	b13b      	cbz	r3, f78e <usb_serial_putchar+0x1e>
    f77e:	2101      	movs	r1, #1
    f780:	f10d 0007 	add.w	r0, sp, #7
    f784:	f7ff fdb0 	bl	f2e8 <usb_serial_write.part.0>
}
    f788:	b003      	add	sp, #12
    f78a:	f85d fb04 	ldr.w	pc, [sp], #4
    f78e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    f792:	b003      	add	sp, #12
    f794:	f85d fb04 	ldr.w	pc, [sp], #4
    f798:	20035475 	.word	0x20035475

0000f79c <usb_serial_write>:
	if (!usb_configuration) return 0;
    f79c:	4b04      	ldr	r3, [pc, #16]	; (f7b0 <usb_serial_write+0x14>)
    f79e:	781b      	ldrb	r3, [r3, #0]
    f7a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    f7a4:	b10b      	cbz	r3, f7aa <usb_serial_write+0xe>
    f7a6:	f7ff bd9f 	b.w	f2e8 <usb_serial_write.part.0>
}
    f7aa:	4610      	mov	r0, r2
    f7ac:	4770      	bx	lr
    f7ae:	bf00      	nop
    f7b0:	20035475 	.word	0x20035475

0000f7b4 <usb_serial_write_buffer_free>:
{
    f7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    f7b8:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    f7ba:	f8df 8044 	ldr.w	r8, [pc, #68]	; f800 <usb_serial_write_buffer_free+0x4c>
    f7be:	2301      	movs	r3, #1
    f7c0:	4d0d      	ldr	r5, [pc, #52]	; (f7f8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    f7c2:	4627      	mov	r7, r4
    f7c4:	4e0d      	ldr	r6, [pc, #52]	; (f7fc <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    f7c6:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    f7ca:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    f7cc:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    f7ce:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    f7d0:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    f7d2:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    f7d6:	d005      	beq.n	f7e4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    f7d8:	f7ff fae4 	bl	eda4 <usb_transfer_status>
    f7dc:	0603      	lsls	r3, r0, #24
    f7de:	bf58      	it	pl
    f7e0:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    f7e4:	2c04      	cmp	r4, #4
    f7e6:	d1f0      	bne.n	f7ca <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    f7e8:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    f7ec:	2300      	movs	r3, #0
}
    f7ee:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    f7f0:	f888 3000 	strb.w	r3, [r8]
}
    f7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7f8:	2000bd80 	.word	0x2000bd80
    f7fc:	20035472 	.word	0x20035472
    f800:	20035473 	.word	0x20035473

0000f804 <usb_serial_flush_output>:
{
    f804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    f808:	4b1d      	ldr	r3, [pc, #116]	; (f880 <usb_serial_flush_output+0x7c>)
    f80a:	781b      	ldrb	r3, [r3, #0]
    f80c:	b113      	cbz	r3, f814 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    f80e:	4d1d      	ldr	r5, [pc, #116]	; (f884 <usb_serial_flush_output+0x80>)
    f810:	882a      	ldrh	r2, [r5, #0]
    f812:	b90a      	cbnz	r2, f818 <usb_serial_flush_output+0x14>
}
    f814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    f818:	4e1b      	ldr	r6, [pc, #108]	; (f888 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    f81a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    f81e:	491b      	ldr	r1, [pc, #108]	; (f88c <usb_serial_flush_output+0x88>)
    f820:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    f822:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f824:	4c1a      	ldr	r4, [pc, #104]	; (f890 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    f826:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    f82a:	4f1a      	ldr	r7, [pc, #104]	; (f894 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f82c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    f830:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    f832:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    f834:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    f836:	4621      	mov	r1, r4
    f838:	2300      	movs	r3, #0
    f83a:	f7ff fa79 	bl	ed30 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    f83e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    f842:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f846:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f84a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    f84e:	3420      	adds	r4, #32
	} while (location < end_addr);
    f850:	42a2      	cmp	r2, r4
    f852:	d8fa      	bhi.n	f84a <usb_serial_flush_output+0x46>
	asm("dsb");
    f854:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f858:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    f85c:	2003      	movs	r0, #3
    f85e:	4641      	mov	r1, r8
    f860:	f7ff fa7e 	bl	ed60 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f864:	7833      	ldrb	r3, [r6, #0]
    f866:	3301      	adds	r3, #1
    f868:	b2db      	uxtb	r3, r3
    f86a:	2b03      	cmp	r3, #3
    f86c:	bf88      	it	hi
    f86e:	2300      	movhi	r3, #0
    f870:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    f872:	2300      	movs	r3, #0
    f874:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    f876:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    f87a:	703b      	strb	r3, [r7, #0]
}
    f87c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f880:	20035475 	.word	0x20035475
    f884:	2003545a 	.word	0x2003545a
    f888:	20035472 	.word	0x20035472
    f88c:	2000bd80 	.word	0x2000bd80
    f890:	2000be00 	.word	0x2000be00
    f894:	20035473 	.word	0x20035473

0000f898 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    f898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    f89c:	4b2d      	ldr	r3, [pc, #180]	; (f954 <yield+0xbc>)
    f89e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    f8a0:	b166      	cbz	r6, f8bc <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    f8a2:	4f2d      	ldr	r7, [pc, #180]	; (f958 <yield+0xc0>)
    f8a4:	783b      	ldrb	r3, [r7, #0]
    f8a6:	b94b      	cbnz	r3, f8bc <yield+0x24>
	running = 1;
    f8a8:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    f8aa:	07f1      	lsls	r1, r6, #31
	running = 1;
    f8ac:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    f8ae:	d443      	bmi.n	f938 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    f8b0:	07b2      	lsls	r2, r6, #30
    f8b2:	d426      	bmi.n	f902 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    f8b4:	2300      	movs	r3, #0
    f8b6:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    f8b8:	0773      	lsls	r3, r6, #29
    f8ba:	d401      	bmi.n	f8c0 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    f8bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    f8c0:	4b26      	ldr	r3, [pc, #152]	; (f95c <yield+0xc4>)
    f8c2:	681a      	ldr	r2, [r3, #0]
    f8c4:	2a00      	cmp	r2, #0
    f8c6:	d0f9      	beq.n	f8bc <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    f8c8:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    f8cc:	2a00      	cmp	r2, #0
    f8ce:	d1f5      	bne.n	f8bc <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f8d0:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    f8d4:	b672      	cpsid	i
		EventResponder *first = firstYield;
    f8d6:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    f8d8:	2800      	cmp	r0, #0
    f8da:	d034      	beq.n	f946 <yield+0xae>
		if (runningFromYield) {
    f8dc:	4c20      	ldr	r4, [pc, #128]	; (f960 <yield+0xc8>)
    f8de:	7821      	ldrb	r1, [r4, #0]
    f8e0:	2900      	cmp	r1, #0
    f8e2:	d130      	bne.n	f946 <yield+0xae>
		runningFromYield = true;
    f8e4:	2201      	movs	r2, #1
    f8e6:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    f8e8:	6942      	ldr	r2, [r0, #20]
    f8ea:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    f8ec:	2a00      	cmp	r2, #0
    f8ee:	d02e      	beq.n	f94e <yield+0xb6>
			firstYield->_prev = nullptr;
    f8f0:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    f8f2:	b905      	cbnz	r5, f8f6 <yield+0x5e>
    f8f4:	b662      	cpsie	i
		first->_triggered = false;
    f8f6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    f8f8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    f8fa:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    f8fc:	4798      	blx	r3
		runningFromYield = false;
    f8fe:	7025      	strb	r5, [r4, #0]
    f900:	e7dc      	b.n	f8bc <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f902:	f8df 8064 	ldr.w	r8, [pc, #100]	; f968 <yield+0xd0>
    f906:	f898 3000 	ldrb.w	r3, [r8]
    f90a:	2b00      	cmp	r3, #0
    f90c:	d0d2      	beq.n	f8b4 <yield+0x1c>
    f90e:	2500      	movs	r5, #0
    f910:	f8df 9058 	ldr.w	r9, [pc, #88]	; f96c <yield+0xd4>
    f914:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    f916:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f91a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    f91c:	6823      	ldr	r3, [r4, #0]
    f91e:	4620      	mov	r0, r4
    f920:	691b      	ldr	r3, [r3, #16]
    f922:	4798      	blx	r3
    f924:	b110      	cbz	r0, f92c <yield+0x94>
    f926:	6963      	ldr	r3, [r4, #20]
    f928:	689b      	ldr	r3, [r3, #8]
    f92a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f92c:	f898 2000 	ldrb.w	r2, [r8]
    f930:	b2eb      	uxtb	r3, r5
    f932:	429a      	cmp	r2, r3
    f934:	d8ef      	bhi.n	f916 <yield+0x7e>
    f936:	e7bd      	b.n	f8b4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    f938:	f7ff fec6 	bl	f6c8 <usb_serial_available>
		if (Serial.available()) serialEvent();
    f93c:	2800      	cmp	r0, #0
    f93e:	d0b7      	beq.n	f8b0 <yield+0x18>
    f940:	f3af 8000 	nop.w
    f944:	e7b4      	b.n	f8b0 <yield+0x18>
		if (doit) __enable_irq();
    f946:	2d00      	cmp	r5, #0
    f948:	d1b8      	bne.n	f8bc <yield+0x24>
    f94a:	b662      	cpsie	i
    f94c:	e7b6      	b.n	f8bc <yield+0x24>
			lastYield = nullptr;
    f94e:	4b05      	ldr	r3, [pc, #20]	; (f964 <yield+0xcc>)
    f950:	601a      	str	r2, [r3, #0]
    f952:	e7ce      	b.n	f8f2 <yield+0x5a>
    f954:	20035478 	.word	0x20035478
    f958:	20035467 	.word	0x20035467
    f95c:	20034738 	.word	0x20034738
    f960:	20035465 	.word	0x20035465
    f964:	20034744 	.word	0x20034744
    f968:	20035466 	.word	0x20035466
    f96c:	20034748 	.word	0x20034748

0000f970 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    f970:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    f972:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    f974:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    f978:	4619      	mov	r1, r3
{
    f97a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f97c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f980:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f984:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f988:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    f98c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    f990:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    f992:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    f996:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    f99a:	b29b      	uxth	r3, r3
    f99c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    f9a0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f9a4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    f9a8:	3101      	adds	r1, #1
    f9aa:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    f9ae:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f9b0:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f9b2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    f9b6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    f9b8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    f9ba:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    f9bc:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    f9be:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    f9c2:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    f9c4:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    f9c6:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    f9c8:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    f9ca:	d1eb      	bne.n	f9a4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f9cc:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    f9d0:	b29b      	uxth	r3, r3
    f9d2:	f043 030f 	orr.w	r3, r3, #15
    f9d6:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    f9da:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    f9de:	b29b      	uxth	r3, r3
    f9e0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    f9e4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    f9e8:	bd10      	pop	{r4, pc}
    f9ea:	bf00      	nop

0000f9ec <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    f9ec:	4b37      	ldr	r3, [pc, #220]	; (facc <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    f9ee:	4a38      	ldr	r2, [pc, #224]	; (fad0 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    f9f0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    f9f2:	4838      	ldr	r0, [pc, #224]	; (fad4 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    f9f4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    f9f8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    f9fa:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f9fc:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    fa00:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    fa04:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    fa08:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    fa0c:	430a      	orrs	r2, r1
    fa0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    fa12:	f7ff ffad 	bl	f970 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    fa16:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    fa1a:	f7ff ffa9 	bl	f970 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    fa1e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    fa22:	f7ff ffa5 	bl	f970 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    fa26:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    fa2a:	f7ff ffa1 	bl	f970 <flexpwm_init>
	for (i=0; i < 4; i++) {
    fa2e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    fa30:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    fa34:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    fa38:	4611      	mov	r1, r2
    fa3a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    fa3e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    fa42:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    fa44:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    fa46:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    fa48:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    fa4a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    fa4e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    fa50:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    fa52:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    fa56:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    fa58:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    fa5a:	d1ee      	bne.n	fa3a <pwm_init+0x4e>
    fa5c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    fa5e:	481e      	ldr	r0, [pc, #120]	; (fad8 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    fa60:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    fa64:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    fa68:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    fa6a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    fa6e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    fa72:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    fa76:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    fa7a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    fa7c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    fa7e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    fa80:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    fa82:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    fa86:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    fa88:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    fa8a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    fa8e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    fa90:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    fa92:	d1ee      	bne.n	fa72 <pwm_init+0x86>
    fa94:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    fa96:	4811      	ldr	r0, [pc, #68]	; (fadc <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    fa98:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    fa9a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    fa9e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    faa0:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    faa4:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    faa8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    faac:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    fab0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    fab2:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    fab4:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    fab6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    fab8:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    faba:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    fabc:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    fabe:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    fac2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    fac4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    fac8:	d1ee      	bne.n	faa8 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    faca:	bd70      	pop	{r4, r5, r6, pc}
    facc:	400fc000 	.word	0x400fc000
    fad0:	fc030000 	.word	0xfc030000
    fad4:	403dc000 	.word	0x403dc000
    fad8:	401e0000 	.word	0x401e0000
    fadc:	401e4000 	.word	0x401e4000

0000fae0 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    fae0:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    fae2:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    fae6:	b15b      	cbz	r3, fb00 <sm_align_pool+0x20>
    fae8:	b1ba      	cbz	r2, fb1a <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    faea:	4b0f      	ldr	r3, [pc, #60]	; (fb28 <sm_align_pool+0x48>)
    faec:	fba3 1302 	umull	r1, r3, r3, r2
    faf0:	08db      	lsrs	r3, r3, #3
    faf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    faf6:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    fafa:	d10a      	bne.n	fb12 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    fafc:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    fafe:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    fb00:	4b09      	ldr	r3, [pc, #36]	; (fb28 <sm_align_pool+0x48>)
    fb02:	fba3 1302 	umull	r1, r3, r3, r2
    fb06:	08db      	lsrs	r3, r3, #3
    fb08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    fb0c:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    fb10:	d001      	beq.n	fb16 <sm_align_pool+0x36>
    fb12:	1ad2      	subs	r2, r2, r3
    fb14:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    fb16:	2af0      	cmp	r2, #240	; 0xf0
    fb18:	d8f0      	bhi.n	fafc <sm_align_pool+0x1c>
		errno = ENOSPC;
    fb1a:	f002 fad9 	bl	120d0 <__errno>
    fb1e:	221c      	movs	r2, #28
    fb20:	4603      	mov	r3, r0
    fb22:	2000      	movs	r0, #0
    fb24:	601a      	str	r2, [r3, #0]
}
    fb26:	bd08      	pop	{r3, pc}
    fb28:	aaaaaaab 	.word	0xaaaaaaab

0000fb2c <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    fb2c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    fb2e:	4604      	mov	r4, r0
    fb30:	b338      	cbz	r0, fb82 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    fb32:	b119      	cbz	r1, fb3c <sm_set_pool+0x10>
    fb34:	fab2 f682 	clz	r6, r2
    fb38:	0976      	lsrs	r6, r6, #5
    fb3a:	b9a2      	cbnz	r2, fb66 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    fb3c:	6820      	ldr	r0, [r4, #0]
    fb3e:	b300      	cbz	r0, fb82 <sm_set_pool+0x56>
    fb40:	6862      	ldr	r2, [r4, #4]
    fb42:	b1f2      	cbz	r2, fb82 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    fb44:	4b18      	ldr	r3, [pc, #96]	; (fba8 <sm_set_pool+0x7c>)
    fb46:	4919      	ldr	r1, [pc, #100]	; (fbac <sm_set_pool+0x80>)
    fb48:	fb02 f303 	mul.w	r3, r2, r3
    fb4c:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    fb50:	d317      	bcc.n	fb82 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    fb52:	68a3      	ldr	r3, [r4, #8]
    fb54:	b9e3      	cbnz	r3, fb90 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    fb56:	2200      	movs	r2, #0
			return 1;
    fb58:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    fb5a:	6022      	str	r2, [r4, #0]
    fb5c:	6062      	str	r2, [r4, #4]
    fb5e:	60a2      	str	r2, [r4, #8]
    fb60:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    fb62:	4618      	mov	r0, r3
    fb64:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    fb66:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    fb68:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    fb6a:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    fb6e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    fb70:	f7ff ffb6 	bl	fae0 <sm_align_pool>
    fb74:	4603      	mov	r3, r0
    fb76:	2800      	cmp	r0, #0
    fb78:	d0f3      	beq.n	fb62 <sm_set_pool+0x36>
	if (do_zero) {
    fb7a:	b96d      	cbnz	r5, fb98 <sm_set_pool+0x6c>
	return 1;
    fb7c:	2301      	movs	r3, #1
}
    fb7e:	4618      	mov	r0, r3
    fb80:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    fb82:	f002 faa5 	bl	120d0 <__errno>
    fb86:	2216      	movs	r2, #22
		return 0;
    fb88:	2300      	movs	r3, #0
		errno = EINVAL;
    fb8a:	6002      	str	r2, [r0, #0]
}
    fb8c:	4618      	mov	r0, r3
    fb8e:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    fb90:	2100      	movs	r1, #0
    fb92:	f002 f911 	bl	11db8 <memset>
    fb96:	e7de      	b.n	fb56 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    fb98:	6862      	ldr	r2, [r4, #4]
    fb9a:	4631      	mov	r1, r6
    fb9c:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    fb9e:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    fba0:	f002 f90a 	bl	11db8 <memset>
	return 1;
    fba4:	2301      	movs	r3, #1
    fba6:	e7dc      	b.n	fb62 <sm_set_pool+0x36>
    fba8:	aaaaaaab 	.word	0xaaaaaaab
    fbac:	15555555 	.word	0x15555555

0000fbb0 <__aeabi_atexit>:
    fbb0:	4603      	mov	r3, r0
    fbb2:	4608      	mov	r0, r1
    fbb4:	4619      	mov	r1, r3
    fbb6:	f001 be25 	b.w	11804 <__cxa_atexit>
    fbba:	bf00      	nop

0000fbbc <__aeabi_uldivmod>:
    fbbc:	b953      	cbnz	r3, fbd4 <__aeabi_uldivmod+0x18>
    fbbe:	b94a      	cbnz	r2, fbd4 <__aeabi_uldivmod+0x18>
    fbc0:	2900      	cmp	r1, #0
    fbc2:	bf08      	it	eq
    fbc4:	2800      	cmpeq	r0, #0
    fbc6:	bf1c      	itt	ne
    fbc8:	f04f 31ff 	movne.w	r1, #4294967295
    fbcc:	f04f 30ff 	movne.w	r0, #4294967295
    fbd0:	f000 b970 	b.w	feb4 <__aeabi_idiv0>
    fbd4:	f1ad 0c08 	sub.w	ip, sp, #8
    fbd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    fbdc:	f000 f806 	bl	fbec <__udivmoddi4>
    fbe0:	f8dd e004 	ldr.w	lr, [sp, #4]
    fbe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    fbe8:	b004      	add	sp, #16
    fbea:	4770      	bx	lr

0000fbec <__udivmoddi4>:
    fbec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fbf0:	9e08      	ldr	r6, [sp, #32]
    fbf2:	460d      	mov	r5, r1
    fbf4:	4604      	mov	r4, r0
    fbf6:	460f      	mov	r7, r1
    fbf8:	2b00      	cmp	r3, #0
    fbfa:	d14a      	bne.n	fc92 <__udivmoddi4+0xa6>
    fbfc:	428a      	cmp	r2, r1
    fbfe:	4694      	mov	ip, r2
    fc00:	d965      	bls.n	fcce <__udivmoddi4+0xe2>
    fc02:	fab2 f382 	clz	r3, r2
    fc06:	b143      	cbz	r3, fc1a <__udivmoddi4+0x2e>
    fc08:	fa02 fc03 	lsl.w	ip, r2, r3
    fc0c:	f1c3 0220 	rsb	r2, r3, #32
    fc10:	409f      	lsls	r7, r3
    fc12:	fa20 f202 	lsr.w	r2, r0, r2
    fc16:	4317      	orrs	r7, r2
    fc18:	409c      	lsls	r4, r3
    fc1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    fc1e:	fa1f f58c 	uxth.w	r5, ip
    fc22:	fbb7 f1fe 	udiv	r1, r7, lr
    fc26:	0c22      	lsrs	r2, r4, #16
    fc28:	fb0e 7711 	mls	r7, lr, r1, r7
    fc2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    fc30:	fb01 f005 	mul.w	r0, r1, r5
    fc34:	4290      	cmp	r0, r2
    fc36:	d90a      	bls.n	fc4e <__udivmoddi4+0x62>
    fc38:	eb1c 0202 	adds.w	r2, ip, r2
    fc3c:	f101 37ff 	add.w	r7, r1, #4294967295
    fc40:	f080 811c 	bcs.w	fe7c <__udivmoddi4+0x290>
    fc44:	4290      	cmp	r0, r2
    fc46:	f240 8119 	bls.w	fe7c <__udivmoddi4+0x290>
    fc4a:	3902      	subs	r1, #2
    fc4c:	4462      	add	r2, ip
    fc4e:	1a12      	subs	r2, r2, r0
    fc50:	b2a4      	uxth	r4, r4
    fc52:	fbb2 f0fe 	udiv	r0, r2, lr
    fc56:	fb0e 2210 	mls	r2, lr, r0, r2
    fc5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    fc5e:	fb00 f505 	mul.w	r5, r0, r5
    fc62:	42a5      	cmp	r5, r4
    fc64:	d90a      	bls.n	fc7c <__udivmoddi4+0x90>
    fc66:	eb1c 0404 	adds.w	r4, ip, r4
    fc6a:	f100 32ff 	add.w	r2, r0, #4294967295
    fc6e:	f080 8107 	bcs.w	fe80 <__udivmoddi4+0x294>
    fc72:	42a5      	cmp	r5, r4
    fc74:	f240 8104 	bls.w	fe80 <__udivmoddi4+0x294>
    fc78:	4464      	add	r4, ip
    fc7a:	3802      	subs	r0, #2
    fc7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    fc80:	1b64      	subs	r4, r4, r5
    fc82:	2100      	movs	r1, #0
    fc84:	b11e      	cbz	r6, fc8e <__udivmoddi4+0xa2>
    fc86:	40dc      	lsrs	r4, r3
    fc88:	2300      	movs	r3, #0
    fc8a:	e9c6 4300 	strd	r4, r3, [r6]
    fc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fc92:	428b      	cmp	r3, r1
    fc94:	d908      	bls.n	fca8 <__udivmoddi4+0xbc>
    fc96:	2e00      	cmp	r6, #0
    fc98:	f000 80ed 	beq.w	fe76 <__udivmoddi4+0x28a>
    fc9c:	2100      	movs	r1, #0
    fc9e:	e9c6 0500 	strd	r0, r5, [r6]
    fca2:	4608      	mov	r0, r1
    fca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fca8:	fab3 f183 	clz	r1, r3
    fcac:	2900      	cmp	r1, #0
    fcae:	d149      	bne.n	fd44 <__udivmoddi4+0x158>
    fcb0:	42ab      	cmp	r3, r5
    fcb2:	d302      	bcc.n	fcba <__udivmoddi4+0xce>
    fcb4:	4282      	cmp	r2, r0
    fcb6:	f200 80f8 	bhi.w	feaa <__udivmoddi4+0x2be>
    fcba:	1a84      	subs	r4, r0, r2
    fcbc:	eb65 0203 	sbc.w	r2, r5, r3
    fcc0:	2001      	movs	r0, #1
    fcc2:	4617      	mov	r7, r2
    fcc4:	2e00      	cmp	r6, #0
    fcc6:	d0e2      	beq.n	fc8e <__udivmoddi4+0xa2>
    fcc8:	e9c6 4700 	strd	r4, r7, [r6]
    fccc:	e7df      	b.n	fc8e <__udivmoddi4+0xa2>
    fcce:	b902      	cbnz	r2, fcd2 <__udivmoddi4+0xe6>
    fcd0:	deff      	udf	#255	; 0xff
    fcd2:	fab2 f382 	clz	r3, r2
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	f040 8090 	bne.w	fdfc <__udivmoddi4+0x210>
    fcdc:	1a8a      	subs	r2, r1, r2
    fcde:	ea4f 471c 	mov.w	r7, ip, lsr #16
    fce2:	fa1f fe8c 	uxth.w	lr, ip
    fce6:	2101      	movs	r1, #1
    fce8:	fbb2 f5f7 	udiv	r5, r2, r7
    fcec:	fb07 2015 	mls	r0, r7, r5, r2
    fcf0:	0c22      	lsrs	r2, r4, #16
    fcf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    fcf6:	fb0e f005 	mul.w	r0, lr, r5
    fcfa:	4290      	cmp	r0, r2
    fcfc:	d908      	bls.n	fd10 <__udivmoddi4+0x124>
    fcfe:	eb1c 0202 	adds.w	r2, ip, r2
    fd02:	f105 38ff 	add.w	r8, r5, #4294967295
    fd06:	d202      	bcs.n	fd0e <__udivmoddi4+0x122>
    fd08:	4290      	cmp	r0, r2
    fd0a:	f200 80cb 	bhi.w	fea4 <__udivmoddi4+0x2b8>
    fd0e:	4645      	mov	r5, r8
    fd10:	1a12      	subs	r2, r2, r0
    fd12:	b2a4      	uxth	r4, r4
    fd14:	fbb2 f0f7 	udiv	r0, r2, r7
    fd18:	fb07 2210 	mls	r2, r7, r0, r2
    fd1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    fd20:	fb0e fe00 	mul.w	lr, lr, r0
    fd24:	45a6      	cmp	lr, r4
    fd26:	d908      	bls.n	fd3a <__udivmoddi4+0x14e>
    fd28:	eb1c 0404 	adds.w	r4, ip, r4
    fd2c:	f100 32ff 	add.w	r2, r0, #4294967295
    fd30:	d202      	bcs.n	fd38 <__udivmoddi4+0x14c>
    fd32:	45a6      	cmp	lr, r4
    fd34:	f200 80bb 	bhi.w	feae <__udivmoddi4+0x2c2>
    fd38:	4610      	mov	r0, r2
    fd3a:	eba4 040e 	sub.w	r4, r4, lr
    fd3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    fd42:	e79f      	b.n	fc84 <__udivmoddi4+0x98>
    fd44:	f1c1 0720 	rsb	r7, r1, #32
    fd48:	408b      	lsls	r3, r1
    fd4a:	fa22 fc07 	lsr.w	ip, r2, r7
    fd4e:	ea4c 0c03 	orr.w	ip, ip, r3
    fd52:	fa05 f401 	lsl.w	r4, r5, r1
    fd56:	fa20 f307 	lsr.w	r3, r0, r7
    fd5a:	40fd      	lsrs	r5, r7
    fd5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
    fd60:	4323      	orrs	r3, r4
    fd62:	fbb5 f8f9 	udiv	r8, r5, r9
    fd66:	fa1f fe8c 	uxth.w	lr, ip
    fd6a:	fb09 5518 	mls	r5, r9, r8, r5
    fd6e:	0c1c      	lsrs	r4, r3, #16
    fd70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    fd74:	fb08 f50e 	mul.w	r5, r8, lr
    fd78:	42a5      	cmp	r5, r4
    fd7a:	fa02 f201 	lsl.w	r2, r2, r1
    fd7e:	fa00 f001 	lsl.w	r0, r0, r1
    fd82:	d90b      	bls.n	fd9c <__udivmoddi4+0x1b0>
    fd84:	eb1c 0404 	adds.w	r4, ip, r4
    fd88:	f108 3aff 	add.w	sl, r8, #4294967295
    fd8c:	f080 8088 	bcs.w	fea0 <__udivmoddi4+0x2b4>
    fd90:	42a5      	cmp	r5, r4
    fd92:	f240 8085 	bls.w	fea0 <__udivmoddi4+0x2b4>
    fd96:	f1a8 0802 	sub.w	r8, r8, #2
    fd9a:	4464      	add	r4, ip
    fd9c:	1b64      	subs	r4, r4, r5
    fd9e:	b29d      	uxth	r5, r3
    fda0:	fbb4 f3f9 	udiv	r3, r4, r9
    fda4:	fb09 4413 	mls	r4, r9, r3, r4
    fda8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    fdac:	fb03 fe0e 	mul.w	lr, r3, lr
    fdb0:	45a6      	cmp	lr, r4
    fdb2:	d908      	bls.n	fdc6 <__udivmoddi4+0x1da>
    fdb4:	eb1c 0404 	adds.w	r4, ip, r4
    fdb8:	f103 35ff 	add.w	r5, r3, #4294967295
    fdbc:	d26c      	bcs.n	fe98 <__udivmoddi4+0x2ac>
    fdbe:	45a6      	cmp	lr, r4
    fdc0:	d96a      	bls.n	fe98 <__udivmoddi4+0x2ac>
    fdc2:	3b02      	subs	r3, #2
    fdc4:	4464      	add	r4, ip
    fdc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    fdca:	fba3 9502 	umull	r9, r5, r3, r2
    fdce:	eba4 040e 	sub.w	r4, r4, lr
    fdd2:	42ac      	cmp	r4, r5
    fdd4:	46c8      	mov	r8, r9
    fdd6:	46ae      	mov	lr, r5
    fdd8:	d356      	bcc.n	fe88 <__udivmoddi4+0x29c>
    fdda:	d053      	beq.n	fe84 <__udivmoddi4+0x298>
    fddc:	b156      	cbz	r6, fdf4 <__udivmoddi4+0x208>
    fdde:	ebb0 0208 	subs.w	r2, r0, r8
    fde2:	eb64 040e 	sbc.w	r4, r4, lr
    fde6:	fa04 f707 	lsl.w	r7, r4, r7
    fdea:	40ca      	lsrs	r2, r1
    fdec:	40cc      	lsrs	r4, r1
    fdee:	4317      	orrs	r7, r2
    fdf0:	e9c6 7400 	strd	r7, r4, [r6]
    fdf4:	4618      	mov	r0, r3
    fdf6:	2100      	movs	r1, #0
    fdf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fdfc:	f1c3 0120 	rsb	r1, r3, #32
    fe00:	fa02 fc03 	lsl.w	ip, r2, r3
    fe04:	fa20 f201 	lsr.w	r2, r0, r1
    fe08:	fa25 f101 	lsr.w	r1, r5, r1
    fe0c:	409d      	lsls	r5, r3
    fe0e:	432a      	orrs	r2, r5
    fe10:	ea4f 471c 	mov.w	r7, ip, lsr #16
    fe14:	fa1f fe8c 	uxth.w	lr, ip
    fe18:	fbb1 f0f7 	udiv	r0, r1, r7
    fe1c:	fb07 1510 	mls	r5, r7, r0, r1
    fe20:	0c11      	lsrs	r1, r2, #16
    fe22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    fe26:	fb00 f50e 	mul.w	r5, r0, lr
    fe2a:	428d      	cmp	r5, r1
    fe2c:	fa04 f403 	lsl.w	r4, r4, r3
    fe30:	d908      	bls.n	fe44 <__udivmoddi4+0x258>
    fe32:	eb1c 0101 	adds.w	r1, ip, r1
    fe36:	f100 38ff 	add.w	r8, r0, #4294967295
    fe3a:	d22f      	bcs.n	fe9c <__udivmoddi4+0x2b0>
    fe3c:	428d      	cmp	r5, r1
    fe3e:	d92d      	bls.n	fe9c <__udivmoddi4+0x2b0>
    fe40:	3802      	subs	r0, #2
    fe42:	4461      	add	r1, ip
    fe44:	1b49      	subs	r1, r1, r5
    fe46:	b292      	uxth	r2, r2
    fe48:	fbb1 f5f7 	udiv	r5, r1, r7
    fe4c:	fb07 1115 	mls	r1, r7, r5, r1
    fe50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    fe54:	fb05 f10e 	mul.w	r1, r5, lr
    fe58:	4291      	cmp	r1, r2
    fe5a:	d908      	bls.n	fe6e <__udivmoddi4+0x282>
    fe5c:	eb1c 0202 	adds.w	r2, ip, r2
    fe60:	f105 38ff 	add.w	r8, r5, #4294967295
    fe64:	d216      	bcs.n	fe94 <__udivmoddi4+0x2a8>
    fe66:	4291      	cmp	r1, r2
    fe68:	d914      	bls.n	fe94 <__udivmoddi4+0x2a8>
    fe6a:	3d02      	subs	r5, #2
    fe6c:	4462      	add	r2, ip
    fe6e:	1a52      	subs	r2, r2, r1
    fe70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    fe74:	e738      	b.n	fce8 <__udivmoddi4+0xfc>
    fe76:	4631      	mov	r1, r6
    fe78:	4630      	mov	r0, r6
    fe7a:	e708      	b.n	fc8e <__udivmoddi4+0xa2>
    fe7c:	4639      	mov	r1, r7
    fe7e:	e6e6      	b.n	fc4e <__udivmoddi4+0x62>
    fe80:	4610      	mov	r0, r2
    fe82:	e6fb      	b.n	fc7c <__udivmoddi4+0x90>
    fe84:	4548      	cmp	r0, r9
    fe86:	d2a9      	bcs.n	fddc <__udivmoddi4+0x1f0>
    fe88:	ebb9 0802 	subs.w	r8, r9, r2
    fe8c:	eb65 0e0c 	sbc.w	lr, r5, ip
    fe90:	3b01      	subs	r3, #1
    fe92:	e7a3      	b.n	fddc <__udivmoddi4+0x1f0>
    fe94:	4645      	mov	r5, r8
    fe96:	e7ea      	b.n	fe6e <__udivmoddi4+0x282>
    fe98:	462b      	mov	r3, r5
    fe9a:	e794      	b.n	fdc6 <__udivmoddi4+0x1da>
    fe9c:	4640      	mov	r0, r8
    fe9e:	e7d1      	b.n	fe44 <__udivmoddi4+0x258>
    fea0:	46d0      	mov	r8, sl
    fea2:	e77b      	b.n	fd9c <__udivmoddi4+0x1b0>
    fea4:	3d02      	subs	r5, #2
    fea6:	4462      	add	r2, ip
    fea8:	e732      	b.n	fd10 <__udivmoddi4+0x124>
    feaa:	4608      	mov	r0, r1
    feac:	e70a      	b.n	fcc4 <__udivmoddi4+0xd8>
    feae:	4464      	add	r4, ip
    feb0:	3802      	subs	r0, #2
    feb2:	e742      	b.n	fd3a <__udivmoddi4+0x14e>

0000feb4 <__aeabi_idiv0>:
    feb4:	4770      	bx	lr
    feb6:	bf00      	nop

0000feb8 <malloc>:
    feb8:	4b02      	ldr	r3, [pc, #8]	; (fec4 <malloc+0xc>)
    feba:	4601      	mov	r1, r0
    febc:	6818      	ldr	r0, [r3, #0]
    febe:	f000 b80b 	b.w	fed8 <_malloc_r>
    fec2:	bf00      	nop
    fec4:	20008fb4 	.word	0x20008fb4

0000fec8 <free>:
    fec8:	4b02      	ldr	r3, [pc, #8]	; (fed4 <free+0xc>)
    feca:	4601      	mov	r1, r0
    fecc:	6818      	ldr	r0, [r3, #0]
    fece:	f002 bc69 	b.w	127a4 <_free_r>
    fed2:	bf00      	nop
    fed4:	20008fb4 	.word	0x20008fb4

0000fed8 <_malloc_r>:
    fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fedc:	f101 060b 	add.w	r6, r1, #11
    fee0:	2e16      	cmp	r6, #22
    fee2:	b083      	sub	sp, #12
    fee4:	4604      	mov	r4, r0
    fee6:	d824      	bhi.n	ff32 <_malloc_r+0x5a>
    fee8:	2910      	cmp	r1, #16
    feea:	f200 80ba 	bhi.w	10062 <_malloc_r+0x18a>
    feee:	f000 faa3 	bl	10438 <__malloc_lock>
    fef2:	2610      	movs	r6, #16
    fef4:	2218      	movs	r2, #24
    fef6:	2002      	movs	r0, #2
    fef8:	4fb5      	ldr	r7, [pc, #724]	; (101d0 <_malloc_r+0x2f8>)
    fefa:	443a      	add	r2, r7
    fefc:	f1a2 0108 	sub.w	r1, r2, #8
    ff00:	6853      	ldr	r3, [r2, #4]
    ff02:	428b      	cmp	r3, r1
    ff04:	f000 80ba 	beq.w	1007c <_malloc_r+0x1a4>
    ff08:	685a      	ldr	r2, [r3, #4]
    ff0a:	68d9      	ldr	r1, [r3, #12]
    ff0c:	f022 0203 	bic.w	r2, r2, #3
    ff10:	441a      	add	r2, r3
    ff12:	689d      	ldr	r5, [r3, #8]
    ff14:	60e9      	str	r1, [r5, #12]
    ff16:	608d      	str	r5, [r1, #8]
    ff18:	6851      	ldr	r1, [r2, #4]
    ff1a:	f041 0101 	orr.w	r1, r1, #1
    ff1e:	4620      	mov	r0, r4
    ff20:	6051      	str	r1, [r2, #4]
    ff22:	f103 0508 	add.w	r5, r3, #8
    ff26:	f000 fa8d 	bl	10444 <__malloc_unlock>
    ff2a:	4628      	mov	r0, r5
    ff2c:	b003      	add	sp, #12
    ff2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff32:	f036 0607 	bics.w	r6, r6, #7
    ff36:	f100 8094 	bmi.w	10062 <_malloc_r+0x18a>
    ff3a:	42b1      	cmp	r1, r6
    ff3c:	f200 8091 	bhi.w	10062 <_malloc_r+0x18a>
    ff40:	f000 fa7a 	bl	10438 <__malloc_lock>
    ff44:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    ff48:	f0c0 819a 	bcc.w	10280 <_malloc_r+0x3a8>
    ff4c:	0a73      	lsrs	r3, r6, #9
    ff4e:	f000 808f 	beq.w	10070 <_malloc_r+0x198>
    ff52:	2b04      	cmp	r3, #4
    ff54:	f200 816f 	bhi.w	10236 <_malloc_r+0x35e>
    ff58:	09b3      	lsrs	r3, r6, #6
    ff5a:	f103 0039 	add.w	r0, r3, #57	; 0x39
    ff5e:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    ff62:	00c3      	lsls	r3, r0, #3
    ff64:	4f9a      	ldr	r7, [pc, #616]	; (101d0 <_malloc_r+0x2f8>)
    ff66:	443b      	add	r3, r7
    ff68:	f1a3 0508 	sub.w	r5, r3, #8
    ff6c:	685b      	ldr	r3, [r3, #4]
    ff6e:	429d      	cmp	r5, r3
    ff70:	d106      	bne.n	ff80 <_malloc_r+0xa8>
    ff72:	e00c      	b.n	ff8e <_malloc_r+0xb6>
    ff74:	2900      	cmp	r1, #0
    ff76:	f280 8127 	bge.w	101c8 <_malloc_r+0x2f0>
    ff7a:	68db      	ldr	r3, [r3, #12]
    ff7c:	429d      	cmp	r5, r3
    ff7e:	d006      	beq.n	ff8e <_malloc_r+0xb6>
    ff80:	685a      	ldr	r2, [r3, #4]
    ff82:	f022 0203 	bic.w	r2, r2, #3
    ff86:	1b91      	subs	r1, r2, r6
    ff88:	290f      	cmp	r1, #15
    ff8a:	ddf3      	ble.n	ff74 <_malloc_r+0x9c>
    ff8c:	4660      	mov	r0, ip
    ff8e:	693d      	ldr	r5, [r7, #16]
    ff90:	f8df c250 	ldr.w	ip, [pc, #592]	; 101e4 <_malloc_r+0x30c>
    ff94:	4565      	cmp	r5, ip
    ff96:	d07c      	beq.n	10092 <_malloc_r+0x1ba>
    ff98:	686a      	ldr	r2, [r5, #4]
    ff9a:	f022 0203 	bic.w	r2, r2, #3
    ff9e:	1b93      	subs	r3, r2, r6
    ffa0:	2b0f      	cmp	r3, #15
    ffa2:	f300 817b 	bgt.w	1029c <_malloc_r+0x3c4>
    ffa6:	2b00      	cmp	r3, #0
    ffa8:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    ffac:	f280 816c 	bge.w	10288 <_malloc_r+0x3b0>
    ffb0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    ffb4:	f080 811a 	bcs.w	101ec <_malloc_r+0x314>
    ffb8:	08d3      	lsrs	r3, r2, #3
    ffba:	6879      	ldr	r1, [r7, #4]
    ffbc:	3301      	adds	r3, #1
    ffbe:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    ffc2:	2201      	movs	r2, #1
    ffc4:	fa02 f20e 	lsl.w	r2, r2, lr
    ffc8:	430a      	orrs	r2, r1
    ffca:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    ffce:	f8c5 e008 	str.w	lr, [r5, #8]
    ffd2:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    ffd6:	3908      	subs	r1, #8
    ffd8:	60e9      	str	r1, [r5, #12]
    ffda:	607a      	str	r2, [r7, #4]
    ffdc:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    ffe0:	f8ce 500c 	str.w	r5, [lr, #12]
    ffe4:	1083      	asrs	r3, r0, #2
    ffe6:	2101      	movs	r1, #1
    ffe8:	4099      	lsls	r1, r3
    ffea:	4291      	cmp	r1, r2
    ffec:	d857      	bhi.n	1009e <_malloc_r+0x1c6>
    ffee:	4211      	tst	r1, r2
    fff0:	d106      	bne.n	10000 <_malloc_r+0x128>
    fff2:	f020 0003 	bic.w	r0, r0, #3
    fff6:	0049      	lsls	r1, r1, #1
    fff8:	4211      	tst	r1, r2
    fffa:	f100 0004 	add.w	r0, r0, #4
    fffe:	d0fa      	beq.n	fff6 <_malloc_r+0x11e>
   10000:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   10004:	464d      	mov	r5, r9
   10006:	4686      	mov	lr, r0
   10008:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1000c:	4545      	cmp	r5, r8
   1000e:	d108      	bne.n	10022 <_malloc_r+0x14a>
   10010:	e11d      	b.n	1024e <_malloc_r+0x376>
   10012:	2b00      	cmp	r3, #0
   10014:	f280 8124 	bge.w	10260 <_malloc_r+0x388>
   10018:	f8d8 800c 	ldr.w	r8, [r8, #12]
   1001c:	4545      	cmp	r5, r8
   1001e:	f000 8116 	beq.w	1024e <_malloc_r+0x376>
   10022:	f8d8 2004 	ldr.w	r2, [r8, #4]
   10026:	f022 0203 	bic.w	r2, r2, #3
   1002a:	1b93      	subs	r3, r2, r6
   1002c:	2b0f      	cmp	r3, #15
   1002e:	ddf0      	ble.n	10012 <_malloc_r+0x13a>
   10030:	4620      	mov	r0, r4
   10032:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   10036:	eb08 0106 	add.w	r1, r8, r6
   1003a:	f046 0601 	orr.w	r6, r6, #1
   1003e:	f8c8 6004 	str.w	r6, [r8, #4]
   10042:	60ec      	str	r4, [r5, #12]
   10044:	60a5      	str	r5, [r4, #8]
   10046:	f043 0401 	orr.w	r4, r3, #1
   1004a:	e9c7 1104 	strd	r1, r1, [r7, #16]
   1004e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   10052:	604c      	str	r4, [r1, #4]
   10054:	f848 3002 	str.w	r3, [r8, r2]
   10058:	f000 f9f4 	bl	10444 <__malloc_unlock>
   1005c:	f108 0508 	add.w	r5, r8, #8
   10060:	e002      	b.n	10068 <_malloc_r+0x190>
   10062:	230c      	movs	r3, #12
   10064:	6023      	str	r3, [r4, #0]
   10066:	2500      	movs	r5, #0
   10068:	4628      	mov	r0, r5
   1006a:	b003      	add	sp, #12
   1006c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10070:	f44f 7300 	mov.w	r3, #512	; 0x200
   10074:	2040      	movs	r0, #64	; 0x40
   10076:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   1007a:	e773      	b.n	ff64 <_malloc_r+0x8c>
   1007c:	68d3      	ldr	r3, [r2, #12]
   1007e:	429a      	cmp	r2, r3
   10080:	bf08      	it	eq
   10082:	3002      	addeq	r0, #2
   10084:	f47f af40 	bne.w	ff08 <_malloc_r+0x30>
   10088:	693d      	ldr	r5, [r7, #16]
   1008a:	f8df c158 	ldr.w	ip, [pc, #344]	; 101e4 <_malloc_r+0x30c>
   1008e:	4565      	cmp	r5, ip
   10090:	d182      	bne.n	ff98 <_malloc_r+0xc0>
   10092:	687a      	ldr	r2, [r7, #4]
   10094:	1083      	asrs	r3, r0, #2
   10096:	2101      	movs	r1, #1
   10098:	4099      	lsls	r1, r3
   1009a:	4291      	cmp	r1, r2
   1009c:	d9a7      	bls.n	ffee <_malloc_r+0x116>
   1009e:	68bd      	ldr	r5, [r7, #8]
   100a0:	686b      	ldr	r3, [r5, #4]
   100a2:	f023 0903 	bic.w	r9, r3, #3
   100a6:	454e      	cmp	r6, r9
   100a8:	d803      	bhi.n	100b2 <_malloc_r+0x1da>
   100aa:	eba9 0306 	sub.w	r3, r9, r6
   100ae:	2b0f      	cmp	r3, #15
   100b0:	dc7a      	bgt.n	101a8 <_malloc_r+0x2d0>
   100b2:	f8df b134 	ldr.w	fp, [pc, #308]	; 101e8 <_malloc_r+0x310>
   100b6:	4b47      	ldr	r3, [pc, #284]	; (101d4 <_malloc_r+0x2fc>)
   100b8:	f8db 2000 	ldr.w	r2, [fp]
   100bc:	681b      	ldr	r3, [r3, #0]
   100be:	3201      	adds	r2, #1
   100c0:	4433      	add	r3, r6
   100c2:	eb05 0a09 	add.w	sl, r5, r9
   100c6:	f000 8133 	beq.w	10330 <_malloc_r+0x458>
   100ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   100ce:	330f      	adds	r3, #15
   100d0:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   100d4:	f028 080f 	bic.w	r8, r8, #15
   100d8:	4641      	mov	r1, r8
   100da:	4620      	mov	r0, r4
   100dc:	f001 ffd0 	bl	12080 <_sbrk_r>
   100e0:	1c41      	adds	r1, r0, #1
   100e2:	4602      	mov	r2, r0
   100e4:	f000 80f3 	beq.w	102ce <_malloc_r+0x3f6>
   100e8:	4582      	cmp	sl, r0
   100ea:	f200 80ee 	bhi.w	102ca <_malloc_r+0x3f2>
   100ee:	4b3a      	ldr	r3, [pc, #232]	; (101d8 <_malloc_r+0x300>)
   100f0:	6819      	ldr	r1, [r3, #0]
   100f2:	4441      	add	r1, r8
   100f4:	6019      	str	r1, [r3, #0]
   100f6:	4608      	mov	r0, r1
   100f8:	f000 814e 	beq.w	10398 <_malloc_r+0x4c0>
   100fc:	f8db 1000 	ldr.w	r1, [fp]
   10100:	9301      	str	r3, [sp, #4]
   10102:	3101      	adds	r1, #1
   10104:	bf1b      	ittet	ne
   10106:	eba2 010a 	subne.w	r1, r2, sl
   1010a:	1809      	addne	r1, r1, r0
   1010c:	f8cb 2000 	streq.w	r2, [fp]
   10110:	6019      	strne	r1, [r3, #0]
   10112:	f012 0b07 	ands.w	fp, r2, #7
   10116:	f000 8117 	beq.w	10348 <_malloc_r+0x470>
   1011a:	f1cb 0108 	rsb	r1, fp, #8
   1011e:	440a      	add	r2, r1
   10120:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   10124:	4490      	add	r8, r2
   10126:	3108      	adds	r1, #8
   10128:	eba1 0108 	sub.w	r1, r1, r8
   1012c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   10130:	4651      	mov	r1, sl
   10132:	4620      	mov	r0, r4
   10134:	9200      	str	r2, [sp, #0]
   10136:	f001 ffa3 	bl	12080 <_sbrk_r>
   1013a:	1c42      	adds	r2, r0, #1
   1013c:	e9dd 2300 	ldrd	r2, r3, [sp]
   10140:	f000 814f 	beq.w	103e2 <_malloc_r+0x50a>
   10144:	1a80      	subs	r0, r0, r2
   10146:	eb00 080a 	add.w	r8, r0, sl
   1014a:	6819      	ldr	r1, [r3, #0]
   1014c:	60ba      	str	r2, [r7, #8]
   1014e:	f048 0001 	orr.w	r0, r8, #1
   10152:	4451      	add	r1, sl
   10154:	42bd      	cmp	r5, r7
   10156:	6050      	str	r0, [r2, #4]
   10158:	6019      	str	r1, [r3, #0]
   1015a:	f000 8129 	beq.w	103b0 <_malloc_r+0x4d8>
   1015e:	f1b9 0f0f 	cmp.w	r9, #15
   10162:	f240 8127 	bls.w	103b4 <_malloc_r+0x4dc>
   10166:	6868      	ldr	r0, [r5, #4]
   10168:	f1a9 0c0c 	sub.w	ip, r9, #12
   1016c:	f02c 0c07 	bic.w	ip, ip, #7
   10170:	f000 0001 	and.w	r0, r0, #1
   10174:	ea40 000c 	orr.w	r0, r0, ip
   10178:	6068      	str	r0, [r5, #4]
   1017a:	f04f 0e05 	mov.w	lr, #5
   1017e:	eb05 000c 	add.w	r0, r5, ip
   10182:	f1bc 0f0f 	cmp.w	ip, #15
   10186:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   1018a:	f200 8132 	bhi.w	103f2 <_malloc_r+0x51a>
   1018e:	6850      	ldr	r0, [r2, #4]
   10190:	4615      	mov	r5, r2
   10192:	4b12      	ldr	r3, [pc, #72]	; (101dc <_malloc_r+0x304>)
   10194:	681a      	ldr	r2, [r3, #0]
   10196:	428a      	cmp	r2, r1
   10198:	bf38      	it	cc
   1019a:	6019      	strcc	r1, [r3, #0]
   1019c:	4b10      	ldr	r3, [pc, #64]	; (101e0 <_malloc_r+0x308>)
   1019e:	681a      	ldr	r2, [r3, #0]
   101a0:	428a      	cmp	r2, r1
   101a2:	bf38      	it	cc
   101a4:	6019      	strcc	r1, [r3, #0]
   101a6:	e094      	b.n	102d2 <_malloc_r+0x3fa>
   101a8:	19aa      	adds	r2, r5, r6
   101aa:	f043 0301 	orr.w	r3, r3, #1
   101ae:	f046 0601 	orr.w	r6, r6, #1
   101b2:	606e      	str	r6, [r5, #4]
   101b4:	4620      	mov	r0, r4
   101b6:	60ba      	str	r2, [r7, #8]
   101b8:	6053      	str	r3, [r2, #4]
   101ba:	f000 f943 	bl	10444 <__malloc_unlock>
   101be:	3508      	adds	r5, #8
   101c0:	4628      	mov	r0, r5
   101c2:	b003      	add	sp, #12
   101c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   101c8:	68d9      	ldr	r1, [r3, #12]
   101ca:	441a      	add	r2, r3
   101cc:	e6a1      	b.n	ff12 <_malloc_r+0x3a>
   101ce:	bf00      	nop
   101d0:	20008b98 	.word	0x20008b98
   101d4:	200349d0 	.word	0x200349d0
   101d8:	200349a0 	.word	0x200349a0
   101dc:	200349c8 	.word	0x200349c8
   101e0:	200349cc 	.word	0x200349cc
   101e4:	20008ba0 	.word	0x20008ba0
   101e8:	20008fa0 	.word	0x20008fa0
   101ec:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   101f0:	ea4f 2352 	mov.w	r3, r2, lsr #9
   101f4:	d363      	bcc.n	102be <_malloc_r+0x3e6>
   101f6:	2b14      	cmp	r3, #20
   101f8:	f200 80b7 	bhi.w	1036a <_malloc_r+0x492>
   101fc:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   10200:	00c9      	lsls	r1, r1, #3
   10202:	335b      	adds	r3, #91	; 0x5b
   10204:	eb07 0e01 	add.w	lr, r7, r1
   10208:	5879      	ldr	r1, [r7, r1]
   1020a:	f1ae 0e08 	sub.w	lr, lr, #8
   1020e:	458e      	cmp	lr, r1
   10210:	f000 8091 	beq.w	10336 <_malloc_r+0x45e>
   10214:	684b      	ldr	r3, [r1, #4]
   10216:	f023 0303 	bic.w	r3, r3, #3
   1021a:	4293      	cmp	r3, r2
   1021c:	d902      	bls.n	10224 <_malloc_r+0x34c>
   1021e:	6889      	ldr	r1, [r1, #8]
   10220:	458e      	cmp	lr, r1
   10222:	d1f7      	bne.n	10214 <_malloc_r+0x33c>
   10224:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   10228:	687a      	ldr	r2, [r7, #4]
   1022a:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   1022e:	f8ce 5008 	str.w	r5, [lr, #8]
   10232:	60cd      	str	r5, [r1, #12]
   10234:	e6d6      	b.n	ffe4 <_malloc_r+0x10c>
   10236:	2b14      	cmp	r3, #20
   10238:	d959      	bls.n	102ee <_malloc_r+0x416>
   1023a:	2b54      	cmp	r3, #84	; 0x54
   1023c:	f200 809d 	bhi.w	1037a <_malloc_r+0x4a2>
   10240:	0b33      	lsrs	r3, r6, #12
   10242:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   10246:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   1024a:	00c3      	lsls	r3, r0, #3
   1024c:	e68a      	b.n	ff64 <_malloc_r+0x8c>
   1024e:	f10e 0e01 	add.w	lr, lr, #1
   10252:	f01e 0f03 	tst.w	lr, #3
   10256:	f105 0508 	add.w	r5, r5, #8
   1025a:	f47f aed5 	bne.w	10008 <_malloc_r+0x130>
   1025e:	e051      	b.n	10304 <_malloc_r+0x42c>
   10260:	4442      	add	r2, r8
   10262:	4645      	mov	r5, r8
   10264:	6853      	ldr	r3, [r2, #4]
   10266:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1026a:	f043 0301 	orr.w	r3, r3, #1
   1026e:	6053      	str	r3, [r2, #4]
   10270:	f855 3f08 	ldr.w	r3, [r5, #8]!
   10274:	4620      	mov	r0, r4
   10276:	60d9      	str	r1, [r3, #12]
   10278:	608b      	str	r3, [r1, #8]
   1027a:	f000 f8e3 	bl	10444 <__malloc_unlock>
   1027e:	e6f3      	b.n	10068 <_malloc_r+0x190>
   10280:	08f0      	lsrs	r0, r6, #3
   10282:	f106 0208 	add.w	r2, r6, #8
   10286:	e637      	b.n	fef8 <_malloc_r+0x20>
   10288:	442a      	add	r2, r5
   1028a:	4620      	mov	r0, r4
   1028c:	6853      	ldr	r3, [r2, #4]
   1028e:	f043 0301 	orr.w	r3, r3, #1
   10292:	6053      	str	r3, [r2, #4]
   10294:	3508      	adds	r5, #8
   10296:	f000 f8d5 	bl	10444 <__malloc_unlock>
   1029a:	e6e5      	b.n	10068 <_malloc_r+0x190>
   1029c:	19a9      	adds	r1, r5, r6
   1029e:	4620      	mov	r0, r4
   102a0:	f046 0601 	orr.w	r6, r6, #1
   102a4:	f043 0401 	orr.w	r4, r3, #1
   102a8:	606e      	str	r6, [r5, #4]
   102aa:	e9c7 1104 	strd	r1, r1, [r7, #16]
   102ae:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   102b2:	604c      	str	r4, [r1, #4]
   102b4:	50ab      	str	r3, [r5, r2]
   102b6:	f000 f8c5 	bl	10444 <__malloc_unlock>
   102ba:	3508      	adds	r5, #8
   102bc:	e6d4      	b.n	10068 <_malloc_r+0x190>
   102be:	0993      	lsrs	r3, r2, #6
   102c0:	f103 0139 	add.w	r1, r3, #57	; 0x39
   102c4:	00c9      	lsls	r1, r1, #3
   102c6:	3338      	adds	r3, #56	; 0x38
   102c8:	e79c      	b.n	10204 <_malloc_r+0x32c>
   102ca:	42bd      	cmp	r5, r7
   102cc:	d05f      	beq.n	1038e <_malloc_r+0x4b6>
   102ce:	68bd      	ldr	r5, [r7, #8]
   102d0:	6868      	ldr	r0, [r5, #4]
   102d2:	f020 0803 	bic.w	r8, r0, #3
   102d6:	4546      	cmp	r6, r8
   102d8:	eba8 0306 	sub.w	r3, r8, r6
   102dc:	d802      	bhi.n	102e4 <_malloc_r+0x40c>
   102de:	2b0f      	cmp	r3, #15
   102e0:	f73f af62 	bgt.w	101a8 <_malloc_r+0x2d0>
   102e4:	4620      	mov	r0, r4
   102e6:	f000 f8ad 	bl	10444 <__malloc_unlock>
   102ea:	2500      	movs	r5, #0
   102ec:	e6bc      	b.n	10068 <_malloc_r+0x190>
   102ee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   102f2:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   102f6:	00c3      	lsls	r3, r0, #3
   102f8:	e634      	b.n	ff64 <_malloc_r+0x8c>
   102fa:	f859 3908 	ldr.w	r3, [r9], #-8
   102fe:	454b      	cmp	r3, r9
   10300:	f040 8096 	bne.w	10430 <_malloc_r+0x558>
   10304:	f010 0f03 	tst.w	r0, #3
   10308:	f100 30ff 	add.w	r0, r0, #4294967295
   1030c:	d1f5      	bne.n	102fa <_malloc_r+0x422>
   1030e:	687b      	ldr	r3, [r7, #4]
   10310:	ea23 0301 	bic.w	r3, r3, r1
   10314:	607b      	str	r3, [r7, #4]
   10316:	0049      	lsls	r1, r1, #1
   10318:	4299      	cmp	r1, r3
   1031a:	f63f aec0 	bhi.w	1009e <_malloc_r+0x1c6>
   1031e:	b919      	cbnz	r1, 10328 <_malloc_r+0x450>
   10320:	e6bd      	b.n	1009e <_malloc_r+0x1c6>
   10322:	0049      	lsls	r1, r1, #1
   10324:	f10e 0e04 	add.w	lr, lr, #4
   10328:	4219      	tst	r1, r3
   1032a:	d0fa      	beq.n	10322 <_malloc_r+0x44a>
   1032c:	4670      	mov	r0, lr
   1032e:	e667      	b.n	10000 <_malloc_r+0x128>
   10330:	f103 0810 	add.w	r8, r3, #16
   10334:	e6d0      	b.n	100d8 <_malloc_r+0x200>
   10336:	109a      	asrs	r2, r3, #2
   10338:	f04f 0801 	mov.w	r8, #1
   1033c:	687b      	ldr	r3, [r7, #4]
   1033e:	fa08 f202 	lsl.w	r2, r8, r2
   10342:	431a      	orrs	r2, r3
   10344:	607a      	str	r2, [r7, #4]
   10346:	e770      	b.n	1022a <_malloc_r+0x352>
   10348:	eb02 0108 	add.w	r1, r2, r8
   1034c:	4249      	negs	r1, r1
   1034e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   10352:	4651      	mov	r1, sl
   10354:	4620      	mov	r0, r4
   10356:	9200      	str	r2, [sp, #0]
   10358:	f001 fe92 	bl	12080 <_sbrk_r>
   1035c:	1c43      	adds	r3, r0, #1
   1035e:	e9dd 2300 	ldrd	r2, r3, [sp]
   10362:	f47f aeef 	bne.w	10144 <_malloc_r+0x26c>
   10366:	46da      	mov	sl, fp
   10368:	e6ef      	b.n	1014a <_malloc_r+0x272>
   1036a:	2b54      	cmp	r3, #84	; 0x54
   1036c:	d825      	bhi.n	103ba <_malloc_r+0x4e2>
   1036e:	0b13      	lsrs	r3, r2, #12
   10370:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   10374:	00c9      	lsls	r1, r1, #3
   10376:	336e      	adds	r3, #110	; 0x6e
   10378:	e744      	b.n	10204 <_malloc_r+0x32c>
   1037a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1037e:	d825      	bhi.n	103cc <_malloc_r+0x4f4>
   10380:	0bf3      	lsrs	r3, r6, #15
   10382:	f103 0078 	add.w	r0, r3, #120	; 0x78
   10386:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   1038a:	00c3      	lsls	r3, r0, #3
   1038c:	e5ea      	b.n	ff64 <_malloc_r+0x8c>
   1038e:	4b29      	ldr	r3, [pc, #164]	; (10434 <_malloc_r+0x55c>)
   10390:	6818      	ldr	r0, [r3, #0]
   10392:	4440      	add	r0, r8
   10394:	6018      	str	r0, [r3, #0]
   10396:	e6b1      	b.n	100fc <_malloc_r+0x224>
   10398:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   1039c:	f1bc 0f00 	cmp.w	ip, #0
   103a0:	f47f aeac 	bne.w	100fc <_malloc_r+0x224>
   103a4:	68bd      	ldr	r5, [r7, #8]
   103a6:	44c8      	add	r8, r9
   103a8:	f048 0001 	orr.w	r0, r8, #1
   103ac:	6068      	str	r0, [r5, #4]
   103ae:	e6f0      	b.n	10192 <_malloc_r+0x2ba>
   103b0:	4615      	mov	r5, r2
   103b2:	e6ee      	b.n	10192 <_malloc_r+0x2ba>
   103b4:	2301      	movs	r3, #1
   103b6:	6053      	str	r3, [r2, #4]
   103b8:	e794      	b.n	102e4 <_malloc_r+0x40c>
   103ba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   103be:	d823      	bhi.n	10408 <_malloc_r+0x530>
   103c0:	0bd3      	lsrs	r3, r2, #15
   103c2:	f103 0178 	add.w	r1, r3, #120	; 0x78
   103c6:	00c9      	lsls	r1, r1, #3
   103c8:	3377      	adds	r3, #119	; 0x77
   103ca:	e71b      	b.n	10204 <_malloc_r+0x32c>
   103cc:	f240 5254 	movw	r2, #1364	; 0x554
   103d0:	4293      	cmp	r3, r2
   103d2:	d823      	bhi.n	1041c <_malloc_r+0x544>
   103d4:	0cb3      	lsrs	r3, r6, #18
   103d6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   103da:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   103de:	00c3      	lsls	r3, r0, #3
   103e0:	e5c0      	b.n	ff64 <_malloc_r+0x8c>
   103e2:	f1ab 0b08 	sub.w	fp, fp, #8
   103e6:	44d8      	add	r8, fp
   103e8:	eba8 0802 	sub.w	r8, r8, r2
   103ec:	f04f 0a00 	mov.w	sl, #0
   103f0:	e6ab      	b.n	1014a <_malloc_r+0x272>
   103f2:	f105 0108 	add.w	r1, r5, #8
   103f6:	4620      	mov	r0, r4
   103f8:	9300      	str	r3, [sp, #0]
   103fa:	f002 f9d3 	bl	127a4 <_free_r>
   103fe:	68bd      	ldr	r5, [r7, #8]
   10400:	9b00      	ldr	r3, [sp, #0]
   10402:	6868      	ldr	r0, [r5, #4]
   10404:	6819      	ldr	r1, [r3, #0]
   10406:	e6c4      	b.n	10192 <_malloc_r+0x2ba>
   10408:	f240 5154 	movw	r1, #1364	; 0x554
   1040c:	428b      	cmp	r3, r1
   1040e:	d80b      	bhi.n	10428 <_malloc_r+0x550>
   10410:	0c93      	lsrs	r3, r2, #18
   10412:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   10416:	00c9      	lsls	r1, r1, #3
   10418:	337c      	adds	r3, #124	; 0x7c
   1041a:	e6f3      	b.n	10204 <_malloc_r+0x32c>
   1041c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   10420:	207f      	movs	r0, #127	; 0x7f
   10422:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   10426:	e59d      	b.n	ff64 <_malloc_r+0x8c>
   10428:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1042c:	237e      	movs	r3, #126	; 0x7e
   1042e:	e6e9      	b.n	10204 <_malloc_r+0x32c>
   10430:	687b      	ldr	r3, [r7, #4]
   10432:	e770      	b.n	10316 <_malloc_r+0x43e>
   10434:	200349a0 	.word	0x200349a0

00010438 <__malloc_lock>:
   10438:	4801      	ldr	r0, [pc, #4]	; (10440 <__malloc_lock+0x8>)
   1043a:	f001 be77 	b.w	1212c <__retarget_lock_acquire_recursive>
   1043e:	bf00      	nop
   10440:	20034998 	.word	0x20034998

00010444 <__malloc_unlock>:
   10444:	4801      	ldr	r0, [pc, #4]	; (1044c <__malloc_unlock+0x8>)
   10446:	f001 be73 	b.w	12130 <__retarget_lock_release_recursive>
   1044a:	bf00      	nop
   1044c:	20034998 	.word	0x20034998

00010450 <realloc>:
   10450:	b410      	push	{r4}
   10452:	4c04      	ldr	r4, [pc, #16]	; (10464 <realloc+0x14>)
   10454:	4603      	mov	r3, r0
   10456:	460a      	mov	r2, r1
   10458:	6820      	ldr	r0, [r4, #0]
   1045a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1045e:	4619      	mov	r1, r3
   10460:	f000 b802 	b.w	10468 <_realloc_r>
   10464:	20008fb4 	.word	0x20008fb4

00010468 <_realloc_r>:
   10468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1046c:	4617      	mov	r7, r2
   1046e:	2900      	cmp	r1, #0
   10470:	f000 8098 	beq.w	105a4 <_realloc_r+0x13c>
   10474:	460c      	mov	r4, r1
   10476:	f107 050b 	add.w	r5, r7, #11
   1047a:	4680      	mov	r8, r0
   1047c:	f7ff ffdc 	bl	10438 <__malloc_lock>
   10480:	2d16      	cmp	r5, #22
   10482:	f854 1c04 	ldr.w	r1, [r4, #-4]
   10486:	d85b      	bhi.n	10540 <_realloc_r+0xd8>
   10488:	2510      	movs	r5, #16
   1048a:	462a      	mov	r2, r5
   1048c:	42af      	cmp	r7, r5
   1048e:	d85c      	bhi.n	1054a <_realloc_r+0xe2>
   10490:	f021 0603 	bic.w	r6, r1, #3
   10494:	4296      	cmp	r6, r2
   10496:	f1a4 0908 	sub.w	r9, r4, #8
   1049a:	da62      	bge.n	10562 <_realloc_r+0xfa>
   1049c:	4bbc      	ldr	r3, [pc, #752]	; (10790 <_realloc_r+0x328>)
   1049e:	f8d3 c008 	ldr.w	ip, [r3, #8]
   104a2:	eb09 0006 	add.w	r0, r9, r6
   104a6:	4584      	cmp	ip, r0
   104a8:	f000 8097 	beq.w	105da <_realloc_r+0x172>
   104ac:	f8d0 c004 	ldr.w	ip, [r0, #4]
   104b0:	f02c 0301 	bic.w	r3, ip, #1
   104b4:	4403      	add	r3, r0
   104b6:	685b      	ldr	r3, [r3, #4]
   104b8:	07db      	lsls	r3, r3, #31
   104ba:	d468      	bmi.n	1058e <_realloc_r+0x126>
   104bc:	f02c 0c03 	bic.w	ip, ip, #3
   104c0:	eb06 030c 	add.w	r3, r6, ip
   104c4:	4293      	cmp	r3, r2
   104c6:	da47      	bge.n	10558 <_realloc_r+0xf0>
   104c8:	07cb      	lsls	r3, r1, #31
   104ca:	d410      	bmi.n	104ee <_realloc_r+0x86>
   104cc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   104d0:	eba9 0a03 	sub.w	sl, r9, r3
   104d4:	f8da 3004 	ldr.w	r3, [sl, #4]
   104d8:	f023 0103 	bic.w	r1, r3, #3
   104dc:	448c      	add	ip, r1
   104de:	44b4      	add	ip, r6
   104e0:	4594      	cmp	ip, r2
   104e2:	f280 8111 	bge.w	10708 <_realloc_r+0x2a0>
   104e6:	1873      	adds	r3, r6, r1
   104e8:	4293      	cmp	r3, r2
   104ea:	f280 80e8 	bge.w	106be <_realloc_r+0x256>
   104ee:	4639      	mov	r1, r7
   104f0:	4640      	mov	r0, r8
   104f2:	f7ff fcf1 	bl	fed8 <_malloc_r>
   104f6:	4607      	mov	r7, r0
   104f8:	b1e0      	cbz	r0, 10534 <_realloc_r+0xcc>
   104fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   104fe:	f023 0301 	bic.w	r3, r3, #1
   10502:	444b      	add	r3, r9
   10504:	f1a0 0208 	sub.w	r2, r0, #8
   10508:	4293      	cmp	r3, r2
   1050a:	f000 80d2 	beq.w	106b2 <_realloc_r+0x24a>
   1050e:	1f32      	subs	r2, r6, #4
   10510:	2a24      	cmp	r2, #36	; 0x24
   10512:	f200 80f5 	bhi.w	10700 <_realloc_r+0x298>
   10516:	2a13      	cmp	r2, #19
   10518:	f200 80ac 	bhi.w	10674 <_realloc_r+0x20c>
   1051c:	4603      	mov	r3, r0
   1051e:	4622      	mov	r2, r4
   10520:	6811      	ldr	r1, [r2, #0]
   10522:	6019      	str	r1, [r3, #0]
   10524:	6851      	ldr	r1, [r2, #4]
   10526:	6059      	str	r1, [r3, #4]
   10528:	6892      	ldr	r2, [r2, #8]
   1052a:	609a      	str	r2, [r3, #8]
   1052c:	4621      	mov	r1, r4
   1052e:	4640      	mov	r0, r8
   10530:	f002 f938 	bl	127a4 <_free_r>
   10534:	4640      	mov	r0, r8
   10536:	f7ff ff85 	bl	10444 <__malloc_unlock>
   1053a:	4638      	mov	r0, r7
   1053c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10540:	f025 0507 	bic.w	r5, r5, #7
   10544:	2d00      	cmp	r5, #0
   10546:	462a      	mov	r2, r5
   10548:	daa0      	bge.n	1048c <_realloc_r+0x24>
   1054a:	230c      	movs	r3, #12
   1054c:	f8c8 3000 	str.w	r3, [r8]
   10550:	2700      	movs	r7, #0
   10552:	4638      	mov	r0, r7
   10554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10558:	461e      	mov	r6, r3
   1055a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   1055e:	60d3      	str	r3, [r2, #12]
   10560:	609a      	str	r2, [r3, #8]
   10562:	1b73      	subs	r3, r6, r5
   10564:	2b0f      	cmp	r3, #15
   10566:	d822      	bhi.n	105ae <_realloc_r+0x146>
   10568:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1056c:	f003 0301 	and.w	r3, r3, #1
   10570:	4333      	orrs	r3, r6
   10572:	444e      	add	r6, r9
   10574:	f8c9 3004 	str.w	r3, [r9, #4]
   10578:	6873      	ldr	r3, [r6, #4]
   1057a:	f043 0301 	orr.w	r3, r3, #1
   1057e:	6073      	str	r3, [r6, #4]
   10580:	4640      	mov	r0, r8
   10582:	4627      	mov	r7, r4
   10584:	f7ff ff5e 	bl	10444 <__malloc_unlock>
   10588:	4638      	mov	r0, r7
   1058a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1058e:	07c9      	lsls	r1, r1, #31
   10590:	d4ad      	bmi.n	104ee <_realloc_r+0x86>
   10592:	f854 3c08 	ldr.w	r3, [r4, #-8]
   10596:	eba9 0a03 	sub.w	sl, r9, r3
   1059a:	f8da 1004 	ldr.w	r1, [sl, #4]
   1059e:	f021 0103 	bic.w	r1, r1, #3
   105a2:	e7a0      	b.n	104e6 <_realloc_r+0x7e>
   105a4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105a8:	4611      	mov	r1, r2
   105aa:	f7ff bc95 	b.w	fed8 <_malloc_r>
   105ae:	f8d9 2004 	ldr.w	r2, [r9, #4]
   105b2:	eb09 0105 	add.w	r1, r9, r5
   105b6:	f002 0201 	and.w	r2, r2, #1
   105ba:	444e      	add	r6, r9
   105bc:	f043 0301 	orr.w	r3, r3, #1
   105c0:	432a      	orrs	r2, r5
   105c2:	f8c9 2004 	str.w	r2, [r9, #4]
   105c6:	604b      	str	r3, [r1, #4]
   105c8:	6873      	ldr	r3, [r6, #4]
   105ca:	f043 0301 	orr.w	r3, r3, #1
   105ce:	3108      	adds	r1, #8
   105d0:	6073      	str	r3, [r6, #4]
   105d2:	4640      	mov	r0, r8
   105d4:	f002 f8e6 	bl	127a4 <_free_r>
   105d8:	e7d2      	b.n	10580 <_realloc_r+0x118>
   105da:	f8dc 0004 	ldr.w	r0, [ip, #4]
   105de:	f020 0b03 	bic.w	fp, r0, #3
   105e2:	eb06 0c0b 	add.w	ip, r6, fp
   105e6:	f105 0010 	add.w	r0, r5, #16
   105ea:	4584      	cmp	ip, r0
   105ec:	da4d      	bge.n	1068a <_realloc_r+0x222>
   105ee:	07c9      	lsls	r1, r1, #31
   105f0:	f53f af7d 	bmi.w	104ee <_realloc_r+0x86>
   105f4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   105f8:	eba9 0a01 	sub.w	sl, r9, r1
   105fc:	f8da 1004 	ldr.w	r1, [sl, #4]
   10600:	f021 0103 	bic.w	r1, r1, #3
   10604:	448b      	add	fp, r1
   10606:	44b3      	add	fp, r6
   10608:	4558      	cmp	r0, fp
   1060a:	f73f af6c 	bgt.w	104e6 <_realloc_r+0x7e>
   1060e:	4657      	mov	r7, sl
   10610:	f8da 100c 	ldr.w	r1, [sl, #12]
   10614:	f857 0f08 	ldr.w	r0, [r7, #8]!
   10618:	1f32      	subs	r2, r6, #4
   1061a:	2a24      	cmp	r2, #36	; 0x24
   1061c:	60c1      	str	r1, [r0, #12]
   1061e:	6088      	str	r0, [r1, #8]
   10620:	f200 80db 	bhi.w	107da <_realloc_r+0x372>
   10624:	2a13      	cmp	r2, #19
   10626:	f240 80d6 	bls.w	107d6 <_realloc_r+0x36e>
   1062a:	6821      	ldr	r1, [r4, #0]
   1062c:	f8ca 1008 	str.w	r1, [sl, #8]
   10630:	6861      	ldr	r1, [r4, #4]
   10632:	f8ca 100c 	str.w	r1, [sl, #12]
   10636:	2a1b      	cmp	r2, #27
   10638:	f200 80df 	bhi.w	107fa <_realloc_r+0x392>
   1063c:	3408      	adds	r4, #8
   1063e:	f10a 0210 	add.w	r2, sl, #16
   10642:	6821      	ldr	r1, [r4, #0]
   10644:	6011      	str	r1, [r2, #0]
   10646:	6861      	ldr	r1, [r4, #4]
   10648:	6051      	str	r1, [r2, #4]
   1064a:	68a1      	ldr	r1, [r4, #8]
   1064c:	6091      	str	r1, [r2, #8]
   1064e:	eb0a 0105 	add.w	r1, sl, r5
   10652:	ebab 0205 	sub.w	r2, fp, r5
   10656:	f042 0201 	orr.w	r2, r2, #1
   1065a:	6099      	str	r1, [r3, #8]
   1065c:	604a      	str	r2, [r1, #4]
   1065e:	f8da 3004 	ldr.w	r3, [sl, #4]
   10662:	f003 0301 	and.w	r3, r3, #1
   10666:	432b      	orrs	r3, r5
   10668:	4640      	mov	r0, r8
   1066a:	f8ca 3004 	str.w	r3, [sl, #4]
   1066e:	f7ff fee9 	bl	10444 <__malloc_unlock>
   10672:	e76e      	b.n	10552 <_realloc_r+0xea>
   10674:	6823      	ldr	r3, [r4, #0]
   10676:	6003      	str	r3, [r0, #0]
   10678:	6863      	ldr	r3, [r4, #4]
   1067a:	6043      	str	r3, [r0, #4]
   1067c:	2a1b      	cmp	r2, #27
   1067e:	d868      	bhi.n	10752 <_realloc_r+0x2ea>
   10680:	f104 0208 	add.w	r2, r4, #8
   10684:	f100 0308 	add.w	r3, r0, #8
   10688:	e74a      	b.n	10520 <_realloc_r+0xb8>
   1068a:	eb09 0205 	add.w	r2, r9, r5
   1068e:	609a      	str	r2, [r3, #8]
   10690:	ebac 0305 	sub.w	r3, ip, r5
   10694:	f043 0301 	orr.w	r3, r3, #1
   10698:	6053      	str	r3, [r2, #4]
   1069a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1069e:	f003 0301 	and.w	r3, r3, #1
   106a2:	432b      	orrs	r3, r5
   106a4:	4640      	mov	r0, r8
   106a6:	f844 3c04 	str.w	r3, [r4, #-4]
   106aa:	f7ff fecb 	bl	10444 <__malloc_unlock>
   106ae:	4627      	mov	r7, r4
   106b0:	e74f      	b.n	10552 <_realloc_r+0xea>
   106b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   106b6:	f023 0303 	bic.w	r3, r3, #3
   106ba:	441e      	add	r6, r3
   106bc:	e751      	b.n	10562 <_realloc_r+0xfa>
   106be:	4657      	mov	r7, sl
   106c0:	f8da 100c 	ldr.w	r1, [sl, #12]
   106c4:	f857 0f08 	ldr.w	r0, [r7, #8]!
   106c8:	1f32      	subs	r2, r6, #4
   106ca:	2a24      	cmp	r2, #36	; 0x24
   106cc:	60c1      	str	r1, [r0, #12]
   106ce:	6088      	str	r0, [r1, #8]
   106d0:	d84c      	bhi.n	1076c <_realloc_r+0x304>
   106d2:	2a13      	cmp	r2, #19
   106d4:	d948      	bls.n	10768 <_realloc_r+0x300>
   106d6:	6821      	ldr	r1, [r4, #0]
   106d8:	f8ca 1008 	str.w	r1, [sl, #8]
   106dc:	6861      	ldr	r1, [r4, #4]
   106de:	f8ca 100c 	str.w	r1, [sl, #12]
   106e2:	2a1b      	cmp	r2, #27
   106e4:	d856      	bhi.n	10794 <_realloc_r+0x32c>
   106e6:	3408      	adds	r4, #8
   106e8:	f10a 0210 	add.w	r2, sl, #16
   106ec:	461e      	mov	r6, r3
   106ee:	6823      	ldr	r3, [r4, #0]
   106f0:	6013      	str	r3, [r2, #0]
   106f2:	6863      	ldr	r3, [r4, #4]
   106f4:	6053      	str	r3, [r2, #4]
   106f6:	68a3      	ldr	r3, [r4, #8]
   106f8:	6093      	str	r3, [r2, #8]
   106fa:	46d1      	mov	r9, sl
   106fc:	463c      	mov	r4, r7
   106fe:	e730      	b.n	10562 <_realloc_r+0xfa>
   10700:	4621      	mov	r1, r4
   10702:	f001 fadd 	bl	11cc0 <memmove>
   10706:	e711      	b.n	1052c <_realloc_r+0xc4>
   10708:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   1070c:	4657      	mov	r7, sl
   1070e:	60cb      	str	r3, [r1, #12]
   10710:	6099      	str	r1, [r3, #8]
   10712:	f857 1f08 	ldr.w	r1, [r7, #8]!
   10716:	f8da 300c 	ldr.w	r3, [sl, #12]
   1071a:	60cb      	str	r3, [r1, #12]
   1071c:	1f32      	subs	r2, r6, #4
   1071e:	2a24      	cmp	r2, #36	; 0x24
   10720:	6099      	str	r1, [r3, #8]
   10722:	d82d      	bhi.n	10780 <_realloc_r+0x318>
   10724:	2a13      	cmp	r2, #19
   10726:	d929      	bls.n	1077c <_realloc_r+0x314>
   10728:	6823      	ldr	r3, [r4, #0]
   1072a:	f8ca 3008 	str.w	r3, [sl, #8]
   1072e:	6863      	ldr	r3, [r4, #4]
   10730:	f8ca 300c 	str.w	r3, [sl, #12]
   10734:	2a1b      	cmp	r2, #27
   10736:	d842      	bhi.n	107be <_realloc_r+0x356>
   10738:	3408      	adds	r4, #8
   1073a:	f10a 0310 	add.w	r3, sl, #16
   1073e:	6822      	ldr	r2, [r4, #0]
   10740:	601a      	str	r2, [r3, #0]
   10742:	6862      	ldr	r2, [r4, #4]
   10744:	605a      	str	r2, [r3, #4]
   10746:	68a2      	ldr	r2, [r4, #8]
   10748:	609a      	str	r2, [r3, #8]
   1074a:	4666      	mov	r6, ip
   1074c:	46d1      	mov	r9, sl
   1074e:	463c      	mov	r4, r7
   10750:	e707      	b.n	10562 <_realloc_r+0xfa>
   10752:	68a3      	ldr	r3, [r4, #8]
   10754:	6083      	str	r3, [r0, #8]
   10756:	68e3      	ldr	r3, [r4, #12]
   10758:	60c3      	str	r3, [r0, #12]
   1075a:	2a24      	cmp	r2, #36	; 0x24
   1075c:	d026      	beq.n	107ac <_realloc_r+0x344>
   1075e:	f104 0210 	add.w	r2, r4, #16
   10762:	f100 0310 	add.w	r3, r0, #16
   10766:	e6db      	b.n	10520 <_realloc_r+0xb8>
   10768:	463a      	mov	r2, r7
   1076a:	e7bf      	b.n	106ec <_realloc_r+0x284>
   1076c:	4621      	mov	r1, r4
   1076e:	4638      	mov	r0, r7
   10770:	461e      	mov	r6, r3
   10772:	46d1      	mov	r9, sl
   10774:	f001 faa4 	bl	11cc0 <memmove>
   10778:	463c      	mov	r4, r7
   1077a:	e6f2      	b.n	10562 <_realloc_r+0xfa>
   1077c:	463b      	mov	r3, r7
   1077e:	e7de      	b.n	1073e <_realloc_r+0x2d6>
   10780:	4621      	mov	r1, r4
   10782:	4638      	mov	r0, r7
   10784:	4666      	mov	r6, ip
   10786:	46d1      	mov	r9, sl
   10788:	f001 fa9a 	bl	11cc0 <memmove>
   1078c:	463c      	mov	r4, r7
   1078e:	e6e8      	b.n	10562 <_realloc_r+0xfa>
   10790:	20008b98 	.word	0x20008b98
   10794:	68a1      	ldr	r1, [r4, #8]
   10796:	f8ca 1010 	str.w	r1, [sl, #16]
   1079a:	68e1      	ldr	r1, [r4, #12]
   1079c:	f8ca 1014 	str.w	r1, [sl, #20]
   107a0:	2a24      	cmp	r2, #36	; 0x24
   107a2:	d020      	beq.n	107e6 <_realloc_r+0x37e>
   107a4:	3410      	adds	r4, #16
   107a6:	f10a 0218 	add.w	r2, sl, #24
   107aa:	e79f      	b.n	106ec <_realloc_r+0x284>
   107ac:	6923      	ldr	r3, [r4, #16]
   107ae:	6103      	str	r3, [r0, #16]
   107b0:	6961      	ldr	r1, [r4, #20]
   107b2:	6141      	str	r1, [r0, #20]
   107b4:	f104 0218 	add.w	r2, r4, #24
   107b8:	f100 0318 	add.w	r3, r0, #24
   107bc:	e6b0      	b.n	10520 <_realloc_r+0xb8>
   107be:	68a3      	ldr	r3, [r4, #8]
   107c0:	f8ca 3010 	str.w	r3, [sl, #16]
   107c4:	68e3      	ldr	r3, [r4, #12]
   107c6:	f8ca 3014 	str.w	r3, [sl, #20]
   107ca:	2a24      	cmp	r2, #36	; 0x24
   107cc:	d021      	beq.n	10812 <_realloc_r+0x3aa>
   107ce:	3410      	adds	r4, #16
   107d0:	f10a 0318 	add.w	r3, sl, #24
   107d4:	e7b3      	b.n	1073e <_realloc_r+0x2d6>
   107d6:	463a      	mov	r2, r7
   107d8:	e733      	b.n	10642 <_realloc_r+0x1da>
   107da:	4621      	mov	r1, r4
   107dc:	4638      	mov	r0, r7
   107de:	f001 fa6f 	bl	11cc0 <memmove>
   107e2:	4b16      	ldr	r3, [pc, #88]	; (1083c <_realloc_r+0x3d4>)
   107e4:	e733      	b.n	1064e <_realloc_r+0x1e6>
   107e6:	6922      	ldr	r2, [r4, #16]
   107e8:	f8ca 2018 	str.w	r2, [sl, #24]
   107ec:	6962      	ldr	r2, [r4, #20]
   107ee:	f8ca 201c 	str.w	r2, [sl, #28]
   107f2:	3418      	adds	r4, #24
   107f4:	f10a 0220 	add.w	r2, sl, #32
   107f8:	e778      	b.n	106ec <_realloc_r+0x284>
   107fa:	68a1      	ldr	r1, [r4, #8]
   107fc:	f8ca 1010 	str.w	r1, [sl, #16]
   10800:	68e1      	ldr	r1, [r4, #12]
   10802:	f8ca 1014 	str.w	r1, [sl, #20]
   10806:	2a24      	cmp	r2, #36	; 0x24
   10808:	d00d      	beq.n	10826 <_realloc_r+0x3be>
   1080a:	3410      	adds	r4, #16
   1080c:	f10a 0218 	add.w	r2, sl, #24
   10810:	e717      	b.n	10642 <_realloc_r+0x1da>
   10812:	6923      	ldr	r3, [r4, #16]
   10814:	f8ca 3018 	str.w	r3, [sl, #24]
   10818:	6963      	ldr	r3, [r4, #20]
   1081a:	f8ca 301c 	str.w	r3, [sl, #28]
   1081e:	3418      	adds	r4, #24
   10820:	f10a 0320 	add.w	r3, sl, #32
   10824:	e78b      	b.n	1073e <_realloc_r+0x2d6>
   10826:	6922      	ldr	r2, [r4, #16]
   10828:	f8ca 2018 	str.w	r2, [sl, #24]
   1082c:	6962      	ldr	r2, [r4, #20]
   1082e:	f8ca 201c 	str.w	r2, [sl, #28]
   10832:	3418      	adds	r4, #24
   10834:	f10a 0220 	add.w	r2, sl, #32
   10838:	e703      	b.n	10642 <_realloc_r+0x1da>
   1083a:	bf00      	nop
   1083c:	20008b98 	.word	0x20008b98

00010840 <_strtod_l>:
   10840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10844:	ed2d 8b10 	vpush	{d8-d15}
   10848:	b097      	sub	sp, #92	; 0x5c
   1084a:	468a      	mov	sl, r1
   1084c:	2100      	movs	r1, #0
   1084e:	9207      	str	r2, [sp, #28]
   10850:	9112      	str	r1, [sp, #72]	; 0x48
   10852:	2200      	movs	r2, #0
   10854:	2100      	movs	r1, #0
   10856:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1085a:	4680      	mov	r8, r0
   1085c:	4651      	mov	r1, sl
   1085e:	9111      	str	r1, [sp, #68]	; 0x44
   10860:	460f      	mov	r7, r1
   10862:	f811 2b01 	ldrb.w	r2, [r1], #1
   10866:	2a2d      	cmp	r2, #45	; 0x2d
   10868:	d85e      	bhi.n	10928 <_strtod_l+0xe8>
   1086a:	a001      	add	r0, pc, #4	; (adr r0, 10870 <_strtod_l+0x30>)
   1086c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   10870:	00010a11 	.word	0x00010a11
   10874:	00010929 	.word	0x00010929
   10878:	00010929 	.word	0x00010929
   1087c:	00010929 	.word	0x00010929
   10880:	00010929 	.word	0x00010929
   10884:	00010929 	.word	0x00010929
   10888:	00010929 	.word	0x00010929
   1088c:	00010929 	.word	0x00010929
   10890:	00010929 	.word	0x00010929
   10894:	0001085f 	.word	0x0001085f
   10898:	0001085f 	.word	0x0001085f
   1089c:	0001085f 	.word	0x0001085f
   108a0:	0001085f 	.word	0x0001085f
   108a4:	0001085f 	.word	0x0001085f
   108a8:	00010929 	.word	0x00010929
   108ac:	00010929 	.word	0x00010929
   108b0:	00010929 	.word	0x00010929
   108b4:	00010929 	.word	0x00010929
   108b8:	00010929 	.word	0x00010929
   108bc:	00010929 	.word	0x00010929
   108c0:	00010929 	.word	0x00010929
   108c4:	00010929 	.word	0x00010929
   108c8:	00010929 	.word	0x00010929
   108cc:	00010929 	.word	0x00010929
   108d0:	00010929 	.word	0x00010929
   108d4:	00010929 	.word	0x00010929
   108d8:	00010929 	.word	0x00010929
   108dc:	00010929 	.word	0x00010929
   108e0:	00010929 	.word	0x00010929
   108e4:	00010929 	.word	0x00010929
   108e8:	00010929 	.word	0x00010929
   108ec:	00010929 	.word	0x00010929
   108f0:	0001085f 	.word	0x0001085f
   108f4:	00010929 	.word	0x00010929
   108f8:	00010929 	.word	0x00010929
   108fc:	00010929 	.word	0x00010929
   10900:	00010929 	.word	0x00010929
   10904:	00010929 	.word	0x00010929
   10908:	00010929 	.word	0x00010929
   1090c:	00010929 	.word	0x00010929
   10910:	00010929 	.word	0x00010929
   10914:	00010929 	.word	0x00010929
   10918:	00010929 	.word	0x00010929
   1091c:	0001104b 	.word	0x0001104b
   10920:	00010929 	.word	0x00010929
   10924:	00011037 	.word	0x00011037
   10928:	2100      	movs	r1, #0
   1092a:	9109      	str	r1, [sp, #36]	; 0x24
   1092c:	2a30      	cmp	r2, #48	; 0x30
   1092e:	d07d      	beq.n	10a2c <_strtod_l+0x1ec>
   10930:	2300      	movs	r3, #0
   10932:	9308      	str	r3, [sp, #32]
   10934:	2a2f      	cmp	r2, #47	; 0x2f
   10936:	4614      	mov	r4, r2
   10938:	f240 84cd 	bls.w	112d6 <_strtod_l+0xa96>
   1093c:	f04f 0900 	mov.w	r9, #0
   10940:	4638      	mov	r0, r7
   10942:	464e      	mov	r6, r9
   10944:	464d      	mov	r5, r9
   10946:	e012      	b.n	1096e <_strtod_l+0x12e>
   10948:	3001      	adds	r0, #1
   1094a:	2d08      	cmp	r5, #8
   1094c:	9011      	str	r0, [sp, #68]	; 0x44
   1094e:	bfc8      	it	gt
   10950:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
   10954:	7804      	ldrb	r4, [r0, #0]
   10956:	bfc6      	itte	gt
   10958:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
   1095c:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
   10960:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
   10964:	2c2f      	cmp	r4, #47	; 0x2f
   10966:	f105 0501 	add.w	r5, r5, #1
   1096a:	4622      	mov	r2, r4
   1096c:	dd6f      	ble.n	10a4e <_strtod_l+0x20e>
   1096e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   10972:	2c39      	cmp	r4, #57	; 0x39
   10974:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   10978:	dde6      	ble.n	10948 <_strtod_l+0x108>
   1097a:	499f      	ldr	r1, [pc, #636]	; (10bf8 <_strtod_l+0x3b8>)
   1097c:	2201      	movs	r2, #1
   1097e:	f001 fac3 	bl	11f08 <strncmp>
   10982:	2800      	cmp	r0, #0
   10984:	d137      	bne.n	109f6 <_strtod_l+0x1b6>
   10986:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10988:	461a      	mov	r2, r3
   1098a:	3301      	adds	r3, #1
   1098c:	9311      	str	r3, [sp, #68]	; 0x44
   1098e:	7854      	ldrb	r4, [r2, #1]
   10990:	2d00      	cmp	r5, #0
   10992:	f040 8543 	bne.w	1141c <_strtod_l+0xbdc>
   10996:	2c30      	cmp	r4, #48	; 0x30
   10998:	f040 8524 	bne.w	113e4 <_strtod_l+0xba4>
   1099c:	f1c3 0201 	rsb	r2, r3, #1
   109a0:	1898      	adds	r0, r3, r2
   109a2:	3301      	adds	r3, #1
   109a4:	9311      	str	r3, [sp, #68]	; 0x44
   109a6:	781c      	ldrb	r4, [r3, #0]
   109a8:	2c30      	cmp	r4, #48	; 0x30
   109aa:	d0f9      	beq.n	109a0 <_strtod_l+0x160>
   109ac:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   109b0:	2b08      	cmp	r3, #8
   109b2:	f200 8301 	bhi.w	10fb8 <_strtod_l+0x778>
   109b6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   109b8:	1c43      	adds	r3, r0, #1
   109ba:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   109be:	930b      	str	r3, [sp, #44]	; 0x2c
   109c0:	2501      	movs	r5, #1
   109c2:	46bc      	mov	ip, r7
   109c4:	f04f 0e00 	mov.w	lr, #0
   109c8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   109cc:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
   109d0:	2000      	movs	r0, #0
   109d2:	f10c 0301 	add.w	r3, ip, #1
   109d6:	9311      	str	r3, [sp, #68]	; 0x44
   109d8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   109dc:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   109e0:	2909      	cmp	r1, #9
   109e2:	f200 82bb 	bhi.w	10f5c <_strtod_l+0x71c>
   109e6:	3001      	adds	r0, #1
   109e8:	468b      	mov	fp, r1
   109ea:	2900      	cmp	r1, #0
   109ec:	f040 844f 	bne.w	1128e <_strtod_l+0xa4e>
   109f0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   109f4:	e7ed      	b.n	109d2 <_strtod_l+0x192>
   109f6:	2000      	movs	r0, #0
   109f8:	2c65      	cmp	r4, #101	; 0x65
   109fa:	46ae      	mov	lr, r5
   109fc:	900b      	str	r0, [sp, #44]	; 0x2c
   109fe:	4684      	mov	ip, r0
   10a00:	d001      	beq.n	10a06 <_strtod_l+0x1c6>
   10a02:	2c45      	cmp	r4, #69	; 0x45
   10a04:	d130      	bne.n	10a68 <_strtod_l+0x228>
   10a06:	2d00      	cmp	r5, #0
   10a08:	d16b      	bne.n	10ae2 <_strtod_l+0x2a2>
   10a0a:	9b08      	ldr	r3, [sp, #32]
   10a0c:	4303      	orrs	r3, r0
   10a0e:	d167      	bne.n	10ae0 <_strtod_l+0x2a0>
   10a10:	9b07      	ldr	r3, [sp, #28]
   10a12:	ed9f 8b77 	vldr	d8, [pc, #476]	; 10bf0 <_strtod_l+0x3b0>
   10a16:	b113      	cbz	r3, 10a1e <_strtod_l+0x1de>
   10a18:	9b07      	ldr	r3, [sp, #28]
   10a1a:	f8c3 a000 	str.w	sl, [r3]
   10a1e:	eeb0 0b48 	vmov.f64	d0, d8
   10a22:	b017      	add	sp, #92	; 0x5c
   10a24:	ecbd 8b10 	vpop	{d8-d15}
   10a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a2c:	787a      	ldrb	r2, [r7, #1]
   10a2e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   10a32:	2a58      	cmp	r2, #88	; 0x58
   10a34:	f000 840c 	beq.w	11250 <_strtod_l+0xa10>
   10a38:	3701      	adds	r7, #1
   10a3a:	9711      	str	r7, [sp, #68]	; 0x44
   10a3c:	783a      	ldrb	r2, [r7, #0]
   10a3e:	2a30      	cmp	r2, #48	; 0x30
   10a40:	d0fa      	beq.n	10a38 <_strtod_l+0x1f8>
   10a42:	2a00      	cmp	r2, #0
   10a44:	f000 80b7 	beq.w	10bb6 <_strtod_l+0x376>
   10a48:	2301      	movs	r3, #1
   10a4a:	9308      	str	r3, [sp, #32]
   10a4c:	e772      	b.n	10934 <_strtod_l+0xf4>
   10a4e:	496a      	ldr	r1, [pc, #424]	; (10bf8 <_strtod_l+0x3b8>)
   10a50:	2201      	movs	r2, #1
   10a52:	f001 fa59 	bl	11f08 <strncmp>
   10a56:	2800      	cmp	r0, #0
   10a58:	f000 80c0 	beq.w	10bdc <_strtod_l+0x39c>
   10a5c:	46ae      	mov	lr, r5
   10a5e:	f04f 0c00 	mov.w	ip, #0
   10a62:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   10a66:	4660      	mov	r0, ip
   10a68:	f04f 0b00 	mov.w	fp, #0
   10a6c:	2d00      	cmp	r5, #0
   10a6e:	d07e      	beq.n	10b6e <_strtod_l+0x32e>
   10a70:	ee07 6a90 	vmov	s15, r6
   10a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   10a7a:	ebab 0303 	sub.w	r3, fp, r3
   10a7e:	f1be 0f00 	cmp.w	lr, #0
   10a82:	bf08      	it	eq
   10a84:	46ae      	moveq	lr, r5
   10a86:	2d10      	cmp	r5, #16
   10a88:	930a      	str	r3, [sp, #40]	; 0x28
   10a8a:	462b      	mov	r3, r5
   10a8c:	bfa8      	it	ge
   10a8e:	2310      	movge	r3, #16
   10a90:	2d09      	cmp	r5, #9
   10a92:	ed8d 7b04 	vstr	d7, [sp, #16]
   10a96:	dd0c      	ble.n	10ab2 <_strtod_l+0x272>
   10a98:	4a58      	ldr	r2, [pc, #352]	; (10bfc <_strtod_l+0x3bc>)
   10a9a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   10a9e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
   10aa2:	ee06 9a90 	vmov	s13, r9
   10aa6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
   10aaa:	eea7 6b05 	vfma.f64	d6, d7, d5
   10aae:	ed8d 6b04 	vstr	d6, [sp, #16]
   10ab2:	2d0f      	cmp	r5, #15
   10ab4:	f300 80a8 	bgt.w	10c08 <_strtod_l+0x3c8>
   10ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10aba:	2a00      	cmp	r2, #0
   10abc:	f000 83e4 	beq.w	11288 <_strtod_l+0xa48>
   10ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10ac2:	f340 833c 	ble.w	1113e <_strtod_l+0x8fe>
   10ac6:	2a16      	cmp	r2, #22
   10ac8:	f340 8498 	ble.w	113fc <_strtod_l+0xbbc>
   10acc:	990a      	ldr	r1, [sp, #40]	; 0x28
   10ace:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   10ad2:	428a      	cmp	r2, r1
   10ad4:	f280 84a6 	bge.w	11424 <_strtod_l+0xbe4>
   10ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10ada:	1aeb      	subs	r3, r5, r3
   10adc:	4413      	add	r3, r2
   10ade:	e099      	b.n	10c14 <_strtod_l+0x3d4>
   10ae0:	2500      	movs	r5, #0
   10ae2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   10ae6:	f10a 0301 	add.w	r3, sl, #1
   10aea:	9311      	str	r3, [sp, #68]	; 0x44
   10aec:	f89a 4001 	ldrb.w	r4, [sl, #1]
   10af0:	2c2b      	cmp	r4, #43	; 0x2b
   10af2:	f000 825e 	beq.w	10fb2 <_strtod_l+0x772>
   10af6:	2c2d      	cmp	r4, #45	; 0x2d
   10af8:	f000 81f7 	beq.w	10eea <_strtod_l+0x6aa>
   10afc:	2300      	movs	r3, #0
   10afe:	930a      	str	r3, [sp, #40]	; 0x28
   10b00:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10b04:	2b09      	cmp	r3, #9
   10b06:	f200 81eb 	bhi.w	10ee0 <_strtod_l+0x6a0>
   10b0a:	2c30      	cmp	r4, #48	; 0x30
   10b0c:	d105      	bne.n	10b1a <_strtod_l+0x2da>
   10b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10b10:	3301      	adds	r3, #1
   10b12:	9311      	str	r3, [sp, #68]	; 0x44
   10b14:	781c      	ldrb	r4, [r3, #0]
   10b16:	2c30      	cmp	r4, #48	; 0x30
   10b18:	d0fa      	beq.n	10b10 <_strtod_l+0x2d0>
   10b1a:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   10b1e:	2b08      	cmp	r3, #8
   10b20:	d8a2      	bhi.n	10a68 <_strtod_l+0x228>
   10b22:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10b24:	920c      	str	r2, [sp, #48]	; 0x30
   10b26:	1c53      	adds	r3, r2, #1
   10b28:	9311      	str	r3, [sp, #68]	; 0x44
   10b2a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   10b2e:	7854      	ldrb	r4, [r2, #1]
   10b30:	2c2f      	cmp	r4, #47	; 0x2f
   10b32:	dc07      	bgt.n	10b44 <_strtod_l+0x304>
   10b34:	e3de      	b.n	112f4 <_strtod_l+0xab4>
   10b36:	3301      	adds	r3, #1
   10b38:	9311      	str	r3, [sp, #68]	; 0x44
   10b3a:	784c      	ldrb	r4, [r1, #1]
   10b3c:	2c2f      	cmp	r4, #47	; 0x2f
   10b3e:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
   10b42:	dd06      	ble.n	10b52 <_strtod_l+0x312>
   10b44:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   10b48:	2c39      	cmp	r4, #57	; 0x39
   10b4a:	4619      	mov	r1, r3
   10b4c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   10b50:	ddf1      	ble.n	10b36 <_strtod_l+0x2f6>
   10b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10b54:	1a9b      	subs	r3, r3, r2
   10b56:	2b08      	cmp	r3, #8
   10b58:	f340 83cc 	ble.w	112f4 <_strtod_l+0xab4>
   10b5c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
   10b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10b62:	2b00      	cmp	r3, #0
   10b64:	d082      	beq.n	10a6c <_strtod_l+0x22c>
   10b66:	f1cb 0b00 	rsb	fp, fp, #0
   10b6a:	2d00      	cmp	r5, #0
   10b6c:	d180      	bne.n	10a70 <_strtod_l+0x230>
   10b6e:	9b08      	ldr	r3, [sp, #32]
   10b70:	4303      	orrs	r3, r0
   10b72:	d120      	bne.n	10bb6 <_strtod_l+0x376>
   10b74:	f1bc 0f00 	cmp.w	ip, #0
   10b78:	f47f af4a 	bne.w	10a10 <_strtod_l+0x1d0>
   10b7c:	2c69      	cmp	r4, #105	; 0x69
   10b7e:	f000 83cf 	beq.w	11320 <_strtod_l+0xae0>
   10b82:	f300 82f3 	bgt.w	1116c <_strtod_l+0x92c>
   10b86:	2c49      	cmp	r4, #73	; 0x49
   10b88:	f000 83ca 	beq.w	11320 <_strtod_l+0xae0>
   10b8c:	2c4e      	cmp	r4, #78	; 0x4e
   10b8e:	f47f af3f 	bne.w	10a10 <_strtod_l+0x1d0>
   10b92:	491b      	ldr	r1, [pc, #108]	; (10c00 <_strtod_l+0x3c0>)
   10b94:	a811      	add	r0, sp, #68	; 0x44
   10b96:	f002 fa27 	bl	12fe8 <__match>
   10b9a:	2800      	cmp	r0, #0
   10b9c:	f43f af38 	beq.w	10a10 <_strtod_l+0x1d0>
   10ba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10ba2:	781b      	ldrb	r3, [r3, #0]
   10ba4:	2b28      	cmp	r3, #40	; 0x28
   10ba6:	f000 84f2 	beq.w	1158e <_strtod_l+0xd4e>
   10baa:	4816      	ldr	r0, [pc, #88]	; (10c04 <_strtod_l+0x3c4>)
   10bac:	f001 fd58 	bl	12660 <nan>
   10bb0:	eeb0 8b40 	vmov.f64	d8, d0
   10bb4:	e001      	b.n	10bba <_strtod_l+0x37a>
   10bb6:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 10bf0 <_strtod_l+0x3b0>
   10bba:	9a07      	ldr	r2, [sp, #28]
   10bbc:	b10a      	cbz	r2, 10bc2 <_strtod_l+0x382>
   10bbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10bc0:	6013      	str	r3, [r2, #0]
   10bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10bc4:	2b00      	cmp	r3, #0
   10bc6:	f43f af2a 	beq.w	10a1e <_strtod_l+0x1de>
   10bca:	eeb1 8b48 	vneg.f64	d8, d8
   10bce:	eeb0 0b48 	vmov.f64	d0, d8
   10bd2:	b017      	add	sp, #92	; 0x5c
   10bd4:	ecbd 8b10 	vpop	{d8-d15}
   10bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10bde:	900b      	str	r0, [sp, #44]	; 0x2c
   10be0:	1c5a      	adds	r2, r3, #1
   10be2:	9211      	str	r2, [sp, #68]	; 0x44
   10be4:	785c      	ldrb	r4, [r3, #1]
   10be6:	46ae      	mov	lr, r5
   10be8:	e6f8      	b.n	109dc <_strtod_l+0x19c>
   10bea:	bf00      	nop
   10bec:	f3af 8000 	nop.w
	...
   10bf8:	20008178 	.word	0x20008178
   10bfc:	20000328 	.word	0x20000328
   10c00:	20001068 	.word	0x20001068
   10c04:	200004ec 	.word	0x200004ec
   10c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10c0a:	1aeb      	subs	r3, r5, r3
   10c0c:	4413      	add	r3, r2
   10c0e:	2b00      	cmp	r3, #0
   10c10:	f340 82b0 	ble.w	11174 <_strtod_l+0x934>
   10c14:	f013 010f 	ands.w	r1, r3, #15
   10c18:	d00a      	beq.n	10c30 <_strtod_l+0x3f0>
   10c1a:	4ac3      	ldr	r2, [pc, #780]	; (10f28 <_strtod_l+0x6e8>)
   10c1c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   10c20:	ed9d 6b04 	vldr	d6, [sp, #16]
   10c24:	ed92 7b00 	vldr	d7, [r2]
   10c28:	ee27 7b06 	vmul.f64	d7, d7, d6
   10c2c:	ed8d 7b04 	vstr	d7, [sp, #16]
   10c30:	f033 020f 	bics.w	r2, r3, #15
   10c34:	f040 8238 	bne.w	110a8 <_strtod_l+0x868>
   10c38:	2300      	movs	r3, #0
   10c3a:	9308      	str	r3, [sp, #32]
   10c3c:	9600      	str	r6, [sp, #0]
   10c3e:	462b      	mov	r3, r5
   10c40:	4672      	mov	r2, lr
   10c42:	4639      	mov	r1, r7
   10c44:	4640      	mov	r0, r8
   10c46:	f002 fb5b 	bl	13300 <__s2b>
   10c4a:	4681      	mov	r9, r0
   10c4c:	2800      	cmp	r0, #0
   10c4e:	f000 82e1 	beq.w	11214 <_strtod_l+0x9d4>
   10c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10c54:	eba3 0b0b 	sub.w	fp, r3, fp
   10c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10c5a:	ed9f eba9 	vldr	d14, [pc, #676]	; 10f00 <_strtod_l+0x6c0>
   10c5e:	2b00      	cmp	r3, #0
   10c60:	ed9f cba9 	vldr	d12, [pc, #676]	; 10f08 <_strtod_l+0x6c8>
   10c64:	ed9f dbaa 	vldr	d13, [pc, #680]	; 10f10 <_strtod_l+0x6d0>
   10c68:	ed9f bbab 	vldr	d11, [pc, #684]	; 10f18 <_strtod_l+0x6d8>
   10c6c:	bfb4      	ite	lt
   10c6e:	465a      	movlt	r2, fp
   10c70:	2200      	movge	r2, #0
   10c72:	f04f 0a00 	mov.w	sl, #0
   10c76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10c7a:	920b      	str	r2, [sp, #44]	; 0x2c
   10c7c:	930c      	str	r3, [sp, #48]	; 0x30
   10c7e:	4654      	mov	r4, sl
   10c80:	f8d9 1004 	ldr.w	r1, [r9, #4]
   10c84:	4640      	mov	r0, r8
   10c86:	f002 fab9 	bl	131fc <_Balloc>
   10c8a:	4606      	mov	r6, r0
   10c8c:	2800      	cmp	r0, #0
   10c8e:	f000 810e 	beq.w	10eae <_strtod_l+0x66e>
   10c92:	f8d9 2010 	ldr.w	r2, [r9, #16]
   10c96:	ed9d 8b04 	vldr	d8, [sp, #16]
   10c9a:	3202      	adds	r2, #2
   10c9c:	0092      	lsls	r2, r2, #2
   10c9e:	f109 010c 	add.w	r1, r9, #12
   10ca2:	300c      	adds	r0, #12
   10ca4:	f7fc fffa 	bl	dc9c <memcpy>
   10ca8:	eeb0 0b48 	vmov.f64	d0, d8
   10cac:	aa14      	add	r2, sp, #80	; 0x50
   10cae:	a913      	add	r1, sp, #76	; 0x4c
   10cb0:	4640      	mov	r0, r8
   10cb2:	f002 fee1 	bl	13a78 <__d2b>
   10cb6:	9012      	str	r0, [sp, #72]	; 0x48
   10cb8:	2800      	cmp	r0, #0
   10cba:	f000 80e4 	beq.w	10e86 <_strtod_l+0x646>
   10cbe:	2101      	movs	r1, #1
   10cc0:	4640      	mov	r0, r8
   10cc2:	f002 fbc5 	bl	13450 <__i2b>
   10cc6:	4604      	mov	r4, r0
   10cc8:	2800      	cmp	r0, #0
   10cca:	f000 80f0 	beq.w	10eae <_strtod_l+0x66e>
   10cce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10cd0:	2a00      	cmp	r2, #0
   10cd2:	f2c0 80de 	blt.w	10e92 <_strtod_l+0x652>
   10cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10cd8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   10cda:	eb02 0b03 	add.w	fp, r2, r3
   10cde:	9b08      	ldr	r3, [sp, #32]
   10ce0:	9d14      	ldr	r5, [sp, #80]	; 0x50
   10ce2:	1ad2      	subs	r2, r2, r3
   10ce4:	442a      	add	r2, r5
   10ce6:	4b91      	ldr	r3, [pc, #580]	; (10f2c <_strtod_l+0x6ec>)
   10ce8:	3a01      	subs	r2, #1
   10cea:	429a      	cmp	r2, r3
   10cec:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
   10cf0:	f280 8098 	bge.w	10e24 <_strtod_l+0x5e4>
   10cf4:	1a99      	subs	r1, r3, r2
   10cf6:	291f      	cmp	r1, #31
   10cf8:	eba5 0501 	sub.w	r5, r5, r1
   10cfc:	f300 80e3 	bgt.w	10ec6 <_strtod_l+0x686>
   10d00:	2201      	movs	r2, #1
   10d02:	fa02 f301 	lsl.w	r3, r2, r1
   10d06:	930d      	str	r3, [sp, #52]	; 0x34
   10d08:	2300      	movs	r3, #0
   10d0a:	930e      	str	r3, [sp, #56]	; 0x38
   10d0c:	442f      	add	r7, r5
   10d0e:	9b08      	ldr	r3, [sp, #32]
   10d10:	445d      	add	r5, fp
   10d12:	45ab      	cmp	fp, r5
   10d14:	465a      	mov	r2, fp
   10d16:	441f      	add	r7, r3
   10d18:	bfa8      	it	ge
   10d1a:	462a      	movge	r2, r5
   10d1c:	42ba      	cmp	r2, r7
   10d1e:	bfa8      	it	ge
   10d20:	463a      	movge	r2, r7
   10d22:	2a00      	cmp	r2, #0
   10d24:	dd03      	ble.n	10d2e <_strtod_l+0x4ee>
   10d26:	1aad      	subs	r5, r5, r2
   10d28:	1abf      	subs	r7, r7, r2
   10d2a:	ebab 0b02 	sub.w	fp, fp, r2
   10d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d30:	2b00      	cmp	r3, #0
   10d32:	f300 8088 	bgt.w	10e46 <_strtod_l+0x606>
   10d36:	2d00      	cmp	r5, #0
   10d38:	f300 809c 	bgt.w	10e74 <_strtod_l+0x634>
   10d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d3e:	2b00      	cmp	r3, #0
   10d40:	f300 80b7 	bgt.w	10eb2 <_strtod_l+0x672>
   10d44:	2f00      	cmp	r7, #0
   10d46:	f300 80a9 	bgt.w	10e9c <_strtod_l+0x65c>
   10d4a:	f1bb 0f00 	cmp.w	fp, #0
   10d4e:	dd08      	ble.n	10d62 <_strtod_l+0x522>
   10d50:	4621      	mov	r1, r4
   10d52:	465a      	mov	r2, fp
   10d54:	4640      	mov	r0, r8
   10d56:	f002 fcb7 	bl	136c8 <__lshift>
   10d5a:	4604      	mov	r4, r0
   10d5c:	2800      	cmp	r0, #0
   10d5e:	f000 80a6 	beq.w	10eae <_strtod_l+0x66e>
   10d62:	9912      	ldr	r1, [sp, #72]	; 0x48
   10d64:	4632      	mov	r2, r6
   10d66:	4640      	mov	r0, r8
   10d68:	f002 fd48 	bl	137fc <__mdiff>
   10d6c:	4682      	mov	sl, r0
   10d6e:	2800      	cmp	r0, #0
   10d70:	f000 809d 	beq.w	10eae <_strtod_l+0x66e>
   10d74:	2300      	movs	r3, #0
   10d76:	68c5      	ldr	r5, [r0, #12]
   10d78:	60c3      	str	r3, [r0, #12]
   10d7a:	4621      	mov	r1, r4
   10d7c:	f002 fd1c 	bl	137b8 <__mcmp>
   10d80:	2800      	cmp	r0, #0
   10d82:	f2c0 83c7 	blt.w	11514 <_strtod_l+0xcd4>
   10d86:	f000 8361 	beq.w	1144c <_strtod_l+0xc0c>
   10d8a:	4621      	mov	r1, r4
   10d8c:	4650      	mov	r0, sl
   10d8e:	f002 fedd 	bl	13b4c <__ratio>
   10d92:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   10d96:	eeb4 0bc7 	vcmpe.f64	d0, d7
   10d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10d9e:	d846      	bhi.n	10e2e <_strtod_l+0x5ee>
   10da0:	2d00      	cmp	r5, #0
   10da2:	f000 80cb 	beq.w	10f3c <_strtod_l+0x6fc>
   10da6:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   10daa:	9805      	ldr	r0, [sp, #20]
   10dac:	4b60      	ldr	r3, [pc, #384]	; (10f30 <_strtod_l+0x6f0>)
   10dae:	2200      	movs	r2, #0
   10db0:	4960      	ldr	r1, [pc, #384]	; (10f34 <_strtod_l+0x6f4>)
   10db2:	f8df c184 	ldr.w	ip, [pc, #388]	; 10f38 <_strtod_l+0x6f8>
   10db6:	ea00 0701 	and.w	r7, r0, r1
   10dba:	4567      	cmp	r7, ip
   10dbc:	f000 80d4 	beq.w	10f68 <_strtod_l+0x728>
   10dc0:	9908      	ldr	r1, [sp, #32]
   10dc2:	b159      	cbz	r1, 10ddc <_strtod_l+0x59c>
   10dc4:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
   10dc8:	d808      	bhi.n	10ddc <_strtod_l+0x59c>
   10dca:	eeb4 9bcb 	vcmpe.f64	d9, d11
   10dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10dd2:	f240 8156 	bls.w	11082 <_strtod_l+0x842>
   10dd6:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   10dda:	1bcb      	subs	r3, r1, r7
   10ddc:	eeb0 0b48 	vmov.f64	d0, d8
   10de0:	ec43 2b1a 	vmov	d10, r2, r3
   10de4:	f002 fdb4 	bl	13950 <__ulp>
   10de8:	eeaa 8b00 	vfma.f64	d8, d10, d0
   10dec:	ed8d 8b04 	vstr	d8, [sp, #16]
   10df0:	ee18 3a90 	vmov	r3, s17
   10df4:	9a08      	ldr	r2, [sp, #32]
   10df6:	b922      	cbnz	r2, 10e02 <_strtod_l+0x5c2>
   10df8:	4a4e      	ldr	r2, [pc, #312]	; (10f34 <_strtod_l+0x6f4>)
   10dfa:	401a      	ands	r2, r3
   10dfc:	4297      	cmp	r7, r2
   10dfe:	f000 80e4 	beq.w	10fca <_strtod_l+0x78a>
   10e02:	9912      	ldr	r1, [sp, #72]	; 0x48
   10e04:	4640      	mov	r0, r8
   10e06:	f002 fa1f 	bl	13248 <_Bfree>
   10e0a:	4631      	mov	r1, r6
   10e0c:	4640      	mov	r0, r8
   10e0e:	f002 fa1b 	bl	13248 <_Bfree>
   10e12:	4621      	mov	r1, r4
   10e14:	4640      	mov	r0, r8
   10e16:	f002 fa17 	bl	13248 <_Bfree>
   10e1a:	4651      	mov	r1, sl
   10e1c:	4640      	mov	r0, r8
   10e1e:	f002 fa13 	bl	13248 <_Bfree>
   10e22:	e72d      	b.n	10c80 <_strtod_l+0x440>
   10e24:	2301      	movs	r3, #1
   10e26:	2100      	movs	r1, #0
   10e28:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
   10e2c:	e76e      	b.n	10d0c <_strtod_l+0x4cc>
   10e2e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   10e32:	ee20 9b09 	vmul.f64	d9, d0, d9
   10e36:	2d00      	cmp	r5, #0
   10e38:	d15f      	bne.n	10efa <_strtod_l+0x6ba>
   10e3a:	eeb1 7b49 	vneg.f64	d7, d9
   10e3e:	9805      	ldr	r0, [sp, #20]
   10e40:	ec53 2b17 	vmov	r2, r3, d7
   10e44:	e7b4      	b.n	10db0 <_strtod_l+0x570>
   10e46:	4621      	mov	r1, r4
   10e48:	461a      	mov	r2, r3
   10e4a:	4640      	mov	r0, r8
   10e4c:	f002 fbdc 	bl	13608 <__pow5mult>
   10e50:	4604      	mov	r4, r0
   10e52:	b360      	cbz	r0, 10eae <_strtod_l+0x66e>
   10e54:	4601      	mov	r1, r0
   10e56:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10e58:	4640      	mov	r0, r8
   10e5a:	f002 fb27 	bl	134ac <__multiply>
   10e5e:	b330      	cbz	r0, 10eae <_strtod_l+0x66e>
   10e60:	900f      	str	r0, [sp, #60]	; 0x3c
   10e62:	9912      	ldr	r1, [sp, #72]	; 0x48
   10e64:	4640      	mov	r0, r8
   10e66:	f002 f9ef 	bl	13248 <_Bfree>
   10e6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10e6c:	9212      	str	r2, [sp, #72]	; 0x48
   10e6e:	2d00      	cmp	r5, #0
   10e70:	f77f af64 	ble.w	10d3c <_strtod_l+0x4fc>
   10e74:	9912      	ldr	r1, [sp, #72]	; 0x48
   10e76:	462a      	mov	r2, r5
   10e78:	4640      	mov	r0, r8
   10e7a:	f002 fc25 	bl	136c8 <__lshift>
   10e7e:	9012      	str	r0, [sp, #72]	; 0x48
   10e80:	2800      	cmp	r0, #0
   10e82:	f47f af5b 	bne.w	10d3c <_strtod_l+0x4fc>
   10e86:	2322      	movs	r3, #34	; 0x22
   10e88:	ed9f 8b25 	vldr	d8, [pc, #148]	; 10f20 <_strtod_l+0x6e0>
   10e8c:	f8c8 3000 	str.w	r3, [r8]
   10e90:	e0bc      	b.n	1100c <_strtod_l+0x7cc>
   10e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10e94:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   10e98:	1a9f      	subs	r7, r3, r2
   10e9a:	e720      	b.n	10cde <_strtod_l+0x49e>
   10e9c:	4631      	mov	r1, r6
   10e9e:	463a      	mov	r2, r7
   10ea0:	4640      	mov	r0, r8
   10ea2:	f002 fc11 	bl	136c8 <__lshift>
   10ea6:	4606      	mov	r6, r0
   10ea8:	2800      	cmp	r0, #0
   10eaa:	f47f af4e 	bne.w	10d4a <_strtod_l+0x50a>
   10eae:	9812      	ldr	r0, [sp, #72]	; 0x48
   10eb0:	e7e9      	b.n	10e86 <_strtod_l+0x646>
   10eb2:	4631      	mov	r1, r6
   10eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10eb6:	4640      	mov	r0, r8
   10eb8:	f002 fba6 	bl	13608 <__pow5mult>
   10ebc:	4606      	mov	r6, r0
   10ebe:	2800      	cmp	r0, #0
   10ec0:	f47f af40 	bne.w	10d44 <_strtod_l+0x504>
   10ec4:	e7f3      	b.n	10eae <_strtod_l+0x66e>
   10ec6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
   10eca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   10ece:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
   10ed2:	2101      	movs	r1, #1
   10ed4:	32e2      	adds	r2, #226	; 0xe2
   10ed6:	fa01 f302 	lsl.w	r3, r1, r2
   10eda:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   10ede:	e715      	b.n	10d0c <_strtod_l+0x4cc>
   10ee0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   10ee4:	f04f 0b00 	mov.w	fp, #0
   10ee8:	e5c0      	b.n	10a6c <_strtod_l+0x22c>
   10eea:	2301      	movs	r3, #1
   10eec:	930a      	str	r3, [sp, #40]	; 0x28
   10eee:	f10a 0302 	add.w	r3, sl, #2
   10ef2:	9311      	str	r3, [sp, #68]	; 0x44
   10ef4:	f89a 4002 	ldrb.w	r4, [sl, #2]
   10ef8:	e602      	b.n	10b00 <_strtod_l+0x2c0>
   10efa:	eeb0 7b49 	vmov.f64	d7, d9
   10efe:	e79e      	b.n	10e3e <_strtod_l+0x5fe>
   10f00:	94a03595 	.word	0x94a03595
   10f04:	3fcfffff 	.word	0x3fcfffff
   10f08:	94a03595 	.word	0x94a03595
   10f0c:	3fdfffff 	.word	0x3fdfffff
   10f10:	35afe535 	.word	0x35afe535
   10f14:	3fe00000 	.word	0x3fe00000
   10f18:	ffc00000 	.word	0xffc00000
   10f1c:	41dfffff 	.word	0x41dfffff
   10f20:	00000000 	.word	0x00000000
   10f24:	7ff00000 	.word	0x7ff00000
   10f28:	20000328 	.word	0x20000328
   10f2c:	fffffc02 	.word	0xfffffc02
   10f30:	3ff00000 	.word	0x3ff00000
   10f34:	7ff00000 	.word	0x7ff00000
   10f38:	7fe00000 	.word	0x7fe00000
   10f3c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10f40:	2900      	cmp	r1, #0
   10f42:	f000 8085 	beq.w	11050 <_strtod_l+0x810>
   10f46:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10f4a:	2901      	cmp	r1, #1
   10f4c:	f000 81d8 	beq.w	11300 <_strtod_l+0xac0>
   10f50:	4610      	mov	r0, r2
   10f52:	4bb7      	ldr	r3, [pc, #732]	; (11230 <_strtod_l+0x9f0>)
   10f54:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   10f58:	2200      	movs	r2, #0
   10f5a:	e729      	b.n	10db0 <_strtod_l+0x570>
   10f5c:	2c65      	cmp	r4, #101	; 0x65
   10f5e:	f04f 0c01 	mov.w	ip, #1
   10f62:	f43f adbe 	beq.w	10ae2 <_strtod_l+0x2a2>
   10f66:	e54c      	b.n	10a02 <_strtod_l+0x1c2>
   10f68:	ec43 2b1a 	vmov	d10, r2, r3
   10f6c:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
   10f70:	9305      	str	r3, [sp, #20]
   10f72:	ed9d fb04 	vldr	d15, [sp, #16]
   10f76:	eeb0 0b4f 	vmov.f64	d0, d15
   10f7a:	f002 fce9 	bl	13950 <__ulp>
   10f7e:	49ad      	ldr	r1, [pc, #692]	; (11234 <_strtod_l+0x9f4>)
   10f80:	eeaa fb00 	vfma.f64	d15, d10, d0
   10f84:	ee1f 3a90 	vmov	r3, s31
   10f88:	4aab      	ldr	r2, [pc, #684]	; (11238 <_strtod_l+0x9f8>)
   10f8a:	4019      	ands	r1, r3
   10f8c:	4291      	cmp	r1, r2
   10f8e:	ed8d fb04 	vstr	d15, [sp, #16]
   10f92:	d972      	bls.n	1107a <_strtod_l+0x83a>
   10f94:	4ba9      	ldr	r3, [pc, #676]	; (1123c <_strtod_l+0x9fc>)
   10f96:	ee18 2a90 	vmov	r2, s17
   10f9a:	429a      	cmp	r2, r3
   10f9c:	d103      	bne.n	10fa6 <_strtod_l+0x766>
   10f9e:	ee18 3a10 	vmov	r3, s16
   10fa2:	3301      	adds	r3, #1
   10fa4:	d083      	beq.n	10eae <_strtod_l+0x66e>
   10fa6:	4aa5      	ldr	r2, [pc, #660]	; (1123c <_strtod_l+0x9fc>)
   10fa8:	f04f 33ff 	mov.w	r3, #4294967295
   10fac:	e9cd 3204 	strd	r3, r2, [sp, #16]
   10fb0:	e727      	b.n	10e02 <_strtod_l+0x5c2>
   10fb2:	2300      	movs	r3, #0
   10fb4:	930a      	str	r3, [sp, #40]	; 0x28
   10fb6:	e79a      	b.n	10eee <_strtod_l+0x6ae>
   10fb8:	2c65      	cmp	r4, #101	; 0x65
   10fba:	f000 80d0 	beq.w	1115e <_strtod_l+0x91e>
   10fbe:	2c45      	cmp	r4, #69	; 0x45
   10fc0:	f000 80cd 	beq.w	1115e <_strtod_l+0x91e>
   10fc4:	f04f 0c01 	mov.w	ip, #1
   10fc8:	e5d1      	b.n	10b6e <_strtod_l+0x32e>
   10fca:	ec51 0b19 	vmov	r0, r1, d9
   10fce:	930d      	str	r3, [sp, #52]	; 0x34
   10fd0:	f009 fcc8 	bl	1a964 <__aeabi_d2lz>
   10fd4:	f009 fc98 	bl	1a908 <__aeabi_l2d>
   10fd8:	9b04      	ldr	r3, [sp, #16]
   10fda:	431d      	orrs	r5, r3
   10fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10fde:	ec41 0b17 	vmov	d7, r0, r1
   10fe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   10fe6:	431d      	orrs	r5, r3
   10fe8:	ee39 9b47 	vsub.f64	d9, d9, d7
   10fec:	f000 80a0 	beq.w	11130 <_strtod_l+0x8f0>
   10ff0:	eeb4 9bcc 	vcmpe.f64	d9, d12
   10ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10ff8:	d405      	bmi.n	11006 <_strtod_l+0x7c6>
   10ffa:	eeb4 9bcd 	vcmpe.f64	d9, d13
   10ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11002:	f77f aefe 	ble.w	10e02 <_strtod_l+0x5c2>
   11006:	ed9d 8b04 	vldr	d8, [sp, #16]
   1100a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1100c:	4601      	mov	r1, r0
   1100e:	4640      	mov	r0, r8
   11010:	f002 f91a 	bl	13248 <_Bfree>
   11014:	4631      	mov	r1, r6
   11016:	4640      	mov	r0, r8
   11018:	f002 f916 	bl	13248 <_Bfree>
   1101c:	4621      	mov	r1, r4
   1101e:	4640      	mov	r0, r8
   11020:	f002 f912 	bl	13248 <_Bfree>
   11024:	4649      	mov	r1, r9
   11026:	4640      	mov	r0, r8
   11028:	f002 f90e 	bl	13248 <_Bfree>
   1102c:	4651      	mov	r1, sl
   1102e:	4640      	mov	r0, r8
   11030:	f002 f90a 	bl	13248 <_Bfree>
   11034:	e5c1      	b.n	10bba <_strtod_l+0x37a>
   11036:	2201      	movs	r2, #1
   11038:	9209      	str	r2, [sp, #36]	; 0x24
   1103a:	1c79      	adds	r1, r7, #1
   1103c:	9111      	str	r1, [sp, #68]	; 0x44
   1103e:	787a      	ldrb	r2, [r7, #1]
   11040:	2a00      	cmp	r2, #0
   11042:	f43f ace5 	beq.w	10a10 <_strtod_l+0x1d0>
   11046:	460f      	mov	r7, r1
   11048:	e470      	b.n	1092c <_strtod_l+0xec>
   1104a:	2200      	movs	r2, #0
   1104c:	9209      	str	r2, [sp, #36]	; 0x24
   1104e:	e7f4      	b.n	1103a <_strtod_l+0x7fa>
   11050:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11054:	4610      	mov	r0, r2
   11056:	2b00      	cmp	r3, #0
   11058:	f47f af7b 	bne.w	10f52 <_strtod_l+0x712>
   1105c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   11060:	eeb4 0bc7 	vcmpe.f64	d0, d7
   11064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11068:	f100 81d3 	bmi.w	11412 <_strtod_l+0xbd2>
   1106c:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   11070:	ee20 9b09 	vmul.f64	d9, d0, d9
   11074:	eeb1 7b49 	vneg.f64	d7, d9
   11078:	e6e2      	b.n	10e40 <_strtod_l+0x600>
   1107a:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
   1107e:	9305      	str	r3, [sp, #20]
   11080:	e6b8      	b.n	10df4 <_strtod_l+0x5b4>
   11082:	eebc 9bc9 	vcvt.u32.f64	s18, d9
   11086:	ee19 3a10 	vmov	r3, s18
   1108a:	2b01      	cmp	r3, #1
   1108c:	bf38      	it	cc
   1108e:	2301      	movcc	r3, #1
   11090:	ee09 3a10 	vmov	s18, r3
   11094:	eeb8 9b49 	vcvt.f64.u32	d9, s18
   11098:	2d00      	cmp	r5, #0
   1109a:	f040 813e 	bne.w	1131a <_strtod_l+0xada>
   1109e:	eeb1 7b49 	vneg.f64	d7, d9
   110a2:	ec53 2b17 	vmov	r2, r3, d7
   110a6:	e696      	b.n	10dd6 <_strtod_l+0x596>
   110a8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   110ac:	f300 80b2 	bgt.w	11214 <_strtod_l+0x9d4>
   110b0:	2a10      	cmp	r2, #16
   110b2:	ea4f 1322 	mov.w	r3, r2, asr #4
   110b6:	f340 8286 	ble.w	115c6 <_strtod_l+0xd86>
   110ba:	4c61      	ldr	r4, [pc, #388]	; (11240 <_strtod_l+0xa00>)
   110bc:	ed9d 7b04 	vldr	d7, [sp, #16]
   110c0:	2000      	movs	r0, #0
   110c2:	4622      	mov	r2, r4
   110c4:	4601      	mov	r1, r0
   110c6:	f013 0f01 	tst.w	r3, #1
   110ca:	f101 0101 	add.w	r1, r1, #1
   110ce:	ea4f 0363 	mov.w	r3, r3, asr #1
   110d2:	d004      	beq.n	110de <_strtod_l+0x89e>
   110d4:	ed92 6b00 	vldr	d6, [r2]
   110d8:	2001      	movs	r0, #1
   110da:	ee27 7b06 	vmul.f64	d7, d7, d6
   110de:	2b01      	cmp	r3, #1
   110e0:	f102 0208 	add.w	r2, r2, #8
   110e4:	d1ef      	bne.n	110c6 <_strtod_l+0x886>
   110e6:	b108      	cbz	r0, 110ec <_strtod_l+0x8ac>
   110e8:	ed8d 7b04 	vstr	d7, [sp, #16]
   110ec:	9b05      	ldr	r3, [sp, #20]
   110ee:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   110f2:	9305      	str	r3, [sp, #20]
   110f4:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   110f8:	ed9d 6b04 	vldr	d6, [sp, #16]
   110fc:	ed94 7b00 	vldr	d7, [r4]
   11100:	4b4c      	ldr	r3, [pc, #304]	; (11234 <_strtod_l+0x9f4>)
   11102:	ee27 7b06 	vmul.f64	d7, d7, d6
   11106:	ee17 2a90 	vmov	r2, s15
   1110a:	494e      	ldr	r1, [pc, #312]	; (11244 <_strtod_l+0xa04>)
   1110c:	4013      	ands	r3, r2
   1110e:	428b      	cmp	r3, r1
   11110:	ed8d 7b04 	vstr	d7, [sp, #16]
   11114:	d87e      	bhi.n	11214 <_strtod_l+0x9d4>
   11116:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1111a:	428b      	cmp	r3, r1
   1111c:	f240 81d6 	bls.w	114cc <_strtod_l+0xc8c>
   11120:	4c46      	ldr	r4, [pc, #280]	; (1123c <_strtod_l+0x9fc>)
   11122:	f04f 33ff 	mov.w	r3, #4294967295
   11126:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1112a:	2300      	movs	r3, #0
   1112c:	9308      	str	r3, [sp, #32]
   1112e:	e585      	b.n	10c3c <_strtod_l+0x3fc>
   11130:	eeb4 9bce 	vcmpe.f64	d9, d14
   11134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11138:	f57f ae63 	bpl.w	10e02 <_strtod_l+0x5c2>
   1113c:	e763      	b.n	11006 <_strtod_l+0x7c6>
   1113e:	3216      	adds	r2, #22
   11140:	f6ff ad62 	blt.w	10c08 <_strtod_l+0x3c8>
   11144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11146:	eba3 0b0b 	sub.w	fp, r3, fp
   1114a:	4b3f      	ldr	r3, [pc, #252]	; (11248 <_strtod_l+0xa08>)
   1114c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   11150:	ed93 7b00 	vldr	d7, [r3]
   11154:	ed9d 6b04 	vldr	d6, [sp, #16]
   11158:	ee86 8b07 	vdiv.f64	d8, d6, d7
   1115c:	e52d      	b.n	10bba <_strtod_l+0x37a>
   1115e:	f04f 0e00 	mov.w	lr, #0
   11162:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   11166:	f04f 0c01 	mov.w	ip, #1
   1116a:	e44e      	b.n	10a0a <_strtod_l+0x1ca>
   1116c:	2c6e      	cmp	r4, #110	; 0x6e
   1116e:	f43f ad10 	beq.w	10b92 <_strtod_l+0x352>
   11172:	e44d      	b.n	10a10 <_strtod_l+0x1d0>
   11174:	f43f ad60 	beq.w	10c38 <_strtod_l+0x3f8>
   11178:	425b      	negs	r3, r3
   1117a:	f013 010f 	ands.w	r1, r3, #15
   1117e:	d00a      	beq.n	11196 <_strtod_l+0x956>
   11180:	4a31      	ldr	r2, [pc, #196]	; (11248 <_strtod_l+0xa08>)
   11182:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11186:	ed9d 6b04 	vldr	d6, [sp, #16]
   1118a:	ed92 7b00 	vldr	d7, [r2]
   1118e:	ee86 7b07 	vdiv.f64	d7, d6, d7
   11192:	ed8d 7b04 	vstr	d7, [sp, #16]
   11196:	111b      	asrs	r3, r3, #4
   11198:	f43f ad4e 	beq.w	10c38 <_strtod_l+0x3f8>
   1119c:	2b1f      	cmp	r3, #31
   1119e:	dc33      	bgt.n	11208 <_strtod_l+0x9c8>
   111a0:	f013 0210 	ands.w	r2, r3, #16
   111a4:	bf18      	it	ne
   111a6:	226a      	movne	r2, #106	; 0x6a
   111a8:	ed9d 7b04 	vldr	d7, [sp, #16]
   111ac:	9208      	str	r2, [sp, #32]
   111ae:	4a27      	ldr	r2, [pc, #156]	; (1124c <_strtod_l+0xa0c>)
   111b0:	2100      	movs	r1, #0
   111b2:	07d8      	lsls	r0, r3, #31
   111b4:	d504      	bpl.n	111c0 <_strtod_l+0x980>
   111b6:	ed92 6b00 	vldr	d6, [r2]
   111ba:	2101      	movs	r1, #1
   111bc:	ee27 7b06 	vmul.f64	d7, d7, d6
   111c0:	105b      	asrs	r3, r3, #1
   111c2:	f102 0208 	add.w	r2, r2, #8
   111c6:	d1f4      	bne.n	111b2 <_strtod_l+0x972>
   111c8:	b109      	cbz	r1, 111ce <_strtod_l+0x98e>
   111ca:	ed8d 7b04 	vstr	d7, [sp, #16]
   111ce:	9b08      	ldr	r3, [sp, #32]
   111d0:	b193      	cbz	r3, 111f8 <_strtod_l+0x9b8>
   111d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   111d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
   111da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   111de:	2b00      	cmp	r3, #0
   111e0:	dd0a      	ble.n	111f8 <_strtod_l+0x9b8>
   111e2:	2b1f      	cmp	r3, #31
   111e4:	f340 822f 	ble.w	11646 <_strtod_l+0xe06>
   111e8:	2000      	movs	r0, #0
   111ea:	2b34      	cmp	r3, #52	; 0x34
   111ec:	9004      	str	r0, [sp, #16]
   111ee:	f340 8240 	ble.w	11672 <_strtod_l+0xe32>
   111f2:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   111f6:	9305      	str	r3, [sp, #20]
   111f8:	ed9d 7b04 	vldr	d7, [sp, #16]
   111fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
   11200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11204:	f47f ad1a 	bne.w	10c3c <_strtod_l+0x3fc>
   11208:	2322      	movs	r3, #34	; 0x22
   1120a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 11220 <_strtod_l+0x9e0>
   1120e:	f8c8 3000 	str.w	r3, [r8]
   11212:	e4d2      	b.n	10bba <_strtod_l+0x37a>
   11214:	2322      	movs	r3, #34	; 0x22
   11216:	ed9f 8b04 	vldr	d8, [pc, #16]	; 11228 <_strtod_l+0x9e8>
   1121a:	f8c8 3000 	str.w	r3, [r8]
   1121e:	e4cc      	b.n	10bba <_strtod_l+0x37a>
	...
   1122c:	7ff00000 	.word	0x7ff00000
   11230:	bff00000 	.word	0xbff00000
   11234:	7ff00000 	.word	0x7ff00000
   11238:	7c9fffff 	.word	0x7c9fffff
   1123c:	7fefffff 	.word	0x7fefffff
   11240:	20000300 	.word	0x20000300
   11244:	7ca00000 	.word	0x7ca00000
   11248:	20000328 	.word	0x20000328
   1124c:	200003f0 	.word	0x200003f0
   11250:	9302      	str	r3, [sp, #8]
   11252:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11254:	9301      	str	r3, [sp, #4]
   11256:	ab12      	add	r3, sp, #72	; 0x48
   11258:	9300      	str	r3, [sp, #0]
   1125a:	4aa7      	ldr	r2, [pc, #668]	; (114f8 <_strtod_l+0xcb8>)
   1125c:	ab13      	add	r3, sp, #76	; 0x4c
   1125e:	a911      	add	r1, sp, #68	; 0x44
   11260:	4640      	mov	r0, r8
   11262:	f001 fbf7 	bl	12a54 <__gethex>
   11266:	f010 050f 	ands.w	r5, r0, #15
   1126a:	4604      	mov	r4, r0
   1126c:	f43f aca3 	beq.w	10bb6 <_strtod_l+0x376>
   11270:	2d06      	cmp	r5, #6
   11272:	d174      	bne.n	1135e <_strtod_l+0xb1e>
   11274:	9b07      	ldr	r3, [sp, #28]
   11276:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 114e0 <_strtod_l+0xca0>
   1127a:	3701      	adds	r7, #1
   1127c:	2b00      	cmp	r3, #0
   1127e:	f43f abce 	beq.w	10a1e <_strtod_l+0x1de>
   11282:	601f      	str	r7, [r3, #0]
   11284:	f7ff bbcb 	b.w	10a1e <_strtod_l+0x1de>
   11288:	ed9d 8b04 	vldr	d8, [sp, #16]
   1128c:	e495      	b.n	10bba <_strtod_l+0x37a>
   1128e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11290:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   11294:	4403      	add	r3, r0
   11296:	930b      	str	r3, [sp, #44]	; 0x2c
   11298:	2801      	cmp	r0, #1
   1129a:	f105 0301 	add.w	r3, r5, #1
   1129e:	461a      	mov	r2, r3
   112a0:	d014      	beq.n	112cc <_strtod_l+0xa8c>
   112a2:	4428      	add	r0, r5
   112a4:	1e44      	subs	r4, r0, #1
   112a6:	e003      	b.n	112b0 <_strtod_l+0xa70>
   112a8:	0046      	lsls	r6, r0, #1
   112aa:	429c      	cmp	r4, r3
   112ac:	d00d      	beq.n	112ca <_strtod_l+0xa8a>
   112ae:	3301      	adds	r3, #1
   112b0:	462a      	mov	r2, r5
   112b2:	2a08      	cmp	r2, #8
   112b4:	461d      	mov	r5, r3
   112b6:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   112ba:	d9f5      	bls.n	112a8 <_strtod_l+0xa68>
   112bc:	2b10      	cmp	r3, #16
   112be:	bfdc      	itt	le
   112c0:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   112c4:	ea4f 0949 	movle.w	r9, r9, lsl #1
   112c8:	e7ef      	b.n	112aa <_strtod_l+0xa6a>
   112ca:	3202      	adds	r2, #2
   112cc:	2d08      	cmp	r5, #8
   112ce:	dc3c      	bgt.n	1134a <_strtod_l+0xb0a>
   112d0:	4615      	mov	r5, r2
   112d2:	f7ff bb79 	b.w	109c8 <_strtod_l+0x188>
   112d6:	4989      	ldr	r1, [pc, #548]	; (114fc <_strtod_l+0xcbc>)
   112d8:	2201      	movs	r2, #1
   112da:	4638      	mov	r0, r7
   112dc:	f000 fe14 	bl	11f08 <strncmp>
   112e0:	2800      	cmp	r0, #0
   112e2:	f000 8082 	beq.w	113ea <_strtod_l+0xbaa>
   112e6:	f04f 0e00 	mov.w	lr, #0
   112ea:	46f1      	mov	r9, lr
   112ec:	4676      	mov	r6, lr
   112ee:	4675      	mov	r5, lr
   112f0:	f7ff bbb5 	b.w	10a5e <_strtod_l+0x21e>
   112f4:	f644 631f 	movw	r3, #19999	; 0x4e1f
   112f8:	459b      	cmp	fp, r3
   112fa:	bfa8      	it	ge
   112fc:	469b      	movge	fp, r3
   112fe:	e42f      	b.n	10b60 <_strtod_l+0x320>
   11300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11304:	4618      	mov	r0, r3
   11306:	2b00      	cmp	r3, #0
   11308:	f47f ae23 	bne.w	10f52 <_strtod_l+0x712>
   1130c:	2322      	movs	r3, #34	; 0x22
   1130e:	ed9f 8b74 	vldr	d8, [pc, #464]	; 114e0 <_strtod_l+0xca0>
   11312:	9812      	ldr	r0, [sp, #72]	; 0x48
   11314:	f8c8 3000 	str.w	r3, [r8]
   11318:	e678      	b.n	1100c <_strtod_l+0x7cc>
   1131a:	eeb0 7b49 	vmov.f64	d7, d9
   1131e:	e6c0      	b.n	110a2 <_strtod_l+0x862>
   11320:	4977      	ldr	r1, [pc, #476]	; (11500 <_strtod_l+0xcc0>)
   11322:	a811      	add	r0, sp, #68	; 0x44
   11324:	f001 fe60 	bl	12fe8 <__match>
   11328:	2800      	cmp	r0, #0
   1132a:	f43f ab71 	beq.w	10a10 <_strtod_l+0x1d0>
   1132e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11330:	4974      	ldr	r1, [pc, #464]	; (11504 <_strtod_l+0xcc4>)
   11332:	3b01      	subs	r3, #1
   11334:	a811      	add	r0, sp, #68	; 0x44
   11336:	9311      	str	r3, [sp, #68]	; 0x44
   11338:	f001 fe56 	bl	12fe8 <__match>
   1133c:	b910      	cbnz	r0, 11344 <_strtod_l+0xb04>
   1133e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11340:	3301      	adds	r3, #1
   11342:	9311      	str	r3, [sp, #68]	; 0x44
   11344:	ed9f 8b68 	vldr	d8, [pc, #416]	; 114e8 <_strtod_l+0xca8>
   11348:	e437      	b.n	10bba <_strtod_l+0x37a>
   1134a:	2a10      	cmp	r2, #16
   1134c:	bfdc      	itt	le
   1134e:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   11352:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   11356:	4615      	mov	r5, r2
   11358:	2000      	movs	r0, #0
   1135a:	f7ff bb3a 	b.w	109d2 <_strtod_l+0x192>
   1135e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11360:	b13a      	cbz	r2, 11372 <_strtod_l+0xb32>
   11362:	2135      	movs	r1, #53	; 0x35
   11364:	a814      	add	r0, sp, #80	; 0x50
   11366:	f002 fc23 	bl	13bb0 <__copybits>
   1136a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1136c:	4640      	mov	r0, r8
   1136e:	f001 ff6b 	bl	13248 <_Bfree>
   11372:	3d01      	subs	r5, #1
   11374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11376:	2d04      	cmp	r5, #4
   11378:	f200 818f 	bhi.w	1169a <_strtod_l+0xe5a>
   1137c:	e8df f005 	tbb	[pc, r5]
   11380:	1f2a2d03 	.word	0x1f2a2d03
   11384:	03          	.byte	0x03
   11385:	00          	.byte	0x00
   11386:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11388:	9204      	str	r2, [sp, #16]
   1138a:	f203 4233 	addw	r2, r3, #1075	; 0x433
   1138e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11390:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   11394:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   11398:	9305      	str	r3, [sp, #20]
   1139a:	05e5      	lsls	r5, r4, #23
   1139c:	d502      	bpl.n	113a4 <_strtod_l+0xb64>
   1139e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   113a2:	9305      	str	r3, [sp, #20]
   113a4:	4a58      	ldr	r2, [pc, #352]	; (11508 <_strtod_l+0xcc8>)
   113a6:	401a      	ands	r2, r3
   113a8:	ed9d 8b04 	vldr	d8, [sp, #16]
   113ac:	2a00      	cmp	r2, #0
   113ae:	f47f ac04 	bne.w	10bba <_strtod_l+0x37a>
   113b2:	f000 fe8d 	bl	120d0 <__errno>
   113b6:	2322      	movs	r3, #34	; 0x22
   113b8:	6003      	str	r3, [r0, #0]
   113ba:	f7ff bbfe 	b.w	10bba <_strtod_l+0x37a>
   113be:	f04f 33ff 	mov.w	r3, #4294967295
   113c2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   113c6:	e9cd 3604 	strd	r3, r6, [sp, #16]
   113ca:	05e3      	lsls	r3, r4, #23
   113cc:	f57f af5c 	bpl.w	11288 <_strtod_l+0xa48>
   113d0:	9b05      	ldr	r3, [sp, #20]
   113d2:	e7e4      	b.n	1139e <_strtod_l+0xb5e>
   113d4:	4b4c      	ldr	r3, [pc, #304]	; (11508 <_strtod_l+0xcc8>)
   113d6:	9305      	str	r3, [sp, #20]
   113d8:	e7f7      	b.n	113ca <_strtod_l+0xb8a>
   113da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   113dc:	9304      	str	r3, [sp, #16]
   113de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   113e0:	9305      	str	r3, [sp, #20]
   113e2:	e7da      	b.n	1139a <_strtod_l+0xb5a>
   113e4:	2000      	movs	r0, #0
   113e6:	f7ff bae1 	b.w	109ac <_strtod_l+0x16c>
   113ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   113ec:	461a      	mov	r2, r3
   113ee:	3301      	adds	r3, #1
   113f0:	9311      	str	r3, [sp, #68]	; 0x44
   113f2:	7854      	ldrb	r4, [r2, #1]
   113f4:	4606      	mov	r6, r0
   113f6:	4681      	mov	r9, r0
   113f8:	f7ff bacd 	b.w	10996 <_strtod_l+0x156>
   113fc:	4b43      	ldr	r3, [pc, #268]	; (1150c <_strtod_l+0xccc>)
   113fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11402:	ed93 8b00 	vldr	d8, [r3]
   11406:	ed9d 7b04 	vldr	d7, [sp, #16]
   1140a:	ee28 8b07 	vmul.f64	d8, d8, d7
   1140e:	f7ff bbd4 	b.w	10bba <_strtod_l+0x37a>
   11412:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   11416:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1141a:	e511      	b.n	10e40 <_strtod_l+0x600>
   1141c:	46ae      	mov	lr, r5
   1141e:	900b      	str	r0, [sp, #44]	; 0x2c
   11420:	f7ff badc 	b.w	109dc <_strtod_l+0x19c>
   11424:	4b39      	ldr	r3, [pc, #228]	; (1150c <_strtod_l+0xccc>)
   11426:	f1c5 050f 	rsb	r5, r5, #15
   1142a:	1b4a      	subs	r2, r1, r5
   1142c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   11430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11434:	ed95 8b00 	vldr	d8, [r5]
   11438:	ed93 7b00 	vldr	d7, [r3]
   1143c:	ed9d 6b04 	vldr	d6, [sp, #16]
   11440:	ee28 8b06 	vmul.f64	d8, d8, d6
   11444:	ee28 8b07 	vmul.f64	d8, d8, d7
   11448:	f7ff bbb7 	b.w	10bba <_strtod_l+0x37a>
   1144c:	2d00      	cmp	r5, #0
   1144e:	f000 8095 	beq.w	1157c <_strtod_l+0xd3c>
   11452:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   11456:	4b2e      	ldr	r3, [pc, #184]	; (11510 <_strtod_l+0xcd0>)
   11458:	f3cc 0113 	ubfx	r1, ip, #0, #20
   1145c:	4299      	cmp	r1, r3
   1145e:	4662      	mov	r2, ip
   11460:	f000 80d2 	beq.w	11608 <_strtod_l+0xdc8>
   11464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11466:	2b00      	cmp	r3, #0
   11468:	f000 80a5 	beq.w	115b6 <_strtod_l+0xd76>
   1146c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11470:	4213      	tst	r3, r2
   11472:	4617      	mov	r7, r2
   11474:	d01a      	beq.n	114ac <_strtod_l+0xc6c>
   11476:	eeb0 0b48 	vmov.f64	d0, d8
   1147a:	2d00      	cmp	r5, #0
   1147c:	f000 80a6 	beq.w	115cc <_strtod_l+0xd8c>
   11480:	f002 fa66 	bl	13950 <__ulp>
   11484:	9b08      	ldr	r3, [sp, #32]
   11486:	b17b      	cbz	r3, 114a8 <_strtod_l+0xc68>
   11488:	f3c7 530a 	ubfx	r3, r7, #20, #11
   1148c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11490:	2b00      	cmp	r3, #0
   11492:	dd09      	ble.n	114a8 <_strtod_l+0xc68>
   11494:	051b      	lsls	r3, r3, #20
   11496:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   1149a:	2000      	movs	r0, #0
   1149c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   114a0:	ec41 0b17 	vmov	d7, r0, r1
   114a4:	ee20 0b07 	vmul.f64	d0, d0, d7
   114a8:	ee38 8b00 	vadd.f64	d8, d8, d0
   114ac:	9b08      	ldr	r3, [sp, #32]
   114ae:	b15b      	cbz	r3, 114c8 <_strtod_l+0xc88>
   114b0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 114f0 <_strtod_l+0xcb0>
   114b4:	4b14      	ldr	r3, [pc, #80]	; (11508 <_strtod_l+0xcc8>)
   114b6:	ee28 8b07 	vmul.f64	d8, d8, d7
   114ba:	ee18 2a90 	vmov	r2, s17
   114be:	4013      	ands	r3, r2
   114c0:	b913      	cbnz	r3, 114c8 <_strtod_l+0xc88>
   114c2:	2322      	movs	r3, #34	; 0x22
   114c4:	f8c8 3000 	str.w	r3, [r8]
   114c8:	9812      	ldr	r0, [sp, #72]	; 0x48
   114ca:	e59f      	b.n	1100c <_strtod_l+0x7cc>
   114cc:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   114d0:	9305      	str	r3, [sp, #20]
   114d2:	2300      	movs	r3, #0
   114d4:	9308      	str	r3, [sp, #32]
   114d6:	f7ff bbb1 	b.w	10c3c <_strtod_l+0x3fc>
   114da:	bf00      	nop
   114dc:	f3af 8000 	nop.w
	...
   114ec:	7ff00000 	.word	0x7ff00000
   114f0:	00000000 	.word	0x00000000
   114f4:	39500000 	.word	0x39500000
   114f8:	20007e58 	.word	0x20007e58
   114fc:	20008178 	.word	0x20008178
   11500:	2000105c 	.word	0x2000105c
   11504:	20001060 	.word	0x20001060
   11508:	7ff00000 	.word	0x7ff00000
   1150c:	20000328 	.word	0x20000328
   11510:	000fffff 	.word	0x000fffff
   11514:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11518:	430d      	orrs	r5, r1
   1151a:	d1c7      	bne.n	114ac <_strtod_l+0xc6c>
   1151c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11520:	4617      	mov	r7, r2
   11522:	2b00      	cmp	r3, #0
   11524:	d1c2      	bne.n	114ac <_strtod_l+0xc6c>
   11526:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1152a:	0d1b      	lsrs	r3, r3, #20
   1152c:	051b      	lsls	r3, r3, #20
   1152e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11532:	d9bb      	bls.n	114ac <_strtod_l+0xc6c>
   11534:	f8da 3014 	ldr.w	r3, [sl, #20]
   11538:	b91b      	cbnz	r3, 11542 <_strtod_l+0xd02>
   1153a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1153e:	2b01      	cmp	r3, #1
   11540:	ddb4      	ble.n	114ac <_strtod_l+0xc6c>
   11542:	4651      	mov	r1, sl
   11544:	2201      	movs	r2, #1
   11546:	4640      	mov	r0, r8
   11548:	f002 f8be 	bl	136c8 <__lshift>
   1154c:	4621      	mov	r1, r4
   1154e:	4682      	mov	sl, r0
   11550:	f002 f932 	bl	137b8 <__mcmp>
   11554:	2800      	cmp	r0, #0
   11556:	dda9      	ble.n	114ac <_strtod_l+0xc6c>
   11558:	9b08      	ldr	r3, [sp, #32]
   1155a:	2b00      	cmp	r3, #0
   1155c:	d17e      	bne.n	1165c <_strtod_l+0xe1c>
   1155e:	4b50      	ldr	r3, [pc, #320]	; (116a0 <_strtod_l+0xe60>)
   11560:	403b      	ands	r3, r7
   11562:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   11566:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   1156a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   1156e:	9305      	str	r3, [sp, #20]
   11570:	f04f 33ff 	mov.w	r3, #4294967295
   11574:	9304      	str	r3, [sp, #16]
   11576:	ed9d 8b04 	vldr	d8, [sp, #16]
   1157a:	e797      	b.n	114ac <_strtod_l+0xc6c>
   1157c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11580:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11584:	430b      	orrs	r3, r1
   11586:	4617      	mov	r7, r2
   11588:	f47f af6c 	bne.w	11464 <_strtod_l+0xc24>
   1158c:	e7e4      	b.n	11558 <_strtod_l+0xd18>
   1158e:	4945      	ldr	r1, [pc, #276]	; (116a4 <_strtod_l+0xe64>)
   11590:	a811      	add	r0, sp, #68	; 0x44
   11592:	aa14      	add	r2, sp, #80	; 0x50
   11594:	f001 fd44 	bl	13020 <__hexnan>
   11598:	2805      	cmp	r0, #5
   1159a:	f47f ab06 	bne.w	10baa <_strtod_l+0x36a>
   1159e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   115a0:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   115a4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   115a8:	9305      	str	r3, [sp, #20]
   115aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   115ac:	9304      	str	r3, [sp, #16]
   115ae:	ed9d 8b04 	vldr	d8, [sp, #16]
   115b2:	f7ff bb02 	b.w	10bba <_strtod_l+0x37a>
   115b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   115ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   115bc:	4203      	tst	r3, r0
   115be:	f43f af75 	beq.w	114ac <_strtod_l+0xc6c>
   115c2:	460f      	mov	r7, r1
   115c4:	e757      	b.n	11476 <_strtod_l+0xc36>
   115c6:	4c38      	ldr	r4, [pc, #224]	; (116a8 <_strtod_l+0xe68>)
   115c8:	2100      	movs	r1, #0
   115ca:	e58f      	b.n	110ec <_strtod_l+0x8ac>
   115cc:	f002 f9c0 	bl	13950 <__ulp>
   115d0:	9b08      	ldr	r3, [sp, #32]
   115d2:	2b00      	cmp	r3, #0
   115d4:	d055      	beq.n	11682 <_strtod_l+0xe42>
   115d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
   115da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   115de:	2b00      	cmp	r3, #0
   115e0:	dd09      	ble.n	115f6 <_strtod_l+0xdb6>
   115e2:	051b      	lsls	r3, r3, #20
   115e4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   115e8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   115ec:	4628      	mov	r0, r5
   115ee:	ec41 0b17 	vmov	d7, r0, r1
   115f2:	ee20 0b07 	vmul.f64	d0, d0, d7
   115f6:	ee38 8b40 	vsub.f64	d8, d8, d0
   115fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
   115fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11602:	f47f af55 	bne.w	114b0 <_strtod_l+0xc70>
   11606:	e681      	b.n	1130c <_strtod_l+0xacc>
   11608:	9b08      	ldr	r3, [sp, #32]
   1160a:	9904      	ldr	r1, [sp, #16]
   1160c:	b31b      	cbz	r3, 11656 <_strtod_l+0xe16>
   1160e:	4b24      	ldr	r3, [pc, #144]	; (116a0 <_strtod_l+0xe60>)
   11610:	4013      	ands	r3, r2
   11612:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   11616:	d81e      	bhi.n	11656 <_strtod_l+0xe16>
   11618:	0d1b      	lsrs	r3, r3, #20
   1161a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1161e:	f04f 30ff 	mov.w	r0, #4294967295
   11622:	fa00 f303 	lsl.w	r3, r0, r3
   11626:	4299      	cmp	r1, r3
   11628:	f47f af1c 	bne.w	11464 <_strtod_l+0xc24>
   1162c:	4b1f      	ldr	r3, [pc, #124]	; (116ac <_strtod_l+0xe6c>)
   1162e:	429a      	cmp	r2, r3
   11630:	d030      	beq.n	11694 <_strtod_l+0xe54>
   11632:	4b1b      	ldr	r3, [pc, #108]	; (116a0 <_strtod_l+0xe60>)
   11634:	4013      	ands	r3, r2
   11636:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1163a:	9305      	str	r3, [sp, #20]
   1163c:	2300      	movs	r3, #0
   1163e:	9304      	str	r3, [sp, #16]
   11640:	ed9d 8b04 	vldr	d8, [sp, #16]
   11644:	e732      	b.n	114ac <_strtod_l+0xc6c>
   11646:	f04f 32ff 	mov.w	r2, #4294967295
   1164a:	fa02 f303 	lsl.w	r3, r2, r3
   1164e:	9a04      	ldr	r2, [sp, #16]
   11650:	401a      	ands	r2, r3
   11652:	9204      	str	r2, [sp, #16]
   11654:	e5d0      	b.n	111f8 <_strtod_l+0x9b8>
   11656:	f04f 33ff 	mov.w	r3, #4294967295
   1165a:	e7e4      	b.n	11626 <_strtod_l+0xde6>
   1165c:	4b10      	ldr	r3, [pc, #64]	; (116a0 <_strtod_l+0xe60>)
   1165e:	403b      	ands	r3, r7
   11660:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11664:	f73f af7d 	bgt.w	11562 <_strtod_l+0xd22>
   11668:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   1166c:	f73f af20 	bgt.w	114b0 <_strtod_l+0xc70>
   11670:	e64c      	b.n	1130c <_strtod_l+0xacc>
   11672:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   11676:	f04f 33ff 	mov.w	r3, #4294967295
   1167a:	4093      	lsls	r3, r2
   1167c:	400b      	ands	r3, r1
   1167e:	9305      	str	r3, [sp, #20]
   11680:	e5ba      	b.n	111f8 <_strtod_l+0x9b8>
   11682:	ee38 8b40 	vsub.f64	d8, d8, d0
   11686:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1168a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1168e:	f47f af1b 	bne.w	114c8 <_strtod_l+0xc88>
   11692:	e63b      	b.n	1130c <_strtod_l+0xacc>
   11694:	3101      	adds	r1, #1
   11696:	d1cc      	bne.n	11632 <_strtod_l+0xdf2>
   11698:	e409      	b.n	10eae <_strtod_l+0x66e>
   1169a:	2300      	movs	r3, #0
   1169c:	e67d      	b.n	1139a <_strtod_l+0xb5a>
   1169e:	bf00      	nop
   116a0:	7ff00000 	.word	0x7ff00000
   116a4:	20007e6c 	.word	0x20007e6c
   116a8:	20000300 	.word	0x20000300
   116ac:	7fefffff 	.word	0x7fefffff

000116b0 <_strtod_r>:
   116b0:	4b01      	ldr	r3, [pc, #4]	; (116b8 <_strtod_r+0x8>)
   116b2:	f7ff b8c5 	b.w	10840 <_strtod_l>
   116b6:	bf00      	nop
   116b8:	20008a2c 	.word	0x20008a2c

000116bc <_strtol_l.constprop.0>:
   116bc:	2b01      	cmp	r3, #1
   116be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116c2:	d040      	beq.n	11746 <_strtol_l.constprop.0+0x8a>
   116c4:	2b24      	cmp	r3, #36	; 0x24
   116c6:	4698      	mov	r8, r3
   116c8:	d83d      	bhi.n	11746 <_strtol_l.constprop.0+0x8a>
   116ca:	4d4c      	ldr	r5, [pc, #304]	; (117fc <_strtol_l.constprop.0+0x140>)
   116cc:	468e      	mov	lr, r1
   116ce:	4676      	mov	r6, lr
   116d0:	f81e bb01 	ldrb.w	fp, [lr], #1
   116d4:	f815 400b 	ldrb.w	r4, [r5, fp]
   116d8:	f014 0408 	ands.w	r4, r4, #8
   116dc:	d1f7      	bne.n	116ce <_strtol_l.constprop.0+0x12>
   116de:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   116e2:	d072      	beq.n	117ca <_strtol_l.constprop.0+0x10e>
   116e4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   116e8:	bf08      	it	eq
   116ea:	f89e b000 	ldrbeq.w	fp, [lr]
   116ee:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   116f2:	bf08      	it	eq
   116f4:	f106 0e02 	addeq.w	lr, r6, #2
   116f8:	2b00      	cmp	r3, #0
   116fa:	d042      	beq.n	11782 <_strtol_l.constprop.0+0xc6>
   116fc:	2b10      	cmp	r3, #16
   116fe:	d057      	beq.n	117b0 <_strtol_l.constprop.0+0xf4>
   11700:	fbb9 f7f8 	udiv	r7, r9, r8
   11704:	2500      	movs	r5, #0
   11706:	462e      	mov	r6, r5
   11708:	fb08 9a17 	mls	sl, r8, r7, r9
   1170c:	e005      	b.n	1171a <_strtol_l.constprop.0+0x5e>
   1170e:	d033      	beq.n	11778 <_strtol_l.constprop.0+0xbc>
   11710:	fb08 c606 	mla	r6, r8, r6, ip
   11714:	2501      	movs	r5, #1
   11716:	f81e bb01 	ldrb.w	fp, [lr], #1
   1171a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   1171e:	f1bc 0f09 	cmp.w	ip, #9
   11722:	d906      	bls.n	11732 <_strtol_l.constprop.0+0x76>
   11724:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   11728:	f1bc 0f19 	cmp.w	ip, #25
   1172c:	d812      	bhi.n	11754 <_strtol_l.constprop.0+0x98>
   1172e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   11732:	4563      	cmp	r3, ip
   11734:	dd17      	ble.n	11766 <_strtol_l.constprop.0+0xaa>
   11736:	f1b5 3fff 	cmp.w	r5, #4294967295
   1173a:	d0ec      	beq.n	11716 <_strtol_l.constprop.0+0x5a>
   1173c:	42b7      	cmp	r7, r6
   1173e:	d2e6      	bcs.n	1170e <_strtol_l.constprop.0+0x52>
   11740:	f04f 35ff 	mov.w	r5, #4294967295
   11744:	e7e7      	b.n	11716 <_strtol_l.constprop.0+0x5a>
   11746:	f000 fcc3 	bl	120d0 <__errno>
   1174a:	2316      	movs	r3, #22
   1174c:	6003      	str	r3, [r0, #0]
   1174e:	2000      	movs	r0, #0
   11750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11754:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   11758:	f1bc 0f19 	cmp.w	ip, #25
   1175c:	d803      	bhi.n	11766 <_strtol_l.constprop.0+0xaa>
   1175e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   11762:	4563      	cmp	r3, ip
   11764:	dce7      	bgt.n	11736 <_strtol_l.constprop.0+0x7a>
   11766:	1c6b      	adds	r3, r5, #1
   11768:	d027      	beq.n	117ba <_strtol_l.constprop.0+0xfe>
   1176a:	b98c      	cbnz	r4, 11790 <_strtol_l.constprop.0+0xd4>
   1176c:	b10a      	cbz	r2, 11772 <_strtol_l.constprop.0+0xb6>
   1176e:	bba5      	cbnz	r5, 117da <_strtol_l.constprop.0+0x11e>
   11770:	6011      	str	r1, [r2, #0]
   11772:	4630      	mov	r0, r6
   11774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11778:	45e2      	cmp	sl, ip
   1177a:	dac9      	bge.n	11710 <_strtol_l.constprop.0+0x54>
   1177c:	f04f 35ff 	mov.w	r5, #4294967295
   11780:	e7c9      	b.n	11716 <_strtol_l.constprop.0+0x5a>
   11782:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   11786:	d005      	beq.n	11794 <_strtol_l.constprop.0+0xd8>
   11788:	f04f 080a 	mov.w	r8, #10
   1178c:	4643      	mov	r3, r8
   1178e:	e7b7      	b.n	11700 <_strtol_l.constprop.0+0x44>
   11790:	4276      	negs	r6, r6
   11792:	e7eb      	b.n	1176c <_strtol_l.constprop.0+0xb0>
   11794:	f89e 3000 	ldrb.w	r3, [lr]
   11798:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1179c:	2b58      	cmp	r3, #88	; 0x58
   1179e:	d121      	bne.n	117e4 <_strtol_l.constprop.0+0x128>
   117a0:	f04f 0810 	mov.w	r8, #16
   117a4:	f89e b001 	ldrb.w	fp, [lr, #1]
   117a8:	4643      	mov	r3, r8
   117aa:	f10e 0e02 	add.w	lr, lr, #2
   117ae:	e7a7      	b.n	11700 <_strtol_l.constprop.0+0x44>
   117b0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   117b4:	d01a      	beq.n	117ec <_strtol_l.constprop.0+0x130>
   117b6:	4698      	mov	r8, r3
   117b8:	e7a2      	b.n	11700 <_strtol_l.constprop.0+0x44>
   117ba:	2322      	movs	r3, #34	; 0x22
   117bc:	6003      	str	r3, [r0, #0]
   117be:	b172      	cbz	r2, 117de <_strtol_l.constprop.0+0x122>
   117c0:	f10e 31ff 	add.w	r1, lr, #4294967295
   117c4:	464e      	mov	r6, r9
   117c6:	6011      	str	r1, [r2, #0]
   117c8:	e7d3      	b.n	11772 <_strtol_l.constprop.0+0xb6>
   117ca:	f89e b000 	ldrb.w	fp, [lr]
   117ce:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   117d2:	f106 0e02 	add.w	lr, r6, #2
   117d6:	2401      	movs	r4, #1
   117d8:	e78e      	b.n	116f8 <_strtol_l.constprop.0+0x3c>
   117da:	46b1      	mov	r9, r6
   117dc:	e7f0      	b.n	117c0 <_strtol_l.constprop.0+0x104>
   117de:	464e      	mov	r6, r9
   117e0:	4630      	mov	r0, r6
   117e2:	e7c7      	b.n	11774 <_strtol_l.constprop.0+0xb8>
   117e4:	f04f 0808 	mov.w	r8, #8
   117e8:	4643      	mov	r3, r8
   117ea:	e789      	b.n	11700 <_strtol_l.constprop.0+0x44>
   117ec:	f89e 5000 	ldrb.w	r5, [lr]
   117f0:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   117f4:	2d58      	cmp	r5, #88	; 0x58
   117f6:	d0d3      	beq.n	117a0 <_strtol_l.constprop.0+0xe4>
   117f8:	4698      	mov	r8, r3
   117fa:	e781      	b.n	11700 <_strtol_l.constprop.0+0x44>
   117fc:	20000ed9 	.word	0x20000ed9

00011800 <_strtol_r>:
   11800:	f7ff bf5c 	b.w	116bc <_strtol_l.constprop.0>

00011804 <__cxa_atexit>:
   11804:	4613      	mov	r3, r2
   11806:	460a      	mov	r2, r1
   11808:	4601      	mov	r1, r0
   1180a:	2002      	movs	r0, #2
   1180c:	f000 bf36 	b.w	1267c <__register_exitproc>

00011810 <fcvtf>:
   11810:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   11814:	2300      	movs	r3, #0
   11816:	f002 ba39 	b.w	13c8c <fcvtbuf>
   1181a:	bf00      	nop

0001181c <stdio_exit_handler>:
   1181c:	4a02      	ldr	r2, [pc, #8]	; (11828 <stdio_exit_handler+0xc>)
   1181e:	4903      	ldr	r1, [pc, #12]	; (1182c <stdio_exit_handler+0x10>)
   11820:	4803      	ldr	r0, [pc, #12]	; (11830 <stdio_exit_handler+0x14>)
   11822:	f000 b8bb 	b.w	1199c <_fwalk_sglue>
   11826:	bf00      	nop
   11828:	20008fa8 	.word	0x20008fa8
   1182c:	000170c5 	.word	0x000170c5
   11830:	200088e0 	.word	0x200088e0

00011834 <cleanup_stdio>:
   11834:	4b0c      	ldr	r3, [pc, #48]	; (11868 <cleanup_stdio+0x34>)
   11836:	6841      	ldr	r1, [r0, #4]
   11838:	4299      	cmp	r1, r3
   1183a:	b510      	push	{r4, lr}
   1183c:	4604      	mov	r4, r0
   1183e:	d001      	beq.n	11844 <cleanup_stdio+0x10>
   11840:	f005 fc40 	bl	170c4 <_fclose_r>
   11844:	68a1      	ldr	r1, [r4, #8]
   11846:	4b09      	ldr	r3, [pc, #36]	; (1186c <cleanup_stdio+0x38>)
   11848:	4299      	cmp	r1, r3
   1184a:	d002      	beq.n	11852 <cleanup_stdio+0x1e>
   1184c:	4620      	mov	r0, r4
   1184e:	f005 fc39 	bl	170c4 <_fclose_r>
   11852:	68e1      	ldr	r1, [r4, #12]
   11854:	4b06      	ldr	r3, [pc, #24]	; (11870 <cleanup_stdio+0x3c>)
   11856:	4299      	cmp	r1, r3
   11858:	d004      	beq.n	11864 <cleanup_stdio+0x30>
   1185a:	4620      	mov	r0, r4
   1185c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11860:	f005 bc30 	b.w	170c4 <_fclose_r>
   11864:	bd10      	pop	{r4, pc}
   11866:	bf00      	nop
   11868:	200349d4 	.word	0x200349d4
   1186c:	20034a3c 	.word	0x20034a3c
   11870:	20034aa4 	.word	0x20034aa4

00011874 <global_stdio_init.part.0>:
   11874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11878:	4c2a      	ldr	r4, [pc, #168]	; (11924 <global_stdio_init.part.0+0xb0>)
   1187a:	4b2b      	ldr	r3, [pc, #172]	; (11928 <global_stdio_init.part.0+0xb4>)
   1187c:	482b      	ldr	r0, [pc, #172]	; (1192c <global_stdio_init.part.0+0xb8>)
   1187e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 11940 <global_stdio_init.part.0+0xcc>
   11882:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 11944 <global_stdio_init.part.0+0xd0>
   11886:	4f2a      	ldr	r7, [pc, #168]	; (11930 <global_stdio_init.part.0+0xbc>)
   11888:	6018      	str	r0, [r3, #0]
   1188a:	2500      	movs	r5, #0
   1188c:	2304      	movs	r3, #4
   1188e:	2208      	movs	r2, #8
   11890:	4629      	mov	r1, r5
   11892:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   11896:	4e27      	ldr	r6, [pc, #156]	; (11934 <global_stdio_init.part.0+0xc0>)
   11898:	6665      	str	r5, [r4, #100]	; 0x64
   1189a:	e9c4 5302 	strd	r5, r3, [r4, #8]
   1189e:	e9c4 5500 	strd	r5, r5, [r4]
   118a2:	e9c4 5504 	strd	r5, r5, [r4, #16]
   118a6:	61a5      	str	r5, [r4, #24]
   118a8:	f000 fa86 	bl	11db8 <memset>
   118ac:	4b22      	ldr	r3, [pc, #136]	; (11938 <global_stdio_init.part.0+0xc4>)
   118ae:	6763      	str	r3, [r4, #116]	; 0x74
   118b0:	2208      	movs	r2, #8
   118b2:	4629      	mov	r1, r5
   118b4:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   118b8:	e9c4 4907 	strd	r4, r9, [r4, #28]
   118bc:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   118c0:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   118c4:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   118c8:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   118cc:	6725      	str	r5, [r4, #112]	; 0x70
   118ce:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   118d2:	62e6      	str	r6, [r4, #44]	; 0x2c
   118d4:	f000 fa70 	bl	11db8 <memset>
   118d8:	4b18      	ldr	r3, [pc, #96]	; (1193c <global_stdio_init.part.0+0xc8>)
   118da:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   118de:	4629      	mov	r1, r5
   118e0:	f104 0368 	add.w	r3, r4, #104	; 0x68
   118e4:	2208      	movs	r2, #8
   118e6:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   118ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   118ee:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   118f2:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   118f6:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   118fa:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   118fe:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   11902:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   11906:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   1190a:	f000 fa55 	bl	11db8 <memset>
   1190e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   11912:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   11916:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   1191a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   1191e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11922:	bf00      	nop
   11924:	200349d4 	.word	0x200349d4
   11928:	20034b0c 	.word	0x20034b0c
   1192c:	0001181d 	.word	0x0001181d
   11930:	00011b6d 	.word	0x00011b6d
   11934:	00011b8d 	.word	0x00011b8d
   11938:	00010009 	.word	0x00010009
   1193c:	00020012 	.word	0x00020012
   11940:	00011b05 	.word	0x00011b05
   11944:	00011b2d 	.word	0x00011b2d

00011948 <__sinit>:
   11948:	b510      	push	{r4, lr}
   1194a:	4604      	mov	r4, r0
   1194c:	480a      	ldr	r0, [pc, #40]	; (11978 <__sinit+0x30>)
   1194e:	f000 fbed 	bl	1212c <__retarget_lock_acquire_recursive>
   11952:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11954:	b923      	cbnz	r3, 11960 <__sinit+0x18>
   11956:	4b09      	ldr	r3, [pc, #36]	; (1197c <__sinit+0x34>)
   11958:	4a09      	ldr	r2, [pc, #36]	; (11980 <__sinit+0x38>)
   1195a:	681b      	ldr	r3, [r3, #0]
   1195c:	6362      	str	r2, [r4, #52]	; 0x34
   1195e:	b123      	cbz	r3, 1196a <__sinit+0x22>
   11960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11964:	4804      	ldr	r0, [pc, #16]	; (11978 <__sinit+0x30>)
   11966:	f000 bbe3 	b.w	12130 <__retarget_lock_release_recursive>
   1196a:	f7ff ff83 	bl	11874 <global_stdio_init.part.0>
   1196e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11972:	4801      	ldr	r0, [pc, #4]	; (11978 <__sinit+0x30>)
   11974:	f000 bbdc 	b.w	12130 <__retarget_lock_release_recursive>
   11978:	2003499c 	.word	0x2003499c
   1197c:	20034b0c 	.word	0x20034b0c
   11980:	00011835 	.word	0x00011835

00011984 <__sfp_lock_acquire>:
   11984:	4801      	ldr	r0, [pc, #4]	; (1198c <__sfp_lock_acquire+0x8>)
   11986:	f000 bbd1 	b.w	1212c <__retarget_lock_acquire_recursive>
   1198a:	bf00      	nop
   1198c:	2003499c 	.word	0x2003499c

00011990 <__sfp_lock_release>:
   11990:	4801      	ldr	r0, [pc, #4]	; (11998 <__sfp_lock_release+0x8>)
   11992:	f000 bbcd 	b.w	12130 <__retarget_lock_release_recursive>
   11996:	bf00      	nop
   11998:	2003499c 	.word	0x2003499c

0001199c <_fwalk_sglue>:
   1199c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   119a0:	4680      	mov	r8, r0
   119a2:	460f      	mov	r7, r1
   119a4:	4616      	mov	r6, r2
   119a6:	f04f 0900 	mov.w	r9, #0
   119aa:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   119ae:	3d01      	subs	r5, #1
   119b0:	d411      	bmi.n	119d6 <_fwalk_sglue+0x3a>
   119b2:	89a3      	ldrh	r3, [r4, #12]
   119b4:	2b01      	cmp	r3, #1
   119b6:	f105 35ff 	add.w	r5, r5, #4294967295
   119ba:	d908      	bls.n	119ce <_fwalk_sglue+0x32>
   119bc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   119c0:	3301      	adds	r3, #1
   119c2:	4621      	mov	r1, r4
   119c4:	d003      	beq.n	119ce <_fwalk_sglue+0x32>
   119c6:	4640      	mov	r0, r8
   119c8:	47b8      	blx	r7
   119ca:	ea49 0900 	orr.w	r9, r9, r0
   119ce:	1c6b      	adds	r3, r5, #1
   119d0:	f104 0468 	add.w	r4, r4, #104	; 0x68
   119d4:	d1ed      	bne.n	119b2 <_fwalk_sglue+0x16>
   119d6:	6836      	ldr	r6, [r6, #0]
   119d8:	2e00      	cmp	r6, #0
   119da:	d1e6      	bne.n	119aa <_fwalk_sglue+0xe>
   119dc:	4648      	mov	r0, r9
   119de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   119e2:	bf00      	nop

000119e4 <snprintf>:
   119e4:	b40c      	push	{r2, r3}
   119e6:	b510      	push	{r4, lr}
   119e8:	4b1f      	ldr	r3, [pc, #124]	; (11a68 <snprintf+0x84>)
   119ea:	2900      	cmp	r1, #0
   119ec:	681c      	ldr	r4, [r3, #0]
   119ee:	b09c      	sub	sp, #112	; 0x70
   119f0:	db35      	blt.n	11a5e <snprintf+0x7a>
   119f2:	f44f 7302 	mov.w	r3, #520	; 0x208
   119f6:	f8ad 3014 	strh.w	r3, [sp, #20]
   119fa:	9002      	str	r0, [sp, #8]
   119fc:	9006      	str	r0, [sp, #24]
   119fe:	ab1f      	add	r3, sp, #124	; 0x7c
   11a00:	d018      	beq.n	11a34 <snprintf+0x50>
   11a02:	3901      	subs	r1, #1
   11a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11a08:	9104      	str	r1, [sp, #16]
   11a0a:	9107      	str	r1, [sp, #28]
   11a0c:	f8ad 2016 	strh.w	r2, [sp, #22]
   11a10:	a902      	add	r1, sp, #8
   11a12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   11a14:	9301      	str	r3, [sp, #4]
   11a16:	4620      	mov	r0, r4
   11a18:	f002 f98a 	bl	13d30 <_svfprintf_r>
   11a1c:	1c42      	adds	r2, r0, #1
   11a1e:	da01      	bge.n	11a24 <snprintf+0x40>
   11a20:	238b      	movs	r3, #139	; 0x8b
   11a22:	6023      	str	r3, [r4, #0]
   11a24:	9b02      	ldr	r3, [sp, #8]
   11a26:	2200      	movs	r2, #0
   11a28:	701a      	strb	r2, [r3, #0]
   11a2a:	b01c      	add	sp, #112	; 0x70
   11a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a30:	b002      	add	sp, #8
   11a32:	4770      	bx	lr
   11a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11a38:	9104      	str	r1, [sp, #16]
   11a3a:	9107      	str	r1, [sp, #28]
   11a3c:	f8ad 2016 	strh.w	r2, [sp, #22]
   11a40:	a902      	add	r1, sp, #8
   11a42:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   11a44:	9301      	str	r3, [sp, #4]
   11a46:	4620      	mov	r0, r4
   11a48:	f002 f972 	bl	13d30 <_svfprintf_r>
   11a4c:	1c43      	adds	r3, r0, #1
   11a4e:	da01      	bge.n	11a54 <snprintf+0x70>
   11a50:	238b      	movs	r3, #139	; 0x8b
   11a52:	6023      	str	r3, [r4, #0]
   11a54:	b01c      	add	sp, #112	; 0x70
   11a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a5a:	b002      	add	sp, #8
   11a5c:	4770      	bx	lr
   11a5e:	238b      	movs	r3, #139	; 0x8b
   11a60:	6023      	str	r3, [r4, #0]
   11a62:	f04f 30ff 	mov.w	r0, #4294967295
   11a66:	e7f5      	b.n	11a54 <snprintf+0x70>
   11a68:	20008fb4 	.word	0x20008fb4

00011a6c <sprintf>:
   11a6c:	b40e      	push	{r1, r2, r3}
   11a6e:	b510      	push	{r4, lr}
   11a70:	b09d      	sub	sp, #116	; 0x74
   11a72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11a76:	ab1f      	add	r3, sp, #124	; 0x7c
   11a78:	e9cd 0106 	strd	r0, r1, [sp, #24]
   11a7c:	9104      	str	r1, [sp, #16]
   11a7e:	4909      	ldr	r1, [pc, #36]	; (11aa4 <sprintf+0x38>)
   11a80:	f853 2b04 	ldr.w	r2, [r3], #4
   11a84:	9002      	str	r0, [sp, #8]
   11a86:	4c08      	ldr	r4, [pc, #32]	; (11aa8 <sprintf+0x3c>)
   11a88:	6808      	ldr	r0, [r1, #0]
   11a8a:	9301      	str	r3, [sp, #4]
   11a8c:	a902      	add	r1, sp, #8
   11a8e:	9405      	str	r4, [sp, #20]
   11a90:	f002 f94e 	bl	13d30 <_svfprintf_r>
   11a94:	9b02      	ldr	r3, [sp, #8]
   11a96:	2200      	movs	r2, #0
   11a98:	701a      	strb	r2, [r3, #0]
   11a9a:	b01d      	add	sp, #116	; 0x74
   11a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11aa0:	b003      	add	sp, #12
   11aa2:	4770      	bx	lr
   11aa4:	20008fb4 	.word	0x20008fb4
   11aa8:	ffff0208 	.word	0xffff0208

00011aac <sscanf>:
   11aac:	b40e      	push	{r1, r2, r3}
   11aae:	b510      	push	{r4, lr}
   11ab0:	b09f      	sub	sp, #124	; 0x7c
   11ab2:	ac21      	add	r4, sp, #132	; 0x84
   11ab4:	f44f 7101 	mov.w	r1, #516	; 0x204
   11ab8:	f854 2b04 	ldr.w	r2, [r4], #4
   11abc:	9201      	str	r2, [sp, #4]
   11abe:	f8ad 101c 	strh.w	r1, [sp, #28]
   11ac2:	9004      	str	r0, [sp, #16]
   11ac4:	9008      	str	r0, [sp, #32]
   11ac6:	f000 fd5b 	bl	12580 <strlen>
   11aca:	9005      	str	r0, [sp, #20]
   11acc:	9009      	str	r0, [sp, #36]	; 0x24
   11ace:	480b      	ldr	r0, [pc, #44]	; (11afc <sscanf+0x50>)
   11ad0:	490b      	ldr	r1, [pc, #44]	; (11b00 <sscanf+0x54>)
   11ad2:	910c      	str	r1, [sp, #48]	; 0x30
   11ad4:	2300      	movs	r3, #0
   11ad6:	f64f 7cff 	movw	ip, #65535	; 0xffff
   11ada:	9310      	str	r3, [sp, #64]	; 0x40
   11adc:	9315      	str	r3, [sp, #84]	; 0x54
   11ade:	9a01      	ldr	r2, [sp, #4]
   11ae0:	6800      	ldr	r0, [r0, #0]
   11ae2:	f8ad c01e 	strh.w	ip, [sp, #30]
   11ae6:	4623      	mov	r3, r4
   11ae8:	a904      	add	r1, sp, #16
   11aea:	9403      	str	r4, [sp, #12]
   11aec:	f003 fec2 	bl	15874 <__ssvfscanf_r>
   11af0:	b01f      	add	sp, #124	; 0x7c
   11af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11af6:	b003      	add	sp, #12
   11af8:	4770      	bx	lr
   11afa:	bf00      	nop
   11afc:	20008fb4 	.word	0x20008fb4
   11b00:	00011b29 	.word	0x00011b29

00011b04 <__sread>:
   11b04:	b510      	push	{r4, lr}
   11b06:	460c      	mov	r4, r1
   11b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11b0c:	f000 faa2 	bl	12054 <_read_r>
   11b10:	2800      	cmp	r0, #0
   11b12:	db03      	blt.n	11b1c <__sread+0x18>
   11b14:	6d23      	ldr	r3, [r4, #80]	; 0x50
   11b16:	4403      	add	r3, r0
   11b18:	6523      	str	r3, [r4, #80]	; 0x50
   11b1a:	bd10      	pop	{r4, pc}
   11b1c:	89a3      	ldrh	r3, [r4, #12]
   11b1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   11b22:	81a3      	strh	r3, [r4, #12]
   11b24:	bd10      	pop	{r4, pc}
   11b26:	bf00      	nop

00011b28 <__seofread>:
   11b28:	2000      	movs	r0, #0
   11b2a:	4770      	bx	lr

00011b2c <__swrite>:
   11b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b30:	460c      	mov	r4, r1
   11b32:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   11b36:	461f      	mov	r7, r3
   11b38:	05cb      	lsls	r3, r1, #23
   11b3a:	4605      	mov	r5, r0
   11b3c:	4616      	mov	r6, r2
   11b3e:	d40b      	bmi.n	11b58 <__swrite+0x2c>
   11b40:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   11b44:	81a1      	strh	r1, [r4, #12]
   11b46:	463b      	mov	r3, r7
   11b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11b4c:	4632      	mov	r2, r6
   11b4e:	4628      	mov	r0, r5
   11b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11b54:	f000 baa6 	b.w	120a4 <_write_r>
   11b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11b5c:	2302      	movs	r3, #2
   11b5e:	2200      	movs	r2, #0
   11b60:	f000 fa62 	bl	12028 <_lseek_r>
   11b64:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   11b68:	e7ea      	b.n	11b40 <__swrite+0x14>
   11b6a:	bf00      	nop

00011b6c <__sseek>:
   11b6c:	b510      	push	{r4, lr}
   11b6e:	460c      	mov	r4, r1
   11b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11b74:	f000 fa58 	bl	12028 <_lseek_r>
   11b78:	89a3      	ldrh	r3, [r4, #12]
   11b7a:	1c42      	adds	r2, r0, #1
   11b7c:	bf0e      	itee	eq
   11b7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   11b82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   11b86:	6520      	strne	r0, [r4, #80]	; 0x50
   11b88:	81a3      	strh	r3, [r4, #12]
   11b8a:	bd10      	pop	{r4, pc}

00011b8c <__sclose>:
   11b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11b90:	f000 ba38 	b.w	12004 <_close_r>

00011b94 <_vdprintf_r>:
   11b94:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b96:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   11b9a:	af04      	add	r7, sp, #16
   11b9c:	9300      	str	r3, [sp, #0]
   11b9e:	4613      	mov	r3, r2
   11ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
   11ba4:	460e      	mov	r6, r1
   11ba6:	9203      	str	r2, [sp, #12]
   11ba8:	4639      	mov	r1, r7
   11baa:	aa03      	add	r2, sp, #12
   11bac:	4605      	mov	r5, r0
   11bae:	f000 f825 	bl	11bfc <_vasnprintf_r>
   11bb2:	b188      	cbz	r0, 11bd8 <_vdprintf_r+0x44>
   11bb4:	4604      	mov	r4, r0
   11bb6:	4602      	mov	r2, r0
   11bb8:	9b03      	ldr	r3, [sp, #12]
   11bba:	4631      	mov	r1, r6
   11bbc:	4628      	mov	r0, r5
   11bbe:	f000 fa71 	bl	120a4 <_write_r>
   11bc2:	42bc      	cmp	r4, r7
   11bc4:	9003      	str	r0, [sp, #12]
   11bc6:	d004      	beq.n	11bd2 <_vdprintf_r+0x3e>
   11bc8:	4628      	mov	r0, r5
   11bca:	4621      	mov	r1, r4
   11bcc:	f000 fdea 	bl	127a4 <_free_r>
   11bd0:	9803      	ldr	r0, [sp, #12]
   11bd2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   11bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11bd8:	f04f 30ff 	mov.w	r0, #4294967295
   11bdc:	e7f9      	b.n	11bd2 <_vdprintf_r+0x3e>
   11bde:	bf00      	nop

00011be0 <vdprintf>:
   11be0:	b410      	push	{r4}
   11be2:	4c05      	ldr	r4, [pc, #20]	; (11bf8 <vdprintf+0x18>)
   11be4:	4684      	mov	ip, r0
   11be6:	4613      	mov	r3, r2
   11be8:	6820      	ldr	r0, [r4, #0]
   11bea:	f85d 4b04 	ldr.w	r4, [sp], #4
   11bee:	460a      	mov	r2, r1
   11bf0:	4661      	mov	r1, ip
   11bf2:	f7ff bfcf 	b.w	11b94 <_vdprintf_r>
   11bf6:	bf00      	nop
   11bf8:	20008fb4 	.word	0x20008fb4

00011bfc <_vasnprintf_r>:
   11bfc:	b530      	push	{r4, r5, lr}
   11bfe:	6814      	ldr	r4, [r2, #0]
   11c00:	4615      	mov	r5, r2
   11c02:	b09b      	sub	sp, #108	; 0x6c
   11c04:	461a      	mov	r2, r3
   11c06:	b109      	cbz	r1, 11c0c <_vasnprintf_r+0x10>
   11c08:	2c00      	cmp	r4, #0
   11c0a:	d119      	bne.n	11c40 <_vasnprintf_r+0x44>
   11c0c:	2100      	movs	r1, #0
   11c0e:	f44f 7322 	mov.w	r3, #648	; 0x288
   11c12:	f8ad 300c 	strh.w	r3, [sp, #12]
   11c16:	9100      	str	r1, [sp, #0]
   11c18:	9104      	str	r1, [sp, #16]
   11c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11c1e:	9102      	str	r1, [sp, #8]
   11c20:	9105      	str	r1, [sp, #20]
   11c22:	f8ad 300e 	strh.w	r3, [sp, #14]
   11c26:	4669      	mov	r1, sp
   11c28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   11c2a:	f002 f881 	bl	13d30 <_svfprintf_r>
   11c2e:	2800      	cmp	r0, #0
   11c30:	db13      	blt.n	11c5a <_vasnprintf_r+0x5e>
   11c32:	9b00      	ldr	r3, [sp, #0]
   11c34:	6028      	str	r0, [r5, #0]
   11c36:	2200      	movs	r2, #0
   11c38:	701a      	strb	r2, [r3, #0]
   11c3a:	9804      	ldr	r0, [sp, #16]
   11c3c:	b01b      	add	sp, #108	; 0x6c
   11c3e:	bd30      	pop	{r4, r5, pc}
   11c40:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   11c44:	9100      	str	r1, [sp, #0]
   11c46:	9104      	str	r1, [sp, #16]
   11c48:	f8ad 300c 	strh.w	r3, [sp, #12]
   11c4c:	4621      	mov	r1, r4
   11c4e:	dae4      	bge.n	11c1a <_vasnprintf_r+0x1e>
   11c50:	238b      	movs	r3, #139	; 0x8b
   11c52:	6003      	str	r3, [r0, #0]
   11c54:	2000      	movs	r0, #0
   11c56:	b01b      	add	sp, #108	; 0x6c
   11c58:	bd30      	pop	{r4, r5, pc}
   11c5a:	2000      	movs	r0, #0
   11c5c:	e7ee      	b.n	11c3c <_vasnprintf_r+0x40>
   11c5e:	bf00      	nop

00011c60 <memcmp>:
   11c60:	2a03      	cmp	r2, #3
   11c62:	b570      	push	{r4, r5, r6, lr}
   11c64:	d914      	bls.n	11c90 <memcmp+0x30>
   11c66:	ea40 0301 	orr.w	r3, r0, r1
   11c6a:	079b      	lsls	r3, r3, #30
   11c6c:	d122      	bne.n	11cb4 <memcmp+0x54>
   11c6e:	4604      	mov	r4, r0
   11c70:	460b      	mov	r3, r1
   11c72:	4619      	mov	r1, r3
   11c74:	4620      	mov	r0, r4
   11c76:	680e      	ldr	r6, [r1, #0]
   11c78:	6805      	ldr	r5, [r0, #0]
   11c7a:	42b5      	cmp	r5, r6
   11c7c:	f104 0404 	add.w	r4, r4, #4
   11c80:	f103 0304 	add.w	r3, r3, #4
   11c84:	d116      	bne.n	11cb4 <memcmp+0x54>
   11c86:	3a04      	subs	r2, #4
   11c88:	2a03      	cmp	r2, #3
   11c8a:	4620      	mov	r0, r4
   11c8c:	4619      	mov	r1, r3
   11c8e:	d8f0      	bhi.n	11c72 <memcmp+0x12>
   11c90:	1e54      	subs	r4, r2, #1
   11c92:	b19a      	cbz	r2, 11cbc <memcmp+0x5c>
   11c94:	1e42      	subs	r2, r0, #1
   11c96:	3901      	subs	r1, #1
   11c98:	e001      	b.n	11c9e <memcmp+0x3e>
   11c9a:	18c3      	adds	r3, r0, r3
   11c9c:	d00c      	beq.n	11cb8 <memcmp+0x58>
   11c9e:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   11ca2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   11ca6:	45e6      	cmp	lr, ip
   11ca8:	eba4 0302 	sub.w	r3, r4, r2
   11cac:	d0f5      	beq.n	11c9a <memcmp+0x3a>
   11cae:	ebae 000c 	sub.w	r0, lr, ip
   11cb2:	bd70      	pop	{r4, r5, r6, pc}
   11cb4:	1e54      	subs	r4, r2, #1
   11cb6:	e7ed      	b.n	11c94 <memcmp+0x34>
   11cb8:	4618      	mov	r0, r3
   11cba:	bd70      	pop	{r4, r5, r6, pc}
   11cbc:	4610      	mov	r0, r2
   11cbe:	bd70      	pop	{r4, r5, r6, pc}

00011cc0 <memmove>:
   11cc0:	4288      	cmp	r0, r1
   11cc2:	d90d      	bls.n	11ce0 <memmove+0x20>
   11cc4:	188b      	adds	r3, r1, r2
   11cc6:	4283      	cmp	r3, r0
   11cc8:	d90a      	bls.n	11ce0 <memmove+0x20>
   11cca:	eb00 0c02 	add.w	ip, r0, r2
   11cce:	b1ba      	cbz	r2, 11d00 <memmove+0x40>
   11cd0:	4662      	mov	r2, ip
   11cd2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   11cd6:	f802 cd01 	strb.w	ip, [r2, #-1]!
   11cda:	4299      	cmp	r1, r3
   11cdc:	d1f9      	bne.n	11cd2 <memmove+0x12>
   11cde:	4770      	bx	lr
   11ce0:	2a0f      	cmp	r2, #15
   11ce2:	d80e      	bhi.n	11d02 <memmove+0x42>
   11ce4:	4603      	mov	r3, r0
   11ce6:	f102 3cff 	add.w	ip, r2, #4294967295
   11cea:	b14a      	cbz	r2, 11d00 <memmove+0x40>
   11cec:	f10c 0c01 	add.w	ip, ip, #1
   11cf0:	3b01      	subs	r3, #1
   11cf2:	448c      	add	ip, r1
   11cf4:	f811 2b01 	ldrb.w	r2, [r1], #1
   11cf8:	f803 2f01 	strb.w	r2, [r3, #1]!
   11cfc:	4561      	cmp	r1, ip
   11cfe:	d1f9      	bne.n	11cf4 <memmove+0x34>
   11d00:	4770      	bx	lr
   11d02:	ea40 0301 	orr.w	r3, r0, r1
   11d06:	079b      	lsls	r3, r3, #30
   11d08:	d150      	bne.n	11dac <memmove+0xec>
   11d0a:	f1a2 0310 	sub.w	r3, r2, #16
   11d0e:	b570      	push	{r4, r5, r6, lr}
   11d10:	f101 0c20 	add.w	ip, r1, #32
   11d14:	f023 050f 	bic.w	r5, r3, #15
   11d18:	f101 0e10 	add.w	lr, r1, #16
   11d1c:	f100 0410 	add.w	r4, r0, #16
   11d20:	44ac      	add	ip, r5
   11d22:	091b      	lsrs	r3, r3, #4
   11d24:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   11d28:	f844 5c10 	str.w	r5, [r4, #-16]
   11d2c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   11d30:	f844 5c0c 	str.w	r5, [r4, #-12]
   11d34:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   11d38:	f844 5c08 	str.w	r5, [r4, #-8]
   11d3c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   11d40:	f844 5c04 	str.w	r5, [r4, #-4]
   11d44:	f10e 0e10 	add.w	lr, lr, #16
   11d48:	45e6      	cmp	lr, ip
   11d4a:	f104 0410 	add.w	r4, r4, #16
   11d4e:	d1e9      	bne.n	11d24 <memmove+0x64>
   11d50:	3301      	adds	r3, #1
   11d52:	f012 0f0c 	tst.w	r2, #12
   11d56:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   11d5a:	f002 040f 	and.w	r4, r2, #15
   11d5e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   11d62:	d027      	beq.n	11db4 <memmove+0xf4>
   11d64:	3c04      	subs	r4, #4
   11d66:	f024 0603 	bic.w	r6, r4, #3
   11d6a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   11d6e:	441e      	add	r6, r3
   11d70:	1f1c      	subs	r4, r3, #4
   11d72:	468e      	mov	lr, r1
   11d74:	f85e 5b04 	ldr.w	r5, [lr], #4
   11d78:	f844 5f04 	str.w	r5, [r4, #4]!
   11d7c:	42b4      	cmp	r4, r6
   11d7e:	d1f9      	bne.n	11d74 <memmove+0xb4>
   11d80:	f10c 0401 	add.w	r4, ip, #1
   11d84:	f002 0203 	and.w	r2, r2, #3
   11d88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   11d8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   11d90:	f102 3cff 	add.w	ip, r2, #4294967295
   11d94:	b14a      	cbz	r2, 11daa <memmove+0xea>
   11d96:	f10c 0c01 	add.w	ip, ip, #1
   11d9a:	3b01      	subs	r3, #1
   11d9c:	448c      	add	ip, r1
   11d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   11da2:	f803 2f01 	strb.w	r2, [r3, #1]!
   11da6:	4561      	cmp	r1, ip
   11da8:	d1f9      	bne.n	11d9e <memmove+0xde>
   11daa:	bd70      	pop	{r4, r5, r6, pc}
   11dac:	f102 3cff 	add.w	ip, r2, #4294967295
   11db0:	4603      	mov	r3, r0
   11db2:	e79b      	b.n	11cec <memmove+0x2c>
   11db4:	4622      	mov	r2, r4
   11db6:	e7eb      	b.n	11d90 <memmove+0xd0>

00011db8 <memset>:
   11db8:	0783      	lsls	r3, r0, #30
   11dba:	b530      	push	{r4, r5, lr}
   11dbc:	d048      	beq.n	11e50 <memset+0x98>
   11dbe:	1e54      	subs	r4, r2, #1
   11dc0:	2a00      	cmp	r2, #0
   11dc2:	d03f      	beq.n	11e44 <memset+0x8c>
   11dc4:	b2ca      	uxtb	r2, r1
   11dc6:	4603      	mov	r3, r0
   11dc8:	e001      	b.n	11dce <memset+0x16>
   11dca:	3c01      	subs	r4, #1
   11dcc:	d33a      	bcc.n	11e44 <memset+0x8c>
   11dce:	f803 2b01 	strb.w	r2, [r3], #1
   11dd2:	079d      	lsls	r5, r3, #30
   11dd4:	d1f9      	bne.n	11dca <memset+0x12>
   11dd6:	2c03      	cmp	r4, #3
   11dd8:	d92d      	bls.n	11e36 <memset+0x7e>
   11dda:	b2cd      	uxtb	r5, r1
   11ddc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   11de0:	2c0f      	cmp	r4, #15
   11de2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   11de6:	d936      	bls.n	11e56 <memset+0x9e>
   11de8:	f1a4 0210 	sub.w	r2, r4, #16
   11dec:	f022 0c0f 	bic.w	ip, r2, #15
   11df0:	f103 0e20 	add.w	lr, r3, #32
   11df4:	44e6      	add	lr, ip
   11df6:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   11dfa:	f103 0210 	add.w	r2, r3, #16
   11dfe:	e942 5504 	strd	r5, r5, [r2, #-16]
   11e02:	e942 5502 	strd	r5, r5, [r2, #-8]
   11e06:	3210      	adds	r2, #16
   11e08:	4572      	cmp	r2, lr
   11e0a:	d1f8      	bne.n	11dfe <memset+0x46>
   11e0c:	f10c 0201 	add.w	r2, ip, #1
   11e10:	f014 0f0c 	tst.w	r4, #12
   11e14:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   11e18:	f004 0c0f 	and.w	ip, r4, #15
   11e1c:	d013      	beq.n	11e46 <memset+0x8e>
   11e1e:	f1ac 0304 	sub.w	r3, ip, #4
   11e22:	f023 0303 	bic.w	r3, r3, #3
   11e26:	3304      	adds	r3, #4
   11e28:	4413      	add	r3, r2
   11e2a:	f842 5b04 	str.w	r5, [r2], #4
   11e2e:	4293      	cmp	r3, r2
   11e30:	d1fb      	bne.n	11e2a <memset+0x72>
   11e32:	f00c 0403 	and.w	r4, ip, #3
   11e36:	b12c      	cbz	r4, 11e44 <memset+0x8c>
   11e38:	b2c9      	uxtb	r1, r1
   11e3a:	441c      	add	r4, r3
   11e3c:	f803 1b01 	strb.w	r1, [r3], #1
   11e40:	429c      	cmp	r4, r3
   11e42:	d1fb      	bne.n	11e3c <memset+0x84>
   11e44:	bd30      	pop	{r4, r5, pc}
   11e46:	4664      	mov	r4, ip
   11e48:	4613      	mov	r3, r2
   11e4a:	2c00      	cmp	r4, #0
   11e4c:	d1f4      	bne.n	11e38 <memset+0x80>
   11e4e:	e7f9      	b.n	11e44 <memset+0x8c>
   11e50:	4603      	mov	r3, r0
   11e52:	4614      	mov	r4, r2
   11e54:	e7bf      	b.n	11dd6 <memset+0x1e>
   11e56:	461a      	mov	r2, r3
   11e58:	46a4      	mov	ip, r4
   11e5a:	e7e0      	b.n	11e1e <memset+0x66>

00011e5c <strlcat>:
   11e5c:	b570      	push	{r4, r5, r6, lr}
   11e5e:	b34a      	cbz	r2, 11eb4 <strlcat+0x58>
   11e60:	4603      	mov	r3, r0
   11e62:	1815      	adds	r5, r2, r0
   11e64:	e002      	b.n	11e6c <strlcat+0x10>
   11e66:	429d      	cmp	r5, r3
   11e68:	469c      	mov	ip, r3
   11e6a:	d005      	beq.n	11e78 <strlcat+0x1c>
   11e6c:	469c      	mov	ip, r3
   11e6e:	3301      	adds	r3, #1
   11e70:	f89c 4000 	ldrb.w	r4, [ip]
   11e74:	2c00      	cmp	r4, #0
   11e76:	d1f6      	bne.n	11e66 <strlcat+0xa>
   11e78:	ebac 0600 	sub.w	r6, ip, r0
   11e7c:	1b92      	subs	r2, r2, r6
   11e7e:	1e55      	subs	r5, r2, #1
   11e80:	b1ca      	cbz	r2, 11eb6 <strlcat+0x5a>
   11e82:	780c      	ldrb	r4, [r1, #0]
   11e84:	460b      	mov	r3, r1
   11e86:	b93c      	cbnz	r4, 11e98 <strlcat+0x3c>
   11e88:	e00f      	b.n	11eaa <strlcat+0x4e>
   11e8a:	f802 4b01 	strb.w	r4, [r2], #1
   11e8e:	3d01      	subs	r5, #1
   11e90:	4694      	mov	ip, r2
   11e92:	785c      	ldrb	r4, [r3, #1]
   11e94:	3301      	adds	r3, #1
   11e96:	b134      	cbz	r4, 11ea6 <strlcat+0x4a>
   11e98:	4662      	mov	r2, ip
   11e9a:	2d00      	cmp	r5, #0
   11e9c:	d1f5      	bne.n	11e8a <strlcat+0x2e>
   11e9e:	785a      	ldrb	r2, [r3, #1]
   11ea0:	3301      	adds	r3, #1
   11ea2:	2a00      	cmp	r2, #0
   11ea4:	d1f5      	bne.n	11e92 <strlcat+0x36>
   11ea6:	1a5b      	subs	r3, r3, r1
   11ea8:	441e      	add	r6, r3
   11eaa:	2300      	movs	r3, #0
   11eac:	f88c 3000 	strb.w	r3, [ip]
   11eb0:	4630      	mov	r0, r6
   11eb2:	bd70      	pop	{r4, r5, r6, pc}
   11eb4:	4616      	mov	r6, r2
   11eb6:	4608      	mov	r0, r1
   11eb8:	f000 fb62 	bl	12580 <strlen>
   11ebc:	4406      	add	r6, r0
   11ebe:	4630      	mov	r0, r6
   11ec0:	bd70      	pop	{r4, r5, r6, pc}
   11ec2:	bf00      	nop

00011ec4 <strlcpy>:
   11ec4:	b1c2      	cbz	r2, 11ef8 <strlcpy+0x34>
   11ec6:	eb00 0c02 	add.w	ip, r0, r2
   11eca:	b500      	push	{lr}
   11ecc:	460b      	mov	r3, r1
   11ece:	f10c 3eff 	add.w	lr, ip, #4294967295
   11ed2:	e004      	b.n	11ede <strlcpy+0x1a>
   11ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
   11ed8:	f800 2b01 	strb.w	r2, [r0], #1
   11edc:	b142      	cbz	r2, 11ef0 <strlcpy+0x2c>
   11ede:	4586      	cmp	lr, r0
   11ee0:	d1f8      	bne.n	11ed4 <strlcpy+0x10>
   11ee2:	2200      	movs	r2, #0
   11ee4:	f80c 2c01 	strb.w	r2, [ip, #-1]
   11ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
   11eec:	2a00      	cmp	r2, #0
   11eee:	d1fb      	bne.n	11ee8 <strlcpy+0x24>
   11ef0:	1a59      	subs	r1, r3, r1
   11ef2:	1e48      	subs	r0, r1, #1
   11ef4:	f85d fb04 	ldr.w	pc, [sp], #4
   11ef8:	460b      	mov	r3, r1
   11efa:	f813 2b01 	ldrb.w	r2, [r3], #1
   11efe:	2a00      	cmp	r2, #0
   11f00:	d1fb      	bne.n	11efa <strlcpy+0x36>
   11f02:	1a59      	subs	r1, r3, r1
   11f04:	1e48      	subs	r0, r1, #1
   11f06:	4770      	bx	lr

00011f08 <strncmp>:
   11f08:	2a00      	cmp	r2, #0
   11f0a:	d03e      	beq.n	11f8a <strncmp+0x82>
   11f0c:	ea40 0301 	orr.w	r3, r0, r1
   11f10:	079b      	lsls	r3, r3, #30
   11f12:	b530      	push	{r4, r5, lr}
   11f14:	4684      	mov	ip, r0
   11f16:	d12f      	bne.n	11f78 <strncmp+0x70>
   11f18:	2a03      	cmp	r2, #3
   11f1a:	d92d      	bls.n	11f78 <strncmp+0x70>
   11f1c:	460b      	mov	r3, r1
   11f1e:	e008      	b.n	11f32 <strncmp+0x2a>
   11f20:	3a04      	subs	r2, #4
   11f22:	4684      	mov	ip, r0
   11f24:	4619      	mov	r1, r3
   11f26:	d025      	beq.n	11f74 <strncmp+0x6c>
   11f28:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   11f2c:	d122      	bne.n	11f74 <strncmp+0x6c>
   11f2e:	2a03      	cmp	r2, #3
   11f30:	d922      	bls.n	11f78 <strncmp+0x70>
   11f32:	6804      	ldr	r4, [r0, #0]
   11f34:	4619      	mov	r1, r3
   11f36:	f853 5b04 	ldr.w	r5, [r3], #4
   11f3a:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   11f3e:	42ac      	cmp	r4, r5
   11f40:	4684      	mov	ip, r0
   11f42:	ea2e 0e04 	bic.w	lr, lr, r4
   11f46:	f100 0004 	add.w	r0, r0, #4
   11f4a:	d0e9      	beq.n	11f20 <strncmp+0x18>
   11f4c:	f89c 0000 	ldrb.w	r0, [ip]
   11f50:	780c      	ldrb	r4, [r1, #0]
   11f52:	42a0      	cmp	r0, r4
   11f54:	d11b      	bne.n	11f8e <strncmp+0x86>
   11f56:	46e6      	mov	lr, ip
   11f58:	b168      	cbz	r0, 11f76 <strncmp+0x6e>
   11f5a:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   11f5e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   11f62:	eba2 030e 	sub.w	r3, r2, lr
   11f66:	42a0      	cmp	r0, r4
   11f68:	f103 33ff 	add.w	r3, r3, #4294967295
   11f6c:	d10f      	bne.n	11f8e <strncmp+0x86>
   11f6e:	eb1c 0303 	adds.w	r3, ip, r3
   11f72:	d1f1      	bne.n	11f58 <strncmp+0x50>
   11f74:	2000      	movs	r0, #0
   11f76:	bd30      	pop	{r4, r5, pc}
   11f78:	f89c 0000 	ldrb.w	r0, [ip]
   11f7c:	780c      	ldrb	r4, [r1, #0]
   11f7e:	4284      	cmp	r4, r0
   11f80:	d105      	bne.n	11f8e <strncmp+0x86>
   11f82:	2a01      	cmp	r2, #1
   11f84:	d0f6      	beq.n	11f74 <strncmp+0x6c>
   11f86:	46e6      	mov	lr, ip
   11f88:	e7e6      	b.n	11f58 <strncmp+0x50>
   11f8a:	4610      	mov	r0, r2
   11f8c:	4770      	bx	lr
   11f8e:	1b00      	subs	r0, r0, r4
   11f90:	bd30      	pop	{r4, r5, pc}
   11f92:	bf00      	nop

00011f94 <strncpy>:
   11f94:	ea40 0301 	orr.w	r3, r0, r1
   11f98:	079b      	lsls	r3, r3, #30
   11f9a:	b530      	push	{r4, r5, lr}
   11f9c:	d101      	bne.n	11fa2 <strncpy+0xe>
   11f9e:	2a03      	cmp	r2, #3
   11fa0:	d80f      	bhi.n	11fc2 <strncpy+0x2e>
   11fa2:	4684      	mov	ip, r0
   11fa4:	f101 3eff 	add.w	lr, r1, #4294967295
   11fa8:	e007      	b.n	11fba <strncpy+0x26>
   11faa:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   11fae:	f803 1b01 	strb.w	r1, [r3], #1
   11fb2:	1e54      	subs	r4, r2, #1
   11fb4:	b1c1      	cbz	r1, 11fe8 <strncpy+0x54>
   11fb6:	469c      	mov	ip, r3
   11fb8:	4622      	mov	r2, r4
   11fba:	4663      	mov	r3, ip
   11fbc:	2a00      	cmp	r2, #0
   11fbe:	d1f4      	bne.n	11faa <strncpy+0x16>
   11fc0:	bd30      	pop	{r4, r5, pc}
   11fc2:	460b      	mov	r3, r1
   11fc4:	4684      	mov	ip, r0
   11fc6:	4619      	mov	r1, r3
   11fc8:	f853 5b04 	ldr.w	r5, [r3], #4
   11fcc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   11fd0:	ea24 0405 	bic.w	r4, r4, r5
   11fd4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   11fd8:	d1e4      	bne.n	11fa4 <strncpy+0x10>
   11fda:	3a04      	subs	r2, #4
   11fdc:	2a03      	cmp	r2, #3
   11fde:	f84c 5b04 	str.w	r5, [ip], #4
   11fe2:	4619      	mov	r1, r3
   11fe4:	d8ef      	bhi.n	11fc6 <strncpy+0x32>
   11fe6:	e7dd      	b.n	11fa4 <strncpy+0x10>
   11fe8:	4494      	add	ip, r2
   11fea:	2c00      	cmp	r4, #0
   11fec:	d0e8      	beq.n	11fc0 <strncpy+0x2c>
   11fee:	f803 1b01 	strb.w	r1, [r3], #1
   11ff2:	4563      	cmp	r3, ip
   11ff4:	d1fb      	bne.n	11fee <strncpy+0x5a>
   11ff6:	bd30      	pop	{r4, r5, pc}

00011ff8 <__locale_mb_cur_max>:
   11ff8:	4b01      	ldr	r3, [pc, #4]	; (12000 <__locale_mb_cur_max+0x8>)
   11ffa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   11ffe:	4770      	bx	lr
   12000:	20008a2c 	.word	0x20008a2c

00012004 <_close_r>:
   12004:	b538      	push	{r3, r4, r5, lr}
   12006:	4d07      	ldr	r5, [pc, #28]	; (12024 <_close_r+0x20>)
   12008:	2200      	movs	r2, #0
   1200a:	4604      	mov	r4, r0
   1200c:	4608      	mov	r0, r1
   1200e:	602a      	str	r2, [r5, #0]
   12010:	f7fc f9d0 	bl	e3b4 <_close>
   12014:	1c43      	adds	r3, r0, #1
   12016:	d000      	beq.n	1201a <_close_r+0x16>
   12018:	bd38      	pop	{r3, r4, r5, pc}
   1201a:	682b      	ldr	r3, [r5, #0]
   1201c:	2b00      	cmp	r3, #0
   1201e:	d0fb      	beq.n	12018 <_close_r+0x14>
   12020:	6023      	str	r3, [r4, #0]
   12022:	bd38      	pop	{r3, r4, r5, pc}
   12024:	20034b4c 	.word	0x20034b4c

00012028 <_lseek_r>:
   12028:	b538      	push	{r3, r4, r5, lr}
   1202a:	460c      	mov	r4, r1
   1202c:	4d08      	ldr	r5, [pc, #32]	; (12050 <_lseek_r+0x28>)
   1202e:	4684      	mov	ip, r0
   12030:	4611      	mov	r1, r2
   12032:	4620      	mov	r0, r4
   12034:	461a      	mov	r2, r3
   12036:	2300      	movs	r3, #0
   12038:	602b      	str	r3, [r5, #0]
   1203a:	4664      	mov	r4, ip
   1203c:	f7fc f9c6 	bl	e3cc <_lseek>
   12040:	1c43      	adds	r3, r0, #1
   12042:	d000      	beq.n	12046 <_lseek_r+0x1e>
   12044:	bd38      	pop	{r3, r4, r5, pc}
   12046:	682b      	ldr	r3, [r5, #0]
   12048:	2b00      	cmp	r3, #0
   1204a:	d0fb      	beq.n	12044 <_lseek_r+0x1c>
   1204c:	6023      	str	r3, [r4, #0]
   1204e:	bd38      	pop	{r3, r4, r5, pc}
   12050:	20034b4c 	.word	0x20034b4c

00012054 <_read_r>:
   12054:	b538      	push	{r3, r4, r5, lr}
   12056:	460c      	mov	r4, r1
   12058:	4d08      	ldr	r5, [pc, #32]	; (1207c <_read_r+0x28>)
   1205a:	4684      	mov	ip, r0
   1205c:	4611      	mov	r1, r2
   1205e:	4620      	mov	r0, r4
   12060:	461a      	mov	r2, r3
   12062:	2300      	movs	r3, #0
   12064:	602b      	str	r3, [r5, #0]
   12066:	4664      	mov	r4, ip
   12068:	f7fc f9a2 	bl	e3b0 <_read>
   1206c:	1c43      	adds	r3, r0, #1
   1206e:	d000      	beq.n	12072 <_read_r+0x1e>
   12070:	bd38      	pop	{r3, r4, r5, pc}
   12072:	682b      	ldr	r3, [r5, #0]
   12074:	2b00      	cmp	r3, #0
   12076:	d0fb      	beq.n	12070 <_read_r+0x1c>
   12078:	6023      	str	r3, [r4, #0]
   1207a:	bd38      	pop	{r3, r4, r5, pc}
   1207c:	20034b4c 	.word	0x20034b4c

00012080 <_sbrk_r>:
   12080:	b538      	push	{r3, r4, r5, lr}
   12082:	4d07      	ldr	r5, [pc, #28]	; (120a0 <_sbrk_r+0x20>)
   12084:	2200      	movs	r2, #0
   12086:	4604      	mov	r4, r0
   12088:	4608      	mov	r0, r1
   1208a:	602a      	str	r2, [r5, #0]
   1208c:	f7fc f976 	bl	e37c <_sbrk>
   12090:	1c43      	adds	r3, r0, #1
   12092:	d000      	beq.n	12096 <_sbrk_r+0x16>
   12094:	bd38      	pop	{r3, r4, r5, pc}
   12096:	682b      	ldr	r3, [r5, #0]
   12098:	2b00      	cmp	r3, #0
   1209a:	d0fb      	beq.n	12094 <_sbrk_r+0x14>
   1209c:	6023      	str	r3, [r4, #0]
   1209e:	bd38      	pop	{r3, r4, r5, pc}
   120a0:	20034b4c 	.word	0x20034b4c

000120a4 <_write_r>:
   120a4:	b538      	push	{r3, r4, r5, lr}
   120a6:	460c      	mov	r4, r1
   120a8:	4d08      	ldr	r5, [pc, #32]	; (120cc <_write_r+0x28>)
   120aa:	4684      	mov	ip, r0
   120ac:	4611      	mov	r1, r2
   120ae:	4620      	mov	r0, r4
   120b0:	461a      	mov	r2, r3
   120b2:	2300      	movs	r3, #0
   120b4:	602b      	str	r3, [r5, #0]
   120b6:	4664      	mov	r4, ip
   120b8:	f7fa fff6 	bl	d0a8 <_write>
   120bc:	1c43      	adds	r3, r0, #1
   120be:	d000      	beq.n	120c2 <_write_r+0x1e>
   120c0:	bd38      	pop	{r3, r4, r5, pc}
   120c2:	682b      	ldr	r3, [r5, #0]
   120c4:	2b00      	cmp	r3, #0
   120c6:	d0fb      	beq.n	120c0 <_write_r+0x1c>
   120c8:	6023      	str	r3, [r4, #0]
   120ca:	bd38      	pop	{r3, r4, r5, pc}
   120cc:	20034b4c 	.word	0x20034b4c

000120d0 <__errno>:
   120d0:	4b01      	ldr	r3, [pc, #4]	; (120d8 <__errno+0x8>)
   120d2:	6818      	ldr	r0, [r3, #0]
   120d4:	4770      	bx	lr
   120d6:	bf00      	nop
   120d8:	20008fb4 	.word	0x20008fb4

000120dc <__libc_init_array>:
   120dc:	b570      	push	{r4, r5, r6, lr}
   120de:	4e0d      	ldr	r6, [pc, #52]	; (12114 <__libc_init_array+0x38>)
   120e0:	4d0d      	ldr	r5, [pc, #52]	; (12118 <__libc_init_array+0x3c>)
   120e2:	1b76      	subs	r6, r6, r5
   120e4:	10b6      	asrs	r6, r6, #2
   120e6:	d006      	beq.n	120f6 <__libc_init_array+0x1a>
   120e8:	2400      	movs	r4, #0
   120ea:	f855 3b04 	ldr.w	r3, [r5], #4
   120ee:	3401      	adds	r4, #1
   120f0:	4798      	blx	r3
   120f2:	42a6      	cmp	r6, r4
   120f4:	d1f9      	bne.n	120ea <__libc_init_array+0xe>
   120f6:	4e09      	ldr	r6, [pc, #36]	; (1211c <__libc_init_array+0x40>)
   120f8:	4d09      	ldr	r5, [pc, #36]	; (12120 <__libc_init_array+0x44>)
   120fa:	1b76      	subs	r6, r6, r5
   120fc:	f008 fc80 	bl	1aa00 <___init_veneer>
   12100:	10b6      	asrs	r6, r6, #2
   12102:	d006      	beq.n	12112 <__libc_init_array+0x36>
   12104:	2400      	movs	r4, #0
   12106:	f855 3b04 	ldr.w	r3, [r5], #4
   1210a:	3401      	adds	r4, #1
   1210c:	4798      	blx	r3
   1210e:	42a6      	cmp	r6, r4
   12110:	d1f9      	bne.n	12106 <__libc_init_array+0x2a>
   12112:	bd70      	pop	{r4, r5, r6, pc}
   12114:	60002708 	.word	0x60002708
   12118:	60002708 	.word	0x60002708
   1211c:	60002718 	.word	0x60002718
   12120:	60002708 	.word	0x60002708

00012124 <__retarget_lock_init_recursive>:
   12124:	4770      	bx	lr
   12126:	bf00      	nop

00012128 <__retarget_lock_close_recursive>:
   12128:	4770      	bx	lr
   1212a:	bf00      	nop

0001212c <__retarget_lock_acquire_recursive>:
   1212c:	4770      	bx	lr
   1212e:	bf00      	nop

00012130 <__retarget_lock_release_recursive>:
   12130:	4770      	bx	lr
   12132:	bf00      	nop
	...
   12140:	eba2 0003 	sub.w	r0, r2, r3
   12144:	4770      	bx	lr
   12146:	bf00      	nop

00012148 <strcmp>:
   12148:	7802      	ldrb	r2, [r0, #0]
   1214a:	780b      	ldrb	r3, [r1, #0]
   1214c:	2a01      	cmp	r2, #1
   1214e:	bf28      	it	cs
   12150:	429a      	cmpcs	r2, r3
   12152:	d1f5      	bne.n	12140 <__retarget_lock_release_recursive+0x10>
   12154:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   12158:	ea40 0401 	orr.w	r4, r0, r1
   1215c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   12160:	f06f 0c00 	mvn.w	ip, #0
   12164:	ea4f 7244 	mov.w	r2, r4, lsl #29
   12168:	b312      	cbz	r2, 121b0 <strcmp+0x68>
   1216a:	ea80 0401 	eor.w	r4, r0, r1
   1216e:	f014 0f07 	tst.w	r4, #7
   12172:	d16a      	bne.n	1224a <strcmp+0x102>
   12174:	f000 0407 	and.w	r4, r0, #7
   12178:	f020 0007 	bic.w	r0, r0, #7
   1217c:	f004 0503 	and.w	r5, r4, #3
   12180:	f021 0107 	bic.w	r1, r1, #7
   12184:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   12188:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1218c:	f014 0f04 	tst.w	r4, #4
   12190:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   12194:	fa0c f405 	lsl.w	r4, ip, r5
   12198:	ea62 0204 	orn	r2, r2, r4
   1219c:	ea66 0604 	orn	r6, r6, r4
   121a0:	d00a      	beq.n	121b8 <strcmp+0x70>
   121a2:	ea63 0304 	orn	r3, r3, r4
   121a6:	4662      	mov	r2, ip
   121a8:	ea67 0704 	orn	r7, r7, r4
   121ac:	4666      	mov	r6, ip
   121ae:	e003      	b.n	121b8 <strcmp+0x70>
   121b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   121b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   121b8:	fa82 f54c 	uadd8	r5, r2, ip
   121bc:	ea82 0406 	eor.w	r4, r2, r6
   121c0:	faa4 f48c 	sel	r4, r4, ip
   121c4:	bb6c      	cbnz	r4, 12222 <strcmp+0xda>
   121c6:	fa83 f54c 	uadd8	r5, r3, ip
   121ca:	ea83 0507 	eor.w	r5, r3, r7
   121ce:	faa5 f58c 	sel	r5, r5, ip
   121d2:	b995      	cbnz	r5, 121fa <strcmp+0xb2>
   121d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   121d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   121dc:	fa82 f54c 	uadd8	r5, r2, ip
   121e0:	ea82 0406 	eor.w	r4, r2, r6
   121e4:	faa4 f48c 	sel	r4, r4, ip
   121e8:	fa83 f54c 	uadd8	r5, r3, ip
   121ec:	ea83 0507 	eor.w	r5, r3, r7
   121f0:	faa5 f58c 	sel	r5, r5, ip
   121f4:	4325      	orrs	r5, r4
   121f6:	d0db      	beq.n	121b0 <strcmp+0x68>
   121f8:	b99c      	cbnz	r4, 12222 <strcmp+0xda>
   121fa:	ba2d      	rev	r5, r5
   121fc:	fab5 f485 	clz	r4, r5
   12200:	f024 0407 	bic.w	r4, r4, #7
   12204:	fa27 f104 	lsr.w	r1, r7, r4
   12208:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1220c:	fa23 f304 	lsr.w	r3, r3, r4
   12210:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   12214:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12218:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1221c:	eba0 0001 	sub.w	r0, r0, r1
   12220:	4770      	bx	lr
   12222:	ba24      	rev	r4, r4
   12224:	fab4 f484 	clz	r4, r4
   12228:	f024 0407 	bic.w	r4, r4, #7
   1222c:	fa26 f104 	lsr.w	r1, r6, r4
   12230:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   12234:	fa22 f204 	lsr.w	r2, r2, r4
   12238:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1223c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12240:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12244:	eba0 0001 	sub.w	r0, r0, r1
   12248:	4770      	bx	lr
   1224a:	f014 0f03 	tst.w	r4, #3
   1224e:	d13c      	bne.n	122ca <strcmp+0x182>
   12250:	f010 0403 	ands.w	r4, r0, #3
   12254:	d128      	bne.n	122a8 <strcmp+0x160>
   12256:	f850 2b08 	ldr.w	r2, [r0], #8
   1225a:	f851 3b08 	ldr.w	r3, [r1], #8
   1225e:	fa82 f54c 	uadd8	r5, r2, ip
   12262:	ea82 0503 	eor.w	r5, r2, r3
   12266:	faa5 f58c 	sel	r5, r5, ip
   1226a:	b95d      	cbnz	r5, 12284 <strcmp+0x13c>
   1226c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   12270:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12274:	fa82 f54c 	uadd8	r5, r2, ip
   12278:	ea82 0503 	eor.w	r5, r2, r3
   1227c:	faa5 f58c 	sel	r5, r5, ip
   12280:	2d00      	cmp	r5, #0
   12282:	d0e8      	beq.n	12256 <strcmp+0x10e>
   12284:	ba2d      	rev	r5, r5
   12286:	fab5 f485 	clz	r4, r5
   1228a:	f024 0407 	bic.w	r4, r4, #7
   1228e:	fa23 f104 	lsr.w	r1, r3, r4
   12292:	fa22 f204 	lsr.w	r2, r2, r4
   12296:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1229a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1229e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   122a2:	eba0 0001 	sub.w	r0, r0, r1
   122a6:	4770      	bx	lr
   122a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   122ac:	f020 0003 	bic.w	r0, r0, #3
   122b0:	f850 2b08 	ldr.w	r2, [r0], #8
   122b4:	f021 0103 	bic.w	r1, r1, #3
   122b8:	f851 3b08 	ldr.w	r3, [r1], #8
   122bc:	fa0c f404 	lsl.w	r4, ip, r4
   122c0:	ea62 0204 	orn	r2, r2, r4
   122c4:	ea63 0304 	orn	r3, r3, r4
   122c8:	e7c9      	b.n	1225e <strcmp+0x116>
   122ca:	f010 0403 	ands.w	r4, r0, #3
   122ce:	d01a      	beq.n	12306 <strcmp+0x1be>
   122d0:	eba1 0104 	sub.w	r1, r1, r4
   122d4:	f020 0003 	bic.w	r0, r0, #3
   122d8:	07e4      	lsls	r4, r4, #31
   122da:	f850 2b04 	ldr.w	r2, [r0], #4
   122de:	d006      	beq.n	122ee <strcmp+0x1a6>
   122e0:	d20f      	bcs.n	12302 <strcmp+0x1ba>
   122e2:	788b      	ldrb	r3, [r1, #2]
   122e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   122e8:	1ae4      	subs	r4, r4, r3
   122ea:	d106      	bne.n	122fa <strcmp+0x1b2>
   122ec:	b12b      	cbz	r3, 122fa <strcmp+0x1b2>
   122ee:	78cb      	ldrb	r3, [r1, #3]
   122f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   122f4:	1ae4      	subs	r4, r4, r3
   122f6:	d100      	bne.n	122fa <strcmp+0x1b2>
   122f8:	b91b      	cbnz	r3, 12302 <strcmp+0x1ba>
   122fa:	4620      	mov	r0, r4
   122fc:	f85d 4b10 	ldr.w	r4, [sp], #16
   12300:	4770      	bx	lr
   12302:	f101 0104 	add.w	r1, r1, #4
   12306:	f850 2b04 	ldr.w	r2, [r0], #4
   1230a:	07cc      	lsls	r4, r1, #31
   1230c:	f021 0103 	bic.w	r1, r1, #3
   12310:	f851 3b04 	ldr.w	r3, [r1], #4
   12314:	d848      	bhi.n	123a8 <strcmp+0x260>
   12316:	d224      	bcs.n	12362 <strcmp+0x21a>
   12318:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1231c:	fa82 f54c 	uadd8	r5, r2, ip
   12320:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   12324:	faa5 f58c 	sel	r5, r5, ip
   12328:	d10a      	bne.n	12340 <strcmp+0x1f8>
   1232a:	b965      	cbnz	r5, 12346 <strcmp+0x1fe>
   1232c:	f851 3b04 	ldr.w	r3, [r1], #4
   12330:	ea84 0402 	eor.w	r4, r4, r2
   12334:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   12338:	d10e      	bne.n	12358 <strcmp+0x210>
   1233a:	f850 2b04 	ldr.w	r2, [r0], #4
   1233e:	e7eb      	b.n	12318 <strcmp+0x1d0>
   12340:	ea4f 2313 	mov.w	r3, r3, lsr #8
   12344:	e055      	b.n	123f2 <strcmp+0x2aa>
   12346:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1234a:	d14d      	bne.n	123e8 <strcmp+0x2a0>
   1234c:	7808      	ldrb	r0, [r1, #0]
   1234e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12352:	f1c0 0000 	rsb	r0, r0, #0
   12356:	4770      	bx	lr
   12358:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1235c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   12360:	e047      	b.n	123f2 <strcmp+0x2aa>
   12362:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   12366:	fa82 f54c 	uadd8	r5, r2, ip
   1236a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1236e:	faa5 f58c 	sel	r5, r5, ip
   12372:	d10a      	bne.n	1238a <strcmp+0x242>
   12374:	b965      	cbnz	r5, 12390 <strcmp+0x248>
   12376:	f851 3b04 	ldr.w	r3, [r1], #4
   1237a:	ea84 0402 	eor.w	r4, r4, r2
   1237e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   12382:	d10c      	bne.n	1239e <strcmp+0x256>
   12384:	f850 2b04 	ldr.w	r2, [r0], #4
   12388:	e7eb      	b.n	12362 <strcmp+0x21a>
   1238a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1238e:	e030      	b.n	123f2 <strcmp+0x2aa>
   12390:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   12394:	d128      	bne.n	123e8 <strcmp+0x2a0>
   12396:	880b      	ldrh	r3, [r1, #0]
   12398:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1239c:	e029      	b.n	123f2 <strcmp+0x2aa>
   1239e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   123a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   123a6:	e024      	b.n	123f2 <strcmp+0x2aa>
   123a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   123ac:	fa82 f54c 	uadd8	r5, r2, ip
   123b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   123b4:	faa5 f58c 	sel	r5, r5, ip
   123b8:	d10a      	bne.n	123d0 <strcmp+0x288>
   123ba:	b965      	cbnz	r5, 123d6 <strcmp+0x28e>
   123bc:	f851 3b04 	ldr.w	r3, [r1], #4
   123c0:	ea84 0402 	eor.w	r4, r4, r2
   123c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   123c8:	d109      	bne.n	123de <strcmp+0x296>
   123ca:	f850 2b04 	ldr.w	r2, [r0], #4
   123ce:	e7eb      	b.n	123a8 <strcmp+0x260>
   123d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   123d4:	e00d      	b.n	123f2 <strcmp+0x2aa>
   123d6:	f015 0fff 	tst.w	r5, #255	; 0xff
   123da:	d105      	bne.n	123e8 <strcmp+0x2a0>
   123dc:	680b      	ldr	r3, [r1, #0]
   123de:	ea4f 2212 	mov.w	r2, r2, lsr #8
   123e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   123e6:	e004      	b.n	123f2 <strcmp+0x2aa>
   123e8:	f04f 0000 	mov.w	r0, #0
   123ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   123f0:	4770      	bx	lr
   123f2:	ba12      	rev	r2, r2
   123f4:	ba1b      	rev	r3, r3
   123f6:	fa82 f44c 	uadd8	r4, r2, ip
   123fa:	ea82 0403 	eor.w	r4, r2, r3
   123fe:	faa4 f58c 	sel	r5, r4, ip
   12402:	fab5 f485 	clz	r4, r5
   12406:	fa02 f204 	lsl.w	r2, r2, r4
   1240a:	fa03 f304 	lsl.w	r3, r3, r4
   1240e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   12412:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12416:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1241a:	4770      	bx	lr

0001241c <strcpy>:
   1241c:	ea80 0201 	eor.w	r2, r0, r1
   12420:	4684      	mov	ip, r0
   12422:	f012 0f03 	tst.w	r2, #3
   12426:	d14f      	bne.n	124c8 <strcpy+0xac>
   12428:	f011 0f03 	tst.w	r1, #3
   1242c:	d132      	bne.n	12494 <strcpy+0x78>
   1242e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   12432:	f011 0f04 	tst.w	r1, #4
   12436:	f851 3b04 	ldr.w	r3, [r1], #4
   1243a:	d00b      	beq.n	12454 <strcpy+0x38>
   1243c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12440:	439a      	bics	r2, r3
   12442:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12446:	bf04      	itt	eq
   12448:	f84c 3b04 	streq.w	r3, [ip], #4
   1244c:	f851 3b04 	ldreq.w	r3, [r1], #4
   12450:	d116      	bne.n	12480 <strcpy+0x64>
   12452:	bf00      	nop
   12454:	f851 4b04 	ldr.w	r4, [r1], #4
   12458:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1245c:	439a      	bics	r2, r3
   1245e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12462:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   12466:	d10b      	bne.n	12480 <strcpy+0x64>
   12468:	f84c 3b04 	str.w	r3, [ip], #4
   1246c:	43a2      	bics	r2, r4
   1246e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12472:	bf04      	itt	eq
   12474:	f851 3b04 	ldreq.w	r3, [r1], #4
   12478:	f84c 4b04 	streq.w	r4, [ip], #4
   1247c:	d0ea      	beq.n	12454 <strcpy+0x38>
   1247e:	4623      	mov	r3, r4
   12480:	f80c 3b01 	strb.w	r3, [ip], #1
   12484:	f013 0fff 	tst.w	r3, #255	; 0xff
   12488:	ea4f 2333 	mov.w	r3, r3, ror #8
   1248c:	d1f8      	bne.n	12480 <strcpy+0x64>
   1248e:	f85d 4b04 	ldr.w	r4, [sp], #4
   12492:	4770      	bx	lr
   12494:	f011 0f01 	tst.w	r1, #1
   12498:	d006      	beq.n	124a8 <strcpy+0x8c>
   1249a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1249e:	f80c 2b01 	strb.w	r2, [ip], #1
   124a2:	2a00      	cmp	r2, #0
   124a4:	bf08      	it	eq
   124a6:	4770      	bxeq	lr
   124a8:	f011 0f02 	tst.w	r1, #2
   124ac:	d0bf      	beq.n	1242e <strcpy+0x12>
   124ae:	f831 2b02 	ldrh.w	r2, [r1], #2
   124b2:	f012 0fff 	tst.w	r2, #255	; 0xff
   124b6:	bf16      	itet	ne
   124b8:	f82c 2b02 	strhne.w	r2, [ip], #2
   124bc:	f88c 2000 	strbeq.w	r2, [ip]
   124c0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   124c4:	d1b3      	bne.n	1242e <strcpy+0x12>
   124c6:	4770      	bx	lr
   124c8:	f811 2b01 	ldrb.w	r2, [r1], #1
   124cc:	f80c 2b01 	strb.w	r2, [ip], #1
   124d0:	2a00      	cmp	r2, #0
   124d2:	d1f9      	bne.n	124c8 <strcpy+0xac>
   124d4:	4770      	bx	lr
   124d6:	bf00      	nop
	...

000124e0 <memchr>:
   124e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   124e4:	2a10      	cmp	r2, #16
   124e6:	db2b      	blt.n	12540 <memchr+0x60>
   124e8:	f010 0f07 	tst.w	r0, #7
   124ec:	d008      	beq.n	12500 <memchr+0x20>
   124ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   124f2:	3a01      	subs	r2, #1
   124f4:	428b      	cmp	r3, r1
   124f6:	d02d      	beq.n	12554 <memchr+0x74>
   124f8:	f010 0f07 	tst.w	r0, #7
   124fc:	b342      	cbz	r2, 12550 <memchr+0x70>
   124fe:	d1f6      	bne.n	124ee <memchr+0xe>
   12500:	b4f0      	push	{r4, r5, r6, r7}
   12502:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   12506:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1250a:	f022 0407 	bic.w	r4, r2, #7
   1250e:	f07f 0700 	mvns.w	r7, #0
   12512:	2300      	movs	r3, #0
   12514:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   12518:	3c08      	subs	r4, #8
   1251a:	ea85 0501 	eor.w	r5, r5, r1
   1251e:	ea86 0601 	eor.w	r6, r6, r1
   12522:	fa85 f547 	uadd8	r5, r5, r7
   12526:	faa3 f587 	sel	r5, r3, r7
   1252a:	fa86 f647 	uadd8	r6, r6, r7
   1252e:	faa5 f687 	sel	r6, r5, r7
   12532:	b98e      	cbnz	r6, 12558 <memchr+0x78>
   12534:	d1ee      	bne.n	12514 <memchr+0x34>
   12536:	bcf0      	pop	{r4, r5, r6, r7}
   12538:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1253c:	f002 0207 	and.w	r2, r2, #7
   12540:	b132      	cbz	r2, 12550 <memchr+0x70>
   12542:	f810 3b01 	ldrb.w	r3, [r0], #1
   12546:	3a01      	subs	r2, #1
   12548:	ea83 0301 	eor.w	r3, r3, r1
   1254c:	b113      	cbz	r3, 12554 <memchr+0x74>
   1254e:	d1f8      	bne.n	12542 <memchr+0x62>
   12550:	2000      	movs	r0, #0
   12552:	4770      	bx	lr
   12554:	3801      	subs	r0, #1
   12556:	4770      	bx	lr
   12558:	2d00      	cmp	r5, #0
   1255a:	bf06      	itte	eq
   1255c:	4635      	moveq	r5, r6
   1255e:	3803      	subeq	r0, #3
   12560:	3807      	subne	r0, #7
   12562:	f015 0f01 	tst.w	r5, #1
   12566:	d107      	bne.n	12578 <memchr+0x98>
   12568:	3001      	adds	r0, #1
   1256a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1256e:	bf02      	ittt	eq
   12570:	3001      	addeq	r0, #1
   12572:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   12576:	3001      	addeq	r0, #1
   12578:	bcf0      	pop	{r4, r5, r6, r7}
   1257a:	3801      	subs	r0, #1
   1257c:	4770      	bx	lr
   1257e:	bf00      	nop

00012580 <strlen>:
   12580:	f890 f000 	pld	[r0]
   12584:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12588:	f020 0107 	bic.w	r1, r0, #7
   1258c:	f06f 0c00 	mvn.w	ip, #0
   12590:	f010 0407 	ands.w	r4, r0, #7
   12594:	f891 f020 	pld	[r1, #32]
   12598:	f040 8049 	bne.w	1262e <strlen+0xae>
   1259c:	f04f 0400 	mov.w	r4, #0
   125a0:	f06f 0007 	mvn.w	r0, #7
   125a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   125a8:	f891 f040 	pld	[r1, #64]	; 0x40
   125ac:	f100 0008 	add.w	r0, r0, #8
   125b0:	fa82 f24c 	uadd8	r2, r2, ip
   125b4:	faa4 f28c 	sel	r2, r4, ip
   125b8:	fa83 f34c 	uadd8	r3, r3, ip
   125bc:	faa2 f38c 	sel	r3, r2, ip
   125c0:	bb4b      	cbnz	r3, 12616 <strlen+0x96>
   125c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   125c6:	fa82 f24c 	uadd8	r2, r2, ip
   125ca:	f100 0008 	add.w	r0, r0, #8
   125ce:	faa4 f28c 	sel	r2, r4, ip
   125d2:	fa83 f34c 	uadd8	r3, r3, ip
   125d6:	faa2 f38c 	sel	r3, r2, ip
   125da:	b9e3      	cbnz	r3, 12616 <strlen+0x96>
   125dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   125e0:	fa82 f24c 	uadd8	r2, r2, ip
   125e4:	f100 0008 	add.w	r0, r0, #8
   125e8:	faa4 f28c 	sel	r2, r4, ip
   125ec:	fa83 f34c 	uadd8	r3, r3, ip
   125f0:	faa2 f38c 	sel	r3, r2, ip
   125f4:	b97b      	cbnz	r3, 12616 <strlen+0x96>
   125f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   125fa:	f101 0120 	add.w	r1, r1, #32
   125fe:	fa82 f24c 	uadd8	r2, r2, ip
   12602:	f100 0008 	add.w	r0, r0, #8
   12606:	faa4 f28c 	sel	r2, r4, ip
   1260a:	fa83 f34c 	uadd8	r3, r3, ip
   1260e:	faa2 f38c 	sel	r3, r2, ip
   12612:	2b00      	cmp	r3, #0
   12614:	d0c6      	beq.n	125a4 <strlen+0x24>
   12616:	2a00      	cmp	r2, #0
   12618:	bf04      	itt	eq
   1261a:	3004      	addeq	r0, #4
   1261c:	461a      	moveq	r2, r3
   1261e:	ba12      	rev	r2, r2
   12620:	fab2 f282 	clz	r2, r2
   12624:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   12628:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1262c:	4770      	bx	lr
   1262e:	e9d1 2300 	ldrd	r2, r3, [r1]
   12632:	f004 0503 	and.w	r5, r4, #3
   12636:	f1c4 0000 	rsb	r0, r4, #0
   1263a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1263e:	f014 0f04 	tst.w	r4, #4
   12642:	f891 f040 	pld	[r1, #64]	; 0x40
   12646:	fa0c f505 	lsl.w	r5, ip, r5
   1264a:	ea62 0205 	orn	r2, r2, r5
   1264e:	bf1c      	itt	ne
   12650:	ea63 0305 	ornne	r3, r3, r5
   12654:	4662      	movne	r2, ip
   12656:	f04f 0400 	mov.w	r4, #0
   1265a:	e7a9      	b.n	125b0 <strlen+0x30>
   1265c:	0000      	movs	r0, r0
	...

00012660 <nan>:
   12660:	ed9f 0b01 	vldr	d0, [pc, #4]	; 12668 <nan+0x8>
   12664:	4770      	bx	lr
   12666:	bf00      	nop
   12668:	00000000 	.word	0x00000000
   1266c:	7ff80000 	.word	0x7ff80000

00012670 <nanf>:
   12670:	ed9f 0a01 	vldr	s0, [pc, #4]	; 12678 <nanf+0x8>
   12674:	4770      	bx	lr
   12676:	bf00      	nop
   12678:	7fc00000 	.word	0x7fc00000

0001267c <__register_exitproc>:
   1267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12680:	f8df a07c 	ldr.w	sl, [pc, #124]	; 12700 <__register_exitproc+0x84>
   12684:	4606      	mov	r6, r0
   12686:	f8da 0000 	ldr.w	r0, [sl]
   1268a:	4698      	mov	r8, r3
   1268c:	460f      	mov	r7, r1
   1268e:	4691      	mov	r9, r2
   12690:	f7ff fd4c 	bl	1212c <__retarget_lock_acquire_recursive>
   12694:	4b18      	ldr	r3, [pc, #96]	; (126f8 <__register_exitproc+0x7c>)
   12696:	681c      	ldr	r4, [r3, #0]
   12698:	b324      	cbz	r4, 126e4 <__register_exitproc+0x68>
   1269a:	6865      	ldr	r5, [r4, #4]
   1269c:	2d1f      	cmp	r5, #31
   1269e:	dc24      	bgt.n	126ea <__register_exitproc+0x6e>
   126a0:	b95e      	cbnz	r6, 126ba <__register_exitproc+0x3e>
   126a2:	1c6b      	adds	r3, r5, #1
   126a4:	3502      	adds	r5, #2
   126a6:	f8da 0000 	ldr.w	r0, [sl]
   126aa:	6063      	str	r3, [r4, #4]
   126ac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   126b0:	f7ff fd3e 	bl	12130 <__retarget_lock_release_recursive>
   126b4:	2000      	movs	r0, #0
   126b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   126ba:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   126be:	2301      	movs	r3, #1
   126c0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   126c4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   126c8:	40ab      	lsls	r3, r5
   126ca:	431a      	orrs	r2, r3
   126cc:	2e02      	cmp	r6, #2
   126ce:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   126d2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   126d6:	d1e4      	bne.n	126a2 <__register_exitproc+0x26>
   126d8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   126dc:	431a      	orrs	r2, r3
   126de:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   126e2:	e7de      	b.n	126a2 <__register_exitproc+0x26>
   126e4:	4c05      	ldr	r4, [pc, #20]	; (126fc <__register_exitproc+0x80>)
   126e6:	601c      	str	r4, [r3, #0]
   126e8:	e7d7      	b.n	1269a <__register_exitproc+0x1e>
   126ea:	f8da 0000 	ldr.w	r0, [sl]
   126ee:	f7ff fd1f 	bl	12130 <__retarget_lock_release_recursive>
   126f2:	f04f 30ff 	mov.w	r0, #4294967295
   126f6:	e7de      	b.n	126b6 <__register_exitproc+0x3a>
   126f8:	20034800 	.word	0x20034800
   126fc:	20034804 	.word	0x20034804
   12700:	20008a20 	.word	0x20008a20

00012704 <_malloc_trim_r>:
   12704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12706:	4f24      	ldr	r7, [pc, #144]	; (12798 <_malloc_trim_r+0x94>)
   12708:	460c      	mov	r4, r1
   1270a:	4606      	mov	r6, r0
   1270c:	f7fd fe94 	bl	10438 <__malloc_lock>
   12710:	68bb      	ldr	r3, [r7, #8]
   12712:	685d      	ldr	r5, [r3, #4]
   12714:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   12718:	310f      	adds	r1, #15
   1271a:	f025 0503 	bic.w	r5, r5, #3
   1271e:	194b      	adds	r3, r1, r5
   12720:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   12724:	f023 030f 	bic.w	r3, r3, #15
   12728:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   1272c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   12730:	db07      	blt.n	12742 <_malloc_trim_r+0x3e>
   12732:	2100      	movs	r1, #0
   12734:	4630      	mov	r0, r6
   12736:	f7ff fca3 	bl	12080 <_sbrk_r>
   1273a:	68bb      	ldr	r3, [r7, #8]
   1273c:	442b      	add	r3, r5
   1273e:	4298      	cmp	r0, r3
   12740:	d004      	beq.n	1274c <_malloc_trim_r+0x48>
   12742:	4630      	mov	r0, r6
   12744:	f7fd fe7e 	bl	10444 <__malloc_unlock>
   12748:	2000      	movs	r0, #0
   1274a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1274c:	4261      	negs	r1, r4
   1274e:	4630      	mov	r0, r6
   12750:	f7ff fc96 	bl	12080 <_sbrk_r>
   12754:	3001      	adds	r0, #1
   12756:	d00d      	beq.n	12774 <_malloc_trim_r+0x70>
   12758:	4a10      	ldr	r2, [pc, #64]	; (1279c <_malloc_trim_r+0x98>)
   1275a:	68bb      	ldr	r3, [r7, #8]
   1275c:	1b2d      	subs	r5, r5, r4
   1275e:	f045 0501 	orr.w	r5, r5, #1
   12762:	605d      	str	r5, [r3, #4]
   12764:	6813      	ldr	r3, [r2, #0]
   12766:	4630      	mov	r0, r6
   12768:	1b1b      	subs	r3, r3, r4
   1276a:	6013      	str	r3, [r2, #0]
   1276c:	f7fd fe6a 	bl	10444 <__malloc_unlock>
   12770:	2001      	movs	r0, #1
   12772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12774:	2100      	movs	r1, #0
   12776:	4630      	mov	r0, r6
   12778:	f7ff fc82 	bl	12080 <_sbrk_r>
   1277c:	68ba      	ldr	r2, [r7, #8]
   1277e:	1a83      	subs	r3, r0, r2
   12780:	2b0f      	cmp	r3, #15
   12782:	ddde      	ble.n	12742 <_malloc_trim_r+0x3e>
   12784:	f043 0301 	orr.w	r3, r3, #1
   12788:	6053      	str	r3, [r2, #4]
   1278a:	4b05      	ldr	r3, [pc, #20]	; (127a0 <_malloc_trim_r+0x9c>)
   1278c:	4903      	ldr	r1, [pc, #12]	; (1279c <_malloc_trim_r+0x98>)
   1278e:	681b      	ldr	r3, [r3, #0]
   12790:	1ac0      	subs	r0, r0, r3
   12792:	6008      	str	r0, [r1, #0]
   12794:	e7d5      	b.n	12742 <_malloc_trim_r+0x3e>
   12796:	bf00      	nop
   12798:	20008b98 	.word	0x20008b98
   1279c:	200349a0 	.word	0x200349a0
   127a0:	20008fa0 	.word	0x20008fa0

000127a4 <_free_r>:
   127a4:	2900      	cmp	r1, #0
   127a6:	d061      	beq.n	1286c <_free_r+0xc8>
   127a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127aa:	460c      	mov	r4, r1
   127ac:	4606      	mov	r6, r0
   127ae:	f7fd fe43 	bl	10438 <__malloc_lock>
   127b2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   127b6:	4f7b      	ldr	r7, [pc, #492]	; (129a4 <_free_r+0x200>)
   127b8:	f1a4 0508 	sub.w	r5, r4, #8
   127bc:	f022 0101 	bic.w	r1, r2, #1
   127c0:	eb05 0c01 	add.w	ip, r5, r1
   127c4:	68b8      	ldr	r0, [r7, #8]
   127c6:	f8dc 3004 	ldr.w	r3, [ip, #4]
   127ca:	4560      	cmp	r0, ip
   127cc:	f023 0303 	bic.w	r3, r3, #3
   127d0:	f000 808b 	beq.w	128ea <_free_r+0x146>
   127d4:	07d2      	lsls	r2, r2, #31
   127d6:	f8cc 3004 	str.w	r3, [ip, #4]
   127da:	d432      	bmi.n	12842 <_free_r+0x9e>
   127dc:	f854 2c08 	ldr.w	r2, [r4, #-8]
   127e0:	1aad      	subs	r5, r5, r2
   127e2:	4411      	add	r1, r2
   127e4:	68aa      	ldr	r2, [r5, #8]
   127e6:	f107 0008 	add.w	r0, r7, #8
   127ea:	4282      	cmp	r2, r0
   127ec:	d06a      	beq.n	128c4 <_free_r+0x120>
   127ee:	eb0c 0403 	add.w	r4, ip, r3
   127f2:	f8d4 e004 	ldr.w	lr, [r4, #4]
   127f6:	68ec      	ldr	r4, [r5, #12]
   127f8:	60d4      	str	r4, [r2, #12]
   127fa:	f01e 0f01 	tst.w	lr, #1
   127fe:	60a2      	str	r2, [r4, #8]
   12800:	f000 8097 	beq.w	12932 <_free_r+0x18e>
   12804:	f041 0301 	orr.w	r3, r1, #1
   12808:	606b      	str	r3, [r5, #4]
   1280a:	f8cc 1000 	str.w	r1, [ip]
   1280e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12812:	d235      	bcs.n	12880 <_free_r+0xdc>
   12814:	6878      	ldr	r0, [r7, #4]
   12816:	08cb      	lsrs	r3, r1, #3
   12818:	2201      	movs	r2, #1
   1281a:	0949      	lsrs	r1, r1, #5
   1281c:	3301      	adds	r3, #1
   1281e:	408a      	lsls	r2, r1
   12820:	4302      	orrs	r2, r0
   12822:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   12826:	607a      	str	r2, [r7, #4]
   12828:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   1282c:	3a08      	subs	r2, #8
   1282e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   12832:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   12836:	60cd      	str	r5, [r1, #12]
   12838:	4630      	mov	r0, r6
   1283a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1283e:	f7fd be01 	b.w	10444 <__malloc_unlock>
   12842:	eb0c 0203 	add.w	r2, ip, r3
   12846:	6852      	ldr	r2, [r2, #4]
   12848:	07d0      	lsls	r0, r2, #31
   1284a:	d410      	bmi.n	1286e <_free_r+0xca>
   1284c:	4419      	add	r1, r3
   1284e:	f107 0008 	add.w	r0, r7, #8
   12852:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12856:	4283      	cmp	r3, r0
   12858:	d073      	beq.n	12942 <_free_r+0x19e>
   1285a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1285e:	60da      	str	r2, [r3, #12]
   12860:	6093      	str	r3, [r2, #8]
   12862:	f041 0301 	orr.w	r3, r1, #1
   12866:	606b      	str	r3, [r5, #4]
   12868:	5069      	str	r1, [r5, r1]
   1286a:	e7d0      	b.n	1280e <_free_r+0x6a>
   1286c:	4770      	bx	lr
   1286e:	f041 0301 	orr.w	r3, r1, #1
   12872:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12876:	f844 3c04 	str.w	r3, [r4, #-4]
   1287a:	f8cc 1000 	str.w	r1, [ip]
   1287e:	d3c9      	bcc.n	12814 <_free_r+0x70>
   12880:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   12884:	ea4f 2351 	mov.w	r3, r1, lsr #9
   12888:	d248      	bcs.n	1291c <_free_r+0x178>
   1288a:	098b      	lsrs	r3, r1, #6
   1288c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   12890:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12894:	00c3      	lsls	r3, r0, #3
   12896:	18f8      	adds	r0, r7, r3
   12898:	58fb      	ldr	r3, [r7, r3]
   1289a:	3808      	subs	r0, #8
   1289c:	4298      	cmp	r0, r3
   1289e:	d059      	beq.n	12954 <_free_r+0x1b0>
   128a0:	685a      	ldr	r2, [r3, #4]
   128a2:	f022 0203 	bic.w	r2, r2, #3
   128a6:	428a      	cmp	r2, r1
   128a8:	d902      	bls.n	128b0 <_free_r+0x10c>
   128aa:	689b      	ldr	r3, [r3, #8]
   128ac:	4298      	cmp	r0, r3
   128ae:	d1f7      	bne.n	128a0 <_free_r+0xfc>
   128b0:	68d8      	ldr	r0, [r3, #12]
   128b2:	e9c5 3002 	strd	r3, r0, [r5, #8]
   128b6:	6085      	str	r5, [r0, #8]
   128b8:	60dd      	str	r5, [r3, #12]
   128ba:	4630      	mov	r0, r6
   128bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   128c0:	f7fd bdc0 	b.w	10444 <__malloc_unlock>
   128c4:	eb0c 0203 	add.w	r2, ip, r3
   128c8:	6852      	ldr	r2, [r2, #4]
   128ca:	07d2      	lsls	r2, r2, #31
   128cc:	d463      	bmi.n	12996 <_free_r+0x1f2>
   128ce:	440b      	add	r3, r1
   128d0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   128d4:	60ca      	str	r2, [r1, #12]
   128d6:	6091      	str	r1, [r2, #8]
   128d8:	f043 0201 	orr.w	r2, r3, #1
   128dc:	606a      	str	r2, [r5, #4]
   128de:	4630      	mov	r0, r6
   128e0:	50eb      	str	r3, [r5, r3]
   128e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   128e6:	f7fd bdad 	b.w	10444 <__malloc_unlock>
   128ea:	440b      	add	r3, r1
   128ec:	07d1      	lsls	r1, r2, #31
   128ee:	d407      	bmi.n	12900 <_free_r+0x15c>
   128f0:	f854 2c08 	ldr.w	r2, [r4, #-8]
   128f4:	1aad      	subs	r5, r5, r2
   128f6:	4413      	add	r3, r2
   128f8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   128fc:	60ca      	str	r2, [r1, #12]
   128fe:	6091      	str	r1, [r2, #8]
   12900:	f043 0201 	orr.w	r2, r3, #1
   12904:	606a      	str	r2, [r5, #4]
   12906:	4a28      	ldr	r2, [pc, #160]	; (129a8 <_free_r+0x204>)
   12908:	60bd      	str	r5, [r7, #8]
   1290a:	6812      	ldr	r2, [r2, #0]
   1290c:	429a      	cmp	r2, r3
   1290e:	d893      	bhi.n	12838 <_free_r+0x94>
   12910:	4b26      	ldr	r3, [pc, #152]	; (129ac <_free_r+0x208>)
   12912:	4630      	mov	r0, r6
   12914:	6819      	ldr	r1, [r3, #0]
   12916:	f7ff fef5 	bl	12704 <_malloc_trim_r>
   1291a:	e78d      	b.n	12838 <_free_r+0x94>
   1291c:	2b14      	cmp	r3, #20
   1291e:	d90a      	bls.n	12936 <_free_r+0x192>
   12920:	2b54      	cmp	r3, #84	; 0x54
   12922:	d81f      	bhi.n	12964 <_free_r+0x1c0>
   12924:	0b0b      	lsrs	r3, r1, #12
   12926:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1292a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   1292e:	00c3      	lsls	r3, r0, #3
   12930:	e7b1      	b.n	12896 <_free_r+0xf2>
   12932:	4419      	add	r1, r3
   12934:	e78d      	b.n	12852 <_free_r+0xae>
   12936:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1293a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   1293e:	00c3      	lsls	r3, r0, #3
   12940:	e7a9      	b.n	12896 <_free_r+0xf2>
   12942:	f041 0301 	orr.w	r3, r1, #1
   12946:	e9c7 5504 	strd	r5, r5, [r7, #16]
   1294a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   1294e:	606b      	str	r3, [r5, #4]
   12950:	5069      	str	r1, [r5, r1]
   12952:	e771      	b.n	12838 <_free_r+0x94>
   12954:	6879      	ldr	r1, [r7, #4]
   12956:	1092      	asrs	r2, r2, #2
   12958:	2401      	movs	r4, #1
   1295a:	fa04 f202 	lsl.w	r2, r4, r2
   1295e:	430a      	orrs	r2, r1
   12960:	607a      	str	r2, [r7, #4]
   12962:	e7a6      	b.n	128b2 <_free_r+0x10e>
   12964:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   12968:	d806      	bhi.n	12978 <_free_r+0x1d4>
   1296a:	0bcb      	lsrs	r3, r1, #15
   1296c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   12970:	f103 0277 	add.w	r2, r3, #119	; 0x77
   12974:	00c3      	lsls	r3, r0, #3
   12976:	e78e      	b.n	12896 <_free_r+0xf2>
   12978:	f240 5254 	movw	r2, #1364	; 0x554
   1297c:	4293      	cmp	r3, r2
   1297e:	d806      	bhi.n	1298e <_free_r+0x1ea>
   12980:	0c8b      	lsrs	r3, r1, #18
   12982:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   12986:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1298a:	00c3      	lsls	r3, r0, #3
   1298c:	e783      	b.n	12896 <_free_r+0xf2>
   1298e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   12992:	227e      	movs	r2, #126	; 0x7e
   12994:	e77f      	b.n	12896 <_free_r+0xf2>
   12996:	f041 0301 	orr.w	r3, r1, #1
   1299a:	606b      	str	r3, [r5, #4]
   1299c:	f8cc 1000 	str.w	r1, [ip]
   129a0:	e74a      	b.n	12838 <_free_r+0x94>
   129a2:	bf00      	nop
   129a4:	20008b98 	.word	0x20008b98
   129a8:	20008fa4 	.word	0x20008fa4
   129ac:	200349d0 	.word	0x200349d0

000129b0 <rshift>:
   129b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129b4:	6904      	ldr	r4, [r0, #16]
   129b6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   129ba:	dd2f      	ble.n	12a1c <rshift+0x6c>
   129bc:	f100 0e14 	add.w	lr, r0, #20
   129c0:	114e      	asrs	r6, r1, #5
   129c2:	f011 0c1f 	ands.w	ip, r1, #31
   129c6:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   129ca:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   129ce:	d02b      	beq.n	12a28 <rshift+0x78>
   129d0:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   129d4:	3304      	adds	r3, #4
   129d6:	429d      	cmp	r5, r3
   129d8:	fa21 f10c 	lsr.w	r1, r1, ip
   129dc:	f1cc 0820 	rsb	r8, ip, #32
   129e0:	d918      	bls.n	12a14 <rshift+0x64>
   129e2:	4677      	mov	r7, lr
   129e4:	681a      	ldr	r2, [r3, #0]
   129e6:	fa02 f208 	lsl.w	r2, r2, r8
   129ea:	430a      	orrs	r2, r1
   129ec:	f847 2b04 	str.w	r2, [r7], #4
   129f0:	f853 1b04 	ldr.w	r1, [r3], #4
   129f4:	429d      	cmp	r5, r3
   129f6:	fa21 f10c 	lsr.w	r1, r1, ip
   129fa:	d8f3      	bhi.n	129e4 <rshift+0x34>
   129fc:	1ba3      	subs	r3, r4, r6
   129fe:	009b      	lsls	r3, r3, #2
   12a00:	3b05      	subs	r3, #5
   12a02:	089b      	lsrs	r3, r3, #2
   12a04:	3301      	adds	r3, #1
   12a06:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   12a0a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   12a0e:	b1c9      	cbz	r1, 12a44 <rshift+0x94>
   12a10:	3404      	adds	r4, #4
   12a12:	e017      	b.n	12a44 <rshift+0x94>
   12a14:	6141      	str	r1, [r0, #20]
   12a16:	4674      	mov	r4, lr
   12a18:	2900      	cmp	r1, #0
   12a1a:	d1f9      	bne.n	12a10 <rshift+0x60>
   12a1c:	2300      	movs	r3, #0
   12a1e:	6103      	str	r3, [r0, #16]
   12a20:	2300      	movs	r3, #0
   12a22:	6143      	str	r3, [r0, #20]
   12a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a28:	429d      	cmp	r5, r3
   12a2a:	bf88      	it	hi
   12a2c:	f100 0210 	addhi.w	r2, r0, #16
   12a30:	d9f4      	bls.n	12a1c <rshift+0x6c>
   12a32:	f853 1b04 	ldr.w	r1, [r3], #4
   12a36:	f842 1f04 	str.w	r1, [r2, #4]!
   12a3a:	429d      	cmp	r5, r3
   12a3c:	d8f9      	bhi.n	12a32 <rshift+0x82>
   12a3e:	1ba4      	subs	r4, r4, r6
   12a40:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   12a44:	eba4 030e 	sub.w	r3, r4, lr
   12a48:	109b      	asrs	r3, r3, #2
   12a4a:	4574      	cmp	r4, lr
   12a4c:	6103      	str	r3, [r0, #16]
   12a4e:	d0e7      	beq.n	12a20 <rshift+0x70>
   12a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012a54 <__gethex>:
   12a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a58:	ed2d 8b02 	vpush	{d8}
   12a5c:	680c      	ldr	r4, [r1, #0]
   12a5e:	468b      	mov	fp, r1
   12a60:	78a1      	ldrb	r1, [r4, #2]
   12a62:	b085      	sub	sp, #20
   12a64:	2930      	cmp	r1, #48	; 0x30
   12a66:	ee08 0a10 	vmov	s16, r0
   12a6a:	4692      	mov	sl, r2
   12a6c:	9302      	str	r3, [sp, #8]
   12a6e:	f040 81ce 	bne.w	12e0e <__gethex+0x3ba>
   12a72:	f06f 0001 	mvn.w	r0, #1
   12a76:	1b00      	subs	r0, r0, r4
   12a78:	1ce2      	adds	r2, r4, #3
   12a7a:	1883      	adds	r3, r0, r2
   12a7c:	4614      	mov	r4, r2
   12a7e:	f812 1b01 	ldrb.w	r1, [r2], #1
   12a82:	2930      	cmp	r1, #48	; 0x30
   12a84:	d0f9      	beq.n	12a7a <__gethex+0x26>
   12a86:	f8df 8300 	ldr.w	r8, [pc, #768]	; 12d88 <__gethex+0x334>
   12a8a:	f818 2001 	ldrb.w	r2, [r8, r1]
   12a8e:	2a00      	cmp	r2, #0
   12a90:	f000 80e5 	beq.w	12c5e <__gethex+0x20a>
   12a94:	7822      	ldrb	r2, [r4, #0]
   12a96:	2700      	movs	r7, #0
   12a98:	f818 2002 	ldrb.w	r2, [r8, r2]
   12a9c:	463d      	mov	r5, r7
   12a9e:	4626      	mov	r6, r4
   12aa0:	b12a      	cbz	r2, 12aae <__gethex+0x5a>
   12aa2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   12aa6:	f818 2002 	ldrb.w	r2, [r8, r2]
   12aaa:	2a00      	cmp	r2, #0
   12aac:	d1f9      	bne.n	12aa2 <__gethex+0x4e>
   12aae:	49b5      	ldr	r1, [pc, #724]	; (12d84 <__gethex+0x330>)
   12ab0:	9301      	str	r3, [sp, #4]
   12ab2:	2201      	movs	r2, #1
   12ab4:	4630      	mov	r0, r6
   12ab6:	f7ff fa27 	bl	11f08 <strncmp>
   12aba:	9b01      	ldr	r3, [sp, #4]
   12abc:	4681      	mov	r9, r0
   12abe:	2800      	cmp	r0, #0
   12ac0:	d04d      	beq.n	12b5e <__gethex+0x10a>
   12ac2:	2d00      	cmp	r5, #0
   12ac4:	d14e      	bne.n	12b64 <__gethex+0x110>
   12ac6:	7832      	ldrb	r2, [r6, #0]
   12ac8:	46a9      	mov	r9, r5
   12aca:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   12ace:	2a50      	cmp	r2, #80	; 0x50
   12ad0:	4635      	mov	r5, r6
   12ad2:	d050      	beq.n	12b76 <__gethex+0x122>
   12ad4:	f8cb 6000 	str.w	r6, [fp]
   12ad8:	2f00      	cmp	r7, #0
   12ada:	d169      	bne.n	12bb0 <__gethex+0x15c>
   12adc:	1b2b      	subs	r3, r5, r4
   12ade:	3b01      	subs	r3, #1
   12ae0:	2b07      	cmp	r3, #7
   12ae2:	4639      	mov	r1, r7
   12ae4:	dd04      	ble.n	12af0 <__gethex+0x9c>
   12ae6:	105b      	asrs	r3, r3, #1
   12ae8:	2b07      	cmp	r3, #7
   12aea:	f101 0101 	add.w	r1, r1, #1
   12aee:	dcfa      	bgt.n	12ae6 <__gethex+0x92>
   12af0:	ee18 0a10 	vmov	r0, s16
   12af4:	f000 fb82 	bl	131fc <_Balloc>
   12af8:	4683      	mov	fp, r0
   12afa:	2800      	cmp	r0, #0
   12afc:	f000 8266 	beq.w	12fcc <__gethex+0x578>
   12b00:	f100 0614 	add.w	r6, r0, #20
   12b04:	42ac      	cmp	r4, r5
   12b06:	9601      	str	r6, [sp, #4]
   12b08:	f080 81d2 	bcs.w	12eb0 <__gethex+0x45c>
   12b0c:	2700      	movs	r7, #0
   12b0e:	f8cd 900c 	str.w	r9, [sp, #12]
   12b12:	499c      	ldr	r1, [pc, #624]	; (12d84 <__gethex+0x330>)
   12b14:	46a1      	mov	r9, r4
   12b16:	463c      	mov	r4, r7
   12b18:	e00c      	b.n	12b34 <__gethex+0xe0>
   12b1a:	2f20      	cmp	r7, #32
   12b1c:	d019      	beq.n	12b52 <__gethex+0xfe>
   12b1e:	4638      	mov	r0, r7
   12b20:	3704      	adds	r7, #4
   12b22:	782a      	ldrb	r2, [r5, #0]
   12b24:	f818 2002 	ldrb.w	r2, [r8, r2]
   12b28:	f002 020f 	and.w	r2, r2, #15
   12b2c:	4082      	lsls	r2, r0
   12b2e:	4314      	orrs	r4, r2
   12b30:	454d      	cmp	r5, r9
   12b32:	d047      	beq.n	12bc4 <__gethex+0x170>
   12b34:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   12b38:	2a2e      	cmp	r2, #46	; 0x2e
   12b3a:	d1ee      	bne.n	12b1a <__gethex+0xc6>
   12b3c:	454d      	cmp	r5, r9
   12b3e:	d3ec      	bcc.n	12b1a <__gethex+0xc6>
   12b40:	2201      	movs	r2, #1
   12b42:	4628      	mov	r0, r5
   12b44:	f7ff f9e0 	bl	11f08 <strncmp>
   12b48:	498e      	ldr	r1, [pc, #568]	; (12d84 <__gethex+0x330>)
   12b4a:	2800      	cmp	r0, #0
   12b4c:	d0f0      	beq.n	12b30 <__gethex+0xdc>
   12b4e:	2f20      	cmp	r7, #32
   12b50:	d1e5      	bne.n	12b1e <__gethex+0xca>
   12b52:	2000      	movs	r0, #0
   12b54:	f846 4b04 	str.w	r4, [r6], #4
   12b58:	2704      	movs	r7, #4
   12b5a:	4604      	mov	r4, r0
   12b5c:	e7e1      	b.n	12b22 <__gethex+0xce>
   12b5e:	2d00      	cmp	r5, #0
   12b60:	f000 8142 	beq.w	12de8 <__gethex+0x394>
   12b64:	7832      	ldrb	r2, [r6, #0]
   12b66:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   12b6a:	1bad      	subs	r5, r5, r6
   12b6c:	2a50      	cmp	r2, #80	; 0x50
   12b6e:	ea4f 0985 	mov.w	r9, r5, lsl #2
   12b72:	4635      	mov	r5, r6
   12b74:	d1ae      	bne.n	12ad4 <__gethex+0x80>
   12b76:	786a      	ldrb	r2, [r5, #1]
   12b78:	2a2b      	cmp	r2, #43	; 0x2b
   12b7a:	f000 8125 	beq.w	12dc8 <__gethex+0x374>
   12b7e:	2a2d      	cmp	r2, #45	; 0x2d
   12b80:	f000 80a5 	beq.w	12cce <__gethex+0x27a>
   12b84:	1c6e      	adds	r6, r5, #1
   12b86:	2000      	movs	r0, #0
   12b88:	f818 1002 	ldrb.w	r1, [r8, r2]
   12b8c:	1e4a      	subs	r2, r1, #1
   12b8e:	2a18      	cmp	r2, #24
   12b90:	f200 809b 	bhi.w	12cca <__gethex+0x276>
   12b94:	7872      	ldrb	r2, [r6, #1]
   12b96:	f818 2002 	ldrb.w	r2, [r8, r2]
   12b9a:	3910      	subs	r1, #16
   12b9c:	3601      	adds	r6, #1
   12b9e:	2a00      	cmp	r2, #0
   12ba0:	d15a      	bne.n	12c58 <__gethex+0x204>
   12ba2:	b100      	cbz	r0, 12ba6 <__gethex+0x152>
   12ba4:	4249      	negs	r1, r1
   12ba6:	4489      	add	r9, r1
   12ba8:	f8cb 6000 	str.w	r6, [fp]
   12bac:	2f00      	cmp	r7, #0
   12bae:	d095      	beq.n	12adc <__gethex+0x88>
   12bb0:	2b00      	cmp	r3, #0
   12bb2:	bf14      	ite	ne
   12bb4:	2500      	movne	r5, #0
   12bb6:	2506      	moveq	r5, #6
   12bb8:	4628      	mov	r0, r5
   12bba:	b005      	add	sp, #20
   12bbc:	ecbd 8b02 	vpop	{d8}
   12bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
   12bc8:	4623      	mov	r3, r4
   12bca:	f846 3b04 	str.w	r3, [r6], #4
   12bce:	4618      	mov	r0, r3
   12bd0:	9b01      	ldr	r3, [sp, #4]
   12bd2:	1af6      	subs	r6, r6, r3
   12bd4:	10b6      	asrs	r6, r6, #2
   12bd6:	f8cb 6010 	str.w	r6, [fp, #16]
   12bda:	f000 fbe9 	bl	133b0 <__hi0bits>
   12bde:	0176      	lsls	r6, r6, #5
   12be0:	f8da 4000 	ldr.w	r4, [sl]
   12be4:	1a30      	subs	r0, r6, r0
   12be6:	42a0      	cmp	r0, r4
   12be8:	dc75      	bgt.n	12cd6 <__gethex+0x282>
   12bea:	f2c0 80ef 	blt.w	12dcc <__gethex+0x378>
   12bee:	2700      	movs	r7, #0
   12bf0:	f8da 3008 	ldr.w	r3, [sl, #8]
   12bf4:	454b      	cmp	r3, r9
   12bf6:	f2c0 8151 	blt.w	12e9c <__gethex+0x448>
   12bfa:	f8da 3004 	ldr.w	r3, [sl, #4]
   12bfe:	454b      	cmp	r3, r9
   12c00:	dd4a      	ble.n	12c98 <__gethex+0x244>
   12c02:	eba3 0909 	sub.w	r9, r3, r9
   12c06:	454c      	cmp	r4, r9
   12c08:	f300 8082 	bgt.w	12d10 <__gethex+0x2bc>
   12c0c:	f8da 200c 	ldr.w	r2, [sl, #12]
   12c10:	2a02      	cmp	r2, #2
   12c12:	f000 8165 	beq.w	12ee0 <__gethex+0x48c>
   12c16:	2a03      	cmp	r2, #3
   12c18:	f000 8181 	beq.w	12f1e <__gethex+0x4ca>
   12c1c:	2a01      	cmp	r2, #1
   12c1e:	f000 816f 	beq.w	12f00 <__gethex+0x4ac>
   12c22:	ee18 0a10 	vmov	r0, s16
   12c26:	4659      	mov	r1, fp
   12c28:	f000 fb0e 	bl	13248 <_Bfree>
   12c2c:	2550      	movs	r5, #80	; 0x50
   12c2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12c30:	2300      	movs	r3, #0
   12c32:	4628      	mov	r0, r5
   12c34:	6013      	str	r3, [r2, #0]
   12c36:	b005      	add	sp, #20
   12c38:	ecbd 8b02 	vpop	{d8}
   12c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c40:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   12c44:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   12c48:	f1a2 0110 	sub.w	r1, r2, #16
   12c4c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   12c50:	f818 2002 	ldrb.w	r2, [r8, r2]
   12c54:	2a00      	cmp	r2, #0
   12c56:	d0a4      	beq.n	12ba2 <__gethex+0x14e>
   12c58:	2a19      	cmp	r2, #25
   12c5a:	ddf1      	ble.n	12c40 <__gethex+0x1ec>
   12c5c:	e7a1      	b.n	12ba2 <__gethex+0x14e>
   12c5e:	4949      	ldr	r1, [pc, #292]	; (12d84 <__gethex+0x330>)
   12c60:	9301      	str	r3, [sp, #4]
   12c62:	2201      	movs	r2, #1
   12c64:	4620      	mov	r0, r4
   12c66:	f7ff f94f 	bl	11f08 <strncmp>
   12c6a:	9b01      	ldr	r3, [sp, #4]
   12c6c:	2800      	cmp	r0, #0
   12c6e:	d16d      	bne.n	12d4c <__gethex+0x2f8>
   12c70:	7861      	ldrb	r1, [r4, #1]
   12c72:	f818 2001 	ldrb.w	r2, [r8, r1]
   12c76:	1c65      	adds	r5, r4, #1
   12c78:	2a00      	cmp	r2, #0
   12c7a:	d069      	beq.n	12d50 <__gethex+0x2fc>
   12c7c:	2930      	cmp	r1, #48	; 0x30
   12c7e:	462c      	mov	r4, r5
   12c80:	d105      	bne.n	12c8e <__gethex+0x23a>
   12c82:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   12c86:	2b30      	cmp	r3, #48	; 0x30
   12c88:	d0fb      	beq.n	12c82 <__gethex+0x22e>
   12c8a:	f818 2003 	ldrb.w	r2, [r8, r3]
   12c8e:	fab2 f782 	clz	r7, r2
   12c92:	097f      	lsrs	r7, r7, #5
   12c94:	2301      	movs	r3, #1
   12c96:	e702      	b.n	12a9e <__gethex+0x4a>
   12c98:	2501      	movs	r5, #1
   12c9a:	b157      	cbz	r7, 12cb2 <__gethex+0x25e>
   12c9c:	f8da 300c 	ldr.w	r3, [sl, #12]
   12ca0:	2b02      	cmp	r3, #2
   12ca2:	d05d      	beq.n	12d60 <__gethex+0x30c>
   12ca4:	2b03      	cmp	r3, #3
   12ca6:	d05f      	beq.n	12d68 <__gethex+0x314>
   12ca8:	2b01      	cmp	r3, #1
   12caa:	f000 8084 	beq.w	12db6 <__gethex+0x362>
   12cae:	f045 0510 	orr.w	r5, r5, #16
   12cb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12cb4:	f8c3 b000 	str.w	fp, [r3]
   12cb8:	9b02      	ldr	r3, [sp, #8]
   12cba:	4628      	mov	r0, r5
   12cbc:	f8c3 9000 	str.w	r9, [r3]
   12cc0:	b005      	add	sp, #20
   12cc2:	ecbd 8b02 	vpop	{d8}
   12cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cca:	462e      	mov	r6, r5
   12ccc:	e702      	b.n	12ad4 <__gethex+0x80>
   12cce:	2001      	movs	r0, #1
   12cd0:	78aa      	ldrb	r2, [r5, #2]
   12cd2:	1cae      	adds	r6, r5, #2
   12cd4:	e758      	b.n	12b88 <__gethex+0x134>
   12cd6:	1b06      	subs	r6, r0, r4
   12cd8:	4631      	mov	r1, r6
   12cda:	4658      	mov	r0, fp
   12cdc:	f000 ff96 	bl	13c0c <__any_on>
   12ce0:	4607      	mov	r7, r0
   12ce2:	b178      	cbz	r0, 12d04 <__gethex+0x2b0>
   12ce4:	1e72      	subs	r2, r6, #1
   12ce6:	1153      	asrs	r3, r2, #5
   12ce8:	9901      	ldr	r1, [sp, #4]
   12cea:	2701      	movs	r7, #1
   12cec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   12cf0:	f002 031f 	and.w	r3, r2, #31
   12cf4:	fa07 f303 	lsl.w	r3, r7, r3
   12cf8:	420b      	tst	r3, r1
   12cfa:	d003      	beq.n	12d04 <__gethex+0x2b0>
   12cfc:	42ba      	cmp	r2, r7
   12cfe:	f300 80e2 	bgt.w	12ec6 <__gethex+0x472>
   12d02:	2702      	movs	r7, #2
   12d04:	4631      	mov	r1, r6
   12d06:	4658      	mov	r0, fp
   12d08:	44b1      	add	r9, r6
   12d0a:	f7ff fe51 	bl	129b0 <rshift>
   12d0e:	e76f      	b.n	12bf0 <__gethex+0x19c>
   12d10:	f109 35ff 	add.w	r5, r9, #4294967295
   12d14:	2f00      	cmp	r7, #0
   12d16:	f040 80ce 	bne.w	12eb6 <__gethex+0x462>
   12d1a:	2d00      	cmp	r5, #0
   12d1c:	f040 80cd 	bne.w	12eba <__gethex+0x466>
   12d20:	116b      	asrs	r3, r5, #5
   12d22:	9a01      	ldr	r2, [sp, #4]
   12d24:	f005 051f 	and.w	r5, r5, #31
   12d28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   12d2c:	2301      	movs	r3, #1
   12d2e:	40ab      	lsls	r3, r5
   12d30:	4213      	tst	r3, r2
   12d32:	4649      	mov	r1, r9
   12d34:	4658      	mov	r0, fp
   12d36:	bf18      	it	ne
   12d38:	f047 0702 	orrne.w	r7, r7, #2
   12d3c:	eba4 0409 	sub.w	r4, r4, r9
   12d40:	f7ff fe36 	bl	129b0 <rshift>
   12d44:	2502      	movs	r5, #2
   12d46:	f8da 9004 	ldr.w	r9, [sl, #4]
   12d4a:	e7a6      	b.n	12c9a <__gethex+0x246>
   12d4c:	7821      	ldrb	r1, [r4, #0]
   12d4e:	4625      	mov	r5, r4
   12d50:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   12d54:	2950      	cmp	r1, #80	; 0x50
   12d56:	f000 80bf 	beq.w	12ed8 <__gethex+0x484>
   12d5a:	f8cb 5000 	str.w	r5, [fp]
   12d5e:	e727      	b.n	12bb0 <__gethex+0x15c>
   12d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12d62:	f1c3 0301 	rsb	r3, r3, #1
   12d66:	9311      	str	r3, [sp, #68]	; 0x44
   12d68:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12d6a:	2b00      	cmp	r3, #0
   12d6c:	d09f      	beq.n	12cae <__gethex+0x25a>
   12d6e:	f8db 7010 	ldr.w	r7, [fp, #16]
   12d72:	f8dd 8004 	ldr.w	r8, [sp, #4]
   12d76:	00ba      	lsls	r2, r7, #2
   12d78:	4643      	mov	r3, r8
   12d7a:	9201      	str	r2, [sp, #4]
   12d7c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   12d80:	2100      	movs	r1, #0
   12d82:	e007      	b.n	12d94 <__gethex+0x340>
   12d84:	20008178 	.word	0x20008178
   12d88:	20000d74 	.word	0x20000d74
   12d8c:	4298      	cmp	r0, r3
   12d8e:	f843 1c04 	str.w	r1, [r3, #-4]
   12d92:	d93f      	bls.n	12e14 <__gethex+0x3c0>
   12d94:	461e      	mov	r6, r3
   12d96:	f853 2b04 	ldr.w	r2, [r3], #4
   12d9a:	f1b2 3fff 	cmp.w	r2, #4294967295
   12d9e:	d0f5      	beq.n	12d8c <__gethex+0x338>
   12da0:	3201      	adds	r2, #1
   12da2:	2d02      	cmp	r5, #2
   12da4:	6032      	str	r2, [r6, #0]
   12da6:	f000 80bf 	beq.w	12f28 <__gethex+0x4d4>
   12daa:	f014 041f 	ands.w	r4, r4, #31
   12dae:	f040 80e7 	bne.w	12f80 <__gethex+0x52c>
   12db2:	2521      	movs	r5, #33	; 0x21
   12db4:	e77d      	b.n	12cb2 <__gethex+0x25e>
   12db6:	07ba      	lsls	r2, r7, #30
   12db8:	f57f af79 	bpl.w	12cae <__gethex+0x25a>
   12dbc:	9b01      	ldr	r3, [sp, #4]
   12dbe:	681b      	ldr	r3, [r3, #0]
   12dc0:	431f      	orrs	r7, r3
   12dc2:	07fb      	lsls	r3, r7, #31
   12dc4:	d4d3      	bmi.n	12d6e <__gethex+0x31a>
   12dc6:	e772      	b.n	12cae <__gethex+0x25a>
   12dc8:	2000      	movs	r0, #0
   12dca:	e781      	b.n	12cd0 <__gethex+0x27c>
   12dcc:	1a22      	subs	r2, r4, r0
   12dce:	4659      	mov	r1, fp
   12dd0:	ee18 0a10 	vmov	r0, s16
   12dd4:	eba9 0902 	sub.w	r9, r9, r2
   12dd8:	f000 fc76 	bl	136c8 <__lshift>
   12ddc:	f100 0314 	add.w	r3, r0, #20
   12de0:	4683      	mov	fp, r0
   12de2:	9301      	str	r3, [sp, #4]
   12de4:	2700      	movs	r7, #0
   12de6:	e703      	b.n	12bf0 <__gethex+0x19c>
   12de8:	7872      	ldrb	r2, [r6, #1]
   12dea:	f818 0002 	ldrb.w	r0, [r8, r2]
   12dee:	1c71      	adds	r1, r6, #1
   12df0:	2800      	cmp	r0, #0
   12df2:	f000 80a0 	beq.w	12f36 <__gethex+0x4e2>
   12df6:	460d      	mov	r5, r1
   12df8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   12dfc:	f818 0002 	ldrb.w	r0, [r8, r2]
   12e00:	2800      	cmp	r0, #0
   12e02:	d1f8      	bne.n	12df6 <__gethex+0x3a2>
   12e04:	1b75      	subs	r5, r6, r5
   12e06:	ea4f 0985 	mov.w	r9, r5, lsl #2
   12e0a:	460e      	mov	r6, r1
   12e0c:	e65d      	b.n	12aca <__gethex+0x76>
   12e0e:	3402      	adds	r4, #2
   12e10:	2300      	movs	r3, #0
   12e12:	e638      	b.n	12a86 <__gethex+0x32>
   12e14:	f8db 3008 	ldr.w	r3, [fp, #8]
   12e18:	429f      	cmp	r7, r3
   12e1a:	f280 808e 	bge.w	12f3a <__gethex+0x4e6>
   12e1e:	463b      	mov	r3, r7
   12e20:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   12e24:	2101      	movs	r1, #1
   12e26:	3301      	adds	r3, #1
   12e28:	2d02      	cmp	r5, #2
   12e2a:	f8cb 3010 	str.w	r3, [fp, #16]
   12e2e:	6151      	str	r1, [r2, #20]
   12e30:	d07a      	beq.n	12f28 <__gethex+0x4d4>
   12e32:	429f      	cmp	r7, r3
   12e34:	dab9      	bge.n	12daa <__gethex+0x356>
   12e36:	2b00      	cmp	r3, #0
   12e38:	f340 809b 	ble.w	12f72 <__gethex+0x51e>
   12e3c:	f8db 2014 	ldr.w	r2, [fp, #20]
   12e40:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   12e44:	f10b 0018 	add.w	r0, fp, #24
   12e48:	4283      	cmp	r3, r0
   12e4a:	ea4f 0252 	mov.w	r2, r2, lsr #1
   12e4e:	f240 80b1 	bls.w	12fb4 <__gethex+0x560>
   12e52:	4644      	mov	r4, r8
   12e54:	6801      	ldr	r1, [r0, #0]
   12e56:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   12e5a:	f844 2b04 	str.w	r2, [r4], #4
   12e5e:	f850 2b04 	ldr.w	r2, [r0], #4
   12e62:	4283      	cmp	r3, r0
   12e64:	ea4f 0252 	mov.w	r2, r2, lsr #1
   12e68:	d8f4      	bhi.n	12e54 <__gethex+0x400>
   12e6a:	eba3 030b 	sub.w	r3, r3, fp
   12e6e:	3b19      	subs	r3, #25
   12e70:	089b      	lsrs	r3, r3, #2
   12e72:	3301      	adds	r3, #1
   12e74:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   12e78:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   12e7c:	2a00      	cmp	r2, #0
   12e7e:	f040 809d 	bne.w	12fbc <__gethex+0x568>
   12e82:	eba3 0208 	sub.w	r2, r3, r8
   12e86:	1092      	asrs	r2, r2, #2
   12e88:	4543      	cmp	r3, r8
   12e8a:	f8cb 2010 	str.w	r2, [fp, #16]
   12e8e:	d073      	beq.n	12f78 <__gethex+0x524>
   12e90:	f8da 3008 	ldr.w	r3, [sl, #8]
   12e94:	f109 0901 	add.w	r9, r9, #1
   12e98:	454b      	cmp	r3, r9
   12e9a:	da8a      	bge.n	12db2 <__gethex+0x35e>
   12e9c:	ee18 0a10 	vmov	r0, s16
   12ea0:	4659      	mov	r1, fp
   12ea2:	f000 f9d1 	bl	13248 <_Bfree>
   12ea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12ea8:	2300      	movs	r3, #0
   12eaa:	6013      	str	r3, [r2, #0]
   12eac:	25a3      	movs	r5, #163	; 0xa3
   12eae:	e683      	b.n	12bb8 <__gethex+0x164>
   12eb0:	9e01      	ldr	r6, [sp, #4]
   12eb2:	2300      	movs	r3, #0
   12eb4:	e689      	b.n	12bca <__gethex+0x176>
   12eb6:	2701      	movs	r7, #1
   12eb8:	e732      	b.n	12d20 <__gethex+0x2cc>
   12eba:	4629      	mov	r1, r5
   12ebc:	4658      	mov	r0, fp
   12ebe:	f000 fea5 	bl	13c0c <__any_on>
   12ec2:	4607      	mov	r7, r0
   12ec4:	e72c      	b.n	12d20 <__gethex+0x2cc>
   12ec6:	1eb1      	subs	r1, r6, #2
   12ec8:	4658      	mov	r0, fp
   12eca:	f000 fe9f 	bl	13c0c <__any_on>
   12ece:	2800      	cmp	r0, #0
   12ed0:	f43f af17 	beq.w	12d02 <__gethex+0x2ae>
   12ed4:	2703      	movs	r7, #3
   12ed6:	e715      	b.n	12d04 <__gethex+0x2b0>
   12ed8:	f04f 0900 	mov.w	r9, #0
   12edc:	2701      	movs	r7, #1
   12ede:	e64a      	b.n	12b76 <__gethex+0x122>
   12ee0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12ee2:	2a00      	cmp	r2, #0
   12ee4:	f47f ae9d 	bne.w	12c22 <__gethex+0x1ce>
   12ee8:	9902      	ldr	r1, [sp, #8]
   12eea:	600b      	str	r3, [r1, #0]
   12eec:	9b01      	ldr	r3, [sp, #4]
   12eee:	2201      	movs	r2, #1
   12ef0:	f8cb 2010 	str.w	r2, [fp, #16]
   12ef4:	601a      	str	r2, [r3, #0]
   12ef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12ef8:	2562      	movs	r5, #98	; 0x62
   12efa:	f8c3 b000 	str.w	fp, [r3]
   12efe:	e65b      	b.n	12bb8 <__gethex+0x164>
   12f00:	454c      	cmp	r4, r9
   12f02:	f47f ae8e 	bne.w	12c22 <__gethex+0x1ce>
   12f06:	2c01      	cmp	r4, #1
   12f08:	d0ee      	beq.n	12ee8 <__gethex+0x494>
   12f0a:	1e61      	subs	r1, r4, #1
   12f0c:	4658      	mov	r0, fp
   12f0e:	f000 fe7d 	bl	13c0c <__any_on>
   12f12:	2800      	cmp	r0, #0
   12f14:	f43f ae85 	beq.w	12c22 <__gethex+0x1ce>
   12f18:	f8da 3004 	ldr.w	r3, [sl, #4]
   12f1c:	e7e4      	b.n	12ee8 <__gethex+0x494>
   12f1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12f20:	2a00      	cmp	r2, #0
   12f22:	f43f ae7e 	beq.w	12c22 <__gethex+0x1ce>
   12f26:	e7df      	b.n	12ee8 <__gethex+0x494>
   12f28:	f8da 3000 	ldr.w	r3, [sl]
   12f2c:	3b01      	subs	r3, #1
   12f2e:	42a3      	cmp	r3, r4
   12f30:	d034      	beq.n	12f9c <__gethex+0x548>
   12f32:	2522      	movs	r5, #34	; 0x22
   12f34:	e6bd      	b.n	12cb2 <__gethex+0x25e>
   12f36:	460e      	mov	r6, r1
   12f38:	e5c7      	b.n	12aca <__gethex+0x76>
   12f3a:	f8db 1004 	ldr.w	r1, [fp, #4]
   12f3e:	ee18 0a10 	vmov	r0, s16
   12f42:	3101      	adds	r1, #1
   12f44:	f000 f95a 	bl	131fc <_Balloc>
   12f48:	4606      	mov	r6, r0
   12f4a:	b3c8      	cbz	r0, 12fc0 <__gethex+0x56c>
   12f4c:	f8db 3010 	ldr.w	r3, [fp, #16]
   12f50:	3302      	adds	r3, #2
   12f52:	009a      	lsls	r2, r3, #2
   12f54:	f10b 010c 	add.w	r1, fp, #12
   12f58:	300c      	adds	r0, #12
   12f5a:	f7fa fe9f 	bl	dc9c <memcpy>
   12f5e:	4659      	mov	r1, fp
   12f60:	ee18 0a10 	vmov	r0, s16
   12f64:	f000 f970 	bl	13248 <_Bfree>
   12f68:	f106 0814 	add.w	r8, r6, #20
   12f6c:	6933      	ldr	r3, [r6, #16]
   12f6e:	46b3      	mov	fp, r6
   12f70:	e756      	b.n	12e20 <__gethex+0x3cc>
   12f72:	2300      	movs	r3, #0
   12f74:	f8cb 3010 	str.w	r3, [fp, #16]
   12f78:	2300      	movs	r3, #0
   12f7a:	f8cb 3014 	str.w	r3, [fp, #20]
   12f7e:	e787      	b.n	12e90 <__gethex+0x43c>
   12f80:	9b01      	ldr	r3, [sp, #4]
   12f82:	4443      	add	r3, r8
   12f84:	f1c4 0420 	rsb	r4, r4, #32
   12f88:	f853 0c04 	ldr.w	r0, [r3, #-4]
   12f8c:	f000 fa10 	bl	133b0 <__hi0bits>
   12f90:	42a0      	cmp	r0, r4
   12f92:	f6bf af0e 	bge.w	12db2 <__gethex+0x35e>
   12f96:	f8db 3010 	ldr.w	r3, [fp, #16]
   12f9a:	e74c      	b.n	12e36 <__gethex+0x3e2>
   12f9c:	1163      	asrs	r3, r4, #5
   12f9e:	f004 041f 	and.w	r4, r4, #31
   12fa2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   12fa6:	2301      	movs	r3, #1
   12fa8:	40a3      	lsls	r3, r4
   12faa:	4213      	tst	r3, r2
   12fac:	bf0c      	ite	eq
   12fae:	2522      	moveq	r5, #34	; 0x22
   12fb0:	2521      	movne	r5, #33	; 0x21
   12fb2:	e67e      	b.n	12cb2 <__gethex+0x25e>
   12fb4:	f8c8 2000 	str.w	r2, [r8]
   12fb8:	4643      	mov	r3, r8
   12fba:	b16a      	cbz	r2, 12fd8 <__gethex+0x584>
   12fbc:	3304      	adds	r3, #4
   12fbe:	e760      	b.n	12e82 <__gethex+0x42e>
   12fc0:	4b07      	ldr	r3, [pc, #28]	; (12fe0 <__gethex+0x58c>)
   12fc2:	4808      	ldr	r0, [pc, #32]	; (12fe4 <__gethex+0x590>)
   12fc4:	4632      	mov	r2, r6
   12fc6:	2184      	movs	r1, #132	; 0x84
   12fc8:	f004 fa5a 	bl	17480 <__assert_func>
   12fcc:	4b04      	ldr	r3, [pc, #16]	; (12fe0 <__gethex+0x58c>)
   12fce:	4805      	ldr	r0, [pc, #20]	; (12fe4 <__gethex+0x590>)
   12fd0:	465a      	mov	r2, fp
   12fd2:	21e4      	movs	r1, #228	; 0xe4
   12fd4:	f004 fa54 	bl	17480 <__assert_func>
   12fd8:	f8cb 2010 	str.w	r2, [fp, #16]
   12fdc:	e7cc      	b.n	12f78 <__gethex+0x524>
   12fde:	bf00      	nop
   12fe0:	20000cfc 	.word	0x20000cfc
   12fe4:	20000d10 	.word	0x20000d10

00012fe8 <__match>:
   12fe8:	b410      	push	{r4}
   12fea:	6804      	ldr	r4, [r0, #0]
   12fec:	e009      	b.n	13002 <__match+0x1a>
   12fee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   12ff2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   12ff6:	f1bc 0f19 	cmp.w	ip, #25
   12ffa:	bf98      	it	ls
   12ffc:	3320      	addls	r3, #32
   12ffe:	4293      	cmp	r3, r2
   13000:	d109      	bne.n	13016 <__match+0x2e>
   13002:	f811 2b01 	ldrb.w	r2, [r1], #1
   13006:	2a00      	cmp	r2, #0
   13008:	d1f1      	bne.n	12fee <__match+0x6>
   1300a:	3401      	adds	r4, #1
   1300c:	6004      	str	r4, [r0, #0]
   1300e:	2001      	movs	r0, #1
   13010:	f85d 4b04 	ldr.w	r4, [sp], #4
   13014:	4770      	bx	lr
   13016:	2000      	movs	r0, #0
   13018:	f85d 4b04 	ldr.w	r4, [sp], #4
   1301c:	4770      	bx	lr
   1301e:	bf00      	nop

00013020 <__hexnan>:
   13020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13024:	6809      	ldr	r1, [r1, #0]
   13026:	b085      	sub	sp, #20
   13028:	114b      	asrs	r3, r1, #5
   1302a:	f011 011f 	ands.w	r1, r1, #31
   1302e:	9002      	str	r0, [sp, #8]
   13030:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13034:	9103      	str	r1, [sp, #12]
   13036:	f040 808f 	bne.w	13158 <__hexnan+0x138>
   1303a:	1f1d      	subs	r5, r3, #4
   1303c:	9301      	str	r3, [sp, #4]
   1303e:	9b02      	ldr	r3, [sp, #8]
   13040:	9901      	ldr	r1, [sp, #4]
   13042:	681c      	ldr	r4, [r3, #0]
   13044:	2300      	movs	r3, #0
   13046:	f841 3c04 	str.w	r3, [r1, #-4]
   1304a:	7861      	ldrb	r1, [r4, #1]
   1304c:	3401      	adds	r4, #1
   1304e:	2900      	cmp	r1, #0
   13050:	f000 8098 	beq.w	13184 <__hexnan+0x164>
   13054:	f8df 9174 	ldr.w	r9, [pc, #372]	; 131cc <__hexnan+0x1ac>
   13058:	46a8      	mov	r8, r5
   1305a:	46ac      	mov	ip, r5
   1305c:	469a      	mov	sl, r3
   1305e:	461e      	mov	r6, r3
   13060:	e00e      	b.n	13080 <__hexnan+0x60>
   13062:	2920      	cmp	r1, #32
   13064:	f200 808c 	bhi.w	13180 <__hexnan+0x160>
   13068:	4556      	cmp	r6, sl
   1306a:	dd06      	ble.n	1307a <__hexnan+0x5a>
   1306c:	45c4      	cmp	ip, r8
   1306e:	d201      	bcs.n	13074 <__hexnan+0x54>
   13070:	2b07      	cmp	r3, #7
   13072:	dd5b      	ble.n	1312c <__hexnan+0x10c>
   13074:	4562      	cmp	r2, ip
   13076:	d351      	bcc.n	1311c <__hexnan+0xfc>
   13078:	2308      	movs	r3, #8
   1307a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1307e:	b1a1      	cbz	r1, 130aa <__hexnan+0x8a>
   13080:	f819 0001 	ldrb.w	r0, [r9, r1]
   13084:	2800      	cmp	r0, #0
   13086:	d0ec      	beq.n	13062 <__hexnan+0x42>
   13088:	3301      	adds	r3, #1
   1308a:	2b08      	cmp	r3, #8
   1308c:	f106 0601 	add.w	r6, r6, #1
   13090:	dc3a      	bgt.n	13108 <__hexnan+0xe8>
   13092:	f8dc 1000 	ldr.w	r1, [ip]
   13096:	0109      	lsls	r1, r1, #4
   13098:	f000 000f 	and.w	r0, r0, #15
   1309c:	4308      	orrs	r0, r1
   1309e:	f8cc 0000 	str.w	r0, [ip]
   130a2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   130a6:	2900      	cmp	r1, #0
   130a8:	d1ea      	bne.n	13080 <__hexnan+0x60>
   130aa:	2e00      	cmp	r6, #0
   130ac:	d06a      	beq.n	13184 <__hexnan+0x164>
   130ae:	45c4      	cmp	ip, r8
   130b0:	d201      	bcs.n	130b6 <__hexnan+0x96>
   130b2:	2b07      	cmp	r3, #7
   130b4:	dd74      	ble.n	131a0 <__hexnan+0x180>
   130b6:	4562      	cmp	r2, ip
   130b8:	d252      	bcs.n	13160 <__hexnan+0x140>
   130ba:	1f11      	subs	r1, r2, #4
   130bc:	4663      	mov	r3, ip
   130be:	f853 0b04 	ldr.w	r0, [r3], #4
   130c2:	f841 0f04 	str.w	r0, [r1, #4]!
   130c6:	42ab      	cmp	r3, r5
   130c8:	d9f9      	bls.n	130be <__hexnan+0x9e>
   130ca:	eba5 030c 	sub.w	r3, r5, ip
   130ce:	f023 0303 	bic.w	r3, r3, #3
   130d2:	1c69      	adds	r1, r5, #1
   130d4:	3304      	adds	r3, #4
   130d6:	f10c 0c01 	add.w	ip, ip, #1
   130da:	4561      	cmp	r1, ip
   130dc:	bf38      	it	cc
   130de:	2304      	movcc	r3, #4
   130e0:	4413      	add	r3, r2
   130e2:	2100      	movs	r1, #0
   130e4:	f843 1b04 	str.w	r1, [r3], #4
   130e8:	42ab      	cmp	r3, r5
   130ea:	d9fb      	bls.n	130e4 <__hexnan+0xc4>
   130ec:	9b01      	ldr	r3, [sp, #4]
   130ee:	f853 3c04 	ldr.w	r3, [r3, #-4]
   130f2:	b92b      	cbnz	r3, 13100 <__hexnan+0xe0>
   130f4:	42aa      	cmp	r2, r5
   130f6:	d049      	beq.n	1318c <__hexnan+0x16c>
   130f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   130fc:	2b00      	cmp	r3, #0
   130fe:	d0f9      	beq.n	130f4 <__hexnan+0xd4>
   13100:	2005      	movs	r0, #5
   13102:	b005      	add	sp, #20
   13104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13108:	4562      	cmp	r2, ip
   1310a:	d2b6      	bcs.n	1307a <__hexnan+0x5a>
   1310c:	2300      	movs	r3, #0
   1310e:	f84c 3c04 	str.w	r3, [ip, #-4]
   13112:	4619      	mov	r1, r3
   13114:	f1ac 0c04 	sub.w	ip, ip, #4
   13118:	2301      	movs	r3, #1
   1311a:	e7bd      	b.n	13098 <__hexnan+0x78>
   1311c:	2300      	movs	r3, #0
   1311e:	f1ac 0804 	sub.w	r8, ip, #4
   13122:	f84c 3c04 	str.w	r3, [ip, #-4]
   13126:	46b2      	mov	sl, r6
   13128:	46c4      	mov	ip, r8
   1312a:	e7a6      	b.n	1307a <__hexnan+0x5a>
   1312c:	f1c3 0108 	rsb	r1, r3, #8
   13130:	f8dc 3000 	ldr.w	r3, [ip]
   13134:	0089      	lsls	r1, r1, #2
   13136:	f1c1 0e20 	rsb	lr, r1, #32
   1313a:	4660      	mov	r0, ip
   1313c:	469b      	mov	fp, r3
   1313e:	6847      	ldr	r7, [r0, #4]
   13140:	fa07 f30e 	lsl.w	r3, r7, lr
   13144:	ea43 030b 	orr.w	r3, r3, fp
   13148:	fa27 fb01 	lsr.w	fp, r7, r1
   1314c:	6003      	str	r3, [r0, #0]
   1314e:	f840 bf04 	str.w	fp, [r0, #4]!
   13152:	4540      	cmp	r0, r8
   13154:	d3f3      	bcc.n	1313e <__hexnan+0x11e>
   13156:	e78d      	b.n	13074 <__hexnan+0x54>
   13158:	1d19      	adds	r1, r3, #4
   1315a:	9101      	str	r1, [sp, #4]
   1315c:	461d      	mov	r5, r3
   1315e:	e76e      	b.n	1303e <__hexnan+0x1e>
   13160:	9b03      	ldr	r3, [sp, #12]
   13162:	2b00      	cmp	r3, #0
   13164:	d0c2      	beq.n	130ec <__hexnan+0xcc>
   13166:	9b03      	ldr	r3, [sp, #12]
   13168:	9801      	ldr	r0, [sp, #4]
   1316a:	f1c3 0120 	rsb	r1, r3, #32
   1316e:	f04f 33ff 	mov.w	r3, #4294967295
   13172:	40cb      	lsrs	r3, r1
   13174:	f850 1c04 	ldr.w	r1, [r0, #-4]
   13178:	400b      	ands	r3, r1
   1317a:	f840 3c04 	str.w	r3, [r0, #-4]
   1317e:	e7b8      	b.n	130f2 <__hexnan+0xd2>
   13180:	2929      	cmp	r1, #41	; 0x29
   13182:	d009      	beq.n	13198 <__hexnan+0x178>
   13184:	2004      	movs	r0, #4
   13186:	b005      	add	sp, #20
   13188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1318c:	2301      	movs	r3, #1
   1318e:	2005      	movs	r0, #5
   13190:	602b      	str	r3, [r5, #0]
   13192:	b005      	add	sp, #20
   13194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13198:	9902      	ldr	r1, [sp, #8]
   1319a:	3401      	adds	r4, #1
   1319c:	600c      	str	r4, [r1, #0]
   1319e:	e784      	b.n	130aa <__hexnan+0x8a>
   131a0:	f8dc 1000 	ldr.w	r1, [ip]
   131a4:	f1c3 0308 	rsb	r3, r3, #8
   131a8:	009b      	lsls	r3, r3, #2
   131aa:	f1c3 0720 	rsb	r7, r3, #32
   131ae:	4664      	mov	r4, ip
   131b0:	4608      	mov	r0, r1
   131b2:	6866      	ldr	r6, [r4, #4]
   131b4:	fa06 f107 	lsl.w	r1, r6, r7
   131b8:	4301      	orrs	r1, r0
   131ba:	fa26 f003 	lsr.w	r0, r6, r3
   131be:	6021      	str	r1, [r4, #0]
   131c0:	f844 0f04 	str.w	r0, [r4, #4]!
   131c4:	4544      	cmp	r4, r8
   131c6:	d3f4      	bcc.n	131b2 <__hexnan+0x192>
   131c8:	e775      	b.n	130b6 <__hexnan+0x96>
   131ca:	bf00      	nop
   131cc:	20000d74 	.word	0x20000d74

000131d0 <__ascii_mbtowc>:
   131d0:	b082      	sub	sp, #8
   131d2:	b149      	cbz	r1, 131e8 <__ascii_mbtowc+0x18>
   131d4:	b15a      	cbz	r2, 131ee <__ascii_mbtowc+0x1e>
   131d6:	b16b      	cbz	r3, 131f4 <__ascii_mbtowc+0x24>
   131d8:	7813      	ldrb	r3, [r2, #0]
   131da:	600b      	str	r3, [r1, #0]
   131dc:	7812      	ldrb	r2, [r2, #0]
   131de:	1e10      	subs	r0, r2, #0
   131e0:	bf18      	it	ne
   131e2:	2001      	movne	r0, #1
   131e4:	b002      	add	sp, #8
   131e6:	4770      	bx	lr
   131e8:	a901      	add	r1, sp, #4
   131ea:	2a00      	cmp	r2, #0
   131ec:	d1f3      	bne.n	131d6 <__ascii_mbtowc+0x6>
   131ee:	4610      	mov	r0, r2
   131f0:	b002      	add	sp, #8
   131f2:	4770      	bx	lr
   131f4:	f06f 0001 	mvn.w	r0, #1
   131f8:	e7f4      	b.n	131e4 <__ascii_mbtowc+0x14>
   131fa:	bf00      	nop

000131fc <_Balloc>:
   131fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
   131fe:	b570      	push	{r4, r5, r6, lr}
   13200:	4605      	mov	r5, r0
   13202:	460c      	mov	r4, r1
   13204:	b14b      	cbz	r3, 1321a <_Balloc+0x1e>
   13206:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1320a:	b180      	cbz	r0, 1322e <_Balloc+0x32>
   1320c:	6802      	ldr	r2, [r0, #0]
   1320e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   13212:	2300      	movs	r3, #0
   13214:	e9c0 3303 	strd	r3, r3, [r0, #12]
   13218:	bd70      	pop	{r4, r5, r6, pc}
   1321a:	2221      	movs	r2, #33	; 0x21
   1321c:	2104      	movs	r1, #4
   1321e:	f004 f94f 	bl	174c0 <_calloc_r>
   13222:	4603      	mov	r3, r0
   13224:	6468      	str	r0, [r5, #68]	; 0x44
   13226:	2800      	cmp	r0, #0
   13228:	d1ed      	bne.n	13206 <_Balloc+0xa>
   1322a:	2000      	movs	r0, #0
   1322c:	bd70      	pop	{r4, r5, r6, pc}
   1322e:	2101      	movs	r1, #1
   13230:	fa01 f604 	lsl.w	r6, r1, r4
   13234:	1d72      	adds	r2, r6, #5
   13236:	0092      	lsls	r2, r2, #2
   13238:	4628      	mov	r0, r5
   1323a:	f004 f941 	bl	174c0 <_calloc_r>
   1323e:	2800      	cmp	r0, #0
   13240:	d0f3      	beq.n	1322a <_Balloc+0x2e>
   13242:	e9c0 4601 	strd	r4, r6, [r0, #4]
   13246:	e7e4      	b.n	13212 <_Balloc+0x16>

00013248 <_Bfree>:
   13248:	b131      	cbz	r1, 13258 <_Bfree+0x10>
   1324a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1324c:	684a      	ldr	r2, [r1, #4]
   1324e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13252:	6008      	str	r0, [r1, #0]
   13254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   13258:	4770      	bx	lr
   1325a:	bf00      	nop

0001325c <__multadd>:
   1325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13260:	690e      	ldr	r6, [r1, #16]
   13262:	4680      	mov	r8, r0
   13264:	460f      	mov	r7, r1
   13266:	461d      	mov	r5, r3
   13268:	f101 0e14 	add.w	lr, r1, #20
   1326c:	2000      	movs	r0, #0
   1326e:	f8de 1000 	ldr.w	r1, [lr]
   13272:	b28c      	uxth	r4, r1
   13274:	fb02 5304 	mla	r3, r2, r4, r5
   13278:	0c09      	lsrs	r1, r1, #16
   1327a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1327e:	fb02 cc01 	mla	ip, r2, r1, ip
   13282:	3001      	adds	r0, #1
   13284:	b29c      	uxth	r4, r3
   13286:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   1328a:	4286      	cmp	r6, r0
   1328c:	f84e 4b04 	str.w	r4, [lr], #4
   13290:	ea4f 451c 	mov.w	r5, ip, lsr #16
   13294:	dceb      	bgt.n	1326e <__multadd+0x12>
   13296:	b13d      	cbz	r5, 132a8 <__multadd+0x4c>
   13298:	68bb      	ldr	r3, [r7, #8]
   1329a:	42b3      	cmp	r3, r6
   1329c:	dd07      	ble.n	132ae <__multadd+0x52>
   1329e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   132a2:	3601      	adds	r6, #1
   132a4:	615d      	str	r5, [r3, #20]
   132a6:	613e      	str	r6, [r7, #16]
   132a8:	4638      	mov	r0, r7
   132aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   132ae:	6879      	ldr	r1, [r7, #4]
   132b0:	4640      	mov	r0, r8
   132b2:	3101      	adds	r1, #1
   132b4:	f7ff ffa2 	bl	131fc <_Balloc>
   132b8:	4604      	mov	r4, r0
   132ba:	b1b0      	cbz	r0, 132ea <__multadd+0x8e>
   132bc:	693a      	ldr	r2, [r7, #16]
   132be:	3202      	adds	r2, #2
   132c0:	f107 010c 	add.w	r1, r7, #12
   132c4:	0092      	lsls	r2, r2, #2
   132c6:	300c      	adds	r0, #12
   132c8:	f7fa fce8 	bl	dc9c <memcpy>
   132cc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   132d0:	687a      	ldr	r2, [r7, #4]
   132d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   132d6:	6039      	str	r1, [r7, #0]
   132d8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   132dc:	4627      	mov	r7, r4
   132de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   132e2:	3601      	adds	r6, #1
   132e4:	615d      	str	r5, [r3, #20]
   132e6:	613e      	str	r6, [r7, #16]
   132e8:	e7de      	b.n	132a8 <__multadd+0x4c>
   132ea:	4b03      	ldr	r3, [pc, #12]	; (132f8 <__multadd+0x9c>)
   132ec:	4803      	ldr	r0, [pc, #12]	; (132fc <__multadd+0xa0>)
   132ee:	4622      	mov	r2, r4
   132f0:	21ba      	movs	r1, #186	; 0xba
   132f2:	f004 f8c5 	bl	17480 <__assert_func>
   132f6:	bf00      	nop
   132f8:	20000cfc 	.word	0x20000cfc
   132fc:	20000e74 	.word	0x20000e74

00013300 <__s2b>:
   13300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13304:	4617      	mov	r7, r2
   13306:	4a27      	ldr	r2, [pc, #156]	; (133a4 <__s2b+0xa4>)
   13308:	461e      	mov	r6, r3
   1330a:	3308      	adds	r3, #8
   1330c:	460c      	mov	r4, r1
   1330e:	2e09      	cmp	r6, #9
   13310:	fb82 1203 	smull	r1, r2, r2, r3
   13314:	ea4f 73e3 	mov.w	r3, r3, asr #31
   13318:	4605      	mov	r5, r0
   1331a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   1331e:	dd39      	ble.n	13394 <__s2b+0x94>
   13320:	f04f 0c01 	mov.w	ip, #1
   13324:	2100      	movs	r1, #0
   13326:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1332a:	4563      	cmp	r3, ip
   1332c:	f101 0101 	add.w	r1, r1, #1
   13330:	dcf9      	bgt.n	13326 <__s2b+0x26>
   13332:	4628      	mov	r0, r5
   13334:	f7ff ff62 	bl	131fc <_Balloc>
   13338:	4601      	mov	r1, r0
   1333a:	b368      	cbz	r0, 13398 <__s2b+0x98>
   1333c:	9b08      	ldr	r3, [sp, #32]
   1333e:	6143      	str	r3, [r0, #20]
   13340:	2f09      	cmp	r7, #9
   13342:	f04f 0301 	mov.w	r3, #1
   13346:	6103      	str	r3, [r0, #16]
   13348:	dc12      	bgt.n	13370 <__s2b+0x70>
   1334a:	340a      	adds	r4, #10
   1334c:	2709      	movs	r7, #9
   1334e:	42be      	cmp	r6, r7
   13350:	dd0b      	ble.n	1336a <__s2b+0x6a>
   13352:	1bf2      	subs	r2, r6, r7
   13354:	18a6      	adds	r6, r4, r2
   13356:	f814 3b01 	ldrb.w	r3, [r4], #1
   1335a:	220a      	movs	r2, #10
   1335c:	3b30      	subs	r3, #48	; 0x30
   1335e:	4628      	mov	r0, r5
   13360:	f7ff ff7c 	bl	1325c <__multadd>
   13364:	42a6      	cmp	r6, r4
   13366:	4601      	mov	r1, r0
   13368:	d1f5      	bne.n	13356 <__s2b+0x56>
   1336a:	4608      	mov	r0, r1
   1336c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13370:	f104 0909 	add.w	r9, r4, #9
   13374:	46c8      	mov	r8, r9
   13376:	443c      	add	r4, r7
   13378:	f818 3b01 	ldrb.w	r3, [r8], #1
   1337c:	220a      	movs	r2, #10
   1337e:	3b30      	subs	r3, #48	; 0x30
   13380:	4628      	mov	r0, r5
   13382:	f7ff ff6b 	bl	1325c <__multadd>
   13386:	45a0      	cmp	r8, r4
   13388:	4601      	mov	r1, r0
   1338a:	d1f5      	bne.n	13378 <__s2b+0x78>
   1338c:	f1a7 0408 	sub.w	r4, r7, #8
   13390:	444c      	add	r4, r9
   13392:	e7dc      	b.n	1334e <__s2b+0x4e>
   13394:	2100      	movs	r1, #0
   13396:	e7cc      	b.n	13332 <__s2b+0x32>
   13398:	460a      	mov	r2, r1
   1339a:	4b03      	ldr	r3, [pc, #12]	; (133a8 <__s2b+0xa8>)
   1339c:	4803      	ldr	r0, [pc, #12]	; (133ac <__s2b+0xac>)
   1339e:	21d3      	movs	r1, #211	; 0xd3
   133a0:	f004 f86e 	bl	17480 <__assert_func>
   133a4:	38e38e39 	.word	0x38e38e39
   133a8:	20000cfc 	.word	0x20000cfc
   133ac:	20000e74 	.word	0x20000e74

000133b0 <__hi0bits>:
   133b0:	0c03      	lsrs	r3, r0, #16
   133b2:	041b      	lsls	r3, r3, #16
   133b4:	b9d3      	cbnz	r3, 133ec <__hi0bits+0x3c>
   133b6:	0400      	lsls	r0, r0, #16
   133b8:	2310      	movs	r3, #16
   133ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   133be:	bf04      	itt	eq
   133c0:	0200      	lsleq	r0, r0, #8
   133c2:	3308      	addeq	r3, #8
   133c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   133c8:	bf04      	itt	eq
   133ca:	0100      	lsleq	r0, r0, #4
   133cc:	3304      	addeq	r3, #4
   133ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   133d2:	bf04      	itt	eq
   133d4:	0080      	lsleq	r0, r0, #2
   133d6:	3302      	addeq	r3, #2
   133d8:	2800      	cmp	r0, #0
   133da:	db05      	blt.n	133e8 <__hi0bits+0x38>
   133dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   133e0:	f103 0301 	add.w	r3, r3, #1
   133e4:	bf08      	it	eq
   133e6:	2320      	moveq	r3, #32
   133e8:	4618      	mov	r0, r3
   133ea:	4770      	bx	lr
   133ec:	2300      	movs	r3, #0
   133ee:	e7e4      	b.n	133ba <__hi0bits+0xa>

000133f0 <__lo0bits>:
   133f0:	6803      	ldr	r3, [r0, #0]
   133f2:	f013 0207 	ands.w	r2, r3, #7
   133f6:	d008      	beq.n	1340a <__lo0bits+0x1a>
   133f8:	07d9      	lsls	r1, r3, #31
   133fa:	d41f      	bmi.n	1343c <__lo0bits+0x4c>
   133fc:	079a      	lsls	r2, r3, #30
   133fe:	d522      	bpl.n	13446 <__lo0bits+0x56>
   13400:	085b      	lsrs	r3, r3, #1
   13402:	6003      	str	r3, [r0, #0]
   13404:	2201      	movs	r2, #1
   13406:	4610      	mov	r0, r2
   13408:	4770      	bx	lr
   1340a:	b299      	uxth	r1, r3
   1340c:	b909      	cbnz	r1, 13412 <__lo0bits+0x22>
   1340e:	0c1b      	lsrs	r3, r3, #16
   13410:	2210      	movs	r2, #16
   13412:	b2d9      	uxtb	r1, r3
   13414:	b909      	cbnz	r1, 1341a <__lo0bits+0x2a>
   13416:	3208      	adds	r2, #8
   13418:	0a1b      	lsrs	r3, r3, #8
   1341a:	0719      	lsls	r1, r3, #28
   1341c:	bf04      	itt	eq
   1341e:	091b      	lsreq	r3, r3, #4
   13420:	3204      	addeq	r2, #4
   13422:	0799      	lsls	r1, r3, #30
   13424:	bf04      	itt	eq
   13426:	089b      	lsreq	r3, r3, #2
   13428:	3202      	addeq	r2, #2
   1342a:	07d9      	lsls	r1, r3, #31
   1342c:	d403      	bmi.n	13436 <__lo0bits+0x46>
   1342e:	085b      	lsrs	r3, r3, #1
   13430:	f102 0201 	add.w	r2, r2, #1
   13434:	d005      	beq.n	13442 <__lo0bits+0x52>
   13436:	6003      	str	r3, [r0, #0]
   13438:	4610      	mov	r0, r2
   1343a:	4770      	bx	lr
   1343c:	2200      	movs	r2, #0
   1343e:	4610      	mov	r0, r2
   13440:	4770      	bx	lr
   13442:	2220      	movs	r2, #32
   13444:	e7df      	b.n	13406 <__lo0bits+0x16>
   13446:	089b      	lsrs	r3, r3, #2
   13448:	2202      	movs	r2, #2
   1344a:	6003      	str	r3, [r0, #0]
   1344c:	4610      	mov	r0, r2
   1344e:	4770      	bx	lr

00013450 <__i2b>:
   13450:	b538      	push	{r3, r4, r5, lr}
   13452:	6c43      	ldr	r3, [r0, #68]	; 0x44
   13454:	4604      	mov	r4, r0
   13456:	460d      	mov	r5, r1
   13458:	b14b      	cbz	r3, 1346e <__i2b+0x1e>
   1345a:	6858      	ldr	r0, [r3, #4]
   1345c:	b1b0      	cbz	r0, 1348c <__i2b+0x3c>
   1345e:	6802      	ldr	r2, [r0, #0]
   13460:	605a      	str	r2, [r3, #4]
   13462:	2200      	movs	r2, #0
   13464:	2301      	movs	r3, #1
   13466:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1346a:	60c2      	str	r2, [r0, #12]
   1346c:	bd38      	pop	{r3, r4, r5, pc}
   1346e:	2221      	movs	r2, #33	; 0x21
   13470:	2104      	movs	r1, #4
   13472:	f004 f825 	bl	174c0 <_calloc_r>
   13476:	4603      	mov	r3, r0
   13478:	6460      	str	r0, [r4, #68]	; 0x44
   1347a:	2800      	cmp	r0, #0
   1347c:	d1ed      	bne.n	1345a <__i2b+0xa>
   1347e:	4b09      	ldr	r3, [pc, #36]	; (134a4 <__i2b+0x54>)
   13480:	4809      	ldr	r0, [pc, #36]	; (134a8 <__i2b+0x58>)
   13482:	2200      	movs	r2, #0
   13484:	f240 1145 	movw	r1, #325	; 0x145
   13488:	f003 fffa 	bl	17480 <__assert_func>
   1348c:	221c      	movs	r2, #28
   1348e:	2101      	movs	r1, #1
   13490:	4620      	mov	r0, r4
   13492:	f004 f815 	bl	174c0 <_calloc_r>
   13496:	2800      	cmp	r0, #0
   13498:	d0f1      	beq.n	1347e <__i2b+0x2e>
   1349a:	2201      	movs	r2, #1
   1349c:	2302      	movs	r3, #2
   1349e:	e9c0 2301 	strd	r2, r3, [r0, #4]
   134a2:	e7de      	b.n	13462 <__i2b+0x12>
   134a4:	20000cfc 	.word	0x20000cfc
   134a8:	20000e74 	.word	0x20000e74

000134ac <__multiply>:
   134ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134b0:	690e      	ldr	r6, [r1, #16]
   134b2:	6915      	ldr	r5, [r2, #16]
   134b4:	42ae      	cmp	r6, r5
   134b6:	b085      	sub	sp, #20
   134b8:	4688      	mov	r8, r1
   134ba:	4614      	mov	r4, r2
   134bc:	db05      	blt.n	134ca <__multiply+0x1e>
   134be:	462a      	mov	r2, r5
   134c0:	4623      	mov	r3, r4
   134c2:	4635      	mov	r5, r6
   134c4:	460c      	mov	r4, r1
   134c6:	4616      	mov	r6, r2
   134c8:	4698      	mov	r8, r3
   134ca:	68a3      	ldr	r3, [r4, #8]
   134cc:	6861      	ldr	r1, [r4, #4]
   134ce:	19af      	adds	r7, r5, r6
   134d0:	42bb      	cmp	r3, r7
   134d2:	bfb8      	it	lt
   134d4:	3101      	addlt	r1, #1
   134d6:	f7ff fe91 	bl	131fc <_Balloc>
   134da:	9001      	str	r0, [sp, #4]
   134dc:	2800      	cmp	r0, #0
   134de:	f000 8087 	beq.w	135f0 <__multiply+0x144>
   134e2:	9b01      	ldr	r3, [sp, #4]
   134e4:	f103 0914 	add.w	r9, r3, #20
   134e8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   134ec:	45d1      	cmp	r9, sl
   134ee:	d205      	bcs.n	134fc <__multiply+0x50>
   134f0:	464b      	mov	r3, r9
   134f2:	2200      	movs	r2, #0
   134f4:	f843 2b04 	str.w	r2, [r3], #4
   134f8:	459a      	cmp	sl, r3
   134fa:	d8fb      	bhi.n	134f4 <__multiply+0x48>
   134fc:	f108 0814 	add.w	r8, r8, #20
   13500:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   13504:	f104 0314 	add.w	r3, r4, #20
   13508:	45d8      	cmp	r8, fp
   1350a:	461a      	mov	r2, r3
   1350c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   13510:	d25f      	bcs.n	135d2 <__multiply+0x126>
   13512:	1b2b      	subs	r3, r5, r4
   13514:	3b15      	subs	r3, #21
   13516:	f023 0303 	bic.w	r3, r3, #3
   1351a:	3304      	adds	r3, #4
   1351c:	3415      	adds	r4, #21
   1351e:	42a5      	cmp	r5, r4
   13520:	bf38      	it	cc
   13522:	2304      	movcc	r3, #4
   13524:	e9cd a702 	strd	sl, r7, [sp, #8]
   13528:	46ac      	mov	ip, r5
   1352a:	461f      	mov	r7, r3
   1352c:	4692      	mov	sl, r2
   1352e:	e005      	b.n	1353c <__multiply+0x90>
   13530:	0c09      	lsrs	r1, r1, #16
   13532:	d129      	bne.n	13588 <__multiply+0xdc>
   13534:	45c3      	cmp	fp, r8
   13536:	f109 0904 	add.w	r9, r9, #4
   1353a:	d948      	bls.n	135ce <__multiply+0x122>
   1353c:	f858 1b04 	ldr.w	r1, [r8], #4
   13540:	b28d      	uxth	r5, r1
   13542:	2d00      	cmp	r5, #0
   13544:	d0f4      	beq.n	13530 <__multiply+0x84>
   13546:	4656      	mov	r6, sl
   13548:	464c      	mov	r4, r9
   1354a:	2300      	movs	r3, #0
   1354c:	f856 1b04 	ldr.w	r1, [r6], #4
   13550:	6822      	ldr	r2, [r4, #0]
   13552:	fa1f fe81 	uxth.w	lr, r1
   13556:	b290      	uxth	r0, r2
   13558:	0c09      	lsrs	r1, r1, #16
   1355a:	fb05 000e 	mla	r0, r5, lr, r0
   1355e:	0c12      	lsrs	r2, r2, #16
   13560:	4403      	add	r3, r0
   13562:	fb05 2201 	mla	r2, r5, r1, r2
   13566:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   1356a:	b29b      	uxth	r3, r3
   1356c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   13570:	45b4      	cmp	ip, r6
   13572:	f844 3b04 	str.w	r3, [r4], #4
   13576:	ea4f 4312 	mov.w	r3, r2, lsr #16
   1357a:	d8e7      	bhi.n	1354c <__multiply+0xa0>
   1357c:	f849 3007 	str.w	r3, [r9, r7]
   13580:	f858 1c04 	ldr.w	r1, [r8, #-4]
   13584:	0c09      	lsrs	r1, r1, #16
   13586:	d0d5      	beq.n	13534 <__multiply+0x88>
   13588:	f8d9 3000 	ldr.w	r3, [r9]
   1358c:	4650      	mov	r0, sl
   1358e:	461a      	mov	r2, r3
   13590:	464c      	mov	r4, r9
   13592:	2600      	movs	r6, #0
   13594:	8805      	ldrh	r5, [r0, #0]
   13596:	0c12      	lsrs	r2, r2, #16
   13598:	fb01 2205 	mla	r2, r1, r5, r2
   1359c:	4416      	add	r6, r2
   1359e:	b29b      	uxth	r3, r3
   135a0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   135a4:	f844 3b04 	str.w	r3, [r4], #4
   135a8:	f850 5b04 	ldr.w	r5, [r0], #4
   135ac:	6822      	ldr	r2, [r4, #0]
   135ae:	0c2d      	lsrs	r5, r5, #16
   135b0:	b293      	uxth	r3, r2
   135b2:	fb01 3305 	mla	r3, r1, r5, r3
   135b6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   135ba:	4584      	cmp	ip, r0
   135bc:	ea4f 4613 	mov.w	r6, r3, lsr #16
   135c0:	d8e8      	bhi.n	13594 <__multiply+0xe8>
   135c2:	45c3      	cmp	fp, r8
   135c4:	f849 3007 	str.w	r3, [r9, r7]
   135c8:	f109 0904 	add.w	r9, r9, #4
   135cc:	d8b6      	bhi.n	1353c <__multiply+0x90>
   135ce:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   135d2:	2f00      	cmp	r7, #0
   135d4:	dc02      	bgt.n	135dc <__multiply+0x130>
   135d6:	e005      	b.n	135e4 <__multiply+0x138>
   135d8:	3f01      	subs	r7, #1
   135da:	d003      	beq.n	135e4 <__multiply+0x138>
   135dc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   135e0:	2b00      	cmp	r3, #0
   135e2:	d0f9      	beq.n	135d8 <__multiply+0x12c>
   135e4:	9b01      	ldr	r3, [sp, #4]
   135e6:	4618      	mov	r0, r3
   135e8:	611f      	str	r7, [r3, #16]
   135ea:	b005      	add	sp, #20
   135ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135f0:	4b03      	ldr	r3, [pc, #12]	; (13600 <__multiply+0x154>)
   135f2:	4804      	ldr	r0, [pc, #16]	; (13604 <__multiply+0x158>)
   135f4:	9a01      	ldr	r2, [sp, #4]
   135f6:	f44f 71b1 	mov.w	r1, #354	; 0x162
   135fa:	f003 ff41 	bl	17480 <__assert_func>
   135fe:	bf00      	nop
   13600:	20000cfc 	.word	0x20000cfc
   13604:	20000e74 	.word	0x20000e74

00013608 <__pow5mult>:
   13608:	f012 0303 	ands.w	r3, r2, #3
   1360c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13610:	4614      	mov	r4, r2
   13612:	4606      	mov	r6, r0
   13614:	d132      	bne.n	1367c <__pow5mult+0x74>
   13616:	460d      	mov	r5, r1
   13618:	10a4      	asrs	r4, r4, #2
   1361a:	d020      	beq.n	1365e <__pow5mult+0x56>
   1361c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   13620:	f1b8 0f00 	cmp.w	r8, #0
   13624:	d033      	beq.n	1368e <__pow5mult+0x86>
   13626:	07e3      	lsls	r3, r4, #31
   13628:	f04f 0700 	mov.w	r7, #0
   1362c:	d407      	bmi.n	1363e <__pow5mult+0x36>
   1362e:	1064      	asrs	r4, r4, #1
   13630:	d015      	beq.n	1365e <__pow5mult+0x56>
   13632:	f8d8 0000 	ldr.w	r0, [r8]
   13636:	b1a8      	cbz	r0, 13664 <__pow5mult+0x5c>
   13638:	4680      	mov	r8, r0
   1363a:	07e3      	lsls	r3, r4, #31
   1363c:	d5f7      	bpl.n	1362e <__pow5mult+0x26>
   1363e:	4642      	mov	r2, r8
   13640:	4629      	mov	r1, r5
   13642:	4630      	mov	r0, r6
   13644:	f7ff ff32 	bl	134ac <__multiply>
   13648:	b1b5      	cbz	r5, 13678 <__pow5mult+0x70>
   1364a:	6869      	ldr	r1, [r5, #4]
   1364c:	6c73      	ldr	r3, [r6, #68]	; 0x44
   1364e:	1064      	asrs	r4, r4, #1
   13650:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   13654:	602a      	str	r2, [r5, #0]
   13656:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   1365a:	4605      	mov	r5, r0
   1365c:	d1e9      	bne.n	13632 <__pow5mult+0x2a>
   1365e:	4628      	mov	r0, r5
   13660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13664:	4642      	mov	r2, r8
   13666:	4641      	mov	r1, r8
   13668:	4630      	mov	r0, r6
   1366a:	f7ff ff1f 	bl	134ac <__multiply>
   1366e:	f8c8 0000 	str.w	r0, [r8]
   13672:	6007      	str	r7, [r0, #0]
   13674:	4680      	mov	r8, r0
   13676:	e7e0      	b.n	1363a <__pow5mult+0x32>
   13678:	4605      	mov	r5, r0
   1367a:	e7d8      	b.n	1362e <__pow5mult+0x26>
   1367c:	3b01      	subs	r3, #1
   1367e:	4a0f      	ldr	r2, [pc, #60]	; (136bc <__pow5mult+0xb4>)
   13680:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   13684:	2300      	movs	r3, #0
   13686:	f7ff fde9 	bl	1325c <__multadd>
   1368a:	4605      	mov	r5, r0
   1368c:	e7c4      	b.n	13618 <__pow5mult+0x10>
   1368e:	2101      	movs	r1, #1
   13690:	4630      	mov	r0, r6
   13692:	f7ff fdb3 	bl	131fc <_Balloc>
   13696:	4680      	mov	r8, r0
   13698:	b140      	cbz	r0, 136ac <__pow5mult+0xa4>
   1369a:	2301      	movs	r3, #1
   1369c:	f240 2271 	movw	r2, #625	; 0x271
   136a0:	e9c0 3204 	strd	r3, r2, [r0, #16]
   136a4:	2300      	movs	r3, #0
   136a6:	6430      	str	r0, [r6, #64]	; 0x40
   136a8:	6003      	str	r3, [r0, #0]
   136aa:	e7bc      	b.n	13626 <__pow5mult+0x1e>
   136ac:	4b04      	ldr	r3, [pc, #16]	; (136c0 <__pow5mult+0xb8>)
   136ae:	4805      	ldr	r0, [pc, #20]	; (136c4 <__pow5mult+0xbc>)
   136b0:	4642      	mov	r2, r8
   136b2:	f240 1145 	movw	r1, #325	; 0x145
   136b6:	f003 fee3 	bl	17480 <__assert_func>
   136ba:	bf00      	nop
   136bc:	20007ec4 	.word	0x20007ec4
   136c0:	20000cfc 	.word	0x20000cfc
   136c4:	20000e74 	.word	0x20000e74

000136c8 <__lshift>:
   136c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   136cc:	460d      	mov	r5, r1
   136ce:	4614      	mov	r4, r2
   136d0:	692f      	ldr	r7, [r5, #16]
   136d2:	68ab      	ldr	r3, [r5, #8]
   136d4:	6849      	ldr	r1, [r1, #4]
   136d6:	eb07 1762 	add.w	r7, r7, r2, asr #5
   136da:	1c7e      	adds	r6, r7, #1
   136dc:	429e      	cmp	r6, r3
   136de:	4680      	mov	r8, r0
   136e0:	ea4f 1962 	mov.w	r9, r2, asr #5
   136e4:	dd04      	ble.n	136f0 <__lshift+0x28>
   136e6:	005b      	lsls	r3, r3, #1
   136e8:	429e      	cmp	r6, r3
   136ea:	f101 0101 	add.w	r1, r1, #1
   136ee:	dcfa      	bgt.n	136e6 <__lshift+0x1e>
   136f0:	4640      	mov	r0, r8
   136f2:	f7ff fd83 	bl	131fc <_Balloc>
   136f6:	4684      	mov	ip, r0
   136f8:	2800      	cmp	r0, #0
   136fa:	d052      	beq.n	137a2 <__lshift+0xda>
   136fc:	f1b9 0f00 	cmp.w	r9, #0
   13700:	f100 0214 	add.w	r2, r0, #20
   13704:	dd0e      	ble.n	13724 <__lshift+0x5c>
   13706:	f109 0105 	add.w	r1, r9, #5
   1370a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   1370e:	4613      	mov	r3, r2
   13710:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   13714:	2000      	movs	r0, #0
   13716:	f843 0b04 	str.w	r0, [r3], #4
   1371a:	428b      	cmp	r3, r1
   1371c:	d1fb      	bne.n	13716 <__lshift+0x4e>
   1371e:	f1ae 0314 	sub.w	r3, lr, #20
   13722:	441a      	add	r2, r3
   13724:	6929      	ldr	r1, [r5, #16]
   13726:	f105 0314 	add.w	r3, r5, #20
   1372a:	f014 0e1f 	ands.w	lr, r4, #31
   1372e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   13732:	d02e      	beq.n	13792 <__lshift+0xca>
   13734:	f1ce 0920 	rsb	r9, lr, #32
   13738:	4610      	mov	r0, r2
   1373a:	f04f 0a00 	mov.w	sl, #0
   1373e:	681c      	ldr	r4, [r3, #0]
   13740:	fa04 f40e 	lsl.w	r4, r4, lr
   13744:	ea44 040a 	orr.w	r4, r4, sl
   13748:	f840 4b04 	str.w	r4, [r0], #4
   1374c:	f853 4b04 	ldr.w	r4, [r3], #4
   13750:	4299      	cmp	r1, r3
   13752:	fa24 fa09 	lsr.w	sl, r4, r9
   13756:	d8f2      	bhi.n	1373e <__lshift+0x76>
   13758:	1b4b      	subs	r3, r1, r5
   1375a:	3b15      	subs	r3, #21
   1375c:	f023 0303 	bic.w	r3, r3, #3
   13760:	3304      	adds	r3, #4
   13762:	f105 0015 	add.w	r0, r5, #21
   13766:	4281      	cmp	r1, r0
   13768:	bf38      	it	cc
   1376a:	2304      	movcc	r3, #4
   1376c:	f1ba 0f00 	cmp.w	sl, #0
   13770:	bf18      	it	ne
   13772:	4637      	movne	r7, r6
   13774:	f842 a003 	str.w	sl, [r2, r3]
   13778:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1377c:	686a      	ldr	r2, [r5, #4]
   1377e:	f8cc 7010 	str.w	r7, [ip, #16]
   13782:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   13786:	6029      	str	r1, [r5, #0]
   13788:	4660      	mov	r0, ip
   1378a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1378e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13792:	3a04      	subs	r2, #4
   13794:	f853 0b04 	ldr.w	r0, [r3], #4
   13798:	f842 0f04 	str.w	r0, [r2, #4]!
   1379c:	4299      	cmp	r1, r3
   1379e:	d8f9      	bhi.n	13794 <__lshift+0xcc>
   137a0:	e7ea      	b.n	13778 <__lshift+0xb0>
   137a2:	4b03      	ldr	r3, [pc, #12]	; (137b0 <__lshift+0xe8>)
   137a4:	4803      	ldr	r0, [pc, #12]	; (137b4 <__lshift+0xec>)
   137a6:	4662      	mov	r2, ip
   137a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   137ac:	f003 fe68 	bl	17480 <__assert_func>
   137b0:	20000cfc 	.word	0x20000cfc
   137b4:	20000e74 	.word	0x20000e74

000137b8 <__mcmp>:
   137b8:	690b      	ldr	r3, [r1, #16]
   137ba:	4684      	mov	ip, r0
   137bc:	6900      	ldr	r0, [r0, #16]
   137be:	1ac0      	subs	r0, r0, r3
   137c0:	d116      	bne.n	137f0 <__mcmp+0x38>
   137c2:	f10c 0c14 	add.w	ip, ip, #20
   137c6:	3114      	adds	r1, #20
   137c8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   137cc:	b410      	push	{r4}
   137ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   137d2:	e001      	b.n	137d8 <__mcmp+0x20>
   137d4:	4594      	cmp	ip, r2
   137d6:	d208      	bcs.n	137ea <__mcmp+0x32>
   137d8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   137dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   137e0:	428c      	cmp	r4, r1
   137e2:	d0f7      	beq.n	137d4 <__mcmp+0x1c>
   137e4:	d205      	bcs.n	137f2 <__mcmp+0x3a>
   137e6:	f04f 30ff 	mov.w	r0, #4294967295
   137ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   137ee:	4770      	bx	lr
   137f0:	4770      	bx	lr
   137f2:	2001      	movs	r0, #1
   137f4:	f85d 4b04 	ldr.w	r4, [sp], #4
   137f8:	4770      	bx	lr
   137fa:	bf00      	nop

000137fc <__mdiff>:
   137fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13800:	690f      	ldr	r7, [r1, #16]
   13802:	6913      	ldr	r3, [r2, #16]
   13804:	1aff      	subs	r7, r7, r3
   13806:	2f00      	cmp	r7, #0
   13808:	460e      	mov	r6, r1
   1380a:	4690      	mov	r8, r2
   1380c:	d17f      	bne.n	1390e <__mdiff+0x112>
   1380e:	f101 0514 	add.w	r5, r1, #20
   13812:	3214      	adds	r2, #20
   13814:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   13818:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1381c:	e001      	b.n	13822 <__mdiff+0x26>
   1381e:	429d      	cmp	r5, r3
   13820:	d278      	bcs.n	13914 <__mdiff+0x118>
   13822:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   13826:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1382a:	42a1      	cmp	r1, r4
   1382c:	d0f7      	beq.n	1381e <__mdiff+0x22>
   1382e:	d369      	bcc.n	13904 <__mdiff+0x108>
   13830:	6871      	ldr	r1, [r6, #4]
   13832:	f7ff fce3 	bl	131fc <_Balloc>
   13836:	4681      	mov	r9, r0
   13838:	2800      	cmp	r0, #0
   1383a:	d077      	beq.n	1392c <__mdiff+0x130>
   1383c:	6935      	ldr	r5, [r6, #16]
   1383e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   13842:	60c7      	str	r7, [r0, #12]
   13844:	f108 0e14 	add.w	lr, r8, #20
   13848:	f106 0014 	add.w	r0, r6, #20
   1384c:	f109 0a14 	add.w	sl, r9, #20
   13850:	f106 0110 	add.w	r1, r6, #16
   13854:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   13858:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   1385c:	4656      	mov	r6, sl
   1385e:	f04f 0c00 	mov.w	ip, #0
   13862:	f85e 4b04 	ldr.w	r4, [lr], #4
   13866:	f851 bf04 	ldr.w	fp, [r1, #4]!
   1386a:	b2a3      	uxth	r3, r4
   1386c:	fa1c fc8b 	uxtah	ip, ip, fp
   13870:	ebac 0303 	sub.w	r3, ip, r3
   13874:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   13878:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   1387c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   13880:	b29b      	uxth	r3, r3
   13882:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   13886:	4572      	cmp	r2, lr
   13888:	f846 3b04 	str.w	r3, [r6], #4
   1388c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   13890:	d8e7      	bhi.n	13862 <__mdiff+0x66>
   13892:	eba2 0108 	sub.w	r1, r2, r8
   13896:	3915      	subs	r1, #21
   13898:	f108 0815 	add.w	r8, r8, #21
   1389c:	4542      	cmp	r2, r8
   1389e:	f021 0403 	bic.w	r4, r1, #3
   138a2:	f104 0404 	add.w	r4, r4, #4
   138a6:	bf38      	it	cc
   138a8:	2404      	movcc	r4, #4
   138aa:	4420      	add	r0, r4
   138ac:	f021 0203 	bic.w	r2, r1, #3
   138b0:	bf38      	it	cc
   138b2:	2200      	movcc	r2, #0
   138b4:	4287      	cmp	r7, r0
   138b6:	4452      	add	r2, sl
   138b8:	4454      	add	r4, sl
   138ba:	d918      	bls.n	138ee <__mdiff+0xf2>
   138bc:	4626      	mov	r6, r4
   138be:	4601      	mov	r1, r0
   138c0:	f851 3b04 	ldr.w	r3, [r1], #4
   138c4:	fa1c fc83 	uxtah	ip, ip, r3
   138c8:	ea4f 422c 	mov.w	r2, ip, asr #16
   138cc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   138d0:	fa1f fc8c 	uxth.w	ip, ip
   138d4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   138d8:	428f      	cmp	r7, r1
   138da:	f846 3b04 	str.w	r3, [r6], #4
   138de:	ea4f 4c22 	mov.w	ip, r2, asr #16
   138e2:	d8ed      	bhi.n	138c0 <__mdiff+0xc4>
   138e4:	3f01      	subs	r7, #1
   138e6:	1a3f      	subs	r7, r7, r0
   138e8:	f027 0703 	bic.w	r7, r7, #3
   138ec:	19e2      	adds	r2, r4, r7
   138ee:	b923      	cbnz	r3, 138fa <__mdiff+0xfe>
   138f0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   138f4:	3d01      	subs	r5, #1
   138f6:	2b00      	cmp	r3, #0
   138f8:	d0fa      	beq.n	138f0 <__mdiff+0xf4>
   138fa:	f8c9 5010 	str.w	r5, [r9, #16]
   138fe:	4648      	mov	r0, r9
   13900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13904:	4633      	mov	r3, r6
   13906:	2701      	movs	r7, #1
   13908:	4646      	mov	r6, r8
   1390a:	4698      	mov	r8, r3
   1390c:	e790      	b.n	13830 <__mdiff+0x34>
   1390e:	dbf9      	blt.n	13904 <__mdiff+0x108>
   13910:	2700      	movs	r7, #0
   13912:	e78d      	b.n	13830 <__mdiff+0x34>
   13914:	2100      	movs	r1, #0
   13916:	f7ff fc71 	bl	131fc <_Balloc>
   1391a:	4681      	mov	r9, r0
   1391c:	b168      	cbz	r0, 1393a <__mdiff+0x13e>
   1391e:	2201      	movs	r2, #1
   13920:	2300      	movs	r3, #0
   13922:	e9c9 2304 	strd	r2, r3, [r9, #16]
   13926:	4648      	mov	r0, r9
   13928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1392c:	4b06      	ldr	r3, [pc, #24]	; (13948 <__mdiff+0x14c>)
   1392e:	4807      	ldr	r0, [pc, #28]	; (1394c <__mdiff+0x150>)
   13930:	464a      	mov	r2, r9
   13932:	f240 2145 	movw	r1, #581	; 0x245
   13936:	f003 fda3 	bl	17480 <__assert_func>
   1393a:	4b03      	ldr	r3, [pc, #12]	; (13948 <__mdiff+0x14c>)
   1393c:	4803      	ldr	r0, [pc, #12]	; (1394c <__mdiff+0x150>)
   1393e:	464a      	mov	r2, r9
   13940:	f240 2137 	movw	r1, #567	; 0x237
   13944:	f003 fd9c 	bl	17480 <__assert_func>
   13948:	20000cfc 	.word	0x20000cfc
   1394c:	20000e74 	.word	0x20000e74

00013950 <__ulp>:
   13950:	b082      	sub	sp, #8
   13952:	ed8d 0b00 	vstr	d0, [sp]
   13956:	4b16      	ldr	r3, [pc, #88]	; (139b0 <__ulp+0x60>)
   13958:	9a01      	ldr	r2, [sp, #4]
   1395a:	4013      	ands	r3, r2
   1395c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   13960:	2b00      	cmp	r3, #0
   13962:	dd06      	ble.n	13972 <__ulp+0x22>
   13964:	2200      	movs	r2, #0
   13966:	4619      	mov	r1, r3
   13968:	4610      	mov	r0, r2
   1396a:	ec41 0b10 	vmov	d0, r0, r1
   1396e:	b002      	add	sp, #8
   13970:	4770      	bx	lr
   13972:	425b      	negs	r3, r3
   13974:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   13978:	ea4f 5223 	mov.w	r2, r3, asr #20
   1397c:	da09      	bge.n	13992 <__ulp+0x42>
   1397e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   13982:	4113      	asrs	r3, r2
   13984:	2200      	movs	r2, #0
   13986:	4619      	mov	r1, r3
   13988:	4610      	mov	r0, r2
   1398a:	ec41 0b10 	vmov	d0, r0, r1
   1398e:	b002      	add	sp, #8
   13990:	4770      	bx	lr
   13992:	f1a2 0314 	sub.w	r3, r2, #20
   13996:	2b1e      	cmp	r3, #30
   13998:	bfda      	itte	le
   1399a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   1399e:	40da      	lsrle	r2, r3
   139a0:	2201      	movgt	r2, #1
   139a2:	2300      	movs	r3, #0
   139a4:	4619      	mov	r1, r3
   139a6:	4610      	mov	r0, r2
   139a8:	ec41 0b10 	vmov	d0, r0, r1
   139ac:	b002      	add	sp, #8
   139ae:	4770      	bx	lr
   139b0:	7ff00000 	.word	0x7ff00000

000139b4 <__b2d>:
   139b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139b6:	6904      	ldr	r4, [r0, #16]
   139b8:	f100 0614 	add.w	r6, r0, #20
   139bc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   139c0:	1f27      	subs	r7, r4, #4
   139c2:	f854 5c04 	ldr.w	r5, [r4, #-4]
   139c6:	4628      	mov	r0, r5
   139c8:	f7ff fcf2 	bl	133b0 <__hi0bits>
   139cc:	f1c0 0320 	rsb	r3, r0, #32
   139d0:	280a      	cmp	r0, #10
   139d2:	600b      	str	r3, [r1, #0]
   139d4:	dd1b      	ble.n	13a0e <__b2d+0x5a>
   139d6:	42be      	cmp	r6, r7
   139d8:	d20b      	bcs.n	139f2 <__b2d+0x3e>
   139da:	380b      	subs	r0, #11
   139dc:	f854 1c08 	ldr.w	r1, [r4, #-8]
   139e0:	d12e      	bne.n	13a40 <__b2d+0x8c>
   139e2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   139e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   139ea:	460a      	mov	r2, r1
   139ec:	ec43 2b10 	vmov	d0, r2, r3
   139f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   139f2:	f1b0 010b 	subs.w	r1, r0, #11
   139f6:	d0f4      	beq.n	139e2 <__b2d+0x2e>
   139f8:	fa05 f101 	lsl.w	r1, r5, r1
   139fc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   13a00:	2100      	movs	r1, #0
   13a02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   13a06:	460a      	mov	r2, r1
   13a08:	ec43 2b10 	vmov	d0, r2, r3
   13a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a0e:	f1c0 0c0b 	rsb	ip, r0, #11
   13a12:	fa25 f10c 	lsr.w	r1, r5, ip
   13a16:	42be      	cmp	r6, r7
   13a18:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   13a1c:	bf38      	it	cc
   13a1e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   13a22:	f100 0015 	add.w	r0, r0, #21
   13a26:	bf34      	ite	cc
   13a28:	fa21 f10c 	lsrcc.w	r1, r1, ip
   13a2c:	2100      	movcs	r1, #0
   13a2e:	fa05 f000 	lsl.w	r0, r5, r0
   13a32:	4301      	orrs	r1, r0
   13a34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   13a38:	460a      	mov	r2, r1
   13a3a:	ec43 2b10 	vmov	d0, r2, r3
   13a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a40:	f1c0 0c20 	rsb	ip, r0, #32
   13a44:	4085      	lsls	r5, r0
   13a46:	fa21 f30c 	lsr.w	r3, r1, ip
   13a4a:	ea45 0703 	orr.w	r7, r5, r3
   13a4e:	f1a4 0508 	sub.w	r5, r4, #8
   13a52:	42ae      	cmp	r6, r5
   13a54:	fa01 f100 	lsl.w	r1, r1, r0
   13a58:	bf3c      	itt	cc
   13a5a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   13a5e:	fa20 f00c 	lsrcc.w	r0, r0, ip
   13a62:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   13a66:	bf38      	it	cc
   13a68:	4301      	orrcc	r1, r0
   13a6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   13a6e:	460a      	mov	r2, r1
   13a70:	ec43 2b10 	vmov	d0, r2, r3
   13a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a76:	bf00      	nop

00013a78 <__d2b>:
   13a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13a7c:	4688      	mov	r8, r1
   13a7e:	b083      	sub	sp, #12
   13a80:	2101      	movs	r1, #1
   13a82:	ec57 6b10 	vmov	r6, r7, d0
   13a86:	4615      	mov	r5, r2
   13a88:	f7ff fbb8 	bl	131fc <_Balloc>
   13a8c:	4604      	mov	r4, r0
   13a8e:	2800      	cmp	r0, #0
   13a90:	d051      	beq.n	13b36 <__d2b+0xbe>
   13a92:	f3c7 590a 	ubfx	r9, r7, #20, #11
   13a96:	f3c7 0313 	ubfx	r3, r7, #0, #20
   13a9a:	f1b9 0f00 	cmp.w	r9, #0
   13a9e:	d001      	beq.n	13aa4 <__d2b+0x2c>
   13aa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13aa4:	2e00      	cmp	r6, #0
   13aa6:	9301      	str	r3, [sp, #4]
   13aa8:	d118      	bne.n	13adc <__d2b+0x64>
   13aaa:	a801      	add	r0, sp, #4
   13aac:	f7ff fca0 	bl	133f0 <__lo0bits>
   13ab0:	9a01      	ldr	r2, [sp, #4]
   13ab2:	6162      	str	r2, [r4, #20]
   13ab4:	2201      	movs	r2, #1
   13ab6:	f100 0320 	add.w	r3, r0, #32
   13aba:	6122      	str	r2, [r4, #16]
   13abc:	f1b9 0f00 	cmp.w	r9, #0
   13ac0:	d025      	beq.n	13b0e <__d2b+0x96>
   13ac2:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   13ac6:	eb09 0203 	add.w	r2, r9, r3
   13aca:	4620      	mov	r0, r4
   13acc:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   13ad0:	f8c8 2000 	str.w	r2, [r8]
   13ad4:	602b      	str	r3, [r5, #0]
   13ad6:	b003      	add	sp, #12
   13ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13adc:	4668      	mov	r0, sp
   13ade:	9600      	str	r6, [sp, #0]
   13ae0:	f7ff fc86 	bl	133f0 <__lo0bits>
   13ae4:	4603      	mov	r3, r0
   13ae6:	b310      	cbz	r0, 13b2e <__d2b+0xb6>
   13ae8:	e9dd 0200 	ldrd	r0, r2, [sp]
   13aec:	f1c3 0120 	rsb	r1, r3, #32
   13af0:	fa02 f101 	lsl.w	r1, r2, r1
   13af4:	4301      	orrs	r1, r0
   13af6:	40da      	lsrs	r2, r3
   13af8:	6161      	str	r1, [r4, #20]
   13afa:	9201      	str	r2, [sp, #4]
   13afc:	2a00      	cmp	r2, #0
   13afe:	61a2      	str	r2, [r4, #24]
   13b00:	bf14      	ite	ne
   13b02:	2202      	movne	r2, #2
   13b04:	2201      	moveq	r2, #1
   13b06:	6122      	str	r2, [r4, #16]
   13b08:	f1b9 0f00 	cmp.w	r9, #0
   13b0c:	d1d9      	bne.n	13ac2 <__d2b+0x4a>
   13b0e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   13b12:	f8c8 3000 	str.w	r3, [r8]
   13b16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   13b1a:	6918      	ldr	r0, [r3, #16]
   13b1c:	f7ff fc48 	bl	133b0 <__hi0bits>
   13b20:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   13b24:	4620      	mov	r0, r4
   13b26:	602b      	str	r3, [r5, #0]
   13b28:	b003      	add	sp, #12
   13b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13b2e:	9a00      	ldr	r2, [sp, #0]
   13b30:	6162      	str	r2, [r4, #20]
   13b32:	9a01      	ldr	r2, [sp, #4]
   13b34:	e7e2      	b.n	13afc <__d2b+0x84>
   13b36:	4b03      	ldr	r3, [pc, #12]	; (13b44 <__d2b+0xcc>)
   13b38:	4803      	ldr	r0, [pc, #12]	; (13b48 <__d2b+0xd0>)
   13b3a:	4622      	mov	r2, r4
   13b3c:	f240 310f 	movw	r1, #783	; 0x30f
   13b40:	f003 fc9e 	bl	17480 <__assert_func>
   13b44:	20000cfc 	.word	0x20000cfc
   13b48:	20000e74 	.word	0x20000e74

00013b4c <__ratio>:
   13b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b4e:	b083      	sub	sp, #12
   13b50:	460e      	mov	r6, r1
   13b52:	4669      	mov	r1, sp
   13b54:	4607      	mov	r7, r0
   13b56:	f7ff ff2d 	bl	139b4 <__b2d>
   13b5a:	a901      	add	r1, sp, #4
   13b5c:	4630      	mov	r0, r6
   13b5e:	ec55 4b10 	vmov	r4, r5, d0
   13b62:	eeb0 7b40 	vmov.f64	d7, d0
   13b66:	f7ff ff25 	bl	139b4 <__b2d>
   13b6a:	6933      	ldr	r3, [r6, #16]
   13b6c:	693a      	ldr	r2, [r7, #16]
   13b6e:	1ad2      	subs	r2, r2, r3
   13b70:	e9dd 3100 	ldrd	r3, r1, [sp]
   13b74:	1a5b      	subs	r3, r3, r1
   13b76:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   13b7a:	2b00      	cmp	r3, #0
   13b7c:	dd09      	ble.n	13b92 <__ratio+0x46>
   13b7e:	ee17 2a90 	vmov	r2, s15
   13b82:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   13b86:	ec45 4b17 	vmov	d7, r4, r5
   13b8a:	ee87 0b00 	vdiv.f64	d0, d7, d0
   13b8e:	b003      	add	sp, #12
   13b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b92:	ee10 2a90 	vmov	r2, s1
   13b96:	ec51 0b10 	vmov	r0, r1, d0
   13b9a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   13b9e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   13ba2:	ec41 0b10 	vmov	d0, r0, r1
   13ba6:	ee87 0b00 	vdiv.f64	d0, d7, d0
   13baa:	b003      	add	sp, #12
   13bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13bae:	bf00      	nop

00013bb0 <__copybits>:
   13bb0:	3901      	subs	r1, #1
   13bb2:	1149      	asrs	r1, r1, #5
   13bb4:	f101 0c01 	add.w	ip, r1, #1
   13bb8:	6911      	ldr	r1, [r2, #16]
   13bba:	f102 0314 	add.w	r3, r2, #20
   13bbe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   13bc2:	428b      	cmp	r3, r1
   13bc4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   13bc8:	d217      	bcs.n	13bfa <__copybits+0x4a>
   13bca:	b510      	push	{r4, lr}
   13bcc:	f1a0 0e04 	sub.w	lr, r0, #4
   13bd0:	f853 4b04 	ldr.w	r4, [r3], #4
   13bd4:	f84e 4f04 	str.w	r4, [lr, #4]!
   13bd8:	4299      	cmp	r1, r3
   13bda:	d8f9      	bhi.n	13bd0 <__copybits+0x20>
   13bdc:	1a8a      	subs	r2, r1, r2
   13bde:	f1a2 0315 	sub.w	r3, r2, #21
   13be2:	f023 0303 	bic.w	r3, r3, #3
   13be6:	3304      	adds	r3, #4
   13be8:	4418      	add	r0, r3
   13bea:	4584      	cmp	ip, r0
   13bec:	d904      	bls.n	13bf8 <__copybits+0x48>
   13bee:	2300      	movs	r3, #0
   13bf0:	f840 3b04 	str.w	r3, [r0], #4
   13bf4:	4584      	cmp	ip, r0
   13bf6:	d8fb      	bhi.n	13bf0 <__copybits+0x40>
   13bf8:	bd10      	pop	{r4, pc}
   13bfa:	4584      	cmp	ip, r0
   13bfc:	d905      	bls.n	13c0a <__copybits+0x5a>
   13bfe:	2300      	movs	r3, #0
   13c00:	f840 3b04 	str.w	r3, [r0], #4
   13c04:	4584      	cmp	ip, r0
   13c06:	d8fb      	bhi.n	13c00 <__copybits+0x50>
   13c08:	4770      	bx	lr
   13c0a:	4770      	bx	lr

00013c0c <__any_on>:
   13c0c:	6903      	ldr	r3, [r0, #16]
   13c0e:	114a      	asrs	r2, r1, #5
   13c10:	4293      	cmp	r3, r2
   13c12:	f100 0014 	add.w	r0, r0, #20
   13c16:	da09      	bge.n	13c2c <__any_on+0x20>
   13c18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   13c1c:	e002      	b.n	13c24 <__any_on+0x18>
   13c1e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   13c22:	b9c2      	cbnz	r2, 13c56 <__any_on+0x4a>
   13c24:	4283      	cmp	r3, r0
   13c26:	d8fa      	bhi.n	13c1e <__any_on+0x12>
   13c28:	2000      	movs	r0, #0
   13c2a:	4770      	bx	lr
   13c2c:	dd10      	ble.n	13c50 <__any_on+0x44>
   13c2e:	f011 011f 	ands.w	r1, r1, #31
   13c32:	d00d      	beq.n	13c50 <__any_on+0x44>
   13c34:	b410      	push	{r4}
   13c36:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   13c3a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   13c3e:	fa24 f201 	lsr.w	r2, r4, r1
   13c42:	408a      	lsls	r2, r1
   13c44:	4294      	cmp	r4, r2
   13c46:	d00c      	beq.n	13c62 <__any_on+0x56>
   13c48:	2001      	movs	r0, #1
   13c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
   13c4e:	4770      	bx	lr
   13c50:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   13c54:	e7e6      	b.n	13c24 <__any_on+0x18>
   13c56:	2001      	movs	r0, #1
   13c58:	4770      	bx	lr
   13c5a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   13c5e:	2a00      	cmp	r2, #0
   13c60:	d1f2      	bne.n	13c48 <__any_on+0x3c>
   13c62:	4283      	cmp	r3, r0
   13c64:	d8f9      	bhi.n	13c5a <__any_on+0x4e>
   13c66:	2000      	movs	r0, #0
   13c68:	f85d 4b04 	ldr.w	r4, [sp], #4
   13c6c:	4770      	bx	lr
   13c6e:	bf00      	nop

00013c70 <__ascii_wctomb>:
   13c70:	b149      	cbz	r1, 13c86 <__ascii_wctomb+0x16>
   13c72:	2aff      	cmp	r2, #255	; 0xff
   13c74:	d802      	bhi.n	13c7c <__ascii_wctomb+0xc>
   13c76:	700a      	strb	r2, [r1, #0]
   13c78:	2001      	movs	r0, #1
   13c7a:	4770      	bx	lr
   13c7c:	238a      	movs	r3, #138	; 0x8a
   13c7e:	6003      	str	r3, [r0, #0]
   13c80:	f04f 30ff 	mov.w	r0, #4294967295
   13c84:	4770      	bx	lr
   13c86:	4608      	mov	r0, r1
   13c88:	4770      	bx	lr
   13c8a:	bf00      	nop

00013c8c <fcvtbuf>:
   13c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13c90:	460e      	mov	r6, r1
   13c92:	4926      	ldr	r1, [pc, #152]	; (13d2c <fcvtbuf+0xa0>)
   13c94:	b087      	sub	sp, #28
   13c96:	680f      	ldr	r7, [r1, #0]
   13c98:	4604      	mov	r4, r0
   13c9a:	4690      	mov	r8, r2
   13c9c:	461d      	mov	r5, r3
   13c9e:	b353      	cbz	r3, 13cf6 <fcvtbuf+0x6a>
   13ca0:	aa05      	add	r2, sp, #20
   13ca2:	4633      	mov	r3, r6
   13ca4:	9201      	str	r2, [sp, #4]
   13ca6:	2103      	movs	r1, #3
   13ca8:	4622      	mov	r2, r4
   13caa:	f8cd 8000 	str.w	r8, [sp]
   13cae:	4638      	mov	r0, r7
   13cb0:	f003 fcd6 	bl	17660 <_dtoa_r>
   13cb4:	9b05      	ldr	r3, [sp, #20]
   13cb6:	6832      	ldr	r2, [r6, #0]
   13cb8:	4298      	cmp	r0, r3
   13cba:	4684      	mov	ip, r0
   13cbc:	f1c2 0200 	rsb	r2, r2, #0
   13cc0:	4629      	mov	r1, r5
   13cc2:	d209      	bcs.n	13cd8 <fcvtbuf+0x4c>
   13cc4:	1a10      	subs	r0, r2, r0
   13cc6:	f81c 3b01 	ldrb.w	r3, [ip], #1
   13cca:	f801 3b01 	strb.w	r3, [r1], #1
   13cce:	9b05      	ldr	r3, [sp, #20]
   13cd0:	4563      	cmp	r3, ip
   13cd2:	eb00 020c 	add.w	r2, r0, ip
   13cd6:	d8f6      	bhi.n	13cc6 <fcvtbuf+0x3a>
   13cd8:	4294      	cmp	r4, r2
   13cda:	dd24      	ble.n	13d26 <fcvtbuf+0x9a>
   13cdc:	1aa2      	subs	r2, r4, r2
   13cde:	440a      	add	r2, r1
   13ce0:	2330      	movs	r3, #48	; 0x30
   13ce2:	f801 3b01 	strb.w	r3, [r1], #1
   13ce6:	4291      	cmp	r1, r2
   13ce8:	d1fb      	bne.n	13ce2 <fcvtbuf+0x56>
   13cea:	2300      	movs	r3, #0
   13cec:	7013      	strb	r3, [r2, #0]
   13cee:	4628      	mov	r0, r5
   13cf0:	b007      	add	sp, #28
   13cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   13cf8:	f100 0323 	add.w	r3, r0, #35	; 0x23
   13cfc:	429a      	cmp	r2, r3
   13cfe:	dd01      	ble.n	13d04 <fcvtbuf+0x78>
   13d00:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   13d02:	e7cd      	b.n	13ca0 <fcvtbuf+0x14>
   13d04:	f100 0924 	add.w	r9, r0, #36	; 0x24
   13d08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   13d0a:	464a      	mov	r2, r9
   13d0c:	4638      	mov	r0, r7
   13d0e:	ed8d 0b02 	vstr	d0, [sp, #8]
   13d12:	f7fc fba9 	bl	10468 <_realloc_r>
   13d16:	4605      	mov	r5, r0
   13d18:	2800      	cmp	r0, #0
   13d1a:	d0e8      	beq.n	13cee <fcvtbuf+0x62>
   13d1c:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   13d20:	ed9d 0b02 	vldr	d0, [sp, #8]
   13d24:	e7bc      	b.n	13ca0 <fcvtbuf+0x14>
   13d26:	460a      	mov	r2, r1
   13d28:	e7df      	b.n	13cea <fcvtbuf+0x5e>
   13d2a:	bf00      	nop
   13d2c:	20008fb4 	.word	0x20008fb4

00013d30 <_svfprintf_r>:
   13d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d34:	ed2d 8b08 	vpush	{d8-d11}
   13d38:	b0d1      	sub	sp, #324	; 0x144
   13d3a:	460c      	mov	r4, r1
   13d3c:	ee0b 1a10 	vmov	s22, r1
   13d40:	4690      	mov	r8, r2
   13d42:	9308      	str	r3, [sp, #32]
   13d44:	4683      	mov	fp, r0
   13d46:	f003 fb59 	bl	173fc <_localeconv_r>
   13d4a:	6803      	ldr	r3, [r0, #0]
   13d4c:	9312      	str	r3, [sp, #72]	; 0x48
   13d4e:	4618      	mov	r0, r3
   13d50:	f7fe fc16 	bl	12580 <strlen>
   13d54:	af20      	add	r7, sp, #128	; 0x80
   13d56:	9010      	str	r0, [sp, #64]	; 0x40
   13d58:	2208      	movs	r2, #8
   13d5a:	2100      	movs	r1, #0
   13d5c:	4638      	mov	r0, r7
   13d5e:	f7fe f82b 	bl	11db8 <memset>
   13d62:	89a3      	ldrh	r3, [r4, #12]
   13d64:	061b      	lsls	r3, r3, #24
   13d66:	d503      	bpl.n	13d70 <_svfprintf_r+0x40>
   13d68:	6923      	ldr	r3, [r4, #16]
   13d6a:	2b00      	cmp	r3, #0
   13d6c:	f000 8755 	beq.w	14c1a <_svfprintf_r+0xeea>
   13d70:	2300      	movs	r3, #0
   13d72:	ed9f 8b83 	vldr	d8, [pc, #524]	; 13f80 <_svfprintf_r+0x250>
   13d76:	ed9f 9b84 	vldr	d9, [pc, #528]	; 13f88 <_svfprintf_r+0x258>
   13d7a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   13d7e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   13d82:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   13d86:	aa27      	add	r2, sp, #156	; 0x9c
   13d88:	930e      	str	r3, [sp, #56]	; 0x38
   13d8a:	9224      	str	r2, [sp, #144]	; 0x90
   13d8c:	4692      	mov	sl, r2
   13d8e:	9311      	str	r3, [sp, #68]	; 0x44
   13d90:	9304      	str	r3, [sp, #16]
   13d92:	4644      	mov	r4, r8
   13d94:	46a1      	mov	r9, r4
   13d96:	4b7e      	ldr	r3, [pc, #504]	; (13f90 <_svfprintf_r+0x260>)
   13d98:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   13d9c:	f7fe f92c 	bl	11ff8 <__locale_mb_cur_max>
   13da0:	464a      	mov	r2, r9
   13da2:	4603      	mov	r3, r0
   13da4:	a91c      	add	r1, sp, #112	; 0x70
   13da6:	9700      	str	r7, [sp, #0]
   13da8:	4658      	mov	r0, fp
   13daa:	47a8      	blx	r5
   13dac:	2800      	cmp	r0, #0
   13dae:	f000 80b0 	beq.w	13f12 <_svfprintf_r+0x1e2>
   13db2:	f2c0 80a6 	blt.w	13f02 <_svfprintf_r+0x1d2>
   13db6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13db8:	2a25      	cmp	r2, #37	; 0x25
   13dba:	4603      	mov	r3, r0
   13dbc:	d001      	beq.n	13dc2 <_svfprintf_r+0x92>
   13dbe:	4499      	add	r9, r3
   13dc0:	e7e9      	b.n	13d96 <_svfprintf_r+0x66>
   13dc2:	ebb9 0504 	subs.w	r5, r9, r4
   13dc6:	4606      	mov	r6, r0
   13dc8:	f040 80a7 	bne.w	13f1a <_svfprintf_r+0x1ea>
   13dcc:	2300      	movs	r3, #0
   13dce:	f04f 32ff 	mov.w	r2, #4294967295
   13dd2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   13dd6:	4698      	mov	r8, r3
   13dd8:	9306      	str	r3, [sp, #24]
   13dda:	f109 0901 	add.w	r9, r9, #1
   13dde:	f899 3000 	ldrb.w	r3, [r9]
   13de2:	9203      	str	r2, [sp, #12]
   13de4:	252b      	movs	r5, #43	; 0x2b
   13de6:	2620      	movs	r6, #32
   13de8:	f109 0901 	add.w	r9, r9, #1
   13dec:	f1a3 0220 	sub.w	r2, r3, #32
   13df0:	2a5a      	cmp	r2, #90	; 0x5a
   13df2:	f200 80cf 	bhi.w	13f94 <_svfprintf_r+0x264>
   13df6:	e8df f012 	tbh	[pc, r2, lsl #1]
   13dfa:	02e8      	.short	0x02e8
   13dfc:	00cd00cd 	.word	0x00cd00cd
   13e00:	00cd02e3 	.word	0x00cd02e3
   13e04:	00cd00cd 	.word	0x00cd00cd
   13e08:	00cd006a 	.word	0x00cd006a
   13e0c:	020500cd 	.word	0x020500cd
   13e10:	00cd0284 	.word	0x00cd0284
   13e14:	02c90210 	.word	0x02c90210
   13e18:	02bd00cd 	.word	0x02bd00cd
   13e1c:	005b005b 	.word	0x005b005b
   13e20:	005b005b 	.word	0x005b005b
   13e24:	005b005b 	.word	0x005b005b
   13e28:	005b005b 	.word	0x005b005b
   13e2c:	00cd005b 	.word	0x00cd005b
   13e30:	00cd00cd 	.word	0x00cd00cd
   13e34:	00cd00cd 	.word	0x00cd00cd
   13e38:	00cd00cd 	.word	0x00cd00cd
   13e3c:	00cd0153 	.word	0x00cd0153
   13e40:	021a0183 	.word	0x021a0183
   13e44:	01530153 	.word	0x01530153
   13e48:	00cd0153 	.word	0x00cd0153
   13e4c:	00cd00cd 	.word	0x00cd00cd
   13e50:	021500cd 	.word	0x021500cd
   13e54:	00cd00cd 	.word	0x00cd00cd
   13e58:	00cd0296 	.word	0x00cd0296
   13e5c:	00cd00cd 	.word	0x00cd00cd
   13e60:	00cd01ab 	.word	0x00cd01ab
   13e64:	00cd02aa 	.word	0x00cd02aa
   13e68:	06e300cd 	.word	0x06e300cd
   13e6c:	00cd00cd 	.word	0x00cd00cd
   13e70:	00cd00cd 	.word	0x00cd00cd
   13e74:	00cd00cd 	.word	0x00cd00cd
   13e78:	00cd00cd 	.word	0x00cd00cd
   13e7c:	00cd0153 	.word	0x00cd0153
   13e80:	01de0183 	.word	0x01de0183
   13e84:	01530153 	.word	0x01530153
   13e88:	02770153 	.word	0x02770153
   13e8c:	007f01de 	.word	0x007f01de
   13e90:	028900cd 	.word	0x028900cd
   13e94:	025f00cd 	.word	0x025f00cd
   13e98:	022f06e0 	.word	0x022f06e0
   13e9c:	00cd007f 	.word	0x00cd007f
   13ea0:	007c01ab 	.word	0x007c01ab
   13ea4:	00cd06b8 	.word	0x00cd06b8
   13ea8:	06bd00cd 	.word	0x06bd00cd
   13eac:	007c00cd 	.word	0x007c00cd
   13eb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13eb4:	2100      	movs	r1, #0
   13eb6:	f819 3b01 	ldrb.w	r3, [r9], #1
   13eba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   13ebe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   13ec2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13ec6:	2a09      	cmp	r2, #9
   13ec8:	d9f5      	bls.n	13eb6 <_svfprintf_r+0x186>
   13eca:	9106      	str	r1, [sp, #24]
   13ecc:	e78e      	b.n	13dec <_svfprintf_r+0xbc>
   13ece:	4658      	mov	r0, fp
   13ed0:	f003 fa94 	bl	173fc <_localeconv_r>
   13ed4:	6843      	ldr	r3, [r0, #4]
   13ed6:	9315      	str	r3, [sp, #84]	; 0x54
   13ed8:	4618      	mov	r0, r3
   13eda:	f7fe fb51 	bl	12580 <strlen>
   13ede:	9016      	str	r0, [sp, #88]	; 0x58
   13ee0:	4658      	mov	r0, fp
   13ee2:	f003 fa8b 	bl	173fc <_localeconv_r>
   13ee6:	6883      	ldr	r3, [r0, #8]
   13ee8:	9313      	str	r3, [sp, #76]	; 0x4c
   13eea:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13eec:	2b00      	cmp	r3, #0
   13eee:	f040 862d 	bne.w	14b4c <_svfprintf_r+0xe1c>
   13ef2:	f899 3000 	ldrb.w	r3, [r9]
   13ef6:	e777      	b.n	13de8 <_svfprintf_r+0xb8>
   13ef8:	f899 3000 	ldrb.w	r3, [r9]
   13efc:	f048 0820 	orr.w	r8, r8, #32
   13f00:	e772      	b.n	13de8 <_svfprintf_r+0xb8>
   13f02:	2208      	movs	r2, #8
   13f04:	2100      	movs	r1, #0
   13f06:	4638      	mov	r0, r7
   13f08:	f7fd ff56 	bl	11db8 <memset>
   13f0c:	2301      	movs	r3, #1
   13f0e:	4499      	add	r9, r3
   13f10:	e741      	b.n	13d96 <_svfprintf_r+0x66>
   13f12:	ebb9 0504 	subs.w	r5, r9, r4
   13f16:	4606      	mov	r6, r0
   13f18:	d011      	beq.n	13f3e <_svfprintf_r+0x20e>
   13f1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   13f1c:	442b      	add	r3, r5
   13f1e:	9326      	str	r3, [sp, #152]	; 0x98
   13f20:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13f22:	3301      	adds	r3, #1
   13f24:	2b07      	cmp	r3, #7
   13f26:	e9ca 4500 	strd	r4, r5, [sl]
   13f2a:	9325      	str	r3, [sp, #148]	; 0x94
   13f2c:	dc1c      	bgt.n	13f68 <_svfprintf_r+0x238>
   13f2e:	f10a 0a08 	add.w	sl, sl, #8
   13f32:	9b04      	ldr	r3, [sp, #16]
   13f34:	442b      	add	r3, r5
   13f36:	9304      	str	r3, [sp, #16]
   13f38:	2e00      	cmp	r6, #0
   13f3a:	f47f af47 	bne.w	13dcc <_svfprintf_r+0x9c>
   13f3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   13f40:	2b00      	cmp	r3, #0
   13f42:	f041 820b 	bne.w	1535c <_svfprintf_r+0x162c>
   13f46:	ee1b 3a10 	vmov	r3, s22
   13f4a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13f4e:	f013 0f40 	tst.w	r3, #64	; 0x40
   13f52:	9b04      	ldr	r3, [sp, #16]
   13f54:	bf18      	it	ne
   13f56:	f04f 33ff 	movne.w	r3, #4294967295
   13f5a:	9304      	str	r3, [sp, #16]
   13f5c:	9804      	ldr	r0, [sp, #16]
   13f5e:	b051      	add	sp, #324	; 0x144
   13f60:	ecbd 8b08 	vpop	{d8-d11}
   13f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f68:	ee1b 1a10 	vmov	r1, s22
   13f6c:	aa24      	add	r2, sp, #144	; 0x90
   13f6e:	4658      	mov	r0, fp
   13f70:	f004 fd6a 	bl	18a48 <__ssprint_r>
   13f74:	2800      	cmp	r0, #0
   13f76:	d1e6      	bne.n	13f46 <_svfprintf_r+0x216>
   13f78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13f7c:	e7d9      	b.n	13f32 <_svfprintf_r+0x202>
   13f7e:	bf00      	nop
	...
   13f88:	ffffffff 	.word	0xffffffff
   13f8c:	7fefffff 	.word	0x7fefffff
   13f90:	20008a2c 	.word	0x20008a2c
   13f94:	930b      	str	r3, [sp, #44]	; 0x2c
   13f96:	2b00      	cmp	r3, #0
   13f98:	d0d1      	beq.n	13f3e <_svfprintf_r+0x20e>
   13f9a:	2100      	movs	r1, #0
   13f9c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   13fa0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   13fa4:	2301      	movs	r3, #1
   13fa6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   13faa:	9302      	str	r3, [sp, #8]
   13fac:	9107      	str	r1, [sp, #28]
   13fae:	9305      	str	r3, [sp, #20]
   13fb0:	9103      	str	r1, [sp, #12]
   13fb2:	910f      	str	r1, [sp, #60]	; 0x3c
   13fb4:	ac37      	add	r4, sp, #220	; 0xdc
   13fb6:	f018 0302 	ands.w	r3, r8, #2
   13fba:	9309      	str	r3, [sp, #36]	; 0x24
   13fbc:	d002      	beq.n	13fc4 <_svfprintf_r+0x294>
   13fbe:	9b02      	ldr	r3, [sp, #8]
   13fc0:	3302      	adds	r3, #2
   13fc2:	9302      	str	r3, [sp, #8]
   13fc4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   13fc8:	930a      	str	r3, [sp, #40]	; 0x28
   13fca:	d105      	bne.n	13fd8 <_svfprintf_r+0x2a8>
   13fcc:	9b06      	ldr	r3, [sp, #24]
   13fce:	9a02      	ldr	r2, [sp, #8]
   13fd0:	1a9d      	subs	r5, r3, r2
   13fd2:	2d00      	cmp	r5, #0
   13fd4:	f300 8369 	bgt.w	146aa <_svfprintf_r+0x97a>
   13fd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13fda:	b189      	cbz	r1, 14000 <_svfprintf_r+0x2d0>
   13fdc:	9925      	ldr	r1, [sp, #148]	; 0x94
   13fde:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   13fe2:	3101      	adds	r1, #1
   13fe4:	3201      	adds	r2, #1
   13fe6:	f8ca 0000 	str.w	r0, [sl]
   13fea:	2907      	cmp	r1, #7
   13fec:	f04f 0001 	mov.w	r0, #1
   13ff0:	9226      	str	r2, [sp, #152]	; 0x98
   13ff2:	9125      	str	r1, [sp, #148]	; 0x94
   13ff4:	f8ca 0004 	str.w	r0, [sl, #4]
   13ff8:	f300 83a2 	bgt.w	14740 <_svfprintf_r+0xa10>
   13ffc:	f10a 0a08 	add.w	sl, sl, #8
   14000:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14002:	b183      	cbz	r3, 14026 <_svfprintf_r+0x2f6>
   14004:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14006:	a91a      	add	r1, sp, #104	; 0x68
   14008:	3301      	adds	r3, #1
   1400a:	3202      	adds	r2, #2
   1400c:	f8ca 1000 	str.w	r1, [sl]
   14010:	2b07      	cmp	r3, #7
   14012:	f04f 0102 	mov.w	r1, #2
   14016:	9226      	str	r2, [sp, #152]	; 0x98
   14018:	9325      	str	r3, [sp, #148]	; 0x94
   1401a:	f8ca 1004 	str.w	r1, [sl, #4]
   1401e:	f300 83a3 	bgt.w	14768 <_svfprintf_r+0xa38>
   14022:	f10a 0a08 	add.w	sl, sl, #8
   14026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14028:	2b80      	cmp	r3, #128	; 0x80
   1402a:	f000 826c 	beq.w	14506 <_svfprintf_r+0x7d6>
   1402e:	9b03      	ldr	r3, [sp, #12]
   14030:	9905      	ldr	r1, [sp, #20]
   14032:	1a5d      	subs	r5, r3, r1
   14034:	2d00      	cmp	r5, #0
   14036:	f300 82a5 	bgt.w	14584 <_svfprintf_r+0x854>
   1403a:	f418 7f80 	tst.w	r8, #256	; 0x100
   1403e:	f040 820d 	bne.w	1445c <_svfprintf_r+0x72c>
   14042:	9b05      	ldr	r3, [sp, #20]
   14044:	f8ca 3004 	str.w	r3, [sl, #4]
   14048:	441a      	add	r2, r3
   1404a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1404c:	f8ca 4000 	str.w	r4, [sl]
   14050:	3301      	adds	r3, #1
   14052:	2b07      	cmp	r3, #7
   14054:	9226      	str	r2, [sp, #152]	; 0x98
   14056:	9325      	str	r3, [sp, #148]	; 0x94
   14058:	f300 831b 	bgt.w	14692 <_svfprintf_r+0x962>
   1405c:	f10a 0a08 	add.w	sl, sl, #8
   14060:	f018 0f04 	tst.w	r8, #4
   14064:	d005      	beq.n	14072 <_svfprintf_r+0x342>
   14066:	9b06      	ldr	r3, [sp, #24]
   14068:	9902      	ldr	r1, [sp, #8]
   1406a:	1a5c      	subs	r4, r3, r1
   1406c:	2c00      	cmp	r4, #0
   1406e:	f300 8388 	bgt.w	14782 <_svfprintf_r+0xa52>
   14072:	9b04      	ldr	r3, [sp, #16]
   14074:	9906      	ldr	r1, [sp, #24]
   14076:	9802      	ldr	r0, [sp, #8]
   14078:	4281      	cmp	r1, r0
   1407a:	bfac      	ite	ge
   1407c:	185b      	addge	r3, r3, r1
   1407e:	181b      	addlt	r3, r3, r0
   14080:	9304      	str	r3, [sp, #16]
   14082:	2a00      	cmp	r2, #0
   14084:	f040 82b0 	bne.w	145e8 <_svfprintf_r+0x8b8>
   14088:	2300      	movs	r3, #0
   1408a:	9325      	str	r3, [sp, #148]	; 0x94
   1408c:	9b07      	ldr	r3, [sp, #28]
   1408e:	b11b      	cbz	r3, 14098 <_svfprintf_r+0x368>
   14090:	9907      	ldr	r1, [sp, #28]
   14092:	4658      	mov	r0, fp
   14094:	f7fe fb86 	bl	127a4 <_free_r>
   14098:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1409c:	464c      	mov	r4, r9
   1409e:	e679      	b.n	13d94 <_svfprintf_r+0x64>
   140a0:	930b      	str	r3, [sp, #44]	; 0x2c
   140a2:	9b08      	ldr	r3, [sp, #32]
   140a4:	3307      	adds	r3, #7
   140a6:	f023 0307 	bic.w	r3, r3, #7
   140aa:	ecb3 8b02 	vldmia	r3!, {d8}
   140ae:	eeb0 7bc8 	vabs.f64	d7, d8
   140b2:	eeb4 7b49 	vcmp.f64	d7, d9
   140b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   140ba:	9308      	str	r3, [sp, #32]
   140bc:	f340 84e9 	ble.w	14a92 <_svfprintf_r+0xd62>
   140c0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   140c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   140c8:	f101 8059 	bmi.w	1517e <_svfprintf_r+0x144e>
   140cc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   140d0:	4cab      	ldr	r4, [pc, #684]	; (14380 <_svfprintf_r+0x650>)
   140d2:	4bac      	ldr	r3, [pc, #688]	; (14384 <_svfprintf_r+0x654>)
   140d4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   140d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   140da:	2a47      	cmp	r2, #71	; 0x47
   140dc:	bfc8      	it	gt
   140de:	461c      	movgt	r4, r3
   140e0:	2300      	movs	r3, #0
   140e2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   140e6:	2203      	movs	r2, #3
   140e8:	9307      	str	r3, [sp, #28]
   140ea:	9202      	str	r2, [sp, #8]
   140ec:	9205      	str	r2, [sp, #20]
   140ee:	9303      	str	r3, [sp, #12]
   140f0:	930f      	str	r3, [sp, #60]	; 0x3c
   140f2:	2900      	cmp	r1, #0
   140f4:	f43f af5f 	beq.w	13fb6 <_svfprintf_r+0x286>
   140f8:	9b02      	ldr	r3, [sp, #8]
   140fa:	3301      	adds	r3, #1
   140fc:	9302      	str	r3, [sp, #8]
   140fe:	e75a      	b.n	13fb6 <_svfprintf_r+0x286>
   14100:	2b43      	cmp	r3, #67	; 0x43
   14102:	930b      	str	r3, [sp, #44]	; 0x2c
   14104:	d003      	beq.n	1410e <_svfprintf_r+0x3de>
   14106:	f018 0f10 	tst.w	r8, #16
   1410a:	f000 855d 	beq.w	14bc8 <_svfprintf_r+0xe98>
   1410e:	9d08      	ldr	r5, [sp, #32]
   14110:	2208      	movs	r2, #8
   14112:	2100      	movs	r1, #0
   14114:	a822      	add	r0, sp, #136	; 0x88
   14116:	ac37      	add	r4, sp, #220	; 0xdc
   14118:	f7fd fe4e 	bl	11db8 <memset>
   1411c:	ab22      	add	r3, sp, #136	; 0x88
   1411e:	f855 2b04 	ldr.w	r2, [r5], #4
   14122:	4621      	mov	r1, r4
   14124:	4658      	mov	r0, fp
   14126:	f004 fb65 	bl	187f4 <_wcrtomb_r>
   1412a:	4603      	mov	r3, r0
   1412c:	3301      	adds	r3, #1
   1412e:	9005      	str	r0, [sp, #20]
   14130:	f001 82ee 	beq.w	15710 <_svfprintf_r+0x19e0>
   14134:	9b05      	ldr	r3, [sp, #20]
   14136:	9508      	str	r5, [sp, #32]
   14138:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1413c:	9302      	str	r3, [sp, #8]
   1413e:	2100      	movs	r1, #0
   14140:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   14144:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   14148:	9107      	str	r1, [sp, #28]
   1414a:	9103      	str	r1, [sp, #12]
   1414c:	910f      	str	r1, [sp, #60]	; 0x3c
   1414e:	e732      	b.n	13fb6 <_svfprintf_r+0x286>
   14150:	930b      	str	r3, [sp, #44]	; 0x2c
   14152:	9b08      	ldr	r3, [sp, #32]
   14154:	461a      	mov	r2, r3
   14156:	2300      	movs	r3, #0
   14158:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   1415c:	4613      	mov	r3, r2
   1415e:	f853 4b04 	ldr.w	r4, [r3], #4
   14162:	9308      	str	r3, [sp, #32]
   14164:	2c00      	cmp	r4, #0
   14166:	f000 8548 	beq.w	14bfa <_svfprintf_r+0xeca>
   1416a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1416c:	2b53      	cmp	r3, #83	; 0x53
   1416e:	f000 86ec 	beq.w	14f4a <_svfprintf_r+0x121a>
   14172:	f018 0310 	ands.w	r3, r8, #16
   14176:	930c      	str	r3, [sp, #48]	; 0x30
   14178:	f040 86e7 	bne.w	14f4a <_svfprintf_r+0x121a>
   1417c:	9b03      	ldr	r3, [sp, #12]
   1417e:	1c5d      	adds	r5, r3, #1
   14180:	f001 80e5 	beq.w	1534e <_svfprintf_r+0x161e>
   14184:	990c      	ldr	r1, [sp, #48]	; 0x30
   14186:	461a      	mov	r2, r3
   14188:	4620      	mov	r0, r4
   1418a:	f7fe f9a9 	bl	124e0 <memchr>
   1418e:	9007      	str	r0, [sp, #28]
   14190:	2800      	cmp	r0, #0
   14192:	f001 8328 	beq.w	157e6 <_svfprintf_r+0x1ab6>
   14196:	9b07      	ldr	r3, [sp, #28]
   14198:	1b1a      	subs	r2, r3, r4
   1419a:	9205      	str	r2, [sp, #20]
   1419c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1419e:	9303      	str	r3, [sp, #12]
   141a0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   141a4:	930f      	str	r3, [sp, #60]	; 0x3c
   141a6:	930d      	str	r3, [sp, #52]	; 0x34
   141a8:	9307      	str	r3, [sp, #28]
   141aa:	2373      	movs	r3, #115	; 0x73
   141ac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   141b0:	9202      	str	r2, [sp, #8]
   141b2:	930b      	str	r3, [sp, #44]	; 0x2c
   141b4:	e79d      	b.n	140f2 <_svfprintf_r+0x3c2>
   141b6:	f018 0f20 	tst.w	r8, #32
   141ba:	930b      	str	r3, [sp, #44]	; 0x2c
   141bc:	9b08      	ldr	r3, [sp, #32]
   141be:	d03d      	beq.n	1423c <_svfprintf_r+0x50c>
   141c0:	3307      	adds	r3, #7
   141c2:	f023 0307 	bic.w	r3, r3, #7
   141c6:	461a      	mov	r2, r3
   141c8:	4611      	mov	r1, r2
   141ca:	685b      	ldr	r3, [r3, #4]
   141cc:	f851 2b08 	ldr.w	r2, [r1], #8
   141d0:	9108      	str	r1, [sp, #32]
   141d2:	4619      	mov	r1, r3
   141d4:	2b00      	cmp	r3, #0
   141d6:	f2c0 840c 	blt.w	149f2 <_svfprintf_r+0xcc2>
   141da:	9b03      	ldr	r3, [sp, #12]
   141dc:	3301      	adds	r3, #1
   141de:	f000 829e 	beq.w	1471e <_svfprintf_r+0x9ee>
   141e2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   141e6:	ea52 0301 	orrs.w	r3, r2, r1
   141ea:	9002      	str	r0, [sp, #8]
   141ec:	f040 8299 	bne.w	14722 <_svfprintf_r+0x9f2>
   141f0:	9b03      	ldr	r3, [sp, #12]
   141f2:	2b00      	cmp	r3, #0
   141f4:	f040 829a 	bne.w	1472c <_svfprintf_r+0x9fc>
   141f8:	4680      	mov	r8, r0
   141fa:	2300      	movs	r3, #0
   141fc:	9303      	str	r3, [sp, #12]
   141fe:	9305      	str	r3, [sp, #20]
   14200:	ac50      	add	r4, sp, #320	; 0x140
   14202:	e106      	b.n	14412 <_svfprintf_r+0x6e2>
   14204:	9b08      	ldr	r3, [sp, #32]
   14206:	f853 2b04 	ldr.w	r2, [r3], #4
   1420a:	9206      	str	r2, [sp, #24]
   1420c:	2a00      	cmp	r2, #0
   1420e:	f280 8419 	bge.w	14a44 <_svfprintf_r+0xd14>
   14212:	9a06      	ldr	r2, [sp, #24]
   14214:	9308      	str	r3, [sp, #32]
   14216:	4252      	negs	r2, r2
   14218:	9206      	str	r2, [sp, #24]
   1421a:	f899 3000 	ldrb.w	r3, [r9]
   1421e:	f048 0804 	orr.w	r8, r8, #4
   14222:	e5e1      	b.n	13de8 <_svfprintf_r+0xb8>
   14224:	f899 3000 	ldrb.w	r3, [r9]
   14228:	f048 0808 	orr.w	r8, r8, #8
   1422c:	e5dc      	b.n	13de8 <_svfprintf_r+0xb8>
   1422e:	f048 0810 	orr.w	r8, r8, #16
   14232:	f018 0f20 	tst.w	r8, #32
   14236:	930b      	str	r3, [sp, #44]	; 0x2c
   14238:	9b08      	ldr	r3, [sp, #32]
   1423a:	d1c1      	bne.n	141c0 <_svfprintf_r+0x490>
   1423c:	f018 0f10 	tst.w	r8, #16
   14240:	f040 840b 	bne.w	14a5a <_svfprintf_r+0xd2a>
   14244:	f018 0f40 	tst.w	r8, #64	; 0x40
   14248:	f000 8403 	beq.w	14a52 <_svfprintf_r+0xd22>
   1424c:	f933 2b04 	ldrsh.w	r2, [r3], #4
   14250:	9308      	str	r3, [sp, #32]
   14252:	17d1      	asrs	r1, r2, #31
   14254:	460b      	mov	r3, r1
   14256:	e7bd      	b.n	141d4 <_svfprintf_r+0x4a4>
   14258:	9b08      	ldr	r3, [sp, #32]
   1425a:	f048 0202 	orr.w	r2, r8, #2
   1425e:	9202      	str	r2, [sp, #8]
   14260:	f853 2b04 	ldr.w	r2, [r3], #4
   14264:	9308      	str	r3, [sp, #32]
   14266:	f647 0330 	movw	r3, #30768	; 0x7830
   1426a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   1426e:	2078      	movs	r0, #120	; 0x78
   14270:	4b45      	ldr	r3, [pc, #276]	; (14388 <_svfprintf_r+0x658>)
   14272:	9311      	str	r3, [sp, #68]	; 0x44
   14274:	2100      	movs	r1, #0
   14276:	2302      	movs	r3, #2
   14278:	900b      	str	r0, [sp, #44]	; 0x2c
   1427a:	2000      	movs	r0, #0
   1427c:	9c03      	ldr	r4, [sp, #12]
   1427e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   14282:	1c60      	adds	r0, r4, #1
   14284:	f000 80ad 	beq.w	143e2 <_svfprintf_r+0x6b2>
   14288:	9802      	ldr	r0, [sp, #8]
   1428a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   1428e:	ea52 0001 	orrs.w	r0, r2, r1
   14292:	f040 80a4 	bne.w	143de <_svfprintf_r+0x6ae>
   14296:	2c00      	cmp	r4, #0
   14298:	f040 86ae 	bne.w	14ff8 <_svfprintf_r+0x12c8>
   1429c:	2b00      	cmp	r3, #0
   1429e:	d1ac      	bne.n	141fa <_svfprintf_r+0x4ca>
   142a0:	9b02      	ldr	r3, [sp, #8]
   142a2:	f013 0301 	ands.w	r3, r3, #1
   142a6:	9305      	str	r3, [sp, #20]
   142a8:	f000 83d1 	beq.w	14a4e <_svfprintf_r+0xd1e>
   142ac:	2330      	movs	r3, #48	; 0x30
   142ae:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   142b2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   142b6:	e0ac      	b.n	14412 <_svfprintf_r+0x6e2>
   142b8:	f018 0f20 	tst.w	r8, #32
   142bc:	f040 83d4 	bne.w	14a68 <_svfprintf_r+0xd38>
   142c0:	f018 0f10 	tst.w	r8, #16
   142c4:	f040 869f 	bne.w	15006 <_svfprintf_r+0x12d6>
   142c8:	f018 0f40 	tst.w	r8, #64	; 0x40
   142cc:	f040 8797 	bne.w	151fe <_svfprintf_r+0x14ce>
   142d0:	f418 7f00 	tst.w	r8, #512	; 0x200
   142d4:	f000 8697 	beq.w	15006 <_svfprintf_r+0x12d6>
   142d8:	9b08      	ldr	r3, [sp, #32]
   142da:	9904      	ldr	r1, [sp, #16]
   142dc:	f853 2b04 	ldr.w	r2, [r3], #4
   142e0:	9308      	str	r3, [sp, #32]
   142e2:	7011      	strb	r1, [r2, #0]
   142e4:	464c      	mov	r4, r9
   142e6:	e555      	b.n	13d94 <_svfprintf_r+0x64>
   142e8:	f899 3000 	ldrb.w	r3, [r9]
   142ec:	2b68      	cmp	r3, #104	; 0x68
   142ee:	bf03      	ittte	eq
   142f0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   142f4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   142f8:	f109 0901 	addeq.w	r9, r9, #1
   142fc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   14300:	e572      	b.n	13de8 <_svfprintf_r+0xb8>
   14302:	f899 3000 	ldrb.w	r3, [r9]
   14306:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   1430a:	e56d      	b.n	13de8 <_svfprintf_r+0xb8>
   1430c:	f899 3000 	ldrb.w	r3, [r9]
   14310:	2b6c      	cmp	r3, #108	; 0x6c
   14312:	bf03      	ittte	eq
   14314:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   14318:	f048 0820 	orreq.w	r8, r8, #32
   1431c:	f109 0901 	addeq.w	r9, r9, #1
   14320:	f048 0810 	orrne.w	r8, r8, #16
   14324:	e560      	b.n	13de8 <_svfprintf_r+0xb8>
   14326:	930b      	str	r3, [sp, #44]	; 0x2c
   14328:	f048 0810 	orr.w	r8, r8, #16
   1432c:	f018 0120 	ands.w	r1, r8, #32
   14330:	f000 8351 	beq.w	149d6 <_svfprintf_r+0xca6>
   14334:	9b08      	ldr	r3, [sp, #32]
   14336:	3307      	adds	r3, #7
   14338:	f023 0307 	bic.w	r3, r3, #7
   1433c:	6859      	ldr	r1, [r3, #4]
   1433e:	f853 2b08 	ldr.w	r2, [r3], #8
   14342:	9308      	str	r3, [sp, #32]
   14344:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   14348:	9302      	str	r3, [sp, #8]
   1434a:	2300      	movs	r3, #0
   1434c:	e795      	b.n	1427a <_svfprintf_r+0x54a>
   1434e:	930b      	str	r3, [sp, #44]	; 0x2c
   14350:	f048 0310 	orr.w	r3, r8, #16
   14354:	9302      	str	r3, [sp, #8]
   14356:	9b02      	ldr	r3, [sp, #8]
   14358:	f013 0120 	ands.w	r1, r3, #32
   1435c:	f000 8329 	beq.w	149b2 <_svfprintf_r+0xc82>
   14360:	9b08      	ldr	r3, [sp, #32]
   14362:	3307      	adds	r3, #7
   14364:	f023 0307 	bic.w	r3, r3, #7
   14368:	6859      	ldr	r1, [r3, #4]
   1436a:	f853 2b08 	ldr.w	r2, [r3], #8
   1436e:	9308      	str	r3, [sp, #32]
   14370:	2301      	movs	r3, #1
   14372:	e782      	b.n	1427a <_svfprintf_r+0x54a>
   14374:	f899 3000 	ldrb.w	r3, [r9]
   14378:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   1437c:	e534      	b.n	13de8 <_svfprintf_r+0xb8>
   1437e:	bf00      	nop
   14380:	2000106c 	.word	0x2000106c
   14384:	20000b48 	.word	0x20000b48
   14388:	20001074 	.word	0x20001074
   1438c:	4649      	mov	r1, r9
   1438e:	f811 3b01 	ldrb.w	r3, [r1], #1
   14392:	2b2a      	cmp	r3, #42	; 0x2a
   14394:	f001 8249 	beq.w	1582a <_svfprintf_r+0x1afa>
   14398:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1439c:	2a09      	cmp	r2, #9
   1439e:	4689      	mov	r9, r1
   143a0:	bf98      	it	ls
   143a2:	2100      	movls	r1, #0
   143a4:	f201 8144 	bhi.w	15630 <_svfprintf_r+0x1900>
   143a8:	f819 3b01 	ldrb.w	r3, [r9], #1
   143ac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   143b0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   143b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   143b8:	2a09      	cmp	r2, #9
   143ba:	d9f5      	bls.n	143a8 <_svfprintf_r+0x678>
   143bc:	9103      	str	r1, [sp, #12]
   143be:	e515      	b.n	13dec <_svfprintf_r+0xbc>
   143c0:	f899 3000 	ldrb.w	r3, [r9]
   143c4:	f048 0801 	orr.w	r8, r8, #1
   143c8:	e50e      	b.n	13de8 <_svfprintf_r+0xb8>
   143ca:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   143ce:	2b00      	cmp	r3, #0
   143d0:	f47f ad8f 	bne.w	13ef2 <_svfprintf_r+0x1c2>
   143d4:	f899 3000 	ldrb.w	r3, [r9]
   143d8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   143dc:	e504      	b.n	13de8 <_svfprintf_r+0xb8>
   143de:	f8cd 8008 	str.w	r8, [sp, #8]
   143e2:	2b01      	cmp	r3, #1
   143e4:	f000 819d 	beq.w	14722 <_svfprintf_r+0x9f2>
   143e8:	2b02      	cmp	r3, #2
   143ea:	ac50      	add	r4, sp, #320	; 0x140
   143ec:	d120      	bne.n	14430 <_svfprintf_r+0x700>
   143ee:	9811      	ldr	r0, [sp, #68]	; 0x44
   143f0:	f002 030f 	and.w	r3, r2, #15
   143f4:	0912      	lsrs	r2, r2, #4
   143f6:	5cc3      	ldrb	r3, [r0, r3]
   143f8:	f804 3d01 	strb.w	r3, [r4, #-1]!
   143fc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   14400:	0909      	lsrs	r1, r1, #4
   14402:	ea52 0301 	orrs.w	r3, r2, r1
   14406:	d1f3      	bne.n	143f0 <_svfprintf_r+0x6c0>
   14408:	ab50      	add	r3, sp, #320	; 0x140
   1440a:	1b1b      	subs	r3, r3, r4
   1440c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14410:	9305      	str	r3, [sp, #20]
   14412:	9a05      	ldr	r2, [sp, #20]
   14414:	9803      	ldr	r0, [sp, #12]
   14416:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1441a:	4282      	cmp	r2, r0
   1441c:	f04f 0300 	mov.w	r3, #0
   14420:	bfb8      	it	lt
   14422:	4602      	movlt	r2, r0
   14424:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14428:	9307      	str	r3, [sp, #28]
   1442a:	9202      	str	r2, [sp, #8]
   1442c:	930f      	str	r3, [sp, #60]	; 0x3c
   1442e:	e660      	b.n	140f2 <_svfprintf_r+0x3c2>
   14430:	f002 0307 	and.w	r3, r2, #7
   14434:	08d2      	lsrs	r2, r2, #3
   14436:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   1443a:	08c9      	lsrs	r1, r1, #3
   1443c:	3330      	adds	r3, #48	; 0x30
   1443e:	ea52 0501 	orrs.w	r5, r2, r1
   14442:	4620      	mov	r0, r4
   14444:	f804 3d01 	strb.w	r3, [r4, #-1]!
   14448:	d1f2      	bne.n	14430 <_svfprintf_r+0x700>
   1444a:	9a02      	ldr	r2, [sp, #8]
   1444c:	07d1      	lsls	r1, r2, #31
   1444e:	f100 824d 	bmi.w	148ec <_svfprintf_r+0xbbc>
   14452:	ab50      	add	r3, sp, #320	; 0x140
   14454:	1b1b      	subs	r3, r3, r4
   14456:	4690      	mov	r8, r2
   14458:	9305      	str	r3, [sp, #20]
   1445a:	e7da      	b.n	14412 <_svfprintf_r+0x6e2>
   1445c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1445e:	2b65      	cmp	r3, #101	; 0x65
   14460:	f340 80d4 	ble.w	1460c <_svfprintf_r+0x8dc>
   14464:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1446c:	f040 81c1 	bne.w	147f2 <_svfprintf_r+0xac2>
   14470:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14472:	49ba      	ldr	r1, [pc, #744]	; (1475c <_svfprintf_r+0xa2c>)
   14474:	f8ca 1000 	str.w	r1, [sl]
   14478:	3301      	adds	r3, #1
   1447a:	3201      	adds	r2, #1
   1447c:	2101      	movs	r1, #1
   1447e:	2b07      	cmp	r3, #7
   14480:	9226      	str	r2, [sp, #152]	; 0x98
   14482:	9325      	str	r3, [sp, #148]	; 0x94
   14484:	f8ca 1004 	str.w	r1, [sl, #4]
   14488:	f300 8551 	bgt.w	14f2e <_svfprintf_r+0x11fe>
   1448c:	f10a 0a08 	add.w	sl, sl, #8
   14490:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14492:	990e      	ldr	r1, [sp, #56]	; 0x38
   14494:	428b      	cmp	r3, r1
   14496:	f280 82d0 	bge.w	14a3a <_svfprintf_r+0xd0a>
   1449a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1449c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1449e:	441a      	add	r2, r3
   144a0:	e9ca 1300 	strd	r1, r3, [sl]
   144a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   144a6:	9226      	str	r2, [sp, #152]	; 0x98
   144a8:	3301      	adds	r3, #1
   144aa:	2b07      	cmp	r3, #7
   144ac:	9325      	str	r3, [sp, #148]	; 0x94
   144ae:	f300 8397 	bgt.w	14be0 <_svfprintf_r+0xeb0>
   144b2:	f10a 0a08 	add.w	sl, sl, #8
   144b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   144b8:	1e5c      	subs	r4, r3, #1
   144ba:	2c00      	cmp	r4, #0
   144bc:	f77f add0 	ble.w	14060 <_svfprintf_r+0x330>
   144c0:	2c10      	cmp	r4, #16
   144c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   144c4:	f340 856e 	ble.w	14fa4 <_svfprintf_r+0x1274>
   144c8:	ee1b 6a10 	vmov	r6, s22
   144cc:	2510      	movs	r5, #16
   144ce:	e005      	b.n	144dc <_svfprintf_r+0x7ac>
   144d0:	f10a 0a08 	add.w	sl, sl, #8
   144d4:	3c10      	subs	r4, #16
   144d6:	2c10      	cmp	r4, #16
   144d8:	f340 8564 	ble.w	14fa4 <_svfprintf_r+0x1274>
   144dc:	3301      	adds	r3, #1
   144de:	49a0      	ldr	r1, [pc, #640]	; (14760 <_svfprintf_r+0xa30>)
   144e0:	3210      	adds	r2, #16
   144e2:	2b07      	cmp	r3, #7
   144e4:	e9ca 1500 	strd	r1, r5, [sl]
   144e8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   144ec:	ddf0      	ble.n	144d0 <_svfprintf_r+0x7a0>
   144ee:	aa24      	add	r2, sp, #144	; 0x90
   144f0:	4631      	mov	r1, r6
   144f2:	4658      	mov	r0, fp
   144f4:	f004 faa8 	bl	18a48 <__ssprint_r>
   144f8:	2800      	cmp	r0, #0
   144fa:	d17e      	bne.n	145fa <_svfprintf_r+0x8ca>
   144fc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14500:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14504:	e7e6      	b.n	144d4 <_svfprintf_r+0x7a4>
   14506:	9b06      	ldr	r3, [sp, #24]
   14508:	9902      	ldr	r1, [sp, #8]
   1450a:	1a5d      	subs	r5, r3, r1
   1450c:	2d00      	cmp	r5, #0
   1450e:	f77f ad8e 	ble.w	1402e <_svfprintf_r+0x2fe>
   14512:	2d10      	cmp	r5, #16
   14514:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14516:	dd21      	ble.n	1455c <_svfprintf_r+0x82c>
   14518:	9409      	str	r4, [sp, #36]	; 0x24
   1451a:	2610      	movs	r6, #16
   1451c:	ee1b 4a10 	vmov	r4, s22
   14520:	e004      	b.n	1452c <_svfprintf_r+0x7fc>
   14522:	3d10      	subs	r5, #16
   14524:	2d10      	cmp	r5, #16
   14526:	f10a 0a08 	add.w	sl, sl, #8
   1452a:	dd16      	ble.n	1455a <_svfprintf_r+0x82a>
   1452c:	3301      	adds	r3, #1
   1452e:	498c      	ldr	r1, [pc, #560]	; (14760 <_svfprintf_r+0xa30>)
   14530:	3210      	adds	r2, #16
   14532:	2b07      	cmp	r3, #7
   14534:	e9ca 1600 	strd	r1, r6, [sl]
   14538:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1453c:	ddf1      	ble.n	14522 <_svfprintf_r+0x7f2>
   1453e:	aa24      	add	r2, sp, #144	; 0x90
   14540:	4621      	mov	r1, r4
   14542:	4658      	mov	r0, fp
   14544:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14548:	f004 fa7e 	bl	18a48 <__ssprint_r>
   1454c:	2800      	cmp	r0, #0
   1454e:	d154      	bne.n	145fa <_svfprintf_r+0x8ca>
   14550:	3d10      	subs	r5, #16
   14552:	2d10      	cmp	r5, #16
   14554:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14558:	dce8      	bgt.n	1452c <_svfprintf_r+0x7fc>
   1455a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1455c:	4980      	ldr	r1, [pc, #512]	; (14760 <_svfprintf_r+0xa30>)
   1455e:	f8ca 5004 	str.w	r5, [sl, #4]
   14562:	3301      	adds	r3, #1
   14564:	442a      	add	r2, r5
   14566:	2b07      	cmp	r3, #7
   14568:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1456c:	f8ca 1000 	str.w	r1, [sl]
   14570:	f300 8526 	bgt.w	14fc0 <_svfprintf_r+0x1290>
   14574:	9b03      	ldr	r3, [sp, #12]
   14576:	9905      	ldr	r1, [sp, #20]
   14578:	1a5d      	subs	r5, r3, r1
   1457a:	2d00      	cmp	r5, #0
   1457c:	f10a 0a08 	add.w	sl, sl, #8
   14580:	f77f ad5b 	ble.w	1403a <_svfprintf_r+0x30a>
   14584:	2d10      	cmp	r5, #16
   14586:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14588:	dd1f      	ble.n	145ca <_svfprintf_r+0x89a>
   1458a:	4651      	mov	r1, sl
   1458c:	2610      	movs	r6, #16
   1458e:	ee1b aa10 	vmov	sl, s22
   14592:	e004      	b.n	1459e <_svfprintf_r+0x86e>
   14594:	3d10      	subs	r5, #16
   14596:	2d10      	cmp	r5, #16
   14598:	f101 0108 	add.w	r1, r1, #8
   1459c:	dd14      	ble.n	145c8 <_svfprintf_r+0x898>
   1459e:	3301      	adds	r3, #1
   145a0:	486f      	ldr	r0, [pc, #444]	; (14760 <_svfprintf_r+0xa30>)
   145a2:	3210      	adds	r2, #16
   145a4:	2b07      	cmp	r3, #7
   145a6:	e9c1 0600 	strd	r0, r6, [r1]
   145aa:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   145ae:	ddf1      	ble.n	14594 <_svfprintf_r+0x864>
   145b0:	aa24      	add	r2, sp, #144	; 0x90
   145b2:	4651      	mov	r1, sl
   145b4:	4658      	mov	r0, fp
   145b6:	f004 fa47 	bl	18a48 <__ssprint_r>
   145ba:	b9f0      	cbnz	r0, 145fa <_svfprintf_r+0x8ca>
   145bc:	3d10      	subs	r5, #16
   145be:	2d10      	cmp	r5, #16
   145c0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   145c4:	a927      	add	r1, sp, #156	; 0x9c
   145c6:	dcea      	bgt.n	1459e <_svfprintf_r+0x86e>
   145c8:	468a      	mov	sl, r1
   145ca:	3301      	adds	r3, #1
   145cc:	4964      	ldr	r1, [pc, #400]	; (14760 <_svfprintf_r+0xa30>)
   145ce:	f8ca 5004 	str.w	r5, [sl, #4]
   145d2:	442a      	add	r2, r5
   145d4:	2b07      	cmp	r3, #7
   145d6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   145da:	f8ca 1000 	str.w	r1, [sl]
   145de:	f300 81da 	bgt.w	14996 <_svfprintf_r+0xc66>
   145e2:	f10a 0a08 	add.w	sl, sl, #8
   145e6:	e528      	b.n	1403a <_svfprintf_r+0x30a>
   145e8:	ee1b 1a10 	vmov	r1, s22
   145ec:	aa24      	add	r2, sp, #144	; 0x90
   145ee:	4658      	mov	r0, fp
   145f0:	f004 fa2a 	bl	18a48 <__ssprint_r>
   145f4:	2800      	cmp	r0, #0
   145f6:	f43f ad47 	beq.w	14088 <_svfprintf_r+0x358>
   145fa:	9b07      	ldr	r3, [sp, #28]
   145fc:	2b00      	cmp	r3, #0
   145fe:	f43f aca2 	beq.w	13f46 <_svfprintf_r+0x216>
   14602:	9907      	ldr	r1, [sp, #28]
   14604:	4658      	mov	r0, fp
   14606:	f7fe f8cd 	bl	127a4 <_free_r>
   1460a:	e49c      	b.n	13f46 <_svfprintf_r+0x216>
   1460c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1460e:	2b01      	cmp	r3, #1
   14610:	f340 817a 	ble.w	14908 <_svfprintf_r+0xbd8>
   14614:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14616:	f8ca 4000 	str.w	r4, [sl]
   1461a:	3301      	adds	r3, #1
   1461c:	3201      	adds	r2, #1
   1461e:	2101      	movs	r1, #1
   14620:	2b07      	cmp	r3, #7
   14622:	9226      	str	r2, [sp, #152]	; 0x98
   14624:	9325      	str	r3, [sp, #148]	; 0x94
   14626:	f8ca 1004 	str.w	r1, [sl, #4]
   1462a:	f300 81f8 	bgt.w	14a1e <_svfprintf_r+0xcee>
   1462e:	f10a 0a08 	add.w	sl, sl, #8
   14632:	9910      	ldr	r1, [sp, #64]	; 0x40
   14634:	9812      	ldr	r0, [sp, #72]	; 0x48
   14636:	3301      	adds	r3, #1
   14638:	440a      	add	r2, r1
   1463a:	2b07      	cmp	r3, #7
   1463c:	e9ca 0100 	strd	r0, r1, [sl]
   14640:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14644:	f300 81dd 	bgt.w	14a02 <_svfprintf_r+0xcd2>
   14648:	f10a 0a08 	add.w	sl, sl, #8
   1464c:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14654:	f000 8177 	beq.w	14946 <_svfprintf_r+0xc16>
   14658:	990e      	ldr	r1, [sp, #56]	; 0x38
   1465a:	3301      	adds	r3, #1
   1465c:	3901      	subs	r1, #1
   1465e:	3401      	adds	r4, #1
   14660:	440a      	add	r2, r1
   14662:	2b07      	cmp	r3, #7
   14664:	f8ca 4000 	str.w	r4, [sl]
   14668:	9325      	str	r3, [sp, #148]	; 0x94
   1466a:	f8ca 1004 	str.w	r1, [sl, #4]
   1466e:	9226      	str	r2, [sp, #152]	; 0x98
   14670:	f300 815b 	bgt.w	1492a <_svfprintf_r+0xbfa>
   14674:	f10a 0a08 	add.w	sl, sl, #8
   14678:	9914      	ldr	r1, [sp, #80]	; 0x50
   1467a:	f8ca 1004 	str.w	r1, [sl, #4]
   1467e:	3301      	adds	r3, #1
   14680:	440a      	add	r2, r1
   14682:	2b07      	cmp	r3, #7
   14684:	a91e      	add	r1, sp, #120	; 0x78
   14686:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1468a:	f8ca 1000 	str.w	r1, [sl]
   1468e:	f77f ace5 	ble.w	1405c <_svfprintf_r+0x32c>
   14692:	ee1b 1a10 	vmov	r1, s22
   14696:	aa24      	add	r2, sp, #144	; 0x90
   14698:	4658      	mov	r0, fp
   1469a:	f004 f9d5 	bl	18a48 <__ssprint_r>
   1469e:	2800      	cmp	r0, #0
   146a0:	d1ab      	bne.n	145fa <_svfprintf_r+0x8ca>
   146a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   146a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   146a8:	e4da      	b.n	14060 <_svfprintf_r+0x330>
   146aa:	2d10      	cmp	r5, #16
   146ac:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   146b0:	4e2c      	ldr	r6, [pc, #176]	; (14764 <_svfprintf_r+0xa34>)
   146b2:	dd24      	ble.n	146fe <_svfprintf_r+0x9ce>
   146b4:	9417      	str	r4, [sp, #92]	; 0x5c
   146b6:	2310      	movs	r3, #16
   146b8:	ee1b 4a10 	vmov	r4, s22
   146bc:	4608      	mov	r0, r1
   146be:	e004      	b.n	146ca <_svfprintf_r+0x99a>
   146c0:	3d10      	subs	r5, #16
   146c2:	2d10      	cmp	r5, #16
   146c4:	f10a 0a08 	add.w	sl, sl, #8
   146c8:	dd17      	ble.n	146fa <_svfprintf_r+0x9ca>
   146ca:	3001      	adds	r0, #1
   146cc:	3210      	adds	r2, #16
   146ce:	2807      	cmp	r0, #7
   146d0:	e9ca 6300 	strd	r6, r3, [sl]
   146d4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   146d8:	ddf2      	ble.n	146c0 <_svfprintf_r+0x990>
   146da:	aa24      	add	r2, sp, #144	; 0x90
   146dc:	4621      	mov	r1, r4
   146de:	4658      	mov	r0, fp
   146e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   146e4:	f004 f9b0 	bl	18a48 <__ssprint_r>
   146e8:	2800      	cmp	r0, #0
   146ea:	d186      	bne.n	145fa <_svfprintf_r+0x8ca>
   146ec:	3d10      	subs	r5, #16
   146ee:	2d10      	cmp	r5, #16
   146f0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   146f4:	f04f 0310 	mov.w	r3, #16
   146f8:	dce7      	bgt.n	146ca <_svfprintf_r+0x99a>
   146fa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   146fc:	4601      	mov	r1, r0
   146fe:	3101      	adds	r1, #1
   14700:	442a      	add	r2, r5
   14702:	2907      	cmp	r1, #7
   14704:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   14708:	f8ca 6000 	str.w	r6, [sl]
   1470c:	f8ca 5004 	str.w	r5, [sl, #4]
   14710:	f300 83bd 	bgt.w	14e8e <_svfprintf_r+0x115e>
   14714:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14718:	f10a 0a08 	add.w	sl, sl, #8
   1471c:	e45d      	b.n	13fda <_svfprintf_r+0x2aa>
   1471e:	f8cd 8008 	str.w	r8, [sp, #8]
   14722:	2a0a      	cmp	r2, #10
   14724:	f171 0300 	sbcs.w	r3, r1, #0
   14728:	f080 8345 	bcs.w	14db6 <_svfprintf_r+0x1086>
   1472c:	3230      	adds	r2, #48	; 0x30
   1472e:	2301      	movs	r3, #1
   14730:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14734:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   14738:	9305      	str	r3, [sp, #20]
   1473a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   1473e:	e668      	b.n	14412 <_svfprintf_r+0x6e2>
   14740:	ee1b 1a10 	vmov	r1, s22
   14744:	aa24      	add	r2, sp, #144	; 0x90
   14746:	4658      	mov	r0, fp
   14748:	f004 f97e 	bl	18a48 <__ssprint_r>
   1474c:	2800      	cmp	r0, #0
   1474e:	f47f af54 	bne.w	145fa <_svfprintf_r+0x8ca>
   14752:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14754:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14758:	e452      	b.n	14000 <_svfprintf_r+0x2d0>
   1475a:	bf00      	nop
   1475c:	20007e50 	.word	0x20007e50
   14760:	200088bc 	.word	0x200088bc
   14764:	20002b1c 	.word	0x20002b1c
   14768:	ee1b 1a10 	vmov	r1, s22
   1476c:	aa24      	add	r2, sp, #144	; 0x90
   1476e:	4658      	mov	r0, fp
   14770:	f004 f96a 	bl	18a48 <__ssprint_r>
   14774:	2800      	cmp	r0, #0
   14776:	f47f af40 	bne.w	145fa <_svfprintf_r+0x8ca>
   1477a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1477c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14780:	e451      	b.n	14026 <_svfprintf_r+0x2f6>
   14782:	2c10      	cmp	r4, #16
   14784:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14786:	4ebe      	ldr	r6, [pc, #760]	; (14a80 <_svfprintf_r+0xd50>)
   14788:	dd1f      	ble.n	147ca <_svfprintf_r+0xa9a>
   1478a:	ee1b 8a10 	vmov	r8, s22
   1478e:	2510      	movs	r5, #16
   14790:	e004      	b.n	1479c <_svfprintf_r+0xa6c>
   14792:	3c10      	subs	r4, #16
   14794:	2c10      	cmp	r4, #16
   14796:	f10a 0a08 	add.w	sl, sl, #8
   1479a:	dd16      	ble.n	147ca <_svfprintf_r+0xa9a>
   1479c:	3301      	adds	r3, #1
   1479e:	3210      	adds	r2, #16
   147a0:	2b07      	cmp	r3, #7
   147a2:	e9ca 6500 	strd	r6, r5, [sl]
   147a6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   147aa:	ddf2      	ble.n	14792 <_svfprintf_r+0xa62>
   147ac:	aa24      	add	r2, sp, #144	; 0x90
   147ae:	4641      	mov	r1, r8
   147b0:	4658      	mov	r0, fp
   147b2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   147b6:	f004 f947 	bl	18a48 <__ssprint_r>
   147ba:	2800      	cmp	r0, #0
   147bc:	f47f af1d 	bne.w	145fa <_svfprintf_r+0x8ca>
   147c0:	3c10      	subs	r4, #16
   147c2:	2c10      	cmp	r4, #16
   147c4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   147c8:	dce8      	bgt.n	1479c <_svfprintf_r+0xa6c>
   147ca:	3301      	adds	r3, #1
   147cc:	4422      	add	r2, r4
   147ce:	2b07      	cmp	r3, #7
   147d0:	e9ca 6400 	strd	r6, r4, [sl]
   147d4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   147d8:	f77f ac4b 	ble.w	14072 <_svfprintf_r+0x342>
   147dc:	ee1b 1a10 	vmov	r1, s22
   147e0:	aa24      	add	r2, sp, #144	; 0x90
   147e2:	4658      	mov	r0, fp
   147e4:	f004 f930 	bl	18a48 <__ssprint_r>
   147e8:	2800      	cmp	r0, #0
   147ea:	f47f af06 	bne.w	145fa <_svfprintf_r+0x8ca>
   147ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
   147f0:	e43f      	b.n	14072 <_svfprintf_r+0x342>
   147f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   147f4:	2900      	cmp	r1, #0
   147f6:	f340 835a 	ble.w	14eae <_svfprintf_r+0x117e>
   147fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   147fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   147fe:	429e      	cmp	r6, r3
   14800:	bfa8      	it	ge
   14802:	461e      	movge	r6, r3
   14804:	2e00      	cmp	r6, #0
   14806:	dd0b      	ble.n	14820 <_svfprintf_r+0xaf0>
   14808:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1480a:	3301      	adds	r3, #1
   1480c:	4432      	add	r2, r6
   1480e:	2b07      	cmp	r3, #7
   14810:	e9ca 4600 	strd	r4, r6, [sl]
   14814:	9226      	str	r2, [sp, #152]	; 0x98
   14816:	9325      	str	r3, [sp, #148]	; 0x94
   14818:	f300 8689 	bgt.w	1552e <_svfprintf_r+0x17fe>
   1481c:	f10a 0a08 	add.w	sl, sl, #8
   14820:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14822:	2e00      	cmp	r6, #0
   14824:	bfa8      	it	ge
   14826:	1bad      	subge	r5, r5, r6
   14828:	2d00      	cmp	r5, #0
   1482a:	f300 8203 	bgt.w	14c34 <_svfprintf_r+0xf04>
   1482e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14830:	f418 6f80 	tst.w	r8, #1024	; 0x400
   14834:	4423      	add	r3, r4
   14836:	9305      	str	r3, [sp, #20]
   14838:	f040 821f 	bne.w	14c7a <_svfprintf_r+0xf4a>
   1483c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1483e:	990e      	ldr	r1, [sp, #56]	; 0x38
   14840:	428b      	cmp	r3, r1
   14842:	db03      	blt.n	1484c <_svfprintf_r+0xb1c>
   14844:	f018 0f01 	tst.w	r8, #1
   14848:	f000 84cf 	beq.w	151ea <_svfprintf_r+0x14ba>
   1484c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1484e:	9812      	ldr	r0, [sp, #72]	; 0x48
   14850:	440a      	add	r2, r1
   14852:	e9ca 0100 	strd	r0, r1, [sl]
   14856:	9925      	ldr	r1, [sp, #148]	; 0x94
   14858:	9226      	str	r2, [sp, #152]	; 0x98
   1485a:	3101      	adds	r1, #1
   1485c:	2907      	cmp	r1, #7
   1485e:	9125      	str	r1, [sp, #148]	; 0x94
   14860:	f300 86a5 	bgt.w	155ae <_svfprintf_r+0x187e>
   14864:	f10a 0a08 	add.w	sl, sl, #8
   14868:	990e      	ldr	r1, [sp, #56]	; 0x38
   1486a:	1865      	adds	r5, r4, r1
   1486c:	1acc      	subs	r4, r1, r3
   1486e:	9b05      	ldr	r3, [sp, #20]
   14870:	1aed      	subs	r5, r5, r3
   14872:	42a5      	cmp	r5, r4
   14874:	bfa8      	it	ge
   14876:	4625      	movge	r5, r4
   14878:	2d00      	cmp	r5, #0
   1487a:	dd0d      	ble.n	14898 <_svfprintf_r+0xb68>
   1487c:	f8ca 3000 	str.w	r3, [sl]
   14880:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14882:	f8ca 5004 	str.w	r5, [sl, #4]
   14886:	3301      	adds	r3, #1
   14888:	442a      	add	r2, r5
   1488a:	2b07      	cmp	r3, #7
   1488c:	9226      	str	r2, [sp, #152]	; 0x98
   1488e:	9325      	str	r3, [sp, #148]	; 0x94
   14890:	f300 86bb 	bgt.w	1560a <_svfprintf_r+0x18da>
   14894:	f10a 0a08 	add.w	sl, sl, #8
   14898:	2d00      	cmp	r5, #0
   1489a:	bfa8      	it	ge
   1489c:	1b64      	subge	r4, r4, r5
   1489e:	2c00      	cmp	r4, #0
   148a0:	f77f abde 	ble.w	14060 <_svfprintf_r+0x330>
   148a4:	2c10      	cmp	r4, #16
   148a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   148a8:	f340 837c 	ble.w	14fa4 <_svfprintf_r+0x1274>
   148ac:	ee1b 6a10 	vmov	r6, s22
   148b0:	2510      	movs	r5, #16
   148b2:	e005      	b.n	148c0 <_svfprintf_r+0xb90>
   148b4:	f10a 0a08 	add.w	sl, sl, #8
   148b8:	3c10      	subs	r4, #16
   148ba:	2c10      	cmp	r4, #16
   148bc:	f340 8372 	ble.w	14fa4 <_svfprintf_r+0x1274>
   148c0:	3301      	adds	r3, #1
   148c2:	4970      	ldr	r1, [pc, #448]	; (14a84 <_svfprintf_r+0xd54>)
   148c4:	3210      	adds	r2, #16
   148c6:	2b07      	cmp	r3, #7
   148c8:	e9ca 1500 	strd	r1, r5, [sl]
   148cc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   148d0:	ddf0      	ble.n	148b4 <_svfprintf_r+0xb84>
   148d2:	aa24      	add	r2, sp, #144	; 0x90
   148d4:	4631      	mov	r1, r6
   148d6:	4658      	mov	r0, fp
   148d8:	f004 f8b6 	bl	18a48 <__ssprint_r>
   148dc:	2800      	cmp	r0, #0
   148de:	f47f ae8c 	bne.w	145fa <_svfprintf_r+0x8ca>
   148e2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   148e6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   148ea:	e7e5      	b.n	148b8 <_svfprintf_r+0xb88>
   148ec:	2b30      	cmp	r3, #48	; 0x30
   148ee:	f43f ad8b 	beq.w	14408 <_svfprintf_r+0x6d8>
   148f2:	2330      	movs	r3, #48	; 0x30
   148f4:	3802      	subs	r0, #2
   148f6:	f804 3c01 	strb.w	r3, [r4, #-1]
   148fa:	ab50      	add	r3, sp, #320	; 0x140
   148fc:	1a1b      	subs	r3, r3, r0
   148fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14902:	9305      	str	r3, [sp, #20]
   14904:	4604      	mov	r4, r0
   14906:	e584      	b.n	14412 <_svfprintf_r+0x6e2>
   14908:	f018 0f01 	tst.w	r8, #1
   1490c:	f47f ae82 	bne.w	14614 <_svfprintf_r+0x8e4>
   14910:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14912:	f8ca 4000 	str.w	r4, [sl]
   14916:	3301      	adds	r3, #1
   14918:	3201      	adds	r2, #1
   1491a:	2101      	movs	r1, #1
   1491c:	2b07      	cmp	r3, #7
   1491e:	9226      	str	r2, [sp, #152]	; 0x98
   14920:	9325      	str	r3, [sp, #148]	; 0x94
   14922:	f8ca 1004 	str.w	r1, [sl, #4]
   14926:	f77f aea5 	ble.w	14674 <_svfprintf_r+0x944>
   1492a:	ee1b 1a10 	vmov	r1, s22
   1492e:	aa24      	add	r2, sp, #144	; 0x90
   14930:	4658      	mov	r0, fp
   14932:	f004 f889 	bl	18a48 <__ssprint_r>
   14936:	2800      	cmp	r0, #0
   14938:	f47f ae5f 	bne.w	145fa <_svfprintf_r+0x8ca>
   1493c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14940:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14944:	e698      	b.n	14678 <_svfprintf_r+0x948>
   14946:	990e      	ldr	r1, [sp, #56]	; 0x38
   14948:	1e4c      	subs	r4, r1, #1
   1494a:	2c00      	cmp	r4, #0
   1494c:	f77f ae94 	ble.w	14678 <_svfprintf_r+0x948>
   14950:	2c10      	cmp	r4, #16
   14952:	f340 8361 	ble.w	15018 <_svfprintf_r+0x12e8>
   14956:	ee1b 6a10 	vmov	r6, s22
   1495a:	2510      	movs	r5, #16
   1495c:	e005      	b.n	1496a <_svfprintf_r+0xc3a>
   1495e:	f10a 0a08 	add.w	sl, sl, #8
   14962:	3c10      	subs	r4, #16
   14964:	2c10      	cmp	r4, #16
   14966:	f340 8357 	ble.w	15018 <_svfprintf_r+0x12e8>
   1496a:	3301      	adds	r3, #1
   1496c:	4945      	ldr	r1, [pc, #276]	; (14a84 <_svfprintf_r+0xd54>)
   1496e:	3210      	adds	r2, #16
   14970:	2b07      	cmp	r3, #7
   14972:	e9ca 1500 	strd	r1, r5, [sl]
   14976:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1497a:	ddf0      	ble.n	1495e <_svfprintf_r+0xc2e>
   1497c:	aa24      	add	r2, sp, #144	; 0x90
   1497e:	4631      	mov	r1, r6
   14980:	4658      	mov	r0, fp
   14982:	f004 f861 	bl	18a48 <__ssprint_r>
   14986:	2800      	cmp	r0, #0
   14988:	f47f ae37 	bne.w	145fa <_svfprintf_r+0x8ca>
   1498c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14990:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14994:	e7e5      	b.n	14962 <_svfprintf_r+0xc32>
   14996:	ee1b 1a10 	vmov	r1, s22
   1499a:	aa24      	add	r2, sp, #144	; 0x90
   1499c:	4658      	mov	r0, fp
   1499e:	f004 f853 	bl	18a48 <__ssprint_r>
   149a2:	2800      	cmp	r0, #0
   149a4:	f47f ae29 	bne.w	145fa <_svfprintf_r+0x8ca>
   149a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   149aa:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   149ae:	f7ff bb44 	b.w	1403a <_svfprintf_r+0x30a>
   149b2:	9b02      	ldr	r3, [sp, #8]
   149b4:	f013 0310 	ands.w	r3, r3, #16
   149b8:	f040 80c1 	bne.w	14b3e <_svfprintf_r+0xe0e>
   149bc:	9a02      	ldr	r2, [sp, #8]
   149be:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   149c2:	f000 837a 	beq.w	150ba <_svfprintf_r+0x138a>
   149c6:	9808      	ldr	r0, [sp, #32]
   149c8:	f850 2b04 	ldr.w	r2, [r0], #4
   149cc:	9008      	str	r0, [sp, #32]
   149ce:	4619      	mov	r1, r3
   149d0:	b292      	uxth	r2, r2
   149d2:	2301      	movs	r3, #1
   149d4:	e451      	b.n	1427a <_svfprintf_r+0x54a>
   149d6:	f018 0310 	ands.w	r3, r8, #16
   149da:	d155      	bne.n	14a88 <_svfprintf_r+0xd58>
   149dc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   149e0:	f000 835d 	beq.w	1509e <_svfprintf_r+0x136e>
   149e4:	9808      	ldr	r0, [sp, #32]
   149e6:	f850 2b04 	ldr.w	r2, [r0], #4
   149ea:	9008      	str	r0, [sp, #32]
   149ec:	4619      	mov	r1, r3
   149ee:	b292      	uxth	r2, r2
   149f0:	e4a8      	b.n	14344 <_svfprintf_r+0x614>
   149f2:	4252      	negs	r2, r2
   149f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   149f8:	f8cd 8008 	str.w	r8, [sp, #8]
   149fc:	202d      	movs	r0, #45	; 0x2d
   149fe:	2301      	movs	r3, #1
   14a00:	e43c      	b.n	1427c <_svfprintf_r+0x54c>
   14a02:	ee1b 1a10 	vmov	r1, s22
   14a06:	aa24      	add	r2, sp, #144	; 0x90
   14a08:	4658      	mov	r0, fp
   14a0a:	f004 f81d 	bl	18a48 <__ssprint_r>
   14a0e:	2800      	cmp	r0, #0
   14a10:	f47f adf3 	bne.w	145fa <_svfprintf_r+0x8ca>
   14a14:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14a18:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14a1c:	e616      	b.n	1464c <_svfprintf_r+0x91c>
   14a1e:	ee1b 1a10 	vmov	r1, s22
   14a22:	aa24      	add	r2, sp, #144	; 0x90
   14a24:	4658      	mov	r0, fp
   14a26:	f004 f80f 	bl	18a48 <__ssprint_r>
   14a2a:	2800      	cmp	r0, #0
   14a2c:	f47f ade5 	bne.w	145fa <_svfprintf_r+0x8ca>
   14a30:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14a34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14a38:	e5fb      	b.n	14632 <_svfprintf_r+0x902>
   14a3a:	f018 0f01 	tst.w	r8, #1
   14a3e:	f43f ab0f 	beq.w	14060 <_svfprintf_r+0x330>
   14a42:	e52a      	b.n	1449a <_svfprintf_r+0x76a>
   14a44:	9308      	str	r3, [sp, #32]
   14a46:	f899 3000 	ldrb.w	r3, [r9]
   14a4a:	f7ff b9cd 	b.w	13de8 <_svfprintf_r+0xb8>
   14a4e:	ac50      	add	r4, sp, #320	; 0x140
   14a50:	e4df      	b.n	14412 <_svfprintf_r+0x6e2>
   14a52:	f418 7f00 	tst.w	r8, #512	; 0x200
   14a56:	f040 83db 	bne.w	15210 <_svfprintf_r+0x14e0>
   14a5a:	f853 2b04 	ldr.w	r2, [r3], #4
   14a5e:	9308      	str	r3, [sp, #32]
   14a60:	17d1      	asrs	r1, r2, #31
   14a62:	460b      	mov	r3, r1
   14a64:	f7ff bbb6 	b.w	141d4 <_svfprintf_r+0x4a4>
   14a68:	9b08      	ldr	r3, [sp, #32]
   14a6a:	9804      	ldr	r0, [sp, #16]
   14a6c:	f853 1b04 	ldr.w	r1, [r3], #4
   14a70:	9308      	str	r3, [sp, #32]
   14a72:	17c2      	asrs	r2, r0, #31
   14a74:	e9c1 0200 	strd	r0, r2, [r1]
   14a78:	464c      	mov	r4, r9
   14a7a:	f7ff b98b 	b.w	13d94 <_svfprintf_r+0x64>
   14a7e:	bf00      	nop
   14a80:	20002b1c 	.word	0x20002b1c
   14a84:	200088bc 	.word	0x200088bc
   14a88:	9b08      	ldr	r3, [sp, #32]
   14a8a:	f853 2b04 	ldr.w	r2, [r3], #4
   14a8e:	9308      	str	r3, [sp, #32]
   14a90:	e458      	b.n	14344 <_svfprintf_r+0x614>
   14a92:	eeb4 8b48 	vcmp.f64	d8, d8
   14a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a9a:	f180 8694 	bvs.w	157c6 <_svfprintf_r+0x1a96>
   14a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14aa0:	2b61      	cmp	r3, #97	; 0x61
   14aa2:	f000 8552 	beq.w	1554a <_svfprintf_r+0x181a>
   14aa6:	2b41      	cmp	r3, #65	; 0x41
   14aa8:	f000 85c0 	beq.w	1562c <_svfprintf_r+0x18fc>
   14aac:	9b03      	ldr	r3, [sp, #12]
   14aae:	3301      	adds	r3, #1
   14ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14ab2:	f023 0520 	bic.w	r5, r3, #32
   14ab6:	f000 8480 	beq.w	153ba <_svfprintf_r+0x168a>
   14aba:	2d47      	cmp	r5, #71	; 0x47
   14abc:	d104      	bne.n	14ac8 <_svfprintf_r+0xd98>
   14abe:	9b03      	ldr	r3, [sp, #12]
   14ac0:	2b00      	cmp	r3, #0
   14ac2:	bf08      	it	eq
   14ac4:	2301      	moveq	r3, #1
   14ac6:	9303      	str	r3, [sp, #12]
   14ac8:	ee18 3a90 	vmov	r3, s17
   14acc:	2b00      	cmp	r3, #0
   14ace:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   14ad2:	4646      	mov	r6, r8
   14ad4:	f2c0 8618 	blt.w	15708 <_svfprintf_r+0x19d8>
   14ad8:	eeb0 ab48 	vmov.f64	d10, d8
   14adc:	2300      	movs	r3, #0
   14ade:	4690      	mov	r8, r2
   14ae0:	9309      	str	r3, [sp, #36]	; 0x24
   14ae2:	9307      	str	r3, [sp, #28]
   14ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14ae6:	3b41      	subs	r3, #65	; 0x41
   14ae8:	2b25      	cmp	r3, #37	; 0x25
   14aea:	f200 8398 	bhi.w	1521e <_svfprintf_r+0x14ee>
   14aee:	e8df f013 	tbh	[pc, r3, lsl #1]
   14af2:	046f      	.short	0x046f
   14af4:	03960396 	.word	0x03960396
   14af8:	04680396 	.word	0x04680396
   14afc:	0396046c 	.word	0x0396046c
   14b00:	03960396 	.word	0x03960396
   14b04:	03960396 	.word	0x03960396
   14b08:	03960396 	.word	0x03960396
   14b0c:	03960396 	.word	0x03960396
   14b10:	03960396 	.word	0x03960396
   14b14:	03960396 	.word	0x03960396
   14b18:	03960396 	.word	0x03960396
   14b1c:	03960396 	.word	0x03960396
   14b20:	03960396 	.word	0x03960396
   14b24:	03960396 	.word	0x03960396
   14b28:	03960396 	.word	0x03960396
   14b2c:	03960396 	.word	0x03960396
   14b30:	03960396 	.word	0x03960396
   14b34:	03960396 	.word	0x03960396
   14b38:	04680396 	.word	0x04680396
   14b3c:	046c      	.short	0x046c
   14b3e:	9b08      	ldr	r3, [sp, #32]
   14b40:	f853 2b04 	ldr.w	r2, [r3], #4
   14b44:	9308      	str	r3, [sp, #32]
   14b46:	2301      	movs	r3, #1
   14b48:	f7ff bb97 	b.w	1427a <_svfprintf_r+0x54a>
   14b4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14b4e:	2b00      	cmp	r3, #0
   14b50:	f43f a9cf 	beq.w	13ef2 <_svfprintf_r+0x1c2>
   14b54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14b56:	781b      	ldrb	r3, [r3, #0]
   14b58:	2b00      	cmp	r3, #0
   14b5a:	f43f a9ca 	beq.w	13ef2 <_svfprintf_r+0x1c2>
   14b5e:	f899 3000 	ldrb.w	r3, [r9]
   14b62:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   14b66:	f7ff b93f 	b.w	13de8 <_svfprintf_r+0xb8>
   14b6a:	930b      	str	r3, [sp, #44]	; 0x2c
   14b6c:	f8cd 8008 	str.w	r8, [sp, #8]
   14b70:	f7ff bbf1 	b.w	14356 <_svfprintf_r+0x626>
   14b74:	930b      	str	r3, [sp, #44]	; 0x2c
   14b76:	4b9a      	ldr	r3, [pc, #616]	; (14de0 <_svfprintf_r+0x10b0>)
   14b78:	9311      	str	r3, [sp, #68]	; 0x44
   14b7a:	f018 0120 	ands.w	r1, r8, #32
   14b7e:	f000 8105 	beq.w	14d8c <_svfprintf_r+0x105c>
   14b82:	9b08      	ldr	r3, [sp, #32]
   14b84:	3307      	adds	r3, #7
   14b86:	f023 0307 	bic.w	r3, r3, #7
   14b8a:	6859      	ldr	r1, [r3, #4]
   14b8c:	f853 2b08 	ldr.w	r2, [r3], #8
   14b90:	9308      	str	r3, [sp, #32]
   14b92:	f018 0f01 	tst.w	r8, #1
   14b96:	d00a      	beq.n	14bae <_svfprintf_r+0xe7e>
   14b98:	ea52 0301 	orrs.w	r3, r2, r1
   14b9c:	d007      	beq.n	14bae <_svfprintf_r+0xe7e>
   14b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14ba0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   14ba4:	2330      	movs	r3, #48	; 0x30
   14ba6:	f048 0802 	orr.w	r8, r8, #2
   14baa:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   14bae:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   14bb2:	9302      	str	r3, [sp, #8]
   14bb4:	2302      	movs	r3, #2
   14bb6:	f7ff bb60 	b.w	1427a <_svfprintf_r+0x54a>
   14bba:	930b      	str	r3, [sp, #44]	; 0x2c
   14bbc:	f7ff bbb6 	b.w	1432c <_svfprintf_r+0x5fc>
   14bc0:	930b      	str	r3, [sp, #44]	; 0x2c
   14bc2:	4b88      	ldr	r3, [pc, #544]	; (14de4 <_svfprintf_r+0x10b4>)
   14bc4:	9311      	str	r3, [sp, #68]	; 0x44
   14bc6:	e7d8      	b.n	14b7a <_svfprintf_r+0xe4a>
   14bc8:	9b08      	ldr	r3, [sp, #32]
   14bca:	2101      	movs	r1, #1
   14bcc:	f853 2b04 	ldr.w	r2, [r3], #4
   14bd0:	9102      	str	r1, [sp, #8]
   14bd2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   14bd6:	9308      	str	r3, [sp, #32]
   14bd8:	9105      	str	r1, [sp, #20]
   14bda:	ac37      	add	r4, sp, #220	; 0xdc
   14bdc:	f7ff baaf 	b.w	1413e <_svfprintf_r+0x40e>
   14be0:	ee1b 1a10 	vmov	r1, s22
   14be4:	aa24      	add	r2, sp, #144	; 0x90
   14be6:	4658      	mov	r0, fp
   14be8:	f003 ff2e 	bl	18a48 <__ssprint_r>
   14bec:	2800      	cmp	r0, #0
   14bee:	f47f ad04 	bne.w	145fa <_svfprintf_r+0x8ca>
   14bf2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14bf4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14bf8:	e45d      	b.n	144b6 <_svfprintf_r+0x786>
   14bfa:	9b03      	ldr	r3, [sp, #12]
   14bfc:	9407      	str	r4, [sp, #28]
   14bfe:	2b06      	cmp	r3, #6
   14c00:	4622      	mov	r2, r4
   14c02:	bf28      	it	cs
   14c04:	2306      	movcs	r3, #6
   14c06:	9403      	str	r4, [sp, #12]
   14c08:	4621      	mov	r1, r4
   14c0a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   14c0e:	4c76      	ldr	r4, [pc, #472]	; (14de8 <_svfprintf_r+0x10b8>)
   14c10:	9302      	str	r3, [sp, #8]
   14c12:	9305      	str	r3, [sp, #20]
   14c14:	920f      	str	r2, [sp, #60]	; 0x3c
   14c16:	f7ff ba6c 	b.w	140f2 <_svfprintf_r+0x3c2>
   14c1a:	2140      	movs	r1, #64	; 0x40
   14c1c:	4658      	mov	r0, fp
   14c1e:	f7fb f95b 	bl	fed8 <_malloc_r>
   14c22:	6020      	str	r0, [r4, #0]
   14c24:	6120      	str	r0, [r4, #16]
   14c26:	2800      	cmp	r0, #0
   14c28:	f000 860f 	beq.w	1584a <_svfprintf_r+0x1b1a>
   14c2c:	2340      	movs	r3, #64	; 0x40
   14c2e:	6163      	str	r3, [r4, #20]
   14c30:	f7ff b89e 	b.w	13d70 <_svfprintf_r+0x40>
   14c34:	2d10      	cmp	r5, #16
   14c36:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14c38:	f340 825d 	ble.w	150f6 <_svfprintf_r+0x13c6>
   14c3c:	4651      	mov	r1, sl
   14c3e:	2610      	movs	r6, #16
   14c40:	ee1b aa10 	vmov	sl, s22
   14c44:	e004      	b.n	14c50 <_svfprintf_r+0xf20>
   14c46:	3108      	adds	r1, #8
   14c48:	3d10      	subs	r5, #16
   14c4a:	2d10      	cmp	r5, #16
   14c4c:	f340 8252 	ble.w	150f4 <_svfprintf_r+0x13c4>
   14c50:	3301      	adds	r3, #1
   14c52:	4866      	ldr	r0, [pc, #408]	; (14dec <_svfprintf_r+0x10bc>)
   14c54:	3210      	adds	r2, #16
   14c56:	2b07      	cmp	r3, #7
   14c58:	e9c1 0600 	strd	r0, r6, [r1]
   14c5c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14c60:	ddf1      	ble.n	14c46 <_svfprintf_r+0xf16>
   14c62:	aa24      	add	r2, sp, #144	; 0x90
   14c64:	4651      	mov	r1, sl
   14c66:	4658      	mov	r0, fp
   14c68:	f003 feee 	bl	18a48 <__ssprint_r>
   14c6c:	2800      	cmp	r0, #0
   14c6e:	f47f acc4 	bne.w	145fa <_svfprintf_r+0x8ca>
   14c72:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14c76:	a927      	add	r1, sp, #156	; 0x9c
   14c78:	e7e6      	b.n	14c48 <_svfprintf_r+0xf18>
   14c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14c7c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   14c80:	18e3      	adds	r3, r4, r3
   14c82:	9303      	str	r3, [sp, #12]
   14c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14c86:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   14c8a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   14c8c:	9d05      	ldr	r5, [sp, #20]
   14c8e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   14c92:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   14c96:	940b      	str	r4, [sp, #44]	; 0x2c
   14c98:	ee1b 1a10 	vmov	r1, s22
   14c9c:	4650      	mov	r0, sl
   14c9e:	2b00      	cmp	r3, #0
   14ca0:	d034      	beq.n	14d0c <_svfprintf_r+0xfdc>
   14ca2:	f1b8 0f00 	cmp.w	r8, #0
   14ca6:	d135      	bne.n	14d14 <_svfprintf_r+0xfe4>
   14ca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14caa:	3b01      	subs	r3, #1
   14cac:	3e01      	subs	r6, #1
   14cae:	930d      	str	r3, [sp, #52]	; 0x34
   14cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14cb2:	e9c0 3900 	strd	r3, r9, [r0]
   14cb6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14cb8:	3301      	adds	r3, #1
   14cba:	444a      	add	r2, r9
   14cbc:	2b07      	cmp	r3, #7
   14cbe:	9226      	str	r2, [sp, #152]	; 0x98
   14cc0:	9325      	str	r3, [sp, #148]	; 0x94
   14cc2:	dc6c      	bgt.n	14d9e <_svfprintf_r+0x106e>
   14cc4:	3008      	adds	r0, #8
   14cc6:	9b03      	ldr	r3, [sp, #12]
   14cc8:	f896 c000 	ldrb.w	ip, [r6]
   14ccc:	1b5b      	subs	r3, r3, r5
   14cce:	4563      	cmp	r3, ip
   14cd0:	bfa8      	it	ge
   14cd2:	4663      	movge	r3, ip
   14cd4:	2b00      	cmp	r3, #0
   14cd6:	469a      	mov	sl, r3
   14cd8:	dd0c      	ble.n	14cf4 <_svfprintf_r+0xfc4>
   14cda:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14cdc:	3401      	adds	r4, #1
   14cde:	441a      	add	r2, r3
   14ce0:	2c07      	cmp	r4, #7
   14ce2:	e9c0 5300 	strd	r5, r3, [r0]
   14ce6:	9226      	str	r2, [sp, #152]	; 0x98
   14ce8:	9425      	str	r4, [sp, #148]	; 0x94
   14cea:	f300 8177 	bgt.w	14fdc <_svfprintf_r+0x12ac>
   14cee:	f896 c000 	ldrb.w	ip, [r6]
   14cf2:	3008      	adds	r0, #8
   14cf4:	f1ba 0f00 	cmp.w	sl, #0
   14cf8:	bfac      	ite	ge
   14cfa:	ebac 040a 	subge.w	r4, ip, sl
   14cfe:	4664      	movlt	r4, ip
   14d00:	2c00      	cmp	r4, #0
   14d02:	dc0a      	bgt.n	14d1a <_svfprintf_r+0xfea>
   14d04:	4465      	add	r5, ip
   14d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14d08:	2b00      	cmp	r3, #0
   14d0a:	d1ca      	bne.n	14ca2 <_svfprintf_r+0xf72>
   14d0c:	f1b8 0f00 	cmp.w	r8, #0
   14d10:	f000 83ac 	beq.w	1546c <_svfprintf_r+0x173c>
   14d14:	f108 38ff 	add.w	r8, r8, #4294967295
   14d18:	e7ca      	b.n	14cb0 <_svfprintf_r+0xf80>
   14d1a:	2c10      	cmp	r4, #16
   14d1c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   14d20:	dd24      	ble.n	14d6c <_svfprintf_r+0x103c>
   14d22:	9505      	str	r5, [sp, #20]
   14d24:	f04f 0a10 	mov.w	sl, #16
   14d28:	4663      	mov	r3, ip
   14d2a:	460d      	mov	r5, r1
   14d2c:	e004      	b.n	14d38 <_svfprintf_r+0x1008>
   14d2e:	3c10      	subs	r4, #16
   14d30:	2c10      	cmp	r4, #16
   14d32:	f100 0008 	add.w	r0, r0, #8
   14d36:	dd16      	ble.n	14d66 <_svfprintf_r+0x1036>
   14d38:	3301      	adds	r3, #1
   14d3a:	492c      	ldr	r1, [pc, #176]	; (14dec <_svfprintf_r+0x10bc>)
   14d3c:	3210      	adds	r2, #16
   14d3e:	2b07      	cmp	r3, #7
   14d40:	e9c0 1a00 	strd	r1, sl, [r0]
   14d44:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14d48:	ddf1      	ble.n	14d2e <_svfprintf_r+0xffe>
   14d4a:	aa24      	add	r2, sp, #144	; 0x90
   14d4c:	4629      	mov	r1, r5
   14d4e:	4658      	mov	r0, fp
   14d50:	f003 fe7a 	bl	18a48 <__ssprint_r>
   14d54:	2800      	cmp	r0, #0
   14d56:	f47f ac50 	bne.w	145fa <_svfprintf_r+0x8ca>
   14d5a:	3c10      	subs	r4, #16
   14d5c:	2c10      	cmp	r4, #16
   14d5e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14d62:	a827      	add	r0, sp, #156	; 0x9c
   14d64:	dce8      	bgt.n	14d38 <_svfprintf_r+0x1008>
   14d66:	4629      	mov	r1, r5
   14d68:	9d05      	ldr	r5, [sp, #20]
   14d6a:	469c      	mov	ip, r3
   14d6c:	f10c 0301 	add.w	r3, ip, #1
   14d70:	4422      	add	r2, r4
   14d72:	6044      	str	r4, [r0, #4]
   14d74:	2b07      	cmp	r3, #7
   14d76:	4c1d      	ldr	r4, [pc, #116]	; (14dec <_svfprintf_r+0x10bc>)
   14d78:	6004      	str	r4, [r0, #0]
   14d7a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14d7e:	f300 83c6 	bgt.w	1550e <_svfprintf_r+0x17de>
   14d82:	f896 c000 	ldrb.w	ip, [r6]
   14d86:	3008      	adds	r0, #8
   14d88:	4465      	add	r5, ip
   14d8a:	e7bc      	b.n	14d06 <_svfprintf_r+0xfd6>
   14d8c:	f018 0310 	ands.w	r3, r8, #16
   14d90:	f000 80c2 	beq.w	14f18 <_svfprintf_r+0x11e8>
   14d94:	9b08      	ldr	r3, [sp, #32]
   14d96:	f853 2b04 	ldr.w	r2, [r3], #4
   14d9a:	9308      	str	r3, [sp, #32]
   14d9c:	e6f9      	b.n	14b92 <_svfprintf_r+0xe62>
   14d9e:	aa24      	add	r2, sp, #144	; 0x90
   14da0:	4658      	mov	r0, fp
   14da2:	9105      	str	r1, [sp, #20]
   14da4:	f003 fe50 	bl	18a48 <__ssprint_r>
   14da8:	2800      	cmp	r0, #0
   14daa:	f47f ac26 	bne.w	145fa <_svfprintf_r+0x8ca>
   14dae:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14db0:	9905      	ldr	r1, [sp, #20]
   14db2:	a827      	add	r0, sp, #156	; 0x9c
   14db4:	e787      	b.n	14cc6 <_svfprintf_r+0xf96>
   14db6:	9802      	ldr	r0, [sp, #8]
   14db8:	f8cd a01c 	str.w	sl, [sp, #28]
   14dbc:	ac50      	add	r4, sp, #320	; 0x140
   14dbe:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   14dc2:	2500      	movs	r5, #0
   14dc4:	ee0a ba10 	vmov	s20, fp
   14dc8:	4b09      	ldr	r3, [pc, #36]	; (14df0 <_svfprintf_r+0x10c0>)
   14dca:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   14dce:	f8cd 9014 	str.w	r9, [sp, #20]
   14dd2:	46a3      	mov	fp, r4
   14dd4:	f04f 0805 	mov.w	r8, #5
   14dd8:	46ac      	mov	ip, r5
   14dda:	4604      	mov	r4, r0
   14ddc:	e010      	b.n	14e00 <_svfprintf_r+0x10d0>
   14dde:	bf00      	nop
   14de0:	20001074 	.word	0x20001074
   14de4:	20001088 	.word	0x20001088
   14de8:	2000109c 	.word	0x2000109c
   14dec:	200088bc 	.word	0x200088bc
   14df0:	cccccccd 	.word	0xcccccccd
   14df4:	2a0a      	cmp	r2, #10
   14df6:	f171 0100 	sbcs.w	r1, r1, #0
   14dfa:	d336      	bcc.n	14e6a <_svfprintf_r+0x113a>
   14dfc:	464a      	mov	r2, r9
   14dfe:	4631      	mov	r1, r6
   14e00:	1850      	adds	r0, r2, r1
   14e02:	f140 0000 	adc.w	r0, r0, #0
   14e06:	fba3 5600 	umull	r5, r6, r3, r0
   14e0a:	f026 0503 	bic.w	r5, r6, #3
   14e0e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   14e12:	1b40      	subs	r0, r0, r5
   14e14:	1a15      	subs	r5, r2, r0
   14e16:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   14e1a:	f161 0e00 	sbc.w	lr, r1, #0
   14e1e:	fb06 f605 	mul.w	r6, r6, r5
   14e22:	fba5 9503 	umull	r9, r5, r5, r3
   14e26:	fb03 660e 	mla	r6, r3, lr, r6
   14e2a:	f009 0e01 	and.w	lr, r9, #1
   14e2e:	442e      	add	r6, r5
   14e30:	fbae 5e08 	umull	r5, lr, lr, r8
   14e34:	182d      	adds	r5, r5, r0
   14e36:	ea4f 0959 	mov.w	r9, r9, lsr #1
   14e3a:	3530      	adds	r5, #48	; 0x30
   14e3c:	f80b 5c01 	strb.w	r5, [fp, #-1]
   14e40:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   14e44:	f10c 0c01 	add.w	ip, ip, #1
   14e48:	f10b 3bff 	add.w	fp, fp, #4294967295
   14e4c:	0876      	lsrs	r6, r6, #1
   14e4e:	2c00      	cmp	r4, #0
   14e50:	d0d0      	beq.n	14df4 <_svfprintf_r+0x10c4>
   14e52:	f89a 0000 	ldrb.w	r0, [sl]
   14e56:	4584      	cmp	ip, r0
   14e58:	d1cc      	bne.n	14df4 <_svfprintf_r+0x10c4>
   14e5a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   14e5e:	d0c9      	beq.n	14df4 <_svfprintf_r+0x10c4>
   14e60:	2a0a      	cmp	r2, #10
   14e62:	f171 0100 	sbcs.w	r1, r1, #0
   14e66:	f080 818f 	bcs.w	15188 <_svfprintf_r+0x1458>
   14e6a:	465c      	mov	r4, fp
   14e6c:	ab50      	add	r3, sp, #320	; 0x140
   14e6e:	1b1b      	subs	r3, r3, r4
   14e70:	f8dd 9014 	ldr.w	r9, [sp, #20]
   14e74:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   14e78:	ee1a ba10 	vmov	fp, s20
   14e7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   14e80:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14e84:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   14e88:	9305      	str	r3, [sp, #20]
   14e8a:	f7ff bac2 	b.w	14412 <_svfprintf_r+0x6e2>
   14e8e:	ee1b 1a10 	vmov	r1, s22
   14e92:	aa24      	add	r2, sp, #144	; 0x90
   14e94:	4658      	mov	r0, fp
   14e96:	f003 fdd7 	bl	18a48 <__ssprint_r>
   14e9a:	2800      	cmp	r0, #0
   14e9c:	f47f abad 	bne.w	145fa <_svfprintf_r+0x8ca>
   14ea0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14ea4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14ea6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14eaa:	f7ff b896 	b.w	13fda <_svfprintf_r+0x2aa>
   14eae:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14eb0:	48be      	ldr	r0, [pc, #760]	; (151ac <_svfprintf_r+0x147c>)
   14eb2:	f8ca 0000 	str.w	r0, [sl]
   14eb6:	3301      	adds	r3, #1
   14eb8:	3201      	adds	r2, #1
   14eba:	2001      	movs	r0, #1
   14ebc:	2b07      	cmp	r3, #7
   14ebe:	9226      	str	r2, [sp, #152]	; 0x98
   14ec0:	9325      	str	r3, [sp, #148]	; 0x94
   14ec2:	f8ca 0004 	str.w	r0, [sl, #4]
   14ec6:	f300 8177 	bgt.w	151b8 <_svfprintf_r+0x1488>
   14eca:	f10a 0a08 	add.w	sl, sl, #8
   14ece:	2900      	cmp	r1, #0
   14ed0:	f040 80af 	bne.w	15032 <_svfprintf_r+0x1302>
   14ed4:	990e      	ldr	r1, [sp, #56]	; 0x38
   14ed6:	f008 0301 	and.w	r3, r8, #1
   14eda:	430b      	orrs	r3, r1
   14edc:	f43f a8c0 	beq.w	14060 <_svfprintf_r+0x330>
   14ee0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14ee2:	9912      	ldr	r1, [sp, #72]	; 0x48
   14ee4:	441a      	add	r2, r3
   14ee6:	e9ca 1300 	strd	r1, r3, [sl]
   14eea:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14eec:	9226      	str	r2, [sp, #152]	; 0x98
   14eee:	3301      	adds	r3, #1
   14ef0:	2b07      	cmp	r3, #7
   14ef2:	9325      	str	r3, [sp, #148]	; 0x94
   14ef4:	f300 8252 	bgt.w	1539c <_svfprintf_r+0x166c>
   14ef8:	f10a 0a08 	add.w	sl, sl, #8
   14efc:	990e      	ldr	r1, [sp, #56]	; 0x38
   14efe:	f8ca 4000 	str.w	r4, [sl]
   14f02:	3301      	adds	r3, #1
   14f04:	440a      	add	r2, r1
   14f06:	2b07      	cmp	r3, #7
   14f08:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14f0c:	f8ca 1004 	str.w	r1, [sl, #4]
   14f10:	f77f a8a4 	ble.w	1405c <_svfprintf_r+0x32c>
   14f14:	f7ff bbbd 	b.w	14692 <_svfprintf_r+0x962>
   14f18:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   14f1c:	f000 80dd 	beq.w	150da <_svfprintf_r+0x13aa>
   14f20:	9808      	ldr	r0, [sp, #32]
   14f22:	f850 2b04 	ldr.w	r2, [r0], #4
   14f26:	9008      	str	r0, [sp, #32]
   14f28:	4619      	mov	r1, r3
   14f2a:	b292      	uxth	r2, r2
   14f2c:	e631      	b.n	14b92 <_svfprintf_r+0xe62>
   14f2e:	ee1b 1a10 	vmov	r1, s22
   14f32:	aa24      	add	r2, sp, #144	; 0x90
   14f34:	4658      	mov	r0, fp
   14f36:	f003 fd87 	bl	18a48 <__ssprint_r>
   14f3a:	2800      	cmp	r0, #0
   14f3c:	f47f ab5d 	bne.w	145fa <_svfprintf_r+0x8ca>
   14f40:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14f42:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14f46:	f7ff baa3 	b.w	14490 <_svfprintf_r+0x760>
   14f4a:	ae22      	add	r6, sp, #136	; 0x88
   14f4c:	2208      	movs	r2, #8
   14f4e:	2100      	movs	r1, #0
   14f50:	4630      	mov	r0, r6
   14f52:	941d      	str	r4, [sp, #116]	; 0x74
   14f54:	f7fc ff30 	bl	11db8 <memset>
   14f58:	9b03      	ldr	r3, [sp, #12]
   14f5a:	1c5a      	adds	r2, r3, #1
   14f5c:	f000 80db 	beq.w	15116 <_svfprintf_r+0x13e6>
   14f60:	2500      	movs	r5, #0
   14f62:	f8cd 9008 	str.w	r9, [sp, #8]
   14f66:	f8cd 801c 	str.w	r8, [sp, #28]
   14f6a:	4699      	mov	r9, r3
   14f6c:	46a8      	mov	r8, r5
   14f6e:	e00c      	b.n	14f8a <_svfprintf_r+0x125a>
   14f70:	a937      	add	r1, sp, #220	; 0xdc
   14f72:	4658      	mov	r0, fp
   14f74:	f003 fc3e 	bl	187f4 <_wcrtomb_r>
   14f78:	1c43      	adds	r3, r0, #1
   14f7a:	4440      	add	r0, r8
   14f7c:	f000 83c8 	beq.w	15710 <_svfprintf_r+0x19e0>
   14f80:	4548      	cmp	r0, r9
   14f82:	dc08      	bgt.n	14f96 <_svfprintf_r+0x1266>
   14f84:	f000 8418 	beq.w	157b8 <_svfprintf_r+0x1a88>
   14f88:	4680      	mov	r8, r0
   14f8a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   14f8c:	5952      	ldr	r2, [r2, r5]
   14f8e:	4633      	mov	r3, r6
   14f90:	3504      	adds	r5, #4
   14f92:	2a00      	cmp	r2, #0
   14f94:	d1ec      	bne.n	14f70 <_svfprintf_r+0x1240>
   14f96:	f8cd 8014 	str.w	r8, [sp, #20]
   14f9a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   14f9e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   14fa2:	e0c5      	b.n	15130 <_svfprintf_r+0x1400>
   14fa4:	3301      	adds	r3, #1
   14fa6:	4982      	ldr	r1, [pc, #520]	; (151b0 <_svfprintf_r+0x1480>)
   14fa8:	f8ca 4004 	str.w	r4, [sl, #4]
   14fac:	4422      	add	r2, r4
   14fae:	2b07      	cmp	r3, #7
   14fb0:	f8ca 1000 	str.w	r1, [sl]
   14fb4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14fb8:	f77f a850 	ble.w	1405c <_svfprintf_r+0x32c>
   14fbc:	f7ff bb69 	b.w	14692 <_svfprintf_r+0x962>
   14fc0:	ee1b 1a10 	vmov	r1, s22
   14fc4:	aa24      	add	r2, sp, #144	; 0x90
   14fc6:	4658      	mov	r0, fp
   14fc8:	f003 fd3e 	bl	18a48 <__ssprint_r>
   14fcc:	2800      	cmp	r0, #0
   14fce:	f47f ab14 	bne.w	145fa <_svfprintf_r+0x8ca>
   14fd2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14fd4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14fd8:	f7ff b829 	b.w	1402e <_svfprintf_r+0x2fe>
   14fdc:	aa24      	add	r2, sp, #144	; 0x90
   14fde:	4658      	mov	r0, fp
   14fe0:	9105      	str	r1, [sp, #20]
   14fe2:	f003 fd31 	bl	18a48 <__ssprint_r>
   14fe6:	2800      	cmp	r0, #0
   14fe8:	f47f ab07 	bne.w	145fa <_svfprintf_r+0x8ca>
   14fec:	f896 c000 	ldrb.w	ip, [r6]
   14ff0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14ff2:	9905      	ldr	r1, [sp, #20]
   14ff4:	a827      	add	r0, sp, #156	; 0x9c
   14ff6:	e67d      	b.n	14cf4 <_svfprintf_r+0xfc4>
   14ff8:	2b01      	cmp	r3, #1
   14ffa:	f8cd 8008 	str.w	r8, [sp, #8]
   14ffe:	f47f a9f3 	bne.w	143e8 <_svfprintf_r+0x6b8>
   15002:	f7ff bb93 	b.w	1472c <_svfprintf_r+0x9fc>
   15006:	9b08      	ldr	r3, [sp, #32]
   15008:	9904      	ldr	r1, [sp, #16]
   1500a:	f853 2b04 	ldr.w	r2, [r3], #4
   1500e:	464c      	mov	r4, r9
   15010:	6011      	str	r1, [r2, #0]
   15012:	9308      	str	r3, [sp, #32]
   15014:	f7fe bebe 	b.w	13d94 <_svfprintf_r+0x64>
   15018:	3301      	adds	r3, #1
   1501a:	4965      	ldr	r1, [pc, #404]	; (151b0 <_svfprintf_r+0x1480>)
   1501c:	f8ca 4004 	str.w	r4, [sl, #4]
   15020:	4422      	add	r2, r4
   15022:	2b07      	cmp	r3, #7
   15024:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15028:	f8ca 1000 	str.w	r1, [sl]
   1502c:	f77f ab22 	ble.w	14674 <_svfprintf_r+0x944>
   15030:	e47b      	b.n	1492a <_svfprintf_r+0xbfa>
   15032:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15034:	9812      	ldr	r0, [sp, #72]	; 0x48
   15036:	441a      	add	r2, r3
   15038:	e9ca 0300 	strd	r0, r3, [sl]
   1503c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1503e:	9226      	str	r2, [sp, #152]	; 0x98
   15040:	3301      	adds	r3, #1
   15042:	2b07      	cmp	r3, #7
   15044:	9325      	str	r3, [sp, #148]	; 0x94
   15046:	f300 81a9 	bgt.w	1539c <_svfprintf_r+0x166c>
   1504a:	f10a 0a08 	add.w	sl, sl, #8
   1504e:	2900      	cmp	r1, #0
   15050:	f6bf af54 	bge.w	14efc <_svfprintf_r+0x11cc>
   15054:	424d      	negs	r5, r1
   15056:	3110      	adds	r1, #16
   15058:	f280 830f 	bge.w	1567a <_svfprintf_r+0x194a>
   1505c:	ee1b 1a10 	vmov	r1, s22
   15060:	2610      	movs	r6, #16
   15062:	e005      	b.n	15070 <_svfprintf_r+0x1340>
   15064:	f10a 0a08 	add.w	sl, sl, #8
   15068:	3d10      	subs	r5, #16
   1506a:	2d10      	cmp	r5, #16
   1506c:	f340 8305 	ble.w	1567a <_svfprintf_r+0x194a>
   15070:	3301      	adds	r3, #1
   15072:	484f      	ldr	r0, [pc, #316]	; (151b0 <_svfprintf_r+0x1480>)
   15074:	3210      	adds	r2, #16
   15076:	2b07      	cmp	r3, #7
   15078:	e9ca 0600 	strd	r0, r6, [sl]
   1507c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15080:	ddf0      	ble.n	15064 <_svfprintf_r+0x1334>
   15082:	aa24      	add	r2, sp, #144	; 0x90
   15084:	4658      	mov	r0, fp
   15086:	9103      	str	r1, [sp, #12]
   15088:	f003 fcde 	bl	18a48 <__ssprint_r>
   1508c:	2800      	cmp	r0, #0
   1508e:	f47f aab4 	bne.w	145fa <_svfprintf_r+0x8ca>
   15092:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15096:	9903      	ldr	r1, [sp, #12]
   15098:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1509c:	e7e4      	b.n	15068 <_svfprintf_r+0x1338>
   1509e:	9b08      	ldr	r3, [sp, #32]
   150a0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   150a4:	bf1a      	itte	ne
   150a6:	4611      	movne	r1, r2
   150a8:	f853 2b04 	ldrne.w	r2, [r3], #4
   150ac:	f853 2b04 	ldreq.w	r2, [r3], #4
   150b0:	9308      	str	r3, [sp, #32]
   150b2:	bf18      	it	ne
   150b4:	b2d2      	uxtbne	r2, r2
   150b6:	f7ff b945 	b.w	14344 <_svfprintf_r+0x614>
   150ba:	9b02      	ldr	r3, [sp, #8]
   150bc:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   150c0:	9b08      	ldr	r3, [sp, #32]
   150c2:	bf1a      	itte	ne
   150c4:	4611      	movne	r1, r2
   150c6:	f853 2b04 	ldrne.w	r2, [r3], #4
   150ca:	f853 2b04 	ldreq.w	r2, [r3], #4
   150ce:	9308      	str	r3, [sp, #32]
   150d0:	bf18      	it	ne
   150d2:	b2d2      	uxtbne	r2, r2
   150d4:	2301      	movs	r3, #1
   150d6:	f7ff b8d0 	b.w	1427a <_svfprintf_r+0x54a>
   150da:	9b08      	ldr	r3, [sp, #32]
   150dc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   150e0:	bf1a      	itte	ne
   150e2:	4611      	movne	r1, r2
   150e4:	f853 2b04 	ldrne.w	r2, [r3], #4
   150e8:	f853 2b04 	ldreq.w	r2, [r3], #4
   150ec:	9308      	str	r3, [sp, #32]
   150ee:	bf18      	it	ne
   150f0:	b2d2      	uxtbne	r2, r2
   150f2:	e54e      	b.n	14b92 <_svfprintf_r+0xe62>
   150f4:	468a      	mov	sl, r1
   150f6:	3301      	adds	r3, #1
   150f8:	492d      	ldr	r1, [pc, #180]	; (151b0 <_svfprintf_r+0x1480>)
   150fa:	f8ca 5004 	str.w	r5, [sl, #4]
   150fe:	442a      	add	r2, r5
   15100:	2b07      	cmp	r3, #7
   15102:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15106:	f8ca 1000 	str.w	r1, [sl]
   1510a:	f300 8139 	bgt.w	15380 <_svfprintf_r+0x1650>
   1510e:	f10a 0a08 	add.w	sl, sl, #8
   15112:	f7ff bb8c 	b.w	1482e <_svfprintf_r+0xafe>
   15116:	2300      	movs	r3, #0
   15118:	4619      	mov	r1, r3
   1511a:	9600      	str	r6, [sp, #0]
   1511c:	aa1d      	add	r2, sp, #116	; 0x74
   1511e:	4658      	mov	r0, fp
   15120:	f003 fb8e 	bl	18840 <_wcsrtombs_r>
   15124:	4603      	mov	r3, r0
   15126:	3301      	adds	r3, #1
   15128:	9005      	str	r0, [sp, #20]
   1512a:	f000 82f1 	beq.w	15710 <_svfprintf_r+0x19e0>
   1512e:	941d      	str	r4, [sp, #116]	; 0x74
   15130:	9b05      	ldr	r3, [sp, #20]
   15132:	2b00      	cmp	r3, #0
   15134:	d04e      	beq.n	151d4 <_svfprintf_r+0x14a4>
   15136:	2b63      	cmp	r3, #99	; 0x63
   15138:	f300 8118 	bgt.w	1536c <_svfprintf_r+0x163c>
   1513c:	2300      	movs	r3, #0
   1513e:	9307      	str	r3, [sp, #28]
   15140:	ac37      	add	r4, sp, #220	; 0xdc
   15142:	2208      	movs	r2, #8
   15144:	2100      	movs	r1, #0
   15146:	4630      	mov	r0, r6
   15148:	f7fc fe36 	bl	11db8 <memset>
   1514c:	9d05      	ldr	r5, [sp, #20]
   1514e:	9600      	str	r6, [sp, #0]
   15150:	462b      	mov	r3, r5
   15152:	aa1d      	add	r2, sp, #116	; 0x74
   15154:	4621      	mov	r1, r4
   15156:	4658      	mov	r0, fp
   15158:	f003 fb72 	bl	18840 <_wcsrtombs_r>
   1515c:	4285      	cmp	r5, r0
   1515e:	f040 837c 	bne.w	1585a <_svfprintf_r+0x1b2a>
   15162:	9a05      	ldr	r2, [sp, #20]
   15164:	2300      	movs	r3, #0
   15166:	54a3      	strb	r3, [r4, r2]
   15168:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1516c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   15170:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15174:	9303      	str	r3, [sp, #12]
   15176:	9202      	str	r2, [sp, #8]
   15178:	930f      	str	r3, [sp, #60]	; 0x3c
   1517a:	f7fe bfba 	b.w	140f2 <_svfprintf_r+0x3c2>
   1517e:	212d      	movs	r1, #45	; 0x2d
   15180:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   15184:	f7fe bfa4 	b.w	140d0 <_svfprintf_r+0x3a0>
   15188:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1518a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1518c:	ebab 0b03 	sub.w	fp, fp, r3
   15190:	461a      	mov	r2, r3
   15192:	4658      	mov	r0, fp
   15194:	f7fc fefe 	bl	11f94 <strncpy>
   15198:	f89a 2001 	ldrb.w	r2, [sl, #1]
   1519c:	4b05      	ldr	r3, [pc, #20]	; (151b4 <_svfprintf_r+0x1484>)
   1519e:	b10a      	cbz	r2, 151a4 <_svfprintf_r+0x1474>
   151a0:	f10a 0a01 	add.w	sl, sl, #1
   151a4:	f04f 0c00 	mov.w	ip, #0
   151a8:	e628      	b.n	14dfc <_svfprintf_r+0x10cc>
   151aa:	bf00      	nop
   151ac:	20007e50 	.word	0x20007e50
   151b0:	200088bc 	.word	0x200088bc
   151b4:	cccccccd 	.word	0xcccccccd
   151b8:	ee1b 1a10 	vmov	r1, s22
   151bc:	aa24      	add	r2, sp, #144	; 0x90
   151be:	4658      	mov	r0, fp
   151c0:	f003 fc42 	bl	18a48 <__ssprint_r>
   151c4:	2800      	cmp	r0, #0
   151c6:	f47f aa18 	bne.w	145fa <_svfprintf_r+0x8ca>
   151ca:	991b      	ldr	r1, [sp, #108]	; 0x6c
   151cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   151ce:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   151d2:	e67c      	b.n	14ece <_svfprintf_r+0x119e>
   151d4:	9b05      	ldr	r3, [sp, #20]
   151d6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   151da:	930f      	str	r3, [sp, #60]	; 0x3c
   151dc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   151e0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   151e4:	9307      	str	r3, [sp, #28]
   151e6:	f7fe bf84 	b.w	140f2 <_svfprintf_r+0x3c2>
   151ea:	990e      	ldr	r1, [sp, #56]	; 0x38
   151ec:	9805      	ldr	r0, [sp, #20]
   151ee:	1865      	adds	r5, r4, r1
   151f0:	1a2d      	subs	r5, r5, r0
   151f2:	1acc      	subs	r4, r1, r3
   151f4:	42a5      	cmp	r5, r4
   151f6:	bfa8      	it	ge
   151f8:	4625      	movge	r5, r4
   151fa:	f7ff bb4d 	b.w	14898 <_svfprintf_r+0xb68>
   151fe:	9b08      	ldr	r3, [sp, #32]
   15200:	9904      	ldr	r1, [sp, #16]
   15202:	f853 2b04 	ldr.w	r2, [r3], #4
   15206:	9308      	str	r3, [sp, #32]
   15208:	8011      	strh	r1, [r2, #0]
   1520a:	464c      	mov	r4, r9
   1520c:	f7fe bdc2 	b.w	13d94 <_svfprintf_r+0x64>
   15210:	f913 2b04 	ldrsb.w	r2, [r3], #4
   15214:	9308      	str	r3, [sp, #32]
   15216:	17d1      	asrs	r1, r2, #31
   15218:	460b      	mov	r3, r1
   1521a:	f7fe bfdb 	b.w	141d4 <_svfprintf_r+0x4a4>
   1521e:	9a03      	ldr	r2, [sp, #12]
   15220:	2102      	movs	r1, #2
   15222:	ab22      	add	r3, sp, #136	; 0x88
   15224:	9301      	str	r3, [sp, #4]
   15226:	ab1d      	add	r3, sp, #116	; 0x74
   15228:	9300      	str	r3, [sp, #0]
   1522a:	4658      	mov	r0, fp
   1522c:	ab1b      	add	r3, sp, #108	; 0x6c
   1522e:	eeb0 0b4a 	vmov.f64	d0, d10
   15232:	9202      	str	r2, [sp, #8]
   15234:	f002 fa14 	bl	17660 <_dtoa_r>
   15238:	2d47      	cmp	r5, #71	; 0x47
   1523a:	9a02      	ldr	r2, [sp, #8]
   1523c:	4604      	mov	r4, r0
   1523e:	f000 8161 	beq.w	15504 <_svfprintf_r+0x17d4>
   15242:	2d46      	cmp	r5, #70	; 0x46
   15244:	4410      	add	r0, r2
   15246:	d105      	bne.n	15254 <_svfprintf_r+0x1524>
   15248:	7823      	ldrb	r3, [r4, #0]
   1524a:	2b30      	cmp	r3, #48	; 0x30
   1524c:	f000 826f 	beq.w	1572e <_svfprintf_r+0x19fe>
   15250:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15252:	4410      	add	r0, r2
   15254:	eeb5 ab40 	vcmp.f64	d10, #0.0
   15258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1525c:	f040 8146 	bne.w	154ec <_svfprintf_r+0x17bc>
   15260:	4603      	mov	r3, r0
   15262:	1b1b      	subs	r3, r3, r4
   15264:	930e      	str	r3, [sp, #56]	; 0x38
   15266:	2d47      	cmp	r5, #71	; 0x47
   15268:	f000 8110 	beq.w	1548c <_svfprintf_r+0x175c>
   1526c:	2d46      	cmp	r5, #70	; 0x46
   1526e:	f000 81b5 	beq.w	155dc <_svfprintf_r+0x18ac>
   15272:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15274:	930c      	str	r3, [sp, #48]	; 0x30
   15276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15278:	2d41      	cmp	r5, #65	; 0x41
   1527a:	f103 33ff 	add.w	r3, r3, #4294967295
   1527e:	931b      	str	r3, [sp, #108]	; 0x6c
   15280:	f000 81e5 	beq.w	1564e <_svfprintf_r+0x191e>
   15284:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   15288:	2100      	movs	r1, #0
   1528a:	2b00      	cmp	r3, #0
   1528c:	bfb8      	it	lt
   1528e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   15290:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   15294:	bfba      	itte	lt
   15296:	f1c3 0301 	rsblt	r3, r3, #1
   1529a:	222d      	movlt	r2, #45	; 0x2d
   1529c:	222b      	movge	r2, #43	; 0x2b
   1529e:	2b09      	cmp	r3, #9
   152a0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   152a4:	f340 81da 	ble.w	1565c <_svfprintf_r+0x192c>
   152a8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   152ac:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 156cc <_svfprintf_r+0x199c>
   152b0:	462a      	mov	r2, r5
   152b2:	4610      	mov	r0, r2
   152b4:	fb8c 2103 	smull	r2, r1, ip, r3
   152b8:	17da      	asrs	r2, r3, #31
   152ba:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   152be:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   152c2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   152c6:	3130      	adds	r1, #48	; 0x30
   152c8:	f800 1c01 	strb.w	r1, [r0, #-1]
   152cc:	4619      	mov	r1, r3
   152ce:	2963      	cmp	r1, #99	; 0x63
   152d0:	4613      	mov	r3, r2
   152d2:	f100 32ff 	add.w	r2, r0, #4294967295
   152d6:	dcec      	bgt.n	152b2 <_svfprintf_r+0x1582>
   152d8:	3330      	adds	r3, #48	; 0x30
   152da:	b2d9      	uxtb	r1, r3
   152dc:	1e83      	subs	r3, r0, #2
   152de:	429d      	cmp	r5, r3
   152e0:	f802 1c01 	strb.w	r1, [r2, #-1]
   152e4:	f240 828b 	bls.w	157fe <_svfprintf_r+0x1ace>
   152e8:	4613      	mov	r3, r2
   152ea:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   152ee:	e001      	b.n	152f4 <_svfprintf_r+0x15c4>
   152f0:	f813 1b01 	ldrb.w	r1, [r3], #1
   152f4:	f802 1b01 	strb.w	r1, [r2], #1
   152f8:	429d      	cmp	r5, r3
   152fa:	d1f9      	bne.n	152f0 <_svfprintf_r+0x15c0>
   152fc:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   15300:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   15304:	1a1b      	subs	r3, r3, r0
   15306:	4413      	add	r3, r2
   15308:	aa1e      	add	r2, sp, #120	; 0x78
   1530a:	1a9b      	subs	r3, r3, r2
   1530c:	9314      	str	r3, [sp, #80]	; 0x50
   1530e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15310:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15312:	2b01      	cmp	r3, #1
   15314:	441a      	add	r2, r3
   15316:	9205      	str	r2, [sp, #20]
   15318:	f340 8203 	ble.w	15722 <_svfprintf_r+0x19f2>
   1531c:	9b05      	ldr	r3, [sp, #20]
   1531e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15320:	4413      	add	r3, r2
   15322:	9305      	str	r3, [sp, #20]
   15324:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   15328:	9a05      	ldr	r2, [sp, #20]
   1532a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   1532e:	2300      	movs	r3, #0
   15330:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   15334:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   15338:	930f      	str	r3, [sp, #60]	; 0x3c
   1533a:	9202      	str	r2, [sp, #8]
   1533c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1533e:	2b00      	cmp	r3, #0
   15340:	f040 80b1 	bne.w	154a6 <_svfprintf_r+0x1776>
   15344:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15348:	9303      	str	r3, [sp, #12]
   1534a:	f7fe bed2 	b.w	140f2 <_svfprintf_r+0x3c2>
   1534e:	4620      	mov	r0, r4
   15350:	f7fd f916 	bl	12580 <strlen>
   15354:	4602      	mov	r2, r0
   15356:	9005      	str	r0, [sp, #20]
   15358:	f7fe bf20 	b.w	1419c <_svfprintf_r+0x46c>
   1535c:	ee1b 1a10 	vmov	r1, s22
   15360:	aa24      	add	r2, sp, #144	; 0x90
   15362:	4658      	mov	r0, fp
   15364:	f003 fb70 	bl	18a48 <__ssprint_r>
   15368:	f7fe bded 	b.w	13f46 <_svfprintf_r+0x216>
   1536c:	1c59      	adds	r1, r3, #1
   1536e:	4658      	mov	r0, fp
   15370:	f7fa fdb2 	bl	fed8 <_malloc_r>
   15374:	4604      	mov	r4, r0
   15376:	2800      	cmp	r0, #0
   15378:	f000 81ca 	beq.w	15710 <_svfprintf_r+0x19e0>
   1537c:	9007      	str	r0, [sp, #28]
   1537e:	e6e0      	b.n	15142 <_svfprintf_r+0x1412>
   15380:	ee1b 1a10 	vmov	r1, s22
   15384:	aa24      	add	r2, sp, #144	; 0x90
   15386:	4658      	mov	r0, fp
   15388:	f003 fb5e 	bl	18a48 <__ssprint_r>
   1538c:	2800      	cmp	r0, #0
   1538e:	f47f a934 	bne.w	145fa <_svfprintf_r+0x8ca>
   15392:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15394:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15398:	f7ff ba49 	b.w	1482e <_svfprintf_r+0xafe>
   1539c:	ee1b 1a10 	vmov	r1, s22
   153a0:	aa24      	add	r2, sp, #144	; 0x90
   153a2:	4658      	mov	r0, fp
   153a4:	f003 fb50 	bl	18a48 <__ssprint_r>
   153a8:	2800      	cmp	r0, #0
   153aa:	f47f a926 	bne.w	145fa <_svfprintf_r+0x8ca>
   153ae:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   153b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   153b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   153b8:	e649      	b.n	1504e <_svfprintf_r+0x131e>
   153ba:	2306      	movs	r3, #6
   153bc:	9303      	str	r3, [sp, #12]
   153be:	f7ff bb83 	b.w	14ac8 <_svfprintf_r+0xd98>
   153c2:	9b03      	ldr	r3, [sp, #12]
   153c4:	2102      	movs	r1, #2
   153c6:	1c5a      	adds	r2, r3, #1
   153c8:	e72b      	b.n	15222 <_svfprintf_r+0x14f2>
   153ca:	9a03      	ldr	r2, [sp, #12]
   153cc:	2103      	movs	r1, #3
   153ce:	e728      	b.n	15222 <_svfprintf_r+0x14f2>
   153d0:	a81b      	add	r0, sp, #108	; 0x6c
   153d2:	eeb0 0b4a 	vmov.f64	d0, d10
   153d6:	f002 f817 	bl	17408 <frexp>
   153da:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   153de:	ee20 0b07 	vmul.f64	d0, d0, d7
   153e2:	eeb5 0b40 	vcmp.f64	d0, #0.0
   153e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   153ea:	d101      	bne.n	153f0 <_svfprintf_r+0x16c0>
   153ec:	2301      	movs	r3, #1
   153ee:	931b      	str	r3, [sp, #108]	; 0x6c
   153f0:	48b3      	ldr	r0, [pc, #716]	; (156c0 <_svfprintf_r+0x1990>)
   153f2:	9b03      	ldr	r3, [sp, #12]
   153f4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   153f8:	3b01      	subs	r3, #1
   153fa:	4622      	mov	r2, r4
   153fc:	e004      	b.n	15408 <_svfprintf_r+0x16d8>
   153fe:	eeb5 0b40 	vcmp.f64	d0, #0.0
   15402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15406:	d013      	beq.n	15430 <_svfprintf_r+0x1700>
   15408:	ee20 0b05 	vmul.f64	d0, d0, d5
   1540c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   15410:	f1b3 3fff 	cmp.w	r3, #4294967295
   15414:	ee17 1a90 	vmov	r1, s15
   15418:	5c41      	ldrb	r1, [r0, r1]
   1541a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   1541e:	4694      	mov	ip, r2
   15420:	ee30 0b46 	vsub.f64	d0, d0, d6
   15424:	f802 1b01 	strb.w	r1, [r2], #1
   15428:	4619      	mov	r1, r3
   1542a:	f103 33ff 	add.w	r3, r3, #4294967295
   1542e:	d1e6      	bne.n	153fe <_svfprintf_r+0x16ce>
   15430:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   15434:	eeb4 0bc6 	vcmpe.f64	d0, d6
   15438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1543c:	f300 8148 	bgt.w	156d0 <_svfprintf_r+0x19a0>
   15440:	eeb4 0b46 	vcmp.f64	d0, d6
   15444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15448:	d104      	bne.n	15454 <_svfprintf_r+0x1724>
   1544a:	ee17 3a90 	vmov	r3, s15
   1544e:	07db      	lsls	r3, r3, #31
   15450:	f100 813e 	bmi.w	156d0 <_svfprintf_r+0x19a0>
   15454:	2900      	cmp	r1, #0
   15456:	db06      	blt.n	15466 <_svfprintf_r+0x1736>
   15458:	1c4b      	adds	r3, r1, #1
   1545a:	4413      	add	r3, r2
   1545c:	2130      	movs	r1, #48	; 0x30
   1545e:	f802 1b01 	strb.w	r1, [r2], #1
   15462:	4293      	cmp	r3, r2
   15464:	d1fb      	bne.n	1545e <_svfprintf_r+0x172e>
   15466:	1b13      	subs	r3, r2, r4
   15468:	930e      	str	r3, [sp, #56]	; 0x38
   1546a:	e6fc      	b.n	15266 <_svfprintf_r+0x1536>
   1546c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1546e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15470:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   15474:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   15478:	9613      	str	r6, [sp, #76]	; 0x4c
   1547a:	18e3      	adds	r3, r4, r3
   1547c:	429d      	cmp	r5, r3
   1547e:	4629      	mov	r1, r5
   15480:	bf28      	it	cs
   15482:	4619      	movcs	r1, r3
   15484:	4682      	mov	sl, r0
   15486:	9105      	str	r1, [sp, #20]
   15488:	f7ff b9d8 	b.w	1483c <_svfprintf_r+0xb0c>
   1548c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1548e:	930c      	str	r3, [sp, #48]	; 0x30
   15490:	1cda      	adds	r2, r3, #3
   15492:	db02      	blt.n	1549a <_svfprintf_r+0x176a>
   15494:	9a03      	ldr	r2, [sp, #12]
   15496:	4293      	cmp	r3, r2
   15498:	dd0c      	ble.n	154b4 <_svfprintf_r+0x1784>
   1549a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1549c:	3b02      	subs	r3, #2
   1549e:	930b      	str	r3, [sp, #44]	; 0x2c
   154a0:	f023 0520 	bic.w	r5, r3, #32
   154a4:	e6e7      	b.n	15276 <_svfprintf_r+0x1546>
   154a6:	212d      	movs	r1, #45	; 0x2d
   154a8:	2300      	movs	r3, #0
   154aa:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   154ae:	9303      	str	r3, [sp, #12]
   154b0:	f7fe be22 	b.w	140f8 <_svfprintf_r+0x3c8>
   154b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   154b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   154b8:	4293      	cmp	r3, r2
   154ba:	f2c0 80bd 	blt.w	15638 <_svfprintf_r+0x1908>
   154be:	07f0      	lsls	r0, r6, #31
   154c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   154c2:	f140 8132 	bpl.w	1572a <_svfprintf_r+0x19fa>
   154c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   154c8:	4413      	add	r3, r2
   154ca:	9305      	str	r3, [sp, #20]
   154cc:	0571      	lsls	r1, r6, #21
   154ce:	d503      	bpl.n	154d8 <_svfprintf_r+0x17a8>
   154d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   154d2:	2b00      	cmp	r3, #0
   154d4:	f300 8135 	bgt.w	15742 <_svfprintf_r+0x1a12>
   154d8:	9b05      	ldr	r3, [sp, #20]
   154da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   154de:	9302      	str	r3, [sp, #8]
   154e0:	2367      	movs	r3, #103	; 0x67
   154e2:	930b      	str	r3, [sp, #44]	; 0x2c
   154e4:	2300      	movs	r3, #0
   154e6:	930f      	str	r3, [sp, #60]	; 0x3c
   154e8:	930d      	str	r3, [sp, #52]	; 0x34
   154ea:	e727      	b.n	1533c <_svfprintf_r+0x160c>
   154ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
   154ee:	4283      	cmp	r3, r0
   154f0:	f4bf aeb7 	bcs.w	15262 <_svfprintf_r+0x1532>
   154f4:	2130      	movs	r1, #48	; 0x30
   154f6:	1c5a      	adds	r2, r3, #1
   154f8:	9222      	str	r2, [sp, #136]	; 0x88
   154fa:	7019      	strb	r1, [r3, #0]
   154fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   154fe:	4298      	cmp	r0, r3
   15500:	d8f9      	bhi.n	154f6 <_svfprintf_r+0x17c6>
   15502:	e6ae      	b.n	15262 <_svfprintf_r+0x1532>
   15504:	07f3      	lsls	r3, r6, #31
   15506:	f100 80a7 	bmi.w	15658 <_svfprintf_r+0x1928>
   1550a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1550c:	e6a9      	b.n	15262 <_svfprintf_r+0x1532>
   1550e:	aa24      	add	r2, sp, #144	; 0x90
   15510:	4658      	mov	r0, fp
   15512:	9105      	str	r1, [sp, #20]
   15514:	f003 fa98 	bl	18a48 <__ssprint_r>
   15518:	2800      	cmp	r0, #0
   1551a:	f47f a86e 	bne.w	145fa <_svfprintf_r+0x8ca>
   1551e:	f896 c000 	ldrb.w	ip, [r6]
   15522:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15524:	9905      	ldr	r1, [sp, #20]
   15526:	a827      	add	r0, sp, #156	; 0x9c
   15528:	4465      	add	r5, ip
   1552a:	f7ff bbec 	b.w	14d06 <_svfprintf_r+0xfd6>
   1552e:	ee1b 1a10 	vmov	r1, s22
   15532:	aa24      	add	r2, sp, #144	; 0x90
   15534:	4658      	mov	r0, fp
   15536:	f003 fa87 	bl	18a48 <__ssprint_r>
   1553a:	2800      	cmp	r0, #0
   1553c:	f47f a85d 	bne.w	145fa <_svfprintf_r+0x8ca>
   15540:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15542:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15546:	f7ff b96b 	b.w	14820 <_svfprintf_r+0xaf0>
   1554a:	2378      	movs	r3, #120	; 0x78
   1554c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   15550:	2330      	movs	r3, #48	; 0x30
   15552:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   15556:	9b03      	ldr	r3, [sp, #12]
   15558:	2b63      	cmp	r3, #99	; 0x63
   1555a:	f048 0602 	orr.w	r6, r8, #2
   1555e:	f300 80a6 	bgt.w	156ae <_svfprintf_r+0x197e>
   15562:	2300      	movs	r3, #0
   15564:	9307      	str	r3, [sp, #28]
   15566:	ac37      	add	r4, sp, #220	; 0xdc
   15568:	ee18 3a90 	vmov	r3, s17
   1556c:	2b00      	cmp	r3, #0
   1556e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   15572:	db2b      	blt.n	155cc <_svfprintf_r+0x189c>
   15574:	eeb0 ab48 	vmov.f64	d10, d8
   15578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1557a:	f023 0520 	bic.w	r5, r3, #32
   1557e:	2300      	movs	r3, #0
   15580:	9309      	str	r3, [sp, #36]	; 0x24
   15582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15584:	2b61      	cmp	r3, #97	; 0x61
   15586:	f47f aaad 	bne.w	14ae4 <_svfprintf_r+0xdb4>
   1558a:	eeb0 0b4a 	vmov.f64	d0, d10
   1558e:	a81b      	add	r0, sp, #108	; 0x6c
   15590:	f001 ff3a 	bl	17408 <frexp>
   15594:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   15598:	ee20 0b07 	vmul.f64	d0, d0, d7
   1559c:	eeb5 0b40 	vcmp.f64	d0, #0.0
   155a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   155a4:	d101      	bne.n	155aa <_svfprintf_r+0x187a>
   155a6:	2301      	movs	r3, #1
   155a8:	931b      	str	r3, [sp, #108]	; 0x6c
   155aa:	4846      	ldr	r0, [pc, #280]	; (156c4 <_svfprintf_r+0x1994>)
   155ac:	e721      	b.n	153f2 <_svfprintf_r+0x16c2>
   155ae:	ee1b 1a10 	vmov	r1, s22
   155b2:	aa24      	add	r2, sp, #144	; 0x90
   155b4:	4658      	mov	r0, fp
   155b6:	f003 fa47 	bl	18a48 <__ssprint_r>
   155ba:	2800      	cmp	r0, #0
   155bc:	f47f a81d 	bne.w	145fa <_svfprintf_r+0x8ca>
   155c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   155c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   155c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   155c8:	f7ff b94e 	b.w	14868 <_svfprintf_r+0xb38>
   155cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   155ce:	f023 0520 	bic.w	r5, r3, #32
   155d2:	232d      	movs	r3, #45	; 0x2d
   155d4:	9309      	str	r3, [sp, #36]	; 0x24
   155d6:	eeb1 ab48 	vneg.f64	d10, d8
   155da:	e7d2      	b.n	15582 <_svfprintf_r+0x1852>
   155dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   155de:	920c      	str	r2, [sp, #48]	; 0x30
   155e0:	2a00      	cmp	r2, #0
   155e2:	f006 0301 	and.w	r3, r6, #1
   155e6:	f340 810d 	ble.w	15804 <_svfprintf_r+0x1ad4>
   155ea:	9903      	ldr	r1, [sp, #12]
   155ec:	430b      	orrs	r3, r1
   155ee:	f040 80cf 	bne.w	15790 <_svfprintf_r+0x1a60>
   155f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   155f4:	9305      	str	r3, [sp, #20]
   155f6:	2366      	movs	r3, #102	; 0x66
   155f8:	930b      	str	r3, [sp, #44]	; 0x2c
   155fa:	0572      	lsls	r2, r6, #21
   155fc:	f100 80a3 	bmi.w	15746 <_svfprintf_r+0x1a16>
   15600:	9b05      	ldr	r3, [sp, #20]
   15602:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15606:	9302      	str	r3, [sp, #8]
   15608:	e76c      	b.n	154e4 <_svfprintf_r+0x17b4>
   1560a:	ee1b 1a10 	vmov	r1, s22
   1560e:	aa24      	add	r2, sp, #144	; 0x90
   15610:	4658      	mov	r0, fp
   15612:	f003 fa19 	bl	18a48 <__ssprint_r>
   15616:	2800      	cmp	r0, #0
   15618:	f47e afef 	bne.w	145fa <_svfprintf_r+0x8ca>
   1561c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1561e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15620:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15622:	1b1c      	subs	r4, r3, r4
   15624:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15628:	f7ff b936 	b.w	14898 <_svfprintf_r+0xb68>
   1562c:	2358      	movs	r3, #88	; 0x58
   1562e:	e78d      	b.n	1554c <_svfprintf_r+0x181c>
   15630:	2200      	movs	r2, #0
   15632:	9203      	str	r2, [sp, #12]
   15634:	f7fe bbda 	b.w	13dec <_svfprintf_r+0xbc>
   15638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1563a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1563c:	189a      	adds	r2, r3, r2
   1563e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15640:	9205      	str	r2, [sp, #20]
   15642:	2b00      	cmp	r3, #0
   15644:	f340 80ab 	ble.w	1579e <_svfprintf_r+0x1a6e>
   15648:	2367      	movs	r3, #103	; 0x67
   1564a:	930b      	str	r3, [sp, #44]	; 0x2c
   1564c:	e7d5      	b.n	155fa <_svfprintf_r+0x18ca>
   1564e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15650:	320f      	adds	r2, #15
   15652:	b2d2      	uxtb	r2, r2
   15654:	2101      	movs	r1, #1
   15656:	e618      	b.n	1528a <_svfprintf_r+0x155a>
   15658:	18a0      	adds	r0, r4, r2
   1565a:	e5fb      	b.n	15254 <_svfprintf_r+0x1524>
   1565c:	2900      	cmp	r1, #0
   1565e:	f040 80a8 	bne.w	157b2 <_svfprintf_r+0x1a82>
   15662:	2230      	movs	r2, #48	; 0x30
   15664:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   15668:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   1566c:	3330      	adds	r3, #48	; 0x30
   1566e:	f802 3b01 	strb.w	r3, [r2], #1
   15672:	ab1e      	add	r3, sp, #120	; 0x78
   15674:	1ad3      	subs	r3, r2, r3
   15676:	9314      	str	r3, [sp, #80]	; 0x50
   15678:	e649      	b.n	1530e <_svfprintf_r+0x15de>
   1567a:	3301      	adds	r3, #1
   1567c:	4912      	ldr	r1, [pc, #72]	; (156c8 <_svfprintf_r+0x1998>)
   1567e:	f8ca 5004 	str.w	r5, [sl, #4]
   15682:	442a      	add	r2, r5
   15684:	2b07      	cmp	r3, #7
   15686:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1568a:	f8ca 1000 	str.w	r1, [sl]
   1568e:	f77f ac33 	ble.w	14ef8 <_svfprintf_r+0x11c8>
   15692:	ee1b 1a10 	vmov	r1, s22
   15696:	aa24      	add	r2, sp, #144	; 0x90
   15698:	4658      	mov	r0, fp
   1569a:	f003 f9d5 	bl	18a48 <__ssprint_r>
   1569e:	2800      	cmp	r0, #0
   156a0:	f47e afab 	bne.w	145fa <_svfprintf_r+0x8ca>
   156a4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   156a8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   156ac:	e426      	b.n	14efc <_svfprintf_r+0x11cc>
   156ae:	1c59      	adds	r1, r3, #1
   156b0:	4658      	mov	r0, fp
   156b2:	f7fa fc11 	bl	fed8 <_malloc_r>
   156b6:	4604      	mov	r4, r0
   156b8:	b350      	cbz	r0, 15710 <_svfprintf_r+0x19e0>
   156ba:	9007      	str	r0, [sp, #28]
   156bc:	e754      	b.n	15568 <_svfprintf_r+0x1838>
   156be:	bf00      	nop
   156c0:	20001088 	.word	0x20001088
   156c4:	20001074 	.word	0x20001074
   156c8:	200088bc 	.word	0x200088bc
   156cc:	66666667 	.word	0x66666667
   156d0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   156d4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   156d8:	f890 c00f 	ldrb.w	ip, [r0, #15]
   156dc:	4561      	cmp	r1, ip
   156de:	4613      	mov	r3, r2
   156e0:	d10a      	bne.n	156f8 <_svfprintf_r+0x19c8>
   156e2:	f04f 0e30 	mov.w	lr, #48	; 0x30
   156e6:	f803 ec01 	strb.w	lr, [r3, #-1]
   156ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
   156ec:	1e59      	subs	r1, r3, #1
   156ee:	9122      	str	r1, [sp, #136]	; 0x88
   156f0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   156f4:	458c      	cmp	ip, r1
   156f6:	d0f6      	beq.n	156e6 <_svfprintf_r+0x19b6>
   156f8:	2939      	cmp	r1, #57	; 0x39
   156fa:	bf16      	itet	ne
   156fc:	3101      	addne	r1, #1
   156fe:	7a81      	ldrbeq	r1, [r0, #10]
   15700:	b2c9      	uxtbne	r1, r1
   15702:	f803 1c01 	strb.w	r1, [r3, #-1]
   15706:	e6ae      	b.n	15466 <_svfprintf_r+0x1736>
   15708:	2300      	movs	r3, #0
   1570a:	4690      	mov	r8, r2
   1570c:	9307      	str	r3, [sp, #28]
   1570e:	e760      	b.n	155d2 <_svfprintf_r+0x18a2>
   15710:	ee1b 2a10 	vmov	r2, s22
   15714:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   15718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1571c:	8193      	strh	r3, [r2, #12]
   1571e:	f7fe bc16 	b.w	13f4e <_svfprintf_r+0x21e>
   15722:	07f5      	lsls	r5, r6, #31
   15724:	f57f adfe 	bpl.w	15324 <_svfprintf_r+0x15f4>
   15728:	e5f8      	b.n	1531c <_svfprintf_r+0x15ec>
   1572a:	9305      	str	r3, [sp, #20]
   1572c:	e6ce      	b.n	154cc <_svfprintf_r+0x179c>
   1572e:	eeb5 ab40 	vcmp.f64	d10, #0.0
   15732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15736:	f43f ad8b 	beq.w	15250 <_svfprintf_r+0x1520>
   1573a:	f1c2 0201 	rsb	r2, r2, #1
   1573e:	921b      	str	r2, [sp, #108]	; 0x6c
   15740:	e587      	b.n	15252 <_svfprintf_r+0x1522>
   15742:	2367      	movs	r3, #103	; 0x67
   15744:	930b      	str	r3, [sp, #44]	; 0x2c
   15746:	9913      	ldr	r1, [sp, #76]	; 0x4c
   15748:	780b      	ldrb	r3, [r1, #0]
   1574a:	2bff      	cmp	r3, #255	; 0xff
   1574c:	d079      	beq.n	15842 <_svfprintf_r+0x1b12>
   1574e:	2500      	movs	r5, #0
   15750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15752:	4628      	mov	r0, r5
   15754:	e003      	b.n	1575e <_svfprintf_r+0x1a2e>
   15756:	3001      	adds	r0, #1
   15758:	3101      	adds	r1, #1
   1575a:	2bff      	cmp	r3, #255	; 0xff
   1575c:	d008      	beq.n	15770 <_svfprintf_r+0x1a40>
   1575e:	4293      	cmp	r3, r2
   15760:	da06      	bge.n	15770 <_svfprintf_r+0x1a40>
   15762:	1ad2      	subs	r2, r2, r3
   15764:	784b      	ldrb	r3, [r1, #1]
   15766:	2b00      	cmp	r3, #0
   15768:	d1f5      	bne.n	15756 <_svfprintf_r+0x1a26>
   1576a:	780b      	ldrb	r3, [r1, #0]
   1576c:	3501      	adds	r5, #1
   1576e:	e7f4      	b.n	1575a <_svfprintf_r+0x1a2a>
   15770:	920c      	str	r2, [sp, #48]	; 0x30
   15772:	9113      	str	r1, [sp, #76]	; 0x4c
   15774:	900d      	str	r0, [sp, #52]	; 0x34
   15776:	950f      	str	r5, [sp, #60]	; 0x3c
   15778:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1577a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1577c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1577e:	4413      	add	r3, r2
   15780:	9a05      	ldr	r2, [sp, #20]
   15782:	fb01 2303 	mla	r3, r1, r3, r2
   15786:	9305      	str	r3, [sp, #20]
   15788:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1578c:	9302      	str	r3, [sp, #8]
   1578e:	e5d5      	b.n	1533c <_svfprintf_r+0x160c>
   15790:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15792:	18d3      	adds	r3, r2, r3
   15794:	4419      	add	r1, r3
   15796:	2366      	movs	r3, #102	; 0x66
   15798:	9105      	str	r1, [sp, #20]
   1579a:	930b      	str	r3, [sp, #44]	; 0x2c
   1579c:	e72d      	b.n	155fa <_svfprintf_r+0x18ca>
   1579e:	f1c3 0301 	rsb	r3, r3, #1
   157a2:	441a      	add	r2, r3
   157a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   157a8:	9302      	str	r3, [sp, #8]
   157aa:	2367      	movs	r3, #103	; 0x67
   157ac:	9205      	str	r2, [sp, #20]
   157ae:	930b      	str	r3, [sp, #44]	; 0x2c
   157b0:	e698      	b.n	154e4 <_svfprintf_r+0x17b4>
   157b2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   157b6:	e759      	b.n	1566c <_svfprintf_r+0x193c>
   157b8:	9b03      	ldr	r3, [sp, #12]
   157ba:	f8dd 9008 	ldr.w	r9, [sp, #8]
   157be:	f8dd 801c 	ldr.w	r8, [sp, #28]
   157c2:	9305      	str	r3, [sp, #20]
   157c4:	e4b4      	b.n	15130 <_svfprintf_r+0x1400>
   157c6:	ee18 3a90 	vmov	r3, s17
   157ca:	2b00      	cmp	r3, #0
   157cc:	bfb4      	ite	lt
   157ce:	212d      	movlt	r1, #45	; 0x2d
   157d0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   157d4:	4c25      	ldr	r4, [pc, #148]	; (1586c <_svfprintf_r+0x1b3c>)
   157d6:	4b26      	ldr	r3, [pc, #152]	; (15870 <_svfprintf_r+0x1b40>)
   157d8:	bfb8      	it	lt
   157da:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   157de:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   157e2:	f7fe bc79 	b.w	140d8 <_svfprintf_r+0x3a8>
   157e6:	9b03      	ldr	r3, [sp, #12]
   157e8:	9302      	str	r3, [sp, #8]
   157ea:	9305      	str	r3, [sp, #20]
   157ec:	2373      	movs	r3, #115	; 0x73
   157ee:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   157f2:	9003      	str	r0, [sp, #12]
   157f4:	900f      	str	r0, [sp, #60]	; 0x3c
   157f6:	900d      	str	r0, [sp, #52]	; 0x34
   157f8:	930b      	str	r3, [sp, #44]	; 0x2c
   157fa:	f7fe bc7a 	b.w	140f2 <_svfprintf_r+0x3c2>
   157fe:	2302      	movs	r3, #2
   15800:	9314      	str	r3, [sp, #80]	; 0x50
   15802:	e584      	b.n	1530e <_svfprintf_r+0x15de>
   15804:	9a03      	ldr	r2, [sp, #12]
   15806:	4313      	orrs	r3, r2
   15808:	d105      	bne.n	15816 <_svfprintf_r+0x1ae6>
   1580a:	2301      	movs	r3, #1
   1580c:	2266      	movs	r2, #102	; 0x66
   1580e:	9302      	str	r3, [sp, #8]
   15810:	920b      	str	r2, [sp, #44]	; 0x2c
   15812:	9305      	str	r3, [sp, #20]
   15814:	e666      	b.n	154e4 <_svfprintf_r+0x17b4>
   15816:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15818:	3301      	adds	r3, #1
   1581a:	441a      	add	r2, r3
   1581c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   15820:	9302      	str	r3, [sp, #8]
   15822:	2366      	movs	r3, #102	; 0x66
   15824:	9205      	str	r2, [sp, #20]
   15826:	930b      	str	r3, [sp, #44]	; 0x2c
   15828:	e65c      	b.n	154e4 <_svfprintf_r+0x17b4>
   1582a:	9a08      	ldr	r2, [sp, #32]
   1582c:	f899 3001 	ldrb.w	r3, [r9, #1]
   15830:	4689      	mov	r9, r1
   15832:	f852 1b04 	ldr.w	r1, [r2], #4
   15836:	9208      	str	r2, [sp, #32]
   15838:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1583c:	9103      	str	r1, [sp, #12]
   1583e:	f7fe bad3 	b.w	13de8 <_svfprintf_r+0xb8>
   15842:	2300      	movs	r3, #0
   15844:	930f      	str	r3, [sp, #60]	; 0x3c
   15846:	930d      	str	r3, [sp, #52]	; 0x34
   15848:	e796      	b.n	15778 <_svfprintf_r+0x1a48>
   1584a:	230c      	movs	r3, #12
   1584c:	f8cb 3000 	str.w	r3, [fp]
   15850:	f04f 33ff 	mov.w	r3, #4294967295
   15854:	9304      	str	r3, [sp, #16]
   15856:	f7fe bb81 	b.w	13f5c <_svfprintf_r+0x22c>
   1585a:	ee1b 2a10 	vmov	r2, s22
   1585e:	8993      	ldrh	r3, [r2, #12]
   15860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15864:	8193      	strh	r3, [r2, #12]
   15866:	f7fe bec8 	b.w	145fa <_svfprintf_r+0x8ca>
   1586a:	bf00      	nop
   1586c:	20001070 	.word	0x20001070
   15870:	20000b44 	.word	0x20000b44

00015874 <__ssvfscanf_r>:
   15874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15878:	ed2d 8b02 	vpush	{d8}
   1587c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
   15880:	468b      	mov	fp, r1
   15882:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   15886:	af02      	add	r7, sp, #8
   15888:	048c      	lsls	r4, r1, #18
   1588a:	4681      	mov	r9, r0
   1588c:	64fa      	str	r2, [r7, #76]	; 0x4c
   1588e:	633b      	str	r3, [r7, #48]	; 0x30
   15890:	d409      	bmi.n	158a6 <__ssvfscanf_r+0x32>
   15892:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   15896:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1589a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1589e:	f8ab 100c 	strh.w	r1, [fp, #12]
   158a2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   158a6:	2300      	movs	r3, #0
   158a8:	461c      	mov	r4, r3
   158aa:	2208      	movs	r2, #8
   158ac:	4619      	mov	r1, r3
   158ae:	f107 0058 	add.w	r0, r7, #88	; 0x58
   158b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   158b4:	46a2      	mov	sl, r4
   158b6:	f7fc fa7f 	bl	11db8 <memset>
   158ba:	643c      	str	r4, [r7, #64]	; 0x40
   158bc:	627c      	str	r4, [r7, #36]	; 0x24
   158be:	63bc      	str	r4, [r7, #56]	; 0x38
   158c0:	647c      	str	r4, [r7, #68]	; 0x44
   158c2:	4b83      	ldr	r3, [pc, #524]	; (15ad0 <__ssvfscanf_r+0x25c>)
   158c4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   158c8:	f7fc fb96 	bl	11ff8 <__locale_mb_cur_max>
   158cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
   158d0:	4603      	mov	r3, r0
   158d2:	9200      	str	r2, [sp, #0]
   158d4:	f107 0154 	add.w	r1, r7, #84	; 0x54
   158d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   158da:	4648      	mov	r0, r9
   158dc:	47a0      	blx	r4
   158de:	1e05      	subs	r5, r0, #0
   158e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   158e2:	db33      	blt.n	1594c <__ssvfscanf_r+0xd8>
   158e4:	442b      	add	r3, r5
   158e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   158e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   158ea:	462e      	mov	r6, r5
   158ec:	2b00      	cmp	r3, #0
   158ee:	f000 80b6 	beq.w	15a5e <__ssvfscanf_r+0x1ea>
   158f2:	2d01      	cmp	r5, #1
   158f4:	d038      	beq.n	15968 <__ssvfscanf_r+0xf4>
   158f6:	2b25      	cmp	r3, #37	; 0x25
   158f8:	d040      	beq.n	1597c <__ssvfscanf_r+0x108>
   158fa:	2d00      	cmp	r5, #0
   158fc:	d0e1      	beq.n	158c2 <__ssvfscanf_r+0x4e>
   158fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15900:	1b9e      	subs	r6, r3, r6
   15902:	f8db 3004 	ldr.w	r3, [fp, #4]
   15906:	1e74      	subs	r4, r6, #1
   15908:	2b00      	cmp	r3, #0
   1590a:	f340 8098 	ble.w	15a3e <__ssvfscanf_r+0x1ca>
   1590e:	f8db 1000 	ldr.w	r1, [fp]
   15912:	f894 c001 	ldrb.w	ip, [r4, #1]
   15916:	f891 e000 	ldrb.w	lr, [r1]
   1591a:	1ca3      	adds	r3, r4, #2
   1591c:	eb0a 0003 	add.w	r0, sl, r3
   15920:	45e6      	cmp	lr, ip
   15922:	f101 0101 	add.w	r1, r1, #1
   15926:	eba3 0206 	sub.w	r2, r3, r6
   1592a:	f104 0401 	add.w	r4, r4, #1
   1592e:	eba0 0006 	sub.w	r0, r0, r6
   15932:	f040 8094 	bne.w	15a5e <__ssvfscanf_r+0x1ea>
   15936:	f8db 3004 	ldr.w	r3, [fp, #4]
   1593a:	f8cb 1000 	str.w	r1, [fp]
   1593e:	3b01      	subs	r3, #1
   15940:	42aa      	cmp	r2, r5
   15942:	f8cb 3004 	str.w	r3, [fp, #4]
   15946:	dbdf      	blt.n	15908 <__ssvfscanf_r+0x94>
   15948:	4682      	mov	sl, r0
   1594a:	e7ba      	b.n	158c2 <__ssvfscanf_r+0x4e>
   1594c:	3301      	adds	r3, #1
   1594e:	64fb      	str	r3, [r7, #76]	; 0x4c
   15950:	2208      	movs	r2, #8
   15952:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   15956:	2100      	movs	r1, #0
   15958:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1595c:	657b      	str	r3, [r7, #84]	; 0x54
   1595e:	f7fc fa2b 	bl	11db8 <memset>
   15962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15964:	2b00      	cmp	r3, #0
   15966:	d07a      	beq.n	15a5e <__ssvfscanf_r+0x1ea>
   15968:	4e5a      	ldr	r6, [pc, #360]	; (15ad4 <__ssvfscanf_r+0x260>)
   1596a:	5cf2      	ldrb	r2, [r6, r3]
   1596c:	0710      	lsls	r0, r2, #28
   1596e:	f100 851c 	bmi.w	163aa <__ssvfscanf_r+0xb36>
   15972:	2b25      	cmp	r3, #37	; 0x25
   15974:	f040 8086 	bne.w	15a84 <__ssvfscanf_r+0x210>
   15978:	2501      	movs	r5, #1
   1597a:	462e      	mov	r6, r5
   1597c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1597e:	2400      	movs	r4, #0
   15980:	7802      	ldrb	r2, [r0, #0]
   15982:	46a0      	mov	r8, r4
   15984:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   15988:	1c41      	adds	r1, r0, #1
   1598a:	2b55      	cmp	r3, #85	; 0x55
   1598c:	d867      	bhi.n	15a5e <__ssvfscanf_r+0x1ea>
   1598e:	e8df f013 	tbh	[pc, r3, lsl #1]
   15992:	070a      	.short	0x070a
   15994:	00660066 	.word	0x00660066
   15998:	00660066 	.word	0x00660066
   1599c:	00660701 	.word	0x00660701
   159a0:	00660066 	.word	0x00660066
   159a4:	00660066 	.word	0x00660066
   159a8:	060c060c 	.word	0x060c060c
   159ac:	060c060c 	.word	0x060c060c
   159b0:	060c060c 	.word	0x060c060c
   159b4:	060c060c 	.word	0x060c060c
   159b8:	060c060c 	.word	0x060c060c
   159bc:	00660066 	.word	0x00660066
   159c0:	00660066 	.word	0x00660066
   159c4:	00660066 	.word	0x00660066
   159c8:	06180066 	.word	0x06180066
   159cc:	048e0066 	.word	0x048e0066
   159d0:	061804c9 	.word	0x061804c9
   159d4:	06180618 	.word	0x06180618
   159d8:	00660066 	.word	0x00660066
   159dc:	00660066 	.word	0x00660066
   159e0:	00660082 	.word	0x00660082
   159e4:	04bf0066 	.word	0x04bf0066
   159e8:	00660066 	.word	0x00660066
   159ec:	00890066 	.word	0x00890066
   159f0:	00660066 	.word	0x00660066
   159f4:	00660066 	.word	0x00660066
   159f8:	0066066b 	.word	0x0066066b
   159fc:	06dd0066 	.word	0x06dd0066
   15a00:	00660066 	.word	0x00660066
   15a04:	00660066 	.word	0x00660066
   15a08:	06180066 	.word	0x06180066
   15a0c:	04900066 	.word	0x04900066
   15a10:	061804cb 	.word	0x061804cb
   15a14:	06180618 	.word	0x06180618
   15a18:	06d206be 	.word	0x06d206be
   15a1c:	00660082 	.word	0x00660082
   15a20:	06f306e7 	.word	0x06f306e7
   15a24:	04c106ac 	.word	0x04c106ac
   15a28:	006606da 	.word	0x006606da
   15a2c:	008b0066 	.word	0x008b0066
   15a30:	06ca007d 	.word	0x06ca007d
   15a34:	00660066 	.word	0x00660066
   15a38:	0066066b 	.word	0x0066066b
   15a3c:	007d      	.short	0x007d
   15a3e:	4659      	mov	r1, fp
   15a40:	4648      	mov	r0, r9
   15a42:	f003 f8c1 	bl	18bc8 <__ssrefill_r>
   15a46:	2800      	cmp	r0, #0
   15a48:	f43f af61 	beq.w	1590e <__ssvfscanf_r+0x9a>
   15a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15a4e:	2b00      	cmp	r3, #0
   15a50:	f001 8052 	beq.w	16af8 <__ssvfscanf_r+0x1284>
   15a54:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   15a58:	065a      	lsls	r2, r3, #25
   15a5a:	f101 804d 	bmi.w	16af8 <__ssvfscanf_r+0x1284>
   15a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15a60:	b143      	cbz	r3, 15a74 <__ssvfscanf_r+0x200>
   15a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15a64:	f8d3 8000 	ldr.w	r8, [r3]
   15a68:	f1b8 0f00 	cmp.w	r8, #0
   15a6c:	d002      	beq.n	15a74 <__ssvfscanf_r+0x200>
   15a6e:	4640      	mov	r0, r8
   15a70:	f7fa fa2a 	bl	fec8 <free>
   15a74:	6c78      	ldr	r0, [r7, #68]	; 0x44
   15a76:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
   15a7a:	46bd      	mov	sp, r7
   15a7c:	ecbd 8b02 	vpop	{d8}
   15a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15a86:	2501      	movs	r5, #1
   15a88:	1e5e      	subs	r6, r3, #1
   15a8a:	e73a      	b.n	15902 <__ssvfscanf_r+0x8e>
   15a8c:	0723      	lsls	r3, r4, #28
   15a8e:	d1e6      	bne.n	15a5e <__ssvfscanf_r+0x1ea>
   15a90:	7842      	ldrb	r2, [r0, #1]
   15a92:	4608      	mov	r0, r1
   15a94:	e776      	b.n	15984 <__ssvfscanf_r+0x110>
   15a96:	0722      	lsls	r2, r4, #28
   15a98:	d1e1      	bne.n	15a5e <__ssvfscanf_r+0x1ea>
   15a9a:	7842      	ldrb	r2, [r0, #1]
   15a9c:	f044 0402 	orr.w	r4, r4, #2
   15aa0:	4608      	mov	r0, r1
   15aa2:	e76f      	b.n	15984 <__ssvfscanf_r+0x110>
   15aa4:	f044 0401 	orr.w	r4, r4, #1
   15aa8:	64f9      	str	r1, [r7, #76]	; 0x4c
   15aaa:	2502      	movs	r5, #2
   15aac:	f8db 3004 	ldr.w	r3, [fp, #4]
   15ab0:	2b00      	cmp	r3, #0
   15ab2:	f340 8408 	ble.w	162c6 <__ssvfscanf_r+0xa52>
   15ab6:	0660      	lsls	r0, r4, #25
   15ab8:	f140 840f 	bpl.w	162da <__ssvfscanf_r+0xa66>
   15abc:	1e6b      	subs	r3, r5, #1
   15abe:	2b03      	cmp	r3, #3
   15ac0:	f201 80eb 	bhi.w	16c9a <__ssvfscanf_r+0x1426>
   15ac4:	e8df f013 	tbh	[pc, r3, lsl #1]
   15ac8:	01f1027b 	.word	0x01f1027b
   15acc:	0008014b 	.word	0x0008014b
   15ad0:	20008a2c 	.word	0x20008a2c
   15ad4:	20000ed9 	.word	0x20000ed9
   15ad8:	4648      	mov	r0, r9
   15ada:	f001 fc8f 	bl	173fc <_localeconv_r>
   15ade:	6803      	ldr	r3, [r0, #0]
   15ae0:	623b      	str	r3, [r7, #32]
   15ae2:	f108 33ff 	add.w	r3, r8, #4294967295
   15ae6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   15aea:	f240 855a 	bls.w	165a2 <__ssvfscanf_r+0xd2e>
   15aee:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
   15af2:	eb08 0305 	add.w	r3, r8, r5
   15af6:	613b      	str	r3, [r7, #16]
   15af8:	f240 185d 	movw	r8, #349	; 0x15d
   15afc:	2600      	movs	r6, #0
   15afe:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   15b02:	ee08 9a10 	vmov	s16, r9
   15b06:	e9c7 6605 	strd	r6, r6, [r7, #20]
   15b0a:	63fe      	str	r6, [r7, #60]	; 0x3c
   15b0c:	637e      	str	r6, [r7, #52]	; 0x34
   15b0e:	61fe      	str	r6, [r7, #28]
   15b10:	64be      	str	r6, [r7, #72]	; 0x48
   15b12:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   15b16:	62bb      	str	r3, [r7, #40]	; 0x28
   15b18:	461d      	mov	r5, r3
   15b1a:	4646      	mov	r6, r8
   15b1c:	f8db 1000 	ldr.w	r1, [fp]
   15b20:	780a      	ldrb	r2, [r1, #0]
   15b22:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   15b26:	2b4e      	cmp	r3, #78	; 0x4e
   15b28:	d850      	bhi.n	15bcc <__ssvfscanf_r+0x358>
   15b2a:	e8df f013 	tbh	[pc, r3, lsl #1]
   15b2e:	037e      	.short	0x037e
   15b30:	037e004f 	.word	0x037e004f
   15b34:	004f004f 	.word	0x004f004f
   15b38:	00a600a3 	.word	0x00a600a3
   15b3c:	00a600a6 	.word	0x00a600a6
   15b40:	00a600a6 	.word	0x00a600a6
   15b44:	00a600a6 	.word	0x00a600a6
   15b48:	00a600a6 	.word	0x00a600a6
   15b4c:	004f004f 	.word	0x004f004f
   15b50:	004f004f 	.word	0x004f004f
   15b54:	004f004f 	.word	0x004f004f
   15b58:	0374004f 	.word	0x0374004f
   15b5c:	030b030b 	.word	0x030b030b
   15b60:	039e030b 	.word	0x039e030b
   15b64:	004f0394 	.word	0x004f0394
   15b68:	0384004f 	.word	0x0384004f
   15b6c:	004f004f 	.word	0x004f004f
   15b70:	004f004f 	.word	0x004f004f
   15b74:	004f035d 	.word	0x004f035d
   15b78:	004f033a 	.word	0x004f033a
   15b7c:	004f004f 	.word	0x004f004f
   15b80:	004f0333 	.word	0x004f0333
   15b84:	004f004f 	.word	0x004f004f
   15b88:	036d031e 	.word	0x036d031e
   15b8c:	004f004f 	.word	0x004f004f
   15b90:	004f004f 	.word	0x004f004f
   15b94:	004f004f 	.word	0x004f004f
   15b98:	0374004f 	.word	0x0374004f
   15b9c:	030b030b 	.word	0x030b030b
   15ba0:	039e030b 	.word	0x039e030b
   15ba4:	004f0394 	.word	0x004f0394
   15ba8:	0384004f 	.word	0x0384004f
   15bac:	004f004f 	.word	0x004f004f
   15bb0:	004f004f 	.word	0x004f004f
   15bb4:	004f035d 	.word	0x004f035d
   15bb8:	004f033a 	.word	0x004f033a
   15bbc:	004f004f 	.word	0x004f004f
   15bc0:	004f0333 	.word	0x004f0333
   15bc4:	004f004f 	.word	0x004f004f
   15bc8:	036d031e 	.word	0x036d031e
   15bcc:	05a0      	lsls	r0, r4, #22
   15bce:	d56f      	bpl.n	15cb0 <__ssvfscanf_r+0x43c>
   15bd0:	6a38      	ldr	r0, [r7, #32]
   15bd2:	7803      	ldrb	r3, [r0, #0]
   15bd4:	4293      	cmp	r3, r2
   15bd6:	d16b      	bne.n	15cb0 <__ssvfscanf_r+0x43c>
   15bd8:	e9c7 4502 	strd	r4, r5, [r7, #8]
   15bdc:	607e      	str	r6, [r7, #4]
   15bde:	4681      	mov	r9, r0
   15be0:	ee18 6a10 	vmov	r6, s16
   15be4:	f04f 0800 	mov.w	r8, #0
   15be8:	465c      	mov	r4, fp
   15bea:	e007      	b.n	15bfc <__ssvfscanf_r+0x388>
   15bec:	6021      	str	r1, [r4, #0]
   15bee:	f891 e000 	ldrb.w	lr, [r1]
   15bf2:	f899 0000 	ldrb.w	r0, [r9]
   15bf6:	4586      	cmp	lr, r0
   15bf8:	d11c      	bne.n	15c34 <__ssvfscanf_r+0x3c0>
   15bfa:	46da      	mov	sl, fp
   15bfc:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   15c00:	4645      	mov	r5, r8
   15c02:	f10a 0b01 	add.w	fp, sl, #1
   15c06:	3101      	adds	r1, #1
   15c08:	f108 0801 	add.w	r8, r8, #1
   15c0c:	2800      	cmp	r0, #0
   15c0e:	f000 8664 	beq.w	168da <__ssvfscanf_r+0x1066>
   15c12:	6860      	ldr	r0, [r4, #4]
   15c14:	3801      	subs	r0, #1
   15c16:	2800      	cmp	r0, #0
   15c18:	6060      	str	r0, [r4, #4]
   15c1a:	dce7      	bgt.n	15bec <__ssvfscanf_r+0x378>
   15c1c:	4621      	mov	r1, r4
   15c1e:	4630      	mov	r0, r6
   15c20:	f002 ffd2 	bl	18bc8 <__ssrefill_r>
   15c24:	b930      	cbnz	r0, 15c34 <__ssvfscanf_r+0x3c0>
   15c26:	6821      	ldr	r1, [r4, #0]
   15c28:	f899 0000 	ldrb.w	r0, [r9]
   15c2c:	f891 e000 	ldrb.w	lr, [r1]
   15c30:	4586      	cmp	lr, r0
   15c32:	d0e2      	beq.n	15bfa <__ssvfscanf_r+0x386>
   15c34:	46a3      	mov	fp, r4
   15c36:	6a3a      	ldr	r2, [r7, #32]
   15c38:	68bc      	ldr	r4, [r7, #8]
   15c3a:	613d      	str	r5, [r7, #16]
   15c3c:	462b      	mov	r3, r5
   15c3e:	46b1      	mov	r9, r6
   15c40:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   15c42:	68fd      	ldr	r5, [r7, #12]
   15c44:	64bd      	str	r5, [r7, #72]	; 0x48
   15c46:	3301      	adds	r3, #1
   15c48:	465d      	mov	r5, fp
   15c4a:	eb02 0803 	add.w	r8, r2, r3
   15c4e:	46b3      	mov	fp, r6
   15c50:	4626      	mov	r6, r4
   15c52:	4614      	mov	r4, r2
   15c54:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
   15c58:	462a      	mov	r2, r5
   15c5a:	4648      	mov	r0, r9
   15c5c:	f002 ff74 	bl	18b48 <_sungetc_r>
   15c60:	4544      	cmp	r4, r8
   15c62:	d1f7      	bne.n	15c54 <__ssvfscanf_r+0x3e0>
   15c64:	693b      	ldr	r3, [r7, #16]
   15c66:	4634      	mov	r4, r6
   15c68:	ebaa 0a03 	sub.w	sl, sl, r3
   15c6c:	465e      	mov	r6, fp
   15c6e:	46ab      	mov	fp, r5
   15c70:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   15c72:	e020      	b.n	15cb6 <__ssvfscanf_r+0x442>
   15c74:	05e0      	lsls	r0, r4, #23
   15c76:	f100 8501 	bmi.w	1667c <__ssvfscanf_r+0xe08>
   15c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   15c7e:	42d9      	cmn	r1, r3
   15c80:	d116      	bne.n	15cb0 <__ssvfscanf_r+0x43c>
   15c82:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   15c86:	f805 2b01 	strb.w	r2, [r5], #1
   15c8a:	3e01      	subs	r6, #1
   15c8c:	f8db 3004 	ldr.w	r3, [fp, #4]
   15c90:	3b01      	subs	r3, #1
   15c92:	2b00      	cmp	r3, #0
   15c94:	f10a 0a01 	add.w	sl, sl, #1
   15c98:	f8cb 3004 	str.w	r3, [fp, #4]
   15c9c:	f340 836f 	ble.w	1637e <__ssvfscanf_r+0xb0a>
   15ca0:	f8db 3000 	ldr.w	r3, [fp]
   15ca4:	3301      	adds	r3, #1
   15ca6:	f8cb 3000 	str.w	r3, [fp]
   15caa:	2e00      	cmp	r6, #0
   15cac:	f47f af36 	bne.w	15b1c <__ssvfscanf_r+0x2a8>
   15cb0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   15cb2:	ee18 9a10 	vmov	r9, s16
   15cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15cb8:	2b00      	cmp	r3, #0
   15cba:	f040 82dc 	bne.w	16276 <__ssvfscanf_r+0xa02>
   15cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15cc0:	3b01      	subs	r3, #1
   15cc2:	2b01      	cmp	r3, #1
   15cc4:	f241 8016 	bls.w	16cf4 <__ssvfscanf_r+0x1480>
   15cc8:	1e73      	subs	r3, r6, #1
   15cca:	2b06      	cmp	r3, #6
   15ccc:	f240 8627 	bls.w	1691e <__ssvfscanf_r+0x10aa>
   15cd0:	05e3      	lsls	r3, r4, #23
   15cd2:	d51b      	bpl.n	15d0c <__ssvfscanf_r+0x498>
   15cd4:	0566      	lsls	r6, r4, #21
   15cd6:	f101 80b5 	bmi.w	16e44 <__ssvfscanf_r+0x15d0>
   15cda:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   15cde:	2965      	cmp	r1, #101	; 0x65
   15ce0:	f105 33ff 	add.w	r3, r5, #4294967295
   15ce4:	f10a 36ff 	add.w	r6, sl, #4294967295
   15ce8:	d00a      	beq.n	15d00 <__ssvfscanf_r+0x48c>
   15cea:	2945      	cmp	r1, #69	; 0x45
   15cec:	d008      	beq.n	15d00 <__ssvfscanf_r+0x48c>
   15cee:	465a      	mov	r2, fp
   15cf0:	4648      	mov	r0, r9
   15cf2:	f002 ff29 	bl	18b48 <_sungetc_r>
   15cf6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   15cfa:	f1aa 0602 	sub.w	r6, sl, #2
   15cfe:	1eab      	subs	r3, r5, #2
   15d00:	465a      	mov	r2, fp
   15d02:	4648      	mov	r0, r9
   15d04:	46b2      	mov	sl, r6
   15d06:	461d      	mov	r5, r3
   15d08:	f002 ff1e 	bl	18b48 <_sungetc_r>
   15d0c:	f014 0210 	ands.w	r2, r4, #16
   15d10:	f47f add7 	bne.w	158c2 <__ssvfscanf_r+0x4e>
   15d14:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   15d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   15d1c:	702a      	strb	r2, [r5, #0]
   15d1e:	f000 84d2 	beq.w	166c6 <__ssvfscanf_r+0xe52>
   15d22:	69bb      	ldr	r3, [r7, #24]
   15d24:	2b00      	cmp	r3, #0
   15d26:	f040 872c 	bne.w	16b82 <__ssvfscanf_r+0x130e>
   15d2a:	4648      	mov	r0, r9
   15d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15d2e:	2200      	movs	r2, #0
   15d30:	f7fb fcbe 	bl	116b0 <_strtod_r>
   15d34:	07e0      	lsls	r0, r4, #31
   15d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15d38:	f100 85c9 	bmi.w	168ce <__ssvfscanf_r+0x105a>
   15d3c:	07a1      	lsls	r1, r4, #30
   15d3e:	f100 85c6 	bmi.w	168ce <__ssvfscanf_r+0x105a>
   15d42:	eeb4 0b40 	vcmp.f64	d0, d0
   15d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15d4a:	f853 4b04 	ldr.w	r4, [r3], #4
   15d4e:	f180 86f4 	bvs.w	16b3a <__ssvfscanf_r+0x12c6>
   15d52:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   15d56:	633b      	str	r3, [r7, #48]	; 0x30
   15d58:	ed84 0a00 	vstr	s0, [r4]
   15d5c:	e3a2      	b.n	164a4 <__ssvfscanf_r+0xc30>
   15d5e:	f108 33ff 	add.w	r3, r8, #4294967295
   15d62:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   15d66:	f240 83a2 	bls.w	164ae <__ssvfscanf_r+0xc3a>
   15d6a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   15d6e:	eb08 0302 	add.w	r3, r8, r2
   15d72:	63fb      	str	r3, [r7, #60]	; 0x3c
   15d74:	f240 185d 	movw	r8, #349	; 0x15d
   15d78:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   15d7c:	2200      	movs	r2, #0
   15d7e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   15d80:	62bb      	str	r3, [r7, #40]	; 0x28
   15d82:	4659      	mov	r1, fp
   15d84:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   15d88:	46d3      	mov	fp, sl
   15d8a:	461d      	mov	r5, r3
   15d8c:	4692      	mov	sl, r2
   15d8e:	680a      	ldr	r2, [r1, #0]
   15d90:	7810      	ldrb	r0, [r2, #0]
   15d92:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   15d96:	2b4d      	cmp	r3, #77	; 0x4d
   15d98:	d860      	bhi.n	15e5c <__ssvfscanf_r+0x5e8>
   15d9a:	e8df f013 	tbh	[pc, r3, lsl #1]
   15d9e:	0282      	.short	0x0282
   15da0:	0282005f 	.word	0x0282005f
   15da4:	005f005f 	.word	0x005f005f
   15da8:	01e002cd 	.word	0x01e002cd
   15dac:	01e001e0 	.word	0x01e001e0
   15db0:	01e001e0 	.word	0x01e001e0
   15db4:	01e001e0 	.word	0x01e001e0
   15db8:	026f026f 	.word	0x026f026f
   15dbc:	005f005f 	.word	0x005f005f
   15dc0:	005f005f 	.word	0x005f005f
   15dc4:	005f005f 	.word	0x005f005f
   15dc8:	004e005f 	.word	0x004e005f
   15dcc:	004e004e 	.word	0x004e004e
   15dd0:	004e004e 	.word	0x004e004e
   15dd4:	005f004e 	.word	0x005f004e
   15dd8:	005f005f 	.word	0x005f005f
   15ddc:	005f005f 	.word	0x005f005f
   15de0:	005f005f 	.word	0x005f005f
   15de4:	005f005f 	.word	0x005f005f
   15de8:	005f005f 	.word	0x005f005f
   15dec:	005f005f 	.word	0x005f005f
   15df0:	005f005f 	.word	0x005f005f
   15df4:	005f005f 	.word	0x005f005f
   15df8:	005f0276 	.word	0x005f0276
   15dfc:	005f005f 	.word	0x005f005f
   15e00:	005f005f 	.word	0x005f005f
   15e04:	005f005f 	.word	0x005f005f
   15e08:	004e005f 	.word	0x004e005f
   15e0c:	004e004e 	.word	0x004e004e
   15e10:	004e004e 	.word	0x004e004e
   15e14:	005f004e 	.word	0x005f004e
   15e18:	005f005f 	.word	0x005f005f
   15e1c:	005f005f 	.word	0x005f005f
   15e20:	005f005f 	.word	0x005f005f
   15e24:	005f005f 	.word	0x005f005f
   15e28:	005f005f 	.word	0x005f005f
   15e2c:	005f005f 	.word	0x005f005f
   15e30:	005f005f 	.word	0x005f005f
   15e34:	005f005f 	.word	0x005f005f
   15e38:	0276      	.short	0x0276
   15e3a:	2e0a      	cmp	r6, #10
   15e3c:	dd0e      	ble.n	15e5c <__ssvfscanf_r+0x5e8>
   15e3e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   15e42:	684b      	ldr	r3, [r1, #4]
   15e44:	f805 0b01 	strb.w	r0, [r5], #1
   15e48:	3b01      	subs	r3, #1
   15e4a:	2b00      	cmp	r3, #0
   15e4c:	604b      	str	r3, [r1, #4]
   15e4e:	f340 828d 	ble.w	1636c <__ssvfscanf_r+0xaf8>
   15e52:	3201      	adds	r2, #1
   15e54:	600a      	str	r2, [r1, #0]
   15e56:	f1b8 0801 	subs.w	r8, r8, #1
   15e5a:	d198      	bne.n	15d8e <__ssvfscanf_r+0x51a>
   15e5c:	05e0      	lsls	r0, r4, #23
   15e5e:	46d0      	mov	r8, sl
   15e60:	63be      	str	r6, [r7, #56]	; 0x38
   15e62:	46da      	mov	sl, fp
   15e64:	468b      	mov	fp, r1
   15e66:	d507      	bpl.n	15e78 <__ssvfscanf_r+0x604>
   15e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15e6a:	429d      	cmp	r5, r3
   15e6c:	f200 8422 	bhi.w	166b4 <__ssvfscanf_r+0xe40>
   15e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15e72:	429d      	cmp	r5, r3
   15e74:	f43f adf3 	beq.w	15a5e <__ssvfscanf_r+0x1ea>
   15e78:	f014 0210 	ands.w	r2, r4, #16
   15e7c:	d110      	bne.n	15ea0 <__ssvfscanf_r+0x62c>
   15e7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15e82:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   15e84:	702a      	strb	r2, [r5, #0]
   15e86:	4648      	mov	r0, r9
   15e88:	47b0      	blx	r6
   15e8a:	06a1      	lsls	r1, r4, #26
   15e8c:	f140 8408 	bpl.w	166a0 <__ssvfscanf_r+0xe2c>
   15e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15e92:	f853 2b04 	ldr.w	r2, [r3], #4
   15e96:	6010      	str	r0, [r2, #0]
   15e98:	633b      	str	r3, [r7, #48]	; 0x30
   15e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15e9c:	3301      	adds	r3, #1
   15e9e:	647b      	str	r3, [r7, #68]	; 0x44
   15ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15ea2:	1aed      	subs	r5, r5, r3
   15ea4:	4445      	add	r5, r8
   15ea6:	44aa      	add	sl, r5
   15ea8:	e50b      	b.n	158c2 <__ssvfscanf_r+0x4e>
   15eaa:	f1b8 0f00 	cmp.w	r8, #0
   15eae:	bf08      	it	eq
   15eb0:	f04f 38ff 	moveq.w	r8, #4294967295
   15eb4:	07e0      	lsls	r0, r4, #31
   15eb6:	f140 8295 	bpl.w	163e4 <__ssvfscanf_r+0xb70>
   15eba:	f014 0310 	ands.w	r3, r4, #16
   15ebe:	637b      	str	r3, [r7, #52]	; 0x34
   15ec0:	f040 8474 	bne.w	167ac <__ssvfscanf_r+0xf38>
   15ec4:	0621      	lsls	r1, r4, #24
   15ec6:	f140 8666 	bpl.w	16b96 <__ssvfscanf_r+0x1322>
   15eca:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15ecc:	f854 3b04 	ldr.w	r3, [r4], #4
   15ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   15ed2:	2b00      	cmp	r3, #0
   15ed4:	f43f adc3 	beq.w	15a5e <__ssvfscanf_r+0x1ea>
   15ed8:	2080      	movs	r0, #128	; 0x80
   15eda:	f7f9 ffed 	bl	feb8 <malloc>
   15ede:	64b8      	str	r0, [r7, #72]	; 0x48
   15ee0:	2800      	cmp	r0, #0
   15ee2:	f000 8778 	beq.w	16dd6 <__ssvfscanf_r+0x1562>
   15ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   15eea:	601a      	str	r2, [r3, #0]
   15eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15eee:	88d5      	ldrh	r5, [r2, #6]
   15ef0:	8893      	ldrh	r3, [r2, #4]
   15ef2:	429d      	cmp	r5, r3
   15ef4:	f080 8552 	bcs.w	1699c <__ssvfscanf_r+0x1128>
   15ef8:	6810      	ldr	r0, [r2, #0]
   15efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15efc:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   15f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15f02:	633c      	str	r4, [r7, #48]	; 0x30
   15f04:	3501      	adds	r5, #1
   15f06:	80dd      	strh	r5, [r3, #6]
   15f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   15f0c:	2320      	movs	r3, #32
   15f0e:	623b      	str	r3, [r7, #32]
   15f10:	f8db 3000 	ldr.w	r3, [fp]
   15f14:	4eb1      	ldr	r6, [pc, #708]	; (161dc <__ssvfscanf_r+0x968>)
   15f16:	781b      	ldrb	r3, [r3, #0]
   15f18:	5cf3      	ldrb	r3, [r6, r3]
   15f1a:	f013 0308 	ands.w	r3, r3, #8
   15f1e:	f040 84bb 	bne.w	16898 <__ssvfscanf_r+0x1024>
   15f22:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   15f24:	627e      	str	r6, [r7, #36]	; 0x24
   15f26:	461d      	mov	r5, r3
   15f28:	f7fc f866 	bl	11ff8 <__locale_mb_cur_max>
   15f2c:	42a8      	cmp	r0, r5
   15f2e:	f43f ad8d 	beq.w	15a4c <__ssvfscanf_r+0x1d8>
   15f32:	e9db 3200 	ldrd	r3, r2, [fp]
   15f36:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   15f3a:	f813 1b01 	ldrb.w	r1, [r3], #1
   15f3e:	5541      	strb	r1, [r0, r5]
   15f40:	3a01      	subs	r2, #1
   15f42:	2c03      	cmp	r4, #3
   15f44:	e9cb 3200 	strd	r3, r2, [fp]
   15f48:	f105 0501 	add.w	r5, r5, #1
   15f4c:	f107 0668 	add.w	r6, r7, #104	; 0x68
   15f50:	d102      	bne.n	15f58 <__ssvfscanf_r+0x6e4>
   15f52:	6833      	ldr	r3, [r6, #0]
   15f54:	2b04      	cmp	r3, #4
   15f56:	d004      	beq.n	15f62 <__ssvfscanf_r+0x6ee>
   15f58:	2208      	movs	r2, #8
   15f5a:	2100      	movs	r1, #0
   15f5c:	4630      	mov	r0, r6
   15f5e:	f7fb ff2b 	bl	11db8 <memset>
   15f62:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   15f66:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   15f68:	9600      	str	r6, [sp, #0]
   15f6a:	462b      	mov	r3, r5
   15f6c:	4648      	mov	r0, r9
   15f6e:	f002 fc17 	bl	187a0 <_mbrtowc_r>
   15f72:	1c42      	adds	r2, r0, #1
   15f74:	4604      	mov	r4, r0
   15f76:	f43f ad69 	beq.w	15a4c <__ssvfscanf_r+0x1d8>
   15f7a:	2800      	cmp	r0, #0
   15f7c:	f040 8478 	bne.w	16870 <__ssvfscanf_r+0xffc>
   15f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15f82:	6018      	str	r0, [r3, #0]
   15f84:	f002 fc68 	bl	18858 <iswspace>
   15f88:	2800      	cmp	r0, #0
   15f8a:	f040 865c 	bne.w	16c46 <__ssvfscanf_r+0x13d2>
   15f8e:	44aa      	add	sl, r5
   15f90:	f108 38ff 	add.w	r8, r8, #4294967295
   15f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15f96:	2b00      	cmp	r3, #0
   15f98:	f040 8633 	bne.w	16c02 <__ssvfscanf_r+0x138e>
   15f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15f9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15fa0:	3304      	adds	r3, #4
   15fa2:	64bb      	str	r3, [r7, #72]	; 0x48
   15fa4:	2a00      	cmp	r2, #0
   15fa6:	f000 862c 	beq.w	16c02 <__ssvfscanf_r+0x138e>
   15faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15fac:	1a9d      	subs	r5, r3, r2
   15fae:	6a3b      	ldr	r3, [r7, #32]
   15fb0:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   15fb4:	f240 8756 	bls.w	16e64 <__ssvfscanf_r+0x15f0>
   15fb8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   15fba:	f000 bc5c 	b.w	16876 <__ssvfscanf_r+0x1002>
   15fbe:	f1b8 0f00 	cmp.w	r8, #0
   15fc2:	bf08      	it	eq
   15fc4:	f04f 38ff 	moveq.w	r8, #4294967295
   15fc8:	07e0      	lsls	r0, r4, #31
   15fca:	f140 827b 	bpl.w	164c4 <__ssvfscanf_r+0xc50>
   15fce:	f014 0310 	ands.w	r3, r4, #16
   15fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   15fd4:	f040 83f3 	bne.w	167be <__ssvfscanf_r+0xf4a>
   15fd8:	0621      	lsls	r1, r4, #24
   15fda:	f140 85ed 	bpl.w	16bb8 <__ssvfscanf_r+0x1344>
   15fde:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   15fe0:	f856 3b04 	ldr.w	r3, [r6], #4
   15fe4:	623b      	str	r3, [r7, #32]
   15fe6:	2b00      	cmp	r3, #0
   15fe8:	f43f ad39 	beq.w	15a5e <__ssvfscanf_r+0x1ea>
   15fec:	2080      	movs	r0, #128	; 0x80
   15fee:	f7f9 ff63 	bl	feb8 <malloc>
   15ff2:	4604      	mov	r4, r0
   15ff4:	2800      	cmp	r0, #0
   15ff6:	f000 86ee 	beq.w	16dd6 <__ssvfscanf_r+0x1562>
   15ffa:	6a3b      	ldr	r3, [r7, #32]
   15ffc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15ffe:	6018      	str	r0, [r3, #0]
   16000:	88d5      	ldrh	r5, [r2, #6]
   16002:	8893      	ldrh	r3, [r2, #4]
   16004:	429d      	cmp	r5, r3
   16006:	f080 84dd 	bcs.w	169c4 <__ssvfscanf_r+0x1150>
   1600a:	6810      	ldr	r0, [r2, #0]
   1600c:	6a3b      	ldr	r3, [r7, #32]
   1600e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   16012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16014:	633e      	str	r6, [r7, #48]	; 0x30
   16016:	3501      	adds	r5, #1
   16018:	80dd      	strh	r5, [r3, #6]
   1601a:	2320      	movs	r3, #32
   1601c:	61fc      	str	r4, [r7, #28]
   1601e:	61bb      	str	r3, [r7, #24]
   16020:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   16022:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   16026:	2500      	movs	r5, #0
   16028:	46c2      	mov	sl, r8
   1602a:	46a0      	mov	r8, r4
   1602c:	f7fb ffe4 	bl	11ff8 <__locale_mb_cur_max>
   16030:	42a8      	cmp	r0, r5
   16032:	f43f ad0b 	beq.w	15a4c <__ssvfscanf_r+0x1d8>
   16036:	e9db 3200 	ldrd	r3, r2, [fp]
   1603a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1603e:	3a01      	subs	r2, #1
   16040:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   16044:	e9cb 3200 	strd	r3, r2, [fp]
   16048:	2e03      	cmp	r6, #3
   1604a:	f105 0301 	add.w	r3, r5, #1
   1604e:	5541      	strb	r1, [r0, r5]
   16050:	64bb      	str	r3, [r7, #72]	; 0x48
   16052:	f107 0460 	add.w	r4, r7, #96	; 0x60
   16056:	d102      	bne.n	1605e <__ssvfscanf_r+0x7ea>
   16058:	6823      	ldr	r3, [r4, #0]
   1605a:	2b04      	cmp	r3, #4
   1605c:	d004      	beq.n	16068 <__ssvfscanf_r+0x7f4>
   1605e:	2208      	movs	r2, #8
   16060:	2100      	movs	r1, #0
   16062:	4620      	mov	r0, r4
   16064:	f7fb fea8 	bl	11db8 <memset>
   16068:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   1606c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1606e:	9400      	str	r4, [sp, #0]
   16070:	4641      	mov	r1, r8
   16072:	4648      	mov	r0, r9
   16074:	f002 fb94 	bl	187a0 <_mbrtowc_r>
   16078:	1c42      	adds	r2, r0, #1
   1607a:	4606      	mov	r6, r0
   1607c:	f43f ace6 	beq.w	15a4c <__ssvfscanf_r+0x1d8>
   16080:	2800      	cmp	r0, #0
   16082:	f040 82ca 	bne.w	1661a <__ssvfscanf_r+0xda6>
   16086:	f8c8 0000 	str.w	r0, [r8]
   1608a:	4605      	mov	r5, r0
   1608c:	f107 0368 	add.w	r3, r7, #104	; 0x68
   16090:	2208      	movs	r2, #8
   16092:	2100      	movs	r1, #0
   16094:	4618      	mov	r0, r3
   16096:	637b      	str	r3, [r7, #52]	; 0x34
   16098:	f7fb fe8e 	bl	11db8 <memset>
   1609c:	4950      	ldr	r1, [pc, #320]	; (161e0 <__ssvfscanf_r+0x96c>)
   1609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   160a0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
   160a4:	462a      	mov	r2, r5
   160a6:	4648      	mov	r0, r9
   160a8:	460d      	mov	r5, r1
   160aa:	f107 0150 	add.w	r1, r7, #80	; 0x50
   160ae:	47a8      	blx	r5
   160b0:	2801      	cmp	r0, #1
   160b2:	f000 83d5 	beq.w	16860 <__ssvfscanf_r+0xfec>
   160b6:	2200      	movs	r2, #0
   160b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
   160bc:	5c9b      	ldrb	r3, [r3, r2]
   160be:	2b00      	cmp	r3, #0
   160c0:	f000 85a1 	beq.w	16c06 <__ssvfscanf_r+0x1392>
   160c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   160c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   160c8:	2e03      	cmp	r6, #3
   160ca:	4413      	add	r3, r2
   160cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   160ce:	f000 83ca 	beq.w	16866 <__ssvfscanf_r+0xff2>
   160d2:	f10a 3aff 	add.w	sl, sl, #4294967295
   160d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   160d8:	b95b      	cbnz	r3, 160f2 <__ssvfscanf_r+0x87e>
   160da:	6a3b      	ldr	r3, [r7, #32]
   160dc:	f108 0804 	add.w	r8, r8, #4
   160e0:	b13b      	cbz	r3, 160f2 <__ssvfscanf_r+0x87e>
   160e2:	69fb      	ldr	r3, [r7, #28]
   160e4:	eba8 0403 	sub.w	r4, r8, r3
   160e8:	69bb      	ldr	r3, [r7, #24]
   160ea:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   160ee:	f240 8405 	bls.w	168fc <__ssvfscanf_r+0x1088>
   160f2:	f8db 3004 	ldr.w	r3, [fp, #4]
   160f6:	2b00      	cmp	r3, #0
   160f8:	f04f 0500 	mov.w	r5, #0
   160fc:	f340 8296 	ble.w	1662c <__ssvfscanf_r+0xdb8>
   16100:	f1ba 0f00 	cmp.w	sl, #0
   16104:	d192      	bne.n	1602c <__ssvfscanf_r+0x7b8>
   16106:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1610a:	627e      	str	r6, [r7, #36]	; 0x24
   1610c:	4644      	mov	r4, r8
   1610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16110:	2b00      	cmp	r3, #0
   16112:	f47f abd6 	bne.w	158c2 <__ssvfscanf_r+0x4e>
   16116:	6023      	str	r3, [r4, #0]
   16118:	6a3b      	ldr	r3, [r7, #32]
   1611a:	2b00      	cmp	r3, #0
   1611c:	f000 81c2 	beq.w	164a4 <__ssvfscanf_r+0xc30>
   16120:	69fb      	ldr	r3, [r7, #28]
   16122:	69ba      	ldr	r2, [r7, #24]
   16124:	1ae1      	subs	r1, r4, r3
   16126:	108b      	asrs	r3, r1, #2
   16128:	3301      	adds	r3, #1
   1612a:	429a      	cmp	r2, r3
   1612c:	f240 81ba 	bls.w	164a4 <__ssvfscanf_r+0xc30>
   16130:	6a3c      	ldr	r4, [r7, #32]
   16132:	3104      	adds	r1, #4
   16134:	6820      	ldr	r0, [r4, #0]
   16136:	f7fa f98b 	bl	10450 <realloc>
   1613a:	2800      	cmp	r0, #0
   1613c:	f000 81b2 	beq.w	164a4 <__ssvfscanf_r+0xc30>
   16140:	6020      	str	r0, [r4, #0]
   16142:	e1af      	b.n	164a4 <__ssvfscanf_r+0xc30>
   16144:	0521      	lsls	r1, r4, #20
   16146:	f57f adb3 	bpl.w	15cb0 <__ssvfscanf_r+0x43c>
   1614a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1614c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1614e:	185b      	adds	r3, r3, r1
   16150:	f47f adae 	bne.w	15cb0 <__ssvfscanf_r+0x43c>
   16154:	64bb      	str	r3, [r7, #72]	; 0x48
   16156:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   1615a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1615c:	e593      	b.n	15c86 <__ssvfscanf_r+0x412>
   1615e:	4b21      	ldr	r3, [pc, #132]	; (161e4 <__ssvfscanf_r+0x970>)
   16160:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   16164:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   16168:	e66b      	b.n	15e42 <__ssvfscanf_r+0x5ce>
   1616a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
   1616e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   16172:	f47f ad9d 	bne.w	15cb0 <__ssvfscanf_r+0x43c>
   16176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16178:	2b01      	cmp	r3, #1
   1617a:	f47f ad99 	bne.w	15cb0 <__ssvfscanf_r+0x43c>
   1617e:	2330      	movs	r3, #48	; 0x30
   16180:	f805 3b01 	strb.w	r3, [r5], #1
   16184:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   16188:	2300      	movs	r3, #0
   1618a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   1618e:	3e01      	subs	r6, #1
   16190:	637b      	str	r3, [r7, #52]	; 0x34
   16192:	e578      	b.n	15c86 <__ssvfscanf_r+0x412>
   16194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16196:	2b06      	cmp	r3, #6
   16198:	f040 8574 	bne.w	16c84 <__ssvfscanf_r+0x1410>
   1619c:	2307      	movs	r3, #7
   1619e:	64bb      	str	r3, [r7, #72]	; 0x48
   161a0:	e571      	b.n	15c86 <__ssvfscanf_r+0x412>
   161a2:	0523      	lsls	r3, r4, #20
   161a4:	f57f ad84 	bpl.w	15cb0 <__ssvfscanf_r+0x43c>
   161a8:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
   161ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   161b0:	d005      	beq.n	161be <__ssvfscanf_r+0x94a>
   161b2:	0561      	lsls	r1, r4, #21
   161b4:	f57f ad7c 	bpl.w	15cb0 <__ssvfscanf_r+0x43c>
   161b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   161ba:	2b00      	cmp	r3, #0
   161bc:	d047      	beq.n	1624e <__ssvfscanf_r+0x9da>
   161be:	05a3      	lsls	r3, r4, #22
   161c0:	d404      	bmi.n	161cc <__ssvfscanf_r+0x958>
   161c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   161c4:	69f9      	ldr	r1, [r7, #28]
   161c6:	1a5b      	subs	r3, r3, r1
   161c8:	e9c7 5305 	strd	r5, r3, [r7, #20]
   161cc:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
   161d0:	2300      	movs	r3, #0
   161d2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
   161d6:	637b      	str	r3, [r7, #52]	; 0x34
   161d8:	e555      	b.n	15c86 <__ssvfscanf_r+0x412>
   161da:	bf00      	nop
   161dc:	20000ed9 	.word	0x20000ed9
   161e0:	20008a2c 	.word	0x20008a2c
   161e4:	20002af8 	.word	0x20002af8
   161e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   161ea:	2b00      	cmp	r3, #0
   161ec:	f000 81ff 	beq.w	165ee <__ssvfscanf_r+0xd7a>
   161f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   161f2:	2b02      	cmp	r3, #2
   161f4:	f000 83b0 	beq.w	16958 <__ssvfscanf_r+0x10e4>
   161f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   161fa:	2b01      	cmp	r3, #1
   161fc:	f000 81f1 	beq.w	165e2 <__ssvfscanf_r+0xd6e>
   16200:	2b04      	cmp	r3, #4
   16202:	f000 81ee 	beq.w	165e2 <__ssvfscanf_r+0xd6e>
   16206:	e553      	b.n	15cb0 <__ssvfscanf_r+0x43c>
   16208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1620a:	2b07      	cmp	r3, #7
   1620c:	f040 853a 	bne.w	16c84 <__ssvfscanf_r+0x1410>
   16210:	2308      	movs	r3, #8
   16212:	64bb      	str	r3, [r7, #72]	; 0x48
   16214:	e537      	b.n	15c86 <__ssvfscanf_r+0x412>
   16216:	0520      	lsls	r0, r4, #20
   16218:	f100 81f9 	bmi.w	1660e <__ssvfscanf_r+0xd9a>
   1621c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1621e:	2b01      	cmp	r3, #1
   16220:	f47f ad46 	bne.w	15cb0 <__ssvfscanf_r+0x43c>
   16224:	2302      	movs	r3, #2
   16226:	63fb      	str	r3, [r7, #60]	; 0x3c
   16228:	e52d      	b.n	15c86 <__ssvfscanf_r+0x412>
   1622a:	0623      	lsls	r3, r4, #24
   1622c:	f57f ad40 	bpl.w	15cb0 <__ssvfscanf_r+0x43c>
   16230:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   16234:	e527      	b.n	15c86 <__ssvfscanf_r+0x412>
   16236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16238:	2b00      	cmp	r3, #0
   1623a:	f040 81cc 	bne.w	165d6 <__ssvfscanf_r+0xd62>
   1623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16240:	b9b3      	cbnz	r3, 16270 <__ssvfscanf_r+0x9fc>
   16242:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   16246:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1624a:	f000 8520 	beq.w	16c8e <__ssvfscanf_r+0x141a>
   1624e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   16250:	ee18 9a10 	vmov	r9, s16
   16254:	e533      	b.n	15cbe <__ssvfscanf_r+0x44a>
   16256:	0521      	lsls	r1, r4, #20
   16258:	f100 81b7 	bmi.w	165ca <__ssvfscanf_r+0xd56>
   1625c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1625e:	2b02      	cmp	r3, #2
   16260:	f040 8510 	bne.w	16c84 <__ssvfscanf_r+0x1410>
   16264:	2303      	movs	r3, #3
   16266:	64bb      	str	r3, [r7, #72]	; 0x48
   16268:	e50d      	b.n	15c86 <__ssvfscanf_r+0x412>
   1626a:	0520      	lsls	r0, r4, #20
   1626c:	d59c      	bpl.n	161a8 <__ssvfscanf_r+0x934>
   1626e:	e76c      	b.n	1614a <__ssvfscanf_r+0x8d6>
   16270:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   16272:	ee18 9a10 	vmov	r9, s16
   16276:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   1627a:	e520      	b.n	15cbe <__ssvfscanf_r+0x44a>
   1627c:	4b8d      	ldr	r3, [pc, #564]	; (164b4 <__ssvfscanf_r+0xc40>)
   1627e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   16282:	2e08      	cmp	r6, #8
   16284:	f73f addb 	bgt.w	15e3e <__ssvfscanf_r+0x5ca>
   16288:	e5e8      	b.n	15e5c <__ssvfscanf_r+0x5e8>
   1628a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   1628e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16292:	f47f ade3 	bne.w	15e5c <__ssvfscanf_r+0x5e8>
   16296:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   1629a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   1629e:	2610      	movs	r6, #16
   162a0:	e5cf      	b.n	15e42 <__ssvfscanf_r+0x5ce>
   162a2:	0623      	lsls	r3, r4, #24
   162a4:	f57f adda 	bpl.w	15e5c <__ssvfscanf_r+0x5e8>
   162a8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   162ac:	e5c9      	b.n	15e42 <__ssvfscanf_r+0x5ce>
   162ae:	f044 0401 	orr.w	r4, r4, #1
   162b2:	f8db 3004 	ldr.w	r3, [fp, #4]
   162b6:	64f9      	str	r1, [r7, #76]	; 0x4c
   162b8:	2b00      	cmp	r3, #0
   162ba:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   162be:	f04f 0500 	mov.w	r5, #0
   162c2:	f73f abf8 	bgt.w	15ab6 <__ssvfscanf_r+0x242>
   162c6:	4659      	mov	r1, fp
   162c8:	4648      	mov	r0, r9
   162ca:	f002 fc7d 	bl	18bc8 <__ssrefill_r>
   162ce:	2800      	cmp	r0, #0
   162d0:	f47f abbc 	bne.w	15a4c <__ssvfscanf_r+0x1d8>
   162d4:	0660      	lsls	r0, r4, #25
   162d6:	f53f abf1 	bmi.w	15abc <__ssvfscanf_r+0x248>
   162da:	f8db 2000 	ldr.w	r2, [fp]
   162de:	4e76      	ldr	r6, [pc, #472]	; (164b8 <__ssvfscanf_r+0xc44>)
   162e0:	7813      	ldrb	r3, [r2, #0]
   162e2:	5cf3      	ldrb	r3, [r6, r3]
   162e4:	0719      	lsls	r1, r3, #28
   162e6:	f57f abe9 	bpl.w	15abc <__ssvfscanf_r+0x248>
   162ea:	f8db 3004 	ldr.w	r3, [fp, #4]
   162ee:	3b01      	subs	r3, #1
   162f0:	2b00      	cmp	r3, #0
   162f2:	f10a 0a01 	add.w	sl, sl, #1
   162f6:	f8cb 3004 	str.w	r3, [fp, #4]
   162fa:	f102 0201 	add.w	r2, r2, #1
   162fe:	dd4a      	ble.n	16396 <__ssvfscanf_r+0xb22>
   16300:	f8cb 2000 	str.w	r2, [fp]
   16304:	7813      	ldrb	r3, [r2, #0]
   16306:	5cf3      	ldrb	r3, [r6, r3]
   16308:	0719      	lsls	r1, r3, #28
   1630a:	f57f abd7 	bpl.w	15abc <__ssvfscanf_r+0x248>
   1630e:	e7ec      	b.n	162ea <__ssvfscanf_r+0xa76>
   16310:	f044 0401 	orr.w	r4, r4, #1
   16314:	4b69      	ldr	r3, [pc, #420]	; (164bc <__ssvfscanf_r+0xc48>)
   16316:	62fb      	str	r3, [r7, #44]	; 0x2c
   16318:	2308      	movs	r3, #8
   1631a:	64f9      	str	r1, [r7, #76]	; 0x4c
   1631c:	63bb      	str	r3, [r7, #56]	; 0x38
   1631e:	2503      	movs	r5, #3
   16320:	f7ff bbc4 	b.w	15aac <__ssvfscanf_r+0x238>
   16324:	f044 0401 	orr.w	r4, r4, #1
   16328:	4b65      	ldr	r3, [pc, #404]	; (164c0 <__ssvfscanf_r+0xc4c>)
   1632a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1632c:	230a      	movs	r3, #10
   1632e:	64f9      	str	r1, [r7, #76]	; 0x4c
   16330:	63bb      	str	r3, [r7, #56]	; 0x38
   16332:	2503      	movs	r5, #3
   16334:	f7ff bbba 	b.w	15aac <__ssvfscanf_r+0x238>
   16338:	0523      	lsls	r3, r4, #20
   1633a:	f57f ad82 	bpl.w	15e42 <__ssvfscanf_r+0x5ce>
   1633e:	b916      	cbnz	r6, 16346 <__ssvfscanf_r+0xad2>
   16340:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   16344:	2608      	movs	r6, #8
   16346:	0563      	lsls	r3, r4, #21
   16348:	f100 81a6 	bmi.w	16698 <__ssvfscanf_r+0xe24>
   1634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1634e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   16352:	b11b      	cbz	r3, 1635c <__ssvfscanf_r+0xae8>
   16354:	3b01      	subs	r3, #1
   16356:	63fb      	str	r3, [r7, #60]	; 0x3c
   16358:	f108 0801 	add.w	r8, r8, #1
   1635c:	684b      	ldr	r3, [r1, #4]
   1635e:	3b01      	subs	r3, #1
   16360:	2b00      	cmp	r3, #0
   16362:	f10a 0a01 	add.w	sl, sl, #1
   16366:	604b      	str	r3, [r1, #4]
   16368:	f73f ad73 	bgt.w	15e52 <__ssvfscanf_r+0x5de>
   1636c:	4648      	mov	r0, r9
   1636e:	64b9      	str	r1, [r7, #72]	; 0x48
   16370:	f002 fc2a 	bl	18bc8 <__ssrefill_r>
   16374:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16376:	2800      	cmp	r0, #0
   16378:	f43f ad6d 	beq.w	15e56 <__ssvfscanf_r+0x5e2>
   1637c:	e56e      	b.n	15e5c <__ssvfscanf_r+0x5e8>
   1637e:	ee18 0a10 	vmov	r0, s16
   16382:	4659      	mov	r1, fp
   16384:	f002 fc20 	bl	18bc8 <__ssrefill_r>
   16388:	2800      	cmp	r0, #0
   1638a:	f47f ac91 	bne.w	15cb0 <__ssvfscanf_r+0x43c>
   1638e:	2e00      	cmp	r6, #0
   16390:	f47f abc4 	bne.w	15b1c <__ssvfscanf_r+0x2a8>
   16394:	e48c      	b.n	15cb0 <__ssvfscanf_r+0x43c>
   16396:	4659      	mov	r1, fp
   16398:	4648      	mov	r0, r9
   1639a:	f002 fc15 	bl	18bc8 <__ssrefill_r>
   1639e:	2800      	cmp	r0, #0
   163a0:	f47f ab54 	bne.w	15a4c <__ssvfscanf_r+0x1d8>
   163a4:	f8db 2000 	ldr.w	r2, [fp]
   163a8:	e79a      	b.n	162e0 <__ssvfscanf_r+0xa6c>
   163aa:	f8db 2004 	ldr.w	r2, [fp, #4]
   163ae:	e00f      	b.n	163d0 <__ssvfscanf_r+0xb5c>
   163b0:	f8db 3000 	ldr.w	r3, [fp]
   163b4:	781a      	ldrb	r2, [r3, #0]
   163b6:	5cb2      	ldrb	r2, [r6, r2]
   163b8:	0711      	lsls	r1, r2, #28
   163ba:	f103 0301 	add.w	r3, r3, #1
   163be:	f57f aa80 	bpl.w	158c2 <__ssvfscanf_r+0x4e>
   163c2:	f8db 2004 	ldr.w	r2, [fp, #4]
   163c6:	3a01      	subs	r2, #1
   163c8:	e9cb 3200 	strd	r3, r2, [fp]
   163cc:	f10a 0a01 	add.w	sl, sl, #1
   163d0:	2a00      	cmp	r2, #0
   163d2:	dced      	bgt.n	163b0 <__ssvfscanf_r+0xb3c>
   163d4:	4659      	mov	r1, fp
   163d6:	4648      	mov	r0, r9
   163d8:	f002 fbf6 	bl	18bc8 <__ssrefill_r>
   163dc:	2800      	cmp	r0, #0
   163de:	d0e7      	beq.n	163b0 <__ssvfscanf_r+0xb3c>
   163e0:	f7ff ba6f 	b.w	158c2 <__ssvfscanf_r+0x4e>
   163e4:	06e1      	lsls	r1, r4, #27
   163e6:	f100 8349 	bmi.w	16a7c <__ssvfscanf_r+0x1208>
   163ea:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   163ee:	f000 83ab 	beq.w	16b48 <__ssvfscanf_r+0x12d4>
   163f2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   163f4:	f854 6b04 	ldr.w	r6, [r4], #4
   163f8:	64be      	str	r6, [r7, #72]	; 0x48
   163fa:	2e00      	cmp	r6, #0
   163fc:	f43f ab2f 	beq.w	15a5e <__ssvfscanf_r+0x1ea>
   16400:	2020      	movs	r0, #32
   16402:	f7f9 fd59 	bl	feb8 <malloc>
   16406:	4605      	mov	r5, r0
   16408:	2800      	cmp	r0, #0
   1640a:	f000 8462 	beq.w	16cd2 <__ssvfscanf_r+0x145e>
   1640e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16410:	6030      	str	r0, [r6, #0]
   16412:	8893      	ldrh	r3, [r2, #4]
   16414:	88d6      	ldrh	r6, [r2, #6]
   16416:	429e      	cmp	r6, r3
   16418:	f080 82a8 	bcs.w	1696c <__ssvfscanf_r+0x10f8>
   1641c:	6810      	ldr	r0, [r2, #0]
   1641e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16420:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   16424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16426:	633c      	str	r4, [r7, #48]	; 0x30
   16428:	3601      	adds	r6, #1
   1642a:	80de      	strh	r6, [r3, #6]
   1642c:	2320      	movs	r3, #32
   1642e:	63fb      	str	r3, [r7, #60]	; 0x3c
   16430:	f8db 2000 	ldr.w	r2, [fp]
   16434:	4e20      	ldr	r6, [pc, #128]	; (164b8 <__ssvfscanf_r+0xc44>)
   16436:	7811      	ldrb	r1, [r2, #0]
   16438:	5c71      	ldrb	r1, [r6, r1]
   1643a:	0708      	lsls	r0, r1, #28
   1643c:	f100 82ac 	bmi.w	16998 <__ssvfscanf_r+0x1124>
   16440:	4633      	mov	r3, r6
   16442:	462c      	mov	r4, r5
   16444:	4610      	mov	r0, r2
   16446:	462e      	mov	r6, r5
   16448:	f8db 1004 	ldr.w	r1, [fp, #4]
   1644c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1644e:	3901      	subs	r1, #1
   16450:	f8cb 1004 	str.w	r1, [fp, #4]
   16454:	1c41      	adds	r1, r0, #1
   16456:	f8cb 1000 	str.w	r1, [fp]
   1645a:	4635      	mov	r5, r6
   1645c:	7801      	ldrb	r1, [r0, #0]
   1645e:	f805 1b01 	strb.w	r1, [r5], #1
   16462:	b122      	cbz	r2, 1646e <__ssvfscanf_r+0xbfa>
   16464:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16466:	1b2e      	subs	r6, r5, r4
   16468:	4296      	cmp	r6, r2
   1646a:	f080 837a 	bcs.w	16b62 <__ssvfscanf_r+0x12ee>
   1646e:	f1b8 0801 	subs.w	r8, r8, #1
   16472:	d00b      	beq.n	1648c <__ssvfscanf_r+0xc18>
   16474:	f8db 1004 	ldr.w	r1, [fp, #4]
   16478:	2900      	cmp	r1, #0
   1647a:	462e      	mov	r6, r5
   1647c:	f340 83ae 	ble.w	16bdc <__ssvfscanf_r+0x1368>
   16480:	f8db 0000 	ldr.w	r0, [fp]
   16484:	7801      	ldrb	r1, [r0, #0]
   16486:	5c59      	ldrb	r1, [r3, r1]
   16488:	0709      	lsls	r1, r1, #28
   1648a:	d5dd      	bpl.n	16448 <__ssvfscanf_r+0xbd4>
   1648c:	1b29      	subs	r1, r5, r4
   1648e:	448a      	add	sl, r1
   16490:	3101      	adds	r1, #1
   16492:	f04f 0300 	mov.w	r3, #0
   16496:	702b      	strb	r3, [r5, #0]
   16498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1649a:	b11b      	cbz	r3, 164a4 <__ssvfscanf_r+0xc30>
   1649c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1649e:	428b      	cmp	r3, r1
   164a0:	f200 8394 	bhi.w	16bcc <__ssvfscanf_r+0x1358>
   164a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   164a6:	3301      	adds	r3, #1
   164a8:	647b      	str	r3, [r7, #68]	; 0x44
   164aa:	f7ff ba0a 	b.w	158c2 <__ssvfscanf_r+0x4e>
   164ae:	2300      	movs	r3, #0
   164b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   164b2:	e461      	b.n	15d78 <__ssvfscanf_r+0x504>
   164b4:	20002af8 	.word	0x20002af8
   164b8:	20000ed9 	.word	0x20000ed9
   164bc:	0001848d 	.word	0x0001848d
   164c0:	00011801 	.word	0x00011801
   164c4:	06e6      	lsls	r6, r4, #27
   164c6:	f100 8181 	bmi.w	167cc <__ssvfscanf_r+0xf58>
   164ca:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   164ce:	f000 836d 	beq.w	16bac <__ssvfscanf_r+0x1338>
   164d2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   164d4:	f854 6b04 	ldr.w	r6, [r4], #4
   164d8:	64be      	str	r6, [r7, #72]	; 0x48
   164da:	2e00      	cmp	r6, #0
   164dc:	f43f aabf 	beq.w	15a5e <__ssvfscanf_r+0x1ea>
   164e0:	2020      	movs	r0, #32
   164e2:	f7f9 fce9 	bl	feb8 <malloc>
   164e6:	4605      	mov	r5, r0
   164e8:	2800      	cmp	r0, #0
   164ea:	f000 83f2 	beq.w	16cd2 <__ssvfscanf_r+0x145e>
   164ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   164f0:	6030      	str	r0, [r6, #0]
   164f2:	8893      	ldrh	r3, [r2, #4]
   164f4:	88d6      	ldrh	r6, [r2, #6]
   164f6:	429e      	cmp	r6, r3
   164f8:	f080 827a 	bcs.w	169f0 <__ssvfscanf_r+0x117c>
   164fc:	6810      	ldr	r0, [r2, #0]
   164fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16500:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   16504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16506:	633c      	str	r4, [r7, #48]	; 0x30
   16508:	3601      	adds	r6, #1
   1650a:	80de      	strh	r6, [r3, #6]
   1650c:	2420      	movs	r4, #32
   1650e:	f8db 2000 	ldr.w	r2, [fp]
   16512:	f107 0370 	add.w	r3, r7, #112	; 0x70
   16516:	4619      	mov	r1, r3
   16518:	7813      	ldrb	r3, [r2, #0]
   1651a:	5ccb      	ldrb	r3, [r1, r3]
   1651c:	2b00      	cmp	r3, #0
   1651e:	f43f aa9e 	beq.w	15a5e <__ssvfscanf_r+0x1ea>
   16522:	ee08 9a10 	vmov	s16, r9
   16526:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   1652a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   1652e:	462e      	mov	r6, r5
   16530:	46a2      	mov	sl, r4
   16532:	4610      	mov	r0, r2
   16534:	460c      	mov	r4, r1
   16536:	f8db 1004 	ldr.w	r1, [fp, #4]
   1653a:	1c43      	adds	r3, r0, #1
   1653c:	3901      	subs	r1, #1
   1653e:	e9cb 3100 	strd	r3, r1, [fp]
   16542:	4629      	mov	r1, r5
   16544:	7800      	ldrb	r0, [r0, #0]
   16546:	f801 0b01 	strb.w	r0, [r1], #1
   1654a:	f1b9 0f00 	cmp.w	r9, #0
   1654e:	d002      	beq.n	16556 <__ssvfscanf_r+0xce2>
   16550:	1b8d      	subs	r5, r1, r6
   16552:	4555      	cmp	r5, sl
   16554:	d27a      	bcs.n	1664c <__ssvfscanf_r+0xdd8>
   16556:	460d      	mov	r5, r1
   16558:	f1b8 0801 	subs.w	r8, r8, #1
   1655c:	d00a      	beq.n	16574 <__ssvfscanf_r+0xd00>
   1655e:	f8db 1004 	ldr.w	r1, [fp, #4]
   16562:	2900      	cmp	r1, #0
   16564:	f340 816a 	ble.w	1683c <__ssvfscanf_r+0xfc8>
   16568:	f8db 0000 	ldr.w	r0, [fp]
   1656c:	7801      	ldrb	r1, [r0, #0]
   1656e:	5c61      	ldrb	r1, [r4, r1]
   16570:	2900      	cmp	r1, #0
   16572:	d1e0      	bne.n	16536 <__ssvfscanf_r+0xcc2>
   16574:	4654      	mov	r4, sl
   16576:	ee18 9a10 	vmov	r9, s16
   1657a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1657e:	1bae      	subs	r6, r5, r6
   16580:	f43f aa6d 	beq.w	15a5e <__ssvfscanf_r+0x1ea>
   16584:	f04f 0300 	mov.w	r3, #0
   16588:	702b      	strb	r3, [r5, #0]
   1658a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1658c:	b11b      	cbz	r3, 16596 <__ssvfscanf_r+0xd22>
   1658e:	1c71      	adds	r1, r6, #1
   16590:	428c      	cmp	r4, r1
   16592:	f200 832d 	bhi.w	16bf0 <__ssvfscanf_r+0x137c>
   16596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16598:	3301      	adds	r3, #1
   1659a:	44b2      	add	sl, r6
   1659c:	647b      	str	r3, [r7, #68]	; 0x44
   1659e:	f7ff b990 	b.w	158c2 <__ssvfscanf_r+0x4e>
   165a2:	2300      	movs	r3, #0
   165a4:	613b      	str	r3, [r7, #16]
   165a6:	f7ff baa9 	b.w	15afc <__ssvfscanf_r+0x288>
   165aa:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   165ae:	f47f aa56 	bne.w	15a5e <__ssvfscanf_r+0x1ea>
   165b2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   165b6:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   165ba:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   165be:	f7ff ba67 	b.w	15a90 <__ssvfscanf_r+0x21c>
   165c2:	64f9      	str	r1, [r7, #76]	; 0x4c
   165c4:	2504      	movs	r5, #4
   165c6:	f7ff ba71 	b.w	15aac <__ssvfscanf_r+0x238>
   165ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   165cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   165ce:	185b      	adds	r3, r3, r1
   165d0:	f47f ae44 	bne.w	1625c <__ssvfscanf_r+0x9e8>
   165d4:	e5be      	b.n	16154 <__ssvfscanf_r+0x8e0>
   165d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   165d8:	2b03      	cmp	r3, #3
   165da:	d002      	beq.n	165e2 <__ssvfscanf_r+0xd6e>
   165dc:	2b05      	cmp	r3, #5
   165de:	f47f ab67 	bne.w	15cb0 <__ssvfscanf_r+0x43c>
   165e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   165e4:	3301      	adds	r3, #1
   165e6:	b2db      	uxtb	r3, r3
   165e8:	64bb      	str	r3, [r7, #72]	; 0x48
   165ea:	f7ff bb4c 	b.w	15c86 <__ssvfscanf_r+0x412>
   165ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   165f0:	2b00      	cmp	r3, #0
   165f2:	f47f ae01 	bne.w	161f8 <__ssvfscanf_r+0x984>
   165f6:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   165fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   165fe:	f47f adfb 	bne.w	161f8 <__ssvfscanf_r+0x984>
   16602:	2301      	movs	r3, #1
   16604:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   16608:	63fb      	str	r3, [r7, #60]	; 0x3c
   1660a:	f7ff bb3c 	b.w	15c86 <__ssvfscanf_r+0x412>
   1660e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16610:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16612:	185b      	adds	r3, r3, r1
   16614:	f47f ae02 	bne.w	1621c <__ssvfscanf_r+0x9a8>
   16618:	e59c      	b.n	16154 <__ssvfscanf_r+0x8e0>
   1661a:	1c83      	adds	r3, r0, #2
   1661c:	f040 845b 	bne.w	16ed6 <__ssvfscanf_r+0x1662>
   16620:	f8db 3004 	ldr.w	r3, [fp, #4]
   16624:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   16626:	2b00      	cmp	r3, #0
   16628:	f73f ad00 	bgt.w	1602c <__ssvfscanf_r+0x7b8>
   1662c:	4659      	mov	r1, fp
   1662e:	4648      	mov	r0, r9
   16630:	f002 faca 	bl	18bc8 <__ssrefill_r>
   16634:	2800      	cmp	r0, #0
   16636:	f43f ad63 	beq.w	16100 <__ssvfscanf_r+0x88c>
   1663a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1663e:	627e      	str	r6, [r7, #36]	; 0x24
   16640:	4644      	mov	r4, r8
   16642:	2d00      	cmp	r5, #0
   16644:	f43f ad63 	beq.w	1610e <__ssvfscanf_r+0x89a>
   16648:	f7ff ba00 	b.w	15a4c <__ssvfscanf_r+0x1d8>
   1664c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   16650:	4630      	mov	r0, r6
   16652:	4651      	mov	r1, sl
   16654:	f7f9 fefc 	bl	10450 <realloc>
   16658:	4606      	mov	r6, r0
   1665a:	2800      	cmp	r0, #0
   1665c:	f000 8339 	beq.w	16cd2 <__ssvfscanf_r+0x145e>
   16660:	4405      	add	r5, r0
   16662:	f8c9 0000 	str.w	r0, [r9]
   16666:	e777      	b.n	16558 <__ssvfscanf_r+0xce4>
   16668:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   1666c:	4bbc      	ldr	r3, [pc, #752]	; (16960 <__ssvfscanf_r+0x10ec>)
   1666e:	62fb      	str	r3, [r7, #44]	; 0x2c
   16670:	2310      	movs	r3, #16
   16672:	64f9      	str	r1, [r7, #76]	; 0x4c
   16674:	63bb      	str	r3, [r7, #56]	; 0x38
   16676:	2503      	movs	r5, #3
   16678:	f7ff ba18 	b.w	15aac <__ssvfscanf_r+0x238>
   1667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1667e:	3301      	adds	r3, #1
   16680:	637b      	str	r3, [r7, #52]	; 0x34
   16682:	693b      	ldr	r3, [r7, #16]
   16684:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   16688:	2b00      	cmp	r3, #0
   1668a:	f43f aafe 	beq.w	15c8a <__ssvfscanf_r+0x416>
   1668e:	693b      	ldr	r3, [r7, #16]
   16690:	3b01      	subs	r3, #1
   16692:	613b      	str	r3, [r7, #16]
   16694:	f7ff bafa 	b.w	15c8c <__ssvfscanf_r+0x418>
   16698:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   1669c:	f7ff bbd1 	b.w	15e42 <__ssvfscanf_r+0x5ce>
   166a0:	0722      	lsls	r2, r4, #28
   166a2:	f140 81c7 	bpl.w	16a34 <__ssvfscanf_r+0x11c0>
   166a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   166a8:	f853 2b04 	ldr.w	r2, [r3], #4
   166ac:	633b      	str	r3, [r7, #48]	; 0x30
   166ae:	7010      	strb	r0, [r2, #0]
   166b0:	f7ff bbf3 	b.w	15e9a <__ssvfscanf_r+0x626>
   166b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   166b8:	465a      	mov	r2, fp
   166ba:	4648      	mov	r0, r9
   166bc:	3d01      	subs	r5, #1
   166be:	f002 fa43 	bl	18b48 <_sungetc_r>
   166c2:	f7ff bbd5 	b.w	15e70 <__ssvfscanf_r+0x5fc>
   166c6:	69fb      	ldr	r3, [r7, #28]
   166c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   166ca:	4293      	cmp	r3, r2
   166cc:	f43f ab2d 	beq.w	15d2a <__ssvfscanf_r+0x4b6>
   166d0:	1a9a      	subs	r2, r3, r2
   166d2:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   166d6:	429d      	cmp	r5, r3
   166d8:	bf28      	it	cs
   166da:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   166de:	49a1      	ldr	r1, [pc, #644]	; (16964 <__ssvfscanf_r+0x10f0>)
   166e0:	4628      	mov	r0, r5
   166e2:	f7fb f9c3 	bl	11a6c <sprintf>
   166e6:	f7ff bb20 	b.w	15d2a <__ssvfscanf_r+0x4b6>
   166ea:	06e2      	lsls	r2, r4, #27
   166ec:	f100 8131 	bmi.w	16952 <__ssvfscanf_r+0x10de>
   166f0:	0723      	lsls	r3, r4, #28
   166f2:	f100 81ba 	bmi.w	16a6a <__ssvfscanf_r+0x11f6>
   166f6:	0766      	lsls	r6, r4, #29
   166f8:	f140 82b4 	bpl.w	16c64 <__ssvfscanf_r+0x13f0>
   166fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   166fe:	64f9      	str	r1, [r7, #76]	; 0x4c
   16700:	f853 2b04 	ldr.w	r2, [r3], #4
   16704:	633b      	str	r3, [r7, #48]	; 0x30
   16706:	f8a2 a000 	strh.w	sl, [r2]
   1670a:	f7ff b8da 	b.w	158c2 <__ssvfscanf_r+0x4e>
   1670e:	0723      	lsls	r3, r4, #28
   16710:	f47f a9a5 	bne.w	15a5e <__ssvfscanf_r+0x1ea>
   16714:	7842      	ldrb	r2, [r0, #1]
   16716:	2a68      	cmp	r2, #104	; 0x68
   16718:	f000 8186 	beq.w	16a28 <__ssvfscanf_r+0x11b4>
   1671c:	f044 0404 	orr.w	r4, r4, #4
   16720:	4608      	mov	r0, r1
   16722:	f7ff b92f 	b.w	15984 <__ssvfscanf_r+0x110>
   16726:	4b8e      	ldr	r3, [pc, #568]	; (16960 <__ssvfscanf_r+0x10ec>)
   16728:	62fb      	str	r3, [r7, #44]	; 0x2c
   1672a:	230a      	movs	r3, #10
   1672c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1672e:	63bb      	str	r3, [r7, #56]	; 0x38
   16730:	2503      	movs	r5, #3
   16732:	f7ff b9bb 	b.w	15aac <__ssvfscanf_r+0x238>
   16736:	4b8c      	ldr	r3, [pc, #560]	; (16968 <__ssvfscanf_r+0x10f4>)
   16738:	62fb      	str	r3, [r7, #44]	; 0x2c
   1673a:	2300      	movs	r3, #0
   1673c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1673e:	63bb      	str	r3, [r7, #56]	; 0x38
   16740:	2503      	movs	r5, #3
   16742:	f7ff b9b3 	b.w	15aac <__ssvfscanf_r+0x238>
   16746:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   1674a:	e78f      	b.n	1666c <__ssvfscanf_r+0xdf8>
   1674c:	f107 0070 	add.w	r0, r7, #112	; 0x70
   16750:	f000 fdde 	bl	17310 <__sccl>
   16754:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   16758:	64f8      	str	r0, [r7, #76]	; 0x4c
   1675a:	2501      	movs	r5, #1
   1675c:	f7ff b9a6 	b.w	15aac <__ssvfscanf_r+0x238>
   16760:	0722      	lsls	r2, r4, #28
   16762:	f47f a97c 	bne.w	15a5e <__ssvfscanf_r+0x1ea>
   16766:	7842      	ldrb	r2, [r0, #1]
   16768:	2a6c      	cmp	r2, #108	; 0x6c
   1676a:	f000 8157 	beq.w	16a1c <__ssvfscanf_r+0x11a8>
   1676e:	f044 0401 	orr.w	r4, r4, #1
   16772:	4608      	mov	r0, r1
   16774:	f7ff b906 	b.w	15984 <__ssvfscanf_r+0x110>
   16778:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   1677c:	f47f a96f 	bne.w	15a5e <__ssvfscanf_r+0x1ea>
   16780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16782:	2a00      	cmp	r2, #0
   16784:	f000 81e7 	beq.w	16b56 <__ssvfscanf_r+0x12e2>
   16788:	7842      	ldrb	r2, [r0, #1]
   1678a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1678e:	4608      	mov	r0, r1
   16790:	f7ff b8f8 	b.w	15984 <__ssvfscanf_r+0x110>
   16794:	ea58 0804 	orrs.w	r8, r8, r4
   16798:	f47f a961 	bne.w	15a5e <__ssvfscanf_r+0x1ea>
   1679c:	7842      	ldrb	r2, [r0, #1]
   1679e:	2410      	movs	r4, #16
   167a0:	4608      	mov	r0, r1
   167a2:	f7ff b8ef 	b.w	15984 <__ssvfscanf_r+0x110>
   167a6:	64f9      	str	r1, [r7, #76]	; 0x4c
   167a8:	f7ff b8a7 	b.w	158fa <__ssvfscanf_r+0x86>
   167ac:	2300      	movs	r3, #0
   167ae:	623b      	str	r3, [r7, #32]
   167b0:	62bb      	str	r3, [r7, #40]	; 0x28
   167b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   167b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
   167b8:	64bb      	str	r3, [r7, #72]	; 0x48
   167ba:	f7ff bba9 	b.w	15f10 <__ssvfscanf_r+0x69c>
   167be:	2300      	movs	r3, #0
   167c0:	e9c7 3306 	strd	r3, r3, [r7, #24]
   167c4:	623b      	str	r3, [r7, #32]
   167c6:	f107 0454 	add.w	r4, r7, #84	; 0x54
   167ca:	e429      	b.n	16020 <__ssvfscanf_r+0x7ac>
   167cc:	f8db 3000 	ldr.w	r3, [fp]
   167d0:	f107 0270 	add.w	r2, r7, #112	; 0x70
   167d4:	4611      	mov	r1, r2
   167d6:	781a      	ldrb	r2, [r3, #0]
   167d8:	5c8a      	ldrb	r2, [r1, r2]
   167da:	2a00      	cmp	r2, #0
   167dc:	f43f a93f 	beq.w	15a5e <__ssvfscanf_r+0x1ea>
   167e0:	3301      	adds	r3, #1
   167e2:	f8cb 3000 	str.w	r3, [fp]
   167e6:	f8db 3004 	ldr.w	r3, [fp, #4]
   167ea:	f1b8 0f01 	cmp.w	r8, #1
   167ee:	f103 33ff 	add.w	r3, r3, #4294967295
   167f2:	f8cb 3004 	str.w	r3, [fp, #4]
   167f6:	bf18      	it	ne
   167f8:	460c      	movne	r4, r1
   167fa:	d114      	bne.n	16826 <__ssvfscanf_r+0xfb2>
   167fc:	f7ff bb53 	b.w	15ea6 <__ssvfscanf_r+0x632>
   16800:	f8db 3000 	ldr.w	r3, [fp]
   16804:	781a      	ldrb	r2, [r3, #0]
   16806:	5ca2      	ldrb	r2, [r4, r2]
   16808:	3301      	adds	r3, #1
   1680a:	2a00      	cmp	r2, #0
   1680c:	f43f ab4b 	beq.w	15ea6 <__ssvfscanf_r+0x632>
   16810:	f8cb 3000 	str.w	r3, [fp]
   16814:	f8db 3004 	ldr.w	r3, [fp, #4]
   16818:	3501      	adds	r5, #1
   1681a:	3b01      	subs	r3, #1
   1681c:	4545      	cmp	r5, r8
   1681e:	f8cb 3004 	str.w	r3, [fp, #4]
   16822:	f43f ab40 	beq.w	15ea6 <__ssvfscanf_r+0x632>
   16826:	2b00      	cmp	r3, #0
   16828:	dcea      	bgt.n	16800 <__ssvfscanf_r+0xf8c>
   1682a:	4659      	mov	r1, fp
   1682c:	4648      	mov	r0, r9
   1682e:	f002 f9cb 	bl	18bc8 <__ssrefill_r>
   16832:	2800      	cmp	r0, #0
   16834:	d0e4      	beq.n	16800 <__ssvfscanf_r+0xf8c>
   16836:	44aa      	add	sl, r5
   16838:	f7ff b843 	b.w	158c2 <__ssvfscanf_r+0x4e>
   1683c:	ee18 0a10 	vmov	r0, s16
   16840:	4659      	mov	r1, fp
   16842:	f002 f9c1 	bl	18bc8 <__ssrefill_r>
   16846:	2800      	cmp	r0, #0
   16848:	f43f ae8e 	beq.w	16568 <__ssvfscanf_r+0xcf4>
   1684c:	42b5      	cmp	r5, r6
   1684e:	4654      	mov	r4, sl
   16850:	ee18 9a10 	vmov	r9, s16
   16854:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16858:	f47f ae91 	bne.w	1657e <__ssvfscanf_r+0xd0a>
   1685c:	f7ff b8f6 	b.w	15a4c <__ssvfscanf_r+0x1d8>
   16860:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   16864:	e428      	b.n	160b8 <__ssvfscanf_r+0x844>
   16866:	6823      	ldr	r3, [r4, #0]
   16868:	2b04      	cmp	r3, #4
   1686a:	f47f ac32 	bne.w	160d2 <__ssvfscanf_r+0x85e>
   1686e:	e432      	b.n	160d6 <__ssvfscanf_r+0x862>
   16870:	1c83      	adds	r3, r0, #2
   16872:	f040 8339 	bne.w	16ee8 <__ssvfscanf_r+0x1674>
   16876:	f8db 3004 	ldr.w	r3, [fp, #4]
   1687a:	2b00      	cmp	r3, #0
   1687c:	f340 81d7 	ble.w	16c2e <__ssvfscanf_r+0x13ba>
   16880:	f8db 3000 	ldr.w	r3, [fp]
   16884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16886:	781b      	ldrb	r3, [r3, #0]
   16888:	5cd3      	ldrb	r3, [r2, r3]
   1688a:	0718      	lsls	r0, r3, #28
   1688c:	d403      	bmi.n	16896 <__ssvfscanf_r+0x1022>
   1688e:	f1b8 0f00 	cmp.w	r8, #0
   16892:	f47f ab49 	bne.w	15f28 <__ssvfscanf_r+0x6b4>
   16896:	627c      	str	r4, [r7, #36]	; 0x24
   16898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1689a:	2b00      	cmp	r3, #0
   1689c:	f47f a811 	bne.w	158c2 <__ssvfscanf_r+0x4e>
   168a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
   168a2:	6013      	str	r3, [r2, #0]
   168a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   168a6:	2b00      	cmp	r3, #0
   168a8:	f43f adfc 	beq.w	164a4 <__ssvfscanf_r+0xc30>
   168ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   168ae:	1ad1      	subs	r1, r2, r3
   168b0:	108b      	asrs	r3, r1, #2
   168b2:	6a3a      	ldr	r2, [r7, #32]
   168b4:	3301      	adds	r3, #1
   168b6:	429a      	cmp	r2, r3
   168b8:	f67f adf4 	bls.w	164a4 <__ssvfscanf_r+0xc30>
   168bc:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   168be:	3104      	adds	r1, #4
   168c0:	6820      	ldr	r0, [r4, #0]
   168c2:	f7f9 fdc5 	bl	10450 <realloc>
   168c6:	2800      	cmp	r0, #0
   168c8:	f47f ac3a 	bne.w	16140 <__ssvfscanf_r+0x8cc>
   168cc:	e5ea      	b.n	164a4 <__ssvfscanf_r+0xc30>
   168ce:	f853 2b04 	ldr.w	r2, [r3], #4
   168d2:	ed82 0b00 	vstr	d0, [r2]
   168d6:	633b      	str	r3, [r7, #48]	; 0x30
   168d8:	e5e4      	b.n	164a4 <__ssvfscanf_r+0xc30>
   168da:	68fd      	ldr	r5, [r7, #12]
   168dc:	6a39      	ldr	r1, [r7, #32]
   168de:	687e      	ldr	r6, [r7, #4]
   168e0:	4628      	mov	r0, r5
   168e2:	4642      	mov	r2, r8
   168e4:	46a3      	mov	fp, r4
   168e6:	68bc      	ldr	r4, [r7, #8]
   168e8:	f000 fd56 	bl	17398 <stpncpy>
   168ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   168ee:	61fb      	str	r3, [r7, #28]
   168f0:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   168f4:	3e01      	subs	r6, #1
   168f6:	4605      	mov	r5, r0
   168f8:	f7ff b9c8 	b.w	15c8c <__ssvfscanf_r+0x418>
   168fc:	69f8      	ldr	r0, [r7, #28]
   168fe:	00d9      	lsls	r1, r3, #3
   16900:	461d      	mov	r5, r3
   16902:	f7f9 fda5 	bl	10450 <realloc>
   16906:	61f8      	str	r0, [r7, #28]
   16908:	2800      	cmp	r0, #0
   1690a:	f000 8264 	beq.w	16dd6 <__ssvfscanf_r+0x1562>
   1690e:	6a3a      	ldr	r2, [r7, #32]
   16910:	006b      	lsls	r3, r5, #1
   16912:	eb00 0804 	add.w	r8, r0, r4
   16916:	6010      	str	r0, [r2, #0]
   16918:	61bb      	str	r3, [r7, #24]
   1691a:	f7ff bbea 	b.w	160f2 <__ssvfscanf_r+0x87e>
   1691e:	2e02      	cmp	r6, #2
   16920:	f240 82c4 	bls.w	16eac <__ssvfscanf_r+0x1638>
   16924:	2e03      	cmp	r6, #3
   16926:	f43f a9d3 	beq.w	15cd0 <__ssvfscanf_r+0x45c>
   1692a:	3e04      	subs	r6, #4
   1692c:	fa5f f886 	uxtb.w	r8, r6
   16930:	ea6f 0308 	mvn.w	r3, r8
   16934:	18ee      	adds	r6, r5, r3
   16936:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1693a:	465a      	mov	r2, fp
   1693c:	4648      	mov	r0, r9
   1693e:	f002 f903 	bl	18b48 <_sungetc_r>
   16942:	42ae      	cmp	r6, r5
   16944:	d1f7      	bne.n	16936 <__ssvfscanf_r+0x10c2>
   16946:	f10a 3aff 	add.w	sl, sl, #4294967295
   1694a:	ebaa 0a08 	sub.w	sl, sl, r8
   1694e:	f7ff b9bf 	b.w	15cd0 <__ssvfscanf_r+0x45c>
   16952:	64f9      	str	r1, [r7, #76]	; 0x4c
   16954:	f7fe bfb5 	b.w	158c2 <__ssvfscanf_r+0x4e>
   16958:	2303      	movs	r3, #3
   1695a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1695c:	f7ff b993 	b.w	15c86 <__ssvfscanf_r+0x412>
   16960:	0001848d 	.word	0x0001848d
   16964:	20000ed0 	.word	0x20000ed0
   16968:	00011801 	.word	0x00011801
   1696c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   16970:	4293      	cmp	r3, r2
   16972:	f200 8297 	bhi.w	16ea4 <__ssvfscanf_r+0x1630>
   16976:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16978:	3308      	adds	r3, #8
   1697a:	b29b      	uxth	r3, r3
   1697c:	6810      	ldr	r0, [r2, #0]
   1697e:	63f8      	str	r0, [r7, #60]	; 0x3c
   16980:	0099      	lsls	r1, r3, #2
   16982:	637b      	str	r3, [r7, #52]	; 0x34
   16984:	f7f9 fd64 	bl	10450 <realloc>
   16988:	2800      	cmp	r0, #0
   1698a:	f000 827b 	beq.w	16e84 <__ssvfscanf_r+0x1610>
   1698e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16992:	8093      	strh	r3, [r2, #4]
   16994:	6010      	str	r0, [r2, #0]
   16996:	e542      	b.n	1641e <__ssvfscanf_r+0xbaa>
   16998:	2101      	movs	r1, #1
   1699a:	e57a      	b.n	16492 <__ssvfscanf_r+0xc1e>
   1699c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   169a0:	4293      	cmp	r3, r2
   169a2:	f200 8293 	bhi.w	16ecc <__ssvfscanf_r+0x1658>
   169a6:	3308      	adds	r3, #8
   169a8:	b29e      	uxth	r6, r3
   169aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   169ac:	00b1      	lsls	r1, r6, #2
   169ae:	6818      	ldr	r0, [r3, #0]
   169b0:	f7f9 fd4e 	bl	10450 <realloc>
   169b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   169b6:	2800      	cmp	r0, #0
   169b8:	f000 823e 	beq.w	16e38 <__ssvfscanf_r+0x15c4>
   169bc:	809e      	strh	r6, [r3, #4]
   169be:	6018      	str	r0, [r3, #0]
   169c0:	f7ff ba9b 	b.w	15efa <__ssvfscanf_r+0x686>
   169c4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   169c8:	4293      	cmp	r3, r2
   169ca:	f200 827f 	bhi.w	16ecc <__ssvfscanf_r+0x1658>
   169ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   169d0:	3308      	adds	r3, #8
   169d2:	b29b      	uxth	r3, r3
   169d4:	0099      	lsls	r1, r3, #2
   169d6:	6810      	ldr	r0, [r2, #0]
   169d8:	64bb      	str	r3, [r7, #72]	; 0x48
   169da:	f7f9 fd39 	bl	10450 <realloc>
   169de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   169e0:	2800      	cmp	r0, #0
   169e2:	f000 8228 	beq.w	16e36 <__ssvfscanf_r+0x15c2>
   169e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   169e8:	8093      	strh	r3, [r2, #4]
   169ea:	6010      	str	r0, [r2, #0]
   169ec:	f7ff bb0e 	b.w	1600c <__ssvfscanf_r+0x798>
   169f0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   169f4:	4293      	cmp	r3, r2
   169f6:	f200 8255 	bhi.w	16ea4 <__ssvfscanf_r+0x1630>
   169fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   169fc:	3308      	adds	r3, #8
   169fe:	b29b      	uxth	r3, r3
   16a00:	6810      	ldr	r0, [r2, #0]
   16a02:	63f8      	str	r0, [r7, #60]	; 0x3c
   16a04:	0099      	lsls	r1, r3, #2
   16a06:	637b      	str	r3, [r7, #52]	; 0x34
   16a08:	f7f9 fd22 	bl	10450 <realloc>
   16a0c:	2800      	cmp	r0, #0
   16a0e:	f000 8239 	beq.w	16e84 <__ssvfscanf_r+0x1610>
   16a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16a16:	8093      	strh	r3, [r2, #4]
   16a18:	6010      	str	r0, [r2, #0]
   16a1a:	e570      	b.n	164fe <__ssvfscanf_r+0xc8a>
   16a1c:	7882      	ldrb	r2, [r0, #2]
   16a1e:	f044 0402 	orr.w	r4, r4, #2
   16a22:	3002      	adds	r0, #2
   16a24:	f7fe bfae 	b.w	15984 <__ssvfscanf_r+0x110>
   16a28:	7882      	ldrb	r2, [r0, #2]
   16a2a:	f044 0408 	orr.w	r4, r4, #8
   16a2e:	3002      	adds	r0, #2
   16a30:	f7fe bfa8 	b.w	15984 <__ssvfscanf_r+0x110>
   16a34:	0763      	lsls	r3, r4, #29
   16a36:	d458      	bmi.n	16aea <__ssvfscanf_r+0x1276>
   16a38:	f014 0201 	ands.w	r2, r4, #1
   16a3c:	f47f aa28 	bne.w	15e90 <__ssvfscanf_r+0x61c>
   16a40:	07a6      	lsls	r6, r4, #30
   16a42:	f57f aa25 	bpl.w	15e90 <__ssvfscanf_r+0x61c>
   16a46:	4bb3      	ldr	r3, [pc, #716]	; (16d14 <__ssvfscanf_r+0x14a0>)
   16a48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16a4a:	4299      	cmp	r1, r3
   16a4c:	4648      	mov	r0, r9
   16a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16a52:	f000 823d 	beq.w	16ed0 <__ssvfscanf_r+0x165c>
   16a56:	f001 fdd1 	bl	185fc <_strtoll_r>
   16a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16a5c:	f853 2b04 	ldr.w	r2, [r3], #4
   16a60:	633b      	str	r3, [r7, #48]	; 0x30
   16a62:	e9c2 0100 	strd	r0, r1, [r2]
   16a66:	f7ff ba18 	b.w	15e9a <__ssvfscanf_r+0x626>
   16a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16a6c:	64f9      	str	r1, [r7, #76]	; 0x4c
   16a6e:	f853 2b04 	ldr.w	r2, [r3], #4
   16a72:	633b      	str	r3, [r7, #48]	; 0x30
   16a74:	f882 a000 	strb.w	sl, [r2]
   16a78:	f7fe bf23 	b.w	158c2 <__ssvfscanf_r+0x4e>
   16a7c:	f8db 3000 	ldr.w	r3, [fp]
   16a80:	4ea5      	ldr	r6, [pc, #660]	; (16d18 <__ssvfscanf_r+0x14a4>)
   16a82:	781a      	ldrb	r2, [r3, #0]
   16a84:	5cb2      	ldrb	r2, [r6, r2]
   16a86:	0712      	lsls	r2, r2, #28
   16a88:	f53e af1b 	bmi.w	158c2 <__ssvfscanf_r+0x4e>
   16a8c:	3301      	adds	r3, #1
   16a8e:	f8cb 3000 	str.w	r3, [fp]
   16a92:	f8db 3004 	ldr.w	r3, [fp, #4]
   16a96:	f1b8 0f01 	cmp.w	r8, #1
   16a9a:	f103 33ff 	add.w	r3, r3, #4294967295
   16a9e:	f8cb 3004 	str.w	r3, [fp, #4]
   16aa2:	bf08      	it	eq
   16aa4:	f10a 0a01 	addeq.w	sl, sl, #1
   16aa8:	f43e af0b 	beq.w	158c2 <__ssvfscanf_r+0x4e>
   16aac:	2401      	movs	r4, #1
   16aae:	e011      	b.n	16ad4 <__ssvfscanf_r+0x1260>
   16ab0:	f8db 3000 	ldr.w	r3, [fp]
   16ab4:	781a      	ldrb	r2, [r3, #0]
   16ab6:	5cb2      	ldrb	r2, [r6, r2]
   16ab8:	0715      	lsls	r5, r2, #28
   16aba:	f103 0301 	add.w	r3, r3, #1
   16abe:	d411      	bmi.n	16ae4 <__ssvfscanf_r+0x1270>
   16ac0:	f8cb 3000 	str.w	r3, [fp]
   16ac4:	f8db 3004 	ldr.w	r3, [fp, #4]
   16ac8:	3401      	adds	r4, #1
   16aca:	3b01      	subs	r3, #1
   16acc:	4544      	cmp	r4, r8
   16ace:	f8cb 3004 	str.w	r3, [fp, #4]
   16ad2:	d007      	beq.n	16ae4 <__ssvfscanf_r+0x1270>
   16ad4:	2b00      	cmp	r3, #0
   16ad6:	dceb      	bgt.n	16ab0 <__ssvfscanf_r+0x123c>
   16ad8:	4659      	mov	r1, fp
   16ada:	4648      	mov	r0, r9
   16adc:	f002 f874 	bl	18bc8 <__ssrefill_r>
   16ae0:	2800      	cmp	r0, #0
   16ae2:	d0e5      	beq.n	16ab0 <__ssvfscanf_r+0x123c>
   16ae4:	44a2      	add	sl, r4
   16ae6:	f7fe beec 	b.w	158c2 <__ssvfscanf_r+0x4e>
   16aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16aec:	f853 2b04 	ldr.w	r2, [r3], #4
   16af0:	633b      	str	r3, [r7, #48]	; 0x30
   16af2:	8010      	strh	r0, [r2, #0]
   16af4:	f7ff b9d1 	b.w	15e9a <__ssvfscanf_r+0x626>
   16af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16afa:	2b00      	cmp	r3, #0
   16afc:	f000 816e 	beq.w	16ddc <__ssvfscanf_r+0x1568>
   16b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16b02:	f8d3 8000 	ldr.w	r8, [r3]
   16b06:	88de      	ldrh	r6, [r3, #6]
   16b08:	b176      	cbz	r6, 16b28 <__ssvfscanf_r+0x12b4>
   16b0a:	2400      	movs	r4, #0
   16b0c:	f1a8 0504 	sub.w	r5, r8, #4
   16b10:	46a1      	mov	r9, r4
   16b12:	f855 3f04 	ldr.w	r3, [r5, #4]!
   16b16:	6818      	ldr	r0, [r3, #0]
   16b18:	f7f9 f9d6 	bl	fec8 <free>
   16b1c:	3401      	adds	r4, #1
   16b1e:	682b      	ldr	r3, [r5, #0]
   16b20:	42a6      	cmp	r6, r4
   16b22:	f8c3 9000 	str.w	r9, [r3]
   16b26:	d1f4      	bne.n	16b12 <__ssvfscanf_r+0x129e>
   16b28:	f04f 33ff 	mov.w	r3, #4294967295
   16b2c:	647b      	str	r3, [r7, #68]	; 0x44
   16b2e:	f1b8 0f00 	cmp.w	r8, #0
   16b32:	f47e af9c 	bne.w	15a6e <__ssvfscanf_r+0x1fa>
   16b36:	f7fe bf9d 	b.w	15a74 <__ssvfscanf_r+0x200>
   16b3a:	4878      	ldr	r0, [pc, #480]	; (16d1c <__ssvfscanf_r+0x14a8>)
   16b3c:	633b      	str	r3, [r7, #48]	; 0x30
   16b3e:	f7fb fd97 	bl	12670 <nanf>
   16b42:	ed84 0a00 	vstr	s0, [r4]
   16b46:	e4ad      	b.n	164a4 <__ssvfscanf_r+0xc30>
   16b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16b4a:	63fc      	str	r4, [r7, #60]	; 0x3c
   16b4c:	f852 5b04 	ldr.w	r5, [r2], #4
   16b50:	633a      	str	r2, [r7, #48]	; 0x30
   16b52:	64bc      	str	r4, [r7, #72]	; 0x48
   16b54:	e46c      	b.n	16430 <__ssvfscanf_r+0xbbc>
   16b56:	b082      	sub	sp, #8
   16b58:	e9cd 3302 	strd	r3, r3, [sp, #8]
   16b5c:	ab02      	add	r3, sp, #8
   16b5e:	643b      	str	r3, [r7, #64]	; 0x40
   16b60:	e612      	b.n	16788 <__ssvfscanf_r+0xf14>
   16b62:	637b      	str	r3, [r7, #52]	; 0x34
   16b64:	0053      	lsls	r3, r2, #1
   16b66:	4620      	mov	r0, r4
   16b68:	4619      	mov	r1, r3
   16b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   16b6c:	f7f9 fc70 	bl	10450 <realloc>
   16b70:	4604      	mov	r4, r0
   16b72:	2800      	cmp	r0, #0
   16b74:	f000 80ad 	beq.w	16cd2 <__ssvfscanf_r+0x145e>
   16b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16b7a:	1985      	adds	r5, r0, r6
   16b7c:	6018      	str	r0, [r3, #0]
   16b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b80:	e475      	b.n	1646e <__ssvfscanf_r+0xbfa>
   16b82:	697d      	ldr	r5, [r7, #20]
   16b84:	4629      	mov	r1, r5
   16b86:	230a      	movs	r3, #10
   16b88:	3101      	adds	r1, #1
   16b8a:	4648      	mov	r0, r9
   16b8c:	f7fa fe38 	bl	11800 <_strtol_r>
   16b90:	69bb      	ldr	r3, [r7, #24]
   16b92:	1ac2      	subs	r2, r0, r3
   16b94:	e59d      	b.n	166d2 <__ssvfscanf_r+0xe5e>
   16b96:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   16b9a:	f853 1b04 	ldr.w	r1, [r3], #4
   16b9e:	623a      	str	r2, [r7, #32]
   16ba0:	64b9      	str	r1, [r7, #72]	; 0x48
   16ba2:	633b      	str	r3, [r7, #48]	; 0x30
   16ba4:	62ba      	str	r2, [r7, #40]	; 0x28
   16ba6:	63fa      	str	r2, [r7, #60]	; 0x3c
   16ba8:	f7ff b9b2 	b.w	15f10 <__ssvfscanf_r+0x69c>
   16bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16bae:	64bc      	str	r4, [r7, #72]	; 0x48
   16bb0:	f853 5b04 	ldr.w	r5, [r3], #4
   16bb4:	633b      	str	r3, [r7, #48]	; 0x30
   16bb6:	e4aa      	b.n	1650e <__ssvfscanf_r+0xc9a>
   16bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16bbc:	f853 4b04 	ldr.w	r4, [r3], #4
   16bc0:	61ba      	str	r2, [r7, #24]
   16bc2:	e9c7 2207 	strd	r2, r2, [r7, #28]
   16bc6:	633b      	str	r3, [r7, #48]	; 0x30
   16bc8:	f7ff ba2a 	b.w	16020 <__ssvfscanf_r+0x7ac>
   16bcc:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   16bce:	6820      	ldr	r0, [r4, #0]
   16bd0:	f7f9 fc3e 	bl	10450 <realloc>
   16bd4:	2800      	cmp	r0, #0
   16bd6:	f47f aab3 	bne.w	16140 <__ssvfscanf_r+0x8cc>
   16bda:	e463      	b.n	164a4 <__ssvfscanf_r+0xc30>
   16bdc:	4659      	mov	r1, fp
   16bde:	4648      	mov	r0, r9
   16be0:	637b      	str	r3, [r7, #52]	; 0x34
   16be2:	f001 fff1 	bl	18bc8 <__ssrefill_r>
   16be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16be8:	2800      	cmp	r0, #0
   16bea:	f43f ac49 	beq.w	16480 <__ssvfscanf_r+0xc0c>
   16bee:	e44d      	b.n	1648c <__ssvfscanf_r+0xc18>
   16bf0:	6818      	ldr	r0, [r3, #0]
   16bf2:	461c      	mov	r4, r3
   16bf4:	f7f9 fc2c 	bl	10450 <realloc>
   16bf8:	2800      	cmp	r0, #0
   16bfa:	f43f accc 	beq.w	16596 <__ssvfscanf_r+0xd22>
   16bfe:	6020      	str	r0, [r4, #0]
   16c00:	e4c9      	b.n	16596 <__ssvfscanf_r+0xd22>
   16c02:	2500      	movs	r5, #0
   16c04:	e637      	b.n	16876 <__ssvfscanf_r+0x1002>
   16c06:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   16c08:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16c0c:	627e      	str	r6, [r7, #36]	; 0x24
   16c0e:	4644      	mov	r4, r8
   16c10:	2d00      	cmp	r5, #0
   16c12:	f43f aa7c 	beq.w	1610e <__ssvfscanf_r+0x89a>
   16c16:	3d01      	subs	r5, #1
   16c18:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   16c1c:	465a      	mov	r2, fp
   16c1e:	5d59      	ldrb	r1, [r3, r5]
   16c20:	4648      	mov	r0, r9
   16c22:	f001 ff91 	bl	18b48 <_sungetc_r>
   16c26:	2d00      	cmp	r5, #0
   16c28:	d1f5      	bne.n	16c16 <__ssvfscanf_r+0x13a2>
   16c2a:	f7ff ba70 	b.w	1610e <__ssvfscanf_r+0x89a>
   16c2e:	4659      	mov	r1, fp
   16c30:	4648      	mov	r0, r9
   16c32:	f001 ffc9 	bl	18bc8 <__ssrefill_r>
   16c36:	2800      	cmp	r0, #0
   16c38:	f43f ae22 	beq.w	16880 <__ssvfscanf_r+0x100c>
   16c3c:	627c      	str	r4, [r7, #36]	; 0x24
   16c3e:	2d00      	cmp	r5, #0
   16c40:	f47e af04 	bne.w	15a4c <__ssvfscanf_r+0x1d8>
   16c44:	e628      	b.n	16898 <__ssvfscanf_r+0x1024>
   16c46:	627c      	str	r4, [r7, #36]	; 0x24
   16c48:	2d00      	cmp	r5, #0
   16c4a:	f43f ae25 	beq.w	16898 <__ssvfscanf_r+0x1024>
   16c4e:	3d01      	subs	r5, #1
   16c50:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   16c54:	465a      	mov	r2, fp
   16c56:	5d59      	ldrb	r1, [r3, r5]
   16c58:	4648      	mov	r0, r9
   16c5a:	f001 ff75 	bl	18b48 <_sungetc_r>
   16c5e:	2d00      	cmp	r5, #0
   16c60:	d1f5      	bne.n	16c4e <__ssvfscanf_r+0x13da>
   16c62:	e619      	b.n	16898 <__ssvfscanf_r+0x1024>
   16c64:	07e5      	lsls	r5, r4, #31
   16c66:	d43c      	bmi.n	16ce2 <__ssvfscanf_r+0x146e>
   16c68:	07a4      	lsls	r4, r4, #30
   16c6a:	d53a      	bpl.n	16ce2 <__ssvfscanf_r+0x146e>
   16c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16c6e:	64f9      	str	r1, [r7, #76]	; 0x4c
   16c70:	f853 2b04 	ldr.w	r2, [r3], #4
   16c74:	633b      	str	r3, [r7, #48]	; 0x30
   16c76:	ea4f 73ea 	mov.w	r3, sl, asr #31
   16c7a:	f8c2 a000 	str.w	sl, [r2]
   16c7e:	6053      	str	r3, [r2, #4]
   16c80:	f7fe be1f 	b.w	158c2 <__ssvfscanf_r+0x4e>
   16c84:	ee18 9a10 	vmov	r9, s16
   16c88:	461e      	mov	r6, r3
   16c8a:	f7ff b814 	b.w	15cb6 <__ssvfscanf_r+0x442>
   16c8e:	2301      	movs	r3, #1
   16c90:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   16c94:	64bb      	str	r3, [r7, #72]	; 0x48
   16c96:	f7fe bff6 	b.w	15c86 <__ssvfscanf_r+0x412>
   16c9a:	f1b8 0f01 	cmp.w	r8, #1
   16c9e:	bf38      	it	cc
   16ca0:	f04f 0801 	movcc.w	r8, #1
   16ca4:	f014 0301 	ands.w	r3, r4, #1
   16ca8:	d13a      	bne.n	16d20 <__ssvfscanf_r+0x14ac>
   16caa:	06e5      	lsls	r5, r4, #27
   16cac:	f100 8136 	bmi.w	16f1c <__ssvfscanf_r+0x16a8>
   16cb0:	0624      	lsls	r4, r4, #24
   16cb2:	f140 814c 	bpl.w	16f4e <__ssvfscanf_r+0x16da>
   16cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16cb8:	f853 5b04 	ldr.w	r5, [r3], #4
   16cbc:	64bb      	str	r3, [r7, #72]	; 0x48
   16cbe:	2d00      	cmp	r5, #0
   16cc0:	f43e aecd 	beq.w	15a5e <__ssvfscanf_r+0x1ea>
   16cc4:	4640      	mov	r0, r8
   16cc6:	f7f9 f8f7 	bl	feb8 <malloc>
   16cca:	4603      	mov	r3, r0
   16ccc:	2800      	cmp	r0, #0
   16cce:	f040 80dc 	bne.w	16e8a <__ssvfscanf_r+0x1616>
   16cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16cd4:	2b00      	cmp	r3, #0
   16cd6:	f000 8081 	beq.w	16ddc <__ssvfscanf_r+0x1568>
   16cda:	f8d3 8000 	ldr.w	r8, [r3]
   16cde:	88de      	ldrh	r6, [r3, #6]
   16ce0:	e712      	b.n	16b08 <__ssvfscanf_r+0x1294>
   16ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16ce4:	64f9      	str	r1, [r7, #76]	; 0x4c
   16ce6:	f853 2b04 	ldr.w	r2, [r3], #4
   16cea:	f8c2 a000 	str.w	sl, [r2]
   16cee:	633b      	str	r3, [r7, #48]	; 0x30
   16cf0:	f7fe bde7 	b.w	158c2 <__ssvfscanf_r+0x4e>
   16cf4:	462b      	mov	r3, r5
   16cf6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   16cf8:	42ab      	cmp	r3, r5
   16cfa:	f67e aeb0 	bls.w	15a5e <__ssvfscanf_r+0x1ea>
   16cfe:	461c      	mov	r4, r3
   16d00:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   16d04:	465a      	mov	r2, fp
   16d06:	4648      	mov	r0, r9
   16d08:	f001 ff1e 	bl	18b48 <_sungetc_r>
   16d0c:	42ac      	cmp	r4, r5
   16d0e:	d1f7      	bne.n	16d00 <__ssvfscanf_r+0x148c>
   16d10:	f7fe bea5 	b.w	15a5e <__ssvfscanf_r+0x1ea>
   16d14:	0001848d 	.word	0x0001848d
   16d18:	20000ed9 	.word	0x20000ed9
   16d1c:	200004ec 	.word	0x200004ec
   16d20:	f014 0310 	ands.w	r3, r4, #16
   16d24:	637b      	str	r3, [r7, #52]	; 0x34
   16d26:	d05e      	beq.n	16de6 <__ssvfscanf_r+0x1572>
   16d28:	2500      	movs	r5, #0
   16d2a:	63fd      	str	r5, [r7, #60]	; 0x3c
   16d2c:	64bd      	str	r5, [r7, #72]	; 0x48
   16d2e:	462e      	mov	r6, r5
   16d30:	2400      	movs	r4, #0
   16d32:	464b      	mov	r3, r9
   16d34:	46c1      	mov	r9, r8
   16d36:	46a8      	mov	r8, r5
   16d38:	4625      	mov	r5, r4
   16d3a:	461c      	mov	r4, r3
   16d3c:	f7fb f95c 	bl	11ff8 <__locale_mb_cur_max>
   16d40:	42a8      	cmp	r0, r5
   16d42:	f43e ae83 	beq.w	15a4c <__ssvfscanf_r+0x1d8>
   16d46:	e9db 3200 	ldrd	r3, r2, [fp]
   16d4a:	f813 1b01 	ldrb.w	r1, [r3], #1
   16d4e:	3a01      	subs	r2, #1
   16d50:	e9cb 3200 	strd	r3, r2, [fp]
   16d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16d56:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   16d5a:	2a03      	cmp	r2, #3
   16d5c:	5541      	strb	r1, [r0, r5]
   16d5e:	f105 0301 	add.w	r3, r5, #1
   16d62:	f107 0568 	add.w	r5, r7, #104	; 0x68
   16d66:	d102      	bne.n	16d6e <__ssvfscanf_r+0x14fa>
   16d68:	682a      	ldr	r2, [r5, #0]
   16d6a:	2a04      	cmp	r2, #4
   16d6c:	d006      	beq.n	16d7c <__ssvfscanf_r+0x1508>
   16d6e:	2208      	movs	r2, #8
   16d70:	2100      	movs	r1, #0
   16d72:	4628      	mov	r0, r5
   16d74:	62bb      	str	r3, [r7, #40]	; 0x28
   16d76:	f7fb f81f 	bl	11db8 <memset>
   16d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16d7c:	9500      	str	r5, [sp, #0]
   16d7e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   16d82:	4631      	mov	r1, r6
   16d84:	4620      	mov	r0, r4
   16d86:	62bb      	str	r3, [r7, #40]	; 0x28
   16d88:	f001 fd0a 	bl	187a0 <_mbrtowc_r>
   16d8c:	1c43      	adds	r3, r0, #1
   16d8e:	6278      	str	r0, [r7, #36]	; 0x24
   16d90:	f43e ae5c 	beq.w	15a4c <__ssvfscanf_r+0x1d8>
   16d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16d96:	2800      	cmp	r0, #0
   16d98:	f040 8147 	bne.w	1702a <__ssvfscanf_r+0x17b6>
   16d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16d9e:	b902      	cbnz	r2, 16da2 <__ssvfscanf_r+0x152e>
   16da0:	6032      	str	r2, [r6, #0]
   16da2:	449a      	add	sl, r3
   16da4:	f109 39ff 	add.w	r9, r9, #4294967295
   16da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16daa:	2b00      	cmp	r3, #0
   16dac:	f040 8175 	bne.w	1709a <__ssvfscanf_r+0x1826>
   16db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16db2:	2b00      	cmp	r3, #0
   16db4:	f000 8170 	beq.w	17098 <__ssvfscanf_r+0x1824>
   16db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16dba:	1af5      	subs	r5, r6, r3
   16dbc:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   16dc0:	f200 816a 	bhi.w	17098 <__ssvfscanf_r+0x1824>
   16dc4:	4618      	mov	r0, r3
   16dc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   16dca:	f7f9 fb41 	bl	10450 <realloc>
   16dce:	63f8      	str	r0, [r7, #60]	; 0x3c
   16dd0:	2800      	cmp	r0, #0
   16dd2:	f040 815c 	bne.w	1708e <__ssvfscanf_r+0x181a>
   16dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16dd8:	2b00      	cmp	r3, #0
   16dda:	d12d      	bne.n	16e38 <__ssvfscanf_r+0x15c4>
   16ddc:	f04f 33ff 	mov.w	r3, #4294967295
   16de0:	647b      	str	r3, [r7, #68]	; 0x44
   16de2:	f7fe be47 	b.w	15a74 <__ssvfscanf_r+0x200>
   16de6:	0622      	lsls	r2, r4, #24
   16de8:	f140 808f 	bpl.w	16f0a <__ssvfscanf_r+0x1696>
   16dec:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   16dee:	f854 3b04 	ldr.w	r3, [r4], #4
   16df2:	64bb      	str	r3, [r7, #72]	; 0x48
   16df4:	2b00      	cmp	r3, #0
   16df6:	f43e ae32 	beq.w	15a5e <__ssvfscanf_r+0x1ea>
   16dfa:	2080      	movs	r0, #128	; 0x80
   16dfc:	f7f9 f85c 	bl	feb8 <malloc>
   16e00:	4606      	mov	r6, r0
   16e02:	2800      	cmp	r0, #0
   16e04:	d0e7      	beq.n	16dd6 <__ssvfscanf_r+0x1562>
   16e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16e08:	6018      	str	r0, [r3, #0]
   16e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16e0c:	88dd      	ldrh	r5, [r3, #6]
   16e0e:	889a      	ldrh	r2, [r3, #4]
   16e10:	4295      	cmp	r5, r2
   16e12:	f0c0 80b3 	bcc.w	16f7c <__ssvfscanf_r+0x1708>
   16e16:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   16e1a:	428a      	cmp	r2, r1
   16e1c:	d856      	bhi.n	16ecc <__ssvfscanf_r+0x1658>
   16e1e:	3208      	adds	r2, #8
   16e20:	b293      	uxth	r3, r2
   16e22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   16e26:	0099      	lsls	r1, r3, #2
   16e28:	6810      	ldr	r0, [r2, #0]
   16e2a:	f7f9 fb11 	bl	10450 <realloc>
   16e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e30:	2800      	cmp	r0, #0
   16e32:	f040 80ae 	bne.w	16f92 <__ssvfscanf_r+0x171e>
   16e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16e38:	88db      	ldrh	r3, [r3, #6]
   16e3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16e3c:	461e      	mov	r6, r3
   16e3e:	f8d2 8000 	ldr.w	r8, [r2]
   16e42:	e661      	b.n	16b08 <__ssvfscanf_r+0x1294>
   16e44:	462b      	mov	r3, r5
   16e46:	6abd      	ldr	r5, [r7, #40]	; 0x28
   16e48:	42ab      	cmp	r3, r5
   16e4a:	f67e ae08 	bls.w	15a5e <__ssvfscanf_r+0x1ea>
   16e4e:	461c      	mov	r4, r3
   16e50:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   16e54:	465a      	mov	r2, fp
   16e56:	4648      	mov	r0, r9
   16e58:	f001 fe76 	bl	18b48 <_sungetc_r>
   16e5c:	42ac      	cmp	r4, r5
   16e5e:	d1f7      	bne.n	16e50 <__ssvfscanf_r+0x15dc>
   16e60:	f7fe bdfd 	b.w	15a5e <__ssvfscanf_r+0x1ea>
   16e64:	4610      	mov	r0, r2
   16e66:	00d9      	lsls	r1, r3, #3
   16e68:	461e      	mov	r6, r3
   16e6a:	f7f9 faf1 	bl	10450 <realloc>
   16e6e:	62b8      	str	r0, [r7, #40]	; 0x28
   16e70:	2800      	cmp	r0, #0
   16e72:	d0b0      	beq.n	16dd6 <__ssvfscanf_r+0x1562>
   16e74:	1942      	adds	r2, r0, r5
   16e76:	64ba      	str	r2, [r7, #72]	; 0x48
   16e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16e7a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   16e7c:	6010      	str	r0, [r2, #0]
   16e7e:	0073      	lsls	r3, r6, #1
   16e80:	623b      	str	r3, [r7, #32]
   16e82:	e4f8      	b.n	16876 <__ssvfscanf_r+0x1002>
   16e84:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   16e88:	e63e      	b.n	16b08 <__ssvfscanf_r+0x1294>
   16e8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   16e8c:	6028      	str	r0, [r5, #0]
   16e8e:	88ce      	ldrh	r6, [r1, #6]
   16e90:	888a      	ldrh	r2, [r1, #4]
   16e92:	4296      	cmp	r6, r2
   16e94:	f0c0 808e 	bcc.w	16fb4 <__ssvfscanf_r+0x1740>
   16e98:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   16e9c:	428a      	cmp	r2, r1
   16e9e:	6338      	str	r0, [r7, #48]	; 0x30
   16ea0:	f240 80a5 	bls.w	16fee <__ssvfscanf_r+0x177a>
   16ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16ea6:	f8d3 8000 	ldr.w	r8, [r3]
   16eaa:	e62d      	b.n	16b08 <__ssvfscanf_r+0x1294>
   16eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16eae:	4295      	cmp	r5, r2
   16eb0:	f67e add5 	bls.w	15a5e <__ssvfscanf_r+0x1ea>
   16eb4:	462c      	mov	r4, r5
   16eb6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   16eb8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   16ebc:	465a      	mov	r2, fp
   16ebe:	4648      	mov	r0, r9
   16ec0:	f001 fe42 	bl	18b48 <_sungetc_r>
   16ec4:	42ac      	cmp	r4, r5
   16ec6:	d1f7      	bne.n	16eb8 <__ssvfscanf_r+0x1644>
   16ec8:	f7fe bdc9 	b.w	15a5e <__ssvfscanf_r+0x1ea>
   16ecc:	462b      	mov	r3, r5
   16ece:	e7b4      	b.n	16e3a <__ssvfscanf_r+0x15c6>
   16ed0:	f001 fc64 	bl	1879c <_strtoull_r>
   16ed4:	e5c1      	b.n	16a5a <__ssvfscanf_r+0x11e6>
   16ed6:	f8d8 3000 	ldr.w	r3, [r8]
   16eda:	461d      	mov	r5, r3
   16edc:	3301      	adds	r3, #1
   16ede:	f47f a8d5 	bne.w	1608c <__ssvfscanf_r+0x818>
   16ee2:	462a      	mov	r2, r5
   16ee4:	f7ff b8e8 	b.w	160b8 <__ssvfscanf_r+0x844>
   16ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16eea:	6818      	ldr	r0, [r3, #0]
   16eec:	f001 fcb4 	bl	18858 <iswspace>
   16ef0:	2800      	cmp	r0, #0
   16ef2:	f47f aea8 	bne.w	16c46 <__ssvfscanf_r+0x13d2>
   16ef6:	2c03      	cmp	r4, #3
   16ef8:	44aa      	add	sl, r5
   16efa:	f47f a849 	bne.w	15f90 <__ssvfscanf_r+0x71c>
   16efe:	6833      	ldr	r3, [r6, #0]
   16f00:	2b04      	cmp	r3, #4
   16f02:	f47f a845 	bne.w	15f90 <__ssvfscanf_r+0x71c>
   16f06:	f7ff b845 	b.w	15f94 <__ssvfscanf_r+0x720>
   16f0a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   16f0e:	f853 6b04 	ldr.w	r6, [r3], #4
   16f12:	633b      	str	r3, [r7, #48]	; 0x30
   16f14:	4615      	mov	r5, r2
   16f16:	63fa      	str	r2, [r7, #60]	; 0x3c
   16f18:	64ba      	str	r2, [r7, #72]	; 0x48
   16f1a:	e709      	b.n	16d30 <__ssvfscanf_r+0x14bc>
   16f1c:	461c      	mov	r4, r3
   16f1e:	f8db 3004 	ldr.w	r3, [fp, #4]
   16f22:	4598      	cmp	r8, r3
   16f24:	dd39      	ble.n	16f9a <__ssvfscanf_r+0x1726>
   16f26:	f8db 2000 	ldr.w	r2, [fp]
   16f2a:	441a      	add	r2, r3
   16f2c:	f8cb 2000 	str.w	r2, [fp]
   16f30:	4659      	mov	r1, fp
   16f32:	4648      	mov	r0, r9
   16f34:	441c      	add	r4, r3
   16f36:	eba8 0803 	sub.w	r8, r8, r3
   16f3a:	f001 fe45 	bl	18bc8 <__ssrefill_r>
   16f3e:	2800      	cmp	r0, #0
   16f40:	d0ed      	beq.n	16f1e <__ssvfscanf_r+0x16aa>
   16f42:	2c00      	cmp	r4, #0
   16f44:	f43e ad82 	beq.w	15a4c <__ssvfscanf_r+0x1d8>
   16f48:	44a2      	add	sl, r4
   16f4a:	f7fe bcba 	b.w	158c2 <__ssvfscanf_r+0x4e>
   16f4e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   16f50:	4643      	mov	r3, r8
   16f52:	6829      	ldr	r1, [r5, #0]
   16f54:	f8cd b000 	str.w	fp, [sp]
   16f58:	2201      	movs	r2, #1
   16f5a:	4648      	mov	r0, r9
   16f5c:	f001 fe52 	bl	18c04 <_sfread_r>
   16f60:	4604      	mov	r4, r0
   16f62:	2800      	cmp	r0, #0
   16f64:	f43e ad72 	beq.w	15a4c <__ssvfscanf_r+0x1d8>
   16f68:	3504      	adds	r5, #4
   16f6a:	64bd      	str	r5, [r7, #72]	; 0x48
   16f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16f6e:	3301      	adds	r3, #1
   16f70:	647b      	str	r3, [r7, #68]	; 0x44
   16f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16f74:	633b      	str	r3, [r7, #48]	; 0x30
   16f76:	44a2      	add	sl, r4
   16f78:	f7fe bca3 	b.w	158c2 <__ssvfscanf_r+0x4e>
   16f7c:	6818      	ldr	r0, [r3, #0]
   16f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16f80:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   16f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16f86:	633c      	str	r4, [r7, #48]	; 0x30
   16f88:	3501      	adds	r5, #1
   16f8a:	80dd      	strh	r5, [r3, #6]
   16f8c:	63fe      	str	r6, [r7, #60]	; 0x3c
   16f8e:	2520      	movs	r5, #32
   16f90:	e6ce      	b.n	16d30 <__ssvfscanf_r+0x14bc>
   16f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16f94:	8093      	strh	r3, [r2, #4]
   16f96:	6010      	str	r0, [r2, #0]
   16f98:	e7f1      	b.n	16f7e <__ssvfscanf_r+0x170a>
   16f9a:	eba3 0308 	sub.w	r3, r3, r8
   16f9e:	f8cb 3004 	str.w	r3, [fp, #4]
   16fa2:	f8db 3000 	ldr.w	r3, [fp]
   16fa6:	4444      	add	r4, r8
   16fa8:	4443      	add	r3, r8
   16faa:	f8cb 3000 	str.w	r3, [fp]
   16fae:	44a2      	add	sl, r4
   16fb0:	f7fe bc87 	b.w	158c2 <__ssvfscanf_r+0x4e>
   16fb4:	680a      	ldr	r2, [r1, #0]
   16fb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   16fb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16fba:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   16fbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16fc0:	3601      	adds	r6, #1
   16fc2:	b2b6      	uxth	r6, r6
   16fc4:	80d6      	strh	r6, [r2, #6]
   16fc6:	4619      	mov	r1, r3
   16fc8:	f8cd b000 	str.w	fp, [sp]
   16fcc:	4643      	mov	r3, r8
   16fce:	2201      	movs	r2, #1
   16fd0:	4648      	mov	r0, r9
   16fd2:	f001 fe17 	bl	18c04 <_sfread_r>
   16fd6:	4604      	mov	r4, r0
   16fd8:	b1d8      	cbz	r0, 17012 <__ssvfscanf_r+0x179e>
   16fda:	4580      	cmp	r8, r0
   16fdc:	d9c6      	bls.n	16f6c <__ssvfscanf_r+0x16f8>
   16fde:	6828      	ldr	r0, [r5, #0]
   16fe0:	4621      	mov	r1, r4
   16fe2:	f7f9 fa35 	bl	10450 <realloc>
   16fe6:	2800      	cmp	r0, #0
   16fe8:	d0c0      	beq.n	16f6c <__ssvfscanf_r+0x16f8>
   16fea:	6028      	str	r0, [r5, #0]
   16fec:	e7be      	b.n	16f6c <__ssvfscanf_r+0x16f8>
   16fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16ff0:	3208      	adds	r2, #8
   16ff2:	b294      	uxth	r4, r2
   16ff4:	681a      	ldr	r2, [r3, #0]
   16ff6:	637a      	str	r2, [r7, #52]	; 0x34
   16ff8:	4610      	mov	r0, r2
   16ffa:	00a1      	lsls	r1, r4, #2
   16ffc:	f7f9 fa28 	bl	10450 <realloc>
   17000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17002:	63f8      	str	r0, [r7, #60]	; 0x3c
   17004:	2800      	cmp	r0, #0
   17006:	d05b      	beq.n	170c0 <__ssvfscanf_r+0x184c>
   17008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1700a:	809c      	strh	r4, [r3, #4]
   1700c:	6018      	str	r0, [r3, #0]
   1700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17010:	e7d2      	b.n	16fb8 <__ssvfscanf_r+0x1744>
   17012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17014:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   17018:	2b00      	cmp	r3, #0
   1701a:	f43f ad75 	beq.w	16b08 <__ssvfscanf_r+0x1294>
   1701e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   17022:	065b      	lsls	r3, r3, #25
   17024:	f57e ad1d 	bpl.w	15a62 <__ssvfscanf_r+0x1ee>
   17028:	e56a      	b.n	16b00 <__ssvfscanf_r+0x128c>
   1702a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1702c:	3202      	adds	r2, #2
   1702e:	d11d      	bne.n	1706c <__ssvfscanf_r+0x17f8>
   17030:	f8db 2004 	ldr.w	r2, [fp, #4]
   17034:	2a00      	cmp	r2, #0
   17036:	461d      	mov	r5, r3
   17038:	f73f ae80 	bgt.w	16d3c <__ssvfscanf_r+0x14c8>
   1703c:	4659      	mov	r1, fp
   1703e:	4620      	mov	r0, r4
   17040:	f001 fdc2 	bl	18bc8 <__ssrefill_r>
   17044:	b9e0      	cbnz	r0, 17080 <__ssvfscanf_r+0x180c>
   17046:	f1b9 0f00 	cmp.w	r9, #0
   1704a:	f47f ae77 	bne.w	16d3c <__ssvfscanf_r+0x14c8>
   1704e:	4645      	mov	r5, r8
   17050:	46a1      	mov	r9, r4
   17052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17054:	b123      	cbz	r3, 17060 <__ssvfscanf_r+0x17ec>
   17056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17058:	1af1      	subs	r1, r6, r3
   1705a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   1705e:	d827      	bhi.n	170b0 <__ssvfscanf_r+0x183c>
   17060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17062:	2b00      	cmp	r3, #0
   17064:	f47e ac2d 	bne.w	158c2 <__ssvfscanf_r+0x4e>
   17068:	f7ff ba1c 	b.w	164a4 <__ssvfscanf_r+0xc30>
   1706c:	449a      	add	sl, r3
   1706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17070:	2b03      	cmp	r3, #3
   17072:	f47f ae97 	bne.w	16da4 <__ssvfscanf_r+0x1530>
   17076:	682b      	ldr	r3, [r5, #0]
   17078:	2b04      	cmp	r3, #4
   1707a:	f47f ae93 	bne.w	16da4 <__ssvfscanf_r+0x1530>
   1707e:	e693      	b.n	16da8 <__ssvfscanf_r+0x1534>
   17080:	46a1      	mov	r9, r4
   17082:	462c      	mov	r4, r5
   17084:	4645      	mov	r5, r8
   17086:	2c00      	cmp	r4, #0
   17088:	d0e3      	beq.n	17052 <__ssvfscanf_r+0x17de>
   1708a:	f7fe bcdf 	b.w	15a4c <__ssvfscanf_r+0x1d8>
   1708e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17090:	1946      	adds	r6, r0, r5
   17092:	6010      	str	r0, [r2, #0]
   17094:	ea4f 0848 	mov.w	r8, r8, lsl #1
   17098:	3604      	adds	r6, #4
   1709a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1709e:	2b00      	cmp	r3, #0
   170a0:	f04f 0500 	mov.w	r5, #0
   170a4:	ddca      	ble.n	1703c <__ssvfscanf_r+0x17c8>
   170a6:	f1b9 0f00 	cmp.w	r9, #0
   170aa:	f47f ae47 	bne.w	16d3c <__ssvfscanf_r+0x14c8>
   170ae:	e7ce      	b.n	1704e <__ssvfscanf_r+0x17da>
   170b0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   170b2:	6820      	ldr	r0, [r4, #0]
   170b4:	f7f9 f9cc 	bl	10450 <realloc>
   170b8:	2800      	cmp	r0, #0
   170ba:	d0d1      	beq.n	17060 <__ssvfscanf_r+0x17ec>
   170bc:	6020      	str	r0, [r4, #0]
   170be:	e7cf      	b.n	17060 <__ssvfscanf_r+0x17ec>
   170c0:	4690      	mov	r8, r2
   170c2:	e521      	b.n	16b08 <__ssvfscanf_r+0x1294>

000170c4 <_fclose_r>:
   170c4:	b570      	push	{r4, r5, r6, lr}
   170c6:	2900      	cmp	r1, #0
   170c8:	d04b      	beq.n	17162 <_fclose_r+0x9e>
   170ca:	4606      	mov	r6, r0
   170cc:	460c      	mov	r4, r1
   170ce:	b110      	cbz	r0, 170d6 <_fclose_r+0x12>
   170d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   170d2:	2b00      	cmp	r3, #0
   170d4:	d048      	beq.n	17168 <_fclose_r+0xa4>
   170d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   170d8:	07d8      	lsls	r0, r3, #31
   170da:	d534      	bpl.n	17146 <_fclose_r+0x82>
   170dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   170e0:	2b00      	cmp	r3, #0
   170e2:	d03e      	beq.n	17162 <_fclose_r+0x9e>
   170e4:	4621      	mov	r1, r4
   170e6:	4630      	mov	r0, r6
   170e8:	f000 f850 	bl	1718c <__sflush_r>
   170ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   170ee:	4605      	mov	r5, r0
   170f0:	b133      	cbz	r3, 17100 <_fclose_r+0x3c>
   170f2:	69e1      	ldr	r1, [r4, #28]
   170f4:	4630      	mov	r0, r6
   170f6:	4798      	blx	r3
   170f8:	2800      	cmp	r0, #0
   170fa:	bfb8      	it	lt
   170fc:	f04f 35ff 	movlt.w	r5, #4294967295
   17100:	89a3      	ldrh	r3, [r4, #12]
   17102:	061a      	lsls	r2, r3, #24
   17104:	d43c      	bmi.n	17180 <_fclose_r+0xbc>
   17106:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17108:	b141      	cbz	r1, 1711c <_fclose_r+0x58>
   1710a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1710e:	4299      	cmp	r1, r3
   17110:	d002      	beq.n	17118 <_fclose_r+0x54>
   17112:	4630      	mov	r0, r6
   17114:	f7fb fb46 	bl	127a4 <_free_r>
   17118:	2300      	movs	r3, #0
   1711a:	6323      	str	r3, [r4, #48]	; 0x30
   1711c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1711e:	b121      	cbz	r1, 1712a <_fclose_r+0x66>
   17120:	4630      	mov	r0, r6
   17122:	f7fb fb3f 	bl	127a4 <_free_r>
   17126:	2300      	movs	r3, #0
   17128:	6463      	str	r3, [r4, #68]	; 0x44
   1712a:	f7fa fc2b 	bl	11984 <__sfp_lock_acquire>
   1712e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17130:	2200      	movs	r2, #0
   17132:	07db      	lsls	r3, r3, #31
   17134:	81a2      	strh	r2, [r4, #12]
   17136:	d51f      	bpl.n	17178 <_fclose_r+0xb4>
   17138:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1713a:	f7fa fff5 	bl	12128 <__retarget_lock_close_recursive>
   1713e:	f7fa fc27 	bl	11990 <__sfp_lock_release>
   17142:	4628      	mov	r0, r5
   17144:	bd70      	pop	{r4, r5, r6, pc}
   17146:	89a3      	ldrh	r3, [r4, #12]
   17148:	0599      	lsls	r1, r3, #22
   1714a:	d4cb      	bmi.n	170e4 <_fclose_r+0x20>
   1714c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1714e:	f7fa ffed 	bl	1212c <__retarget_lock_acquire_recursive>
   17152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17156:	2b00      	cmp	r3, #0
   17158:	d1c4      	bne.n	170e4 <_fclose_r+0x20>
   1715a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   1715c:	f015 0501 	ands.w	r5, r5, #1
   17160:	d005      	beq.n	1716e <_fclose_r+0xaa>
   17162:	2500      	movs	r5, #0
   17164:	4628      	mov	r0, r5
   17166:	bd70      	pop	{r4, r5, r6, pc}
   17168:	f7fa fbee 	bl	11948 <__sinit>
   1716c:	e7b3      	b.n	170d6 <_fclose_r+0x12>
   1716e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17170:	f7fa ffde 	bl	12130 <__retarget_lock_release_recursive>
   17174:	4628      	mov	r0, r5
   17176:	bd70      	pop	{r4, r5, r6, pc}
   17178:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1717a:	f7fa ffd9 	bl	12130 <__retarget_lock_release_recursive>
   1717e:	e7db      	b.n	17138 <_fclose_r+0x74>
   17180:	6921      	ldr	r1, [r4, #16]
   17182:	4630      	mov	r0, r6
   17184:	f7fb fb0e 	bl	127a4 <_free_r>
   17188:	e7bd      	b.n	17106 <_fclose_r+0x42>
   1718a:	bf00      	nop

0001718c <__sflush_r>:
   1718c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   17190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17194:	460c      	mov	r4, r1
   17196:	0711      	lsls	r1, r2, #28
   17198:	4680      	mov	r8, r0
   1719a:	d447      	bmi.n	1722c <__sflush_r+0xa0>
   1719c:	6863      	ldr	r3, [r4, #4]
   1719e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   171a2:	2b00      	cmp	r3, #0
   171a4:	81a2      	strh	r2, [r4, #12]
   171a6:	dd5e      	ble.n	17266 <__sflush_r+0xda>
   171a8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   171aa:	2d00      	cmp	r5, #0
   171ac:	d058      	beq.n	17260 <__sflush_r+0xd4>
   171ae:	2300      	movs	r3, #0
   171b0:	f8d8 6000 	ldr.w	r6, [r8]
   171b4:	f8c8 3000 	str.w	r3, [r8]
   171b8:	b293      	uxth	r3, r2
   171ba:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   171be:	d156      	bne.n	1726e <__sflush_r+0xe2>
   171c0:	2301      	movs	r3, #1
   171c2:	69e1      	ldr	r1, [r4, #28]
   171c4:	4640      	mov	r0, r8
   171c6:	47a8      	blx	r5
   171c8:	1c43      	adds	r3, r0, #1
   171ca:	d067      	beq.n	1729c <__sflush_r+0x110>
   171cc:	89a3      	ldrh	r3, [r4, #12]
   171ce:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   171d0:	075f      	lsls	r7, r3, #29
   171d2:	d505      	bpl.n	171e0 <__sflush_r+0x54>
   171d4:	6863      	ldr	r3, [r4, #4]
   171d6:	1ac0      	subs	r0, r0, r3
   171d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   171da:	b10b      	cbz	r3, 171e0 <__sflush_r+0x54>
   171dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   171de:	1ac0      	subs	r0, r0, r3
   171e0:	69e1      	ldr	r1, [r4, #28]
   171e2:	4602      	mov	r2, r0
   171e4:	2300      	movs	r3, #0
   171e6:	4640      	mov	r0, r8
   171e8:	47a8      	blx	r5
   171ea:	1c41      	adds	r1, r0, #1
   171ec:	d141      	bne.n	17272 <__sflush_r+0xe6>
   171ee:	f8d8 3000 	ldr.w	r3, [r8]
   171f2:	2b00      	cmp	r3, #0
   171f4:	d03d      	beq.n	17272 <__sflush_r+0xe6>
   171f6:	2b1d      	cmp	r3, #29
   171f8:	d001      	beq.n	171fe <__sflush_r+0x72>
   171fa:	2b16      	cmp	r3, #22
   171fc:	d156      	bne.n	172ac <__sflush_r+0x120>
   171fe:	89a3      	ldrh	r3, [r4, #12]
   17200:	6922      	ldr	r2, [r4, #16]
   17202:	6022      	str	r2, [r4, #0]
   17204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   17208:	2100      	movs	r1, #0
   1720a:	6061      	str	r1, [r4, #4]
   1720c:	81a3      	strh	r3, [r4, #12]
   1720e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17210:	f8c8 6000 	str.w	r6, [r8]
   17214:	b321      	cbz	r1, 17260 <__sflush_r+0xd4>
   17216:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1721a:	4299      	cmp	r1, r3
   1721c:	d002      	beq.n	17224 <__sflush_r+0x98>
   1721e:	4640      	mov	r0, r8
   17220:	f7fb fac0 	bl	127a4 <_free_r>
   17224:	2000      	movs	r0, #0
   17226:	6320      	str	r0, [r4, #48]	; 0x30
   17228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1722c:	6926      	ldr	r6, [r4, #16]
   1722e:	b1be      	cbz	r6, 17260 <__sflush_r+0xd4>
   17230:	b293      	uxth	r3, r2
   17232:	6825      	ldr	r5, [r4, #0]
   17234:	6026      	str	r6, [r4, #0]
   17236:	079a      	lsls	r2, r3, #30
   17238:	bf0c      	ite	eq
   1723a:	6963      	ldreq	r3, [r4, #20]
   1723c:	2300      	movne	r3, #0
   1723e:	1bad      	subs	r5, r5, r6
   17240:	60a3      	str	r3, [r4, #8]
   17242:	e00b      	b.n	1725c <__sflush_r+0xd0>
   17244:	462b      	mov	r3, r5
   17246:	4632      	mov	r2, r6
   17248:	69e1      	ldr	r1, [r4, #28]
   1724a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1724c:	4640      	mov	r0, r8
   1724e:	47b8      	blx	r7
   17250:	f1b0 0c00 	subs.w	ip, r0, #0
   17254:	eba5 050c 	sub.w	r5, r5, ip
   17258:	4466      	add	r6, ip
   1725a:	dd17      	ble.n	1728c <__sflush_r+0x100>
   1725c:	2d00      	cmp	r5, #0
   1725e:	dcf1      	bgt.n	17244 <__sflush_r+0xb8>
   17260:	2000      	movs	r0, #0
   17262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17266:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17268:	2b00      	cmp	r3, #0
   1726a:	dc9d      	bgt.n	171a8 <__sflush_r+0x1c>
   1726c:	e7f8      	b.n	17260 <__sflush_r+0xd4>
   1726e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   17270:	e7ae      	b.n	171d0 <__sflush_r+0x44>
   17272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17276:	6922      	ldr	r2, [r4, #16]
   17278:	6022      	str	r2, [r4, #0]
   1727a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1727e:	81a3      	strh	r3, [r4, #12]
   17280:	2200      	movs	r2, #0
   17282:	04db      	lsls	r3, r3, #19
   17284:	6062      	str	r2, [r4, #4]
   17286:	d5c2      	bpl.n	1720e <__sflush_r+0x82>
   17288:	6520      	str	r0, [r4, #80]	; 0x50
   1728a:	e7c0      	b.n	1720e <__sflush_r+0x82>
   1728c:	89a3      	ldrh	r3, [r4, #12]
   1728e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17292:	f04f 30ff 	mov.w	r0, #4294967295
   17296:	81a3      	strh	r3, [r4, #12]
   17298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1729c:	f8d8 3000 	ldr.w	r3, [r8]
   172a0:	2b00      	cmp	r3, #0
   172a2:	d093      	beq.n	171cc <__sflush_r+0x40>
   172a4:	2b1d      	cmp	r3, #29
   172a6:	d006      	beq.n	172b6 <__sflush_r+0x12a>
   172a8:	2b16      	cmp	r3, #22
   172aa:	d004      	beq.n	172b6 <__sflush_r+0x12a>
   172ac:	89a3      	ldrh	r3, [r4, #12]
   172ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   172b2:	81a3      	strh	r3, [r4, #12]
   172b4:	e7d5      	b.n	17262 <__sflush_r+0xd6>
   172b6:	f8c8 6000 	str.w	r6, [r8]
   172ba:	e7d1      	b.n	17260 <__sflush_r+0xd4>

000172bc <_fflush_r>:
   172bc:	b538      	push	{r3, r4, r5, lr}
   172be:	460c      	mov	r4, r1
   172c0:	4605      	mov	r5, r0
   172c2:	b108      	cbz	r0, 172c8 <_fflush_r+0xc>
   172c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   172c6:	b303      	cbz	r3, 1730a <_fflush_r+0x4e>
   172c8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   172cc:	b188      	cbz	r0, 172f2 <_fflush_r+0x36>
   172ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   172d0:	07db      	lsls	r3, r3, #31
   172d2:	d401      	bmi.n	172d8 <_fflush_r+0x1c>
   172d4:	0581      	lsls	r1, r0, #22
   172d6:	d50f      	bpl.n	172f8 <_fflush_r+0x3c>
   172d8:	4628      	mov	r0, r5
   172da:	4621      	mov	r1, r4
   172dc:	f7ff ff56 	bl	1718c <__sflush_r>
   172e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   172e2:	07da      	lsls	r2, r3, #31
   172e4:	4605      	mov	r5, r0
   172e6:	d402      	bmi.n	172ee <_fflush_r+0x32>
   172e8:	89a3      	ldrh	r3, [r4, #12]
   172ea:	059b      	lsls	r3, r3, #22
   172ec:	d508      	bpl.n	17300 <_fflush_r+0x44>
   172ee:	4628      	mov	r0, r5
   172f0:	bd38      	pop	{r3, r4, r5, pc}
   172f2:	4605      	mov	r5, r0
   172f4:	4628      	mov	r0, r5
   172f6:	bd38      	pop	{r3, r4, r5, pc}
   172f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   172fa:	f7fa ff17 	bl	1212c <__retarget_lock_acquire_recursive>
   172fe:	e7eb      	b.n	172d8 <_fflush_r+0x1c>
   17300:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17302:	f7fa ff15 	bl	12130 <__retarget_lock_release_recursive>
   17306:	4628      	mov	r0, r5
   17308:	bd38      	pop	{r3, r4, r5, pc}
   1730a:	f7fa fb1d 	bl	11948 <__sinit>
   1730e:	e7db      	b.n	172c8 <_fflush_r+0xc>

00017310 <__sccl>:
   17310:	b570      	push	{r4, r5, r6, lr}
   17312:	780c      	ldrb	r4, [r1, #0]
   17314:	2c5e      	cmp	r4, #94	; 0x5e
   17316:	4686      	mov	lr, r0
   17318:	d01e      	beq.n	17358 <__sccl+0x48>
   1731a:	2200      	movs	r2, #0
   1731c:	1c48      	adds	r0, r1, #1
   1731e:	4694      	mov	ip, r2
   17320:	f10e 33ff 	add.w	r3, lr, #4294967295
   17324:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   17328:	f803 2f01 	strb.w	r2, [r3, #1]!
   1732c:	428b      	cmp	r3, r1
   1732e:	d1fb      	bne.n	17328 <__sccl+0x18>
   17330:	b184      	cbz	r4, 17354 <__sccl+0x44>
   17332:	f08c 0101 	eor.w	r1, ip, #1
   17336:	f80e 1004 	strb.w	r1, [lr, r4]
   1733a:	1c45      	adds	r5, r0, #1
   1733c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   17340:	2b2d      	cmp	r3, #45	; 0x2d
   17342:	d00e      	beq.n	17362 <__sccl+0x52>
   17344:	2b5d      	cmp	r3, #93	; 0x5d
   17346:	d003      	beq.n	17350 <__sccl+0x40>
   17348:	b11b      	cbz	r3, 17352 <__sccl+0x42>
   1734a:	461c      	mov	r4, r3
   1734c:	4628      	mov	r0, r5
   1734e:	e7f2      	b.n	17336 <__sccl+0x26>
   17350:	4628      	mov	r0, r5
   17352:	bd70      	pop	{r4, r5, r6, pc}
   17354:	3801      	subs	r0, #1
   17356:	bd70      	pop	{r4, r5, r6, pc}
   17358:	2201      	movs	r2, #1
   1735a:	784c      	ldrb	r4, [r1, #1]
   1735c:	1c88      	adds	r0, r1, #2
   1735e:	4694      	mov	ip, r2
   17360:	e7de      	b.n	17320 <__sccl+0x10>
   17362:	f890 c001 	ldrb.w	ip, [r0, #1]
   17366:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   1736a:	d0ee      	beq.n	1734a <__sccl+0x3a>
   1736c:	4564      	cmp	r4, ip
   1736e:	dcec      	bgt.n	1734a <__sccl+0x3a>
   17370:	1c66      	adds	r6, r4, #1
   17372:	3002      	adds	r0, #2
   17374:	eb0e 0206 	add.w	r2, lr, r6
   17378:	f802 1b01 	strb.w	r1, [r2], #1
   1737c:	eba2 030e 	sub.w	r3, r2, lr
   17380:	3b01      	subs	r3, #1
   17382:	459c      	cmp	ip, r3
   17384:	dcf8      	bgt.n	17378 <__sccl+0x68>
   17386:	ebac 0304 	sub.w	r3, ip, r4
   1738a:	3b01      	subs	r3, #1
   1738c:	4564      	cmp	r4, ip
   1738e:	bfa8      	it	ge
   17390:	2300      	movge	r3, #0
   17392:	3502      	adds	r5, #2
   17394:	199c      	adds	r4, r3, r6
   17396:	e7d1      	b.n	1733c <__sccl+0x2c>

00017398 <stpncpy>:
   17398:	ea41 0300 	orr.w	r3, r1, r0
   1739c:	079b      	lsls	r3, r3, #30
   1739e:	b430      	push	{r4, r5}
   173a0:	d101      	bne.n	173a6 <stpncpy+0xe>
   173a2:	2a03      	cmp	r2, #3
   173a4:	d80f      	bhi.n	173c6 <stpncpy+0x2e>
   173a6:	f101 3cff 	add.w	ip, r1, #4294967295
   173aa:	e007      	b.n	173bc <stpncpy+0x24>
   173ac:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   173b0:	f803 1b01 	strb.w	r1, [r3], #1
   173b4:	1e54      	subs	r4, r2, #1
   173b6:	b1c1      	cbz	r1, 173ea <stpncpy+0x52>
   173b8:	4622      	mov	r2, r4
   173ba:	4618      	mov	r0, r3
   173bc:	4603      	mov	r3, r0
   173be:	2a00      	cmp	r2, #0
   173c0:	d1f4      	bne.n	173ac <stpncpy+0x14>
   173c2:	bc30      	pop	{r4, r5}
   173c4:	4770      	bx	lr
   173c6:	460b      	mov	r3, r1
   173c8:	4619      	mov	r1, r3
   173ca:	f853 5b04 	ldr.w	r5, [r3], #4
   173ce:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   173d2:	ea24 0405 	bic.w	r4, r4, r5
   173d6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   173da:	d1e4      	bne.n	173a6 <stpncpy+0xe>
   173dc:	3a04      	subs	r2, #4
   173de:	2a03      	cmp	r2, #3
   173e0:	f840 5b04 	str.w	r5, [r0], #4
   173e4:	4619      	mov	r1, r3
   173e6:	d8ef      	bhi.n	173c8 <stpncpy+0x30>
   173e8:	e7dd      	b.n	173a6 <stpncpy+0xe>
   173ea:	4402      	add	r2, r0
   173ec:	2c00      	cmp	r4, #0
   173ee:	d0e8      	beq.n	173c2 <stpncpy+0x2a>
   173f0:	f803 1b01 	strb.w	r1, [r3], #1
   173f4:	4293      	cmp	r3, r2
   173f6:	d1fb      	bne.n	173f0 <stpncpy+0x58>
   173f8:	bc30      	pop	{r4, r5}
   173fa:	4770      	bx	lr

000173fc <_localeconv_r>:
   173fc:	4800      	ldr	r0, [pc, #0]	; (17400 <_localeconv_r+0x4>)
   173fe:	4770      	bx	lr
   17400:	20008b1c 	.word	0x20008b1c
   17404:	00000000 	.word	0x00000000

00017408 <frexp>:
   17408:	b430      	push	{r4, r5}
   1740a:	b082      	sub	sp, #8
   1740c:	ed8d 0b00 	vstr	d0, [sp]
   17410:	9a01      	ldr	r2, [sp, #4]
   17412:	4c19      	ldr	r4, [pc, #100]	; (17478 <frexp+0x70>)
   17414:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   17418:	2100      	movs	r1, #0
   1741a:	42a3      	cmp	r3, r4
   1741c:	6001      	str	r1, [r0, #0]
   1741e:	dc21      	bgt.n	17464 <frexp+0x5c>
   17420:	9c00      	ldr	r4, [sp, #0]
   17422:	431c      	orrs	r4, r3
   17424:	d01e      	beq.n	17464 <frexp+0x5c>
   17426:	4c15      	ldr	r4, [pc, #84]	; (1747c <frexp+0x74>)
   17428:	4014      	ands	r4, r2
   1742a:	b954      	cbnz	r4, 17442 <frexp+0x3a>
   1742c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 17470 <frexp+0x68>
   17430:	ee20 7b07 	vmul.f64	d7, d0, d7
   17434:	ed8d 7b00 	vstr	d7, [sp]
   17438:	9a01      	ldr	r2, [sp, #4]
   1743a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   1743e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   17442:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   17446:	e9dd 4500 	ldrd	r4, r5, [sp]
   1744a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   1744e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   17452:	151b      	asrs	r3, r3, #20
   17454:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   17458:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1745c:	e9cd 4500 	strd	r4, r5, [sp]
   17460:	440b      	add	r3, r1
   17462:	6003      	str	r3, [r0, #0]
   17464:	ed9d 0b00 	vldr	d0, [sp]
   17468:	b002      	add	sp, #8
   1746a:	bc30      	pop	{r4, r5}
   1746c:	4770      	bx	lr
   1746e:	bf00      	nop
   17470:	00000000 	.word	0x00000000
   17474:	43500000 	.word	0x43500000
   17478:	7fefffff 	.word	0x7fefffff
   1747c:	7ff00000 	.word	0x7ff00000

00017480 <__assert_func>:
   17480:	b500      	push	{lr}
   17482:	4c0b      	ldr	r4, [pc, #44]	; (174b0 <__assert_func+0x30>)
   17484:	6825      	ldr	r5, [r4, #0]
   17486:	4614      	mov	r4, r2
   17488:	68ee      	ldr	r6, [r5, #12]
   1748a:	461a      	mov	r2, r3
   1748c:	b085      	sub	sp, #20
   1748e:	4603      	mov	r3, r0
   17490:	460d      	mov	r5, r1
   17492:	b14c      	cbz	r4, 174a8 <__assert_func+0x28>
   17494:	4907      	ldr	r1, [pc, #28]	; (174b4 <__assert_func+0x34>)
   17496:	9500      	str	r5, [sp, #0]
   17498:	e9cd 1401 	strd	r1, r4, [sp, #4]
   1749c:	4630      	mov	r0, r6
   1749e:	4906      	ldr	r1, [pc, #24]	; (174b8 <__assert_func+0x38>)
   174a0:	f001 fabe 	bl	18a20 <fiprintf>
   174a4:	f7f6 ff96 	bl	e3d4 <abort>
   174a8:	4904      	ldr	r1, [pc, #16]	; (174bc <__assert_func+0x3c>)
   174aa:	460c      	mov	r4, r1
   174ac:	e7f3      	b.n	17496 <__assert_func+0x16>
   174ae:	bf00      	nop
   174b0:	20008fb4 	.word	0x20008fb4
   174b4:	20000cbc 	.word	0x20000cbc
   174b8:	20000ccc 	.word	0x20000ccc
   174bc:	200004ec 	.word	0x200004ec

000174c0 <_calloc_r>:
   174c0:	b538      	push	{r3, r4, r5, lr}
   174c2:	fba1 1402 	umull	r1, r4, r1, r2
   174c6:	bb8c      	cbnz	r4, 1752c <_calloc_r+0x6c>
   174c8:	f7f8 fd06 	bl	fed8 <_malloc_r>
   174cc:	4605      	mov	r5, r0
   174ce:	b1e0      	cbz	r0, 1750a <_calloc_r+0x4a>
   174d0:	f850 2c04 	ldr.w	r2, [r0, #-4]
   174d4:	f022 0203 	bic.w	r2, r2, #3
   174d8:	3a04      	subs	r2, #4
   174da:	2a24      	cmp	r2, #36	; 0x24
   174dc:	d817      	bhi.n	1750e <_calloc_r+0x4e>
   174de:	2a13      	cmp	r2, #19
   174e0:	d91a      	bls.n	17518 <_calloc_r+0x58>
   174e2:	2a1b      	cmp	r2, #27
   174e4:	e9c0 4400 	strd	r4, r4, [r0]
   174e8:	d91d      	bls.n	17526 <_calloc_r+0x66>
   174ea:	2a24      	cmp	r2, #36	; 0x24
   174ec:	bf14      	ite	ne
   174ee:	f100 0210 	addne.w	r2, r0, #16
   174f2:	f100 0218 	addeq.w	r2, r0, #24
   174f6:	f04f 0300 	mov.w	r3, #0
   174fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
   174fe:	bf04      	itt	eq
   17500:	6104      	streq	r4, [r0, #16]
   17502:	6144      	streq	r4, [r0, #20]
   17504:	e9c2 3300 	strd	r3, r3, [r2]
   17508:	6093      	str	r3, [r2, #8]
   1750a:	4628      	mov	r0, r5
   1750c:	bd38      	pop	{r3, r4, r5, pc}
   1750e:	4621      	mov	r1, r4
   17510:	f7fa fc52 	bl	11db8 <memset>
   17514:	4628      	mov	r0, r5
   17516:	bd38      	pop	{r3, r4, r5, pc}
   17518:	4602      	mov	r2, r0
   1751a:	2300      	movs	r3, #0
   1751c:	e9c2 3300 	strd	r3, r3, [r2]
   17520:	6093      	str	r3, [r2, #8]
   17522:	4628      	mov	r0, r5
   17524:	bd38      	pop	{r3, r4, r5, pc}
   17526:	f100 0208 	add.w	r2, r0, #8
   1752a:	e7f6      	b.n	1751a <_calloc_r+0x5a>
   1752c:	f7fa fdd0 	bl	120d0 <__errno>
   17530:	230c      	movs	r3, #12
   17532:	2500      	movs	r5, #0
   17534:	6003      	str	r3, [r0, #0]
   17536:	e7e8      	b.n	1750a <_calloc_r+0x4a>

00017538 <quorem>:
   17538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1753c:	6903      	ldr	r3, [r0, #16]
   1753e:	690c      	ldr	r4, [r1, #16]
   17540:	42a3      	cmp	r3, r4
   17542:	b083      	sub	sp, #12
   17544:	f2c0 8087 	blt.w	17656 <quorem+0x11e>
   17548:	3c01      	subs	r4, #1
   1754a:	f101 0514 	add.w	r5, r1, #20
   1754e:	00a3      	lsls	r3, r4, #2
   17550:	f100 0814 	add.w	r8, r0, #20
   17554:	9300      	str	r3, [sp, #0]
   17556:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1755a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1755e:	3301      	adds	r3, #1
   17560:	4681      	mov	r9, r0
   17562:	429a      	cmp	r2, r3
   17564:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   17568:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   1756c:	9001      	str	r0, [sp, #4]
   1756e:	fbb2 f6f3 	udiv	r6, r2, r3
   17572:	d33b      	bcc.n	175ec <quorem+0xb4>
   17574:	f04f 0c00 	mov.w	ip, #0
   17578:	46ae      	mov	lr, r5
   1757a:	4640      	mov	r0, r8
   1757c:	46e2      	mov	sl, ip
   1757e:	4663      	mov	r3, ip
   17580:	f85e bb04 	ldr.w	fp, [lr], #4
   17584:	6802      	ldr	r2, [r0, #0]
   17586:	fa1f fc8b 	uxth.w	ip, fp
   1758a:	fb06 330c 	mla	r3, r6, ip, r3
   1758e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   17592:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   17596:	fb06 cc0b 	mla	ip, r6, fp, ip
   1759a:	b29b      	uxth	r3, r3
   1759c:	ebaa 0303 	sub.w	r3, sl, r3
   175a0:	fa1f fa8c 	uxth.w	sl, ip
   175a4:	fa13 f382 	uxtah	r3, r3, r2
   175a8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   175ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
   175b0:	b29b      	uxth	r3, r3
   175b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   175b6:	4577      	cmp	r7, lr
   175b8:	f840 3b04 	str.w	r3, [r0], #4
   175bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
   175c0:	ea4f 431c 	mov.w	r3, ip, lsr #16
   175c4:	d2dc      	bcs.n	17580 <quorem+0x48>
   175c6:	9b00      	ldr	r3, [sp, #0]
   175c8:	f858 3003 	ldr.w	r3, [r8, r3]
   175cc:	b973      	cbnz	r3, 175ec <quorem+0xb4>
   175ce:	9b01      	ldr	r3, [sp, #4]
   175d0:	3b04      	subs	r3, #4
   175d2:	4598      	cmp	r8, r3
   175d4:	d304      	bcc.n	175e0 <quorem+0xa8>
   175d6:	e007      	b.n	175e8 <quorem+0xb0>
   175d8:	4598      	cmp	r8, r3
   175da:	f104 34ff 	add.w	r4, r4, #4294967295
   175de:	d203      	bcs.n	175e8 <quorem+0xb0>
   175e0:	f853 2904 	ldr.w	r2, [r3], #-4
   175e4:	2a00      	cmp	r2, #0
   175e6:	d0f7      	beq.n	175d8 <quorem+0xa0>
   175e8:	f8c9 4010 	str.w	r4, [r9, #16]
   175ec:	4648      	mov	r0, r9
   175ee:	f7fc f8e3 	bl	137b8 <__mcmp>
   175f2:	2800      	cmp	r0, #0
   175f4:	db2b      	blt.n	1764e <quorem+0x116>
   175f6:	3601      	adds	r6, #1
   175f8:	4641      	mov	r1, r8
   175fa:	2300      	movs	r3, #0
   175fc:	f855 0b04 	ldr.w	r0, [r5], #4
   17600:	f8d1 c000 	ldr.w	ip, [r1]
   17604:	b282      	uxth	r2, r0
   17606:	1a9a      	subs	r2, r3, r2
   17608:	0c03      	lsrs	r3, r0, #16
   1760a:	fa12 f28c 	uxtah	r2, r2, ip
   1760e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   17612:	eb03 4322 	add.w	r3, r3, r2, asr #16
   17616:	b292      	uxth	r2, r2
   17618:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1761c:	42af      	cmp	r7, r5
   1761e:	f841 2b04 	str.w	r2, [r1], #4
   17622:	ea4f 4323 	mov.w	r3, r3, asr #16
   17626:	d2e9      	bcs.n	175fc <quorem+0xc4>
   17628:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1762c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   17630:	b96a      	cbnz	r2, 1764e <quorem+0x116>
   17632:	3b04      	subs	r3, #4
   17634:	4598      	cmp	r8, r3
   17636:	d304      	bcc.n	17642 <quorem+0x10a>
   17638:	e007      	b.n	1764a <quorem+0x112>
   1763a:	4598      	cmp	r8, r3
   1763c:	f104 34ff 	add.w	r4, r4, #4294967295
   17640:	d203      	bcs.n	1764a <quorem+0x112>
   17642:	f853 2904 	ldr.w	r2, [r3], #-4
   17646:	2a00      	cmp	r2, #0
   17648:	d0f7      	beq.n	1763a <quorem+0x102>
   1764a:	f8c9 4010 	str.w	r4, [r9, #16]
   1764e:	4630      	mov	r0, r6
   17650:	b003      	add	sp, #12
   17652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17656:	2000      	movs	r0, #0
   17658:	b003      	add	sp, #12
   1765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1765e:	bf00      	nop

00017660 <_dtoa_r>:
   17660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17664:	ed2d 8b02 	vpush	{d8}
   17668:	b08f      	sub	sp, #60	; 0x3c
   1766a:	ed8d 0b02 	vstr	d0, [sp, #8]
   1766e:	9101      	str	r1, [sp, #4]
   17670:	6b81      	ldr	r1, [r0, #56]	; 0x38
   17672:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   17674:	9305      	str	r3, [sp, #20]
   17676:	ec57 6b10 	vmov	r6, r7, d0
   1767a:	4604      	mov	r4, r0
   1767c:	4693      	mov	fp, r2
   1767e:	b141      	cbz	r1, 17692 <_dtoa_r+0x32>
   17680:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   17682:	604a      	str	r2, [r1, #4]
   17684:	2301      	movs	r3, #1
   17686:	4093      	lsls	r3, r2
   17688:	608b      	str	r3, [r1, #8]
   1768a:	f7fb fddd 	bl	13248 <_Bfree>
   1768e:	2300      	movs	r3, #0
   17690:	63a3      	str	r3, [r4, #56]	; 0x38
   17692:	f1b7 0800 	subs.w	r8, r7, #0
   17696:	bfb4      	ite	lt
   17698:	2301      	movlt	r3, #1
   1769a:	2300      	movge	r3, #0
   1769c:	602b      	str	r3, [r5, #0]
   1769e:	4bbe      	ldr	r3, [pc, #760]	; (17998 <_dtoa_r+0x338>)
   176a0:	bfbc      	itt	lt
   176a2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   176a6:	f8cd 800c 	strlt.w	r8, [sp, #12]
   176aa:	ea33 0308 	bics.w	r3, r3, r8
   176ae:	f000 809f 	beq.w	177f0 <_dtoa_r+0x190>
   176b2:	ed9d 8b02 	vldr	d8, [sp, #8]
   176b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
   176ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   176be:	d111      	bne.n	176e4 <_dtoa_r+0x84>
   176c0:	9a05      	ldr	r2, [sp, #20]
   176c2:	2301      	movs	r3, #1
   176c4:	6013      	str	r3, [r2, #0]
   176c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   176c8:	2b00      	cmp	r3, #0
   176ca:	f000 823f 	beq.w	17b4c <_dtoa_r+0x4ec>
   176ce:	4bb3      	ldr	r3, [pc, #716]	; (1799c <_dtoa_r+0x33c>)
   176d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   176d2:	6013      	str	r3, [r2, #0]
   176d4:	3b01      	subs	r3, #1
   176d6:	9300      	str	r3, [sp, #0]
   176d8:	9800      	ldr	r0, [sp, #0]
   176da:	b00f      	add	sp, #60	; 0x3c
   176dc:	ecbd 8b02 	vpop	{d8}
   176e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176e4:	aa0c      	add	r2, sp, #48	; 0x30
   176e6:	a90d      	add	r1, sp, #52	; 0x34
   176e8:	4620      	mov	r0, r4
   176ea:	eeb0 0b48 	vmov.f64	d0, d8
   176ee:	f7fc f9c3 	bl	13a78 <__d2b>
   176f2:	ea5f 5318 	movs.w	r3, r8, lsr #20
   176f6:	4605      	mov	r5, r0
   176f8:	f040 8092 	bne.w	17820 <_dtoa_r+0x1c0>
   176fc:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   17700:	440b      	add	r3, r1
   17702:	f203 4232 	addw	r2, r3, #1074	; 0x432
   17706:	2a20      	cmp	r2, #32
   17708:	f340 82fa 	ble.w	17d00 <_dtoa_r+0x6a0>
   1770c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   17710:	fa08 f802 	lsl.w	r8, r8, r2
   17714:	f203 4212 	addw	r2, r3, #1042	; 0x412
   17718:	40d6      	lsrs	r6, r2
   1771a:	ea48 0206 	orr.w	r2, r8, r6
   1771e:	ee07 2a10 	vmov	s14, r2
   17722:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   17726:	1e58      	subs	r0, r3, #1
   17728:	ee17 6a90 	vmov	r6, s15
   1772c:	ec53 2b17 	vmov	r2, r3, d7
   17730:	f04f 0a01 	mov.w	sl, #1
   17734:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   17738:	ed9f 3b91 	vldr	d3, [pc, #580]	; 17980 <_dtoa_r+0x320>
   1773c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 17988 <_dtoa_r+0x328>
   17740:	ed9f 5b93 	vldr	d5, [pc, #588]	; 17990 <_dtoa_r+0x330>
   17744:	ee06 0a90 	vmov	s13, r0
   17748:	ec43 2b12 	vmov	d2, r2, r3
   1774c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   17750:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   17754:	ee32 6b46 	vsub.f64	d6, d2, d6
   17758:	eea6 7b03 	vfma.f64	d7, d6, d3
   1775c:	eea4 7b05 	vfma.f64	d7, d4, d5
   17760:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   17764:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   17768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1776c:	ee16 7a90 	vmov	r7, s13
   17770:	d508      	bpl.n	17784 <_dtoa_r+0x124>
   17772:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   17776:	eeb4 6b47 	vcmp.f64	d6, d7
   1777a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1777e:	bf18      	it	ne
   17780:	f107 37ff 	addne.w	r7, r7, #4294967295
   17784:	2f16      	cmp	r7, #22
   17786:	f200 8145 	bhi.w	17a14 <_dtoa_r+0x3b4>
   1778a:	4b85      	ldr	r3, [pc, #532]	; (179a0 <_dtoa_r+0x340>)
   1778c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   17790:	ed93 7b00 	vldr	d7, [r3]
   17794:	eeb4 8bc7 	vcmpe.f64	d8, d7
   17798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1779c:	d557      	bpl.n	1784e <_dtoa_r+0x1ee>
   1779e:	1a09      	subs	r1, r1, r0
   177a0:	2300      	movs	r3, #0
   177a2:	f1b1 0801 	subs.w	r8, r1, #1
   177a6:	f107 37ff 	add.w	r7, r7, #4294967295
   177aa:	930a      	str	r3, [sp, #40]	; 0x28
   177ac:	f100 8139 	bmi.w	17a22 <_dtoa_r+0x3c2>
   177b0:	2300      	movs	r3, #0
   177b2:	9306      	str	r3, [sp, #24]
   177b4:	2f00      	cmp	r7, #0
   177b6:	da52      	bge.n	1785e <_dtoa_r+0x1fe>
   177b8:	9b06      	ldr	r3, [sp, #24]
   177ba:	9704      	str	r7, [sp, #16]
   177bc:	1bdb      	subs	r3, r3, r7
   177be:	9306      	str	r3, [sp, #24]
   177c0:	427b      	negs	r3, r7
   177c2:	9308      	str	r3, [sp, #32]
   177c4:	9b01      	ldr	r3, [sp, #4]
   177c6:	2b09      	cmp	r3, #9
   177c8:	f04f 0700 	mov.w	r7, #0
   177cc:	d84e      	bhi.n	1786c <_dtoa_r+0x20c>
   177ce:	2b05      	cmp	r3, #5
   177d0:	f340 829d 	ble.w	17d0e <_dtoa_r+0x6ae>
   177d4:	3b04      	subs	r3, #4
   177d6:	9301      	str	r3, [sp, #4]
   177d8:	2600      	movs	r6, #0
   177da:	9b01      	ldr	r3, [sp, #4]
   177dc:	1e9a      	subs	r2, r3, #2
   177de:	2a03      	cmp	r2, #3
   177e0:	f200 8125 	bhi.w	17a2e <_dtoa_r+0x3ce>
   177e4:	e8df f012 	tbh	[pc, r2, lsl #1]
   177e8:	03a703aa 	.word	0x03a703aa
   177ec:	037e039d 	.word	0x037e039d
   177f0:	9a05      	ldr	r2, [sp, #20]
   177f2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   177f6:	f242 730f 	movw	r3, #9999	; 0x270f
   177fa:	ea58 0806 	orrs.w	r8, r8, r6
   177fe:	6013      	str	r3, [r2, #0]
   17800:	d11e      	bne.n	17840 <_dtoa_r+0x1e0>
   17802:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17804:	2b00      	cmp	r3, #0
   17806:	f000 8591 	beq.w	1832c <_dtoa_r+0xccc>
   1780a:	4b66      	ldr	r3, [pc, #408]	; (179a4 <_dtoa_r+0x344>)
   1780c:	9300      	str	r3, [sp, #0]
   1780e:	3308      	adds	r3, #8
   17810:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17812:	9800      	ldr	r0, [sp, #0]
   17814:	6013      	str	r3, [r2, #0]
   17816:	b00f      	add	sp, #60	; 0x3c
   17818:	ecbd 8b02 	vpop	{d8}
   1781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17820:	ee18 6a90 	vmov	r6, s17
   17824:	f3c6 0613 	ubfx	r6, r6, #0, #20
   17828:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   1782c:	ec53 2b18 	vmov	r2, r3, d8
   17830:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   17834:	990c      	ldr	r1, [sp, #48]	; 0x30
   17836:	f04f 0a00 	mov.w	sl, #0
   1783a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1783e:	e77b      	b.n	17738 <_dtoa_r+0xd8>
   17840:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17842:	2b00      	cmp	r3, #0
   17844:	f040 833b 	bne.w	17ebe <_dtoa_r+0x85e>
   17848:	4b57      	ldr	r3, [pc, #348]	; (179a8 <_dtoa_r+0x348>)
   1784a:	9300      	str	r3, [sp, #0]
   1784c:	e744      	b.n	176d8 <_dtoa_r+0x78>
   1784e:	1a09      	subs	r1, r1, r0
   17850:	2300      	movs	r3, #0
   17852:	f1b1 0801 	subs.w	r8, r1, #1
   17856:	930a      	str	r3, [sp, #40]	; 0x28
   17858:	f100 80e3 	bmi.w	17a22 <_dtoa_r+0x3c2>
   1785c:	9306      	str	r3, [sp, #24]
   1785e:	2300      	movs	r3, #0
   17860:	9308      	str	r3, [sp, #32]
   17862:	9b01      	ldr	r3, [sp, #4]
   17864:	9704      	str	r7, [sp, #16]
   17866:	2b09      	cmp	r3, #9
   17868:	44b8      	add	r8, r7
   1786a:	d9b0      	bls.n	177ce <_dtoa_r+0x16e>
   1786c:	2300      	movs	r3, #0
   1786e:	2601      	movs	r6, #1
   17870:	9301      	str	r3, [sp, #4]
   17872:	9607      	str	r6, [sp, #28]
   17874:	f04f 39ff 	mov.w	r9, #4294967295
   17878:	469b      	mov	fp, r3
   1787a:	2100      	movs	r1, #0
   1787c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1787e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   17882:	4620      	mov	r0, r4
   17884:	f7fb fcba 	bl	131fc <_Balloc>
   17888:	9000      	str	r0, [sp, #0]
   1788a:	2800      	cmp	r0, #0
   1788c:	f000 8540 	beq.w	18310 <_dtoa_r+0xcb0>
   17890:	9b00      	ldr	r3, [sp, #0]
   17892:	63a3      	str	r3, [r4, #56]	; 0x38
   17894:	f1b9 0f0e 	cmp.w	r9, #14
   17898:	f200 80dc 	bhi.w	17a54 <_dtoa_r+0x3f4>
   1789c:	2e00      	cmp	r6, #0
   1789e:	f000 80d9 	beq.w	17a54 <_dtoa_r+0x3f4>
   178a2:	9b04      	ldr	r3, [sp, #16]
   178a4:	2b00      	cmp	r3, #0
   178a6:	f340 83de 	ble.w	18066 <_dtoa_r+0xa06>
   178aa:	4a3d      	ldr	r2, [pc, #244]	; (179a0 <_dtoa_r+0x340>)
   178ac:	f003 010f 	and.w	r1, r3, #15
   178b0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   178b4:	ed92 7b00 	vldr	d7, [r2]
   178b8:	111a      	asrs	r2, r3, #4
   178ba:	05db      	lsls	r3, r3, #23
   178bc:	f140 8382 	bpl.w	17fc4 <_dtoa_r+0x964>
   178c0:	493a      	ldr	r1, [pc, #232]	; (179ac <_dtoa_r+0x34c>)
   178c2:	ed91 6b08 	vldr	d6, [r1, #32]
   178c6:	f002 020f 	and.w	r2, r2, #15
   178ca:	2003      	movs	r0, #3
   178cc:	ee88 5b06 	vdiv.f64	d5, d8, d6
   178d0:	b15a      	cbz	r2, 178ea <_dtoa_r+0x28a>
   178d2:	4936      	ldr	r1, [pc, #216]	; (179ac <_dtoa_r+0x34c>)
   178d4:	07d6      	lsls	r6, r2, #31
   178d6:	d504      	bpl.n	178e2 <_dtoa_r+0x282>
   178d8:	ed91 6b00 	vldr	d6, [r1]
   178dc:	3001      	adds	r0, #1
   178de:	ee27 7b06 	vmul.f64	d7, d7, d6
   178e2:	1052      	asrs	r2, r2, #1
   178e4:	f101 0108 	add.w	r1, r1, #8
   178e8:	d1f4      	bne.n	178d4 <_dtoa_r+0x274>
   178ea:	ee85 6b07 	vdiv.f64	d6, d5, d7
   178ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   178f0:	b13b      	cbz	r3, 17902 <_dtoa_r+0x2a2>
   178f2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   178f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   178fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   178fe:	f100 84ae 	bmi.w	1825e <_dtoa_r+0xbfe>
   17902:	ee07 0a90 	vmov	s15, r0
   17906:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1790a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1790e:	eea5 7b06 	vfma.f64	d7, d5, d6
   17912:	ee17 2a90 	vmov	r2, s15
   17916:	ec51 0b17 	vmov	r0, r1, d7
   1791a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1791e:	f1b9 0f00 	cmp.w	r9, #0
   17922:	f000 8388 	beq.w	18036 <_dtoa_r+0x9d6>
   17926:	9e04      	ldr	r6, [sp, #16]
   17928:	464a      	mov	r2, r9
   1792a:	9b07      	ldr	r3, [sp, #28]
   1792c:	2b00      	cmp	r3, #0
   1792e:	f000 8447 	beq.w	181c0 <_dtoa_r+0xb60>
   17932:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   17936:	4b1a      	ldr	r3, [pc, #104]	; (179a0 <_dtoa_r+0x340>)
   17938:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1793c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   17940:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   17944:	ee36 7b47 	vsub.f64	d7, d6, d7
   17948:	ed1c 6b02 	vldr	d6, [ip, #-8]
   1794c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   17950:	ec41 0b16 	vmov	d6, r0, r1
   17954:	ee14 0a90 	vmov	r0, s9
   17958:	ee35 5b46 	vsub.f64	d5, d5, d6
   1795c:	9900      	ldr	r1, [sp, #0]
   1795e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   17962:	3030      	adds	r0, #48	; 0x30
   17964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17968:	f801 0b01 	strb.w	r0, [r1], #1
   1796c:	f300 84ac 	bgt.w	182c8 <_dtoa_r+0xc68>
   17970:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   17974:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   17978:	f04f 0c00 	mov.w	ip, #0
   1797c:	e031      	b.n	179e2 <_dtoa_r+0x382>
   1797e:	bf00      	nop
   17980:	636f4361 	.word	0x636f4361
   17984:	3fd287a7 	.word	0x3fd287a7
   17988:	8b60c8b3 	.word	0x8b60c8b3
   1798c:	3fc68a28 	.word	0x3fc68a28
   17990:	509f79fb 	.word	0x509f79fb
   17994:	3fd34413 	.word	0x3fd34413
   17998:	7ff00000 	.word	0x7ff00000
   1799c:	20007e51 	.word	0x20007e51
   179a0:	20000328 	.word	0x20000328
   179a4:	20000fdc 	.word	0x20000fdc
   179a8:	20000fe8 	.word	0x20000fe8
   179ac:	20000300 	.word	0x20000300
   179b0:	f10c 0c01 	add.w	ip, ip, #1
   179b4:	4594      	cmp	ip, r2
   179b6:	da4d      	bge.n	17a54 <_dtoa_r+0x3f4>
   179b8:	ee27 7b04 	vmul.f64	d7, d7, d4
   179bc:	ee25 5b04 	vmul.f64	d5, d5, d4
   179c0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   179c4:	ee16 3a90 	vmov	r3, s13
   179c8:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   179cc:	3330      	adds	r3, #48	; 0x30
   179ce:	ee37 7b43 	vsub.f64	d7, d7, d3
   179d2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   179d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   179da:	f801 3b01 	strb.w	r3, [r1], #1
   179de:	f100 8473 	bmi.w	182c8 <_dtoa_r+0xc68>
   179e2:	ee32 6b47 	vsub.f64	d6, d2, d7
   179e6:	eeb4 6bc5 	vcmpe.f64	d6, d5
   179ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   179ee:	d5df      	bpl.n	179b0 <_dtoa_r+0x350>
   179f0:	9a00      	ldr	r2, [sp, #0]
   179f2:	9604      	str	r6, [sp, #16]
   179f4:	e002      	b.n	179fc <_dtoa_r+0x39c>
   179f6:	428a      	cmp	r2, r1
   179f8:	f000 8450 	beq.w	1829c <_dtoa_r+0xc3c>
   179fc:	4689      	mov	r9, r1
   179fe:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   17a02:	2b39      	cmp	r3, #57	; 0x39
   17a04:	d0f7      	beq.n	179f6 <_dtoa_r+0x396>
   17a06:	3301      	adds	r3, #1
   17a08:	b2db      	uxtb	r3, r3
   17a0a:	700b      	strb	r3, [r1, #0]
   17a0c:	9b04      	ldr	r3, [sp, #16]
   17a0e:	3301      	adds	r3, #1
   17a10:	9304      	str	r3, [sp, #16]
   17a12:	e155      	b.n	17cc0 <_dtoa_r+0x660>
   17a14:	1a09      	subs	r1, r1, r0
   17a16:	2301      	movs	r3, #1
   17a18:	f1b1 0801 	subs.w	r8, r1, #1
   17a1c:	930a      	str	r3, [sp, #40]	; 0x28
   17a1e:	f57f aec7 	bpl.w	177b0 <_dtoa_r+0x150>
   17a22:	f1c1 0301 	rsb	r3, r1, #1
   17a26:	9306      	str	r3, [sp, #24]
   17a28:	f04f 0800 	mov.w	r8, #0
   17a2c:	e6c2      	b.n	177b4 <_dtoa_r+0x154>
   17a2e:	2600      	movs	r6, #0
   17a30:	63e6      	str	r6, [r4, #60]	; 0x3c
   17a32:	4631      	mov	r1, r6
   17a34:	4620      	mov	r0, r4
   17a36:	f7fb fbe1 	bl	131fc <_Balloc>
   17a3a:	9000      	str	r0, [sp, #0]
   17a3c:	2800      	cmp	r0, #0
   17a3e:	f000 8467 	beq.w	18310 <_dtoa_r+0xcb0>
   17a42:	9b00      	ldr	r3, [sp, #0]
   17a44:	63a3      	str	r3, [r4, #56]	; 0x38
   17a46:	f04f 33ff 	mov.w	r3, #4294967295
   17a4a:	930b      	str	r3, [sp, #44]	; 0x2c
   17a4c:	4699      	mov	r9, r3
   17a4e:	2301      	movs	r3, #1
   17a50:	46b3      	mov	fp, r6
   17a52:	9307      	str	r3, [sp, #28]
   17a54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17a56:	2a00      	cmp	r2, #0
   17a58:	db55      	blt.n	17b06 <_dtoa_r+0x4a6>
   17a5a:	9904      	ldr	r1, [sp, #16]
   17a5c:	290e      	cmp	r1, #14
   17a5e:	dc52      	bgt.n	17b06 <_dtoa_r+0x4a6>
   17a60:	4bb7      	ldr	r3, [pc, #732]	; (17d40 <_dtoa_r+0x6e0>)
   17a62:	f1bb 0f00 	cmp.w	fp, #0
   17a66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   17a6a:	ed93 6b00 	vldr	d6, [r3]
   17a6e:	da15      	bge.n	17a9c <_dtoa_r+0x43c>
   17a70:	f1b9 0f00 	cmp.w	r9, #0
   17a74:	dc12      	bgt.n	17a9c <_dtoa_r+0x43c>
   17a76:	f040 82f2 	bne.w	1805e <_dtoa_r+0x9fe>
   17a7a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   17a7e:	ee26 7b07 	vmul.f64	d7, d6, d7
   17a82:	eeb4 8bc7 	vcmpe.f64	d8, d7
   17a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17a8a:	46ca      	mov	sl, r9
   17a8c:	464e      	mov	r6, r9
   17a8e:	f200 826d 	bhi.w	17f6c <_dtoa_r+0x90c>
   17a92:	f8dd 8000 	ldr.w	r8, [sp]
   17a96:	ea6f 0b0b 	mvn.w	fp, fp
   17a9a:	e270      	b.n	17f7e <_dtoa_r+0x91e>
   17a9c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   17aa0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   17aa4:	9900      	ldr	r1, [sp, #0]
   17aa6:	ee17 3a10 	vmov	r3, s14
   17aaa:	f1b9 0f01 	cmp.w	r9, #1
   17aae:	f103 0330 	add.w	r3, r3, #48	; 0x30
   17ab2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   17ab6:	f801 3b01 	strb.w	r3, [r1], #1
   17aba:	eea5 8b46 	vfms.f64	d8, d5, d6
   17abe:	f000 8334 	beq.w	1812a <_dtoa_r+0xaca>
   17ac2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   17ac6:	2301      	movs	r3, #1
   17ac8:	e011      	b.n	17aee <_dtoa_r+0x48e>
   17aca:	ee88 7b06 	vdiv.f64	d7, d8, d6
   17ace:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   17ad2:	3301      	adds	r3, #1
   17ad4:	ee17 2a10 	vmov	r2, s14
   17ad8:	454b      	cmp	r3, r9
   17ada:	f102 0230 	add.w	r2, r2, #48	; 0x30
   17ade:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   17ae2:	f801 2b01 	strb.w	r2, [r1], #1
   17ae6:	eea5 8b46 	vfms.f64	d8, d5, d6
   17aea:	f000 831e 	beq.w	1812a <_dtoa_r+0xaca>
   17aee:	ee28 8b04 	vmul.f64	d8, d8, d4
   17af2:	eeb5 8b40 	vcmp.f64	d8, #0.0
   17af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17afa:	d1e6      	bne.n	17aca <_dtoa_r+0x46a>
   17afc:	9b04      	ldr	r3, [sp, #16]
   17afe:	3301      	adds	r3, #1
   17b00:	9304      	str	r3, [sp, #16]
   17b02:	4689      	mov	r9, r1
   17b04:	e0dc      	b.n	17cc0 <_dtoa_r+0x660>
   17b06:	9b07      	ldr	r3, [sp, #28]
   17b08:	b343      	cbz	r3, 17b5c <_dtoa_r+0x4fc>
   17b0a:	9b01      	ldr	r3, [sp, #4]
   17b0c:	2b01      	cmp	r3, #1
   17b0e:	f340 8276 	ble.w	17ffe <_dtoa_r+0x99e>
   17b12:	9b08      	ldr	r3, [sp, #32]
   17b14:	f109 3aff 	add.w	sl, r9, #4294967295
   17b18:	4553      	cmp	r3, sl
   17b1a:	f280 823f 	bge.w	17f9c <_dtoa_r+0x93c>
   17b1e:	9b08      	ldr	r3, [sp, #32]
   17b20:	f8cd a020 	str.w	sl, [sp, #32]
   17b24:	ebaa 0203 	sub.w	r2, sl, r3
   17b28:	4417      	add	r7, r2
   17b2a:	f04f 0a00 	mov.w	sl, #0
   17b2e:	f1b9 0f00 	cmp.w	r9, #0
   17b32:	f2c0 8325 	blt.w	18180 <_dtoa_r+0xb20>
   17b36:	9b06      	ldr	r3, [sp, #24]
   17b38:	9309      	str	r3, [sp, #36]	; 0x24
   17b3a:	444b      	add	r3, r9
   17b3c:	44c8      	add	r8, r9
   17b3e:	9306      	str	r3, [sp, #24]
   17b40:	2101      	movs	r1, #1
   17b42:	4620      	mov	r0, r4
   17b44:	f7fb fc84 	bl	13450 <__i2b>
   17b48:	4606      	mov	r6, r0
   17b4a:	e00c      	b.n	17b66 <_dtoa_r+0x506>
   17b4c:	4b7d      	ldr	r3, [pc, #500]	; (17d44 <_dtoa_r+0x6e4>)
   17b4e:	9300      	str	r3, [sp, #0]
   17b50:	9800      	ldr	r0, [sp, #0]
   17b52:	b00f      	add	sp, #60	; 0x3c
   17b54:	ecbd 8b02 	vpop	{d8}
   17b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b5c:	9b06      	ldr	r3, [sp, #24]
   17b5e:	f8dd a020 	ldr.w	sl, [sp, #32]
   17b62:	9e07      	ldr	r6, [sp, #28]
   17b64:	9309      	str	r3, [sp, #36]	; 0x24
   17b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17b68:	b16b      	cbz	r3, 17b86 <_dtoa_r+0x526>
   17b6a:	f1b8 0f00 	cmp.w	r8, #0
   17b6e:	dd0a      	ble.n	17b86 <_dtoa_r+0x526>
   17b70:	4543      	cmp	r3, r8
   17b72:	9906      	ldr	r1, [sp, #24]
   17b74:	461a      	mov	r2, r3
   17b76:	bfa8      	it	ge
   17b78:	4642      	movge	r2, r8
   17b7a:	1a89      	subs	r1, r1, r2
   17b7c:	1a9b      	subs	r3, r3, r2
   17b7e:	9106      	str	r1, [sp, #24]
   17b80:	9309      	str	r3, [sp, #36]	; 0x24
   17b82:	eba8 0802 	sub.w	r8, r8, r2
   17b86:	9b08      	ldr	r3, [sp, #32]
   17b88:	b163      	cbz	r3, 17ba4 <_dtoa_r+0x544>
   17b8a:	9b07      	ldr	r3, [sp, #28]
   17b8c:	2b00      	cmp	r3, #0
   17b8e:	f000 82a7 	beq.w	180e0 <_dtoa_r+0xa80>
   17b92:	f1ba 0f00 	cmp.w	sl, #0
   17b96:	f300 8204 	bgt.w	17fa2 <_dtoa_r+0x942>
   17b9a:	9b08      	ldr	r3, [sp, #32]
   17b9c:	ebb3 020a 	subs.w	r2, r3, sl
   17ba0:	f040 82ff 	bne.w	181a2 <_dtoa_r+0xb42>
   17ba4:	2101      	movs	r1, #1
   17ba6:	4620      	mov	r0, r4
   17ba8:	f7fb fc52 	bl	13450 <__i2b>
   17bac:	2f00      	cmp	r7, #0
   17bae:	4682      	mov	sl, r0
   17bb0:	f300 80af 	bgt.w	17d12 <_dtoa_r+0x6b2>
   17bb4:	9b01      	ldr	r3, [sp, #4]
   17bb6:	2b01      	cmp	r3, #1
   17bb8:	f340 8187 	ble.w	17eca <_dtoa_r+0x86a>
   17bbc:	2300      	movs	r3, #0
   17bbe:	9308      	str	r3, [sp, #32]
   17bc0:	2001      	movs	r0, #1
   17bc2:	2f00      	cmp	r7, #0
   17bc4:	f040 80b1 	bne.w	17d2a <_dtoa_r+0x6ca>
   17bc8:	4440      	add	r0, r8
   17bca:	f010 001f 	ands.w	r0, r0, #31
   17bce:	f000 817a 	beq.w	17ec6 <_dtoa_r+0x866>
   17bd2:	f1c0 0220 	rsb	r2, r0, #32
   17bd6:	2a04      	cmp	r2, #4
   17bd8:	f300 8088 	bgt.w	17cec <_dtoa_r+0x68c>
   17bdc:	f040 81f6 	bne.w	17fcc <_dtoa_r+0x96c>
   17be0:	9b06      	ldr	r3, [sp, #24]
   17be2:	2b00      	cmp	r3, #0
   17be4:	dd05      	ble.n	17bf2 <_dtoa_r+0x592>
   17be6:	4629      	mov	r1, r5
   17be8:	461a      	mov	r2, r3
   17bea:	4620      	mov	r0, r4
   17bec:	f7fb fd6c 	bl	136c8 <__lshift>
   17bf0:	4605      	mov	r5, r0
   17bf2:	f1b8 0f00 	cmp.w	r8, #0
   17bf6:	dd05      	ble.n	17c04 <_dtoa_r+0x5a4>
   17bf8:	4651      	mov	r1, sl
   17bfa:	4642      	mov	r2, r8
   17bfc:	4620      	mov	r0, r4
   17bfe:	f7fb fd63 	bl	136c8 <__lshift>
   17c02:	4682      	mov	sl, r0
   17c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17c06:	2b00      	cmp	r3, #0
   17c08:	f040 813f 	bne.w	17e8a <_dtoa_r+0x82a>
   17c0c:	f1b9 0f00 	cmp.w	r9, #0
   17c10:	f340 8125 	ble.w	17e5e <_dtoa_r+0x7fe>
   17c14:	9b07      	ldr	r3, [sp, #28]
   17c16:	2b00      	cmp	r3, #0
   17c18:	f040 80a3 	bne.w	17d62 <_dtoa_r+0x702>
   17c1c:	9b04      	ldr	r3, [sp, #16]
   17c1e:	3301      	adds	r3, #1
   17c20:	9304      	str	r3, [sp, #16]
   17c22:	f8dd 8000 	ldr.w	r8, [sp]
   17c26:	2701      	movs	r7, #1
   17c28:	e007      	b.n	17c3a <_dtoa_r+0x5da>
   17c2a:	4629      	mov	r1, r5
   17c2c:	2300      	movs	r3, #0
   17c2e:	220a      	movs	r2, #10
   17c30:	4620      	mov	r0, r4
   17c32:	f7fb fb13 	bl	1325c <__multadd>
   17c36:	3701      	adds	r7, #1
   17c38:	4605      	mov	r5, r0
   17c3a:	4651      	mov	r1, sl
   17c3c:	4628      	mov	r0, r5
   17c3e:	f7ff fc7b 	bl	17538 <quorem>
   17c42:	45b9      	cmp	r9, r7
   17c44:	f100 0030 	add.w	r0, r0, #48	; 0x30
   17c48:	f808 0b01 	strb.w	r0, [r8], #1
   17c4c:	dced      	bgt.n	17c2a <_dtoa_r+0x5ca>
   17c4e:	f1b9 0f00 	cmp.w	r9, #0
   17c52:	9a00      	ldr	r2, [sp, #0]
   17c54:	bfcc      	ite	gt
   17c56:	46cb      	movgt	fp, r9
   17c58:	f04f 0b01 	movle.w	fp, #1
   17c5c:	4603      	mov	r3, r0
   17c5e:	4493      	add	fp, r2
   17c60:	2700      	movs	r7, #0
   17c62:	4629      	mov	r1, r5
   17c64:	2201      	movs	r2, #1
   17c66:	4620      	mov	r0, r4
   17c68:	9301      	str	r3, [sp, #4]
   17c6a:	f7fb fd2d 	bl	136c8 <__lshift>
   17c6e:	4651      	mov	r1, sl
   17c70:	4605      	mov	r5, r0
   17c72:	f7fb fda1 	bl	137b8 <__mcmp>
   17c76:	2800      	cmp	r0, #0
   17c78:	f340 81af 	ble.w	17fda <_dtoa_r+0x97a>
   17c7c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   17c80:	9a00      	ldr	r2, [sp, #0]
   17c82:	f10b 3bff 	add.w	fp, fp, #4294967295
   17c86:	e004      	b.n	17c92 <_dtoa_r+0x632>
   17c88:	455a      	cmp	r2, fp
   17c8a:	f000 81b1 	beq.w	17ff0 <_dtoa_r+0x990>
   17c8e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   17c92:	2b39      	cmp	r3, #57	; 0x39
   17c94:	f10b 0901 	add.w	r9, fp, #1
   17c98:	d0f6      	beq.n	17c88 <_dtoa_r+0x628>
   17c9a:	3301      	adds	r3, #1
   17c9c:	f88b 3000 	strb.w	r3, [fp]
   17ca0:	4651      	mov	r1, sl
   17ca2:	4620      	mov	r0, r4
   17ca4:	f7fb fad0 	bl	13248 <_Bfree>
   17ca8:	b156      	cbz	r6, 17cc0 <_dtoa_r+0x660>
   17caa:	b12f      	cbz	r7, 17cb8 <_dtoa_r+0x658>
   17cac:	42b7      	cmp	r7, r6
   17cae:	d003      	beq.n	17cb8 <_dtoa_r+0x658>
   17cb0:	4639      	mov	r1, r7
   17cb2:	4620      	mov	r0, r4
   17cb4:	f7fb fac8 	bl	13248 <_Bfree>
   17cb8:	4631      	mov	r1, r6
   17cba:	4620      	mov	r0, r4
   17cbc:	f7fb fac4 	bl	13248 <_Bfree>
   17cc0:	4629      	mov	r1, r5
   17cc2:	4620      	mov	r0, r4
   17cc4:	f7fb fac0 	bl	13248 <_Bfree>
   17cc8:	2300      	movs	r3, #0
   17cca:	f889 3000 	strb.w	r3, [r9]
   17cce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   17cd2:	601a      	str	r2, [r3, #0]
   17cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17cd6:	2b00      	cmp	r3, #0
   17cd8:	f43f acfe 	beq.w	176d8 <_dtoa_r+0x78>
   17cdc:	9800      	ldr	r0, [sp, #0]
   17cde:	f8c3 9000 	str.w	r9, [r3]
   17ce2:	b00f      	add	sp, #60	; 0x3c
   17ce4:	ecbd 8b02 	vpop	{d8}
   17ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cec:	f1c0 001c 	rsb	r0, r0, #28
   17cf0:	9b06      	ldr	r3, [sp, #24]
   17cf2:	4403      	add	r3, r0
   17cf4:	9306      	str	r3, [sp, #24]
   17cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17cf8:	4403      	add	r3, r0
   17cfa:	9309      	str	r3, [sp, #36]	; 0x24
   17cfc:	4480      	add	r8, r0
   17cfe:	e76f      	b.n	17be0 <_dtoa_r+0x580>
   17d00:	f1c2 0220 	rsb	r2, r2, #32
   17d04:	fa06 f202 	lsl.w	r2, r6, r2
   17d08:	ee07 2a10 	vmov	s14, r2
   17d0c:	e509      	b.n	17722 <_dtoa_r+0xc2>
   17d0e:	2601      	movs	r6, #1
   17d10:	e563      	b.n	177da <_dtoa_r+0x17a>
   17d12:	4601      	mov	r1, r0
   17d14:	463a      	mov	r2, r7
   17d16:	4620      	mov	r0, r4
   17d18:	f7fb fc76 	bl	13608 <__pow5mult>
   17d1c:	9b01      	ldr	r3, [sp, #4]
   17d1e:	2b01      	cmp	r3, #1
   17d20:	4682      	mov	sl, r0
   17d22:	f340 81c5 	ble.w	180b0 <_dtoa_r+0xa50>
   17d26:	2300      	movs	r3, #0
   17d28:	9308      	str	r3, [sp, #32]
   17d2a:	f8da 2010 	ldr.w	r2, [sl, #16]
   17d2e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   17d32:	6910      	ldr	r0, [r2, #16]
   17d34:	f7fb fb3c 	bl	133b0 <__hi0bits>
   17d38:	f1c0 0020 	rsb	r0, r0, #32
   17d3c:	e744      	b.n	17bc8 <_dtoa_r+0x568>
   17d3e:	bf00      	nop
   17d40:	20000328 	.word	0x20000328
   17d44:	20007e50 	.word	0x20007e50
   17d48:	4631      	mov	r1, r6
   17d4a:	2300      	movs	r3, #0
   17d4c:	220a      	movs	r2, #10
   17d4e:	4620      	mov	r0, r4
   17d50:	f7fb fa84 	bl	1325c <__multadd>
   17d54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17d56:	2b00      	cmp	r3, #0
   17d58:	4606      	mov	r6, r0
   17d5a:	f340 82ce 	ble.w	182fa <_dtoa_r+0xc9a>
   17d5e:	9704      	str	r7, [sp, #16]
   17d60:	4699      	mov	r9, r3
   17d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17d64:	2b00      	cmp	r3, #0
   17d66:	dd05      	ble.n	17d74 <_dtoa_r+0x714>
   17d68:	4631      	mov	r1, r6
   17d6a:	461a      	mov	r2, r3
   17d6c:	4620      	mov	r0, r4
   17d6e:	f7fb fcab 	bl	136c8 <__lshift>
   17d72:	4606      	mov	r6, r0
   17d74:	9b08      	ldr	r3, [sp, #32]
   17d76:	2b00      	cmp	r3, #0
   17d78:	f040 81eb 	bne.w	18152 <_dtoa_r+0xaf2>
   17d7c:	46b0      	mov	r8, r6
   17d7e:	9b02      	ldr	r3, [sp, #8]
   17d80:	9f00      	ldr	r7, [sp, #0]
   17d82:	f003 0201 	and.w	r2, r3, #1
   17d86:	1e7b      	subs	r3, r7, #1
   17d88:	444b      	add	r3, r9
   17d8a:	9308      	str	r3, [sp, #32]
   17d8c:	9b01      	ldr	r3, [sp, #4]
   17d8e:	920a      	str	r2, [sp, #40]	; 0x28
   17d90:	4313      	orrs	r3, r2
   17d92:	9309      	str	r3, [sp, #36]	; 0x24
   17d94:	4651      	mov	r1, sl
   17d96:	4628      	mov	r0, r5
   17d98:	f7ff fbce 	bl	17538 <quorem>
   17d9c:	4631      	mov	r1, r6
   17d9e:	4683      	mov	fp, r0
   17da0:	4628      	mov	r0, r5
   17da2:	f7fb fd09 	bl	137b8 <__mcmp>
   17da6:	4642      	mov	r2, r8
   17da8:	4651      	mov	r1, sl
   17daa:	4681      	mov	r9, r0
   17dac:	4620      	mov	r0, r4
   17dae:	f7fb fd25 	bl	137fc <__mdiff>
   17db2:	68c2      	ldr	r2, [r0, #12]
   17db4:	4601      	mov	r1, r0
   17db6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   17dba:	2a00      	cmp	r2, #0
   17dbc:	d142      	bne.n	17e44 <_dtoa_r+0x7e4>
   17dbe:	e9cd 0306 	strd	r0, r3, [sp, #24]
   17dc2:	4628      	mov	r0, r5
   17dc4:	f7fb fcf8 	bl	137b8 <__mcmp>
   17dc8:	9906      	ldr	r1, [sp, #24]
   17dca:	9002      	str	r0, [sp, #8]
   17dcc:	4620      	mov	r0, r4
   17dce:	f7fb fa3b 	bl	13248 <_Bfree>
   17dd2:	9a02      	ldr	r2, [sp, #8]
   17dd4:	9b07      	ldr	r3, [sp, #28]
   17dd6:	b91a      	cbnz	r2, 17de0 <_dtoa_r+0x780>
   17dd8:	9909      	ldr	r1, [sp, #36]	; 0x24
   17dda:	2900      	cmp	r1, #0
   17ddc:	f000 827e 	beq.w	182dc <_dtoa_r+0xc7c>
   17de0:	f1b9 0f00 	cmp.w	r9, #0
   17de4:	f2c0 8183 	blt.w	180ee <_dtoa_r+0xa8e>
   17de8:	9901      	ldr	r1, [sp, #4]
   17dea:	ea49 0901 	orr.w	r9, r9, r1
   17dee:	990a      	ldr	r1, [sp, #40]	; 0x28
   17df0:	ea51 0909 	orrs.w	r9, r1, r9
   17df4:	f000 817b 	beq.w	180ee <_dtoa_r+0xa8e>
   17df8:	2a00      	cmp	r2, #0
   17dfa:	f300 81c6 	bgt.w	1818a <_dtoa_r+0xb2a>
   17dfe:	9a08      	ldr	r2, [sp, #32]
   17e00:	703b      	strb	r3, [r7, #0]
   17e02:	f107 0901 	add.w	r9, r7, #1
   17e06:	4297      	cmp	r7, r2
   17e08:	46cb      	mov	fp, r9
   17e0a:	f000 81c4 	beq.w	18196 <_dtoa_r+0xb36>
   17e0e:	4629      	mov	r1, r5
   17e10:	2300      	movs	r3, #0
   17e12:	220a      	movs	r2, #10
   17e14:	4620      	mov	r0, r4
   17e16:	f7fb fa21 	bl	1325c <__multadd>
   17e1a:	4546      	cmp	r6, r8
   17e1c:	4605      	mov	r5, r0
   17e1e:	4631      	mov	r1, r6
   17e20:	f04f 0300 	mov.w	r3, #0
   17e24:	f04f 020a 	mov.w	r2, #10
   17e28:	4620      	mov	r0, r4
   17e2a:	d012      	beq.n	17e52 <_dtoa_r+0x7f2>
   17e2c:	f7fb fa16 	bl	1325c <__multadd>
   17e30:	4641      	mov	r1, r8
   17e32:	4606      	mov	r6, r0
   17e34:	2300      	movs	r3, #0
   17e36:	220a      	movs	r2, #10
   17e38:	4620      	mov	r0, r4
   17e3a:	f7fb fa0f 	bl	1325c <__multadd>
   17e3e:	464f      	mov	r7, r9
   17e40:	4680      	mov	r8, r0
   17e42:	e7a7      	b.n	17d94 <_dtoa_r+0x734>
   17e44:	4620      	mov	r0, r4
   17e46:	9302      	str	r3, [sp, #8]
   17e48:	f7fb f9fe 	bl	13248 <_Bfree>
   17e4c:	9b02      	ldr	r3, [sp, #8]
   17e4e:	2201      	movs	r2, #1
   17e50:	e7c6      	b.n	17de0 <_dtoa_r+0x780>
   17e52:	f7fb fa03 	bl	1325c <__multadd>
   17e56:	464f      	mov	r7, r9
   17e58:	4606      	mov	r6, r0
   17e5a:	4680      	mov	r8, r0
   17e5c:	e79a      	b.n	17d94 <_dtoa_r+0x734>
   17e5e:	9b01      	ldr	r3, [sp, #4]
   17e60:	2b02      	cmp	r3, #2
   17e62:	dc71      	bgt.n	17f48 <_dtoa_r+0x8e8>
   17e64:	9b07      	ldr	r3, [sp, #28]
   17e66:	2b00      	cmp	r3, #0
   17e68:	f47f af7b 	bne.w	17d62 <_dtoa_r+0x702>
   17e6c:	9b04      	ldr	r3, [sp, #16]
   17e6e:	4651      	mov	r1, sl
   17e70:	3301      	adds	r3, #1
   17e72:	4628      	mov	r0, r5
   17e74:	9304      	str	r3, [sp, #16]
   17e76:	f7ff fb5f 	bl	17538 <quorem>
   17e7a:	f8dd b000 	ldr.w	fp, [sp]
   17e7e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   17e82:	f80b 3b01 	strb.w	r3, [fp], #1
   17e86:	2700      	movs	r7, #0
   17e88:	e6eb      	b.n	17c62 <_dtoa_r+0x602>
   17e8a:	4651      	mov	r1, sl
   17e8c:	4628      	mov	r0, r5
   17e8e:	f7fb fc93 	bl	137b8 <__mcmp>
   17e92:	2800      	cmp	r0, #0
   17e94:	f6bf aeba 	bge.w	17c0c <_dtoa_r+0x5ac>
   17e98:	4629      	mov	r1, r5
   17e9a:	2300      	movs	r3, #0
   17e9c:	220a      	movs	r2, #10
   17e9e:	4620      	mov	r0, r4
   17ea0:	f7fb f9dc 	bl	1325c <__multadd>
   17ea4:	9b04      	ldr	r3, [sp, #16]
   17ea6:	1e5f      	subs	r7, r3, #1
   17ea8:	9b07      	ldr	r3, [sp, #28]
   17eaa:	4605      	mov	r5, r0
   17eac:	2b00      	cmp	r3, #0
   17eae:	f47f af4b 	bne.w	17d48 <_dtoa_r+0x6e8>
   17eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17eb4:	2b00      	cmp	r3, #0
   17eb6:	f340 8218 	ble.w	182ea <_dtoa_r+0xc8a>
   17eba:	4699      	mov	r9, r3
   17ebc:	e6b1      	b.n	17c22 <_dtoa_r+0x5c2>
   17ebe:	4bbc      	ldr	r3, [pc, #752]	; (181b0 <_dtoa_r+0xb50>)
   17ec0:	9300      	str	r3, [sp, #0]
   17ec2:	3303      	adds	r3, #3
   17ec4:	e4a4      	b.n	17810 <_dtoa_r+0x1b0>
   17ec6:	201c      	movs	r0, #28
   17ec8:	e712      	b.n	17cf0 <_dtoa_r+0x690>
   17eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   17ece:	2800      	cmp	r0, #0
   17ed0:	f47f ae74 	bne.w	17bbc <_dtoa_r+0x55c>
   17ed4:	f3c1 0213 	ubfx	r2, r1, #0, #20
   17ed8:	2a00      	cmp	r2, #0
   17eda:	f000 80f4 	beq.w	180c6 <_dtoa_r+0xa66>
   17ede:	9b02      	ldr	r3, [sp, #8]
   17ee0:	9308      	str	r3, [sp, #32]
   17ee2:	e66d      	b.n	17bc0 <_dtoa_r+0x560>
   17ee4:	2301      	movs	r3, #1
   17ee6:	9307      	str	r3, [sp, #28]
   17ee8:	9b04      	ldr	r3, [sp, #16]
   17eea:	445b      	add	r3, fp
   17eec:	f103 0901 	add.w	r9, r3, #1
   17ef0:	f1b9 0f01 	cmp.w	r9, #1
   17ef4:	46cc      	mov	ip, r9
   17ef6:	930b      	str	r3, [sp, #44]	; 0x2c
   17ef8:	bfb8      	it	lt
   17efa:	f04f 0c01 	movlt.w	ip, #1
   17efe:	2100      	movs	r1, #0
   17f00:	f1bc 0f17 	cmp.w	ip, #23
   17f04:	63e1      	str	r1, [r4, #60]	; 0x3c
   17f06:	f77f acbc 	ble.w	17882 <_dtoa_r+0x222>
   17f0a:	2001      	movs	r0, #1
   17f0c:	2204      	movs	r2, #4
   17f0e:	0052      	lsls	r2, r2, #1
   17f10:	f102 0314 	add.w	r3, r2, #20
   17f14:	4563      	cmp	r3, ip
   17f16:	4601      	mov	r1, r0
   17f18:	f100 0001 	add.w	r0, r0, #1
   17f1c:	d9f7      	bls.n	17f0e <_dtoa_r+0x8ae>
   17f1e:	63e1      	str	r1, [r4, #60]	; 0x3c
   17f20:	e4af      	b.n	17882 <_dtoa_r+0x222>
   17f22:	2301      	movs	r3, #1
   17f24:	9307      	str	r3, [sp, #28]
   17f26:	f1bb 0f00 	cmp.w	fp, #0
   17f2a:	dd52      	ble.n	17fd2 <_dtoa_r+0x972>
   17f2c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   17f30:	46d9      	mov	r9, fp
   17f32:	46dc      	mov	ip, fp
   17f34:	e7e3      	b.n	17efe <_dtoa_r+0x89e>
   17f36:	2300      	movs	r3, #0
   17f38:	9307      	str	r3, [sp, #28]
   17f3a:	e7d5      	b.n	17ee8 <_dtoa_r+0x888>
   17f3c:	2300      	movs	r3, #0
   17f3e:	9307      	str	r3, [sp, #28]
   17f40:	e7f1      	b.n	17f26 <_dtoa_r+0x8c6>
   17f42:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   17f46:	9704      	str	r7, [sp, #16]
   17f48:	f1b9 0f00 	cmp.w	r9, #0
   17f4c:	f47f ada1 	bne.w	17a92 <_dtoa_r+0x432>
   17f50:	4651      	mov	r1, sl
   17f52:	464b      	mov	r3, r9
   17f54:	2205      	movs	r2, #5
   17f56:	4620      	mov	r0, r4
   17f58:	f7fb f980 	bl	1325c <__multadd>
   17f5c:	4601      	mov	r1, r0
   17f5e:	4682      	mov	sl, r0
   17f60:	4628      	mov	r0, r5
   17f62:	f7fb fc29 	bl	137b8 <__mcmp>
   17f66:	2800      	cmp	r0, #0
   17f68:	f77f ad93 	ble.w	17a92 <_dtoa_r+0x432>
   17f6c:	9b04      	ldr	r3, [sp, #16]
   17f6e:	f103 0b01 	add.w	fp, r3, #1
   17f72:	9b00      	ldr	r3, [sp, #0]
   17f74:	2231      	movs	r2, #49	; 0x31
   17f76:	4698      	mov	r8, r3
   17f78:	f803 2b01 	strb.w	r2, [r3], #1
   17f7c:	9300      	str	r3, [sp, #0]
   17f7e:	4651      	mov	r1, sl
   17f80:	4620      	mov	r0, r4
   17f82:	f7fb f961 	bl	13248 <_Bfree>
   17f86:	f10b 0301 	add.w	r3, fp, #1
   17f8a:	f8dd 9000 	ldr.w	r9, [sp]
   17f8e:	9304      	str	r3, [sp, #16]
   17f90:	f8cd 8000 	str.w	r8, [sp]
   17f94:	2e00      	cmp	r6, #0
   17f96:	f47f ae8f 	bne.w	17cb8 <_dtoa_r+0x658>
   17f9a:	e691      	b.n	17cc0 <_dtoa_r+0x660>
   17f9c:	eba3 0a0a 	sub.w	sl, r3, sl
   17fa0:	e5c5      	b.n	17b2e <_dtoa_r+0x4ce>
   17fa2:	4631      	mov	r1, r6
   17fa4:	4652      	mov	r2, sl
   17fa6:	4620      	mov	r0, r4
   17fa8:	f7fb fb2e 	bl	13608 <__pow5mult>
   17fac:	462a      	mov	r2, r5
   17fae:	4601      	mov	r1, r0
   17fb0:	4606      	mov	r6, r0
   17fb2:	4620      	mov	r0, r4
   17fb4:	f7fb fa7a 	bl	134ac <__multiply>
   17fb8:	4629      	mov	r1, r5
   17fba:	4605      	mov	r5, r0
   17fbc:	4620      	mov	r0, r4
   17fbe:	f7fb f943 	bl	13248 <_Bfree>
   17fc2:	e5ea      	b.n	17b9a <_dtoa_r+0x53a>
   17fc4:	2002      	movs	r0, #2
   17fc6:	eeb0 5b48 	vmov.f64	d5, d8
   17fca:	e481      	b.n	178d0 <_dtoa_r+0x270>
   17fcc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   17fd0:	e68e      	b.n	17cf0 <_dtoa_r+0x690>
   17fd2:	f04f 0b01 	mov.w	fp, #1
   17fd6:	46d9      	mov	r9, fp
   17fd8:	e44f      	b.n	1787a <_dtoa_r+0x21a>
   17fda:	d103      	bne.n	17fe4 <_dtoa_r+0x984>
   17fdc:	9b01      	ldr	r3, [sp, #4]
   17fde:	07db      	lsls	r3, r3, #31
   17fe0:	f53f ae4c 	bmi.w	17c7c <_dtoa_r+0x61c>
   17fe4:	46d9      	mov	r9, fp
   17fe6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   17fea:	2b30      	cmp	r3, #48	; 0x30
   17fec:	d0fa      	beq.n	17fe4 <_dtoa_r+0x984>
   17fee:	e657      	b.n	17ca0 <_dtoa_r+0x640>
   17ff0:	9b04      	ldr	r3, [sp, #16]
   17ff2:	9a00      	ldr	r2, [sp, #0]
   17ff4:	3301      	adds	r3, #1
   17ff6:	9304      	str	r3, [sp, #16]
   17ff8:	2331      	movs	r3, #49	; 0x31
   17ffa:	7013      	strb	r3, [r2, #0]
   17ffc:	e650      	b.n	17ca0 <_dtoa_r+0x640>
   17ffe:	f1ba 0f00 	cmp.w	sl, #0
   18002:	f000 8123 	beq.w	1824c <_dtoa_r+0xbec>
   18006:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1800a:	9b06      	ldr	r3, [sp, #24]
   1800c:	9309      	str	r3, [sp, #36]	; 0x24
   1800e:	4413      	add	r3, r2
   18010:	f8dd a020 	ldr.w	sl, [sp, #32]
   18014:	9306      	str	r3, [sp, #24]
   18016:	4490      	add	r8, r2
   18018:	e592      	b.n	17b40 <_dtoa_r+0x4e0>
   1801a:	ee07 0a90 	vmov	s15, r0
   1801e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   18022:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   18026:	eea6 5b07 	vfma.f64	d5, d6, d7
   1802a:	ee15 2a90 	vmov	r2, s11
   1802e:	ec51 0b15 	vmov	r0, r1, d5
   18032:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   18036:	ec41 0b15 	vmov	d5, r0, r1
   1803a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1803e:	ee36 7b47 	vsub.f64	d7, d6, d7
   18042:	eeb4 7bc5 	vcmpe.f64	d7, d5
   18046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1804a:	f300 8137 	bgt.w	182bc <_dtoa_r+0xc5c>
   1804e:	eeb1 5b45 	vneg.f64	d5, d5
   18052:	eeb4 7bc5 	vcmpe.f64	d7, d5
   18056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1805a:	f57f acfb 	bpl.w	17a54 <_dtoa_r+0x3f4>
   1805e:	f04f 0a00 	mov.w	sl, #0
   18062:	4656      	mov	r6, sl
   18064:	e515      	b.n	17a92 <_dtoa_r+0x432>
   18066:	f000 80f5 	beq.w	18254 <_dtoa_r+0xbf4>
   1806a:	9b04      	ldr	r3, [sp, #16]
   1806c:	4951      	ldr	r1, [pc, #324]	; (181b4 <_dtoa_r+0xb54>)
   1806e:	425a      	negs	r2, r3
   18070:	f002 000f 	and.w	r0, r2, #15
   18074:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   18078:	ed91 6b00 	vldr	d6, [r1]
   1807c:	1112      	asrs	r2, r2, #4
   1807e:	ee28 6b06 	vmul.f64	d6, d8, d6
   18082:	f000 8142 	beq.w	1830a <_dtoa_r+0xcaa>
   18086:	eeb0 7b46 	vmov.f64	d7, d6
   1808a:	494b      	ldr	r1, [pc, #300]	; (181b8 <_dtoa_r+0xb58>)
   1808c:	2600      	movs	r6, #0
   1808e:	2002      	movs	r0, #2
   18090:	07d3      	lsls	r3, r2, #31
   18092:	d505      	bpl.n	180a0 <_dtoa_r+0xa40>
   18094:	ed91 5b00 	vldr	d5, [r1]
   18098:	3001      	adds	r0, #1
   1809a:	2601      	movs	r6, #1
   1809c:	ee27 7b05 	vmul.f64	d7, d7, d5
   180a0:	1052      	asrs	r2, r2, #1
   180a2:	f101 0108 	add.w	r1, r1, #8
   180a6:	d1f3      	bne.n	18090 <_dtoa_r+0xa30>
   180a8:	2e00      	cmp	r6, #0
   180aa:	fe06 6b07 	vseleq.f64	d6, d6, d7
   180ae:	e41e      	b.n	178ee <_dtoa_r+0x28e>
   180b0:	9b02      	ldr	r3, [sp, #8]
   180b2:	2b00      	cmp	r3, #0
   180b4:	f47f ae37 	bne.w	17d26 <_dtoa_r+0x6c6>
   180b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   180bc:	f3c1 0213 	ubfx	r2, r1, #0, #20
   180c0:	2a00      	cmp	r2, #0
   180c2:	f040 8137 	bne.w	18334 <_dtoa_r+0xcd4>
   180c6:	4a3d      	ldr	r2, [pc, #244]	; (181bc <_dtoa_r+0xb5c>)
   180c8:	400a      	ands	r2, r1
   180ca:	2a00      	cmp	r2, #0
   180cc:	f000 80fa 	beq.w	182c4 <_dtoa_r+0xc64>
   180d0:	9b06      	ldr	r3, [sp, #24]
   180d2:	3301      	adds	r3, #1
   180d4:	9306      	str	r3, [sp, #24]
   180d6:	2301      	movs	r3, #1
   180d8:	f108 0801 	add.w	r8, r8, #1
   180dc:	9308      	str	r3, [sp, #32]
   180de:	e56f      	b.n	17bc0 <_dtoa_r+0x560>
   180e0:	4629      	mov	r1, r5
   180e2:	9a08      	ldr	r2, [sp, #32]
   180e4:	4620      	mov	r0, r4
   180e6:	f7fb fa8f 	bl	13608 <__pow5mult>
   180ea:	4605      	mov	r5, r0
   180ec:	e55a      	b.n	17ba4 <_dtoa_r+0x544>
   180ee:	2a00      	cmp	r2, #0
   180f0:	dd12      	ble.n	18118 <_dtoa_r+0xab8>
   180f2:	4629      	mov	r1, r5
   180f4:	2201      	movs	r2, #1
   180f6:	4620      	mov	r0, r4
   180f8:	9301      	str	r3, [sp, #4]
   180fa:	f7fb fae5 	bl	136c8 <__lshift>
   180fe:	4651      	mov	r1, sl
   18100:	4605      	mov	r5, r0
   18102:	f7fb fb59 	bl	137b8 <__mcmp>
   18106:	2800      	cmp	r0, #0
   18108:	9b01      	ldr	r3, [sp, #4]
   1810a:	f340 80e1 	ble.w	182d0 <_dtoa_r+0xc70>
   1810e:	2b39      	cmp	r3, #57	; 0x39
   18110:	f000 80ca 	beq.w	182a8 <_dtoa_r+0xc48>
   18114:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   18118:	46b9      	mov	r9, r7
   1811a:	f809 3b01 	strb.w	r3, [r9], #1
   1811e:	9b04      	ldr	r3, [sp, #16]
   18120:	3301      	adds	r3, #1
   18122:	4637      	mov	r7, r6
   18124:	9304      	str	r3, [sp, #16]
   18126:	4646      	mov	r6, r8
   18128:	e5ba      	b.n	17ca0 <_dtoa_r+0x640>
   1812a:	ee38 8b08 	vadd.f64	d8, d8, d8
   1812e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   18132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18136:	dc0a      	bgt.n	1814e <_dtoa_r+0xaee>
   18138:	eeb4 8b46 	vcmp.f64	d8, d6
   1813c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18140:	f47f acdc 	bne.w	17afc <_dtoa_r+0x49c>
   18144:	ee17 3a10 	vmov	r3, s14
   18148:	07d8      	lsls	r0, r3, #31
   1814a:	f57f acd7 	bpl.w	17afc <_dtoa_r+0x49c>
   1814e:	9a00      	ldr	r2, [sp, #0]
   18150:	e454      	b.n	179fc <_dtoa_r+0x39c>
   18152:	6871      	ldr	r1, [r6, #4]
   18154:	4620      	mov	r0, r4
   18156:	f7fb f851 	bl	131fc <_Balloc>
   1815a:	4607      	mov	r7, r0
   1815c:	2800      	cmp	r0, #0
   1815e:	f000 80de 	beq.w	1831e <_dtoa_r+0xcbe>
   18162:	6933      	ldr	r3, [r6, #16]
   18164:	3302      	adds	r3, #2
   18166:	009a      	lsls	r2, r3, #2
   18168:	f106 010c 	add.w	r1, r6, #12
   1816c:	300c      	adds	r0, #12
   1816e:	f7f5 fd95 	bl	dc9c <memcpy>
   18172:	4639      	mov	r1, r7
   18174:	2201      	movs	r2, #1
   18176:	4620      	mov	r0, r4
   18178:	f7fb faa6 	bl	136c8 <__lshift>
   1817c:	4680      	mov	r8, r0
   1817e:	e5fe      	b.n	17d7e <_dtoa_r+0x71e>
   18180:	9b06      	ldr	r3, [sp, #24]
   18182:	eba3 0309 	sub.w	r3, r3, r9
   18186:	9309      	str	r3, [sp, #36]	; 0x24
   18188:	e4da      	b.n	17b40 <_dtoa_r+0x4e0>
   1818a:	2b39      	cmp	r3, #57	; 0x39
   1818c:	f000 808c 	beq.w	182a8 <_dtoa_r+0xc48>
   18190:	46b9      	mov	r9, r7
   18192:	3301      	adds	r3, #1
   18194:	e7c1      	b.n	1811a <_dtoa_r+0xaba>
   18196:	9a04      	ldr	r2, [sp, #16]
   18198:	3201      	adds	r2, #1
   1819a:	4637      	mov	r7, r6
   1819c:	9204      	str	r2, [sp, #16]
   1819e:	4646      	mov	r6, r8
   181a0:	e55f      	b.n	17c62 <_dtoa_r+0x602>
   181a2:	4629      	mov	r1, r5
   181a4:	4620      	mov	r0, r4
   181a6:	f7fb fa2f 	bl	13608 <__pow5mult>
   181aa:	4605      	mov	r5, r0
   181ac:	e4fa      	b.n	17ba4 <_dtoa_r+0x544>
   181ae:	bf00      	nop
   181b0:	20000fe8 	.word	0x20000fe8
   181b4:	20000328 	.word	0x20000328
   181b8:	20000300 	.word	0x20000300
   181bc:	7ff00000 	.word	0x7ff00000
   181c0:	4b5e      	ldr	r3, [pc, #376]	; (1833c <_dtoa_r+0xcdc>)
   181c2:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   181c6:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   181ca:	ed1c 3b02 	vldr	d3, [ip, #-8]
   181ce:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   181d2:	ee36 7b47 	vsub.f64	d7, d6, d7
   181d6:	ec41 0b16 	vmov	d6, r0, r1
   181da:	ee15 1a90 	vmov	r1, s11
   181de:	ee23 3b06 	vmul.f64	d3, d3, d6
   181e2:	9800      	ldr	r0, [sp, #0]
   181e4:	3130      	adds	r1, #48	; 0x30
   181e6:	2a01      	cmp	r2, #1
   181e8:	f800 1b01 	strb.w	r1, [r0], #1
   181ec:	f000 8083 	beq.w	182f6 <_dtoa_r+0xc96>
   181f0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   181f4:	9b00      	ldr	r3, [sp, #0]
   181f6:	1899      	adds	r1, r3, r2
   181f8:	ee27 7b04 	vmul.f64	d7, d7, d4
   181fc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   18200:	ee16 3a90 	vmov	r3, s13
   18204:	3330      	adds	r3, #48	; 0x30
   18206:	f800 3b01 	strb.w	r3, [r0], #1
   1820a:	4281      	cmp	r1, r0
   1820c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   18210:	ee37 7b45 	vsub.f64	d7, d7, d5
   18214:	d1f0      	bne.n	181f8 <_dtoa_r+0xb98>
   18216:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   1821a:	ee33 5b06 	vadd.f64	d5, d3, d6
   1821e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   18222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18226:	f53f abe3 	bmi.w	179f0 <_dtoa_r+0x390>
   1822a:	ee36 6b43 	vsub.f64	d6, d6, d3
   1822e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   18232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18236:	f77f ac0d 	ble.w	17a54 <_dtoa_r+0x3f4>
   1823a:	4689      	mov	r9, r1
   1823c:	3901      	subs	r1, #1
   1823e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   18242:	2b30      	cmp	r3, #48	; 0x30
   18244:	d0f9      	beq.n	1823a <_dtoa_r+0xbda>
   18246:	1c73      	adds	r3, r6, #1
   18248:	9304      	str	r3, [sp, #16]
   1824a:	e539      	b.n	17cc0 <_dtoa_r+0x660>
   1824c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1824e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   18252:	e6da      	b.n	1800a <_dtoa_r+0x9aa>
   18254:	2002      	movs	r0, #2
   18256:	eeb0 6b48 	vmov.f64	d6, d8
   1825a:	f7ff bb48 	b.w	178ee <_dtoa_r+0x28e>
   1825e:	f1b9 0f00 	cmp.w	r9, #0
   18262:	f43f aeda 	beq.w	1801a <_dtoa_r+0x9ba>
   18266:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18268:	2a00      	cmp	r2, #0
   1826a:	f77f abf3 	ble.w	17a54 <_dtoa_r+0x3f4>
   1826e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   18272:	ee26 6b04 	vmul.f64	d6, d6, d4
   18276:	3001      	adds	r0, #1
   18278:	ee07 0a90 	vmov	s15, r0
   1827c:	9b04      	ldr	r3, [sp, #16]
   1827e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   18282:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   18286:	eea6 7b05 	vfma.f64	d7, d6, d5
   1828a:	ee17 ca90 	vmov	ip, s15
   1828e:	ec51 0b17 	vmov	r0, r1, d7
   18292:	1e5e      	subs	r6, r3, #1
   18294:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   18298:	f7ff bb47 	b.w	1792a <_dtoa_r+0x2ca>
   1829c:	9b04      	ldr	r3, [sp, #16]
   1829e:	3301      	adds	r3, #1
   182a0:	9304      	str	r3, [sp, #16]
   182a2:	2331      	movs	r3, #49	; 0x31
   182a4:	f7ff bbb1 	b.w	17a0a <_dtoa_r+0x3aa>
   182a8:	9b04      	ldr	r3, [sp, #16]
   182aa:	46bb      	mov	fp, r7
   182ac:	3301      	adds	r3, #1
   182ae:	9304      	str	r3, [sp, #16]
   182b0:	2339      	movs	r3, #57	; 0x39
   182b2:	4637      	mov	r7, r6
   182b4:	f80b 3b01 	strb.w	r3, [fp], #1
   182b8:	4646      	mov	r6, r8
   182ba:	e4e1      	b.n	17c80 <_dtoa_r+0x620>
   182bc:	f04f 0a00 	mov.w	sl, #0
   182c0:	4656      	mov	r6, sl
   182c2:	e653      	b.n	17f6c <_dtoa_r+0x90c>
   182c4:	9208      	str	r2, [sp, #32]
   182c6:	e47b      	b.n	17bc0 <_dtoa_r+0x560>
   182c8:	1c73      	adds	r3, r6, #1
   182ca:	9304      	str	r3, [sp, #16]
   182cc:	4689      	mov	r9, r1
   182ce:	e4f7      	b.n	17cc0 <_dtoa_r+0x660>
   182d0:	f47f af22 	bne.w	18118 <_dtoa_r+0xab8>
   182d4:	07da      	lsls	r2, r3, #31
   182d6:	f57f af1f 	bpl.w	18118 <_dtoa_r+0xab8>
   182da:	e718      	b.n	1810e <_dtoa_r+0xaae>
   182dc:	2b39      	cmp	r3, #57	; 0x39
   182de:	d0e3      	beq.n	182a8 <_dtoa_r+0xc48>
   182e0:	f1b9 0f00 	cmp.w	r9, #0
   182e4:	f73f af16 	bgt.w	18114 <_dtoa_r+0xab4>
   182e8:	e716      	b.n	18118 <_dtoa_r+0xab8>
   182ea:	9b01      	ldr	r3, [sp, #4]
   182ec:	2b02      	cmp	r3, #2
   182ee:	f73f ae28 	bgt.w	17f42 <_dtoa_r+0x8e2>
   182f2:	9704      	str	r7, [sp, #16]
   182f4:	e5ba      	b.n	17e6c <_dtoa_r+0x80c>
   182f6:	4601      	mov	r1, r0
   182f8:	e78d      	b.n	18216 <_dtoa_r+0xbb6>
   182fa:	9b01      	ldr	r3, [sp, #4]
   182fc:	2b02      	cmp	r3, #2
   182fe:	f73f ae20 	bgt.w	17f42 <_dtoa_r+0x8e2>
   18302:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   18306:	9704      	str	r7, [sp, #16]
   18308:	e52b      	b.n	17d62 <_dtoa_r+0x702>
   1830a:	2002      	movs	r0, #2
   1830c:	f7ff baef 	b.w	178ee <_dtoa_r+0x28e>
   18310:	4b0b      	ldr	r3, [pc, #44]	; (18340 <_dtoa_r+0xce0>)
   18312:	480c      	ldr	r0, [pc, #48]	; (18344 <_dtoa_r+0xce4>)
   18314:	2200      	movs	r2, #0
   18316:	f240 11af 	movw	r1, #431	; 0x1af
   1831a:	f7ff f8b1 	bl	17480 <__assert_func>
   1831e:	4b08      	ldr	r3, [pc, #32]	; (18340 <_dtoa_r+0xce0>)
   18320:	4808      	ldr	r0, [pc, #32]	; (18344 <_dtoa_r+0xce4>)
   18322:	463a      	mov	r2, r7
   18324:	f240 21ef 	movw	r1, #751	; 0x2ef
   18328:	f7ff f8aa 	bl	17480 <__assert_func>
   1832c:	4b06      	ldr	r3, [pc, #24]	; (18348 <_dtoa_r+0xce8>)
   1832e:	9300      	str	r3, [sp, #0]
   18330:	f7ff b9d2 	b.w	176d8 <_dtoa_r+0x78>
   18334:	9b02      	ldr	r3, [sp, #8]
   18336:	9308      	str	r3, [sp, #32]
   18338:	e4f7      	b.n	17d2a <_dtoa_r+0x6ca>
   1833a:	bf00      	nop
   1833c:	20000328 	.word	0x20000328
   18340:	20000cfc 	.word	0x20000cfc
   18344:	20000fec 	.word	0x20000fec
   18348:	20000fdc 	.word	0x20000fdc

0001834c <_strtoul_l.constprop.0>:
   1834c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18350:	4607      	mov	r7, r0
   18352:	484c      	ldr	r0, [pc, #304]	; (18484 <_strtoul_l.constprop.0+0x138>)
   18354:	460e      	mov	r6, r1
   18356:	4635      	mov	r5, r6
   18358:	f816 eb01 	ldrb.w	lr, [r6], #1
   1835c:	f810 c00e 	ldrb.w	ip, [r0, lr]
   18360:	f01c 0c08 	ands.w	ip, ip, #8
   18364:	d1f7      	bne.n	18356 <_strtoul_l.constprop.0+0xa>
   18366:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   1836a:	d05a      	beq.n	18422 <_strtoul_l.constprop.0+0xd6>
   1836c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   18370:	bf03      	ittte	eq
   18372:	f896 e000 	ldrbeq.w	lr, [r6]
   18376:	4664      	moveq	r4, ip
   18378:	1cae      	addeq	r6, r5, #2
   1837a:	4664      	movne	r4, ip
   1837c:	b15b      	cbz	r3, 18396 <_strtoul_l.constprop.0+0x4a>
   1837e:	2b10      	cmp	r3, #16
   18380:	d054      	beq.n	1842c <_strtoul_l.constprop.0+0xe0>
   18382:	f04f 38ff 	mov.w	r8, #4294967295
   18386:	fbb8 f8f3 	udiv	r8, r8, r3
   1838a:	fb03 fa08 	mul.w	sl, r3, r8
   1838e:	ea6f 0a0a 	mvn.w	sl, sl
   18392:	4699      	mov	r9, r3
   18394:	e008      	b.n	183a8 <_strtoul_l.constprop.0+0x5c>
   18396:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   1839a:	d05a      	beq.n	18452 <_strtoul_l.constprop.0+0x106>
   1839c:	230a      	movs	r3, #10
   1839e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 18488 <_strtoul_l.constprop.0+0x13c>
   183a2:	f04f 0a05 	mov.w	sl, #5
   183a6:	4699      	mov	r9, r3
   183a8:	2500      	movs	r5, #0
   183aa:	4628      	mov	r0, r5
   183ac:	e005      	b.n	183ba <_strtoul_l.constprop.0+0x6e>
   183ae:	d02c      	beq.n	1840a <_strtoul_l.constprop.0+0xbe>
   183b0:	fb09 c000 	mla	r0, r9, r0, ip
   183b4:	2501      	movs	r5, #1
   183b6:	f816 eb01 	ldrb.w	lr, [r6], #1
   183ba:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   183be:	f1bc 0f09 	cmp.w	ip, #9
   183c2:	d906      	bls.n	183d2 <_strtoul_l.constprop.0+0x86>
   183c4:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   183c8:	f1bc 0f19 	cmp.w	ip, #25
   183cc:	d80b      	bhi.n	183e6 <_strtoul_l.constprop.0+0x9a>
   183ce:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   183d2:	4563      	cmp	r3, ip
   183d4:	dd10      	ble.n	183f8 <_strtoul_l.constprop.0+0xac>
   183d6:	f1b5 3fff 	cmp.w	r5, #4294967295
   183da:	d0ec      	beq.n	183b6 <_strtoul_l.constprop.0+0x6a>
   183dc:	4540      	cmp	r0, r8
   183de:	d9e6      	bls.n	183ae <_strtoul_l.constprop.0+0x62>
   183e0:	f04f 35ff 	mov.w	r5, #4294967295
   183e4:	e7e7      	b.n	183b6 <_strtoul_l.constprop.0+0x6a>
   183e6:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   183ea:	f1bc 0f19 	cmp.w	ip, #25
   183ee:	d803      	bhi.n	183f8 <_strtoul_l.constprop.0+0xac>
   183f0:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   183f4:	4563      	cmp	r3, ip
   183f6:	dcee      	bgt.n	183d6 <_strtoul_l.constprop.0+0x8a>
   183f8:	1c6b      	adds	r3, r5, #1
   183fa:	d00b      	beq.n	18414 <_strtoul_l.constprop.0+0xc8>
   183fc:	b104      	cbz	r4, 18400 <_strtoul_l.constprop.0+0xb4>
   183fe:	4240      	negs	r0, r0
   18400:	b10a      	cbz	r2, 18406 <_strtoul_l.constprop.0+0xba>
   18402:	b965      	cbnz	r5, 1841e <_strtoul_l.constprop.0+0xd2>
   18404:	6011      	str	r1, [r2, #0]
   18406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1840a:	45d4      	cmp	ip, sl
   1840c:	ddd0      	ble.n	183b0 <_strtoul_l.constprop.0+0x64>
   1840e:	f04f 35ff 	mov.w	r5, #4294967295
   18412:	e7d0      	b.n	183b6 <_strtoul_l.constprop.0+0x6a>
   18414:	2322      	movs	r3, #34	; 0x22
   18416:	603b      	str	r3, [r7, #0]
   18418:	4628      	mov	r0, r5
   1841a:	2a00      	cmp	r2, #0
   1841c:	d0f3      	beq.n	18406 <_strtoul_l.constprop.0+0xba>
   1841e:	1e71      	subs	r1, r6, #1
   18420:	e7f0      	b.n	18404 <_strtoul_l.constprop.0+0xb8>
   18422:	f896 e000 	ldrb.w	lr, [r6]
   18426:	2401      	movs	r4, #1
   18428:	1cae      	adds	r6, r5, #2
   1842a:	e7a7      	b.n	1837c <_strtoul_l.constprop.0+0x30>
   1842c:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   18430:	d121      	bne.n	18476 <_strtoul_l.constprop.0+0x12a>
   18432:	7830      	ldrb	r0, [r6, #0]
   18434:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   18438:	2858      	cmp	r0, #88	; 0x58
   1843a:	d116      	bne.n	1846a <_strtoul_l.constprop.0+0x11e>
   1843c:	f04f 0910 	mov.w	r9, #16
   18440:	f896 e001 	ldrb.w	lr, [r6, #1]
   18444:	f04f 0a0f 	mov.w	sl, #15
   18448:	3602      	adds	r6, #2
   1844a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1844e:	464b      	mov	r3, r9
   18450:	e7aa      	b.n	183a8 <_strtoul_l.constprop.0+0x5c>
   18452:	7833      	ldrb	r3, [r6, #0]
   18454:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18458:	2b58      	cmp	r3, #88	; 0x58
   1845a:	d0ef      	beq.n	1843c <_strtoul_l.constprop.0+0xf0>
   1845c:	2308      	movs	r3, #8
   1845e:	f04f 0a07 	mov.w	sl, #7
   18462:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   18466:	4699      	mov	r9, r3
   18468:	e79e      	b.n	183a8 <_strtoul_l.constprop.0+0x5c>
   1846a:	4699      	mov	r9, r3
   1846c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18470:	f04f 0a0f 	mov.w	sl, #15
   18474:	e798      	b.n	183a8 <_strtoul_l.constprop.0+0x5c>
   18476:	f04f 0a0f 	mov.w	sl, #15
   1847a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1847e:	4699      	mov	r9, r3
   18480:	e792      	b.n	183a8 <_strtoul_l.constprop.0+0x5c>
   18482:	bf00      	nop
   18484:	20000ed9 	.word	0x20000ed9
   18488:	19999999 	.word	0x19999999

0001848c <_strtoul_r>:
   1848c:	f7ff bf5e 	b.w	1834c <_strtoul_l.constprop.0>

00018490 <_strtoll_l.constprop.0>:
   18490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18494:	b085      	sub	sp, #20
   18496:	461f      	mov	r7, r3
   18498:	4b57      	ldr	r3, [pc, #348]	; (185f8 <_strtoll_l.constprop.0+0x168>)
   1849a:	9003      	str	r0, [sp, #12]
   1849c:	468a      	mov	sl, r1
   1849e:	9200      	str	r2, [sp, #0]
   184a0:	460d      	mov	r5, r1
   184a2:	462a      	mov	r2, r5
   184a4:	f815 4b01 	ldrb.w	r4, [r5], #1
   184a8:	5d1e      	ldrb	r6, [r3, r4]
   184aa:	f016 0608 	ands.w	r6, r6, #8
   184ae:	d1f8      	bne.n	184a2 <_strtoll_l.constprop.0+0x12>
   184b0:	2c2d      	cmp	r4, #45	; 0x2d
   184b2:	d075      	beq.n	185a0 <_strtoll_l.constprop.0+0x110>
   184b4:	2c2b      	cmp	r4, #43	; 0x2b
   184b6:	bf05      	ittet	eq
   184b8:	782c      	ldrbeq	r4, [r5, #0]
   184ba:	9602      	streq	r6, [sp, #8]
   184bc:	9602      	strne	r6, [sp, #8]
   184be:	1c95      	addeq	r5, r2, #2
   184c0:	f04f 36ff 	mov.w	r6, #4294967295
   184c4:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   184c8:	b12f      	cbz	r7, 184d6 <_strtoll_l.constprop.0+0x46>
   184ca:	2f10      	cmp	r7, #16
   184cc:	d06f      	beq.n	185ae <_strtoll_l.constprop.0+0x11e>
   184ce:	46b8      	mov	r8, r7
   184d0:	ea4f 79e7 	mov.w	r9, r7, asr #31
   184d4:	e005      	b.n	184e2 <_strtoll_l.constprop.0+0x52>
   184d6:	2c30      	cmp	r4, #48	; 0x30
   184d8:	d074      	beq.n	185c4 <_strtoll_l.constprop.0+0x134>
   184da:	f04f 080a 	mov.w	r8, #10
   184de:	46b9      	mov	r9, r7
   184e0:	4647      	mov	r7, r8
   184e2:	4642      	mov	r2, r8
   184e4:	464b      	mov	r3, r9
   184e6:	4630      	mov	r0, r6
   184e8:	4659      	mov	r1, fp
   184ea:	f7f7 fb67 	bl	fbbc <__aeabi_uldivmod>
   184ee:	2300      	movs	r3, #0
   184f0:	9201      	str	r2, [sp, #4]
   184f2:	4684      	mov	ip, r0
   184f4:	460a      	mov	r2, r1
   184f6:	4618      	mov	r0, r3
   184f8:	4619      	mov	r1, r3
   184fa:	e011      	b.n	18520 <_strtoll_l.constprop.0+0x90>
   184fc:	428a      	cmp	r2, r1
   184fe:	bf08      	it	eq
   18500:	4584      	cmpeq	ip, r0
   18502:	d03d      	beq.n	18580 <_strtoll_l.constprop.0+0xf0>
   18504:	fb00 f309 	mul.w	r3, r0, r9
   18508:	fb08 3301 	mla	r3, r8, r1, r3
   1850c:	fba0 0108 	umull	r0, r1, r0, r8
   18510:	440b      	add	r3, r1
   18512:	eb1e 0000 	adds.w	r0, lr, r0
   18516:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   1851a:	2301      	movs	r3, #1
   1851c:	f815 4b01 	ldrb.w	r4, [r5], #1
   18520:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   18524:	f1be 0f09 	cmp.w	lr, #9
   18528:	d906      	bls.n	18538 <_strtoll_l.constprop.0+0xa8>
   1852a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   1852e:	f1be 0f19 	cmp.w	lr, #25
   18532:	d80c      	bhi.n	1854e <_strtoll_l.constprop.0+0xbe>
   18534:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   18538:	4577      	cmp	r7, lr
   1853a:	dd11      	ble.n	18560 <_strtoll_l.constprop.0+0xd0>
   1853c:	1c5c      	adds	r4, r3, #1
   1853e:	d0ed      	beq.n	1851c <_strtoll_l.constprop.0+0x8c>
   18540:	4584      	cmp	ip, r0
   18542:	eb72 0301 	sbcs.w	r3, r2, r1
   18546:	d2d9      	bcs.n	184fc <_strtoll_l.constprop.0+0x6c>
   18548:	f04f 33ff 	mov.w	r3, #4294967295
   1854c:	e7e6      	b.n	1851c <_strtoll_l.constprop.0+0x8c>
   1854e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   18552:	f1be 0f19 	cmp.w	lr, #25
   18556:	d803      	bhi.n	18560 <_strtoll_l.constprop.0+0xd0>
   18558:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   1855c:	4577      	cmp	r7, lr
   1855e:	dced      	bgt.n	1853c <_strtoll_l.constprop.0+0xac>
   18560:	1c5a      	adds	r2, r3, #1
   18562:	d013      	beq.n	1858c <_strtoll_l.constprop.0+0xfc>
   18564:	9a02      	ldr	r2, [sp, #8]
   18566:	b112      	cbz	r2, 1856e <_strtoll_l.constprop.0+0xde>
   18568:	4240      	negs	r0, r0
   1856a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1856e:	9a00      	ldr	r2, [sp, #0]
   18570:	b11a      	cbz	r2, 1857a <_strtoll_l.constprop.0+0xea>
   18572:	bba3      	cbnz	r3, 185de <_strtoll_l.constprop.0+0x14e>
   18574:	9b00      	ldr	r3, [sp, #0]
   18576:	f8c3 a000 	str.w	sl, [r3]
   1857a:	b005      	add	sp, #20
   1857c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18580:	9b01      	ldr	r3, [sp, #4]
   18582:	4573      	cmp	r3, lr
   18584:	dabe      	bge.n	18504 <_strtoll_l.constprop.0+0x74>
   18586:	f04f 33ff 	mov.w	r3, #4294967295
   1858a:	e7c7      	b.n	1851c <_strtoll_l.constprop.0+0x8c>
   1858c:	9a03      	ldr	r2, [sp, #12]
   1858e:	2322      	movs	r3, #34	; 0x22
   18590:	6013      	str	r3, [r2, #0]
   18592:	9b00      	ldr	r3, [sp, #0]
   18594:	b333      	cbz	r3, 185e4 <_strtoll_l.constprop.0+0x154>
   18596:	f105 3aff 	add.w	sl, r5, #4294967295
   1859a:	4630      	mov	r0, r6
   1859c:	4659      	mov	r1, fp
   1859e:	e7e9      	b.n	18574 <_strtoll_l.constprop.0+0xe4>
   185a0:	2301      	movs	r3, #1
   185a2:	782c      	ldrb	r4, [r5, #0]
   185a4:	9302      	str	r3, [sp, #8]
   185a6:	1c95      	adds	r5, r2, #2
   185a8:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   185ac:	e78c      	b.n	184c8 <_strtoll_l.constprop.0+0x38>
   185ae:	2c30      	cmp	r4, #48	; 0x30
   185b0:	d104      	bne.n	185bc <_strtoll_l.constprop.0+0x12c>
   185b2:	782b      	ldrb	r3, [r5, #0]
   185b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   185b8:	2b58      	cmp	r3, #88	; 0x58
   185ba:	d008      	beq.n	185ce <_strtoll_l.constprop.0+0x13e>
   185bc:	46b8      	mov	r8, r7
   185be:	f04f 0900 	mov.w	r9, #0
   185c2:	e78e      	b.n	184e2 <_strtoll_l.constprop.0+0x52>
   185c4:	782b      	ldrb	r3, [r5, #0]
   185c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   185ca:	2b58      	cmp	r3, #88	; 0x58
   185cc:	d10f      	bne.n	185ee <_strtoll_l.constprop.0+0x15e>
   185ce:	f04f 0810 	mov.w	r8, #16
   185d2:	786c      	ldrb	r4, [r5, #1]
   185d4:	f04f 0900 	mov.w	r9, #0
   185d8:	3502      	adds	r5, #2
   185da:	4647      	mov	r7, r8
   185dc:	e781      	b.n	184e2 <_strtoll_l.constprop.0+0x52>
   185de:	4606      	mov	r6, r0
   185e0:	468b      	mov	fp, r1
   185e2:	e7d8      	b.n	18596 <_strtoll_l.constprop.0+0x106>
   185e4:	4630      	mov	r0, r6
   185e6:	4659      	mov	r1, fp
   185e8:	b005      	add	sp, #20
   185ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185ee:	f04f 0808 	mov.w	r8, #8
   185f2:	46b9      	mov	r9, r7
   185f4:	4647      	mov	r7, r8
   185f6:	e774      	b.n	184e2 <_strtoll_l.constprop.0+0x52>
   185f8:	20000ed9 	.word	0x20000ed9

000185fc <_strtoll_r>:
   185fc:	f7ff bf48 	b.w	18490 <_strtoll_l.constprop.0>

00018600 <_strtoull_l.constprop.0>:
   18600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18604:	b085      	sub	sp, #20
   18606:	468b      	mov	fp, r1
   18608:	9201      	str	r2, [sp, #4]
   1860a:	4a62      	ldr	r2, [pc, #392]	; (18794 <_strtoull_l.constprop.0+0x194>)
   1860c:	9003      	str	r0, [sp, #12]
   1860e:	461e      	mov	r6, r3
   18610:	460d      	mov	r5, r1
   18612:	4629      	mov	r1, r5
   18614:	f815 4b01 	ldrb.w	r4, [r5], #1
   18618:	5d13      	ldrb	r3, [r2, r4]
   1861a:	f013 0308 	ands.w	r3, r3, #8
   1861e:	d1f8      	bne.n	18612 <_strtoull_l.constprop.0+0x12>
   18620:	2c2d      	cmp	r4, #45	; 0x2d
   18622:	f000 8082 	beq.w	1872a <_strtoull_l.constprop.0+0x12a>
   18626:	2c2b      	cmp	r4, #43	; 0x2b
   18628:	bf03      	ittte	eq
   1862a:	782c      	ldrbeq	r4, [r5, #0]
   1862c:	9302      	streq	r3, [sp, #8]
   1862e:	1c8d      	addeq	r5, r1, #2
   18630:	9302      	strne	r3, [sp, #8]
   18632:	b1be      	cbz	r6, 18664 <_strtoull_l.constprop.0+0x64>
   18634:	2e10      	cmp	r6, #16
   18636:	d07d      	beq.n	18734 <_strtoull_l.constprop.0+0x134>
   18638:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   1863c:	4632      	mov	r2, r6
   1863e:	4653      	mov	r3, sl
   18640:	f04f 30ff 	mov.w	r0, #4294967295
   18644:	f04f 31ff 	mov.w	r1, #4294967295
   18648:	f7f7 fab8 	bl	fbbc <__aeabi_uldivmod>
   1864c:	4632      	mov	r2, r6
   1864e:	4607      	mov	r7, r0
   18650:	4688      	mov	r8, r1
   18652:	4653      	mov	r3, sl
   18654:	f04f 30ff 	mov.w	r0, #4294967295
   18658:	f04f 31ff 	mov.w	r1, #4294967295
   1865c:	46b1      	mov	r9, r6
   1865e:	f7f7 faad 	bl	fbbc <__aeabi_uldivmod>
   18662:	e00a      	b.n	1867a <_strtoull_l.constprop.0+0x7a>
   18664:	2c30      	cmp	r4, #48	; 0x30
   18666:	d079      	beq.n	1875c <_strtoull_l.constprop.0+0x15c>
   18668:	f04f 090a 	mov.w	r9, #10
   1866c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 18798 <_strtoull_l.constprop.0+0x198>
   18670:	46b2      	mov	sl, r6
   18672:	2205      	movs	r2, #5
   18674:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   18678:	464e      	mov	r6, r9
   1867a:	f04f 0c00 	mov.w	ip, #0
   1867e:	4660      	mov	r0, ip
   18680:	4661      	mov	r1, ip
   18682:	e011      	b.n	186a8 <_strtoull_l.constprop.0+0xa8>
   18684:	4541      	cmp	r1, r8
   18686:	bf08      	it	eq
   18688:	42b8      	cmpeq	r0, r7
   1868a:	d03e      	beq.n	1870a <_strtoull_l.constprop.0+0x10a>
   1868c:	fb00 f40a 	mul.w	r4, r0, sl
   18690:	fb09 4101 	mla	r1, r9, r1, r4
   18694:	fba0 0409 	umull	r0, r4, r0, r9
   18698:	4421      	add	r1, r4
   1869a:	1818      	adds	r0, r3, r0
   1869c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   186a0:	f04f 0c01 	mov.w	ip, #1
   186a4:	f815 4b01 	ldrb.w	r4, [r5], #1
   186a8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   186ac:	2b09      	cmp	r3, #9
   186ae:	d905      	bls.n	186bc <_strtoull_l.constprop.0+0xbc>
   186b0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   186b4:	2b19      	cmp	r3, #25
   186b6:	d80d      	bhi.n	186d4 <_strtoull_l.constprop.0+0xd4>
   186b8:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   186bc:	429e      	cmp	r6, r3
   186be:	dd11      	ble.n	186e4 <_strtoull_l.constprop.0+0xe4>
   186c0:	f1bc 3fff 	cmp.w	ip, #4294967295
   186c4:	d0ee      	beq.n	186a4 <_strtoull_l.constprop.0+0xa4>
   186c6:	4287      	cmp	r7, r0
   186c8:	eb78 0401 	sbcs.w	r4, r8, r1
   186cc:	d2da      	bcs.n	18684 <_strtoull_l.constprop.0+0x84>
   186ce:	f04f 3cff 	mov.w	ip, #4294967295
   186d2:	e7e7      	b.n	186a4 <_strtoull_l.constprop.0+0xa4>
   186d4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   186d8:	2b19      	cmp	r3, #25
   186da:	d803      	bhi.n	186e4 <_strtoull_l.constprop.0+0xe4>
   186dc:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   186e0:	429e      	cmp	r6, r3
   186e2:	dced      	bgt.n	186c0 <_strtoull_l.constprop.0+0xc0>
   186e4:	f1bc 3fff 	cmp.w	ip, #4294967295
   186e8:	d014      	beq.n	18714 <_strtoull_l.constprop.0+0x114>
   186ea:	9b02      	ldr	r3, [sp, #8]
   186ec:	b113      	cbz	r3, 186f4 <_strtoull_l.constprop.0+0xf4>
   186ee:	4240      	negs	r0, r0
   186f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   186f4:	9b01      	ldr	r3, [sp, #4]
   186f6:	b12b      	cbz	r3, 18704 <_strtoull_l.constprop.0+0x104>
   186f8:	f1bc 0f00 	cmp.w	ip, #0
   186fc:	d112      	bne.n	18724 <_strtoull_l.constprop.0+0x124>
   186fe:	9b01      	ldr	r3, [sp, #4]
   18700:	f8c3 b000 	str.w	fp, [r3]
   18704:	b005      	add	sp, #20
   18706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1870a:	4293      	cmp	r3, r2
   1870c:	ddbe      	ble.n	1868c <_strtoull_l.constprop.0+0x8c>
   1870e:	f04f 3cff 	mov.w	ip, #4294967295
   18712:	e7c7      	b.n	186a4 <_strtoull_l.constprop.0+0xa4>
   18714:	9a03      	ldr	r2, [sp, #12]
   18716:	2322      	movs	r3, #34	; 0x22
   18718:	6013      	str	r3, [r2, #0]
   1871a:	9b01      	ldr	r3, [sp, #4]
   1871c:	4660      	mov	r0, ip
   1871e:	4661      	mov	r1, ip
   18720:	2b00      	cmp	r3, #0
   18722:	d0ef      	beq.n	18704 <_strtoull_l.constprop.0+0x104>
   18724:	f105 3bff 	add.w	fp, r5, #4294967295
   18728:	e7e9      	b.n	186fe <_strtoull_l.constprop.0+0xfe>
   1872a:	2301      	movs	r3, #1
   1872c:	782c      	ldrb	r4, [r5, #0]
   1872e:	9302      	str	r3, [sp, #8]
   18730:	1c8d      	adds	r5, r1, #2
   18732:	e77e      	b.n	18632 <_strtoull_l.constprop.0+0x32>
   18734:	2c30      	cmp	r4, #48	; 0x30
   18736:	d123      	bne.n	18780 <_strtoull_l.constprop.0+0x180>
   18738:	782b      	ldrb	r3, [r5, #0]
   1873a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1873e:	2b58      	cmp	r3, #88	; 0x58
   18740:	d11b      	bne.n	1877a <_strtoull_l.constprop.0+0x17a>
   18742:	f04f 0910 	mov.w	r9, #16
   18746:	786c      	ldrb	r4, [r5, #1]
   18748:	220f      	movs	r2, #15
   1874a:	3502      	adds	r5, #2
   1874c:	f04f 37ff 	mov.w	r7, #4294967295
   18750:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18754:	f04f 0a00 	mov.w	sl, #0
   18758:	464e      	mov	r6, r9
   1875a:	e78e      	b.n	1867a <_strtoull_l.constprop.0+0x7a>
   1875c:	782b      	ldrb	r3, [r5, #0]
   1875e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18762:	2b58      	cmp	r3, #88	; 0x58
   18764:	d0ed      	beq.n	18742 <_strtoull_l.constprop.0+0x142>
   18766:	f04f 0908 	mov.w	r9, #8
   1876a:	46b2      	mov	sl, r6
   1876c:	2207      	movs	r2, #7
   1876e:	f04f 37ff 	mov.w	r7, #4294967295
   18772:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   18776:	464e      	mov	r6, r9
   18778:	e77f      	b.n	1867a <_strtoull_l.constprop.0+0x7a>
   1877a:	f04f 0a00 	mov.w	sl, #0
   1877e:	e75d      	b.n	1863c <_strtoull_l.constprop.0+0x3c>
   18780:	220f      	movs	r2, #15
   18782:	f04f 37ff 	mov.w	r7, #4294967295
   18786:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1878a:	46b1      	mov	r9, r6
   1878c:	f04f 0a00 	mov.w	sl, #0
   18790:	e773      	b.n	1867a <_strtoull_l.constprop.0+0x7a>
   18792:	bf00      	nop
   18794:	20000ed9 	.word	0x20000ed9
   18798:	19999999 	.word	0x19999999

0001879c <_strtoull_r>:
   1879c:	f7ff bf30 	b.w	18600 <_strtoull_l.constprop.0>

000187a0 <_mbrtowc_r>:
   187a0:	b570      	push	{r4, r5, r6, lr}
   187a2:	b082      	sub	sp, #8
   187a4:	4604      	mov	r4, r0
   187a6:	9d06      	ldr	r5, [sp, #24]
   187a8:	b155      	cbz	r5, 187c0 <_mbrtowc_r+0x20>
   187aa:	b16a      	cbz	r2, 187c8 <_mbrtowc_r+0x28>
   187ac:	480f      	ldr	r0, [pc, #60]	; (187ec <_mbrtowc_r+0x4c>)
   187ae:	9500      	str	r5, [sp, #0]
   187b0:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   187b4:	4620      	mov	r0, r4
   187b6:	47b0      	blx	r6
   187b8:	1c43      	adds	r3, r0, #1
   187ba:	d010      	beq.n	187de <_mbrtowc_r+0x3e>
   187bc:	b002      	add	sp, #8
   187be:	bd70      	pop	{r4, r5, r6, pc}
   187c0:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   187c4:	2a00      	cmp	r2, #0
   187c6:	d1f1      	bne.n	187ac <_mbrtowc_r+0xc>
   187c8:	4b08      	ldr	r3, [pc, #32]	; (187ec <_mbrtowc_r+0x4c>)
   187ca:	9500      	str	r5, [sp, #0]
   187cc:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   187d0:	4611      	mov	r1, r2
   187d2:	2301      	movs	r3, #1
   187d4:	4a06      	ldr	r2, [pc, #24]	; (187f0 <_mbrtowc_r+0x50>)
   187d6:	4620      	mov	r0, r4
   187d8:	47b0      	blx	r6
   187da:	1c43      	adds	r3, r0, #1
   187dc:	d1ee      	bne.n	187bc <_mbrtowc_r+0x1c>
   187de:	2200      	movs	r2, #0
   187e0:	238a      	movs	r3, #138	; 0x8a
   187e2:	602a      	str	r2, [r5, #0]
   187e4:	6023      	str	r3, [r4, #0]
   187e6:	b002      	add	sp, #8
   187e8:	bd70      	pop	{r4, r5, r6, pc}
   187ea:	bf00      	nop
   187ec:	20008a2c 	.word	0x20008a2c
   187f0:	200004ec 	.word	0x200004ec

000187f4 <_wcrtomb_r>:
   187f4:	b570      	push	{r4, r5, r6, lr}
   187f6:	4605      	mov	r5, r0
   187f8:	b084      	sub	sp, #16
   187fa:	b15b      	cbz	r3, 18814 <_wcrtomb_r+0x20>
   187fc:	461c      	mov	r4, r3
   187fe:	b169      	cbz	r1, 1881c <_wcrtomb_r+0x28>
   18800:	4b0e      	ldr	r3, [pc, #56]	; (1883c <_wcrtomb_r+0x48>)
   18802:	4628      	mov	r0, r5
   18804:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   18808:	4623      	mov	r3, r4
   1880a:	47b0      	blx	r6
   1880c:	1c43      	adds	r3, r0, #1
   1880e:	d00f      	beq.n	18830 <_wcrtomb_r+0x3c>
   18810:	b004      	add	sp, #16
   18812:	bd70      	pop	{r4, r5, r6, pc}
   18814:	f500 7482 	add.w	r4, r0, #260	; 0x104
   18818:	2900      	cmp	r1, #0
   1881a:	d1f1      	bne.n	18800 <_wcrtomb_r+0xc>
   1881c:	4a07      	ldr	r2, [pc, #28]	; (1883c <_wcrtomb_r+0x48>)
   1881e:	4623      	mov	r3, r4
   18820:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   18824:	4628      	mov	r0, r5
   18826:	460a      	mov	r2, r1
   18828:	a901      	add	r1, sp, #4
   1882a:	47b0      	blx	r6
   1882c:	1c43      	adds	r3, r0, #1
   1882e:	d1ef      	bne.n	18810 <_wcrtomb_r+0x1c>
   18830:	2200      	movs	r2, #0
   18832:	238a      	movs	r3, #138	; 0x8a
   18834:	6022      	str	r2, [r4, #0]
   18836:	602b      	str	r3, [r5, #0]
   18838:	b004      	add	sp, #16
   1883a:	bd70      	pop	{r4, r5, r6, pc}
   1883c:	20008a2c 	.word	0x20008a2c

00018840 <_wcsrtombs_r>:
   18840:	b510      	push	{r4, lr}
   18842:	b082      	sub	sp, #8
   18844:	9c04      	ldr	r4, [sp, #16]
   18846:	e9cd 3400 	strd	r3, r4, [sp]
   1884a:	f04f 33ff 	mov.w	r3, #4294967295
   1884e:	f001 fd9f 	bl	1a390 <_wcsnrtombs_r>
   18852:	b002      	add	sp, #8
   18854:	bd10      	pop	{r4, pc}
   18856:	bf00      	nop

00018858 <iswspace>:
   18858:	2100      	movs	r1, #0
   1885a:	f000 b801 	b.w	18860 <iswspace_l>
   1885e:	bf00      	nop

00018860 <iswspace_l>:
   18860:	b510      	push	{r4, lr}
   18862:	f000 f8ab 	bl	189bc <_jp2uc_l>
   18866:	4604      	mov	r4, r0
   18868:	f001 fda4 	bl	1a3b4 <category>
   1886c:	f1a0 031a 	sub.w	r3, r0, #26
   18870:	b2db      	uxtb	r3, r3
   18872:	2b02      	cmp	r3, #2
   18874:	d906      	bls.n	18884 <iswspace_l+0x24>
   18876:	f1a4 0009 	sub.w	r0, r4, #9
   1887a:	2804      	cmp	r0, #4
   1887c:	bf8c      	ite	hi
   1887e:	2000      	movhi	r0, #0
   18880:	2001      	movls	r0, #1
   18882:	bd10      	pop	{r4, pc}
   18884:	2001      	movs	r0, #1
   18886:	bd10      	pop	{r4, pc}

00018888 <__jp2uc>:
   18888:	2902      	cmp	r1, #2
   1888a:	d032      	beq.n	188f2 <__jp2uc+0x6a>
   1888c:	2903      	cmp	r1, #3
   1888e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   18892:	bf1d      	ittte	ne
   18894:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   18898:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   1889c:	b2d2      	uxtbne	r2, r2
   1889e:	b2c2      	uxtbeq	r2, r0
   188a0:	f103 0150 	add.w	r1, r3, #80	; 0x50
   188a4:	b2c9      	uxtb	r1, r1
   188a6:	291f      	cmp	r1, #31
   188a8:	d806      	bhi.n	188b8 <__jp2uc+0x30>
   188aa:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   188ae:	4288      	cmp	r0, r1
   188b0:	d969      	bls.n	18986 <__jp2uc+0xfe>
   188b2:	f04f 30ff 	mov.w	r0, #4294967295
   188b6:	4770      	bx	lr
   188b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   188bc:	b2c9      	uxtb	r1, r1
   188be:	2924      	cmp	r1, #36	; 0x24
   188c0:	d80e      	bhi.n	188e0 <__jp2uc+0x58>
   188c2:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   188c6:	4288      	cmp	r0, r1
   188c8:	d8f3      	bhi.n	188b2 <__jp2uc+0x2a>
   188ca:	3bd0      	subs	r3, #208	; 0xd0
   188cc:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   188d0:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   188d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   188d8:	4a30      	ldr	r2, [pc, #192]	; (1899c <__jp2uc+0x114>)
   188da:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   188de:	4770      	bx	lr
   188e0:	3ba1      	subs	r3, #161	; 0xa1
   188e2:	2b07      	cmp	r3, #7
   188e4:	d8e5      	bhi.n	188b2 <__jp2uc+0x2a>
   188e6:	e8df f003 	tbb	[pc, r3]
   188ea:	3e48      	.short	0x3e48
   188ec:	25292e34 	.word	0x25292e34
   188f0:	1921      	.short	0x1921
   188f2:	b2c2      	uxtb	r2, r0
   188f4:	2a9e      	cmp	r2, #158	; 0x9e
   188f6:	f3c0 2107 	ubfx	r1, r0, #8, #8
   188fa:	d90b      	bls.n	18914 <__jp2uc+0x8c>
   188fc:	3223      	adds	r2, #35	; 0x23
   188fe:	b2d2      	uxtb	r2, r2
   18900:	2380      	movs	r3, #128	; 0x80
   18902:	299f      	cmp	r1, #159	; 0x9f
   18904:	bf94      	ite	ls
   18906:	3970      	subls	r1, #112	; 0x70
   18908:	3150      	addhi	r1, #80	; 0x50
   1890a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1890e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   18912:	e7c5      	b.n	188a0 <__jp2uc+0x18>
   18914:	3a7e      	subs	r2, #126	; 0x7e
   18916:	b2d2      	uxtb	r2, r2
   18918:	237f      	movs	r3, #127	; 0x7f
   1891a:	e7f2      	b.n	18902 <__jp2uc+0x7a>
   1891c:	2ac0      	cmp	r2, #192	; 0xc0
   1891e:	d8c8      	bhi.n	188b2 <__jp2uc+0x2a>
   18920:	4b1f      	ldr	r3, [pc, #124]	; (189a0 <__jp2uc+0x118>)
   18922:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   18926:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1892a:	4770      	bx	lr
   1892c:	2af1      	cmp	r2, #241	; 0xf1
   1892e:	d8c0      	bhi.n	188b2 <__jp2uc+0x2a>
   18930:	4b1c      	ldr	r3, [pc, #112]	; (189a4 <__jp2uc+0x11c>)
   18932:	e019      	b.n	18968 <__jp2uc+0xe0>
   18934:	2ad8      	cmp	r2, #216	; 0xd8
   18936:	d8bc      	bhi.n	188b2 <__jp2uc+0x2a>
   18938:	4b1b      	ldr	r3, [pc, #108]	; (189a8 <__jp2uc+0x120>)
   1893a:	e015      	b.n	18968 <__jp2uc+0xe0>
   1893c:	2af6      	cmp	r2, #246	; 0xf6
   1893e:	d8b8      	bhi.n	188b2 <__jp2uc+0x2a>
   18940:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   18944:	4770      	bx	lr
   18946:	2af3      	cmp	r2, #243	; 0xf3
   18948:	d8b3      	bhi.n	188b2 <__jp2uc+0x2a>
   1894a:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   1894e:	3020      	adds	r0, #32
   18950:	4770      	bx	lr
   18952:	4b16      	ldr	r3, [pc, #88]	; (189ac <__jp2uc+0x124>)
   18954:	4413      	add	r3, r2
   18956:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   1895a:	2b00      	cmp	r3, #0
   1895c:	d0a9      	beq.n	188b2 <__jp2uc+0x2a>
   1895e:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   18962:	3060      	adds	r0, #96	; 0x60
   18964:	4770      	bx	lr
   18966:	4b12      	ldr	r3, [pc, #72]	; (189b0 <__jp2uc+0x128>)
   18968:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   1896c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18970:	2800      	cmp	r0, #0
   18972:	bf08      	it	eq
   18974:	f04f 30ff 	moveq.w	r0, #4294967295
   18978:	4770      	bx	lr
   1897a:	4b0e      	ldr	r3, [pc, #56]	; (189b4 <__jp2uc+0x12c>)
   1897c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   18980:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18984:	4770      	bx	lr
   18986:	3bb0      	subs	r3, #176	; 0xb0
   18988:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   1898c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   18990:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   18994:	4a08      	ldr	r2, [pc, #32]	; (189b8 <__jp2uc+0x130>)
   18996:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1899a:	4770      	bx	lr
   1899c:	20006064 	.word	0x20006064
   189a0:	2000138c 	.word	0x2000138c
   189a4:	200012e8 	.word	0x200012e8
   189a8:	20001278 	.word	0x20001278
   189ac:	2000121c 	.word	0x2000121c
   189b0:	20001160 	.word	0x20001160
   189b4:	200010a4 	.word	0x200010a4
   189b8:	200013cc 	.word	0x200013cc

000189bc <_jp2uc_l>:
   189bc:	b538      	push	{r3, r4, r5, lr}
   189be:	4605      	mov	r5, r0
   189c0:	b1b9      	cbz	r1, 189f2 <_jp2uc_l+0x36>
   189c2:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   189c6:	4912      	ldr	r1, [pc, #72]	; (18a10 <_jp2uc_l+0x54>)
   189c8:	4620      	mov	r0, r4
   189ca:	f7f9 fbbd 	bl	12148 <strcmp>
   189ce:	b928      	cbnz	r0, 189dc <_jp2uc_l+0x20>
   189d0:	4628      	mov	r0, r5
   189d2:	2101      	movs	r1, #1
   189d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   189d8:	f7ff bf56 	b.w	18888 <__jp2uc>
   189dc:	490d      	ldr	r1, [pc, #52]	; (18a14 <_jp2uc_l+0x58>)
   189de:	4620      	mov	r0, r4
   189e0:	f7f9 fbb2 	bl	12148 <strcmp>
   189e4:	b938      	cbnz	r0, 189f6 <_jp2uc_l+0x3a>
   189e6:	4628      	mov	r0, r5
   189e8:	2102      	movs	r1, #2
   189ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   189ee:	f7ff bf4b 	b.w	18888 <__jp2uc>
   189f2:	4c09      	ldr	r4, [pc, #36]	; (18a18 <_jp2uc_l+0x5c>)
   189f4:	e7e7      	b.n	189c6 <_jp2uc_l+0xa>
   189f6:	4909      	ldr	r1, [pc, #36]	; (18a1c <_jp2uc_l+0x60>)
   189f8:	4620      	mov	r0, r4
   189fa:	f7f9 fba5 	bl	12148 <strcmp>
   189fe:	b928      	cbnz	r0, 18a0c <_jp2uc_l+0x50>
   18a00:	4628      	mov	r0, r5
   18a02:	2103      	movs	r1, #3
   18a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18a08:	f7ff bf3e 	b.w	18888 <__jp2uc>
   18a0c:	4628      	mov	r0, r5
   18a0e:	bd38      	pop	{r3, r4, r5, pc}
   18a10:	20001048 	.word	0x20001048
   18a14:	2000104c 	.word	0x2000104c
   18a18:	20008b56 	.word	0x20008b56
   18a1c:	20001054 	.word	0x20001054

00018a20 <fiprintf>:
   18a20:	b40e      	push	{r1, r2, r3}
   18a22:	b510      	push	{r4, lr}
   18a24:	b083      	sub	sp, #12
   18a26:	ab05      	add	r3, sp, #20
   18a28:	4c06      	ldr	r4, [pc, #24]	; (18a44 <fiprintf+0x24>)
   18a2a:	f853 2b04 	ldr.w	r2, [r3], #4
   18a2e:	9301      	str	r3, [sp, #4]
   18a30:	4601      	mov	r1, r0
   18a32:	6820      	ldr	r0, [r4, #0]
   18a34:	f000 f97c 	bl	18d30 <_vfiprintf_r>
   18a38:	b003      	add	sp, #12
   18a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18a3e:	b003      	add	sp, #12
   18a40:	4770      	bx	lr
   18a42:	bf00      	nop
   18a44:	20008fb4 	.word	0x20008fb4

00018a48 <__ssprint_r>:
   18a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a4c:	6893      	ldr	r3, [r2, #8]
   18a4e:	6817      	ldr	r7, [r2, #0]
   18a50:	b083      	sub	sp, #12
   18a52:	4692      	mov	sl, r2
   18a54:	2b00      	cmp	r3, #0
   18a56:	d070      	beq.n	18b3a <__ssprint_r+0xf2>
   18a58:	4681      	mov	r9, r0
   18a5a:	688a      	ldr	r2, [r1, #8]
   18a5c:	6808      	ldr	r0, [r1, #0]
   18a5e:	460c      	mov	r4, r1
   18a60:	3708      	adds	r7, #8
   18a62:	e043      	b.n	18aec <__ssprint_r+0xa4>
   18a64:	89a3      	ldrh	r3, [r4, #12]
   18a66:	f413 6f90 	tst.w	r3, #1152	; 0x480
   18a6a:	d02e      	beq.n	18aca <__ssprint_r+0x82>
   18a6c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   18a70:	eba0 0801 	sub.w	r8, r0, r1
   18a74:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   18a78:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   18a7c:	f108 0001 	add.w	r0, r8, #1
   18a80:	1076      	asrs	r6, r6, #1
   18a82:	4428      	add	r0, r5
   18a84:	42b0      	cmp	r0, r6
   18a86:	4632      	mov	r2, r6
   18a88:	bf84      	itt	hi
   18a8a:	4606      	movhi	r6, r0
   18a8c:	4632      	movhi	r2, r6
   18a8e:	055b      	lsls	r3, r3, #21
   18a90:	d537      	bpl.n	18b02 <__ssprint_r+0xba>
   18a92:	4611      	mov	r1, r2
   18a94:	4648      	mov	r0, r9
   18a96:	f7f7 fa1f 	bl	fed8 <_malloc_r>
   18a9a:	9001      	str	r0, [sp, #4]
   18a9c:	2800      	cmp	r0, #0
   18a9e:	d03a      	beq.n	18b16 <__ssprint_r+0xce>
   18aa0:	4642      	mov	r2, r8
   18aa2:	6921      	ldr	r1, [r4, #16]
   18aa4:	f7f5 f8fa 	bl	dc9c <memcpy>
   18aa8:	89a2      	ldrh	r2, [r4, #12]
   18aaa:	9b01      	ldr	r3, [sp, #4]
   18aac:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   18ab0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18ab4:	81a2      	strh	r2, [r4, #12]
   18ab6:	eba6 0208 	sub.w	r2, r6, r8
   18aba:	eb03 0008 	add.w	r0, r3, r8
   18abe:	6166      	str	r6, [r4, #20]
   18ac0:	60a2      	str	r2, [r4, #8]
   18ac2:	6123      	str	r3, [r4, #16]
   18ac4:	6020      	str	r0, [r4, #0]
   18ac6:	462e      	mov	r6, r5
   18ac8:	46a8      	mov	r8, r5
   18aca:	4642      	mov	r2, r8
   18acc:	4659      	mov	r1, fp
   18ace:	f7f9 f8f7 	bl	11cc0 <memmove>
   18ad2:	f8da 3008 	ldr.w	r3, [sl, #8]
   18ad6:	68a2      	ldr	r2, [r4, #8]
   18ad8:	6820      	ldr	r0, [r4, #0]
   18ada:	1b92      	subs	r2, r2, r6
   18adc:	4440      	add	r0, r8
   18ade:	1b5b      	subs	r3, r3, r5
   18ae0:	60a2      	str	r2, [r4, #8]
   18ae2:	6020      	str	r0, [r4, #0]
   18ae4:	f8ca 3008 	str.w	r3, [sl, #8]
   18ae8:	b33b      	cbz	r3, 18b3a <__ssprint_r+0xf2>
   18aea:	3708      	adds	r7, #8
   18aec:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   18af0:	2d00      	cmp	r5, #0
   18af2:	d0fa      	beq.n	18aea <__ssprint_r+0xa2>
   18af4:	42aa      	cmp	r2, r5
   18af6:	4616      	mov	r6, r2
   18af8:	4690      	mov	r8, r2
   18afa:	d9b3      	bls.n	18a64 <__ssprint_r+0x1c>
   18afc:	462e      	mov	r6, r5
   18afe:	46a8      	mov	r8, r5
   18b00:	e7e3      	b.n	18aca <__ssprint_r+0x82>
   18b02:	4648      	mov	r0, r9
   18b04:	f7f7 fcb0 	bl	10468 <_realloc_r>
   18b08:	4603      	mov	r3, r0
   18b0a:	2800      	cmp	r0, #0
   18b0c:	d1d3      	bne.n	18ab6 <__ssprint_r+0x6e>
   18b0e:	6921      	ldr	r1, [r4, #16]
   18b10:	4648      	mov	r0, r9
   18b12:	f7f9 fe47 	bl	127a4 <_free_r>
   18b16:	89a3      	ldrh	r3, [r4, #12]
   18b18:	220c      	movs	r2, #12
   18b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18b1e:	f8c9 2000 	str.w	r2, [r9]
   18b22:	f04f 30ff 	mov.w	r0, #4294967295
   18b26:	81a3      	strh	r3, [r4, #12]
   18b28:	2200      	movs	r2, #0
   18b2a:	2300      	movs	r3, #0
   18b2c:	f8ca 2008 	str.w	r2, [sl, #8]
   18b30:	f8ca 3004 	str.w	r3, [sl, #4]
   18b34:	b003      	add	sp, #12
   18b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b3a:	2000      	movs	r0, #0
   18b3c:	2300      	movs	r3, #0
   18b3e:	f8ca 3004 	str.w	r3, [sl, #4]
   18b42:	b003      	add	sp, #12
   18b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018b48 <_sungetc_r>:
   18b48:	b538      	push	{r3, r4, r5, lr}
   18b4a:	1c4b      	adds	r3, r1, #1
   18b4c:	d01a      	beq.n	18b84 <_sungetc_r+0x3c>
   18b4e:	8993      	ldrh	r3, [r2, #12]
   18b50:	4614      	mov	r4, r2
   18b52:	6b12      	ldr	r2, [r2, #48]	; 0x30
   18b54:	f023 0320 	bic.w	r3, r3, #32
   18b58:	81a3      	strh	r3, [r4, #12]
   18b5a:	b2cd      	uxtb	r5, r1
   18b5c:	b1aa      	cbz	r2, 18b8a <_sungetc_r+0x42>
   18b5e:	6862      	ldr	r2, [r4, #4]
   18b60:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18b62:	429a      	cmp	r2, r3
   18b64:	da09      	bge.n	18b7a <_sungetc_r+0x32>
   18b66:	6823      	ldr	r3, [r4, #0]
   18b68:	1e5a      	subs	r2, r3, #1
   18b6a:	6022      	str	r2, [r4, #0]
   18b6c:	f803 5c01 	strb.w	r5, [r3, #-1]
   18b70:	6863      	ldr	r3, [r4, #4]
   18b72:	3301      	adds	r3, #1
   18b74:	6063      	str	r3, [r4, #4]
   18b76:	4628      	mov	r0, r5
   18b78:	bd38      	pop	{r3, r4, r5, pc}
   18b7a:	4621      	mov	r1, r4
   18b7c:	f001 fa58 	bl	1a030 <__submore>
   18b80:	2800      	cmp	r0, #0
   18b82:	d0f0      	beq.n	18b66 <_sungetc_r+0x1e>
   18b84:	f04f 35ff 	mov.w	r5, #4294967295
   18b88:	e7f5      	b.n	18b76 <_sungetc_r+0x2e>
   18b8a:	6923      	ldr	r3, [r4, #16]
   18b8c:	6822      	ldr	r2, [r4, #0]
   18b8e:	b12b      	cbz	r3, 18b9c <_sungetc_r+0x54>
   18b90:	4293      	cmp	r3, r2
   18b92:	d203      	bcs.n	18b9c <_sungetc_r+0x54>
   18b94:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   18b98:	42ab      	cmp	r3, r5
   18b9a:	d00f      	beq.n	18bbc <_sungetc_r+0x74>
   18b9c:	6861      	ldr	r1, [r4, #4]
   18b9e:	63e1      	str	r1, [r4, #60]	; 0x3c
   18ba0:	4623      	mov	r3, r4
   18ba2:	63a2      	str	r2, [r4, #56]	; 0x38
   18ba4:	f104 0140 	add.w	r1, r4, #64	; 0x40
   18ba8:	2203      	movs	r2, #3
   18baa:	6362      	str	r2, [r4, #52]	; 0x34
   18bac:	6321      	str	r1, [r4, #48]	; 0x30
   18bae:	f803 5f42 	strb.w	r5, [r3, #66]!
   18bb2:	2201      	movs	r2, #1
   18bb4:	e9c4 3200 	strd	r3, r2, [r4]
   18bb8:	4628      	mov	r0, r5
   18bba:	bd38      	pop	{r3, r4, r5, pc}
   18bbc:	6863      	ldr	r3, [r4, #4]
   18bbe:	3a01      	subs	r2, #1
   18bc0:	3301      	adds	r3, #1
   18bc2:	e9c4 2300 	strd	r2, r3, [r4]
   18bc6:	e7d6      	b.n	18b76 <_sungetc_r+0x2e>

00018bc8 <__ssrefill_r>:
   18bc8:	b510      	push	{r4, lr}
   18bca:	460c      	mov	r4, r1
   18bcc:	6b09      	ldr	r1, [r1, #48]	; 0x30
   18bce:	b169      	cbz	r1, 18bec <__ssrefill_r+0x24>
   18bd0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18bd4:	4299      	cmp	r1, r3
   18bd6:	d001      	beq.n	18bdc <__ssrefill_r+0x14>
   18bd8:	f7f9 fde4 	bl	127a4 <_free_r>
   18bdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   18bde:	6063      	str	r3, [r4, #4]
   18be0:	2000      	movs	r0, #0
   18be2:	6320      	str	r0, [r4, #48]	; 0x30
   18be4:	b113      	cbz	r3, 18bec <__ssrefill_r+0x24>
   18be6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18be8:	6023      	str	r3, [r4, #0]
   18bea:	bd10      	pop	{r4, pc}
   18bec:	89a3      	ldrh	r3, [r4, #12]
   18bee:	6921      	ldr	r1, [r4, #16]
   18bf0:	2200      	movs	r2, #0
   18bf2:	f043 0320 	orr.w	r3, r3, #32
   18bf6:	e9c4 1200 	strd	r1, r2, [r4]
   18bfa:	81a3      	strh	r3, [r4, #12]
   18bfc:	f04f 30ff 	mov.w	r0, #4294967295
   18c00:	bd10      	pop	{r4, pc}
   18c02:	bf00      	nop

00018c04 <_sfread_r>:
   18c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c08:	b085      	sub	sp, #20
   18c0a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   18c0e:	fb02 f303 	mul.w	r3, r2, r3
   18c12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   18c14:	9301      	str	r3, [sp, #4]
   18c16:	b3a3      	cbz	r3, 18c82 <_sfread_r+0x7e>
   18c18:	f8d4 a004 	ldr.w	sl, [r4, #4]
   18c1c:	9b01      	ldr	r3, [sp, #4]
   18c1e:	4553      	cmp	r3, sl
   18c20:	468b      	mov	fp, r1
   18c22:	d946      	bls.n	18cb2 <_sfread_r+0xae>
   18c24:	46a0      	mov	r8, r4
   18c26:	9d01      	ldr	r5, [sp, #4]
   18c28:	f858 1b40 	ldr.w	r1, [r8], #64
   18c2c:	4607      	mov	r7, r0
   18c2e:	2600      	movs	r6, #0
   18c30:	4652      	mov	r2, sl
   18c32:	4658      	mov	r0, fp
   18c34:	f7f5 f832 	bl	dc9c <memcpy>
   18c38:	6823      	ldr	r3, [r4, #0]
   18c3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   18c3c:	4453      	add	r3, sl
   18c3e:	46a9      	mov	r9, r5
   18c40:	e9c4 3600 	strd	r3, r6, [r4]
   18c44:	4611      	mov	r1, r2
   18c46:	4638      	mov	r0, r7
   18c48:	44d3      	add	fp, sl
   18c4a:	eba5 050a 	sub.w	r5, r5, sl
   18c4e:	b1e2      	cbz	r2, 18c8a <_sfread_r+0x86>
   18c50:	4542      	cmp	r2, r8
   18c52:	d001      	beq.n	18c58 <_sfread_r+0x54>
   18c54:	f7f9 fda6 	bl	127a4 <_free_r>
   18c58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   18c5a:	6326      	str	r6, [r4, #48]	; 0x30
   18c5c:	6063      	str	r3, [r4, #4]
   18c5e:	b1a3      	cbz	r3, 18c8a <_sfread_r+0x86>
   18c60:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   18c62:	6021      	str	r1, [r4, #0]
   18c64:	42ab      	cmp	r3, r5
   18c66:	469a      	mov	sl, r3
   18c68:	d3e2      	bcc.n	18c30 <_sfread_r+0x2c>
   18c6a:	9b02      	ldr	r3, [sp, #8]
   18c6c:	9301      	str	r3, [sp, #4]
   18c6e:	462a      	mov	r2, r5
   18c70:	4658      	mov	r0, fp
   18c72:	f7f5 f813 	bl	dc9c <memcpy>
   18c76:	e9d4 3200 	ldrd	r3, r2, [r4]
   18c7a:	1b52      	subs	r2, r2, r5
   18c7c:	442b      	add	r3, r5
   18c7e:	e9c4 3200 	strd	r3, r2, [r4]
   18c82:	9801      	ldr	r0, [sp, #4]
   18c84:	b005      	add	sp, #20
   18c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c8a:	9a01      	ldr	r2, [sp, #4]
   18c8c:	9b03      	ldr	r3, [sp, #12]
   18c8e:	4452      	add	r2, sl
   18c90:	eba2 0209 	sub.w	r2, r2, r9
   18c94:	fbb2 f3f3 	udiv	r3, r2, r3
   18c98:	9301      	str	r3, [sp, #4]
   18c9a:	89a3      	ldrh	r3, [r4, #12]
   18c9c:	6922      	ldr	r2, [r4, #16]
   18c9e:	9801      	ldr	r0, [sp, #4]
   18ca0:	f043 0320 	orr.w	r3, r3, #32
   18ca4:	81a3      	strh	r3, [r4, #12]
   18ca6:	2300      	movs	r3, #0
   18ca8:	e9c4 2300 	strd	r2, r3, [r4]
   18cac:	b005      	add	sp, #20
   18cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cb2:	6821      	ldr	r1, [r4, #0]
   18cb4:	461d      	mov	r5, r3
   18cb6:	e7d8      	b.n	18c6a <_sfread_r+0x66>

00018cb8 <__sprint_r.part.0>:
   18cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cbc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   18cbe:	049c      	lsls	r4, r3, #18
   18cc0:	4690      	mov	r8, r2
   18cc2:	d52d      	bpl.n	18d20 <__sprint_r.part.0+0x68>
   18cc4:	6893      	ldr	r3, [r2, #8]
   18cc6:	6812      	ldr	r2, [r2, #0]
   18cc8:	b343      	cbz	r3, 18d1c <__sprint_r.part.0+0x64>
   18cca:	468b      	mov	fp, r1
   18ccc:	4606      	mov	r6, r0
   18cce:	f102 0908 	add.w	r9, r2, #8
   18cd2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   18cd6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   18cda:	d015      	beq.n	18d08 <__sprint_r.part.0+0x50>
   18cdc:	3d04      	subs	r5, #4
   18cde:	2400      	movs	r4, #0
   18ce0:	e001      	b.n	18ce6 <__sprint_r.part.0+0x2e>
   18ce2:	42a7      	cmp	r7, r4
   18ce4:	d00e      	beq.n	18d04 <__sprint_r.part.0+0x4c>
   18ce6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   18cea:	465a      	mov	r2, fp
   18cec:	4630      	mov	r0, r6
   18cee:	f001 fa97 	bl	1a220 <_fputwc_r>
   18cf2:	1c43      	adds	r3, r0, #1
   18cf4:	f104 0401 	add.w	r4, r4, #1
   18cf8:	d1f3      	bne.n	18ce2 <__sprint_r.part.0+0x2a>
   18cfa:	2300      	movs	r3, #0
   18cfc:	e9c8 3301 	strd	r3, r3, [r8, #4]
   18d00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d04:	f8d8 3008 	ldr.w	r3, [r8, #8]
   18d08:	f02a 0a03 	bic.w	sl, sl, #3
   18d0c:	eba3 030a 	sub.w	r3, r3, sl
   18d10:	f8c8 3008 	str.w	r3, [r8, #8]
   18d14:	f109 0908 	add.w	r9, r9, #8
   18d18:	2b00      	cmp	r3, #0
   18d1a:	d1da      	bne.n	18cd2 <__sprint_r.part.0+0x1a>
   18d1c:	2000      	movs	r0, #0
   18d1e:	e7ec      	b.n	18cfa <__sprint_r.part.0+0x42>
   18d20:	f001 f80c 	bl	19d3c <__sfvwrite_r>
   18d24:	2300      	movs	r3, #0
   18d26:	e9c8 3301 	strd	r3, r3, [r8, #4]
   18d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d2e:	bf00      	nop

00018d30 <_vfiprintf_r>:
   18d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d34:	ed2d 8b02 	vpush	{d8}
   18d38:	b0c5      	sub	sp, #276	; 0x114
   18d3a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   18d3e:	4683      	mov	fp, r0
   18d40:	ee08 1a10 	vmov	s16, r1
   18d44:	4616      	mov	r6, r2
   18d46:	2100      	movs	r1, #0
   18d48:	2208      	movs	r2, #8
   18d4a:	4650      	mov	r0, sl
   18d4c:	461c      	mov	r4, r3
   18d4e:	9307      	str	r3, [sp, #28]
   18d50:	f7f9 f832 	bl	11db8 <memset>
   18d54:	f1bb 0f00 	cmp.w	fp, #0
   18d58:	d004      	beq.n	18d64 <_vfiprintf_r+0x34>
   18d5a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   18d5e:	2b00      	cmp	r3, #0
   18d60:	f000 86a0 	beq.w	19aa4 <_vfiprintf_r+0xd74>
   18d64:	ee18 2a10 	vmov	r2, s16
   18d68:	6e53      	ldr	r3, [r2, #100]	; 0x64
   18d6a:	07db      	lsls	r3, r3, #31
   18d6c:	f140 8513 	bpl.w	19796 <_vfiprintf_r+0xa66>
   18d70:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   18d74:	b28a      	uxth	r2, r1
   18d76:	0495      	lsls	r5, r2, #18
   18d78:	d40b      	bmi.n	18d92 <_vfiprintf_r+0x62>
   18d7a:	ee18 3a10 	vmov	r3, s16
   18d7e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   18d82:	8199      	strh	r1, [r3, #12]
   18d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   18d86:	b28a      	uxth	r2, r1
   18d88:	ee18 1a10 	vmov	r1, s16
   18d8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   18d90:	664b      	str	r3, [r1, #100]	; 0x64
   18d92:	0710      	lsls	r0, r2, #28
   18d94:	f140 8105 	bpl.w	18fa2 <_vfiprintf_r+0x272>
   18d98:	ee18 3a10 	vmov	r3, s16
   18d9c:	691b      	ldr	r3, [r3, #16]
   18d9e:	2b00      	cmp	r3, #0
   18da0:	f000 80ff 	beq.w	18fa2 <_vfiprintf_r+0x272>
   18da4:	f002 031a 	and.w	r3, r2, #26
   18da8:	2b0a      	cmp	r3, #10
   18daa:	f000 810a 	beq.w	18fc2 <_vfiprintf_r+0x292>
   18dae:	2300      	movs	r3, #0
   18db0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   18db4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   18db8:	aa1b      	add	r2, sp, #108	; 0x6c
   18dba:	930c      	str	r3, [sp, #48]	; 0x30
   18dbc:	9218      	str	r2, [sp, #96]	; 0x60
   18dbe:	4691      	mov	r9, r2
   18dc0:	930b      	str	r3, [sp, #44]	; 0x2c
   18dc2:	9305      	str	r3, [sp, #20]
   18dc4:	46b0      	mov	r8, r6
   18dc6:	4644      	mov	r4, r8
   18dc8:	4ba8      	ldr	r3, [pc, #672]	; (1906c <_vfiprintf_r+0x33c>)
   18dca:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   18dce:	f7f9 f913 	bl	11ff8 <__locale_mb_cur_max>
   18dd2:	4622      	mov	r2, r4
   18dd4:	4603      	mov	r3, r0
   18dd6:	a912      	add	r1, sp, #72	; 0x48
   18dd8:	f8cd a000 	str.w	sl, [sp]
   18ddc:	4658      	mov	r0, fp
   18dde:	47a8      	blx	r5
   18de0:	2800      	cmp	r0, #0
   18de2:	f000 8145 	beq.w	19070 <_vfiprintf_r+0x340>
   18de6:	f2c0 8139 	blt.w	1905c <_vfiprintf_r+0x32c>
   18dea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18dec:	2a25      	cmp	r2, #37	; 0x25
   18dee:	4603      	mov	r3, r0
   18df0:	d001      	beq.n	18df6 <_vfiprintf_r+0xc6>
   18df2:	441c      	add	r4, r3
   18df4:	e7e8      	b.n	18dc8 <_vfiprintf_r+0x98>
   18df6:	ebb4 0608 	subs.w	r6, r4, r8
   18dfa:	4605      	mov	r5, r0
   18dfc:	f040 813c 	bne.w	19078 <_vfiprintf_r+0x348>
   18e00:	2300      	movs	r3, #0
   18e02:	7861      	ldrb	r1, [r4, #1]
   18e04:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   18e08:	f104 0801 	add.w	r8, r4, #1
   18e0c:	9306      	str	r3, [sp, #24]
   18e0e:	f04f 37ff 	mov.w	r7, #4294967295
   18e12:	461e      	mov	r6, r3
   18e14:	242b      	movs	r4, #43	; 0x2b
   18e16:	f108 0801 	add.w	r8, r8, #1
   18e1a:	f1a1 0320 	sub.w	r3, r1, #32
   18e1e:	2b5a      	cmp	r3, #90	; 0x5a
   18e20:	f200 8178 	bhi.w	19114 <_vfiprintf_r+0x3e4>
   18e24:	e8df f013 	tbh	[pc, r3, lsl #1]
   18e28:	017602b5 	.word	0x017602b5
   18e2c:	02b00176 	.word	0x02b00176
   18e30:	01760176 	.word	0x01760176
   18e34:	006a0176 	.word	0x006a0176
   18e38:	01760176 	.word	0x01760176
   18e3c:	028d027d 	.word	0x028d027d
   18e40:	02880176 	.word	0x02880176
   18e44:	01760297 	.word	0x01760297
   18e48:	005b0292 	.word	0x005b0292
   18e4c:	005b005b 	.word	0x005b005b
   18e50:	005b005b 	.word	0x005b005b
   18e54:	005b005b 	.word	0x005b005b
   18e58:	005b005b 	.word	0x005b005b
   18e5c:	01760176 	.word	0x01760176
   18e60:	01760176 	.word	0x01760176
   18e64:	01760176 	.word	0x01760176
   18e68:	01760176 	.word	0x01760176
   18e6c:	025c0176 	.word	0x025c0176
   18e70:	01760084 	.word	0x01760084
   18e74:	01760176 	.word	0x01760176
   18e78:	01760176 	.word	0x01760176
   18e7c:	01760176 	.word	0x01760176
   18e80:	01760176 	.word	0x01760176
   18e84:	00e80176 	.word	0x00e80176
   18e88:	01760176 	.word	0x01760176
   18e8c:	02330176 	.word	0x02330176
   18e90:	02da0176 	.word	0x02da0176
   18e94:	01760176 	.word	0x01760176
   18e98:	0176058b 	.word	0x0176058b
   18e9c:	01760176 	.word	0x01760176
   18ea0:	01760176 	.word	0x01760176
   18ea4:	01760176 	.word	0x01760176
   18ea8:	01760176 	.word	0x01760176
   18eac:	025c0176 	.word	0x025c0176
   18eb0:	01760086 	.word	0x01760086
   18eb4:	01760176 	.word	0x01760176
   18eb8:	008602cd 	.word	0x008602cd
   18ebc:	0176007f 	.word	0x0176007f
   18ec0:	017602c0 	.word	0x017602c0
   18ec4:	00ea02fd 	.word	0x00ea02fd
   18ec8:	007f02ed 	.word	0x007f02ed
   18ecc:	02330176 	.word	0x02330176
   18ed0:	0569007c 	.word	0x0569007c
   18ed4:	01760176 	.word	0x01760176
   18ed8:	0176056b 	.word	0x0176056b
   18edc:	007c      	.short	0x007c
   18ede:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   18ee2:	2200      	movs	r2, #0
   18ee4:	f818 1b01 	ldrb.w	r1, [r8], #1
   18ee8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   18eec:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   18ef0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   18ef4:	2b09      	cmp	r3, #9
   18ef6:	d9f5      	bls.n	18ee4 <_vfiprintf_r+0x1b4>
   18ef8:	9206      	str	r2, [sp, #24]
   18efa:	e78e      	b.n	18e1a <_vfiprintf_r+0xea>
   18efc:	4658      	mov	r0, fp
   18efe:	f7fe fa7d 	bl	173fc <_localeconv_r>
   18f02:	6843      	ldr	r3, [r0, #4]
   18f04:	930d      	str	r3, [sp, #52]	; 0x34
   18f06:	4618      	mov	r0, r3
   18f08:	f7f9 fb3a 	bl	12580 <strlen>
   18f0c:	900e      	str	r0, [sp, #56]	; 0x38
   18f0e:	4605      	mov	r5, r0
   18f10:	4658      	mov	r0, fp
   18f12:	f7fe fa73 	bl	173fc <_localeconv_r>
   18f16:	6883      	ldr	r3, [r0, #8]
   18f18:	930b      	str	r3, [sp, #44]	; 0x2c
   18f1a:	2d00      	cmp	r5, #0
   18f1c:	f040 84d6 	bne.w	198cc <_vfiprintf_r+0xb9c>
   18f20:	f898 1000 	ldrb.w	r1, [r8]
   18f24:	e777      	b.n	18e16 <_vfiprintf_r+0xe6>
   18f26:	f898 1000 	ldrb.w	r1, [r8]
   18f2a:	f046 0620 	orr.w	r6, r6, #32
   18f2e:	e772      	b.n	18e16 <_vfiprintf_r+0xe6>
   18f30:	f046 0610 	orr.w	r6, r6, #16
   18f34:	06b4      	lsls	r4, r6, #26
   18f36:	f140 818e 	bpl.w	19256 <_vfiprintf_r+0x526>
   18f3a:	9b07      	ldr	r3, [sp, #28]
   18f3c:	3307      	adds	r3, #7
   18f3e:	f023 0307 	bic.w	r3, r3, #7
   18f42:	461a      	mov	r2, r3
   18f44:	6859      	ldr	r1, [r3, #4]
   18f46:	f852 3b08 	ldr.w	r3, [r2], #8
   18f4a:	9207      	str	r2, [sp, #28]
   18f4c:	460a      	mov	r2, r1
   18f4e:	2900      	cmp	r1, #0
   18f50:	f2c0 8470 	blt.w	19834 <_vfiprintf_r+0xb04>
   18f54:	1c79      	adds	r1, r7, #1
   18f56:	f000 85a2 	beq.w	19a9e <_vfiprintf_r+0xd6e>
   18f5a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   18f5e:	9103      	str	r1, [sp, #12]
   18f60:	ea53 0102 	orrs.w	r1, r3, r2
   18f64:	f000 843f 	beq.w	197e6 <_vfiprintf_r+0xab6>
   18f68:	2b0a      	cmp	r3, #10
   18f6a:	f172 0100 	sbcs.w	r1, r2, #0
   18f6e:	f080 8541 	bcs.w	199f4 <_vfiprintf_r+0xcc4>
   18f72:	3330      	adds	r3, #48	; 0x30
   18f74:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   18f78:	9e03      	ldr	r6, [sp, #12]
   18f7a:	2301      	movs	r3, #1
   18f7c:	9304      	str	r3, [sp, #16]
   18f7e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   18f82:	9b04      	ldr	r3, [sp, #16]
   18f84:	42bb      	cmp	r3, r7
   18f86:	bfb8      	it	lt
   18f88:	463b      	movlt	r3, r7
   18f8a:	9303      	str	r3, [sp, #12]
   18f8c:	2300      	movs	r3, #0
   18f8e:	9308      	str	r3, [sp, #32]
   18f90:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   18f94:	2b00      	cmp	r3, #0
   18f96:	f000 80cb 	beq.w	19130 <_vfiprintf_r+0x400>
   18f9a:	9b03      	ldr	r3, [sp, #12]
   18f9c:	3301      	adds	r3, #1
   18f9e:	9303      	str	r3, [sp, #12]
   18fa0:	e0c6      	b.n	19130 <_vfiprintf_r+0x400>
   18fa2:	ee18 1a10 	vmov	r1, s16
   18fa6:	4658      	mov	r0, fp
   18fa8:	ee18 5a10 	vmov	r5, s16
   18fac:	f001 f87c 	bl	1a0a8 <__swsetup_r>
   18fb0:	2800      	cmp	r0, #0
   18fb2:	f040 8652 	bne.w	19c5a <_vfiprintf_r+0xf2a>
   18fb6:	89aa      	ldrh	r2, [r5, #12]
   18fb8:	f002 031a 	and.w	r3, r2, #26
   18fbc:	2b0a      	cmp	r3, #10
   18fbe:	f47f aef6 	bne.w	18dae <_vfiprintf_r+0x7e>
   18fc2:	ee18 1a10 	vmov	r1, s16
   18fc6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   18fca:	2b00      	cmp	r3, #0
   18fcc:	f6ff aeef 	blt.w	18dae <_vfiprintf_r+0x7e>
   18fd0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   18fd2:	07db      	lsls	r3, r3, #31
   18fd4:	d402      	bmi.n	18fdc <_vfiprintf_r+0x2ac>
   18fd6:	0597      	lsls	r7, r2, #22
   18fd8:	f140 8612 	bpl.w	19c00 <_vfiprintf_r+0xed0>
   18fdc:	ee18 1a10 	vmov	r1, s16
   18fe0:	4623      	mov	r3, r4
   18fe2:	4632      	mov	r2, r6
   18fe4:	4658      	mov	r0, fp
   18fe6:	f000 fe69 	bl	19cbc <__sbprintf>
   18fea:	9005      	str	r0, [sp, #20]
   18fec:	9805      	ldr	r0, [sp, #20]
   18fee:	b045      	add	sp, #276	; 0x114
   18ff0:	ecbd 8b02 	vpop	{d8}
   18ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ff8:	f046 0610 	orr.w	r6, r6, #16
   18ffc:	f016 0220 	ands.w	r2, r6, #32
   19000:	f000 8136 	beq.w	19270 <_vfiprintf_r+0x540>
   19004:	9b07      	ldr	r3, [sp, #28]
   19006:	3307      	adds	r3, #7
   19008:	f023 0307 	bic.w	r3, r3, #7
   1900c:	4619      	mov	r1, r3
   1900e:	685a      	ldr	r2, [r3, #4]
   19010:	f851 3b08 	ldr.w	r3, [r1], #8
   19014:	9107      	str	r1, [sp, #28]
   19016:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1901a:	9103      	str	r1, [sp, #12]
   1901c:	2100      	movs	r1, #0
   1901e:	2000      	movs	r0, #0
   19020:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   19024:	1c78      	adds	r0, r7, #1
   19026:	f000 8210 	beq.w	1944a <_vfiprintf_r+0x71a>
   1902a:	9803      	ldr	r0, [sp, #12]
   1902c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   19030:	ea53 0002 	orrs.w	r0, r3, r2
   19034:	f040 8208 	bne.w	19448 <_vfiprintf_r+0x718>
   19038:	2f00      	cmp	r7, #0
   1903a:	f040 8538 	bne.w	19aae <_vfiprintf_r+0xd7e>
   1903e:	2900      	cmp	r1, #0
   19040:	f040 83d5 	bne.w	197ee <_vfiprintf_r+0xabe>
   19044:	9b03      	ldr	r3, [sp, #12]
   19046:	f013 0301 	ands.w	r3, r3, #1
   1904a:	9304      	str	r3, [sp, #16]
   1904c:	f000 8411 	beq.w	19872 <_vfiprintf_r+0xb42>
   19050:	2330      	movs	r3, #48	; 0x30
   19052:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   19056:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1905a:	e792      	b.n	18f82 <_vfiprintf_r+0x252>
   1905c:	2208      	movs	r2, #8
   1905e:	2100      	movs	r1, #0
   19060:	4650      	mov	r0, sl
   19062:	f7f8 fea9 	bl	11db8 <memset>
   19066:	2301      	movs	r3, #1
   19068:	441c      	add	r4, r3
   1906a:	e6ad      	b.n	18dc8 <_vfiprintf_r+0x98>
   1906c:	20008a2c 	.word	0x20008a2c
   19070:	ebb4 0608 	subs.w	r6, r4, r8
   19074:	4605      	mov	r5, r0
   19076:	d01b      	beq.n	190b0 <_vfiprintf_r+0x380>
   19078:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1907a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1907c:	3301      	adds	r3, #1
   1907e:	4432      	add	r2, r6
   19080:	2b07      	cmp	r3, #7
   19082:	e9c9 8600 	strd	r8, r6, [r9]
   19086:	921a      	str	r2, [sp, #104]	; 0x68
   19088:	9319      	str	r3, [sp, #100]	; 0x64
   1908a:	dd1c      	ble.n	190c6 <_vfiprintf_r+0x396>
   1908c:	2a00      	cmp	r2, #0
   1908e:	f000 83a6 	beq.w	197de <_vfiprintf_r+0xaae>
   19092:	ee18 1a10 	vmov	r1, s16
   19096:	aa18      	add	r2, sp, #96	; 0x60
   19098:	4658      	mov	r0, fp
   1909a:	f7ff fe0d 	bl	18cb8 <__sprint_r.part.0>
   1909e:	bb20      	cbnz	r0, 190ea <_vfiprintf_r+0x3ba>
   190a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   190a4:	9b05      	ldr	r3, [sp, #20]
   190a6:	4433      	add	r3, r6
   190a8:	9305      	str	r3, [sp, #20]
   190aa:	2d00      	cmp	r5, #0
   190ac:	f47f aea8 	bne.w	18e00 <_vfiprintf_r+0xd0>
   190b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   190b2:	2b00      	cmp	r3, #0
   190b4:	f040 85c1 	bne.w	19c3a <_vfiprintf_r+0xf0a>
   190b8:	ee18 3a10 	vmov	r3, s16
   190bc:	2200      	movs	r2, #0
   190be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   190c2:	9219      	str	r2, [sp, #100]	; 0x64
   190c4:	e015      	b.n	190f2 <_vfiprintf_r+0x3c2>
   190c6:	f109 0908 	add.w	r9, r9, #8
   190ca:	e7eb      	b.n	190a4 <_vfiprintf_r+0x374>
   190cc:	ee18 1a10 	vmov	r1, s16
   190d0:	aa18      	add	r2, sp, #96	; 0x60
   190d2:	4658      	mov	r0, fp
   190d4:	f7ff fdf0 	bl	18cb8 <__sprint_r.part.0>
   190d8:	2800      	cmp	r0, #0
   190da:	f000 80a6 	beq.w	1922a <_vfiprintf_r+0x4fa>
   190de:	9b08      	ldr	r3, [sp, #32]
   190e0:	b11b      	cbz	r3, 190ea <_vfiprintf_r+0x3ba>
   190e2:	9908      	ldr	r1, [sp, #32]
   190e4:	4658      	mov	r0, fp
   190e6:	f7f9 fb5d 	bl	127a4 <_free_r>
   190ea:	ee18 3a10 	vmov	r3, s16
   190ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   190f2:	ee18 2a10 	vmov	r2, s16
   190f6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   190f8:	f012 0f01 	tst.w	r2, #1
   190fc:	b29a      	uxth	r2, r3
   190fe:	f000 80a0 	beq.w	19242 <_vfiprintf_r+0x512>
   19102:	0650      	lsls	r0, r2, #25
   19104:	f100 85b2 	bmi.w	19c6c <_vfiprintf_r+0xf3c>
   19108:	9805      	ldr	r0, [sp, #20]
   1910a:	b045      	add	sp, #276	; 0x114
   1910c:	ecbd 8b02 	vpop	{d8}
   19110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19114:	2900      	cmp	r1, #0
   19116:	d0cb      	beq.n	190b0 <_vfiprintf_r+0x380>
   19118:	2300      	movs	r3, #0
   1911a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1911e:	2301      	movs	r3, #1
   19120:	e9cd 3303 	strd	r3, r3, [sp, #12]
   19124:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   19128:	ac2b      	add	r4, sp, #172	; 0xac
   1912a:	2300      	movs	r3, #0
   1912c:	9308      	str	r3, [sp, #32]
   1912e:	461f      	mov	r7, r3
   19130:	f016 0302 	ands.w	r3, r6, #2
   19134:	9309      	str	r3, [sp, #36]	; 0x24
   19136:	d002      	beq.n	1913e <_vfiprintf_r+0x40e>
   19138:	9b03      	ldr	r3, [sp, #12]
   1913a:	3302      	adds	r3, #2
   1913c:	9303      	str	r3, [sp, #12]
   1913e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   19142:	930a      	str	r3, [sp, #40]	; 0x28
   19144:	d105      	bne.n	19152 <_vfiprintf_r+0x422>
   19146:	9b06      	ldr	r3, [sp, #24]
   19148:	9a03      	ldr	r2, [sp, #12]
   1914a:	1a9d      	subs	r5, r3, r2
   1914c:	2d00      	cmp	r5, #0
   1914e:	f300 827b 	bgt.w	19648 <_vfiprintf_r+0x918>
   19152:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19156:	1c41      	adds	r1, r0, #1
   19158:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1915c:	b182      	cbz	r2, 19180 <_vfiprintf_r+0x450>
   1915e:	2201      	movs	r2, #1
   19160:	3301      	adds	r3, #1
   19162:	f8c9 2004 	str.w	r2, [r9, #4]
   19166:	2907      	cmp	r1, #7
   19168:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   1916c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19170:	f8c9 2000 	str.w	r2, [r9]
   19174:	f300 824a 	bgt.w	1960c <_vfiprintf_r+0x8dc>
   19178:	4608      	mov	r0, r1
   1917a:	f109 0908 	add.w	r9, r9, #8
   1917e:	3101      	adds	r1, #1
   19180:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19182:	b1e2      	cbz	r2, 191be <_vfiprintf_r+0x48e>
   19184:	aa11      	add	r2, sp, #68	; 0x44
   19186:	3302      	adds	r3, #2
   19188:	f8c9 2000 	str.w	r2, [r9]
   1918c:	2907      	cmp	r1, #7
   1918e:	f04f 0202 	mov.w	r2, #2
   19192:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19196:	f8c9 2004 	str.w	r2, [r9, #4]
   1919a:	f340 8250 	ble.w	1963e <_vfiprintf_r+0x90e>
   1919e:	2b00      	cmp	r3, #0
   191a0:	f000 8343 	beq.w	1982a <_vfiprintf_r+0xafa>
   191a4:	ee18 1a10 	vmov	r1, s16
   191a8:	aa18      	add	r2, sp, #96	; 0x60
   191aa:	4658      	mov	r0, fp
   191ac:	f7ff fd84 	bl	18cb8 <__sprint_r.part.0>
   191b0:	2800      	cmp	r0, #0
   191b2:	d194      	bne.n	190de <_vfiprintf_r+0x3ae>
   191b4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   191b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   191bc:	1c41      	adds	r1, r0, #1
   191be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   191c0:	2a80      	cmp	r2, #128	; 0x80
   191c2:	f000 8184 	beq.w	194ce <_vfiprintf_r+0x79e>
   191c6:	9a04      	ldr	r2, [sp, #16]
   191c8:	1abd      	subs	r5, r7, r2
   191ca:	2d00      	cmp	r5, #0
   191cc:	f300 81d7 	bgt.w	1957e <_vfiprintf_r+0x84e>
   191d0:	9a04      	ldr	r2, [sp, #16]
   191d2:	f8c9 4000 	str.w	r4, [r9]
   191d6:	4413      	add	r3, r2
   191d8:	2907      	cmp	r1, #7
   191da:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   191de:	f8c9 2004 	str.w	r2, [r9, #4]
   191e2:	f340 816e 	ble.w	194c2 <_vfiprintf_r+0x792>
   191e6:	2b00      	cmp	r3, #0
   191e8:	f000 8275 	beq.w	196d6 <_vfiprintf_r+0x9a6>
   191ec:	ee18 1a10 	vmov	r1, s16
   191f0:	aa18      	add	r2, sp, #96	; 0x60
   191f2:	4658      	mov	r0, fp
   191f4:	f7ff fd60 	bl	18cb8 <__sprint_r.part.0>
   191f8:	2800      	cmp	r0, #0
   191fa:	f47f af70 	bne.w	190de <_vfiprintf_r+0x3ae>
   191fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19200:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19204:	0775      	lsls	r5, r6, #29
   19206:	d505      	bpl.n	19214 <_vfiprintf_r+0x4e4>
   19208:	9a06      	ldr	r2, [sp, #24]
   1920a:	9903      	ldr	r1, [sp, #12]
   1920c:	1a54      	subs	r4, r2, r1
   1920e:	2c00      	cmp	r4, #0
   19210:	f300 826b 	bgt.w	196ea <_vfiprintf_r+0x9ba>
   19214:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   19218:	9803      	ldr	r0, [sp, #12]
   1921a:	4281      	cmp	r1, r0
   1921c:	bfac      	ite	ge
   1921e:	1852      	addge	r2, r2, r1
   19220:	1812      	addlt	r2, r2, r0
   19222:	9205      	str	r2, [sp, #20]
   19224:	2b00      	cmp	r3, #0
   19226:	f47f af51 	bne.w	190cc <_vfiprintf_r+0x39c>
   1922a:	9908      	ldr	r1, [sp, #32]
   1922c:	2300      	movs	r3, #0
   1922e:	9319      	str	r3, [sp, #100]	; 0x64
   19230:	2900      	cmp	r1, #0
   19232:	f000 8149 	beq.w	194c8 <_vfiprintf_r+0x798>
   19236:	4658      	mov	r0, fp
   19238:	f7f9 fab4 	bl	127a4 <_free_r>
   1923c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19240:	e5c1      	b.n	18dc6 <_vfiprintf_r+0x96>
   19242:	059c      	lsls	r4, r3, #22
   19244:	f53f af5d 	bmi.w	19102 <_vfiprintf_r+0x3d2>
   19248:	ee18 4a10 	vmov	r4, s16
   1924c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1924e:	f7f8 ff6f 	bl	12130 <__retarget_lock_release_recursive>
   19252:	89a2      	ldrh	r2, [r4, #12]
   19254:	e755      	b.n	19102 <_vfiprintf_r+0x3d2>
   19256:	06f0      	lsls	r0, r6, #27
   19258:	9a07      	ldr	r2, [sp, #28]
   1925a:	f100 831f 	bmi.w	1989c <_vfiprintf_r+0xb6c>
   1925e:	0671      	lsls	r1, r6, #25
   19260:	f140 8319 	bpl.w	19896 <_vfiprintf_r+0xb66>
   19264:	f932 3b04 	ldrsh.w	r3, [r2], #4
   19268:	9207      	str	r2, [sp, #28]
   1926a:	17da      	asrs	r2, r3, #31
   1926c:	4611      	mov	r1, r2
   1926e:	e66e      	b.n	18f4e <_vfiprintf_r+0x21e>
   19270:	f016 0310 	ands.w	r3, r6, #16
   19274:	9907      	ldr	r1, [sp, #28]
   19276:	f040 8309 	bne.w	1988c <_vfiprintf_r+0xb5c>
   1927a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1927e:	f000 8301 	beq.w	19884 <_vfiprintf_r+0xb54>
   19282:	461a      	mov	r2, r3
   19284:	f851 3b04 	ldr.w	r3, [r1], #4
   19288:	9107      	str	r1, [sp, #28]
   1928a:	b29b      	uxth	r3, r3
   1928c:	e6c3      	b.n	19016 <_vfiprintf_r+0x2e6>
   1928e:	9b07      	ldr	r3, [sp, #28]
   19290:	461a      	mov	r2, r3
   19292:	2300      	movs	r3, #0
   19294:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19298:	4613      	mov	r3, r2
   1929a:	f853 4b04 	ldr.w	r4, [r3], #4
   1929e:	9303      	str	r3, [sp, #12]
   192a0:	2c00      	cmp	r4, #0
   192a2:	f000 8412 	beq.w	19aca <_vfiprintf_r+0xd9a>
   192a6:	2953      	cmp	r1, #83	; 0x53
   192a8:	f000 8365 	beq.w	19976 <_vfiprintf_r+0xc46>
   192ac:	f016 0510 	ands.w	r5, r6, #16
   192b0:	f040 8361 	bne.w	19976 <_vfiprintf_r+0xc46>
   192b4:	1c7b      	adds	r3, r7, #1
   192b6:	f000 84b3 	beq.w	19c20 <_vfiprintf_r+0xef0>
   192ba:	463a      	mov	r2, r7
   192bc:	4629      	mov	r1, r5
   192be:	4620      	mov	r0, r4
   192c0:	f7f9 f90e 	bl	124e0 <memchr>
   192c4:	9008      	str	r0, [sp, #32]
   192c6:	2800      	cmp	r0, #0
   192c8:	f000 849f 	beq.w	19c0a <_vfiprintf_r+0xeda>
   192cc:	1b03      	subs	r3, r0, r4
   192ce:	9a03      	ldr	r2, [sp, #12]
   192d0:	9304      	str	r3, [sp, #16]
   192d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   192d6:	462f      	mov	r7, r5
   192d8:	9207      	str	r2, [sp, #28]
   192da:	9303      	str	r3, [sp, #12]
   192dc:	9508      	str	r5, [sp, #32]
   192de:	e657      	b.n	18f90 <_vfiprintf_r+0x260>
   192e0:	2943      	cmp	r1, #67	; 0x43
   192e2:	d002      	beq.n	192ea <_vfiprintf_r+0x5ba>
   192e4:	06f5      	lsls	r5, r6, #27
   192e6:	f140 832d 	bpl.w	19944 <_vfiprintf_r+0xc14>
   192ea:	9d07      	ldr	r5, [sp, #28]
   192ec:	2208      	movs	r2, #8
   192ee:	2100      	movs	r1, #0
   192f0:	a816      	add	r0, sp, #88	; 0x58
   192f2:	ac2b      	add	r4, sp, #172	; 0xac
   192f4:	f7f8 fd60 	bl	11db8 <memset>
   192f8:	ab16      	add	r3, sp, #88	; 0x58
   192fa:	f855 2b04 	ldr.w	r2, [r5], #4
   192fe:	4621      	mov	r1, r4
   19300:	4658      	mov	r0, fp
   19302:	f7ff fa77 	bl	187f4 <_wcrtomb_r>
   19306:	4603      	mov	r3, r0
   19308:	3301      	adds	r3, #1
   1930a:	9004      	str	r0, [sp, #16]
   1930c:	f000 84b3 	beq.w	19c76 <_vfiprintf_r+0xf46>
   19310:	9b04      	ldr	r3, [sp, #16]
   19312:	9507      	str	r5, [sp, #28]
   19314:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19318:	9303      	str	r3, [sp, #12]
   1931a:	2300      	movs	r3, #0
   1931c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19320:	e703      	b.n	1912a <_vfiprintf_r+0x3fa>
   19322:	9b07      	ldr	r3, [sp, #28]
   19324:	f853 2b04 	ldr.w	r2, [r3], #4
   19328:	9206      	str	r2, [sp, #24]
   1932a:	2a00      	cmp	r2, #0
   1932c:	f280 829c 	bge.w	19868 <_vfiprintf_r+0xb38>
   19330:	9a06      	ldr	r2, [sp, #24]
   19332:	4252      	negs	r2, r2
   19334:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19338:	f898 1000 	ldrb.w	r1, [r8]
   1933c:	f046 0604 	orr.w	r6, r6, #4
   19340:	e569      	b.n	18e16 <_vfiprintf_r+0xe6>
   19342:	f898 1000 	ldrb.w	r1, [r8]
   19346:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   1934a:	e564      	b.n	18e16 <_vfiprintf_r+0xe6>
   1934c:	f898 1000 	ldrb.w	r1, [r8]
   19350:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   19354:	e55f      	b.n	18e16 <_vfiprintf_r+0xe6>
   19356:	4642      	mov	r2, r8
   19358:	f812 1b01 	ldrb.w	r1, [r2], #1
   1935c:	292a      	cmp	r1, #42	; 0x2a
   1935e:	f000 8496 	beq.w	19c8e <_vfiprintf_r+0xf5e>
   19362:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19366:	2b09      	cmp	r3, #9
   19368:	4690      	mov	r8, r2
   1936a:	f04f 0700 	mov.w	r7, #0
   1936e:	f63f ad54 	bhi.w	18e1a <_vfiprintf_r+0xea>
   19372:	f818 1b01 	ldrb.w	r1, [r8], #1
   19376:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1937a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1937e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19382:	2b09      	cmp	r3, #9
   19384:	d9f5      	bls.n	19372 <_vfiprintf_r+0x642>
   19386:	e548      	b.n	18e1a <_vfiprintf_r+0xea>
   19388:	f898 1000 	ldrb.w	r1, [r8]
   1938c:	f046 0601 	orr.w	r6, r6, #1
   19390:	e541      	b.n	18e16 <_vfiprintf_r+0xe6>
   19392:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   19396:	2b00      	cmp	r3, #0
   19398:	f47f adc2 	bne.w	18f20 <_vfiprintf_r+0x1f0>
   1939c:	2320      	movs	r3, #32
   1939e:	f898 1000 	ldrb.w	r1, [r8]
   193a2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   193a6:	e536      	b.n	18e16 <_vfiprintf_r+0xe6>
   193a8:	f898 1000 	ldrb.w	r1, [r8]
   193ac:	296c      	cmp	r1, #108	; 0x6c
   193ae:	bf03      	ittte	eq
   193b0:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   193b4:	f046 0620 	orreq.w	r6, r6, #32
   193b8:	f108 0801 	addeq.w	r8, r8, #1
   193bc:	f046 0610 	orrne.w	r6, r6, #16
   193c0:	e529      	b.n	18e16 <_vfiprintf_r+0xe6>
   193c2:	f898 1000 	ldrb.w	r1, [r8]
   193c6:	2968      	cmp	r1, #104	; 0x68
   193c8:	bf03      	ittte	eq
   193ca:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   193ce:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   193d2:	f108 0801 	addeq.w	r8, r8, #1
   193d6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   193da:	e51c      	b.n	18e16 <_vfiprintf_r+0xe6>
   193dc:	f046 0310 	orr.w	r3, r6, #16
   193e0:	9303      	str	r3, [sp, #12]
   193e2:	9b03      	ldr	r3, [sp, #12]
   193e4:	f013 0220 	ands.w	r2, r3, #32
   193e8:	f000 8206 	beq.w	197f8 <_vfiprintf_r+0xac8>
   193ec:	9b07      	ldr	r3, [sp, #28]
   193ee:	3307      	adds	r3, #7
   193f0:	f023 0307 	bic.w	r3, r3, #7
   193f4:	4619      	mov	r1, r3
   193f6:	685a      	ldr	r2, [r3, #4]
   193f8:	f851 3b08 	ldr.w	r3, [r1], #8
   193fc:	9107      	str	r1, [sp, #28]
   193fe:	2101      	movs	r1, #1
   19400:	e60d      	b.n	1901e <_vfiprintf_r+0x2ee>
   19402:	9a07      	ldr	r2, [sp, #28]
   19404:	f046 0302 	orr.w	r3, r6, #2
   19408:	9303      	str	r3, [sp, #12]
   1940a:	f852 3b04 	ldr.w	r3, [r2], #4
   1940e:	9207      	str	r2, [sp, #28]
   19410:	f647 0230 	movw	r2, #30768	; 0x7830
   19414:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   19418:	4ab8      	ldr	r2, [pc, #736]	; (196fc <_vfiprintf_r+0x9cc>)
   1941a:	920c      	str	r2, [sp, #48]	; 0x30
   1941c:	2102      	movs	r1, #2
   1941e:	2200      	movs	r2, #0
   19420:	e5fd      	b.n	1901e <_vfiprintf_r+0x2ee>
   19422:	06b7      	lsls	r7, r6, #26
   19424:	f100 8248 	bmi.w	198b8 <_vfiprintf_r+0xb88>
   19428:	06f5      	lsls	r5, r6, #27
   1942a:	f100 8346 	bmi.w	19aba <_vfiprintf_r+0xd8a>
   1942e:	0674      	lsls	r4, r6, #25
   19430:	f100 83d5 	bmi.w	19bde <_vfiprintf_r+0xeae>
   19434:	05b0      	lsls	r0, r6, #22
   19436:	f140 8340 	bpl.w	19aba <_vfiprintf_r+0xd8a>
   1943a:	9b07      	ldr	r3, [sp, #28]
   1943c:	9905      	ldr	r1, [sp, #20]
   1943e:	f853 2b04 	ldr.w	r2, [r3], #4
   19442:	9307      	str	r3, [sp, #28]
   19444:	7011      	strb	r1, [r2, #0]
   19446:	e4be      	b.n	18dc6 <_vfiprintf_r+0x96>
   19448:	9603      	str	r6, [sp, #12]
   1944a:	2901      	cmp	r1, #1
   1944c:	f43f ad8c 	beq.w	18f68 <_vfiprintf_r+0x238>
   19450:	2902      	cmp	r1, #2
   19452:	ac44      	add	r4, sp, #272	; 0x110
   19454:	d111      	bne.n	1947a <_vfiprintf_r+0x74a>
   19456:	980c      	ldr	r0, [sp, #48]	; 0x30
   19458:	f003 010f 	and.w	r1, r3, #15
   1945c:	091b      	lsrs	r3, r3, #4
   1945e:	5c41      	ldrb	r1, [r0, r1]
   19460:	f804 1d01 	strb.w	r1, [r4, #-1]!
   19464:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   19468:	0912      	lsrs	r2, r2, #4
   1946a:	ea53 0102 	orrs.w	r1, r3, r2
   1946e:	d1f3      	bne.n	19458 <_vfiprintf_r+0x728>
   19470:	9e03      	ldr	r6, [sp, #12]
   19472:	ab44      	add	r3, sp, #272	; 0x110
   19474:	1b1b      	subs	r3, r3, r4
   19476:	9304      	str	r3, [sp, #16]
   19478:	e583      	b.n	18f82 <_vfiprintf_r+0x252>
   1947a:	f003 0107 	and.w	r1, r3, #7
   1947e:	08db      	lsrs	r3, r3, #3
   19480:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   19484:	08d2      	lsrs	r2, r2, #3
   19486:	3130      	adds	r1, #48	; 0x30
   19488:	ea53 0502 	orrs.w	r5, r3, r2
   1948c:	4620      	mov	r0, r4
   1948e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   19492:	d1f2      	bne.n	1947a <_vfiprintf_r+0x74a>
   19494:	9e03      	ldr	r6, [sp, #12]
   19496:	07f3      	lsls	r3, r6, #31
   19498:	d5eb      	bpl.n	19472 <_vfiprintf_r+0x742>
   1949a:	2930      	cmp	r1, #48	; 0x30
   1949c:	d0e8      	beq.n	19470 <_vfiprintf_r+0x740>
   1949e:	2330      	movs	r3, #48	; 0x30
   194a0:	3802      	subs	r0, #2
   194a2:	f804 3c01 	strb.w	r3, [r4, #-1]
   194a6:	ab44      	add	r3, sp, #272	; 0x110
   194a8:	1a1b      	subs	r3, r3, r0
   194aa:	9e03      	ldr	r6, [sp, #12]
   194ac:	9304      	str	r3, [sp, #16]
   194ae:	4604      	mov	r4, r0
   194b0:	e567      	b.n	18f82 <_vfiprintf_r+0x252>
   194b2:	9b04      	ldr	r3, [sp, #16]
   194b4:	941b      	str	r4, [sp, #108]	; 0x6c
   194b6:	2201      	movs	r2, #1
   194b8:	931c      	str	r3, [sp, #112]	; 0x70
   194ba:	931a      	str	r3, [sp, #104]	; 0x68
   194bc:	9219      	str	r2, [sp, #100]	; 0x64
   194be:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   194c2:	f109 0908 	add.w	r9, r9, #8
   194c6:	e69d      	b.n	19204 <_vfiprintf_r+0x4d4>
   194c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   194cc:	e47b      	b.n	18dc6 <_vfiprintf_r+0x96>
   194ce:	9a06      	ldr	r2, [sp, #24]
   194d0:	9d03      	ldr	r5, [sp, #12]
   194d2:	1b55      	subs	r5, r2, r5
   194d4:	2d00      	cmp	r5, #0
   194d6:	f77f ae76 	ble.w	191c6 <_vfiprintf_r+0x496>
   194da:	2d10      	cmp	r5, #16
   194dc:	f340 83bb 	ble.w	19c56 <_vfiprintf_r+0xf26>
   194e0:	9409      	str	r4, [sp, #36]	; 0x24
   194e2:	ee18 4a10 	vmov	r4, s16
   194e6:	e007      	b.n	194f8 <_vfiprintf_r+0x7c8>
   194e8:	f100 0c02 	add.w	ip, r0, #2
   194ec:	f109 0908 	add.w	r9, r9, #8
   194f0:	4610      	mov	r0, r2
   194f2:	3d10      	subs	r5, #16
   194f4:	2d10      	cmp	r5, #16
   194f6:	dd1e      	ble.n	19536 <_vfiprintf_r+0x806>
   194f8:	4981      	ldr	r1, [pc, #516]	; (19700 <_vfiprintf_r+0x9d0>)
   194fa:	f8c9 1000 	str.w	r1, [r9]
   194fe:	1c42      	adds	r2, r0, #1
   19500:	3310      	adds	r3, #16
   19502:	2110      	movs	r1, #16
   19504:	2a07      	cmp	r2, #7
   19506:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1950a:	f8c9 1004 	str.w	r1, [r9, #4]
   1950e:	ddeb      	ble.n	194e8 <_vfiprintf_r+0x7b8>
   19510:	aa18      	add	r2, sp, #96	; 0x60
   19512:	2b00      	cmp	r3, #0
   19514:	d074      	beq.n	19600 <_vfiprintf_r+0x8d0>
   19516:	4621      	mov	r1, r4
   19518:	4658      	mov	r0, fp
   1951a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1951e:	f7ff fbcb 	bl	18cb8 <__sprint_r.part.0>
   19522:	2800      	cmp	r0, #0
   19524:	f47f addb 	bne.w	190de <_vfiprintf_r+0x3ae>
   19528:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1952c:	3d10      	subs	r5, #16
   1952e:	2d10      	cmp	r5, #16
   19530:	f100 0c01 	add.w	ip, r0, #1
   19534:	dce0      	bgt.n	194f8 <_vfiprintf_r+0x7c8>
   19536:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19538:	4a71      	ldr	r2, [pc, #452]	; (19700 <_vfiprintf_r+0x9d0>)
   1953a:	f8c9 5004 	str.w	r5, [r9, #4]
   1953e:	442b      	add	r3, r5
   19540:	f1bc 0f07 	cmp.w	ip, #7
   19544:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   19548:	f8c9 2000 	str.w	r2, [r9]
   1954c:	f340 8194 	ble.w	19878 <_vfiprintf_r+0xb48>
   19550:	2b00      	cmp	r3, #0
   19552:	f000 831f 	beq.w	19b94 <_vfiprintf_r+0xe64>
   19556:	ee18 1a10 	vmov	r1, s16
   1955a:	aa18      	add	r2, sp, #96	; 0x60
   1955c:	4658      	mov	r0, fp
   1955e:	f7ff fbab 	bl	18cb8 <__sprint_r.part.0>
   19562:	2800      	cmp	r0, #0
   19564:	f47f adbb 	bne.w	190de <_vfiprintf_r+0x3ae>
   19568:	9a04      	ldr	r2, [sp, #16]
   1956a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1956e:	1abd      	subs	r5, r7, r2
   19570:	2d00      	cmp	r5, #0
   19572:	f100 0101 	add.w	r1, r0, #1
   19576:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1957a:	f77f ae29 	ble.w	191d0 <_vfiprintf_r+0x4a0>
   1957e:	2d10      	cmp	r5, #16
   19580:	dd29      	ble.n	195d6 <_vfiprintf_r+0x8a6>
   19582:	9409      	str	r4, [sp, #36]	; 0x24
   19584:	2710      	movs	r7, #16
   19586:	ee18 4a10 	vmov	r4, s16
   1958a:	e007      	b.n	1959c <_vfiprintf_r+0x86c>
   1958c:	f100 0c02 	add.w	ip, r0, #2
   19590:	f109 0908 	add.w	r9, r9, #8
   19594:	4610      	mov	r0, r2
   19596:	3d10      	subs	r5, #16
   19598:	2d10      	cmp	r5, #16
   1959a:	dd1a      	ble.n	195d2 <_vfiprintf_r+0x8a2>
   1959c:	1c42      	adds	r2, r0, #1
   1959e:	4958      	ldr	r1, [pc, #352]	; (19700 <_vfiprintf_r+0x9d0>)
   195a0:	3310      	adds	r3, #16
   195a2:	2a07      	cmp	r2, #7
   195a4:	e9c9 1700 	strd	r1, r7, [r9]
   195a8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   195ac:	ddee      	ble.n	1958c <_vfiprintf_r+0x85c>
   195ae:	aa18      	add	r2, sp, #96	; 0x60
   195b0:	b303      	cbz	r3, 195f4 <_vfiprintf_r+0x8c4>
   195b2:	4621      	mov	r1, r4
   195b4:	4658      	mov	r0, fp
   195b6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   195ba:	f7ff fb7d 	bl	18cb8 <__sprint_r.part.0>
   195be:	2800      	cmp	r0, #0
   195c0:	f47f ad8d 	bne.w	190de <_vfiprintf_r+0x3ae>
   195c4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   195c8:	3d10      	subs	r5, #16
   195ca:	2d10      	cmp	r5, #16
   195cc:	f100 0c01 	add.w	ip, r0, #1
   195d0:	dce4      	bgt.n	1959c <_vfiprintf_r+0x86c>
   195d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   195d4:	4661      	mov	r1, ip
   195d6:	4a4a      	ldr	r2, [pc, #296]	; (19700 <_vfiprintf_r+0x9d0>)
   195d8:	f8c9 5004 	str.w	r5, [r9, #4]
   195dc:	442b      	add	r3, r5
   195de:	2907      	cmp	r1, #7
   195e0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   195e4:	f8c9 2000 	str.w	r2, [r9]
   195e8:	f300 80e7 	bgt.w	197ba <_vfiprintf_r+0xa8a>
   195ec:	f109 0908 	add.w	r9, r9, #8
   195f0:	3101      	adds	r1, #1
   195f2:	e5ed      	b.n	191d0 <_vfiprintf_r+0x4a0>
   195f4:	f04f 0c01 	mov.w	ip, #1
   195f8:	4618      	mov	r0, r3
   195fa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   195fe:	e7ca      	b.n	19596 <_vfiprintf_r+0x866>
   19600:	f04f 0c01 	mov.w	ip, #1
   19604:	4618      	mov	r0, r3
   19606:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1960a:	e772      	b.n	194f2 <_vfiprintf_r+0x7c2>
   1960c:	2b00      	cmp	r3, #0
   1960e:	f000 8104 	beq.w	1981a <_vfiprintf_r+0xaea>
   19612:	ee18 1a10 	vmov	r1, s16
   19616:	aa18      	add	r2, sp, #96	; 0x60
   19618:	4658      	mov	r0, fp
   1961a:	f7ff fb4d 	bl	18cb8 <__sprint_r.part.0>
   1961e:	2800      	cmp	r0, #0
   19620:	f47f ad5d 	bne.w	190de <_vfiprintf_r+0x3ae>
   19624:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19628:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1962c:	1c41      	adds	r1, r0, #1
   1962e:	e5a7      	b.n	19180 <_vfiprintf_r+0x450>
   19630:	2302      	movs	r3, #2
   19632:	aa11      	add	r2, sp, #68	; 0x44
   19634:	931c      	str	r3, [sp, #112]	; 0x70
   19636:	921b      	str	r2, [sp, #108]	; 0x6c
   19638:	2101      	movs	r1, #1
   1963a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1963e:	4608      	mov	r0, r1
   19640:	f109 0908 	add.w	r9, r9, #8
   19644:	1c41      	adds	r1, r0, #1
   19646:	e5ba      	b.n	191be <_vfiprintf_r+0x48e>
   19648:	2d10      	cmp	r5, #16
   1964a:	f340 82e5 	ble.w	19c18 <_vfiprintf_r+0xee8>
   1964e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   19652:	940f      	str	r4, [sp, #60]	; 0x3c
   19654:	4608      	mov	r0, r1
   19656:	ee18 4a10 	vmov	r4, s16
   1965a:	e007      	b.n	1966c <_vfiprintf_r+0x93c>
   1965c:	f100 0c02 	add.w	ip, r0, #2
   19660:	f109 0908 	add.w	r9, r9, #8
   19664:	4610      	mov	r0, r2
   19666:	3d10      	subs	r5, #16
   19668:	2d10      	cmp	r5, #16
   1966a:	dd1d      	ble.n	196a8 <_vfiprintf_r+0x978>
   1966c:	4925      	ldr	r1, [pc, #148]	; (19704 <_vfiprintf_r+0x9d4>)
   1966e:	f8c9 1000 	str.w	r1, [r9]
   19672:	1c42      	adds	r2, r0, #1
   19674:	3310      	adds	r3, #16
   19676:	2110      	movs	r1, #16
   19678:	2a07      	cmp	r2, #7
   1967a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1967e:	f8c9 1004 	str.w	r1, [r9, #4]
   19682:	ddeb      	ble.n	1965c <_vfiprintf_r+0x92c>
   19684:	aa18      	add	r2, sp, #96	; 0x60
   19686:	b303      	cbz	r3, 196ca <_vfiprintf_r+0x99a>
   19688:	4621      	mov	r1, r4
   1968a:	4658      	mov	r0, fp
   1968c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19690:	f7ff fb12 	bl	18cb8 <__sprint_r.part.0>
   19694:	2800      	cmp	r0, #0
   19696:	f47f ad22 	bne.w	190de <_vfiprintf_r+0x3ae>
   1969a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1969e:	3d10      	subs	r5, #16
   196a0:	2d10      	cmp	r5, #16
   196a2:	f100 0c01 	add.w	ip, r0, #1
   196a6:	dce1      	bgt.n	1966c <_vfiprintf_r+0x93c>
   196a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   196aa:	4660      	mov	r0, ip
   196ac:	4a15      	ldr	r2, [pc, #84]	; (19704 <_vfiprintf_r+0x9d4>)
   196ae:	f8c9 5004 	str.w	r5, [r9, #4]
   196b2:	442b      	add	r3, r5
   196b4:	2807      	cmp	r0, #7
   196b6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   196ba:	f8c9 2000 	str.w	r2, [r9]
   196be:	f300 80c1 	bgt.w	19844 <_vfiprintf_r+0xb14>
   196c2:	f109 0908 	add.w	r9, r9, #8
   196c6:	1c41      	adds	r1, r0, #1
   196c8:	e546      	b.n	19158 <_vfiprintf_r+0x428>
   196ca:	4618      	mov	r0, r3
   196cc:	f04f 0c01 	mov.w	ip, #1
   196d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   196d4:	e7c7      	b.n	19666 <_vfiprintf_r+0x936>
   196d6:	0776      	lsls	r6, r6, #29
   196d8:	9319      	str	r3, [sp, #100]	; 0x64
   196da:	d553      	bpl.n	19784 <_vfiprintf_r+0xa54>
   196dc:	9a06      	ldr	r2, [sp, #24]
   196de:	9903      	ldr	r1, [sp, #12]
   196e0:	1a54      	subs	r4, r2, r1
   196e2:	2c00      	cmp	r4, #0
   196e4:	dd4e      	ble.n	19784 <_vfiprintf_r+0xa54>
   196e6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   196ea:	2c10      	cmp	r4, #16
   196ec:	f340 82b0 	ble.w	19c50 <_vfiprintf_r+0xf20>
   196f0:	9919      	ldr	r1, [sp, #100]	; 0x64
   196f2:	ee18 6a10 	vmov	r6, s16
   196f6:	2510      	movs	r5, #16
   196f8:	e00d      	b.n	19716 <_vfiprintf_r+0x9e6>
   196fa:	bf00      	nop
   196fc:	20001074 	.word	0x20001074
   19700:	200088cc 	.word	0x200088cc
   19704:	20002b2c 	.word	0x20002b2c
   19708:	1c88      	adds	r0, r1, #2
   1970a:	f109 0908 	add.w	r9, r9, #8
   1970e:	4611      	mov	r1, r2
   19710:	3c10      	subs	r4, #16
   19712:	2c10      	cmp	r4, #16
   19714:	dd1a      	ble.n	1974c <_vfiprintf_r+0xa1c>
   19716:	1c4a      	adds	r2, r1, #1
   19718:	48b3      	ldr	r0, [pc, #716]	; (199e8 <_vfiprintf_r+0xcb8>)
   1971a:	3310      	adds	r3, #16
   1971c:	2a07      	cmp	r2, #7
   1971e:	e9c9 0500 	strd	r0, r5, [r9]
   19722:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   19726:	ddef      	ble.n	19708 <_vfiprintf_r+0x9d8>
   19728:	aa18      	add	r2, sp, #96	; 0x60
   1972a:	b333      	cbz	r3, 1977a <_vfiprintf_r+0xa4a>
   1972c:	4631      	mov	r1, r6
   1972e:	4658      	mov	r0, fp
   19730:	f7ff fac2 	bl	18cb8 <__sprint_r.part.0>
   19734:	2800      	cmp	r0, #0
   19736:	f47f acd2 	bne.w	190de <_vfiprintf_r+0x3ae>
   1973a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1973e:	3c10      	subs	r4, #16
   19740:	2c10      	cmp	r4, #16
   19742:	f101 0001 	add.w	r0, r1, #1
   19746:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1974a:	dce4      	bgt.n	19716 <_vfiprintf_r+0x9e6>
   1974c:	4aa6      	ldr	r2, [pc, #664]	; (199e8 <_vfiprintf_r+0xcb8>)
   1974e:	f8c9 4004 	str.w	r4, [r9, #4]
   19752:	4423      	add	r3, r4
   19754:	2807      	cmp	r0, #7
   19756:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1975a:	f8c9 2000 	str.w	r2, [r9]
   1975e:	f77f ad59 	ble.w	19214 <_vfiprintf_r+0x4e4>
   19762:	b17b      	cbz	r3, 19784 <_vfiprintf_r+0xa54>
   19764:	ee18 1a10 	vmov	r1, s16
   19768:	aa18      	add	r2, sp, #96	; 0x60
   1976a:	4658      	mov	r0, fp
   1976c:	f7ff faa4 	bl	18cb8 <__sprint_r.part.0>
   19770:	2800      	cmp	r0, #0
   19772:	f47f acb4 	bne.w	190de <_vfiprintf_r+0x3ae>
   19776:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19778:	e54c      	b.n	19214 <_vfiprintf_r+0x4e4>
   1977a:	2001      	movs	r0, #1
   1977c:	4619      	mov	r1, r3
   1977e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19782:	e7c5      	b.n	19710 <_vfiprintf_r+0x9e0>
   19784:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   19788:	9903      	ldr	r1, [sp, #12]
   1978a:	428a      	cmp	r2, r1
   1978c:	bfac      	ite	ge
   1978e:	189b      	addge	r3, r3, r2
   19790:	185b      	addlt	r3, r3, r1
   19792:	9305      	str	r3, [sp, #20]
   19794:	e549      	b.n	1922a <_vfiprintf_r+0x4fa>
   19796:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1979a:	058f      	lsls	r7, r1, #22
   1979c:	ee18 3a10 	vmov	r3, s16
   197a0:	b28a      	uxth	r2, r1
   197a2:	f53f aae8 	bmi.w	18d76 <_vfiprintf_r+0x46>
   197a6:	ee18 5a10 	vmov	r5, s16
   197aa:	6d98      	ldr	r0, [r3, #88]	; 0x58
   197ac:	f7f8 fcbe 	bl	1212c <__retarget_lock_acquire_recursive>
   197b0:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   197b4:	b28a      	uxth	r2, r1
   197b6:	f7ff bade 	b.w	18d76 <_vfiprintf_r+0x46>
   197ba:	2b00      	cmp	r3, #0
   197bc:	f43f ae79 	beq.w	194b2 <_vfiprintf_r+0x782>
   197c0:	ee18 1a10 	vmov	r1, s16
   197c4:	aa18      	add	r2, sp, #96	; 0x60
   197c6:	4658      	mov	r0, fp
   197c8:	f7ff fa76 	bl	18cb8 <__sprint_r.part.0>
   197cc:	2800      	cmp	r0, #0
   197ce:	f47f ac86 	bne.w	190de <_vfiprintf_r+0x3ae>
   197d2:	9919      	ldr	r1, [sp, #100]	; 0x64
   197d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   197d6:	3101      	adds	r1, #1
   197d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   197dc:	e4f8      	b.n	191d0 <_vfiprintf_r+0x4a0>
   197de:	9219      	str	r2, [sp, #100]	; 0x64
   197e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   197e4:	e45e      	b.n	190a4 <_vfiprintf_r+0x374>
   197e6:	2f00      	cmp	r7, #0
   197e8:	f47f abc3 	bne.w	18f72 <_vfiprintf_r+0x242>
   197ec:	9e03      	ldr	r6, [sp, #12]
   197ee:	2700      	movs	r7, #0
   197f0:	9704      	str	r7, [sp, #16]
   197f2:	ac44      	add	r4, sp, #272	; 0x110
   197f4:	f7ff bbc5 	b.w	18f82 <_vfiprintf_r+0x252>
   197f8:	9b03      	ldr	r3, [sp, #12]
   197fa:	f013 0310 	ands.w	r3, r3, #16
   197fe:	d154      	bne.n	198aa <_vfiprintf_r+0xb7a>
   19800:	9a03      	ldr	r2, [sp, #12]
   19802:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   19806:	f000 816b 	beq.w	19ae0 <_vfiprintf_r+0xdb0>
   1980a:	9907      	ldr	r1, [sp, #28]
   1980c:	461a      	mov	r2, r3
   1980e:	f851 3b04 	ldr.w	r3, [r1], #4
   19812:	9107      	str	r1, [sp, #28]
   19814:	b29b      	uxth	r3, r3
   19816:	2101      	movs	r1, #1
   19818:	e401      	b.n	1901e <_vfiprintf_r+0x2ee>
   1981a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1981c:	2a00      	cmp	r2, #0
   1981e:	d164      	bne.n	198ea <_vfiprintf_r+0xbba>
   19820:	4618      	mov	r0, r3
   19822:	2101      	movs	r1, #1
   19824:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19828:	e4c9      	b.n	191be <_vfiprintf_r+0x48e>
   1982a:	2101      	movs	r1, #1
   1982c:	4618      	mov	r0, r3
   1982e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19832:	e4c4      	b.n	191be <_vfiprintf_r+0x48e>
   19834:	425b      	negs	r3, r3
   19836:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1983a:	9603      	str	r6, [sp, #12]
   1983c:	202d      	movs	r0, #45	; 0x2d
   1983e:	2101      	movs	r1, #1
   19840:	f7ff bbee 	b.w	19020 <_vfiprintf_r+0x2f0>
   19844:	2b00      	cmp	r3, #0
   19846:	f000 8088 	beq.w	1995a <_vfiprintf_r+0xc2a>
   1984a:	ee18 1a10 	vmov	r1, s16
   1984e:	aa18      	add	r2, sp, #96	; 0x60
   19850:	4658      	mov	r0, fp
   19852:	f7ff fa31 	bl	18cb8 <__sprint_r.part.0>
   19856:	2800      	cmp	r0, #0
   19858:	f47f ac41 	bne.w	190de <_vfiprintf_r+0x3ae>
   1985c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19860:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19864:	1c41      	adds	r1, r0, #1
   19866:	e477      	b.n	19158 <_vfiprintf_r+0x428>
   19868:	f898 1000 	ldrb.w	r1, [r8]
   1986c:	9307      	str	r3, [sp, #28]
   1986e:	f7ff bad2 	b.w	18e16 <_vfiprintf_r+0xe6>
   19872:	ac44      	add	r4, sp, #272	; 0x110
   19874:	f7ff bb85 	b.w	18f82 <_vfiprintf_r+0x252>
   19878:	f109 0908 	add.w	r9, r9, #8
   1987c:	f10c 0101 	add.w	r1, ip, #1
   19880:	4660      	mov	r0, ip
   19882:	e4a0      	b.n	191c6 <_vfiprintf_r+0x496>
   19884:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   19888:	f040 8197 	bne.w	19bba <_vfiprintf_r+0xe8a>
   1988c:	f851 3b04 	ldr.w	r3, [r1], #4
   19890:	9107      	str	r1, [sp, #28]
   19892:	f7ff bbc0 	b.w	19016 <_vfiprintf_r+0x2e6>
   19896:	05b3      	lsls	r3, r6, #22
   19898:	f100 8188 	bmi.w	19bac <_vfiprintf_r+0xe7c>
   1989c:	f852 3b04 	ldr.w	r3, [r2], #4
   198a0:	9207      	str	r2, [sp, #28]
   198a2:	17da      	asrs	r2, r3, #31
   198a4:	4611      	mov	r1, r2
   198a6:	f7ff bb52 	b.w	18f4e <_vfiprintf_r+0x21e>
   198aa:	9907      	ldr	r1, [sp, #28]
   198ac:	f851 3b04 	ldr.w	r3, [r1], #4
   198b0:	9107      	str	r1, [sp, #28]
   198b2:	2101      	movs	r1, #1
   198b4:	f7ff bbb3 	b.w	1901e <_vfiprintf_r+0x2ee>
   198b8:	9b07      	ldr	r3, [sp, #28]
   198ba:	9805      	ldr	r0, [sp, #20]
   198bc:	f853 1b04 	ldr.w	r1, [r3], #4
   198c0:	9307      	str	r3, [sp, #28]
   198c2:	17c2      	asrs	r2, r0, #31
   198c4:	e9c1 0200 	strd	r0, r2, [r1]
   198c8:	f7ff ba7d 	b.w	18dc6 <_vfiprintf_r+0x96>
   198cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   198ce:	2b00      	cmp	r3, #0
   198d0:	f43f ab26 	beq.w	18f20 <_vfiprintf_r+0x1f0>
   198d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   198d6:	781b      	ldrb	r3, [r3, #0]
   198d8:	2b00      	cmp	r3, #0
   198da:	f43f ab21 	beq.w	18f20 <_vfiprintf_r+0x1f0>
   198de:	f898 1000 	ldrb.w	r1, [r8]
   198e2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   198e6:	f7ff ba96 	b.w	18e16 <_vfiprintf_r+0xe6>
   198ea:	2302      	movs	r3, #2
   198ec:	aa11      	add	r2, sp, #68	; 0x44
   198ee:	931c      	str	r3, [sp, #112]	; 0x70
   198f0:	921b      	str	r2, [sp, #108]	; 0x6c
   198f2:	2001      	movs	r0, #1
   198f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   198f8:	e6a2      	b.n	19640 <_vfiprintf_r+0x910>
   198fa:	9603      	str	r6, [sp, #12]
   198fc:	e571      	b.n	193e2 <_vfiprintf_r+0x6b2>
   198fe:	4b3b      	ldr	r3, [pc, #236]	; (199ec <_vfiprintf_r+0xcbc>)
   19900:	930c      	str	r3, [sp, #48]	; 0x30
   19902:	f016 0220 	ands.w	r2, r6, #32
   19906:	d059      	beq.n	199bc <_vfiprintf_r+0xc8c>
   19908:	9b07      	ldr	r3, [sp, #28]
   1990a:	3307      	adds	r3, #7
   1990c:	f023 0307 	bic.w	r3, r3, #7
   19910:	4618      	mov	r0, r3
   19912:	685a      	ldr	r2, [r3, #4]
   19914:	f850 3b08 	ldr.w	r3, [r0], #8
   19918:	9007      	str	r0, [sp, #28]
   1991a:	07f4      	lsls	r4, r6, #31
   1991c:	d509      	bpl.n	19932 <_vfiprintf_r+0xc02>
   1991e:	ea53 0002 	orrs.w	r0, r3, r2
   19922:	d006      	beq.n	19932 <_vfiprintf_r+0xc02>
   19924:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   19928:	2130      	movs	r1, #48	; 0x30
   1992a:	f046 0602 	orr.w	r6, r6, #2
   1992e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   19932:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   19936:	9103      	str	r1, [sp, #12]
   19938:	2102      	movs	r1, #2
   1993a:	f7ff bb70 	b.w	1901e <_vfiprintf_r+0x2ee>
   1993e:	4b2c      	ldr	r3, [pc, #176]	; (199f0 <_vfiprintf_r+0xcc0>)
   19940:	930c      	str	r3, [sp, #48]	; 0x30
   19942:	e7de      	b.n	19902 <_vfiprintf_r+0xbd2>
   19944:	9b07      	ldr	r3, [sp, #28]
   19946:	2101      	movs	r1, #1
   19948:	f853 2b04 	ldr.w	r2, [r3], #4
   1994c:	9103      	str	r1, [sp, #12]
   1994e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   19952:	9307      	str	r3, [sp, #28]
   19954:	9104      	str	r1, [sp, #16]
   19956:	ac2b      	add	r4, sp, #172	; 0xac
   19958:	e4df      	b.n	1931a <_vfiprintf_r+0x5ea>
   1995a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1995e:	2a00      	cmp	r2, #0
   19960:	f040 8132 	bne.w	19bc8 <_vfiprintf_r+0xe98>
   19964:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19966:	2a00      	cmp	r2, #0
   19968:	f47f ae62 	bne.w	19630 <_vfiprintf_r+0x900>
   1996c:	4618      	mov	r0, r3
   1996e:	2101      	movs	r1, #1
   19970:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19974:	e427      	b.n	191c6 <_vfiprintf_r+0x496>
   19976:	2100      	movs	r1, #0
   19978:	2208      	movs	r2, #8
   1997a:	a816      	add	r0, sp, #88	; 0x58
   1997c:	9413      	str	r4, [sp, #76]	; 0x4c
   1997e:	f7f8 fa1b 	bl	11db8 <memset>
   19982:	1c79      	adds	r1, r7, #1
   19984:	f000 80bc 	beq.w	19b00 <_vfiprintf_r+0xdd0>
   19988:	2500      	movs	r5, #0
   1998a:	9407      	str	r4, [sp, #28]
   1998c:	462c      	mov	r4, r5
   1998e:	e00c      	b.n	199aa <_vfiprintf_r+0xc7a>
   19990:	a92b      	add	r1, sp, #172	; 0xac
   19992:	4658      	mov	r0, fp
   19994:	f7fe ff2e 	bl	187f4 <_wcrtomb_r>
   19998:	1c42      	adds	r2, r0, #1
   1999a:	4420      	add	r0, r4
   1999c:	f000 816b 	beq.w	19c76 <_vfiprintf_r+0xf46>
   199a0:	42b8      	cmp	r0, r7
   199a2:	dc08      	bgt.n	199b6 <_vfiprintf_r+0xc86>
   199a4:	f000 8170 	beq.w	19c88 <_vfiprintf_r+0xf58>
   199a8:	4604      	mov	r4, r0
   199aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   199ac:	5952      	ldr	r2, [r2, r5]
   199ae:	ab16      	add	r3, sp, #88	; 0x58
   199b0:	3504      	adds	r5, #4
   199b2:	2a00      	cmp	r2, #0
   199b4:	d1ec      	bne.n	19990 <_vfiprintf_r+0xc60>
   199b6:	9404      	str	r4, [sp, #16]
   199b8:	9c07      	ldr	r4, [sp, #28]
   199ba:	e0af      	b.n	19b1c <_vfiprintf_r+0xdec>
   199bc:	f016 0310 	ands.w	r3, r6, #16
   199c0:	9807      	ldr	r0, [sp, #28]
   199c2:	d10c      	bne.n	199de <_vfiprintf_r+0xcae>
   199c4:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   199c8:	d005      	beq.n	199d6 <_vfiprintf_r+0xca6>
   199ca:	461a      	mov	r2, r3
   199cc:	f850 3b04 	ldr.w	r3, [r0], #4
   199d0:	9007      	str	r0, [sp, #28]
   199d2:	b29b      	uxth	r3, r3
   199d4:	e7a1      	b.n	1991a <_vfiprintf_r+0xbea>
   199d6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   199da:	f040 80e1 	bne.w	19ba0 <_vfiprintf_r+0xe70>
   199de:	f850 3b04 	ldr.w	r3, [r0], #4
   199e2:	9007      	str	r0, [sp, #28]
   199e4:	e799      	b.n	1991a <_vfiprintf_r+0xbea>
   199e6:	bf00      	nop
   199e8:	20002b2c 	.word	0x20002b2c
   199ec:	20001074 	.word	0x20001074
   199f0:	20001088 	.word	0x20001088
   199f4:	9903      	ldr	r1, [sp, #12]
   199f6:	9704      	str	r7, [sp, #16]
   199f8:	ac44      	add	r4, sp, #272	; 0x110
   199fa:	469e      	mov	lr, r3
   199fc:	ee08 ba90 	vmov	s17, fp
   19a00:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   19a04:	f04f 0c00 	mov.w	ip, #0
   19a08:	4623      	mov	r3, r4
   19a0a:	e006      	b.n	19a1a <_vfiprintf_r+0xcea>
   19a0c:	f1be 0f0a 	cmp.w	lr, #10
   19a10:	f172 0200 	sbcs.w	r2, r2, #0
   19a14:	d339      	bcc.n	19a8a <_vfiprintf_r+0xd5a>
   19a16:	46a6      	mov	lr, r4
   19a18:	462a      	mov	r2, r5
   19a1a:	49a6      	ldr	r1, [pc, #664]	; (19cb4 <_vfiprintf_r+0xf84>)
   19a1c:	eb1e 0002 	adds.w	r0, lr, r2
   19a20:	f140 0000 	adc.w	r0, r0, #0
   19a24:	460f      	mov	r7, r1
   19a26:	fba1 1400 	umull	r1, r4, r1, r0
   19a2a:	f024 0103 	bic.w	r1, r4, #3
   19a2e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   19a32:	1a40      	subs	r0, r0, r1
   19a34:	ebbe 0100 	subs.w	r1, lr, r0
   19a38:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   19a3c:	f162 0400 	sbc.w	r4, r2, #0
   19a40:	fb05 f501 	mul.w	r5, r5, r1
   19a44:	fb07 5504 	mla	r5, r7, r4, r5
   19a48:	fba1 4107 	umull	r4, r1, r1, r7
   19a4c:	440d      	add	r5, r1
   19a4e:	2705      	movs	r7, #5
   19a50:	f004 0101 	and.w	r1, r4, #1
   19a54:	fba1 1b07 	umull	r1, fp, r1, r7
   19a58:	1809      	adds	r1, r1, r0
   19a5a:	0864      	lsrs	r4, r4, #1
   19a5c:	3130      	adds	r1, #48	; 0x30
   19a5e:	f803 1c01 	strb.w	r1, [r3, #-1]
   19a62:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   19a66:	f10c 0c01 	add.w	ip, ip, #1
   19a6a:	3b01      	subs	r3, #1
   19a6c:	086d      	lsrs	r5, r5, #1
   19a6e:	2e00      	cmp	r6, #0
   19a70:	d0cc      	beq.n	19a0c <_vfiprintf_r+0xcdc>
   19a72:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19a74:	7809      	ldrb	r1, [r1, #0]
   19a76:	4561      	cmp	r1, ip
   19a78:	d1c8      	bne.n	19a0c <_vfiprintf_r+0xcdc>
   19a7a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19a7e:	d0c5      	beq.n	19a0c <_vfiprintf_r+0xcdc>
   19a80:	f1be 0f0a 	cmp.w	lr, #10
   19a84:	f172 0200 	sbcs.w	r2, r2, #0
   19a88:	d26c      	bcs.n	19b64 <_vfiprintf_r+0xe34>
   19a8a:	461c      	mov	r4, r3
   19a8c:	ab44      	add	r3, sp, #272	; 0x110
   19a8e:	1b1b      	subs	r3, r3, r4
   19a90:	9f04      	ldr	r7, [sp, #16]
   19a92:	9e03      	ldr	r6, [sp, #12]
   19a94:	9304      	str	r3, [sp, #16]
   19a96:	ee18 ba90 	vmov	fp, s17
   19a9a:	f7ff ba72 	b.w	18f82 <_vfiprintf_r+0x252>
   19a9e:	9603      	str	r6, [sp, #12]
   19aa0:	f7ff ba62 	b.w	18f68 <_vfiprintf_r+0x238>
   19aa4:	4658      	mov	r0, fp
   19aa6:	f7f7 ff4f 	bl	11948 <__sinit>
   19aaa:	f7ff b95b 	b.w	18d64 <_vfiprintf_r+0x34>
   19aae:	2901      	cmp	r1, #1
   19ab0:	9603      	str	r6, [sp, #12]
   19ab2:	f47f accd 	bne.w	19450 <_vfiprintf_r+0x720>
   19ab6:	f7ff ba5c 	b.w	18f72 <_vfiprintf_r+0x242>
   19aba:	9b07      	ldr	r3, [sp, #28]
   19abc:	9905      	ldr	r1, [sp, #20]
   19abe:	f853 2b04 	ldr.w	r2, [r3], #4
   19ac2:	6011      	str	r1, [r2, #0]
   19ac4:	9307      	str	r3, [sp, #28]
   19ac6:	f7ff b97e 	b.w	18dc6 <_vfiprintf_r+0x96>
   19aca:	2f06      	cmp	r7, #6
   19acc:	463b      	mov	r3, r7
   19ace:	9a03      	ldr	r2, [sp, #12]
   19ad0:	4c79      	ldr	r4, [pc, #484]	; (19cb8 <_vfiprintf_r+0xf88>)
   19ad2:	9207      	str	r2, [sp, #28]
   19ad4:	bf28      	it	cs
   19ad6:	2306      	movcs	r3, #6
   19ad8:	9304      	str	r3, [sp, #16]
   19ada:	9303      	str	r3, [sp, #12]
   19adc:	f7ff bb25 	b.w	1912a <_vfiprintf_r+0x3fa>
   19ae0:	9b03      	ldr	r3, [sp, #12]
   19ae2:	9907      	ldr	r1, [sp, #28]
   19ae4:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   19ae8:	bf14      	ite	ne
   19aea:	f851 3b04 	ldrne.w	r3, [r1], #4
   19aee:	f851 3b04 	ldreq.w	r3, [r1], #4
   19af2:	9107      	str	r1, [sp, #28]
   19af4:	bf1c      	itt	ne
   19af6:	4602      	movne	r2, r0
   19af8:	b2db      	uxtbne	r3, r3
   19afa:	2101      	movs	r1, #1
   19afc:	f7ff ba8f 	b.w	1901e <_vfiprintf_r+0x2ee>
   19b00:	ab16      	add	r3, sp, #88	; 0x58
   19b02:	9300      	str	r3, [sp, #0]
   19b04:	2300      	movs	r3, #0
   19b06:	4619      	mov	r1, r3
   19b08:	aa13      	add	r2, sp, #76	; 0x4c
   19b0a:	4658      	mov	r0, fp
   19b0c:	f7fe fe98 	bl	18840 <_wcsrtombs_r>
   19b10:	4603      	mov	r3, r0
   19b12:	3301      	adds	r3, #1
   19b14:	9004      	str	r0, [sp, #16]
   19b16:	f000 80ae 	beq.w	19c76 <_vfiprintf_r+0xf46>
   19b1a:	9413      	str	r4, [sp, #76]	; 0x4c
   19b1c:	9b04      	ldr	r3, [sp, #16]
   19b1e:	2b00      	cmp	r3, #0
   19b20:	d030      	beq.n	19b84 <_vfiprintf_r+0xe54>
   19b22:	2b63      	cmp	r3, #99	; 0x63
   19b24:	dc63      	bgt.n	19bee <_vfiprintf_r+0xebe>
   19b26:	2300      	movs	r3, #0
   19b28:	9308      	str	r3, [sp, #32]
   19b2a:	ac2b      	add	r4, sp, #172	; 0xac
   19b2c:	2208      	movs	r2, #8
   19b2e:	2100      	movs	r1, #0
   19b30:	a816      	add	r0, sp, #88	; 0x58
   19b32:	f7f8 f941 	bl	11db8 <memset>
   19b36:	9d04      	ldr	r5, [sp, #16]
   19b38:	ab16      	add	r3, sp, #88	; 0x58
   19b3a:	9300      	str	r3, [sp, #0]
   19b3c:	aa13      	add	r2, sp, #76	; 0x4c
   19b3e:	462b      	mov	r3, r5
   19b40:	4621      	mov	r1, r4
   19b42:	4658      	mov	r0, fp
   19b44:	f7fe fe7c 	bl	18840 <_wcsrtombs_r>
   19b48:	4285      	cmp	r5, r0
   19b4a:	f040 80ab 	bne.w	19ca4 <_vfiprintf_r+0xf74>
   19b4e:	9b03      	ldr	r3, [sp, #12]
   19b50:	9a04      	ldr	r2, [sp, #16]
   19b52:	9307      	str	r3, [sp, #28]
   19b54:	2300      	movs	r3, #0
   19b56:	54a3      	strb	r3, [r4, r2]
   19b58:	461f      	mov	r7, r3
   19b5a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   19b5e:	9303      	str	r3, [sp, #12]
   19b60:	f7ff ba16 	b.w	18f90 <_vfiprintf_r+0x260>
   19b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19b66:	990d      	ldr	r1, [sp, #52]	; 0x34
   19b68:	1a9b      	subs	r3, r3, r2
   19b6a:	4618      	mov	r0, r3
   19b6c:	9308      	str	r3, [sp, #32]
   19b6e:	f7f8 fa11 	bl	11f94 <strncpy>
   19b72:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19b74:	9b08      	ldr	r3, [sp, #32]
   19b76:	784a      	ldrb	r2, [r1, #1]
   19b78:	b10a      	cbz	r2, 19b7e <_vfiprintf_r+0xe4e>
   19b7a:	3101      	adds	r1, #1
   19b7c:	910b      	str	r1, [sp, #44]	; 0x2c
   19b7e:	f04f 0c00 	mov.w	ip, #0
   19b82:	e748      	b.n	19a16 <_vfiprintf_r+0xce6>
   19b84:	9b03      	ldr	r3, [sp, #12]
   19b86:	9307      	str	r3, [sp, #28]
   19b88:	9b04      	ldr	r3, [sp, #16]
   19b8a:	9303      	str	r3, [sp, #12]
   19b8c:	461f      	mov	r7, r3
   19b8e:	9308      	str	r3, [sp, #32]
   19b90:	f7ff b9fe 	b.w	18f90 <_vfiprintf_r+0x260>
   19b94:	2101      	movs	r1, #1
   19b96:	4618      	mov	r0, r3
   19b98:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19b9c:	f7ff bb13 	b.w	191c6 <_vfiprintf_r+0x496>
   19ba0:	f850 3b04 	ldr.w	r3, [r0], #4
   19ba4:	9007      	str	r0, [sp, #28]
   19ba6:	4622      	mov	r2, r4
   19ba8:	b2db      	uxtb	r3, r3
   19baa:	e6b6      	b.n	1991a <_vfiprintf_r+0xbea>
   19bac:	f912 3b04 	ldrsb.w	r3, [r2], #4
   19bb0:	9207      	str	r2, [sp, #28]
   19bb2:	17da      	asrs	r2, r3, #31
   19bb4:	4611      	mov	r1, r2
   19bb6:	f7ff b9ca 	b.w	18f4e <_vfiprintf_r+0x21e>
   19bba:	f851 3b04 	ldr.w	r3, [r1], #4
   19bbe:	9107      	str	r1, [sp, #28]
   19bc0:	4602      	mov	r2, r0
   19bc2:	b2db      	uxtb	r3, r3
   19bc4:	f7ff ba27 	b.w	19016 <_vfiprintf_r+0x2e6>
   19bc8:	2301      	movs	r3, #1
   19bca:	931c      	str	r3, [sp, #112]	; 0x70
   19bcc:	2101      	movs	r1, #1
   19bce:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   19bd2:	931b      	str	r3, [sp, #108]	; 0x6c
   19bd4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19bd8:	460b      	mov	r3, r1
   19bda:	f7ff bacd 	b.w	19178 <_vfiprintf_r+0x448>
   19bde:	9b07      	ldr	r3, [sp, #28]
   19be0:	9905      	ldr	r1, [sp, #20]
   19be2:	f853 2b04 	ldr.w	r2, [r3], #4
   19be6:	9307      	str	r3, [sp, #28]
   19be8:	8011      	strh	r1, [r2, #0]
   19bea:	f7ff b8ec 	b.w	18dc6 <_vfiprintf_r+0x96>
   19bee:	1c59      	adds	r1, r3, #1
   19bf0:	4658      	mov	r0, fp
   19bf2:	f7f6 f971 	bl	fed8 <_malloc_r>
   19bf6:	4604      	mov	r4, r0
   19bf8:	2800      	cmp	r0, #0
   19bfa:	d03c      	beq.n	19c76 <_vfiprintf_r+0xf46>
   19bfc:	9008      	str	r0, [sp, #32]
   19bfe:	e795      	b.n	19b2c <_vfiprintf_r+0xdfc>
   19c00:	6d88      	ldr	r0, [r1, #88]	; 0x58
   19c02:	f7f8 fa95 	bl	12130 <__retarget_lock_release_recursive>
   19c06:	f7ff b9e9 	b.w	18fdc <_vfiprintf_r+0x2ac>
   19c0a:	9b03      	ldr	r3, [sp, #12]
   19c0c:	9307      	str	r3, [sp, #28]
   19c0e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   19c12:	9f08      	ldr	r7, [sp, #32]
   19c14:	f7ff b9bc 	b.w	18f90 <_vfiprintf_r+0x260>
   19c18:	9819      	ldr	r0, [sp, #100]	; 0x64
   19c1a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19c1c:	3001      	adds	r0, #1
   19c1e:	e545      	b.n	196ac <_vfiprintf_r+0x97c>
   19c20:	9b03      	ldr	r3, [sp, #12]
   19c22:	9307      	str	r3, [sp, #28]
   19c24:	4620      	mov	r0, r4
   19c26:	f7f8 fcab 	bl	12580 <strlen>
   19c2a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   19c2e:	462f      	mov	r7, r5
   19c30:	9004      	str	r0, [sp, #16]
   19c32:	9303      	str	r3, [sp, #12]
   19c34:	9508      	str	r5, [sp, #32]
   19c36:	f7ff b9ab 	b.w	18f90 <_vfiprintf_r+0x260>
   19c3a:	ee18 1a10 	vmov	r1, s16
   19c3e:	aa18      	add	r2, sp, #96	; 0x60
   19c40:	4658      	mov	r0, fp
   19c42:	f7ff f839 	bl	18cb8 <__sprint_r.part.0>
   19c46:	2800      	cmp	r0, #0
   19c48:	f43f aa36 	beq.w	190b8 <_vfiprintf_r+0x388>
   19c4c:	f7ff ba4d 	b.w	190ea <_vfiprintf_r+0x3ba>
   19c50:	9819      	ldr	r0, [sp, #100]	; 0x64
   19c52:	3001      	adds	r0, #1
   19c54:	e57a      	b.n	1974c <_vfiprintf_r+0xa1c>
   19c56:	468c      	mov	ip, r1
   19c58:	e46e      	b.n	19538 <_vfiprintf_r+0x808>
   19c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19c5c:	07d9      	lsls	r1, r3, #31
   19c5e:	d405      	bmi.n	19c6c <_vfiprintf_r+0xf3c>
   19c60:	89ab      	ldrh	r3, [r5, #12]
   19c62:	059a      	lsls	r2, r3, #22
   19c64:	d402      	bmi.n	19c6c <_vfiprintf_r+0xf3c>
   19c66:	6da8      	ldr	r0, [r5, #88]	; 0x58
   19c68:	f7f8 fa62 	bl	12130 <__retarget_lock_release_recursive>
   19c6c:	f04f 33ff 	mov.w	r3, #4294967295
   19c70:	9305      	str	r3, [sp, #20]
   19c72:	f7ff ba49 	b.w	19108 <_vfiprintf_r+0x3d8>
   19c76:	ee18 2a10 	vmov	r2, s16
   19c7a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   19c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19c82:	8193      	strh	r3, [r2, #12]
   19c84:	f7ff ba35 	b.w	190f2 <_vfiprintf_r+0x3c2>
   19c88:	9c07      	ldr	r4, [sp, #28]
   19c8a:	9704      	str	r7, [sp, #16]
   19c8c:	e746      	b.n	19b1c <_vfiprintf_r+0xdec>
   19c8e:	9b07      	ldr	r3, [sp, #28]
   19c90:	f898 1001 	ldrb.w	r1, [r8, #1]
   19c94:	f853 7b04 	ldr.w	r7, [r3], #4
   19c98:	9307      	str	r3, [sp, #28]
   19c9a:	4690      	mov	r8, r2
   19c9c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   19ca0:	f7ff b8b9 	b.w	18e16 <_vfiprintf_r+0xe6>
   19ca4:	ee18 2a10 	vmov	r2, s16
   19ca8:	8993      	ldrh	r3, [r2, #12]
   19caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19cae:	8193      	strh	r3, [r2, #12]
   19cb0:	f7ff ba15 	b.w	190de <_vfiprintf_r+0x3ae>
   19cb4:	cccccccd 	.word	0xcccccccd
   19cb8:	2000109c 	.word	0x2000109c

00019cbc <__sbprintf>:
   19cbc:	b570      	push	{r4, r5, r6, lr}
   19cbe:	460c      	mov	r4, r1
   19cc0:	8989      	ldrh	r1, [r1, #12]
   19cc2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   19cc6:	f021 0102 	bic.w	r1, r1, #2
   19cca:	f8ad 1014 	strh.w	r1, [sp, #20]
   19cce:	6e61      	ldr	r1, [r4, #100]	; 0x64
   19cd0:	911b      	str	r1, [sp, #108]	; 0x6c
   19cd2:	89e1      	ldrh	r1, [r4, #14]
   19cd4:	f8ad 1016 	strh.w	r1, [sp, #22]
   19cd8:	69e1      	ldr	r1, [r4, #28]
   19cda:	9109      	str	r1, [sp, #36]	; 0x24
   19cdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19cde:	910b      	str	r1, [sp, #44]	; 0x2c
   19ce0:	a91c      	add	r1, sp, #112	; 0x70
   19ce2:	9102      	str	r1, [sp, #8]
   19ce4:	9106      	str	r1, [sp, #24]
   19ce6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   19cea:	4606      	mov	r6, r0
   19cec:	9104      	str	r1, [sp, #16]
   19cee:	9107      	str	r1, [sp, #28]
   19cf0:	a818      	add	r0, sp, #96	; 0x60
   19cf2:	2100      	movs	r1, #0
   19cf4:	e9cd 3200 	strd	r3, r2, [sp]
   19cf8:	9108      	str	r1, [sp, #32]
   19cfa:	f7f8 fa13 	bl	12124 <__retarget_lock_init_recursive>
   19cfe:	e9dd 3200 	ldrd	r3, r2, [sp]
   19d02:	a902      	add	r1, sp, #8
   19d04:	4630      	mov	r0, r6
   19d06:	f7ff f813 	bl	18d30 <_vfiprintf_r>
   19d0a:	1e05      	subs	r5, r0, #0
   19d0c:	db07      	blt.n	19d1e <__sbprintf+0x62>
   19d0e:	a902      	add	r1, sp, #8
   19d10:	4630      	mov	r0, r6
   19d12:	f7fd fad3 	bl	172bc <_fflush_r>
   19d16:	2800      	cmp	r0, #0
   19d18:	bf18      	it	ne
   19d1a:	f04f 35ff 	movne.w	r5, #4294967295
   19d1e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   19d22:	065b      	lsls	r3, r3, #25
   19d24:	d503      	bpl.n	19d2e <__sbprintf+0x72>
   19d26:	89a3      	ldrh	r3, [r4, #12]
   19d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19d2c:	81a3      	strh	r3, [r4, #12]
   19d2e:	9818      	ldr	r0, [sp, #96]	; 0x60
   19d30:	f7f8 f9fa 	bl	12128 <__retarget_lock_close_recursive>
   19d34:	4628      	mov	r0, r5
   19d36:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   19d3a:	bd70      	pop	{r4, r5, r6, pc}

00019d3c <__sfvwrite_r>:
   19d3c:	6893      	ldr	r3, [r2, #8]
   19d3e:	2b00      	cmp	r3, #0
   19d40:	f000 8085 	beq.w	19e4e <__sfvwrite_r+0x112>
   19d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d48:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   19d4c:	460c      	mov	r4, r1
   19d4e:	0719      	lsls	r1, r3, #28
   19d50:	4680      	mov	r8, r0
   19d52:	b083      	sub	sp, #12
   19d54:	4617      	mov	r7, r2
   19d56:	b298      	uxth	r0, r3
   19d58:	d525      	bpl.n	19da6 <__sfvwrite_r+0x6a>
   19d5a:	6923      	ldr	r3, [r4, #16]
   19d5c:	b31b      	cbz	r3, 19da6 <__sfvwrite_r+0x6a>
   19d5e:	f010 0302 	ands.w	r3, r0, #2
   19d62:	683d      	ldr	r5, [r7, #0]
   19d64:	d02d      	beq.n	19dc2 <__sfvwrite_r+0x86>
   19d66:	f04f 0a00 	mov.w	sl, #0
   19d6a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 1a02c <__sfvwrite_r+0x2f0>
   19d6e:	4656      	mov	r6, sl
   19d70:	46b9      	mov	r9, r7
   19d72:	455e      	cmp	r6, fp
   19d74:	4633      	mov	r3, r6
   19d76:	4652      	mov	r2, sl
   19d78:	bf28      	it	cs
   19d7a:	465b      	movcs	r3, fp
   19d7c:	4640      	mov	r0, r8
   19d7e:	2e00      	cmp	r6, #0
   19d80:	d052      	beq.n	19e28 <__sfvwrite_r+0xec>
   19d82:	69e1      	ldr	r1, [r4, #28]
   19d84:	6a67      	ldr	r7, [r4, #36]	; 0x24
   19d86:	47b8      	blx	r7
   19d88:	2800      	cmp	r0, #0
   19d8a:	dd56      	ble.n	19e3a <__sfvwrite_r+0xfe>
   19d8c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   19d90:	1a1b      	subs	r3, r3, r0
   19d92:	4482      	add	sl, r0
   19d94:	1a36      	subs	r6, r6, r0
   19d96:	f8c9 3008 	str.w	r3, [r9, #8]
   19d9a:	2b00      	cmp	r3, #0
   19d9c:	d1e9      	bne.n	19d72 <__sfvwrite_r+0x36>
   19d9e:	2000      	movs	r0, #0
   19da0:	b003      	add	sp, #12
   19da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19da6:	4621      	mov	r1, r4
   19da8:	4640      	mov	r0, r8
   19daa:	f000 f97d 	bl	1a0a8 <__swsetup_r>
   19dae:	2800      	cmp	r0, #0
   19db0:	f040 8138 	bne.w	1a024 <__sfvwrite_r+0x2e8>
   19db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19db8:	683d      	ldr	r5, [r7, #0]
   19dba:	b298      	uxth	r0, r3
   19dbc:	f010 0302 	ands.w	r3, r0, #2
   19dc0:	d1d1      	bne.n	19d66 <__sfvwrite_r+0x2a>
   19dc2:	f010 0901 	ands.w	r9, r0, #1
   19dc6:	d144      	bne.n	19e52 <__sfvwrite_r+0x116>
   19dc8:	464e      	mov	r6, r9
   19dca:	9700      	str	r7, [sp, #0]
   19dcc:	b346      	cbz	r6, 19e20 <__sfvwrite_r+0xe4>
   19dce:	0582      	lsls	r2, r0, #22
   19dd0:	f8d4 b008 	ldr.w	fp, [r4, #8]
   19dd4:	f140 8085 	bpl.w	19ee2 <__sfvwrite_r+0x1a6>
   19dd8:	45b3      	cmp	fp, r6
   19dda:	465a      	mov	r2, fp
   19ddc:	f200 80b4 	bhi.w	19f48 <__sfvwrite_r+0x20c>
   19de0:	f410 6f90 	tst.w	r0, #1152	; 0x480
   19de4:	f040 80c1 	bne.w	19f6a <__sfvwrite_r+0x22e>
   19de8:	6820      	ldr	r0, [r4, #0]
   19dea:	9201      	str	r2, [sp, #4]
   19dec:	4649      	mov	r1, r9
   19dee:	f7f7 ff67 	bl	11cc0 <memmove>
   19df2:	68a3      	ldr	r3, [r4, #8]
   19df4:	9a01      	ldr	r2, [sp, #4]
   19df6:	eba3 010b 	sub.w	r1, r3, fp
   19dfa:	6823      	ldr	r3, [r4, #0]
   19dfc:	60a1      	str	r1, [r4, #8]
   19dfe:	4413      	add	r3, r2
   19e00:	46b2      	mov	sl, r6
   19e02:	6023      	str	r3, [r4, #0]
   19e04:	2600      	movs	r6, #0
   19e06:	9a00      	ldr	r2, [sp, #0]
   19e08:	6893      	ldr	r3, [r2, #8]
   19e0a:	eba3 030a 	sub.w	r3, r3, sl
   19e0e:	44d1      	add	r9, sl
   19e10:	6093      	str	r3, [r2, #8]
   19e12:	2b00      	cmp	r3, #0
   19e14:	d0c3      	beq.n	19d9e <__sfvwrite_r+0x62>
   19e16:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   19e1a:	b280      	uxth	r0, r0
   19e1c:	2e00      	cmp	r6, #0
   19e1e:	d1d6      	bne.n	19dce <__sfvwrite_r+0x92>
   19e20:	e9d5 9600 	ldrd	r9, r6, [r5]
   19e24:	3508      	adds	r5, #8
   19e26:	e7d1      	b.n	19dcc <__sfvwrite_r+0x90>
   19e28:	e9d5 a600 	ldrd	sl, r6, [r5]
   19e2c:	3508      	adds	r5, #8
   19e2e:	e7a0      	b.n	19d72 <__sfvwrite_r+0x36>
   19e30:	4621      	mov	r1, r4
   19e32:	4640      	mov	r0, r8
   19e34:	f7fd fa42 	bl	172bc <_fflush_r>
   19e38:	b388      	cbz	r0, 19e9e <__sfvwrite_r+0x162>
   19e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19e42:	f04f 30ff 	mov.w	r0, #4294967295
   19e46:	81a3      	strh	r3, [r4, #12]
   19e48:	b003      	add	sp, #12
   19e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e4e:	2000      	movs	r0, #0
   19e50:	4770      	bx	lr
   19e52:	461e      	mov	r6, r3
   19e54:	46ba      	mov	sl, r7
   19e56:	4699      	mov	r9, r3
   19e58:	4618      	mov	r0, r3
   19e5a:	9500      	str	r5, [sp, #0]
   19e5c:	461f      	mov	r7, r3
   19e5e:	b366      	cbz	r6, 19eba <__sfvwrite_r+0x17e>
   19e60:	2800      	cmp	r0, #0
   19e62:	d032      	beq.n	19eca <__sfvwrite_r+0x18e>
   19e64:	464a      	mov	r2, r9
   19e66:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   19e6a:	6820      	ldr	r0, [r4, #0]
   19e6c:	68a5      	ldr	r5, [r4, #8]
   19e6e:	42b2      	cmp	r2, r6
   19e70:	bf28      	it	cs
   19e72:	4632      	movcs	r2, r6
   19e74:	4288      	cmp	r0, r1
   19e76:	d904      	bls.n	19e82 <__sfvwrite_r+0x146>
   19e78:	eb05 0b03 	add.w	fp, r5, r3
   19e7c:	455a      	cmp	r2, fp
   19e7e:	f300 80a7 	bgt.w	19fd0 <__sfvwrite_r+0x294>
   19e82:	4293      	cmp	r3, r2
   19e84:	dc64      	bgt.n	19f50 <__sfvwrite_r+0x214>
   19e86:	69e1      	ldr	r1, [r4, #28]
   19e88:	6a65      	ldr	r5, [r4, #36]	; 0x24
   19e8a:	463a      	mov	r2, r7
   19e8c:	4640      	mov	r0, r8
   19e8e:	47a8      	blx	r5
   19e90:	f1b0 0b00 	subs.w	fp, r0, #0
   19e94:	ddd1      	ble.n	19e3a <__sfvwrite_r+0xfe>
   19e96:	ebb9 090b 	subs.w	r9, r9, fp
   19e9a:	d0c9      	beq.n	19e30 <__sfvwrite_r+0xf4>
   19e9c:	2001      	movs	r0, #1
   19e9e:	f8da 3008 	ldr.w	r3, [sl, #8]
   19ea2:	eba3 030b 	sub.w	r3, r3, fp
   19ea6:	445f      	add	r7, fp
   19ea8:	eba6 060b 	sub.w	r6, r6, fp
   19eac:	f8ca 3008 	str.w	r3, [sl, #8]
   19eb0:	2b00      	cmp	r3, #0
   19eb2:	f43f af74 	beq.w	19d9e <__sfvwrite_r+0x62>
   19eb6:	2e00      	cmp	r6, #0
   19eb8:	d1d2      	bne.n	19e60 <__sfvwrite_r+0x124>
   19eba:	9a00      	ldr	r2, [sp, #0]
   19ebc:	6856      	ldr	r6, [r2, #4]
   19ebe:	4613      	mov	r3, r2
   19ec0:	3208      	adds	r2, #8
   19ec2:	9200      	str	r2, [sp, #0]
   19ec4:	2e00      	cmp	r6, #0
   19ec6:	d0f8      	beq.n	19eba <__sfvwrite_r+0x17e>
   19ec8:	681f      	ldr	r7, [r3, #0]
   19eca:	4632      	mov	r2, r6
   19ecc:	210a      	movs	r1, #10
   19ece:	4638      	mov	r0, r7
   19ed0:	f7f8 fb06 	bl	124e0 <memchr>
   19ed4:	2800      	cmp	r0, #0
   19ed6:	f000 809c 	beq.w	1a012 <__sfvwrite_r+0x2d6>
   19eda:	3001      	adds	r0, #1
   19edc:	eba0 0907 	sub.w	r9, r0, r7
   19ee0:	e7c0      	b.n	19e64 <__sfvwrite_r+0x128>
   19ee2:	6820      	ldr	r0, [r4, #0]
   19ee4:	6923      	ldr	r3, [r4, #16]
   19ee6:	4298      	cmp	r0, r3
   19ee8:	d816      	bhi.n	19f18 <__sfvwrite_r+0x1dc>
   19eea:	6962      	ldr	r2, [r4, #20]
   19eec:	42b2      	cmp	r2, r6
   19eee:	d813      	bhi.n	19f18 <__sfvwrite_r+0x1dc>
   19ef0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   19ef4:	42b3      	cmp	r3, r6
   19ef6:	bf28      	it	cs
   19ef8:	4633      	movcs	r3, r6
   19efa:	69e1      	ldr	r1, [r4, #28]
   19efc:	fb93 f3f2 	sdiv	r3, r3, r2
   19f00:	6a67      	ldr	r7, [r4, #36]	; 0x24
   19f02:	fb02 f303 	mul.w	r3, r2, r3
   19f06:	4640      	mov	r0, r8
   19f08:	464a      	mov	r2, r9
   19f0a:	47b8      	blx	r7
   19f0c:	f1b0 0a00 	subs.w	sl, r0, #0
   19f10:	dd93      	ble.n	19e3a <__sfvwrite_r+0xfe>
   19f12:	eba6 060a 	sub.w	r6, r6, sl
   19f16:	e776      	b.n	19e06 <__sfvwrite_r+0xca>
   19f18:	45b3      	cmp	fp, r6
   19f1a:	46da      	mov	sl, fp
   19f1c:	bf28      	it	cs
   19f1e:	46b2      	movcs	sl, r6
   19f20:	4652      	mov	r2, sl
   19f22:	4649      	mov	r1, r9
   19f24:	f7f7 fecc 	bl	11cc0 <memmove>
   19f28:	68a3      	ldr	r3, [r4, #8]
   19f2a:	6822      	ldr	r2, [r4, #0]
   19f2c:	eba3 030a 	sub.w	r3, r3, sl
   19f30:	4452      	add	r2, sl
   19f32:	60a3      	str	r3, [r4, #8]
   19f34:	6022      	str	r2, [r4, #0]
   19f36:	2b00      	cmp	r3, #0
   19f38:	d1eb      	bne.n	19f12 <__sfvwrite_r+0x1d6>
   19f3a:	4621      	mov	r1, r4
   19f3c:	4640      	mov	r0, r8
   19f3e:	f7fd f9bd 	bl	172bc <_fflush_r>
   19f42:	2800      	cmp	r0, #0
   19f44:	d0e5      	beq.n	19f12 <__sfvwrite_r+0x1d6>
   19f46:	e778      	b.n	19e3a <__sfvwrite_r+0xfe>
   19f48:	6820      	ldr	r0, [r4, #0]
   19f4a:	46b3      	mov	fp, r6
   19f4c:	4632      	mov	r2, r6
   19f4e:	e74c      	b.n	19dea <__sfvwrite_r+0xae>
   19f50:	4639      	mov	r1, r7
   19f52:	9201      	str	r2, [sp, #4]
   19f54:	f7f7 feb4 	bl	11cc0 <memmove>
   19f58:	9a01      	ldr	r2, [sp, #4]
   19f5a:	68a3      	ldr	r3, [r4, #8]
   19f5c:	1a9b      	subs	r3, r3, r2
   19f5e:	60a3      	str	r3, [r4, #8]
   19f60:	6823      	ldr	r3, [r4, #0]
   19f62:	4413      	add	r3, r2
   19f64:	6023      	str	r3, [r4, #0]
   19f66:	4693      	mov	fp, r2
   19f68:	e795      	b.n	19e96 <__sfvwrite_r+0x15a>
   19f6a:	6823      	ldr	r3, [r4, #0]
   19f6c:	6921      	ldr	r1, [r4, #16]
   19f6e:	eba3 0b01 	sub.w	fp, r3, r1
   19f72:	6963      	ldr	r3, [r4, #20]
   19f74:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   19f78:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   19f7c:	f10b 0301 	add.w	r3, fp, #1
   19f80:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   19f84:	4433      	add	r3, r6
   19f86:	4553      	cmp	r3, sl
   19f88:	4652      	mov	r2, sl
   19f8a:	bf84      	itt	hi
   19f8c:	469a      	movhi	sl, r3
   19f8e:	4652      	movhi	r2, sl
   19f90:	0543      	lsls	r3, r0, #21
   19f92:	d52c      	bpl.n	19fee <__sfvwrite_r+0x2b2>
   19f94:	4611      	mov	r1, r2
   19f96:	4640      	mov	r0, r8
   19f98:	f7f5 ff9e 	bl	fed8 <_malloc_r>
   19f9c:	2800      	cmp	r0, #0
   19f9e:	d03b      	beq.n	1a018 <__sfvwrite_r+0x2dc>
   19fa0:	465a      	mov	r2, fp
   19fa2:	6921      	ldr	r1, [r4, #16]
   19fa4:	9001      	str	r0, [sp, #4]
   19fa6:	f7f3 fe79 	bl	dc9c <memcpy>
   19faa:	89a2      	ldrh	r2, [r4, #12]
   19fac:	9b01      	ldr	r3, [sp, #4]
   19fae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   19fb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   19fb6:	81a2      	strh	r2, [r4, #12]
   19fb8:	eb03 000b 	add.w	r0, r3, fp
   19fbc:	6123      	str	r3, [r4, #16]
   19fbe:	ebaa 030b 	sub.w	r3, sl, fp
   19fc2:	f8c4 a014 	str.w	sl, [r4, #20]
   19fc6:	60a3      	str	r3, [r4, #8]
   19fc8:	6020      	str	r0, [r4, #0]
   19fca:	46b3      	mov	fp, r6
   19fcc:	4632      	mov	r2, r6
   19fce:	e70c      	b.n	19dea <__sfvwrite_r+0xae>
   19fd0:	4639      	mov	r1, r7
   19fd2:	465a      	mov	r2, fp
   19fd4:	f7f7 fe74 	bl	11cc0 <memmove>
   19fd8:	6823      	ldr	r3, [r4, #0]
   19fda:	445b      	add	r3, fp
   19fdc:	6023      	str	r3, [r4, #0]
   19fde:	4621      	mov	r1, r4
   19fe0:	4640      	mov	r0, r8
   19fe2:	f7fd f96b 	bl	172bc <_fflush_r>
   19fe6:	2800      	cmp	r0, #0
   19fe8:	f43f af55 	beq.w	19e96 <__sfvwrite_r+0x15a>
   19fec:	e725      	b.n	19e3a <__sfvwrite_r+0xfe>
   19fee:	4640      	mov	r0, r8
   19ff0:	f7f6 fa3a 	bl	10468 <_realloc_r>
   19ff4:	4603      	mov	r3, r0
   19ff6:	2800      	cmp	r0, #0
   19ff8:	d1de      	bne.n	19fb8 <__sfvwrite_r+0x27c>
   19ffa:	6921      	ldr	r1, [r4, #16]
   19ffc:	4640      	mov	r0, r8
   19ffe:	f7f8 fbd1 	bl	127a4 <_free_r>
   1a002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a006:	220c      	movs	r2, #12
   1a008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1a00c:	f8c8 2000 	str.w	r2, [r8]
   1a010:	e715      	b.n	19e3e <__sfvwrite_r+0x102>
   1a012:	1c72      	adds	r2, r6, #1
   1a014:	4691      	mov	r9, r2
   1a016:	e726      	b.n	19e66 <__sfvwrite_r+0x12a>
   1a018:	220c      	movs	r2, #12
   1a01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a01e:	f8c8 2000 	str.w	r2, [r8]
   1a022:	e70c      	b.n	19e3e <__sfvwrite_r+0x102>
   1a024:	f04f 30ff 	mov.w	r0, #4294967295
   1a028:	e6ba      	b.n	19da0 <__sfvwrite_r+0x64>
   1a02a:	bf00      	nop
   1a02c:	7ffffc00 	.word	0x7ffffc00

0001a030 <__submore>:
   1a030:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1a034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a038:	460c      	mov	r4, r1
   1a03a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1a03c:	4299      	cmp	r1, r3
   1a03e:	d014      	beq.n	1a06a <__submore+0x3a>
   1a040:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1a042:	0077      	lsls	r7, r6, #1
   1a044:	463a      	mov	r2, r7
   1a046:	f7f6 fa0f 	bl	10468 <_realloc_r>
   1a04a:	4605      	mov	r5, r0
   1a04c:	b340      	cbz	r0, 1a0a0 <__submore+0x70>
   1a04e:	eb00 0806 	add.w	r8, r0, r6
   1a052:	4601      	mov	r1, r0
   1a054:	4632      	mov	r2, r6
   1a056:	4640      	mov	r0, r8
   1a058:	f7f3 fe20 	bl	dc9c <memcpy>
   1a05c:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   1a060:	f8c4 8000 	str.w	r8, [r4]
   1a064:	2000      	movs	r0, #0
   1a066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a06a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a06e:	f7f5 ff33 	bl	fed8 <_malloc_r>
   1a072:	b1a8      	cbz	r0, 1a0a0 <__submore+0x70>
   1a074:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1a078:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a07c:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   1a080:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1a084:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1a088:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1a08c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   1a090:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   1a094:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   1a098:	6023      	str	r3, [r4, #0]
   1a09a:	2000      	movs	r0, #0
   1a09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a0a0:	f04f 30ff 	mov.w	r0, #4294967295
   1a0a4:	e7df      	b.n	1a066 <__submore+0x36>
   1a0a6:	bf00      	nop

0001a0a8 <__swsetup_r>:
   1a0a8:	b538      	push	{r3, r4, r5, lr}
   1a0aa:	4b31      	ldr	r3, [pc, #196]	; (1a170 <__swsetup_r+0xc8>)
   1a0ac:	681b      	ldr	r3, [r3, #0]
   1a0ae:	4605      	mov	r5, r0
   1a0b0:	460c      	mov	r4, r1
   1a0b2:	b113      	cbz	r3, 1a0ba <__swsetup_r+0x12>
   1a0b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a0b6:	2a00      	cmp	r2, #0
   1a0b8:	d04e      	beq.n	1a158 <__swsetup_r+0xb0>
   1a0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a0be:	0718      	lsls	r0, r3, #28
   1a0c0:	b29a      	uxth	r2, r3
   1a0c2:	d51c      	bpl.n	1a0fe <__swsetup_r+0x56>
   1a0c4:	6921      	ldr	r1, [r4, #16]
   1a0c6:	b329      	cbz	r1, 1a114 <__swsetup_r+0x6c>
   1a0c8:	f012 0001 	ands.w	r0, r2, #1
   1a0cc:	d007      	beq.n	1a0de <__swsetup_r+0x36>
   1a0ce:	2000      	movs	r0, #0
   1a0d0:	60a0      	str	r0, [r4, #8]
   1a0d2:	6960      	ldr	r0, [r4, #20]
   1a0d4:	4240      	negs	r0, r0
   1a0d6:	61a0      	str	r0, [r4, #24]
   1a0d8:	b139      	cbz	r1, 1a0ea <__swsetup_r+0x42>
   1a0da:	2000      	movs	r0, #0
   1a0dc:	bd38      	pop	{r3, r4, r5, pc}
   1a0de:	0795      	lsls	r5, r2, #30
   1a0e0:	bf58      	it	pl
   1a0e2:	6960      	ldrpl	r0, [r4, #20]
   1a0e4:	60a0      	str	r0, [r4, #8]
   1a0e6:	2900      	cmp	r1, #0
   1a0e8:	d1f7      	bne.n	1a0da <__swsetup_r+0x32>
   1a0ea:	0612      	lsls	r2, r2, #24
   1a0ec:	bf58      	it	pl
   1a0ee:	4608      	movpl	r0, r1
   1a0f0:	d5f4      	bpl.n	1a0dc <__swsetup_r+0x34>
   1a0f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a0f6:	81a3      	strh	r3, [r4, #12]
   1a0f8:	f04f 30ff 	mov.w	r0, #4294967295
   1a0fc:	bd38      	pop	{r3, r4, r5, pc}
   1a0fe:	06d1      	lsls	r1, r2, #27
   1a100:	d52e      	bpl.n	1a160 <__swsetup_r+0xb8>
   1a102:	0752      	lsls	r2, r2, #29
   1a104:	d414      	bmi.n	1a130 <__swsetup_r+0x88>
   1a106:	6921      	ldr	r1, [r4, #16]
   1a108:	f043 0308 	orr.w	r3, r3, #8
   1a10c:	81a3      	strh	r3, [r4, #12]
   1a10e:	b29a      	uxth	r2, r3
   1a110:	2900      	cmp	r1, #0
   1a112:	d1d9      	bne.n	1a0c8 <__swsetup_r+0x20>
   1a114:	f402 7020 	and.w	r0, r2, #640	; 0x280
   1a118:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a11c:	d0d4      	beq.n	1a0c8 <__swsetup_r+0x20>
   1a11e:	4621      	mov	r1, r4
   1a120:	4628      	mov	r0, r5
   1a122:	f000 f977 	bl	1a414 <__smakebuf_r>
   1a126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a12a:	6921      	ldr	r1, [r4, #16]
   1a12c:	b29a      	uxth	r2, r3
   1a12e:	e7cb      	b.n	1a0c8 <__swsetup_r+0x20>
   1a130:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a132:	b151      	cbz	r1, 1a14a <__swsetup_r+0xa2>
   1a134:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1a138:	4291      	cmp	r1, r2
   1a13a:	d004      	beq.n	1a146 <__swsetup_r+0x9e>
   1a13c:	4628      	mov	r0, r5
   1a13e:	f7f8 fb31 	bl	127a4 <_free_r>
   1a142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a146:	2200      	movs	r2, #0
   1a148:	6322      	str	r2, [r4, #48]	; 0x30
   1a14a:	6921      	ldr	r1, [r4, #16]
   1a14c:	2200      	movs	r2, #0
   1a14e:	e9c4 1200 	strd	r1, r2, [r4]
   1a152:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1a156:	e7d7      	b.n	1a108 <__swsetup_r+0x60>
   1a158:	4618      	mov	r0, r3
   1a15a:	f7f7 fbf5 	bl	11948 <__sinit>
   1a15e:	e7ac      	b.n	1a0ba <__swsetup_r+0x12>
   1a160:	2209      	movs	r2, #9
   1a162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a166:	602a      	str	r2, [r5, #0]
   1a168:	f04f 30ff 	mov.w	r0, #4294967295
   1a16c:	81a3      	strh	r3, [r4, #12]
   1a16e:	bd38      	pop	{r3, r4, r5, pc}
   1a170:	20008fb4 	.word	0x20008fb4

0001a174 <__fputwc>:
   1a174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a178:	b082      	sub	sp, #8
   1a17a:	4682      	mov	sl, r0
   1a17c:	4688      	mov	r8, r1
   1a17e:	4614      	mov	r4, r2
   1a180:	f7f7 ff3a 	bl	11ff8 <__locale_mb_cur_max>
   1a184:	2801      	cmp	r0, #1
   1a186:	d103      	bne.n	1a190 <__fputwc+0x1c>
   1a188:	f108 33ff 	add.w	r3, r8, #4294967295
   1a18c:	2bfe      	cmp	r3, #254	; 0xfe
   1a18e:	d936      	bls.n	1a1fe <__fputwc+0x8a>
   1a190:	f10d 0904 	add.w	r9, sp, #4
   1a194:	4642      	mov	r2, r8
   1a196:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1a19a:	4649      	mov	r1, r9
   1a19c:	4650      	mov	r0, sl
   1a19e:	f7fe fb29 	bl	187f4 <_wcrtomb_r>
   1a1a2:	1c42      	adds	r2, r0, #1
   1a1a4:	4606      	mov	r6, r0
   1a1a6:	d032      	beq.n	1a20e <__fputwc+0x9a>
   1a1a8:	b320      	cbz	r0, 1a1f4 <__fputwc+0x80>
   1a1aa:	f89d c004 	ldrb.w	ip, [sp, #4]
   1a1ae:	2500      	movs	r5, #0
   1a1b0:	e009      	b.n	1a1c6 <__fputwc+0x52>
   1a1b2:	6823      	ldr	r3, [r4, #0]
   1a1b4:	1c5a      	adds	r2, r3, #1
   1a1b6:	6022      	str	r2, [r4, #0]
   1a1b8:	f883 c000 	strb.w	ip, [r3]
   1a1bc:	3501      	adds	r5, #1
   1a1be:	42b5      	cmp	r5, r6
   1a1c0:	d218      	bcs.n	1a1f4 <__fputwc+0x80>
   1a1c2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   1a1c6:	68a3      	ldr	r3, [r4, #8]
   1a1c8:	3b01      	subs	r3, #1
   1a1ca:	2b00      	cmp	r3, #0
   1a1cc:	60a3      	str	r3, [r4, #8]
   1a1ce:	daf0      	bge.n	1a1b2 <__fputwc+0x3e>
   1a1d0:	69a7      	ldr	r7, [r4, #24]
   1a1d2:	42bb      	cmp	r3, r7
   1a1d4:	4661      	mov	r1, ip
   1a1d6:	4622      	mov	r2, r4
   1a1d8:	4650      	mov	r0, sl
   1a1da:	db02      	blt.n	1a1e2 <__fputwc+0x6e>
   1a1dc:	f1bc 0f0a 	cmp.w	ip, #10
   1a1e0:	d1e7      	bne.n	1a1b2 <__fputwc+0x3e>
   1a1e2:	f000 f983 	bl	1a4ec <__swbuf_r>
   1a1e6:	1c43      	adds	r3, r0, #1
   1a1e8:	d1e8      	bne.n	1a1bc <__fputwc+0x48>
   1a1ea:	4606      	mov	r6, r0
   1a1ec:	4630      	mov	r0, r6
   1a1ee:	b002      	add	sp, #8
   1a1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a1f4:	4646      	mov	r6, r8
   1a1f6:	4630      	mov	r0, r6
   1a1f8:	b002      	add	sp, #8
   1a1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a1fe:	fa5f fc88 	uxtb.w	ip, r8
   1a202:	f88d c004 	strb.w	ip, [sp, #4]
   1a206:	4606      	mov	r6, r0
   1a208:	f10d 0904 	add.w	r9, sp, #4
   1a20c:	e7cf      	b.n	1a1ae <__fputwc+0x3a>
   1a20e:	89a3      	ldrh	r3, [r4, #12]
   1a210:	4630      	mov	r0, r6
   1a212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a216:	81a3      	strh	r3, [r4, #12]
   1a218:	b002      	add	sp, #8
   1a21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a21e:	bf00      	nop

0001a220 <_fputwc_r>:
   1a220:	b530      	push	{r4, r5, lr}
   1a222:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1a224:	f013 0f01 	tst.w	r3, #1
   1a228:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1a22c:	4614      	mov	r4, r2
   1a22e:	b083      	sub	sp, #12
   1a230:	4605      	mov	r5, r0
   1a232:	b29a      	uxth	r2, r3
   1a234:	d101      	bne.n	1a23a <_fputwc_r+0x1a>
   1a236:	0598      	lsls	r0, r3, #22
   1a238:	d51c      	bpl.n	1a274 <_fputwc_r+0x54>
   1a23a:	0490      	lsls	r0, r2, #18
   1a23c:	d406      	bmi.n	1a24c <_fputwc_r+0x2c>
   1a23e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a240:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1a244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1a248:	81a3      	strh	r3, [r4, #12]
   1a24a:	6662      	str	r2, [r4, #100]	; 0x64
   1a24c:	4622      	mov	r2, r4
   1a24e:	4628      	mov	r0, r5
   1a250:	f7ff ff90 	bl	1a174 <__fputwc>
   1a254:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1a256:	07da      	lsls	r2, r3, #31
   1a258:	4605      	mov	r5, r0
   1a25a:	d402      	bmi.n	1a262 <_fputwc_r+0x42>
   1a25c:	89a3      	ldrh	r3, [r4, #12]
   1a25e:	059b      	lsls	r3, r3, #22
   1a260:	d502      	bpl.n	1a268 <_fputwc_r+0x48>
   1a262:	4628      	mov	r0, r5
   1a264:	b003      	add	sp, #12
   1a266:	bd30      	pop	{r4, r5, pc}
   1a268:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a26a:	f7f7 ff61 	bl	12130 <__retarget_lock_release_recursive>
   1a26e:	4628      	mov	r0, r5
   1a270:	b003      	add	sp, #12
   1a272:	bd30      	pop	{r4, r5, pc}
   1a274:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a276:	9101      	str	r1, [sp, #4]
   1a278:	f7f7 ff58 	bl	1212c <__retarget_lock_acquire_recursive>
   1a27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a280:	9901      	ldr	r1, [sp, #4]
   1a282:	b29a      	uxth	r2, r3
   1a284:	e7d9      	b.n	1a23a <_fputwc_r+0x1a>
   1a286:	bf00      	nop

0001a288 <_wcsnrtombs_l>:
   1a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a28c:	b08b      	sub	sp, #44	; 0x2c
   1a28e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   1a292:	9f14      	ldr	r7, [sp, #80]	; 0x50
   1a294:	9103      	str	r1, [sp, #12]
   1a296:	4681      	mov	r9, r0
   1a298:	9205      	str	r2, [sp, #20]
   1a29a:	461e      	mov	r6, r3
   1a29c:	f1b8 0f00 	cmp.w	r8, #0
   1a2a0:	d05c      	beq.n	1a35c <_wcsnrtombs_l+0xd4>
   1a2a2:	9b03      	ldr	r3, [sp, #12]
   1a2a4:	2b00      	cmp	r3, #0
   1a2a6:	d05e      	beq.n	1a366 <_wcsnrtombs_l+0xde>
   1a2a8:	9b05      	ldr	r3, [sp, #20]
   1a2aa:	681d      	ldr	r5, [r3, #0]
   1a2ac:	2f00      	cmp	r7, #0
   1a2ae:	d06a      	beq.n	1a386 <_wcsnrtombs_l+0xfe>
   1a2b0:	1e74      	subs	r4, r6, #1
   1a2b2:	b34e      	cbz	r6, 1a308 <_wcsnrtombs_l+0x80>
   1a2b4:	9b03      	ldr	r3, [sp, #12]
   1a2b6:	9304      	str	r3, [sp, #16]
   1a2b8:	3d04      	subs	r5, #4
   1a2ba:	2600      	movs	r6, #0
   1a2bc:	9501      	str	r5, [sp, #4]
   1a2be:	e00b      	b.n	1a2d8 <_wcsnrtombs_l+0x50>
   1a2c0:	9b03      	ldr	r3, [sp, #12]
   1a2c2:	bb2b      	cbnz	r3, 1a310 <_wcsnrtombs_l+0x88>
   1a2c4:	9b01      	ldr	r3, [sp, #4]
   1a2c6:	681a      	ldr	r2, [r3, #0]
   1a2c8:	2a00      	cmp	r2, #0
   1a2ca:	d03a      	beq.n	1a342 <_wcsnrtombs_l+0xba>
   1a2cc:	45bc      	cmp	ip, r7
   1a2ce:	d25c      	bcs.n	1a38a <_wcsnrtombs_l+0x102>
   1a2d0:	3c01      	subs	r4, #1
   1a2d2:	1c63      	adds	r3, r4, #1
   1a2d4:	4666      	mov	r6, ip
   1a2d6:	d017      	beq.n	1a308 <_wcsnrtombs_l+0x80>
   1a2d8:	f8d8 3000 	ldr.w	r3, [r8]
   1a2dc:	9302      	str	r3, [sp, #8]
   1a2de:	9b01      	ldr	r3, [sp, #4]
   1a2e0:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   1a2e4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1a2e8:	9301      	str	r3, [sp, #4]
   1a2ea:	a907      	add	r1, sp, #28
   1a2ec:	4643      	mov	r3, r8
   1a2ee:	4648      	mov	r0, r9
   1a2f0:	f8d8 b004 	ldr.w	fp, [r8, #4]
   1a2f4:	47a8      	blx	r5
   1a2f6:	1c42      	adds	r2, r0, #1
   1a2f8:	d03a      	beq.n	1a370 <_wcsnrtombs_l+0xe8>
   1a2fa:	eb00 0c06 	add.w	ip, r0, r6
   1a2fe:	45bc      	cmp	ip, r7
   1a300:	d9de      	bls.n	1a2c0 <_wcsnrtombs_l+0x38>
   1a302:	9b02      	ldr	r3, [sp, #8]
   1a304:	e9c8 3b00 	strd	r3, fp, [r8]
   1a308:	4630      	mov	r0, r6
   1a30a:	b00b      	add	sp, #44	; 0x2c
   1a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a310:	2800      	cmp	r0, #0
   1a312:	dd0e      	ble.n	1a332 <_wcsnrtombs_l+0xaa>
   1a314:	9b04      	ldr	r3, [sp, #16]
   1a316:	9d01      	ldr	r5, [sp, #4]
   1a318:	4418      	add	r0, r3
   1a31a:	1e5a      	subs	r2, r3, #1
   1a31c:	a907      	add	r1, sp, #28
   1a31e:	f100 3eff 	add.w	lr, r0, #4294967295
   1a322:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a326:	f802 3f01 	strb.w	r3, [r2, #1]!
   1a32a:	4572      	cmp	r2, lr
   1a32c:	d1f9      	bne.n	1a322 <_wcsnrtombs_l+0x9a>
   1a32e:	9501      	str	r5, [sp, #4]
   1a330:	9004      	str	r0, [sp, #16]
   1a332:	9b05      	ldr	r3, [sp, #20]
   1a334:	681a      	ldr	r2, [r3, #0]
   1a336:	3204      	adds	r2, #4
   1a338:	601a      	str	r2, [r3, #0]
   1a33a:	9b01      	ldr	r3, [sp, #4]
   1a33c:	681a      	ldr	r2, [r3, #0]
   1a33e:	2a00      	cmp	r2, #0
   1a340:	d1c4      	bne.n	1a2cc <_wcsnrtombs_l+0x44>
   1a342:	9b03      	ldr	r3, [sp, #12]
   1a344:	b10b      	cbz	r3, 1a34a <_wcsnrtombs_l+0xc2>
   1a346:	9b05      	ldr	r3, [sp, #20]
   1a348:	601a      	str	r2, [r3, #0]
   1a34a:	f10c 36ff 	add.w	r6, ip, #4294967295
   1a34e:	2200      	movs	r2, #0
   1a350:	4630      	mov	r0, r6
   1a352:	f8c8 2000 	str.w	r2, [r8]
   1a356:	b00b      	add	sp, #44	; 0x2c
   1a358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a35c:	9b03      	ldr	r3, [sp, #12]
   1a35e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   1a362:	2b00      	cmp	r3, #0
   1a364:	d1a0      	bne.n	1a2a8 <_wcsnrtombs_l+0x20>
   1a366:	9b05      	ldr	r3, [sp, #20]
   1a368:	f04f 37ff 	mov.w	r7, #4294967295
   1a36c:	681d      	ldr	r5, [r3, #0]
   1a36e:	e79f      	b.n	1a2b0 <_wcsnrtombs_l+0x28>
   1a370:	4606      	mov	r6, r0
   1a372:	218a      	movs	r1, #138	; 0x8a
   1a374:	2200      	movs	r2, #0
   1a376:	4630      	mov	r0, r6
   1a378:	f8c9 1000 	str.w	r1, [r9]
   1a37c:	f8c8 2000 	str.w	r2, [r8]
   1a380:	b00b      	add	sp, #44	; 0x2c
   1a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a386:	463e      	mov	r6, r7
   1a388:	e7be      	b.n	1a308 <_wcsnrtombs_l+0x80>
   1a38a:	4666      	mov	r6, ip
   1a38c:	e7bc      	b.n	1a308 <_wcsnrtombs_l+0x80>
   1a38e:	bf00      	nop

0001a390 <_wcsnrtombs_r>:
   1a390:	b510      	push	{r4, lr}
   1a392:	b084      	sub	sp, #16
   1a394:	4c05      	ldr	r4, [pc, #20]	; (1a3ac <_wcsnrtombs_r+0x1c>)
   1a396:	9806      	ldr	r0, [sp, #24]
   1a398:	9000      	str	r0, [sp, #0]
   1a39a:	9807      	ldr	r0, [sp, #28]
   1a39c:	9001      	str	r0, [sp, #4]
   1a39e:	4804      	ldr	r0, [pc, #16]	; (1a3b0 <_wcsnrtombs_r+0x20>)
   1a3a0:	6800      	ldr	r0, [r0, #0]
   1a3a2:	9402      	str	r4, [sp, #8]
   1a3a4:	f7ff ff70 	bl	1a288 <_wcsnrtombs_l>
   1a3a8:	b004      	add	sp, #16
   1a3aa:	bd10      	pop	{r4, pc}
   1a3ac:	20008a2c 	.word	0x20008a2c
   1a3b0:	20008fb4 	.word	0x20008fb4

0001a3b4 <category>:
   1a3b4:	4b15      	ldr	r3, [pc, #84]	; (1a40c <category+0x58>)
   1a3b6:	4298      	cmp	r0, r3
   1a3b8:	d823      	bhi.n	1a402 <category+0x4e>
   1a3ba:	b570      	push	{r4, r5, r6, lr}
   1a3bc:	4e14      	ldr	r6, [pc, #80]	; (1a410 <category+0x5c>)
   1a3be:	f04f 0e00 	mov.w	lr, #0
   1a3c2:	f640 04db 	movw	r4, #2267	; 0x8db
   1a3c6:	e003      	b.n	1a3d0 <category+0x1c>
   1a3c8:	f102 0e01 	add.w	lr, r2, #1
   1a3cc:	45a6      	cmp	lr, r4
   1a3ce:	dc16      	bgt.n	1a3fe <category+0x4a>
   1a3d0:	eb04 020e 	add.w	r2, r4, lr
   1a3d4:	f022 0301 	bic.w	r3, r2, #1
   1a3d8:	eb03 0362 	add.w	r3, r3, r2, asr #1
   1a3dc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   1a3e0:	1052      	asrs	r2, r2, #1
   1a3e2:	7859      	ldrb	r1, [r3, #1]
   1a3e4:	885d      	ldrh	r5, [r3, #2]
   1a3e6:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   1a3ea:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1a3ee:	448c      	add	ip, r1
   1a3f0:	4560      	cmp	r0, ip
   1a3f2:	d8e9      	bhi.n	1a3c8 <category+0x14>
   1a3f4:	4288      	cmp	r0, r1
   1a3f6:	d206      	bcs.n	1a406 <category+0x52>
   1a3f8:	1e54      	subs	r4, r2, #1
   1a3fa:	45a6      	cmp	lr, r4
   1a3fc:	dde8      	ble.n	1a3d0 <category+0x1c>
   1a3fe:	20ff      	movs	r0, #255	; 0xff
   1a400:	bd70      	pop	{r4, r5, r6, pc}
   1a402:	20ff      	movs	r0, #255	; 0xff
   1a404:	4770      	bx	lr
   1a406:	7818      	ldrb	r0, [r3, #0]
   1a408:	bd70      	pop	{r4, r5, r6, pc}
   1a40a:	bf00      	nop
   1a40c:	000e01ef 	.word	0x000e01ef
   1a410:	20002b3c 	.word	0x20002b3c

0001a414 <__smakebuf_r>:
   1a414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a418:	898b      	ldrh	r3, [r1, #12]
   1a41a:	460c      	mov	r4, r1
   1a41c:	0799      	lsls	r1, r3, #30
   1a41e:	b096      	sub	sp, #88	; 0x58
   1a420:	d508      	bpl.n	1a434 <__smakebuf_r+0x20>
   1a422:	f104 0343 	add.w	r3, r4, #67	; 0x43
   1a426:	2201      	movs	r2, #1
   1a428:	e9c4 3204 	strd	r3, r2, [r4, #16]
   1a42c:	6023      	str	r3, [r4, #0]
   1a42e:	b016      	add	sp, #88	; 0x58
   1a430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1a438:	2900      	cmp	r1, #0
   1a43a:	4606      	mov	r6, r0
   1a43c:	db25      	blt.n	1a48a <__smakebuf_r+0x76>
   1a43e:	466a      	mov	r2, sp
   1a440:	f000 f8ac 	bl	1a59c <_fstat_r>
   1a444:	2800      	cmp	r0, #0
   1a446:	db1f      	blt.n	1a488 <__smakebuf_r+0x74>
   1a448:	9d01      	ldr	r5, [sp, #4]
   1a44a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1a44e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1a452:	fab5 f585 	clz	r5, r5
   1a456:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1a45a:	096d      	lsrs	r5, r5, #5
   1a45c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1a460:	4641      	mov	r1, r8
   1a462:	4630      	mov	r0, r6
   1a464:	f7f5 fd38 	bl	fed8 <_malloc_r>
   1a468:	b1e0      	cbz	r0, 1a4a4 <__smakebuf_r+0x90>
   1a46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a46e:	f8c4 8014 	str.w	r8, [r4, #20]
   1a472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a476:	6020      	str	r0, [r4, #0]
   1a478:	6120      	str	r0, [r4, #16]
   1a47a:	81a3      	strh	r3, [r4, #12]
   1a47c:	bb35      	cbnz	r5, 1a4cc <__smakebuf_r+0xb8>
   1a47e:	433b      	orrs	r3, r7
   1a480:	81a3      	strh	r3, [r4, #12]
   1a482:	b016      	add	sp, #88	; 0x58
   1a484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a488:	89a3      	ldrh	r3, [r4, #12]
   1a48a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1a48e:	d019      	beq.n	1a4c4 <__smakebuf_r+0xb0>
   1a490:	f04f 0840 	mov.w	r8, #64	; 0x40
   1a494:	2500      	movs	r5, #0
   1a496:	4641      	mov	r1, r8
   1a498:	4630      	mov	r0, r6
   1a49a:	462f      	mov	r7, r5
   1a49c:	f7f5 fd1c 	bl	fed8 <_malloc_r>
   1a4a0:	2800      	cmp	r0, #0
   1a4a2:	d1e2      	bne.n	1a46a <__smakebuf_r+0x56>
   1a4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a4a8:	059a      	lsls	r2, r3, #22
   1a4aa:	d4c0      	bmi.n	1a42e <__smakebuf_r+0x1a>
   1a4ac:	f023 0303 	bic.w	r3, r3, #3
   1a4b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1a4b4:	f043 0302 	orr.w	r3, r3, #2
   1a4b8:	2101      	movs	r1, #1
   1a4ba:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1a4be:	81a3      	strh	r3, [r4, #12]
   1a4c0:	6022      	str	r2, [r4, #0]
   1a4c2:	e7b4      	b.n	1a42e <__smakebuf_r+0x1a>
   1a4c4:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1a4c8:	462f      	mov	r7, r5
   1a4ca:	e7c9      	b.n	1a460 <__smakebuf_r+0x4c>
   1a4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1a4d0:	4630      	mov	r0, r6
   1a4d2:	f000 f879 	bl	1a5c8 <_isatty_r>
   1a4d6:	b910      	cbnz	r0, 1a4de <__smakebuf_r+0xca>
   1a4d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a4dc:	e7cf      	b.n	1a47e <__smakebuf_r+0x6a>
   1a4de:	89a3      	ldrh	r3, [r4, #12]
   1a4e0:	f023 0303 	bic.w	r3, r3, #3
   1a4e4:	f043 0301 	orr.w	r3, r3, #1
   1a4e8:	b21b      	sxth	r3, r3
   1a4ea:	e7c8      	b.n	1a47e <__smakebuf_r+0x6a>

0001a4ec <__swbuf_r>:
   1a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4ee:	460d      	mov	r5, r1
   1a4f0:	4614      	mov	r4, r2
   1a4f2:	4606      	mov	r6, r0
   1a4f4:	b110      	cbz	r0, 1a4fc <__swbuf_r+0x10>
   1a4f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1a4f8:	2b00      	cmp	r3, #0
   1a4fa:	d04c      	beq.n	1a596 <__swbuf_r+0xaa>
   1a4fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1a500:	69a3      	ldr	r3, [r4, #24]
   1a502:	60a3      	str	r3, [r4, #8]
   1a504:	0717      	lsls	r7, r2, #28
   1a506:	b290      	uxth	r0, r2
   1a508:	d51b      	bpl.n	1a542 <__swbuf_r+0x56>
   1a50a:	6923      	ldr	r3, [r4, #16]
   1a50c:	b1cb      	cbz	r3, 1a542 <__swbuf_r+0x56>
   1a50e:	b2ed      	uxtb	r5, r5
   1a510:	0481      	lsls	r1, r0, #18
   1a512:	462f      	mov	r7, r5
   1a514:	d522      	bpl.n	1a55c <__swbuf_r+0x70>
   1a516:	6822      	ldr	r2, [r4, #0]
   1a518:	6961      	ldr	r1, [r4, #20]
   1a51a:	1ad3      	subs	r3, r2, r3
   1a51c:	4299      	cmp	r1, r3
   1a51e:	dd29      	ble.n	1a574 <__swbuf_r+0x88>
   1a520:	3301      	adds	r3, #1
   1a522:	68a1      	ldr	r1, [r4, #8]
   1a524:	3901      	subs	r1, #1
   1a526:	60a1      	str	r1, [r4, #8]
   1a528:	1c51      	adds	r1, r2, #1
   1a52a:	6021      	str	r1, [r4, #0]
   1a52c:	7015      	strb	r5, [r2, #0]
   1a52e:	6962      	ldr	r2, [r4, #20]
   1a530:	429a      	cmp	r2, r3
   1a532:	d027      	beq.n	1a584 <__swbuf_r+0x98>
   1a534:	89a3      	ldrh	r3, [r4, #12]
   1a536:	07db      	lsls	r3, r3, #31
   1a538:	d501      	bpl.n	1a53e <__swbuf_r+0x52>
   1a53a:	2d0a      	cmp	r5, #10
   1a53c:	d022      	beq.n	1a584 <__swbuf_r+0x98>
   1a53e:	4638      	mov	r0, r7
   1a540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a542:	4621      	mov	r1, r4
   1a544:	4630      	mov	r0, r6
   1a546:	f7ff fdaf 	bl	1a0a8 <__swsetup_r>
   1a54a:	bb08      	cbnz	r0, 1a590 <__swbuf_r+0xa4>
   1a54c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1a550:	6923      	ldr	r3, [r4, #16]
   1a552:	b290      	uxth	r0, r2
   1a554:	b2ed      	uxtb	r5, r5
   1a556:	0481      	lsls	r1, r0, #18
   1a558:	462f      	mov	r7, r5
   1a55a:	d4dc      	bmi.n	1a516 <__swbuf_r+0x2a>
   1a55c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1a560:	81a2      	strh	r2, [r4, #12]
   1a562:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a564:	6961      	ldr	r1, [r4, #20]
   1a566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1a56a:	6662      	str	r2, [r4, #100]	; 0x64
   1a56c:	6822      	ldr	r2, [r4, #0]
   1a56e:	1ad3      	subs	r3, r2, r3
   1a570:	4299      	cmp	r1, r3
   1a572:	dcd5      	bgt.n	1a520 <__swbuf_r+0x34>
   1a574:	4621      	mov	r1, r4
   1a576:	4630      	mov	r0, r6
   1a578:	f7fc fea0 	bl	172bc <_fflush_r>
   1a57c:	b940      	cbnz	r0, 1a590 <__swbuf_r+0xa4>
   1a57e:	6822      	ldr	r2, [r4, #0]
   1a580:	2301      	movs	r3, #1
   1a582:	e7ce      	b.n	1a522 <__swbuf_r+0x36>
   1a584:	4621      	mov	r1, r4
   1a586:	4630      	mov	r0, r6
   1a588:	f7fc fe98 	bl	172bc <_fflush_r>
   1a58c:	2800      	cmp	r0, #0
   1a58e:	d0d6      	beq.n	1a53e <__swbuf_r+0x52>
   1a590:	f04f 37ff 	mov.w	r7, #4294967295
   1a594:	e7d3      	b.n	1a53e <__swbuf_r+0x52>
   1a596:	f7f7 f9d7 	bl	11948 <__sinit>
   1a59a:	e7af      	b.n	1a4fc <__swbuf_r+0x10>

0001a59c <_fstat_r>:
   1a59c:	b570      	push	{r4, r5, r6, lr}
   1a59e:	460c      	mov	r4, r1
   1a5a0:	4d08      	ldr	r5, [pc, #32]	; (1a5c4 <_fstat_r+0x28>)
   1a5a2:	4603      	mov	r3, r0
   1a5a4:	2600      	movs	r6, #0
   1a5a6:	4620      	mov	r0, r4
   1a5a8:	4611      	mov	r1, r2
   1a5aa:	461c      	mov	r4, r3
   1a5ac:	602e      	str	r6, [r5, #0]
   1a5ae:	f7f3 ff05 	bl	e3bc <_fstat>
   1a5b2:	1c43      	adds	r3, r0, #1
   1a5b4:	d000      	beq.n	1a5b8 <_fstat_r+0x1c>
   1a5b6:	bd70      	pop	{r4, r5, r6, pc}
   1a5b8:	682b      	ldr	r3, [r5, #0]
   1a5ba:	2b00      	cmp	r3, #0
   1a5bc:	d0fb      	beq.n	1a5b6 <_fstat_r+0x1a>
   1a5be:	6023      	str	r3, [r4, #0]
   1a5c0:	bd70      	pop	{r4, r5, r6, pc}
   1a5c2:	bf00      	nop
   1a5c4:	20034b4c 	.word	0x20034b4c

0001a5c8 <_isatty_r>:
   1a5c8:	b538      	push	{r3, r4, r5, lr}
   1a5ca:	4d07      	ldr	r5, [pc, #28]	; (1a5e8 <_isatty_r+0x20>)
   1a5cc:	2200      	movs	r2, #0
   1a5ce:	4604      	mov	r4, r0
   1a5d0:	4608      	mov	r0, r1
   1a5d2:	602a      	str	r2, [r5, #0]
   1a5d4:	f7f3 fef8 	bl	e3c8 <_isatty>
   1a5d8:	1c43      	adds	r3, r0, #1
   1a5da:	d000      	beq.n	1a5de <_isatty_r+0x16>
   1a5dc:	bd38      	pop	{r3, r4, r5, pc}
   1a5de:	682b      	ldr	r3, [r5, #0]
   1a5e0:	2b00      	cmp	r3, #0
   1a5e2:	d0fb      	beq.n	1a5dc <_isatty_r+0x14>
   1a5e4:	6023      	str	r3, [r4, #0]
   1a5e6:	bd38      	pop	{r3, r4, r5, pc}
   1a5e8:	20034b4c 	.word	0x20034b4c

0001a5ec <__aeabi_drsub>:
   1a5ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1a5f0:	e002      	b.n	1a5f8 <__adddf3>
   1a5f2:	bf00      	nop

0001a5f4 <__aeabi_dsub>:
   1a5f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001a5f8 <__adddf3>:
   1a5f8:	b530      	push	{r4, r5, lr}
   1a5fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1a5fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1a602:	ea94 0f05 	teq	r4, r5
   1a606:	bf08      	it	eq
   1a608:	ea90 0f02 	teqeq	r0, r2
   1a60c:	bf1f      	itttt	ne
   1a60e:	ea54 0c00 	orrsne.w	ip, r4, r0
   1a612:	ea55 0c02 	orrsne.w	ip, r5, r2
   1a616:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1a61a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a61e:	f000 80e2 	beq.w	1a7e6 <__adddf3+0x1ee>
   1a622:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1a626:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1a62a:	bfb8      	it	lt
   1a62c:	426d      	neglt	r5, r5
   1a62e:	dd0c      	ble.n	1a64a <__adddf3+0x52>
   1a630:	442c      	add	r4, r5
   1a632:	ea80 0202 	eor.w	r2, r0, r2
   1a636:	ea81 0303 	eor.w	r3, r1, r3
   1a63a:	ea82 0000 	eor.w	r0, r2, r0
   1a63e:	ea83 0101 	eor.w	r1, r3, r1
   1a642:	ea80 0202 	eor.w	r2, r0, r2
   1a646:	ea81 0303 	eor.w	r3, r1, r3
   1a64a:	2d36      	cmp	r5, #54	; 0x36
   1a64c:	bf88      	it	hi
   1a64e:	bd30      	pophi	{r4, r5, pc}
   1a650:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a654:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1a658:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1a65c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1a660:	d002      	beq.n	1a668 <__adddf3+0x70>
   1a662:	4240      	negs	r0, r0
   1a664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a668:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1a66c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1a670:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1a674:	d002      	beq.n	1a67c <__adddf3+0x84>
   1a676:	4252      	negs	r2, r2
   1a678:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1a67c:	ea94 0f05 	teq	r4, r5
   1a680:	f000 80a7 	beq.w	1a7d2 <__adddf3+0x1da>
   1a684:	f1a4 0401 	sub.w	r4, r4, #1
   1a688:	f1d5 0e20 	rsbs	lr, r5, #32
   1a68c:	db0d      	blt.n	1a6aa <__adddf3+0xb2>
   1a68e:	fa02 fc0e 	lsl.w	ip, r2, lr
   1a692:	fa22 f205 	lsr.w	r2, r2, r5
   1a696:	1880      	adds	r0, r0, r2
   1a698:	f141 0100 	adc.w	r1, r1, #0
   1a69c:	fa03 f20e 	lsl.w	r2, r3, lr
   1a6a0:	1880      	adds	r0, r0, r2
   1a6a2:	fa43 f305 	asr.w	r3, r3, r5
   1a6a6:	4159      	adcs	r1, r3
   1a6a8:	e00e      	b.n	1a6c8 <__adddf3+0xd0>
   1a6aa:	f1a5 0520 	sub.w	r5, r5, #32
   1a6ae:	f10e 0e20 	add.w	lr, lr, #32
   1a6b2:	2a01      	cmp	r2, #1
   1a6b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   1a6b8:	bf28      	it	cs
   1a6ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   1a6be:	fa43 f305 	asr.w	r3, r3, r5
   1a6c2:	18c0      	adds	r0, r0, r3
   1a6c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1a6c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a6cc:	d507      	bpl.n	1a6de <__adddf3+0xe6>
   1a6ce:	f04f 0e00 	mov.w	lr, #0
   1a6d2:	f1dc 0c00 	rsbs	ip, ip, #0
   1a6d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   1a6da:	eb6e 0101 	sbc.w	r1, lr, r1
   1a6de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1a6e2:	d31b      	bcc.n	1a71c <__adddf3+0x124>
   1a6e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1a6e8:	d30c      	bcc.n	1a704 <__adddf3+0x10c>
   1a6ea:	0849      	lsrs	r1, r1, #1
   1a6ec:	ea5f 0030 	movs.w	r0, r0, rrx
   1a6f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1a6f4:	f104 0401 	add.w	r4, r4, #1
   1a6f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1a6fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1a700:	f080 809a 	bcs.w	1a838 <__adddf3+0x240>
   1a704:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1a708:	bf08      	it	eq
   1a70a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1a70e:	f150 0000 	adcs.w	r0, r0, #0
   1a712:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a716:	ea41 0105 	orr.w	r1, r1, r5
   1a71a:	bd30      	pop	{r4, r5, pc}
   1a71c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1a720:	4140      	adcs	r0, r0
   1a722:	eb41 0101 	adc.w	r1, r1, r1
   1a726:	3c01      	subs	r4, #1
   1a728:	bf28      	it	cs
   1a72a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1a72e:	d2e9      	bcs.n	1a704 <__adddf3+0x10c>
   1a730:	f091 0f00 	teq	r1, #0
   1a734:	bf04      	itt	eq
   1a736:	4601      	moveq	r1, r0
   1a738:	2000      	moveq	r0, #0
   1a73a:	fab1 f381 	clz	r3, r1
   1a73e:	bf08      	it	eq
   1a740:	3320      	addeq	r3, #32
   1a742:	f1a3 030b 	sub.w	r3, r3, #11
   1a746:	f1b3 0220 	subs.w	r2, r3, #32
   1a74a:	da0c      	bge.n	1a766 <__adddf3+0x16e>
   1a74c:	320c      	adds	r2, #12
   1a74e:	dd08      	ble.n	1a762 <__adddf3+0x16a>
   1a750:	f102 0c14 	add.w	ip, r2, #20
   1a754:	f1c2 020c 	rsb	r2, r2, #12
   1a758:	fa01 f00c 	lsl.w	r0, r1, ip
   1a75c:	fa21 f102 	lsr.w	r1, r1, r2
   1a760:	e00c      	b.n	1a77c <__adddf3+0x184>
   1a762:	f102 0214 	add.w	r2, r2, #20
   1a766:	bfd8      	it	le
   1a768:	f1c2 0c20 	rsble	ip, r2, #32
   1a76c:	fa01 f102 	lsl.w	r1, r1, r2
   1a770:	fa20 fc0c 	lsr.w	ip, r0, ip
   1a774:	bfdc      	itt	le
   1a776:	ea41 010c 	orrle.w	r1, r1, ip
   1a77a:	4090      	lslle	r0, r2
   1a77c:	1ae4      	subs	r4, r4, r3
   1a77e:	bfa2      	ittt	ge
   1a780:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1a784:	4329      	orrge	r1, r5
   1a786:	bd30      	popge	{r4, r5, pc}
   1a788:	ea6f 0404 	mvn.w	r4, r4
   1a78c:	3c1f      	subs	r4, #31
   1a78e:	da1c      	bge.n	1a7ca <__adddf3+0x1d2>
   1a790:	340c      	adds	r4, #12
   1a792:	dc0e      	bgt.n	1a7b2 <__adddf3+0x1ba>
   1a794:	f104 0414 	add.w	r4, r4, #20
   1a798:	f1c4 0220 	rsb	r2, r4, #32
   1a79c:	fa20 f004 	lsr.w	r0, r0, r4
   1a7a0:	fa01 f302 	lsl.w	r3, r1, r2
   1a7a4:	ea40 0003 	orr.w	r0, r0, r3
   1a7a8:	fa21 f304 	lsr.w	r3, r1, r4
   1a7ac:	ea45 0103 	orr.w	r1, r5, r3
   1a7b0:	bd30      	pop	{r4, r5, pc}
   1a7b2:	f1c4 040c 	rsb	r4, r4, #12
   1a7b6:	f1c4 0220 	rsb	r2, r4, #32
   1a7ba:	fa20 f002 	lsr.w	r0, r0, r2
   1a7be:	fa01 f304 	lsl.w	r3, r1, r4
   1a7c2:	ea40 0003 	orr.w	r0, r0, r3
   1a7c6:	4629      	mov	r1, r5
   1a7c8:	bd30      	pop	{r4, r5, pc}
   1a7ca:	fa21 f004 	lsr.w	r0, r1, r4
   1a7ce:	4629      	mov	r1, r5
   1a7d0:	bd30      	pop	{r4, r5, pc}
   1a7d2:	f094 0f00 	teq	r4, #0
   1a7d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1a7da:	bf06      	itte	eq
   1a7dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1a7e0:	3401      	addeq	r4, #1
   1a7e2:	3d01      	subne	r5, #1
   1a7e4:	e74e      	b.n	1a684 <__adddf3+0x8c>
   1a7e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a7ea:	bf18      	it	ne
   1a7ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a7f0:	d029      	beq.n	1a846 <__adddf3+0x24e>
   1a7f2:	ea94 0f05 	teq	r4, r5
   1a7f6:	bf08      	it	eq
   1a7f8:	ea90 0f02 	teqeq	r0, r2
   1a7fc:	d005      	beq.n	1a80a <__adddf3+0x212>
   1a7fe:	ea54 0c00 	orrs.w	ip, r4, r0
   1a802:	bf04      	itt	eq
   1a804:	4619      	moveq	r1, r3
   1a806:	4610      	moveq	r0, r2
   1a808:	bd30      	pop	{r4, r5, pc}
   1a80a:	ea91 0f03 	teq	r1, r3
   1a80e:	bf1e      	ittt	ne
   1a810:	2100      	movne	r1, #0
   1a812:	2000      	movne	r0, #0
   1a814:	bd30      	popne	{r4, r5, pc}
   1a816:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1a81a:	d105      	bne.n	1a828 <__adddf3+0x230>
   1a81c:	0040      	lsls	r0, r0, #1
   1a81e:	4149      	adcs	r1, r1
   1a820:	bf28      	it	cs
   1a822:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1a826:	bd30      	pop	{r4, r5, pc}
   1a828:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1a82c:	bf3c      	itt	cc
   1a82e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1a832:	bd30      	popcc	{r4, r5, pc}
   1a834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a838:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1a83c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1a840:	f04f 0000 	mov.w	r0, #0
   1a844:	bd30      	pop	{r4, r5, pc}
   1a846:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a84a:	bf1a      	itte	ne
   1a84c:	4619      	movne	r1, r3
   1a84e:	4610      	movne	r0, r2
   1a850:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1a854:	bf1c      	itt	ne
   1a856:	460b      	movne	r3, r1
   1a858:	4602      	movne	r2, r0
   1a85a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1a85e:	bf06      	itte	eq
   1a860:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1a864:	ea91 0f03 	teqeq	r1, r3
   1a868:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1a86c:	bd30      	pop	{r4, r5, pc}
   1a86e:	bf00      	nop

0001a870 <__aeabi_ui2d>:
   1a870:	f090 0f00 	teq	r0, #0
   1a874:	bf04      	itt	eq
   1a876:	2100      	moveq	r1, #0
   1a878:	4770      	bxeq	lr
   1a87a:	b530      	push	{r4, r5, lr}
   1a87c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a880:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a884:	f04f 0500 	mov.w	r5, #0
   1a888:	f04f 0100 	mov.w	r1, #0
   1a88c:	e750      	b.n	1a730 <__adddf3+0x138>
   1a88e:	bf00      	nop

0001a890 <__aeabi_i2d>:
   1a890:	f090 0f00 	teq	r0, #0
   1a894:	bf04      	itt	eq
   1a896:	2100      	moveq	r1, #0
   1a898:	4770      	bxeq	lr
   1a89a:	b530      	push	{r4, r5, lr}
   1a89c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a8a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a8a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1a8a8:	bf48      	it	mi
   1a8aa:	4240      	negmi	r0, r0
   1a8ac:	f04f 0100 	mov.w	r1, #0
   1a8b0:	e73e      	b.n	1a730 <__adddf3+0x138>
   1a8b2:	bf00      	nop

0001a8b4 <__aeabi_f2d>:
   1a8b4:	0042      	lsls	r2, r0, #1
   1a8b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1a8ba:	ea4f 0131 	mov.w	r1, r1, rrx
   1a8be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1a8c2:	bf1f      	itttt	ne
   1a8c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1a8c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1a8cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1a8d0:	4770      	bxne	lr
   1a8d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1a8d6:	bf08      	it	eq
   1a8d8:	4770      	bxeq	lr
   1a8da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1a8de:	bf04      	itt	eq
   1a8e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1a8e4:	4770      	bxeq	lr
   1a8e6:	b530      	push	{r4, r5, lr}
   1a8e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   1a8ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a8f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1a8f4:	e71c      	b.n	1a730 <__adddf3+0x138>
   1a8f6:	bf00      	nop

0001a8f8 <__aeabi_ul2d>:
   1a8f8:	ea50 0201 	orrs.w	r2, r0, r1
   1a8fc:	bf08      	it	eq
   1a8fe:	4770      	bxeq	lr
   1a900:	b530      	push	{r4, r5, lr}
   1a902:	f04f 0500 	mov.w	r5, #0
   1a906:	e00a      	b.n	1a91e <__aeabi_l2d+0x16>

0001a908 <__aeabi_l2d>:
   1a908:	ea50 0201 	orrs.w	r2, r0, r1
   1a90c:	bf08      	it	eq
   1a90e:	4770      	bxeq	lr
   1a910:	b530      	push	{r4, r5, lr}
   1a912:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1a916:	d502      	bpl.n	1a91e <__aeabi_l2d+0x16>
   1a918:	4240      	negs	r0, r0
   1a91a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a91e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a922:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a926:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1a92a:	f43f aed8 	beq.w	1a6de <__adddf3+0xe6>
   1a92e:	f04f 0203 	mov.w	r2, #3
   1a932:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1a936:	bf18      	it	ne
   1a938:	3203      	addne	r2, #3
   1a93a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1a93e:	bf18      	it	ne
   1a940:	3203      	addne	r2, #3
   1a942:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1a946:	f1c2 0320 	rsb	r3, r2, #32
   1a94a:	fa00 fc03 	lsl.w	ip, r0, r3
   1a94e:	fa20 f002 	lsr.w	r0, r0, r2
   1a952:	fa01 fe03 	lsl.w	lr, r1, r3
   1a956:	ea40 000e 	orr.w	r0, r0, lr
   1a95a:	fa21 f102 	lsr.w	r1, r1, r2
   1a95e:	4414      	add	r4, r2
   1a960:	e6bd      	b.n	1a6de <__adddf3+0xe6>
   1a962:	bf00      	nop

0001a964 <__aeabi_d2lz>:
   1a964:	b508      	push	{r3, lr}
   1a966:	4602      	mov	r2, r0
   1a968:	460b      	mov	r3, r1
   1a96a:	ec43 2b17 	vmov	d7, r2, r3
   1a96e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1a972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a976:	d403      	bmi.n	1a980 <__aeabi_d2lz+0x1c>
   1a978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a97c:	f000 b80c 	b.w	1a998 <__aeabi_d2ulz>
   1a980:	eeb1 7b47 	vneg.f64	d7, d7
   1a984:	ec51 0b17 	vmov	r0, r1, d7
   1a988:	f000 f806 	bl	1a998 <__aeabi_d2ulz>
   1a98c:	4240      	negs	r0, r0
   1a98e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a992:	bd08      	pop	{r3, pc}
   1a994:	0000      	movs	r0, r0
	...

0001a998 <__aeabi_d2ulz>:
   1a998:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 1a9c8 <__aeabi_d2ulz+0x30>
   1a99c:	ec41 0b17 	vmov	d7, r0, r1
   1a9a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 1a9d0 <__aeabi_d2ulz+0x38>
   1a9a4:	ee27 6b06 	vmul.f64	d6, d7, d6
   1a9a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   1a9ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   1a9b0:	eea4 7b45 	vfms.f64	d7, d4, d5
   1a9b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   1a9b8:	ee16 1a10 	vmov	r1, s12
   1a9bc:	ee17 0a90 	vmov	r0, s15
   1a9c0:	4770      	bx	lr
   1a9c2:	bf00      	nop
   1a9c4:	f3af 8000 	nop.w
   1a9c8:	00000000 	.word	0x00000000
   1a9cc:	3df00000 	.word	0x3df00000
   1a9d0:	00000000 	.word	0x00000000
   1a9d4:	41f00000 	.word	0x41f00000

0001a9d8 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   1a9d8:	f85f f000 	ldr.w	pc, [pc]	; 1a9dc <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1a9dc:	60001775 	.word	0x60001775

0001a9e0 <___ZN16CrashReportClasscvbEv_veneer>:
   1a9e0:	f85f f000 	ldr.w	pc, [pc]	; 1a9e4 <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1a9e4:	60001e79 	.word	0x60001e79

0001a9e8 <__usb_init_veneer>:
   1a9e8:	f85f f000 	ldr.w	pc, [pc]	; 1a9ec <__usb_init_veneer+0x4>
   1a9ec:	60002505 	.word	0x60002505

0001a9f0 <___reboot_Teensyduino__veneer>:
   1a9f0:	f85f f000 	ldr.w	pc, [pc]	; 1a9f4 <___reboot_Teensyduino__veneer+0x4>
   1a9f4:	600025ed 	.word	0x600025ed

0001a9f8 <___Z12do_hibernatev_veneer>:
   1a9f8:	f85f f000 	ldr.w	pc, [pc]	; 1a9fc <___Z12do_hibernatev_veneer+0x4>
   1a9fc:	60001675 	.word	0x60001675

0001aa00 <___init_veneer>:
   1aa00:	f85f f000 	ldr.w	pc, [pc]	; 1aa04 <___init_veneer+0x4>
   1aa04:	60002695 	.word	0x60002695
	...

Disassembly of section .fini:

0001aa10 <_fini>:
   1aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa12:	bf00      	nop
